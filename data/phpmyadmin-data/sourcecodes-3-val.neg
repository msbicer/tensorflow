<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * * @package PhpMyAdmin */class PMA_Theme_Manager{    /**     * @var string path to theme folder     * @access protected     */    var $_themes_path;    /**     * @var array available themes     */    var $themes = array();    /**     * @var string  cookie name     */    var $cookie_name = 'pma_theme';    /**     * @var boolean     */    var $per_server = false;    /**     * @var string name of active theme     */    var $active_theme = '';    /**     * @var PMA_Theme PMA_Theme active theme     */    var $theme = null;    /**     * @var string     */    var $theme_default = 'original';    function __construct()    {        $this->init();    }    /**     * sets path to folder containing the themes     *     * @param string  $path   path to themes folder     * @return  boolean success     */    function setThemesPath($path)    {        if (! $this->_checkThemeFolder($path)) {            return false;        }        $this->_themes_path = trim($path);        return true;    }    /**     * @public     * @return  string     */    function getThemesPath()    {        return $this->_themes_path;    }    /**     * sets if there are different themes per server     *     * @param boolean $per_server     */    function setThemePerServer($per_server)    {        $this->per_server  = (bool) $per_server;    }    function init()    {        $this->themes = array();        $this->theme_default = 'original';        $this->active_theme = '';        if (! $this->setThemesPath($GLOBALS['cfg']['ThemePath'])) {            return false;        }        $this->setThemePerServer($GLOBALS['cfg']['ThemePerServer']);        $this->loadThemes();        $this->theme = new PMA_Theme;        if (! $this->checkTheme($GLOBALS['cfg']['ThemeDefault'])) {            trigger_error(                sprintf(                    __('Default theme %s not found!'),                    htmlspecialchars($GLOBALS['cfg']['ThemeDefault'])                    ),                E_USER_ERROR                );            $GLOBALS['cfg']['ThemeDefault'] = false;        }        $this->theme_default = $GLOBALS['cfg']['ThemeDefault'];        // check if user have a theme cookie        if (! $this->getThemeCookie()         || ! $this->setActiveTheme($this->getThemeCookie())) {            // otherwise use default theme            if ($GLOBALS['cfg']['ThemeDefault']) {                $this->setActiveTheme($GLOBALS['cfg']['ThemeDefault']);            } else {                // or original theme                $this->setActiveTheme('original');            }        }    }    function checkConfig()    {        if ($this->_themes_path != trim($GLOBALS['cfg']['ThemePath'])         || $this->theme_default != $GLOBALS['cfg']['ThemeDefault']) {            $this->init();        } else {            // at least the theme path needs to be checked every time for new            // themes, as there is no other way at the moment to keep track of            // new or removed themes            $this->loadThemes();        }    }    function setActiveTheme($theme = null)    {        if (! $this->checkTheme($theme)) {            trigger_error(                sprintf(                    __('Theme %s not found!'),                    htmlspecialchars($theme)                ),                E_USER_ERROR);            return false;        }        $this->active_theme = $theme;        $this->theme = $this->themes[$theme];        // need to set later        //$this->setThemeCookie();        return true;    }    /**     * @return  string  cookie name     */    function getThemeCookieName()    {        // Allow different theme per server        if (isset($GLOBALS['server']) && $this->per_server) {            return $this->cookie_name . '-' . $GLOBALS['server'];        } else {            return $this->cookie_name;        }    }    /**     * returns name of theme stored in the cookie     * @return  string  theme name from cookie     */    function getThemeCookie()    {        if (isset($_COOKIE[$this->getThemeCookieName()])) {            return $_COOKIE[$this->getThemeCookieName()];        }        return false;    }    /**     * save theme in cookie     *     * @return bool true     */    function setThemeCookie()    {        $GLOBALS['PMA_Config']->setCookie($this->getThemeCookieName(), $this->theme->id,            $this->theme_default);        // force a change of a dummy session variable to avoid problems        // with the caching of phpmyadmin.css.php        $GLOBALS['PMA_Config']->set('theme-update', $this->theme->id);        return true;    }    /**     * @private     * @param string $folder     * @return  boolean     */    private function _checkThemeFolder($folder)    {        if (! is_dir($folder)) {            trigger_error(                sprintf(__('Theme path not found for theme %s!'),                    htmlspecialchars($folder)),                E_USER_ERROR);            return false;        }        return true;    }    /**     * read all themes     *     * @return bool true     */    function loadThemes()    {        $this->themes = array();        if ($handleThemes = opendir($this->getThemesPath())) {            // check for themes directory            while (false !== ($PMA_Theme = readdir($handleThemes))) {                // Skip non dirs, . and ..                if ($PMA_Theme == '.' || $PMA_Theme == '..' || ! is_dir($this->getThemesPath() . '/' . $PMA_Theme)) {                    continue;                }                if (array_key_exists($PMA_Theme, $this->themes)) {                    continue;                }                $new_theme = PMA_Theme::load($this->getThemesPath() . '/' . $PMA_Theme);                if ($new_theme) {                    $new_theme->setId($PMA_Theme);                    $this->themes[$PMA_Theme] = $new_theme;                }            } // end get themes            closedir($handleThemes);        } else {            trigger_error(                'phpMyAdmin-ERROR: cannot open themes folder: ' . $this->getThemesPath(),                E_USER_WARNING);            return false;        } // end check for themes directory        ksort($this->themes);        return true;    }    /**     * checks if given theme name is a known theme     *     * @param string  $theme  name fo theme to check for     * @return bool     */    function checkTheme($theme)    {        if (! array_key_exists($theme, $this->themes)) {            return false;        }        return true;    }    /**     * returns HTML selectbox, with or without form enclosed     *     * @param boolean $form   whether enclosed by from tags or not     * @return string     */    function getHtmlSelectBox($form = true)    {        $select_box = '';        if ($form) {            $select_box .= '<form name="setTheme" method="post" action="index.php"'                .' target="_parent">';            $select_box .=  PMA_generate_common_hidden_inputs();        }        $theme_preview_path= './themes.php';        $theme_preview_href = '<a href="' . $theme_preview_path . '" target="themes" class="themeselect">';        $select_box .=  $theme_preview_href . __('Theme') . '</a>:' . "\n";        $select_box .=  '<select name="set_theme" xml:lang="en" dir="ltr" class="autosubmit">';        foreach ($this->themes as $each_theme_id => $each_theme) {            $select_box .=  '<option value="' . $each_theme_id . '"';            if ($this->active_theme === $each_theme_id) {                $select_box .=  ' selected="selected"';            }            $select_box .=  '>' . htmlspecialchars($each_theme->getName()) . '</option>';        }        $select_box .=  '</select>';        if ($form) {            $select_box .=  '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>';            $select_box .=  '</form>';        }        return $select_box;    }    /**     * enables backward compatibility     */    function makeBc()    {        $GLOBALS['theme']           = $this->theme->getId();        $GLOBALS['pmaThemePath']    = $this->theme->getPath();        $GLOBALS['pmaThemeImage']   = $this->theme->getImgPath();        /**         * load layout file if exists         */        if (file_exists($this->theme->getLayoutFile())) {            include $this->theme->getLayoutFile();        }    }    /**     * prints out preview for every theme     *     */    function printPreviews()    {        foreach ($this->themes as $each_theme) {            $each_theme->printPreview();        } // end 'open themes'    }    /**     * returns PMA_Theme object for fall back theme     * @return object   PMA_Theme     */    function getFallBackTheme()    {        if (isset($this->themes['original'])) {            return $this->themes['original'];        }        return false;    }    /**     * prints css data     *     * @param string $type     * @return bool     */    function printCss($type)    {        if ($this->theme->loadCss($type)) {            return true;        }        // if loading css for this theme failed, try default theme css        $fallback_theme = $this->getFallBackTheme();        if ($fallback_theme && $fallback_theme->loadCss($type)) {            return true;        }        return false;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * holds the database index class * * @package PhpMyAdmin *//** * @since phpMyAdmin 3.0.0 * * @package PhpMyAdmin */class PMA_Index{    /**     * Class-wide storage container for indexes (caching, singleton)     *     * @var array     */    protected static $_registry = array();    /**     * @var string The name of the schema     */    protected $_schema = '';    /**     * @var string The name of the table     */    protected $_table = '';    /**     * @var string The name of the index     */    protected $_name = '';    /**     * Columns in index     *     * @var array     */    protected $_columns = array();    /**     * The index method used (BTREE, SPATIAL, FULLTEXT, HASH, RTREE).     *     * @var string     */    protected $_type = '';    /**     * The index choice (PRIMARY, UNIQUE, INDEX, SPATIAL, FULLTEXT)     *     * @var string     */    protected $_choice = '';    /**     * Various remarks.     *     * @var string     */    protected $_remarks = '';    /**     * Any comment provided for the index with a COMMENT attribute when the     * index was created.     *     * @var string     */    protected $_comment = '';    /**     * @var integer 0 if the index cannot contain duplicates, 1 if it can.     */    protected $_non_unique = 0;    /**     * Indicates how the key is packed. NULL if it is not.     *     * @var string     */    protected $_packed = null;    /**     * Constructor     *     * @param array $params     */    public function __construct($params = array())    {        $this->set($params);    }    static public function singleton($schema, $table, $index_name = '')    {        PMA_Index::_loadIndexes($table, $schema);        if (! isset(PMA_Index::$_registry[$schema][$table][$index_name])) {            $index = new PMA_Index;            if (strlen($index_name)) {                $index->setName($index_name);                PMA_Index::$_registry[$schema][$table][$index->getName()] = $index;            }            return $index;        } else {            return PMA_Index::$_registry[$schema][$table][$index_name];        }    }    /**     * returns an array with all indexes from the given table     *     * @param string $table     * @param string $schema     * @return  array     */    static public function getFromTable($table, $schema)    {        PMA_Index::_loadIndexes($table, $schema);        if (isset(PMA_Index::$_registry[$schema][$table])) {            return PMA_Index::$_registry[$schema][$table];        } else {            return array();        }    }    /**     * return primary if set, false otherwise     *     * @param string $table     * @param string $schema     * @return  mixed primary index or false if no one exists     */    static public function getPrimary($table, $schema)    {        PMA_Index::_loadIndexes($table, $schema);        if (isset(PMA_Index::$_registry[$schema][$table]['PRIMARY'])) {            return PMA_Index::$_registry[$schema][$table]['PRIMARY'];        } else {            return false;        }    }    /**     * Load index data for table     *     * @param string $table     * @param string $schema     * @return  boolean     */    static protected function _loadIndexes($table, $schema)    {        if (isset(PMA_Index::$_registry[$schema][$table])) {            return true;        }        $_raw_indexes = PMA_DBI_get_table_indexes($schema, $table);        foreach ($_raw_indexes as $_each_index) {            $_each_index['Schema'] = $schema;            if (! isset(PMA_Index::$_registry[$schema][$table][$_each_index['Key_name']])) {                $key = new PMA_Index($_each_index);                PMA_Index::$_registry[$schema][$table][$_each_index['Key_name']] = $key;            } else {                $key = PMA_Index::$_registry[$schema][$table][$_each_index['Key_name']];            }            $key->addColumn($_each_index);        }        return true;    }    /**     * Add column to index     *     * @param array $params column params     */    public function addColumn($params)    {        if (strlen($params['Column_name'])) {            $this->_columns[$params['Column_name']] = new PMA_Index_Column($params);        }    }    public function addColumns($columns)    {        $_columns = array();        if (isset($columns['names'])) {            // coming from form            // $columns[names][]            // $columns[sub_parts][]            foreach ($columns['names'] as $key => $name) {                $sub_part = isset($columns['sub_parts'][$key]) ? $columns['sub_parts'][$key] : '';                $_columns[] = array(                    'Column_name'   => $name,                    'Sub_part'      => $sub_part,                );            }        } else {            // coming from SHOW INDEXES            // $columns[][name]            // $columns[][sub_part]            // ...            $_columns = $columns;        }        foreach ($_columns as $column) {            $this->addColumn($column);        }    }    /**     * Returns true if $column indexed in this index     *     * @param string $column     * @return  boolean     */    public function hasColumn($column)    {        return isset($this->_columns[$column]);    }    public function set($params)    {        if (isset($params['columns'])) {            $this->addColumns($params['columns']);        }        if (isset($params['Schema'])) {            $this->_schema = $params['Schema'];        }        if (isset($params['Table'])) {            $this->_table = $params['Table'];        }        if (isset($params['Key_name'])) {            $this->_name = $params['Key_name'];        }        if (isset($params['Index_type'])) {            $this->_type = $params['Index_type'];        }        if (isset($params['Comment'])) {            $this->_remarks = $params['Comment'];        }        if (isset($params['Index_comment'])) {            $this->_comment = $params['Index_comment'];        }        if (isset($params['Non_unique'])) {            $this->_non_unique = $params['Non_unique'];        }        if (isset($params['Packed'])) {            $this->_packed = $params['Packed'];        }        if ('PRIMARY' == $this->_name) {            $this->_choice = 'PRIMARY';        } elseif ('FULLTEXT' == $this->_type) {            $this->_choice = 'FULLTEXT';        } elseif ('SPATIAL' == $this->_type) {            $this->_choice = 'SPATIAL';        } elseif ('0' == $this->_non_unique) {            $this->_choice = 'UNIQUE';        } else {            $this->_choice = 'INDEX';        }    }    public function getColumnCount()    {        return count($this->_columns);    }    public function getComment()    {        return $this->_comment;    }    public function getRemarks()    {        return $this->_remarks;    }    public function getComments()    {        $comments = $this->getRemarks();        if (strlen($comments)) {            $comments .= "\n";        }        $comments .= $this->getComment();        return $comments;    }    public function getType()    {        return $this->_type;    }    public function getChoice()    {        return $this->_choice;    }    /**     * Return a list of all index choices     *     * @return  array index choices     */    static public function getIndexChoices()    {        return array(            'PRIMARY',            'INDEX',            'UNIQUE',            'SPATIAL',            'FULLTEXT',        );    }    public function generateIndexSelector()    {        $html_options = '';        foreach (PMA_Index::getIndexChoices() as $each_index_choice) {            if ($each_index_choice === 'PRIMARY'             && $this->_choice !== 'PRIMARY'             && PMA_Index::getPrimary($this->_table, $this->_schema)) {                // skip PRIMARY if there is already one in the table                continue;            }            $html_options .= '<option value="' . $each_index_choice . '"'                 . (($this->_choice == $each_index_choice) ? ' selected="selected"' : '')                 . '>'. $each_index_choice . '</option>' . "\n";        }        return $html_options;    }    public function getPacked()    {        return $this->_packed;    }    public function isPacked($as_text = false)    {        if ($as_text) {            $r = array(                '0' => __('No'),                '1' => __('Yes'),            );        } else {            $r = array(                '0' => false,                '1' => true,            );        }        if (null === $this->_packed) {            return $r[0];        }        return $this->_packed;    }    public function getNonUnique()    {        return $this->_non_unique;    }    public function isUnique($as_text = false)    {        if ($as_text) {            $r = array(                '0' => __('Yes'),                '1' => __('No'),            );        } else {            $r = array(                '0' => true,                '1' => false,            );        }        return $r[$this->_non_unique];    }    public function getName()    {        return $this->_name;    }    public function setName($name)    {        $this->_name = (string) $name;    }    public function getColumns()    {        return $this->_columns;    }    /**     * Show index data     *     * @param string      $table          The tablename     * @param array       $indexes_info   Referenced info array     * @param array       $indexes_data   Referenced data array     * @param boolean     $print_mode     * @access  public     * @return  array       Index collection array     */    static public function getView($table, $schema, $print_mode = false)    {        $indexes = PMA_Index::getFromTable($table, $schema);        $no_indexes_class = count($indexes) > 0 ? ' hide' : '';        $no_indexes  = "<div class='no_indexes_defined$no_indexes_class'>";        $no_indexes .= PMA_Message::notice(__('No index defined!'))->getDisplay();        $no_indexes .= '</div>';        $r  = '<fieldset>';        $r .= '<legend id="index_header">' . __('Indexes');        $r .= PMA_showMySQLDocu('optimization', 'optimizing-database-structure');        $r .= '</legend>';        $r .= $no_indexes;        if (count($indexes) < 1) {            $r .= '</fieldset>';            return $r;        }        if (! $print_mode) {            $r .= PMA_Index::findDuplicates($table, $schema);        }        $r .= '<table id="table_index">';        $r .= '<thead>';        $r .= '<tr>';        if (! $print_mode) {            $r .= '<th colspan="2">' . __('Action') . '</th>';        }        $r .= '<th>' . __('Keyname') . '</th>';        $r .= '<th>' . __('Type') . '</th>';        $r .= '<th>' . __('Unique') . '</th>';        $r .= '<th>' . __('Packed') . '</th>';        $r .= '<th>' . __('Column') . '</th>';        $r .= '<th>' . __('Cardinality') . '</th>';        $r .= '<th>' . __('Collation') . '</th>';        $r .= '<th>' . __('Null') . '</th>';        $r .= '<th>' . __('Comment') . '</th>';        $r .= '</tr>';        $r .= '</thead>';        $r .= '<tbody>';        $odd_row = true;        foreach ($indexes as $index) {            $row_span = ' rowspan="' . $index->getColumnCount() . '" ';            $r .= '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">';            if (! $print_mode) {                $this_params = $GLOBALS['url_params'];                $this_params['index'] = $index->getName();                $r .= '<td class="edit_index ';                if ($GLOBALS['cfg']['AjaxEnable']) {                    $r .= 'ajax" ';                }                $r .= '" ' . $row_span . '>'                   . '    <a href="tbl_indexes.php' . PMA_generate_common_url($this_params)                   . '">' . PMA_getIcon('b_edit.png', __('Edit')) . '</a>'                   . '</td>' . "\n";                $this_params = $GLOBALS['url_params'];                if ($index->getName() == 'PRIMARY') {                    $this_params['sql_query'] = 'ALTER TABLE ' . PMA_backquote($table) . ' DROP PRIMARY KEY';                    $this_params['message_to_show'] = __('The primary key has been dropped');                    $js_msg      = PMA_jsFormat('ALTER TABLE ' . $table . ' DROP PRIMARY KEY');                } else {                    $this_params['sql_query'] = 'ALTER TABLE ' . PMA_backquote($table) . ' DROP INDEX ' . PMA_backquote($index->getName());                    $this_params['message_to_show'] = sprintf(__('Index %s has been dropped'), $index->getName());                    $js_msg      = PMA_jsFormat('ALTER TABLE ' . $table . ' DROP INDEX ' . $index->getName());                }                $r .= '<td ' . $row_span . '>';                $r .= '<input type="hidden" class="drop_primary_key_index_msg" value="' . $js_msg . '" />';                $r .= '    <a ';                if ($GLOBALS['cfg']['AjaxEnable']) {                    $r .= 'class="drop_primary_key_index_anchor" ';                }                $r .= ' href="sql.php' . PMA_generate_common_url($this_params)                   . '" >'                   . PMA_getIcon('b_drop.png', __('Drop'))  . '</a>'                   . '</td>' . "\n";            }            $r .= '<th ' . $row_span . '>' . htmlspecialchars($index->getName()) . '</th>';            $r .= '<td ' . $row_span . '>' . htmlspecialchars($index->getType()) . '</td>';            $r .= '<td ' . $row_span . '>' . $index->isUnique(true) . '</td>';            $r .= '<td ' . $row_span . '>' . $index->isPacked(true) . '</td>';            foreach ($index->getColumns() as $column) {                if ($column->getSeqInIndex() > 1) {                    $r .= '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">';                }                $r .= '<td>' . htmlspecialchars($column->getName());                if ($column->getSubPart()) {                    $r .= ' (' . $column->getSubPart() . ')';                }                $r .= '</td>';                $r .= '<td>' . htmlspecialchars($column->getCardinality()) . '</td>';                $r .= '<td>' . htmlspecialchars($column->getCollation()) . '</td>';                $r .= '<td>' . htmlspecialchars($column->getNull(true)) . '</td>';                if ($column->getSeqInIndex() == 1) {                    $r .= '<td ' . $row_span . '>'                        . htmlspecialchars($index->getComments()) . '</td>';                }                $r .= '</tr>';            } // end foreach $index['Sequences']            $odd_row = ! $odd_row;        } // end while        $r .= '</tbody>';        $r .= '</table>';        $r .= '</fieldset>';        return $r;    }    public function getCompareData()    {        $data = array(            // 'Non_unique'    => $this->_non_unique,            'Packed'        => $this->_packed,            'Index_type'    => $this->_type,        );        foreach ($this->_columns as $column) {            $data['columns'][] = $column->getCompareData();        }        return $data;    }    /**     * Function to check over array of indexes and look for common problems     *     * @access  public     * @param string      name of table     * @return  string      Output HTML     */    static public function findDuplicates($table, $schema)    {        $indexes = PMA_Index::getFromTable($table, $schema);        $output  = '';        // count($indexes) < 2:        //   there is no need to check if there less than two indexes        if (count($indexes) < 2) {            return $output;        }        // remove last index from stack and ...        while ($while_index = array_pop($indexes)) {            // ... compare with every remaining index in stack            foreach ($indexes as $each_index) {                if ($each_index->getCompareData() !== $while_index->getCompareData()) {                    continue;                }                // did not find any difference                // so it makes no sense to have this two equal indexes                $message = PMA_Message::notice(__('The indexes %1$s and %2$s seem to be equal and one of them could possibly be removed.'));                $message->addParam($each_index->getName());                $message->addParam($while_index->getName());                $output .= $message->getDisplay();                // there is no need to check any further indexes if we have already                // found that this one has a duplicate                continue 2;            }        }        return $output;    }}/** * @package PhpMyAdmin */class PMA_Index_Column{    /**     * @var string The column name     */    protected $_name = '';    /**     * @var integer The column sequence number in the index, starting with 1.     */    protected $_seq_in_index = 1;    /**     * @var string How the column is sorted in the index. A (Ascending) or NULL (Not sorted)     */    protected $_collation = null;    /**     * The number of indexed characters if the column is only partly indexed,     * NULL if the entire column is indexed.     *     * @var integer     */    protected $_sub_part = null;    /**     * Contains YES if the column may contain NULL.     * If not, the column contains NO.     *     * @var string     */    protected $_null = '';    /**     * An estimate of the number of unique values in the index. This is updated     * by running ANALYZE TABLE or myisamchk -a. Cardinality is counted based on     * statistics stored as integers, so the value is not necessarily exact even     * for small tables. The higher the cardinality, the greater the chance that     * MySQL uses the index when doing joins.     *     * @var integer     */    protected $_cardinality = null;    public function __construct($params = array())    {        $this->set($params);    }    public function set($params)    {        if (isset($params['Column_name'])) {            $this->_name = $params['Column_name'];        }        if (isset($params['Seq_in_index'])) {            $this->_seq_in_index = $params['Seq_in_index'];        }        if (isset($params['Collation'])) {            $this->_collation = $params['Collation'];        }        if (isset($params['Cardinality'])) {            $this->_cardinality = $params['Cardinality'];        }        if (isset($params['Sub_part'])) {            $this->_sub_part = $params['Sub_part'];        }        if (isset($params['Null'])) {            $this->_null = $params['Null'];        }    }    public function getName()    {        return $this->_name;    }    public function getCollation()    {        return $this->_collation;    }    public function getCardinality()    {        return $this->_cardinality;    }    public function getNull($as_text = false)    {        return $as_text            ? (!$this->_null || $this->_null == 'NO' ? __('No') : __('Yes'))            : $this->_null;    }    public function getSeqInIndex()    {        return $this->_seq_in_index;    }    public function getSubPart()    {        return $this->_sub_part;    }    public function getCompareData()    {        return array(            'Column_name'   => $this->_name,            'Seq_in_index'  => $this->_seq_in_index,            'Collation'     => $this->_collation,            'Sub_part'      => $this->_sub_part,            'Null'          => $this->_null,        );    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'import.js';/** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';$import_type = 'server';require './libraries/display_import.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * functions for displaying the sql query form * * @usedby  server_sql.php * @usedby  db_sql.php * @usedby  tbl_sql.php * @usedby  tbl_structure.php * @usedby  tbl_tracking.php * @usedby  querywindow.php * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/file_listing.php'; // used for file listingrequire_once './libraries/bookmark.lib.php'; // used for file listing/** * prints the sql query boxes * * @usedby  server_sql.php * @usedby  db_sql.php * @usedby  tbl_sql.php * @usedby  tbl_structure.php * @usedby  tbl_tracking.php * @usedby  querywindow.php * @param boolean|string  $query          query to display in the textarea *                                          or true to display last executed * @param boolean|string  $display_tab    sql|files|history|full|false *                                          what part to display *                                          false if not inside querywindow * @param string          $delimiter */function PMA_sqlQueryForm($query = true, $display_tab = false, $delimiter = ';'){    // check tab to display if inside querywindow    if (! $display_tab) {        $display_tab = 'full';        $is_querywindow = false;    } else {        $is_querywindow = true;    }    // query to show    if (true === $query) {        $query = $GLOBALS['sql_query'];    }    // set enctype to multipart for file uploads    if ($GLOBALS['is_upload']) {        $enctype = ' enctype="multipart/form-data"';    } else {        $enctype = '';    }    $table  = '';    $db     = '';    if (! strlen($GLOBALS['db'])) {        // prepare for server related        $goto   = empty($GLOBALS['goto']) ?                    'server_sql.php' : $GLOBALS['goto'];    } elseif (! strlen($GLOBALS['table'])) {        // prepare for db related        $db     = $GLOBALS['db'];        $goto   = empty($GLOBALS['goto']) ?                    'db_sql.php' : $GLOBALS['goto'];    } else {        $table  = $GLOBALS['table'];        $db     = $GLOBALS['db'];        $goto   = empty($GLOBALS['goto']) ?                    'tbl_sql.php' : $GLOBALS['goto'];    }    // start output    if ($is_querywindow) {        ?>        <form method="post" id="sqlqueryform" target="frame_content"              action="import.php"<?php echo $enctype; ?> name="sqlform"              onsubmit="var save_name = window.opener.parent.frame_content.name;              window.opener.parent.frame_content.name = save_name + '<?php echo time(); ?>';              this.target = window.opener.parent.frame_content.name;              return checkSqlQuery(this)">        <?php    } else {        echo '<form method="post" action="import.php" ' . $enctype;        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax"';        }        echo ' id="sqlqueryform" name="sqlform">' . "\n";    }    if ($is_querywindow) {        echo '<input type="hidden" name="focus_querywindow" value="true" />'            ."\n";        if ($display_tab != 'sql' && $display_tab != 'full') {            echo '<input type="hidden" name="sql_query" value="" />' . "\n";            echo '<input type="hidden" name="show_query" value="1" />' . "\n";        }    }    echo '<input type="hidden" name="is_js_confirmed" value="0" />' . "\n"        .PMA_generate_common_hidden_inputs($db, $table) . "\n"        .'<input type="hidden" name="pos" value="0" />' . "\n"        .'<input type="hidden" name="goto" value="'        .htmlspecialchars($goto) . '" />' . "\n"        .'<input type="hidden" name="message_to_show" value="'        . __('Your SQL query has been executed successfully') . '" />' . "\n"        .'<input type="hidden" name="prev_sql_query" value="'        . htmlspecialchars($query) . '" />' . "\n";    // display querybox    if ($display_tab === 'full' || $display_tab === 'sql') {        PMA_sqlQueryFormInsert($query, $is_querywindow, $delimiter);    }    // display uploads    if ($display_tab === 'files' && $GLOBALS['is_upload']) {        PMA_sqlQueryFormUpload();    }    // Bookmark Support    if ($display_tab === 'full' || $display_tab === 'history') {        if (! empty($GLOBALS['cfg']['Bookmark'])) {            PMA_sqlQueryFormBookmark();        }    }    // Encoding setting form appended by Y.Kawada    if (function_exists('PMA_set_enc_form')) {        echo PMA_set_enc_form('    ');    }    echo '</form>' . "\n";    if ($is_querywindow) {        ?>        <script type="text/javascript">        //<![CDATA[            if (window.opener) {                window.opener.parent.insertQuery();            }        //]]>        </script>        <?php    }    // print an empty div, which will be later filled with the sql query results by ajax    echo '<div id="sqlqueryresults"></div>';}/** * prints querybox fieldset * * @usedby  PMA_sqlQueryForm() * @param string      $query          query to display in the textarea * @param boolean     $is_querywindow if inside querywindow or not * @param string      $delimiter      default delimiter to use */function PMA_sqlQueryFormInsert($query = '', $is_querywindow = false, $delimiter = ';'){    // enable auto select text in textarea    if ($GLOBALS['cfg']['TextareaAutoSelect']) {        $auto_sel = ' onclick="selectContent(this, sql_box_locked, true)"';    } else {        $auto_sel = '';    }    // enable locking if inside query window    if ($is_querywindow) {        $locking = ' onkeypress="document.sqlform.elements[\'LockFromUpdate\'].'            .'checked = true;"';        $height = $GLOBALS['cfg']['TextareaRows'] * 1.25;    } else {        $locking = '';        $height = $GLOBALS['cfg']['TextareaRows'] * 2;    }    $table          = '';    $db             = '';    $fields_list    = array();    if (! strlen($GLOBALS['db'])) {        // prepare for server related        $legend = sprintf(__('Run SQL query/queries on server %s'),            '&quot;' . htmlspecialchars(                ! empty($GLOBALS['cfg']['Servers'][$GLOBALS['server']]['verbose']) ? $GLOBALS['cfg']['Servers'][$GLOBALS['server']]['verbose'] : $GLOBALS['cfg']['Servers'][$GLOBALS['server']]['host']) . '&quot;');    } elseif (! strlen($GLOBALS['table'])) {        // prepare for db related        $db     = $GLOBALS['db'];        // if you want navigation:        $tmp_db_link = '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase']            . '?' . PMA_generate_common_url($db) . '"';        if ($is_querywindow) {            $tmp_db_link .= ' target="_self"'                . ' onclick="this.target=window.opener.frame_content.name"';        }        $tmp_db_link .= '>'            . htmlspecialchars($db) . '</a>';        // else use        // $tmp_db_link = htmlspecialchars($db);        $legend = sprintf(__('Run SQL query/queries on database %s'), $tmp_db_link);        if (empty($query)) {            $query = PMA_expandUserString($GLOBALS['cfg']['DefaultQueryDatabase'], 'PMA_backquote');        }    } else {        $table  = $GLOBALS['table'];        $db     = $GLOBALS['db'];        // Get the list and number of fields        // we do a try_query here, because we could be in the query window,        // trying to synchonize and the table has not yet been created        $fields_list = PMA_DBI_get_columns($db, $GLOBALS['table'], null, true);        $tmp_db_link = '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase']            . '?' . PMA_generate_common_url($db) . '"';        if ($is_querywindow) {            $tmp_db_link .= ' target="_self"'                . ' onclick="this.target=window.opener.frame_content.name"';        }        $tmp_db_link .= '>'            . htmlspecialchars($db) . '</a>';        // else use        // $tmp_db_link = htmlspecialchars($db);        $legend = sprintf(__('Run SQL query/queries on database %s'), $tmp_db_link);        if (empty($query)) {            $query = PMA_expandUserString($GLOBALS['cfg']['DefaultQueryTable'], 'PMA_backquote');        }    }    $legend .= ': ' . PMA_showMySQLDocu('SQL-Syntax', 'SELECT');    if (count($fields_list)) {        $sqlquerycontainer_id = 'sqlquerycontainer';    } else {        $sqlquerycontainer_id = 'sqlquerycontainerfull';    }    echo '<a name="querybox"></a>' . "\n"        .'<div id="queryboxcontainer">' . "\n"        .'<fieldset id="querybox">' . "\n";    echo '<legend>' . $legend . '</legend>' . "\n";    echo '<div id="queryfieldscontainer">' . "\n";    echo '<div id="' . $sqlquerycontainer_id . '">' . "\n"        .'<textarea tabindex="100" name="sql_query" id="sqlquery"'        .'  cols="' . $GLOBALS['cfg']['TextareaCols'] . '"'        .'  rows="' . $height . '"'        .'  dir="' . $GLOBALS['text_dir'] . '"'        .$auto_sel . $locking . '>' . htmlspecialchars($query) . '</textarea>' . "\n";    // Add buttons to generate query easily for select all,single select,insert,update and delete    if (count($fields_list)) {        echo '<input type="button" value="SELECT *" id="selectall" class="sqlbutton" />';        echo '<input type="button" value="SELECT" id="select" class="sqlbutton" />';        echo '<input type="button" value="INSERT" id="insert" class="sqlbutton" />';        echo '<input type="button" value="UPDATE" id="update" class="sqlbutton" />';        echo '<input type="button" value="DELETE" id="delete" class="sqlbutton" />';    }    echo '<input type="button" value="' . __('Clear') . '" id="clear" class="sqlbutton" />';    echo '</div>' . "\n";    if (count($fields_list)) {        echo '<div id="tablefieldscontainer">' . "\n"            .'<label>' . __('Columns') . '</label>' . "\n"            .'<select id="tablefields" name="dummy" '            .'size="' . ($GLOBALS['cfg']['TextareaRows'] - 2) . '" '            .'multiple="multiple" ondblclick="insertValueQuery()">' . "\n";        foreach ($fields_list as $field) {            echo '<option value="'                .PMA_backquote(htmlspecialchars($field['Field'])) . '"';            if (isset($field['Field']) && strlen($field['Field']) && isset($field['Comment'])) {                echo ' title="' . htmlspecialchars($field['Comment']) . '"';            }            echo '>' . htmlspecialchars($field['Field']) . '</option>' . "\n";        }        echo '</select>' . "\n"            .'<div id="tablefieldinsertbuttoncontainer">' . "\n";        if ($GLOBALS['cfg']['PropertiesIconic']) {            echo '<input type="button" name="insert" value="&lt;&lt;"'                .' onclick="insertValueQuery()"'                .' title="' . __('Insert') . '" />' . "\n";        } else {            echo '<input type="button" name="insert"'                .' value="' . __('Insert') . '"'                .' onclick="insertValueQuery()" />' . "\n";        }        echo '</div>' . "\n"            .'</div>' . "\n";    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</div>' . "\n";    if (! empty($GLOBALS['cfg']['Bookmark'])) {        ?>        <div id="bookmarkoptions">        <div class="formelement">        <label for="bkm_label">            <?php echo __('Bookmark this SQL query'); ?>:</label>        <input type="text" name="bkm_label" id="bkm_label" tabindex="110" value="" />        </div>        <div class="formelement">        <input type="checkbox" name="bkm_all_users" tabindex="111" id="id_bkm_all_users"            value="true" />        <label for="id_bkm_all_users">            <?php echo __('Let every user access this bookmark'); ?></label>        </div>        <div class="formelement">        <input type="checkbox" name="bkm_replace" tabindex="112" id="id_bkm_replace"            value="true" />        <label for="id_bkm_replace">            <?php echo __('Replace existing bookmark of same name'); ?></label>        </div>        </div>        <?php    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n"        .'</div>' . "\n";    echo '<fieldset id="queryboxfooter" class="tblFooters">' . "\n";    echo '<div class="formelement">' . "\n";    if ($is_querywindow) {        ?>        <script type="text/javascript">        //<![CDATA[            document.writeln(' <input type="checkbox" name="LockFromUpdate" checked="checked" tabindex="120" id="checkbox_lock" /> <label for="checkbox_lock"><?php echo __('Do not overwrite this query from outside the window'); ?></label> ');        //]]>        </script>        <?php    }    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo '<label for="id_sql_delimiter">[ ' . __('Delimiter')        .'</label>' . "\n";    echo '<input type="text" name="sql_delimiter" tabindex="131" size="3" '        .'value="' . $delimiter . '" '        .'id="id_sql_delimiter" /> ]' . "\n";    echo '<input type="checkbox" name="show_query" value="1" '        .'id="checkbox_show_query" tabindex="132" checked="checked" />' . "\n"        .'<label for="checkbox_show_query">' . __('Show this query here again')        .'</label>' . "\n";    if (! $is_querywindow) {        echo '<input type="checkbox" name="retain_query_box" value="1" '            . 'id="retain_query_box" tabindex="133" '            . ($GLOBALS['cfg']['RetainQueryBox'] === false ? '' : ' checked="checked"')            . ' />'            . '<label for="retain_query_box">' . __('Retain query box')            . '</label>';    }    echo '</div>' . "\n";    echo '<input type="submit" id="button_submit_query" name="SQL" tabindex="200" value="' . __('Go') . '" />'        ."\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";}/** * prints bookmark fieldset * * @usedby  PMA_sqlQueryForm() */function PMA_sqlQueryFormBookmark(){    $bookmark_list = PMA_Bookmark_getList($GLOBALS['db']);    if (! $bookmark_list || count($bookmark_list) < 1) {        return;    }    echo '<fieldset id="bookmarkoptions">';    echo '<legend>';    echo __('Bookmarked SQL query') . '</legend>' . "\n";    echo '<div class="formelement">';    echo '<select name="id_bookmark" id="id_bookmark">' . "\n";    echo '<option value="">&nbsp;</option>' . "\n";    foreach ($bookmark_list as $key => $value) {        echo '<option value="' . htmlspecialchars($key) . '">'            .htmlspecialchars($value) . '</option>' . "\n";    }    // &nbsp; is required for correct display with styles/line height    echo '</select>&nbsp;' . "\n";    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo __('Variable');    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        echo ' <a href="./Documentation.html#faqbookmark"'            .' target="documentation">'            . PMA_getImage('b_help.png', __('Documentation')) . '</a>';    } else {        echo ' (<a href="./Documentation.html#faqbookmark"'            .' target="documentation">' . __('Documentation') . '</a>): ';    }    echo '<input type="text" name="bookmark_variable" class="textfield"'        .' size="10" />' . "\n";    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo '<input type="radio" name="action_bookmark" value="0"'        .' id="radio_bookmark_exe" checked="checked" />'        .'<label for="radio_bookmark_exe">' . __('Submit')        .'</label>' . "\n";    echo '<input type="radio" name="action_bookmark" value="1"'        .' id="radio_bookmark_view" />'        .'<label for="radio_bookmark_view">' . __('View only')        .'</label>' . "\n";    echo '<input type="radio" name="action_bookmark" value="2"'        .' id="radio_bookmark_del" />'        .'<label for="radio_bookmark_del">' . __('Delete')        .'</label>' . "\n";    echo '</div>' . "\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";    echo '<fieldset id="bookmarkoptionsfooter" class="tblFooters">' . "\n";    echo '<input type="submit" name="SQL" id="button_submit_bookmark" value="' . __('Go') . '" />';    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";}/** * prints bookmark fieldset * * @usedby  PMA_sqlQueryForm() */function PMA_sqlQueryFormUpload(){    $errors = array ();    $matcher = '@\.sql(\.(' . PMA_supportedDecompressions() . '))?$@'; // we allow only SQL here    if (!empty($GLOBALS['cfg']['UploadDir'])) {        $files = PMA_getFileSelectOptions(PMA_userDir($GLOBALS['cfg']['UploadDir']), $matcher, (isset($timeout_passed) && $timeout_passed && isset($local_import_file)) ? $local_import_file : '');    } else {        $files = '';    }    // start output    echo '<fieldset id="">';    echo '<legend>';    echo __('Browse your computer:') . '</legend>';    echo '<div class="formelement">';    echo '<input type="file" name="sql_file" class="textfield" /> ';    echo PMA_displayMaximumUploadSize($GLOBALS['max_upload_size']);    // some browsers should respect this :)    echo PMA_generateHiddenMaxFileSize($GLOBALS['max_upload_size']) . "\n";    echo '</div>';    if ($files === false) {        $errors[] = PMA_Message::error( __('The directory you set for upload work cannot be reached'));    } elseif (!empty($files)) {        echo '<div class="formelement">';        echo '<strong>' . __('web server upload directory') .':</strong>' . "\n";        echo '<select size="1" name="sql_localfile">' . "\n";        echo '<option value="" selected="selected"></option>' . "\n";        echo $files;        echo '</select>' . "\n";        echo '</div>';    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>';    echo '<fieldset id="" class="tblFooters">';    echo __('Character set of the file:') . "\n";    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_CHARSET,            'charset_of_file', null, 'utf8', false);    echo '<input type="submit" name="SQL" value="' . __('Go')        .'" />' . "\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>';    foreach ($errors as $error) {        $error->display();    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require_once './libraries/server_common.inc.php';require_once './libraries/sql_query_form.lib.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm();/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */// sometimes, we lose $_REQUEST['js_frame']define('PMA_FRAME', (! empty($_REQUEST['js_frame']) && is_string($_REQUEST['js_frame'])) ? $_REQUEST['js_frame'] : 'right');define('PMA_MINIMUM_COMMON', true);require_once './libraries/common.inc.php';require_once './libraries/sqlparser.lib.php';// MSIE 6 (at least some unpatched versions) has problems loading CSS// when zlib_compression is onif (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER == '6' && (ini_get('zlib.output_compression'))) {    @ini_set('zlib.output_compression', 'Off');}if ($GLOBALS['text_dir'] === 'ltr') {    $right = 'right';    $left = 'left';} else {    $right = 'left';    $left = 'right';}// Send correct type:header('Content-Type: text/css; charset=UTF-8');// Cache output in client - the nocache query parameter makes sure that this// file is reloaded when config changesheader('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');$_SESSION['PMA_Theme_Manager']->printCss(PMA_FRAME);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Runs common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_sql.php&amp;back=tbl_sql.php';require_once './libraries/sql_query_form.lib.php';$err_url   = 'tbl_sql.php' . $err_url;// After a syntax error, we return to this script// with the typed query in the textarea.$goto = 'tbl_sql.php';$back = 'tbl_sql.php';/** * Get table information */require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm(true, false, isset($_REQUEST['delimiter']) ? htmlspecialchars($_REQUEST['delimiter']) : ';');/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Check parameters */require_once './libraries/common.inc.php';PMA_checkParameters(array('db', 'table'));/** * Prepares links */require_once './libraries/bookmark.lib.php';/** * Set parameters for links */$url_params = array();$url_params['db']    = $db;$url_params['table'] = $table;/** * Defines the urls to return to in case of error in a sql statement */$err_url_0 = $cfg['DefaultTabDatabase'] . PMA_generate_common_url(array('db' => $db,));$err_url   = $cfg['DefaultTabTable'] . PMA_generate_common_url($url_params);/** * Displays headers */require_once './libraries/header.inc.php';/** * Ensure that $db_is_information_schema is not null */if (! isset($db_is_information_schema)) {    $db_is_information_schema = false;}/** * Displays links */$tabs = array();$tabs['browse']['icon'] = 'b_browse.png';$tabs['browse']['text'] = __('Browse');$tabs['browse']['link'] = 'sql.php';$tabs['browse']['args']['pos'] = 0;$tabs['structure']['icon'] = 'b_props.png';$tabs['structure']['link'] = 'tbl_structure.php';$tabs['structure']['text'] = __('Structure');$tabs['sql']['icon'] = 'b_sql.png';$tabs['sql']['link'] = 'tbl_sql.php';$tabs['sql']['text'] = __('SQL');$tabs['search']['icon'] = 'b_search.png';$tabs['search']['text'] = __('Search');$tabs['search']['link'] = 'tbl_select.php';if (!$db_is_information_schema) {    $tabs['insert']['icon'] = 'b_insrow.png';    $tabs['insert']['link'] = 'tbl_change.php';    $tabs['insert']['text'] = __('Insert');}$tabs['export']['icon'] = 'b_tblexport.png';$tabs['export']['link'] = 'tbl_export.php';$tabs['export']['args']['single_table'] = 'true';$tabs['export']['text'] = __('Export');/** * Don't display "Import" and "Operations" * for views and information_schema */if (! $tbl_is_view && !$db_is_information_schema) {    $tabs['import']['icon'] = 'b_tblimport.png';    $tabs['import']['link'] = 'tbl_import.php';    $tabs['import']['text'] = __('Import');    $tabs['operation']['icon'] = 'b_tblops.png';    $tabs['operation']['link'] = 'tbl_operations.php';    $tabs['operation']['text'] = __('Operations');}if (PMA_Tracker::isActive()) {    $tabs['tracking']['icon'] = 'eye.png';    $tabs['tracking']['text'] = __('Tracking');    $tabs['tracking']['link'] = 'tbl_tracking.php';}if (!$db_is_information_schema && !PMA_DRIZZLE) {    if (PMA_currentUserHasPrivilege('TRIGGER', $db, $table) && ! PMA_Table::isView($db, $table)) {        $tabs['triggers']['link'] = 'tbl_triggers.php';        $tabs['triggers']['text'] = __('Triggers');        $tabs['triggers']['icon'] = 'b_triggers.png';    }}/** * Views support a limited number of operations */if ($tbl_is_view && !$db_is_information_schema) {    $tabs['operation']['icon'] = 'b_tblops.png';    $tabs['operation']['link'] = 'view_operations.php';    $tabs['operation']['text'] = __('Operations');}if ($table_info_num_rows == 0 && !$tbl_is_view) {    $tabs['browse']['warning'] = __('Table seems to be empty!');    $tabs['search']['warning'] = __('Table seems to be empty!');}echo PMA_generate_html_tabs($tabs, $url_params);unset($tabs);if (PMA_Tracker::isActive() and PMA_Tracker::isTracked($GLOBALS["db"], $GLOBALS["table"])) {    $msg = PMA_Message::notice('<a href="tbl_tracking.php?'.$url_query.'">'.sprintf(__('Tracking of %s.%s is activated.'), htmlspecialchars($GLOBALS["db"]), htmlspecialchars($GLOBALS["table"])).'</a>');    $msg->display();}/** * Displays a message */if (!empty($message)) {    PMA_showMessage($message);    unset($message);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Misc functions used all over the scripts. * * @package PhpMyAdmin *//** * Detects which function to use for PMA_pow. * * @return string Function name. */function PMA_detect_pow(){    if (function_exists('bcpow')) {        // BCMath Arbitrary Precision Mathematics Function        return 'bcpow';    } elseif (function_exists('gmp_pow')) {        // GMP Function        return 'gmp_pow';    } else {        // PHP function        return 'pow';    }}/** * Exponential expression / raise number into power * * @param string $base         base to raise * @param string $exp          exponent to use * @param mixed  $use_function pow function to use, or false for auto-detect * * @return mixed string or float */function PMA_pow($base, $exp, $use_function = false){    static $pow_function = null;    if (null == $pow_function) {        $pow_function = PMA_detect_pow();    }    if (! $use_function) {        $use_function = $pow_function;    }    if ($exp < 0 && 'pow' != $use_function) {        return false;    }    switch ($use_function) {    case 'bcpow' :        // bcscale() needed for testing PMA_pow() with base values < 1        bcscale(10);        $pow = bcpow($base, $exp);        break;    case 'gmp_pow' :         $pow = gmp_strval(gmp_pow($base, $exp));        break;    case 'pow' :        $base = (float) $base;        $exp = (int) $exp;        $pow = pow($base, $exp);        break;    default:        $pow = $use_function($base, $exp);    }    return $pow;}/** * Returns an HTML IMG tag for a particular icon from a theme, * which may be an actual file or an icon from a sprite. * This function takes into account the PropertiesIconic * configuration setting and wraps the image tag in a span tag. * * @param string  $icon       name of icon file * @param string  $alternate  alternate text * @param boolean $force_text whether to force alternate text to be displayed * * @return string an html snippet */function PMA_getIcon($icon, $alternate = '', $force_text = false){    // $cfg['PropertiesIconic'] is true or both    $include_icon = ($GLOBALS['cfg']['PropertiesIconic'] !== false);    // $cfg['PropertiesIconic'] is false or both    // OR we have no $include_icon    $include_text = ($force_text || true !== $GLOBALS['cfg']['PropertiesIconic']);    // Always use a span (we rely on this in js/sql.js)    $button = '<span class="nowrap">';    if ($include_icon) {        $button .= PMA_getImage($icon, $alternate);    }    if ($include_icon && $include_text) {        $button .= ' ';    }    if ($include_text) {        $button .= $alternate;    }    $button .= '</span>';    return $button;}/** * Returns an HTML IMG tag for a particular image from a theme, * which may be an actual file or an icon from a sprite * * @param string $image      The name of the file to get * @param string $alternate  Used to set 'alt' and 'title' attributes of the image * @param array  $attributes An associative array of other attributes * * @return string an html IMG tag */function PMA_getImage($image, $alternate = '', $attributes = array()){    static $sprites; // cached list of available sprites (if any)    $url       = '';    $is_sprite = false;    $alternate = htmlspecialchars($alternate);    // If it's the first time this function is called    if (! isset($sprites)) {        // Try to load the list of sprites        if (is_readable($_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php')) {            include_once $_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php';            $sprites = PMA_sprites();        } else {            // No sprites are available for this theme            $sprites = array();        }    }    // Check if we have the requested image as a sprite    //  and set $url accordingly    $class = str_replace(array('.gif','.png'), '', $image);    if (array_key_exists($class, $sprites)) {        $is_sprite = true;        $url = 'themes/dot.gif';    } else {        $url = $GLOBALS['pmaThemeImage'] . $image;    }    // set class attribute    if ($is_sprite) {        if (isset($attributes['class'])) {            $attributes['class'] = "icon ic_$class " . $attributes['class'];        } else {            $attributes['class'] = "icon ic_$class";        }    }    // set all other attributes    $attr_str = '';    foreach ($attributes as $key => $value) {        if (! in_array($key, array('alt', 'title'))) {            $attr_str .= " $key=\"$value\"";        }    }    // override the alt attribute    if (isset($attributes['alt'])) {        $alt = $attributes['alt'];    } else {        $alt = $alternate;    }    // override the title attribute    if (isset($attributes['title'])) {        $title = $attributes['title'];    } else {        $title = $alternate;    }    // generate the IMG tag    $template = '<img src="%s" title="%s" alt="%s"%s />';    $retval = sprintf($template, $url, $title, $alt, $attr_str);    return $retval;}/** * Displays the maximum size for an upload * * @param integer $max_upload_size the size * * @return string the message * * @access  public */function PMA_displayMaximumUploadSize($max_upload_size){    // I have to reduce the second parameter (sensitiveness) from 6 to 4    // to avoid weird results like 512 kKib    list($max_size, $max_unit) = PMA_formatByteDown($max_upload_size, 4);    return '(' . sprintf(__('Max: %s%s'), $max_size, $max_unit) . ')';}/** * Generates a hidden field which should indicate to the browser * the maximum size for upload * * @param integer $max_size the size * * @return string the INPUT field * * @access  public */function PMA_generateHiddenMaxFileSize($max_size){    return '<input type="hidden" name="MAX_FILE_SIZE" value="' .$max_size . '" />';}/** * Add slashes before "'" and "\" characters so a value containing them can * be used in a sql comparison. * * @param string $a_string the string to slash * @param bool   $is_like  whether the string will be used in a 'LIKE' clause *                         (it then requires two more escaped sequences) or not * @param bool   $crlf     whether to treat cr/lfs as escape-worthy entities *                         (converts \n to \\n, \r to \\r) * @param bool   $php_code whether this function is used as part of the *                         "Create PHP code" dialog * * @return  string   the slashed string * * @access  public */function PMA_sqlAddSlashes($a_string = '', $is_like = false, $crlf = false, $php_code = false){    if ($is_like) {        $a_string = str_replace('\\', '\\\\\\\\', $a_string);    } else {        $a_string = str_replace('\\', '\\\\', $a_string);    }    if ($crlf) {        $a_string = strtr(            $a_string,            array("\n" => '\n', "\r" => '\r', "\t" => '\t')        );    }    if ($php_code) {        $a_string = str_replace('\'', '\\\'', $a_string);    } else {        $a_string = str_replace('\'', '\'\'', $a_string);    }    return $a_string;} // end of the 'PMA_sqlAddSlashes()' function/** * Add slashes before "_" and "%" characters for using them in MySQL * database, table and field names. * Note: This function does not escape backslashes! * * @param string $name the string to escape * * @return string the escaped string * * @access  public */function PMA_escape_mysql_wildcards($name){    return strtr($name, array('_' => '\\_', '%' => '\\%'));} // end of the 'PMA_escape_mysql_wildcards()' function/** * removes slashes before "_" and "%" characters * Note: This function does not unescape backslashes! * * @param string $name the string to escape * * @return  string   the escaped string * * @access  public */function PMA_unescape_mysql_wildcards($name){    return strtr($name, array('\\_' => '_', '\\%' => '%'));} // end of the 'PMA_unescape_mysql_wildcards()' function/** * removes quotes (',",`) from a quoted string * * checks if the sting is quoted and removes this quotes * * @param string $quoted_string string to remove quotes from * @param string $quote         type of quote to remove * * @return string unqoted string */function PMA_unQuote($quoted_string, $quote = null){    $quotes = array();    if (null === $quote) {        $quotes[] = '`';        $quotes[] = '"';        $quotes[] = "'";    } else {        $quotes[] = $quote;    }    foreach ($quotes as $quote) {        if (substr($quoted_string, 0, 1) === $quote            && substr($quoted_string, -1, 1) === $quote        ) {            $unquoted_string = substr($quoted_string, 1, -1);            // replace escaped quotes            $unquoted_string = str_replace(                $quote . $quote,                $quote,                $unquoted_string            );            return $unquoted_string;        }    }    return $quoted_string;}/** * format sql strings * * @param mixed  $parsed_sql   pre-parsed SQL structure * @param string $unparsed_sql raw SQL string * * @return string  the formatted sql * * @global  array    the configuration array * @global  boolean  whether the current statement is a multiple one or not * * @access  public * @todo    move into PMA_Sql */function PMA_formatSql($parsed_sql, $unparsed_sql = ''){    global $cfg;    // Check that we actually have a valid set of parsed data    // well, not quite    // first check for the SQL parser having hit an error    if (PMA_SQP_isError()) {        return htmlspecialchars($parsed_sql['raw']);    }    // then check for an array    if (! is_array($parsed_sql)) {        // We don't so just return the input directly        // This is intended to be used for when the SQL Parser is turned off        $formatted_sql = "<pre>\n";        if ($cfg['SQP']['fmtType'] == 'none' && $unparsed_sql != '') {            $formatted_sql .= $unparsed_sql;        } else {            $formatted_sql .= $parsed_sql;        }        $formatted_sql .= "\n</pre>";        return $formatted_sql;    }    $formatted_sql        = '';    switch ($cfg['SQP']['fmtType']) {    case 'none':        if ($unparsed_sql != '') {            $formatted_sql = '<span class="inner_sql"><pre>' . "\n"                . PMA_SQP_formatNone(array('raw' => $unparsed_sql)) . "\n"                . '</pre></span>';        } else {            $formatted_sql = PMA_SQP_formatNone($parsed_sql);        }        break;    case 'html':        $formatted_sql = PMA_SQP_formatHtml($parsed_sql, 'color');        break;    case 'text':        $formatted_sql = PMA_SQP_formatHtml($parsed_sql, 'text');        break;    default:        break;    } // end switch    return $formatted_sql;} // end of the "PMA_formatSql()" function/** * Displays a link to the official MySQL documentation * * @param string $chapter   chapter of "HTML, one page per chapter" documentation * @param string $link      contains name of page/anchor that is being linked * @param bool   $big_icon  whether to use big icon (like in left frame) * @param string $anchor    anchor to page part * @param bool   $just_open whether only the opening <a> tag should be returned * * @return  string  the html link * * @access  public */function PMA_showMySQLDocu($chapter, $link, $big_icon = false, $anchor = '', $just_open = false){    global $cfg;    if ($cfg['MySQLManualType'] == 'none' || empty($cfg['MySQLManualBase'])) {        return '';    }    // Fixup for newly used names:    $chapter = str_replace('_', '-', strtolower($chapter));    $link = str_replace('_', '-', strtolower($link));    switch ($cfg['MySQLManualType']) {    case 'chapters':        if (empty($chapter)) {            $chapter = 'index';        }        if (empty($anchor)) {            $anchor = $link;        }        $url = $cfg['MySQLManualBase'] . '/' . $chapter . '.html#' . $anchor;        break;    case 'big':        if (empty($anchor)) {            $anchor = $link;        }        $url = $cfg['MySQLManualBase'] . '#' . $anchor;        break;    case 'searchable':        if (empty($link)) {            $link = 'index';        }        $url = $cfg['MySQLManualBase'] . '/' . $link . '.html';        if (!empty($anchor)) {            $url .= '#' . $anchor;        }        break;    case 'viewable':    default:        if (empty($link)) {            $link = 'index';        }        $mysql = '5.0';        $lang = 'en';        if (defined('PMA_MYSQL_INT_VERSION')) {            if (PMA_MYSQL_INT_VERSION >= 50500) {                $mysql = '5.5';                /* l10n: Please check that translation actually exists. */                $lang = _pgettext('MySQL 5.5 documentation language', 'en');            } else if (PMA_MYSQL_INT_VERSION >= 50100) {                $mysql = '5.1';                /* l10n: Please check that translation actually exists. */                $lang = _pgettext('MySQL 5.1 documentation language', 'en');            } else {                $mysql = '5.0';                /* l10n: Please check that translation actually exists. */                $lang = _pgettext('MySQL 5.0 documentation language', 'en');            }        }        $url = $cfg['MySQLManualBase'] . '/' . $mysql . '/' . $lang . '/' . $link . '.html';        if (!empty($anchor)) {            $url .= '#' . $anchor;        }        break;    }    $open_link = '<a href="' . PMA_linkURL($url) . '" target="mysql_doc">';    if ($just_open) {        return $open_link;    } elseif ($big_icon) {        return $open_link . PMA_getImage('b_sqlhelp.png', __('Documentation')) . '</a>';    } elseif ($GLOBALS['cfg']['ReplaceHelpImg']) {        return $open_link . PMA_getImage('b_help.png', __('Documentation')) . '</a>';    } else {        return '[' . $open_link . __('Documentation') . '</a>]';    }} // end of the 'PMA_showMySQLDocu()' function/** * Displays a link to the phpMyAdmin documentation * * @param string $anchor anchor in documentation * * @return  string  the html link * * @access  public */function PMA_showDocu($anchor){    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        return '<a href="Documentation.html#' . $anchor . '" target="documentation">'             . PMA_getImage('b_help.png', __('Documentation'))             . '</a>';    } else {        return '[<a href="Documentation.html#' . $anchor . '" target="documentation">'        . __('Documentation') . '</a>]';    }} // end of the 'PMA_showDocu()' function/** * Displays a link to the PHP documentation * * @param string $target anchor in documentation * * @return string  the html link * * @access  public */function PMA_showPHPDocu($target){    $url = PMA_getPHPDocLink($target);    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        return '<a href="' . $url . '" target="documentation">'             . PMA_getImage('b_help.png', __('Documentation'))             . '</a>';    } else {        return '[<a href="' . $url . '" target="documentation">' . __('Documentation') . '</a>]';    }} // end of the 'PMA_showPHPDocu()' function/** * returns HTML for a footnote marker and add the messsage to the footnotes * * @param string $message the error message * @param bool   $bbcode * @param string $type    message types * * @return  string html code for a footnote marker * * @access  public */function PMA_showHint($message, $bbcode = false, $type = 'notice'){    if ($message instanceof PMA_Message) {        $key = $message->getHash();        $type = $message->getLevel();    } else {        $key = md5($message);    }    if (! isset($GLOBALS['footnotes'][$key])) {        if (empty($GLOBALS['footnotes']) || ! is_array($GLOBALS['footnotes'])) {            $GLOBALS['footnotes'] = array();        }        $nr = count($GLOBALS['footnotes']) + 1;        $GLOBALS['footnotes'][$key] = array(            'note'      => $message,            'type'      => $type,            'nr'        => $nr,        );    } else {        $nr = $GLOBALS['footnotes'][$key]['nr'];    }    if ($bbcode) {        return '[sup]' . $nr . '[/sup]';    }    // footnotemarker used in js/tooltip.js    return '<sup class="footnotemarker">' . $nr . '</sup>' .           PMA_getImage('b_help.png', '', array('class' => 'footnotemarker footnote_' . $nr));}/** * Displays a MySQL error message in the right frame. * * @param string $error_message  the error message * @param string $the_query      the sql query that failed * @param bool   $is_modify_link whether to show a "modify" link or not * @param string $back_url       the "back" link url (full path is not required) * @param bool   $exit           EXIT the page? * * @global  string    the curent table * @global  string    the current db * * @access  public */function PMA_mysqlDie($error_message = '', $the_query = '',$is_modify_link = true, $back_url = '', $exit = true){    global $table, $db;    /**     * start http output, display html headers     */    include_once './libraries/header.inc.php';    $error_msg_output = '';    if (!$error_message) {        $error_message = PMA_DBI_getError();    }    if (!$the_query && !empty($GLOBALS['sql_query'])) {        $the_query = $GLOBALS['sql_query'];    }    // --- Added to solve bug #641765    if (!function_exists('PMA_SQP_isError') || PMA_SQP_isError()) {        $formatted_sql = htmlspecialchars($the_query);    } elseif (empty($the_query) || trim($the_query) == '') {        $formatted_sql = '';    } else {        if (strlen($the_query) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {            $formatted_sql = htmlspecialchars(substr($the_query, 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'])) . '[...]';        } else {            $formatted_sql = PMA_formatSql(PMA_SQP_parse($the_query), $the_query);        }    }    // ---    $error_msg_output .= "\n" . '<!-- PMA-SQL-ERROR -->' . "\n";    $error_msg_output .= '    <div class="error"><h1>' . __('Error') . '</h1>' . "\n";    // if the config password is wrong, or the MySQL server does not    // respond, do not show the query that would reveal the    // username/password    if (!empty($the_query) && !strstr($the_query, 'connect')) {        // --- Added to solve bug #641765        if (function_exists('PMA_SQP_isError') && PMA_SQP_isError()) {            $error_msg_output .= PMA_SQP_getErrorString() . "\n";            $error_msg_output .= '<br />' . "\n";        }        // ---        // modified to show the help on sql errors        $error_msg_output .= '    <p><strong>' . __('SQL query') . ':</strong>' . "\n";        if (strstr(strtolower($formatted_sql), 'select')) {            // please show me help to the error on select            $error_msg_output .= PMA_showMySQLDocu('SQL-Syntax', 'SELECT');        }        if ($is_modify_link) {            $_url_params = array(                'sql_query' => $the_query,                'show_query' => 1,            );            if (strlen($table)) {                $_url_params['db'] = $db;                $_url_params['table'] = $table;                $doedit_goto = '<a href="tbl_sql.php' . PMA_generate_common_url($_url_params) . '">';            } elseif (strlen($db)) {                $_url_params['db'] = $db;                $doedit_goto = '<a href="db_sql.php' . PMA_generate_common_url($_url_params) . '">';            } else {                $doedit_goto = '<a href="server_sql.php' . PMA_generate_common_url($_url_params) . '">';            }            $error_msg_output .= $doedit_goto               . PMA_getIcon('b_edit.png', __('Edit'))               . '</a>';        } // end if        $error_msg_output .= '    </p>' . "\n"            .'    <p>' . "\n"            .'        ' . $formatted_sql . "\n"            .'    </p>' . "\n";    } // end if    if (! empty($error_message)) {        $error_message = preg_replace(            "@((\015\012)|(\015)|(\012)){3,}@",            "\n\n",            $error_message        );    }    // modified to show the help on error-returns    // (now error-messages-server)    $error_msg_output .= '<p>' . "\n"            . '    <strong>' . __('MySQL said: ') . '</strong>'            . PMA_showMySQLDocu('Error-messages-server', 'Error-messages-server')            . "\n"            . '</p>' . "\n";    // The error message will be displayed within a CODE segment.    // To preserve original formatting, but allow wordwrapping,    // we do a couple of replacements    // Replace all non-single blanks with their HTML-counterpart    $error_message = str_replace('  ', '&nbsp;&nbsp;', $error_message);    // Replace TAB-characters with their HTML-counterpart    $error_message = str_replace("\t", '&nbsp;&nbsp;&nbsp;&nbsp;', $error_message);    // Replace linebreaks    $error_message = nl2br($error_message);    $error_msg_output .= '<code>' . "\n"        . $error_message . "\n"        . '</code><br />' . "\n";    $error_msg_output .= '</div>';    $_SESSION['Import_message']['message'] = $error_msg_output;    if ($exit) {        /**         * If in an Ajax request         * - avoid displaying a Back link         * - use PMA_ajaxResponse() to transmit the message and exit         */        if ($GLOBALS['is_ajax_request'] == true) {            PMA_ajaxResponse($error_msg_output, false);        }        if (! empty($back_url)) {            if (strstr($back_url, '?')) {                $back_url .= '&amp;no_history=true';            } else {                $back_url .= '?no_history=true';            }            $_SESSION['Import_message']['go_back_url'] = $back_url;            $error_msg_output .= '<fieldset class="tblFooters">';            $error_msg_output .= '[ <a href="' . $back_url . '">' . __('Back') . '</a> ]';            $error_msg_output .= '</fieldset>' . "\n\n";        }        echo $error_msg_output;        /**         * display footer and exit         */        include './libraries/footer.inc.php';    } else {        echo $error_msg_output;    }} // end of the 'PMA_mysqlDie()' function/** * returns array with tables of given db with extended information and grouped * * @param string   $db           name of db * @param string   $tables       name of tables * @param integer  $limit_offset list offset * @param int|bool $limit_count  max tables to return * * @return  array    (recursive) grouped table list */function PMA_getTableList($db, $tables = null, $limit_offset = 0, $limit_count = false){    $sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];    if (null === $tables) {        $tables = PMA_DBI_get_tables_full($db, false, false, null, $limit_offset, $limit_count);        if ($GLOBALS['cfg']['NaturalOrder']) {            uksort($tables, 'strnatcasecmp');        }    }    if (count($tables) < 1) {        return $tables;    }    $default = array(        'Name'      => '',        'Rows'      => 0,        'Comment'   => '',        'disp_name' => '',    );    $table_groups = array();    // for blobstreaming - list of blobstreaming tables    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    foreach ($tables as $table_name => $table) {        // if BS tables exist        if (PMA_BS_IsHiddenTable($table_name)) {            continue;        }        // check for correct row count        if (null === $table['Rows']) {            // Do not check exact row count here,            // if row count is invalid possibly the table is defect            // and this would break left frame;            // but we can check row count if this is a view or the            // information_schema database            // since PMA_Table::countRecords() returns a limited row count            // in this case.            // set this because PMA_Table::countRecords() can use it            $tbl_is_view = $table['TABLE_TYPE'] == 'VIEW';            if ($tbl_is_view || PMA_is_system_schema($db)) {                $table['Rows'] = PMA_Table::countRecords($db, $table['Name'], false, true);            }        }        // in $group we save the reference to the place in $table_groups        // where to store the table info        if ($GLOBALS['cfg']['LeftFrameDBTree']            && $sep && strstr($table_name, $sep)        ) {            $parts = explode($sep, $table_name);            $group =& $table_groups;            $i = 0;            $group_name_full = '';            $parts_cnt = count($parts) - 1;            while ($i < $parts_cnt                    && $i < $GLOBALS['cfg']['LeftFrameTableLevel']) {                $group_name = $parts[$i] . $sep;                $group_name_full .= $group_name;                if (! isset($group[$group_name])) {                    $group[$group_name] = array();                    $group[$group_name]['is' . $sep . 'group'] = true;                    $group[$group_name]['tab' . $sep . 'count'] = 1;                    $group[$group_name]['tab' . $sep . 'group'] = $group_name_full;                } elseif (! isset($group[$group_name]['is' . $sep . 'group'])) {                    $table = $group[$group_name];                    $group[$group_name] = array();                    $group[$group_name][$group_name] = $table;                    unset($table);                    $group[$group_name]['is' . $sep . 'group'] = true;                    $group[$group_name]['tab' . $sep . 'count'] = 1;                    $group[$group_name]['tab' . $sep . 'group'] = $group_name_full;                } else {                    $group[$group_name]['tab' . $sep . 'count']++;                }                $group =& $group[$group_name];                $i++;            }        } else {            if (! isset($table_groups[$table_name])) {                $table_groups[$table_name] = array();            }            $group =& $table_groups;        }        if ($GLOBALS['cfg']['ShowTooltipAliasTB']            && $GLOBALS['cfg']['ShowTooltipAliasTB'] !== 'nested'            && $table['Comment'] // do not switch if the comment is empty        ) {            // switch tooltip and name            $table['disp_name'] = $table['Comment'];            $table['Comment'] = $table['Name'];        } else {            $table['disp_name'] = $table['Name'];        }        $group[$table_name] = array_merge($default, $table);    }    return $table_groups;}/* ----------------------- Set of misc functions ----------------------- *//** * Adds backquotes on both sides of a database, table or field name. * and escapes backquotes inside the name with another backquote * * example: * <code> * echo PMA_backquote('owner`s db'); // `owner``s db` * * </code> * * @param mixed   $a_name the database, table or field name to "backquote" *                        or array of it * @param boolean $do_it  a flag to bypass this function (used by dump *                        functions) * * @return  mixed    the "backquoted" database, table or field name * * @access  public */function PMA_backquote($a_name, $do_it = true){    if (is_array($a_name)) {        foreach ($a_name as &$data) {            $data = PMA_backquote($data, $do_it);        }        return $a_name;    }    if (! $do_it) {        global $PMA_SQPdata_forbidden_word;        if (! in_array(strtoupper($a_name), $PMA_SQPdata_forbidden_word)) {            return $a_name;        }    }    // '0' is also empty for php :-(    if (strlen($a_name) && $a_name !== '*') {        return '`' . str_replace('`', '``', $a_name) . '`';    } else {        return $a_name;    }} // end of the 'PMA_backquote()' function/** * Defines the <CR><LF> value depending on the user OS. * * @return  string   the <CR><LF> value to use * * @access  public */function PMA_whichCrlf(){    // The 'PMA_USR_OS' constant is defined in "./libraries/Config.class.php"    // Win case    if (PMA_USR_OS == 'Win') {        $the_crlf = "\r\n";    } else {        // Others        $the_crlf = "\n";    }    return $the_crlf;} // end of the 'PMA_whichCrlf()' function/** * Reloads navigation if needed. * * @param bool $jsonly prints out pure JavaScript * * @access  public */function PMA_reloadNavigation($jsonly=false){    // Reloads the navigation frame via JavaScript if required    if (isset($GLOBALS['reload']) && $GLOBALS['reload']) {        // one of the reasons for a reload is when a table is dropped        // in this case, get rid of the table limit offset, otherwise        // we have a problem when dropping a table on the last page        // and the offset becomes greater than the total number of tables        unset($_SESSION['tmp_user_values']['table_limit_offset']);        echo "\n";        $reload_url = './navigation.php?' . PMA_generate_common_url($GLOBALS['db'], '', '&');        if (!$jsonly) {            echo '<script type="text/javascript">' . PHP_EOL;        }    ?>//<![CDATA[if (typeof(window.parent) != 'undefined'    && typeof(window.parent.frame_navigation) != 'undefined'    && window.parent.goTo) {    window.parent.goTo('<?php echo $reload_url; ?>');}//]]><?php        if (!$jsonly) {            echo '</script>' . PHP_EOL;        }        unset($GLOBALS['reload']);    }}/** * displays the message and the query * usually the message is the result of the query executed * * @param string  $message   the message to display * @param string  $sql_query the query to display * @param string  $type      the type (level) of the message * @param boolean $is_view   is this a message after a VIEW operation? * * @return  string * * @access  public */function PMA_showMessage($message, $sql_query = null, $type = 'notice', $is_view = false){    /*     * PMA_ajaxResponse uses this function to collect the string of HTML generated     * for showing the message.  Use output buffering to collect it and return it     * in a string.  In some special cases on sql.php, buffering has to be disabled     * and hence we check with $GLOBALS['buffer_message']     */    if ( $GLOBALS['is_ajax_request'] == true && ! isset($GLOBALS['buffer_message']) ) {        ob_start();    }    global $cfg;    if (null === $sql_query) {        if (! empty($GLOBALS['display_query'])) {            $sql_query = $GLOBALS['display_query'];        } elseif ($cfg['SQP']['fmtType'] == 'none' && ! empty($GLOBALS['unparsed_sql'])) {            $sql_query = $GLOBALS['unparsed_sql'];        } elseif (! empty($GLOBALS['sql_query'])) {            $sql_query = $GLOBALS['sql_query'];        } else {            $sql_query = '';        }    }    if (isset($GLOBALS['using_bookmark_message'])) {        $GLOBALS['using_bookmark_message']->display();        unset($GLOBALS['using_bookmark_message']);    }    // Corrects the tooltip text via JS if required    // @todo this is REALLY the wrong place to do this - very unexpected here    if (! $is_view && strlen($GLOBALS['table']) && $cfg['ShowTooltip']) {        $tooltip = PMA_Table::sGetToolTip($GLOBALS['db'], $GLOBALS['table']);        $uni_tbl = PMA_jsFormat($GLOBALS['db'] . '.' . $GLOBALS['table'], false);        echo "\n";        echo '<script type="text/javascript">' . "\n";        echo '//<![CDATA[' . "\n";        echo "if (window.parent.updateTableTitle) window.parent.updateTableTitle('"            . $uni_tbl . "', '" . PMA_jsFormat($tooltip, false) . "');" . "\n";        echo '//]]>' . "\n";        echo '</script>' . "\n";    } // end if ... elseif    // Checks if the table needs to be repaired after a TRUNCATE query.    // @todo what about $GLOBALS['display_query']???    // @todo this is REALLY the wrong place to do this - very unexpected here    if (strlen($GLOBALS['table'])        && $GLOBALS['sql_query'] == 'TRUNCATE TABLE ' . PMA_backquote($GLOBALS['table'])    ) {        if (PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], 'Index_length') > 1024 && !PMA_DRIZZLE) {            PMA_DBI_try_query('REPAIR TABLE ' . PMA_backquote($GLOBALS['table']));        }    }    unset($tbl_status);    // In an Ajax request, $GLOBALS['cell_align_left'] may not be defined. Hence,    // check for it's presence before using it    echo '<div id="result_query" align="'        . ( isset($GLOBALS['cell_align_left']) ? $GLOBALS['cell_align_left'] : '' )        . '">' . "\n";    if ($message instanceof PMA_Message) {        if (isset($GLOBALS['special_message'])) {            $message->addMessage($GLOBALS['special_message']);            unset($GLOBALS['special_message']);        }        $message->display();        $type = $message->getLevel();    } else {        echo '<div class="' . $type . '">';        echo PMA_sanitize($message);        if (isset($GLOBALS['special_message'])) {            echo PMA_sanitize($GLOBALS['special_message']);            unset($GLOBALS['special_message']);        }        echo '</div>';    }    if ($cfg['ShowSQL'] == true && ! empty($sql_query)) {        // Html format the query to be displayed        // If we want to show some sql code it is easiest to create it here        /* SQL-Parser-Analyzer */        if (! empty($GLOBALS['show_as_php'])) {            $new_line = '\\n"<br />' . "\n"                . '&nbsp;&nbsp;&nbsp;&nbsp;. "';            $query_base = htmlspecialchars(addslashes($sql_query));            $query_base = preg_replace('/((\015\012)|(\015)|(\012))/', $new_line, $query_base);        } else {            $query_base = $sql_query;        }        $query_too_big = false;        if (strlen($query_base) > $cfg['MaxCharactersInDisplayedSQL']) {            // when the query is large (for example an INSERT of binary            // data), the parser chokes; so avoid parsing the query            $query_too_big = true;            $shortened_query_base = nl2br(                htmlspecialchars(                    substr($sql_query, 0, $cfg['MaxCharactersInDisplayedSQL']) . '[...]'                )            );        } elseif (! empty($GLOBALS['parsed_sql'])         && $query_base == $GLOBALS['parsed_sql']['raw']) {            // (here, use "! empty" because when deleting a bookmark,            // $GLOBALS['parsed_sql'] is set but empty            $parsed_sql = $GLOBALS['parsed_sql'];        } else {            // Parse SQL if needed            $parsed_sql = PMA_SQP_parse($query_base);        }        // Analyze it        if (isset($parsed_sql) && ! PMA_SQP_isError()) {            $analyzed_display_query = PMA_SQP_analyze($parsed_sql);            // Same as below (append LIMIT), append the remembered ORDER BY            if ($GLOBALS['cfg']['RememberSorting']                && isset($analyzed_display_query[0]['queryflags']['select_from'])                && isset($GLOBALS['sql_order_to_append'])            ) {                $query_base = $analyzed_display_query[0]['section_before_limit']                    . "\n" . $GLOBALS['sql_order_to_append']                    . $analyzed_display_query[0]['section_after_limit'];                // Need to reparse query                $parsed_sql = PMA_SQP_parse($query_base);                // update the $analyzed_display_query                $analyzed_display_query[0]['section_before_limit'] .= $GLOBALS['sql_order_to_append'];                $analyzed_display_query[0]['order_by_clause'] = $GLOBALS['sorted_col'];            }            // Here we append the LIMIT added for navigation, to            // enable its display. Adding it higher in the code            // to $sql_query would create a problem when            // using the Refresh or Edit links.            // Only append it on SELECTs.            /**             * @todo what would be the best to do when someone hits Refresh:             * use the current LIMITs ?             */            if (isset($analyzed_display_query[0]['queryflags']['select_from'])                && isset($GLOBALS['sql_limit_to_append'])            ) {                $query_base = $analyzed_display_query[0]['section_before_limit']                    . "\n" . $GLOBALS['sql_limit_to_append']                    . $analyzed_display_query[0]['section_after_limit'];                // Need to reparse query                $parsed_sql = PMA_SQP_parse($query_base);            }        }        if (! empty($GLOBALS['show_as_php'])) {            $query_base = '$sql  = "' . $query_base;        } elseif (! empty($GLOBALS['validatequery'])) {            try {                $query_base = PMA_validateSQL($query_base);            } catch (Exception $e) {                PMA_Message::error(__('Failed to connect to SQL validator!'))->display();            }        } elseif (isset($parsed_sql)) {            $query_base = PMA_formatSql($parsed_sql, $query_base);        }        // Prepares links that may be displayed to edit/explain the query        // (don't go to default pages, we must go to the page        // where the query box is available)        // Basic url query part        $url_params = array();        if (! isset($GLOBALS['db'])) {            $GLOBALS['db'] = '';        }        if (strlen($GLOBALS['db'])) {            $url_params['db'] = $GLOBALS['db'];            if (strlen($GLOBALS['table'])) {                $url_params['table'] = $GLOBALS['table'];                $edit_link = 'tbl_sql.php';            } else {                $edit_link = 'db_sql.php';            }        } else {            $edit_link = 'server_sql.php';        }        // Want to have the query explained        // but only explain a SELECT (that has not been explained)        /* SQL-Parser-Analyzer */        $explain_link = '';        $is_select = false;        if (! empty($cfg['SQLQuery']['Explain']) && ! $query_too_big) {            $explain_params = $url_params;            // Detect if we are validating as well            // To preserve the validate uRL data            if (! empty($GLOBALS['validatequery'])) {                $explain_params['validatequery'] = 1;            }            if (preg_match('@^SELECT[[:space:]]+@i', $sql_query)) {                $explain_params['sql_query'] = 'EXPLAIN ' . $sql_query;                $_message = __('Explain SQL');                $is_select = true;            } elseif (preg_match('@^EXPLAIN[[:space:]]+SELECT[[:space:]]+@i', $sql_query)) {                $explain_params['sql_query'] = substr($sql_query, 8);                $_message = __('Skip Explain SQL');            }            if (isset($explain_params['sql_query'])) {                $explain_link = 'import.php' . PMA_generate_common_url($explain_params);                $explain_link = ' [' . PMA_linkOrButton($explain_link, $_message) . ']';            }        } //show explain        $url_params['sql_query']  = $sql_query;        $url_params['show_query'] = 1;        // even if the query is big and was truncated, offer the chance        // to edit it (unless it's enormous, see PMA_linkOrButton() )        if (! empty($cfg['SQLQuery']['Edit'])) {            if ($cfg['EditInWindow'] == true) {                $onclick = 'window.parent.focus_querywindow(\''                    . PMA_jsFormat($sql_query, false) . '\'); return false;';            } else {                $onclick = '';            }            $edit_link .= PMA_generate_common_url($url_params) . '#querybox';            $edit_link = ' [' . PMA_linkOrButton($edit_link, __('Edit'), array('onclick' => $onclick)) . ']';        } else {            $edit_link = '';        }        $url_qpart = PMA_generate_common_url($url_params);        // Also we would like to get the SQL formed in some nice        // php-code        if (! empty($cfg['SQLQuery']['ShowAsPHP']) && ! $query_too_big) {            $php_params = $url_params;            if (! empty($GLOBALS['show_as_php'])) {                $_message = __('Without PHP Code');            } else {                $php_params['show_as_php'] = 1;                $_message = __('Create PHP Code');            }            $php_link = 'import.php' . PMA_generate_common_url($php_params);            $php_link = ' [' . PMA_linkOrButton($php_link, $_message) . ']';            if (isset($GLOBALS['show_as_php'])) {                $runquery_link = 'import.php' . PMA_generate_common_url($url_params);                $php_link .= ' [' . PMA_linkOrButton($runquery_link, __('Submit Query')) . ']';            }        } else {            $php_link = '';        } //show as php        // Refresh query        if (! empty($cfg['SQLQuery']['Refresh'])            && ! isset($GLOBALS['show_as_php']) // 'Submit query' does the same            && preg_match('@^(SELECT|SHOW)[[:space:]]+@i', $sql_query)        ) {            $refresh_link = 'import.php' . PMA_generate_common_url($url_params);            $refresh_link = ' [' . PMA_linkOrButton($refresh_link, __('Refresh')) . ']';        } else {            $refresh_link = '';        } //refresh        if (! empty($cfg['SQLValidator']['use'])            && ! empty($cfg['SQLQuery']['Validate'])        ) {            $validate_params = $url_params;            if (!empty($GLOBALS['validatequery'])) {                $validate_message = __('Skip Validate SQL');            } else {                $validate_params['validatequery'] = 1;                $validate_message = __('Validate SQL');            }            $validate_link = 'import.php' . PMA_generate_common_url($validate_params);            $validate_link = ' [' . PMA_linkOrButton($validate_link, $validate_message) . ']';        } else {            $validate_link = '';        } //validator        if (!empty($GLOBALS['validatequery'])) {            echo '<div class="sqlvalidate">';        } else {            echo '<code class="sql">';        }        if ($query_too_big) {            echo $shortened_query_base;        } else {            echo $query_base;        }        //Clean up the end of the PHP        if (! empty($GLOBALS['show_as_php'])) {            echo '";';        }        if (!empty($GLOBALS['validatequery'])) {            echo '</div>';        } else {            echo '</code>';        }        echo '<div class="tools">';        // avoid displaying a Profiling checkbox that could        // be checked, which would reexecute an INSERT, for example        if (! empty($refresh_link)) {            PMA_profilingCheckbox($sql_query);        }        // if needed, generate an invisible form that contains controls for the        // Inline link; this way, the behavior of the Inline link does not        // depend on the profiling support or on the refresh link        if (empty($refresh_link) || ! PMA_profilingSupported()) {            echo '<form action="sql.php" method="post">';            echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']);            echo '<input type="hidden" name="sql_query" value="'                . htmlspecialchars($sql_query) . '" />';            echo '</form>';        }        // in the tools div, only display the Inline link when not in ajax        // mode because 1) it currently does not work and 2) we would        // have two similar mechanisms on the page for the same goal        if ($is_select            || $GLOBALS['is_ajax_request'] === false            && ! $query_too_big        ) {            // see in js/functions.js the jQuery code attached to id inline_edit            // document.write conflicts with jQuery, hence used $().append()            echo "<script type=\"text/javascript\">\n" .                "//<![CDATA[\n" .                "$('.tools form').last().after('[<a href=\"#\" title=\"" .                PMA_escapeJsString(__('Inline edit of this query')) .                "\" class=\"inline_edit_sql\">" .                PMA_escapeJsString(_pgettext('Inline edit query', 'Inline')) .                "</a>]');\n" .                "//]]>\n" .                "</script>";        }        echo $edit_link . $explain_link . $php_link . $refresh_link . $validate_link;        echo '</div>';    }    echo '</div>';    if ($GLOBALS['is_ajax_request'] === false) {        echo '<br class="clearfloat" />';    }    // If we are in an Ajax request, we have most probably been called in    // PMA_ajaxResponse().  Hence, collect the buffer contents and return it    // to PMA_ajaxResponse(), which will encode it for JSON.    if ($GLOBALS['is_ajax_request'] == true        && ! isset($GLOBALS['buffer_message'])    ) {        $buffer_contents =  ob_get_contents();        ob_end_clean();        return $buffer_contents;    }    return null;} // end of the 'PMA_showMessage()' function/** * Verifies if current MySQL server supports profiling * * @access  public * * @return  boolean whether profiling is supported */function PMA_profilingSupported(){    if (! PMA_cacheExists('profiling_supported', true)) {        // 5.0.37 has profiling but for example, 5.1.20 does not        // (avoid a trip to the server for MySQL before 5.0.37)        // and do not set a constant as we might be switching servers        if (defined('PMA_MYSQL_INT_VERSION')            && PMA_MYSQL_INT_VERSION >= 50037            && PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'profiling'")        ) {            PMA_cacheSet('profiling_supported', true, true);        } else {            PMA_cacheSet('profiling_supported', false, true);        }    }    return PMA_cacheGet('profiling_supported', true);}/** * Displays a form with the Profiling checkbox * * @param string $sql_query sql query * * @access  public */function PMA_profilingCheckbox($sql_query){    if (PMA_profilingSupported()) {        echo '<form action="sql.php" method="post">' . "\n";        echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']);        echo '<input type="hidden" name="sql_query" value="' . htmlspecialchars($sql_query) . '" />' . "\n";        echo '<input type="hidden" name="profiling_form" value="1" />' . "\n";        PMA_display_html_checkbox('profiling', __('Profiling'), isset($_SESSION['profiling']), true);        echo '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>' . "\n";        echo '</form>' . "\n";    }}/** * Formats $value to byte view * * @param double $value the value to format * @param int    $limes the sensitiveness * @param int    $comma the number of decimals to retain * * @return   array    the formatted value and its unit * * @access  public */function PMA_formatByteDown($value, $limes = 6, $comma = 0){    if ($value === null) {        return null;    }    $byteUnits = array(        /* l10n: shortcuts for Byte */        __('B'),        /* l10n: shortcuts for Kilobyte */        __('KiB'),        /* l10n: shortcuts for Megabyte */        __('MiB'),        /* l10n: shortcuts for Gigabyte */        __('GiB'),        /* l10n: shortcuts for Terabyte */        __('TiB'),        /* l10n: shortcuts for Petabyte */        __('PiB'),        /* l10n: shortcuts for Exabyte */        __('EiB')        );    $dh   = PMA_pow(10, $comma);    $li   = PMA_pow(10, $limes);    $unit = $byteUnits[0];    for ($d = 6, $ex = 15; $d >= 1; $d--, $ex-=3) {        if (isset($byteUnits[$d]) && $value >= $li * PMA_pow(10, $ex)) {            // use 1024.0 to avoid integer overflow on 64-bit machines            $value = round($value / (PMA_pow(1024, $d) / $dh)) /$dh;            $unit = $byteUnits[$d];            break 1;        } // end if    } // end for    if ($unit != $byteUnits[0]) {        // if the unit is not bytes (as represented in current language)        // reformat with max length of 5        // 4th parameter=true means do not reformat if value < 1        $return_value = PMA_formatNumber($value, 5, $comma, true);    } else {        // do not reformat, just handle the locale        $return_value = PMA_formatNumber($value, 0);    }    return array(trim($return_value), $unit);} // end of the 'PMA_formatByteDown' function/** * Changes thousands and decimal separators to locale specific values. * * @param string $value the value * * @return string */function PMA_localizeNumber($value){    return str_replace(        array(',', '.'),        array(            /* l10n: Thousands separator */            __(','),            /* l10n: Decimal separator */            __('.'),            ),        $value    );}/** * Formats $value to the given length and appends SI prefixes * with a $length of 0 no truncation occurs, number is only formated * to the current locale * * examples: * <code> * echo PMA_formatNumber(123456789, 6);     // 123,457 k * echo PMA_formatNumber(-123456789, 4, 2); //    -123.46 M * echo PMA_formatNumber(-0.003, 6);        //      -3 m * echo PMA_formatNumber(0.003, 3, 3);      //       0.003 * echo PMA_formatNumber(0.00003, 3, 2);    //       0.03 m * echo PMA_formatNumber(0, 6);             //       0 * </code> * * @param double  $value          the value to format * @param integer $digits_left    number of digits left of the comma * @param integer $digits_right   number of digits right of the comma * @param boolean $only_down      do not reformat numbers below 1 * @param boolean $noTrailingZero removes trailing zeros right of the comma *                                (default: true) * * @return  string   the formatted value and its unit * * @access  public */function PMA_formatNumber($value, $digits_left = 3, $digits_right = 0,$only_down = false, $noTrailingZero = true){    if ($value==0) {        return '0';    }    $originalValue = $value;    //number_format is not multibyte safe, str_replace is safe    if ($digits_left === 0) {        $value = number_format($value, $digits_right);        if ($originalValue != 0 && floatval($value) == 0) {            $value = ' <' . (1 / PMA_pow(10, $digits_right));        }        return PMA_localizeNumber($value);    }    // this units needs no translation, ISO    $units = array(        -8 => 'y',        -7 => 'z',        -6 => 'a',        -5 => 'f',        -4 => 'p',        -3 => 'n',        -2 => '&micro;',        -1 => 'm',        0 => ' ',        1 => 'k',        2 => 'M',        3 => 'G',        4 => 'T',        5 => 'P',        6 => 'E',        7 => 'Z',        8 => 'Y'    );    // check for negative value to retain sign    if ($value < 0) {        $sign = '-';        $value = abs($value);    } else {        $sign = '';    }    $dh = PMA_pow(10, $digits_right);    /*     * This gives us the right SI prefix already,     * but $digits_left parameter not incorporated     */    $d = floor(log10($value) / 3);    /*     * Lowering the SI prefix by 1 gives us an additional 3 zeros     * So if we have 3,6,9,12.. free digits ($digits_left - $cur_digits)     * to use, then lower the SI prefix     */    $cur_digits = floor(log10($value / PMA_pow(1000, $d, 'pow'))+1);    if ($digits_left > $cur_digits) {        $d-= floor(($digits_left - $cur_digits)/3);    }    if ($d<0 && $only_down) {        $d=0;    }    $value = round($value / (PMA_pow(1000, $d, 'pow') / $dh)) /$dh;    $unit = $units[$d];    // If we dont want any zeros after the comma just add the thousand seperator    if ($noTrailingZero) {        $value = PMA_localizeNumber(            preg_replace('/(?<=\d)(?=(\d{3})+(?!\d))/', ',', $value)        );    } else {        //number_format is not multibyte safe, str_replace is safe        $value = PMA_localizeNumber(number_format($value, $digits_right));    }    if ($originalValue!=0 && floatval($value) == 0) {        return ' <' . (1 / PMA_pow(10, $digits_right)) . ' ' . $unit;    }    return $sign . $value . ' ' . $unit;} // end of the 'PMA_formatNumber' function/** * Returns the number of bytes when a formatted size is given * * @param string $formatted_size the size expression (for example 8MB) * * @return  integer  The numerical part of the expression (for example 8) */function PMA_extractValueFromFormattedSize($formatted_size){    $return_value = -1;    if (preg_match('/^[0-9]+GB$/', $formatted_size)) {        $return_value = substr($formatted_size, 0, -2) * PMA_pow(1024, 3);    } elseif (preg_match('/^[0-9]+MB$/', $formatted_size)) {        $return_value = substr($formatted_size, 0, -2) * PMA_pow(1024, 2);    } elseif (preg_match('/^[0-9]+K$/', $formatted_size)) {        $return_value = substr($formatted_size, 0, -1) * PMA_pow(1024, 1);    }    return $return_value;}// end of the 'PMA_extractValueFromFormattedSize' function/** * Writes localised date * * @param string $timestamp the current timestamp * @param string $format    format * * @return  string   the formatted date * * @access  public */function PMA_localisedDate($timestamp = -1, $format = ''){    $month = array(        /* l10n: Short month name */        __('Jan'),        /* l10n: Short month name */        __('Feb'),        /* l10n: Short month name */        __('Mar'),        /* l10n: Short month name */        __('Apr'),        /* l10n: Short month name */        _pgettext('Short month name', 'May'),        /* l10n: Short month name */        __('Jun'),        /* l10n: Short month name */        __('Jul'),        /* l10n: Short month name */        __('Aug'),        /* l10n: Short month name */        __('Sep'),        /* l10n: Short month name */        __('Oct'),        /* l10n: Short month name */        __('Nov'),        /* l10n: Short month name */        __('Dec'));    $day_of_week = array(        /* l10n: Short week day name */        _pgettext('Short week day name', 'Sun'),        /* l10n: Short week day name */        __('Mon'),        /* l10n: Short week day name */        __('Tue'),        /* l10n: Short week day name */        __('Wed'),        /* l10n: Short week day name */        __('Thu'),        /* l10n: Short week day name */        __('Fri'),        /* l10n: Short week day name */        __('Sat'));    if ($format == '') {        /* l10n: See http://www.php.net/manual/en/function.strftime.php */        $format = __('%B %d, %Y at %I:%M %p');    }    if ($timestamp == -1) {        $timestamp = time();    }    $date = preg_replace(        '@%[aA]@',        $day_of_week[(int)strftime('%w', $timestamp)],        $format    );    $date = preg_replace(        '@%[bB]@',        $month[(int)strftime('%m', $timestamp)-1],        $date    );    return strftime($date, $timestamp);} // end of the 'PMA_localisedDate()' function/** * returns a tab for tabbed navigation. * If the variables $link and $args ar left empty, an inactive tab is created * * @param array $tab        array with all options * @param array $url_params * * @return  string  html code for one tab, a link if valid otherwise a span * * @access  public */function PMA_generate_html_tab($tab, $url_params = array(), $base_dir=''){    // default values    $defaults = array(        'text'      => '',        'class'     => '',        'active'    => null,        'link'      => '',        'sep'       => '?',        'attr'      => '',        'args'      => '',        'warning'   => '',        'fragment'  => '',        'id'        => '',    );    $tab = array_merge($defaults, $tab);    // determine additionnal style-class    if (empty($tab['class'])) {        if (! empty($tab['active'])            || PMA_isValid($GLOBALS['active_page'], 'identical', $tab['link'])        ) {            $tab['class'] = 'active';        } elseif (is_null($tab['active']) && empty($GLOBALS['active_page'])          && basename($GLOBALS['PMA_PHP_SELF']) == $tab['link']          && empty($tab['warning'])) {            $tab['class'] = 'active';        }    }    if (!empty($tab['warning'])) {        $tab['class'] .= ' error';        $tab['attr'] .= ' title="' . htmlspecialchars($tab['warning']) . '"';    }    // If there are any tab specific URL parameters, merge those with    // the general URL parameters    if (! empty($tab['url_params']) && is_array($tab['url_params'])) {        $url_params = array_merge($url_params, $tab['url_params']);    }    // build the link    if (!empty($tab['link'])) {        $tab['link'] = htmlentities($tab['link']);        $tab['link'] = $tab['link'] . PMA_generate_common_url($url_params);        if (! empty($tab['args'])) {            foreach ($tab['args'] as $param => $value) {                $tab['link'] .= PMA_get_arg_separator('html') . urlencode($param)                    . '=' . urlencode($value);            }        }    }    if (! empty($tab['fragment'])) {        $tab['link'] .= $tab['fragment'];    }    // display icon, even if iconic is disabled but the link-text is missing    if (($GLOBALS['cfg']['MainPageIconic'] || empty($tab['text']))        && isset($tab['icon'])    ) {        // avoid generating an alt tag, because it only illustrates        // the text that follows and if browser does not display        // images, the text is duplicated        $tab['text'] = PMA_getImage(htmlentities($tab['icon'])) . $tab['text'];    } elseif (empty($tab['text'])) {        // check to not display an empty link-text        $tab['text'] = '?';        trigger_error(            'empty linktext in function ' . __FUNCTION__ . '()',            E_USER_NOTICE        );    }    //Set the id for the tab, if set in the params    $id_string = ( empty($tab['id']) ? '' : ' id="'.$tab['id'].'" ' );    $out = '<li' . ($tab['class'] == 'active' ? ' class="active"' : '') . '>';    if (!empty($tab['link'])) {        $out .= '<a class="tab' . htmlentities($tab['class']) . '"'            .$id_string            .' href="' . $tab['link'] . '" ' . $tab['attr'] . '>'            . $tab['text'] . '</a>';    } else {        $out .= '<span class="tab' . htmlentities($tab['class']) . '"'.$id_string.'>'            . $tab['text'] . '</span>';    }    $out .= '</li>';    return $out;} // end of the 'PMA_generate_html_tab()' function/** * returns html-code for a tab navigation * * @param array  $tabs       one element per tab * @param string $url_params * @param string $base_dir * @param string $menu_id * * @return  string  html-code for tab-navigation */function PMA_generate_html_tabs($tabs, $url_params, $base_dir='', $menu_id='topmenu'){    $tab_navigation = '<div id="' . htmlentities($menu_id) . 'container" class="menucontainer">'        .'<ul id="' . htmlentities($menu_id) . '">';    foreach ($tabs as $tab) {        $tab_navigation .= PMA_generate_html_tab($tab, $url_params, $base_dir);    }    $tab_navigation .=         '</ul>' . "\n"        .'<div class="clearfloat"></div>'        .'</div>' . "\n";    return $tab_navigation;}/** * Displays a link, or a button if the link's URL is too large, to * accommodate some browsers' limitations * * @param string  $url        the URL * @param string  $message    the link message * @param mixed   $tag_params string: js confirmation *                            array: additional tag params (f.e. style="") * @param boolean $new_form   we set this to false when we are already in *                            a  form, to avoid generating nested forms * @param boolean $strip_img  whether to strip the image * @param string  $target     target * * @return string  the results to be echoed or saved in an array */function PMA_linkOrButton($url, $message, $tag_params = array(),    $new_form = true, $strip_img = false, $target = ''){    $url_length = strlen($url);    // with this we should be able to catch case of image upload    // into a (MEDIUM) BLOB; not worth generating even a form for these    if ($url_length > $GLOBALS['cfg']['LinkLengthLimit'] * 100) {        return '';    }    if (! is_array($tag_params)) {        $tmp = $tag_params;        $tag_params = array();        if (!empty($tmp)) {            $tag_params['onclick'] = 'return confirmLink(this, \'' . PMA_escapeJsString($tmp) . '\')';        }        unset($tmp);    }    if (! empty($target)) {        $tag_params['target'] = htmlentities($target);    }    $tag_params_strings = array();    foreach ($tag_params as $par_name => $par_value) {        // htmlspecialchars() only on non javascript        $par_value = substr($par_name, 0, 2) == 'on'            ? $par_value            : htmlspecialchars($par_value);        $tag_params_strings[] = $par_name . '="' . $par_value . '"';    }    $displayed_message = '';    // Add text if not already added    if (stristr($message, '<img')        && (!$strip_img || $GLOBALS['cfg']['PropertiesIconic'] === true)        && strip_tags($message)==$message    ) {        $displayed_message = '<span>'        . htmlspecialchars(            preg_replace('/^.*\salt="([^"]*)".*$/si', '\1', $message)        )        . '</span>';    }    // Suhosin: Check that each query parameter is not above maximum    $in_suhosin_limits = true;    if ($url_length <= $GLOBALS['cfg']['LinkLengthLimit']) {        if ($suhosin_get_MaxValueLength = ini_get('suhosin.get.max_value_length')) {            $query_parts = PMA_splitURLQuery($url);            foreach ($query_parts as $query_pair) {                list($eachvar, $eachval) = explode('=', $query_pair);                if (strlen($eachval) > $suhosin_get_MaxValueLength) {                    $in_suhosin_limits = false;                    break;                }            }        }    }    if ($url_length <= $GLOBALS['cfg']['LinkLengthLimit'] && $in_suhosin_limits) {        // no whitespace within an <a> else Safari will make it part of the link        $ret = "\n" . '<a href="' . $url . '" '            . implode(' ', $tag_params_strings) . '>'            . $message . $displayed_message . '</a>' . "\n";    } else {        // no spaces (linebreaks) at all        // or after the hidden fields        // IE will display them all        // add class=link to submit button        if (empty($tag_params['class'])) {            $tag_params['class'] = 'link';        }        if (! isset($query_parts)) {            $query_parts = PMA_splitURLQuery($url);        }        $url_parts   = parse_url($url);        if ($new_form) {            $ret = '<form action="' . $url_parts['path'] . '" class="link"'                 . ' method="post"' . $target . ' style="display: inline;">';            $subname_open   = '';            $subname_close  = '';            $submit_link    = '#';        } else {            $query_parts[] = 'redirect=' . $url_parts['path'];            if (empty($GLOBALS['subform_counter'])) {                $GLOBALS['subform_counter'] = 0;            }            $GLOBALS['subform_counter']++;            $ret            = '';            $subname_open   = 'subform[' . $GLOBALS['subform_counter'] . '][';            $subname_close  = ']';            $submit_link    = '#usesubform[' . $GLOBALS['subform_counter'] . ']=1';        }        foreach ($query_parts as $query_pair) {            list($eachvar, $eachval) = explode('=', $query_pair);            $ret .= '<input type="hidden" name="' . $subname_open . $eachvar                . $subname_close . '" value="'                . htmlspecialchars(urldecode($eachval)) . '" />';        } // end while        $ret .= "\n" . '<a href="' . $submit_link . '" class="formLinkSubmit" '        . implode(' ', $tag_params_strings) . '>'        . $message . ' ' . $displayed_message . '</a>' . "\n";        if ($new_form) {            $ret .= '</form>';        }    } // end if... else...    return $ret;} // end of the 'PMA_linkOrButton()' function/** * Splits a URL string by parameter * * @param string $url the URL * * @return array  the parameter/value pairs, for example [0] db=sakila */function PMA_splitURLQuery($url){    // decode encoded url separators    $separator   = PMA_get_arg_separator();    // on most places separator is still hard coded ...    if ($separator !== '&') {        // ... so always replace & with $separator        $url         = str_replace(htmlentities('&'), $separator, $url);        $url         = str_replace('&', $separator, $url);    }    $url         = str_replace(htmlentities($separator), $separator, $url);    // end decode    $url_parts   = parse_url($url);    return explode($separator, $url_parts['query']);}/** * Returns a given timespan value in a readable format. * * @param int $seconds the timespan * * @return string  the formatted value */function PMA_timespanFormat($seconds){    $days = floor($seconds / 86400);    if ($days > 0) {        $seconds -= $days * 86400;    }    $hours = floor($seconds / 3600);    if ($days > 0 || $hours > 0) {        $seconds -= $hours * 3600;    }    $minutes = floor($seconds / 60);    if ($days > 0 || $hours > 0 || $minutes > 0) {        $seconds -= $minutes * 60;    }    return sprintf(        __('%s days, %s hours, %s minutes and %s seconds'),        (string)$days, (string)$hours, (string)$minutes, (string)$seconds    );}/** * Takes a string and outputs each character on a line for itself. Used * mainly for horizontalflipped display mode. * Takes care of special html-characters. * Fulfills todo-item * http://sf.net/tracker/?func=detail&aid=544361&group_id=23067&atid=377411 * * @param string $string    The string * @param string $Separator The Separator (defaults to "<br />\n") * * @access  public * @todo    add a multibyte safe function PMA_STR_split() * * @return  string      The flipped string */function PMA_flipstring($string, $Separator = "<br />\n"){    $format_string = '';    $charbuff = false;    for ($i = 0, $str_len = strlen($string); $i < $str_len; $i++) {        $char = $string{$i};        $append = false;        if ($char == '&') {            $format_string .= $charbuff;            $charbuff = $char;        } elseif ($char == ';' && !empty($charbuff)) {            $format_string .= $charbuff . $char;            $charbuff = false;            $append = true;        } elseif (! empty($charbuff)) {            $charbuff .= $char;        } else {            $format_string .= $char;            $append = true;        }        // do not add separator after the last character        if ($append && ($i != $str_len - 1)) {            $format_string .= $Separator;        }    }    return $format_string;}/** * Function added to avoid path disclosures. * Called by each script that needs parameters, it displays * an error message and, by default, stops the execution. * * Not sure we could use a strMissingParameter message here, * would have to check if the error message file is always available * * @param array $params  The names of the parameters needed by the calling script. * @param bool  $die     Stop the execution? *                       (Set this manually to false in the calling script *                       until you know all needed parameters to check). * @param bool  $request Whether to include this list in checking for special params. * * @global  string  path to current script * @global  boolean flag whether any special variable was required * * @access  public * @todo    use PMA_fatalError() if $die === true? */function PMA_checkParameters($params, $die = true, $request = true){    global $checked_special;    if (! isset($checked_special)) {        $checked_special = false;    }    $reported_script_name = basename($GLOBALS['PMA_PHP_SELF']);    $found_error = false;    $error_message = '';    foreach ($params as $param) {        if ($request && $param != 'db' && $param != 'table') {            $checked_special = true;        }        if (! isset($GLOBALS[$param])) {            $error_message .= $reported_script_name                . ': ' . __('Missing parameter:') . ' '                . $param                . PMA_showDocu('faqmissingparameters')                . '<br />';            $found_error = true;        }    }    if ($found_error) {        /**         * display html meta tags         */        include_once './libraries/header_meta_style.inc.php';        echo '</head><body><p>' . $error_message . '</p></body></html>';        if ($die) {            exit();        }    }} // end function/** * Function to generate unique condition for specified row. * * @param resource $handle       current query result * @param integer  $fields_cnt   number of fields * @param array    $fields_meta  meta information about fields * @param array    $row          current row * @param boolean  $force_unique generate condition only on pk or unique * * @access  public * * @return  array     the calculated condition and whether condition is unique */function PMA_getUniqueCondition($handle, $fields_cnt, $fields_meta, $row, $force_unique = false){    $primary_key          = '';    $unique_key           = '';    $nonprimary_condition = '';    $preferred_condition = '';    $primary_key_array    = array();    $unique_key_array     = array();    $nonprimary_condition_array = array();    $condition_array = array();    for ($i = 0; $i < $fields_cnt; ++$i) {        $condition   = '';        $con_key     = '';        $con_val     = '';        $field_flags = PMA_DBI_field_flags($handle, $i);        $meta        = $fields_meta[$i];        // do not use a column alias in a condition        if (! isset($meta->orgname) || ! strlen($meta->orgname)) {            $meta->orgname = $meta->name;            if (isset($GLOBALS['analyzed_sql'][0]['select_expr'])                && is_array($GLOBALS['analyzed_sql'][0]['select_expr'])            ) {                foreach ($GLOBALS['analyzed_sql'][0]['select_expr'] as $select_expr) {                    // need (string) === (string)                    // '' !== 0 but '' == 0                    if ((string) $select_expr['alias'] === (string) $meta->name) {                        $meta->orgname = $select_expr['column'];                        break;                    } // end if                } // end foreach            }        }        // Do not use a table alias in a condition.        // Test case is:        // select * from galerie x WHERE        //(select count(*) from galerie y where y.datum=x.datum)>1        //        // But orgtable is present only with mysqli extension so the        // fix is only for mysqli.        // Also, do not use the original table name if we are dealing with        // a view because this view might be updatable.        // (The isView() verification should not be costly in most cases        // because there is some caching in the function).        if (isset($meta->orgtable)            && $meta->table != $meta->orgtable            && ! PMA_Table::isView($GLOBALS['db'], $meta->table)        ) {            $meta->table = $meta->orgtable;        }        // to fix the bug where float fields (primary or not)        // can't be matched because of the imprecision of        // floating comparison, use CONCAT        // (also, the syntax "CONCAT(field) IS NULL"        // that we need on the next "if" will work)        if ($meta->type == 'real') {            $con_key = 'CONCAT(' . PMA_backquote($meta->table) . '.'                . PMA_backquote($meta->orgname) . ')';        } else {            $con_key = PMA_backquote($meta->table) . '.'                . PMA_backquote($meta->orgname);        } // end if... else...        $condition = ' ' . $con_key . ' ';        if (! isset($row[$i]) || is_null($row[$i])) {            $con_val = 'IS NULL';        } else {            // timestamp is numeric on some MySQL 4.1            // for real we use CONCAT above and it should compare to string            if ($meta->numeric                && $meta->type != 'timestamp'                && $meta->type != 'real'            ) {                $con_val = '= ' . $row[$i];            } elseif (($meta->type == 'blob' || $meta->type == 'string')                // hexify only if this is a true not empty BLOB or a BINARY                    && stristr($field_flags, 'BINARY')                    && !empty($row[$i])) {                // do not waste memory building a too big condition                if (strlen($row[$i]) < 1000) {                    // use a CAST if possible, to avoid problems                    // if the field contains wildcard characters % or _                    $con_val = '= CAST(0x' . bin2hex($row[$i]) . ' AS BINARY)';                } else {                    // this blob won't be part of the final condition                    $con_val = null;                }            } elseif (in_array($meta->type, PMA_getGISDatatypes())                && ! empty($row[$i])            ) {                // do not build a too big condition                if (strlen($row[$i]) < 5000) {                    $condition .= '=0x' . bin2hex($row[$i]) . ' AND';                } else {                    $condition = '';                }            } elseif ($meta->type == 'bit') {                $con_val = "= b'" . PMA_printable_bit_value($row[$i], $meta->length) . "'";            } else {                $con_val = '= \'' . PMA_sqlAddSlashes($row[$i], false, true) . '\'';            }        }        if ($con_val != null) {            $condition .= $con_val . ' AND';            if ($meta->primary_key > 0) {                $primary_key .= $condition;                $primary_key_array[$con_key] = $con_val;            } elseif ($meta->unique_key > 0) {                $unique_key  .= $condition;                $unique_key_array[$con_key] = $con_val;            }            $nonprimary_condition .= $condition;            $nonprimary_condition_array[$con_key] = $con_val;        }    } // end for    // Correction University of Virginia 19991216:    // prefer primary or unique keys for condition,    // but use conjunction of all values if no primary key    $clause_is_unique = true;    if ($primary_key) {        $preferred_condition = $primary_key;        $condition_array = $primary_key_array;    } elseif ($unique_key) {        $preferred_condition = $unique_key;        $condition_array = $unique_key_array;    } elseif (! $force_unique) {        $preferred_condition = $nonprimary_condition;        $condition_array = $nonprimary_condition_array;        $clause_is_unique = false;    }    $where_clause = trim(preg_replace('|\s?AND$|', '', $preferred_condition));    return(array($where_clause, $clause_is_unique, $condition_array));} // end function/** * Generate a button or image tag * * @param string $button_name  name of button element * @param string $button_class class of button element * @param string $image_name   name of image element * @param string $text         text to display * @param string $image        image to display * @param string $value        value * * @access  public */function PMA_buttonOrImage($button_name, $button_class, $image_name, $text,    $image, $value = ''){    if ($value == '') {        $value = $text;    }    if (false === $GLOBALS['cfg']['PropertiesIconic']) {        echo ' <input type="submit" name="' . $button_name . '"'                .' value="' . htmlspecialchars($value) . '"'                .' title="' . htmlspecialchars($text) . '" />' . "\n";        return;    }    /* Opera has trouble with <input type="image"> */    /* IE has trouble with <button> */    if (PMA_USR_BROWSER_AGENT != 'IE') {        echo '<button class="' . $button_class . '" type="submit"'            .' name="' . $button_name . '" value="' . htmlspecialchars($value) . '"'            .' title="' . htmlspecialchars($text) . '">' . "\n"            . PMA_getIcon($image, $text)            .'</button>' . "\n";    } else {        echo '<input type="image" name="' . $image_name            . '" value="' . htmlspecialchars($value)            . '" title="' . htmlspecialchars($text)            . '" src="' . $GLOBALS['pmaThemeImage']. $image . '" />'            . ($GLOBALS['cfg']['PropertiesIconic'] === 'both'                ? '&nbsp;' . htmlspecialchars($text)                : '') . "\n";    }} // end function/** * Generate a pagination selector for browsing resultsets * * @param int    $rows        Number of rows in the pagination set * @param int    $pageNow     current page number * @param int    $nbTotalPage number of total pages * @param int    $showAll     If the number of pages is lower than this *                            variable, no pages will be omitted in pagination * @param int    $sliceStart  How many rows at the beginning should always be shown? * @param int    $sliceEnd    How many rows at the end should always be shown? * @param int    $percent     Percentage of calculation page offsets to hop to a *                            next page * @param int    $range       Near the current page, how many pages should *                            be considered "nearby" and displayed as well? * @param string $prompt      The prompt to display (sometimes empty) * * @return string * * @access  public */function PMA_pageselector($rows, $pageNow = 1, $nbTotalPage = 1,    $showAll = 200, $sliceStart = 5, $sliceEnd = 5, $percent = 20,    $range = 10, $prompt = ''){    $increment = floor($nbTotalPage / $percent);    $pageNowMinusRange = ($pageNow - $range);    $pageNowPlusRange = ($pageNow + $range);    $gotopage = $prompt . ' <select id="pageselector" ';    if ($GLOBALS['cfg']['AjaxEnable']) {        $gotopage .= ' class="ajax"';    }    $gotopage .= ' name="pos" >' . "\n";    if ($nbTotalPage < $showAll) {        $pages = range(1, $nbTotalPage);    } else {        $pages = array();        // Always show first X pages        for ($i = 1; $i <= $sliceStart; $i++) {            $pages[] = $i;        }        // Always show last X pages        for ($i = $nbTotalPage - $sliceEnd; $i <= $nbTotalPage; $i++) {            $pages[] = $i;        }        // Based on the number of results we add the specified        // $percent percentage to each page number,        // so that we have a representing page number every now and then to        // immediately jump to specific pages.        // As soon as we get near our currently chosen page ($pageNow -        // $range), every page number will be shown.        $i = $sliceStart;        $x = $nbTotalPage - $sliceEnd;        $met_boundary = false;        while ($i <= $x) {            if ($i >= $pageNowMinusRange && $i <= $pageNowPlusRange) {                // If our pageselector comes near the current page, we use 1                // counter increments                $i++;                $met_boundary = true;            } else {                // We add the percentage increment to our current page to                // hop to the next one in range                $i += $increment;                // Make sure that we do not cross our boundaries.                if ($i > $pageNowMinusRange && ! $met_boundary) {                    $i = $pageNowMinusRange;                }            }            if ($i > 0 && $i <= $x) {                $pages[] = $i;            }        }/*    Add page numbers with "geometrically increasing" distances.    This helps me a lot when navigating through giant tables.    Test case: table with 2.28 million sets, 76190 pages. Page of interest is    between 72376 and 76190.    Selecting page 72376.    Now, old version enumerated only +/- 10 pages around 72376 and the    percentage increment produced steps of about 3000.    The following code adds page numbers +/- 2,4,8,16,32,64,128,256 etc.    around the current page.*/        $i = $pageNow;        $dist = 1;        while ($i < $x) {            $dist = 2 * $dist;            $i = $pageNow + $dist;            if ($i > 0 && $i <= $x) {                $pages[] = $i;            }        }        $i = $pageNow;        $dist = 1;        while ($i >0) {            $dist = 2 * $dist;            $i = $pageNow - $dist;            if ($i > 0 && $i <= $x) {                $pages[] = $i;            }        }        // Since because of ellipsing of the current page some numbers may be double,        // we unify our array:        sort($pages);        $pages = array_unique($pages);    }    foreach ($pages as $i) {        if ($i == $pageNow) {            $selected = 'selected="selected" style="font-weight: bold"';        } else {            $selected = '';        }        $gotopage .= '                <option ' . $selected            . ' value="' . (($i - 1) * $rows) . '">' . $i . '</option>' . "\n";    }    $gotopage .= ' </select><noscript><input type="submit" value="'        . __('Go') . '" /></noscript>';    return $gotopage;} // end function/** * Generate navigation for a list * * @param int    $count       number of elements in the list * @param int    $pos         current position in the list * @param array  $_url_params url parameters * @param string $script      script name for form target * @param string $frame       target frame * @param int    $max_count   maximum number of elements to display from the list * * @access  public * * @todo    use $pos from $_url_params */function PMA_listNavigator($count, $pos, $_url_params, $script, $frame, $max_count){    if ($max_count < $count) {        echo 'frame_navigation' == $frame            ? '<div id="navidbpageselector">' . "\n"            : '';        echo __('Page number:');        echo 'frame_navigation' == $frame ? '<br />' : ' ';        // Move to the beginning or to the previous page        if ($pos > 0) {            // patch #474210 - part 1            if ($GLOBALS['cfg']['NavigationBarIconic']) {                $caption1 = '&lt;&lt;';                $caption2 = ' &lt; ';                $title1   = ' title="' . _pgettext('First page', 'Begin') . '"';                $title2   = ' title="' . _pgettext('Previous page', 'Previous') . '"';            } else {                $caption1 = _pgettext('First page', 'Begin') . ' &lt;&lt;';                $caption2 = _pgettext('Previous page', 'Previous') . ' &lt;';                $title1   = '';                $title2   = '';            } // end if... else...            $_url_params['pos'] = 0;            echo '<a' . $title1 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption1 . '</a>';            $_url_params['pos'] = $pos - $max_count;            echo '<a' . $title2 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption2 . '</a>';        }        echo "\n", '<form action="./', basename($script), '" method="post" target="', $frame, '">', "\n";        echo PMA_generate_common_hidden_inputs($_url_params);        echo PMA_pageselector(            $max_count,            floor(($pos + 1) / $max_count) + 1,            ceil($count / $max_count)        );        echo '</form>';        if ($pos + $max_count < $count) {            if ($GLOBALS['cfg']['NavigationBarIconic']) {                $caption3 = ' &gt; ';                $caption4 = '&gt;&gt;';                $title3   = ' title="' . _pgettext('Next page', 'Next') . '"';                $title4   = ' title="' . _pgettext('Last page', 'End') . '"';            } else {                $caption3 = '&gt; ' . _pgettext('Next page', 'Next');                $caption4 = '&gt;&gt; ' . _pgettext('Last page', 'End');                $title3   = '';                $title4   = '';            } // end if... else...            $_url_params['pos'] = $pos + $max_count;            echo '<a' . $title3 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption3 . '</a>';            $_url_params['pos'] = floor($count / $max_count) * $max_count;            if ($_url_params['pos'] == $count) {                $_url_params['pos'] = $count - $max_count;            }            echo '<a' . $title4 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption4 . '</a>';        }        echo "\n";        if ('frame_navigation' == $frame) {            echo '</div>' . "\n";        }    }}/** * replaces %u in given path with current user name * * example: * <code> * $user_dir = PMA_userDir('/var/pma_tmp/%u/'); // '/var/pma_tmp/root/' * * </code> * * @param string $dir with wildcard for user * * @return  string  per user directory */function PMA_userDir($dir){    // add trailing slash    if (substr($dir, -1) != '/') {        $dir .= '/';    }    return str_replace('%u', $GLOBALS['cfg']['Server']['user'], $dir);}/** * returns html code for db link to default db page * * @param string $database database * * @return  string  html link to default db page */function PMA_getDbLink($database = null){    if (! strlen($database)) {        if (! strlen($GLOBALS['db'])) {            return '';        }        $database = $GLOBALS['db'];    } else {        $database = PMA_unescape_mysql_wildcards($database);    }    return '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase'] . '?'        . PMA_generate_common_url($database) . '" title="'        . sprintf(            __('Jump to database &quot;%s&quot;.'),            htmlspecialchars($database)        )        . '">' . htmlspecialchars($database) . '</a>';}/** * Displays a lightbulb hint explaining a known external bug * that affects a functionality * * @param string $functionality   localized message explaining the func. * @param string $component       'mysql' (eventually, 'php') * @param string $minimum_version of this component * @param string $bugref          bug reference for this component */function PMA_externalBug($functionality, $component, $minimum_version, $bugref){    if ($component == 'mysql' && PMA_MYSQL_INT_VERSION < $minimum_version) {        echo PMA_showHint(            sprintf(                __('The %s functionality is affected by a known bug, see %s'),                $functionality,                PMA_linkURL('http://bugs.mysql.com/') . $bugref            )        );    }}/** * Generates and echoes an HTML checkbox * * @param string  $html_field_name the checkbox HTML field * @param string  $label           label for checkbox * @param boolean $checked         is it initially checked? * @param boolean $onclick         should it submit the form on click? * * @return the HTML for the checkbox */function PMA_display_html_checkbox($html_field_name, $label, $checked, $onclick){    echo '<input type="checkbox" name="' . $html_field_name . '" id="'        . $html_field_name . '"' . ($checked ? ' checked="checked"' : '')        . ($onclick ? ' class="autosubmit"' : '') . ' /><label for="'        . $html_field_name . '">' . $label . '</label>';}/** * Generates and echoes a set of radio HTML fields * * @param string  $html_field_name the radio HTML field * @param array   $choices         the choices values and labels * @param string  $checked_choice  the choice to check by default * @param boolean $line_break      whether to add an HTML line break after a choice * @param boolean $escape_label    whether to use htmlspecialchars() on label * @param string  $class           enclose each choice with a div of this class * * @return the HTML for the tadio buttons */function PMA_display_html_radio($html_field_name, $choices, $checked_choice = '',$line_break = true, $escape_label = true, $class=''){    foreach ($choices as $choice_value => $choice_label) {        if (! empty($class)) {            echo '<div class="' . $class . '">';        }        $html_field_id = $html_field_name . '_' . $choice_value;        echo '<input type="radio" name="' . $html_field_name . '" id="'            . $html_field_id . '" value="' . htmlspecialchars($choice_value) . '"';        if ($choice_value == $checked_choice) {            echo ' checked="checked"';        }        echo ' />' . "\n";        echo '<label for="' . $html_field_id . '">'            . ($escape_label ? htmlspecialchars($choice_label)  : $choice_label)            . '</label>';        if ($line_break) {            echo '<br />';        }        if (! empty($class)) {            echo '</div>';        }        echo "\n";    }}/** * Generates and returns an HTML dropdown * * @param string $select_name   name for the select element * @param array  $choices       choices values * @param string $active_choice the choice to select by default * @param string $id            id of the select element; can be different in case *                              the dropdown is present more than once on the page * * @return string * * @todo    support titles */function PMA_generate_html_dropdown($select_name, $choices, $active_choice, $id){    $result = '<select name="' . htmlspecialchars($select_name) . '" id="'        . htmlspecialchars($id) . '">';    foreach ($choices as $one_choice_value => $one_choice_label) {        $result .= '<option value="' . htmlspecialchars($one_choice_value) . '"';        if ($one_choice_value == $active_choice) {            $result .= ' selected="selected"';        }        $result .= '>' . htmlspecialchars($one_choice_label) . '</option>';    }    $result .= '</select>';    return $result;}/** * Generates a slider effect (jQjuery) * Takes care of generating the initial <div> and the link * controlling the slider; you have to generate the </div> yourself * after the sliding section. * * @param string $id      the id of the <div> on which to apply the effect * @param string $message the message to show as a link */function PMA_generate_slider_effect($id, $message){    if ($GLOBALS['cfg']['InitialSlidersState'] == 'disabled') {        echo '<div id="' . $id . '">';        return;    }    /**     * Bad hack on the next line. document.write() conflicts with jQuery, hence,     * opening the <div> with PHP itself instead of JavaScript.     *     * @todo find a better solution that uses $.append(), the recommended method     * maybe by using an additional param, the id of the div to append to     */    ?><div id="<?php echo $id; ?>" <?php echo $GLOBALS['cfg']['InitialSlidersState'] == 'closed' ? ' style="display: none; overflow:auto;"' : ''; ?> class="pma_auto_slider" title="<?php echo htmlspecialchars($message); ?>">    <?php}/** * Creates an AJAX sliding toggle button * (or and equivalent form when AJAX is disabled) * * @param string $action      The URL for the request to be executed * @param string $select_name The name for the dropdown box * @param array  $options     An array of options (see rte_footer.lib.php) * @param string $callback    A JS snippet to execute when the request is *                            successfully processed * * @return   string   HTML code for the toggle button */function PMA_toggleButton($action, $select_name, $options, $callback){    // Do the logic first    $link_on = "$action&amp;$select_name=" . urlencode($options[1]['value']);    $link_off = "$action&amp;$select_name=" . urlencode($options[0]['value']);    if ($options[1]['selected'] == true) {        $state = 'on';    } else if ($options[0]['selected'] == true) {        $state = 'off';    } else {        $state = 'on';    }    $selected1 = '';    $selected0 = '';    if ($options[1]['selected'] == true) {        $selected1 = " selected='selected'";    } else if ($options[0]['selected'] == true) {        $selected0 = " selected='selected'";    }    // Generate output    $retval  = "<!-- TOGGLE START -->\n";    if ($GLOBALS['cfg']['AjaxEnable'] && is_readable($_SESSION['PMA_Theme']->getImgPath() . 'toggle-ltr.png')) {        $retval .= "<noscript>\n";    }    $retval .= "<div class='wrapper'>\n";    $retval .= "    <form action='$action' method='post'>\n";    $retval .= "        <select name='$select_name'>\n";    $retval .= "            <option value='{$options[1]['value']}'$selected1>";    $retval .= "                {$options[1]['label']}\n";    $retval .= "            </option>\n";    $retval .= "            <option value='{$options[0]['value']}'$selected0>";    $retval .= "                {$options[0]['label']}\n";    $retval .= "            </option>\n";    $retval .= "        </select>\n";    $retval .= "        <input type='submit' value='" . __('Change') . "'/>\n";    $retval .= "    </form>\n";    $retval .= "</div>\n";    if ($GLOBALS['cfg']['AjaxEnable'] && is_readable($_SESSION['PMA_Theme']->getImgPath() . 'toggle-ltr.png')) {        $retval .= "</noscript>\n";        $retval .= "<div class='wrapper toggleAjax hide'>\n";        $retval .= "    <div class='toggleButton'>\n";        $retval .= "        <div title='" . __('Click to toggle') . "' class='container $state'>\n";        $retval .= "            <img src='{$GLOBALS['pmaThemeImage']}toggle-{$GLOBALS['text_dir']}.png'\n";        $retval .= "                 alt='' />\n";        $retval .= "            <table cellspacing='0' cellpadding='0'><tr>\n";        $retval .= "                <tbody>\n";        $retval .= "                <td class='toggleOn'>\n";        $retval .= "                    <span class='hide'>$link_on</span>\n";        $retval .= "                    <div>";        $retval .= str_replace(' ', '&nbsp;', $options[1]['label']) . "</div>\n";        $retval .= "                </td>\n";        $retval .= "                <td><div>&nbsp;</div></td>\n";        $retval .= "                <td class='toggleOff'>\n";        $retval .= "                    <span class='hide'>$link_off</span>\n";        $retval .= "                    <div>";        $retval .= str_replace(' ', '&nbsp;', $options[0]['label']) . "</div>\n";        $retval .= "                    </div>\n";        $retval .= "                </tbody>\n";        $retval .= "            </tr></table>\n";        $retval .= "            <span class='hide callback'>$callback</span>\n";        $retval .= "            <span class='hide text_direction'>{$GLOBALS['text_dir']}</span>\n";        $retval .= "        </div>\n";        $retval .= "    </div>\n";        $retval .= "</div>\n";    }    $retval .= "<!-- TOGGLE END -->";    return $retval;} // end PMA_toggleButton()/** * Clears cache content which needs to be refreshed on user change. * * @return nothing */function PMA_clearUserCache(){    PMA_cacheUnset('is_superuser', true);}/** * Verifies if something is cached in the session * * @param string   $var    variable name * @param int|true $server server * * @return boolean */function PMA_cacheExists($var, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    return isset($_SESSION['cache']['server_' . $server][$var]);}/** * Gets cached information from the session * * @param string   $var    varibale name * @param int|true $server server * * @return mixed */function PMA_cacheGet($var, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    if (isset($_SESSION['cache']['server_' . $server][$var])) {        return $_SESSION['cache']['server_' . $server][$var];    } else {        return null;    }}/** * Caches information in the session * * @param string   $var    variable name * @param mixed    $val    value * @param int|true $server server * * @return mixed */function PMA_cacheSet($var, $val = null, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    $_SESSION['cache']['server_' . $server][$var] = $val;}/** * Removes cached information from the session * * @param string   $var    variable name * @param int|true $server server * * @return nothing */function PMA_cacheUnset($var, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    unset($_SESSION['cache']['server_' . $server][$var]);}/** * Converts a bit value to printable format; * in MySQL a BIT field can be from 1 to 64 bits so we need this * function because in PHP, decbin() supports only 32 bits * * @param numeric $value  coming from a BIT field * @param integer $length length * * @return  string  the printable value */function PMA_printable_bit_value($value, $length){    $printable = '';    for ($i = 0, $len_ceiled = ceil($length / 8); $i < $len_ceiled; $i++) {        $printable .= sprintf('%08d', decbin(ord(substr($value, $i, 1))));    }    $printable = substr($printable, -$length);    return $printable;}/** * Verifies whether the value contains a non-printable character * * @param string $value value * * @return  boolean */function PMA_contains_nonprintable_ascii($value){    return preg_match('@[^[:print:]]@', $value);}/** * Converts a BIT type default value * for example, b'010' becomes 010 * * @param string $bit_default_value value * * @return  string the converted value */function PMA_convert_bit_default_value($bit_default_value){    return strtr($bit_default_value, array("b" => "", "'" => ""));}/** * Extracts the various parts from a field type spec * * @param string $fieldspec Field specification * * @return  array associative array containing type, spec_in_brackets *          and possibly enum_set_values (another array) */function PMA_extractFieldSpec($fieldspec){    $first_bracket_pos = strpos($fieldspec, '(');    if ($first_bracket_pos) {        $spec_in_brackets = chop(            substr(                $fieldspec,                $first_bracket_pos + 1,                (strrpos($fieldspec, ')') - $first_bracket_pos - 1)            )        );        // convert to lowercase just to be sure        $type = strtolower(chop(substr($fieldspec, 0, $first_bracket_pos)));    } else {        $type = strtolower($fieldspec);        $spec_in_brackets = '';    }    if ('enum' == $type || 'set' == $type) {        // Define our working vars        $enum_set_values = array();        $working = "";        $in_string = false;        $index = 0;        // While there is another character to process        while (isset($fieldspec[$index])) {            // Grab the char to look at            $char = $fieldspec[$index];            // If it is a single quote, needs to be handled specially            if ($char == "'") {                // If we are not currently in a string, begin one                if (! $in_string) {                    $in_string = true;                    $working = "";                } else {                    // Otherwise, it may be either an end of a string,                    // or a 'double quote' which can be handled as-is                    // Check out the next character (if possible)                    $has_next = isset($fieldspec[$index + 1]);                    $next = $has_next ? $fieldspec[$index + 1] : null;                    //If we have reached the end of our 'working' string (because                    //there are no more chars,or the next char is not another quote)                    if (! $has_next || $next != "'") {                        $enum_set_values[] = $working;                        $in_string = false;                    } elseif ($next == "'") {                        // Otherwise, this is a 'double quote',                        // and can be added to the working string                        $working .= "'";                        // Skip the next char; we already know what it is                        $index++;                    }                }            } elseif ('\\' == $char                && isset($fieldspec[$index + 1])                && "'" == $fieldspec[$index + 1]            ) {                // escaping of a quote?                $working .= "'";                $index++;            } else {                // Otherwise, add it to our working string like normal                $working .= $char;            }            // Increment character index            $index++;        } // end while        $printtype = $type . '(' .  str_replace("','", "', '", $spec_in_brackets) . ')';        $binary = false;        $unsigned = false;        $zerofill = false;    } else {        $enum_set_values = array();        /* Create printable type name */        $printtype = strtolower($fieldspec);        // Strip the "BINARY" attribute, except if we find "BINARY(" because        // this would be a BINARY or VARBINARY field type;        // by the way, a BLOB should not show the BINARY attribute        // because this is not accepted in MySQL syntax.        if (preg_match('@binary@', $printtype) && ! preg_match('@binary[\(]@', $printtype)) {            $printtype = preg_replace('@binary@', '', $printtype);            $binary = true;        } else {            $binary = false;        }        $printtype = preg_replace('@zerofill@', '', $printtype, -1, $zerofill_cnt);        $zerofill = ($zerofill_cnt > 0);        $printtype = preg_replace('@unsigned@', '', $printtype, -1, $unsigned_cnt);        $unsigned = ($unsigned_cnt > 0);        $printtype = trim($printtype);    }    $attribute     = ' ';    if ($binary) {        $attribute = 'BINARY';    }    if ($unsigned) {        $attribute = 'UNSIGNED';    }    if ($zerofill) {        $attribute = 'UNSIGNED ZEROFILL';    }    return array(        'type' => $type,        'spec_in_brackets' => $spec_in_brackets,        'enum_set_values'  => $enum_set_values,        'print_type' => $printtype,        'binary' => $binary,        'unsigned' => $unsigned,        'zerofill' => $zerofill,        'attribute' => $attribute,    );}/** * Verifies if this table's engine supports foreign keys * * @param string $engine engine * * @return  boolean */function PMA_foreignkey_supported($engine){    $engine = strtoupper($engine);    if ('INNODB' == $engine || 'PBXT' == $engine) {        return true;    } else {        return false;    }}/** * Replaces some characters by a displayable equivalent * * @param string $content content * * @return  string the content with characters replaced */function PMA_replace_binary_contents($content){    $result = str_replace("\x00", '\0', $content);    $result = str_replace("\x08", '\b', $result);    $result = str_replace("\x0a", '\n', $result);    $result = str_replace("\x0d", '\r', $result);    $result = str_replace("\x1a", '\Z', $result);    return $result;}/** * Converts GIS data to Well Known Text format * * @param binary $data        GIS data * @param bool   $includeSRID Add SRID to the WKT * * @return GIS data in Well Know Text format */function PMA_asWKT($data, $includeSRID = false){    // Convert to WKT format    $hex = bin2hex($data);    $wktsql     = "SELECT ASTEXT(x'" . $hex . "')";    if ($includeSRID) {        $wktsql .= ", SRID(x'" . $hex . "')";    }    $wktresult  = PMA_DBI_try_query($wktsql, null, PMA_DBI_QUERY_STORE);    $wktarr     = PMA_DBI_fetch_row($wktresult, 0);    $wktval     = $wktarr[0];    if ($includeSRID) {        $srid = $wktarr[1];        $wktval = "'" . $wktval . "'," . $srid;    }    @PMA_DBI_free_result($wktresult);    return $wktval;}/** * If the string starts with a \r\n pair (0x0d0a) add an extra \n * * @param string $string string * * @return  string with the chars replaced */function PMA_duplicateFirstNewline($string){    $first_occurence = strpos($string, "\r\n");    if ($first_occurence === 0) {        $string = "\n".$string;    }    return $string;}/** * Get the action word corresponding to a script name * in order to display it as a title in navigation panel * * @param string $target a valid value for $cfg['LeftDefaultTabTable'], *                       $cfg['DefaultTabTable'] or $cfg['DefaultTabDatabase'] * * @return array */function PMA_getTitleForTarget($target){    $mapping = array(        // Values for $cfg['DefaultTabTable']        'tbl_structure.php' =>  __('Structure'),        'tbl_sql.php' => __('SQL'),        'tbl_select.php' =>__('Search'),        'tbl_change.php' =>__('Insert'),        'sql.php' => __('Browse'),        // Values for $cfg['DefaultTabDatabase']        'db_structure.php' => __('Structure'),        'db_sql.php' => __('SQL'),        'db_search.php' => __('Search'),        'db_operations.php' => __('Operations'),    );    return $mapping[$target];}/** * Formats user string, expanding @VARIABLES@, accepting strftime format string. * * @param string   $string  Text where to do expansion. * @param function $escape  Function to call for escaping variable values. * @param array    $updates Array with overrides for default parameters *                 (obtained from GLOBALS). * * @return string */function PMA_expandUserString($string, $escape = null, $updates = array()){    /* Content */    $vars['http_host'] = PMA_getenv('HTTP_HOST') ? PMA_getenv('HTTP_HOST') : '';    $vars['server_name'] = $GLOBALS['cfg']['Server']['host'];    $vars['server_verbose'] = $GLOBALS['cfg']['Server']['verbose'];    $vars['server_verbose_or_name'] = ! empty($GLOBALS['cfg']['Server']['verbose'])        ? $GLOBALS['cfg']['Server']['verbose']        : $GLOBALS['cfg']['Server']['host'];    $vars['database'] = $GLOBALS['db'];    $vars['table'] = $GLOBALS['table'];    $vars['phpmyadmin_version'] = 'phpMyAdmin ' . PMA_VERSION;    /* Update forced variables */    foreach ($updates as $key => $val) {        $vars[$key] = $val;    }    /* Replacement mapping */    /*     * The __VAR__ ones are for backward compatibility, because user     * might still have it in cookies.     */    $replace = array(        '@HTTP_HOST@' => $vars['http_host'],        '@SERVER@' => $vars['server_name'],        '__SERVER__' => $vars['server_name'],        '@VERBOSE@' => $vars['server_verbose'],        '@VSERVER@' => $vars['server_verbose_or_name'],        '@DATABASE@' => $vars['database'],        '__DB__' => $vars['database'],        '@TABLE@' => $vars['table'],        '__TABLE__' => $vars['table'],        '@PHPMYADMIN@' => $vars['phpmyadmin_version'],        );    /* Optional escaping */    if (!is_null($escape)) {        foreach ($replace as $key => $val) {            $replace[$key] = $escape($val);        }    }    /* Backward compatibility in 3.5.x */    if (strpos($string, '@FIELDS@') !== false) {        $string = strtr($string, array('@FIELDS@' => '@COLUMNS@'));    }    /* Fetch columns list if required */    if (strpos($string, '@COLUMNS@') !== false) {        $columns_list = PMA_DBI_get_columns($GLOBALS['db'], $GLOBALS['table']);        $column_names = array();        foreach ($columns_list as $column) {            if (! is_null($escape)) {                $column_names[] = $escape($column['Field']);            } else {                $column_names[] = $field['Field'];            }        }        $replace['@COLUMNS@'] = implode(',', $column_names);    }    /* Do the replacement */    return strtr(strftime($string), $replace);}/** * function that generates a json output for an ajax request and ends script * execution * * @param PMA_Message|string $message    message string containing the *                                       html of the message * @param bool               $success    success whether the ajax request *                                       was successfull * @param array              $extra_data extra data  optional - *                                       any other data as part of the json request * * @return nothing */function PMA_ajaxResponse($message, $success = true, $extra_data = array()){    $response = array();    if ( $success == true ) {        $response['success'] = true;        if ($message instanceof PMA_Message) {            $response['message'] = $message->getDisplay();        } else {            $response['message'] = $message;        }    } else {        $response['success'] = false;        if ($message instanceof PMA_Message) {            $response['error'] = $message->getDisplay();        } else {            $response['error'] = $message;        }    }    // If extra_data has been provided, append it to the response array    if ( ! empty($extra_data) && count($extra_data) > 0 ) {        $response = array_merge($response, $extra_data);    }    // Set the Content-Type header to JSON so that jQuery parses the    // response correctly.    //    // At this point, other headers might have been sent;    // even if $GLOBALS['is_header_sent'] is true,    // we have to send these additional headers.    header('Cache-Control: no-cache');    header("Content-Type: application/json");    echo json_encode($response);    if (!defined('TESTSUITE'))        exit;}/** * Display the form used to browse anywhere on the local server for a file to import * * @param string $max_upload_size maximum upload size * * @return nothing */function PMA_browseUploadFile($max_upload_size){    echo '<label for="radio_import_file">' . __("Browse your computer:") . '</label>';    echo '<div id="upload_form_status" style="display: none;"></div>';    echo '<div id="upload_form_status_info" style="display: none;"></div>';    echo '<input type="file" name="import_file" id="input_import_file" />';    echo PMA_displayMaximumUploadSize($max_upload_size) . "\n";    // some browsers should respect this :)    echo PMA_generateHiddenMaxFileSize($max_upload_size) . "\n";}/** * Display the form used to select a file to import from the server upload directory * * @param array  $import_list array of import types * @param string $uploaddir   upload directory * * @return nothing */function PMA_selectUploadFile($import_list, $uploaddir){    echo '<label for="radio_local_import_file">' . sprintf(__("Select from the web server upload directory <b>%s</b>:"), htmlspecialchars(PMA_userDir($uploaddir))) . '</label>';    $extensions = '';    foreach ($import_list as $key => $val) {        if (!empty($extensions)) {            $extensions .= '|';        }        $extensions .= $val['extension'];    }    $matcher = '@\.(' . $extensions . ')(\.('        . PMA_supportedDecompressions() . '))?$@';    $active = (isset($timeout_passed) && $timeout_passed && isset($local_import_file))        ? $local_import_file        : '';    $files = PMA_getFileSelectOptions(        PMA_userDir($uploaddir),        $matcher,        $active    );    if ($files === false) {        PMA_Message::error(            __('The directory you set for upload work cannot be reached')        )->display();    } elseif (!empty($files)) {        echo "\n";        echo '    <select style="margin: 5px" size="1" name="local_import_file" id="select_local_import_file">' . "\n";        echo '        <option value="">&nbsp;</option>' . "\n";        echo $files;        echo '    </select>' . "\n";    } elseif (empty ($files)) {        echo '<i>' . __('There are no files to upload') . '</i>';    }}/** * Build titles and icons for action links * * @return   array   the action titles */function PMA_buildActionTitles(){    $titles = array();    $titles['Browse']     = PMA_getIcon('b_browse.png', __('Browse'));    $titles['NoBrowse']   = PMA_getIcon('bd_browse.png', __('Browse'));    $titles['Search']     = PMA_getIcon('b_select.png', __('Search'));    $titles['NoSearch']   = PMA_getIcon('bd_select.png', __('Search'));    $titles['Insert']     = PMA_getIcon('b_insrow.png', __('Insert'));    $titles['NoInsert']   = PMA_getIcon('bd_insrow.png', __('Insert'));    $titles['Structure']  = PMA_getIcon('b_props.png', __('Structure'));    $titles['Drop']       = PMA_getIcon('b_drop.png', __('Drop'));    $titles['NoDrop']     = PMA_getIcon('bd_drop.png', __('Drop'));    $titles['Empty']      = PMA_getIcon('b_empty.png', __('Empty'));    $titles['NoEmpty']    = PMA_getIcon('bd_empty.png', __('Empty'));    $titles['Edit']       = PMA_getIcon('b_edit.png', __('Edit'));    $titles['NoEdit']     = PMA_getIcon('bd_edit.png', __('Edit'));    $titles['Export']     = PMA_getIcon('b_export.png', __('Export'));    $titles['NoExport']   = PMA_getIcon('bd_export.png', __('Export'));    $titles['Execute']    = PMA_getIcon('b_nextpage.png', __('Execute'));    $titles['NoExecute']  = PMA_getIcon('bd_nextpage.png', __('Execute'));    return $titles;}/** * This function processes the datatypes supported by the DB, as specified in * $cfg['ColumnTypes'] and either returns an array (useful for quickly checking * if a datatype is supported) or an HTML snippet that creates a drop-down list. * * @param bool   $html     Whether to generate an html snippet or an array * @param string $selected The value to mark as selected in HTML mode * * @return  mixed   An HTML snippet or an array of datatypes. * */function PMA_getSupportedDatatypes($html = false, $selected = ''){    global $cfg;    if ($html) {        // NOTE: the SELECT tag in not included in this snippet.        $retval = '';        foreach ($cfg['ColumnTypes'] as $key => $value) {            if (is_array($value)) {                $retval .= "<optgroup label='" . htmlspecialchars($key) . "'>";                foreach ($value as $subvalue) {                    if ($subvalue == $selected) {                        $retval .= "<option selected='selected'>";                        $retval .= $subvalue;                        $retval .= "</option>";                    } else if ($subvalue === '-') {                        $retval .= "<option disabled='disabled'>";                        $retval .= $subvalue;                        $retval .= "</option>";                    } else {                        $retval .= "<option>$subvalue</option>";                    }                }                $retval .= '</optgroup>';            } else {                if ($selected == $value) {                    $retval .= "<option selected='selected'>$value</option>";                } else {                    $retval .= "<option>$value</option>";                }            }        }    } else {        $retval = array();        foreach ($cfg['ColumnTypes'] as $value) {            if (is_array($value)) {                foreach ($value as $subvalue) {                    if ($subvalue !== '-') {                        $retval[] = $subvalue;                    }                }            } else {                if ($value !== '-') {                    $retval[] = $value;                }            }        }    }    return $retval;} // end PMA_getSupportedDatatypes()/** * Returns a list of datatypes that are not (yet) handled by PMA. * Used by: tbl_change.php and libraries/db_routines.inc.php * * @return   array   list of datatypes */function PMA_unsupportedDatatypes(){    $no_support_types = array();    return $no_support_types;}/** * Return GIS data types * * @param bool $upper_case whether to return values in upper case * * @return array GIS data types */function PMA_getGISDatatypes($upper_case = false){    $gis_data_types = array(        'geometry',        'point',        'linestring',        'polygon',        'multipoint',        'multilinestring',        'multipolygon',        'geometrycollection'    );    if ($upper_case) {        for ($i = 0; $i < count($gis_data_types); $i++) {            $gis_data_types[$i] = strtoupper($gis_data_types[$i]);        }    }    return $gis_data_types;}/** * Generates GIS data based on the string passed. * * @param string $gis_string GIS string * * @return GIS data enclosed in 'GeomFromText' function */function PMA_createGISData($gis_string){    $gis_string =  trim($gis_string);    $geom_types = '(POINT|MULTIPOINT|LINESTRING|MULTILINESTRING|'        . 'POLYGON|MULTIPOLYGON|GEOMETRYCOLLECTION)';    if (preg_match("/^'" . $geom_types . "\(.*\)',[0-9]*$/i", $gis_string)) {        return 'GeomFromText(' . $gis_string . ')';    } elseif (preg_match("/^" . $geom_types . "\(.*\)$/i", $gis_string)) {        return "GeomFromText('" . $gis_string . "')";    } else {        return $gis_string;    }}/** * Returns the names and details of the functions * that can be applied on geometry data typess. * * @param string $geom_type if provided the output is limited to the functions *                          that are applicable to the provided geometry type. * @param bool   $binary    if set to false functions that take two geometries *                          as arguments will not be included. * @param bool   $display   if set to true seperators will be added to the *                          output array. * * @return array names and details of the functions that can be applied on *               geometry data typess. */function PMA_getGISFunctions($geom_type = null, $binary = true, $display = false){    $funcs = array();    if ($display) {        $funcs[] = array('display' => ' ');    }    // Unary functions common to all geomety types    $funcs['Dimension']    = array('params' => 1, 'type' => 'int');    $funcs['Envelope']     = array('params' => 1, 'type' => 'Polygon');    $funcs['GeometryType'] = array('params' => 1, 'type' => 'text');    $funcs['SRID']         = array('params' => 1, 'type' => 'int');    $funcs['IsEmpty']      = array('params' => 1, 'type' => 'int');    $funcs['IsSimple']     = array('params' => 1, 'type' => 'int');    $geom_type = trim(strtolower($geom_type));    if ($display && $geom_type != 'geometry' && $geom_type != 'multipoint') {        $funcs[] = array('display' => '--------');    }    // Unary functions that are specific to each geomety type    if ($geom_type == 'point') {        $funcs['X'] = array('params' => 1, 'type' => 'float');        $funcs['Y'] = array('params' => 1, 'type' => 'float');    } elseif ($geom_type == 'multipoint') {        // no fucntions here    } elseif ($geom_type == 'linestring') {        $funcs['EndPoint']   = array('params' => 1, 'type' => 'point');        $funcs['GLength']    = array('params' => 1, 'type' => 'float');        $funcs['NumPoints']  = array('params' => 1, 'type' => 'int');        $funcs['StartPoint'] = array('params' => 1, 'type' => 'point');        $funcs['IsRing']     = array('params' => 1, 'type' => 'int');    } elseif ($geom_type == 'multilinestring') {        $funcs['GLength']  = array('params' => 1, 'type' => 'float');        $funcs['IsClosed'] = array('params' => 1, 'type' => 'int');    } elseif ($geom_type == 'polygon') {        $funcs['Area']             = array('params' => 1, 'type' => 'float');        $funcs['ExteriorRing']     = array('params' => 1, 'type' => 'linestring');        $funcs['NumInteriorRings'] = array('params' => 1, 'type' => 'int');    } elseif ($geom_type == 'multipolygon') {        $funcs['Area']     = array('params' => 1, 'type' => 'float');        $funcs['Centroid'] = array('params' => 1, 'type' => 'point');        // Not yet implemented in MySQL        //$funcs['PointOnSurface'] = array('params' => 1, 'type' => 'point');    } elseif ($geom_type == 'geometrycollection') {        $funcs['NumGeometries'] = array('params' => 1, 'type' => 'int');    }    // If we are asked for binary functions as well    if ($binary) {        // section seperator        if ($display) {            $funcs[] = array('display' => '--------');        }        if (PMA_MYSQL_INT_VERSION < 50601) {            $funcs['Crosses']    = array('params' => 2, 'type' => 'int');            $funcs['Contains']   = array('params' => 2, 'type' => 'int');            $funcs['Disjoint']   = array('params' => 2, 'type' => 'int');            $funcs['Equals']     = array('params' => 2, 'type' => 'int');            $funcs['Intersects'] = array('params' => 2, 'type' => 'int');            $funcs['Overlaps']   = array('params' => 2, 'type' => 'int');            $funcs['Touches']    = array('params' => 2, 'type' => 'int');            $funcs['Within']     = array('params' => 2, 'type' => 'int');        } else {            // If MySQl version is greaeter than or equal 5.6.1, use the ST_ prefix.            $funcs['ST_Crosses']    = array('params' => 2, 'type' => 'int');            $funcs['ST_Contains']   = array('params' => 2, 'type' => 'int');            $funcs['ST_Disjoint']   = array('params' => 2, 'type' => 'int');            $funcs['ST_Equals']     = array('params' => 2, 'type' => 'int');            $funcs['ST_Intersects'] = array('params' => 2, 'type' => 'int');            $funcs['ST_Overlaps']   = array('params' => 2, 'type' => 'int');            $funcs['ST_Touches']    = array('params' => 2, 'type' => 'int');            $funcs['ST_Within']     = array('params' => 2, 'type' => 'int');        }        if ($display) {            $funcs[] = array('display' => '--------');        }        // Minimum bounding rectangle functions        $funcs['MBRContains']   = array('params' => 2, 'type' => 'int');        $funcs['MBRDisjoint']   = array('params' => 2, 'type' => 'int');        $funcs['MBREquals']     = array('params' => 2, 'type' => 'int');        $funcs['MBRIntersects'] = array('params' => 2, 'type' => 'int');        $funcs['MBROverlaps']   = array('params' => 2, 'type' => 'int');        $funcs['MBRTouches']    = array('params' => 2, 'type' => 'int');        $funcs['MBRWithin']     = array('params' => 2, 'type' => 'int');    }    return $funcs;}/** * Creates a dropdown box with MySQL functions for a particular column. * * @param array $field       Data about the column for which *                           to generate the dropdown * @param bool  $insert_mode Whether the operation is 'insert' * * @global   array    $cfg            PMA configuration * @global   array    $analyzed_sql   Analyzed SQL query * @global   mixed    $data           (null/string) FIXME: what is this for? * * @return   string   An HTML snippet of a dropdown list with function *                    names appropriate for the requested column. */function PMA_getFunctionsForField($field, $insert_mode){    global $cfg, $analyzed_sql, $data;    $selected = '';    // Find the current type in the RestrictColumnTypes. Will result in 'FUNC_CHAR'    // or something similar. Then directly look up the entry in the    // RestrictFunctions array, which'll then reveal the available dropdown options    if (isset($cfg['RestrictColumnTypes'][strtoupper($field['True_Type'])])        && isset($cfg['RestrictFunctions'][$cfg['RestrictColumnTypes'][strtoupper($field['True_Type'])]])    ) {        $current_func_type  = $cfg['RestrictColumnTypes'][strtoupper($field['True_Type'])];        $dropdown           = $cfg['RestrictFunctions'][$current_func_type];        $default_function   = $cfg['DefaultFunctions'][$current_func_type];    } else {        $dropdown = array();        $default_function   = '';    }    $dropdown_built = array();    $op_spacing_needed = false;    // what function defined as default?    // for the first timestamp we don't set the default function    // if there is a default value for the timestamp    // (not including CURRENT_TIMESTAMP)    // and the column does not have the    // ON UPDATE DEFAULT TIMESTAMP attribute.    if ($field['True_Type'] == 'timestamp'        && empty($field['Default'])        && empty($data)        && ! isset($analyzed_sql[0]['create_table_fields'][$field['Field']]['on_update_current_timestamp'])    ) {        $default_function = $cfg['DefaultFunctions']['first_timestamp'];    }    // For primary keys of type char(36) or varchar(36) UUID if the default function    // Only applies to insert mode, as it would silently trash data on updates.    if ($insert_mode        && $field['Key'] == 'PRI'        && ($field['Type'] == 'char(36)' || $field['Type'] == 'varchar(36)')    ) {         $default_function = $cfg['DefaultFunctions']['FUNC_UUID'];    }    // this is set only when appropriate and is always true    if (isset($field['display_binary_as_hex'])) {        $default_function = 'UNHEX';    }    // Create the output    $retval = '                <option></option>' . "\n";    // loop on the dropdown array and print all available options for that field.    foreach ($dropdown as $each_dropdown) {        $retval .= '                ';        $retval .= '<option';        if ($default_function === $each_dropdown) {            $retval .= ' selected="selected"';        }        $retval .= '>' . $each_dropdown . '</option>' . "\n";        $dropdown_built[$each_dropdown] = 'true';        $op_spacing_needed = true;    }    // For compatibility's sake, do not let out all other functions. Instead    // print a separator (blank) and then show ALL functions which weren't shown    // yet.    $cnt_functions = count($cfg['Functions']);    for ($j = 0; $j < $cnt_functions; $j++) {        if (! isset($dropdown_built[$cfg['Functions'][$j]])            || $dropdown_built[$cfg['Functions'][$j]] != 'true'        ) {            // Is current function defined as default?            $selected = ($field['first_timestamp'] && $cfg['Functions'][$j] == $cfg['DefaultFunctions']['first_timestamp'])                        || (! $field['first_timestamp'] && $cfg['Functions'][$j] == $default_function)                      ? ' selected="selected"'                      : '';            if ($op_spacing_needed == true) {                $retval .= '                ';                $retval .= '<option value="">--------</option>' . "\n";                $op_spacing_needed = false;            }            $retval .= '                ';            $retval .= '<option' . $selected . '>' . $cfg['Functions'][$j]                . '</option>' . "\n";        }    } // end for    return $retval;} // end PMA_getFunctionsForField()/** * Checks if the current user has a specific privilege and returns true if the * user indeed has that privilege or false if (s)he doesn't. This function must * only be used for features that are available since MySQL 5, because it * relies on the INFORMATION_SCHEMA database to be present. * * Example:   PMA_currentUserHasPrivilege('CREATE ROUTINE', 'mydb'); *            // Checks if the currently logged in user has the global *            // 'CREATE ROUTINE' privilege or, if not, checks if the *            // user has this privilege on database 'mydb'. * * @param string $priv The privilege to check * @param mixed  $db   null, to only check global privileges *                     string, db name where to also check for privileges * @param mixed  $tbl  null, to only check global privileges *                     string, db name where to also check for privileges * * @return bool */function PMA_currentUserHasPrivilege($priv, $db = null, $tbl = null){    // Get the username for the current user in the format    // required to use in the information schema database.    $user = PMA_DBI_fetch_value("SELECT CURRENT_USER();");    if ($user === false) {        return false;    }    $user = explode('@', $user);    $username  = "''";    $username .= str_replace("'", "''", $user[0]);    $username .= "''@''";    $username .= str_replace("'", "''", $user[1]);    $username .= "''";    // Prepage the query    $query = "SELECT `PRIVILEGE_TYPE` FROM `INFORMATION_SCHEMA`.`%s` "           . "WHERE GRANTEE='%s' AND PRIVILEGE_TYPE='%s'";    // Check global privileges first.    if (PMA_DBI_fetch_value(        sprintf(            $query,            'USER_PRIVILEGES',            $username,            $priv        )    )    ) {        return true;    }    // If a database name was provided and user does not have the    // required global privilege, try database-wise permissions.    if ($db !== null) {        $query .= " AND TABLE_SCHEMA='%s'";        if (PMA_DBI_fetch_value(            sprintf(                $query,                'SCHEMA_PRIVILEGES',                $username,                $priv,                PMA_sqlAddSlashes($db)            )        )        ) {            return true;        }    } else {        // There was no database name provided and the user        // does not have the correct global privilege.        return false;    }    // If a table name was also provided and we still didn't    // find any valid privileges, try table-wise privileges.    if ($tbl !== null) {        $query .= " AND TABLE_NAME='%s'";        if ($retval = PMA_DBI_fetch_value(            sprintf(                $query,                'TABLE_PRIVILEGES',                $username,                $priv,                PMA_sqlAddSlashes($db),                PMA_sqlAddSlashes($tbl)            )        )        ) {            return true;        }    }    // If we reached this point, the user does not    // have even valid table-wise privileges.    return false;}/** * Returns server type for current connection * * Known types are: Drizzle, MariaDB and MySQL (default) * * @return string */function PMA_getServerType(){    $server_type = 'MySQL';    if (PMA_DRIZZLE) {        $server_type = 'Drizzle';    } else if (strpos(PMA_MYSQL_STR_VERSION, 'mariadb') !== false) {        $server_type = 'MariaDB';    } else if (stripos(PMA_MYSQL_VERSION_COMMENT, 'percona') !== false) {        $server_type = 'Percona Server';    }    return $server_type;}/** * Analyzes the limit clause and return the start and length attributes of it. * * @param string $limit_clause limit clause * * @return array Start and length attributes of the limit clause */function PMA_analyzeLimitClause($limit_clause){    $start_and_length = explode(',', str_ireplace('LIMIT', '', $limit_clause));    return array(        'start'  => trim($start_and_length[0]),        'length' => trim($start_and_length[1])    );}/** * Outputs HTML code for print button. * * @return nothing */function PMA_printButton(){    echo '<p class="print_ignore">';    echo '<input type="button" id="print" value="' . __('Print') . '" />';    echo '</p>';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * manipulation of table data like inserting, replacing and updating * * usally called as form action from tbl_change.php to insert or update table rows * * * @todo 'edit_next' tends to not work as expected if used ... at least there is no order by *       it needs the original query and the row number and than replace the LIMIT clause * @package PhpMyAdmin *//** * do not import request variable into global scope * * cannot be used as long as it could happen that the $goto file that is included * at the end of this script is not updated to work without imported request variables * * @todo uncomment this if all possible included files to rely on import request variablesif (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);} *//** * Gets some core libraries */require_once './libraries/common.inc.php';$blob_streaming_active = $GLOBALS['PMA_Config']->get('BLOBSTREAMING_PLUGINS_EXIST');// Check parametersPMA_checkParameters(array('db', 'table', 'goto'));PMA_DBI_select_db($GLOBALS['db']);/** * Initializes some variables */$goto_include = false;$GLOBALS['js_include'][] = 'makegrid.js';// Needed for generation of Inline Edit anchors$GLOBALS['js_include'][] = 'sql.js';if (isset($_REQUEST['insert_rows']) && is_numeric($_REQUEST['insert_rows']) && $_REQUEST['insert_rows'] != $cfg['InsertRows']) {    $cfg['InsertRows'] = $_REQUEST['insert_rows'];    $GLOBALS['js_include'][] = 'tbl_change.js';    include_once './libraries/header.inc.php';    include './tbl_change.php';    exit;}if (isset($_REQUEST['after_insert']) && in_array($_REQUEST['after_insert'], array('new_insert', 'same_insert', 'edit_next'))) {    $url_params['after_insert'] = $_REQUEST['after_insert'];    //$GLOBALS['goto'] = 'tbl_change.php';    $goto_include = 'tbl_change.php';    if (isset($_REQUEST['where_clause'])) {        if ($_REQUEST['after_insert'] == 'same_insert') {            foreach ($_REQUEST['where_clause'] as $one_where_clause) {                $url_params['where_clause'][] = $one_where_clause;            }        } elseif ($_REQUEST['after_insert'] == 'edit_next') {            foreach ($_REQUEST['where_clause'] as $one_where_clause) {                $local_query    = 'SELECT * FROM ' . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($GLOBALS['table'])                                . ' WHERE ' . str_replace('` =', '` >', $one_where_clause)                                . ' LIMIT 1;';                $res            = PMA_DBI_query($local_query);                $row            = PMA_DBI_fetch_row($res);                $meta           = PMA_DBI_get_fields_meta($res);                // must find a unique condition based on unique key,                // not a combination of all fields                list($unique_condition, $clause_is_unique) = PMA_getUniqueCondition($res, count($meta), $meta, $row, true);                if (! empty($unique_condition)) {                    $_SESSION['edit_next'] = $unique_condition;                }                unset($unique_condition, $clause_is_unique);            }        }    }} elseif (! empty($GLOBALS['goto'])) {    if (! preg_match('@^[a-z_]+\.php$@', $GLOBALS['goto'])) {        // this should NOT happen        //$GLOBALS['goto'] = false;        $goto_include = false;    } else {        $goto_include = $GLOBALS['goto'];    }    if ($GLOBALS['goto'] == 'db_sql.php' && strlen($GLOBALS['table'])) {        $GLOBALS['table'] = '';    }}if (! $goto_include) {    if (! strlen($GLOBALS['table'])) {        $goto_include = 'db_sql.php';    } else {        $goto_include = 'tbl_sql.php';    }}// Defines the url to return in case of failure of the queryif (isset($_REQUEST['err_url'])) {    $err_url = $_REQUEST['err_url'];} else {    $err_url = 'tbl_change.php' . PMA_generate_common_url($url_params);}/** * Prepares the update/insert of a row */if (isset($_REQUEST['where_clause'])) {    // we were editing something => use the WHERE clause    $loop_array = (is_array($_REQUEST['where_clause']) ? $_REQUEST['where_clause'] : array($_REQUEST['where_clause']));    $using_key  = true;    $is_insert  = ($_REQUEST['submit_type'] == 'insert') || ($_REQUEST['submit_type'] == 'showinsert') || ($_REQUEST['submit_type'] == 'insertignore');    $is_insertignore  = ($_REQUEST['submit_type'] == 'insertignore');} else {    // new row => use indexes    $loop_array = array();    foreach ($_REQUEST['fields']['multi_edit'] as $key => $dummy) {        $loop_array[] = $key;    }    $using_key  = false;    $is_insert  = true;    $is_insertignore = false;}$query = array();$value_sets = array();$func_no_param = array(    'CONNECTION_ID',    'CURRENT_USER',    'CURDATE',    'CURTIME',    'DATABASE',    'LAST_INSERT_ID',    'NOW',    'PI',    'RAND',    'SYSDATE',    'UNIX_TIMESTAMP',    'USER',    'UTC_DATE',    'UTC_TIME',    'UTC_TIMESTAMP',    'UUID',    'VERSION',);$func_optional_param = array(    'RAND',    'UNIX_TIMESTAMP',);$gis_from_text_functions = array(    'GeomFromText',    'GeomCollFromText',    'LineFromText',    'MLineFromText',    'PointFromText',    'MPointFromText',    'PolyFromText',    'MPolyFromText',);$gis_from_wkb_functions = array(    'GeomFromWKB',    'GeomCollFromWKB',    'LineFromWKB',    'MLineFromWKB',    'PointFromWKB',    'MPointFromWKB',    'PolyFromWKB',    'MPolyFromWKB',);foreach ($loop_array as $rownumber => $where_clause) {    // skip fields to be ignored    if (! $using_key && isset($_REQUEST['insert_ignore_' . $where_clause])) {        continue;    }    // Defines the SET part of the sql query    $query_values = array();    // Map multi-edit keys to single-level arrays, dependent on how we got the fields    $me_fields        = isset($_REQUEST['fields']['multi_edit'][$rownumber])        ? $_REQUEST['fields']['multi_edit'][$rownumber]        : array();    $me_fields_name        = isset($_REQUEST['fields_name']['multi_edit'][$rownumber])        ? $_REQUEST['fields_name']['multi_edit'][$rownumber]        : null;    $me_fields_prev        = isset($_REQUEST['fields_prev']['multi_edit'][$rownumber])        ? $_REQUEST['fields_prev']['multi_edit'][$rownumber]        : null;    $me_funcs        = isset($_REQUEST['funcs']['multi_edit'][$rownumber])        ? $_REQUEST['funcs']['multi_edit'][$rownumber]        : null;    $me_fields_type        = isset($_REQUEST['fields_type']['multi_edit'][$rownumber])        ? $_REQUEST['fields_type']['multi_edit'][$rownumber]        : null;    $me_fields_null        = isset($_REQUEST['fields_null']['multi_edit'][$rownumber])        ? $_REQUEST['fields_null']['multi_edit'][$rownumber]        : null;    $me_fields_null_prev        = isset($_REQUEST['fields_null_prev']['multi_edit'][$rownumber])        ? $_REQUEST['fields_null_prev']['multi_edit'][$rownumber]        : null;    $me_auto_increment        = isset($_REQUEST['auto_increment']['multi_edit'][$rownumber])        ? $_REQUEST['auto_increment']['multi_edit'][$rownumber]        : null;    // Fetch the current values of a row to use in case we have a protected field    // @todo possibly move to ./libraries/tbl_replace_fields.inc.php    if ($is_insert && $using_key && isset($me_fields_type) && is_array($me_fields_type) && isset($where_clause)) {        $prot_row = PMA_DBI_fetch_single_row('SELECT * FROM ' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';');    }    // When a select field is nullified, it's not present in $_REQUEST    // so initialize it; this way, the foreach($me_fields) will process it    foreach ($me_fields_name as $key => $val) {        if (! isset($me_fields[$key])) {            $me_fields[$key] = '';        }    }    // Iterate in the order of $me_fields_name, not $me_fields, to avoid problems    // when inserting multiple entries    foreach ($me_fields_name as $key => $field_name) {        $val = $me_fields[$key];        // Note: $key is an md5 of the fieldname. The actual fieldname is available in $me_fields_name[$key]        include './libraries/tbl_replace_fields.inc.php';        // for blobstreaming        if ($blob_streaming_active) {            $remove_blob_repo = isset($_REQUEST['remove_blob_repo_' . $key]) ? $_REQUEST['remove_blob_repo_' . $key] : null;            $upload_blob_repo = isset($_REQUEST['upload_blob_repo_' . $key]) ? $_REQUEST['upload_blob_repo_' . $key] : null;            // checks if an existing blob repository reference should be removed            if (isset($remove_blob_repo) && ! isset($upload_blob_repo)) {                $remove_blob_reference = $_REQUEST['remove_blob_ref_' . $key];                if (isset($remove_blob_reference)) {                    $val = "NULL";                }            }            // checks if this field requires a bs reference attached to it            if (isset($upload_blob_repo)) {                // get the most recent BLOB reference                $bs_reference = PMA_File::getRecentBLOBReference();                // if the most recent BLOB reference exists, set it as a field value                if (!is_null($bs_reference)) {                    $val = "'" . PMA_sqlAddSlashes($bs_reference) . "'";                }            }        }        if (empty($me_funcs[$key])) {            $cur_value = $val;        } elseif ('UUID' === $me_funcs[$key]) {            /* This way user will know what UUID new row has */            $uuid = PMA_DBI_fetch_value('SELECT UUID()');            $cur_value = "'" . $uuid . "'";        } elseif ((in_array($me_funcs[$key], $gis_from_text_functions)            && substr($val, 0, 3) == "'''")            || in_array($me_funcs[$key], $gis_from_wkb_functions)        ) {            // Remove enclosing apostrophes            $val = substr($val, 1, strlen($val) - 2);            // Remove escaping apostrophes            $val = str_replace("''", "'", $val);            $cur_value = $me_funcs[$key] . '(' . $val . ')';        } elseif (! in_array($me_funcs[$key], $func_no_param)                  || ($val != "''" && in_array($me_funcs[$key], $func_optional_param))) {            $cur_value = $me_funcs[$key] . '(' . $val . ')';        } else {            $cur_value = $me_funcs[$key] . '()';        }        //  i n s e r t        if ($is_insert) {            // no need to add column into the valuelist            if (strlen($cur_value)) {                $query_values[] = $cur_value;                // first inserted row so prepare the list of fields                if (empty($value_sets)) {                    $query_fields[] = PMA_backquote($me_fields_name[$key]);                }            }        //  u p d a t e        } elseif (!empty($me_fields_null_prev[$key])         && ! isset($me_fields_null[$key])) {            // field had the null checkbox before the update            // field no longer has the null checkbox            $query_values[] = PMA_backquote($me_fields_name[$key]) . ' = ' . $cur_value;        } elseif (empty($me_funcs[$key])         && isset($me_fields_prev[$key])         && ("'" . PMA_sqlAddSlashes($me_fields_prev[$key]) . "'" == $val)) {            // No change for this column and no MySQL function is used -> next column            continue;        } elseif (! empty($val)) {            // avoid setting a field to NULL when it's already NULL            // (field had the null checkbox before the update            //  field still has the null checkbox)            if (empty($me_fields_null_prev[$key])             || empty($me_fields_null[$key])) {                 $query_values[] = PMA_backquote($me_fields_name[$key]) . ' = ' . $cur_value;            }        }    } // end foreach ($me_fields as $key => $val)    if (count($query_values) > 0) {        if ($is_insert) {            $value_sets[] = implode(', ', $query_values);        } else {            // build update query            $query[] = 'UPDATE ' . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($GLOBALS['table'])                . ' SET ' . implode(', ', $query_values) . ' WHERE ' . $where_clause . ($_REQUEST['clause_is_unique'] ? '' : ' LIMIT 1');        }    }} // end foreach ($loop_array as $where_clause)unset($me_fields_name, $me_fields_prev, $me_funcs, $me_fields_type, $me_fields_null, $me_fields_null_prev,    $me_auto_increment, $cur_value, $key, $val, $loop_array, $where_clause, $using_key,    $func_no_param);// Builds the sql queryif ($is_insert && count($value_sets) > 0) {    if ($is_insertignore) {        $insert_command = 'INSERT IGNORE ';    } else {        $insert_command = 'INSERT ';    }    $query[] = $insert_command . 'INTO ' . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($GLOBALS['table'])        . ' (' . implode(', ', $query_fields) . ') VALUES (' . implode('), (', $value_sets) . ')';    unset($insert_command);    unset($query_fields);} elseif (empty($query)) {    // No change -> move back to the calling script    //    // Note: logic passes here for inline edit    $message = PMA_Message::success(__('No change'));    $active_page = $goto_include;    if (! $GLOBALS['is_ajax_request'] == true) {        include_once './libraries/header.inc.php';    }    include './' . PMA_securePath($goto_include);    exit;}unset($me_fields, $is_insertignore);/** * Executes the sql query and get the result, then move back to the calling * page */if (! empty($GLOBALS['sql_query'])) {    $url_params['sql_query'] = $GLOBALS['sql_query'];    $return_to_sql_query = $GLOBALS['sql_query'];}$GLOBALS['sql_query'] = implode('; ', $query) . ';';// to ensure that the query is displayed in case of// "insert as new row" and then "insert another new row"$GLOBALS['display_query'] = $GLOBALS['sql_query'];$total_affected_rows = 0;$last_messages = array();$warning_messages = array();$error_messages = array();foreach ($query as $single_query) {    if ($_REQUEST['submit_type'] == 'showinsert') {        $last_messages[] = PMA_Message::notice(__('Showing SQL query'));        continue;    }    if ($GLOBALS['cfg']['IgnoreMultiSubmitErrors']) {        $result = PMA_DBI_try_query($single_query);    } else {        $result = PMA_DBI_query($single_query);    }    if (! $result) {        $error_messages[] = PMA_Message::sanitize(PMA_DBI_getError());    } else {        // The next line contains a real assignment, it's not a typo        if ($tmp = @PMA_DBI_affected_rows()) {            $total_affected_rows += $tmp;        }        unset($tmp);        $insert_id = PMA_DBI_insert_id();        if ($insert_id != 0) {            // insert_id is id of FIRST record inserted in one insert, so if we            // inserted multiple rows, we had to increment this            if ($total_affected_rows > 0) {                $insert_id = $insert_id + $total_affected_rows - 1;            }            $last_message = PMA_Message::notice(__('Inserted row id: %1$d'));            $last_message->addParam($insert_id);            $last_messages[] = $last_message;        }        PMA_DBI_free_result($result);    } // end if    foreach (PMA_DBI_get_warnings() as $warning) {        $warning_messages[]            = PMA_Message::sanitize(                $warning['Level'] . ': #' . $warning['Code'] . ' ' . $warning['Message']            );    }    unset($result);}unset($single_query, $query);if ($is_insert && count($value_sets) > 0) {    $message = PMA_Message::inserted_rows($total_affected_rows);} else {    $message = PMA_Message::affected_rows($total_affected_rows);}$message->addMessages($last_messages, '<br />');if (! empty($warning_messages)) {    $message->addMessages($warning_messages, '<br />');    $message->isError(true);}if (! empty($error_messages)) {    $message->addMessages($error_messages);    $message->isError(true);}unset($error_messages, $warning_messages, $total_affected_rows, $last_messages, $last_message);if ($GLOBALS['is_ajax_request'] == true) {    /**     * If we are in grid editing, we need to process the relational and     * transformed fields, if they were edited. After that, output the correct     * link/transformed value and exit     *     * Logic taken from libraries/display_tbl.lib.php     */    if (isset($_REQUEST['rel_fields_list']) && $_REQUEST['rel_fields_list'] != '') {        //handle relations work here for updated row.        include_once './libraries/relation.lib.php';        $map = PMA_getForeigners($db, $table, '', 'both');        $rel_fields = array();        parse_str($_REQUEST['rel_fields_list'], $rel_fields);        // loop for each relation cell        foreach ( $rel_fields as $cell_index => $curr_cell_rel_field) {            foreach ( $curr_cell_rel_field as $rel_field => $rel_field_value) {                $where_comparison = "='" . $rel_field_value . "'";                $display_field = PMA_getDisplayField($map[$rel_field]['foreign_db'], $map[$rel_field]['foreign_table']);                // Field to display from the foreign table?                if (isset($display_field) && strlen($display_field)) {                    $dispsql     = 'SELECT ' . PMA_backquote($display_field)                        . ' FROM ' . PMA_backquote($map[$rel_field]['foreign_db'])                        . '.' . PMA_backquote($map[$rel_field]['foreign_table'])                        . ' WHERE ' . PMA_backquote($map[$rel_field]['foreign_field'])                        . $where_comparison;                    $dispresult  = PMA_DBI_try_query($dispsql, null, PMA_DBI_QUERY_STORE);                    if ($dispresult && PMA_DBI_num_rows($dispresult) > 0) {                        list($dispval) = PMA_DBI_fetch_row($dispresult, 0);                    } else {                        //$dispval = __('Link not found');                    }                    @PMA_DBI_free_result($dispresult);                } else {                    $dispval     = '';                } // end if... else...                if ('K' == $_SESSION['tmp_user_values']['relational_display']) {                    // user chose "relational key" in the display options, so                    // the title contains the display field                    $title = (! empty($dispval))? ' title="' . htmlspecialchars($dispval) . '"' : '';                } else {                    $title = ' title="' . htmlspecialchars($rel_field_value) . '"';                }                $_url_params = array(                    'db'    => $map[$rel_field]['foreign_db'],                    'table' => $map[$rel_field]['foreign_table'],                    'pos'   => '0',                    'sql_query' => 'SELECT * FROM '                                        . PMA_backquote($map[$rel_field]['foreign_db']) . '.' . PMA_backquote($map[$rel_field]['foreign_table'])                                        . ' WHERE ' . PMA_backquote($map[$rel_field]['foreign_field'])                                        . $where_comparison                );                $output = '<a href="sql.php' . PMA_generate_common_url($_url_params) . '"' . $title . '>';                if ('D' == $_SESSION['tmp_user_values']['relational_display']) {                    // user chose "relational display field" in the                    // display options, so show display field in the cell                    $output .= (!empty($dispval)) ? htmlspecialchars($dispval) : '';                } else {                    // otherwise display data in the cell                    $output .= htmlspecialchars($rel_field_value);                }                $output .= '</a>';                $extra_data['relations'][$cell_index] = $output;            }        }   // end of loop for each relation cell    }    if (isset($_REQUEST['do_transformations']) && $_REQUEST['do_transformations'] == true ) {        include_once './libraries/transformations.lib.php';        //if some posted fields need to be transformed, generate them here.        $mime_map = PMA_getMIME($db, $table);        if ($mime_map === false) {            $mime_map = array();        }        $edited_values = array();        parse_str($_REQUEST['transform_fields_list'], $edited_values);        foreach ($mime_map as $transformation) {            $include_file = PMA_securePath($transformation['transformation']);            $column_name = $transformation['column_name'];            foreach ($edited_values as $cell_index => $curr_cell_edited_values) {                if (isset($curr_cell_edited_values[$column_name])) {                    $column_data = $curr_cell_edited_values[$column_name];                    $_url_params = array(                        'db'            => $db,                        'table'         => $table,                        'where_clause'  => $_REQUEST['where_clause'],                        'transform_key' => $column_name,                    );                    if (file_exists('./libraries/transformations/' . $include_file)) {                        $transformfunction_name = str_replace('.inc.php', '', $transformation['transformation']);                        include_once './libraries/transformations/' . $include_file;                        if (function_exists('PMA_transformation_' . $transformfunction_name)) {                            $transform_function = 'PMA_transformation_' . $transformfunction_name;                            $transform_options  = PMA_transformation_getOptions((isset($transformation['transformation_options']) ? $transformation['transformation_options'] : ''));                            $transform_options['wrapper_link'] = PMA_generate_common_url($_url_params);                        }                    }                    $extra_data['transformations'][$cell_index] = $transform_function($column_data, $transform_options);                }            }   // end of loop for each transformation cell        }   // end of loop for each $mime_map    }    /**Get the total row count of the table*/    $extra_data['row_count'] = PMA_Table::countRecords($_REQUEST['db'], $_REQUEST['table']);    $extra_data['sql_query'] = PMA_showMessage($message, $GLOBALS['display_query']);    PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);}if (isset($return_to_sql_query)) {    $disp_query = $GLOBALS['sql_query'];    $disp_message = $message;    unset($message);    $GLOBALS['sql_query'] = $return_to_sql_query;}$GLOBALS['js_include'][] = 'tbl_change.js';// in case we call sql.php which needs those:$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$active_page = $goto_include;/** * If user asked for "and then Insert another new row" we have to remove * WHERE clause information so that tbl_change.php does not go back * to the current record */if (isset($_REQUEST['after_insert']) && 'new_insert' == $_REQUEST['after_insert']) {        unset($_REQUEST['where_clause']);}/** * Load header. */require_once './libraries/header.inc.php';/** * Load target page. */require './' . PMA_securePath($goto_include);exit;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);/** * Selects the database to work with */PMA_DBI_select_db($db);$goto = $cfg['DefaultTabTable'];/** * $_REQUEST['target_db'] could be empty in case we came from an input field * (when there are many databases, no drop-down) */if (empty($_REQUEST['target_db'])) {    $_REQUEST['target_db'] = $db;}/** * A target table name has been sent to this script -> do the work */if (PMA_isValid($_REQUEST['new_name'])) {    if ($db == $_REQUEST['target_db'] && $table == $_REQUEST['new_name']) {        if (isset($_REQUEST['submit_move'])) {            $message = PMA_Message::error(__('Can\'t move table to same one!'));        } else {            $message = PMA_Message::error(__('Can\'t copy table to same one!'));        }        $result = false;    } else {        $result = PMA_Table::moveCopy($db, $table, $_REQUEST['target_db'], $_REQUEST['new_name'],            $_REQUEST['what'], isset($_REQUEST['submit_move']), 'one_table');        if (isset($_REQUEST['submit_move'])) {            $message = PMA_Message::success(__('Table %s has been moved to %s.'));        } else {            $message = PMA_Message::success(__('Table %s has been copied to %s.'));        }        $old = PMA_backquote($db) . '.' . PMA_backquote($table);        $message->addParam($old);        $new = PMA_backquote($_REQUEST['target_db']) . '.' . PMA_backquote($_REQUEST['new_name']);        $message->addParam($new);        /* Check: Work on new table or on old table? */        if (isset($_REQUEST['submit_move']) || PMA_isValid($_REQUEST['switch_to_new'])) {            $db        = $_REQUEST['target_db'];            $table     = $_REQUEST['new_name'];        }        if ( $_REQUEST['ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            $extra_data['db'] = $GLOBALS['db'];            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $reload = 1;    }} else {    /**     * No new name for the table!     */    $message = PMA_Message::error(__('The table name is empty!'));    $result = false;}/** * Back to the calling script */$_message = $message;unset($message);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles miscellaneous db operations: *  - move/rename *  - copy *  - changing collation *  - changing comment *  - adding tables *  - viewing PDF schemas * * @package PhpMyAdmin *//** * requirements */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';// add blobstreaming library functionsrequire_once "./libraries/blobstreaming.lib.php";// add a javascript file for jQuery functions to handle Ajax actions// also add jQueryUI$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'db_operations.js';/** * Rename/move or copy database */if (strlen($db) && (! empty($db_rename) || ! empty($db_copy))) {    if (! empty($db_rename)) {        $move = true;    } else {        $move = false;    }    if (! isset($newname) || ! strlen($newname)) {        $message = PMA_Message::error(__('The database name is empty!'));    } else {        $sql_query = ''; // in case target db exists        $_error = false;        if ($move || (isset($create_database_before_copying) && $create_database_before_copying)) {            // lower_case_table_names=1 `DB` becomes `db`            if (!PMA_DRIZZLE) {                $lower_case_table_names = PMA_DBI_fetch_value('SHOW VARIABLES LIKE "lower_case_table_names"', 0, 1);                if ($lower_case_table_names === '1') {                    $newname = PMA_strtolower($newname);                }            }            $local_query = 'CREATE DATABASE ' . PMA_backquote($newname);            if (isset($db_collation)) {                $local_query .= ' DEFAULT' . PMA_generateCharsetQueryPart($db_collation);            }            $local_query .= ';';            $sql_query = $local_query;            // save the original db name because Tracker.class.php which            // may be called under PMA_DBI_query() changes $GLOBALS['db']            // for some statements, one of which being CREATE DATABASE            $original_db = $db;            PMA_DBI_query($local_query);            $db = $original_db;            unset($original_db);            // rebuild the database list because PMA_Table::moveCopy            // checks in this list if the target db exists            $GLOBALS['pma']->databases->build();        }        // here I don't use DELIMITER because it's not part of the        // language; I have to send each statement one by one        // to avoid selecting alternatively the current and new db        // we would need to modify the CREATE definitions to qualify        // the db name        $procedure_names = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');        if ($procedure_names) {            foreach ($procedure_names as $procedure_name) {                PMA_DBI_select_db($db);                $tmp_query = PMA_DBI_get_definition($db, 'PROCEDURE', $procedure_name);                // collect for later display                $GLOBALS['sql_query'] .= "\n" . $tmp_query;                PMA_DBI_select_db($newname);                PMA_DBI_query($tmp_query);            }        }        $function_names = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');        if ($function_names) {            foreach ($function_names as $function_name) {                PMA_DBI_select_db($db);                $tmp_query = PMA_DBI_get_definition($db, 'FUNCTION', $function_name);                // collect for later display                $GLOBALS['sql_query'] .= "\n" . $tmp_query;                PMA_DBI_select_db($newname);                PMA_DBI_query($tmp_query);            }        }        // go back to current db, just in case        PMA_DBI_select_db($db);        $GLOBALS['sql_constraints_query_full_db'] = array();        $tables_full = PMA_DBI_get_tables_full($db);        $views = array();        // remove all foreign key constraints, otherwise we can get errors        include_once './libraries/export/sql.php';        foreach ($tables_full as $each_table => $tmp) {            $sql_constraints = '';            $sql_drop_foreign_keys = '';            $sql_structure = PMA_getTableDef($db, $each_table, "\n", '', false, false);            if ($move && ! empty($sql_drop_foreign_keys)) {                PMA_DBI_query($sql_drop_foreign_keys);            }            // keep the constraint we just dropped            if (! empty($sql_constraints)) {                $GLOBALS['sql_constraints_query_full_db'][] = $sql_constraints;            }        }        unset($sql_constraints, $sql_drop_foreign_keys, $sql_structure);        foreach ($tables_full as $each_table => $tmp) {            // to be able to rename a db containing views,            // first all the views are collected and a stand-in is created            // the real views are created after the tables            if (PMA_Table::isView($db, $each_table)) {                $views[] = $each_table;                // Create stand-in definition to resolve view dependencies                $sql_view_standin = PMA_getTableDefStandIn($db, $each_table, "\n");                PMA_DBI_select_db($newname);                PMA_DBI_query($sql_view_standin);                $GLOBALS['sql_query'] .= "\n" . $sql_view_standin;            }        }        foreach ($tables_full as $each_table => $tmp) {            // skip the views; we have creted stand-in definitions            if (PMA_Table::isView($db, $each_table)) {                continue;            }            $back = $sql_query;            $sql_query = '';            // value of $what for this table only            $this_what = $what;            // do not copy the data from a Merge table            // note: on the calling FORM, 'data' means 'structure and data'            if (PMA_Table::isMerge($db, $each_table)) {                if ($this_what == 'data') {                    $this_what = 'structure';                }                if ($this_what == 'dataonly') {                    $this_what = 'nocopy';                }            }            if ($this_what != 'nocopy') {                // keep the triggers from the original db+table                // (third param is empty because delimiters are only intended                //  for importing via the mysql client or our Import feature)                $triggers = PMA_DBI_get_triggers($db, $each_table, '');                if (! PMA_Table::moveCopy(                    $db, $each_table, $newname, $each_table,                    isset($this_what) ? $this_what : 'data', $move, 'db_copy')                ) {                    $_error = true;                    // $sql_query is filled by PMA_Table::moveCopy()                    $sql_query = $back . $sql_query;                    break;                }                // apply the triggers to the destination db+table                if ($triggers) {                    PMA_DBI_select_db($newname);                    foreach ($triggers as $trigger) {                        PMA_DBI_query($trigger['create']);                        $GLOBALS['sql_query'] .= "\n" . $trigger['create'] . ';';                    }                    unset($trigger);                }                unset($triggers);                // this does not apply to a rename operation                if (isset($GLOBALS['add_constraints']) && !empty($GLOBALS['sql_constraints_query'])) {                    $GLOBALS['sql_constraints_query_full_db'][] = $GLOBALS['sql_constraints_query'];                    unset($GLOBALS['sql_constraints_query']);                }            }            // $sql_query is filled by PMA_Table::moveCopy()            $sql_query = $back . $sql_query;        } // end (foreach)        unset($each_table);        // handle the views        if (! $_error) {            // temporarily force to add DROP IF EXIST to CREATE VIEW query,            // to remove stand-in VIEW that was created earlier            if (isset($GLOBALS['drop_if_exists'])) {                $temp_drop_if_exists = $GLOBALS['drop_if_exists'];            }            $GLOBALS['drop_if_exists'] = 'true';            foreach ($views as $view) {                if (! PMA_Table::moveCopy($db, $view, $newname, $view, 'structure', $move, 'db_copy')) {                    $_error = true;                    break;                }            }            unset($GLOBALS['drop_if_exists']);            if (isset($temp_drop_if_exists)) {                // restore previous value                $GLOBALS['drop_if_exists'] = $temp_drop_if_exists;                unset($temp_drop_if_exists);            }        }        unset($view, $views);        // now that all tables exist, create all the accumulated constraints        if (! $_error && count($GLOBALS['sql_constraints_query_full_db']) > 0) {            PMA_DBI_select_db($newname);            foreach ($GLOBALS['sql_constraints_query_full_db'] as $one_query) {                PMA_DBI_query($one_query);            // and prepare to display them                $GLOBALS['sql_query'] .= "\n" . $one_query;            }            unset($GLOBALS['sql_constraints_query_full_db'], $one_query);        }        if (!PMA_DRIZZLE && PMA_MYSQL_INT_VERSION >= 50100) {            // here DELIMITER is not used because it's not part of the            // language; each statement is sent one by one            // to avoid selecting alternatively the current and new db            // we would need to modify the CREATE definitions to qualify            // the db name            $event_names = PMA_DBI_fetch_result('SELECT EVENT_NAME FROM information_schema.EVENTS WHERE EVENT_SCHEMA= \'' . PMA_sqlAddSlashes($db, true) . '\';');            if ($event_names) {                foreach ($event_names as $event_name) {                    PMA_DBI_select_db($db);                    $tmp_query = PMA_DBI_get_definition($db, 'EVENT', $event_name);                    // collect for later display                    $GLOBALS['sql_query'] .= "\n" . $tmp_query;                    PMA_DBI_select_db($newname);                    PMA_DBI_query($tmp_query);                }            }        }        // go back to current db, just in case        PMA_DBI_select_db($db);        // Duplicate the bookmarks for this db (done once for each db)        if (! $_error && $db != $newname) {            $get_fields = array('user', 'label', 'query');            $where_fields = array('dbase' => $db);            $new_fields = array('dbase' => $newname);            PMA_Table::duplicateInfo('bookmarkwork', 'bookmark', $get_fields,                $where_fields, $new_fields);        }        if (! $_error && $move) {            /**             * cleanup pmadb stuff for this db             */            include_once './libraries/relation_cleanup.lib.php';            PMA_relationsCleanupDatabase($db);            // if someday the RENAME DATABASE reappears, do not DROP            $local_query = 'DROP DATABASE ' . PMA_backquote($db) . ';';            $sql_query .= "\n" . $local_query;            PMA_DBI_query($local_query);            $message = PMA_Message::success(__('Database %s has been renamed to %s'));            $message->addParam($db);            $message->addParam($newname);        } elseif (! $_error) {            $message = PMA_Message::success(__('Database %s has been copied to %s'));            $message->addParam($db);            $message->addParam($newname);        }        $reload     = true;        /* Change database to be used */        if (! $_error && $move) {            $db = $newname;        } elseif (! $_error) {            if (isset($switch_to_new) && $switch_to_new == 'true') {                $GLOBALS['PMA_Config']->setCookie('pma_switch_to_new', 'true');                $db = $newname;            } else {                $GLOBALS['PMA_Config']->setCookie('pma_switch_to_new', '');            }        }        if ($_error && ! isset($message)) {            $message = PMA_Message::error();        }    }    /**     * Database has been successfully renamed/moved.  If in an Ajax request,     * generate the output with {@link PMA_ajaxResponse} and exit     */    if ( $GLOBALS['is_ajax_request'] == true) {        $extra_data['newname'] = $newname;        $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);        PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);    };}/** * Settings for relations stuff */$cfgRelation = PMA_getRelationsParam();/** * Check if comments were updated * (must be done before displaying the menu tabs) */if (isset($_REQUEST['comment'])) {    PMA_setDbComment($db, $comment);}/** * Prepares the tables list if the user where not redirected to this script * because there is no table in the database ($is_info is true) */if (empty($is_info)) {    include './libraries/db_common.inc.php';    $url_query .= '&amp;goto=db_operations.php';    // Gets the database structure    $sub_part = '_structure';    include './libraries/db_info.inc.php';    echo "\n";    if (isset($message)) {        PMA_showMessage($message, $sql_query);        unset($message);    }}$db_collation = PMA_getDbCollation($db);$is_information_schema = PMA_is_system_schema($db);if (!$is_information_schema) {    if ($cfgRelation['commwork']) {        /**         * database comment         */        ?>    <div class="operations_half_width">    <form method="post" action="db_operations.php">    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <fieldset>        <legend>        <?php        if ($cfg['PropertiesIconic']) {            echo '<img class="icon ic_b_comment" src="themes/dot.gif" alt="" />';        }        echo __('Database comment: ');        ?>        </legend>        <input type="text" name="comment" class="textfield" size="30"            value="<?php            echo htmlspecialchars(PMA_getDBComment($db)); ?>" />    </fieldset>    <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div>        <?php    }    ?>    <div class="operations_half_width">    <?php include './libraries/display_create_table.lib.php'; ?>    </div>    <?php    /**     * rename database     */if ($db != 'mysql') {    ?>        <div class="operations_half_width">        <form id="rename_db_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : ''); ?>method="post" action="db_operations.php"        onsubmit="return emptyFormElements(this, 'newname')">        <?php    if (isset($db_collation)) {        echo '<input type="hidden" name="db_collation" value="' . $db_collation            .'" />' . "\n";    }        ?>    <input type="hidden" name="what" value="data" />    <input type="hidden" name="db_rename" value="true" />    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <fieldset>        <legend>    <?php    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Rename database to') . ':';    ?>        </legend>        <input id="new_db_name" type="text" name="newname" size="30" class="textfield" value="" />    </fieldset>    <fieldset class="tblFooters">        <input id="rename_db_input" type="submit" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div><?php} // end if// Drop link if allowed// Don't even try to drop information_schema. You won't be able to. Believe me. You won't.// Don't allow to easily drop mysql database, RFE #1327514.if (($is_superuser || $GLOBALS['cfg']['AllowUserDropDatabase'])        && !$db_is_information_schema        && (PMA_DRIZZLE || $db != 'mysql')) {?><div class="operations_half_width"><fieldset class="caution"> <legend><?phpif ($cfg['PropertiesIconic']) {    echo PMA_getImage('b_deltbl.png');}echo __('Remove database');?></legend><ul><?php    $this_sql_query = 'DROP DATABASE ' . PMA_backquote($GLOBALS['db']);    $this_url_params = array(            'sql_query' => $this_sql_query,            'back' => 'db_operations.php',            'goto' => 'main.php',            'reload' => '1',            'purge' => '1',            'message_to_show' => sprintf(__('Database %s has been dropped.'), htmlspecialchars(PMA_backquote($db))),            'db' => null,        );    ?>        <li><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'id="drop_db_anchor"' : ''); ?>>            <?php echo __('Drop the database (DROP)'); ?></a>        <?php echo PMA_showMySQLDocu('SQL-Syntax', 'DROP_DATABASE'); ?>    </li></ul></fieldset></div><?php } ?>    <?php    /**     * Copy database     */    ?>        <div class="operations_half_width clearfloat">        <form id="copy_db_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : ''); ?>method="post" action="db_operations.php"        onsubmit="return emptyFormElements(this, 'newname')">    <?php    if (isset($db_collation)) {        echo '<input type="hidden" name="db_collation" value="' . $db_collation            .'" />' . "\n";    }    echo '<input type="hidden" name="db_copy" value="true" />' . "\n";    echo PMA_generate_common_hidden_inputs($db);    ?>    <fieldset>        <legend>    <?php    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Copy database to') . ':';    $drop_clause = 'DROP TABLE / DROP VIEW';    ?>        </legend>        <input type="text" name="newname" size="30" class="textfield" value="" /><br /><?php        $choices = array(            'structure' => __('Structure only'),            'data'      => __('Structure and data'),            'dataonly'  => __('Data only'));        PMA_display_html_radio('what', $choices, 'data', true);        unset($choices);?>        <input type="checkbox" name="create_database_before_copying" value="1"            id="checkbox_create_database_before_copying"            checked="checked" />        <label for="checkbox_create_database_before_copying">            <?php echo __('CREATE DATABASE before copying'); ?></label><br />        <input type="checkbox" name="drop_if_exists" value="true"            id="checkbox_drop" />        <label for="checkbox_drop"><?php echo sprintf(__('Add %s'), $drop_clause); ?></label><br />        <input type="checkbox" name="sql_auto_increment" value="1" checked="checked"            id="checkbox_auto_increment" />        <label for="checkbox_auto_increment">            <?php echo __('Add AUTO_INCREMENT value'); ?></label><br />        <input type="checkbox" name="add_constraints" value="1"            id="checkbox_constraints" />        <label for="checkbox_constraints">            <?php echo __('Add constraints'); ?></label><br />    <?php    unset($drop_clause);    if (isset($_COOKIE) && isset($_COOKIE['pma_switch_to_new'])      && $_COOKIE['pma_switch_to_new'] == 'true') {        $pma_switch_to_new = 'true';    }    ?>        <input type="checkbox" name="switch_to_new" value="true"            id="checkbox_switch"            <?php echo ((isset($pma_switch_to_new) && $pma_switch_to_new == 'true') ? ' checked="checked"' : ''); ?>            />        <label for="checkbox_switch"><?php echo __('Switch to copied database'); ?></label>    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="submit_copy" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div>    <?php    /**     * Change database charset     */    echo '<div class="operations_half_width"><form id="change_db_charset_form" ';    if ($GLOBALS['cfg']['AjaxEnable']) {        echo ' class="ajax" ';    }    echo 'method="post" action="./db_operations.php">'       . PMA_generate_common_hidden_inputs($db, $table)       . '<fieldset>' . "\n"       . '    <legend>';    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('s_asci.png');    }    echo '    <label for="select_db_collation">' . __('Collation') . ':</label>' . "\n"       . '    </legend>' . "\n"       . PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION,            'db_collation', 'select_db_collation', $db_collation, false, 3)       . '</fieldset>'       . '<fieldset class="tblFooters">'       . '    <input type="submit" name="submitcollation"'       . ' value="' . __('Go') . '" />' . "\n"       . '</fieldset>' . "\n"       . '</form></div>' . "\n";    if ($num_tables > 0      && ! $cfgRelation['allworks'] && $cfg['PmaNoRelation_DisableWarning'] == false) {        $message = PMA_Message::notice(__('The phpMyAdmin configuration storage has been deactivated. To find out why click %shere%s.'));        $message->addParam('<a href="' . $cfg['PmaAbsoluteUri'] . 'chk_rel.php?' . $url_query . '">', false);        $message->addParam('</a>', false);        /* Show error if user has configured something, notice elsewhere */        if (!empty($cfg['Servers'][$server]['pmadb'])) {            $message->isError(true);        }        echo '<div class="operations_full_width">';        $message->display();        echo '</div>';    } // end if} // end if (!$is_information_schema)// not sure about displaying the PDF dialog in case db is information_schemaif ($cfgRelation['pdfwork'] && $num_tables > 0) { ?>    <!-- Work on PDF Pages -->    <?php    // We only show this if we find something in the new pdf_pages table    $test_query = '         SELECT *           FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages']) . '          WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'';    $test_rs    = PMA_query_as_controluser($test_query, null, PMA_DBI_QUERY_STORE);    /*     * Export Relational Schema View     */    echo '<div class="operations_full_width"><fieldset><a href="schema_edit.php?' . $url_query . '">';    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Edit or export relational schema') . '</a></fieldset></div>';} // end if/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'db_structure.js';$GLOBALS['js_include'][] = 'tbl_change.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'jquery/jquery.sprintf.js';/** * Prepares the tables list if the user where not redirected to this script * because there is no table in the database ($is_info is true) */if (empty($is_info)) {    // Drops/deletes/etc. multiple tables if required    if ((!empty($submit_mult) && isset($selected_tbl))        || isset($mult_btn)    ) {        $action = 'db_structure.php';        $err_url = 'db_structure.php?'. PMA_generate_common_url($db);        // see bug #2794840; in this case, code path is:        // db_structure.php -> libraries/mult_submits.inc.php -> sql.php        // -> db_structure.php and if we got an error on the multi submit,        // we must display it here and not call again mult_submits.inc.php        if (! isset($error) || false === $error) {            include './libraries/mult_submits.inc.php';        }        if (empty($message)) {            $message = PMA_Message::success();        }    }    include './libraries/db_common.inc.php';    $url_query .= '&amp;goto=db_structure.php';    // Gets the database structure    $sub_part = '_structure';    include './libraries/db_info.inc.php';    if (!PMA_DRIZZLE) {        include_once './libraries/replication.inc.php';    } else {        $server_slave_status = false;    }}require_once './libraries/bookmark.lib.php';require_once './libraries/mysql_charsets.lib.php';$db_collation = PMA_getDbCollation($db);// in a separate file to avoid redeclaration of functions in some code pathsrequire_once './libraries/db_structure.lib.php';$titles = PMA_buildActionTitles();// 1. No tablesif ($num_tables == 0) {    echo '<p>' . __('No tables found in database') . '</p>' . "\n";    if (empty($db_is_information_schema)) {        include './libraries/display_create_table.lib.php';    } // end if (Create Table dialog)    /**     * Displays the footer     */    include_once './libraries/footer.inc.php';    exit;}// else// 2. Shows table informations/** * Displays the tables list */echo '<div id="tableslistcontainer">';$_url_params = array(    'pos' => $pos,    'db'  => $db);// Add the sort options if they existsif (isset($_REQUEST['sort'])) {    $_url_params['sort'] = $_REQUEST['sort'];}if (isset($_REQUEST['sort_order'])) {    $_url_params['sort_order'] = $_REQUEST['sort_order'];}PMA_listNavigator(    $total_num_tables, $pos, $_url_params, 'db_structure.php',    'frame_content', $GLOBALS['cfg']['MaxTableList']);?><form method="post" action="db_structure.php" name="tablesForm" id="tablesForm"><?phpecho PMA_generate_common_hidden_inputs($db);PMA_TableHeader($db_is_information_schema, $server_slave_status);$i = $sum_entries = 0;$sum_size       = (double) 0;$overhead_size  = (double) 0;$overhead_check = '';$checked        = !empty($checkall) ? ' checked="checked"' : '';$num_columns    = $cfg['PropertiesNumColumns'] > 1    ? ceil($num_tables / $cfg['PropertiesNumColumns']) + 1    : 0;$row_count      = 0;$hidden_fields = array();$odd_row       = true;$sum_row_count_pre = '';$tableReductionCount = 0;   // the amount to reduce the table count byforeach ($tables as $keyname => $each_table) {    if (PMA_BS_IsHiddenTable($keyname)) {        $tableReductionCount++;        continue;    }    // Get valid statistics whatever is the table type    $table_is_view = false;    $table_encoded = urlencode($each_table['TABLE_NAME']);    // Sets parameters for links    $tbl_url_query = $url_query . '&amp;table=' . $table_encoded;    // do not list the previous table's size info for a view    $formatted_size = '-';    $unit = '';    switch ( $each_table['ENGINE']) {        // MyISAM, ISAM or Heap table: Row count, data size and index size        // are accurate; data size is accurate for ARCHIVE    case 'MyISAM' :    case 'ISAM' :    case 'HEAP' :    case 'MEMORY' :    case 'ARCHIVE' :    case 'Aria' :    case 'Maria' :        if ($db_is_information_schema) {            $each_table['Rows'] = PMA_Table::countRecords(                $db, $each_table['Name']            );        }        if ($is_show_stats) {            $tblsize                    =  doubleval($each_table['Data_length']) + doubleval($each_table['Index_length']);            $sum_size                   += $tblsize;            list($formatted_size, $unit) =  PMA_formatByteDown($tblsize, 3, ($tblsize > 0) ? 1 : 0);            if (isset($each_table['Data_free']) && $each_table['Data_free'] > 0) {                list($formatted_overhead, $overhead_unit)     = PMA_formatByteDown($each_table['Data_free'], 3, ($each_table['Data_free'] > 0) ? 1 : 0);                $overhead_size           += $each_table['Data_free'];            }        }        break;    case 'InnoDB' :    case 'PBMS' :        // InnoDB table: Row count is not accurate but data and index sizes are.        // PBMS table in Drizzle: TABLE_ROWS is taken from table cache, so it may be unavailable        if (($each_table['ENGINE'] == 'InnoDB'            && $each_table['TABLE_ROWS'] < $GLOBALS['cfg']['MaxExactCount'])            || !isset($each_table['TABLE_ROWS'])        ) {            $each_table['COUNTED'] = true;            $each_table['TABLE_ROWS'] = PMA_Table::countRecords(                $db, $each_table['TABLE_NAME'],                $force_exact = true, $is_view = false            );        } else {            $each_table['COUNTED'] = false;        }        // Drizzle doesn't provide data and index length, check for null        if ($is_show_stats && $each_table['Data_length'] !== null) {            $tblsize                    =  $each_table['Data_length'] + $each_table['Index_length'];            $sum_size                   += $tblsize;            list($formatted_size, $unit) =  PMA_formatByteDown($tblsize, 3, ($tblsize > 0) ? 1 : 0);        }        //$display_rows                   =  ' - ';        break;    // Mysql 5.0.x (and lower) uses MRG_MyISAM and MySQL 5.1.x (and higher) uses MRG_MYISAM    // Both are aliases for MERGE    case 'MRG_MyISAM' :    case 'MRG_MYISAM' :    case 'MERGE' :    case 'BerkeleyDB' :        // Merge or BerkleyDB table: Only row count is accurate.        if ($is_show_stats) {            $formatted_size =  ' - ';            $unit          =  '';        }        break;        // for a view, the ENGINE is sometimes reported as null,        // or on some servers it's reported as "SYSTEM VIEW"    case null :    case 'SYSTEM VIEW' :    case 'FunctionEngine' :        // if table is broken, Engine is reported as null, so one more test        if ($each_table['TABLE_TYPE'] == 'VIEW') {            // countRecords() takes care of $cfg['MaxExactCountViews']            $each_table['TABLE_ROWS'] = PMA_Table::countRecords(                $db, $each_table['TABLE_NAME'],                $force_exact = true, $is_view = true            );            $table_is_view = true;        }        break;    default :        // Unknown table type.        if ($is_show_stats) {            $formatted_size =  __('unknown');            $unit          =  '';        }    } // end switch    if (! PMA_Table::isMerge($db, $each_table['TABLE_NAME'])) {        $sum_entries += $each_table['TABLE_ROWS'];    }    if (isset($each_table['Collation'])) {        $collation = '<dfn title="'            . PMA_getCollationDescr($each_table['Collation']) . '">'            . $each_table['Collation'] . '</dfn>';    } else {        $collation = '---';    }    if ($is_show_stats) {        if (isset($formatted_overhead)) {            $overhead = '<a href="tbl_structure.php?'                . $tbl_url_query . '#showusage"><span>' . $formatted_overhead                . '</span> <span class="unit">' . $overhead_unit . '</span></a>' . "\n";            unset($formatted_overhead);            $overhead_check .=                "document.getElementById('checkbox_tbl_" . ($i + 1) . "').checked = true;";        } else {            $overhead = '-';        }    } // end if    $alias = (!empty($tooltip_aliasname) && isset($tooltip_aliasname[$each_table['TABLE_NAME']]))               ? str_replace(' ', '&nbsp;', htmlspecialchars($tooltip_truename[$each_table['TABLE_NAME']]))               : str_replace(' ', '&nbsp;', htmlspecialchars($each_table['TABLE_NAME']));    $truename = (!empty($tooltip_truename) && isset($tooltip_truename[$each_table['TABLE_NAME']]))               ? str_replace(' ', '&nbsp;', htmlspecialchars($tooltip_truename[$each_table['TABLE_NAME']]))               : str_replace(' ', '&nbsp;', htmlspecialchars($each_table['TABLE_NAME']));    $i++;    $row_count++;    if ($table_is_view) {        $hidden_fields[] = '<input type="hidden" name="views[]" value="'            .  htmlspecialchars($each_table['TABLE_NAME']) . '" />';    }    /*     * Always activate links for Browse, Search and Empty, even if     * the icons are greyed, because     * 1. for views, we don't know the number of rows at this point     * 2. for tables, another source could have populated them since the     *    page was generated     *     * I could have used the PHP ternary conditional operator but I find     * the code easier to read without this operator.     */    if ($each_table['TABLE_ROWS'] > 0 || $table_is_view) {        $may_have_rows = true;    } else {        $may_have_rows = false;    }    $browse_table = '<a href="sql.php?' . $tbl_url_query . '&amp;pos=0">';    if ($may_have_rows) {        $browse_table .= $titles['Browse'];    } else {        $browse_table .= $titles['NoBrowse'];    }    $browse_table .= '</a>';    $search_table = '<a href="tbl_select.php?' . $tbl_url_query . '">';    if ($may_have_rows) {        $search_table .= $titles['Search'];    } else {        $search_table .= $titles['NoSearch'];    }    $search_table .= '</a>';    $browse_table_label = '<a href="sql.php?' . $tbl_url_query . '&amp;pos=0">' . $truename . '</a>';    if (! $db_is_information_schema) {        $empty_table = '<a ';        if ($GLOBALS['cfg']['AjaxEnable']) {            $empty_table .= 'class="truncate_table_anchor"';        }        $empty_table .= ' href="sql.php?' . $tbl_url_query             . '&amp;sql_query=';        $empty_table .= urlencode('TRUNCATE ' . PMA_backquote($each_table['TABLE_NAME']))             . '&amp;message_to_show='             . urlencode(sprintf(__('Table %s has been emptied'), htmlspecialchars($each_table['TABLE_NAME'])))             .'">';        if ($may_have_rows) {            $empty_table .= $titles['Empty'];        } else {            $empty_table .= $titles['NoEmpty'];        }        $empty_table .= '</a>';        $drop_query = 'DROP '            . ($table_is_view ? 'VIEW' : 'TABLE')            . ' ' . PMA_backquote($each_table['TABLE_NAME']);        $drop_message = sprintf(            $table_is_view ? __('View %s has been dropped') : __('Table %s has been dropped'),            str_replace(' ', '&nbsp;', htmlspecialchars($each_table['TABLE_NAME']))        );    }    $tracking_icon = '';    if (PMA_Tracker::isActive()) {        if (PMA_Tracker::isTracked($GLOBALS["db"], $truename)) {            $tracking_icon = '<a href="tbl_tracking.php?' . $url_query                . '&amp;table=' . $truename . '">'                . PMA_getImage('eye.png', __('Tracking is active.'))                . '</a>';        } elseif (PMA_Tracker::getVersion($GLOBALS["db"], $truename) > 0) {            $tracking_icon = '<a href="tbl_tracking.php?' . $url_query                . '&amp;table=' . $truename . '">'                . PMA_getImage('eye.png', __('Tracking is not active.'))                . '</a>';        }    }    if ($num_columns > 0        && $num_tables > $num_columns        && ($row_count % $num_columns) == 0    ) {        $row_count = 1;        $odd_row = true;        ?>    </tr></tbody></table>        <?php        PMA_TableHeader(false, $server_slave_status);    }    $ignored = false;    $do = false;    if ($server_slave_status) {        ////////////////////////////////////////////////////////////////        if ((strlen(array_search($truename, $server_slave_Do_Table)) > 0)            || (strlen(array_search($db, $server_slave_Do_DB)) > 0)            || (count($server_slave_Do_DB) == 1 && count($server_slave_Ignore_DB) == 1)        ) {            $do = true;        }        foreach ($server_slave_Wild_Do_Table as $db_table) {            $table_part = PMA_extract_db_or_table($db_table, 'table');            if (($db == PMA_extract_db_or_table($db_table, 'db'))                && (preg_match("@^" . substr($table_part, 0, strlen($table_part) - 1) . "@", $truename))            ) {                $do = true;            }        }        ////////////////////////////////////////////////////////////////////        if ((strlen(array_search($truename, $server_slave_Ignore_Table)) > 0)            || (strlen(array_search($db, $server_slave_Ignore_DB)) > 0)        ) {            $ignored = true;        }        foreach ($server_slave_Wild_Ignore_Table as $db_table) {            $table_part = PMA_extract_db_or_table($db_table, 'table');            if (($db == PMA_extract_db_or_table($db_table))                && (preg_match("@^" . substr($table_part, 0, strlen($table_part) - 1) . "@", $truename))            ) {                $ignored = true;            }        }        unset($table_part);    }    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">    <td align="center">        <input type="checkbox" name="selected_tbl[]"            value="<?php echo htmlspecialchars($each_table['TABLE_NAME']); ?>"            id="checkbox_tbl_<?php echo $i; ?>"<?php echo $checked; ?> /></td>    <th><?php echo $browse_table_label; ?>        <?php echo (! empty($tracking_icon) ? $tracking_icon : ''); ?>    </th>   <?php if ($server_slave_status) { ?><td align="center"><?php        echo $ignored            ? PMA_getImage('s_cancel.png', 'NOT REPLICATED')            : ''.        $do            ? PMA_getImage('s_success.png', 'REPLICATED')            : ''; ?></td><?php } ?>    <td align="center"><?php echo $browse_table; ?></td>    <td align="center">        <a href="tbl_structure.php?<?php echo $tbl_url_query; ?>">            <?php echo $titles['Structure']; ?></a></td>    <td align="center"><?php echo $search_table; ?></td>    <?php if (! $db_is_information_schema) { ?>    <td align="center" class="insert_table">        <a <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="ajax"' : ''); ?> href="tbl_change.php?<?php echo $tbl_url_query; ?>">            <?php echo $titles['Insert']; ?></a></td>    <td align="center"><?php echo $empty_table; ?></td>    <td align="center">    <a <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="drop_table_anchor"' : ''); ?> href="sql.php?<?php echo $tbl_url_query;            ?>&amp;reload=1&amp;purge=1&amp;sql_query=<?php            echo urlencode($drop_query); ?>&amp;message_to_show=<?php            echo urlencode($drop_message); ?>" >            <?php echo $titles['Drop']; ?></a></td>    <?php } // end if (! $db_is_information_schema)    // there is a null value in the ENGINE    // - when the table needs to be repaired, or    // - when it's a view    //  so ensure that we'll display "in use" below for a table    //  that needs to be repaired    if (isset($each_table['TABLE_ROWS']) && ($each_table['ENGINE'] != null || $table_is_view)) {        $row_count_pre = '';        $show_superscript = '';        if ($table_is_view) {            // Drizzle views use FunctionEngine, and the only place where they are available are I_S and D_D            // schemas, where we do exact counting            if ($each_table['TABLE_ROWS'] >= $GLOBALS['cfg']['MaxExactCountViews']                && $each_table['ENGINE'] != 'FunctionEngine'            ) {                $row_count_pre = '~';                $sum_row_count_pre = '~';                $show_superscript = PMA_showHint(                    PMA_sanitize(                        sprintf(                            __('This view has at least this number of rows. Please refer to %sdocumentation%s.'),                            '[a@./Documentation.html#cfg_MaxExactCountViews@_blank]',                            '[/a]'                        )                    )                );            }        } elseif ($each_table['ENGINE'] == 'InnoDB' && (! $each_table['COUNTED'])) {            // InnoDB table: we did not get an accurate row count            $row_count_pre = '~';            $sum_row_count_pre = '~';            $show_superscript = '';        }    ?>    <td class="value tbl_rows"><?php echo $row_count_pre . PMA_formatNumber($each_table['TABLE_ROWS'], 0) . $show_superscript; ?></td>        <?php if (!($cfg['PropertiesNumColumns'] > 1)) { ?>    <td nowrap="nowrap"><?php echo ($table_is_view ? __('View') : $each_table['ENGINE']); ?></td>            <?php if (isset($collation)) { ?>    <td nowrap="nowrap"><?php echo $collation ?></td>            <?php } ?>        <?php } ?>        <?php if ($is_show_stats) { ?>    <td class="value tbl_size"><a        href="tbl_structure.php?<?php echo $tbl_url_query; ?>#showusage"        ><?php echo '<span>' . $formatted_size . '</span> <span class="unit">' . $unit . '</span>'; ?></a></td>    <td class="value tbl_overhead"><?php echo $overhead; ?></td>        <?php } // end if ?>    <?php } elseif ($table_is_view) { ?>    <td class="value">-</td>    <td><?php echo __('View'); ?></td>    <td>---</td>        <?php if ($is_show_stats) { ?>    <td class="value">-</td>    <td class="value">-</td>        <?php } ?>    <?php } else { ?>    <td colspan="<?php echo ($colspan_for_structure - ($db_is_information_schema ? 5 : 8)) ?>"        align="center">        <?php echo __('in use'); ?></td>    <?php } // end if (isset($each_table['TABLE_ROWS'])) else ?></tr>    <?php} // end foreach// Show Summaryif ($is_show_stats) {    list($sum_formatted, $unit) = PMA_formatByteDown($sum_size, 3, 1);    list($overhead_formatted, $overhead_unit)        = PMA_formatByteDown($overhead_size, 3, 1);}?></tbody><tbody id="tbl_summary_row"><tr><th></th>    <th align="center" nowrap="nowrap" class="tbl_num">        <?php            // for blobstreaming - if the number of tables is 0, set tableReductionCount to 0            // (we don't want negative numbers here)            if ($num_tables == 0) {                $tableReductionCount = 0;            }            echo sprintf(                _ngettext('%s table', '%s tables', $num_tables - $tableReductionCount),                PMA_formatNumber($num_tables - $tableReductionCount, 0)            );        ?>    </th>    <?php        if ($server_slave_status) {            echo '    <th>' . __('Replication') . '</th>' . "\n";        }    ?>    <th colspan="<?php echo ($db_is_information_schema ? 3 : 6) ?>" align="center">        <?php echo __('Sum'); ?></th>    <th class="value tbl_rows"><?php echo $sum_row_count_pre . PMA_formatNumber($sum_entries, 0); ?></th><?phpif (!($cfg['PropertiesNumColumns'] > 1)) {    $default_engine = PMA_DBI_fetch_value('SHOW VARIABLES LIKE \'storage_engine\';', 0, 1);    echo '    <th align="center">' . "\n"       . '        <dfn title="'       . sprintf(__('%s is the default storage engine on this MySQL server.'), $default_engine)       . '">' .$default_engine . '</dfn></th>' . "\n";    // we got a case where $db_collation was empty    echo '    <th align="center">' . "\n";    if (! empty($db_collation)) {        echo '        <dfn title="'            . PMA_getCollationDescr($db_collation) . ' (' . __('Default') . ')">' . $db_collation            . '</dfn>';    }    echo '</th>';}if ($is_show_stats) {    ?>    <th class="value tbl_size"><?php echo $sum_formatted . ' ' . $unit; ?></th>    <th class="value tbl_overhead"><?php echo $overhead_formatted . ' ' . $overhead_unit; ?></th>    <?php}?></tr></tbody></table><div class="clearfloat"><?php// Check all tables url$checkall_url = 'db_structure.php?' . PMA_generate_common_url($db);?><img class="selectallarrow" src="<?php echo $pmaThemeImage .'arrow_'.$text_dir.'.png'; ?>"    width="38" height="22" alt="<?php echo __('With selected:'); ?>" /><a href="<?php echo $checkall_url; ?>&amp;checkall=1"    onclick="if (markAllRows('tablesForm')) return false;">    <?php echo __('Check All'); ?></a>/<a href="<?php echo $checkall_url; ?>"    onclick="if (unMarkAllRows('tablesForm')) return false;">    <?php echo __('Uncheck All'); ?></a><?php if ($overhead_check != '') { ?>/<a href="#" onclick="unMarkAllRows('tablesForm');    <?php echo $overhead_check; ?> return false;">    <?php echo __('Check tables having overhead'); ?></a><?php } ?><select name="submit_mult" class="autosubmit" style="margin: 0 3em 0 3em;"><?phpecho '    <option value="' . __('With selected:') . '" selected="selected">'     . __('With selected:') . '</option>' . "\n";echo '    <option value="export" >'     . __('Export') . '</option>' . "\n";echo '    <option value="print" >'    . __('Print view') . '</option>' . "\n";if (!$db_is_information_schema && !$cfg['DisableMultiTableMaintenance']) {    echo '    <option value="empty_tbl" >'         . __('Empty') . '</option>' . "\n";    echo '    <option value="drop_tbl" >'         . __('Drop') . '</option>' . "\n";    echo '    <option value="check_tbl" >'         . __('Check table') . '</option>' . "\n";    if (!PMA_DRIZZLE) {        echo '    <option value="optimize_tbl" >'             . __('Optimize table') . '</option>' . "\n";        echo '    <option value="repair_tbl" >'             . __('Repair table') . '</option>' . "\n";    }    echo '    <option value="analyze_tbl" >'         . __('Analyze table') . '</option>' . "\n";    echo '    <option value="add_prefix_tbl" >'         . __('Add prefix to table') . '</option>' . "\n";    echo '    <option value="replace_prefix_tbl" >'         . __('Replace table prefix') . '</option>' . "\n";    echo '    <option value="copy_tbl_change_prefix" >'         . __('Copy table with prefix') . '</option>' . "\n";}?></select><script type="text/javascript"><!--// Fake js to allow the use of the <noscript> tag//--></script><noscript>    <input type="submit" value="<?php echo __('Go'); ?>" /></noscript><?php echo implode("\n", $hidden_fields) . "\n"; ?></div></form><?php// display again the table list navigatorPMA_listNavigator(    $total_num_tables, $pos, $_url_params, 'db_structure.php',    'frame_content', $GLOBALS['cfg']['MaxTableList']);?></div><hr /><?php/** * Work on the database *//* DATABASE WORK *//* Printable view of a table */echo '<p>';echo '<a href="db_printview.php?' . $url_query . '">';echo PMA_getIcon('b_print.png', __('Print view'), true) . '</a>';echo '<a href="./db_datadict.php?' . $url_query . '">';echo PMA_getIcon('b_tblanalyse.png', __('Data Dictionary'), true) . '</a>';echo '</p>';if (empty($db_is_information_schema)) {    include './libraries/display_create_table.lib.php';} // end if (Create Table dialog)/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Get user's global privileges and some db-specific privileges * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */$GLOBALS['is_superuser']       = PMA_isSuperuser();/** * sets privilege information extracted from SHOW GRANTS result * * Detection for some CREATE privilege. * * Since MySQL 4.1.2, we can easily detect current user's grants using $userlink * (no control user needed) and we don't have to try any other method for * detection * * @todo fix to get really all privileges, not only explicitly defined for this user * from MySQL manual: (http://dev.mysql.com/doc/refman/5.0/en/show-grants.html) * SHOW GRANTS displays only the privileges granted explicitly to the named * account. Other privileges might be available to the account, but they are not * displayed. For example, if an anonymous account exists, the named account * might be able to use its privileges, but SHOW GRANTS will not display them. * */function PMA_analyseShowGrant(){    if (PMA_cacheExists('is_create_db_priv', true)) {        $GLOBALS['is_create_db_priv']  = PMA_cacheGet('is_create_db_priv', true);        $GLOBALS['is_process_priv']    = PMA_cacheGet('is_process_priv', true);        $GLOBALS['is_reload_priv']     = PMA_cacheGet('is_reload_priv', true);        $GLOBALS['db_to_create']       = PMA_cacheGet('db_to_create', true);        $GLOBALS['dbs_where_create_table_allowed']            = PMA_cacheGet('dbs_where_create_table_allowed', true);        return;    }    // defaults    $GLOBALS['is_create_db_priv']  = false;    $GLOBALS['is_process_priv']    = true;    $GLOBALS['is_reload_priv']     = false;    $GLOBALS['db_to_create']       = '';    $GLOBALS['dbs_where_create_table_allowed'] = array();    $rs_usr = PMA_DBI_try_query('SHOW GRANTS');    if (! $rs_usr) {        return;    }    $re0 = '(^|(\\\\\\\\)+|[^\\\\])'; // non-escaped wildcards    $re1 = '(^|[^\\\\])(\\\)+'; // escaped wildcards    while ($row = PMA_DBI_fetch_row($rs_usr)) {        // extract db from GRANT ... ON *.* or GRANT ... ON db.*        $db_name_offset = strpos($row[0], ' ON ') + 4;        $show_grants_dbname = substr($row[0],            $db_name_offset,            strpos($row[0], '.', $db_name_offset) - $db_name_offset);        $show_grants_dbname = PMA_unQuote($show_grants_dbname, '`');        $show_grants_str    = substr($row[0], 6, (strpos($row[0], ' ON ') - 6));        if ($show_grants_str == 'RELOAD') {            $GLOBALS['is_reload_priv'] = true;        }        /**         * @todo if we find CREATE VIEW but not CREATE, do not offer         * the create database dialog box         */        if ($show_grants_str == 'ALL'         || $show_grants_str == 'ALL PRIVILEGES'         || $show_grants_str == 'CREATE'         || strpos($show_grants_str, 'CREATE,') !== false) {            if ($show_grants_dbname == '*') {                // a global CREATE privilege                $GLOBALS['is_create_db_priv'] = true;                $GLOBALS['is_reload_priv'] = true;                $GLOBALS['db_to_create']   = '';                $GLOBALS['dbs_where_create_table_allowed'][] = '*';                // @todo we should not break here, cause GRANT ALL *.*                // could be revoked by a later rule like GRANT SELECT ON db.*                break;            } else {                // this array may contain wildcards                $GLOBALS['dbs_where_create_table_allowed'][] = $show_grants_dbname;                $dbname_to_test = PMA_backquote($show_grants_dbname);                if ($GLOBALS['is_create_db_priv']) {                    // no need for any more tests if we already know this                    continue;                }                if ((preg_match('/' . $re0 . '%|_/', $show_grants_dbname)                  && ! preg_match('/\\\\%|\\\\_/', $show_grants_dbname))                 // does this db exist?                 || (! PMA_DBI_try_query('USE ' .  preg_replace('/' . $re1 . '(%|_)/', '\\1\\3', $dbname_to_test))                  && substr(PMA_DBI_getError(), 1, 4) != 1044)                ) {                    if ($GLOBALS['cfg']['SuggestDBName']) {                        /**                         * Do not handle the underscore wildcard                          * (this case must be rare anyway)                         */                        $GLOBALS['db_to_create'] = preg_replace('/' . $re0 . '%/',     '\\1...', $show_grants_dbname);                        $GLOBALS['db_to_create'] = preg_replace('/' . $re1 . '(%|_)/', '\\1\\3', $GLOBALS['db_to_create']);                    }                    $GLOBALS['is_create_db_priv'] = true;                    /**                     * @todo collect $GLOBALS['db_to_create'] into an array, to display a                     * drop-down in the "Create database" dialog                     */                     // we don't break, we want all possible databases                     //break;                } // end if            } // end elseif        } // end if    } // end while    PMA_DBI_free_result($rs_usr);    // must also PMA_cacheUnset() them in libraries/auth/cookie.auth.lib.php    PMA_cacheSet('is_create_db_priv', $GLOBALS['is_create_db_priv'], true);    PMA_cacheSet('is_process_priv', $GLOBALS['is_process_priv'], true);    PMA_cacheSet('is_reload_priv', $GLOBALS['is_reload_priv'], true);    PMA_cacheSet('db_to_create', $GLOBALS['db_to_create'], true);    PMA_cacheSet('dbs_where_create_table_allowed', $GLOBALS['dbs_where_create_table_allowed'], true);} // end functionif (!PMA_DRIZZLE) {    PMA_analyseShowGrant();} else {    // todo: for simple_user_policy only database with user's login can be created (unless logged in as root)    $GLOBALS['is_create_db_priv'] = $GLOBALS['is_superuser'];    $GLOBALS['is_process_priv']   = false;    $GLOBALS['is_reload_priv']    = false;    $GLOBALS['db_to_create']      = '';    $GLOBALS['dbs_where_create_table_allowed'] = array('*');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * display selection for relational field values * * @package PhpMyAdmin *//** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';PMA_checkParameters(array('db', 'table', 'field'));require_once './libraries/ob.lib.php';PMA_outBufferPre();require_once './libraries/header_http.inc.php';/** * Displays the frame */require_once './libraries/transformations.lib.php'; // Transformations$cfgRelation = PMA_getRelationsParam();$foreigners  = ($cfgRelation['relwork'] ? PMA_getForeigners($db, $table) : false);$override_total = true;if (! isset($pos)) {    $pos = 0;}$foreign_limit = 'LIMIT ' . $pos . ', ' . $GLOBALS['cfg']['MaxRows'] . ' ';if (isset($foreign_navig) && $foreign_navig == __('Show all')) {    unset($foreign_limit);}$foreignData = PMA_getForeignData($foreigners, $field, $override_total, isset($foreign_filter) ? $foreign_filter : '', $foreign_limit);if (isset($rownumber)) {    $rownumber_param = '&amp;rownumber=' . urlencode($rownumber);} else {    $rownumber_param = '';}$gotopage = '';$showall = '';if (is_array($foreignData['disp_row'])) {    if ($cfg['ShowAll'] && ($foreignData['the_total'] > $GLOBALS['cfg']['MaxRows'])) {        $showall = '<input type="submit" name="foreign_navig" value="' . __('Show all') . '" />';    }    $session_max_rows = $GLOBALS['cfg']['MaxRows'];    $pageNow = @floor($pos / $session_max_rows) + 1;    $nbTotalPage = @ceil($foreignData['the_total'] / $session_max_rows);    if ($foreignData['the_total'] > $GLOBALS['cfg']['MaxRows']) {        $gotopage = PMA_pageselector(            $session_max_rows,            $pageNow,            $nbTotalPage,            200,            5,            5,            20,            10,            __('Page number:')            );    }}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"    xml:lang="<?php echo $available_languages[$lang][1]; ?>"    lang="<?php echo $available_languages[$lang][1]; ?>"    dir="<?php echo $text_dir; ?>"><head>    <title>phpMyAdmin</title>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <link rel="stylesheet" type="text/css"        href="phpmyadmin.css.php?<?php echo PMA_generate_common_url('', ''); ?>&amp;js_frame=right&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" /><?php// includes everything asked for by libraries/common.inc.phprequire_once './libraries/header_scripts.inc.php';?>    <script type="text/javascript">    //<![CDATA[    self.focus();    function formupdate(fieldmd5, key) {        var $inline = window.opener.jQuery('.browse_foreign_clicked');        if ($inline.length != 0) {            $inline.removeClass('browse_foreign_clicked')                // for grid editing,                // puts new value in the previous element which is                // a span with class curr_value                .prev('.curr_value').text(key);            // for zoom-search editing, puts new value in the previous            // element which is an input field            $inline.prev('input[type=text]').val(key);            self.close();            return false;        }        if (opener && opener.document && opener.document.insertForm) {            var field = 'fields';            var field_null = 'fields_null';            <?php if (isset($rownumber)) { ?>            var element_name = field + '[multi_edit][<?php echo htmlspecialchars($rownumber); ?>][' + fieldmd5 + ']';            var null_name = field_null + '[multi_edit][<?php echo htmlspecialchars($rownumber); ?>][' + fieldmd5 + ']';            <?php } else { ?>            var element_name = field + '[]';            <?php } ?>            <?php if (isset($fieldkey) && is_numeric($fieldkey)) { ?>            var element_name_alt = field + '[<?php echo $fieldkey; ?>]';            <?php } else { ?>            var element_name_alt = field + '[0]';            <?php } ?>            if (opener.document.insertForm.elements[element_name]) {                // Edit/Insert form                opener.document.insertForm.elements[element_name].value = key;                if (opener.document.insertForm.elements[null_name]) {                    opener.document.insertForm.elements[null_name].checked = false;                }                self.close();                return false;            } else if (opener.document.insertForm.elements[element_name_alt]) {                // Search form                opener.document.insertForm.elements[element_name_alt].value = key;                self.close();                return false;            }        }        alert('<?php echo PMA_jsFormat(__('The target browser window could not be updated. Maybe you have closed the parent window, or your browser\'s security settings are configured to block cross-window updates.')); ?>');    }    //]]>    </script></head><body id="body_browse_foreigners"><form action="browse_foreigners.php" method="post"><fieldset><?php echo PMA_generate_common_hidden_inputs($db, $table); ?><input type="hidden" name="field" value="<?php echo htmlspecialchars($field); ?>" /><input type="hidden" name="fieldkey"    value="<?php echo isset($fieldkey) ? htmlspecialchars($fieldkey) : ''; ?>" /><?php if (isset($rownumber)) { ?><input type="hidden" name="rownumber" value="<?php echo htmlspecialchars($rownumber); ?>" /><?php } ?><span class="formelement">    <label for="input_foreign_filter"><?php echo __('Search') . ':'; ?></label>    <input type="text" name="foreign_filter" id="input_foreign_filter"        value="<?php echo isset($foreign_filter) ? htmlspecialchars($foreign_filter) : ''; ?>" />    <input type="submit" name="submit_foreign_filter" value="<?php echo __('Go');?>" /></span><span class="formelement">    <?php echo $gotopage; ?></span><span class="formelement">    <?php echo $showall; ?></span></fieldset></form><table width="100%"><?phpif (is_array($foreignData['disp_row'])) {    $header = '<tr>        <th>' . __('Keyname') . '</th>        <th>' . __('Description') . '</th>        <td width="20%"></td>        <th>' . __('Description') . '</th>        <th>' . __('Keyname') . '</th>    </tr>';    echo '<thead>' . $header . '</thead>' . "\n"        .'<tfoot>' . $header . '</tfoot>' . "\n"        .'<tbody>' . "\n";    $values = array();    $keys   = array();    foreach ($foreignData['disp_row'] as $relrow) {        if ($foreignData['foreign_display'] != false) {            $values[] = $relrow[$foreignData['foreign_display']];        } else {            $values[] = '';        }        $keys[] = $relrow[$foreignData['foreign_field']];    }    asort($keys);    $hcount = 0;    $odd_row = true;    $val_ordered_current_row = 0;    $val_ordered_current_equals_data = false;    $key_ordered_current_equals_data = false;    foreach ($keys as $key_ordered_current_row => $value) {    //for ($i = 0; $i < $count; $i++) {        $hcount++;        if ($cfg['RepeatCells'] > 0 && $hcount > $cfg['RepeatCells']) {            echo $header;            $hcount = 0;            $odd_row = true;        }        $key_ordered_current_key = $keys[$key_ordered_current_row];        $key_ordered_current_val = $values[$key_ordered_current_row];        $val_ordered_current_key = $keys[$val_ordered_current_row];        $val_ordered_current_val = $values[$val_ordered_current_row];        $val_ordered_current_row++;        if (PMA_strlen($val_ordered_current_val) <= $cfg['LimitChars']) {            $val_ordered_current_val = htmlspecialchars($val_ordered_current_val);            $val_ordered_current_val_title = '';        } else {            $val_ordered_current_val_title                = htmlspecialchars($val_ordered_current_val);            $val_ordered_current_val = htmlspecialchars(                PMA_substr($val_ordered_current_val, 0, $cfg['LimitChars'])                . '...'            );        }        if (PMA_strlen($key_ordered_current_val) <= $cfg['LimitChars']) {            $key_ordered_current_val = htmlspecialchars($key_ordered_current_val);            $key_ordered_current_val_title = '';        } else {            $key_ordered_current_val_title                = htmlspecialchars($key_ordered_current_val);            $key_ordered_current_val                = htmlspecialchars(                    PMA_substr($key_ordered_current_val, 0, $cfg['LimitChars']) . '...'                );        }        if (! empty($data)) {            $val_ordered_current_equals_data = $val_ordered_current_key == $data;            $key_ordered_current_equals_data = $key_ordered_current_key == $data;        }        ?>    <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">        <td nowrap="nowrap">        <?php        echo ($key_ordered_current_equals_data ? '<strong>' : '')            .'<a href="#" title="' . __('Use this value')            . ($key_ordered_current_val_title != '' ? ': ' . $key_ordered_current_val_title : '') . '"'            .' onclick="formupdate(\'' . md5($field) . '\', \''            . PMA_jsFormat($key_ordered_current_key, false) . '\'); return false;">'            .htmlspecialchars($key_ordered_current_key) . '</a>' . ($key_ordered_current_equals_data ? '</strong>' : '');        ?></td>        <td>        <?php        echo ($key_ordered_current_equals_data ? '<strong>' : '')            . '<a href="#" title="' . __('Use this value') . ($key_ordered_current_val_title != '' ? ': '            . $key_ordered_current_val_title : '') . '" onclick="formupdate(\''            . md5($field) . '\', \'' . PMA_jsFormat($key_ordered_current_key, false) . '\'); return false;">'            . $key_ordered_current_val . '</a>' . ($key_ordered_current_equals_data ? '</strong>' : '');        ?></td>        <td width="20%">            <img src="<?php echo $GLOBALS['pmaThemeImage'] . 'spacer.png'; ?>"                alt="" width="1" height="1" /></td>        <td>        <?php        echo ($val_ordered_current_equals_data ? '<strong>' : '')            . '<a href="#" title="' . __('Use this value') .  ($val_ordered_current_val_title != '' ? ': '            . $val_ordered_current_val_title : '') . '" onclick="formupdate(\'' . md5($field)            . '\', \'' . PMA_jsFormat($val_ordered_current_key, false) . '\'); return false;">'            . $val_ordered_current_val . '</a>' . ($val_ordered_current_equals_data ? '</strong>' : '');        ?></td>        <td nowrap="nowrap">        <?php        echo ($val_ordered_current_equals_data ? '<strong>' : '') . '<a href="#" title="'        . __('Use this value') .  ($val_ordered_current_val_title != '' ? ': ' . $val_ordered_current_val_title : '')        . '" onclick="formupdate(\'' . md5($field) . '\', \''        . PMA_jsFormat($val_ordered_current_key, false) . '\'); return false;">' . htmlspecialchars($val_ordered_current_key)        . '</a>' . ($val_ordered_current_equals_data ? '</strong>' : '');        ?></td>    </tr>        <?php    } // end while}?></tbody></table></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for creating database (if user has privileges for that) * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/check_user_privileges.lib.php';if ($is_create_db_priv) {    // The user is allowed to create a db    ?>        <form method="post" action="db_create.php" id="create_database_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="ajax" ' : ''); ?>><strong>            <?php echo '<label for="text_create_db">' . __('Create database') . '</label>&nbsp;' . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_DATABASE'); ?></strong><br />            <?php echo PMA_generate_common_hidden_inputs('', '', 5); ?>            <input type="hidden" name="reload" value="1" />            <input type="text" name="new_db" value="<?php echo $db_to_create; ?>" maxlength="64" class="textfield" id="text_create_db"/>    <?php    include_once './libraries/mysql_charsets.lib.php';    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION, 'db_collation', null, null, true, 5);    if (! empty($dbstats)) {        echo '<input type="hidden" name="dbstats" value="1" />';    }    ?>            <input type="submit" value="<?php echo __('Create'); ?>" id="buttonGo" />        </form>    <?php} else {    ?>    <!-- db creation no privileges message -->        <strong><?php echo __('Create database') . ':&nbsp;' . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_DATABASE'); ?></strong><br />        <?php              echo '<span class="noPrivileges">'                 . ($cfg['ErrorIconic'] ? PMA_getImage('s_error2.png', '', array('hspace' => 2, 'border' => 0, 'align' => 'middle')) : '')                 . '' . __('No Privileges') .'</span>';} // end create db form or message?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common Option Constants For DBI Functions * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Force STORE_RESULT method, ignored by classic MySQL. */define('PMA_DBI_QUERY_STORE',       1);/** * Do not read whole query. */define('PMA_DBI_QUERY_UNBUFFERED',  2);/** * Get session variable. */define('PMA_DBI_GETVAR_SESSION',    1);/** * Get global variable. */define('PMA_DBI_GETVAR_GLOBAL',     2);/** * Checks whether database extension is loaded * * @param string $extension mysql extension to check * * @return bool */function PMA_DBI_checkDbExtension($extension = 'mysql'){    if ($extension == 'drizzle' && function_exists('drizzle_create')) {        return true;    } else if (function_exists($extension . '_connect')) {        return true;    }    return false;}/** * check for requested extension */if (! PMA_DBI_checkDbExtension($GLOBALS['cfg']['Server']['extension'])) {    // if it fails try alternative extension ...    // and display an error ...    /**     * @todo add different messages for alternative extension     * and complete fail (no alternative extension too)     */    PMA_warnMissingExtension(        $GLOBALS['cfg']['Server']['extension'],        false,        PMA_showDocu('faqmysql')    );    if ($GLOBALS['cfg']['Server']['extension'] === 'mysql') {        $alternativ_extension = 'mysqli';    } else {        $alternativ_extension = 'mysql';    }    if (! PMA_DBI_checkDbExtension($alternativ_extension)) {        // if alternative fails too ...        PMA_warnMissingExtension(            $GLOBALS['cfg']['Server']['extension'],            true,            PMA_showDocu('faqmysql')        );    }    $GLOBALS['cfg']['Server']['extension'] = $alternativ_extension;    unset($alternativ_extension);}/** * Including The DBI Plugin */require_once './libraries/dbi/'    . $GLOBALS['cfg']['Server']['extension'] . '.dbi.lib.php';/** * runs a query * * @param string $query               SQL query to execte * @param mixed  $link                optional database link to use * @param int    $options             optional query options * @param bool   $cache_affected_rows whether to cache affected rows * * @return mixed */function PMA_DBI_query($query, $link = null, $options = 0, $cache_affected_rows = true){    $res = PMA_DBI_try_query($query, $link, $options, $cache_affected_rows)        or PMA_mysqlDie(PMA_DBI_getError($link), $query);    return $res;}/** * runs a query and returns the result * * @param string   $query               query to run * @param resource $link                mysql link resource * @param integer  $options             query options * @param bool     $cache_affected_rows whether to cache affected row * * @return mixed */function PMA_DBI_try_query($query, $link = null, $options = 0, $cache_affected_rows = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($GLOBALS['cfg']['DBG']['sql']) {        $time = microtime(true);    }    $r = PMA_DBI_real_query($query, $link, $options);    if ($cache_affected_rows) {        $GLOBALS['cached_affected_rows'] = PMA_DBI_affected_rows($link, $get_from_cache = false);    }    if ($GLOBALS['cfg']['DBG']['sql']) {        $time = microtime(true) - $time;        $hash = md5($query);        if (isset($_SESSION['debug']['queries'][$hash])) {            $_SESSION['debug']['queries'][$hash]['count']++;        } else {            $_SESSION['debug']['queries'][$hash] = array();            if ($r == false) {                $_SESSION['debug']['queries'][$hash]['error'] = '<b style="color:red">'.mysqli_error($link).'</b>';            }            $_SESSION['debug']['queries'][$hash]['count'] = 1;            $_SESSION['debug']['queries'][$hash]['query'] = $query;            $_SESSION['debug']['queries'][$hash]['time'] = $time;        }        $trace = array();        foreach (debug_backtrace() as $trace_step) {            $trace[] = PMA_Error::relPath($trace_step['file']) . '#'                . $trace_step['line'] . ': '                . (isset($trace_step['class']) ? $trace_step['class'] : '')                //. (isset($trace_step['object']) ? get_class($trace_step['object']) : '')                . (isset($trace_step['type']) ? $trace_step['type'] : '')                . (isset($trace_step['function']) ? $trace_step['function'] : '')                . '('                . (isset($trace_step['params']) ? implode(', ', $trace_step['params']) : '')                . ')'                ;        }        $_SESSION['debug']['queries'][$hash]['trace'][] = $trace;    }    if ($r != false && PMA_Tracker::isActive() == true ) {        PMA_Tracker::handleQuery($query);    }    return $r;}/** * converts charset of a mysql message, usually coming from mysql_error(), * into PMA charset, usally UTF-8 * uses language to charset mapping from mysql/share/errmsg.txt * and charset names to ISO charset from information_schema.CHARACTER_SETS * * @param string $message the message * * @return  string  $message */function PMA_DBI_convert_message($message){    // latin always last!    $encodings = array(        'japanese'      => 'EUC-JP', //'ujis',        'japanese-sjis' => 'Shift-JIS', //'sjis',        'korean'        => 'EUC-KR', //'euckr',        'russian'       => 'KOI8-R', //'koi8r',        'ukrainian'     => 'KOI8-U', //'koi8u',        'greek'         => 'ISO-8859-7', //'greek',        'serbian'       => 'CP1250', //'cp1250',        'estonian'      => 'ISO-8859-13', //'latin7',        'slovak'        => 'ISO-8859-2', //'latin2',        'czech'         => 'ISO-8859-2', //'latin2',        'hungarian'     => 'ISO-8859-2', //'latin2',        'polish'        => 'ISO-8859-2', //'latin2',        'romanian'      => 'ISO-8859-2', //'latin2',        'spanish'       => 'CP1252', //'latin1',        'swedish'       => 'CP1252', //'latin1',        'italian'       => 'CP1252', //'latin1',        'norwegian-ny'  => 'CP1252', //'latin1',        'norwegian'     => 'CP1252', //'latin1',        'portuguese'    => 'CP1252', //'latin1',        'danish'        => 'CP1252', //'latin1',        'dutch'         => 'CP1252', //'latin1',        'english'       => 'CP1252', //'latin1',        'french'        => 'CP1252', //'latin1',        'german'        => 'CP1252', //'latin1',    );    if ($server_language = PMA_DBI_fetch_value('SHOW VARIABLES LIKE \'language\';', 0, 1)) {        $found = array();        if (preg_match('&(?:\\\|\\/)([^\\\\\/]*)(?:\\\|\\/)$&i', $server_language, $found)) {            $server_language = $found[1];        }    }    if (! empty($server_language) && isset($encodings[$server_language])) {        if (function_exists('iconv')) {            if ((@stristr(PHP_OS, 'AIX'))                && (@strcasecmp(ICONV_IMPL, 'unknown') == 0)                && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)            ) {                include_once './libraries/iconv_wrapper.lib.php';                $message = PMA_aix_iconv_wrapper(                    $encodings[$server_language],                    'utf-8' . $GLOBALS['cfg']['IconvExtraParams'],                    $message                );            } else {                $message = iconv(                    $encodings[$server_language],                    'utf-8' . $GLOBALS['cfg']['IconvExtraParams'],                    $message                );            }        } elseif (function_exists('recode_string')) {            $message = recode_string(                $encodings[$server_language] . '..'  . 'utf-8',                $message            );        } elseif (function_exists('libiconv')) {            $message = libiconv($encodings[$server_language], 'utf-8', $message);        } elseif (function_exists('mb_convert_encoding')) {            // do not try unsupported charsets            if (! in_array($server_language, array('ukrainian', 'greek', 'serbian'))) {                $message = mb_convert_encoding(                    $message,                    'utf-8',                    $encodings[$server_language]                );            }        }    } else {        /**         * @todo lang not found, try all, what TODO ?         */    }    return $message;}/** * returns array with table names for given db * * @param string $database name of database * @param mixed  $link     mysql link resource|object * * @return  array   tables names */function PMA_DBI_get_tables($database, $link = null){    return PMA_DBI_fetch_result(        'SHOW TABLES FROM ' . PMA_backquote($database) . ';',        null,        0,        $link,        PMA_DBI_QUERY_STORE    );}/** * usort comparison callback * * @param string $a first argument to sort * @param string $b second argument to sort * * @return  integer  a value representing whether $a should be before $b in the *                   sorted array or not * * @access  private */function PMA_usort_comparison_callback($a, $b){    if ($GLOBALS['cfg']['NaturalOrder']) {        $sorter = 'strnatcasecmp';    } else {        $sorter = 'strcasecmp';    }    /* No sorting when key is not present */    if (! isset($a[$GLOBALS['callback_sort_by']]) || ! isset($b[$GLOBALS['callback_sort_by']])) {        return 0;    }    // produces f.e.:    // return -1 * strnatcasecmp($a["SCHEMA_TABLES"], $b["SCHEMA_TABLES"])    return ($GLOBALS['callback_sort_order'] == 'ASC' ? 1 : -1) * $sorter($a[$GLOBALS['callback_sort_by']], $b[$GLOBALS['callback_sort_by']]);} // end of the 'PMA_usort_comparison_callback()' function/** * returns array of all tables in given db or dbs * this function expects unquoted names: * RIGHT: my_database * WRONG: `my_database` * WRONG: my\_database * if $tbl_is_group is true, $table is used as filter for table names * if $tbl_is_group is 'comment, $table is used as filter for table comments * * <code> * PMA_DBI_get_tables_full('my_database'); * PMA_DBI_get_tables_full('my_database', 'my_table')); * PMA_DBI_get_tables_full('my_database', 'my_tables_', true)); * PMA_DBI_get_tables_full('my_database', 'my_tables_', 'comment')); * </code> * * @param string          $database     database * @param string|bool     $table        table or false * @param boolean|string  $tbl_is_group $table is a table group * @param mixed           $link         mysql link * @param integer         $limit_offset zero-based offset for the count * @param boolean|integer $limit_count  number of tables to return * @param string          $sort_by      table attribute to sort by * @param string          $sort_order   direction to sort (ASC or DESC) * * @todo    move into PMA_Table * * @return  array           list of tables in given db(s) */function PMA_DBI_get_tables_full($database, $table = false, $tbl_is_group = false, $link = null,     $limit_offset = 0, $limit_count = false, $sort_by = 'Name', $sort_order = 'ASC'){    if (true === $limit_count) {        $limit_count = $GLOBALS['cfg']['MaxTableList'];    }    // prepare and check parameters    if (! is_array($database)) {        $databases = array($database);    } else {        $databases = $database;    }    $tables = array();    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        // get table information from information_schema        if ($table) {            if (true === $tbl_is_group) {                $sql_where_table = 'AND t.`TABLE_NAME` LIKE \''                  . PMA_escape_mysql_wildcards(PMA_sqlAddSlashes($table)) . '%\'';            } elseif ('comment' === $tbl_is_group) {                $sql_where_table = 'AND t.`TABLE_COMMENT` LIKE \''                  . PMA_escape_mysql_wildcards(PMA_sqlAddSlashes($table)) . '%\'';            } else {                $sql_where_table = 'AND t.`TABLE_NAME` = \'' . PMA_sqlAddSlashes($table) . '\'';            }        } else {            $sql_where_table = '';        }        // for PMA bc:        // `SCHEMA_FIELD_NAME` AS `SHOW_TABLE_STATUS_FIELD_NAME`        //        // on non-Windows servers,        // added BINARY in the WHERE clause to force a case sensitive        // comparison (if we are looking for the db Aa we don't want        // to find the db aa)        $this_databases = array_map('PMA_sqlAddSlashes', $databases);        if (PMA_DRIZZLE) {            $engine_info = PMA_cacheGet('drizzle_engines', true);            $stats_join = "LEFT JOIN (SELECT 0 NUM_ROWS) AS stat ON false";            if (isset($engine_info['InnoDB'])                && $engine_info['InnoDB']['module_library'] == 'innobase'            ) {                $stats_join = "LEFT JOIN data_dictionary.INNODB_SYS_TABLESTATS stat ON (t.ENGINE = 'InnoDB' AND stat.NAME = (t.TABLE_SCHEMA || '/') || t.TABLE_NAME)";            }            // data_dictionary.table_cache may not contain any data for some tables, it's just a table cache            // auto_increment == 0 is cast to NULL because currently (2011.03.13 GA) Drizzle doesn't provide correct value            $sql = "                SELECT t.*,                    t.TABLE_SCHEMA        AS `Db`,                    t.TABLE_NAME          AS `Name`,                    t.TABLE_TYPE          AS `TABLE_TYPE`,                    t.ENGINE              AS `Engine`,                    t.ENGINE              AS `Type`,                    t.TABLE_VERSION       AS `Version`,-- VERSION                    t.ROW_FORMAT          AS `Row_format`,                    coalesce(tc.ROWS, stat.NUM_ROWS)                                          AS `Rows`,-- TABLE_ROWS,                    coalesce(tc.ROWS, stat.NUM_ROWS)                                          AS `TABLE_ROWS`,                    tc.AVG_ROW_LENGTH     AS `Avg_row_length`, -- AVG_ROW_LENGTH                    tc.TABLE_SIZE         AS `Data_length`, -- DATA_LENGTH                    NULL                  AS `Max_data_length`, -- MAX_DATA_LENGTH                    NULL                  AS `Index_length`, -- INDEX_LENGTH                    NULL                  AS `Data_free`, -- DATA_FREE                    nullif(t.AUTO_INCREMENT, 0)                                          AS `Auto_increment`,                    t.TABLE_CREATION_TIME AS `Create_time`, -- CREATE_TIME                    t.TABLE_UPDATE_TIME   AS `Update_time`, -- UPDATE_TIME                    NULL                  AS `Check_time`, -- CHECK_TIME                    t.TABLE_COLLATION     AS `Collation`,                    NULL                  AS `Checksum`, -- CHECKSUM                    NULL                  AS `Create_options`, -- CREATE_OPTIONS                    t.TABLE_COMMENT       AS `Comment`                FROM data_dictionary.TABLES t                    LEFT JOIN data_dictionary.TABLE_CACHE tc ON tc.TABLE_SCHEMA = t.TABLE_SCHEMA AND tc.TABLE_NAME = t.TABLE_NAME                    $stats_join                WHERE t.TABLE_SCHEMA IN ('" . implode("', '", $this_databases) . "')                    " . $sql_where_table;        } else {            $sql = '                SELECT *,                    `TABLE_SCHEMA`       AS `Db`,                    `TABLE_NAME`         AS `Name`,                    `TABLE_TYPE`         AS `TABLE_TYPE`,                    `ENGINE`             AS `Engine`,                    `ENGINE`             AS `Type`,                    `VERSION`            AS `Version`,                    `ROW_FORMAT`         AS `Row_format`,                    `TABLE_ROWS`         AS `Rows`,                    `AVG_ROW_LENGTH`     AS `Avg_row_length`,                    `DATA_LENGTH`        AS `Data_length`,                    `MAX_DATA_LENGTH`    AS `Max_data_length`,                    `INDEX_LENGTH`       AS `Index_length`,                    `DATA_FREE`          AS `Data_free`,                    `AUTO_INCREMENT`     AS `Auto_increment`,                    `CREATE_TIME`        AS `Create_time`,                    `UPDATE_TIME`        AS `Update_time`,                    `CHECK_TIME`         AS `Check_time`,                    `TABLE_COLLATION`    AS `Collation`,                    `CHECKSUM`           AS `Checksum`,                    `CREATE_OPTIONS`     AS `Create_options`,                    `TABLE_COMMENT`      AS `Comment`                FROM `information_schema`.`TABLES` t                WHERE ' . (PMA_IS_WINDOWS ? '' : 'BINARY') . ' `TABLE_SCHEMA` IN (\'' . implode("', '", $this_databases) . '\')                    ' . $sql_where_table;        }        // Sort the tables        $sql .= " ORDER BY $sort_by $sort_order";        if ($limit_count) {            $sql .= ' LIMIT ' . $limit_count . ' OFFSET ' . $limit_offset;        }        $tables = PMA_DBI_fetch_result(            $sql, array('TABLE_SCHEMA', 'TABLE_NAME'), null, $link        );        unset($sql_where_table, $sql);        if (PMA_DRIZZLE) {            // correct I_S and D_D names returned by D_D.TABLES - Drizzle generally uses lower case for them,            // but TABLES returns uppercase            foreach ((array)$database as $db) {                $db_upper = strtoupper($db);                if (!isset($tables[$db]) && isset($tables[$db_upper])) {                    $tables[$db] = $tables[$db_upper];                    unset($tables[$db_upper]);                }            }        }        if ($sort_by == 'Name' && $GLOBALS['cfg']['NaturalOrder']) {            // here, the array's first key is by schema name            foreach ($tables as $one_database_name => $one_database_tables) {                uksort($one_database_tables, 'strnatcasecmp');                if ($sort_order == 'DESC') {                    $one_database_tables = array_reverse($one_database_tables);                }                $tables[$one_database_name] = $one_database_tables;            }        }    } // end (get information from table schema)    // If permissions are wrong on even one database directory,    // information_schema does not return any table info for any database    // this is why we fall back to SHOW TABLE STATUS even for MySQL >= 50002    if (empty($tables) && !PMA_DRIZZLE) {        foreach ($databases as $each_database) {            if ($table || (true === $tbl_is_group)) {                $sql = 'SHOW TABLE STATUS FROM '                    . PMA_backquote($each_database)                    .' LIKE \'' . PMA_escape_mysql_wildcards(PMA_sqlAddSlashes($table, true)) . '%\'';            } else {                $sql = 'SHOW TABLE STATUS FROM '                    . PMA_backquote($each_database);            }            $each_tables = PMA_DBI_fetch_result($sql, 'Name', null, $link);            // Sort naturally if the config allows it and we're sorting            // the Name column.            if ($sort_by == 'Name' && $GLOBALS['cfg']['NaturalOrder']) {                uksort($each_tables, 'strnatcasecmp');                if ($sort_order == 'DESC') {                    $each_tables = array_reverse($each_tables);                }            } else {                // Prepare to sort by creating array of the selected sort                // value to pass to array_multisort                // Size = Data_length + Index_length                if ($sort_by == 'Data_length') {                    foreach ($each_tables as $table_name => $table_data) {                        ${$sort_by}[$table_name] = strtolower($table_data['Data_length'] + $table_data['Index_length']);                    }                } else {                    foreach ($each_tables as $table_name => $table_data) {                        ${$sort_by}[$table_name] = strtolower($table_data[$sort_by]);                    }                }                if ($sort_order == 'DESC') {                    array_multisort($$sort_by, SORT_DESC, $each_tables);                } else {                    array_multisort($$sort_by, SORT_ASC, $each_tables);                }                // cleanup the temporary sort array                unset($$sort_by);            }            if ($limit_count) {                $each_tables = array_slice($each_tables, $limit_offset, $limit_count);            }            foreach ($each_tables as $table_name => $each_table) {                if ('comment' === $tbl_is_group                    && 0 === strpos($each_table['Comment'], $table)                ) {                    // remove table from list                    unset($each_tables[$table_name]);                    continue;                }                if (! isset($each_tables[$table_name]['Type'])                    && isset($each_tables[$table_name]['Engine'])                ) {                    // pma BC, same parts of PMA still uses 'Type'                    $each_tables[$table_name]['Type']                        =& $each_tables[$table_name]['Engine'];                } elseif (! isset($each_tables[$table_name]['Engine'])                        && isset($each_tables[$table_name]['Type'])) {                    // old MySQL reports Type, newer MySQL reports Engine                    $each_tables[$table_name]['Engine']                        =& $each_tables[$table_name]['Type'];                }                // MySQL forward compatibility                // so pma could use this array as if every server is of version >5.0                $each_tables[$table_name]['TABLE_SCHEMA']      = $each_database;                $each_tables[$table_name]['TABLE_NAME']        =& $each_tables[$table_name]['Name'];                $each_tables[$table_name]['ENGINE']            =& $each_tables[$table_name]['Engine'];                $each_tables[$table_name]['VERSION']           =& $each_tables[$table_name]['Version'];                $each_tables[$table_name]['ROW_FORMAT']        =& $each_tables[$table_name]['Row_format'];                $each_tables[$table_name]['TABLE_ROWS']        =& $each_tables[$table_name]['Rows'];                $each_tables[$table_name]['AVG_ROW_LENGTH']    =& $each_tables[$table_name]['Avg_row_length'];                $each_tables[$table_name]['DATA_LENGTH']       =& $each_tables[$table_name]['Data_length'];                $each_tables[$table_name]['MAX_DATA_LENGTH']   =& $each_tables[$table_name]['Max_data_length'];                $each_tables[$table_name]['INDEX_LENGTH']      =& $each_tables[$table_name]['Index_length'];                $each_tables[$table_name]['DATA_FREE']         =& $each_tables[$table_name]['Data_free'];                $each_tables[$table_name]['AUTO_INCREMENT']    =& $each_tables[$table_name]['Auto_increment'];                $each_tables[$table_name]['CREATE_TIME']       =& $each_tables[$table_name]['Create_time'];                $each_tables[$table_name]['UPDATE_TIME']       =& $each_tables[$table_name]['Update_time'];                $each_tables[$table_name]['CHECK_TIME']        =& $each_tables[$table_name]['Check_time'];                $each_tables[$table_name]['TABLE_COLLATION']   =& $each_tables[$table_name]['Collation'];                $each_tables[$table_name]['CHECKSUM']          =& $each_tables[$table_name]['Checksum'];                $each_tables[$table_name]['CREATE_OPTIONS']    =& $each_tables[$table_name]['Create_options'];                $each_tables[$table_name]['TABLE_COMMENT']     =& $each_tables[$table_name]['Comment'];                if (strtoupper($each_tables[$table_name]['Comment']) === 'VIEW'                    && $each_tables[$table_name]['Engine'] == null                ) {                    $each_tables[$table_name]['TABLE_TYPE'] = 'VIEW';                } else {                    /**                     * @todo difference between 'TEMPORARY' and 'BASE TABLE' but how to detect?                     */                    $each_tables[$table_name]['TABLE_TYPE'] = 'BASE TABLE';                }            }            $tables[$each_database] = $each_tables;        }    }    // cache table data    // so PMA_Table does not require to issue SHOW TABLE STATUS again    // Note: I don't see why we would need array_merge_recursive() here,    // as it creates double entries for the same table (for example a double    // entry for Comment when changing the storage engine in Operations)    // Note 2: Instead of array_merge(), simply use the + operator because    //  array_merge() renumbers numeric keys starting with 0, therefore    //  we would lose a db name thats consists only of numbers    foreach ($tables as $one_database => $its_tables) {        if (isset(PMA_Table::$cache[$one_database])) {            PMA_Table::$cache[$one_database] = PMA_Table::$cache[$one_database] + $tables[$one_database];        } else {            PMA_Table::$cache[$one_database] = $tables[$one_database];        }    }    unset($one_database, $its_tables);    if (! is_array($database)) {        if (isset($tables[$database])) {            return $tables[$database];        } elseif (isset($tables[strtolower($database)])) {            // on windows with lower_case_table_names = 1            // MySQL returns            // with SHOW DATABASES or information_schema.SCHEMATA: `Test`            // but information_schema.TABLES gives `test`            // bug #1436171            // http://sf.net/support/tracker.php?aid=1436171            return $tables[strtolower($database)];        } else {            // one database but inexact letter case match            // as Drizzle is always case insensitive, we can safely return the only result            if (PMA_DRIZZLE && count($tables) == 1) {                $keys = array_keys($tables);                if (strlen(array_pop($keys)) == strlen($database)) {                    return array_pop($tables);                }            }            return $tables;        }    } else {        return $tables;    }}/** * returns array with databases containing extended infos about them * * @param string   $database     database * @param boolean  $force_stats  retrieve stats also for MySQL < 5 * @param resource $link         mysql link * @param string   $sort_by      column to order by * @param string   $sort_order   ASC or DESC * @param integer  $limit_offset starting offset for LIMIT * @param bool|int $limit_count  row count for LIMIT or true for $GLOBALS['cfg']['MaxDbList'] * * @todo    move into PMA_List_Database? * * @return array $databases */function PMA_DBI_get_databases_full($database = null, $force_stats = false,    $link = null, $sort_by = 'SCHEMA_NAME', $sort_order = 'ASC',    $limit_offset = 0, $limit_count = false){    $sort_order = strtoupper($sort_order);    if (true === $limit_count) {        $limit_count = $GLOBALS['cfg']['MaxDbList'];    }    // initialize to avoid errors when there are no databases    $databases = array();    $apply_limit_and_order_manual = true;    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        /**         * if $GLOBALS['cfg']['NaturalOrder'] is enabled, we cannot use LIMIT         * cause MySQL does not support natural ordering, we have to do it afterward         */        $limit = '';        if (!$GLOBALS['cfg']['NaturalOrder']) {            if ($limit_count) {                $limit = ' LIMIT ' . $limit_count . ' OFFSET ' . $limit_offset;            }            $apply_limit_and_order_manual = false;        }        // get table information from information_schema        if ($database) {            $sql_where_schema = 'WHERE `SCHEMA_NAME` LIKE \''                . PMA_sqlAddSlashes($database) . '\'';        } else {            $sql_where_schema = '';        }        if (PMA_DRIZZLE) {            // data_dictionary.table_cache may not contain any data for some            // tables, it's just a table cache            $sql = 'SELECT                s.SCHEMA_NAME,                s.DEFAULT_COLLATION_NAME';            if ($force_stats) {                // no TABLE_CACHE data, stable results are better than                // constantly changing                $sql .= ',                    COUNT(t.TABLE_SCHEMA) AS SCHEMA_TABLES,                    SUM(stat.NUM_ROWS)    AS SCHEMA_TABLE_ROWS';            }            $sql .= '                   FROM data_dictionary.SCHEMAS s';            if ($force_stats) {                $engine_info = PMA_cacheGet('drizzle_engines', true);                $stats_join = "LEFT JOIN (SELECT 0 NUM_ROWS) AS stat ON false";                if (isset($engine_info['InnoDB']) && $engine_info['InnoDB']['module_library'] == 'innobase') {                    $stats_join = "LEFT JOIN data_dictionary.INNODB_SYS_TABLESTATS stat ON (t.ENGINE = 'InnoDB' AND stat.NAME = (t.TABLE_SCHEMA || '/') || t.TABLE_NAME)";                }                $sql .= "                    LEFT JOIN data_dictionary.TABLES t                        ON t.TABLE_SCHEMA = s.SCHEMA_NAME                    $stats_join";            }            $sql .= $sql_where_schema . '                    GROUP BY s.SCHEMA_NAME                    ORDER BY ' . PMA_backquote($sort_by) . ' ' . $sort_order                . $limit;        } else {            $sql = 'SELECT                s.SCHEMA_NAME,                s.DEFAULT_COLLATION_NAME';            if ($force_stats) {                $sql .= ',                    COUNT(t.TABLE_SCHEMA)  AS SCHEMA_TABLES,                    SUM(t.TABLE_ROWS)      AS SCHEMA_TABLE_ROWS,                    SUM(t.DATA_LENGTH)     AS SCHEMA_DATA_LENGTH,                    SUM(t.MAX_DATA_LENGTH) AS SCHEMA_MAX_DATA_LENGTH,                    SUM(t.INDEX_LENGTH)    AS SCHEMA_INDEX_LENGTH,                    SUM(t.DATA_LENGTH + t.INDEX_LENGTH)                                           AS SCHEMA_LENGTH,                    SUM(t.DATA_FREE)       AS SCHEMA_DATA_FREE';            }            $sql .= '                   FROM `information_schema`.SCHEMATA s';            if ($force_stats) {                $sql .= '                    LEFT JOIN `information_schema`.TABLES t                        ON BINARY t.TABLE_SCHEMA = BINARY s.SCHEMA_NAME';            }            $sql .= $sql_where_schema . '                    GROUP BY BINARY s.SCHEMA_NAME                    ORDER BY BINARY ' . PMA_backquote($sort_by) . ' ' . $sort_order                . $limit;        }        $databases = PMA_DBI_fetch_result($sql, 'SCHEMA_NAME', null, $link);        $mysql_error = PMA_DBI_getError($link);        if (! count($databases) && $GLOBALS['errno']) {            PMA_mysqlDie($mysql_error, $sql);        }        // display only databases also in official database list        // f.e. to apply hide_db and only_db        $drops = array_diff(array_keys($databases), (array) $GLOBALS['pma']->databases);        if (count($drops)) {            foreach ($drops as $drop) {                unset($databases[$drop]);            }            unset($drop);        }        unset($sql_where_schema, $sql, $drops);    } else {        foreach ($GLOBALS['pma']->databases as $database_name) {            // MySQL forward compatibility            // so pma could use this array as if every server is of version >5.0            $databases[$database_name]['SCHEMA_NAME']      = $database_name;            if ($force_stats) {                include_once './libraries/mysql_charsets.lib.php';                $databases[$database_name]['DEFAULT_COLLATION_NAME']                    = PMA_getDbCollation($database_name);                // get additional info about tables                $databases[$database_name]['SCHEMA_TABLES']          = 0;                $databases[$database_name]['SCHEMA_TABLE_ROWS']      = 0;                $databases[$database_name]['SCHEMA_DATA_LENGTH']     = 0;                $databases[$database_name]['SCHEMA_MAX_DATA_LENGTH'] = 0;                $databases[$database_name]['SCHEMA_INDEX_LENGTH']    = 0;                $databases[$database_name]['SCHEMA_LENGTH']          = 0;                $databases[$database_name]['SCHEMA_DATA_FREE']       = 0;                $res = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($database_name) . ';');                while ($row = PMA_DBI_fetch_assoc($res)) {                    $databases[$database_name]['SCHEMA_TABLES']++;                    $databases[$database_name]['SCHEMA_TABLE_ROWS']                        += $row['Rows'];                    $databases[$database_name]['SCHEMA_DATA_LENGTH']                        += $row['Data_length'];                    $databases[$database_name]['SCHEMA_MAX_DATA_LENGTH']                        += $row['Max_data_length'];                    $databases[$database_name]['SCHEMA_INDEX_LENGTH']                        += $row['Index_length'];                    // for InnoDB, this does not contain the number of                    // overhead bytes but the total free space                    if ('InnoDB' != $row['Engine']) {                        $databases[$database_name]['SCHEMA_DATA_FREE']                            += $row['Data_free'];                    }                    $databases[$database_name]['SCHEMA_LENGTH']                        += $row['Data_length'] + $row['Index_length'];                }                PMA_DBI_free_result($res);                unset($res);            }        }    }    /**     * apply limit and order manually now     * (caused by older MySQL < 5 or $GLOBALS['cfg']['NaturalOrder'])     */    if ($apply_limit_and_order_manual) {        $GLOBALS['callback_sort_order'] = $sort_order;        $GLOBALS['callback_sort_by'] = $sort_by;        usort($databases, 'PMA_usort_comparison_callback');        unset($GLOBALS['callback_sort_order'], $GLOBALS['callback_sort_by']);        /**         * now apply limit         */        if ($limit_count) {            $databases = array_slice($databases, $limit_offset, $limit_count);        }    }    return $databases;}/** * returns detailed array with all columns for given table in database, * or all tables/databases * * @param string $database name of database * @param string $table    name of table to retrieve columns from * @param string $column   name of specific column * @param mixed  $link     mysql link resource * * @return array */function PMA_DBI_get_columns_full($database = null, $table = null,    $column = null, $link = null){    $columns = array();    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        $sql_wheres = array();        $array_keys = array();        // get columns information from information_schema        if (null !== $database) {            $sql_wheres[] = '`TABLE_SCHEMA` = \'' . PMA_sqlAddSlashes($database) . '\' ';        } else {            $array_keys[] = 'TABLE_SCHEMA';        }        if (null !== $table) {            $sql_wheres[] = '`TABLE_NAME` = \'' . PMA_sqlAddSlashes($table) . '\' ';        } else {            $array_keys[] = 'TABLE_NAME';        }        if (null !== $column) {            $sql_wheres[] = '`COLUMN_NAME` = \'' . PMA_sqlAddSlashes($column) . '\' ';        } else {            $array_keys[] = 'COLUMN_NAME';        }        // for PMA bc:        // `[SCHEMA_FIELD_NAME]` AS `[SHOW_FULL_COLUMNS_FIELD_NAME]`        if (PMA_DRIZZLE) {            $sql = "SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME,                column_name        AS `Field`,                (CASE                    WHEN character_maximum_length > 0                        THEN concat(lower(data_type), '(', character_maximum_length, ')')                    WHEN numeric_precision > 0 OR numeric_scale > 0                        THEN concat(lower(data_type), '(', numeric_precision, ',', numeric_scale, ')')                    WHEN enum_values IS NOT NULL                        THEN concat(lower(data_type), '(', enum_values, ')')                    ELSE lower(data_type) END)                                   AS `Type`,                collation_name     AS `Collation`,                (CASE is_nullable                    WHEN 1 THEN 'YES'                    ELSE 'NO' END) AS `Null`,                (CASE                    WHEN is_used_in_primary THEN 'PRI'                    ELSE '' END)   AS `Key`,                column_default     AS `Default`,                (CASE                    WHEN is_auto_increment THEN 'auto_increment'                    WHEN column_default_update THEN 'on update ' || column_default_update                    ELSE '' END)   AS `Extra`,                NULL               AS `Privileges`,                column_comment     AS `Comment`            FROM data_dictionary.columns";        } else {            $sql = '                 SELECT *,                        `COLUMN_NAME`       AS `Field`,                        `COLUMN_TYPE`       AS `Type`,                        `COLLATION_NAME`    AS `Collation`,                        `IS_NULLABLE`       AS `Null`,                        `COLUMN_KEY`        AS `Key`,                        `COLUMN_DEFAULT`    AS `Default`,                        `EXTRA`             AS `Extra`,                        `PRIVILEGES`        AS `Privileges`,                        `COLUMN_COMMENT`    AS `Comment`                   FROM `information_schema`.`COLUMNS`';        }        if (count($sql_wheres)) {            $sql .= "\n" . ' WHERE ' . implode(' AND ', $sql_wheres);        }        $columns = PMA_DBI_fetch_result($sql, $array_keys, null, $link);        unset($sql_wheres, $sql);    } else {        if (null === $database) {            foreach ($GLOBALS['pma']->databases as $database) {                $columns[$database] = PMA_DBI_get_columns_full(                    $database, null, null, $link                );            }            return $columns;        } elseif (null === $table) {            $tables = PMA_DBI_get_tables($database);            foreach ($tables as $table) {                $columns[$table] = PMA_DBI_get_columns_full(                    $database, $table, null, $link                );            }            return $columns;        }        $sql = 'SHOW FULL COLUMNS FROM '            . PMA_backquote($database) . '.' . PMA_backquote($table);        if (null !== $column) {            $sql .= " LIKE '" . PMA_sqlAddSlashes($column, true) . "'";        }        $columns = PMA_DBI_fetch_result($sql, 'Field', null, $link);    }    $ordinal_position = 1;    foreach ($columns as $column_name => $each_column) {        // MySQL forward compatibility        // so pma could use this array as if every server is of version >5.0        $columns[$column_name]['COLUMN_NAME'] =& $columns[$column_name]['Field'];        $columns[$column_name]['COLUMN_TYPE'] =& $columns[$column_name]['Type'];        $columns[$column_name]['COLLATION_NAME'] =& $columns[$column_name]['Collation'];        $columns[$column_name]['IS_NULLABLE'] =& $columns[$column_name]['Null'];        $columns[$column_name]['COLUMN_KEY'] =& $columns[$column_name]['Key'];        $columns[$column_name]['COLUMN_DEFAULT'] =& $columns[$column_name]['Default'];        $columns[$column_name]['EXTRA'] =& $columns[$column_name]['Extra'];        $columns[$column_name]['PRIVILEGES'] =& $columns[$column_name]['Privileges'];        $columns[$column_name]['COLUMN_COMMENT'] =& $columns[$column_name]['Comment'];        $columns[$column_name]['TABLE_CATALOG'] = null;        $columns[$column_name]['TABLE_SCHEMA'] = $database;        $columns[$column_name]['TABLE_NAME'] = $table;        $columns[$column_name]['ORDINAL_POSITION'] = $ordinal_position;        $columns[$column_name]['DATA_TYPE']            = substr(                $columns[$column_name]['COLUMN_TYPE'],                0,                strpos($columns[$column_name]['COLUMN_TYPE'], '(')            );        /**         * @todo guess CHARACTER_MAXIMUM_LENGTH from COLUMN_TYPE         */        $columns[$column_name]['CHARACTER_MAXIMUM_LENGTH'] = null;        /**         * @todo guess CHARACTER_OCTET_LENGTH from CHARACTER_MAXIMUM_LENGTH         */        $columns[$column_name]['CHARACTER_OCTET_LENGTH'] = null;        $columns[$column_name]['NUMERIC_PRECISION'] = null;        $columns[$column_name]['NUMERIC_SCALE'] = null;        $columns[$column_name]['CHARACTER_SET_NAME']            = substr(                $columns[$column_name]['COLLATION_NAME'],                0,                strpos($columns[$column_name]['COLLATION_NAME'], '_')            );        $ordinal_position++;    }    if (null !== $column) {        reset($columns);        $columns = current($columns);    }    return $columns;}/** * Returns SQL query for fetching columns for a table * * The 'Key' column is not calculated properly, use PMA_DBI_get_columns() to get * correct values. * * @param string  $database name of database * @param string  $table    name of table to retrieve columns from * @param string  $column   name of column, null to show all columns * @param boolean $full     whether to return full info or only column names * * @see PMA_DBI_get_columns() * * @return  string */function PMA_DBI_get_columns_sql($database, $table, $column = null, $full = false){    if (PMA_DRIZZLE) {        // `Key` column:        // * used in primary key => PRI        // * unique one-column => UNI        // * indexed, one-column or first in multi-column => MUL        // Promotion of UNI to PRI in case no promary index exists is done after query is executed        $sql = "SELECT                column_name        AS `Field`,                (CASE                    WHEN character_maximum_length > 0                        THEN concat(lower(data_type), '(', character_maximum_length, ')')                    WHEN numeric_precision > 0 OR numeric_scale > 0                        THEN concat(lower(data_type), '(', numeric_precision, ',', numeric_scale, ')')                    WHEN enum_values IS NOT NULL                        THEN concat(lower(data_type), '(', enum_values, ')')                    ELSE lower(data_type) END)                                   AS `Type`,                " . ($full ? "                collation_name     AS `Collation`," : '') . "                (CASE is_nullable                    WHEN 1 THEN 'YES'                    ELSE 'NO' END) AS `Null`,                (CASE                    WHEN is_used_in_primary THEN 'PRI'                    WHEN is_unique AND NOT is_multi THEN 'UNI'                    WHEN is_indexed AND (NOT is_multi OR is_first_in_multi) THEN 'MUL'                    ELSE '' END)   AS `Key`,                column_default     AS `Default`,                (CASE                    WHEN is_auto_increment THEN 'auto_increment'                    WHEN column_default_update <> '' THEN 'on update ' || column_default_update                    ELSE '' END)   AS `Extra`                " . ($full ? " ,                NULL               AS `Privileges`,                column_comment     AS `Comment`" : '') . "            FROM data_dictionary.columns            WHERE table_schema = '" . PMA_sqlAddSlashes($database) . "'                AND table_name = '" . PMA_sqlAddSlashes($table) . "'                " . (($column != null) ? "                AND column_name = '" . PMA_sqlAddSlashes($column) . "'" : '');        // ORDER BY ordinal_position    } else {        $sql = 'SHOW ' . ($full ? 'FULL' : '') . ' COLUMNS            FROM ' . PMA_backquote($database) . '.' . PMA_backquote($table)            . (($column != null) ? "LIKE '" . PMA_sqlAddSlashes($column, true) . "'" : '');    }    return $sql;}/** * Returns descriptions of columns in given table (all or given by $column) * * @param string  $database name of database * @param string  $table    name of table to retrieve columns from * @param string  $column   name of column, null to show all columns * @param boolean $full     whether to return full info or only column names * @param mixed   $link     mysql link resource * * @return  false|array   array indexed by column names or, *                        if $column is given, flat array description */function PMA_DBI_get_columns($database, $table, $column = null, $full = false, $link = null){    $sql = PMA_DBI_get_columns_sql($database, $table, $column, $full);    $fields = PMA_DBI_fetch_result($sql, 'Field', null, $link);    if (! is_array($fields) || count($fields) == 0) {        return null;    }    if (PMA_DRIZZLE) {        // fix Key column, it's much simpler in PHP than in SQL        $has_pk = false;        $has_pk_candidates = false;        foreach ($fields as $f) {            if ($f['Key'] == 'PRI') {                $has_pk = true;                break;            } else if ($f['Null'] == 'NO' && ($f['Key'] == 'MUL' || $f['Key'] == 'UNI')) {                $has_pk_candidates = true;            }        }        if (!$has_pk && $has_pk_candidates) {            // check whether we can promote some unique index to PRI            $sql = "                SELECT i.index_name, p.column_name                FROM data_dictionary.indexes i                    JOIN data_dictionary.index_parts p USING (table_schema, table_name)                WHERE i.table_schema = '" . PMA_sqlAddSlashes($database) . "'                    AND i.table_name = '" . PMA_sqlAddSlashes($table) . "'                    AND i.is_unique                        AND NOT i.is_nullable";            $fs = PMA_DBI_fetch_result($sql, 'index_name', null, $link);            $fs = $fs ? array_shift($fs) : array();            foreach ($fs as $f) {                $fields[$f]['Key'] = 'PRI';            }        }    }    return ($column != null) ? array_shift($fields) : $fields;}/*** Returns SQL for fetching information on table indexes (SHOW INDEXES)** @param string $database name of database* @param string $table    name of the table whose indexes are to be retreived* @param string $where    additional conditions for WHERE** @return   array   $indexes*/function PMA_DBI_get_table_indexes_sql($database, $table, $where = null){    if (PMA_DRIZZLE) {        $sql = "SELECT                ip.table_name          AS `Table`,                (NOT ip.is_unique)     AS Non_unique,                ip.index_name          AS Key_name,                ip.sequence_in_index+1 AS Seq_in_index,                ip.column_name         AS Column_name,                (CASE                    WHEN i.index_type = 'BTREE' THEN 'A'                    ELSE NULL END)     AS Collation,                NULL                   AS Cardinality,                compare_length         AS Sub_part,                NULL                   AS Packed,                ip.is_nullable         AS `Null`,                i.index_type           AS Index_type,                NULL                   AS Comment,                i.index_comment        AS Index_comment            FROM data_dictionary.index_parts ip                LEFT JOIN data_dictionary.indexes i USING (table_schema, table_name, index_name)            WHERE table_schema = '" . PMA_sqlAddSlashes($database) . "'                AND table_name = '" . PMA_sqlAddSlashes($table) . "'        ";    } else {        $sql = 'SHOW INDEXES FROM ' . PMA_backquote($database) . '.' . PMA_backquote($table);    }    if ($where) {        $sql .= (PMA_DRIZZLE ? ' AND (' : ' WHERE (') . $where . ')';    }    return $sql;}/*** Returns indexes of a table** @param string $database name of database* @param string $table    name of the table whose indexes are to be retrieved* @param mixed  $link     mysql link resource** @return   array   $indexes*/function PMA_DBI_get_table_indexes($database, $table, $link = null){    $sql = PMA_DBI_get_table_indexes_sql($database, $table);    $indexes = PMA_DBI_fetch_result($sql, null, null, $link);    if (! is_array($indexes) || count($indexes) < 1) {        return array();    }    return $indexes;}/** * returns value of given mysql server variable * * @param string $var  mysql server variable name * @param int    $type PMA_DBI_GETVAR_SESSION|PMA_DBI_GETVAR_GLOBAL * @param mixed  $link mysql link resource|object * * @return  mixed   value for mysql server variable */function PMA_DBI_get_variable($var, $type = PMA_DBI_GETVAR_SESSION, $link = null){    if ($link === null) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    switch ($type) {    case PMA_DBI_GETVAR_SESSION:        $modifier = ' SESSION';        break;    case PMA_DBI_GETVAR_GLOBAL:        $modifier = ' GLOBAL';        break;    default:        $modifier = '';    }    return PMA_DBI_fetch_value(        'SHOW' . $modifier . ' VARIABLES LIKE \'' . $var . '\';', 0, 1, $link    );}/** * Function called just after a connection to the MySQL database server has * been established. It sets the connection collation, and determins the * version of MySQL which is running. * * @param mixed   $link           mysql link resource|object * @param boolean $is_controluser whether link is for control user */function PMA_DBI_postConnect($link, $is_controluser = false){    if (! defined('PMA_MYSQL_INT_VERSION')) {        if (PMA_cacheExists('PMA_MYSQL_INT_VERSION', true)) {            define(                'PMA_MYSQL_INT_VERSION',                PMA_cacheGet('PMA_MYSQL_INT_VERSION', true)            );            define(                'PMA_MYSQL_MAJOR_VERSION',                PMA_cacheGet('PMA_MYSQL_MAJOR_VERSION', true)            );            define(                'PMA_MYSQL_STR_VERSION',                PMA_cacheGet('PMA_MYSQL_STR_VERSION', true)            );            define(                'PMA_MYSQL_VERSION_COMMENT',                PMA_cacheGet('PMA_MYSQL_VERSION_COMMENT', true)            );        } else {            $version = PMA_DBI_fetch_single_row(                'SELECT @@version, @@version_comment',                'ASSOC',                $link            );            if ($version) {                $match = explode('.', $version['@@version']);                define('PMA_MYSQL_MAJOR_VERSION', (int)$match[0]);                define(                    'PMA_MYSQL_INT_VERSION',                    (int) sprintf('%d%02d%02d', $match[0], $match[1], intval($match[2]))                );                define('PMA_MYSQL_STR_VERSION', $version['@@version']);                define('PMA_MYSQL_VERSION_COMMENT', $version['@@version_comment']);            } else {                define('PMA_MYSQL_INT_VERSION', 50015);                define('PMA_MYSQL_MAJOR_VERSION', 5);                define('PMA_MYSQL_STR_VERSION', '5.00.15');                define('PMA_MYSQL_VERSION_COMMENT', '');            }            PMA_cacheSet(                'PMA_MYSQL_INT_VERSION',                PMA_MYSQL_INT_VERSION,                true            );            PMA_cacheSet(                'PMA_MYSQL_MAJOR_VERSION',                PMA_MYSQL_MAJOR_VERSION,                true            );            PMA_cacheSet(                'PMA_MYSQL_STR_VERSION',                PMA_MYSQL_STR_VERSION,                true            );            PMA_cacheSet(                'PMA_MYSQL_VERSION_COMMENT',                PMA_MYSQL_VERSION_COMMENT,                true            );        }        // detect Drizzle by version number:        // <year>.<month>.<build number>(.<patch rev)        define('PMA_DRIZZLE', PMA_MYSQL_MAJOR_VERSION >= 2009);    }    // Skip charsets for Drizzle    if (!PMA_DRIZZLE) {        if (! empty($GLOBALS['collation_connection'])) {            PMA_DBI_query("SET CHARACTER SET 'utf8';", $link, PMA_DBI_QUERY_STORE);            PMA_DBI_query(                "SET collation_connection = '" . PMA_sqlAddSlashes($GLOBALS['collation_connection']) . "';",                $link,                PMA_DBI_QUERY_STORE            );        } else {            PMA_DBI_query(                "SET NAMES 'utf8' COLLATE 'utf8_general_ci';",                $link,                PMA_DBI_QUERY_STORE            );        }    }    // Cache plugin list for Drizzle    if (PMA_DRIZZLE && !PMA_cacheExists('drizzle_engines', true)) {        $sql = "SELECT p.plugin_name, m.module_library            FROM data_dictionary.plugins p                JOIN data_dictionary.modules m USING (module_name)            WHERE p.plugin_type = 'StorageEngine'                AND p.plugin_name NOT IN ('FunctionEngine', 'schema')                AND p.is_active = 'YES'";        $engines = PMA_DBI_fetch_result($sql, 'plugin_name', null, $link);        PMA_cacheSet('drizzle_engines', $engines, true);    }}/** * returns a single value from the given result or query, * if the query or the result has more than one row or field * the first field of the first row is returned * * <code> * $sql = 'SELECT `name` FROM `user` WHERE `id` = 123'; * $user_name = PMA_DBI_fetch_value($sql); * // produces * // $user_name = 'John Doe' * </code> * * @param string|mysql_result $result     query or mysql result * @param integer             $row_number row to fetch the value from, *                                        starting at 0, with 0 beeing default * @param integer|string      $field      field to fetch the value from, *                                        starting at 0, with 0 beeing default * @param resource            $link       mysql link * * @return mixed value of first field in first row from result *               or false if not found */function PMA_DBI_fetch_value($result, $row_number = 0, $field = 0, $link = null){    $value = false;    if (is_string($result)) {        $result = PMA_DBI_try_query($result, $link, PMA_DBI_QUERY_STORE, false);    }    // return false if result is empty or false    // or requested row is larger than rows in result    if (PMA_DBI_num_rows($result) < ($row_number + 1)) {        return $value;    }    // if $field is an integer use non associative mysql fetch function    if (is_int($field)) {        $fetch_function = 'PMA_DBI_fetch_row';    } else {        $fetch_function = 'PMA_DBI_fetch_assoc';    }    // get requested row    for ($i = 0; $i <= $row_number; $i++) {        $row = $fetch_function($result);    }    PMA_DBI_free_result($result);    // return requested field    if (isset($row[$field])) {        $value = $row[$field];    }    unset($row);    return $value;}/** * returns only the first row from the result * * <code> * $sql = 'SELECT * FROM `user` WHERE `id` = 123'; * $user = PMA_DBI_fetch_single_row($sql); * // produces * // $user = array('id' => 123, 'name' => 'John Doe') * </code> * * @param string|mysql_result $result query or mysql result * @param string              $type   NUM|ASSOC|BOTH *                                    returned array should either numeric *                                    associativ or booth * @param resource            $link   mysql link * * @return array|boolean first row from result *                       or false if result is empty */function PMA_DBI_fetch_single_row($result, $type = 'ASSOC', $link = null){    if (is_string($result)) {        $result = PMA_DBI_try_query($result, $link, PMA_DBI_QUERY_STORE, false);    }    // return null if result is empty or false    if (! PMA_DBI_num_rows($result)) {        return false;    }    switch ($type) {    case 'NUM' :        $fetch_function = 'PMA_DBI_fetch_row';        break;    case 'ASSOC' :        $fetch_function = 'PMA_DBI_fetch_assoc';        break;    case 'BOTH' :    default :        $fetch_function = 'PMA_DBI_fetch_array';        break;    }    $row = $fetch_function($result);    PMA_DBI_free_result($result);    return $row;}/** * returns all rows in the resultset in one array * * <code> * $sql = 'SELECT * FROM `user`'; * $users = PMA_DBI_fetch_result($sql); * // produces * // $users[] = array('id' => 123, 'name' => 'John Doe') * * $sql = 'SELECT `id`, `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql, 'id'); * // produces * // $users['123'] = array('id' => 123, 'name' => 'John Doe') * * $sql = 'SELECT `id`, `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql, 0); * // produces * // $users['123'] = array(0 => 123, 1 => 'John Doe') * * $sql = 'SELECT `id`, `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql, 'id', 'name'); * // or * $users = PMA_DBI_fetch_result($sql, 0, 1); * // produces * // $users['123'] = 'John Doe' * * $sql = 'SELECT `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql); * // produces * // $users[] = 'John Doe' * * $sql = 'SELECT `group`, `name` FROM `user`' * $users = PMA_DBI_fetch_result($sql, array('group', null), 'name'); * // produces * // $users['admin'][] = 'John Doe' * * $sql = 'SELECT `group`, `name` FROM `user`' * $users = PMA_DBI_fetch_result($sql, array('group', 'name'), 'id'); * // produces * // $users['admin']['John Doe'] = '123' * </code> * * @param string|mysql_result $result query or mysql result * @param string|integer      $key    field-name or offset *                                    used as key for array * @param string|integer      $value  value-name or offset *                                    used as value for array * @param resource            $link   mysql link * @param mixed               $options * * @return array resultrows or values indexed by $key */function PMA_DBI_fetch_result($result, $key = null, $value = null,    $link = null, $options = 0){    $resultrows = array();    if (is_string($result)) {        $result = PMA_DBI_try_query($result, $link, $options, false);    }    // return empty array if result is empty or false    if (! $result) {        return $resultrows;    }    $fetch_function = 'PMA_DBI_fetch_assoc';    // no nested array if only one field is in result    if (null === $key && 1 === PMA_DBI_num_fields($result)) {        $value = 0;        $fetch_function = 'PMA_DBI_fetch_row';    }    // if $key is an integer use non associative mysql fetch function    if (is_int($key)) {        $fetch_function = 'PMA_DBI_fetch_row';    }    if (null === $key && null === $value) {        while ($row = $fetch_function($result)) {            $resultrows[] = $row;        }    } elseif (null === $key) {        while ($row = $fetch_function($result)) {            $resultrows[] = $row[$value];        }    } elseif (null === $value) {        if (is_array($key)) {            while ($row = $fetch_function($result)) {                $result_target =& $resultrows;                foreach ($key as $key_index) {                    if (null === $key_index) {                        $result_target =& $result_target[];                        continue;                    }                    if (! isset($result_target[$row[$key_index]])) {                        $result_target[$row[$key_index]] = array();                    }                    $result_target =& $result_target[$row[$key_index]];                }                $result_target = $row;            }        } else {            while ($row = $fetch_function($result)) {                $resultrows[$row[$key]] = $row;            }        }    } else {        if (is_array($key)) {            while ($row = $fetch_function($result)) {                $result_target =& $resultrows;                foreach ($key as $key_index) {                    if (null === $key_index) {                        $result_target =& $result_target[];                        continue;                    }                    if (! isset($result_target[$row[$key_index]])) {                        $result_target[$row[$key_index]] = array();                    }                    $result_target =& $result_target[$row[$key_index]];                }                $result_target = $row[$value];            }        } else {            while ($row = $fetch_function($result)) {                $resultrows[$row[$key]] = $row[$value];            }        }    }    PMA_DBI_free_result($result);    return $resultrows;}/** * Get supported SQL compatibility modes * * @return array supported SQL compatibility modes */function PMA_DBI_getCompatibilities(){    // Drizzle doesn't support compatibility modes    if (PMA_DRIZZLE) {        return array();    }    $compats = array('NONE');    $compats[] = 'ANSI';    $compats[] = 'DB2';    $compats[] = 'MAXDB';    $compats[] = 'MYSQL323';    $compats[] = 'MYSQL40';    $compats[] = 'MSSQL';    $compats[] = 'ORACLE';    // removed; in MySQL 5.0.33, this produces exports that    // can't be read by POSTGRESQL (see our bug #1596328)    //$compats[] = 'POSTGRESQL';    $compats[] = 'TRADITIONAL';    return $compats;}/** * returns warnings for last query * * @param resource $link mysql link resource * * @return array warnings */function PMA_DBI_get_warnings($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return array();        }    }    return PMA_DBI_fetch_result('SHOW WARNINGS', null, null, $link);}/** * returns true (int > 0) if current user is superuser * otherwise 0 * * @return bool Whether use is a superuser */function PMA_isSuperuser(){    if (PMA_cacheExists('is_superuser', true)) {        return PMA_cacheGet('is_superuser', true);    }    // when connection failed we don't have a $userlink    if (isset($GLOBALS['userlink'])) {        if (PMA_DRIZZLE) {            // Drizzle has no authorization by default, so when no plugin is            // enabled everyone is a superuser            // Known authorization libraries: regex_policy, simple_user_policy            // Plugins limit object visibility (dbs, tables, processes), we can            // safely assume we always deal with superuser            $r = true;        } else {            // check access to mysql.user table            $r = (bool) PMA_DBI_try_query(                'SELECT COUNT(*) FROM mysql.user',                $GLOBALS['userlink'],                PMA_DBI_QUERY_STORE            );        }        PMA_cacheSet('is_superuser', $r, true);    } else {        PMA_cacheSet('is_superuser', false, true);    }    return PMA_cacheGet('is_superuser', true);}/** * returns an array of PROCEDURE or FUNCTION names for a db * * @param string   $db    db name * @param string   $which PROCEDURE | FUNCTION * @param resource $link  mysql link * * @returnarray the procedure names or function names */function PMA_DBI_get_procedures_or_functions($db, $which, $link = null){    if (PMA_DRIZZLE) {        // Drizzle doesn't support functions and procedures        return array();    }    $shows = PMA_DBI_fetch_result('SHOW ' . $which . ' STATUS;', null, null, $link);    $result = array();    foreach ($shows as $one_show) {        if ($one_show['Db'] == $db && $one_show['Type'] == $which) {            $result[] = $one_show['Name'];        }    }    return($result);}/** * returns the definition of a specific PROCEDURE, FUNCTION, EVENT or VIEW * * @param string   $db    db name * @param string   $which PROCEDURE | FUNCTION | EVENT | VIEW * @param string   $name  the procedure|function|event|view name * @param resource $link  mysql link * * @return string the definition */function PMA_DBI_get_definition($db, $which, $name, $link = null){    $returned_field = array(        'PROCEDURE' => 'Create Procedure',        'FUNCTION'  => 'Create Function',        'EVENT'     => 'Create Event',        'VIEW'      => 'Create View'    );    $query = 'SHOW CREATE ' . $which . ' '        . PMA_backquote($db) . '.' . PMA_backquote($name);    return(PMA_DBI_fetch_value($query, 0, $returned_field[$which]));}/** * returns details about the TRIGGERs for a specific table or database * * @param string $db        db name * @param string $table     table name * @param string $delimiter the delimiter to use (may be empty) * * @return array information about triggers (may be empty) */function PMA_DBI_get_triggers($db, $table = '', $delimiter = '//'){    if (PMA_DRIZZLE) {        // Drizzle doesn't support triggers        return array();    }    $result = array();    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        // Note: in http://dev.mysql.com/doc/refman/5.0/en/faqs-triggers.html        // their example uses WHERE TRIGGER_SCHEMA='dbname' so let's use this        // instead of WHERE EVENT_OBJECT_SCHEMA='dbname'        $query = 'SELECT TRIGGER_SCHEMA, TRIGGER_NAME, EVENT_MANIPULATION'            . ', EVENT_OBJECT_TABLE, ACTION_TIMING, ACTION_STATEMENT'            . ', EVENT_OBJECT_SCHEMA, EVENT_OBJECT_TABLE, DEFINER'            . ' FROM information_schema.TRIGGERS'            . ' WHERE TRIGGER_SCHEMA= \'' . PMA_sqlAddSlashes($db) . '\'';        if (! empty($table)) {            $query .= " AND EVENT_OBJECT_TABLE = '" . PMA_sqlAddSlashes($table) . "';";        }    } else {        $query = "SHOW TRIGGERS FROM " . PMA_backquote($db);        if (! empty($table)) {            $query .= " LIKE '" . PMA_sqlAddSlashes($table, true) . "';";        }    }    if ($triggers = PMA_DBI_fetch_result($query)) {        foreach ($triggers as $trigger) {            if ($GLOBALS['cfg']['Server']['DisableIS']) {                $trigger['TRIGGER_NAME'] = $trigger['Trigger'];                $trigger['ACTION_TIMING'] = $trigger['Timing'];                $trigger['EVENT_MANIPULATION'] = $trigger['Event'];                $trigger['EVENT_OBJECT_TABLE'] = $trigger['Table'];                $trigger['ACTION_STATEMENT'] = $trigger['Statement'];                $trigger['DEFINER'] = $trigger['Definer'];            }            $one_result = array();            $one_result['name'] = $trigger['TRIGGER_NAME'];            $one_result['table'] = $trigger['EVENT_OBJECT_TABLE'];            $one_result['action_timing'] = $trigger['ACTION_TIMING'];            $one_result['event_manipulation'] = $trigger['EVENT_MANIPULATION'];            $one_result['definition'] = $trigger['ACTION_STATEMENT'];            $one_result['definer'] = $trigger['DEFINER'];            // do not prepend the schema name; this way, importing the            // definition into another schema will work            $one_result['full_trigger_name'] = PMA_backquote($trigger['TRIGGER_NAME']);            $one_result['drop'] = 'DROP TRIGGER IF EXISTS '                . $one_result['full_trigger_name'];            $one_result['create'] = 'CREATE TRIGGER '                . $one_result['full_trigger_name'] . ' '                . $trigger['ACTION_TIMING']. ' '                . $trigger['EVENT_MANIPULATION']                . ' ON ' . PMA_backquote($trigger['EVENT_OBJECT_TABLE'])                . "\n" . ' FOR EACH ROW '                . $trigger['ACTION_STATEMENT'] . "\n" . $delimiter . "\n";            $result[] = $one_result;        }    }    // Sort results by name    $name = array();    foreach ($result as $key => $value) {        $name[] = $value['name'];    }    array_multisort($name, SORT_ASC, $result);    return($result);}/** * Formats database error message in a friendly way. * This is needed because some errors messages cannot * be obtained by mysql_error(). * * @param int    $error_number  Error code * @param string $error_message Error message as returned by server * * @return string HML text with error details */function PMA_DBI_formatError($error_number, $error_message){    if (! empty($error_message)) {        $error_message = PMA_DBI_convert_message($error_message);    }    $error_message = htmlspecialchars($error_message);    $error = '#' . ((string) $error_number);    if ($error_number == 2002) {        $error .= ' - ' . $error_message;        $error .= '<br />' . __('The server is not responding (or the local server\'s socket is not correctly configured).');    } elseif ($error_number == 2003) {        $error .= ' - ' . $error_message;        $error .= '<br />' . __('The server is not responding.');    } elseif ($error_number == 1005) {        if (strpos($error_message, 'errno: 13') !== false) {            $error .= ' - ' . $error_message;            $error .= '<br />' . __('Please check privileges of directory containing database.');        } else {            /* InnoDB contraints, see             * http://dev.mysql.com/doc/refman/5.0/en/innodb-foreign-key-constraints.html             */            $error .= ' - ' . $error_message .                ' (<a href="server_engines.php' .                PMA_generate_common_url(array('engine' => 'InnoDB', 'page' => 'Status')) .                '">' . __('Details...') . '</a>)';        }    } else {        $error .= ' - ' . $error_message;    }    return $error;}/** * Checks whether given schema is a system schema: information_schema * (MySQL and Drizzle) or data_dictionary (Drizzle) * * @param string $schema_name           Name of schema (database) to test * @param bool   $test_for_mysql_schema Whether 'mysql' schema should *                                      be treated the same as IS and DD * * @return bool */function PMA_is_system_schema($schema_name, $test_for_mysql_schema = false){    return strtolower($schema_name) == 'information_schema'            || (!PMA_DRIZZLE && strtolower($schema_name) == 'performance_schema')            || (PMA_DRIZZLE && strtolower($schema_name) == 'data_dictionary')            || ($test_for_mysql_schema && !PMA_DRIZZLE && $schema_name == 'mysql');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * this file is register_globals safe * * @todo    move JavaScript out of here into .js files * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$is_superuser = PMA_isSuperuser();/** * Gets a core script and starts output buffering work */require_once './libraries/sql_query_form.lib.php';/** * starts output buffering if requested and supported */require_once './libraries/ob.lib.php';PMA_outBufferPre();/** * load relation params */$cfgRelation = PMA_getRelationsParam();/** * load bookmark support */require_once './libraries/bookmark.lib.php';$querydisplay_tabs = array(    'sql',    'files',    'history',    'full',);if (isset($_REQUEST['querydisplay_tab']) && in_array($_REQUEST['querydisplay_tab'], $querydisplay_tabs)) {    $querydisplay_tab = $_REQUEST['querydisplay_tab'];} else {    $querydisplay_tab = $GLOBALS['cfg']['QueryWindowDefTab'];}/** * $_REQUEST['no_js'] is set if open new window by JavaScript failed * so this page is loaded in main frame */$no_js = PMA_ifSetOr($_REQUEST['no_js'], false);if ($no_js) {    $querydisplay_tab = 'full';    $tabs = false;} else {    $tabs = array();    $tabs['sql']['icon']   = 'b_sql.png';    $tabs['sql']['text']   = __('SQL');    $tabs['sql']['fragment']   = '#';    $tabs['sql']['attr']   = 'onclick="PMA_querywindowCommit(\'sql\');return false;"';    $tabs['sql']['active'] = (bool) ($querydisplay_tab == 'sql');    $tabs['import']['icon']   = 'b_import.png';    $tabs['import']['text']   = __('Import files');    $tabs['import']['fragment']   = '#';    $tabs['import']['attr']   = 'onclick="PMA_querywindowCommit(\'files\');return false;"';    $tabs['import']['active'] = (bool) ($querydisplay_tab == 'files');    $tabs['history']['icon']   = 'b_bookmark.png';    $tabs['history']['text']   = __('SQL history');    $tabs['history']['fragment']   = '#';    $tabs['history']['attr']   = 'onclick="PMA_querywindowCommit(\'history\');return false;"';    $tabs['history']['active'] = (bool) ($querydisplay_tab == 'history');    if ($GLOBALS['cfg']['QueryWindowDefTab'] == 'full') {        $tabs['all']['text']   = __('All');        $tabs['all']['fragment']   = '#';        $tabs['all']['attr']   = 'onclick="PMA_querywindowCommit(\'full\');return false;"';        $tabs['all']['active'] = (bool) ($querydisplay_tab == 'full');    }}$titles['Change'] = PMA_getIcon('b_edit.png', __('Change'));$url_query = PMA_generate_common_url($db, $table);if (! empty($sql_query)) {    $show_query = 1;}if ($no_js) {    // ... we redirect to appropriate query sql page    // works only full if $db and $table is also stored/grabbed from $_COOKIE    if (strlen($table)) {        include './tbl_sql.php';    } elseif (strlen($db)) {        include './db_sql.php';    } else {        include './server_sql.php';    }    exit;}/** * Defines the query to be displayed in the query textarea */if (! empty($show_query)) {    $query_to_display = $sql_query;} else {    $query_to_display = '';}$sql_query = '';/** * prepare JavaScript functionality */$js_include[] = 'common.js';$js_include[] = 'querywindow.js';if (PMA_isValid($_REQUEST['auto_commit'], 'identical', 'true')) {    $js_events[] = array(        'event'     => 'load',        'function'  => 'PMA_queryAutoCommit',    );}if (PMA_isValid($_REQUEST['init'])) {    $js_events[] = array(        'event'     => 'load',        'function'  => 'PMA_querywindowResize',    );}// always set focus to the textareaif ($querydisplay_tab == 'sql' || $querydisplay_tab == 'full') {    $js_events[] = array(        'event'     => 'load',        'function'  => 'PMA_querywindowSetFocus',    );}/** * start HTTP/HTML output */require_once './libraries/header_http.inc.php';require_once './libraries/header_meta_style.inc.php';require_once './libraries/header_scripts.inc.php';?></head><body id="bodyquerywindow"><div id="querywindowcontainer"><?phpif ($tabs) {    echo PMA_generate_html_tabs($tabs, array());    unset($tabs);}PMA_sqlQueryForm($query_to_display, $querydisplay_tab);// Hidden forms and query frame interaction stuff$_sql_history = PMA_getHistory($GLOBALS['cfg']['Server']['user']);if (! empty($_sql_history) && ($querydisplay_tab == 'history' || $querydisplay_tab == 'full')) {    $tab = $querydisplay_tab != 'full' ? 'sql' : 'full';    echo __('SQL history') . ':<br />'        . '<ul>';    foreach ($_sql_history as $query) {        echo '<li>' . "\n";        // edit link        $url_params = array(            'querydisplay_tab' => $tab,            'sql_query' => $query['sqlquery'],            'db' => $query['db'],            'table' => $query['table'],        );        echo '<a href="querywindow.php' . PMA_generate_common_url($url_params)            . '">' . $titles['Change'] . '</a>';        // execute link        $url_params['auto_commit'] = 'true';        echo '<a href="import.php' . PMA_generate_common_url($url_params) . '"'            . ' target="frame_content">';        if (! empty($query['db'])) {            echo '[';            echo htmlspecialchars(PMA_backquote($query['db']));            if (! empty($query['table'])) {                echo '.' . htmlspecialchars(PMA_backquote($query['table']));            }            echo  '] ';        }        if (strlen($query['sqlquery']) > 120) {            echo '<span title="' . htmlspecialchars($query['sqlquery']) . '">';            echo htmlspecialchars(substr($query['sqlquery'], 0, 50)) . ' [...] ';            echo htmlspecialchars(substr($query['sqlquery'], -50));            echo '</span>';        } else {            echo htmlspecialchars($query['sqlquery']);        }        echo '</a>' . "\n";        echo '</li>' . "\n";    }    unset($tab, $_sql_history, $query);    echo '</ul>' . "\n";}?><form action="querywindow.php" method="post" name="hiddenqueryform"    id="hiddenqueryform">    <?php echo PMA_generate_common_hidden_inputs('', ''); ?>    <input type="hidden" name="db" value="<?php echo htmlspecialchars($db); ?>" />    <input type="hidden" name="table" value="<?php echo htmlspecialchars($table); ?>" />    <input type="hidden" name="sql_query" value="" />    <input type="hidden" name="querydisplay_tab" value="<?php echo $querydisplay_tab; ?>" /></form></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * SQL import plugin for phpMyAdmin * * @package PhpMyAdmin-Import * @subpackage SQL */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['sql'] = array(        'text'          => __('SQL'),        'extension'     => 'sql',        'options_text'  => __('Options'),    );    $compats = PMA_DBI_getCompatibilities();    if (count($compats) > 0) {        $values = array();        foreach ($compats as $val) {            $values[$val] = $val;        }        $plugin_list['sql']['options'] = array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array(                'type'      => 'select',                'name'      => 'compatibility',                'text'      => __('SQL compatibility mode:'),                'values'    => $values,                'doc'       => array(                    'manual_MySQL_Database_Administration',                    'Server_SQL_mode',                ),            ),            array(                'type' => 'bool',                'name' => 'no_auto_value_on_zero',                'text' => __('Do not use <code>AUTO_INCREMENT</code> for zero values'),                'doc'       => array(                    'manual_MySQL_Database_Administration',                    'Server_SQL_mode',                    'sqlmode_no_auto_value_on_zero'                ),            ),            array('type' => 'end_group'),        );    }    /* We do not define function when plugin is just queried for information above */    return;}$buffer = '';// Defaults for parser$sql = '';$start_pos = 0;$i = 0;$len= 0;$big_value = 2147483647;$delimiter_keyword = 'DELIMITER '; // include the space because it's mandatory$length_of_delimiter_keyword = strlen($delimiter_keyword);if (isset($_POST['sql_delimiter'])) {    $sql_delimiter = $_POST['sql_delimiter'];} else {    $sql_delimiter = ';';}// Handle compatibility options$sql_modes = array();if (isset($_REQUEST['sql_compatibility']) && 'NONE' != $_REQUEST['sql_compatibility']) {    $sql_modes[] = $_REQUEST['sql_compatibility'];}if (isset($_REQUEST['sql_no_auto_value_on_zero'])) {    $sql_modes[] = 'NO_AUTO_VALUE_ON_ZERO';}if (count($sql_modes) > 0) {    PMA_DBI_try_query('SET SQL_MODE="' . implode(',', $sql_modes) . '"');}unset($sql_modes);/** * will be set in PMA_importGetNextChunk() * * @global boolean $GLOBALS['finished'] */$GLOBALS['finished'] = false;while (!($GLOBALS['finished'] && $i >= $len) && !$error && !$timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        // subtract data we didn't handle yet and stop processing        $offset -= strlen($buffer);        break;    } elseif ($data === true) {        // Handle rest of buffer    } else {        // Append new data to buffer        $buffer .= $data;        // free memory        unset($data);        // Do not parse string when we're not at the end and don't have ; inside        if ((strpos($buffer, $sql_delimiter, $i) === false) && !$GLOBALS['finished']) {            continue;        }    }    // Current length of our buffer    $len = strlen($buffer);    // Grab some SQL queries out of it    while ($i < $len) {        $found_delimiter = false;        // Find first interesting character        $old_i = $i;        // this is about 7 times faster that looking for each sequence i        // one by one with strpos()        if (preg_match('/(\'|"|#|-- |\/\*|`|(?i)(?<![A-Z0-9_])' . $delimiter_keyword . ')/', $buffer, $matches, PREG_OFFSET_CAPTURE, $i)) {            // in $matches, index 0 contains the match for the complete            // expression but we don't use it            $first_position = $matches[1][1];        } else {            $first_position = $big_value;        }        /**         * @todo we should not look for a delimiter that might be         *       inside quotes (or even double-quotes)         */        // the cost of doing this one with preg_match() would be too high        $first_sql_delimiter = strpos($buffer, $sql_delimiter, $i);        if ($first_sql_delimiter === false) {            $first_sql_delimiter = $big_value;        } else {            $found_delimiter = true;        }        // set $i to the position of the first quote, comment.start or delimiter found        $i = min($first_position, $first_sql_delimiter);        if ($i == $big_value) {            // none of the above was found in the string            $i = $old_i;            if (!$GLOBALS['finished']) {                break;            }            // at the end there might be some whitespace...            if (trim($buffer) == '') {                $buffer = '';                $len = 0;                break;            }            // We hit end of query, go there!            $i = strlen($buffer) - 1;        }        // Grab current character        $ch = $buffer[$i];        // Quotes        if (strpos('\'"`', $ch) !== false) {            $quote = $ch;            $endq = false;            while (!$endq) {                // Find next quote                $pos = strpos($buffer, $quote, $i + 1);                /*                 * Behave same as MySQL and accept end of query as end of backtick.                 * I know this is sick, but MySQL behaves like this:                 *                 * SELECT * FROM `table                 *                 * is treated like                 *                 * SELECT * FROM `table`                 */                if ($pos === false && $quote == '`' && $found_delimiter) {                    $pos = $first_sql_delimiter - 1;                // No quote? Too short string                } elseif ($pos === false) {                    // We hit end of string => unclosed quote, but we handle it as end of query                    if ($GLOBALS['finished']) {                        $endq = true;                        $i = $len - 1;                    }                    $found_delimiter = false;                    break;                }                // Was not the quote escaped?                $j = $pos - 1;                while ($buffer[$j] == '\\') $j--;                // Even count means it was not escaped                $endq = (((($pos - 1) - $j) % 2) == 0);                // Skip the string                $i = $pos;                if ($first_sql_delimiter < $pos) {                    $found_delimiter = false;                }            }            if (!$endq) {                break;            }            $i++;            // Aren't we at the end?            if ($GLOBALS['finished'] && $i == $len) {                $i--;            } else {                continue;            }        }        // Not enough data to decide        if ((($i == ($len - 1) && ($ch == '-' || $ch == '/'))          || ($i == ($len - 2) && (($ch == '-' && $buffer[$i + 1] == '-')            || ($ch == '/' && $buffer[$i + 1] == '*')))) && !$GLOBALS['finished']) {            break;        }        // Comments        if ($ch == '#'         || ($i < ($len - 1) && $ch == '-' && $buffer[$i + 1] == '-'          && (($i < ($len - 2) && $buffer[$i + 2] <= ' ')           || ($i == ($len - 1)  && $GLOBALS['finished'])))         || ($i < ($len - 1) && $ch == '/' && $buffer[$i + 1] == '*')                ) {            // Copy current string to SQL            if ($start_pos != $i) {                $sql .= substr($buffer, $start_pos, $i - $start_pos);            }            // Skip the rest            $start_of_comment = $i;            // do not use PHP_EOL here instead of "\n", because the export            // file might have been produced on a different system            $i = strpos($buffer, $ch == '/' ? '*/' : "\n", $i);            // didn't we hit end of string?            if ($i === false) {                if ($GLOBALS['finished']) {                    $i = $len - 1;                } else {                    break;                }            }            // Skip *            if ($ch == '/') {                $i++;            }            // Skip last char            $i++;            // We need to send the comment part in case we are defining            // a procedure or function and comments in it are valuable            $sql .= substr($buffer, $start_of_comment, $i - $start_of_comment);            // Next query part will start here            $start_pos = $i;            // Aren't we at the end?            if ($i == $len) {                $i--;            } else {                continue;            }        }        // Change delimiter, if redefined, and skip it (don't send to server!)        if (strtoupper(substr($buffer, $i, $length_of_delimiter_keyword)) == $delimiter_keyword         && ($i + $length_of_delimiter_keyword < $len)) {             // look for EOL on the character immediately after 'DELIMITER '             // (see previous comment about PHP_EOL)           $new_line_pos = strpos($buffer, "\n", $i + $length_of_delimiter_keyword);           // it might happen that there is no EOL           if (false === $new_line_pos) {               $new_line_pos = $len;           }           $sql_delimiter = substr($buffer, $i + $length_of_delimiter_keyword, $new_line_pos - $i - $length_of_delimiter_keyword);           $i = $new_line_pos + 1;           // Next query part will start here           $start_pos = $i;           continue;        }        // End of SQL        if ($found_delimiter || ($GLOBALS['finished'] && ($i == $len - 1))) {            $tmp_sql = $sql;            if ($start_pos < $len) {                $length_to_grab = $i - $start_pos;                if (! $found_delimiter) {                    $length_to_grab++;                }                $tmp_sql .= substr($buffer, $start_pos, $length_to_grab);                unset($length_to_grab);            }            // Do not try to execute empty SQL            if (! preg_match('/^([\s]*;)*$/', trim($tmp_sql))) {                $sql = $tmp_sql;                PMA_importRunQuery($sql, substr($buffer, 0, $i + strlen($sql_delimiter)));                $buffer = substr($buffer, $i + strlen($sql_delimiter));                // Reset parser:                $len = strlen($buffer);                $sql = '';                $i = 0;                $start_pos = 0;                // Any chance we will get a complete query?                //if ((strpos($buffer, ';') === false) && !$GLOBALS['finished']) {                if ((strpos($buffer, $sql_delimiter) === false) && !$GLOBALS['finished']) {                    break;                }            } else {                $i++;                $start_pos = $i;            }        }    } // End of parser loop} // End of import loop// Commit any possible data in buffersPMA_importRunQuery('', substr($buffer, 0, $len));PMA_importRunQuery();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Database with allowed values for configuration stored in the $cfg array, * used by setup script and user preferences to generate forms. * * @package PhpMyAdmin */if (!defined('PHPMYADMIN')) {    exit;}/** * Value meaning: * o array - select field, array contains allowed values * o string - type override * * Use normal array, paths won't be expanded */$cfg_db = array();$cfg_db['Servers'] = array(1 => array(    'port'         => 'integer',    'connect_type' => array('tcp', 'socket'),    'extension'    => array('mysql', 'mysqli'),    'auth_type'    => array('config', 'http', 'signon', 'cookie'),    'AllowDeny'    => array(        'order'    => array('', 'deny,allow', 'allow,deny', 'explicit')),    'only_db'      => 'array'));$cfg_db['RecodingEngine'] = array('auto', 'iconv', 'recode', 'none');$cfg_db['OBGzip'] = array('auto', true, false);$cfg_db['MemoryLimit'] = 'short_string';$cfg_db['ShowTooltipAliasTB'] = array('nested', true, false);$cfg_db['DisplayDatabasesList'] = array('auto', true, false);$cfg_db['LeftLogoLinkWindow'] = array('main', 'new');$cfg_db['LeftDefaultTabTable'] = array(    'tbl_structure.php', // fields list    'tbl_sql.php',       // SQL form    'tbl_select.php',    // search page    'tbl_change.php',    // insert row page    'sql.php');          // browse page$cfg_db['LeftFrameDBSeparator'] = 'short_string';$cfg_db['LeftFrameTableSeparator'] = 'short_string';$cfg_db['NavigationBarIconic'] = array(true => __('Yes'), false => __('No'), 'both' => __('Both'));$cfg_db['Order'] = array('ASC', 'DESC', 'SMART');$cfg_db['RowActionLinks'] = array('none' => __('Nowhere'), 'left' => __('Left'), 'right' => __('Right'), 'both' => __('Both'));$cfg_db['ProtectBinary'] = array(false, 'blob', 'all');$cfg_db['DefaultDisplay'] = array('horizontal', 'vertical', 'horizontalflipped');$cfg_db['CharEditing'] = array('input', 'textarea');$cfg_db['PropertiesIconic'] = array(true => __('Yes'), false => __('No'), 'both' => __('Both'));$cfg_db['DefaultTabServer'] = array(    'main.php',                // the welcome page (recommended for multiuser setups)    'server_databases.php',    // list of databases    'server_status.php',       // runtime information    'server_variables.php',    // MySQL server variables    'server_privileges.php',   // user management    'server_processlist.php'); // process list$cfg_db['DefaultTabDatabase'] = array(    'db_structure.php',   // tables list    'db_sql.php',         // SQL form    'db_search.php',      // search query    'db_operations.php'); // operations on database$cfg_db['DefaultTabTable'] = array(    'tbl_structure.php', // fields list    'tbl_sql.php',       // SQL form    'tbl_select.php',    // search page    'tbl_change.php',    // insert row page    'sql.php');          // browse page$cfg_db['QueryWindowDefTab'] = array(    'sql',     // SQL    'files',   // Import files    'history', // SQL history    'full');   // All (SQL and SQL history)$cfg_db['InitialSlidersState'] = array(    'open' => __('Open'),     'closed' => __('Closed'),    'disabled' => __('Disabled'));$cfg_db['Import']['format'] = array(    'csv',    // CSV    'docsql', // DocSQL    'ldi',    // CSV using LOAD DATA    'sql');   // SQL$cfg_db['Import']['charset'] = array_merge(array(''), $GLOBALS['cfg']['AvailableCharsets']);$cfg_db['Import']['sql_compatibility'] = $cfg_db['Export']['sql_compatibility'] = array(    'NONE', 'ANSI', 'DB2', 'MAXDB', 'MYSQL323', 'MYSQL40', 'MSSQL', 'ORACLE',    // removed; in MySQL 5.0.33, this produces exports that    // can't be read by POSTGRESQL (see our bug #1596328)    //'POSTGRESQL',    'TRADITIONAL');$cfg_db['Import']['csv_terminated'] = 'short_string';$cfg_db['Import']['csv_enclosed'] = 'short_string';$cfg_db['Import']['csv_escaped'] = 'short_string';$cfg_db['Import']['ldi_terminated'] = 'short_string';$cfg_db['Import']['ldi_enclosed'] = 'short_string';$cfg_db['Import']['ldi_escaped'] = 'short_string';$cfg_db['Import']['ldi_local_option'] = array('auto', true, false);$cfg_db['Export']['_sod_select'] = array(    'structure' => __('structure'),    'data' => __('data'),    'structure_and_data' => __('structure and data'));$cfg_db['Export']['method'] = array(    'quick' => __('Quick - display only the minimal options to configure'),    'custom' => __('Custom - display all possible options to configure'),    'custom-no-form' => __('Custom - like above, but without the quick/custom choice'));$cfg_db['Export']['format'] = array('codegen', 'csv', 'excel', 'htmlexcel',    'htmlword', 'latex', 'ods', 'odt', 'pdf', 'sql', 'texytext', 'xls', 'xml',    'yaml');$cfg_db['Export']['compression'] = array('none', 'zip', 'gzip', 'bzip2');$cfg_db['Export']['charset'] = array_merge(array(''), $GLOBALS['cfg']['AvailableCharsets']);$cfg_db['Export']['codegen_format'] = array('#', 'NHibernate C# DO', 'NHibernate XML');$cfg_db['Export']['csv_separator'] = 'short_string';$cfg_db['Export']['csv_terminated'] = 'short_string';$cfg_db['Export']['csv_enclosed'] = 'short_string';$cfg_db['Export']['csv_escaped'] = 'short_string';$cfg_db['Export']['csv_null'] = 'short_string';$cfg_db['Export']['excel_null'] = 'short_string';$cfg_db['Export']['excel_edition'] = array('win' => 'Windows',    'mac_excel2003' => 'Excel 2003 / Macintosh', 'mac_excel2008' => 'Excel 2008 / Macintosh');$cfg_db['Export']['sql_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['sql_type'] = array('INSERT', 'UPDATE', 'REPLACE');$cfg_db['Export']['sql_insert_syntax'] = array(    'complete' => __('complete inserts'),    'extended' => __('extended inserts'),    'both' => __('both of the above'),    'none' => __('neither of the above'));$cfg_db['Export']['xls_null'] = 'short_string';$cfg_db['Export']['xlsx_null'] = 'short_string';$cfg_db['Export']['htmlword_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['htmlword_null'] = 'short_string';$cfg_db['Export']['ods_null'] = 'short_string';$cfg_db['Export']['odt_null'] = 'short_string';$cfg_db['Export']['odt_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['texytext_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['texytext_null'] = 'short_string';/** * Default values overrides * Use only full paths */$cfg_db['_overrides'] = array();$cfg_db['_overrides']['Servers/1/extension'] = extension_loaded('mysqli')    ? 'mysqli' : 'mysql';/** * Basic validator assignments (functions from libraries/config/validate.lib.php and 'validators' * object in js/config.js) * Use only full paths and form ids */$cfg_db['_validators'] = array(    'CharTextareaCols' => 'validate_positive_number',    'CharTextareaRows' => 'validate_positive_number',    'ExecTimeLimit' => 'validate_non_negative_number',    'Export/sql_max_query_size' => 'validate_positive_number',    'ForeignKeyMaxLimit' => 'validate_positive_number',    'Import/csv_enclosed' => array(array('validate_by_regex', '/^.?$/')),    'Import/csv_escaped' => array(array('validate_by_regex', '/^.$/')),    'Import/csv_terminated' => array(array('validate_by_regex', '/^.$/')),    'Import/ldi_enclosed' => array(array('validate_by_regex', '/^.?$/')),    'Import/ldi_escaped' => array(array('validate_by_regex', '/^.$/')),    'Import/ldi_terminated' => array(array('validate_by_regex', '/^.$/')),    'Import/skip_queries' => 'validate_non_negative_number',    'InsertRows' => 'validate_positive_number',    'LeftFrameTableLevel' => 'validate_positive_number',    'LeftRecentTable' => 'validate_non_negative_number',    'LimitChars' => 'validate_positive_number',    'LoginCookieValidity' => 'validate_positive_number',    'LoginCookieStore' => 'validate_non_negative_number',    'MaxDbList' => 'validate_positive_number',    'MaxCharactersInDisplayedSQL' => 'validate_positive_number',    'MaxRows' => 'validate_positive_number',    'MaxTableList' => 'validate_positive_number',    'MemoryLimit' => array(array('validate_by_regex', '/^\d+(?:[kmg])?$/i')),    'QueryHistoryMax' => 'validate_positive_number',    'QueryWindowWidth' => 'validate_positive_number',    'QueryWindowHeight' => 'validate_positive_number',    'RepeatCells' => 'validate_non_negative_number',    'Server' => 'validate_server',    'Server_pmadb' => 'validate_pmadb',    'Servers/1/port' => 'validate_port_number',    'Servers/1/hide_db' => 'validate_regex',    'TextareaCols' => 'validate_positive_number',    'TextareaRows' => 'validate_positive_number',    'TrustedProxies' => 'validate_trusted_proxies');/** * Additional validators used for user preferences */$cfg_db['_userValidators'] = array(    'MaxDbList' => array(array('validate_upper_bound', 'value:MaxDbList')),    'MaxTableList' => array(array('validate_upper_bound', 'value:MaxTableList')),    'QueryHistoryMax' => array(array('validate_upper_bound', 'value:QueryHistoryMax')),);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays a form for editing ENUM and SET values with more * space (as an alternative to doing it in tbl_alter.php). * This form is only for users with JavaScript disabled, * users with JavaScript enabled will see a jQuery dialog. * * @package PhpMyAdmin */require_once './libraries/common.inc.php';require_once './libraries/header_http.inc.php';require_once './libraries/header_meta_style.inc.php';?></head><body>    <form action="enum_editor.php" method="get">        <?php echo PMA_generate_common_hidden_inputs(); ?>        <input type="hidden" name="field" value="<?php echo htmlspecialchars($_GET['field']); ?>" />        <fieldset class="enum_editor_no_js">        <legend><?php echo __('ENUM/SET editor'); ?></legend>        <div class="enum_editor_no_js">            <h3>            <?php                if (empty($_GET['field'])) {                    echo __('Values for a new column');                } else {                    printf(__('Values for column %s'), '"' . htmlspecialchars($_GET['field']) . '"');                }            ?>            </h3>            <p><?php echo PMA_getImage('s_info.png') . __('Enter each value in a separate field'); ?></p>            <table id="values">            <?php                // Get the enum values                $values = array();                // If the values are in an array                if (isset($_GET['values']) && is_array($_GET['values'])) {                     // then this page was called from itself via the "Add a value", "Drop" or "Go" buttons                    $values = $_GET['values'];                    foreach ($values as $key => $value) {                        $values[$key] = htmlentities($value);                    }                    // If the values are in a string                } elseif (isset($_GET['values']) && is_string($_GET['values'])) {                    // then this page was called via a link from some external page                    $values_string = htmlentities($_GET['values']);                    // There is a JS port of the below parser in functions.js                    // If you are fixing something here,                    // you need to also update the JS port.                    $values = array();                    $in_string = false;                    $buffer = '';                    for ($i=0; $i<strlen($values_string); $i++) {                        $curr = $values_string[$i];                        $next = $i == strlen($values_string)-1 ? '' : $values_string[$i+1];                        if (! $in_string && $curr == "'") {                            $in_string = true;                        } else if ($in_string && $curr == "\\" && $next == "\\") {                            $buffer .= "&#92;";                            $i++;                        } else if ($in_string && $next == "'" && ($curr == "'" || $curr == "\\")) {                            $buffer .= "&#39;";                            $i++;                        } else if ($in_string && $curr == "'") {                            $in_string = false;                            $values[] = $buffer;                            $buffer = '';                        } else if ($in_string) {                             $buffer .= $curr;                        }                    }                    if (strlen($buffer) > 0) {                        // The leftovers in the buffer are the last value (if any)                        $values[] = $buffer;                    }                }                // Escape double quotes                foreach ($values as $key => $value) {                    $values[$key] = str_replace('"', "&quote;", $value);                }                // If there are no values, maybe the user is about to make a                // new list so we add a few for him/her to get started with.                if (! count($values)                    || (count($values) == 1 && strlen($values[0]) == 0)                ) {                    array_push($values, '', '', '');                }                // Add an empty value, if there was a request to do so                if (! empty($_GET['add_field'])) {                    $values[] = '';                }                // Remove a value, given a valid index, from the list                // of values, if there was a request to do so.                if (isset($_GET['drop']) && is_array($_GET['drop'])) {                    foreach ($_GET['drop'] as $index => $value) {                        if ((int)$index == $index                            && $index > 0                            && $index <= count($values)                        ) {                            unset($values[$index]);                        }                    }                }                // Display the values in text fields                $field_counter = 0;                foreach ($values as $value) {                    $field_counter++;                    echo sprintf(                        '<tr><td><input class="text" type="text" size="30" value="%s" name="values[' . $field_counter . ']" />' . "\n",                        $value                    );                    echo '</td><td>';                    echo '<input class="drop" type="submit" value="' . __('Drop') . '" name="drop[' . $field_counter . ']" />' . "\n";                    echo '</td></tr>' . "\n";                }            ?>                <tr><td>                    <input type="submit" class="submit" value="<?php echo __('Go'); ?>" />                </td><td>                    <input type="submit" class="submit" name="add_field" value="<?php echo __('Add a value'); ?>" />                </td></tr>            </table>        </div>        <hr class='enum_editor_no_js' />        <div id="enum_editor_output">        <h3><?php echo __('Output'); ?></h3>        <p><?php echo PMA_getImage('s_info.png') . __('Copy and paste the joined values into the "Length/Values" field'); ?></p>            <?php                // Escape quotes and slashes for usage with MySQL                foreach ($values as $key => $value) {                    $values[$key]  = "'";                    $values[$key] .= str_replace(                        array("'", "\\", "&#39;", "&#92;"),                        array("''", '\\\\', "''", '\\\\'),                        $value                    );                    $values[$key] .= "'";                }                // Print out the values as a string            ?>            <textarea id="joined_values" cols="95" rows="5"><?php echo join(",", $values); ?></textarea>        </div>        </fieldset>    </form></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @todo    we must handle the case if sql.php is called directly with a query *          that returns 0 rows - to prevent cyclic redirects or includes * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/Table.class.php';require_once './libraries/check_user_privileges.lib.php';require_once './libraries/bookmark.lib.php';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'tbl_change.js';// the next one needed because sql.php may do a "goto" to tbl_structure.php$GLOBALS['js_include'][] = 'tbl_structure.js';$GLOBALS['js_include'][] = 'gis_data_editor.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';if (isset($_SESSION['profiling'])) {    $GLOBALS['js_include'][] = 'highcharts/highcharts.js';    /* Files required for chart exporting */    $GLOBALS['js_include'][] = 'highcharts/exporting.js';    /* < IE 9 doesn't support canvas natively */    if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {        $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';    }    $GLOBALS['js_include'][] = 'canvg/canvg.js';}/** * Defines the url to return to in case of error in a sql statement */// Security checkingsif (! empty($goto)) {    $is_gotofile     = preg_replace('@^([^?]+).*$@s', '\\1', $goto);    if (! @file_exists('./' . $is_gotofile)) {        unset($goto);    } else {        $is_gotofile = ($is_gotofile == $goto);    }} else {    $goto = (! strlen($table)) ? $cfg['DefaultTabDatabase'] : $cfg['DefaultTabTable'];    $is_gotofile  = true;} // end ifif (! isset($err_url)) {    $err_url = (! empty($back) ? $back : $goto)             . '?' . PMA_generate_common_url($db)             . ((strpos(' ' . $goto, 'db_') != 1 && strlen($table)) ? '&amp;table=' . urlencode($table) : '');} // end if// Coming from a bookmark dialogif (isset($fields['query'])) {    $sql_query = $fields['query'];}// This one is just to fill $dbif (isset($fields['dbase'])) {    $db = $fields['dbase'];}/** * During grid edit, if we have a relational field, show the dropdown for it * * Logic taken from libraries/display_tbl_lib.php * * This doesn't seem to be the right place to do this, but I can't think of any * better place either. */if (isset($_REQUEST['get_relational_values']) && $_REQUEST['get_relational_values'] == true) {    include_once 'libraries/relation.lib.php';    $column = $_REQUEST['column'];    $foreigners = PMA_getForeigners($db, $table, $column);    $display_field = PMA_getDisplayField($foreigners[$column]['foreign_db'], $foreigners[$column]['foreign_table']);    $foreignData = PMA_getForeignData($foreigners, $column, false, '', '');    if ($_SESSION['tmp_user_values']['relational_display'] == 'D'        && isset($display_field)        && strlen($display_field)        && isset($_REQUEST['relation_key_or_display_column'])        && $_REQUEST['relation_key_or_display_column']    ) {            $curr_value = $_REQUEST['relation_key_or_display_column'];    } else {        $curr_value = $_REQUEST['curr_value'];    }    if ($foreignData['disp_row'] == null) {        //Handle the case when number of values is more than $cfg['ForeignKeyMaxLimit']        $_url_params = array(                'db' => $db,                'table' => $table,                'field' => $column        );        $dropdown = '<span class="curr_value">' . htmlspecialchars($_REQUEST['curr_value']) . '</span> <a href="browse_foreigners.php' . PMA_generate_common_url($_url_params) . '"'                    . ' target="_blank" class="browse_foreign" '                    .'>' . __('Browse foreign values') . '</a>';    } else {        $dropdown = PMA_foreignDropdown($foreignData['disp_row'], $foreignData['foreign_field'], $foreignData['foreign_display'], $curr_value, $cfg['ForeignKeyMaxLimit']);        $dropdown = '<select>' . $dropdown . '</select>';    }    $extra_data['dropdown'] = $dropdown;    PMA_ajaxResponse(null, true, $extra_data);}/** * Just like above, find possible values for enum fields during grid edit. * * Logic taken from libraries/display_tbl_lib.php */if (isset($_REQUEST['get_enum_values']) && $_REQUEST['get_enum_values'] == true) {    $field_info_query = PMA_DBI_get_columns_sql($db, $table, $_REQUEST['column']);    $field_info_result = PMA_DBI_fetch_result($field_info_query, null, null, null, PMA_DBI_QUERY_STORE);    $search = array('enum', '(', ')', "'");    $values = explode(',', str_replace($search, '', $field_info_result[0]['Type']));    $dropdown = '<option value="">&nbsp;</option>';    foreach ($values as $value) {        $dropdown .= '<option value="' . htmlspecialchars($value) . '"';        if ($value == $_REQUEST['curr_value']) {            $dropdown .= ' selected="selected"';        }        $dropdown .= '>' . $value . '</option>';    }    $dropdown = '<select>' . $dropdown . '</select>';    $extra_data['dropdown'] = $dropdown;    PMA_ajaxResponse(null, true, $extra_data);}/** * Find possible values for set fields during grid edit. */if (isset($_REQUEST['get_set_values']) && $_REQUEST['get_set_values'] == true) {    $field_info_query = PMA_DBI_get_columns_sql($db, $table, $_REQUEST['column']);    $field_info_result = PMA_DBI_fetch_result($field_info_query, null, null, null, PMA_DBI_QUERY_STORE);    $selected_values = explode(',', $_REQUEST['curr_value']);    $search = array('set', '(', ')', "'");    $values = explode(',', str_replace($search, '', $field_info_result[0]['Type']));    $select = '';    foreach ($values as $value) {        $select .= '<option value="' . htmlspecialchars($value) . '"';        if (in_array($value, $selected_values, true)) {            $select .= ' selected="selected"';        }        $select .= '>' . $value . '</option>';    }    $select_size = (sizeof($values) > 10) ? 10 : sizeof($values);    $select = '<select multiple="multiple" size="' . $select_size . '">' . $select . '</select>';    $extra_data['select'] = $select;    PMA_ajaxResponse(null, true, $extra_data);}/** * Check ajax request to set the column order */if (isset($_REQUEST['set_col_prefs']) && $_REQUEST['set_col_prefs'] == true) {    $pmatable = new PMA_Table($table, $db);    $retval = false;    // set column order    if (isset($_REQUEST['col_order'])) {        $col_order = explode(',', $_REQUEST['col_order']);        $retval = $pmatable->setUiProp(PMA_Table::PROP_COLUMN_ORDER, $col_order, $_REQUEST['table_create_time']);        if (gettype($retval) != 'boolean') {            PMA_ajaxResponse($retval->getString(), false);        }    }    // set column visibility    if ($retval === true && isset($_REQUEST['col_visib'])) {        $col_visib = explode(',', $_REQUEST['col_visib']);        $retval = $pmatable->setUiProp(PMA_Table::PROP_COLUMN_VISIB, $col_visib, $_REQUEST['table_create_time']);        if (gettype($retval) != 'boolean') {            PMA_ajaxResponse($retval->getString(), false);        }    }    PMA_ajaxResponse(null, ($retval == true));}// Default to browse if no query set and we have table// (needed for browsing from DefaultTabTable)if (empty($sql_query) && strlen($table) && strlen($db)) {    include_once './libraries/bookmark.lib.php';    $book_sql_query = PMA_Bookmark_get(        $db,        '\'' . PMA_sqlAddSlashes($table) . '\'',        'label',        false,        true    );    if (! empty($book_sql_query)) {        $GLOBALS['using_bookmark_message'] = PMA_message::notice(__('Using bookmark "%s" as default browse query.'));        $GLOBALS['using_bookmark_message']->addParam($table);        $GLOBALS['using_bookmark_message']->addMessage(PMA_showDocu('faq6_22'));        $sql_query = $book_sql_query;    } else {        $sql_query = 'SELECT * FROM ' . PMA_backquote($table);    }    unset($book_sql_query);    // set $goto to what will be displayed if query returns 0 rows    $goto = 'tbl_structure.php';} else {    // Now we can check the parameters    PMA_checkParameters(array('sql_query'));}// instead of doing the test twice$is_drop_database = preg_match(    '/DROP[[:space:]]+(DATABASE|SCHEMA)[[:space:]]+/i',    $sql_query);/** * Check rights in case of DROP DATABASE * * This test may be bypassed if $is_js_confirmed = 1 (already checked with js) * but since a malicious user may pass this variable by url/form, we don't take * into account this case. */if (! defined('PMA_CHK_DROP')    && ! $cfg['AllowUserDropDatabase']    && $is_drop_database    && ! $is_superuser) {    include_once './libraries/header.inc.php';    PMA_mysqlDie(__('"DROP DATABASE" statements are disabled.'), '', '', $err_url);} // end ifrequire_once './libraries/display_tbl.lib.php';PMA_displayTable_checkConfigParams();/** * Need to find the real end of rows? */if (isset($find_real_end) && $find_real_end) {    $unlim_num_rows = PMA_Table::countRecords($db, $table, $force_exact = true);    $_SESSION['tmp_user_values']['pos'] = @((ceil($unlim_num_rows / $_SESSION['tmp_user_values']['max_rows']) - 1) * $_SESSION['tmp_user_values']['max_rows']);}/** * Bookmark add */if (isset($store_bkm)) {    PMA_Bookmark_save($fields, (isset($bkm_all_users) && $bkm_all_users == 'true' ? true : false));    // go back to sql.php to redisplay query; do not use &amp; in this case:    PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . $goto . '&label=' . $fields['label']);} // end if/** * Parse and analyze the query */require_once './libraries/parse_analyze.lib.php';/** * Sets or modifies the $goto variable if required */if ($goto == 'sql.php') {    $is_gotofile = false;    $goto = 'sql.php?'          . PMA_generate_common_url($db, $table)          . '&amp;sql_query=' . urlencode($sql_query);} // end if/** * Go back to further page if table should not be dropped */if (isset($btnDrop) && $btnDrop == __('No')) {    if (! empty($back)) {        $goto = $back;    }    if ($is_gotofile) {        if (strpos($goto, 'db_') === 0 && strlen($table)) {            $table = '';        }        $active_page = $goto;        include './' . PMA_securePath($goto);    } else {        PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . str_replace('&amp;', '&', $goto));    }    exit();} // end if/** * Displays the confirm page if required * * This part of the script is bypassed if $is_js_confirmed = 1 (already checked * with js) because possible security issue is not so important here: at most, * the confirm message isn't displayed. * * Also bypassed if only showing php code.or validating a SQL query */if (! $cfg['Confirm']    || isset($_REQUEST['is_js_confirmed'])    || isset($btnDrop)    // if we are coming from a "Create PHP code" or a "Without PHP Code"    // dialog, we won't execute the query anyway, so don't confirm    || isset($GLOBALS['show_as_php'])    || ! empty($GLOBALS['validatequery'])) {    $do_confirm = false;} else {    $do_confirm = isset($analyzed_sql[0]['queryflags']['need_confirm']);}if ($do_confirm) {    $stripped_sql_query = $sql_query;    include_once './libraries/header.inc.php';    if ($is_drop_database) {        echo '<h1 class="error">' . __('You are about to DESTROY a complete database!') . '</h1>';    }    echo '<form action="sql.php" method="post">' . "\n"        .PMA_generate_common_hidden_inputs($db, $table);    ?>    <input type="hidden" name="sql_query" value="<?php echo htmlspecialchars($sql_query); ?>" />    <input type="hidden" name="message_to_show" value="<?php echo isset($message_to_show) ? PMA_sanitize($message_to_show, true) : ''; ?>" />    <input type="hidden" name="goto" value="<?php echo $goto; ?>" />    <input type="hidden" name="back" value="<?php echo isset($back) ? PMA_sanitize($back, true) : ''; ?>" />    <input type="hidden" name="reload" value="<?php echo isset($reload) ? PMA_sanitize($reload, true) : 0; ?>" />    <input type="hidden" name="purge" value="<?php echo isset($purge) ? PMA_sanitize($purge, true) : ''; ?>" />    <input type="hidden" name="dropped_column" value="<?php echo isset($dropped_column) ? PMA_sanitize($dropped_column, true) : ''; ?>" />    <input type="hidden" name="show_query" value="<?php echo isset($show_query) ? PMA_sanitize($show_query, true) : ''; ?>" />    <?php    echo '<fieldset class="confirmation">' . "\n"        .'    <legend>' . __('Do you really want to ') . '</legend>'        .'    <tt>' . htmlspecialchars($stripped_sql_query) . '</tt>' . "\n"        .'</fieldset>' . "\n"        .'<fieldset class="tblFooters">' . "\n";    ?>    <input type="submit" name="btnDrop" value="<?php echo __('Yes'); ?>" id="buttonYes" />    <input type="submit" name="btnDrop" value="<?php echo __('No'); ?>" id="buttonNo" />    <?php    echo '</fieldset>' . "\n"       . '</form>' . "\n";    /**     * Displays the footer and exit     */    include './libraries/footer.inc.php';} // end if $do_confirm// Defines some variables// A table has to be created, renamed, dropped -> navi frame should be reloaded/** * @todo use the parser/analyzer */if (empty($reload)    && preg_match('/^(CREATE|ALTER|DROP)\s+(VIEW|TABLE|DATABASE|SCHEMA)\s+/i', $sql_query)) {    $reload = 1;}// SK -- Patch: $is_group added for use in calculation of total number of//              rows.//              $is_count is changed for more correct "LIMIT" clause//              appending in queries like//                "SELECT COUNT(...) FROM ... GROUP BY ..."/** * @todo detect all this with the parser, to avoid problems finding * those strings in comments or backquoted identifiers */$is_explain = $is_count = $is_export = $is_delete = $is_insert = $is_affected = $is_show = $is_maint = $is_analyse = $is_group = $is_func = $is_replace = false;if ($is_select) { // see line 141    $is_group = preg_match('@(GROUP[[:space:]]+BY|HAVING|SELECT[[:space:]]+DISTINCT)[[:space:]]+@i', $sql_query);    $is_func =  ! $is_group && (preg_match('@[[:space:]]+(SUM|AVG|STD|STDDEV|MIN|MAX|BIT_OR|BIT_AND)\s*\(@i', $sql_query));    $is_count = ! $is_group && (preg_match('@^SELECT[[:space:]]+COUNT\((.*\.+)?.*\)@i', $sql_query));    $is_export   = (preg_match('@[[:space:]]+INTO[[:space:]]+OUTFILE[[:space:]]+@i', $sql_query));    $is_analyse  = (preg_match('@[[:space:]]+PROCEDURE[[:space:]]+ANALYSE@i', $sql_query));} elseif (preg_match('@^EXPLAIN[[:space:]]+@i', $sql_query)) {    $is_explain  = true;} elseif (preg_match('@^DELETE[[:space:]]+@i', $sql_query)) {    $is_delete   = true;    $is_affected = true;} elseif (preg_match('@^(INSERT|LOAD[[:space:]]+DATA|REPLACE)[[:space:]]+@i', $sql_query)) {    $is_insert   = true;    $is_affected = true;    if (preg_match('@^(REPLACE)[[:space:]]+@i', $sql_query)) {        $is_replace = true;    }} elseif (preg_match('@^UPDATE[[:space:]]+@i', $sql_query)) {    $is_affected = true;} elseif (preg_match('@^[[:space:]]*SHOW[[:space:]]+@i', $sql_query)) {    $is_show     = true;} elseif (preg_match('@^(CHECK|ANALYZE|REPAIR|OPTIMIZE)[[:space:]]+TABLE[[:space:]]+@i', $sql_query)) {    $is_maint    = true;}// assign default full_sql_query$full_sql_query = $sql_query;// Handle remembered sorting order, only for single table queryif ($GLOBALS['cfg']['RememberSorting']    && ! ($is_count || $is_export || $is_func || $is_analyse)    && count($analyzed_sql[0]['select_expr']) == 0    && isset($analyzed_sql[0]['queryflags']['select_from'])    && count($analyzed_sql[0]['table_ref']) == 1) {    $pmatable = new PMA_Table($table, $db);    if (empty($analyzed_sql[0]['order_by_clause'])) {        $sorted_col = $pmatable->getUiProp(PMA_Table::PROP_SORTED_COLUMN);        if ($sorted_col) {            // retrieve the remembered sorting order for current table            $sql_order_to_append = ' ORDER BY ' . $sorted_col . ' ';            $full_sql_query = $analyzed_sql[0]['section_before_limit'] . $sql_order_to_append                . $analyzed_sql[0]['section_after_limit'];            // update the $analyzed_sql            $analyzed_sql[0]['section_before_limit'] .= $sql_order_to_append;            $analyzed_sql[0]['order_by_clause'] = $sorted_col;        }    } else {        // store the remembered table into session        $pmatable->setUiProp(PMA_Table::PROP_SORTED_COLUMN, $analyzed_sql[0]['order_by_clause']);    }}// Do append a "LIMIT" clause?if (($_SESSION['tmp_user_values']['max_rows'] != 'all')    && ! ($is_count || $is_export || $is_func || $is_analyse)    && isset($analyzed_sql[0]['queryflags']['select_from'])    && ! isset($analyzed_sql[0]['queryflags']['offset'])    && empty($analyzed_sql[0]['limit_clause'])) {    $sql_limit_to_append = ' LIMIT ' . $_SESSION['tmp_user_values']['pos']        . ', ' . $_SESSION['tmp_user_values']['max_rows'] . " ";    $full_sql_query  = $analyzed_sql[0]['section_before_limit'] . "\n"        . $sql_limit_to_append . $analyzed_sql[0]['section_after_limit'];    /**     * @todo pretty printing of this modified query     */    if (isset($display_query)) {        // if the analysis of the original query revealed that we found        // a section_after_limit, we now have to analyze $display_query        // to display it correctly        if (! empty($analyzed_sql[0]['section_after_limit'])            && trim($analyzed_sql[0]['section_after_limit']) != ';'        ) {            $analyzed_display_query = PMA_SQP_analyze(PMA_SQP_parse($display_query));            $display_query  = $analyzed_display_query[0]['section_before_limit']                . "\n" . $sql_limit_to_append . $analyzed_display_query[0]['section_after_limit'];        }    }}if (strlen($db)) {    PMA_DBI_select_db($db);}//  E x e c u t e    t h e    q u e r y// Only if we didn't ask to see the php code (mikebeck)if (isset($GLOBALS['show_as_php']) || ! empty($GLOBALS['validatequery'])) {    unset($result);    $num_rows = 0;    $unlim_num_rows = 0;} else {    if (isset($_SESSION['profiling']) && PMA_profilingSupported()) {        PMA_DBI_query('SET PROFILING=1;');    }    // Measure query time.    $querytime_before = array_sum(explode(' ', microtime()));    $result   = @PMA_DBI_try_query($full_sql_query, null, PMA_DBI_QUERY_STORE);    // If a stored procedure was called, there may be more results that are    // queued up and waiting to be flushed from the buffer. So let's do that.    while (true) {        if (! PMA_DBI_more_results()) {            break;        }        PMA_DBI_next_result();    }    $querytime_after = array_sum(explode(' ', microtime()));    $GLOBALS['querytime'] = $querytime_after - $querytime_before;    // Displays an error message if required and stop parsing the script    if ($error        = PMA_DBI_getError()) {        if ($is_gotofile) {            if (strpos($goto, 'db_') === 0 && strlen($table)) {                $table = '';            }            $active_page = $goto;            $message = PMA_Message::rawError($error);            if ($GLOBALS['is_ajax_request'] == true) {                PMA_ajaxResponse($message, false);            }            /**             * Go to target path.             */            include './' . PMA_securePath($goto);        } else {            $full_err_url = (preg_match('@^(db|tbl)_@', $err_url))                          ? $err_url . '&amp;show_query=1&amp;sql_query=' . urlencode($sql_query)                          : $err_url;            PMA_mysqlDie($error, $full_sql_query, '', $full_err_url);        }        exit;    }    unset($error);    // Gets the number of rows affected/returned    // (This must be done immediately after the query because    // mysql_affected_rows() reports about the last query done)    if (! $is_affected) {        $num_rows = ($result) ? @PMA_DBI_num_rows($result) : 0;    } elseif (! isset($num_rows)) {        $num_rows = @PMA_DBI_affected_rows();    }    // Grabs the profiling results    if (isset($_SESSION['profiling']) && PMA_profilingSupported()) {        $profiling_results = PMA_DBI_fetch_result('SHOW PROFILE;');    }    // Checks if the current database has changed    // This could happen if the user sends a query like "USE `database`;"    /**     * commented out auto-switching to active database - really required?     * bug #1814718 win: table list disappears (mixed case db names)     * https://sourceforge.net/support/tracker.php?aid=1814718     * @todo RELEASE test and comit or rollback before release    $current_db = PMA_DBI_fetch_value('SELECT DATABASE()');    if ($db !== $current_db) {        $db     = $current_db;        $reload = 1;    }    unset($current_db);     */    // tmpfile remove after convert encoding appended by Y.Kawada    if (function_exists('PMA_kanji_file_conv')        && (isset($textfile) && file_exists($textfile))    ) {        unlink($textfile);    }    // Counts the total number of rows for the same 'SELECT' query without the    // 'LIMIT' clause that may have been programatically added    if (empty($sql_limit_to_append)) {        $unlim_num_rows         = $num_rows;        // if we did not append a limit, set this to get a correct        // "Showing rows..." message        //$_SESSION['tmp_user_values']['max_rows'] = 'all';    } elseif ($is_select) {        //    c o u n t    q u e r y        // If we are "just browsing", there is only one table,        // and no WHERE clause (or just 'WHERE 1 '),        // we do a quick count (which uses MaxExactCount) because        // SQL_CALC_FOUND_ROWS is not quick on large InnoDB tables        // However, do not count again if we did it previously        // due to $find_real_end == true        if (! $is_group            && ! isset($analyzed_sql[0]['queryflags']['union'])            && ! isset($analyzed_sql[0]['queryflags']['distinct'])            && ! isset($analyzed_sql[0]['table_ref'][1]['table_name'])            && (empty($analyzed_sql[0]['where_clause']) || $analyzed_sql[0]['where_clause'] == '1 ')            && ! isset($find_real_end)        ) {            // "j u s t   b r o w s i n g"            $unlim_num_rows = PMA_Table::countRecords($db, $table);        } else { // n o t   " j u s t   b r o w s i n g "            // add select expression after the SQL_CALC_FOUND_ROWS            // for UNION, just adding SQL_CALC_FOUND_ROWS            // after the first SELECT works.            // take the left part, could be:            // SELECT            // (SELECT            $count_query = PMA_SQP_formatHtml($parsed_sql, 'query_only', 0, $analyzed_sql[0]['position_of_first_select'] + 1);            $count_query .= ' SQL_CALC_FOUND_ROWS ';            // add everything that was after the first SELECT            $count_query .= PMA_SQP_formatHtml($parsed_sql, 'query_only', $analyzed_sql[0]['position_of_first_select'] + 1);            // ensure there is no semicolon at the end of the            // count query because we'll probably add            // a LIMIT 1 clause after it            $count_query = rtrim($count_query);            $count_query = rtrim($count_query, ';');            // if using SQL_CALC_FOUND_ROWS, add a LIMIT to avoid            // long delays. Returned count will be complete anyway.            // (but a LIMIT would disrupt results in an UNION)            if (! isset($analyzed_sql[0]['queryflags']['union'])) {                $count_query .= ' LIMIT 1';            }            // run the count query            PMA_DBI_try_query($count_query);            // if (mysql_error()) {            // void.            // I tried the case            // (SELECT `User`, `Host`, `Db`, `Select_priv` FROM `db`)            // UNION (SELECT `User`, `Host`, "%" AS "Db",            // `Select_priv`            // FROM `user`) ORDER BY `User`, `Host`, `Db`;            // and although the generated count_query is wrong            // the SELECT FOUND_ROWS() work! (maybe it gets the            // count from the latest query that worked)            //            // another case where the count_query is wrong:            // SELECT COUNT(*), f1 from t1 group by f1            // and you click to sort on count(*)            // }            $unlim_num_rows = PMA_DBI_fetch_value('SELECT FOUND_ROWS()');        } // end else "just browsing"    } else { // not $is_select         $unlim_num_rows         = 0;    } // end rows total count    // if a table or database gets dropped, check column comments.    if (isset($purge) && $purge == '1') {        /**         * Cleanup relations.         */        include_once './libraries/relation_cleanup.lib.php';        if (strlen($table) && strlen($db)) {            PMA_relationsCleanupTable($db, $table);        } elseif (strlen($db)) {            PMA_relationsCleanupDatabase($db);        } else {            // VOID. No DB/Table gets deleted.        } // end if relation-stuff    } // end if ($purge)    // If a column gets dropped, do relation magic.    if (isset($dropped_column) && strlen($db) && strlen($table) && ! empty($dropped_column)) {        include_once './libraries/relation_cleanup.lib.php';        PMA_relationsCleanupColumn($db, $table, $dropped_column);        // to refresh the list of indexes (Ajax mode)        $extra_data['indexes_list'] = PMA_Index::getView($table, $db);    } // end if column was dropped} // end else "didn't ask to see php code"// No rows returned -> move back to the calling pageif ((0 == $num_rows && 0 == $unlim_num_rows) || $is_affected) {    if ($is_delete) {        $message = PMA_Message::deleted_rows($num_rows);    } elseif ($is_insert) {        if ($is_replace) {            /* For replace we get DELETED + INSERTED row count, so we have to call it affected */            $message = PMA_Message::affected_rows($num_rows);        } else {            $message = PMA_Message::inserted_rows($num_rows);        }        $insert_id = PMA_DBI_insert_id();        if ($insert_id != 0) {            // insert_id is id of FIRST record inserted in one insert, so if we inserted multiple rows, we had to increment this            $message->addMessage('[br]');            // need to use a temporary because the Message class            // currently supports adding parameters only to the first            // message            $_inserted = PMA_Message::notice(__('Inserted row id: %1$d'));            $_inserted->addParam($insert_id + $num_rows - 1);            $message->addMessage($_inserted);        }    } elseif ($is_affected) {        $message = PMA_Message::affected_rows($num_rows);        // Ok, here is an explanation for the !$is_select.        // The form generated by sql_query_form.lib.php        // and db_sql.php has many submit buttons        // on the same form, and some confusion arises from the        // fact that $message_to_show is sent for every case.        // The $message_to_show containing a success message and sent with        // the form should not have priority over errors    } elseif (! empty($message_to_show) && ! $is_select) {        $message = PMA_Message::rawSuccess(htmlspecialchars($message_to_show));    } elseif (! empty($GLOBALS['show_as_php'])) {        $message = PMA_Message::success(__('Showing as PHP code'));    } elseif (isset($GLOBALS['show_as_php'])) {        /* User disable showing as PHP, query is only displayed */        $message = PMA_Message::notice(__('Showing SQL query'));    } elseif (! empty($GLOBALS['validatequery'])) {        $message = PMA_Message::notice(__('Validated SQL'));    } else {        $message = PMA_Message::success(__('MySQL returned an empty result set (i.e. zero rows).'));    }    if (isset($GLOBALS['querytime'])) {        $_querytime = PMA_Message::notice(__('Query took %01.4f sec'));        $_querytime->addParam($GLOBALS['querytime']);        $message->addMessage('(');        $message->addMessage($_querytime);        $message->addMessage(')');    }    if ($GLOBALS['is_ajax_request'] == true) {        if ($cfg['ShowSQL']) {            $extra_data['sql_query'] = PMA_showMessage($message, $GLOBALS['sql_query'], 'success');        }        if (isset($GLOBALS['reload']) && $GLOBALS['reload'] == 1) {            $extra_data['reload'] = 1;            $extra_data['db'] = $GLOBALS['db'];        }        PMA_ajaxResponse($message, $message->isSuccess(), (isset($extra_data) ? $extra_data : ''));    }    if ($is_gotofile) {        $goto = PMA_securePath($goto);        // Checks for a valid target script        $is_db = $is_table = false;        if (isset($_REQUEST['purge']) && $_REQUEST['purge'] == '1') {            $table = '';            unset($url_params['table']);        }        include 'libraries/db_table_exists.lib.php';        if (strpos($goto, 'tbl_') === 0 && ! $is_table) {            if (strlen($table)) {                $table = '';            }            $goto = 'db_sql.php';        }        if (strpos($goto, 'db_') === 0 && ! $is_db) {            if (strlen($db)) {                $db = '';            }            $goto = 'main.php';        }        // Loads to target script        if ($goto != 'main.php') {            include_once './libraries/header.inc.php';        }        $active_page = $goto;        include './' . $goto;    } else {        // avoid a redirect loop when last record was deleted        if (0 == $num_rows && 'sql.php' == $cfg['DefaultTabTable']) {            $goto = str_replace('sql.php', 'tbl_structure.php', $goto);        }        PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . str_replace('&amp;', '&', $goto) . '&message=' . urlencode($message));    } // end else    exit();// end no rows returned} else {    // At least one row is returned -> displays a table with results    //If we are retrieving the full value of a truncated field or the original    // value of a transformed field, show it here and exit    if ($GLOBALS['grid_edit'] == true && $GLOBALS['cfg']['AjaxEnable']) {        $row = PMA_DBI_fetch_row($result);        $extra_data = array();        $extra_data['value'] = $row[0];        PMA_ajaxResponse(null, true, $extra_data);    }    if (isset($_REQUEST['ajax_request']) && isset($_REQUEST['table_maintenance'])) {        $GLOBALS['js_include'][] = 'functions.js';        $GLOBALS['js_include'][] = 'makegrid.js';        $GLOBALS['js_include'][] = 'sql.js';        // Gets the list of fields properties        if (isset($result) && $result) {            $fields_meta = PMA_DBI_get_fields_meta($result);            $fields_cnt  = count($fields_meta);        }        if (empty($disp_mode)) {            // see the "PMA_setDisplayMode()" function in            // libraries/display_tbl.lib.php            $disp_mode = 'urdr111101';        }        // hide edit and delete links for information_schema        if (PMA_is_system_schema($db)) {            $disp_mode = 'nnnn110111';        }        $message = PMA_Message::success($message);        echo PMA_showMessage($message, $GLOBALS['sql_query'], 'success');        PMA_displayTable($result, $disp_mode, $analyzed_sql);        exit();    }    // Displays the headers    if (isset($show_query)) {        unset($show_query);    }    if (isset($printview) && $printview == '1') {        include_once './libraries/header_printview.inc.php';    } else {        $GLOBALS['js_include'][] = 'functions.js';        $GLOBALS['js_include'][] = 'makegrid.js';        $GLOBALS['js_include'][] = 'sql.js';        unset($message);        if (! $GLOBALS['is_ajax_request'] || ! $GLOBALS['cfg']['AjaxEnable']) {            if (strlen($table)) {                include './libraries/tbl_common.php';                $url_query .= '&amp;goto=tbl_sql.php&amp;back=tbl_sql.php';                include './libraries/tbl_info.inc.php';                include './libraries/tbl_links.inc.php';            } elseif (strlen($db)) {                include './libraries/db_common.inc.php';                include './libraries/db_info.inc.php';            } else {                include './libraries/server_common.inc.php';                include './libraries/server_links.inc.php';            }        } else {            include_once './libraries/header.inc.php';            //we don't need to buffer the output in PMA_showMessage here.            //set a global variable and check against it in the function            $GLOBALS['buffer_message'] = false;        }    }    if (strlen($db)) {        $cfgRelation = PMA_getRelationsParam();    }    // Gets the list of fields properties    if (isset($result) && $result) {        $fields_meta = PMA_DBI_get_fields_meta($result);        $fields_cnt  = count($fields_meta);    }    if (! $GLOBALS['is_ajax_request']) {        //begin the sqlqueryresults div here. container div        echo '<div id="sqlqueryresults"';        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax"';        }        echo '>';    }    // Display previous update query (from tbl_replace)    if (isset($disp_query) && $cfg['ShowSQL'] == true) {        PMA_showMessage($disp_message, $disp_query, 'success');    }    if (isset($profiling_results)) {        // pma_token/url_query needed for chart export?><script type="text/javascript">pma_token = '<?php echo $_SESSION[' PMA_token ']; ?>';url_query = '<?php echo isset($url_query)?$url_query:PMA_generate_common_url($db);?>';$(document).ready(makeProfilingChart);</script><?php        echo '<fieldset><legend>' . __('Profiling') . '</legend>' . "\n";        echo '<div style="float: left;">';        echo '<table>' . "\n";        echo ' <tr>' .  "\n";        echo '  <th>' . __('Status') . PMA_showMySQLDocu('general-thread-states', 'general-thread-states') .  '</th>' . "\n";        echo '  <th>' . __('Time') . '</th>' . "\n";        echo ' </tr>' .  "\n";        $chart_json = Array();        foreach ($profiling_results as $one_result) {            echo ' <tr>' .  "\n";            echo '<td>' . ucwords($one_result['Status']) . '</td>' .  "\n";            echo '<td align="right">' . (PMA_formatNumber($one_result['Duration'], 3, 1)) . 's</td>' .  "\n";            $chart_json[ucwords($one_result['Status'])] = $one_result['Duration'];        }        echo '</table>' . "\n";        echo '</div>';        //require_once './libraries/chart.lib.php';        echo '<div id="profilingchart" style="display:none;">';        //PMA_chart_profiling($profiling_results);        echo json_encode($chart_json);        echo '</div>';        echo '</fieldset>' . "\n";    }    // Displays the results in a table    if (empty($disp_mode)) {        // see the "PMA_setDisplayMode()" function in        // libraries/display_tbl.lib.php        $disp_mode = 'urdr111101';    }    // hide edit and delete links for information_schema    if (PMA_is_system_schema($db)) {        $disp_mode = 'nnnn110111';    }    if (isset($label)) {        $message = PMA_message::success(__('Bookmark %s created'));        $message->addParam($label);        $message->display();    }    PMA_displayTable($result, $disp_mode, $analyzed_sql);    PMA_DBI_free_result($result);    // BEGIN INDEX CHECK See if indexes should be checked.    if (isset($query_type) && $query_type == 'check_tbl' && isset($selected) && is_array($selected)) {        foreach ($selected as $idx => $tbl_name) {            $check = PMA_Index::findDuplicates($tbl_name, $db);            if (! empty($check)) {                printf(__('Problems with indexes of table `%s`'), $tbl_name);                echo $check;            }        }    } // End INDEX CHECK    // Bookmark support if required    if ($disp_mode[7] == '1'        && (! empty($cfg['Bookmark']) && empty($id_bookmark))        && ! empty($sql_query)    ) {        echo "\n";        $goto = 'sql.php?'              . PMA_generate_common_url($db, $table)              . '&amp;sql_query=' . urlencode($sql_query)              . '&amp;id_bookmark=1';        ?><form action="sql.php" method="post" onsubmit="return emptyFormElements(this, 'fields[label]');"><?php echo PMA_generate_common_hidden_inputs(); ?><input type="hidden" name="goto" value="<?php echo $goto; ?>" /><input type="hidden" name="fields[dbase]" value="<?php echo htmlspecialchars($db); ?>" /><input type="hidden" name="fields[user]" value="<?php echo $cfg['Bookmark']['user']; ?>" /><input type="hidden" name="fields[query]" value="<?php echo urlencode(isset($complete_query) ? $complete_query : $sql_query); ?>" /><fieldset>    <legend><?php    echo PMA_getIcon('b_bookmark.png', __('Bookmark this SQL query'), true);?>    </legend>    <div class="formelement">        <label for="fields_label_"><?php echo __('Label'); ?>:</label>        <input type="text" id="fields_label_" name="fields[label]" value="" />    </div>    <div class="formelement">        <input type="checkbox" name="bkm_all_users" id="bkm_all_users" value="true" />        <label for="bkm_all_users"><?php echo __('Let every user access this bookmark'); ?></label>    </div>    <div class="clearfloat"></div></fieldset><fieldset class="tblFooters">    <input type="submit" name="store_bkm" value="<?php echo __('Bookmark this SQL query'); ?>" /></fieldset></form>        <?php    } // end bookmark support    // Do print the page if required    if (isset($printview) && $printview == '1') {        PMA_printButton();    } // end print case    if ($GLOBALS['is_ajax_request'] != true) {        echo '</div>'; // end sqlqueryresults div    }} // end rows returned/** * Displays the footer */if (! isset($_REQUEST['table_maintenance'])) {    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This library grabs the names and values of the variables sent or posted to a * script in $_GET, $_POST and $_FILES superglobals and sets simple globals * variables from them. It does the same work for $HTTP_ACCEPT_LANGUAGE and * $HTTP_AUTHORIZATION. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * copy values from one array to another, usually from a superglobal into $GLOBALS * * @param array   $array      values from * @param array   &$target    values to * @param bool    $sanitize   prevent importing key names in $_import_blacklist * @return bool */function PMA_recursive_extract($array, &$target, $sanitize = true){    if (! is_array($array)) {        return false;    }    if ($sanitize) {        $valid_variables = preg_replace($GLOBALS['_import_blacklist'], '',            array_keys($array));        $valid_variables = array_unique($valid_variables);    } else {        $valid_variables = array_keys($array);    }    foreach ($valid_variables as $key) {        if (strlen($key) === 0) {            continue;        }        if (is_array($array[$key])) {            // there could be a variable coming from a cookie of            // another application, with the same name as this array            unset($target[$key]);            PMA_recursive_extract($array[$key], $target[$key], false);        } else {            $target[$key] = $array[$key];        }    }    return true;}/** * @var array $_import_blacklist variable names that should NEVER be imported *                              from superglobals */$_import_blacklist = array(    '/^cfg$/i',         // PMA configuration    '/^server$/i',      // selected server    '/^db$/i',          // page to display    '/^table$/i',       // page to display    '/^goto$/i',        // page to display    '/^back$/i',        // the page go back    '/^lang$/i',        // selected language    '/^collation_connection$/i', //    '/^set_theme$/i',   //    '/^sql_query$/i',   // the query to be executed    '/^GLOBALS$/i',     // the global scope    '/^str.*$/i',       // PMA localized strings    '/^error_handler.*$/i',       // the error handler    '/^_.*$/i',         // PMA does not use variables starting with _ from extern    '/^.*\s+.*$/i',     // no whitespaces anywhere    '/^[0-9]+.*$/i',    // numeric variable names    //'/^PMA_.*$/i',      // other PMA variables);if (! empty($_GET)) {    PMA_recursive_extract($_GET, $GLOBALS);}if (! empty($_POST)) {    PMA_recursive_extract($_POST, $GLOBALS);}if (! empty($_FILES)) {    $_valid_variables = preg_replace($GLOBALS['_import_blacklist'], '', array_keys($_FILES));    foreach ($_valid_variables as $name) {        if (strlen($name) != 0) {            $$name = $_FILES[$name]['tmp_name'];            ${$name . '_name'} = $_FILES[$name]['name'];        }    }    unset($name, $value);}/** * globalize some environment variables */$server_vars = array('HTTP_ACCEPT_LANGUAGE', 'HTTP_AUTHORIZATION');foreach ($server_vars as $current) {    // it's not important HOW we detect html tags    // it's more important to prevent XSS    // so it's not important if we result in an invalid string,    // it's even better than a XSS capable string    if (PMA_getenv($current) && false === strpos(PMA_getenv($current), '<')) {        $$current = PMA_getenv($current);    // already imported by register_globals?    } elseif (! isset($$current) || false !== strpos($$current, '<')) {        $$current = '';    }}unset($server_vars, $current, $_import_blacklist);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build LaTeX dumps of tables * * @package PhpMyAdmin-Export * @subpackage Latex */if (! defined('PHPMYADMIN')) {    exit;}/* Messages used in default captions */$GLOBALS['strLatexContent'] = __('Content of table @TABLE@');$GLOBALS['strLatexContinued'] = __('(continued)');$GLOBALS['strLatexStructure'] = __('Structure of table @TABLE@');/** * */if (isset($plugin_list)) {    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && ! $plugin_param['single_table']) {        $hide_structure = true;    }    $plugin_list['latex'] = array(        'text' => __('LaTeX'),        'extension' => 'tex',        'mime_type' => 'application/x-tex',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'caption', 'text' => __('Include table caption')),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );    /* what to dump (structure/data/both) */    $plugin_list['latex']['options'][]        = array('type' => 'begin_group', 'name' => 'dump_what', 'text' => __('Dump table'));    $plugin_list['latex']['options'][]        = array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data')));    $plugin_list['latex']['options'][] = array('type' => 'end_group');    /* Structure options */    if (! $hide_structure) {        $plugin_list['latex']['options'][]            = array('type' => 'begin_group', 'name' => 'structure', 'text' => __('Object creation options'), 'force' => 'data');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_caption', 'text' => __('Table caption'), 'doc' => 'faq6_27');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_continued_caption', 'text' => __('Table caption (continued)'), 'doc' => 'faq6_27');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_label', 'text' => __('Label key'), 'doc' => 'faq6_27');        if (! empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['latex']['options'][]                = array('type' => 'bool', 'name' => 'relation', 'text' => __('Display foreign key relationships'));        }        $plugin_list['latex']['options'][]            = array('type' => 'bool', 'name' => 'comments', 'text' => __('Display comments'));        if (! empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['latex']['options'][]                = array('type' => 'bool', 'name' => 'mime', 'text' => __('Display MIME types'));        }        $plugin_list['latex']['options'][]            = array('type' => 'end_group');    }    /* Data */    $plugin_list['latex']['options'][]        = array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure');    $plugin_list['latex']['options'][]        = array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row'));    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_caption', 'text' => __('Table caption'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_continued_caption', 'text' => __('Table caption (continued)'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_label', 'text' => __('Label key'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:'));    $plugin_list['latex']['options'][]        = array('type' => 'end_group');} else {    /**     * Escapes some special characters for use in TeX/LaTeX     *     * @param string $string the string to convert     *     * @return  string      the converted string with escape codes     *     * @access  private     */    function PMA_texEscape($string)    {        $escape = array('$', '%', '{', '}',  '&',  '#', '_', '^');        $cnt_escape = count($escape);        for ($k=0; $k < $cnt_escape; $k++) {            $string = str_replace($escape[$k], '\\' . $escape[$k], $string);        }        return $string;    }    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportHeader()    {        global $crlf;        global $cfg;        $head  =  '% phpMyAdmin LaTeX Dump' . $crlf               .  '% version ' . PMA_VERSION . $crlf               .  '% http://www.phpmyadmin.net' . $crlf               .  '%' . $crlf               .  '% ' . __('Host') . ': ' . $cfg['Server']['host'];        if (! empty($cfg['Server']['port'])) {             $head .= ':' . $cfg['Server']['port'];        }        $head .= $crlf               .  '% ' . __('Generation Time') . ': ' . PMA_localisedDate() . $crlf               .  '% ' . __('Server version') . ': ' . PMA_MYSQL_STR_VERSION . $crlf               .  '% ' . __('PHP Version') . ': ' . phpversion() . $crlf;        return PMA_exportOutputHandler($head);    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        global $crlf;        $head = '% ' . $crlf              . '% ' . __('Database') . ': ' . '\'' . $db . '\'' . $crlf              . '% ' . $crlf;        return PMA_exportOutputHandler($head);    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in LaTeX table/sideways table environment     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = PMA_DBI_field_name($result, $i);        }        unset($i);        $buffer      = $crlf . '%' . $crlf . '% ' . __('Data') . ': ' . $table            . $crlf . '%' . $crlf . ' \\begin{longtable}{|';        for ($index = 0; $index < $columns_cnt; $index++) {            $buffer .= 'l|';        }        $buffer .= '} ' . $crlf ;        $buffer .= ' \\hline \\endhead \\hline \\endfoot \\hline ' . $crlf;        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_data_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\label{'                . PMA_expandUserString(                    $GLOBALS['latex_data_label'],                    null,                    array('table' => $table, 'database' => $db)                )                . '} \\\\';        }        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        // show column names        if (isset($GLOBALS['latex_columns'])) {            $buffer = '\\hline ';            for ($i = 0; $i < $columns_cnt; $i++) {                $buffer .= '\\multicolumn{1}{|c|}{\\textbf{'                    . PMA_texEscape(stripslashes($columns[$i])) . '}} & ';            }            $buffer = substr($buffer, 0, -2) . '\\\\ \\hline \hline ';            if (! PMA_exportOutputHandler($buffer . ' \\endfirsthead ' . $crlf)) {                return false;            }            if (isset($GLOBALS['latex_caption'])) {                if (! PMA_exportOutputHandler(                    '\\caption{'                    . PMA_expandUserString(                        $GLOBALS['latex_data_continued_caption'],                        'PMA_texEscape',                        array('table' => $table, 'database' => $db)                    )                    . '} \\\\ '                )) {                    return false;                }            }            if (! PMA_exportOutputHandler($buffer . '\\endhead \\endfoot' . $crlf)) {                return false;            }        } else {            if (! PMA_exportOutputHandler('\\\\ \hline')) {                return false;            }        }        // print the whole table        while ($record = PMA_DBI_fetch_assoc($result)) {            $buffer = '';            // print each row            for ($i = 0; $i < $columns_cnt; $i++) {                if (isset($record[$columns[$i]])                    && (! function_exists('is_null') || ! is_null($record[$columns[$i]]))                ) {                    $column_value = PMA_texEscape(stripslashes($record[$columns[$i]]));                } else {                    $column_value = $GLOBALS['latex_null'];                }                // last column ... no need for & character                if ($i == ($columns_cnt - 1)) {                    $buffer .= $column_value;                } else {                    $buffer .= $column_value . " & ";                }            }            $buffer .= ' \\\\ \\hline ' . $crlf;            if (! PMA_exportOutputHandler($buffer)) {                return false;            }        }        $buffer = ' \\end{longtable}' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        PMA_DBI_free_result($result);        return true;    } // end getTableLaTeX    /**     * Outputs table's structure     *     * @param string $db          database name     * @param string $table       table name     * @param string $crlf        the end of line sequence     * @param string $error_url   the url to go back in case of error     * @param bool   $do_relation whether to include relation comments     * @param bool   $do_comments whether to include the pmadb-style column comments     *                            as comments in the structure; this is deprecated     *                            but the parameter is left here because export.php     *                            calls PMA_exportStructure() also for other export     *                            types which use this parameter     * @param bool   $do_mime     whether to include mime comments     * @param bool   $dates       whether to include creation/update/check dates     * @param string $export_mode 'create_table', 'triggers', 'create_view', 'stand_in'     * @param string $export_type 'server', 'database', 'table'     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $buffer      = $crlf . '%' . $crlf . '% ' . __('Structure') . ': ' . $table            . $crlf . '%' . $crlf . ' \\begin{longtable}{';        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        $columns_cnt = 4;        $alignment = '|l|c|c|c|';        if ($do_relation && $have_rel) {            $columns_cnt++;            $alignment .= 'l|';        }        if ($do_comments) {            $columns_cnt++;            $alignment .= 'l|';        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;            $alignment .='l|';        }        $buffer = $alignment . '} ' . $crlf ;        $header = ' \\hline ';        $header .= '\\multicolumn{1}{|c|}{\\textbf{' . __('Column')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Type')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Null')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Default') . '}}';        if ($do_relation && $have_rel) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{' . __('Links to') . '}}';        }        if ($do_comments) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{' . __('Comments') . '}}';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{MIME}}';            $mime_map = PMA_getMIME($db, $table, true);        }        // Table caption for first page and label        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\label{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_label'],                    null,                    array('table' => $table, 'database' => $db)                )                . '} \\\\' . $crlf;        }        $buffer .= $header . ' \\\\ \\hline \\hline' . $crlf . '\\endfirsthead' . $crlf;        // Table caption on next pages        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_continued_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\\\ ' . $crlf;        }        $buffer .= $header . ' \\\\ \\hline \\hline \\endhead \\endfoot ' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        $fields = PMA_DBI_get_columns($db, $table);        foreach ($fields as $row) {            $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);            $type = $extracted_fieldspec['print_type'];            if (empty($type)) {                $type     = ' ';            }            if (! isset($row['Default'])) {                if ($row['Null'] != 'NO') {                    $row['Default'] = 'NULL';                }            }            $field_name = $row['Field'];            $local_buffer = $field_name . "\000" . $type . "\000"                . (($row['Null'] == '' || $row['Null'] == 'NO') ? __('No') : __('Yes'))                . "\000" . (isset($row['Default']) ? $row['Default'] : '');            if ($do_relation && $have_rel) {                $local_buffer .= "\000";                if (isset($res_rel[$field_name])) {                    $local_buffer .= $res_rel[$field_name]['foreign_table'] . ' ('                        . $res_rel[$field_name]['foreign_field'] . ')';                }            }            if ($do_comments && $cfgRelation['commwork']) {                $local_buffer .= "\000";                if (isset($comments[$field_name])) {                    $local_buffer .= $comments[$field_name];                }            }            if ($do_mime && $cfgRelation['mimework']) {                $local_buffer .= "\000";                if (isset($mime_map[$field_name])) {                    $local_buffer .= str_replace('_', '/', $mime_map[$field_name]['mimetype']);                }            }            $local_buffer = PMA_texEscape($local_buffer);            if ($row['Key']=='PRI') {                $pos=strpos($local_buffer, "\000");                $local_buffer = '\\textit{' . substr($local_buffer, 0, $pos) . '}' . substr($local_buffer, $pos);            }            if (in_array($field_name, $unique_keys)) {                $pos=strpos($local_buffer, "\000");                $local_buffer = '\\textbf{' . substr($local_buffer, 0, $pos) . '}' . substr($local_buffer, $pos);            }            $buffer = str_replace("\000", ' & ', $local_buffer);            $buffer .= ' \\\\ \\hline ' . $crlf;            if (! PMA_exportOutputHandler($buffer)) {                return false;            }        } // end while        $buffer = ' \\end{longtable}' . $crlf;        return PMA_exportOutputHandler($buffer);    } // end of the 'PMA_exportStructure' function} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/file_listing.php';require_once './libraries/plugin_interface.lib.php';require_once './libraries/display_import_ajax.lib.php';/* Scan for plugins */$import_list = PMA_getPlugins('./libraries/import/', $import_type);/* Fail if we didn't find any plugin */if (empty($import_list)) {    PMA_Message::error(__('Could not load import plugins, please check your installation!'))->display();    include './libraries/footer.inc.php';}?><iframe id="import_upload_iframe" name="import_upload_iframe" width="1" height="1" style="display: none;"></iframe><div id="import_form_status" style="display: none;"></div><div id="importmain">    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />    <script type="text/javascript">        //<![CDATA[        $(document).ready( function() {            // add event when user click on "Go" button            $('#buttonGo').bind('click', function() {                $('#upload_form_form').css("display", "none"); // hide form                $('#upload_form_status').css("display", "inline"); // show progress bar                $('#upload_form_status_info').css("display", "inline"); // - || -<?phpif ($_SESSION[$SESSION_KEY]["handler"]!="noplugin") {    ?>                $('#upload_form_status').html('<div class="upload_progress_bar_outer"><div id="status" class="upload_progress_bar_inner"></div></div>'); // add the progress bar                var finished = false;                var percent  = 0.0;                var total    = 0;                var complete = 0;                var perform_upload;                var periodical_upload;                var request_upload = [];                perform_upload = function () {                    new $.getJSON(                    'import_status.php?id=<?php echo $upload_id ; ?>&<?php echo PMA_generate_common_url(); ?>',                    {},                    function(response) {                        finished = response.finished;                        percent = response.percent;                        total = response.total;                        complete = response.complete;                          if (total==0 && complete==0 && percent==0) {                              $('#upload_form_status_info').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('The file being uploaded is probably larger than the maximum allowed size or this is a known bug in webkit based (Safari, Google Chrome, Arora etc.) browsers.'), false); ?>');                              $('#upload_form_status').css("display", "none");                          } else {                              $('#upload_form_status_info').html(' '+Math.round(percent)+'%, '+complete+'/'+total);                              $('#status').animate({width: Math.round(percent)*2+'px'},150);                          } // else                          if (finished==true) {                                    $('#importmain').css('display', 'none');                                    $('#import_form_status').css('display', 'inline');                                    $('#import_form_status').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('The file is being processed, please be patient.'), false); ?> ');                                    $('#import_form_status').load('import_status.php?message=true&<?php echo PMA_generate_common_url(); ?>'); // loads the message, either success or mysql error                                    <?php                                    // reload the left sidebar when the import is finished                                    $GLOBALS['reload']=true;                                    PMA_reloadNavigation(true);                                    ?>                          } // if finished                          else {                                window.setTimeout(perform_upload, 1000);                          }                      }                  );              }                window.setTimeout(perform_upload, 1000);    <?php} else { // no plugin available    ?>                        $('#upload_form_status_info').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('Please be patient, the file is being uploaded. Details about the upload are not available.'), false) . PMA_showDocu('faq2_9'); ?>');                        $('#upload_form_status').css("display", "none");    <?php} // else?>                    }); // onclick                }); // domready                document.write('<form action="import.php" method="post" enctype="multipart/form-data" name="import"<?php if ($_SESSION[$SESSION_KEY]["handler"]!="noplugin") echo ' target="import_upload_iframe"'; ?>>');                //]]>    </script>    <noscript>        <form action="import.php" method="post" enctype="multipart/form-data" name="import">    </noscript>    <input type="hidden" name="<?php echo $ID_KEY; ?>" value="<?php echo $upload_id ; ?>" />    <?php    if ($import_type == 'server') {        echo PMA_generate_common_hidden_inputs('', '', 1);    } elseif ($import_type == 'database') {        echo PMA_generate_common_hidden_inputs($db, '', 1);    } else {        echo PMA_generate_common_hidden_inputs($db, $table, 1);    }    echo '    <input type="hidden" name="import_type" value="' . $import_type . '" />'."\n";    ?>    <div class="exportoptions" id="header">        <h2>            <?php echo PMA_getImage('b_import.png', __('Import')); ?>            <?php            if ($import_type == 'server') {                echo __('Importing into the current server');            } elseif ($import_type == 'database') {                printf(__('Importing into the database "%s"'), htmlspecialchars($db));            } else {                printf(__('Importing into the table "%s"'), htmlspecialchars($table));            }?>        </h2>    </div>    <div class="importoptions">        <h3><?php echo __('File to Import:'); ?></h3>        <?php        // zip, gzip and bzip2 encode features        $compressions = array();        if ($cfg['GZipDump'] && @function_exists('gzopen')) {            $compressions[] = 'gzip';        }        if ($cfg['BZipDump'] && @function_exists('bzopen')) {            $compressions[] = 'bzip2';        }        if ($cfg['ZipDump'] && @function_exists('zip_open')) {            $compressions[] = 'zip';        }        // We don't have show anything about compression, when no supported        if ($compressions != array()) {            echo '<div class="formelementrow" id="compression_info">';            printf(__('File may be compressed (%s) or uncompressed.'), implode(", ", $compressions));            echo '<br />';            echo __('A compressed file\'s name must end in <b>.[format].[compression]</b>. Example: <b>.sql.zip</b>');            echo '</div>';        }?>        <div class="formelementrow" id="upload_form">        <?php if ($GLOBALS['is_upload'] && !empty($cfg['UploadDir'])) { ?>            <ul>            <li>                <input type="radio" name="file_location" id="radio_import_file" />                <?php PMA_browseUploadFile($max_upload_size); ?>            </li>            <li>                <input type="radio" name="file_location" id="radio_local_import_file" />                <?php PMA_selectUploadFile($import_list, $cfg['UploadDir']); ?>            </li>            </ul>        <?php } else if ($GLOBALS['is_upload']) {            $uid = uniqid("");            PMA_browseUploadFile($max_upload_size);        } else if (!$GLOBALS['is_upload']) {            PMA_Message::notice(__('File uploads are not allowed on this server.'))->display();        } else if (!empty($cfg['UploadDir'])) {            PMA_selectUploadFile($import_list, $cfg['UploadDir']);        } // end if (web-server upload directory)        ?>        </div>       <div class="formelementrow" id="charaset_of_file">        <?php // charset of file        if ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE) {            echo '<label for="charset_of_file">' . __('Character set of the file:') . '</label>';            reset($cfg['AvailableCharsets']);            echo '<select id="charset_of_file" name="charset_of_file" size="1">';            foreach ($cfg['AvailableCharsets'] as $temp_charset) {                echo '<option value="' . htmlentities($temp_charset) .  '"';                if ((empty($cfg['Import']['charset']) && $temp_charset == 'utf-8')                        || $temp_charset == $cfg['Import']['charset']) {                    echo ' selected="selected"';                }                echo '>' . htmlentities($temp_charset) . '</option>';            }            echo ' </select><br />';        } else {            echo '<label for="charset_of_file">' . __('Character set of the file:') . '</label>' . "\n";            echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_CHARSET, 'charset_of_file', 'charset_of_file', 'utf8', false);        } // end if (recoding)        ?>        </div>    </div>    <div class="importoptions">        <h3><?php echo __('Partial Import:'); ?></h3>        <?php        if (isset($timeout_passed) && $timeout_passed) {            echo '<div class="formelementrow">' . "\n";            echo '<input type="hidden" name="skip" value="' . $offset . '" />';            echo sprintf(__('Previous import timed out, after resubmitting will continue from position %d.'), $offset) . '';            echo '</div>' . "\n";        }        ?>        <div class="formelementrow">            <input type="checkbox" name="allow_interrupt" value="yes"                   id="checkbox_allow_interrupt" <?php echo PMA_pluginCheckboxCheck('Import', 'allow_interrupt'); ?>/>            <label for="checkbox_allow_interrupt"><?php echo __('Allow the interruption of an import in case the script detects it is close to the PHP timeout limit. <i>(This might be good way to import large files, however it can break transactions.)</i>'); ?></label><br />        </div>        <?php        if (! (isset($timeout_passed) && $timeout_passed)) {            ?>        <div class="formelementrow">            <label for="text_skip_queries"><?php echo __('Number of rows to skip, starting from the first row:'); ?></label>            <input type="text" name="skip_queries" value="<?php echo PMA_pluginGetDefault('Import', 'skip_queries');?>" id="text_skip_queries" />        </div>            <?php        } else {            // If timeout has passed,            // do not show the Skip dialog to avoid the risk of someone            // entering a value here that would interfere with "skip"            ?>        <input type="hidden" name="skip_queries" value="<?php echo PMA_pluginGetDefault('Import', 'skip_queries');?>" id="text_skip_queries" />            <?php        }        ?>    </div>    <div class="importoptions">        <h3><?php echo __('Format:'); ?></h3>        <?php echo PMA_pluginGetChoice('Import', 'format', $import_list); ?>        <div id="import_notification"></div>    </div>    <div class="importoptions" id="format_specific_opts">        <h3><?php echo __('Format-Specific Options:'); ?></h3>        <p class="no_js_msg" id="scroll_to_options_msg">Scroll down to fill in the options for the selected format and ignore the options for other formats.</p>        <?php echo PMA_pluginGetOptions('Import', $import_list); ?>    </div>        <div class="clearfloat"></div>    </div>    <?php    // Encoding setting form appended by Y.Kawada    if (function_exists('PMA_set_enc_form')) { ?>        <div class="importoptions" id="kanji_encoding">            <h3><?php echo __('Encoding Conversion:'); ?></h3>            <?php echo PMA_set_enc_form('            '); ?>        </div>    <?php }    echo "\n";    ?>    <div class="importoptions" id="submit">        <input type="submit" value="<?php echo __('Go'); ?>" id="buttonGo" />    </div></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Holds class PMA_Error_Handler * * @package PhpMyAdmin *//** * */require_once './libraries/Error.class.php';/** * handling errors * * @package PhpMyAdmin */class PMA_Error_Handler{    /**     * holds errors to be displayed or reported later ...     *     * @var array of PMA_Error     */    protected $_errors = array();    /**     * Constructor - set PHP error handler     *     */    public function __construct()    {        set_error_handler(array($this, 'handleError'));    }    /**     * Destructor     *     * stores errors in session     *     */    public function __destruct()    {        if (isset($_SESSION)) {            if (! isset($_SESSION['errors'])) {                $_SESSION['errors'] = array();            }            if ($GLOBALS['cfg']['Error_Handler']['gather']) {                // remember all errors                $_SESSION['errors'] = array_merge($_SESSION['errors'], $this->_errors);            } else {                // remember only not displayed errors                foreach ($this->_errors as $key => $error) {                    /**                     * We don't want to store all errors here as it would explode user                     * session. In case  you want them all set                     * $GLOBALS['cfg']['Error_Handler']['gather'] to true                     */                    if (count($_SESSION['errors']) >= 20) {                        $error = new PMA_Error(0, __('Too many error messages, some are not displayed.'), __FILE__, __LINE__);                        $_SESSION['errors'][$error->getHash()] = $error;                    }                    if (($error instanceof PMA_Error) && ! $error->isDisplayed()) {                        $_SESSION['errors'][$key] = $error;                    }                }            }        }    }    /**     * returns array with all errors     *     * @return array PMA_Error_Handler::$_errors     */    protected function getErrors()    {        $this->_checkSavedErrors();        return $this->_errors;    }    /**     * Error handler - called when errors are triggered/occured     *     * The following error types cannot be handled with a user defined function:     * E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR,     * E_COMPILE_WARNING,     * and most of E_STRICT raised in the file where set_error_handler() is called.     *     * Do not use the context parameter as we want to avoid storing the     * complete $GLOBALS inside $_SESSION['errors']     *     * @param integer $errno     * @param string  $errstr     * @param string  $errfile     * @param integer $errline     */    public function handleError($errno, $errstr, $errfile, $errline)    {        // create error object        $error = new PMA_Error($errno, htmlspecialchars($errstr), $errfile, $errline);        // do not repeat errors        $this->_errors[$error->getHash()] = $error;        switch ($error->getNumber()) {            case E_USER_NOTICE:            case E_USER_WARNING:            case E_STRICT:            case E_DEPRECATED:            case E_NOTICE:            case E_WARNING:            case E_CORE_WARNING:            case E_COMPILE_WARNING:            case E_USER_ERROR:            case E_RECOVERABLE_ERROR:                // just collect the error                // display is called from outside                break;            case E_ERROR:            case E_PARSE:            case E_CORE_ERROR:            case E_COMPILE_ERROR:            default:                // FATAL error, dislay it and exit                $this->_dispFatalError($error);                exit;                break;        }    }    /**     * log error to configured log facility     *     * @todo    finish!     * @param PMA_Error $error     * @return bool     */    protected function _logError($error)    {        return error_log($error->getMessage());    }    /**     * trigger a custom error     *     * @param string  $errorInfo     * @param integer $errorNumber     * @param string  $file     * @param integer $line     */    public function triggerError($errorInfo, $errorNumber = null, $file = null, $line = null)    {        // we could also extract file and line from backtrace and call handleError() directly        trigger_error($errorInfo, $errorNumber);    }    /**     * display fatal error and exit     *     * @param PMA_Error $error     */    protected function _dispFatalError($error)    {        if (! headers_sent()) {            $this->_dispPageStart($error);        }        $error->display();        $this->_dispPageEnd();        exit;    }    /**     * display the whole error page with all errors     *     */    public function dispErrorPage()    {        if (! headers_sent()) {            $this->_dispPageStart();        }        $this->dispAllErrors();        $this->_dispPageEnd();    }    /**     * display user errors not displayed     *     */    public function dispUserErrors()    {        foreach ($this->getErrors() as $error) {            if ($error->isUserError() && ! $error->isDisplayed()) {                $error->display();            }        }    }    /**     * display HTML header     *     * @param PMA_error $error     */    protected function _dispPageStart($error = null)    {        echo '<html><head><title>';        if ($error) {            echo $error->getTitle();        } else {            echo 'phpMyAdmin error reporting page';        }        echo '</title></head>';    }    /**     * display HTML footer     *     */    protected function _dispPageEnd()    {        echo '</body></html>';    }    /**     * display all errors regardless already displayed or user errors     *     */    public function dispAllErrors()    {        foreach ($this->getErrors() as $error) {            $error->display();        }    }    /**     * display errors not displayed     *     */    public function dispErrors()    {        if ($GLOBALS['cfg']['Error_Handler']['display']) {            foreach ($this->getErrors() as $error) {                if ($error instanceof PMA_Error) {                    if (! $error->isDisplayed()) {                        $error->display();                    }                } else {                    var_dump($error);                }            }        } else {            $this->dispUserErrors();        }    }    /**     * look in session for saved errors     *     */    protected function _checkSavedErrors()    {        if (isset($_SESSION['errors'])) {            // restore saved errors            foreach ($_SESSION['errors'] as $hash => $error) {                if ($error instanceof PMA_Error && ! isset($this->_errors[$hash])) {                    $this->_errors[$hash] = $error;                }            }            //$this->_errors = array_merge($_SESSION['errors'], $this->_errors);            // delet stored errors            $_SESSION['errors'] = array();            unset($_SESSION['errors']);        }    }    /**     * return count of errors     *     * @return  integer number of errors occoured     */    public function countErrors()    {        return count($this->getErrors());    }    /**     * return count of user errors     *     * @return  integer number of user errors occoured     */    public function countUserErrors()    {        $count = 0;        if ($this->countErrors()) {            foreach ($this->getErrors() as $error) {                if ($error->isUserError()) {                    $count++;                }            }        }        return $count;    }    /**     * whether use errors occured or not     *     * @return  boolean     */    public function hasUserErrors()    {        return (bool) $this->countUserErrors();    }    /**     * whether errors occured or not     *     * @return  boolean     */    public function hasErrors()    {        return (bool) $this->countErrors();    }    /**     * number of errors to be displayed     *     * @return integer number of errors to be displayed     */    public function countDisplayErrors()    {        if ($GLOBALS['cfg']['Error_Handler']['display']) {            return $this->countErrors();        } else {            return $this->countUserErrors();        }    }    /**     * whether there are errors to display or not     *     * @return boolean     */    public function hasDisplayErrors()    {        return (bool) $this->countDisplayErrors();    }}?>
