<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Gets the list of the table in the current db and informations about these * tables if possible * * fills tooltip arrays and provides $tables, $num_tables, $is_show_stats * and $db_is_information_schema * * speedup view on locked tables * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * requirements */require_once './libraries/common.inc.php';/** * limits for table list */if (! isset($_SESSION['tmp_user_values']['table_limit_offset']) || $_SESSION['tmp_user_values']['table_limit_offset_db'] != $db) {    $_SESSION['tmp_user_values']['table_limit_offset'] = 0;    $_SESSION['tmp_user_values']['table_limit_offset_db'] = $db;}if (isset($_REQUEST['pos'])) {    $_SESSION['tmp_user_values']['table_limit_offset'] = (int) $_REQUEST['pos'];}$pos = $_SESSION['tmp_user_values']['table_limit_offset'];/** * fills given tooltip arrays * * @param array   $tooltip_truename   tooltip data * @param array   $tooltip_aliasname  tooltip data * @param array   $table              tabledata */function PMA_fillTooltip(&$tooltip_truename, &$tooltip_aliasname, $table){    if (strstr($table['Comment'], '; InnoDB free') === false) {        if (!strstr($table['Comment'], 'InnoDB free') === false) {            // here we have just InnoDB generated part            $table['Comment'] = '';        }    } else {        // remove InnoDB comment from end, just the minimal part (*? is non greedy)        $table['Comment'] = preg_replace('@; InnoDB free:.*?$@', '', $table['Comment']);    }    // views have VIEW as comment so it's not a real comment put by a user    if ('VIEW' == $table['Comment']) {        $table['Comment'] = '';    }    if (empty($table['Comment'])) {        $table['Comment'] = $table['Name'];    } else {        // why?        $table['Comment'] .= ' ';    }    if ($GLOBALS['cfg']['ShowTooltipAliasTB']     && $GLOBALS['cfg']['ShowTooltipAliasTB'] !== 'nested') {        $tooltip_truename[$table['Name']] = $table['Comment'];        $tooltip_aliasname[$table['Name']] = $table['Name'];    } else {        $tooltip_truename[$table['Name']] = $table['Name'];        $tooltip_aliasname[$table['Name']] = $table['Comment'];    }    if (isset($table['Create_time']) && !empty($table['Create_time'])) {        $tooltip_aliasname[$table['Name']] .= ', ' . __('Creation')             . ': ' . PMA_localisedDate(strtotime($table['Create_time']));    }    if (! empty($table['Update_time'])) {        $tooltip_aliasname[$table['Name']] .= ', ' . __('Last update')             . ': ' . PMA_localisedDate(strtotime($table['Update_time']));    }    if (! empty($table['Check_time'])) {        $tooltip_aliasname[$table['Name']] .= ', ' . __('Last check')             . ': ' . PMA_localisedDate(strtotime($table['Check_time']));    }}PMA_checkParameters(array('db'));/** * @global bool whether to display extended stats */$is_show_stats = $cfg['ShowStats'];/** * @global bool whether selected db is information_schema */$db_is_information_schema = false;if (PMA_is_system_schema($db)) {    $is_show_stats = false;    $db_is_information_schema = true;}/** * @global array information about tables in db */$tables = array();// When used in Nested table group mode, only show tables matching the given groupnameif (PMA_isValid($tbl_group) && !$cfg['ShowTooltipAliasTB']) {    $tbl_group_sql = ' LIKE "' . PMA_escape_mysql_wildcards($tbl_group) . '%"';} else {    $tbl_group_sql = '';}if ($cfg['ShowTooltip']) {    $tooltip_truename = array();    $tooltip_aliasname = array();}// Special speedup for newer MySQL Versions (in 4.0 format changed)if (true === $cfg['SkipLockedTables']) {    $db_info_result = PMA_DBI_query('SHOW OPEN TABLES FROM ' . PMA_backquote($db) . ';');    // Blending out tables in use    if ($db_info_result && PMA_DBI_num_rows($db_info_result) > 0) {        while ($tmp = PMA_DBI_fetch_row($db_info_result)) {            // if in use memorize tablename            if (preg_match('@in_use=[1-9]+@i', $tmp[1])) {                $sot_cache[$tmp[0]] = true;            }        }        PMA_DBI_free_result($db_info_result);        if (isset($sot_cache)) {            $db_info_result = PMA_DBI_query(                'SHOW TABLES FROM ' . PMA_backquote($db) . $tbl_group_sql . ';',                null, PMA_DBI_QUERY_STORE);            if ($db_info_result && PMA_DBI_num_rows($db_info_result) > 0) {                while ($tmp = PMA_DBI_fetch_row($db_info_result)) {                    if (! isset($sot_cache[$tmp[0]])) {                        $sts_result  = PMA_DBI_query(                            'SHOW TABLE STATUS FROM ' . PMA_backquote($db)                             . ' LIKE \'' . PMA_sqlAddSlashes($tmp[0], true) . '\';');                        $sts_tmp     = PMA_DBI_fetch_assoc($sts_result);                        PMA_DBI_free_result($sts_result);                        unset($sts_result);                        if (! isset($sts_tmp['Type']) && isset($sts_tmp['Engine'])) {                            $sts_tmp['Type'] =& $sts_tmp['Engine'];                        }                        if (!empty($tbl_group) && $cfg['ShowTooltipAliasTB']                         && !preg_match('@' . preg_quote($tbl_group, '@') . '@i', $sts_tmp['Comment'])) {                            continue;                        }                        if ($cfg['ShowTooltip']) {                            PMA_fillTooltip($tooltip_truename, $tooltip_aliasname, $sts_tmp);                        }                        $tables[$sts_tmp['Name']]    = $sts_tmp;                    } else { // table in use                        $tables[$tmp[0]]    = array('Name' => $tmp[0]);                    }                }                if ($GLOBALS['cfg']['NaturalOrder']) {                    uksort($tables, 'strnatcasecmp');                }                $sot_ready = true;            } elseif ($db_info_result) {                PMA_DBI_free_result($db_info_result);            }            unset($sot_cache);        }        unset($tmp);    } elseif ($db_info_result) {        PMA_DBI_free_result($db_info_result);    }}if (! isset($sot_ready)) {    // Set some sorting defaults    $sort = 'Name';    $sort_order = 'ASC';    if (isset($_REQUEST['sort'])) {        $sortable_name_mappings = array(            'table'     => 'Name',            'records'   => 'Rows',            'type'      => 'Engine',            'collation' => 'Collation',            'size'      => 'Data_length',            'overhead'  => 'Data_free'        );        // Make sure the sort type is implemented        if (isset($sortable_name_mappings[$_REQUEST['sort']])) {            $sort = $sortable_name_mappings[$_REQUEST['sort']];            if ($_REQUEST['sort_order'] == 'DESC') {                $sort_order = 'DESC';            }        }    }    if (! empty($tbl_group) && ! $cfg['ShowTooltipAliasTB']) {        // only tables for selected group        $tables = PMA_DBI_get_tables_full($db, $tbl_group, true, null, 0, false, $sort, $sort_order);    } elseif (! empty($tbl_group) && $cfg['ShowTooltipAliasTB']) {        // only tables for selected group,        // but grouping is done on comment ...        $tables = PMA_DBI_get_tables_full($db, $tbl_group, 'comment', null, 0, false, $sort, $sort_order);    } else {        // all tables in db        // - get the total number of tables        //  (needed for proper working of the MaxTableList feature)        $tables = PMA_DBI_get_tables($db);        $total_num_tables = count($tables);        if (isset($sub_part) && $sub_part == '_export') {            // (don't fetch only a subset if we are coming from db_export.php,            // because I think it's too risky to display only a subset of the            // table names when exporting a db)            /**             *             * @todo Page selector for table names?             */            $tables = PMA_DBI_get_tables_full($db, false, false, null, 0, false, $sort, $sort_order);        } else {            // fetch the details for a possible limited subset            $tables = PMA_DBI_get_tables_full($db, false, false, null, $pos, true, $sort, $sort_order);        }    }    if ($cfg['ShowTooltip']) {        foreach ($tables as $each_table) {            PMA_fillTooltip($tooltip_truename, $tooltip_aliasname, $each_table);        }    }}/** * @global int count of tables in db */$num_tables = count($tables);//  (needed for proper working of the MaxTableList feature)if (! isset($total_num_tables)) {    $total_num_tables = $num_tables;}/** * cleanup */unset($each_table, $tbl_group_sql, $db_info_result);/** * Displays top menu links * If in an Ajax request, we do not need to show this */if ($GLOBALS['is_ajax_request'] != true) {    include './libraries/db_links.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build SQL dumps of tables * * @package PhpMyAdmin-Export * @subpackage SQL */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $hide_sql       = false;    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && !$plugin_param['single_table']) {        $hide_structure = true;        $hide_sql       = true;    }    if (!$hide_sql) {        $plugin_list['sql'] = array(            'text' => __('SQL'),            'extension' => 'sql',            'mime_type' => 'text/x-sql',            'options' => array());        $plugin_list['sql']['options'][] = array(            'type' => 'begin_group',            'name' => 'general_opts');        /* comments */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'bool',                'name' => 'include_comments',                'text' => __('Display comments <i>(includes info such as export timestamp, PHP version, and server version)</i>')            ));        $plugin_list['sql']['options'][] = array(            'type' => 'text',            'name' => 'header_comment',            'text' => __('Additional custom header comment (\n splits lines):')            );        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'dates',            'text' => __('Include a timestamp of when databases were created, last updated, and last checked')            );        if (!empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'relation',                'text' => __('Display foreign key relationships')                );        }        if (!empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'mime',                'text' => __('Display MIME types')                );        }        $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        /* end comments */        /* enclose in a transaction */        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'use_transaction',            'text' => __('Enclose export in a transaction'),            'doc' => array('programs', 'mysqldump', 'option_mysqldump_single-transaction')            );        /* disable foreign key checks */        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'disable_fk',            'text' => __('Disable foreign key checks'),            'doc' => array(                'manual_MySQL_Database_Administration',                'server-system-variables',                'sysvar_foreign_key_checks')            );        $plugin_list['sql']['options_text'] = __('Options');        /* compatibility maximization */        $compats = PMA_DBI_getCompatibilities();        if (count($compats) > 0) {            $values = array();            foreach ($compats as $val) {                $values[$val] = $val;            }            $plugin_list['sql']['options'][] = array(                'type' => 'select',                'name' => 'compatibility',                'text' => __('Database system or older MySQL server to maximize output compatibility with:'),                'values' => $values,                'doc' => array(                    'manual_MySQL_Database_Administration',                    'Server_SQL_mode')                );            unset($values);        }        /* server export options */        if ($plugin_param['export_type'] == 'server') {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'drop_database',                'text' => sprintf(__('Add %s statement'), '<code>DROP DATABASE</code>')                );         }        /* what to dump (structure/data/both) */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'message_only',                'text' => __('Dump table')            ));        $plugin_list['sql']['options'][] = array(            'type' => 'radio',            'name' => 'structure_or_data',            'values' => array(                'structure' => __('structure'),                'data' => __('data'),                'structure_and_data' => __('structure and data')            ));        $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        $plugin_list['sql']['options'][] = array('type' => 'end_group');        /* begin Structure options */        if (!$hide_structure) {            $plugin_list['sql']['options'][] = array(                'type' => 'begin_group',                'name' => 'structure',                'text' => __('Object creation options'),                'force' => 'data'                );            /* begin SQL Statements */            $plugin_list['sql']['options'][] = array(                'type' => 'begin_subgroup',                'subgroup_header' => array(                    'type' => 'message_only',                    'name' => 'add_statements',                    'text' => __('Add statements:')                ));            if ($plugin_param['export_type'] == 'table') {                if (PMA_Table::isView($GLOBALS['db'], $GLOBALS['table'])) {                    $drop_clause = '<code>DROP VIEW</code>';                } else {                    $drop_clause = '<code>DROP TABLE</code>';                }            } else {                if (PMA_DRIZZLE) {                    $drop_clause = '<code>DROP TABLE</code>';                } else {                    $drop_clause = '<code>DROP TABLE / VIEW / PROCEDURE / FUNCTION</code>';                    if (PMA_MYSQL_INT_VERSION > 50100) {                        $drop_clause .= '<code> / EVENT</code>';                    }                }            }            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'drop_table',                'text' => sprintf(__('Add %s statement'), $drop_clause)                );            // Drizzle doesn't support procedures and functions            if (!PMA_DRIZZLE) {                $plugin_list['sql']['options'][] = array(                    'type' => 'bool',                    'name' => 'procedure_function',                    'text' => sprintf(__('Add %s statement'), '<code>CREATE PROCEDURE / FUNCTION' . (PMA_MYSQL_INT_VERSION > 50100 ? ' / EVENT</code>' : '</code>'))                    );            }            /* begin CREATE TABLE statements*/            $plugin_list['sql']['options'][] = array(                'type' => 'begin_subgroup',                'subgroup_header' => array(                    'type' => 'bool',                    'name' => 'create_table_statements',                    'text' => __('<code>CREATE TABLE</code> options:')                ));            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'if_not_exists',                'text' => '<code>IF NOT EXISTS</code>'                );            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'auto_increment',                'text' => '<code>AUTO_INCREMENT</code>'                );            $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');            /* end CREATE TABLE statements */            $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');            /* end SQL statements */            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'backquotes',                'text' => __('Enclose table and column names with backquotes <i>(Protects column and table names formed with special characters or keywords)</i>')                );            $plugin_list['sql']['options'][] = array('type' => 'end_group');        }        /* end Structure options */        /* begin Data options */         $plugin_list['sql']['options'][] = array(            'type' => 'begin_group',            'name' => 'data',            'text' => __('Data dump options'),            'force' => 'structure'            );        /* begin SQL statements */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'message_only',                'text' => __('Instead of <code>INSERT</code> statements, use:')            ));        // Not supported in Drizzle        if (!PMA_DRIZZLE) {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'delayed',                'text' => __('<code>INSERT DELAYED</code> statements'),                'doc' => array('manual_MySQL_Database_Administration', 'insert_delayed')                );        }        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'ignore',            'text' => __('<code>INSERT IGNORE</code> statements'),            'doc' => array('manual_MySQL_Database_Administration', 'insert')            );        $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        /* end SQL statements */        /* Function to use when dumping data */        $plugin_list['sql']['options'][] = array(            'type' => 'select',            'name' => 'type',            'text' => __('Function to use when dumping data:'),            'values' => array(                'INSERT' => 'INSERT',                'UPDATE' => 'UPDATE',                'REPLACE' => 'REPLACE'                )            );        /* Syntax to use when inserting data */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'message_only',                'text' => __('Syntax to use when inserting data:')            ));        $plugin_list['sql']['options'][] = array(            'type' => 'radio',            'name' => 'insert_syntax',            'values' => array(                'complete' => __('include column names in every <code>INSERT</code> statement <br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name (col_A,col_B,col_C) VALUES (1,2,3)</code>'),                'extended' => __('insert multiple rows in every <code>INSERT</code> statement<br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name VALUES (1,2,3), (4,5,6), (7,8,9)</code>'),                'both' => __('both of the above<br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name (col_A,col_B) VALUES (1,2,3), (4,5,6), (7,8,9)</code>'),                'none' => __('neither of the above<br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name VALUES (1,2,3)</code>')            ));          $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        /* Max length of query */        $plugin_list['sql']['options'][] = array(            'type' => 'text',            'name' => 'max_query_size',            'text' => __('Maximal length of created query')            );        /* Dump binary columns in hexadecimal */        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'hex_for_blob',            'text' => __('Dump binary columns in hexadecimal notation <i>(for example, "abc" becomes 0x616263)</i>')            );        // Drizzle works only with UTC timezone        if (!PMA_DRIZZLE) {            /* Dump time in UTC */            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'utc_time',                'text' => __('Dump TIMESTAMP columns in UTC <i>(enables TIMESTAMP columns to be dumped and reloaded between servers in different time zones)</i>')                );        }        $plugin_list['sql']['options'][] = array('type' => 'end_group');         /* end Data options */    }} else {    /**     * Avoids undefined variables, use NULL so isset() returns false     */    if (! isset($GLOBALS['sql_backquotes'])) {        $GLOBALS['sql_backquotes'] = null;    }    /**     * Exports routines (procedures and functions)     *     * @param string  $db     * @return  bool  Whether it succeeded     *     * @access  public     */    function PMA_exportRoutines($db) {        global $crlf;        $text = '';        $delimiter = '$$';        $procedure_names = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');        $function_names = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');        if ($procedure_names || $function_names) {            $text .= $crlf                . 'DELIMITER ' . $delimiter . $crlf;        }        if ($procedure_names) {            $text .=                PMA_exportComment()              . PMA_exportComment(__('Procedures'))              . PMA_exportComment();            foreach ($procedure_names as $procedure_name) {                if (! empty($GLOBALS['sql_drop_table'])) {                    $text .= 'DROP PROCEDURE IF EXISTS '                        . PMA_backquote($procedure_name)                        . $delimiter . $crlf;                }                $text .= PMA_DBI_get_definition($db, 'PROCEDURE', $procedure_name)                    . $delimiter . $crlf . $crlf;            }        }        if ($function_names) {            $text .=                PMA_exportComment()              . PMA_exportComment(__('Functions'))              . PMA_exportComment();            foreach ($function_names as $function_name) {                if (! empty($GLOBALS['sql_drop_table'])) {                    $text .= 'DROP FUNCTION IF EXISTS '                        . PMA_backquote($function_name)                        . $delimiter . $crlf;                }                $text .= PMA_DBI_get_definition($db, 'FUNCTION', $function_name)                    . $delimiter . $crlf . $crlf;            }        }        if ($procedure_names || $function_names) {            $text .= 'DELIMITER ;' . $crlf;        }        if (! empty($text)) {            return PMA_exportOutputHandler($text);        } else {            return false;        }    }    /**     * Possibly outputs comment     *     * @param string  $text  Text of comment     * @return  string      The formatted comment     *     * @access  private     */    function PMA_exportComment($text = '')    {        if (isset($GLOBALS['sql_include_comments']) && $GLOBALS['sql_include_comments']) {            // see http://dev.mysql.com/doc/refman/5.0/en/ansi-diff-comments.html            return '--' . (empty($text) ? '' : ' ') . $text . $GLOBALS['crlf'];        } else {            return '';        }    }    /**     * Possibly outputs CRLF     *     * @return  string  $crlf or nothing     *     * @access private     */    function PMA_possibleCRLF()    {        if (isset($GLOBALS['sql_include_comments']) && $GLOBALS['sql_include_comments']) {            return $GLOBALS['crlf'];        } else {            return '';        }    }    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        global $crlf;        global $mysql_charset_map;        $foot = '';        if (isset($GLOBALS['sql_disable_fk'])) {            $foot .=  'SET FOREIGN_KEY_CHECKS=1;' . $crlf;        }        if (isset($GLOBALS['sql_use_transaction'])) {            $foot .=  'COMMIT;' . $crlf;        }        // restore connection settings        $charset_of_file = isset($GLOBALS['charset_of_file']) ? $GLOBALS['charset_of_file'] : '';        if (!empty($GLOBALS['asfile']) && isset($mysql_charset_map[$charset_of_file]) && !PMA_DRIZZLE) {            $foot .=  $crlf                    . '/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;' . $crlf                    . '/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;' . $crlf                    . '/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;' . $crlf;        }        /* Restore timezone */        if (isset($GLOBALS['sql_utc_time']) && $GLOBALS['sql_utc_time']) {            PMA_DBI_query('SET time_zone = "' . $GLOBALS['old_tz'] . '"');        }        return PMA_exportOutputHandler($foot);    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        global $crlf;        global $cfg;        global $mysql_charset_map;        if (isset($GLOBALS['sql_compatibility'])) {            $tmp_compat = $GLOBALS['sql_compatibility'];            if ($tmp_compat == 'NONE') {                $tmp_compat = '';            }            PMA_DBI_try_query('SET SQL_MODE="' . $tmp_compat . '"');            unset($tmp_compat);        }        $head  =  PMA_exportComment('phpMyAdmin SQL Dump')               .  PMA_exportComment('version ' . PMA_VERSION)               .  PMA_exportComment('http://www.phpmyadmin.net')               .  PMA_exportComment();        $host_string = __('Host') . ': ' .  $cfg['Server']['host'];        if (!empty($cfg['Server']['port'])) {            $host_string .= ':' . $cfg['Server']['port'];        }        $head .= PMA_exportComment($host_string);        $head .= PMA_exportComment(__('Generation Time')              . ': ' .  PMA_localisedDate())              .  PMA_exportComment(__('Server version') . ': ' . PMA_MYSQL_STR_VERSION)              .  PMA_exportComment(__('PHP Version') . ': ' . phpversion())              .  PMA_possibleCRLF();        if (isset($GLOBALS['sql_header_comment']) && !empty($GLOBALS['sql_header_comment'])) {            // '\n' is not a newline (like "\n" would be), it's the characters            // backslash and n, as explained on the export interface            $lines = explode('\n', $GLOBALS['sql_header_comment']);            $head .= PMA_exportComment();            foreach ($lines as $one_line) {                $head .= PMA_exportComment($one_line);            }            $head .= PMA_exportComment();        }        if (isset($GLOBALS['sql_disable_fk'])) {            $head .= 'SET FOREIGN_KEY_CHECKS=0;' . $crlf;        }        /* We want exported AUTO_INCREMENT columns to have still same value, do this only for recent MySQL exports */        if ((!isset($GLOBALS['sql_compatibility']) || $GLOBALS['sql_compatibility'] == 'NONE')                && !PMA_DRIZZLE) {            $head .= 'SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";' . $crlf;        }        if (isset($GLOBALS['sql_use_transaction'])) {            $head .= 'SET AUTOCOMMIT=0;' . $crlf                   . 'START TRANSACTION;' . $crlf;        }        /* Change timezone if we should export timestamps in UTC */        if (isset($GLOBALS['sql_utc_time']) && $GLOBALS['sql_utc_time']) {            $head .= 'SET time_zone = "+00:00";' . $crlf;            $GLOBALS['old_tz'] = PMA_DBI_fetch_value('SELECT @@session.time_zone');            PMA_DBI_query('SET time_zone = "+00:00"');        }        $head .= PMA_possibleCRLF();        if (! empty($GLOBALS['asfile']) && !PMA_DRIZZLE) {            // we are saving as file, therefore we provide charset information            // so that a utility like the mysql client can interpret            // the file correctly            if (isset($GLOBALS['charset_of_file']) && isset($mysql_charset_map[$GLOBALS['charset_of_file']])) {                // we got a charset from the export dialog                $set_names = $mysql_charset_map[$GLOBALS['charset_of_file']];            } else {                // by default we use the connection charset                $set_names = $mysql_charset_map['utf-8'];            }            $head .=  $crlf                   . '/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;' . $crlf                   . '/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;' . $crlf                   . '/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;' . $crlf                   . '/*!40101 SET NAMES ' . $set_names . ' */;' . $crlf . $crlf;        }        return PMA_exportOutputHandler($head);    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        global $crlf;        if (isset($GLOBALS['sql_drop_database'])) {            if (!PMA_exportOutputHandler('DROP DATABASE ' . (isset($GLOBALS['sql_backquotes']) ? PMA_backquote($db) : $db) . ';' . $crlf)) {                return false;            }        }        $create_query = 'CREATE DATABASE ' . (isset($GLOBALS['sql_backquotes']) ? PMA_backquote($db) : $db);        $collation = PMA_getDbCollation($db);        if (PMA_DRIZZLE) {            $create_query .= ' COLLATE ' . $collation;        } else {            if (strpos($collation, '_')) {                $create_query .= ' DEFAULT CHARACTER SET ' . substr($collation, 0, strpos($collation, '_')) . ' COLLATE ' . $collation;            } else {                $create_query .= ' DEFAULT CHARACTER SET ' . $collation;            }        }        $create_query .= ';' . $crlf;        if (!PMA_exportOutputHandler($create_query)) {            return false;        }        if (isset($GLOBALS['sql_backquotes'])                && ((isset($GLOBALS['sql_compatibility']) && $GLOBALS['sql_compatibility'] == 'NONE') || PMA_DRIZZLE)) {            $result = PMA_exportOutputHandler('USE ' . PMA_backquote($db) . ';' . $crlf);        } else {            $result = PMA_exportOutputHandler('USE ' . $db . ';' . $crlf);        }        return $result;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        $head = PMA_exportComment()              . PMA_exportComment(__('Database') . ': ' . (isset($GLOBALS['sql_backquotes']) ? PMA_backquote($db) : '\'' . $db . '\''))              . PMA_exportComment();        return PMA_exportOutputHandler($head);    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        global $crlf;        $result = true;        if (isset($GLOBALS['sql_constraints'])) {            $result = PMA_exportOutputHandler($GLOBALS['sql_constraints']);            unset($GLOBALS['sql_constraints']);        }        if (($GLOBALS['sql_structure_or_data'] == 'structure' || $GLOBALS['sql_structure_or_data'] == 'structure_and_data') && isset($GLOBALS['sql_procedure_function'])) {            $text = '';            $delimiter = '$$';            if (PMA_MYSQL_INT_VERSION > 50100) {                $event_names = PMA_DBI_fetch_result('SELECT EVENT_NAME FROM information_schema.EVENTS WHERE EVENT_SCHEMA= \'' . PMA_sqlAddSlashes($db, true) . '\';');            } else {                $event_names = array();            }            if ($event_names) {                $text .= $crlf                  . 'DELIMITER ' . $delimiter . $crlf;                $text .=                    PMA_exportComment()                  . PMA_exportComment(__('Events'))                  . PMA_exportComment();                foreach ($event_names as $event_name) {                    if (! empty($GLOBALS['sql_drop_table'])) {                $text .= 'DROP EVENT ' . PMA_backquote($event_name) . $delimiter . $crlf;                    }                    $text .= PMA_DBI_get_definition($db, 'EVENT', $event_name) . $delimiter . $crlf . $crlf;                }                $text .= 'DELIMITER ;' . $crlf;            }            if (! empty($text)) {                $result = PMA_exportOutputHandler($text);            }        }        return $result;    }    /**     * Returns a stand-in CREATE definition to resolve view dependencies     *     * @param string  $db    the database name     * @param string  $view  the view name     * @param string  $crlf  the end of line sequence     * @return  string         resulting definition     *     * @access  public     */    function PMA_getTableDefStandIn($db, $view, $crlf) {        $create_query = '';        if (! empty($GLOBALS['sql_drop_table'])) {            $create_query .= 'DROP VIEW IF EXISTS ' . PMA_backquote($view) . ';' . $crlf;        }        $create_query .= 'CREATE TABLE ';        if (isset($GLOBALS['sql_if_not_exists']) && $GLOBALS['sql_if_not_exists']) {            $create_query .= 'IF NOT EXISTS ';        }        $create_query .= PMA_backquote($view) . ' (' . $crlf;        $tmp = array();        $columns = PMA_DBI_get_columns_full($db, $view);        foreach ($columns as $column_name => $definition) {            $tmp[] = PMA_backquote($column_name) . ' ' . $definition['Type'] . $crlf;        }        $create_query .= implode(',', $tmp) . ');';        return($create_query);    }    /**     * Returns $table's CREATE definition     *     * @param string  $db             the database name     * @param string  $table          the table name     * @param string  $crlf           the end of line sequence     * @param string  $error_url      the url to go back in case of error     * @param bool    $show_dates     whether to include creation/update/check dates     * @param bool    $add_semicolon  whether to add semicolon and end-of-line at the end     * @param bool    $view           whether we're handling a view     * @return  string   resulting schema     *     * @access  public     */    function PMA_getTableDef($db, $table, $crlf, $error_url, $show_dates = false, $add_semicolon = true, $view = false)    {        global $sql_drop_table;        global $sql_backquotes;        global $sql_constraints;        global $sql_constraints_query; // just the text of the query        global $sql_drop_foreign_keys;        $schema_create = '';        $auto_increment = '';        $new_crlf = $crlf;        // need to use PMA_DBI_QUERY_STORE with PMA_DBI_num_rows() in mysqli        $result = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ' LIKE \'' . PMA_sqlAddSlashes($table, true) . '\'', null, PMA_DBI_QUERY_STORE);        if ($result != false) {            if (PMA_DBI_num_rows($result) > 0) {                $tmpres        = PMA_DBI_fetch_assoc($result);                if (PMA_DRIZZLE && $show_dates) {                    // Drizzle doesn't give Create_time and Update_time in SHOW TABLE STATUS, add it                    $sql ="SELECT                            TABLE_CREATION_TIME AS Create_time,                            TABLE_UPDATE_TIME AS Update_time                        FROM data_dictionary.TABLES                        WHERE TABLE_SCHEMA = '" . PMA_sqlAddSlashes($db) . "'                          AND TABLE_NAME = '" . PMA_sqlAddSlashes($table) . "'";                    $tmpres = array_merge(PMA_DBI_fetch_single_row($sql), $tmpres);                }                // Here we optionally add the AUTO_INCREMENT next value,                // but starting with MySQL 5.0.24, the clause is already included                // in SHOW CREATE TABLE so we'll remove it below                // It's required for Drizzle because SHOW CREATE TABLE uses                // the value from table's creation time                if (isset($GLOBALS['sql_auto_increment']) && !empty($tmpres['Auto_increment'])) {                    $auto_increment .= ' AUTO_INCREMENT=' . $tmpres['Auto_increment'] . ' ';                }                if ($show_dates && isset($tmpres['Create_time']) && !empty($tmpres['Create_time'])) {                    $schema_create .= PMA_exportComment(__('Creation') . ': ' . PMA_localisedDate(strtotime($tmpres['Create_time'])));                    $new_crlf = PMA_exportComment() . $crlf;                }                if ($show_dates && isset($tmpres['Update_time']) && !empty($tmpres['Update_time'])) {                    $schema_create .= PMA_exportComment(__('Last update') . ': ' . PMA_localisedDate(strtotime($tmpres['Update_time'])));                    $new_crlf = PMA_exportComment() . $crlf;                }                if ($show_dates && isset($tmpres['Check_time']) && !empty($tmpres['Check_time'])) {                    $schema_create .= PMA_exportComment(__('Last check') . ': ' . PMA_localisedDate(strtotime($tmpres['Check_time'])));                    $new_crlf = PMA_exportComment() . $crlf;                }            }            PMA_DBI_free_result($result);        }        $schema_create .= $new_crlf;        // no need to generate a DROP VIEW here, it was done earlier        if (! empty($sql_drop_table) && ! PMA_Table::isView($db, $table)) {            $schema_create .= 'DROP TABLE IF EXISTS ' . PMA_backquote($table, $sql_backquotes) . ';' . $crlf;        }        // Complete table dump,        // Whether to quote table and column names or not        // Drizzle always quotes names        if (!PMA_DRIZZLE) {            if ($sql_backquotes) {                PMA_DBI_query('SET SQL_QUOTE_SHOW_CREATE = 1');            } else {                PMA_DBI_query('SET SQL_QUOTE_SHOW_CREATE = 0');            }        }        // I don't see the reason why this unbuffered query could cause problems,        // because SHOW CREATE TABLE returns only one row, and we free the        // results below. Nonetheless, we got 2 user reports about this        // (see bug 1562533) so I remove the unbuffered mode.        //$result = PMA_DBI_query('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table), null, PMA_DBI_QUERY_UNBUFFERED);        //        // Note: SHOW CREATE TABLE, at least in MySQL 5.1.23, does not        // produce a displayable result for the default value of a BIT        // column, nor does the mysqldump command. See MySQL bug 35796        $result = PMA_DBI_try_query('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table));        // an error can happen, for example the table is crashed        $tmp_error = PMA_DBI_getError();        if ($tmp_error) {            return PMA_exportComment(__('in use') . '(' . $tmp_error . ')');        }        if ($result != false && ($row = PMA_DBI_fetch_row($result))) {            $create_query = $row[1];            unset($row);            // Convert end of line chars to one that we want (note that MySQL doesn't return query it will accept in all cases)            if (strpos($create_query, "(\r\n ")) {                $create_query = str_replace("\r\n", $crlf, $create_query);            } elseif (strpos($create_query, "(\n ")) {                $create_query = str_replace("\n", $crlf, $create_query);            } elseif (strpos($create_query, "(\r ")) {                $create_query = str_replace("\r", $crlf, $create_query);            }            /*             * Drop database name from VIEW creation.             *             * This is a bit tricky, but we need to issue SHOW CREATE TABLE with             * database name, but we don't want name to show up in CREATE VIEW             * statement.             */            if ($view) {                $create_query = preg_replace('/' . PMA_backquote($db) . '\./', '', $create_query);            }            // Should we use IF NOT EXISTS?            if (isset($GLOBALS['sql_if_not_exists'])) {                $create_query     = preg_replace('/^CREATE TABLE/', 'CREATE TABLE IF NOT EXISTS', $create_query);            }            // Drizzle (checked on 2011.03.13) returns ROW_FORMAT surrounded with quotes, which is not accepted by parser            if (PMA_DRIZZLE) {                $create_query = preg_replace('/ROW_FORMAT=\'(\S+)\'/', 'ROW_FORMAT=$1', $create_query);            }            // are there any constraints to cut out?            if (preg_match('@CONSTRAINT|FOREIGN[\s]+KEY@', $create_query)) {                // Split the query into lines, so we can easily handle it. We know lines are separated by $crlf (done few lines above).                $sql_lines = explode($crlf, $create_query);                $sql_count = count($sql_lines);                // lets find first line with constraints                for ($i = 0; $i < $sql_count; $i++) {                    if (preg_match('@^[\s]*(CONSTRAINT|FOREIGN[\s]+KEY)@', $sql_lines[$i])) {                        break;                    }                }                // If we really found a constraint                if ($i != $sql_count) {                    // remove , from the end of create statement                    $sql_lines[$i - 1] = preg_replace('@,$@', '', $sql_lines[$i - 1]);                    // prepare variable for constraints                    if (!isset($sql_constraints)) {                        if (isset($GLOBALS['no_constraints_comments'])) {                            $sql_constraints = '';                        } else {                            $sql_constraints = $crlf                                             . PMA_exportComment()                                             . PMA_exportComment(__('Constraints for dumped tables'))                                             . PMA_exportComment();                        }                    }                    // comments for current table                    if (!isset($GLOBALS['no_constraints_comments'])) {                        $sql_constraints .= $crlf                                          . PMA_exportComment()                                          . PMA_exportComment(__('Constraints for table') . ' ' . PMA_backquote($table))                                          . PMA_exportComment();                    }                    // let's do the work                    $sql_constraints_query .= 'ALTER TABLE ' . PMA_backquote($table) . $crlf;                    $sql_constraints .= 'ALTER TABLE ' . PMA_backquote($table) . $crlf;                    $sql_drop_foreign_keys .= 'ALTER TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table) . $crlf;                    $first = true;                    for ($j = $i; $j < $sql_count; $j++) {                        if (preg_match('@CONSTRAINT|FOREIGN[\s]+KEY@', $sql_lines[$j])) {                            if (!$first) {                                $sql_constraints .= $crlf;                            }                            if (strpos($sql_lines[$j], 'CONSTRAINT') === false) {                                $tmp_str = preg_replace('/(FOREIGN[\s]+KEY)/', 'ADD \1', $sql_lines[$j]);                                $sql_constraints_query .= $tmp_str;                                $sql_constraints .= $tmp_str;                            } else {                                $tmp_str = preg_replace('/(CONSTRAINT)/', 'ADD \1', $sql_lines[$j]);                                $sql_constraints_query .= $tmp_str;                                $sql_constraints .= $tmp_str;                                preg_match('/(CONSTRAINT)([\s])([\S]*)([\s])/', $sql_lines[$j], $matches);                                if (! $first) {                                    $sql_drop_foreign_keys .= ', ';                                }                                $sql_drop_foreign_keys .= 'DROP FOREIGN KEY ' . $matches[3];                            }                            $first = false;                        } else {                            break;                        }                    }                    $sql_constraints .= ';' . $crlf;                    $sql_constraints_query .= ';';                    $create_query = implode($crlf, array_slice($sql_lines, 0, $i)) . $crlf . implode($crlf, array_slice($sql_lines, $j, $sql_count - 1));                    unset($sql_lines);                }            }            $schema_create .= $create_query;        }        // remove a possible "AUTO_INCREMENT = value" clause        // that could be there starting with MySQL 5.0.24        // in Drizzle it's useless as it contains the value given at table creation time        $schema_create = preg_replace('/AUTO_INCREMENT\s*=\s*([0-9])+/', '', $schema_create);        $schema_create .= $auto_increment;        PMA_DBI_free_result($result);        return $schema_create . ($add_semicolon ? ';' . $crlf : '');    } // end of the 'PMA_getTableDef()' function    /**     * Returns $table's comments, relations etc.     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         end of line sequence     * @param bool    $do_relation  whether to include relation comments     * @param bool    $do_mime      whether to include mime comments     * @return  string   resulting comments     *     * @access  private     */    function PMA_getTableComments($db, $table, $crlf, $do_relation = false, $do_mime = false)    {        global $cfgRelation;        global $sql_backquotes;        global $sql_constraints;        $schema_create = '';        // Check if we can use Relations        if ($do_relation && !empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        if ($do_mime && $cfgRelation['mimework']) {            if (!($mime_map = PMA_getMIME($db, $table, true))) {                unset($mime_map);            }        }        if (isset($mime_map) && count($mime_map) > 0) {            $schema_create .= PMA_possibleCRLF()                           . PMA_exportComment()                           . PMA_exportComment(__('MIME TYPES FOR TABLE'). ' ' . PMA_backquote($table, $sql_backquotes) . ':');            @reset($mime_map);            foreach ($mime_map AS $mime_field => $mime) {                $schema_create .= PMA_exportComment('  ' . PMA_backquote($mime_field, $sql_backquotes))                                . PMA_exportComment('      ' . PMA_backquote($mime['mimetype'], $sql_backquotes));            }            $schema_create .= PMA_exportComment();        }        if ($have_rel) {            $schema_create .= PMA_possibleCRLF()                           . PMA_exportComment()                           . PMA_exportComment(__('RELATIONS FOR TABLE'). ' ' . PMA_backquote($table, $sql_backquotes) . ':');            foreach ($res_rel AS $rel_field => $rel) {                $schema_create .= PMA_exportComment('  ' . PMA_backquote($rel_field, $sql_backquotes))                                . PMA_exportComment('      ' . PMA_backquote($rel['foreign_table'], $sql_backquotes)                                . ' -> ' . PMA_backquote($rel['foreign_field'], $sql_backquotes));            }            $schema_create .= PMA_exportComment();        }        return $schema_create;    } // end of the 'PMA_getTableComments()' function    /**     * Outputs table's structure     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         the end of line sequence     * @param string  $error_url    the url to go back in case of error     * @param bool    $relation     whether to include relation comments     * @param bool    $comments     whether to include the pmadb-style column comments     *                                as comments in the structure; this is deprecated     *                                but the parameter is left here because export.php     *                                calls PMA_exportStructure() also for other export     *                                types which use this parameter     * @param bool    $mime         whether to include mime comments     * @param bool    $dates        whether to include creation/update/check dates     * @param string  $export_mode  'create_table', 'triggers', 'create_view', 'stand_in'     * @param string  $export_type  'server', 'database', 'table'     * @return  bool      Whether it succeeded     *     * @access  public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $relation = false, $comments = false, $mime = false, $dates = false, $export_mode, $export_type)    {        $formatted_table_name = (isset($GLOBALS['sql_backquotes']))                              ? PMA_backquote($table)                              : '\'' . $table . '\'';        $dump = PMA_possibleCRLF()              . PMA_exportComment(str_repeat('-', 56))              . PMA_possibleCRLF()              . PMA_exportComment();        switch($export_mode) {            case 'create_table':                $dump .= PMA_exportComment(__('Table structure for table') . ' ' . $formatted_table_name);                $dump .= PMA_exportComment();                $dump .= PMA_getTableDef($db, $table, $crlf, $error_url, $dates);                $dump .= PMA_getTableComments($db, $table, $crlf, $relation, $mime);                break;            case 'triggers':                $dump = '';                $triggers = PMA_DBI_get_triggers($db, $table);                if ($triggers) {                    $dump .=  PMA_possibleCRLF()                            . PMA_exportComment()                            . PMA_exportComment(__('Triggers') . ' ' . $formatted_table_name)                            . PMA_exportComment();                    $delimiter = '//';                    foreach ($triggers as $trigger) {                        $dump .= $trigger['drop'] . ';' . $crlf;                        $dump .= 'DELIMITER ' . $delimiter . $crlf;                        $dump .= $trigger['create'];                        $dump .= 'DELIMITER ;' . $crlf;                    }                }                break;            case 'create_view':                $dump .= PMA_exportComment(__('Structure for view') . ' ' . $formatted_table_name)                       . PMA_exportComment();                // delete the stand-in table previously created (if any)                if ($export_type != 'table') {                    $dump .= 'DROP TABLE IF EXISTS ' . PMA_backquote($table) . ';' . $crlf;                }                $dump .= PMA_getTableDef($db, $table, $crlf, $error_url, $dates, true, true);                break;            case 'stand_in':                $dump .=  PMA_exportComment(__('Stand-in structure for view') . ' ' . $formatted_table_name)                        . PMA_exportComment();                // export a stand-in definition to resolve view dependencies                $dump .= PMA_getTableDefStandIn($db, $table, $crlf);        } // end switch        // this one is built by PMA_getTableDef() to use in table copy/move        // but not in the case of export        unset($GLOBALS['sql_constraints_query']);        return PMA_exportOutputHandler($dump);    }    /**     * Outputs the content of a table in SQL format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $sql_backquotes;        global $current_row;        $formatted_table_name = (isset($GLOBALS['sql_backquotes']))                              ? PMA_backquote($table)                              : '\'' . $table . '\'';        // Do not export data for a VIEW        // (For a VIEW, this is called only when exporting a single VIEW)        if (PMA_Table::isView($db, $table)) {            $head = PMA_possibleCRLF()              . PMA_exportComment()              . PMA_exportComment('VIEW ' . ' ' . $formatted_table_name)              . PMA_exportComment(__('Data') . ': ' . __('None'))              . PMA_exportComment()              . PMA_possibleCRLF();            if (! PMA_exportOutputHandler($head)) {                return false;            }            return true;        }        // analyze the query to get the true column names, not the aliases        // (this fixes an undefined index, also if Complete inserts        //  are used, we did not get the true column name in case of aliases)        $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($sql_query));        $result = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        // a possible error: the table has crashed        $tmp_error = PMA_DBI_getError();        if ($tmp_error) {            return PMA_exportOutputHandler(PMA_exportComment(__('Error reading data:') . ' (' . $tmp_error . ')'));        }        if ($result != false) {            $fields_cnt = PMA_DBI_num_fields($result);            // Get field information            $fields_meta = PMA_DBI_get_fields_meta($result);            $field_flags = array();            for ($j = 0; $j < $fields_cnt; $j++) {                $field_flags[$j] = PMA_DBI_field_flags($result, $j);            }            for ($j = 0; $j < $fields_cnt; $j++) {                if (isset($analyzed_sql[0]['select_expr'][$j]['column'])) {                    $field_set[$j] = PMA_backquote($analyzed_sql[0]['select_expr'][$j]['column'], $sql_backquotes);                } else {                    $field_set[$j] = PMA_backquote($fields_meta[$j]->name, $sql_backquotes);                }            }            if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'UPDATE') {                // update                $schema_insert  = 'UPDATE ';                if (isset($GLOBALS['sql_ignore'])) {                    $schema_insert .= 'IGNORE ';                }                // avoid EOL blank                $schema_insert .= PMA_backquote($table, $sql_backquotes) . ' SET';            } else {                // insert or replace                if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'REPLACE') {                    $sql_command = 'REPLACE';                } else {                    $sql_command = 'INSERT';                }                // delayed inserts?                if (isset($GLOBALS['sql_delayed'])) {                    $insert_delayed = ' DELAYED';                } else {                    $insert_delayed = '';                }                // insert ignore?                if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'INSERT' && isset($GLOBALS['sql_ignore'])) {                    $insert_delayed .= ' IGNORE';                }                // scheme for inserting fields                if ($GLOBALS['sql_insert_syntax'] == 'complete' || $GLOBALS['sql_insert_syntax'] == 'both') {                    $fields        = implode(', ', $field_set);                    $schema_insert = $sql_command . $insert_delayed .' INTO ' . PMA_backquote($table, $sql_backquotes)                // avoid EOL blank                                   . ' (' . $fields . ') VALUES';                } else {                    $schema_insert = $sql_command . $insert_delayed .' INTO ' . PMA_backquote($table, $sql_backquotes)                                   . ' VALUES';                }            }            $search      = array("\x00", "\x0a", "\x0d", "\x1a"); //\x08\\x09, not required            $replace     = array('\0', '\n', '\r', '\Z');            $current_row = 0;            $query_size  = 0;            if (($GLOBALS['sql_insert_syntax'] == 'extended' || $GLOBALS['sql_insert_syntax'] == 'both') && (!isset($GLOBALS['sql_type']) || $GLOBALS['sql_type'] != 'UPDATE')) {                $separator    = ',';                $schema_insert .= $crlf;            } else {                $separator    = ';';            }            while ($row = PMA_DBI_fetch_row($result)) {                if ($current_row == 0) {                    $head = PMA_possibleCRLF()                          . PMA_exportComment()                          . PMA_exportComment(__('Dumping data for table') . ' ' . $formatted_table_name)                          . PMA_exportComment()                          . $crlf;                    if (! PMA_exportOutputHandler($head)) {                        return false;                    }                }                $current_row++;                for ($j = 0; $j < $fields_cnt; $j++) {                    // NULL                    if (!isset($row[$j]) || is_null($row[$j])) {                        $values[] = 'NULL';                    // a number                    // timestamp is numeric on some MySQL 4.1, BLOBs are sometimes numeric                    } elseif ($fields_meta[$j]->numeric && $fields_meta[$j]->type != 'timestamp'                            && ! $fields_meta[$j]->blob) {                        $values[] = $row[$j];                    // a true BLOB                    // - mysqldump only generates hex data when the --hex-blob                    //   option is used, for fields having the binary attribute                    //   no hex is generated                    // - a TEXT field returns type blob but a real blob                    //   returns also the 'binary' flag                    } elseif (stristr($field_flags[$j], 'BINARY')                            && $fields_meta[$j]->blob                            && isset($GLOBALS['sql_hex_for_blob'])) {                        // empty blobs need to be different, but '0' is also empty :-(                        if (empty($row[$j]) && $row[$j] != '0') {                            $values[] = '\'\'';                        } else {                            $values[] = '0x' . bin2hex($row[$j]);                        }                    // detection of 'bit' works only on mysqli extension                    } elseif ($fields_meta[$j]->type == 'bit') {                        $values[] = "b'" . PMA_sqlAddSlashes(PMA_printable_bit_value($row[$j], $fields_meta[$j]->length)) . "'";                    // something else -> treat as a string                    } else {                        $values[] = '\'' . str_replace($search, $replace, PMA_sqlAddSlashes($row[$j])) . '\'';                    } // end if                } // end for                // should we make update?                if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'UPDATE') {                    $insert_line = $schema_insert;                    for ($i = 0; $i < $fields_cnt; $i++) {                        if (0 == $i) {                            $insert_line .= ' ';                        }                        if ($i > 0) {                            // avoid EOL blank                            $insert_line .= ',';                        }                        $insert_line .= $field_set[$i] . ' = ' . $values[$i];                    }                    list($tmp_unique_condition, $tmp_clause_is_unique) = PMA_getUniqueCondition($result, $fields_cnt, $fields_meta, $row);                    $insert_line .= ' WHERE ' . $tmp_unique_condition;                    unset($tmp_unique_condition, $tmp_clause_is_unique);                } else {                    // Extended inserts case                    if ($GLOBALS['sql_insert_syntax'] == 'extended' || $GLOBALS['sql_insert_syntax'] == 'both') {                        if ($current_row == 1) {                            $insert_line  = $schema_insert . '(' . implode(', ', $values) . ')';                        } else {                            $insert_line  = '(' . implode(', ', $values) . ')';                            if (isset($GLOBALS['sql_max_query_size']) && $GLOBALS['sql_max_query_size'] > 0 && $query_size + strlen($insert_line) > $GLOBALS['sql_max_query_size']) {                                if (!PMA_exportOutputHandler(';' . $crlf)) {                                    return false;                                }                                $query_size = 0;                                $current_row = 1;                                $insert_line = $schema_insert . $insert_line;                            }                        }                        $query_size += strlen($insert_line);                    }                    // Other inserts case                    else {                        $insert_line = $schema_insert . '(' . implode(', ', $values) . ')';                    }                }                unset($values);                if (!PMA_exportOutputHandler(($current_row == 1 ? '' : $separator . $crlf) . $insert_line)) {                    return false;                }            } // end while            if ($current_row > 0) {                if (!PMA_exportOutputHandler(';' . $crlf)) {                    return false;                }            }        } // end if ($result != false)        PMA_DBI_free_result($result);        return true;    } // end of the 'PMA_exportData()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Theme information * * @package PhpMyAdmin-theme * @subpackage Original *//** * */$theme_name = 'Original';$theme_full_version = '2.9';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface to the classic MySQL extension * * @package PhpMyAdmin-DBI-MySQL */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/logging.lib.php';/** * MySQL client API */if (! defined('PMA_MYSQL_CLIENT_API')) {    $client_api = explode('.', mysql_get_client_info());    define('PMA_MYSQL_CLIENT_API', (int)sprintf('%d%02d%02d', $client_api[0], $client_api[1], intval($client_api[2])));    unset($client_api);}/** * Helper function for connecting to the database server * * @param   string  $server * @param   string  $user * @param   string  $password * @param   int     $client_flags * @param   bool    $persistent * @return  mixed   false on error or a mysql connection resource on success */function PMA_DBI_real_connect($server, $user, $password, $client_flags, $persistent = false){    global $cfg;    if (empty($client_flags)) {        if ($cfg['PersistentConnections'] || $persistent) {            $link = @mysql_pconnect($server, $user, $password);        } else {            $link = @mysql_connect($server, $user, $password);        }    } else {        if ($cfg['PersistentConnections'] || $persistent) {            $link = @mysql_pconnect($server, $user, $password, $client_flags);        } else {            $link = @mysql_connect($server, $user, $password, false, $client_flags);        }    }    return $link;}/** * connects to the database server * * @param   string  $user           mysql user name * @param   string  $password       mysql user password * @param   bool    $is_controluser * @param   array   $server host/port/socket/persistent * @param   bool    $auxiliary_connection (when true, don't go back to login if connection fails) * @return  mixed   false on error or a mysqli object on success */function PMA_DBI_connect($user, $password, $is_controluser = false, $server = null, $auxiliary_connection = false){    global $cfg;    if ($server) {        $server_port = (empty($server['port']))            ? ''            : ':' . (int)$server['port'];        $server_socket = (empty($server['socket']))            ? ''            : ':' . $server['socket'];    } else {        $server_port   = (empty($cfg['Server']['port']))            ? ''            : ':' . (int)$cfg['Server']['port'];        $server_socket = (empty($cfg['Server']['socket']))            ? ''            : ':' . $cfg['Server']['socket'];    }    $client_flags = 0;    // always use CLIENT_LOCAL_FILES as defined in mysql_com.h    // for the case where the client library was not compiled    // with --enable-local-infile    $client_flags |= 128;    /* Optionally compress connection */    if (defined('MYSQL_CLIENT_COMPRESS') && $cfg['Server']['compress']) {        $client_flags |= MYSQL_CLIENT_COMPRESS;    }    /* Optionally enable SSL */    if (defined('MYSQL_CLIENT_SSL') && $cfg['Server']['ssl']) {        $client_flags |= MYSQL_CLIENT_SSL;    }    if (!$server) {        $link = PMA_DBI_real_connect($cfg['Server']['host'] . $server_port . $server_socket, $user, $password, empty($client_flags) ? null : $client_flags);      // Retry with empty password if we're allowed to        if (empty($link) && $cfg['Server']['nopassword'] && !$is_controluser) {            $link = PMA_DBI_real_connect($cfg['Server']['host'] . $server_port . $server_socket, $user, '', empty($client_flags) ? null : $client_flags);        }    } else {        if (!isset($server['host'])) {            $link = PMA_DBI_real_connect($server_socket, $user, $password, null);        } else {            $link = PMA_DBI_real_connect($server['host'] . $server_port . $server_socket, $user, $password, null);        }    }    if (empty($link)) {        if ($is_controluser) {            trigger_error(__('Connection for controluser as defined in your configuration failed.'), E_USER_WARNING);            return false;        }        // we could be calling PMA_DBI_connect() to connect to another        // server, for example in the Synchronize feature, so do not        // go back to main login if it fails        if (! $auxiliary_connection) {            PMA_log_user($user, 'mysql-denied');            PMA_auth_fails();        } else {            return false;        }    } // end if    if (! $server) {        PMA_DBI_postConnect($link, $is_controluser);    }    return $link;}/** * selects given database * * @param string    $dbname  name of db to select * @param resource  $link    mysql link resource * @return bool */function PMA_DBI_select_db($dbname, $link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_select_db($dbname, $link);}/** * runs a query and returns the result * * @param string    $query    query to run * @param resource  $link     mysql link resource * @param int       $options * @return mixed */function PMA_DBI_real_query($query, $link, $options){    if ($options == ($options | PMA_DBI_QUERY_STORE)) {        return mysql_query($query, $link);    } elseif ($options == ($options | PMA_DBI_QUERY_UNBUFFERED)) {        return mysql_unbuffered_query($query, $link);    } else {        return mysql_query($query, $link);    }}/** * returns array of rows with associative and numeric keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_array($result){    return mysql_fetch_array($result, MYSQL_BOTH);}/** * returns array of rows with associative keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_assoc($result){    return mysql_fetch_array($result, MYSQL_ASSOC);}/** * returns array of rows with numeric keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_row($result){    return mysql_fetch_array($result, MYSQL_NUM);}/** * Adjusts the result pointer to an arbitrary row in the result * * @param   $result * @param   $offset * @return  bool true on success, false on failure */function PMA_DBI_data_seek($result, $offset){    return mysql_data_seek($result, $offset);}/** * Frees memory associated with the result * * @param  resource  $result */function PMA_DBI_free_result($result){    if (is_resource($result) && get_resource_type($result) === 'mysql result') {        mysql_free_result($result);    }}/** * Check if there are any more query results from a multi query * * @return  bool         false */function PMA_DBI_more_results(){    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Prepare next result from multi_query * * @return  boo         false */function PMA_DBI_next_result(){    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Returns a string representing the type of connection used * * @param   resource  $link  mysql link * @return  string          type of connection used */function PMA_DBI_get_host_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_get_host_info($link);}/** * Returns the version of the MySQL protocol used * * @param   resource  $link  mysql link * @return  int         version of the MySQL protocol used */function PMA_DBI_get_proto_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_get_proto_info($link);}/** * returns a string that represents the client library version * * @return  string          MySQL client library version */function PMA_DBI_get_client_info(){    return mysql_get_client_info();}/** * returns last error message or false if no errors occured * * @param   resource  $link  mysql link * @return  string|bool  $error or false */function PMA_DBI_getError($link = null){    $GLOBALS['errno'] = 0;    /* Treat false same as null because of controllink */    if ($link === false) {        $link = null;    }    if (null === $link && isset($GLOBALS['userlink'])) {        $link =& $GLOBALS['userlink'];// Do not stop now. On the initial connection, we don't have a $link,// we don't have a $GLOBALS['userlink'], but we can catch the error code//    } else {//            return false;    }    if (null !== $link && false !== $link) {        $error_number = mysql_errno($link);        $error_message = mysql_error($link);    } else {        $error_number = mysql_errno();        $error_message = mysql_error();    }    if (0 == $error_number) {        return false;    }    // keep the error number for further check after the call to PMA_DBI_getError()    $GLOBALS['errno'] = $error_number;    return PMA_DBI_formatError($error_number, $error_message);}/** * returns the number of rows returned by last query * * @param   resource  $result * @return  string|int */function PMA_DBI_num_rows($result){    if (!is_bool($result)) {        return mysql_num_rows($result);    } else {        return 0;    }}/** * returns last inserted auto_increment id for given $link or $GLOBALS['userlink'] * * @param   resource  $link  the mysql object * @return  string|int */function PMA_DBI_insert_id($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    // If the primary key is BIGINT we get an incorrect result    // (sometimes negative, sometimes positive)    // and in the present function we don't know if the PK is BIGINT    // so better play safe and use LAST_INSERT_ID()    //    return PMA_DBI_fetch_value('SELECT LAST_INSERT_ID();', 0, 0, $link);}/** * returns the number of rows affected by last query * * @param   resource  $link            the mysql object * @param   bool      $get_from_cache * @return  string|int */function PMA_DBI_affected_rows($link = null, $get_from_cache = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($get_from_cache) {        return $GLOBALS['cached_affected_rows'];    } else {        return mysql_affected_rows($link);    }}/** * returns metainfo for fields in $result * * @todo add missing keys like in mysqli_query (decimals) * @param   resource  $result * @return  array  meta info for fields in $result */function PMA_DBI_get_fields_meta($result){    $fields       = array();    $num_fields   = mysql_num_fields($result);    for ($i = 0; $i < $num_fields; $i++) {        $field = mysql_fetch_field($result, $i);        $field->flags = mysql_field_flags($result, $i);        $field->orgtable = mysql_field_table($result, $i);        $field->orgname = mysql_field_name($result, $i);        $fields[] = $field;    }    return $fields;}/** * return number of fields in given $result * * @param   resource  $result * @return  int  field count */function PMA_DBI_num_fields($result){    return mysql_num_fields($result);}/** * returns the length of the given field $i in $result * * @param   resource  $result * @param   int       $i       field * @return  int  length of field */function PMA_DBI_field_len($result, $i){    return mysql_field_len($result, $i);}/** * returns name of $i. field in $result * * @param   resource  $result * @param   int       $i       field * @return  string  name of $i. field in $result */function PMA_DBI_field_name($result, $i){    return mysql_field_name($result, $i);}/** * returns concatenated string of human readable field flags * * @param   resource  $result * @param   int       $i       field * @return  string  field flags */function PMA_DBI_field_flags($result, $i){    return mysql_field_flags($result, $i);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface to the improved MySQL extension (MySQLi) * * @package PhpMyAdmin-DBI-MySQLi */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/logging.lib.php';/** * MySQL client API */if (!defined('PMA_MYSQL_CLIENT_API')) {    $client_api = explode('.', mysqli_get_client_info());    define('PMA_MYSQL_CLIENT_API', (int)sprintf('%d%02d%02d', $client_api[0], $client_api[1], intval($client_api[2])));    unset($client_api);}/** * some PHP versions are reporting extra messages like "No index used in query" */mysqli_report(MYSQLI_REPORT_OFF);/** * some older mysql client libs are missing these constants ... */if (! defined('MYSQLI_BINARY_FLAG')) {   define('MYSQLI_BINARY_FLAG', 128);}/** * @see http://bugs.php.net/36007 */if (! defined('MYSQLI_TYPE_NEWDECIMAL')) {    define('MYSQLI_TYPE_NEWDECIMAL', 246);}if (! defined('MYSQLI_TYPE_BIT')) {    define('MYSQLI_TYPE_BIT', 16);}// for Drizzleif (! defined('MYSQLI_TYPE_VARCHAR')) {    define('MYSQLI_TYPE_VARCHAR', 15);}/** * Helper function for connecting to the database server * * @param   mysqli  $link * @param   string  $host * @param   string  $user * @param   string  $password * @param   string  $dbname * @param   int     $server_port * @param   string  $server_socket * @param   int     $client_flags * @param   bool    $persistent * @return  bool */function PMA_DBI_real_connect($link, $host, $user, $password, $dbname, $server_port, $server_socket, $client_flags = null, $persistent = false){    global $cfg;    // mysqli persistent connections only on PHP 5.3+    if (PMA_PHP_INT_VERSION >= 50300) {        if ($cfg['PersistentConnections'] || $persistent) {            $host = 'p:' . $host;        }    }    if ($client_flags === null) {        return @mysqli_real_connect(            $link,            $host,            $user,            $password,            $dbname,            $server_port,            $server_socket        );    } else {        return @mysqli_real_connect(            $link,            $host,            $user,            $password,            $dbname,            $server_port,            $server_socket,            $client_flags        );    }}/** * connects to the database server * * @param   string  $user           mysql user name * @param   string  $password       mysql user password * @param   bool    $is_controluser * @param   array   $server host/port/socket * @param   bool    $auxiliary_connection (when true, don't go back to login if connection fails) * @return  mixed   false on error or a mysqli object on success */function PMA_DBI_connect($user, $password, $is_controluser = false, $server = null, $auxiliary_connection = false){    global $cfg;    if ($server) {        $server_port   = (empty($server['port']))            ? false            : (int)$server['port'];        $server_socket = (empty($server['socket']))            ? ''            : $server['socket'];        $server['host'] = (empty($server['host']))            ? 'localhost'            : $server['host'];    } else {        $server_port   = (empty($cfg['Server']['port']))            ? false            : (int) $cfg['Server']['port'];        $server_socket = (empty($cfg['Server']['socket']))            ? null            : $cfg['Server']['socket'];    }    // NULL enables connection to the default socket    $link = mysqli_init();    mysqli_options($link, MYSQLI_OPT_LOCAL_INFILE, true);    $client_flags = 0;    /* Optionally compress connection */    if ($cfg['Server']['compress'] && defined('MYSQLI_CLIENT_COMPRESS')) {        $client_flags |= MYSQLI_CLIENT_COMPRESS;    }    /* Optionally enable SSL */    if ($cfg['Server']['ssl'] && defined('MYSQLI_CLIENT_SSL')) {        $client_flags |= MYSQLI_CLIENT_SSL;    }    if (!$server) {        $return_value = @PMA_DBI_real_connect(            $link,            $cfg['Server']['host'],            $user,            $password,            false,            $server_port,            $server_socket,            $client_flags        );        // Retry with empty password if we're allowed to        if ($return_value == false && isset($cfg['Server']['nopassword']) && $cfg['Server']['nopassword'] && !$is_controluser) {            $return_value = @PMA_DBI_real_connect(                $link,                $cfg['Server']['host'],                $user,                '',                false,                $server_port,                $server_socket,                $client_flags            );        }    } else {        $return_value = @PMA_DBI_real_connect(            $link,            $server['host'],            $user,            $password,            false,            $server_port,            $server_socket        );    }    if ($return_value == false) {        if ($is_controluser) {            trigger_error(                __('Connection for controluser as defined in your configuration failed.'),                E_USER_WARNING            );            return false;        }        // we could be calling PMA_DBI_connect() to connect to another        // server, for example in the Synchronize feature, so do not        // go back to main login if it fails        if (! $auxiliary_connection) {            PMA_log_user($user, 'mysql-denied');            PMA_auth_fails();        } else {            return false;        }    } else {        PMA_DBI_postConnect($link, $is_controluser);    }    return $link;}/** * selects given database * * @param string  $dbname  database name to select * @param mysqli  $link    the mysqli object * @return boolean */function PMA_DBI_select_db($dbname, $link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_select_db($link, $dbname);}/** * runs a query and returns the result * * @param   string  $query    query to execute * @param   mysqli  $link     mysqli object * @param   int     $options * @return  mysqli_result|bool */function PMA_DBI_real_query($query, $link, $options){    if ($options == ($options | PMA_DBI_QUERY_STORE)) {        $method = MYSQLI_STORE_RESULT;    } elseif ($options == ($options | PMA_DBI_QUERY_UNBUFFERED)) {        $method = MYSQLI_USE_RESULT;    } else {        $method = 0;    }    return mysqli_query($link, $query, $method);}/** * returns array of rows with associative and numeric keys from $result * * @param   mysqli_result  $result * @return  array */function PMA_DBI_fetch_array($result){    return mysqli_fetch_array($result, MYSQLI_BOTH);}/** * returns array of rows with associative keys from $result * * @param   mysqli_result  $result * @return  array */function PMA_DBI_fetch_assoc($result){    return mysqli_fetch_array($result, MYSQLI_ASSOC);}/** * returns array of rows with numeric keys from $result * * @param   mysqli_result  $result * @return  array */function PMA_DBI_fetch_row($result){    return mysqli_fetch_array($result, MYSQLI_NUM);}/** * Adjusts the result pointer to an arbitrary row in the result * * @param   $result * @param   $offset * @return  bool  true on success, false on failure */function PMA_DBI_data_seek($result, $offset){    return mysqli_data_seek($result, $offset);}/** * Frees memory associated with the result * * @param  mysqli_result  $result */function PMA_DBI_free_result($result){    if ($result instanceof mysqli_result) {        mysqli_free_result($result);    }}/** * Check if there are any more query results from a multi query * * @param   mysqli  $link  the mysqli object * @return  bool         true or false */function PMA_DBI_more_results($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_more_results($link);}/** * Prepare next result from multi_query * * @param   mysqli  $link  the mysqli object * @return  bool         true or false */function PMA_DBI_next_result($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_next_result($link);}/** * Returns a string representing the type of connection used * * @param   resource  $link  mysql link * @return  string          type of connection used */function PMA_DBI_get_host_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_get_host_info($link);}/** * Returns the version of the MySQL protocol used * * @param   resource  $link  mysql link * @return  integer         version of the MySQL protocol used */function PMA_DBI_get_proto_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_get_proto_info($link);}/** * returns a string that represents the client library version * * @return  string          MySQL client library version */function PMA_DBI_get_client_info(){    return mysqli_get_client_info();}/** * returns last error message or false if no errors occured * * @param   resource  $link  mysql link * @return  string|bool  $error or false */function PMA_DBI_getError($link = null){    $GLOBALS['errno'] = 0;    /* Treat false same as null because of controllink */    if ($link === false) {        $link = null;    }    if (null === $link && isset($GLOBALS['userlink'])) {        $link =& $GLOBALS['userlink'];        // Do not stop now. We still can get the error code        // with mysqli_connect_errno()//    } else {//        return false;    }    if (null !== $link) {        $error_number = mysqli_errno($link);        $error_message = mysqli_error($link);    } else {        $error_number = mysqli_connect_errno();        $error_message = mysqli_connect_error();    }    if (0 == $error_number) {        return false;    }    // keep the error number for further check after the call to PMA_DBI_getError()    $GLOBALS['errno'] = $error_number;    return PMA_DBI_formatError($error_number, $error_message);}/** * returns the number of rows returned by last query * * @param   mysqli_result  $result * @return  string|int */function PMA_DBI_num_rows($result){    // see the note for PMA_DBI_try_query();    if (!is_bool($result)) {        return @mysqli_num_rows($result);    } else {        return 0;    }}/** * returns last inserted auto_increment id for given $link or $GLOBALS['userlink'] * * @param   mysqli  $link  the mysqli object * @return  string|int */function PMA_DBI_insert_id($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    // When no controluser is defined, using mysqli_insert_id($link)    // does not always return the last insert id due to a mixup with    // the tracking mechanism, but this works:    return PMA_DBI_fetch_value('SELECT LAST_INSERT_ID();', 0, 0, $link);    // Curiously, this problem does not happen with the mysql extension but    // there is another problem with BIGINT primary keys so PMA_DBI_insert_id()    // in the mysql extension also uses this logic.}/** * returns the number of rows affected by last query * * @param   mysqli   $link            the mysqli object * @param   boolean  $get_from_cache * @return  string|int */function PMA_DBI_affected_rows($link = null, $get_from_cache = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($get_from_cache) {        return $GLOBALS['cached_affected_rows'];    } else {        return mysqli_affected_rows($link);    }}/** * returns metainfo for fields in $result * * @param   mysqli_result  $result * @return  array  meta info for fields in $result */function PMA_DBI_get_fields_meta($result){    // Build an associative array for a type look up    $typeAr = array();    $typeAr[MYSQLI_TYPE_DECIMAL]     = 'real';    $typeAr[MYSQLI_TYPE_NEWDECIMAL]  = 'real';    $typeAr[MYSQLI_TYPE_BIT]         = 'int';    $typeAr[MYSQLI_TYPE_TINY]        = 'int';    $typeAr[MYSQLI_TYPE_SHORT]       = 'int';    $typeAr[MYSQLI_TYPE_LONG]        = 'int';    $typeAr[MYSQLI_TYPE_FLOAT]       = 'real';    $typeAr[MYSQLI_TYPE_DOUBLE]      = 'real';    $typeAr[MYSQLI_TYPE_NULL]        = 'null';    $typeAr[MYSQLI_TYPE_TIMESTAMP]   = 'timestamp';    $typeAr[MYSQLI_TYPE_LONGLONG]    = 'int';    $typeAr[MYSQLI_TYPE_INT24]       = 'int';    $typeAr[MYSQLI_TYPE_DATE]        = 'date';    $typeAr[MYSQLI_TYPE_TIME]        = 'time';    $typeAr[MYSQLI_TYPE_DATETIME]    = 'datetime';    $typeAr[MYSQLI_TYPE_YEAR]        = 'year';    $typeAr[MYSQLI_TYPE_NEWDATE]     = 'date';    $typeAr[MYSQLI_TYPE_ENUM]        = 'unknown';    $typeAr[MYSQLI_TYPE_SET]         = 'unknown';    $typeAr[MYSQLI_TYPE_TINY_BLOB]   = 'blob';    $typeAr[MYSQLI_TYPE_MEDIUM_BLOB] = 'blob';    $typeAr[MYSQLI_TYPE_LONG_BLOB]   = 'blob';    $typeAr[MYSQLI_TYPE_BLOB]        = 'blob';    $typeAr[MYSQLI_TYPE_VAR_STRING]  = 'string';    $typeAr[MYSQLI_TYPE_STRING]      = 'string';    $typeAr[MYSQLI_TYPE_VARCHAR]     = 'string'; // for Drizzle    // MySQL returns MYSQLI_TYPE_STRING for CHAR    // and MYSQLI_TYPE_CHAR === MYSQLI_TYPE_TINY    // so this would override TINYINT and mark all TINYINT as string    // https://sf.net/tracker/?func=detail&aid=1532111&group_id=23067&atid=377408    //$typeAr[MYSQLI_TYPE_CHAR]        = 'string';    $typeAr[MYSQLI_TYPE_GEOMETRY]    = 'geometry';    $typeAr[MYSQLI_TYPE_BIT]         = 'bit';    $fields = mysqli_fetch_fields($result);    // this happens sometimes (seen under MySQL 4.0.25)    if (!is_array($fields)) {        return false;    }    foreach ($fields as $k => $field) {        $fields[$k]->_type = $field->type;        $fields[$k]->type = $typeAr[$field->type];        $fields[$k]->_flags = $field->flags;        $fields[$k]->flags = PMA_DBI_field_flags($result, $k);        // Enhance the field objects for mysql-extension compatibilty        //$flags = explode(' ', $fields[$k]->flags);        //array_unshift($flags, 'dummy');        $fields[$k]->multiple_key            = (int) (bool) ($fields[$k]->_flags & MYSQLI_MULTIPLE_KEY_FLAG);        $fields[$k]->primary_key            = (int) (bool) ($fields[$k]->_flags & MYSQLI_PRI_KEY_FLAG);        $fields[$k]->unique_key            = (int) (bool) ($fields[$k]->_flags & MYSQLI_UNIQUE_KEY_FLAG);        $fields[$k]->not_null            = (int) (bool) ($fields[$k]->_flags & MYSQLI_NOT_NULL_FLAG);        $fields[$k]->unsigned            = (int) (bool) ($fields[$k]->_flags & MYSQLI_UNSIGNED_FLAG);        $fields[$k]->zerofill            = (int) (bool) ($fields[$k]->_flags & MYSQLI_ZEROFILL_FLAG);        $fields[$k]->numeric            = (int) (bool) ($fields[$k]->_flags & MYSQLI_NUM_FLAG);        $fields[$k]->blob            = (int) (bool) ($fields[$k]->_flags & MYSQLI_BLOB_FLAG);    }    return $fields;}/** * return number of fields in given $result * * @param   mysqli_result  $result * @return  int  field count */function PMA_DBI_num_fields($result){    return mysqli_num_fields($result);}/** * returns the length of the given field $i in $result * * @param   mysqli_result  $result * @param   int            $i       field * @return  int  length of field */function PMA_DBI_field_len($result, $i){    return mysqli_fetch_field_direct($result, $i)->length;}/** * returns name of $i. field in $result * * @param   mysqli_result  $result * @param   int            $i       field * @return  string  name of $i. field in $result */function PMA_DBI_field_name($result, $i){    return mysqli_fetch_field_direct($result, $i)->name;}/** * returns concatenated string of human readable field flags * * @param   mysqli_result  $result * @param   int            $i       field * @return  string  field flags */function PMA_DBI_field_flags($result, $i){    // This is missing from PHP 5.2.5, see http://bugs.php.net/bug.php?id=44846    if (! defined('MYSQLI_ENUM_FLAG')) {        define('MYSQLI_ENUM_FLAG', 256); // see MySQL source include/mysql_com.h    }    $f = mysqli_fetch_field_direct($result, $i);    $type = $f->type;    $charsetnr = $f->charsetnr;    $f = $f->flags;    $flags = '';    if ($f & MYSQLI_UNIQUE_KEY_FLAG) {        $flags .= 'unique ';    }    if ($f & MYSQLI_NUM_FLAG) {        $flags .= 'num ';    }    if ($f & MYSQLI_PART_KEY_FLAG) {        $flags .= 'part_key ';    }    if ($f & MYSQLI_SET_FLAG) {        $flags .= 'set ';    }    if ($f & MYSQLI_TIMESTAMP_FLAG) {        $flags .= 'timestamp ';    }    if ($f & MYSQLI_AUTO_INCREMENT_FLAG) {        $flags .= 'auto_increment ';    }    if ($f & MYSQLI_ENUM_FLAG) {        $flags .= 'enum ';    }    // See http://dev.mysql.com/doc/refman/6.0/en/c-api-datatypes.html:    // to determine if a string is binary, we should not use MYSQLI_BINARY_FLAG    // but instead the charsetnr member of the MYSQL_FIELD    // structure. Watch out: some types like DATE returns 63 in charsetnr    // so we have to check also the type.    // Unfortunately there is no equivalent in the mysql extension.    if (($type == MYSQLI_TYPE_TINY_BLOB || $type == MYSQLI_TYPE_BLOB || $type == MYSQLI_TYPE_MEDIUM_BLOB || $type == MYSQLI_TYPE_LONG_BLOB || $type == MYSQLI_TYPE_VAR_STRING || $type == MYSQLI_TYPE_STRING) && 63 == $charsetnr) {        $flags .= 'binary ';    }    if ($f & MYSQLI_ZEROFILL_FLAG) {        $flags .= 'zerofill ';    }    if ($f & MYSQLI_UNSIGNED_FLAG) {        $flags .= 'unsigned ';    }    if ($f & MYSQLI_BLOB_FLAG) {        $flags .= 'blob ';    }    if ($f & MYSQLI_MULTIPLE_KEY_FLAG) {        $flags .= 'multiple_key ';    }    if ($f & MYSQLI_UNIQUE_KEY_FLAG) {        $flags .= 'unique_key ';    }    if ($f & MYSQLI_PRI_KEY_FLAG) {        $flags .= 'primary_key ';    }    if ($f & MYSQLI_NOT_NULL_FLAG) {        $flags .= 'not_null ';    }    return trim($flags);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * DocSQL import plugin for phpMyAdmin * * @package PhpMyAdmin-Import * @subpackage DocSQL */if (! defined('PHPMYADMIN')) {    exit;}/** * Load relations. */$cfgRelation = PMA_getRelationsParam();/** * We need relations enabled and we work only on database */if ($plugin_param !== 'database' || $GLOBALS['num_tables'] < 1 || ! $cfgRelation['relwork'] || ! $cfgRelation['commwork']) {    return;}if (isset($plugin_list)) {    $plugin_list['docsql'] = array(           // set name of your plugin        'text' => __('DocSQL'),                // text to be displayed as choice        'extension' => '',                  // extension this plugin can handle        'options' => array(                 // array of options for your plugin (optional)            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'text', 'name' => 'table', 'text' => __('Table name')),            array('type' => 'end_group')        ),        'options_text' => __('Options'), // text to describe plugin options (must be set if options are used)        );    /* We do not define function when plugin is just queried for information above */    return;}$tab = $_POST['docsql_table'];$buffer = '';/* Read whole buffer, we except it is small enough */while (!$finished && !$error && !$timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        // subtract data we didn't handle yet and stop processing        break;    } elseif ($data === true) {        // nothing to read        break;    } else {        // Append new data to buffer        $buffer .= $data;    }} // End of import loop/* Process the data */if ($data === true && !$error && !$timeout_passed) {    $buffer = str_replace("\r\n", "\n", $buffer);    $buffer = str_replace("\r", "\n", $buffer);    $lines = explode("\n", $buffer);    foreach ($lines AS $lkey => $line) {        //echo '<p>' . $line . '</p>';        $inf     = explode('|', $line);        if (!empty($inf[1]) && strlen(trim($inf[1])) > 0) {            $qry = '                 INSERT INTO                        ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '                      (db_name, table_name, column_name, comment)                 VALUES (                        \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\',                        \'' . PMA_sqlAddSlashes(trim($tab)) . '\',                        \'' . PMA_sqlAddSlashes(trim($inf[0])) . '\',                        \'' . PMA_sqlAddSlashes(trim($inf[1])) . '\')';            PMA_importRunQuery($qry, $qry . '-- ' . htmlspecialchars($tab) . '.' . htmlspecialchars($inf[0]), true);        } // end inf[1] exists        if (!empty($inf[2]) && strlen(trim($inf[2])) > 0) {            $for = explode('->', $inf[2]);            $qry = '                 INSERT INTO                        ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation']) . '                      (master_db, master_table, master_field, foreign_db, foreign_table, foreign_field)                 VALUES (                        \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\',                        \'' . PMA_sqlAddSlashes(trim($tab)) . '\',                        \'' . PMA_sqlAddSlashes(trim($inf[0])) . '\',                        \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\',                        \'' . PMA_sqlAddSlashes(trim($for[0])) . '\',                        \'' . PMA_sqlAddSlashes(trim($for[1])) . '\')';            PMA_importRunQuery($qry, $qry . '-- ' . htmlspecialchars($tab) . '.' . htmlspecialchars($inf[0]) . '(' . htmlspecialchars($inf[2]) . ')', true);        } // end inf[2] exists    } // End lines loop} // End import// Commit any possible data in buffersPMA_importRunQuery();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {    die(__("GLOBALS overwrite attempt"));}/** * Sends the beginning of the html page then returns to the calling script */// Defines the cell alignment values depending on text directionif ($GLOBALS['text_dir'] == 'ltr') {    $GLOBALS['cell_align_left']  = 'left';    $GLOBALS['cell_align_right'] = 'right';} else {    $GLOBALS['cell_align_left']  = 'right';    $GLOBALS['cell_align_right'] = 'left';}// removes the bug with the horizontal scrollbar in IE (it's allways shown, if need it or not)// xml declaration moves IE into quirks mode, making much trouble with CSS/* echo '<?xml version="1.0" encoding="utf-8"?>'; */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $GLOBALS['available_languages'][$GLOBALS['lang']][1]; ?>" lang="<?php echo $GLOBALS['available_languages'][$GLOBALS['lang']][1]; ?>" dir="<?php echo $GLOBALS['text_dir']; ?>"><head>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <title><?php    if (!empty($page_title)) {        echo htmlspecialchars($page_title);    } else {        echo 'phpMyAdmin';    }?></title>    <link rel="stylesheet" type="text/css" href="<?php echo defined('PMA_PATH_TO_BASEDIR') ? PMA_PATH_TO_BASEDIR : ''; ?>phpmyadmin.css.php<?php echo PMA_generate_common_url(array('server' => $GLOBALS['server'])); ?>&amp;js_frame=<?php echo isset($print_view) ? 'print' : 'right'; ?>&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" />    <link rel="stylesheet" type="text/css" href="<?php echo defined('PMA_PATH_TO_BASEDIR') ? PMA_PATH_TO_BASEDIR : ''; ?>print.css" media="print" />    <link rel="stylesheet" type="text/css" href="<?php echo $GLOBALS['pmaThemePath']; ?>/jquery/jquery-ui-1.8.16.custom.css" />    <meta name="robots" content="noindex,nofollow" />
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * navigation css file from theme Original * * @package PhpMyAdmin-theme * @subpackage Original */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON') && !defined('TESTSUITE')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : $_COOKIE['pma_fontsize']); ?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    margin:             0;    padding:            0.2em 0.2em 0.2em 0.2em;}a img {    border: 0;}a:link,a:visited,a:active {    text-decoration:    none;    color:              #0000FF;}ul {    margin:0;}form {    margin:             0;    padding:            0;    display:            inline;}select#select_server,select#lightm_db {    width:              100%;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}/******************************************************************************//* classes *//******************************************************************************//* specific elements */div#pmalogo {    <?php //better echo $GLOBALS['cfg']['logoBGC']; ?>    background-color: <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    padding:.3em;}div#recentTableList {    text-align: center;    margin-bottom: 0.5em;}div#recentTableList select {    width: 100%;}div#pmalogo,div#leftframelinks,div#databaseList {    text-align:         center;    margin-bottom:      0.5em;    padding-bottom:     0.5em;}ul#databaseList {    margin-bottom:      0.5em;    padding-bottom:     0.5em;    padding-<?php echo $left; ?>:     1.5em;    font-style: italic;}ul#databaseList a {    display: block;    font-style: normal;}div#navidbpageselector a,ul#databaseList a {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}ul#databaseList ul {    padding-left: 1em;    padding-right: 0;}ul#databaseList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}ul#databaseList li.selected a {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}div#leftframelinks .icon {    padding:            0;    margin:             0;}div#leftframelinks a img.icon {    margin:             2px;    border:             0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding:            0;}div#leftframelinks a:hover img {    background-color:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}/* serverlist */#body_leftFrame #list_server {    list-style-image: url(<?php echo $GLOBALS['cfg']['ThemePath']; ?>/original/img/s_host.png);    list-style-position: inside;    list-style-type: none;    margin: 0;    padding: 0;}#body_leftFrame #list_server li {    margin: 0;    padding: 0;    font-size:          80%;}div#left_tableList ul {    list-style-type:    none;    list-style-position: outside;    margin:             0;    padding:            0;    font-size:          80%;    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;}div#left_tableList ul ul {    font-size:          100%;}div#left_tableList a {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    none;}div#left_tableList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    underline;}div#left_tableList li {    margin:             0;    padding:            0;    white-space:        nowrap;}<?php if ($GLOBALS['cfg']['BrowseMarkerColor']) { ?>/* marked items */div#left_tableList > ul li.marked > a,div#left_tableList > ul li.marked {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['LeftPointerEnable']) { ?>div#left_tableList > ul li:hover > a,div#left_tableList > ul li:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}<?php } ?>div#left_tableList img {    padding:            0;    vertical-align:     middle;}div#left_tableList ul ul {    margin-<?php echo $left; ?>:        0;    padding-<?php echo $left; ?>:       0.1em;    border-<?php echo $left; ?>:        0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding-bottom:     0.1em;    border-bottom:      0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}/* for the servers list in navi panel */#serverinfo .item {    white-space:        nowrap;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}#serverinfo a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}#NavFilter {    display: none;}#clear_fast_filter {    background: white;    color: black;    cursor: pointer;    padding: 0;    margin: 3px 5px 0 -23px;    position: relative;    float: right;}#fast_filter {    width: 100%;    padding: 2px 0;    margin: 0;    border: 0;}#fast_filter.gray {    color: gray;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Exporting of translated messages from PHP to Javascript * * @package PhpMyAdmin */chdir('..');// Send correct type:header('Content-Type: text/javascript; charset=UTF-8');// Cache output in client - the nocache query parameter makes sure that this// file is reloaded when config changesheader('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');// Avoid loading the full common.inc.php because this would add many// non-js-compatible stuff like DOCTYPEdefine('PMA_MINIMUM_COMMON', true);require_once './libraries/common.inc.php';// Close session early as we won't write anything theresession_write_close();// But this one is needed for PMA_escapeJsString()require_once './libraries/js_escape.lib.php';$js_messages['strNoDropDatabases'] = $cfg['AllowUserDropDatabase'] ? '' : __('"DROP DATABASE" statements are disabled.');/* For confirmations */$js_messages['strDoYouReally'] = __('Do you really want to ');$js_messages['strDropDatabaseStrongWarning'] = __('You are about to DESTROY a complete database!');$js_messages['strDropTableStrongWarning'] = __('You are about to DESTROY a complete table!');$js_messages['strTruncateTableStrongWarning'] = __('You are about to TRUNCATE a complete table!');$js_messages['strDeleteTrackingData'] = __('Delete tracking data for this table');$js_messages['strDeletingTrackingData'] = __('Deleting tracking data');$js_messages['strDroppingPrimaryKeyIndex'] = __('Dropping Primary Key/Index');$js_messages['strOperationTakesLongTime'] = __('This operation could take a long time. Proceed anyway?');/* For blobstreaming */$js_messages['strBLOBRepositoryDisableStrongWarning'] = __('You are about to DISABLE a BLOB Repository!');$js_messages['strBLOBRepositoryDisableAreYouSure'] = sprintf(__('Are you sure you want to disable all BLOB references for database %s?'), PMA_escapeJsString($GLOBALS['db']));/* For indexes */$js_messages['strFormEmpty'] = __('Missing value in the form!');$js_messages['strNotNumber'] = __('This is not a number!');$js_messages['strAddIndex'] = __('Add Index');$js_messages['strEditIndex'] = __('Edit Index');$js_messages['strAddToIndex'] = __('Add %d column(s) to index');/* Charts *//* l10n: Default description for the y-Axis of Charts */$js_messages['strTotalCount'] = __('Total count');/* For server_privileges.js */$js_messages['strHostEmpty'] = __('The host name is empty!');$js_messages['strUserEmpty'] = __('The user name is empty!');$js_messages['strPasswordEmpty'] = __('The password is empty!');$js_messages['strPasswordNotSame'] = __('The passwords aren\'t the same!');$js_messages['strAddUser'] = __('Add user');$js_messages['strReloadingPrivileges'] = __('Reloading Privileges');$js_messages['strRemovingSelectedUsers'] = __('Removing Selected Users');$js_messages['strClose'] = __('Close');/* for server_status.js */$js_messages['strEdit'] = __('Edit');$js_messages['strLiveTrafficChart'] = __('Live traffic chart');$js_messages['strLiveConnChart'] = __('Live conn./process chart');$js_messages['strLiveQueryChart'] = __('Live query chart');$js_messages['strStaticData'] = __('Static data');/* l10n: Total number of queries */$js_messages['strTotal'] = __('Total');/* l10n: Other, small valued, queries */$js_messages['strOther'] = __('Other');/* l10n: Thousands separator */$js_messages['strThousandsSeperator'] = __(',');/* l10n: Decimal separator */$js_messages['strDecimalSeperator'] = __('.');$js_messages['strChartKBSent'] = __('KiB sent since last refresh');$js_messages['strChartKBReceived'] = __('KiB received since last refresh');$js_messages['strChartServerTraffic'] = __('Server traffic (in KiB)');$js_messages['strChartConnections'] = __('Connections since last refresh');$js_messages['strChartProcesses'] = __('Processes');$js_messages['strChartConnectionsTitle'] = __('Connections / Processes');/* l10n: Questions is the name of a MySQL Status variable */$js_messages['strChartIssuedQueries'] = __('Questions since last refresh');/* l10n: Questions is the name of a MySQL Status variable */$js_messages['strChartIssuedQueriesTitle'] = __('Questions (executed statements by the server)');$js_messages['strChartQueryPie'] = __('Query statistics');/* server status monitor */$js_messages['strIncompatibleMonitorConfig'] = __('Local monitor configuration incompatible');$js_messages['strIncompatibleMonitorConfigDescription'] = __('The chart arrangement configuration in your browsers local storage is not compatible anymore to the newer version of the monitor dialog. It is very likely that your current configuration will not work anymore. Please reset your configuration to default in the <i>Settings</i> menu.');$js_messages['strQueryCacheEfficiency'] = __('Query cache efficiency');$js_messages['strQueryCacheUsage'] = __('Query cache usage');$js_messages['strQueryCacheUsed'] = __('Query cache used');$js_messages['strSystemCPUUsage'] = __('System CPU Usage');$js_messages['strSystemMemory'] = __('System memory');$js_messages['strSystemSwap'] = __('System swap');$js_messages['strMiB'] = __('MiB');$js_messages['strKiB'] = __('KiB');$js_messages['strAverageLoad'] = __('Average load');$js_messages['strTotalMemory'] = __('Total memory');$js_messages['strCachedMemory'] = __('Cached memory');$js_messages['strBufferedMemory'] = __('Buffered memory');$js_messages['strFreeMemory'] = __('Free memory');$js_messages['strUsedMemory'] = __('Used memory');$js_messages['strTotalSwap'] = __('Total Swap');$js_messages['strCachedSwap'] = __('Cached Swap');$js_messages['strUsedSwap'] = __('Used Swap');$js_messages['strFreeSwap'] = __('Free Swap');$js_messages['strBytesSent'] = __('Bytes sent');$js_messages['strBytesReceived'] = __('Bytes received');$js_messages['strConnections'] = __('Connections');$js_messages['strProcesses'] = __('Processes');/* summary row */$js_messages['strB'] = __('B');$js_messages['strKiB'] = __('KiB');$js_messages['strMiB'] = __('MiB');$js_messages['strGiB'] = __('GiB');$js_messages['strTiB'] = __('TiB');$js_messages['strPiB'] = __('PiB');$js_messages['strEiB'] = __('EiB');$js_messages['strTables'] = __('%d table(s)');/* l10n: Questions is the name of a MySQL Status variable */$js_messages['strQuestions'] = __('Questions');$js_messages['strTraffic'] = __('Traffic');$js_messages['strSettings'] = __('Settings');$js_messages['strRemoveChart'] = __('Remove chart');$js_messages['strEditChart'] = __('Edit title and labels');$js_messages['strAddChart'] = __('Add chart to grid');$js_messages['strClose'] = __('Close');$js_messages['strAddOneSeriesWarning'] = __('Please add at least one variable to the series');$js_messages['strNone'] = __('None');$js_messages['strResumeMonitor'] = __('Resume monitor');$js_messages['strPauseMonitor'] = __('Pause monitor');/* Monitor: Instructions Dialog */$js_messages['strBothLogOn'] = __('general_log and slow_query_log are enabled.');$js_messages['strGenLogOn'] = __('general_log is enabled.');$js_messages['strSlowLogOn'] = __('slow_query_log is enabled.');$js_messages['strBothLogOff'] = __('slow_query_log and general_log are disabled.');$js_messages['strLogOutNotTable'] = __('log_output is not set to TABLE.');$js_messages['strLogOutIsTable'] = __('log_output is set to TABLE.');$js_messages['strSmallerLongQueryTimeAdvice'] = __('slow_query_log is enabled, but the server logs only queries that take longer than %d seconds. It is advisable to set this long_query_time 0-2 seconds, depending on your system.');$js_messages['strLongQueryTimeSet'] = __('long_query_time is set to %d second(s).');$js_messages['strSettingsAppliedGlobal'] = __('Following settings will be applied globally and reset to default on server restart:');/* l10n: %s is FILE or TABLE */$js_messages['strSetLogOutput'] = __('Set log_output to %s');/* l10n: Enable in this context means setting a status variable to ON */$js_messages['strEnableVar'] = __('Enable %s');/* l10n: Disable in this context means setting a status variable to OFF */$js_messages['strDisableVar'] = __('Disable %s');/* l10n: %d seconds */$js_messages['setSetLongQueryTime'] = __('Set long_query_time to %ds');$js_messages['strNoSuperUser'] = __('You can\'t change these variables. Please log in as root or contact your database administrator.');$js_messages['strChangeSettings'] = __('Change settings');$js_messages['strCurrentSettings'] = __('Current settings');$js_messages['strChartTitle'] = __('Chart Title');/* l10n: As in differential values */$js_messages['strDifferential'] = __('Differential');$js_messages['strDividedBy'] = __('Divided by %s');$js_messages['strUnit'] = __('Unit');$js_messages['strFromSlowLog'] = __('From slow log');$js_messages['strFromGeneralLog'] = __('From general log');$js_messages['strAnalysingLogs'] = __('Analysing & loading logs. This may take a while.');$js_messages['strCancelRequest'] = __('Cancel request');$js_messages['strCountColumnExplanation'] = __('This column shows the amount of identical queries that are grouped together. However only the SQL query itself has been used as a grouping criteria, so the other attributes of queries, such as start time, may differ.');$js_messages['strMoreCountColumnExplanation'] = __('Since grouping of INSERTs queries has been selected, INSERT queries into the same table are also being grouped together, disregarding of the inserted data.');$js_messages['strLogDataLoaded'] = __('Log data loaded. Queries executed in this time span:');$js_messages['strJumpToTable'] = __('Jump to Log table');$js_messages['strNoDataFound'] = __('Log analysed, but no data found in this time span.');$js_messages['strAnalyzing'] = __('Analyzing...');$js_messages['strExplainOutput'] = __('Explain output');$js_messages['strStatus'] = __('Status');$js_messages['strTime'] = __('Time');$js_messages['strTotalTime'] = __('Total time:');$js_messages['strProfilingResults'] = __('Profiling results');$js_messages['strTable'] = _pgettext('Display format', 'Table');$js_messages['strChart'] = __('Chart');/* l10n: A collection of available filters */$js_messages['strFiltersForLogTable'] = __('Log table filter options');/* l10n: Filter as in "Start Filtering" */$js_messages['strFilter'] = __('Filter');$js_messages['strFilterByWordRegexp'] = __('Filter queries by word/regexp:');$js_messages['strIgnoreWhereAndGroup'] = __('Group queries, ignoring variable data in WHERE clauses');$js_messages['strSumRows'] = __('Sum of grouped rows:');$js_messages['strTotal'] = __('Total:');$js_messages['strLoadingLogs'] = __('Loading logs');$js_messages['strRefreshFailed'] = __('Monitor refresh failed');$js_messages['strInvalidResponseExplanation'] = __('While requesting new chart data the server returned an invalid response. This is most likely because your session expired. Reloading the page and reentering your credentials should help.');$js_messages['strReloadPage'] = __('Reload page');$js_messages['strAffectedRows'] = __('Affected rows:');$js_messages['strFailedParsingConfig'] = __('Failed parsing config file. It doesn\'t seem to be valid JSON code.');$js_messages['strFailedBuildingGrid'] = __('Failed building chart grid with imported config. Resetting to default config...');$js_messages['strImport'] = __('Import');$js_messages['strAnalyzeQuery'] = __('Analyse Query');/* Server status advisor */$js_messages['strAdvisorSystem'] = __('Advisor system');$js_messages['strPerformanceIssues'] = __('Possible performance issues');$js_messages['strIssuse'] = __('Issue');$js_messages['strRecommendation'] = __('Recommendation');$js_messages['strRuleDetails'] = __('Rule details');$js_messages['strJustification'] = __('Justification');$js_messages['strFormula'] = __('Used variable / formula');$js_messages['strTest'] = __('Test');/* For inline query editing */$js_messages['strGo'] = __('Go');$js_messages['strCancel'] = __('Cancel');/* For Ajax Notifications */$js_messages['strLoading'] = __('Loading');$js_messages['strProcessingRequest'] = __('Processing Request');$js_messages['strErrorProcessingRequest'] = __('Error in Processing Request');$js_messages['strDroppingColumn'] = __('Dropping Column');$js_messages['strAddingPrimaryKey'] = __('Adding Primary Key');$js_messages['strOK'] = __('OK');$js_messages['strDismiss'] = __('Click to dismiss this notification');/* For db_operations.js */$js_messages['strRenamingDatabases'] = __('Renaming Databases');$js_messages['strReloadDatabase'] = __('Reload Database');$js_messages['strCopyingDatabase'] = __('Copying Database');$js_messages['strChangingCharset'] = __('Changing Charset');$js_messages['strTableMustHaveAtleastOneColumn'] = __('Table must have at least one column');$js_messages['strYes'] = __('Yes');$js_messages['strNo'] = __('No');/* For db_stucture.js */$js_messages['strInsertTable'] = __('Insert Table');$js_messages['strHideIndexes'] = __('Hide indexes');$js_messages['strShowIndexes'] = __('Show indexes');/* For db_search.js */$js_messages['strSearching'] = __('Searching');$js_messages['strHideSearchResults'] = __('Hide search results');$js_messages['strShowSearchResults'] = __('Show search results');$js_messages['strBrowsing'] = __('Browsing');$js_messages['strDeleting'] = __('Deleting');/* For db_routines.js */$js_messages['MissingReturn'] = __('The definition of a stored function must contain a RETURN statement!');/* For ENUM/SET editor*/$js_messages['enum_editor'] = __('ENUM/SET editor');$js_messages['enum_columnVals'] =__('Values for column %s');$js_messages['enum_newColumnVals'] = __('Values for a new column');$js_messages['enum_hint'] =__('Enter each value in a separate field');$js_messages['enum_addValue'] =__('Add %d value(s)');/* For import.js */$js_messages['strImportCSV'] = __('Note: If the file contains multiple tables, they will be combined into one');/* For sql.js */$js_messages['strHideQueryBox'] = __('Hide query box');$js_messages['strShowQueryBox'] = __('Show query box');$js_messages['strEdit'] = __('Edit');$js_messages['strNoRowSelected'] = __('No rows selected');$js_messages['strChangeTbl'] = __('Change');$js_messages['strQueryExecutionTime'] = __('Query execution time');/* For server_variables.js */$js_messages['strSave'] = __('Save');/* For tbl_select.js */$js_messages['strHideSearchCriteria'] = __('Hide search criteria');$js_messages['strShowSearchCriteria'] = __('Show search criteria');/* For tbl_zoom_plot.js */$js_messages['strZoomSearch'] = __('Zoom Search');$js_messages['strDisplayHelp'] = '<ul><li>'    . __('Each point represents a data row.')    . '</li><li>'    . __('Hovering over a point will show its label.')    . '</li><li>'    . __('Use mousewheel to zoom in or out of the plot.')    . '</li><li>'    . __('Click and drag the mouse to navigate the plot.')    . '</li><li>'    . __('Click reset zoom link to come back to original state.')    . '</li><li>'    . __('Click a data point to view and possibly edit the data row.')    . '</li><li>'    . __('The plot can be resized by dragging it along the bottom right corner.')    . '</li><li>'    . __('Strings are converted into integer for plotting')    . '</li></ul>';$js_messages['strInputNull'] = '<strong>' . __('Select two columns') . '</strong>';$js_messages['strSameInputs'] = '<strong>' . __('Select two different columns') . '</strong>';$js_messages['strQueryResults'] = __('Query results');$js_messages['strDataPointContent'] = __('Data point content');/* For tbl_change.js */$js_messages['strIgnore'] = __('Ignore');$js_messages['strCopy'] = __('Copy');$js_messages['strX'] = __('X');$js_messages['strY'] = __('Y');$js_messages['strPoint'] = __('Point');$js_messages['strPointN'] = __('Point %d');$js_messages['strLineString'] = __('Linestring');$js_messages['strPolygon'] = __('Polygon');$js_messages['strGeometry'] = __('Geometry');$js_messages['strInnerRing'] = __('Inner Ring');$js_messages['strOuterRing'] = __('Outer Ring');$js_messages['strAddPoint'] = __('Add a point');$js_messages['strAddInnerRing'] = __('Add an inner ring');$js_messages['strAddPolygon'] = __('Add a polygon');/* For tbl_structure.js */$js_messages['strAddColumns'] = __('Add columns');/* Designer (js/pmd/move.js) */$js_messages['strSelectReferencedKey'] = __('Select referenced key');$js_messages['strSelectForeignKey'] = __('Select Foreign Key');$js_messages['strPleaseSelectPrimaryOrUniqueKey'] = __('Please select the primary key or a unique key');$js_messages['strChangeDisplay'] = __('Choose column to display');$js_messages['strLeavingDesigner'] = __('You haven\'t saved the changes in the layout. They will be lost if you don\'t save them. Do you want to continue?');/* Visual query builder (js/pmd/move.js) */$js_messages['strAddOption'] = __('Add an option for column ');/* For makegrid.js (column reordering, show/hide column, grid editing) */$js_messages['strCellEditHint'] = __('Press escape to cancel editing');$js_messages['strSaveCellWarning'] = __('You have edited some data and they have not been saved. Are you sure you want to leave this page before saving the data?');$js_messages['strColOrderHint'] = __('Drag to reorder');$js_messages['strSortHint'] = __('Click to sort');$js_messages['strColMarkHint'] = __('Click to mark/unmark');$js_messages['strColVisibHint'] = __('Click the drop-down arrow<br />to toggle column\'s visibility');$js_messages['strShowAllCol'] = __('Show all');$js_messages['strAlertNonUnique'] = __('This table does not contain a unique column. Features related to the grid edit, checkbox, Edit, Copy and Delete links may not work after saving.');$js_messages['strGridEditFeatureHint'] = __('You can also edit most columns<br />by clicking directly on their content.');$js_messages['strGoToLink'] = __('Go to link');/* password generation */$js_messages['strGeneratePassword'] = __('Generate password');$js_messages['strGenerate'] = __('Generate');$js_messages['strChangePassword'] = __('Change Password');/* navigation tabs */$js_messages['strMore'] = __('More');/* update */$js_messages['strNewerVersion'] = __('A newer version of phpMyAdmin is available and you should consider upgrading. The newest version is %s, released on %s.');/* l10n: Latest available phpMyAdmin version */$js_messages['strLatestAvailable'] = __(', latest stable version:');$js_messages['strUpToDate'] = __('up to date');echo "var PMA_messages = new Array();\n";foreach ($js_messages as $name => $js_message) {    PMA_printJsValue("PMA_messages['" . $name . "']", $js_message);}/* Calendar */echo "var themeCalendarImage = '" . $GLOBALS['pmaThemeImage'] . 'b_calendar.png' . "';\n";/* Image path */echo "var pmaThemeImage = '" . $GLOBALS['pmaThemeImage'] . "';\n";/* Version */echo "var pmaversion = '" . PMA_VERSION . "';\n";echo "if ($.datepicker) {\n";/* l10n: Display text for calendar close link */PMA_printJsValue("$.datepicker.regional['']['closeText']", __('Done'));/* l10n: Display text for previous month link in calendar */PMA_printJsValue(    "$.datepicker.regional['']['prevText']",    _pgettext('Previous month', 'Prev'));/* l10n: Display text for next month link in calendar */PMA_printJsValue(    "$.datepicker.regional['']['nextText']",    _pgettext('Next month', 'Next'));/* l10n: Display text for current month link in calendar */PMA_printJsValue("$.datepicker.regional['']['currentText']", __('Today'));PMA_printJsValue("$.datepicker.regional['']['monthNames']",    array(        __('January'),        __('February'),        __('March'),        __('April'),        __('May'),        __('June'),        __('July'),        __('August'),        __('September'),        __('October'),        __('November'),        __('December')));PMA_printJsValue("$.datepicker.regional['']['monthNamesShort']",    array(/* l10n: Short month name */        __('Jan'),/* l10n: Short month name */        __('Feb'),/* l10n: Short month name */        __('Mar'),/* l10n: Short month name */        __('Apr'),/* l10n: Short month name */        _pgettext('Short month name', 'May'),/* l10n: Short month name */        __('Jun'),/* l10n: Short month name */        __('Jul'),/* l10n: Short month name */        __('Aug'),/* l10n: Short month name */        __('Sep'),/* l10n: Short month name */        __('Oct'),/* l10n: Short month name */        __('Nov'),/* l10n: Short month name */        __('Dec')));PMA_printJsValue("$.datepicker.regional['']['dayNames']",    array(        __('Sunday'),        __('Monday'),        __('Tuesday'),        __('Wednesday'),        __('Thursday'),        __('Friday'),        __('Saturday')));PMA_printJsValue("$.datepicker.regional['']['dayNamesShort']",    array(/* l10n: Short week day name */        __('Sun'),/* l10n: Short week day name */        __('Mon'),/* l10n: Short week day name */        __('Tue'),/* l10n: Short week day name */        __('Wed'),/* l10n: Short week day name */        __('Thu'),/* l10n: Short week day name */        __('Fri'),/* l10n: Short week day name */        __('Sat')));PMA_printJsValue("$.datepicker.regional['']['dayNamesMin']",    array(/* l10n: Minimal week day name */        __('Su'),/* l10n: Minimal week day name */        __('Mo'),/* l10n: Minimal week day name */        __('Tu'),/* l10n: Minimal week day name */        __('We'),/* l10n: Minimal week day name */        __('Th'),/* l10n: Minimal week day name */        __('Fr'),/* l10n: Minimal week day name */        __('Sa')));/* l10n: Column header for week of the year in calendar */PMA_printJsValue("$.datepicker.regional['']['weekHeader']", __('Wk'));/* l10n: Month-year order for calendar, use either "calendar-month-year" or "calendar-year-month". */PMA_printJsValue("$.datepicker.regional['']['showMonthAfterYear']", (__('calendar-month-year') == 'calendar-year-month'));/* l10n: Year suffix for calendar, "none" is empty. */$year_suffix = _pgettext('Year suffix', 'none');PMA_printJsValue("$.datepicker.regional['']['yearSuffix']", ($year_suffix == 'none' ? '' : $year_suffix));?>$.extend($.datepicker._defaults, $.datepicker.regional['']);} /* if ($.datepicker) */<?phpecho "if ($.timepicker) {\n";PMA_printJsValue("$.timepicker.regional['']['timeText']", __('Time'));PMA_printJsValue("$.timepicker.regional['']['hourText']", __('Hour'));PMA_printJsValue("$.timepicker.regional['']['minuteText']", __('Minute'));PMA_printJsValue("$.timepicker.regional['']['secondText']", __('Second'));?>$.extend($.timepicker._defaults, $.timepicker.regional['']);} /* if ($.timepicker) */
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build OpenDocument Text dumps of tables * * @package PhpMyAdmin-Export * @subpackage ODT */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && !$plugin_param['single_table']) {        $hide_structure = true;    }    $plugin_list['odt'] = array(        'text' => __('Open Document Text'),        'extension' => 'odt',        'mime_type' => 'application/vnd.oasis.opendocument.text',        'force_file' => true,        'options' => array(), /* Filled later */        'options_text' => __('Options'),        );    /* what to dump (structure/data/both) */    $plugin_list['odt']['options'][]        = array('type' => 'begin_group', 'text' => __('Dump table') , 'name' => 'general_opts');    $plugin_list['odt']['options'][]        = array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data')));    $plugin_list['odt']['options'][] = array('type' => 'end_group');    /* Structure options */    if (!$hide_structure) {        $plugin_list['odt']['options'][]            = array('type' => 'begin_group', 'name' => 'structure', 'text' => __('Object creation options'), 'force' => 'data');        if (!empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['odt']['options'][]                = array('type' => 'bool', 'name' => 'relation', 'text' => __('Display foreign key relationships'));        }        $plugin_list['odt']['options'][]            = array('type' => 'bool', 'name' => 'comments', 'text' => __('Display comments'));        if (!empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['odt']['options'][]                = array('type' => 'bool', 'name' => 'mime', 'text' => __('Display MIME types'));        }        $plugin_list['odt']['options'][]            = array('type' => 'end_group');    }    /* Data */    $plugin_list['odt']['options'][]        = array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure');    $plugin_list['odt']['options'][]        = array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row'));    $plugin_list['odt']['options'][]        = array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:'));    $plugin_list['odt']['options'][]        = array('type' => 'end_group');} else {    $GLOBALS['odt_buffer'] = '';    include_once './libraries/opendocument.lib.php';    /**     * Outputs export footer     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportFooter()    {        $GLOBALS['odt_buffer'] .= '</office:text>'            . '</office:body>'            . '</office:document-content>';        if (! PMA_exportOutputHandler(PMA_createOpenDocument('application/vnd.oasis.opendocument.text', $GLOBALS['odt_buffer']))) {            return false;        }        return true;    }    /**     * Outputs export header     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportHeader()    {        $GLOBALS['odt_buffer'] .= '<?xml version="1.0" encoding="utf-8"?' . '>'            . '<office:document-content '. $GLOBALS['OpenDocumentNS'] . 'office:version="1.0">'            . '<office:body>'            . '<office:text>';        return true;    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="1" text:style-name="Heading_1" text:is-list-header="true">'            . __('Database') . ' ' . htmlspecialchars($db) . '</text:h>';        return true;    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in ODT format     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $what;        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        $fields_meta = PMA_DBI_get_fields_meta($result);        $field_flags = array();        for ($j = 0; $j < $fields_cnt; $j++) {            $field_flags[$j] = PMA_DBI_field_flags($result, $j);        }        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="2" text:style-name="Heading_2" text:is-list-header="true">'            . __('Dumping data for table') . ' ' . htmlspecialchars($table) . '</text:h>';        $GLOBALS['odt_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '_structure">';        $GLOBALS['odt_buffer'] .= '<table:table-column table:number-columns-repeated="' . $fields_cnt . '"/>';        // If required, get fields name at the first line        if (isset($GLOBALS[$what . '_columns'])) {            $GLOBALS['odt_buffer'] .= '<table:table-row>';            for ($i = 0; $i < $fields_cnt; $i++) {                $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                    . '<text:p>' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i))) . '</text:p>'                    . '</table:table-cell>';            } // end for            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $GLOBALS['odt_buffer'] .= '<table:table-row>';            for ($j = 0; $j < $fields_cnt; $j++) {                if (!isset($row[$j]) || is_null($row[$j])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($GLOBALS[$what . '_null']) . '</text:p>'                        . '</table:table-cell>';                // ignore BLOB                } elseif (stristr($field_flags[$j], 'BINARY')                        && $fields_meta[$j]->blob) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->numeric && $fields_meta[$j]->type != 'timestamp' && ! $fields_meta[$j]->blob) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="float" office:value="' . $row[$j] . '" >'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                }            } // end for            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end while        PMA_DBI_free_result($result);        $GLOBALS['odt_buffer'] .= '</table:table>';        return true;    }    /**     * Outputs table's structure     *     * @param string $db          database name     * @param string $table       table name     * @param string $crlf        the end of line sequence     * @param string $error_url   the url to go back in case of error     * @param bool   $do_relation whether to include relation comments     * @param bool   $do_comments whether to include the pmadb-style column comments     *                            as comments in the structure; this is deprecated     *                            but the parameter is left here because export.php     *                            calls PMA_exportStructure() also for other export     *                            types which use this parameter     * @param bool   $do_mime     whether to include mime comments     * @param bool   $dates       whether to include creation/update/check dates     * @param string $export_mode 'create_table', 'triggers', 'create_view', 'stand_in'     * @param string $export_type 'server', 'database', 'table'     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        /* Heading */        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="2" text:style-name="Heading_2" text:is-list-header="true">'            . __('Table structure for table') . ' ' . htmlspecialchars($table) . '</text:h>';        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && !empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $GLOBALS['odt_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '_data">';        $columns_cnt = 4;        if ($do_relation && $have_rel) {            $columns_cnt++;        }        if ($do_comments) {            $columns_cnt++;        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;        }        $GLOBALS['odt_buffer'] .= '<table:table-column table:number-columns-repeated="' . $columns_cnt . '"/>';        /* Header */        $GLOBALS['odt_buffer'] .= '<table:table-row>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Column') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Type') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Null') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Default') . '</text:p>'            . '</table:table-cell>';        if ($do_relation && $have_rel) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('Links to') . '</text:p>'                . '</table:table-cell>';        }        if ($do_comments) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('Comments') . '</text:p>'                . '</table:table-cell>';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('MIME type') . '</text:p>'                . '</table:table-cell>';            $mime_map = PMA_getMIME($db, $table, true);        }        $GLOBALS['odt_buffer'] .= '</table:table-row>';        $columns = PMA_DBI_get_columns($db, $table);        foreach ($columns as $column) {            $field_name = $column['Field'];            $GLOBALS['odt_buffer'] .= '<table:table-row>';            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($field_name) . '</text:p>'                . '</table:table-cell>';            $extracted_fieldspec = PMA_extractFieldSpec($column['Type']);            $type = htmlspecialchars($extracted_fieldspec['print_type']);            if (empty($type)) {                $type     = '&nbsp;';            }            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($type) . '</text:p>'                . '</table:table-cell>';            if (!isset($column['Default'])) {                if ($column['Null'] != 'NO') {                    $column['Default'] = 'NULL';                } else {                    $column['Default'] = '';                }            } else {                $column['Default'] = $column['Default'];            }            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . (($column['Null'] == '' || $column['Null'] == 'NO') ? __('No') : __('Yes')) . '</text:p>'                . '</table:table-cell>';            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($column['Default']) . '</text:p>'                . '</table:table-cell>';            if ($do_relation && $have_rel) {                if (isset($res_rel[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' (' . $res_rel[$field_name]['foreign_field'] . ')') . '</text:p>'                        . '</table:table-cell>';                }            }            if ($do_comments) {                if (isset($comments[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($comments[$field_name]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                }            }            if ($do_mime && $cfgRelation['mimework']) {                if (isset($mime_map[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype'])) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                }            }            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end while        $GLOBALS['odt_buffer'] .= '</table:table>';        return true;    } // end of the 'PMA_exportStructure' function} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * @todo make use of PMA_Message and PMA_Error * @package PhpMyAdmin */class PMA_Table{    /**     * UI preferences properties     */    const PROP_SORTED_COLUMN = 'sorted_col';    const PROP_COLUMN_ORDER = 'col_order';    const PROP_COLUMN_VISIB = 'col_visib';    static $cache = array();    /**     * @var string  table name     */    var $name = '';    /**     * @var string  database name     */    var $db_name = '';    /**     * @var string  engine (innodb, myisam, bdb, ...)     */    var $engine = '';    /**     * @var string  type (view, base table, system view)     */    var $type = '';    /**     * @var array   settings     */    var $settings = array();    /**     * @var array UI preferences     */    var $uiprefs;    /**     * @var array errors occured     */    var $errors = array();    /**     * @var array messages     */    var $messages = array();    /**     * Constructor     *     * @param string $table_name table name     * @param string $db_name    database name     */    function __construct($table_name, $db_name)    {        $this->setName($table_name);        $this->setDbName($db_name);    }    /**     * returns table name     *     * @see PMA_Table::getName()     * @return  string  table name     */    function __toString()    {        return $this->getName();    }    /**     * return the last error     *     * @return the last error     */    function getLastError()    {        return end($this->errors);    }    /**     * return the last message     *     * @return the last message     */    function getLastMessage()    {        return end($this->messages);    }    /**     * sets table name     *     * @param string $table_name new table name     *     * @return nothing     */    function setName($table_name)    {        $this->name = $table_name;    }    /**     * returns table name     *     * @param boolean $backquoted whether to quote name with backticks ``     *     * @return  string  table name     */    function getName($backquoted = false)    {        if ($backquoted) {            return PMA_backquote($this->name);        }        return $this->name;    }    /**     * sets database name for this table     *     * @param string $db_name database name     *     * @return nothing     */    function setDbName($db_name)    {        $this->db_name = $db_name;    }    /**     * returns database name for this table     *     * @param boolean $backquoted whether to quote name with backticks ``     *     * @return  string  database name for this table     */    function getDbName($backquoted = false)    {        if ($backquoted) {            return PMA_backquote($this->db_name);        }        return $this->db_name;    }    /**     * returns full name for table, including database name     *     * @param boolean $backquoted whether to quote name with backticks ``     *     * @return string     */    function getFullName($backquoted = false)    {        return $this->getDbName($backquoted) . '.' . $this->getName($backquoted);    }    /**     * returns whether the table is actually a view     *     * @param string $db    database     * @param string $table table     *     * @return whether the given is a view     */    static public function isView($db = null, $table = null)    {        if (empty($db) || empty($table)) {            return false;        }        // use cached data or load information with SHOW command        if (isset(PMA_Table::$cache[$db][$table]) || $GLOBALS['cfg']['Server']['DisableIS']) {            $type = PMA_Table::sGetStatusInfo($db, $table, 'TABLE_TYPE');            return $type == 'VIEW';        }        // query information_schema        $result = PMA_DBI_fetch_result(            "SELECT TABLE_NAME            FROM information_schema.VIEWS            WHERE TABLE_SCHEMA = '" . PMA_sqlAddSlashes($db) . "'                AND TABLE_NAME = '" . PMA_sqlAddSlashes($table) . "'");        return $result ? true : false;    }    /**     * sets given $value for given $param     *     * @param string $param name     * @param mixed  $value value     *     * @return nothing     */    function set($param, $value)    {        $this->settings[$param] = $value;    }    /**     * returns value for given setting/param     *     * @param string $param name for value to return     *     * @return  mixed   value for $param     */    function get($param)    {        if (isset($this->settings[$param])) {            return $this->settings[$param];        }        return null;    }    /**     * loads structure data     * (this function is work in progress? not yet used)     *     * @return boolean     */    function loadStructure()    {        $table_info = PMA_DBI_get_tables_full($this->getDbName(), $this->getName());        if (false === $table_info) {            return false;        }        $this->settings = $table_info;        if ($this->get('TABLE_ROWS') === null) {            $this->set(                'TABLE_ROWS',                PMA_Table::countRecords($this->getDbName(), $this->getName(), true)            );        }        $create_options = explode(' ', $this->get('TABLE_ROWS'));        // export create options by its name as variables into gloabel namespace        // f.e. pack_keys=1 becomes available as $pack_keys with value of '1'        foreach ($create_options as $each_create_option) {            $each_create_option = explode('=', $each_create_option);            if (isset($each_create_option[1])) {                $this->set($$each_create_option[0], $each_create_option[1]);            }        }        return true;    }    /**     * Checks if this is a merge table     *     * If the ENGINE of the table is MERGE or MRG_MYISAM (alias),     * this is a merge table.     *     * @param string $db    the database name     * @param string $table the table name     *     * @return  boolean  true if it is a merge table     */    static public function isMerge($db = null, $table = null)    {        $engine = null;        // if called static, with parameters        if (! empty($db) && ! empty($table)) {            $engine = PMA_Table::sGetStatusInfo($db, $table, 'ENGINE', null, true);        }        return (! empty($engine) && ((strtoupper($engine) == 'MERGE') || (strtoupper($engine) == 'MRG_MYISAM')));    }    static public function sGetToolTip($db, $table)    {        return PMA_Table::sGetStatusInfo($db, $table, 'Comment')            . ' (' . PMA_Table::countRecords($db, $table) . ')';    }    /**     * Returns full table status info, or specific if $info provided     * this info is collected from information_schema     *     * @param string  $db            database name     * @param string  $table         table name     * @param string  $info     * @param boolean $force_read    read new rather than serving from cache     * @param boolean $disable_error if true, disables error message     *     * @todo PMA_DBI_get_tables_full needs to be merged somehow into this class     * or at least better documented     *     * @return mixed     */    static public function sGetStatusInfo($db, $table, $info = null, $force_read = false, $disable_error = false)    {        if (! isset(PMA_Table::$cache[$db][$table]) || $force_read) {            PMA_DBI_get_tables_full($db, $table);        }        if (! isset(PMA_Table::$cache[$db][$table])) {            // happens when we enter the table creation dialog            // or when we really did not get any status info, for example            // when $table == 'TABLE_NAMES' after the user tried SHOW TABLES            return '';        }        if (null === $info) {            return PMA_Table::$cache[$db][$table];        }        // array_key_exists allows for null values        if (!array_key_exists($info, PMA_Table::$cache[$db][$table])) {            if (! $disable_error) {                trigger_error(__('unknown table status: ') . $info, E_USER_WARNING);            }            return false;        }        return PMA_Table::$cache[$db][$table][$info];    }    /**     * generates column specification for ALTER or CREATE TABLE syntax     *     * @param string      $name           name     * @param string      $type           type ('INT', 'VARCHAR', 'BIT', ...)     * @param string      $length         length ('2', '5,2', '', ...)     * @param string      $attribute      attribute     * @param string      $collation      collation     * @param bool|string $null           with 'NULL' or 'NOT NULL'     * @param string      $default_type   whether default is CURRENT_TIMESTAMP,     *                                    NULL, NONE, USER_DEFINED     * @param string      $default_value  default value for USER_DEFINED default type     * @param string      $extra          'AUTO_INCREMENT'     * @param string      $comment        field comment     * @param array       &$field_primary list of fields for PRIMARY KEY     * @param string      $index     *     * @todo    move into class PMA_Column     * @todo on the interface, some js to clear the default value when the default     * current_timestamp is checked     *     * @return  string  field specification     */    static function generateFieldSpec($name, $type, $length = '', $attribute = '',        $collation = '', $null = false, $default_type = 'USER_DEFINED',        $default_value = '', $extra = '', $comment = '',        &$field_primary, $index)    {        $is_timestamp = strpos(strtoupper($type), 'TIMESTAMP') !== false;        $query = PMA_backquote($name) . ' ' . $type;        if ($length != ''            && !preg_match('@^(DATE|DATETIME|TIME|TINYBLOB|TINYTEXT|BLOB|TEXT|'                . 'MEDIUMBLOB|MEDIUMTEXT|LONGBLOB|LONGTEXT|SERIAL|BOOLEAN|UUID)$@i', $type)) {            $query .= '(' . $length . ')';        }        if ($attribute != '') {            $query .= ' ' . $attribute;        }        if (! empty($collation) && $collation != 'NULL'            && preg_match('@^(TINYTEXT|TEXT|MEDIUMTEXT|LONGTEXT|VARCHAR|CHAR|ENUM|SET)$@i', $type)        ) {            $query .= PMA_generateCharsetQueryPart($collation);        }        if ($null !== false) {            if ($null == 'NULL') {                $query .= ' NULL';            } else {                $query .= ' NOT NULL';            }        }        switch ($default_type) {        case 'USER_DEFINED' :            if ($is_timestamp && $default_value === '0') {                // a TIMESTAMP does not accept DEFAULT '0'                // but DEFAULT 0 works                $query .= ' DEFAULT 0';            } elseif ($type == 'BIT') {                $query .= ' DEFAULT b\''                        . preg_replace('/[^01]/', '0', $default_value)                        . '\'';            } elseif ($type == 'BOOLEAN') {                if (preg_match('/^1|T|TRUE|YES$/i', $default_value)) {                    $query .= ' DEFAULT TRUE';                } elseif (preg_match('/^0|F|FALSE|NO$/i', $default_value)) {                    $query .= ' DEFAULT FALSE';                } else {                    // Invalid BOOLEAN value                    $query .= ' DEFAULT \'' . PMA_sqlAddSlashes($default_value) . '\'';                }            } else {                $query .= ' DEFAULT \'' . PMA_sqlAddSlashes($default_value) . '\'';            }            break;        case 'NULL' :        case 'CURRENT_TIMESTAMP' :            $query .= ' DEFAULT ' . $default_type;            break;        case 'NONE' :        default :            break;        }        if (!empty($extra)) {            $query .= ' ' . $extra;            // Force an auto_increment field to be part of the primary key            // even if user did not tick the PK box;            if ($extra == 'AUTO_INCREMENT') {                $primary_cnt = count($field_primary);                if (1 == $primary_cnt) {                    for ($j = 0; $j < $primary_cnt; $j++) {                        if ($field_primary[$j] == $index) {                            break;                        }                    }                    if (isset($field_primary[$j]) && $field_primary[$j] == $index) {                        $query .= ' PRIMARY KEY';                        unset($field_primary[$j]);                    }                } else {                    // but the PK could contain other columns so do not append                    // a PRIMARY KEY clause, just add a member to $field_primary                    $found_in_pk = false;                    for ($j = 0; $j < $primary_cnt; $j++) {                        if ($field_primary[$j] == $index) {                            $found_in_pk = true;                            break;                        }                    } // end for                    if (! $found_in_pk) {                        $field_primary[] = $index;                    }                }            } // end if (auto_increment)        }        if (!empty($comment)) {            $query .= " COMMENT '" . PMA_sqlAddSlashes($comment) . "'";        }        return $query;    } // end function    /**     * Counts and returns (or displays) the number of records in a table     *     * Revision 13 July 2001: Patch for limiting dump size from     * vinay@sanisoft.com & girish@sanisoft.com     *     * @param string $db          the current database name     * @param string $table       the current table name     * @param bool   $force_exact whether to force an exact count     * @param bool   $is_view     whether the table is a view     *     * @return mixed the number of records if "retain" param is true,     *               otherwise true     */    static public function countRecords($db, $table, $force_exact = false, $is_view = null)    {        if (isset(PMA_Table::$cache[$db][$table]['ExactRows'])) {            $row_count = PMA_Table::$cache[$db][$table]['ExactRows'];        } else {            $row_count = false;            if (null === $is_view) {                $is_view = PMA_Table::isView($db, $table);            }            if (! $force_exact) {                if (! isset(PMA_Table::$cache[$db][$table]['Rows']) && ! $is_view) {                    $tmp_tables = PMA_DBI_get_tables_full($db, $table);                    if (isset($tmp_tables[$table])) {                        PMA_Table::$cache[$db][$table] = $tmp_tables[$table];                    }                }                if (isset(PMA_Table::$cache[$db][$table]['Rows'])) {                    $row_count = PMA_Table::$cache[$db][$table]['Rows'];                } else {                    $row_count = false;                }            }            // for a VIEW, $row_count is always false at this point            if (false === $row_count || $row_count < $GLOBALS['cfg']['MaxExactCount']) {                // Make an exception for views in I_S and D_D schema in Drizzle, as these map to                // in-memory data and should execute fast enough                if (! $is_view || (PMA_DRIZZLE && PMA_is_system_schema($db))) {                    $row_count = PMA_DBI_fetch_value(                        'SELECT COUNT(*) FROM ' . PMA_backquote($db) . '.'                        . PMA_backquote($table)                    );                } else {                    // For complex views, even trying to get a partial record                    // count could bring down a server, so we offer an                    // alternative: setting MaxExactCountViews to 0 will bypass                    // completely the record counting for views                    if ($GLOBALS['cfg']['MaxExactCountViews'] == 0) {                        $row_count = 0;                    } else {                        // Counting all rows of a VIEW could be too long, so use                        // a LIMIT clause.                        // Use try_query because it can fail (when a VIEW is                        // based on a table that no longer exists)                        $result = PMA_DBI_try_query(                            'SELECT 1 FROM ' . PMA_backquote($db) . '.'                            . PMA_backquote($table) . ' LIMIT '                            . $GLOBALS['cfg']['MaxExactCountViews'],                            null,                            PMA_DBI_QUERY_STORE                        );                        if (!PMA_DBI_getError()) {                            $row_count = PMA_DBI_num_rows($result);                            PMA_DBI_free_result($result);                        }                    }                }                PMA_Table::$cache[$db][$table]['ExactRows'] = $row_count;            }        }        return $row_count;    } // end of the 'PMA_Table::countRecords()' function    /**     * Generates column specification for ALTER syntax     *     * @param string      $oldcol         old column name     * @param string      $newcol         new column name     * @param string      $type           type ('INT', 'VARCHAR', 'BIT', ...)     * @param string      $length         length ('2', '5,2', '', ...)     * @param string      $attribute      attribute     * @param string      $collation      collation     * @param bool|string $null           with 'NULL' or 'NOT NULL'     * @param string      $default_type   whether default is CURRENT_TIMESTAMP,     *                                    NULL, NONE, USER_DEFINED     * @param string      $default_value  default value for USER_DEFINED default type     * @param string      $extra          'AUTO_INCREMENT'     * @param string      $comment        field comment     * @param array       &$field_primary list of fields for PRIMARY KEY     * @param string      $index     * @param mixed       $default_orig     *     * @see PMA_Table::generateFieldSpec()     *     * @return  string  field specification     */    static public function generateAlter($oldcol, $newcol, $type, $length,        $attribute, $collation, $null, $default_type, $default_value,        $extra, $comment = '', &$field_primary, $index, $default_orig)    {        return PMA_backquote($oldcol) . ' '            . PMA_Table::generateFieldSpec(                $newcol, $type, $length, $attribute,                $collation, $null, $default_type, $default_value, $extra,                $comment, $field_primary, $index, $default_orig            );    } // end function    /**     * Inserts existing entries in a PMA_* table by reading a value from an old entry     *     * @param string $work         The array index, which Relation feature to check     *                             ('relwork', 'commwork', ...)     * @param string $pma_table    The array index, which PMA-table to update     *                             ('bookmark', 'relation', ...)     * @param array  $get_fields   Which fields will be SELECT'ed from the old entry     * @param array  $where_fields Which fields will be used for the WHERE query     *                             (array('FIELDNAME' => 'FIELDVALUE'))     * @param array  $new_fields   Which fields will be used as new VALUES. These are     *                             the important keys which differ from the old entry     *                             (array('FIELDNAME' => 'NEW FIELDVALUE'))     *     * @global relation variable     *     * @return int|true     */    static public function duplicateInfo($work, $pma_table, $get_fields, $where_fields, $new_fields)    {        $last_id = -1;        if (isset($GLOBALS['cfgRelation']) && $GLOBALS['cfgRelation'][$work]) {            $select_parts = array();            $row_fields = array();            foreach ($get_fields as $get_field) {                $select_parts[] = PMA_backquote($get_field);                $row_fields[$get_field] = 'cc';            }            $where_parts = array();            foreach ($where_fields as $_where => $_value) {                $where_parts[] = PMA_backquote($_where) . ' = \''                    . PMA_sqlAddSlashes($_value) . '\'';            }            $new_parts = array();            $new_value_parts = array();            foreach ($new_fields as $_where => $_value) {                $new_parts[] = PMA_backquote($_where);                $new_value_parts[] = PMA_sqlAddSlashes($_value);            }            $table_copy_query = '                SELECT ' . implode(', ', $select_parts) . '                  FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                  . PMA_backquote($GLOBALS['cfgRelation'][$pma_table]) . '                 WHERE ' . implode(' AND ', $where_parts);            // must use PMA_DBI_QUERY_STORE here, since we execute another            // query inside the loop            $table_copy_rs = PMA_query_as_controluser(                $table_copy_query, true, PMA_DBI_QUERY_STORE            );            while ($table_copy_row = @PMA_DBI_fetch_assoc($table_copy_rs)) {                $value_parts = array();                foreach ($table_copy_row as $_key => $_val) {                    if (isset($row_fields[$_key]) && $row_fields[$_key] == 'cc') {                        $value_parts[] = PMA_sqlAddSlashes($_val);                    }                }                $new_table_query = 'INSERT IGNORE INTO '                    . PMA_backquote($GLOBALS['cfgRelation']['db'])                    . '.' . PMA_backquote($GLOBALS['cfgRelation'][$pma_table]) . '                    (' . implode(', ', $select_parts) . ',                     ' . implode(', ', $new_parts) . ')                    VALUES                    (\'' . implode('\', \'', $value_parts) . '\',                     \'' . implode('\', \'', $new_value_parts) . '\')';                PMA_query_as_controluser($new_table_query);                $last_id = PMA_DBI_insert_id();            } // end while            PMA_DBI_free_result($table_copy_rs);            return $last_id;        }        return true;    } // end of 'PMA_Table::duplicateInfo()' function    /**     * Copies or renames table     *     * @param string $source_db    source database     * @param string $source_table source table     * @param string $target_db    target database     * @param string $target_table target table     * @param string $what         what to be moved or copied (data, dataonly)     * @param bool   $move         whether to move     * @param string $mode         mode     *     * @return bool true if success, false otherwise     */    static public function moveCopy($source_db, $source_table, $target_db, $target_table, $what, $move, $mode)    {        global $err_url;        /* Try moving table directly */        if ($move && $what == 'data') {            $tbl = new PMA_Table($source_table, $source_db);            $result = $tbl->rename(                $target_table, $target_db,                PMA_Table::isView($source_db, $source_table)            );            if ($result) {                $GLOBALS['message'] = $tbl->getLastMessage();                return true;            }        }        // set export settings we need        $GLOBALS['sql_backquotes'] = 1;        $GLOBALS['asfile']         = 1;        // Ensure the target is valid        if (! $GLOBALS['pma']->databases->exists($source_db, $target_db)) {            if (! $GLOBALS['pma']->databases->exists($source_db)) {                $GLOBALS['message'] = PMA_Message::rawError(                    'source database `' . htmlspecialchars($source_db) . '` not found'                );            }            if (! $GLOBALS['pma']->databases->exists($target_db)) {                $GLOBALS['message'] = PMA_Message::rawError(                    'target database `' . htmlspecialchars($target_db) . '` not found'                );            }            return false;        }        $source = PMA_backquote($source_db) . '.' . PMA_backquote($source_table);        if (! isset($target_db) || ! strlen($target_db)) {            $target_db = $source_db;        }        // Doing a select_db could avoid some problems with replicated databases,        // when moving table from replicated one to not replicated one        PMA_DBI_select_db($target_db);        $target = PMA_backquote($target_db) . '.' . PMA_backquote($target_table);        // do not create the table if dataonly        if ($what != 'dataonly') {            include_once './libraries/export/sql.php';            $no_constraints_comments = true;            $GLOBALS['sql_constraints_query'] = '';            $sql_structure = PMA_getTableDef(                $source_db, $source_table, "\n", $err_url, false, false            );            unset($no_constraints_comments);            $parsed_sql =  PMA_SQP_parse($sql_structure);            $analyzed_sql = PMA_SQP_analyze($parsed_sql);            $i = 0;            if (empty($analyzed_sql[0]['create_table_fields'])) {                // this is not a CREATE TABLE, so find the first VIEW                $target_for_view = PMA_backquote($target_db);                while (true) {                    if ($parsed_sql[$i]['type'] == 'alpha_reservedWord'                        && $parsed_sql[$i]['data'] == 'VIEW'                    ) {                        break;                    }                    $i++;                }            }            unset($analyzed_sql);            if (PMA_DRIZZLE) {                $table_delimiter = 'quote_backtick';            } else {                $server_sql_mode = PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'sql_mode'", 0, 1);                // ANSI_QUOTES might be a subset of sql_mode, for example                // REAL_AS_FLOAT,PIPES_AS_CONCAT,ANSI_QUOTES,IGNORE_SPACE,ANSI                if (false !== strpos($server_sql_mode, 'ANSI_QUOTES')) {                    $table_delimiter = 'quote_double';                } else {                    $table_delimiter = 'quote_backtick';                }                unset($server_sql_mode);            }            /* Find table name in query and replace it */            while ($parsed_sql[$i]['type'] != $table_delimiter) {                $i++;            }            /* no need to PMA_backquote() */            if (isset($target_for_view)) {                // this a view definition; we just found the first db name                // that follows DEFINER VIEW                // so change it for the new db name                        $parsed_sql[$i]['data'] = $target_for_view;                // then we have to find all references to the source db                // and change them to the target db, ensuring we stay into                // the $parsed_sql limits                $last = $parsed_sql['len'] - 1;                $backquoted_source_db = PMA_backquote($source_db);                for (++$i; $i <= $last; $i++) {                    if ($parsed_sql[$i]['type'] == $table_delimiter                        && $parsed_sql[$i]['data'] == $backquoted_source_db                    ) {                        $parsed_sql[$i]['data'] = $target_for_view;                    }                }                unset($last,$backquoted_source_db);            } else {                $parsed_sql[$i]['data'] = $target;            }            /* Generate query back */            $sql_structure = PMA_SQP_formatHtml($parsed_sql, 'query_only');            // If table exists, and 'add drop table' is selected: Drop it!            $drop_query = '';            if (isset($GLOBALS['drop_if_exists'])                && $GLOBALS['drop_if_exists'] == 'true'            ) {                if (PMA_Table::isView($target_db, $target_table)) {                    $drop_query = 'DROP VIEW';                } else {                    $drop_query = 'DROP TABLE';                }                $drop_query .= ' IF EXISTS '                    . PMA_backquote($target_db) . '.'                    . PMA_backquote($target_table);                PMA_DBI_query($drop_query);                $GLOBALS['sql_query'] .= "\n" . $drop_query . ';';                // If an existing table gets deleted, maintain any                // entries for the PMA_* tables                $maintain_relations = true;            }            @PMA_DBI_query($sql_structure);            $GLOBALS['sql_query'] .= "\n" . $sql_structure . ';';            if (($move || isset($GLOBALS['add_constraints']))                && !empty($GLOBALS['sql_constraints_query'])            ) {                $parsed_sql =  PMA_SQP_parse($GLOBALS['sql_constraints_query']);                $i = 0;                // find the first $table_delimiter, it must be the source table name                while ($parsed_sql[$i]['type'] != $table_delimiter) {                    $i++;                    // maybe someday we should guard against going over limit                    //if ($i == $parsed_sql['len']) {                    //    break;                    //}                }                // replace it by the target table name, no need to PMA_backquote()                $parsed_sql[$i]['data'] = $target;                // now we must remove all $table_delimiter that follow a CONSTRAINT                // keyword, because a constraint name must be unique in a db                $cnt = $parsed_sql['len'] - 1;                for ($j = $i; $j < $cnt; $j++) {                    if ($parsed_sql[$j]['type'] == 'alpha_reservedWord'                        && strtoupper($parsed_sql[$j]['data']) == 'CONSTRAINT'                    ) {                        if ($parsed_sql[$j+1]['type'] == $table_delimiter) {                            $parsed_sql[$j+1]['data'] = '';                        }                    }                }                // Generate query back                $GLOBALS['sql_constraints_query'] = PMA_SQP_formatHtml(                    $parsed_sql, 'query_only'                );                if ($mode == 'one_table') {                    PMA_DBI_query($GLOBALS['sql_constraints_query']);                }                $GLOBALS['sql_query'] .= "\n" . $GLOBALS['sql_constraints_query'];                if ($mode == 'one_table') {                    unset($GLOBALS['sql_constraints_query']);                }            }        } else {            $GLOBALS['sql_query'] = '';        }        // Copy the data unless this is a VIEW        if (($what == 'data' || $what == 'dataonly')            && ! PMA_Table::isView($target_db, $target_table)        ) {            $sql_set_mode = "SET SQL_MODE='NO_AUTO_VALUE_ON_ZERO'";            PMA_DBI_query($sql_set_mode);            $GLOBALS['sql_query'] .= "\n\n" . $sql_set_mode . ';';            $sql_insert_data = 'INSERT INTO ' . $target . ' SELECT * FROM ' . $source;            PMA_DBI_query($sql_insert_data);            $GLOBALS['sql_query']      .= "\n\n" . $sql_insert_data . ';';        }        $GLOBALS['cfgRelation'] = PMA_getRelationsParam();        // Drops old table if the user has requested to move it        if ($move) {            // This could avoid some problems with replicated databases, when            // moving table from replicated one to not replicated one            PMA_DBI_select_db($source_db);            if (PMA_Table::isView($source_db, $source_table)) {                $sql_drop_query = 'DROP VIEW';            } else {                $sql_drop_query = 'DROP TABLE';            }            $sql_drop_query .= ' ' . $source;            PMA_DBI_query($sql_drop_query);            // Move old entries from PMA-DBs to new table            if ($GLOBALS['cfgRelation']['commwork']) {                $remove_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['column_info'])                              . ' SET     table_name = \'' . PMA_sqlAddSlashes($target_table) . '\', '                              . '        db_name    = \'' . PMA_sqlAddSlashes($target_db) . '\''                              . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                              . ' AND table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($remove_query);                unset($remove_query);            }            // updating bookmarks is not possible since only a single table is moved,            // and not the whole DB.            if ($GLOBALS['cfgRelation']['displaywork']) {                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['table_info'])                                . ' SET     db_name = \'' . PMA_sqlAddSlashes($target_db) . '\', '                                . '         table_name = \'' . PMA_sqlAddSlashes($target_table) . '\''                                . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);            }            if ($GLOBALS['cfgRelation']['relwork']) {                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['relation'])                                . ' SET     foreign_table = \'' . PMA_sqlAddSlashes($target_table) . '\','                                . '         foreign_db = \'' . PMA_sqlAddSlashes($target_db) . '\''                                . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND foreign_table = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['relation'])                                . ' SET     master_table = \'' . PMA_sqlAddSlashes($target_table) . '\','                                . '         master_db = \'' . PMA_sqlAddSlashes($target_db) . '\''                                . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND master_table = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);            }            /**             * @todo Can't get moving PDFs the right way. The page numbers             * always get screwed up independently from duplication because the             * numbers do not seem to be stored on a per-database basis. Would             * the author of pdf support please have a look at it?             */            if ($GLOBALS['cfgRelation']['pdfwork']) {                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['table_coords'])                                . ' SET     table_name = \'' . PMA_sqlAddSlashes($target_table) . '\','                                . '         db_name = \'' . PMA_sqlAddSlashes($target_db) . '\''                                . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);                /*                $pdf_query = 'SELECT pdf_page_number '                           . ' FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['table_coords'])                           . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($target_db) . '\''                           . ' AND table_name = \'' . PMA_sqlAddSlashes($target_table) . '\'';                $pdf_rs = PMA_query_as_controluser($pdf_query);                while ($pdf_copy_row = PMA_DBI_fetch_assoc($pdf_rs)) {                    $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['pdf_pages'])                                    . ' SET     db_name = \'' . PMA_sqlAddSlashes($target_db) . '\''                                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                    . ' AND page_nr = \'' . PMA_sqlAddSlashes($pdf_copy_row['pdf_page_number']) . '\'';                    $tb_rs    = PMA_query_as_controluser($table_query);                    unset($table_query);                    unset($tb_rs);                }                */            }            if ($GLOBALS['cfgRelation']['designerwork']) {                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords'])                                . ' SET     table_name = \'' . PMA_sqlAddSlashes($target_table) . '\','                                . '         db_name = \'' . PMA_sqlAddSlashes($target_db) . '\''                                . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);            }            $GLOBALS['sql_query']      .= "\n\n" . $sql_drop_query . ';';            // end if ($move)        } else {            // we are copying            // Create new entries as duplicates from old PMA DBs            if ($what != 'dataonly' && ! isset($maintain_relations)) {                if ($GLOBALS['cfgRelation']['commwork']) {                    // Get all comments and MIME-Types for current table                    $comments_copy_query = 'SELECT                                                column_name, comment' . ($GLOBALS['cfgRelation']['mimework'] ? ', mimetype, transformation, transformation_options' : '') . '                                            FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['column_info']) . '                                            WHERE                                                db_name = \'' . PMA_sqlAddSlashes($source_db) . '\' AND                                                table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                    $comments_copy_rs    = PMA_query_as_controluser($comments_copy_query);                    // Write every comment as new copied entry. [MIME]                    while ($comments_copy_row = PMA_DBI_fetch_assoc($comments_copy_rs)) {                        $new_comment_query = 'REPLACE INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['column_info'])                                    . ' (db_name, table_name, column_name, comment' . ($GLOBALS['cfgRelation']['mimework'] ? ', mimetype, transformation, transformation_options' : '') . ') '                                    . ' VALUES('                                    . '\'' . PMA_sqlAddSlashes($target_db) . '\','                                    . '\'' . PMA_sqlAddSlashes($target_table) . '\','                                    . '\'' . PMA_sqlAddSlashes($comments_copy_row['column_name']) . '\''                                    . ($GLOBALS['cfgRelation']['mimework'] ? ',\'' . PMA_sqlAddSlashes($comments_copy_row['comment']) . '\','                                            . '\'' . PMA_sqlAddSlashes($comments_copy_row['mimetype']) . '\','                                            . '\'' . PMA_sqlAddSlashes($comments_copy_row['transformation']) . '\','                                            . '\'' . PMA_sqlAddSlashes($comments_copy_row['transformation_options']) . '\'' : '')                                    . ')';                        PMA_query_as_controluser($new_comment_query);                    } // end while                    PMA_DBI_free_result($comments_copy_rs);                    unset($comments_copy_rs);                }                // duplicating the bookmarks must not be done here, but                // just once per db                $get_fields = array('display_field');                $where_fields = array('db_name' => $source_db, 'table_name' => $source_table);                $new_fields = array('db_name' => $target_db, 'table_name' => $target_table);                PMA_Table::duplicateInfo('displaywork', 'table_info', $get_fields, $where_fields, $new_fields);                /**                 * @todo revise this code when we support cross-db relations                 */                $get_fields = array('master_field', 'foreign_table', 'foreign_field');                $where_fields = array('master_db' => $source_db, 'master_table' => $source_table);                $new_fields = array('master_db' => $target_db, 'foreign_db' => $target_db, 'master_table' => $target_table);                PMA_Table::duplicateInfo('relwork', 'relation', $get_fields, $where_fields, $new_fields);                $get_fields = array('foreign_field', 'master_table', 'master_field');                $where_fields = array('foreign_db' => $source_db, 'foreign_table' => $source_table);                $new_fields = array('master_db' => $target_db, 'foreign_db' => $target_db, 'foreign_table' => $target_table);                PMA_Table::duplicateInfo('relwork', 'relation', $get_fields, $where_fields, $new_fields);                $get_fields = array('x', 'y', 'v', 'h');                $where_fields = array('db_name' => $source_db, 'table_name' => $source_table);                $new_fields = array('db_name' => $target_db, 'table_name' => $target_table);                PMA_Table::duplicateInfo('designerwork', 'designer_coords', $get_fields, $where_fields, $new_fields);                /**                 * @todo Can't get duplicating PDFs the right way. The                 * page numbers always get screwed up independently from                 * duplication because the numbers do not seem to be stored on a                 * per-database basis. Would the author of pdf support please                 * have a look at it?                 *                $get_fields = array('page_descr');                $where_fields = array('db_name' => $source_db);                $new_fields = array('db_name' => $target_db);                $last_id = PMA_Table::duplicateInfo('pdfwork', 'pdf_pages', $get_fields, $where_fields, $new_fields);                if (isset($last_id) && $last_id >= 0) {                    $get_fields = array('x', 'y');                    $where_fields = array('db_name' => $source_db, 'table_name' => $source_table);                    $new_fields = array('db_name' => $target_db, 'table_name' => $target_table, 'pdf_page_number' => $last_id);                    PMA_Table::duplicateInfo('pdfwork', 'table_coords', $get_fields, $where_fields, $new_fields);                }                 */            }        }        return true;    }    /**     * checks if given name is a valid table name,     * currently if not empty, trailing spaces, '.', '/' and '\'     *     * @param string $table_name name to check     *     * @todo add check for valid chars in filename on current system/os     * @see  http://dev.mysql.com/doc/refman/5.0/en/legal-names.html     *     * @return  boolean whether the string is valid or not     */    function isValidName($table_name)    {        if ($table_name !== trim($table_name)) {            // trailing spaces            return false;        }        if (! strlen($table_name)) {            // zero length            return false;        }        if (preg_match('/[.\/\\\\]+/i', $table_name)) {            // illegal char . / \            return false;        }        return true;    }    /**     * renames table     *     * @param string $new_name new table name     * @param string $new_db   new database name     * @param bool   $is_view  is this for a VIEW rename?     * @todo    remove the $is_view parameter (also in callers)     *     * @return bool success     */    function rename($new_name, $new_db = null, $is_view = false)    {        if (null !== $new_db && $new_db !== $this->getDbName()) {            // Ensure the target is valid            if (! $GLOBALS['pma']->databases->exists($new_db)) {                $this->errors[] = __('Invalid database') . ': ' . $new_db;                return false;            }        } else {            $new_db = $this->getDbName();        }        $new_table = new PMA_Table($new_name, $new_db);        if ($this->getFullName() === $new_table->getFullName()) {            return true;        }        if (! PMA_Table::isValidName($new_name)) {            $this->errors[] = __('Invalid table name') . ': ' . $new_table->getFullName();            return false;        }        // If the table is moved to a different database drop its triggers first        $triggers = PMA_DBI_get_triggers($this->getDbName(), $this->getName(), '');        $handle_triggers = $this->getDbName() != $new_db && $triggers;        if ($handle_triggers) {            foreach ($triggers as $trigger) {                $sql = 'DROP TRIGGER IF EXISTS ' . PMA_backquote($this->getDbName()) . '.'                    . PMA_backquote($trigger['name']) . ';';                PMA_DBI_query($sql);            }        }        /*         * tested also for a view, in MySQL 5.0.92, 5.1.55 and 5.5.13         */        $GLOBALS['sql_query'] = '            RENAME TABLE ' . $this->getFullName(true) . '                  TO ' . $new_table->getFullName(true) . ';';        // I don't think a specific error message for views is necessary        if (! PMA_DBI_query($GLOBALS['sql_query'])) {            // Restore triggers in the old database            if ($handle_triggers) {                PMA_DBI_select_db($this->getDbName());                foreach ($triggers as $trigger) {                    PMA_DBI_query($trigger['create']);                }            }            $this->errors[] = sprintf(                __('Error renaming table %1$s to %2$s'),                $this->getFullName(),                $new_table->getFullName()            );            return false;        }        $old_name = $this->getName();        $old_db = $this->getDbName();        $this->setName($new_name);        $this->setDbName($new_db);        /**         * @todo move into extra function PMA_Relation::renameTable($new_name, $old_name, $new_db, $old_db)         */        // Move old entries from comments to new table        $GLOBALS['cfgRelation'] = PMA_getRelationsParam();        if ($GLOBALS['cfgRelation']['commwork']) {            $remove_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['column_info']) . '                   SET `db_name`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `table_name` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `db_name`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `table_name` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($remove_query);            unset($remove_query);        }        if ($GLOBALS['cfgRelation']['displaywork']) {            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['table_info']) . '                   SET `db_name`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `table_name` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `db_name`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `table_name` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            unset($table_query);        }        if ($GLOBALS['cfgRelation']['relwork']) {            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['relation']) . '                   SET `foreign_db`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `foreign_table` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `foreign_db`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `foreign_table` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['relation']) . '                   SET `master_db`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `master_table` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `master_db`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `master_table` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            unset($table_query);        }        if ($GLOBALS['cfgRelation']['pdfwork']) {            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['table_coords']) . '                   SET `db_name`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `table_name` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `db_name`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `table_name` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            unset($table_query);        }        if ($GLOBALS['cfgRelation']['designerwork']) {            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']) . '                   SET `db_name`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `table_name` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `db_name`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `table_name` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            unset($table_query);        }        $this->messages[] = sprintf(            __('Table %s has been renamed to %s'),            htmlspecialchars($old_name),            htmlspecialchars($new_name)        );        return true;    }    /**     * Get all unique columns     *     * returns an array with all columns with unqiue content, in fact these are     * all columns being single indexed in PRIMARY or UNIQUE     *     * e.g.     *  - PRIMARY(id) // id     *  - UNIQUE(name) // name     *  - PRIMARY(fk_id1, fk_id2) // NONE     *  - UNIQUE(x,y) // NONE     *     * @param bool $backquoted whether to quote name with backticks ``     *     * @return array     */    public function getUniqueColumns($backquoted = true)    {        $sql = PMA_DBI_get_table_indexes_sql($this->getDbName(), $this->getName(), 'Non_unique = 0');        $uniques = PMA_DBI_fetch_result($sql, array('Key_name', null), 'Column_name');        $return = array();        foreach ($uniques as $index) {            if (count($index) > 1) {                continue;            }            $return[] = $this->getFullName($backquoted) . '.'                . ($backquoted ? PMA_backquote($index[0]) : $index[0]);        }        return $return;    }    /**     * Get all indexed columns     *     * returns an array with all columns make use of an index, in fact only     * first columns in an index     *     * e.g. index(col1, col2) would only return col1     *     * @param bool $backquoted whether to quote name with backticks ``     *     * @return array     */    public function getIndexedColumns($backquoted = true)    {        $sql = PMA_DBI_get_table_indexes_sql($this->getDbName(), $this->getName(), 'Seq_in_index = 1');        $indexed = PMA_DBI_fetch_result($sql, 'Column_name', 'Column_name');        $return = array();        foreach ($indexed as $column) {            $return[] = $this->getFullName($backquoted) . '.'                . ($backquoted ? PMA_backquote($column) : $column);        }        return $return;    }    /**     * Get all columns     *     * returns an array with all columns     *     * @param bool $backquoted whether to quote name with backticks ``     *     * @return array     */    public function getColumns($backquoted = true)    {        $sql = 'SHOW COLUMNS FROM ' . $this->getFullName(true);        $indexed = PMA_DBI_fetch_result($sql, 'Field', 'Field');        $return = array();        foreach ($indexed as $column) {            $return[] = $this->getFullName($backquoted) . '.'                . ($backquoted ? PMA_backquote($column) : $column);        }        return $return;    }    /**     * Return UI preferences for this table from phpMyAdmin database.     *     * @return array     */    protected function getUiPrefsFromDb()    {        $pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) .".".                     PMA_backquote($GLOBALS['cfg']['Server']['table_uiprefs']);        // Read from phpMyAdmin database        $sql_query = " SELECT `prefs` FROM " . $pma_table            . " WHERE `username` = '" . $GLOBALS['cfg']['Server']['user'] . "'"            . " AND `db_name` = '" . PMA_sqlAddSlashes($this->db_name) . "'"            . " AND `table_name` = '" . PMA_sqlAddSlashes($this->name) . "'";        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        if (isset($row[0])) {            return json_decode($row[0], true);        } else {            return array();        }    }    /**     * Save this table's UI preferences into phpMyAdmin database.     *     * @return true|PMA_Message     */    protected function saveUiPrefsToDb()    {        $pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . "."            . PMA_backquote($GLOBALS['cfg']['Server']['table_uiprefs']);        $username = $GLOBALS['cfg']['Server']['user'];        $sql_query = " REPLACE INTO " . $pma_table            . " VALUES ('" . $username . "', '" . PMA_sqlAddSlashes($this->db_name)            . "', '" . PMA_sqlAddSlashes($this->name) . "', '"            . PMA_sqlAddSlashes(json_encode($this->uiprefs)) . "', NULL)";        $success = PMA_DBI_try_query($sql_query, $GLOBALS['controllink']);        if (!$success) {            $message = PMA_Message::error(__('Could not save table UI preferences'));            $message->addMessage('<br /><br />');            $message->addMessage(                PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink']))            );            return $message;        }        // Remove some old rows in table_uiprefs if it exceeds the configured maximum rows        $sql_query = 'SELECT COUNT(*) FROM ' . $pma_table;        $rows_count = PMA_DBI_fetch_value($sql_query);        $max_rows = $GLOBALS['cfg']['Server']['MaxTableUiprefs'];        if ($rows_count > $max_rows) {            $num_rows_to_delete = $rows_count - $max_rows;            $sql_query                = ' DELETE FROM ' . $pma_table .                ' ORDER BY last_update ASC' .                ' LIMIT ' . $num_rows_to_delete;            $success = PMA_DBI_try_query($sql_query, $GLOBALS['controllink']);            if (!$success) {                $message = PMA_Message::error(                    sprintf(                        __('Failed to cleanup table UI preferences (see $cfg[\'Servers\'][$i][\'MaxTableUiprefs\'] %s)'),                        PMA_showDocu('cfg_Servers_MaxTableUiprefs')                    )                );                $message->addMessage('<br /><br />');                $message->addMessage(PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink'])));                print_r($message);                return $message;            }        }        return true;    }    /**     * Loads the UI preferences for this table.     * If pmadb and table_uiprefs is set, it will load the UI preferences from     * phpMyAdmin database.     *     * @return nothing     */    protected function loadUiPrefs()    {        $server_id = $GLOBALS['server'];        // set session variable if it's still undefined        if (! isset($_SESSION['tmp_user_values']['table_uiprefs'][$server_id][$this->db_name][$this->name])) {            $_SESSION['tmp_user_values']['table_uiprefs'][$server_id][$this->db_name][$this->name] =                // check whether we can get from pmadb                (strlen($GLOBALS['cfg']['Server']['pmadb'])                && strlen($GLOBALS['cfg']['Server']['table_uiprefs']))                    ?  $this->getUiPrefsFromDb()                    : array();        }        $this->uiprefs =& $_SESSION['tmp_user_values']['table_uiprefs'][$server_id][$this->db_name][$this->name];    }    /**     * Get a property from UI preferences.     * Return false if the property is not found.     * Available property:     * - PROP_SORTED_COLUMN     * - PROP_COLUMN_ORDER     * - PROP_COLUMN_VISIB     *     * @param string $property property     *     * @return mixed     */    public function getUiProp($property)    {        if (! isset($this->uiprefs)) {            $this->loadUiPrefs();        }        // do checking based on property        if ($property == self::PROP_SORTED_COLUMN) {            if (isset($this->uiprefs[$property])) {                // check if the column name is exist in this table                $tmp = explode(' ', $this->uiprefs[$property]);                $colname = $tmp[0];                $avail_columns = $this->getColumns();                foreach ($avail_columns as $each_col) {                    // check if $each_col ends with $colname                    if (substr_compare($each_col, $colname, strlen($each_col) - strlen($colname)) === 0) {                        return $this->uiprefs[$property];                    }                }                // remove the property, since it is not exist anymore in database                $this->removeUiProp(self::PROP_SORTED_COLUMN);                return false;            } else {                return false;            }        } elseif ($property == self::PROP_COLUMN_ORDER            || $property == self::PROP_COLUMN_VISIB        ) {            if (! PMA_Table::isView($this->db_name, $this->name) && isset($this->uiprefs[$property])) {                // check if the table has not been modified                if (self::sGetStatusInfo($this->db_name, $this->name, 'Create_time') == $this->uiprefs['CREATE_TIME']) {                    return $this->uiprefs[$property];                } else {                    // remove the property, since the table has been modified                    $this->removeUiProp(self::PROP_COLUMN_ORDER);                    return false;                }            } else {                return false;            }        }        // default behaviour for other property:        return isset($this->uiprefs[$property]) ? $this->uiprefs[$property] : false;    }    /**     * Set a property from UI preferences.     * If pmadb and table_uiprefs is set, it will save the UI preferences to     * phpMyAdmin database.     * Available property:     * - PROP_SORTED_COLUMN     * - PROP_COLUMN_ORDER     * - PROP_COLUMN_VISIB     *     * @param string $property          Property     * @param mixed  $value             Value for the property     * @param string $table_create_time Needed for PROP_COLUMN_ORDER and PROP_COLUMN_VISIB     *     * @return boolean|PMA_Message     */    public function setUiProp($property, $value, $table_create_time = null)    {        if (! isset($this->uiprefs)) {            $this->loadUiPrefs();        }        // we want to save the create time if the property is PROP_COLUMN_ORDER        if (! PMA_Table::isView($this->db_name, $this->name)            && ($property == self::PROP_COLUMN_ORDER || $property == self::PROP_COLUMN_VISIB)        ) {            $curr_create_time = self::sGetStatusInfo($this->db_name, $this->name, 'CREATE_TIME');            if (isset($table_create_time)                && $table_create_time == $curr_create_time            ) {                $this->uiprefs['CREATE_TIME'] = $curr_create_time;            } else {                // there is no $table_create_time, or                // supplied $table_create_time is older than current create time,                // so don't save                return PMA_Message::error(sprintf(                    __('Cannot save UI property "%s". The changes made will not be persistent after you refresh this page. Please check if the table structure has been changed.'), $property));            }        }        // save the value        $this->uiprefs[$property] = $value;        // check if pmadb is set        if (strlen($GLOBALS['cfg']['Server']['pmadb'])            && strlen($GLOBALS['cfg']['Server']['table_uiprefs'])        ) {            return $this->saveUiprefsToDb();        }        return true;    }    /**     * Remove a property from UI preferences.     *     * @param string $property the property     *     * @return true|PMA_Message     */    public function removeUiProp($property)    {        if (! isset($this->uiprefs)) {            $this->loadUiPrefs();        }        if (isset($this->uiprefs[$property])) {            unset($this->uiprefs[$property]);            // check if pmadb is set            if (strlen($GLOBALS['cfg']['Server']['pmadb'])                && strlen($GLOBALS['cfg']['Server']['table_uiprefs'])            ) {                return $this->saveUiprefsToDb();            }        }        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for editing and inserting new table rows * * register_globals_save (mark this file save for disabling register globals) * * @package PhpMyAdmin *//** * Gets the variables sent or posted to this script and displays the header */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';/** * Ensures db and table are valid, else moves to the "parent" script */require_once './libraries/db_table_exists.lib.php';// load additional configuration variablesif (PMA_DRIZZLE) {    include_once './libraries/data_drizzle.inc.php';} else {    include_once './libraries/data_mysql.inc.php';}/** * Sets global variables. * Here it's better to use a if, instead of the '?' operator * to avoid setting a variable to '' when it's not present in $_REQUEST */if (isset($_REQUEST['where_clause'])) {    $where_clause = $_REQUEST['where_clause'];}if (isset($_REQUEST['clause_is_unique'])) {    $clause_is_unique = $_REQUEST['clause_is_unique'];}if (isset($_SESSION['edit_next'])) {    $where_clause = $_SESSION['edit_next'];    unset($_SESSION['edit_next']);    $after_insert = 'edit_next';}if (isset($_REQUEST['sql_query'])) {    $sql_query = $_REQUEST['sql_query'];}if (isset($_REQUEST['ShowFunctionFields'])) {    $cfg['ShowFunctionFields'] = $_REQUEST['ShowFunctionFields'];}if (isset($_REQUEST['ShowFieldTypesInDataEditView'])) {    $cfg['ShowFieldTypesInDataEditView'] = $_REQUEST['ShowFieldTypesInDataEditView'];}if (isset($_REQUEST['default_action'])) {    $default_action = $_REQUEST['default_action'];}/** * file listing */require_once './libraries/file_listing.php';/** * Defines the url to return to in case of error in a sql statement * (at this point, $GLOBALS['goto'] will be set but could be empty) */if (empty($GLOBALS['goto'])) {    if (strlen($table)) {        // avoid a problem (see bug #2202709)        $GLOBALS['goto'] = 'tbl_sql.php';    } else {        $GLOBALS['goto'] = 'db_sql.php';    }}/** * @todo check if we could replace by "db_|tbl_" - please clarify!? */$_url_params = array(    'db'        => $db,    'sql_query' => $sql_query);if (preg_match('@^tbl_@', $GLOBALS['goto'])) {    $_url_params['table'] = $table;}$err_url = $GLOBALS['goto'] . PMA_generate_common_url($_url_params);unset($_url_params);/** * Sets parameters for links * where is this variable used? * replace by PMA_generate_common_url($url_params); */$url_query = PMA_generate_common_url($url_params, 'html', '');/** * get table information * @todo should be done by a Table object */require_once './libraries/tbl_info.inc.php';/** * Get comments for table fileds/columns */$comments_map = array();if ($GLOBALS['cfg']['ShowPropertyComments']) {    $comments_map = PMA_getComments($db, $table);}/** * START REGULAR OUTPUT *//** * used in ./libraries/header.inc.php to load JavaScript library file */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'tbl_change.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'gis_data_editor.js';/** * HTTP and HTML headers */require_once './libraries/header.inc.php';/** * Displays the query submitted and its result * * @todo where does $disp_message and $disp_query come from??? */if (! empty($disp_message)) {    if (! isset($disp_query)) {        $disp_query     = null;    }    PMA_showMessage($disp_message, $disp_query);}/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';/** * Get the analysis of SHOW CREATE TABLE for this table * @todo should be handled by class Table */$show_create_table = PMA_DBI_fetch_value(        'SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table),        0, 1);$analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));unset($show_create_table);/** * Get the list of the fields of the current table */PMA_DBI_select_db($db);$table_fields = array_values(PMA_DBI_get_columns($db, $table));$rows               = array();if (isset($where_clause)) {    // when in edit mode load all selected rows from table    $insert_mode = false;    if (is_array($where_clause)) {        $where_clause_array = $where_clause;    } else {        $where_clause_array = array(0 => $where_clause);    }    $result             = array();    $found_unique_key   = false;    $where_clauses      = array();    foreach ($where_clause_array as $key_id => $where_clause) {        $local_query           = 'SELECT * FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';';        $result[$key_id]       = PMA_DBI_query($local_query, null, PMA_DBI_QUERY_STORE);        $rows[$key_id]         = PMA_DBI_fetch_assoc($result[$key_id]);        $where_clauses[$key_id] = str_replace('\\', '\\\\', $where_clause);        // No row returned        if (! $rows[$key_id]) {            unset($rows[$key_id], $where_clause_array[$key_id]);            PMA_showMessage(__('MySQL returned an empty result set (i.e. zero rows).'), $local_query);            echo "\n";            include './libraries/footer.inc.php';        } else { // end if (no row returned)            $meta = PMA_DBI_get_fields_meta($result[$key_id]);            list($unique_condition, $tmp_clause_is_unique) = PMA_getUniqueCondition($result[$key_id], count($meta), $meta, $rows[$key_id], true);            if (! empty($unique_condition)) {                $found_unique_key = true;            }            unset($unique_condition, $tmp_clause_is_unique);        }    }} else {    // no primary key given, just load first row - but what happens if table is empty?    $insert_mode = true;    $result = PMA_DBI_query('SELECT * FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table) . ' LIMIT 1;', null, PMA_DBI_QUERY_STORE);    $rows = array_fill(0, $cfg['InsertRows'], false);}// Copying a row - fetched data will be inserted as a new row, therefore the where clause is needless.if (isset($default_action) && $default_action === 'insert') {    unset($where_clause, $where_clauses);}// retrieve keys into foreign fields, if any$foreigners  = PMA_getForeigners($db, $table);/** * Displays the form */// autocomplete feature of IE kills the "onchange" event handler and it//        must be replaced by the "onpropertychange" one in this case$chg_evt_handler = (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 5 && PMA_USR_BROWSER_VER < 7)                 ? 'onpropertychange'                 : 'onchange';// Had to put the URI because when hosted on an https server,// some browsers send wrongly this form to the http server.    ?><!-- Set on key handler for moving using by Ctrl+arrows --><script src="./js/keyhandler.js" type="text/javascript"></script><script type="text/javascript">//<![CDATA[var switch_movement = 0;document.onkeydown = onKeyDownArrowsHandler;//]]></script>    <?php$_form_params = array(    'db'        => $db,    'table'     => $table,    'goto'      => $GLOBALS['goto'],    'err_url'   => $err_url,    'sql_query' => $sql_query,);if (isset($where_clauses)) {    foreach ($where_clause_array as $key_id => $where_clause) {        $_form_params['where_clause[' . $key_id . ']'] = trim($where_clause);    }}if (isset($clause_is_unique)) {    $_form_params['clause_is_unique'] = $clause_is_unique;}?><!-- Insert/Edit form --><form id="insertForm" method="post" action="tbl_replace.php" name="insertForm" <?php if ($is_upload) { echo ' enctype="multipart/form-data"'; } ?>><?phpecho PMA_generate_common_hidden_inputs($_form_params);$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));// Set if we passed the first timestamp field$timestamp_seen = 0;$fields_cnt     = count($table_fields);$tabindex = 0;$tabindex_for_function = +3000;$tabindex_for_null     = +6000;$tabindex_for_value    = 0;$o_rows   = 0;$biggest_max_file_size = 0;// user can toggle the display of Function column// (currently does not work for multi-edits)$url_params['db'] = $db;$url_params['table'] = $table;if (isset($where_clause)) {    $url_params['where_clause'] = trim($where_clause);}if (! empty($sql_query)) {    $url_params['sql_query'] = $sql_query;}if (! $cfg['ShowFunctionFields'] || ! $cfg['ShowFieldTypesInDataEditView']) {    echo __('Show');}if (! $cfg['ShowFunctionFields']) {    $this_url_params = array_merge($url_params,        array('ShowFunctionFields' => 1, 'ShowFieldTypesInDataEditView' => $cfg['ShowFieldTypesInDataEditView'], 'goto' => 'sql.php'));    echo ' : <a href="tbl_change.php' . PMA_generate_common_url($this_url_params) . '">' . __('Function') . '</a>' . "\n";}if (! $cfg['ShowFieldTypesInDataEditView']) {    $this_other_url_params = array_merge($url_params,        array('ShowFieldTypesInDataEditView' => 1, 'ShowFunctionFields' => $cfg['ShowFunctionFields'], 'goto' => 'sql.php'));    echo ' : <a href="tbl_change.php' . PMA_generate_common_url($this_other_url_params) . '">' . __('Type') . '</a>' . "\n";}foreach ($rows as $row_id => $vrow) {    if ($vrow === false) {        unset($vrow);    }    $jsvkey = $row_id;    $rownumber_param = '&amp;rownumber=' . $row_id;    $vkey = '[multi_edit][' . $jsvkey . ']';    $vresult = (isset($result) && is_array($result) && isset($result[$row_id]) ? $result[$row_id] : $result);    if ($insert_mode && $row_id > 0) {        echo '<input type="checkbox" checked="checked" name="insert_ignore_' . $row_id . '" id="insert_ignore_' . $row_id . '" />';        echo '<label for="insert_ignore_' . $row_id . '">' . __('Ignore') . '</label><br />' . "\n";    }?>    <table class="insertRowTable">    <thead>        <tr>            <th><?php echo __('Column'); ?></th> <?php     if ($cfg['ShowFieldTypesInDataEditView']) {        $this_url_params = array_merge($url_params,            array('ShowFieldTypesInDataEditView' => 0, 'ShowFunctionFields' => $cfg['ShowFunctionFields'], 'goto' => 'sql.php'));        echo '          <th><a href="tbl_change.php' . PMA_generate_common_url($this_url_params) . '" title="' . __('Hide') . '">' . __('Type') . '</a></th>' . "\n";    }    if ($cfg['ShowFunctionFields']) {        $this_url_params = array_merge($url_params,            array('ShowFunctionFields' => 0, 'ShowFieldTypesInDataEditView' => $cfg['ShowFieldTypesInDataEditView'], 'goto' => 'sql.php'));        echo '          <th><a href="tbl_change.php' . PMA_generate_common_url($this_url_params) . '" title="' . __('Hide') . '">' . __('Function') . '</a></th>' . "\n";    }?>            <th><?php echo __('Null'); ?></th>            <th><?php echo __('Value'); ?></th>        </tr>    </thead>    <tfoot>        <tr>            <th colspan="5" align="right" class="tblFooters">                <input type="submit" value="<?php echo __('Go'); ?>" />            </th>        </tr>    </tfoot>    <tbody><?php    // Sets a multiplier used for input-field counts (as zero cannot be used, advance the counter plus one)    $m_rows = $o_rows + 1;    $odd_row = true;    for ($i = 0; $i < $fields_cnt; $i++) {        if (! isset($table_fields[$i]['processed'])) {            $table_fields[$i]['Field_html'] = htmlspecialchars($table_fields[$i]['Field']);            $table_fields[$i]['Field_md5']  = md5($table_fields[$i]['Field']);            // True_Type contains only the type (stops at first bracket)            $table_fields[$i]['True_Type']  = preg_replace('@\(.*@s', '', $table_fields[$i]['Type']);            // d a t e t i m e            //            // Current date should not be set as default if the field is NULL            // for the current row, but do not put here the current datetime            // if there is a default value (the real default value will be set            // in the Default value logic below)            // Note: (tested in MySQL 4.0.16): when lang is some UTF-8,            // $field['Default'] is not set if it contains NULL:            // Array ([Field] => d [Type] => datetime [Null] => YES [Key] => [Extra] => [True_Type] => datetime)            // but, look what we get if we switch to iso: (Default is NULL)            // Array ([Field] => d [Type] => datetime [Null] => YES [Key] => [Default] => [Extra] => [True_Type] => datetime)            // so I force a NULL into it (I don't think it's possible            // to have an empty default value for DATETIME)            // then, the "if" after this one will work            if ($table_fields[$i]['Type'] == 'datetime'             && ! isset($table_fields[$i]['Default'])             && isset($table_fields[$i]['Null'])             && $table_fields[$i]['Null'] == 'YES') {                $table_fields[$i]['Default'] = null;            }            $table_fields[$i]['len']                = preg_match('@float|double@', $table_fields[$i]['Type']) ? 100 : -1;            if (isset($comments_map[$table_fields[$i]['Field']])) {                $table_fields[$i]['Field_title'] = '<span style="border-bottom: 1px dashed black;" title="'                    . htmlspecialchars($comments_map[$table_fields[$i]['Field']]) . '">'                    . $table_fields[$i]['Field_html'] . '</span>';            } else {                $table_fields[$i]['Field_title'] = $table_fields[$i]['Field_html'];            }            // The type column.            // Fix for bug #3152931 'ENUM and SET cannot have "Binary" option'            // If check to ensure types such as "enum('one','two','binary',..)" or            // "enum('one','two','varbinary',..)" are not categorized as binary.            if (stripos($table_fields[$i]['Type'], 'binary') === 0            || stripos($table_fields[$i]['Type'], 'varbinary') === 0) {                $table_fields[$i]['is_binary'] = stristr($table_fields[$i]['Type'], 'binary');            } else {                $table_fields[$i]['is_binary'] = false;            }            // If check to ensure types such as "enum('one','two','blob',..)" or            // "enum('one','two','tinyblob',..)" etc. are not categorized as blob.            if (stripos($table_fields[$i]['Type'], 'blob') === 0            || stripos($table_fields[$i]['Type'], 'tinyblob') === 0            || stripos($table_fields[$i]['Type'], 'mediumblob') === 0            || stripos($table_fields[$i]['Type'], 'longblob') === 0) {                $table_fields[$i]['is_blob']   = stristr($table_fields[$i]['Type'], 'blob');            } else {                $table_fields[$i]['is_blob'] = false;            }            // If check to ensure types such as "enum('one','two','char',..)" or            // "enum('one','two','varchar',..)" are not categorized as char.            if (stripos($table_fields[$i]['Type'], 'char') === 0            || stripos($table_fields[$i]['Type'], 'varchar') === 0) {                $table_fields[$i]['is_char']   = stristr($table_fields[$i]['Type'], 'char');            } else {                $table_fields[$i]['is_char'] = false;            }            $table_fields[$i]['first_timestamp'] = false;            switch ($table_fields[$i]['True_Type']) {                case 'set':                    $table_fields[$i]['pma_type'] = 'set';                    $table_fields[$i]['wrap']  = '';                    break;                case 'enum':                    $table_fields[$i]['pma_type'] = 'enum';                    $table_fields[$i]['wrap']  = '';                    break;                case 'timestamp':                    if (!$timestamp_seen) {   // can only occur once per table                        $timestamp_seen  = 1;                        $table_fields[$i]['first_timestamp'] = true;                    }                    $table_fields[$i]['pma_type'] = $table_fields[$i]['Type'];                    $table_fields[$i]['wrap']  = ' nowrap="nowrap"';                    break;                default:                    $table_fields[$i]['pma_type'] = $table_fields[$i]['Type'];                    $table_fields[$i]['wrap']  = ' nowrap="nowrap"';                    break;            }        }        $field = $table_fields[$i];        $extracted_fieldspec = PMA_extractFieldSpec($field['Type']);        if (-1 === $field['len']) {            $field['len'] = PMA_DBI_field_len($vresult, $i);            // length is unknown for geometry fields, make enough space to edit very simple WKTs            if (-1 === $field['len']) {                $field['len'] = 30;            }        }        //Call validation when the form submited...        $unnullify_trigger = $chg_evt_handler . "=\"return verificationsAfterFieldChange('". PMA_escapeJsString($field['Field_md5']) . "', '"            . PMA_escapeJsString($jsvkey) . "','".$field['pma_type']."')\"";        // Use an MD5 as an array index to avoid having special characters in the name atttibute (see bug #1746964 )        $field_name_appendix =  $vkey . '[' . $field['Field_md5'] . ']';        if ($field['Type'] == 'datetime'         && ! isset($field['Default'])         && ! is_null($field['Default'])         && ($insert_mode || ! isset($vrow[$field['Field']]))) {            // INSERT case or            // UPDATE case with an NULL value            $vrow[$field['Field']] = date('Y-m-d H:i:s', time());        }        ?>        <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">            <td <?php echo ($cfg['LongtextDoubleTextarea'] && strstr($field['True_Type'], 'longtext') ? 'rowspan="2"' : ''); ?> align="center">                <?php echo $field['Field_title']; ?>                <input type="hidden" name="fields_name<?php echo $field_name_appendix; ?>" value="<?php echo $field['Field_html']; ?>"/>            </td><?php if ($cfg['ShowFieldTypesInDataEditView']) { ?>             <td align="center"<?php echo $field['wrap']; ?>><span class="column_type"><?php echo $field['pma_type']; ?></span>             </td>         <?php } //End if        // Get a list of GIS data types.        $gis_data_types = PMA_getGISDatatypes();        // Prepares the field value        $real_null_value = false;        $special_chars_encoded = '';        if (isset($vrow)) {            // (we are editing)            if (is_null($vrow[$field['Field']])) {                $real_null_value = true;                $vrow[$field['Field']]    = '';                $special_chars   = '';                $data            = $vrow[$field['Field']];            } elseif ($field['True_Type'] == 'bit') {                $special_chars = PMA_printable_bit_value($vrow[$field['Field']], $extracted_fieldspec['spec_in_brackets']);            } elseif (in_array($field['True_Type'], $gis_data_types)) {                // Convert gis data to Well Know Text format                $vrow[$field['Field']] = PMA_asWKT($vrow[$field['Field']], true);                $special_chars = htmlspecialchars($vrow[$field['Field']]);            } else {                // special binary "characters"                if ($field['is_binary'] || ($field['is_blob'] && ! $cfg['ProtectBinary'])) {                    if ($_SESSION['tmp_user_values']['display_binary_as_hex'] && $cfg['ShowFunctionFields']) {                        $vrow[$field['Field']] = bin2hex($vrow[$field['Field']]);                        $field['display_binary_as_hex'] = true;                    } else {                        $vrow[$field['Field']] = PMA_replace_binary_contents($vrow[$field['Field']]);                    }                } // end if                $special_chars   = htmlspecialchars($vrow[$field['Field']]);            //We need to duplicate the first \n or otherwise we will lose the first newline entered in a VARCHAR or TEXT column                $special_chars_encoded = PMA_duplicateFirstNewline($special_chars);                $data            = $vrow[$field['Field']];            } // end if... else...            //when copying row, it is useful to empty auto-increment column to prevent duplicate key error            if (isset($default_action) && $default_action === 'insert') {                if ($field['Key'] === 'PRI' && strpos($field['Extra'], 'auto_increment') !== false) {                    $data = $special_chars_encoded = $special_chars = null;                }            }            // If a timestamp field value is not included in an update            // statement MySQL auto-update it to the current timestamp;            // however, things have changed since MySQL 4.1, so            // it's better to set a fields_prev in this situation            $backup_field  = '<input type="hidden" name="fields_prev'                . $field_name_appendix . '" value="'                . htmlspecialchars($vrow[$field['Field']]) . '" />';        } else {            // (we are inserting)            // display default values            if (! isset($field['Default'])) {                $field['Default'] = '';                $real_null_value          = true;                $data                     = '';            } else {                $data                     = $field['Default'];            }            if ($field['True_Type'] == 'bit') {                $special_chars = PMA_convert_bit_default_value($field['Default']);            } else {                $special_chars = htmlspecialchars($field['Default']);            }            $backup_field  = '';            $special_chars_encoded = PMA_duplicateFirstNewline($special_chars);            // this will select the UNHEX function while inserting            if (($field['is_binary'] || ($field['is_blob'] && ! $cfg['ProtectBinary'])) && $_SESSION['tmp_user_values']['display_binary_as_hex'] && $cfg['ShowFunctionFields']) {                $field['display_binary_as_hex'] = true;            }        }        $idindex  = ($o_rows * $fields_cnt) + $i + 1;        $tabindex = $idindex;        // Get a list of data types that are not yet supported.        $no_support_types = PMA_unsupportedDatatypes();        // The function column        // -------------------        // We don't want binary data to be destroyed        // Note: from the MySQL manual: "BINARY doesn't affect how the column is        //       stored or retrieved" so it does not mean that the contents is        //       binary        if ($cfg['ShowFunctionFields']) {            if (($cfg['ProtectBinary'] && $field['is_blob'] && !$is_upload)             || ($cfg['ProtectBinary'] == 'all' && $field['is_binary'])) {                echo '        <td align="center">' . __('Binary') . '</td>' . "\n";            } elseif (strstr($field['True_Type'], 'enum') || strstr($field['True_Type'], 'set') || in_array($field['pma_type'], $no_support_types)) {                echo '        <td align="center">--</td>' . "\n";            } else {                ?>            <td>                <select name="funcs<?php echo $field_name_appendix; ?>" <?php echo $unnullify_trigger; ?> tabindex="<?php echo ($tabindex + $tabindex_for_function); ?>" id="field_<?php echo $idindex; ?>_1"><?php    echo PMA_getFunctionsForField($field, $insert_mode);?>                </select>            </td>                <?php            }        } // end if ($cfg['ShowFunctionFields'])        // The null column        // ---------------        $foreignData = PMA_getForeignData($foreigners, $field['Field'], false, '', '');        echo '        <td>' . "\n";        if ($field['Null'] == 'YES') {            echo '            <input type="hidden" name="fields_null_prev' . $field_name_appendix . '"';            if ($real_null_value && !$field['first_timestamp']) {                echo ' value="on"';            }            echo ' />' . "\n";            echo '            <input type="checkbox" class="checkbox_null" tabindex="' . ($tabindex + $tabindex_for_null) . '"'                 . ' name="fields_null' . $field_name_appendix . '"';            if ($real_null_value && !$field['first_timestamp']) {                echo ' checked="checked"';            }            echo ' id="field_' . ($idindex) . '_2" />';            // nullify_code is needed by the js nullify() function            if (strstr($field['True_Type'], 'enum')) {                if (strlen($field['Type']) > 20) {                    $nullify_code = '1';                } else {                    $nullify_code = '2';                }            } elseif (strstr($field['True_Type'], 'set')) {                $nullify_code = '3';            } elseif ($foreigners && isset($foreigners[$field['Field']]) && $foreignData['foreign_link'] == false) {                // foreign key in a drop-down                $nullify_code = '4';            } elseif ($foreigners && isset($foreigners[$field['Field']]) && $foreignData['foreign_link'] == true) {                // foreign key with a browsing icon                $nullify_code = '6';            } else {                $nullify_code = '5';            }            // to be able to generate calls to nullify() in jQuery            echo '<input type="hidden" class="nullify_code" name="nullify_code' . $field_name_appendix . '" value="' . $nullify_code . '" />';            echo '<input type="hidden" class="hashed_field" name="hashed_field' . $field_name_appendix . '" value="' .  $field['Field_md5'] . '" />';            echo '<input type="hidden" class="multi_edit" name="multi_edit' . $field_name_appendix . '" value="' . PMA_escapeJsString($vkey) . '" />';        }        echo '        </td>' . "\n";        // The value column (depends on type)        // ----------------        // See bug #1667887 for the reason why we don't use the maxlength        // HTML attribute        echo '        <td>' . "\n";        // Will be used by js/tbl_change.js to set the default value        // for the "Continue insertion" feature        echo '<span class="default_value hide">' . $special_chars . '</span>';        if ($foreignData['foreign_link'] == true) {            echo $backup_field . "\n";            ?>            <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>"                value="foreign" />            <input type="text" name="fields<?php echo $field_name_appendix; ?>"                class="textfield" <?php echo $unnullify_trigger; ?>                tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                id="field_<?php echo ($idindex); ?>_3"                value="<?php echo htmlspecialchars($data); ?>" />                <a class="hide foreign_values_anchor" target="_blank" onclick="window.open(this.href, 'foreigners', 'width=640,height=240,scrollbars=yes,resizable=yes'); return false;" href="browse_foreigners.php?<?php echo PMA_generate_common_url($db, $table); ?>&amp;field=<?php echo PMA_escapeJsString(urlencode($field['Field']) . $rownumber_param); ?>"><?php echo str_replace("'", "\'", $titles['Browse']); ?></a>            <?php        } elseif (is_array($foreignData['disp_row'])) {            echo $backup_field . "\n";            ?>            <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>"                value="foreign" />            <select name="fields<?php echo $field_name_appendix; ?>"                <?php echo $unnullify_trigger; ?>                class="textfield"                tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                id="field_<?php echo ($idindex); ?>_3">                <?php echo PMA_foreignDropdown($foreignData['disp_row'], $foreignData['foreign_field'], $foreignData['foreign_display'], $data, $cfg['ForeignKeyMaxLimit']); ?>            </select>            <?php                // still needed? :            unset($foreignData['disp_row']);        } elseif ($cfg['LongtextDoubleTextarea'] && strstr($field['pma_type'], 'longtext')) {            ?>            &nbsp;</td>        </tr>        <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">            <td colspan="5" align="right">                <?php echo $backup_field . "\n"; ?>                <textarea name="fields<?php echo $field_name_appendix; ?>"                    rows="<?php echo ($cfg['TextareaRows']*2); ?>"                    cols="<?php echo ($cfg['TextareaCols']*2); ?>"                    dir="<?php echo $text_dir; ?>"                    id="field_<?php echo ($idindex); ?>_3"                    <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    ><?php echo $special_chars_encoded; ?></textarea>          <?php        } elseif (strstr($field['pma_type'], 'text')) {            echo $backup_field . "\n";            ?>                <textarea name="fields<?php echo $field_name_appendix; ?>"                    rows="<?php echo $cfg['TextareaRows']; ?>"                    cols="<?php echo $cfg['TextareaCols']; ?>"                    dir="<?php echo $text_dir; ?>"                    id="field_<?php echo ($idindex); ?>_3"                    <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    ><?php echo $special_chars_encoded; ?></textarea>            <?php            echo "\n";            if (strlen($special_chars) > 32000) {                echo "        </td>\n";                echo '        <td>' . __('Because of its length,<br /> this column might not be editable');            }        } elseif ($field['pma_type'] == 'enum') {            if (! isset($table_fields[$i]['values'])) {                $table_fields[$i]['values'] = array();                foreach ($extracted_fieldspec['enum_set_values'] as $val) {                    // Removes automatic MySQL escape format                    $val = str_replace('\'\'', '\'', str_replace('\\\\', '\\', $val));                    $table_fields[$i]['values'][] = array(                        'plain' => $val,                        'html'  => htmlspecialchars($val),                    );                }            }            $field_enum_values = $table_fields[$i]['values'];            ?>                <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="enum" />                <input type="hidden" name="fields<?php echo $field_name_appendix; ?>" value="" />            <?php            echo "\n" . '            ' . $backup_field . "\n";            // show dropdown or radio depend on length            if (strlen($field['Type']) > 20) {                ?>                <select name="fields<?php echo $field_name_appendix; ?>"                    <?php echo $unnullify_trigger; ?>                    class="textfield"                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    id="field_<?php echo ($idindex); ?>_3">                    <option value="">&nbsp;</option>                <?php                echo "\n";                foreach ($field_enum_values as $enum_value) {                    echo '                ';                    echo '<option value="' . $enum_value['html'] . '"';                    if ($data == $enum_value['plain']                     || ($data == ''                      && (! isset($where_clause) || $field['Null'] != 'YES')                      && isset($field['Default'])                      && $enum_value['plain'] == $field['Default'])) {                        echo ' selected="selected"';                    }                    echo '>' . $enum_value['html'] . '</option>' . "\n";                } // end for                ?>                </select>                <?php            } else {                $j = 0;                foreach ($field_enum_values as $enum_value) {                    echo '            ';                    echo '<input type="radio" name="fields' . $field_name_appendix . '"';                    echo ' class="textfield"';                    echo ' value="' . $enum_value['html'] . '"';                    echo ' id="field_' . ($idindex) . '_3_'  . $j . '"';                    echo $unnullify_trigger;                    if ($data == $enum_value['plain']                     || ($data == ''                      && (! isset($where_clause) || $field['Null'] != 'YES')                      && isset($field['Default'])                      && $enum_value['plain'] == $field['Default'])) {                        echo ' checked="checked"';                    }                    echo ' tabindex="' . ($tabindex + $tabindex_for_value) . '" />';                    echo '<label for="field_' . $idindex . '_3_' . $j . '">'                        . $enum_value['html'] . '</label>' . "\n";                    $j++;                } // end for            } // end else        } elseif ($field['pma_type'] == 'set') {            if (! isset($table_fields[$i]['values'])) {                $table_fields[$i]['values'] = array();                foreach ($extracted_fieldspec['enum_set_values'] as $val) {                    $table_fields[$i]['values'][] = array(                        'plain' => $val,                        'html'  => htmlspecialchars($val),                    );                }                $table_fields[$i]['select_size'] = min(4, count($table_fields[$i]['values']));            }            $field_set_values = $table_fields[$i]['values'];            $select_size = $table_fields[$i]['select_size'];            $vset = array_flip(explode(',', $data));            echo $backup_field . "\n";            ?>                <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="set" />                <select name="fields<?php echo $field_name_appendix . '[]'; ?>"                    class="textfield"                    size="<?php echo $select_size; ?>"                    multiple="multiple" <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    id="field_<?php echo ($idindex); ?>_3">            <?php            foreach ($field_set_values as $field_set_value) {                echo '                ';                echo '<option value="' . $field_set_value['html'] . '"';                if (isset($vset[$field_set_value['plain']])) {                    echo ' selected="selected"';                }                echo '>' . $field_set_value['html'] . '</option>' . "\n";            } // end for            ?>                </select>            <?php        // We don't want binary data destroyed        } elseif ($field['is_binary'] || $field['is_blob']) {            if (($cfg['ProtectBinary'] && $field['is_blob'])                || ($cfg['ProtectBinary'] == 'all' && $field['is_binary'])            ) {                echo "\n";                    // for blobstreaming                if (PMA_BS_IsTablePBMSEnabled($db, $table, $tbl_type)                    && PMA_BS_IsPBMSReference($data, $db)                ) {                    echo '<input type="hidden" name="remove_blob_ref_' . $field['Field_md5'] . $vkey . '" value="' . $data . '" />';                    echo '<input type="checkbox" name="remove_blob_repo_' . $field['Field_md5'] . $vkey . '" /> ' . __('Remove BLOB Repository Reference') . "<br />";                    echo PMA_BS_CreateReferenceLink($data, $db);                    echo "<br />";                } else {                    echo __('Binary - do not edit');                    if (isset($data)) {                        $data_size = PMA_formatByteDown(strlen(stripslashes($data)), 3, 1);                        echo ' ('. $data_size [0] . ' ' . $data_size[1] . ')';                        unset($data_size);                    }                    echo "\n";                }   // end if (PMA_BS_IsTablePBMSEnabled($db, $table, $tbl_type) && PMA_BS_IsPBMSReference($data, $db))                ?>                <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="protected" />                <input type="hidden" name="fields<?php echo $field_name_appendix; ?>" value="" />                <?php            } elseif ($field['is_blob']) {                echo "\n";                echo $backup_field . "\n";                ?>                <textarea name="fields<?php echo $field_name_appendix; ?>"                    rows="<?php echo $cfg['TextareaRows']; ?>"                    cols="<?php echo $cfg['TextareaCols']; ?>"                    dir="<?php echo $text_dir; ?>"                    id="field_<?php echo ($idindex); ?>_3"                    <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    ><?php echo $special_chars_encoded; ?></textarea>                <?php            } else {                // field size should be at least 4 and max $cfg['LimitChars']                $fieldsize = min(max($field['len'], 4), $cfg['LimitChars']);                echo "\n";                echo $backup_field . "\n";                ?>                <input type="text" name="fields<?php echo $field_name_appendix; ?>"                    value="<?php echo $special_chars; ?>" size="<?php echo $fieldsize; ?>"                    class="textfield" <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    id="field_<?php echo ($idindex); ?>_3" />                <?php            } // end if...elseif...else            // Upload choice (only for BLOBs because the binary            // attribute does not imply binary contents)            // (displayed whatever value the ProtectBinary has)            if ($is_upload && $field['is_blob']) {                // check if field type is of longblob and  if the table is PBMS enabled.                if (($field['pma_type'] == "longblob")                    && PMA_BS_IsTablePBMSEnabled($db, $table, $tbl_type)                ) {                    echo '<br />';                    echo '<input type="checkbox" name="upload_blob_repo' . $vkey . '[' . $field['Field_md5'] . ']" /> ' .  __('Upload to BLOB repository');                }                echo '<br />';                echo '<input type="file" name="fields_upload' . $vkey . '[' . $field['Field_md5'] . ']" class="textfield" id="field_' . $idindex . '_3" size="10" ' . $unnullify_trigger . '/>&nbsp;';                // find maximum upload size, based on field type                /**                 * @todo with functions this is not so easy, as you can basically                 * process any data with function like MD5                 */                $max_field_sizes = array(                    'tinyblob'   =>        '256',                    'blob'       =>      '65536',                    'mediumblob' =>   '16777216',                    'longblob'   => '4294967296'); // yeah, really                $this_field_max_size = $max_upload_size; // from PHP max                if ($this_field_max_size > $max_field_sizes[$field['pma_type']]) {                   $this_field_max_size = $max_field_sizes[$field['pma_type']];                }                echo PMA_displayMaximumUploadSize($this_field_max_size) . "\n";                // do not generate here the MAX_FILE_SIZE, because we should                // put only one in the form to accommodate the biggest field                if ($this_field_max_size > $biggest_max_file_size) {                    $biggest_max_file_size = $this_field_max_size;                }            }            if (!empty($cfg['UploadDir'])) {                $files = PMA_getFileSelectOptions(PMA_userDir($cfg['UploadDir']));                if ($files === false) {                    echo '        <font color="red">' . __('Error') . '</font><br />' . "\n";                    echo '        ' . __('The directory you set for upload work cannot be reached') . "\n";                } elseif (!empty($files)) {                    echo "<br />\n";                    echo '    <i>' . __('Or') . '</i>' . ' ' . __('web server upload directory') . ':<br />' . "\n";                    echo '        <select size="1" name="fields_uploadlocal' . $vkey . '[' . $field['Field_md5'] . ']">' . "\n";                    echo '            <option value="" selected="selected"></option>' . "\n";                    echo $files;                    echo '        </select>' . "\n";                }            } // end if (web-server upload directory)        // end elseif (binary or blob)        } elseif (! in_array($field['pma_type'], $no_support_types)) {            // ignore this column to avoid changing it            if ($field['is_char']) {                $fieldsize = $extracted_fieldspec['spec_in_brackets'];            } else {            /**             * This case happens for example for INT or DATE columns;             * in these situations, the value returned in $field['len']             * seems appropriate.             */                $fieldsize = $field['len'];            }            $fieldsize = min(max($fieldsize, $cfg['MinSizeForInputField']), $cfg['MaxSizeForInputField']);            echo $backup_field . "\n";            if ($field['is_char']                && ($cfg['CharEditing'] == 'textarea'                || strpos($data, "\n") !== false)            ) {                echo "\n";                ?>                <textarea class="char" name="fields<?php echo $field_name_appendix; ?>"                    rows="<?php echo $cfg['CharTextareaRows']; ?>"                    cols="<?php echo $cfg['CharTextareaCols']; ?>"                    dir="<?php echo $text_dir; ?>"                    id="field_<?php echo ($idindex); ?>_3"                    <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    ><?php echo $special_chars_encoded; ?></textarea>                <?php            } else {                $the_class = 'textfield';                if ($field['pma_type'] == 'date') {                    $the_class .= ' datefield';                } elseif ($field['pma_type'] == 'datetime'                    || substr($field['pma_type'], 0, 9) == 'timestamp'                ) {                    $the_class .= ' datetimefield';                }                ?>                <input type="text" name="fields<?php echo $field_name_appendix; ?>"                    value="<?php echo $special_chars; ?>" size="<?php echo $fieldsize; ?>"                    class="<?php echo $the_class; ?>" <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    id="field_<?php echo ($idindex); ?>_3" />                <?php                if ($field['Extra'] == 'auto_increment') {                    ?>                    <input type="hidden" name="auto_increment<?php echo $field_name_appendix; ?>" value="1" />                    <?php                } // end if                if (substr($field['pma_type'], 0, 9) == 'timestamp') {                    ?>                    <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="timestamp" />                    <?php                }                if (substr($field['pma_type'], 0, 8) == 'datetime') {                    ?>                    <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="datetime" />                    <?php                }                if ($field['True_Type'] == 'bit') {                    ?>                    <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="bit" />                    <?php                }                if ($field['pma_type'] == 'date'                    || $field['pma_type'] == 'datetime'                    || substr($field['pma_type'], 0, 9) == 'timestamp'                ) {                    // the _3 suffix points to the date field                    // the _2 suffix points to the corresponding NULL checkbox                    // in dateFormat, 'yy' means the year with 4 digits                }            }        }        if (in_array($field['pma_type'], $gis_data_types)) {            $data_val = isset($vrow[$field['Field']]) ? $vrow[$field['Field']] : '';            $_url_params = array(                'field' => $field['Field_title'],                'value' => $data_val,             );            if ($field['pma_type'] != 'geometry') {                $_url_params = $_url_params + array('gis_data[gis_type]' => strtoupper($field['pma_type']));            }            $edit_url = 'gis_data_editor.php' . PMA_generate_common_url($_url_params);            $edit_str = PMA_getIcon('b_edit.png', __('Edit/Insert'));            echo('<span class="open_gis_editor">');            echo(PMA_linkOrButton($edit_url, $edit_str, array(), false, false, '_blank'));            echo('</span>');        }        ?>            </td>        </tr>        <?php        $odd_row = !$odd_row;    } // end for    $o_rows++;    echo '  </tbody></table><br />';} // end foreach on multi-edit?>    <div id="gis_editor"></div><div id="popup_background"></div>    <br />    <fieldset id="actions_panel">    <table border="0" cellpadding="5" cellspacing="0">    <tr>        <td valign="middle" nowrap="nowrap">            <select name="submit_type" class="control_at_footer" tabindex="<?php echo ($tabindex + $tabindex_for_value + 1); ?>"><?phpif (isset($where_clause)) {    ?>                <option value="save"><?php echo __('Save'); ?></option>    <?php}    ?>                <option value="insert"><?php echo __('Insert as new row'); ?></option>                <option value="insertignore"><?php echo __('Insert as new row and ignore errors'); ?></option>                <option value="showinsert"><?php echo __('Show insert query'); ?></option>            </select>    <?phpecho "\n";if (! isset($after_insert)) {    $after_insert = 'back';}?>        </td>        <td valign="middle">            &nbsp;&nbsp;&nbsp;<strong><?php echo __('and then'); ?></strong>&nbsp;&nbsp;&nbsp;        </td>        <td valign="middle" nowrap="nowrap">            <select name="after_insert">                <option value="back" <?php echo ($after_insert == 'back' ? 'selected="selected"' : ''); ?>><?php echo __('Go back to previous page'); ?></option>                <option value="new_insert" <?php echo ($after_insert == 'new_insert' ? 'selected="selected"' : ''); ?>><?php echo __('Insert another new row'); ?></option><?phpif (isset($where_clause)) {    ?>                <option value="same_insert" <?php echo ($after_insert == 'same_insert' ? 'selected="selected"' : ''); ?>><?php echo __('Go back to this page'); ?></option>    <?php    // If we have just numeric primary key, we can also edit next    // in 2.8.2, we were looking for `field_name` = numeric_value    //if (preg_match('@^[\s]*`[^`]*` = [0-9]+@', $where_clause)) {    // in 2.9.0, we are looking for `table_name`.`field_name` = numeric_value    if ($found_unique_key && preg_match('@^[\s]*`[^`]*`[\.]`[^`]*` = [0-9]+@', $where_clause)) {        ?>    <option value="edit_next" <?php echo ($after_insert == 'edit_next' ? 'selected="selected"' : ''); ?>><?php echo __('Edit next row'); ?></option>        <?php    }}?>            </select>        </td>    </tr>    <tr>        <td><?php echo PMA_showHint(__('Use TAB key to move from value to value, or CTRL+arrows to move anywhere')); ?>        </td>        <td colspan="3" align="right" valign="middle">            <input type="submit" class="control_at_footer" value="<?php echo __('Go'); ?>" tabindex="<?php echo ($tabindex + $tabindex_for_value + 6); ?>" id="buttonYes" />            <input type="reset" class="control_at_footer" value="<?php echo __('Reset'); ?>" tabindex="<?php echo ($tabindex + $tabindex_for_value + 7); ?>" />        </td>    </tr>    </table>    </fieldset>    <?php if ($biggest_max_file_size > 0) {            echo '        ' . PMA_generateHiddenMaxFileSize($biggest_max_file_size) . "\n";          } ?></form><?phpif ($insert_mode) {?><!-- Continue insertion form --><form id="continueForm" method="post" action="tbl_replace.php" name="continueForm" >    <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>    <input type="hidden" name="goto" value="<?php echo htmlspecialchars($GLOBALS['goto']); ?>" />    <input type="hidden" name="err_url" value="<?php echo htmlspecialchars($err_url); ?>" />    <input type="hidden" name="sql_query" value="<?php echo htmlspecialchars($sql_query); ?>" /><?php    if (isset($where_clauses)) {        foreach ($where_clause_array as $key_id => $where_clause) {            echo '<input type="hidden" name="where_clause[' . $key_id . ']" value="' . htmlspecialchars(trim($where_clause)) . '" />'. "\n";        }    }    $tmp = '<select name="insert_rows" id="insert_rows">' . "\n";    $option_values = array(1,2,5,10,15,20,30,40);    foreach ($option_values as $value) {        $tmp .= '<option value="' . $value . '"';        if ($value == $cfg['InsertRows']) {            $tmp .= ' selected="selected"';        }        $tmp .= '>' . $value . '</option>' . "\n";    }    $tmp .= '</select>' . "\n";    echo "\n" . sprintf(__('Continue insertion with %s rows'), $tmp);    unset($tmp);    echo '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>' . "\n";    echo '</form>' . "\n";}/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Main export hanling code * @package PhpMyAdmin *//** * Get the variables sent or posted to this script and a core script */require_once './libraries/common.inc.php';require_once './libraries/zip.lib.php';require_once './libraries/plugin_interface.lib.php';PMA_checkParameters(array('what', 'export_type'));// Scan plugins$export_list = PMA_getPlugins(    './libraries/export/',    array(        'export_type' => $export_type,        'single_table' => isset($single_table)));// Backward compatbility$type = $what;// Check export typeif (! isset($export_list[$type])) {    die(__('Bad type!'));}/** * valid compression methods */$compression_methods = array(    'zip',    'gzip',    'bzip2',);/** * init and variable checking */$compression = false;$onserver = false;$save_on_server = false;$buffer_needed = false;// Is it a quick or custom export?if ($_REQUEST['quick_or_custom'] == 'quick') {    $quick_export = true;} else {    $quick_export = false;}if ($_REQUEST['output_format'] == 'astext') {    $asfile = false;} else {    $asfile = true;    if (in_array($_REQUEST['compression'], $compression_methods)) {        $compression = $_REQUEST['compression'];        $buffer_needed = true;    }    if (($quick_export && !empty($_REQUEST['quick_export_onserver'])) || (!$quick_export && !empty($_REQUEST['onserver']))) {        if ($quick_export) {            $onserver = $_REQUEST['quick_export_onserver'];        } else {            $onserver = $_REQUEST['onserver'];        }        // Will we save dump on server?        $save_on_server = ! empty($cfg['SaveDir']) && $onserver;    }}// Does export require to be into file?if (isset($export_list[$type]['force_file']) && ! $asfile) {    $message = PMA_Message::error(__('Selected export type has to be saved in file!'));    include_once './libraries/header.inc.php';    if ($export_type == 'server') {        $active_page = 'server_export.php';        include './server_export.php';    } elseif ($export_type == 'database') {        $active_page = 'db_export.php';        include './db_export.php';    } else {        $active_page = 'tbl_export.php';        include './tbl_export.php';    }    exit();}// Generate error url and check for needed variablesif ($export_type == 'server') {    $err_url = 'server_export.php?' . PMA_generate_common_url();} elseif ($export_type == 'database' && strlen($db)) {    $err_url = 'db_export.php?' . PMA_generate_common_url($db);    // Check if we have something to export    if (isset($table_select)) {        $tables = $table_select;    } else {        $tables = array();    }} elseif ($export_type == 'table' && strlen($db) && strlen($table)) {    $err_url = 'tbl_export.php?' . PMA_generate_common_url($db, $table);} else {    die(__('Bad parameters!'));}// Get the functions specific to the export typerequire './libraries/export/' . PMA_securePath($type) . '.php';/** * Increase time limit for script execution and initializes some variables */@set_time_limit($cfg['ExecTimeLimit']);if (!empty($cfg['MemoryLimit'])) {    @ini_set('memory_limit', $cfg['MemoryLimit']);}// Start with empty buffer$dump_buffer = '';$dump_buffer_len = 0;// We send fake headers to avoid browser timeout when buffering$time_start = time();/** * Output handler for all exports, if needed buffering, it stores data into * $dump_buffer, otherwise it prints thems out. * * @param string  $line  the insert statement * @return  bool    Whether output succeeded */function PMA_exportOutputHandler($line){    global $time_start, $dump_buffer, $dump_buffer_len, $save_filename;    // Kanji encoding convert feature    if ($GLOBALS['output_kanji_conversion']) {        $line = PMA_kanji_str_conv($line, $GLOBALS['knjenc'], isset($GLOBALS['xkana']) ? $GLOBALS['xkana'] : '');    }    // If we have to buffer data, we will perform everything at once at the end    if ($GLOBALS['buffer_needed']) {        $dump_buffer .= $line;        if ($GLOBALS['onfly_compression']) {            $dump_buffer_len += strlen($line);            if ($dump_buffer_len > $GLOBALS['memory_limit']) {                if ($GLOBALS['output_charset_conversion']) {                    $dump_buffer = PMA_convert_string('utf-8', $GLOBALS['charset_of_file'], $dump_buffer);                }                // as bzipped                if ($GLOBALS['compression'] == 'bzip2'  && @function_exists('bzcompress')) {                    $dump_buffer = bzcompress($dump_buffer);                } elseif ($GLOBALS['compression'] == 'gzip' && @function_exists('gzencode')) {                    // as a gzipped file                    // without the optional parameter level because it bug                    $dump_buffer = gzencode($dump_buffer);                }                if ($GLOBALS['save_on_server']) {                    $write_result = @fwrite($GLOBALS['file_handle'], $dump_buffer);                    if (!$write_result || ($write_result != strlen($dump_buffer))) {                        $GLOBALS['message'] = PMA_Message::error(__('Insufficient space to save the file %s.'));                        $GLOBALS['message']->addParam($save_filename);                        return false;                    }                } else {                    echo $dump_buffer;                }                $dump_buffer = '';                $dump_buffer_len = 0;            }        } else {            $time_now = time();            if ($time_start >= $time_now + 30) {                $time_start = $time_now;                header('X-pmaPing: Pong');            } // end if        }    } else {        if ($GLOBALS['asfile']) {            if ($GLOBALS['output_charset_conversion']) {                $line = PMA_convert_string('utf-8', $GLOBALS['charset_of_file'], $line);            }            if ($GLOBALS['save_on_server'] && strlen($line) > 0) {                $write_result = @fwrite($GLOBALS['file_handle'], $line);                if (!$write_result || ($write_result != strlen($line))) {                    $GLOBALS['message'] = PMA_Message::error(__('Insufficient space to save the file %s.'));                    $GLOBALS['message']->addParam($save_filename);                    return false;                }                $time_now = time();                if ($time_start >= $time_now + 30) {                    $time_start = $time_now;                    header('X-pmaPing: Pong');                } // end if            } else {                // We export as file - output normally                echo $line;            }        } else {            // We export as html - replace special chars            echo htmlspecialchars($line);        }    }    return true;} // end of the 'PMA_exportOutputHandler()' function// Defines the default <CR><LF> format. For SQL always use \n as MySQL wants this on all platforms.if ($what == 'sql') {    $crlf = "\n";} else {    $crlf = PMA_whichCrlf();}$output_kanji_conversion = function_exists('PMA_kanji_str_conv') && $type != 'xls';// Do we need to convert charset?$output_charset_conversion = $asfile && $GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE    && isset($charset_of_file) && $charset_of_file != 'utf-8'    && $type != 'xls';// Use on the fly compression?$onfly_compression = $GLOBALS['cfg']['CompressOnFly'] && ($compression == 'gzip' || $compression == 'bzip2');if ($onfly_compression) {    $memory_limit = trim(@ini_get('memory_limit'));    // 2 MB as default    if (empty($memory_limit)) {        $memory_limit = 2 * 1024 * 1024;    }    if (strtolower(substr($memory_limit, -1)) == 'm') {        $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024;    } elseif (strtolower(substr($memory_limit, -1)) == 'k') {        $memory_limit = (int)substr($memory_limit, 0, -1) * 1024;    } elseif (strtolower(substr($memory_limit, -1)) == 'g') {        $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024 * 1024;    } else {        $memory_limit = (int)$memory_limit;    }    // Some of memory is needed for other thins and as treshold.    // Nijel: During export I had allocated (see memory_get_usage function)    //        approx 1.2MB so this comes from that.    if ($memory_limit > 1500000) {        $memory_limit -= 1500000;    }    // Some memory is needed for compression, assume 1/3    $memory_limit /= 8;}// Generate filename and mime type if neededif ($asfile) {    $pma_uri_parts = parse_url($cfg['PmaAbsoluteUri']);    if ($export_type == 'server') {        if (isset($remember_template)) {            $GLOBALS['PMA_Config']->setUserValue('pma_server_filename_template',                'Export/file_template_server', $filename_template);        }    } elseif ($export_type == 'database') {        if (isset($remember_template)) {            $GLOBALS['PMA_Config']->setUserValue('pma_db_filename_template',                'Export/file_template_database', $filename_template);        }    } else {        if (isset($remember_template)) {            $GLOBALS['PMA_Config']->setUserValue('pma_table_filename_template',                'Export/file_template_table', $filename_template);        }    }    $filename = PMA_expandUserString($filename_template);    $filename = PMA_sanitize_filename($filename);    // Grab basic dump extension and mime type    // Check if the user already added extension; get the substring where the extension would be if it was included    $extension_start_pos = strlen($filename) - strlen($export_list[$type]['extension']) - 1;    $user_extension = substr($filename, $extension_start_pos, strlen($filename));    $required_extension = "." . $export_list[$type]['extension'];    if (strtolower($user_extension) != $required_extension) {        $filename  .= $required_extension;    }    $mime_type  = $export_list[$type]['mime_type'];    // If dump is going to be compressed, set correct mime_type and add    // compression to extension    if ($compression == 'bzip2') {        $filename  .= '.bz2';        $mime_type = 'application/x-bzip2';    } elseif ($compression == 'gzip') {        $filename  .= '.gz';        $mime_type = 'application/x-gzip';    } elseif ($compression == 'zip') {        $filename  .= '.zip';        $mime_type = 'application/zip';    }}// Open file on server if neededif ($save_on_server) {    $save_filename = PMA_userDir($cfg['SaveDir']) . preg_replace('@[/\\\\]@', '_', $filename);    unset($message);    if (file_exists($save_filename) && ((!$quick_export && empty($onserverover)) || ($quick_export && $_REQUEST['quick_export_onserverover'] != 'saveitover'))) {        $message = PMA_Message::error(__('File %s already exists on server, change filename or check overwrite option.'));        $message->addParam($save_filename);    } else {        if (is_file($save_filename) && !is_writable($save_filename)) {            $message = PMA_Message::error(__('The web server does not have permission to save the file %s.'));            $message->addParam($save_filename);        } else {            if (!$file_handle = @fopen($save_filename, 'w')) {                $message = PMA_Message::error(__('The web server does not have permission to save the file %s.'));                $message->addParam($save_filename);            }        }    }    if (isset($message)) {        include_once './libraries/header.inc.php';        if ($export_type == 'server') {            $active_page = 'server_export.php';            include './server_export.php';        } elseif ($export_type == 'database') {            $active_page = 'db_export.php';            include './db_export.php';        } else {            $active_page = 'tbl_export.php';            include './tbl_export.php';        }        exit();    }}/** * Send headers depending on whether the user chose to download a dump file * or not */if (!$save_on_server) {    if ($asfile) {        // Download        // (avoid rewriting data containing HTML with anchors and forms;        // this was reported to happen under Plesk)        @ini_set('url_rewriter.tags', '');        $filename = PMA_sanitize_filename($filename);        PMA_download_header($filename, $mime_type);    } else {        // HTML        if ($export_type == 'database') {            $num_tables = count($tables);            if ($num_tables == 0) {                $message = PMA_Message::error(__('No tables found in database.'));                include_once './libraries/header.inc.php';                $active_page = 'db_export.php';                include './db_export.php';                exit();            }        }        $backup_cfgServer = $cfg['Server'];        include_once './libraries/header.inc.php';        $cfg['Server'] = $backup_cfgServer;        unset($backup_cfgServer);        echo "\n" . '<div align="' . $cell_align_left . '">' . "\n";        //echo '    <pre>' . "\n";        /**         * Displays a back button with all the $_REQUEST data in the URL (store in a variable to also display after the textarea)         */         $back_button = '<p>[ <a href="';        if ($export_type == 'server') {           $back_button .= 'server_export.php?' . PMA_generate_common_url();         } elseif ($export_type == 'database') {            $back_button .= 'db_export.php?' . PMA_generate_common_url($db);        } else {            $back_button .= 'tbl_export.php?' . PMA_generate_common_url($db, $table);        }        // Convert the multiple select elements from an array to a string        if ($export_type == 'server' && isset($_REQUEST['db_select'])) {            $_REQUEST['db_select'] = implode(",", $_REQUEST['db_select']);        } elseif ($export_type == 'database' && isset($_REQUEST['table_select'])) {            $_REQUEST['table_select'] = implode(",", $_REQUEST['table_select']);        }        foreach ($_REQUEST as $name => $value) {            $back_button .= '&' . urlencode($name) . '=' . urlencode($value);        }        $back_button .= '&repopulate=1">Back</a> ]</p>';        echo $back_button;        echo '    <form name="nofunction">' . "\n"           // remove auto-select for now: there is no way to select           // only a part of the text; anyway, it should obey           // $cfg['TextareaAutoSelect']           //. '        <textarea name="sqldump" cols="50" rows="30" onclick="this.select();" id="textSQLDUMP" wrap="OFF">' . "\n";           . '        <textarea name="sqldump" cols="50" rows="30" id="textSQLDUMP" wrap="OFF">' . "\n";    } // end download}// Fake loop just to allow skip of remain of this code by break, I'd really// need exceptions here :-)do {    // Add possibly some comments to export    if (!PMA_exportHeader()) {        break;    }    // Will we need relation & co. setup?    $do_relation = isset($GLOBALS[$what . '_relation']);    $do_comments = isset($GLOBALS[$what . '_include_comments']);    $do_mime     = isset($GLOBALS[$what . '_mime']);    if ($do_relation || $do_comments || $do_mime) {        $cfgRelation = PMA_getRelationsParam();    }    if ($do_mime) {        include_once './libraries/transformations.lib.php';    }    // Include dates in export?    $do_dates   = isset($GLOBALS[$what . '_dates']);    /**     * Builds the dump     */    // Gets the number of tables if a dump of a database has been required    if ($export_type == 'server') {        if (isset($db_select)) {            $tmp_select = implode($db_select, '|');            $tmp_select = '|' . $tmp_select . '|';        }        // Walk over databases        foreach ($GLOBALS['pma']->databases as $current_db) {            if ((isset($tmp_select) && strpos(' ' . $tmp_select, '|' . $current_db . '|'))                || ! isset($tmp_select)) {                if (!PMA_exportDBHeader($current_db)) {                    break 2;                }                if (!PMA_exportDBCreate($current_db)) {                    break 2;                }                if (function_exists('PMA_exportRoutines') && strpos($GLOBALS['sql_structure_or_data'], 'structure') !== false && isset($GLOBALS['sql_procedure_function'])) {                    PMA_exportRoutines($current_db);                }                $tables = PMA_DBI_get_tables($current_db);                $views = array();                foreach ($tables as $table) {                    // if this is a view, collect it for later; views must be exported                    // after the tables                    $is_view = PMA_Table::isView($current_db, $table);                    if ($is_view) {                        $views[] = $table;                    }                    if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                        // for a view, export a stand-in definition of the table                        // to resolve view dependencies                        if (!PMA_exportStructure($current_db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, $is_view ? 'stand_in' : 'create_table', $export_type)) {                            break 3;                        }                    }                    // if this is a view or a merge table, don't export data                    if (($GLOBALS[$what . '_structure_or_data'] == 'data' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') && !($is_view || PMA_Table::isMerge($current_db, $table))) {                        $local_query  = 'SELECT * FROM ' . PMA_backquote($current_db) . '.' . PMA_backquote($table);                        if (!PMA_exportData($current_db, $table, $crlf, $err_url, $local_query)) {                            break 3;                        }                    }                    // now export the triggers (needs to be done after the data because                    // triggers can modify already imported tables)                    if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                        if (!PMA_exportStructure($current_db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'triggers', $export_type)) {                            break 2;                        }                    }                }                foreach ($views as $view) {                    // no data export for a view                    if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                        if (!PMA_exportStructure($current_db, $view, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'create_view', $export_type)) {                            break 3;                        }                    }                }                if (!PMA_exportDBFooter($current_db)) {                    break 2;                }            }        }    } elseif ($export_type == 'database') {        if (!PMA_exportDBHeader($db)) {            break;        }        if (function_exists('PMA_exportRoutines') && strpos($GLOBALS['sql_structure_or_data'], 'structure') !== false && isset($GLOBALS['sql_procedure_function'])) {            PMA_exportRoutines($db);        }        $i = 0;        $views = array();        // $tables contains the choices from the user (via $table_select)        foreach ($tables as $table) {            // if this is a view, collect it for later; views must be exported after            // the tables            $is_view = PMA_Table::isView($db, $table);            if ($is_view) {                $views[] = $table;            }            if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                // for a view, export a stand-in definition of the table                // to resolve view dependencies                if (!PMA_exportStructure($db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, $is_view ? 'stand_in' : 'create_table', $export_type)) {                    break 2;                }            }            // if this is a view or a merge table, don't export data            if (($GLOBALS[$what . '_structure_or_data'] == 'data' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') && !($is_view || PMA_Table::isMerge($db, $table))) {                $local_query  = 'SELECT * FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table);                if (!PMA_exportData($db, $table, $crlf, $err_url, $local_query)) {                    break 2;                }            }            // now export the triggers (needs to be done after the data because            // triggers can modify already imported tables)            if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                if (!PMA_exportStructure($db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'triggers', $export_type)) {                    break 2;                }            }        }        foreach ($views as $view) {            // no data export for a view            if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                if (!PMA_exportStructure($db, $view, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'create_view', $export_type)) {                    break 2;                }            }        }        if (!PMA_exportDBFooter($db)) {            break;        }    } else {        if (!PMA_exportDBHeader($db)) {            break;        }        // We export just one table        // $allrows comes from the form when "Dump all rows" has been selected        if ($allrows == '0' && $limit_to > 0 && $limit_from >= 0) {            $add_query  = ' LIMIT '                        . (($limit_from > 0) ? $limit_from . ', ' : '')                        . $limit_to;        } else {            $add_query  = '';        }        $is_view = PMA_Table::isView($db, $table);        if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {            if (!PMA_exportStructure($db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, $is_view ? 'create_view' : 'create_table', $export_type)) {                break;            }        }        // If this is an export of a single view, we have to export data;        // for example, a PDF report        // if it is a merge table, no data is exported        if (($GLOBALS[$what . '_structure_or_data'] == 'data' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') && ! PMA_Table::isMerge($db, $table)) {            if (!empty($sql_query)) {                // only preg_replace if needed                if (!empty($add_query)) {                    // remove trailing semicolon before adding a LIMIT                    $sql_query = preg_replace('%;\s*$%', '', $sql_query);                }                $local_query = $sql_query . $add_query;                PMA_DBI_select_db($db);            } else {                $local_query  = 'SELECT * FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table) . $add_query;            }            if (!PMA_exportData($db, $table, $crlf, $err_url, $local_query)) {                break;            }        }        // now export the triggers (needs to be done after the data because        // triggers can modify already imported tables)        if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {            if (!PMA_exportStructure($db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'triggers', $export_type)) {                break 2;            }        }        if (!PMA_exportDBFooter($db)) {            break;        }    }    if (!PMA_exportFooter()) {        break;    }} while (false);// End of fake loopif ($save_on_server && isset($message)) {    include_once './libraries/header.inc.php';    if ($export_type == 'server') {        $active_page = 'server_export.php';        include './server_export.php';    } elseif ($export_type == 'database') {        $active_page = 'db_export.php';        include './db_export.php';    } else {        $active_page = 'tbl_export.php';        include './tbl_export.php';    }    exit();}/** * Send the dump as a file... */if (!empty($asfile)) {    // Convert the charset if required.    if ($output_charset_conversion) {        $dump_buffer = PMA_convert_string('utf-8', $GLOBALS['charset_of_file'], $dump_buffer);    }    // Do the compression    // 1. as a zipped file    if ($compression == 'zip') {        if (@function_exists('gzcompress')) {            $zipfile = new zipfile();            $zipfile -> addFile($dump_buffer, substr($filename, 0, -4));            $dump_buffer = $zipfile -> file();        }    } elseif ($compression == 'bzip2') {        // 2. as a bzipped file        if (@function_exists('bzcompress')) {            $dump_buffer = bzcompress($dump_buffer);        }    } elseif ($compression == 'gzip') {        // 3. as a gzipped file        if (@function_exists('gzencode') && !@ini_get('zlib.output_compression')) {            // without the optional parameter level because it bug            $dump_buffer = gzencode($dump_buffer);        }    }    /* If ve saved on server, we have to close file now */    if ($save_on_server) {        $write_result = @fwrite($file_handle, $dump_buffer);        fclose($file_handle);        if (strlen($dump_buffer) !=0 && (!$write_result || ($write_result != strlen($dump_buffer)))) {            $message = new PMA_Message(__('Insufficient space to save the file %s.'), PMA_Message::ERROR, $save_filename);        } else {            $message = new PMA_Message(__('Dump has been saved to file %s.'), PMA_Message::SUCCESS, $save_filename);        }        include_once './libraries/header.inc.php';        if ($export_type == 'server') {            $active_page = 'server_export.php';            include_once './server_export.php';        } elseif ($export_type == 'database') {            $active_page = 'db_export.php';            include_once './db_export.php';        } else {            $active_page = 'tbl_export.php';            include_once './tbl_export.php';        }        exit();    } else {        echo $dump_buffer;    }} else {    /**     * Displays the dump...     *     * Close the html tags and add the footers if dump is displayed on screen     */    echo '</textarea>' . "\n"       . '    </form>' . "\n";    echo $back_button;    echo "\n";    echo '</div>' . "\n";    echo "\n";?><script type="text/javascript">//<![CDATA[    var bodyWidth=null; var bodyHeight=null;    if (document.getElementById('textSQLDUMP')) {        bodyWidth  = self.innerWidth;        bodyHeight = self.innerHeight;        if (!bodyWidth && !bodyHeight) {            if (document.compatMode && document.compatMode == "BackCompat") {                bodyWidth  = document.body.clientWidth;                bodyHeight = document.body.clientHeight;            } else if (document.compatMode && document.compatMode == "CSS1Compat") {                bodyWidth  = document.documentElement.clientWidth;                bodyHeight = document.documentElement.clientHeight;            }        }        document.getElementById('textSQLDUMP').style.width=(bodyWidth-50) + 'px';        document.getElementById('textSQLDUMP').style.height=(bodyHeight-100) + 'px';    }//]]></script><?php    include './libraries/footer.inc.php';} // end if?>
