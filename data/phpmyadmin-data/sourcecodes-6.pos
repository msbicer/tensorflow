<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * searchs the entire database * * @todo    make use of UNION when searching multiple tables * @todo    display executed query, optional? * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'db_search.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';/** * Gets some core libraries and send headers */require './libraries/db_common.inc.php';/** * init */// If config variable $GLOBALS['cfg']['Usedbsearch'] is on false : exit.if (! $GLOBALS['cfg']['UseDbSearch']) {    PMA_mysqlDie(__('Access denied'), '', false, $err_url);} // end if$url_query .= '&amp;goto=db_search.php';$url_params['goto'] = 'db_search.php';/** * @global array list of tables from the current database * but do not clash with $tables coming from db_info.inc.php */$tables_names_only = PMA_DBI_get_tables($GLOBALS['db']);$search_options = array(    '1' => __('at least one of the words'),    '2' => __('all words'),    '3' => __('the exact phrase'),    '4' => __('as regular expression'),);if (empty($_REQUEST['search_option']) || ! is_string($_REQUEST['search_option']) || ! array_key_exists($_REQUEST['search_option'], $search_options)) {    $search_option = 1;    unset($_REQUEST['submit_search']);} else {    $search_option = (int) $_REQUEST['search_option'];    $option_str = $search_options[$_REQUEST['search_option']];}if (empty($_REQUEST['search_str']) || ! is_string($_REQUEST['search_str'])) {    unset($_REQUEST['submit_search']);    $searched = '';} else {    $searched = htmlspecialchars($_REQUEST['search_str']);    // For "as regular expression" (search option 4), we should not treat    // this as an expression that contains a LIKE (second parameter of    // PMA_sqlAddSlashes()).    //    // Usage example: If user is seaching for a literal $ in a regexp search,    // he should enter \$ as the value.    $search_str = PMA_sqlAddSlashes($_REQUEST['search_str'], ($search_option == 4 ? false : true));}$tables_selected = array();if (empty($_REQUEST['table_select']) || ! is_array($_REQUEST['table_select'])) {    unset($_REQUEST['submit_search']);} elseif (! isset($_REQUEST['selectall']) && ! isset($_REQUEST['unselectall'])) {    $tables_selected = array_intersect($_REQUEST['table_select'], $tables_names_only);}if (isset($_REQUEST['selectall'])) {    $tables_selected = $tables_names_only;} elseif (isset($_REQUEST['unselectall'])) {    $tables_selected = array();}if (empty($_REQUEST['field_str']) || ! is_string($_REQUEST['field_str'])) {    unset($field_str);} else {    $field_str = PMA_sqlAddSlashes($_REQUEST['field_str'], true);}/** * Displays top links if we are not in an Ajax request */$sub_part = '';if ( $GLOBALS['is_ajax_request'] != true) {    include './libraries/db_info.inc.php';    echo '<div id="searchresults">';}/** * 1. Main search form has been submitted */if (isset($_REQUEST['submit_search'])) {    /**     * Builds the SQL search query     *     * @todo    can we make use of fulltextsearch IN BOOLEAN MODE for this?     * PMA_backquote     * PMA_DBI_free_result     * PMA_DBI_fetch_assoc     * $GLOBALS['db']     * explode     * count     * strlen     * @param string   the table name     * @param string   restrict the search to this field     * @param string   the string to search     * @param integer  type of search (1 -> 1 word at least, 2 -> all words,     *                                   3 -> exact string, 4 -> regexp)     *     * @return  array    3 SQL querys (for count, display and delete results)     */    function PMA_getSearchSqls($table, $field, $search_str, $search_option)    {        // Statement types        $sqlstr_select = 'SELECT';        $sqlstr_delete = 'DELETE';        // Fields to select        $tblfields = PMA_DBI_get_columns($GLOBALS['db'], $table);        // Table to use        $sqlstr_from = ' FROM ' . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($table);        $search_words    = (($search_option > 2) ? array($search_str) : explode(' ', $search_str));        $like_or_regex   = (($search_option == 4) ? 'REGEXP' : 'LIKE');        $automatic_wildcard   = (($search_option < 3) ? '%' : '');        $fieldslikevalues = array();        foreach ($search_words as $search_word) {            // Eliminates empty values            if (strlen($search_word) === 0) {                continue;            }            $thefieldlikevalue = array();            foreach ($tblfields as $tblfield) {                if (! isset($field) || strlen($field) == 0 || $tblfield['Field'] == $field) {                    // Drizzle has no CONVERT and all text columns are UTF-8                    if (PMA_DRIZZLE) {                        $thefieldlikevalue[] = PMA_backquote($tblfield['Field'])                                            . ' ' . $like_or_regex . ' '                                            . "'" . $automatic_wildcard                                            . $search_word                                            . $automatic_wildcard . "'";                    } else {                        $thefieldlikevalue[] = 'CONVERT(' . PMA_backquote($tblfield['Field']) . ' USING utf8)'                                            . ' ' . $like_or_regex . ' '                                            . "'" . $automatic_wildcard                                            . $search_word                                            . $automatic_wildcard . "'";                    }                }            } // end for            if (count($thefieldlikevalue) > 0) {                $fieldslikevalues[]      = implode(' OR ', $thefieldlikevalue);            }        } // end for        $implode_str  = ($search_option == 1 ? ' OR ' : ' AND ');        if ( empty($fieldslikevalues)) {            // this could happen when the "inside field" does not exist            // in any selected tables            $sqlstr_where = ' WHERE FALSE';        } else {            $sqlstr_where = ' WHERE (' . implode(') ' . $implode_str . ' (', $fieldslikevalues) . ')';        }        unset($fieldslikevalues);        // Builds complete queries        $sql['select_fields'] = $sqlstr_select . ' * ' . $sqlstr_from . $sqlstr_where;        // here, I think we need to still use the COUNT clause, even for        // VIEWs, anyway we have a WHERE clause that should limit results        $sql['select_count']  = $sqlstr_select . ' COUNT(*) AS `count`' . $sqlstr_from . $sqlstr_where;        $sql['delete']        = $sqlstr_delete . $sqlstr_from . $sqlstr_where;        return $sql;    } // end of the "PMA_getSearchSqls()" function    /**     * Displays the results     */    $this_url_params = array(        'db'    => $GLOBALS['db'],        'goto'  => 'db_sql.php',        'pos'   => 0,        'is_js_confirmed' => 0,    );    // Displays search string    echo '<br />' . "\n"        .'<table class="data">' . "\n"        .'<caption class="tblHeaders">' . "\n"        .sprintf(__('Search results for "<i>%s</i>" %s:'),            $searched, $option_str) . "\n"        .'</caption>' . "\n";    $num_search_result_total = 0;    $odd_row = true;    foreach ($tables_selected as $each_table) {        // Gets the SQL statements        $newsearchsqls = PMA_getSearchSqls($each_table, (! empty($field_str) ? $field_str : ''), $search_str, $search_option);        // Executes the "COUNT" statement        $res_cnt = PMA_DBI_fetch_value($newsearchsqls['select_count']);        $num_search_result_total += $res_cnt;        $sql_query .= $newsearchsqls['select_count'];        echo '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">'            .'<td>' . sprintf(_ngettext('%s match inside table <i>%s</i>', '%s matches inside table <i>%s</i>', $res_cnt), $res_cnt,                htmlspecialchars($each_table)) . "</td>\n";        if ($res_cnt > 0) {            $this_url_params['sql_query'] = $newsearchsqls['select_fields'];             $browse_result_path = 'sql.php' . PMA_generate_common_url($this_url_params);             ?>            <td> <a name="browse_search" href="<?php echo $browse_result_path; ?>" onclick="loadResult('<?php echo $browse_result_path ?> ',' <?php echo  $each_table?> ' , '<?php echo PMA_generate_common_url($GLOBALS['db'], $each_table)?>','<?php echo ($GLOBALS['cfg']['AjaxEnable']); ?>');return false;" ><?php echo __('Browse') ?></a>   </td>            <?php            $this_url_params['sql_query'] = $newsearchsqls['delete'];            $delete_result_path = 'sql.php' . PMA_generate_common_url($this_url_params);            ?>            <td> <a name="delete_search" href="<?php echo $delete_result_path; ?>" onclick="deleteResult('<?php echo $delete_result_path ?>' , ' <?php printf(__('Delete the matches for the %s table?'), htmlspecialchars($each_table)); ?>','<?php echo ($GLOBALS['cfg']['AjaxEnable']); ?>');return false;" ><?php echo __('Delete') ?></a>   </td>            <?php         } else {            echo '<td>&nbsp;</td>' . "\n"                .'<td>&nbsp;</td>' . "\n";        }// end if else        $odd_row = ! $odd_row;        echo '</tr>' . "\n";    } // end for    echo '</table>' . "\n";    if (count($tables_selected) > 1) {        echo '<p>' . sprintf(_ngettext('<b>Total:</b> <i>%s</i> match', '<b>Total:</b> <i>%s</i> matches', $num_search_result_total),            $num_search_result_total) . '</p>' . "\n";    }} // end 1./** * If we are in an Ajax request, we need to exit after displaying all the HTML */if ($GLOBALS['is_ajax_request'] == true) {    exit;} else {    echo '</div>';//end searchresults div}/** * 2. Displays the main search form */?><a name="db_search"></a><form id="db_search_form"<?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?> method="post" action="db_search.php" name="db_search"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db']); ?><fieldset>    <legend><?php echo __('Search in database'); ?></legend>    <table class="formlayout">    <tr><td><?php echo __('Words or values to search for (wildcard: "%"):'); ?></td>        <td><input type="text" name="search_str" size="60"                value="<?php echo $searched; ?>" /></td>    </tr>    <tr><td align="right" valign="top">            <?php echo __('Find:'); ?></td>            <td><?php$choices = array(    '1' => __('at least one of the words') . PMA_showHint(__('Words are separated by a space character (" ").')),    '2' => __('all words') . PMA_showHint(__('Words are separated by a space character (" ").')),    '3' => __('the exact phrase'),    '4' => __('as regular expression') . ' ' . PMA_showMySQLDocu('Regexp', 'Regexp'));// 4th parameter set to true to add line breaks// 5th parameter set to false to avoid htmlspecialchars() escaping in the label//  since we have some HTML in some labelsPMA_display_html_radio('search_option', $choices, $search_option, true, false);unset($choices);            ?>            </td>    </tr>    <tr><td align="right" valign="top">            <?php echo __('Inside tables:'); ?></td>        <td rowspan="2"><?phpecho '            <select name="table_select[]" size="6" multiple="multiple">' . "\n";foreach ($tables_names_only as $each_table) {    if (in_array($each_table, $tables_selected)) {        $is_selected = ' selected="selected"';    } else {        $is_selected = '';    }    echo '                <option value="' . htmlspecialchars($each_table) . '"'        . $is_selected . '>'        . str_replace(' ', '&nbsp;', htmlspecialchars($each_table)) . '</option>' . "\n";} // end whileecho '            </select>' . "\n";$alter_select    = '<a href="db_search.php' . PMA_generate_common_url(array_merge($url_params, array('selectall' => 1))) . '#db_search"'    . ' onclick="setSelectOptions(\'db_search\', \'table_select[]\', true); return false;">' . __('Select All') . '</a>'    . '&nbsp;/&nbsp;'    . '<a href="db_search.php' . PMA_generate_common_url(array_merge($url_params, array('unselectall' => 1))) . '#db_search"'    . ' onclick="setSelectOptions(\'db_search\', \'table_select[]\', false); return false;">' . __('Unselect All') . '</a>';?>        </td>    </tr>    <tr><td align="right" valign="bottom">            <?php echo $alter_select; ?></td>    </tr>    <tr><td align="right">            <?php echo __('Inside column:'); ?></td>        <td><input type="text" name="field_str" size="60"                value="<?php echo ! empty($field_str) ? htmlspecialchars($field_str) : ''; ?>" /></td>    </tr>    </table></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_search" value="<?php echo __('Go'); ?>"        id="buttonGo" /></fieldset></form><!-- These two table-image and table-link elements display the table name in browse search results  --><div id='table-info'><a class="item" id="table-link" ></a></div><div id="browse-results"><!-- this browse-results div is used to load the browse and delete results in the db search --></div><br class="clearfloat" /><div id="sqlqueryform"><!-- this sqlqueryform div is used to load the delete form in the db search --></div><!--  toggle query box link--><a id="togglequerybox"></a><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common header for user preferences pages * * @package PhpMyAdmin */if (!defined('PHPMYADMIN')) {    exit;}// show server tabsrequire './libraries/server_links.inc.php';// build user preferences menu$form_param = filter_input(INPUT_GET, 'form');if (! isset($forms[$form_param])) {    $forms_keys = array_keys($forms);    $form_param = array_shift($forms_keys);}$tabs_icons = array(    'Features'    => 'b_tblops.png',    'Sql_queries' => 'b_sql.png',    'Left_frame'  => 'b_select.png',    'Main_frame'  => 'b_props.png',    'Import'      => 'b_import.png',    'Export'      => 'b_export.png');echo '<ul id="topmenu2">';echo PMA_generate_html_tab(    array(        'link' => 'prefs_manage.php',        'text' => __('Manage your settings')    )) . "\n";echo '<li>&nbsp; &nbsp;</li>' . "\n";$script_name = basename($GLOBALS['PMA_PHP_SELF']);foreach (array_keys($forms) as $formset) {    $tab = array(        'link' => 'prefs_forms.php',        'text' => PMA_lang('Form_' . $formset),        'icon' => $tabs_icons[$formset],        'active' => ($script_name == 'prefs_forms.php' && $formset == $form_param));    echo PMA_generate_html_tab($tab, array('form' => $formset)) . "\n";}echo '</ul><div class="clearfloat"></div>';// show "configuration saved" message and reload navigation frame if neededif (!empty($_GET['saved'])) {    $message = PMA_Message::rawSuccess(__('Configuration has been saved'));    $message->display();}/* debug code$arr = ConfigFile::getInstance()->getConfigArray();$arr2 = array();foreach ($arr as $k => $v) {    $arr2[] = "<b>$k</b> " . var_export($v, true);}$arr2 = implode(', ', $arr2);$arr2 .= '<br />Blacklist: ' . (empty($cfg['UserprefsDisallow'])        ? '<i>empty</i>'        : implode(', ', $cfg['UserprefsDisallow']));$msg = PMA_Message::notice('Settings: ' . $arr2);$msg->display();//*/// warn about using session storage for settings$cfgRelation = PMA_getRelationsParam();if (! $cfgRelation['userconfigwork']) {    $msg = __('Your preferences will be saved for current session only. Storing them permanently requires %sphpMyAdmin configuration storage%s.');    $msg = PMA_sanitize(sprintf($msg, '[a@./Documentation.html#linked-tables@_blank]', '[/a]'));    PMA_Message::notice($msg)->display();}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$table = $T;$display_field = $F;if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);    if ($disp) {        if ($display_field != $disp) {            $upd_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' SET display_field = \'' . PMA_sqlAddSlashes($display_field) . '\''                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        } else {            $upd_query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        }    } elseif ($display_field != '') {        $upd_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                   . '(db_name, table_name, display_field) '                   . ' VALUES('                   . '\'' . PMA_sqlAddSlashes($db) . '\','                   . '\'' . PMA_sqlAddSlashes($table) . '\','                   . '\'' . PMA_sqlAddSlashes($display_field) . '\')';    }    if (isset($upd_query)) {        $upd_rs    = PMA_query_as_controluser($upd_query);    }} // end ifheader("Content-Type: text/xml; charset=utf-8");header("Cache-Control: no-cache");die("<root act='save_pos' return=__('Modifications have been saved')></root>");?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * URL/hidden inputs generating. * * @package PhpMyAdmin *//** * Generates text with hidden inputs. * * @param string $db     optional database name *                       (can also be an array of parameters) * @param string $table  optional table name * @param int    $indent indenting level * @param string $skip   do not generate a hidden field for this parameter *                       (can be an array of strings) * * @see PMA_generate_common_url() * * @return  string   string with input fields * * @global  string   the current language * @global  string   the current conversion charset * @global  string   the current connection collation * @global  string   the current server * @global  array    the configuration array * @global  boolean  whether recoding is allowed or not * * @access  public */function PMA_generate_common_hidden_inputs($db = '', $table = '', $indent = 0, $skip = array()){    if (is_array($db)) {        $params  =& $db;        $_indent = empty($table) ? $indent : $table;        $_skip   = empty($indent) ? $skip : $indent;        $indent  =& $_indent;        $skip    =& $_skip;    } else {        $params = array();        if (strlen($db)) {            $params['db'] = $db;        }        if (strlen($table)) {            $params['table'] = $table;        }    }    if (! empty($GLOBALS['server'])        && $GLOBALS['server'] != $GLOBALS['cfg']['ServerDefault']    ) {        $params['server'] = $GLOBALS['server'];    }    if (empty($_COOKIE['pma_lang']) && ! empty($GLOBALS['lang'])) {        $params['lang'] = $GLOBALS['lang'];    }    if (empty($_COOKIE['pma_collation_connection'])        && ! empty($GLOBALS['collation_connection'])    ) {        $params['collation_connection'] = $GLOBALS['collation_connection'];    }    $params['token'] = $_SESSION[' PMA_token '];    if (! is_array($skip)) {        if (isset($params[$skip])) {            unset($params[$skip]);        }    } else {        foreach ($skip as $skipping) {            if (isset($params[$skipping])) {                unset($params[$skipping]);            }        }    }    return PMA_getHiddenFields($params);}/** * create hidden form fields from array with name => value * * <code> * $values = array( *     'aaa' => aaa, *     'bbb' => array( *          'bbb_0', *          'bbb_1', *     ), *     'ccc' => array( *          'a' => 'ccc_a', *          'b' => 'ccc_b', *     ), * ); * echo PMA_getHiddenFields($values); * * // produces: * <input type="hidden" name="aaa" Value="aaa" /> * <input type="hidden" name="bbb[0]" Value="bbb_0" /> * <input type="hidden" name="bbb[1]" Value="bbb_1" /> * <input type="hidden" name="ccc[a]" Value="ccc_a" /> * <input type="hidden" name="ccc[b]" Value="ccc_b" /> * </code> * * @param array  $values hidden values * @param string $pre    prefix * * @return string form fields of type hidden */function PMA_getHiddenFields($values, $pre = ''){    $fields = '';    foreach ($values as $name => $value) {        if (! empty($pre)) {            $name = $pre. '[' . $name . ']';        }        if (is_array($value)) {            $fields .= PMA_getHiddenFields($value, $name);        } else {            // do not generate an ending "\n" because            // PMA_generate_common_hidden_inputs() is sometimes called            // from a JS document.write()            $fields .= '<input type="hidden" name="' . htmlspecialchars($name)                . '" value="' . htmlspecialchars($value) . '" />';        }    }    return $fields;}/** * Generates text with URL parameters. * * <code> * // OLD derepecated style * // note the ? * echo 'script.php?' . PMA_generate_common_url('mysql', 'rights'); * // produces with cookies enabled: * // script.php?db=mysql&amp;table=rights * // with cookies disabled: * // script.php?server=1&amp;lang=en&amp;db=mysql&amp;table=rights * * // NEW style * $params['myparam'] = 'myvalue'; * $params['db']      = 'mysql'; * $params['table']   = 'rights'; * // note the missing ? * echo 'script.php' . PMA_generate_common_url($params); * // produces with cookies enabled: * // script.php?myparam=myvalue&amp;db=mysql&amp;table=rights * // with cookies disabled: * // script.php?server=1&amp;lang=en&amp;myparam=myvalue&amp;db=mysql&amp;table=rights * * // note the missing ? * echo 'script.php' . PMA_generate_common_url(); * // produces with cookies enabled: * // script.php * // with cookies disabled: * // script.php?server=1&amp;lang=en * </code> * * @param mixed  assoc. array with url params or optional string with database name *               if first param is an array there is also an ? prefixed to the url * * @param string - if first param is array: 'html' to use htmlspecialchars() *               on the resulting URL (for a normal URL displayed in HTML) *               or something else to avoid using htmlspecialchars() (for *               a URL sent via a header); if not set,'html' is assumed *               - if first param is not array:  optional table name * * @param string - if first param is array: optional character to *               use instead of '?' *               - if first param is not array: optional character to use *               instead of '&amp;' for dividing URL parameters * * @return  string   string with URL parameters * @access  public */function PMA_generate_common_url(){    $args = func_get_args();    if (isset($args[0]) && is_array($args[0])) {        // new style        $params = $args[0];        if (isset($args[1])) {            $encode = $args[1];        } else {            $encode = 'html';        }        if (isset($args[2])) {            $questionmark = $args[2];        } else {            $questionmark = '?';        }    } else {        // old style        if (PMA_isValid($args[0])) {            $params['db'] = $args[0];        }        if (PMA_isValid($args[1])) {            $params['table'] = $args[1];        }        if (isset($args[2]) && $args[2] !== '&amp;') {            $encode = 'text';        } else {            $encode = 'html';        }        $questionmark = '';    }    $separator = PMA_get_arg_separator();    if (isset($GLOBALS['server'])        && $GLOBALS['server'] != $GLOBALS['cfg']['ServerDefault']        // avoid overwriting when creating navi panel links to servers        && ! isset($params['server'])    ) {        $params['server'] = $GLOBALS['server'];    }    if (empty($_COOKIE['pma_lang']) && ! empty($GLOBALS['lang'])) {        $params['lang'] = $GLOBALS['lang'];    }    if (empty($_COOKIE['pma_collation_connection'])        && ! empty($GLOBALS['collation_connection'])    ) {        $params['collation_connection'] = $GLOBALS['collation_connection'];    }    if (isset($_SESSION[' PMA_token '])) {        $params['token'] = $_SESSION[' PMA_token '];    }    if (empty($params)) {        return '';    }    $query = $questionmark . http_build_query($params, null, $separator);    if ($encode === 'html') {        $query = htmlspecialchars($query);    }    return $query;}/** * Returns url separator * * extracted from arg_separator.input as set in php.ini * we do not use arg_separator.output to avoid problems with &amp; and & * * @param string $encode whether to encode separator or not, * currently 'none' or 'html' * * @return  string  character used for separating url parts usally ; or & * @access  public */function PMA_get_arg_separator($encode = 'none'){    static $separator = null;    if (null === $separator) {        // use seperators defined by php, but prefer ';'        // as recommended by W3C        $php_arg_separator_input = ini_get('arg_separator.input');        if (strpos($php_arg_separator_input, ';') !== false) {            $separator = ';';        } elseif (strlen($php_arg_separator_input) > 0) {            $separator = $php_arg_separator_input{0};        } else {            $separator = '&';        }    }    switch ($encode) {    case 'html':        return htmlentities($separator);        break;    case 'text' :    case 'none' :    default :        return $separator;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_image_jpeg__link_info(){    return array(        'info' => __('Displays a link to download this image.'),        );}/** * */function PMA_transformation_image_jpeg__link($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    $transform_options = array ('string' => '<a href="transformation_wrapper.php' . $options['wrapper_link'] . '" alt="[__BUFFER__]">[BLOB]</a>');    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';extract($_POST, EXTR_SKIP);extract($_GET, EXTR_SKIP);$die_save_pos = 0;require_once 'pmd_save_pos.php';list($DB1, $T1) = explode(".", $T1);list($DB2, $T2) = explode(".", $T2);$tables = PMA_DBI_get_tables_full($db, $T1);$type_T1 = strtoupper($tables[$T1]['ENGINE']);$tables = PMA_DBI_get_tables_full($db, $T2);$type_T2 = strtoupper($tables[$T2]['ENGINE']);$try_to_delete_internal_relation = false;if (PMA_foreignkey_supported($type_T1) && PMA_foreignkey_supported($type_T2) && $type_T1 == $type_T2) {    // InnoDB    $existrel_foreign = PMA_getForeigners($DB2, $T2, '', 'foreign');    if (isset($existrel_foreign[$F2]['constraint'])) {        $upd_query  = 'ALTER TABLE ' . PMA_backquote($T2)                  . ' DROP FOREIGN KEY '                  . PMA_backquote($existrel_foreign[$F2]['constraint']);        $upd_rs     = PMA_DBI_query($upd_query);    } else {        // there can be an internal relation even if InnoDB        $try_to_delete_internal_relation = true;    }} else {    $try_to_delete_internal_relation = true;}if ($try_to_delete_internal_relation) {    // internal relations    PMA_query_as_controluser(        'DELETE FROM '        . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'        . $cfg['Server']['relation'].' WHERE '        . 'master_db = \'' . PMA_sqlAddSlashes($DB2) . '\''        . ' AND master_table = \'' . PMA_sqlAddSlashes($T2) . '\''        . ' AND master_field = \'' . PMA_sqlAddSlashes($F2) . '\''        . ' AND foreign_db = \'' . PMA_sqlAddSlashes($DB1) . '\''        . ' AND foreign_table = \'' . PMA_sqlAddSlashes($T1) . '\''        . ' AND foreign_field = \'' . PMA_sqlAddSlashes($F1) . '\'',        false,        PMA_DBI_QUERY_STORE    );}PMD_return_upd(1, __('Relation deleted'));function PMD_return_upd($b, $ret){    global $K;    header("Content-Type: text/xml; charset=utf-8");    header("Cache-Control: no-cache");    die('<root act="relation_upd" return="'.$ret.'" b="'.$b.'" K="'.$K.'"></root>');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form edit view * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/form_processing.lib.php';require './libraries/config/setup.forms.php';$formset_id = filter_input(INPUT_GET, 'formset');$mode = filter_input(INPUT_GET, 'mode');if (! isset($forms[$formset_id])) {    die(__('Incorrect formset, check $formsets array in setup/frames/form.inc.php'));}if (isset($GLOBALS['strConfigFormset_' . $formset_id])) {    echo '<h2>' . $GLOBALS['strConfigFormset_' . $formset_id] . '</h2>';}$form_display = new FormDisplay();foreach ($forms[$formset_id] as $form_name => $form) {    $form_display->registerForm($form_name, $form);}process_formset($form_display);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handle row specifc actions like edit, delete, export * * @package PhpMyAdmin *//** * do not globalize/import request variables * can only be enabled if all included files are switched superglobals too * but leave this here to show that this file is 'superglobalized'define('PMA_NO_VARIABLES_IMPORT', true); *//** * */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';/** * No rows were selected => show again the query and tell that user. */if (! PMA_isValid($_REQUEST['rows_to_delete'], 'array') && ! isset($_REQUEST['mult_btn'])) {    $disp_message = __('No rows selected');    $disp_query = '';    include './sql.php';    include './libraries/footer.inc.php';}if (isset($_REQUEST['submit_mult'])) {    $submit_mult = $_REQUEST['submit_mult'];// workaround for IE problem:} elseif (isset($_REQUEST['submit_mult_delete_x'])) {    $submit_mult = 'row_delete';} elseif (isset($_REQUEST['submit_mult_change_x'])) {    $submit_mult = 'row_edit';} elseif (isset($_REQUEST['submit_mult_export_x'])) {    $submit_mult = 'row_export';}// If the 'Ask for confirmation' button was pressed, this can only come// from 'delete' mode, so we set it straight away.if (isset($_REQUEST['mult_btn'])) {    $submit_mult = 'row_delete';}switch($submit_mult) {    case 'row_delete':    case 'row_edit':    case 'row_export':        // leave as is        break;    case 'export':        $submit_mult = 'row_export';        break;    case 'delete':        $submit_mult = 'row_delete';        break;    default:    case 'edit':        $submit_mult = 'row_edit';        break;}if (!empty($submit_mult)) {    switch($submit_mult) {        case 'row_edit':            // As we got the rows to be edited from the            // 'rows_to_delete' checkbox, we use the index of it as the            // indicating WHERE clause. Then we build the array which is used            // for the tbl_change.php script.            $where_clause = array();            foreach ($_REQUEST['rows_to_delete'] as $i_where_clause => $del_query) {                $where_clause[] = urldecode($i_where_clause);            }            $active_page = 'tbl_change.php';            include './tbl_change.php';            break;        case 'row_export':            // Needed to allow SQL export            $single_table = true;            // As we got the rows to be exported from the            // 'rows_to_delete' checkbox, we use the index of it as the            // indicating WHERE clause. Then we build the array which is used            // for the tbl_change.php script.            $where_clause = array();            foreach ($_REQUEST['rows_to_delete'] as $i_where_clause => $del_query) {                $where_clause[] = urldecode($i_where_clause);            }            $active_page = 'tbl_export.php';            include './tbl_export.php';            break;        case 'row_delete':        default:            $action = 'tbl_row_action.php';            $err_url = 'tbl_row_action.php' . PMA_generate_common_url($GLOBALS['url_params']);            if (! isset($_REQUEST['mult_btn'])) {                $original_sql_query = $sql_query;                if (! empty($url_query)) {                    $original_url_query = $url_query;                }            }            include './libraries/mult_submits.inc.php';            $_url_params = $GLOBALS['url_params'];            $_url_params['goto'] = 'tbl_sql.php';            $url_query = PMA_generate_common_url($_url_params);            /**             * Show result of multi submit operation             */            // sql_query is not set when user does not confirm multi-delete            if ((!empty($submit_mult) || isset($_REQUEST['mult_btn'])) && ! empty($sql_query)) {                $disp_message = __('Your SQL query has been executed successfully');                $disp_query = $sql_query;            }            if (isset($original_sql_query)) {                $sql_query = $original_sql_query;            }            if (isset($original_url_query)) {                $url_query = $original_url_query;            }            // this is because sql.php could call tbl_structure            // which would think it needs to call mult_submits.inc.php:            unset($submit_mult, $_REQUEST['mult_btn']);            $active_page = 'sql.php';            include './sql.php';            /**             * Displays the footer             */            include './libraries/footer.inc.php';            break;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * Load BDB class. */require_once './libraries/engines/bdb.lib.php';/** * This is same as BDB. * @package PhpMyAdmin-Engines */class PMA_StorageEngine_berkeleydb extends PMA_StorageEngine_bdb{}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Theme information * * @package PhpMyAdmin-theme * @subpackage pmahomme *//** * If you have problems or questions about this theme email mikehomme@users.sourceforge.net */$theme_name = 'pmahomme';$theme_full_version = '1.1';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_bdb extends PMA_StorageEngine{    /**     * @return  array   variable names     */    function getVariables()    {        return array(            'version_bdb' => array(                'title' => __('Version information'),            ),            'bdb_cache_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'bdb_home' => array(            ),            'bdb_log_buffer_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'bdb_logdir' => array(            ),            'bdb_max_lock' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'bdb_shared_data' => array(            ),            'bdb_tmpdir' => array(            ),            'bdb_data_direct' => array(            ),            'bdb_lock_detect' => array(            ),            'bdb_log_direct' => array(            ),            'bdb_no_recover' => array(            ),            'bdb_no_sync' => array(            ),            'skip_sync_bdb_logs' => array(            ),            'sync_bdb_logs' => array(            ),        );    }    /**     * @return string   LIKE pattern     */    function getVariablesLikePattern()    {        return '%bdb%';    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'bdb';    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * This class tracks changes on databases, tables and views. * For more information please see phpMyAdmin/Documentation.html * * @package PhpMyAdmin * * @todo use stristr instead of strstr */class PMA_Tracker{    /**     * Whether tracking is ready.     */    static protected $enabled = false;    /**     * Defines the internal PMA table which contains tracking data.     *     * @access  protected     * @var string     */    static protected $pma_table;    /**     * Defines the usage of DROP TABLE statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_table;    /**     * Defines the usage of DROP VIEW statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_view;    /**     * Defines the usage of DROP DATABASE statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_database;    /**     * Defines auto-creation of tracking versions.     *     * @var boolean     */    static protected $version_auto_create;    /**     * Defines the default set of tracked statements.     *     * @var string     */    static protected $default_tracking_set;    /**     * Flags copied from `tracking` column definition in `pma_tracking` table.     * Used for column type conversion in Drizzle.     *     * @var array     */    static private $tracking_set_flags = array('UPDATE','REPLACE','INSERT','DELETE','TRUNCATE','CREATE DATABASE',            'ALTER DATABASE','DROP DATABASE','CREATE TABLE','ALTER TABLE','RENAME TABLE','DROP TABLE','CREATE INDEX',            'DROP INDEX','CREATE VIEW','ALTER VIEW','DROP VIEW');    /**     * Initializes settings. See phpMyAdmin/Documentation.html.     *     * @static     *     * @return nothing     */    static protected function init()    {        self::$pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) .".".                           PMA_backquote($GLOBALS['cfg']['Server']['tracking']);        self::$add_drop_table = $GLOBALS['cfg']['Server']['tracking_add_drop_table'];        self::$add_drop_view = $GLOBALS['cfg']['Server']['tracking_add_drop_view'];        self::$add_drop_database = $GLOBALS['cfg']['Server']['tracking_add_drop_database'];        self::$default_tracking_set = $GLOBALS['cfg']['Server']['tracking_default_statements'];        self::$version_auto_create = $GLOBALS['cfg']['Server']['tracking_version_auto_create'];    }    /**     * Actually enables tracking. This needs to be done after all     * underlaying code is initialized.     *     * @static     *     * @return nothing     */    static public function enable()    {        self::$enabled = true;    }    /**     * Gets the on/off value of the Tracker module, starts initialization.     *     * @static     *     * @return boolean (true=on|false=off)     */    static public function isActive()    {        if (! self::$enabled) {            return false;        }        /* We need to avoid attempt to track any queries from PMA_getRelationsParam */        self::$enabled = false;        $cfgRelation = PMA_getRelationsParam();        /* Restore original state */        self::$enabled = true;        if (! $cfgRelation['trackingwork']) {            return false;        }        self::init();        if (isset(self::$pma_table)) {            return true;        } else {            return false;        }    }    /**     * Parses the name of a table from a SQL statement substring.     *     * @param string $string part of SQL statement     *     * @static     *     * @return string the name of table     */    static protected function getTableName($string)    {        if (strstr($string, '.')) {            $temp = explode('.', $string);            $tablename = $temp[1];        } else {            $tablename = $string;        }        $str = explode("\n", $tablename);        $tablename = $str[0];        $tablename = str_replace(';', '', $tablename);        $tablename = str_replace('`', '', $tablename);        $tablename = trim($tablename);        return $tablename;    }    /**     * Gets the tracking status of a table, is it active or deactive ?     *     * @param string $dbname    name of database     * @param string $tablename name of table     *     * @static     *     * @return boolean true or false     */    static public function isTracked($dbname, $tablename)    {        if (! self::$enabled) {            return false;        }        /* We need to avoid attempt to track any queries from PMA_getRelationsParam */        self::$enabled = false;        $cfgRelation = PMA_getRelationsParam();        /* Restore original state */        self::$enabled = true;        if (! $cfgRelation['trackingwork']) {            return false;        }        $sql_query = " SELECT tracking_active FROM " . self::$pma_table .        " WHERE db_name = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND table_name = '" . PMA_sqlAddSlashes($tablename) . "' " .        " ORDER BY version DESC";        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        if (isset($row['tracking_active']) && $row['tracking_active'] == 1) {            return true;        } else {            return false;        }    }    /**     * Returns the comment line for the log.     *     * @return string Comment, contains date and username     */    static public function getLogComment()    {        $date = date('Y-m-d H:i:s');        return "# log " . $date . " " . $GLOBALS['cfg']['Server']['user'] . "\n";    }    /**     * Creates tracking version of a table / view     * (in other words: create a job to track future changes on the table).     *     * @param string $dbname       name of database     * @param string $tablename    name of table     * @param string $version      version     * @param string $tracking_set set of tracking statements     * @param bool   $is_view      if table is a view     *     * @static     *     * @return int result of version insertion     */    static public function createVersion($dbname, $tablename, $version, $tracking_set = '', $is_view = false)    {        global $sql_backquotes;        if ($tracking_set == '') {            $tracking_set = self::$default_tracking_set;        }        include_once './libraries/export/sql.php';        $sql_backquotes = true;        $date = date('Y-m-d H:i:s');        // Get data definition snapshot of table        $columns = PMA_DBI_get_columns($dbname, $tablename, null, true);        // int indices to reduce size        $columns = array_values($columns);        // remove Privileges to reduce size        for ($i = 0; $i < count($columns); $i++) {            unset($columns[$i]['Privileges']);        }        $indexes = PMA_DBI_get_table_indexes($dbname, $tablename);        $snapshot = array('COLUMNS' => $columns, 'INDEXES' => $indexes);        $snapshot = serialize($snapshot);        // Get DROP TABLE / DROP VIEW and CREATE TABLE SQL statements        $sql_backquotes = true;        $create_sql  = "";        if (self::$add_drop_table == true && $is_view == false) {            $create_sql .= self::getLogComment() .                           'DROP TABLE IF EXISTS ' . PMA_backquote($tablename) . ";\n";        }        if (self::$add_drop_view == true && $is_view == true) {            $create_sql .= self::getLogComment() .                           'DROP VIEW IF EXISTS ' . PMA_backquote($tablename) . ";\n";        }        $create_sql .= self::getLogComment() .                       PMA_getTableDef($dbname, $tablename, "\n", "");        // Save version        $sql_query = "/*NOTRACK*/\n" .        "INSERT INTO" . self::$pma_table . " (" .        "db_name, " .        "table_name, " .        "version, " .        "date_created, " .        "date_updated, " .        "schema_snapshot, " .        "schema_sql, " .        "data_sql, " .        "tracking " .        ") " .        "values (        '" . PMA_sqlAddSlashes($dbname) . "',        '" . PMA_sqlAddSlashes($tablename) . "',        '" . PMA_sqlAddSlashes($version) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($snapshot) . "',        '" . PMA_sqlAddSlashes($create_sql) . "',        '" . PMA_sqlAddSlashes("\n") . "',        '" . PMA_sqlAddSlashes(self::transformTrackingSet($tracking_set)) . "' )";        $result = PMA_query_as_controluser($sql_query);        if ($result) {            // Deactivate previous version            self::deactivateTracking($dbname, $tablename, ($version - 1));        }        return $result;    }    /**     * Removes all tracking data for a table     *     * @param string $dbname    name of database     * @param string $tablename name of table     *     * @static     *     * @return int result of version insertion     */    static public function deleteTracking($dbname, $tablename)    {        $sql_query = "/*NOTRACK*/\n" .        "DELETE FROM " . self::$pma_table . " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "'";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Creates tracking version of a database     * (in other words: create a job to track future changes on the database).     *     * @param string $dbname       name of database     * @param string $version      version     * @param string $query        query     * @param string $tracking_set set of tracking statements     *     * @static     *     * @return int result of version insertion     */    static public function createDatabaseVersion($dbname, $version, $query, $tracking_set = 'CREATE DATABASE,ALTER DATABASE,DROP DATABASE')    {        $date = date('Y-m-d H:i:s');        if ($tracking_set == '') {            $tracking_set = self::$default_tracking_set;        }        include_once './libraries/export/sql.php';        $create_sql  = "";        if (self::$add_drop_database == true) {            $create_sql .= self::getLogComment() .                           'DROP DATABASE IF EXISTS ' . PMA_backquote($dbname) . ";\n";        }        $create_sql .= self::getLogComment() . $query;        // Save version        $sql_query = "/*NOTRACK*/\n" .        "INSERT INTO" . self::$pma_table . " (" .        "db_name, " .        "table_name, " .        "version, " .        "date_created, " .        "date_updated, " .        "schema_snapshot, " .        "schema_sql, " .        "data_sql, " .        "tracking " .        ") " .        "values (        '" . PMA_sqlAddSlashes($dbname) . "',        '" . PMA_sqlAddSlashes('') . "',        '" . PMA_sqlAddSlashes($version) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes('') . "',        '" . PMA_sqlAddSlashes($create_sql) . "',        '" . PMA_sqlAddSlashes("\n") . "',        '" . PMA_sqlAddSlashes(self::transformTrackingSet($tracking_set)) . "' )";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Changes tracking of a table.     *     * @param string  $dbname    name of database     * @param string  $tablename name of table     * @param string  $version   version     * @param integer $new_state the new state of tracking     *     * @static     *     * @return int result of SQL query     */    static private function _changeTracking($dbname, $tablename, $version, $new_state)    {        $sql_query = " UPDATE " . self::$pma_table .        " SET `tracking_active` = '" . $new_state . "' " .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' " .        " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Changes tracking data of a table.     *     * @param string       $dbname    name of database     * @param string       $tablename name of table     * @param string       $version   version     * @param string       $type      type of data(DDL || DML)     * @param string|array $new_data  the new tracking data     *     * @static     *     * @return bool result of change     */    static public function changeTrackingData($dbname, $tablename, $version, $type, $new_data)    {        if ($type == 'DDL') {            $save_to = 'schema_sql';        } elseif ($type == 'DML') {            $save_to = 'data_sql';        } else {            return false;        }        $date  = date('Y-m-d H:i:s');        $new_data_processed = '';        if (is_array($new_data)) {            foreach ($new_data as $data) {                $new_data_processed .= '# log ' . $date . ' ' . $data['username']                    . PMA_sqlAddSlashes($data['statement']) . "\n";            }        } else {            $new_data_processed = $new_data;        }        $sql_query = " UPDATE " . self::$pma_table .        " SET `" . $save_to . "` = '" . $new_data_processed . "' " .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' " .        " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Activates tracking of a table.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version     *     * @static     *     * @return int result of SQL query     */    static public function activateTracking($dbname, $tablename, $version)    {        return self::_changeTracking($dbname, $tablename, $version, 1);    }    /**     * Deactivates tracking of a table.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version     *     * @static     *     * @return int result of SQL query     */    static public function deactivateTracking($dbname, $tablename, $version)    {        return self::_changeTracking($dbname, $tablename, $version, 0);    }    /**     * Gets the newest version of a tracking job     * (in other words: gets the HEAD version).     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $statement tracked statement     *     * @static     *     * @return int (-1 if no version exists | >  0 if a version exists)     */    static public function getVersion($dbname, $tablename, $statement = null)    {        $sql_query = " SELECT MAX(version) FROM " . self::$pma_table .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' ";        if ($statement != "") {            $sql_query .= PMA_DRIZZLE                ? ' AND tracking & ' . self::transformTrackingSet($statement) . ' <> 0'                : " AND FIND_IN_SET('" . $statement . "',tracking) > 0" ;        }        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        return isset($row[0])            ? $row[0]            : -1;    }    /**     * Gets the record of a tracking job.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version number     *     * @static     *     * @return mixed record DDM log, DDL log, structure snapshot, tracked statements.     */    static public function getTrackedData($dbname, $tablename, $version)    {        if (! isset(self::$pma_table)) {            self::init();        }        $sql_query = " SELECT * FROM " . self::$pma_table .            " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' ";        if (! empty($tablename)) {            $sql_query .= " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) ."' ";        }        $sql_query .= " AND `version` = '" . PMA_sqlAddSlashes($version) ."' ".                     " ORDER BY `version` DESC LIMIT 1";        $mixed = PMA_DBI_fetch_assoc(PMA_query_as_controluser($sql_query));        // Parse log        $log_schema_entries = explode('# log ',  $mixed['schema_sql']);        $log_data_entries   = explode('# log ',  $mixed['data_sql']);        $ddl_date_from = $date = date('Y-m-d H:i:s');        $ddlog = array();        $i = 0;        // Iterate tracked data definition statements        // For each log entry we want to get date, username and statement        foreach ($log_schema_entries as $log_entry) {            if (trim($log_entry) != '') {                $date      = substr($log_entry, 0, 19);                $username  = substr($log_entry, 20, strpos($log_entry, "\n") - 20);                if ($i == 0) {                    $ddl_date_from = $date;                }                $statement = rtrim(strstr($log_entry, "\n"));                $ddlog[] = array( 'date' => $date,                                  'username'=> $username,                                  'statement' => $statement );                $i++;            }        }        $date_from = $ddl_date_from;        $date_to   = $ddl_date_to = $date;        $dml_date_from = $date_from;        $dmlog = array();        $i = 0;        // Iterate tracked data manipulation statements        // For each log entry we want to get date, username and statement        foreach ($log_data_entries as $log_entry) {            if (trim($log_entry) != '') {                $date      = substr($log_entry, 0, 19);                $username  = substr($log_entry, 20, strpos($log_entry, "\n") - 20);                if ($i == 0) {                    $dml_date_from = $date;                }                $statement = rtrim(strstr($log_entry, "\n"));                $dmlog[] = array( 'date' => $date,                                  'username' => $username,                                  'statement' => $statement );                $i++;            }        }        $dml_date_to = $date;        // Define begin and end of date range for both logs        if (strtotime($ddl_date_from) <= strtotime($dml_date_from)) {            $data['date_from'] = $ddl_date_from;        } else {            $data['date_from'] = $dml_date_from;        }        if (strtotime($ddl_date_to) >= strtotime($dml_date_to)) {            $data['date_to'] = $ddl_date_to;        } else {            $data['date_to'] = $dml_date_to;        }        $data['ddlog']           = $ddlog;        $data['dmlog']           = $dmlog;        $data['tracking']        = self::transformTrackingSet($mixed['tracking']);        $data['schema_snapshot'] = $mixed['schema_snapshot'];        return $data;    }    /**     * Parses a query. Gets     *  - statement identifier (UPDATE, ALTER TABLE, ...)     *  - type of statement, is it part of DDL or DML ?     *  - tablename     *     * @param string $query query     *     * @static     * @todo: using PMA SQL Parser when possible     * @todo: support multi-table/view drops     *     * @return mixed Array containing identifier, type and tablename.     *     */    static public function parseQuery($query)    {        // Usage of PMA_SQP does not work here        //        // require_once("libraries/sqlparser.lib.php");        // $parsed_sql = PMA_SQP_parse($query);        // $sql_info = PMA_SQP_analyze($parsed_sql);        $query = str_replace("\n", " ", $query);        $query = str_replace("\r", " ", $query);        $query = trim($query);        $query = trim($query, ' -');        $tokens = explode(" ", $query);        foreach ($tokens as $key => $value) {            $tokens[$key] = strtoupper($value);        }        // Parse USE statement, need it for SQL dump imports        if (substr($query, 0, 4) == 'USE ') {            $prefix = explode('USE ', $query);            $GLOBALS['db'] = self::getTableName($prefix[1]);        }        /*         * DDL statements         */        $result['type']         = 'DDL';        // Parse CREATE VIEW statement        if (in_array('CREATE', $tokens) == true            && in_array('VIEW', $tokens) == true            && in_array('AS', $tokens) == true        ) {            $result['identifier'] = 'CREATE VIEW';            $index = array_search('VIEW', $tokens);            $result['tablename'] = strtolower(self::getTableName($tokens[$index + 1]));        }        // Parse ALTER VIEW statement        if (in_array('ALTER', $tokens) == true            && in_array('VIEW', $tokens) == true            && in_array('AS', $tokens) == true            && ! isset($result['identifier'])        ) {            $result['identifier'] = 'ALTER VIEW';            $index = array_search('VIEW', $tokens);            $result['tablename'] = strtolower(self::getTableName($tokens[$index + 1]));        }        // Parse DROP VIEW statement        if (! isset($result['identifier']) && substr($query, 0, 10) == 'DROP VIEW ') {            $result['identifier'] = 'DROP VIEW';            $prefix  = explode('DROP VIEW ', $query);            $str = strstr($prefix[1], 'IF EXISTS');            if ($str == false ) {                $str = $prefix[1];            }            $result['tablename'] = self::getTableName($str);        }        // Parse CREATE DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 15) == 'CREATE DATABASE') {            $result['identifier'] = 'CREATE DATABASE';            $str = str_replace('CREATE DATABASE', '', $query);            $str = str_replace('IF NOT EXISTS', '', $str);            $prefix = explode('DEFAULT ', $str);            $result['tablename'] = '';            $GLOBALS['db'] = self::getTableName($prefix[0]);        }        // Parse ALTER DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 14) == 'ALTER DATABASE') {            $result['identifier'] = 'ALTER DATABASE';            $result['tablename'] = '';        }        // Parse DROP DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 13) == 'DROP DATABASE') {            $result['identifier'] = 'DROP DATABASE';            $str = str_replace('DROP DATABASE', '', $query);            $str = str_replace('IF EXISTS', '', $str);            $GLOBALS['db'] = self::getTableName($str);            $result['tablename'] = '';        }        // Parse CREATE TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 12) == 'CREATE TABLE' ) {            $result['identifier'] = 'CREATE TABLE';            $query   = str_replace('IF NOT EXISTS', '', $query);            $prefix  = explode('CREATE TABLE ', $query);            $suffix  = explode('(', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse ALTER TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 12) == 'ALTER TABLE ') {            $result['identifier'] = 'ALTER TABLE';            $prefix  = explode('ALTER TABLE ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename']  = self::getTableName($suffix[0]);        }        // Parse DROP TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 11) == 'DROP TABLE ') {            $result['identifier'] = 'DROP TABLE';            $prefix  = explode('DROP TABLE ', $query);            $str = strstr($prefix[1], 'IF EXISTS');            if ($str == false ) {                $str = $prefix[1];            }            $result['tablename'] = self::getTableName($str);        }        // Parse CREATE INDEX statement        if (! isset($result['identifier'])            && (substr($query, 0, 12) == 'CREATE INDEX'            || substr($query, 0, 19) == 'CREATE UNIQUE INDEX'            || substr($query, 0, 20) == 'CREATE SPATIAL INDEX')        ) {             $result['identifier'] = 'CREATE INDEX';             $prefix = explode('ON ', $query);             $suffix = explode('(', $prefix[1]);             $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse DROP INDEX statement        if (! isset($result['identifier']) && substr($query, 0, 10) == 'DROP INDEX') {             $result['identifier'] = 'DROP INDEX';             $prefix = explode('ON ', $query);             $result['tablename'] = self::getTableName($prefix[1]);        }        // Parse RENAME TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 13) == 'RENAME TABLE ') {            $result['identifier'] = 'RENAME TABLE';            $prefix = explode('RENAME TABLE ', $query);            $names  = explode(' TO ', $prefix[1]);            $result['tablename']      = self::getTableName($names[0]);            $result["tablename_after_rename"]  = self::getTableName($names[1]);        }        /*         * DML statements         */        if (! isset($result['identifier'])) {            $result["type"]       = 'DML';        }        // Parse UPDATE statement        if (! isset($result['identifier']) && substr($query, 0, 6) == 'UPDATE') {            $result['identifier'] = 'UPDATE';            $prefix  = explode('UPDATE ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse INSERT INTO statement        if (! isset($result['identifier']) && substr($query, 0, 11) == 'INSERT INTO') {            $result['identifier'] = 'INSERT';            $prefix  = explode('INSERT INTO', $query);            $suffix  = explode('(', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse DELETE statement        if (! isset($result['identifier']) && substr($query, 0, 6) == 'DELETE') {            $result['identifier'] = 'DELETE';            $prefix  = explode('FROM ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse TRUNCATE statement        if (! isset($result['identifier']) && substr($query, 0, 8) == 'TRUNCATE') {            $result['identifier'] = 'TRUNCATE';            $prefix  = explode('TRUNCATE', $query);            $result['tablename'] = self::getTableName($prefix[1]);        }        return $result;    }    /**     * Analyzes a given SQL statement and saves tracking data.     *     * @param string $query a SQL query     *     * @static     *     * @return nothing     */    static public function handleQuery($query)    {        // If query is marked as untouchable, leave        if (strstr($query, "/*NOTRACK*/")) {            return;        }        if (! (substr($query, -1) == ';')) {            $query = $query . ";\n";        }        // Get some information about query        $result = self::parseQuery($query);        // Get database name        $dbname = trim($GLOBALS['db'], '`');        // $dbname can be empty, for example when coming from Synchronize        // and this is a query for the remote server        if (empty($dbname)) {            return;        }        // If we found a valid statement        if (isset($result['identifier'])) {            $version = self::getVersion($dbname, $result['tablename'], $result['identifier']);            // If version not exists and auto-creation is enabled            if (self::$version_auto_create == true                && self::isTracked($dbname, $result['tablename']) == false                && $version == -1            ) {                // Create the version                switch ($result['identifier']) {                case 'CREATE TABLE':                    self::createVersion($dbname, $result['tablename'], '1');                    break;                case 'CREATE VIEW':                    self::createVersion($dbname, $result['tablename'], '1', '', true);                    break;                case 'CREATE DATABASE':                    self::createDatabaseVersion($dbname, '1', $query);                    break;                } // end switch            }            // If version exists            if (self::isTracked($dbname, $result['tablename']) && $version != -1) {                if ($result['type'] == 'DDL') {                    $save_to = 'schema_sql';                } elseif ($result['type'] == 'DML') {                    $save_to = 'data_sql';                } else {                    $save_to = '';                }                $date  = date('Y-m-d H:i:s');                // Cut off `dbname`. from query                $query = preg_replace('/`' . $dbname . '`\s?\./', '', $query);                // Add log information                $query = self::getLogComment() . $query ;                // Mark it as untouchable                $sql_query = " /*NOTRACK*/\n" .                " UPDATE " . self::$pma_table .                " SET " . PMA_backquote($save_to) ." = CONCAT( " . PMA_backquote($save_to) . ",'\n"                . PMA_sqlAddSlashes($query) . "') ," . " `date_updated` = '" . $date . "' ";                // If table was renamed we have to change the tablename attribute in pma_tracking too                if ($result['identifier'] == 'RENAME TABLE') {                    $sql_query .= ', `table_name` = \'' . PMA_sqlAddSlashes($result['tablename_after_rename']) . '\' ';                }                // Save the tracking information only for                //     1. the database                //     2. the table / view                //     3. the statements                // we want to track                $sql_query .=                " WHERE FIND_IN_SET('" . $result['identifier'] . "',tracking) > 0" .                " AND `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .                " AND `table_name` = '" . PMA_sqlAddSlashes($result['tablename']) . "' " .                " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";                $result = PMA_query_as_controluser($sql_query);            }        }    }    /**     * Transforms tracking set for Drizzle, which has no SET type     *     * Converts int<>string for Drizzle, does nothing for MySQL     *     * @param int|string $tracking_set     * @return int|string     */    static private function transformTrackingSet($tracking_set)    {        if (!PMA_DRIZZLE) {            return $tracking_set;        }        // init conversion array (key 3 doesn't exist in calculated array)        if (isset(self::$tracking_set_flags[3])) {            // initialize flags            $set = self::$tracking_set_flags;            $array = array();            for ($i = 0; $i < count($set); $i++) {                $flag = 1 << $i;                $array[$flag] = $set[$i];                $array[$set[$i]] = $flag;            }            self::$tracking_set_flags = $array;        }        if (is_numeric($tracking_set)) {            // int > string conversion            $aflags = array();            // count/2 - conversion table has both int > string and string > int values            for ($i = 0; $i < count(self::$tracking_set_flags)/2; $i++) {                $flag = 1 << $i;                if ($tracking_set & $flag) {                    $aflags[] = self::$tracking_set_flags[$flag];                }            }            $flags = implode(',', $aflags);        } else {            // string > int conversion            $flags = 0;            foreach (explode(',', $tracking_set) as $strflag) {                if ($strflag == '') {                    continue;                }                $flags |= self::$tracking_set_flags[$strflag];            }        }        return $flags;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * User preferences management page * * @package PhpMyAdmin *//** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';require_once './libraries/user_preferences.lib.php';require_once './libraries/config/config_functions.lib.php';require_once './libraries/config/messages.inc.php';require_once './libraries/config/ConfigFile.class.php';require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require './libraries/config/user_preferences.forms.php';PMA_userprefs_pageinit();$error = '';if (isset($_POST['submit_export']) && filter_input(INPUT_POST, 'export_type') == 'text_file') {    // export to JSON file    $filename = 'phpMyAdmin-config-' . urlencode(PMA_getenv('HTTP_HOST')) . '.json';    PMA_download_header($filename, 'application/json');    $settings = PMA_load_userprefs();    echo json_encode($settings['config_data']);    return;} else if (isset($_POST['submit_get_json'])) {    $settings = PMA_load_userprefs();    header('Content-Type: application/json');    echo json_encode(array(        'prefs' => json_encode($settings['config_data']),        'mtime' => $settings['mtime']));    return;} else if (isset($_POST['submit_import'])) {    // load from JSON file    $json = '';    if (filter_input(INPUT_POST, 'import_type') == 'text_file'            && isset($_FILES['import_file'])            && $_FILES['import_file']['error'] == UPLOAD_ERR_OK            && is_uploaded_file($_FILES['import_file']['tmp_name'])) {        // read JSON from uploaded file        $open_basedir = @ini_get('open_basedir');        $file_to_unlink = '';        $import_file = $_FILES['import_file']['tmp_name'];        // If we are on a server with open_basedir, we must move the file        // before opening it. The doc explains how to create the "./tmp"        // directory        if (!empty($open_basedir)) {            $tmp_subdir = (PMA_IS_WINDOWS ? '.\\tmp\\' : './tmp/');            if (is_writable($tmp_subdir)) {                $import_file_new = tempnam($tmp_subdir, 'prefs');                if (move_uploaded_file($import_file, $import_file_new)) {                    $import_file = $import_file_new;                    $file_to_unlink = $import_file_new;                }            }        }        $json = file_get_contents($import_file);        if ($file_to_unlink) {            unlink($file_to_unlink);        }    } else {        // read from POST value (json)        $json = filter_input(INPUT_POST, 'json');    }    // hide header message    $_SESSION['userprefs_autoload'] = true;    $config = json_decode($json, true);    $return_url = filter_input(INPUT_POST, 'return_url');    if (! is_array($config)) {        $error = __('Could not import configuration');    } else {        // sanitize input values: treat them as though they came from HTTP POST request        $form_display = new FormDisplay();        foreach ($forms as $formset_id => $formset) {            foreach ($formset as $form_name => $form) {                $form_display->registerForm($formset_id . ': ' . $form_name, $form);            }        }        $cf = ConfigFile::getInstance();        $new_config = $cf->getFlatDefaultConfig();        if (!empty($_POST['import_merge'])) {            $new_config = array_merge($new_config, $cf->getConfigArray());        }        $new_config = array_merge($new_config, $config);        $_POST_bak = $_POST;        foreach ($new_config as $k => $v) {            $_POST[str_replace('/', '-', $k)] = $v;        }        $cf->resetConfigData();        $all_ok = $form_display->process(true, false);        $all_ok = $all_ok && !$form_display->hasErrors();        $_POST = $_POST_bak;        if (!$all_ok && isset($_POST['fix_errors'])) {            $form_display->fixErrors();            $all_ok = true;        }        if (!$all_ok) {            // mimic original form and post json in a hidden field            include './libraries/header.inc.php';            include './libraries/user_preferences.inc.php';            $msg = PMA_Message::error(__('Configuration contains incorrect data for some fields.'));            $msg->display();            echo '<div class="config-form">';            $form_display->displayErrors();            echo '</div>';            ?>            <form action="prefs_manage.php" method="post">                <?php echo PMA_generate_common_hidden_inputs() . "\n"; ?>                <input type="hidden" name="json" value="<?php echo htmlspecialchars($json) ?>" />                <input type="hidden" name="fix_errors" value="1" />                <?php if (!empty($_POST['import_merge'])): ?>                <input type="hidden" name="import_merge" value="1" />                <?php endif; ?>                <?php if ($return_url): ?>                <input type="hidden" name="return_url" value="<?php echo htmlspecialchars($return_url) ?>" />                <?php endif; ?>                <p><?php echo __('Do you want to import remaining settings?') ?></p>                <input type="submit" name="submit_import" value="<?php echo __('Yes') ?>" />                <input type="submit" name="submit_ignore" value="<?php echo __('No') ?>" />            </form>            <?php            include './libraries/footer.inc.php';            return;        }        // check for ThemeDefault and fontsize        $params = array();        if (isset($config['ThemeDefault'])                && $_SESSION['PMA_Theme_Manager']->theme->getId() != $config['ThemeDefault']                && $_SESSION['PMA_Theme_Manager']->checkTheme($config['ThemeDefault'])) {            $_SESSION['PMA_Theme_Manager']->setActiveTheme($config['ThemeDefault']);            $_SESSION['PMA_Theme_Manager']->setThemeCookie();            $params['reload_left_frame'] = true;        }        if (isset($config['fontsize'])                && $config['fontsize'] != $GLOBALS['PMA_Config']->get('fontsize')) {            $params['set_fontsize'] = $config['fontsize'];            $params['reload_left_frame'] = true;        }        if (isset($config['lang'])                && $config['lang'] != $GLOBALS['lang']) {            $params['lang'] = $config['lang'];            $params['reload_left_frame'] = true;        }        if (isset($config['collation_connection'])                && $config['collation_connection'] != $GLOBALS['collation_connection']) {            $params['collation_connection'] = $config['collation_connection'];            $params['reload_left_frame'] = true;        }        // save settings        $old_settings = PMA_load_userprefs();        $result = PMA_save_userprefs($cf->getConfigArray());        if ($result === true) {            if ($return_url) {                $query = explode('&', parse_url($return_url, PHP_URL_QUERY));                $return_url = parse_url($return_url, PHP_URL_PATH);                foreach ($query as $q) {                    $pos = strpos($q, '=');                    $k = substr($q, 0, $pos);                    if ($k == 'token') {                        continue;                    }                    $params[$k] = substr($q, $pos+1);                }            } else {                $return_url = 'prefs_manage.php';            }            // reload config            $GLOBALS['PMA_Config']->loadUserPreferences();            PMA_userprefs_redirect($forms, $old_settings, $return_url, $params);            exit;        } else {            $error = $result;        }    }} else if (isset($_POST['submit_clear'])) {    $old_settings = PMA_load_userprefs();    $result = PMA_save_userprefs(array());    if ($result === true) {        $params = array();        if ($_SESSION['PMA_Theme_Manager']->theme->getId() != 'original') {            $GLOBALS['PMA_Config']->removeCookie($_SESSION['PMA_Theme_Manager']->getThemeCookieName());            unset($_SESSION['PMA_Theme_Manager']);            unset($_SESSION['PMA_Theme']);            $params['reload_left_frame'] = true;        }        if ($GLOBALS['PMA_Config']->get('fontsize') != '82%') {            $GLOBALS['PMA_Config']->removeCookie('pma_fontsize');            $params['reload_left_frame'] = true;        }        $GLOBALS['PMA_Config']->removeCookie('pma_collaction_connection');        $GLOBALS['PMA_Config']->removeCookie('pma_lang');        PMA_userprefs_redirect($forms, $old_settings, 'prefs_manage.php', $params);        exit;    } else {        $error = $result;    }    exit;}$GLOBALS['js_include'][] = 'config.js';require './libraries/header.inc.php';require './libraries/user_preferences.inc.php';if ($error) {    if (!$error instanceof PMA_Message) {        $error = PMA_Message::error($error);    }    $error->display();}?><script type="text/javascript"><?phpPMA_printJsValue("PMA_messages['strSavedOn']", __('Saved on: @DATE@'));?></script><div id="maincontainer">    <div id="main_pane_left">        <div class="group">            <h2><?php echo __('Import') ?></h2>            <form class="group-cnt prefs-form" name="prefs_import" action="prefs_manage.php" method="post" enctype="multipart/form-data">                <?php                echo PMA_generateHiddenMaxFileSize($max_upload_size) . "\n";                echo PMA_generate_common_hidden_inputs() . "\n";                ?>                <input type="hidden" name="json" value="" />                <input type="radio" id="import_text_file" name="import_type" value="text_file" checked="checked" />                <label for="import_text_file"><?php echo __('Import from file') ?></label>                <div id="opts_import_text_file" class="prefsmanage_opts">                    <label for="input_import_file"><?php echo __('Browse your computer:'); ?></label>                    <input type="file" name="import_file" id="input_import_file" />                </div>                <input type="radio" id="import_local_storage" name="import_type" value="local_storage" disabled="disabled" />                <label for="import_local_storage"><?php echo __('Import from browser\'s storage') ?></label>                <div id="opts_import_local_storage" class="prefsmanage_opts disabled">                    <div class="localStorage-supported">                        <?php echo __('Settings will be imported from your browser\'s local storage.') ?>                        <br />                        <span class="localStorage-exists">                            <?php echo __('Saved on: @DATE@') ?>                        </span>                        <span class="localStorage-empty">                            <?php  PMA_Message::notice(__('You have no saved settings!'))->display() ?>                        </span>                    </div>                    <span class="localStorage-unsupported">                        <?php PMA_Message::notice(__('This feature is not supported by your web browser'))->display() ?>                    </span>                </div>                <input type="checkbox" id="import_merge" name="import_merge" />                <label for="import_merge"><?php echo __('Merge with current configuration') ?></label>                <br /><br />                <input type="submit" name="submit_import" value="<?php echo __('Go'); ?>" />            </form>        </div>        <?php        if (file_exists('./setup/index.php')) {            // show only if setup script is available, allows to disable this message            // by simply removing setup directory        ?>        <div class="group">            <h2><?php echo __('More settings') ?></h2>            <div class="group-cnt">                <?php                echo sprintf(__('You can set more settings by modifying config.inc.php, eg. by using %sSetup script%s.'), '<a href="setup/index.php">', '</a>');                echo PMA_showDocu('setup_script');                ?>            </div>        </div>        <?php        }        ?>    </div>    <div id="main_pane_right">        <div class="group">            <h2><?php echo __('Export') ?></h2>            <div class="click-hide-message group-cnt" style="display:none">                <?php                $message = PMA_Message::rawSuccess(__('Configuration has been saved'));                $message->display();                ?>            </div>            <form class="group-cnt prefs-form" name="prefs_export" action="prefs_manage.php" method="post">            <?php echo PMA_generate_common_hidden_inputs() . "\n" ?>                <div style="padding-bottom:0.5em">                    <input type="radio" id="export_text_file" name="export_type" value="text_file" checked="checked" />                    <label for="export_text_file"><?php echo __('Save as file') ?></label>                    <br />                    <input type="radio" id="export_local_storage" name="export_type" value="local_storage" disabled="disabled" />                    <label for="export_local_storage"><?php echo __('Save to browser\'s storage') ?></label>                </div>                <div id="opts_export_local_storage" class="prefsmanage_opts disabled">                    <span class="localStorage-supported">                        <?php echo __('Settings will be saved in your browser\'s local storage.') ?>                        <span class="localStorage-exists">                            <br /><b><?php echo __('Existing settings will be overwritten!') ?></b>                        </span>                    </span>                    <span class="localStorage-unsupported">                        <?php PMA_Message::notice(__('This feature is not supported by your web browser'))->display() ?>                    </span>                </div>                <br />                <input type="submit" name="submit_export" value="<?php echo __('Go'); ?>" />            </form>        </div>        <div class="group">            <h2><?php echo __('Reset') ?></h2>            <form class="group-cnt prefs-form" name="prefs_reset" action="prefs_manage.php" method="post">            <?php echo PMA_generate_common_hidden_inputs() . "\n" ?>                <?php echo __('You can reset all your settings and restore them to default values.') ?>                <br /><br />                <input type="submit" name="submit_clear" value="<?php echo __('Reset') ?>" />            </form>        </div>    </div>    <br class="clearfloat" /></div><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Parser bug report decoder * * This is the parser bug decoder system * Throw the bug data in the query box, and hit submit for output. * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * * @package PhpMyAdmin-debug *//** * Displays the form */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US"><head>    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />    <title>phpMyAdmin - Parser bug report decoder</title>    <style type="text/css">    <!--    body, p {        font-family: Arial, Helvetica, sans-serif;        font-size:   medium;    }    h1 {        font-family: Verdana, Arial, Helvetica, sans-serif;        font-size:   large;        font-weight: bold;        color:       #000066;    }    //-->    </style></head><body bgcolor="#FFFFFF"><h1>Parser bug report decoder</h1><br /><form method="post" action="./decode_bug.php">    <input type="hidden" name="bar" value="<?php echo rand(); ?>" />    Encoded bug report:<br />    <textarea name="bug_encoded" cols="72" rows="10"></textarea>    <br /><br />    <input type="submit" /></form><hr /><?php/** * If the form has been submitted -> decodes the bug report *//** * Display the decoded bug report in ASCII format * * @param  string  the text data * * @return string  the text enclosed by "<pre>...</pre>" tags * * @access public */function PMA_printDecodedBug($textdata){    return '<pre>' . htmlspecialchars($textdata) . '</pre><br />';} // end of the "PMA_printDecodedBug()" functionif (!empty($_POST) && isset($_POST['bug_encoded'])) {    $bug_encoded = $_POST['bug_encoded'];}if (!empty($bug_encoded) && is_string($bug_encoded)) {    if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) {        $bug_encoded = stripslashes($bug_encoded);    }    $bug_encoded     = preg_replace('/[[:space:]]/', '', $bug_encoded);    $bug_decoded     = base64_decode($bug_encoded);    if (substr($bug_encoded, 0, 2) == 'eN') {        if (function_exists('gzuncompress')) {                $result  = PMA_printDecodedBug(gzuncompress($bug_decoded));            } else {                $result  = 'Error: &quot;gzuncompress()&quot; is unavailable!' . "\n";        }    } else {        $result  = PMA_printDecodedBug($bug_decoded);    } // end if... else...    echo '<p>Decoded:</p>' . "\n"         . $result . "\n";} // end if?></body></html>
<?php/** * Handles the visualization of GIS POLYGON objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Polygon extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesn't have an inner ring, use polygon itself        if (strpos($polygon, "),(") === false) {            $ring = $polygon;        } else {            // Seperate outer ring and use it to determin min-max            $parts = explode("),(", $polygon);            $ring = $parts[0];        }        return $this->setMinMax($ring, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $fill_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, $scale_data, true);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $points_arr = $this->extractPoints($outer, $scale_data, true);            foreach ($inner as $inner_poly) {                $points_arr = array_merge(                    $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                );            }        }        // draw polygon        imagefilledpolygon($image, $points_arr, sizeof($points_arr) / 2, $color);        // print label if applicable        if (isset($label) && trim($label) != '') {            imagestring($image, 1, $points_arr[2], $points_arr[3], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $fill_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = array($red, $green, $blue);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, $scale_data, true);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $points_arr = $this->extractPoints($outer, $scale_data, true);            foreach ($inner as $inner_poly) {                $points_arr = array_merge(                    $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                );            }        }        // draw polygon        $pdf->Polygon($points_arr, 'F*', array(), $color, true);        // print label if applicable        if (isset($label) && trim($label) != '') {            $pdf->SetXY($points_arr[2], $points_arr[3]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $fill_color, $scale_data)    {        $polygon_options = array(            'name'        => $label,            'id'          => $label . rand(),            'class'       => 'polygon vector',            'stroke'      => 'black',            'stroke-width'=> 0.5,            'fill'        => $fill_color,            'fill-rule'   => 'evenodd',            'fill-opacity'=> 0.8,        );        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        $row = '<path d="';        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $row .= $this->_drawPath($polygon, $scale_data);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $row .= $this->_drawPath($outer, $scale_data);            foreach ($inner as $inner_poly) {                $row .= $this->_drawPath($inner_poly, $scale_data);            }        }        $row .= '"';        foreach ($polygon_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS POLYGON object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $fill_color, $scale_data)    {        $style_options = array(            'strokeColor' => '#000000',            'strokeWidth' => 0.5,            'fillColor'   => $fill_color,            'fillOpacity' => 0.8,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $row = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        $row .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector(';        $row .= $this->addPointsForOpenLayersPolygon($polygon, $srid);        $row .= 'null, ' . json_encode($style_options) . '));';        return $row;    }    /**     * Draws a ring of the polygon using SVG path element.     *     * @param string $polygon    The ring     * @param array  $scale_data Array containing data related to scaling     *     * @return the code to draw the ring     */    private function _drawPath($polygon, $scale_data)    {        $points_arr = $this->extractPoints($polygon, $scale_data);        $row = ' M ' . $points_arr[0][0] . ', ' . $points_arr[0][1];        $other_points = array_slice($points_arr, 1, count($points_arr) - 2);        foreach ($other_points as $point) {            $row .= ' L ' . $point[0] . ', ' . $point[1];        }        $row .= ' Z ';        return $row;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_lines = isset($gis_data[$index]['POLYGON']['no_of_lines'])            ? $gis_data[$index]['POLYGON']['no_of_lines'] : 1;        if ($no_of_lines < 1) {            $no_of_lines = 1;        }        $wkt = 'POLYGON(';        for ($i = 0; $i < $no_of_lines; $i++) {            $no_of_points = isset($gis_data[$index]['POLYGON'][$i]['no_of_points'])                ? $gis_data[$index]['POLYGON'][$i]['no_of_points'] : 4;            if ($no_of_points < 4) {                $no_of_points = 4;            }            $wkt .= '(';            for ($j = 0; $j < $no_of_points; $j++) {                $wkt .= ((isset($gis_data[$index]['POLYGON'][$i][$j]['x'])                    && trim($gis_data[$index]['POLYGON'][$i][$j]['x']) != '')                    ? $gis_data[$index]['POLYGON'][$i][$j]['x'] : $empty)                    . ' ' . ((isset($gis_data[$index]['POLYGON'][$i][$j]['y'])                    && trim($gis_data[$index]['POLYGON'][$i][$j]['y']) != '')                    ? $gis_data[$index]['POLYGON'][$i][$j]['y'] : $empty) .',';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Calculates the area of a closed simple polygon.     *     * @param array $ring array of points forming the ring     *     * @return the area of a closed simple polygon.     */    public static function area($ring)    {        $no_of_points = count($ring);        // If the last point is same as the first point ignore it        $last = count($ring) - 1;        if (($ring[0]['x'] == $ring[$last]['x'])            && ($ring[0]['y'] == $ring[$last]['y'])        ) {            $no_of_points--;        }        //         _n-1        // A = _1_ \    (X(i) * Y(i+1)) - (Y(i) * X(i+1))        //      2  /__        //         i=0        $area = 0;        for ($i = 0; $i < $no_of_points; $i++) {            $j = ($i + 1) % $no_of_points;            $area += $ring[$i]['x'] * $ring[$j]['y'];            $area -= $ring[$i]['y'] * $ring[$j]['x'];        }        $area /= 2.0;        return $area;    }    /**     * Determines whether a set of points represents an outer ring.     * If points are in clockwise orientation then, they form an outer ring.     *     * @param array $ring array of points forming the ring     *     * @return whether a set of points represents an outer ring.     */    public static function isOuterRing($ring)    {        // If area is negative then it's in clockwise orientation,        // i.e. it's an outer ring        if (PMA_GIS_Polygon::area($ring) < 0) {            return true;        }        return false;    }    /**     * Determines whether a given point is inside a given polygon.     *     * @param array $point   x, y coordinates of the point     * @param array $polygon array of points forming the ring     *     * @return whether a given point is inside a given polygon     */    public static function isPointInsidePolygon($point, $polygon)    {        // If first point is repeated at the end remove it        $last = count($polygon) - 1;        if (($polygon[0]['x'] == $polygon[$last]['x'])            && ($polygon[0]['y'] == $polygon[$last]['y'])        ) {            $polygon = array_slice($polygon, 0, $last);        }        $no_of_points = count($polygon);        $counter = 0;        // Use ray casting algorithm        $p1 = $polygon[0];        for ($i = 1; $i <= $no_of_points; $i++) {            $p2 = $polygon[$i % $no_of_points];            if ($point['y'] > min(array($p1['y'], $p2['y']))) {                if ($point['y'] <= max(array($p1['y'], $p2['y']))) {                    if ($point['x'] <= max(array($p1['x'], $p2['x']))) {                        if ($p1['y'] != $p2['y']) {                            $xinters = ($point['y'] - $p1['y'])                                * ($p2['x'] - $p1['x'])                                / ($p2['y'] - $p1['y']) + $p1['x'];                            if ($p1['x'] == $p2['x'] || $point['x'] <= $xinters) {                                $counter++;                            }                        }                    }                }            }            $p1 = $p2;        }        if ($counter % 2 == 0) {            return  false;        } else {            return true;        }    }    /**     * Returns a point that is guaranteed to be on the surface of the ring.     * (for simple closed rings)     *     * @param array $ring array of points forming the ring     *     * @return a point on the surface of the ring     */    public static function getPointOnSurface($ring)    {        // Find two consecutive distinct points.        for ($i = 0; $i < count($ring) - 1; $i++) {            if ($ring[$i]['y'] != $ring[$i + 1]['y']) {                $x0 = $ring[$i]['x'];                $x1 = $ring[$i + 1]['x'];                $y0 = $ring[$i]['y'];                $y1 = $ring[$i + 1]['y'];                break;            }        }        if (! isset($x0)) {            return false;        }        // Find the mid point        $x2 = ($x0 + $x1) / 2;        $y2 = ($y0 + $y1) / 2;        // Always keep $epsilon < 1 to go with the reduction logic down here        $epsilon = 0.1;        $denominator = sqrt(pow(($y1 - $y0), 2) + pow(($x0 - $x1), 2));        $pointA = array(); $pointB = array();        while (true) {            // Get the points on either sides of the line            // with a distance of epsilon to the mid point            $pointA['x'] = $x2 + ($epsilon * ($y1 - $y0)) / $denominator;            $pointA['y'] = $y2 + ($pointA['x'] - $x2) * ($x0 - $x1) / ($y1 - $y0);            $pointB['x'] = $x2 + ($epsilon * ($y1 - $y0)) / (0 - $denominator);            $pointB['y'] = $y2 + ($pointB['x'] - $x2) * ($x0 - $x1) / ($y1 - $y0);            // One of the points should be inside the polygon,            // unless epcilon chosen is too large            if (PMA_GIS_Polygon::isPointInsidePolygon($pointA, $ring)) {                return $pointA;            } elseif (PMA_GIS_Polygon::isPointInsidePolygon($pointB, $ring)) {                return $pointB;            } else {                //If both are outside the polygon reduce the epsilon and                //recalculate the points(reduce exponentially for faster convergance)                $epsilon = pow($epsilon, 2);                if ($epsilon == 0) {                    return false;                }            }        }    }    /** Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'POLYGON';            $wkt = $value;        }        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($wkt, 9, (strlen($wkt) - 11));        // Seperate each linestring        $linerings = explode("),(", $polygon);        $params[$index]['POLYGON']['no_of_lines'] = count($linerings);        $j = 0;        foreach ($linerings as $linering) {            $points_arr = $this->extractPoints($linering, null);            $no_of_points = count($points_arr);            $params[$index]['POLYGON'][$j]['no_of_points'] = $no_of_points;            for ($i = 0; $i < $no_of_points; $i++) {                $params[$index]['POLYGON'][$j][$i]['x'] = $points_arr[$i][0];                $params[$index]['POLYGON'][$j][$i]['y'] = $points_arr[$i][1];            }            $j++;        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * CSV import plugin for phpMyAdmin * * @todo    add an option for handling NULL values * @package PhpMyAdmin-Import * @subpackage CSV */if (! defined('PHPMYADMIN')) {    exit;}$analyze = false;if ($plugin_param !== 'table') {    $analyze = true;}if (isset($plugin_list)) {    $plugin_list['csv'] = array(        'text' => __('CSV'),        'extension' => 'csv',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'replace', 'text' => __('Replace table data with file')),            array('type' => 'bool', 'name' => 'ignore', 'text' => __('Do not abort on INSERT error')),            array('type' => 'text', 'name' => 'terminated', 'text' => __('Columns separated with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'enclosed', 'text' => __('Columns enclosed with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'escaped', 'text' => __('Columns escaped with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'new_line', 'text' => __('Lines terminated with:'), 'size' => 2),            ),        'options_text' => __('Options'),        );    if ($plugin_param !== 'table') {        $plugin_list['csv']['options'][]            = array('type' => 'bool', 'name' => 'col_names', 'text' => __('The first line of the file contains the table column names <i>(if this is unchecked, the first line will become part of the data)</i>'));    } else {        $hint = new PMA_Message(__('If the data in each row of the file is not in the same order as in the database, list the corresponding column names here. Column names must be separated by commas and not enclosed in quotations.'));        $plugin_list['csv']['options'][]            = array('type' => 'text', 'name' => 'columns', 'text' => __('Column names: ') . PMA_showHint($hint));    }    $plugin_list['csv']['options'][] = array('type' => 'end_group');    /* We do not define function when plugin is just queried for information above */    return;}$replacements = array(    '\\n'   => "\n",    '\\t'   => "\t",    '\\r'   => "\r",    );$csv_terminated = strtr($csv_terminated, $replacements);$csv_enclosed = strtr($csv_enclosed,  $replacements);$csv_escaped = strtr($csv_escaped, $replacements);$csv_new_line = strtr($csv_new_line, $replacements);$param_error = false;if (strlen($csv_terminated) != 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns terminated by'), false);    $error = true;    $param_error = true;    // The default dialog of MS Excel when generating a CSV produces a    // semi-colon-separated file with no chance of specifying the    // enclosing character. Thus, users who want to import this file    // tend to remove the enclosing character on the Import dialog.    // I could not find a test case where having no enclosing characters    // confuses this script.    // But the parser won't work correctly with strings so we allow just    // one character.} elseif (strlen($csv_enclosed) > 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns enclosed by'), false);    $error = true;    $param_error = true;} elseif (strlen($csv_escaped) != 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns escaped by'), false);    $error = true;    $param_error = true;} elseif (strlen($csv_new_line) != 1 && $csv_new_line != 'auto') {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Lines terminated by'), false);    $error = true;    $param_error = true;}// If there is an error in the parameters entered, indicate that immediately.if ($param_error) {    PMA_mysqlDie($message->getMessage(), '', '', $err_url);}$buffer = '';$required_fields = 0;if (!$analyze) {    if (isset($csv_replace)) {        $sql_template = 'REPLACE';    } else {        $sql_template = 'INSERT';        if (isset($csv_ignore)) {            $sql_template .= ' IGNORE';        }    }    $sql_template .= ' INTO ' . PMA_backquote($table);    $tmp_fields = PMA_DBI_get_columns($db, $table);    if (empty($csv_columns)) {        $fields = $tmp_fields;    } else {        $sql_template .= ' (';        $fields = array();        $tmp   = preg_split('/,( ?)/', $csv_columns);        foreach ($tmp as $key => $val) {            if (count($fields) > 0) {                $sql_template .= ', ';            }            /* Trim also `, if user already included backquoted fields */            $val = trim($val, " \t\r\n\0\x0B`");            $found = false;            foreach ($tmp_fields as $id => $field) {                if ($field['Field'] == $val) {                    $found = true;                    break;                }            }            if (!$found) {                $message = PMA_Message::error(__('Invalid column (%s) specified! Ensure that columns names are spelled correctly, separated by commas, and not enclosed in quotes.'));                $message->addParam($val);                $error = true;                break;            }            $fields[] = $field;            $sql_template .= PMA_backquote($val);        }        $sql_template .= ') ';    }    $required_fields = count($fields);    $sql_template .= ' VALUES (';}// Defaults for parser$i = 0;$len = 0;$line = 1;$lasti = -1;$values = array();$csv_finish = false;$tempRow = array();$rows = array();$col_names = array();$tables = array();$col_count = 0;$max_cols = 0;while (!($finished && $i >= $len) && !$error && !$timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        // subtract data we didn't handle yet and stop processing        $offset -= strlen($buffer);        break;    } elseif ($data === true) {        // Handle rest of buffer    } else {        // Append new data to buffer        $buffer .= $data;        unset($data);        // Do not parse string when we're not at the end and don't have new line inside        if (($csv_new_line == 'auto' && strpos($buffer, "\r") === false && strpos($buffer, "\n") === false)            || ($csv_new_line != 'auto' && strpos($buffer, $csv_new_line) === false)        ) {            continue;        }    }    // Current length of our buffer    $len = strlen($buffer);    // Currently parsed char    $ch = $buffer[$i];    while ($i < $len) {        // Deadlock protection        if ($lasti == $i && $lastlen == $len) {            $message = PMA_Message::error(__('Invalid format of CSV input on line %d.'));            $message->addParam($line);            $error = true;            break;        }        $lasti = $i;        $lastlen = $len;        // This can happen with auto EOL and \r at the end of buffer        if (!$csv_finish) {            // Grab empty field            if ($ch == $csv_terminated) {                if ($i == $len - 1) {                    break;                }                $values[] = '';                $i++;                $ch = $buffer[$i];                continue;            }            // Grab one field            $fallbacki = $i;            if ($ch == $csv_enclosed) {                if ($i == $len - 1) {                    break;                }                $need_end = true;                $i++;                $ch = $buffer[$i];            } else {                $need_end = false;            }            $fail = false;            $value = '';            while (($need_end && ($ch != $csv_enclosed || $csv_enclosed == $csv_escaped))             || (!$need_end && !($ch == $csv_terminated               || $ch == $csv_new_line || ($csv_new_line == 'auto'                && ($ch == "\r" || $ch == "\n"))))) {                if ($ch == $csv_escaped) {                    if ($i == $len - 1) {                        $fail = true;                        break;                    }                    $i++;                    $ch = $buffer[$i];                    if ($csv_enclosed == $csv_escaped && ($ch == $csv_terminated                     || $ch == $csv_new_line || ($csv_new_line == 'auto'                      && ($ch == "\r" || $ch == "\n")))) {                        break;                    }                }                $value .= $ch;                if ($i == $len - 1) {                    if (!$finished) {                        $fail = true;                    }                    break;                }                $i++;                $ch = $buffer[$i];            }            // unquoted NULL string            if (false === $need_end && $value === 'NULL') {                $value = null;            }            if ($fail) {                $i = $fallbacki;                $ch = $buffer[$i];                break;            }            // Need to strip trailing enclosing char?            if ($need_end && $ch == $csv_enclosed) {                if ($finished && $i == $len - 1) {                    $ch = null;                } elseif ($i == $len - 1) {                    $i = $fallbacki;                    $ch = $buffer[$i];                    break;                } else {                    $i++;                    $ch = $buffer[$i];                }            }            // Are we at the end?            if ($ch == $csv_new_line                || ($csv_new_line == 'auto' && ($ch == "\r" || $ch == "\n"))                || ($finished && $i == $len - 1)            ) {                $csv_finish = true;            }            // Go to next char            if ($ch == $csv_terminated) {                if ($i == $len - 1) {                    $i = $fallbacki;                    $ch = $buffer[$i];                    break;                }                $i++;                $ch = $buffer[$i];            }            // If everything went okay, store value            $values[] = $value;        }        // End of line        if ($csv_finish            || $ch == $csv_new_line            || ($csv_new_line == 'auto' && ($ch == "\r" || $ch == "\n"))        ) {            if ($csv_new_line == 'auto' && $ch == "\r") { // Handle "\r\n"                if ($i >= ($len - 2) && !$finished) {                    break; // We need more data to decide new line                }                if ($buffer[$i + 1] == "\n") {                    $i++;                }            }            // We didn't parse value till the end of line, so there was empty one            if (!$csv_finish) {                $values[] = '';            }            if ($analyze) {                foreach ($values as $ley => $val) {                    $tempRow[] = $val;                    ++$col_count;                }                if ($col_count > $max_cols) {                    $max_cols = $col_count;                }                $col_count = 0;                $rows[] = $tempRow;                $tempRow = array();            } else {                // Do we have correct count of values?                if (count($values) != $required_fields) {                    // Hack for excel                    if ($values[count($values) - 1] == ';') {                        unset($values[count($values) - 1]);                    } else {                        $message = PMA_Message::error(__('Invalid column count in CSV input on line %d.'));                        $message->addParam($line);                        $error = true;                        break;                    }                }                $first = true;                $sql = $sql_template;                foreach ($values as $key => $val) {                    if (!$first) {                        $sql .= ', ';                    }                    if ($val === null) {                        $sql .= 'NULL';                    } else {                        $sql .= '\'' . PMA_sqlAddSlashes($val) . '\'';                    }                    $first = false;                }                $sql .= ')';                /**                 * @todo maybe we could add original line to verbose SQL in comment                 */                PMA_importRunQuery($sql, $sql);            }            $line++;            $csv_finish = false;            $values = array();            $buffer = substr($buffer, $i + 1);            $len = strlen($buffer);            $i = 0;            $lasti = -1;            $ch = $buffer[0];        }    } // End of parser loop} // End of import loopif ($analyze) {    /* Fill out all rows */    $num_rows = count($rows);    for ($i = 0; $i < $num_rows; ++$i) {        for ($j = count($rows[$i]); $j < $max_cols; ++$j) {            $rows[$i][] = 'NULL';        }    }    if (isset($_REQUEST['csv_col_names'])) {        $col_names = array_splice($rows, 0, 1);        $col_names = $col_names[0];    }    if ((isset($col_names) && count($col_names) != $max_cols)        || ! isset($col_names)    ) {        // Fill out column names        for ($i = 0; $i < $max_cols; ++$i) {            $col_names[] = 'COL '.($i+1);        }    }    if (strlen($db)) {        $result = PMA_DBI_fetch_result('SHOW TABLES');        $tbl_name = 'TABLE '.(count($result) + 1);    } else {        $tbl_name = 'TBL_NAME';    }    $tables[] = array($tbl_name, $col_names, $rows);    /* Obtain the best-fit MySQL types for each column */    $analyses = array();    $analyses[] = PMA_analyzeTable($tables[0]);    /**     * string $db_name (no backquotes)     *     * array $table = array(table_name, array() column_names, array()() rows)     * array $tables = array of "$table"s     *     * array $analysis = array(array() column_types, array() column_sizes)     * array $analyses = array of "$analysis"s     *     * array $create = array of SQL strings     *     * array $options = an associative array of options     */    /* Set database name to the currently selected one, if applicable */    if (strlen($db)) {        $db_name = $db;        $options = array('create_db' => false);    } else {        $db_name = 'CSV_DB';        $options = null;    }    /* Non-applicable parameters */    $create = null;    /* Created and execute necessary SQL statements from data */    PMA_buildSQL($db_name, $tables, $analyses, $create, $options);    unset($tables);    unset($analyses);}// Commit any possible data in buffersPMA_importRunQuery();if (count($values) != 0 && !$error) {    $message = PMA_Message::error(__('Invalid format of CSV input on line %d.'));    $message->addParam($line);    $error = true;}?>
<?php/** * Functions used to generate GIS visualizations. * * @package PhpMyAdmin *//** * Returns a modified sql query with only the label column * and spatial column(wrapped with 'ASTEXT()' function). * * @param string $sql_query             original sql query * @param array  $visualizationSettings settings for the visualization * * @return the modified sql query. */function PMA_GIS_modifyQuery($sql_query, $visualizationSettings){    $modified_query = 'SELECT ';    $analyzed_query = PMA_SQP_analyze(PMA_SQP_parse($sql_query));    // If select clause is not *    if (trim($analyzed_query[0]['select_expr_clause']) != '*') {        // If label column is chosen add it to the query        if (isset($visualizationSettings['labelColumn'])            && $visualizationSettings['labelColumn'] != ''        ) {            // Check to see whether an alias has been used on the label column            $is_label_alias = false;            foreach ($analyzed_query[0]['select_expr'] as $select) {                if ($select['alias'] == $visualizationSettings['labelColumn']) {                    $modified_query .= sanitize($select) . ' AS `'                    . $select['alias'] . '`, ';                    $is_label_alias = true;                    break;                }            }            // If no alias have been used on the label column            if (! $is_label_alias) {                foreach ($analyzed_query[0]['select_expr'] as $select) {                    if ($select['column'] == $visualizationSettings['labelColumn']) {                        $modified_query .= sanitize($select) . ', ';                    }                }            }        }        // Check to see whether an alias has been used on the spatial column        $is_spatial_alias = false;        foreach ($analyzed_query[0]['select_expr'] as $select) {            if ($select['alias'] == $visualizationSettings['spatialColumn']) {                $sanitized = sanitize($select);                $modified_query .= 'ASTEXT(' . $sanitized . ') AS `'                . $select['alias'] . '`, ';                // Get the SRID                $modified_query .= 'SRID(' . $sanitized . ') AS `srid` ';                $is_spatial_alias = true;                break;            }        }        // If no alias have been used on the spatial column        if (! $is_spatial_alias) {            foreach ($analyzed_query[0]['select_expr'] as $select) {                if ($select['column'] == $visualizationSettings['spatialColumn']) {                    $sanitized = sanitize($select);                    $modified_query .= 'ASTEXT(' . $sanitized                        . ') AS `' . $select['column'] . '`, ';                    // Get the SRID                    $modified_query .= 'SRID(' . $sanitized . ') AS `srid` ';                }            }        }        // If select cluase is *    } else {        // If label column is chosen add it to the query        if (isset($visualizationSettings['labelColumn'])            && $visualizationSettings['labelColumn'] != ''        ) {            $modified_query .= '`' . $visualizationSettings['labelColumn'] .'`, ';        }        // Wrap the spatial column with 'ASTEXT()' function and add it        $modified_query .= 'ASTEXT(`' . $visualizationSettings['spatialColumn']            . '`) AS `' . $visualizationSettings['spatialColumn'] . '`, ';        // Get the SRID        $modified_query .= 'SRID(`' . $visualizationSettings['spatialColumn']            . '`) AS `srid` ';    }    // Append the rest of the query    $from_pos = stripos($sql_query, 'FROM');    $modified_query .= substr($sql_query, $from_pos);    return $modified_query;}// Local function to sanitize the expression taken// from the results of PMA_SQP_analyze function.function sanitize($select){    $table_col = $select['table_name'] . "." . $select['column'];    $db_table_col = $select['db'] . "." . $select['table_name']        . "." . $select['column'];    if ($select['expr'] == $select['column']) {        return "`" . $select['column'] . "`";    } elseif ($select['expr'] == $table_col) {        return "`" . $select['table_name'] . "`.`" . $select['column'] . "`";    } elseif ($select['expr'] == $db_table_col) {        return "`" . $select['db'] . "`.`" . $select['table_name']            . "`.`" . $select['column'] . "`";    }    return $select['expr'];}/** * Formats a visualization for the GIS query results. * * @param array  $data                   Data for the status chart * @param array  &$visualizationSettings Settings used to generate the chart * @param string $format                 Format of the visulaization * * @return string HTML and JS code for the GIS visualization */function PMA_GIS_visualizationResults($data, &$visualizationSettings, $format){    include_once './libraries/gis/pma_gis_visualization.php';    include_once './libraries/gis/pma_gis_factory.php';    if (! isset($data[0])) {        // empty data        return __('No data found for GIS visualization.');    } else {        $visualization = new PMA_GIS_Visualization($data, $visualizationSettings);        if ($visualizationSettings != null) {            foreach ($visualization->getSettings() as $setting => $val) {                if (! isset($visualizationSettings[$setting])) {                    $visualizationSettings[$setting] = $val;                }            }        }        if ($format == 'svg') {            return $visualization->asSvg();        } elseif ($format == 'png') {            return $visualization->asPng();        } elseif ($format == 'ol') {            return $visualization->asOl();        }    }}/** * Generate visualization for the GIS query results and save it to a file. * * @param array  $data                  data for the status chart * @param array  $visualizationSettings settings used to generate the chart * @param string $format                format of the visulaization * @param string $fileName              file name * * @return file File containing the visualization */function PMA_GIS_saveToFile($data, $visualizationSettings, $format, $fileName){    include_once './libraries/gis/pma_gis_visualization.php';    include_once './libraries/gis/pma_gis_factory.php';    if (isset($data[0])) {        $visualization = new PMA_GIS_Visualization($data, $visualizationSettings);        if ($format == 'svg') {            $visualization->toFileAsSvg($fileName);        } elseif ($format == 'png') {            $visualization->toFileAsPng($fileName);        } elseif ($format == 'pdf') {            $visualization->toFileAsPdf($fileName);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Get some core libraries */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);/** * The form used to define the field to add has been submitted */$abort = false;// check number of fields to be createdif (isset($_REQUEST['submit_num_fields'])) {    if (isset($_REQUEST['orig_after_field'])) {        $_REQUEST['after_field'] = $_REQUEST['orig_after_field'];    }    if (isset($_REQUEST['orig_field_where'])) {        $_REQUEST['field_where'] = $_REQUEST['orig_field_where'];    }    $num_fields = $_REQUEST['orig_num_fields'] + $_REQUEST['added_fields'];    $regenerate = true;} elseif (isset($_REQUEST['num_fields']) && intval($_REQUEST['num_fields']) > 0) {    $num_fields = (int) $_REQUEST['num_fields'];} else {    $num_fields = 1;}if (isset($_REQUEST['do_save_data'])) {    $query = '';    $definitions = array();    // Transforms the radio button field_key into 3 arrays    $field_cnt      = count($_REQUEST['field_name']);    $field_primary  = array();    $field_index    = array();    $field_unique   = array();    $field_fulltext = array();    for ($i = 0; $i < $field_cnt; ++$i) {        if (isset($_REQUEST['field_key'][$i])         && strlen($_REQUEST['field_name'][$i])) {            if ($_REQUEST['field_key'][$i] == 'primary_' . $i) {                $field_primary[] = $i;            }            if ($_REQUEST['field_key'][$i] == 'index_' . $i) {                $field_index[]   = $i;            }            if ($_REQUEST['field_key'][$i] == 'unique_' . $i) {                $field_unique[]  = $i;            }            if ($_REQUEST['field_key'][$i] == 'fulltext_' . $i) {                $field_fulltext[]  = $i;            }        } // end if    } // end for    // Builds the field creation statement and alters the table    for ($i = 0; $i < $field_cnt; ++$i) {        // '0' is also empty for php :-(        if (empty($_REQUEST['field_name'][$i]) && $_REQUEST['field_name'][$i] != '0') {            continue;        }        $definition = ' ADD ' . PMA_Table::generateFieldSpec(            $_REQUEST['field_name'][$i],            $_REQUEST['field_type'][$i],            $_REQUEST['field_length'][$i],            $_REQUEST['field_attribute'][$i],            isset($_REQUEST['field_collation'][$i])                ? $_REQUEST['field_collation'][$i]                : '',            isset($_REQUEST['field_null'][$i])                ? $_REQUEST['field_null'][$i]                : 'NOT NULL',            $_REQUEST['field_default_type'][$i],            $_REQUEST['field_default_value'][$i],            isset($_REQUEST['field_extra'][$i])                ? $_REQUEST['field_extra'][$i]                : false,            isset($_REQUEST['field_comments'][$i])                ? $_REQUEST['field_comments'][$i]                : '',            $field_primary,            $i        );        if ($_REQUEST['field_where'] != 'last') {            // Only the first field can be added somewhere other than at the end            if ($i == 0) {                if ($_REQUEST['field_where'] == 'first') {                    $definition .= ' FIRST';                } else {                    $definition .= ' AFTER ' . PMA_backquote($_REQUEST['after_field']);                }            } else {                $definition .= ' AFTER ' . PMA_backquote($_REQUEST['field_name'][$i-1]);            }        }        $definitions[] = $definition;    } // end for    // Builds the primary keys statements and updates the table    if (count($field_primary)) {        $fields = array();        foreach ($field_primary as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD PRIMARY KEY (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the indexes statements and updates the table    if (count($field_index)) {        $fields = array();        foreach ($field_index as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD INDEX (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the uniques statements and updates the table    if (count($field_unique)) {        $fields = array();        foreach ($field_unique as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD UNIQUE (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the fulltext statements and updates the table    if (count($field_fulltext)) {        $fields = array();        foreach ($field_fulltext as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD FULLTEXT (' . implode(', ', $fields) . ') ';        unset($fields);    }    // To allow replication, we first select the db to use and then run queries    // on this db.    PMA_DBI_select_db($db) or PMA_mysqlDie(PMA_getError(), 'USE ' . PMA_backquotes($db), '', $err_url);    $sql_query    = 'ALTER TABLE ' . PMA_backquote($table) . ' ' . implode(', ', $definitions);    $result = PMA_DBI_try_query($sql_query);    if ($result === true) {        // If comments were sent, enable relation stuff        include_once './libraries/transformations.lib.php';        // Update comment table for mime types [MIME]        if (isset($_REQUEST['field_mimetype'])         && is_array($_REQUEST['field_mimetype'])         && $cfg['BrowseMIME']) {            foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {                if (isset($_REQUEST['field_name'][$fieldindex])                 && strlen($_REQUEST['field_name'][$fieldindex])) {                    PMA_setMIME($db, $table,                        $_REQUEST['field_name'][$fieldindex],                        $mimetype,                        $_REQUEST['field_transformation'][$fieldindex],                        $_REQUEST['field_transformation_options'][$fieldindex]);                }            }        }        // Go back to the structure sub-page        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';    } else {        PMA_mysqlDie('', '', '', $err_url, false);        // An error happened while inserting/updating a table definition.        // to prevent total loss of that data, we embed the form once again.        // The variable $regenerate will be used to restore data in libraries/tbl_properties.inc.php        $num_fields = $_REQUEST['orig_num_fields'];        if (isset($_REQUEST['orig_after_field'])) {            $_REQUEST['after_field'] = $_REQUEST['orig_after_field'];        }        if (isset($_REQUEST['orig_field_where'])) {            $_REQUEST['field_where'] = $_REQUEST['orig_field_where'];        }        $regenerate = true;    }} // end do alter table/** * Displays the form used to define the new field */if ($abort == false) {    /**     * Gets tables informations     */    include_once './libraries/tbl_common.php';    include_once './libraries/tbl_info.inc.php';    /**     * Displays top menu links     */    $active_page = 'tbl_structure.php';    if ($GLOBALS['is_ajax_request'] != true) {        include_once './libraries/tbl_links.inc.php';    }    /**     * Display the form     */    $action = 'tbl_addfield.php';    include_once './libraries/tbl_properties.inc.php';    // Diplays the footer    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__longToIpv4_info(){    return array(        'info' => __('Converts an (IPv4) Internet network address into a string in Internet standard dotted format.'),        );}/** * returns IPv4 address * * @see http://php.net/long2ip */function PMA_transformation_text_plain__longToIpv4($buffer, $options = array(), $meta = ''){    if ($buffer < 0 || $buffer > 4294967295) {        return $buffer;    }    return long2ip($buffer);}?>
<?php//============================================================+// File name   : htmlcolors.php// Version     : 1.0.008// Begin       : 2002-04-09// Last Update : 2010-12-16// Author      : Nicola Asuni - Tecnick.com LTD - Manor Coach House, Church Hill, Aldershot, Hants, GU12 4RQ, UK - www.tecnick.com - info@tecnick.com// License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)// -------------------------------------------------------------------// Copyright (C) 2002-2012  Nicola Asuni - Tecnick.com LTD//// This file is part of TCPDF software library.//// TCPDF is free software: you can redistribute it and/or modify it// under the terms of the GNU Lesser General Public License as// published by the Free Software Foundation, either version 3 of the// License, or (at your option) any later version.//// TCPDF is distributed in the hope that it will be useful, but// WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.// See the GNU Lesser General Public License for more details.//// You should have received a copy of the GNU Lesser General Public License// along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.//// See LICENSE.TXT file for more information.// -------------------------------------------------------------------//// Description : Array of WEB safe colors////============================================================+/** * @file * Array of WEB safe colors * @author Nicola Asuni * @package com.tecnick.tcpdf * @since 2.9.000 (2008-03-26) *//** * Array of WEB safe colors */$webcolor = array ('aliceblue' => 'f0f8ff','antiquewhite' => 'faebd7','aqua' => '00ffff','aquamarine' => '7fffd4','azure' => 'f0ffff','beige' => 'f5f5dc','bisque' => 'ffe4c4','black' => '000000','blanchedalmond' => 'ffebcd','blue' => '0000ff','blueviolet' => '8a2be2','brown' => 'a52a2a','burlywood' => 'deb887','cadetblue' => '5f9ea0','chartreuse' => '7fff00','chocolate' => 'd2691e','coral' => 'ff7f50','cornflowerblue' => '6495ed','cornsilk' => 'fff8dc','crimson' => 'dc143c','cyan' => '00ffff','darkblue' => '00008b','darkcyan' => '008b8b','darkgoldenrod' => 'b8860b','dkgray' => 'a9a9a9','darkgray' => 'a9a9a9','darkgrey' => 'a9a9a9','darkgreen' => '006400','darkkhaki' => 'bdb76b','darkmagenta' => '8b008b','darkolivegreen' => '556b2f','darkorange' => 'ff8c00','darkorchid' => '9932cc','darkred' => '8b0000','darksalmon' => 'e9967a','darkseagreen' => '8fbc8f','darkslateblue' => '483d8b','darkslategray' => '2f4f4f','darkslategrey' => '2f4f4f','darkturquoise' => '00ced1','darkviolet' => '9400d3','deeppink' => 'ff1493','deepskyblue' => '00bfff','dimgray' => '696969','dimgrey' => '696969','dodgerblue' => '1e90ff','firebrick' => 'b22222','floralwhite' => 'fffaf0','forestgreen' => '228b22','fuchsia' => 'ff00ff','gainsboro' => 'dcdcdc','ghostwhite' => 'f8f8ff','gold' => 'ffd700','goldenrod' => 'daa520','gray' => '808080','grey' => '808080','green' => '008000','greenyellow' => 'adff2f','honeydew' => 'f0fff0','hotpink' => 'ff69b4','indianred' => 'cd5c5c','indigo' => '4b0082','ivory' => 'fffff0','khaki' => 'f0e68c','lavender' => 'e6e6fa','lavenderblush' => 'fff0f5','lawngreen' => '7cfc00','lemonchiffon' => 'fffacd','lightblue' => 'add8e6','lightcoral' => 'f08080','lightcyan' => 'e0ffff','lightgoldenrodyellow' => 'fafad2','ltgray' => 'd3d3d3','lightgray' => 'd3d3d3','lightgrey' => 'd3d3d3','lightgreen' => '90ee90','lightpink' => 'ffb6c1','lightsalmon' => 'ffa07a','lightseagreen' => '20b2aa','lightskyblue' => '87cefa','lightslategray' => '778899','lightslategrey' => '778899','lightsteelblue' => 'b0c4de','lightyellow' => 'ffffe0','lime' => '00ff00','limegreen' => '32cd32','linen' => 'faf0e6','magenta' => 'ff00ff','maroon' => '800000','mediumaquamarine' => '66cdaa','mediumblue' => '0000cd','mediumorchid' => 'ba55d3','mediumpurple' => '9370d8','mediumseagreen' => '3cb371','mediumslateblue' => '7b68ee','mediumspringgreen' => '00fa9a','mediumturquoise' => '48d1cc','mediumvioletred' => 'c71585','midnightblue' => '191970','mintcream' => 'f5fffa','mistyrose' => 'ffe4e1','moccasin' => 'ffe4b5','navajowhite' => 'ffdead','navy' => '000080','oldlace' => 'fdf5e6','olive' => '808000','olivedrab' => '6b8e23','orange' => 'ffa500','orangered' => 'ff4500','orchid' => 'da70d6','palegoldenrod' => 'eee8aa','palegreen' => '98fb98','paleturquoise' => 'afeeee','palevioletred' => 'd87093','papayawhip' => 'ffefd5','peachpuff' => 'ffdab9','peru' => 'cd853f','pink' => 'ffc0cb','plum' => 'dda0dd','powderblue' => 'b0e0e6','purple' => '800080','red' => 'ff0000','rosybrown' => 'bc8f8f','royalblue' => '4169e1','saddlebrown' => '8b4513','salmon' => 'fa8072','sandybrown' => 'f4a460','seagreen' => '2e8b57','seashell' => 'fff5ee','sienna' => 'a0522d','silver' => 'c0c0c0','skyblue' => '87ceeb','slateblue' => '6a5acd','slategray' => '708090','slategrey' => '708090','snow' => 'fffafa','springgreen' => '00ff7f','steelblue' => '4682b4','tan' => 'd2b48c','teal' => '008080','thistle' => 'd8bfd8','tomato' => 'ff6347','turquoise' => '40e0d0','violet' => 'ee82ee','wheat' => 'f5deb3','white' => 'ffffff','whitesmoke' => 'f5f5f5','yellow' => 'ffff00','yellowgreen' => '9acd32');//============================================================+// END OF FILE//============================================================+
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays and handles the form where the user can change his password * linked from main.php * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'server_privileges.js';/** * Displays an error message and exits if the user isn't allowed to use this * script */if (!$cfg['ShowChgPassword']) {    $cfg['ShowChgPassword'] = PMA_DBI_select_db('mysql');}if ($cfg['Server']['auth_type'] == 'config' || !$cfg['ShowChgPassword']) {    include_once './libraries/header.inc.php';    PMA_Message::error(__('You don\'t have sufficient privileges to be here right now!'))->display();    include './libraries/footer.inc.php';} // end if/** * If the "change password" form has been submitted, checks for valid values * and submit the query or logout */if (isset($_REQUEST['nopass'])) {    // similar logic in server_privileges.php    $_error = false;    if ($_REQUEST['nopass'] == '1') {        $password = '';    } elseif (empty($_REQUEST['pma_pw']) || empty($_REQUEST['pma_pw2'])) {        $message = PMA_Message::error(__('The password is empty!'));        $_error = true;    } elseif ($_REQUEST['pma_pw'] != $_REQUEST['pma_pw2']) {        $message = PMA_Message::error(__('The passwords aren\'t the same!'));        $_error = true;    } else {        $password = $_REQUEST['pma_pw'];    }    if ($GLOBALS['is_ajax_request'] == true && $_error == true) {        /**         * If in an Ajax request, we don't need to show the rest of the page         */        PMA_ajaxResponse($message, false);    }    if (! $_error) {        // Defines the url to return to in case of error in the sql statement        $_url_params = array();        $err_url          = 'user_password.php' . PMA_generate_common_url($_url_params);        if (PMA_isValid($_REQUEST['pw_hash'], 'identical', 'old')) {            $hashing_function = 'OLD_PASSWORD';        } else {            $hashing_function = 'PASSWORD';        }        $sql_query        = 'SET password = ' . (($password == '') ? '\'\'' : $hashing_function . '(\'***\')');        $local_query      = 'SET password = ' . (($password == '') ? '\'\'' : $hashing_function . '(\'' . PMA_sqlAddSlashes($password) . '\')');        $result           = @PMA_DBI_try_query($local_query)            or PMA_mysqlDie(PMA_DBI_getError(), $sql_query, false, $err_url);        // Changes password cookie if required        // Duration = till the browser is closed for password (we don't want this to be saved)        if ($cfg['Server']['auth_type'] == 'cookie') {            $GLOBALS['PMA_Config']->setCookie('pmaPass-' . $server,                PMA_blowfish_encrypt($password, $GLOBALS['cfg']['blowfish_secret']));        } // end if        // For http auth. mode, the "back" link will also enforce new        // authentication        if ($cfg['Server']['auth_type'] == 'http') {            $_url_params['old_usr'] = 'relog';        }        $message = PMA_Message::success(__('The profile has been updated.'));        if ($GLOBALS['is_ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage($message, $sql_query, 'success');            PMA_ajaxResponse($message, true, $extra_data);        }        // Displays the page        include_once './libraries/header.inc.php';        echo '<h1>' . __('Change password') . '</h1>' . "\n\n";        PMA_showMessage($message, $sql_query, 'success');        ?>        <a href="index.php<?php echo PMA_generate_common_url($_url_params); ?>" target="_parent">            <strong><?php echo __('Back'); ?></strong></a>        <?php        include './libraries/footer.inc.php';    } // end if} // end if/** * If the "change password" form hasn't been submitted or the values submitted * aren't valid -> displays the form */// Loads the headersrequire_once './libraries/header.inc.php';echo '<h1>' . __('Change password') . '</h1>' . "\n\n";// Displays an error message if requiredif (isset($message)) {    $message->display();}require_once './libraries/display_change_password.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/** * Used to create server variables documentation links * $VARIABLE_DOC_LINKS[string $name] = array( *    string $anchor, *    string $chapter, *    string $type); * string $name: name of the system variable * string $anchor: anchor to the documentation page * string $chapter: chapter of "HTML, one page per chapter" documentation * string $type: type of system variable * string $format: if set to 'byte' it will format the variable * with PMA_formatByteDown() */$VARIABLE_DOC_LINKS = array();$VARIABLE_DOC_LINKS['auto_increment_increment'] = array(    'auto_increment_increment',    'replication-options-master',    'sysvar');$VARIABLE_DOC_LINKS['auto_increment_offset'] = array(    'auto_increment_offset',    'replication-options-master',    'sysvar');$VARIABLE_DOC_LINKS['autocommit'] = array(    'autocommit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['automatic_sp_privileges'] = array(    'automatic_sp_privileges',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['back_log'] = array(    'back_log',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['basedir'] = array(    'basedir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['big_tables'] = array(    'big-tables',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['bind_address'] = array(    'bind-address',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['binlog_cache_size'] = array(    'binlog_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['binlog_direct_non_transactional_updates'] = array(    'binlog_direct_non_transactional_updates',    'replication-options-binary-log',    'sysvar');$VARIABLE_DOC_LINKS['binlog_format'] = array(    'binlog-format',    'server-options',    'sysvar');$VARIABLE_DOC_LINKS['binlog_stmt_cache_size'] = array(    'binlog_stmt_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['bulk_insert_buffer_size'] = array(    'bulk_insert_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['character_set_client'] = array(    'character_set_client',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_connection'] = array(    'character_set_connection',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_database'] = array(    'character_set_database',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_filesystem'] = array(    'character-set-filesystem',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['character_set_results'] = array(    'character_set_results',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_server'] = array(    'character-set-server',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['character_set_system'] = array(    'character_set_system',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_sets_dir'] = array(    'character-sets-dir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['collation_connection'] = array(    'collation_connection',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['collation_database'] = array(    'collation_database',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['collation_server'] = array(    'collation-server',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['completion_type'] = array(    'completion_type',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['concurrent_insert'] = array(    'concurrent_insert',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['connect_timeout'] = array(    'connect_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['datadir'] = array(    'datadir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['date_format'] = array(    'date_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['datetime_format'] = array(    'datetime_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['debug'] = array(    'debug',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['debug_sync'] = array(    'debug_sync',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['default_storage_engine'] = array(    'default-storage-engine',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['default_week_format'] = array(    'default_week_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['delay_key_write'] = array(    'delay-key-write',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['delayed_insert_limit'] = array(    'delayed_insert_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['delayed_insert_timeout'] = array(    'delayed_insert_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['delayed_queue_size'] = array(    'delayed_queue_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['div_precision_increment'] = array(    'div_precision_increment',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['engine_condition_pushdown'] = array(    'engine-condition-pushdown',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['error_count'] = array(    'error_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['event_scheduler'] = array(    'event-scheduler',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['expire_logs_days'] = array(    'expire_logs_days',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['external_user'] = array(    'external_user',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['flush'] = array(    'flush',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['flush_time'] = array(    'flush_time',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['foreign_key_checks'] = array(    'foreign_key_checks',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_boolean_syntax'] = array(    'ft_boolean_syntax',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_max_word_len'] = array(    'ft_max_word_len',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_min_word_len'] = array(    'ft_min_word_len',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_query_expansion_limit'] = array(    'ft_query_expansion_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_stopword_file'] = array(    'ft_stopword_file',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['general_log'] = array(    'general-log',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['general_log_file'] = array(    'general_log_file',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['group_concat_max_len'] = array(    'group_concat_max_len',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_compress'] = array(    'have_compress',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_crypt'] = array(    'have_crypt',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_csv'] = array(    'have_csv',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_dynamic_loading'] = array(    'have_dynamic_loading',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_geometry'] = array(    'have_geometry',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_innodb'] = array(    'have_innodb',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_openssl'] = array(    'have_openssl',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_partitioning'] = array(    'have_partitioning',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_profiling'] = array(    'have_profiling',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_query_cache'] = array(    'have_query_cache',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_rtree_keys'] = array(    'have_rtree_keys',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_ssl'] = array(    'have_ssl',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_symlink'] = array(    'have_symlink',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['hostname'] = array(    'hostname',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['identity'] = array(    'identity',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ignore_builtin_innodb'] = array(    'ignore-builtin-innodb',    'innodb-parameters',    'option_mysqld');$VARIABLE_DOC_LINKS['init_connect'] = array(    'init_connect',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['init_file'] = array(    'init-file',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['init_slave'] = array(    'init_slave',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['innodb_adaptive_flushing'] = array(    'innodb_adaptive_flushing',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_adaptive_hash_index'] = array(    'innodb_adaptive_hash_index',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_additional_mem_pool_size'] = array(    'innodb_additional_mem_pool_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_autoextend_increment'] = array(    'innodb_autoextend_increment',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_autoinc_lock_mode'] = array(    'innodb_autoinc_lock_mode',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_buffer_pool_instances'] = array(    'innodb_buffer_pool_instances',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_buffer_pool_size'] = array(    'innodb_buffer_pool_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_change_buffering'] = array(    'innodb_change_buffering',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_checksums'] = array(    'innodb_checksums',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_commit_concurrency'] = array(    'innodb_commit_concurrency',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_concurrency_tickets'] = array(    'innodb_concurrency_tickets',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_data_file_path'] = array(    'innodb_data_file_path',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_data_home_dir'] = array(    'innodb_data_home_dir',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_doublewrite'] = array(    'innodb_doublewrite',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_fast_shutdown'] = array(    'innodb_fast_shutdown',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_format'] = array(    'innodb_file_format',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_format_check'] = array(    'innodb_file_format_check',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_format_max'] = array(    'innodb_file_format_max',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_per_table'] = array(    'innodb_file_per_table',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_flush_log_at_trx_commit'] = array(    'innodb_flush_log_at_trx_commit',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_flush_method'] = array(    'innodb_flush_method',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_force_recovery'] = array(    'innodb_force_recovery',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_io_capacity'] = array(    'innodb_io_capacity',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_lock_wait_timeout'] = array(    'innodb_lock_wait_timeout',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_locks_unsafe_for_binlog'] = array(    'innodb_locks_unsafe_for_binlog',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_log_buffer_size'] = array(    'innodb_log_buffer_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_log_file_size'] = array(    'innodb_log_file_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_log_files_in_group'] = array(    'innodb_log_files_in_group',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_log_group_home_dir'] = array(    'innodb_log_group_home_dir',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_max_dirty_pages_pct'] = array(    'innodb_max_dirty_pages_pct',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_max_purge_lag'] = array(    'innodb_max_purge_lag',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_mirrored_log_groups'] = array(    'innodb_mirrored_log_groups',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_old_blocks_pct'] = array(    'innodb_old_blocks_pct',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_old_blocks_time'] = array(    'innodb_old_blocks_time',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_open_files'] = array(    'innodb_open_files',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_purge_batch_size'] = array(    'innodb_purge_batch_size',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_purge_threads'] = array(    'innodb_purge_threads',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_read_ahead_threshold'] = array(    'innodb_read_ahead_threshold',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_read_io_threads'] = array(    'innodb_read_io_threads',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_replication_delay'] = array(    'innodb_replication_delay',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_rollback_on_timeout'] = array(    'innodb_rollback_on_timeout',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_spin_wait_delay'] = array(    'innodb_spin_wait_delay',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_stats_on_metadata'] = array(    'innodb_stats_on_metadata',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_stats_sample_pages'] = array(    'innodb_stats_sample_pages',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_strict_mode'] = array(    'innodb_strict_mode',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_support_xa'] = array(    'innodb_support_xa',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_sync_spin_loops'] = array(    'innodb_sync_spin_loops',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_table_locks'] = array(    'innodb_table_locks',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_thread_concurrency'] = array(    'innodb_thread_concurrency',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_thread_sleep_delay'] = array(    'innodb_thread_sleep_delay',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_use_native_aio'] = array(    'innodb_use_native_aio',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_use_sys_malloc'] = array(    'innodb_use_sys_malloc',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_version'] = array(    'innodb_version',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_write_io_threads'] = array(    'innodb_write_io_threads',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['insert_id'] = array(    'insert_id',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['interactive_timeout'] = array(    'interactive_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['join_buffer_size'] = array(    'join_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['keep_files_on_create'] = array(    'keep_files_on_create',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['key_buffer_size'] = array(    'key_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['key_cache_age_threshold'] = array(    'key_cache_age_threshold',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['key_cache_block_size'] = array(    'key_cache_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['key_cache_division_limit'] = array(    'key_cache_division_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['language'] = array(    'language',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['large_files_support'] = array(    'large_files_support',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['large_page_size'] = array(    'large_page_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['large_pages'] = array(    'large-pages',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['last_insert_id'] = array(    'last_insert_id',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['lc_messages'] = array(    'lc-messages',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['lc_messages_dir'] = array(    'lc-messages-dir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['lc_time_names'] = array(    'lc_time_names',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['license'] = array(    'license',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['local_infile'] = array(    'local_infile',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['lock_wait_timeout'] = array(    'lock_wait_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['locked_in_memory'] = array(    'locked_in_memory',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['log'] = array(    'log',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_bin'] = array(    'log_bin',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['log-bin'] = array(    'log-bin',    'replication-options-binary-log',    'option_mysqld');$VARIABLE_DOC_LINKS['log_bin_trust_function_creators'] = array(    'log-bin-trust-function-creators',    'replication-options-binary-log',    'option_mysqld');$VARIABLE_DOC_LINKS['log_error'] = array(    'log-error',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_output'] = array(    'log-output',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_queries_not_using_indexes'] = array(    'log-queries-not-using-indexes',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_slave_updates'] = array(    'log-slave-updates',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['log_slow_queries'] = array(    'log-slow-queries',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_warnings'] = array(    'log-warnings',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['long_query_time'] = array(    'long_query_time',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['low_priority_updates'] = array(    'low-priority-updates',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['lower_case_file_system'] = array(    'lower_case_file_system',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['lower_case_table_names'] = array(    'lower_case_table_names',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['master-bind'] = array(    '',    'replication-options',    0);$VARIABLE_DOC_LINKS['max_allowed_packet'] = array(    'max_allowed_packet',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_binlog_cache_size'] = array(    'max_binlog_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_binlog_size'] = array(    'max_binlog_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_binlog_stmt_cache_size'] = array(    'max_binlog_stmt_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_connect_errors'] = array(    'max_connect_errors',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_connections'] = array(    'max_connections',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_delayed_threads'] = array(    'max_delayed_threads',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_error_count'] = array(    'max_error_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_heap_table_size'] = array(    'max_heap_table_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_insert_delayed_threads'] = array(    'max_insert_delayed_threads',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_join_size'] = array(    'max_join_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_length_for_sort_data'] = array(    'max_length_for_sort_data',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_prepared_stmt_count'] = array(    'max_prepared_stmt_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_relay_log_size'] = array(    'max_relay_log_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_seeks_for_key'] = array(    'max_seeks_for_key',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_sort_length'] = array(    'max_sort_length',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_sp_recursion_depth'] = array(    'max_sp_recursion_depth',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_tmp_tables'] = array(    'max_tmp_tables',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_user_connections'] = array(    'max_user_connections',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_write_lock_count'] = array(    'max_write_lock_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['memlock'] = array(    'memlock',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['min_examined_row_limit'] = array(    'min-examined-row-limit',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['myisam_data_pointer_size'] = array(    'myisam_data_pointer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_max_sort_file_size'] = array(    'myisam_max_sort_file_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_mmap_size'] = array(    'myisam_mmap_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_recover_options'] = array(    'myisam_recover_options',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['myisam_repair_threads'] = array(    'myisam_repair_threads',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['myisam_sort_buffer_size'] = array(    'myisam_sort_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_stats_method'] = array(    'myisam_stats_method',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['myisam_use_mmap'] = array(    'myisam_use_mmap',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['named_pipe'] = array(    'named_pipe',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_buffer_length'] = array(    'net_buffer_length',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_read_timeout'] = array(    'net_read_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_retry_count'] = array(    'net_retry_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_write_timeout'] = array(    'net_write_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['new'] = array(    'new',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['old'] = array(    'old',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['old_alter_table'] = array(    'old-alter-table',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['old_passwords'] = array(    'old-passwords',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['open_files_limit'] = array(    'open-files-limit',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['optimizer_prune_level'] = array(    'optimizer_prune_level',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['optimizer_search_depth'] = array(    'optimizer_search_depth',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['optimizer_switch'] = array(    'optimizer_switch',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['partition'] = array(    'partition',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['performance_schema'] = array(    'performance_schema',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_events_waits_history_long_size'] = array(    'performance_schema_events_waits_history_long_size',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_events_waits_history_size'] = array(    'performance_schema_events_waits_history_size',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_cond_classes'] = array(    'performance_schema_max_cond_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_cond_instances'] = array(    'performance_schema_max_cond_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_file_classes'] = array(    'performance_schema_max_file_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_file_handles'] = array(    'performance_schema_max_file_handles',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_file_instances'] = array(    'performance_schema_max_file_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_mutex_classes'] = array(    'performance_schema_max_mutex_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_mutex_instances'] = array(    'performance_schema_max_mutex_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_rwlock_classes'] = array(    'performance_schema_max_rwlock_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_rwlock_instances'] = array(    'performance_schema_max_rwlock_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_table_handles'] = array(    'performance_schema_max_table_handles',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_table_instances'] = array(    'performance_schema_max_table_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_thread_classes'] = array(    'performance_schema_max_thread_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_thread_instances'] = array(    'performance_schema_max_thread_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['pid_file'] = array(    'pid-file',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['plugin_dir'] = array(    'plugin_dir',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['port'] = array(    'port',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['preload_buffer_size'] = array(    'preload_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['profiling'] = array(    'profiling',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['profiling_history_size'] = array(    'profiling_history_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['protocol_version'] = array(    'protocol_version',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['proxy_user'] = array(    'proxy_user',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['pseudo_thread_id'] = array(    'pseudo_thread_id',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_alloc_block_size'] = array(    'query_alloc_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['query_cache_limit'] = array(    'query_cache_limit',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['query_cache_min_res_unit'] = array(    'query_cache_min_res_unit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_cache_size'] = array(    'query_cache_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['query_cache_type'] = array(    'query_cache_type',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_cache_wlock_invalidate'] = array(    'query_cache_wlock_invalidate',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_prealloc_size'] = array(    'query_prealloc_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['rand_seed1'] = array(    'rand_seed1',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rand_seed2'] = array(    'rand_seed2',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['range_alloc_block_size'] = array(    'range_alloc_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['read_buffer_size'] = array(    'read_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['read_only'] = array(    'read_only',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['read_rnd_buffer_size'] = array(    'read_rnd_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['relay-log-index'] = array(    'relay-log-index',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['relay_log_index'] = array(    'relay_log_index',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_info_file'] = array(    'relay_log_info_file',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_purge'] = array(    'relay_log_purge',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_recovery'] = array(    'relay_log_recovery',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_space_limit'] = array(    'relay_log_space_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['report_host'] = array(    'report-host',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['report_password'] = array(    'report-password',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['report_port'] = array(    'report-port',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['report_user'] = array(    'report-user',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['rpl_recovery_rank'] = array(    'rpl_recovery_rank',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_enabled'] = array(    'rpl_semi_sync_master_enabled',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_timeout'] = array(    'rpl_semi_sync_master_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_trace_level'] = array(    'rpl_semi_sync_master_trace_level',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_wait_no_slave'] = array(    'rpl_semi_sync_master_wait_no_slave',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_slave_enabled'] = array(    'rpl_semi_sync_slave_enabled',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_slave_trace_level'] = array(    'rpl_semi_sync_slave_trace_level',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['safe_show_database'] = array(    'safe-show-database',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['secure_auth'] = array(    'secure-auth',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['secure_file_priv'] = array(    'secure-file-priv',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['server_id'] = array(    'server-id',    'replication-options',    'option_mysqld');$VARIABLE_DOC_LINKS['shared_memory'] = array(    'shared_memory',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['shared_memory_base_name'] = array(    'shared_memory_base_name',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['skip_external_locking'] = array(    'skip-external-locking',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['skip_name_resolve'] = array(    'skip-name-resolve',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['skip_networking'] = array(    'skip-networking',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['skip_show_database'] = array(    'skip-show-database',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_compressed_protocol'] = array(    'slave_compressed_protocol',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slave_exec_mode'] = array(    'slave_exec_mode',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slave_load_tmpdir'] = array(    'slave-load-tmpdir',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_net_timeout'] = array(    'slave-net-timeout',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_skip_errors'] = array(    'slave-skip-errors',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_transaction_retries'] = array(    'slave_transaction_retries',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slave_type_conversions'] = array(    'slave_type_conversions',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slow_launch_time'] = array(    'slow_launch_time',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['slow_query_log'] = array(    'slow-query-log',    'server-options',    'server-system-variables');$VARIABLE_DOC_LINKS['slow_query_log_file'] = array(    'slow_query_log_file',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['socket'] = array(    'socket',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['sort_buffer_size'] = array(    'sort_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['sql_auto_is_null'] = array(    'sql_auto_is_null',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_big_selects'] = array(    'sql_big_selects',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_big_tables'] = array(    'big-tables',    'server-options',    'server-system-variables');$VARIABLE_DOC_LINKS['sql_buffer_result'] = array(    'sql_buffer_result',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_log_bin'] = array(    'sql_log_bin',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_log_off'] = array(    'sql_log_off',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_log_update'] = array(    'sql_log_update',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_low_priority_updates'] = array(    'sql_low_priority_updates',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_max_join_size'] = array(    'sql_max_join_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_mode'] = array(    'sql-mode',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['sql_notes'] = array(    'sql_notes',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_quote_show_create'] = array(    'sql_quote_show_create',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_safe_updates'] = array(    'sql_safe_updates',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_select_limit'] = array(    'sql_select_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_slave_skip_counter'] = array(    'sql_slave_skip_counter',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['sql_warnings'] = array(    'sql_warnings',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ssl_ca'] = array(    'ssl-ca',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_capath'] = array(    'ssl-capath',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_cert'] = array(    'ssl-cert',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_cipher'] = array(    'ssl-cipher',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_key'] = array(    'ssl-key',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['storage_engine'] = array(    'storage_engine',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sync_binlog'] = array(    'sync_binlog',    'replication-options-binary-log',    'sysvar');$VARIABLE_DOC_LINKS['sync_frm'] = array(    'sync_frm',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sync_master_info'] = array(    'sync_master_info',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['sync_relay_log'] = array(    'sync_relay_log',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['sync_relay_log_info'] = array(    'sync_relay_log_info',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['system_time_zone'] = array(    'system_time_zone',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_definition_cache'] = array(    'table_definition_cache',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_lock_wait_timeout'] = array(    'table_lock_wait_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_open_cache'] = array(    'table_open_cache',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_type'] = array(    'table_type',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_cache_size'] = array(    'thread_cache_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_concurrency'] = array(    'thread_concurrency',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_handling'] = array(    'thread_handling',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_stack'] = array(    'thread_stack',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['time_format'] = array(    'time_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['time_zone'] = array(    'time_zone',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['timed_mutexes'] = array(    'timed_mutexes',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['timestamp'] = array(    'timestamp',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['tmp_table_size'] = array(    'tmp_table_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['tmpdir'] = array(    'tmpdir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['transaction_alloc_block_size'] = array(    'transaction_alloc_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['transaction_prealloc_size'] = array(    'transaction_prealloc_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['tx_isolation'] = array(    'tx_isolation',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['unique_checks'] = array(    'unique_checks',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['updatable_views_with_limit'] = array(    'updatable_views_with_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version'] = array(    'version',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version_comment'] = array(    'version_comment',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version_compile_machine'] = array(    'version_compile_machine',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version_compile_os'] = array(    'version_compile_os',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['wait_timeout'] = array(    'wait_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['warning_count'] = array(    'warning_count',    'server-system-variables',    'sysvar');?>
<?php/** * Library that provides common functions that are used to help integrating Swekey Authentication in a PHP web site * Version 1.0 * * History: * 1.2 Use curl (widely installed) to query the server *     Fixed a possible tempfile race attack *     Random token cache can now be disabled * 1.1 Added Swekey_HttpGet function that support faulty servers *     Support for custom servers * 1.0 First release * * @package Swekey *//** * Errors codes */define ("SWEKEY_ERR_INVALID_DEV_STATUS", 901);   // The satus of the device is not SWEKEY_STATUS_OKdefine ("SWEKEY_ERR_INTERNAL", 902);             // Should never occurddefine ("SWEKEY_ERR_OUTDATED_RND_TOKEN", 910);   // You random token is too olddefine ("SWEKEY_ERR_INVALID_OTP", 911);          // The otp was not correct/** * Those errors are considered as an attack and your site will be blacklisted during one minute * if you receive one of those errors */define ("SWEKEY_ERR_BADLY_ENCODED_REQUEST", 920);define ("SWEKEY_ERR_INVALID_RND_TOKEN", 921);define ("SWEKEY_ERR_DEV_NOT_FOUND", 922);/** * Default values for configuration. */define ('SWEKEY_DEFAULT_CHECK_SERVER', 'https://auth-check.musbe.net');define ('SWEKEY_DEFAULT_RND_SERVER', 'https://auth-rnd-gen.musbe.net');define ('SWEKEY_DEFAULT_STATUS_SERVER', 'https://auth-status.musbe.net');/** * The last error of an operation is alway put in this global var */global $gSwekeyLastError;$gSwekeyLastError = 0;global $gSwekeyLastResult;$gSwekeyLastResult = "<not set>";/** * Servers addresses * Use the  Swekey_SetXxxServer($server) functions to set them */global $gSwekeyCheckServer;if (! isset($gSwekeyCheckServer))    $gSwekeyCheckServer = SWEKEY_DEFAULT_CHECK_SERVER;global $gSwekeyRndTokenServer;if (! isset($gSwekeyRndTokenServer))    $gSwekeyRndTokenServer = SWEKEY_DEFAULT_RND_SERVER;global $gSwekeyStatusServer;if (! isset($gSwekeyStatusServer))    $gSwekeyStatusServer = SWEKEY_DEFAULT_STATUS_SERVER;global $gSwekeyCA;global $gSwekeyTokenCacheEnabled;if (! isset($gSwekeyTokenCacheEnabled))    $gSwekeyTokenCacheEnabled = true;/** *  Change the address of the Check server. *  If $server is empty the default value 'http://auth-check.musbe.net' will be used * *  @param  server              The protocol and hostname to use *  @access public */function Swekey_SetCheckServer($server){    global $gSwekeyCheckServer;    if (empty($server))        $gSwekeyCheckServer = SWEKEY_DEFAULT_CHECK_SERVER;    else        $gSwekeyCheckServer = $server;}/** *  Change the address of the Random Token Generator server. *  If $server is empty the default value 'http://auth-rnd-gen.musbe.net' will be used * *  @param  server              The protocol and hostname to use *  @access public */function Swekey_SetRndTokenServer($server){    global $gSwekeyRndTokenServer;    if (empty($server))        $gSwekeyRndTokenServer = SWEKEY_DEFAULT_RND_SERVER;    else        $gSwekeyRndTokenServer = $server;}/** *  Change the address of the Satus server. *  If $server is empty the default value 'http://auth-status.musbe.net' will be used * *  @param  server              The protocol and hostname to use *  @access public */function Swekey_SetStatusServer($server){    global $gSwekeyStatusServer;    if (empty($server))        $gSwekeyStatusServer = SWEKEY_DEFAULT_STATUS_SERVER;    else        $gSwekeyStatusServer = $server;}/** *  Change the certificat file in case of the the severs use https instead of http * *  @param  cafile              The path of the crt file to use *  @access public */function Swekey_SetCAFile($cafile){    global $gSwekeyCA;       $gSwekeyCA = $cafile;}/** *  Enable or disable the random token caching *  Because everybody has full access to the cache file, it can be a DOS vulnerability *  So disable it if you are running in a non secure enviromnement * *  @param  $enable *  @access public */function Swekey_EnableTokenCache($enable){    global $gSwekeyTokenCacheEnabled;    $gSwekeyTokenCacheEnabled = ! empty($enable);}/** *  Return the last error. * *  @return                     The Last Error *  @access public */function Swekey_GetLastError(){    global $gSwekeyLastError;    return $gSwekeyLastError;}/** *  Return the last result. * *  @return                     The Last Error *  @access public */function Swekey_GetLastResult(){    global $gSwekeyLastResult;    return $gSwekeyLastResult;}/** *  Send a synchronous request to the  server. *  This function manages timeout then will not block if one of the server is down * *  @param  url                 The url to get *  @param  response_code       The response code *  @return                     The body of the response or "" in case of error *  @access private */function Swekey_HttpGet($url, &$response_code){    global $gSwekeyLastError;    $gSwekeyLastError = 0;    global $gSwekeyLastResult;    $gSwekeyLastResult = "<not set>";     // use curl if available    if (function_exists('curl_init')) {        $sess = curl_init($url);        if (substr($url, 0, 8) == "https://") {            global $gSwekeyCA;            if (! empty($gSwekeyCA)) {                if (file_exists($gSwekeyCA)) {                    if (! curl_setopt($sess, CURLOPT_CAINFO, $gSwekeyCA)) {                        error_log("SWEKEY_ERROR:Could not set CA file : ".curl_error($sess));                    } else {                        $caFileOk = true;                    }                } else {                    error_log("SWEKEY_ERROR:Could not find CA file $gSwekeyCA getting $url");                }            }            curl_setopt($sess, CURLOPT_SSL_VERIFYHOST, '2');            curl_setopt($sess, CURLOPT_SSL_VERIFYPEER, '2');            curl_setopt($sess, CURLOPT_CONNECTTIMEOUT, '20');            curl_setopt($sess, CURLOPT_TIMEOUT, '20');        } else {            curl_setopt($sess, CURLOPT_CONNECTTIMEOUT, '3');            curl_setopt($sess, CURLOPT_TIMEOUT, '5');        }        curl_setopt($sess, CURLOPT_RETURNTRANSFER, '1');        $res=curl_exec($sess);        $response_code = curl_getinfo($sess, CURLINFO_HTTP_CODE);        $curlerr = curl_error($sess);        curl_close($sess);        if ($response_code == 200) {            $gSwekeyLastResult = $res;            return $res;        }        if (! empty($response_code)) {            $gSwekeyLastError = $response_code;            error_log("SWEKEY_ERROR:Error $gSwekeyLastError ($curlerr) getting $url");            return "";        }        $response_code = 408; // Request Timeout        $gSwekeyLastError = $response_code;        error_log("SWEKEY_ERROR:Error $curlerr getting $url");        return "";    }    // use pecl_http if available    if (class_exists('HttpRequest')) {        // retry if one of the server is down        for ($num=1; $num <= 3; $num++ ) {            $r = new HttpRequest($url);            $options = array('timeout' => '3');            if (substr($url, 0, 6) == "https:") {                $sslOptions = array();                $sslOptions['verifypeer'] = true;                $sslOptions['verifyhost'] = true;                $capath = __FILE__;                $name = strrchr($capath, '/');                // windows                if (empty($name)) {                    $name = strrchr($capath, '\\');                }                $capath = substr($capath, 0, strlen($capath) - strlen($name) + 1).'musbe-ca.crt';                if (! empty($gSwekeyCA)) {                    $sslOptions['cainfo'] = $gSwekeyCA;                }                $options['ssl'] = $sslOptions;            }            $r->setOptions($options); //           try            {               $reply = $r->send();               $res = $reply->getBody();               $info = $r->getResponseInfo();               $response_code = $info['response_code'];               if ($response_code != 200)               {                    $gSwekeyLastError = $response_code;                    error_log("SWEKEY_ERROR:Error ".$gSwekeyLastError." getting ".$url);                    return "";               }               $gSwekeyLastResult = $res;               return $res;            } //           catch (HttpException $e) //           { //               error_log("SWEKEY_WARNING:HttpException ".$e." getting ".$url); //           }        }        $response_code = 408; // Request Timeout        $gSwekeyLastError = $response_code;        error_log("SWEKEY_ERROR:Error ".$gSwekeyLastError." getting ".$url);        return "";    }       global $http_response_header;    $res = @file_get_contents($url);    $response_code = substr($http_response_header[0], 9, 3); //HTTP/1.0    if ($response_code == 200) {       $gSwekeyLastResult = $res;       return $res;    }    $gSwekeyLastError = $response_code;    error_log("SWEKEY_ERROR:Error ".$response_code." getting ".$url);    return "";}/** *  Get a Random Token from a Token Server *  The RT is a 64 vhars hexadecimal value *  You should better use Swekey_GetFastRndToken() for performance *  @access public */function Swekey_GetRndToken(){    global $gSwekeyRndTokenServer;    return Swekey_HttpGet($gSwekeyRndTokenServer.'/FULL-RND-TOKEN', $response_code);}/** *  Get a Half Random Token from a Token Server *  The RT is a 64 vhars hexadecimal value *  Use this value if you want to make your own Swekey_GetFastRndToken() *  @access public */function Swekey_GetHalfRndToken(){    global $gSwekeyRndTokenServer;    return Swekey_HttpGet($gSwekeyRndTokenServer.'/HALF-RND-TOKEN', $response_code);}/** *  Get a Half Random Token *  The RT is a 64 vhars hexadecimal value *  This function get a new random token and reuse it. *  Token are refetched from the server only once every 30 seconds. *  You should always use this function to get half random token. *  @access public */function Swekey_GetFastHalfRndToken(){    global $gSwekeyTokenCacheEnabled;    $res = "";    $cachefile = "";    // We check if we have a valid RT is the session    if (isset($_SESSION['rnd-token-date'])) {        if (time() - $_SESSION['rnd-token-date'] < 30) {             $res = $_SESSION['rnd-token'];        }    }    // If not we try to get it from a temp file (PHP >= 5.2.1 only)    if (strlen($res) != 32 && $gSwekeyTokenCacheEnabled) {        if (function_exists('sys_get_temp_dir')) {            $tempdir = sys_get_temp_dir();            $cachefile = $tempdir."/swekey-rnd-token-".get_current_user();            $modif = filemtime($cachefile);            if ($modif != false) {                if (time() - $modif < 30) {                    $res = @file_get_contents($cachefile);                    if (strlen($res) != 32) {                         $res = "";                    } else {                         $_SESSION['rnd-token'] = $res;                         $_SESSION['rnd-token-date'] = $modif;                    }                }            }        }    }    // If we don't have a valid RT here we have to get it from the server    if (strlen($res) != 32) {        $res = substr(Swekey_GetHalfRndToken(), 0, 32);        $_SESSION['rnd-token'] = $res;        $_SESSION['rnd-token-date'] = time();        if (! empty($cachefile)) {            // we unlink the file so no possible tempfile race attack            unlink($cachefile);            $file = fopen($cachefile, "x");            if ($file != false) {                @fwrite($file, $res);                @fclose($file);            }        }    }   return $res."00000000000000000000000000000000";}/** *  Get a Random Token *  The RT is a 64 vhars hexadecimal value *  This function generates a unique random token for each call but call the *  server only once every 30 seconds. *  You should always use this function to get random token. *  @access public */function Swekey_GetFastRndToken(){    $res = Swekey_GetFastHalfRndToken();    if (strlen($res) == 64)        return substr($res, 0, 32).strtoupper(md5("Musbe Authentication Key" + mt_rand() + date(DATE_ATOM)));    return "";}/** *  Checks that an OTP generated by a Swekey is valid * *  @param  id                  The id of the swekey *  @param rt                   The random token used to generate the otp *  @param otp                  The otp generated by the swekey *  @return                     true or false *  @access public */function Swekey_CheckOtp($id, $rt, $otp){    global $gSwekeyCheckServer;    $res = Swekey_HttpGet($gSwekeyCheckServer.'/CHECK-OTP/'.$id.'/'.$rt.'/'.$otp, $response_code);    return $response_code == 200 && $res == "OK";}/** * Values that are associated with a key. * The following values can be returned by the Swekey_GetStatus() function */define ("SWEKEY_STATUS_OK", 0);define ("SWEKEY_STATUS_NOT_FOUND", 1);  // The key does not exist in the dbdefine ("SWEKEY_STATUS_INACTIVE", 2);   // The key has never been activateddefine ("SWEKEY_STATUS_LOST", 3);       // The user has lost his keydefine ("SWEKEY_STATUS_STOLEN", 4);       // The key was stolendefine ("SWEKEY_STATUS_FEE_DUE", 5);       // The annual fee was not paiddefine ("SWEKEY_STATUS_OBSOLETE", 6);   // The hardware is no longer supporteddefine ("SWEKEY_STATUS_UNKOWN", 201);   // We could not connect to the authentication server/** * Values that are associated with a key. * The Javascript Api can also return the following values */define ("SWEKEY_STATUS_REPLACED", 100);     // This key has been replaced by a backup keydefine ("SWEKEY_STATUS_BACKUP_KEY", 101); // This key is a backup key that is not activated yetdefine ("SWEKEY_STATUS_NOTPLUGGED", 200); // This key is not plugged in the computer/** *  Return the text corresponding to the integer status of a key * *  @param  status              The status *  @return                     The text corresponding to the status *  @access public */function Swekey_GetStatusStr($status){    switch($status)    {       case SWEKEY_STATUS_OK            : return 'OK';       case SWEKEY_STATUS_NOT_FOUND        : return 'Key does not exist in the db';       case SWEKEY_STATUS_INACTIVE        : return 'Key not activated';       case SWEKEY_STATUS_LOST            : return 'Key was lost';       case SWEKEY_STATUS_STOLEN        : return 'Key was stolen';       case SWEKEY_STATUS_FEE_DUE        : return 'The annual fee was not paid';       case SWEKEY_STATUS_OBSOLETE        : return 'Key no longer supported';       case SWEKEY_STATUS_REPLACED        : return 'This key has been replaced by a backup key';       case SWEKEY_STATUS_BACKUP_KEY    : return 'This key is a backup key that is not activated yet';       case SWEKEY_STATUS_NOTPLUGGED    : return 'This key is not plugged in the computer';       case SWEKEY_STATUS_UNKOWN        : return 'Unknow Status, could not connect to the authentication server';    }    return 'unknown status '.$status;}/** *  If your web site requires a key to login you should check that the key *  is still valid (has not been lost or stolen) before requiring it. *  A key can be authenticated only if its status is SWEKEY_STATUS_OK *  @param  id                  The id of the swekey *  @return                     The status of the swekey *  @access public */function Swekey_GetStatus($id){    global $gSwekeyStatusServer;    $res = Swekey_HttpGet($gSwekeyStatusServer.'/GET-STATUS/'.$id, $response_code);    if ($response_code == 200)        return intval($res);    return SWEKEY_STATUS_UNKOWN;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * phpMyAdmin sample configuration, you can use it as base for * manual configuration. For easier setup you can use setup/ * * All directives are explained in Documentation.html and on phpMyAdmin * wiki <http://wiki.phpmyadmin.net>. * * @package PhpMyAdmin *//* * This is needed for cookie based authentication to encrypt password in * cookie */$cfg['blowfish_secret'] = 'a8b7c6d'; /* YOU MUST FILL IN THIS FOR COOKIE AUTH! *//* * Servers configuration */$i = 0;/* * First server */$i++;/* Authentication type */$cfg['Servers'][$i]['auth_type'] = 'cookie';/* Server parameters */$cfg['Servers'][$i]['host'] = 'localhost';$cfg['Servers'][$i]['connect_type'] = 'tcp';$cfg['Servers'][$i]['compress'] = false;/* Select mysql if your server does not have mysqli */$cfg['Servers'][$i]['extension'] = 'mysqli';$cfg['Servers'][$i]['AllowNoPassword'] = false;/* * phpMyAdmin configuration storage settings. *//* User used to manipulate with storage */// $cfg['Servers'][$i]['controlhost'] = '';// $cfg['Servers'][$i]['controluser'] = 'pma';// $cfg['Servers'][$i]['controlpass'] = 'pmapass';/* Storage database and tables */// $cfg['Servers'][$i]['pmadb'] = 'phpmyadmin';// $cfg['Servers'][$i]['bookmarktable'] = 'pma_bookmark';// $cfg['Servers'][$i]['relation'] = 'pma_relation';// $cfg['Servers'][$i]['table_info'] = 'pma_table_info';// $cfg['Servers'][$i]['table_coords'] = 'pma_table_coords';// $cfg['Servers'][$i]['pdf_pages'] = 'pma_pdf_pages';// $cfg['Servers'][$i]['column_info'] = 'pma_column_info';// $cfg['Servers'][$i]['history'] = 'pma_history';// $cfg['Servers'][$i]['table_uiprefs'] = 'pma_table_uiprefs';// $cfg['Servers'][$i]['tracking'] = 'pma_tracking';// $cfg['Servers'][$i]['designer_coords'] = 'pma_designer_coords';// $cfg['Servers'][$i]['userconfig'] = 'pma_userconfig';// $cfg['Servers'][$i]['recent'] = 'pma_recent';// $cfg['Servers'][$i]['table_uiprefs'] = 'pma_table_uiprefs';/* Contrib / Swekey authentication */// $cfg['Servers'][$i]['auth_swekey_config'] = '/etc/swekey-pma.conf';/* * End of servers configuration *//* * Directories for saving/loading files from server */$cfg['UploadDir'] = '';$cfg['SaveDir'] = '';/** * Defines whether a user should be displayed a "show all (records)" * button in browse mode or not. * default = false *///$cfg['ShowAll'] = true;/** * Number of rows displayed when browsing a result set. If the result * set contains more rows, "Previous" and "Next". * default = 30 *///$cfg['MaxRows'] = 50;/** * Use graphically less intense menu tabs * default = false *///$cfg['LightTabs'] = true;/** * disallow editing of binary fields * valid values are: *   false  allow editing *   'blob' allow editing except for BLOB fields *   'all'  disallow editing * default = blob *///$cfg['ProtectBinary'] = 'false';/** * Default language to use, if not browser-defined or user-defined * (you find all languages in the locale folder) * uncomment the desired line: * default = 'en' *///$cfg['DefaultLang'] = 'en';//$cfg['DefaultLang'] = 'de';/** * default display direction (horizontal|vertical|horizontalflipped) *///$cfg['DefaultDisplay'] = 'vertical';/** * How many columns should be used for table display of a database? * (a value larger than 1 results in some information being hidden) * default = 1 *///$cfg['PropertiesNumColumns'] = 2;/** * Set to true if you want DB-based query history.If false, this utilizes * JS-routines to display query history (lost by window close) * * This requires configuration storage enabled, see above. * default = false *///$cfg['QueryHistoryDB'] = true;/** * When using DB-based query history, how many entries should be kept? * * default = 25 *///$cfg['QueryHistoryMax'] = 100;/* * You can find more configuration options in Documentation.html * or here: http://wiki.phpmyadmin.net/pma/Config */?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Prepares the work and runs some other scripts if required */if (! empty($submit_mult) && $submit_mult != __('With selected:') && (! empty($selected_db)  || ! empty($selected_tbl)  || ! empty($selected_fld)  || ! empty($rows_to_delete))) {    define('PMA_SUBMIT_MULT', 1);    if (isset($selected_db) && !empty($selected_db)) {        // coming from server database view - do something with selected databases        $selected     = $selected_db;        $what         = 'drop_db';    } elseif (isset($selected_tbl) && !empty($selected_tbl)) {        // coming from database structure view - do something with selected tables        if ($submit_mult == 'print') {            include './tbl_printview.php';        } else {           $selected = $selected_tbl;           switch ($submit_mult) {               case 'add_prefix_tbl':               case 'replace_prefix_tbl':               case 'copy_tbl_change_prefix':               case 'drop_db':               case 'drop_tbl':               case 'empty_tbl':                   $what = $submit_mult;                   break;               case 'check_tbl':               case 'optimize_tbl':               case 'repair_tbl':               case 'analyze_tbl':                   $query_type = $submit_mult;                   unset($submit_mult);                   $mult_btn   = __('Yes');                   break;               case 'export':                   unset($submit_mult);                   include 'db_export.php';                   exit;                   break;           } // end switch        }    } elseif (isset($selected_fld) && !empty($selected_fld)) {        // coming from table structure view - do something with selected columns/fileds        $selected     = $selected_fld;        switch ($submit_mult) {            case 'drop':                $what     = 'drop_fld';                break;            case 'primary':                // Gets table primary key                PMA_DBI_select_db($db);                $result      = PMA_DBI_query('SHOW KEYS FROM ' . PMA_backquote($table) . ';');                $primary     = '';                while ($row = PMA_DBI_fetch_assoc($result)) {                    // Backups the list of primary keys                    if ($row['Key_name'] == 'PRIMARY') {                        $primary .= $row['Column_name'] . ', ';                    }                } // end while                PMA_DBI_free_result($result);                if (empty($primary)) {                    // no primary key, so we can safely create new                    unset($submit_mult);                    $query_type = 'primary_fld';                    $mult_btn   = __('Yes');                } else {                    // primary key exists, so lets as user                    $what = 'primary_fld';                }                break;            case 'index':                unset($submit_mult);                $query_type = 'index_fld';                $mult_btn   = __('Yes');                break;            case 'unique':                unset($submit_mult);                $query_type = 'unique_fld';                $mult_btn   = __('Yes');                break;            case 'spatial':                unset($submit_mult);                $query_type = 'spatial_fld';                $mult_btn   = __('Yes');                break;            case 'ftext':                unset($submit_mult);                $query_type = 'fulltext_fld';                $mult_btn   = __('Yes');                break;            case 'change':                include './tbl_alter.php';                break;            case 'browse':                // this should already be handled by tbl_structure.php        }    } else {        // coming from browsing - do something with selected rows        $what = 'row_delete';        $selected = $rows_to_delete;    }} // end if/** * Displays the confirmation form if required */if (!empty($submit_mult) && !empty($what)) {    unset($message);    include_once './libraries/header.inc.php';    if (strlen($table)) {        include './libraries/tbl_common.php';        $url_query .= '&amp;goto=tbl_sql.php&amp;back=tbl_sql.php';        include './libraries/tbl_info.inc.php';        include_once './libraries/tbl_links.inc.php';    } elseif (strlen($db)) {        include './libraries/db_common.inc.php';        include './libraries/db_info.inc.php';    } else {        include_once './libraries/server_common.inc.php';        include_once './libraries/server_links.inc.php';    }    // Builds the query    $full_query     = '';    if ($what == 'drop_tbl') {        $full_query_views = '';    }    $selected_cnt   = count($selected);    $i = 0;    foreach ($selected AS $idx => $sval) {        switch ($what) {            case 'row_delete':                $full_query .= htmlspecialchars($sval)                    . ';<br />';                break;            case 'drop_db':                $full_query .= 'DROP DATABASE '                    . PMA_backquote(htmlspecialchars($sval))                    . ';<br />';                $reload = 1;                break;            case 'drop_tbl':                $current = $sval;                if (!empty($views) && in_array($current, $views)) {                    $full_query_views .= (empty($full_query_views) ? 'DROP VIEW ' : ', ')                        . PMA_backquote(htmlspecialchars($current));                } else {                    $full_query .= (empty($full_query) ? 'DROP TABLE ' : ', ')                        . PMA_backquote(htmlspecialchars($current));                }                break;            case 'empty_tbl':                $full_query .= 'TRUNCATE ';                $full_query .= PMA_backquote(htmlspecialchars($sval))                            . ';<br />';                break;            case 'primary_fld':                if ($full_query == '') {                    $full_query .= 'ALTER TABLE '                        . PMA_backquote(htmlspecialchars($table))                        . '<br />&nbsp;&nbsp;DROP PRIMARY KEY,'                        . '<br />&nbsp;&nbsp; ADD PRIMARY KEY('                        . '<br />&nbsp;&nbsp;&nbsp;&nbsp; '                        . PMA_backquote(htmlspecialchars($sval))                        . ',';                } else {                    $full_query .= '<br />&nbsp;&nbsp;&nbsp;&nbsp; '                        . PMA_backquote(htmlspecialchars($sval))                        . ',';                }                if ($i == $selected_cnt-1) {                    $full_query = preg_replace('@,$@', ');<br />', $full_query);                }                break;            case 'drop_fld':                if ($full_query == '') {                    $full_query .= 'ALTER TABLE '                        . PMA_backquote(htmlspecialchars($table));                }                $full_query .= '<br />&nbsp;&nbsp;DROP '                    . PMA_backquote(htmlspecialchars($sval))                    . ',';                if ($i == $selected_cnt - 1) {                    $full_query = preg_replace('@,$@', ';<br />', $full_query);                }                break;        } // end switch        $i++;    }    if ($what == 'drop_tbl') {        if (!empty($full_query)) {            $full_query .= ';<br />' . "\n";        }        if (!empty($full_query_views)) {            $full_query .= $full_query_views . ';<br />' . "\n";        }        unset($full_query_views);    }    // Displays the confirmation form    $_url_params = array(        'query_type' => $what,        'reload' => (! empty($reload) ? 1 : 0),    );    if (strpos(' ' . $action, 'db_') == 1) {        $_url_params['db']= $db;    } elseif (strpos(' ' . $action, 'tbl_') == 1 || $what == 'row_delete') {        $_url_params['db']= $db;        $_url_params['table']= $table;    }    foreach ($selected as $idx => $sval) {        $_url_params['selected'][] = $sval;    }    if ($what == 'drop_tbl' && !empty($views)) {        foreach ($views as $current) {            $_url_params['views'][] = $current;       }    }    if ($what == 'row_delete') {        $_url_params['original_sql_query'] = $original_sql_query;        if (! empty($original_url_query)) {            $_url_params['original_url_query'] = $original_url_query;        }    }    ?><form action="<?php echo $action; ?>" method="post">    <?php    echo PMA_generate_common_hidden_inputs($_url_params);    ?><?php if ($what == 'replace_prefix_tbl' || $what == 'copy_tbl_change_prefix') { ?>        <fieldset class = "input">                <legend><?php echo ($what == 'replace_prefix_tbl' ? __('Replace table prefix') : __('Copy table with prefix')) ?>:</legend>                <table>                <tr>                <td><?php echo __('From'); ?></td><td><input type="text" name="from_prefix" id="initialPrefix"</td>                </tr>                <tr>                <td><?php echo __('To'); ?> </td><td><input type="text" name="to_prefix" id="newPrefix"</td>                </tr>                </table>        </fieldset>        <fieldset class="tblFooters">                <button type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes"><?php echo __('Submit'); ?></button>        </fieldset>    <?php        } elseif ($what == 'add_prefix_tbl') { ?>        <fieldset class = "input">                <legend><?php echo __('Add table prefix') ?>:</legend>                <table>                <tr>                <td><?php echo __('Add prefix'); ?></td>     <td><input type="text" name="add_prefix" id="txtPrefix"</td>                </tr>                </table>        </fieldset>        <fieldset class="tblFooters">                <button type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes"><?php echo __('Submit'); ?></button>        </fieldset>    <?php        } else { ?>    <fieldset class="confirmation">        <legend><?php echo ($what == 'drop_db' ? __('You are about to DESTROY a complete database!') . '&nbsp;' : '') . __('Do you really want to '); ?>:</legend>        <tt><?php echo $full_query; ?></tt>    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes" />        <input type="submit" name="mult_btn" value="<?php echo __('No'); ?>" id="buttonNo" />    </fieldset>    <?php    }    include './libraries/footer.inc.php';} elseif ($mult_btn == __('Yes')) {/** * Executes the query - dropping rows, columns/fields, tables or dbs */    if ($query_type == 'drop_db' || $query_type == 'drop_tbl' || $query_type == 'drop_fld') {        include_once './libraries/relation_cleanup.lib.php';    }    $sql_query      = '';    if ($query_type == 'drop_tbl') {        $sql_query_views = '';    }    $selected_cnt   = count($selected);    $run_parts      = false; // whether to run query after each pass    $use_sql        = false; // whether to include sql.php at the end (to display results)    if ($query_type == 'primary_fld') {        // Gets table primary key        PMA_DBI_select_db($db);        $result      = PMA_DBI_query('SHOW KEYS FROM ' . PMA_backquote($table) . ';');        $primary     = '';        while ($row = PMA_DBI_fetch_assoc($result)) {            // Backups the list of primary keys            if ($row['Key_name'] == 'PRIMARY') {                $primary .= $row['Column_name'] . ', ';            }        } // end while        PMA_DBI_free_result($result);    }    $rebuild_database_list = false;    for ($i = 0; $i < $selected_cnt; $i++) {        switch ($query_type) {            case 'row_delete':                $a_query = $selected[$i];                $run_parts = true;                break;            case 'drop_db':                PMA_relationsCleanupDatabase($selected[$i]);                $a_query   = 'DROP DATABASE '                           . PMA_backquote($selected[$i]);                $reload    = 1;                $run_parts = true;                $rebuild_database_list = true;                break;            case 'drop_tbl':                PMA_relationsCleanupTable($db, $selected[$i]);                $current = $selected[$i];                if (!empty($views) && in_array($current, $views)) {                    $sql_query_views .= (empty($sql_query_views) ? 'DROP VIEW ' : ', ')                              . PMA_backquote($current);                } else {                    $sql_query .= (empty($sql_query) ? 'DROP TABLE ' : ', ')                               . PMA_backquote($current);                }                $reload    = 1;                break;            case 'check_tbl':                $sql_query .= (empty($sql_query) ? 'CHECK TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'optimize_tbl':                $sql_query .= (empty($sql_query) ? 'OPTIMIZE TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'analyze_tbl':                $sql_query .= (empty($sql_query) ? 'ANALYZE TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'repair_tbl':                $sql_query .= (empty($sql_query) ? 'REPAIR TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'empty_tbl':                $a_query = 'TRUNCATE ';                $a_query .= PMA_backquote($selected[$i]);                $run_parts = true;                break;            case 'drop_fld':                PMA_relationsCleanupColumn($db, $table, $selected[$i]);                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) : ',')                           . ' DROP ' . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ';' : '');                break;            case 'primary_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . (empty($primary) ? '' : ' DROP PRIMARY KEY,') . ' ADD PRIMARY KEY( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'index_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD INDEX( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'unique_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD UNIQUE( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'spatial_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD SPATIAL( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'fulltext_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD FULLTEXT( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;        case 'add_prefix_tbl':                $newtablename = $add_prefix . $selected[$i];                $a_query = 'ALTER TABLE ' . PMA_backquote($selected[$i]) . ' RENAME ' . PMA_backquote($newtablename) ; // ADD PREFIX TO TABLE NAME                $run_parts = true;                break;            case 'replace_prefix_tbl':                $current = $selected[$i];                $newtablename = preg_replace("/^" . $from_prefix . "/", $to_prefix, $current);                $a_query = 'ALTER TABLE ' . PMA_backquote($selected[$i]) . ' RENAME ' . PMA_backquote($newtablename) ; // CHANGE PREFIX PATTERN                $run_parts = true;                break;            case 'copy_tbl_change_prefix':                $current = $selected[$i];                $newtablename = preg_replace("/^" . $from_prefix . "/", $to_prefix, $current);                $a_query = 'CREATE TABLE ' . PMA_backquote($newtablename) . ' SELECT * FROM ' . PMA_backquote($selected[$i]) ; // COPY TABLE AND CHANGE PREFIX PATTERN                $run_parts = true;                break;        } // end switch        // All "DROP TABLE", "DROP FIELD", "OPTIMIZE TABLE" and "REPAIR TABLE"        // statements will be run at once below        if ($run_parts) {            $sql_query .= $a_query . ';' . "\n";            if ($query_type != 'drop_db') {                PMA_DBI_select_db($db);            }            $result = PMA_DBI_query($a_query);        } // end if    } // end for    if ($query_type == 'drop_tbl') {        if (!empty($sql_query)) {        $sql_query .= ';';    } elseif (!empty($sql_query_views)) {        $sql_query = $sql_query_views . ';';            unset($sql_query_views);        }    }    if ($use_sql) {        include './sql.php';    } elseif (!$run_parts) {        PMA_DBI_select_db($db);        $result = PMA_DBI_try_query($sql_query);        if ($result && !empty($sql_query_views)) {            $sql_query .= ' ' . $sql_query_views . ';';            $result = PMA_DBI_try_query($sql_query_views);            unset($sql_query_views);        }        if (! $result) {            $message = PMA_Message::error(PMA_DBI_getError());        }    }    if ($rebuild_database_list) {        // avoid a problem with the database list navigator        // when dropping a db from server_databases        $GLOBALS['pma']->databases->build();    }} else {    $message = PMA_Message::success(__('No change'));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run http authentication. * NOTE: Requires PHP loaded as a Apache module. * * @package PhpMyAdmin-Auth-HTTP *//** * Displays authentication form * * @global  string    the font face to use in case of failure * @global  string    the default font size to use in case of failure * @global  string    the big font size to use in case of failure * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth(){    /* Perform logout to custom URL */    if (!empty($_REQUEST['old_usr']) && !empty($GLOBALS['cfg']['Server']['LogoutURL'])) {        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);        exit;    }    if (empty($GLOBALS['cfg']['Server']['auth_http_realm'])) {        if (empty($GLOBALS['cfg']['Server']['verbose'])) {            $server_message = $GLOBALS['cfg']['Server']['host'];        } else {            $server_message = $GLOBALS['cfg']['Server']['verbose'];        }        $realm_message = 'phpMyAdmin ' . $server_message;    } else {        $realm_message = $GLOBALS['cfg']['Server']['auth_http_realm'];    }    // remove non US-ASCII to respect RFC2616    $realm_message = preg_replace('/[^\x20-\x7e]/i', '', $realm_message);    header('WWW-Authenticate: Basic realm="' . $realm_message .  '"');    header('HTTP/1.0 401 Unauthorized');    if (php_sapi_name() !== 'cgi-fcgi') {        header('status: 401 Unauthorized');    }    // Defines the charset to be used    header('Content-Type: text/html; charset=utf-8');    /* HTML header */    $page_title = __('Access denied');    include './libraries/header_meta_style.inc.php';    ?></head><body>    <?php    if (file_exists(CUSTOM_HEADER_FILE)) {        include CUSTOM_HEADER_FILE;    }    ?><br /><br /><center>    <h1><?php echo sprintf(__('Welcome to %s'), ' phpMyAdmin'); ?></h1></center><br />    <?php    PMA_Message::error(__('Wrong username/password. Access denied.'))->display();    if (file_exists(CUSTOM_FOOTER_FILE)) {        include CUSTOM_FOOTER_FILE;    }    ?></body></html>    <?php    exit();} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * @global  string    the username if register_globals is on * @global  string    the password if register_globals is on * @global  array     the array of server variables if register_globals is *                    off * @global  array     the array of environment variables if register_globals *                    is off * @global  string    the username for the ? server * @global  string    the password for the ? server * @global  string    the username for the WebSite Professional server * @global  string    the password for the WebSite Professional server * @global  string    the username of the user who logs out * * @return  boolean   whether we get authentication settings or not * * @access  public */function PMA_auth_check(){    global $PHP_AUTH_USER, $PHP_AUTH_PW;    global $old_usr;    // Grabs the $PHP_AUTH_USER variable whatever are the values of the    // 'register_globals' and the 'variables_order' directives    if (empty($PHP_AUTH_USER)) {        if (PMA_getenv('PHP_AUTH_USER')) {            $PHP_AUTH_USER = PMA_getenv('PHP_AUTH_USER');        } elseif (PMA_getenv('REMOTE_USER')) {            // CGI, might be encoded, see below            $PHP_AUTH_USER = PMA_getenv('REMOTE_USER');        } elseif (PMA_getenv('REDIRECT_REMOTE_USER')) {            // CGI, might be encoded, see below            $PHP_AUTH_USER = PMA_getenv('REDIRECT_REMOTE_USER');        } elseif (PMA_getenv('AUTH_USER')) {            // WebSite Professional            $PHP_AUTH_USER = PMA_getenv('AUTH_USER');        } elseif (PMA_getenv('HTTP_AUTHORIZATION')) {            // IIS, might be encoded, see below            $PHP_AUTH_USER = PMA_getenv('HTTP_AUTHORIZATION');        } elseif (PMA_getenv('Authorization')) {            // FastCGI, might be encoded, see below            $PHP_AUTH_USER = PMA_getenv('Authorization');        }    }    // Grabs the $PHP_AUTH_PW variable whatever are the values of the    // 'register_globals' and the 'variables_order' directives    if (empty($PHP_AUTH_PW)) {        if (PMA_getenv('PHP_AUTH_PW')) {            $PHP_AUTH_PW = PMA_getenv('PHP_AUTH_PW');        } elseif (PMA_getenv('REMOTE_PASSWORD')) {            // Apache/CGI            $PHP_AUTH_PW = PMA_getenv('REMOTE_PASSWORD');        } elseif (PMA_getenv('AUTH_PASSWORD')) {            // WebSite Professional            $PHP_AUTH_PW = PMA_getenv('AUTH_PASSWORD');        }    }    // Decode possibly encoded information (used by IIS/CGI/FastCGI)    // (do not use explode() because a user might have a colon in his password    if (strcmp(substr($PHP_AUTH_USER, 0, 6), 'Basic ') == 0) {        $usr_pass = base64_decode(substr($PHP_AUTH_USER, 6));        if (! empty($usr_pass)) {            $colon = strpos($usr_pass, ':');            if ($colon) {                $PHP_AUTH_USER = substr($usr_pass, 0, $colon);                $PHP_AUTH_PW = substr($usr_pass, $colon + 1);            }            unset($colon);        }        unset($usr_pass);    }    // User logged out -> ensure the new username is not the same    if (!empty($old_usr)        && (isset($PHP_AUTH_USER) && $old_usr == $PHP_AUTH_USER)) {        $PHP_AUTH_USER = '';        // -> delete user's choices that were stored in session        session_destroy();    }    // Returns whether we get authentication settings or not    if (empty($PHP_AUTH_USER)) {        return false;    } else {        return true;    }} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @global  array     the valid servers settings * @global  integer   the id of the current server * @global  array     the current server settings * @global  string    the current username * @global  string    the current password * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    global $cfg, $server;    global $PHP_AUTH_USER, $PHP_AUTH_PW;    // Ensures valid authentication mode, 'only_db', bookmark database and    // table names and relation table name are used    if ($cfg['Server']['user'] != $PHP_AUTH_USER) {        $servers_cnt = count($cfg['Servers']);        for ($i = 1; $i <= $servers_cnt; $i++) {            if (isset($cfg['Servers'][$i])                && ($cfg['Servers'][$i]['host'] == $cfg['Server']['host'] && $cfg['Servers'][$i]['user'] == $PHP_AUTH_USER)) {                $server        = $i;                $cfg['Server'] = $cfg['Servers'][$i];                break;            }        } // end for    } // end if    $cfg['Server']['user']     = $PHP_AUTH_USER;    $cfg['Server']['password'] = $PHP_AUTH_PW;    // Avoid showing the password in phpinfo()'s output    unset($GLOBALS['PHP_AUTH_PW']);    unset($_SERVER['PHP_AUTH_PW']);    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth_fails(){    $error = PMA_DBI_getError();    if ($error && $GLOBALS['errno'] != 1045) {        PMA_fatalError($error);    } else {        PMA_auth();        return true;    }} // end of the 'PMA_auth_fails()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once 'Export_Relation_Schema.class.php';/** * This Class inherits the XMLwriter class and * helps in developing structure of SVG Schema Export * * @access public * @see http://php.net/manual/en/book.xmlwriter.php */class PMA_SVG extends XMLWriter{    public $title;    public $author;    public $font;    public $fontSize;    /**     * The "PMA_SVG" constructor     *     * Upon instantiation This starts writing the Svg XML document     *     * @return void     * @see XMLWriter::openMemory(),XMLWriter::setIndent(),XMLWriter::startDocument()     */    function __construct()    {        $this->openMemory();        /*         * Set indenting using three spaces,         * so output is formatted         */        $this->setIndent(true);        $this->setIndentString('   ');        /*         * Create the XML document         */        $this->startDocument('1.0', 'UTF-8');        $this->startDtd(            'svg', '-//W3C//DTD SVG 1.1//EN',            'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'        );        $this->endDtd();    }    /**     * Set document title     *     * @param string $value sets the title text     *     * @return void     * @access public     */    function setTitle($value)    {        $this->title = $value;    }    /**     * Set document author     *     * @param string $value sets the author     *     * @return void     * @access public     */    function setAuthor($value)    {        $this->author = $value;    }    /**     * Set document font     *     * @param string $value sets the font e.g Arial, Sans-serif etc     *     * @return void     * @access public     */    function setFont($value)    {        $this->font = $value;    }    /**     * Get document font     *     * @return string returns the font name     * @access public     */    function getFont()    {        return $this->font;    }    /**     * Set document font size     *     * @param string $value sets the font size in pixels     *     * @return void     * @access public     */    function setFontSize($value)    {        $this->fontSize = $value;    }    /**     * Get document font size     *     * @return string returns the font size     * @access public     */    function getFontSize()    {        return $this->fontSize;    }    /**     * Starts Svg Document     *     * svg document starts by first initializing svg tag     * which contains all the attributes and namespace that needed     * to define the svg document     *     * @param integer $width  total width of the Svg document     * @param integer $height total height of the Svg document     *     * @return void     * @access public     *     * @see XMLWriter::startElement(),XMLWriter::writeAttribute()     */    function startSvgDoc($width,$height)    {        $this->startElement('svg');        $this->writeAttribute('width', $width);        $this->writeAttribute('height', $height);        $this->writeAttribute('xmlns', 'http://www.w3.org/2000/svg');        $this->writeAttribute('version', '1.1');    }    /**     * Ends Svg Document     *     * @return void     * @access public     * @see XMLWriter::endElement(),XMLWriter::endDocument()     */    function endSvgDoc()    {        $this->endElement();        $this->endDocument();    }    /**     * output Svg Document     *     * svg document prompted to the user for download     * Svg document saved in .svg extension and can be     * easily changeable by using any svg IDE     *     * @param string $fileName file name     *     * @return void     * @access public     * @see XMLWriter::startElement(),XMLWriter::writeAttribute()     */    function showOutput($fileName)    {        //ob_get_clean();        $output = $this->flush();        PMA_download_header($fileName . '.svg', 'image/svg+xml', strlen($output));        print $output;    }    /**     * Draws Svg elements     *     * SVG has some predefined shape elements like rectangle & text     * and other elements who have x,y co-ordinates are drawn.     * specify their width and height and can give styles too.     *     * @param string  $name   Svg element name     * @param integer $x      The x attr defines the left position of the element     * (e.g. x="0" places the element 0 pixels from the left of the browser window)     * @param integer $y      The y attribute defines the top position of the element     * (e.g. y="0" places the element 0 pixels from the top of the browser window)     * @param integer $width  The width attribute defines the width the element     * @param integer $height The height attribute defines the height the element     * @param string  $text   The text attribute defines the text the element     * @param string  $styles The style attribute defines the style the element     *  styles can be defined like CSS styles     *     * @return void     * @access public     *     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),     * XMLWriter::text(), XMLWriter::endElement()     */    function printElement($name, $x, $y, $width = '', $height = '', $text = '', $styles = '')    {        $this->startElement($name);        $this->writeAttribute('width', $width);        $this->writeAttribute('height', $height);        $this->writeAttribute('x', $x);        $this->writeAttribute('y', $y);        $this->writeAttribute('style', $styles);        if (isset($text)) {            $this->writeAttribute('font-family', $this->font);            $this->writeAttribute('font-size', $this->fontSize);            $this->text($text);        }        $this->endElement();    }    /**     * Draws Svg Line element     *     * Svg line element is drawn for connecting the tables.     * arrows are also drawn by specify its start and ending     * co-ordinates     *     * @param string  $name   Svg element name i.e line     * @param integer $x1     Defines the start of the line on the x-axis     * @param integer $y1     Defines the start of the line on the y-axis     * @param integer $x2     Defines the end of the line on the x-axis     * @param integer $y2     Defines the end of the line on the y-axis     * @param string  $styles The style attribute defines the style the element     *                        styles can be defined like CSS styles     *     * @return void     * @access public     *     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),     * XMLWriter::endElement()     */    function printElementLine($name,$x1,$y1,$x2,$y2,$styles)    {        $this->startElement($name);        $this->writeAttribute('x1', $x1);        $this->writeAttribute('y1', $y1);        $this->writeAttribute('x2', $x2);        $this->writeAttribute('y2', $y2);        $this->writeAttribute('style', $styles);        $this->endElement();    }    /**     * get width of string/text     *     * Svg text element width is calcualted depending on font name     * and font size. It is very important to know the width of text     * because rectangle is drawn around it.     *     * This is a bit hardcore method. I didn't found any other than this.     *     * @param string  $text     string that width will be calculated     * @param integer $font     name of the font like Arial,sans-serif etc     * @param integer $fontSize size of font     *     * @return integer width of the text     * @access public     */    function getStringWidth($text,$font,$fontSize)    {        /*         * Start by counting the width, giving each character a modifying value         */        $count = 0;        $count = $count + ((strlen($text) - strlen(str_replace(array("i", "j", "l"), "", $text))) * 0.23);//ijl        $count = $count + ((strlen($text) - strlen(str_replace(array("f"), "", $text))) * 0.27);//f        $count = $count + ((strlen($text) - strlen(str_replace(array("t", "I"), "", $text))) * 0.28);//tI        $count = $count + ((strlen($text) - strlen(str_replace(array("r"), "", $text))) * 0.34);//r        $count = $count + ((strlen($text) - strlen(str_replace(array("1"), "", $text))) * 0.49);//1        $count = $count + ((strlen($text) - strlen(str_replace(array("c", "k", "s", "v", "x", "y", "z", "J"), "", $text))) * 0.5);//cksvxyzJ        $count = $count + ((strlen($text) - strlen(str_replace(array("a", "b", "d", "e", "g", "h", "n", "o", "p", "q", "u", "L", "0", "2", "3", "4", "5", "6", "7", "8", "9"), "", $text))) * 0.56);//abdeghnopquL023456789        $count = $count + ((strlen($text) - strlen(str_replace(array("F", "T", "Z"), "", $text))) * 0.61);//FTZ        $count = $count + ((strlen($text) - strlen(str_replace(array("A", "B", "E", "K", "P", "S", "V", "X", "Y"), "", $text))) * 0.67);//ABEKPSVXY        $count = $count + ((strlen($text) - strlen(str_replace(array("w", "C", "D", "H", "N", "R", "U"), "", $text))) * 0.73);//wCDHNRU        $count = $count + ((strlen($text) - strlen(str_replace(array("G", "O", "Q"), "", $text))) * 0.78);//GOQ        $count = $count + ((strlen($text) - strlen(str_replace(array("m", "M"), "", $text))) * 0.84);//mM        $count = $count + ((strlen($text) - strlen(str_replace("W", "", $text))) * .95);//W        $count = $count + ((strlen($text) - strlen(str_replace(" ", "", $text))) * .28);//" "        $text  = str_replace(" ", "", $text);//remove the " "'s        $count = $count + (strlen(preg_replace("/[a-z0-9]/i", "", $text)) * 0.3); //all other chrs        $modifier = 1;        $font = strtolower($font);        switch($font){        /*         * no modifier for arial and sans-serif         */        case 'arial':        case 'sans-serif':            break;        /*         * .92 modifer for time, serif, brushscriptstd, and californian fb         */        case 'times':        case 'serif':        case 'brushscriptstd':        case 'californian fb':            $modifier = .92;            break;        /*         * 1.23 modifier for broadway         */        case 'broadway':            $modifier = 1.23;            break;        }        $textWidth = $count*$fontSize;        return ceil($textWidth*$modifier);    }}/** * Table preferences/statistics * * This class preserves the table co-ordinates,fields * and helps in drawing/generating the Tables in SVG XML document. * * @name Table_Stats * @see PMA_SVG */class Table_Stats{    /**     * Defines properties     */    private $_tableName;    private $_showInfo = false;    public $width = 0;    public $height;    public $fields = array();    public $heightCell = 0;    public $currentCell = 0;    public $x, $y;    public $primary = array();    /**     * The "Table_Stats" constructor     *     * @param string  $tableName        The table name     * @param string  $font             Font face     * @param integer $fontSize         The font size     * @param integer $pageNumber       Page number     * @param integer &$same_wide_width The max. with among tables     * @param boolean $showKeys         Whether to display keys or not     * @param boolean $showInfo         Whether to display table position or not     *     * @global object    The current SVG image document     * @global integer   The current page number (from the     *                   $cfg['Servers'][$i]['table_coords'] table)     * @global array     The relations settings     * @global string    The current db name     *     * @access private     *     * @see PMA_SVG, Table_Stats::Table_Stats_setWidth,     *       Table_Stats::Table_Stats_setHeight     */    function __construct($tableName, $font, $fontSize, $pageNumber,    &$same_wide_width, $showKeys = false, $showInfo = false)    {        global $svg, $cfgRelation, $db;        $this->_tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $svg->dieSchema(                $pageNumber,                "SVG",                sprintf(__('The %s table doesn\'t exist!'), $tableName)            );        }        /*        * load fields        * check to see if it will load all fields or only the foreign keys        */        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->_tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $this->_showInfo = $showInfo;        // height and width        $this->_setHeightTable($fontSize);        // setWidth must me after setHeight, because title        // can include table height which changes table width        $this->_setWidthTable($font, $fontSize);        if ($same_wide_width < $this->width) {            $same_wide_width = $this->width;        }        // x and y        $sql = 'SELECT x, y FROM '         . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'         . PMA_backquote($cfgRelation['table_coords'])         . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''         . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''         . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $svg->dieSchema(                $pageNumber,                "SVG",                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        // displayfield        $this->displayfield = PMA_getDisplayField($db, $tableName);        // index        $result = PMA_DBI_query(            'SHOW INDEX FROM ' . PMA_backquote($tableName) . ';',            null,            PMA_DBI_QUERY_STORE        );        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }    }    /**     * Returns title of the current table,     * title can have the dimensions/co-ordinates of the table     *     * @access private     */    private function _getTitle()    {        return ($this->_showInfo            ? sprintf('%.0f', $this->width) . 'x' . sprintf('%.0f', $this->heightCell)            : ''        ) . ' ' . $this->_tableName;    }    /**     * Sets the width of the table     *     * @param string  $font     The font size     * @param integer $fontSize The font size     *     * @global object    The current SVG image document     *     * @return nothing     * @access private     *     * @see PMA_SVG     */    private function _setWidthTable($font,$fontSize)    {        global $svg;        foreach ($this->fields as $field) {            $this->width = max(                $this->width,                $svg->getStringWidth($field, $font, $fontSize)            );        }        $this->width += $svg->getStringWidth('  ', $font, $fontSize);        /*         * it is unknown what value must be added, because         * table title is affected by the tabe width value         */        while ($this->width < $svg->getStringWidth($this->_getTitle(), $font, $fontSize)) {            $this->width += 7;        }    }    /**     * Sets the height of the table     *     * @param integer $fontSize font size     *     * @return nothing     * @access private     */    function _setHeightTable($fontSize)    {        $this->heightCell = $fontSize + 4;        $this->height = (count($this->fields) + 1) * $this->heightCell;    }    /**     * draw the table     *     * @param boolean $showColor Whether to display color     *     * @global object The current SVG image document     *     * @access public     * @return nothing     *     * @see PMA_SVG,PMA_SVG::printElement     */    public function tableDraw($showColor)    {        global $svg;        //echo $this->_tableName.'<br />';        $svg->printElement(            'rect', $this->x, $this->y, $this->width,            $this->heightCell, null, 'fill:red;stroke:black;'        );        $svg->printElement(            'text', $this->x + 5, $this->y+ 14, $this->width, $this->heightCell,            $this->_getTitle(), 'fill:none;stroke:black;'        );        foreach ($this->fields as $field) {            $this->currentCell += $this->heightCell;            $showColor    = 'none';            if ($showColor) {                if (in_array($field, $this->primary)) {                    $showColor = '#0c0';                }                if ($field == $this->displayfield) {                    $showColor = 'none';                }            }            $svg->printElement(                'rect', $this->x, $this->y + $this->currentCell, $this->width,                $this->heightCell, null, 'fill:'.$showColor.';stroke:black;'            );            $svg->printElement(                'text', $this->x + 5, $this->y + 14 + $this->currentCell,                $this->width, $this->heightCell, $field, 'fill:none;stroke:black;'            );        }    }}/** * Relation preferences/statistics * * This class fetches the table master and foreign fields positions * and helps in generating the Table references and then connects * master table's master field to foreign table's foreign key * in SVG XML document. * * @name Relation_Stats * @see PMA_SVG::printElementLine */class Relation_Stats{    /**     * Defines properties     */    public $xSrc, $ySrc;    public $srcDir ;    public $destDir;    public $xDest, $yDest;    public $wTick = 10;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @return nothing     *     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        /*        * [0] is x-left        * [1] is x-right        * [2] is y        */        $src_left   = $src_pos[0] - $this->wTick;        $src_right  = $src_pos[1] + $this->wTick;        $dest_left  = $dest_pos[0] - $this->wTick;        $dest_right = $dest_pos[1] + $this->wTick;        $d1 = abs($src_left - $dest_left);        $d2 = abs($src_right - $dest_left);        $d3 = abs($src_left - $dest_right);        $d4 = abs($src_right - $dest_right);        $d  = min($d1, $d2, $d3, $d4);        if ($d == $d1) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d2) {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d3) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        } else {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        }        $this->ySrc   = $src_pos[2];        $this->yDest = $dest_pos[2];    }    /**     * Gets arrows coordinates     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Arrows coordinates     * @access private     */    function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // x_left, x_right, y        return array(            $table->x,            $table->x + $table->width,            $table->y + ($pos + 1.5) * $table->heightCell        );    }    /**     * draws relation links and arrows shows foreign key relations     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @global object The current SVG image document     *     * @return nothing     * @access public     *     * @see PMA_SVG     */    public function relationDraw($changeColor)    {        global $svg;        if ($changeColor) {            $listOfColors = array(                'red',                'grey',                'black',                'yellow',                'green',                'cyan',            '    orange'            );            shuffle($listOfColors);            $color =  $listOfColors[0];        } else {            $color = 'black';        }        $svg->printElementLine(            'line', $this->xSrc, $this->ySrc,            $this->xSrc + $this->srcDir * $this->wTick, $this->ySrc,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick,            $this->yDest, $this->xDest, $this->yDest,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick, $this->ySrc,            $this->xDest + $this->destDir * $this->wTick, $this->yDest,            'fill:' . $color . ';stroke:' . $color . ';stroke-width:1;'        );        $root2 = 2 * sqrt(2);        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick * 0.75, $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc + $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick * 0.75, $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc - $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick / 2, $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest + $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick / 2, $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest - $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );    }}/** end of the "Relation_Stats" class*//** * Svg Relation Schema Class * * Purpose of this class is to generate the SVG XML Document because * SVG defines the graphics in XML format which is used for representing * the database diagrams as vector image. This class actually helps *  in preparing SVG XML format. * * SVG XML is generated by using XMLWriter php extension and this class * inherits Export_Relation_Schema class has common functionality added * to this class * * @name Svg_Relation_Schema */class PMA_Svg_Relation_Schema extends PMA_Export_Relation_Schema{    private $tables = array();    private $_relations = array();    private $_xMax = 0;    private $_yMax = 0;    private $scale;    private $_xMin = 100000;    private $_yMin = 100000;    private $t_marg = 10;    private $b_marg = 10;    private $l_marg = 10;    private $r_marg = 10;    private $_tablewidth;    /**     * The "PMA_Svg_Relation_Schema" constructor     *     * Upon instantiation This starts writing the SVG XML document     * user will be prompted for download as .svg extension     *     * @return void     * @see PMA_SVG     */    function __construct()    {        global $svg,$db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowColor(isset($_POST['show_color']));        $this->setShowKeys(isset($_POST['show_keys']));        $this->setTableDimension(isset($_POST['show_table_dimension']));        $this->setAllTableSameWidth(isset($_POST['all_table_same_wide']));        $this->setExportType($_POST['export_type']);        $svg = new PMA_SVG();        $svg->setTitle(            sprintf(                __('Schema of the %s database - Page %s'),                $db,                $this->pageNumber            )        );        $svg->SetAuthor('phpMyAdmin ' . PMA_VERSION);        $svg->setFont('Arial');        $svg->setFontSize('16px');        $svg->startSvgDoc('1000px', '1000px');        $alltables = $this->getAllTables($db, $this->pageNumber);        foreach ($alltables AS $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats(                    $table, $svg->getFont(), $svg->getFontSize(), $this->pageNumber,                    $this->_tablewidth, $this->showKeys, $this->tableDimension                );            }            if ($this->sameWide) {                $this->tables[$table]->width = $this->_tablewidth;            }            $this->_setMinMax($this->tables[$table]);        }        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    /* put the foreign table on the schema only if selected                    * by the user                    * (do not use array_search() because we would have to                    * to do a === false and this is not PHP3 compatible)                    */                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table, $svg->getFont(), $svg->getFontSize(),                            $master_field, $rel['foreign_table'],                            $rel['foreign_field'], $this->tableDimension                        );                    }                }            }        }        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $this->_drawTables($this->showColor);        $svg->endSvgDoc();        $svg->showOutput($db.'-'.$this->pageNumber);        exit();    }    /**     * Sets X and Y minimum and maximum for a table cell     *     * @param string $table The table name     *     * @return nothing     * @access private     */    private function _setMinMax($table)    {        $this->_xMax = max($this->_xMax, $table->x + $table->width);        $this->_yMax = max($this->_yMax, $table->y + $table->height);        $this->_xMin = min($this->_xMin, $table->x);        $this->_yMin = min($this->_yMin, $table->y);    }    /**     * Defines relation objects     *     * @param string  $masterTable  The master table name     * @param string  $font         The font face     * @param int     $fontSize     Font size     * @param string  $masterField  The relation field in the master table     * @param string  $foreignTable The foreign table name     * @param string  $foreignField The relation field in the foreign table     * @param boolean $showInfo     Whether to display table position or not     *     * @access private     * @return nothing     *     * @see _setMinMax,Table_Stats::__construct(),Relation_Stats::__construct()     */    private function _addRelation($masterTable,$font,$fontSize, $masterField,    $foreignTable, $foreignField, $showInfo)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );            $this->_setMinMax($this->tables[$masterTable]);        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );            $this->_setMinMax($this->tables[$foreignTable]);        }        $this->_relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws relation arrows and lines     * connects master table's master field to     * foreign table's forein field     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @return nothing     * @access private     *     * @see Relation_Stats::relationDraw()     */    private function _drawRelations($changeColor)    {        foreach ($this->_relations as $relation) {            $relation->relationDraw($changeColor);        }    }    /**     * Draws tables     *     * @param boolean $changeColor Whether to show color for primary fields or not     *     * @return nothing     * @access private     *     * @see Table_Stats::Table_Stats_tableDraw()     */    private function _drawTables($changeColor)    {        foreach ($this->tables as $table) {            $table->tableDraw($changeColor);        }    }}?>
<?php/** * URL redirector to avoid leaking Referer with some sensitive information. *//** * Gets core libraries and defines some variables */require_once './libraries/common.inc.php';if (! PMA_isValid($_GET['url']) || ! preg_match('/^https?:\/\/[^\n\r]*$/', $_GET['url'])) {    header('Location: ' . $cfg['PmaAbsoluteUri']);} else {    header('Location: ' . $_GET['url']);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Produce a PDF report (export) from a query * * @package PhpMyAdmin-Export * @subpackage PDF */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['pdf'] = array(        'text' => __('PDF'),        'extension' => 'pdf',        'mime_type' => 'application/pdf',        'force_file' => true,        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'message_only', 'name' => 'explanation', 'text' => __('(Generates a report containing the data of a single table)')),            array('type' => 'text', 'name' => 'report_title', 'text' => __('Report title:')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );} else {    include_once './libraries/PDF.class.php';    /**     * Adapted from a LGPL script by Philip Clarke     * @package PhpMyAdmin-Export     * @subpackage PDF     */    class PMA_Export_PDF extends PMA_PDF    {        var $tablewidths;        var $headerset;        function checkPageBreak($h = 0, $y = '', $addpage = true)        {            if ($this->empty_string($y)) {                $y = $this->y;            }            $current_page = $this->page;            if ((($y + $h) > $this->PageBreakTrigger) AND (! $this->InFooter) AND ($this->AcceptPageBreak())) {                if ($addpage) {                    //Automatic page break                    $x = $this->x;                    $this->AddPage($this->CurOrientation);                    $this->y = $this->dataY;                    $oldpage = $this->page - 1;                    if ($this->rtl) {                        if ($this->pagedim[$this->page]['orm'] != $this->pagedim[$oldpage]['orm']) {                            $this->x = $x - ($this->pagedim[$this->page]['orm'] - $this->pagedim[$oldpage]['orm']);                        } else {                            $this->x = $x;                        }                    } else {                        if ($this->pagedim[$this->page]['olm'] != $this->pagedim[$oldpage]['olm']) {                            $this->x = $x + ($this->pagedim[$this->page]['olm'] - $this->pagedim[$oldpage]['olm']);                        } else {                            $this->x = $x;                        }                    }                }                return true;            }            if ($current_page != $this->page) {                // account for columns mode                return true;            }            return false;        }        function Header()        {            global $maxY;            // Check if header for this page already exists            if (! isset($this->headerset[$this->page])) {                $fullwidth = 0;                foreach ($this->tablewidths as $width) {                    $fullwidth += $width;                }                $this->SetY(($this->tMargin) - ($this->FontSizePt / $this->k) * 5);                $this->cellFontSize = $this->FontSizePt ;                $this->SetFont(PMA_PDF_FONT, '', ($this->titleFontSize ? $this->titleFontSize : $this->FontSizePt));                $this->Cell(0, $this->FontSizePt, $this->titleText, 0, 1, 'C');                $this->SetFont(PMA_PDF_FONT, '', $this->cellFontSize);                $this->SetY(($this->tMargin) - ($this->FontSizePt / $this->k) * 2.5);                $this->Cell(                    0, $this->FontSizePt,                    __('Database') . ': ' . $this->currentDb . ',  ' . __('Table') . ': ' . $this->currentTable,                    0, 1, 'L'                );                $l = ($this->lMargin);                foreach ($this->colTitles as $col => $txt) {                    $this->SetXY($l, ($this->tMargin));                    $this->MultiCell($this->tablewidths[$col], $this->FontSizePt, $txt);                    $l += $this->tablewidths[$col] ;                    $maxY = ($maxY < $this->getY()) ? $this->getY() : $maxY ;                }                $this->SetXY($this->lMargin, $this->tMargin);                $this->setFillColor(200, 200, 200);                $l = ($this->lMargin);                foreach ($this->colTitles as $col => $txt) {                    $this->SetXY($l, $this->tMargin);                    $this->cell($this->tablewidths[$col], $maxY-($this->tMargin), '', 1, 0, 'L', 1);                    $this->SetXY($l, $this->tMargin);                    $this->MultiCell($this->tablewidths[$col], $this->FontSizePt, $txt, 0, 'C');                    $l += $this->tablewidths[$col];                }                $this->setFillColor(255, 255, 255);                // set headerset                $this->headerset[$this->page] = 1;            }            $this->dataY = $maxY;        }        function morepagestable($lineheight=8)        {            // some things to set and 'remember'            $l = $this->lMargin;            $startheight = $h = $this->dataY;            $startpage = $currpage = $this->page;            // calculate the whole width            $fullwidth = 0;            foreach ($this->tablewidths as $width) {                $fullwidth += $width;            }            // Now let's start to write the table            $row = 0;            $tmpheight = array();            $maxpage = $this->page;            while ($data = PMA_DBI_fetch_row($this->results)) {                $this->page = $currpage;                // write the horizontal borders                $this->Line($l, $h, $fullwidth+$l, $h);                // write the content and remember the height of the highest col                foreach ($data as $col => $txt) {                    $this->page = $currpage;                    $this->SetXY($l, $h);                    if ($this->tablewidths[$col] > 0) {                        $this->MultiCell($this->tablewidths[$col], $lineheight, $txt, 0, $this->colAlign[$col]);                        $l += $this->tablewidths[$col];                    }                    if (!isset($tmpheight[$row.'-'.$this->page])) {                        $tmpheight[$row.'-'.$this->page] = 0;                    }                    if ($tmpheight[$row.'-'.$this->page] < $this->GetY()) {                        $tmpheight[$row.'-'.$this->page] = $this->GetY();                    }                    if ($this->page > $maxpage) {                        $maxpage = $this->page;                    }                    unset($data[$col]);                }                // get the height we were in the last used page                $h = $tmpheight[$row.'-'.$maxpage];                // set the "pointer" to the left margin                $l = $this->lMargin;                // set the $currpage to the last page                $currpage = $maxpage;                unset($data[$row]);                $row++;            }            // draw the borders            // we start adding a horizontal line on the last page            $this->page = $maxpage;            $this->Line($l, $h, $fullwidth+$l, $h);            // now we start at the top of the document and walk down            for ($i = $startpage; $i <= $maxpage; $i++) {                $this->page = $i;                $l = $this->lMargin;                $t = ($i == $startpage) ? $startheight : $this->tMargin;                $lh = ($i == $maxpage) ? $h : $this->h-$this->bMargin;                $this->Line($l, $t, $l, $lh);                foreach ($this->tablewidths as $width) {                    $l += $width;                    $this->Line($l, $t, $l, $lh);                }            }            // set it to the last page, if not it'll cause some problems            $this->page = $maxpage;        }        function setAttributes($attr = array())        {            foreach ($attr as $key => $val) {                $this->$key = $val ;            }        }        function setTopMargin($topMargin)        {            $this->tMargin = $topMargin;        }        function mysql_report($query)        {            unset($this->tablewidths);            unset($this->colTitles);            unset($this->titleWidth);            unset($this->colFits);            unset($this->display_column);            unset($this->colAlign);            /**             * Pass 1 for column widths             */            $this->results = PMA_DBI_query($query, null, PMA_DBI_QUERY_UNBUFFERED);            $this->numFields  = PMA_DBI_num_fields($this->results);            $this->fields = PMA_DBI_get_fields_meta($this->results);            // sColWidth = starting col width (an average size width)            $availableWidth = $this->w - $this->lMargin - $this->rMargin;            $this->sColWidth = $availableWidth / $this->numFields;            $totalTitleWidth = 0;            // loop through results header and set initial col widths/ titles/ alignment            // if a col title is less than the starting col width, reduce that column size            $colFits = array();            for ($i = 0; $i < $this->numFields; $i++) {                $stringWidth = $this->getstringwidth($this->fields[$i]->name) + 6 ;                // save the real title's width                $titleWidth[$i] = $stringWidth;                $totalTitleWidth += $stringWidth;                // set any column titles less than the start width to the column title width                if ($stringWidth < $this->sColWidth) {                    $colFits[$i] = $stringWidth ;                }                $this->colTitles[$i] = $this->fields[$i]->name;                $this->display_column[$i] = true;                switch ($this->fields[$i]->type) {                case 'int':                    $this->colAlign[$i] = 'R';                    break;                case 'blob':                case 'tinyblob':                case 'mediumblob':                case 'longblob':                    /**                     * @todo do not deactivate completely the display                     * but show the field's name and [BLOB]                     */                    if (stristr($this->fields[$i]->flags, 'BINARY')) {                        $this->display_column[$i] = false;                        unset($this->colTitles[$i]);                    }                    $this->colAlign[$i] = 'L';                    break;                default:                    $this->colAlign[$i] = 'L';                }            }            // title width verification            if ($totalTitleWidth > $availableWidth) {                $adjustingMode = true;            } else {                $adjustingMode = false;                // we have enough space for all the titles at their                // original width so use the true title's width                foreach ($titleWidth as $key => $val) {                    $colFits[$key] = $val;                }            }            // loop through the data; any column whose contents            // is greater than the column size is resized            /**              * @todo force here a LIMIT to avoid reading all rows              */            while ($row = PMA_DBI_fetch_row($this->results)) {                foreach ($colFits as $key => $val) {                    $stringWidth = $this->getstringwidth($row[$key]) + 6 ;                    if ($adjustingMode && ($stringWidth > $this->sColWidth)) {                        // any column whose data's width is bigger than                        // the start width is now discarded                        unset($colFits[$key]);                    } else {                        // if data's width is bigger than the current column width,                        // enlarge the column (but avoid enlarging it if the                        // data's width is very big)                        if ($stringWidth > $val && $stringWidth < ($this->sColWidth * 3)) {                            $colFits[$key] = $stringWidth ;                        }                    }                }            }            $totAlreadyFitted = 0;            foreach ($colFits as $key => $val) {                // set fitted columns to smallest size                $this->tablewidths[$key] = $val;                // to work out how much (if any) space has been freed up                $totAlreadyFitted += $val;            }            if ($adjustingMode) {                $surplus = (sizeof($colFits) * $this->sColWidth) - $totAlreadyFitted;                $surplusToAdd = $surplus / ($this->numFields - sizeof($colFits));            } else {                $surplusToAdd = 0;            }            for ($i=0; $i < $this->numFields; $i++) {                if (!in_array($i, array_keys($colFits))) {                    $this->tablewidths[$i] = $this->sColWidth + $surplusToAdd;                }                if ($this->display_column[$i] == false) {                    $this->tablewidths[$i] = 0;                }            }            ksort($this->tablewidths);            PMA_DBI_free_result($this->results);            // Pass 2            $this->results = PMA_DBI_query($query, null, PMA_DBI_QUERY_UNBUFFERED);            $this->setY($this->tMargin);            $this->AddPage();            $this->SetFont(PMA_PDF_FONT, '', 9);            $this->morepagestable($this->FontSizePt);            PMA_DBI_free_result($this->results);        } // end of mysql_report function    } // end of PMA_Export_PDF class    $pdf = new PMA_Export_PDF('L', 'pt', 'A3');    /**     * Finalize the pdf.     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        global $pdf;        // instead of $pdf->Output():        if (!PMA_exportOutputHandler($pdf->getPDFData())) {            return false;        }        return true;    }    /**     * Initialize the pdf to export data.     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        global $pdf_report_title;        global $pdf;        $pdf->Open();        $attr = array('titleFontSize' => 18, 'titleText' => $pdf_report_title);        $pdf->setAttributes($attr);        $pdf->setTopMargin(30);        return true;    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        return true;    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in PDF format     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $pdf;        $attr=array('currentDb' => $db, 'currentTable' => $table);        $pdf->setAttributes($attr);        $pdf->mysql_report($sql_query);        return true;    } // end of the 'PMA_exportData()' function}?>
<?php/* AUTOGENERATED CONTENT - DO NOT EDIT *//* ALL CHANGES WILL BE UNDONE *//* RUN './scripts/generate-sprites' TO UPDATE THIS FILE */function PMA_sprites() {    return array(        'asc_order' => array(            'position' => '1',            'width'    => '16',            'height'   => '16'        ),        'b_bookmark' => array(            'position' => '2',            'width'    => '16',            'height'   => '16'        ),        'b_browse' => array(            'position' => '3',            'width'    => '16',            'height'   => '16'        ),        'b_calendar' => array(            'position' => '4',            'width'    => '16',            'height'   => '16'        ),        'b_chart' => array(            'position' => '5',            'width'    => '16',            'height'   => '16'        ),        'b_close' => array(            'position' => '6',            'width'    => '16',            'height'   => '16'        ),        'b_comment' => array(            'position' => '7',            'width'    => '16',            'height'   => '16'        ),        'bd_browse' => array(            'position' => '8',            'width'    => '16',            'height'   => '16'        ),        'b_dbstatistics' => array(            'position' => '9',            'width'    => '16',            'height'   => '16'        ),        'bd_deltbl' => array(            'position' => '10',            'width'    => '16',            'height'   => '16'        ),        'bd_drop' => array(            'position' => '11',            'width'    => '16',            'height'   => '16'        ),        'bd_edit' => array(            'position' => '12',            'width'    => '16',            'height'   => '16'        ),        'b_deltbl' => array(            'position' => '13',            'width'    => '16',            'height'   => '16'        ),        'bd_empty' => array(            'position' => '14',            'width'    => '16',            'height'   => '16'        ),        'bd_export' => array(            'position' => '15',            'width'    => '16',            'height'   => '16'        ),        'bd_firstpage' => array(            'position' => '16',            'width'    => '16',            'height'   => '16'        ),        'bd_ftext' => array(            'position' => '17',            'width'    => '16',            'height'   => '16'        ),        'bd_index' => array(            'position' => '18',            'width'    => '16',            'height'   => '16'        ),        'bd_insrow' => array(            'position' => '19',            'width'    => '16',            'height'   => '16'        ),        'bd_lastpage' => array(            'position' => '20',            'width'    => '16',            'height'   => '16'        ),        'bd_nextpage' => array(            'position' => '21',            'width'    => '16',            'height'   => '16'        ),        'b_docs' => array(            'position' => '22',            'width'    => '16',            'height'   => '16'        ),        'b_docsql' => array(            'position' => '23',            'width'    => '16',            'height'   => '16'        ),        'bd_prevpage' => array(            'position' => '24',            'width'    => '16',            'height'   => '16'        ),        'bd_primary' => array(            'position' => '25',            'width'    => '16',            'height'   => '16'        ),        'b_drop' => array(            'position' => '26',            'width'    => '16',            'height'   => '16'        ),        'bd_sbrowse' => array(            'position' => '27',            'width'    => '16',            'height'   => '16'        ),        'bd_select' => array(            'position' => '28',            'width'    => '16',            'height'   => '16'        ),        'bd_spatial' => array(            'position' => '29',            'width'    => '16',            'height'   => '16'        ),        'bd_unique' => array(            'position' => '30',            'width'    => '16',            'height'   => '16'        ),        'b_edit' => array(            'position' => '31',            'width'    => '16',            'height'   => '16'        ),        'b_empty' => array(            'position' => '32',            'width'    => '16',            'height'   => '16'        ),        'b_engine' => array(            'position' => '33',            'width'    => '16',            'height'   => '16'        ),        'b_event_add' => array(            'position' => '34',            'width'    => '16',            'height'   => '16'        ),        'b_events' => array(            'position' => '35',            'width'    => '16',            'height'   => '16'        ),        'b_export' => array(            'position' => '36',            'width'    => '16',            'height'   => '16'        ),        'b_firstpage' => array(            'position' => '37',            'width'    => '16',            'height'   => '16'        ),        'b_ftext' => array(            'position' => '38',            'width'    => '16',            'height'   => '16'        ),        'b_help' => array(            'position' => '39',            'width'    => '16',            'height'   => '16'        ),        'b_home' => array(            'position' => '40',            'width'    => '16',            'height'   => '16'        ),        'b_import' => array(            'position' => '41',            'width'    => '16',            'height'   => '16'        ),        'b_index' => array(            'position' => '42',            'width'    => '16',            'height'   => '16'        ),        'b_info' => array(            'position' => '43',            'width'    => '11',            'height'   => '11'        ),        'b_inline_edit' => array(            'position' => '44',            'width'    => '16',            'height'   => '16'        ),        'b_insrow' => array(            'position' => '45',            'width'    => '16',            'height'   => '16'        ),        'b_lastpage' => array(            'position' => '46',            'width'    => '16',            'height'   => '16'        ),        'b_minus' => array(            'position' => '47',            'width'    => '16',            'height'   => '16'        ),        'b_more' => array(            'position' => '48',            'width'    => '16',            'height'   => '16'        ),        'b_newdb' => array(            'position' => '49',            'width'    => '16',            'height'   => '16'        ),        'b_newtbl' => array(            'position' => '50',            'width'    => '16',            'height'   => '16'        ),        'b_nextpage' => array(            'position' => '51',            'width'    => '16',            'height'   => '16'        ),        'b_pdfdoc' => array(            'position' => '52',            'width'    => '16',            'height'   => '16'        ),        'b_plus' => array(            'position' => '53',            'width'    => '16',            'height'   => '16'        ),        'b_prevpage' => array(            'position' => '54',            'width'    => '16',            'height'   => '16'        ),        'b_primary' => array(            'position' => '55',            'width'    => '16',            'height'   => '16'        ),        'b_print' => array(            'position' => '56',            'width'    => '16',            'height'   => '16'        ),        'b_props' => array(            'position' => '57',            'width'    => '16',            'height'   => '16'        ),        'b_relations' => array(            'position' => '58',            'width'    => '16',            'height'   => '16'        ),        'b_routine_add' => array(            'position' => '59',            'width'    => '16',            'height'   => '16'        ),        'b_routines' => array(            'position' => '60',            'width'    => '16',            'height'   => '16'        ),        'b_save' => array(            'position' => '61',            'width'    => '16',            'height'   => '16'        ),        'b_sbrowse' => array(            'position' => '62',            'width'    => '16',            'height'   => '16'        ),        'b_sdb' => array(            'position' => '63',            'width'    => '10',            'height'   => '10'        ),        'b_search' => array(            'position' => '64',            'width'    => '16',            'height'   => '16'        ),        'b_selboard' => array(            'position' => '65',            'width'    => '16',            'height'   => '16'        ),        'b_select' => array(            'position' => '66',            'width'    => '16',            'height'   => '16'        ),        'b_snewtbl' => array(            'position' => '67',            'width'    => '16',            'height'   => '16'        ),        'b_spatial' => array(            'position' => '68',            'width'    => '16',            'height'   => '16'        ),        'b_sqldoc' => array(            'position' => '69',            'width'    => '16',            'height'   => '16'        ),        'b_sqlhelp' => array(            'position' => '70',            'width'    => '16',            'height'   => '16'        ),        'b_sql' => array(            'position' => '71',            'width'    => '16',            'height'   => '16'        ),        'b_tblanalyse' => array(            'position' => '72',            'width'    => '16',            'height'   => '16'        ),        'b_tblexport' => array(            'position' => '73',            'width'    => '16',            'height'   => '16'        ),        'b_tblimport' => array(            'position' => '74',            'width'    => '16',            'height'   => '16'        ),        'b_tblops' => array(            'position' => '75',            'width'    => '16',            'height'   => '16'        ),        'b_tbloptimize' => array(            'position' => '76',            'width'    => '16',            'height'   => '16'        ),        'b_tipp' => array(            'position' => '77',            'width'    => '16',            'height'   => '16'        ),        'b_trigger_add' => array(            'position' => '78',            'width'    => '16',            'height'   => '16'        ),        'b_triggers' => array(            'position' => '79',            'width'    => '16',            'height'   => '16'        ),        'b_unique' => array(            'position' => '80',            'width'    => '16',            'height'   => '16'        ),        'b_usradd' => array(            'position' => '81',            'width'    => '16',            'height'   => '16'        ),        'b_usrcheck' => array(            'position' => '82',            'width'    => '16',            'height'   => '16'        ),        'b_usrdrop' => array(            'position' => '83',            'width'    => '16',            'height'   => '16'        ),        'b_usredit' => array(            'position' => '84',            'width'    => '16',            'height'   => '16'        ),        'b_usrlist' => array(            'position' => '85',            'width'    => '16',            'height'   => '16'        ),        'b_view' => array(            'position' => '86',            'width'    => '16',            'height'   => '16'        ),        'b_views' => array(            'position' => '87',            'width'    => '16',            'height'   => '16'        ),        'col_drop' => array(            'position' => '88',            'width'    => '16',            'height'   => '16'        ),        'database' => array(            'position' => '89',            'width'    => '16',            'height'   => '16'        ),        'docs_menu_bg' => array(            'position' => '90',            'width'    => '2',            'height'   => '2'        ),        'eye_grey' => array(            'position' => '91',            'width'    => '16',            'height'   => '16'        ),        'eye' => array(            'position' => '92',            'width'    => '16',            'height'   => '16'        ),        'item_ltr' => array(            'position' => '93',            'width'    => '5',            'height'   => '9'        ),        'item' => array(            'position' => '94',            'width'    => '9',            'height'   => '9'        ),        'item_rtl' => array(            'position' => '95',            'width'    => '5',            'height'   => '9'        ),        'more' => array(            'position' => '96',            'width'    => '13',            'height'   => '16'        ),        'new_data_hovered' => array(            'position' => '97',            'width'    => '16',            'height'   => '16'        ),        'new_data' => array(            'position' => '98',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected_hovered' => array(            'position' => '99',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected' => array(            'position' => '100',            'width'    => '16',            'height'   => '16'        ),        'new_struct_hovered' => array(            'position' => '101',            'width'    => '16',            'height'   => '16'        ),        'new_struct' => array(            'position' => '102',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected_hovered' => array(            'position' => '103',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected' => array(            'position' => '104',            'width'    => '16',            'height'   => '16'        ),        'pause' => array(            'position' => '105',            'width'    => '16',            'height'   => '16'        ),        'php_sym' => array(            'position' => '106',            'width'    => '16',            'height'   => '16'        ),        'play' => array(            'position' => '107',            'width'    => '16',            'height'   => '16'        ),        's_asci' => array(            'position' => '108',            'width'    => '16',            'height'   => '16'        ),        's_asc' => array(            'position' => '109',            'width'    => '16',            'height'   => '16'        ),        's_attention' => array(            'position' => '110',            'width'    => '16',            'height'   => '16'        ),        's_cancel2' => array(            'position' => '111',            'width'    => '16',            'height'   => '16'        ),        's_cancel' => array(            'position' => '112',            'width'    => '16',            'height'   => '16'        ),        's_cog' => array(            'position' => '113',            'width'    => '16',            'height'   => '16'        ),        's_db' => array(            'position' => '114',            'width'    => '16',            'height'   => '16'        ),        's_desc' => array(            'position' => '115',            'width'    => '16',            'height'   => '16'        ),        's_error2' => array(            'position' => '116',            'width'    => '11',            'height'   => '11'        ),        's_error' => array(            'position' => '117',            'width'    => '16',            'height'   => '16'        ),        's_host' => array(            'position' => '118',            'width'    => '16',            'height'   => '16'        ),        's_info' => array(            'position' => '119',            'width'    => '16',            'height'   => '16'        ),        's_lang' => array(            'position' => '120',            'width'    => '16',            'height'   => '16'        ),        's_loggoff' => array(            'position' => '121',            'width'    => '16',            'height'   => '16'        ),        's_notice' => array(            'position' => '122',            'width'    => '16',            'height'   => '16'        ),        's_okay' => array(            'position' => '123',            'width'    => '16',            'height'   => '16'        ),        's_passwd' => array(            'position' => '124',            'width'    => '16',            'height'   => '16'        ),        's_process' => array(            'position' => '125',            'width'    => '16',            'height'   => '16'        ),        's_really' => array(            'position' => '126',            'width'    => '11',            'height'   => '11'        ),        's_reload' => array(            'position' => '127',            'width'    => '16',            'height'   => '16'        ),        's_replication' => array(            'position' => '128',            'width'    => '16',            'height'   => '16'        ),        's_rights' => array(            'position' => '129',            'width'    => '16',            'height'   => '16'        ),        's_sortable' => array(            'position' => '130',            'width'    => '16',            'height'   => '16'        ),        's_status' => array(            'position' => '131',            'width'    => '16',            'height'   => '16'        ),        's_success' => array(            'position' => '132',            'width'    => '16',            'height'   => '16'        ),        's_sync' => array(            'position' => '133',            'width'    => '16',            'height'   => '16'        ),        's_tbl' => array(            'position' => '134',            'width'    => '16',            'height'   => '16'        ),        's_theme' => array(            'position' => '135',            'width'    => '16',            'height'   => '16'        ),        's_vars' => array(            'position' => '136',            'width'    => '16',            'height'   => '16'        ),        's_views' => array(            'position' => '137',            'width'    => '16',            'height'   => '16'        ),        'window-new' => array(            'position' => '138',            'width'    => '16',            'height'   => '16'        ),    );}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles creation of the chart * * @package PhpMyAdmin *//** * do not import request variable into global scope * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'tbl_chart.js';$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';/* < IE 9 doesn't support canvas natively */if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {    $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';}$GLOBALS['js_include'][] = 'canvg/canvg.js';/** * Runs common work */if (strlen($GLOBALS['table'])) {    $url_params['goto'] = $cfg['DefaultTabTable'];    $url_params['back'] = 'tbl_sql.php';    include './libraries/tbl_common.php';    include './libraries/tbl_info.inc.php';    include './libraries/tbl_links.inc.php';} elseif (strlen($GLOBALS['db'])) {    $url_params['goto'] = $cfg['DefaultTabDatabase'];    $url_params['back'] = 'sql.php';    include './libraries/db_common.inc.php';    include './libraries/db_info.inc.php';} else {    $url_params['goto'] = $cfg['DefaultTabServer'];    $url_params['back'] = 'sql.php';    include './libraries/server_common.inc.php';    include './libraries/server_links.inc.php';}/* * Execute the query and return the result */$data = array();$result = PMA_DBI_try_query($sql_query);while ($row = PMA_DBI_fetch_assoc($result)) {    $data[] = $row;}// get settings if any posted$chartSettings = array();if (PMA_isValid($_REQUEST['chartSettings'], 'array')) {    $chartSettings = $_REQUEST['chartSettings'];}$url_params['db'] = $GLOBALS['db'];$url_params['reload'] = 1;/** * Displays the page */// pma_token/url_query needed for chart export?><script type="text/javascript">pma_token = '<?php echo $_SESSION[' PMA_token ']; ?>';url_query = '<?php echo $url_query;?>';</script><!-- Display Chart options --><div id="div_view_options"><form method="post" action="tbl_chart.php"><?php echo PMA_generate_common_hidden_inputs($url_params); ?><fieldset>    <legend><?php echo __('Display chart'); ?></legend>    <div style="float:left;">        <input type="radio" name="chartType" value="bar" id="radio_bar" />        <label for ="radio_bar"><?php echo _pgettext('Chart type', 'Bar'); ?></label>        <input type="radio" name="chartType" value="column" id="radio_column" />        <label for ="radio_column"><?php echo _pgettext('Chart type', 'Column'); ?></label>        <input type="radio" name="chartType" value="line" id="radio_line" checked="checked" />        <label for ="radio_line"><?php echo _pgettext('Chart type', 'Line'); ?></label>        <input type="radio" name="chartType" value="spline" id="radio_spline" />        <label for ="radio_spline"><?php echo _pgettext('Chart type', 'Spline'); ?></label>        <input type="radio" name="chartType" value="pie" id="radio_pie" />        <label for ="radio_pie"><?php echo _pgettext('Chart type', 'Pie'); ?></label>        <span class="barStacked" style="display:none;">        <input type="checkbox" name="barStacked" value="1" id="checkbox_barStacked" />        <label for ="checkbox_barStacked"><?php echo __('Stacked'); ?></label>        </span>        <br>        <input type="text" name="chartTitle" value="<?php echo __('Chart title'); ?>">        <?php        $keys = array_keys($data[0]);        $yaxis = -1;        if (count($keys) > 1) { ?>            <br />            <label for="select_chartXAxis"><?php echo __('X-Axis:'); ?></label>            <select name="chartXAxis" id="select_chartXAxis">            <?php                        foreach ($keys as $idx => $key) {                if ($yaxis == -1 && (($idx == count($data[0]) - 1) || preg_match("/(date|time)/i", $key))) {                    echo '<option value="' . htmlspecialchars($idx) . '" selected>' . htmlspecialchars($key) . '</option>';                    $yaxis=$idx;                } else {                    echo '<option value="' . htmlspecialchars($idx) . '">' . htmlspecialchars($key) . '</option>';                }            }                        ?>        </select><br />        <label for="select_chartSeries"><?php echo __('Series:'); ?></label>        <select name="chartSeries" id="select_chartSeries">            <option value="columns"><?php echo __('The remaining columns'); ?></option>            <?php            foreach ($keys as $idx => $key) {                echo '<option>' . htmlspecialchars($key) . '</option>';            }        ?>        </select>        <?php        }        ?>            </div>    <div style="float:left; padding-left:40px;">        <label for="xaxis_label"><?php echo __('X-Axis label:'); ?></label>        <input style="margin-top:0;" type="text" name="xaxis_label" id="xaxis_label"            value="<?php echo ($yaxis == -1) ? __('X Values') : htmlspecialchars($keys[$yaxis]); ?>" /><br />        <label for="yaxis_label"><?php echo __('Y-Axis label:'); ?></label>        <input type="text" name="yaxis_label" id="yaxis_label" value="<?php echo __('Y Values'); ?>" />    </div>    <p style="clear:both;">&nbsp;</p>    <div id="resizer" style="width:600px; height:400px;">        <div id="inner-resizer">            <div id="querychart" style="display:none;"><?php$sanitized_data = array();foreach ($data as $data_row_number => $data_row) {    $tmp_row = array();    foreach ($data_row as $data_column => $data_value) {        $tmp_row[htmlspecialchars($data_column)] = htmlspecialchars($data_value);    }    $sanitized_data[] = $tmp_row;} echo json_encode($sanitized_data); unset($sanitized_data);?>            </div>        </div>    </div></fieldset></form></div><?php/** * Displays the footer */require_once './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Events management. * * @package PhpMyAdmin *//** * Include required files */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';/** * Include JavaScript libraries */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'rte/common.js';$GLOBALS['js_include'][] = 'rte/events.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';/** * Include all other files */require_once './libraries/rte/rte_events.lib.php';/** * Do the magic */$_PMA_RTE = 'EVN';require_once './libraries/rte/rte_main.inc.php';?>
<?php  function loadData($type, $data) {    if (!$data) return $data;    $tmp = unpack($type, $data);    return current($tmp);  }  function swap($binValue) {    $result = $binValue{strlen($binValue) - 1};    for($i = strlen($binValue) - 2; $i >= 0 ; $i--) {      $result .= $binValue{$i};    }    return $result;  }  function packDouble($value, $mode = 'LE') {    $value = (double)$value;    $bin = pack("d", $value);    //We test if the conversion of an integer (1) is done as LE or BE by default    switch (pack ('L', 1)) {      case pack ('V', 1): //Little Endian        $result = ($mode == 'LE') ? $bin : swap($bin);      break;      case pack ('N', 1): //Big Endian        $result = ($mode == 'BE') ? $bin : swap($bin);      break;      default: //Some other thing, we just return false        $result = FALSE;    }    return $result;  }  class ShapeFile {    var $FileName;    var $SHPFile;    var $SHXFile;    var $DBFFile;    var $DBFHeader;    var $lastError = "";    var $boundingBox = array("xmin" => 0.0, "ymin" => 0.0, "xmax" => 0.0, "ymax" => 0.0);    var $fileLength = 0;    var $shapeType = 0;    var $records;    function ShapeFile($shapeType, $boundingBox = array("xmin" => 0.0, "ymin" => 0.0, "xmax" => 0.0, "ymax" => 0.0), $FileName = NULL) {      $this->shapeType = $shapeType;      $this->boundingBox = $boundingBox;      $this->FileName = $FileName;      $this->fileLength = 50;    }    function loadFromFile($FileName) {      $this->FileName = $FileName;      if (($this->_openSHPFile()) && ($this->_openDBFFile())) {        $this->_loadHeaders();        $this->_loadRecords();        $this->_closeSHPFile();        $this->_closeDBFFile();      } else {        return false;      }    }    function saveToFile($FileName = NULL) {      if ($FileName != NULL) $this->FileName = $FileName;      if (($this->_openSHPFile(TRUE)) && ($this->_openSHXFile(TRUE)) && ($this->_openDBFFile(TRUE))) {        $this->_saveHeaders();        $this->_saveRecords();        $this->_closeSHPFile();        $this->_closeSHXFile();        $this->_closeDBFFile();      } else {        return false;      }    }    function addRecord($record) {      if ((isset($this->DBFHeader)) && (is_array($this->DBFHeader))) {        $record->updateDBFInfo($this->DBFHeader);      }      $this->fileLength += ($record->getContentLength() + 4);      $this->records[] = $record;      $this->records[count($this->records) - 1]->recordNumber = count($this->records);      return (count($this->records) - 1);    }    function deleteRecord($index) {      if (isset($this->records[$index])) {        $this->fileLength -= ($this->records[$index]->getContentLength() + 4);        for ($i = $index; $i < (count($this->records) - 1); $i++) {          $this->records[$i] = $this->records[$i + 1];        }        unset($this->records[count($this->records) - 1]);        $this->_deleteRecordFromDBF($index);      }    }    function getDBFHeader() {      return $this->DBFHeader;    }    function setDBFHeader($header) {      $this->DBFHeader = $header;      for ($i = 0; $i < count($this->records); $i++) {        $this->records[$i]->updateDBFInfo($header);      }    }    function getIndexFromDBFData($field, $value) {      $result = -1;      for ($i = 0; $i < (count($this->records) - 1); $i++) {        if (isset($this->records[$i]->DBFData[$field]) && (strtoupper($this->records[$i]->DBFData[$field]) == strtoupper($value))) {          $result = $i;        }      }      return $result;    }    function _loadDBFHeader() {      $DBFFile = fopen(str_replace('.*', '.dbf', $this->FileName), 'r');      $result = array();      $buff32 = array();      $i = 1;      $inHeader = true;      while ($inHeader) {        if (!feof($DBFFile)) {          $buff32 = fread($DBFFile, 32);          if ($i > 1) {            if (substr($buff32, 0, 1) == chr(13)) {              $inHeader = false;            } else {              $pos = strpos(substr($buff32, 0, 10), chr(0));              $pos = ($pos == 0 ? 10 : $pos);              $fieldName = substr($buff32, 0, $pos);              $fieldType = substr($buff32, 11, 1);              $fieldLen = ord(substr($buff32, 16, 1));              $fieldDec = ord(substr($buff32, 17, 1));              array_push($result, array($fieldName, $fieldType, $fieldLen, $fieldDec));            }          }          $i++;        } else {          $inHeader = false;        }      }      fclose($DBFFile);      return($result);    }    function _deleteRecordFromDBF($index) {      if (@dbase_delete_record($this->DBFFile, $index)) {        @dbase_pack($this->DBFFile);      }    }    function _loadHeaders() {      fseek($this->SHPFile, 24, SEEK_SET);      $this->fileLength = loadData("N", fread($this->SHPFile, 4));      fseek($this->SHPFile, 32, SEEK_SET);      $this->shapeType = loadData("V", fread($this->SHPFile, 4));      $this->boundingBox = array();      $this->boundingBox["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->DBFHeader = $this->_loadDBFHeader();    }    function _saveHeaders() {      fwrite($this->SHPFile, pack("NNNNNN", 9994, 0, 0, 0, 0, 0));      fwrite($this->SHPFile, pack("N", $this->fileLength));      fwrite($this->SHPFile, pack("V", 1000));      fwrite($this->SHPFile, pack("V", $this->shapeType));      fwrite($this->SHPFile, packDouble($this->boundingBox['xmin']));      fwrite($this->SHPFile, packDouble($this->boundingBox['ymin']));      fwrite($this->SHPFile, packDouble($this->boundingBox['xmax']));      fwrite($this->SHPFile, packDouble($this->boundingBox['ymax']));      fwrite($this->SHPFile, pack("dddd", 0, 0, 0, 0));      fwrite($this->SHXFile, pack("NNNNNN", 9994, 0, 0, 0, 0, 0));      fwrite($this->SHXFile, pack("N", 50 + 4*count($this->records)));      fwrite($this->SHXFile, pack("V", 1000));      fwrite($this->SHXFile, pack("V", $this->shapeType));      fwrite($this->SHXFile, packDouble($this->boundingBox['xmin']));      fwrite($this->SHXFile, packDouble($this->boundingBox['ymin']));      fwrite($this->SHXFile, packDouble($this->boundingBox['xmax']));      fwrite($this->SHXFile, packDouble($this->boundingBox['ymax']));      fwrite($this->SHXFile, pack("dddd", 0, 0, 0, 0));    }    function _loadRecords() {      fseek($this->SHPFile, 100);      while (!feof($this->SHPFile)) {        $bByte = ftell($this->SHPFile);        $record = new ShapeRecord(-1);        $record->loadFromFile($this->SHPFile, $this->DBFFile);        $eByte = ftell($this->SHPFile);        if (($eByte <= $bByte) || ($record->lastError != "")) {          return false;        }        $this->records[] = $record;      }    }    function _saveRecords() {      if (file_exists(str_replace('.*', '.dbf', $this->FileName))) {        @unlink(str_replace('.*', '.dbf', $this->FileName));      }      if (!($this->DBFFile = @dbase_create(str_replace('.*', '.dbf', $this->FileName), $this->DBFHeader))) {        return $this->setError(sprintf("It wasn't possible to create the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));      }      $offset = 50;      if (is_array($this->records) && (count($this->records) > 0)) {        reset($this->records);        while (list($index, $record) = each($this->records)) {          //Save the record to the .shp file          $record->saveToFile($this->SHPFile, $this->DBFFile, $index + 1);          //Save the record to the .shx file          fwrite($this->SHXFile, pack("N", $offset));          fwrite($this->SHXFile, pack("N", $record->getContentLength()));          $offset += (4 + $record->getContentLength());        }      }      @dbase_pack($this->DBFFile);    }    function _openSHPFile($toWrite = false) {      $this->SHPFile = @fopen(str_replace('.*', '.shp', $this->FileName), ($toWrite ? "wb+" : "rb"));      if (!$this->SHPFile) {        return $this->setError(sprintf("It wasn't possible to open the Shape file '%s'", str_replace('.*', '.shp', $this->FileName)));      }      return TRUE;    }    function _closeSHPFile() {      if ($this->SHPFile) {        fclose($this->SHPFile);        $this->SHPFile = NULL;      }    }    function _openSHXFile($toWrite = false) {      $this->SHXFile = @fopen(str_replace('.*', '.shx', $this->FileName), ($toWrite ? "wb+" : "rb"));      if (!$this->SHXFile) {        return $this->setError(sprintf("It wasn't possible to open the Index file '%s'", str_replace('.*', '.shx', $this->FileName)));      }      return TRUE;    }    function _closeSHXFile() {      if ($this->SHXFile) {        fclose($this->SHXFile);        $this->SHXFile = NULL;      }    }    function _openDBFFile($toWrite = false) {      $checkFunction = $toWrite ? "is_writable" : "is_readable";      if (($toWrite) && (!file_exists(str_replace('.*', '.dbf', $this->FileName)))) {        if (!@dbase_create(str_replace('.*', '.dbf', $this->FileName), $this->DBFHeader)) {          return $this->setError(sprintf("It wasn't possible to create the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));        }      }      if ($checkFunction(str_replace('.*', '.dbf', $this->FileName))) {        $this->DBFFile = dbase_open(str_replace('.*', '.dbf', $this->FileName), ($toWrite ? 2 : 0));        if (!$this->DBFFile) {          return $this->setError(sprintf("It wasn't possible to open the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));        }      } else {        return $this->setError(sprintf("It wasn't possible to find the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));      }      return TRUE;    }    function _closeDBFFile() {      if ($this->DBFFile) {        dbase_close($this->DBFFile);        $this->DBFFile = NULL;      }    }    function setError($error) {      $this->lastError = $error;      return false;    }  }  class ShapeRecord {    var $SHPFile = NULL;    var $DBFFile = NULL;    var $recordNumber = NULL;    var $shapeType = NULL;    var $lastError = "";    var $SHPData = array();    var $DBFData = array();    function ShapeRecord($shapeType) {      $this->shapeType = $shapeType;    }    function loadFromFile(&$SHPFile, &$DBFFile) {      $this->SHPFile = $SHPFile;      $this->DBFFile = $DBFFile;      $this->_loadHeaders();      switch ($this->shapeType) {        case 0:          $this->_loadNullRecord();        break;        case 1:          $this->_loadPointRecord();        break;        case 3:          $this->_loadPolyLineRecord();        break;        case 5:          $this->_loadPolygonRecord();        break;        case 8:          $this->_loadMultiPointRecord();        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      $this->_loadDBFData();    }    function saveToFile(&$SHPFile, &$DBFFile, $recordNumber) {      $this->SHPFile = $SHPFile;      $this->DBFFile = $DBFFile;      $this->recordNumber = $recordNumber;      $this->_saveHeaders();      switch ($this->shapeType) {        case 0:          $this->_saveNullRecord();        break;        case 1:          $this->_savePointRecord();        break;        case 3:          $this->_savePolyLineRecord();        break;        case 5:          $this->_savePolygonRecord();        break;        case 8:          $this->_saveMultiPointRecord();        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      $this->_saveDBFData();    }    function updateDBFInfo($header) {      $tmp = $this->DBFData;      unset($this->DBFData);      $this->DBFData = array();      reset($header);      while (list($key, $value) = each($header)) {        $this->DBFData[$value[0]] = (isset($tmp[$value[0]])) ? $tmp[$value[0]] : "";      }    }    function _loadHeaders() {      $this->recordNumber = loadData("N", fread($this->SHPFile, 4));      $tmp = loadData("N", fread($this->SHPFile, 4)); //We read the length of the record      $this->shapeType = loadData("V", fread($this->SHPFile, 4));    }    function _saveHeaders() {      fwrite($this->SHPFile, pack("N", $this->recordNumber));      fwrite($this->SHPFile, pack("N", $this->getContentLength()));      fwrite($this->SHPFile, pack("V", $this->shapeType));    }    function _loadPoint() {      $data = array();      $data["x"] = loadData("d", fread($this->SHPFile, 8));      $data["y"] = loadData("d", fread($this->SHPFile, 8));      return $data;    }    function _savePoint($data) {      fwrite($this->SHPFile, packDouble($data["x"]));      fwrite($this->SHPFile, packDouble($data["y"]));    }    function _loadNullRecord() {      $this->SHPData = array();    }    function _saveNullRecord() {      //Don't save anything    }    function _loadPointRecord() {      $this->SHPData = $this->_loadPoint();    }    function _savePointRecord() {      $this->_savePoint($this->SHPData);    }    function _loadMultiPointRecord() {      $this->SHPData = array();      $this->SHPData["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["numpoints"] = loadData("V", fread($this->SHPFile, 4));      for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {        $this->SHPData["points"][] = $this->_loadPoint();      }    }    function _saveMultiPointRecord() {      fwrite($this->SHPFile, pack("dddd", $this->SHPData["xmin"], $this->SHPData["ymin"], $this->SHPData["xmax"], $this->SHPData["ymax"]));      fwrite($this->SHPFile, pack("V", $this->SHPData["numpoints"]));      for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {        $this->_savePoint($this->SHPData["points"][$i]);      }    }    function _loadPolyLineRecord() {      $this->SHPData = array();      $this->SHPData["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["numparts"]  = loadData("V", fread($this->SHPFile, 4));      $this->SHPData["numpoints"] = loadData("V", fread($this->SHPFile, 4));      for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {        $this->SHPData["parts"][$i] = loadData("V", fread($this->SHPFile, 4));      }      $firstIndex = ftell($this->SHPFile);      $readPoints = 0;      reset($this->SHPData["parts"]);      while (list($partIndex, $partData) = each($this->SHPData["parts"])) {        if (!isset($this->SHPData["parts"][$partIndex]["points"]) || !is_array($this->SHPData["parts"][$partIndex]["points"])) {          $this->SHPData["parts"][$partIndex] = array();          $this->SHPData["parts"][$partIndex]["points"] = array();        }        while (!in_array($readPoints, $this->SHPData["parts"]) && ($readPoints < ($this->SHPData["numpoints"])) && !feof($this->SHPFile)) {          $this->SHPData["parts"][$partIndex]["points"][] = $this->_loadPoint();          $readPoints++;        }      }      fseek($this->SHPFile, $firstIndex + ($readPoints*16));    }    function _savePolyLineRecord() {      fwrite($this->SHPFile, pack("dddd", $this->SHPData["xmin"], $this->SHPData["ymin"], $this->SHPData["xmax"], $this->SHPData["ymax"]));      fwrite($this->SHPFile, pack("VV", $this->SHPData["numparts"], $this->SHPData["numpoints"]));      for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {        fwrite($this->SHPFile, pack("V", count($this->SHPData["parts"][$i])));      }      reset($this->SHPData["parts"]);      foreach ($this->SHPData["parts"] as $partData){        reset($partData["points"]);        while (list($pointIndex, $pointData) = each($partData["points"])) {          $this->_savePoint($pointData);        }      }    }    function _loadPolygonRecord() {      $this->_loadPolyLineRecord();    }    function _savePolygonRecord() {      $this->_savePolyLineRecord();    }    function addPoint($point, $partIndex = 0) {      switch ($this->shapeType) {        case 0:          //Don't add anything        break;        case 1:          //Substitutes the value of the current point          $this->SHPData = $point;        break;        case 3:        case 5:          //Adds a new point to the selected part          if (!isset($this->SHPData["xmin"]) || ($this->SHPData["xmin"] > $point["x"])) $this->SHPData["xmin"] = $point["x"];          if (!isset($this->SHPData["ymin"]) || ($this->SHPData["ymin"] > $point["y"])) $this->SHPData["ymin"] = $point["y"];          if (!isset($this->SHPData["xmax"]) || ($this->SHPData["xmax"] < $point["x"])) $this->SHPData["xmax"] = $point["x"];          if (!isset($this->SHPData["ymax"]) || ($this->SHPData["ymax"] < $point["y"])) $this->SHPData["ymax"] = $point["y"];          $this->SHPData["parts"][$partIndex]["points"][] = $point;          $this->SHPData["numparts"] = count($this->SHPData["parts"]);          $this->SHPData["numpoints"]++;        break;        case 8:          //Adds a new point          if (!isset($this->SHPData["xmin"]) || ($this->SHPData["xmin"] > $point["x"])) $this->SHPData["xmin"] = $point["x"];          if (!isset($this->SHPData["ymin"]) || ($this->SHPData["ymin"] > $point["y"])) $this->SHPData["ymin"] = $point["y"];          if (!isset($this->SHPData["xmax"]) || ($this->SHPData["xmax"] < $point["x"])) $this->SHPData["xmax"] = $point["x"];          if (!isset($this->SHPData["ymax"]) || ($this->SHPData["ymax"] < $point["y"])) $this->SHPData["ymax"] = $point["y"];          $this->SHPData["points"][] = $point;          $this->SHPData["numpoints"]++;        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }    }    function deletePoint($pointIndex = 0, $partIndex = 0) {      switch ($this->shapeType) {        case 0:          //Don't delete anything        break;        case 1:          //Sets the value of the point to zero          $this->SHPData["x"] = 0.0;          $this->SHPData["y"] = 0.0;        break;        case 3:        case 5:          //Deletes the point from the selected part, if exists          if (isset($this->SHPData["parts"][$partIndex]) && isset($this->SHPData["parts"][$partIndex]["points"][$pointIndex])) {            for ($i = $pointIndex; $i < (count($this->SHPData["parts"][$partIndex]["points"]) - 1); $i++) {              $this->SHPData["parts"][$partIndex]["points"][$i] = $this->SHPData["parts"][$partIndex]["points"][$i + 1];            }            unset($this->SHPData["parts"][$partIndex]["points"][count($this->SHPData["parts"][$partIndex]["points"]) - 1]);            $this->SHPData["numparts"] = count($this->SHPData["parts"]);            $this->SHPData["numpoints"]--;          }        break;        case 8:          //Deletes the point, if exists          if (isset($this->SHPData["points"][$pointIndex])) {            for ($i = $pointIndex; $i < (count($this->SHPData["points"]) - 1); $i++) {              $this->SHPData["points"][$i] = $this->SHPData["points"][$i + 1];            }            unset($this->SHPData["points"][count($this->SHPData["points"]) - 1]);            $this->SHPData["numpoints"]--;          }        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }    }    function getContentLength() {      switch ($this->shapeType) {        case 0:          $result = 0;        break;        case 1:          $result = 10;        break;        case 3:        case 5:          $result = 22 + 2*count($this->SHPData["parts"]);          for ($i = 0; $i < count($this->SHPData["parts"]); $i++) {            $result += 8*count($this->SHPData["parts"][$i]["points"]);          }        break;        case 8:          $result = 20 + 8*count($this->SHPData["points"]);        break;        default:          $result = false;          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      return $result;    }    function _loadDBFData() {      $this->DBFData = @dbase_get_record_with_names($this->DBFFile, $this->recordNumber);      unset($this->DBFData["deleted"]);    }    function _saveDBFData() {      unset($this->DBFData["deleted"]);      if ($this->recordNumber <= dbase_numrecords($this->DBFFile)) {        if (!dbase_replace_record($this->DBFFile, array_values($this->DBFData), $this->recordNumber)) {          $this->setError("I wasn't possible to update the information in the DBF file.");        }      } else {        if (!dbase_add_record($this->DBFFile, array_values($this->DBFData))) {          $this->setError("I wasn't possible to add the information to the DBF file.");        }      }    }    function setError($error) {      $this->lastError = $error;      return false;    }  }?>
<?php/** * Handles the visualization of GIS MULTIPOLYGON objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Multipolygon extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        $min_max = array();        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        foreach ($polygons as $polygon) {            // If the polygon doesn't have an inner ring, use polygon itself            if (strpos($polygon, "),(") === false) {                $ring = $polygon;            } else {                // Seperate outer ring and use it to determin min-max                $parts = explode("),(", $polygon);                $ring = $parts[0];            }            $min_max = $this->setMinMax($ring, $min_max);        }        return $min_max;    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $fill_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $first_poly = true;        foreach ($polygons as $polygon) {            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $points_arr = $this->extractPoints($polygon, $scale_data, true);            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $outer = $parts[0];                $inner = array_slice($parts, 1);                $points_arr = $this->extractPoints($outer, $scale_data, true);                foreach ($inner as $inner_poly) {                    $points_arr = array_merge(                        $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                    );                }            }            // draw polygon            imagefilledpolygon($image, $points_arr, sizeof($points_arr) / 2, $color);            // mark label point if applicable            if (isset($label) && trim($label) != '' && $first_poly) {                $label_point = array($points_arr[2], $points_arr[3]);            }            $first_poly = false;        }        // print label if applicable        if (isset($label_point)) {            imagestring($image, 1, $points_arr[2], $points_arr[3], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $fill_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = array($red, $green, $blue);        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $first_poly = true;        foreach ($polygons as $polygon) {            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $points_arr = $this->extractPoints($polygon, $scale_data, true);            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $outer = $parts[0];                $inner = array_slice($parts, 1);                $points_arr = $this->extractPoints($outer, $scale_data, true);                foreach ($inner as $inner_poly) {                    $points_arr = array_merge(                        $points_arr,                        $this->extractPoints($inner_poly, $scale_data, true)                    );                }            }            // draw polygon            $pdf->Polygon($points_arr, 'F*', array(), $color, true);            // mark label point if applicable            if (isset($label) && trim($label) != '' && $first_poly) {                $label_point = array($points_arr[2], $points_arr[3]);            }            $first_poly = false;        }        // print label if applicable        if (isset($label_point)) {            $pdf->SetXY($label_point[0], $label_point[1]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $fill_color, $scale_data)    {        $polygon_options = array(            'name'        => $label,            'class'       => 'multipolygon vector',            'stroke'      => 'black',            'stroke-width'=> 0.5,            'fill'        => $fill_color,            'fill-rule'   => 'evenodd',            'fill-opacity'=> 0.8,        );        $row = '';        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        foreach ($polygons as $polygon) {            $row .= '<path d="';            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $row .= $this->_drawPath($polygon, $scale_data);            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $outer = $parts[0];                $inner = array_slice($parts, 1);                $row .= $this->_drawPath($outer, $scale_data);                foreach ($inner as $inner_poly) {                    $row .= $this->_drawPath($inner_poly, $scale_data);                }            }            $polygon_options['id'] = $label . rand();            $row .= '"';            foreach ($polygon_options as $option => $val) {                $row .= ' ' . $option . '="' . trim($val) . '"';            }            $row .= '/>';        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $fill_color, $scale_data)    {        $style_options = array(            'strokeColor' => '#000000',            'strokeWidth' => 0.5,            'fillColor'   => $fill_color,            'fillOpacity' => 0.8,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $row = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $row .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector('            . 'new OpenLayers.Geometry.MultiPolygon(new Array(';        foreach ($polygons as $polygon) {            $row .= $this->addPointsForOpenLayersPolygon($polygon, $srid);        }        $row = substr($row, 0, strlen($row) - 2);        $row .= ')), null, ' . json_encode($style_options) . '));';        return $row;    }    /**     * Draws a ring of the polygon using SVG path element.     *     * @param string $polygon    The ring     * @param array  $scale_data Array containing data related to scaling     *     * @return the code to draw the ring     */    private function _drawPath($polygon, $scale_data)    {        $points_arr = $this->extractPoints($polygon, $scale_data);        $row = ' M ' . $points_arr[0][0] . ', ' . $points_arr[0][1];        $other_points = array_slice($points_arr, 1, count($points_arr) - 2);        foreach ($other_points as $point) {            $row .= ' L ' . $point[0] . ', ' . $point[1];        }        $row .= ' Z ';        return $row;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_polygons = isset($gis_data[$index]['MULTIPOLYGON']['no_of_polygons'])            ? $gis_data[$index]['MULTIPOLYGON']['no_of_polygons'] : 1;        if ($no_of_polygons < 1) {            $no_of_polygons = 1;        }        $wkt = 'MULTIPOLYGON(';        for ($k = 0; $k < $no_of_polygons; $k++) {            $no_of_lines = isset($gis_data[$index]['MULTIPOLYGON'][$k]['no_of_lines'])                ? $gis_data[$index]['MULTIPOLYGON'][$k]['no_of_lines'] : 1;            if ($no_of_lines < 1) {                $no_of_lines = 1;            }            $wkt .= '(';            for ($i = 0; $i < $no_of_lines; $i++) {                $no_of_points = isset($gis_data[$index]['MULTIPOLYGON'][$k][$i]['no_of_points'])                    ? $gis_data[$index]['MULTIPOLYGON'][$k][$i]['no_of_points'] : 4;                if ($no_of_points < 4) {                    $no_of_points = 4;                }                $wkt .= '(';                for ($j = 0; $j < $no_of_points; $j++) {                    $wkt .= ((isset($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['x'])                        && trim($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['x']) != '')                        ? $gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['x'] : $empty)                        . ' ' . ((isset($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['y'])                        && trim($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['y']) != '')                        ? $gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['y'] : $empty) .',';                }                $wkt = substr($wkt, 0, strlen($wkt) - 1);                $wkt .= '),';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate the WKT for the data from ESRI shape files.     *     * @param array $row_data GIS data     *     * @return the WKT for the data from ESRI shape files     */    public function getShape($row_data)    {        // Determines whether each line ring is an inner ring or an outer ring.        // If it's an inner ring get a point on the surface which can be used to        // correctly classify inner rings to their respective outer rings.        include_once './libraries/gis/pma_gis_polygon.php';        foreach ($row_data['parts'] as $i => $ring) {            $row_data['parts'][$i]['isOuter'] = PMA_GIS_Polygon::isOuterRing($ring['points']);        }        // Find points on surface for inner rings        foreach ($row_data['parts'] as $i => $ring) {            if (! $ring['isOuter']) {                $row_data['parts'][$i]['pointOnSurface']                    = PMA_GIS_Polygon::getPointOnSurface($ring['points']);            }        }        // Classify inner rings to their respective outer rings.        foreach ($row_data['parts'] as $j => $ring1) {            if (! $ring1['isOuter']) {                foreach ($row_data['parts'] as $k => $ring2) {                    if ($ring2['isOuter']) {                        // If the pointOnSurface of the inner ring                        // is also inside the outer ring                        if (PMA_GIS_Polygon::isPointInsidePolygon(                            $ring1['pointOnSurface'], $ring2['points']                        )) {                            if (! isset($ring2['inner'])) {                                $row_data['parts'][$k]['inner'] = array();                            }                            $row_data['parts'][$k]['inner'][] = $j;                        }                    }                }            }        }        $wkt = 'MULTIPOLYGON(';        // for each polygon        foreach ($row_data['parts'] as $ring) {            if ($ring['isOuter']) {                $wkt .= '('; // start of polygon                $wkt .= '('; // start of outer ring                foreach ($ring['points'] as $point) {                    $wkt .= $point['x'] . ' ' . $point['y'] . ',';                }                $wkt = substr($wkt, 0, strlen($wkt) - 1);                $wkt .= ')'; // end of outer ring                // inner rings if any                if (isset($ring['inner'])) {                    foreach ($ring['inner'] as $j) {                        $wkt .= ',('; // start of inner ring                        foreach ($row_data['parts'][$j]['points'] as $innerPoint) {                            $wkt .= $innerPoint['x'] . ' ' . $innerPoint['y'] . ',';                        }                        $wkt = substr($wkt, 0, strlen($wkt) - 1);                        $wkt .= ')';  // end of inner ring                    }                }                $wkt .= '),'; // end of polygon            }        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')'; // end of multipolygon        return $wkt;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'MULTIPOLYGON';            $wkt = $value;        }        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($wkt, 15, (strlen($wkt) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $params[$index]['MULTIPOLYGON']['no_of_polygons'] = count($polygons);        $k = 0;        foreach ($polygons as $polygon) {            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $params[$index]['MULTIPOLYGON'][$k]['no_of_lines'] = 1;                $points_arr = $this->extractPoints($polygon, null);                $no_of_points = count($points_arr);                $params[$index]['MULTIPOLYGON'][$k][0]['no_of_points'] = $no_of_points;                for ($i = 0; $i < $no_of_points; $i++) {                    $params[$index]['MULTIPOLYGON'][$k][0][$i]['x'] = $points_arr[$i][0];                    $params[$index]['MULTIPOLYGON'][$k][0][$i]['y'] = $points_arr[$i][1];                }            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $params[$index]['MULTIPOLYGON'][$k]['no_of_lines'] = count($parts);                $j = 0;                foreach ($parts as $ring) {                    $points_arr = $this->extractPoints($ring, null);                    $no_of_points = count($points_arr);                    $params[$index]['MULTIPOLYGON'][$k][$j]['no_of_points'] = $no_of_points;                    for ($i = 0; $i < $no_of_points; $i++) {                        $params[$index]['MULTIPOLYGON'][$k][$j][$i]['x'] = $points_arr[$i][0];                        $params[$index]['MULTIPOLYGON'][$k][$j][$i]['y'] = $points_arr[$i][1];                    }                    $j++;                }            }            $k++;        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Server synchronisation functions. * * @package PhpMyAdmin *//** * Places matching tables in source and target databases in $matching_tables * array whereas $uncommon_source_tables array gets the tables present in * source database but are absent from target database.  Criterion for * matching tables is just comparing their names. * * @param array $trg_tables              array of target database table names, * @param array $src_tables              array of source database table names, * @param array &$matching_tables        empty array passed by reference to save *                                       names of matching tables, * @param array &$uncommon_source_tables empty array passed by reference to save *                                       names of tables present in source database *                                       but absent from target database */function PMA_getMatchingTables($trg_tables, $src_tables, &$matching_tables, &$uncommon_source_tables){    for ($k=0; $k< sizeof($src_tables); $k++) {        $present_in_target = false;        for ($l=0; $l < sizeof($trg_tables); $l++) {            if ($src_tables[$k] === $trg_tables[$l]) {                $present_in_target = true;                $matching_tables[] = $src_tables[$k];            }        }        if ($present_in_target === false) {            $uncommon_source_tables[] = $src_tables[$k];        }    }}/** * Places tables present in target database but are absent from source database * * @param array $trg_tables              array of target database table names, * @param array $matching_tables         matching tables array containing names *                                       of matching tables, * @param array &$uncommon_target_tables empty array passed by reference to save *                                       names of tables presnet in target database *                                       but absent from source database */function PMA_getNonMatchingTargetTables($trg_tables, $matching_tables, &$uncommon_target_tables){    for ($c=0; $c<sizeof($trg_tables); $c++) {        $match = false;        for ($d=0; $d < sizeof($matching_tables); $d++) {            if ($trg_tables[$c] === $matching_tables[$d]) {                $match=true;            }        }        if ($match === false) {            $uncommon_target_tables[] = $trg_tables[$c];        }    }}/** * Finds the difference in source and target matching tables by * first comparing source table's primary key entries with target table enteries. * It gets the field names for the matching table also for comparisons. * If the entry is found in target table also then it is checked for the remaining * field values also, in order to check whether update is required or not. * If update is required, it is placed in $update_array * Otherwise that entry is placed in the $insert_array. * * @param string  $src_db                  name of source database * @param string  $trg_db                  name of target database * @param db_link $src_link                connection established with source server * @param db_link $trg_link                connection established with target server * @param array   &$matching_table         array containing matching table names * @param array   &$matching_tables_fields A two dimensional array passed by reference to contain names of fields for each matching table * @param array   &$update_array           A three dimensional array passed by reference to *                                         contain updates required for each matching table * @param array   &$insert_array           A three dimensional array passed by reference to *                                         contain inserts required for each matching table * @param array   &$delete_array           Unused * @param array   &$fields_num             A two dimensional array passed by reference to *                                         contain number of fields for each matching table * @param int     $matching_table_index    Index of a table from $matching_table array * @param array   &$matching_tables_keys   A two dimensional array passed by reference to contain names of keys for each matching table */function PMA_dataDiffInTables($src_db, $trg_db, $src_link, $trg_link, &$matching_table, &$matching_tables_fields,    &$update_array, &$insert_array, &$delete_array, &$fields_num, $matching_table_index, &$matching_tables_keys){    if (isset($matching_table[$matching_table_index])) {        $fld = array();        $fld_results = PMA_DBI_get_columns($src_db, $matching_table[$matching_table_index], null, true, $src_link);        $is_key = array();        if (isset($fld_results)) {            foreach ($fld_results as $each_field) {                $field_name = $each_field['Field'];                if ($each_field['Key'] == 'PRI') {                    $is_key[] = $field_name;                }                $fld[] = $field_name;            }        }        $matching_tables_fields[$matching_table_index] = $fld;        $fields_num[$matching_table_index] = sizeof($fld);        $matching_tables_keys[$matching_table_index] = $is_key;        $source_result_set = PMA_get_column_values($src_db, $matching_table[$matching_table_index], $is_key, $src_link);        $source_size = sizeof($source_result_set);        $trg_fld_results = PMA_DBI_get_columns($trg_db, $matching_table[$matching_table_index], null, true, $trg_link);        $all_keys_match = true;        $trg_keys = array();        if (isset($trg_fld_results)) {            foreach ($trg_fld_results as $each_field) {                if ($each_field['Key'] == 'PRI') {                    $trg_keys[] = $each_field['Field'];                    if (! (in_array($each_field['Field'], $is_key))) {                        $all_keys_match = false;                    }                }            }        }        $update_row = 0;        $insert_row = 0;        for ($j = 0; $j < $source_size; $j++) {            $starting_index = 0;            $update_field = 0;            if (isset($source_result_set[$j]) && ($all_keys_match)) {                // Query the target server to see which rows already exist                $trg_select_query = "SELECT * FROM " . PMA_backquote($trg_db) . "."                    . PMA_backquote($matching_table[$matching_table_index]) . " WHERE ";                if (sizeof($is_key) == 1) {                    $trg_select_query .= PMA_backquote($is_key[0]). "='" . $source_result_set[$j] . "'";                } elseif (sizeof($is_key) > 1) {                    for ($k=0; $k < sizeof($is_key); $k++) {                        $trg_select_query .= PMA_backquote($is_key[$k]) . "='" . $source_result_set[$j][$is_key[$k]] . "'";                        if ($k < (sizeof($is_key)-1)) {                            $trg_select_query .= " AND ";                        }                    }                }                $target_result_set = PMA_DBI_fetch_result($trg_select_query, null, null, $trg_link);                if ($target_result_set) {                    // Fetch the row from the source server to do a comparison                    $src_select_query = "SELECT * FROM " . PMA_backquote($src_db) . "."                        . PMA_backquote($matching_table[$matching_table_index]) . " WHERE ";                    if (sizeof($is_key) == 1) {                        $src_select_query .= PMA_backquote($is_key[0]) . "='" . $source_result_set[$j] . "'";                    } elseif (sizeof($is_key) > 1) {                        for ($k=0; $k< sizeof($is_key); $k++) {                            $src_select_query .= PMA_backquote($is_key[$k]) . "='" . $source_result_set[$j][$is_key[$k]] . "'";                            if ($k < (sizeof($is_key) - 1)) {                                $src_select_query .= " AND ";                            }                        }                    }                    $src_result_set = PMA_DBI_fetch_result($src_select_query, null, null, $src_link);                    /**                    * Comparing each corresponding field of the source and target matching rows.                    * Placing the primary key, value of primary key, field to be updated, and the                    * new value of field to be updated in each row of the update array.                    */                    for ($m = 0; ($m < $fields_num[$matching_table_index]) && ($starting_index == 0) ; $m++) {                        if (isset($src_result_set[0][$fld[$m]])) {                            if (isset($target_result_set[0][$fld[$m]])) {                                if (($src_result_set[0][$fld[$m]] != $target_result_set[0][$fld[$m]]) && (! (in_array($fld[$m], $is_key)))) {                                    if (sizeof($is_key) == 1) {                                        if ($source_result_set[$j]) {                                            $update_array[$matching_table_index][$update_row][$is_key[0]] = $source_result_set[$j];                                        }                                    } elseif (sizeof($is_key) > 1) {                                        for ($n=0; $n < sizeof($is_key); $n++) {                                            if (isset($src_result_set[0][$is_key[$n]])) {                                                $update_array[$matching_table_index][$update_row][$is_key[$n]] = $src_result_set[0][$is_key[$n]];                                            }                                        }                                    }                                    $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                    $update_field++;                                    if (isset($src_result_set[0][$fld[$m]])) {                                        $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                        $update_field++;                                    }                                    $starting_index = $m;                                    $update_row++;                                }                            } else {                                if (sizeof($is_key) == 1) {                                    if ($source_result_set[$j]) {                                        $update_array[$matching_table_index][$update_row][$is_key[0]] = $source_result_set[$j];                                    }                                } elseif (sizeof($is_key) > 1) {                                    for ($n = 0; $n < sizeof($is_key); $n++) {                                        if (isset($src_result_set[0][$is_key[$n]])) {                                            $update_array[$matching_table_index][$update_row][$is_key[$n]] = $src_result_set[0][$is_key[$n]];                                        }                                    }                                }                                $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                $update_field++;                                if (isset($src_result_set[0][$fld[$m]])) {                                    $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                    $update_field++;                                }                                $starting_index = $m;                                $update_row++;                            }                        }                    }                    for ($m = $starting_index + 1; $m < $fields_num[$matching_table_index] ; $m++) {                        if (isset($src_result_set[0][$fld[$m]])) {                            if (isset($target_result_set[0][$fld[$m]])) {                                if (($src_result_set[0][$fld[$m]] != $target_result_set[0][$fld[$m]]) && (!(in_array($fld[$m], $is_key)))) {                                    $update_row--;                                    $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                    $update_field++;                                    if ($src_result_set[0][$fld[$m]]) {                                        $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                        $update_field++;                                    }                                    $update_row++;                                }                            } else {                                $update_row--;                                $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                $update_field++;                                if ($src_result_set[0][$fld[$m]]) {                                    $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                    $update_field++;                                }                                $update_row++;                            }                        }                    }                } else {                    /**                     * Placing the primary key, and the value of primary key of the row that is to be inserted in the target table                     */                    if (sizeof($is_key) == 1) {                        if (isset($source_result_set[$j])) {                            $insert_array[$matching_table_index][$insert_row][$is_key[0]] = $source_result_set[$j];                        }                    } elseif (sizeof($is_key) > 1) {                        for ($l = 0; $l < sizeof($is_key); $l++) {                            if (isset($source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]])) {                                $insert_array[$matching_table_index][$insert_row][$is_key[$l]] = $source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]];                            }                        }                    }                    $insert_row++;                }            } else {                /**                 * Placing the primary key, and the value of primary key of the row that is to be inserted in the target table                 * This condition is met when there is an additional column in the source table                 */                if (sizeof($is_key) == 1) {                    if (isset($source_result_set[$j])) {                        $insert_array[$matching_table_index][$insert_row][$is_key[0]] = $source_result_set[$j];                    }                } elseif (sizeof($is_key) > 1) {                    for ($l = 0; $l < sizeof($is_key); $l++) {                        if (isset($source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]])) {                            $insert_array[$matching_table_index][$insert_row][$is_key[$l]] = $source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]];                        }                    }                }                $insert_row++;            }        } // for loop ends    }}/** * Finds the rows which are to be deleted from target table. * * @param array   &$delete_array        array containing rows that are to be deleted * @param array   $matching_table       array containing matching table names * @param int     $matching_table_index index of a table from $matching_table array * @param array   $trg_keys             array of target table keys * @param array   $src_keys             array of source table keys * @param string  $trg_db               name of target database * @param db_link $trg_link             connection established with target server * @param string  $src_db               name of source database * @param db_link $src_link             connection established with source server */function PMA_findDeleteRowsFromTargetTables(&$delete_array, $matching_table, $matching_table_index, $trg_keys, $src_keys, $trg_db, $trg_link, $src_db, $src_link){    if (isset($trg_keys[$matching_table_index])) {        $target_key_values = PMA_get_column_values($trg_db, $matching_table[$matching_table_index], $trg_keys[$matching_table_index], $trg_link);    }    if (isset($src_keys[$matching_table_index])) {        $source_key_values = PMA_get_column_values($src_db, $matching_table[$matching_table_index], $src_keys[$matching_table_index], $src_link);    }    $all_keys_match = 1;    for ($a = 0; $a < sizeof($trg_keys[$matching_table_index]); $a++) {        if (isset($trg_keys[$matching_table_index][$a])) {            if (! (in_array($trg_keys[$matching_table_index][$a], $src_keys[$matching_table_index]))) {                $all_keys_match = 0;            }        }    }    if (! ($all_keys_match)) {        if (isset($target_key_values)) {            $delete_array[$matching_table_index] = $target_key_values;        }    }    if (isset($trg_keys[$matching_table_index])) {        if ((sizeof($trg_keys[$matching_table_index]) == 1) && $all_keys_match) {            $row = 0;            if (isset($target_key_values)) {                for ($i = 0; $i < sizeof($target_key_values); $i++) {                    if (! (in_array($target_key_values[$i], $source_key_values))) {                        $delete_array[$matching_table_index][$row] = $target_key_values[$i];                        $row++;                    }                }            }        } elseif ((sizeof($trg_keys[$matching_table_index]) > 1) && $all_keys_match) {            $row = 0;            if (isset($target_key_values)) {                for ($i = 0; $i < sizeof($target_key_values); $i++) {                    $is_present = false;                    for ($j = 0; $j < sizeof($source_key_values) && ($is_present == false) ; $j++) {                        $check = true;                        for ($k = 0; $k < sizeof($trg_keys[$matching_table_index]); $k++) {                            if ($target_key_values[$i][$trg_keys[$matching_table_index][$k]] != $source_key_values[$j][$trg_keys[$matching_table_index][$k]]) {                                $check = false;                            }                        }                        if ($check) {                            $is_present = true;                        }                    }                    if (! ($is_present)) {                        for ($l = 0; $l < sizeof($trg_keys[$matching_table_index]); $l++) {                            $delete_array[$matching_table_index][$row][$trg_keys[$matching_table_index][$l]] = $target_key_values[$i][$trg_keys[$matching_table_index][$l]];                        }                        $row++;                    }                }            }        }    }}/** * PMA_dataDiffInUncommonTables() finds the data difference in  $source_tables_uncommon * * @param array  $source_tables_uncommon table names that are in source db and not in target db * @param string $src_db                 name of source database * @param mixed  $src_link               connection established with source server * @param int    $index                  index of a table from $matching_table array * @param array  &$row_count             number of rows * * @return nothing */function PMA_dataDiffInUncommonTables($source_tables_uncommon, $src_db, $src_link, $index, &$row_count){    $query = "SELECT COUNT(*) FROM " . PMA_backquote($src_db) . "." . PMA_backquote($source_tables_uncommon[$index]);    $rows  = PMA_DBI_fetch_result($query, null, null, $src_link);    $row_count[$index] = $rows[0];}/** * PMA_updateTargetTables() sets the updated field values to target table rows using $update_array[$matching_table_index] * * @param array   $table                Matching tables' names * @param array   $update_array         A three dimensional array containing field *                                      value updates required for each matching table * @param string  $src_db               Name of source database * @param string  $trg_db               Name of target database * @param mixed   $trg_link             Connection established with target server * @param int     $matching_table_index index of matching table in matching_table_array * @param array   $matching_table_keys * @param boolean $display */function PMA_updateTargetTables($table, $update_array, $src_db, $trg_db, $trg_link, $matching_table_index, $matching_table_keys, $display){    if (isset($update_array[$matching_table_index])) {        if (sizeof($update_array[$matching_table_index])) {            for ($update_row = 0; $update_row < sizeof($update_array[$matching_table_index]); $update_row++) {                if (isset($update_array[$matching_table_index][$update_row])) {                    $update_fields_num = sizeof($update_array[$matching_table_index][$update_row])-sizeof($matching_table_keys[$matching_table_index]);                    if ($update_fields_num > 0) {                        $query = "UPDATE " . PMA_backquote($trg_db) . "." .PMA_backquote($table[$matching_table_index]) . " SET ";                        for ($update_field = 0; $update_field < $update_fields_num; $update_field = $update_field+2) {                            if (isset($update_array[$matching_table_index][$update_row][$update_field]) && isset($update_array[$matching_table_index][$update_row][$update_field+1])) {                                $query .= PMA_backquote($update_array[$matching_table_index][$update_row][$update_field]) . "='" . $update_array[$matching_table_index][$update_row][$update_field+1] . "'";                            }                            if ($update_field < ($update_fields_num - 2)) {                                $query .= ", ";                            }                        }                        $query .= " WHERE ";                        if (isset($matching_table_keys[$matching_table_index])) {                            for ($key = 0; $key < sizeof($matching_table_keys[$matching_table_index]); $key++) {                                if (isset($matching_table_keys[$matching_table_index][$key])) {                                    $query .= PMA_backquote($matching_table_keys[$matching_table_index][$key]) . "='" . $update_array[$matching_table_index][$update_row][$matching_table_keys[$matching_table_index][$key]] . "'";                                }                                if ($key < (sizeof($matching_table_keys[$matching_table_index]) - 1)) {                                    $query .= " AND ";                                }                            }                        }                        $query .= ';';                        if ($display == true) {                            echo "<p>" . $query . "</p>";                        }                        PMA_DBI_try_query($query, $trg_link, 0);                    }                }            }        }    }}/** * PMA_insertIntoTargetTable() inserts missing rows in the target table using $array_insert[$matching_table_index] * * @todo this function uses undefined variables and is possibly broken: $matching_tables, *       $matching_tables_fields, $remove_indexes_array, $matching_table_keys * * @param array  $matching_table          matching table names * @param string $src_db                  name of source database * @param string $trg_db                  name of target database * @param mixed  $src_link                connection established with source server * @param mixed  $trg_link                connection established with target server * @param array  $table_fields            field names of a table * @param array  &$array_insert * @param int    $matching_table_index    index of matching table in matching_table_array * @param array  $matching_tables_keys    field names that are keys in the matching table * @param array  $source_columns          source column information * @param array  &$add_column_array       column names that are to be added in target table * @param array  $criteria                criteria like type, null, collation, default etc * @param array  $target_tables_keys      field names that are keys in the target table * @param array  $uncommon_tables         table names that are present in source db but not in targt db * @param array  &$uncommon_tables_fields field names of the uncommon tables * @param array  $uncommon_cols           column names that are present in target table and not in source table * @param array  &$alter_str_array        column names that are to be altered * @param array  &$source_indexes         column names on which indexes are made in source table * @param array  &$target_indexes         column names on which indexes are made in target table * @param array  &$add_indexes_array      column names on which index is to be added in target table * @param array  &$alter_indexes_array    column names whose indexes are to be altered. Only index name and uniqueness of an index can be changed * @param array  &$delete_array           rows that are to be deleted * @param array  &$update_array           rows that are to be updated in target * @param bool   $display */function PMA_insertIntoTargetTable($matching_table, $src_db, $trg_db, $src_link, $trg_link, $table_fields, &$array_insert, $matching_table_index, $matching_tables_keys, $source_columns, &$add_column_array, $criteria, $target_tables_keys, $uncommon_tables, &$uncommon_tables_fields, $uncommon_cols, &$alter_str_array, &$source_indexes, &$target_indexes, &$add_indexes_array, &$alter_indexes_array, &$delete_array, &$update_array, $display){    if (isset($array_insert[$matching_table_index])) {        if (sizeof($array_insert[$matching_table_index])) {            for ($insert_row = 0; $insert_row< sizeof($array_insert[$matching_table_index]); $insert_row++) {                if (isset($array_insert[$matching_table_index][$insert_row][$matching_tables_keys[$matching_table_index][0]])) {                    $select_query = "SELECT * FROM " . PMA_backquote($src_db) . "." . PMA_backquote($matching_table[$matching_table_index]) . " WHERE ";                    for ($i = 0; $i < sizeof($matching_tables_keys[$matching_table_index]); $i++) {                        $select_query .= $matching_tables_keys[$matching_table_index][$i] . "='";                        $select_query .= $array_insert[$matching_table_index][$insert_row][$matching_tables_keys[$matching_table_index][$i]] . "'" ;                        if ($i < (sizeof($matching_tables_keys[$matching_table_index]) - 1)) {                            $select_query.= " AND ";                        }                    }                    $select_query .= "; ";                    $result = PMA_DBI_fetch_result($select_query, null, null, $src_link);                    $insert_query = "INSERT INTO " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_table[$matching_table_index]) ." (";                    for ($field_index = 0; $field_index < sizeof($table_fields[$matching_table_index]); $field_index++) {                        $insert_query .=  PMA_backquote($table_fields[$matching_table_index][$field_index]);                        $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $trg_db ."'                                         AND TABLE_NAME = '" . $matching_table[$matching_table_index]. "'AND COLUMN_NAME = '" .                                         $table_fields[$matching_table_index][$field_index] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;" ;                        $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $trg_link);                        if (sizeof($is_fk_result) > 0) {                            for ($j = 0; $j < sizeof($is_fk_result); $j++) {                                $table_index = array_keys($matching_table, $is_fk_result[$j]['REFERENCED_TABLE_NAME']);                                if (isset($alter_str_array[$table_index[0]])) {                                    PMA_alterTargetTableStructure(                                        $trg_db, $trg_link, $matching_tables, $source_columns, $alter_str_array, $matching_tables_fields,                                        $criteria, $matching_tables_keys, $target_tables_keys, $table_index[0], $display                                    );                                    unset($alter_str_array[$table_index[0]]);                                }                                if (isset($uncommon_columns[$table_index[0]])) {                                    PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables, $uncommon_columns, $table_index[0], $display);                                    unset($uncommon_columns[$table_index[0]]);                                }                                if (isset($add_column_array[$table_index[0]])) {                                    PMA_findDeleteRowsFromTargetTables(                                        $delete_array, $matching_tables, $table_index[0], $target_tables_keys,                                        $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link                                    );                                    if (isset($delete_array[$table_index[0]])) {                                        PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $table_index[0], $target_tables_keys, $delete_array, $display);                                        unset($delete_array[$table_index[0]]);                                    }                                    PMA_addColumnsInTargetTable(                                        $src_db, $trg_db, $src_link, $trg_link, $matching_tables, $source_columns, $add_column_array,                                        $matching_tables_fields, $criteria, $matching_tables_keys, $target_tables_keys, $uncommon_tables,                                        $uncommon_tables_fields, $table_index[0], $uncommon_cols, $display                                    );                                    unset($add_column_array[$table_index[0]]);                                }                                if (isset($add_indexes_array[$table_index[0]])                                    || isset($remove_indexes_array[$table_index[0]])                                    || isset($alter_indexes_array[$table_index[0]])                                ) {                                    PMA_applyIndexesDiff(                                        $trg_db, $trg_link, $matching_tables, $source_indexes, $target_indexes, $add_indexes_array,                                        $alter_indexes_array, $remove_indexes_array, $table_index[0], $display                                    );                                    unset($add_indexes_array[$table_index[0]]);                                    unset($alter_indexes_array[$table_index[0]]);                                    unset($remove_indexes_array[$table_index[0]]);                                }                                if (isset($update_array[$table_index[0]])) {                                    PMA_updateTargetTables(                                        $matching_tables, $update_array, $src_db, $trg_db, $trg_link,                                        $table_index[0], $matching_table_keys, $display                                    );                                    unset($update_array[$table_index[0]]);                                }                                if (isset($array_insert[$table_index[0]])) {                                     PMA_insertIntoTargetTable(                                         $matching_table, $src_db, $trg_db, $src_link, $trg_link, $table_fields, $array_insert, $table_index[0],                                         $matching_tables_keys, $source_columns, $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,                                         $uncommon_tables_fields, $uncommon_cols, $alter_str_array, $source_indexes, $target_indexes, $add_indexes_array,                                         $alter_indexes_array, $delete_array, $update_array, $display                                     );                                     unset($array_insert[$table_index[0]]);                                }                            }                        }                        if ($field_index < sizeof($table_fields[$matching_table_index])-1) {                            $insert_query .= ", ";                        }                    }                    $insert_query .= ") VALUES(";                    if (sizeof($table_fields[$matching_table_index]) == 1) {                         $insert_query .= "'" . PMA_sqlAddSlashes($result[0]) . "'";                    } else {                        for ($field_index = 0; $field_index < sizeof($table_fields[$matching_table_index]); $field_index++) {                            if (isset($result[0][$table_fields[$matching_table_index][$field_index]])) {                                $insert_query .= "'" . PMA_sqlAddSlashes($result[0][$table_fields[$matching_table_index][$field_index]]) . "'";                            } else {                                $insert_query .= "'NULL'";                            }                            if ($field_index < (sizeof($table_fields[$matching_table_index])) - 1) {                                    $insert_query .= " ," ;                            }                        }                    }                    $insert_query .= ");";                    if ($display == true) {                        PMA_displayQuery($insert_query);                    }                    PMA_DBI_try_query($insert_query, $trg_link, 0);                }            }        }    }}/** * PMA_createTargetTables() Create the missing table $uncommon_table in target database * * @param string $src_db                  name of source database * @param string $trg_db                  name of target database * @param mixed  $src_link                connection established with source server * @param mixed  $trg_link                connection established with target server * @param array  &$uncommon_tables        names of tables present in source but not in target * @param int    $table_index             index of table in $uncommon_tables array * @param array  &$uncommon_tables_fields field names of the uncommon table * @param bool   $display */function PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link, &$uncommon_tables, $table_index, &$uncommon_tables_fields, $display){    if (isset($uncommon_tables[$table_index])) {        $fields_result = PMA_DBI_get_columns($src_db, $uncommon_tables[$table_index], null, true, $src_link);        $fields = array();        foreach ($fields_result as $each_field) {            $field_name = $each_field['Field'];            $fields[] = $field_name;        }        $uncommon_tables_fields[$table_index] = $fields;        $Create_Query = PMA_DBI_fetch_value("SHOW CREATE TABLE " . PMA_backquote($src_db) . '.' . PMA_backquote($uncommon_tables[$table_index]), 0, 1, $src_link);        // Replace the src table name with a `dbname`.`tablename`        $Create_Table_Query = preg_replace('/' . preg_quote(PMA_backquote($uncommon_tables[$table_index]), '/') . '/',                                            PMA_backquote($trg_db) . '.' .PMA_backquote($uncommon_tables[$table_index]),                                            $Create_Query,                                            $limit = 1        );        $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $src_db . "'                        AND TABLE_NAME = '" . $uncommon_tables[$table_index] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;" ;        $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $src_link);        if (sizeof($is_fk_result) > 0) {            for ($j = 0; $j < sizeof($is_fk_result); $j++) {                if (in_array($is_fk_result[$j]['REFERENCED_TABLE_NAME'], $uncommon_tables)) {                    $table_index = array_keys($uncommon_tables, $is_fk_result[$j]['REFERENCED_TABLE_NAME']);                    PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);                    unset($uncommon_tables[$table_index[0]]);                }            }        }        $Create_Table_Query .= ';';        if ($display == true) {            echo '<p>' . $Create_Table_Query . '</p>';        }        PMA_DBI_try_query($Create_Table_Query, $trg_link, 0);    }}/** * PMA_populateTargetTables() inserts data into uncommon tables after they have been created * * @param string $src_db                 name of source database * @param string $trg_db                 name of target database * @param mixed  $src_link               connection established with source server * @param mixed  $trg_link               connection established with target server * @param array  $uncommon_tables        uncommon table names (table names that are present in source but not in target db) * @param int    $table_index            index of table in matching_table_array * @param array  $uncommon_tables_fields field names of the uncommon table * @param bool   $display * * @todo This turns NULL values into '' (empty string) */function PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link, $uncommon_tables, $table_index, $uncommon_tables_fields, $display){    $display = false; // todo: maybe display some of the queries if they are not too numerous    $unbuffered_result = PMA_DBI_try_query('SELECT * FROM ' . PMA_backquote($src_db) . '.' . PMA_backquote($uncommon_tables[$table_index]), $src_link, PMA_DBI_QUERY_UNBUFFERED);    if (false !== $unbuffered_result) {        $insert_query = 'INSERT INTO ' . PMA_backquote($trg_db) . '.' .PMA_backquote($uncommon_tables[$table_index]) . ' VALUES';        while ($one_row = PMA_DBI_fetch_row($unbuffered_result)) {            $insert_query .= '(';            $key_of_last_value = count($one_row) - 1;            foreach ($one_row as $key => $value) {                $insert_query .= "'" . PMA_sqlAddSlashes($value) . "'";                if ($key < $key_of_last_value) {                    $insert_query .= ",";                }            }            $insert_query .= '),';        }        $insert_query = substr($insert_query, 0, -1);        $insert_query .= ';';        if ($display == true) {            PMA_displayQuery($insert_query);        }        PMA_DBI_try_query($insert_query, $trg_link, 0);    }}/** * PMA_deleteFromTargetTable() delete rows from target table * * @param string $trg_db             name of target database * @param mixed  $trg_link           connection established with target server * @param array  $matching_tables    matching table names * @param int    $table_index        index of table in matching_table_array * @param array  $target_tables_keys primary key names of the target tables * @param array  $delete_array       key values of rows that are to be deleted * @param bool   $display */function PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $table_index, $target_tables_keys, $delete_array, $display){    for ($i = 0; $i < sizeof($delete_array[$table_index]); $i++) {        if (isset($target_tables_keys[$table_index])) {            $delete_query = 'DELETE FROM ' . PMA_backquote($trg_db) . '.' .PMA_backquote($matching_tables[$table_index]) . ' WHERE ';            for ($y = 0; $y < sizeof($target_tables_keys[$table_index]); $y++) {                $delete_query .= PMA_backquote($target_tables_keys[$table_index][$y]) . " = '";                if (sizeof($target_tables_keys[$table_index]) == 1) {                    $delete_query .= $delete_array[$table_index][$i] . "'";                } elseif (sizeof($target_tables_keys[$table_index]) > 1) {                    $delete_query .= $delete_array[$table_index][$i][$target_tables_keys[$table_index][$y]] . "'";                }                if ($y < (sizeof($target_tables_keys[$table_index]) - 1)) {                    $delete_query .= ' AND ';                }                $pk_query = "SELECT * FROM information_schema.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = '" . $trg_db . "'                            AND REFERENCED_TABLE_NAME = '" . $matching_tables[$table_index]."' AND REFERENCED_COLUMN_NAME = '"                           . $target_tables_keys[$table_index][$y] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";                $pk_query_result = PMA_DBI_fetch_result($pk_query, null, null, $trg_link);                $result_size = sizeof($pk_query_result);                if ($result_size > 0) {                    for ($b = 0; $b < $result_size; $b++) {                        $drop_pk_query = "DELETE FROM " . PMA_backquote($pk_query_result[$b]['TABLE_SCHEMA']) . "." . PMA_backquote($pk_query_result[$b]['TABLE_NAME']) . " WHERE " . PMA_backquote($pk_query_result[$b]['COLUMN_NAME']) . " = " . $target_tables_keys[$table_index][$y] . ";";                        PMA_DBI_try_query($drop_pk_query, $trg_link, 0);                    }                }            }        }        if ($display == true) {            echo '<p>' . $delete_query . '</p>';        }        PMA_DBI_try_query($delete_query, $trg_link, 0);    }}/** * PMA_structureDiffInTables() Gets all the column information for source and target table. * Compare columns on their names. * If column exists in target then compare Type, Null, Collation, Key, Default and Comment for that column. * If column does not exist in target table then it is placed in  $add_column_array. * If column exists in target table but criteria is different then it is palced in $alter_str_array. * If column does not exist in source table but is present in target table then it is placed in  $uncommon_columns. * Keys for all the source tables that have a corresponding target table are placed  in $matching_tables_keys. * Keys for all the target tables that have a corresponding source table are placed  in $target_tables_keys. * * @param string $src_db                 name of source database * @param string $trg_db                 name of target database * @param mixed  $src_link               connection established with source server * @param mixed  $trg_link               connection established with target server * @param array  $matching_tables        names of matching tables * @param array  &$source_columns        columns information of the source tables * @param array  &$target_columns        columns information of the target tables * @param array  &$alter_str_array       three dimensional associative array first index being the matching table index, second index being column name for which target *                                       column have some criteria different and third index containing the criteria which is different. * @param array  &$add_column_array      two dimensional associative array, first index of the array contain the matching table number and second index contain the *                                       column name which is to be added in the target table * @param array  &$uncommon_columns      columns that are present in the target table but not in the source table * @param array  $criteria               criteria which are to be checked for field that is present in source table and target table * @param array  &$target_tables_keys    field names which is key in the target table * @param int    $matching_table_index   number of the matching table */function PMA_structureDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, &$source_columns, &$target_columns, &$alter_str_array, &$add_column_array, &$uncommon_columns, $criteria, &$target_tables_keys, $matching_table_index){    //Gets column information for source and target table    $source_columns[$matching_table_index] = PMA_DBI_get_columns_full($src_db, $matching_tables[$matching_table_index], null, $src_link);    $target_columns[$matching_table_index] = PMA_DBI_get_columns_full($trg_db, $matching_tables[$matching_table_index], null, $trg_link);    foreach ($source_columns[$matching_table_index] as $column_name => $each_column) {        if (isset($target_columns[$matching_table_index][$column_name]['Field'])) {            //If column exists in target table then matches criteria like type, null, collation, key, default, comment of the column            for ($i = 0; $i < sizeof($criteria); $i++) {                if ($source_columns[$matching_table_index][$column_name][$criteria[$i]] != $target_columns[$matching_table_index][$column_name][$criteria[$i]]) {                    if (($criteria[$i] == 'Default') && ($source_columns[$matching_table_index][$column_name][$criteria[$i]] == '' )) {                        $alter_str_array[$matching_table_index][$column_name][$criteria[$i]] = 'None';                    } else {                        if (! (($criteria[$i] == 'Key') && (($source_columns[$matching_table_index][$column_name][$criteria[$i]] == 'MUL')                            || ($target_columns[$matching_table_index][$column_name][$criteria[$i]] == 'MUL')                            || ($source_columns[$matching_table_index][$column_name][$criteria[$i]] == 'UNI')                            || ($target_columns[$matching_table_index][$column_name][$criteria[$i]] == 'UNI')))                        ) {                            $alter_str_array[$matching_table_index][$column_name][$criteria[$i]] = $source_columns[$matching_table_index][$column_name][$criteria[$i]];                        }                    }                }            }        } else {            $add_column_array[$matching_table_index][$column_name]= $column_name;        }    }    //Finds column names that are present in target table but not in source table    foreach ($target_columns[$matching_table_index] as $fld_name => $each_column) {        if (! (isset($source_columns[$matching_table_index][$fld_name]['Field']))) {            $fields_uncommon[] = $fld_name;        }        if ($target_columns[$matching_table_index][$fld_name]['Key'] == 'PRI') {            $keys[] = $fld_name;        }    }    if (isset($fields_uncommon)) {        $uncommon_columns[$matching_table_index] = $fields_uncommon;    }    if (isset($keys)) {        $target_tables_keys[$matching_table_index] = $keys;    }}/** * PMA_addColumnsInTargetTable() adds column that are present in source table but not in target table * * @param string $src_db                  name of source database * @param string $trg_db                  name of target database * @param mixed  $src_link                connection established with source server * @param mixed  $trg_link                connection established with target server * @param array  $matching_tables         names of matching tables * @param array  $source_columns          columns information of the source tables * @param array  &$add_column_array       the names of the column(field) that are to be added in the target * @param array  $matching_tables_fields * @param array  $criteria                criteria * @param array  $matching_tables_keys    field names which is key in the source table * @param array  $target_tables_keys      field names which is key in the target table * @param array  $uncommon_tables         table names that are present in source db and not in target db * @param array  &$uncommon_tables_fields names of the fields of the uncommon tables * @param int    $table_counter           number of the matching table * @param array  $uncommon_cols * @param bool   $display */function PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link, $matching_tables, $source_columns, &$add_column_array, $matching_tables_fields,         $criteria, $matching_tables_keys, $target_tables_keys, $uncommon_tables, &$uncommon_tables_fields, $table_counter, $uncommon_cols, $display){    for ($i = 0; $i < sizeof($matching_tables_fields[$table_counter]); $i++) {        if (isset($add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]])) {            $query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$table_counter]). " ADD COLUMN " .            PMA_backquote($add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]]) . " " . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Type'];            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Null'] == 'NO') {                $query .= ' Not Null ';            } elseif ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Null'] == 'YES') {                $query .= ' Null ';            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Collation'] != '') {                $query .= ' COLLATE ' . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Collation'];            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Default'] != '') {                $query .= " DEFAULT " . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Default'];            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Comment'] != '') {                $query .= " COMMENT " . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Comment'];            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Key'] == 'PRI' ) {                $trg_key_size = sizeof($target_tables_keys[$table_counter]);                if ($trg_key_size) {                    $check = true;                    for ($a = 0; ($a < $trg_key_size) && ($check); $a++) {                        if (! (in_array($target_tables_keys[$table_counter], $uncommon_cols))) {                             $check = false;                        }                    }                    if (! $check) {                        $query .= " ,DROP PRIMARY KEY " ;                    }                }                $query .= " , ADD PRIMARY KEY (";                for ($t = 0; $t < sizeof($matching_tables_keys[$table_counter]); $t++) {                    $query .= PMA_backquote($matching_tables_keys[$table_counter][$t]);                    if ($t < (sizeof($matching_tables_keys[$table_counter]) - 1)) {                        $query .= " , " ;                    }                }                $query .= ")";            }            $query .= ";";            if ($display == true) {                echo '<p>' . $query . '</p>';            }            PMA_DBI_try_query($query, $trg_link, 0);            //Checks if column to be added is a foreign key or not            $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $trg_db . "' AND TABLE_NAME = '"            . $matching_tables[$table_counter] . "' AND COLUMN_NAME ='" . $add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]] .            "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";            $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $src_link);            //If column is a foreign key then it is checked that referenced table exist in target db. If referenced table does not exist in target db then            //it is created first.            if (isset($is_fk_result)) {                if (in_array($is_fk_result[0]['REFERENCED_TABLE_NAME'], $uncommon_tables)) {                    $table_index = array_keys($uncommon_tables, $is_fk_result[0]['REFERENCED_TABLE_NAME']);                    PMA_checkForeignKeys($src_db, $src_link, $trg_db, $trg_link, $is_fk_result[0]['REFERENCED_TABLE_NAME'], $uncommon_tables, $uncommon_tables_fields, $display);                    PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);                    unset($uncommon_tables[$table_index[0]]);                }                $fk_query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$table_counter]) .                            "ADD CONSTRAINT FOREIGN KEY " . PMA_backquote($add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]]) . "                            (" . $add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]] . ") REFERENCES " . PMA_backquote($trg_db) .                             '.' . PMA_backquote($is_fk_result[0]['REFERENCED_TABLE_NAME']) . " (" . $is_fk_result[0]['REFERENCED_COLUMN_NAME'] . ");";                PMA_DBI_try_query($fk_query, $trg_link, null);            }        }    }}/** * PMA_checkForeignKeys() checks if the referenced table have foreign keys. * uses    PMA_createTargetTables() * * @param string $src_db                  name of source database * @param mixed  $src_link                connection established with source server * @param string $trg_db                  name of target database * @param mixed  $trg_link                connection established with target server * @param string $referenced_table        table whose column is a foreign key in another table * @param array  &$uncommon_tables        names that are uncommon * @param array  &$uncommon_tables_fields field names of the uncommon table * @param bool   $display */function PMA_checkForeignKeys($src_db, $src_link, $trg_db, $trg_link, $referenced_table, &$uncommon_tables, &$uncommon_tables_fields, $display){    $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $src_db . "'                    AND TABLE_NAME = '" . $referenced_table . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";    $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $src_link);    if (sizeof($is_fk_result) > 0) {        for ($j = 0; $j < sizeof($is_fk_result); $j++) {            if (in_array($is_fk_result[$j]['REFERENCED_TABLE_NAME'], $uncommon_tables)) {                $table_index = array_keys($uncommon_tables, $is_fk_result[$j]['REFERENCED_TABLE_NAME']);                PMA_checkForeignKeys(                    $src_db, $src_link, $trg_db, $trg_link, $is_fk_result[$j]['REFERENCED_TABLE_NAME'],                    $uncommon_tables, $uncommon_tables_fields, $display                );                PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);                unset($uncommon_tables[$table_index[0]]);            }        }    }}/** * PMA_alterTargetTableStructure() alters structure of the target table using $alter_str_array * * @param string $trg_db                 name of target database * @param mixed  $trg_link               connection established with target server * @param array  $matching_tables        names of matching tables * @param array  &$source_columns        columns information of the source table * @param array  &$alter_str_array       column name and criteria which is to be altered for the targert table * @param array  $matching_tables_fields name of the fields for the matching table * @param array  $criteria               criteria * @param array  &$matching_tables_keys  field names which is key in the source table * @param array  &$target_tables_keys    field names which is key in the target table * @param int    $matching_table_index   number of the matching table * @param bool   $display */function PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables, &$source_columns, &$alter_str_array, $matching_tables_fields, $criteria, &$matching_tables_keys, &$target_tables_keys, $matching_table_index, $display){    $check = true;    $sql_query = '';    $found = false;    //Checks if the criteria to be altered is primary key    for ($v = 0; $v < sizeof($matching_tables_fields[$matching_table_index]); $v++) {        if (isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$v]]['Key'])) {            if ($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$v]]['Key'] == 'PRI' ) {                $check = false;            }        }    }    $pri_query = null;    if (! $check) {        $pri_query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$matching_table_index]);        if (sizeof($target_tables_keys[$matching_table_index]) > 0) {            $pri_query .= "  DROP PRIMARY KEY ," ;        }        $pri_query .= "  ADD PRIMARY KEY (";        for ($z = 0; $z < sizeof($matching_tables_keys[$matching_table_index]); $z++) {            $pri_query .= PMA_backquote($matching_tables_keys[$matching_table_index][$z]);            if ($z < (sizeof($matching_tables_keys[$matching_table_index]) - 1)) {                $pri_query .= " , " ;            }        }        $pri_query .= ");";    }    if (isset($pri_query)) {        if ($display == true) {            echo '<p>' . $pri_query . '</p>';        }        PMA_DBI_try_query($pri_query, $trg_link, 0);    }    for ($t = 0; $t < sizeof($matching_tables_fields[$matching_table_index]); $t++) {        if ((isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]])) && (sizeof($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]) > 0)) {            $sql_query = 'ALTER TABLE ' . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$matching_table_index]) . ' MODIFY ' .            PMA_backquote($matching_tables_fields[$matching_table_index][$t]) . ' ' . $source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]['Type'];            $found = false;            for ($i = 0; $i < sizeof($criteria); $i++) {                if (isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]]) && $criteria[$i] != 'Key') {                    $found = true;                    if (($criteria[$i] == 'Type') && (! isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i+1]]))) {                        if ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i + 1]] == 'NO') {                            $sql_query .= " Not Null" ;                        } elseif ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i + 1]] == 'YES') {                            $sql_query .= " Null" ;                        }                    }                    if (($criteria[$i] == 'Null') && ( $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] == 'NO')) {                        $sql_query .= " Not Null "  ;                    } elseif (($criteria[$i] == 'Null') && ($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] == 'YES')) {                        $sql_query .= " Null "  ;                    }                    if ($criteria[$i] == 'Collation') {                        if ( !(isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                        $sql_query .=  " COLLATE " . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] ;                    }                    if (($criteria[$i] == 'Default') && ($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] == 'None')) {                        if ( !(isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                    } elseif ($criteria[$i] == 'Default') {                        if (! (isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                        if (is_string($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]])) {                            if ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]['Type'] != 'timestamp') {                                $sql_query .=  " DEFAULT '" . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] . "'";                            } elseif ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]['Type'] == 'timestamp') {                                $sql_query .=  " DEFAULT " . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]];                            }                        } elseif (is_numeric($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]])) {                            $sql_query .=  " DEFAULT " . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]];                        }                    }                    if ($criteria[$i] == 'Comment') {                        if ( !(isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                        $sql_query .=  " COMMENT '" . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] . "'" ;                    }                }            }        }        $sql_query .= ";";        if ($found) {            if ($display == true) {                echo '<p>' . $sql_query . '</p>';            }            PMA_DBI_try_query($sql_query, $trg_link, 0);        }    }    $check = false;    $query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$matching_table_index]);    for ($p = 0; $p < sizeof($matching_tables_keys[$matching_table_index]); $p++) {        if ((isset($alter_str_array[$matching_table_index][$matching_tables_keys[$matching_table_index][$p]]['Key']))) {            $check = true;            $query .= ' MODIFY ' . PMA_backquote($matching_tables_keys[$matching_table_index][$p]) . ' '            . $source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$p]]['Type'] . ' Not Null ';            if ($p < (sizeof($matching_tables_keys[$matching_table_index]) - 1)) {                $query .= ', ';            }        }    }    $query .= ';';    if ($check) {        if ($display == true) {            echo '<p>' . $query . '</p>';        }        PMA_DBI_try_query($query, $trg_link, 0);    }}/** * PMA_removeColumnsFromTargetTable() removes the columns which are present in target table but not in source table. * * @param string $trg_db           name of target database * @param mixed  $trg_link         connection established with target server * @param array  $matching_tables  names of matching tables * @param array  $uncommon_columns array containing the names of the column which are to be dropped from the target table * @param int    $table_counter    index of the matching table as in $matchiing_tables array * @param bool   $display */function PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables, $uncommon_columns, $table_counter, $display){    if (isset($uncommon_columns[$table_counter])) {        $drop_query = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]);        for ($a = 0; $a < sizeof($uncommon_columns[$table_counter]); $a++) {            //Checks if column to be removed is a foreign key in any table            $pk_query = "SELECT * FROM information_schema.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = '" . $trg_db . "'                         AND REFERENCED_TABLE_NAME = '" . $matching_tables[$table_counter]."' AND REFERENCED_COLUMN_NAME = '"                         . $uncommon_columns[$table_counter][$a] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";            $pk_query_result = PMA_DBI_fetch_result($pk_query, null, null, $trg_link);            $result_size = sizeof($pk_query_result);            if ($result_size > 0) {                for ($b = 0; $b < $result_size; $b++) {                    $drop_pk_query = "ALTER TABLE " . PMA_backquote($pk_query_result[$b]['TABLE_SCHEMA']) . "." . PMA_backquote($pk_query_result[$b]['TABLE_NAME']) . "                                      DROP FOREIGN KEY " . PMA_backquote($pk_query_result[$b]['CONSTRAINT_NAME']) . ", DROP COLUMN " . PMA_backquote($pk_query_result[$b]['COLUMN_NAME']) . ";";                    PMA_DBI_try_query($drop_pk_query, $trg_link, 0);                }            }            $query = "SELECT * FROM information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $trg_db . "' AND TABLE_NAME = '"                     . $matching_tables[$table_counter]. "' AND COLUMN_NAME = '" . $uncommon_columns[$table_counter][$a] . "'                      AND TABLE_NAME <> REFERENCED_TABLE_NAME;";            $result = PMA_DBI_fetch_result($query, null, null, $trg_link);            if (sizeof($result) > 0) {                $drop_query .= " DROP FOREIGN KEY " . PMA_backquote($result[0]['CONSTRAINT_NAME']) . ",";            }            $drop_query .=  " DROP COLUMN " . PMA_backquote($uncommon_columns[$table_counter][$a]);            if ($a < (sizeof($uncommon_columns[$table_counter]) - 1)) {                $drop_query .= " , " ;            }        }        $drop_query .= ";" ;        if ($display == true) {            echo '<p>' . $drop_query . '</p>';        }        PMA_DBI_try_query($drop_query, $trg_link, 0);    }}/** * PMA_indexesDiffInTables() compares the source table indexes with target table indexes and keep the indexes to be added in target table in $add_indexes_array * indexes to be altered in $alter_indexes_array and indexes to be removed from target table in $remove_indexes_array. * Only keyname and uniqueness characteristic of the indexes are altered. * * @param string $src_db                name of source database * @param string $trg_db                name of target database * @param mixed  $src_link              connection established with source server * @param mixed  $trg_link              connection established with target server * @param array  $matching_tables       matching tables name * @param array  &$source_indexes       indexes of the source table * @param array  &$target_indexes       indexes of the target table * @param array  &$add_indexes_array    name of the column on which the index is to be added in the target table * @param array  &$alter_indexes_array  key name which needs to be altered * @param array  &$remove_indexes_array key name of the index which is to be removed from the target table * @param int    $table_counter         number of the matching table */function PMA_indexesDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, &$source_indexes, &$target_indexes, &$add_indexes_array, &$alter_indexes_array, &$remove_indexes_array, $table_counter){    //Gets indexes information for source and target table    $source_indexes[$table_counter] = PMA_DBI_get_table_indexes($src_db, $matching_tables[$table_counter], $src_link);    $target_indexes[$table_counter] = PMA_DBI_get_table_indexes($trg_db, $matching_tables[$table_counter], $trg_link);    for ($a = 0; $a < sizeof($source_indexes[$table_counter]); $a++) {        $found = false;        $z = 0;        //Compares key name and non_unique characteristic of source indexes with target indexes        /*         * @todo compare the length of each sub part         */        while (($z <= sizeof($target_indexes[$table_counter])) && ($found == false)) {            if (isset($source_indexes[$table_counter][$a]) && isset($target_indexes[$table_counter][$z]) && $source_indexes[$table_counter][$a]['Key_name'] == $target_indexes[$table_counter][$z]['Key_name']) {                $found = true;                if (($source_indexes[$table_counter][$a]['Column_name'] != $target_indexes[$table_counter][$z]['Column_name']) || ($source_indexes[$table_counter][$a]['Non_unique'] != $target_indexes[$table_counter][$z]['Non_unique'])) {                    if (! (($source_indexes[$table_counter][$a]['Key_name'] == "PRIMARY") || ($target_indexes[$table_counter][$z]['Key_name'] == 'PRIMARY'))) {                        $alter_indexes_array[$table_counter][] = $source_indexes[$table_counter][$a]['Key_name'];                    }                }            }            $z++;        }        if ($found === false) {            if (! ($source_indexes[$table_counter][$a]['Key_name'] == 'PRIMARY')) {                $add_indexes_array [$table_counter][] = $source_indexes[$table_counter][$a]['Column_name'];            }        }    }    //Finds indexes that exist on target table but not on source table    for ($b = 0; $b < sizeof($target_indexes[$table_counter]); $b++) {        $found = false;        $c = 0;        while (($c <= sizeof($source_indexes[$table_counter])) && ($found == false)) {            if ($target_indexes[$table_counter][$b]['Column_name'] == $source_indexes[$table_counter][$c]['Column_name']) {                $found = true;            }            $c++;        }        if ($found === false) {            $remove_indexes_array[$table_counter][] = $target_indexes[$table_counter][$b]['Key_name'];        }    }}/** * PMA_applyIndexesDiff() create indexes, alters indexes and remove indexes. * * @param string $trg_db               name of target database * @param mixed  $trg_link             connection established with target server * @param array  $matching_tables      matching tables name * @param array  $source_indexes       indexes of the source table * @param array  $target_indexes       indexes of the target table * @param array  $add_indexes_array    column names on which indexes are to be created in target table * @param array  $alter_indexes_array  column names for which indexes are to be altered * @param array  $remove_indexes_array key name of the indexes which are to be removed from the target table * @param int    $table_counter        number of the matching table * @param $display */function PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables, $source_indexes, $target_indexes, $add_indexes_array, $alter_indexes_array,          $remove_indexes_array, $table_counter, $display){    //Adds indexes on target table    if (isset($add_indexes_array[$table_counter])) {        $sql = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]) . " ADD" ;        for ($a = 0; $a < sizeof($source_indexes[$table_counter]); $a++) {            if (isset($add_indexes_array[$table_counter][$a])) {                for ($b = 0; $b < sizeof($source_indexes[$table_counter]); $b++) {                    if ($source_indexes[$table_counter][$b]['Column_name'] == $add_indexes_array[$table_counter][$a]) {                        if ($source_indexes[$table_counter][$b]['Non_unique'] == '0') {                            $sql .= " UNIQUE ";                        }                        $sql .= " INDEX " . PMA_backquote($source_indexes[$table_counter][$b]['Key_name']) . " (" . $add_indexes_array[$table_counter][$a] . " );";                        if ($display == true) {                            echo '<p>' . $sql . '</p>';                        }                        PMA_DBI_try_query($sql, $trg_link, 0);                    }                }            }        }    }    //Alter indexes of target table    if (isset($alter_indexes_array[$table_counter])) {        $query = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]);        for ($a = 0; $a < sizeof($alter_indexes_array[$table_counter]); $a++) {            if (isset($alter_indexes_array[$table_counter][$a])) {                $query .= ' DROP INDEX ' . PMA_backquote($alter_indexes_array[$table_counter][$a]) . " , ADD ";                $got_first_index_column = false;                for ($z = 0; $z < sizeof($source_indexes[$table_counter]); $z++) {                    if ($source_indexes[$table_counter][$z]['Key_name'] == $alter_indexes_array[$table_counter][$a]) {                        if (! $got_first_index_column) {                            if ($source_indexes[$table_counter][$z]['Non_unique'] == '0') {                                $query .= " UNIQUE ";                            }                            $query .= " INDEX " . PMA_backquote($source_indexes[$table_counter][$z]['Key_name']) . " (" . PMA_backquote($source_indexes[$table_counter][$z]['Column_name']);                            $got_first_index_column = true;                        } else {                            // another column for this index                            $query .= ', ' . PMA_backquote($source_indexes[$table_counter][$z]['Column_name']);                        }                    }                }                $query .= " )";            }        }        $query .= ';';        if ($display == true) {            echo '<p>' . $query . '</p>';        }        PMA_DBI_try_query($query, $trg_link, 0);    }    //Removes indexes from target table    if (isset($remove_indexes_array[$table_counter])) {        $drop_index_query = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]);        for ($a = 0; $a < sizeof($target_indexes[$table_counter]); $a++) {            if (isset($remove_indexes_array[$table_counter][$a])) {                $drop_index_query .= " DROP INDEX " . PMA_backquote($remove_indexes_array[$table_counter][$a]);            }            if ($a < (sizeof($remove_indexes_array[$table_counter]) - 1)) {                $drop_index_query .= " , " ;            }        }        $drop_index_query .= " ; " ;        if ($display == true) {            echo '<p>' . $drop_index_query . '</p>';        }        PMA_DBI_try_query($drop_index_query, $trg_link, 0);    }}/** * PMA_displayQuery() displays a query, taking the maximum display size * into account * * @param string $query the query to display * * @return nothing */function PMA_displayQuery($query){    if (strlen($query) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {        $query = substr($query, 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';    }    echo '<p>' . htmlspecialchars($query) . '</p>';}/** * PMA_syncDisplayHeaderCompare() shows the header for source database * * @param string $src_db source db name * @param string $trg_db target db name * * @return nothing */function PMA_syncDisplayHeaderCompare($src_db, $trg_db){    echo '<fieldset style="padding:0"><div style="padding:1.5em; overflow:auto; height:220px">';    echo '<table class="data">';    echo '<tr>';    echo '<th>' . __('Source database') . ':  ' . htmlspecialchars($src_db) . '<br />(';    if ('cur' == $_SESSION['src_type']) {        echo __('Current server');    } else {        echo __('Remote server') . ' ' . htmlspecialchars($_SESSION['src_server']['host']);    }    echo ')</th>';    echo '<th>' . __('Difference') . '</th>';    echo '<th>' . __('Target database') . ':  '. htmlspecialchars($trg_db) . '<br />(';    if ('cur' == $_SESSION['trg_type']) {        echo __('Current server');    } else {        echo __('Remote server') . ' ' . htmlspecialchars($_SESSION['trg_server']['host']);    }    echo ')</th>';    echo '</tr>';}/** * Prints table row * * $rows contains following keys: * - src_table_name - source server table name * - dst_table_name - target server table name * - btn_type - 'M' or 'U' * - btn_structure - null or arguments for showDetails in server_synchronize.js (without img_obj and table_name): *                       i, update_size, insert_size, remove_size, insert_index, remove_index * * @param array $rows */function PMA_syncDisplayDataCompare($rows){    global $pmaThemeImage;    $odd_row = true;    foreach ($rows as $row) {        echo '<tr class=" ' . ($odd_row ? 'odd' : 'even') . '">';        echo '<td>' . htmlspecialchars($row['src_table_name']) . '</td><td style="text-align:center">';        if (isset($row['btn_structure']) && $row['btn_structure']) {            // parameters: i, update_size, insert_size, remove_size, insert_index, remove_index            $p = $row['btn_structure'];            $p[0] = $row['btn_type'] . 'S' . $p[0];            echo '<img class="icon struct_img" src="' . $pmaThemeImage . 'new_struct.png" width="16" height="16"                 alt="Structure" title="' . __('Click to select') . '" style="cursor:pointer" onclick="showDetails('                 . "'" . implode($p, "','") . "'"                 . ', this, ' . "'" . PMA_escapeJsString(htmlspecialchars($row['src_table_name'])) . "'" . ')" /> ';        }        if (isset($row['btn_data']) && $row['btn_data']) {            // parameters: i, update_size, insert_size, remove_size, insert_index, remove_index            $p = $row['btn_data'];            $p[0] = $row['btn_type'] . 'D' . $p[0];            echo '<img class="icon data_img" src="' . $pmaThemeImage . 'new_data.png" width="16" height="16"                alt="Data" title="' . __('Click to select') . '" style="cursor:pointer" onclick="showDetails('                . "'" . implode($p, "','") . "'"                . ', this, ' . "'" . PMA_escapeJsString(htmlspecialchars($row['src_table_name'])) . "'" . ')" />';        }        echo '</td><td>' . htmlspecialchars($row['dst_table_name']) . '</td></tr>';        $odd_row = !$odd_row;    }}/** * array PMA_get_column_values (string $database, string $table, string $column , mysql db link $link = null) * * @param string $database name of database * @param string $table    name of table to retrieve columns from * @param string $column   name of the column to retrieve data from * @param mixed  $link     mysql link resource * * @return array $field_values */function PMA_get_column_values($database, $table, $column, $link = null){    $query = 'SELECT ';    for ($i=0; $i< sizeof($column); $i++) {        $query.= PMA_backquote($column[$i]);        if ($i < (sizeof($column)-1)) {            $query.= ', ';        }    }    $query.= ' FROM ' . PMA_backquote($database) . '.' . PMA_backquote($table);    $field_values = PMA_DBI_fetch_result($query, null, null, $link);    if (! is_array($field_values) || count($field_values) < 1) {        return false;    }    return $field_values;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common functions for the export functionality for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * This function is called from one of the other functions in this file * and it completes the handling of the export functionality. * * @param  string  $item_name    The name of the item that we are exporting * @param  string  $export_data  The SQL query to create the requested item */function PMA_RTE_handleExport($item_name, $export_data){    global $db;    $item_name = htmlspecialchars(PMA_backquote($_GET['item_name']));    if ($export_data !== false) {        $export_data = '<textarea cols="40" rows="15" style="width: 100%;">'                     . htmlspecialchars(trim($export_data)) . '</textarea>';        $title = sprintf(PMA_RTE_getWord('export'), $item_name);        if ($GLOBALS['is_ajax_request'] == true) {            $extra_data = array('title' => $title);            PMA_ajaxResponse($export_data, true, $extra_data);        } else {            echo "<fieldset>\n"               . "<legend>$title</legend>\n"               . $export_data               . "</fieldset>\n";        }    } else {        $_db = htmlspecialchars(PMA_backquote($db));        $response = __('Error in Processing Request') . ' : '                  . sprintf(PMA_RTE_getWord('not_found'), $item_name, $_db);        $response = PMA_message::error($response);        if ($GLOBALS['is_ajax_request'] == true) {            PMA_ajaxResponse($response, false);        } else {            $response->display();        }    }} // end PMA_RTE_handleExport()/** * If necessary, prepares event information and passes * it to PMA_RTE_handleExport() for the actual export. */function PMA_EVN_handleExport(){    global $_GET, $db;    if (! empty($_GET['export_item']) && ! empty($_GET['item_name'])) {        $item_name = $_GET['item_name'];        $export_data = PMA_DBI_get_definition($db, 'EVENT', $item_name);        PMA_RTE_handleExport($item_name, $export_data);    }} // end PMA_EVN_handleExport()/** * If necessary, prepares routine information and passes * it to PMA_RTE_handleExport() for the actual export. */function PMA_RTN_handleExport(){    global $_GET, $db;    if (   ! empty($_GET['export_item'])        && ! empty($_GET['item_name'])        && ! empty($_GET['item_type'])    ) {        if ($_GET['item_type'] == 'FUNCTION' || $_GET['item_type'] == 'PROCEDURE') {            $export_data = PMA_DBI_get_definition(                $db,                $_GET['item_type'],                $_GET['item_name']);            PMA_RTE_handleExport($_GET['item_name'], $export_data);        }    }} // end PMA_RTN_handleExport()/** * If necessary, prepares trigger information and passes * it to PMA_RTE_handleExport() for the actual export. */function PMA_TRI_handleExport(){    global $_GET, $db, $table;    if (! empty($_GET['export_item']) && ! empty($_GET['item_name'])) {        $item_name = $_GET['item_name'];        $triggers = PMA_DBI_get_triggers($db, $table, '');        $export_data = false;        foreach ($triggers as $trigger) {            if ($trigger['name'] === $item_name) {                $export_data = $trigger['create'];                break;            }        }        PMA_RTE_handleExport($item_name, $export_data);    }} // end PMA_TRI_handleExport()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$die_save_pos = 0;require_once 'pmd_save_pos.php';extract($_POST, EXTR_SKIP);$tables = PMA_DBI_get_tables_full($db, $T1);$type_T1 = strtoupper($tables[$T1]['ENGINE']);$tables = PMA_DBI_get_tables_full($db, $T2);$type_T2 = strtoupper($tables[$T2]['ENGINE']);// native foreign keyif (PMA_foreignkey_supported($type_T1) && PMA_foreignkey_supported($type_T2) && $type_T1 == $type_T2) {    // relation exists?    $existrel_foreign = PMA_getForeigners($db, $T2, '', 'foreign');    if (isset($existrel_foreign[$F2])     && isset($existrel_foreign[$F2]['constraint'])) {         PMD_return_new(0, __('Error: relation already exists.'));    }// note: in InnoDB, the index does not requires to be on a PRIMARY// or UNIQUE key// improve: check all other requirements for InnoDB relations    $result      = PMA_DBI_query('SHOW INDEX FROM ' . PMA_backquote($T1) . ';');    $index_array1   = array(); // will be use to emphasis prim. keys in the table view    while ($row = PMA_DBI_fetch_assoc($result))        $index_array1[$row['Column_name']] = 1;    PMA_DBI_free_result($result);    $result     = PMA_DBI_query('SHOW INDEX FROM ' . PMA_backquote($T2) . ';');    $index_array2  = array(); // will be used to emphasis prim. keys in the table view    while ($row = PMA_DBI_fetch_assoc($result))        $index_array2[$row['Column_name']] = 1;    PMA_DBI_free_result($result);    if (! empty($index_array1[$F1]) && ! empty($index_array2[$F2])) {        $upd_query  = 'ALTER TABLE ' . PMA_backquote($T2)                 . ' ADD FOREIGN KEY ('                 . PMA_backquote($F2) . ')'                 . ' REFERENCES '                 . PMA_backquote($db) . '.'                 . PMA_backquote($T1) . '('                 . PMA_backquote($F1) . ')';        if ($on_delete != 'nix') {            $upd_query   .= ' ON DELETE ' . $on_delete;        }        if ($on_update != 'nix') {            $upd_query   .= ' ON UPDATE ' . $on_update;        }        PMA_DBI_try_query($upd_query) or PMD_return_new(0, __('Error: Relation not added.'));    PMD_return_new(1, __('FOREIGN KEY relation added'));    }// internal (pmadb) relation} else {    if ($GLOBALS['cfgRelation']['relwork'] == false) {        PMD_return_new(0, _('General relation features') . ':' . _('Disabled'));    } else {        // no need to recheck if the keys are primary or unique at this point,        // this was checked on the interface part        $q  = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation'])                            . '(master_db, master_table, master_field, foreign_db, foreign_table, foreign_field)'                            . ' values('                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($T2) . '\', '                            . '\'' . PMA_sqlAddSlashes($F2) . '\', '                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($T1) . '\','                            . '\'' . PMA_sqlAddSlashes($F1) . '\')';        if (PMA_query_as_controluser($q, false, PMA_DBI_QUERY_STORE)) {            PMD_return_new(1, __('Internal relation added'));        } else {            PMD_return_new(0, __('Error: Relation not added.'));        }   }}function PMD_return_new($b,$ret){    global $db,$T1,$F1,$T2,$F2;    header("Content-Type: text/xml; charset=utf-8");    header("Cache-Control: no-cache");    die('<root act="relation_new" return="'.$ret.'" b="'.$b.    '" DB1="'.urlencode($db).    '" T1="'.urlencode($T1).    '" F1="'.urlencode($F1).    '" DB2="'.urlencode($db).    '" T2="'.urlencode($T2).    '" F2="'.urlencode($F2).    '"></root>');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-StringType-Native *//** * Checks if a character is an alphanumeric one * * @param string   character to check for * @return  boolean  whether the character is an alphanumeric one or not */function PMA_STR_isAlnum($c){    return (PMA_STR_isUpper($c) || PMA_STR_isLower($c) || PMA_STR_isDigit($c));} // end of the "PMA_STR_isAlnum()" function/** * Checks if a character is an alphabetic one * * @param string   character to check for * @return  boolean  whether the character is an alphabetic one or not */function PMA_STR_isAlpha($c){    return (PMA_STR_isUpper($c) || PMA_STR_isLower($c));} // end of the "PMA_STR_isAlpha()" function/** * Checks if a character is a digit * * @param string   character to check for * @return  boolean  whether the character is a digit or not */function PMA_STR_isDigit($c){    $ord_zero = 48; //ord('0');    $ord_nine = 57; //ord('9');    $ord_c    = ord($c);    return PMA_STR_numberInRangeInclusive($ord_c, $ord_zero, $ord_nine);} // end of the "PMA_STR_isDigit()" function/** * Checks if a character is an upper alphabetic one * * @param string   character to check for * @return  boolean  whether the character is an upper alphabetic one or not */function PMA_STR_isUpper($c){    $ord_zero = 65; //ord('A');    $ord_nine = 90; //ord('Z');    $ord_c    = ord($c);    return PMA_STR_numberInRangeInclusive($ord_c, $ord_zero, $ord_nine);} // end of the "PMA_STR_isUpper()" function/** * Checks if a character is a lower alphabetic one * * @param string   character to check for * @return  boolean  whether the character is a lower alphabetic one or not */function PMA_STR_isLower($c){    $ord_zero = 97;  //ord('a');    $ord_nine = 122; //ord('z');    $ord_c    = ord($c);    return PMA_STR_numberInRangeInclusive($ord_c, $ord_zero, $ord_nine);} // end of the "PMA_STR_isLower()" function/** * Checks if a character is a space one * * @param string   character to check for * @return  boolean  whether the character is a space one or not */function PMA_STR_isSpace($c){    $ord_space = 32;    //ord(' ')    $ord_tab   = 9;     //ord('\t')    $ord_CR    = 13;    //ord('\n')    $ord_NOBR  = 160;   //ord('U+00A0);    $ord_c     = ord($c);    return ($ord_c == $ord_space         || $ord_c == $ord_NOBR         || PMA_STR_numberInRangeInclusive($ord_c, $ord_tab, $ord_CR));} // end of the "PMA_STR_isSpace()" function/** * Checks if a character is an hexadecimal digit * * @param string   character to check for * @return  boolean  whether the character is an hexadecimal digit or not */function PMA_STR_isHexDigit($c){    $ord_Aupper = 65;  //ord('A');    $ord_Fupper = 70;  //ord('F');    $ord_Alower = 97;  //ord('a');    $ord_Flower = 102; //ord('f');    $ord_zero   = 48;  //ord('0');    $ord_nine   = 57;  //ord('9');    $ord_c      = ord($c);    return (PMA_STR_numberInRangeInclusive($ord_c, $ord_zero, $ord_nine)         || PMA_STR_numberInRangeInclusive($ord_c, $ord_Aupper, $ord_Fupper)         || PMA_STR_numberInRangeInclusive($ord_c, $ord_Alower, $ord_Flower));} // end of the "PMA_STR_isHexDigit()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'server_variables.js';PMA_AddJSVar('pma_token', $_SESSION[' PMA_token ']);PMA_AddJSVar('url_query', str_replace('&amp;', '&', PMA_generate_common_url($db)));PMA_AddJSVar('is_superuser', PMA_isSuperuser() ? true : false);/** * Does the common work */require './libraries/server_common.inc.php';/** * Required to display documentation links */require './libraries/server_variables_doc.php';/** * Ajax request */if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    // Send with correct charset    header('Content-Type: text/html; charset=UTF-8');    if (isset($_REQUEST['type'])) {        switch($_REQUEST['type']) {            case 'getval':                $varValue = PMA_DBI_fetch_single_row('SHOW GLOBAL VARIABLES WHERE Variable_name="' . PMA_sqlAddslashes($_REQUEST['varName']) . '";', 'NUM');                if (isset($VARIABLE_DOC_LINKS[$_REQUEST['varName']][3])                    && $VARIABLE_DOC_LINKS[$_REQUEST['varName']][3] == 'byte') {                    exit(implode(' ', PMA_formatByteDown($varValue[1], 3, 3)));                }                exit($varValue[1]);                break;            case 'setval':                $value = $_REQUEST['varValue'];                if (isset($VARIABLE_DOC_LINKS[$_REQUEST['varName']][3])                   && $VARIABLE_DOC_LINKS[$_REQUEST['varName']][3] == 'byte'                   && preg_match('/^\s*(\d+(\.\d+)?)\s*(mb|kb|mib|kib|gb|gib)\s*$/i', $value, $matches)) {                    $exp = array('kb' => 1, 'kib' => 1, 'mb' => 2, 'mib' => 2, 'gb' => 3, 'gib' => 3);                    $value = floatval($matches[1]) * pow(1024, $exp[strtolower($matches[3])]);                } else {                    $value = PMA_sqlAddslashes($value);                }                if (! is_numeric($value)) $value="'" . $value . "'";                if (! preg_match("/[^a-zA-Z0-9_]+/", $_REQUEST['varName']) && PMA_DBI_query('SET GLOBAL ' . $_REQUEST['varName'] . ' = ' . $value)) {                    // Some values are rounded down etc.                    $varValue = PMA_DBI_fetch_single_row('SHOW GLOBAL VARIABLES WHERE Variable_name="' . PMA_sqlAddslashes($_REQUEST['varName']) . '";', 'NUM');                    exit(json_encode(array(                        'success' => true,                        'variable' => formatVariable($_REQUEST['varName'], $varValue[1])                        ))                    );                }                exit(json_encode(array(                    'success' => false,                    'error' => __('Setting variable failed')                    ))                );                break;        }    }}/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($cfg['MainPageIconic'] ? PMA_getImage('s_vars.png') : '')   . '' . __('Server variables and settings') . "\n"   . PMA_showMySQLDocu('server_system_variables', 'server_system_variables')   . '</h2>' . "\n";/** * Sends the queries and buffers the results */$serverVarsSession = PMA_DBI_fetch_result('SHOW SESSION VARIABLES;', 0, 1);$serverVars = PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES;', 0, 1);/** * Displays the page */?><fieldset id="tableFilter" style="display:none;"><legend><?php echo __('Filters'); ?></legend><div class="formelement">    <label for="filterText"><?php echo __('Containing the word:'); ?></label>    <input name="filterText" type="text" id="filterText" style="vertical-align: baseline;" /></div></fieldset><table id="serverVariables" class="data filteredData noclick"><thead><tr><th><?php echo __('Variable'); ?></th>    <th class="valueHeader"><?phpecho __('Session value') . ' / ' . __('Global value');?>    </th>    <th><?php echo __('Documentation'); ?></th></tr></thead><tbody><?php$odd_row = true;foreach ($serverVars as $name => $value) {    $has_session_value = isset($serverVarsSession[$name]) && $serverVarsSession[$name] != $value;    $row_class = ($odd_row ? 'odd' : 'even') . ' ' . ($has_session_value ? 'diffSession' : '');    ?><tr class="<?php echo $row_class; ?>">    <th nowrap="nowrap"><?php echo htmlspecialchars(str_replace('_', ' ', $name)); ?></th>    <td class="value"><?php echo formatVariable($name, $value); ?></td>    <td class="value"><?php    // To display variable documentation link    if (isset($VARIABLE_DOC_LINKS[$name]))        echo PMA_showMySQLDocu($VARIABLE_DOC_LINKS[$name][1], $VARIABLE_DOC_LINKS[$name][1], false, $VARIABLE_DOC_LINKS[$name][2] . '_' . $VARIABLE_DOC_LINKS[$name][0]);    ?></td>    <?php    if ($has_session_value) {        ?></tr><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> ">    <td>(<?php echo __('Session value'); ?>)</td>    <td class="value"><?php echo formatVariable($name, $serverVarsSession[$name]); ?></td>    <td class="value"></td>    <?php } ?></tr>    <?php    $odd_row = ! $odd_row;}?></tbody></table><?phpfunction formatVariable($name, $value){    global $VARIABLE_DOC_LINKS;    if (is_numeric($value)) {        if (isset($VARIABLE_DOC_LINKS[$name][3]) && $VARIABLE_DOC_LINKS[$name][3]=='byte')            return '<abbr title="'.PMA_formatNumber($value, 0).'">'.implode(' ', PMA_formatByteDown($value, 3, 3)).'</abbr>';        else return PMA_formatNumber($value, 0);    }    return htmlspecialchars($value);}/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * TCPDF wrapper class. */require_once './libraries/tcpdf/tcpdf.php';/** * PDF font to use. */define('PMA_PDF_FONT', 'DejaVuSans');/** * PDF export base class providing basic configuration. */class PMA_PDF extends TCPDF{    var $footerset;    var $Alias = array();    public function __construct($orientation='P', $unit='mm', $format='A4', $unicode=true, $encoding='UTF-8', $diskcache=false)    {        parent::__construct();        $this->SetAuthor('phpMyAdmin ' . PMA_VERSION);        $this->AliasNbPages();        $this->AddFont('DejaVuSans', '', 'dejavusans.php');        $this->AddFont('DejaVuSans', 'B', 'dejavusansb.php');        $this->SetFont(PMA_PDF_FONT, '', 14);        $this->setFooterFont(array(PMA_PDF_FONT, '', 14));    }    /**     * This function must be named "Footer" to work with the TCPDF library     */    function Footer()    {        // Check if footer for this page already exists        if (!isset($this->footerset[$this->page])) {            $this->SetY(-15);            $this->SetFont(PMA_PDF_FONT, '', 14);            $this->Cell(0, 6, __('Page number:') . ' ' . $this->getAliasNumPage() . '/' .  $this->getAliasNbPages(), 'T', 0, 'C');            $this->Cell(0, 6, PMA_localisedDate(), 0, 1, 'R');            $this->SetY(20);            // set footerset            $this->footerset[$this->page] = 1;        }    }    /**     * Function to set alias which will be expanded on page rendering.     */    function SetAlias($name, $value)    {        $this->Alias[$this->UTF8ToUTF16BE($name)] = $this->UTF8ToUTF16BE($value);    }    /**     * Improved with alias expading.     */    function _putpages()    {        if (count($this->Alias) > 0) {            $nb = count($this->pages);            for ($n = 1;$n <= $nb;$n++) {                $this->pages[$n] = strtr($this->pages[$n], $this->Alias);            }        }        parent::_putpages();    }    /**     * Displays an error message     *     * @param string $error_message the error mesage     */    function Error($error_message = '')    {        include './libraries/header.inc.php';        PMA_Message::error(__('Error while creating PDF:') . ' ' . $error_message)->display();        include './libraries/footer.inc.php';    }    /**     * Sends file as a download to user.     */    function Download($filename)    {        $pdfData = $this->getPDFData();        PMA_download_header($filename, 'application/pdf', strlen($pdfData));        echo $pdfData;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Provides the functionality for retreiving images * which may be actual images or an icon from a sprite * * @package PhpMyAdmin */chdir('..');// Send correct type:header('Content-Type: text/javascript; charset=UTF-8');header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');// Avoid loading the full common.inc.php because this would add many// non-js-compatible stuff like DOCTYPEdefine('PMA_MINIMUM_COMMON', true);require_once './libraries/common.inc.php';// Get the data for the sprites, if it's availableif (is_readable($_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php')) {    include $_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php';}$sprites = array();if (function_exists('PMA_sprites')) {    $sprites = PMA_sprites();}// We only need the keys from the array of sprites data,// since they contain the (partial) class names$keys = array();foreach ($sprites as $key => $value) {    $keys[] = "'$key'";}?>/** * Returns an HTML IMG tag for a particular image from a theme, * which may be an actual file or an icon from a sprite * * @param string image      The name of the file to get * @param string alternate  Used to set 'alt' and 'title' attributes of the image * @param object attributes An associative array of other attributes * * @return Object The requested image, this object has two methods: *                  .toString()        - Returns the IMG tag for the requested image *                  .attr(name)        - Returns a particular attribute of the IMG *                                       tag given it's name *                  .attr(name, value) - Sets a particular attribute of the IMG *                                       tag to the given value *                And one property: *                  .isSprite          - Whether the image is a sprite or not */function PMA_getImage(image, alternate, attributes) {    var in_array = function (needle, haystack) {        for (i in haystack) {            if (haystack[i] == needle) {                return true;            }        }        return false;    };    var sprites = [        <?php echo implode($keys, ",\n        ") . "\n"; ?>    ];    // custom image object, it will eventually be returned by this functions    var retval = {        data: {            // this is private            alt: '',            title: '',            src: 'themes/dot.gif'        },        isSprite: true,        attr: function (name, value) {            if (value == undefined) {                if (this.data[name] == undefined) {                    return '';                } else {                    return this.data[name];                }            } else {                this.data[name] = value;            }        },        toString: function () {            var retval = '<' + 'img';            for (var i in this.data) {                retval += ' ' + i + '="' + this.data[i] + '"';            }            retval += ' /' + '>';            return retval;        }    };    // initialise missing parameters    if (attributes == undefined) {        attributes = {};    }    if (alternate == undefined) {        alternate = '';    }    // set alt    if (attributes.alt != undefined) {        retval.attr('alt', attributes.alt);    } else {        retval.attr('alt', alternate);    }    // set title    if (attributes.title != undefined) {        retval.attr('title', attributes.title);    } else {        retval.attr('title', alternate);    }    // set src    var klass = image.replace('.gif', '').replace('.png', '');    if (in_array(klass, sprites)) {        // it's an icon from a sprite        retval.attr('class', 'icon ic_' + klass);    } else {        // it's an image file        retval.isSprite = false;        retval.attr('src', "<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>" + image);    }    // set all other attrubutes    for (var i in attributes) {        if (i == 'src') {            // do not allow to override the 'src' attribute            continue;        } else if (i == 'class') {            retval.attr(i, retval.attr('class') + ' ' + attributes[i]);        } else {            retval.attr(i, attributes[i]);        }    }    return retval;};
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-String-MB *//** * Returns length of string depending on current charset. * * @param string   string to count * @return  int      string length */function PMA_strlen($string){    return mb_strlen($string);}/** * Returns substring from string, works depending on current charset. * * @param string $string  string to count * @param int    $start   start of substring * @param int    $length  length of substring * @return  string */function PMA_substr($string, $start, $length = 2147483647){    return mb_substr($string, $start, $length);}/** * Returns postion of $needle in $haystack or false if not found * * @param string  $haystack * @param string  $needle * @param int     $offset * @return  integer position of $needle in $haystack or false */function PMA_strpos($haystack, $needle, $offset = 0){    return mb_strpos($haystack, $needle, $offset);}/** * Make a string lowercase * * @param string  $string * @return  string */function PMA_strtolower($string){    return mb_strtolower($string);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This library is used with the server IP allow/deny host authentication * feature * * @todo Broken for IPv6 * * @package PhpMyAdmin *//** * Gets the "true" IP address of the current user * * @return  string   the ip of the user * * @access  private */function PMA_getIp(){    /* Get the address of user */    if (!empty($_SERVER['REMOTE_ADDR'])) {        $direct_ip = $_SERVER['REMOTE_ADDR'];    } else {        /* We do not know remote IP */        return false;    }    /* Do we trust this IP as a proxy? If yes we will use it's header. */    if (isset($GLOBALS['cfg']['TrustedProxies'][$direct_ip])) {        $trusted_header_value = PMA_getenv($GLOBALS['cfg']['TrustedProxies'][$direct_ip]);        $matches = array();        // the $ checks that the header contains only one IP address, ?: makes sure the () don't capture        $is_ip = preg_match('|^(?:[0-9]{1,3}\.){3,3}[0-9]{1,3}$|', $trusted_header_value, $matches);        if ($is_ip && (count($matches) == 1)) {            // True IP behind a proxy            return $matches[0];        }    }    /* Return true IP */    return $direct_ip;} // end of the 'PMA_getIp()' function/** * Based on IP Pattern Matcher * Originally by J.Adams <jna@retina.net> * Found on <http://www.php.net/manual/en/function.ip2long.php> * Modified for phpMyAdmin * * Matches: * xxx.xxx.xxx.xxx        (exact) * xxx.xxx.xxx.[yyy-zzz]  (range) * xxx.xxx.xxx.xxx/nn     (CIDR) * * Does not match: * xxx.xxx.xxx.xx[yyy-zzz]  (range, partial octets not supported) * * @param string   string of IP range to match * @param string   string of IP to test against range * * @return  boolean    always true * * @access  public */function PMA_ipMaskTest($testRange, $ipToTest){   $result = true;   if (preg_match('|([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/([0-9]+)|', $testRange, $regs)) {       // performs a mask match       $ipl    = ip2long($ipToTest);       $rangel = ip2long($regs[1] . '.' . $regs[2] . '.' . $regs[3] . '.' . $regs[4]);       $maskl  = 0;       for ($i = 0; $i < 31; $i++) {           if ($i < $regs[5] - 1) {               $maskl = $maskl + PMA_pow(2, (30 - $i));           } // end if       } // end for       if (($maskl & $rangel) == ($maskl & $ipl)) {           return true;       } else {           return false;       }   } else {       // range based       $maskocts = explode('.', $testRange);       $ipocts   = explode('.', $ipToTest);       // perform a range match       for ($i = 0; $i < 4; $i++) {            if (preg_match('|\[([0-9]+)\-([0-9]+)\]|', $maskocts[$i], $regs)) {                if (($ipocts[$i] > $regs[2])                    || ($ipocts[$i] < $regs[1])) {                    $result = false;                } // end if            } else {                if ($maskocts[$i] <> $ipocts[$i]) {                    $result = false;                } // end if            } // end if/else       } //end for   } //end if/else   return $result;} // end of the "PMA_IPMaskTest()" function/** * Runs through IP Allow/Deny rules the use of it below for more information * * @param string 'allow' | 'deny' type of rule to match * * @return  bool   Matched a rule ? * * @access  public * * @see     PMA_getIp() */function PMA_allowDeny($type){    global $cfg;    // Grabs true IP of the user and returns if it can't be found    $remote_ip = PMA_getIp();    if (empty($remote_ip)) {        return false;    }    // copy username    $username  = $cfg['Server']['user'];    // copy rule database    $rules     = $cfg['Server']['AllowDeny']['rules'];    // lookup table for some name shortcuts    $shortcuts = array(        'all'       => '0.0.0.0/0',        'localhost' => '127.0.0.1/8'    );    // Provide some useful shortcuts if server gives us address:    if (PMA_getenv('SERVER_ADDR')) {        $shortcuts['localnetA'] = PMA_getenv('SERVER_ADDR') . '/8';        $shortcuts['localnetB'] = PMA_getenv('SERVER_ADDR') . '/16';        $shortcuts['localnetC'] = PMA_getenv('SERVER_ADDR') . '/24';    }    foreach ($rules as $rule) {        // extract rule data        $rule_data = explode(' ', $rule);        // check for rule type        if ($rule_data[0] != $type) {            continue;        }        // check for username        if (($rule_data[1] != '%') //wildcarded first            && ($rule_data[1] != $username)) {            continue;        }        // check if the config file has the full string with an extra        // 'from' in it and if it does, just discard it        if ($rule_data[2] == 'from') {            $rule_data[2] = $rule_data[3];        }        // Handle shortcuts with above array        if (isset($shortcuts[$rule_data[2]])) {            $rule_data[2] = $shortcuts[$rule_data[2]];        }        // Add code for host lookups here        // Excluded for the moment        // Do the actual matching now        if (PMA_ipMaskTest($rule_data[2], $remote_ip)) {            return true;        }    } // end while    return false;} // end of the "PMA_AllowDeny()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Gets the variables sent or posted to this script, then displays headers */$print_view = true;require_once './libraries/header.inc.php';PMA_checkParameters(array('db'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'db_sql.php?' . PMA_generate_common_url($db);/** * Settings for relations stuff */$cfgRelation = PMA_getRelationsParam();/** * Gets the list of the table in the current db and informations about these * tables if possible * * @todo merge this speedup _optionaly_ into PMA_DBI_get_tables_full() *// speedup view on locked tables// Special speedup for newer MySQL Versions (in 4.0 format changed)if ($cfg['SkipLockedTables'] == true) {    $result = PMA_DBI_query('SHOW OPEN TABLES FROM ' . PMA_backquote($db) . ';');    // Blending out tables in use    if ($result != false && PMA_DBI_num_rows($result) > 0) {        while ($tmp = PMA_DBI_fetch_row($result)) {            // if in use memorize tablename            if (preg_match('@in_use=[1-9]+@i', $tmp[0])) {                $sot_cache[$tmp[0]] = true;            }        }        PMA_DBI_free_result($result);        if (isset($sot_cache)) {            $result      = PMA_DBI_query('SHOW TABLES FROM ' . PMA_backquote($db) . ';', null, PMA_DBI_QUERY_STORE);            if ($result != false && PMA_DBI_num_rows($result) > 0) {                while ($tmp = PMA_DBI_fetch_row($result)) {                    if (! isset($sot_cache[$tmp[0]])) {                        $sts_result  = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ' LIKE \'' . PMA_sqlAddSlashes($tmp[0], true) . '\';');                        $sts_tmp     = PMA_DBI_fetch_assoc($sts_result);                        $tables[]    = $sts_tmp;                    } else { // table in use                        $tables[]    = array('Name' => $tmp[0]);                    }                }                PMA_DBI_free_result($result);                $sot_ready = true;            }        }        unset($tmp, $result);    }}if (! isset($sot_ready)) {    $result      = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ';');    if (PMA_DBI_num_rows($result) > 0) {        while ($sts_tmp = PMA_DBI_fetch_assoc($result)) {            $tables[] = $sts_tmp;        }        PMA_DBI_free_result($result);        unset($res);    }} *//** * If there is at least one table, displays the printer friendly view, else * an error message */$tables = PMA_DBI_get_tables_full($db);$num_tables = count($tables);echo '<br />';// 1. No tableif ($num_tables == 0) {    echo __('No tables found in database.');} else {// 2. Shows table information    ?><table><thead><tr>    <th><?php echo __('Table'); ?></th>    <th><?php echo __('Rows'); ?></th>    <th><?php echo __('Type'); ?></th>    <?php    if ($cfg['ShowStats']) {        echo '<th>' . __('Size') . '</th>';    }    ?>    <th><?php echo __('Comments'); ?></th></tr></thead><tbody>    <?php    $sum_entries = $sum_size = 0;    $odd_row = true;    foreach ($tables as $sts_data) {        if (PMA_Table::isMerge($db, $sts_data['TABLE_NAME'])         || strtoupper($sts_data['ENGINE']) == 'FEDERATED') {            $merged_size = true;        } else {            $merged_size = false;        }        $sum_entries += $sts_data['TABLE_ROWS'];        ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">    <th>        <?php echo htmlspecialchars($sts_data['TABLE_NAME']); ?>    </th>        <?php        if (isset($sts_data['TABLE_ROWS'])) {            ?>    <td align="right">            <?php            if ($merged_size) {                echo '<i>' . PMA_formatNumber($sts_data['TABLE_ROWS'], 0) . '</i>' . "\n";            } else {                echo PMA_formatNumber($sts_data['TABLE_ROWS'], 0) . "\n";            }            ?>    </td>    <td nowrap="nowrap">        <?php echo $sts_data['ENGINE']; ?>    </td>            <?php            if ($cfg['ShowStats']) {                $tblsize =  $sts_data['Data_length'] + $sts_data['Index_length'];                $sum_size += $tblsize;                list($formated_size, $unit) =  PMA_formatByteDown($tblsize, 3, 1);                ?>    <td align="right" nowrap="nowrap">        <?php echo $formated_size . ' ' . $unit; ?>    </td>                <?php            } // end if        } else {            ?>    <td colspan="3" align="center">        <?php echo __('in use'); ?>    </td>            <?php        }        ?>    <td>        <?php        if (! empty($sts_data['Comment'])) {            echo htmlspecialchars($sts_data['Comment']);            $needs_break = '<br />';        } else {            $needs_break = '';        }        if (! empty($sts_data['Create_time'])         || ! empty($sts_data['Update_time'])         || ! empty($sts_data['Check_time'])) {            echo $needs_break;            ?>            <table width="100%">            <?php            if (! empty($sts_data['Create_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Creation') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Create_time'])); ?></td>                </tr>                <?php            }            if (! empty($sts_data['Update_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Last update') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Update_time'])); ?></td>                </tr>                <?php            }            if (! empty($sts_data['Check_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Last check') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Check_time'])); ?></td>                </tr>                <?php            }            ?>            </table>            <?php        }        ?>    </td></tr>        <?php    }    ?><tr>    <th align="center">        <?php echo sprintf(_ngettext('%s table', '%s tables', $num_tables), PMA_formatNumber($num_tables, 0)); ?>    </th>    <th align="right" nowrap="nowrap">        <?php echo PMA_formatNumber($sum_entries, 0); ?>    </th>    <th align="center">        --    </th>    <?php    if ($cfg['ShowStats']) {        list($sum_formated, $unit) = PMA_formatByteDown($sum_size, 3, 1);        ?>    <th align="right" nowrap="nowrap">        <?php echo $sum_formated . ' ' . $unit; ?>    </th>        <?php    }    ?>    <th></th></tr></tbody></table>    <?php}/** * Displays the footer */PMA_printButton();echo "<div id='PMA_disable_floating_menubar'></div>\n";require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_image_jpeg__inline_info(){    return array(        'info' => __('Displays a clickable thumbnail. The options are the maximum width and height in pixels. The original aspect ratio is preserved.'),        );}/** * */function PMA_transformation_image_jpeg__inline($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    if (PMA_IS_GD2) {        $transform_options = array ('string' => '<a href="transformation_wrapper.php' . $options['wrapper_link'] . '" target="_blank"><img src="transformation_wrapper.php' . $options['wrapper_link'] . '&amp;resize=jpeg&amp;newWidth=' . (isset($options[0]) ? $options[0] : '100') . '&amp;newHeight=' . (isset($options[1]) ? $options[1] : 100) . '" alt="[__BUFFER__]" border="0" /></a>');    } else {        $transform_options = array ('string' => '<img src="transformation_wrapper.php' . $options['wrapper_link'] . '" alt="[__BUFFER__]" width="320" height="240" />');    }    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays index edit/creation form and handles it * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/Index.class.php';require_once './libraries/tbl_common.php';// Get fields and stores their name/type$fields = array();foreach (PMA_DBI_get_columns_full($db, $table) as $row) {    if (preg_match('@^(set|enum)\((.+)\)$@i', $row['Type'], $tmp)) {        $tmp[2]         = substr(preg_replace('@([^,])\'\'@', '\\1\\\'',            ',' . $tmp[2]), 1);        $fields[$row['Field']] = $tmp[1] . '(' . str_replace(',', ', ', $tmp[2]) . ')';    } else {        $fields[$row['Field']] = $row['Type'];    }} // end while// Prepares the form valuesif (isset($_REQUEST['index'])) {    if (is_array($_REQUEST['index'])) {        // coming already from form        $index = new PMA_Index($_REQUEST['index']);    } else {        $index = PMA_Index::singleton($db, $table, $_REQUEST['index']);    }} else {    $index = new PMA_Index;}/** * Process the data from the edit/create index form, * run the query to build the new index * and moves back to "tbl_sql.php" */if (isset($_REQUEST['do_save_data'])) {    $error = false;    // $sql_query is the one displayed in the query box    $sql_query = 'ALTER TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table);    // Drops the old index    if (! empty($_REQUEST['old_index'])) {        if ($_REQUEST['old_index'] == 'PRIMARY') {            $sql_query .= ' DROP PRIMARY KEY,';        } else {            $sql_query .= ' DROP INDEX ' . PMA_backquote($_REQUEST['old_index']) . ',';        }    } // end if    // Builds the new one    switch ($index->getType()) {        case 'PRIMARY':            if ($index->getName() == '') {                $index->setName('PRIMARY');            } elseif ($index->getName() != 'PRIMARY') {                $error = PMA_Message::error(__('The name of the primary key must be "PRIMARY"!'));            }            $sql_query .= ' ADD PRIMARY KEY';            break;        case 'FULLTEXT':        case 'UNIQUE':        case 'INDEX':        case 'SPATIAL':            if ($index->getName() == 'PRIMARY') {                $error = PMA_Message::error(__('Can\'t rename index to PRIMARY!'));            }            $sql_query .= ' ADD ' . $index->getType() . ' '                . ($index->getName() ? PMA_backquote($index->getName()) : '');            break;    } // end switch    $index_fields = array();    foreach ($index->getColumns() as $key => $column) {        $index_fields[$key] = PMA_backquote($column->getName());        if ($column->getSubPart()) {            $index_fields[$key] .= '(' . $column->getSubPart() . ')';        }    } // end while    if (empty($index_fields)) {        $error = PMA_Message::error(__('No index parts defined!'));    } else {        $sql_query .= ' (' . implode(', ', $index_fields) . ')';    }    if (! $error) {        PMA_DBI_query($sql_query);        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['index_table'] = PMA_Index::getView($table, $db);            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';        exit;    } else {        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['error'] = $error;            PMA_ajaxResponse($error, false);        }        $error->display();    }} // end builds the new index/** * Display the form to edit/create an index */// Displays headers (if needed)$GLOBALS['js_include'][] = 'indexes.js';require_once './libraries/tbl_info.inc.php';if ($GLOBALS['is_ajax_request'] != true) {    include_once './libraries/tbl_links.inc.php';}if (isset($_REQUEST['index']) && is_array($_REQUEST['index'])) {    // coming already from form    $add_fields        = count($_REQUEST['index']['columns']['names']) - $index->getColumnCount();    if (isset($_REQUEST['add_fields'])) {        $add_fields += $_REQUEST['added_fields'];    }} elseif (isset($_REQUEST['create_index'])) {    $add_fields = $_REQUEST['added_fields'];} else {    $add_fields = 1;}// end preparing form values?><form action="./tbl_indexes.php" method="post" name="index_frm" id="index_frm" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>    onsubmit="if (typeof(this.elements['index[Key_name]'].disabled) != 'undefined') {        this.elements['index[Key_name]'].disabled = false}"><?php$form_params = array(    'db'    => $db,    'table' => $table,);if (isset($_REQUEST['create_index'])) {    $form_params['create_index'] = 1;} elseif (isset($_REQUEST['old_index'])) {    $form_params['old_index'] = $_REQUEST['old_index'];} elseif (isset($_REQUEST['index'])) {    $form_params['old_index'] = $_REQUEST['index'];}echo PMA_generate_common_hidden_inputs($form_params);?><fieldset id="index_edit_fields"><?phpif ($GLOBALS['is_ajax_request'] != true) {?>    <legend><?php    if (isset($_REQUEST['create_index'])) {        echo __('Add index');    } else {        echo __('Edit index');    }?>    </legend><?php}?><div class='index_info'>    <div>        <div class="label">            <strong>                <label for="input_index_name">                    <?php echo __('Index name:'); ?>                    <?php echo PMA_showhint(PMA_Message::notice(__('("PRIMARY" <b>must</b> be the name of and <b>only of</b> a primary key!)'))); ?>                </label>            </strong>        </div>        <input type="text" name="index[Key_name]" id="input_index_name" size="25"            value="<?php echo htmlspecialchars($index->getName()); ?>" onfocus="this.select()" />    </div>    <div>        <div class="label">            <strong>                <label for="select_index_type">                    <?php echo __('Index type:'); ?>                    <?php echo PMA_showMySQLDocu('SQL-Syntax', 'ALTER_TABLE'); ?>                </label>            </strong>        </div>        <select name="index[Index_type]" id="select_index_type" >            <?php echo $index->generateIndexSelector(); ?>        </select>    </div>    <div class="clearfloat"></div></div><table id="index_columns"><thead><tr><th><?php echo __('Column'); ?></th>    <th><?php echo __('Size'); ?></th></tr></thead><tbody><?php$odd_row = true;$spatial_types = array(    'geometry', 'point', 'linestring', 'polygon', 'multipoint',    'multilinestring', 'multipolygon', 'geomtrycollection');foreach ($index->getColumns() as $column) {    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td><select name="index[columns][names][]">            <option value="">-- <?php echo __('Ignore'); ?> --</option>    <?php    foreach ($fields as $field_name => $field_type) {        if (($index->getType() != 'FULLTEXT' || preg_match('/(char|text)/i', $field_type))            && ($index->getType() != 'SPATIAL' || in_array($field_type, $spatial_types))        ) {            echo '<option value="' . htmlspecialchars($field_name) . '"'                 . (($field_name == $column->getName()) ? ' selected="selected"' : '') . '>'                 . htmlspecialchars($field_name) . ' [' . htmlspecialchars($field_type) . ']'                 . '</option>' . "\n";        }    } // end foreach $fields    ?>        </select>    </td>    <td><input type="text" size="5" onfocus="this.select()"            name="index[columns][sub_parts][]"            value="<?php if ($index->getType() != 'SPATIAL') { echo $column->getSubPart(); } ?>" />    </td></tr>    <?php    $odd_row = !$odd_row;} // end foreach $edited_index_info['Sequences']for ($i = 0; $i < $add_fields; $i++) {    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td><select name="index[columns][names][]">            <option value="">-- <?php echo __('Ignore'); ?> --</option>    <?php    foreach ($fields as $field_name => $field_type) {        echo '<option value="' . htmlspecialchars($field_name) . '">'             . htmlspecialchars($field_name) . ' [' . htmlspecialchars($field_type) . ']'             . '</option>' . "\n";    } // end foreach $fields    ?>        </select>    </td>    <td><input type="text" size="5" onfocus="this.select()"            name="index[columns][sub_parts][]" value="" />    </td></tr>    <?php    $odd_row = !$odd_row;} // end foreach $edited_index_info['Sequences']?></tbody></table></fieldset><fieldset class="tblFooters"><?php    if ($GLOBALS['is_ajax_request'] != true) {?>    <input type="submit" name="do_save_data" value="<?php echo __('Save'); ?>" />    <span id="addMoreColumns"><?phpecho __('Or') . ' ';printf(    __('Add to index &nbsp;%s&nbsp;column(s)') . "\n",    '<input type="text" name="added_fields" size="2" value="1" />');echo '<input type="submit" name="add_fields" value="' . __('Go') . '" />' . "\n";?>    </span><?php    } else {        $btn_value = sprintf(__('Add %d column(s) to index'), 1);        echo '<div class="slider"></div>';        echo '<div class="add_fields">';        echo '<input type="submit" value="' . $btn_value . '" />';        echo '</div>';    }?></fieldset></form><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Designer *//** * */require_once './libraries/common.inc.php';// not understandrequire_once './libraries/header_http.inc.php';$GLOBALS['PMD']['STYLE']          = 'default';$cfgRelation = PMA_getRelationsParam();$GLOBALS['script_display_field']    = '<script type="text/javascript">' . "\n" .    '// <![CDATA[' . "\n" .    'var display_field = new Array();' . "\n";/** * retrieves table info and stores it in $GLOBALS['PMD'] * */function get_tabs(){    $GLOBALS['PMD']['TABLE_NAME'] = array();// that foreach no error    $GLOBALS['PMD']['OWNER'] = array();    $GLOBALS['PMD']['TABLE_NAME_SMALL'] = array();    $tables = PMA_DBI_get_tables_full($GLOBALS['db']);    // seems to be needed later    PMA_DBI_select_db($GLOBALS['db']);    $i = 0;    foreach ($tables as $one_table) {        $GLOBALS['PMD']['TABLE_NAME'][$i] = $GLOBALS['db'] . "." . $one_table['TABLE_NAME'];        $GLOBALS['PMD']['OWNER'][$i] = $GLOBALS['db'];        $GLOBALS['PMD']['TABLE_NAME_SMALL'][$i] = $one_table['TABLE_NAME'];        $GLOBALS['PMD_URL']['TABLE_NAME'][$i] = urlencode($GLOBALS['db'] . "." . $one_table['TABLE_NAME']);        $GLOBALS['PMD_URL']['OWNER'][$i] = urlencode($GLOBALS['db']);        $GLOBALS['PMD_URL']['TABLE_NAME_SMALL'][$i] = urlencode($one_table['TABLE_NAME']);        $GLOBALS['PMD_OUT']['TABLE_NAME'][$i] = htmlspecialchars($GLOBALS['db'] . "." . $one_table['TABLE_NAME'], ENT_QUOTES);        $GLOBALS['PMD_OUT']['OWNER'][$i] = htmlspecialchars($GLOBALS['db'], ENT_QUOTES);        $GLOBALS['PMD_OUT']['TABLE_NAME_SMALL'][$i] = htmlspecialchars($one_table['TABLE_NAME'], ENT_QUOTES);        $GLOBALS['PMD']['TABLE_TYPE'][$i] = strtoupper($one_table['ENGINE']);        $DF = PMA_getDisplayField($GLOBALS['db'], $one_table['TABLE_NAME']);        if ($DF != '') {            $GLOBALS['script_display_field'] .= "  display_field['"                . $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i] . "'] = '"                . urlencode($DF) . "';\n";        }        $i++;    }    $GLOBALS['script_display_field'] .=        '// ]]>' . "\n" .        '</script>' . "\n";    //  return $GLOBALS['PMD'];       // many bases // not use ??????}/** * retrieves table column info * * @return  array   table column nfo */function get_tab_info(){    PMA_DBI_select_db($GLOBALS['db']);    $tab_column = array();    for ($i = 0, $cnt = count($GLOBALS['PMD']["TABLE_NAME"]); $i < $cnt; $i++) {        $fields_rs   = PMA_DBI_query(PMA_DBI_get_columns_sql($GLOBALS['db'], $GLOBALS['PMD']["TABLE_NAME_SMALL"][$i], null, true), null, PMA_DBI_QUERY_STORE);        $j = 0;        while ($row = PMA_DBI_fetch_assoc($fields_rs)) {            $tab_column[$GLOBALS['PMD']['TABLE_NAME'][$i]]['COLUMN_ID'][$j]   = $j;            $tab_column[$GLOBALS['PMD']['TABLE_NAME'][$i]]['COLUMN_NAME'][$j] = $row['Field'];            $tab_column[$GLOBALS['PMD']['TABLE_NAME'][$i]]['TYPE'][$j]        = $row['Type'];            $tab_column[$GLOBALS['PMD']['TABLE_NAME'][$i]]['NULLABLE'][$j]    = $row['Null'];            $j++;        }    }    return $tab_column;}/** * returns JavaScript code for intializing vars * * @return string   JavaScript code */function get_script_contr(){    PMA_DBI_select_db($GLOBALS['db']);    $con["C_NAME"] = array();    $i = 0;    $alltab_rs  = PMA_DBI_query('SHOW TABLES FROM ' . PMA_backquote($GLOBALS['db']), null, PMA_DBI_QUERY_STORE);    while ($val = @PMA_DBI_fetch_row($alltab_rs)) {        $row = PMA_getForeigners($GLOBALS['db'], $val[0], '', 'internal');        //echo "<br> internal ".$GLOBALS['db']." - ".$val[0]." - ";        //print_r($row);        if ($row !== false) {            foreach ($row as $field => $value) {                $con['C_NAME'][$i] = '';                $con['DTN'][$i]    = urlencode($GLOBALS['db'] . "." . $val[0]);                $con['DCN'][$i]    = urlencode($field);                $con['STN'][$i]    = urlencode($value['foreign_db'] . "." . $value['foreign_table']);                $con['SCN'][$i]    = urlencode($value['foreign_field']);                $i++;            }        }        $row = PMA_getForeigners($GLOBALS['db'], $val[0], '', 'foreign');        //echo "<br> INNO ";        //print_r($row);        if ($row !== false) {            foreach ($row as $field => $value) {                $con['C_NAME'][$i] = '';                $con['DTN'][$i]    = urlencode($GLOBALS['db'].".".$val[0]);                $con['DCN'][$i]    = urlencode($field);                $con['STN'][$i]    = urlencode($value['foreign_db'].".".$value['foreign_table']);                $con['SCN'][$i]    = urlencode($value['foreign_field']);                $i++;            }        }    }    $ti = 0;    $script_contr        = '<script type="text/javascript">' . "\n" .        '// <![CDATA[' . "\n" .        'var contr = new Array();' . "\n";    for ($i = 0, $cnt = count($con["C_NAME"]); $i < $cnt; $i++) {        $js_var = ' contr[' . $ti . ']';        $script_contr .= $js_var . " = new Array();\n";        $js_var .= "['" . $con['C_NAME'][$i] . "']";        $script_contr .= $js_var . " = new Array();\n";        if (in_array($con['DTN'][$i], $GLOBALS['PMD_URL']["TABLE_NAME"])         && in_array($con['STN'][$i], $GLOBALS['PMD_URL']["TABLE_NAME"])) {            $js_var .= "['" . $con['DTN'][$i] . "']";            $script_contr .= $js_var . " = new Array();\n";            $m_col = array();//}            $js_var .= "['" . $con['DCN'][$i] . "']";            $script_contr .= $js_var . " = new Array();\n";//}            $script_contr .= $js_var . "[0] = '" . $con['STN'][$i] . "';\n"; //            $script_contr .= $js_var . "[1] = '" . $con['SCN'][$i] . "';\n"; //        }        $ti++;    }    $script_contr .=        '// ]]>' . "\n" .        '</script>' . "\n";    return $script_contr;}/** * @return  array unique or primary indizes */function get_pk_or_unique_keys(){    return get_all_keys(true);}/** * returns all indizes * * @param boolean whether to include ony unique ones * @return  array indizes */function get_all_keys($unique_only = false){    include_once './libraries/Index.class.php';    $keys = array();    foreach ($GLOBALS['PMD']['TABLE_NAME_SMALL'] as $I => $table) {        $schema = $GLOBALS['PMD']['OWNER'][$I];        // for now, take into account only the first index segment        foreach (PMA_Index::getFromTable($table, $schema) as $index) {            if ($unique_only && ! $index->isUnique()) {                continue;            }            $columns = $index->getColumns();            foreach ($columns as $column_name => $dummy) {                $keys[$schema . '.' .$table . '.' . $column_name] = 1;            }        }    }    return $keys;}/** * * * @return  array   ??? */function get_script_tabs(){    $script_tabs        = '<script type="text/javascript">' . "\n" .        '// <![CDATA[' . "\n" .        'var j_tabs = new Array();' . "\n" .        'var h_tabs = new Array();' . "\n" ;    for ($i = 0, $cnt = count($GLOBALS['PMD']['TABLE_NAME']); $i < $cnt; $i++) {        $script_tabs .= "j_tabs['" . $GLOBALS['PMD_URL']['TABLE_NAME'][$i] . "'] = '"            . (PMA_foreignkey_supported($GLOBALS['PMD']['TABLE_TYPE'][$i]) ? '1' : '0') . "';\n";        $script_tabs .="h_tabs['" . $GLOBALS['PMD_URL']['TABLE_NAME'][$i] . "'] = 1;"."\n" ;    }    $script_tabs .=        '// ]]>' . "\n" .        '</script>' . "\n";    return $script_tabs;}/** * @return  array   table positions and sizes */function get_tab_pos(){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['designerwork']) {        return null;    }    $query = "         SELECT CONCAT_WS('.', `db_name`, `table_name`) AS `name`,                `x` AS `X`,                `y` AS `Y`,                `v` AS `V`,                `h` AS `H`           FROM " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['designer_coords']);    $tab_pos = PMA_DBI_fetch_result($query, 'name', null, $GLOBALS['controllink'], PMA_DBI_QUERY_STORE);    return count($tab_pos) ? $tab_pos : null;}/** * returns  distinct values from $GLOBALS['PMD']['OWNER'] * * @return  array   owner */function get_owners(){    return array_values(array_unique($GLOBALS['PMD']['OWNER']));}get_tabs();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Triggers management. * * @package PhpMyAdmin *//** * Include required files */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';/** * Include JavaScript libraries */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'rte/common.js';$GLOBALS['js_include'][] = 'rte/triggers.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';/** * Include all other files */require_once './libraries/rte/rte_triggers.lib.php';/** * Do the magic */$_PMA_RTE = 'TRI';require_once './libraries/rte/rte_main.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Single signon for phpMyAdmin * * This is just example how to use script based single signon with * phpMyAdmin, it is not intended to be perfect code and look, only * shows how you can integrate this functionality in your application. * * @package PhpMyAdmin * @subpackage Example *//** * This function returns username and password. * * It can optionally use configured username as parameter. * * @param string $user * @return array */function get_login_credentials($user){    return array('root', '');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common functions for generating the footer for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Creates a fieldset for adding a new item, if the user has the privileges. * * @param    string   $docu   String used to create a link to the MySQL docs * @param    string   $priv   Privilege to check for adding a new item * @param    string   $name   MySQL name of the item * * @return   string   An HTML snippet with the link to add a new item */function PMA_RTE_getFooterLinks($docu, $priv, $name){    global $db, $url_query, $ajax_class;    $icon = 'b_' . strtolower($name) . '_add.png';    $retval  = "";    $retval .= "<!-- ADD " . $name . " FORM START -->\n";    $retval .= "<fieldset class='left'>\n";    $retval .= "    <legend>" . __('New'). "</legend>\n";    $retval .= "        <div class='wrap'>\n";    if (PMA_currentUserHasPrivilege($priv, $db)) {        $retval .= "            <a {$ajax_class['add']} ";        $retval .= "href='db_" . strtolower($name) . "s.php";        $retval .= "?$url_query&amp;add_item=1'>";        $retval .= PMA_getIcon($icon);        $retval .= PMA_RTE_getWord('add') . "</a>\n";    } else {        $retval .= "            " . PMA_getIcon($icon);        $retval .= PMA_RTE_getWord('no_create') . "\n";    }    $retval .= "            " . PMA_showMySQLDocu('SQL-Syntax', $docu) . "\n";    $retval .= "        </div>\n";    $retval .= "</fieldset>\n";    $retval .= "<!-- ADD " . $name . " FORM END -->\n\n";    return $retval;} // end PMA_RTE_getFooterLinks()/** * Creates a fieldset for adding a new routine, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_RTN_getFooterLinks(){    return PMA_RTE_getFooterLinks('CREATE_PROCEDURE', 'CREATE ROUTINE', 'ROUTINE');}// end PMA_RTN_getFooterLinks()/** * Creates a fieldset for adding a new trigger, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_TRI_getFooterLinks(){    return PMA_RTE_getFooterLinks('CREATE_TRIGGER', 'TRIGGER', 'TRIGGER');} // end PMA_TRI_getFooterLinks()/** * Creates a fieldset for adding a new event, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_EVN_getFooterLinks(){    global $db, $url_query;    /**     * For events, we show the usual 'Add event' form and also     * a form for toggling the state of the event scheduler     */    // Init options for the event scheduler toggle functionality    $es_state = PMA_DBI_fetch_value(        "SHOW GLOBAL VARIABLES LIKE 'event_scheduler'",        0,        1    );    $es_state = strtolower($es_state);    $options = array(                    0 => array(                        'label' => __('OFF'),                        'value' => "SET GLOBAL event_scheduler=\"OFF\"",                        'selected' => ($es_state != 'on')                    ),                    1 => array(                        'label' => __('ON'),                        'value' => "SET GLOBAL event_scheduler=\"ON\"",                        'selected' => ($es_state == 'on')                    )               );    // Generate output    $retval  = "<!-- FOOTER LINKS START -->\n";    $retval .= "<div class='doubleFieldset'>\n";    // show the usual footer    $retval .= PMA_RTE_getFooterLinks('CREATE_EVENT', 'EVENT', 'EVENT');    $retval .= "    <fieldset class='right'>\n";    $retval .= "        <legend>\n";    $retval .= "            " . __('Event scheduler status') . "\n";    $retval .= "        </legend>\n";    $retval .= "        <div class='wrap'>\n";    // show the toggle button    $retval .= PMA_toggleButton(        "sql.php?$url_query&amp;goto=db_events.php" . urlencode("?db=$db"),        'sql_query',        $options,        'PMA_slidingMessage(data.sql_query);'    );    $retval .= "        </div>\n";    $retval .= "    </fieldset>\n";    $retval .= "    <div style='clear: both;'></div>\n";    $retval .= "</div>";    $retval .= "<!-- FOOTER LINKS END -->\n";    return $retval;} // end PMA_EVN_getFooterLinks()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * File for vendor customisation, you can change here paths or some behaviour, * which vendors such as Linux distibutions might want to change. * * For changing this file you should know what you are doing. For this reason * options here are not part of normal configuration. * * @package PhpMyAdmin *//** * Path to changelog file, can be gzip compressed. Useful when you want to * have documentation somewhere else, eg. /usr/share/doc. */define('CHANGELOG_FILE', './ChangeLog');/** * Path to license file. Useful when you want to have documentation somewhere * else, eg. /usr/share/doc. */define('LICENSE_FILE', './LICENSE');/** * Path to config file generated using setup script. */define('SETUP_CONFIG_FILE', './config/config.inc.php');/** * Whether setup requires writable directory where config * file will be generated. */define('SETUP_DIR_WRITABLE', true);/** * Directory where configuration files are stored. * It is not used directly in code, just a convenient * define used further in this file. */define('CONFIG_DIR', './');/** * Filename of a configuration file. */define('CONFIG_FILE', CONFIG_DIR . 'config.inc.php');/** * Filename of custom header file. */define('CUSTOM_HEADER_FILE', CONFIG_DIR . 'config.header.inc.php');/** * Filename of custom footer file. */define('CUSTOM_FOOTER_FILE', CONFIG_DIR . 'config.footer.inc.php');/** * Default value for check for version upgrades. */define('VERSION_CHECK_DEFAULT', true);/** * Path to gettext.inc file. Useful when you want php-gettext somewhere else, * eg. /usr/share/php/gettext/gettext.inc. */define('GETTEXT_INC', './libraries/php-gettext/gettext.inc');?>
<?php/** * @package Swekey */?><script>	var g_SwekeyPlugin = null;	// -------------------------------------------------------------------	// Create the swekey plugin if it does not exists	function Swekey_Plugin()	{		try		{			if (g_SwekeyPlugin != null)				return g_SwekeyPlugin;			if (window.ActiveXObject)			{    			g_SwekeyPlugin = document.getElementById("swekey_activex");    			if (g_SwekeyPlugin == null)    			{                    // we must create the activex that way instead of new ActiveXObject("FbAuthAx.FbAuthCtl");                    // ortherwise SetClientSite is not called and we can not get the url  			  		var div = document.createElement('div');	   				div.innerHTML='<object id="swekey_activex" style="display:none" CLASSID="CLSID:8E02E3F9-57AA-4EE1-AA68-A42DD7B0FADE"></object>';    				// Never append to the body because it may still loading and it breaks IE	   				document.body.insertBefore(div, document.body.firstChild);    				g_SwekeyPlugin = document.getElementById("swekey_activex");                }				return g_SwekeyPlugin;			}			g_SwekeyPlugin = document.getElementById("swekey_plugin");			if (g_SwekeyPlugin != null)				return g_SwekeyPlugin;			for (i = 0; i < navigator.plugins.length; i ++)			{				try				{				    if (navigator.plugins[i] == null)				    {				        navigator.plugins.refresh();                    }                    else if (navigator.plugins[i][0] != null && navigator.plugins[i][0].type == "application/fbauth-plugin")					{						var x = document.createElement('embed');						x.setAttribute('type', 'application/fbauth-plugin');						x.setAttribute('id', 'swekey_plugin');						x.setAttribute('width', '0');						x.setAttribute('height', '0');						x.style.dislay='none';						//document.body.appendChild(x);						document.body.insertBefore(x, document.body.firstChild);						g_SwekeyPlugin = document.getElementById("swekey_plugin");						return g_SwekeyPlugin;					}				}				catch (e)				{				    navigator.plugins.refresh();					//alert ('Failed to create plugin: ' + e);				}			}		}		catch (e)		{			//alert("Swekey_Plugin " + e);			g_SwekeyPlugin = null;		}		return null;	}	// -------------------------------------------------------------------	// Returns true if the swekey plugin is installed	function Swekey_Installed()	{		return (Swekey_Plugin() != null);	}	// -------------------------------------------------------------------	// List the id of the Swekey connected to the PC	// Returns a string containing comma separated Swekey Ids    // A Swekey is a 32 char hexadecimal value.	function Swekey_ListKeyIds()	{		try		{			return Swekey_Plugin().list();		}		catch (e)		{//			alert("Swekey_ListKeyIds " + e);		}		return "";	}	// -------------------------------------------------------------------	// Ask the Connected Swekey to generate an OTP	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// rt: A random token	// return: The calculated OTP encoded in a 64 chars hexadecimal value.	function Swekey_GetOtp(id, rt)	{		try		{			return Swekey_Plugin().getotp(id, rt);		}		catch (e)		{//			alert("Swekey_GetOtp " + e);		}		return "";	}	// -------------------------------------------------------------------	// Ask the Connected Swekey to generate a OTP linked to the current https host	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// rt: A random token	// return: The calculated OTP encoded in a 64 chars hexadecimal value.	// or "" if the current url does not start with https	function Swekey_GetLinkedOtp(id, rt)	{		try		{			return Swekey_Plugin().getlinkedotp(id, rt);		}		catch (e)		{//			alert("Swekey_GetSOtp " + e);		}		return "";	}	// -------------------------------------------------------------------    // Calls Swekey_GetOtp or Swekey_GetLinkedOtp depending if we are in    // an https page or not.	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// rt: A random token	// return: The calculated OTP encoded in a 64 chars hexadecimal value.	function Swekey_GetSmartOtp(id, rt)	{        var res = Swekey_GetLinkedOtp(id, rt);        if (res == "")            res = Swekey_GetOtp(id, rt);		return res;	}	// -------------------------------------------------------------------	// Set a unplug handler (url) to the specified connected feebee	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// key: The key that index that url, (aplhanumeric values only)	// url: The url that will be launched ("" deletes the url)	function Swekey_SetUnplugUrl(id, key, url)	{		try		{			return Swekey_Plugin().setunplugurl(id, key, url);		}		catch (e)		{//			alert("Swekey_SetUnplugUrl " + e);		}	}</script>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * The Horde_Cipher_Blowfish:: class implements the Horde_Cipher interface * encryption data using the Blowfish algorithm. * * Copyright 2002-2009 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you * did not receive this file, see http://www.fsf.org/copyleft/lgpl.html. * * @author  Mike Cochrane <mike@graftonhall.co.nz> * @package Horde_Cipher */class Horde_Cipher_blowfish{    /**     * Pi Array     *     * @var array     */    protected $p = array(            0x243F6A88, 0x85A308D3, 0x13198A2E, 0x03707344,            0xA4093822, 0x299F31D0, 0x082EFA98, 0xEC4E6C89,            0x452821E6, 0x38D01377, 0xBE5466CF, 0x34E90C6C,            0xC0AC29B7, 0xC97C50DD, 0x3F84D5B5, 0xB5470917,            0x9216D5D9, 0x8979FB1B);    /**     * S Box (s1)     *     * @var array     */    protected $s1 = array(            0xD1310BA6, 0x98DFB5AC, 0x2FFD72DB, 0xD01ADFB7,            0xB8E1AFED, 0x6A267E96, 0xBA7C9045, 0xF12C7F99,            0x24A19947, 0xB3916CF7, 0x0801F2E2, 0x858EFC16,            0x636920D8, 0x71574E69, 0xA458FEA3, 0xF4933D7E,            0x0D95748F, 0x728EB658, 0x718BCD58, 0x82154AEE,            0x7B54A41D, 0xC25A59B5, 0x9C30D539, 0x2AF26013,            0xC5D1B023, 0x286085F0, 0xCA417918, 0xB8DB38EF,            0x8E79DCB0, 0x603A180E, 0x6C9E0E8B, 0xB01E8A3E,            0xD71577C1, 0xBD314B27, 0x78AF2FDA, 0x55605C60,            0xE65525F3, 0xAA55AB94, 0x57489862, 0x63E81440,            0x55CA396A, 0x2AAB10B6, 0xB4CC5C34, 0x1141E8CE,            0xA15486AF, 0x7C72E993, 0xB3EE1411, 0x636FBC2A,            0x2BA9C55D, 0x741831F6, 0xCE5C3E16, 0x9B87931E,            0xAFD6BA33, 0x6C24CF5C, 0x7A325381, 0x28958677,            0x3B8F4898, 0x6B4BB9AF, 0xC4BFE81B, 0x66282193,            0x61D809CC, 0xFB21A991, 0x487CAC60, 0x5DEC8032,            0xEF845D5D, 0xE98575B1, 0xDC262302, 0xEB651B88,            0x23893E81, 0xD396ACC5, 0x0F6D6FF3, 0x83F44239,            0x2E0B4482, 0xA4842004, 0x69C8F04A, 0x9E1F9B5E,            0x21C66842, 0xF6E96C9A, 0x670C9C61, 0xABD388F0,            0x6A51A0D2, 0xD8542F68, 0x960FA728, 0xAB5133A3,            0x6EEF0B6C, 0x137A3BE4, 0xBA3BF050, 0x7EFB2A98,            0xA1F1651D, 0x39AF0176, 0x66CA593E, 0x82430E88,            0x8CEE8619, 0x456F9FB4, 0x7D84A5C3, 0x3B8B5EBE,            0xE06F75D8, 0x85C12073, 0x401A449F, 0x56C16AA6,            0x4ED3AA62, 0x363F7706, 0x1BFEDF72, 0x429B023D,            0x37D0D724, 0xD00A1248, 0xDB0FEAD3, 0x49F1C09B,            0x075372C9, 0x80991B7B, 0x25D479D8, 0xF6E8DEF7,            0xE3FE501A, 0xB6794C3B, 0x976CE0BD, 0x04C006BA,            0xC1A94FB6, 0x409F60C4, 0x5E5C9EC2, 0x196A2463,            0x68FB6FAF, 0x3E6C53B5, 0x1339B2EB, 0x3B52EC6F,            0x6DFC511F, 0x9B30952C, 0xCC814544, 0xAF5EBD09,            0xBEE3D004, 0xDE334AFD, 0x660F2807, 0x192E4BB3,            0xC0CBA857, 0x45C8740F, 0xD20B5F39, 0xB9D3FBDB,            0x5579C0BD, 0x1A60320A, 0xD6A100C6, 0x402C7279,            0x679F25FE, 0xFB1FA3CC, 0x8EA5E9F8, 0xDB3222F8,            0x3C7516DF, 0xFD616B15, 0x2F501EC8, 0xAD0552AB,            0x323DB5FA, 0xFD238760, 0x53317B48, 0x3E00DF82,            0x9E5C57BB, 0xCA6F8CA0, 0x1A87562E, 0xDF1769DB,            0xD542A8F6, 0x287EFFC3, 0xAC6732C6, 0x8C4F5573,            0x695B27B0, 0xBBCA58C8, 0xE1FFA35D, 0xB8F011A0,            0x10FA3D98, 0xFD2183B8, 0x4AFCB56C, 0x2DD1D35B,            0x9A53E479, 0xB6F84565, 0xD28E49BC, 0x4BFB9790,            0xE1DDF2DA, 0xA4CB7E33, 0x62FB1341, 0xCEE4C6E8,            0xEF20CADA, 0x36774C01, 0xD07E9EFE, 0x2BF11FB4,            0x95DBDA4D, 0xAE909198, 0xEAAD8E71, 0x6B93D5A0,            0xD08ED1D0, 0xAFC725E0, 0x8E3C5B2F, 0x8E7594B7,            0x8FF6E2FB, 0xF2122B64, 0x8888B812, 0x900DF01C,            0x4FAD5EA0, 0x688FC31C, 0xD1CFF191, 0xB3A8C1AD,            0x2F2F2218, 0xBE0E1777, 0xEA752DFE, 0x8B021FA1,            0xE5A0CC0F, 0xB56F74E8, 0x18ACF3D6, 0xCE89E299,            0xB4A84FE0, 0xFD13E0B7, 0x7CC43B81, 0xD2ADA8D9,            0x165FA266, 0x80957705, 0x93CC7314, 0x211A1477,            0xE6AD2065, 0x77B5FA86, 0xC75442F5, 0xFB9D35CF,            0xEBCDAF0C, 0x7B3E89A0, 0xD6411BD3, 0xAE1E7E49,            0x00250E2D, 0x2071B35E, 0x226800BB, 0x57B8E0AF,            0x2464369B, 0xF009B91E, 0x5563911D, 0x59DFA6AA,            0x78C14389, 0xD95A537F, 0x207D5BA2, 0x02E5B9C5,            0x83260376, 0x6295CFA9, 0x11C81968, 0x4E734A41,            0xB3472DCA, 0x7B14A94A, 0x1B510052, 0x9A532915,            0xD60F573F, 0xBC9BC6E4, 0x2B60A476, 0x81E67400,            0x08BA6FB5, 0x571BE91F, 0xF296EC6B, 0x2A0DD915,            0xB6636521, 0xE7B9F9B6, 0xFF34052E, 0xC5855664,            0x53B02D5D, 0xA99F8FA1, 0x08BA4799, 0x6E85076A);    /**     * S Box (s2)     *     * @var array     */    protected $s2 = array(            0x4B7A70E9, 0xB5B32944, 0xDB75092E, 0xC4192623,            0xAD6EA6B0, 0x49A7DF7D, 0x9CEE60B8, 0x8FEDB266,            0xECAA8C71, 0x699A17FF, 0x5664526C, 0xC2B19EE1,            0x193602A5, 0x75094C29, 0xA0591340, 0xE4183A3E,            0x3F54989A, 0x5B429D65, 0x6B8FE4D6, 0x99F73FD6,            0xA1D29C07, 0xEFE830F5, 0x4D2D38E6, 0xF0255DC1,            0x4CDD2086, 0x8470EB26, 0x6382E9C6, 0x021ECC5E,            0x09686B3F, 0x3EBAEFC9, 0x3C971814, 0x6B6A70A1,            0x687F3584, 0x52A0E286, 0xB79C5305, 0xAA500737,            0x3E07841C, 0x7FDEAE5C, 0x8E7D44EC, 0x5716F2B8,            0xB03ADA37, 0xF0500C0D, 0xF01C1F04, 0x0200B3FF,            0xAE0CF51A, 0x3CB574B2, 0x25837A58, 0xDC0921BD,            0xD19113F9, 0x7CA92FF6, 0x94324773, 0x22F54701,            0x3AE5E581, 0x37C2DADC, 0xC8B57634, 0x9AF3DDA7,            0xA9446146, 0x0FD0030E, 0xECC8C73E, 0xA4751E41,            0xE238CD99, 0x3BEA0E2F, 0x3280BBA1, 0x183EB331,            0x4E548B38, 0x4F6DB908, 0x6F420D03, 0xF60A04BF,            0x2CB81290, 0x24977C79, 0x5679B072, 0xBCAF89AF,            0xDE9A771F, 0xD9930810, 0xB38BAE12, 0xDCCF3F2E,            0x5512721F, 0x2E6B7124, 0x501ADDE6, 0x9F84CD87,            0x7A584718, 0x7408DA17, 0xBC9F9ABC, 0xE94B7D8C,            0xEC7AEC3A, 0xDB851DFA, 0x63094366, 0xC464C3D2,            0xEF1C1847, 0x3215D908, 0xDD433B37, 0x24C2BA16,            0x12A14D43, 0x2A65C451, 0x50940002, 0x133AE4DD,            0x71DFF89E, 0x10314E55, 0x81AC77D6, 0x5F11199B,            0x043556F1, 0xD7A3C76B, 0x3C11183B, 0x5924A509,            0xF28FE6ED, 0x97F1FBFA, 0x9EBABF2C, 0x1E153C6E,            0x86E34570, 0xEAE96FB1, 0x860E5E0A, 0x5A3E2AB3,            0x771FE71C, 0x4E3D06FA, 0x2965DCB9, 0x99E71D0F,            0x803E89D6, 0x5266C825, 0x2E4CC978, 0x9C10B36A,            0xC6150EBA, 0x94E2EA78, 0xA5FC3C53, 0x1E0A2DF4,            0xF2F74EA7, 0x361D2B3D, 0x1939260F, 0x19C27960,            0x5223A708, 0xF71312B6, 0xEBADFE6E, 0xEAC31F66,            0xE3BC4595, 0xA67BC883, 0xB17F37D1, 0x018CFF28,            0xC332DDEF, 0xBE6C5AA5, 0x65582185, 0x68AB9802,            0xEECEA50F, 0xDB2F953B, 0x2AEF7DAD, 0x5B6E2F84,            0x1521B628, 0x29076170, 0xECDD4775, 0x619F1510,            0x13CCA830, 0xEB61BD96, 0x0334FE1E, 0xAA0363CF,            0xB5735C90, 0x4C70A239, 0xD59E9E0B, 0xCBAADE14,            0xEECC86BC, 0x60622CA7, 0x9CAB5CAB, 0xB2F3846E,            0x648B1EAF, 0x19BDF0CA, 0xA02369B9, 0x655ABB50,            0x40685A32, 0x3C2AB4B3, 0x319EE9D5, 0xC021B8F7,            0x9B540B19, 0x875FA099, 0x95F7997E, 0x623D7DA8,            0xF837889A, 0x97E32D77, 0x11ED935F, 0x16681281,            0x0E358829, 0xC7E61FD6, 0x96DEDFA1, 0x7858BA99,            0x57F584A5, 0x1B227263, 0x9B83C3FF, 0x1AC24696,            0xCDB30AEB, 0x532E3054, 0x8FD948E4, 0x6DBC3128,            0x58EBF2EF, 0x34C6FFEA, 0xFE28ED61, 0xEE7C3C73,            0x5D4A14D9, 0xE864B7E3, 0x42105D14, 0x203E13E0,            0x45EEE2B6, 0xA3AAABEA, 0xDB6C4F15, 0xFACB4FD0,            0xC742F442, 0xEF6ABBB5, 0x654F3B1D, 0x41CD2105,            0xD81E799E, 0x86854DC7, 0xE44B476A, 0x3D816250,            0xCF62A1F2, 0x5B8D2646, 0xFC8883A0, 0xC1C7B6A3,            0x7F1524C3, 0x69CB7492, 0x47848A0B, 0x5692B285,            0x095BBF00, 0xAD19489D, 0x1462B174, 0x23820E00,            0x58428D2A, 0x0C55F5EA, 0x1DADF43E, 0x233F7061,            0x3372F092, 0x8D937E41, 0xD65FECF1, 0x6C223BDB,            0x7CDE3759, 0xCBEE7460, 0x4085F2A7, 0xCE77326E,            0xA6078084, 0x19F8509E, 0xE8EFD855, 0x61D99735,            0xA969A7AA, 0xC50C06C2, 0x5A04ABFC, 0x800BCADC,            0x9E447A2E, 0xC3453484, 0xFDD56705, 0x0E1E9EC9,            0xDB73DBD3, 0x105588CD, 0x675FDA79, 0xE3674340,            0xC5C43465, 0x713E38D8, 0x3D28F89E, 0xF16DFF20,            0x153E21E7, 0x8FB03D4A, 0xE6E39F2B, 0xDB83ADF7);    /**     * S Box (s3)     *     * @var array     */    protected $s3 = array(            0xE93D5A68, 0x948140F7, 0xF64C261C, 0x94692934,            0x411520F7, 0x7602D4F7, 0xBCF46B2E, 0xD4A20068,            0xD4082471, 0x3320F46A, 0x43B7D4B7, 0x500061AF,            0x1E39F62E, 0x97244546, 0x14214F74, 0xBF8B8840,            0x4D95FC1D, 0x96B591AF, 0x70F4DDD3, 0x66A02F45,            0xBFBC09EC, 0x03BD9785, 0x7FAC6DD0, 0x31CB8504,            0x96EB27B3, 0x55FD3941, 0xDA2547E6, 0xABCA0A9A,            0x28507825, 0x530429F4, 0x0A2C86DA, 0xE9B66DFB,            0x68DC1462, 0xD7486900, 0x680EC0A4, 0x27A18DEE,            0x4F3FFEA2, 0xE887AD8C, 0xB58CE006, 0x7AF4D6B6,            0xAACE1E7C, 0xD3375FEC, 0xCE78A399, 0x406B2A42,            0x20FE9E35, 0xD9F385B9, 0xEE39D7AB, 0x3B124E8B,            0x1DC9FAF7, 0x4B6D1856, 0x26A36631, 0xEAE397B2,            0x3A6EFA74, 0xDD5B4332, 0x6841E7F7, 0xCA7820FB,            0xFB0AF54E, 0xD8FEB397, 0x454056AC, 0xBA489527,            0x55533A3A, 0x20838D87, 0xFE6BA9B7, 0xD096954B,            0x55A867BC, 0xA1159A58, 0xCCA92963, 0x99E1DB33,            0xA62A4A56, 0x3F3125F9, 0x5EF47E1C, 0x9029317C,            0xFDF8E802, 0x04272F70, 0x80BB155C, 0x05282CE3,            0x95C11548, 0xE4C66D22, 0x48C1133F, 0xC70F86DC,            0x07F9C9EE, 0x41041F0F, 0x404779A4, 0x5D886E17,            0x325F51EB, 0xD59BC0D1, 0xF2BCC18F, 0x41113564,            0x257B7834, 0x602A9C60, 0xDFF8E8A3, 0x1F636C1B,            0x0E12B4C2, 0x02E1329E, 0xAF664FD1, 0xCAD18115,            0x6B2395E0, 0x333E92E1, 0x3B240B62, 0xEEBEB922,            0x85B2A20E, 0xE6BA0D99, 0xDE720C8C, 0x2DA2F728,            0xD0127845, 0x95B794FD, 0x647D0862, 0xE7CCF5F0,            0x5449A36F, 0x877D48FA, 0xC39DFD27, 0xF33E8D1E,            0x0A476341, 0x992EFF74, 0x3A6F6EAB, 0xF4F8FD37,            0xA812DC60, 0xA1EBDDF8, 0x991BE14C, 0xDB6E6B0D,            0xC67B5510, 0x6D672C37, 0x2765D43B, 0xDCD0E804,            0xF1290DC7, 0xCC00FFA3, 0xB5390F92, 0x690FED0B,            0x667B9FFB, 0xCEDB7D9C, 0xA091CF0B, 0xD9155EA3,            0xBB132F88, 0x515BAD24, 0x7B9479BF, 0x763BD6EB,            0x37392EB3, 0xCC115979, 0x8026E297, 0xF42E312D,            0x6842ADA7, 0xC66A2B3B, 0x12754CCC, 0x782EF11C,            0x6A124237, 0xB79251E7, 0x06A1BBE6, 0x4BFB6350,            0x1A6B1018, 0x11CAEDFA, 0x3D25BDD8, 0xE2E1C3C9,            0x44421659, 0x0A121386, 0xD90CEC6E, 0xD5ABEA2A,            0x64AF674E, 0xDA86A85F, 0xBEBFE988, 0x64E4C3FE,            0x9DBC8057, 0xF0F7C086, 0x60787BF8, 0x6003604D,            0xD1FD8346, 0xF6381FB0, 0x7745AE04, 0xD736FCCC,            0x83426B33, 0xF01EAB71, 0xB0804187, 0x3C005E5F,            0x77A057BE, 0xBDE8AE24, 0x55464299, 0xBF582E61,            0x4E58F48F, 0xF2DDFDA2, 0xF474EF38, 0x8789BDC2,            0x5366F9C3, 0xC8B38E74, 0xB475F255, 0x46FCD9B9,            0x7AEB2661, 0x8B1DDF84, 0x846A0E79, 0x915F95E2,            0x466E598E, 0x20B45770, 0x8CD55591, 0xC902DE4C,            0xB90BACE1, 0xBB8205D0, 0x11A86248, 0x7574A99E,            0xB77F19B6, 0xE0A9DC09, 0x662D09A1, 0xC4324633,            0xE85A1F02, 0x09F0BE8C, 0x4A99A025, 0x1D6EFE10,            0x1AB93D1D, 0x0BA5A4DF, 0xA186F20F, 0x2868F169,            0xDCB7DA83, 0x573906FE, 0xA1E2CE9B, 0x4FCD7F52,            0x50115E01, 0xA70683FA, 0xA002B5C4, 0x0DE6D027,            0x9AF88C27, 0x773F8641, 0xC3604C06, 0x61A806B5,            0xF0177A28, 0xC0F586E0, 0x006058AA, 0x30DC7D62,            0x11E69ED7, 0x2338EA63, 0x53C2DD94, 0xC2C21634,            0xBBCBEE56, 0x90BCB6DE, 0xEBFC7DA1, 0xCE591D76,            0x6F05E409, 0x4B7C0188, 0x39720A3D, 0x7C927C24,            0x86E3725F, 0x724D9DB9, 0x1AC15BB4, 0xD39EB8FC,            0xED545578, 0x08FCA5B5, 0xD83D7CD3, 0x4DAD0FC4,            0x1E50EF5E, 0xB161E6F8, 0xA28514D9, 0x6C51133C,            0x6FD5C7E7, 0x56E14EC4, 0x362ABFCE, 0xDDC6C837,            0xD79A3234, 0x92638212, 0x670EFA8E, 0x406000E0);    /**     * S Box (s4)     *     * @var array     */    protected $s4 = array(            0x3A39CE37, 0xD3FAF5CF, 0xABC27737, 0x5AC52D1B,            0x5CB0679E, 0x4FA33742, 0xD3822740, 0x99BC9BBE,            0xD5118E9D, 0xBF0F7315, 0xD62D1C7E, 0xC700C47B,            0xB78C1B6B, 0x21A19045, 0xB26EB1BE, 0x6A366EB4,            0x5748AB2F, 0xBC946E79, 0xC6A376D2, 0x6549C2C8,            0x530FF8EE, 0x468DDE7D, 0xD5730A1D, 0x4CD04DC6,            0x2939BBDB, 0xA9BA4650, 0xAC9526E8, 0xBE5EE304,            0xA1FAD5F0, 0x6A2D519A, 0x63EF8CE2, 0x9A86EE22,            0xC089C2B8, 0x43242EF6, 0xA51E03AA, 0x9CF2D0A4,            0x83C061BA, 0x9BE96A4D, 0x8FE51550, 0xBA645BD6,            0x2826A2F9, 0xA73A3AE1, 0x4BA99586, 0xEF5562E9,            0xC72FEFD3, 0xF752F7DA, 0x3F046F69, 0x77FA0A59,            0x80E4A915, 0x87B08601, 0x9B09E6AD, 0x3B3EE593,            0xE990FD5A, 0x9E34D797, 0x2CF0B7D9, 0x022B8B51,            0x96D5AC3A, 0x017DA67D, 0xD1CF3ED6, 0x7C7D2D28,            0x1F9F25CF, 0xADF2B89B, 0x5AD6B472, 0x5A88F54C,            0xE029AC71, 0xE019A5E6, 0x47B0ACFD, 0xED93FA9B,            0xE8D3C48D, 0x283B57CC, 0xF8D56629, 0x79132E28,            0x785F0191, 0xED756055, 0xF7960E44, 0xE3D35E8C,            0x15056DD4, 0x88F46DBA, 0x03A16125, 0x0564F0BD,            0xC3EB9E15, 0x3C9057A2, 0x97271AEC, 0xA93A072A,            0x1B3F6D9B, 0x1E6321F5, 0xF59C66FB, 0x26DCF319,            0x7533D928, 0xB155FDF5, 0x03563482, 0x8ABA3CBB,            0x28517711, 0xC20AD9F8, 0xABCC5167, 0xCCAD925F,            0x4DE81751, 0x3830DC8E, 0x379D5862, 0x9320F991,            0xEA7A90C2, 0xFB3E7BCE, 0x5121CE64, 0x774FBE32,            0xA8B6E37E, 0xC3293D46, 0x48DE5369, 0x6413E680,            0xA2AE0810, 0xDD6DB224, 0x69852DFD, 0x09072166,            0xB39A460A, 0x6445C0DD, 0x586CDECF, 0x1C20C8AE,            0x5BBEF7DD, 0x1B588D40, 0xCCD2017F, 0x6BB4E3BB,            0xDDA26A7E, 0x3A59FF45, 0x3E350A44, 0xBCB4CDD5,            0x72EACEA8, 0xFA6484BB, 0x8D6612AE, 0xBF3C6F47,            0xD29BE463, 0x542F5D9E, 0xAEC2771B, 0xF64E6370,            0x740E0D8D, 0xE75B1357, 0xF8721671, 0xAF537D5D,            0x4040CB08, 0x4EB4E2CC, 0x34D2466A, 0x0115AF84,            0xE1B00428, 0x95983A1D, 0x06B89FB4, 0xCE6EA048,            0x6F3F3B82, 0x3520AB82, 0x011A1D4B, 0x277227F8,            0x611560B1, 0xE7933FDC, 0xBB3A792B, 0x344525BD,            0xA08839E1, 0x51CE794B, 0x2F32C9B7, 0xA01FBAC9,            0xE01CC87E, 0xBCC7D1F6, 0xCF0111C3, 0xA1E8AAC7,            0x1A908749, 0xD44FBD9A, 0xD0DADECB, 0xD50ADA38,            0x0339C32A, 0xC6913667, 0x8DF9317C, 0xE0B12B4F,            0xF79E59B7, 0x43F5BB3A, 0xF2D519FF, 0x27D9459C,            0xBF97222C, 0x15E6FC2A, 0x0F91FC71, 0x9B941525,            0xFAE59361, 0xCEB69CEB, 0xC2A86459, 0x12BAA8D1,            0xB6C1075E, 0xE3056A0C, 0x10D25065, 0xCB03A442,            0xE0EC6E0E, 0x1698DB3B, 0x4C98A0BE, 0x3278E964,            0x9F1F9532, 0xE0D392DF, 0xD3A0342B, 0x8971F21E,            0x1B0A7441, 0x4BA3348C, 0xC5BE7120, 0xC37632D8,            0xDF359F8D, 0x9B992F2E, 0xE60B6F47, 0x0FE3F11D,            0xE54CDA54, 0x1EDAD891, 0xCE6279CF, 0xCD3E7E6F,            0x1618B166, 0xFD2C1D05, 0x848FD2C5, 0xF6FB2299,            0xF523F357, 0xA6327623, 0x93A83531, 0x56CCCD02,            0xACF08162, 0x5A75EBB5, 0x6E163697, 0x88D273CC,            0xDE966292, 0x81B949D0, 0x4C50901B, 0x71C65614,            0xE6C6C7BD, 0x327A140A, 0x45E1D006, 0xC3F27B9A,            0xC9AA53FD, 0x62A80F00, 0xBB25BFE2, 0x35BDD2F6,            0x71126905, 0xB2040222, 0xB6CBCF7C, 0xCD769C2B,            0x53113EC0, 0x1640E3D3, 0x38ABBD60, 0x2547ADF0,            0xBA38209C, 0xF746CE76, 0x77AFA1C5, 0x20756060,            0x85CBFE4E, 0x8AE88DD8, 0x7AAAF9B0, 0x4CF9AA7E,            0x1948C25C, 0x02FB8A8C, 0x01C36AE4, 0xD6EBE1F9,            0x90D4F869, 0xA65CDEA0, 0x3F09252D, 0xC208E69F,            0xB74E6132, 0xCE77E25B, 0x578FDFE3, 0x3AC372E6);    /**     * The number of rounds to do     *     * @var integer     */    protected $_rounds = 16;    /**     * Set the key to be used for en/decryption.     *     * @param string $key  The key to use.     * @return bool     */    public function setKey($key)    {        $key = array_values(unpack('C*', $key));        $keyLen = count($key);        if ($keyLen == 0) {            return false;        }        $keyPos = $keyXor = 0;        for ($i = 0, $iMax = count($this->p); $i < $iMax; ++$i) {            for ($t = 0; $t < 4; $t++) {                $keyXor = ($keyXor << 8) | (($key[$keyPos]) & 0x0ff);                if (++$keyPos == $keyLen) {                    $keyPos = 0;                }            }            $this->p[$i] = $this->p[$i] ^ $keyXor;        }        $encZero = array('L' => 0, 'R' => 0);        for ($i = 0; $i + 1 < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->p[$i] = $encZero['L'];          $this->p[$i + 1] = $encZero['R'];        }        $iMax = count($this->s1);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s1[$i] = $encZero['L'];          $this->s1[$i + 1] = $encZero['R'];        }        $iMax = count($this->s2);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s2[$i] = $encZero['L'];          $this->s2[$i + 1] = $encZero['R'];        }        $iMax = count($this->s3);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s3[$i] = $encZero['L'];          $this->s3[$i + 1] = $encZero['R'];        }        $iMax = count($this->s4);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s4[$i] = $encZero['L'];          $this->s4[$i + 1] = $encZero['R'];        }    }    /**     * Encrypt a block of data.     *     * @param string $block      The data to encrypt.     * @param string $key        The key to use.     *     * @return string  The encrypted output.     */    public function encryptBlock($block, $key = null)    {        if (!is_null($key)) {            $this->setKey($key);        }        list($L, $R) = array_values(unpack('N*', $block));        $parts = $this->_encryptBlock($L, $R);        return pack('NN', $parts['L'], $parts['R']);    }    /**     * Encrypt left and right halves of a block of data.     *     * @param integer $L  Left half of the data.     * @param integer $R  Right half of the data.     *     * @return array  A hash, with keys 'L' and 'R', and the encrypted data as     *                the values.     */    protected function _encryptBlock($L, $R)    {        $L ^= $this->p[0];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[1];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[2];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[3];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[4];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[5];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[6];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[7];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[8];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[9];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[10];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[11];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[12];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[13];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[14];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[15];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[16];        $R ^= $this->p[17];        return array('L' => $R, 'R' => $L);    }    /**     * Decrypt a block of data.     *     * @param string $block  The data to decrypt.     * @param string $key    The key to use.     *     * @return string  The decrypted output.     */    public function decryptBlock($block, $key = null)    {        if (!is_null($key)) {            $this->setKey($key);        }// change for phpMyAdmin        $L = null;        $R = null;        $retarray = array_values(unpack('N*', $block));        if (isset($retarray[0])) {            $L = $retarray[0];        }        if (isset($retarray[1])) {            $R = $retarray[1];        }// end change for phpMyAdmin        $L ^= $this->p[17];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[16];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[15];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[14];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[13];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[12];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[11];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[10];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[9];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[8];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[7];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[6];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[5];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[4];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[3];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[2];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[1];        return pack("NN", $R ^ $this->p[0], $L);    }}// higher-level functions:/** * Encryption using blowfish algorithm * * @param string  original data * @param string  the secret * * @return  string  the encrypted result * * @access  public * */function PMA_blowfish_encrypt($data, $secret){    $pma_cipher = new Horde_Cipher_blowfish;    $encrypt = '';    $mod = strlen($data) % 8;    if ($mod > 0) {        $data .= str_repeat("\0", 8 - $mod);    }    foreach (str_split($data, 8) as $chunk) {        $encrypt .= $pma_cipher->encryptBlock($chunk, $secret);    }    return base64_encode($encrypt);}/** * Decryption using blowfish algorithm * * @param string  encrypted data * @param string  the secret * * @return  string  original data * * @access  public * */function PMA_blowfish_decrypt($encdata, $secret){    $pma_cipher = new Horde_Cipher_blowfish;    $decrypt = '';    $data = base64_decode($encdata);    foreach (str_split($data, 8) as $chunk) {        $decrypt .= $pma_cipher->decryptBlock($chunk, $secret);    }    return trim($decrypt);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Wrappers for Drizzle extension classes * * Drizzle extension exposes libdrizzle functions and requires user to have it in mind while using them. * This wrapper is not complete and hides a lot of original functionality, but allows for easy usage * of the drizzle PHP extension. * * @package PhpMyAdmin-DBI-Drizzle */// TODO: drizzle module segfaults while freeing resources, often. This allows at least for some developmentfunction _drizzle_shutdown_flush() {    flush();}register_shutdown_function('_drizzle_shutdown_flush');function _dlog_argstr($args){    $r = array();    foreach ($args as $arg) {        if (is_object($arg)) {            $r[] = get_class($arg);        } elseif (is_bool($arg)) {            $r[] = $arg ? 'true' : 'false';        } elseif (is_null($arg)) {            $r[] = 'null';        } else {            $r[] = $arg;        }    }    return implode(', ', $r);}function _dlog($end = false){    /*    static $fp = null;    if (!$fp) {        $fp = fopen('./drizzle_log.log', 'a');        flock($fp, LOCK_EX);        fwrite($fp, "\r\n[" . date('H:i:s') . "]\t" . $_SERVER['REQUEST_URI'] . "\r\n");        register_shutdown_function(function() use ($fp) {            fwrite($fp, '[' . date('H:i:s') . "]\tEND\r\n\r\n");        });    }    if ($end) {        fwrite($fp, '[' . date('H:i:s') . "]\tok\r\n");    } else {        $bt = debug_backtrace(true);        $caller = (isset($bt[1]['class']) ? $bt[1]['class'] . '::' : '') . $bt[1]['function'];        if ($bt[1]['function'] == '__call') {            $caller .= '^' . $bt[1]['args'][0];            $args = _dlog_argstr($bt[1]['args'][1]);        } else {            $args = _dlog_argstr($bt[1]['args']);        }        fwrite($fp, '[' . date('H:i:s') . "]\t" . $caller . "\t" . $args . "\r\n");        for ($i = 2; $i <= count($bt)-1; $i++) {            if (!isset($bt[$i])) {                break;            }            $caller = (isset($bt[$i]['class']) ? $bt[$i]['class'] . '::' : '') . $bt[$i]['function'];            $caller .= ' (' . $bt[$i]['file'] . ':' . $bt[$i]['line'] .  ')';            fwrite($fp, str_repeat(' ', 20) . $caller . "\r\n");        }    }    //*/}/** * Wrapper for Drizzle class */class PMA_Drizzle extends Drizzle{    /**     * Fetch mode: result rows contain column names     */    const FETCH_ASSOC = 1;    /**     * Fetch mode: result rows contain only numeric indices     */    const FETCH_NUM = 2;    /**     * Fetch mode: result rows have both column names and numeric indices     */    const FETCH_BOTH = 3;    /**     * Result buffering: entire result set is buffered upon execution     */    const BUFFER_RESULT = 1;    /**     * Result buffering: buffering occurs only on row level     */    const BUFFER_ROW = 2;    /**     * Constructor     */    public function __construct()    {_dlog();        parent::__construct();    }    /**     * Creates a new database conection using TCP     *     * @param $host     * @param $port     * @param $user     * @param $password     * @param $db     * @param $options     * @return PMA_DrizzleCon     */    public function addTcp($host, $port, $user, $password, $db, $options)    {_dlog();        $dcon = parent::addTcp($host, $port, $user, $password, $db, $options);        return $dcon instanceof DrizzleCon            ? new PMA_DrizzleCon($dcon)            : $dcon;    }    /**     * Creates a new connection using unix domain socket     *      * @param $uds     * @param $user     * @param $password     * @param $db     * @param $options     * @return PMA_DrizzleCon     */    public function addUds($uds, $user, $password, $db, $options)    {_dlog();        $dcon = parent::addUds($uds, $user, $password, $db, $options);        return $dcon instanceof DrizzleCon            ? new PMA_DrizzleCon($dcon)            : $dcon;    }}/** * Wrapper around DrizzleCon class * * Its main task is to wrap results with PMA_DrizzleResult class */class PMA_DrizzleCon{    /**     * Instance of DrizzleCon class     * @var DrizzleCon     */    private $dcon;    /**     * Result of the most recent query     * @var PMA_DrizzleResult     */    private $lastResult;    /**     * Constructor     *     * @param DrizzleCon $dcon     */    public function __construct(DrizzleCon $dcon)    {_dlog();        $this->dcon = $dcon;    }    /**     * Executes given query. Opens database connection if not already done.     *     * @param string $query     * @param int    $bufferMode  PMA_Drizzle::BUFFER_RESULT, PMA_Drizzle::BUFFER_ROW     * @param int    $fetchMode   PMA_Drizzle::FETCH_ASSOC, PMA_Drizzle::FETCH_NUM or PMA_Drizzle::FETCH_BOTH     * @return PMA_DrizzleResult     */    public function query($query, $bufferMode = PMA_Drizzle::BUFFER_RESULT, $fetchMode = PMA_Drizzle::FETCH_ASSOC)    {_dlog();        $result = $this->dcon->query($query);        if ($result instanceof DrizzleResult) {    _dlog(true);            $this->lastResult = new PMA_DrizzleResult($result, $bufferMode, $fetchMode);            return $this->lastResult;        }        return $result;    }    /**     * Returns the number of rows affected by last query     *     * @return int|false     */    public function affectedRows()    {        return $this->lastResult            ? $this->lastResult->affectedRows()            : false;    }    /**     * Pass calls of undefined methods to DrizzleCon object     *      * @param $method     * @param $args     * @return mixed     */    public function __call($method, $args)    {_dlog();        return call_user_func_array(array($this->dcon, $method), $args);    }    /**     * Returns original Drizzle connection object     *     * @return DrizzleCon     */    public function getConnectionObject()    {_dlog();        return $this->dcon;    }}/** * Wrapper around DrizzleResult. Allows for reading result rows as an associative array * and hides complexity behind buffering. */class PMA_DrizzleResult{    /**     * Instamce of DrizzleResult class     * @var DrizzleResult     */    private $dresult;    /**     * Fetch mode     * @var int     */    private $fetchMode;    /**     * Buffering mode     * @var int     */    private $bufferMode;    /**     * Cached column data     * @var DrizzleColumn[]     */    private $columns = null;    /**     * Cached column names     * @var string[]     */    private $columnNames = null;    /**     * Constructor     *     * @param DrizzleResult $dresult     * @param int           $bufferMode     * @param int           $fetchMode     */    public function __construct(DrizzleResult $dresult, $bufferMode, $fetchMode)    {_dlog();        $this->dresult = $dresult;        $this->bufferMode = $bufferMode;        $this->fetchMode = $fetchMode;        if ($this->bufferMode == PMA_Drizzle::BUFFER_RESULT) {            $this->dresult->buffer();        }    }    /**     * Sets fetch mode     *     * @param int $fetchMode     */    public function setFetchMode($fetchMode)    {_dlog();        $this->fetchMode = $fetchMode;    }    /**     * Reads information about columns contained in current result set into {@see $columns} and {@see $columnNames} arrays     */    private function _readColumns()    {_dlog();        $this->columns = array();        $this->columnNames = array();        if ($this->bufferMode == PMA_Drizzle::BUFFER_RESULT) {            while (($column = $this->dresult->columnNext()) !== null) {                $this->columns[] = $column;                $this->columnNames[] = $column->name();            }        } else {            while (($column = $this->dresult->columnRead()) !== null) {                $this->columns[] = $column;                $this->columnNames[] = $column->name();            }        }    }    /**     * Returns columns in current result     *     * @return DrizzleColumn[]     */    public function getColumns()    {_dlog();        if (!$this->columns) {            $this->_readColumns();        }        return $this->columns;    }    /**     * Returns number if columns in result     *     * @return int     */    public function numColumns()    {_dlog();        return $this->dresult->columnCount();    }    /**     * Transforms result row to conform to current fetch mode     *     * @param mixed &$row     * @param int   $fetchMode     */    private function _transformResultRow(&$row, $fetchMode)    {        if (!$row) {            return;        }        switch ($fetchMode) {            case PMA_Drizzle::FETCH_ASSOC:                $row = array_combine($this->columnNames, $row);                break;            case PMA_Drizzle::FETCH_BOTH:                $length = count($row);                for ($i = 0; $i < $length; $i++) {                    $row[$this->columnNames[$i]] = $row[$i];                }                break;            default:                break;        }    }    /**     * Fetches next for from this result set     *     * @param int $fetchMode  fetch mode to use, if none given the default one is used     * @return array|null     */    public function fetchRow($fetchMode = null)    {_dlog();        // read column names on first fetch, only buffered results allow for reading it later        if (!$this->columns) {            $this->_readColumns();        }        if ($fetchMode === null) {            $fetchMode = $this->fetchMode;        }        $row = null;        switch ($this->bufferMode) {            case PMA_Drizzle::BUFFER_RESULT:                $row = $this->dresult->rowNext();                break;            case PMA_Drizzle::BUFFER_ROW:                $row = $this->dresult->rowBuffer();                break;        }        $this->_transformResultRow($row, $fetchMode);        return $row;    }    /**     * Adjusts the result pointer to an arbitrary row in buffered result     *     * @param $row_index     * @return bool     */    public function seek($row_index)    {_dlog();        if ($this->bufferMode != PMA_Drizzle::BUFFER_RESULT) {            trigger_error("Can't seek in an unbuffered result set", E_USER_WARNING);            return false;        }        // rowSeek always returns NULL (drizzle extension v.0.5, API v.7)        if ($row_index >= 0 && $row_index < $this->dresult->rowCount()) {            $this->dresult->rowSeek($row_index);            return true;        }        return false;    }    /**     * Returns the number of rows in buffered result set     *     * @return int|false     */    public function numRows()    {_dlog();        if ($this->bufferMode != PMA_Drizzle::BUFFER_RESULT) {            trigger_error("Can't count rows in an unbuffered result set", E_USER_WARNING);            return false;        }        return $this->dresult->rowCount();    }    /**     * Returns the number of rows affected by query     *     * @return int|false     */    public function affectedRows()    {_dlog();        return $this->dresult->affectedRows();    }    /**     * Frees resources taken by this result     */    public function free()    {_dlog();        unset($this->columns);        unset($this->columnNames);        drizzle_result_free($this->dresult);        unset($this->dresult);    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// Display function/** * void PMA_TableHeader([bool $db_is_information_schema = false]) * display table header (<table><thead>...</thead><tbody>) * * @param boolean $db_is_information_schema * @param boolean $replication */function PMA_TableHeader($db_is_information_schema = false, $replication = false){    $cnt = 0; // Let's count the columns...    if ($db_is_information_schema) {        $action_colspan = 3;    } else {        $action_colspan = 6;    }    echo '<table class="data">' . "\n"        .'<thead>' . "\n"        .'<tr><th></th>' . "\n"        .'    <th>' . PMA_SortableTableHeader(__('Table'), 'table') . '</th>' . "\n";    if ($replication) {     echo '    <th>' . "\n"         .'        ' . __('Replication') . "\n"         .'    </th>';    }    echo '    <th colspan="' . $action_colspan . '">' . "\n"        .'        ' . __('Action') . "\n"        .'    </th>'        // larger values are more interesting so default sort order is DESC        .'    <th>' . PMA_SortableTableHeader(__('Rows'), 'records', 'DESC')        .PMA_showHint(PMA_sanitize(__('May be approximate. See [a@./Documentation.html#faq3_11@Documentation]FAQ 3.11[/a]'))) . "\n"        .'    </th>' . "\n";    if (!($GLOBALS['cfg']['PropertiesNumColumns'] > 1)) {        echo '    <th>' . PMA_SortableTableHeader(__('Type'), 'type') . '</th>' . "\n";        $cnt++;        echo '    <th>' . PMA_SortableTableHeader(__('Collation'), 'collation') . '</th>' . "\n";        $cnt++;    }    if ($GLOBALS['is_show_stats']) {        // larger values are more interesting so default sort order is DESC        echo '    <th>' . PMA_SortableTableHeader(__('Size'), 'size', 'DESC') . '</th>' . "\n"        // larger values are more interesting so default sort order is DESC           . '    <th>' . PMA_SortableTableHeader(__('Overhead'), 'overhead', 'DESC') . '</th>' . "\n";        $cnt += 2;    }    echo '</tr>' . "\n";    echo '</thead>' . "\n";    echo '<tbody>' . "\n";    $GLOBALS['colspan_for_structure'] = $cnt + $action_colspan + 3;} // end function PMA_TableHeader()/** * Creates a clickable column header for table information * * @param string  $title title to use for the link * @param string  $sort  corresponds to sortable data name mapped in libraries/db_info.inc.php * @param string  $initial_sort_order * @return string  link to be displayed in the table header */function PMA_SortableTableHeader($title, $sort, $initial_sort_order = 'ASC'){    // Set some defaults    $requested_sort = 'table';    $requested_sort_order = $future_sort_order = $initial_sort_order;        // If the user requested a sort    if (isset($_REQUEST['sort'])) {        $requested_sort = $_REQUEST['sort'];        if (isset($_REQUEST['sort_order'])) {            $requested_sort_order = $_REQUEST['sort_order'];        }    }    $order_img = '';    $order_link_params = array();    $order_link_params['title'] = __('Sort');    // If this column was requested to be sorted.    if ($requested_sort == $sort) {        if ($requested_sort_order == 'ASC') {            $future_sort_order = 'DESC';            // current sort order is ASC            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow', 'title' => ''));            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow hide', 'title' => ''));            // but on mouse over, show the reverse order (DESC)            $order_link_params['onmouseover'] = "$('.sort_arrow').toggle();";            // on mouse out, show current sort order (ASC)            $order_link_params['onmouseout'] = "$('.sort_arrow').toggle();";        } else {            $future_sort_order = 'ASC';            // current sort order is DESC            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow hide', 'title' => ''));            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow', 'title' => ''));            // but on mouse over, show the reverse order (ASC)            $order_link_params['onmouseover'] = "$('.sort_arrow').toggle();";            // on mouse out, show current sort order (DESC)            $order_link_params['onmouseout'] = "$('.sort_arrow').toggle();";        }    }    $_url_params = array(        'db' => $_REQUEST['db'],    );    $url = 'db_structure.php'.PMA_generate_common_url($_url_params);    // We set the position back to 0 every time they sort.    $url .= "&amp;pos=0&amp;sort=$sort&amp;sort_order=$future_sort_order";    return PMA_linkOrButton($url, $title . $order_img, $order_link_params);} // end function PMA_SortableTableHeader()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_ndbcluster extends PMA_StorageEngine{    /**     * @return  array     */    function getVariables()    {        return array(            'ndb_connectstring' => array(            ),         );    }    /**     * @return  string  SQL query LIKE pattern     */    function getVariablesLikePattern()    {        return 'ndb\\_%';    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'ndbcluster';    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$pma_table = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);/** * Runs common work */require './libraries/tbl_common.php';$url_query .= '&amp;goto=view_operations.php&amp;back=view_operations.php';$url_params['goto'] = $url_params['back'] = 'view_operations.php';/** * Gets tables informations */require './libraries/tbl_info.inc.php';$reread_info = false;/** * Updates if required */if (isset($_REQUEST['submitoptions'])) {    $_message = '';    $warning_messages = array();    if (isset($_REQUEST['new_name'])) {        if ($pma_table->rename($_REQUEST['new_name'], null, $is_view = true)) {            $_message .= $pma_table->getLastMessage();            $result = true;            $GLOBALS['table'] = $pma_table->getName();            $reread_info = true;            $reload = true;        } else {            $_message .= $pma_table->getLastError();            $result = false;        }    }}/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';if (isset($result)) {    // set to success by default, because result set could be empty    // (for example, a table rename)    $_type = 'success';    if (empty($_message)) {        $_message = $result ? __('Your SQL query has been executed successfully') : __('Error');        // $result should exist, regardless of $_message        $_type = $result ? 'success' : 'error';    }    if (! empty($warning_messages)) {        $_message = new PMA_Message;        $_message->addMessages($warning_messages);        $_message->isError(true);        unset($warning_messages);    }    PMA_showMessage($_message, $sql_query, $_type, $is_view = true);    unset($_message, $_type);}$url_params['goto'] = 'view_operations.php';$url_params['back'] = 'view_operations.php';/** * Displays the page */?><!-- Table operations --><div class="operations_half_width"><form method="post" action="view_operations.php"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><input type="hidden" name="reload" value="1" /><fieldset>    <legend><?php echo __('Operations'); ?></legend>    <table>    <!-- Change view name -->    <tr><td><?php echo __('Rename view to'); ?></td>        <td><input type="text" size="20" name="new_name" onfocus="this.select()"                value="<?php echo htmlspecialchars($GLOBALS['table']); ?>" />        </td>    </tr>    </table></fieldset><fieldset class="tblFooters">        <input type="submit" name="submitoptions" value="<?php echo __('Go'); ?>" /></fieldset></form></div><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_innodb extends PMA_StorageEngine{    /**     * @return  array     */    function getVariables()    {        return array(            'innodb_data_home_dir' => array(                'title' => __('Data home directory'),                'desc'  => __('The common part of the directory path for all InnoDB data files.'),            ),            'innodb_data_file_path' => array(                'title' => __('Data files'),            ),            'innodb_autoextend_increment' => array(                'title' => __('Autoextend increment'),                'desc'  => __('The increment size for extending the size of an autoextending tablespace when it becomes full.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_buffer_pool_size' => array(                'title' => __('Buffer pool size'),                'desc'  => __('The size of the memory buffer InnoDB uses to cache data and indexes of its tables.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_additional_mem_pool_size' => array(                'title' => 'innodb_additional_mem_pool_size',                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_buffer_pool_awe_mem_mb' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_checksums' => array(            ),            'innodb_commit_concurrency' => array(            ),            'innodb_concurrency_tickets' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_doublewrite' => array(            ),            'innodb_fast_shutdown' => array(            ),            'innodb_file_io_threads' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_file_per_table' => array(            ),            'innodb_flush_log_at_trx_commit' => array(            ),            'innodb_flush_method' => array(            ),            'innodb_force_recovery' => array(            ),            'innodb_lock_wait_timeout' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_locks_unsafe_for_binlog' => array(            ),            'innodb_log_arch_dir' => array(            ),            'innodb_log_archive' => array(            ),            'innodb_log_buffer_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_log_file_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_log_files_in_group' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_log_group_home_dir' => array(            ),            'innodb_max_dirty_pages_pct' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_max_purge_lag' => array(            ),            'innodb_mirrored_log_groups' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_open_files' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_support_xa' => array(            ),            'innodb_sync_spin_loops' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_table_locks' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_BOOLEAN,            ),            'innodb_thread_concurrency' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_thread_sleep_delay' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),         );    }    /**     * @return  string  SQL query LIKE pattern     */    function getVariablesLikePattern()    {        return 'innodb\\_%';    }    /**     * @return  array   detail pages     */    function getInfoPages()    {        if ($this->support < PMA_ENGINE_SUPPORT_YES) {            return array();        }        $pages = array();        $pages['Bufferpool'] = __('Buffer Pool');        $pages['Status'] = __('InnoDB Status');        return $pages;    }    /**     * returns html tables with stats over inno db buffer pool     *     * @return  string  html table with stats     */    function getPageBufferpool()    {        // The following query is only possible because we know        // that we are on MySQL 5 here (checked above)!        // side note: I love MySQL 5 for this. :-)        $sql = '             SHOW STATUS            WHERE Variable_name LIKE \'Innodb\\_buffer\\_pool\\_%\'               OR Variable_name = \'Innodb_page_size\';';        $status = PMA_DBI_fetch_result($sql, 0, 1);        $output = '<table class="data" id="table_innodb_bufferpool_usage">' . "\n"                . '    <caption class="tblHeaders">' . "\n"                . '        ' . __('Buffer Pool Usage') . "\n"                . '    </caption>' . "\n"                . '    <tfoot>' . "\n"                . '        <tr>' . "\n"                . '            <th colspan="2">' . "\n"                . '                ' . __('Total') . "\n"                . '                : ' . PMA_formatNumber(                        $status['Innodb_buffer_pool_pages_total'], 0)                . '&nbsp;' . __('pages')                . ' / '                . join('&nbsp;',                    PMA_formatByteDown($status['Innodb_buffer_pool_pages_total'] * $status['Innodb_page_size'])) . "\n"                . '            </th>' . "\n"                . '        </tr>' . "\n"                . '    </tfoot>' . "\n"                . '    <tbody>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Free pages') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_free'], 0)                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Dirty pages') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_dirty'], 0)                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Pages containing data') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_data'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Pages to be flushed') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_flushed'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Busy pages') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_misc'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>';            // not present at least since MySQL 5.1.40            if (isset($status['Innodb_buffer_pool_pages_latched'])) {                $output .= '        <tr class="even">'                . '            <th>' . __('Latched pages') . '</th>'                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_latched'], 0)                . '</td>'                . '        </tr>';            }            $output .= '    </tbody>' . "\n"                . '</table>' . "\n\n"                . '<table class="data" id="table_innodb_bufferpool_activity">' . "\n"                . '    <caption class="tblHeaders">' . "\n"                . '        ' . __('Buffer Pool Activity') . "\n"                . '    </caption>' . "\n"                . '    <tbody>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Read requests') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_read_requests'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Write requests') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_write_requests'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Read misses') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_reads'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Write waits') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_wait_free'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Read misses in %') . '</th>' . "\n"                . '            <td class="value">'                . ($status['Innodb_buffer_pool_read_requests'] == 0                    ? '---'                    : htmlspecialchars(PMA_formatNumber($status['Innodb_buffer_pool_reads'] * 100 / $status['Innodb_buffer_pool_read_requests'], 3, 2)) . ' %') . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Write waits in %') . '</th>' . "\n"                . '            <td class="value">'                . ($status['Innodb_buffer_pool_write_requests'] == 0                    ? '---'                    : htmlspecialchars(PMA_formatNumber($status['Innodb_buffer_pool_wait_free'] * 100 / $status['Innodb_buffer_pool_write_requests'], 3, 2)) . ' %') . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '    </tbody>' . "\n"                . '</table>' . "\n";        return $output;    }    /**     * returns InnoDB status     *     * @return  string  result of SHOW INNODB STATUS inside pre tags     */    function getPageStatus()    {        return '<pre id="pre_innodb_status">' . "\n"            . htmlspecialchars(PMA_DBI_fetch_value('SHOW INNODB STATUS;', 0, 'Status')) . "\n"            . '</pre>' . "\n";    }    /**     * returns content for page $id     *     * @param   string  $id page id     * @return  string  html output     */    function getPage($id)    {        if (! array_key_exists($id, $this->getInfoPages())) {            return false;        }        $id = 'getPage' . $id;        return $this->$id();    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'innodb';    }    /**     *       * Gets the InnoDB plugin version number      * http://www.innodb.com/products/innodb_plugin      * (do not confuse this with phpMyAdmin's storage engine plugins!)     *     * @return string the version number, or empty if not running as a plugin      */    function getInnodbPluginVersion()    {        return PMA_DBI_fetch_value('SELECT @@innodb_version;');    }    /**     *       * Gets the InnoDB file format      * (works only for the InnoDB plugin)     * http://www.innodb.com/products/innodb_plugin      * (do not confuse this with phpMyAdmin's storage engine plugins!)     *     * @return string the InnoDB file format      */    function getInnodbFileFormat()    {        return PMA_DBI_fetch_value("SHOW GLOBAL VARIABLES LIKE 'innodb_file_format';", 0, 1);    }    /**     *       * Verifies if this server supports the innodb_file_per_table feature      * (works only for the InnoDB plugin)     * http://www.innodb.com/products/innodb_plugin      * (do not confuse this with phpMyAdmin's storage engine plugins!)     *     * @return boolean whether this feature is supported or not      */    function supportsFilePerTable()    {        $innodb_file_per_table = PMA_DBI_fetch_value("SHOW GLOBAL VARIABLES LIKE 'innodb_file_per_table';", 0, 1);        if ($innodb_file_per_table == 'ON') {            return true;        } else {            return false;        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {    die(__("GLOBALS overwrite attempt"));}/** * Sends http headers */$GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';/* Prevent against ClickJacking by allowing frames only from same origin */if (!$GLOBALS['cfg']['AllowThirdPartyFraming']) {    header('X-Frame-Options: SAMEORIGIN');    header('X-Content-Security-Policy: allow \'self\'; options inline-script eval-script; frame-ancestors \'self\'; img-src \'self\' data:; script-src \'self\' www.phpmyadmin.net');}PMA_no_cache_header();if (!defined('IS_TRANSFORMATION_WRAPPER')) {    // Define the charset to be used    header('Content-Type: text/html; charset=utf-8');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */define('IS_TRANSFORMATION_WRAPPER', true);/** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';require_once './libraries/transformations.lib.php'; // Transformations$cfgRelation = PMA_getRelationsParam();/** * Ensures db and table are valid, else moves to the "parent" script */require_once './libraries/db_table_exists.lib.php';/** * Get the list of the fields of the current table */PMA_DBI_select_db($db);if (isset($where_clause)) {    $result      = PMA_DBI_query('SELECT * FROM ' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';', null, PMA_DBI_QUERY_STORE);    $row         = PMA_DBI_fetch_assoc($result);} else {    $result      = PMA_DBI_query('SELECT * FROM ' . PMA_backquote($table) . ' LIMIT 1;', null, PMA_DBI_QUERY_STORE);    $row         = PMA_DBI_fetch_assoc($result);}// No row returnedif (!$row) {    exit;} // end if (no record returned)$default_ct = 'application/octet-stream';if ($cfgRelation['commwork'] && $cfgRelation['mimework']) {    $mime_map = PMA_getMime($db, $table);    $mime_options = PMA_transformation_getOptions((isset($mime_map[$transform_key]['transformation_options']) ? $mime_map[$transform_key]['transformation_options'] : ''));    foreach ($mime_options AS $key => $option) {        if (substr($option, 0, 10) == '; charset=') {            $mime_options['charset'] = $option;        }    }}// For re-usability, moved http-headers and stylesheets// to a seperate file. It can now be included by libraries/header.inc.php,// querywindow.php.require_once './libraries/header_http.inc.php';// [MIME]if (isset($ct) && !empty($ct)) {    $mime_type = $ct;} else {    $mime_type = (isset($mime_map[$transform_key]['mimetype']) ? str_replace('_', '/', $mime_map[$transform_key]['mimetype']) : $default_ct) . (isset($mime_options['charset']) ? $mime_options['charset'] : '');}PMA_download_header($cn, $mime_type);if (! isset($resize)) {    echo $row[$transform_key];} else {    // if image_*__inline.inc.php finds that we can resize,    // it sets $resize to jpeg or png    $srcImage = imagecreatefromstring($row[$transform_key]);    $srcWidth = ImageSX($srcImage);    $srcHeight = ImageSY($srcImage);    // Check to see if the width > height or if width < height    // if so adjust accordingly to make sure the image    // stays smaller then the $newWidth and $newHeight    $ratioWidth = $srcWidth/$newWidth;    $ratioHeight = $srcHeight/$newHeight;    if ($ratioWidth < $ratioHeight) {        $destWidth = $srcWidth/$ratioHeight;        $destHeight = $newHeight;    } else {        $destWidth = $newWidth;        $destHeight = $srcHeight/$ratioWidth;    }    if ($resize) {        $destImage = ImageCreateTrueColor($destWidth, $destHeight);    }//    ImageCopyResized($destImage, $srcImage, 0, 0, 0, 0, $destWidth, $destHeight, $srcWidth, $srcHeight);// better quality but slower:    ImageCopyResampled($destImage, $srcImage, 0, 0, 0, 0, $destWidth, $destHeight, $srcWidth, $srcHeight);    if ($resize == 'jpeg') {        ImageJPEG($destImage, '', 75);    }    if ($resize == 'png') {        ImagePNG($destImage);    }    ImageDestroy($srcImage);    ImageDestroy($destImage);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * returns code for selecting databases * * @return String HTML code */function PMA_replication_db_multibox(){    $multi_values = '';    $multi_values .= '<select name="db_select[]" size="6" multiple="multiple" id="db_select">';    foreach ($GLOBALS['pma']->databases as $current_db) {        if (PMA_is_system_schema($current_db)) {            continue;        }        if (! empty($selectall) || (isset($tmp_select) && strpos(' ' . $tmp_select, '|' . $current_db . '|'))) {            $is_selected = ' selected="selected"';        } else {            $is_selected = '';        }        $current_db = htmlspecialchars($current_db);        $multi_values .= '                <option value="' . $current_db . '" ' . $is_selected . '>' . $current_db . '</option>';    } // end while    $multi_values .= '</select>';    $multi_values .= '<br /><a href="#" id="db_reset_href">' . __('Uncheck All') . '</a>';    return $multi_values;}/** * prints out code for changing master * * @param String $submitname - submit button name */function PMA_replication_gui_changemaster($submitname){    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();    echo '<form method="post" action="server_replication.php">';    echo PMA_generate_common_hidden_inputs('', '');    echo ' <fieldset id="fieldset_add_user_login">';    echo '  <legend>' . __('Slave configuration') . ' - ' . __('Change or reconfigure master server') . '</legend>';    echo __('Make sure, you have unique server-id in your configuration file (my.cnf). If not, please add the following line into [mysqld] section:') . '<br />';    echo '<pre>server-id=' . time() . '</pre>';    echo '  <div class="item">';    echo '    <label for="text_username">' . __('User name') . ':</label>';    echo '    <input type="text" name="username" id="text_username" maxlength="'. $username_length . '" title="' . __('User name') . '" />';    echo '  </div>';    echo '  <div class="item">';    echo '    <label for="text_pma_pw">' . __('Password') .' :</label>';    echo '    <input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" />';    echo '  </div>';    echo '  <div class="item">';    echo '    <label for="text_hostname">' . __('Host') . ' :</label>';    echo '    <input type="text" id="text_hostname" name="hostname" maxlength="' . $hostname_length . '" value="" />';    echo '  </div>';    echo '  <div class="item">';    echo '     <label for="text_port">' . __('Port') . ':</label>';    echo '     <input type="text" id="text_port" name="port" maxlength="6" value="3306"  />';    echo '  </div>';    echo ' </fieldset>';    echo ' <fieldset id="fieldset_user_privtable_footer" class="tblFooters">';    echo '    <input type="hidden" name="sr_take_action" value="true" />';    echo '     <input type="submit" name="' . $submitname . '" id="confslave_submit" value="' . __('Go') . '" />';    echo ' </fieldset>';    echo '</form>';}/** * This function prints out table with replication status. * * @param string  $type   either master or slave * @param boolean $hidden if true, then default style is set to hidden, default value false * @param boolen  $title  if true, then title is displayed, default true */function PMA_replication_print_status_table($type, $hidden = false, $title = true){    global ${"{$type}_variables"};    global ${"{$type}_variables_alerts"};    global ${"{$type}_variables_oks"};    global ${"server_{$type}_replication"};    global ${"strReplicationStatus_{$type}"};    // TODO check the Masters server id?    // seems to default to '1' when queried via SHOW VARIABLES , but resulted in error on the master when slave connects    // [ERROR] Error reading packet from server: Misconfigured master - server id was not set ( server_errno=1236)    // [ERROR] Got fatal error 1236: 'Misconfigured master - server id was not set' from master when reading data from binary log    //    //$server_id = PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'server_id'", 0, 1);    echo '<div id="replication_' . $type . '_section" style="' . ($hidden ? 'display: none;' : '') . '"> ';    if ($title) {        if ($type == 'master') {            echo '<h4><a name="replication_' . $type . '"></a>' . __('Master status') . '</h4>';        } else {            echo '<h4><a name="replication_' . $type . '"></a>' . __('Slave status') . '</h4>';        }    } else {        echo '<br />';    }    echo '   <table id="server' . $type . 'replicationsummary" class="data"> ';    echo '   <thead>';    echo '    <tr>';    echo '     <th>' . __('Variable') . '</th>';    echo '        <th>' . __('Value') . '</th>';    echo '    </tr>';    echo '   </thead>';    echo '   <tbody>';    $odd_row = true;    foreach (${"{$type}_variables"} as $variable) {        echo '   <tr class="' . ($odd_row ? 'odd' : 'even') . '">';        echo '     <td class="name">';        echo        $variable;        echo '     </td>';        echo '     <td class="value">';        // TODO change to regexp or something, to allow for negative match        if (isset(${"{$type}_variables_alerts"}[$variable])            && ${"{$type}_variables_alerts"}[$variable] == ${"server_{$type}_replication"}[0][$variable]        ) {            echo '<span class="attention">';        } elseif (isset(${"{$type}_variables_oks"}[$variable])            && ${"{$type}_variables_oks"}[$variable] == ${"server_{$type}_replication"}[0][$variable]        ) {            echo '<span class="allfine">';        } else {            echo '<span>';        }        echo ${"server_{$type}_replication"}[0][$variable];        echo '</span>';        echo '  </td>';        echo ' </tr>';        $odd_row = ! $odd_row;    }    echo '   </tbody>';    echo ' </table>';    echo ' <br />';    echo '</div>';}/** * Prints table with slave users connected to this master * * @param boolean $hidden - if true, then default style is set to hidden, default value false */function PMA_replication_print_slaves_table($hidden = false){    // Fetch data    $data = PMA_DBI_fetch_result('SHOW SLAVE HOSTS', null, null);    echo '  <br />';    echo '  <div id="replication_slaves_section" style="' . ($hidden ? 'display: none;' : '') . '"> ';    echo '    <table class="data">';    echo '    <thead>';    echo '      <tr>';    echo '        <th>' . __('Server ID') . '</th>';    echo '        <th>' . __('Host') . '</th>';    echo '      </tr>';    echo '    </thead>';    echo '    <tbody>';    $odd_row = true;    foreach ($data as $slave) {        echo '    <tr class="' . ($odd_row ? 'odd' : 'even') . '">';        echo '      <td class="value">' . $slave['Server_id'] . '</td>';        echo '      <td class="value">' . $slave['Host'] . '</td>';        echo '    </tr>';        $odd_row = ! $odd_row;    }    echo '    </tbody>';    echo '    </table>';    echo '    <br />';    PMA_Message::notice(__('Only slaves started with the --report-host=host_name option are visible in this list.'))->display();    echo '    <br />';    echo '  </div>';}/** * get the correct username and hostname lengths for this MySQL server * * @return  array   username length, hostname length */function PMA_replication_get_username_hostname_length(){    $fields_info = PMA_DBI_get_columns('mysql', 'user');    $username_length = 16;    $hostname_length = 41;    foreach ($fields_info as $val) {        if ($val['Field'] == 'User') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $username_length = $v;            }        } elseif ($val['Field'] == 'Host') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $hostname_length = $v;            }        }    }    return array($username_length, $hostname_length);}/** * Print code to add a replication slave user to the master */function PMA_replication_gui_master_addslaveuser(){    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();    if (isset($GLOBALS['username']) && strlen($GLOBALS['username']) === 0) {        $GLOBALS['pred_username'] = 'any';    }    echo '<div id="master_addslaveuser_gui">';    echo '<form autocomplete="off" method="post" action="server_privileges.php" onsubmit="return checkAddUser(this);">';    echo PMA_generate_common_hidden_inputs('', '');    echo '<fieldset id="fieldset_add_user_login">'        . '<legend>'.__('Add slave replication user').'</legend>'    . '<input type="hidden" name="grant_count" value="25" />'    . '<input type="hidden" name="createdb" id="createdb_0" value="0" />'        . '<input id="checkbox_Repl_slave_priv" type="hidden" title="Needed for the replication slaves." value="Y" name="Repl_slave_priv"/>'        . '<input id="checkbox_Repl_client_priv" type="hidden" title="Needed for the replication slaves." value="Y" name="Repl_client_priv"/>'    . ''        . '<input type="hidden" name="sr_take_action" value="true" />'        . '<div class="item">'        . '<label for="select_pred_username">'        . '    ' . __('User name') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_username" id="select_pred_username" title="' . __('User name') . '"'        . '        onchange="if (this.value == \'any\') { username.value = \'\'; } else if (this.value == \'userdefined\') { username.focus(); username.select(); }">'        . '        <option value="any"' . ((isset($GLOBALS['pred_username']) && $GLOBALS['pred_username'] == 'any') ? ' selected="selected"' : '') . '>' . __('Any user') . '</option>'        . '        <option value="userdefined"' . ((! isset($GLOBALS['pred_username']) || $GLOBALS['pred_username'] == 'userdefined') ? ' selected="selected"' : '') . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="text" name="username" maxlength="'        . $username_length . '" title="' . __('User name') . '"'        . (empty($GLOBALS['username'])        ? ''        : ' value="' . (isset($GLOBALS['new_username'])        ? $GLOBALS['new_username']        : $GLOBALS['username']) . '"')        . ' onchange="pred_username.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="select_pred_hostname">'        . '    ' . __('Host') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_hostname" id="select_pred_hostname" title="' . __('Host') . '"';    $_current_user = PMA_DBI_fetch_value('SELECT USER();');    if (! empty($_current_user)) {        $thishost = str_replace("'", '', substr($_current_user, (strrpos($_current_user, '@') + 1)));        if ($thishost == 'localhost' || $thishost == '127.0.0.1') {            unset($thishost);        }    }    echo '    onchange="if (this.value == \'any\') { hostname.value = \'%\'; } else if (this.value == \'localhost\') { hostname.value = \'localhost\'; } '        . (empty($thishost) ? '' : 'else if (this.value == \'thishost\') { hostname.value = \'' . addslashes(htmlspecialchars($thishost)) . '\'; } ')        . 'else if (this.value == \'hosttable\') { hostname.value = \'\'; } else if (this.value == \'userdefined\') { hostname.focus(); hostname.select(); }">' . "\n";    unset($_current_user);    // when we start editing a user, $GLOBALS['pred_hostname'] is not defined    if (! isset($GLOBALS['pred_hostname']) && isset($GLOBALS['hostname'])) {        switch (strtolower($GLOBALS['hostname'])) {        case 'localhost':        case '127.0.0.1':            $GLOBALS['pred_hostname'] = 'localhost';            break;        case '%':            $GLOBALS['pred_hostname'] = 'any';            break;        default:            $GLOBALS['pred_hostname'] = 'userdefined';            break;        }    }    echo '        <option value="any"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'any')        ? ' selected="selected"' : '') . '>' . __('Any host')        . '</option>'        . '        <option value="localhost"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'localhost')        ? ' selected="selected"' : '') . '>' . __('Local')        . '</option>';    if (!empty($thishost)) {        echo '        <option value="thishost"'            . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'thishost')            ? ' selected="selected"' : '') . '>' . __('This Host')            . '</option>';    }    unset($thishost);    echo '        <option value="hosttable"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'hosttable')        ? ' selected="selected"' : '') . '>' . __('Use Host Table')        . '</option>'        . '        <option value="userdefined"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'userdefined')        ? ' selected="selected"' : '')        . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="text" name="hostname" maxlength="'        . $hostname_length . '" value="'        . (isset($GLOBALS['hostname']) ? $GLOBALS['hostname'] : '')        . '" title="' . __('Host')        . '" onchange="pred_hostname.value = \'userdefined\';" />'        . PMA_showHint(__('When Host table is used, this field is ignored and values stored in Host table are used instead.'))        . '</div>'        . '<div class="item">'        . '<label for="select_pred_password">'        . '    ' . __('Password') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_password" id="select_pred_password" title="'        . __('Password') . '"'        . '            onchange="if (this.value == \'none\') { pma_pw.value = \'\'; pma_pw2.value = \'\'; } else if (this.value == \'userdefined\') { pma_pw.focus(); pma_pw.select(); }">'        . '        <option value="none"';    if (isset($GLOBALS['username']) && $mode != 'change') {        echo '  selected="selected"';    }    echo '>' . __('No Password') . '</option>'        . '        <option value="userdefined"' . (isset($GLOBALS['username']) ? '' : ' selected="selected"') . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" onchange="pred_password.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="text_pma_pw2">'        . '    ' . __('Re-type') . ':'        . '</label>'        . '<span class="options">&nbsp;</span>'        . '<input type="password" name="pma_pw2" id="text_pma_pw2" title="' . __('Re-type') . '" onchange="pred_password.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="button_generate_password">'        . '    ' . __('Generate Password') . ':'        . '</label>'        . '<span class="options">'        . '    <input type="button" id="button_generate_password" value="' . __('Generate') . '" onclick="suggestPassword(this.form)" />'        . '</span>'        . '<input type="text" name="generated_pw" id="generated_pw" />'        . '</div>'        . '</fieldset>';    echo '<fieldset id="fieldset_user_privtable_footer" class="tblFooters">'        . '    <input type="submit" name="adduser_submit" id="adduser_submit" value="' . __('Go') . '" />'        . '</fieldset>';    echo '</form>';    echo '</div>';}?>
<?php/** * @package Swekey *//** * Checks Swekey authentication. */function Swekey_auth_check(){    global $cfg;    $confFile = $cfg['Server']['auth_swekey_config'];    if (! isset($_SESSION['SWEKEY'])) {        $_SESSION['SWEKEY'] = array();    }    $_SESSION['SWEKEY']['ENABLED'] = (! empty($confFile) && file_exists($confFile));    // Load the swekey.conf file the first time    if ($_SESSION['SWEKEY']['ENABLED'] && empty($_SESSION['SWEKEY']['CONF_LOADED'])) {        $_SESSION['SWEKEY']['CONF_LOADED'] = true;        $_SESSION['SWEKEY']['VALID_SWEKEYS'] = array();        $valid_swekeys = explode("\n", @file_get_contents($confFile));        foreach ($valid_swekeys as $line) {            if (preg_match("/^[0-9A-F]{32}:.+$/", $line) != false) {                $items = explode(":", $line);                if (count($items) == 2)                    $_SESSION['SWEKEY']['VALID_SWEKEYS'][$items[0]] = trim($items[1]);            } elseif (preg_match("/^[A-Z_]+=.*$/", $line) != false) {                $items = explode("=", $line);                $_SESSION['SWEKEY']['CONF_'.trim($items[0])] = trim($items[1]);            }        }        // Set default values for settings        if (! isset($_SESSION['SWEKEY']['CONF_SERVER_CHECK']))            $_SESSION['SWEKEY']['CONF_SERVER_CHECK'] = "";        if (! isset($_SESSION['SWEKEY']['CONF_SERVER_RNDTOKEN']))            $_SESSION['SWEKEY']['CONF_SERVER_RNDTOKEN'] = "";        if (! isset($_SESSION['SWEKEY']['CONF_SERVER_STATUS']))             $_SESSION['SWEKEY']['CONF_SERVER_STATUS'] = "";        if (! isset($_SESSION['SWEKEY']['CONF_CA_FILE']))            $_SESSION['SWEKEY']['CONF_CA_FILE'] = "";        if (! isset($_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE']))            $_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE'] = true;        if (! isset($_SESSION['SWEKEY']['CONF_DEBUG']))               $_SESSION['SWEKEY']['CONF_DEBUG'] = false;     }    // check if a web key has been authenticated    if ($_SESSION['SWEKEY']['ENABLED']) {        if (empty($_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY']))           return false;    }    return true;}/** * Handle Swekey authentication error. */function Swekey_auth_error(){    if (! isset($_SESSION['SWEKEY']))        return null;    if (! $_SESSION['SWEKEY']['ENABLED'])        return null;    include_once './libraries/auth/swekey/authentication.inc.php';    ?>    <script>    function Swekey_GetValidKey()    {        var valids = "<?php            foreach ($_SESSION['SWEKEY']['VALID_SWEKEYS'] as $key => $value)                echo $key.',';        ?>";        var connected_keys = Swekey_ListKeyIds().split(",");         for (i in connected_keys)               if (connected_keys[i] != null && connected_keys[i].length == 32)                if (valids.indexOf(connected_keys[i]) >= 0)                   return connected_keys[i];        if (connected_keys.length > 0)               if (connected_keys[0].length == 32)                  return "unknown_key_" + connected_keys[0];        return "none";    }    var key = Swekey_GetValidKey();    function timedCheck()    {        if (key != Swekey_GetValidKey())        {            window.location.search = "?swekey_reset";        }        else            setTimeout("timedCheck()",1000);    }    setTimeout("timedCheck()",1000);    </script>     <?php    if (! empty($_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY']))        return null;    if (count($_SESSION['SWEKEY']['VALID_SWEKEYS']) == 0)        return sprintf(__('File %s does not contain any key id'), $GLOBALS['cfg']['Server']['auth_swekey_config']);    include_once "./libraries/auth/swekey/swekey.php";    Swekey_SetCheckServer($_SESSION['SWEKEY']['CONF_SERVER_CHECK']);    Swekey_SetRndTokenServer($_SESSION['SWEKEY']['CONF_SERVER_RNDTOKEN']);    Swekey_SetStatusServer($_SESSION['SWEKEY']['CONF_SERVER_STATUS']);    Swekey_EnableTokenCache($_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE']);    $caFile = $_SESSION['SWEKEY']['CONF_CA_FILE'];    if (empty($caFile)) {        $caFile = __FILE__;        $pos = strrpos($caFile, '/');        if ($pos === false)            $pos = strrpos($caFile, '\\'); // windows        $caFile = substr($caFile, 0, $pos + 1).'musbe-ca.crt';//        echo "\n<!-- $caFile -->\n";//        if (file_exists($caFile))//            echo "<!-- exists -->\n";    }    if (file_exists($caFile)) {        Swekey_SetCAFile($caFile);    } elseif (! empty($caFile) && (substr($_SESSION['SWEKEY']['CONF_SERVER_CHECK'], 0, 8) == "https://")) {        return "Internal Error: CA File $caFile not found";    }    $result = null;    $swekey_id = $_GET['swekey_id'];    $swekey_otp = $_GET['swekey_otp'];    if (isset($swekey_id)) {        unset($_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY']);        if (! isset($_SESSION['SWEKEY']['RND_TOKEN'])) {            unset($swekey_id);        } else {            if (strlen($swekey_id) == 32) {                $res = Swekey_CheckOtp($swekey_id, $_SESSION['SWEKEY']['RND_TOKEN'], $swekey_otp);                unset($_SESSION['SWEKEY']['RND_TOKEN']);                if (! $res) {                    $result = __('Hardware authentication failed') . ' (' . Swekey_GetLastError() . ')';                } else {                    $_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY'] = $swekey_id;                    $_SESSION['SWEKEY']['FORCE_USER'] = $_SESSION['SWEKEY']['VALID_SWEKEYS'][$swekey_id];                    return null;                }            } else {                $result = __('No valid authentication key plugged');                if ($_SESSION['SWEKEY']['CONF_DEBUG']) {                    $result .= "<br>" . htmlspecialchars($swekey_id);                }                unset($_SESSION['SWEKEY']['CONF_LOADED']); // reload the conf file            }        }    } else {        unset($_SESSION['SWEKEY']);    }    $_SESSION['SWEKEY']['RND_TOKEN'] = Swekey_GetFastRndToken();    if (strlen($_SESSION['SWEKEY']['RND_TOKEN']) != 64) {        $result = __('Hardware authentication failed') . ' (' . Swekey_GetLastError() . ')';        unset($_SESSION['SWEKEY']['CONF_LOADED']); // reload the conf file    }    if (! isset($swekey_id)) {        ?>        <script>    if (key.length != 32) {        window.location.search="?swekey_id=" + key + "&token=<?php echo $_SESSION[' PMA_token ']; ?>";    } else {        var url = "" + window.location;        if (url.indexOf("?") > 0)            url = url.substr(0, url.indexOf("?"));        Swekey_SetUnplugUrl(key, "pma_login", url + "?session_to_unset=<?php echo session_id();?>&token=<?php echo $_SESSION[' PMA_token ']; ?>");        var otp = Swekey_GetOtp(key, <?php echo '"'.$_SESSION['SWEKEY']['RND_TOKEN'].'"';?>);        window.location.search="?swekey_id=" + key + "&swekey_otp=" + otp + "&token=<?php echo $_SESSION[' PMA_token ']; ?>";    }        </script>        <?php        return __('Authenticating...');    }    return $result;}/** * Perform login using Swekey. */function Swekey_login($input_name, $input_go){    $swekeyErr = Swekey_auth_error();    if ($swekeyErr != null) {        PMA_Message::error($swekeyErr)->display();        if ($GLOBALS['error_handler']->hasDisplayErrors()) {            echo '<div>';            $GLOBALS['error_handler']->dispErrors();            echo '</div>';        }    }    if (isset($_SESSION['SWEKEY']) && $_SESSION['SWEKEY']['ENABLED']) {        echo '<script type="text/javascript">';        if (empty($_SESSION['SWEKEY']['FORCE_USER'])) {            echo 'var user = null;';        } else {           echo 'var user = "'.$_SESSION['SWEKEY']['FORCE_USER'].'";';        }        ?>            function open_swekey_site()            {                window.open("<?php echo PMA_linkURL('http://phpmyadmin.net/auth_key'); ?>");            }            var input_username = document.getElementById("<?php echo $input_name; ?>");            var input_go = document.getElementById("<?php echo $input_go; ?>");            var swekey_status = document.createElement('img');            swekey_status.setAttribute('onclick', 'open_swekey_site()');            swekey_status.setAttribute('style', 'width:8px; height:16px; border:0px; vspace:0px; hspace:0px; frameborder:no');            if (user == null)            {                swekey_status.setAttribute('src', 'http://artwork.swekey.com/unplugged-8x16.png');                //swekey_status.setAttribute('title', 'No swekey plugged');                input_go.disabled = true;            }            else            {                swekey_status.setAttribute('src', 'http://artwork.swekey.com/plugged-8x16.png');                //swekey_status.setAttribute('title', 'swekey plugged');                input_username.value = user;            }             input_username.readOnly = true;            if (input_username.nextSibling == null)                input_username.parentNode.appendChild(swekey_status);            else                input_username.parentNode.insertBefore(swekey_status, input_username.nextSibling);        <?php        echo '</script>';    }}if (!empty($_GET['session_to_unset'])) {    session_write_close();    session_id($_GET['session_to_unset']);    session_start();    $_SESSION = array();    session_write_close();    session_destroy();    exit;}if (isset($_GET['swekey_reset'])) {    unset($_SESSION['SWEKEY']);}?>
<?phprequire_once './libraries/common.inc.php';if (! isset($_REQUEST['get_gis_editor']) && ! isset($_REQUEST['generate'])) {    include_once './libraries/header_http.inc.php';    include_once './libraries/header_meta_style.inc.php';}require_once './libraries/gis/pma_gis_factory.php';require_once './libraries/gis_visualization.lib.php';// Get data if any posted$gis_data = array();if (PMA_isValid($_REQUEST['gis_data'], 'array')) {    $gis_data = $_REQUEST['gis_data'];}$gis_types = array(    'POINT',    'MULTIPOINT',    'LINESTRING',    'MULTILINESTRING',    'POLYGON',    'MULTIPOLYGON',    'GEOMETRYCOLLECTION');// Extract type from the initial call and make sure that it's a valid one.// Extract from field's values if availbale, if not use the column type passed.if (! isset($gis_data['gis_type'])) {    if (isset($_REQUEST['type']) && $_REQUEST['type'] != '') {        $gis_data['gis_type'] = strtoupper($_REQUEST['type']);    }    if (isset($_REQUEST['value']) && trim($_REQUEST['value']) != '') {        $start = (substr($_REQUEST['value'], 0, 1) == "'") ? 1 : 0;        $gis_data['gis_type'] = substr($_REQUEST['value'], $start, strpos($_REQUEST['value'], "(") - $start);    }    if ((! isset($gis_data['gis_type'])) || (! in_array($gis_data['gis_type'], $gis_types))) {        $gis_data['gis_type'] = $gis_types[0];    }}$geom_type = $gis_data['gis_type'];// Generate parameters from value passed.$gis_obj = PMA_GIS_Factory::factory($geom_type);if (isset($_REQUEST['value'])) {    $gis_data = array_merge($gis_data, $gis_obj->generateParams($_REQUEST['value']));}// Generate Well Known Text$srid = (isset($gis_data['srid']) && $gis_data['srid'] != '') ? htmlspecialchars($gis_data['srid']) : 0;$wkt = $gis_obj->generateWkt($gis_data, 0);$wkt_with_zero = $gis_obj->generateWkt($gis_data, 0, '0');$result = "'" . $wkt . "'," . $srid;// Generate PNG or SVG based visualization$format = (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER <= 8) ? 'png' : 'svg';$visualizationSettings = array('width' => 450, 'height' => 300, 'spatialColumn' => 'wkt');$data = array(array('wkt' => $wkt_with_zero, 'srid' => $srid));$visualization = PMA_GIS_visualizationResults($data, $visualizationSettings, $format);$open_layers = PMA_GIS_visualizationResults($data, $visualizationSettings, 'ol');// If the call is to update the WKT and visualization make an AJAX responseif (isset($_REQUEST['generate']) && $_REQUEST['generate'] == true) {    $extra_data = array(        'result'        => $result,        'visualization' => $visualization,        'openLayers'    => $open_layers,    );    PMA_ajaxResponse(null, true, $extra_data);}// If the call is to get the whole content, start buffering, skipping </head> and <body> tagsif (isset($_REQUEST['get_gis_editor']) && $_REQUEST['get_gis_editor'] == true) {    ob_start();} else {?></head><body><?php}?>    <form id="gis_data_editor_form" action="gis_data_editor.php" method="post">    <input type="hidden" id="pmaThemeImage" value="<?php echo($GLOBALS['pmaThemeImage']); ?>" />    <div id="gis_data_editor">        <h3><?php printf(__('Value for the column "%s"'), htmlspecialchars($_REQUEST['field'])); ?></h3><?php   echo('<input type="hidden" name="field" value="' . htmlspecialchars($_REQUEST['field']) . '" />');        // The input field to which the final result should be added and corresponding null checkbox        if (isset($_REQUEST['input_name'])) {            echo('<input type="hidden" name="input_name" value="' . htmlspecialchars($_REQUEST['input_name']) . '" />');        }        echo PMA_generate_common_hidden_inputs();?>        <!-- Visualization section -->        <div id="placeholder" style="width:450px;height:300px;<?php       if ($srid != 0) {                echo('display:none;');            }?>      "><?php       echo ($visualization);?>      </div>        <div id="openlayersmap" style="width:450px;height:300px;<?php       if ($srid == 0) {                echo('display:none;');            }?>      ">        </div>        <div class="choice" style="float:right;clear:right;">            <input type="checkbox" id="choice" value="useBaseLayer"<?php       if ($srid != 0) {                echo(' checked="checked"');            }?>          />            <label for="choice"><?php echo __("Use OpenStreetMaps as Base Layer"); ?></label>        </div>        <script language="javascript" type="text/javascript">            <?php echo($open_layers); ?>        </script>        <!-- End of visualization section -->        <!-- Header section - Inclueds GIS type selector and input field for SRID -->        <div id="gis_data_header">            <select name="gis_data[gis_type]" class="gis_type"><?php                foreach ($gis_types as $gis_type) {                    echo('<option value="' . $gis_type . '"');                    if ($geom_type == $gis_type) {                        echo(' selected="selected"');                    }                    echo('>' . $gis_type . '</option>');                }?>            </select>            <input type="submit" name="gis_data[go]" class="go" value="<?php echo __("Go")?>" />            <label for="srid"><?php echo __("SRID"); ?>:&nbsp;</label>            <input name="gis_data[srid]" type="text" value="<?php echo($srid); ?>" />        </div>        <!-- End of header section -->        <!-- Data section -->        <div id="gis_data"><?php   $geom_count = 1;        if ($geom_type == 'GEOMETRYCOLLECTION') {            $geom_count = (isset($gis_data[$geom_type]['geom_count'])) ? $gis_data[$geom_type]['geom_count'] : 1;            if (isset($gis_data[$geom_type]['add_geom'])) {                $geom_count++;            }            echo('<input type="hidden" name="gis_data[GEOMETRYCOLLECTION][geom_count]" value="' . $geom_count . '">');        }        for ($a = 0; $a < $geom_count; $a++) {            if ($geom_type == 'GEOMETRYCOLLECTION') {                echo('<br/><br/>'); echo __("Geometry"); echo($a + 1 . ':<br/>');                if (isset($gis_data[$a]['gis_type'])) {                    $type = $gis_data[$a]['gis_type'];                } else {                    $type = $gis_types[0];                }                echo('<select name="gis_data[' . $a . '][gis_type]" class="gis_type">');                foreach (array_slice($gis_types, 0, 6) as $gis_type) {                    echo('<option value="' . $gis_type . '"');                    if ($type == $gis_type) {                        echo(' selected="selected"');                    }                    echo('>' . $gis_type . '</option>');                }                echo('</select>');                echo('<input type="submit" name="gis_data[' . $a . '][go]" class="go" value="'); echo __("Go"); echo('">');            } else {                $type = $geom_type;            }            if ($type == 'POINT') {                echo('<br/>'); echo __("Point"); echo(' :');?>              <label for="x"><?php echo __("X"); ?></label>                <input name="gis_data[<?php echo($a); ?>][POINT][x]" type="text" value="<?php echo(isset($gis_data[$a]['POINT']['x']) ? htmlspecialchars($gis_data[$a]['POINT']['x']) : ''); ?>" />                <label for="y"><?php echo __("Y"); ?></label>                <input name="gis_data[<?php echo($a); ?>][POINT][y]" type="text" value="<?php echo(isset($gis_data[$a]['POINT']['y']) ? htmlspecialchars($gis_data[$a]['POINT']['y']) : ''); ?>" /><?php            } elseif ($type == 'MULTIPOINT' || $type == 'LINESTRING') {                $no_of_points = isset($gis_data[$a][$type]['no_of_points']) ? $gis_data[$a][$type]['no_of_points'] : 1;                if ($type == 'LINESTRING' && $no_of_points < 2) {                    $no_of_points = 2;                }                if ($type == 'MULTIPOINT' && $no_of_points < 1) {                    $no_of_points = 1;                }                if (isset($gis_data[$a][$type]['add_point'])) {                    $no_of_points++;                }                echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][no_of_points]" value="' . $no_of_points . '">');                for ($i = 0; $i < $no_of_points; $i++) {                    echo('<br/>');                    printf(__('Point %d'), $i + 1);                    echo ':';?>                  <label for="x"><?php echo  __("X"); ?></label>                    <input type="text" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][x]" value="<?php echo(isset($gis_data[$a][$type][$i]['x']) ? htmlspecialchars($gis_data[$a][$type][$i]['x']) : ''); ?>" />                    <label for="y"><?php echo  __("Y"); ?></label>                    <input type="text" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][y]" value="<?php echo(isset($gis_data[$a][$type][$i]['y']) ? htmlspecialchars($gis_data[$a][$type][$i]['y']) : ''); ?>" /><?php                }?>               <input type="submit" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][add_point]" class="add addPoint" value="<?php echo __("Add a point"); ?>"><?php            } elseif ($type == 'MULTILINESTRING' || $type == 'POLYGON') {                $no_of_lines = isset($gis_data[$a][$type]['no_of_lines']) ? $gis_data[$a][$type]['no_of_lines'] : 1;                if ($no_of_lines < 1) {                    $no_of_lines = 1;                }                if (isset($gis_data[$a][$type]['add_line'])) {                    $no_of_lines++;                }                echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][no_of_lines]" value="' . $no_of_lines . '">');                for ($i = 0; $i < $no_of_lines; $i++) {                    echo('<br/>');                    if ($type == 'MULTILINESTRING') {                        echo __("Linestring"); echo($i + 1 . ':');                    } else {                        if ($i == 0) {                            echo __("Outer Ring") . ':';                        } else {                            echo __("Inner Ring"); echo($i . ':');                        }                    }                    $no_of_points = isset($gis_data[$a][$type][$i]['no_of_points']) ? $gis_data[$a][$type][$i]['no_of_points'] : 2;                    if ($type == 'MULTILINESTRING' && $no_of_points < 2) {                        $no_of_points = 2;                    }                    if ($type == 'POLYGON' && $no_of_points < 4) {                        $no_of_points = 4;                    }                    if (isset($gis_data[$a][$type][$i]['add_point'])) {                        $no_of_points++;                    }                    echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][' . $i . '][no_of_points]" value="' . $no_of_points . '">');                    for ($j = 0; $j < $no_of_points; $j++) {                        echo('<br/>');                        printf(__('Point %d'), $j + 1);                        echo ':';?>                      <label for="x"><?php echo  __("X"); ?></label>                        <input type="text" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][<?php echo($j); ?>][x]" value="<?php echo(isset($gis_data[$a][$type][$i][$j]['x']) ? htmlspecialchars($gis_data[$a][$type][$i][$j]['x']) : ''); ?>" />                        <label for="y"><?php echo  __("Y"); ?></label>                        <input type="text" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][<?php echo($j); ?>][y]" value="<?php echo(isset($gis_data[$a][$type][$i][$j]['x']) ? htmlspecialchars($gis_data[$a][$type][$i][$j]['y']) : ''); ?>" /><?php               }?>                  <input type="submit" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][add_point]" class="add addPoint" value="<?php echo __("Add a point"); ?>"><?php           }                $caption = ($type == 'MULTILINESTRING') ? __('Add a linestring') : __('Add an inner ring');?>              <br/><input type="submit" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][add_line]" class="add addLine" value="<?php echo($caption); ?>"><?php            } elseif ($type == 'MULTIPOLYGON') {                $no_of_polygons = isset($gis_data[$a][$type]['no_of_polygons']) ? $gis_data[$a][$type]['no_of_polygons'] : 1;                if ($no_of_polygons < 1) {                    $no_of_polygons = 1;                }                if (isset($gis_data[$a][$type]['add_polygon'])) {                    $no_of_polygons++;                }                echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][no_of_polygons]" value="' . $no_of_polygons . '">');                for ($k = 0; $k < $no_of_polygons; $k++) {                    echo('<br/>'); echo __("Polygon"); echo($k + 1 . ':');                    $no_of_lines = isset($gis_data[$a][$type][$k]['no_of_lines']) ? $gis_data[$a][$type][$k]['no_of_lines'] : 1;                    if ($no_of_lines < 1) {                        $no_of_lines = 1;                    }                    if (isset($gis_data[$a][$type][$k]['add_line'])) {                        $no_of_lines++;                    }                    echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][' . $k . '][no_of_lines]" value="' . $no_of_lines . '">');                    for ($i = 0; $i < $no_of_lines; $i++) {                        echo('<br/><br/>');                        if ($i == 0) {                            echo __("Outer Ring") . ':';                        } else {                            echo __("Inner Ring"); echo($i . ':');                        }                        $no_of_points = isset($gis_data[$a][$type][$k][$i]['no_of_points']) ? $gis_data[$a][$type][$k][$i]['no_of_points'] : 4;                        if ($no_of_points < 4) {                            $no_of_points = 4;                        }                        if (isset($gis_data[$a][$type][$k][$i]['add_point'])) {                            $no_of_points++;                        }                        echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][' . $k . '][' . $i . '][no_of_points]" value="' . $no_of_points . '">');                        for ($j = 0; $j < $no_of_points; $j++) {                            echo('<br/>');                            printf(__('Point %d'), $j + 1);                            echo ':';?>                          <label for="x"><?php echo  __("X"); ?></label>                            <input type="text" name="<?php echo("gis_data[" . $a . "][" . $type . "][" . $k . "][" . $i . "][" . $j . "][x]"); ?>" value="<?php echo(isset($gis_data[$a][$type][$k][$i][$j]['x']) ? htmlspecialchars($gis_data[$a][$type][$k][$i][$j]['x']) : ''); ?>" />                            <label for="y"><?php echo  __("Y"); ?></label>                            <input type="text" name="<?php echo("gis_data[" . $a . "][" . $type . "][" . $k . "][" . $i . "][" . $j . "][y]"); ?>" value="<?php echo(isset($gis_data[$a][$type][$k][$i][$j]['y']) ? htmlspecialchars($gis_data[$a][$type][$k][$i][$j]['y']) : ''); ?>" /><?php                   }?>                      <input type="submit" name="<?php echo("gis_data[" . $a . "][" . $type . "][" . $k . "][" . $i . "][add_point]"); ?>" class="add addPoint" value="<?php echo __("Add a point"); ?>"><?php               }?>                  <br/><input type="submit" name="<?php echo("gis_data[" . $a . "][" . $type . "][" . $k . "][add_line]"); ?>" class="add addLine" value="<?php echo __('Add an inner ring') ?>"><br/><?php           }?>              <br/><input type="submit" name="<?php echo("gis_data[" . $a . "][" . $type . "][add_polygon]"); ?>" class="add addPolygon" value="<?php echo __('Add a polygon') ?>"><?php       }        }        if ($geom_type == 'GEOMETRYCOLLECTION') {?>          <br/><br/><input type="submit" name="gis_data[GEOMETRYCOLLECTION][add_geom]" class="add addGeom" value="<?php  echo __("Add geometry"); ?>" /><?php   }?>      </div>        <!-- End of data section -->        <br/><input type="submit" name="gis_data[save]" value="<?php echo __('Go') ?>">        <div id="gis_data_output">            <h3><?php echo __('Output'); ?></h3>            <p><?php echo __('Chose "GeomFromText" from the "Function" column and paste the below string into the "Value" field'); ?></p>            <textarea id="gis_data_textarea" cols="95" rows="5"><?php           echo($result);?>          </textarea>        </div>    </div>    </form><?php// If the call is to get the whole content, get the content in the buffer and make and AJAX response.if (isset($_REQUEST['get_gis_editor']) && $_REQUEST['get_gis_editor'] == true) {    $extra_data['gis_editor'] = ob_get_contents();    PMA_ajaxResponse(null, ob_end_clean(), $extra_data);}?></body><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * CSV import plugin for phpMyAdmin using LOAD DATA * * @package PhpMyAdmin-Import * @subpackage LDI */if (! defined('PHPMYADMIN')) {    exit;}/** * */if ($plugin_param !== 'table') {    return;}if (isset($plugin_list)) {    if ($GLOBALS['cfg']['Import']['ldi_local_option'] == 'auto') {        $GLOBALS['cfg']['Import']['ldi_local_option'] = false;        $result = PMA_DBI_try_query('SHOW VARIABLES LIKE \'local\\_infile\';');        if ($result != false && PMA_DBI_num_rows($result) > 0) {            $tmp = PMA_DBI_fetch_row($result);            if ($tmp[1] == 'ON') {                $GLOBALS['cfg']['Import']['ldi_local_option'] = true;            }        }        PMA_DBI_free_result($result);        unset($result);    }    $plugin_list['ldi'] = array(        'text' => __('CSV using LOAD DATA'),        'extension' => 'ldi', // This is nonsense, however we want to default to our parser for csv        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'replace', 'text' => __('Replace table data with file')),            array('type' => 'bool', 'name' => 'ignore', 'text' => __('Do not abort on INSERT error')),            array('type' => 'text', 'name' => 'terminated', 'text' => __('Columns terminated by'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'enclosed', 'text' => __('Columns enclosed by'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'escaped', 'text' => __('Columns escaped by'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'new_line', 'text' => __('Lines terminated by'), 'size' => 2),            array('type' => 'text', 'name' => 'columns', 'text' => __('Column names')),            array('type' => 'bool', 'name' => 'local_option', 'text' => __('Use LOCAL keyword')),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );    /* We do not define function when plugin is just queried for information above */    return;}if ($import_file == 'none' || $compression != 'none' || $charset_conversion) {    // We handle only some kind of data!    $message = PMA_Message::error(__('This plugin does not support compressed imports!'));    $error = true;    return;}$sql = 'LOAD DATA';if (isset($ldi_local_option)) {    $sql .= ' LOCAL';}$sql .= ' INFILE \'' . PMA_sqlAddSlashes($import_file) . '\'';if (isset($ldi_replace)) {    $sql .= ' REPLACE';} elseif (isset($ldi_ignore)) {    $sql .= ' IGNORE';}$sql .= ' INTO TABLE ' . PMA_backquote($table);if (strlen($ldi_terminated) > 0) {    $sql .= ' FIELDS TERMINATED BY \'' . $ldi_terminated . '\'';}if (strlen($ldi_enclosed) > 0) {    $sql .= ' ENCLOSED BY \'' . PMA_sqlAddSlashes($ldi_enclosed) . '\'';}if (strlen($ldi_escaped) > 0) {    $sql .= ' ESCAPED BY \'' . PMA_sqlAddSlashes($ldi_escaped) . '\'';}if (strlen($ldi_new_line) > 0) {    if ($ldi_new_line == 'auto') {        $ldi_new_line = PMA_whichCrlf() == "\n" ? '\n' : '\r\n';    }    $sql .= ' LINES TERMINATED BY \'' . $ldi_new_line . '\'';}if ($skip_queries > 0) {    $sql .= ' IGNORE ' . $skip_queries . ' LINES';    $skip_queries = 0;}if (strlen($ldi_columns) > 0) {    $sql .= ' (';    $tmp   = preg_split('/,( ?)/', $ldi_columns);    $cnt_tmp = count($tmp);    for ($i = 0; $i < $cnt_tmp; $i++) {        if ($i > 0) {            $sql .= ', ';        }        /* Trim also `, if user already included backquoted fields */        $sql     .= PMA_backquote(trim($tmp[$i], " \t\r\n\0\x0B`"));    } // end for    $sql .= ')';}PMA_importRunQuery($sql, $sql);PMA_importRunQuery();$finished = true;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Config file generator * * @package PhpMyAdmin-setup *//** * Config file generation class * * @package PhpMyAdmin */class ConfigGenerator{    /**     * Creates config file     *     * @return string     */    public static function getConfigFile()    {        $cf = ConfigFile::getInstance();        $crlf = (isset($_SESSION['eol']) && $_SESSION['eol'] == 'win') ? "\r\n" : "\n";        $c = $cf->getConfig();        // header        $ret = '<?php' . $crlf            . '/*' . $crlf            . ' * Generated configuration file' . $crlf            . ' * Generated by: phpMyAdmin '                    . $GLOBALS['PMA_Config']->get('PMA_VERSION')                    . ' setup script' . $crlf            . ' * Date: ' . date(DATE_RFC1123) . $crlf            . ' */' . $crlf . $crlf;        // servers        if ($cf->getServerCount() > 0) {            $ret .= "/* Servers configuration */$crlf\$i = 0;" . $crlf . $crlf;            foreach ($c['Servers'] as $id => $server) {                $ret .= '/* Server: ' . strtr($cf->getServerName($id) . " [$id] ", '*/', '-') . "*/" . $crlf                    . '$i++;' . $crlf;                foreach ($server as $k => $v) {                    $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);                    $ret .= "\$cfg['Servers'][\$i]['$k'] = "                        . (is_array($v) && self::_isZeroBasedArray($v)                                ? self::_exportZeroBasedArray($v, $crlf)                                : var_export($v, true))                        . ';' . $crlf;                }                $ret .= $crlf;            }            $ret .= '/* End of servers configuration */' . $crlf . $crlf;        }        unset($c['Servers']);        // other settings        $persistKeys = $cf->getPersistKeysMap();        foreach ($c as $k => $v) {            $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);            $ret .= self::_getVarExport($k, $v, $crlf);            if (isset($persistKeys[$k])) {                unset($persistKeys[$k]);            }        }        // keep 1d array keys which are present in $persist_keys (config.values.php)        foreach (array_keys($persistKeys) as $k) {            if (strpos($k, '/') === false) {                $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);                $ret .= self::_getVarExport($k, $cf->getDefault($k), $crlf);            }        }        $ret .= '?>';        return $ret;    }    /**     * Returns exported configuration variable     *     * @param string $var_name     * @param mixed  $var_value     * @param string $crlf     * @return string     */    private static function _getVarExport($var_name, $var_value, $crlf)    {        if (!is_array($var_value) || empty($var_value)) {            return "\$cfg['$var_name'] = " . var_export($var_value, true) . ';' . $crlf;        }        $ret = '';        if (self::_isZeroBasedArray($var_value)) {            $ret = "\$cfg['$var_name'] = " . self::_exportZeroBasedArray($var_value, $crlf)                . ';' . $crlf;        } else {            // string keys: $cfg[key][subkey] = value            foreach ($var_value as $k => $v) {                $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);                $ret .= "\$cfg['$var_name']['$k'] = " . var_export($v, true) . ';' . $crlf;            }        }        return $ret;    }    /**     * Check whether $array is a continuous 0-based array     *     * @param array $array     * @return boolean     */    private static function _isZeroBasedArray(array $array)    {        for ($i = 0; $i < count($array); $i++) {            if (! isset($array[$i])) {                return false;            }        }        return true;    }    /**     * Exports continuous 0-based array     *     * @param array $array     * @param string $crlf     * @return string     */    private static function _exportZeroBasedArray(array $array, $crlf)    {        $retv = array();        foreach ($array as $v) {            $retv[] = var_export($v, true);        }        $ret = "array(";        if (count($retv) <= 4) {            // up to 4 values - one line            $ret .= implode(', ', $retv);        } else {            // more than 4 values - value per line            $imax = count($retv)-1;            for ($i = 0; $i <= $imax; $i++) {                $ret .= ($i < $imax ? ($i > 0 ? ',' : '') : '') . $crlf . '    ' . $retv[$i];            }        }        $ret .= ')';        return $ret;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for listing directories * * @todo rename to file_listing.lib.php * @package PhpMyAdmin *//** * Returns array of filtered file names * * @param string $dir        directory to list * @param string $expression regular expression to match files * @return array   sorted file list on success, false on failure */function PMA_getDirContent($dir, $expression = ''){    if (file_exists($dir) && $handle = @opendir($dir)) {        $result = array();        if (substr($dir, -1) != '/') {            $dir .= '/';        }        while ($file = @readdir($handle)) {        // for PHP < 5.2.4, is_file() gives a warning when using open_basedir        // and verifying '..' or '.'            if ('.' != $file && '..' != $file && is_file($dir . $file) && ($expression == '' || preg_match($expression, $file))) {                $result[] = $file;            }        }        @closedir($handle);        asort($result);        return $result;    } else {        return false;    }}/** * Returns options of filtered file names * * @param string $dir        directory to list * @param string $extensions regullar expression to match files * @param string $active     currently active choice * @return array   sorted file list on success, false on failure */function PMA_getFileSelectOptions($dir, $extensions = '', $active = ''){    $list = PMA_getDirContent($dir, $extensions);    if ($list === false) {        return false;    }    $result = '';    foreach ($list as $key => $val) {        $result .= '<option value="'. htmlspecialchars($val) . '"';        if ($val == $active) {            $result .= ' selected="selected"';        }        $result .= '>' . htmlspecialchars($val) . '</option>' . "\n";    }    return $result;}/** * Get currently supported decompressions. * * @return string | separated list of extensions usable in PMA_getDirContent */function PMA_supportedDecompressions(){    global $cfg;    $compressions = '';    if ($cfg['GZipDump'] && @function_exists('gzopen')) {        if (!empty($compressions)) {            $compressions .= '|';        }        $compressions .= 'gz';    }    if ($cfg['BZipDump'] && @function_exists('bzopen')) {        if (!empty($compressions)) {            $compressions .= '|';        }        $compressions .= 'bz2';    }    if ($cfg['ZipDump'] && @function_exists('gzinflate')) {        if (!empty($compressions)) {            $compressions .= '|';        }        $compressions .= 'zip';    }    return $compressions;}
<?php/** * Server create and edit view * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/form_processing.lib.php';require './libraries/config/setup.forms.php';$mode = filter_input(INPUT_GET, 'mode');$id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);$cf = ConfigFile::getInstance();$server_exists = !empty($id) && $cf->get("Servers/$id") !== null;if ($mode == 'edit' && $server_exists) {    $page_title = __('Edit server')        . ' ' . $id . ' <small>(' . htmlspecialchars($cf->getServerDSN($id)) . ')</small>';} elseif ($mode == 'remove' && $server_exists) {    $cf->removeServer($id);    header('Location: index.php');    exit;} elseif ($mode == 'revert' && $server_exists) {    // handled by process_formset()} else {    $page_title = __('Add a new server');    $id = 0;}if (isset($page_title)) {    echo '<h2>' . $page_title . '</h2>';}$form_display = new FormDisplay();foreach ($forms['Servers'] as $form_name => $form) {    $form_display->registerForm($form_name, $form, $id);}process_formset($form_display);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-String-Native *//** * Returns length of string depending on current charset. * * @param string   string to count * @return  int      string length */function PMA_strlen($string){    return strlen($string);}/** * Returns substring from string, works depending on current charset. * * @param string $string  string to count * @param int    $start   start of substring * @param int    $length  length of substring * @return  string */function PMA_substr($string, $start, $length = 2147483647){    return substr($string, $start, $length);}/** * Returns postion of $needle in $haystack or false if not found * * @param string  $haystack * @param string  $needle * @param int     $offset * @return  integer position of $needle in $haystack or false */function PMA_strpos($haystack, $needle, $offset = 0){    return strpos($haystack, $needle, $offset);}/** * Make a string lowercase * * @param string  $string * @return  string */function PMA_strtolower($string){    return strtolower($string);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for trigger management. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sets required globals */function PMA_TRI_setGlobals(){    global $action_timings, $event_manipulations;    // Some definitions for triggers    $action_timings      = array('BEFORE',                                 'AFTER');    $event_manipulations = array('INSERT',                                 'UPDATE',                                 'DELETE');}/** * Main function for the triggers functionality */function PMA_TRI_main(){    global $db, $table;    PMA_TRI_setGlobals();    /**     * Process all requests     */    PMA_TRI_handleEditor();    PMA_TRI_handleExport();    /**     * Display a list of available triggers     */    $items = PMA_DBI_get_triggers($db, $table);    echo PMA_RTE_getList('trigger', $items);    /**     * Display a link for adding a new trigger,     * if the user has the necessary privileges     */    echo PMA_TRI_getFooterLinks();} // end PMA_TRI_main()/** * Handles editor requests for adding or editing an item */function PMA_TRI_handleEditor(){    global $_REQUEST, $_POST, $errors, $db, $table;    if (! empty($_REQUEST['editor_process_add'])        || ! empty($_REQUEST['editor_process_edit'])    ) {        $sql_query = '';        $item_query = PMA_TRI_getQueryFromRequest();        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()            // Execute the created query            if (! empty($_REQUEST['editor_process_edit'])) {                // Backup the old trigger, in case something goes wrong                $trigger = PMA_TRI_getDataFromName($_REQUEST['item_original_name']);                $create_item = $trigger['create'];                $drop_item = $trigger['drop'] . ';';                $result = PMA_DBI_try_query($drop_item);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $drop_item) . '<br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $result = PMA_DBI_try_query($item_query);                    if (! $result) {                        $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br />'                                          . __('MySQL said: ') . PMA_DBI_getError(null);                        // We dropped the old item, but were unable to create the new one                        // Try to restore the backup query                        $result = PMA_DBI_try_query($create_item);                        if (! $result) {                            // OMG, this is really bad! We dropped the query, failed to create a new one                            // and now even the backup query does not execute!                            // This should not happen, but we better handle this just in case.                            $errors[] = __('Sorry, we failed to restore the dropped trigger.') . '<br />'                                              . __('The backed up query was:') . "\"$create_item\"" . '<br />'                                              . __('MySQL said: ') . PMA_DBI_getError(null);                        }                    } else {                        $message = PMA_Message::success(__('Trigger %1$s has been modified.'));                        $message->addParam(PMA_backquote($_REQUEST['item_name']));                        $sql_query = $drop_item . $item_query;                    }                }            } else {                // 'Add a new item' mode                $result = PMA_DBI_try_query($item_query);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br /><br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $message = PMA_Message::success(__('Trigger %1$s has been created.'));                    $message->addParam(PMA_backquote($_REQUEST['item_name']));                    $sql_query = $item_query;                }            }        }        if (count($errors)) {            $message = PMA_Message::error(__('<b>One or more errors have occured while processing your request:</b>'));            $message->addString('<ul>');            foreach ($errors as $string) {                $message->addString('<li>' . $string . '</li>');            }            $message->addString('</ul>');        }        $output = PMA_showMessage($message, $sql_query);        if ($GLOBALS['is_ajax_request']) {            $extra_data = array();            if ($message->isSuccess()) {                $items = PMA_DBI_get_triggers($db, $table, '');                $trigger = false;                foreach ($items as $value) {                    if ($value['name'] == $_REQUEST['item_name']) {                        $trigger = $value;                    }                }                $extra_data['insert'] = false;                if (empty($table) || ($trigger !== false && $table == $trigger['table'])) {                    $extra_data['insert'] = true;                    $extra_data['new_row'] = PMA_TRI_getRowForList($trigger);                    $extra_data['name'] = htmlspecialchars(                        strtoupper($_REQUEST['item_name'])                    );                }                $response = $output;            } else {                $response = $message;            }            PMA_ajaxResponse($response, $message->isSuccess(), $extra_data);        }    }    /**     * Display a form used to add/edit a trigger, if necessary     */    if (count($errors) || ( empty($_REQUEST['editor_process_add']) && empty($_REQUEST['editor_process_edit'])        && (! empty($_REQUEST['add_item']) || ! empty($_REQUEST['edit_item']))) // FIXME: this must be simpler than that    ) {        // Get the data for the form (if any)        if (! empty($_REQUEST['add_item'])) {            $title = PMA_RTE_getWord('add');            $item = PMA_TRI_getDataFromRequest();            $mode = 'add';        } else if (! empty($_REQUEST['edit_item'])) {            $title = __("Edit trigger");            if (! empty($_REQUEST['item_name'])                && empty($_REQUEST['editor_process_edit'])            ) {                $item = PMA_TRI_getDataFromName($_REQUEST['item_name']);                if ($item !== false) {                    $item['item_original_name'] = $item['item_name'];                }            } else {                $item = PMA_TRI_getDataFromRequest();            }            $mode = 'edit';        }        if ($item !== false) {            // Show form            $editor = PMA_TRI_getEditorForm($mode, $item);            if ($GLOBALS['is_ajax_request']) {                $extra_data = array('title' => $title);                PMA_ajaxResponse($editor, true, $extra_data);            } else {                echo "\n\n<h2>$title</h2>\n\n$editor";                unset($_POST);                include './libraries/footer.inc.php';            }            // exit;        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, false);            } else {                $message->display();            }        }    }} // end PMA_TRI_handleEditor()/** * This function will generate the values that are required to for the editor * * @return  array    Data necessary to create the editor. */function PMA_TRI_getDataFromRequest(){    $retval = array();    $indices = array('item_name',                     'item_table',                     'item_original_name',                     'item_action_timing',                     'item_event_manipulation',                     'item_definition',                     'item_definer');    foreach ($indices as $index) {        $retval[$index] = isset($_REQUEST[$index]) ? $_REQUEST[$index] : '';    }    return $retval;} // end PMA_TRI_getDataFromRequest()/** * This function will generate the values that are required to complete * the "Edit trigger" form given the name of a trigger. * * @param   string   $name   The name of the trigger. * * @return  array    Data necessary to create the editor. */function PMA_TRI_getDataFromName($name){    global $db, $table, $_REQUEST;    $temp = array();    $items = PMA_DBI_get_triggers($db, $table, '');    foreach ($items as $value) {        if ($value['name'] == $name) {            $temp = $value;        }    }    if (empty($temp)) {        return false;    } else {        $retval = array();        $retval['create']                  = $temp['create'];        $retval['drop']                    = $temp['drop'];        $retval['item_name']               = $temp['name'];        $retval['item_table']              = $temp['table'];        $retval['item_action_timing']      = $temp['action_timing'];        $retval['item_event_manipulation'] = $temp['event_manipulation'];        $retval['item_definition']         = $temp['definition'];        $retval['item_definer']            = $temp['definer'];        return $retval;    }} // end PMA_TRI_getDataFromName()/** * Displays a form used to add/edit a trigger * * @param   string   $mode         If the editor will be used edit a trigger *                                 or add a new one: 'edit' or 'add'. * @param   array    $item         Data for the trigger returned by *                                 PMA_TRI_getDataFromRequest() or *                                 PMA_TRI_getDataFromName() * * @return  string   HTML code for the editor. */function PMA_TRI_getEditorForm($mode, $item){    global $db, $table, $event_manipulations, $action_timings;    // Escape special characters    $need_escape = array(                       'item_original_name',                       'item_name',                       'item_definition',                       'item_definer'                   );    foreach ($need_escape as $key => $index) {        $item[$index] = htmlentities($item[$index], ENT_QUOTES);    }    $original_data = '';    if ($mode == 'edit') {        $original_data = "<input name='item_original_name' "                       . "type='hidden' value='{$item['item_original_name']}'/>\n";    }    $query  = "SELECT `TABLE_NAME` FROM `INFORMATION_SCHEMA`.`TABLES` ";    $query .= "WHERE `TABLE_SCHEMA`='" . PMA_sqlAddSlashes($db) . "' ";    $query .= "AND `TABLE_TYPE`='BASE TABLE'";    $tables = PMA_DBI_fetch_result($query);    // Create the output    $retval  = "";    $retval .= "<!-- START " . strtoupper($mode) . " TRIGGER FORM -->\n\n";    $retval .= "<form class='rte_form' action='db_triggers.php' method='post'>\n";    $retval .= "<input name='{$mode}_item' type='hidden' value='1' />\n";    $retval .= $original_data;    $retval .= PMA_generate_common_hidden_inputs($db, $table) . "\n";    $retval .= "<fieldset>\n";    $retval .= "<legend>" . __('Details') . "</legend>\n";    $retval .= "<table class='rte_table' style='width: 100%'>\n";    $retval .= "<tr>\n";    $retval .= "    <td style='width: 20%;'>" . __('Trigger name') . "</td>\n";    $retval .= "    <td><input type='text' name='item_name' maxlength='64'\n";    $retval .= "               value='{$item['item_name']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Table') . "</td>\n";    $retval .= "    <td>\n";    $retval .= "        <select name='item_table'>\n";    foreach ($tables as $key => $value) {        $selected = "";        if ($mode == 'add' && $value == $table) {            $selected = " selected='selected'";        } else if ($mode == 'edit' && $value == $item['item_table']) {            $selected = " selected='selected'";        }        $retval .= "            <option$selected>$value</option>\n";    }    $retval .= "        </select>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . _pgettext('Trigger action time', 'Time') . "</td>\n";    $retval .= "    <td><select name='item_timing'>\n";    foreach ($action_timings as $key => $value) {        $selected = "";        if (! empty($item['item_action_timing'])            && $item['item_action_timing'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Event') . "</td>\n";    $retval .= "    <td><select name='item_event'>\n";    foreach ($event_manipulations as $key => $value) {        $selected = "";        if (! empty($item['item_event_manipulation'])            && $item['item_event_manipulation'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definition') . "</td>\n";    $retval .= "    <td><textarea name='item_definition' rows='15' cols='40'>";    $retval .= $item['item_definition'];    $retval .= "</textarea></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definer') . "</td>\n";    $retval .= "    <td><input type='text' name='item_definer'\n";    $retval .= "               value='{$item['item_definer']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "</table>\n";    $retval .= "</fieldset>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "<input type='hidden' name='editor_process_{$mode}'\n";        $retval .= "       value='true' />\n";        $retval .= "<input type='hidden' name='ajax_request' value='true' />\n";    } else {        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='editor_process_{$mode}'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END " . strtoupper($mode) . " TRIGGER FORM -->\n\n";    return $retval;} // end PMA_TRI_getEditorForm()/** * Composes the query necessary to create a trigger from an HTTP request. * * @return  string  The CREATE TRIGGER query. */function PMA_TRI_getQueryFromRequest(){    global $_REQUEST, $db, $errors, $action_timings, $event_manipulations;    $query = 'CREATE ';    if (! empty($_REQUEST['item_definer'])) {        if (strpos($_REQUEST['item_definer'], '@') !== false) {            $arr = explode('@', $_REQUEST['item_definer']);            $query .= 'DEFINER=' . PMA_backquote($arr[0]);            $query .= '@' . PMA_backquote($arr[1]) . ' ';        } else {            $errors[] = __('The definer must be in the "username@hostname" format');        }    }    $query .= 'TRIGGER ';    if (! empty($_REQUEST['item_name'])) {        $query .= PMA_backquote($_REQUEST['item_name']) . ' ';    } else {        $errors[] = __('You must provide a trigger name');    }    if (! empty($_REQUEST['item_timing']) && in_array($_REQUEST['item_timing'], $action_timings)) {        $query .= $_REQUEST['item_timing'] . ' ';    } else {        $errors[] = __('You must provide a valid timing for the trigger');    }    if (! empty($_REQUEST['item_event']) && in_array($_REQUEST['item_event'], $event_manipulations)) {        $query .= $_REQUEST['item_event'] . ' ';    } else {        $errors[] = __('You must provide a valid event for the trigger');    }    $query .= 'ON ';    if (! empty($_REQUEST['item_table']) && in_array($_REQUEST['item_table'], PMA_DBI_get_tables($db))) {        $query .= PMA_backQuote($_REQUEST['item_table']);    } else {        $errors[] = __('You must provide a valid table name');    }    $query .= ' FOR EACH ROW ';    if (! empty($_REQUEST['item_definition'])) {        $query .= $_REQUEST['item_definition'];    } else {        $errors[] = __('You must provide a trigger definition.');    }    return $query;} // end PMA_TRI_getQueryFromRequest()?>
