<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$pma_table = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);/** * Runs common work */require './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_operations.php&amp;back=tbl_operations.php';$url_params['goto'] = $url_params['back'] = 'tbl_operations.php';/** * Gets relation settings */$cfgRelation = PMA_getRelationsParam();/** * Gets available MySQL charsets and storage engines */require_once './libraries/mysql_charsets.lib.php';require_once './libraries/StorageEngine.class.php';// add a javascript file for jQuery functions to handle Ajax actions// also add jQueryUI$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';/** * Class for partition management */require_once './libraries/Partition.class.php';// reselect current db (needed in some cases probably due to// the calling of relation.lib.php)PMA_DBI_select_db($GLOBALS['db']);/** * Gets tables informations */require './libraries/tbl_info.inc.php';// define some globals here, for improved syntax in the conditionals$is_myisam_or_aria = $is_isam = $is_innodb = $is_berkeleydb = $is_aria = $is_pbxt = false;// set initial value of these globals, based on the current table enginePMA_set_global_variables_for_engine($tbl_type);if ($is_aria) {    // the value for transactional can be implicit    // (no create option found, in this case it means 1)    // or explicit (option found with a value of 0 or 1)    // ($transactional may have been set by libraries/tbl_info.inc.php,    // from the $create_options)    $transactional = (isset($transactional) && $transactional == '0') ? '0' : '1';    $page_checksum = (isset($page_checksum)) ? $page_checksum : '';}$reread_info = false;$table_alters = array();/** * If the table has to be moved to some other database */if (isset($_REQUEST['submit_move']) || isset($_REQUEST['submit_copy'])) {    $_message = '';    include_once './tbl_move_copy.php';}/** * If the table has to be maintained */if (isset($_REQUEST['table_maintenance'])) {    include_once './sql.php';    unset($result);}/** * Updates table comment, type and options if required */if (isset($_REQUEST['submitoptions'])) {    $_message = '';    $warning_messages = array();    if (isset($_REQUEST['new_name'])) {        if ($pma_table->rename($_REQUEST['new_name'])) {            $_message .= $pma_table->getLastMessage();            $result = true;            $GLOBALS['table'] = $pma_table->getName();            $reread_info = true;            $reload = true;        } else {            $_message .= $pma_table->getLastError();            $result = false;        }    }    if (isset($_REQUEST['comment'])      && urldecode($_REQUEST['prev_comment']) !== $_REQUEST['comment']) {        $table_alters[] = 'COMMENT = \'' . PMA_sqlAddSlashes($_REQUEST['comment']) . '\'';    }    if (! empty($_REQUEST['new_tbl_type'])      && strtolower($_REQUEST['new_tbl_type']) !== strtolower($tbl_type)) {        $table_alters[] = 'ENGINE = ' . $_REQUEST['new_tbl_type'];        $tbl_type = $_REQUEST['new_tbl_type'];        // reset the globals for the new engine        PMA_set_global_variables_for_engine($tbl_type);        if ($is_aria) {            $transactional = (isset($transactional) && $transactional == '0') ? '0' : '1';            $page_checksum = (isset($page_checksum)) ? $page_checksum : '';        }    }    if (! empty($_REQUEST['tbl_collation'])      && $_REQUEST['tbl_collation'] !== $tbl_collation) {        $table_alters[] = 'DEFAULT ' . PMA_generateCharsetQueryPart($_REQUEST['tbl_collation']);    }    if (($is_myisam_or_aria || $is_isam)      && isset($_REQUEST['new_pack_keys'])      && $_REQUEST['new_pack_keys'] != (string)$pack_keys) {        $table_alters[] = 'pack_keys = ' . $_REQUEST['new_pack_keys'];    }    $checksum = empty($checksum) ? '0' : '1';    $_REQUEST['new_checksum'] = empty($_REQUEST['new_checksum']) ? '0' : '1';    if ($is_myisam_or_aria      && $_REQUEST['new_checksum'] !== $checksum) {        $table_alters[] = 'checksum = ' . $_REQUEST['new_checksum'];    }    $_REQUEST['new_transactional'] = empty($_REQUEST['new_transactional']) ? '0' : '1';    if ($is_aria      && $_REQUEST['new_transactional'] !== $transactional) {        $table_alters[] = 'TRANSACTIONAL = ' . $_REQUEST['new_transactional'];    }    $_REQUEST['new_page_checksum'] = empty($_REQUEST['new_page_checksum']) ? '0' : '1';    if ($is_aria      && $_REQUEST['new_page_checksum'] !== $page_checksum) {        $table_alters[] = 'PAGE_CHECKSUM = ' . $_REQUEST['new_page_checksum'];    }    $delay_key_write = empty($delay_key_write) ? '0' : '1';    $_REQUEST['new_delay_key_write'] = empty($_REQUEST['new_delay_key_write']) ? '0' : '1';    if ($is_myisam_or_aria      && $_REQUEST['new_delay_key_write'] !== $delay_key_write) {        $table_alters[] = 'delay_key_write = ' . $_REQUEST['new_delay_key_write'];    }    if (($is_myisam_or_aria || $is_innodb || $is_pbxt)      &&  ! empty($_REQUEST['new_auto_increment'])      && (! isset($auto_increment) || $_REQUEST['new_auto_increment'] !== $auto_increment)) {        $table_alters[] = 'auto_increment = ' . PMA_sqlAddSlashes($_REQUEST['new_auto_increment']);    }    if (($is_myisam_or_aria || $is_innodb || $is_pbxt)      &&  ! empty($_REQUEST['new_row_format'])      && (! isset($row_format) || strtolower($_REQUEST['new_row_format']) !== strtolower($row_format))) {        $table_alters[] = 'ROW_FORMAT = ' . PMA_sqlAddSlashes($_REQUEST['new_row_format']);    }    if (count($table_alters) > 0) {        $sql_query      = 'ALTER TABLE ' . PMA_backquote($GLOBALS['table']);        $sql_query     .= "\r\n" . implode("\r\n", $table_alters);        $result        .= PMA_DBI_query($sql_query) ? true : false;        $reread_info    = true;        unset($table_alters);        foreach (PMA_DBI_get_warnings() as $warning) {            // In MariaDB 5.1.44, when altering a table from Maria to MyISAM            // and if TRANSACTIONAL was set, the system reports an error;            // I discussed with a Maria developer and he agrees that this            // should not be reported with a Level of Error, so here            // I just ignore it. But there are other 1478 messages            // that it's better to show.            if (! ($_REQUEST['new_tbl_type'] == 'MyISAM' && $warning['Code'] == '1478' && $warning['Level'] == 'Error')) {                $warning_messages[] = $warning['Level'] . ': #' . $warning['Code']                    . ' ' . $warning['Message'];            }        }    }}/** * Reordering the table has been requested by the user */if (isset($_REQUEST['submitorderby']) && ! empty($_REQUEST['order_field'])) {    $sql_query = '        ALTER TABLE ' . PMA_backquote($GLOBALS['table']) . '        ORDER BY ' . PMA_backquote(urldecode($_REQUEST['order_field']));    if (isset($_REQUEST['order_order']) && $_REQUEST['order_order'] === 'desc') {        $sql_query .= ' DESC';    }    $result = PMA_DBI_query($sql_query);} // end if/** * A partition operation has been requested by the user */if (isset($_REQUEST['submit_partition']) && ! empty($_REQUEST['partition_operation'])) {    $sql_query = 'ALTER TABLE ' . PMA_backquote($GLOBALS['table']) . ' ' . $_REQUEST['partition_operation'] . ' PARTITION ' . $_REQUEST['partition_name'];    $result = PMA_DBI_query($sql_query);} // end ifif ($reread_info) {    // to avoid showing the old value (for example the AUTO_INCREMENT) after    // a change, clear the cache    PMA_Table::$cache = array();    $page_checksum = $checksum = $delay_key_write = 0;    include './libraries/tbl_info.inc.php';}unset($reread_info);/** * Displays top menu links in non ajax requests */if (!isset($_REQUEST['ajax_request'])) {    include_once './libraries/tbl_links.inc.php';}if (isset($result) && empty($message_to_show)) {    // set to success by default, because result set could be empty    // (for example, a table rename)    $_type = 'success';    if (empty($_message)) {        $_message = $result ? $message = PMA_Message::success(__('Your SQL query has been executed successfully')) : PMA_Message::error(__('Error'));        // $result should exist, regardless of $_message        $_type = $result ? 'success' : 'error';        if ( $_REQUEST['ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($_message, $_message->isSuccess(), $extra_data);        }    }    if (! empty($warning_messages)) {        $_message = new PMA_Message;        $_message->addMessages($warning_messages);        $_message->isError(true);        if ( $_REQUEST['ajax_request'] == true) {            PMA_ajaxResponse($_message, false);        }        unset($warning_messages);    }    PMA_showMessage($_message, $sql_query, $_type);    unset($_message, $_type);}$url_params['goto'] = 'tbl_operations.php';$url_params['back'] = 'tbl_operations.php';/** * Get columns names */$columns = PMA_DBI_get_columns($GLOBALS['db'], $GLOBALS['table']);/** * Displays the page */?><!-- Order the table --><div class="operations_half_width"><form method="post" id="alterTableOrderby" action="tbl_operations.php" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><fieldset id="fieldset_table_order">    <legend><?php echo __('Alter table order by'); ?></legend>    <select name="order_field"><?phpforeach ($columns as $fieldname) {    echo '            <option value="' . htmlspecialchars($fieldname['Field']) . '">'        . htmlspecialchars($fieldname['Field']) . '</option>' . "\n";}unset($columns);?>    </select> <?php echo __('(singly)'); ?>    <select name="order_order">        <option value="asc"><?php echo __('Ascending'); ?></option>        <option value="desc"><?php echo __('Descending'); ?></option>    </select></fieldset><fieldset class="tblFooters">    <input type="submit" name="submitorderby" value="<?php echo __('Go'); ?>" /></fieldset></form></div><!-- Move table --><div class="operations_half_width"><form method="post" action="tbl_operations.php"    onsubmit="return emptyFormElements(this, 'new_name')"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><input type="hidden" name="reload" value="1" /><input type="hidden" name="what" value="data" /><fieldset id="fieldset_table_rename">    <legend><?php echo __('Move table to (database<b>.</b>table):'); ?></legend><?php if (count($GLOBALS['pma']->databases) > $GLOBALS['cfg']['MaxDbList']) {?>    <input type="text" maxlength="100" size="30" name="target_db" value="<?php echo htmlspecialchars($GLOBALS['db']); ?>"/><?php    } else {?>    <select name="target_db">        <?php echo $GLOBALS['pma']->databases->getHtmlOptions(true, false); ?>    </select><?php    } // end if?>    &nbsp;<strong>.</strong>&nbsp;    <input type="text" size="20" name="new_name" onfocus="this.select()"value="<?php echo htmlspecialchars($GLOBALS['table']); ?>" /><br />    <?php    // starting with MySQL 5.0.24, SHOW CREATE TABLE includes the AUTO_INCREMENT    // next value but users can decide if they want it or not for the operation    ?>    <input type="checkbox" name="sql_auto_increment" value="1" id="checkbox_auto_increment_mv" checked="checked" />    <label for="checkbox_auto_increment_mv"><?php echo __('Add AUTO_INCREMENT value'); ?></label><br /></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_move" value="<?php echo __('Go'); ?>" /></fieldset></form></div><?phpif (strstr($show_comment, '; InnoDB free') === false) {    if (strstr($show_comment, 'InnoDB free') === false) {        // only user entered comment        $comment = $show_comment;    } else {        // here we have just InnoDB generated part        $comment = '';    }} else {    // remove InnoDB comment from end, just the minimal part (*? is non greedy)    $comment = preg_replace('@; InnoDB free:.*?$@', '', $show_comment);}// PACK_KEYS: MyISAM or ISAM// DELAY_KEY_WRITE, CHECKSUM, : MyISAM only// AUTO_INCREMENT: MyISAM and InnoDB since 5.0.3, PBXT// Here should be version check for InnoDB, however it is supported// in >5.0.4, >4.1.12 and >4.0.11, so I decided not to// check for version?><!-- Table options --><div class="operations_half_width clearfloat"><form method="post" action="tbl_operations.php"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><input type="hidden" name="reload" value="1" /><fieldset>    <legend><?php echo __('Table options'); ?></legend>    <table>    <!-- Change table name -->    <tr><td><?php echo __('Rename table to'); ?></td>        <td><input type="text" size="20" name="new_name" onfocus="this.select()"                value="<?php echo htmlspecialchars($GLOBALS['table']); ?>" />        </td>    </tr>    <!-- Table comments -->    <tr><td><?php echo __('Table comments'); ?></td>        <td><input type="text" name="comment" maxlength="60" size="30"                value="<?php echo htmlspecialchars($comment); ?>" onfocus="this.select()" />            <input type="hidden" name="prev_comment" value="<?php echo htmlspecialchars($comment); ?>" />        </td>    </tr>    <!-- Storage engine -->    <tr><td><?php echo __('Storage Engine'); ?>            <?php echo PMA_showMySQLDocu('Storage_engines', 'Storage_engines'); ?>        </td>        <td><?php echo PMA_StorageEngine::getHtmlSelect('new_tbl_type', null, $tbl_type); ?>        </td>    </tr>    <!-- Table character set -->    <tr><td><?php echo __('Collation'); ?></td>        <td><?php echo PMA_generateCharsetDropdownBox(                PMA_CSDROPDOWN_COLLATION,                'tbl_collation', null, $tbl_collation, false, 3            ); ?>        </td>    </tr><?phpif ($is_myisam_or_aria || $is_isam) {    ?>    <tr>        <td><label for="new_pack_keys">PACK_KEYS</label></td>        <td><select name="new_pack_keys" id="new_pack_keys">                <option value="DEFAULT"                    <?php if ($pack_keys == 'DEFAULT') echo 'selected="selected"'; ?>                    >DEFAULT</option>                <option value="0"                    <?php if ($pack_keys == '0') echo 'selected="selected"'; ?>                    >0</option>                <option value="1"                    <?php if ($pack_keys == '1') echo 'selected="selected"'; ?>                    >1</option>            </select>        </td>    </tr>    <?php} // end if (MYISAM|ISAM)if ($is_myisam_or_aria) {    ?>    <tr><td><label for="new_checksum">CHECKSUM</label></td>        <td><input type="checkbox" name="new_checksum" id="new_checksum"                value="1"    <?php echo (isset($checksum) && $checksum == 1)        ? ' checked="checked"'        : ''; ?> />        </td>    </tr>    <tr><td><label for="new_delay_key_write">DELAY_KEY_WRITE</label></td>        <td><input type="checkbox" name="new_delay_key_write" id="new_delay_key_write"                value="1"    <?php echo (isset($delay_key_write) && $delay_key_write == 1)        ? ' checked="checked"'        : ''; ?> />        </td>    </tr>    <?php} // end if (MYISAM)if ($is_aria) {    ?>    <tr><td><label for="new_transactional">TRANSACTIONAL</label></td>        <td><input type="checkbox" name="new_transactional" id="new_transactional"                value="1"    <?php echo (isset($transactional) && $transactional == 1)        ? ' checked="checked"'        : ''; ?> />        </td>    </tr>    <tr><td><label for="new_page_checksum">PAGE_CHECKSUM</label></td>        <td><input type="checkbox" name="new_page_checksum" id="new_page_checksum"                value="1"    <?php echo (isset($page_checksum) && $page_checksum == 1)        ? ' checked="checked"'        : ''; ?> />        </td>    </tr>    <?php} // end if (ARIA)if (isset($auto_increment) && strlen($auto_increment) > 0  && ($is_myisam_or_aria || $is_innodb || $is_pbxt)) {    ?>    <tr><td><label for="auto_increment_opt">AUTO_INCREMENT</label></td>        <td><input type="text" name="new_auto_increment" id="auto_increment_opt"                value="<?php echo $auto_increment; ?>" /></td>    </tr>    <?php} // end if (MYISAM|INNODB)// the outer array is for engines, the inner array contains the dropdown// option values as keys then the dropdown option labels$possible_row_formats = array(     'ARIA'  => array(        'FIXED'     => 'FIXED',        'DYNAMIC'   => 'DYNAMIC',        'PAGE'      => 'PAGE'            ),     'MARIA'  => array(        'FIXED'     => 'FIXED',        'DYNAMIC'   => 'DYNAMIC',        'PAGE'      => 'PAGE'            ),     'MYISAM' => array(         'FIXED'    => 'FIXED',         'DYNAMIC'  => 'DYNAMIC'     ),     'PBXT'   => array(         'FIXED'    => 'FIXED',         'DYNAMIC'  => 'DYNAMIC'     ),     'INNODB' => array(         'COMPACT'  => 'COMPACT',         'REDUNDANT' => 'REDUNDANT'));$innodb_engine_plugin = PMA_StorageEngine::getEngine('innodb');$innodb_plugin_version = $innodb_engine_plugin->getInnodbPluginVersion();if (!empty($innodb_plugin_version)) {    $innodb_file_format = $innodb_engine_plugin->getInnodbFileFormat();} else {    $innodb_file_format = '';}if ('Barracuda' == $innodb_file_format && $innodb_engine_plugin->supportsFilePerTable()) {    $possible_row_formats['INNODB']['DYNAMIC'] = 'DYNAMIC';    $possible_row_formats['INNODB']['COMPRESSED'] = 'COMPRESSED';}unset($innodb_engine_plugin, $innodb_plugin_version, $innodb_file_format);// for MYISAM there is also COMPRESSED but it can be set only by the// myisampack utility, so don't offer here the choice because if we// try it inside an ALTER TABLE, MySQL (at least in 5.1.23-maria)// does not return a warning// (if the table was compressed, it can be seen on the Structure page)if (isset($possible_row_formats[$tbl_type])) {    $current_row_format = strtoupper($showtable['Row_format']);    echo '<tr><td><label for="new_row_format">ROW_FORMAT</label></td>';    echo '<td>';    echo PMA_generate_html_dropdown('new_row_format', $possible_row_formats[$tbl_type], $current_row_format, 'new_row_format');    unset($possible_row_formats, $current_row_format);    echo '</td>';    echo '</tr>';}?>    </table></fieldset><fieldset class="tblFooters">        <input type="submit" name="submitoptions" value="<?php echo __('Go'); ?>" /></fieldset></form></div><!-- Copy table --><div class="operations_half_width"><form method="post" action="tbl_operations.php" name="copyTable" id="copyTable" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>    onsubmit="return emptyFormElements(this, 'new_name')"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><input type="hidden" name="reload" value="1" /><fieldset>    <legend><?php echo __('Copy table to (database<b>.</b>table):'); ?></legend><?php if (count($GLOBALS['pma']->databases) > $GLOBALS['cfg']['MaxDbList']) {?>    <input type="text" maxlength="100" size="30" name="target_db" value="<?php echo htmlspecialchars($GLOBALS['db']); ?>"/><?php    } else {?>    <select name="target_db">        <?php echo $GLOBALS['pma']->databases->getHtmlOptions(true, false); ?>    </select><?php    } // end if?>    &nbsp;<strong>.</strong>&nbsp;    <input type="text" size="20" name="new_name" onfocus="this.select()" value="<?php echo htmlspecialchars($GLOBALS['table']); ?>"/><br /><?php        $choices = array(            'structure' => __('Structure only'),            'data'      => __('Structure and data'),            'dataonly'  => __('Data only'));        PMA_display_html_radio('what', $choices, 'data', true);        unset($choices);?>    <input type="checkbox" name="drop_if_exists" value="true" id="checkbox_drop" />    <label for="checkbox_drop"><?php echo sprintf(__('Add %s'), 'DROP TABLE'); ?></label><br />    <input type="checkbox" name="sql_auto_increment" value="1" id="checkbox_auto_increment_cp" />    <label for="checkbox_auto_increment_cp"><?php echo __('Add AUTO_INCREMENT value'); ?></label><br />    <?php        // display "Add constraints" choice only if there are        // foreign keys        if (PMA_getForeigners($GLOBALS['db'], $GLOBALS['table'], '', 'foreign')) {        ?>    <input type="checkbox" name="add_constraints" value="1" id="checkbox_constraints" />    <label for="checkbox_constraints"><?php echo __('Add constraints'); ?></label><br />        <?php        } // endif        if (isset($_COOKIE['pma_switch_to_new'])          && $_COOKIE['pma_switch_to_new'] == 'true') {            $pma_switch_to_new = 'true';        }    ?>    <input type="checkbox" name="switch_to_new" value="true"        id="checkbox_switch"<?php echo            isset($pma_switch_to_new) && $pma_switch_to_new == 'true'            ? ' checked="checked"'            : ''; ?> />    <label for="checkbox_switch"><?php echo __('Switch to copied table'); ?></label></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_copy" value="<?php echo __('Go'); ?>" /></fieldset></form></div><br class="clearfloat"/><div class="operations_half_width"><fieldset> <legend><?php echo __('Table maintenance'); ?></legend><ul id="tbl_maintenance" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>><?php// Note: BERKELEY (BDB) is no longer supported, starting with MySQL 5.1if ($is_myisam_or_aria || $is_innodb || $is_berkeleydb) {    if ($is_myisam_or_aria || $is_innodb) {        $this_url_params = array_merge(            $url_params,            array(                'sql_query' => 'CHECK TABLE ' . PMA_backquote($GLOBALS['table']),                'table_maintenance' => 'Go',                )        );        ?>    <li><a class='maintain_action' href="tbl_operations.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Check table'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'CHECK_TABLE'); ?>    </li>        <?php    }    if ($is_innodb) {        $this_url_params = array_merge(            $url_params,            array('sql_query' => 'ALTER TABLE ' . PMA_backquote($GLOBALS['table']) . ' ENGINE = InnoDB')        );        ?>    <li><a class='maintain_action' href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Defragment table'); ?></a>        <?php echo PMA_showMySQLDocu('Table_types', 'InnoDB_File_Defragmenting'); ?>    </li>        <?php    }    if ($is_myisam_or_aria || $is_berkeleydb) {        $this_url_params = array_merge(            $url_params,            array(                'sql_query' => 'ANALYZE TABLE ' . PMA_backquote($GLOBALS['table']),                'table_maintenance' => 'Go',                )        );        ?>    <li><a class='maintain_action' href="tbl_operations.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Analyze table'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'ANALYZE_TABLE');?>    </li>        <?php    }    if ($is_myisam_or_aria && !PMA_DRIZZLE) {        $this_url_params = array_merge(            $url_params,            array(                'sql_query' => 'REPAIR TABLE ' . PMA_backquote($GLOBALS['table']),                'table_maintenance' => 'Go',                )        );        ?>    <li><a class='maintain_action' href="tbl_operations.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Repair table'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'REPAIR_TABLE'); ?>    </li>        <?php    }    if (($is_myisam_or_aria || $is_innodb || $is_berkeleydb) && !PMA_DRIZZLE) {        $this_url_params = array_merge(            $url_params,            array(                'sql_query' => 'OPTIMIZE TABLE ' . PMA_backquote($GLOBALS['table']),                'table_maintenance' => 'Go',                )        );        ?>    <li><a class='maintain_action' href="tbl_operations.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Optimize table'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'OPTIMIZE_TABLE'); ?>    </li>        <?php    }} // end MYISAM or BERKELEYDB case$this_url_params = array_merge(    $url_params,    array(        'sql_query' => 'FLUSH TABLE ' . PMA_backquote($GLOBALS['table']),        'message_to_show' => sprintf(            __('Table %s has been flushed'),            htmlspecialchars($GLOBALS['table'])        ),        'reload'    => 1,    ));?>    <li><a class='maintain_action' href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Flush the table (FLUSH)'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'FLUSH'); ?>    </li></ul></fieldset></div><?php if (! (isset($db_is_information_schema) && $db_is_information_schema)) { ?><div class="operations_half_width"><fieldset class="caution"> <legend><?php echo __('Delete data or table'); ?></legend><ul><?phpif (! $tbl_is_view && ! (isset($db_is_information_schema) && $db_is_information_schema)) {    $this_sql_query = 'TRUNCATE TABLE ' . PMA_backquote($GLOBALS['table']);    $this_url_params = array_merge(        $url_params,        array(            'sql_query' => $this_sql_query,            'goto' => 'tbl_structure.php',            'reload' => '1',            'message_to_show' => sprintf(__('Table %s has been emptied'), htmlspecialchars($table)),        )    );    ?>    <li><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'id="truncate_tbl_anchor" class="ajax"' : ''); ?>>            <?php echo __('Empty the table (TRUNCATE)'); ?></a>        <?php echo PMA_showMySQLDocu('SQL-Syntax', 'TRUNCATE_TABLE'); ?>    </li><?php}if (! (isset($db_is_information_schema) && $db_is_information_schema)) {    $this_sql_query = 'DROP TABLE ' . PMA_backquote($GLOBALS['table']);    $this_url_params = array_merge(        $url_params,        array(            'sql_query' => $this_sql_query,            'goto' => 'db_operations.php',            'reload' => '1',            'purge' => '1',            'message_to_show' => sprintf(($tbl_is_view ? __('View %s has been dropped') : __('Table %s has been dropped')), htmlspecialchars($table)),            // table name is needed to avoid running            // PMA_relationsCleanupDatabase() on the whole db later            'table' => $GLOBALS['table'],        )    );    ?>    <li><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'id="drop_tbl_anchor"' : ''); ?>>            <?php echo __('Delete the table (DROP)'); ?></a>        <?php echo PMA_showMySQLDocu('SQL-Syntax', 'DROP_TABLE'); ?>    </li><?php}?></ul></fieldset></div><?php}?><br class="clearfloat"><?php if (PMA_Partition::havePartitioning()) {    $partition_names = PMA_Partition::getPartitionNames($db, $table);    // show the Partition maintenance section only if we detect a partition    if (! is_null($partition_names[0])) {    ?><div class="operations_half_width"><form method="post" action="tbl_operations.php"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><fieldset> <legend><?php echo __('Partition maintenance'); ?></legend><?php        $html_select = '<select name="partition_name">' . "\n";        foreach ($partition_names as $one_partition) {            $one_partition = htmlspecialchars($one_partition);            $html_select .= '<option value="' . $one_partition . '">' . $one_partition . '</option>' . "\n";        }        $html_select .= '</select>' . "\n";        printf(__('Partition %s'), $html_select);        unset($partition_names, $one_partition, $html_select);        $choices = array(            'ANALYZE' => __('Analyze'),            'CHECK' => __('Check'),            'OPTIMIZE' => __('Optimize'),            'REBUILD' => __('Rebuild'),            'REPAIR' => __('Repair'));        PMA_display_html_radio('partition_operation', $choices, '', false);        unset($choices);        echo PMA_showMySQLDocu('partitioning_maintenance', 'partitioning_maintenance');        // I'm not sure of the best way to display that; this link does        // not depend on the Go button    $this_url_params = array_merge(        $url_params,        array(            'sql_query' => 'ALTER TABLE ' . PMA_backquote($GLOBALS['table']) . ' REMOVE PARTITIONING'            )        );?>    <br /><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Remove partitioning'); ?></a></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_partition" value="<?php echo __('Go'); ?>" /></fieldset></form></div><?php        } // end if    } // end if// Referential integrity check// The Referential integrity check was intended for the non-InnoDB// tables for which the relations are defined in pmadb// so I assume that if the current table is InnoDB, I don't display// this choice (InnoDB maintains integrity by itself)if ($cfgRelation['relwork'] && ! $is_innodb) {    PMA_DBI_select_db($GLOBALS['db']);    $foreign = PMA_getForeigners($GLOBALS['db'], $GLOBALS['table']);    if ($foreign) {        ?>    <!-- Referential integrity check --><div class="operations_half_width"><fieldset> <legend><?php echo __('Check referential integrity:'); ?></legend>    <ul>        <?php        echo "\n";        foreach ($foreign AS $master => $arr) {            $join_query  = 'SELECT ' . PMA_backquote($GLOBALS['table']) . '.* FROM '                         . PMA_backquote($GLOBALS['table']) . ' LEFT JOIN '                         . PMA_backquote($arr['foreign_table']);            if ($arr['foreign_table'] == $GLOBALS['table']) {                $foreign_table = $GLOBALS['table'] . '1';                $join_query .= ' AS ' . PMA_backquote($foreign_table);            } else {                $foreign_table = $arr['foreign_table'];            }            $join_query .= ' ON '                         . PMA_backquote($GLOBALS['table']) . '.' . PMA_backquote($master)                         . ' = ' . PMA_backquote($foreign_table) . '.' . PMA_backquote($arr['foreign_field'])                         . ' WHERE '                         . PMA_backquote($foreign_table) . '.' . PMA_backquote($arr['foreign_field'])                         . ' IS NULL AND '                         . PMA_backquote($GLOBALS['table']) . '.' . PMA_backquote($master)                         . ' IS NOT NULL';            $this_url_params = array_merge(                $url_params,                array('sql_query' => $join_query)            );            echo '        <li>'                 . '<a href="sql.php'                 . PMA_generate_common_url($this_url_params)                 . '">' . $master . '&nbsp;->&nbsp;' . $arr['foreign_table'] . '.' . $arr['foreign_field']                 . '</a></li>' . "\n";        } //  foreach $foreign        unset($foreign_table, $join_query);        ?>    </ul>   </fieldset>  </div>        <?php    } // end if ($foreign)} // end  if (!empty($cfg['Server']['relation']))/** * Displays the footer */require './libraries/footer.inc.php';function PMA_set_global_variables_for_engine($tbl_type){    global $is_myisam_or_aria, $is_innodb, $is_isam, $is_berkeleydb, $is_aria, $is_pbxt;    $is_myisam_or_aria = $is_isam = $is_innodb = $is_berkeleydb = $is_aria = $is_pbxt = false;    $upper_tbl_type = strtoupper($tbl_type);    //Options that apply to MYISAM usually apply to ARIA    $is_myisam_or_aria = ($upper_tbl_type == 'MYISAM' || $upper_tbl_type == 'ARIA' || $upper_tbl_type == 'MARIA');    $is_aria = ($upper_tbl_type == 'ARIA');    $is_isam = ($upper_tbl_type == 'ISAM');    $is_innodb = ($upper_tbl_type == 'INNODB');    $is_berkeleydb = ($upper_tbl_type == 'BERKELEYDB');    $is_pbxt = ($upper_tbl_type == 'PBXT');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * This Class interacts with the user to gather the information * about their tables for which they want to export the relational schema * export options are shown to user from they can choose */class PMA_User_Schema{    public $chosenPage;    public $autoLayoutForeign;    public $autoLayoutInternal;    public $pageNumber;    public $c_table_rows;    public $action;    public function setAction($value)    {        $this->action = $value;    }    /**     * This function will process the user defined pages     * and tables which will be exported as Relational schema     * you can set the table positions on the paper via scratchboard     * for table positions, put the x,y co-ordinates     *     * $this->action tells what the Schema is supposed to do     * create and select a page, generate schema etc     *     * @access public     * @return void     */    public function processUserChoice()    {        global $action_choose, $db, $cfgRelation;        if (isset($this->action)) {            switch ($this->action) {            case 'selectpage':                $this->chosenPage = $_REQUEST['chpage'];                if ($action_choose=="1") {                    $this->deleteCoordinates(                        $db,                        $cfgRelation,                        $this->chosenPage                    );                    $this->deletePages(                        $db,                        $cfgRelation,                        $this->chosenPage                    );                    $this->chosenPage = 0;                }                break;            case 'createpage':                $this->pageNumber = PMA_REL_create_page(                    $_POST['newpage'],                    $cfgRelation,                    $db                );                $this->autoLayoutForeign = isset($_POST['auto_layout_foreign'])                    ? "1"                    : null;                $this->autoLayoutInternal = isset($_POST['auto_layout_internal'])                    ? "1"                    : null;                $this->processRelations(                    $db,                    $this->pageNumber,                    $cfgRelation                );                break;            case 'edcoord':                $this->chosenPage = $_POST['chpage'];                $this->c_table_rows = $_POST['c_table_rows'];                $this->_editCoordinates($db, $cfgRelation);                break;            case 'delete_old_references':                $this->_deleteTableRows(                    $_POST['delrow'],                    $cfgRelation,                    $db,                    $_POST['chpage']                );                break;            case 'process_export':                $this->_processExportSchema();                break;            } // end switch        } // end if (isset($do))    }    /**     * shows/displays the HTML FORM to create the page     *     * @param string $db name of the selected database     *     * @return void     * @access public     */    public function showCreatePageDialog($db)    {        ?>        <form method="post" action="schema_edit.php" name="frm_create_page">        <fieldset>        <legend>        <?php echo __('Create a page') . "\n"; ?>        </legend>        <?php echo PMA_generate_common_hidden_inputs($db); ?>        <input type="hidden" name="do" value="createpage" />        <table>        <tr>        <td><label for="id_newpage"><?php echo __('Page name'); ?></label></td>        <td><input type="text" name="newpage" id="id_newpage" size="20" maxlength="50" /></td>        </tr>        <tr>        <td><?php echo __('Automatic layout based on'); ?></td>        <td>        <input type="checkbox" name="auto_layout_internal" id="id_auto_layout_internal" /><label for="id_auto_layout_internal">        <?php echo __('Internal relations'); ?></label><br />        <?php        /*         * Check to see whether INNODB and PBXT storage engines are Available in MYSQL PACKAGE         * If available, then provide AutoLayout for Foreign Keys in Schema View         */        if (PMA_StorageEngine::isValid('InnoDB') || PMA_StorageEngine::isValid('PBXT')) {            ?>            <input type="checkbox" name="auto_layout_foreign" id="id_auto_layout_foreign" /><label for="id_auto_layout_foreign">            <?php echo __('FOREIGN KEY'); ?></label><br />            <?php        }        ?>        </td></tr>        </table>        </fieldset>        <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Go'); ?>" />        </fieldset>        </form>        <?php    }    /**     * shows/displays the created page names in a drop down list     * User can select any page number and edit it using dashboard etc     *     * @return void     * @access public     */    public function selectPage()    {        global $db,$table,$cfgRelation;        $page_query = 'SELECT * FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'';        $page_rs    = PMA_query_as_controluser($page_query, false, PMA_DBI_QUERY_STORE);        if ($page_rs && PMA_DBI_num_rows($page_rs) > 0) {            ?>            <form method="get" action="schema_edit.php" name="frm_select_page">            <fieldset>            <legend>            <?php echo __('Please choose a page to edit') . "\n"; ?>            </legend>            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="do" value="selectpage" />            <select name="chpage" id="chpage" class="autosubmit">            <option value="0"><?php echo __('Select page'); ?></option>            <?php            while ($curr_page = PMA_DBI_fetch_assoc($page_rs)) {                echo "\n" . '        '                    . '<option value="' . $curr_page['page_nr'] . '"';                if (isset($this->chosenPage)                    && $this->chosenPage == $curr_page['page_nr']                ) {                    echo ' selected="selected"';                }                echo '>' . $curr_page['page_nr'] . ': '                    . htmlspecialchars($curr_page['page_descr']) . '</option>';            } // end while            echo "\n";            ?>            </select>            <?php            $choices = array(                 '0' => __('Edit'),                 '1' => __('Delete')            );            PMA_display_html_radio('action_choose', $choices, '0', false);            unset($choices);            ?>            </fieldset>            <fieldset class="tblFooters">            <input type="submit" value="<?php echo __('Go'); ?>" /><br />            </fieldset>            </form>            <?php        } // end IF        echo "\n";    } // end function    /**     * A dashboard is displayed to AutoLayout the position of tables     * users can drag n drop the tables and change their positions     *     * @return void     * @access public     */    public function showTableDashBoard()    {        global $db, $cfgRelation, $table, $with_field_names;        /*         * We will need an array of all tables in this db         */        $selectboxall = array('--');        $alltab_rs    = PMA_DBI_query(            'SHOW TABLES FROM ' . PMA_backquote($db) . ';',            null,            PMA_DBI_QUERY_STORE        );        while ($val = @PMA_DBI_fetch_row($alltab_rs)) {               $selectboxall[] = $val[0];        }        $tabExist = array();        /*         * Now if we already have chosen a page number then we should         * show the tables involved         */        if (isset($this->chosenPage) && $this->chosenPage > 0) {            echo "\n";            ?>            <h2><?php echo __('Select Tables'); ?></h2>            <?php            $page_query = 'SELECT * FROM '                . PMA_backquote($GLOBALS['cfgRelation']['db'])                . '.' . PMA_backquote($cfgRelation['table_coords'])                . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                . ' AND pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';            $page_rs    = PMA_query_as_controluser($page_query, false);            $array_sh_page = array();            while ($temp_sh_page = @PMA_DBI_fetch_assoc($page_rs)) {                   $array_sh_page[] = $temp_sh_page;            }            /*             * Display WYSIWYG parts             */            if (! isset($_POST['with_field_names']) && ! isset($_POST['showwysiwyg'])) {                $with_field_names = true;            }            $this->_displayScratchboardTables($array_sh_page);            ?>            <form method="post" action="schema_edit.php" name="edcoord">            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="chpage" value="<?php echo htmlspecialchars($this->chosenPage); ?>" />            <input type="hidden" name="do" value="edcoord" />            <table border="0">            <tr>                <th><?php echo __('Table'); ?></th>                <th><?php echo __('Delete'); ?></th>                <th>X</th>                <th>Y</th>            </tr>            <?php            if (isset($ctable)) {                unset($ctable);            }            $i = 0;            $odd_row = true;            foreach ($array_sh_page as $dummy_sh_page => $sh_page) {                $_mtab            =  $sh_page['table_name'];                $tabExist[$_mtab] =  false;                echo "\n" . '    <tr class="noclick ';                if ($odd_row) {                    echo 'odd';                } else {                    echo 'even';                }                echo '">';                $odd_row != $odd_row;                echo "\n" . '        <td>'                     . "\n" . '            <select name="c_table_' . $i . '[name]">';                foreach ($selectboxall as $key => $value) {                    echo "\n" . '                <option value="' . htmlspecialchars($value) . '"';                    if ($value == $sh_page['table_name']) {                        echo ' selected="selected"';                        $tabExist[$_mtab] = true;                    }                    echo '>' . htmlspecialchars($value) . '</option>';                }                echo "\n" . '            </select>'                     . "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="checkbox" id="id_c_table_' . $i .'" name="c_table_' . $i . '[delete]" value="y" /><label for="id_c_table_' . $i .'">' . __('Delete') . '</label>';                echo "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="text" onchange="dragPlace(' . $i . ', \'x\', this.value)" name="c_table_' . $i . '[x]" value="' . $sh_page['x'] . '" />';                echo "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="text" onchange="dragPlace(' . $i . ', \'y\', this.value)" name="c_table_' . $i . '[y]" value="' . $sh_page['y'] . '" />';                echo "\n" . '        </td>';                echo "\n" . '    </tr>';                $i++;            }            /*             * Add one more empty row             */            echo "\n" . '    <tr class="noclick ';            if ($odd_row) {                echo 'odd';            } else {                echo 'even';            }            $odd_row != $odd_row;            echo '">';            echo "\n" . '        <td>'                 . "\n" . '            <select name="c_table_' . $i . '[name]">';            foreach ($selectboxall as $key => $value) {                echo "\n" . '                <option value="' . htmlspecialchars($value) . '">' . htmlspecialchars($value) . '</option>';            }            echo "\n" . '            </select>'                 . "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="checkbox" id="id_c_table_' . $i .'" name="c_table_' . $i . '[delete]" value="y" /><label for="id_c_table_' . $i .'">' . __('Delete') . '</label>';            echo "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="text" name="c_table_' . $i . '[x]" value="' . (isset($sh_page['x'])?$sh_page['x']:'') . '" />';            echo "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="text" name="c_table_' . $i . '[y]" value="' . (isset($sh_page['y'])?$sh_page['y']:'') . '" />';            echo "\n" . '        </td>';            echo "\n" . '    </tr>';            echo "\n" . '    </table>' . "\n";            echo "\n" . '    <input type="hidden" name="c_table_rows" value="' . ($i + 1) . '" />';            echo "\n" . '    <input type="hidden" id="showwysiwyg" name="showwysiwyg" value="' . ((isset($showwysiwyg) && $showwysiwyg == '1') ? '1' : '0') . '" />';            echo "\n" . '    <input type="checkbox" name="with_field_names" ' . (isset($with_field_names) ? 'checked="checked"' : ''). ' />' . __('Column names') . '<br />';            echo "\n" . '    <input type="submit" value="' . __('Save') . '" />';            echo "\n" . '</form>' . "\n\n";        } // end if        if (isset($tabExist)) {            $this->_deleteTables($db, $this->chosenPage, $tabExist);        }    }    /**     * show Export relational schema generation options     * user can select export type of his own choice     * and the attributes related to it     *     * @return void     * @access public     */    public function displaySchemaGenerationOptions()    {        global $cfg,$pmaThemeImage,$db,$test_rs,$chpage;        ?>        <form method="post" action="schema_export.php">            <fieldset>            <legend>            <?php            echo PMA_generate_common_hidden_inputs($db);            if ($cfg['PropertiesIconic']) {                echo PMA_getImage('b_views.png');            }            echo __('Display relational schema');            ?>:            </legend>            <select name="export_type" id="export_type">                <option value="pdf" selected="selected">PDF</option>                <option value="svg">SVG</option>                <option value="dia">DIA</option>                <option value="visio">Visio</option>                <option value="eps">EPS</option>            </select>            <label><?php echo __('Select Export Relational Type');?></label><br />            <?php            if (isset($test_rs)) {            ?>            <label for="pdf_page_number_opt"><?php echo __('Page number:'); ?></label>            <select name="pdf_page_number" id="pdf_page_number_opt">                <?php                while ($pages = @PMA_DBI_fetch_assoc($test_rs)) {                    echo '                <option value="' . $pages['page_nr'] . '">'                        . $pages['page_nr'] . ': ' . htmlspecialchars($pages['page_descr']) . '</option>' . "\n";                } // end while                PMA_DBI_free_result($test_rs);                unset($test_rs);                ?>            </select><br />            <?php } else { ?>            <input type="hidden" name="pdf_page_number" value="<?php echo htmlspecialchars($this->chosenPage); ?>" />            <?php } ?>            <input type="hidden" name="do" value="process_export" />            <input type="hidden" name="chpage" value="<?php echo $chpage; ?>" />            <input type="checkbox" name="show_grid" id="show_grid_opt" />            <label for="show_grid_opt"><?php echo __('Show grid'); ?></label><br />            <input type="checkbox" name="show_color" id="show_color_opt" checked="checked" />            <label for="show_color_opt"><?php echo __('Show color'); ?></label><br />            <input type="checkbox" name="show_table_dimension" id="show_table_dim_opt" />            <label for="show_table_dim_opt"><?php echo __('Show dimension of tables'); ?>            </label><br />            <input type="checkbox" name="all_table_same_wide" id="all_table_same_wide" />            <label for="all_table_same_wide"><?php echo __('Display all tables with the same width'); ?>            </label><br />            <input type="checkbox" name="with_doc" id="with_doc" checked="checked" />            <label for="with_doc"><?php echo __('Data Dictionary'); ?></label><br />            <input type="checkbox" name="show_keys" id="show_keys" />            <label for="show_keys"><?php echo __('Only show keys'); ?></label><br />            <select name="orientation" id="orientation_opt" onchange="refreshDragOption('pdflayout');" >                <option value="L"><?php echo __('Landscape');?></option>                <option value="P"><?php echo __('Portrait');?></option>            </select>            <label for="orientation_opt"><?php echo __('Orientation'); ?></label>            <br />            <select name="paper" id="paper_opt" onchange="refreshDragOption('pdflayout');">                <?php                foreach ($cfg['PDFPageSizes'] as $key => $val) {                        echo '<option value="' . $val . '"';                        if ($val == $cfg['PDFDefaultPageSize']) {                            echo ' selected="selected"';                        }                        echo ' >' . $val . '</option>' . "\n";                }                ?>            </select>            <label for="paper_opt"><?php echo __('Paper size'); ?></label>            </fieldset>            <fieldset class="tblFooters">            <input type="submit" value="<?php echo __('Go'); ?>" />            </fieldset>        </form>        <?php    }    /**    * Check if there are tables that need to be deleted in dashboard,    * if there are, ask the user for allowance    *    * @param string  $db       name of database selected    * @param integer $chpage   selected page    * @param array   $tabExist    *    * @return void    * @access private    */    private function _deleteTables($db, $chpage, $tabExist)    {        global $table;        $_strtrans  = '';        $_strname   = '';        $shoot      = false;        if (! empty($tabExist) && is_array($tabExist)) {            foreach ($tabExist as $key => $value) {                if (! $value) {                    $_strtrans  .= '<input type="hidden" name="delrow[]" value="' . htmlspecialchars($key) . '" />' . "\n";                    $_strname   .= '<li>' . htmlspecialchars($key) . '</li>' . "\n";                    $shoot       = true;                }            }            if ($shoot) {                echo '<form action="schema_edit.php" method="post">' . "\n"                    . PMA_generate_common_hidden_inputs($db)                    . '<input type="hidden" name="do" value="delete_old_references" />' . "\n"                    . '<input type="hidden" name="chpage" value="' . htmlspecialchars($chpage) . '" />' . "\n"                    . __('The current page has references to tables that no longer exist. Would you like to delete those references?')                    . '<ul>' . "\n"                    . $_strname                    . '</ul>' . "\n"                    . $_strtrans                    . '<input type="submit" value="' . __('Go') . '" />' . "\n"                    . '</form>';            }        }    }    /**     * Check if there are tables that need to be deleted in dashboard,     * if there are, ask the user for allowance     *     * @return void     * @access private     */    private function _displayScratchboardTables($array_sh_page)    {        global $with_field_names, $db;        ?>        <script type="text/javascript" src="./js/dom-drag.js"></script>        <form method="post" action="schema_edit.php" name="dragdrop">        <input type="button" name="dragdrop" value="<?php echo __('Toggle scratchboard'); ?>" onclick="ToggleDragDrop('pdflayout');" />        <input type="button" name="dragdropreset" value="<?php echo __('Reset'); ?>" onclick="resetDrag();" />        </form>        <div id="pdflayout" class="pdflayout" style="visibility: hidden;">        <?php        $draginit = '';        $draginit2 = '';        $reset_draginit = '';        $i = 0;        foreach ($array_sh_page as $key => $temp_sh_page) {            $drag_x = $temp_sh_page['x'];            $drag_y = $temp_sh_page['y'];            $draginit2      .= ' Drag.init($("#table_' . $i . '")[0], null, 0, parseInt(myid.style.width)-2, 0, parseInt(myid.style.height)-5);' . "\n";            $draginit2      .= '    $("#table_' . $i . '")[0].onDrag = function (x, y) { document.edcoord.elements["c_table_' . $i . '[x]"].value = parseInt(x); document.edcoord.elements["c_table_' . $i . '[y]"].value = parseInt(y) }' . "\n";            $draginit       .= '    $("#table_' . $i . '")[0].style.left = "' . $drag_x . 'px";' . "\n";            $draginit       .= '    $("#table_' . $i . '")[0].style.top  = "' . $drag_y . 'px";' . "\n";            $reset_draginit .= '    $("#table_' . $i . '")[0].style.left = "2px";' . "\n";            $reset_draginit .= '    $("#table_' . $i . '")[0].style.top  = "' . (15 * $i) . 'px";' . "\n";            $reset_draginit .= '    document.edcoord.elements["c_table_' . $i . '[x]"].value = "2"' . "\n";            $reset_draginit .= '    document.edcoord.elements["c_table_' . $i . '[y]"].value = "' . (15 * $i) . '"' . "\n";            echo '<div id="table_' . $i . '" class="pdflayout_table"><u>' . $temp_sh_page['table_name'] . '</u>';            if (isset($with_field_names)) {                $fields = PMA_DBI_get_columns($db, $temp_sh_page['table_name']);                // if the table has been dropped from outside phpMyAdmin,                // we can no longer obtain its columns list                if ($fields) {                    foreach ($fields as $row) {                        echo '<br />' . htmlspecialchars($row['Field']) . "\n";                    }                }            }            echo '</div>' . "\n";            $i++;        }        ?>        </div>        <script type="text/javascript">        //<![CDATA[        function PDFinit() {            refreshLayout();            myid = $('#pdflayout')[0];            <?php echo $draginit; ?>            TableDragInit();        }        function TableDragInit() {            myid = $('#pdflayout')[0];            <?php echo $draginit2; ?>        }        function resetDrag() {            <?php echo $reset_draginit; ?>        }        //]]>        </script>        <?php    }    /**     * delete the table rows with table co-ordinates     *     * @param int     $delrow      delete selected table from list of tables     * @param array   $cfgRelation relation settings     * @param string  $db          database name     * @param integer $chpage      selected page for adding relations etc     *     * @return void     * @access private     */    private function _deleteTableRows($delrow,$cfgRelation,$db,$chpage)    {        foreach ($delrow as $current_row) {            $del_query = 'DELETE FROM '                . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['table_coords']) . ' ' . "\n"                .   ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'' . "\n"                .   ' AND table_name = \'' . PMA_sqlAddSlashes($current_row) . '\'' . "\n"                .   ' AND pdf_page_number = \'' . PMA_sqlAddSlashes($chpage) . '\'';                echo $del_query;            PMA_query_as_controluser($del_query, false);        }    }    /**     * get all the export options and verify     * call and include the appropriate Schema Class depending on $export_type     *     * @return void     * @access private     */    private function _processExportSchema()    {        /**        * Settings for relation stuff        */        include_once './libraries/transformations.lib.php';        include_once './libraries/Index.class.php';        /**         * default is PDF, otherwise validate it's only letters a-z         */        global  $db,$export_type;        if (!isset($export_type) || !preg_match('/^[a-zA-Z]+$/', $export_type)) {            $export_type = 'pdf';        }        PMA_DBI_select_db($db);        include "./libraries/schema/" . ucfirst($export_type) . "_Relation_Schema.class.php";        $obj_schema = eval("new PMA_" . ucfirst($export_type) . "_Relation_Schema();");    }    /**     * delete X and Y coordinates     *     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     * @param integer $choosePage  selected page for adding relations etc     *     * @return void     * @access private     */    public function deleteCoordinates($db, $cfgRelation, $choosePage)    {        $query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['table_coords'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($choosePage) . '\'';        PMA_query_as_controluser($query, false);    }    /**     * delete pages     *     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     * @param integer $choosePage  selected page for adding relations etc     *     * @return void     * @access private     */    public function deletePages($db, $cfgRelation, $choosePage)    {        $query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND   page_nr = \'' . PMA_sqlAddSlashes($choosePage) . '\'';        PMA_query_as_controluser($query, false);    }    /**     * process internal and foreign key relations     *     * @param string  $db          The database name     * @param integer $pageNumber  document number/Id     * @param array   $cfgRelation relation settings     *     * @return void     * @access private     */    public function processRelations($db, $pageNumber, $cfgRelation)    {        /*         * A u t o m a t i c    l a y o u t         *         * There are 2 kinds of relations in PMA         * 1) Internal Relations 2) Foreign Key Relations         */        if (isset($this->autoLayoutInternal) || isset($this->autoLayoutForeign)) {            $all_tables = array();        }        if (isset($this->autoLayoutForeign)) {            /*             * get the tables list             * who support FOREIGN KEY, it's not             * important that we group together InnoDB tables             * and PBXT tables, as this logic is just to put             * the tables on the layout, not to determine relations             */            $tables = PMA_DBI_get_tables_full($db);            $foreignkey_tables = array();            foreach ($tables as $table_name => $table_properties) {                if (PMA_foreignkey_supported($table_properties['ENGINE'])) {                    $foreignkey_tables[] = $table_name;                }            }            $all_tables = $foreignkey_tables;            /*             * could be improved by finding the tables which have the             * most references keys and placing them at the beginning             * of the array (so that they are all center of schema)             */            unset($tables, $foreignkey_tables);        }        if (isset($this->autoLayoutInternal)) {            /*             * get the tables list who support Internal Relations;             * This type of relations will be created when             * you setup the PMA tables correctly             */            $master_tables = 'SELECT COUNT(master_table), master_table'                . ' FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['relation'])                . ' WHERE master_db = \'' . PMA_sqlAddSlashes($db) . '\''                . ' GROUP BY master_table'                . ' ORDER BY COUNT(master_table) DESC';            $master_tables_rs = PMA_query_as_controluser(                $master_tables, false, PMA_DBI_QUERY_STORE            );            if ($master_tables_rs && PMA_DBI_num_rows($master_tables_rs) > 0) {                /* first put all the master tables at beginning                 * of the list, so they are near the center of                 * the schema                 */                while (list(, $master_table) = PMA_DBI_fetch_row($master_tables_rs)) {                       $all_tables[] = $master_table;                }                /* Now for each master, add its foreigns into an array                 * of foreign tables, if not already there                 * (a foreign might be foreign for more than                 * one table, and might be a master itself)                 */                $foreign_tables = array();                foreach ($all_tables as $master_table) {                    $foreigners = PMA_getForeigners($db, $master_table);                    foreach ($foreigners as $foreigner) {                        if (! in_array($foreigner['foreign_table'], $foreign_tables)) {                            $foreign_tables[] = $foreigner['foreign_table'];                        }                    }                }                /*                 * Now merge the master and foreign arrays/tables                 */                foreach ($foreign_tables as $foreign_table) {                    if (! in_array($foreign_table, $all_tables)) {                        $all_tables[] = $foreign_table;                    }                }            }        }        if (isset($this->autoLayoutInternal) || isset($this->autoLayoutForeign)) {            $this->addRelationCoordinates(                $all_tables, $pageNumber, $db, $cfgRelation            );        }        $this->chosenPage = $pageNumber;    }    /**     * Add X and Y coordinates for a table     *     * @param array   $all_tables  A list of all tables involved     * @param integer $pageNumber  document number/Id     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     *     * @return void     * @access private     */    public function addRelationCoordinates($all_tables, $pageNumber, $db, $cfgRelation)    {        /*         * Now generate the coordinates for the schema         * in a clockwise spiral and add to co-ordinates table         */        $pos_x = 300;        $pos_y = 300;        $delta = 110;        $delta_mult = 1.10;        $direction = "right";        foreach ($all_tables as $current_table) {            /*            * save current table's coordinates            */            $insert_query = 'INSERT INTO '                . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['table_coords']) . ' '                . '(db_name, table_name, pdf_page_number, x, y) '                . 'VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \''                . PMA_sqlAddSlashes($current_table) . '\',' . $pageNumber                . ',' . $pos_x . ',' . $pos_y . ')';            PMA_query_as_controluser($insert_query, false);            /*             * compute for the next table             */            switch ($direction) {            case 'right':                $pos_x    += $delta;                $direction = "down";                $delta    *= $delta_mult;                break;            case 'down':                $pos_y    += $delta;                $direction = "left";                $delta    *= $delta_mult;                break;            case 'left':                $pos_x    -= $delta;                $direction = "up";                $delta    *= $delta_mult;                break;            case 'up':                $pos_y    -= $delta;                $direction = "right";                $delta    *= $delta_mult;                break;            }        }    }    /**     * update X and Y coordinates for a table     *     * @param string $db          The database name     * @param array  $cfgRelation relation settings     *     * @return void     * @access private     */    private function _editCoordinates($db, $cfgRelation)    {        for ($i = 0; $i < $this->c_table_rows; $i++) {            $arrvalue = 'c_table_' . $i;            global $$arrvalue;            $arrvalue = $$arrvalue;            if (! isset($arrvalue['x']) || $arrvalue['x'] == '') {                $arrvalue['x'] = 0;            }            if (! isset($arrvalue['y']) || $arrvalue['y'] == '') {                $arrvalue['y'] = 0;            }            if (isset($arrvalue['name']) && $arrvalue['name'] != '--') {                $test_query = 'SELECT * FROM '                    . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($cfgRelation['table_coords'])                    . ' WHERE db_name = \'' .  PMA_sqlAddSlashes($db) . '\''                    . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                    . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                $test_rs = PMA_query_as_controluser($test_query, false, PMA_DBI_QUERY_STORE);                //echo $test_query;                if ($test_rs && PMA_DBI_num_rows($test_rs) > 0) {                    if (isset($arrvalue['delete']) && $arrvalue['delete'] == 'y') {                        $ch_query = 'DELETE FROM '                            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                            . PMA_backquote($cfgRelation['table_coords'])                            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                    } else {                        $ch_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db'])                            . '.' . PMA_backquote($cfgRelation['table_coords']) . ' '                            . 'SET x = ' . $arrvalue['x'] . ', y= ' . $arrvalue['y']                            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                    }                } else {                    $ch_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db'])                        . '.' . PMA_backquote($cfgRelation['table_coords']) . ' '                        . '(db_name, table_name, pdf_page_number, x, y) '                        . 'VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \''                        . PMA_sqlAddSlashes($arrvalue['name']) . '\', \''                        . PMA_sqlAddSlashes($this->chosenPage) . '\','                        . $arrvalue['x'] . ',' . $arrvalue['y'] . ')';                }                //echo $ch_query;                PMA_query_as_controluser($ch_query, false);            } // end if        } // end for    }}?>
<?php  function loadData($type, $data) {    if (!$data) return $data;    $tmp = unpack($type, $data);    return current($tmp);  }  function swap($binValue) {    $result = $binValue{strlen($binValue) - 1};    for($i = strlen($binValue) - 2; $i >= 0 ; $i--) {      $result .= $binValue{$i};    }    return $result;  }  function packDouble($value, $mode = 'LE') {    $value = (double)$value;    $bin = pack("d", $value);    //We test if the conversion of an integer (1) is done as LE or BE by default    switch (pack ('L', 1)) {      case pack ('V', 1): //Little Endian        $result = ($mode == 'LE') ? $bin : swap($bin);      break;      case pack ('N', 1): //Big Endian        $result = ($mode == 'BE') ? $bin : swap($bin);      break;      default: //Some other thing, we just return false        $result = FALSE;    }    return $result;  }  class ShapeFile {    var $FileName;    var $SHPFile;    var $SHXFile;    var $DBFFile;    var $DBFHeader;    var $lastError = "";    var $boundingBox = array("xmin" => 0.0, "ymin" => 0.0, "xmax" => 0.0, "ymax" => 0.0);    var $fileLength = 0;    var $shapeType = 0;    var $records;    function ShapeFile($shapeType, $boundingBox = array("xmin" => 0.0, "ymin" => 0.0, "xmax" => 0.0, "ymax" => 0.0), $FileName = NULL) {      $this->shapeType = $shapeType;      $this->boundingBox = $boundingBox;      $this->FileName = $FileName;      $this->fileLength = 50;    }    function loadFromFile($FileName) {      $this->FileName = $FileName;      if (($this->_openSHPFile()) && ($this->_openDBFFile())) {        $this->_loadHeaders();        $this->_loadRecords();        $this->_closeSHPFile();        $this->_closeDBFFile();      } else {        return false;      }    }    function saveToFile($FileName = NULL) {      if ($FileName != NULL) $this->FileName = $FileName;      if (($this->_openSHPFile(TRUE)) && ($this->_openSHXFile(TRUE)) && ($this->_openDBFFile(TRUE))) {        $this->_saveHeaders();        $this->_saveRecords();        $this->_closeSHPFile();        $this->_closeSHXFile();        $this->_closeDBFFile();      } else {        return false;      }    }    function addRecord($record) {      if ((isset($this->DBFHeader)) && (is_array($this->DBFHeader))) {        $record->updateDBFInfo($this->DBFHeader);      }      $this->fileLength += ($record->getContentLength() + 4);      $this->records[] = $record;      $this->records[count($this->records) - 1]->recordNumber = count($this->records);      return (count($this->records) - 1);    }    function deleteRecord($index) {      if (isset($this->records[$index])) {        $this->fileLength -= ($this->records[$index]->getContentLength() + 4);        for ($i = $index; $i < (count($this->records) - 1); $i++) {          $this->records[$i] = $this->records[$i + 1];        }        unset($this->records[count($this->records) - 1]);        $this->_deleteRecordFromDBF($index);      }    }    function getDBFHeader() {      return $this->DBFHeader;    }    function setDBFHeader($header) {      $this->DBFHeader = $header;      for ($i = 0; $i < count($this->records); $i++) {        $this->records[$i]->updateDBFInfo($header);      }    }    function getIndexFromDBFData($field, $value) {      $result = -1;      for ($i = 0; $i < (count($this->records) - 1); $i++) {        if (isset($this->records[$i]->DBFData[$field]) && (strtoupper($this->records[$i]->DBFData[$field]) == strtoupper($value))) {          $result = $i;        }      }      return $result;    }    function _loadDBFHeader() {      $DBFFile = fopen(str_replace('.*', '.dbf', $this->FileName), 'r');      $result = array();      $buff32 = array();      $i = 1;      $inHeader = true;      while ($inHeader) {        if (!feof($DBFFile)) {          $buff32 = fread($DBFFile, 32);          if ($i > 1) {            if (substr($buff32, 0, 1) == chr(13)) {              $inHeader = false;            } else {              $pos = strpos(substr($buff32, 0, 10), chr(0));              $pos = ($pos == 0 ? 10 : $pos);              $fieldName = substr($buff32, 0, $pos);              $fieldType = substr($buff32, 11, 1);              $fieldLen = ord(substr($buff32, 16, 1));              $fieldDec = ord(substr($buff32, 17, 1));              array_push($result, array($fieldName, $fieldType, $fieldLen, $fieldDec));            }          }          $i++;        } else {          $inHeader = false;        }      }      fclose($DBFFile);      return($result);    }    function _deleteRecordFromDBF($index) {      if (@dbase_delete_record($this->DBFFile, $index)) {        @dbase_pack($this->DBFFile);      }    }    function _loadHeaders() {      fseek($this->SHPFile, 24, SEEK_SET);      $this->fileLength = loadData("N", fread($this->SHPFile, 4));      fseek($this->SHPFile, 32, SEEK_SET);      $this->shapeType = loadData("V", fread($this->SHPFile, 4));      $this->boundingBox = array();      $this->boundingBox["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->DBFHeader = $this->_loadDBFHeader();    }    function _saveHeaders() {      fwrite($this->SHPFile, pack("NNNNNN", 9994, 0, 0, 0, 0, 0));      fwrite($this->SHPFile, pack("N", $this->fileLength));      fwrite($this->SHPFile, pack("V", 1000));      fwrite($this->SHPFile, pack("V", $this->shapeType));      fwrite($this->SHPFile, packDouble($this->boundingBox['xmin']));      fwrite($this->SHPFile, packDouble($this->boundingBox['ymin']));      fwrite($this->SHPFile, packDouble($this->boundingBox['xmax']));      fwrite($this->SHPFile, packDouble($this->boundingBox['ymax']));      fwrite($this->SHPFile, pack("dddd", 0, 0, 0, 0));      fwrite($this->SHXFile, pack("NNNNNN", 9994, 0, 0, 0, 0, 0));      fwrite($this->SHXFile, pack("N", 50 + 4*count($this->records)));      fwrite($this->SHXFile, pack("V", 1000));      fwrite($this->SHXFile, pack("V", $this->shapeType));      fwrite($this->SHXFile, packDouble($this->boundingBox['xmin']));      fwrite($this->SHXFile, packDouble($this->boundingBox['ymin']));      fwrite($this->SHXFile, packDouble($this->boundingBox['xmax']));      fwrite($this->SHXFile, packDouble($this->boundingBox['ymax']));      fwrite($this->SHXFile, pack("dddd", 0, 0, 0, 0));    }    function _loadRecords() {      fseek($this->SHPFile, 100);      while (!feof($this->SHPFile)) {        $bByte = ftell($this->SHPFile);        $record = new ShapeRecord(-1);        $record->loadFromFile($this->SHPFile, $this->DBFFile);        $eByte = ftell($this->SHPFile);        if (($eByte <= $bByte) || ($record->lastError != "")) {          return false;        }        $this->records[] = $record;      }    }    function _saveRecords() {      if (file_exists(str_replace('.*', '.dbf', $this->FileName))) {        @unlink(str_replace('.*', '.dbf', $this->FileName));      }      if (!($this->DBFFile = @dbase_create(str_replace('.*', '.dbf', $this->FileName), $this->DBFHeader))) {        return $this->setError(sprintf("It wasn't possible to create the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));      }      $offset = 50;      if (is_array($this->records) && (count($this->records) > 0)) {        reset($this->records);        while (list($index, $record) = each($this->records)) {          //Save the record to the .shp file          $record->saveToFile($this->SHPFile, $this->DBFFile, $index + 1);          //Save the record to the .shx file          fwrite($this->SHXFile, pack("N", $offset));          fwrite($this->SHXFile, pack("N", $record->getContentLength()));          $offset += (4 + $record->getContentLength());        }      }      @dbase_pack($this->DBFFile);    }    function _openSHPFile($toWrite = false) {      $this->SHPFile = @fopen(str_replace('.*', '.shp', $this->FileName), ($toWrite ? "wb+" : "rb"));      if (!$this->SHPFile) {        return $this->setError(sprintf("It wasn't possible to open the Shape file '%s'", str_replace('.*', '.shp', $this->FileName)));      }      return TRUE;    }    function _closeSHPFile() {      if ($this->SHPFile) {        fclose($this->SHPFile);        $this->SHPFile = NULL;      }    }    function _openSHXFile($toWrite = false) {      $this->SHXFile = @fopen(str_replace('.*', '.shx', $this->FileName), ($toWrite ? "wb+" : "rb"));      if (!$this->SHXFile) {        return $this->setError(sprintf("It wasn't possible to open the Index file '%s'", str_replace('.*', '.shx', $this->FileName)));      }      return TRUE;    }    function _closeSHXFile() {      if ($this->SHXFile) {        fclose($this->SHXFile);        $this->SHXFile = NULL;      }    }    function _openDBFFile($toWrite = false) {      $checkFunction = $toWrite ? "is_writable" : "is_readable";      if (($toWrite) && (!file_exists(str_replace('.*', '.dbf', $this->FileName)))) {        if (!@dbase_create(str_replace('.*', '.dbf', $this->FileName), $this->DBFHeader)) {          return $this->setError(sprintf("It wasn't possible to create the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));        }      }      if ($checkFunction(str_replace('.*', '.dbf', $this->FileName))) {        $this->DBFFile = dbase_open(str_replace('.*', '.dbf', $this->FileName), ($toWrite ? 2 : 0));        if (!$this->DBFFile) {          return $this->setError(sprintf("It wasn't possible to open the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));        }      } else {        return $this->setError(sprintf("It wasn't possible to find the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));      }      return TRUE;    }    function _closeDBFFile() {      if ($this->DBFFile) {        dbase_close($this->DBFFile);        $this->DBFFile = NULL;      }    }    function setError($error) {      $this->lastError = $error;      return false;    }  }  class ShapeRecord {    var $SHPFile = NULL;    var $DBFFile = NULL;    var $recordNumber = NULL;    var $shapeType = NULL;    var $lastError = "";    var $SHPData = array();    var $DBFData = array();    function ShapeRecord($shapeType) {      $this->shapeType = $shapeType;    }    function loadFromFile(&$SHPFile, &$DBFFile) {      $this->SHPFile = $SHPFile;      $this->DBFFile = $DBFFile;      $this->_loadHeaders();      switch ($this->shapeType) {        case 0:          $this->_loadNullRecord();        break;        case 1:          $this->_loadPointRecord();        break;        case 3:          $this->_loadPolyLineRecord();        break;        case 5:          $this->_loadPolygonRecord();        break;        case 8:          $this->_loadMultiPointRecord();        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      $this->_loadDBFData();    }    function saveToFile(&$SHPFile, &$DBFFile, $recordNumber) {      $this->SHPFile = $SHPFile;      $this->DBFFile = $DBFFile;      $this->recordNumber = $recordNumber;      $this->_saveHeaders();      switch ($this->shapeType) {        case 0:          $this->_saveNullRecord();        break;        case 1:          $this->_savePointRecord();        break;        case 3:          $this->_savePolyLineRecord();        break;        case 5:          $this->_savePolygonRecord();        break;        case 8:          $this->_saveMultiPointRecord();        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      $this->_saveDBFData();    }    function updateDBFInfo($header) {      $tmp = $this->DBFData;      unset($this->DBFData);      $this->DBFData = array();      reset($header);      while (list($key, $value) = each($header)) {        $this->DBFData[$value[0]] = (isset($tmp[$value[0]])) ? $tmp[$value[0]] : "";      }    }    function _loadHeaders() {      $this->recordNumber = loadData("N", fread($this->SHPFile, 4));      $tmp = loadData("N", fread($this->SHPFile, 4)); //We read the length of the record      $this->shapeType = loadData("V", fread($this->SHPFile, 4));    }    function _saveHeaders() {      fwrite($this->SHPFile, pack("N", $this->recordNumber));      fwrite($this->SHPFile, pack("N", $this->getContentLength()));      fwrite($this->SHPFile, pack("V", $this->shapeType));    }    function _loadPoint() {      $data = array();      $data["x"] = loadData("d", fread($this->SHPFile, 8));      $data["y"] = loadData("d", fread($this->SHPFile, 8));      return $data;    }    function _savePoint($data) {      fwrite($this->SHPFile, packDouble($data["x"]));      fwrite($this->SHPFile, packDouble($data["y"]));    }    function _loadNullRecord() {      $this->SHPData = array();    }    function _saveNullRecord() {      //Don't save anything    }    function _loadPointRecord() {      $this->SHPData = $this->_loadPoint();    }    function _savePointRecord() {      $this->_savePoint($this->SHPData);    }    function _loadMultiPointRecord() {      $this->SHPData = array();      $this->SHPData["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["numpoints"] = loadData("V", fread($this->SHPFile, 4));      for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {        $this->SHPData["points"][] = $this->_loadPoint();      }    }    function _saveMultiPointRecord() {      fwrite($this->SHPFile, pack("dddd", $this->SHPData["xmin"], $this->SHPData["ymin"], $this->SHPData["xmax"], $this->SHPData["ymax"]));      fwrite($this->SHPFile, pack("V", $this->SHPData["numpoints"]));      for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {        $this->_savePoint($this->SHPData["points"][$i]);      }    }    function _loadPolyLineRecord() {      $this->SHPData = array();      $this->SHPData["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["numparts"]  = loadData("V", fread($this->SHPFile, 4));      $this->SHPData["numpoints"] = loadData("V", fread($this->SHPFile, 4));      for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {        $this->SHPData["parts"][$i] = loadData("V", fread($this->SHPFile, 4));      }      $firstIndex = ftell($this->SHPFile);      $readPoints = 0;      reset($this->SHPData["parts"]);      while (list($partIndex, $partData) = each($this->SHPData["parts"])) {        if (!isset($this->SHPData["parts"][$partIndex]["points"]) || !is_array($this->SHPData["parts"][$partIndex]["points"])) {          $this->SHPData["parts"][$partIndex] = array();          $this->SHPData["parts"][$partIndex]["points"] = array();        }        while (!in_array($readPoints, $this->SHPData["parts"]) && ($readPoints < ($this->SHPData["numpoints"])) && !feof($this->SHPFile)) {          $this->SHPData["parts"][$partIndex]["points"][] = $this->_loadPoint();          $readPoints++;        }      }      fseek($this->SHPFile, $firstIndex + ($readPoints*16));    }    function _savePolyLineRecord() {      fwrite($this->SHPFile, pack("dddd", $this->SHPData["xmin"], $this->SHPData["ymin"], $this->SHPData["xmax"], $this->SHPData["ymax"]));      fwrite($this->SHPFile, pack("VV", $this->SHPData["numparts"], $this->SHPData["numpoints"]));      for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {        fwrite($this->SHPFile, pack("V", count($this->SHPData["parts"][$i])));      }      reset($this->SHPData["parts"]);      foreach ($this->SHPData["parts"] as $partData){        reset($partData["points"]);        while (list($pointIndex, $pointData) = each($partData["points"])) {          $this->_savePoint($pointData);        }      }    }    function _loadPolygonRecord() {      $this->_loadPolyLineRecord();    }    function _savePolygonRecord() {      $this->_savePolyLineRecord();    }    function addPoint($point, $partIndex = 0) {      switch ($this->shapeType) {        case 0:          //Don't add anything        break;        case 1:          //Substitutes the value of the current point          $this->SHPData = $point;        break;        case 3:        case 5:          //Adds a new point to the selected part          if (!isset($this->SHPData["xmin"]) || ($this->SHPData["xmin"] > $point["x"])) $this->SHPData["xmin"] = $point["x"];          if (!isset($this->SHPData["ymin"]) || ($this->SHPData["ymin"] > $point["y"])) $this->SHPData["ymin"] = $point["y"];          if (!isset($this->SHPData["xmax"]) || ($this->SHPData["xmax"] < $point["x"])) $this->SHPData["xmax"] = $point["x"];          if (!isset($this->SHPData["ymax"]) || ($this->SHPData["ymax"] < $point["y"])) $this->SHPData["ymax"] = $point["y"];          $this->SHPData["parts"][$partIndex]["points"][] = $point;          $this->SHPData["numparts"] = count($this->SHPData["parts"]);          $this->SHPData["numpoints"]++;        break;        case 8:          //Adds a new point          if (!isset($this->SHPData["xmin"]) || ($this->SHPData["xmin"] > $point["x"])) $this->SHPData["xmin"] = $point["x"];          if (!isset($this->SHPData["ymin"]) || ($this->SHPData["ymin"] > $point["y"])) $this->SHPData["ymin"] = $point["y"];          if (!isset($this->SHPData["xmax"]) || ($this->SHPData["xmax"] < $point["x"])) $this->SHPData["xmax"] = $point["x"];          if (!isset($this->SHPData["ymax"]) || ($this->SHPData["ymax"] < $point["y"])) $this->SHPData["ymax"] = $point["y"];          $this->SHPData["points"][] = $point;          $this->SHPData["numpoints"]++;        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }    }    function deletePoint($pointIndex = 0, $partIndex = 0) {      switch ($this->shapeType) {        case 0:          //Don't delete anything        break;        case 1:          //Sets the value of the point to zero          $this->SHPData["x"] = 0.0;          $this->SHPData["y"] = 0.0;        break;        case 3:        case 5:          //Deletes the point from the selected part, if exists          if (isset($this->SHPData["parts"][$partIndex]) && isset($this->SHPData["parts"][$partIndex]["points"][$pointIndex])) {            for ($i = $pointIndex; $i < (count($this->SHPData["parts"][$partIndex]["points"]) - 1); $i++) {              $this->SHPData["parts"][$partIndex]["points"][$i] = $this->SHPData["parts"][$partIndex]["points"][$i + 1];            }            unset($this->SHPData["parts"][$partIndex]["points"][count($this->SHPData["parts"][$partIndex]["points"]) - 1]);            $this->SHPData["numparts"] = count($this->SHPData["parts"]);            $this->SHPData["numpoints"]--;          }        break;        case 8:          //Deletes the point, if exists          if (isset($this->SHPData["points"][$pointIndex])) {            for ($i = $pointIndex; $i < (count($this->SHPData["points"]) - 1); $i++) {              $this->SHPData["points"][$i] = $this->SHPData["points"][$i + 1];            }            unset($this->SHPData["points"][count($this->SHPData["points"]) - 1]);            $this->SHPData["numpoints"]--;          }        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }    }    function getContentLength() {      switch ($this->shapeType) {        case 0:          $result = 0;        break;        case 1:          $result = 10;        break;        case 3:        case 5:          $result = 22 + 2*count($this->SHPData["parts"]);          for ($i = 0; $i < count($this->SHPData["parts"]); $i++) {            $result += 8*count($this->SHPData["parts"][$i]["points"]);          }        break;        case 8:          $result = 20 + 8*count($this->SHPData["points"]);        break;        default:          $result = false;          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      return $result;    }    function _loadDBFData() {      $this->DBFData = @dbase_get_record_with_names($this->DBFFile, $this->recordNumber);      unset($this->DBFData["deleted"]);    }    function _saveDBFData() {      unset($this->DBFData["deleted"]);      if ($this->recordNumber <= dbase_numrecords($this->DBFFile)) {        if (!dbase_replace_record($this->DBFFile, array_values($this->DBFData), $this->recordNumber)) {          $this->setError("I wasn't possible to update the information in the DBF file.");        }      } else {        if (!dbase_add_record($this->DBFFile, array_values($this->DBFData))) {          $this->setError("I wasn't possible to add the information to the DBF file.");        }      }    }    function setError($error) {      $this->lastError = $error;      return false;    }  }?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * display the binary logs and the content of the selected * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work, provides $binary_logs */require_once './libraries/server_common.inc.php';/** * Displays the links */require_once './libraries/server_links.inc.php';$url_params = array();/** * Need to find the real end of rows? */if (! isset($_REQUEST['pos'])) {    $pos = 0;} else {    /* We need this to be a integer */    $pos = (int) $_REQUEST['pos'];}if (! isset($_REQUEST['log']) || ! array_key_exists($_REQUEST['log'], $binary_logs)) {    $_REQUEST['log'] = '';} else {    $url_params['log'] = $_REQUEST['log'];}$sql_query = 'SHOW BINLOG EVENTS';if (! empty($_REQUEST['log'])) {    $sql_query .= ' IN \'' . $_REQUEST['log'] . '\'';}if ($GLOBALS['cfg']['MaxRows'] !== 'all') {    $sql_query .= ' LIMIT ' . $pos . ', ' . (int) $GLOBALS['cfg']['MaxRows'];}/** * Sends the query */$result = PMA_DBI_query($sql_query);/** * prepare some vars for displaying the result table */// Gets the list of fields propertiesif (isset($result) && $result) {    $num_rows = PMA_DBI_num_rows($result);} else {    $num_rows = 0;}if (empty($_REQUEST['dontlimitchars'])) {    $dontlimitchars = false;} else {    $dontlimitchars = true;    $url_params['dontlimitchars'] = 1;}/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('s_tbl.png') : '')   . '    ' . __('Binary log') . "\n"   . '</h2>' . "\n";/** * Display log selector. */if (count($binary_logs) > 1) {    echo '<form action="server_binlog.php" method="get">';    echo PMA_generate_common_hidden_inputs($url_params);    echo '<fieldset><legend>';    echo __('Select binary log to view');    echo '</legend><select name="log">';    $full_size = 0;    foreach ($binary_logs as $each_log) {        echo '<option value="' . $each_log['Log_name'] . '"';        if ($each_log['Log_name'] == $_REQUEST['log']) {            echo ' selected="selected"';        }        echo '>' . $each_log['Log_name'];        if (isset($each_log['File_size'])) {            $full_size += $each_log['File_size'];            echo ' (' . implode(' ', PMA_formatByteDown($each_log['File_size'], 3, 2)) . ')';        }        echo '</option>';    }    echo '</select> ';    echo count($binary_logs) . ' ' . __('Files') . ', ';    if ($full_size > 0) {        echo implode(' ', PMA_formatByteDown($full_size));    }    echo '</fieldset>';    echo '<fieldset class="tblFooters">';    echo '<input type="submit" value="' . __('Go') . '" />';    echo '</fieldset>';    echo '</form>';}PMA_showMessage(PMA_Message::success());/** * Displays the page */?><table border="0" cellpadding="2" cellspacing="1"><thead><tr>    <td colspan="6" align="center"><?php// we do not now how much rows are in the binlog// so we can just force 'NEXT' buttonif ($pos > 0) {    $this_url_params = $url_params;    if ($pos > $GLOBALS['cfg']['MaxRows']) {        $this_url_params['pos'] = $pos - $GLOBALS['cfg']['MaxRows'];    }    echo '<a href="./server_binlog.php' . PMA_generate_common_url($this_url_params) . '"';    if ($GLOBALS['cfg']['NavigationBarIconic']) {        echo ' title="' . _pgettext('Previous page', 'Previous') . '">';    } else {        echo '>' . _pgettext('Previous page', 'Previous');    } // end if... else...    echo ' &lt; </a> - ';}$this_url_params = $url_params;if ($pos > 0) {    $this_url_params['pos'] = $pos;}if ($dontlimitchars) {    unset($this_url_params['dontlimitchars']);    ?>        <a href="./server_binlog.php<?php echo PMA_generate_common_url($this_url_params); ?>"            title="<?php __('Truncate Shown Queries'); ?>">                <img src="<?php echo $pmaThemeImage; ?>s_partialtext.png"                    alt="<?php echo __('Truncate Shown Queries'); ?>" /></a>    <?php} else {    $this_url_params['dontlimitchars'] = 1;    ?>        <a href="./server_binlog.php<?php echo PMA_generate_common_url($this_url_params); ?>"            title="<?php __('Show Full Queries'); ?>">                <img src="<?php echo $pmaThemeImage; ?>s_fulltext.png"                    alt="<?php echo __('Show Full Queries'); ?>" /></a>    <?php}// we do not now how much rows are in the binlog// so we can just force 'NEXT' buttonif ($num_rows >= $GLOBALS['cfg']['MaxRows']) {    $this_url_params = $url_params;    $this_url_params['pos'] = $pos + $GLOBALS['cfg']['MaxRows'];    echo ' - <a href="./server_binlog.php' . PMA_generate_common_url($this_url_params) . '"';    if ($GLOBALS['cfg']['NavigationBarIconic']) {        echo ' title="' . _pgettext('Next page', 'Next') . '">';    } else {        echo '>' . _pgettext('Next page', 'Next');    } // end if... else...    echo ' &gt; </a>';}?>    </td></tr><tr>    <th><?php echo __('Log name'); ?></th>    <th><?php echo __('Position'); ?></th>    <th><?php echo __('Event type'); ?></th>    <th><?php echo __('Server ID'); ?></th>    <th><?php echo __('Original position'); ?></th>    <th><?php echo __('Information'); ?></th></tr></thead><tbody><?php$odd_row = true;while ($value = PMA_DBI_fetch_assoc($result)) {    if (! $dontlimitchars && PMA_strlen($value['Info']) > $GLOBALS['cfg']['LimitChars']) {        $value['Info'] = PMA_substr($value['Info'], 0, $GLOBALS['cfg']['LimitChars']) . '...';    }    ?><tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">    <td>&nbsp;<?php echo $value['Log_name']; ?>&nbsp;</td>    <td align="right">&nbsp;<?php echo $value['Pos']; ?>&nbsp;</td>    <td>&nbsp;<?php echo $value['Event_type']; ?>&nbsp;</td>    <td align="right">&nbsp;<?php echo $value['Server_id']; ?>&nbsp;</td>    <td align="right">&nbsp;<?php echo isset($value['Orig_log_pos']) ? $value['Orig_log_pos'] : $value['End_log_pos']; ?>&nbsp;</td>    <td>&nbsp;<?php echo htmlspecialchars($value['Info']); ?>&nbsp;</td></tr>    <?php    $odd_row = !$odd_row;}?></tbody></table><?php/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/** * Enter description here... * @package PhpMyAdmin * *//** * Database listing. */require_once './libraries/List_Database.class.php';/** * phpMyAdmin main Controller * * * * @package PhpMyAdmin */class PMA{    /**     * Holds database list     *     * @var PMA_List_Database     */    protected $databases = null;    /**     * DBMS user link     *     * @var resource     */    protected $userlink = null;    /**     * DBMS control link     *     * @var resource     */    protected $controllink = null;    /**     * magic access to protected/inaccessible members/properties     *     * @see http://php.net/language.oop5.overloading     *     * @param string $param     * @return mixed     */    public function __get($param)    {        switch ($param) {            case 'databases' :                return $this->getDatabaseList();                break;            case 'userlink' :                return $this->userlink;                break;            case 'controllink' :                return $this->controllink;                break;        }        return null;    }    /**     * magic access to protected/inaccessible members/properties     *     * @see http://php.net/language.oop5.overloading     *     * @param string $param     * @param mixed  $value     */    public function __set($param, $value)    {        switch ($param) {            case 'userlink' :                $this->userlink = $value;                break;            case 'controllink' :                $this->controllink = $value;                break;        }    }    /**     * Accessor to PMA::$databases     *     * @return PMA_List_Databases     */    public function getDatabaseList()    {        if (null === $this->databases) {            $this->databases = new PMA_List_Database($this->userlink, $this->controllink);        }        return $this->databases;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Produce a PDF report (export) from a query * * @package PhpMyAdmin-Export * @subpackage PDF */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['pdf'] = array(        'text' => __('PDF'),        'extension' => 'pdf',        'mime_type' => 'application/pdf',        'force_file' => true,        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'message_only', 'name' => 'explanation', 'text' => __('(Generates a report containing the data of a single table)')),            array('type' => 'text', 'name' => 'report_title', 'text' => __('Report title:')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );} else {    include_once './libraries/PDF.class.php';    /**     * Adapted from a LGPL script by Philip Clarke     * @package PhpMyAdmin-Export     * @subpackage PDF     */    class PMA_Export_PDF extends PMA_PDF    {        var $tablewidths;        var $headerset;        function checkPageBreak($h = 0, $y = '', $addpage = true)        {            if ($this->empty_string($y)) {                $y = $this->y;            }            $current_page = $this->page;            if ((($y + $h) > $this->PageBreakTrigger) AND (! $this->InFooter) AND ($this->AcceptPageBreak())) {                if ($addpage) {                    //Automatic page break                    $x = $this->x;                    $this->AddPage($this->CurOrientation);                    $this->y = $this->dataY;                    $oldpage = $this->page - 1;                    if ($this->rtl) {                        if ($this->pagedim[$this->page]['orm'] != $this->pagedim[$oldpage]['orm']) {                            $this->x = $x - ($this->pagedim[$this->page]['orm'] - $this->pagedim[$oldpage]['orm']);                        } else {                            $this->x = $x;                        }                    } else {                        if ($this->pagedim[$this->page]['olm'] != $this->pagedim[$oldpage]['olm']) {                            $this->x = $x + ($this->pagedim[$this->page]['olm'] - $this->pagedim[$oldpage]['olm']);                        } else {                            $this->x = $x;                        }                    }                }                return true;            }            if ($current_page != $this->page) {                // account for columns mode                return true;            }            return false;        }        function Header()        {            global $maxY;            // Check if header for this page already exists            if (! isset($this->headerset[$this->page])) {                $fullwidth = 0;                foreach ($this->tablewidths as $width) {                    $fullwidth += $width;                }                $this->SetY(($this->tMargin) - ($this->FontSizePt / $this->k) * 5);                $this->cellFontSize = $this->FontSizePt ;                $this->SetFont(PMA_PDF_FONT, '', ($this->titleFontSize ? $this->titleFontSize : $this->FontSizePt));                $this->Cell(0, $this->FontSizePt, $this->titleText, 0, 1, 'C');                $this->SetFont(PMA_PDF_FONT, '', $this->cellFontSize);                $this->SetY(($this->tMargin) - ($this->FontSizePt / $this->k) * 2.5);                $this->Cell(                    0, $this->FontSizePt,                    __('Database') . ': ' . $this->currentDb . ',  ' . __('Table') . ': ' . $this->currentTable,                    0, 1, 'L'                );                $l = ($this->lMargin);                foreach ($this->colTitles as $col => $txt) {                    $this->SetXY($l, ($this->tMargin));                    $this->MultiCell($this->tablewidths[$col], $this->FontSizePt, $txt);                    $l += $this->tablewidths[$col] ;                    $maxY = ($maxY < $this->getY()) ? $this->getY() : $maxY ;                }                $this->SetXY($this->lMargin, $this->tMargin);                $this->setFillColor(200, 200, 200);                $l = ($this->lMargin);                foreach ($this->colTitles as $col => $txt) {                    $this->SetXY($l, $this->tMargin);                    $this->cell($this->tablewidths[$col], $maxY-($this->tMargin), '', 1, 0, 'L', 1);                    $this->SetXY($l, $this->tMargin);                    $this->MultiCell($this->tablewidths[$col], $this->FontSizePt, $txt, 0, 'C');                    $l += $this->tablewidths[$col];                }                $this->setFillColor(255, 255, 255);                // set headerset                $this->headerset[$this->page] = 1;            }            $this->dataY = $maxY;        }        function morepagestable($lineheight=8)        {            // some things to set and 'remember'            $l = $this->lMargin;            $startheight = $h = $this->dataY;            $startpage = $currpage = $this->page;            // calculate the whole width            $fullwidth = 0;            foreach ($this->tablewidths as $width) {                $fullwidth += $width;            }            // Now let's start to write the table            $row = 0;            $tmpheight = array();            $maxpage = $this->page;            while ($data = PMA_DBI_fetch_row($this->results)) {                $this->page = $currpage;                // write the horizontal borders                $this->Line($l, $h, $fullwidth+$l, $h);                // write the content and remember the height of the highest col                foreach ($data as $col => $txt) {                    $this->page = $currpage;                    $this->SetXY($l, $h);                    if ($this->tablewidths[$col] > 0) {                        $this->MultiCell($this->tablewidths[$col], $lineheight, $txt, 0, $this->colAlign[$col]);                        $l += $this->tablewidths[$col];                    }                    if (!isset($tmpheight[$row.'-'.$this->page])) {                        $tmpheight[$row.'-'.$this->page] = 0;                    }                    if ($tmpheight[$row.'-'.$this->page] < $this->GetY()) {                        $tmpheight[$row.'-'.$this->page] = $this->GetY();                    }                    if ($this->page > $maxpage) {                        $maxpage = $this->page;                    }                    unset($data[$col]);                }                // get the height we were in the last used page                $h = $tmpheight[$row.'-'.$maxpage];                // set the "pointer" to the left margin                $l = $this->lMargin;                // set the $currpage to the last page                $currpage = $maxpage;                unset($data[$row]);                $row++;            }            // draw the borders            // we start adding a horizontal line on the last page            $this->page = $maxpage;            $this->Line($l, $h, $fullwidth+$l, $h);            // now we start at the top of the document and walk down            for ($i = $startpage; $i <= $maxpage; $i++) {                $this->page = $i;                $l = $this->lMargin;                $t = ($i == $startpage) ? $startheight : $this->tMargin;                $lh = ($i == $maxpage) ? $h : $this->h-$this->bMargin;                $this->Line($l, $t, $l, $lh);                foreach ($this->tablewidths as $width) {                    $l += $width;                    $this->Line($l, $t, $l, $lh);                }            }            // set it to the last page, if not it'll cause some problems            $this->page = $maxpage;        }        function setAttributes($attr = array())        {            foreach ($attr as $key => $val) {                $this->$key = $val ;            }        }        function setTopMargin($topMargin)        {            $this->tMargin = $topMargin;        }        function mysql_report($query)        {            unset($this->tablewidths);            unset($this->colTitles);            unset($this->titleWidth);            unset($this->colFits);            unset($this->display_column);            unset($this->colAlign);            /**             * Pass 1 for column widths             */            $this->results = PMA_DBI_query($query, null, PMA_DBI_QUERY_UNBUFFERED);            $this->numFields  = PMA_DBI_num_fields($this->results);            $this->fields = PMA_DBI_get_fields_meta($this->results);            // sColWidth = starting col width (an average size width)            $availableWidth = $this->w - $this->lMargin - $this->rMargin;            $this->sColWidth = $availableWidth / $this->numFields;            $totalTitleWidth = 0;            // loop through results header and set initial col widths/ titles/ alignment            // if a col title is less than the starting col width, reduce that column size            $colFits = array();            for ($i = 0; $i < $this->numFields; $i++) {                $stringWidth = $this->getstringwidth($this->fields[$i]->name) + 6 ;                // save the real title's width                $titleWidth[$i] = $stringWidth;                $totalTitleWidth += $stringWidth;                // set any column titles less than the start width to the column title width                if ($stringWidth < $this->sColWidth) {                    $colFits[$i] = $stringWidth ;                }                $this->colTitles[$i] = $this->fields[$i]->name;                $this->display_column[$i] = true;                switch ($this->fields[$i]->type) {                case 'int':                    $this->colAlign[$i] = 'R';                    break;                case 'blob':                case 'tinyblob':                case 'mediumblob':                case 'longblob':                    /**                     * @todo do not deactivate completely the display                     * but show the field's name and [BLOB]                     */                    if (stristr($this->fields[$i]->flags, 'BINARY')) {                        $this->display_column[$i] = false;                        unset($this->colTitles[$i]);                    }                    $this->colAlign[$i] = 'L';                    break;                default:                    $this->colAlign[$i] = 'L';                }            }            // title width verification            if ($totalTitleWidth > $availableWidth) {                $adjustingMode = true;            } else {                $adjustingMode = false;                // we have enough space for all the titles at their                // original width so use the true title's width                foreach ($titleWidth as $key => $val) {                    $colFits[$key] = $val;                }            }            // loop through the data; any column whose contents            // is greater than the column size is resized            /**              * @todo force here a LIMIT to avoid reading all rows              */            while ($row = PMA_DBI_fetch_row($this->results)) {                foreach ($colFits as $key => $val) {                    $stringWidth = $this->getstringwidth($row[$key]) + 6 ;                    if ($adjustingMode && ($stringWidth > $this->sColWidth)) {                        // any column whose data's width is bigger than                        // the start width is now discarded                        unset($colFits[$key]);                    } else {                        // if data's width is bigger than the current column width,                        // enlarge the column (but avoid enlarging it if the                        // data's width is very big)                        if ($stringWidth > $val && $stringWidth < ($this->sColWidth * 3)) {                            $colFits[$key] = $stringWidth ;                        }                    }                }            }            $totAlreadyFitted = 0;            foreach ($colFits as $key => $val) {                // set fitted columns to smallest size                $this->tablewidths[$key] = $val;                // to work out how much (if any) space has been freed up                $totAlreadyFitted += $val;            }            if ($adjustingMode) {                $surplus = (sizeof($colFits) * $this->sColWidth) - $totAlreadyFitted;                $surplusToAdd = $surplus / ($this->numFields - sizeof($colFits));            } else {                $surplusToAdd = 0;            }            for ($i=0; $i < $this->numFields; $i++) {                if (!in_array($i, array_keys($colFits))) {                    $this->tablewidths[$i] = $this->sColWidth + $surplusToAdd;                }                if ($this->display_column[$i] == false) {                    $this->tablewidths[$i] = 0;                }            }            ksort($this->tablewidths);            PMA_DBI_free_result($this->results);            // Pass 2            $this->results = PMA_DBI_query($query, null, PMA_DBI_QUERY_UNBUFFERED);            $this->setY($this->tMargin);            $this->AddPage();            $this->SetFont(PMA_PDF_FONT, '', 9);            $this->morepagestable($this->FontSizePt);            PMA_DBI_free_result($this->results);        } // end of mysql_report function    } // end of PMA_Export_PDF class    $pdf = new PMA_Export_PDF('L', 'pt', 'A3');    /**     * Finalize the pdf.     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        global $pdf;        // instead of $pdf->Output():        if (!PMA_exportOutputHandler($pdf->getPDFData())) {            return false;        }        return true;    }    /**     * Initialize the pdf to export data.     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        global $pdf_report_title;        global $pdf;        $pdf->Open();        $attr = array('titleFontSize' => 18, 'titleText' => $pdf_report_title);        $pdf->setAttributes($attr);        $pdf->setTopMargin(30);        return true;    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        return true;    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in PDF format     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $pdf;        $attr=array('currentDb' => $db, 'currentTable' => $table);        $pdf->setAttributes($attr);        $pdf->mysql_report($sql_query);        return true;    } // end of the 'PMA_exportData()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Prepares the work and runs some other scripts if required */if (! empty($submit_mult) && $submit_mult != __('With selected:') && (! empty($selected_db)  || ! empty($selected_tbl)  || ! empty($selected_fld)  || ! empty($rows_to_delete))) {    define('PMA_SUBMIT_MULT', 1);    if (isset($selected_db) && !empty($selected_db)) {        // coming from server database view - do something with selected databases        $selected     = $selected_db;        $what         = 'drop_db';    } elseif (isset($selected_tbl) && !empty($selected_tbl)) {        // coming from database structure view - do something with selected tables        if ($submit_mult == 'print') {            include './tbl_printview.php';        } else {           $selected = $selected_tbl;           switch ($submit_mult) {               case 'add_prefix_tbl':               case 'replace_prefix_tbl':               case 'copy_tbl_change_prefix':               case 'drop_db':               case 'drop_tbl':               case 'empty_tbl':                   $what = $submit_mult;                   break;               case 'check_tbl':               case 'optimize_tbl':               case 'repair_tbl':               case 'analyze_tbl':                   $query_type = $submit_mult;                   unset($submit_mult);                   $mult_btn   = __('Yes');                   break;               case 'export':                   unset($submit_mult);                   include 'db_export.php';                   exit;                   break;           } // end switch        }    } elseif (isset($selected_fld) && !empty($selected_fld)) {        // coming from table structure view - do something with selected columns/fileds        $selected     = $selected_fld;        switch ($submit_mult) {            case 'drop':                $what     = 'drop_fld';                break;            case 'primary':                // Gets table primary key                PMA_DBI_select_db($db);                $result      = PMA_DBI_query('SHOW KEYS FROM ' . PMA_backquote($table) . ';');                $primary     = '';                while ($row = PMA_DBI_fetch_assoc($result)) {                    // Backups the list of primary keys                    if ($row['Key_name'] == 'PRIMARY') {                        $primary .= $row['Column_name'] . ', ';                    }                } // end while                PMA_DBI_free_result($result);                if (empty($primary)) {                    // no primary key, so we can safely create new                    unset($submit_mult);                    $query_type = 'primary_fld';                    $mult_btn   = __('Yes');                } else {                    // primary key exists, so lets as user                    $what = 'primary_fld';                }                break;            case 'index':                unset($submit_mult);                $query_type = 'index_fld';                $mult_btn   = __('Yes');                break;            case 'unique':                unset($submit_mult);                $query_type = 'unique_fld';                $mult_btn   = __('Yes');                break;            case 'spatial':                unset($submit_mult);                $query_type = 'spatial_fld';                $mult_btn   = __('Yes');                break;            case 'ftext':                unset($submit_mult);                $query_type = 'fulltext_fld';                $mult_btn   = __('Yes');                break;            case 'change':                include './tbl_alter.php';                break;            case 'browse':                // this should already be handled by tbl_structure.php        }    } else {        // coming from browsing - do something with selected rows        $what = 'row_delete';        $selected = $rows_to_delete;    }} // end if/** * Displays the confirmation form if required */if (!empty($submit_mult) && !empty($what)) {    unset($message);    include_once './libraries/header.inc.php';    if (strlen($table)) {        include './libraries/tbl_common.php';        $url_query .= '&amp;goto=tbl_sql.php&amp;back=tbl_sql.php';        include './libraries/tbl_info.inc.php';        include_once './libraries/tbl_links.inc.php';    } elseif (strlen($db)) {        include './libraries/db_common.inc.php';        include './libraries/db_info.inc.php';    } else {        include_once './libraries/server_common.inc.php';        include_once './libraries/server_links.inc.php';    }    // Builds the query    $full_query     = '';    if ($what == 'drop_tbl') {        $full_query_views = '';    }    $selected_cnt   = count($selected);    $i = 0;    foreach ($selected AS $idx => $sval) {        switch ($what) {            case 'row_delete':                $full_query .= htmlspecialchars($sval)                    . ';<br />';                break;            case 'drop_db':                $full_query .= 'DROP DATABASE '                    . PMA_backquote(htmlspecialchars($sval))                    . ';<br />';                $reload = 1;                break;            case 'drop_tbl':                $current = $sval;                if (!empty($views) && in_array($current, $views)) {                    $full_query_views .= (empty($full_query_views) ? 'DROP VIEW ' : ', ')                        . PMA_backquote(htmlspecialchars($current));                } else {                    $full_query .= (empty($full_query) ? 'DROP TABLE ' : ', ')                        . PMA_backquote(htmlspecialchars($current));                }                break;            case 'empty_tbl':                $full_query .= 'TRUNCATE ';                $full_query .= PMA_backquote(htmlspecialchars($sval))                            . ';<br />';                break;            case 'primary_fld':                if ($full_query == '') {                    $full_query .= 'ALTER TABLE '                        . PMA_backquote(htmlspecialchars($table))                        . '<br />&nbsp;&nbsp;DROP PRIMARY KEY,'                        . '<br />&nbsp;&nbsp; ADD PRIMARY KEY('                        . '<br />&nbsp;&nbsp;&nbsp;&nbsp; '                        . PMA_backquote(htmlspecialchars($sval))                        . ',';                } else {                    $full_query .= '<br />&nbsp;&nbsp;&nbsp;&nbsp; '                        . PMA_backquote(htmlspecialchars($sval))                        . ',';                }                if ($i == $selected_cnt-1) {                    $full_query = preg_replace('@,$@', ');<br />', $full_query);                }                break;            case 'drop_fld':                if ($full_query == '') {                    $full_query .= 'ALTER TABLE '                        . PMA_backquote(htmlspecialchars($table));                }                $full_query .= '<br />&nbsp;&nbsp;DROP '                    . PMA_backquote(htmlspecialchars($sval))                    . ',';                if ($i == $selected_cnt - 1) {                    $full_query = preg_replace('@,$@', ';<br />', $full_query);                }                break;        } // end switch        $i++;    }    if ($what == 'drop_tbl') {        if (!empty($full_query)) {            $full_query .= ';<br />' . "\n";        }        if (!empty($full_query_views)) {            $full_query .= $full_query_views . ';<br />' . "\n";        }        unset($full_query_views);    }    // Displays the confirmation form    $_url_params = array(        'query_type' => $what,        'reload' => (! empty($reload) ? 1 : 0),    );    if (strpos(' ' . $action, 'db_') == 1) {        $_url_params['db']= $db;    } elseif (strpos(' ' . $action, 'tbl_') == 1 || $what == 'row_delete') {        $_url_params['db']= $db;        $_url_params['table']= $table;    }    foreach ($selected as $idx => $sval) {        $_url_params['selected'][] = $sval;    }    if ($what == 'drop_tbl' && !empty($views)) {        foreach ($views as $current) {            $_url_params['views'][] = $current;       }    }    if ($what == 'row_delete') {        $_url_params['original_sql_query'] = $original_sql_query;        if (! empty($original_url_query)) {            $_url_params['original_url_query'] = $original_url_query;        }    }    ?><form action="<?php echo $action; ?>" method="post">    <?php    echo PMA_generate_common_hidden_inputs($_url_params);    ?><?php if ($what == 'replace_prefix_tbl' || $what == 'copy_tbl_change_prefix') { ?>        <fieldset class = "input">                <legend><?php echo ($what == 'replace_prefix_tbl' ? __('Replace table prefix') : __('Copy table with prefix')) ?>:</legend>                <table>                <tr>                <td><?php echo __('From'); ?></td><td><input type="text" name="from_prefix" id="initialPrefix"</td>                </tr>                <tr>                <td><?php echo __('To'); ?> </td><td><input type="text" name="to_prefix" id="newPrefix"</td>                </tr>                </table>        </fieldset>        <fieldset class="tblFooters">                <button type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes"><?php echo __('Submit'); ?></button>        </fieldset>    <?php        } elseif ($what == 'add_prefix_tbl') { ?>        <fieldset class = "input">                <legend><?php echo __('Add table prefix') ?>:</legend>                <table>                <tr>                <td><?php echo __('Add prefix'); ?></td>     <td><input type="text" name="add_prefix" id="txtPrefix"</td>                </tr>                </table>        </fieldset>        <fieldset class="tblFooters">                <button type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes"><?php echo __('Submit'); ?></button>        </fieldset>    <?php        } else { ?>    <fieldset class="confirmation">        <legend><?php echo ($what == 'drop_db' ? __('You are about to DESTROY a complete database!') . '&nbsp;' : '') . __('Do you really want to '); ?>:</legend>        <tt><?php echo $full_query; ?></tt>    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes" />        <input type="submit" name="mult_btn" value="<?php echo __('No'); ?>" id="buttonNo" />    </fieldset>    <?php    }    include './libraries/footer.inc.php';} elseif ($mult_btn == __('Yes')) {/** * Executes the query - dropping rows, columns/fields, tables or dbs */    if ($query_type == 'drop_db' || $query_type == 'drop_tbl' || $query_type == 'drop_fld') {        include_once './libraries/relation_cleanup.lib.php';    }    $sql_query      = '';    if ($query_type == 'drop_tbl') {        $sql_query_views = '';    }    $selected_cnt   = count($selected);    $run_parts      = false; // whether to run query after each pass    $use_sql        = false; // whether to include sql.php at the end (to display results)    if ($query_type == 'primary_fld') {        // Gets table primary key        PMA_DBI_select_db($db);        $result      = PMA_DBI_query('SHOW KEYS FROM ' . PMA_backquote($table) . ';');        $primary     = '';        while ($row = PMA_DBI_fetch_assoc($result)) {            // Backups the list of primary keys            if ($row['Key_name'] == 'PRIMARY') {                $primary .= $row['Column_name'] . ', ';            }        } // end while        PMA_DBI_free_result($result);    }    $rebuild_database_list = false;    for ($i = 0; $i < $selected_cnt; $i++) {        switch ($query_type) {            case 'row_delete':                $a_query = $selected[$i];                $run_parts = true;                break;            case 'drop_db':                PMA_relationsCleanupDatabase($selected[$i]);                $a_query   = 'DROP DATABASE '                           . PMA_backquote($selected[$i]);                $reload    = 1;                $run_parts = true;                $rebuild_database_list = true;                break;            case 'drop_tbl':                PMA_relationsCleanupTable($db, $selected[$i]);                $current = $selected[$i];                if (!empty($views) && in_array($current, $views)) {                    $sql_query_views .= (empty($sql_query_views) ? 'DROP VIEW ' : ', ')                              . PMA_backquote($current);                } else {                    $sql_query .= (empty($sql_query) ? 'DROP TABLE ' : ', ')                               . PMA_backquote($current);                }                $reload    = 1;                break;            case 'check_tbl':                $sql_query .= (empty($sql_query) ? 'CHECK TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'optimize_tbl':                $sql_query .= (empty($sql_query) ? 'OPTIMIZE TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'analyze_tbl':                $sql_query .= (empty($sql_query) ? 'ANALYZE TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'repair_tbl':                $sql_query .= (empty($sql_query) ? 'REPAIR TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'empty_tbl':                $a_query = 'TRUNCATE ';                $a_query .= PMA_backquote($selected[$i]);                $run_parts = true;                break;            case 'drop_fld':                PMA_relationsCleanupColumn($db, $table, $selected[$i]);                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) : ',')                           . ' DROP ' . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ';' : '');                break;            case 'primary_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . (empty($primary) ? '' : ' DROP PRIMARY KEY,') . ' ADD PRIMARY KEY( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'index_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD INDEX( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'unique_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD UNIQUE( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'spatial_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD SPATIAL( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'fulltext_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD FULLTEXT( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;        case 'add_prefix_tbl':                $newtablename = $add_prefix . $selected[$i];                $a_query = 'ALTER TABLE ' . PMA_backquote($selected[$i]) . ' RENAME ' . PMA_backquote($newtablename) ; // ADD PREFIX TO TABLE NAME                $run_parts = true;                break;            case 'replace_prefix_tbl':                $current = $selected[$i];                $newtablename = preg_replace("/^" . $from_prefix . "/", $to_prefix, $current);                $a_query = 'ALTER TABLE ' . PMA_backquote($selected[$i]) . ' RENAME ' . PMA_backquote($newtablename) ; // CHANGE PREFIX PATTERN                $run_parts = true;                break;            case 'copy_tbl_change_prefix':                $current = $selected[$i];                $newtablename = preg_replace("/^" . $from_prefix . "/", $to_prefix, $current);                $a_query = 'CREATE TABLE ' . PMA_backquote($newtablename) . ' SELECT * FROM ' . PMA_backquote($selected[$i]) ; // COPY TABLE AND CHANGE PREFIX PATTERN                $run_parts = true;                break;        } // end switch        // All "DROP TABLE", "DROP FIELD", "OPTIMIZE TABLE" and "REPAIR TABLE"        // statements will be run at once below        if ($run_parts) {            $sql_query .= $a_query . ';' . "\n";            if ($query_type != 'drop_db') {                PMA_DBI_select_db($db);            }            $result = PMA_DBI_query($a_query);        } // end if    } // end for    if ($query_type == 'drop_tbl') {        if (!empty($sql_query)) {        $sql_query .= ';';    } elseif (!empty($sql_query_views)) {        $sql_query = $sql_query_views . ';';            unset($sql_query_views);        }    }    if ($use_sql) {        include './sql.php';    } elseif (!$run_parts) {        PMA_DBI_select_db($db);        $result = PMA_DBI_try_query($sql_query);        if ($result && !empty($sql_query_views)) {            $sql_query .= ' ' . $sql_query_views . ';';            $result = PMA_DBI_try_query($sql_query_views);            unset($sql_query_views);        }        if (! $result) {            $message = PMA_Message::error(PMA_DBI_getError());        }    }    if ($rebuild_database_list) {        // avoid a problem with the database list navigator        // when dropping a db from server_databases        $GLOBALS['pma']->databases->build();    }} else {    $message = PMA_Message::success(__('No change'));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple interface for creating OASIS OpenDocument files. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Load ZIP handler. */require_once './libraries/zip.lib.php';$GLOBALS['OpenDocumentNS'] = 'xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" '                . 'xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" '                . 'xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" '                . 'xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" '                . 'xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" ';/** * Minimalistic creator of OASIS OpenDocument * * @param string      desired MIME type * @param string      document content * * @return  string      OASIS OpenDocument data * * @access  public */function PMA_createOpenDocument($mime, $data){    $zipfile = new zipfile();    $zipfile -> addFile($mime, 'mimetype');    $zipfile -> addFile($data, 'content.xml');    $zipfile -> addFile('<?xml version="1.0" encoding="UTF-8"?'. '>'        . '<office:document-meta '            . 'xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" '            . 'xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" '            . 'office:version="1.0">'            . '<office:meta>'                . '<meta:generator>phpMyAdmin ' . PMA_VERSION . '</meta:generator>'                . '<meta:initial-creator>phpMyAdmin ' . PMA_VERSION . '</meta:initial-creator>'                . '<meta:creation-date>' . strftime('%Y-%m-%dT%H:%M:%S') . '</meta:creation-date>'            . '</office:meta>'        . '</office:document-meta>',        'meta.xml');    $zipfile -> addFile('<?xml version="1.0" encoding="UTF-8"?' . '>'        . '<office:document-styles '. $GLOBALS['OpenDocumentNS'] . 'office:version="1.0">'            . '<office:font-face-decls>'                . '<style:font-face style:name="Arial Unicode MS" svg:font-family="\'Arial Unicode MS\'" style:font-pitch="variable"/>'                . '<style:font-face style:name="DejaVu Sans1" svg:font-family="\'DejaVu Sans\'" style:font-pitch="variable"/>'                . '<style:font-face style:name="HG Mincho Light J" svg:font-family="\'HG Mincho Light J\'" style:font-pitch="variable"/>'                . '<style:font-face style:name="DejaVu Serif" svg:font-family="\'DejaVu Serif\'" style:font-family-generic="roman" style:font-pitch="variable"/>'                . '<style:font-face style:name="Thorndale" svg:font-family="Thorndale" style:font-family-generic="roman" style:font-pitch="variable"/>'                . '<style:font-face style:name="DejaVu Sans" svg:font-family="\'DejaVu Sans\'" style:font-family-generic="swiss" style:font-pitch="variable"/>'            . '</office:font-face-decls>'            . '<office:styles>'                . '<style:default-style style:family="paragraph">'                    . '<style:paragraph-properties fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="0.4925in" style:writing-mode="page"/>'                    . '<style:text-properties style:use-window-font-color="true" style:font-name="DejaVu Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:font-name-asian="DejaVu Sans1" style:font-size-asian="12pt" style:language-asian="none" style:country-asian="none" style:font-name-complex="DejaVu Sans1" style:font-size-complex="12pt" style:language-complex="none" style:country-complex="none" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>'                . '</style:default-style>'                . '<style:style style:name="Standard" style:family="paragraph" style:class="text"/>'                . '<style:style style:name="Text_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">'                    . '<style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0.0835in"/>'                . '</style:style>'                . '<style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_body" style:class="text">'                    . '<style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in" fo:keep-with-next="always"/>'                    . '<style:text-properties style:font-name="DejaVu Sans" fo:font-size="14pt" style:font-name-asian="DejaVu Sans1" style:font-size-asian="14pt" style:font-name-complex="DejaVu Sans1" style:font-size-complex="14pt"/>'                    . '</style:style>'                . '<style:style style:name="Heading_1" style:display-name="Heading 1" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_body" style:class="text" style:default-outline-level="1">'                    . '<style:text-properties style:font-name="Thorndale" fo:font-size="24pt" fo:font-weight="bold" style:font-name-asian="HG Mincho Light J" style:font-size-asian="24pt" style:font-weight-asian="bold" style:font-name-complex="Arial Unicode MS" style:font-size-complex="24pt" style:font-weight-complex="bold"/>'                . '</style:style>'                . '<style:style style:name="Heading_2" style:display-name="Heading 2" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_body" style:class="text" style:default-outline-level="2">'                    . '<style:text-properties style:font-name="DejaVu Serif" fo:font-size="18pt" fo:font-weight="bold" style:font-name-asian="DejaVu Sans1" style:font-size-asian="18pt" style:font-weight-asian="bold" style:font-name-complex="DejaVu Sans1" style:font-size-complex="18pt" style:font-weight-complex="bold"/>'                . '</style:style>'            . '</office:styles>'            . '<office:automatic-styles>'                . '<style:page-layout style:name="pm1">'                    . '<style:page-layout-properties fo:page-width="8.2673in" fo:page-height="11.6925in" style:num-format="1" style:print-orientation="portrait" fo:margin-top="1in" fo:margin-bottom="1in" fo:margin-left="1.25in" fo:margin-right="1.25in" style:writing-mode="lr-tb" style:footnote-max-height="0in">'                        . '<style:footnote-sep style:width="0.0071in" style:distance-before-sep="0.0398in" style:distance-after-sep="0.0398in" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>'                    . '</style:page-layout-properties>'                    . '<style:header-style/>'                    . '<style:footer-style/>'                . '</style:page-layout>'            . '</office:automatic-styles>'            . '<office:master-styles>'                . '<style:master-page style:name="Standard" style:page-layout-name="pm1"/>'            . '</office:master-styles>'        . '</office:document-styles>',        'styles.xml');    $zipfile -> addFile('<?xml version="1.0" encoding="UTF-8"?' . '>'        . '<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0">'        . '<manifest:file-entry manifest:media-type="' . $mime . '" manifest:full-path="/"/>'        . '<manifest:file-entry manifest:media-type="text/xml" manifest:full-path="content.xml"/>'        . '<manifest:file-entry manifest:media-type="text/xml" manifest:full-path="meta.xml"/>'        . '<manifest:file-entry manifest:media-type="text/xml" manifest:full-path="styles.xml"/>'        . '</manifest:manifest>',        'META-INF/manifest.xml');    return $zipfile -> file();}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * the MyISAM storage engine * @package PhpMyAdmin-Engines */class PMA_StorageEngine_myisam extends PMA_StorageEngine{    /**     * returns array with variable names dedicated to MyISAM storage engine     *     * @return  array   variable names     */    function getVariables()    {        return array(            'myisam_data_pointer_size' => array(                'title' => __('Data pointer size'),                'desc'  => __('The default pointer size in bytes, to be used by CREATE TABLE for MyISAM tables when no MAX_ROWS option is specified.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'myisam_recover_options' => array(                'title' => __('Automatic recovery mode'),                'desc'  => __('The mode for automatic recovery of crashed MyISAM tables, as set via the --myisam-recover server startup option.'),            ),            'myisam_max_sort_file_size' => array(                'title' => __('Maximum size for temporary sort files'),                'desc'  => __('The maximum size of the temporary file MySQL is allowed to use while re-creating a MyISAM index (during REPAIR TABLE, ALTER TABLE, or LOAD DATA INFILE).'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'myisam_max_extra_sort_file_size' => array(                'title' => __('Maximum size for temporary files on index creation'),                'desc'  => __('If the temporary file used for fast MyISAM index creation would be larger than using the key cache by the amount specified here, prefer the key cache method.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'myisam_repair_threads' => array(                'title' => __('Repair threads'),                'desc'  => __('If this value is greater than 1, MyISAM table indexes are created in parallel (each index in its own thread) during the repair by sorting process.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'myisam_sort_buffer_size' => array(                'title' => __('Sort buffer size'),                'desc'  => __('The buffer that is allocated when sorting MyISAM indexes during a REPAIR TABLE or when creating indexes with CREATE INDEX or ALTER TABLE.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'myisam_stats_method' => array(            ),            'delay_key_write' => array(            ),            'bulk_insert_buffer_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'skip_external_locking' => array(            ),        );    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays index edit/creation form and handles it * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/Index.class.php';require_once './libraries/tbl_common.php';// Get fields and stores their name/type$fields = array();foreach (PMA_DBI_get_columns_full($db, $table) as $row) {    if (preg_match('@^(set|enum)\((.+)\)$@i', $row['Type'], $tmp)) {        $tmp[2]         = substr(preg_replace('@([^,])\'\'@', '\\1\\\'',            ',' . $tmp[2]), 1);        $fields[$row['Field']] = $tmp[1] . '(' . str_replace(',', ', ', $tmp[2]) . ')';    } else {        $fields[$row['Field']] = $row['Type'];    }} // end while// Prepares the form valuesif (isset($_REQUEST['index'])) {    if (is_array($_REQUEST['index'])) {        // coming already from form        $index = new PMA_Index($_REQUEST['index']);    } else {        $index = PMA_Index::singleton($db, $table, $_REQUEST['index']);    }} else {    $index = new PMA_Index;}/** * Process the data from the edit/create index form, * run the query to build the new index * and moves back to "tbl_sql.php" */if (isset($_REQUEST['do_save_data'])) {    $error = false;    // $sql_query is the one displayed in the query box    $sql_query = 'ALTER TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table);    // Drops the old index    if (! empty($_REQUEST['old_index'])) {        if ($_REQUEST['old_index'] == 'PRIMARY') {            $sql_query .= ' DROP PRIMARY KEY,';        } else {            $sql_query .= ' DROP INDEX ' . PMA_backquote($_REQUEST['old_index']) . ',';        }    } // end if    // Builds the new one    switch ($index->getType()) {        case 'PRIMARY':            if ($index->getName() == '') {                $index->setName('PRIMARY');            } elseif ($index->getName() != 'PRIMARY') {                $error = PMA_Message::error(__('The name of the primary key must be "PRIMARY"!'));            }            $sql_query .= ' ADD PRIMARY KEY';            break;        case 'FULLTEXT':        case 'UNIQUE':        case 'INDEX':        case 'SPATIAL':            if ($index->getName() == 'PRIMARY') {                $error = PMA_Message::error(__('Can\'t rename index to PRIMARY!'));            }            $sql_query .= ' ADD ' . $index->getType() . ' '                . ($index->getName() ? PMA_backquote($index->getName()) : '');            break;    } // end switch    $index_fields = array();    foreach ($index->getColumns() as $key => $column) {        $index_fields[$key] = PMA_backquote($column->getName());        if ($column->getSubPart()) {            $index_fields[$key] .= '(' . $column->getSubPart() . ')';        }    } // end while    if (empty($index_fields)) {        $error = PMA_Message::error(__('No index parts defined!'));    } else {        $sql_query .= ' (' . implode(', ', $index_fields) . ')';    }    if (! $error) {        PMA_DBI_query($sql_query);        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['index_table'] = PMA_Index::getView($table, $db);            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';        exit;    } else {        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['error'] = $error;            PMA_ajaxResponse($error, false);        }        $error->display();    }} // end builds the new index/** * Display the form to edit/create an index */// Displays headers (if needed)$GLOBALS['js_include'][] = 'indexes.js';require_once './libraries/tbl_info.inc.php';if ($GLOBALS['is_ajax_request'] != true) {    include_once './libraries/tbl_links.inc.php';}if (isset($_REQUEST['index']) && is_array($_REQUEST['index'])) {    // coming already from form    $add_fields        = count($_REQUEST['index']['columns']['names']) - $index->getColumnCount();    if (isset($_REQUEST['add_fields'])) {        $add_fields += $_REQUEST['added_fields'];    }} elseif (isset($_REQUEST['create_index'])) {    $add_fields = $_REQUEST['added_fields'];} else {    $add_fields = 1;}// end preparing form values?><form action="./tbl_indexes.php" method="post" name="index_frm" id="index_frm" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>    onsubmit="if (typeof(this.elements['index[Key_name]'].disabled) != 'undefined') {        this.elements['index[Key_name]'].disabled = false}"><?php$form_params = array(    'db'    => $db,    'table' => $table,);if (isset($_REQUEST['create_index'])) {    $form_params['create_index'] = 1;} elseif (isset($_REQUEST['old_index'])) {    $form_params['old_index'] = $_REQUEST['old_index'];} elseif (isset($_REQUEST['index'])) {    $form_params['old_index'] = $_REQUEST['index'];}echo PMA_generate_common_hidden_inputs($form_params);?><fieldset id="index_edit_fields"><?phpif ($GLOBALS['is_ajax_request'] != true) {?>    <legend><?php    if (isset($_REQUEST['create_index'])) {        echo __('Add index');    } else {        echo __('Edit index');    }?>    </legend><?php}?><div class='index_info'>    <div>        <div class="label">            <strong>                <label for="input_index_name">                    <?php echo __('Index name:'); ?>                    <?php echo PMA_showhint(PMA_Message::notice(__('("PRIMARY" <b>must</b> be the name of and <b>only of</b> a primary key!)'))); ?>                </label>            </strong>        </div>        <input type="text" name="index[Key_name]" id="input_index_name" size="25"            value="<?php echo htmlspecialchars($index->getName()); ?>" onfocus="this.select()" />    </div>    <div>        <div class="label">            <strong>                <label for="select_index_type">                    <?php echo __('Index type:'); ?>                    <?php echo PMA_showMySQLDocu('SQL-Syntax', 'ALTER_TABLE'); ?>                </label>            </strong>        </div>        <select name="index[Index_type]" id="select_index_type" >            <?php echo $index->generateIndexSelector(); ?>        </select>    </div>    <div class="clearfloat"></div></div><table id="index_columns"><thead><tr><th><?php echo __('Column'); ?></th>    <th><?php echo __('Size'); ?></th></tr></thead><tbody><?php$odd_row = true;$spatial_types = array(    'geometry', 'point', 'linestring', 'polygon', 'multipoint',    'multilinestring', 'multipolygon', 'geomtrycollection');foreach ($index->getColumns() as $column) {    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td><select name="index[columns][names][]">            <option value="">-- <?php echo __('Ignore'); ?> --</option>    <?php    foreach ($fields as $field_name => $field_type) {        if (($index->getType() != 'FULLTEXT' || preg_match('/(char|text)/i', $field_type))            && ($index->getType() != 'SPATIAL' || in_array($field_type, $spatial_types))        ) {            echo '<option value="' . htmlspecialchars($field_name) . '"'                 . (($field_name == $column->getName()) ? ' selected="selected"' : '') . '>'                 . htmlspecialchars($field_name) . ' [' . htmlspecialchars($field_type) . ']'                 . '</option>' . "\n";        }    } // end foreach $fields    ?>        </select>    </td>    <td><input type="text" size="5" onfocus="this.select()"            name="index[columns][sub_parts][]"            value="<?php if ($index->getType() != 'SPATIAL') { echo $column->getSubPart(); } ?>" />    </td></tr>    <?php    $odd_row = !$odd_row;} // end foreach $edited_index_info['Sequences']for ($i = 0; $i < $add_fields; $i++) {    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td><select name="index[columns][names][]">            <option value="">-- <?php echo __('Ignore'); ?> --</option>    <?php    foreach ($fields as $field_name => $field_type) {        echo '<option value="' . htmlspecialchars($field_name) . '">'             . htmlspecialchars($field_name) . ' [' . htmlspecialchars($field_type) . ']'             . '</option>' . "\n";    } // end foreach $fields    ?>        </select>    </td>    <td><input type="text" size="5" onfocus="this.select()"            name="index[columns][sub_parts][]" value="" />    </td></tr>    <?php    $odd_row = !$odd_row;} // end foreach $edited_index_info['Sequences']?></tbody></table></fieldset><fieldset class="tblFooters"><?php    if ($GLOBALS['is_ajax_request'] != true) {?>    <input type="submit" name="do_save_data" value="<?php echo __('Save'); ?>" />    <span id="addMoreColumns"><?phpecho __('Or') . ' ';printf(    __('Add to index &nbsp;%s&nbsp;column(s)') . "\n",    '<input type="text" name="added_fields" size="2" value="1" />');echo '<input type="submit" name="add_fields" value="' . __('Go') . '" />' . "\n";?>    </span><?php    } else {        $btn_value = sprintf(__('Add %d column(s) to index'), 1);        echo '<div class="slider"></div>';        echo '<div class="add_fields">';        echo '<input type="submit" value="' . $btn_value . '" />';        echo '</div>';    }?></fieldset></form><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once 'Export_Relation_Schema.class.php';/** * This Class inherits the XMLwriter class and * helps in developing structure of SVG Schema Export * * @access public * @see http://php.net/manual/en/book.xmlwriter.php */class PMA_SVG extends XMLWriter{    public $title;    public $author;    public $font;    public $fontSize;    /**     * The "PMA_SVG" constructor     *     * Upon instantiation This starts writing the Svg XML document     *     * @return void     * @see XMLWriter::openMemory(),XMLWriter::setIndent(),XMLWriter::startDocument()     */    function __construct()    {        $this->openMemory();        /*         * Set indenting using three spaces,         * so output is formatted         */        $this->setIndent(true);        $this->setIndentString('   ');        /*         * Create the XML document         */        $this->startDocument('1.0', 'UTF-8');        $this->startDtd(            'svg', '-//W3C//DTD SVG 1.1//EN',            'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'        );        $this->endDtd();    }    /**     * Set document title     *     * @param string $value sets the title text     *     * @return void     * @access public     */    function setTitle($value)    {        $this->title = $value;    }    /**     * Set document author     *     * @param string $value sets the author     *     * @return void     * @access public     */    function setAuthor($value)    {        $this->author = $value;    }    /**     * Set document font     *     * @param string $value sets the font e.g Arial, Sans-serif etc     *     * @return void     * @access public     */    function setFont($value)    {        $this->font = $value;    }    /**     * Get document font     *     * @return string returns the font name     * @access public     */    function getFont()    {        return $this->font;    }    /**     * Set document font size     *     * @param string $value sets the font size in pixels     *     * @return void     * @access public     */    function setFontSize($value)    {        $this->fontSize = $value;    }    /**     * Get document font size     *     * @return string returns the font size     * @access public     */    function getFontSize()    {        return $this->fontSize;    }    /**     * Starts Svg Document     *     * svg document starts by first initializing svg tag     * which contains all the attributes and namespace that needed     * to define the svg document     *     * @param integer $width  total width of the Svg document     * @param integer $height total height of the Svg document     *     * @return void     * @access public     *     * @see XMLWriter::startElement(),XMLWriter::writeAttribute()     */    function startSvgDoc($width,$height)    {        $this->startElement('svg');        $this->writeAttribute('width', $width);        $this->writeAttribute('height', $height);        $this->writeAttribute('xmlns', 'http://www.w3.org/2000/svg');        $this->writeAttribute('version', '1.1');    }    /**     * Ends Svg Document     *     * @return void     * @access public     * @see XMLWriter::endElement(),XMLWriter::endDocument()     */    function endSvgDoc()    {        $this->endElement();        $this->endDocument();    }    /**     * output Svg Document     *     * svg document prompted to the user for download     * Svg document saved in .svg extension and can be     * easily changeable by using any svg IDE     *     * @param string $fileName file name     *     * @return void     * @access public     * @see XMLWriter::startElement(),XMLWriter::writeAttribute()     */    function showOutput($fileName)    {        //ob_get_clean();        $output = $this->flush();        PMA_download_header($fileName . '.svg', 'image/svg+xml', strlen($output));        print $output;    }    /**     * Draws Svg elements     *     * SVG has some predefined shape elements like rectangle & text     * and other elements who have x,y co-ordinates are drawn.     * specify their width and height and can give styles too.     *     * @param string  $name   Svg element name     * @param integer $x      The x attr defines the left position of the element     * (e.g. x="0" places the element 0 pixels from the left of the browser window)     * @param integer $y      The y attribute defines the top position of the element     * (e.g. y="0" places the element 0 pixels from the top of the browser window)     * @param integer $width  The width attribute defines the width the element     * @param integer $height The height attribute defines the height the element     * @param string  $text   The text attribute defines the text the element     * @param string  $styles The style attribute defines the style the element     *  styles can be defined like CSS styles     *     * @return void     * @access public     *     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),     * XMLWriter::text(), XMLWriter::endElement()     */    function printElement($name, $x, $y, $width = '', $height = '', $text = '', $styles = '')    {        $this->startElement($name);        $this->writeAttribute('width', $width);        $this->writeAttribute('height', $height);        $this->writeAttribute('x', $x);        $this->writeAttribute('y', $y);        $this->writeAttribute('style', $styles);        if (isset($text)) {            $this->writeAttribute('font-family', $this->font);            $this->writeAttribute('font-size', $this->fontSize);            $this->text($text);        }        $this->endElement();    }    /**     * Draws Svg Line element     *     * Svg line element is drawn for connecting the tables.     * arrows are also drawn by specify its start and ending     * co-ordinates     *     * @param string  $name   Svg element name i.e line     * @param integer $x1     Defines the start of the line on the x-axis     * @param integer $y1     Defines the start of the line on the y-axis     * @param integer $x2     Defines the end of the line on the x-axis     * @param integer $y2     Defines the end of the line on the y-axis     * @param string  $styles The style attribute defines the style the element     *                        styles can be defined like CSS styles     *     * @return void     * @access public     *     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),     * XMLWriter::endElement()     */    function printElementLine($name,$x1,$y1,$x2,$y2,$styles)    {        $this->startElement($name);        $this->writeAttribute('x1', $x1);        $this->writeAttribute('y1', $y1);        $this->writeAttribute('x2', $x2);        $this->writeAttribute('y2', $y2);        $this->writeAttribute('style', $styles);        $this->endElement();    }    /**     * get width of string/text     *     * Svg text element width is calcualted depending on font name     * and font size. It is very important to know the width of text     * because rectangle is drawn around it.     *     * This is a bit hardcore method. I didn't found any other than this.     *     * @param string  $text     string that width will be calculated     * @param integer $font     name of the font like Arial,sans-serif etc     * @param integer $fontSize size of font     *     * @return integer width of the text     * @access public     */    function getStringWidth($text,$font,$fontSize)    {        /*         * Start by counting the width, giving each character a modifying value         */        $count = 0;        $count = $count + ((strlen($text) - strlen(str_replace(array("i", "j", "l"), "", $text))) * 0.23);//ijl        $count = $count + ((strlen($text) - strlen(str_replace(array("f"), "", $text))) * 0.27);//f        $count = $count + ((strlen($text) - strlen(str_replace(array("t", "I"), "", $text))) * 0.28);//tI        $count = $count + ((strlen($text) - strlen(str_replace(array("r"), "", $text))) * 0.34);//r        $count = $count + ((strlen($text) - strlen(str_replace(array("1"), "", $text))) * 0.49);//1        $count = $count + ((strlen($text) - strlen(str_replace(array("c", "k", "s", "v", "x", "y", "z", "J"), "", $text))) * 0.5);//cksvxyzJ        $count = $count + ((strlen($text) - strlen(str_replace(array("a", "b", "d", "e", "g", "h", "n", "o", "p", "q", "u", "L", "0", "2", "3", "4", "5", "6", "7", "8", "9"), "", $text))) * 0.56);//abdeghnopquL023456789        $count = $count + ((strlen($text) - strlen(str_replace(array("F", "T", "Z"), "", $text))) * 0.61);//FTZ        $count = $count + ((strlen($text) - strlen(str_replace(array("A", "B", "E", "K", "P", "S", "V", "X", "Y"), "", $text))) * 0.67);//ABEKPSVXY        $count = $count + ((strlen($text) - strlen(str_replace(array("w", "C", "D", "H", "N", "R", "U"), "", $text))) * 0.73);//wCDHNRU        $count = $count + ((strlen($text) - strlen(str_replace(array("G", "O", "Q"), "", $text))) * 0.78);//GOQ        $count = $count + ((strlen($text) - strlen(str_replace(array("m", "M"), "", $text))) * 0.84);//mM        $count = $count + ((strlen($text) - strlen(str_replace("W", "", $text))) * .95);//W        $count = $count + ((strlen($text) - strlen(str_replace(" ", "", $text))) * .28);//" "        $text  = str_replace(" ", "", $text);//remove the " "'s        $count = $count + (strlen(preg_replace("/[a-z0-9]/i", "", $text)) * 0.3); //all other chrs        $modifier = 1;        $font = strtolower($font);        switch($font){        /*         * no modifier for arial and sans-serif         */        case 'arial':        case 'sans-serif':            break;        /*         * .92 modifer for time, serif, brushscriptstd, and californian fb         */        case 'times':        case 'serif':        case 'brushscriptstd':        case 'californian fb':            $modifier = .92;            break;        /*         * 1.23 modifier for broadway         */        case 'broadway':            $modifier = 1.23;            break;        }        $textWidth = $count*$fontSize;        return ceil($textWidth*$modifier);    }}/** * Table preferences/statistics * * This class preserves the table co-ordinates,fields * and helps in drawing/generating the Tables in SVG XML document. * * @name Table_Stats * @see PMA_SVG */class Table_Stats{    /**     * Defines properties     */    private $_tableName;    private $_showInfo = false;    public $width = 0;    public $height;    public $fields = array();    public $heightCell = 0;    public $currentCell = 0;    public $x, $y;    public $primary = array();    /**     * The "Table_Stats" constructor     *     * @param string  $tableName        The table name     * @param string  $font             Font face     * @param integer $fontSize         The font size     * @param integer $pageNumber       Page number     * @param integer &$same_wide_width The max. with among tables     * @param boolean $showKeys         Whether to display keys or not     * @param boolean $showInfo         Whether to display table position or not     *     * @global object    The current SVG image document     * @global integer   The current page number (from the     *                   $cfg['Servers'][$i]['table_coords'] table)     * @global array     The relations settings     * @global string    The current db name     *     * @access private     *     * @see PMA_SVG, Table_Stats::Table_Stats_setWidth,     *       Table_Stats::Table_Stats_setHeight     */    function __construct($tableName, $font, $fontSize, $pageNumber,    &$same_wide_width, $showKeys = false, $showInfo = false)    {        global $svg, $cfgRelation, $db;        $this->_tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $svg->dieSchema(                $pageNumber,                "SVG",                sprintf(__('The %s table doesn\'t exist!'), $tableName)            );        }        /*        * load fields        * check to see if it will load all fields or only the foreign keys        */        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->_tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $this->_showInfo = $showInfo;        // height and width        $this->_setHeightTable($fontSize);        // setWidth must me after setHeight, because title        // can include table height which changes table width        $this->_setWidthTable($font, $fontSize);        if ($same_wide_width < $this->width) {            $same_wide_width = $this->width;        }        // x and y        $sql = 'SELECT x, y FROM '         . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'         . PMA_backquote($cfgRelation['table_coords'])         . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''         . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''         . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $svg->dieSchema(                $pageNumber,                "SVG",                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        // displayfield        $this->displayfield = PMA_getDisplayField($db, $tableName);        // index        $result = PMA_DBI_query(            'SHOW INDEX FROM ' . PMA_backquote($tableName) . ';',            null,            PMA_DBI_QUERY_STORE        );        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }    }    /**     * Returns title of the current table,     * title can have the dimensions/co-ordinates of the table     *     * @access private     */    private function _getTitle()    {        return ($this->_showInfo            ? sprintf('%.0f', $this->width) . 'x' . sprintf('%.0f', $this->heightCell)            : ''        ) . ' ' . $this->_tableName;    }    /**     * Sets the width of the table     *     * @param string  $font     The font size     * @param integer $fontSize The font size     *     * @global object    The current SVG image document     *     * @return nothing     * @access private     *     * @see PMA_SVG     */    private function _setWidthTable($font,$fontSize)    {        global $svg;        foreach ($this->fields as $field) {            $this->width = max(                $this->width,                $svg->getStringWidth($field, $font, $fontSize)            );        }        $this->width += $svg->getStringWidth('  ', $font, $fontSize);        /*         * it is unknown what value must be added, because         * table title is affected by the tabe width value         */        while ($this->width < $svg->getStringWidth($this->_getTitle(), $font, $fontSize)) {            $this->width += 7;        }    }    /**     * Sets the height of the table     *     * @param integer $fontSize font size     *     * @return nothing     * @access private     */    function _setHeightTable($fontSize)    {        $this->heightCell = $fontSize + 4;        $this->height = (count($this->fields) + 1) * $this->heightCell;    }    /**     * draw the table     *     * @param boolean $showColor Whether to display color     *     * @global object The current SVG image document     *     * @access public     * @return nothing     *     * @see PMA_SVG,PMA_SVG::printElement     */    public function tableDraw($showColor)    {        global $svg;        //echo $this->_tableName.'<br />';        $svg->printElement(            'rect', $this->x, $this->y, $this->width,            $this->heightCell, null, 'fill:red;stroke:black;'        );        $svg->printElement(            'text', $this->x + 5, $this->y+ 14, $this->width, $this->heightCell,            $this->_getTitle(), 'fill:none;stroke:black;'        );        foreach ($this->fields as $field) {            $this->currentCell += $this->heightCell;            $showColor    = 'none';            if ($showColor) {                if (in_array($field, $this->primary)) {                    $showColor = '#0c0';                }                if ($field == $this->displayfield) {                    $showColor = 'none';                }            }            $svg->printElement(                'rect', $this->x, $this->y + $this->currentCell, $this->width,                $this->heightCell, null, 'fill:'.$showColor.';stroke:black;'            );            $svg->printElement(                'text', $this->x + 5, $this->y + 14 + $this->currentCell,                $this->width, $this->heightCell, $field, 'fill:none;stroke:black;'            );        }    }}/** * Relation preferences/statistics * * This class fetches the table master and foreign fields positions * and helps in generating the Table references and then connects * master table's master field to foreign table's foreign key * in SVG XML document. * * @name Relation_Stats * @see PMA_SVG::printElementLine */class Relation_Stats{    /**     * Defines properties     */    public $xSrc, $ySrc;    public $srcDir ;    public $destDir;    public $xDest, $yDest;    public $wTick = 10;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @return nothing     *     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        /*        * [0] is x-left        * [1] is x-right        * [2] is y        */        $src_left   = $src_pos[0] - $this->wTick;        $src_right  = $src_pos[1] + $this->wTick;        $dest_left  = $dest_pos[0] - $this->wTick;        $dest_right = $dest_pos[1] + $this->wTick;        $d1 = abs($src_left - $dest_left);        $d2 = abs($src_right - $dest_left);        $d3 = abs($src_left - $dest_right);        $d4 = abs($src_right - $dest_right);        $d  = min($d1, $d2, $d3, $d4);        if ($d == $d1) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d2) {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d3) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        } else {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        }        $this->ySrc   = $src_pos[2];        $this->yDest = $dest_pos[2];    }    /**     * Gets arrows coordinates     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Arrows coordinates     * @access private     */    function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // x_left, x_right, y        return array(            $table->x,            $table->x + $table->width,            $table->y + ($pos + 1.5) * $table->heightCell        );    }    /**     * draws relation links and arrows shows foreign key relations     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @global object The current SVG image document     *     * @return nothing     * @access public     *     * @see PMA_SVG     */    public function relationDraw($changeColor)    {        global $svg;        if ($changeColor) {            $listOfColors = array(                'red',                'grey',                'black',                'yellow',                'green',                'cyan',            '    orange'            );            shuffle($listOfColors);            $color =  $listOfColors[0];        } else {            $color = 'black';        }        $svg->printElementLine(            'line', $this->xSrc, $this->ySrc,            $this->xSrc + $this->srcDir * $this->wTick, $this->ySrc,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick,            $this->yDest, $this->xDest, $this->yDest,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick, $this->ySrc,            $this->xDest + $this->destDir * $this->wTick, $this->yDest,            'fill:' . $color . ';stroke:' . $color . ';stroke-width:1;'        );        $root2 = 2 * sqrt(2);        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick * 0.75, $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc + $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick * 0.75, $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc - $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick / 2, $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest + $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick / 2, $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest - $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );    }}/** end of the "Relation_Stats" class*//** * Svg Relation Schema Class * * Purpose of this class is to generate the SVG XML Document because * SVG defines the graphics in XML format which is used for representing * the database diagrams as vector image. This class actually helps *  in preparing SVG XML format. * * SVG XML is generated by using XMLWriter php extension and this class * inherits Export_Relation_Schema class has common functionality added * to this class * * @name Svg_Relation_Schema */class PMA_Svg_Relation_Schema extends PMA_Export_Relation_Schema{    private $tables = array();    private $_relations = array();    private $_xMax = 0;    private $_yMax = 0;    private $scale;    private $_xMin = 100000;    private $_yMin = 100000;    private $t_marg = 10;    private $b_marg = 10;    private $l_marg = 10;    private $r_marg = 10;    private $_tablewidth;    /**     * The "PMA_Svg_Relation_Schema" constructor     *     * Upon instantiation This starts writing the SVG XML document     * user will be prompted for download as .svg extension     *     * @return void     * @see PMA_SVG     */    function __construct()    {        global $svg,$db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowColor(isset($_POST['show_color']));        $this->setShowKeys(isset($_POST['show_keys']));        $this->setTableDimension(isset($_POST['show_table_dimension']));        $this->setAllTableSameWidth(isset($_POST['all_table_same_wide']));        $this->setExportType($_POST['export_type']);        $svg = new PMA_SVG();        $svg->setTitle(            sprintf(                __('Schema of the %s database - Page %s'),                $db,                $this->pageNumber            )        );        $svg->SetAuthor('phpMyAdmin ' . PMA_VERSION);        $svg->setFont('Arial');        $svg->setFontSize('16px');        $svg->startSvgDoc('1000px', '1000px');        $alltables = $this->getAllTables($db, $this->pageNumber);        foreach ($alltables AS $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats(                    $table, $svg->getFont(), $svg->getFontSize(), $this->pageNumber,                    $this->_tablewidth, $this->showKeys, $this->tableDimension                );            }            if ($this->sameWide) {                $this->tables[$table]->width = $this->_tablewidth;            }            $this->_setMinMax($this->tables[$table]);        }        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    /* put the foreign table on the schema only if selected                    * by the user                    * (do not use array_search() because we would have to                    * to do a === false and this is not PHP3 compatible)                    */                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table, $svg->getFont(), $svg->getFontSize(),                            $master_field, $rel['foreign_table'],                            $rel['foreign_field'], $this->tableDimension                        );                    }                }            }        }        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $this->_drawTables($this->showColor);        $svg->endSvgDoc();        $svg->showOutput($db.'-'.$this->pageNumber);        exit();    }    /**     * Sets X and Y minimum and maximum for a table cell     *     * @param string $table The table name     *     * @return nothing     * @access private     */    private function _setMinMax($table)    {        $this->_xMax = max($this->_xMax, $table->x + $table->width);        $this->_yMax = max($this->_yMax, $table->y + $table->height);        $this->_xMin = min($this->_xMin, $table->x);        $this->_yMin = min($this->_yMin, $table->y);    }    /**     * Defines relation objects     *     * @param string  $masterTable  The master table name     * @param string  $font         The font face     * @param int     $fontSize     Font size     * @param string  $masterField  The relation field in the master table     * @param string  $foreignTable The foreign table name     * @param string  $foreignField The relation field in the foreign table     * @param boolean $showInfo     Whether to display table position or not     *     * @access private     * @return nothing     *     * @see _setMinMax,Table_Stats::__construct(),Relation_Stats::__construct()     */    private function _addRelation($masterTable,$font,$fontSize, $masterField,    $foreignTable, $foreignField, $showInfo)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );            $this->_setMinMax($this->tables[$masterTable]);        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );            $this->_setMinMax($this->tables[$foreignTable]);        }        $this->_relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws relation arrows and lines     * connects master table's master field to     * foreign table's forein field     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @return nothing     * @access private     *     * @see Relation_Stats::relationDraw()     */    private function _drawRelations($changeColor)    {        foreach ($this->_relations as $relation) {            $relation->relationDraw($changeColor);        }    }    /**     * Draws tables     *     * @param boolean $changeColor Whether to show color for primary fields or not     *     * @return nothing     * @access private     *     * @see Table_Stats::Table_Stats_tableDraw()     */    private function _drawTables($changeColor)    {        foreach ($this->tables as $table) {            $table->tableDraw($changeColor);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Logging functionality for webserver. * * This includes web server specific code to log some information. * * @package PhpMyAdmin *//** * Logs user information to webserver logs. */function PMA_log_user($user, $status = 'ok'){    if (function_exists('apache_note')) {        apache_note('userID', $user);        apache_note('userStatus', $status);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */// Run common workrequire_once './libraries/common.inc.php';define('TABLE_MAY_BE_ABSENT', true);require './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_tracking.php&amp;back=tbl_tracking.php';$url_params['goto'] = 'tbl_tracking.php';;$url_params['back'] = 'tbl_tracking.php';// Init vars for tracking reportif (isset($_REQUEST['report']) || isset($_REQUEST['report_export'])) {    $data = PMA_Tracker::getTrackedData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version']);    $selection_schema = false;    $selection_data   = false;    $selection_both  = false;    if (! isset($_REQUEST['logtype'])) {        $_REQUEST['logtype'] = 'schema_and_data';    }    if ($_REQUEST['logtype'] == 'schema') {        $selection_schema = true;    } elseif ($_REQUEST['logtype'] == 'data') {        $selection_data   = true;    } else {        $selection_both   = true;    }    if (! isset($_REQUEST['date_from'])) {        $_REQUEST['date_from'] = $data['date_from'];    }    if (! isset($_REQUEST['date_to'])) {        $_REQUEST['date_to'] = $data['date_to'];    }    if (! isset($_REQUEST['users'])) {        $_REQUEST['users'] = '*';    }    $filter_ts_from = strtotime($_REQUEST['date_from']);    $filter_ts_to   = strtotime($_REQUEST['date_to']);    $filter_users   = array_map('trim', explode(',', $_REQUEST['users']));}// Prepare exportif (isset($_REQUEST['report_export'])) {/** * Filters tracking entries * * @param array   the entries to filter * @param string  "from" date * @param string  "to" date * @param string  users * * @return  array   filtered entries * */    function PMA_filter_tracking($data, $filter_ts_from, $filter_ts_to, $filter_users) {        $tmp_entries = array();        $id = 0;        foreach ( $data as $entry ) {            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {                $tmp_entries[] = array( 'id' => $id,                                    'timestamp' => $timestamp,                                    'username'  => $entry['username'],                                    'statement' => $entry['statement']                             );            }            $id++;        }        return($tmp_entries);    }    $entries = array();    // Filtering data definition statements    if ($_REQUEST['logtype'] == 'schema' || $_REQUEST['logtype'] == 'schema_and_data') {        $entries = array_merge($entries, PMA_filter_tracking($data['ddlog'], $filter_ts_from, $filter_ts_to, $filter_users));    }    // Filtering data manipulation statements    if ($_REQUEST['logtype'] == 'data' || $_REQUEST['logtype'] == 'schema_and_data') {        $entries = array_merge($entries, PMA_filter_tracking($data['dmlog'], $filter_ts_from, $filter_ts_to, $filter_users));    }    // Sort it    foreach ($entries as $key => $row) {        $ids[$key]        = $row['id'];        $timestamps[$key] = $row['timestamp'];        $usernames[$key]  = $row['username'];        $statements[$key] = $row['statement'];    }    array_multisort($timestamps, SORT_ASC, $ids, SORT_ASC, $usernames, SORT_ASC, $statements, SORT_ASC, $entries);}// Export as file downloadif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'sqldumpfile') {    @ini_set('url_rewriter.tags', '');    $dump = "# " . sprintf(__('Tracking report for table `%s`'), htmlspecialchars($_REQUEST['table'])) . "\n" .            "# " . date('Y-m-d H:i:s') . "\n";    foreach ($entries as $entry) {        $dump .= $entry['statement'];    }    $filename = 'log_' . htmlspecialchars($_REQUEST['table']) . '.sql';    PMA_download_header($filename, 'text/x-sql', strlen($dump));    echo $dump;    exit();}/** * Gets tables informations *//** * Displays top menu links */require_once './libraries/tbl_links.inc.php';echo '<br />';/** * Actions */// Create tracking versionif (isset($_REQUEST['submit_create_version'])) {    $tracking_set = '';    if ($_REQUEST['alter_table'] == true) {        $tracking_set .= 'ALTER TABLE,';    }    if ($_REQUEST['rename_table'] == true) {        $tracking_set .= 'RENAME TABLE,';    }    if ($_REQUEST['create_table'] == true) {        $tracking_set .= 'CREATE TABLE,';    }    if ($_REQUEST['drop_table'] == true) {        $tracking_set .= 'DROP TABLE,';    }    if ($_REQUEST['create_index'] == true) {        $tracking_set .= 'CREATE INDEX,';    }    if ($_REQUEST['drop_index'] == true) {        $tracking_set .= 'DROP INDEX,';    }    if ($_REQUEST['insert'] == true) {        $tracking_set .= 'INSERT,';    }    if ($_REQUEST['update'] == true) {        $tracking_set .= 'UPDATE,';    }    if ($_REQUEST['delete'] == true) {        $tracking_set .= 'DELETE,';    }    if ($_REQUEST['truncate'] == true) {        $tracking_set .= 'TRUNCATE,';    }    $tracking_set = rtrim($tracking_set, ',');    if (PMA_Tracker::createVersion($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'], $tracking_set )) {        $msg = PMA_Message::success(sprintf(__('Version %s is created, tracking for %s.%s is activated.'), htmlspecialchars($_REQUEST['version']), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])));        $msg->display();    }}// Deactivate trackingif (isset($_REQUEST['submit_deactivate_now'])) {    if (PMA_Tracker::deactivateTracking($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'])) {        $msg = PMA_Message::success(sprintf(__('Tracking for %s.%s , version %s is deactivated.'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table']), htmlspecialchars($_REQUEST['version'])));        $msg->display();    }}// Activate trackingif (isset($_REQUEST['submit_activate_now'])) {    if (PMA_Tracker::activateTracking($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'])) {        $msg = PMA_Message::success(sprintf(__('Tracking for %s.%s , version %s is activated.'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table']), htmlspecialchars($_REQUEST['version'])));        $msg->display();    }}// Export as SQL executionif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'execution') {    foreach ($entries as $entry) {        $sql_result = PMA_DBI_query( "/*NOTRACK*/\n" . $entry['statement'] );    }    $msg = PMA_Message::success(__('SQL statements executed.'));    $msg->display();}// Export as SQL dumpif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'sqldump') {    $new_query =    "# " . __('You can execute the dump by creating and using a temporary database. Please ensure that you have the privileges to do so.') . "\n" .                    "# " . __('Comment out these two lines if you do not need them.') . "\n" .                    "\n" .                    "CREATE database IF NOT EXISTS pma_temp_db; \n" .                    "USE pma_temp_db; \n" .                    "\n";    foreach ($entries as $entry) {        $new_query .= $entry['statement'];    }    $msg = PMA_Message::success(__('SQL statements exported. Please copy the dump or execute it.'));    $msg->display();    $db_temp = $db;    $table_temp = $table;    $db = $table = '';    include_once './libraries/sql_query_form.lib.php';    PMA_sqlQueryForm($new_query, 'sql');    $db = $db_temp;    $table = $table_temp;}/* * Schema snapshot */if (isset($_REQUEST['snapshot'])) {?>    <h3><?php echo __('Structure snapshot');?>  [<a href="tbl_tracking.php?<?php echo $url_query;?>"><?php echo __('Close');?></a>]</h3><?php    $data = PMA_Tracker::getTrackedData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version']);    // Get first DROP TABLE and CREATE TABLE statements    $drop_create_statements = $data['ddlog'][0]['statement'];    if (strstr($data['ddlog'][0]['statement'], 'DROP TABLE')) {        $drop_create_statements .= $data['ddlog'][1]['statement'];    }    // Print SQL code    PMA_showMessage(sprintf(__('Version %s snapshot (SQL code)'), htmlspecialchars($_REQUEST['version'])), $drop_create_statements);    // Unserialize snapshot    $temp = unserialize($data['schema_snapshot']);    $columns = $temp['COLUMNS'];    $indexes = $temp['INDEXES'];?>    <h3><?php echo __('Structure');?></h3>    <table id="tablestructure" class="data">    <thead>    <tr>        <th><?php echo __('Column'); ?></th>        <th><?php echo __('Type'); ?></th>        <th><?php echo __('Collation'); ?></th>        <th><?php echo __('Null'); ?></th>        <th><?php echo __('Default'); ?></th>        <th><?php echo __('Extra'); ?></th>        <th><?php echo __('Comment'); ?></th>    </tr>    </thead>    <tbody><?php    $style = 'odd';    foreach ($columns as $field_index => $field) {?>        <tr class="noclick <?php echo $style; ?>">            <?php            if ($field['Key'] == 'PRI') {                echo '<td><b><u>' . htmlspecialchars($field['Field']) . '</u></b></td>' . "\n";            } else {                echo '<td><b>' . htmlspecialchars($field['Field']) . '</b></td>' . "\n";            }            ?>            <td><?php echo htmlspecialchars($field['Type']);?></td>            <td><?php echo htmlspecialchars($field['Collation']);?></td>            <td><?php echo (($field['Null'] == 'YES') ? __('Yes') : __('No')); ?></td>            <td><?php            if (isset($field['Default'])) {                $extracted_fieldspec = PMA_extractFieldSpec($field['Type']);                if ($extracted_fieldspec['type'] == 'bit') {                    // here, $field['Default'] contains something like b'010'                    echo PMA_convert_bit_default_value($field['Default']);                } else {                    echo htmlspecialchars($field['Default']);                }            } else {                if ($field['Null'] == 'YES') {                    echo '<i>NULL</i>';                } else {                    echo '<i>' . _pgettext('None for default', 'None') . '</i>';                }            } ?></td>            <td><?php echo htmlspecialchars($field['Extra']);?></td>            <td><?php echo htmlspecialchars($field['Comment']);?></td>        </tr><?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }    }?>    </tbody>    </table><?php    if (count($indexes) > 0) {?>        <h3><?php echo __('Indexes');?></h3>        <table id="tablestructure_indexes" class="data">        <thead>        <tr>            <th><?php echo __('Keyname');?></th>            <th><?php echo __('Type');?></th>            <th><?php echo __('Unique');?></th>            <th><?php echo __('Packed');?></th>            <th><?php echo __('Column');?></th>            <th><?php echo __('Cardinality');?></th>            <th><?php echo __('Collation');?></th>            <th><?php echo __('Null');?></th>            <th><?php echo __('Comment');?></th>        </tr>        <tbody><?php        $style = 'odd';        foreach ($indexes as $indexes_index => $index) {            if ($index['Non_unique'] == 0) {                $str_unique = __('Yes');            } else {                $str_unique = __('No');            }            if ($index['Packed'] != '') {                $str_packed = __('Yes');            } else {                $str_packed = __('No');            }?>            <tr class="noclick <?php echo $style; ?>">                <td><b><?php echo htmlspecialchars($index['Key_name']);?></b></td>                <td><?php echo htmlspecialchars($index['Index_type']);?></td>                <td><?php echo $str_unique;?></td>                <td><?php echo $str_packed;?></td>                <td><?php echo htmlspecialchars($index['Column_name']);?></td>                <td><?php echo htmlspecialchars($index['Cardinality']);?></td>                <td><?php echo htmlspecialchars($index['Collation']);?></td>                <td><?php echo htmlspecialchars($index['Null']);?></td>                <td><?php echo htmlspecialchars($index['Comment']);?></td>            </tr><?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }        }?>    </tbody>    </table><?php    } // endif?>    <br /><hr /><br /><?php}// end of snapshot report/* *  Tracking report */if (isset($_REQUEST['report']) && (isset($_REQUEST['delete_ddlog']) || isset($_REQUEST['delete_dmlog']))) {    if (isset($_REQUEST['delete_ddlog'])) {        // Delete ddlog row data        $delete_id = $_REQUEST['delete_ddlog'];        // Only in case of valable id        if ($delete_id == (int)$delete_id) {            unset($data['ddlog'][$delete_id]);            if (PMA_Tracker::changeTrackingData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version'], 'DDL', $data['ddlog']))                $msg = PMA_Message::success(__('Tracking data definition successfully deleted'));            else                $msg = PMA_Message::rawError(__('Query error'));            $msg->display();        }    }    if (isset($_REQUEST['delete_dmlog'])) {        // Delete dmlog row data        $delete_id = $_REQUEST['delete_dmlog'];        // Only in case of valable id        if ($delete_id == (int)$delete_id) {            unset($data['dmlog'][$delete_id]);            if (PMA_Tracker::changeTrackingData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version'], 'DML', $data['dmlog']))                $msg = PMA_Message::success(__('Tracking data manipulation successfully deleted'));            else                $msg = PMA_Message::rawError(__('Query error'));            $msg->display();        }    }}if (isset($_REQUEST['report']) || isset($_REQUEST['report_export'])) {    ?>    <h3><?php echo __('Tracking report');?>  [<a href="tbl_tracking.php?<?php echo $url_query;?>"><?php echo __('Close');?></a>]</h3>    <small><?php echo __('Tracking statements') . ' ' . htmlspecialchars($data['tracking']); ?></small><br/>    <br/>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <?php    $str1 = '<select name="logtype">' .            '<option value="schema"' . ($selection_schema ? ' selected="selected"' : '') . '>' . __('Structure only') . '</option>' .            '<option value="data"' . ($selection_data ? ' selected="selected"' : ''). '>' . __('Data only') . '</option>' .            '<option value="schema_and_data"' . ($selection_both ? ' selected="selected"' : '') . '>' . __('Structure and data') . '</option>' .            '</select>';    $str2 = '<input type="text" name="date_from" value="' . htmlspecialchars($_REQUEST['date_from']) . '" size="19" />';    $str3 = '<input type="text" name="date_to" value="' . htmlspecialchars($_REQUEST['date_to']) . '" size="19" />';    $str4 = '<input type="text" name="users" value="' . htmlspecialchars($_REQUEST['users']) . '" />';    $str5 = '<input type="submit" name="list_report" value="' . __('Go') . '" />';    printf(__('Show %s with dates from %s to %s by user %s %s'), $str1, $str2, $str3, $str4, $str5);    // Prepare delete link content here    $drop_image_or_text = '';    if (true == $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= PMA_getImage('b_drop.png', __('Delete tracking data row from report'));    }    if ('both' === $GLOBALS['cfg']['PropertiesIconic'] || false === $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= __('Delete');    }    /*     *  First, list tracked data definition statements     */    $i = 1;    if (count($data['ddlog']) == 0 && count($data['dmlog']) == 0) {        $msg = PMA_Message::notice(__('No data'));        $msg->display();    }    if ($selection_schema || $selection_both  && count($data['ddlog']) > 0) {    ?>        <table id="ddl_versions" class="data" width="100%">        <thead>        <tr>            <th width="18">#</th>            <th width="100"><?php echo __('Date');?></th>            <th width="60"><?php echo __('Username');?></th>            <th><?php echo __('Data definition statement');?></th>            <th><?php echo __('Delete');?></th>        </tr>        </thead>        <tbody>        <?php        $style = 'odd';        foreach ($data['ddlog'] as $entry) {            if (strlen($entry['statement']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                $statement = substr($entry['statement'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';            } else {                $statement  = PMA_formatSql(PMA_SQP_parse($entry['statement']));            }            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {        ?>                <tr class="noclick <?php echo $style; ?>">                    <td><small><?php echo $i;?></small></td>                    <td><small><?php echo htmlspecialchars($entry['date']);?></small></td>                    <td><small><?php echo htmlspecialchars($entry['username']); ?></small></td>                    <td><?php echo $statement; ?></td>                    <td nowrap="nowrap"><a href="tbl_tracking.php?<?php echo $url_query;?>&amp;report=true&amp;version=<?php echo $version['version'];?>&amp;delete_ddlog=<?php echo $i-1; ?>"><?php echo $drop_image_or_text; ?></a></td>                </tr>        <?php                if ($style == 'even') {                    $style = 'odd';                } else {                    $style = 'even';                }                $i++;            }        }        ?>        </tbody>        </table>    <?php    } //endif    // Memorize data definition amount    $ddlog_count = $i;    /*     *  Secondly, list tracked data manipulation statements     */    if (($selection_data || $selection_both) && count($data['dmlog']) > 0) {    ?>        <table id="dml_versions" class="data" width="100%">        <thead>        <tr>            <th width="18">#</th>            <th width="100"><?php echo __('Date');?></th>            <th width="60"><?php echo __('Username');?></th>            <th><?php echo __('Data manipulation statement');?></th>            <th><?php echo __('Delete');?></th>        </tr>        </thead>        <tbody>        <?php        $style = 'odd';        foreach ($data['dmlog'] as $entry) {            if (strlen($entry['statement']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                $statement = substr($entry['statement'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';            } else {                $statement  = PMA_formatSql(PMA_SQP_parse($entry['statement']));            }            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {        ?>                <tr class="noclick <?php echo $style; ?>">                    <td><small><?php echo $i; ?></small></td>                    <td><small><?php echo htmlspecialchars($entry['date']); ?></small></td>                    <td><small><?php echo htmlspecialchars($entry['username']); ?></small></td>                    <td><?php echo $statement; ?></td>                    <td nowrap="nowrap"><a href="tbl_tracking.php?<?php echo $url_query;?>&amp;report=true&amp;version=<?php echo $version['version'];?>&amp;delete_dmlog=<?php echo $i-$ddlog_count; ?>"><?php echo $drop_image_or_text; ?></a></td>                </tr>        <?php                if ($style == 'even') {                    $style = 'odd';                } else {                    $style = 'even';                }                $i++;            }        }    ?>        </tbody>        </table>    <?php    }    ?>    </form>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <?php    printf(__('Show %s with dates from %s to %s by user %s %s'), $str1, $str2, $str3, $str4, $str5);    $str_export1 =  '<select name="export_type">' .                    '<option value="sqldumpfile">' . __('SQL dump (file download)') . '</option>' .                    '<option value="sqldump">' . __('SQL dump') . '</option>' .                    '<option value="execution" onclick="alert(\'' . PMA_escapeJsString(__('This option will replace your table and contained data.')) .'\')">' . __('SQL execution') . '</option>' .                    '</select>';    $str_export2 = '<input type="submit" name="report_export" value="' . __('Go') .'" />';    ?>    </form>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <input type="hidden" name="logtype" value="<?php echo htmlspecialchars($_REQUEST['logtype']);?>" />    <input type="hidden" name="date_from" value="<?php echo htmlspecialchars($_REQUEST['date_from']);?>" />    <input type="hidden" name="date_to" value="<?php echo htmlspecialchars($_REQUEST['date_to']);?>" />    <input type="hidden" name="users" value="<?php echo htmlspecialchars($_REQUEST['users']);?>" />    <?php    echo "<br/>" . sprintf(__('Export as %s'), $str_export1) . $str_export2 . "<br/>";    ?>    </form>    <?php    echo "<br/><br/><hr/><br/>\n";} // end of report/* * List selectable tables */$sql_query = " SELECT DISTINCT db_name, table_name FROM " .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . "." .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             " WHERE db_name = '" . PMA_sqlAddSlashes($GLOBALS['db']) . "' " .             " ORDER BY db_name, table_name";$sql_result = PMA_query_as_controluser($sql_query);if (PMA_DBI_num_rows($sql_result) > 0) {?>    <form method="post" action="tbl_tracking.php?<?php echo $url_query;?>">    <select name="table">    <?php    while ($entries = PMA_DBI_fetch_array($sql_result)) {        if (PMA_Tracker::isTracked($entries['db_name'], $entries['table_name'])) {            $status = ' (' . __('active') . ')';        } else {            $status = ' (' . __('not active') . ')';        }        if ($entries['table_name'] == $_REQUEST['table']) {            $s = ' selected="selected"';        } else {            $s = '';        }        echo '<option value="' . htmlspecialchars($entries['table_name']) . '"' . $s . '>' . htmlspecialchars($entries['db_name']) . ' . ' . htmlspecialchars($entries['table_name']) . $status . '</option>' . "\n";    }    ?>    </select>    <input type="submit" name="show_versions_submit" value="<?php echo __('Show versions');?>" />    </form><?php}?><br /><?php/* * List versions of current table */$sql_query = " SELECT * FROM " .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . "." .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             " WHERE db_name = '" . PMA_sqlAddSlashes($_REQUEST['db']) . "' ".             " AND table_name = '" . PMA_sqlAddSlashes($_REQUEST['table']) ."' ".             " ORDER BY version DESC ";$sql_result = PMA_query_as_controluser($sql_query);$last_version = 0;$maxversion = PMA_DBI_fetch_array($sql_result);$last_version = $maxversion['version'];if ($last_version > 0) {?>    <table id="versions" class="data">    <thead>    <tr>        <th><?php echo __('Database');?></th>        <th><?php echo __('Table');?></th>        <th><?php echo __('Version');?></th>        <th><?php echo __('Created');?></th>        <th><?php echo __('Updated');?></th>        <th><?php echo __('Status');?></th>        <th><?php echo __('Show');?></th>    </tr>    </thead>    <tbody>    <?php    $style = 'odd';    PMA_DBI_data_seek($sql_result, 0);    while ($version = PMA_DBI_fetch_array($sql_result)) {        if ($version['tracking_active'] == 1) {            $version_status = __('active');        } else {            $version_status = __('not active');        }        if ($version['version'] == $last_version) {            if ($version['tracking_active'] == 1) {                $tracking_active = true;            } else {                $tracking_active = false;            }        }    ?>        <tr class="noclick <?php echo $style;?>">            <td><?php echo htmlspecialchars($version['db_name']);?></td>            <td><?php echo htmlspecialchars($version['table_name']);?></td>            <td><?php echo htmlspecialchars($version['version']);?></td>            <td><?php echo htmlspecialchars($version['date_created']);?></td>            <td><?php echo htmlspecialchars($version['date_updated']);?></td>            <td><?php echo $version_status;?></td>            <td> <a href="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $version['version']));?>"><?php echo __('Tracking report');?></a>                | <a href="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('snapshot' => 'true', 'version' => $version['version']));?>"><?php echo __('Structure snapshot');?></a>            </td>        </tr>    <?php        if ($style == 'even') {            $style = 'odd';        } else {            $style = 'even';        }    }    ?>    </tbody>    </table>    <?php if ($tracking_active == true) {?>        <div id="div_deactivate_tracking">        <form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>">        <fieldset>            <legend><?php printf(__('Deactivate tracking for %s.%s'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>            <input type="hidden" name="version" value="<?php echo $last_version; ?>" />            <input type="submit" name="submit_deactivate_now" value="<?php echo __('Deactivate now'); ?>" />        </fieldset>        </form>        </div>    <?php    }    ?>    <?php if ($tracking_active == false) {?>        <div id="div_activate_tracking">        <form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>">        <fieldset>            <legend><?php printf(__('Activate tracking for %s.%s'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>            <input type="hidden" name="version" value="<?php echo $last_version; ?>" />            <input type="submit" name="submit_activate_now" value="<?php echo __('Activate now'); ?>" />        </fieldset>        </form>        </div>    <?php    }}?><div id="div_create_version"><form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><fieldset>    <legend><?php printf(__('Create version %s of %s.%s'), ($last_version + 1), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>    <input type="hidden" name="version" value="<?php echo ($last_version + 1); ?>" />    <p><?php echo __('Track these data definition statements:');?></p>    <input type="checkbox" name="alter_table" value="true" checked="checked" /> ALTER TABLE<br/>    <input type="checkbox" name="rename_table" value="true" checked="checked" /> RENAME TABLE<br/>    <input type="checkbox" name="create_table" value="true" checked="checked" /> CREATE TABLE<br/>    <input type="checkbox" name="drop_table" value="true" checked="checked" /> DROP TABLE<br/>    <br/>    <input type="checkbox" name="create_index" value="true" checked="checked" /> CREATE INDEX<br/>    <input type="checkbox" name="drop_index" value="true" checked="checked" /> DROP INDEX<br/>    <p><?php echo __('Track these data manipulation statements:');?></p>    <input type="checkbox" name="insert" value="true" checked="checked" /> INSERT<br/>    <input type="checkbox" name="update" value="true" checked="checked" /> UPDATE<br/>    <input type="checkbox" name="delete" value="true" checked="checked" /> DELETE<br/>    <input type="checkbox" name="truncate" value="true" checked="checked" /> TRUNCATE<br/></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_create_version" value="<?php echo __('Create version'); ?>" /></fieldset></form></div><br class="clearfloat"/><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * */require_once './libraries/engines/merge.lib.php';/** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_mrg_myisam extends PMA_StorageEngine_merge{    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'merge';    }}?>
<?php/** * Handles the visualization of GIS POLYGON objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Polygon extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesn't have an inner ring, use polygon itself        if (strpos($polygon, "),(") === false) {            $ring = $polygon;        } else {            // Seperate outer ring and use it to determin min-max            $parts = explode("),(", $polygon);            $ring = $parts[0];        }        return $this->setMinMax($ring, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $fill_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, $scale_data, true);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $points_arr = $this->extractPoints($outer, $scale_data, true);            foreach ($inner as $inner_poly) {                $points_arr = array_merge(                    $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                );            }        }        // draw polygon        imagefilledpolygon($image, $points_arr, sizeof($points_arr) / 2, $color);        // print label if applicable        if (isset($label) && trim($label) != '') {            imagestring($image, 1, $points_arr[2], $points_arr[3], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $fill_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = array($red, $green, $blue);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, $scale_data, true);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $points_arr = $this->extractPoints($outer, $scale_data, true);            foreach ($inner as $inner_poly) {                $points_arr = array_merge(                    $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                );            }        }        // draw polygon        $pdf->Polygon($points_arr, 'F*', array(), $color, true);        // print label if applicable        if (isset($label) && trim($label) != '') {            $pdf->SetXY($points_arr[2], $points_arr[3]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $fill_color, $scale_data)    {        $polygon_options = array(            'name'        => $label,            'id'          => $label . rand(),            'class'       => 'polygon vector',            'stroke'      => 'black',            'stroke-width'=> 0.5,            'fill'        => $fill_color,            'fill-rule'   => 'evenodd',            'fill-opacity'=> 0.8,        );        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        $row = '<path d="';        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $row .= $this->_drawPath($polygon, $scale_data);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $row .= $this->_drawPath($outer, $scale_data);            foreach ($inner as $inner_poly) {                $row .= $this->_drawPath($inner_poly, $scale_data);            }        }        $row .= '"';        foreach ($polygon_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS POLYGON object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $fill_color, $scale_data)    {        $style_options = array(            'strokeColor' => '#000000',            'strokeWidth' => 0.5,            'fillColor'   => $fill_color,            'fillOpacity' => 0.8,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $row = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        $row .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector(';        $row .= $this->addPointsForOpenLayersPolygon($polygon, $srid);        $row .= 'null, ' . json_encode($style_options) . '));';        return $row;    }    /**     * Draws a ring of the polygon using SVG path element.     *     * @param string $polygon    The ring     * @param array  $scale_data Array containing data related to scaling     *     * @return the code to draw the ring     */    private function _drawPath($polygon, $scale_data)    {        $points_arr = $this->extractPoints($polygon, $scale_data);        $row = ' M ' . $points_arr[0][0] . ', ' . $points_arr[0][1];        $other_points = array_slice($points_arr, 1, count($points_arr) - 2);        foreach ($other_points as $point) {            $row .= ' L ' . $point[0] . ', ' . $point[1];        }        $row .= ' Z ';        return $row;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_lines = isset($gis_data[$index]['POLYGON']['no_of_lines'])            ? $gis_data[$index]['POLYGON']['no_of_lines'] : 1;        if ($no_of_lines < 1) {            $no_of_lines = 1;        }        $wkt = 'POLYGON(';        for ($i = 0; $i < $no_of_lines; $i++) {            $no_of_points = isset($gis_data[$index]['POLYGON'][$i]['no_of_points'])                ? $gis_data[$index]['POLYGON'][$i]['no_of_points'] : 4;            if ($no_of_points < 4) {                $no_of_points = 4;            }            $wkt .= '(';            for ($j = 0; $j < $no_of_points; $j++) {                $wkt .= ((isset($gis_data[$index]['POLYGON'][$i][$j]['x'])                    && trim($gis_data[$index]['POLYGON'][$i][$j]['x']) != '')                    ? $gis_data[$index]['POLYGON'][$i][$j]['x'] : $empty)                    . ' ' . ((isset($gis_data[$index]['POLYGON'][$i][$j]['y'])                    && trim($gis_data[$index]['POLYGON'][$i][$j]['y']) != '')                    ? $gis_data[$index]['POLYGON'][$i][$j]['y'] : $empty) .',';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Calculates the area of a closed simple polygon.     *     * @param array $ring array of points forming the ring     *     * @return the area of a closed simple polygon.     */    public static function area($ring)    {        $no_of_points = count($ring);        // If the last point is same as the first point ignore it        $last = count($ring) - 1;        if (($ring[0]['x'] == $ring[$last]['x'])            && ($ring[0]['y'] == $ring[$last]['y'])        ) {            $no_of_points--;        }        //         _n-1        // A = _1_ \    (X(i) * Y(i+1)) - (Y(i) * X(i+1))        //      2  /__        //         i=0        $area = 0;        for ($i = 0; $i < $no_of_points; $i++) {            $j = ($i + 1) % $no_of_points;            $area += $ring[$i]['x'] * $ring[$j]['y'];            $area -= $ring[$i]['y'] * $ring[$j]['x'];        }        $area /= 2.0;        return $area;    }    /**     * Determines whether a set of points represents an outer ring.     * If points are in clockwise orientation then, they form an outer ring.     *     * @param array $ring array of points forming the ring     *     * @return whether a set of points represents an outer ring.     */    public static function isOuterRing($ring)    {        // If area is negative then it's in clockwise orientation,        // i.e. it's an outer ring        if (PMA_GIS_Polygon::area($ring) < 0) {            return true;        }        return false;    }    /**     * Determines whether a given point is inside a given polygon.     *     * @param array $point   x, y coordinates of the point     * @param array $polygon array of points forming the ring     *     * @return whether a given point is inside a given polygon     */    public static function isPointInsidePolygon($point, $polygon)    {        // If first point is repeated at the end remove it        $last = count($polygon) - 1;        if (($polygon[0]['x'] == $polygon[$last]['x'])            && ($polygon[0]['y'] == $polygon[$last]['y'])        ) {            $polygon = array_slice($polygon, 0, $last);        }        $no_of_points = count($polygon);        $counter = 0;        // Use ray casting algorithm        $p1 = $polygon[0];        for ($i = 1; $i <= $no_of_points; $i++) {            $p2 = $polygon[$i % $no_of_points];            if ($point['y'] > min(array($p1['y'], $p2['y']))) {                if ($point['y'] <= max(array($p1['y'], $p2['y']))) {                    if ($point['x'] <= max(array($p1['x'], $p2['x']))) {                        if ($p1['y'] != $p2['y']) {                            $xinters = ($point['y'] - $p1['y'])                                * ($p2['x'] - $p1['x'])                                / ($p2['y'] - $p1['y']) + $p1['x'];                            if ($p1['x'] == $p2['x'] || $point['x'] <= $xinters) {                                $counter++;                            }                        }                    }                }            }            $p1 = $p2;        }        if ($counter % 2 == 0) {            return  false;        } else {            return true;        }    }    /**     * Returns a point that is guaranteed to be on the surface of the ring.     * (for simple closed rings)     *     * @param array $ring array of points forming the ring     *     * @return a point on the surface of the ring     */    public static function getPointOnSurface($ring)    {        // Find two consecutive distinct points.        for ($i = 0; $i < count($ring) - 1; $i++) {            if ($ring[$i]['y'] != $ring[$i + 1]['y']) {                $x0 = $ring[$i]['x'];                $x1 = $ring[$i + 1]['x'];                $y0 = $ring[$i]['y'];                $y1 = $ring[$i + 1]['y'];                break;            }        }        if (! isset($x0)) {            return false;        }        // Find the mid point        $x2 = ($x0 + $x1) / 2;        $y2 = ($y0 + $y1) / 2;        // Always keep $epsilon < 1 to go with the reduction logic down here        $epsilon = 0.1;        $denominator = sqrt(pow(($y1 - $y0), 2) + pow(($x0 - $x1), 2));        $pointA = array(); $pointB = array();        while (true) {            // Get the points on either sides of the line            // with a distance of epsilon to the mid point            $pointA['x'] = $x2 + ($epsilon * ($y1 - $y0)) / $denominator;            $pointA['y'] = $y2 + ($pointA['x'] - $x2) * ($x0 - $x1) / ($y1 - $y0);            $pointB['x'] = $x2 + ($epsilon * ($y1 - $y0)) / (0 - $denominator);            $pointB['y'] = $y2 + ($pointB['x'] - $x2) * ($x0 - $x1) / ($y1 - $y0);            // One of the points should be inside the polygon,            // unless epcilon chosen is too large            if (PMA_GIS_Polygon::isPointInsidePolygon($pointA, $ring)) {                return $pointA;            } elseif (PMA_GIS_Polygon::isPointInsidePolygon($pointB, $ring)) {                return $pointB;            } else {                //If both are outside the polygon reduce the epsilon and                //recalculate the points(reduce exponentially for faster convergance)                $epsilon = pow($epsilon, 2);                if ($epsilon == 0) {                    return false;                }            }        }    }    /** Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'POLYGON';            $wkt = $value;        }        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($wkt, 9, (strlen($wkt) - 11));        // Seperate each linestring        $linerings = explode("),(", $polygon);        $params[$index]['POLYGON']['no_of_lines'] = count($linerings);        $j = 0;        foreach ($linerings as $linering) {            $points_arr = $this->extractPoints($linering, null);            $no_of_points = count($points_arr);            $params[$index]['POLYGON'][$j]['no_of_points'] = $no_of_points;            for ($i = 0; $i < $no_of_points; $i++) {                $params[$index]['POLYGON'][$j][$i]['x'] = $points_arr[$i][0];                $params[$index]['POLYGON'][$j][$i]['y'] = $points_arr[$i][1];            }            $j++;        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/bookmark.lib.php';PMA_checkParameters(array('db'));$is_show_stats = $cfg['ShowStats'];$db_is_information_schema = PMA_is_system_schema($db);if ($db_is_information_schema) {    $is_show_stats = false;}/** * Defines the urls to return to in case of error in a sql statement */$err_url_0 = 'main.php?' . PMA_generate_common_url();$err_url   = $cfg['DefaultTabDatabase'] . '?' . PMA_generate_common_url($db);/** * Ensures the database exists (else move to the "parent" script) and displays * headers */if (! isset($is_db) || ! $is_db) {    if (strlen($db)) {        $is_db = PMA_DBI_select_db($db);        // This "Command out of sync" 2014 error may happen, for example        // after calling a MySQL procedure; at this point we can't select        // the db but it's not necessarily wrong        if (PMA_DBI_getError() && $GLOBALS['errno'] == 2014) {            $is_db = true;            unset($GLOBALS['errno']);        }    }    // Not a valid db name -> back to the welcome page    if (! strlen($db) || ! $is_db) {        PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . 'main.php?' . PMA_generate_common_url('', '', '&') . (isset($message) ? '&message=' . urlencode($message) : '') . '&reload=1');        exit;    }} // end if (ensures db exists)/** * Changes database charset if requested by the user */if (isset($submitcollation) && !empty($db_collation)) {    list($db_charset) = explode('_', $db_collation);    $sql_query        = 'ALTER DATABASE ' . PMA_backquote($db) . ' DEFAULT' . PMA_generateCharsetQueryPart($db_collation);    $result           = PMA_DBI_query($sql_query);    $message          = PMA_Message::success();    unset($db_charset, $db_collation);    /**     * If we are in an Ajax request, let us stop the execution here. Necessary for     * db charset change action on db_operations.php.  If this causes a bug on     * other pages, we might have to move this to a different location.     */    if ( $GLOBALS['is_ajax_request'] == true) {        PMA_ajaxResponse($message, $message->isSuccess());    };}require_once './libraries/header.inc.php';/** * Set parameters for links */$url_query = PMA_generate_common_url($db);?>
<?php/** * Overview (main page) * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/display_select_lang.lib.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/index.lib.php';// prepare unfiltered language list$all_languages = PMA_langList();uasort($all_languages, 'PMA_language_cmp');$cf = ConfigFile::getInstance();$separator = PMA_get_arg_separator('html');// message handlingmessages_begin();//// Check phpMyAdmin version//if (isset($_GET['version_check'])) {    PMA_version_check();}//// Perform various security, compatibility and consistency checks//perform_config_checks();//// Check whether we can read/write configuration//$config_readable = false;$config_writable = false;$config_exists = false;check_config_rw($config_readable, $config_writable, $config_exists);if (!$config_writable || !$config_readable) {    messages_set('error', 'config_rw', __('Cannot load or save configuration'),        PMA_lang(__('Please create web server writable folder [em]config[/em] in phpMyAdmin top level directory as described in [a@Documentation.html#setup_script]documentation[/a]. Otherwise you will be only able to download or display it.')));}//// Check https connection//$is_https = !empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) == 'on';if (!$is_https) {    $text = __('You are not using a secure connection; all data (including potentially sensitive information, like passwords) is transferred unencrypted!');    if (!empty($_SERVER['REQUEST_URI']) && !empty($_SERVER['HTTP_HOST'])) {        $link = 'https://' . htmlspecialchars($_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);        $strInsecureConnectionMsg2 = __('If your server is also configured to accept HTTPS requests follow [a@%s]this link[/a] to use a secure connection.');        $strInsecureConnectionMsg2 = sprintf($strInsecureConnectionMsg2, $link);        $text .= ' ' . PMA_lang($strInsecureConnectionMsg2);    }    messages_set('notice', 'no_https', __('Insecure connection'), $text);}?><form id="select_lang" method="post" action="<?php echo htmlspecialchars($_SERVER['REQUEST_URI']) ?>">    <?php echo PMA_generate_common_hidden_inputs() ?>    <bdo xml:lang="en" dir="ltr"><label for="lang">    <?php echo __('Language') . (__('Language') != 'Language' ? ' - Language' : '') ?>    </label></bdo><br />    <select id="lang" name="lang" class="autosubmit" xml:lang="en" dir="ltr">    <?php    // create language list    $lang_list = array();    foreach ($all_languages as $each_lang_key => $each_lang) {        $lang_name = PMA_langName($each_lang);        //Is current one active?        $selected = ($GLOBALS['lang'] == $each_lang_key) ? ' selected="selected"' : '';        echo '<option value="' . $each_lang_key . '"' . $selected . '>' . $lang_name            . '</option>' . "\n";    }    ?>    </select></form><?php// Check for done action info and set notice message if presentswitch ($action_done) {    case 'config_saved':        /* Use uniqid to display this message every time configuration is saved */        messages_set('notice', uniqid('config_saved'), __('Configuration saved.'),            PMA_lang(__('Configuration saved to file config/config.inc.php in phpMyAdmin top level directory, copy it to top level one and delete directory config to use it.')));        break;    default:        break;}?><h2><?php echo __('Overview') ?></h2><?php// message handlingmessages_end();messages_show_html();?><a href="#" id="show_hidden_messages" style="display:none"><?php echo __('Show hidden messages (#MSG_COUNT)') ?></a><h3><?php echo __('Servers') ?></h3><?php//// Display server list//display_form_top('index.php', 'get', array(    'page' => 'servers',    'mode' => 'add'));?><div class="form"><?php if ($cf->getServerCount() > 0): ?><table cellspacing="0" class="datatable" style="table-layout: fixed"><tr>    <th>#</th>    <th><?php echo __('Name') ?></th>    <th><?php echo __('Authentication type') ?></th>    <th colspan="2">DSN</th></tr><?php foreach ($cf->getServers() as $id => $server): ?><tr>    <td><?php echo $id ?></td>    <td><?php echo htmlspecialchars($cf->getServerName($id)) ?></td>    <td><?php echo htmlspecialchars($cf->getValue("Servers/$id/auth_type")) ?></td>    <td><?php echo htmlspecialchars($cf->getServerDSN($id)) ?></td>    <td style="white-space: nowrap">        <small>        <a href="<?php echo "?page=servers{$separator}mode=edit{$separator}id=$id" ?>"><?php echo __('Edit') ?></a>        | <a href="<?php echo "?page=servers{$separator}mode=remove{$separator}id=$id" ?>"><?php echo __('Delete') ?></a>        </small>    </td></tr><?php endforeach; ?></table><?php else: ?><table width="100%"><tr>    <td>        <i><?php echo __('There are no configured servers') ?></i>    </td></tr></table><?php endif; ?><table width="100%"><tr>    <td class="lastrow" style="text-align: left">        <input type="submit" name="submit" value="<?php echo __('New server') ?>" />    </td></tr></table></div><?phpdisplay_form_bottom();?><h3><?php echo __('Configuration file') ?></h3><?php//// Display config file settings and load/save form//$form_display = new FormDisplay();display_form_top('config.php');display_fieldset_top('', '', null, array('class' => 'simple'));// Display language list$opts = array(    'doc' => $form_display->getDocLink('DefaultLang'),    'wiki' => $form_display->getWikiLink('DefaultLang'),    'values' => array(),    'values_escaped' => true);foreach ($all_languages as $each_lang_key => $each_lang) {    $lang_name = PMA_langName($each_lang);    $opts['values'][$each_lang_key] = $lang_name;}display_input('DefaultLang', __('Default language'), '', 'select',    $cf->getValue('DefaultLang'), true, $opts);// Display server list$opts = array(    'doc' => $form_display->getDocLink('ServerDefault'),    'wiki' => $form_display->getWikiLink('ServerDefault'),    'values' => array(),    'values_disabled' => array());if ($cf->getServerCount() > 0) {    $opts['values']['0'] = __('let the user choose');    $opts['values']['-'] = '------------------------------';    if ($cf->getServerCount() == 1) {        $opts['values_disabled'][] = '0';    }    $opts['values_disabled'][] = '-';    foreach ($cf->getServers() as $id => $server) {        $opts['values'][(string)$id] = $cf->getServerName($id) . " [$id]";    }} else {    $opts['values']['1'] = __('- none -');    $opts['values_escaped'] = true;}display_input('ServerDefault', __('Default server'), '', 'select',    $cf->getValue('ServerDefault'), true, $opts);// Display EOL list$opts = array(    'values' => array(        'unix' => 'UNIX / Linux (\n)',        'win' => 'Windows (\r\n)'),    'values_escaped' => true);$eol = PMA_ifSetOr($_SESSION['eol'], (PMA_IS_WINDOWS ? 'win' : 'unix'));display_input('eol', __('End of line'), '', 'select',    $eol, true, $opts);?><tr>    <td colspan="2" class="lastrow" style="text-align: left">        <input type="submit" name="submit_display" value="<?php echo __('Display') ?>" />        <input type="submit" name="submit_download" value="<?php echo __('Download') ?>" />        &nbsp; &nbsp;        <input type="submit" name="submit_save" value="<?php echo __('Save') ?>"<?php if (!$config_writable) echo ' disabled="disabled"' ?> />        <input type="submit" name="submit_load" value="<?php echo __('Load') ?>"<?php if (!$config_exists) echo ' disabled="disabled"' ?> />        <input type="submit" name="submit_delete" value="<?php echo __('Delete') ?>"<?php if (!$config_exists || !$config_writable) echo ' disabled="disabled"' ?> />        &nbsp; &nbsp;        <input type="submit" name="submit_clear" value="<?php echo __('Clear') ?>" class="red" />    </td></tr><?phpdisplay_fieldset_bottom_simple();display_form_bottom();?><div id="footer">    <a href="http://phpmyadmin.net"><?php echo __('phpMyAdmin homepage') ?></a>    <a href="http://sourceforge.net/donate/index.php?group_id=23067"><?php echo __('Donate') ?></a>    <a href="?version_check=1<?php echo "{$separator}token=" . $_SESSION[' PMA_token '] ?>"><?php echo __('Check for latest version') ?></a></div>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library for extracting information about system memory and cpu. Currently supports all * Windows and Linux plattforms * * This code is based on the OS Classes from the phpsysinfo project (http://phpsysinfo.sourceforge.net/) * * @package PhpMyAdmin *//** * @return array */function getSysInfo(){    $supported = array('Linux', 'WINNT');    $sysinfo = array();    if (in_array(PHP_OS, $supported)) {        return eval("return new ".PHP_OS."();");    }    return $sysinfo;}class WINNT{    private $_wmi;    public $os = 'WINNT';    public function __construct() {        // initialize the wmi object        $objLocator = new COM('WbemScripting.SWbemLocator');        $this->_wmi = $objLocator->ConnectServer();    }    function loadavg() {        $loadavg = "";        $sum = 0;        $buffer = $this->_getWMI('Win32_Processor', array('LoadPercentage'));        foreach ($buffer as $load) {            $value = $load['LoadPercentage'];            $loadavg .= $value.' ';            $sum += $value;        }        return array('loadavg' => $sum / count($buffer));    }    private function _getWMI($strClass, $strValue = array()) {        $arrData = array();        $value = "";        $objWEBM = $this->_wmi->Get($strClass);        $arrProp = $objWEBM->Properties_;        $arrWEBMCol = $objWEBM->Instances_();        foreach ($arrWEBMCol as $objItem) {            if (is_array($arrProp)) {                reset($arrProp);            }            $arrInstance = array();            foreach ($arrProp as $propItem) {                if ( empty($strValue)) {                    eval("\$value = \$objItem->".$propItem->Name.";");                    $arrInstance[$propItem->Name] = trim($value);                } else {                    if (in_array($propItem->Name, $strValue)) {                        eval("\$value = \$objItem->".$propItem->Name.";");                        $arrInstance[$propItem->Name] = trim($value);                    }                }            }            $arrData[] = $arrInstance;        }        return $arrData;    }    function memory() {        $buffer = $this->_getWMI("Win32_OperatingSystem", array('TotalVisibleMemorySize', 'FreePhysicalMemory'));        $mem = Array();        $mem['MemTotal'] = $buffer[0]['TotalVisibleMemorySize'];        $mem['MemFree'] = $buffer[0]['FreePhysicalMemory'];        $mem['MemUsed'] = $mem['MemTotal'] - $mem['MemFree'];        $buffer = $this->_getWMI('Win32_PageFileUsage');        $mem['SwapTotal'] = 0;        $mem['SwapUsed'] = 0;        $mem['SwapPeak'] = 0;        foreach ($buffer as $swapdevice) {            $mem['SwapTotal'] += $swapdevice['AllocatedBaseSize'] * 1024;            $mem['SwapUsed'] += $swapdevice['CurrentUsage'] * 1024;            $mem['SwapPeak'] += $swapdevice['PeakUsage'] * 1024;        }        return $mem;    }}class Linux{    public $os = 'Linux';    function loadavg() {        $buf = file_get_contents('/proc/stat');        $nums=preg_split("/\s+/", substr($buf, 0, strpos($buf, "\n")));        return Array('busy' => $nums[1]+$nums[2]+$nums[3], 'idle' => intval($nums[4]));    }    function memory() {        preg_match_all('/^(MemTotal|MemFree|Cached|Buffers|SwapCached|SwapTotal|SwapFree):\s+(.*)\s*kB/im', file_get_contents('/proc/meminfo'), $matches);        $mem = array_combine( $matches[1], $matches[2] );        $mem['MemUsed'] = $mem['MemTotal'] - $mem['MemFree'] - $mem['Cached'] - $mem['Buffers'];        $mem['SwapUsed'] = $mem['SwapTotal'] - $mem['SwapFree'] - $mem['SwapCached'];        foreach ($mem as $idx=>$value)            $mem[$idx] = intval($value);        return $mem;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common functions for generating the footer for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Creates a fieldset for adding a new item, if the user has the privileges. * * @param    string   $docu   String used to create a link to the MySQL docs * @param    string   $priv   Privilege to check for adding a new item * @param    string   $name   MySQL name of the item * * @return   string   An HTML snippet with the link to add a new item */function PMA_RTE_getFooterLinks($docu, $priv, $name){    global $db, $url_query, $ajax_class;    $icon = 'b_' . strtolower($name) . '_add.png';    $retval  = "";    $retval .= "<!-- ADD " . $name . " FORM START -->\n";    $retval .= "<fieldset class='left'>\n";    $retval .= "    <legend>" . __('New'). "</legend>\n";    $retval .= "        <div class='wrap'>\n";    if (PMA_currentUserHasPrivilege($priv, $db)) {        $retval .= "            <a {$ajax_class['add']} ";        $retval .= "href='db_" . strtolower($name) . "s.php";        $retval .= "?$url_query&amp;add_item=1'>";        $retval .= PMA_getIcon($icon);        $retval .= PMA_RTE_getWord('add') . "</a>\n";    } else {        $retval .= "            " . PMA_getIcon($icon);        $retval .= PMA_RTE_getWord('no_create') . "\n";    }    $retval .= "            " . PMA_showMySQLDocu('SQL-Syntax', $docu) . "\n";    $retval .= "        </div>\n";    $retval .= "</fieldset>\n";    $retval .= "<!-- ADD " . $name . " FORM END -->\n\n";    return $retval;} // end PMA_RTE_getFooterLinks()/** * Creates a fieldset for adding a new routine, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_RTN_getFooterLinks(){    return PMA_RTE_getFooterLinks('CREATE_PROCEDURE', 'CREATE ROUTINE', 'ROUTINE');}// end PMA_RTN_getFooterLinks()/** * Creates a fieldset for adding a new trigger, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_TRI_getFooterLinks(){    return PMA_RTE_getFooterLinks('CREATE_TRIGGER', 'TRIGGER', 'TRIGGER');} // end PMA_TRI_getFooterLinks()/** * Creates a fieldset for adding a new event, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_EVN_getFooterLinks(){    global $db, $url_query;    /**     * For events, we show the usual 'Add event' form and also     * a form for toggling the state of the event scheduler     */    // Init options for the event scheduler toggle functionality    $es_state = PMA_DBI_fetch_value(        "SHOW GLOBAL VARIABLES LIKE 'event_scheduler'",        0,        1    );    $es_state = strtolower($es_state);    $options = array(                    0 => array(                        'label' => __('OFF'),                        'value' => "SET GLOBAL event_scheduler=\"OFF\"",                        'selected' => ($es_state != 'on')                    ),                    1 => array(                        'label' => __('ON'),                        'value' => "SET GLOBAL event_scheduler=\"ON\"",                        'selected' => ($es_state == 'on')                    )               );    // Generate output    $retval  = "<!-- FOOTER LINKS START -->\n";    $retval .= "<div class='doubleFieldset'>\n";    // show the usual footer    $retval .= PMA_RTE_getFooterLinks('CREATE_EVENT', 'EVENT', 'EVENT');    $retval .= "    <fieldset class='right'>\n";    $retval .= "        <legend>\n";    $retval .= "            " . __('Event scheduler status') . "\n";    $retval .= "        </legend>\n";    $retval .= "        <div class='wrap'>\n";    // show the toggle button    $retval .= PMA_toggleButton(        "sql.php?$url_query&amp;goto=db_events.php" . urlencode("?db=$db"),        'sql_query',        $options,        'PMA_slidingMessage(data.sql_query);'    );    $retval .= "        </div>\n";    $retval .= "    </fieldset>\n";    $retval .= "    <div style='clear: both;'></div>\n";    $retval .= "</div>";    $retval .= "<!-- FOOTER LINKS END -->\n";    return $retval;} // end PMA_EVN_getFooterLinks()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_ndbcluster extends PMA_StorageEngine{    /**     * @return  array     */    function getVariables()    {        return array(            'ndb_connectstring' => array(            ),         );    }    /**     * @return  string  SQL query LIKE pattern     */    function getVariablesLikePattern()    {        return 'ndb\\_%';    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'ndbcluster';    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (!defined('PHPMYADMIN')) {    exit;}/**  * constant for differenciating array in $_SESSION variable  */$SESSION_KEY = '__upload_status';/**  * sets default plugin for handling the import process  */$_SESSION[$SESSION_KEY]["handler"] = "";/**  * unique ID for each upload  */$upload_id = uniqid("");/**  * list of available plugins  */$plugins = array(       "uploadprogress",       "apc",       "noplugin"       ); // available plugins. Each plugin has own checkfunction in display_import_ajax.lib.php and own file with functions in upload_#KEY#.php// select available pluginforeach ($plugins as $plugin) {    $check = "PMA_import_" . $plugin . "Check";    if ($check()) {        $_SESSION[$SESSION_KEY]["handler"] = $plugin;        include_once "import/upload/" . $plugin . ".php";        break;    }}/**  * Checks if APC bar extension is available and configured correctly.  *  * @return true if APC extension is available and if rfc1867 is enabled, false if it is not  */function PMA_import_apcCheck(){    if (! extension_loaded('apc') || ! function_exists('apc_fetch') || ! function_exists('getallheaders')) {        return false;    }    return (ini_get('apc.enabled') && ini_get('apc.rfc1867'));}/**  * Checks if UploadProgress bar extension is available.  *  * @return true if UploadProgress extension is available, false if it is not  */function PMA_import_uploadprogressCheck(){    if (! function_exists("uploadprogress_get_info") || ! function_exists('getallheaders')) {        return false;    }    return true;}/**  * Default plugin for handling import. If no other plugin is available, noplugin is used.  *  * @return true  */function PMA_import_nopluginCheck(){    return true;}/**  * The function outputs json encoded status of uploaded. It uses PMA_getUploadStatus, which is defined in plugin's file.  *  * @param $id - ID of transfer, usually $upload_id from display_import_ajax.lib.php  */function PMA_importAjaxStatus($id){    header('Content-type: application/json');    echo json_encode(PMA_getUploadStatus($id));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Handles table search tab * * display table search form, create SQL query from form data * and include sql.php to execute it * * @todo display search form again if no results from previous search * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';require_once './libraries/tbl_select.lib.php';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'tbl_select.js';$GLOBALS['js_include'][] = 'tbl_change.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'gis_data_editor.js';$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));$geom_types = PMA_getGISDatatypes();/** * Not selection yet required -> displays the selection form */if (! isset($param) || $param[0] == '') {    // Gets some core libraries    include_once './libraries/tbl_common.php';    //$err_url   = 'tbl_select.php' . $err_url;    $url_query .= '&amp;goto=tbl_select.php&amp;back=tbl_select.php';    /**     * Gets tables informations     */    include_once './libraries/tbl_info.inc.php';    /**     * Displays top menu links     */    include_once './libraries/tbl_links.inc.php';    if (! isset($goto)) {        $goto = $GLOBALS['cfg']['DefaultTabTable'];    }    // Defines the url to return to in case of error in the next sql statement    $err_url   = $goto . '?' . PMA_generate_common_url($db, $table);    // Gets the list and number of fields    list($fields_list, $fields_type, $fields_collation, $fields_null, $geom_column_present) = PMA_tbl_getFields($db, $table);    $fields_cnt = count($fields_list);    // retrieve keys into foreign fields, if any    // check also foreigners even if relwork is FALSE (to get    // foreign keys from innodb)    $foreigners = PMA_getForeigners($db, $table);    ?><fieldset id="fieldset_subtab"><?php$url_params = array();$url_params['db']    = $db;$url_params['table'] = $table;echo PMA_generate_html_tabs(PMA_tbl_getSubTabs(), $url_params, '', 'topmenu2');?>        <form method="post" action="tbl_select.php" name="insertForm" id="tbl_search_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?php echo PMA_generate_common_hidden_inputs($db, $table); ?><input type="hidden" name="goto" value="<?php echo $goto; ?>" /><input type="hidden" name="back" value="tbl_select.php" /><fieldset id="fieldset_table_search"><fieldset id="fieldset_table_qbe">    <legend><?php echo __('Do a "query by example" (wildcard: "%")') ?></legend>    <table class="data">    <?php echo PMA_tbl_setTableHeader($geom_column_present); ?>    <tbody>    <?php    $odd_row = true;    for ($i = 0; $i < $fields_cnt; $i++) {        ?>        <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">            <?php            // if 'Function' column is present            if ($geom_column_present) {                echo('<td>');                // if a geometry column                if (in_array($fields_type[$i], $geom_types)) {                    echo('<select class="geom_func" name="geom_func['. $i .']">');                        // get the relevant list of functions                        $funcs = PMA_getGISFunctions($fields_type[$i], true, true);                        foreach ($funcs as $func_name => $func) {                            $name =  isset($func['display']) ? $func['display'] : $func_name;                            echo('<option value="' . htmlspecialchars($name) . '">'                                . htmlspecialchars($name) . '</option>');                        }                    echo('</select>');                } else {                    echo('&nbsp;');                }                echo('</td>');            }            ?>            <th><?php echo htmlspecialchars($fields_list[$i]); ?></th>            <td><?php echo htmlspecialchars($fields_type[$i]); ?></td>            <td><?php echo $fields_collation[$i]; ?></td>            <td><select name="func[]">        <?php        if (strncasecmp($fields_type[$i], 'enum', 4) == 0) {            foreach ($GLOBALS['cfg']['EnumOperators'] as $fc) {                echo "\n" . '                        '                   . '<option value="' . htmlspecialchars($fc) . '">'                   . htmlspecialchars($fc) . '</option>';            }        } elseif (preg_match('@char|blob|text|set@i', $fields_type[$i])) {            foreach ($GLOBALS['cfg']['TextOperators'] as $fc) {            echo "\n" . '                        '               . '<option value="' . htmlspecialchars($fc) . '">'               . htmlspecialchars($fc) . '</option>';            }        } else {            foreach ($GLOBALS['cfg']['NumOperators'] as $fc) {                echo "\n" . '                        '                   . '<option value="' .  htmlspecialchars($fc) . '">'                   . htmlspecialchars($fc) . '</option>';            }        } // end if... else...        if ($fields_null[$i]) {            foreach ($GLOBALS['cfg']['NullOperators'] as $fc) {                echo "\n" . '                        '                   . '<option value="' .  htmlspecialchars($fc) . '">'                   . htmlspecialchars($fc) . '</option>';            }        }        ?>                </select>            </td>            <td>        <?php        $field = $fields_list[$i];        $foreignData = PMA_getForeignData($foreigners, $field, false, '', '');        echo PMA_getForeignFields_Values($foreigners, $foreignData, $field, $fields_type, $i, $db, $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], '', true);        ?>            <input type="hidden" name="names[<?php echo $i; ?>]"                value="<?php echo htmlspecialchars($fields_list[$i]); ?>" />            <input type="hidden" name="types[<?php echo $i; ?>]"                value="<?php echo $fields_type[$i]; ?>" />            <input type="hidden" name="collations[<?php echo $i; ?>]"                value="<?php echo $fields_collation[$i]; ?>" />        </td>    </tr>        <?php    } // end for    ?>    </tbody>    </table><div id="gis_editor"></div><div id="popup_background"></div></fieldset><?php    PMA_generate_slider_effect('searchoptions', __('Options'));?><fieldset id="fieldset_select_fields">    <legend><?php echo __('Select columns (at least one):'); ?></legend>    <select name="param[]" size="<?php echo min($fields_cnt, 10); ?>"        multiple="multiple">    <?php    // Displays the list of the fields    foreach ($fields_list as $each_field) {        echo '        '            .'<option value="' . htmlspecialchars($each_field) . '"'            .' selected="selected">' . htmlspecialchars($each_field)            .'</option>' . "\n";    }    ?>    </select>    <input type="checkbox" name="distinct" value="DISTINCT" id="oDistinct" />    <label for="oDistinct">DISTINCT</label></fieldset><fieldset id="fieldset_search_conditions">    <legend><?php echo '<em>' . __('Or') . '</em> ' . __('Add search conditions (body of the "where" clause):'); ?></legend><?php echo PMA_showMySQLDocu('SQL-Syntax', 'Functions'); ?><input type="text" name="where" class="textfield" size="64" /></fieldset><fieldset id="fieldset_limit_rows">    <legend><?php echo __('Number of rows per page'); ?></legend>    <input type="text" size="4" name="session_max_rows"        value="<?php echo $GLOBALS['cfg']['MaxRows']; ?>" class="textfield" /></fieldset><fieldset id="fieldset_display_order">    <legend><?php echo __('Display order:'); ?></legend>    <select name="orderField">        <option value="--nil--"></option>    <?php    foreach ($fields_list as $each_field) {        echo '        '            .'<option value="' . htmlspecialchars($each_field) . '">'            .htmlspecialchars($each_field) . '</option>' . "\n";    } // end for    ?>    </select><?php    $choices = array(        'ASC'  => __('Ascending'),        'DESC' => __('Descending')    );    PMA_display_html_radio('order', $choices, 'ASC', false, true, "formelement");    unset($choices);?></fieldset><br style="clear: both;"/></div></fieldset><fieldset class="tblFooters">    <input type="hidden" name="max_number_of_fields"        value="<?php echo $fields_cnt; ?>" />    <input type="submit" name="submit" value="<?php echo __('Go'); ?>" /></fieldset></form><div id="sqlqueryresults"></div>    <?php    include './libraries/footer.inc.php';?></fieldset><?php} else {    /**     * Selection criteria have been submitted -> do the work     */    // Builds the query    $sql_query = 'SELECT ' . (isset($distinct) ? 'DISTINCT ' : '');    // if all fields were selected to display, we do a SELECT *    // (more efficient and this helps prevent a problem in IE    // if one of the rows is edited and we come back to the Select results)    if (count($param) == $max_number_of_fields) {        $sql_query .= '* ';    } else {        $param = PMA_backquote($param);        $sql_query .= implode(', ', $param);    } // end if    // avoid a loop, for example when $cfg['DefaultTabTable'] is set    // to 'tbl_select.php'    unset($param);    $sql_query .= ' FROM ' . PMA_backquote($table);    // The where clause    if (trim($where) != '') {        $sql_query .= ' WHERE ' . $where;    } else {        $w = $charsets = array();        $cnt_func = count($func);        reset($func);        while (list($i, $func_type) = each($func)) {            list($charsets[$i]) = explode('_', $collations[$i]);            $unaryFlag =  (isset($GLOBALS['cfg']['UnaryOperators'][$func_type]) && $GLOBALS['cfg']['UnaryOperators'][$func_type] == 1) ? true : false;            $tmp_geom_func = isset($geom_func[$i]) ? $geom_func[$i] : null;            $whereClause = PMA_tbl_search_getWhereClause($fields[$i], $names[$i], $types[$i], $collations[$i], $func_type, $unaryFlag, $tmp_geom_func);            if($whereClause)                $w[] = $whereClause;            } // end for        if ($w) {            $sql_query .= ' WHERE ' . implode(' AND ', $w);        }    } // end if    if ($orderField != '--nil--') {        $sql_query .= ' ORDER BY ' . PMA_backquote($orderField) . ' ' . $order;    } // end if    include './sql.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__substr_info(){    return array(        'info' => __('Displays a part of a string. The first option is the number of characters to skip from the beginning of the string (Default 0). The second option is the number of characters to return (Default: until end of string). The third option is the string to append and/or prepend when truncation occurs (Default: "...").'),        );}/** * */function PMA_transformation_text_plain__substr($buffer, $options = array(), $meta = ''){    // possibly use a global transform and feed it with special options:    // include './libraries/transformations/global.inc.php';    // further operations on $buffer using the $options[] array.    if (!isset($options[0]) ||  $options[0] == '') {        $options[0] = 0;    }    if (!isset($options[1]) ||  $options[1] == '') {        $options[1] = 'all';    }    if (!isset($options[2]) || $options[2] == '') {        $options[2] = '...';    }    $newtext = '';    if ($options[1] != 'all') {        $newtext = PMA_substr($buffer, $options[0], $options[1]);    } else {        $newtext = PMA_substr($buffer, $options[0]);    }    $length = strlen($newtext);    $baselength = strlen($buffer);    if ($length != $baselength) {        if ($options[0] != 0) {            $newtext = $options[2] . $newtext;        }        if (($length + $options[0]) != $baselength) {            $newtext .= $options[2];        }    }    return $newtext;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * returns code for selecting databases * * @return String HTML code */function PMA_replication_db_multibox(){    $multi_values = '';    $multi_values .= '<select name="db_select[]" size="6" multiple="multiple" id="db_select">';    foreach ($GLOBALS['pma']->databases as $current_db) {        if (PMA_is_system_schema($current_db)) {            continue;        }        if (! empty($selectall) || (isset($tmp_select) && strpos(' ' . $tmp_select, '|' . $current_db . '|'))) {            $is_selected = ' selected="selected"';        } else {            $is_selected = '';        }        $current_db = htmlspecialchars($current_db);        $multi_values .= '                <option value="' . $current_db . '" ' . $is_selected . '>' . $current_db . '</option>';    } // end while    $multi_values .= '</select>';    $multi_values .= '<br /><a href="#" id="db_reset_href">' . __('Uncheck All') . '</a>';    return $multi_values;}/** * prints out code for changing master * * @param String $submitname - submit button name */function PMA_replication_gui_changemaster($submitname){    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();    echo '<form method="post" action="server_replication.php">';    echo PMA_generate_common_hidden_inputs('', '');    echo ' <fieldset id="fieldset_add_user_login">';    echo '  <legend>' . __('Slave configuration') . ' - ' . __('Change or reconfigure master server') . '</legend>';    echo __('Make sure, you have unique server-id in your configuration file (my.cnf). If not, please add the following line into [mysqld] section:') . '<br />';    echo '<pre>server-id=' . time() . '</pre>';    echo '  <div class="item">';    echo '    <label for="text_username">' . __('User name') . ':</label>';    echo '    <input type="text" name="username" id="text_username" maxlength="'. $username_length . '" title="' . __('User name') . '" />';    echo '  </div>';    echo '  <div class="item">';    echo '    <label for="text_pma_pw">' . __('Password') .' :</label>';    echo '    <input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" />';    echo '  </div>';    echo '  <div class="item">';    echo '    <label for="text_hostname">' . __('Host') . ' :</label>';    echo '    <input type="text" id="text_hostname" name="hostname" maxlength="' . $hostname_length . '" value="" />';    echo '  </div>';    echo '  <div class="item">';    echo '     <label for="text_port">' . __('Port') . ':</label>';    echo '     <input type="text" id="text_port" name="port" maxlength="6" value="3306"  />';    echo '  </div>';    echo ' </fieldset>';    echo ' <fieldset id="fieldset_user_privtable_footer" class="tblFooters">';    echo '    <input type="hidden" name="sr_take_action" value="true" />';    echo '     <input type="submit" name="' . $submitname . '" id="confslave_submit" value="' . __('Go') . '" />';    echo ' </fieldset>';    echo '</form>';}/** * This function prints out table with replication status. * * @param string  $type   either master or slave * @param boolean $hidden if true, then default style is set to hidden, default value false * @param boolen  $title  if true, then title is displayed, default true */function PMA_replication_print_status_table($type, $hidden = false, $title = true){    global ${"{$type}_variables"};    global ${"{$type}_variables_alerts"};    global ${"{$type}_variables_oks"};    global ${"server_{$type}_replication"};    global ${"strReplicationStatus_{$type}"};    // TODO check the Masters server id?    // seems to default to '1' when queried via SHOW VARIABLES , but resulted in error on the master when slave connects    // [ERROR] Error reading packet from server: Misconfigured master - server id was not set ( server_errno=1236)    // [ERROR] Got fatal error 1236: 'Misconfigured master - server id was not set' from master when reading data from binary log    //    //$server_id = PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'server_id'", 0, 1);    echo '<div id="replication_' . $type . '_section" style="' . ($hidden ? 'display: none;' : '') . '"> ';    if ($title) {        if ($type == 'master') {            echo '<h4><a name="replication_' . $type . '"></a>' . __('Master status') . '</h4>';        } else {            echo '<h4><a name="replication_' . $type . '"></a>' . __('Slave status') . '</h4>';        }    } else {        echo '<br />';    }    echo '   <table id="server' . $type . 'replicationsummary" class="data"> ';    echo '   <thead>';    echo '    <tr>';    echo '     <th>' . __('Variable') . '</th>';    echo '        <th>' . __('Value') . '</th>';    echo '    </tr>';    echo '   </thead>';    echo '   <tbody>';    $odd_row = true;    foreach (${"{$type}_variables"} as $variable) {        echo '   <tr class="' . ($odd_row ? 'odd' : 'even') . '">';        echo '     <td class="name">';        echo        $variable;        echo '     </td>';        echo '     <td class="value">';        // TODO change to regexp or something, to allow for negative match        if (isset(${"{$type}_variables_alerts"}[$variable])            && ${"{$type}_variables_alerts"}[$variable] == ${"server_{$type}_replication"}[0][$variable]        ) {            echo '<span class="attention">';        } elseif (isset(${"{$type}_variables_oks"}[$variable])            && ${"{$type}_variables_oks"}[$variable] == ${"server_{$type}_replication"}[0][$variable]        ) {            echo '<span class="allfine">';        } else {            echo '<span>';        }        echo ${"server_{$type}_replication"}[0][$variable];        echo '</span>';        echo '  </td>';        echo ' </tr>';        $odd_row = ! $odd_row;    }    echo '   </tbody>';    echo ' </table>';    echo ' <br />';    echo '</div>';}/** * Prints table with slave users connected to this master * * @param boolean $hidden - if true, then default style is set to hidden, default value false */function PMA_replication_print_slaves_table($hidden = false){    // Fetch data    $data = PMA_DBI_fetch_result('SHOW SLAVE HOSTS', null, null);    echo '  <br />';    echo '  <div id="replication_slaves_section" style="' . ($hidden ? 'display: none;' : '') . '"> ';    echo '    <table class="data">';    echo '    <thead>';    echo '      <tr>';    echo '        <th>' . __('Server ID') . '</th>';    echo '        <th>' . __('Host') . '</th>';    echo '      </tr>';    echo '    </thead>';    echo '    <tbody>';    $odd_row = true;    foreach ($data as $slave) {        echo '    <tr class="' . ($odd_row ? 'odd' : 'even') . '">';        echo '      <td class="value">' . $slave['Server_id'] . '</td>';        echo '      <td class="value">' . $slave['Host'] . '</td>';        echo '    </tr>';        $odd_row = ! $odd_row;    }    echo '    </tbody>';    echo '    </table>';    echo '    <br />';    PMA_Message::notice(__('Only slaves started with the --report-host=host_name option are visible in this list.'))->display();    echo '    <br />';    echo '  </div>';}/** * get the correct username and hostname lengths for this MySQL server * * @return  array   username length, hostname length */function PMA_replication_get_username_hostname_length(){    $fields_info = PMA_DBI_get_columns('mysql', 'user');    $username_length = 16;    $hostname_length = 41;    foreach ($fields_info as $val) {        if ($val['Field'] == 'User') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $username_length = $v;            }        } elseif ($val['Field'] == 'Host') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $hostname_length = $v;            }        }    }    return array($username_length, $hostname_length);}/** * Print code to add a replication slave user to the master */function PMA_replication_gui_master_addslaveuser(){    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();    if (isset($GLOBALS['username']) && strlen($GLOBALS['username']) === 0) {        $GLOBALS['pred_username'] = 'any';    }    echo '<div id="master_addslaveuser_gui">';    echo '<form autocomplete="off" method="post" action="server_privileges.php" onsubmit="return checkAddUser(this);">';    echo PMA_generate_common_hidden_inputs('', '');    echo '<fieldset id="fieldset_add_user_login">'        . '<legend>'.__('Add slave replication user').'</legend>'    . '<input type="hidden" name="grant_count" value="25" />'    . '<input type="hidden" name="createdb" id="createdb_0" value="0" />'        . '<input id="checkbox_Repl_slave_priv" type="hidden" title="Needed for the replication slaves." value="Y" name="Repl_slave_priv"/>'        . '<input id="checkbox_Repl_client_priv" type="hidden" title="Needed for the replication slaves." value="Y" name="Repl_client_priv"/>'    . ''        . '<input type="hidden" name="sr_take_action" value="true" />'        . '<div class="item">'        . '<label for="select_pred_username">'        . '    ' . __('User name') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_username" id="select_pred_username" title="' . __('User name') . '"'        . '        onchange="if (this.value == \'any\') { username.value = \'\'; } else if (this.value == \'userdefined\') { username.focus(); username.select(); }">'        . '        <option value="any"' . ((isset($GLOBALS['pred_username']) && $GLOBALS['pred_username'] == 'any') ? ' selected="selected"' : '') . '>' . __('Any user') . '</option>'        . '        <option value="userdefined"' . ((! isset($GLOBALS['pred_username']) || $GLOBALS['pred_username'] == 'userdefined') ? ' selected="selected"' : '') . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="text" name="username" maxlength="'        . $username_length . '" title="' . __('User name') . '"'        . (empty($GLOBALS['username'])        ? ''        : ' value="' . (isset($GLOBALS['new_username'])        ? $GLOBALS['new_username']        : $GLOBALS['username']) . '"')        . ' onchange="pred_username.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="select_pred_hostname">'        . '    ' . __('Host') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_hostname" id="select_pred_hostname" title="' . __('Host') . '"';    $_current_user = PMA_DBI_fetch_value('SELECT USER();');    if (! empty($_current_user)) {        $thishost = str_replace("'", '', substr($_current_user, (strrpos($_current_user, '@') + 1)));        if ($thishost == 'localhost' || $thishost == '127.0.0.1') {            unset($thishost);        }    }    echo '    onchange="if (this.value == \'any\') { hostname.value = \'%\'; } else if (this.value == \'localhost\') { hostname.value = \'localhost\'; } '        . (empty($thishost) ? '' : 'else if (this.value == \'thishost\') { hostname.value = \'' . addslashes(htmlspecialchars($thishost)) . '\'; } ')        . 'else if (this.value == \'hosttable\') { hostname.value = \'\'; } else if (this.value == \'userdefined\') { hostname.focus(); hostname.select(); }">' . "\n";    unset($_current_user);    // when we start editing a user, $GLOBALS['pred_hostname'] is not defined    if (! isset($GLOBALS['pred_hostname']) && isset($GLOBALS['hostname'])) {        switch (strtolower($GLOBALS['hostname'])) {        case 'localhost':        case '127.0.0.1':            $GLOBALS['pred_hostname'] = 'localhost';            break;        case '%':            $GLOBALS['pred_hostname'] = 'any';            break;        default:            $GLOBALS['pred_hostname'] = 'userdefined';            break;        }    }    echo '        <option value="any"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'any')        ? ' selected="selected"' : '') . '>' . __('Any host')        . '</option>'        . '        <option value="localhost"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'localhost')        ? ' selected="selected"' : '') . '>' . __('Local')        . '</option>';    if (!empty($thishost)) {        echo '        <option value="thishost"'            . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'thishost')            ? ' selected="selected"' : '') . '>' . __('This Host')            . '</option>';    }    unset($thishost);    echo '        <option value="hosttable"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'hosttable')        ? ' selected="selected"' : '') . '>' . __('Use Host Table')        . '</option>'        . '        <option value="userdefined"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'userdefined')        ? ' selected="selected"' : '')        . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="text" name="hostname" maxlength="'        . $hostname_length . '" value="'        . (isset($GLOBALS['hostname']) ? $GLOBALS['hostname'] : '')        . '" title="' . __('Host')        . '" onchange="pred_hostname.value = \'userdefined\';" />'        . PMA_showHint(__('When Host table is used, this field is ignored and values stored in Host table are used instead.'))        . '</div>'        . '<div class="item">'        . '<label for="select_pred_password">'        . '    ' . __('Password') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_password" id="select_pred_password" title="'        . __('Password') . '"'        . '            onchange="if (this.value == \'none\') { pma_pw.value = \'\'; pma_pw2.value = \'\'; } else if (this.value == \'userdefined\') { pma_pw.focus(); pma_pw.select(); }">'        . '        <option value="none"';    if (isset($GLOBALS['username']) && $mode != 'change') {        echo '  selected="selected"';    }    echo '>' . __('No Password') . '</option>'        . '        <option value="userdefined"' . (isset($GLOBALS['username']) ? '' : ' selected="selected"') . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" onchange="pred_password.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="text_pma_pw2">'        . '    ' . __('Re-type') . ':'        . '</label>'        . '<span class="options">&nbsp;</span>'        . '<input type="password" name="pma_pw2" id="text_pma_pw2" title="' . __('Re-type') . '" onchange="pred_password.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="button_generate_password">'        . '    ' . __('Generate Password') . ':'        . '</label>'        . '<span class="options">'        . '    <input type="button" id="button_generate_password" value="' . __('Generate') . '" onclick="suggestPassword(this.form)" />'        . '</span>'        . '<input type="text" name="generated_pw" id="generated_pw" />'        . '</div>'        . '</fieldset>';    echo '<fieldset id="fieldset_user_privtable_footer" class="tblFooters">'        . '    <input type="submit" name="adduser_submit" id="adduser_submit" value="' . __('Go') . '" />'        . '</fieldset>';    echo '</form>';    echo '</div>';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * List of avaible forms, each form is described as an array of fields to display. * Fields MUST have their counterparts in the $cfg array. * * There are two possible notations: * $forms['Form group']['Form name'] = array('Servers' => array(1 => array('host'))); * can be written as * $forms['Form group']['Form name'] = array('Servers/1/host'); * * You can assign default values set by special button ("set value: ..."), eg.: * 'Servers/1/pmadb' => 'phpmyadmin' * * To group options, use: * ':group:' . __('group name') // just define a group * or * 'option' => ':group' // group starting from this option * End group blocks with: * ':group:end' * * @package PhpMyAdmin-setup */$forms = array();$forms['_config.php'] = array(    'DefaultLang',    'ServerDefault');$forms['Servers']['Server'] = array('Servers' => array(1 => array(    'verbose',    'host',    'port',    'socket',    'ssl',    'connect_type',    'extension',    'compress',    'nopassword')));$forms['Servers']['Server_auth'] = array('Servers' => array(1 => array(    'auth_type',    ':group:' . __('Config authentication'),        'user',        'password',        ':group:end',    ':group:' . __('Cookie authentication'),        'auth_swekey_config' => './swekey.conf',        ':group:end',    ':group:' . __('HTTP authentication'),        'auth_http_realm',        ':group:end',    ':group:' . __('Signon authentication'),        'SignonSession',        'SignonURL',        'LogoutURL')));$forms['Servers']['Server_config'] = array('Servers' => array(1 => array(    'only_db',    'hide_db',    'AllowRoot',    'AllowNoPassword',    'DisableIS',    'AllowDeny/order',    'AllowDeny/rules',    'ShowDatabasesCommand',    'CountTables')));$forms['Servers']['Server_pmadb'] = array('Servers' => array(1 => array(    'pmadb' => 'phpmyadmin',    'controlhost',    'controluser',    'controlpass',    'verbose_check',    'bookmarktable' => 'pma_bookmark',    'relation' => 'pma_relation',    'userconfig' => 'pma_userconfig',    'table_info' => 'pma_table_info',    'column_info' => 'pma_column_info',    'history' => 'pma_history',    'recent' => 'pma_recent',    'table_uiprefs' => 'pma_table_uiprefs',    'tracking' => 'pma_tracking',    'table_coords' => 'pma_table_coords',    'pdf_pages' => 'pma_pdf_pages',    'designer_coords' => 'pma_designer_coords',    'MaxTableUiprefs' => 100)));$forms['Servers']['Server_tracking'] = array('Servers' => array(1 => array(    'tracking_version_auto_create',    'tracking_default_statements',    'tracking_add_drop_view',    'tracking_add_drop_table',    'tracking_add_drop_database',)));$forms['Features']['Import_export'] = array(    'UploadDir',    'SaveDir',    'RecodingEngine' => ':group',        'IconvExtraParams',        ':group:end',    'ZipDump',    'GZipDump',    'BZipDump',    'CompressOnFly');$forms['Features']['Security'] = array(    'blowfish_secret',    'ForceSSL',    'CheckConfigurationPermissions',    'TrustedProxies',    'AllowUserDropDatabase',    'AllowArbitraryServer',    'LoginCookieRecall',    'LoginCookieValidity',    'LoginCookieStore',    'LoginCookieDeleteAll');$forms['Features']['Page_titles'] = array(    'TitleDefault',    'TitleTable',    'TitleDatabase',    'TitleServer');$forms['Features']['Warnings'] = array(    'PmaNoRelation_DisableWarning',    'SuhosinDisableWarning',    'McryptDisableWarning');$forms['Features']['Developer'] = array(    'UserprefsDeveloperTab',    'Error_Handler/display',    'Error_Handler/gather',    'DBG/sql');$forms['Features']['Other_core_settings'] = array(    'AjaxEnable',    'VersionCheck',    'NaturalOrder',    'InitialSlidersState',    'ErrorIconic',    'ReplaceHelpImg',    'MaxDbList',    'MaxTableList',    'ShowHint',    'OBGzip',    'PersistentConnections',    'ExecTimeLimit',    'MemoryLimit',    'SkipLockedTables',    'DisableMultiTableMaintenance',    'UseDbSearch',    'AllowThirdPartyFraming');$forms['Sql_queries']['Sql_queries'] = array(    'ShowSQL',    'Confirm',    'QueryHistoryDB',    'QueryHistoryMax',    'IgnoreMultiSubmitErrors',    'VerboseMultiSubmit',    'MaxCharactersInDisplayedSQL',    'EditInWindow',    //'QueryWindowWidth', // overridden in theme    //'QueryWindowHeight',    'QueryWindowDefTab',    'RetainQueryBox');$forms['Sql_queries']['Sql_box'] = array('SQLQuery' => array(    'Edit',    'Explain',    'ShowAsPHP',    'Validate',    'Refresh'));$forms['Sql_queries']['Sql_validator'] = array('SQLValidator' => array(    'use',    'username',    'password'));$forms['Left_frame']['Left_frame'] = array(    'LeftFrameLight',    'LeftDisplayLogo',    'LeftLogoLink',    'LeftLogoLinkWindow',    'LeftPointerEnable',    'LeftRecentTable');$forms['Left_frame']['Left_servers'] = array(    'LeftDisplayServers',    'DisplayServersList');$forms['Left_frame']['Left_databases'] = array(    'DisplayDatabasesList',    'LeftFrameDBTree',    'LeftFrameDBSeparator',    'ShowTooltipAliasDB');$forms['Left_frame']['Left_tables'] = array(    'LeftDisplayTableFilterMinimum',    'LeftDefaultTabTable',    'LeftFrameTableSeparator',    'LeftFrameTableLevel',    'ShowTooltip',    'ShowTooltipAliasTB');$forms['Main_frame']['Startup'] = array(    'MainPageIconic',    'ShowCreateDb' => ':group',        'SuggestDBName',        ':group:end',    'ShowStats',    'ShowServerInfo',    'ShowPhpInfo',    'ShowChgPassword');$forms['Main_frame']['Browse'] = array(    'NavigationBarIconic',    'ShowAll',    'MaxRows',    'Order',    'BrowsePointerEnable',    'BrowseMarkerEnable',    'SaveCellsAtOnce',    'ShowDisplayDirection',    'RepeatCells',    'LimitChars',    'RowActionLinks',    'DefaultDisplay',    'RememberSorting');$forms['Main_frame']['Edit'] = array(    'ProtectBinary',    'ShowFunctionFields',    'ShowFieldTypesInDataEditView',    'CharEditing',    'MinSizeForInputField',    'MaxSizeForInputField',    'CharTextareaCols',    'CharTextareaRows',    'TextareaCols',    'TextareaRows',    'LongtextDoubleTextarea',    'InsertRows',    'ForeignKeyDropdownOrder',    'ForeignKeyMaxLimit');$forms['Main_frame']['Tabs'] = array(    'LightTabs',    'PropertiesIconic',    'DefaultTabServer',    'DefaultTabDatabase',    'DefaultTabTable',    'QueryWindowDefTab');$forms['Import']['Import_defaults'] = array('Import' => array(    'format',    'charset',    'allow_interrupt',    'skip_queries'));$forms['Import']['Sql'] = array('Import' => array(    'sql_compatibility',    'sql_no_auto_value_on_zero'));$forms['Import']['Csv'] = array('Import' => array(    ':group:' . __('CSV'),        'csv_replace',        'csv_ignore',        'csv_terminated',        'csv_enclosed',        'csv_escaped',        'csv_col_names',        ':group:end',    ':group:' . __('CSV using LOAD DATA'),        'ldi_replace',        'ldi_ignore',        'ldi_terminated',        'ldi_enclosed',        'ldi_escaped',        'ldi_local_option',        ':group:end'));$forms['Import']['Open_Document'] = array('Import' => array(    ':group:' . __('Open Document Spreadsheet'),        'ods_col_names',        'ods_empty_rows',        'ods_recognize_percentages',        'ods_recognize_currency'));$forms['Export']['Export_defaults'] = array('Export' => array(    'method',    ':group:' . __('Quick'),        'quick_export_onserver',        'quick_export_onserver_overwrite',        ':group:end',    ':group:' . __('Custom'),        'format',        'compression',        'charset',        'asfile' => ':group',            'onserver',            'onserver_overwrite',            ':group:end',        'remember_file_template',        'file_template_table',        'file_template_database',        'file_template_server'));$forms['Export']['Sql'] = array('Export' => array(    'sql_include_comments' => ':group',        'sql_dates',        'sql_relation',        'sql_mime',        ':group:end',    'sql_use_transaction',    'sql_disable_fk',    'sql_compatibility',    ':group:' . __('Database export options'),        'sql_drop_database',        'sql_structure_or_data',        ':group:end',    ':group:' . __('Structure'),        'sql_drop_table',        'sql_procedure_function',        'sql_create_table_statements' => ':group',            'sql_if_not_exists',            'sql_auto_increment',            ':group:end',        'sql_backquotes',        ':group:end',    ':group:' . __('Data'),        'sql_delayed',        'sql_ignore',        'sql_type',        'sql_insert_syntax',        'sql_max_query_size',        'sql_hex_for_blob',        'sql_utc_time'));$forms['Export']['CodeGen'] = array('Export' => array(    'codegen_format'));$forms['Export']['Csv'] = array('Export' => array(    ':group:' . __('CSV'),        'csv_separator',        'csv_enclosed',        'csv_escaped',        'csv_terminated',        'csv_null',        'csv_removeCRLF',        'csv_columns',        ':group:end',    ':group:' . __('CSV for MS Excel'),        'excel_null',        'excel_removeCRLF',        'excel_columns',        'excel_edition'));$forms['Export']['Latex'] = array('Export' => array(    'latex_caption',    'latex_structure_or_data',    ':group:' . __('Structure'),        'latex_structure_caption',        'latex_structure_continued_caption',        'latex_structure_label',        'latex_relation',        'latex_comments',        'latex_mime',        ':group:end',    ':group:' . __('Data'),        'latex_columns',        'latex_data_caption',        'latex_data_continued_caption',        'latex_data_label',        'latex_null'));$forms['Export']['Microsoft_Office'] = array('Export' => array(    ':group:' . __('Microsoft Word 2000'),        'htmlword_structure_or_data',        'htmlword_null',        'htmlword_columns'));$forms['Export']['Open_Document'] = array('Export' => array(    ':group:' . __('Open Document Spreadsheet'),        'ods_columns',        'ods_null',        ':group:end',    ':group:' . __('Open Document Text'),        'odt_structure_or_data',        ':group:' . __('Structure'),            'odt_relation',            'odt_comments',            'odt_mime',            ':group:end',        ':group:' . __('Data'),            'odt_columns',            'odt_null'));$forms['Export']['Texy'] = array('Export' => array(    'texytext_structure_or_data',    ':group:' . __('Data'),        'texytext_null',        'texytext_columns'));?>
<?php/** * Handles the visualization of GIS POINT objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Point extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        return $this->setMinMax($point, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial     GIS POINT object     * @param string $label       Label for the GIS POINT object     * @param string $point_color Color for the GIS POINT object     * @param array  $scale_data  Array containing data related to scaling     * @param image  $image       Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $point_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($point_color, 1, 2));        $green = hexdec(substr($point_color, 3, 2));        $blue  = hexdec(substr($point_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        $points_arr = $this->extractPoints($point, $scale_data);        // draw a small circle to mark the point        if ($points_arr[0][0] != '' && $points_arr[0][1] != '') {            imagearc($image, $points_arr[0][0], $points_arr[0][1], 7, 7, 0, 360, $color);            // print label if applicable            if (isset($label) && trim($label) != '') {                imagestring($image, 1, $points_arr[0][0], $points_arr[0][1], trim($label), $black);            }        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial     GIS POINT object     * @param string $label       Label for the GIS POINT object     * @param string $point_color Color for the GIS POINT object     * @param array  $scale_data  Array containing data related to scaling     * @param image  $pdf         TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $point_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($point_color, 1, 2));        $green = hexdec(substr($point_color, 3, 2));        $blue  = hexdec(substr($point_color, 4, 2));        $line  = array('width' => 1.25, 'color' => array($red, $green, $blue));        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        $points_arr = $this->extractPoints($point, $scale_data);        // draw a small circle to mark the point        if ($points_arr[0][0] != '' && $points_arr[0][1] != '') {            $pdf->Circle($points_arr[0][0], $points_arr[0][1], 2, 0, 360, 'D', $line);            // print label if applicable            if (isset($label) && trim($label) != '') {                $pdf->SetXY($points_arr[0][0], $points_arr[0][1]);                $pdf->SetFontSize(5);                $pdf->Cell(0, 0, trim($label));            }        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial     GIS POINT object     * @param string $label       Label for the GIS POINT object     * @param string $point_color Color for the GIS POINT object     * @param array  $scale_data  Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $point_color, $scale_data)    {        $point_options = array(            'name'        => $label,            'id'          => $label . rand(),            'class'       => 'point vector',            'fill'        => 'white',            'stroke'      => $point_color,            'stroke-width'=> 2,        );        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        $points_arr = $this->extractPoints($point, $scale_data);        $row = '';        if ($points_arr[0][0] != '' && $points_arr[0][1] != '') {            $row .= '<circle cx="' . $points_arr[0][0] . '" cy="' . $points_arr[0][1] . '" r="3"';            foreach ($point_options as $option => $val) {                $row .= ' ' . $option . '="' . trim($val) . '"';            }            $row .= '/>';        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial     GIS POINT object     * @param int    $srid        Spatial reference ID     * @param string $label       Label for the GIS POINT object     * @param string $point_color Color for the GIS POINT object     * @param array  $scale_data  Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $point_color, $scale_data)    {        $style_options = array(            'pointRadius'  => 3,            'fillColor'    => '#ffffff',            'strokeColor'  => $point_color,            'strokeWidth'  => 2,            'label'        => $label,            'labelYOffset' => -8,            'fontSize'     => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $result = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        $points_arr = $this->extractPoints($point, null);        if ($points_arr[0][0] != '' && $points_arr[0][1] != '') {            $result .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector(('                . 'new OpenLayers.Geometry.Point(' . $points_arr[0][0] . ', '                . $points_arr[0][1] . ').transform(new OpenLayers.Projection("EPSG:'                . $srid . '"), map.getProjectionObject())), null, '                . json_encode($style_options) . '));';        }        return $result;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Point deos not adhere to this parameter     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {         return 'POINT('             . ((isset($gis_data[$index]['POINT']['x']) && trim($gis_data[$index]['POINT']['x']) != '')             ? $gis_data[$index]['POINT']['x'] : '') . ' '             . ((isset($gis_data[$index]['POINT']['y']) && trim($gis_data[$index]['POINT']['y']) != '')             ? $gis_data[$index]['POINT']['y'] : '') . ')';    }    /**     * Generate the WKT for the data from ESRI shape files.     *     * @param array $row_data GIS data     *     * @return the WKT for the data from ESRI shape files     */    public function getShape($row_data)    {        return 'POINT(' . (isset($row_data['x']) ? $row_data['x'] : '')             . ' ' . (isset($row_data['y']) ? $row_data['y'] : '') . ')';    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'POINT';            $wkt = $value;        }        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($wkt, 6, (strlen($wkt) - 7));        $points_arr = $this->extractPoints($point, null);        $params[$index]['POINT']['x'] = $points_arr[0][0];        $params[$index]['POINT']['y'] = $points_arr[0][1];        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__imagelink_info(){    return array(        'info' => __('Displays an image and a link; the column contains the filename. The first option is a URL prefix like "http://www.example.com/". The second and third options are the width and the height in pixels.'),        );}/** * */function PMA_transformation_text_plain__imagelink($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    $transform_options = array ('string' => '<a href="' . (isset($options[0]) ? $options[0] : '') . $buffer . '" target="_blank"><img src="' . (isset($options[0]) ? $options[0] : '') . $buffer . '" border="0" width="' . (isset($options[1]) ? $options[1] : 100) . '" height="' . (isset($options[2]) ? $options[2] : 50) . '" />' . $buffer . '</a>');    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */$GLOBALS['data_dictionary_relations'] = array(    'CHARACTER_SETS' => array(        'DEFAULT_COLLATE_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLLATIONS' => array(        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        )    ),    'COLUMNS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        ),        'COLLATION_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'INDEXES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'INDEX_PARTS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'INNODB_LOCKS' => array(        'LOCK_TRX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_TRX',            'foreign_field' => 'TRX_ID'        )    ),    'INNODB_LOCK_WAITS' => array(        'REQUESTING_TRX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_TRX',            'foreign_field' => 'TRX_ID'        ),        'REQUESTED_LOCK_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_LOCKS',            'foreign_field' => 'LOCK_ID'        ),        'BLOCKING_TRX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_TRX',            'foreign_field' => 'TRX_ID'        ),        'BLOCKING_LOCK_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_LOCKS',            'foreign_field' => 'LOCK_ID'        )    ),    'INNODB_SYS_COLUMNS' => array(        'TABLE_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_TABLES',            'foreign_field' => 'TABLE_ID'        )    ),    'INNODB_SYS_FIELDS' => array(        'INDEX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_INDEXES',            'foreign_field' => 'INDEX_ID'        )    ),    'INNODB_SYS_INDEXES' => array(        'TABLE_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_TABLES',            'foreign_field' => 'TABLE_ID'        )    ),    'INNODB_SYS_TABLESTATS' => array(        'TABLE_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_TABLES',            'foreign_field' => 'TABLE_ID'        )    ),    'PLUGINS' => array(        'MODULE_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'MODULES',            'foreign_field' => 'MODULE_NAME'        )    ),    'SCHEMAS' => array(        'DEFAULT_COLLATION_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'TABLES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_COLLATION' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'TABLE_CACHE' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLE_CONSTRAINTS' => array(        'CONSTRAINT_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLE_DEFINITION_CACHE' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ));?>
<?php// TCPDF FONT FILE DESCRIPTION$type='TrueTypeUnicode';$name='DejaVuSans';$up=-63;$ut=44;$dw=600;$diff='';$originalsize=720012;$enc='';$file='dejavusans.z';$ctg='dejavusans.ctg.z';$desc=array('Flags'=>32,'FontBBox'=>'[-1021 -415 1681 1167]','ItalicAngle'=>0,'Ascent'=>928,'Descent'=>-236,'Leading'=>0,'CapHeight'=>729,'XHeight'=>547,'StemV'=>34,'StemH'=>15,'AvgWidth'=>507,'MaxWidth'=>1735,'MissingWidth'=>600);$cw=array(0=>600,1=>600,2=>600,3=>600,4=>600,5=>600,6=>600,7=>600,8=>0,9=>333,10=>600,11=>600,12=>600,13=>333,14=>600,15=>600,16=>600,17=>600,18=>600,19=>600,20=>600,21=>600,22=>600,23=>600,24=>600,25=>600,26=>600,27=>600,28=>600,29=>0,30=>600,31=>600,32=>318,33=>401,34=>460,35=>838,36=>636,37=>950,38=>780,39=>275,40=>390,41=>390,42=>500,43=>838,44=>318,45=>361,46=>318,47=>337,48=>636,49=>636,50=>636,51=>636,52=>636,53=>636,54=>636,55=>636,56=>636,57=>636,58=>337,59=>337,60=>838,61=>838,62=>838,63=>531,64=>1000,65=>684,66=>686,67=>698,68=>770,69=>632,70=>575,71=>775,72=>752,73=>295,74=>295,75=>656,76=>557,77=>863,78=>748,79=>787,80=>603,81=>787,82=>695,83=>635,84=>611,85=>732,86=>684,87=>989,88=>685,89=>611,90=>685,91=>390,92=>337,93=>390,94=>838,95=>500,96=>500,97=>613,98=>635,99=>550,100=>635,101=>615,102=>352,103=>635,104=>634,105=>278,106=>278,107=>579,108=>278,109=>974,110=>634,111=>612,112=>635,113=>635,114=>411,115=>521,116=>392,117=>634,118=>592,119=>818,120=>592,121=>592,122=>525,123=>636,124=>337,125=>636,126=>838,127=>600,128=>684,129=>684,130=>698,131=>632,132=>748,133=>787,134=>732,135=>613,136=>613,137=>613,138=>613,139=>613,140=>613,141=>550,142=>615,143=>615,144=>615,145=>615,146=>278,147=>278,148=>278,149=>278,150=>634,151=>612,152=>612,153=>612,154=>612,155=>612,156=>634,157=>634,158=>634,159=>634,160=>318,161=>401,162=>636,163=>636,164=>636,165=>636,166=>337,167=>500,168=>500,169=>1000,170=>471,171=>612,172=>838,173=>361,174=>1000,175=>500,176=>500,177=>838,178=>401,179=>401,180=>500,181=>636,182=>636,183=>318,184=>500,185=>401,186=>471,187=>612,188=>969,189=>969,190=>969,191=>531,192=>684,193=>684,194=>684,195=>684,196=>684,197=>684,198=>974,199=>698,200=>632,201=>632,202=>632,203=>632,204=>295,205=>295,206=>295,207=>295,208=>775,209=>748,210=>787,211=>787,212=>787,213=>787,214=>787,215=>838,216=>787,217=>732,218=>732,219=>732,220=>732,221=>611,222=>605,223=>630,224=>613,225=>613,226=>613,227=>613,228=>613,229=>613,230=>982,231=>550,232=>615,233=>615,234=>615,235=>615,236=>278,237=>278,238=>278,239=>278,240=>612,241=>634,242=>612,243=>612,244=>612,245=>612,246=>612,247=>838,248=>612,249=>634,250=>634,251=>634,252=>634,253=>592,254=>635,255=>592,256=>684,257=>613,258=>684,259=>613,260=>684,261=>613,262=>698,263=>550,264=>698,265=>550,266=>698,267=>550,268=>698,269=>550,270=>770,271=>635,272=>775,273=>635,274=>632,275=>615,276=>632,277=>615,278=>632,279=>615,280=>632,281=>615,282=>632,283=>615,284=>775,285=>635,286=>775,287=>635,288=>775,289=>635,290=>775,291=>635,292=>752,293=>634,294=>916,295=>695,296=>295,297=>278,298=>295,299=>278,300=>295,301=>278,302=>295,303=>278,304=>295,305=>278,306=>590,307=>556,308=>295,309=>278,310=>656,311=>579,312=>579,313=>557,314=>278,315=>557,316=>278,317=>557,318=>375,319=>557,320=>342,321=>562,322=>284,323=>748,324=>634,325=>748,326=>634,327=>748,328=>634,329=>813,330=>748,331=>634,332=>787,333=>612,334=>787,335=>612,336=>787,337=>612,338=>1070,339=>1023,340=>695,341=>411,342=>695,343=>411,344=>695,345=>411,346=>635,347=>521,348=>635,349=>521,350=>635,351=>521,352=>635,353=>521,354=>611,355=>392,356=>611,357=>392,358=>611,359=>392,360=>732,361=>634,362=>732,363=>634,364=>732,365=>634,366=>732,367=>634,368=>732,369=>634,370=>732,371=>634,372=>989,373=>818,374=>611,375=>592,376=>611,377=>685,378=>525,379=>685,380=>525,381=>685,382=>525,383=>352,384=>635,385=>735,386=>686,387=>635,388=>686,389=>635,390=>703,391=>698,392=>550,393=>775,394=>819,395=>686,396=>635,397=>612,398=>632,399=>787,400=>614,401=>575,402=>352,403=>775,404=>687,405=>984,406=>354,407=>295,408=>746,409=>579,410=>278,411=>592,412=>974,413=>748,414=>634,415=>787,416=>913,417=>612,418=>949,419=>759,420=>652,421=>635,422=>695,423=>635,424=>521,425=>632,426=>336,427=>392,428=>611,429=>392,430=>611,431=>858,432=>634,433=>764,434=>721,435=>744,436=>730,437=>685,438=>525,439=>666,440=>666,441=>578,442=>525,443=>636,444=>666,445=>578,446=>510,447=>635,448=>295,449=>492,450=>459,451=>295,452=>1422,453=>1299,454=>1154,455=>835,456=>787,457=>457,458=>931,459=>924,460=>797,461=>684,462=>613,463=>295,464=>278,465=>787,466=>612,467=>732,468=>634,469=>732,470=>634,471=>732,472=>634,473=>732,474=>634,475=>732,476=>634,477=>615,478=>684,479=>613,480=>684,481=>613,482=>974,483=>982,484=>775,485=>635,486=>775,487=>635,488=>656,489=>579,490=>787,491=>612,492=>787,493=>612,494=>666,495=>578,496=>278,497=>1422,498=>1299,499=>1154,500=>775,501=>635,502=>1113,503=>682,504=>748,505=>634,506=>684,507=>613,508=>974,509=>982,510=>787,511=>612,512=>684,513=>613,514=>684,515=>613,516=>632,517=>615,518=>632,519=>615,520=>295,521=>278,522=>295,523=>278,524=>787,525=>612,526=>787,527=>612,528=>695,529=>411,530=>695,531=>411,532=>732,533=>634,534=>732,535=>634,536=>635,537=>521,538=>611,539=>392,540=>627,541=>521,542=>752,543=>634,544=>735,545=>838,546=>698,547=>610,548=>685,549=>525,550=>684,551=>613,552=>632,553=>615,554=>787,555=>612,556=>787,557=>612,558=>787,559=>612,560=>787,561=>612,562=>611,563=>592,564=>475,565=>843,566=>477,567=>278,568=>998,569=>998,570=>684,571=>698,572=>550,573=>557,574=>611,575=>521,576=>525,577=>603,578=>479,579=>686,580=>732,581=>684,582=>632,583=>615,584=>295,585=>278,586=>781,587=>635,588=>695,589=>411,590=>611,591=>592,592=>600,593=>635,594=>635,595=>635,596=>549,597=>550,598=>635,599=>696,600=>615,601=>615,602=>819,603=>541,604=>532,605=>775,606=>664,607=>278,608=>696,609=>635,610=>629,611=>596,612=>596,613=>634,614=>634,615=>634,616=>278,617=>338,618=>372,619=>396,620=>487,621=>278,622=>706,623=>974,624=>974,625=>974,626=>646,627=>642,628=>634,629=>612,630=>858,631=>728,632=>660,633=>414,634=>414,635=>414,636=>411,637=>411,638=>530,639=>530,640=>604,641=>604,642=>521,643=>336,644=>336,645=>461,646=>336,647=>392,648=>392,649=>634,650=>618,651=>598,652=>592,653=>818,654=>592,655=>611,656=>525,657=>525,658=>578,659=>578,660=>510,661=>510,662=>510,663=>510,664=>787,665=>580,666=>664,667=>708,668=>654,669=>292,670=>667,671=>507,672=>727,673=>510,674=>510,675=>1014,676=>1058,677=>1013,678=>824,679=>610,680=>778,681=>848,682=>641,683=>654,684=>515,685=>515,686=>661,687=>664,688=>404,689=>399,690=>175,691=>259,692=>295,693=>296,694=>379,695=>515,696=>373,697=>278,698=>460,699=>318,700=>318,701=>318,702=>307,703=>307,704=>370,705=>370,706=>500,707=>500,708=>500,709=>500,710=>500,711=>500,712=>275,713=>500,714=>500,715=>500,716=>275,717=>500,718=>500,719=>500,720=>337,721=>337,722=>307,723=>307,724=>500,725=>500,726=>390,727=>317,728=>500,729=>500,730=>500,731=>500,732=>500,733=>500,734=>315,735=>500,736=>426,737=>166,738=>373,739=>444,740=>370,741=>493,742=>493,743=>493,744=>493,745=>493,748=>500,749=>500,750=>518,755=>500,759=>500,768=>0,769=>0,770=>0,771=>0,772=>0,773=>0,774=>0,775=>0,776=>0,777=>0,778=>0,779=>0,780=>0,781=>0,782=>0,783=>0,784=>0,785=>0,786=>0,787=>0,788=>0,789=>0,790=>0,791=>0,792=>0,793=>0,794=>0,795=>0,796=>0,797=>0,798=>0,799=>0,800=>0,801=>0,802=>0,803=>0,804=>0,805=>0,806=>0,807=>0,808=>0,809=>0,810=>0,811=>0,812=>0,813=>0,814=>0,815=>0,816=>0,817=>0,818=>0,819=>0,820=>0,821=>0,822=>0,823=>0,824=>0,825=>0,826=>0,827=>0,828=>0,829=>0,830=>0,831=>0,832=>0,833=>0,834=>0,835=>0,836=>0,837=>0,838=>0,839=>0,840=>0,841=>0,842=>0,843=>0,844=>0,845=>0,846=>0,847=>0,849=>0,850=>0,851=>0,855=>0,856=>0,858=>0,860=>0,861=>0,862=>0,863=>0,864=>0,865=>0,866=>0,880=>654,881=>568,882=>862,883=>647,884=>278,885=>278,886=>748,887=>650,890=>500,891=>549,892=>550,893=>549,894=>337,900=>500,901=>500,902=>692,903=>318,904=>746,905=>871,906=>408,908=>813,910=>825,911=>826,912=>338,913=>684,914=>686,915=>557,916=>684,917=>632,918=>685,919=>752,920=>787,921=>295,922=>656,923=>684,924=>863,925=>748,926=>632,927=>787,928=>752,929=>603,931=>632,932=>611,933=>611,934=>787,935=>685,936=>787,937=>764,938=>295,939=>611,940=>659,941=>541,942=>634,943=>338,944=>579,945=>659,946=>638,947=>592,948=>612,949=>541,950=>544,951=>634,952=>612,953=>338,954=>589,955=>592,956=>636,957=>559,958=>558,959=>612,960=>602,961=>635,962=>587,963=>634,964=>602,965=>579,966=>660,967=>578,968=>660,969=>837,970=>338,971=>579,972=>612,973=>579,974=>837,975=>656,976=>614,977=>619,978=>699,979=>842,980=>699,981=>660,982=>837,983=>664,984=>787,985=>612,986=>648,987=>587,988=>575,989=>458,990=>660,991=>660,992=>865,993=>627,994=>934,995=>837,996=>758,997=>659,998=>792,999=>615,1000=>687,1001=>607,1002=>768,1003=>625,1004=>699,1005=>612,1006=>611,1007=>536,1008=>664,1009=>635,1010=>550,1011=>278,1012=>787,1013=>615,1014=>615,1015=>605,1016=>635,1017=>698,1018=>863,1019=>651,1020=>635,1021=>703,1022=>698,1023=>703,1024=>632,1025=>632,1026=>786,1027=>610,1028=>698,1029=>635,1030=>295,1031=>295,1032=>295,1033=>1094,1034=>1045,1035=>786,1036=>710,1037=>748,1038=>609,1039=>752,1040=>684,1041=>686,1042=>686,1043=>610,1044=>781,1045=>632,1046=>1077,1047=>641,1048=>748,1049=>748,1050=>710,1051=>752,1052=>863,1053=>752,1054=>787,1055=>752,1056=>603,1057=>698,1058=>611,1059=>609,1060=>861,1061=>685,1062=>776,1063=>686,1064=>1069,1065=>1094,1066=>833,1067=>882,1068=>686,1069=>698,1070=>1080,1071=>695,1072=>613,1073=>617,1074=>589,1075=>525,1076=>691,1077=>615,1078=>901,1079=>532,1080=>650,1081=>650,1082=>604,1083=>639,1084=>754,1085=>654,1086=>612,1087=>654,1088=>635,1089=>550,1090=>583,1091=>592,1092=>855,1093=>592,1094=>681,1095=>591,1096=>915,1097=>942,1098=>707,1099=>790,1100=>589,1101=>549,1102=>842,1103=>602,1104=>615,1105=>615,1106=>625,1107=>525,1108=>549,1109=>521,1110=>278,1111=>278,1112=>278,1113=>902,1114=>898,1115=>652,1116=>604,1117=>650,1118=>592,1119=>654,1120=>934,1121=>837,1122=>771,1123=>672,1124=>942,1125=>749,1126=>879,1127=>783,1128=>1160,1129=>1001,1130=>787,1131=>612,1132=>1027,1133=>824,1134=>636,1135=>541,1136=>856,1137=>876,1138=>787,1139=>612,1140=>781,1141=>665,1142=>781,1143=>665,1144=>992,1145=>904,1146=>953,1147=>758,1148=>1180,1149=>1028,1150=>934,1151=>837,1152=>698,1153=>550,1154=>502,1155=>0,1156=>0,1157=>0,1158=>0,1159=>0,1160=>418,1161=>418,1162=>772,1163=>677,1164=>686,1165=>589,1166=>603,1167=>635,1168=>610,1169=>525,1170=>675,1171=>590,1172=>624,1173=>530,1174=>1077,1175=>901,1176=>641,1177=>532,1178=>710,1179=>604,1180=>710,1181=>604,1182=>710,1183=>604,1184=>856,1185=>832,1186=>752,1187=>661,1188=>1014,1189=>877,1190=>1081,1191=>916,1192=>878,1193=>693,1194=>698,1195=>550,1196=>611,1197=>583,1198=>611,1199=>592,1200=>611,1201=>592,1202=>685,1203=>592,1204=>934,1205=>807,1206=>686,1207=>591,1208=>686,1209=>591,1210=>686,1211=>634,1212=>941,1213=>728,1214=>941,1215=>728,1216=>295,1217=>1077,1218=>901,1219=>656,1220=>604,1221=>776,1222=>670,1223=>752,1224=>661,1225=>776,1226=>681,1227=>686,1228=>591,1229=>888,1230=>774,1231=>278,1232=>684,1233=>613,1234=>684,1235=>613,1236=>974,1237=>982,1238=>632,1239=>615,1240=>787,1241=>615,1242=>787,1243=>615,1244=>1077,1245=>901,1246=>641,1247=>532,1248=>666,1249=>578,1250=>748,1251=>650,1252=>748,1253=>650,1254=>787,1255=>612,1256=>787,1257=>612,1258=>787,1259=>612,1260=>698,1261=>549,1262=>609,1263=>592,1264=>609,1265=>592,1266=>609,1267=>592,1268=>686,1269=>591,1270=>610,1271=>525,1272=>882,1273=>790,1274=>675,1275=>590,1276=>685,1277=>592,1278=>685,1279=>592,1280=>686,1281=>589,1282=>1006,1283=>897,1284=>975,1285=>869,1286=>679,1287=>588,1288=>1072,1289=>957,1290=>1113,1291=>967,1292=>775,1293=>660,1294=>773,1295=>711,1296=>614,1297=>541,1298=>752,1299=>639,1300=>1169,1301=>994,1302=>894,1303=>864,1304=>1032,1305=>986,1306=>787,1307=>635,1308=>989,1309=>818,1310=>710,1311=>604,1312=>1081,1313=>905,1314=>1081,1315=>912,1316=>793,1317=>683,1329=>766,1330=>732,1331=>753,1332=>753,1333=>732,1334=>772,1335=>640,1336=>732,1337=>859,1338=>753,1339=>691,1340=>533,1341=>922,1342=>863,1343=>732,1344=>716,1345=>766,1346=>753,1347=>767,1348=>792,1349=>728,1350=>729,1351=>757,1352=>732,1353=>713,1354=>800,1355=>768,1356=>792,1357=>732,1358=>753,1359=>705,1360=>694,1361=>744,1362=>538,1363=>811,1364=>757,1365=>787,1366=>790,1369=>307,1370=>318,1371=>234,1372=>361,1373=>238,1374=>405,1375=>500,1377=>974,1378=>634,1379=>658,1380=>663,1381=>634,1382=>635,1383=>515,1384=>634,1385=>738,1386=>658,1387=>634,1388=>271,1389=>980,1390=>623,1391=>634,1392=>634,1393=>608,1394=>634,1395=>629,1396=>634,1397=>271,1398=>634,1399=>499,1400=>634,1401=>404,1402=>974,1403=>560,1404=>648,1405=>634,1406=>634,1407=>974,1408=>634,1409=>633,1410=>435,1411=>974,1412=>636,1413=>609,1414=>805,1415=>812,1417=>337,1418=>361,1456=>0,1457=>0,1458=>0,1459=>0,1460=>0,1461=>0,1462=>0,1463=>0,1464=>0,1465=>0,1466=>0,1467=>0,1468=>0,1469=>0,1470=>361,1471=>0,1472=>295,1473=>0,1474=>0,1475=>295,1478=>441,1479=>0,1488=>668,1489=>578,1490=>412,1491=>546,1492=>653,1493=>272,1494=>346,1495=>653,1496=>648,1497=>224,1498=>537,1499=>529,1500=>568,1501=>664,1502=>679,1503=>272,1504=>400,1505=>649,1506=>626,1507=>640,1508=>625,1509=>540,1510=>593,1511=>709,1512=>564,1513=>708,1514=>657,1520=>471,1521=>423,1522=>331,1523=>416,1524=>645,1542=>637,1543=>637,1545=>757,1546=>977,1548=>323,1557=>0,1563=>318,1567=>531,1569=>470,1570=>278,1571=>278,1572=>483,1573=>278,1574=>783,1575=>278,1576=>941,1577=>524,1578=>941,1579=>941,1580=>646,1581=>646,1582=>646,1583=>445,1584=>445,1585=>483,1586=>483,1587=>1221,1588=>1221,1589=>1209,1590=>1209,1591=>925,1592=>925,1593=>597,1594=>597,1600=>293,1601=>1037,1602=>776,1603=>824,1604=>727,1605=>619,1606=>734,1607=>524,1608=>483,1609=>783,1610=>783,1611=>0,1612=>0,1613=>0,1614=>0,1615=>0,1616=>0,1617=>0,1618=>0,1619=>0,1620=>0,1621=>0,1623=>0,1626=>500,1632=>537,1633=>537,1634=>537,1635=>537,1636=>537,1637=>537,1638=>537,1639=>537,1640=>537,1641=>537,1642=>537,1643=>325,1644=>318,1645=>545,1646=>941,1647=>776,1648=>0,1652=>292,1657=>941,1658=>941,1659=>941,1660=>941,1661=>941,1662=>941,1663=>941,1664=>941,1665=>646,1666=>646,1667=>646,1668=>646,1669=>646,1670=>646,1671=>646,1672=>445,1673=>445,1674=>445,1675=>445,1676=>445,1677=>445,1678=>445,1679=>445,1680=>445,1681=>483,1682=>483,1683=>498,1684=>530,1685=>610,1686=>530,1687=>483,1688=>483,1689=>483,1690=>1221,1691=>1221,1692=>1221,1693=>1209,1694=>1209,1695=>925,1696=>597,1697=>1037,1698=>1037,1699=>1037,1700=>1037,1701=>1037,1702=>1037,1703=>776,1704=>776,1705=>895,1706=>1054,1707=>895,1708=>824,1709=>824,1710=>824,1711=>895,1712=>895,1713=>895,1714=>895,1715=>895,1716=>895,1717=>727,1718=>727,1719=>727,1720=>727,1721=>734,1722=>734,1723=>734,1724=>734,1725=>734,1726=>698,1727=>646,1734=>483,1740=>783,1742=>783,1749=>524,1776=>537,1777=>537,1778=>537,1779=>537,1780=>537,1781=>537,1782=>537,1783=>537,1784=>537,1785=>537,1984=>636,1985=>636,1986=>636,1987=>636,1988=>636,1989=>636,1990=>636,1991=>636,1992=>636,1993=>636,1994=>278,1995=>571,1996=>424,1997=>592,1998=>654,1999=>654,2000=>594,2001=>654,2002=>829,2003=>438,2004=>438,2005=>559,2006=>612,2007=>350,2008=>959,2009=>473,2010=>783,2011=>654,2012=>625,2013=>734,2014=>530,2015=>724,2016=>473,2017=>625,2018=>594,2019=>530,2020=>530,2021=>522,2022=>594,2023=>594,2027=>0,2028=>0,2029=>0,2030=>0,2031=>0,2032=>0,2033=>0,2034=>0,2035=>0,2036=>313,2037=>313,2040=>560,2041=>560,2042=>361,3647=>636,3713=>670,3714=>684,3716=>688,3719=>482,3720=>628,3722=>684,3725=>688,3732=>669,3733=>642,3734=>645,3735=>655,3737=>659,3738=>625,3739=>625,3740=>745,3741=>767,3742=>687,3743=>687,3745=>702,3746=>688,3747=>684,3749=>649,3751=>632,3754=>703,3755=>819,3757=>633,3758=>684,3759=>788,3760=>632,3761=>0,3762=>539,3763=>539,3764=>0,3765=>0,3766=>0,3767=>0,3768=>0,3769=>0,3771=>0,3772=>0,3773=>663,3776=>375,3777=>657,3778=>460,3779=>547,3780=>491,3782=>674,3784=>0,3785=>0,3786=>0,3787=>0,3788=>0,3789=>0,3792=>636,3793=>641,3794=>641,3795=>670,3796=>625,3797=>625,3798=>703,3799=>670,3800=>674,3801=>677,3804=>1028,3805=>1028,4256=>840,4257=>690,4258=>642,4259=>759,4260=>591,4261=>686,4262=>789,4263=>811,4264=>467,4265=>565,4266=>789,4267=>793,4268=>584,4269=>837,4270=>750,4271=>688,4272=>811,4273=>584,4274=>584,4275=>837,4276=>837,4277=>646,4278=>604,4279=>584,4280=>596,4281=>584,4282=>721,4283=>795,4284=>584,4285=>566,4286=>584,4287=>669,4288=>799,4289=>542,4290=>664,4291=>542,4292=>565,4293=>674,4304=>508,4305=>508,4306=>533,4307=>785,4308=>522,4309=>517,4310=>508,4311=>797,4312=>507,4313=>518,4314=>1058,4315=>522,4316=>523,4317=>783,4318=>518,4319=>523,4320=>792,4321=>523,4322=>656,4323=>524,4324=>788,4325=>523,4326=>782,4327=>523,4328=>522,4329=>522,4330=>566,4331=>523,4332=>523,4333=>489,4334=>522,4335=>498,4336=>517,4337=>560,4338=>508,4339=>508,4340=>508,4341=>563,4342=>824,4343=>595,4344=>522,4345=>554,4346=>553,4347=>586,4348=>304,5121=>684,5122=>684,5123=>684,5124=>684,5125=>769,5126=>769,5127=>769,5129=>769,5130=>769,5131=>769,5132=>835,5133=>834,5134=>835,5135=>834,5136=>835,5137=>834,5138=>967,5139=>1007,5140=>967,5141=>1007,5142=>769,5143=>967,5144=>1007,5145=>967,5146=>1007,5147=>769,5149=>256,5150=>543,5151=>423,5152=>423,5153=>389,5154=>389,5155=>393,5156=>389,5157=>466,5158=>385,5159=>256,5160=>389,5161=>389,5162=>389,5163=>1090,5164=>909,5165=>953,5166=>1117,5167=>684,5168=>684,5169=>684,5170=>684,5171=>729,5172=>729,5173=>729,5175=>729,5176=>729,5177=>729,5178=>835,5179=>684,5180=>835,5181=>834,5182=>835,5183=>834,5184=>967,5185=>1007,5186=>967,5187=>1007,5188=>967,5189=>1007,5190=>967,5191=>1007,5192=>729,5193=>508,5194=>192,5196=>732,5197=>732,5198=>732,5199=>732,5200=>730,5201=>730,5202=>730,5204=>730,5205=>730,5206=>730,5207=>921,5208=>889,5209=>921,5210=>889,5211=>921,5212=>889,5213=>928,5214=>900,5215=>928,5216=>900,5217=>947,5218=>900,5219=>947,5220=>900,5221=>947,5222=>434,5223=>877,5224=>877,5225=>866,5226=>890,5227=>628,5228=>628,5229=>628,5230=>628,5231=>628,5232=>628,5233=>628,5234=>628,5235=>628,5236=>860,5237=>771,5238=>815,5239=>816,5240=>815,5241=>816,5242=>860,5243=>771,5244=>860,5245=>771,5246=>815,5247=>816,5248=>815,5249=>816,5250=>815,5251=>407,5252=>407,5253=>750,5254=>775,5255=>750,5256=>775,5257=>628,5258=>628,5259=>628,5260=>628,5261=>628,5262=>628,5263=>628,5264=>628,5265=>628,5266=>860,5267=>771,5268=>815,5269=>816,5270=>815,5271=>816,5272=>860,5273=>771,5274=>860,5275=>771,5276=>815,5277=>816,5278=>815,5279=>816,5280=>815,5281=>435,5282=>435,5283=>610,5284=>557,5285=>557,5286=>557,5287=>610,5288=>610,5289=>610,5290=>557,5291=>557,5292=>749,5293=>769,5294=>746,5295=>764,5296=>746,5297=>764,5298=>749,5299=>769,5300=>749,5301=>769,5302=>746,5303=>764,5304=>746,5305=>764,5306=>746,5307=>386,5308=>508,5309=>386,5312=>852,5313=>852,5314=>852,5315=>852,5316=>852,5317=>852,5318=>852,5319=>852,5320=>852,5321=>1069,5322=>1035,5323=>1059,5324=>852,5325=>1059,5326=>852,5327=>852,5328=>600,5329=>453,5330=>600,5331=>852,5332=>852,5333=>852,5334=>852,5335=>852,5336=>852,5337=>852,5338=>852,5339=>852,5340=>1069,5341=>1035,5342=>1059,5343=>1030,5344=>1059,5345=>1030,5346=>1069,5347=>1035,5348=>1069,5349=>1035,5350=>1083,5351=>1030,5352=>1083,5353=>1030,5354=>600,5356=>729,5357=>603,5358=>603,5359=>603,5360=>603,5361=>603,5362=>603,5363=>603,5364=>603,5365=>603,5366=>834,5367=>754,5368=>792,5369=>771,5370=>792,5371=>771,5372=>834,5373=>754,5374=>834,5375=>754,5376=>792,5377=>771,5378=>792,5379=>771,5380=>792,5381=>418,5382=>420,5383=>418,5392=>712,5393=>712,5394=>712,5395=>892,5396=>892,5397=>892,5398=>892,5399=>910,5400=>872,5401=>910,5402=>872,5403=>910,5404=>872,5405=>1140,5406=>1100,5407=>1140,5408=>1100,5409=>1140,5410=>1100,5411=>1140,5412=>1100,5413=>641,5414=>627,5415=>627,5416=>627,5417=>627,5418=>627,5419=>627,5420=>627,5421=>627,5422=>627,5423=>844,5424=>781,5425=>816,5426=>818,5427=>816,5428=>818,5429=>844,5430=>781,5431=>844,5432=>781,5433=>816,5434=>818,5435=>816,5436=>818,5437=>816,5438=>418,5440=>389,5441=>484,5442=>916,5443=>916,5444=>916,5445=>916,5446=>916,5447=>916,5448=>603,5449=>603,5450=>603,5451=>603,5452=>603,5453=>603,5454=>834,5455=>754,5456=>418,5458=>729,5459=>684,5460=>684,5461=>684,5462=>684,5463=>726,5464=>726,5465=>726,5466=>726,5467=>924,5468=>1007,5469=>508,5470=>732,5471=>732,5472=>732,5473=>732,5474=>732,5475=>732,5476=>730,5477=>730,5478=>730,5479=>730,5480=>947,5481=>900,5482=>508,5492=>831,5493=>831,5494=>831,5495=>831,5496=>831,5497=>831,5498=>831,5499=>563,5500=>752,5501=>484,5502=>1047,5503=>1047,5504=>1047,5505=>1047,5506=>1047,5507=>1047,5508=>1047,5509=>825,5514=>831,5515=>831,5516=>831,5517=>831,5518=>1259,5519=>1259,5520=>1259,5521=>1002,5522=>1002,5523=>1259,5524=>1259,5525=>700,5526=>1073,5536=>852,5537=>852,5538=>852,5539=>852,5540=>852,5541=>852,5542=>600,5543=>643,5544=>643,5545=>643,5546=>643,5547=>643,5548=>643,5549=>643,5550=>418,5551=>628,5598=>770,5601=>767,5702=>468,5703=>468,5742=>444,5743=>1047,5744=>1310,5745=>1632,5746=>1632,5747=>1375,5748=>1375,5749=>1632,5750=>1632,5760=>477,5761=>493,5762=>712,5763=>931,5764=>1150,5765=>1370,5766=>493,5767=>712,5768=>931,5769=>1150,5770=>1370,5771=>498,5772=>718,5773=>938,5774=>1159,5775=>1379,5776=>493,5777=>712,5778=>930,5779=>1149,5780=>1370,5781=>498,5782=>752,5783=>789,5784=>1205,5785=>1150,5786=>683,5787=>507,5788=>507,7424=>592,7425=>717,7426=>982,7427=>586,7428=>550,7429=>605,7430=>605,7431=>491,7432=>541,7433=>278,7434=>395,7435=>579,7436=>583,7437=>754,7438=>650,7439=>612,7440=>550,7441=>684,7442=>684,7443=>684,7444=>1023,7446=>612,7447=>612,7448=>524,7449=>602,7450=>602,7451=>583,7452=>574,7453=>737,7454=>948,7455=>638,7456=>592,7457=>818,7458=>525,7459=>526,7462=>583,7463=>592,7464=>564,7465=>524,7466=>590,7467=>639,7468=>431,7469=>613,7470=>432,7472=>485,7473=>398,7474=>398,7475=>488,7476=>474,7477=>186,7478=>186,7479=>413,7480=>351,7481=>543,7482=>471,7483=>471,7484=>496,7485=>439,7486=>380,7487=>438,7488=>385,7489=>461,7490=>623,7491=>392,7492=>392,7493=>405,7494=>648,7495=>428,7496=>405,7497=>417,7498=>417,7499=>360,7500=>359,7501=>405,7502=>179,7503=>426,7504=>623,7505=>409,7506=>414,7507=>370,7508=>414,7509=>414,7510=>428,7511=>295,7512=>405,7513=>470,7514=>623,7515=>417,7517=>402,7518=>373,7519=>385,7520=>416,7521=>364,7522=>179,7523=>259,7524=>405,7525=>417,7526=>402,7527=>373,7528=>412,7529=>416,7530=>364,7543=>635,7544=>474,7547=>372,7549=>667,7557=>278,7579=>405,7580=>370,7581=>370,7582=>414,7583=>360,7584=>296,7585=>233,7586=>405,7587=>405,7588=>261,7589=>250,7590=>261,7591=>261,7592=>234,7593=>250,7594=>235,7595=>376,7596=>623,7597=>623,7598=>411,7599=>479,7600=>409,7601=>414,7602=>414,7603=>360,7604=>287,7605=>295,7606=>508,7607=>418,7608=>361,7609=>406,7610=>417,7611=>366,7612=>437,7613=>366,7614=>392,7615=>414,7620=>0,7621=>0,7622=>0,7623=>0,7624=>0,7625=>0,7680=>684,7681=>613,7682=>686,7683=>635,7684=>686,7685=>635,7686=>686,7687=>635,7688=>698,7689=>550,7690=>770,7691=>635,7692=>770,7693=>635,7694=>770,7695=>635,7696=>770,7697=>635,7698=>770,7699=>635,7700=>632,7701=>615,7702=>632,7703=>615,7704=>632,7705=>615,7706=>632,7707=>615,7708=>632,7709=>615,7710=>575,7711=>352,7712=>775,7713=>635,7714=>752,7715=>634,7716=>752,7717=>634,7718=>752,7719=>634,7720=>752,7721=>634,7722=>752,7723=>634,7724=>295,7725=>278,7726=>295,7727=>278,7728=>656,7729=>579,7730=>656,7731=>579,7732=>656,7733=>579,7734=>557,7735=>288,7736=>557,7737=>288,7738=>557,7739=>278,7740=>557,7741=>278,7742=>863,7743=>974,7744=>863,7745=>974,7746=>863,7747=>974,7748=>748,7749=>634,7750=>748,7751=>634,7752=>748,7753=>634,7754=>748,7755=>634,7756=>787,7757=>612,7758=>787,7759=>612,7760=>787,7761=>612,7762=>787,7763=>612,7764=>603,7765=>635,7766=>603,7767=>635,7768=>695,7769=>411,7770=>695,7771=>411,7772=>695,7773=>411,7774=>695,7775=>411,7776=>635,7777=>521,7778=>635,7779=>521,7780=>635,7781=>521,7782=>635,7783=>521,7784=>635,7785=>521,7786=>611,7787=>392,7788=>611,7789=>392,7790=>611,7791=>392,7792=>611,7793=>392,7794=>732,7795=>634,7796=>732,7797=>634,7798=>732,7799=>634,7800=>732,7801=>634,7802=>732,7803=>634,7804=>684,7805=>592,7806=>684,7807=>592,7808=>989,7809=>818,7810=>989,7811=>818,7812=>989,7813=>818,7814=>989,7815=>818,7816=>989,7817=>818,7818=>685,7819=>592,7820=>685,7821=>592,7822=>611,7823=>592,7824=>685,7825=>525,7826=>685,7827=>525,7828=>685,7829=>525,7830=>634,7831=>392,7832=>818,7833=>592,7834=>613,7835=>352,7836=>352,7837=>352,7838=>769,7839=>612,7840=>684,7841=>613,7842=>684,7843=>613,7844=>684,7845=>613,7846=>684,7847=>613,7848=>684,7849=>613,7850=>684,7851=>613,7852=>684,7853=>613,7854=>684,7855=>613,7856=>684,7857=>613,7858=>684,7859=>613,7860=>684,7861=>613,7862=>684,7863=>613,7864=>632,7865=>615,7866=>632,7867=>615,7868=>632,7869=>615,7870=>632,7871=>615,7872=>632,7873=>615,7874=>632,7875=>615,7876=>632,7877=>615,7878=>632,7879=>615,7880=>295,7881=>278,7882=>295,7883=>278,7884=>787,7885=>612,7886=>787,7887=>612,7888=>787,7889=>612,7890=>787,7891=>612,7892=>787,7893=>612,7894=>787,7895=>612,7896=>787,7897=>612,7898=>913,7899=>612,7900=>913,7901=>612,7902=>913,7903=>612,7904=>913,7905=>612,7906=>913,7907=>612,7908=>732,7909=>634,7910=>732,7911=>634,7912=>858,7913=>634,7914=>858,7915=>634,7916=>858,7917=>634,7918=>858,7919=>634,7920=>858,7921=>634,7922=>611,7923=>592,7924=>611,7925=>592,7926=>611,7927=>592,7928=>611,7929=>592,7930=>769,7931=>477,7936=>659,7937=>659,7938=>659,7939=>659,7940=>659,7941=>659,7942=>659,7943=>659,7944=>684,7945=>684,7946=>877,7947=>877,7948=>769,7949=>801,7950=>708,7951=>743,7952=>541,7953=>541,7954=>541,7955=>541,7956=>541,7957=>541,7960=>711,7961=>711,7962=>966,7963=>975,7964=>898,7965=>928,7968=>634,7969=>634,7970=>634,7971=>634,7972=>634,7973=>634,7974=>634,7975=>634,7976=>837,7977=>835,7978=>1086,7979=>1089,7980=>1027,7981=>1051,7982=>934,7983=>947,7984=>338,7985=>338,7986=>338,7987=>338,7988=>338,7989=>338,7990=>338,7991=>338,7992=>380,7993=>374,7994=>635,7995=>635,7996=>570,7997=>600,7998=>489,7999=>493,8000=>612,8001=>612,8002=>612,8003=>612,8004=>612,8005=>612,8008=>804,8009=>848,8010=>1095,8011=>1100,8012=>938,8013=>970,8016=>579,8017=>579,8018=>579,8019=>579,8020=>579,8021=>579,8022=>579,8023=>579,8025=>784,8027=>998,8029=>1012,8031=>897,8032=>837,8033=>837,8034=>837,8035=>837,8036=>837,8037=>837,8038=>837,8039=>837,8040=>802,8041=>843,8042=>1089,8043=>1095,8044=>946,8045=>972,8046=>921,8047=>952,8048=>659,8049=>659,8050=>541,8051=>548,8052=>634,8053=>654,8054=>338,8055=>338,8056=>612,8057=>612,8058=>579,8059=>579,8060=>837,8061=>837,8064=>659,8065=>659,8066=>659,8067=>659,8068=>659,8069=>659,8070=>659,8071=>659,8072=>684,8073=>684,8074=>877,8075=>877,8076=>769,8077=>801,8078=>708,8079=>743,8080=>634,8081=>634,8082=>634,8083=>634,8084=>634,8085=>634,8086=>634,8087=>634,8088=>837,8089=>835,8090=>1086,8091=>1089,8092=>1027,8093=>1051,8094=>934,8095=>947,8096=>837,8097=>837,8098=>837,8099=>837,8100=>837,8101=>837,8102=>837,8103=>837,8104=>802,8105=>843,8106=>1089,8107=>1095,8108=>946,8109=>972,8110=>921,8111=>952,8112=>659,8113=>659,8114=>659,8115=>659,8116=>659,8118=>659,8119=>659,8120=>684,8121=>684,8122=>716,8123=>692,8124=>684,8125=>500,8126=>500,8127=>500,8128=>500,8129=>500,8130=>634,8131=>634,8132=>654,8134=>634,8135=>634,8136=>805,8137=>746,8138=>931,8139=>871,8140=>752,8141=>500,8142=>500,8143=>500,8144=>338,8145=>338,8146=>338,8147=>338,8150=>338,8151=>338,8152=>295,8153=>295,8154=>475,8155=>408,8157=>500,8158=>500,8159=>500,8160=>579,8161=>579,8162=>579,8163=>579,8164=>635,8165=>635,8166=>579,8167=>579,8168=>611,8169=>611,8170=>845,8171=>825,8172=>685,8173=>500,8174=>500,8175=>500,8178=>837,8179=>837,8180=>837,8182=>837,8183=>837,8184=>941,8185=>813,8186=>922,8187=>826,8188=>764,8189=>500,8190=>500,8192=>500,8193=>1000,8194=>500,8195=>1000,8196=>330,8197=>250,8198=>167,8199=>636,8200=>318,8201=>200,8202=>100,8203=>0,8204=>0,8205=>0,8206=>0,8207=>0,8208=>361,8209=>361,8210=>636,8211=>500,8212=>1000,8213=>1000,8214=>500,8215=>500,8216=>318,8217=>318,8218=>318,8219=>318,8220=>518,8221=>518,8222=>518,8223=>518,8224=>500,8225=>500,8226=>590,8227=>590,8228=>334,8229=>667,8230=>1000,8231=>318,8232=>0,8233=>0,8234=>0,8235=>0,8236=>0,8237=>0,8238=>0,8239=>200,8240=>1342,8241=>1735,8242=>227,8243=>374,8244=>520,8245=>227,8246=>374,8247=>520,8248=>339,8249=>400,8250=>400,8251=>838,8252=>485,8253=>531,8254=>500,8255=>804,8256=>804,8257=>250,8258=>1000,8259=>500,8260=>167,8261=>390,8262=>390,8263=>922,8264=>733,8265=>733,8266=>497,8267=>636,8268=>500,8269=>500,8270=>500,8271=>337,8272=>804,8273=>500,8274=>450,8275=>1000,8276=>804,8277=>838,8278=>586,8279=>663,8280=>838,8281=>838,8282=>318,8283=>797,8284=>838,8285=>318,8286=>318,8287=>222,8288=>0,8289=>0,8290=>0,8291=>0,8292=>0,8298=>0,8299=>0,8300=>0,8301=>0,8302=>0,8303=>0,8304=>401,8305=>179,8308=>401,8309=>401,8310=>401,8311=>401,8312=>401,8313=>401,8314=>528,8315=>528,8316=>528,8317=>246,8318=>246,8319=>398,8320=>401,8321=>401,8322=>401,8323=>401,8324=>401,8325=>401,8326=>401,8327=>401,8328=>401,8329=>401,8330=>528,8331=>528,8332=>528,8333=>246,8334=>246,8336=>392,8337=>417,8338=>414,8339=>444,8340=>417,8341=>404,8342=>426,8343=>166,8344=>623,8345=>398,8346=>428,8347=>373,8348=>295,8352=>877,8353=>636,8354=>636,8355=>636,8356=>636,8357=>974,8358=>748,8359=>1272,8360=>1074,8361=>989,8362=>784,8363=>636,8364=>636,8365=>636,8366=>636,8367=>1272,8368=>636,8369=>636,8370=>636,8371=>636,8372=>774,8373=>636,8376=>636,8377=>636,8400=>0,8401=>0,8406=>0,8407=>0,8411=>0,8412=>0,8417=>0,8448=>1019,8449=>1019,8450=>698,8451=>1123,8452=>642,8453=>1019,8454=>1067,8455=>614,8456=>698,8457=>952,8459=>988,8460=>754,8461=>850,8462=>634,8463=>634,8464=>470,8465=>697,8466=>720,8467=>413,8468=>818,8469=>801,8470=>1040,8471=>1000,8472=>697,8473=>701,8474=>787,8475=>798,8476=>814,8477=>792,8478=>896,8479=>684,8480=>1020,8481=>1074,8482=>1000,8483=>684,8484=>745,8485=>578,8486=>764,8487=>764,8488=>616,8489=>338,8490=>656,8491=>684,8492=>786,8493=>703,8494=>854,8495=>592,8496=>605,8497=>786,8498=>575,8499=>1069,8500=>462,8501=>745,8502=>674,8503=>466,8504=>645,8505=>380,8506=>926,8507=>1194,8508=>702,8509=>728,8510=>654,8511=>849,8512=>811,8513=>775,8514=>557,8515=>557,8516=>611,8517=>819,8518=>708,8519=>615,8520=>351,8521=>351,8523=>780,8526=>526,8528=>969,8529=>969,8530=>1370,8531=>969,8532=>969,8533=>969,8534=>969,8535=>969,8536=>969,8537=>969,8538=>969,8539=>969,8540=>969,8541=>969,8542=>969,8543=>568,8544=>295,8545=>492,8546=>689,8547=>923,8548=>684,8549=>922,8550=>1120,8551=>1317,8552=>917,8553=>685,8554=>933,8555=>1131,8556=>557,8557=>698,8558=>770,8559=>863,8560=>278,8561=>458,8562=>637,8563=>812,8564=>592,8565=>811,8566=>991,8567=>1170,8568=>819,8569=>592,8570=>822,8571=>1002,8572=>278,8573=>550,8574=>635,8575=>974,8576=>1245,8577=>770,8578=>1245,8579=>703,8580=>549,8581=>698,8585=>969,8592=>838,8593=>838,8594=>838,8595=>838,8596=>838,8597=>838,8598=>838,8599=>838,8600=>838,8601=>838,8602=>838,8603=>838,8604=>838,8605=>838,8606=>838,8607=>838,8608=>838,8609=>838,8610=>838,8611=>838,8612=>838,8613=>838,8614=>838,8615=>838,8616=>838,8617=>838,8618=>838,8619=>838,8620=>838,8621=>838,8622=>838,8623=>838,8624=>838,8625=>838,8626=>838,8627=>838,8628=>838,8629=>838,8630=>838,8631=>838,8632=>838,8633=>838,8634=>838,8635=>838,8636=>838,8637=>838,8638=>838,8639=>838,8640=>838,8641=>838,8642=>838,8643=>838,8644=>838,8645=>838,8646=>838,8647=>838,8648=>838,8649=>838,8650=>838,8651=>838,8652=>838,8653=>838,8654=>838,8655=>838,8656=>838,8657=>838,8658=>838,8659=>838,8660=>838,8661=>838,8662=>838,8663=>838,8664=>838,8665=>838,8666=>838,8667=>838,8668=>838,8669=>838,8670=>838,8671=>838,8672=>838,8673=>838,8674=>838,8675=>838,8676=>838,8677=>838,8678=>838,8679=>838,8680=>838,8681=>838,8682=>838,8683=>838,8684=>838,8685=>838,8686=>838,8687=>838,8688=>838,8689=>838,8690=>838,8691=>838,8692=>838,8693=>838,8694=>838,8695=>838,8696=>838,8697=>838,8698=>838,8699=>838,8700=>838,8701=>838,8702=>838,8703=>838,8704=>684,8705=>636,8706=>517,8707=>632,8708=>632,8709=>871,8710=>669,8711=>669,8712=>871,8713=>871,8714=>718,8715=>871,8716=>871,8717=>718,8718=>636,8719=>757,8720=>757,8721=>674,8722=>838,8723=>838,8724=>838,8725=>337,8726=>637,8727=>838,8728=>626,8729=>626,8730=>637,8731=>637,8732=>637,8733=>714,8734=>833,8735=>838,8736=>896,8737=>896,8738=>838,8739=>500,8740=>500,8741=>500,8742=>500,8743=>732,8744=>732,8745=>732,8746=>732,8747=>521,8748=>789,8749=>1057,8750=>521,8751=>789,8752=>1057,8753=>521,8754=>521,8755=>521,8756=>636,8757=>636,8758=>260,8759=>636,8760=>838,8761=>838,8762=>838,8763=>838,8764=>838,8765=>838,8766=>838,8767=>838,8768=>375,8769=>838,8770=>838,8771=>838,8772=>838,8773=>838,8774=>838,8775=>838,8776=>838,8777=>838,8778=>838,8779=>838,8780=>838,8781=>838,8782=>838,8783=>838,8784=>838,8785=>838,8786=>839,8787=>839,8788=>1000,8789=>1000,8790=>838,8791=>838,8792=>838,8793=>838,8794=>838,8795=>838,8796=>838,8797=>838,8798=>838,8799=>838,8800=>838,8801=>838,8802=>838,8803=>838,8804=>838,8805=>838,8806=>838,8807=>838,8808=>838,8809=>838,8810=>1047,8811=>1047,8812=>464,8813=>838,8814=>838,8815=>838,8816=>838,8817=>838,8818=>838,8819=>838,8820=>838,8821=>838,8822=>838,8823=>838,8824=>838,8825=>838,8826=>838,8827=>838,8828=>838,8829=>838,8830=>838,8831=>838,8832=>838,8833=>838,8834=>838,8835=>838,8836=>838,8837=>838,8838=>838,8839=>838,8840=>838,8841=>838,8842=>838,8843=>838,8844=>732,8845=>732,8846=>732,8847=>838,8848=>838,8849=>838,8850=>838,8851=>780,8852=>780,8853=>838,8854=>838,8855=>838,8856=>838,8857=>838,8858=>838,8859=>838,8860=>838,8861=>838,8862=>838,8863=>838,8864=>838,8865=>838,8866=>871,8867=>871,8868=>871,8869=>871,8870=>521,8871=>521,8872=>871,8873=>871,8874=>871,8875=>871,8876=>871,8877=>871,8878=>871,8879=>871,8880=>838,8881=>838,8882=>838,8883=>838,8884=>838,8885=>838,8886=>1000,8887=>1000,8888=>838,8889=>838,8890=>521,8891=>732,8892=>732,8893=>732,8894=>838,8895=>838,8896=>820,8897=>820,8898=>820,8899=>820,8900=>494,8901=>318,8902=>626,8903=>838,8904=>1000,8905=>1000,8906=>1000,8907=>1000,8908=>1000,8909=>838,8910=>732,8911=>732,8912=>838,8913=>838,8914=>838,8915=>838,8916=>838,8917=>838,8918=>838,8919=>838,8920=>1422,8921=>1422,8922=>838,8923=>838,8924=>838,8925=>838,8926=>838,8927=>838,8928=>838,8929=>838,8930=>838,8931=>838,8932=>838,8933=>838,8934=>838,8935=>838,8936=>838,8937=>838,8938=>838,8939=>838,8940=>838,8941=>838,8942=>1000,8943=>1000,8944=>1000,8945=>1000,8946=>1000,8947=>871,8948=>718,8949=>871,8950=>871,8951=>718,8952=>871,8953=>871,8954=>1000,8955=>871,8956=>718,8957=>871,8958=>718,8959=>871,8960=>602,8961=>602,8962=>635,8963=>838,8964=>838,8965=>838,8966=>838,8967=>488,8968=>390,8969=>390,8970=>390,8971=>390,8972=>809,8973=>809,8974=>809,8975=>809,8976=>838,8977=>513,8984=>1000,8985=>838,8988=>469,8989=>469,8990=>469,8991=>469,8992=>521,8993=>521,8996=>1152,8997=>1152,8998=>1414,8999=>1152,9000=>1443,9003=>1414,9004=>873,9075=>338,9076=>635,9077=>837,9082=>659,9085=>757,9095=>1152,9108=>873,9115=>500,9116=>500,9117=>500,9118=>500,9119=>500,9120=>500,9121=>500,9122=>500,9123=>500,9124=>500,9125=>500,9126=>500,9127=>750,9128=>750,9129=>750,9130=>750,9131=>750,9132=>750,9133=>750,9134=>521,9166=>838,9167=>945,9187=>873,9189=>769,9192=>636,9250=>635,9251=>635,9312=>896,9313=>896,9314=>896,9315=>896,9316=>896,9317=>896,9318=>896,9319=>896,9320=>896,9321=>896,9472=>602,9473=>602,9474=>602,9475=>602,9476=>602,9477=>602,9478=>602,9479=>602,9480=>602,9481=>602,9482=>602,9483=>602,9484=>602,9485=>602,9486=>602,9487=>602,9488=>602,9489=>602,9490=>602,9491=>602,9492=>602,9493=>602,9494=>602,9495=>602,9496=>602,9497=>602,9498=>602,9499=>602,9500=>602,9501=>602,9502=>602,9503=>602,9504=>602,9505=>602,9506=>602,9507=>602,9508=>602,9509=>602,9510=>602,9511=>602,9512=>602,9513=>602,9514=>602,9515=>602,9516=>602,9517=>602,9518=>602,9519=>602,9520=>602,9521=>602,9522=>602,9523=>602,9524=>602,9525=>602,9526=>602,9527=>602,9528=>602,9529=>602,9530=>602,9531=>602,9532=>602,9533=>602,9534=>602,9535=>602,9536=>602,9537=>602,9538=>602,9539=>602,9540=>602,9541=>602,9542=>602,9543=>602,9544=>602,9545=>602,9546=>602,9547=>602,9548=>602,9549=>602,9550=>602,9551=>602,9552=>602,9553=>602,9554=>602,9555=>602,9556=>602,9557=>602,9558=>602,9559=>602,9560=>602,9561=>602,9562=>602,9563=>602,9564=>602,9565=>602,9566=>602,9567=>602,9568=>602,9569=>602,9570=>602,9571=>602,9572=>602,9573=>602,9574=>602,9575=>602,9576=>602,9577=>602,9578=>602,9579=>602,9580=>602,9581=>602,9582=>602,9583=>602,9584=>602,9585=>602,9586=>602,9587=>602,9588=>602,9589=>602,9590=>602,9591=>602,9592=>602,9593=>602,9594=>602,9595=>602,9596=>602,9597=>602,9598=>602,9599=>602,9600=>769,9601=>769,9602=>769,9603=>769,9604=>769,9605=>769,9606=>769,9607=>769,9608=>769,9609=>769,9610=>769,9611=>769,9612=>769,9613=>769,9614=>769,9615=>769,9616=>769,9617=>769,9618=>769,9619=>769,9620=>769,9621=>769,9622=>769,9623=>769,9624=>769,9625=>769,9626=>769,9627=>769,9628=>769,9629=>769,9630=>769,9631=>769,9632=>945,9633=>945,9634=>945,9635=>945,9636=>945,9637=>945,9638=>945,9639=>945,9640=>945,9641=>945,9642=>678,9643=>678,9644=>945,9645=>945,9646=>550,9647=>550,9648=>769,9649=>769,9650=>769,9651=>769,9652=>502,9653=>502,9654=>769,9655=>769,9656=>502,9657=>502,9658=>769,9659=>769,9660=>769,9661=>769,9662=>502,9663=>502,9664=>769,9665=>769,9666=>502,9667=>502,9668=>769,9669=>769,9670=>769,9671=>769,9672=>769,9673=>873,9674=>494,9675=>873,9676=>873,9677=>873,9678=>873,9679=>873,9680=>873,9681=>873,9682=>873,9683=>873,9684=>873,9685=>873,9686=>527,9687=>527,9688=>791,9689=>970,9690=>970,9691=>970,9692=>387,9693=>387,9694=>387,9695=>387,9696=>873,9697=>873,9698=>769,9699=>769,9700=>769,9701=>769,9702=>590,9703=>945,9704=>945,9705=>945,9706=>945,9707=>945,9708=>769,9709=>769,9710=>769,9711=>1119,9712=>945,9713=>945,9714=>945,9715=>945,9716=>873,9717=>873,9718=>873,9719=>873,9720=>769,9721=>769,9722=>769,9723=>830,9724=>830,9725=>732,9726=>732,9727=>769,9728=>896,9729=>1000,9730=>896,9731=>896,9732=>896,9733=>896,9734=>896,9735=>573,9736=>896,9737=>896,9738=>888,9739=>888,9740=>671,9741=>1013,9742=>1246,9743=>1250,9744=>896,9745=>896,9746=>896,9747=>532,9748=>896,9749=>896,9750=>896,9751=>896,9752=>896,9753=>896,9754=>896,9755=>896,9756=>896,9757=>609,9758=>896,9759=>609,9760=>896,9761=>896,9762=>896,9763=>896,9764=>669,9765=>746,9766=>649,9767=>784,9768=>545,9769=>896,9770=>896,9771=>896,9772=>710,9773=>896,9774=>896,9775=>896,9776=>896,9777=>896,9778=>896,9779=>896,9780=>896,9781=>896,9782=>896,9783=>896,9784=>896,9785=>1042,9786=>1042,9787=>1042,9788=>896,9789=>896,9790=>896,9791=>614,9792=>732,9793=>732,9794=>896,9795=>896,9796=>896,9797=>896,9798=>896,9799=>896,9800=>896,9801=>896,9802=>896,9803=>896,9804=>896,9805=>896,9806=>896,9807=>896,9808=>896,9809=>896,9810=>896,9811=>896,9812=>896,9813=>896,9814=>896,9815=>896,9816=>896,9817=>896,9818=>896,9819=>896,9820=>896,9821=>896,9822=>896,9823=>896,9824=>896,9825=>896,9826=>896,9827=>896,9828=>896,9829=>896,9830=>896,9831=>896,9832=>896,9833=>472,9834=>638,9835=>896,9836=>896,9837=>472,9838=>357,9839=>484,9840=>748,9841=>766,9842=>896,9843=>896,9844=>896,9845=>896,9846=>896,9847=>896,9848=>896,9849=>896,9850=>896,9851=>896,9852=>896,9853=>896,9854=>896,9855=>896,9856=>869,9857=>869,9858=>869,9859=>869,9860=>869,9861=>869,9862=>896,9863=>896,9864=>896,9865=>896,9866=>896,9867=>896,9868=>896,9869=>896,9870=>896,9871=>896,9872=>896,9873=>896,9874=>896,9875=>896,9876=>896,9877=>541,9878=>896,9879=>896,9880=>896,9881=>896,9882=>896,9883=>896,9884=>896,9888=>896,9889=>702,9890=>1004,9891=>1089,9892=>1175,9893=>903,9894=>838,9895=>838,9896=>838,9897=>838,9898=>838,9899=>838,9900=>838,9901=>838,9902=>838,9903=>838,9904=>844,9905=>838,9906=>732,9907=>732,9908=>732,9909=>732,9910=>850,9911=>732,9912=>732,9920=>838,9921=>838,9922=>838,9923=>838,9954=>732,9985=>838,9986=>838,9987=>838,9988=>838,9990=>838,9991=>838,9992=>838,9993=>838,9996=>838,9997=>838,9998=>838,9999=>838,10000=>838,10001=>838,10002=>838,10003=>838,10004=>838,10005=>838,10006=>838,10007=>838,10008=>838,10009=>838,10010=>838,10011=>838,10012=>838,10013=>838,10014=>838,10015=>838,10016=>838,10017=>838,10018=>838,10019=>838,10020=>838,10021=>838,10022=>838,10023=>838,10025=>838,10026=>838,10027=>838,10028=>838,10029=>838,10030=>838,10031=>838,10032=>838,10033=>838,10034=>838,10035=>838,10036=>838,10037=>838,10038=>838,10039=>838,10040=>838,10041=>838,10042=>838,10043=>838,10044=>838,10045=>838,10046=>838,10047=>838,10048=>838,10049=>838,10050=>838,10051=>838,10052=>838,10053=>838,10054=>838,10055=>838,10056=>838,10057=>838,10058=>838,10059=>838,10061=>896,10063=>896,10064=>896,10065=>896,10066=>896,10070=>896,10072=>838,10073=>838,10074=>838,10075=>322,10076=>322,10077=>538,10078=>538,10081=>838,10082=>838,10083=>838,10084=>838,10085=>838,10086=>838,10087=>838,10088=>838,10089=>838,10090=>838,10091=>838,10092=>838,10093=>838,10094=>838,10095=>838,10096=>838,10097=>838,10098=>838,10099=>838,10100=>838,10101=>838,10102=>896,10103=>896,10104=>896,10105=>896,10106=>896,10107=>896,10108=>896,10109=>896,10110=>896,10111=>896,10112=>838,10113=>838,10114=>838,10115=>838,10116=>838,10117=>838,10118=>838,10119=>838,10120=>838,10121=>838,10122=>838,10123=>838,10124=>838,10125=>838,10126=>838,10127=>838,10128=>838,10129=>838,10130=>838,10131=>838,10132=>838,10136=>838,10137=>838,10138=>838,10139=>838,10140=>838,10141=>838,10142=>838,10143=>838,10144=>838,10145=>838,10146=>838,10147=>838,10148=>838,10149=>838,10150=>838,10151=>838,10152=>838,10153=>838,10154=>838,10155=>838,10156=>838,10157=>838,10158=>838,10159=>838,10161=>838,10162=>838,10163=>838,10164=>838,10165=>838,10166=>838,10167=>838,10168=>838,10169=>838,10170=>838,10171=>838,10172=>838,10173=>838,10174=>838,10181=>390,10182=>390,10208=>494,10214=>495,10215=>495,10216=>390,10217=>390,10218=>556,10219=>556,10224=>838,10225=>838,10226=>838,10227=>838,10228=>1157,10229=>1434,10230=>1434,10231=>1434,10232=>1434,10233=>1434,10234=>1434,10235=>1434,10236=>1434,10237=>1434,10238=>1434,10239=>1434,10240=>732,10241=>732,10242=>732,10243=>732,10244=>732,10245=>732,10246=>732,10247=>732,10248=>732,10249=>732,10250=>732,10251=>732,10252=>732,10253=>732,10254=>732,10255=>732,10256=>732,10257=>732,10258=>732,10259=>732,10260=>732,10261=>732,10262=>732,10263=>732,10264=>732,10265=>732,10266=>732,10267=>732,10268=>732,10269=>732,10270=>732,10271=>732,10272=>732,10273=>732,10274=>732,10275=>732,10276=>732,10277=>732,10278=>732,10279=>732,10280=>732,10281=>732,10282=>732,10283=>732,10284=>732,10285=>732,10286=>732,10287=>732,10288=>732,10289=>732,10290=>732,10291=>732,10292=>732,10293=>732,10294=>732,10295=>732,10296=>732,10297=>732,10298=>732,10299=>732,10300=>732,10301=>732,10302=>732,10303=>732,10304=>732,10305=>732,10306=>732,10307=>732,10308=>732,10309=>732,10310=>732,10311=>732,10312=>732,10313=>732,10314=>732,10315=>732,10316=>732,10317=>732,10318=>732,10319=>732,10320=>732,10321=>732,10322=>732,10323=>732,10324=>732,10325=>732,10326=>732,10327=>732,10328=>732,10329=>732,10330=>732,10331=>732,10332=>732,10333=>732,10334=>732,10335=>732,10336=>732,10337=>732,10338=>732,10339=>732,10340=>732,10341=>732,10342=>732,10343=>732,10344=>732,10345=>732,10346=>732,10347=>732,10348=>732,10349=>732,10350=>732,10351=>732,10352=>732,10353=>732,10354=>732,10355=>732,10356=>732,10357=>732,10358=>732,10359=>732,10360=>732,10361=>732,10362=>732,10363=>732,10364=>732,10365=>732,10366=>732,10367=>732,10368=>732,10369=>732,10370=>732,10371=>732,10372=>732,10373=>732,10374=>732,10375=>732,10376=>732,10377=>732,10378=>732,10379=>732,10380=>732,10381=>732,10382=>732,10383=>732,10384=>732,10385=>732,10386=>732,10387=>732,10388=>732,10389=>732,10390=>732,10391=>732,10392=>732,10393=>732,10394=>732,10395=>732,10396=>732,10397=>732,10398=>732,10399=>732,10400=>732,10401=>732,10402=>732,10403=>732,10404=>732,10405=>732,10406=>732,10407=>732,10408=>732,10409=>732,10410=>732,10411=>732,10412=>732,10413=>732,10414=>732,10415=>732,10416=>732,10417=>732,10418=>732,10419=>732,10420=>732,10421=>732,10422=>732,10423=>732,10424=>732,10425=>732,10426=>732,10427=>732,10428=>732,10429=>732,10430=>732,10431=>732,10432=>732,10433=>732,10434=>732,10435=>732,10436=>732,10437=>732,10438=>732,10439=>732,10440=>732,10441=>732,10442=>732,10443=>732,10444=>732,10445=>732,10446=>732,10447=>732,10448=>732,10449=>732,10450=>732,10451=>732,10452=>732,10453=>732,10454=>732,10455=>732,10456=>732,10457=>732,10458=>732,10459=>732,10460=>732,10461=>732,10462=>732,10463=>732,10464=>732,10465=>732,10466=>732,10467=>732,10468=>732,10469=>732,10470=>732,10471=>732,10472=>732,10473=>732,10474=>732,10475=>732,10476=>732,10477=>732,10478=>732,10479=>732,10480=>732,10481=>732,10482=>732,10483=>732,10484=>732,10485=>732,10486=>732,10487=>732,10488=>732,10489=>732,10490=>732,10491=>732,10492=>732,10493=>732,10494=>732,10495=>732,10502=>838,10503=>838,10506=>838,10507=>838,10560=>683,10561=>683,10627=>734,10628=>734,10702=>838,10703=>1000,10704=>1000,10705=>1000,10706=>1000,10707=>1000,10708=>1000,10709=>1000,10731=>494,10746=>838,10747=>838,10752=>1000,10753=>1000,10754=>1000,10764=>1325,10765=>521,10766=>521,10767=>521,10768=>521,10769=>521,10770=>521,10771=>521,10772=>521,10773=>521,10774=>521,10775=>521,10776=>521,10777=>521,10778=>521,10779=>521,10780=>521,10799=>838,10877=>838,10878=>838,10879=>838,10880=>838,10881=>838,10882=>838,10883=>838,10884=>838,10885=>838,10886=>838,10887=>838,10888=>838,10889=>838,10890=>838,10891=>838,10892=>838,10893=>838,10894=>838,10895=>838,10896=>838,10897=>838,10898=>838,10899=>838,10900=>838,10901=>838,10902=>838,10903=>838,10904=>838,10905=>838,10906=>838,10907=>838,10908=>838,10909=>838,10910=>838,10911=>838,10912=>838,10926=>838,10927=>838,10928=>838,10929=>838,10930=>838,10931=>838,10932=>838,10933=>838,10934=>838,10935=>838,10936=>838,10937=>838,10938=>838,11001=>838,11002=>838,11008=>838,11009=>838,11010=>838,11011=>838,11012=>838,11013=>838,11014=>838,11015=>838,11016=>838,11017=>838,11018=>838,11019=>838,11020=>838,11021=>838,11022=>836,11023=>836,11024=>836,11025=>836,11026=>945,11027=>945,11028=>945,11029=>945,11030=>769,11031=>769,11032=>769,11033=>769,11034=>945,11039=>869,11040=>869,11041=>873,11042=>873,11043=>873,11044=>1119,11091=>869,11092=>869,11360=>557,11361=>278,11362=>557,11363=>603,11364=>695,11365=>613,11366=>392,11367=>752,11368=>634,11369=>656,11370=>579,11371=>685,11372=>525,11373=>781,11374=>863,11375=>684,11376=>781,11377=>734,11378=>1128,11379=>961,11380=>592,11381=>654,11382=>568,11383=>660,11385=>414,11386=>612,11387=>491,11388=>175,11389=>431,11390=>635,11391=>685,11568=>646,11569=>888,11570=>888,11571=>682,11572=>684,11573=>635,11574=>562,11575=>684,11576=>684,11577=>632,11578=>632,11579=>683,11580=>875,11581=>685,11582=>491,11583=>685,11584=>888,11585=>888,11586=>300,11587=>627,11588=>752,11589=>656,11590=>527,11591=>685,11592=>645,11593=>632,11594=>502,11595=>953,11596=>778,11597=>748,11598=>621,11599=>295,11600=>778,11601=>295,11602=>752,11603=>633,11604=>888,11605=>888,11606=>752,11607=>320,11608=>749,11609=>888,11610=>888,11611=>698,11612=>768,11613=>685,11614=>698,11615=>622,11616=>684,11617=>752,11618=>632,11619=>788,11620=>567,11621=>788,11631=>515,11800=>531,11810=>390,11811=>390,11812=>390,11813=>390,11822=>531,19904=>896,19905=>896,19906=>896,19907=>896,19908=>896,19909=>896,19910=>896,19911=>896,19912=>896,19913=>896,19914=>896,19915=>896,19916=>896,19917=>896,19918=>896,19919=>896,19920=>896,19921=>896,19922=>896,19923=>896,19924=>896,19925=>896,19926=>896,19927=>896,19928=>896,19929=>896,19930=>896,19931=>896,19932=>896,19933=>896,19934=>896,19935=>896,19936=>896,19937=>896,19938=>896,19939=>896,19940=>896,19941=>896,19942=>896,19943=>896,19944=>896,19945=>896,19946=>896,19947=>896,19948=>896,19949=>896,19950=>896,19951=>896,19952=>896,19953=>896,19954=>896,19955=>896,19956=>896,19957=>896,19958=>896,19959=>896,19960=>896,19961=>896,19962=>896,19963=>896,19964=>896,19965=>896,19966=>896,19967=>896,42564=>635,42565=>521,42566=>354,42567=>338,42572=>1180,42573=>1028,42576=>1029,42577=>906,42580=>1080,42581=>842,42582=>977,42583=>843,42594=>1062,42595=>912,42596=>1066,42597=>901,42598=>1178,42599=>1008,42600=>787,42601=>612,42602=>855,42603=>712,42604=>1358,42605=>1019,42606=>879,42634=>782,42635=>685,42636=>611,42637=>583,42644=>686,42645=>634,42760=>493,42761=>493,42762=>493,42763=>493,42764=>493,42765=>493,42766=>493,42767=>493,42768=>493,42769=>493,42770=>493,42771=>493,42772=>493,42773=>493,42774=>493,42779=>369,42780=>369,42781=>252,42782=>252,42783=>252,42786=>385,42787=>356,42788=>472,42789=>472,42790=>752,42791=>634,42792=>878,42793=>709,42794=>614,42795=>541,42800=>491,42801=>521,42802=>1250,42803=>985,42804=>1203,42805=>990,42806=>1142,42807=>981,42808=>971,42809=>818,42810=>971,42811=>818,42812=>959,42813=>818,42814=>703,42815=>549,42822=>680,42823=>392,42824=>582,42825=>427,42826=>807,42827=>704,42830=>1358,42831=>1019,42832=>603,42833=>635,42834=>734,42835=>774,42838=>787,42839=>635,42852=>605,42853=>635,42854=>605,42855=>635,42880=>557,42881=>278,42882=>735,42883=>634,42889=>337,42890=>376,42891=>401,42892=>275,42893=>686,42894=>487,42896=>772,42897=>667,43002=>915,43003=>575,43004=>603,43005=>863,43006=>295,43007=>1199,61184=>213,61185=>238,61186=>257,61187=>264,61188=>267,61189=>238,61190=>213,61191=>238,61192=>257,61193=>264,61194=>257,61195=>238,61196=>213,61197=>238,61198=>257,61199=>264,61200=>257,61201=>238,61202=>213,61203=>238,61204=>267,61205=>264,61206=>257,61207=>238,61208=>213,61209=>275,61440=>977,61441=>977,61442=>977,61443=>977,63173=>612,64256=>689,64257=>630,64258=>630,64259=>967,64260=>967,64261=>686,64262=>861,64275=>1202,64276=>1202,64277=>1196,64278=>1186,64279=>1529,64285=>224,64286=>0,64287=>331,64288=>636,64289=>856,64290=>774,64291=>906,64292=>771,64293=>843,64294=>855,64295=>807,64296=>875,64297=>838,64298=>708,64299=>708,64300=>708,64301=>708,64302=>668,64303=>668,64304=>668,64305=>578,64306=>412,64307=>546,64308=>653,64309=>355,64310=>406,64312=>648,64313=>330,64314=>537,64315=>529,64316=>568,64318=>679,64320=>399,64321=>649,64323=>640,64324=>625,64326=>593,64327=>709,64328=>564,64329=>708,64330=>657,64331=>272,64332=>578,64333=>529,64334=>625,64335=>629,64338=>941,64339=>982,64340=>278,64341=>302,64342=>941,64343=>982,64344=>278,64345=>302,64346=>941,64347=>982,64348=>278,64349=>302,64350=>941,64351=>982,64352=>278,64353=>302,64354=>941,64355=>982,64356=>278,64357=>302,64358=>941,64359=>982,64360=>278,64361=>302,64362=>1037,64363=>1035,64364=>478,64365=>506,64366=>1037,64367=>1035,64368=>478,64369=>506,64370=>646,64371=>646,64372=>618,64373=>646,64374=>646,64375=>646,64376=>618,64377=>646,64378=>646,64379=>646,64380=>618,64381=>646,64382=>646,64383=>646,64384=>618,64385=>646,64386=>445,64387=>525,64388=>445,64389=>525,64390=>445,64391=>525,64392=>445,64393=>525,64394=>483,64395=>552,64396=>483,64397=>552,64398=>895,64399=>895,64400=>476,64401=>552,64402=>895,64403=>895,64404=>476,64405=>552,64406=>895,64407=>895,64408=>476,64409=>552,64410=>895,64411=>895,64412=>476,64413=>552,64414=>734,64415=>761,64416=>734,64417=>761,64418=>278,64419=>302,64426=>698,64427=>632,64428=>527,64429=>461,64467=>824,64468=>843,64469=>476,64470=>552,64473=>483,64474=>517,64488=>278,64489=>302,64508=>783,64509=>833,64510=>278,64511=>302,65024=>0,65025=>0,65026=>0,65027=>0,65028=>0,65029=>0,65030=>0,65031=>0,65032=>0,65033=>0,65034=>0,65035=>0,65036=>0,65037=>0,65038=>0,65039=>0,65056=>0,65057=>0,65058=>0,65059=>0,65136=>293,65137=>293,65138=>293,65139=>262,65140=>293,65142=>293,65143=>293,65144=>293,65145=>293,65146=>293,65147=>293,65148=>293,65149=>293,65150=>293,65151=>293,65152=>470,65153=>278,65154=>305,65155=>278,65156=>305,65157=>483,65158=>517,65159=>278,65160=>305,65161=>783,65162=>833,65163=>278,65164=>302,65165=>278,65166=>305,65167=>941,65168=>982,65169=>278,65170=>302,65171=>524,65172=>536,65173=>941,65174=>982,65175=>278,65176=>302,65177=>941,65178=>982,65179=>278,65180=>302,65181=>646,65182=>646,65183=>618,65184=>646,65185=>646,65186=>646,65187=>618,65188=>646,65189=>646,65190=>646,65191=>618,65192=>646,65193=>445,65194=>525,65195=>445,65196=>525,65197=>483,65198=>552,65199=>483,65200=>552,65201=>1221,65202=>1275,65203=>838,65204=>892,65205=>1221,65206=>1275,65207=>838,65208=>892,65209=>1209,65210=>1225,65211=>849,65212=>867,65213=>1209,65214=>1225,65215=>849,65216=>867,65217=>925,65218=>949,65219=>796,65220=>820,65221=>925,65222=>949,65223=>796,65224=>820,65225=>597,65226=>532,65227=>597,65228=>482,65229=>597,65230=>532,65231=>523,65232=>482,65233=>1037,65234=>1035,65235=>478,65236=>506,65237=>776,65238=>834,65239=>478,65240=>506,65241=>824,65242=>843,65243=>476,65244=>552,65245=>727,65246=>757,65247=>305,65248=>331,65249=>619,65250=>666,65251=>536,65252=>578,65253=>734,65254=>761,65255=>278,65256=>302,65257=>524,65258=>536,65259=>527,65260=>461,65261=>483,65262=>517,65263=>783,65264=>833,65265=>783,65266=>833,65267=>278,65268=>302,65269=>570,65270=>597,65271=>570,65272=>597,65273=>570,65274=>597,65275=>570,65276=>597,65279=>0,65529=>0,65530=>0,65531=>0,65532=>0,65533=>1025,65535=>600);// --- EOF ---
