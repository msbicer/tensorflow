<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles miscellaneous db operations: *  - move/rename *  - copy *  - changing collation *  - changing comment *  - adding tables *  - viewing PDF schemas * * @package PhpMyAdmin *//** * requirements */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';// add blobstreaming library functionsrequire_once "./libraries/blobstreaming.lib.php";// add a javascript file for jQuery functions to handle Ajax actions// also add jQueryUI$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'db_operations.js';/** * Rename/move or copy database */if (strlen($db) && (! empty($db_rename) || ! empty($db_copy))) {    if (! empty($db_rename)) {        $move = true;    } else {        $move = false;    }    if (! isset($newname) || ! strlen($newname)) {        $message = PMA_Message::error(__('The database name is empty!'));    } else {        $sql_query = ''; // in case target db exists        $_error = false;        if ($move || (isset($create_database_before_copying) && $create_database_before_copying)) {            // lower_case_table_names=1 `DB` becomes `db`            if (!PMA_DRIZZLE) {                $lower_case_table_names = PMA_DBI_fetch_value('SHOW VARIABLES LIKE "lower_case_table_names"', 0, 1);                if ($lower_case_table_names === '1') {                    $newname = PMA_strtolower($newname);                }            }            $local_query = 'CREATE DATABASE ' . PMA_backquote($newname);            if (isset($db_collation)) {                $local_query .= ' DEFAULT' . PMA_generateCharsetQueryPart($db_collation);            }            $local_query .= ';';            $sql_query = $local_query;            // save the original db name because Tracker.class.php which            // may be called under PMA_DBI_query() changes $GLOBALS['db']            // for some statements, one of which being CREATE DATABASE            $original_db = $db;            PMA_DBI_query($local_query);            $db = $original_db;            unset($original_db);            // rebuild the database list because PMA_Table::moveCopy            // checks in this list if the target db exists            $GLOBALS['pma']->databases->build();        }        // here I don't use DELIMITER because it's not part of the        // language; I have to send each statement one by one        // to avoid selecting alternatively the current and new db        // we would need to modify the CREATE definitions to qualify        // the db name        $procedure_names = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');        if ($procedure_names) {            foreach ($procedure_names as $procedure_name) {                PMA_DBI_select_db($db);                $tmp_query = PMA_DBI_get_definition($db, 'PROCEDURE', $procedure_name);                // collect for later display                $GLOBALS['sql_query'] .= "\n" . $tmp_query;                PMA_DBI_select_db($newname);                PMA_DBI_query($tmp_query);            }        }        $function_names = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');        if ($function_names) {            foreach ($function_names as $function_name) {                PMA_DBI_select_db($db);                $tmp_query = PMA_DBI_get_definition($db, 'FUNCTION', $function_name);                // collect for later display                $GLOBALS['sql_query'] .= "\n" . $tmp_query;                PMA_DBI_select_db($newname);                PMA_DBI_query($tmp_query);            }        }        // go back to current db, just in case        PMA_DBI_select_db($db);        $GLOBALS['sql_constraints_query_full_db'] = array();        $tables_full = PMA_DBI_get_tables_full($db);        $views = array();        // remove all foreign key constraints, otherwise we can get errors        include_once './libraries/export/sql.php';        foreach ($tables_full as $each_table => $tmp) {            $sql_constraints = '';            $sql_drop_foreign_keys = '';            $sql_structure = PMA_getTableDef($db, $each_table, "\n", '', false, false);            if ($move && ! empty($sql_drop_foreign_keys)) {                PMA_DBI_query($sql_drop_foreign_keys);            }            // keep the constraint we just dropped            if (! empty($sql_constraints)) {                $GLOBALS['sql_constraints_query_full_db'][] = $sql_constraints;            }        }        unset($sql_constraints, $sql_drop_foreign_keys, $sql_structure);        foreach ($tables_full as $each_table => $tmp) {            // to be able to rename a db containing views,            // first all the views are collected and a stand-in is created            // the real views are created after the tables            if (PMA_Table::isView($db, $each_table)) {                $views[] = $each_table;                // Create stand-in definition to resolve view dependencies                $sql_view_standin = PMA_getTableDefStandIn($db, $each_table, "\n");                PMA_DBI_select_db($newname);                PMA_DBI_query($sql_view_standin);                $GLOBALS['sql_query'] .= "\n" . $sql_view_standin;            }        }        foreach ($tables_full as $each_table => $tmp) {            // skip the views; we have creted stand-in definitions            if (PMA_Table::isView($db, $each_table)) {                continue;            }            $back = $sql_query;            $sql_query = '';            // value of $what for this table only            $this_what = $what;            // do not copy the data from a Merge table            // note: on the calling FORM, 'data' means 'structure and data'            if (PMA_Table::isMerge($db, $each_table)) {                if ($this_what == 'data') {                    $this_what = 'structure';                }                if ($this_what == 'dataonly') {                    $this_what = 'nocopy';                }            }            if ($this_what != 'nocopy') {                // keep the triggers from the original db+table                // (third param is empty because delimiters are only intended                //  for importing via the mysql client or our Import feature)                $triggers = PMA_DBI_get_triggers($db, $each_table, '');                if (! PMA_Table::moveCopy(                    $db, $each_table, $newname, $each_table,                    isset($this_what) ? $this_what : 'data', $move, 'db_copy')                ) {                    $_error = true;                    // $sql_query is filled by PMA_Table::moveCopy()                    $sql_query = $back . $sql_query;                    break;                }                // apply the triggers to the destination db+table                if ($triggers) {                    PMA_DBI_select_db($newname);                    foreach ($triggers as $trigger) {                        PMA_DBI_query($trigger['create']);                        $GLOBALS['sql_query'] .= "\n" . $trigger['create'] . ';';                    }                    unset($trigger);                }                unset($triggers);                // this does not apply to a rename operation                if (isset($GLOBALS['add_constraints']) && !empty($GLOBALS['sql_constraints_query'])) {                    $GLOBALS['sql_constraints_query_full_db'][] = $GLOBALS['sql_constraints_query'];                    unset($GLOBALS['sql_constraints_query']);                }            }            // $sql_query is filled by PMA_Table::moveCopy()            $sql_query = $back . $sql_query;        } // end (foreach)        unset($each_table);        // handle the views        if (! $_error) {            // temporarily force to add DROP IF EXIST to CREATE VIEW query,            // to remove stand-in VIEW that was created earlier            if (isset($GLOBALS['drop_if_exists'])) {                $temp_drop_if_exists = $GLOBALS['drop_if_exists'];            }            $GLOBALS['drop_if_exists'] = 'true';            foreach ($views as $view) {                if (! PMA_Table::moveCopy($db, $view, $newname, $view, 'structure', $move, 'db_copy')) {                    $_error = true;                    break;                }            }            unset($GLOBALS['drop_if_exists']);            if (isset($temp_drop_if_exists)) {                // restore previous value                $GLOBALS['drop_if_exists'] = $temp_drop_if_exists;                unset($temp_drop_if_exists);            }        }        unset($view, $views);        // now that all tables exist, create all the accumulated constraints        if (! $_error && count($GLOBALS['sql_constraints_query_full_db']) > 0) {            PMA_DBI_select_db($newname);            foreach ($GLOBALS['sql_constraints_query_full_db'] as $one_query) {                PMA_DBI_query($one_query);            // and prepare to display them                $GLOBALS['sql_query'] .= "\n" . $one_query;            }            unset($GLOBALS['sql_constraints_query_full_db'], $one_query);        }        if (!PMA_DRIZZLE && PMA_MYSQL_INT_VERSION >= 50100) {            // here DELIMITER is not used because it's not part of the            // language; each statement is sent one by one            // to avoid selecting alternatively the current and new db            // we would need to modify the CREATE definitions to qualify            // the db name            $event_names = PMA_DBI_fetch_result('SELECT EVENT_NAME FROM information_schema.EVENTS WHERE EVENT_SCHEMA= \'' . PMA_sqlAddSlashes($db, true) . '\';');            if ($event_names) {                foreach ($event_names as $event_name) {                    PMA_DBI_select_db($db);                    $tmp_query = PMA_DBI_get_definition($db, 'EVENT', $event_name);                    // collect for later display                    $GLOBALS['sql_query'] .= "\n" . $tmp_query;                    PMA_DBI_select_db($newname);                    PMA_DBI_query($tmp_query);                }            }        }        // go back to current db, just in case        PMA_DBI_select_db($db);        // Duplicate the bookmarks for this db (done once for each db)        if (! $_error && $db != $newname) {            $get_fields = array('user', 'label', 'query');            $where_fields = array('dbase' => $db);            $new_fields = array('dbase' => $newname);            PMA_Table::duplicateInfo('bookmarkwork', 'bookmark', $get_fields,                $where_fields, $new_fields);        }        if (! $_error && $move) {            /**             * cleanup pmadb stuff for this db             */            include_once './libraries/relation_cleanup.lib.php';            PMA_relationsCleanupDatabase($db);            // if someday the RENAME DATABASE reappears, do not DROP            $local_query = 'DROP DATABASE ' . PMA_backquote($db) . ';';            $sql_query .= "\n" . $local_query;            PMA_DBI_query($local_query);            $message = PMA_Message::success(__('Database %s has been renamed to %s'));            $message->addParam($db);            $message->addParam($newname);        } elseif (! $_error) {            $message = PMA_Message::success(__('Database %s has been copied to %s'));            $message->addParam($db);            $message->addParam($newname);        }        $reload     = true;        /* Change database to be used */        if (! $_error && $move) {            $db = $newname;        } elseif (! $_error) {            if (isset($switch_to_new) && $switch_to_new == 'true') {                $GLOBALS['PMA_Config']->setCookie('pma_switch_to_new', 'true');                $db = $newname;            } else {                $GLOBALS['PMA_Config']->setCookie('pma_switch_to_new', '');            }        }        if ($_error && ! isset($message)) {            $message = PMA_Message::error();        }    }    /**     * Database has been successfully renamed/moved.  If in an Ajax request,     * generate the output with {@link PMA_ajaxResponse} and exit     */    if ( $GLOBALS['is_ajax_request'] == true) {        $extra_data['newname'] = $newname;        $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);        PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);    };}/** * Settings for relations stuff */$cfgRelation = PMA_getRelationsParam();/** * Check if comments were updated * (must be done before displaying the menu tabs) */if (isset($_REQUEST['comment'])) {    PMA_setDbComment($db, $comment);}/** * Prepares the tables list if the user where not redirected to this script * because there is no table in the database ($is_info is true) */if (empty($is_info)) {    include './libraries/db_common.inc.php';    $url_query .= '&amp;goto=db_operations.php';    // Gets the database structure    $sub_part = '_structure';    include './libraries/db_info.inc.php';    echo "\n";    if (isset($message)) {        PMA_showMessage($message, $sql_query);        unset($message);    }}$db_collation = PMA_getDbCollation($db);$is_information_schema = PMA_is_system_schema($db);if (!$is_information_schema) {    if ($cfgRelation['commwork']) {        /**         * database comment         */        ?>    <div class="operations_half_width">    <form method="post" action="db_operations.php">    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <fieldset>        <legend>        <?php        if ($cfg['PropertiesIconic']) {            echo '<img class="icon ic_b_comment" src="themes/dot.gif" alt="" />';        }        echo __('Database comment: ');        ?>        </legend>        <input type="text" name="comment" class="textfield" size="30"            value="<?php            echo htmlspecialchars(PMA_getDBComment($db)); ?>" />    </fieldset>    <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div>        <?php    }    ?>    <div class="operations_half_width">    <?php include './libraries/display_create_table.lib.php'; ?>    </div>    <?php    /**     * rename database     */if ($db != 'mysql') {    ?>        <div class="operations_half_width">        <form id="rename_db_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : ''); ?>method="post" action="db_operations.php"        onsubmit="return emptyFormElements(this, 'newname')">        <?php    if (isset($db_collation)) {        echo '<input type="hidden" name="db_collation" value="' . $db_collation            .'" />' . "\n";    }        ?>    <input type="hidden" name="what" value="data" />    <input type="hidden" name="db_rename" value="true" />    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <fieldset>        <legend>    <?php    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Rename database to') . ':';    ?>        </legend>        <input id="new_db_name" type="text" name="newname" size="30" class="textfield" value="" />    </fieldset>    <fieldset class="tblFooters">        <input id="rename_db_input" type="submit" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div><?php} // end if// Drop link if allowed// Don't even try to drop information_schema. You won't be able to. Believe me. You won't.// Don't allow to easily drop mysql database, RFE #1327514.if (($is_superuser || $GLOBALS['cfg']['AllowUserDropDatabase'])        && !$db_is_information_schema        && (PMA_DRIZZLE || $db != 'mysql')) {?><div class="operations_half_width"><fieldset class="caution"> <legend><?phpif ($cfg['PropertiesIconic']) {    echo PMA_getImage('b_deltbl.png');}echo __('Remove database');?></legend><ul><?php    $this_sql_query = 'DROP DATABASE ' . PMA_backquote($GLOBALS['db']);    $this_url_params = array(            'sql_query' => $this_sql_query,            'back' => 'db_operations.php',            'goto' => 'main.php',            'reload' => '1',            'purge' => '1',            'message_to_show' => sprintf(__('Database %s has been dropped.'), htmlspecialchars(PMA_backquote($db))),            'db' => null,        );    ?>        <li><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'id="drop_db_anchor"' : ''); ?>>            <?php echo __('Drop the database (DROP)'); ?></a>        <?php echo PMA_showMySQLDocu('SQL-Syntax', 'DROP_DATABASE'); ?>    </li></ul></fieldset></div><?php } ?>    <?php    /**     * Copy database     */    ?>        <div class="operations_half_width clearfloat">        <form id="copy_db_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : ''); ?>method="post" action="db_operations.php"        onsubmit="return emptyFormElements(this, 'newname')">    <?php    if (isset($db_collation)) {        echo '<input type="hidden" name="db_collation" value="' . $db_collation            .'" />' . "\n";    }    echo '<input type="hidden" name="db_copy" value="true" />' . "\n";    echo PMA_generate_common_hidden_inputs($db);    ?>    <fieldset>        <legend>    <?php    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Copy database to') . ':';    $drop_clause = 'DROP TABLE / DROP VIEW';    ?>        </legend>        <input type="text" name="newname" size="30" class="textfield" value="" /><br /><?php        $choices = array(            'structure' => __('Structure only'),            'data'      => __('Structure and data'),            'dataonly'  => __('Data only'));        PMA_display_html_radio('what', $choices, 'data', true);        unset($choices);?>        <input type="checkbox" name="create_database_before_copying" value="1"            id="checkbox_create_database_before_copying"            checked="checked" />        <label for="checkbox_create_database_before_copying">            <?php echo __('CREATE DATABASE before copying'); ?></label><br />        <input type="checkbox" name="drop_if_exists" value="true"            id="checkbox_drop" />        <label for="checkbox_drop"><?php echo sprintf(__('Add %s'), $drop_clause); ?></label><br />        <input type="checkbox" name="sql_auto_increment" value="1" checked="checked"            id="checkbox_auto_increment" />        <label for="checkbox_auto_increment">            <?php echo __('Add AUTO_INCREMENT value'); ?></label><br />        <input type="checkbox" name="add_constraints" value="1"            id="checkbox_constraints" />        <label for="checkbox_constraints">            <?php echo __('Add constraints'); ?></label><br />    <?php    unset($drop_clause);    if (isset($_COOKIE) && isset($_COOKIE['pma_switch_to_new'])      && $_COOKIE['pma_switch_to_new'] == 'true') {        $pma_switch_to_new = 'true';    }    ?>        <input type="checkbox" name="switch_to_new" value="true"            id="checkbox_switch"            <?php echo ((isset($pma_switch_to_new) && $pma_switch_to_new == 'true') ? ' checked="checked"' : ''); ?>            />        <label for="checkbox_switch"><?php echo __('Switch to copied database'); ?></label>    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="submit_copy" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div>    <?php    /**     * Change database charset     */    echo '<div class="operations_half_width"><form id="change_db_charset_form" ';    if ($GLOBALS['cfg']['AjaxEnable']) {        echo ' class="ajax" ';    }    echo 'method="post" action="./db_operations.php">'       . PMA_generate_common_hidden_inputs($db, $table)       . '<fieldset>' . "\n"       . '    <legend>';    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('s_asci.png');    }    echo '    <label for="select_db_collation">' . __('Collation') . ':</label>' . "\n"       . '    </legend>' . "\n"       . PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION,            'db_collation', 'select_db_collation', $db_collation, false, 3)       . '</fieldset>'       . '<fieldset class="tblFooters">'       . '    <input type="submit" name="submitcollation"'       . ' value="' . __('Go') . '" />' . "\n"       . '</fieldset>' . "\n"       . '</form></div>' . "\n";    if ($num_tables > 0      && ! $cfgRelation['allworks'] && $cfg['PmaNoRelation_DisableWarning'] == false) {        $message = PMA_Message::notice(__('The phpMyAdmin configuration storage has been deactivated. To find out why click %shere%s.'));        $message->addParam('<a href="' . $cfg['PmaAbsoluteUri'] . 'chk_rel.php?' . $url_query . '">', false);        $message->addParam('</a>', false);        /* Show error if user has configured something, notice elsewhere */        if (!empty($cfg['Servers'][$server]['pmadb'])) {            $message->isError(true);        }        echo '<div class="operations_full_width">';        $message->display();        echo '</div>';    } // end if} // end if (!$is_information_schema)// not sure about displaying the PDF dialog in case db is information_schemaif ($cfgRelation['pdfwork'] && $num_tables > 0) { ?>    <!-- Work on PDF Pages -->    <?php    // We only show this if we find something in the new pdf_pages table    $test_query = '         SELECT *           FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages']) . '          WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'';    $test_rs    = PMA_query_as_controluser($test_query, null, PMA_DBI_QUERY_STORE);    /*     * Export Relational Schema View     */    echo '<div class="operations_full_width"><fieldset><a href="schema_edit.php?' . $url_query . '">';    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Edit or export relational schema') . '</a></fieldset></div>';} // end if/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/file_listing.php';require_once './libraries/plugin_interface.lib.php';require_once './libraries/display_import_ajax.lib.php';/* Scan for plugins */$import_list = PMA_getPlugins('./libraries/import/', $import_type);/* Fail if we didn't find any plugin */if (empty($import_list)) {    PMA_Message::error(__('Could not load import plugins, please check your installation!'))->display();    include './libraries/footer.inc.php';}?><iframe id="import_upload_iframe" name="import_upload_iframe" width="1" height="1" style="display: none;"></iframe><div id="import_form_status" style="display: none;"></div><div id="importmain">    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />    <script type="text/javascript">        //<![CDATA[        $(document).ready( function() {            // add event when user click on "Go" button            $('#buttonGo').bind('click', function() {                $('#upload_form_form').css("display", "none"); // hide form                $('#upload_form_status').css("display", "inline"); // show progress bar                $('#upload_form_status_info').css("display", "inline"); // - || -<?phpif ($_SESSION[$SESSION_KEY]["handler"]!="noplugin") {    ?>                $('#upload_form_status').html('<div class="upload_progress_bar_outer"><div id="status" class="upload_progress_bar_inner"></div></div>'); // add the progress bar                var finished = false;                var percent  = 0.0;                var total    = 0;                var complete = 0;                var perform_upload;                var periodical_upload;                var request_upload = [];                perform_upload = function () {                    new $.getJSON(                    'import_status.php?id=<?php echo $upload_id ; ?>&<?php echo PMA_generate_common_url(); ?>',                    {},                    function(response) {                        finished = response.finished;                        percent = response.percent;                        total = response.total;                        complete = response.complete;                          if (total==0 && complete==0 && percent==0) {                              $('#upload_form_status_info').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('The file being uploaded is probably larger than the maximum allowed size or this is a known bug in webkit based (Safari, Google Chrome, Arora etc.) browsers.'), false); ?>');                              $('#upload_form_status').css("display", "none");                          } else {                              $('#upload_form_status_info').html(' '+Math.round(percent)+'%, '+complete+'/'+total);                              $('#status').animate({width: Math.round(percent)*2+'px'},150);                          } // else                          if (finished==true) {                                    $('#importmain').css('display', 'none');                                    $('#import_form_status').css('display', 'inline');                                    $('#import_form_status').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('The file is being processed, please be patient.'), false); ?> ');                                    $('#import_form_status').load('import_status.php?message=true&<?php echo PMA_generate_common_url(); ?>'); // loads the message, either success or mysql error                                    <?php                                    // reload the left sidebar when the import is finished                                    $GLOBALS['reload']=true;                                    PMA_reloadNavigation(true);                                    ?>                          } // if finished                          else {                                window.setTimeout(perform_upload, 1000);                          }                      }                  );              }                window.setTimeout(perform_upload, 1000);    <?php} else { // no plugin available    ?>                        $('#upload_form_status_info').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('Please be patient, the file is being uploaded. Details about the upload are not available.'), false) . PMA_showDocu('faq2_9'); ?>');                        $('#upload_form_status').css("display", "none");    <?php} // else?>                    }); // onclick                }); // domready                document.write('<form action="import.php" method="post" enctype="multipart/form-data" name="import"<?php if ($_SESSION[$SESSION_KEY]["handler"]!="noplugin") echo ' target="import_upload_iframe"'; ?>>');                //]]>    </script>    <noscript>        <form action="import.php" method="post" enctype="multipart/form-data" name="import">    </noscript>    <input type="hidden" name="<?php echo $ID_KEY; ?>" value="<?php echo $upload_id ; ?>" />    <?php    if ($import_type == 'server') {        echo PMA_generate_common_hidden_inputs('', '', 1);    } elseif ($import_type == 'database') {        echo PMA_generate_common_hidden_inputs($db, '', 1);    } else {        echo PMA_generate_common_hidden_inputs($db, $table, 1);    }    echo '    <input type="hidden" name="import_type" value="' . $import_type . '" />'."\n";    ?>    <div class="exportoptions" id="header">        <h2>            <?php echo PMA_getImage('b_import.png', __('Import')); ?>            <?php            if ($import_type == 'server') {                echo __('Importing into the current server');            } elseif ($import_type == 'database') {                printf(__('Importing into the database "%s"'), htmlspecialchars($db));            } else {                printf(__('Importing into the table "%s"'), htmlspecialchars($table));            }?>        </h2>    </div>    <div class="importoptions">        <h3><?php echo __('File to Import:'); ?></h3>        <?php        // zip, gzip and bzip2 encode features        $compressions = array();        if ($cfg['GZipDump'] && @function_exists('gzopen')) {            $compressions[] = 'gzip';        }        if ($cfg['BZipDump'] && @function_exists('bzopen')) {            $compressions[] = 'bzip2';        }        if ($cfg['ZipDump'] && @function_exists('zip_open')) {            $compressions[] = 'zip';        }        // We don't have show anything about compression, when no supported        if ($compressions != array()) {            echo '<div class="formelementrow" id="compression_info">';            printf(__('File may be compressed (%s) or uncompressed.'), implode(", ", $compressions));            echo '<br />';            echo __('A compressed file\'s name must end in <b>.[format].[compression]</b>. Example: <b>.sql.zip</b>');            echo '</div>';        }?>        <div class="formelementrow" id="upload_form">        <?php if ($GLOBALS['is_upload'] && !empty($cfg['UploadDir'])) { ?>            <ul>            <li>                <input type="radio" name="file_location" id="radio_import_file" />                <?php PMA_browseUploadFile($max_upload_size); ?>            </li>            <li>                <input type="radio" name="file_location" id="radio_local_import_file" />                <?php PMA_selectUploadFile($import_list, $cfg['UploadDir']); ?>            </li>            </ul>        <?php } else if ($GLOBALS['is_upload']) {            $uid = uniqid("");            PMA_browseUploadFile($max_upload_size);        } else if (!$GLOBALS['is_upload']) {            PMA_Message::notice(__('File uploads are not allowed on this server.'))->display();        } else if (!empty($cfg['UploadDir'])) {            PMA_selectUploadFile($import_list, $cfg['UploadDir']);        } // end if (web-server upload directory)        ?>        </div>       <div class="formelementrow" id="charaset_of_file">        <?php // charset of file        if ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE) {            echo '<label for="charset_of_file">' . __('Character set of the file:') . '</label>';            reset($cfg['AvailableCharsets']);            echo '<select id="charset_of_file" name="charset_of_file" size="1">';            foreach ($cfg['AvailableCharsets'] as $temp_charset) {                echo '<option value="' . htmlentities($temp_charset) .  '"';                if ((empty($cfg['Import']['charset']) && $temp_charset == 'utf-8')                        || $temp_charset == $cfg['Import']['charset']) {                    echo ' selected="selected"';                }                echo '>' . htmlentities($temp_charset) . '</option>';            }            echo ' </select><br />';        } else {            echo '<label for="charset_of_file">' . __('Character set of the file:') . '</label>' . "\n";            echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_CHARSET, 'charset_of_file', 'charset_of_file', 'utf8', false);        } // end if (recoding)        ?>        </div>    </div>    <div class="importoptions">        <h3><?php echo __('Partial Import:'); ?></h3>        <?php        if (isset($timeout_passed) && $timeout_passed) {            echo '<div class="formelementrow">' . "\n";            echo '<input type="hidden" name="skip" value="' . $offset . '" />';            echo sprintf(__('Previous import timed out, after resubmitting will continue from position %d.'), $offset) . '';            echo '</div>' . "\n";        }        ?>        <div class="formelementrow">            <input type="checkbox" name="allow_interrupt" value="yes"                   id="checkbox_allow_interrupt" <?php echo PMA_pluginCheckboxCheck('Import', 'allow_interrupt'); ?>/>            <label for="checkbox_allow_interrupt"><?php echo __('Allow the interruption of an import in case the script detects it is close to the PHP timeout limit. <i>(This might be good way to import large files, however it can break transactions.)</i>'); ?></label><br />        </div>        <?php        if (! (isset($timeout_passed) && $timeout_passed)) {            ?>        <div class="formelementrow">            <label for="text_skip_queries"><?php echo __('Number of rows to skip, starting from the first row:'); ?></label>            <input type="text" name="skip_queries" value="<?php echo PMA_pluginGetDefault('Import', 'skip_queries');?>" id="text_skip_queries" />        </div>            <?php        } else {            // If timeout has passed,            // do not show the Skip dialog to avoid the risk of someone            // entering a value here that would interfere with "skip"            ?>        <input type="hidden" name="skip_queries" value="<?php echo PMA_pluginGetDefault('Import', 'skip_queries');?>" id="text_skip_queries" />            <?php        }        ?>    </div>    <div class="importoptions">        <h3><?php echo __('Format:'); ?></h3>        <?php echo PMA_pluginGetChoice('Import', 'format', $import_list); ?>        <div id="import_notification"></div>    </div>    <div class="importoptions" id="format_specific_opts">        <h3><?php echo __('Format-Specific Options:'); ?></h3>        <p class="no_js_msg" id="scroll_to_options_msg">Scroll down to fill in the options for the selected format and ignore the options for other formats.</p>        <?php echo PMA_pluginGetOptions('Import', $import_list); ?>    </div>        <div class="clearfloat"></div>    </div>    <?php    // Encoding setting form appended by Y.Kawada    if (function_exists('PMA_set_enc_form')) { ?>        <div class="importoptions" id="kanji_encoding">            <h3><?php echo __('Encoding Conversion:'); ?></h3>            <?php echo PMA_set_enc_form('            '); ?>        </div>    <?php }    echo "\n";    ?>    <div class="importoptions" id="submit">        <input type="submit" value="<?php echo __('Go'); ?>" id="buttonGo" />    </div></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build LaTeX dumps of tables * * @package PhpMyAdmin-Export * @subpackage Latex */if (! defined('PHPMYADMIN')) {    exit;}/* Messages used in default captions */$GLOBALS['strLatexContent'] = __('Content of table @TABLE@');$GLOBALS['strLatexContinued'] = __('(continued)');$GLOBALS['strLatexStructure'] = __('Structure of table @TABLE@');/** * */if (isset($plugin_list)) {    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && ! $plugin_param['single_table']) {        $hide_structure = true;    }    $plugin_list['latex'] = array(        'text' => __('LaTeX'),        'extension' => 'tex',        'mime_type' => 'application/x-tex',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'caption', 'text' => __('Include table caption')),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );    /* what to dump (structure/data/both) */    $plugin_list['latex']['options'][]        = array('type' => 'begin_group', 'name' => 'dump_what', 'text' => __('Dump table'));    $plugin_list['latex']['options'][]        = array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data')));    $plugin_list['latex']['options'][] = array('type' => 'end_group');    /* Structure options */    if (! $hide_structure) {        $plugin_list['latex']['options'][]            = array('type' => 'begin_group', 'name' => 'structure', 'text' => __('Object creation options'), 'force' => 'data');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_caption', 'text' => __('Table caption'), 'doc' => 'faq6_27');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_continued_caption', 'text' => __('Table caption (continued)'), 'doc' => 'faq6_27');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_label', 'text' => __('Label key'), 'doc' => 'faq6_27');        if (! empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['latex']['options'][]                = array('type' => 'bool', 'name' => 'relation', 'text' => __('Display foreign key relationships'));        }        $plugin_list['latex']['options'][]            = array('type' => 'bool', 'name' => 'comments', 'text' => __('Display comments'));        if (! empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['latex']['options'][]                = array('type' => 'bool', 'name' => 'mime', 'text' => __('Display MIME types'));        }        $plugin_list['latex']['options'][]            = array('type' => 'end_group');    }    /* Data */    $plugin_list['latex']['options'][]        = array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure');    $plugin_list['latex']['options'][]        = array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row'));    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_caption', 'text' => __('Table caption'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_continued_caption', 'text' => __('Table caption (continued)'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_label', 'text' => __('Label key'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:'));    $plugin_list['latex']['options'][]        = array('type' => 'end_group');} else {    /**     * Escapes some special characters for use in TeX/LaTeX     *     * @param string $string the string to convert     *     * @return  string      the converted string with escape codes     *     * @access  private     */    function PMA_texEscape($string)    {        $escape = array('$', '%', '{', '}',  '&',  '#', '_', '^');        $cnt_escape = count($escape);        for ($k=0; $k < $cnt_escape; $k++) {            $string = str_replace($escape[$k], '\\' . $escape[$k], $string);        }        return $string;    }    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportHeader()    {        global $crlf;        global $cfg;        $head  =  '% phpMyAdmin LaTeX Dump' . $crlf               .  '% version ' . PMA_VERSION . $crlf               .  '% http://www.phpmyadmin.net' . $crlf               .  '%' . $crlf               .  '% ' . __('Host') . ': ' . $cfg['Server']['host'];        if (! empty($cfg['Server']['port'])) {             $head .= ':' . $cfg['Server']['port'];        }        $head .= $crlf               .  '% ' . __('Generation Time') . ': ' . PMA_localisedDate() . $crlf               .  '% ' . __('Server version') . ': ' . PMA_MYSQL_STR_VERSION . $crlf               .  '% ' . __('PHP Version') . ': ' . phpversion() . $crlf;        return PMA_exportOutputHandler($head);    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        global $crlf;        $head = '% ' . $crlf              . '% ' . __('Database') . ': ' . '\'' . $db . '\'' . $crlf              . '% ' . $crlf;        return PMA_exportOutputHandler($head);    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in LaTeX table/sideways table environment     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = PMA_DBI_field_name($result, $i);        }        unset($i);        $buffer      = $crlf . '%' . $crlf . '% ' . __('Data') . ': ' . $table            . $crlf . '%' . $crlf . ' \\begin{longtable}{|';        for ($index = 0; $index < $columns_cnt; $index++) {            $buffer .= 'l|';        }        $buffer .= '} ' . $crlf ;        $buffer .= ' \\hline \\endhead \\hline \\endfoot \\hline ' . $crlf;        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_data_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\label{'                . PMA_expandUserString(                    $GLOBALS['latex_data_label'],                    null,                    array('table' => $table, 'database' => $db)                )                . '} \\\\';        }        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        // show column names        if (isset($GLOBALS['latex_columns'])) {            $buffer = '\\hline ';            for ($i = 0; $i < $columns_cnt; $i++) {                $buffer .= '\\multicolumn{1}{|c|}{\\textbf{'                    . PMA_texEscape(stripslashes($columns[$i])) . '}} & ';            }            $buffer = substr($buffer, 0, -2) . '\\\\ \\hline \hline ';            if (! PMA_exportOutputHandler($buffer . ' \\endfirsthead ' . $crlf)) {                return false;            }            if (isset($GLOBALS['latex_caption'])) {                if (! PMA_exportOutputHandler(                    '\\caption{'                    . PMA_expandUserString(                        $GLOBALS['latex_data_continued_caption'],                        'PMA_texEscape',                        array('table' => $table, 'database' => $db)                    )                    . '} \\\\ '                )) {                    return false;                }            }            if (! PMA_exportOutputHandler($buffer . '\\endhead \\endfoot' . $crlf)) {                return false;            }        } else {            if (! PMA_exportOutputHandler('\\\\ \hline')) {                return false;            }        }        // print the whole table        while ($record = PMA_DBI_fetch_assoc($result)) {            $buffer = '';            // print each row            for ($i = 0; $i < $columns_cnt; $i++) {                if (isset($record[$columns[$i]])                    && (! function_exists('is_null') || ! is_null($record[$columns[$i]]))                ) {                    $column_value = PMA_texEscape(stripslashes($record[$columns[$i]]));                } else {                    $column_value = $GLOBALS['latex_null'];                }                // last column ... no need for & character                if ($i == ($columns_cnt - 1)) {                    $buffer .= $column_value;                } else {                    $buffer .= $column_value . " & ";                }            }            $buffer .= ' \\\\ \\hline ' . $crlf;            if (! PMA_exportOutputHandler($buffer)) {                return false;            }        }        $buffer = ' \\end{longtable}' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        PMA_DBI_free_result($result);        return true;    } // end getTableLaTeX    /**     * Outputs table's structure     *     * @param string $db          database name     * @param string $table       table name     * @param string $crlf        the end of line sequence     * @param string $error_url   the url to go back in case of error     * @param bool   $do_relation whether to include relation comments     * @param bool   $do_comments whether to include the pmadb-style column comments     *                            as comments in the structure; this is deprecated     *                            but the parameter is left here because export.php     *                            calls PMA_exportStructure() also for other export     *                            types which use this parameter     * @param bool   $do_mime     whether to include mime comments     * @param bool   $dates       whether to include creation/update/check dates     * @param string $export_mode 'create_table', 'triggers', 'create_view', 'stand_in'     * @param string $export_type 'server', 'database', 'table'     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $buffer      = $crlf . '%' . $crlf . '% ' . __('Structure') . ': ' . $table            . $crlf . '%' . $crlf . ' \\begin{longtable}{';        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        $columns_cnt = 4;        $alignment = '|l|c|c|c|';        if ($do_relation && $have_rel) {            $columns_cnt++;            $alignment .= 'l|';        }        if ($do_comments) {            $columns_cnt++;            $alignment .= 'l|';        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;            $alignment .='l|';        }        $buffer = $alignment . '} ' . $crlf ;        $header = ' \\hline ';        $header .= '\\multicolumn{1}{|c|}{\\textbf{' . __('Column')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Type')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Null')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Default') . '}}';        if ($do_relation && $have_rel) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{' . __('Links to') . '}}';        }        if ($do_comments) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{' . __('Comments') . '}}';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{MIME}}';            $mime_map = PMA_getMIME($db, $table, true);        }        // Table caption for first page and label        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\label{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_label'],                    null,                    array('table' => $table, 'database' => $db)                )                . '} \\\\' . $crlf;        }        $buffer .= $header . ' \\\\ \\hline \\hline' . $crlf . '\\endfirsthead' . $crlf;        // Table caption on next pages        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_continued_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\\\ ' . $crlf;        }        $buffer .= $header . ' \\\\ \\hline \\hline \\endhead \\endfoot ' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        $fields = PMA_DBI_get_columns($db, $table);        foreach ($fields as $row) {            $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);            $type = $extracted_fieldspec['print_type'];            if (empty($type)) {                $type     = ' ';            }            if (! isset($row['Default'])) {                if ($row['Null'] != 'NO') {                    $row['Default'] = 'NULL';                }            }            $field_name = $row['Field'];            $local_buffer = $field_name . "\000" . $type . "\000"                . (($row['Null'] == '' || $row['Null'] == 'NO') ? __('No') : __('Yes'))                . "\000" . (isset($row['Default']) ? $row['Default'] : '');            if ($do_relation && $have_rel) {                $local_buffer .= "\000";                if (isset($res_rel[$field_name])) {                    $local_buffer .= $res_rel[$field_name]['foreign_table'] . ' ('                        . $res_rel[$field_name]['foreign_field'] . ')';                }            }            if ($do_comments && $cfgRelation['commwork']) {                $local_buffer .= "\000";                if (isset($comments[$field_name])) {                    $local_buffer .= $comments[$field_name];                }            }            if ($do_mime && $cfgRelation['mimework']) {                $local_buffer .= "\000";                if (isset($mime_map[$field_name])) {                    $local_buffer .= str_replace('_', '/', $mime_map[$field_name]['mimetype']);                }            }            $local_buffer = PMA_texEscape($local_buffer);            if ($row['Key']=='PRI') {                $pos=strpos($local_buffer, "\000");                $local_buffer = '\\textit{' . substr($local_buffer, 0, $pos) . '}' . substr($local_buffer, $pos);            }            if (in_array($field_name, $unique_keys)) {                $pos=strpos($local_buffer, "\000");                $local_buffer = '\\textbf{' . substr($local_buffer, 0, $pos) . '}' . substr($local_buffer, $pos);            }            $buffer = str_replace("\000", ' & ', $local_buffer);            $buffer .= ' \\\\ \\hline ' . $crlf;            if (! PMA_exportOutputHandler($buffer)) {                return false;            }        } // end while        $buffer = ' \\end{longtable}' . $crlf;        return PMA_exportOutputHandler($buffer);    } // end of the 'PMA_exportStructure' function} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/jquery.sprintf.js';// Handles some variables that may have been sent by the calling script$GLOBALS['db'] = '';$GLOBALS['table'] = '';$show_query = '1';require_once './libraries/header.inc.php';// Any message to display?if (! empty($message)) {    PMA_showMessage($message);    unset($message);}$common_url_query =  PMA_generate_common_url('', '');// when $server > 0, a server has been chosen so we can display// all MySQL-related informationif ($server > 0) {    include './libraries/server_common.inc.php';    include './libraries/StorageEngine.class.php';    include './libraries/server_links.inc.php';    // Use the verbose name of the server instead of the hostname    // if a value is set    $server_info = '';    if (! empty($cfg['Server']['verbose'])) {        $server_info .= htmlspecialchars($cfg['Server']['verbose']);        if ($GLOBALS['cfg']['ShowServerInfo']) {            $server_info .= ' (';        }    }    if ($GLOBALS['cfg']['ShowServerInfo'] || empty($cfg['Server']['verbose'])) {        $server_info .= PMA_DBI_get_host_info();    }    if (! empty($cfg['Server']['verbose']) && $GLOBALS['cfg']['ShowServerInfo']) {    $server_info .= ')';    }    $mysql_cur_user_and_host = PMA_DBI_fetch_value('SELECT USER();');    // should we add the port info here?    $short_server_info = (!empty($GLOBALS['cfg']['Server']['verbose'])                ? $GLOBALS['cfg']['Server']['verbose']                : $GLOBALS['cfg']['Server']['host']);}echo '<div id="maincontainer">' . "\n";echo '<div id="main_pane_left">';if ($server > 0 || (! $cfg['LeftDisplayServers'] && count($cfg['Servers']) > 1)) {    echo '<div class="group">';    echo '<h2>' . __('General Settings') . '</h2>';    echo '<ul>';    /**     * Displays the MySQL servers choice form     */    if (! $cfg['LeftDisplayServers']     && (count($cfg['Servers']) > 1 || $server == 0 && count($cfg['Servers']) == 1)) {        echo '<li id="li_select_server">';        include_once './libraries/select_server.lib.php';        PMA_select_server(true, true);        echo '</li>';    }    /**     * Displays the mysql server related links     */    if ($server > 0 && !PMA_DRIZZLE) {        include_once './libraries/check_user_privileges.lib.php';        // Logout for advanced authentication        if ($cfg['Server']['auth_type'] != 'config') {            if ($cfg['ShowChgPassword']) {                if ($GLOBALS['cfg']['AjaxEnable']) {                    $conditional_class = 'ajax';                } else {                    $conditional_class = null;                }                PMA_printListItem(                    __('Change password'),                    'li_change_password',                    './user_password.php?' . $common_url_query,                    null,                    null,                    'change_password_anchor',                    null,                    $conditional_class                );            }        } // end if        echo '    <li id="li_select_mysql_collation">';        echo '        <form method="post" action="index.php" target="_parent">' . "\n"           . PMA_generate_common_hidden_inputs(null, null, 4, 'collation_connection')           . '            <label for="select_collation_connection">' . "\n"           . '                ' . __('Server connection collation') . "\n"           // put the doc link in the form so that it appears on the same line           . PMA_showMySQLDocu('MySQL_Database_Administration', 'Charset-connection') . ': ' .  "\n"           . '            </label>' . "\n"           . PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION, 'collation_connection', 'select_collation_connection', $collation_connection, true, 4, true)           . '            <noscript><input type="submit" value="' . __('Go') . '" /></noscript>' . "\n"           . '        </form>' . "\n"           . '    </li>' . "\n";    } // end of if ($server > 0 && !PMA_DRIZZLE)    echo '</ul>';    echo '</div>';}echo '<div class="group">';echo '<h2>' . __('Appearance Settings') . '</h2>';echo '  <ul>';// Displays language selection comboif (empty($cfg['Lang'])) {    echo '<li id="li_select_lang">';    include_once './libraries/display_select_lang.lib.php';    PMA_select_language();    echo '</li>';}// ThemeManager if availableif ($GLOBALS['cfg']['ThemeManager']) {    echo '<li id="li_select_theme">';    echo $_SESSION['PMA_Theme_Manager']->getHtmlSelectBox();    echo '</li>';}echo '<li id="li_select_fontsize">';echo PMA_Config::getFontsizeForm();echo '</li>';echo '</ul>';// User preferencesif ($server > 0) {    echo '<ul>';    echo PMA_printListItem(        __('More settings'),        'li_user_preferences',        './prefs_manage.php?' . $common_url_query    );    echo '</ul>';}echo '</div>';echo '</div>';echo '<div id="main_pane_right">';if ($server > 0 && $GLOBALS['cfg']['ShowServerInfo']) {    echo '<div class="group">';    echo '<h2>' . __('Database server') . '</h2>';    echo '<ul>' . "\n";    PMA_printListItem(__('Server') . ': ' . $server_info, 'li_server_info');    PMA_printListItem(__('Software') . ': ' . PMA_getServerType(), 'li_server_type');    PMA_printListItem(__('Software version') . ': ' . PMA_MYSQL_STR_VERSION . ' - ' . PMA_MYSQL_VERSION_COMMENT, 'li_server_version');    PMA_printListItem(        __('Protocol version') . ': ' . PMA_DBI_get_proto_info(),        'li_mysql_proto'    );    PMA_printListItem(        __('User') . ': ' . htmlspecialchars($mysql_cur_user_and_host),        'li_user_info'    );    echo '    <li id="li_select_mysql_charset">';    echo '        ' . __('Server charset') . ': '       . '        <span xml:lang="en" dir="ltr">'       . '           ' . $mysql_charsets_descriptions[$mysql_charset_map['utf-8']] . "\n"       . '           (' . $mysql_charset_map['utf-8'] . ')' . "\n"       . '        </span>' . "\n"       . '    </li>' . "\n";    echo '  </ul>';    echo ' </div>';}if ($GLOBALS['cfg']['ShowServerInfo'] || $GLOBALS['cfg']['ShowPhpInfo']) {    echo '<div class="group">';    echo '<h2>' . __('Web server') . '</h2>';    echo '<ul>';    if ($GLOBALS['cfg']['ShowServerInfo']) {        PMA_printListItem($_SERVER['SERVER_SOFTWARE'], 'li_web_server_software');        if ($server > 0) {            $client_version_str = PMA_DBI_get_client_info();            if (preg_match('#\d+\.\d+\.\d+#', $client_version_str)                && in_array($GLOBALS['cfg']['Server']['extension'], array('mysql', 'mysqli'))            ) {                $client_version_str = 'libmysql - ' . $client_version_str;            }            PMA_printListItem(                __('Database client version') . ': ' . $client_version_str,                'li_mysql_client_version'            );            PMA_printListItem(                __('PHP extension') . ': ' . $GLOBALS['cfg']['Server']['extension']. ' '                    . PMA_showPHPDocu('book.' . $GLOBALS['cfg']['Server']['extension'] . '.php'),                'li_used_php_extension'            );        }    }    if ($cfg['ShowPhpInfo']) {        PMA_printListItem(__('Show PHP information'), 'li_phpinfo', './phpinfo.php?' . $common_url_query);    }    echo '  </ul>';    echo ' </div>';}echo '<div class="group pmagroup">';echo '<h2>phpMyAdmin</h2>';echo '<ul>';$class = null;// workaround for bug 3302733; some browsers don't like the situation// where phpMyAdmin is called on a secure page but a part of the page// (the version check) refers to a non-secure pageif ($GLOBALS['cfg']['VersionCheck'] && ! $GLOBALS['PMA_Config']->get('is_https')) {    $class = 'jsversioncheck';}PMA_printListItem(__('Version information') . ': ' . PMA_VERSION, 'li_pma_version', null, null, null, null, $class);PMA_printListItem(__('Documentation'), 'li_pma_docs', 'Documentation.html', null, '_blank');PMA_printListItem(__('Wiki'), 'li_pma_wiki', PMA_linkURL('http://wiki.phpmyadmin.net/'), null, '_blank');// does not work if no target specified, don't know whyPMA_printListItem(__('Official Homepage'), 'li_pma_homepage', PMA_linkURL('http://www.phpMyAdmin.net/'), null, '_blank');PMA_printListItem(__('Contribute'), 'li_pma_contribute', PMA_linkURL('http://www.phpmyadmin.net/home_page/improve.php'), null, '_blank');PMA_printListItem(__('Get support'), 'li_pma_support', PMA_linkURL('http://www.phpmyadmin.net/home_page/support.php'), null, '_blank');PMA_printListItem(__('List of changes'), 'li_pma_changes', PMA_linkURL('changelog.php'), null, '_blank');?>    </ul> </div></div><?php/** * BUG: MSIE needs two <br /> here, otherwise it will not extend the outer div to the * full height of the inner divs */?><br class="clearfloat" /><br class="clearfloat" /></div><?php/** * Warning if using the default MySQL privileged account */if ($server != 0 && $cfg['Server']['user'] == 'root' && $cfg['Server']['password'] == '') {    trigger_error(__('Your configuration file contains settings (root with no password) that correspond to the default MySQL privileged account. Your MySQL server is running with this default, is open to intrusion, and you really should fix this security hole by setting a password for user \'root\'.'), E_USER_WARNING);}/** * Nijel: As we try to handle charsets by ourself, mbstring overloads just * break it, see bug 1063821. */if (@extension_loaded('mbstring') && @ini_get('mbstring.func_overload') > 1) {    trigger_error(__('You have enabled mbstring.func_overload in your PHP configuration. This option is incompatible with phpMyAdmin and might cause some data to be corrupted!'), E_USER_WARNING);}/** * Nijel: mbstring is used for handling multibyte inside parser, so it is good * to tell user something might be broken without it, see bug #1063149. */if (! @extension_loaded('mbstring')) {    trigger_error(__('The mbstring PHP extension was not found and you seem to be using a multibyte charset. Without the mbstring extension phpMyAdmin is unable to split strings correctly and it may result in unexpected results.'), E_USER_WARNING);}/** * Check whether session.gc_maxlifetime limits session validity. */$gc_time = (int)@ini_get('session.gc_maxlifetime');if ($gc_time < $GLOBALS['cfg']['LoginCookieValidity'] ) {    trigger_error(PMA_Message::decodeBB(__('Your PHP parameter [a@http://php.net/manual/en/session.configuration.php#ini.session.gc-maxlifetime@]session.gc_maxlifetime[/a] is lower that cookie validity configured in phpMyAdmin, because of this, your login will expire sooner than configured in phpMyAdmin.')), E_USER_WARNING);}/** * Check whether LoginCookieValidity is limited by LoginCookieStore. */if ($GLOBALS['cfg']['LoginCookieStore'] != 0 && $GLOBALS['cfg']['LoginCookieStore'] < $GLOBALS['cfg']['LoginCookieValidity']) {    trigger_error(PMA_Message::decodeBB(__('Login cookie store is lower than cookie validity configured in phpMyAdmin, because of this, your login will expire sooner than configured in phpMyAdmin.')), E_USER_WARNING);}/** * Check if user does not have defined blowfish secret and it is being used. */if (!empty($_SESSION['auto_blowfish_secret']) &&        empty($GLOBALS['cfg']['blowfish_secret'])) {    trigger_error(__('The configuration file now needs a secret passphrase (blowfish_secret).'), E_USER_WARNING);}/** * Check for existence of config directory which should not exist in * production environment. */if (file_exists('./config')) {    trigger_error(__('Directory [code]config[/code], which is used by the setup script, still exists in your phpMyAdmin directory. You should remove it once phpMyAdmin has been configured.'), E_USER_WARNING);}if ($server > 0) {    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['allworks'] && $cfg['PmaNoRelation_DisableWarning'] == false) {        $message = PMA_Message::notice(__('The phpMyAdmin configuration storage is not completely configured, some extended features have been deactivated. To find out why click %shere%s.'));        $message->addParam('<a href="' . $cfg['PmaAbsoluteUri'] . 'chk_rel.php?' . $common_url_query . '">', false);        $message->addParam('</a>', false);        /* Show error if user has configured something, notice elsewhere */        if (!empty($cfg['Servers'][$server]['pmadb'])) {            $message->isError(true);        }        $message->display();    } // end if}/** * Show notice when javascript support is missing. */echo '<noscript>';$message = PMA_Message::notice(__('Javascript support is missing or disabled in your browser, some phpMyAdmin functionality will be missing. For example navigation frame will not refresh automatically.'));$message->isError(true);$message->display();echo '</noscript>';/** * Warning about different MySQL library and server version * (a difference on the third digit does not count). * If someday there is a constant that we can check about mysqlnd, we can use it instead * of strpos(). * If no default server is set, PMA_DBI_get_client_info() is not defined yet. * Drizzle can speak MySQL protocol, so don't warn about version mismatch for Drizzle servers. */if (function_exists('PMA_DBI_get_client_info') && !PMA_DRIZZLE) {    $_client_info = PMA_DBI_get_client_info();    if ($server > 0 && strpos($_client_info, 'mysqlnd') === false && substr(PMA_MYSQL_CLIENT_API, 0, 3) != substr(PMA_MYSQL_INT_VERSION, 0, 3)) {        trigger_error(            PMA_sanitize(                sprintf(                    __('Your PHP MySQL library version %s differs from your MySQL server version %s. This may cause unpredictable behavior.'),                    $_client_info,                    substr(                        PMA_MYSQL_STR_VERSION,                        0,                        strpos(PMA_MYSQL_STR_VERSION . '-', '-')                    )                )            ),            E_USER_NOTICE        );    }    unset($_client_info);}/** * Warning about Suhosin */if ($cfg['SuhosinDisableWarning'] == false    && @ini_get('suhosin.request.max_value_length')) {    trigger_error(        PMA_sanitize(            sprintf(                __('Server running with Suhosin. Please refer to %sdocumentation%s for possible issues.'),                '[a@./Documentation.html#faq1_38@_blank]',                '[/a]'            )        ),        E_USER_WARNING    );}/** * Warning about mcrypt. */if (!function_exists('mcrypt_encrypt') && !$GLOBALS['cfg']['McryptDisableWarning']) {    PMA_warnMissingExtension('mcrypt');}/** * Warning about incomplete translations. * * The data file is created while creating release by ./scripts/remove-incomplete-mo */if (file_exists('./libraries/language_stats.inc.php')) {    include './libraries/language_stats.inc.php';    /*     * This message is intentionally not translated, because we're     * handling incomplete translations here and focus on english     * speaking users.     */    if (isset($GLOBALS['language_stats'][$lang]) && $GLOBALS['language_stats'][$lang] < $cfg['TranslationWarningThreshold']) {        trigger_error('You are using an incomplete translation, please help to make it better by <a href="http://www.phpmyadmin.net/home_page/improve.php#translate" target="_blank">contributing</a>.', E_USER_NOTICE);    }}/** * prints list item for main page * * @param string  $name   displayed text * @param string  $id     id, used for css styles * @param string  $url    make item as link with $url as target * @param string  $mysql_help_page  display a link to MySQL's manual * @param string  $target special target for $url * @param string  $a_id   id for the anchor, used for jQuery to hook in functions * @param string  $class  class for the li element * @param string  $a_class  class for the anchor element */function PMA_printListItem($name, $id = null, $url = null, $mysql_help_page = null, $target = null, $a_id = null, $class = null, $a_class = null){    echo '<li id="' . $id . '"';    if (null !== $class) {        echo ' class="' . $class . '"';    }    echo '>';    if (null !== $url) {        echo '<a href="' . $url . '"';        if (null !== $target) {           echo ' target="' . $target . '"';        }        if (null != $a_id) {            echo ' id="' . $a_id .'"';        }        if (null != $a_class) {            echo ' class="' . $a_class .'"';        }        echo '>';    }    echo $name;    if (null !== $url) {        echo '</a>' . "\n";    }    if (null !== $mysql_help_page) {        echo PMA_showMySQLDocu('', $mysql_help_page);    }    echo '</li>';}/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (! PMA_cacheExists('mysql_charsets', true)) {    $sql = PMA_DRIZZLE        ? 'SELECT * FROM data_dictionary.CHARACTER_SETS'        : 'SELECT * FROM information_schema.CHARACTER_SETS';    $res = PMA_DBI_query($sql);    $mysql_charsets = array();    while ($row = PMA_DBI_fetch_assoc($res)) {        $mysql_charsets[] = $row['CHARACTER_SET_NAME'];        // never used        //$mysql_charsets_maxlen[$row['Charset']] = $row['Maxlen'];        $mysql_charsets_descriptions[$row['CHARACTER_SET_NAME']] = $row['DESCRIPTION'];    }    PMA_DBI_free_result($res);    sort($mysql_charsets, SORT_STRING);    $mysql_collations = array_flip($mysql_charsets);    $mysql_default_collations = $mysql_collations_flat = $mysql_charsets_available = $mysql_collations_available = array();    $sql = PMA_DRIZZLE        ? 'SELECT * FROM data_dictionary.COLLATIONS'        : 'SELECT * FROM information_schema.COLLATIONS';    $res = PMA_DBI_query($sql);    while ($row = PMA_DBI_fetch_assoc($res)) {        if (! is_array($mysql_collations[$row['CHARACTER_SET_NAME']])) {            $mysql_collations[$row['CHARACTER_SET_NAME']] = array($row['COLLATION_NAME']);        } else {            $mysql_collations[$row['CHARACTER_SET_NAME']][] = $row['COLLATION_NAME'];        }        $mysql_collations_flat[] = $row['COLLATION_NAME'];        if ($row['IS_DEFAULT'] == 'Yes' || $row['IS_DEFAULT'] == '1') {            $mysql_default_collations[$row['CHARACTER_SET_NAME']] = $row['COLLATION_NAME'];        }        //$mysql_collations_available[$row['Collation']] = ! isset($row['Compiled']) || $row['Compiled'] == 'Yes';        $mysql_collations_available[$row['COLLATION_NAME']] = true;        $mysql_charsets_available[$row['CHARACTER_SET_NAME']]            = !empty($mysql_charsets_available[$row['CHARACTER_SET_NAME']])            || !empty($mysql_collations_available[$row['COLLATION_NAME']]);    }    PMA_DBI_free_result($res);    unset($res, $row);    if (PMA_DRIZZLE && isset($mysql_collations['utf8_general_ci']) && isset($mysql_collations['utf8'])) {        $mysql_collations['utf8'] = $mysql_collations['utf8_general_ci'];        $mysql_default_collations['utf8'] = $mysql_default_collations['utf8_general_ci'];        $mysql_charsets_available['utf8'] = $mysql_charsets_available['utf8_general_ci'];        unset($mysql_collations['utf8_general_ci'], $mysql_default_collations['utf8_general_ci'],            $mysql_charsets_available['utf8_general_ci']);    }    sort($mysql_collations_flat, SORT_STRING);    foreach ($mysql_collations AS $key => $value) {        sort($mysql_collations[$key], SORT_STRING);        reset($mysql_collations[$key]);    }    unset($key, $value);    PMA_cacheSet('mysql_charsets', $GLOBALS['mysql_charsets'], true);    PMA_cacheSet('mysql_charsets_descriptions', $GLOBALS['mysql_charsets_descriptions'], true);    PMA_cacheSet('mysql_charsets_available', $GLOBALS['mysql_charsets_available'], true);    PMA_cacheSet('mysql_collations', $GLOBALS['mysql_collations'], true);    PMA_cacheSet('mysql_default_collations', $GLOBALS['mysql_default_collations'], true);    PMA_cacheSet('mysql_collations_flat', $GLOBALS['mysql_collations_flat'], true);    PMA_cacheSet('mysql_collations_available', $GLOBALS['mysql_collations_available'], true);} else {    $GLOBALS['mysql_charsets']                  = PMA_cacheGet('mysql_charsets', true);    $GLOBALS['mysql_charsets_descriptions']     = PMA_cacheGet('mysql_charsets_descriptions', true);    $GLOBALS['mysql_charsets_available']        = PMA_cacheGet('mysql_charsets_available', true);    $GLOBALS['mysql_collations']                = PMA_cacheGet('mysql_collations', true);    $GLOBALS['mysql_default_collations']        = PMA_cacheGet('mysql_default_collations', true);    $GLOBALS['mysql_collations_flat']           = PMA_cacheGet('mysql_collations_flat', true);    $GLOBALS['mysql_collations_available']      = PMA_cacheGet('mysql_collations_available', true);}define('PMA_CSDROPDOWN_COLLATION', 0);define('PMA_CSDROPDOWN_CHARSET',   1);function PMA_generateCharsetDropdownBox($type = PMA_CSDROPDOWN_COLLATION,    $name = null, $id = null, $default = null, $label = true, $indent = 0,    $submitOnChange = false, $displayUnavailable = false){    global $mysql_charsets, $mysql_charsets_descriptions,        $mysql_charsets_available, $mysql_collations, $mysql_collations_available;    if (empty($name)) {        if ($type == PMA_CSDROPDOWN_COLLATION) {            $name = 'collation';        } else {            $name = 'character_set';        }    }    $return_str  = '<select xml:lang="en" dir="ltr" name="'        . htmlspecialchars($name) . '"'        . (empty($id) ? '' : ' id="' . htmlspecialchars($id) . '"')        . ($submitOnChange ? ' class="autosubmit"' : '') . '>' . "\n";    if ($label) {        $return_str .= '<option value="">'            . ($type == PMA_CSDROPDOWN_COLLATION ? __('Collation') : __('Charset'))            . '</option>' . "\n";    }    $return_str .= '<option value=""></option>' . "\n";    foreach ($mysql_charsets as $current_charset) {        if (!$mysql_charsets_available[$current_charset]) {            continue;        }        $current_cs_descr            = empty($mysql_charsets_descriptions[$current_charset])            ? $current_charset            : $mysql_charsets_descriptions[$current_charset];        if ($type == PMA_CSDROPDOWN_COLLATION) {            $return_str .= '<optgroup label="' . $current_charset                . '" title="' . $current_cs_descr . '">' . "\n";            foreach ($mysql_collations[$current_charset] as $current_collation) {                if (!$mysql_collations_available[$current_collation]) {                    continue;                }                $return_str .= '<option value="' . $current_collation                    . '" title="' . PMA_getCollationDescr($current_collation) . '"'                    . ($default == $current_collation ? ' selected="selected"' : '') . '>'                    . $current_collation . '</option>' . "\n";            }            $return_str .= '</optgroup>' . "\n";        } else {            $return_str .= '<option value="' . $current_charset                . '" title="' . $current_cs_descr . '"'                . ($default == $current_charset ? ' selected="selected"' : '') . '>'                . $current_charset . '</option>' . "\n";        }    }    $return_str .= '</select>' . "\n";    return $return_str;}function PMA_generateCharsetQueryPart($collation){    if (!PMA_DRIZZLE) {        list($charset) = explode('_', $collation);        return ' CHARACTER SET ' . $charset . ($charset == $collation ? '' : ' COLLATE ' . $collation);    } else {        return ' COLLATE ' . $collation;    }}/** * returns collation of given db * * @param string  $db     name of db * @return  string  collation of $db */function PMA_getDbCollation($db){    if (PMA_is_system_schema($db)) {        // We don't have to check the collation of the virtual        // information_schema database: We know it!        return 'utf8_general_ci';    }    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        // this is slow with thousands of databases        $sql = PMA_DRIZZLE            ? 'SELECT DEFAULT_COLLATION_NAME FROM data_dictionary.SCHEMAS WHERE SCHEMA_NAME = \'' . PMA_sqlAddSlashes($db) . '\' LIMIT 1'            : 'SELECT DEFAULT_COLLATION_NAME FROM information_schema.SCHEMATA WHERE SCHEMA_NAME = \'' . PMA_sqlAddSlashes($db) . '\' LIMIT 1';        return PMA_DBI_fetch_value($sql);    } else {        PMA_DBI_select_db($db);        $return = PMA_DBI_fetch_value('SHOW VARIABLES LIKE \'collation_database\'', 0, 1);        if ($db !== $GLOBALS['db']) {            PMA_DBI_select_db($GLOBALS['db']);        }        return $return;    }}/** * returns default server collation from show variables * * @return  string  $server_collation */function PMA_getServerCollation(){    return PMA_DBI_fetch_value(        'SHOW VARIABLES LIKE \'collation_server\'', 0, 1);}/** * returns description for given collation * * * @param string  $collation  MySQL collation string * @return  string  collation description */function PMA_getCollationDescr($collation){    if ($collation == 'binary') {        return __('Binary');    }    $parts = explode('_', $collation);    if (count($parts) == 1) {        $parts[1] = 'general';    } elseif ($parts[1] == 'ci' || $parts[1] == 'cs') {        $parts[2] = $parts[1];        $parts[1] = 'general';    }    $descr = '';    switch ($parts[1]) {    case 'bulgarian':        $descr = __('Bulgarian');        break;    case 'chinese':        if ($parts[0] == 'gb2312' || $parts[0] == 'gbk') {            $descr = __('Simplified Chinese');        } elseif ($parts[0] == 'big5') {            $descr = __('Traditional Chinese');        }        break;    case 'ci':        $descr = __('case-insensitive');        break;    case 'cs':        $descr = __('case-sensitive');        break;    case 'croatian':        $descr = __('Croatian');        break;    case 'czech':        $descr = __('Czech');        break;    case 'danish':        $descr = __('Danish');        break;    case 'english':        $descr = __('English');        break;    case 'esperanto':        $descr = __('Esperanto');        break;    case 'estonian':        $descr = __('Estonian');        break;    case 'german1':        $descr = __('German') . ' (' . __('dictionary') . ')';        break;    case 'german2':        $descr = __('German') . ' (' . __('phone book') . ')';        break;    case 'hungarian':        $descr = __('Hungarian');        break;    case 'icelandic':        $descr = __('Icelandic');        break;    case 'japanese':        $descr = __('Japanese');        break;    case 'latvian':        $descr = __('Latvian');        break;    case 'lithuanian':        $descr = __('Lithuanian');        break;    case 'korean':        $descr = __('Korean');        break;    case 'persian':        $descr = __('Persian');        break;    case 'polish':        $descr = __('Polish');        break;    case 'roman':        $descr = __('West European');        break;    case 'romanian':        $descr = __('Romanian');        break;    case 'slovak':        $descr = __('Slovak');        break;    case 'slovenian':        $descr = __('Slovenian');        break;    case 'spanish':        $descr = __('Spanish');        break;    case 'spanish2':        $descr = __('Traditional Spanish');        break;    case 'swedish':        $descr = __('Swedish');        break;    case 'thai':        $descr = __('Thai');        break;    case 'turkish':        $descr = __('Turkish');        break;    case 'ukrainian':        $descr = __('Ukrainian');        break;    case 'unicode':        $descr = __('Unicode') . ' (' . __('multilingual') . ')';        break;    case 'bin':        $is_bin = true;    case 'general':        switch ($parts[0]) {        // Unicode charsets        case 'ucs2':        case 'utf8':            $descr = __('Unicode') . ' (' . __('multilingual') . ')';            break;        // West European charsets        case 'ascii':        case 'cp850':        case 'dec8':        case 'hp8':        case 'latin1':        case 'macroman':            $descr = __('West European') . ' (' . __('multilingual') . ')';            break;        // Central European charsets        case 'cp1250':        case 'cp852':        case 'latin2':        case 'macce':            $descr = __('Central European') . ' (' . __('multilingual') . ')';            break;        // Russian charsets        case 'cp866':        case 'koi8r':            $descr = __('Russian');            break;        // Simplified Chinese charsets        case 'gb2312':        case 'gbk':            $descr = __('Simplified Chinese');            break;        // Japanese charsets        case 'sjis':        case 'ujis':        case 'cp932':        case 'eucjpms':            $descr = __('Japanese');            break;        // Baltic charsets        case 'cp1257':        case 'latin7':            $descr = __('Baltic') . ' (' . __('multilingual') . ')';            break;        // Other        case 'armscii8':        case 'armscii':            $descr = __('Armenian');            break;        case 'big5':            $descr = __('Traditional Chinese');            break;        case 'cp1251':            $descr = __('Cyrillic') . ' (' . __('multilingual') . ')';            break;        case 'cp1256':            $descr = __('Arabic');            break;        case 'euckr':            $descr = __('Korean');            break;        case 'hebrew':            $descr = __('Hebrew');            break;        case 'geostd8':            $descr = __('Georgian');            break;        case 'greek':            $descr = __('Greek');            break;        case 'keybcs2':            $descr = __('Czech-Slovak');            break;        case 'koi8u':            $descr = __('Ukrainian');            break;        case 'latin5':            $descr = __('Turkish');            break;        case 'swe7':            $descr = __('Swedish');            break;        case 'tis620':            $descr = __('Thai');            break;        default:            $descr = __('unknown');            break;        }        if (!empty($is_bin)) {            $descr .= ', ' . __('Binary');        }        break;    default: $descr = __('unknown');    }    if (!empty($parts[2])) {        if ($parts[2] == 'ci') {            $descr .= ', ' . __('case-insensitive');        } elseif ($parts[2] == 'cs') {            $descr .= ', ' . __('case-sensitive');        }    }    return $descr;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require_once './libraries/server_common.inc.php';require_once './libraries/sql_query_form.lib.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm();/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin *//** * Get some core libraries */require_once './libraries/common.inc.php';$action = 'tbl_create.php';require_once './libraries/header.inc.php';$titles = PMA_buildActionTitles();// Check parametersPMA_checkParameters(array('db'));/* Check if database name is empty */if (strlen($db) == 0) {    PMA_mysqlDie(__('The database name is empty!'), '', '', 'main.php');}/** * Defines the url to return to in case of error in a sql statement */if (PMA_DBI_get_columns($db, $table)) {    // table exists already    PMA_mysqlDie(        sprintf(__('Table %s already exists!'), htmlspecialchars($table)),        '',        '',        'db_structure.php?' . PMA_generate_common_url($db)    );}$err_url = 'tbl_create.php?' . PMA_generate_common_url($db, $table);// check number of fields to be createdif (isset($_REQUEST['submit_num_fields'])) {    $regenerate = true; // for libraries/tbl_properties.inc.php    $num_fields = $_REQUEST['orig_num_fields'] + $_REQUEST['added_fields'];} elseif (isset($_REQUEST['num_fields']) && intval($_REQUEST['num_fields']) > 0) {    $num_fields = (int) $_REQUEST['num_fields'];} else {    $num_fields = 4;}/** * Selects the database to work with */if (!PMA_DBI_select_db($db)) {    PMA_mysqlDie(        sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($db)),        '',        '',        'main.php'    );}/** * The form used to define the structure of the table has been submitted */if (isset($_REQUEST['do_save_data'])) {    $sql_query = '';    // Transforms the radio button field_key into 3 arrays    $field_cnt = count($_REQUEST['field_name']);    for ($i = 0; $i < $field_cnt; ++$i) {        if (isset($_REQUEST['field_key'][$i])) {            if ($_REQUEST['field_key'][$i] == 'primary_' . $i) {                $field_primary[] = $i;            }            if ($_REQUEST['field_key'][$i] == 'index_' . $i) {                $field_index[]   = $i;            }            if ($_REQUEST['field_key'][$i] == 'unique_' . $i) {                $field_unique[]  = $i;            }        } // end if    } // end for    // Builds the fields creation statements    for ($i = 0; $i < $field_cnt; $i++) {        // '0' is also empty for php :-(        if (empty($_REQUEST['field_name'][$i]) && $_REQUEST['field_name'][$i] != '0') {            continue;        }        $query = PMA_Table::generateFieldSpec(            $_REQUEST['field_name'][$i],            $_REQUEST['field_type'][$i],            $_REQUEST['field_length'][$i],            $_REQUEST['field_attribute'][$i],            isset($_REQUEST['field_collation'][$i])                ? $_REQUEST['field_collation'][$i]                : '',            isset($_REQUEST['field_null'][$i])                ? $_REQUEST['field_null'][$i]                : 'NOT NULL',            $_REQUEST['field_default_type'][$i],            $_REQUEST['field_default_value'][$i],            isset($_REQUEST['field_extra'][$i])                ? $_REQUEST['field_extra'][$i]                : false,            isset($_REQUEST['field_comments'][$i])                ? $_REQUEST['field_comments'][$i]                : '',            $field_primary,            $i        );        $query .= ', ';        $sql_query .= $query;    } // end for    unset($field_cnt, $query);    $sql_query = preg_replace('@, $@', '', $sql_query);    // Builds the primary keys statements    $primary     = '';    $primary_cnt = (isset($field_primary) ? count($field_primary) : 0);    for ($i = 0; $i < $primary_cnt; $i++) {        $j = $field_primary[$i];        if (isset($_REQUEST['field_name'][$j]) && strlen($_REQUEST['field_name'][$j])) {            $primary .= PMA_backquote($_REQUEST['field_name'][$j]) . ', ';        }    } // end for    unset($primary_cnt);    $primary = preg_replace('@, $@', '', $primary);    if (strlen($primary)) {        $sql_query .= ', PRIMARY KEY (' . $primary . ')';    }    unset($primary);    // Builds the indexes statements    $index     = '';    $index_cnt = (isset($field_index) ? count($field_index) : 0);    for ($i = 0;$i < $index_cnt; $i++) {        $j = $field_index[$i];        if (isset($_REQUEST['field_name'][$j]) && strlen($_REQUEST['field_name'][$j])) {            $index .= PMA_backquote($_REQUEST['field_name'][$j]) . ', ';        }    } // end for    unset($index_cnt);    $index = preg_replace('@, $@', '', $index);    if (strlen($index)) {        $sql_query .= ', INDEX (' . $index . ')';    }    unset($index);    // Builds the uniques statements    $unique     = '';    $unique_cnt = (isset($field_unique) ? count($field_unique) : 0);    for ($i = 0; $i < $unique_cnt; $i++) {        $j = $field_unique[$i];        if (isset($_REQUEST['field_name'][$j]) && strlen($_REQUEST['field_name'][$j])) {           $unique .= PMA_backquote($_REQUEST['field_name'][$j]) . ', ';        }    } // end for    unset($unique_cnt);    $unique = preg_replace('@, $@', '', $unique);    if (strlen($unique)) {        $sql_query .= ', UNIQUE (' . $unique . ')';    }    unset($unique);    // Builds the FULLTEXT statements    $fulltext     = '';    $fulltext_cnt = (isset($field_fulltext) ? count($field_fulltext) : 0);    for ($i = 0; $i < $fulltext_cnt; $i++) {        $j = $field_fulltext[$i];        if (isset($_REQUEST['field_name'][$j]) && strlen($_REQUEST['field_name'][$j])) {           $fulltext .= PMA_backquote($_REQUEST['field_name'][$j]) . ', ';        }    } // end for    $fulltext = preg_replace('@, $@', '', $fulltext);    if (strlen($fulltext)) {        $sql_query .= ', FULLTEXT (' . $fulltext . ')';    }    unset($fulltext);    // Builds the 'create table' statement    $sql_query = 'CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table)     . ' (' . $sql_query . ')';    // Adds table type, character set, comments and partition definition    if (!empty($_REQUEST['tbl_type']) && ($_REQUEST['tbl_type'] != 'Default')) {        $sql_query .= ' ENGINE = ' . $_REQUEST['tbl_type'];    }    if (!empty($_REQUEST['tbl_collation'])) {        $sql_query .= PMA_generateCharsetQueryPart($_REQUEST['tbl_collation']);    }    if (!empty($_REQUEST['comment'])) {        $sql_query .= ' COMMENT = \'' . PMA_sqlAddSlashes($_REQUEST['comment']) . '\'';    }    if (!empty($_REQUEST['partition_definition'])) {        $sql_query .= ' ' . PMA_sqlAddSlashes($_REQUEST['partition_definition']);    }    $sql_query .= ';';    // Executes the query    $result = PMA_DBI_try_query($sql_query);    if ($result) {        // If comments were sent, enable relation stuff        include_once './libraries/transformations.lib.php';        // Update comment table for mime types [MIME]        if (isset($_REQUEST['field_mimetype'])         && is_array($_REQUEST['field_mimetype'])         && $cfg['BrowseMIME']) {            foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {                if (isset($_REQUEST['field_name'][$fieldindex])                 && strlen($_REQUEST['field_name'][$fieldindex])) {                    PMA_setMIME(                        $db, $table, $_REQUEST['field_name'][$fieldindex], $mimetype,                        $_REQUEST['field_transformation'][$fieldindex],                        $_REQUEST['field_transformation_options'][$fieldindex]                    );                }            }        }        $message = PMA_Message::success(__('Table %1$s has been created.'));        $message->addParam(PMA_backquote($db) . '.' . PMA_backquote($table));        if ($GLOBALS['is_ajax_request'] == true) {            /**             * construct the html for the newly created table's row to be appended             * to the list of tables.             *             * Logic taken from db_structure.php             */            $tbl_url_params = array();            $tbl_url_params['db'] = $db;            $tbl_url_params['table'] = $table;            $is_show_stats = $cfg['ShowStats'];            $tbl_stats_result = PMA_DBI_query('SHOW TABLE STATUS FROM '                    . PMA_backquote($db) . ' LIKE \'' . PMA_sqlAddSlashes($table, true) . '\';');            $tbl_stats = PMA_DBI_fetch_assoc($tbl_stats_result);            PMA_DBI_free_result($tbl_stats_result);            unset($tbl_stats_result);            if ($is_show_stats) {                $sum_size       = (double) 0;                $overhead_size  = (double) 0;                $overhead_check = '';                $tblsize                    =  doubleval($tbl_stats['Data_length']) + doubleval($tbl_stats['Index_length']);                $sum_size                   += $tblsize;                list($formatted_size, $unit) =  PMA_formatByteDown($tblsize, 3, ($tblsize > 0) ? 1 : 0);                if (isset($tbl_stats['Data_free']) && $tbl_stats['Data_free'] > 0) {                    list($formatted_overhead, $overhead_unit)     = PMA_formatByteDown($tbl_stats['Data_free'], 3, ($tbl_stats['Data_free'] > 0) ? 1 : 0);                    $overhead_size           += $tbl_stats['Data_free'];                }                if (isset($formatted_overhead)) {                        $overhead = '<span>' . $formatted_overhead . '</span> <span class="unit">' . $overhead_unit . '</span>';                        unset($formatted_overhead);                    } else {                        $overhead = '-';                }           }            $new_table_string = '<tr>' . "\n";            $new_table_string .= '<td align="center"> <input type="checkbox" id="checkbox_tbl_" name="selected_tbl[]" value="'.htmlspecialchars($table).'" /> </td>' . "\n";            $new_table_string .= '<th>';            $new_table_string .= '<a href="sql.php' . PMA_generate_common_url($tbl_url_params) . '">'. $table . '</a>';            if (PMA_Tracker::isActive()) {                $truename = str_replace(' ', '&nbsp;', htmlspecialchars($table));                if (PMA_Tracker::isTracked($db, $truename)) {                    $new_table_string .= '<a href="tbl_tracking.php' . PMA_generate_common_url($tbl_url_params) . '">';                    $new_table_string .= PMA_getImage('eye.png', __('Tracking is active.'));                } elseif (PMA_Tracker::getVersion($db, $truename) > 0) {                    $new_table_string .= '<a href="tbl_tracking.php' . PMA_generate_common_url($tbl_url_params) . '">';                    $new_table_string .= PMA_getImage('eye_grey.png', __('Tracking is not active.'));                }                unset($truename);            }            $new_table_string .= '</th>' . "\n";            $new_table_string .= '<td>' . $titles['NoBrowse'] . '</td>' . "\n";            $new_table_string .= '<td><a href="tbl_structure.php' . PMA_generate_common_url($tbl_url_params) . '">' . $titles['Structure'] . '</a></td>' . "\n";            $new_table_string .= '<td>' . $titles['NoSearch'] . '</td>' . "\n";            $new_table_string .= '<td><a href="tbl_change.php' . PMA_generate_common_url($tbl_url_params) . '">' . $titles['Insert'] . '</a></td>' . "\n";            $new_table_string .= '<td>' . $titles['NoEmpty'] . '</td>' . "\n";            $new_table_string .= '<td><a class="drop_table_anchor" href="sql.php' . PMA_generate_common_url($tbl_url_params) . '&amp;sql_query=';            $new_table_string .= urlencode('DROP TABLE ' . PMA_backquote($table));            $new_table_string .= '">';            $new_table_string .= $titles['Drop'];            $new_table_string .= '</a></td>' . "\n";            $new_table_string .= '<td class="value">' . $tbl_stats['Rows'] . '</td>' . "\n";            $new_table_string .= '<td nowrap="nowrap">' . $tbl_stats['Engine'] . '</td>' . "\n";            $new_table_string .= '<td> <dfn title="' . PMA_getCollationDescr($tbl_stats['Collation']) . '">'. $tbl_stats['Collation'] .'</dfn></td>' . "\n";            if ($is_show_stats) {                $new_table_string .= '<td class="value tbl_size"> <a href="tbl_structure.php' . PMA_generate_common_url($tbl_url_params) . '#showusage" ><span>' . $formatted_size . '</span> <span class="unit">' . $unit . '</class></a> </td>' . "\n" ;                $new_table_string .= '<td class="value tbl_overhead">' . $overhead . '</td>' . "\n" ;            }            $new_table_string .= '</tr>' . "\n";            $extra_data['new_table_string'] = $new_table_string;            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $display_query = $sql_query;        $sql_query = '';        // read table info on this newly created table, in case        // the next page is Structure        $reread_info = true;        include './libraries/tbl_info.inc.php';        // do not switch to sql.php - as there is no row to be displayed on a new table        if ($cfg['DefaultTabTable'] === 'sql.php') {            include './tbl_structure.php';        } else {            include './' . $cfg['DefaultTabTable'];        }        exit;    } else {        if ($GLOBALS['is_ajax_request'] == true) {            PMA_ajaxResponse(PMA_DBI_getError(), false);        } else {            PMA_mysqlDie('', '', '', $err_url, false);            // An error happened while inserting/updating a table definition.            // to prevent total loss of that data, we embed the form once again.            // The variable $regenerate will be used to restore data in libraries/tbl_properties.inc.php            $num_fields = $_REQUEST['orig_num_fields'];            $regenerate = true;        }    }} // end do create table/** * Displays the form used to define the structure of the table */// This div is used to show the content(eg: create table form with more columns) fetched with AJAX subsequently.if ($GLOBALS['is_ajax_request'] != true) {    echo('<div id="create_table_div">');}require './libraries/tbl_properties.inc.php';// Displays the footerrequire './libraries/footer.inc.php';if ($GLOBALS['is_ajax_request'] != true) {    echo('</div>');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Database with allowed values for configuration stored in the $cfg array, * used by setup script and user preferences to generate forms. * * @package PhpMyAdmin */if (!defined('PHPMYADMIN')) {    exit;}/** * Value meaning: * o array - select field, array contains allowed values * o string - type override * * Use normal array, paths won't be expanded */$cfg_db = array();$cfg_db['Servers'] = array(1 => array(    'port'         => 'integer',    'connect_type' => array('tcp', 'socket'),    'extension'    => array('mysql', 'mysqli'),    'auth_type'    => array('config', 'http', 'signon', 'cookie'),    'AllowDeny'    => array(        'order'    => array('', 'deny,allow', 'allow,deny', 'explicit')),    'only_db'      => 'array'));$cfg_db['RecodingEngine'] = array('auto', 'iconv', 'recode', 'none');$cfg_db['OBGzip'] = array('auto', true, false);$cfg_db['MemoryLimit'] = 'short_string';$cfg_db['ShowTooltipAliasTB'] = array('nested', true, false);$cfg_db['DisplayDatabasesList'] = array('auto', true, false);$cfg_db['LeftLogoLinkWindow'] = array('main', 'new');$cfg_db['LeftDefaultTabTable'] = array(    'tbl_structure.php', // fields list    'tbl_sql.php',       // SQL form    'tbl_select.php',    // search page    'tbl_change.php',    // insert row page    'sql.php');          // browse page$cfg_db['LeftFrameDBSeparator'] = 'short_string';$cfg_db['LeftFrameTableSeparator'] = 'short_string';$cfg_db['NavigationBarIconic'] = array(true => __('Yes'), false => __('No'), 'both' => __('Both'));$cfg_db['Order'] = array('ASC', 'DESC', 'SMART');$cfg_db['RowActionLinks'] = array('none' => __('Nowhere'), 'left' => __('Left'), 'right' => __('Right'), 'both' => __('Both'));$cfg_db['ProtectBinary'] = array(false, 'blob', 'all');$cfg_db['DefaultDisplay'] = array('horizontal', 'vertical', 'horizontalflipped');$cfg_db['CharEditing'] = array('input', 'textarea');$cfg_db['PropertiesIconic'] = array(true => __('Yes'), false => __('No'), 'both' => __('Both'));$cfg_db['DefaultTabServer'] = array(    'main.php',                // the welcome page (recommended for multiuser setups)    'server_databases.php',    // list of databases    'server_status.php',       // runtime information    'server_variables.php',    // MySQL server variables    'server_privileges.php',   // user management    'server_processlist.php'); // process list$cfg_db['DefaultTabDatabase'] = array(    'db_structure.php',   // tables list    'db_sql.php',         // SQL form    'db_search.php',      // search query    'db_operations.php'); // operations on database$cfg_db['DefaultTabTable'] = array(    'tbl_structure.php', // fields list    'tbl_sql.php',       // SQL form    'tbl_select.php',    // search page    'tbl_change.php',    // insert row page    'sql.php');          // browse page$cfg_db['QueryWindowDefTab'] = array(    'sql',     // SQL    'files',   // Import files    'history', // SQL history    'full');   // All (SQL and SQL history)$cfg_db['InitialSlidersState'] = array(    'open' => __('Open'),     'closed' => __('Closed'),    'disabled' => __('Disabled'));$cfg_db['Import']['format'] = array(    'csv',    // CSV    'docsql', // DocSQL    'ldi',    // CSV using LOAD DATA    'sql');   // SQL$cfg_db['Import']['charset'] = array_merge(array(''), $GLOBALS['cfg']['AvailableCharsets']);$cfg_db['Import']['sql_compatibility'] = $cfg_db['Export']['sql_compatibility'] = array(    'NONE', 'ANSI', 'DB2', 'MAXDB', 'MYSQL323', 'MYSQL40', 'MSSQL', 'ORACLE',    // removed; in MySQL 5.0.33, this produces exports that    // can't be read by POSTGRESQL (see our bug #1596328)    //'POSTGRESQL',    'TRADITIONAL');$cfg_db['Import']['csv_terminated'] = 'short_string';$cfg_db['Import']['csv_enclosed'] = 'short_string';$cfg_db['Import']['csv_escaped'] = 'short_string';$cfg_db['Import']['ldi_terminated'] = 'short_string';$cfg_db['Import']['ldi_enclosed'] = 'short_string';$cfg_db['Import']['ldi_escaped'] = 'short_string';$cfg_db['Import']['ldi_local_option'] = array('auto', true, false);$cfg_db['Export']['_sod_select'] = array(    'structure' => __('structure'),    'data' => __('data'),    'structure_and_data' => __('structure and data'));$cfg_db['Export']['method'] = array(    'quick' => __('Quick - display only the minimal options to configure'),    'custom' => __('Custom - display all possible options to configure'),    'custom-no-form' => __('Custom - like above, but without the quick/custom choice'));$cfg_db['Export']['format'] = array('codegen', 'csv', 'excel', 'htmlexcel',    'htmlword', 'latex', 'ods', 'odt', 'pdf', 'sql', 'texytext', 'xls', 'xml',    'yaml');$cfg_db['Export']['compression'] = array('none', 'zip', 'gzip', 'bzip2');$cfg_db['Export']['charset'] = array_merge(array(''), $GLOBALS['cfg']['AvailableCharsets']);$cfg_db['Export']['codegen_format'] = array('#', 'NHibernate C# DO', 'NHibernate XML');$cfg_db['Export']['csv_separator'] = 'short_string';$cfg_db['Export']['csv_terminated'] = 'short_string';$cfg_db['Export']['csv_enclosed'] = 'short_string';$cfg_db['Export']['csv_escaped'] = 'short_string';$cfg_db['Export']['csv_null'] = 'short_string';$cfg_db['Export']['excel_null'] = 'short_string';$cfg_db['Export']['excel_edition'] = array('win' => 'Windows',    'mac_excel2003' => 'Excel 2003 / Macintosh', 'mac_excel2008' => 'Excel 2008 / Macintosh');$cfg_db['Export']['sql_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['sql_type'] = array('INSERT', 'UPDATE', 'REPLACE');$cfg_db['Export']['sql_insert_syntax'] = array(    'complete' => __('complete inserts'),    'extended' => __('extended inserts'),    'both' => __('both of the above'),    'none' => __('neither of the above'));$cfg_db['Export']['xls_null'] = 'short_string';$cfg_db['Export']['xlsx_null'] = 'short_string';$cfg_db['Export']['htmlword_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['htmlword_null'] = 'short_string';$cfg_db['Export']['ods_null'] = 'short_string';$cfg_db['Export']['odt_null'] = 'short_string';$cfg_db['Export']['odt_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['texytext_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['texytext_null'] = 'short_string';/** * Default values overrides * Use only full paths */$cfg_db['_overrides'] = array();$cfg_db['_overrides']['Servers/1/extension'] = extension_loaded('mysqli')    ? 'mysqli' : 'mysql';/** * Basic validator assignments (functions from libraries/config/validate.lib.php and 'validators' * object in js/config.js) * Use only full paths and form ids */$cfg_db['_validators'] = array(    'CharTextareaCols' => 'validate_positive_number',    'CharTextareaRows' => 'validate_positive_number',    'ExecTimeLimit' => 'validate_non_negative_number',    'Export/sql_max_query_size' => 'validate_positive_number',    'ForeignKeyMaxLimit' => 'validate_positive_number',    'Import/csv_enclosed' => array(array('validate_by_regex', '/^.?$/')),    'Import/csv_escaped' => array(array('validate_by_regex', '/^.$/')),    'Import/csv_terminated' => array(array('validate_by_regex', '/^.$/')),    'Import/ldi_enclosed' => array(array('validate_by_regex', '/^.?$/')),    'Import/ldi_escaped' => array(array('validate_by_regex', '/^.$/')),    'Import/ldi_terminated' => array(array('validate_by_regex', '/^.$/')),    'Import/skip_queries' => 'validate_non_negative_number',    'InsertRows' => 'validate_positive_number',    'LeftFrameTableLevel' => 'validate_positive_number',    'LeftRecentTable' => 'validate_non_negative_number',    'LimitChars' => 'validate_positive_number',    'LoginCookieValidity' => 'validate_positive_number',    'LoginCookieStore' => 'validate_non_negative_number',    'MaxDbList' => 'validate_positive_number',    'MaxCharactersInDisplayedSQL' => 'validate_positive_number',    'MaxRows' => 'validate_positive_number',    'MaxTableList' => 'validate_positive_number',    'MemoryLimit' => array(array('validate_by_regex', '/^\d+(?:[kmg])?$/i')),    'QueryHistoryMax' => 'validate_positive_number',    'QueryWindowWidth' => 'validate_positive_number',    'QueryWindowHeight' => 'validate_positive_number',    'RepeatCells' => 'validate_non_negative_number',    'Server' => 'validate_server',    'Server_pmadb' => 'validate_pmadb',    'Servers/1/port' => 'validate_port_number',    'Servers/1/hide_db' => 'validate_regex',    'TextareaCols' => 'validate_positive_number',    'TextareaRows' => 'validate_positive_number',    'TrustedProxies' => 'validate_trusted_proxies');/** * Additional validators used for user preferences */$cfg_db['_userValidators'] = array(    'MaxDbList' => array(array('validate_upper_bound', 'value:MaxDbList')),    'MaxTableList' => array(array('validate_upper_bound', 'value:MaxTableList')),    'QueryHistoryMax' => array(array('validate_upper_bound', 'value:QueryHistoryMax')),);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build OpenDocument Text dumps of tables * * @package PhpMyAdmin-Export * @subpackage ODT */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && !$plugin_param['single_table']) {        $hide_structure = true;    }    $plugin_list['odt'] = array(        'text' => __('Open Document Text'),        'extension' => 'odt',        'mime_type' => 'application/vnd.oasis.opendocument.text',        'force_file' => true,        'options' => array(), /* Filled later */        'options_text' => __('Options'),        );    /* what to dump (structure/data/both) */    $plugin_list['odt']['options'][]        = array('type' => 'begin_group', 'text' => __('Dump table') , 'name' => 'general_opts');    $plugin_list['odt']['options'][]        = array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data')));    $plugin_list['odt']['options'][] = array('type' => 'end_group');    /* Structure options */    if (!$hide_structure) {        $plugin_list['odt']['options'][]            = array('type' => 'begin_group', 'name' => 'structure', 'text' => __('Object creation options'), 'force' => 'data');        if (!empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['odt']['options'][]                = array('type' => 'bool', 'name' => 'relation', 'text' => __('Display foreign key relationships'));        }        $plugin_list['odt']['options'][]            = array('type' => 'bool', 'name' => 'comments', 'text' => __('Display comments'));        if (!empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['odt']['options'][]                = array('type' => 'bool', 'name' => 'mime', 'text' => __('Display MIME types'));        }        $plugin_list['odt']['options'][]            = array('type' => 'end_group');    }    /* Data */    $plugin_list['odt']['options'][]        = array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure');    $plugin_list['odt']['options'][]        = array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row'));    $plugin_list['odt']['options'][]        = array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:'));    $plugin_list['odt']['options'][]        = array('type' => 'end_group');} else {    $GLOBALS['odt_buffer'] = '';    include_once './libraries/opendocument.lib.php';    /**     * Outputs export footer     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportFooter()    {        $GLOBALS['odt_buffer'] .= '</office:text>'            . '</office:body>'            . '</office:document-content>';        if (! PMA_exportOutputHandler(PMA_createOpenDocument('application/vnd.oasis.opendocument.text', $GLOBALS['odt_buffer']))) {            return false;        }        return true;    }    /**     * Outputs export header     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportHeader()    {        $GLOBALS['odt_buffer'] .= '<?xml version="1.0" encoding="utf-8"?' . '>'            . '<office:document-content '. $GLOBALS['OpenDocumentNS'] . 'office:version="1.0">'            . '<office:body>'            . '<office:text>';        return true;    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="1" text:style-name="Heading_1" text:is-list-header="true">'            . __('Database') . ' ' . htmlspecialchars($db) . '</text:h>';        return true;    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in ODT format     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $what;        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        $fields_meta = PMA_DBI_get_fields_meta($result);        $field_flags = array();        for ($j = 0; $j < $fields_cnt; $j++) {            $field_flags[$j] = PMA_DBI_field_flags($result, $j);        }        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="2" text:style-name="Heading_2" text:is-list-header="true">'            . __('Dumping data for table') . ' ' . htmlspecialchars($table) . '</text:h>';        $GLOBALS['odt_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '_structure">';        $GLOBALS['odt_buffer'] .= '<table:table-column table:number-columns-repeated="' . $fields_cnt . '"/>';        // If required, get fields name at the first line        if (isset($GLOBALS[$what . '_columns'])) {            $GLOBALS['odt_buffer'] .= '<table:table-row>';            for ($i = 0; $i < $fields_cnt; $i++) {                $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                    . '<text:p>' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i))) . '</text:p>'                    . '</table:table-cell>';            } // end for            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $GLOBALS['odt_buffer'] .= '<table:table-row>';            for ($j = 0; $j < $fields_cnt; $j++) {                if (!isset($row[$j]) || is_null($row[$j])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($GLOBALS[$what . '_null']) . '</text:p>'                        . '</table:table-cell>';                // ignore BLOB                } elseif (stristr($field_flags[$j], 'BINARY')                        && $fields_meta[$j]->blob) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->numeric && $fields_meta[$j]->type != 'timestamp' && ! $fields_meta[$j]->blob) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="float" office:value="' . $row[$j] . '" >'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                }            } // end for            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end while        PMA_DBI_free_result($result);        $GLOBALS['odt_buffer'] .= '</table:table>';        return true;    }    /**     * Outputs table's structure     *     * @param string $db          database name     * @param string $table       table name     * @param string $crlf        the end of line sequence     * @param string $error_url   the url to go back in case of error     * @param bool   $do_relation whether to include relation comments     * @param bool   $do_comments whether to include the pmadb-style column comments     *                            as comments in the structure; this is deprecated     *                            but the parameter is left here because export.php     *                            calls PMA_exportStructure() also for other export     *                            types which use this parameter     * @param bool   $do_mime     whether to include mime comments     * @param bool   $dates       whether to include creation/update/check dates     * @param string $export_mode 'create_table', 'triggers', 'create_view', 'stand_in'     * @param string $export_type 'server', 'database', 'table'     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        /* Heading */        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="2" text:style-name="Heading_2" text:is-list-header="true">'            . __('Table structure for table') . ' ' . htmlspecialchars($table) . '</text:h>';        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && !empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $GLOBALS['odt_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '_data">';        $columns_cnt = 4;        if ($do_relation && $have_rel) {            $columns_cnt++;        }        if ($do_comments) {            $columns_cnt++;        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;        }        $GLOBALS['odt_buffer'] .= '<table:table-column table:number-columns-repeated="' . $columns_cnt . '"/>';        /* Header */        $GLOBALS['odt_buffer'] .= '<table:table-row>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Column') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Type') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Null') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Default') . '</text:p>'            . '</table:table-cell>';        if ($do_relation && $have_rel) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('Links to') . '</text:p>'                . '</table:table-cell>';        }        if ($do_comments) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('Comments') . '</text:p>'                . '</table:table-cell>';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('MIME type') . '</text:p>'                . '</table:table-cell>';            $mime_map = PMA_getMIME($db, $table, true);        }        $GLOBALS['odt_buffer'] .= '</table:table-row>';        $columns = PMA_DBI_get_columns($db, $table);        foreach ($columns as $column) {            $field_name = $column['Field'];            $GLOBALS['odt_buffer'] .= '<table:table-row>';            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($field_name) . '</text:p>'                . '</table:table-cell>';            $extracted_fieldspec = PMA_extractFieldSpec($column['Type']);            $type = htmlspecialchars($extracted_fieldspec['print_type']);            if (empty($type)) {                $type     = '&nbsp;';            }            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($type) . '</text:p>'                . '</table:table-cell>';            if (!isset($column['Default'])) {                if ($column['Null'] != 'NO') {                    $column['Default'] = 'NULL';                } else {                    $column['Default'] = '';                }            } else {                $column['Default'] = $column['Default'];            }            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . (($column['Null'] == '' || $column['Null'] == 'NO') ? __('No') : __('Yes')) . '</text:p>'                . '</table:table-cell>';            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($column['Default']) . '</text:p>'                . '</table:table-cell>';            if ($do_relation && $have_rel) {                if (isset($res_rel[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' (' . $res_rel[$field_name]['foreign_field'] . ')') . '</text:p>'                        . '</table:table-cell>';                }            }            if ($do_comments) {                if (isset($comments[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($comments[$field_name]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                }            }            if ($do_mime && $cfgRelation['mimework']) {                if (isset($mime_map[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype'])) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                }            }            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end while        $GLOBALS['odt_buffer'] .= '</table:table>';        return true;    } // end of the 'PMA_exportStructure' function} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Display form for changing/adding table fields/columns * * included by tbl_addfield.php, -_alter.php, -_create.php * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Check parameters */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';PMA_checkParameters(array('db', 'table', 'action', 'num_fields'));// Get available character sets and storage enginesrequire_once './libraries/mysql_charsets.lib.php';require_once './libraries/StorageEngine.class.php';/** * Class for partition management */require_once './libraries/Partition.class.php';// load additional configuration variablesif (PMA_DRIZZLE) {    include_once './libraries/data_drizzle.inc.php';} else {    include_once './libraries/data_mysql.inc.php';}$length_values_input_size = 8;$_form_params = array(    'db' => $db,);if ($action == 'tbl_create.php') {    $_form_params['reload'] = 1;} elseif ($action == 'tbl_addfield.php') {    $_form_params['field_where'] = $_REQUEST['field_where'];    $_form_params['after_field'] = $_REQUEST['after_field'];    $_form_params['table'] = $table;} else {    $_form_params['table'] = $table;}if (isset($num_fields)) {    $_form_params['orig_num_fields'] = $num_fields;}if (isset($_REQUEST['field_where'])) {    $_form_params['orig_field_where'] = $_REQUEST['field_where'];}if (isset($_REQUEST['after_field'])) {    $_form_params['orig_after_field'] = $_REQUEST['after_field'];}if (isset($selected) && is_array($selected)) {    foreach ($selected as $o_fld_nr => $o_fld_val) {        $_form_params['selected[' . $o_fld_nr . ']'] = $o_fld_val;        if (! isset($true_selected)) {            $_form_params['true_selected[' . $o_fld_nr . ']'] = $o_fld_val;        }    }    if (isset($true_selected) && is_array($true_selected)) {        foreach ($true_selected as $o_fld_nr => $o_fld_val) {            $_form_params['true_selected[' . $o_fld_nr . ']'] = $o_fld_val;        }    }} elseif (isset($_REQUEST['field'])) {    $_form_params['orig_field'] = $_REQUEST['field'];    if (isset($orig_field)) {        $_form_params['true_selected[]'] = $orig_field;    } else {        $_form_params['true_selected[]'] = $_REQUEST['field'];    }}$is_backup = ($action != 'tbl_create.php' && $action != 'tbl_addfield.php');$header_cells = array();$content_cells = array();$header_cells[] = __('Name');$header_cells[] = __('Type')     . ($GLOBALS['cfg']['ReplaceHelpImg']        ? PMA_showMySQLDocu('SQL-Syntax', 'data-types')        : '<br /><span style="font-weight: normal">' . PMA_showMySQLDocu('SQL-Syntax', 'data-types')     . '</span>');$header_cells[] = __('Length/Values') . PMA_showHint(__('If column type is "enum" or "set", please enter the values using this format: \'a\',\'b\',\'c\'...<br />If you ever need to put a backslash ("\") or a single quote ("\'") amongst those values, precede it with a backslash (for example \'\\\\xyz\' or \'a\\\'b\').'));$header_cells[] = __('Default') . PMA_showHint(__('For default values, please enter just a single value, without backslash escaping or quotes, using this format: a'));$header_cells[] = __('Collation');$header_cells[] = __('Attributes');$header_cells[] = __('Null');// We could remove this 'if' and let the key information be shown and// editable. However, for this to work, tbl_alter must be modified to use the// key fields, as tbl_addfield does.if (!$is_backup) {    $header_cells[] = __('Index');}$header_cells[] = '<abbr title="AUTO_INCREMENT">A_I</abbr>';require_once './libraries/transformations.lib.php';$cfgRelation = PMA_getRelationsParam();$comments_map = array();$mime_map = array();$available_mime = array();$comments_map = PMA_getComments($db, $table);$header_cells[] = __('Comments');if ($cfgRelation['mimework'] && $cfg['BrowseMIME']) {    $mime_map = PMA_getMIME($db, $table);    $available_mime = PMA_getAvailableMIMEtypes();    $hint = '<br />' .        sprintf(__('For a list of available transformation options and their MIME type transformations, click on %stransformation descriptions%s'),            '<a href="transformation_overview.php?'            . PMA_generate_common_url($db, $table) . '" target="_blank">',            '</a>');    $header_cells[] = __('MIME type');    $header_cells[] = __('Browser transformation');    $header_cells[] = __('Transformation options')        . PMA_showHint(__('Please enter the values for transformation options using this format: \'a\', 100, b,\'c\'...<br />If you ever need to put a backslash ("\") or a single quote ("\'") amongst those values, precede it with a backslash (for example \'\\\\xyz\' or \'a\\\'b\').') . $hint);}//  workaround for field_fulltext, because its submitted indizes contain//  the index as a value, not a key. Inserted here for easier maintaineance//  and less code to change in existing files.if (isset($field_fulltext) && is_array($field_fulltext)) {    foreach ($field_fulltext as $fulltext_nr => $fulltext_indexkey) {        $submit_fulltext[$fulltext_indexkey] = $fulltext_indexkey;    }}for ($i = 0; $i < $num_fields; $i++) {    if (! empty($regenerate)) {        // An error happened with previous inputs, so we will restore the data        // to embed it once again in this form.        $row['Field']     = (isset($_REQUEST['field_name'][$i]) ? $_REQUEST['field_name'][$i] : false);        $row['Type']      = (isset($_REQUEST['field_type'][$i]) ? $_REQUEST['field_type'][$i] : false);        $row['Collation'] = (isset($_REQUEST['field_collation'][$i]) ? $_REQUEST['field_collation'][$i] : '');        $row['Null']      = (isset($_REQUEST['field_null'][$i]) ? $_REQUEST['field_null'][$i] : '');        if (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'primary_' . $i) {            $row['Key'] = 'PRI';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'index_' . $i) {            $row['Key'] = 'MUL';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'unique_' . $i) {            $row['Key'] = 'UNI';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'fulltext_' . $i) {            $row['Key'] = 'FULLTEXT';        } else {            $row['Key'] = '';        }        // put None in the drop-down for Default, when someone adds a field        $row['DefaultType']  = (isset($_REQUEST['field_default_type'][$i]) ? $_REQUEST['field_default_type'][$i] : 'NONE');        $row['DefaultValue'] = (isset($_REQUEST['field_default_value'][$i]) ? $_REQUEST['field_default_value'][$i] : '');        switch ($row['DefaultType']) {            case 'NONE' :                $row['Default'] = null;                break;            case 'USER_DEFINED' :                $row['Default'] = $row['DefaultValue'];                break;            case 'NULL' :            case 'CURRENT_TIMESTAMP' :                $row['Default'] = $row['DefaultType'];                break;        }        $row['Extra']     = (isset($_REQUEST['field_extra'][$i]) ? $_REQUEST['field_extra'][$i] : false);        $row['Comment']   = (isset($submit_fulltext[$i]) && ($submit_fulltext[$i] == $i) ? 'FULLTEXT' : false);        $submit_length    = (isset($_REQUEST['field_length'][$i]) ? $_REQUEST['field_length'][$i] : false);        $submit_attribute = (isset($_REQUEST['field_attribute'][$i]) ? $_REQUEST['field_attribute'][$i] : false);        $submit_default_current_timestamp = (isset($_REQUEST['field_default_current_timestamp'][$i]) ? true : false);        if (isset($_REQUEST['field_comments'][$i])) {            $comments_map[$row['Field']] = $_REQUEST['field_comments'][$i];        }        if (isset($_REQUEST['field_mimetype'][$i])) {            $mime_map[$row['Field']]['mimetype'] = $_REQUEST['field_mimetype'][$i];        }        if (isset($_REQUEST['field_transformation'][$i])) {            $mime_map[$row['Field']]['transformation'] = $_REQUEST['field_transformation'][$i];        }        if (isset($_REQUEST['field_transformation_options'][$i])) {            $mime_map[$row['Field']]['transformation_options'] = $_REQUEST['field_transformation_options'][$i];        }    } elseif (isset($fields_meta[$i])) {        $row = $fields_meta[$i];        switch ($row['Default']) {            case null:                if ($row['Null'] == 'YES') {                    $row['DefaultType']  = 'NULL';                    $row['DefaultValue'] = '';    // SHOW FULL COLUMNS does not report the case when there is a DEFAULT value    // which is empty so we need to use the results of SHOW CREATE TABLE                } elseif (isset($row) && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['default_value'])) {                    $row['DefaultType']  = 'USER_DEFINED';                    $row['DefaultValue'] = $row['Default'];                } else {                    $row['DefaultType']  = 'NONE';                    $row['DefaultValue'] = '';                }                break;            case 'CURRENT_TIMESTAMP':                $row['DefaultType']  = 'CURRENT_TIMESTAMP';                $row['DefaultValue'] = '';                break;            default:                $row['DefaultType']  = 'USER_DEFINED';                $row['DefaultValue'] = $row['Default'];                break;        }    }    if (isset($row['Type'])) {        $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);        if ($extracted_fieldspec['type'] == 'bit') {            $row['Default'] = PMA_convert_bit_default_value($row['Default']);        }    }    // Cell index: If certain fields get left out, the counter shouldn't change.    $ci = 0;    // Everytime a cell shall be left out the STRG-jumping feature, $ci_offset    // has to be incremented ($ci_offset++)    $ci_offset = -1;    // old column name    if ($is_backup) {        if (! empty($true_selected[$i])) {            $_form_params['field_orig[' . $i . ']'] = $true_selected[$i];        } elseif (isset($row['Field'])) {            $_form_params['field_orig[' . $i . ']'] = $row['Field'];        } else {            $_form_params['field_orig[' . $i . ']'] = '';        }    }    // column name    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_name[' . $i . ']"'        . ' maxlength="64" class="textfield" title="' . __('Column') . '"'        . ' size="10"'        . ' value="' . (isset($row['Field']) ? htmlspecialchars($row['Field']) : '') . '"'        . ' />';    $ci++;    // column type    $select_id = 'field_' . $i . '_' . ($ci - $ci_offset);    $content_cells[$i][$ci] = '<select class="column_type" name="field_type[' . $i . ']"'        .' id="' . $select_id . '">';    if (empty($row['Type'])) {        // creating a column        $row['Type'] = '';        $type        = '';        $length = '';    } else {        $type = $extracted_fieldspec['type'];        $length = $extracted_fieldspec['spec_in_brackets'];    }    // some types, for example longtext, are reported as    // "longtext character set latin7" when their charset and / or collation    // differs from the ones of the corresponding database.    $tmp = strpos($type, 'character set');    if ($tmp) {        $type = substr($type, 0, $tmp - 1);    }    if (isset($submit_length) && $submit_length != false) {        $length = $submit_length;    }    // rtrim the type, for cases like "float unsigned"    $type = rtrim($type);    $type_upper = strtoupper($type);    $content_cells[$i][$ci] .= PMA_getSupportedDatatypes(true, $type_upper);    $content_cells[$i][$ci] .= '    </select>';    $ci++;    // old column length    if ($is_backup) {        $_form_params['field_length_orig[' . $i . ']'] = $length;    }    // column length    $length_to_display = $length;    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_length[' . $i . ']" size="' . $length_values_input_size . '"'        . ' value="' . htmlspecialchars($length_to_display) . '"'        . ' class="textfield" />'        . '<p class="enum_notice" id="enum_notice_' . $i . '_' . ($ci - $ci_offset) . '">';    $content_cells[$i][$ci] .= __('ENUM or SET data too long?')        . '<a onclick="return false;" href="enum_editor.php?'        . PMA_generate_common_url()        . '&amp;values=' . urlencode($length_to_display)        . '&amp;field=' .  (isset($row['Field']) ? urlencode($row['Field']) : "")        . '" class="open_enum_editor" target="_blank"> '        . __('Get more editing space') . '</a>'        . '</p>';    $ci++;    // column default    /**     * having NULL enabled does not implicit having Default with NULL     *    if (isset($row)      && ! isset($row['Default']) && isset($row['Null']) && $row['Null'] == 'YES') {        $row['Default'] = 'NULL';    }     */    // old column default    if ($is_backup) {        $_form_params['field_default_orig[' . $i . ']']            = (isset($row['Default']) ? $row['Default'] : '');    }    // here we put 'NONE' as the default value of drop-down; otherwise    // users would have problems if they forget to enter the default    // value (example, for an INT)    $default_options = array(        'NONE'              =>  _pgettext('for default', 'None'),        'USER_DEFINED'      =>  __('As defined:'),        'NULL'              => 'NULL',        'CURRENT_TIMESTAMP' => 'CURRENT_TIMESTAMP',    );    // for a TIMESTAMP, do not show the string "CURRENT_TIMESTAMP" as a default value    if ($type_upper == 'TIMESTAMP'     && ! empty($default_current_timestamp)     && isset($row['Default'])) {        $row['Default'] = '';    }    if ($type_upper == 'BIT') {        $row['DefaultValue'] = PMA_convert_bit_default_value($row['DefaultValue']);    }    $content_cells[$i][$ci] = '<select name="field_default_type[' . $i . ']" class="default_type">';    foreach ($default_options as $key => $value) {        $content_cells[$i][$ci] .= '<option value="' . $key . '"';        // is only set when we go back to edit a field's structure        if (isset($row['DefaultType']) && $row['DefaultType'] == $key) {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= ' >' . $value . '</option>';    }    $content_cells[$i][$ci] .= '</select>';    $content_cells[$i][$ci] .= '<br />';    $content_cells[$i][$ci] .= '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_default_value[' . $i . ']" size="12"'        . ' value="' . (isset($row['DefaultValue']) ? htmlspecialchars($row['DefaultValue']) : '') . '"'        . ' class="textfield default_value" />';    $ci++;    // column collation    $tmp_collation          = empty($row['Collation']) ? null : $row['Collation'];    $content_cells[$i][$ci] = PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_COLLATION, 'field_collation[' . $i . ']',        'field_' . $i . '_' . ($ci - $ci_offset), $tmp_collation, false);    unset($tmp_collation);    $ci++;    // column attribute    $content_cells[$i][$ci] = '<select style="font-size: 70%;"'        . ' name="field_attribute[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '">';    $attribute     = '';    if (isset($extracted_fieldspec)) {        $attribute = $extracted_fieldspec['attribute'];    }    if (isset($row['Extra']) && $row['Extra'] == 'on update CURRENT_TIMESTAMP') {        $attribute = 'on update CURRENT_TIMESTAMP';    }    if (isset($submit_attribute) && $submit_attribute != false) {        $attribute = $submit_attribute;    }    // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the    // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe    // the latter.    if (PMA_MYSQL_INT_VERSION < 50025     && isset($row['Field'])     && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['type'])     && $analyzed_sql[0]['create_table_fields'][$row['Field']]['type'] == 'TIMESTAMP'     && $analyzed_sql[0]['create_table_fields'][$row['Field']]['timestamp_not_null'] == true) {        $row['Null'] = '';    }    // MySQL 4.1.2+ TIMESTAMP options    // (if on_update_current_timestamp is set, then it's TRUE)    if (isset($row['Field'])     && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['on_update_current_timestamp'])) {        $attribute = 'on update CURRENT_TIMESTAMP';    }    if ((isset($row['Field'])      && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['default_current_timestamp']))     || (isset($submit_default_current_timestamp) && $submit_default_current_timestamp)) {        $default_current_timestamp = true;    } else {        $default_current_timestamp = false;    }    $cnt_attribute_types = count($cfg['AttributeTypes']);    for ($j = 0; $j < $cnt_attribute_types; $j++) {        $content_cells[$i][$ci] .= '                <option value="'. $cfg['AttributeTypes'][$j] . '"';        if (strtoupper($attribute) == strtoupper($cfg['AttributeTypes'][$j])) {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>' . $cfg['AttributeTypes'][$j] . '</option>';    }    $content_cells[$i][$ci] .= '</select>';    $ci++;    // column NULL    $content_cells[$i][$ci] = '<input name="field_null[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '"';    if (! empty($row['Null']) && $row['Null'] != 'NO' && $row['Null'] != 'NOT NULL') {        $content_cells[$i][$ci] .= ' checked="checked"';    }    $content_cells[$i][$ci] .= ' type="checkbox" value="NULL" />';    $ci++;    // column indexes    // See my other comment about removing this 'if'.    if (!$is_backup) {        $content_cells[$i][$ci] = '<select name="field_key[' . $i . ']"'            . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '">';        $content_cells[$i][$ci] .= '<option value="none_' . $i . '">---</option>';        $content_cells[$i][$ci] .= '<option value="primary_' . $i . '" title="' . __('Primary') . '"';        if (isset($row['Key']) && $row['Key'] == 'PRI') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>PRIMARY</option>';        $content_cells[$i][$ci] .= '<option value="unique_' . $i . '" title="' . __('Unique') . '"';        if (isset($row['Key']) && $row['Key'] == 'UNI') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>UNIQUE</option>';        $content_cells[$i][$ci] .= '<option value="index_' . $i . '" title="' . __('Index') . '"';        if (isset($row['Key']) && $row['Key'] == 'MUL') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>INDEX</option>';        if (!PMA_DRIZZLE) {            $content_cells[$i][$ci] .= '<option value="fulltext_' . $i . '" title="' . __('Fulltext') . '"';            if (isset($row['Key']) && $row['Key'] == 'FULLTEXT') {                $content_cells[$i][$ci] .= ' selected="selected"';            }            $content_cells[$i][$ci] .= '>FULLTEXT</option>';        }        $content_cells[$i][$ci] .= '</select>';        $ci++;    } // end if ($action ==...)    // column auto_increment    $content_cells[$i][$ci] = '<input name="field_extra[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '"';    if (isset($row['Extra']) && strtolower($row['Extra']) == 'auto_increment') {        $content_cells[$i][$ci] .= ' checked="checked"';    }    $content_cells[$i][$ci] .= ' type="checkbox" value="AUTO_INCREMENT" />';    $ci++;    // column comments    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_comments[' . $i . ']" size="12"'        . ' value="' . (isset($row['Field']) && is_array($comments_map) && isset($comments_map[$row['Field']]) ?  htmlspecialchars($comments_map[$row['Field']]) : '') . '"'        . ' class="textfield" />';    $ci++;    // column MIME-types    if ($cfgRelation['mimework'] && $cfg['BrowseMIME'] && $cfgRelation['commwork']) {        $content_cells[$i][$ci] = '<select id="field_' . $i . '_' . ($ci - $ci_offset) . '" size="1" name="field_mimetype[' . $i . ']">';        $content_cells[$i][$ci] .= '    <option value="">&nbsp;</option>';        if (is_array($available_mime['mimetype'])) {            foreach ($available_mime['mimetype'] AS $mimekey => $mimetype) {                $checked = (isset($row['Field']) && isset($mime_map[$row['Field']]['mimetype']) && ($mime_map[$row['Field']]['mimetype'] == str_replace('/', '_', $mimetype)) ? 'selected ' : '');                $content_cells[$i][$ci] .= '    <option value="' . str_replace('/', '_', $mimetype) . '" ' . $checked . '>' . htmlspecialchars($mimetype) . '</option>';            }        }        $content_cells[$i][$ci] .= '</select>';        $ci++;        $content_cells[$i][$ci] = '<select id="field_' . $i . '_' . ($ci - $ci_offset) . '" size="1" name="field_transformation[' . $i . ']">';        $content_cells[$i][$ci] .= '    <option value="" title="' . __('None') . '"></option>';        if (is_array($available_mime['transformation'])) {            foreach ($available_mime['transformation'] AS $mimekey => $transform) {                $checked = (isset($row['Field']) && isset($mime_map[$row['Field']]['transformation']) && (preg_match('@' . preg_quote($available_mime['transformation_file'][$mimekey]) . '3?@i', $mime_map[$row['Field']]['transformation'])) ? 'selected ' : '');                $tooltip = PMA_getTransformationDescription($available_mime['transformation_file'][$mimekey], false);                $content_cells[$i][$ci] .= '<option value="' . $available_mime['transformation_file'][$mimekey] . '" ' . $checked . ' title="' . htmlspecialchars($tooltip) . '">' . htmlspecialchars($transform) . '</option>';            }        }        $content_cells[$i][$ci] .= '</select>';        $ci++;        $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'            . ' type="text" name="field_transformation_options[' . $i . ']"'            . ' size="16" class="textfield"'            . ' value="' . (isset($row['Field']) && isset($mime_map[$row['Field']]['transformation_options']) ?  htmlspecialchars($mime_map[$row['Field']]['transformation_options']) : '') . '"'            . ' />';        //$ci++;    }} // end for    ?><script src="./js/keyhandler.js" type="text/javascript"></script><script type="text/javascript">// <![CDATA[var switch_movement = 0;document.onkeydown = onKeyDownArrowsHandler;// ]]></script>    <form id="<?php echo ($action == 'tbl_create.php' ? 'create_table' : 'append_fields'); ?>_form" method="post" action="<?php echo $action; ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?phpecho PMA_generate_common_hidden_inputs($_form_params);unset($_form_params);if ($action == 'tbl_create.php') {    ?>    <table>        <tr><td><?php echo __('Table name'); ?>:&nbsp;<input type="text" name="table" size="40" maxlength="80"                value="<?php echo (isset($_REQUEST['table']) ? htmlspecialchars($_REQUEST['table']) : ''); ?>"                class="textfield" />            </td>            <td>                <?php if ($action == 'tbl_create.php' || $action == 'tbl_addfield.php') { ?>                <?php echo sprintf(__('Add %s column(s)'), '<input type="text" id="added_fields" name="added_fields" size="2" value="1" onfocus="this.select()" />'); ?>                <input type="submit" name="submit_num_fields" value="<?php echo __('Go'); ?>"                    onclick="return checkFormElementInRange(this.form, 'added_fields', '<?php echo str_replace('\'', '\\\'', __('You have to add at least one column.')); ?>', 1)"                />                <?php } ?>            </td>        </tr>    </table>    <?php}if (is_array($content_cells) && is_array($header_cells)) {    // last row is for javascript insert    //$empty_row = array_pop($content_cells);    echo '<table id="table_columns" class="noclick">';    echo '<caption class="tblHeaders">' . __('Structure') . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_TABLE') . '</caption>';        ?><tr>    <?php foreach ($header_cells as $header_val) { ?>    <th><?php echo $header_val; ?></th>    <?php } ?></tr>    <?php    $odd_row = true;    foreach ($content_cells as $content_row) {        echo '<tr class="' . ($odd_row ? 'odd' : 'even') . '">';        $odd_row = ! $odd_row;        if (is_array($content_row)) {            foreach ($content_row as $content_row_val) {                ?>    <td align="center"><?php echo $content_row_val; ?></td>                <?php            }        }        echo '</tr>';    }    ?></table><br />    <?php}/** * needs to be finished * *if ($display_type == 'horizontal') {    $new_field = '';    foreach ($empty_row as $content_row_val) {        $new_field .= '<td align="center">' . $content_row_val . '</td>';    }    ?><script type="text/javascript">// <![CDATA[var odd_row = <?php echo $odd_row; ?>;function addField(){    var new_fields = document.getElementById('added_fields').value;    var new_field_container = document.getElementById('table_columns');    var new_field = '<?php echo preg_replace('|\s+|', ' ', preg_replace('|\'|', '\\\'', $new_field)); ?>';    var i = 0;    for (i = 0; i < new_fields; i++) {        if (odd_row) {            new_field_container.innerHTML += '<tr class="odd">' + new_field + '</tr>';        } else {            new_field_container.innerHTML += '<tr class="even">' + new_field + '</tr>';        }        odd_row = ! odd_row;    }    return true;}// ]]></script>    <?php} */if ($action == 'tbl_create.php') {    ?>    <table>    <tr valign="top">        <th><?php echo __('Table comments'); ?>:&nbsp;</th>        <td width="25">&nbsp;</td>        <th><?php echo __('Storage Engine'); ?>:            <?php echo PMA_showMySQLDocu('Storage_engines', 'Storage_engines'); ?>        </th>        <td width="25">&nbsp;</td>        <th><?php echo __('Collation') ;?>:&nbsp;</th>    </tr>    <tr><td><input type="text" name="comment" size="40" maxlength="80"                value="<?php echo (isset($_REQUEST['comment']) ? htmlspecialchars($_REQUEST['comment']) : ''); ?>"                class="textfield" />        </td>        <td width="25">&nbsp;</td>        <td>    <?php    echo PMA_StorageEngine::getHtmlSelect('tbl_type', null,        (isset($_REQUEST['tbl_type']) ? $_REQUEST['tbl_type'] : null));    ?>        </td>        <td width="25">&nbsp;</td>        <td>    <?php    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION, 'tbl_collation',        null, (isset($_REQUEST['tbl_collation']) ? $_REQUEST['tbl_collation'] : null), false, 3);    ?>        </td>    </tr>    <?php    if (PMA_Partition::havePartitioning()) {        ?>    <tr valign="top">        <th><?php echo __('PARTITION definition'); ?>:&nbsp;<?php echo PMA_showMySQLDocu('Partitioning', 'Partitioning'); ?>        </th>    </tr>    <tr>        <td>            <textarea name="partition_definition" id="partitiondefinition"                cols="<?php echo $GLOBALS['cfg']['TextareaCols'];?>"                rows="<?php echo $GLOBALS['cfg']['TextareaRows'];?>"                dir="<?php echo $GLOBALS['text_dir'];?>"><?php echo (isset($_REQUEST['partition_definition']) ? htmlspecialchars($_REQUEST['partition_definition']) : ''); ?></textarea>        </td>    </tr>        <?php    }    ?>    </table>    <br />    <?php} // end if ($action == 'tbl_create.php')?><fieldset class="tblFooters">    <input type="submit" name="do_save_data" value="<?php echo __('Save'); ?>" /></fieldset><div id="properties_message"></div></form><div id="popup_background"></div>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * the navigation frame - displays server, db and table selection tree * * @package PhpMyAdmin *//** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';/** * finish and cleanup navigation.php script execution, only to be used in navigation.php * * @access private */function PMA_exitNavigationFrame(){    echo '</body></html>';    exit;}require_once './libraries/common.lib.php';require_once './libraries/RecentTable.class.php';/** * Check if it is an ajax request to reload the recent tables list. */if ($GLOBALS['is_ajax_request'] && $_REQUEST['recent_table']) {    PMA_ajaxResponse('', true, array('options' => PMA_RecentTable::getInstance()->getHtmlSelectOption()) );}// keep the offset of the db list in session before closing itif (! isset($_SESSION['tmp_user_values']['navi_limit_offset'])) {    $_SESSION['tmp_user_values']['navi_limit_offset'] = 0;}if (! isset($_SESSION['tmp_user_values']['table_limit_offset']) || $_SESSION['tmp_user_values']['table_limit_offset_db'] != $db) {    $_SESSION['tmp_user_values']['table_limit_offset'] = 0;    $_SESSION['tmp_user_values']['table_limit_offset_db'] = $db;}if (isset($_REQUEST['pos'])) {    if (isset($_REQUEST['tpos'])) {        $_SESSION['tmp_user_values']['table_limit_offset'] = (int) $_REQUEST['pos'];    } else {        $_SESSION['tmp_user_values']['navi_limit_offset'] = (int) $_REQUEST['pos'];    }}$pos = $_SESSION['tmp_user_values']['navi_limit_offset'];$tpos = $_SESSION['tmp_user_values']['table_limit_offset'];// free the session file, for the other frames to be loaded// but only if debugging is not enabledif (empty($_SESSION['debug'])) {    session_write_close();}/** * the output compression library */require_once './libraries/ob.lib.php';PMA_outBufferPre();/* * selects the database if there is only one on current server */if ($GLOBALS['server'] && ! strlen($GLOBALS['db'])) {    $GLOBALS['db'] = $GLOBALS['pma']->databases->getSingleItem();}$db_start = $GLOBALS['db'];/** * the relation settings */$cfgRelation = PMA_getRelationsParam();/** * For re-usability, moved http-headers to a seperate file. * It can now be included by libraries/header.inc.php, querywindow.php. */require_once './libraries/header_http.inc.php';/* * Displays the frame */// xml declaration moves IE into quirks mode, making much trouble with CSS/* echo '<?xml version="1.0" encoding="utf-8"?>'; */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"    xml:lang="<?php echo $available_languages[$lang][1]; ?>"    lang="<?php echo $available_languages[$lang][1]; ?>"    dir="<?php echo $GLOBALS['text_dir']; ?>"><head>    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <title>phpMyAdmin</title>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <base target="frame_content" />    <link rel="stylesheet" type="text/css"        href="phpmyadmin.css.php?<?php echo PMA_generate_common_url('', ''); ?>&amp;js_frame=left&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" />    <?php    echo PMA_includeJS('jquery/jquery-1.6.2.js');    echo PMA_includeJS('jquery/jquery-ui-1.8.16.custom.js');    echo PMA_includeJS('jquery/jquery.qtip-1.0.0-rc3.js');    echo PMA_includeJS('navigation.js');    echo PMA_includeJS('functions.js');    echo PMA_includeJS('messages.php');    // Append the theme id to this url to invalidate the cache on a theme change    echo PMA_includeJS('get_image.js.php?theme=' . urlencode($_SESSION['PMA_Theme']->getId()));    ?>    <script type="text/javascript">    // <![CDATA[    // INIT PMA_setFrameSize    var onloadCnt = 0;    var onLoadHandler = window.onload;    var resizeHandler = window.onresize;    window.document.onresize  = resizeHandler;    window.onload = function() {        if (onloadCnt == 0) {            if (typeof(onLoadHandler) == "function") {                onLoadHandler();            }            if (typeof(PMA_setFrameSize) != 'undefined' && typeof(PMA_setFrameSize) == 'function') {                PMA_setFrameSize();            }            onloadCnt++;        }    };    window.onresize = function() {        if (typeof(resizeHandler) == "function") {            resizeHandler();        }        if (typeof(PMA_saveFrameSize) != 'undefined' && typeof(PMA_saveFrameSize) == 'function') {            PMA_saveFrameSize();        }    };    // ]]>    </script>    <?php    /*     * remove horizontal scroll bar bug in IE 6 by forcing a vertical scroll bar     */    ?>    <!--[if IE 6]>    <style type="text/css">    /* <![CDATA[ */    html {        overflow-y: scroll;    }    /* ]]> */    </style>    <![endif]--></head><body id="body_leftFrame"><?phprequire './libraries/navigation_header.inc.php';// display recently used tablesif ($GLOBALS['cfg']['LeftRecentTable'] > 0) {    echo '<div id="recentTableList">' . "\n"        .'<form method="post" action="index.php" target="_parent">' . "\n"        .PMA_generate_common_hidden_inputs() . "\n"        .PMA_RecentTable::getInstance()->getHtmlSelect()        .'<noscript>' . "\n"        .'<input type="submit" name="Go" value="' . __('Go') . '" />' . "\n"        .'</noscript>' . "\n"        .'</form>' . "\n"        .'</div>' . "\n";}if (! $GLOBALS['server']) {    // no server selected    PMA_exitNavigationFrame();} elseif (! count($GLOBALS['pma']->databases)) {    // no database available, so we break here    echo '<p>' . __('No databases') . '</p>';    PMA_exitNavigationFrame();} elseif ($GLOBALS['cfg']['LeftFrameLight'] && count($GLOBALS['pma']->databases) > 1) {    $list = $cfg['DisplayDatabasesList'];    if ($list === 'auto') {        if (empty($GLOBALS['db'])) {            $list = true;        } else {            $list = false;        }    }    if (!$list) {        // more than one database available and LeftFrameLight is true        // display db selectbox        //        // Light mode -> beginning of the select combo for databases        // Note: When javascript is active, the frameset will be changed from        // within navigation.php. With no JS (<noscript>) the whole frameset will        // be rebuilt with the new target frame.    ?>    <div id="databaseList">    <form method="post" action="index.php" target="_parent" id="left">    <?php        echo PMA_generate_common_hidden_inputs() . "\n";        echo $GLOBALS['pma']->databases->getHtmlSelectGrouped(true, $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']) . "\n";        echo '<noscript>' . "\n"            .'<input type="submit" name="Go" value="' . __('Go') . '" />' . "\n"            .'</noscript>' . "\n"            .'</form>' . "\n"            . '</div>' . "\n";    } else {        echo $GLOBALS['pma']->databases->getHtmlListGrouped(true, $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']) . "\n";    }    $_url_params = array('pos' => $pos);    PMA_listNavigator(count($GLOBALS['pma']->databases), $pos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxDbList']);}?><div id="left_tableList"><?php// Don't display expansible/collapsible database info if:// 1. $GLOBALS['server'] == 0 (no server selected)//    This is the case when there are multiple servers and//    '$GLOBALS['cfg']['ServerDefault'] = 0' is set. In that case, we want the welcome//    screen to appear with no database info displayed.// 2. there is only one database available (ie either only one database exists//    or $GLOBALS['cfg']['Servers']['only_db'] is defined and is not an array)//    In this case, the database should not be collapsible/expandable$img_plus = PMA_getImage('b_plus.png', '+', array('id' => 'el%dImg'));$img_minus = PMA_getImage('b_minus.png', '-', array('id' => 'el%dImg'));$href_left = '<a onclick="if (toggle(\'%d\')) return false;"'    .' href="navigation.php?%s" target="_self">';$element_counter = 0;if ($GLOBALS['cfg']['LeftFrameLight'] && strlen($GLOBALS['db'])) {    $table_list = PMA_getTableList($GLOBALS['db'], null, $tpos, $cfg['MaxTableList']);    $table_count = PMA_getTableCount($GLOBALS['db']);    // show selected databasename as link to DefaultTabDatabase-page    // with table count in ()    $common_url_query = PMA_generate_common_url($GLOBALS['db']);    $db_tooltip = '';    if ($GLOBALS['cfg']['ShowTooltip']      && $GLOBALS['cfgRelation']['commwork']) {        $_db_tooltip = PMA_getDbComment($GLOBALS['db']);        if ($_db_tooltip) {            $db_tooltip = $_db_tooltip;        }    }    $disp_name  = $GLOBALS['db'];    if ($db_tooltip && $GLOBALS['cfg']['ShowTooltipAliasDB']) {        $disp_name      = $db_tooltip;        $disp_name_cut  = $db_tooltip;        $db_tooltip     = $GLOBALS['db'];    }    if ($table_count >= $GLOBALS['cfg']['LeftDisplayTableFilterMinimum']) {        ?>        <span id="NavFilter">        <span id="clear_fast_filter" title="<?php echo __('Clear'); ?>">X</span>            <input type="text" class="gray" name="fast_filter" id="fast_filter" title="<?php echo __('Filter tables by name'); ?>" value="<?php echo __('Filter tables by name'); ?>" />        </span>        <?php    }    /**     * This helps reducing the navi panel size; in the right panel,     * user can find a navigator to page thru all tables.     *     */    if (! empty($table_list)) {        // upper table list paginator        if (count($table_list) <= $GLOBALS['cfg']['MaxTableList'] && $table_count > $GLOBALS['cfg']['MaxTableList']) {            $_url_params = array(              'tpos' => 'true',              'pos' => $tpos,              'db' => $GLOBALS['db']            );            PMA_listNavigator($table_count, $tpos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxTableList']);        }        PMA_displayTableList($table_list, true, '', $GLOBALS['db']);        // lower table list paginator        if (count($table_list) <= $GLOBALS['cfg']['MaxTableList'] && $table_count > $GLOBALS['cfg']['MaxTableList']) {            PMA_listNavigator($table_count, $tpos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxTableList']);        }    } else {        echo __('No tables found in database.');    }    unset($table_list);    if (!PMA_is_system_schema($db)) {        $class = '';        $GLOBALS['cfg']['AjaxEnable'] ? $class="ajax" : '';        echo '<ul id="newtable"><li><a target="frame_content" href="tbl_create.php' . PMA_generate_common_url(array('db' => $GLOBALS['db'])) . '"  class="'.$class .'" >'            . PMA_getImage('b_snewtbl.png', _pgettext('short form', 'Create table'), array('id' => "icon_newtable"))            . _pgettext('short form', 'Create table') . '</a></li></ul>';    }} elseif ($GLOBALS['cfg']['LeftFrameLight']) {    /* No need to tell user to select database if we're showing complete list */    if (!$list) {        echo '<p>' . __('Please select a database') . '</p>';    }} else {    echo '<div id="databaseList">' . "\n";    $_url_params = array('pos' => $pos);    PMA_listNavigator(count($GLOBALS['pma']->databases), $pos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxDbList']);    echo '</div>' . "\n";    $common_url_query = PMA_generate_common_url();    PMA_displayDbList($GLOBALS['pma']->databases->getGroupedDetails($_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']), $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']);}/** * displays collapsable db list * * @global  integer $element_counter * @global  string $img_minus * @global  string $img_plus * @global  string $href_left * @global  string $db_start * @global  string $common_url_query * @param array   $ext_dblist extended db list * @param integer $offset * @param integer $count */function PMA_displayDbList($ext_dblist, $offset, $count){    global $element_counter, $img_minus, $img_plus, $href_left,        $db_start, $common_url_query;    // get table list, for all databases    // doing this in one step takes advantage of a single query with information_schema!    $tables_full = PMA_DBI_get_tables_full($GLOBALS['pma']->databases->getLimitedItems($offset, $count));    $url_dbgroup = '';    echo '<ul id="leftdatabaselist">';    $close_db_group = false;    foreach ($ext_dblist as $group => $db_group) {        if (count($GLOBALS['pma']->databases) > 1) {            if ($close_db_group) {                $url_dbgroup = '';                echo '</ul>';                echo '</li>';                $close_db_group = false;            }            if (count($db_group) > 1) {                $close_db_group = true;                $url_dbgroup = '&amp;dbgroup=' . urlencode($group);                $common_url_query = PMA_generate_common_url() . $url_dbgroup;                $element_counter++;                echo '<li class="dbgroup">';                if ((! empty($_REQUEST['dbgroup']) && $_REQUEST['dbgroup'] == $group)                  || $db_start == $group || strpos($db_start, $group) === 0) {                    // display + only if this db(group) is not preselected                    printf($href_left, $element_counter, PMA_generate_common_url());                    printf($img_minus, $element_counter);                } else {                    printf($href_left, $element_counter, $common_url_query);                    printf($img_plus, $element_counter);                }                echo '</a> ' . $group . "\n";                if ((! empty($_REQUEST['dbgroup']) && $_REQUEST['dbgroup'] == $group)                  || $db_start == $group || strpos($db_start, $group) === 0) {                    echo '<ul id="subel' . $element_counter . '">' . "\n";                } else {                    echo '<ul id="subel' . $element_counter . '"'                        .' style="display: none">' . "\n";                }            }        }        foreach ($db_group as $db) {            $common_url_query = PMA_generate_common_url($db['name']) . $url_dbgroup;            $element_counter++;            // Displays the database name            echo '<li>' . "\n";            if (count($GLOBALS['pma']->databases) > 1) {                // only with more than one db we need collapse ...                if ($db_start != $db['name'] || $db['num_tables'] < 1) {                    // display + only if this db is not preselected                    // or table count is 0                    printf($href_left, $element_counter, $common_url_query);                    printf($img_plus, $element_counter);                } else {                    printf($href_left, $element_counter,                        PMA_generate_common_url() . $url_dbgroup);                    printf($img_minus, $element_counter);                }                echo '</a>';                // ... and we need to refresh both frames on db selection                ?>                <a class="item"                    id="<?php echo htmlspecialchars($db['name']); ?>"                    href="index.php?<?php echo $common_url_query; ?>"                    target="_parent"                    title="<?php echo htmlspecialchars($db['comment']); ?>"                    onclick="                        if (! toggle('<?php echo $element_counter; ?>', true))                            window.parent.goTo('./navigation.php?<?php echo $common_url_query; ?>');                        window.parent.goTo('./<?php echo $GLOBALS['cfg']['DefaultTabDatabase']                            . '?' . $common_url_query; ?>', 'main');                        return false;">                    <?php                    // Might be unset if CountTables directive is false                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'rtl') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    echo htmlspecialchars($db['disp_name']);                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'ltr') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    ?>                </a>                <?php            } else {                // with only 1 db available we dont need to refresh navi frame                // on db selection, only phpmain                ?>                <a href="<?php echo $GLOBALS['cfg']['DefaultTabDatabase']                    . '?' . $common_url_query; ?>"                    id="<?php echo htmlspecialchars($db['name']); ?>"                    title="<?php echo htmlspecialchars($db['comment']); ?>">                    <?php                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'rtl') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    echo htmlspecialchars($db['disp_name']);                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'ltr') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    ?>                </a>                <?php            }            if (($GLOBALS['cfg']['Server']['CountTables'] === false) || $db['num_tables']) {                if (isset($tables_full[$db['name']])) {                    $tables = PMA_getTableList($db['name'], $tables_full[$db['name']]);                } elseif (isset($tables_full[strtolower($db['name'])])) {                    // on windows with lower_case_table_names = 1                    // MySQL returns                    // with SHOW DATABASES or information_schema.SCHEMATA: `Test`                    // but information_schema.TABLES gives `test`                    // bug #1436171                    // sf.net/tracker/?func=detail&aid=1436171&group_id=23067&atid=377408                    $tables = PMA_getTableList($db['name'], $tables_full[strtolower($db['name'])]);                } else {                    $tables = PMA_getTableList($db['name']);                }                $child_visible                    = (bool) (count($GLOBALS['pma']->databases) === 1 || $db_start == $db['name']);                PMA_displayTableList($tables, $child_visible, '', $db['name']);            } elseif ($GLOBALS['cfg']['LeftFrameLight']) {                // no tables and LeftFrameLight:                // display message no tables in selected db                echo '<p>' . __('Please select a database') . '</p>' . "\n";            }            echo '</li>' . "\n";        } // end foreach db    } // end foreach group    if ($close_db_group) {        $url_dbgroup = '';        echo '</ul>';        echo '</li>';        $close_db_group = false;    }    echo '</ul>' . "\n";}/** * display unordered list of tables * calls itself recursively if table in given list * is a list itself * * @global  integer the element counter * @global  string  html code for '-' image * @global  string  html code for '+' image * @global  string  html code for self link * @param array   $tables         array of tables/tablegroups * @param boolean $visible        whether the list is visible or not * @param string  $tab_group_full full tab group name * @param string  $table_db       db of this table */function PMA_displayTableList($tables, $visible = false,    $tab_group_full = '', $table_db = ''){    if (! is_array($tables) || count($tables) === 0) {        return;    }    global $element_counter, $img_minus, $img_plus, $href_left;    $sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];    if ($visible) {        echo '<ul id="subel' . $element_counter . '">';    } else {        echo '<ul id="subel' . $element_counter . '" style="display: none">';    }    foreach ($tables as $group => $table) {        // only allow grouping if the group has more than 1 table        if (isset($table['is' . $sep . 'group']) && $table['tab' . $sep . 'count'] > 1) {            $common_url_query = $GLOBALS['common_url_query']                . '&amp;tbl_group=' . urlencode($tab_group_full . $group);            $element_counter++;            echo '<li>' . "\n";            if ($visible             && ((isset($_REQUEST['tbl_group'])               && (strpos($_REQUEST['tbl_group'], $group) === 0                || strpos($_REQUEST['tbl_group'], $sep . $group) !== false))              || strpos($GLOBALS['table'], $group) === 0)) {                printf($href_left, $element_counter,                    $GLOBALS['common_url_query'] . '&amp;tbl_group=' . $tab_group_full);                printf($img_minus, $element_counter);            } else {                printf($href_left, $element_counter, $common_url_query);                printf($img_plus, $element_counter);            }            echo '</a>';            ?>            <a href="index.php?<?php echo $common_url_query; ?>"                target="_parent"                onclick="                    if (! toggle('<?php echo $element_counter; ?>', true))                        window.parent.goTo('./navigation.php?<?php echo $common_url_query; ?>');                    window.parent.goTo('./<?php echo $GLOBALS['cfg']['DefaultTabDatabase']                        . '?' . $common_url_query; ?>', 'main');                    return false;">                <?php                if ($GLOBALS['text_dir'] === 'rtl') {                    echo ' <bdo dir="ltr">(' . $table['tab' . $sep . 'count'] . ')</bdo> ';                }                echo htmlspecialchars(substr($group, 0, strlen($group) - strlen($sep)));                if ($GLOBALS['text_dir'] === 'ltr') {                    echo ' <bdo dir="ltr">(' . $table['tab' . $sep . 'count'] . ')</bdo> ';                }                ?>            </a>            <?php            unset($table['is' . $sep . 'group']);            unset($table['tab' . $sep . 'group']);            unset($table['tab' . $sep . 'count']);            if ($visible &&              ((isset($_REQUEST['tbl_group'])                && (strpos($_REQUEST['tbl_group'], $group) === 0                || strpos($_REQUEST['tbl_group'], $sep . $group) !== false))              || strpos($GLOBALS['table'], $group) === 0)) {                PMA_displayTableList($table, true,                    $tab_group_full . $group, $table_db);            } else {                PMA_displayTableList($table, false, '', $table_db);            }            echo '</li>' . "\n";        } elseif (is_array($table)) {            // the table was not grouped because it is the only one with its prefix            while (isset($table['is' . $sep . 'group'])) {                // get the array with the actual table information                foreach ($table as $value) {                    if (is_array($value)) {                        $table = $value;                    }                }            }            $link_title = PMA_getTitleForTarget($GLOBALS['cfg']['LeftDefaultTabTable']);            // quick access icon next to each table name            echo '<li>' . "\n";            echo '<a class="tableicon" title="'                . htmlspecialchars($link_title)                . ': ' . htmlspecialchars($table['Comment'])                .' (' . PMA_formatNumber($table['Rows'], 0) . ' ' . __('Rows') . ')"'                .' id="quick_' . htmlspecialchars($table_db . '.' . $table['Name']) . '"'                .' href="' . $GLOBALS['cfg']['LeftDefaultTabTable'] . '?'                . $GLOBALS['common_url_query']                .'&amp;table=' . urlencode($table['Name'])                .'&amp;goto=' . $GLOBALS['cfg']['LeftDefaultTabTable']                . '" >';            $attr = array('id' => 'icon_' . htmlspecialchars($table_db . '.' . $table['Name']));            if (PMA_Table::isView($table_db, $table['Name'])) {                echo PMA_getImage('s_views.png', htmlspecialchars($link_title), $attr);            } else {                echo PMA_getImage('b_browse.png', htmlspecialchars($link_title), $attr);            }            echo '</a>';            // link for the table name itself            $href = $GLOBALS['cfg']['DefaultTabTable'] . '?'                .$GLOBALS['common_url_query'] . '&amp;table='                .urlencode($table['Name']) . '&amp;pos=0';            echo '<a href="' . $href            . '" title="' . htmlspecialchars(PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabTable']) . ': ' . $table['Comment']                .' (' . PMA_formatNumber($table['Rows'], 0) . ' ' . __('Rows')) . ')"'                .' id="' . htmlspecialchars($table_db . '.' . $table['Name']) . '">'                // preserve spaces in table name                . str_replace(' ', '&nbsp;', htmlspecialchars($table['disp_name'])) . '</a>';            echo '</li>' . "\n";        }    }    echo '</ul>';}echo '</div>' . "\n";PMA_exitNavigationFrame();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';require_once './libraries/ob.lib.php';PMA_outBufferPre();// Check parametersPMA_checkParameters(array('db', 'full_sql_query'));// For re-usability, moved http-headers// to a separate file. It can now be included by libraries/header.inc.php,// querywindow.php.require_once './libraries/header_http.inc.php';/** * Sends the beginning of the html page then returns to the calling script */// Defines the cell alignment values depending on text directionif ($text_dir == 'ltr') {    $cell_align_left  = 'left';    $cell_align_right = 'right';} else {    $cell_align_left  = 'right';    $cell_align_right = 'left';}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $available_languages[$lang][1]; ?>" lang="<?php echo $available_languages[$lang][1]; ?>" dir="<?php echo $text_dir; ?>"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><link rel="icon" href="./favicon.ico" type="image/x-icon" /><link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" /><title><?php echo __('SQL result'); ?> - phpMyAdmin <?php echo PMA_VERSION ?></title><link rel="stylesheet" type="text/css" href="phpmyadmin.css.php?<?php echo PMA_generate_common_url('', ''); ?>&amp;js_frame=print&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" /><?phprequire_once './libraries/header_scripts.inc.php';?></head><body bgcolor="#ffffff"><h1><?php echo __('SQL result'); ?></h1><p>    <strong><?php echo __('Host'); ?>:</strong> <?php echo $cfg['Server']['verbose'] ? $cfg['Server']['verbose'] : $cfg['Server']['host'] . ((!empty($cfg['Server']['port'])) ? ':' . $cfg['Server']['port'] : ''); ?><br />    <strong><?php echo __('Database'); ?>:</strong> <?php echo htmlspecialchars($db); ?><br />    <strong><?php echo __('Generation Time'); ?>:</strong> <?php echo PMA_localisedDate(); ?><br />    <strong><?php echo __('Generated by'); ?>:</strong> phpMyAdmin&nbsp;<?php echo PMA_VERSION; ?>&nbsp;/ MySQL&nbsp;<?php echo PMA_MYSQL_STR_VERSION; ?><br />    <strong><?php echo __('SQL query'); ?>:</strong> <?php echo htmlspecialchars($full_sql_query); ?>;    <?php if (isset($num_rows)) { ?><br />    <strong><?php echo __('Rows'); ?>:</strong> <?php echo $num_rows; ?>    <?php } ?></p><?php/** * Sets a variable to remember headers have been sent */$is_header_sent = true;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays table structure infos like fields/columns, indexes, size, rows * and allows manipulation of indexes and columns/fields * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'tbl_structure.js';$GLOBALS['js_include'][] = 'indexes.js';/** * handle multiple field commands if required * * submit_mult_*_x comes from IE if <input type="img" ...> is used */if (isset($_REQUEST['submit_mult_change_x'])) {    $submit_mult = 'change';} elseif (isset($_REQUEST['submit_mult_drop_x'])) {    $submit_mult = 'drop';} elseif (isset($_REQUEST['submit_mult_primary_x'])) {    $submit_mult = 'primary';} elseif (isset($_REQUEST['submit_mult_index_x'])) {    $submit_mult = 'index';} elseif (isset($_REQUEST['submit_mult_unique_x'])) {    $submit_mult = 'unique';} elseif (isset($_REQUEST['submit_mult_spatial_x'])) {    $submit_mult = 'spatial';} elseif (isset($_REQUEST['submit_mult_fulltext_x'])) {    $submit_mult = 'ftext';} elseif (isset($_REQUEST['submit_mult_browse_x'])) {    $submit_mult = 'browse';} elseif (isset($_REQUEST['submit_mult'])) {    $submit_mult = $_REQUEST['submit_mult'];} elseif (isset($_REQUEST['mult_btn']) && $_REQUEST['mult_btn'] == __('Yes')) {    $submit_mult = 'row_delete';    if (isset($_REQUEST['selected'])) {        $_REQUEST['selected_fld'] = $_REQUEST['selected'];    }}if (! empty($submit_mult) && isset($_REQUEST['selected_fld'])) {    $err_url = 'tbl_structure.php?' . PMA_generate_common_url($db, $table);    if ($submit_mult == 'browse') {        // browsing the table displaying only selected fields/columns        $GLOBALS['active_page'] = 'sql.php';        $sql_query = '';        foreach ($_REQUEST['selected_fld'] as $idx => $sval) {            if ($sql_query == '') {                $sql_query .= 'SELECT ' . PMA_backquote($sval);            } else {                $sql_query .=  ', ' . PMA_backquote($sval);            }        }        // what is this htmlspecialchars() for??        //$sql_query .= ' FROM ' . PMA_backquote(htmlspecialchars($table));        $sql_query .= ' FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table);        include './sql.php';        exit;    } else {        // handle multiple field commands        // handle confirmation of deleting multiple fields/columns        $action = 'tbl_structure.php';        include './libraries/mult_submits.inc.php';        //require_once './libraries/header.inc.php';        //require_once './libraries/tbl_links.inc.php';        if (empty($message)) {            $message = PMA_Message::success();        }    }}/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam();/** * Runs common work */require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_structure.php&amp;back=tbl_structure.php';$url_params['goto'] = 'tbl_structure.php';$url_params['back'] = 'tbl_structure.php';/** * Prepares the table structure display *//** * Gets tables informations */require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';require_once './libraries/Index.class.php';// 2. Gets table keys and retains them// @todo should be: $server->db($db)->table($table)->primary()$primary = PMA_Index::getPrimary($table, $db);$columns_with_unique_index = array();foreach (PMA_Index::getFromTable($table, $db) as $index) {    if ($index->isUnique() && $index->getChoice() == 'UNIQUE') {        $columns = $index->getColumns();        foreach ($columns as $column_name => $dummy) {            $columns_with_unique_index[$column_name] = 1;        }    }}unset($index, $columns, $column_name, $dummy);// 3. Get fields$fields = (array) PMA_DBI_get_columns($db, $table, null, true);// Get more complete field information// For now, this is done just for MySQL 4.1.2+ new TIMESTAMP options// but later, if the analyser returns more information, it// could be executed for any MySQL version and replace// the info given by SHOW FULL COLUMNS FROM.//// We also need this to correctly learn if a TIMESTAMP is NOT NULL, since// SHOW FULL COLUMNS or INFORMATION_SCHEMA incorrectly says NULL// and SHOW CREATE TABLE says NOT NULL (tested// in MySQL 4.0.25 and 5.0.21, http://bugs.mysql.com/20910).$show_create_table = PMA_DBI_fetch_value(        'SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table),        0, 1);$analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));/** * prepare table infos */// action titles (image or string)$titles = array();$titles['Change']               = PMA_getIcon('b_edit.png', __('Change'));$titles['Drop']                 = PMA_getIcon('b_drop.png', __('Drop'));$titles['NoDrop']               = PMA_getIcon('b_drop.png', __('Drop'));$titles['Primary']              = PMA_getIcon('b_primary.png', __('Primary'));$titles['Index']                = PMA_getIcon('b_index.png', __('Index'));$titles['Unique']               = PMA_getIcon('b_unique.png', __('Unique'));$titles['Spatial']              = PMA_getIcon('b_spatial.png', __('Spatial'));$titles['IdxFulltext']          = PMA_getIcon('b_ftext.png', __('Fulltext'));$titles['NoPrimary']            = PMA_getIcon('bd_primary.png', __('Primary'));$titles['NoIndex']              = PMA_getIcon('bd_index.png', __('Index'));$titles['NoUnique']             = PMA_getIcon('bd_unique.png', __('Unique'));$titles['NoSpatial']            = PMA_getIcon('bd_spatial.png', __('Spatial'));$titles['NoIdxFulltext']        = PMA_getIcon('bd_ftext.png', __('Fulltext'));$titles['BrowseDistinctValues'] = PMA_getIcon('b_browse.png', __('Browse distinct values'));// hidden action titles (image and string)$hidden_titles = array();$hidden_titles['BrowseDistinctValues'] = PMA_getIcon('b_browse.png', __('Browse distinct values'), true);$hidden_titles['Primary']              = PMA_getIcon('b_primary.png', __('Add primary key'), true);$hidden_titles['NoPrimary']            = PMA_getIcon('bd_primary.png', __('Add primary key'), true);$hidden_titles['Index']                = PMA_getIcon('b_index.png', __('Add index'), true);$hidden_titles['NoIndex']              = PMA_getIcon('bd_index.png', __('Add index'), true);$hidden_titles['Unique']               = PMA_getIcon('b_unique.png', __('Add unique index'), true);$hidden_titles['NoUnique']             = PMA_getIcon('bd_unique.png', __('Add unique index'), true);$hidden_titles['Spatial']              = PMA_getIcon('b_spatial.png', __('Add SPATIAL index'), true);$hidden_titles['NoSpatial']            = PMA_getIcon('bd_spatial.png', __('Add SPATIAL index'), true);$hidden_titles['IdxFulltext']          = PMA_getIcon('b_ftext.png', __('Add FULLTEXT index'), true);$hidden_titles['NoIdxFulltext']        = PMA_getIcon('bd_ftext.png', __('Add FULLTEXT index'), true);/** * Displays the table structure ('show table' works correct since 3.23.03) *//* TABLE INFORMATION */// table header$i = 0;?><form method="post" action="tbl_structure.php" name="fieldsForm" id="fieldsForm" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>>    <?php echo PMA_generate_common_hidden_inputs($db, $table);    echo '<input type="hidden" name="table_type" value=';    if ($db_is_information_schema) {         echo '"information_schema" />';    } else if ($tbl_is_view) {         echo '"view" />';    } else {         echo '"table" />';    } ?><table id="tablestructure" class="data"><thead><tr>    <th id="th<?php echo ++$i; ?>"></th>    <th id="th<?php echo ++$i; ?>">#</th>    <th id="th<?php echo ++$i; ?>" class="column"><?php echo __('Name'); ?></th>    <th id="th<?php echo ++$i; ?>" class="type"><?php echo __('Type'); ?></th>    <th id="th<?php echo ++$i; ?>" class="collation"><?php echo __('Collation'); ?></th>    <th id="th<?php echo ++$i; ?>" class="attributes"><?php echo __('Attributes'); ?></th>    <th id="th<?php echo ++$i; ?>" class="null"><?php echo __('Null'); ?></th>    <th id="th<?php echo ++$i; ?>" class="default"><?php echo __('Default'); ?></th>    <th id="th<?php echo ++$i; ?>" class="extra"><?php echo __('Extra'); ?></th><?php if ($db_is_information_schema || $tbl_is_view) { ?>    <th id="th<?php echo ++$i; ?>" class="view"><?php echo __('View'); ?></th><?php } else { ?>    <th colspan="7" id="th<?php echo ++$i; ?>" class="action"><?php echo __('Action'); ?></th><?php } ?></tr></thead><tbody><?phpunset($i);// table body// prepare comments$comments_map = array();$mime_map = array();if ($GLOBALS['cfg']['ShowPropertyComments']) {    include_once './libraries/transformations.lib.php';    //$cfgRelation = PMA_getRelationsParam();    $comments_map = PMA_getComments($db, $table);    if ($cfgRelation['mimework'] && $cfg['BrowseMIME']) {        $mime_map = PMA_getMIME($db, $table, true);    }}$rownum    = 0;$aryFields = array();$checked   = (!empty($checkall) ? ' checked="checked"' : '');$save_row  = array();$odd_row   = true;foreach ($fields as $row) {    $save_row[] = $row;    $rownum++;    $aryFields[]      = $row['Field'];    $type             = $row['Type'];    $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);    if ('set' == $extracted_fieldspec['type'] || 'enum' == $extracted_fieldspec['type']) {        $type_nowrap  = '';    } else {        $type_nowrap  = ' nowrap="nowrap"';    }    $type         = $extracted_fieldspec['print_type'];    if (empty($type)) {        $type     = ' ';    }    // for the case ENUM('&#8211;','&ldquo;')    $type         = htmlspecialchars($type);    // in case it is too long    $start = 0;    if (strlen($type) > $GLOBALS['cfg']['LimitChars']) {        $start = 13;        $type = '<abbr title="' . $type . '">' . substr($type, 0, $GLOBALS['cfg']['LimitChars']) . '</abbr>';    }    unset($field_charset);    if ((substr($type, $start, 4) == 'char'        || substr($type, $start, 7) == 'varchar'        || substr($type, $start, 4) == 'text'        || substr($type, $start, 8) == 'tinytext'        || substr($type, $start, 10) == 'mediumtext'        || substr($type, $start, 8) == 'longtext'        || substr($type, $start, 3) == 'set'        || substr($type, $start, 4) == 'enum')        && !$extracted_fieldspec['binary']    ) {        if (strpos($type, ' character set ')) {            $type = substr($type, 0, strpos($type, ' character set '));        }        if (!empty($row['Collation'])) {            $field_charset = $row['Collation'];        } else {            $field_charset = '';        }    } else {        $field_charset = '';    }    // Display basic mimetype [MIME]    if ($cfgRelation['commwork'] && $cfgRelation['mimework'] && $cfg['BrowseMIME'] && isset($mime_map[$row['Field']]['mimetype'])) {        $type_mime = '<br />MIME: ' . str_replace('_', '/', $mime_map[$row['Field']]['mimetype']);    } else {        $type_mime = '';    }    $attribute     = $extracted_fieldspec['attribute'];    // MySQL 4.1.2+ TIMESTAMP options    // (if on_update_current_timestamp is set, then it's TRUE)    if (isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['on_update_current_timestamp'])) {        $attribute = 'on update CURRENT_TIMESTAMP';    }    // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the    // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe    // the latter.    if (!empty($analyzed_sql[0]['create_table_fields'][$row['Field']]['type']) && $analyzed_sql[0]['create_table_fields'][$row['Field']]['type'] == 'TIMESTAMP' && $analyzed_sql[0]['create_table_fields'][$row['Field']]['timestamp_not_null']) {        $row['Null'] = '';    }    if (! isset($row['Default'])) {        if ($row['Null'] == 'YES') {            $row['Default'] = '<i>NULL</i>';        }    } else {        $row['Default'] = htmlspecialchars($row['Default']);    }    $field_encoded = urlencode($row['Field']);    $field_name    = htmlspecialchars($row['Field']);    $displayed_field_name = $field_name;    // underline commented fields and display a hover-title (CSS only)    if (isset($comments_map[$row['Field']])) {        $displayed_field_name = '<span class="commented_column" title="' . htmlspecialchars($comments_map[$row['Field']]) . '">' . $field_name . '</span>';    }    if ($primary && $primary->hasColumn($field_name)) {        $displayed_field_name = '<u>' . $field_name . '</u>';    }    echo "\n";    ?><tr class="<?php echo $odd_row ? 'odd': 'even'; $odd_row = !$odd_row; ?>">    <td align="center">        <input type="checkbox" name="selected_fld[]" value="<?php echo htmlspecialchars($row['Field']); ?>" id="checkbox_row_<?php echo $rownum; ?>" <?php echo $checked; ?> />    </td>    <td align="right">        <?php echo $rownum; ?>    </td>    <th nowrap="nowrap"><label for="checkbox_row_<?php echo $rownum; ?>"><?php echo $displayed_field_name; ?></label></th>    <td<?php echo $type_nowrap; ?>><bdo dir="ltr" xml:lang="en"><?php echo $type; echo $type_mime; ?></bdo></td>    <td><?php echo (empty($field_charset) ? '' : '<dfn title="' . PMA_getCollationDescr($field_charset) . '">' . $field_charset . '</dfn>'); ?></td>    <td nowrap="nowrap" class="column_attribute"><?php echo $attribute; ?></td>    <td><?php echo (($row['Null'] == 'YES') ? __('Yes') : __('No')); ?></td>    <td nowrap="nowrap"><?php    if (isset($row['Default'])) {        if ($extracted_fieldspec['type'] == 'bit') {            // here, $row['Default'] contains something like b'010'            echo PMA_convert_bit_default_value($row['Default']);        } else {            echo $row['Default'];        }    } else {        echo '<i>' . _pgettext('None for default', 'None') . '</i>';    } ?></td>    <td nowrap="nowrap"><?php echo strtoupper($row['Extra']); ?></td>    <td align="center" class="browse">        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('SELECT COUNT(*) AS ' . PMA_backquote(__('Rows')) . ', ' . PMA_backquote($row['Field']) . ' FROM ' . PMA_backquote($table) . ' GROUP BY ' . PMA_backquote($row['Field']) . ' ORDER BY ' . PMA_backquote($row['Field'])); ?>">            <?php echo $titles['BrowseDistinctValues']; ?></a>    </td>    <?php if (! $tbl_is_view && ! $db_is_information_schema) { ?>    <td align="center" class="edit">        <a href="tbl_alter.php?<?php echo $url_query; ?>&amp;field=<?php echo $field_encoded; ?>">            <?php echo $titles['Change']; ?></a>    </td>    <td align="center" class="drop">        <a <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="drop_column_anchor"' : ''); ?> href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' DROP ' . PMA_backquote($row['Field'])); ?>&amp;dropped_column=<?php echo urlencode($row['Field']); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('Column %s has been dropped'), htmlspecialchars($row['Field']))); ?>" >            <?php echo $titles['Drop']; ?></a>    </td>    <td align="center" class="primary">        <?php        if ($type == 'text' || $type == 'blob' || 'ARCHIVE' == $tbl_type || ($primary && $primary->hasColumn($field_name))) {            echo $titles['NoPrimary'] . "\n";            $primary_enabled = false;        } else {            echo "\n";            ?>        <a class="add_primary_key_anchor" href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ($primary ? ' DROP PRIMARY KEY,' : '') . ' ADD PRIMARY KEY(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('A primary key has been added on %s'), htmlspecialchars($row['Field']))); ?>" >            <?php echo $titles['Primary']; ?></a>            <?php $primary_enabled = true;        }        echo "\n";        ?>    </td>    <td align="center" class="unique">        <?php        if ($type == 'text' || $type == 'blob' || 'ARCHIVE' == $tbl_type || isset($columns_with_unique_index[$field_name])) {            echo $titles['NoUnique'] . "\n";            $unique_enabled = false;        } else {            echo "\n";            ?>        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD UNIQUE(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">            <?php echo $titles['Unique']; ?></a>            <?php $unique_enabled = true;        }        echo "\n";        ?>    </td>    <td align="center" class="index">        <?php        if ($type == 'text' || $type == 'blob' || 'ARCHIVE' == $tbl_type) {            echo $titles['NoIndex'] . "\n";            $index_enabled = false;        } else {            echo "\n";            ?>        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD INDEX(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">            <?php echo $titles['Index']; ?></a>            <?php            $index_enabled = true;        }        echo "\n";        ?>    </td>    <td align="center" class="spatial">        <?php        $spatial_types = array(            'geometry', 'point', 'linestring', 'polygon', 'multipoint',            'multilinestring', 'multipolygon', 'geomtrycollection'        );        if (! in_array($type, $spatial_types) || 'MYISAM' != $tbl_type) {            echo $titles['NoSpatial'] . "\n";            $spatial_enabled = false;        } else {            echo "\n";            ?>        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD SPATIAL(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">            <?php echo $titles['Spatial']; ?></a>            <?php            $spatial_enabled = true;        }        echo "\n";        ?>    </td>    <?php        if (! empty($tbl_type) && ($tbl_type == 'MYISAM' || $tbl_type == 'ARIA' || $tbl_type == 'MARIA' || ($tbl_type == 'INNODB' && PMA_MYSQL_INT_VERSION >= 50604))            // FULLTEXT is possible on TEXT, CHAR and VARCHAR            && (strpos(' ' . $type, 'text') || strpos(' ' . $type, 'char'))) {            echo "\n";            ?>    <td align="center" nowrap="nowrap" class="fulltext">        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD FULLTEXT(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">            <?php echo $titles['IdxFulltext']; ?></a>            <?php $fulltext_enabled = true; ?>    </td>            <?php        } else {            echo "\n";        ?>    <td align="center" nowrap="nowrap" class="fulltext">        <?php echo $titles['NoIdxFulltext'] . "\n"; ?>        <?php $fulltext_enabled = false; ?>    </td>        <?php        } // end if... else...        echo "\n";        ?>    <td class="more_opts" id="more_opts<?php echo $rownum; ?>">        <?php echo PMA_getImage('more.png', __('Show more actions')); ?> <?php echo __('More'); ?>        <div class="structure_actions_dropdown" id="row_<?php echo $rownum; ?>">            <div class="action_browse">                <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('SELECT COUNT(*) AS ' . PMA_backquote(__('Rows')) . ', ' . PMA_backquote($row['Field']) . ' FROM ' . PMA_backquote($table) . ' GROUP BY ' . PMA_backquote($row['Field']) . ' ORDER BY ' . PMA_backquote($row['Field'])); ?>">                    <?php echo $hidden_titles['BrowseDistinctValues']; ?>                </a>            </div>            <div <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="action_primary"' : ''); ?>>                <?php                if (isset($primary_enabled)) {                     if ($primary_enabled) { ?>                          <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ($primary ? ' DROP PRIMARY KEY,' : '') . ' ADD PRIMARY KEY(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('A primary key has been added on %s'), htmlspecialchars($row['Field']))); ?>">                             <?php echo $hidden_titles['Primary']; ?>                         </a>                     <?php                     } else {                         echo $hidden_titles['NoPrimary'];                     }                } ?>            </div>            <div class="action_unique">                <?php                if (isset($unique_enabled)) {                     if ($unique_enabled) { ?>                         <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD UNIQUE(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">                             <?php echo $hidden_titles['Unique']; ?>                         </a>                     <?php                     } else {                         echo $hidden_titles['NoUnique'];                     }                } ?>            </div>            <div class="action_index">               <?php                if (isset($index_enabled)) {                     if ($index_enabled) { ?>                         <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD INDEX(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">                             <?php echo $hidden_titles['Index']; ?>                         </a>                     <?php                     } else {                         echo $hidden_titles['NoIndex'];                     }                  } ?>            </div>            <?php if (!PMA_DRIZZLE) { ?>            <div class="action_spatial">                <?php                if (isset($spatial_enabled)) {                    if ($spatial_enabled) { ?>                        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD SPATIAL(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">                            <?php echo $hidden_titles['Spatial']; ?>                        </a>                    <?php                    } else {                        echo $hidden_titles['NoSpatial'];                    }                } ?>            </div>            <div class="action_fulltext">                <?php                if (isset($fulltext_enabled)) {                     if ($fulltext_enabled) { ?>                         <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD FULLTEXT(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">                             <?php echo $hidden_titles['IdxFulltext']; ?>                         </a>                     <?php                     } else {                         echo $hidden_titles['NoIdxFulltext'];                     }                } ?>            </div>            <?php } ?>        </div>    </td>    <?php    } // end if (! $tbl_is_view && ! $db_is_information_schema)    ?></tr>    <?php    unset($field_charset);} // end foreachecho '</tbody>' . "\n"    .'</table>' . "\n";$checkall_url = 'tbl_structure.php?' . PMA_generate_common_url($db, $table);?><img class="selectallarrow" src="<?php echo $pmaThemeImage . 'arrow_' . $text_dir . '.png'; ?>"    width="38" height="22" alt="<?php echo __('With selected:'); ?>" /><a href="<?php echo $checkall_url; ?>&amp;checkall=1"    onclick="if (markAllRows('fieldsForm')) return false;">    <?php echo __('Check All'); ?></a>/<a href="<?php echo $checkall_url; ?>"    onclick="if (unMarkAllRows('fieldsForm')) return false;">    <?php echo __('Uncheck All'); ?></a><i><?php echo __('With selected:'); ?></i><?phpPMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_browse', __('Browse'), 'b_browse.png', 'browse');if (! $tbl_is_view && ! $db_is_information_schema) {    PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_change', __('Change'), 'b_edit.png', 'change');    PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_drop', __('Drop'), 'b_drop.png', 'drop');    if ('ARCHIVE' != $tbl_type) {        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_primary', __('Primary'), 'b_primary.png', 'primary');        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_unique', __('Unique'), 'b_unique.png', 'unique');        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_index', __('Index'), 'b_index.png', 'index');    }    if (! empty($tbl_type) && $tbl_type == 'MYISAM') {        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_spatial', __('Spatial'), 'b_spatial.png', 'spatial');    }    if (! empty($tbl_type) && ($tbl_type == 'MYISAM' || $tbl_type == 'ARIA' || $tbl_type == 'MARIA')) {        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_fulltext', __('Fulltext'), 'b_ftext.png', 'ftext');    }}?></form><hr /><?php/** * Work on the table */if ($tbl_is_view) {    $create_view = PMA_DBI_get_definition($db, 'VIEW', $table);    $create_view = preg_replace('@^CREATE@', 'ALTER', $create_view);    echo PMA_linkOrButton(        'tbl_sql.php' . PMA_generate_common_url(            $url_params +            array(                'sql_query' => $create_view,                'show_query' => '1',            )        ),        PMA_getIcon('b_edit.png', __('Edit view'), true)        );}?><a href="tbl_printview.php?<?php echo $url_query; ?>"><?phpecho PMA_getIcon('b_print.png', __('Print view'), true);?></a><?phpif (! $tbl_is_view && ! $db_is_information_schema) {    // if internal relations are available, or foreign keys are supported    // ($tbl_type comes from libraries/tbl_info.inc.php)    if ($cfgRelation['relwork'] || PMA_foreignkey_supported($tbl_type)) {        ?><a href="tbl_relation.php?<?php echo $url_query; ?>"><?php        echo PMA_getIcon('b_relations.png', __('Relation view'), true);        ?></a>        <?php    }    if (!PMA_DRIZZLE) {        ?><a href="sql.php?<?php echo $url_query; ?>&amp;session_max_rows=all&amp;sql_query=<?php echo urlencode('SELECT * FROM ' . PMA_backquote($table) . ' PROCEDURE ANALYSE()'); ?>"><?php        echo PMA_getIcon('b_tblanalyse.png', __('Propose table structure'), true);        ?></a><?php        echo PMA_showMySQLDocu('Extending_MySQL', 'procedure_analyse') . "\n";    }    if (PMA_Tracker::isActive()) {        echo '<a href="tbl_tracking.php?' . $url_query . '">';        echo PMA_getIcon('eye.png', __('Track table'), true);        echo '</a>';    }    ?>    <br /><form method="post" action="tbl_addfield.php" id="addColumns" name="addColumns" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>    onsubmit="return checkFormElementInRange(this, 'num_fields', '<?php echo str_replace('\'', '\\\'', __('You have to add at least one column.')); ?>', 1)">    <?php    echo PMA_generate_common_hidden_inputs($db, $table);    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_insrow.png', __('Add column'));    }    echo sprintf(__('Add %s column(s)'), '<input type="text" name="num_fields" size="2" maxlength="2" value="1" onfocus="this.select()" />');    // I tried displaying the drop-down inside the label but with Firefox    // the drop-down was blinking    $fieldOptions = '<select name="after_field" onclick="this.form.field_where[2].checked=true" onchange="this.form.field_where[2].checked=true">';    foreach ($aryFields as $fieldname) {        $fieldOptions .= '<option value="' . htmlspecialchars($fieldname) . '">' . htmlspecialchars($fieldname) . '</option>' . "\n";    }    unset($aryFields);    $fieldOptions .= '</select>';    $choices = array(        'last'  => __('At End of Table'),        'first' => __('At Beginning of Table'),        'after' => sprintf(__('After %s'), '')    );    PMA_display_html_radio('field_where', $choices, 'last', false);    echo $fieldOptions;    unset($fieldOptions, $choices);    ?><input type="submit" value="<?php echo __('Go'); ?>" /></form><iframe class="IE_hack" scrolling="no"></iframe><hr /><div id="index_div" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?> >    <?php}/** * If there are more than 20 rows, displays browse/select/insert/empty/drop * links again */if (count($fields) > 20) {    include './libraries/tbl_links.inc.php';} // end if (count($fields) > 20)/** * Displays indexes */if (! $tbl_is_view && ! $db_is_information_schema && 'ARCHIVE' !=  $tbl_type) {    PMA_generate_slider_effect('indexes', __('Indexes'));    /**     * Display indexes     */    echo PMA_Index::getView($table, $db);    ?>        <fieldset class="tblFooters" style="text-align: left;">            <form action="./tbl_indexes.php" method="post">                <?php                echo PMA_generate_common_hidden_inputs($db, $table);                echo sprintf(__('Create an index on &nbsp;%s&nbsp;columns'),                    '<input type="text" size="2" name="added_fields" value="1" />');                ?>                <input type="hidden" name="create_index" value="1" />                <input class="add_index<?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' ajax' : '');?>" type="submit" value="<?php echo __('Go'); ?>" />            </form>        </fieldset>    </div></div>    <?php}/** * Displays Space usage and row statistics */// BEGIN - Calc Table Space// Get valid statistics whatever is the table typeif ($cfg['ShowStats']) {    echo '<div id="tablestatistics">';    if (empty($showtable)) {        $showtable = PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], null, true);    }    $nonisam     = false;    $is_innodb = (isset($showtable['Type']) && $showtable['Type'] == 'InnoDB');    if (isset($showtable['Type']) && !preg_match('@ISAM|HEAP@i', $showtable['Type'])) {        $nonisam = true;    }    // Gets some sizes    $mergetable = PMA_Table::isMerge($GLOBALS['db'], $GLOBALS['table']);    // this is to display for example 261.2 MiB instead of 268k KiB    $max_digits = 3;    $decimals = 1;    list($data_size, $data_unit)         = PMA_formatByteDown($showtable['Data_length'], $max_digits, $decimals);    if ($mergetable == false) {        list($index_size, $index_unit)   = PMA_formatByteDown($showtable['Index_length'], $max_digits, $decimals);    }    // InnoDB returns a huge value in Data_free, do not use it    if (! $is_innodb && isset($showtable['Data_free']) && $showtable['Data_free'] > 0) {        list($free_size, $free_unit)     = PMA_formatByteDown($showtable['Data_free'], $max_digits, $decimals);        list($effect_size, $effect_unit) = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length'] - $showtable['Data_free'], $max_digits, $decimals);    } else {        list($effect_size, $effect_unit) = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length'], $max_digits, $decimals);    }    list($tot_size, $tot_unit)           = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length'], $max_digits, $decimals);    if ($table_info_num_rows > 0) {        list($avg_size, $avg_unit)       = PMA_formatByteDown(($showtable['Data_length'] + $showtable['Index_length']) / $showtable['Rows'], 6, 1);    }    // Displays them    $odd_row = false;    ?>    <fieldset>    <legend><?php echo __('Information'); ?></legend>    <a name="showusage"></a>    <?php if (! $tbl_is_view && ! $db_is_information_schema) { ?>    <table id="tablespaceusage" class="data">    <caption class="tblHeaders"><?php echo __('Space usage'); ?></caption>    <thead>    <tr>        <th><?php echo __('Type'); ?></th>        <th colspan="2"><?php echo __('Usage'); ?></th>    </tr>    </thead>    <tbody>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Data'); ?></th>        <td class="value"><?php echo $data_size; ?></td>        <td class="unit"><?php echo $data_unit; ?></td>    </tr>        <?php        if (isset($index_size)) {            ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Index'); ?></th>        <td class="value"><?php echo $index_size; ?></td>        <td class="unit"><?php echo $index_unit; ?></td>    </tr>            <?php        }        if (isset($free_size)) {            ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?> error">        <th class="name"><?php echo __('Overhead'); ?></th>        <td class="value"><?php echo $free_size; ?></td>        <td class="unit"><?php echo $free_unit; ?></td>    </tr>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Effective'); ?></th>        <td class="value"><?php echo $effect_size; ?></td>        <td class="unit"><?php echo $effect_unit; ?></td>    </tr>            <?php        }        if (isset($tot_size) && $mergetable == false) {            ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Total'); ?></th>        <td class="value"><?php echo $tot_size; ?></td>        <td class="unit"><?php echo $tot_unit; ?></td>    </tr>            <?php        }        // Optimize link if overhead        if (isset($free_size) && !PMA_DRIZZLE && ($tbl_type == 'MYISAM' || $tbl_type == 'ARIA' || $tbl_type == 'MARIA' || $tbl_type == 'BDB')) {            ?>    <tr class="tblFooters">        <td colspan="3" align="center">            <a href="sql.php?<?php echo $url_query; ?>&pos=0&amp;sql_query=<?php echo urlencode('OPTIMIZE TABLE ' . PMA_backquote($table)); ?>"><?php            echo PMA_getIcon('b_tbloptimize.png', __('Optimize table'));            ?></a>        </td>    </tr>            <?php        }        ?>    </tbody>    </table>        <?php    }    $odd_row = false;    ?>    <table id="tablerowstats" class="data">    <caption class="tblHeaders"><?php echo __('Row Statistics'); ?></caption>    <thead>    <tr>        <th><?php echo __('Statements'); ?></th>        <th><?php echo __('Value'); ?></th>    </tr>    </thead>    <tbody>    <?php    if (isset($showtable['Row_format'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Format'); ?></th>        <td class="value"><?php        if ($showtable['Row_format'] == 'Fixed') {            echo __('static');        } elseif ($showtable['Row_format'] == 'Dynamic') {            echo __('dynamic');        } else {            echo $showtable['Row_format'];        }        ?></td>    </tr>        <?php    }    if (! empty($showtable['Create_options'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Options'); ?></th>        <td class="value"><?php        if ($showtable['Create_options'] == 'partitioned') {            echo __('partitioned');        } else {            echo $showtable['Create_options'];        }        ?></td>    </tr>        <?php    }    if (!empty($tbl_collation)) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Collation'); ?></th>        <td class="value"><?php            echo '<dfn title="' . PMA_getCollationDescr($tbl_collation) . '">' . $tbl_collation . '</dfn>';            ?></td>    </tr>        <?php    }    if (!$is_innodb && isset($showtable['Rows'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Rows'); ?></th>        <td class="value"><?php echo PMA_formatNumber($showtable['Rows'], 0); ?></td>    </tr>        <?php    }    if (!$is_innodb && isset($showtable['Avg_row_length']) && $showtable['Avg_row_length'] > 0) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Row length'); ?> &oslash;</th>        <td class="value"><?php echo PMA_formatNumber($showtable['Avg_row_length'], 0); ?></td>    </tr>        <?php    }    if (!$is_innodb && isset($showtable['Data_length']) && $showtable['Rows'] > 0 && $mergetable == false) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Row size'); ?> &oslash;</th>        <td class="value"><?php echo $avg_size . ' ' . $avg_unit; ?></td>    </tr>        <?php    }    if (isset($showtable['Auto_increment'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Next autoindex'); ?></th>        <td class="value"><?php echo PMA_formatNumber($showtable['Auto_increment'], 0); ?></td>    </tr>        <?php    }    if (isset($showtable['Create_time'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Creation'); ?></th>        <td class="value"><?php echo PMA_localisedDate(strtotime($showtable['Create_time'])); ?></td>    </tr>        <?php    }    if (isset($showtable['Update_time'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Last update'); ?></th>        <td class="value"><?php echo PMA_localisedDate(strtotime($showtable['Update_time'])); ?></td>    </tr>        <?php    }    if (isset($showtable['Check_time'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Last check'); ?></th>        <td class="value"><?php echo PMA_localisedDate(strtotime($showtable['Check_time'])); ?></td>    </tr>        <?php    }    ?>    </tbody>    </table>    </fieldset>    <!-- close tablestatistics div -->    </div>    <?php}// END - Calc Table Spaceecho '<div class="clearfloat"></div>' . "\n";/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'import.js';/** * Gets tables informations and displays top links */require './libraries/db_common.inc.php';require './libraries/db_info.inc.php';$import_type = 'database';require './libraries/display_import.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require './libraries/StorageEngine.class.php';/** * Include settings for relation stuff * get all variables needed for exporting relational schema * in $cfgRelation */require_once './libraries/relation.lib.php';$cfgRelation = PMA_getRelationsParam();require_once './libraries/transformations.lib.php';require_once './libraries/Index.class.php';require_once "./libraries/schema/Export_Relation_Schema.class.php";/** * get all the export options and verify * call and include the appropriate Schema Class depending on $export_type * default is PDF */global  $db, $export_type;if (!isset($export_type) || !preg_match('/^[a-zA-Z]+$/', $export_type)) {    $export_type = 'pdf';}PMA_DBI_select_db($db);$path = PMA_securePath(ucfirst($export_type));if (!file_exists('./libraries/schema/' . $path . '_Relation_Schema.class.php')) {    PMA_Export_Relation_Schema::dieSchema($_POST['chpage'], $export_type, __('File doesn\'t exist'));}require "./libraries/schema/".$path."_Relation_Schema.class.php";$obj_schema = eval("new PMA_".$path."_Relation_Schema();");
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * SQL import plugin for phpMyAdmin * * @package PhpMyAdmin-Import * @subpackage SQL */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['sql'] = array(        'text'          => __('SQL'),        'extension'     => 'sql',        'options_text'  => __('Options'),    );    $compats = PMA_DBI_getCompatibilities();    if (count($compats) > 0) {        $values = array();        foreach ($compats as $val) {            $values[$val] = $val;        }        $plugin_list['sql']['options'] = array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array(                'type'      => 'select',                'name'      => 'compatibility',                'text'      => __('SQL compatibility mode:'),                'values'    => $values,                'doc'       => array(                    'manual_MySQL_Database_Administration',                    'Server_SQL_mode',                ),            ),            array(                'type' => 'bool',                'name' => 'no_auto_value_on_zero',                'text' => __('Do not use <code>AUTO_INCREMENT</code> for zero values'),                'doc'       => array(                    'manual_MySQL_Database_Administration',                    'Server_SQL_mode',                    'sqlmode_no_auto_value_on_zero'                ),            ),            array('type' => 'end_group'),        );    }    /* We do not define function when plugin is just queried for information above */    return;}$buffer = '';// Defaults for parser$sql = '';$start_pos = 0;$i = 0;$len= 0;$big_value = 2147483647;$delimiter_keyword = 'DELIMITER '; // include the space because it's mandatory$length_of_delimiter_keyword = strlen($delimiter_keyword);if (isset($_POST['sql_delimiter'])) {    $sql_delimiter = $_POST['sql_delimiter'];} else {    $sql_delimiter = ';';}// Handle compatibility options$sql_modes = array();if (isset($_REQUEST['sql_compatibility']) && 'NONE' != $_REQUEST['sql_compatibility']) {    $sql_modes[] = $_REQUEST['sql_compatibility'];}if (isset($_REQUEST['sql_no_auto_value_on_zero'])) {    $sql_modes[] = 'NO_AUTO_VALUE_ON_ZERO';}if (count($sql_modes) > 0) {    PMA_DBI_try_query('SET SQL_MODE="' . implode(',', $sql_modes) . '"');}unset($sql_modes);/** * will be set in PMA_importGetNextChunk() * * @global boolean $GLOBALS['finished'] */$GLOBALS['finished'] = false;while (!($GLOBALS['finished'] && $i >= $len) && !$error && !$timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        // subtract data we didn't handle yet and stop processing        $offset -= strlen($buffer);        break;    } elseif ($data === true) {        // Handle rest of buffer    } else {        // Append new data to buffer        $buffer .= $data;        // free memory        unset($data);        // Do not parse string when we're not at the end and don't have ; inside        if ((strpos($buffer, $sql_delimiter, $i) === false) && !$GLOBALS['finished']) {            continue;        }    }    // Current length of our buffer    $len = strlen($buffer);    // Grab some SQL queries out of it    while ($i < $len) {        $found_delimiter = false;        // Find first interesting character        $old_i = $i;        // this is about 7 times faster that looking for each sequence i        // one by one with strpos()        if (preg_match('/(\'|"|#|-- |\/\*|`|(?i)(?<![A-Z0-9_])' . $delimiter_keyword . ')/', $buffer, $matches, PREG_OFFSET_CAPTURE, $i)) {            // in $matches, index 0 contains the match for the complete            // expression but we don't use it            $first_position = $matches[1][1];        } else {            $first_position = $big_value;        }        /**         * @todo we should not look for a delimiter that might be         *       inside quotes (or even double-quotes)         */        // the cost of doing this one with preg_match() would be too high        $first_sql_delimiter = strpos($buffer, $sql_delimiter, $i);        if ($first_sql_delimiter === false) {            $first_sql_delimiter = $big_value;        } else {            $found_delimiter = true;        }        // set $i to the position of the first quote, comment.start or delimiter found        $i = min($first_position, $first_sql_delimiter);        if ($i == $big_value) {            // none of the above was found in the string            $i = $old_i;            if (!$GLOBALS['finished']) {                break;            }            // at the end there might be some whitespace...            if (trim($buffer) == '') {                $buffer = '';                $len = 0;                break;            }            // We hit end of query, go there!            $i = strlen($buffer) - 1;        }        // Grab current character        $ch = $buffer[$i];        // Quotes        if (strpos('\'"`', $ch) !== false) {            $quote = $ch;            $endq = false;            while (!$endq) {                // Find next quote                $pos = strpos($buffer, $quote, $i + 1);                /*                 * Behave same as MySQL and accept end of query as end of backtick.                 * I know this is sick, but MySQL behaves like this:                 *                 * SELECT * FROM `table                 *                 * is treated like                 *                 * SELECT * FROM `table`                 */                if ($pos === false && $quote == '`' && $found_delimiter) {                    $pos = $first_sql_delimiter - 1;                // No quote? Too short string                } elseif ($pos === false) {                    // We hit end of string => unclosed quote, but we handle it as end of query                    if ($GLOBALS['finished']) {                        $endq = true;                        $i = $len - 1;                    }                    $found_delimiter = false;                    break;                }                // Was not the quote escaped?                $j = $pos - 1;                while ($buffer[$j] == '\\') $j--;                // Even count means it was not escaped                $endq = (((($pos - 1) - $j) % 2) == 0);                // Skip the string                $i = $pos;                if ($first_sql_delimiter < $pos) {                    $found_delimiter = false;                }            }            if (!$endq) {                break;            }            $i++;            // Aren't we at the end?            if ($GLOBALS['finished'] && $i == $len) {                $i--;            } else {                continue;            }        }        // Not enough data to decide        if ((($i == ($len - 1) && ($ch == '-' || $ch == '/'))          || ($i == ($len - 2) && (($ch == '-' && $buffer[$i + 1] == '-')            || ($ch == '/' && $buffer[$i + 1] == '*')))) && !$GLOBALS['finished']) {            break;        }        // Comments        if ($ch == '#'         || ($i < ($len - 1) && $ch == '-' && $buffer[$i + 1] == '-'          && (($i < ($len - 2) && $buffer[$i + 2] <= ' ')           || ($i == ($len - 1)  && $GLOBALS['finished'])))         || ($i < ($len - 1) && $ch == '/' && $buffer[$i + 1] == '*')                ) {            // Copy current string to SQL            if ($start_pos != $i) {                $sql .= substr($buffer, $start_pos, $i - $start_pos);            }            // Skip the rest            $start_of_comment = $i;            // do not use PHP_EOL here instead of "\n", because the export            // file might have been produced on a different system            $i = strpos($buffer, $ch == '/' ? '*/' : "\n", $i);            // didn't we hit end of string?            if ($i === false) {                if ($GLOBALS['finished']) {                    $i = $len - 1;                } else {                    break;                }            }            // Skip *            if ($ch == '/') {                $i++;            }            // Skip last char            $i++;            // We need to send the comment part in case we are defining            // a procedure or function and comments in it are valuable            $sql .= substr($buffer, $start_of_comment, $i - $start_of_comment);            // Next query part will start here            $start_pos = $i;            // Aren't we at the end?            if ($i == $len) {                $i--;            } else {                continue;            }        }        // Change delimiter, if redefined, and skip it (don't send to server!)        if (strtoupper(substr($buffer, $i, $length_of_delimiter_keyword)) == $delimiter_keyword         && ($i + $length_of_delimiter_keyword < $len)) {             // look for EOL on the character immediately after 'DELIMITER '             // (see previous comment about PHP_EOL)           $new_line_pos = strpos($buffer, "\n", $i + $length_of_delimiter_keyword);           // it might happen that there is no EOL           if (false === $new_line_pos) {               $new_line_pos = $len;           }           $sql_delimiter = substr($buffer, $i + $length_of_delimiter_keyword, $new_line_pos - $i - $length_of_delimiter_keyword);           $i = $new_line_pos + 1;           // Next query part will start here           $start_pos = $i;           continue;        }        // End of SQL        if ($found_delimiter || ($GLOBALS['finished'] && ($i == $len - 1))) {            $tmp_sql = $sql;            if ($start_pos < $len) {                $length_to_grab = $i - $start_pos;                if (! $found_delimiter) {                    $length_to_grab++;                }                $tmp_sql .= substr($buffer, $start_pos, $length_to_grab);                unset($length_to_grab);            }            // Do not try to execute empty SQL            if (! preg_match('/^([\s]*;)*$/', trim($tmp_sql))) {                $sql = $tmp_sql;                PMA_importRunQuery($sql, substr($buffer, 0, $i + strlen($sql_delimiter)));                $buffer = substr($buffer, $i + strlen($sql_delimiter));                // Reset parser:                $len = strlen($buffer);                $sql = '';                $i = 0;                $start_pos = 0;                // Any chance we will get a complete query?                //if ((strpos($buffer, ';') === false) && !$GLOBALS['finished']) {                if ((strpos($buffer, $sql_delimiter) === false) && !$GLOBALS['finished']) {                    break;                }            } else {                $i++;                $start_pos = $i;            }        }    } // End of parser loop} // End of import loop// Commit any possible data in buffersPMA_importRunQuery('', substr($buffer, 0, $len));PMA_importRunQuery();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * DocSQL import plugin for phpMyAdmin * * @package PhpMyAdmin-Import * @subpackage DocSQL */if (! defined('PHPMYADMIN')) {    exit;}/** * Load relations. */$cfgRelation = PMA_getRelationsParam();/** * We need relations enabled and we work only on database */if ($plugin_param !== 'database' || $GLOBALS['num_tables'] < 1 || ! $cfgRelation['relwork'] || ! $cfgRelation['commwork']) {    return;}if (isset($plugin_list)) {    $plugin_list['docsql'] = array(           // set name of your plugin        'text' => __('DocSQL'),                // text to be displayed as choice        'extension' => '',                  // extension this plugin can handle        'options' => array(                 // array of options for your plugin (optional)            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'text', 'name' => 'table', 'text' => __('Table name')),            array('type' => 'end_group')        ),        'options_text' => __('Options'), // text to describe plugin options (must be set if options are used)        );    /* We do not define function when plugin is just queried for information above */    return;}$tab = $_POST['docsql_table'];$buffer = '';/* Read whole buffer, we except it is small enough */while (!$finished && !$error && !$timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        // subtract data we didn't handle yet and stop processing        break;    } elseif ($data === true) {        // nothing to read        break;    } else {        // Append new data to buffer        $buffer .= $data;    }} // End of import loop/* Process the data */if ($data === true && !$error && !$timeout_passed) {    $buffer = str_replace("\r\n", "\n", $buffer);    $buffer = str_replace("\r", "\n", $buffer);    $lines = explode("\n", $buffer);    foreach ($lines AS $lkey => $line) {        //echo '<p>' . $line . '</p>';        $inf     = explode('|', $line);        if (!empty($inf[1]) && strlen(trim($inf[1])) > 0) {            $qry = '                 INSERT INTO                        ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '                      (db_name, table_name, column_name, comment)                 VALUES (                        \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\',                        \'' . PMA_sqlAddSlashes(trim($tab)) . '\',                        \'' . PMA_sqlAddSlashes(trim($inf[0])) . '\',                        \'' . PMA_sqlAddSlashes(trim($inf[1])) . '\')';            PMA_importRunQuery($qry, $qry . '-- ' . htmlspecialchars($tab) . '.' . htmlspecialchars($inf[0]), true);        } // end inf[1] exists        if (!empty($inf[2]) && strlen(trim($inf[2])) > 0) {            $for = explode('->', $inf[2]);            $qry = '                 INSERT INTO                        ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation']) . '                      (master_db, master_table, master_field, foreign_db, foreign_table, foreign_field)                 VALUES (                        \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\',                        \'' . PMA_sqlAddSlashes(trim($tab)) . '\',                        \'' . PMA_sqlAddSlashes(trim($inf[0])) . '\',                        \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\',                        \'' . PMA_sqlAddSlashes(trim($for[0])) . '\',                        \'' . PMA_sqlAddSlashes(trim($for[1])) . '\')';            PMA_importRunQuery($qry, $qry . '-- ' . htmlspecialchars($tab) . '.' . htmlspecialchars($inf[0]) . '(' . htmlspecialchars($inf[2]) . ')', true);        } // end inf[2] exists    } // End lines loop} // End import// Commit any possible data in buffersPMA_importRunQuery();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * hold PMA_Theme class * * @package PhpMyAdmin *//** * handles theme * * @todo add the possibility to make a theme depend on another theme and by default on original * @todo make all components optional - get missing components from 'parent' theme * @todo make css optionally replacing 'parent' css or extending it (by appending at the end) * @todo add an optional global css file - which will be used for both frames * * @package PhpMyAdmin */class PMA_Theme{    /**     * @var string theme version     * @access  protected     */    var $version = '0.0.0.0';    /**     * @var string theme name     * @access  protected     */    var $name = '';    /**     * @var string theme id     * @access  protected     */    var $id = '';    /**     * @var string theme path     * @access  protected     */    var $path = '';    /**     * @var string image path     * @access  protected     */    var $img_path = '';    /**     * @var array   valid css types     * @access  protected     */    var $types = array('left', 'right', 'print');    /**     * @var integer last modification time for info file     * @access  protected     */    var $mtime_info = 0;    /**     * needed because sometimes, the mtime for different themes     * is identical     * @var integer filesize for info file     * @access  protected     */    var $filesize_info = 0;    /**     * @access  public     * @return  boolean     whether loading them info was successful or not     */    function loadInfo()    {        if (! file_exists($this->getPath() . '/info.inc.php')) {            return false;        }        if ($this->mtime_info === filemtime($this->getPath() . '/info.inc.php')) {            return true;        }        @include $this->getPath() . '/info.inc.php';        // was it set correctly?        if (! isset($theme_name)) {            return false;        }        $this->mtime_info = filemtime($this->getPath() . '/info.inc.php');        $this->filesize_info = filesize($this->getPath() . '/info.inc.php');        if (isset($theme_full_version)) {            $this->setVersion($theme_full_version);        } elseif (isset($theme_generation, $theme_version)) {            $this->setVersion($theme_generation . '.' . $theme_version);        }        $this->setName($theme_name);        return true;    }    /**     * returns theme object loaded from given folder     * or false if theme is invalid     *     * @static     * @access  public     * @param string  $folder path to theme     * @return  object  PMA_Theme     */    static public function load($folder)    {        $theme = new PMA_Theme();        $theme->setPath($folder);        if (! $theme->loadInfo()) {            return false;        }        $theme->checkImgPath();        return $theme;    }    /**     * checks image path for existance - if not found use img from original theme     *     * @access  public     * @return bool     */    function checkImgPath()    {        if (is_dir($this->getPath() . '/img/')) {            $this->setImgPath($this->getPath() . '/img/');            return true;        } elseif (is_dir($GLOBALS['cfg']['ThemePath'] . '/original/img/')) {            $this->setImgPath($GLOBALS['cfg']['ThemePath'] . '/original/img/');            return true;        } else {            trigger_error(                sprintf(__('No valid image path for theme %s found!'), $this->getName()),                E_USER_ERROR);            return false;        }    }    /**     * returns path to theme     *     * @access  public     * @return  string  $path   path to theme     */    function getPath()    {        return $this->path;    }    /**     * returns layout file     *     * @access  public     * @return  string  layout file     */    function getLayoutFile()    {        return $this->getPath() . '/layout.inc.php';    }    /**     * set path to theme     *     * @access  public     * @param string  $path   path to theme     */    function setPath($path)    {        $this->path = trim($path);    }    /**     * sets version     *     * @access  public     * @param string new version     */    function setVersion($version)    {        $this->version = trim($version);    }    /**     * returns version     *     * @access  public     * @return  string  version     */    function getVersion()    {        return $this->version;    }    /**     * checks theme version agaisnt $version     * returns true if theme version is equal or higher to $version     *     * @access  public     * @param string  $version    version to compare to     * @return  boolean     */    function checkVersion($version)    {        return version_compare($this->getVersion(), $version, 'lt');    }    /**     * sets name     *     * @access  public     * @param string  $name   new name     */    function setName($name)    {        $this->name = trim($name);    }    /**     * returns name     *     * @access  public     * @return  string name     */    function getName()    {        return $this->name;    }    /**     * sets id     *     * @access  public     * @param string  $id   new id     */    function setId($id)    {        $this->id = trim($id);    }    /**     * returns id     *     * @access  public     * @return  string  id     */    function getId()    {        return $this->id;    }    /**     * @access  public     * @param string  path to images for this theme     */    function setImgPath($path)    {        $this->img_path = $path;    }    /**     * @access  public     * @return  string image path for this theme     */    function getImgPath()    {        return $this->img_path;    }    /**     * load css (send to stdout, normally the browser)     *     * @access  public     * @param string  $type   left, right or print     * @return bool     */    function loadCss(&$type)    {        if (empty($type) || ! in_array($type, $this->types)) {            $type = 'left';        }        if ($type == 'right') {            echo PMA_SQP_buildCssData();        }        $_css_file = $this->getPath()                   . '/css/theme_' . $type . '.css.php';        if (! file_exists($_css_file)) {            return false;        }        if ($GLOBALS['text_dir'] === 'ltr') {            $right = 'right';            $left = 'left';        } else {            $right = 'left';            $left = 'right';        }        include $_css_file;        if ($type != 'print') {            $_sprites_data_file = $this->getPath() . '/sprites.lib.php';            $_sprites_css_file = './themes/sprites.css.php';            if (   (file_exists($_sprites_data_file)  && is_readable($_sprites_data_file))                && (file_exists($_sprites_css_file) && is_readable($_sprites_css_file))            ) {                include $_sprites_data_file;                include $_sprites_css_file;            }        }        return true;    }    /**     * prints out the preview for this theme     *     * @access  public     */    function printPreview()    {        echo '<div class="theme_preview">';        echo '<h2>' . htmlspecialchars($this->getName())            .' (' . htmlspecialchars($this->getVersion()) . ')</h2>';        echo '<p>';        echo '<a target="_top" class="take_theme" '            .'name="' . htmlspecialchars($this->getId()) . '" '            . 'href="index.php'.PMA_generate_common_url(array(                'set_theme' => $this->getId()                )) . '">';        if (@file_exists($this->getPath() . '/screen.png')) {            // if screen exists then output            echo '<img src="' . $this->getPath() . '/screen.png" border="1"'                .' alt="' . htmlspecialchars($this->getName()) . '"'                .' title="' . htmlspecialchars($this->getName()) . '" /><br />';        } else {            echo __('No preview available.');        }        echo '[ <strong>' . __('take it') . '</strong> ]</a>'            .'</p>'            .'</div>';    }    /**     * Remove filter for IE.     *     * @return string CSS code.     */    function getCssIEClearFilter() {        return PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 6 && PMA_USR_BROWSER_VER <= 8            ? 'filter: none'            : '';    }    /**     * Generates code for CSS gradient using various browser extensions.     *     * @param string $start_color Color of gradient start, hex value without #     * @param string $end_color   Color of gradient end, hex value without #     *     * @return string CSS code.     */    function getCssGradient($start_color, $end_color)    {        $result = array();        // Opera 9.5+, IE 9        $result[] = 'background-image: url(./themes/svg_gradient.php?from=' . $start_color . '&to=' . $end_color . ');';        $result[] = 'background-size: 100% 100%;';        // Safari 4-5, Chrome 1-9        $result[] = 'background: -webkit-gradient(linear, left top, left bottom, from(#' . $start_color . '), to(#' . $end_color . '));';        // Safari 5.1, Chrome 10+        $result[] = 'background: -webkit-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // Firefox 3.6+        $result[] = 'background: -moz-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // IE 10        $result[] = 'background: -ms-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // Opera 11.10        $result[] = 'background: -o-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // IE 6-8        if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 6 && PMA_USR_BROWSER_VER <= 8) {            $result[] = 'filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#' . $start_color . '", endColorstr="#' . $end_color . '");';        }        return implode("\n", $result);    }    /**     * Returns CSS styles for CodeMirror editor based on query formatter colors.     *     * @return string CSS code.     */    function getCssCodeMirror()    {        $result[] = 'span.cm-keyword, span.cm-statement-verb {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_reservedWord'] . ';';        $result[] = '}';        $result[] = 'span.cm-variable {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_identifier'] . ';';        $result[] = '}';        $result[] = 'span.cm-comment {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['comment'] . ';';        $result[] = '}';        $result[] = 'span.cm-mysql-string {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['quote'] . ';';        $result[] = '}';        $result[] = 'span.cm-operator {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['punct'] . ';';        $result[] = '}';        $result[] = 'span.cm-mysql-word {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_identifier'] . ';';        $result[] = '}';        $result[] = 'span.cm-builtin {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_functionName'] . ';';        $result[] = '}';        $result[] = 'span.cm-variable-2 {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_columnType'] . ';';        $result[] = '}';        $result[] = 'span.cm-variable-3 {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_columnAttrib'] . ';';        $result[] = '}';        $result[] = 'span.cm-separator {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['punct'] . ';';        $result[] = '}';        $result[] = 'span.cm-number {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['digit_integer'] . ';';        $result[] = '}';        return implode("\n", $result);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple script to set correct charset for changelog * * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require './libraries/common.inc.php';$filename = CHANGELOG_FILE;/** * Read changelog. */// Check if the file is available, some distributions remove these.if (is_readable($filename)) {    // Test if the if is in a compressed format    if (substr($filename, -3) == '.gz') {        ob_start();        readgzfile($filename);        $changelog = ob_get_contents();        ob_end_clean();    } else {        $changelog = file_get_contents($filename);    }} else {    printf(__('The %s file is not available on this system, please visit www.phpmyadmin.net for more information.'), $filename);    exit;}/** * Whole changelog in variable. */$changelog = htmlspecialchars($changelog);$replaces = array(    '@(http://[./a-zA-Z0-9.-_-]*[/a-zA-Z0-9_])@'    => '<a href="\\1">\\1</a>',    // sourceforge users    '/([0-9]{4}-[0-9]{2}-[0-9]{2}) (.+[^ ]) +&lt;(.*)@users.sourceforge.net&gt;/i'    => '\\1 <a href="https://sourceforge.net/users/\\3/">\\2</a>',    '/thanks to ([^\(\r\n]+) \(([-\w]+)\)/i'    => 'thanks to <a href="https://sourceforge.net/users/\\2/">\\1</a>',    '/thanks to ([^\(\r\n]+) -\s+([-\w]+)/i'    => 'thanks to <a href="https://sourceforge.net/users/\\2/">\\1</a>',    // mail adresse    '/([0-9]{4}-[0-9]{2}-[0-9]{2}) (.+[^ ]) +&lt;(.*@.*)&gt;/i'    => '\\1 <a href="mailto:\\3">\\2</a>',    // linking patches    '/patch\s*#?([0-9]{6,})/i'    => '<a href="https://sourceforge.net/support/tracker.php?aid=\\1">patch #\\1</a>',    // linking RFE    '/(?:rfe|feature)\s*#?([0-9]{6,})/i'    => '<a href="https://sourceforge.net/support/tracker.php?aid=\\1">RFE #\\1</a>',    // linking files    '/(\s+)([\\/a-z_0-9\.]+\.(?:php3?|html|pl|js|sh))/i'    => '\\1<a href="https://github.com/phpmyadmin/phpmyadmin/commits/HEAD/\\2">\\2</a>',    // FAQ entries    '/FAQ ([0-9]+)\.([0-9a-z]+)/i'    => '<a href="http://localhost/phpMyAdmin/Documentation.html#faq\\1_\\2">FAQ \\1.\\2</a>',    // linking bugs    '/bug\s*#?([0-9]{6,})/i'    => '<a href="https://sourceforge.net/support/tracker.php?aid=\\1">bug #\\1</a>',    // all other 6+ digit numbers are treated as bugs    '/(?<!bug|RFE|patch) #?([0-9]{6,})/i'    => ' <a href="https://sourceforge.net/support/tracker.php?aid=\\1">bug #\\1</a>',    // CVE/CAN entries    '/((CAN|CVE)-[0-9]+-[0-9]+)/'    => '<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=\\1">\\1</a>',    // PMASAentries    '/(PMASA-[0-9]+-[0-9]+)/'    => '<a href="http://www.phpmyadmin.net/home_page/security/\\1.php">\\1</a>',    // Highlight releases (with links)    '/([0-9]+)\.([0-9]+)\.([0-9]+)\.0 (\([0-9-]+\))/'    => '<a name="\\1_\\2_\\3"></a><a href="https://github.com/phpmyadmin/phpmyadmin/commits/RELEASE_\\1_\\2_\\3">\\1.\\2.\\3.0 \\4</a>',    '/([0-9]+)\.([0-9]+)\.([0-9]+)\.([1-9][0-9]*) (\([0-9-]+\))/'    => '<a name="\\1_\\2_\\3_\\4"></a><a href="https://github.com/phpmyadmin/phpmyadmin/commits/RELEASE_\\1_\\2_\\3_\\4">\\1.\\2.\\3.\\4 \\5</a>',    // Highlight releases (not linkable)    '/(    ### )(.*)/'    => '\\1<b>\\2</b>',);header('Content-type: text/html; charset=utf-8');echo '<?xml version="1.0" encoding="utf-8"?'.'>';?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr"><head><link rel="icon" href="./favicon.ico" type="image/x-icon" /><link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" /><title>phpMyAdmin - ChangeLog</title><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /></head><body><h1>phpMyAdmin - ChangeLog</h1><?phpecho '<pre>';echo preg_replace(array_keys($replaces), $replaces, $changelog);echo '</pre>';?></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * phpMyAdmin Language Loading File * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Returns language name * * @param string $tmplang * @return string */function PMA_langName($tmplang){    $lang_name = ucfirst(substr(strrchr($tmplang[0], '|'), 1));    // Include native name if non empty    if (!empty($tmplang[2])) {        $lang_name = $tmplang[2] . ' - ' . $lang_name;    }    return $lang_name;}/** * tries to find the language to use * * @return  bool    success if valid lang is found, otherwise false */function PMA_langCheck(){    // check forced language    if (! empty($GLOBALS['cfg']['Lang'])) {        if (PMA_langSet($GLOBALS['cfg']['Lang'])) {            return true;        } else {            $GLOBALS['lang_failed_cfg'] = $GLOBALS['cfg']['Lang'];        }    }    // Don't use REQUEST in following code as it might be confused by cookies with same name    // check user requested language (POST)    if (! empty($_POST['lang'])) {        if (PMA_langSet($_POST['lang'])) {            return true;        } elseif (!is_string($_POST['lang'])) {            /* Faked request, don't care on localisation */            $GLOBALS['lang_failed_request'] = 'Yes';        } else {            $GLOBALS['lang_failed_request'] = $_POST['lang'];        }    }    // check user requested language (GET)    if (! empty($_GET['lang'])) {        if (PMA_langSet($_GET['lang'])) {            return true;        } elseif (!is_string($_GET['lang'])) {            /* Faked request, don't care on localisation */            $GLOBALS['lang_failed_request'] = 'Yes';        } else {            $GLOBALS['lang_failed_request'] = $_GET['lang'];        }    }    // check previous set language    if (! empty($_COOKIE['pma_lang'])) {        if (PMA_langSet($_COOKIE['pma_lang'])) {            return true;        } elseif (!is_string($_COOKIE['pma_lang'])) {            /* Faked request, don't care on localisation */            $GLOBALS['lang_failed_cookie'] = 'Yes';        } else {            $GLOBALS['lang_failed_cookie'] = $_COOKIE['pma_lang'];        }    }    // try to findout user's language by checking its HTTP_ACCEPT_LANGUAGE variable    if (PMA_getenv('HTTP_ACCEPT_LANGUAGE')) {        foreach (explode(',', PMA_getenv('HTTP_ACCEPT_LANGUAGE')) as $lang) {            if (PMA_langDetect($lang, 1)) {                return true;            }        }    }    // try to findout user's language by checking its HTTP_USER_AGENT variable    if (PMA_langDetect(PMA_getenv('HTTP_USER_AGENT'), 2)) {        return true;    }    // Didn't catch any valid lang : we use the default settings    if (PMA_langSet($GLOBALS['cfg']['DefaultLang'])) {        return true;    }    return false;}/** * checks given lang and sets it if valid * returns true on success, otherwise flase * * @param string  $lang   language to set * @return  bool    success */function PMA_langSet(&$lang){    /* Partial backward compatibility with 3.3 and older branches */    $lang = str_replace('-utf-8', '', $lang);    if (!is_string($lang) || empty($lang) || empty($GLOBALS['available_languages'][$lang])) {        return false;    }    $GLOBALS['lang'] = $lang;    return true;}/** * Analyzes some PHP environment variables to find the most probable language * that should be used * * @param string   string to analyze * @param integer  type of the PHP environment variable which value is $str * * @return  bool    true on success, otherwise false * * * @access  private */function PMA_langDetect($str, $envType){    if (empty($str)) {        return false;    }    if (empty($GLOBALS['available_languages'])) {        return false;    }    foreach ($GLOBALS['available_languages'] as $lang => $value) {        // $envType =  1 for the 'HTTP_ACCEPT_LANGUAGE' environment variable,        //             2 for the 'HTTP_USER_AGENT' one        $expr = $value[0];        if (strpos($expr, '[-_]') === false) {            $expr = str_replace('|', '([-_][[:alpha:]]{2,3})?|', $expr);        }        if (($envType == 1 && preg_match('/^(' . addcslashes($expr, '/') . ')(;q=[0-9]\\.[0-9])?$/i', $str))            || ($envType == 2 && preg_match('/(\(|\[|;[[:space:]])(' . addcslashes($expr, '/') . ')(;|\]|\))/i', $str))) {            if (PMA_langSet($lang)) {                return true;            }        }    }    return false;} // end of the 'PMA_langDetect()' function/** * All the supported languages have to be listed in the array below. * 1. The key must be the "official" ISO 639 language code and, if required, *    the dialect code. It can also contain some information about the *    charset (see the Russian case). * 2. The first of the values associated to the key is used in a regular *    expression to find some keywords corresponding to the language inside two *    environment variables. *    These values contain: *    - the "official" ISO language code and, if required, the dialect code *      too ('bu' for Bulgarian, 'fr([-_][[:alpha:]]{2})?' for all French *      dialects, 'zh[-_]tw' for Chinese traditional...), the dialect has to *      be specified first; *    - the '|' character (it means 'OR'); *    - the full language name. * 3. The second value associated to the key is the language code as defined by *    the RFC1766. * 4. The third value is its native name in html entities or UTF-8. * * Beware that the sorting order (first values associated to keys by * alphabetical reverse order in the array) is important: 'zh-tw' (chinese * traditional) must be detected before 'zh' (chinese simplified) for * example. * * @param string $lang * @return array */function PMA_langDetails($lang){    switch ($lang) {    case 'af':        return array('af|afrikaans', 'af', '');    case 'ar':        return array('ar|arabic', 'ar', '&#1575;&#1604;&#1593;&#1585;&#1576;&#1610;&#1577;');    case 'az':        return array('az|azerbaijani', 'az', 'Az&#601;rbaycanca');    case 'bn':        return array('bn|bangla', 'bn', '');    case 'be':        return array('be|belarusian', 'be', '&#1041;&#1077;&#1083;&#1072;&#1088;&#1091;&#1089;&#1082;&#1072;&#1103;');    case 'be@latin':        return array('be[-_]lat|belarusian latin', 'be-lat', 'Bie&#0322;aruskaja');    case 'bg':        return array('bg|bulgarian', 'bg', '&#1041;&#1098;&#1083;&#1075;&#1072;&#1088;&#1089;&#1082;&#1080;');    case 'bs':        return array('bs|bosnian', 'bs', 'Bosanski');    case 'br':        return array('br|breton', 'br', 'Brezhoneg');    case 'ca':        return array('ca|catalan', 'ca', 'Catal&agrave;');    case 'cs':        return array('cs|czech', 'cs', 'etina');    case 'cy':        return array('cy|welsh', 'cy', 'Cymraeg');    case 'da':        return array('da|danish', 'da', 'Dansk');    case 'de':        return array('de|german', 'de', 'Deutsch');    case 'el':        return array('el|greek', 'el', '&Epsilon;&lambda;&lambda;&eta;&nu;&iota;&kappa;&#940;');    case 'en':        return array('en|english', 'en', '');    case 'en_GB':        return array('en[_-]gb|english (United Kingdom)', 'en-gb', '');    case 'es':        return array('es|spanish', 'es', 'Espa&ntilde;ol');    case 'et':        return array('et|estonian', 'et', 'Eesti');    case 'eu':        return array('eu|basque', 'eu', 'Euskara');    case 'fa':        return array('fa|persian', 'fa', '&#1601;&#1575;&#1585;&#1587;&#1740;');    case 'fi':        return array('fi|finnish', 'fi', 'Suomi');    case 'fr':        return array('fr|french', 'fr', 'Fran&ccedil;ais');    case 'gl':        return array('gl|galician', 'gl', 'Galego');    case 'he':        return array('he|hebrew', 'he', '&#1506;&#1489;&#1512;&#1497;&#1514;');    case 'hi':        return array('hi|hindi', 'hi', '&#2361;&#2367;&#2344;&#2381;&#2342;&#2368;');    case 'hr':        return array('hr|croatian', 'hr', 'Hrvatski');    case 'hu':        return array('hu|hungarian', 'hu', 'Magyar');    case 'id':        return array('id|indonesian', 'id', 'Bahasa Indonesia');    case 'it':        return array('it|italian', 'it', 'Italiano');    case 'ja':        return array('ja|japanese', 'ja', '&#26085;&#26412;&#35486;');    case 'ko':        return array('ko|korean', 'ko', '&#54620;&#44397;&#50612;');    case 'ka':        return array('ka|georgian', 'ka', '&#4325;&#4304;&#4320;&#4311;&#4323;&#4314;&#4312;');    case 'lt':        return array('lt|lithuanian', 'lt', 'Lietuvi&#371;');    case 'lv':        return array('lv|latvian', 'lv', 'Latvie&scaron;u');    case 'mk':        return array('mk|macedonian', 'mk', 'Macedonian');    case 'mn':        return array('mn|mongolian', 'mn', '&#1052;&#1086;&#1085;&#1075;&#1086;&#1083;');    case 'ms':        return array('ms|malay', 'ms', 'Bahasa Melayu');    case 'nl':        return array('nl|dutch', 'nl', 'Nederlands');    case 'nb':        return array('nb|norwegian', 'nb', 'Norsk');    case 'pl':        return array('pl|polish', 'pl', 'Polski');    case 'pt_BR':        return array('pt[-_]br|brazilian portuguese', 'pt-BR', 'Portugu&ecirc;s');    case 'pt':        return array('pt|portuguese', 'pt', 'Portugu&ecirc;s');    case 'ro':        return array('ro|romanian', 'ro', 'Rom&acirc;n&#259;');    case 'ru':        return array('ru|russian', 'ru', '&#1056;&#1091;&#1089;&#1089;&#1082;&#1080;&#1081;');    case 'si':        return array('si|sinhala', 'si', '&#3523;&#3538;&#3458;&#3524;&#3517;');    case 'sk':        return array('sk|slovak', 'sk', 'Sloven&#269;ina');    case 'sl':        return array('sl|slovenian', 'sl', 'Sloven&scaron;&#269;ina');    case 'sq':        return array('sq|albanian', 'sq', 'Shqip');    case 'sr@latin':        return array('sr[-_]lat|serbian latin', 'sr-lat', 'Srpski');    case 'sr':        return array('sr|serbian', 'sr', '&#1057;&#1088;&#1087;&#1089;&#1082;&#1080;');    case 'sv':        return array('sv|swedish', 'sv', 'Svenska');    case 'ta':        return array('ta|tamil', 'ta', '');    case 'te':        return array('te|telugu', 'te', '');    case 'th':        return array('th|thai', 'th', '&#3616;&#3634;&#3625;&#3634;&#3652;&#3607;&#3618;');    case 'tk':        return array('tk|turkmen', 'tk', 'trkmene');    case 'tr':        return array('tr|turkish', 'tr', 'T&uuml;rk&ccedil;e');    case 'tt':        return array('tt|tatarish', 'tt', 'Tatar&ccedil;a');    case 'ug':        return array('ug|uyghur', 'ug', '');    case 'uk':        return array('uk|ukrainian', 'uk', '&#1059;&#1082;&#1088;&#1072;&#1111;&#1085;&#1089;&#1100;&#1082;&#1072;');    case 'ur':        return array('ur|urdu', 'ur', '');    case 'uz@latin':        return array('uz[-_]lat|uzbek-latin', 'uz-lat', 'O&lsquo;zbekcha');    case 'uz':        return array('uz[-_]cyr|uzbek-cyrillic', 'uz-cyr', '&#1038;&#1079;&#1073;&#1077;&#1082;&#1095;&#1072;');    case 'zh_TW':        return array('zh[-_](tw|hk)|chinese traditional', 'zh-TW', '&#20013;&#25991;');    case 'zh_CN':        return array('zh|chinese simplified', 'zh', '&#20013;&#25991;');    }    return array("$lang|$lang", $lang, $lang);}/** * Returns list of languages supported by phpMyAdmin * * @return array */function PMA_langList(){    /* We can always speak English */    $result = array('en' => PMA_langDetails('en'));    /* Check for existing directory */    if (!is_dir($GLOBALS['lang_path'])) {        return $result;    }    /* Open the directory */    $handle = @opendir($GLOBALS['lang_path']);    /* This can happen if the kit is English-only */    if ($handle === false) {        return $result;    }    /* Process all files */    while (false !== ($file = readdir($handle))) {        if ($file != "." && $file != ".." && file_exists($GLOBALS['lang_path'] . '/' . $file . '/LC_MESSAGES/phpmyadmin.mo')) {            $result[$file] = PMA_langDetails($file);        }    }    /* Close the handle */    closedir($handle);    return $result;}/** * @global string  path to the translations directory; may be absent if the kit is English-only */$GLOBALS['lang_path'] = './locale/';/** * Load gettext functions. */require_once GETTEXT_INC;/** * @global string  interface language */$GLOBALS['lang'] = 'en';/** * @global boolean whether loading lang from cfg failed */$GLOBALS['lang_failed_cfg'] = false;/** * @global boolean whether loading lang from cookie failed */$GLOBALS['lang_failed_cookie'] = false;/** * @global boolean whether loading lang from user request failed */$GLOBALS['lang_failed_request'] = false;/** * @global string text direction ltr or rtl */$GLOBALS['text_dir'] = 'ltr';/** * @global array supported languages */$GLOBALS['available_languages'] = PMA_langList();// Language filtering supportif (! empty($GLOBALS['cfg']['FilterLanguages'])) {    $new_lang = array();    foreach ($GLOBALS['available_languages'] as $key => $val) {        if (preg_match('@' . $GLOBALS['cfg']['FilterLanguages'] . '@', $key)) {            $new_lang[$key] = $val;        }    }    if (count($new_lang) > 0) {        $GLOBALS['available_languages'] = $new_lang;    }    unset($key, $val, $new_lang);}/** * @global array MySQL charsets map */$GLOBALS['mysql_charset_map'] = array(    'big5'         => 'big5',    'cp-866'       => 'cp866',    'euc-jp'       => 'ujis',    'euc-kr'       => 'euckr',    'gb2312'       => 'gb2312',    'gbk'          => 'gbk',    'iso-8859-1'   => 'latin1',    'iso-8859-2'   => 'latin2',    'iso-8859-7'   => 'greek',    'iso-8859-8'   => 'hebrew',    'iso-8859-8-i' => 'hebrew',    'iso-8859-9'   => 'latin5',    'iso-8859-13'  => 'latin7',    'iso-8859-15'  => 'latin1',    'koi8-r'       => 'koi8r',    'shift_jis'    => 'sjis',    'tis-620'      => 'tis620',    'utf-8'        => 'utf8',    'windows-1250' => 'cp1250',    'windows-1251' => 'cp1251',    'windows-1252' => 'latin1',    'windows-1256' => 'cp1256',    'windows-1257' => 'cp1257',);/* * Do the work! */if (! PMA_langCheck()) {    // fallback language    $fall_back_lang = 'en';    $line = __LINE__;    if (! PMA_langSet($fall_back_lang)) {        trigger_error('phpMyAdmin-ERROR: invalid lang code: '            . __FILE__ . '#' . $line . ', check hard coded fall back language.',            E_USER_WARNING);        // stop execution        // and tell the user that his chosen language is invalid        PMA_fatalError('Could not load any language, please check your language settings and folder.');    }}// Set locale_setlocale(LC_MESSAGES, $GLOBALS['lang']);_bindtextdomain('phpmyadmin', $GLOBALS['lang_path']);_bind_textdomain_codeset('phpmyadmin', 'UTF-8');_textdomain('phpmyadmin');/** * Messages for phpMyAdmin. * * These messages are here for easy transition to Gettext. * You should not add any messages here, use instead gettext directly * in your template/PHP file. */if (! function_exists('__')) {    die('Bad invocation!');}/* l10n: Text direction, use either ltr or rtl */$GLOBALS['text_dir'] = __('ltr');/* TCPDF */$GLOBALS['l'] = array();/* TCPDF settings */$GLOBALS['l']['a_meta_charset'] = 'UTF-8';$GLOBALS['l']['a_meta_dir'] = $GLOBALS['text_dir'];$GLOBALS['l']['a_meta_language'] = $GLOBALS['lang'];/* TCPDF translations */$GLOBALS['l']['w_page'] = __('Page number:');// now, that we have loaded the language strings we can send the errorsif ($GLOBALS['lang_failed_cfg']) {    trigger_error(        sprintf(__('Unknown language: %1$s.'),            htmlspecialchars($GLOBALS['lang_failed_cfg'])),        E_USER_ERROR);}if ($GLOBALS['lang_failed_cookie']) {    trigger_error(        sprintf(__('Unknown language: %1$s.'),            htmlspecialchars($GLOBALS['lang_failed_cookie'])),        E_USER_ERROR);}if ($GLOBALS['lang_failed_request']) {    trigger_error(        sprintf(__('Unknown language: %1$s.'),            htmlspecialchars($GLOBALS['lang_failed_request'])),        E_USER_ERROR);}unset($line, $fall_back_lang,    $GLOBALS['lang_failed_cfg'], $GLOBALS['lang_failed_cookie'], $GLOBALS['lang_failed_request']);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * <code> * N   N  OOO  !!   DDDD   OOO    N   N  OOO  TTTTT   EEEE DDDD  I TTTTT !! * NN  N O   O !!   D   D O   O   NN  N O   O   T     E    D   D I   T   !! * N N N O   O !!   D   D O   O   N N N O   O   T     EEEE D   D I   T   !! * N  NN O   O      D   D O   O   N  NN O   O   T     E    D   D I   T * N   N  OOO  !!   DDDD   OOO    N   N  OOO    T     EEEE DDDD  I   T   !! * </code> * * DO NOT EDIT THIS FILE, EDIT config.inc.php INSTEAD !!! * * phpMyAdmin default configuration, you can copy values from here to your * config.inc.php * * All directives are explained in Documentation.html * * @package PhpMyAdmin *//** * Your phpMyAdmin URL. * * Complete the variable below with the full URL ie *    http://www.your_web.net/path_to_your_phpMyAdmin_directory/ * * It must contain characters that are valid for a URL, and the path is * case sensitive on some Web servers, for example Unix-based servers. * * In most cases you can leave this variable empty, as the correct value * will be detected automatically. However, we recommend that you do * test to see that the auto-detection code works in your system. A good * test is to browse a table, then edit a row and save it.  There will be * an error message if phpMyAdmin cannot auto-detect the correct value. * * @global string $cfg['PmaAbsoluteUri'] */$cfg['PmaAbsoluteUri'] = '';/** * Disable the default warning that is displayed on the DB Details Structure page if * any of the required Tables for the configuration storage could not be found * * @global boolean $cfg['PmaNoRelation_DisableWarning'] */$cfg['PmaNoRelation_DisableWarning'] = false;/** * Disable the default warning that is displayed if Suhosin is detected * * @global boolean $cfg['SuhosinDisableWarning'] */$cfg['SuhosinDisableWarning'] = false;/** * Disable the default warning that is displayed if mcrypt is missing for * cookie authentication. * * @global boolean $cfg['McryptDisableWarning'] */$cfg['McryptDisableWarning'] = false;/** * Show warning about incomplete translations on certain threshold. * * @global boolean $cfg['TranslationWarningThreshold'] */$cfg['TranslationWarningThreshold'] = 80;/** * Allows phpMyAdmin to be included from a document located on * another domain; setting this to true is a potential security hole * * @global boolean $cfg['AllowThirdPartyFraming'] */$cfg['AllowThirdPartyFraming'] = false;/** * The 'cookie' auth_type uses blowfish algorithm to encrypt the password. If * at least one server configuration uses 'cookie' auth_type, enter here a * pass phrase that will be used by blowfish. The maximum length seems to be 46 * characters. * * @global string $cfg['blowfish_secret'] */$cfg['blowfish_secret'] = '';/******************************************************************************* * Server(s) configuration * * The $cfg['Servers'] array starts with $cfg['Servers'][1].  Do not use * $cfg['Servers'][0]. You can disable a server configuration entry by setting host * to ''. If you want more than one server, just copy following section * (including $i incrementation) several times. There is no need to define * full server array, just define values you need to change. * * @global array $cfg['Servers'] */$cfg['Servers'] = array();$i = 1;/** * MySQL hostname or IP address * * @global string $cfg['Servers'][$i]['host'] */$cfg['Servers'][$i]['host'] = 'localhost';/** * MySQL port - leave blank for default port * * @global string $cfg['Servers'][$i]['port'] */$cfg['Servers'][$i]['port'] = '';/** * Path to the socket - leave blank for default socket * * @global string $cfg['Servers'][$i]['socket'] */$cfg['Servers'][$i]['socket'] = '';/** * Use SSL for connecting to MySQL server? * * @global boolean $cfg['Servers'][$i]['ssl'] */$cfg['Servers'][$i]['ssl'] = false;/** * How to connect to MySQL server ('tcp' or 'socket') * * @global string $cfg['Servers'][$i]['connect_type'] */$cfg['Servers'][$i]['connect_type'] = 'tcp';/** * The PHP MySQL extension to use ('mysql' or 'mysqli') * * @global string $cfg['Servers'][$i]['extension'] */$cfg['Servers'][$i]['extension'] = 'mysqli';/** * Use compressed protocol for the MySQL connection * * @global boolean $cfg['Servers'][$i]['compress'] */$cfg['Servers'][$i]['compress'] = false;/** * MySQL control host. This permits to use a host different than the * main host, for the phpMyAdmin configuration storage. If left empty, * $cfg['Servers'][$i]['host'] is used instead. * * @global string $cfg['Servers'][$i]['controlhost'] */$cfg['Servers'][$i]['controlhost'] = '';/** * MySQL control user settings (this user must have read-only * access to the "mysql/user" and "mysql/db" tables). The controluser is also * used for all relational features (pmadb) * * @global string $cfg['Servers'][$i]['controluser'] */$cfg['Servers'][$i]['controluser'] = '';/** * MySQL control user settings (this user must have read-only * access to the "mysql/user" and "mysql/db" tables). The controluser is also * used for all relational features (pmadb) * * @global string $cfg['Servers'][$i]['controlpass'] */$cfg['Servers'][$i]['controlpass'] = '';/** * Authentication method (valid choices: config, http, signon or cookie) * * @global string $cfg['Servers'][$i]['auth_type'] */$cfg['Servers'][$i]['auth_type'] = 'cookie';/** * HTTP Basic Auth Realm name to display (only used with 'HTTP' auth_type) * * @global string $cfg['Servers'][$i]['auth_http_realm'] */$cfg['Servers'][$i]['auth_http_realm'] = '';/** * File containing Swekey ids and login names (see /contrib); * leave empty to deactivate Swekey hardware authentication * * @global string $cfg['Servers'][$i]['auth_swekey_config'] */$cfg['Servers'][$i]['auth_swekey_config'] = '';/** * MySQL user * * @global string $cfg['Servers'][$i]['user'] */$cfg['Servers'][$i]['user'] = 'root';/** * MySQL password (only needed with 'config' auth_type) * * @global string $cfg['Servers'][$i]['password'] */$cfg['Servers'][$i]['password'] = '';/** * Session to use for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonSession'] */$cfg['Servers'][$i]['SignonSession'] = '';/** * PHP script to use for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonScript'] */$cfg['Servers'][$i]['SignonScript'] = '';/** * URL where to redirect user to login for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonURL'] */$cfg['Servers'][$i]['SignonURL'] = '';/** * URL where to redirect user after logout * * @global string $cfg['Servers'][$i]['LogoutURL'] */$cfg['Servers'][$i]['LogoutURL'] = '';/** * Whether to try to connect without password * * @global boolean $cfg['Servers'][$i]['nopassword'] */$cfg['Servers'][$i]['nopassword'] = false;/** * If set to a db-name, only this db is displayed in left frame * It may also be an array of db-names, where sorting order is relevant. * * @global string $cfg['Servers'][$i]['only_db'] */$cfg['Servers'][$i]['only_db'] = '';/** * Database name to be hidden from listings * * @global string $cfg['Servers'][$i]['hide_db'] */$cfg['Servers'][$i]['hide_db'] = '';/** * Verbose name for this host - leave blank to show the hostname * (for HTTP authentication, all non-US-ASCII characters will be stripped) * * @global string $cfg['Servers'][$i]['verbose'] */$cfg['Servers'][$i]['verbose'] = '';/** * Database used for Relation, Bookmark and PDF Features * (see examples/create_tables.sql) *   - leave blank for no support *     SUGGESTED: 'phpmyadmin' * * @global string $cfg['Servers'][$i]['pmadb'] */$cfg['Servers'][$i]['pmadb'] = '';/** * Bookmark table *   - leave blank for no bookmark support *     SUGGESTED: 'pma_bookmark' * * @global string $cfg['Servers'][$i]['bookmarktable'] */$cfg['Servers'][$i]['bookmarktable'] = '';/** * table to describe the relation between links (see doc) *   - leave blank for no relation-links support *     SUGGESTED: 'pma_relation' * * @global string $cfg['Servers'][$i]['relation'] */$cfg['Servers'][$i]['relation'] = '';/** * table to describe the display fields *   - leave blank for no display fields support *     SUGGESTED: 'pma_table_info' * * @global string $cfg['Servers'][$i]['table_info'] */$cfg['Servers'][$i]['table_info'] = '';/** * table to describe the tables position for the PDF schema *   - leave blank for no PDF schema support *     SUGGESTED: 'pma_table_coords' * * @global string $cfg['Servers'][$i]['table_coords'] */$cfg['Servers'][$i]['table_coords'] = '';/** * table to describe pages of relationpdf *   - leave blank if you don't want to use this *     SUGGESTED: 'pma_pdf_pages' * * @global string $cfg['Servers'][$i]['pdf_pages'] */$cfg['Servers'][$i]['pdf_pages'] = '';/** * table to store column information *   - leave blank for no column comments/mime types *     SUGGESTED: 'pma_column_info' * * @global string $cfg['Servers'][$i]['column_info'] */$cfg['Servers'][$i]['column_info'] = '';/** * table to store SQL history *   - leave blank for no SQL query history *     SUGGESTED: 'pma_history' * * @global string $cfg['Servers'][$i]['history'] */$cfg['Servers'][$i]['history'] = '';/** * table to store the coordinates for Designer *   - leave blank for no Designer feature *     SUGGESTED: 'pma_designer_coords' * * @global string $cfg['Servers'][$i]['designer_coords'] */$cfg['Servers'][$i]['designer_coords'] = '';/** * table to store recently used tables *   - leave blank for no "persistent" recently used tables *     SUGGESTED: 'pma_recent' */$cfg['Servers'][$i]['recent'] = '';/** * table to store UI preferences for tables *   - leave blank for no "persistent" UI preferences *     SUGGESTED: 'pma_table_uiprefs' */$cfg['Servers'][$i]['table_uiprefs'] = '';/** * table to store SQL tracking *   - leave blank for no SQL tracking *     SUGGESTED: 'pma_tracking' * * @global string $cfg['Servers'][$i]['tracking'] */$cfg['Servers'][$i]['tracking'] = '';/** * table to store user preferences *   - leave blank to disable server storage *     SUGGESTED: 'pma_userconfig' * * @global string $cfg['Servers'][$i]['userconfig'] */$cfg['Servers'][$i]['userconfig'] = '';/** * Maximum number of records saved in $cfg['Servers'][$i]['table_uiprefs'] table. * * In case where tables in databases is modified (e.g. dropped or renamed), * table_uiprefs may contains invalid data (referring to tables which are not * exist anymore). * This configuration make sure that we only keep N (N = MaxTableUiprefs) * newest record in table_uiprefs and automatically delete older records. * * @global integer $cfg['Servers'][$i]['userconfig'] = ''; */$cfg['Servers'][$i]['MaxTableUiprefs'] = 100;/** * set to false if you know that your pma_* tables are up to date. * This prevents compatibility checks and thereby increases performance. * * @global boolean $cfg['Servers'][$i]['verbose_check'] */$cfg['Servers'][$i]['verbose_check'] = true;/** * whether to allow root login * * @global boolean $cfg['Servers'][$i]['AllowRoot'] */$cfg['Servers'][$i]['AllowRoot'] = true;/** * whether to allow login of any user without a password * * @global boolean $cfg['Servers'][$i]['AllowNoPassword'] */$cfg['Servers'][$i]['AllowNoPassword'] = false;/** * Host authentication order, leave blank to not use * * @global string $cfg['Servers'][$i]['AllowDeny']['order'] */$cfg['Servers'][$i]['AllowDeny']['order'] = '';/** * Host authentication rules, leave blank for defaults * * @global array $cfg['Servers'][$i]['AllowDeny']['rules'] */$cfg['Servers'][$i]['AllowDeny']['rules'] = array();/** * Disable use of INFORMATION_SCHEMA. Is always 'true' for Drizzle. * * @see http://sf.net/support/tracker.php?aid=1849494 * @see http://bugs.mysql.com/19588 * @global boolean $cfg['Servers'][$i]['DisableIS'] */$cfg['Servers'][$i]['DisableIS'] = true;/** * SQL command to fetch available databases * * by default most user will be fine with SHOW DATABASES, * for servers with a huge amount of databases it is possible to * define a command which executes faster but with less information * * especially when accessing database servers from ISPs changing this command * can result in a great speed improvement * * false will disable fetching databases from the server, only databases in * $cfg['Servers'][$i]['only_db'] will be displayed * * #user# will be replaced by current user * * examples: * 'SHOW DATABASES' * "SHOW DATABASES LIKE '#user#\_%'" * 'SELECT DISTINCT TABLE_SCHEMA FROM information_schema.SCHEMA_PRIVILEGES' * 'SELECT SCHEMA_NAME FROM information_schema.SCHEMATA' * false * * @global array $cfg['Servers'][$i]['ShowDatabasesCommand'] */$cfg['Servers'][$i]['ShowDatabasesCommand'] = 'SHOW DATABASES';/** * Whether to count tables when showing database list * * @global array $cfg['Servers'][$i]['CountTables'] */$cfg['Servers'][$i]['CountTables'] = false;/** * Whether the tracking mechanism creates versions for tables and views automatically. * * @global bool $cfg['Servers'][$i]['tracking_version_auto_create'] */$cfg['Servers'][$i]['tracking_version_auto_create'] = false;/** * Defines the list of statements the auto-creation uses for new versions. * * @global string $cfg['Servers'][$i]['tracking_default_statements'] */$cfg['Servers'][$i]['tracking_default_statements'] = 'CREATE TABLE,ALTER TABLE,DROP TABLE,RENAME TABLE,' .                                          'CREATE INDEX,DROP INDEX,' .                                          'INSERT,UPDATE,DELETE,TRUNCATE,REPLACE,' .                                          'CREATE VIEW,ALTER VIEW,DROP VIEW,' .                                          'CREATE DATABASE,ALTER DATABASE,DROP DATABASE';/** * Whether a DROP VIEW IF EXISTS statement will be added as first line to the log when creating a view. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_view'] */$cfg['Servers'][$i]['tracking_add_drop_view'] = true;/** * Whether a DROP TABLE IF EXISTS statement will be added as first line to the log when creating a table. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_table'] */$cfg['Servers'][$i]['tracking_add_drop_table'] = true;/** * Whether a DROP DATABASE IF EXISTS statement will be added as first line to the log when creating a database. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_database'] */$cfg['Servers'][$i]['tracking_add_drop_database'] = true;/** * Default server (0 = no default server) * * If you have more than one server configured, you can set $cfg['ServerDefault'] * to any one of them to auto-connect to that server when phpMyAdmin is started, * or set it to 0 to be given a list of servers without logging in * If you have only one server configured, $cfg['ServerDefault'] *MUST* be * set to that server. * * @global integer $cfg['ServerDefault'] */$cfg['ServerDefault'] = 1;/* * Other core phpMyAdmin settings *//** * whether Ajax behavior is active * * @global boolean $cfg['AjaxEnable'] */$cfg['AjaxEnable'] = true;/** * whether version check is active * * @global boolean $cfg['VersionCheck'] */$cfg['VersionCheck'] = VERSION_CHECK_DEFAULT;/** * maximum number of db's displayed in left frame and database list * * @global integer $cfg['MaxDbList'] */$cfg['MaxDbList'] = 100;/** * maximum number of tables displayed in table list * * @global integer $cfg['MaxTableList'] */$cfg['MaxTableList'] = 250;/** * whether to show hint or not * * @global boolean $cfg['ShowHint'] */$cfg['ShowHint'] = true;/** * maximum number of characters when a SQL query is displayed * * @global integer $cfg['MaxCharactersInDisplayedSQL'] */$cfg['MaxCharactersInDisplayedSQL'] = 1000;/** * use GZIP output buffering if possible (true|false|'auto') * * @global string $cfg['OBGzip'] */$cfg['OBGzip'] = 'auto';/** * use persistent connections to MySQL database * * @global boolean $cfg['PersistentConnections'] */$cfg['PersistentConnections'] = false;/** * whether to force using HTTPS * * @global boolean $cfg['ForceSSL'] */$cfg['ForceSSL'] = false;/** * maximum execution time in seconds (0 for no limit) * * @global integer $cfg['ExecTimeLimit'] */$cfg['ExecTimeLimit'] = 300;/** * Path for storing session data (session_save_path PHP parameter). * * @global integer $cfg['SessionSavePath'] */$cfg['SessionSavePath'] = '';/** * maximum allocated bytes ('0' for no limit) * this is a string because '16M' is a valid value; we must put here * a string as the default value so that /setup accepts strings * * @global string $cfg['MemoryLimit'] */$cfg['MemoryLimit'] = '0';/** * mark used tables, make possible to show locked tables (since MySQL 3.23.30) * Is ignored for Drizzle. * * @global boolean $cfg['SkipLockedTables'] */$cfg['SkipLockedTables'] = false;/** * show SQL queries as run * * @global boolean $cfg['ShowSQL'] */$cfg['ShowSQL'] = true;/** * retain SQL input on Ajax execute * * @global boolean $cfg['RetainQueryEditor'] */$cfg['RetainQueryBox'] = false;/** * show a 'Drop database' link to normal users * * @global boolean $cfg['AllowUserDropDatabase'] */$cfg['AllowUserDropDatabase'] = false;/** * confirm some commands that can result in loss of data * (see "need_confirm" in the parser) * * @global boolean $cfg['Confirm'] */$cfg['Confirm'] = true;/** * recall previous login in cookie authentication mode or not * * @global boolean $cfg['LoginCookieRecall'] */$cfg['LoginCookieRecall'] = true;/** * validity of cookie login (in seconds; 1440 matches php.ini's * session.gc_maxlifetime) * * @global integer $cfg['LoginCookieValidity'] */$cfg['LoginCookieValidity'] = 1440;/** * how long login cookie should be stored (in seconds) * * @global integer $cfg['LoginCookieStore'] */$cfg['LoginCookieStore'] = 0;/** * whether to delete all login cookies on logout * * @global boolean $cfg['LoginCookieDeleteAll'] */$cfg['LoginCookieDeleteAll'] = true;/** * whether to enable the "database search" feature or not * * @global boolean $cfg['UseDbSearch'] */$cfg['UseDbSearch'] = true;/** * if set to true, PMA continues computing multiple-statement queries * even if one of the queries failed * * @global boolean $cfg['IgnoreMultiSubmitErrors'] */$cfg['IgnoreMultiSubmitErrors'] = false;/** * if set to true, PMA will show the affected rows of EACH statement on * multiple-statement queries. See the libraries/import.php file for * hard coded defaults on how many queries a statement may contain! * * @global boolean $cfg['VerboseMultiSubmit'] */$cfg['VerboseMultiSubmit'] = true;/** * allow login to any user entered server in cookie based authentication * * @global boolean $cfg['AllowArbitraryServer'] */$cfg['AllowArbitraryServer'] = false;/******************************************************************************* * Error handler configuration * * this configures phpMyAdmin's own error handler, it is used to avoid information * disclosure, gather errors for logging, reporting and displaying * * @global array $cfg['Error_Handler'] */$cfg['Error_Handler'] = array();/** * whether to display errors or not * * this does not affect errors of type  E_USER_* * * @global boolean $cfg['Error_Handler']['display'] */$cfg['Error_Handler']['display'] = false;/** * (NOT IMPLEMENTED YET) * where to log errors, false or empty to disable * * <code> * // EXAMPLE log to std PHP error log * $cfg['Error_Handler']['log'] = array(0); * // EXAMPLE mail errors * $cfg['Error_Handler']['log'] = array(1, 'admin@example.org'); * // EXAMPLE append to specific file * $cfg['Error_Handler']['log'] = array(3, '/var/log/phpmyadmin_error.log'); * </code> * * @see     http://php.net/error_log * @global  string $cfg['Error_Handler']['log'] *///$cfg['Error_Handler']['log'] = false;/** * gather all errors in session to be displayed on a error reporting page * for viewing and/or sending to phpMyAdmin developer team * * @global boolean $cfg['Error_Handler']['gather'] */$cfg['Error_Handler']['gather'] = false;/******************************************************************************* * Left frame setup *//** * use a select-based menu and display only the current tables in the left frame. * * @global boolean $cfg['LeftFrameLight'] */$cfg['LeftFrameLight'] = true;/** * turn the select-based light menu into a tree * * @global boolean $cfg['LeftFrameDBTree'] */$cfg['LeftFrameDBTree'] = true;/** * the separator to sub-tree the select-based light menu tree * * @global string $cfg['LeftFrameDBSeparator'] */$cfg['LeftFrameDBSeparator'] = '_';/** * Which string will be used to generate table prefixes * to split/nest tables into multiple categories * * @global string $cfg['LeftFrameTableSeparator'] */$cfg['LeftFrameTableSeparator']= '__';/** * How many sublevels should be displayed when splitting up tables by the above Separator * * @global integer $cfg['LeftFrameTableLevel'] */$cfg['LeftFrameTableLevel'] = 1;/** * display table comment as tooltip in left frame * * @global boolean $cfg['ShowTooltip'] */$cfg['ShowTooltip'] = true;/** * if ShowToolTip is enabled, this defines that table/db comments * * @global boolean $cfg['ShowTooltipAliasDB'] */$cfg['ShowTooltipAliasDB'] = false;/** * are shown (in the left menu and db_structure) instead of table/db names. * Setting ShowTooltipAliasTB to 'nested' will only use the Aliases for nested * descriptors, not the table itself. * * @global boolean $cfg['ShowTooltipAliasTB'] */$cfg['ShowTooltipAliasTB'] = false;/** * display logo at top of left frame * * @global boolean $cfg['LeftDisplayLogo'] */$cfg['LeftDisplayLogo'] = true;/** * where should logo link point to (can also contain an external URL) * * @global string $cfg['LeftLogoLink'] */$cfg['LeftLogoLink'] = 'main.php';/** * whether to open the linked page in the main window ('main') or * in a new window ('new') * * @global string $cfg['LeftLogoLinkWindow'] */$cfg['LeftLogoLinkWindow'] = 'main';/** * number of recently used tables displayed in the navigation frame * * @global integer $cfg['LeftRecentTable'] */$cfg['LeftRecentTable'] = 10;/** * display a JavaScript table filter in the left frame * when more then x tables are present * * @global boolean $cfg['LeftDisplayTableFilterMinimum'] */$cfg['LeftDisplayTableFilterMinimum'] = 30;/** * display server choice at top of left frame * * @global boolean $cfg['LeftDisplayServers'] */$cfg['LeftDisplayServers'] = false;/** * server choice as links * * @global boolean $cfg['DisplayServersList'] */$cfg['DisplayServersList'] = false;/** * database choice in light as links * * @global boolean $cfg['DisplayDatabasesList'] */$cfg['DisplayDatabasesList'] = 'auto';/** * target of the navigation panel quick access icon * * Possible values: * 'tbl_structure.php' = fields list * 'tbl_sql.php' = SQL form * 'tbl_select.php' = search page * 'tbl_change.php' = insert row page * 'sql.php' = browse page * * @global string $cfg['LeftDefaultTabTable'] */$cfg['LeftDefaultTabTable'] = 'tbl_structure.php';/******************************************************************************* * In the main frame, at startup... *//** * allow to display statistics and space usage in the pages about database * details and table properties * * @global boolean $cfg['ShowStats'] */$cfg['ShowStats'] = true;/** * show PHP info link * * @global boolean $cfg['ShowPhpInfo'] */$cfg['ShowPhpInfo'] = false;/** * show MySQL server and web server information * * @global boolean $cfg['ShowServerInfo'] */$cfg['ShowServerInfo'] = true;/** * show change password link * * @global boolean $cfg['ShowChgPassword'] */$cfg['ShowChgPassword'] = true;/** * show create database form * * @global boolean $cfg['ShowCreateDb'] */$cfg['ShowCreateDb'] = true;/** * suggest a new DB name if possible (false = keep empty) * * @global boolean $cfg['SuggestDBName'] */$cfg['SuggestDBName'] = true;/******************************************************************************* * In browse mode... *//** * Use icons instead of text for the navigation bar buttons * and on right panel top menu (server db table) (true|false|'both') * * @global string $cfg['NavigationBarIconic'] */$cfg['NavigationBarIconic'] = true;/** * Defines whether a user should be displayed a "show all (records)" * button in browse mode or not. * * @global boolean $cfg['ShowAll'] */$cfg['ShowAll'] = false;/** * Number of rows displayed when browsing a result set. If the result * set contains more rows, "Previous" and "Next". * * @global integer $cfg['MaxRows'] */$cfg['MaxRows'] = 30;/** * default for 'ORDER BY' clause (valid values are 'ASC', 'DESC' or 'SMART' -ie * descending order for fields of type TIME, DATE, DATETIME & TIMESTAMP, * ascending order else-) * * @global string $cfg['Order'] */$cfg['Order'] = 'SMART';/** * default for 'Show binary contents as HEX' * * @global string $cfg['DisplayBinaryAsHex'] */$cfg['DisplayBinaryAsHex'] = true;/******************************************************************************* * In edit mode... *//** * disallow editing of binary fields * valid values are: *   false  allow editing *   'blob' allow editing except for BLOB fields *   'all'  disallow editing * * @global string $cfg['ProtectBinary'] */$cfg['ProtectBinary'] = 'blob';/** * Display the function fields in edit/insert mode * * @global boolean $cfg['ShowFunctionFields'] */$cfg['ShowFunctionFields'] = true;/** * Display the type fields in edit/insert mode * * @global boolean $cfg['ShowFieldTypesInDataEditView'] */$cfg['ShowFieldTypesInDataEditView'] = true;/** * Which editor should be used for CHAR/VARCHAR fields: *  input - allows limiting of input length *  textarea - allows newlines in fields * * @global string $cfg['CharEditing'] */$cfg['CharEditing'] = 'input';/** * The minimum size for character input fields * * @global integer $cfg['MinSizeForInputField'] */$cfg['MinSizeForInputField'] = 4;/** * The maximum size for character input fields * * @global integer $cfg['MinSizeForInputField'] */$cfg['MaxSizeForInputField'] = 60;/** * How many rows can be inserted at one time * * @global integer $cfg['InsertRows'] */$cfg['InsertRows'] = 2;/** * Sort order for items in a foreign-key drop-down list. * 'content' is the referenced data, 'id' is the key value. * * @global array $cfg['ForeignKeyDropdownOrder'] */$cfg['ForeignKeyDropdownOrder'] = array('content-id', 'id-content');/** * A drop-down list will be used if fewer items are present * * @global integer $cfg['ForeignKeyMaxLimit'] */$cfg['ForeignKeyMaxLimit'] = 100;/******************************************************************************* * For the export features... *//** * Allow for the use of zip compression (requires zip support to be enabled) * * @global boolean $cfg['ZipDump'] */$cfg['ZipDump'] = true;/** * Allow for the use of gzip compression (requires zlib) * * @global boolean $cfg['GZipDump'] */$cfg['GZipDump'] = true;/** * Allow for the use of bzip2 compression (requires bz2 extension) * * @global boolean $cfg['BZipDump'] */$cfg['BZipDump'] = true;/** * Will compress gzip/bzip2 exports on the fly without the need for much memory. * If you encounter problems with created gzip/bzip2 files disable this feature. * * @global boolean $cfg['CompressOnFly'] */$cfg['CompressOnFly'] = true;/******************************************************************************* * Tabs display settings *//** * Use graphically less intense menu tabs * * @global boolean $cfg['LightTabs'] */$cfg['LightTabs'] = false;/** * Use icons instead of text for the table display of a database (true|false|'both') * * @global boolean $cfg['PropertiesIconic'] */$cfg['PropertiesIconic'] = 'both';/** * How many columns should be used for table display of a database? * (a value larger than 1 results in some information being hidden) * * @global integer $cfg['PropertiesNumColumns'] */$cfg['PropertiesNumColumns'] = 1;/** * Possible values: * 'main.php' = the welcome page * (recommended for multiuser setups) * 'server_databases.php' = list of databases * 'server_status.php' = runtime information * 'server_variables.php' = MySQL server variables * 'server_privileges.php' = user management * 'server_processlist.php' = process list * * @global string $cfg['DefaultTabServer'] */$cfg['DefaultTabServer'] = 'main.php';/** * Possible values: * 'db_structure.php' = tables list * 'db_sql.php' = SQL form * 'db_search.php' = search query * 'db_operations.php' = operations on database * * @global string $cfg['DefaultTabDatabase'] */$cfg['DefaultTabDatabase'] = 'db_structure.php';/** * Possible values: * 'tbl_structure.php' = fields list * 'tbl_sql.php' = SQL form * 'tbl_select.php' = search page * 'tbl_change.php' = insert row page * 'sql.php' = browse page * * @global string $cfg['DefaultTabTable'] */$cfg['DefaultTabTable'] = 'sql.php';/******************************************************************************* * Export defaults */$cfg['Export'] = array();/** * codegen/csv/excel/htmlexcel/htmlword/latex/ods/odt/pdf/sql/texytext/xls/xml/yaml * * @global string $cfg['Export']['format'] */$cfg['Export']['format'] = 'sql';/** * quick/custom/custom-no-form * * @global string $cfg['Export']['format'] */$cfg['Export']['method'] = 'quick';/** * none/zip/gzip/bzip2 * * @global string $cfg['Export']['compression'] */$cfg['Export']['compression'] = 'none';/** * * * @global boolean $cfg['Export']['asfile'] */$cfg['Export']['asfile'] = true;/** * * * @global string $cfg['Export']['charset'] */$cfg['Export']['charset'] = '';/** * * * @global boolean $cfg['Export']['onserver'] */$cfg['Export']['onserver'] = false;/** * * * @global boolean $cfg['Export']['onserver_overwrite'] */$cfg['Export']['onserver_overwrite'] = false;/** * * * @global boolean $cfg['Export']['quick_export_onserver'] */$cfg['Export']['quick_export_onserver'] = false;/** * * * @global boolean $cfg['Export']['quick_export_onserver_overwrite'] */$cfg['Export']['quick_export_onserver_overwrite'] = false;/** * * * @global boolean $cfg['Export']['remember_file_template'] */$cfg['Export']['remember_file_template'] = true;/** * * * @global string $cfg['Export']['file_template_table'] */$cfg['Export']['file_template_table'] = '@TABLE@';/** * * * @global string $cfg['Export']['file_template_database'] */$cfg['Export']['file_template_database'] = '@DATABASE@';/** * * * @global string $cfg['Export']['file_template_server'] */$cfg['Export']['file_template_server'] = '@SERVER@';/** * * * @global string $cfg['Export']['codegen_structure_or_data'] */$cfg['Export']['codegen_structure_or_data'] = 'data';/** * * * @global $cfg['Export']['codegen_format'] */$cfg['Export']['codegen_format'] = 0;/** * * * @global boolean $cfg['Export']['ods_columns'] */$cfg['Export']['ods_columns'] = false;/** * * * @global string $cfg['Export']['ods_null'] */$cfg['Export']['ods_null'] = 'NULL';/** * * * @global string $cfg['Export']['odt_structure_or_data'] */$cfg['Export']['odt_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['odt_columns'] */$cfg['Export']['odt_columns'] = true;/** * * * @global boolean $cfg['Export']['odt_relation'] */$cfg['Export']['odt_relation'] = true;/** * * * @global boolean $cfg['Export']['odt_comments'] */$cfg['Export']['odt_comments'] = true;/** * * * @global boolean $cfg['Export']['odt_mime'] */$cfg['Export']['odt_mime'] = true;/** * * * @global string $cfg['Export']['odt_null'] */$cfg['Export']['odt_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['htmlword_structure_or_data'] */$cfg['Export']['htmlword_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['htmlword_columns'] */$cfg['Export']['htmlword_columns'] = false;/** * * * @global string $cfg['Export']['htmlword_null'] */$cfg['Export']['htmlword_null'] = 'NULL';/** * * * @global string $cfg['Export']['texytext_structure_or_data'] */$cfg['Export']['texytext_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['texytext_columns'] */$cfg['Export']['texytext_columns'] = false;/** * * * @global string $cfg['Export']['texytext_null'] */$cfg['Export']['texytext_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['xls_columns'] */$cfg['Export']['xls_columns'] = false;/** * * * @global string $cfg['Export']['xls_structure_or_data'] */$cfg['Export']['xls_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['xls_null'] */$cfg['Export']['xls_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['xlsx_columns'] */$cfg['Export']['xlsx_columns'] = false;/** * * * @global string $cfg['Export']['xlsx_structure_or_data'] */$cfg['Export']['xlsx_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['xlsx_null'] */$cfg['Export']['xlsx_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['csv_columns'] */$cfg['Export']['csv_columns'] = false;/** * * * @global string $cfg['Export']['csv_structure_or_data'] */$cfg['Export']['csv_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['csv_null'] */$cfg['Export']['csv_null'] = 'NULL';/** * * * @global string $cfg['Export']['csv_separator'] */$cfg['Export']['csv_separator'] = ',';/** * * * @global string $cfg['Export']['csv_enclosed'] */$cfg['Export']['csv_enclosed'] = '"';/** * * * @global string $cfg['Export']['csv_escaped'] */$cfg['Export']['csv_escaped'] = '"';/** * * * @global string $cfg['Export']['csv_terminated'] */$cfg['Export']['csv_terminated'] = 'AUTO';/** * * * @global string $cfg['Export']['csv_removeCRLF'] */$cfg['Export']['csv_removeCRLF'] = false;/** * * * @global boolean $cfg['Export']['excel_columns'] */$cfg['Export']['excel_columns'] = false;/** * * * @global string $cfg['Export']['excel_null'] */$cfg['Export']['excel_null'] = 'NULL';/** * win/mac * * @global string $cfg['Export']['excel_edition'] */$cfg['Export']['excel_edition'] = 'win';/** * * * @global string $cfg['Export']['excel_removeCRLF'] */$cfg['Export']['excel_removeCRLF'] = false;/** * * * @global string $cfg['Export']['excel_structure_or_data'] */$cfg['Export']['excel_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['latex_structure_or_data'] */$cfg['Export']['latex_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['latex_columns'] */$cfg['Export']['latex_columns'] = true;/** * * * @global boolean $cfg['Export']['latex_relation'] */$cfg['Export']['latex_relation'] = true;/** * * * @global boolean $cfg['Export']['latex_comments'] */$cfg['Export']['latex_comments'] = true;/** * * * @global boolean $cfg['Export']['latex_mime'] */$cfg['Export']['latex_mime'] = true;/** * * * @global string $cfg['Export']['latex_null'] */$cfg['Export']['latex_null'] = '\textit{NULL}';/** * * * @global boolean $cfg['Export']['latex_caption'] */$cfg['Export']['latex_caption'] = true;/** * * * @global string $cfg['Export']['latex_structure_caption'] */$cfg['Export']['latex_structure_caption'] = 'strLatexStructure';/** * * * @global string $cfg['Export']['latex_structure_continued_caption'] */$cfg['Export']['latex_structure_continued_caption'] = 'strLatexStructure strLatexContinued';/** * * * @global string $cfg['Export']['latex_data_caption'] */$cfg['Export']['latex_data_caption'] = 'strLatexContent';/** * * * @global string $cfg['Export']['latex_data_continued_caption'] */$cfg['Export']['latex_data_continued_caption'] = 'strLatexContent strLatexContinued';/** * * * @global string $cfg['Export']['latex_data_label'] */$cfg['Export']['latex_data_label'] = 'tab:@TABLE@-data';/** * * * @global string $cfg['Export']['latex_structure_label'] */$cfg['Export']['latex_structure_label'] = 'tab:@TABLE@-structure';/** * * * @global string $cfg['Export']['mediawiki_structure_or_data'] */$cfg['Export']['mediawiki_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['ods_structure_or_data'] */$cfg['Export']['ods_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['pdf_structure_or_data'] */$cfg['Export']['pdf_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['php_array_structure_or_data'] */$cfg['Export']['php_array_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['json_structure_or_data'] */$cfg['Export']['json_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['sql_structure_or_data'] */$cfg['Export']['sql_structure_or_data'] = 'structure_and_data';/** * * * @global string $cfg['Export']['sql_compatibility'] */$cfg['Export']['sql_compatibility'] = 'NONE';/** * Whether to include comments in SQL export. * * @global string $cfg['Export']['sql_include_comments'] */$cfg['Export']['sql_include_comments'] = true;/** * * * @global boolean $cfg['Export']['sql_disable_fk'] */$cfg['Export']['sql_disable_fk'] = false;/** * * * @global boolean $cfg['Export']['sql_use_transaction'] */$cfg['Export']['sql_use_transaction'] = false;/** * * * @global boolean $cfg['Export']['sql_drop_database'] */$cfg['Export']['sql_drop_database'] = false;/** * * * @global boolean $cfg['Export']['sql_drop_table'] */$cfg['Export']['sql_drop_table'] = false;/** * * * true by default for correct behavior when dealing with exporting * of VIEWs and the stand-in table * @global boolean $cfg['Export']['sql_if_not_exists'] */$cfg['Export']['sql_if_not_exists'] = true;/** * * * @global boolean $cfg['Export']['sql_procedure_function'] */$cfg['Export']['sql_procedure_function'] = true;/** * * * @global boolean $cfg['Export']['sql_auto_increment'] */$cfg['Export']['sql_auto_increment'] = true;/** * * * @global boolean $cfg['Export']['sql_backquotes'] */$cfg['Export']['sql_backquotes'] = true;/** * * * @global boolean $cfg['Export']['sql_dates'] */$cfg['Export']['sql_dates'] = false;/** * * * @global boolean $cfg['Export']['sql_relation'] */$cfg['Export']['sql_relation'] = false;/** * * * @global boolean $cfg['Export']['sql_delayed'] */$cfg['Export']['sql_delayed'] = false;/** * * * @global boolean $cfg['Export']['sql_ignore'] */$cfg['Export']['sql_ignore'] = false;/** * Export time in UTC. * * @global boolean $cfg['Export']['sql_utc_time'] */$cfg['Export']['sql_utc_time'] = true;/** * * * @global boolean $cfg['Export']['sql_hex_for_blob'] */$cfg['Export']['sql_hex_for_blob'] = true;/** * insert/update/replace * * @global string $cfg['Export']['sql_type'] */$cfg['Export']['sql_type'] = 'INSERT';/** * * * @global integer $cfg['Export']['sql_max_query_size'] */$cfg['Export']['sql_max_query_size'] = 50000;/** * * * @global boolean $cfg['Export']['sql_comments'] */$cfg['Export']['sql_comments'] = false;/** * * * @global boolean $cfg['Export']['sql_mime'] */$cfg['Export']['sql_mime'] = false;/** * \n is replaced by new line * * @global string $cfg['Export']['sql_header_comment'] */$cfg['Export']['sql_header_comment'] = '';/** * * * @global boolean $cfg['Export']['sql_create_table_statements'] */$cfg['Export']['sql_create_table_statements'] = true;/** * Whether to use complete inserts, extended inserts, both, or neither * * @global string $cfg['Export']['sql_insert_syntax'] */$cfg['Export']['sql_insert_syntax'] = 'both';/** * * * @global string $cfg['Export']['pdf_report_title'] */$cfg['Export']['pdf_report_title'] = '';/** * * *@global string $cfg['Export']['xml_structure_or_data'] */$cfg['Export']['xml_structure_or_data'] = 'data';/** * Export schema for each structure * * @global string $cfg['Export']['xml_export_struc'] */$cfg['Export']['xml_export_struc'] = true;/** * Export functions * * @global string $cfg['Export']['xml_export_functions'] */$cfg['Export']['xml_export_functions'] = true;/** * Export procedures * * @global string $cfg['Export']['xml_export_procedures'] */$cfg['Export']['xml_export_procedures'] = true;/** * Export schema for each table * * @global string $cfg['Export']['xml_export_tables'] */$cfg['Export']['xml_export_tables'] = true;/** * Export triggers * * @global string $cfg['Export']['xml_export_triggers'] */$cfg['Export']['xml_export_triggers'] = true;/** * Export views * * @global string $cfg['Export']['xml_export_views'] */$cfg['Export']['xml_export_views'] = true;/** * Export contents data * * @global string $cfg['Export']['xml_export_contents'] */$cfg['Export']['xml_export_contents'] = true;/** * * * @global string $cfg['Export']['yaml_structure_or_data'] */$cfg['Export']['yaml_structure_or_data'] = 'data';/******************************************************************************* * Import defaults */$cfg['Import'] = array();/** * * * @global string $cfg['Import']['format'] */$cfg['Import']['format'] = 'sql';/** * Default charset for import. * * @global string $cfg['Import']['charset'] */$cfg['Import']['charset'] = '';/** * * * @global boolean $cfg['Import']['allow_interrupt'] */$cfg['Import']['allow_interrupt'] = true;/** * * * @global integer $cfg['Import']['skip_queries'] */$cfg['Import']['skip_queries'] = 0;/** * * * @global string $cfg['Import']['sql_compatibility'] */$cfg['Import']['sql_compatibility'] = 'NONE';/** * * * @global string $cfg['Import']['sql_no_auto_value_on_zero'] */$cfg['Import']['sql_no_auto_value_on_zero'] = true;/** * * * @global boolean $cfg['Import']['csv_replace'] */$cfg['Import']['csv_replace'] = false;/** * * * @global boolean $cfg['Import']['csv_ignore'] */$cfg['Import']['csv_ignore'] = false;/** * * * @global string $cfg['Import']['csv_terminated'] */$cfg['Import']['csv_terminated'] = ',';/** * * * @global string $cfg['Import']['csv_enclosed'] */$cfg['Import']['csv_enclosed'] = '"';/** * * * @global string $cfg['Import']['csv_escaped'] */$cfg['Import']['csv_escaped'] = '"';/** * * * @global string $cfg['Import']['csv_new_line'] */$cfg['Import']['csv_new_line'] = 'auto';/** * * * @global string $cfg['Import']['csv_columns'] */$cfg['Import']['csv_columns'] = '';/** * * * @global string $cfg['Import']['csv_col_names'] */$cfg['Import']['csv_col_names'] = false;/** * * * @global boolean $cfg['Import']['ldi_replace'] */$cfg['Import']['ldi_replace'] = false;/** * * * @global boolean $cfg['Import']['ldi_ignore'] */$cfg['Import']['ldi_ignore'] = false;/** * * * @global string $cfg['Import']['ldi_terminated'] */$cfg['Import']['ldi_terminated'] = ';';/** * * * @global string $cfg['Import']['ldi_enclosed'] */$cfg['Import']['ldi_enclosed'] = '"';/** * * * @global string $cfg['Import']['ldi_escaped'] */$cfg['Import']['ldi_escaped'] = '\\';/** * * * @global string $cfg['Import']['ldi_new_line'] */$cfg['Import']['ldi_new_line'] = 'auto';/** * * * @global string $cfg['Import']['ldi_columns'] */$cfg['Import']['ldi_columns'] = '';/** * 'auto' for auto-detection, true or false for forcing * * @global string $cfg['Import']['ldi_local_option'] */$cfg['Import']['ldi_local_option'] = 'auto';/** * * * @global string $cfg['Import']['ods_col_names'] */$cfg['Import']['ods_col_names'] = false;/** * * * @global string $cfg['Import']['ods_empty_rows'] */$cfg['Import']['ods_empty_rows'] = true;/** * * * @global string $cfg['Import']['ods_recognize_percentages'] */$cfg['Import']['ods_recognize_percentages'] = true;/** * * * @global string $cfg['Import']['ods_recognize_currency'] */$cfg['Import']['ods_recognize_currency'] = true;/** * * * @global string $cfg['Import']['xml_col_names'] */$cfg['Import']['xls_col_names'] = false;/** * * * @global string $cfg['Import']['xml_empty_rows'] */$cfg['Import']['xls_empty_rows'] = true;/** * * * @global string $cfg['Import']['xlsx_col_names'] */$cfg['Import']['xlsx_col_names'] = false;/** * Link to the official MySQL documentation. * Be sure to include no trailing slash on the path. * See http://dev.mysql.com/doc/ for more information * about MySQL manuals and their types. * * @global string $cfg['MySQLManualBase'] */$cfg['MySQLManualBase'] = 'http://dev.mysql.com/doc/refman';/** * Type of MySQL documentation: *   viewable   - "viewable online", current one used on MySQL website *   searchable - "Searchable, with user comments" *   chapters   - "HTML, one page per chapter" *   chapters_old - "HTML, one page per chapter", format used prior to MySQL 5.0 release *   big        - "HTML, all on one page" *   old        - old style used in phpMyAdmin 2.3.0 and sooner *   none       - do not show documentation links * * @global string $cfg['MySQLManualType'] */$cfg['MySQLManualType'] = 'viewable';/******************************************************************************* * PDF options *//** * * * @global array $cfg['PDFPageSizes'] */$cfg['PDFPageSizes'] = array('A3', 'A4', 'A5', 'letter', 'legal');/** * * * @global string $cfg['PDFDefaultPageSize'] */$cfg['PDFDefaultPageSize'] = 'A4';/******************************************************************************* * Language and character set conversion settings *//** * Default language to use, if not browser-defined or user-defined * * @global string $cfg['DefaultLang'] */$cfg['DefaultLang'] = 'en';/** * Default connection collation * * @global string $cfg['DefaultConnectionCollation'] */$cfg['DefaultConnectionCollation'] = 'utf8_general_ci';/** * Force: always use this language * $cfg['Lang'] = 'en'; * * Regular expression to limit listed languages, e.g. '^(cs|en)' for Czech and * English only * * @global string $cfg['FilterLanguages'] */$cfg['FilterLanguages'] = '';/** * You can select here which functions will be used for character set conversion. * Possible values are: *      auto   - automatically use available one (first is tested iconv, then *               recode) *      iconv  - use iconv or libiconv functions *      recode - use recode_string function *      none   - disable encoding conversion * * @global string $cfg['RecodingEngine'] */$cfg['RecodingEngine'] = 'auto';/** * Specify some parameters for iconv used in character set conversion. See iconv * documentation for details: * http://www.gnu.org/software/libiconv/documentation/libiconv/iconv_open.3.html * * @global string $cfg['IconvExtraParams'] */$cfg['IconvExtraParams'] = '//TRANSLIT';/** * Available character sets for MySQL conversion. currently contains all which could * be found in lang/* files and few more. * Character sets will be shown in same order as here listed, so if you frequently * use some of these move them to the top. * * @global array $cfg['AvailableCharsets'] */$cfg['AvailableCharsets'] = array(    'iso-8859-1',    'iso-8859-2',    'iso-8859-3',    'iso-8859-4',    'iso-8859-5',    'iso-8859-6',    'iso-8859-7',    'iso-8859-8',    'iso-8859-9',    'iso-8859-10',    'iso-8859-11',    'iso-8859-12',    'iso-8859-13',    'iso-8859-14',    'iso-8859-15',    'windows-1250',    'windows-1251',    'windows-1252',    'windows-1256',    'windows-1257',    'koi8-r',    'big5',    'gb2312',    'utf-16',    'utf-8',    'utf-7',    'x-user-defined',    'euc-jp',    'ks_c_5601-1987',    'tis-620',    'SHIFT_JIS');/******************************************************************************* * Customization & design * * The graphical settings are now located in themes/theme-name/layout.inc.php *//** * enable the left panel pointer * (used when LeftFrameLight is false) * see also LeftPointerColor * in layout.inc.php * * @global boolean $cfg['LeftPointerEnable'] */$cfg['LeftPointerEnable'] = true;/** * enable the browse pointer * see also BrowsePointerColor * in layout.inc.php * * @global boolean $cfg['BrowsePointerEnable'] */$cfg['BrowsePointerEnable'] = true;/** * enable the browse marker * see also BrowseMarkerColor * in layout.inc.php * * @global boolean $cfg['BrowseMarkerEnable'] */$cfg['BrowseMarkerEnable'] = true;/** * textarea size (columns) in edit mode * (this value will be emphasized (*2) for SQL * query textareas and (*1.25) for query window) * * @global integer $cfg['TextareaCols'] */$cfg['TextareaCols'] = 40;/** * textarea size (rows) in edit mode * * @global integer $cfg['TextareaRows'] */$cfg['TextareaRows'] = 15;/** * double size of textarea size for LONGTEXT columns * * @global boolean $cfg['LongtextDoubleTextarea'] */$cfg['LongtextDoubleTextarea'] = true;/** * auto-select when clicking in the textarea of the query-box * * @global boolean $cfg['TextareaAutoSelect'] */$cfg['TextareaAutoSelect'] = false;/** * textarea size (columns) for CHAR/VARCHAR * * @global integer $cfg['CharTextareaCols'] */$cfg['CharTextareaCols'] = 40;/** * textarea size (rows) for CHAR/VARCHAR * * @global integer $cfg['CharTextareaRows'] */$cfg['CharTextareaRows'] = 2;/** * Max field data length in browse mode for all non-numeric fields * * @global integer $cfg['LimitChars'] */$cfg['LimitChars'] = 50;/** * Where to show the edit/copy/delete links in browse mode * Possible values are 'left', 'right', 'both' and 'none'; * which will be interpreted as 'top', 'bottom', 'both' and 'none' * respectively for vertical display mode * * @global string $cfg['RowActionLinks'] */$cfg['RowActionLinks'] = 'left';/** * default display direction (horizontal|vertical|horizontalflipped) * * @global string $cfg['DefaultDisplay'] */$cfg['DefaultDisplay'] = 'horizontal';/** * remember the last way a table sorted * * @global string $cfg['RememberSorting'] */$cfg['RememberSorting'] = true;/** * table-header rotation via faking or CSS? (css|fake|auto) * NOTE: CSS only works in IE browsers! * * @global string $cfg['HeaderFlipType'] */$cfg['HeaderFlipType'] = 'auto';/** * shows stored relation-comments in 'browse' mode. * * @global boolean $cfg['ShowBrowseComments'] */$cfg['ShowBrowseComments'] = true;/** * shows stored relation-comments in 'table property' mode. * * @global boolean $cfg['ShowPropertyComments'] */$cfg['ShowPropertyComments']= true;/** * save edited cell(s) in browse-mode at once. */$cfg['SaveCellsAtOnce'] = false;/** * shows table display direction. */$cfg['ShowDisplayDirection'] = false;/** * repeat header names every X cells? (0 = deactivate) * * @global integer $cfg['RepeatCells'] */$cfg['RepeatCells'] = 100;/** * Set to true if Edit link should open the query to edit in the query window * (assuming JavaScript is enabled), and to false if we should edit in the right panel * * @global boolean $cfg['EditInWindow'] */$cfg['EditInWindow'] = true;/** * Width of Query window * * @global integer $cfg['QueryWindowWidth'] */$cfg['QueryWindowWidth'] = 550;/** * Height of Query window * * @global integer $cfg['QueryWindowHeight'] */$cfg['QueryWindowHeight'] = 310;/** * Set to true if you want DB-based query history.If false, this utilizes * JS-routines to display query history (lost by window close) * * @global boolean $cfg['QueryHistoryDB'] */$cfg['QueryHistoryDB'] = false;/** * which tab to display in the querywindow on startup * (sql|files|history|full) * * @global string $cfg['QueryWindowDefTab'] */$cfg['QueryWindowDefTab'] = 'sql';/** * When using DB-based query history, how many entries should be kept? * * @global integer $cfg['QueryHistoryMax'] */$cfg['QueryHistoryMax'] = 25;/** * Use MIME-Types (stored in column comments table) for * * @global boolean $cfg['BrowseMIME'] */$cfg['BrowseMIME'] = true;/** * When approximate count < this, PMA will get exact count for table rows. * * @global integer $cfg['MaxExactCount'] */$cfg['MaxExactCount'] = 20000;/** * Zero means that no row count is done for views; see the doc * * @global integer $cfg['MaxExactCountViews'] */$cfg['MaxExactCountViews'] = 100000;/** * Sort table and database in natural order * * @global boolean $cfg['NaturalOrder'] */$cfg['NaturalOrder'] = true;/** * Initial state for sliders * (open | closed | disabled) * * @global string $cfg['InitialSlidersState'] */$cfg['InitialSlidersState'] = 'closed';/** * User preferences: disallow these settings * For possible setting names look in libraries/config/user_preferences.forms.php * * @global array $cfg['UserprefsDisallow'] */$cfg['UserprefsDisallow'] = array();/** * User preferences: enable the Developer tab */$cfg['UserprefsDeveloperTab'] = false;/******************************************************************************* * Window title settings *//** * title of browser window when a table is selected * * @global string $cfg['TitleTable'] */$cfg['TitleTable'] = '@HTTP_HOST@ / @VSERVER@ / @DATABASE@ / @TABLE@ | @PHPMYADMIN@';/** * title of browser window when a database is selected * * @global string $cfg['TitleDatabase'] */$cfg['TitleDatabase'] = '@HTTP_HOST@ / @VSERVER@ / @DATABASE@ | @PHPMYADMIN@';/** * title of browser window when a server is selected * * @global string $cfg['TitleServer'] */$cfg['TitleServer'] = '@HTTP_HOST@ / @VSERVER@ | @PHPMYADMIN@';/** * title of browser window when nothing is selected * @global string $cfg['TitleDefault'] */$cfg['TitleDefault'] = '@HTTP_HOST@ | @PHPMYADMIN@';/** * show some icons for warning, error and information messages (true|false)? * * @global boolean $cfg['ErrorIconic'] */$cfg['ErrorIconic'] = true;/** * show icons in list on main page and on menu tabs (true|false)? * * @global boolean $cfg['MainPageIconic'] */$cfg['MainPageIconic'] = true;/** * show help button instead of Documentation text (true|false)? * * @global boolean $cfg['ReplaceHelpImg'] */$cfg['ReplaceHelpImg'] = true;/******************************************************************************* * theme manager *//** * using themes manager please set up here the path to 'themes' else leave empty * * @global string $cfg['ThemePath'] */$cfg['ThemePath'] = './themes';/** * if you want to use selectable themes and if ThemesPath not empty * set it to true, else set it to false (default is false); * * @global boolean $cfg['ThemeManager'] */$cfg['ThemeManager'] = true;/** * set up default theme, if ThemePath not empty you can set up here an valid * path to themes or 'original' for the original pma-theme * * @global string $cfg['ThemeDefault'] */$cfg['ThemeDefault'] = 'pmahomme';/** * allow different theme for each configured server * * @global boolean $cfg['ThemePerServer'] */$cfg['ThemePerServer'] = false;/******************************************************************************* * *//** * Default query for table * * @global string $cfg['DefaultQueryTable'] */$cfg['DefaultQueryTable'] = 'SELECT * FROM @TABLE@ WHERE 1';/** * Default query for database * * @global string $cfg['DefaultQueryDatabase'] */$cfg['DefaultQueryDatabase'] = '';/******************************************************************************* * SQL Query box settings * These are the links display in all of the SQL Query boxes * * @global array $cfg['SQLQuery'] */$cfg['SQLQuery'] = array();/** * Edit link to change a query * * @global boolean $cfg['SQLQuery']['Edit'] */$cfg['SQLQuery']['Edit'] = true;/** * EXPLAIN on SELECT queries * * @global boolean $cfg['SQLQuery']['Explain'] */$cfg['SQLQuery']['Explain'] = true;/** * Wrap a query in PHP * * @global boolean $cfg['SQLQuery']['ShowAsPHP'] */$cfg['SQLQuery']['ShowAsPHP'] = true;/** * Validate a query (see $cfg['SQLValidator'] as well) * * @global boolean $cfg['SQLQuery']['Validate'] */$cfg['SQLQuery']['Validate'] = false;/** * Refresh the results page * * @global boolean $cfg['SQLQuery']['Refresh'] */$cfg['SQLQuery']['Refresh'] = true;/******************************************************************************* * Web server upload/save/import directories *//** * Directory for uploaded files that can be executed by phpMyAdmin. * For example './upload'. Leave empty for no upload directory support. * Use %u for username inclusion. * * @global string $cfg['UploadDir'] */$cfg['UploadDir'] = '';/** * Directory where phpMyAdmin can save exported data on server. * For example './save'. Leave empty for no save directory support. * Use %u for username inclusion. * * @global string $cfg['SaveDir'] */$cfg['SaveDir'] = '';/** * Directory where phpMyAdmin can save temporary files. * This is needed for MS Excel export, see documentation how to enable that. * * @global string $cfg['TempDir'] */$cfg['TempDir'] = '';/** * Misc. settings *//** * Is GD >= 2 available? Set to yes/no/auto. 'auto' does auto-detection, * which is the only safe way to determine GD version. * * @global string $cfg['GD2Available'] */$cfg['GD2Available'] = 'auto';/** * Lists proxy IP and HTTP header combinations which are trusted for IP allow/deny * * @global array $cfg['TrustedProxies'] */$cfg['TrustedProxies'] = array();/** * We normally check the permissions on the configuration file to ensure * it's not world writable. However, phpMyAdmin could be installed on * a NTFS filesystem mounted on a non-Windows server, in which case the * permissions seems wrong but in fact cannot be detected. In this case * a sysadmin would set the following to false. */$cfg['CheckConfigurationPermissions'] = true;/** * Limit for length of URL in links. When length would be above this limit, it * is replaced by form with button. * This is required as some web servers (IIS) have problems with long URLs. * The recommended limit is 2000 * (see http://www.boutell.com/newfaq/misc/urllength.html) but we put * 1000 to accommodate Suhosin, see bug #3358750. */$cfg['LinkLengthLimit'] = 1000;/** * Disable the table maintenance mass operations, like optimizing or * repairing the selected tables of a database. An accidental execution * of such a maintenance task can enormously slow down a bigger database. */$cfg['DisableMultiTableMaintenance'] = false;/******************************************************************************* * SQL Parser Settings * * @global array $cfg['SQP'] */$cfg['SQP'] = array();/** * Pretty-printing style to use on queries (html, text, none) * * @global string $cfg['SQP']['fmtType'] */$cfg['SQP']['fmtType'] = 'html';/** * Amount to indent each level (floats are valid) * * @global integer $cfg['SQP']['fmtInd'] */$cfg['SQP']['fmtInd'] = '1';/** * Units for indenting each level (CSS Types - {em, px, pt}) * * @global string $cfg['SQP']['fmtIndUnit'] */$cfg['SQP']['fmtIndUnit'] = 'em';/******************************************************************************* * If you wish to use the SQL Validator service, you should be aware of the * following: * All SQL statements are stored anonymously for statistical purposes. * Mimer SQL Validator, Copyright 2002 Upright Database Technology. * All rights reserved. * * @global array $cfg['SQLValidator'] */$cfg['SQLValidator'] = array();/** * Make the SQL Validator available * * @global boolean $cfg['SQLValidator']['use'] */$cfg['SQLValidator']['use'] = false;/** * If you have a custom username, specify it here (defaults to anonymous) * * @global string $cfg['SQLValidator']['username'] */$cfg['SQLValidator']['username'] = '';/** * Password for username * * @global string $cfg['SQLValidator']['password'] */$cfg['SQLValidator']['password'] = '';/******************************************************************************* * Developers ONLY! * * @global array $cfg['DBG'] */$cfg['DBG'] = array();/** * Output executed queries and their execution times * * @global boolean $cfg['DBG']['sql'] */$cfg['DBG']['sql'] = false;/******************************************************************************* * MySQL settings *//** * Column types; * VARCHAR, TINYINT, TEXT and DATE are listed first, based on estimated popularity * * This variable is filled in data_*.inc.php * * @global array $cfg['ColumnTypes'] */$cfg['ColumnTypes'] = array();/** * Attributes * * This variable is filled in data_*.inc.php * * @global array $cfg['AttributeTypes'] */$cfg['AttributeTypes'] = array();if ($cfg['ShowFunctionFields']) {    /**     * Available functions     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['Functions']     */    $cfg['Functions'] = array();    /**     * Which column types will be mapped to which Group?     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['RestrictColumnTypes']     */    $cfg['RestrictColumnTypes'] = array();    /**     * Map above defined groups to any function     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['RestrictFunctions']     */    $cfg['RestrictFunctions'] = array();    /**     * Default functions for above defined groups     *     * @global array $cfg['DefaultFunctions']     */    $cfg['DefaultFunctions'] = array(        'FUNC_CHAR' => '',        'FUNC_DATE' => '',        'FUNC_NUMBER' => '',        'FUNC_SPATIAL' => 'GeomFromText',        'FUNC_UUID' => 'UUID',        'first_timestamp' => 'NOW',    );} // end if/** * Search operators * * @global array $cfg['NumOperators'] */$cfg['NumOperators'] = array(   '=',   '>',   '>=',   '<',   '<=',   '!=',   'LIKE',   'NOT LIKE',   'IN (...)',   'NOT IN (...)',   'BETWEEN',   'NOT BETWEEN',);/** * Search operators * * @global array $cfg['TextOperators'] */$cfg['TextOperators'] = array(   'LIKE',   'LIKE %...%',   'NOT LIKE',   '=',   '!=',   'REGEXP',   'REGEXP ^...$',   'NOT REGEXP',   "= ''",   "!= ''",   'IN (...)',   'NOT IN (...)',   'BETWEEN',   'NOT BETWEEN',);/** * Search operators * * @global array $cfg['EnumOperators'] */$cfg['EnumOperators'] = array(   '=',   '!=',);/** * Search operators * * @global array $cfg['SetOperators'] */$cfg['SetOperators'] = array(   'IN',   'NOT IN',);/** * Search operators * * @global array $cfg['NullOperators'] */$cfg['NullOperators'] = array(   'IS NULL',   'IS NOT NULL',);/** * Search operators * * @global array $cfg['UnaryOperators'] */$cfg['UnaryOperators'] = array(   'IS NULL' => 1,   'IS NOT NULL' => 1,   "= ''" => 1,   "!= ''" => 1);/** * Max rows retreived for zoom search */$cfg['maxRowPlotLimit'] = 500;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * session handling * * @todo    add failover or warn if sessions are not configured properly * @todo    add an option to use mm-module for session handler * @see     http://www.php.net/session * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// verify if PHP supports session, die if it does notif (!@function_exists('session_name')) {    PMA_warnMissingExtension('session', true);} elseif (ini_get('session.auto_start') == true && session_name() != 'phpMyAdmin') {    // Do not delete the existing session, it might be used by other    // applications; instead just close it.    session_write_close();}// disable starting of sessions before all settings are done// does not work, besides how it is written in php manual//ini_set('session.auto_start', 0);// session cookie settingssession_set_cookie_params(0, $GLOBALS['PMA_Config']->getCookiePath(),    '', $GLOBALS['PMA_Config']->isHttps(), true);// cookies are safer (use @ini_set() in case this function is disabled)@ini_set('session.use_cookies', true);// optionally set session_save_path$path = $GLOBALS['PMA_Config']->get('SessionSavePath');if (!empty($path)) {    session_save_path($path);}// but not all user allow cookies@ini_set('session.use_only_cookies', false);// do not force transparent session ids, see bug #3398788//@ini_set('session.use_trans_sid', true);@ini_set('url_rewriter.tags',    'a=href,frame=src,input=src,form=fakeentry,fieldset=');//ini_set('arg_separator.output', '&amp;');// delete session/cookies when browser is closed@ini_set('session.cookie_lifetime', 0);// warn but dont work with bug@ini_set('session.bug_compat_42', false);@ini_set('session.bug_compat_warn', true);// use more secure session ids@ini_set('session.hash_function', 1);// some pages (e.g. stylesheet) may be cached on clients, but not in shared// proxy serverssession_cache_limiter('private');// start the session// on some servers (for example, sourceforge.net), we get a permission error// on the session data directory, so I add some "@"// See bug #1538132. This would block normal behavior on a cluster//ini_set('session.save_handler', 'files');$session_name = 'phpMyAdmin';@session_name($session_name);if (! isset($_COOKIE[$session_name])) {    // on first start of session we check for errors    // f.e. session dir cannot be accessed - session file not created    $orig_error_count = $GLOBALS['error_handler']->countErrors();    $r = session_start();    if ($r !== true || $orig_error_count != $GLOBALS['error_handler']->countErrors()) {        setcookie($session_name, '', 1);        /*         * Session initialization is done before selecting language, so we         * can not use translations here.         */        PMA_fatalError('Cannot start session without errors, please check errors given in your PHP and/or webserver log file and configure your PHP installation properly.');    }    unset($orig_error_count);} else {    session_start();}/** * Token which is used for authenticating access queries. * (we use "space PMA_token space" to prevent overwriting) */if (! isset($_SESSION[' PMA_token '])) {    $_SESSION[' PMA_token '] = md5(uniqid(rand(), true));}/** * tries to secure session from hijacking and fixation * should be called before login and after successfull login * (only required if sensitive information stored in session) * */function PMA_secureSession(){    // prevent session fixation and XSS    session_regenerate_id(true);    $_SESSION[' PMA_token '] = md5(uniqid(rand(), true));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Configuration handling. * * @package PhpMyAdmin *//** * Load vendor configuration. */require './libraries/vendor_config.php';/** * Configuration class * * @package PhpMyAdmin */class PMA_Config{    /**     * @var string  default config source     */    var $default_source = './libraries/config.default.php';    /**     * @var array   default configuration settings     */    var $default = array();    /**     * @var array   configuration settings     */    var $settings = array();    /**     * @var string  config source     */    var $source = '';    /**     * @var int     source modification time     */    var $source_mtime = 0;    var $default_source_mtime = 0;    var $set_mtime = 0;    /**     * @var boolean     */    var $error_config_file = false;    /**     * @var boolean     */    var $error_config_default_file = false;    /**     * @var boolean     */    var $error_pma_uri = false;    /**     * @var array     */    var $default_server = array();    /**     * @var boolean whether init is done or not     * set this to false to force some initial checks     * like checking for required functions     */    var $done = false;    /**     * constructor     *     * @param string $source source to read config from     */    function __construct($source = null)    {        $this->settings = array();        // functions need to refresh in case of config file changed goes in        // PMA_Config::load()        $this->load($source);        // other settings, independent from config file, comes in        $this->checkSystem();        $this->checkIsHttps();    }    /**     * sets system and application settings     *     * @return nothing     */    function checkSystem()    {        $this->set('PMA_VERSION', '3.5.0');        /**         * @deprecated         */        $this->set('PMA_THEME_VERSION', 2);        /**         * @deprecated         */        $this->set('PMA_THEME_GENERATION', 2);        $this->checkPhpVersion();        $this->checkWebServerOs();        $this->checkWebServer();        $this->checkGd2();        $this->checkClient();        $this->checkUpload();        $this->checkUploadSize();        $this->checkOutputCompression();    }    /**     * whether to use gzip output compression or not     *     * @return nothing     */    function checkOutputCompression()    {        // If zlib output compression is set in the php configuration file, no        // output buffering should be run        if (@ini_get('zlib.output_compression')) {            $this->set('OBGzip', false);        }        // disable output-buffering (if set to 'auto') for IE6, else enable it.        if (strtolower($this->get('OBGzip')) == 'auto') {            if ($this->get('PMA_USR_BROWSER_AGENT') == 'IE'                && $this->get('PMA_USR_BROWSER_VER') >= 6                && $this->get('PMA_USR_BROWSER_VER') < 7            ) {                $this->set('OBGzip', false);            } else {                $this->set('OBGzip', true);            }        }    }    /**     * Determines platform (OS), browser and version of the user     * Based on a phpBuilder article:     *     * @see http://www.phpbuilder.net/columns/tim20000821.php     *     * @return nothing     */    function checkClient()    {        if (PMA_getenv('HTTP_USER_AGENT')) {            $HTTP_USER_AGENT = PMA_getenv('HTTP_USER_AGENT');        } elseif (! isset($HTTP_USER_AGENT)) {            $HTTP_USER_AGENT = '';        }        // 1. Platform        if (strstr($HTTP_USER_AGENT, 'Win')) {            $this->set('PMA_USR_OS', 'Win');        } elseif (strstr($HTTP_USER_AGENT, 'Mac')) {            $this->set('PMA_USR_OS', 'Mac');        } elseif (strstr($HTTP_USER_AGENT, 'Linux')) {            $this->set('PMA_USR_OS', 'Linux');        } elseif (strstr($HTTP_USER_AGENT, 'Unix')) {            $this->set('PMA_USR_OS', 'Unix');        } elseif (strstr($HTTP_USER_AGENT, 'OS/2')) {            $this->set('PMA_USR_OS', 'OS/2');        } else {            $this->set('PMA_USR_OS', 'Other');        }        // 2. browser and version        // (must check everything else before Mozilla)        if (preg_match(            '@Opera(/| )([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[2]);            $this->set('PMA_USR_BROWSER_AGENT', 'OPERA');        } elseif (preg_match(            '@MSIE ([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'IE');        } elseif (preg_match(            '@OmniWeb/([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'OMNIWEB');        // Konqueror 2.2.2 says Konqueror/2.2.2        // Konqueror 3.0.3 says Konqueror/3        } elseif (preg_match(            '@(Konqueror/)(.*)(;)@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[2]);            $this->set('PMA_USR_BROWSER_AGENT', 'KONQUEROR');        } elseif (preg_match(            '@Mozilla/([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version)            && preg_match('@Safari/([0-9]*)@', $HTTP_USER_AGENT, $log_version2)        ) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1] . '.' . $log_version2[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'SAFARI');        } elseif (preg_match('@rv:1.9(.*)Gecko@', $HTTP_USER_AGENT)) {            $this->set('PMA_USR_BROWSER_VER', '1.9');            $this->set('PMA_USR_BROWSER_AGENT', 'GECKO');        } elseif (            preg_match('@Mozilla/([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'MOZILLA');        } else {            $this->set('PMA_USR_BROWSER_VER', 0);            $this->set('PMA_USR_BROWSER_AGENT', 'OTHER');        }    }    /**     * Whether GD2 is present     *     * @return nothing     */    function checkGd2()    {        if ($this->get('GD2Available') == 'yes') {            $this->set('PMA_IS_GD2', 1);        } elseif ($this->get('GD2Available') == 'no') {            $this->set('PMA_IS_GD2', 0);        } else {            if (!@function_exists('imagecreatetruecolor')) {                $this->set('PMA_IS_GD2', 0);            } else {                if (@function_exists('gd_info')) {                    $gd_nfo = gd_info();                    if (strstr($gd_nfo["GD Version"], '2.')) {                        $this->set('PMA_IS_GD2', 1);                    } else {                        $this->set('PMA_IS_GD2', 0);                    }                } else {                    /* We must do hard way... but almost no chance to execute this */                    ob_start();                    phpinfo(INFO_MODULES); /* Only modules */                    $a = strip_tags(ob_get_contents());                    ob_end_clean();                    /* Get GD version string from phpinfo output */                    if (preg_match('@GD Version[[:space:]]*\(.*\)@', $a, $v)) {                        if (strstr($v, '2.')) {                            $this->set('PMA_IS_GD2', 1);                        } else {                            $this->set('PMA_IS_GD2', 0);                        }                    } else {                        $this->set('PMA_IS_GD2', 0);                    }                }            }        }    }    /**     * Whether the Web server php is running on is IIS     *     * @return nothing     */    function checkWebServer()    {        if (PMA_getenv('SERVER_SOFTWARE')            // some versions return Microsoft-IIS, some Microsoft/IIS            // we could use a preg_match() but it's slower            && stristr(PMA_getenv('SERVER_SOFTWARE'), 'Microsoft')            && stristr(PMA_getenv('SERVER_SOFTWARE'), 'IIS')        ) {            $this->set('PMA_IS_IIS', 1);        } else {            $this->set('PMA_IS_IIS', 0);        }    }    /**     * Whether the os php is running on is windows or not     *     * @return nothing     */    function checkWebServerOs()    {        // Default to Unix or Equiv        $this->set('PMA_IS_WINDOWS', 0);        // If PHP_OS is defined then continue        if (defined('PHP_OS')) {            if (stristr(PHP_OS, 'win')) {                // Is it some version of Windows                $this->set('PMA_IS_WINDOWS', 1);            } elseif (stristr(PHP_OS, 'OS/2')) {                // Is it OS/2 (No file permissions like Windows)                $this->set('PMA_IS_WINDOWS', 1);            }        }    }    /**     * detects PHP version     *     * @return nothing     */    function checkPhpVersion()    {        $match = array();        if (! preg_match(            '@([0-9]{1,2}).([0-9]{1,2}).([0-9]{1,2})@',            phpversion(),            $match        )) {            preg_match(                '@([0-9]{1,2}).([0-9]{1,2})@',                phpversion(),                $match            );        }        if (isset($match) && ! empty($match[1])) {            if (! isset($match[2])) {                $match[2] = 0;            }            if (! isset($match[3])) {                $match[3] = 0;            }            $this->set(                'PMA_PHP_INT_VERSION',                (int) sprintf('%d%02d%02d', $match[1], $match[2], $match[3])            );        } else {            $this->set('PMA_PHP_INT_VERSION', 0);        }        $this->set('PMA_PHP_STR_VERSION', phpversion());    }    /**     * loads default values from default source     *     * @return  boolean     success     */    function loadDefaults()    {        $cfg = array();        if (! file_exists($this->default_source)) {            $this->error_config_default_file = true;            return false;        }        include $this->default_source;        $this->default_source_mtime = filemtime($this->default_source);        $this->default_server = $cfg['Servers'][1];        unset($cfg['Servers']);        $this->default = $cfg;        $this->settings = PMA_array_merge_recursive($this->settings, $cfg);        $this->error_config_default_file = false;        return true;    }    /**     * loads configuration from $source, usally the config file     * should be called on object creation     *     * @param string $source config file     *     * @return bool     */    function load($source = null)    {        $this->loadDefaults();        if (null !== $source) {            $this->setSource($source);        }        if (! $this->checkConfigSource()) {            return false;        }        $cfg = array();        /**         * Parses the configuration file, the eval is used here to avoid         * problems with trailing whitespace, what is often a problem.         */        $old_error_reporting = error_reporting(0);        $eval_result = eval('?' . '>' . trim(file_get_contents($this->getSource())));        error_reporting($old_error_reporting);        if ($eval_result === false) {            $this->error_config_file = true;        } else {            $this->error_config_file = false;            $this->source_mtime = filemtime($this->getSource());        }        /**         * Backward compatibility code         */        if (!empty($cfg['DefaultTabTable'])) {            $cfg['DefaultTabTable'] = str_replace(                '_properties',                '',                str_replace(                    'tbl_properties.php',                    'tbl_sql.php',                    $cfg['DefaultTabTable']                )            );        }        if (!empty($cfg['DefaultTabDatabase'])) {            $cfg['DefaultTabDatabase'] = str_replace(                '_details',                '',                str_replace(                    'db_details.php',                    'db_sql.php',                    $cfg['DefaultTabDatabase']                )            );        }        $this->settings = PMA_array_merge_recursive($this->settings, $cfg);        $this->checkPmaAbsoluteUri();        $this->checkFontsize();        $this->checkPermissions();        // Handling of the collation must be done after merging of $cfg        // (from config.inc.php) so that $cfg['DefaultConnectionCollation']        // can have an effect. Note that the presence of collation        // information in a cookie has priority over what is defined        // in the default or user's config files.        /**         * @todo check validity of $_COOKIE['pma_collation_connection']         */        if (! empty($_COOKIE['pma_collation_connection'])) {            $this->set(                'collation_connection',                strip_tags($_COOKIE['pma_collation_connection'])            );        } else {            $this->set(                'collation_connection',                $this->get('DefaultConnectionCollation')            );        }        // Now, a collation information could come from REQUEST        // (an example of this: the collation selector in main.php)        // so the following handles the setting of collation_connection        // and later, in common.inc.php, the cookie will be set        // according to this.        $this->checkCollationConnection();        return true;    }    /**     * Loads user preferences and merges them with current config     * must be called after control connection has been estabilished     *     * @return boolean     */    function loadUserPreferences()    {        // index.php should load these settings, so that phpmyadmin.css.php        // will have everything avaiable in session cache        $server = isset($GLOBALS['server'])            ? $GLOBALS['server']            : (!empty($GLOBALS['cfg']['ServerDefault'])                ? $GLOBALS['cfg']['ServerDefault']                : 0);        $cache_key = 'server_' . $server;        if ($server > 0 && !defined('PMA_MINIMUM_COMMON')) {            $config_mtime = max($this->default_source_mtime, $this->source_mtime);            // cache user preferences, use database only when needed            if (! isset($_SESSION['cache'][$cache_key]['userprefs'])                || $_SESSION['cache'][$cache_key]['config_mtime'] < $config_mtime            ) {                // load required libraries                include_once './libraries/user_preferences.lib.php';                $prefs = PMA_load_userprefs();                $_SESSION['cache'][$cache_key]['userprefs']                    = PMA_apply_userprefs($prefs['config_data']);                $_SESSION['cache'][$cache_key]['userprefs_mtime'] = $prefs['mtime'];                $_SESSION['cache'][$cache_key]['userprefs_type'] = $prefs['type'];                $_SESSION['cache'][$cache_key]['config_mtime'] = $config_mtime;            }        } elseif ($server == 0            || ! isset($_SESSION['cache'][$cache_key]['userprefs'])        ) {            $this->set('user_preferences', false);            return;        }        $config_data = $_SESSION['cache'][$cache_key]['userprefs'];        // type is 'db' or 'session'        $this->set(            'user_preferences',            $_SESSION['cache'][$cache_key]['userprefs_type']        );        $this->set(            'user_preferences_mtime',            $_SESSION['cache'][$cache_key]['userprefs_mtime']        );        // backup some settings        $org_fontsize = $this->settings['fontsize'];        // load config array        $this->settings = PMA_array_merge_recursive($this->settings, $config_data);        $GLOBALS['cfg'] = PMA_array_merge_recursive($GLOBALS['cfg'], $config_data);        if (defined('PMA_MINIMUM_COMMON')) {            return;        }        // settings below start really working on next page load, but        // changes are made only in index.php so everything is set when        // in frames        // save theme        $tmanager = $_SESSION['PMA_Theme_Manager'];        if ($tmanager->getThemeCookie() || isset($_REQUEST['set_theme'])) {            if ((! isset($config_data['ThemeDefault'])                && $tmanager->theme->getId() != 'original')                || isset($config_data['ThemeDefault'])                && $config_data['ThemeDefault'] != $tmanager->theme->getId()            ) {                // new theme was set in common.inc.php                $this->setUserValue(                    null,                    'ThemeDefault',                    $tmanager->theme->getId(),                    'original'                );            }        } else {            // no cookie - read default from settings            if ($this->settings['ThemeDefault'] != $tmanager->theme->getId()                && $tmanager->checkTheme($this->settings['ThemeDefault'])            ) {                $tmanager->setActiveTheme($this->settings['ThemeDefault']);                $tmanager->setThemeCookie();            }        }        // save font size        if ((! isset($config_data['fontsize'])            && $org_fontsize != '82%')            || isset($config_data['fontsize'])            && $org_fontsize != $config_data['fontsize']        ) {            $this->setUserValue(null, 'fontsize', $org_fontsize, '82%');        }        // save language        if (isset($_COOKIE['pma_lang']) || isset($_POST['lang'])) {            if ((! isset($config_data['lang'])                && $GLOBALS['lang'] != 'en')                || isset($config_data['lang'])                && $GLOBALS['lang'] != $config_data['lang']            ) {                $this->setUserValue(null, 'lang', $GLOBALS['lang'], 'en');            }        } else {            // read language from settings            if (isset($config_data['lang']) && PMA_langSet($config_data['lang'])) {                $this->setCookie('pma_lang', $GLOBALS['lang']);            }        }        // save connection collation        if (isset($_COOKIE['pma_collation_connection'])            || isset($_POST['collation_connection'])        ) {            if ((! isset($config_data['collation_connection'])                && $GLOBALS['collation_connection'] != 'utf8_general_ci')                || isset($config_data['collation_connection'])                && $GLOBALS['collation_connection']                    != $config_data['collation_connection']            ) {                $this->setUserValue(                    null,                    'collation_connection',                    $GLOBALS['collation_connection'],                    'utf8_general_ci'                );            }        } else {            // read collation from settings            if (isset($config_data['collation_connection'])) {                $GLOBALS['collation_connection']                    = $config_data['collation_connection'];                $this->setCookie(                    'pma_collation_connection',                    $GLOBALS['collation_connection']                );            }        }    }    /**     * Sets config value which is stored in user preferences (if available)     * or in a cookie.     *     * If user preferences are not yet initialized, option is applied to     * global config and added to a update queue, which is processed     * by {@link loadUserPreferences()}     *     * @param string $cookie_name   can be null     * @param string $cfg_path     * @param mixed  $new_cfg_value new value     * @param mixed  $default_value default value     *     * @return nothing     */    function setUserValue($cookie_name, $cfg_path, $new_cfg_value, $default_value = null)    {        // use permanent user preferences if possible        $prefs_type = $this->get('user_preferences');        if ($prefs_type) {            include_once './libraries/user_preferences.lib.php';            if ($default_value === null) {                $default_value = PMA_array_read($cfg_path, $this->default);            }            PMA_persist_option($cfg_path, $new_cfg_value, $default_value);        }        if ($prefs_type != 'db' && $cookie_name) {            // fall back to cookies            if ($default_value === null) {                $default_value = PMA_array_read($cfg_path, $this->settings);            }            $this->setCookie($cookie_name, $new_cfg_value, $default_value);        }        PMA_array_write($cfg_path, $GLOBALS['cfg'], $new_cfg_value);        PMA_array_write($cfg_path, $this->settings, $new_cfg_value);    }    /**     * Reads value stored by {@link setUserValue()}     *     * @param string $cookie_name cookie name     * @param mixed  $cfg_value   config value     *     * @return mixed     */    function getUserValue($cookie_name, $cfg_value)    {        $cookie_exists = isset($_COOKIE) && !empty($_COOKIE[$cookie_name]);        $prefs_type = $this->get('user_preferences');        if ($prefs_type == 'db') {            // permanent user preferences value exists, remove cookie            if ($cookie_exists) {                $this->removeCookie($cookie_name);            }        } else if ($cookie_exists) {            return $_COOKIE[$cookie_name];        }        // return value from $cfg array        return $cfg_value;    }    /**     * set source     *     * @param string  $source     *     * @return nothing     */    function setSource($source)    {        $this->source = trim($source);    }    /**     * checks if the config folder still exists and terminates app if true     *     * @return nothing     */    function checkConfigFolder()    {        // Refuse to work while there still might be some world writable dir:        if (is_dir('./config')) {            die(__('Remove "./config" directory before using phpMyAdmin!'));        }    }    /**     * check config source     *     * @return  boolean whether source is valid or not     */    function checkConfigSource()    {        if (! $this->getSource()) {            // no configuration file set at all            return false;        }        if (! file_exists($this->getSource())) {            $this->source_mtime = 0;            return false;        }        if (! is_readable($this->getSource())) {            $this->source_mtime = 0;            die(                sprintf(__('Existing configuration file (%s) is not readable.'),                    $this->getSource()                )            );        }        return true;    }    /**     * verifies the permissions on config file (if asked by configuration)     * (must be called after config.inc.php has been merged)     *     * @return nothing     */    function checkPermissions()    {        // Check for permissions (on platforms that support it):        if ($this->get('CheckConfigurationPermissions')) {            $perms = @fileperms($this->getSource());            if (!($perms === false) && ($perms & 2)) {                // This check is normally done after loading configuration                $this->checkWebServerOs();                if ($this->get('PMA_IS_WINDOWS') == 0) {                    $this->source_mtime = 0;                    die(__('Wrong permissions on configuration file, should not be world writable!'));                }            }        }    }    /**     * returns specific config setting     *     * @param string $setting config setting     *     * @return mixed value     */    function get($setting)    {        if (isset($this->settings[$setting])) {            return $this->settings[$setting];        }        return null;    }    /**     * sets configuration variable     *     * @param string $setting configuration option     * @param string $value   new value for configuration option     *     * @return nothing     */    function set($setting, $value)    {        if (! isset($this->settings[$setting])            || $this->settings[$setting] != $value        ) {            $this->settings[$setting] = $value;            $this->set_mtime = time();        }    }    /**     * returns source for current config     *     * @return  string  config source     */    function getSource()    {        return $this->source;    }    /**     * returns a unique value to force a CSS reload if either the config     * or the theme changes     * must also check the pma_fontsize cookie in case there is no     * config file     *     * @return int Summary of unix timestamps and fontsize,     * to be unique on theme parameters change     */    function getThemeUniqueValue()    {        if (null !== $this->get('fontsize')) {            $fontsize = intval($this->get('fontsize'));        } elseif (isset($_COOKIE['pma_fontsize'])) {            $fontsize = intval($_COOKIE['pma_fontsize']);        } else {            $fontsize = 0;        }        return (            $fontsize +            $this->source_mtime +            $this->default_source_mtime +            $this->get('user_preferences_mtime') +            $_SESSION['PMA_Theme']->mtime_info +            $_SESSION['PMA_Theme']->filesize_info);    }    /**     * $cfg['PmaAbsoluteUri'] is a required directive else cookies won't be     * set properly and, depending on browsers, inserting or updating a     * record might fail     *     * @return bool     */    function checkPmaAbsoluteUri()    {        // Setup a default value to let the people and lazy sysadmins work anyway,        // they'll get an error if the autodetect code doesn't work        $pma_absolute_uri = $this->get('PmaAbsoluteUri');        $is_https = $this->detectHttps();        if (strlen($pma_absolute_uri) < 5) {            $url = array();            // If we don't have scheme, we didn't have full URL so we need to            // dig deeper            if (empty($url['scheme'])) {                // Scheme                if ($is_https) {                    $url['scheme'] = 'https';                } else {                    $url['scheme'] = 'http';                }                // Host and port                if (PMA_getenv('HTTP_HOST')) {                    // Prepend the scheme before using parse_url() since this                    // is not part of the RFC2616 Host request-header                    $parsed_url = parse_url(                        $url['scheme'] . '://' . PMA_getenv('HTTP_HOST')                    );                    if (!empty($parsed_url['host'])) {                        $url = $parsed_url;                    } else {                        $url['host'] = PMA_getenv('HTTP_HOST');                    }                } elseif (PMA_getenv('SERVER_NAME')) {                    $url['host'] = PMA_getenv('SERVER_NAME');                } else {                    $this->error_pma_uri = true;                    return false;                }                // If we didn't set port yet...                if (empty($url['port']) && PMA_getenv('SERVER_PORT')) {                    $url['port'] = PMA_getenv('SERVER_PORT');                }                // And finally the path could be already set from REQUEST_URI                if (empty($url['path'])) {                    $path = parse_url($GLOBALS['PMA_PHP_SELF']);                    $url['path'] = $path['path'];                }            }            // Make url from parts we have            $pma_absolute_uri = $url['scheme'] . '://';            // Was there user information?            if (!empty($url['user'])) {                $pma_absolute_uri .= $url['user'];                if (!empty($url['pass'])) {                    $pma_absolute_uri .= ':' . $url['pass'];                }                $pma_absolute_uri .= '@';            }            // Add hostname            $pma_absolute_uri .= $url['host'];            // Add port, if it not the default one            if (! empty($url['port'])                && (($url['scheme'] == 'http' && $url['port'] != 80)                || ($url['scheme'] == 'https' && $url['port'] != 443))            ) {                $pma_absolute_uri .= ':' . $url['port'];            }            // And finally path, without script name, the 'a' is there not to            // strip our directory, when path is only /pmadir/ without filename.            // Backslashes returned by Windows have to be changed.            // Only replace backslashes by forward slashes if on Windows,            // as the backslash could be valid on a non-Windows system.            $this->checkWebServerOs();            if ($this->get('PMA_IS_WINDOWS') == 1) {                $path = str_replace("\\", "/", dirname($url['path'] . 'a'));            } else {                $path = dirname($url['path'] . 'a');            }            // To work correctly within transformations overview:            if (defined('PMA_PATH_TO_BASEDIR') && PMA_PATH_TO_BASEDIR == '../../') {                if ($this->get('PMA_IS_WINDOWS') == 1) {                    $path = str_replace("\\", "/", dirname(dirname($path)));                } else {                    $path = dirname(dirname($path));                }            }            // PHP's dirname function would have returned a dot            // when $path contains no slash            if ($path == '.') {                $path = '';            }            // in vhost situations, there could be already an ending slash            if (substr($path, -1) != '/') {                $path .= '/';            }            $pma_absolute_uri .= $path;            // We used to display a warning if PmaAbsoluteUri wasn't set, but now            // the autodetect code works well enough that we don't display the            // warning at all. The user can still set PmaAbsoluteUri manually.            // See            // http://sf.net/tracker/?func=detail&aid=1257134&group_id=23067&atid=377411        } else {            // The URI is specified, however users do often specify this            // wrongly, so we try to fix this.            // Adds a trailing slash et the end of the phpMyAdmin uri if it            // does not exist.            if (substr($pma_absolute_uri, -1) != '/') {                $pma_absolute_uri .= '/';            }            // If URI doesn't start with http:// or https://, we will add            // this.            if (substr($pma_absolute_uri, 0, 7) != 'http://'                && substr($pma_absolute_uri, 0, 8) != 'https://'            ) {                $pma_absolute_uri                    = ($is_https ? 'https' : 'http')                    . ':' . (substr($pma_absolute_uri, 0, 2) == '//' ? '' : '//')                    . $pma_absolute_uri;            }        }        $this->set('PmaAbsoluteUri', $pma_absolute_uri);    }    /**     * check selected collation_connection     *     * @todo check validity of $_REQUEST['collation_connection']     *     * @return nothing     */    function checkCollationConnection()    {        if (! empty($_REQUEST['collation_connection'])) {            $this->set(                'collation_connection',                strip_tags($_REQUEST['collation_connection'])            );        }    }    /**     * checks for font size configuration, and sets font size as requested by user     *     * @return nothing     */    function checkFontsize()    {        $new_fontsize = '';        if (isset($_GET['set_fontsize'])) {            $new_fontsize = $_GET['set_fontsize'];        } elseif (isset($_POST['set_fontsize'])) {            $new_fontsize = $_POST['set_fontsize'];        } elseif (isset($_COOKIE['pma_fontsize'])) {            $new_fontsize = $_COOKIE['pma_fontsize'];        }        if (preg_match('/^[0-9.]+(px|em|pt|\%)$/', $new_fontsize)) {            $this->set('fontsize', $new_fontsize);        } elseif (! $this->get('fontsize')) {            // 80% would correspond to the default browser font size            // of 16, but use 82% to help read the monoface font            $this->set('fontsize', '82%');        }        $this->setCookie('pma_fontsize', $this->get('fontsize'), '82%');    }    /**     * checks if upload is enabled     *     * @return nothing     */    function checkUpload()    {        if (ini_get('file_uploads')) {            $this->set('enable_upload', true);            // if set "php_admin_value file_uploads Off" in httpd.conf            // ini_get() also returns the string "Off" in this case:            if ('off' == strtolower(ini_get('file_uploads'))) {                $this->set('enable_upload', false);            }        } else {            $this->set('enable_upload', false);        }    }    /**     * Maximum upload size as limited by PHP     * Used with permission from Moodle (http://moodle.org) by Martin Dougiamas     *     * this section generates $max_upload_size in bytes     *     * @return nothing     */    function checkUploadSize()    {        if (! $filesize = ini_get('upload_max_filesize')) {            $filesize = "5M";        }        if ($postsize = ini_get('post_max_size')) {            $this->set(                'max_upload_size',                min(PMA_get_real_size($filesize), PMA_get_real_size($postsize))            );        } else {            $this->set('max_upload_size', PMA_get_real_size($filesize));        }    }    /**     * check for https     *     * @return nothing     */    function checkIsHttps()    {        $this->set('is_https', $this->isHttps());    }    /**     * Checks if protocol is https     *     * This function checks if the https protocol is used in the PmaAbsoluteUri     * configuration setting, as opposed to detectHttps() which checks if the     * https protocol is used on the active connection.     *     * @return bool     */    public function isHttps()    {        static $is_https = null;        if (null !== $is_https) {            return $is_https;        }        $url = parse_url($this->get('PmaAbsoluteUri'));        if (isset($url['scheme']) && $url['scheme'] == 'https') {            $is_https = true;        } else {            $is_https = false;        }        return $is_https;    }    /**     * Detects whether https appears to be used.     *     * This function checks if the https protocol is used in the current connection     * with the webserver, based on environment variables.     * Please note that this just detects what we see, so     * it completely ignores things like reverse proxies.     *     * @return bool     */    function detectHttps()    {        $is_https = false;        $url = array();        // At first we try to parse REQUEST_URI, it might contain full URL,        if (PMA_getenv('REQUEST_URI')) {            // produces E_WARNING if it cannot get parsed, e.g. '/foobar:/'            $url = @parse_url(PMA_getenv('REQUEST_URI'));            if ($url === false) {                $url = array();            }        }        // If we don't have scheme, we didn't have full URL so we need to        // dig deeper        if (empty($url['scheme'])) {            // Scheme            if (PMA_getenv('HTTP_SCHEME')) {                $url['scheme'] = PMA_getenv('HTTP_SCHEME');            } elseif (PMA_getenv('HTTPS') && strtolower(PMA_getenv('HTTPS')) == 'on') {                $url['scheme'] = 'https';            } elseif (PMA_getenv('HTTP_X_FORWARDED_PROTO')) {                $url['scheme'] = strtolower(PMA_getenv('HTTP_X_FORWARDED_PROTO'));            } elseif (PMA_getenv('HTTP_FRONT_END_HTTPS') && strtolower(PMA_getenv('HTTP_FRONT_END_HTTPS')) == 'on') {                $url['scheme'] = 'https';            } else {                $url['scheme'] = 'http';            }        }        if (isset($url['scheme']) && $url['scheme'] == 'https') {            $is_https = true;        } else {            $is_https = false;        }        return $is_https;    }    /**     * detect correct cookie path     *     * @return nothing     */    function checkCookiePath()    {        $this->set('cookie_path', $this->getCookiePath());    }    /**     * Get cookie path     *     * @return string     */    public function getCookiePath()    {        static $cookie_path = null;        if (null !== $cookie_path) {            return $cookie_path;        }        $parsed_url = parse_url($this->get('PmaAbsoluteUri'));        $cookie_path   = $parsed_url['path'];        return $cookie_path;    }    /**     * enables backward compatibility     *     * @return nothing     */    function enableBc()    {        $GLOBALS['cfg']             = $this->settings;        $GLOBALS['default_server']  = $this->default_server;        unset($this->default_server);        $GLOBALS['collation_connection'] = $this->get('collation_connection');        $GLOBALS['is_upload']       = $this->get('enable_upload');        $GLOBALS['max_upload_size'] = $this->get('max_upload_size');        $GLOBALS['cookie_path']     = $this->get('cookie_path');        $GLOBALS['is_https']        = $this->get('is_https');        $defines = array(            'PMA_VERSION',            'PMA_THEME_VERSION',            'PMA_THEME_GENERATION',            'PMA_PHP_STR_VERSION',            'PMA_PHP_INT_VERSION',            'PMA_IS_WINDOWS',            'PMA_IS_IIS',            'PMA_IS_GD2',            'PMA_USR_OS',            'PMA_USR_BROWSER_VER',            'PMA_USR_BROWSER_AGENT'            );        foreach ($defines as $define) {            if (! defined($define)) {                define($define, $this->get($define));            }        }    }    /**     * @todo finish     *     * @return nothing     */    function save()    {    }    /**     * returns options for font size selection     *     * @static     * @param string $current_size current selected font size with unit     *     * @return array selectable font sizes     */    static protected function _getFontsizeOptions($current_size = '82%')    {        $unit = preg_replace('/[0-9.]*/', '', $current_size);        $value = preg_replace('/[^0-9.]*/', '', $current_size);        $factors = array();        $options = array();        $options["$value"] = $value . $unit;        if ($unit === '%') {            $factors[] = 1;            $factors[] = 5;            $factors[] = 10;        } elseif ($unit === 'em') {            $factors[] = 0.05;            $factors[] = 0.2;            $factors[] = 1;        } elseif ($unit === 'pt') {            $factors[] = 0.5;            $factors[] = 2;        } elseif ($unit === 'px') {            $factors[] = 1;            $factors[] = 5;            $factors[] = 10;        } else {            //unknown font size unit            $factors[] = 0.05;            $factors[] = 0.2;            $factors[] = 1;            $factors[] = 5;            $factors[] = 10;        }        foreach ($factors as $key => $factor) {            $option_inc = $value + $factor;            $option_dec = $value - $factor;            while (count($options) < 21) {                $options["$option_inc"] = $option_inc . $unit;                if ($option_dec > $factors[0]) {                    $options["$option_dec"] = $option_dec . $unit;                }                $option_inc += $factor;                $option_dec -= $factor;                if (isset($factors[$key + 1])                    && $option_inc >= $value + $factors[$key + 1]                ) {                    break;                }            }        }        ksort($options);        return $options;    }    /**     * returns html selectbox for font sizes     *     * @static     * @param string $current_size currently slected font size with unit     *     * @return string html selectbox     */    static protected function _getFontsizeSelection()    {        $current_size = $GLOBALS['PMA_Config']->get('fontsize');        // for the case when there is no config file (this is supported)        if (empty($current_size)) {            if (isset($_COOKIE['pma_fontsize'])) {                $current_size = $_COOKIE['pma_fontsize'];            } else {                $current_size = '82%';            }        }        $options = PMA_Config::_getFontsizeOptions($current_size);        $return = '<label for="select_fontsize">' . __('Font size') . ':</label>' . "\n";        $return .= '<select name="set_fontsize" id="select_fontsize" class="autosubmit">' . "\n";        foreach ($options as $option) {            $return .= '<option value="' . $option . '"';            if ($option == $current_size) {                $return .= ' selected="selected"';            }            $return .= '>' . $option . '</option>' . "\n";        }        $return .= '</select>';        return $return;    }    /**     * return complete font size selection form     *     * @static     * @param string $current_size currently slected font size with unit     *     * @return string html selectbox     */    static public function getFontsizeForm()    {        return '<form name="form_fontsize_selection" id="form_fontsize_selection"'            . ' method="post" action="index.php" target="_parent">' . "\n"            . PMA_generate_common_hidden_inputs() . "\n"            . PMA_Config::_getFontsizeSelection() . "\n"            . '<noscript>' . "\n"            . '<input type="submit" value="' . __('Go') . '" />' . "\n"            . '</noscript>' . "\n"            . '</form>';    }    /**     * removes cookie     *     * @param string $cookie name of cookie to remove     *     * @return boolean result of setcookie()     */    function removeCookie($cookie)    {        return setcookie(            $cookie,            '',            time() - 3600,            $this->getCookiePath(),            '',            $this->isHttps()        );    }    /**     * sets cookie if value is different from current cokkie value,     * or removes if value is equal to default     *     * @param string  $cookie   name of cookie to remove     * @param mixed   $value    new cookie value     * @param string  $default  default value     * @param int     $validity validity of cookie in seconds (default is one month)     * @param bool    $httponly whether cookie is only for HTTP (and not for scripts)     *     * @return boolean result of setcookie()     */    function setCookie($cookie, $value, $default = null, $validity = null, $httponly = true)    {        if ($validity == null) {            $validity = 2592000;        }        if (strlen($value) && null !== $default && $value === $default) {            // default value is used            if (isset($_COOKIE[$cookie])) {                // remove cookie                return $this->removeCookie($cookie);            }            return false;        }        if (! strlen($value) && isset($_COOKIE[$cookie])) {            // remove cookie, value is empty            return $this->removeCookie($cookie);        }        if (! isset($_COOKIE[$cookie]) || $_COOKIE[$cookie] !== $value) {            // set cookie with new value            /* Calculate cookie validity */            if ($validity == 0) {                $v = 0;            } else {                $v = time() + $validity;            }            return setcookie(                $cookie,                $value,                $v,                $this->getCookiePath(),                '',                $this->isHttps(),                $httponly            );        }        // cookie has already $value as value        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * query by example the whole database * * @package PhpMyAdmin *//** * requirements */require_once './libraries/common.inc.php';/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam();/** * A query has been submitted -> (maybe) execute it */$message_to_display = false;if (isset($_REQUEST['submit_sql']) && ! empty($sql_query)) {    if (! preg_match('@^SELECT@i', $sql_query)) {        $message_to_display = true;    } else {        $goto      = 'db_sql.php';        include './sql.php';        exit;    }}$sub_part  = '_qbe';require './libraries/db_common.inc.php';$url_query .= '&amp;goto=db_qbe.php';$url_params['goto'] = 'db_qbe.php';require './libraries/db_info.inc.php';if ($message_to_display) {    PMA_Message::error(__('You have to choose at least one column to display'))->display();}unset($message_to_display);/** * Initialize some variables */$col_cnt = PMA_ifSetOr($_REQUEST['col_cnt'], 3, 'numeric');$add_col = PMA_ifSetOr($_REQUEST['add_col'], 0, 'numeric');$add_row = PMA_ifSetOr($_REQUEST['add_row'], 0, 'numeric');$rows    = PMA_ifSetOr($_REQUEST['rows'],    0, 'numeric');$ins_col = PMA_ifSetOr($_REQUEST['ins_col'], null, 'array');$del_col = PMA_ifSetOr($_REQUEST['del_col'], null, 'array');$prev_criteria = isset($_REQUEST['prev_criteria'])    ? $_REQUEST['prev_criteria']    : array();$criteria = isset($_REQUEST['criteria'])    ? $_REQUEST['criteria']    : array_fill(0, $col_cnt, '');$ins_row = isset($_REQUEST['ins_row'])    ? $_REQUEST['ins_row']    : array_fill(0, $col_cnt, '');$del_row = isset($_REQUEST['del_row'])    ? $_REQUEST['del_row']    : array_fill(0, $col_cnt, '');$and_or_row = isset($_REQUEST['and_or_row'])    ? $_REQUEST['and_or_row']    : array_fill(0, $col_cnt, '');$and_or_col = isset($_REQUEST['and_or_col'])    ? $_REQUEST['and_or_col']    : array_fill(0, $col_cnt, '');// minimum width$form_column_width = 12;$col = max($col_cnt + $add_col, 0);$row = max($rows + $add_row, 0);// The tables list sent by a previously submitted formif (PMA_isValid($_REQUEST['TableList'], 'array')) {    foreach ($_REQUEST['TableList'] as $each_table) {        $tbl_names[$each_table] = ' selected="selected"';    }} // end if// this was a work in progress, deactivated for now//$columns = PMA_DBI_get_columns_full($GLOBALS['db']);//$tables  = PMA_DBI_get_columns_full($GLOBALS['db']);/** * Prepares the form */$tbl_result     = PMA_DBI_query('SHOW TABLES FROM ' . PMA_backquote($db) . ';', null, PMA_DBI_QUERY_STORE);$tbl_result_cnt = PMA_DBI_num_rows($tbl_result);if (0 == $tbl_result_cnt) {    PMA_Message::error(__('No tables found in database.'))->display();    include './libraries/footer.inc.php';    exit;}// The tables list gets from MySQLwhile (list($tbl) = PMA_DBI_fetch_row($tbl_result)) {    $fld_results = PMA_DBI_get_columns($db, $tbl);    if (empty($tbl_names[$tbl]) && !empty($_REQUEST['TableList'])) {        $tbl_names[$tbl] = '';    } else {        $tbl_names[$tbl] = ' selected="selected"';    } //  end if    // The fields list per selected tables    if ($tbl_names[$tbl] == ' selected="selected"') {        $each_table = PMA_backquote($tbl);        $fld[]  = $each_table . '.*';        foreach ($fld_results as $each_field) {            $each_field = $each_table . '.' . PMA_backquote($each_field['Field']);            $fld[] = $each_field;            // increase the width if necessary            $form_column_width = max(strlen($each_field), $form_column_width);        } // end foreach    } // end if} // end whilePMA_DBI_free_result($tbl_result);// largest width found$realwidth = $form_column_width . 'ex';/** * Displays the Query by example form *//** * Enter description here... * * @param array     $columns * @param integer   $column_number * @param string    $selected */function showColumnSelectCell($columns, $column_number, $selected = ''){    ?>    <td align="center">        <select name="Field[<?php echo $column_number; ?>]" size="1">            <option value="">&nbsp;</option>    <?php    foreach ($columns as $column) {        if ($column === $selected) {            $sel = ' selected="selected"';        } else {            $sel = '';        }        echo '<option value="' . htmlspecialchars($column) . '"' . $sel . '>'            . str_replace(' ', '&nbsp;', htmlspecialchars($column)) . '</option>' . "\n";    }    ?>        </select>    </td>    <?php}?><?php if (!empty($tab_designer['link'])) {        $tab_designer['link'] = htmlentities($tab_designer['link']);        $tab_designer['link'] = $tab_designer['link'] . PMA_generate_common_url($url_params);        if (! empty($tab_designer['args'])) {            foreach ($tab_designer['args'] as $param => $value) {                $tab_designer['link'] .= PMA_get_arg_separator('html') . urlencode($param) . '='                    . urlencode($value);            }        }    }    if (! empty($tab['fragment'])) {        $tab['link'] .= $tab['fragment'];    }    if (isset($tab_designer['link'])) {?><div id="visual_builder_anchor" class="notice hide">    <span id="footnote_1"><?php printf(__('Switch to %svisual builder%s'), ' <a href="' . $tab_designer['link'] . PMA_get_arg_separator('html') . 'query=1">', '</a>'); ?>    </span></div><?php    }?><form action="db_qbe.php" method="post"><fieldset><table class="data" style="width: 100%;"><tr class="odd noclick">    <th><?php echo __('Column'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (isset($ins_col[$x]) && $ins_col[$x] == 'on') {        showColumnSelectCell($fld, $z);        $z++;    }    if (! empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    $selected = '';    if (isset($Field[$x])) {        $selected = $Field[$x];        $curField[$z] = $Field[$x];    }    showColumnSelectCell($fld, $z, $selected);    $z++;} // end for?></tr><!-- Sort row --><tr class="even noclick">    <th><?php echo __('Sort'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {        ?>    <td align="center">        <select style="width: <?php echo $realwidth; ?>" name="Sort[<?php echo $z; ?>]" size="1">            <option value="">&nbsp;</option>            <option value="ASC"><?php echo __('Ascending'); ?></option>            <option value="DESC"><?php echo __('Descending'); ?></option>        </select>    </td>        <?php        $z++;    } // end if    echo "\n";    if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    ?>    <td align="center">        <select style="width: <?php echo $realwidth; ?>" name="Sort[<?php echo $z; ?>]" size="1">            <option value="">&nbsp;</option>    <?php    echo "\n";    // If they have chosen all fields using the * selector,    // then sorting is not available    // Fix for Bug #570698    if (isset($Sort[$x]) && isset($Field[$x])     && substr($Field[$x], -2) == '.*') {        $Sort[$x] = '';    } //end if    if (isset($Sort[$x]) && $Sort[$x] == 'ASC') {        $curSort[$z] = $Sort[$x];        $sel         = ' selected="selected"';    } else {        $sel         = '';    } // end if    echo '                ';    echo '<option value="ASC"' . $sel . '>' . __('Ascending') . '</option>' . "\n";    if (isset($Sort[$x]) && $Sort[$x] == 'DESC') {        $curSort[$z] = $Sort[$x];        $sel         = ' selected="selected"';    } else {        $sel         = '';    } // end if    echo '                ';    echo '<option value="DESC"' . $sel . '>' . __('Descending') . '</option>' . "\n";    ?>        </select>    </td>    <?php    $z++;    echo "\n";} // end for?></tr><!-- Show row --><tr class="odd noclick">    <th><?php echo __('Show'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {        ?>    <td align="center">        <input type="checkbox" name="Show[<?php echo $z; ?>]" />    </td>        <?php        $z++;    } // end if    echo "\n";    if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    if (isset($Show[$x])) {        $checked     = ' checked="checked"';        $curShow[$z] = $Show[$x];    } else {        $checked     =  '';    }    ?>    <td align="center">        <input type="checkbox" name="Show[<?php echo $z; ?>]"<?php echo $checked; ?> />    </td>    <?php    $z++;    echo "\n";} // end for?></tr><!-- Criteria row --><tr class="even noclick">    <th><?php echo __('Criteria'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {        ?>    <td align="center">        <input type="text" name="criteria[<?php echo $z; ?>]" value="" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>        <?php        $z++;    } // end if    echo "\n";    if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    if (isset($criteria[$x])) {        $tmp_criteria = $criteria[$x];    }    if ((empty($prev_criteria) || ! isset($prev_criteria[$x]))        || $prev_criteria[$x] != htmlspecialchars($tmp_criteria)) {        $curCriteria[$z]   = $tmp_criteria;    } else {        $curCriteria[$z]   = $prev_criteria[$x];    }    ?>    <td align="center">        <input type="hidden" name="prev_criteria[<?php echo $z; ?>]" value="<?php echo htmlspecialchars($curCriteria[$z]); ?>" />        <input type="text" name="criteria[<?php echo $z; ?>]" value="<?php echo htmlspecialchars($tmp_criteria); ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>    <?php    $z++;    echo "\n";} // end for?></tr><!-- And/Or columns and rows --><?php$w = 0;$odd_row = true;for ($y = 0; $y <= $row; $y++) {    if (isset($ins_row[$y]) && $ins_row[$y] == 'on') {        $chk['or']  = ' checked="checked"';        $chk['and'] = '';        ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">        <!-- Row controls -->        <table cellpadding="0" cellspacing="0" border="0">        <tr>            <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">                <small><?php echo __('Ins'); ?>:</small>                <input type="checkbox" name="ins_row[<?php echo $w; ?>]" />            </td>            <td align="<?php echo $cell_align_right; ?>">                <strong><?php echo __('And'); ?>:</strong>            </td>            <td>                <input type="radio" name="and_or_row[<?php echo $w; ?>]" value="and"<?php echo $chk['and']; ?> />                &nbsp;            </td>        </tr>        <tr>            <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">                <small><?php echo __('Del'); ?>:</small>                <input type="checkbox" name="del_row[<?php echo $w; ?>]" />            </td>            <td align="<?php echo $cell_align_right; ?>">                <strong><?php echo __('Or'); ?>:</strong>            </td>            <td>                <input type="radio" name="and_or_row[<?php echo $w; ?>]" value="or"<?php echo $chk['or']; ?> />                &nbsp;            </td>        </tr>        </table>    </td>        <?php        $z = 0;        for ($x = 0; $x < $col; $x++) {            if (isset($ins_col[$x]) && $ins_col[$x] == 'on') {                echo "\n";                $or = 'Or' . $w . '[' . $z . ']';                ?>    <td align="center">        <input type="text" name="Or<?php echo $or; ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>                <?php                $z++;            } // end if            if (isset($del_col[$x]) && $del_col[$x] == 'on') {                continue;            }            echo "\n";            $or = 'Or' . $w . '[' . $z . ']';            ?>    <td align="center">        <input type="text" name="Or<?php echo $or; ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>            <?php            $z++;        } // end for        $w++;        echo "\n";        ?></tr>        <?php        $odd_row =! $odd_row;    } // end if    if (isset($del_row[$y]) && $del_row[$y] == 'on') {        continue;    }    if (isset($and_or_row[$y])) {        $curAndOrRow[$w] = $and_or_row[$y];    }    if (isset($and_or_row[$y]) && $and_or_row[$y] == 'and') {        $chk['and'] =  ' checked="checked"';        $chk['or']  =  '';    } else {        $chk['or']  =  ' checked="checked"';        $chk['and'] =  '';    }    echo "\n";    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">        <!-- Row controls -->        <table border="0" cellpadding="0" cellspacing="0">        <tr>            <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">                <small><?php echo __('Ins'); ?>:</small>                <input type="checkbox" name="ins_row[<?php echo $w; ?>]" />            </td>            <td align="<?php echo $cell_align_right; ?>">                <strong><?php echo __('And'); ?>:</strong>            </td>            <td>                <input type="radio" name="and_or_row[<?php echo $w; ?>]" value="and"<?php echo $chk['and']; ?> />            </td>        </tr>        <tr>            <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">                <small><?php echo __('Del'); ?>:</small>                <input type="checkbox" name="del_row[<?php echo $w; ?>]" />            </td>            <td align="<?php echo $cell_align_right; ?>">                <strong><?php echo __('Or'); ?>:</strong>            </td>            <td>                <input type="radio" name="and_or_row[<?php echo $w; ?>]" value="or"<?php echo $chk['or']; ?> />            </td>        </tr>        </table>    </td>    <?php    $z = 0;    for ($x = 0; $x < $col; $x++) {        if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {            echo "\n";            $or = 'Or' . $w . '[' . $z . ']';            ?>    <td align="center">        <input type="text" name="Or<?php echo $or; ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>            <?php            $z++;        } // end if        if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {            continue;        }        echo "\n";        $or = 'Or' . $y;        if (! isset(${$or})) {            ${$or} = '';        }        if (!empty(${$or}) && isset(${$or}[$x])) {            $tmp_or = ${$or}[$x];        } else {            $tmp_or     = '';        }        ?>    <td align="center">        <input type="text" name="Or<?php echo $w . '[' . $z . ']'; ?>" value="<?php echo htmlspecialchars($tmp_or); ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>        <?php        if (!empty(${$or}) && isset(${$or}[$x])) {            ${'cur' . $or}[$z] = ${$or}[$x];        }        $z++;    } // end for    $w++;    echo "\n";    ?></tr>    <?php    echo "\n";    $odd_row =! $odd_row;} // end for?><!-- Modify columns --><tr class="even noclick">    <th><?php echo __('Modify'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {        $curAndOrCol[$z] = $and_or_col[$y];        if ($and_or_col[$z] == 'or') {            $chk['or']  = ' checked="checked"';            $chk['and'] = '';        } else {            $chk['and'] = ' checked="checked"';            $chk['or']  = '';        }        ?>    <td align="center">        <strong><?php echo __('Or'); ?>:</strong>        <input type="radio" name="and_or_col[<?php echo $z; ?>]" value="or"<?php echo $chk['or']; ?> />        &nbsp;&nbsp;<strong><?php echo __('And'); ?>:</strong>        <input type="radio" name="and_or_col[<?php echo $z; ?>]" value="and"<?php echo $chk['and']; ?> />        <br />        <?php echo __('Ins') . "\n"; ?>        <input type="checkbox" name="ins_col[<?php echo $z; ?>]" />        &nbsp;&nbsp;<?php echo __('Del') . "\n"; ?>        <input type="checkbox" name="del_col[<?php echo $z; ?>]" />    </td>        <?php        $z++;    } // end if    echo "\n";    if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    if (isset($and_or_col[$y])) {        $curAndOrCol[$z] = $and_or_col[$y];    }    if (isset($and_or_col[$z]) && $and_or_col[$z] == 'or') {        $chk['or']  = ' checked="checked"';        $chk['and'] = '';    } else {        $chk['and'] = ' checked="checked"';        $chk['or']  = '';    }    ?>    <td align="center">        <strong><?php echo __('Or'); ?>:</strong>        <input type="radio" name="and_or_col[<?php echo $z; ?>]" value="or"<?php echo $chk['or']; ?> />        &nbsp;&nbsp;<strong><?php echo __('And'); ?>:</strong>        <input type="radio" name="and_or_col[<?php echo $z; ?>]" value="and"<?php echo $chk['and']; ?> />        <br />        <?php echo __('Ins') . "\n"; ?>        <input type="checkbox" name="ins_col[<?php echo $z; ?>]" />        &nbsp;&nbsp;<?php echo __('Del') . "\n"; ?>        <input type="checkbox" name="del_col[<?php echo $z; ?>]" />    </td>    <?php    $z++;    echo "\n";} // end for?>    </tr></table><!-- Other controls --><?php$w--;$url_params['db']       = $db;$url_params['col_cnt']  = $z;$url_params['rows']     = $w;echo PMA_generate_common_hidden_inputs($url_params);?></fieldset><fieldset class="tblFooters"><table border="0" cellpadding="2" cellspacing="1"><tr>    <td nowrap="nowrap">        <?php echo __('Add/Delete criteria rows'); ?>:        <select size="1" name="add_row">            <option value="-3">-3</option>            <option value="-2">-2</option>            <option value="-1">-1</option>            <option value="0" selected="selected">0</option>            <option value="1">1</option>            <option value="2">2</option>            <option value="3">3</option>        </select>    </td>    <td width="10">&nbsp;</td>    <td nowrap="nowrap"><?php echo __('Add/Delete columns'); ?>:        <select size="1" name="add_col">            <option value="-3">-3</option>            <option value="-2">-2</option>            <option value="-1">-1</option>            <option value="0" selected="selected">0</option>            <option value="1">1</option>            <option value="2">2</option>            <option value="3">3</option>        </select>    </td>    <td width="10">&nbsp;</td>    <!-- Generates a query -->    <td><input type="submit" name="modify" value="<?php echo __('Update Query'); ?>" /></td></tr></table></fieldset><table><tr><td>        <fieldset>            <legend><?php echo __('Use Tables'); ?></legend><?php$options = '';$numTableListOptions = 0;foreach ($tbl_names as $key => $val) {    $options .= '                        ';    $options .= '<option value="' . htmlspecialchars($key) . '"' . $val . '>'        . str_replace(' ', '&nbsp;', htmlspecialchars($key)) . '</option>' . "\n";    $numTableListOptions++;}?>            <select name="TableList[]" multiple="multiple" id="listTable"                size="<?php echo ($numTableListOptions > 30) ? '15' : '7'; ?>">                <?php echo $options; ?>            </select>        </fieldset>        <fieldset class="tblFooters">            <input type="submit" name="modify" value="<?php echo __('Update Query'); ?>" />        </fieldset>    </td>    <td width="20">&nbsp;</td>    <td>        <fieldset>            <legend><?php echo sprintf(__('SQL query on database <b>%s</b>:'), PMA_getDbLink($db)); ?>                </legend>            <textarea cols="80" name="sql_query" id="textSqlquery"                rows="<?php echo ($numTableListOptions > 30) ? '15' : '7'; ?>"                dir="<?php echo $text_dir; ?>"><?php// 1. SELECT$last_select = 0;if (! isset($qry_select)) {    $qry_select         = '';}for ($x = 0; $x < $col; $x++) {    if (!empty($curField[$x]) && isset($curShow[$x]) && $curShow[$x] == 'on') {        if ($last_select) {            $qry_select .=  ', ';        }        $qry_select     .= $curField[$x];        $last_select    = 1;    }} // end forif (!empty($qry_select)) {    echo  'SELECT ' . htmlspecialchars($qry_select) . "\n";}// 2. FROM// Create LEFT JOINS out of Relations// If we can use Relations we could make some left joins.// First find out if relations are available in this database.// First we need the really needed Tables - those in TableList might still be// all Tables.if (isset($Field) && count($Field) > 0) {    // Initialize some variables    $tab_all    = array();    $col_all    = array();    $tab_wher   = array();    $tab_know   = array();    $tab_left   = array();    $col_where  = array();    $fromclause = '';    // We only start this if we have fields, otherwise it would be dumb    foreach ($Field as $value) {        $parts             = explode('.', $value);        if (!empty($parts[0]) && !empty($parts[1])) {            $tab_raw       = $parts[0];            $tab           = str_replace('`', '', $tab_raw);            $tab_all[$tab] = $tab;            $col_raw       = $parts[1];            $col_all[]     = $tab . '.' . str_replace('`', '', $col_raw);         }    } // end while    // Check 'where' clauses    if ($cfgRelation['relwork'] && count($tab_all) > 0) {        // Now we need all tables that we have in the where clause        $crit_cnt         = count($criteria);        for ($x = 0; $x < $crit_cnt; $x++) {            $curr_tab     = explode('.', $Field[$x]);            if (!empty($curr_tab[0]) && !empty($curr_tab[1])) {                $tab_raw  = $curr_tab[0];                $tab      = str_replace('`', '', $tab_raw);                $col_raw  = $curr_tab[1];                $col1     = str_replace('`', '', $col_raw);                $col1     = $tab . '.' . $col1;                // Now we know that our array has the same numbers as $criteria                // we can check which of our columns has a where clause                if (!empty($criteria[$x])) {                    if (substr($criteria[$x], 0, 1) == '=' || stristr($criteria[$x], 'is')) {                        $col_where[$col] = $col1;                        $tab_wher[$tab]  = $tab;                    }                } // end if            } // end if        } // end for        // Cleans temp vars w/o further use        unset($tab_raw);        unset($col_raw);        unset($col1);        if (count($tab_wher) == 1) {            // If there is exactly one column that has a decent where-clause            // we will just use this            $master = key($tab_wher);        } else {            // Now let's find out which of the tables has an index            // (When the control user is the same as the normal user            // because he is using one of his databases as pmadb,            // the last db selected is not always the one where we need to work)            PMA_DBI_select_db($db);            foreach ($tab_all as $tab) {                $indexes = PMA_DBI_get_table_indexes($db, $tab);                foreach ($indexes as $ind) {                    $col1 = $tab . '.' . $ind['Column_name'];                    if (isset($col_all[$col1])) {                        if ($ind['Non_unique'] == 0) {                            if (isset($col_where[$col1])) {                                $col_unique[$col1] = 'Y';                            } else {                                $col_unique[$col1] = 'N';                            }                        } else {                            if (isset($col_where[$col1])) {                                $col_index[$col1] = 'Y';                            } else {                                $col_index[$col1] = 'N';                            }                        }                    }                } // end while (each col of tab)            } // end while (each tab)            // now we want to find the best.            if (isset($col_unique) && count($col_unique) > 0) {                $col_cand = $col_unique;                $needsort = 1;            } elseif (isset($col_index) && count($col_index) > 0) {                $col_cand = $col_index;                $needsort = 1;            } elseif (isset($col_where) && count($col_where) > 0) {                $col_cand = $tab_wher;                $needsort = 0;            } else {                $col_cand = $tab_all;                $needsort = 0;            }            // If we came up with $col_unique (very good) or $col_index (still            // good) as $col_cand we want to check if we have any 'Y' there            // (that would mean that they were also found in the whereclauses            // which would be great). if yes, we take only those            if ($needsort == 1) {                foreach ($col_cand as $col => $is_where) {                    $tab           = explode('.', $col);                    $tab           = $tab[0];                    if ($is_where == 'Y') {                        $vg[$col]  = $tab;                    } else {                        $sg[$col]  = $tab;                    }                }                if (isset($vg)) {                    $col_cand      = $vg;                    // Candidates restricted in index+where                } else {                    $col_cand      = $sg;                    // None of the candidates where in a where-clause                }            }            // If our array of candidates has more than one member we'll just            // find the smallest table.            // Of course the actual query would be faster if we check for            // the Criteria which gives the smallest result set in its table,            // but it would take too much time to check this            if (count($col_cand) > 1) {                // Of course we only want to check each table once                $checked_tables = $col_cand;                foreach ($col_cand as $tab) {                    if ($checked_tables[$tab] != 1) {                        $tsize[$tab] = PMA_Table::countRecords($db, $tab, false);                        $checked_tables[$tab] = 1;                    }                    $csize[$tab] = $tsize[$tab];                }                asort($csize);                reset($csize);                $master = key($csize); // Smallest            } else {                reset($col_cand);                $master = current($col_cand); // Only one single candidate            }        } // end if (exactly one where clause)        $tab_left = $tab_all;        unset($tab_left[$master]);        $tab_know[$master] = $master;        $run   = 0;        $emerg = '';        while (count($tab_left) > 0) {            if ($run % 2 == 0) {                PMA_getRelatives('master');            } else {                PMA_getRelatives('foreign');            }            $run++;            if ($run > 5) {                foreach ($tab_left as $tab) {                    $emerg .= ', ' . PMA_backquote($tab);                    unset($tab_left[$tab]);                }            }        } // end while        $qry_from = PMA_backquote($master) . $emerg . $fromclause;    } // end if ($cfgRelation['relwork'] && count($tab_all) > 0)} // end count($Field) > 0// In case relations are not defined, just generate the FROM clause// from the list of tables, however we don't generate any JOINif (empty($qry_from) && isset($tab_all)) {    $qry_from = implode(', ', $tab_all);}// Now let's see what we gotif (!empty($qry_from)) {    echo 'FROM ' . htmlspecialchars($qry_from) . "\n";}// 3. WHERE$qry_where          = '';$criteria_cnt       = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($curField[$x]) && !empty($curCriteria[$x]) && $x && isset($last_where) && isset($curAndOrCol)) {        $qry_where  .= ' ' . strtoupper($curAndOrCol[$last_where]) . ' ';    }    if (!empty($curField[$x]) && !empty($curCriteria[$x])) {        $qry_where  .= '(' . $curField[$x] . ' ' . $curCriteria[$x] . ')';        $last_where = $x;        $criteria_cnt++;    }} // end forif ($criteria_cnt > 1) {    $qry_where      = '(' . $qry_where . ')';}// OR rows ${'cur' . $or}[$x]if (! isset($curAndOrRow)) {    $curAndOrRow          = array();}for ($y = 0; $y <= $row; $y++) {    $criteria_cnt         = 0;    $qry_orwhere          = '';    $last_orwhere         = '';    for ($x = 0; $x < $col; $x++) {        if (!empty($curField[$x]) && !empty(${'curOr' . $y}[$x]) && $x) {            $qry_orwhere  .= ' ' . strtoupper($curAndOrCol[$last_orwhere]) . ' ';        }        if (!empty($curField[$x]) && !empty(${'curOr' . $y}[$x])) {            $qry_orwhere  .= '(' . $curField[$x]                          .  ' '                          .  ${'curOr' . $y}[$x]                          .  ')';            $last_orwhere = $x;            $criteria_cnt++;        }    } // end for    if ($criteria_cnt > 1) {        $qry_orwhere      = '(' . $qry_orwhere . ')';    }    if (!empty($qry_orwhere)) {        $qry_where .= "\n"                   .  strtoupper(isset($curAndOrRow[$y]) ? $curAndOrRow[$y] . ' ' : '')                   .  $qry_orwhere;    } // end if} // end forif (!empty($qry_where) && $qry_where != '()') {    echo 'WHERE ' . htmlspecialchars($qry_where) . "\n";} // end if// 4. ORDER BY$last_orderby = 0;if (! isset($qry_orderby)) {    $qry_orderby      = '';}for ($x = 0; $x < $col; $x++) {    if ($last_orderby && $x && !empty($curField[$x]) && !empty($curSort[$x])) {        $qry_orderby  .=  ', ';    }    if (!empty($curField[$x]) && !empty($curSort[$x])) {        // if they have chosen all fields using the * selector,        // then sorting is not available        // Fix for Bug #570698        if (substr($curField[$x], -2) != '.*') {            $qry_orderby  .=  $curField[$x] . ' ' . $curSort[$x];            $last_orderby = 1;        }    }} // end forif (!empty($qry_orderby)) {    echo 'ORDER BY ' . htmlspecialchars($qry_orderby) . "\n";}?>        </textarea>        </fieldset>        <fieldset class="tblFooters">            <input type="submit" name="submit_sql" value="<?php echo __('Submit Query'); ?>" />        </fieldset>    </td></tr></table></form><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * navigation css file from theme Original * * @package PhpMyAdmin-theme * @subpackage Original */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON') && !defined('TESTSUITE')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : $_COOKIE['pma_fontsize']); ?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    margin:             0;    padding:            0.2em 0.2em 0.2em 0.2em;}a img {    border: 0;}a:link,a:visited,a:active {    text-decoration:    none;    color:              #0000FF;}ul {    margin:0;}form {    margin:             0;    padding:            0;    display:            inline;}select#select_server,select#lightm_db {    width:              100%;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}/******************************************************************************//* classes *//******************************************************************************//* specific elements */div#pmalogo {    <?php //better echo $GLOBALS['cfg']['logoBGC']; ?>    background-color: <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    padding:.3em;}div#recentTableList {    text-align: center;    margin-bottom: 0.5em;}div#recentTableList select {    width: 100%;}div#pmalogo,div#leftframelinks,div#databaseList {    text-align:         center;    margin-bottom:      0.5em;    padding-bottom:     0.5em;}ul#databaseList {    margin-bottom:      0.5em;    padding-bottom:     0.5em;    padding-<?php echo $left; ?>:     1.5em;    font-style: italic;}ul#databaseList a {    display: block;    font-style: normal;}div#navidbpageselector a,ul#databaseList a {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}ul#databaseList ul {    padding-left: 1em;    padding-right: 0;}ul#databaseList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}ul#databaseList li.selected a {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}div#leftframelinks .icon {    padding:            0;    margin:             0;}div#leftframelinks a img.icon {    margin:             2px;    border:             0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding:            0;}div#leftframelinks a:hover img {    background-color:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}/* serverlist */#body_leftFrame #list_server {    list-style-image: url(<?php echo $GLOBALS['cfg']['ThemePath']; ?>/original/img/s_host.png);    list-style-position: inside;    list-style-type: none;    margin: 0;    padding: 0;}#body_leftFrame #list_server li {    margin: 0;    padding: 0;    font-size:          80%;}div#left_tableList ul {    list-style-type:    none;    list-style-position: outside;    margin:             0;    padding:            0;    font-size:          80%;    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;}div#left_tableList ul ul {    font-size:          100%;}div#left_tableList a {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    none;}div#left_tableList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    underline;}div#left_tableList li {    margin:             0;    padding:            0;    white-space:        nowrap;}<?php if ($GLOBALS['cfg']['BrowseMarkerColor']) { ?>/* marked items */div#left_tableList > ul li.marked > a,div#left_tableList > ul li.marked {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['LeftPointerEnable']) { ?>div#left_tableList > ul li:hover > a,div#left_tableList > ul li:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}<?php } ?>div#left_tableList img {    padding:            0;    vertical-align:     middle;}div#left_tableList ul ul {    margin-<?php echo $left; ?>:        0;    padding-<?php echo $left; ?>:       0.1em;    border-<?php echo $left; ?>:        0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding-bottom:     0.1em;    border-bottom:      0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}/* for the servers list in navi panel */#serverinfo .item {    white-space:        nowrap;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}#serverinfo a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}#NavFilter {    display: none;}#clear_fast_filter {    background: white;    color: black;    cursor: pointer;    padding: 0;    margin: 3px 5px 0 -23px;    position: relative;    float: right;}#fast_filter {    width: 100%;    padding: 2px 0;    margin: 0;    border: 0;}#fast_filter.gray {    color: gray;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** SQL Parser Functions for phpMyAdmin * * These functions define an SQL parser system, capable of understanding and * extracting data from a MySQL type SQL query. * * The basic procedure for using the new SQL parser: * On any page that needs to extract data from a query or to pretty-print a * query, you need code like this up at the top: * * ($sql contains the query) * $parsed_sql = PMA_SQP_parse($sql); * * If you want to extract data from it then, you just need to run * $sql_info = PMA_SQP_analyze($parsed_sql); * * See comments in PMA_SQP_analyze for the returned info * from the analyzer. * * If you want a pretty-printed version of the query, do: * $string = PMA_SQP_formatHtml($parsed_sql); * (note that that you need to have syntax.css.php included somehow in your * page for it to work, I recommend '<link rel="stylesheet" type="text/css" * href="syntax.css.php" />' at the moment.) * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Minimum inclusion? (i.e. for the stylesheet builder) */if (! defined('PMA_MINIMUM_COMMON')) {    /**     * Include the string library as we use it heavily     */    include_once './libraries/string.lib.php';    /**     * Include data for the SQL Parser     */    include_once './libraries/sqlparser.data.php';    if (!defined('TESTSUITE')) {        include_once './libraries/mysql_charsets.lib.php';    }    if (! isset($mysql_charsets)) {        $mysql_charsets = array();        $mysql_collations_flat = array();    }    if (!defined('DEBUG_TIMING')) {        /**         * currently we don't need the $pos (token position in query)         * for other purposes than LIMIT clause verification,         * so many calls to this function do not include the 4th parameter         */        function PMA_SQP_arrayAdd(&$arr, $type, $data, &$arrsize, $pos = 0)        {            $arr[] = array('type' => $type, 'data' => $data, 'pos' => $pos);            $arrsize++;        } // end of the "PMA_SQP_arrayAdd()" function    } else {        /**         * This is debug variant of above.         * @ignore         */        function PMA_SQP_arrayAdd(&$arr, $type, $data, &$arrsize, $pos = 0)        {            global $timer;            $t     = $timer;            $arr[] = array(                'type' => $type,                'data' => $data,                'pos' => $pos,                'time' => $t);            $timer = microtime();            $arrsize++;        } // end of the "PMA_SQP_arrayAdd()" function    } // end if... else...    /**     * Reset the error variable for the SQL parser     *     * @access public     */    function PMA_SQP_resetError()    {        global $SQP_errorString;        $SQP_errorString = '';        unset($SQP_errorString);    }    /**     * Get the contents of the error variable for the SQL parser     *     * @return string Error string from SQL parser     *     * @access public     */    function PMA_SQP_getErrorString()    {        global $SQP_errorString;        return isset($SQP_errorString) ? $SQP_errorString : '';    }    /**     * Check if the SQL parser hit an error     *     * @return boolean error state     *     * @access public     */    function PMA_SQP_isError()    {        global $SQP_errorString;        return isset($SQP_errorString) && !empty($SQP_errorString);    }    /**     * Set an error message for the system     *     * @param string  The error message     * @param string  The failing SQL query     *     * @access private     * @scope SQL Parser internal     */    function PMA_SQP_throwError($message, $sql)    {        global $SQP_errorString;        $SQP_errorString = '<p>'.__('There seems to be an error in your SQL query. The MySQL server error output below, if there is any, may also help you in diagnosing the problem') . '</p>' . "\n"            . '<pre>' . "\n"            . 'ERROR: ' . $message . "\n"            . 'SQL: ' . htmlspecialchars($sql) .  "\n"            . '</pre>' . "\n";    } // end of the "PMA_SQP_throwError()" function    /**     * Do display the bug report     *     * @param string  The error message     * @param string  The failing SQL query     *     * @access public     */    function PMA_SQP_bug($message, $sql)    {        global $SQP_errorString;        $debugstr = 'ERROR: ' . $message . "\n";        $debugstr .= 'MySQL: '.PMA_MYSQL_STR_VERSION . "\n";        $debugstr .= 'USR OS, AGENT, VER: ' . PMA_USR_OS . ' ';        $debugstr .= PMA_USR_BROWSER_AGENT . ' ' . PMA_USR_BROWSER_VER . "\n";        $debugstr .= 'PMA: ' . PMA_VERSION . "\n";        $debugstr .= 'PHP VER,OS: ' . PMA_PHP_STR_VERSION . ' ' . PHP_OS . "\n";        $debugstr .= 'LANG: ' . $GLOBALS['lang'] . "\n";        $debugstr .= 'SQL: ' . htmlspecialchars($sql);        $encodedstr     = $debugstr;        if (@function_exists('gzcompress')) {            $encodedstr = gzcompress($debugstr, 9);        }        $encodedstr     = preg_replace(            "/(\015\012)|(\015)|(\012)/",            '<br />' . "\n",            chunk_split(base64_encode($encodedstr)));        $SQP_errorString .= __('There is a chance that you may have found a bug in the SQL parser. Please examine your query closely, and check that the quotes are correct and not mis-matched. Other possible failure causes may be that you are uploading a file with binary outside of a quoted text area. You can also try your query on the MySQL command line interface. The MySQL server error output below, if there is any, may also help you in diagnosing the problem. If you still have problems or if the parser fails where the command line interface succeeds, please reduce your SQL query input to the single query that causes problems, and submit a bug report with the data chunk in the CUT section below:')             . '<br />' . "\n"             . '----' . __('BEGIN CUT') . '----' . '<br />' . "\n"             . $encodedstr . "\n"             . '----' . __('END CUT') . '----' . '<br />' . "\n";        $SQP_errorString .= '----' . __('BEGIN RAW') . '----<br />' . "\n"             . '<pre>' . "\n"             . $debugstr             . '</pre>' . "\n"             . '----' . __('END RAW') . '----<br />' . "\n";    } // end of the "PMA_SQP_bug()" function    /**     * Parses the SQL queries     *     * @param string   The SQL query list     *     * @return mixed    Most of times, nothing...     *     * @global array    The current PMA configuration     * @global array    MySQL column attributes     * @global array    MySQL reserved words     * @global array    MySQL column types     * @global array    MySQL function names     * @global array    List of available character sets     * @global array    List of available collations     *     * @access public     */    function PMA_SQP_parse($sql)    {        static $PMA_SQPdata_column_attrib, $PMA_SQPdata_reserved_word;        static $PMA_SQPdata_column_type;        static $PMA_SQPdata_function_name, $PMA_SQPdata_forbidden_word;        global $mysql_charsets, $mysql_collations_flat;        // Convert all line feeds to Unix style        $sql = str_replace("\r\n", "\n", $sql);        $sql = str_replace("\r", "\n", $sql);        $len = PMA_strlen($sql);        if ($len == 0) {            return array();        }        // Create local hashtables        if (!isset($PMA_SQPdata_column_attrib)) {            $PMA_SQPdata_column_attrib  = array_flip(                $GLOBALS['PMA_SQPdata_column_attrib']                );            $PMA_SQPdata_function_name  = array_flip(                $GLOBALS['PMA_SQPdata_function_name']                );            $PMA_SQPdata_reserved_word  = array_flip(                $GLOBALS['PMA_SQPdata_reserved_word']                );            $PMA_SQPdata_forbidden_word = array_flip(                $GLOBALS['PMA_SQPdata_forbidden_word']                );            $PMA_SQPdata_column_type    = array_flip(                $GLOBALS['PMA_SQPdata_column_type']                );        }        $sql_array               = array();        $sql_array['raw']        = $sql;        $count1                  = 0;        $count2                  = 0;        $punct_queryend          = ';';        $punct_qualifier         = '.';        $punct_listsep           = ',';        $punct_level_plus        = '(';        $punct_level_minus       = ')';        $punct_user              = '@';        $digit_floatdecimal      = '.';        $digit_hexset            = 'x';        $bracket_list            = '()[]{}';        $allpunct_list           =  '-,;:!?/.^~\*&%+<=>|';        $allpunct_list_pair      = array(            '!=' => 1,            '&&' => 1,            ':=' => 1,            '<<' => 1,            '<=' => 1,            '<=>' => 1,            '<>' => 1,            '>=' => 1,            '>>' => 1,            '||' => 1,            '==' => 1        );        $quote_list              = '\'"`';        $arraysize               = 0;        $previous_was_space   = false;        $this_was_space       = false;        $previous_was_bracket = false;        $this_was_bracket     = false;        $previous_was_punct   = false;        $this_was_punct       = false;        $previous_was_listsep = false;        $this_was_listsep     = false;        $previous_was_quote   = false;        $this_was_quote       = false;        while ($count2 < $len) {            $c      = PMA_substr($sql, $count2, 1);            $count1 = $count2;            $previous_was_space = $this_was_space;            $this_was_space = false;            $previous_was_bracket = $this_was_bracket;            $this_was_bracket = false;            $previous_was_punct = $this_was_punct;            $this_was_punct = false;            $previous_was_listsep = $this_was_listsep;            $this_was_listsep = false;            $previous_was_quote = $this_was_quote;            $this_was_quote = false;            if (($c == "\n")) {                $this_was_space = true;                $count2++;                PMA_SQP_arrayAdd($sql_array, 'white_newline', '', $arraysize);                continue;            }            // Checks for white space            if (PMA_STR_isSpace($c)) {                $this_was_space = true;                $count2++;                continue;            }            // Checks for comment lines.            // MySQL style #            // C style /* */            // ANSI style --            $next_c = PMA_substr($sql, $count2 + 1, 1);            if (($c == '#')                || (($count2 + 1 < $len) && ($c == '/') && ($next_c == '*'))                || (($count2 + 2 == $len) && ($c == '-') && ($next_c == '-'))                || (($count2 + 2 < $len) && ($c == '-') && ($next_c == '-') && ((PMA_substr($sql, $count2 + 2, 1) <= ' ')))) {                $count2++;                $pos  = 0;                $type = 'bad';                switch ($c) {                case '#':                    $type = 'mysql';                case '-':                    $type = 'ansi';                    $pos  = PMA_strpos($sql, "\n", $count2);                    break;                case '/':                    $type = 'c';                    $pos  = PMA_strpos($sql, '*/', $count2);                    $pos  += 2;                    break;                default:                    break;                } // end switch                $count2 = ($pos < $count2) ? $len : $pos;                $str    = PMA_substr($sql, $count1, $count2 - $count1);                PMA_SQP_arrayAdd($sql_array, 'comment_' . $type, $str, $arraysize);                continue;            } // end if            // Checks for something inside quotation marks            if (PMA_strpos($quote_list, $c) !== false) {                $startquotepos   = $count2;                $quotetype       = $c;                $count2++;                $escaped         = false;                $pos             = $count2;                $oldpos          = 0;                do {                    $oldpos = $pos;                    $pos    = PMA_strpos(' ' . $sql, $quotetype, $oldpos + 1) - 1;                    // ($pos === false)                    if ($pos < 0) {                        if ($c == '`') {                            /*                             * Behave same as MySQL and accept end of query as end of backtick.                             * I know this is sick, but MySQL behaves like this:                             *                             * SELECT * FROM `table                             *                             * is treated like                             *                             * SELECT * FROM `table`                             */                            $pos_quote_separator = PMA_strpos(' ' . $sql, $GLOBALS['sql_delimiter'], $oldpos + 1) - 1;                            if ($pos_quote_separator < 0) {                                $len += 1;                                $sql .= '`';                                $sql_array['raw'] .= '`';                                $pos = $len;                            } else {                                $len += 1;                                $sql = PMA_substr($sql, 0, $pos_quote_separator) . '`' . PMA_substr($sql, $pos_quote_separator);                                $sql_array['raw'] = $sql;                                $pos = $pos_quote_separator;                            }                            if (class_exists('PMA_Message') && $GLOBALS['is_ajax_request'] != true) {                                PMA_Message::notice(__('Automatically appended backtick to the end of query!'))->display();                            }                        } else {                            $debugstr = __('Unclosed quote') . ' @ ' . $startquotepos. "\n"                                      . 'STR: ' . htmlspecialchars($quotetype);                            PMA_SQP_throwError($debugstr, $sql);                            return $sql_array;                        }                    }                    // If the quote is the first character, it can't be                    // escaped, so don't do the rest of the code                    if ($pos == 0) {                        break;                    }                    // Checks for MySQL escaping using a \                    // And checks for ANSI escaping using the $quotetype character                    if (($pos < $len) && PMA_STR_charIsEscaped($sql, $pos) && $c != '`') {                        $pos ++;                        continue;                    } elseif (($pos + 1 < $len) && (PMA_substr($sql, $pos, 1) == $quotetype) && (PMA_substr($sql, $pos + 1, 1) == $quotetype)) {                        $pos = $pos + 2;                        continue;                    } else {                        break;                    }                } while ($len > $pos); // end do                $count2       = $pos;                $count2++;                $type         = 'quote_';                switch ($quotetype) {                case '\'':                    $type .= 'single';                    $this_was_quote = true;                    break;                case '"':                    $type .= 'double';                    $this_was_quote = true;                    break;                case '`':                    $type .= 'backtick';                    $this_was_quote = true;                    break;                default:                    break;                } // end switch                $data = PMA_substr($sql, $count1, $count2 - $count1);                PMA_SQP_arrayAdd($sql_array, $type, $data, $arraysize);                continue;            }            // Checks for brackets            if (PMA_strpos($bracket_list, $c) !== false) {                // All bracket tokens are only one item long                $this_was_bracket = true;                $count2++;                $type_type     = '';                if (PMA_strpos('([{', $c) !== false) {                    $type_type = 'open';                } else {                    $type_type = 'close';                }                $type_style     = '';                if (PMA_strpos('()', $c) !== false) {                    $type_style = 'round';                } elseif (PMA_strpos('[]', $c) !== false) {                    $type_style = 'square';                } else {                    $type_style = 'curly';                }                $type = 'punct_bracket_' . $type_type . '_' . $type_style;                PMA_SQP_arrayAdd($sql_array, $type, $c, $arraysize);                continue;            }            /* DEBUG            echo '<pre>1';            var_dump(PMA_STR_isSqlIdentifier($c, false));            var_dump($c == '@');            var_dump($c == '.');            var_dump(PMA_STR_isDigit(PMA_substr($sql, $count2 + 1, 1)));            var_dump($previous_was_space);            var_dump($previous_was_bracket);            var_dump($previous_was_listsep);            echo '</pre>';            */            // Checks for identifier (alpha or numeric)            if (PMA_STR_isSqlIdentifier($c, false)             || $c == '@'             || ($c == '.'              && PMA_STR_isDigit(PMA_substr($sql, $count2 + 1, 1))              && ($previous_was_space || $previous_was_bracket || $previous_was_listsep))) {                /* DEBUG                echo PMA_substr($sql, $count2);                echo '<hr />';                */                $count2++;                /**                 * @todo a @ can also be present in expressions like                 * FROM 'user'@'%' or  TO 'user'@'%'                 * in this case, the @ is wrongly marked as alpha_variable                 */                $is_identifier           = $previous_was_punct;                $is_sql_variable         = $c == '@' && ! $previous_was_quote;                $is_user                 = $c == '@' && $previous_was_quote;                $is_digit                = !$is_identifier && !$is_sql_variable && PMA_STR_isDigit($c);                $is_hex_digit            = $is_digit && $c == '0' && $count2 < $len && PMA_substr($sql, $count2, 1) == 'x';                $is_float_digit          = $c == '.';                $is_float_digit_exponent = false;                /* DEBUG                echo '<pre>2';                var_dump($is_identifier);                var_dump($is_sql_variable);                var_dump($is_digit);                var_dump($is_float_digit);                echo '</pre>';                 */                // Fast skip is especially needed for huge BLOB data                if ($is_hex_digit) {                    $count2++;                    $pos = strspn($sql, '0123456789abcdefABCDEF', $count2);                    if ($pos > $count2) {                        $count2 = $pos;                    }                    unset($pos);                } elseif ($is_digit) {                    $pos = strspn($sql, '0123456789', $count2);                    if ($pos > $count2) {                        $count2 = $pos;                    }                    unset($pos);                }                while (($count2 < $len) && PMA_STR_isSqlIdentifier(PMA_substr($sql, $count2, 1), ($is_sql_variable || $is_digit))) {                    $c2 = PMA_substr($sql, $count2, 1);                    if ($is_sql_variable && ($c2 == '.')) {                        $count2++;                        continue;                    }                    if ($is_digit && (!$is_hex_digit) && ($c2 == '.')) {                        $count2++;                        if (!$is_float_digit) {                            $is_float_digit = true;                            continue;                        } else {                            $debugstr = __('Invalid Identifer') . ' @ ' . ($count1+1) . "\n"                                      . 'STR: ' . htmlspecialchars(PMA_substr($sql, $count1, $count2 - $count1));                            PMA_SQP_throwError($debugstr, $sql);                            return $sql_array;                        }                    }                    if ($is_digit && (!$is_hex_digit) && (($c2 == 'e') || ($c2 == 'E'))) {                        if (!$is_float_digit_exponent) {                            $is_float_digit_exponent = true;                            $is_float_digit          = true;                            $count2++;                            continue;                        } else {                            $is_digit                = false;                            $is_float_digit          = false;                        }                    }                    if (($is_hex_digit && PMA_STR_isHexDigit($c2)) || ($is_digit && PMA_STR_isDigit($c2))) {                        $count2++;                        continue;                    } else {                        $is_digit     = false;                        $is_hex_digit = false;                    }                    $count2++;                } // end while                $l    = $count2 - $count1;                $str  = PMA_substr($sql, $count1, $l);                $type = '';                if ($is_digit || $is_float_digit || $is_hex_digit) {                    $type     = 'digit';                    if ($is_float_digit) {                        $type .= '_float';                    } elseif ($is_hex_digit) {                        $type .= '_hex';                    } else {                        $type .= '_integer';                    }                } elseif ($is_user) {                    $type = 'punct_user';                } elseif ($is_sql_variable != false) {                    $type = 'alpha_variable';                } else {                    $type = 'alpha';                } // end if... else....                PMA_SQP_arrayAdd($sql_array, $type, $str, $arraysize, $count2);                continue;            }            // Checks for punct            if (PMA_strpos($allpunct_list, $c) !== false) {                while (($count2 < $len) && PMA_strpos($allpunct_list, PMA_substr($sql, $count2, 1)) !== false) {                    $count2++;                }                $l = $count2 - $count1;                if ($l == 1) {                    $punct_data = $c;                } else {                    $punct_data = PMA_substr($sql, $count1, $l);                }                // Special case, sometimes, althought two characters are                // adjectent directly, they ACTUALLY need to be seperate                /* DEBUG                echo '<pre>';                var_dump($l);                var_dump($punct_data);                echo '</pre>';                */                if ($l == 1) {                    $t_suffix         = '';                    switch ($punct_data) {                    case $punct_queryend:                        $t_suffix = '_queryend';                        break;                    case $punct_qualifier:                        $t_suffix = '_qualifier';                        $this_was_punct = true;                        break;                    case $punct_listsep:                        $this_was_listsep = true;                        $t_suffix = '_listsep';                        break;                    default:                        break;                    }                    PMA_SQP_arrayAdd($sql_array, 'punct' . $t_suffix, $punct_data, $arraysize);                } elseif ($punct_data == $GLOBALS['sql_delimiter'] || isset($allpunct_list_pair[$punct_data])) {                    // Ok, we have one of the valid combined punct expressions                    PMA_SQP_arrayAdd($sql_array, 'punct', $punct_data, $arraysize);                } else {                    // Bad luck, lets split it up more                    $first  = $punct_data[0];                    $first2 = $punct_data[0] . $punct_data[1];                    $last2  = $punct_data[$l - 2] . $punct_data[$l - 1];                    $last   = $punct_data[$l - 1];                    if (($first == ',') || ($first == ';') || ($first == '.') || ($first == '*')) {                        $count2     = $count1 + 1;                        $punct_data = $first;                    } elseif (($last2 == '/*') || (($last2 == '--') && ($count2 == $len || PMA_substr($sql, $count2, 1) <= ' '))) {                        $count2     -= 2;                        $punct_data = PMA_substr($sql, $count1, $count2 - $count1);                    } elseif (($last == '-') || ($last == '+') || ($last == '!')) {                        $count2--;                        $punct_data = PMA_substr($sql, $count1, $count2 - $count1);                    } elseif ($last != '~') {                        /**                         * @todo for negation operator, split in 2 tokens ?                         * "select x&~1 from t"                         * becomes "select x & ~ 1 from t" ?                         */                        $debugstr =  __('Unknown Punctuation String') . ' @ ' . ($count1+1) . "\n"                                  . 'STR: ' . htmlspecialchars($punct_data);                        PMA_SQP_throwError($debugstr, $sql);                        return $sql_array;                    }                    PMA_SQP_arrayAdd($sql_array, 'punct', $punct_data, $arraysize);                    continue;                } // end if... elseif... else                continue;            }            // DEBUG            $count2++;            $debugstr = 'C1 C2 LEN: ' . $count1 . ' ' . $count2 . ' ' . $len .  "\n"                      . 'STR: ' . PMA_substr($sql, $count1, $count2 - $count1) . "\n";            PMA_SQP_bug($debugstr, $sql);            return $sql_array;        } // end while ($count2 < $len)        /*        echo '<pre>';        print_r($sql_array);        echo '</pre>';        */        if ($arraysize > 0) {            $t_next           = $sql_array[0]['type'];            $t_prev           = '';            $t_bef_prev       = '';            $t_cur            = '';            $d_next           = $sql_array[0]['data'];            $d_prev           = '';            $d_bef_prev       = '';            $d_cur            = '';            $d_next_upper     = $t_next == 'alpha' ? strtoupper($d_next) : $d_next;            $d_prev_upper     = '';            $d_bef_prev_upper = '';            $d_cur_upper      = '';        }        for ($i = 0; $i < $arraysize; $i++) {            $t_bef_prev       = $t_prev;            $t_prev           = $t_cur;            $t_cur            = $t_next;            $d_bef_prev       = $d_prev;            $d_prev           = $d_cur;            $d_cur            = $d_next;            $d_bef_prev_upper = $d_prev_upper;            $d_prev_upper     = $d_cur_upper;            $d_cur_upper      = $d_next_upper;            if (($i + 1) < $arraysize) {                $t_next = $sql_array[$i + 1]['type'];                $d_next = $sql_array[$i + 1]['data'];                $d_next_upper = $t_next == 'alpha' ? strtoupper($d_next) : $d_next;            } else {                $t_next       = '';                $d_next       = '';                $d_next_upper = '';            }            //DEBUG echo "[prev: <strong>".$d_prev."</strong> ".$t_prev."][cur: <strong>".$d_cur."</strong> ".$t_cur."][next: <strong>".$d_next."</strong> ".$t_next."]<br />";            if ($t_cur == 'alpha') {                $t_suffix     = '_identifier';                // for example: `thebit` bit(8) NOT NULL DEFAULT b'0'                if ($t_prev == 'alpha' && $d_prev == 'DEFAULT' && $d_cur == 'b' && $t_next == 'quote_single') {                    $t_suffix = '_bitfield_constant_introducer';                } elseif (($t_next == 'punct_qualifier') || ($t_prev == 'punct_qualifier')) {                    $t_suffix = '_identifier';                } elseif (($t_next == 'punct_bracket_open_round')                  && isset($PMA_SQPdata_function_name[$d_cur_upper])) {                    /**                     * @todo 2005-10-16: in the case of a CREATE TABLE containing                     * a TIMESTAMP, since TIMESTAMP() is also a function, it's                     * found here and the token is wrongly marked as alpha_functionName.                     * But we compensate for this when analysing for timestamp_not_null                     * later in this script.                     *                     * Same applies to CHAR vs. CHAR() function.                     */                    $t_suffix = '_functionName';                    /* There are functions which might be as well column types */                } elseif (isset($PMA_SQPdata_column_type[$d_cur_upper])) {                    $t_suffix = '_columnType';                    /**                     * Temporary fix for BUG #621357 and #2027720                     *                     * @todo FIX PROPERLY NEEDS OVERHAUL OF SQL TOKENIZER                     */                    if (($d_cur_upper == 'SET' || $d_cur_upper == 'BINARY') && $t_next != 'punct_bracket_open_round') {                        $t_suffix = '_reservedWord';                    }                    //END OF TEMPORARY FIX                    // CHARACTER is a synonym for CHAR, but can also be meant as                    // CHARACTER SET. In this case, we have a reserved word.                    if ($d_cur_upper == 'CHARACTER' && $d_next_upper == 'SET') {                        $t_suffix = '_reservedWord';                    }                    // experimental                    // current is a column type, so previous must not be                    // a reserved word but an identifier                    // CREATE TABLE SG_Persons (first varchar(64))                    //if ($sql_array[$i-1]['type'] =='alpha_reservedWord') {                    //    $sql_array[$i-1]['type'] = 'alpha_identifier';                    //}                } elseif (isset($PMA_SQPdata_reserved_word[$d_cur_upper])) {                    $t_suffix = '_reservedWord';                } elseif (isset($PMA_SQPdata_column_attrib[$d_cur_upper])) {                    $t_suffix = '_columnAttrib';                    // INNODB is a MySQL table type, but in "SHOW INNODB STATUS",                    // it should be regarded as a reserved word.                    if ($d_cur_upper == 'INNODB' && $d_prev_upper == 'SHOW' && $d_next_upper == 'STATUS') {                        $t_suffix = '_reservedWord';                    }                    if ($d_cur_upper == 'DEFAULT' && $d_next_upper == 'CHARACTER') {                        $t_suffix = '_reservedWord';                    }                    // Binary as character set                    if ($d_cur_upper == 'BINARY' && (                      ($d_bef_prev_upper == 'CHARACTER' && $d_prev_upper == 'SET')                      || ($d_bef_prev_upper == 'SET' && $d_prev_upper == '=')                      || ($d_bef_prev_upper == 'CHARSET' && $d_prev_upper == '=')                      || $d_prev_upper == 'CHARSET'                      ) && in_array($d_cur, $mysql_charsets)) {                        $t_suffix = '_charset';                    }                } elseif (in_array($d_cur, $mysql_charsets)                  || in_array($d_cur, $mysql_collations_flat)                  || ($d_cur{0} == '_' && in_array(substr($d_cur, 1), $mysql_charsets))) {                    $t_suffix = '_charset';                } else {                    // Do nothing                }                // check if present in the list of forbidden words                if ($t_suffix == '_reservedWord' && isset($PMA_SQPdata_forbidden_word[$d_cur_upper])) {                    $sql_array[$i]['forbidden'] = true;                } else {                    $sql_array[$i]['forbidden'] = false;                }                $sql_array[$i]['type'] .= $t_suffix;            }        } // end for        // Stores the size of the array inside the array, as count() is a slow        // operation.        $sql_array['len'] = $arraysize;        // DEBUG echo 'After parsing<pre>'; print_r($sql_array); echo '</pre>';        // Sends the data back        return $sql_array;    } // end of the "PMA_SQP_parse()" function    /**     * Checks for token types being what we want...     *     * @param string String of type that we have     * @param string String of type that we want     *     * @return boolean result of check     *     * @access private     */    function PMA_SQP_typeCheck($toCheck, $whatWeWant)    {        $typeSeperator = '_';        if (strcmp($whatWeWant, $toCheck) == 0) {            return true;        } else {            if (strpos($whatWeWant, $typeSeperator) === false) {                return strncmp($whatWeWant, $toCheck, strpos($toCheck, $typeSeperator)) == 0;            } else {                return false;            }        }    }    /**     * Analyzes SQL queries     *     * @param array   The SQL queries     *     * @return array   The analyzed SQL queries     *     * @access public     */    function PMA_SQP_analyze($arr)    {        if ($arr == array() || ! isset($arr['len'])) {            return array();        }        $result          = array();        $size            = $arr['len'];        $subresult       = array(            'querytype'      => '',            'select_expr_clause'=> '', // the whole stuff between SELECT and FROM , except DISTINCT            'position_of_first_select' => '', // the array index            'from_clause'=> '',            'group_by_clause'=> '',            'order_by_clause'=> '',            'having_clause'  => '',            'limit_clause'  => '',            'where_clause'   => '',            'where_clause_identifiers'   => array(),            'unsorted_query' => '',            'queryflags'     => array(),            'select_expr'    => array(),            'table_ref'      => array(),            'foreign_keys'   => array(),            'create_table_fields' => array()        );        $subresult_empty = $subresult;        $seek_queryend         = false;        $seen_end_of_table_ref = false;        $number_of_brackets_in_extract = 0;        $number_of_brackets_in_group_concat = 0;        $number_of_brackets = 0;        $in_subquery = false;        $seen_subquery = false;        $seen_from = false;        // for SELECT EXTRACT(YEAR_MONTH FROM CURDATE())        // we must not use CURDATE as a table_ref        // so we track whether we are in the EXTRACT()        $in_extract          = false;        // for GROUP_CONCAT(...)        $in_group_concat     = false;        /* Description of analyzer results         *         * db, table, column, alias         * ------------------------         *         * Inside the $subresult array, we create ['select_expr'] and ['table_ref'] arrays.         *         * The SELECT syntax (simplified) is         *         * SELECT         *    select_expression,...         *    [FROM [table_references]         *         *         * ['select_expr'] is filled with each expression, the key represents the         * expression position in the list (0-based) (so we don't lose track of         * multiple occurences of the same column).         *         * ['table_ref'] is filled with each table ref, same thing for the key.         *         * I create all sub-values empty, even if they are         * not present (for example no select_expression alias).         *         * There is a debug section at the end of loop #1, if you want to         * see the exact contents of select_expr and table_ref         *         * queryflags         * ----------         *         * In $subresult, array 'queryflags' is filled, according to what we         * find in the query.         *         * Currently, those are generated:         *         * ['queryflags']['need_confirm'] = 1; if the query needs confirmation         * ['queryflags']['select_from'] = 1;  if this is a real SELECT...FROM         * ['queryflags']['distinct'] = 1;     for a DISTINCT         * ['queryflags']['union'] = 1;        for a UNION         * ['queryflags']['join'] = 1;         for a JOIN         * ['queryflags']['offset'] = 1;       for the presence of OFFSET         * ['queryflags']['procedure'] = 1;    for the presence of PROCEDURE         *         * query clauses         * -------------         *         * The select is splitted in those clauses:         * ['select_expr_clause']         * ['from_clause']         * ['group_by_clause']         * ['order_by_clause']         * ['having_clause']         * ['limit_clause']         * ['where_clause']         *         * The identifiers of the WHERE clause are put into the array         * ['where_clause_identifier']         *         * For a SELECT, the whole query without the ORDER BY clause is put into         * ['unsorted_query']         *         * foreign keys         * ------------         * The CREATE TABLE may contain FOREIGN KEY clauses, so they get         * analyzed and ['foreign_keys'] is an array filled with         * the constraint name, the index list,         * the REFERENCES table name and REFERENCES index list,         * and ON UPDATE | ON DELETE clauses         *         * position_of_first_select         * ------------------------         *         * The array index of the first SELECT we find. Will be used to         * insert a SQL_CALC_FOUND_ROWS.         *         * create_table_fields         * -------------------         *         * Used to detect the DEFAULT CURRENT_TIMESTAMP and         * ON UPDATE CURRENT_TIMESTAMP clauses of the CREATE TABLE query.         * Also used to store the default value of the field.         * An array, each element is the identifier name.         * Note that for now, the timestamp_not_null element is created         * even for non-TIMESTAMP fields.         *         * Sub-elements: ['type'] which contains the column type         *               optional (currently they are never false but can be absent):         *               ['default_current_timestamp'] boolean         *               ['on_update_current_timestamp'] boolean         *               ['timestamp_not_null'] boolean         *         * section_before_limit, section_after_limit         * -----------------------------------------         *         * Marks the point of the query where we can insert a LIMIT clause;         * so the section_before_limit will contain the left part before         * a possible LIMIT clause         *         *         * End of description of analyzer results         */        // must be sorted        // TODO: current logic checks for only one word, so I put only the        // first word of the reserved expressions that end a table ref;        // maybe this is not ok (the first word might mean something else)        //        $words_ending_table_ref = array(        //            'FOR UPDATE',        //            'GROUP BY',        //            'HAVING',        //            'LIMIT',        //            'LOCK IN SHARE MODE',        //            'ORDER BY',        //            'PROCEDURE',        //            'UNION',        //            'WHERE'        //        );        $words_ending_table_ref = array(            'FOR' => 1,            'GROUP' => 1,            'HAVING' => 1,            'LIMIT' => 1,            'LOCK' => 1,            'ORDER' => 1,            'PROCEDURE' => 1,            'UNION' => 1,            'WHERE' => 1        );        $words_ending_clauses = array(            'FOR' => 1,            'LIMIT' => 1,            'LOCK' => 1,            'PROCEDURE' => 1,            'UNION' => 1        );        $supported_query_types = array(            'SELECT' => 1,            /*            // Support for these additional query types will come later on.            'DELETE' => 1,            'INSERT' => 1,            'REPLACE' => 1,            'TRUNCATE' => 1,            'UPDATE' => 1,            'EXPLAIN' => 1,            'DESCRIBE' => 1,            'SHOW' => 1,            'CREATE' => 1,            'SET' => 1,            'ALTER' => 1            */        );        // loop #1 for each token: select_expr, table_ref for SELECT        for ($i = 0; $i < $size; $i++) {            //DEBUG echo "Loop1 <strong>"  . $arr[$i]['data'] . "</strong> (" . $arr[$i]['type'] . ")<br />";            // High speed seek for locating the end of the current query            if ($seek_queryend == true) {                if ($arr[$i]['type'] == 'punct_queryend') {                    $seek_queryend = false;                } else {                    continue;                } // end if (type == punct_queryend)            } // end if ($seek_queryend)            /**             * Note: do not split if this is a punct_queryend for the first and only query             * @todo when we find a UNION, should we split in another subresult?             */            if ($arr[$i]['type'] == 'punct_queryend' && ($i + 1 != $size)) {                $result[]  = $subresult;                $subresult = $subresult_empty;                continue;            } // end if (type == punct_queryend)            // ==============================================================            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $number_of_brackets++;                if ($in_extract) {                    $number_of_brackets_in_extract++;                }                if ($in_group_concat) {                    $number_of_brackets_in_group_concat++;                }            }            // ==============================================================            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $number_of_brackets--;                if ($number_of_brackets == 0) {                    $in_subquery = false;                }                if ($in_extract) {                    $number_of_brackets_in_extract--;                    if ($number_of_brackets_in_extract == 0) {                       $in_extract = false;                    }                }                if ($in_group_concat) {                    $number_of_brackets_in_group_concat--;                    if ($number_of_brackets_in_group_concat == 0) {                       $in_group_concat = false;                    }                }            }            if ($in_subquery) {                /**                 * skip the subquery to avoid setting                 * select_expr or table_ref with the contents                 * of this subquery; this is to avoid a bug when                 * trying to edit the results of                 * select * from child where not exists (select id from                 * parent where child.parent_id = parent.id);                 */                continue;            }            // ==============================================================            if ($arr[$i]['type'] == 'alpha_functionName') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data =='EXTRACT') {                    $in_extract = true;                    $number_of_brackets_in_extract = 0;                }                if ($upper_data =='GROUP_CONCAT') {                    $in_group_concat = true;                    $number_of_brackets_in_group_concat = 0;                }            }            // ==============================================================            if ($arr[$i]['type'] == 'alpha_reservedWord'                //&& $arr[$i]['forbidden'] == false) {                ) {                // We don't know what type of query yet, so run this                if ($subresult['querytype'] == '') {                    $subresult['querytype'] = strtoupper($arr[$i]['data']);                } // end if (querytype was empty)                // Check if we support this type of query                if (!isset($supported_query_types[$subresult['querytype']])) {                    // Skip ahead to the next one if we don't                    $seek_queryend = true;                    continue;                } // end if (query not supported)                // upper once                $upper_data = strtoupper($arr[$i]['data']);                /**                 * @todo reset for each query?                 */                if ($upper_data == 'SELECT') {                    if ($number_of_brackets > 0) {                        $in_subquery = true;                        $seen_subquery = true;                        // this is a subquery so do not analyze inside it                        continue;                    }                    $seen_from = false;                    $previous_was_identifier = false;                    $current_select_expr = -1;                    $seen_end_of_table_ref = false;                } // end if (data == SELECT)                if ($upper_data =='FROM' && !$in_extract) {                    $current_table_ref = -1;                    $seen_from = true;                    $previous_was_identifier = false;                    $save_table_ref = true;                } // end if (data == FROM)                // here, do not 'continue' the loop, as we have more work for                // reserved words below            } // end if (type == alpha_reservedWord)            // ==============================            if ($arr[$i]['type'] == 'quote_backtick'             || $arr[$i]['type'] == 'quote_double'             || $arr[$i]['type'] == 'quote_single'             || $arr[$i]['type'] == 'alpha_identifier'             || ($arr[$i]['type'] == 'alpha_reservedWord'                && $arr[$i]['forbidden'] == false)) {                switch ($arr[$i]['type']) {                case 'alpha_identifier':                case 'alpha_reservedWord':                    /**                     * this is not a real reservedWord, because it's not                     * present in the list of forbidden words, for example                     * "storage" which can be used as an identifier                     *                     * @todo avoid the pretty printing in color in this case                     */                    $identifier = $arr[$i]['data'];                    break;                case 'quote_backtick':                case 'quote_double':                case 'quote_single':                    $identifier = PMA_unQuote($arr[$i]['data']);                    break;                } // end switch                if ($subresult['querytype'] == 'SELECT'                 && ! $in_group_concat                 && ! ($seen_subquery && $arr[$i - 1]['type'] == 'punct_bracket_close_round')) {                    if (!$seen_from) {                        if ($previous_was_identifier && isset($chain)) {                            // found alias for this select_expr, save it                            // but only if we got something in $chain                            // (for example, SELECT COUNT(*) AS cnt                            // puts nothing in $chain, so we avoid                            // setting the alias)                            $alias_for_select_expr = $identifier;                        } else {                            $chain[] = $identifier;                            $previous_was_identifier = true;                        } // end if !$previous_was_identifier                    } else {                        // ($seen_from)                        if ($save_table_ref && !$seen_end_of_table_ref) {                            if ($previous_was_identifier) {                                // found alias for table ref                                // save it for later                                $alias_for_table_ref = $identifier;                            } else {                                $chain[] = $identifier;                                $previous_was_identifier = true;                            } // end if ($previous_was_identifier)                        } // end if ($save_table_ref &&!$seen_end_of_table_ref)                    } // end if (!$seen_from)                } // end if (querytype SELECT)            } // end if (quote_backtick or double quote or alpha_identifier)            // ===================================            if ($arr[$i]['type'] == 'punct_qualifier') {                // to be able to detect an identifier following another                $previous_was_identifier = false;                continue;            } // end if (punct_qualifier)            /**             * @todo check if 3 identifiers following one another -> error             */            //    s a v e    a    s e l e c t    e x p r            // finding a list separator or FROM            // means that we must save the current chain of identifiers            // into a select expression            // for now, we only save a select expression if it contains            // at least one identifier, as we are interested in checking            // the columns and table names, so in "select * from persons",            // the "*" is not saved            if (isset($chain) && !$seen_end_of_table_ref             && ((!$seen_from && $arr[$i]['type'] == 'punct_listsep')              || ($arr[$i]['type'] == 'alpha_reservedWord' && $upper_data == 'FROM'))) {                $size_chain = count($chain);                $current_select_expr++;                $subresult['select_expr'][$current_select_expr] = array(                  'expr' => '',                  'alias' => '',                  'db'   => '',                  'table_name' => '',                  'table_true_name' => '',                  'column' => ''                 );                if (isset($alias_for_select_expr) && strlen($alias_for_select_expr)) {                    // we had found an alias for this select expression                    $subresult['select_expr'][$current_select_expr]['alias'] = $alias_for_select_expr;                    unset($alias_for_select_expr);                }                // there is at least a column                $subresult['select_expr'][$current_select_expr]['column'] = $chain[$size_chain - 1];                $subresult['select_expr'][$current_select_expr]['expr'] = $chain[$size_chain - 1];                // maybe a table                if ($size_chain > 1) {                    $subresult['select_expr'][$current_select_expr]['table_name'] = $chain[$size_chain - 2];                    // we assume for now that this is also the true name                    $subresult['select_expr'][$current_select_expr]['table_true_name'] = $chain[$size_chain - 2];                    $subresult['select_expr'][$current_select_expr]['expr']                        = $subresult['select_expr'][$current_select_expr]['table_name']                        . '.' . $subresult['select_expr'][$current_select_expr]['expr'];                } // end if ($size_chain > 1)                // maybe a db                if ($size_chain > 2) {                    $subresult['select_expr'][$current_select_expr]['db'] = $chain[$size_chain - 3];                    $subresult['select_expr'][$current_select_expr]['expr']                        = $subresult['select_expr'][$current_select_expr]['db']                        . '.' . $subresult['select_expr'][$current_select_expr]['expr'];                } // end if ($size_chain > 2)                unset($chain);                /**                 * @todo explain this:                 */                if (($arr[$i]['type'] == 'alpha_reservedWord')                 && ($upper_data != 'FROM')) {                    $previous_was_identifier = true;                }            } // end if (save a select expr)            //======================================            //    s a v e    a    t a b l e    r e f            //======================================            // maybe we just saw the end of table refs            // but the last table ref has to be saved            // or we are at the last token            // or we just got a reserved word            /**             * @todo there could be another query after this one             */            if (isset($chain) && $seen_from && $save_table_ref             && ($arr[$i]['type'] == 'punct_listsep'               || ($arr[$i]['type'] == 'alpha_reservedWord' && $upper_data!="AS")               || $seen_end_of_table_ref               || $i==$size-1)) {                $size_chain = count($chain);                $current_table_ref++;                $subresult['table_ref'][$current_table_ref] = array(                  'expr'            => '',                  'db'              => '',                  'table_name'      => '',                  'table_alias'     => '',                  'table_true_name' => ''                 );                if (isset($alias_for_table_ref) && strlen($alias_for_table_ref)) {                    $subresult['table_ref'][$current_table_ref]['table_alias'] = $alias_for_table_ref;                    unset($alias_for_table_ref);                }                $subresult['table_ref'][$current_table_ref]['table_name'] = $chain[$size_chain - 1];                // we assume for now that this is also the true name                $subresult['table_ref'][$current_table_ref]['table_true_name'] = $chain[$size_chain - 1];                $subresult['table_ref'][$current_table_ref]['expr']                    = $subresult['table_ref'][$current_table_ref]['table_name'];                // maybe a db                if ($size_chain > 1) {                    $subresult['table_ref'][$current_table_ref]['db'] = $chain[$size_chain - 2];                    $subresult['table_ref'][$current_table_ref]['expr']                        = $subresult['table_ref'][$current_table_ref]['db']                        . '.' . $subresult['table_ref'][$current_table_ref]['expr'];                } // end if ($size_chain > 1)                // add the table alias into the whole expression                $subresult['table_ref'][$current_table_ref]['expr']                 .= ' ' . $subresult['table_ref'][$current_table_ref]['table_alias'];                unset($chain);                $previous_was_identifier = true;                //continue;            } // end if (save a table ref)            // when we have found all table refs,            // for each table_ref alias, put the true name of the table            // in the corresponding select expressions            if (isset($current_table_ref) && ($seen_end_of_table_ref || $i == $size-1) && $subresult != $subresult_empty) {                for ($tr=0; $tr <= $current_table_ref; $tr++) {                    $alias = $subresult['table_ref'][$tr]['table_alias'];                    $truename = $subresult['table_ref'][$tr]['table_true_name'];                    for ($se=0; $se <= $current_select_expr; $se++) {                        if (isset($alias)                            && strlen($alias)                            && $subresult['select_expr'][$se]['table_true_name'] == $alias                        ) {                            $subresult['select_expr'][$se]['table_true_name'] = $truename;                        } // end if (found the alias)                    } // end for (select expressions)                } // end for (table refs)            } // end if (set the true names)            // e n d i n g    l o o p  #1            // set the $previous_was_identifier to false if the current            // token is not an identifier            if (($arr[$i]['type'] != 'alpha_identifier')             && ($arr[$i]['type'] != 'quote_double')             && ($arr[$i]['type'] != 'quote_single')             && ($arr[$i]['type'] != 'quote_backtick')) {                $previous_was_identifier = false;            } // end if            // however, if we are on AS, we must keep the $previous_was_identifier            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data == 'AS')) {                $previous_was_identifier = true;            }            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data =='ON' || $upper_data =='USING')) {                $save_table_ref = false;            } // end if (data == ON)            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data =='JOIN' || $upper_data =='FROM')) {                $save_table_ref = true;            } // end if (data == JOIN)            /**             * no need to check the end of table ref if we already did             *             * @todo maybe add "&& $seen_from"             */            if (!$seen_end_of_table_ref) {                // if this is the last token, it implies that we have                // seen the end of table references                // Check for the end of table references                //                // Note: if we are analyzing a GROUP_CONCAT clause,                // we might find a word that seems to indicate that                // we have found the end of table refs (like ORDER)                // but it's a modifier of the GROUP_CONCAT so                // it's not the real end of table refs                if (($i == $size-1)                 || ($arr[$i]['type'] == 'alpha_reservedWord'                 && !$in_group_concat                 && isset($words_ending_table_ref[$upper_data]))) {                    $seen_end_of_table_ref = true;                    // to be able to save the last table ref, but do not                    // set it true if we found a word like "ON" that has                    // already set it to false                    if (isset($save_table_ref) && $save_table_ref != false) {                        $save_table_ref = true;                    } //end if                } // end if (check for end of table ref)            } //end if (!$seen_end_of_table_ref)            if ($seen_end_of_table_ref) {                $save_table_ref = false;            } // end if        } // end for $i (loop #1)        //DEBUG        /*          if (isset($current_select_expr)) {           for ($trace=0; $trace<=$current_select_expr; $trace++) {               echo "<br />";               reset ($subresult['select_expr'][$trace]);               while (list ($key, $val) = each ($subresult['select_expr'][$trace]))                   echo "sel expr $trace $key => $val<br />\n";               }          }          if (isset($current_table_ref)) {           echo "current_table_ref = " . $current_table_ref . "<br>";           for ($trace=0; $trace<=$current_table_ref; $trace++) {               echo "<br />";               reset ($subresult['table_ref'][$trace]);               while (list ($key, $val) = each ($subresult['table_ref'][$trace]))               echo "table ref $trace $key => $val<br />\n";               }          }        */        // -------------------------------------------------------        // loop #2: - queryflags        //          - querytype (for queries != 'SELECT')        //          - section_before_limit, section_after_limit        //        // we will also need this queryflag in loop 2        // so set it here        if (isset($current_table_ref) && $current_table_ref > -1) {            $subresult['queryflags']['select_from'] = 1;        }        $section_before_limit = '';        $section_after_limit = ''; // truly the section after the limit clause        $seen_reserved_word = false;        $seen_group = false;        $seen_order = false;        $seen_order_by = false;        $in_group_by = false; // true when we are inside the GROUP BY clause        $in_order_by = false; // true when we are inside the ORDER BY clause        $in_having = false; // true when we are inside the HAVING clause        $in_select_expr = false; // true when we are inside the select expr clause        $in_where = false; // true when we are inside the WHERE clause        $seen_limit = false; // true if we have seen a LIMIT clause        $in_limit = false; // true when we are inside the LIMIT clause        $after_limit = false; // true when we are after the LIMIT clause        $in_from = false; // true when we are in the FROM clause        $in_group_concat = false;        $first_reserved_word = '';        $current_identifier = '';        $unsorted_query = $arr['raw']; // in case there is no ORDER BY        $number_of_brackets = 0;        $in_subquery = false;        for ($i = 0; $i < $size; $i++) {            //DEBUG echo "Loop2 <strong>"  . $arr[$i]['data'] . "</strong> (" . $arr[$i]['type'] . ")<br />";            // need_confirm            //            // check for reserved words that will have to generate            // a confirmation request later in sql.php            // the cases are:            //   DROP TABLE            //   DROP DATABASE            //   ALTER TABLE... DROP            //   DELETE FROM...            //            // this code is not used for confirmations coming from functions.js            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $number_of_brackets++;            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $number_of_brackets--;                if ($number_of_brackets == 0) {                    $in_subquery = false;                }            }            if ($arr[$i]['type'] == 'alpha_reservedWord') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data == 'SELECT' && $number_of_brackets > 0) {                    $in_subquery = true;                }                if (!$seen_reserved_word) {                    $first_reserved_word = $upper_data;                    $subresult['querytype'] = $upper_data;                    $seen_reserved_word = true;                    // if the first reserved word is DROP or DELETE,                    // we know this is a query that needs to be confirmed                    if ($first_reserved_word=='DROP'                     || $first_reserved_word == 'DELETE'                     || $first_reserved_word == 'TRUNCATE') {                        $subresult['queryflags']['need_confirm'] = 1;                    }                    if ($first_reserved_word=='SELECT') {                        $position_of_first_select = $i;                    }                } else {                    if ($upper_data == 'DROP' && $first_reserved_word == 'ALTER') {                        $subresult['queryflags']['need_confirm'] = 1;                    }                }                if ($upper_data == 'LIMIT' && ! $in_subquery) {                    $section_before_limit = substr($arr['raw'], 0, $arr[$i]['pos'] - 5);                    $in_limit = true;                    $seen_limit = true;                    $limit_clause = '';                    $in_order_by = false; // @todo maybe others to set false                }                if ($upper_data == 'PROCEDURE') {                    $subresult['queryflags']['procedure'] = 1;                    $in_limit = false;                    $after_limit = true;                }                /**                 * @todo set also to false if we find FOR UPDATE or LOCK IN SHARE MODE                 */                if ($upper_data == 'SELECT') {                    $in_select_expr = true;                    $select_expr_clause = '';                }                if ($upper_data == 'DISTINCT' && !$in_group_concat) {                    $subresult['queryflags']['distinct'] = 1;                }                if ($upper_data == 'UNION') {                    $subresult['queryflags']['union'] = 1;                }                if ($upper_data == 'JOIN') {                    $subresult['queryflags']['join'] = 1;                }                if ($upper_data == 'OFFSET') {                    $subresult['queryflags']['offset'] = 1;                }                // if this is a real SELECT...FROM                if ($upper_data == 'FROM' && isset($subresult['queryflags']['select_from']) && $subresult['queryflags']['select_from'] == 1) {                    $in_from = true;                    $from_clause = '';                    $in_select_expr = false;                }                // (we could have less resetting of variables to false                // if we trust that the query respects the standard                // MySQL order for clauses)                // we use $seen_group and $seen_order because we are looking                // for the BY                if ($upper_data == 'GROUP') {                    $seen_group = true;                    $seen_order = false;                    $in_having = false;                    $in_order_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'ORDER' && !$in_group_concat) {                    $seen_order = true;                    $seen_group = false;                    $in_having = false;                    $in_group_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'HAVING') {                    $in_having = true;                    $having_clause = '';                    $seen_group = false;                    $seen_order = false;                    $in_group_by = false;                    $in_order_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'WHERE') {                    $in_where = true;                    $where_clause = '';                    $where_clause_identifiers = array();                    $seen_group = false;                    $seen_order = false;                    $in_group_by = false;                    $in_order_by = false;                    $in_having = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'BY') {                    if ($seen_group) {                        $in_group_by = true;                        $group_by_clause = '';                    }                    if ($seen_order) {                        $seen_order_by = true;                        // Here we assume that the ORDER BY keywords took                        // exactly 8 characters.                        // We use PMA_substr() to be charset-safe; otherwise                        // if the table name contains accents, the unsorted                        // query would be missing some characters.                        $unsorted_query = PMA_substr($arr['raw'], 0, $arr[$i]['pos'] - 8);                        $in_order_by = true;                        $order_by_clause = '';                    }                }                // if we find one of the words that could end the clause                if (isset($words_ending_clauses[$upper_data])) {                    $in_group_by = false;                    $in_order_by = false;                    $in_having   = false;                    $in_where    = false;                    $in_select_expr = false;                    $in_from = false;                }            } // endif (reservedWord)            // do not add a space after a function name            /**             * @todo can we combine loop 2 and loop 1? some code is repeated here...             */            $sep = ' ';            if ($arr[$i]['type'] == 'alpha_functionName') {                $sep='';                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data =='GROUP_CONCAT') {                    $in_group_concat = true;                    $number_of_brackets_in_group_concat = 0;                }            }            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                if ($in_group_concat) {                    $number_of_brackets_in_group_concat++;                }            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                if ($in_group_concat) {                    $number_of_brackets_in_group_concat--;                    if ($number_of_brackets_in_group_concat == 0) {                        $in_group_concat = false;                    }                }            }            // do not add a space after an identifier if followed by a dot            if ($arr[$i]['type'] == 'alpha_identifier' && $i < $size - 1 && $arr[$i + 1]['data'] == '.') {                $sep = '';            }            // do not add a space after a dot if followed by an identifier            if ($arr[$i]['data'] == '.' && $i < $size - 1 && $arr[$i + 1]['type'] == 'alpha_identifier') {                $sep = '';            }            if ($in_select_expr && $upper_data != 'SELECT' && $upper_data != 'DISTINCT') {                $select_expr_clause .= $arr[$i]['data'] . $sep;            }            if ($in_from && $upper_data != 'FROM') {                $from_clause .= $arr[$i]['data'] . $sep;            }            if ($in_group_by && $upper_data != 'GROUP' && $upper_data != 'BY') {                $group_by_clause .= $arr[$i]['data'] . $sep;            }            if ($in_order_by && $upper_data != 'ORDER' && $upper_data != 'BY') {                // add a space only before ASC or DESC                // not around the dot between dbname and tablename                if ($arr[$i]['type'] == 'alpha_reservedWord') {                    $order_by_clause .= $sep;                }                $order_by_clause .= $arr[$i]['data'];            }            if ($in_having && $upper_data != 'HAVING') {                $having_clause .= $arr[$i]['data'] . $sep;            }            if ($in_where && $upper_data != 'WHERE') {                $where_clause .= $arr[$i]['data'] . $sep;                if (($arr[$i]['type'] == 'quote_backtick')                 || ($arr[$i]['type'] == 'alpha_identifier')) {                    $where_clause_identifiers[] = $arr[$i]['data'];                }            }            // to grab the rest of the query after the ORDER BY clause            if (isset($subresult['queryflags']['select_from'])             && $subresult['queryflags']['select_from'] == 1             && ! $in_order_by             && $seen_order_by             && $upper_data != 'BY') {                $unsorted_query .= $arr[$i]['data'];                if ($arr[$i]['type'] != 'punct_bracket_open_round'                 && $arr[$i]['type'] != 'punct_bracket_close_round'                 && $arr[$i]['type'] != 'punct') {                    $unsorted_query .= $sep;                }            }            if ($in_limit) {                if ($upper_data == 'OFFSET') {                    $limit_clause .= $sep;                }                $limit_clause .= $arr[$i]['data'];                if ($upper_data == 'LIMIT' || $upper_data == 'OFFSET') {                    $limit_clause .= $sep;                }            }            if ($after_limit && $seen_limit) {                $section_after_limit .= $arr[$i]['data'] . $sep;            }            // clear $upper_data for next iteration            $upper_data='';        } // end for $i (loop #2)        if (empty($section_before_limit)) {            $section_before_limit = $arr['raw'];        }        // -----------------------------------------------------        // loop #3: foreign keys and MySQL 4.1.2+ TIMESTAMP options        // (for now, check only the first query)        // (for now, identifiers are assumed to be backquoted)        // If we find that we are dealing with a CREATE TABLE query,        // we look for the next punct_bracket_open_round, which        // introduces the fields list. Then, when we find a        // quote_backtick, it must be a field, so we put it into        // the create_table_fields array. Even if this field is        // not a timestamp, it will be useful when logic has been        // added for complete field attributes analysis.        $seen_foreign = false;        $seen_references = false;        $seen_constraint = false;        $foreign_key_number = -1;        $seen_create_table = false;        $seen_create = false;        $seen_alter = false;        $in_create_table_fields = false;        $brackets_level = 0;        $in_timestamp_options = false;        $seen_default = false;        for ($i = 0; $i < $size; $i++) {        // DEBUG echo "Loop 3 <strong>" . $arr[$i]['data'] . "</strong> " . $arr[$i]['type'] . "<br />";            if ($arr[$i]['type'] == 'alpha_reservedWord') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data == 'NOT' && $in_timestamp_options) {                    $create_table_fields[$current_identifier]['timestamp_not_null'] = true;                }                if ($upper_data == 'CREATE') {                    $seen_create = true;                }                if ($upper_data == 'ALTER') {                    $seen_alter = true;                }                if ($upper_data == 'TABLE' && $seen_create) {                    $seen_create_table = true;                    $create_table_fields = array();                }                if ($upper_data == 'CURRENT_TIMESTAMP') {                    if ($in_timestamp_options) {                        if ($seen_default) {                            $create_table_fields[$current_identifier]['default_current_timestamp'] = true;                        }                    }                }                if ($upper_data == 'CONSTRAINT') {                    $foreign_key_number++;                    $seen_foreign = false;                    $seen_references = false;                    $seen_constraint = true;                }                if ($upper_data == 'FOREIGN') {                    $seen_foreign = true;                    $seen_references = false;                    $seen_constraint = false;                }                if ($upper_data == 'REFERENCES') {                    $seen_foreign = false;                    $seen_references = true;                    $seen_constraint = false;                }                // Cases covered:                // [ON DELETE {CASCADE | SET NULL | NO ACTION | RESTRICT}]                // [ON UPDATE {CASCADE | SET NULL | NO ACTION | RESTRICT}]                // but we set ['on_delete'] or ['on_cascade'] to                // CASCADE | SET_NULL | NO_ACTION | RESTRICT                // ON UPDATE CURRENT_TIMESTAMP                if ($upper_data == 'ON') {                    if (isset($arr[$i+1]) && $arr[$i+1]['type'] == 'alpha_reservedWord') {                        $second_upper_data = strtoupper($arr[$i+1]['data']);                        if ($second_upper_data == 'DELETE') {                            $clause = 'on_delete';                        }                        if ($second_upper_data == 'UPDATE') {                            $clause = 'on_update';                        }                        if (isset($clause)                        && ($arr[$i+2]['type'] == 'alpha_reservedWord'                // ugly workaround because currently, NO is not                // in the list of reserved words in sqlparser.data                // (we got a bug report about not being able to use                // 'no' as an identifier)                           || ($arr[$i+2]['type'] == 'alpha_identifier'                              && strtoupper($arr[$i+2]['data'])=='NO'))                          ) {                            $third_upper_data = strtoupper($arr[$i+2]['data']);                            if ($third_upper_data == 'CASCADE'                            || $third_upper_data == 'RESTRICT') {                                $value = $third_upper_data;                            } elseif ($third_upper_data == 'SET'                              || $third_upper_data == 'NO') {                                if ($arr[$i+3]['type'] == 'alpha_reservedWord') {                                    $value = $third_upper_data . '_' . strtoupper($arr[$i+3]['data']);                                }                            } elseif ($third_upper_data == 'CURRENT_TIMESTAMP') {                                if ($clause == 'on_update'                                && $in_timestamp_options) {                                    $create_table_fields[$current_identifier]['on_update_current_timestamp'] = true;                                    $seen_default = false;                                }                            } else {                                $value = '';                            }                            if (!empty($value)) {                                $foreign[$foreign_key_number][$clause] = $value;                            }                            unset($clause);                        } // endif (isset($clause))                    }                }            } // end of reserved words analysis            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $brackets_level++;                if ($seen_create_table && $brackets_level == 1) {                    $in_create_table_fields = true;                }            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $brackets_level--;                if ($seen_references) {                    $seen_references = false;                }                if ($seen_create_table && $brackets_level == 0) {                    $in_create_table_fields = false;                }            }            if (($arr[$i]['type'] == 'alpha_columnAttrib')) {                $upper_data = strtoupper($arr[$i]['data']);                if ($seen_create_table && $in_create_table_fields) {                    if ($upper_data == 'DEFAULT') {                        $seen_default = true;                        $create_table_fields[$current_identifier]['default_value'] = $arr[$i + 1]['data'];                    }                }            }            /**             * @see @todo 2005-10-16 note: the "or" part here is a workaround for a bug             */            if (($arr[$i]['type'] == 'alpha_columnType') || ($arr[$i]['type'] == 'alpha_functionName' && $seen_create_table)) {                $upper_data = strtoupper($arr[$i]['data']);                if ($seen_create_table && $in_create_table_fields && isset($current_identifier)) {                    $create_table_fields[$current_identifier]['type'] = $upper_data;                    if ($upper_data == 'TIMESTAMP') {                        $arr[$i]['type'] = 'alpha_columnType';                        $in_timestamp_options = true;                    } else {                        $in_timestamp_options = false;                        if ($upper_data == 'CHAR') {                            $arr[$i]['type'] = 'alpha_columnType';                        }                    }                }            }            if ($arr[$i]['type'] == 'quote_backtick' || $arr[$i]['type'] == 'alpha_identifier') {                if ($arr[$i]['type'] == 'quote_backtick') {                    // remove backquotes                    $identifier = PMA_unQuote($arr[$i]['data']);                } else {                    $identifier = $arr[$i]['data'];                }                if ($seen_create_table && $in_create_table_fields) {                    $current_identifier = $identifier;                    // we set this one even for non TIMESTAMP type                    $create_table_fields[$current_identifier]['timestamp_not_null'] = false;                }                if ($seen_constraint) {                    $foreign[$foreign_key_number]['constraint'] = $identifier;                }                if ($seen_foreign && $brackets_level > 0) {                    $foreign[$foreign_key_number]['index_list'][] = $identifier;                }                if ($seen_references) {                    if ($seen_alter && $brackets_level > 0) {                        $foreign[$foreign_key_number]['ref_index_list'][] = $identifier;                        // here, the first bracket level corresponds to the                        // bracket of CREATE TABLE                        // so if we are on level 2, it must be the index list                        // of the foreign key REFERENCES                    } elseif ($brackets_level > 1) {                        $foreign[$foreign_key_number]['ref_index_list'][] = $identifier;                    } elseif ($arr[$i+1]['type'] == 'punct_qualifier') {                        // identifier is `db`.`table`                        // the first pass will pick the db name                        // the next pass will pick the table name                        $foreign[$foreign_key_number]['ref_db_name'] = $identifier;                    } else {                        // identifier is `table`                        $foreign[$foreign_key_number]['ref_table_name'] = $identifier;                    }                }            }        } // end for $i (loop #3)        // Fill the $subresult array        if (isset($create_table_fields)) {            $subresult['create_table_fields'] = $create_table_fields;        }        if (isset($foreign)) {            $subresult['foreign_keys'] = $foreign;        }        if (isset($select_expr_clause)) {            $subresult['select_expr_clause'] = $select_expr_clause;        }        if (isset($from_clause)) {            $subresult['from_clause'] = $from_clause;        }        if (isset($group_by_clause)) {            $subresult['group_by_clause'] = $group_by_clause;        }        if (isset($order_by_clause)) {            $subresult['order_by_clause'] = $order_by_clause;        }        if (isset($having_clause)) {            $subresult['having_clause'] = $having_clause;        }        if (isset($limit_clause)) {            $subresult['limit_clause'] = $limit_clause;        }        if (isset($where_clause)) {            $subresult['where_clause'] = $where_clause;        }        if (isset($unsorted_query) && !empty($unsorted_query)) {            $subresult['unsorted_query'] = $unsorted_query;        }        if (isset($where_clause_identifiers)) {            $subresult['where_clause_identifiers'] = $where_clause_identifiers;        }        if (isset($position_of_first_select)) {            $subresult['position_of_first_select'] = $position_of_first_select;            $subresult['section_before_limit'] = $section_before_limit;            $subresult['section_after_limit'] = $section_after_limit;        }        // They are naughty and didn't have a trailing semi-colon,        // then still handle it properly        if ($subresult['querytype'] != '') {            $result[] = $subresult;        }        return $result;    } // end of the "PMA_SQP_analyze()" function    /**     * Colorizes SQL queries html formatted     *     * @todo check why adding a "\n" after the </span> would cause extra blanks     * to be displayed: SELECT p . person_name     * @param array   The SQL queries html formatted     *     * @return array   The colorized SQL queries     *     * @access public     */    function PMA_SQP_formatHtml_colorize($arr)    {        $i         = PMA_strpos($arr['type'], '_');        $class     = '';        if ($i > 0) {            $class = 'syntax_' . PMA_substr($arr['type'], 0, $i) . ' ';        }        $class     .= 'syntax_' . $arr['type'];        return '<span class="' . $class . '">' . htmlspecialchars($arr['data']) . '</span>';    } // end of the "PMA_SQP_formatHtml_colorize()" function    /**     * Formats SQL queries to html     *     * @param array   The SQL queries     * @param string  mode     * @param integer starting token     * @param integer number of tokens to format, -1 = all     *     * @return string  The formatted SQL queries     *     * @access public     */    function PMA_SQP_formatHtml($arr, $mode='color', $start_token=0,        $number_of_tokens=-1)    {        global $PMA_SQPdata_operators_docs, $PMA_SQPdata_functions_docs;        //DEBUG echo 'in Format<pre>'; print_r($arr); echo '</pre>';        // then check for an array        if (! is_array($arr)) {            return htmlspecialchars($arr);        }        // first check for the SQL parser having hit an error        if (PMA_SQP_isError()) {            return htmlspecialchars($arr['raw']);        }        // else do it properly        switch ($mode) {        case 'color':            $str                                = '<span class="syntax">';            $html_line_break                    = '<br />';            $docu                               = true;            break;        case 'query_only':            $str                                = '';            $html_line_break                    = "\n";            $docu                               = false;            break;        case 'text':            $str                                = '';            $html_line_break                    = '<br />';            $docu                               = true;            break;        } // end switch        // inner_sql is a span that exists for all cases, except query_only        // of $cfg['SQP']['fmtType'] to make possible a replacement        // for inline editing        if ($mode!='query_only') {            $str .= '<span class="inner_sql">';        }        $close_docu_link = false;        $indent                                     = 0;        $bracketlevel                               = 0;        $functionlevel                              = 0;        $infunction                                 = false;        $space_punct_listsep                        = ' ';        $space_punct_listsep_function_name          = ' ';        // $space_alpha_reserved_word = '<br />'."\n";        $space_alpha_reserved_word                  = ' ';        $keywords_with_brackets_1before            = array(            'INDEX' => 1,            'KEY' => 1,            'ON' => 1,            'USING' => 1        );        $keywords_with_brackets_2before            = array(            'IGNORE' => 1,            'INDEX' => 1,            'INTO' => 1,            'KEY' => 1,            'PRIMARY' => 1,            'PROCEDURE' => 1,            'REFERENCES' => 1,            'UNIQUE' => 1,            'USE' => 1        );        // These reserved words do NOT get a newline placed near them.        $keywords_no_newline               = array(            'AS' => 1,            'ASC' => 1,            'DESC' => 1,            'DISTINCT' => 1,            'DUPLICATE' => 1,            'HOUR' => 1,            'INTERVAL' => 1,            'IS' => 1,            'LIKE' => 1,            'NOT' => 1,            'NULL' => 1,            'ON' => 1,            'REGEXP' => 1        );        // These reserved words introduce a privilege list        $keywords_priv_list                = array(            'GRANT' => 1,            'REVOKE' => 1        );        if ($number_of_tokens == -1) {            $number_of_tokens = $arr['len'];        }        $typearr   = array();        if ($number_of_tokens >= 0) {            $typearr[0] = '';            $typearr[1] = '';            $typearr[2] = '';            $typearr[3] = $arr[$start_token]['type'];        }        $in_priv_list = false;        for ($i = $start_token; $i < $number_of_tokens; $i++) {            // DEBUG echo "Loop format <strong>" . $arr[$i]['data'] . "</strong> " . $arr[$i]['type'] . "<br />";            $before = '';            $after  = '';            // array_shift($typearr);            /*            0 prev2            1 prev            2 current            3 next            */            if (($i + 1) < $number_of_tokens) {                $typearr[4] = $arr[$i + 1]['type'];            } else {                $typearr[4] = '';            }            for ($j=0; $j<4; $j++) {                $typearr[$j] = $typearr[$j + 1];            }            switch ($typearr[2]) {            case 'alpha_bitfield_constant_introducer':                $before     = ' ';                $after      = '';                break;            case 'white_newline':                $before     = '';                break;            case 'punct_bracket_open_round':                $bracketlevel++;                $infunction = false;                // Make sure this array is sorted!                if (($typearr[1] == 'alpha_functionName') || ($typearr[1] == 'alpha_columnType') || ($typearr[1] == 'punct')                    || ($typearr[3] == 'digit_integer') || ($typearr[3] == 'digit_hex') || ($typearr[3] == 'digit_float')                    || (($typearr[0] == 'alpha_reservedWord')                        && isset($keywords_with_brackets_2before[strtoupper($arr[$i - 2]['data'])]))                    || (($typearr[1] == 'alpha_reservedWord')                        && isset($keywords_with_brackets_1before[strtoupper($arr[$i - 1]['data'])]))                    ) {                    $functionlevel++;                    $infunction = true;                    $after      .= ' ';                } else {                    $indent++;                    $after      .= ($mode != 'query_only' ? '<div class="syntax_indent' . $indent . '">' : ' ');                }                break;            case 'alpha_identifier':                if (($typearr[1] == 'punct_qualifier') || ($typearr[3] == 'punct_qualifier')) {                    $after      = '';                    $before     = '';                }                // for example SELECT 1 somealias                if ($typearr[1] == 'digit_integer') {                    $before     = ' ';                }                if (($typearr[3] == 'alpha_columnType') || ($typearr[3] == 'alpha_identifier')) {                    $after      .= ' ';                }                break;            case 'punct_user':            case 'punct_qualifier':                $before         = '';                $after          = '';                break;            case 'punct_listsep':                if ($infunction == true) {                    $after      .= $space_punct_listsep_function_name;                } else {                    $after      .= $space_punct_listsep;                }                break;            case 'punct_queryend':                if (($typearr[3] != 'comment_mysql') && ($typearr[3] != 'comment_ansi') && $typearr[3] != 'comment_c') {                    $after     .= $html_line_break;                    $after     .= $html_line_break;                }                $space_punct_listsep               = ' ';                $space_punct_listsep_function_name = ' ';                $space_alpha_reserved_word         = ' ';                $in_priv_list                      = false;                break;            case 'comment_mysql':            case 'comment_ansi':                $after         .= $html_line_break;                break;            case 'punct':                $before         .= ' ';                if ($docu && isset($PMA_SQPdata_operators_docs[$arr[$i]['data']]) &&                        ($arr[$i]['data'] != '*' || in_array($arr[$i]['type'], array('digit_integer','digit_float','digit_hex')))) {                    $before .= PMA_showMySQLDocu(                        'functions',                        $PMA_SQPdata_operators_docs[$arr[$i]['data']]['link'],                        false,                        $PMA_SQPdata_operators_docs[$arr[$i]['data']]['anchor'],                        true);                    $after .= '</a>';                }                // workaround for                // select * from mytable limit 0,-1                // (a side effect of this workaround is that                // select 20 - 9                // becomes                // select 20 -9                // )                if ($typearr[3] != 'digit_integer') {                    $after        .= ' ';                }                break;            case 'punct_bracket_close_round':                // only close bracket level when it was opened before                if ($bracketlevel > 0) {                    $bracketlevel--;                    if ($infunction == true) {                        $functionlevel--;                        $after     .= ' ';                        $before    .= ' ';                    } else {                        $indent--;                        $before    .= ($mode != 'query_only' ? '</div>' : ' ');                    }                    $infunction    = ($functionlevel > 0) ? true : false;                }                break;            case 'alpha_columnType':                if ($docu) {                    switch ($arr[$i]['data']) {                    case 'tinyint':                    case 'smallint':                    case 'mediumint':                    case 'int':                    case 'bigint':                    case 'decimal':                    case 'float':                    case 'double':                    case 'real':                    case 'bit':                    case 'boolean':                    case 'serial':                        $before .= PMA_showMySQLDocu('data-types', 'numeric-types', false, '', true);                        $after = '</a>' . $after;                        break;                    case 'date':                    case 'datetime':                    case 'timestamp':                    case 'time':                    case 'year':                        $before .= PMA_showMySQLDocu('data-types', 'date-and-time-types', false, '', true);                        $after = '</a>' . $after;                        break;                    case 'char':                    case 'varchar':                    case 'tinytext':                    case 'text':                    case 'mediumtext':                    case 'longtext':                    case 'binary':                    case 'varbinary':                    case 'tinyblob':                    case 'mediumblob':                    case 'blob':                    case 'longblob':                    case 'enum':                    case 'set':                        $before .= PMA_showMySQLDocu('data-types', 'string-types', false, '', true);                        $after = '</a>' . $after;                        break;                    }                }                if ($typearr[3] == 'alpha_columnAttrib') {                    $after     .= ' ';                }                if ($typearr[1] == 'alpha_columnType') {                    $before    .= ' ';                }                break;            case 'alpha_columnAttrib':                // ALTER TABLE tbl_name AUTO_INCREMENT = 1                // COLLATE LATIN1_GENERAL_CI DEFAULT                if ($typearr[1] == 'alpha_identifier' || $typearr[1] == 'alpha_charset') {                    $before .= ' ';                }                if (($typearr[3] == 'alpha_columnAttrib') || ($typearr[3] == 'quote_single') || ($typearr[3] == 'digit_integer')) {                    $after     .= ' ';                }                // workaround for                // AUTO_INCREMENT = 31DEFAULT_CHARSET = utf-8                if ($typearr[2] == 'alpha_columnAttrib' && $typearr[3] == 'alpha_reservedWord') {                    $before .= ' ';                }                // workaround for                // select * from mysql.user where binary user="root"                // binary is marked as alpha_columnAttrib                // but should be marked as a reserved word                if (strtoupper($arr[$i]['data']) == 'BINARY'                  && $typearr[3] == 'alpha_identifier') {                    $after     .= ' ';                }                break;            case 'alpha_functionName':                $funcname = strtoupper($arr[$i]['data']);                if ($docu && isset($PMA_SQPdata_functions_docs[$funcname])) {                    $before .= PMA_showMySQLDocu(                        'functions',                        $PMA_SQPdata_functions_docs[$funcname]['link'],                        false,                        $PMA_SQPdata_functions_docs[$funcname]['anchor'],                        true);                    $after .= '</a>';                }                break;            case 'alpha_reservedWord':                // do not uppercase the reserved word if we are calling                // this function in query_only mode, because we need                // the original query (otherwise we get problems with                // semi-reserved words like "storage" which is legal                // as an identifier name)                if ($mode != 'query_only') {                    $arr[$i]['data'] = strtoupper($arr[$i]['data']);                }                if ((($typearr[1] != 'alpha_reservedWord')                    || (($typearr[1] == 'alpha_reservedWord')                        && isset($keywords_no_newline[strtoupper($arr[$i - 1]['data'])])))                    && ($typearr[1] != 'punct_level_plus')                    && (!isset($keywords_no_newline[$arr[$i]['data']]))) {                    // do not put a space before the first token, because                    // we use a lot of pattern matching checking for the                    // first reserved word at beginning of query                    // so do not put a newline before                    //                    // also we must not be inside a privilege list                    if ($i > 0) {                        // the alpha_identifier exception is there to                        // catch cases like                        // GRANT SELECT ON mydb.mytable TO myuser@localhost                        // (else, we get mydb.mytableTO)                        //                        // the quote_single exception is there to                        // catch cases like                        // GRANT ... TO 'marc'@'domain.com' IDENTIFIED...                        /**                         * @todo fix all cases and find why this happens                         */                        if (!$in_priv_list || $typearr[1] == 'alpha_identifier' || $typearr[1] == 'quote_single' || $typearr[1] == 'white_newline') {                            $before    .= $space_alpha_reserved_word;                        }                    } else {                        // on first keyword, check if it introduces a                        // privilege list                        if (isset($keywords_priv_list[$arr[$i]['data']])) {                            $in_priv_list = true;                        }                    }                } else {                    $before    .= ' ';                }                switch ($arr[$i]['data']) {                case 'CREATE':                case 'ALTER':                case 'DROP':                case 'RENAME';                case 'TRUNCATE':                case 'ANALYZE':                case 'ANALYSE':                case 'OPTIMIZE':                    if ($docu) {                        switch ($arr[$i + 1]['data']) {                        case 'EVENT':                        case 'TABLE':                        case 'TABLESPACE':                        case 'FUNCTION':                        case 'INDEX':                        case 'PROCEDURE':                        case 'TRIGGER':                        case 'SERVER':                        case 'DATABASE':                        case 'VIEW':                            $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'] . '_' . $arr[$i + 1]['data'], false, '', true);                            $close_docu_link = true;                            break;                        }                        if ($arr[$i + 1]['data'] == 'LOGFILE' && $arr[$i + 2]['data'] == 'GROUP') {                            $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'] . '_LOGFILE_GROUP', false, '', true);                            $close_docu_link = true;                        }                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'EVENT':                case 'TABLESPACE':                case 'TABLE':                case 'FUNCTION':                case 'INDEX':                case 'PROCEDURE':                case 'SERVER':                case 'TRIGGER':                case 'DATABASE':                case 'VIEW':                case 'GROUP':                    if ($close_docu_link) {                        $after = '</a>' . $after;                        $close_docu_link = false;                    }                    break;                case 'SET':                    if ($docu && ($i == 0 || $arr[$i - 1]['data'] != 'CHARACTER')) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'EXPLAIN':                case 'DESCRIBE':                case 'DELETE':                case 'SHOW':                case 'UPDATE':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'INSERT':                case 'REPLACE':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = $html_line_break;                    }                    break;                case 'VALUES':                    $space_punct_listsep       = ' ';                    $space_alpha_reserved_word = $html_line_break;                    break;                case 'SELECT':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', 'SELECT', false, '', true);                        $after = '</a>' . $after;                    }                    $space_punct_listsep       = ' ';                    $space_alpha_reserved_word = $html_line_break;                    break;                case 'CALL':                case 'DO':                case 'HANDLER':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    break;                default:                    if ($close_docu_link && in_array($arr[$i]['data'], array('LIKE', 'NOT', 'IN', 'REGEXP', 'NULL'))) {                        $after .= '</a>';                        $close_docu_link = false;                    } else if ($docu && isset($PMA_SQPdata_functions_docs[$arr[$i]['data']])) {                        /* Handle multi word statements first */                        if (isset($typearr[4]) && $typearr[4] == 'alpha_reservedWord' && $typearr[3] == 'alpha_reservedWord' && isset($PMA_SQPdata_functions_docs[strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'] . '_' . $arr[$i + 2]['data'])])) {                            $tempname = strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'] . '_' . $arr[$i + 2]['data']);                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$tempname]['link'], false, $PMA_SQPdata_functions_docs[$tempname]['anchor'], true);                            $close_docu_link = true;                        } else if (isset($typearr[3]) && $typearr[3] == 'alpha_reservedWord' && isset($PMA_SQPdata_functions_docs[strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'])])) {                            $tempname = strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data']);                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$tempname]['link'], false, $PMA_SQPdata_functions_docs[$tempname]['anchor'], true);                            $close_docu_link = true;                        } else {                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$arr[$i]['data']]['link'], false, $PMA_SQPdata_functions_docs[$arr[$i]['data']]['anchor'], true);                            $after .= '</a>';                        }                    }                    break;                } // end switch ($arr[$i]['data'])                $after         .= ' ';                break;            case 'digit_integer':            case 'digit_float':            case 'digit_hex':                /**                 * @todo could there be other types preceding a digit?                 */                if ($typearr[1] == 'alpha_reservedWord') {                    $after .= ' ';                }                if ($infunction && $typearr[3] == 'punct_bracket_close_round') {                    $after     .= ' ';                }                if ($typearr[1] == 'alpha_columnAttrib') {                    $before .= ' ';                }                break;            case 'alpha_variable':                $after      = ' ';                break;            case 'quote_double':            case 'quote_single':                // workaround: for the query                // REVOKE SELECT ON `base2\_db`.* FROM 'user'@'%'                // the @ is incorrectly marked as alpha_variable                // in the parser, and here, the '%' gets a blank before,                // which is a syntax error                if ($typearr[1] != 'punct_user' && $typearr[1] != 'alpha_bitfield_constant_introducer') {                    $before        .= ' ';                }                if ($infunction && $typearr[3] == 'punct_bracket_close_round') {                    $after     .= ' ';                }                break;            case 'quote_backtick':                // here we check for punct_user to handle correctly                // DEFINER = `username`@`%`                // where @ is the punct_user and `%` is the quote_backtick                if ($typearr[3] != 'punct_qualifier' && $typearr[3] != 'alpha_variable' && $typearr[3] != 'punct_user') {                    $after     .= ' ';                }                if ($typearr[1] != 'punct_qualifier' && $typearr[1] != 'alpha_variable' && $typearr[1] != 'punct_user') {                    $before    .= ' ';                }                break;            default:                break;            } // end switch ($typearr[2])            /*            if ($typearr[3] != 'punct_qualifier') {                $after             .= ' ';            }            $after                 .= "\n";            */            $str .= $before;            if ($mode=='color') {                $str .= PMA_SQP_formatHTML_colorize($arr[$i]);            } elseif ($mode == 'text') {                $str .= htmlspecialchars($arr[$i]['data']);            } else {                $str .= $arr[$i]['data'];            }            $str .= $after;        } // end for        // close unclosed indent levels        while ($indent > 0) {            $indent--;            $str .= ($mode != 'query_only' ? '</div>' : ' ');        }        /* End possibly unclosed documentation link */        if ($close_docu_link) {            $str .= '</a>';            $close_docu_link = false;        }        if ($mode!='query_only') {            // close inner_sql span                $str .= '</span>';        }        if ($mode=='color') {            // close syntax span            $str .= '</span>';        }        return $str;    } // end of the "PMA_SQP_formatHtml()" function}/** * Builds a CSS rule used for html formatted SQL queries * * @param string  The class name * @param string  The property name * @param string  The property value * * @return string  The CSS rule * * @access public * * @see    PMA_SQP_buildCssData() */function PMA_SQP_buildCssRule($classname, $property, $value){    $str     = '.' . $classname . ' {';    if ($value != '') {        $str .= $property . ': ' . $value . ';';    }    $str     .= '}' . "\n";    return $str;} // end of the "PMA_SQP_buildCssRule()" function/** * Builds CSS rules used for html formatted SQL queries * * @return string  The CSS rules set * * @access public * * @global array   The current PMA configuration * * @see    PMA_SQP_buildCssRule() */function PMA_SQP_buildCssData(){    global $cfg;    $css_string     = '';    foreach ($cfg['SQP']['fmtColor'] AS $key => $col) {        $css_string .= PMA_SQP_buildCssRule('syntax_' . $key, 'color', $col);    }    for ($i = 0; $i < 8; $i++) {        $css_string .= PMA_SQP_buildCssRule(            'syntax_indent' . $i, 'margin-left',            ($i * $cfg['SQP']['fmtInd']) . $cfg['SQP']['fmtIndUnit']);    }    return $css_string;} // end of the "PMA_SQP_buildCssData()" functionif (! defined('PMA_MINIMUM_COMMON')) {    /**     * Gets SQL queries with no format     *     * @param array   The SQL queries list     *     * @return string  The SQL queries with no format     *     * @access public     */    function PMA_SQP_formatNone($arr)    {        $formatted_sql = htmlspecialchars($arr['raw']);        $formatted_sql = preg_replace(            "@((\015\012)|(\015)|(\012)){3,}@",            "\n\n",            $formatted_sql);        return $formatted_sql;    } // end of the "PMA_SQP_formatNone()" function} // end if: minimal common.lib needed??>
