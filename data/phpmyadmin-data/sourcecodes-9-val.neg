<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Wrappers for Drizzle extension classes * * Drizzle extension exposes libdrizzle functions and requires user to have it in mind while using them. * This wrapper is not complete and hides a lot of original functionality, but allows for easy usage * of the drizzle PHP extension. * * @package PhpMyAdmin-DBI-Drizzle */// TODO: drizzle module segfaults while freeing resources, often. This allows at least for some developmentfunction _drizzle_shutdown_flush() {    flush();}register_shutdown_function('_drizzle_shutdown_flush');function _dlog_argstr($args){    $r = array();    foreach ($args as $arg) {        if (is_object($arg)) {            $r[] = get_class($arg);        } elseif (is_bool($arg)) {            $r[] = $arg ? 'true' : 'false';        } elseif (is_null($arg)) {            $r[] = 'null';        } else {            $r[] = $arg;        }    }    return implode(', ', $r);}function _dlog($end = false){    /*    static $fp = null;    if (!$fp) {        $fp = fopen('./drizzle_log.log', 'a');        flock($fp, LOCK_EX);        fwrite($fp, "\r\n[" . date('H:i:s') . "]\t" . $_SERVER['REQUEST_URI'] . "\r\n");        register_shutdown_function(function() use ($fp) {            fwrite($fp, '[' . date('H:i:s') . "]\tEND\r\n\r\n");        });    }    if ($end) {        fwrite($fp, '[' . date('H:i:s') . "]\tok\r\n");    } else {        $bt = debug_backtrace(true);        $caller = (isset($bt[1]['class']) ? $bt[1]['class'] . '::' : '') . $bt[1]['function'];        if ($bt[1]['function'] == '__call') {            $caller .= '^' . $bt[1]['args'][0];            $args = _dlog_argstr($bt[1]['args'][1]);        } else {            $args = _dlog_argstr($bt[1]['args']);        }        fwrite($fp, '[' . date('H:i:s') . "]\t" . $caller . "\t" . $args . "\r\n");        for ($i = 2; $i <= count($bt)-1; $i++) {            if (!isset($bt[$i])) {                break;            }            $caller = (isset($bt[$i]['class']) ? $bt[$i]['class'] . '::' : '') . $bt[$i]['function'];            $caller .= ' (' . $bt[$i]['file'] . ':' . $bt[$i]['line'] .  ')';            fwrite($fp, str_repeat(' ', 20) . $caller . "\r\n");        }    }    //*/}/** * Wrapper for Drizzle class */class PMA_Drizzle extends Drizzle{    /**     * Fetch mode: result rows contain column names     */    const FETCH_ASSOC = 1;    /**     * Fetch mode: result rows contain only numeric indices     */    const FETCH_NUM = 2;    /**     * Fetch mode: result rows have both column names and numeric indices     */    const FETCH_BOTH = 3;    /**     * Result buffering: entire result set is buffered upon execution     */    const BUFFER_RESULT = 1;    /**     * Result buffering: buffering occurs only on row level     */    const BUFFER_ROW = 2;    /**     * Constructor     */    public function __construct()    {_dlog();        parent::__construct();    }    /**     * Creates a new database conection using TCP     *     * @param $host     * @param $port     * @param $user     * @param $password     * @param $db     * @param $options     * @return PMA_DrizzleCon     */    public function addTcp($host, $port, $user, $password, $db, $options)    {_dlog();        $dcon = parent::addTcp($host, $port, $user, $password, $db, $options);        return $dcon instanceof DrizzleCon            ? new PMA_DrizzleCon($dcon)            : $dcon;    }    /**     * Creates a new connection using unix domain socket     *      * @param $uds     * @param $user     * @param $password     * @param $db     * @param $options     * @return PMA_DrizzleCon     */    public function addUds($uds, $user, $password, $db, $options)    {_dlog();        $dcon = parent::addUds($uds, $user, $password, $db, $options);        return $dcon instanceof DrizzleCon            ? new PMA_DrizzleCon($dcon)            : $dcon;    }}/** * Wrapper around DrizzleCon class * * Its main task is to wrap results with PMA_DrizzleResult class */class PMA_DrizzleCon{    /**     * Instance of DrizzleCon class     * @var DrizzleCon     */    private $dcon;    /**     * Result of the most recent query     * @var PMA_DrizzleResult     */    private $lastResult;    /**     * Constructor     *     * @param DrizzleCon $dcon     */    public function __construct(DrizzleCon $dcon)    {_dlog();        $this->dcon = $dcon;    }    /**     * Executes given query. Opens database connection if not already done.     *     * @param string $query     * @param int    $bufferMode  PMA_Drizzle::BUFFER_RESULT, PMA_Drizzle::BUFFER_ROW     * @param int    $fetchMode   PMA_Drizzle::FETCH_ASSOC, PMA_Drizzle::FETCH_NUM or PMA_Drizzle::FETCH_BOTH     * @return PMA_DrizzleResult     */    public function query($query, $bufferMode = PMA_Drizzle::BUFFER_RESULT, $fetchMode = PMA_Drizzle::FETCH_ASSOC)    {_dlog();        $result = $this->dcon->query($query);        if ($result instanceof DrizzleResult) {    _dlog(true);            $this->lastResult = new PMA_DrizzleResult($result, $bufferMode, $fetchMode);            return $this->lastResult;        }        return $result;    }    /**     * Returns the number of rows affected by last query     *     * @return int|false     */    public function affectedRows()    {        return $this->lastResult            ? $this->lastResult->affectedRows()            : false;    }    /**     * Pass calls of undefined methods to DrizzleCon object     *      * @param $method     * @param $args     * @return mixed     */    public function __call($method, $args)    {_dlog();        return call_user_func_array(array($this->dcon, $method), $args);    }    /**     * Returns original Drizzle connection object     *     * @return DrizzleCon     */    public function getConnectionObject()    {_dlog();        return $this->dcon;    }}/** * Wrapper around DrizzleResult. Allows for reading result rows as an associative array * and hides complexity behind buffering. */class PMA_DrizzleResult{    /**     * Instamce of DrizzleResult class     * @var DrizzleResult     */    private $dresult;    /**     * Fetch mode     * @var int     */    private $fetchMode;    /**     * Buffering mode     * @var int     */    private $bufferMode;    /**     * Cached column data     * @var DrizzleColumn[]     */    private $columns = null;    /**     * Cached column names     * @var string[]     */    private $columnNames = null;    /**     * Constructor     *     * @param DrizzleResult $dresult     * @param int           $bufferMode     * @param int           $fetchMode     */    public function __construct(DrizzleResult $dresult, $bufferMode, $fetchMode)    {_dlog();        $this->dresult = $dresult;        $this->bufferMode = $bufferMode;        $this->fetchMode = $fetchMode;        if ($this->bufferMode == PMA_Drizzle::BUFFER_RESULT) {            $this->dresult->buffer();        }    }    /**     * Sets fetch mode     *     * @param int $fetchMode     */    public function setFetchMode($fetchMode)    {_dlog();        $this->fetchMode = $fetchMode;    }    /**     * Reads information about columns contained in current result set into {@see $columns} and {@see $columnNames} arrays     */    private function _readColumns()    {_dlog();        $this->columns = array();        $this->columnNames = array();        if ($this->bufferMode == PMA_Drizzle::BUFFER_RESULT) {            while (($column = $this->dresult->columnNext()) !== null) {                $this->columns[] = $column;                $this->columnNames[] = $column->name();            }        } else {            while (($column = $this->dresult->columnRead()) !== null) {                $this->columns[] = $column;                $this->columnNames[] = $column->name();            }        }    }    /**     * Returns columns in current result     *     * @return DrizzleColumn[]     */    public function getColumns()    {_dlog();        if (!$this->columns) {            $this->_readColumns();        }        return $this->columns;    }    /**     * Returns number if columns in result     *     * @return int     */    public function numColumns()    {_dlog();        return $this->dresult->columnCount();    }    /**     * Transforms result row to conform to current fetch mode     *     * @param mixed &$row     * @param int   $fetchMode     */    private function _transformResultRow(&$row, $fetchMode)    {        if (!$row) {            return;        }        switch ($fetchMode) {            case PMA_Drizzle::FETCH_ASSOC:                $row = array_combine($this->columnNames, $row);                break;            case PMA_Drizzle::FETCH_BOTH:                $length = count($row);                for ($i = 0; $i < $length; $i++) {                    $row[$this->columnNames[$i]] = $row[$i];                }                break;            default:                break;        }    }    /**     * Fetches next for from this result set     *     * @param int $fetchMode  fetch mode to use, if none given the default one is used     * @return array|null     */    public function fetchRow($fetchMode = null)    {_dlog();        // read column names on first fetch, only buffered results allow for reading it later        if (!$this->columns) {            $this->_readColumns();        }        if ($fetchMode === null) {            $fetchMode = $this->fetchMode;        }        $row = null;        switch ($this->bufferMode) {            case PMA_Drizzle::BUFFER_RESULT:                $row = $this->dresult->rowNext();                break;            case PMA_Drizzle::BUFFER_ROW:                $row = $this->dresult->rowBuffer();                break;        }        $this->_transformResultRow($row, $fetchMode);        return $row;    }    /**     * Adjusts the result pointer to an arbitrary row in buffered result     *     * @param $row_index     * @return bool     */    public function seek($row_index)    {_dlog();        if ($this->bufferMode != PMA_Drizzle::BUFFER_RESULT) {            trigger_error("Can't seek in an unbuffered result set", E_USER_WARNING);            return false;        }        // rowSeek always returns NULL (drizzle extension v.0.5, API v.7)        if ($row_index >= 0 && $row_index < $this->dresult->rowCount()) {            $this->dresult->rowSeek($row_index);            return true;        }        return false;    }    /**     * Returns the number of rows in buffered result set     *     * @return int|false     */    public function numRows()    {_dlog();        if ($this->bufferMode != PMA_Drizzle::BUFFER_RESULT) {            trigger_error("Can't count rows in an unbuffered result set", E_USER_WARNING);            return false;        }        return $this->dresult->rowCount();    }    /**     * Returns the number of rows affected by query     *     * @return int|false     */    public function affectedRows()    {_dlog();        return $this->dresult->affectedRows();    }    /**     * Frees resources taken by this result     */    public function free()    {_dlog();        unset($this->columns);        unset($this->columnNames);        drizzle_result_free($this->dresult);        unset($this->dresult);    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * A simple rules engine, that parses and executes the rules in advisory_rules.txt. Adjusted to phpMyAdmin * * * @package PhpMyAdmin */class Advisor{    var $variables;    var $parseResult;    var $runResult;    function run()    {        // HowTo: A simple Advisory system in 3 easy steps.        // Step 1: Get some variables to evaluate on        $this->variables = array_merge(            PMA_DBI_fetch_result('SHOW GLOBAL STATUS', 0, 1),            PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES', 0, 1)        );        if (PMA_DRIZZLE) {            $this->variables = array_merge(                $this->variables,                PMA_DBI_fetch_result(                    "SELECT concat('Com_', variable_name), variable_value                    FROM data_dictionary.GLOBAL_STATEMENTS", 0, 1                )            );        }        // Add total memory to variables as well        include_once 'libraries/sysinfo.lib.php';        $sysinfo = getSysInfo();        $memory  = $sysinfo->memory();        $this->variables['system_memory'] = $memory['MemTotal'];        // Step 2: Read and parse the list of rules        $this->parseResult = $this->parseRulesFile();        // Step 3: Feed the variables to the rules and let them fire. Sets $runResult        $this->runRules();        return array(            'parse' => array('errors' => $this->parseResult['errors']),            'run'   => $this->runResult        );    }    function runRules()    {        $this->runResult = array(            'fired' => array(),            'notfired' => array(),            'unchecked'=> array(),            'errors' => array()        );        foreach ($this->parseResult['rules'] as $rule) {            $this->variables['value'] = 0;            $precond = true;            if (isset($rule['precondition'])) {                try {                     $precond = $this->ruleExprEvaluate($rule['precondition']);                } catch (Exception $e) {                    $this->runResult['errors'][] = 'Failed evaluating precondition for rule \''                        . $rule['name'] . '\'. PHP threw following error: '                        . $e->getMessage();                    continue;                }            }            if (! $precond) {                $this->addRule('unchecked', $rule);            } else {                try {                    $value = $this->ruleExprEvaluate($rule['formula']);                } catch(Exception $e) {                    $this->runResult['errors'][] = 'Failed calculating value for rule \''                        . $rule['name'] . '\'. PHP threw following error: '                        . $e->getMessage();                    continue;                }                $this->variables['value'] = $value;                try {                    if ($this->ruleExprEvaluate($rule['test'])) {                        $this->addRule('fired', $rule);                    } else {                        $this->addRule('notfired', $rule);                    }                }  catch(Exception $e) {                    $this->runResult['errors'][] = 'Failed running test for rule \''                        . $rule['name'] . '\'. PHP threw following error: '                        . $e->getMessage();                }            }        }        return true;    }    /**     * Escapes percent string to be used in format string.     *     * @param string $str string to escape     *     * @return string     */    function escapePercent($str)    {        return preg_replace('/%( |,|\.|$|\(|\)|<|>)/', '%%\1', $str);    }    /**     * Wrapper function for translating.     *     * @param string $str     * @param mixed  $param     *     * @return string     */    function translate($str, $param = null)    {        if (is_null($param)) {            return sprintf(_gettext(Advisor::escapePercent($str)));        } else {            $printf = 'sprintf("' . _gettext(Advisor::escapePercent($str)) . '",';            return $this->ruleExprEvaluate(                $printf . $param . ')',                strlen($printf)            );        }    }    /**     * Splits justification to text and formula.     *     * @param string $rule     *     * @return array     */    function splitJustification($rule)    {        $jst = preg_split('/\s*\|\s*/', $rule['justification'], 2);        if (count($jst) > 1) {            return array($jst[0], $jst[1]);        }        return array($rule['justification']);    }    // Adds a rule to the result list    function addRule($type, $rule)    {        switch($type) {        case 'notfired':        case 'fired':            $jst = Advisor::splitJustification($rule);            if (count($jst) > 1) {                try {                    /* Translate */                    $str = $this->translate($jst[0], $jst[1]);                } catch (Exception $e) {                    $this->runResult['errors'][] = sprintf(                        __('Failed formatting string for rule \'%s\'. PHP threw following error: %s'),                        $rule['name'],                        $e->getMessage()                    );                    return;                }                $rule['justification'] = $str;            } else {                $rule['justification'] = $this->translate($rule['justification']);            }            $rule['name'] = $this->translate($rule['name']);            $rule['issue'] = $this->translate($rule['issue']);            // Replaces {server_variable} with 'server_variable'            // linking to server_variables.php            $rule['recommendation'] = preg_replace(                '/\{([a-z_0-9]+)\}/Ui',                '<a href="server_variables.php?' . PMA_generate_common_url() . '#filter=\1">\1</a>',                $this->translate($rule['recommendation'])            );            // Replaces external Links with PMA_linkURL() generated links            $rule['recommendation'] = preg_replace(                '#href=("|\')(https?://[^\1]+)\1#ie',                '\'href="\' . PMA_linkURL("\2") . \'"\'',                $rule['recommendation']            );            break;        }        $this->runResult[$type][] = $rule;    }    private function ruleExprEvaluate_var1($matches)    {        // '/fired\s*\(\s*(\'|")(.*)\1\s*\)/Uie'        return '1'; //isset($this->runResult[\'fired\']    }    private function ruleExprEvaluate_var2($matches)    {        // '/\b(\w+)\b/e'        return isset($this->variables[$matches[1]])            ? (is_numeric($this->variables[$matches[1]])                ? $this->variables[$matches[1]]                : '"'.$this->variables[$matches[1]].'"')            : $matches[1];    }    // Runs a code expression, replacing variable names with their respective values    // ignoreUntil: if > 0, it doesn't replace any variables until that string    // position, but still evaluates the whole expr    function ruleExprEvaluate($expr, $ignoreUntil = 0)    {        if ($ignoreUntil > 0) {            $exprIgnore = substr($expr, 0, $ignoreUntil);            $expr = substr($expr, $ignoreUntil);        }        $expr = preg_replace_callback(            '/fired\s*\(\s*(\'|")(.*)\1\s*\)/Ui',            array($this, 'ruleExprEvaluate_var1'),            $expr        );        $expr = preg_replace_callback(            '/\b(\w+)\b/',            array($this, 'ruleExprEvaluate_var2'),            $expr        );        if ($ignoreUntil > 0) {            $expr = $exprIgnore . $expr;        }        $value = 0;        $err = 0;        ob_start();        eval('$value = '.$expr.';');        $err = ob_get_contents();        ob_end_clean();        if ($err) {            throw new Exception(                strip_tags($err) . '<br />Executed code: $value = ' . $expr . ';'            );        }        return $value;    }    // Reads the rule file into an array, throwing errors messages on syntax errors    function parseRulesFile()    {        $file = file('libraries/advisory_rules.txt');        $errors = array();        $rules = array();        $ruleSyntax = array('name', 'formula', 'test', 'issue', 'recommendation', 'justification');        $numRules = count($ruleSyntax);        $numLines = count($file);        $j = -1;        $ruleLine = -1;        for ($i = 0; $i<$numLines; $i++) {            $line = $file[$i];            if ($line[0] == '#' || $line[0] == "\n") {                continue;            }            // Reading new rule            if (substr($line, 0, 4) == 'rule') {                if ($ruleLine > 0) {                    $errors[] = 'Invalid rule declaration on line ' . ($i+1)                        . ', expected line ' . $ruleSyntax[$ruleLine++]                        . ' of previous rule' ;                    continue;                }                if (preg_match("/rule\s'(.*)'( \[(.*)\])?$/", $line, $match)) {                    $ruleLine = 1;                    $j++;                    $rules[$j] = array( 'name' => $match[1]);                    if (isset($match[3])) {                        $rules[$j]['precondition'] = $match[3];                    }                } else {                    $errors[] = 'Invalid rule declaration on line '.($i+1);                }                continue;            } else {                if ($ruleLine == -1) {                    $errors[] = 'Unexpected characters on line '.($i+1);                }            }            // Reading rule lines            if ($ruleLine > 0) {                if (!isset($line[0])) {                    continue; // Empty lines are ok                }                // Non tabbed lines are not                if ($line[0] != "\t") {                    $errors[] = 'Unexpected character on line '.($i+1).'                        . Expected tab, but found \''.$line[0].'\'';                    continue;                }                $rules[$j][$ruleSyntax[$ruleLine++]] = chop(substr($line, 1));            }            // Rule complete            if ($ruleLine == $numRules) {                $ruleLine = -1;            }        }        return array('rules' => $rules, 'errors' => $errors);    }}function PMA_bytime($num, $precision){    $per = '';    if ($num >= 1) { // per second        $per = __('per second');    } elseif ($num*60 >= 1) { // per minute        $num = $num*60;        $per = __('per minute');    } elseif ($num*60*60 >=1 ) { // per hour        $num = $num*60*60;        $per = __('per hour');    } else {        $num = $num*60*60*24;        $per = __('per day');    }    $num = round($num, $precision);    if ($num == 0) {        $num = '<' . pow(10, -$precision);    }    return "$num $per";}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_image_jpeg__inline_info(){    return array(        'info' => __('Displays a clickable thumbnail. The options are the maximum width and height in pixels. The original aspect ratio is preserved.'),        );}/** * */function PMA_transformation_image_jpeg__inline($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    if (PMA_IS_GD2) {        $transform_options = array ('string' => '<a href="transformation_wrapper.php' . $options['wrapper_link'] . '" target="_blank"><img src="transformation_wrapper.php' . $options['wrapper_link'] . '&amp;resize=jpeg&amp;newWidth=' . (isset($options[0]) ? $options[0] : '100') . '&amp;newHeight=' . (isset($options[1]) ? $options[1] : 100) . '" alt="[__BUFFER__]" border="0" /></a>');    } else {        $transform_options = array ('string' => '<img src="transformation_wrapper.php' . $options['wrapper_link'] . '" alt="[__BUFFER__]" width="320" height="240" />');    }    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_image_png__inline_info(){    return array(        'info' => __('Displays a clickable thumbnail. The options are the maximum width and height in pixels. The original aspect ratio is preserved.'),        );}/** * */function PMA_transformation_image_png__inline($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    if (PMA_IS_GD2) {        $transform_options = array ('string' => '<a href="transformation_wrapper.php' . $options['wrapper_link'] . '" target="_blank"><img src="transformation_wrapper.php' . $options['wrapper_link'] . '&amp;resize=png&amp;newWidth=' . (isset($options[0]) ? $options[0] : '100') . '&amp;newHeight=' . (isset($options[1]) ? $options[1] : 100) . '" alt="[__BUFFER__]" border="0" /></a>');    } else {        $transform_options = array ('string' => '<img src="transformation_wrapper.php' . $options['wrapper_link'] . '" alt="[__BUFFER__]" width="320" height="240" />');    }    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Holds class PMA_Message * * @package PhpMyAdmin *//** * a single message * * simple usage examples: * <code> * // display simple error message 'Error' * PMA_Message::error()->display(); * * // get simple success message 'Success' * $message = PMA_Message::success(); * * // get special notice 'Some locale notice' * $message = PMA_Message::notice('strSomeLocaleNotice'); * </code> * * more advanced usage example: * <code> * // create a localized success message * $message = PMA_Message::success('strSomeLocaleMessage'); * * // create another message, a hint, with a localized string which expects * // two parameters: $strSomeFootnote = 'Read the %smanual%s' * $hint = PMA_Message::notice('strSomeFootnote'); * // replace %d with the following params * $hint->addParam('[a@./Documentation.html#cfg_Example@_blank]'); * $hint->addParam('[/a]'); * // add this hint as a footnote * $hint = PMA_showHint($hint); * * // add the retrieved footnote reference to the original message * $message->addMessage($hint); * * // create another message ... * $more = PMA_Message::notice('strSomeMoreLocale'); * $more->addString('strSomeEvenMoreLocale', '<br />'); * $more->addParam('parameter for strSomeMoreLocale'); * $more->addParam('more parameter for strSomeMoreLocale'); * * // and add it also to the original message * $message->addMessage($more); * // finally add another raw message * $message->addMessage('some final words', ' - '); * * // display() will now print all messages in the same order as they are added * $message->display(); * // strSomeLocaleMessage <sup>1</sup> strSomeMoreLocale<br /> * // strSomeEvenMoreLocale - some final words * </code> * @package PhpMyAdmin */class PMA_Message{    const SUCCESS = 1; // 0001    const NOTICE  = 2; // 0010    const ERROR   = 8; // 1000    const SANITIZE_NONE   = 0;  // 0000 0000    const SANITIZE_STRING = 16; // 0001 0000    const SANITIZE_PARAMS = 32; // 0010 0000    const SANITIZE_BOOTH  = 48; // 0011 0000    /**     * message levels     *     * @var array     */    static public $level = array (        PMA_Message::SUCCESS => 'success',        PMA_Message::NOTICE  => 'notice',        PMA_Message::ERROR   => 'error',    );    /**     * The message number     *     * @access  protected     * @var     integer     */    protected $_number = PMA_Message::NOTICE;    /**     * The locale string identifier     *     * @access  protected     * @var     string     */    protected $_string = '';    /**     * The formatted message     *     * @access  protected     * @var     string     */    protected $_message = '';    /**     * Whether the message was already displayed     *     * @access  protected     * @var     boolean     */    protected $_is_displayed = false;    /**     * Unique id     *     * @access  protected     * @var string     */    protected $_hash = null;    /**     * holds parameters     *     * @access  protected     * @var     array     */    protected $_params = array();    /**     * holds additional messages     *     * @access  protected     * @var     array     */    protected $_added_messages = array();    /**     * Constructor     *     * @param string  $string     * @param integer $number     * @param array   $params     * @param integer $sanitize     */    public function __construct($string = '', $number = PMA_Message::NOTICE,        $params = array(), $sanitize = PMA_Message::SANITIZE_NONE)    {        $this->setString($string, $sanitize & PMA_Message::SANITIZE_STRING);        $this->setNumber($number);        $this->setParams($params, $sanitize & PMA_Message::SANITIZE_PARAMS);    }    /**     * magic method: return string representation for this object     *     * @return string     */    public function __toString()    {        return $this->getMessage();    }    /**     * get PMA_Message of type success     *     * shorthand for getting a simple success message     *     * @static     * @param string $string a localized string e.g. __('Your SQL query has been executed successfully')     * @return  PMA_Message     */    static public function success($string = '')    {        if (empty($string)) {            $string = __('Your SQL query has been executed successfully');        }        return new PMA_Message($string, PMA_Message::SUCCESS);    }    /**     * get PMA_Message of type error     *     * shorthand for getting a simple error message     *     * @static     * @param string $string a localized string e.g. __('Error')     * @return  PMA_Message     */    static public function error($string = '')    {        if (empty($string)) {            $string = __('Error');        }        return new PMA_Message($string, PMA_Message::ERROR);    }    /**     * get PMA_Message of type notice     *     * shorthand for getting a simple notice message     *     * @static     * @param string  $string a localized string e.g. __('The additional features for working with linked tables have been deactivated. To find out why click %shere%s.')     * @return  PMA_Message     */    static public function notice($string)    {        return new PMA_Message($string, PMA_Message::NOTICE);    }    /**     * get PMA_Message with customized content     *     * shorthand for getting a customized message     *     * @static     * @param string    $message     * @param integer   $type     * @return  PMA_Message     */    static public function raw($message, $type = PMA_Message::NOTICE)    {        $r = new PMA_Message('', $type);        $r->setMessage($message);        return $r;    }    /**     * get PMA_Message for number of affected rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function affected_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row affected.', '%1$d rows affected.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message for number of deleted rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function deleted_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row deleted.', '%1$d rows deleted.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message for number of inserted rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function inserted_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row inserted.', '%1$d rows inserted.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message of type error with custom content     *     * shorthand for getting a customized error message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawError($message)    {        return PMA_Message::raw($message, PMA_Message::ERROR);    }    /**     * get PMA_Message of type notice with custom content     *     * shorthand for getting a customized notice message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawNotice($message)    {        return PMA_Message::raw($message, PMA_Message::NOTICE);    }    /**     * get PMA_Message of type success with custom content     *     * shorthand for getting a customized success message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawSuccess($message)    {        return PMA_Message::raw($message, PMA_Message::SUCCESS);    }    /**     * returns whether this message is a success message or not     * and optionaly makes this message a success message     *     * @param boolean $set     * @return  boolean whether this is a success message or not     */    public function isSuccess($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::SUCCESS);        }        return $this->getNumber() === PMA_Message::SUCCESS;    }    /**     * returns whether this message is a notice message or not     * and optionally makes this message a notice message     *     * @param boolean $set     * @return  boolean whether this is a notice message or not     */    public function isNotice($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::NOTICE);        }        return $this->getNumber() === PMA_Message::NOTICE;    }    /**     * returns whether this message is an error message or not     * and optionally makes this message an error message     *     * @param boolean $set     * @return  boolean whether this is an error message or not     */    public function isError($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::ERROR);        }        return $this->getNumber() === PMA_Message::ERROR;    }    /**     * set raw message (overrides string)     *     * @param string  $message     * @param boolean $sanitize whether to sanitize $message or not     */    public function setMessage($message, $sanitize = false)    {        if ($sanitize) {            $message = PMA_Message::sanitize($message);        }        $this->_message = $message;    }    /**     * set string (does not take effect if raw message is set)     *     * @param string  $_string     * @param boolean $sanitize whether to sanitize $string or not     */    public function setString($_string, $sanitize = true)    {        if ($sanitize) {            $_string = PMA_Message::sanitize($_string);        }        $this->_string = $_string;    }    /**     * set message type number     *     * @param integer $number     */    public function setNumber($number)    {        $this->_number = $number;    }    /**     * add parameter, usually in conjunction with strings     *     * usage     * <code>     * $message->addParam('strLocale', false);     * $message->addParam('[em]some string[/em]');     * $message->addParam('<img src="img" />', false);     * </code>     *     * @param mixed   $param     * @param boolean $raw     */    public function addParam($param, $raw = true)    {        if ($param instanceof PMA_Message) {            $this->_params[] = $param;        } elseif ($raw) {            $this->_params[] = htmlspecialchars($param);        } else {            $this->_params[] = PMA_Message::notice($param);        }    }    /**     * add another string to be concatenated on displaying     *     * @param string  $string    to be added     * @param string  $separator to use between this and previous string/message     */    public function addString($string, $separator = ' ')    {        $this->_added_messages[] = $separator;        $this->_added_messages[] = PMA_Message::notice($string);    }    /**     * add a bunch of messages at once     *     * @param array   $messages  to be added     * @param string  $separator to use between this and previous string/message     */    public function addMessages($messages, $separator = ' ')    {        foreach ($messages as $message) {            $this->addMessage($message, $separator);        }    }    /**     * add another raw message to be concatenated on displaying     *     * @param mixed   $message   to be added     * @param string  $separator to use between this and previous string/message     */    public function addMessage($message, $separator = ' ')    {        if (strlen($separator)) {            $this->_added_messages[] = $separator;        }        if ($message instanceof PMA_Message) {            $this->_added_messages[] = $message;        } else {            $this->_added_messages[] = PMA_Message::rawNotice($message);        }    }    /**     * set all params at once, usually used in conjunction with string     *     * @param array   $params     * @param boolean $sanitize     */    public function setParams($params, $sanitize = false)    {        if ($sanitize) {            $params = PMA_Message::sanitize($params);        }        $this->_params = $params;    }    /**     * return all parameters     *     * @return array     */    public function getParams()    {        return $this->_params;    }    /**     * return all added messages     *     * @return array     */    public function getAddedMessages()    {        return $this->_added_messages;    }    /**     * Sanitizes $message     *     * @static     * @param mixed  $message the message(s)     * @return  mixed  the sanitized message(s)     * @access  public     */    static public function sanitize($message)    {        if (is_array($message)) {            foreach ($message as $key => $val) {                $message[$key] = PMA_Message::sanitize($val);            }            return $message;        }        return htmlspecialchars($message);    }    /**     * decode $message, taking into account our special codes     * for formatting     *     * @static     * @param string  $message the message     * @return  string  the decoded message     * @access  public     */    static public function decodeBB($message)    {        return PMA_sanitize($message, false, true);    }    /**     * wrapper for sprintf()     *     * @return  string formatted     */    static public function format()    {        $params = func_get_args();        if (isset($params[1]) && is_array($params[1])) {            array_unshift($params[1], $params[0]);            $params = $params[1];        }        return call_user_func_array('sprintf', $params);    }    /**     * returns unique PMA_Message::$_hash, if not exists it will be created     *     * @return  string PMA_Message::$_hash     */    public function getHash()    {        if (null === $this->_hash) {            $this->_hash = md5(                $this->getNumber() .                $this->_string .                $this->_message            );        }        return $this->_hash;    }    /**     * returns compiled message     *     * @return  string complete message     */    public function getMessage()    {        $message = $this->_message;        if (0 === strlen($message)) {            $string = $this->getString();            if (isset($GLOBALS[$string])) {                $message = $GLOBALS[$string];            } elseif (0 === strlen($string)) {                $message = '';            } else {                $message = $string;            }        }        if (count($this->getParams()) > 0) {            $message = PMA_Message::format($message, $this->getParams());        }        $message = PMA_Message::decodeBB($message);        foreach ($this->getAddedMessages() as $add_message) {            $message .= $add_message;        }        return $message;    }    /**     * returns PMA_Message::$_string     *     * @return  string PMA_Message::$_string     */    public function getString()    {        return $this->_string;    }    /**     * returns PMA_Message::$_number     *     * @return  integer PMA_Message::$_number     */    public function getNumber()    {        return $this->_number;    }    /**     * returns level of message     *     * @return  string  level of message     */    public function getLevel()    {        return PMA_Message::$level[$this->getNumber()];    }    /**     * Displays the message in HTML     *     */    public function display()    {        echo $this->getDisplay();        $this->isDisplayed(true);    }    /**     * returns HTML code for displaying this message     *     *     * @return string whole message box     */    public function getDisplay()    {        return '<div class="' . $this->getLevel() . '">'            . $this->getMessage() . '</div>';    }    /**     * sets and returns whether the message was displayed or not     *     * @param boolean $is_displayed     * @return  boolean PMA_Message::$_is_displayed     */    public function isDisplayed($is_displayed = false)    {        if ($is_displayed) {            $this->_is_displayed = true;        }        return $this->_is_displayed;    }}?>
<?php/** * Column types and functions supported by MySQL * * @package PhpMyAdmin */// VARCHAR, TINYINT, TEXT and DATE are listed first, based on estimated popularity$cfg['ColumnTypes'] = !empty($cfg['ColumnTypes']) ? $cfg['ColumnTypes'] : array(    // most used    'INT',    'VARCHAR',    'TEXT',    'DATE',    // numeric    'NUMERIC' => array(        'TINYINT',        'SMALLINT',        'MEDIUMINT',        'INT',        'BIGINT',        '-',        'DECIMAL',        'FLOAT',        'DOUBLE',        'REAL',        '-',        'BIT',        'BOOLEAN',        'SERIAL',    ),    // Date/Time    'DATE and TIME' => array(        'DATE',        'DATETIME',        'TIMESTAMP',        'TIME',        'YEAR',    ),    // Text    'STRING' => array(        'CHAR',        'VARCHAR',        '-',        'TINYTEXT',        'TEXT',        'MEDIUMTEXT',        'LONGTEXT',        '-',        'BINARY',        'VARBINARY',        '-',        'TINYBLOB',        'MEDIUMBLOB',        'BLOB',        'LONGBLOB',        '-',        'ENUM',        'SET',    ),    'SPATIAL' => array(        'GEOMETRY',        'POINT',        'LINESTRING',        'POLYGON',        'MULTIPOINT',        'MULTILINESTRING',        'MULTIPOLYGON',        'GEOMETRYCOLLECTION',    ),);$cfg['AttributeTypes'] = !empty($cfg['AttributeTypes']) ? $cfg['AttributeTypes'] : array(   '',   'BINARY',   'UNSIGNED',   'UNSIGNED ZEROFILL',   'on update CURRENT_TIMESTAMP',);if ($cfg['ShowFunctionFields']) {    $cfg['RestrictColumnTypes'] = !empty($cfg['RestrictColumnTypes']) ? $cfg['RestrictColumnTypes'] : array(        'TINYINT'   => 'FUNC_NUMBER',        'SMALLINT'  => 'FUNC_NUMBER',        'MEDIUMINT' => 'FUNC_NUMBER',        'INT'       => 'FUNC_NUMBER',        'BIGINT'    => 'FUNC_NUMBER',        'DECIMAL'   => 'FUNC_NUMBER',        'FLOAT'     => 'FUNC_NUMBER',        'DOUBLE'    => 'FUNC_NUMBER',        'REAL'      => 'FUNC_NUMBER',        'BIT'       => 'FUNC_NUMBER',        'BOOLEAN'   => 'FUNC_NUMBER',        'SERIAL'    => 'FUNC_NUMBER',        'DATE'      => 'FUNC_DATE',        'DATETIME'  => 'FUNC_DATE',        'TIMESTAMP' => 'FUNC_DATE',        'TIME'      => 'FUNC_DATE',        'YEAR'      => 'FUNC_DATE',        'CHAR'       => 'FUNC_CHAR',        'VARCHAR'    => 'FUNC_CHAR',        'TINYTEXT'   => 'FUNC_CHAR',        'TEXT'       => 'FUNC_CHAR',        'MEDIUMTEXT' => 'FUNC_CHAR',        'LONGTEXT'   => 'FUNC_CHAR',        'BINARY'     => 'FUNC_CHAR',        'VARBINARY'  => 'FUNC_CHAR',        'TINYBLOB'   => 'FUNC_CHAR',        'MEDIUMBLOB' => 'FUNC_CHAR',        'BLOB'       => 'FUNC_CHAR',        'LONGBLOB'   => 'FUNC_CHAR',        'ENUM'       => '',        'SET'        => '',        'GEOMETRY'           => 'FUNC_SPATIAL',        'POINT'              => 'FUNC_SPATIAL',        'LINESTRING'         => 'FUNC_SPATIAL',        'POLYGON'            => 'FUNC_SPATIAL',        'MULTIPOINT'         => 'FUNC_SPATIAL',        'MULTILINESTRING'    => 'FUNC_SPATIAL',        'MULTIPOLYGON'       => 'FUNC_SPATIAL',        'GEOMETRYCOLLECTION' => 'FUNC_SPATIAL',    );    $restrict_functions = array(        'FUNC_CHAR' => array(            'BIN',            'CHAR',            'CURRENT_USER',            'COMPRESS',            'DATABASE',            'DAYNAME',            'DES_DECRYPT',            'DES_ENCRYPT',            'ENCRYPT',            'HEX',            'INET_NTOA',            'LOAD_FILE',            'LOWER',            'LTRIM',            'MD5',            'MONTHNAME',            'OLD_PASSWORD',            'PASSWORD',            'QUOTE',            'REVERSE',            'RTRIM',            'SHA1',            'SOUNDEX',            'SPACE',            'TRIM',            'UNCOMPRESS',            'UNHEX',            'UPPER',            'USER',            'UUID',            'VERSION',        ),        'FUNC_DATE' => array(            'CURRENT_DATE',            'CURRENT_TIME',            'DATE',            'FROM_DAYS',            'FROM_UNIXTIME',            'LAST_DAY',            'NOW',            'SEC_TO_TIME',            'SYSDATE',            'TIME',            'TIMESTAMP',            'UTC_DATE',            'UTC_TIME',            'UTC_TIMESTAMP',            'YEAR',        ),        'FUNC_NUMBER' => array(            'ABS',            'ACOS',            'ASCII',            'ASIN',            'ATAN',            'BIT_LENGTH',            'BIT_COUNT',            'CEILING',            'CHAR_LENGTH',            'CONNECTION_ID',            'COS',            'COT',            'CRC32',            'DAYOFMONTH',            'DAYOFWEEK',            'DAYOFYEAR',            'DEGREES',            'EXP',            'FLOOR',            'HOUR',            'INET_ATON',            'LENGTH',            'LN',            'LOG',            'LOG2',            'LOG10',            'MICROSECOND',            'MINUTE',            'MONTH',            'OCT',            'ORD',            'PI',            'QUARTER',            'RADIANS',            'RAND',            'ROUND',            'SECOND',            'SIGN',            'SIN',            'SQRT',            'TAN',            'TO_DAYS',            'TO_SECONDS',            'TIME_TO_SEC',            'UNCOMPRESSED_LENGTH',            'UNIX_TIMESTAMP',            'UUID_SHORT',            'WEEK',            'WEEKDAY',            'WEEKOFYEAR',            'YEARWEEK',        ),        'FUNC_SPATIAL' => array(            'GeomFromText',            'GeomFromWKB',            'GeomCollFromText',            'LineFromText',            'MLineFromText',            'PointFromText',            'MPointFromText',            'PolyFromText',            'MPolyFromText',            'GeomCollFromWKB',            'LineFromWKB',            'MLineFromWKB',            'PointFromWKB',            'MPointFromWKB',            'PolyFromWKB',            'MPolyFromWKB',        ),    );    // $restrict_functions holds all known functions, remove these that are unavailable on current server    if (PMA_MYSQL_INT_VERSION < 50500) {        $restrict_functions['FUNC_NUMBER'] = array_diff($restrict_functions['FUNC_NUMBER'], array('TO_SECONDS'));    }    if (PMA_MYSQL_INT_VERSION < 50120) {        $restrict_functions['FUNC_NUMBER'] = array_diff($restrict_functions['FUNC_NUMBER'], array('UUID_SHORT'));    }    if (empty($cfg['RestrictFunctions'])) {        $cfg['RestrictFunctions'] = $restrict_functions;    }    if (empty($cfg['Functions'])) {        // build a list of functions based on $restrict_functions        $cfg['Functions'] = array();        foreach ($restrict_functions as $cat => $functions) {            if ($cat != 'FUNC_SPATIAL') {                $cfg['Functions'] = array_merge($cfg['Functions'], $functions);            }        }        sort($cfg['Functions']);    }    unset($restrict_functions);} // end if?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Single signon for phpMyAdmin * * This is just example how to use script based single signon with * phpMyAdmin, it is not intended to be perfect code and look, only * shows how you can integrate this functionality in your application. * * @package PhpMyAdmin * @subpackage Example *//** * This function returns username and password. * * It can optionally use configured username as parameter. * * @param string $user * @return array */function get_login_credentials($user){    return array('root', '');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * display list of server engines and additonal information about them * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * requirements */require_once './libraries/common.inc.php';/** * Does the common work */require './libraries/server_common.inc.php';require './libraries/StorageEngine.class.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Did the user request information about a certain storage engine? */if (empty($_REQUEST['engine']) || ! PMA_StorageEngine::isValid($_REQUEST['engine'])) {    /**     * Displays the sub-page heading     */    echo '<h2>' . "\n"       . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('b_engine.png') : '')       . "\n" . __('Storage Engines') . "\n"       . '</h2>' . "\n";    /**     * Displays the table header     */    echo '<table class="noclick">' . "\n"       . '<thead>' . "\n"       . '<tr><th>' . __('Storage Engine') . '</th>' . "\n"       . '    <th>' . __('Description') . '</th>' . "\n"       . '</tr>' . "\n"       . '</thead>' . "\n"       . '<tbody>' . "\n";    /**     * Listing the storage engines     */    $odd_row = true;    foreach (PMA_StorageEngine::getStorageEngines() as $engine => $details) {        echo '<tr class="'           . ($odd_row ? 'odd' : 'even')           . ($details['Support'] == 'NO' || $details['Support'] == 'DISABLED'                ? ' disabled'                : '')           . '">' . "\n"           . '    <td><a href="./server_engines.php'           . PMA_generate_common_url(array('engine' => $engine)) . '">' . "\n"           . '            ' . htmlspecialchars($details['Engine']) . "\n"           . '        </a></td>' . "\n"           . '    <td>' . htmlspecialchars($details['Comment']) . '</td>' . "\n"           . '</tr>' . "\n";        $odd_row = !$odd_row;    }    $PMA_Config = $GLOBALS['PMA_Config'];    if ($PMA_Config->get('BLOBSTREAMING_PLUGINS_EXIST')) {        // Special case for PBMS daemon which is not listed as an engine        echo '<tr class="'            . ($odd_row ? 'odd' : 'even')            .  '">' . "\n"            . '    <td><a href="./server_engines.php'            . PMA_generate_common_url(array('engine' => "PBMS")) . '">' . "\n"            . '            '  . "PBMS\n"            . '        </a></td>' . "\n"            . '    <td>' . htmlspecialchars("PrimeBase MediaStream (PBMS) daemon") . '</td>' . "\n"            . '</tr>' . "\n";    }   unset($odd_row, $engine, $details);    echo '</tbody>' . "\n"       . '</table>' . "\n";} else {    /**     * Displays details about a given Storage Engine     */    $engine_plugin = PMA_StorageEngine::getEngine($_REQUEST['engine']);    echo '<h2>' . "\n"       . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('b_engine.png') : '')       . '    ' . htmlspecialchars($engine_plugin->getTitle()) . "\n"       . '    ' . PMA_showMySQLDocu('', $engine_plugin->getMysqlHelpPage()) . "\n"       . '</h2>' . "\n\n";    echo '<p>' . "\n"       . '    <em>' . "\n"       . '        ' . htmlspecialchars($engine_plugin->getComment()) . "\n"       . '    </em>' . "\n"       . '</p>' . "\n\n";    $infoPages = $engine_plugin->getInfoPages();    if (!empty($infoPages) && is_array($infoPages)) {        echo '<p>' . "\n"           . '    <strong>[</strong>' . "\n";        if (empty($_REQUEST['page'])) {            echo '    <strong>' . __('Variables') . '</strong>' . "\n";        } else {            echo '    <a href="./server_engines.php'                . PMA_generate_common_url(array('engine' => $_REQUEST['engine'])) . '">'                . __('Variables') . '</a>' . "\n";        }        foreach ($infoPages as $current => $label) {            echo '    <strong>|</strong>' . "\n";            if (isset($_REQUEST['page']) && $_REQUEST['page'] == $current) {                echo '    <strong>' . $label . '</strong>' . "\n";            } else {                echo '    <a href="./server_engines.php'                    . PMA_generate_common_url(                        array('engine' => $_REQUEST['engine'], 'page' => $current))                    . '">' . htmlspecialchars($label) . '</a>' . "\n";            }        }        unset($current, $label);        echo '    <strong>]</strong>' . "\n"           . '</p>' . "\n\n";    }    unset($infoPages, $page_output);    if (!empty($_REQUEST['page'])) {        $page_output = $engine_plugin->getPage($_REQUEST['page']);    }    if (!empty($page_output)) {        echo $page_output;    } else {        echo '<p> ' . $engine_plugin->getSupportInformationMessage() . "\n"           . '</p>' . "\n"           . $engine_plugin->getHtmlVariables();    }}/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__sql_info(){    return array(        'info' => __('Formats text as SQL query with syntax highlighting.'),        );}/** * */function PMA_transformation_text_plain__sql($buffer, $options = array(), $meta = ''){    $result = PMA_SQP_formatHtml(PMA_SQP_parse($buffer));    // Need to clear error state not to break subsequent queries display.    PMA_SQP_resetError();    return $result;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * SQL Parser Matching Data * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * This data is used by the SQL Parser to recognize keywords * * It has been extracted from the lex.h file in the MySQL BK tree * (around 4.0.2) as well as the MySQL documentation. * * It's easier to use only uppercase for proper sorting. In case of * doubt, use the test case to verify. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}if (! isset($GLOBALS['sql_delimiter'])) {        $GLOBALS['sql_delimiter'] = ';';}/** * @global array MySQL function names */$PMA_SQPdata_function_name = array (    'ABS',    'ACOS',    'ADDDATE',    'ADDTIME',    'AES_DECRYPT',    'AES_ENCRYPT',    'AREA',                     // Area() polygon-property-functions.html    'ASBINARY',                 // AsBinary()    'ASCII',    'ASIN',    'ASTEXT',                   // AsText()    'ATAN',    'ATAN2',    'AVG',    'BDMPOLYFROMTEXT',          // BdMPolyFromText()    'BDMPOLYFROMWKB',           // BdMPolyFromWKB()    'BDPOLYFROMTEXT',           // BdPolyFromText()    'BDPOLYFROMWKB',            // BdPolyFromWKB()    'BENCHMARK',    'BIN',    'BIT_AND',    'BIT_COUNT',    'BIT_LENGTH',    'BIT_OR',    'BIT_XOR',                  // group-by-functions.html    'BOUNDARY',                 // Boundary() general-geometry-property-functions.html    'BUFFER',                   // Buffer()    'CAST',    'CEIL',    'CEILING',    'CENTROID',                 // Centroid() multipolygon-property-functions.html    'CHAR',                     // string-functions.html    'CHARACTER_LENGTH',    'CHARSET',                  // information-functions.html    'CHAR_LENGTH',    'COALESCE',    'COERCIBILITY',             // information-functions.html    'COLLATION',                // information-functions.html    'COMPRESS',                 // string-functions.html    'CONCAT',    'CONCAT_WS',    'CONNECTION_ID',    'CONTAINS',                 // Contains()    'CONV',    'CONVERT',    'CONVERT_TZ',    'CONVEXHULL',               // ConvexHull()    'COS',    'COT',    'COUNT',    'CRC32',                    // mathematical-functions.html    'CROSSES',                  // Crosses()    'CURDATE',    'CURRENT_DATE',    'CURRENT_TIME',    'CURRENT_TIMESTAMP',    'CURRENT_USER',    'CURTIME',    'DATABASE',    'DATE',                     // date-and-time-functions.html    'DATEDIFF',                 // date-and-time-functions.html    'DATE_ADD',    'DATE_DIFF',    'DATE_FORMAT',    'DATE_SUB',    'DAY',    'DAYNAME',    'DAYOFMONTH',    'DAYOFWEEK',    'DAYOFYEAR',    'DECODE',    'DEFAULT',                  // miscellaneous-functions.html    'DEGREES',    'DES_DECRYPT',    'DES_ENCRYPT',    'DIFFERENCE',               // Difference()    'DIMENSION',                // Dimension() general-geometry-property-functions.html    'DISJOINT',                 // Disjoint()    'DISTANCE',                 // Distance()    'ELT',    'ENCODE',    'ENCRYPT',    'ENDPOINT',                 // EndPoint() linestring-property-functions.html    'ENVELOPE',                 // Envelope() general-geometry-property-functions.html    'EQUALS',                   // Equals()    'EXP',    'EXPORT_SET',    'EXTERIORRING',             // ExteriorRing() polygon-property-functions.html    'EXTRACT',    'EXTRACTVALUE',             // ExtractValue() xml-functions.html    'FIELD',    'FIND_IN_SET',    'FLOOR',    'FORMAT',    'FOUND_ROWS',    'FROM_DAYS',    'FROM_UNIXTIME',    'GEOMCOLLFROMTEXT',         // GeomCollFromText()    'GEOMCOLLFROMWKB',          // GeomCollFromWKB()    'GEOMETRYCOLLECTION',       // GeometryCollection()    'GEOMETRYCOLLECTIONFROMTEXT',   // GeometryCollectionFromText()    'GEOMETRYCOLLECTIONFROMWKB',    // GeometryCollectionFromWKB()    'GEOMETRYFROMTEXT',         // GeometryFromText()    'GEOMETRYFROMWKB',          // GeometryFromWKB()    'GEOMETRYN',                // GeometryN() geometrycollection-property-functions.html    'GEOMETRYTYPE',             // GeometryType() general-geometry-property-functions.html    'GEOMFROMTEXT',             // GeomFromText()    'GEOMFROMWKB',              // GeomFromWKB()    'GET_FORMAT',    'GET_LOCK',    'GLENGTH',                  // GLength() linestring-property-functions.html    'GREATEST',    'GROUP_CONCAT',    'GROUP_UNIQUE_USERS',    'HEX',    'HOUR',    'IF',                       //control-flow-functions.html    'IFNULL',    'INET_ATON',    'INET_NTOA',    'INSERT',                   // string-functions.html    'INSTR',    'INTERIORRINGN',            // InteriorRingN() polygon-property-functions.html    'INTERSECTION',             // Intersection()    'INTERSECTS',               // Intersects()    'INTERVAL',    'ISCLOSED',                 // IsClosed() multilinestring-property-functions.html    'ISEMPTY',                  // IsEmpty() general-geometry-property-functions.html    'ISNULL',    'ISRING',                   // IsRing() linestring-property-functions.html    'ISSIMPLE',                 // IsSimple() general-geometry-property-functions.html    'IS_FREE_LOCK',    'IS_USED_LOCK',             // miscellaneous-functions.html    'LAST_DAY',    'LAST_INSERT_ID',    'LCASE',    'LEAST',    'LEFT',    'LENGTH',    'LINEFROMTEXT',             // LineFromText()    'LINEFROMWKB',              // LineFromWKB()    'LINESTRING',               // LineString()    'LINESTRINGFROMTEXT',       // LineStringFromText()    'LINESTRINGFROMWKB',        // LineStringFromWKB()    'LN',    'LOAD_FILE',    'LOCALTIME',    'LOCALTIMESTAMP',    'LOCATE',    'LOG',    'LOG10',    'LOG2',    'LOWER',    'LPAD',    'LTRIM',    'MAKEDATE',    'MAKETIME',    'MAKE_SET',    'MASTER_POS_WAIT',    'MAX',    'MBRCONTAINS',              // MBRContains()    'MBRDISJOINT',              // MBRDisjoint()    'MBREQUAL',                 // MBREqual()    'MBRINTERSECTS',            // MBRIntersects()    'MBROVERLAPS',              // MBROverlaps()    'MBRTOUCHES',               // MBRTouches()    'MBRWITHIN',                // MBRWithin()    'MD5',    'MICROSECOND',    'MID',    'MIN',    'MINUTE',    'MLINEFROMTEXT',            // MLineFromText()    'MLINEFROMWKB',             // MLineFromWKB()    'MOD',    'MONTH',    'MONTHNAME',    'MPOINTFROMTEXT',           // MPointFromText()    'MPOINTFROMWKB',            // MPointFromWKB()    'MPOLYFROMTEXT',            // MPolyFromText()    'MPOLYFROMWKB',             // MPolyFromWKB()    'MULTILINESTRING',          // MultiLineString()    'MULTILINESTRINGFROMTEXT',  // MultiLineStringFromText()    'MULTILINESTRINGFROMWKB',   // MultiLineStringFromWKB()    'MULTIPOINT',               // MultiPoint()    'MULTIPOINTFROMTEXT',       // MultiPointFromText()    'MULTIPOINTFROMWKB',        // MultiPointFromWKB()    'MULTIPOLYGON',             // MultiPolygon()    'MULTIPOLYGONFROMTEXT',     // MultiPolygonFromText()    'MULTIPOLYGONFROMWKB',      // MultiPolygonFromWKB()    'NAME_CONST',               // NAME_CONST()    'NOW',                      // NOW()    'NULLIF',    'NUMGEOMETRIES',            // NumGeometries() geometrycollection-property-functions.html    'NUMINTERIORRINGS',         // NumInteriorRings() polygon-property-functions.html    'NUMPOINTS',                // NumPoints() linestring-property-functions.html    'OCT',    'OCTET_LENGTH',    'OLD_PASSWORD',    'ORD',    'OVERLAPS',                 // Overlaps()    'PASSWORD',    'PERIOD_ADD',    'PERIOD_DIFF',    'PI',    'POINT',                    // Point()    'POINTFROMTEXT',            // PointFromText()    'POINTFROMWKB',             // PointFromWKB()    'POINTN',                   // PointN() inestring-property-functions.html    'POINTONSURFACE',           // PointOnSurface() multipolygon-property-functions.html    'POLYFROMTEXT',             // PolyFromText()    'POLYFROMWKB',              // PolyFromWKB()    'POLYGON',                  // Polygon()    'POLYGONFROMTEXT',          // PolygonFromText()    'POLYGONFROMWKB',           // PolygonFromWKB()    'POSITION',    'POW',    'POWER',    'QUARTER',    'QUOTE',    'RADIANS',    'RAND',    'RELATED',                  // Related()    'RELEASE_LOCK',    'REPEAT',    'REPLACE',                  // string-functions.html    'REVERSE',    'RIGHT',    'ROUND',    'ROW_COUNT',                // information-functions.html    'RPAD',    'RTRIM',    'SCHEMA',                   // information-functions.html    'SECOND',    'SEC_TO_TIME',    'SESSION_USER',    'SHA',    'SHA1',    'SIGN',    'SIN',    'SLEEP',                    // miscellaneous-functions.html    'SOUNDEX',    'SPACE',    'SQRT',    'SRID',                     // general-geometry-property-functions.html    'STARTPOINT',               // StartPoint() linestring-property-functions.html    'STD',    'STDDEV',    'STDDEV_POP',               // group-by-functions.html    'STDDEV_SAMP',              // group-by-functions.html    'STRCMP',    'STR_TO_DATE',    'SUBDATE',    'SUBSTR',    'SUBSTRING',    'SUBSTRING_INDEX',    'SUBTIME',    'SUM',    'SYMDIFFERENCE',            // SymDifference()    'SYSDATE',    'SYSTEM_USER',    'TAN',    'TIME',    'TIMEDIFF',    'TIMESTAMP',    'TIMESTAMPADD',    'TIMESTAMPDIFF',    'TIME_FORMAT',    'TIME_TO_SEC',    'TOUCHES',                  // Touches()    'TO_DAYS',    'TRIM',    'TRUNCATE',                 // mathematical-functions.html    'UCASE',    'UNCOMPRESS',               // string-functions.html    'UNCOMPRESSED_LENGTH',      // string-functions.html    'UNHEX',                    // string-functions.html    'UNIQUE_USERS',    'UNIX_TIMESTAMP',    'UPDATEXML',                // UpdateXML() xml-functions.html    'UPPER',    'USER',    'UTC_DATE',    'UTC_TIME',    'UTC_TIMESTAMP',    'UUID',                     // miscellaneous-functions.html    'VARIANCE',                 // group-by-functions.html    'VAR_POP',                  // group-by-functions.html    'VAR_SAMP',                 // group-by-functions.html    'VERSION',    'WEEK',    'WEEKDAY',    'WEEKOFYEAR',    'WITHIN',                   // Within()    'X',                        // point-property-functions.html    'Y',                        // point-property-functions.html    'YEAR',    'YEARWEEK');/** * @global array MySQL attributes */$PMA_SQPdata_column_attrib = array (    'ARCHIVE',          // Engine    'ASCII',    'AUTO_INCREMENT',    'BDB',              // Engine    'BERKELEYDB',       // Engine alias BDB    'BINARY',    'BLACKHOLE',        // Engine    'CSV',              // Engine    'DEFAULT',    'EXAMPLE',          // Engine    'FEDERATED',        // Engine    'HEAP',             // Engine    'INNOBASE',         // Engine alias InnoDB    'INNODB',           // Engine InnoDB    'ISAM',             // Engine    'MARIA',            // Engine    'MEMORY',           // Engine alias HEAP, but preferred    'MERGE',            // Engine    'MRG_ISAM',         // Engine    'MRG_MYISAM',       // Engine alias MERGE    'MYISAM',           // Engine MyISAM    'NATIONAL',    'NDB',              // Engine alias NDBCLUSTER    'NDBCLUSTER',       // Engine    'PRECISION',    'UNDEFINED',    'UNICODE',    'UNSIGNED',    'VARYING',    'ZEROFILL');/** * words that are reserved by MySQL and may not be used as identifiers without quotes * * @see http://dev.mysql.com/doc/refman/5.5/en/reserved-words.html * * @global array MySQL reserved words */$PMA_SQPdata_reserved_word = array (    'ACCESSIBLE',       // 5.1    'ACTION',    'ADD',    'AFTER',    'AGAINST',    'AGGREGATE',    'ALGORITHM',    'ALL',    'ALTER',    'ANALYSE',    'ANALYZE',    'AND',    'AS',    'ASC',    'AUTOCOMMIT',    'AUTO_INCREMENT',    'AVG_ROW_LENGTH',    'BACKUP',    'BEGIN',    'BETWEEN',    'BINLOG',    'BOTH',    'BY',    'CASCADE',    'CASE',    'CHANGE',    'CHANGED',    'CHARSET',    'CHECK',    'CHECKSUM',    'COLLATE',    'COLLATION',    'COLUMN',    'COLUMNS',    'COMMENT',    'COMMIT',    'COMMITTED',    'COMPRESSED',    'CONCURRENT',    'CONSTRAINT',    'CONTAINS',    'CONVERT',    'CREATE',    'CROSS',    'CURRENT_TIMESTAMP',    'DATABASE',    'DATABASES',    'DAY',    'DAY_HOUR',    'DAY_MINUTE',    'DAY_SECOND',    'DECLARE',    'DEFINER',    'DELAYED',    'DELAY_KEY_WRITE',    'DELETE',    'DESC',    'DESCRIBE',    'DETERMINISTIC',    'DISTINCT',    'DISTINCTROW',    'DIV',    'DO',    'DROP',    'DUMPFILE',    'DUPLICATE',    'DYNAMIC',    'ELSE',    'ENCLOSED',    'END',    'ENGINE',    'ENGINES',    'ESCAPE',    'ESCAPED',    'EVENTS',    'EXECUTE',    'EXISTS',    'EXPLAIN',    'EXTENDED',    'FALSE',    'FAST',    'FIELDS',    'FILE',    'FIRST',    'FIXED',    'FLUSH',    'FOR',    'FORCE',    'FOREIGN',    'FROM',    'FULL',    'FULLTEXT',    'FUNCTION',    'GEMINI',    'GEMINI_SPIN_RETRIES',    'GENERAL',    'GLOBAL',    'GRANT',    'GRANTS',    'GROUP',    'HAVING',    'HEAP',    'HIGH_PRIORITY',    'HOSTS',    'HOUR',    'HOUR_MINUTE',    'HOUR_SECOND',    'IDENTIFIED',    'IF',    'IGNORE',    'IGNORE_SERVER_IDS',    'IN',    'INDEX',    'INDEXES',    'INFILE',    'INNER',    'INSERT',    'INSERT_ID',    'INSERT_METHOD',    'INTERVAL',    'INTO',    'INVOKER',    'IS',    'ISOLATION',    'JOIN',    'KEY',    'KEYS',    'KILL',    'LAST_INSERT_ID',    'LEADING',    'LEFT',    'LIKE',    'LIMIT',    'LINEAR',               // 5.1    'LINES',    'LOAD',    'LOCAL',    'LOCK',    'LOCKS',    'LOGS',    'LOW_PRIORITY',    'MARIA',                // 5.1 ?    'MASTER_CONNECT_RETRY',    'MASTER_HEARTBEAT_PERIOD',    'MASTER_HOST',    'MASTER_LOG_FILE',    'MASTER_LOG_POS',    'MASTER_PASSWORD',    'MASTER_PORT',    'MASTER_USER',    'MATCH',    'MAXVALUE',    'MAX_CONNECTIONS_PER_HOUR',    'MAX_QUERIES_PER_HOUR',    'MAX_ROWS',    'MAX_UPDATES_PER_HOUR',    'MAX_USER_CONNECTIONS',    'MEDIUM',    'MERGE',    'MINUTE',    'MINUTE_SECOND',    'MIN_ROWS',    'MODE',    'MODIFY',    'MONTH',    'MRG_MYISAM',    'MYISAM',    'NAMES',    'NATURAL',    // 'NO' is not allowed in SQL-99 but is allowed in MySQL    //'NO',    'NOT',    'NULL',    'OFFSET',    'ON',    'OPEN',    'OPTIMIZE',    'OPTION',    'OPTIONALLY',    'OR',    'ORDER',    'OUTER',    'OUTFILE',    'PACK_KEYS',    'PAGE',                 // 5.1-maria ?    'PAGE_CHECKSUM',        // 5.1    'PARTIAL',    'PARTITION',            // 5.1    'PARTITIONS',           // 5.1    'PASSWORD',    'PRIMARY',    'PRIVILEGES',    'PROCEDURE',    'PROCESS',    'PROCESSLIST',    'PURGE',    'QUICK',    'RAID0',    'RAID_CHUNKS',    'RAID_CHUNKSIZE',    'RAID_TYPE',    'RANGE',                // 5.1    'READ',    'READ_ONLY',            // 5.1    'READ_WRITE',           // 5.1    'REFERENCES',    'REGEXP',    'RELOAD',    'RENAME',    'REPAIR',    'REPEATABLE',    'REPLACE',    'REPLICATION',    'RESET',    'RESIGNAL',    'RESTORE',    'RESTRICT',    'RETURN',    'RETURNS',    'REVOKE',    'RIGHT',    'RLIKE',    'ROLLBACK',    'ROW',    'ROWS',    'ROW_FORMAT',    'SECOND',    'SECURITY',    'SELECT',    'SEPARATOR',    'SERIALIZABLE',    'SESSION',    'SHARE',    'SHOW',    'SHUTDOWN',    'SIGNAL',    'SLAVE',    'SLOW',    'SONAME',    'SOUNDS',                   // string-functions.html    'SQL',    'SQL_AUTO_IS_NULL',    'SQL_BIG_RESULT',    'SQL_BIG_SELECTS',    'SQL_BIG_TABLES',    'SQL_BUFFER_RESULT',    'SQL_CACHE',    'SQL_CALC_FOUND_ROWS',    'SQL_LOG_BIN',    'SQL_LOG_OFF',    'SQL_LOG_UPDATE',    'SQL_LOW_PRIORITY_UPDATES',    'SQL_MAX_JOIN_SIZE',    'SQL_NO_CACHE',    'SQL_QUOTE_SHOW_CREATE',    'SQL_SAFE_UPDATES',    'SQL_SELECT_LIMIT',    'SQL_SLAVE_SKIP_COUNTER',    'SQL_SMALL_RESULT',    'SQL_WARNINGS',    'START',    'STARTING',    'STATUS',    'STOP',    'STORAGE',    'STRAIGHT_JOIN',    'STRING',    'STRIPED',    'SUPER',    'TABLE',    'TABLES',    'TEMPORARY',    'TERMINATED',    'THEN',    'TO',    'TRAILING',    'TRANSACTIONAL',    // 5.1 ?    'TRUE',    'TRUNCATE',    'TYPE',    'TYPES',    'UNCOMMITTED',    'UNION',    'UNIQUE',    'UNLOCK',    'UPDATE',    'USAGE',    'USE',    'USING',    'VALUES',    'VARIABLES',    'VIEW',    'WHEN',    'WHERE',    'WITH',    'WORK',    'WRITE',    'XOR',    'YEAR_MONTH');/** * words forbidden to be used as column or table name wihtout quotes * as seen in http://dev.mysql.com/doc/mysql/en/reserved-words.html * * @global array MySQL forbidden words */$PMA_SQPdata_forbidden_word = array (    'ACCESSIBLE',       // 5.1    'ACTION',    'ADD',    'AFTER',    'AGAINST',    'AGGREGATE',    'ALGORITHM',    'ALL',    'ALTER',    'ANALYZE',    'AND',    'ANY',    'AS',    'ASC',    'ASCII',    'ASENSITIVE',    'AUTO_INCREMENT',    'AVG',    'AVG_ROW_LENGTH',    'BACKUP',    'BDB',    'BEFORE',    'BEGIN',    'BERKELEYDB',    'BETWEEN',    'BIGINT',    'BINARY',    'BINLOG',    'BIT',    'BLOB',    'BOOL',    'BOOLEAN',    'BOTH',    'BTREE',    'BY',    'BYTE',    'CACHE',    'CALL',    'CASCADE',    'CASCADED',    'CASE',    'CHAIN',    'CHANGE',    'CHANGED',    'CHAR',    'CHARACTER',    'CHARSET',    'CHECK',    'CHECKSUM',    'CIPHER',    'CLOSE',    'COLLATE',    'COLLATION',    'COLUMN',    'COLUMNS',    'COMMENT',    'COMMIT',    'COMMITTED',    'COMPACT',    'COMPRESSED',    'CONCURRENT',    'CONDITION',    'CONNECTION',    'CONSISTENT',    'CONSTRAINT',    'CONTAINS',    'CONTINUE',    'CONVERT',    'CREATE',    'CROSS',    'CUBE',    'CURRENT_DATE',    'CURRENT_TIME',    'CURRENT_TIMESTAMP',    'CURRENT_USER',    'CURSOR',    'DATA',    'DATABASE',    'DATABASES',    'DATE',    'DATETIME',    'DAY',    'DAY_HOUR',    'DAY_MICROSECOND',    'DAY_MINUTE',    'DAY_SECOND',    'DEALLOCATE',    'DEC',    'DECIMAL',    'DECLARE',    'DEFAULT',    'DEFINER',    'DELAYED',    'DELAY_KEY_WRITE',    'DELETE',    'DESC',    'DESCRIBE',    'DES_KEY_FILE',    'DETERMINISTIC',    'DIRECTORY',    'DISABLE',    'DISCARD',    'DISTINCT',    'DISTINCTROW',    'DIV',    'DO',    'DOUBLE',    'DROP',    'DUAL',    'DUMPFILE',    'DUPLICATE',    'DYNAMIC',    'EACH',    'ELSE',    'ELSEIF',    'ENABLE',    'ENCLOSED',    'END',    'ENGINE',    'ENGINES',    'ENUM',    'ERRORS',    'ESCAPE',    'ESCAPED',    'EVENTS',    'EXECUTE',    'EXISTS',    'EXIT',    'EXPANSION',    'EXPLAIN',    'EXTENDED',    'FALSE',    'FAST',    'FETCH',    'FIELDS',    'FILE',    'FIRST',    'FIXED',    'FLOAT',    'FLOAT4',    'FLOAT8',    'FLUSH',    'FOR',    'FORCE',    'FOREIGN',    'FOUND',    'FRAC_SECOND',    'FROM',    'FULL',    'FULLTEXT',    'FUNCTION',    'GEOMETRY',    'GEOMETRYCOLLECTION',    'GET_FORMAT',    'GLOBAL',    'GOTO',    'GRANT',    'GRANTS',    'GROUP',    'HANDLER',    'HASH',    'HAVING',    'HELP',    'HIGH_PRIORITY',    'HOSTS',    'HOUR',    'HOUR_MICROSECOND',    'HOUR_MINUTE',    'HOUR_SECOND',    'IDENTIFIED',    'IF',    'IGNORE',    'IMPORT',    'IN',    'INDEX',    'INDEXES',    'INFILE',    'INNER',    'INNOBASE',    'INNODB',    'INOUT',    'INSENSITIVE',    'INSERT',    'INSERT_METHOD',    'INT',    'INT1',    'INT2',    'INT3',    'INT4',    'INT8',    'INTEGER',    'INTERVAL',    'INTO',    'INVOKER',    'IO_THREAD',    'IS',    'ISOLATION',    'ISSUER',    'ITERATE',    'JOIN',    'KEY',    'KEYS',    'KILL',    'LABEL',    'LANGUAGE',    'LAST',    'LEADING',    'LEAVE',    'LEAVES',    'LEFT',    'LIKE',    'LIMIT',    'LINEAR',               // 5.1    'LINES',    'LINESTRING',    'LOAD',    'LOCAL',    'LOCALTIME',    'LOCALTIMESTAMP',    'LOCK',    'LOCKS',    'LOGS',    'LONG',    'LONGBLOB',    'LONGTEXT',    'LOOP',    'LOW_PRIORITY',    'MASTER',    'MASTER_CONNECT_RETRY',    'MASTER_HOST',    'MASTER_LOG_FILE',    'MASTER_LOG_POS',    'MASTER_PASSWORD',    'MASTER_PORT',    'MASTER_SERVER_ID',    'MASTER_SSL',    'MASTER_SSL_CA',    'MASTER_SSL_CAPATH',    'MASTER_SSL_CERT',    'MASTER_SSL_CIPHER',    'MASTER_SSL_KEY',    'MASTER_USER',    'MATCH',    'MAX_CONNECTIONS_PER_HOUR',    'MAX_QUERIES_PER_HOUR',    'MAX_ROWS',    'MAX_UPDATES_PER_HOUR',    'MAX_USER_CONNECTIONS',    'MEDIUM',    'MEDIUMBLOB',    'MEDIUMINT',    'MEDIUMTEXT',    'MERGE',    'MICROSECOND',    'MIDDLEINT',    'MIGRATE',    'MINUTE',    'MINUTE_MICROSECOND',    'MINUTE_SECOND',    'MIN_ROWS',    'MOD',    'MODE',    'MODIFIES',    'MODIFY',    'MONTH',    'MULTILINESTRING',    'MULTIPOINT',    'MULTIPOLYGON',    'MUTEX',    'NAME',    'NAMES',    'NATIONAL',    'NATURAL',    'NCHAR',    'NDB',    'NDBCLUSTER',    'NEW',    'NEXT',    'NO',    'NONE',    'NOT',    'NO_WRITE_TO_BINLOG',    'NULL',    'NUMERIC',    'NVARCHAR',    'OFFSET',    'OLD_PASSWORD',    'ON',    'ONE',    'ONE_SHOT',    'OPEN',    'OPTIMIZE',    'OPTION',    'OPTIONALLY',    'OR',    'ORDER',    'OUT',    'OUTER',    'OUTFILE',    'PACK_KEYS',    'PARTIAL',    'PASSWORD',    'PHASE',    'POINT',    'POLYGON',    'PRECISION',    'PREPARE',    'PREV',    'PRIMARY',    'PRIVILEGES',    'PROCEDURE',    'PROCESSLIST',    'PURGE',    'QUARTER',    'QUERY',    'QUICK',    'RAID0',    'RAID_CHUNKS',    'RAID_CHUNKSIZE',    'RAID_TYPE',    'RANGE',                // 5.1    'READ',    'READS',    'READ_ONLY',            // 5.1    'READ_WRITE',           // 5.1    'REAL',    'RECOVER',    'REDUNDANT',    'REFERENCES',    'REGEXP',    'RELAY_LOG_FILE',    'RELAY_LOG_POS',    'RELAY_THREAD',    'RELEASE',    'RELOAD',    'RENAME',    'REPAIR',    'REPEAT',    'REPEATABLE',    'REPLACE',    'REPLICATION',    'REQUIRE',    'RESET',    'RESTORE',    'RESTRICT',    'RESUME',    'RETURN',    'RETURNS',    'REVOKE',    'RIGHT',    'RLIKE',    'ROLLBACK',    'ROLLUP',    'ROUTINE',    'ROW',    'ROWS',    'ROW_FORMAT',    'RTREE',    'SAVEPOINT',    'SCHEMA',    'SCHEMAS',    'SECOND',    'SECOND_MICROSECOND',    'SECURITY',    'SELECT',    'SENSITIVE',    'SEPARATOR',    'SERIAL',    'SERIALIZABLE',    'SESSION',    'SET',    'SHARE',    'SHOW',    'SHUTDOWN',    'SIGNED',    'SIMPLE',    'SLAVE',    'SMALLINT',    'SNAPSHOT',    'SOME',    'SONAME',    'SOUNDS',    'SPATIAL',    'SPECIFIC',    'SQL',    'SQLEXCEPTION',    'SQLSTATE',    'SQLWARNING',    'SQL_BIG_RESULT',    'SQL_BUFFER_RESULT',    'SQL_CACHE',    'SQL_CALC_FOUND_ROWS',    'SQL_NO_CACHE',    'SQL_SMALL_RESULT',    'SQL_THREAD',    'SQL_TSI_DAY',    'SQL_TSI_FRAC_SECOND',    'SQL_TSI_HOUR',    'SQL_TSI_MINUTE',    'SQL_TSI_MONTH',    'SQL_TSI_QUARTER',    'SQL_TSI_SECOND',    'SQL_TSI_WEEK',    'SQL_TSI_YEAR',    'SSL',    'START',    'STARTING',    'STATUS',    'STOP',    'STORAGE',    'STRAIGHT_JOIN',    'STRING',    'STRIPED',    'SUBJECT',    'SUPER',    'SUSPEND',    'TABLE',    'TABLES',    'TABLESPACE',    'TEMPORARY',    'TEMPTABLE',    'TERMINATED',    'TEXT',    'THEN',    'TIME',    'TIMESTAMP',    'TIMESTAMPADD',    'TIMESTAMPDIFF',    'TINYBLOB',    'TINYINT',    'TINYTEXT',    'TO',    'TRAILING',    'TRANSACTION',    'TRIGGER',    'TRIGGERS',    'TRUE',    'TRUNCATE',    'TYPE',    'TYPES',    'UNCOMMITTED',    'UNDEFINED',    'UNDO',    'UNICODE',    'UNION',    'UNIQUE',    'UNKNOWN',    'UNLOCK',    'UNSIGNED',    'UNTIL',    'UPDATE',    'USAGE',    'USE',    'USER',    'USER_RESOURCES',    'USE_FRM',    'USING',    'UTC_DATE',    'UTC_TIME',    'UTC_TIMESTAMP',    'VALUE',    'VALUES',    'VARBINARY',    'VARCHAR',    'VARCHARACTER',    'VARIABLES',    'VARYING',    'VIEW',    'WARNINGS',    'WEEK',    'WHEN',    'WHERE',    'WHILE',    'WITH',    'WORK',    'WRITE',    'X509',    'XA',    'XOR',    'YEAR',    'YEAR_MONTH',    'ZEROFILL');/** * the MySQL column/data types * * @see http://dev.mysql.com/doc/refman/5.1/en/data-types.html * @see http://dev.mysql.com/doc/refman/5.1/en/mysql-spatial-datatypes.html * * @global array MySQL column types */$PMA_SQPdata_column_type = array (    'BIGINT',    'BINARY',    'BIT',    'BLOB',    'BOOL',    'BOOLEAN',              // numeric-type-overview.html    'CHAR',    'CHARACTER',    'DATE',    'DATETIME',    'DEC',    'DECIMAL',    'DOUBLE',    'ENUM',    'FLOAT',    'FLOAT4',    'FLOAT8',    'GEOMETRY',             // spatial    'GEOMETRYCOLLECTION',   // spatial    'INT',    'INT1',    'INT2',    'INT3',    'INT4',    'INT8',    'INTEGER',    'LINESTRING',           // spatial    'LONG',    'LONGBLOB',    'LONGTEXT',    'MEDIUMBLOB',    'MEDIUMINT',    'MEDIUMTEXT',    'MIDDLEINT',    'MULTILINESTRING',      // spatial    'MULTIPOINT',           // spatial    'MULTIPOLYGON',         // spatial    'NCHAR',    'NUMERIC',    'POINT',                // spatial    'POLYGON',              // spatial    'REAL',    'SERIAL',               // alias for BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY    'SET',    'SMALLINT',    'TEXT',    'TIME',    'TIMESTAMP',    'TINYBLOB',    'TINYINT',    'TINYTEXT',    'VARBINARY',    'VARCHAR',    'YEAR');/** * Documentation links for operators. */$PMA_SQPdata_operators_docs = array(   '!=' => array('link' => 'comparison-operators','anchor' => 'operator_not-equal'),   '<>' => array('link' => 'comparison-operators','anchor' => 'operator_not-equal'),   '!' => array('link' => 'logical-operators','anchor' => 'operator_not'),   '||' => array('link' => 'logical-operators','anchor' => 'operator_or'),   '+' => array('link' => 'arithmetic-functions','anchor' => 'operator_plus'),   '>>' => array('link' => 'bit-functions','anchor' => 'operator_right-shift'),   '-' => array('link' => 'arithmetic-functions','anchor' => 'operator_minus'),   '*' => array('link' => 'arithmetic-functions','anchor' => 'operator_times'),   '&&' => array('link' => 'logical-operators','anchor' => 'operator_and'),   '&' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-and'),   '~' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-invert'),   '|' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-or'),   '^' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-xor'),   '=' => array('link' => 'assignment-operators','anchor' => 'operator_assign-equal'),   ':=' => array('link' => 'assignment-operators','anchor' => 'operator_assign-value'),   '/' => array('link' => 'arithmetic-functions','anchor' => 'operator_divide'),   '<=>' => array('link' => 'comparison-operators','anchor' => 'operator_equal-to'),   '=' => array('link' => 'comparison-operators','anchor' => 'operator_equal'),   '>=' => array('link' => 'comparison-operators','anchor' => 'operator_greater-than-or-equal'),   '>' => array('link' => 'comparison-operators','anchor' => 'operator_greater-than'),   '<<' => array('link' => 'bit-functions','anchor' => 'operator_left-shift'),   '<=' => array('link' => 'comparison-operators','anchor' => 'operator_less-than-or-equal'),   '<' => array('link' => 'comparison-operators','anchor' => 'operator_less-than'),   '%' => array('link' => 'arithmetic-functions','anchor' => 'operator_mod'));/** * Documentation links for functions. */$PMA_SQPdata_functions_docs = array(   'ABS' => array('link' => 'mathematical-functions','anchor' => 'function_abs'),   'ACOS' => array('link' => 'mathematical-functions','anchor' => 'function_acos'),   'ADDDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_adddate'),   'ADDTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_addtime'),   'AES_DECRYPT' => array('link' => 'encryption-functions','anchor' => 'function_aes_decrypt'),   'AES_ENCRYPT' => array('link' => 'encryption-functions','anchor' => 'function_aes_encrypt'),   'AND' => array('link' => 'logical-operators','anchor' => 'operator_and'),   'ASCII' => array('link' => 'string-functions','anchor' => 'function_ascii'),   'ASIN' => array('link' => 'mathematical-functions','anchor' => 'function_asin'),   'ATAN2' => array('link' => 'mathematical-functions','anchor' => 'function_atan2'),   'ATAN' => array('link' => 'mathematical-functions','anchor' => 'function_atan2'),   'ATAN' => array('link' => 'mathematical-functions','anchor' => 'function_atan'),   'AVG' => array('link' => 'group-by-functions','anchor' => 'function_avg'),   'BENCHMARK' => array('link' => 'information-functions','anchor' => 'function_benchmark'),   'BIN' => array('link' => 'string-functions','anchor' => 'function_bin'),   'BINARY' => array('link' => 'cast-functions','anchor' => 'operator_binary'),   'BIT_AND' => array('link' => 'group-by-functions','anchor' => 'function_bit_and'),   'BIT_COUNT' => array('link' => 'bit-functions','anchor' => 'function_bit_count'),   'BIT_LENGTH' => array('link' => 'string-functions','anchor' => 'function_bit_length'),   'BIT_OR' => array('link' => 'group-by-functions','anchor' => 'function_bit_or'),   'BIT_XOR' => array('link' => 'group-by-functions','anchor' => 'function_bit_xor'),   'CASE' => array('link' => 'control-flow-functions','anchor' => 'operator_case'),   'CAST' => array('link' => 'cast-functions','anchor' => 'function_cast'),   'CEIL' => array('link' => 'mathematical-functions','anchor' => 'function_ceil'),   'CEILING' => array('link' => 'mathematical-functions','anchor' => 'function_ceiling'),   'CHAR_LENGTH' => array('link' => 'string-functions','anchor' => 'function_char_length'),   'CHAR' => array('link' => 'string-functions','anchor' => 'function_char'),   'CHARACTER_LENGTH' => array('link' => 'string-functions','anchor' => 'function_character_length'),   'CHARSET' => array('link' => 'information-functions','anchor' => 'function_charset'),   'COALESCE' => array('link' => 'comparison-operators','anchor' => 'function_coalesce'),   'COERCIBILITY' => array('link' => 'information-functions','anchor' => 'function_coercibility'),   'COLLATION' => array('link' => 'information-functions','anchor' => 'function_collation'),   'COMPRESS' => array('link' => 'encryption-functions','anchor' => 'function_compress'),   'CONCAT_WS' => array('link' => 'string-functions','anchor' => 'function_concat_ws'),   'CONCAT' => array('link' => 'string-functions','anchor' => 'function_concat'),   'CONNECTION_ID' => array('link' => 'information-functions','anchor' => 'function_connection_id'),   'CONV' => array('link' => 'mathematical-functions','anchor' => 'function_conv'),   'CONVERT_TZ' => array('link' => 'date-and-time-functions','anchor' => 'function_convert_tz'),   'Convert' => array('link' => 'cast-functions','anchor' => 'function_convert'),   'COS' => array('link' => 'mathematical-functions','anchor' => 'function_cos'),   'COT' => array('link' => 'mathematical-functions','anchor' => 'function_cot'),   'COUNT' => array('link' => 'group-by-functions','anchor' => 'function_count'),   'CRC32' => array('link' => 'mathematical-functions','anchor' => 'function_crc32'),   'CURDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_curdate'),   'CURRENT_DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_current_date'),   'CURRENT_TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_current_time'),   'CURRENT_TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_current_timestamp'),   'CURRENT_USER' => array('link' => 'information-functions','anchor' => 'function_current_user'),   'CURTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_curtime'),   'DATABASE' => array('link' => 'information-functions','anchor' => 'function_database'),   'DATE_ADD' => array('link' => 'date-and-time-functions','anchor' => 'function_date_add'),   'DATE_FORMAT' => array('link' => 'date-and-time-functions','anchor' => 'function_date_format'),   'DATE_SUB' => array('link' => 'date-and-time-functions','anchor' => 'function_date_sub'),   'DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_date'),   'DATEDIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_datediff'),   'DAY' => array('link' => 'date-and-time-functions','anchor' => 'function_day'),   'DAYNAME' => array('link' => 'date-and-time-functions','anchor' => 'function_dayname'),   'DAYOFMONTH' => array('link' => 'date-and-time-functions','anchor' => 'function_dayofmonth'),   'DAYOFWEEK' => array('link' => 'date-and-time-functions','anchor' => 'function_dayofweek'),   'DAYOFYEAR' => array('link' => 'date-and-time-functions','anchor' => 'function_dayofyear'),   'DECLARE' => array('link' => 'declare', 'anchor' => 'declare'),   'DECODE' => array('link' => 'encryption-functions','anchor' => 'function_decode'),   'DEFAULT' => array('link' => 'miscellaneous-functions','anchor' => 'function_default'),   'DEGREES' => array('link' => 'mathematical-functions','anchor' => 'function_degrees'),   'DES_DECRYPT' => array('link' => 'encryption-functions','anchor' => 'function_des_decrypt'),   'DES_ENCRYPT' => array('link' => 'encryption-functions','anchor' => 'function_des_encrypt'),   'DIV' => array('link' => 'arithmetic-functions','anchor' => 'operator_div'),   'ELT' => array('link' => 'string-functions','anchor' => 'function_elt'),   'ENCODE' => array('link' => 'encryption-functions','anchor' => 'function_encode'),   'ENCRYPT' => array('link' => 'encryption-functions','anchor' => 'function_encrypt'),   'EXP' => array('link' => 'mathematical-functions','anchor' => 'function_exp'),   'EXPORT_SET' => array('link' => 'string-functions','anchor' => 'function_export_set'),   'EXTRACT' => array('link' => 'date-and-time-functions','anchor' => 'function_extract'),   'ExtractValue' => array('link' => 'xml-functions','anchor' => 'function_extractvalue'),   'FIELD' => array('link' => 'string-functions','anchor' => 'function_field'),   'FIND_IN_SET' => array('link' => 'string-functions','anchor' => 'function_find_in_set'),   'FLOOR' => array('link' => 'mathematical-functions','anchor' => 'function_floor'),   'FORMAT' => array('link' => 'string-functions','anchor' => 'function_format'),   'FOUND_ROWS' => array('link' => 'information-functions','anchor' => 'function_found_rows'),   'FROM_DAYS' => array('link' => 'date-and-time-functions','anchor' => 'function_from_days'),   'FROM_UNIXTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_from_unixtime'),   'GET_FORMAT' => array('link' => 'date-and-time-functions','anchor' => 'function_get_format'),   'GET_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_get_lock'),   'GREATEST' => array('link' => 'comparison-operators','anchor' => 'function_greatest'),   'GROUP_CONCAT' => array('link' => 'group-by-functions','anchor' => 'function_group_concat'),   'HEX' => array('link' => 'string-functions','anchor' => 'function_hex'),   'HOUR' => array('link' => 'date-and-time-functions','anchor' => 'function_hour'),   'IF' => array('link' => 'control-flow-functions','anchor' => 'function_if'),   'IFNULL' => array('link' => 'control-flow-functions','anchor' => 'function_ifnull'),   'IN' => array('link' => 'comparison-operators','anchor' => 'function_in'),   'INET_ATON' => array('link' => 'miscellaneous-functions','anchor' => 'function_inet_aton'),   'INET_NTOA' => array('link' => 'miscellaneous-functions','anchor' => 'function_inet_ntoa'),   'INSERT' => array('link' => 'string-functions','anchor' => 'function_insert'),   'INSTR' => array('link' => 'string-functions','anchor' => 'function_instr'),   'INTERVAL' => array('link' => 'comparison-operators','anchor' => 'function_interval'),   'IS_FREE_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_is_free_lock'),   'IS_USED_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_is_used_lock'),   'IS' => array('link' => 'comparison-operators','anchor' => 'operator_is'),   'ISNULL' => array('link' => 'comparison-operators','anchor' => 'function_isnull'),   'LAST_DAY' => array('link' => 'date-and-time-functions','anchor' => 'function_last_day'),   'LAST_INSERT_ID' => array('link' => 'information-functions','anchor' => 'function_last_insert_id'),   'LCASE' => array('link' => 'string-functions','anchor' => 'function_lcase'),   'LEAST' => array('link' => 'comparison-operators','anchor' => 'function_least'),   'LEFT' => array('link' => 'string-functions','anchor' => 'function_left'),   'LENGTH' => array('link' => 'string-functions','anchor' => 'function_length'),   'LIKE' => array('link' => 'string-comparison-functions','anchor' => 'operator_like'),   'LN' => array('link' => 'mathematical-functions','anchor' => 'function_ln'),   'LOAD_FILE' => array('link' => 'string-functions','anchor' => 'function_load_file'),   'LOCALTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_localtime'),   'LOCALTIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_localtimestamp'),   'LOCATE' => array('link' => 'string-functions','anchor' => 'function_locate'),   'LOG10' => array('link' => 'mathematical-functions','anchor' => 'function_log10'),   'LOG2' => array('link' => 'mathematical-functions','anchor' => 'function_log2'),   'LOG' => array('link' => 'mathematical-functions','anchor' => 'function_log'),   'LOWER' => array('link' => 'string-functions','anchor' => 'function_lower'),   'LPAD' => array('link' => 'string-functions','anchor' => 'function_lpad'),   'LTRIM' => array('link' => 'string-functions','anchor' => 'function_ltrim'),   'MAKE_SET' => array('link' => 'string-functions','anchor' => 'function_make_set'),   'MAKEDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_makedate'),   'MAKETIME' => array('link' => 'date-and-time-functions','anchor' => 'function_maketime'),   'MASTER_POS_WAIT' => array('link' => 'miscellaneous-functions','anchor' => 'function_master_pos_wait'),   'MATCH' => array('link' => 'fulltext-search','anchor' => 'function_match'),   'MAX' => array('link' => 'group-by-functions','anchor' => 'function_max'),   'MD5' => array('link' => 'encryption-functions','anchor' => 'function_md5'),   'MICROSECOND' => array('link' => 'date-and-time-functions','anchor' => 'function_microsecond'),   'MID' => array('link' => 'string-functions','anchor' => 'function_mid'),   'MIN' => array('link' => 'group-by-functions','anchor' => 'function_min'),   'MINUTE' => array('link' => 'date-and-time-functions','anchor' => 'function_minute'),   'MOD' => array('link' => 'mathematical-functions','anchor' => 'function_mod'),   'MONTH' => array('link' => 'date-and-time-functions','anchor' => 'function_month'),   'MONTHNAME' => array('link' => 'date-and-time-functions','anchor' => 'function_monthname'),   'NAME_CONST' => array('link' => 'miscellaneous-functions','anchor' => 'function_name_const'),   'NOT' => array('link' => 'logical-operators','anchor' => 'operator_not'),   'NOW' => array('link' => 'date-and-time-functions','anchor' => 'function_now'),   'NULLIF' => array('link' => 'control-flow-functions','anchor' => 'function_nullif'),   'OCT' => array('link' => 'mathematical-functions','anchor' => 'function_oct'),   'OCTET_LENGTH' => array('link' => 'string-functions','anchor' => 'function_octet_length'),   'OLD_PASSWORD' => array('link' => 'encryption-functions','anchor' => 'function_old_password'),   'OR' => array('link' => 'logical-operators','anchor' => 'operator_or'),   'ORD' => array('link' => 'string-functions','anchor' => 'function_ord'),   'PASSWORD' => array('link' => 'encryption-functions','anchor' => 'function_password'),   'PERIOD_ADD' => array('link' => 'date-and-time-functions','anchor' => 'function_period_add'),   'PERIOD_DIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_period_diff'),   'PI' => array('link' => 'mathematical-functions','anchor' => 'function_pi'),   'POSITION' => array('link' => 'string-functions','anchor' => 'function_position'),   'POW' => array('link' => 'mathematical-functions','anchor' => 'function_pow'),   'POWER' => array('link' => 'mathematical-functions','anchor' => 'function_power'),   'QUARTER' => array('link' => 'date-and-time-functions','anchor' => 'function_quarter'),   'QUOTE' => array('link' => 'string-functions','anchor' => 'function_quote'),   'RADIANS' => array('link' => 'mathematical-functions','anchor' => 'function_radians'),   'RAND' => array('link' => 'mathematical-functions','anchor' => 'function_rand'),   'REGEXP' => array('link' => 'regexp','anchor' => 'operator_regexp'),   'RELEASE_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_release_lock'),   'REPEAT' => array('link' => 'string-functions','anchor' => 'function_repeat'),   'REPLACE' => array('link' => 'string-functions','anchor' => 'function_replace'),   'REVERSE' => array('link' => 'string-functions','anchor' => 'function_reverse'),   'RIGHT' => array('link' => 'string-functions','anchor' => 'function_right'),   'RLIKE' => array('link' => 'regexp','anchor' => 'operator_rlike'),   'ROUND' => array('link' => 'mathematical-functions','anchor' => 'function_round'),   'ROW_COUNT' => array('link' => 'information-functions','anchor' => 'function_row_count'),   'RPAD' => array('link' => 'string-functions','anchor' => 'function_rpad'),   'RTRIM' => array('link' => 'string-functions','anchor' => 'function_rtrim'),   'SCHEMA' => array('link' => 'information-functions','anchor' => 'function_schema'),   'SEC_TO_TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_sec_to_time'),   'SECOND' => array('link' => 'date-and-time-functions','anchor' => 'function_second'),   'SESSION_USER' => array('link' => 'information-functions','anchor' => 'function_session_user'),   'SHA' => array('link' => 'encryption-functions','anchor' => 'function_sha1'),   'SHA1' => array('link' => 'encryption-functions','anchor' => 'function_sha1'),   'SIGN' => array('link' => 'mathematical-functions','anchor' => 'function_sign'),   'SIN' => array('link' => 'mathematical-functions','anchor' => 'function_sin'),   'SLEEP' => array('link' => 'miscellaneous-functions','anchor' => 'function_sleep'),   'SOUNDEX' => array('link' => 'string-functions','anchor' => 'function_soundex'),   'SPACE' => array('link' => 'string-functions','anchor' => 'function_space'),   'SQRT' => array('link' => 'mathematical-functions','anchor' => 'function_sqrt'),   'STD' => array('link' => 'group-by-functions','anchor' => 'function_std'),   'STDDEV_POP' => array('link' => 'group-by-functions','anchor' => 'function_stddev_pop'),   'STDDEV_SAMP' => array('link' => 'group-by-functions','anchor' => 'function_stddev_samp'),   'STDDEV' => array('link' => 'group-by-functions','anchor' => 'function_stddev'),   'STR_TO_DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_str_to_date'),   'STRCMP' => array('link' => 'string-comparison-functions','anchor' => 'function_strcmp'),   'SUBDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_subdate'),   'SUBSTR' => array('link' => 'string-functions','anchor' => 'function_substr'),   'SUBSTRING_INDEX' => array('link' => 'string-functions','anchor' => 'function_substring_index'),   'SUBSTRING' => array('link' => 'string-functions','anchor' => 'function_substring'),   'SUBTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_subtime'),   'SUM' => array('link' => 'group-by-functions','anchor' => 'function_sum'),   'SYSDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_sysdate'),   'SYSTEM_USER' => array('link' => 'information-functions','anchor' => 'function_system_user'),   'TAN' => array('link' => 'mathematical-functions','anchor' => 'function_tan'),   'TIME_FORMAT' => array('link' => 'date-and-time-functions','anchor' => 'function_time_format'),   'TIME_TO_SEC' => array('link' => 'date-and-time-functions','anchor' => 'function_time_to_sec'),   'TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_time'),   'TIMEDIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_timediff'),   'TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_timestamp'),   'TIMESTAMPADD' => array('link' => 'date-and-time-functions','anchor' => 'function_timestampadd'),   'TIMESTAMPDIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_timestampdiff'),   'TO_DAYS' => array('link' => 'date-and-time-functions','anchor' => 'function_to_days'),   'TRIM' => array('link' => 'string-functions','anchor' => 'function_trim'),   'TRUNCATE' => array('link' => 'mathematical-functions','anchor' => 'function_truncate'),   'UCASE' => array('link' => 'string-functions','anchor' => 'function_ucase'),   'UNCOMPRESS' => array('link' => 'encryption-functions','anchor' => 'function_uncompress'),   'UNCOMPRESSED_LENGTH' => array('link' => 'encryption-functions','anchor' => 'function_uncompressed_length'),   'UNHEX' => array('link' => 'string-functions','anchor' => 'function_unhex'),   'UNIX_TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_unix_timestamp'),   'UpdateXML' => array('link' => 'xml-functions','anchor' => 'function_updatexml'),   'UPPER' => array('link' => 'string-functions','anchor' => 'function_upper'),   'USER' => array('link' => 'information-functions','anchor' => 'function_user'),   'UTC_DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_utc_date'),   'UTC_TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_utc_time'),   'UTC_TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_utc_timestamp'),   'UUID_SHORT' => array('link' => 'miscellaneous-functions','anchor' => 'function_uuid_short'),   'UUID' => array('link' => 'miscellaneous-functions','anchor' => 'function_uuid'),   'VALUES' => array('link' => 'miscellaneous-functions','anchor' => 'function_values'),   'VAR_POP' => array('link' => 'group-by-functions','anchor' => 'function_var_pop'),   'VAR_SAMP' => array('link' => 'group-by-functions','anchor' => 'function_var_samp'),   'VARIANCE' => array('link' => 'group-by-functions','anchor' => 'function_variance'),   'VERSION' => array('link' => 'information-functions','anchor' => 'function_version'),   'WEEK' => array('link' => 'date-and-time-functions','anchor' => 'function_week'),   'WEEKDAY' => array('link' => 'date-and-time-functions','anchor' => 'function_weekday'),   'WEEKOFYEAR' => array('link' => 'date-and-time-functions','anchor' => 'function_weekofyear'),   'XOR' => array('link' => 'logical-operators','anchor' => 'operator_xor'),   'YEAR' => array('link' => 'date-and-time-functions','anchor' => 'function_year'),   'YEARWEEK' => array('link' => 'date-and-time-functions','anchor' => 'function_yearweek'),   'SOUNDS_LIKE' => array('link' => 'string-functions','anchor' => 'operator_sounds-like'),   'IS_NOT_NULL' => array('link' => 'comparison-operators','anchor' => 'operator_is-not-null'),   'IS_NOT' => array('link' => 'comparison-operators','anchor' => 'operator_is-not'),   'IS_NULL' => array('link' => 'comparison-operators','anchor' => 'operator_is-null'),   'NOT_LIKE' => array('link' => 'string-comparison-functions','anchor' => 'operator_not-like'),   'NOT_REGEXP' => array('link' => 'regexp','anchor' => 'operator_not-regexp'),   'COUNT_DISTINCT' => array('link' => 'group-by-functions','anchor' => 'function_count-distinct'),   'NOT_IN' => array('link' => 'comparison-operators','anchor' => 'function_not-in'));?>
<?php// TCPDF FONT FILE DESCRIPTION$type='core';$name='Helvetica';$up=-100;$ut=50;$dw=513;$diff='';$enc='';$desc=array('Flags'=>32,'FontBBox'=>'[-166 -225 1000 931]','ItalicAngle'=>0,'Ascent'=>931,'Descent'=>-225,'Leading'=>0,'CapHeight'=>718,'XHeight'=>523,'StemV'=>88,'StemH'=>76,'AvgWidth'=>513,'MaxWidth'=>1015,'MissingWidth'=>513);$cw=array(0=>500,1=>500,2=>500,3=>500,4=>500,5=>500,6=>500,7=>500,8=>500,9=>500,10=>500,11=>500,12=>500,13=>500,14=>500,15=>500,16=>500,17=>500,18=>500,19=>500,20=>500,21=>500,22=>500,23=>500,24=>500,25=>500,26=>500,27=>500,28=>500,29=>500,30=>500,31=>500,32=>278,33=>278,34=>355,35=>556,36=>556,37=>889,38=>667,39=>191,40=>333,41=>333,42=>389,43=>584,44=>278,45=>333,46=>278,47=>278,48=>556,49=>556,50=>556,51=>556,52=>556,53=>556,54=>556,55=>556,56=>556,57=>556,58=>278,59=>278,60=>584,61=>584,62=>584,63=>556,64=>1015,65=>667,66=>667,67=>722,68=>722,69=>667,70=>611,71=>778,72=>722,73=>278,74=>500,75=>667,76=>556,77=>833,78=>722,79=>778,80=>667,81=>778,82=>722,83=>667,84=>611,85=>722,86=>667,87=>944,88=>667,89=>667,90=>611,91=>278,92=>278,93=>277,94=>469,95=>556,96=>333,97=>556,98=>556,99=>500,100=>556,101=>556,102=>278,103=>556,104=>556,105=>222,106=>222,107=>500,108=>222,109=>833,110=>556,111=>556,112=>556,113=>556,114=>333,115=>500,116=>278,117=>556,118=>500,119=>722,120=>500,121=>500,122=>500,123=>334,124=>260,125=>334,126=>584,127=>500,128=>655,129=>500,130=>222,131=>278,132=>333,133=>1000,134=>556,135=>556,136=>333,137=>1000,138=>667,139=>250,140=>1000,141=>500,142=>611,143=>500,144=>500,145=>222,146=>221,147=>333,148=>333,149=>350,150=>556,151=>1000,152=>333,153=>1000,154=>500,155=>250,156=>938,157=>500,158=>500,159=>667,160=>278,161=>278,162=>556,163=>556,164=>556,165=>556,166=>260,167=>556,168=>333,169=>737,170=>370,171=>448,172=>584,173=>333,174=>737,175=>333,176=>606,177=>584,178=>350,179=>350,180=>333,181=>556,182=>537,183=>278,184=>333,185=>350,186=>365,187=>448,188=>869,189=>869,190=>879,191=>556,192=>667,193=>667,194=>667,195=>667,196=>667,197=>667,198=>1000,199=>722,200=>667,201=>667,202=>667,203=>667,204=>278,205=>278,206=>278,207=>278,208=>722,209=>722,210=>778,211=>778,212=>778,213=>778,214=>778,215=>584,216=>778,217=>722,218=>722,219=>722,220=>722,221=>667,222=>666,223=>611,224=>556,225=>556,226=>556,227=>556,228=>556,229=>556,230=>896,231=>500,232=>556,233=>556,234=>556,235=>556,236=>251,237=>251,238=>251,239=>251,240=>556,241=>556,242=>556,243=>556,244=>556,245=>556,246=>556,247=>584,248=>611,249=>556,250=>556,251=>556,252=>556,253=>500,254=>555,255=>500);// --- EOF ---
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library for extracting information about the partitions * * @package PhpMyAdmin *//** * base Partition Class * @package PhpMyAdmin */class PMA_Partition{    /**     * returns array of partition names for a specific db/table     *     * @access  public     * @return  array   of partition names     */    static public function getPartitionNames($db, $table)    {        if (PMA_Partition::havePartitioning()) {            return PMA_DBI_fetch_result("select `PARTITION_NAME` from `information_schema`.`PARTITIONS` where `TABLE_SCHEMA` = '" . $db . "' and `TABLE_NAME` = '" . $table . "'");        } else {            return array();        }    }    /**     * checks if MySQL server supports partitioning     *     * @static     * @staticvar boolean $have_partitioning     * @staticvar boolean $already_checked     * @access  public     * @return  boolean     */    static public function havePartitioning()    {        static $have_partitioning = false;        static $already_checked = false;        if (! $already_checked) {            $have_partitioning = PMA_MYSQL_INT_VERSION >= 50100 && PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'have_partitioning';");            $already_checked = true;        }        return $have_partitioning;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Theme information * * @package PhpMyAdmin-theme * @subpackage pmahomme *//** * If you have problems or questions about this theme email mikehomme@users.sourceforge.net */$theme_name = 'pmahomme';$theme_full_version = '1.1';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {    die(__("GLOBALS overwrite attempt"));}/** * Sends http headers */$GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';/* Prevent against ClickJacking by allowing frames only from same origin */if (!$GLOBALS['cfg']['AllowThirdPartyFraming']) {    header('X-Frame-Options: SAMEORIGIN');    header('X-Content-Security-Policy: allow \'self\'; options inline-script eval-script; frame-ancestors \'self\'; img-src \'self\' data:; script-src \'self\' www.phpmyadmin.net');}PMA_no_cache_header();if (!defined('IS_TRANSFORMATION_WRAPPER')) {    // Define the charset to be used    header('Content-Type: text/html; charset=utf-8');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common functions for generating lists of Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Creates a list of items containing the relevant * information and some action links. * * @param    string   $type    One of ['routine'|'trigger'|'event'] * @param    array    $items   An array of items * * @return   string   HTML code of the list of items */function PMA_RTE_getList($type, $items){    global $table;    /**     * Conditional classes switch the list on or off     */    $class1 = 'hide';    $class2 = '';    if (! $items) {        $class1 = '';        $class2 = ' hide';    }    /**     * Generate output     */    $retval  = "<!-- LIST OF " . PMA_RTE_getWord('docu') . " START -->\n";    $retval .= "<fieldset>\n";    $retval .= "    <legend>\n";    $retval .= "        " . PMA_RTE_getWord('title') . "\n";    $retval .= "        " . PMA_showMySQLDocu('SQL-Syntax', PMA_RTE_getWord('docu')) . "\n";    $retval .= "    </legend>\n";    $retval .= "    <div class='$class1' id='nothing2display'>\n";    $retval .= "      " . PMA_RTE_getWord('nothing') . "\n";    $retval .= "    </div>\n";    $retval .= "    <table class='data$class2'>\n";    $retval .= "        <!-- TABLE HEADERS -->\n";    $retval .= "        <tr>\n";    switch ($type) {    case 'routine':        $retval .= "            <th>" . __('Name') . "</th>\n";        $retval .= "            <th colspan='4'>" . __('Action') . "</th>\n";        $retval .= "            <th>" . __('Type') . "</th>\n";        $retval .= "            <th>" . __('Returns') . "</th>\n";        break;    case 'trigger':        $retval .= "            <th>" . __('Name') . "</th>\n";        if (empty($table)) {            $retval .= "            <th>" . __('Table') . "</th>\n";        }        $retval .= "            <th colspan='3'>" . __('Action') . "</th>\n";        $retval .= "            <th>" . __('Time') . "</th>\n";        $retval .= "            <th>" . __('Event') . "</th>\n";        break;    case 'event':        $retval .= "            <th>" . __('Name') . "</th>\n";        $retval .= "            <th>" . __('Status') . "</th>\n";        $retval .= "            <th colspan='3'>" . __('Action') . "</th>\n";        $retval .= "            <th>" . __('Type') . "</th>\n";        break;    default:        break;    }    $retval .= "        </tr>\n";    $retval .= "        <!-- TABLE DATA -->\n";    $ct = 0;    foreach ($items as $item) {        $rowclass = ($ct % 2 == 0) ? 'odd' : 'even';        if ($GLOBALS['is_ajax_request']) {            $rowclass .= ' ajaxInsert hide';        }        // Get each row from the correct function        switch ($type) {        case 'routine':            $retval .= PMA_RTN_getRowForList($item, $rowclass);            break;        case 'trigger':            $retval .= PMA_TRI_getRowForList($item, $rowclass);            break;        case 'event':            $retval .= PMA_EVN_getRowForList($item, $rowclass);            break;        default:            break;        }        $ct++;    }    $retval .= "    </table>\n";    $retval .= "</fieldset>\n";    $retval .= "<!-- LIST OF " . PMA_RTE_getWord('docu') . " END -->\n";    return $retval;} // end PMA_RTE_getList()/** * Creates the contents for a row in the list of routines * * @param    array    $routine    An array of routine data * @param    string   $rowclass   Empty or one of ['even'|'odd'] * * @return   string   HTML code of a row for the list of routines */function PMA_RTN_getRowForList($routine, $rowclass = ''){    global $ajax_class, $url_query, $db, $titles;    $sql_drop = sprintf('DROP %s IF EXISTS %s',                         $routine['ROUTINE_TYPE'],                         PMA_backquote($routine['SPECIFIC_NAME']));    $type_link = "item_type={$routine['ROUTINE_TYPE']}";    $retval  = "        <tr class='noclick $rowclass'>\n";    $retval .= "            <td>\n";    $retval .= "                <span class='drop_sql hide'>$sql_drop</span>\n";    $retval .= "                <strong>\n";    $retval .= "                    " . htmlspecialchars($routine['SPECIFIC_NAME']) . "\n";    $retval .= "                </strong>\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if ($routine['ROUTINE_DEFINITION'] !== null        && PMA_currentUserHasPrivilege('ALTER ROUTINE', $db)        && PMA_currentUserHasPrivilege('CREATE ROUTINE', $db)    ) {        $retval .= '                <a ' . $ajax_class['edit']                                         . ' href="db_routines.php?'                                         . $url_query                                         . '&amp;edit_item=1'                                         . '&amp;item_name=' . urlencode($routine['SPECIFIC_NAME'])                                         . '&amp;' . $type_link                                         . '">' . $titles['Edit'] . "</a>\n";    } else {        $retval .= "                {$titles['NoEdit']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if ($routine['ROUTINE_DEFINITION'] !== null        && PMA_currentUserHasPrivilege('EXECUTE', $db)    ) {        // Check if he routine has any input parameters. If it does,        // we will show a dialog to get values for these parameters,        // otherwise we can execute it directly.        $routine_details = PMA_RTN_getDataFromName(            $routine['SPECIFIC_NAME'],            $routine['ROUTINE_TYPE'],            false        );        if ($routine !== false) {            $execute_action = 'execute_routine';            for ($i=0; $i<$routine_details['item_num_params']; $i++) {                if ($routine_details['item_type'] == 'PROCEDURE'                    && $routine_details['item_param_dir'][$i] == 'OUT'                ) {                    continue;                }                $execute_action = 'execute_dialog';                break;            }            $retval .= '                <a ' . $ajax_class['exec']                                             . ' href="db_routines.php?'                                             . $url_query                                             . '&amp;' . $execute_action . '=1'                                             . '&amp;item_name=' . urlencode($routine['SPECIFIC_NAME'])                                             . '&amp;' . $type_link                                             . '">' . $titles['Execute'] . "</a>\n";        }    } else {        $retval .= "                {$titles['NoExecute']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= '                <a ' . $ajax_class['export']                                     . ' href="db_routines.php?'                                     . $url_query                                     . '&amp;export_item=1'                                     . '&amp;item_name=' . urlencode($routine['SPECIFIC_NAME'])                                     . '&amp;' . $type_link                                     . '">' . $titles['Export'] . "</a>\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if (PMA_currentUserHasPrivilege('ALTER ROUTINE', $db)) {        $retval .= '                <a ' . $ajax_class['drop']                                         . ' href="sql.php?'                                         . $url_query                                         . '&amp;sql_query=' . urlencode($sql_drop)                                         . '&amp;goto=db_routines.php' . urlencode("?db={$db}")                                         . '" >' . $titles['Drop'] . "</a>\n";    } else {        $retval .= "                {$titles['NoDrop']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                 {$routine['ROUTINE_TYPE']}\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                " . htmlspecialchars($routine['DTD_IDENTIFIER']) . "\n";    $retval .= "            </td>\n";    $retval .= "        </tr>\n";    return $retval;} // end PMA_RTN_getRowForList()/** * Creates the contents for a row in the list of triggers * * @param    array    $trigger    An array of routine data * @param    string   $rowclass   Empty or one of ['even'|'odd'] * * @return   string   HTML code of a cell for the list of triggers */function PMA_TRI_getRowForList($trigger, $rowclass = ''){    global $ajax_class, $url_query, $db, $table, $titles;    $retval  = "        <tr class='noclick $rowclass'>\n";    $retval .= "            <td>\n";    $retval .= "                <span class='drop_sql hide'>{$trigger['drop']}</span>\n";    $retval .= "                <strong>\n";    $retval .= "                    " . htmlspecialchars($trigger['name']) . "\n";    $retval .= "                </strong>\n";    $retval .= "            </td>\n";    if (empty($table)) {        $retval .= "            <td>\n";        $retval .= "                <a href='db_triggers.php?db={$db}"                                     . "&amp;table={$trigger['table']}'>"                                     . $trigger['table'] . "</a>\n";        $retval .= "            </td>\n";    }    $retval .= "            <td>\n";    if (PMA_currentUserHasPrivilege('TRIGGER', $db, $table)) {        $retval .= '                <a ' . $ajax_class['edit']                                         . ' href="db_triggers.php?'                                         . $url_query                                         . '&amp;edit_item=1'                                         . '&amp;item_name=' . urlencode($trigger['name'])                                         . '">' . $titles['Edit'] . "</a>\n";    } else {        $retval .= "                {$titles['NoEdit']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= '                    <a ' . $ajax_class['export']                                         . ' href="db_triggers.php?'                                         . $url_query                                         . '&amp;export_item=1'                                         . '&amp;item_name=' . urlencode($trigger['name'])                                         . '">' . $titles['Export'] . "</a>\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if (PMA_currentUserHasPrivilege('TRIGGER', $db)) {        $retval .= '                <a ' . $ajax_class['drop']                                         . ' href="sql.php?'                                         . $url_query                                         . '&amp;sql_query=' . urlencode($trigger['drop'])                                         . '&amp;goto=db_triggers.php' . urlencode("?db={$db}")                                         . '" >' . $titles['Drop'] . "</a>\n";    } else {        $retval .= "                {$titles['NoDrop']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                 {$trigger['action_timing']}\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                 {$trigger['event_manipulation']}\n";    $retval .= "            </td>\n";    $retval .= "        </tr>\n";    return $retval;} // end PMA_TRI_getRowForList()/** * Creates the contents for a row in the list of events * * @param    array    $event      An array of routine data * @param    string   $rowclass   Empty or one of ['even'|'odd'] * * @return   string   HTML code of a cell for the list of events */function PMA_EVN_getRowForList($event, $rowclass = ''){    global $ajax_class, $url_query, $db, $titles;    $sql_drop = sprintf(        'DROP EVENT IF EXISTS %s',        PMA_backquote($event['EVENT_NAME'])    );    $retval  = "        <tr class='noclick $rowclass'>\n";    $retval .= "            <td>\n";    $retval .= "                <span class='drop_sql hide'>$sql_drop</span>\n";    $retval .= "                <strong>\n";    $retval .= "                    " . htmlspecialchars($event['EVENT_NAME']) . "\n";    $retval .= "                </strong>\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                 {$event['STATUS']}\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if (PMA_currentUserHasPrivilege('EVENT', $db)) {        $retval .= '                <a ' . $ajax_class['edit']                                         . ' href="db_events.php?'                                         . $url_query                                         . '&amp;edit_item=1'                                         . '&amp;item_name=' . urlencode($event['EVENT_NAME'])                                         . '">' . $titles['Edit'] . "</a>\n";    } else {        $retval .= "                {$titles['NoEdit']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= '                <a ' . $ajax_class['export']                                     . ' href="db_events.php?'                                     . $url_query                                     . '&amp;export_item=1'                                     . '&amp;item_name=' . urlencode($event['EVENT_NAME'])                                     . '">' . $titles['Export'] . "</a>\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if (PMA_currentUserHasPrivilege('EVENT', $db)) {        $retval .= '                <a ' . $ajax_class['drop']                                         . ' href="sql.php?'                                         . $url_query                                         . '&amp;sql_query=' . urlencode($sql_drop)                                         . '&amp;goto=db_events.php' . urlencode("?db={$db}")                                         . '" >' . $titles['Drop'] . "</a>\n";    } else {        $retval .= "                {$titles['NoDrop']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                 {$event['EVENT_TYPE']}\n";    $retval .= "            </td>\n";    $retval .= "        </tr>\n";    return $retval;} // end PMA_EVN_getRowForList()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library for extracting information about the available storage engines * * @package PhpMyAdmin *//** * defines */define('PMA_ENGINE_SUPPORT_NO', 0);define('PMA_ENGINE_SUPPORT_DISABLED', 1);define('PMA_ENGINE_SUPPORT_YES', 2);define('PMA_ENGINE_SUPPORT_DEFAULT', 3);define('PMA_ENGINE_DETAILS_TYPE_PLAINTEXT', 0);define('PMA_ENGINE_DETAILS_TYPE_SIZE',      1);define('PMA_ENGINE_DETAILS_TYPE_NUMERIC',   2); //Has no effect yet...define('PMA_ENGINE_DETAILS_TYPE_BOOLEAN',   3); // 'ON' or 'OFF'/** * base Storage Engine Class * @package PhpMyAdmin */class PMA_StorageEngine{    /**     * @var string engine name     */    var $engine  = 'dummy';    /**     * @var string engine title/description     */    var $title   = 'PMA Dummy Engine Class';    /**     * @var string engine lang description     */    var $comment = 'If you read this text inside phpMyAdmin, something went wrong...';    /**     * @var integer engine supported by current server     */    var $support = PMA_ENGINE_SUPPORT_NO;    /**     * returns array of storage engines     *     * @static     * @staticvar array $storage_engines storage engines     * @access  public     * @return  array    of storage engines     */    static public function getStorageEngines()    {        static $storage_engines = null;        if (null == $storage_engines) {            if (PMA_DRIZZLE) {                $sql = "SELECT                        p.plugin_name            AS Engine,                        (CASE                            WHEN p.plugin_name = @@storage_engine THEN 'DEFAULT'                            WHEN p.is_active THEN 'YES'                            ELSE 'DISABLED' END) AS Support,                        m.module_description     AS Comment                    FROM data_dictionary.plugins p                        JOIN data_dictionary.modules m USING (module_name)                    WHERE p.plugin_type = 'StorageEngine'                        AND p.plugin_name NOT IN ('FunctionEngine', 'schema')";                $storage_engines = PMA_DBI_fetch_result($sql, 'Engine');            } else {                $storage_engines = PMA_DBI_fetch_result('SHOW STORAGE ENGINES', 'Engine');            }        }        return $storage_engines;    }    /**     * returns HTML code for storage engine select box     *     * @param string  $name                    The name of the select form element     * @param string  $id                      The ID of the form field     * @param string  $selected                The selected engine     * @param boolean $offerUnavailableEngines Should unavailable storage engines be offered?     *     * @static     * @return  string  html selectbox     */    static public function getHtmlSelect($name = 'engine', $id = null,      $selected = null, $offerUnavailableEngines = false)    {        $selected   = strtolower($selected);        $output     = '<select name="' . $name . '"'            . (empty($id) ? '' : ' id="' . $id . '"') . '>' . "\n";        foreach (PMA_StorageEngine::getStorageEngines() as $key => $details) {            // Don't show PERFORMANCE_SCHEMA engine (MySQL 5.5)            // Don't show MyISAM for Drizzle (allowed only for temporary tables)            if (! $offerUnavailableEngines                && ($details['Support'] == 'NO'                || $details['Support'] == 'DISABLED'                || $details['Engine'] == 'PERFORMANCE_SCHEMA')                || (PMA_DRIZZLE && $details['Engine'] == 'MyISAM')            ) {                continue;            }            $output .= '    <option value="' . htmlspecialchars($key). '"'                . (empty($details['Comment'])                    ? '' : ' title="' . htmlspecialchars($details['Comment']) . '"')                . (strtolower($key) == $selected || (empty($selected) && $details['Support'] == 'DEFAULT')                    ? ' selected="selected"' : '') . '>' . "\n"                . '        ' . htmlspecialchars($details['Engine']) . "\n"                . '    </option>' . "\n";        }        $output .= '</select>' . "\n";        return $output;    }    /**     * public static final PMA_StorageEngine getEngine()     *     * Loads the corresponding engine plugin, if available.     *     * @param string $engine The engine ID     *     * @return  object  The engine plugin     */    static public function getEngine($engine)    {        $engine = str_replace('/', '', str_replace('.', '', $engine));        $engine_lowercase_filename = strtolower($engine);        if (file_exists('./libraries/engines/' . $engine_lowercase_filename . '.lib.php')            && include_once './libraries/engines/' . $engine_lowercase_filename . '.lib.php'        ) {            $class_name = 'PMA_StorageEngine_' . $engine;            $engine_object = new $class_name($engine);        } else {            $engine_object = new PMA_StorageEngine($engine);        }        return $engine_object;    }    /**     * return true if given engine name is supported/valid, otherwise false     *     * @param string $engine name of engine     *     * @static     * @return  boolean whether $engine is valid or not     */    static public function isValid($engine)    {        if ($engine == "PBMS") {            return true;        }        $storage_engines = PMA_StorageEngine::getStorageEngines();        return isset($storage_engines[$engine]);    }    /**     * returns as HTML table of the engine's server variables     *     * @return string The table that was generated based on the retrieved information     */    function getHtmlVariables()    {        $odd_row    = false;        $ret        = '';        foreach ($this->getVariablesStatus() as $details) {            $ret .= '<tr class="' . ($odd_row ? 'odd' : 'even') . '">' . "\n"                  . '    <td>' . "\n";            if (! empty($details['desc'])) {                $ret .= '        ' . PMA_showHint($details['desc']) . "\n";            }            $ret .= '    </td>' . "\n"                  . '    <th>' . htmlspecialchars($details['title']) . '</th>' . "\n"                  . '    <td class="value">';            switch ($details['type']) {            case PMA_ENGINE_DETAILS_TYPE_SIZE:                $parsed_size = $this->resolveTypeSize($details['value']);                $ret .= $parsed_size[0] . '&nbsp;' . $parsed_size[1];                unset($parsed_size);                break;            case PMA_ENGINE_DETAILS_TYPE_NUMERIC:                $ret .= PMA_formatNumber($details['value']) . ' ';                break;            default:                $ret .= htmlspecialchars($details['value']) . '   ';            }            $ret .= '</td>' . "\n"                  . '</tr>' . "\n";            $odd_row = ! $odd_row;        }        if (! $ret) {            $ret = '<p>' . "\n"                 . '    ' . __('There is no detailed status information available for this storage engine.') . "\n"                 . '</p>' . "\n";        } else {            $ret = '<table class="data">' . "\n" . $ret . '</table>' . "\n";        }        return $ret;    }    /**     * returns the engine specific handling for     * PMA_ENGINE_DETAILS_TYPE_SIZE type variables.     *     * This function should be overridden when     * PMA_ENGINE_DETAILS_TYPE_SIZE type needs to be     * handled differently for a particular engine.     *     * @return string the formatted value and its unit     */    function resolveTypeSize($value)    {        return PMA_formatByteDown($value);    }    /**     * returns array with detailed info about engine specific server variables     *     * @return  array   with detailed info about specific engine server variables     */    function getVariablesStatus()    {        $variables = $this->getVariables();        $like = $this->getVariablesLikePattern();        if ($like) {            $like = " LIKE '" . $like . "' ";        } else {            $like = '';        }        $mysql_vars = array();        $sql_query = 'SHOW GLOBAL VARIABLES ' . $like . ';';        $res = PMA_DBI_query($sql_query);        while ($row = PMA_DBI_fetch_assoc($res)) {            if (isset($variables[$row['Variable_name']])) {                $mysql_vars[$row['Variable_name']] = $variables[$row['Variable_name']];            } elseif (! $like             && strpos(strtolower($row['Variable_name']), strtolower($this->engine)) !== 0) {                continue;            }            $mysql_vars[$row['Variable_name']]['value'] = $row['Value'];            if (empty($mysql_vars[$row['Variable_name']]['title'])) {                $mysql_vars[$row['Variable_name']]['title'] = $row['Variable_name'];            }            if (! isset($mysql_vars[$row['Variable_name']]['type'])) {                $mysql_vars[$row['Variable_name']]['type'] = PMA_ENGINE_DETAILS_TYPE_PLAINTEXT;            }        }        PMA_DBI_free_result($res);        return $mysql_vars;    }    function engine_init() {}    /**     * Constructor     *     * @param string $engine The engine ID     */    function __construct($engine)    {        $storage_engines = PMA_StorageEngine::getStorageEngines();        if (! empty($storage_engines[$engine])) {            $this->engine  = $engine;            $this->title   = $storage_engines[$engine]['Engine'];            $this->comment                = (isset($storage_engines[$engine]['Comment'])                    ? $storage_engines[$engine]['Comment']                    : '');            switch ($storage_engines[$engine]['Support']) {            case 'DEFAULT':                $this->support = PMA_ENGINE_SUPPORT_DEFAULT;                break;            case 'YES':                $this->support = PMA_ENGINE_SUPPORT_YES;                break;            case 'DISABLED':                $this->support = PMA_ENGINE_SUPPORT_DISABLED;                break;            case 'NO':            default:                $this->support = PMA_ENGINE_SUPPORT_NO;            }        } else {            $this->engine_init();        }    }    /**     * public String getTitle()     *     * Reveals the engine's title     *     * @return string The title     */    function getTitle()    {        return $this->title;    }    /**     * public String getComment()     *     * Fetches the server's comment about this engine     *     * @return string The comment     */    function getComment()    {        return $this->comment;    }    /**     * public String getSupportInformationMessage()     *     * @return  string   The localized message.     */    function getSupportInformationMessage()    {        switch ($this->support) {        case PMA_ENGINE_SUPPORT_DEFAULT:            $message = __('%s is the default storage engine on this MySQL server.');            break;        case PMA_ENGINE_SUPPORT_YES:            $message = __('%s is available on this MySQL server.');            break;        case PMA_ENGINE_SUPPORT_DISABLED:            $message = __('%s has been disabled for this MySQL server.');            break;        case PMA_ENGINE_SUPPORT_NO:        default:            $message = __('This MySQL server does not support the %s storage engine.');        }        return sprintf($message, htmlspecialchars($this->title));    }    /**     * public string[][] getVariables()     *     * Generates a list of MySQL variables that provide information about this     * engine. This function should be overridden when extending this class     * for a particular engine.     *     * @abstract     * @return   Array   The list of variables.     */    function getVariables()    {        return array();    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return $this->engine . '-storage-engine';    }    /**     * public string getVariablesLikePattern()     *     * @abstract     * @return  string  SQL query LIKE pattern     */    function getVariablesLikePattern()    {        return false;    }    /**     * public String[] getInfoPages()     *     * Returns a list of available information pages with labels     *     * @abstract     * @return  array    The list     */    function getInfoPages()    {        return array();    }    /**     * public String getPage()     *     * Generates the requested information page     *     * @param string $id The page ID     *     * @abstract     * @return  string      The page     *          boolean     or false on error.     */    function getPage($id)    {        return false;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Display table relations for viewing and editing * * includes phpMyAdmin relations and InnoDB relations * * @todo fix name handling: currently names with dots (.) are not properly handled for internal relations (but foreign keys relations are correct) * @todo foreign key constraints require both fields being of equal type and size * @todo check foreign fields to be from same type and size, all other makes no sense * @todo add an link to create an index required for constraints, or an option to do automatically * @todo if above todos are fullfilled we can add all fields meet requirements in the select dropdown * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'tbl_relation.js';require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_sql.php';/** * Gets tables informations */require_once './libraries/tbl_info.inc.php';// Note: in libraries/tbl_links.inc.php we get and display the table comment.// For InnoDB, this comment contains the REFER information but any update// has not been done yet (will be done in tbl_relation.php later).$avoid_show_comment = true;/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';$options_array = array(    'CASCADE'   => 'CASCADE',    'SET_NULL'  => 'SET NULL',    'NO_ACTION' => 'NO ACTION',    'RESTRICT'  => 'RESTRICT',);/** * Generate dropdown choices * * @param string $dropdown_question Message to display * @param string $select_name       Name of the <select> field * @param array  $choices           Choices for dropdown * @param string $selected_value    Selected value * * @return  string   The existing value (for selected) * * @access  public */function PMA_generate_dropdown($dropdown_question, $select_name, $choices, $selected_value){    echo htmlspecialchars($dropdown_question) . '&nbsp;&nbsp;';    echo '<select name="' . htmlspecialchars($select_name) . '">' . "\n";    foreach ($choices as $one_value => $one_label) {        echo '<option value="' . htmlspecialchars($one_value) . '"';        if ($selected_value == $one_value) {            echo ' selected="selected" ';        }        echo '>' . htmlspecialchars($one_label) . '</option>' . "\n";    }    echo '</select>' . "\n";}/** * Split a string on backquote pairs * * @param string $text original string * * @return  array   containing the elements (and their surrounding backquotes) * * @access  public */function PMA_backquote_split($text){    $elements = array();    $final_pos = strlen($text) - 1;    $pos = 0;    while ($pos <= $final_pos) {        $first_backquote = strpos($text, '`', $pos);        $second_backquote = strpos($text, '`', $first_backquote + 1);        // after the second one, there might be another one which means        // this is an escaped backquote        if ($second_backquote < $final_pos && '`' == $text[$second_backquote + 1]) {            $second_backquote = strpos($text, '`', $second_backquote + 2);        }        if (false === $first_backquote || false === $second_backquote) {            break;        }        $elements[] = substr($text, $first_backquote, $second_backquote - $first_backquote + 1);        $pos = $second_backquote + 1;    }    return($elements);}/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam();/** * Updates */if ($cfgRelation['relwork']) {    $existrel = PMA_getForeigners($db, $table, '', 'internal');}if (PMA_foreignkey_supported($tbl_type)) {    $existrel_foreign = PMA_getForeigners($db, $table, '', 'foreign');}if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);}// will be used in the logic for internal relations and foreign keys:$me_fields_name = isset($_REQUEST['fields_name'])    ? $_REQUEST['fields_name']    : null;// u p d a t e s   f o r   I n t e r n a l    r e l a t i o n sif (isset($destination) && $cfgRelation['relwork']) {    foreach ($destination as $master_field_md5 => $foreign_string) {        $upd_query = false;        // Map the fieldname's md5 back to its real name        $master_field = $me_fields_name[$master_field_md5];        if (! empty($foreign_string)) {            $foreign_string = trim($foreign_string, '`');            list($foreign_db, $foreign_table, $foreign_field) = explode('.', $foreign_string);            if (! isset($existrel[$master_field])) {                $upd_query  = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation'])                            . '(master_db, master_table, master_field, foreign_db, foreign_table, foreign_field)'                            . ' values('                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($table) . '\', '                            . '\'' . PMA_sqlAddSlashes($master_field) . '\', '                            . '\'' . PMA_sqlAddSlashes($foreign_db) . '\', '                            . '\'' . PMA_sqlAddSlashes($foreign_table) . '\','                            . '\'' . PMA_sqlAddSlashes($foreign_field) . '\')';            } elseif ($existrel[$master_field]['foreign_db'] . '.' .$existrel[$master_field]['foreign_table'] . '.' . $existrel[$master_field]['foreign_field'] != $foreign_string) {                $upd_query  = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation']) . ' SET'                            . ' foreign_db       = \'' . PMA_sqlAddSlashes($foreign_db) . '\', '                            . ' foreign_table    = \'' . PMA_sqlAddSlashes($foreign_table) . '\', '                            . ' foreign_field    = \'' . PMA_sqlAddSlashes($foreign_field) . '\' '                            . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                            . ' AND master_field = \'' . PMA_sqlAddSlashes($master_field) . '\'';            } // end if... else....        } elseif (isset($existrel[$master_field])) {            $upd_query      = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation'])                            . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                            . ' AND master_field = \'' . PMA_sqlAddSlashes($master_field) . '\'';        } // end if... else....        if ($upd_query) {            PMA_query_as_controluser($upd_query);        }    } // end while} // end if (updates for internal relations)// u p d a t e s    f o r    f o r e i g n    k e y s// (for now, one index name only; we keep the definitions if the// foreign db is not the same)// I use $sql_query to be able to display directly the query via// PMA_showMessage()if (isset($_REQUEST['destination_foreign'])) {    $display_query = '';    $seen_error = false;    foreach ($_REQUEST['destination_foreign'] as $master_field_md5 => $foreign_string) {        // Map the fieldname's md5 back to it's real name        $master_field = $me_fields_name[$master_field_md5];        if (! empty($foreign_string)) {            list($foreign_db, $foreign_table, $foreign_field) = PMA_backquote_split($foreign_string);            if (! isset($existrel_foreign[$master_field])) {                // no key defined for this field                // The next few lines are repeated below, so they                // could be put in an include file                // Note: I tried to enclose the db and table name with                // backquotes but MySQL 4.0.16 did not like the syntax                // (for example: `base2`.`table1`)                $sql_query  = 'ALTER TABLE ' . PMA_backquote($table)                            . ' ADD FOREIGN KEY ('                            . PMA_backquote($master_field) . ')'                            . ' REFERENCES '                            . $foreign_db . '.'                            . $foreign_table . '('                            . $foreign_field . ')';                if (! empty($_REQUEST['on_delete'][$master_field_md5])) {                    $sql_query .= ' ON DELETE ' . $options_array[$_REQUEST['on_delete'][$master_field_md5]];                }                if (! empty($_REQUEST['on_update'][$master_field_md5])) {                    $sql_query .= ' ON UPDATE ' . $options_array[$_REQUEST['on_update'][$master_field_md5]];                }                $sql_query .= ';';                $display_query .= $sql_query . "\n";                // end repeated code            } elseif (PMA_backquote($existrel_foreign[$master_field]['foreign_db']) != $foreign_db                || PMA_backquote($existrel_foreign[$master_field]['foreign_table']) != $foreign_table                || PMA_backquote($existrel_foreign[$master_field]['foreign_field']) != $foreign_field                || ($_REQUEST['on_delete'][$master_field_md5] != (!empty($existrel_foreign[$master_field]['on_delete']) ? $existrel_foreign[$master_field]['on_delete'] : 'RESTRICT'))                || ($_REQUEST['on_update'][$master_field_md5] != (!empty($existrel_foreign[$master_field]['on_update']) ? $existrel_foreign[$master_field]['on_update'] : 'RESTRICT'))                   ) {                // another foreign key is already defined for this field                // or                // an option has been changed for ON DELETE or ON UPDATE                // remove existing key and add the new one                $sql_query  = 'ALTER TABLE ' . PMA_backquote($table)                            . ' DROP FOREIGN KEY '                            . PMA_backquote($existrel_foreign[$master_field]['constraint']) . ', '                            . 'ADD FOREIGN KEY ('                            . PMA_backquote($master_field) . ')'                            . ' REFERENCES '                            . $foreign_db . '.'                            . $foreign_table . '('                            . $foreign_field . ')';                if (! empty($_REQUEST['on_delete'][$master_field_md5])) {                    $sql_query   .= ' ON DELETE '                        . $options_array[$_REQUEST['on_delete'][$master_field_md5]];                }                if (! empty($_REQUEST['on_update'][$master_field_md5])) {                    $sql_query   .= ' ON UPDATE '                        . $options_array[$_REQUEST['on_update'][$master_field_md5]];                }                $sql_query .= ';';                $display_query .= $sql_query . "\n";            } // end if... else....        } elseif (isset($existrel_foreign[$master_field])) {            $sql_query  = 'ALTER TABLE ' . PMA_backquote($table)                    . ' DROP FOREIGN KEY '                    . PMA_backquote($existrel_foreign[$master_field]['constraint']);            $sql_query .= ';';            $display_query .= $sql_query . "\n";        } // end if... else....        if (! empty($sql_query)) {            PMA_DBI_try_query($sql_query);            $tmp_error = PMA_DBI_getError();            if (! empty($tmp_error)) {                $seen_error = true;            }            if (substr($tmp_error, 1, 4) == '1216'                ||  substr($tmp_error, 1, 4) == '1452'            ) {                PMA_mysqlDie($tmp_error, $sql_query, false, '', false);                echo PMA_showMySQLDocu('manual_Table_types', 'InnoDB_foreign_key_constraints') . "\n";            }            if (substr($tmp_error, 1, 4) == '1005') {                $message = PMA_Message::error(__('Error creating foreign key on %1$s (check data types)'));                $message->addParam($master_field);                $message->display();                echo PMA_showMySQLDocu('manual_Table_types', 'InnoDB_foreign_key_constraints') . "\n";            }            unset($tmp_error);            $sql_query = '';        }    } // end foreach    if (!empty($display_query)) {        if ($seen_error) {            PMA_showMessage(__('Error'), null, 'error');        } else {            PMA_showMessage(__('Your SQL query has been executed successfully'), null, 'success');        }    }} // end if isset($destination_foreign)// U p d a t e s   f o r   d i s p l a y   f i e l dif ($cfgRelation['displaywork'] && isset($display_field)) {    $upd_query = false;    if ($disp) {        if ($display_field != '') {            $upd_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' SET display_field = \'' . PMA_sqlAddSlashes($display_field) . '\''                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        } else {            $upd_query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        }    } elseif ($display_field != '') {        $upd_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                   . '(db_name, table_name, display_field) '                   . ' VALUES('                   . '\'' . PMA_sqlAddSlashes($db) . '\','                   . '\'' . PMA_sqlAddSlashes($table) . '\','                   . '\'' . PMA_sqlAddSlashes($display_field) . '\')';    }    if ($upd_query) {        PMA_query_as_controluser($upd_query);    }} // end if// If we did an update, refresh our dataif (isset($destination) && $cfgRelation['relwork']) {    $existrel = PMA_getForeigners($db, $table, '', 'internal');}if (isset($destination_foreign) && PMA_foreignkey_supported($tbl_type)) {    $existrel_foreign = PMA_getForeigners($db, $table, '', 'foreign');}if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);}/** * Dialog */// common formecho '<form method="post" action="tbl_relation.php">' . "\n";echo PMA_generate_common_hidden_inputs($db, $table);// relationsif ($cfgRelation['relwork'] || PMA_foreignkey_supported($tbl_type)) {    // To choose relations we first need all tables names in current db    // and if the main table supports foreign keys    // we use SHOW TABLE STATUS because we need to find other tables of the    // same engine.    if (PMA_foreignkey_supported($tbl_type)) {        $tab_query           = 'SHOW TABLE STATUS FROM ' . PMA_backquote($db);        // [0] of the row is the name        // [1] is the type    } else {        $tab_query           = 'SHOW TABLES FROM ' . PMA_backquote($db);        // [0] of the row is the name    }    $tab_rs              = PMA_DBI_query($tab_query, null, PMA_DBI_QUERY_STORE);    $selectboxall[] = '';    $selectboxall_foreign[] = '';    while ($curr_table = PMA_DBI_fetch_row($tab_rs)) {        $current_table = new PMA_Table($curr_table[0], $db);        // explicitely ask for non-quoted list of indexed columns        $selectboxall = array_merge($selectboxall, $current_table->getUniqueColumns($backquoted = false));        // if foreign keys are supported, collect all keys from other        // tables of the same engine        if (PMA_foreignkey_supported($tbl_type)            && isset($curr_table[1])            && strtoupper($curr_table[1]) == $tbl_type        ) {             // explicitely ask for non-quoted list of indexed columns             // need to obtain backquoted values to support dots inside values             $selectboxall_foreign = array_merge($selectboxall_foreign, $current_table->getIndexedColumns($backquoted = true));        }    } // end while over tables} // end if// Now find out the columns of our $table// need to use PMA_DBI_QUERY_STORE with PMA_DBI_num_rows() in mysqli$columns = PMA_DBI_get_columns($db, $table);if (count($columns) > 0) {    foreach ($columns as $row) {        $save_row[] = $row;    }    $saved_row_cnt  = count($save_row);    ?>    <fieldset>    <legend><?php echo __('Relations'); ?></legend>    <table>    <tr><th><?php echo __('Column'); ?></th>    <?php    if ($cfgRelation['relwork']) {        echo '<th>' . __('Internal relation');        if (PMA_foreignkey_supported($tbl_type)) {            echo PMA_showHint(__('An internal relation is not necessary when a corresponding FOREIGN KEY relation exists.'));        }        echo '</th>';    }    if (PMA_foreignkey_supported($tbl_type)) {        // this does not have to be translated, it's part of the MySQL syntax        echo '<th colspan="2">' . __('Foreign key constraint') . ' (' . $tbl_type . ')';        echo '</th>';    }    ?>    </tr>    <?php    $odd_row = true;    for ($i = 0; $i < $saved_row_cnt; $i++) {        $myfield = $save_row[$i]['Field'];        // Use an md5 as array index to avoid having special characters in the name atttibure (see bug #1746964 )        $myfield_md5 = md5($myfield);        $myfield_html = htmlspecialchars($myfield);        ?>    <tr class="<?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">        <td align="center">            <strong><?php echo $myfield_html; ?></strong>            <input type="hidden" name="fields_name[<?php echo $myfield_md5; ?>]" value="<?php echo $myfield_html; ?>"/>        </td>        <?php        if ($cfgRelation['relwork']) {            ?>        <td><select name="destination[<?php echo $myfield_md5; ?>]">            <?php            // PMA internal relations            if (isset($existrel[$myfield])) {                $foreign_field    = $existrel[$myfield]['foreign_db'] . '.'                         . $existrel[$myfield]['foreign_table'] . '.'                         . $existrel[$myfield]['foreign_field'];            } else {                $foreign_field    = false;            }            $seen_key = false;            foreach ($selectboxall as $value) {                echo '                '                     . '<option value="' . htmlspecialchars($value) . '"';                if ($foreign_field && $value == $foreign_field) {                    echo ' selected="selected"';                    $seen_key = true;                }                echo '>' . htmlspecialchars($value) . '</option>'. "\n";            } // end while            // if the link defined in relationtable points to a foreign field            // that is not a key in the foreign table, we show the link            // (will not be shown with an arrow)            if ($foreign_field && !$seen_key) {                echo '                '                    .'<option value="' . htmlspecialchars($foreign_field) . '"'                    .' selected="selected"'                    .'>' . $foreign_field . '</option>'. "\n";            }            ?>            </select>        </td>            <?php        } // end if (internal relations)        if (PMA_foreignkey_supported($tbl_type)) {            echo '<td>';            if (!empty($save_row[$i]['Key'])) {                ?>            <span class="formelement">            <select name="destination_foreign[<?php echo $myfield_md5; ?>]" class="referenced_column_dropdown">                <?php                if (isset($existrel_foreign[$myfield])) {                    // need to backquote to support a dot character inside                    // an element                    $foreign_field    = PMA_backquote($existrel_foreign[$myfield]['foreign_db']) . '.'                             . PMA_backquote($existrel_foreign[$myfield]['foreign_table']) . '.'                             . PMA_backquote($existrel_foreign[$myfield]['foreign_field']);                } else {                    $foreign_field    = false;                }                $found_foreign_field = false;                foreach ($selectboxall_foreign as $value) {                    echo '                '                         . '<option value="' . htmlspecialchars($value) . '"';                    if ($foreign_field && $value == $foreign_field) {                        echo ' selected="selected"';                        $found_foreign_field = true;                    }                    echo '>' . htmlspecialchars($value) . '</option>'. "\n";                } // end while                // we did not find the foreign field in the tables of current db,                // must be defined in another db so show it to avoid erasing it                if (!$found_foreign_field && $foreign_field) {                    echo '                '                         . '<option value="' . htmlspecialchars($foreign_field) . '"';                    echo ' selected="selected"';                    echo '>' . $foreign_field . '</option>' . "\n";                }                ?>            </select>            </span>            <span class="formelement">                <?php                // For ON DELETE and ON UPDATE, the default action                // is RESTRICT as per MySQL doc; however, a SHOW CREATE TABLE                // won't display the clause if it's set as RESTRICT.                PMA_generate_dropdown('ON DELETE',                    'on_delete[' . $myfield_md5 . ']',                    $options_array,                    isset($existrel_foreign[$myfield]['on_delete']) ? $existrel_foreign[$myfield]['on_delete']: 'RESTRICT');                echo '</span>' . "\n"                    .'<span class="formelement">' . "\n";                PMA_generate_dropdown('ON UPDATE',                    'on_update[' . $myfield_md5 . ']',                    $options_array,                    isset($existrel_foreign[$myfield]['on_update']) ? $existrel_foreign[$myfield]['on_update']: 'RESTRICT');                echo '</span>' . "\n";            } else {                echo __('No index defined!');            } // end if (a key exists)            echo '        </td>';        } // end if (InnoDB)        ?>    </tr>        <?php    } // end for    unset( $myfield, $myfield_md5, $myfield_html);    echo '    </table>' . "\n";    echo '</fieldset>' . "\n";    if ($cfgRelation['displaywork']) {        // Get "display_field" infos        $disp = PMA_getDisplayField($db, $table);        ?>    <fieldset>        <label><?php echo __('Choose column to display') . ': '; ?></label>        <select name="display_field">            <option value="">---</option>        <?php        foreach ($save_row AS $row) {            echo '            <option value="' . htmlspecialchars($row['Field']) . '"';            if (isset($disp) && $row['Field'] == $disp) {                echo ' selected="selected"';            }            echo '>' . htmlspecialchars($row['Field']) . '</option>'. "\n";        } // end while        ?>        </select>    </fieldset>        <?php    } // end if (displayworks)    ?>    <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Save'); ?>" />    </fieldset></form>    <?php} // end if (we have columns in this table)/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Formset processing library * * @package PhpMyAdmin-setup *//** * Processes forms registered in $form_display, handles error correction * * @param FormDisplay $form_display */function process_formset(FormDisplay $form_display){    if (filter_input(INPUT_GET, 'mode') == 'revert') {        // revert erroneous fields to their default values        $form_display->fixErrors();        // drop post data        header('HTTP/1.1 303 See Other');        header('Location: index.php');        exit;    }    if (!$form_display->process(false)) {        // handle form view and failed POST        $form_display->display(true, true);    } else {        // check for form errors        if ($form_display->hasErrors()) {            // form has errors, show warning            $separator = PMA_get_arg_separator('html');            $page = filter_input(INPUT_GET, 'page');            $formset = filter_input(INPUT_GET, 'formset');            $formset = $formset ? "{$separator}formset=$formset" : '';            $id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);            if ($id === null && $page == 'servers') {                // we've just added a new server, get it's id                $id = ConfigFile::getInstance()->getServerCount();            }            $id = $id ? "{$separator}id=$id" : '';            ?>            <div class="error">                <h4><?php echo __('Warning') ?></h4>                <?php echo __('Submitted form contains errors') ?><br />                <a href="?page=<?php echo $page . $formset . $id . $separator ?>mode=revert"><?php echo __('Try to revert erroneous fields to their default values') ?></a>            </div>            <?php $form_display->displayErrors() ?>            <a class="btn" href="index.php"><?php echo __('Ignore errors') ?></a>            &nbsp;            <a class="btn" href="?page=<?php echo $page . $formset . $id . $separator ?>mode=edit"><?php echo __('Show form') ?></a>            <?php        } else {            // drop post data            header('HTTP/1.1 303 See Other');            header('Location: index.php');            exit;        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */$GLOBALS['data_dictionary_relations'] = array(    'CHARACTER_SETS' => array(        'DEFAULT_COLLATE_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLLATIONS' => array(        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        )    ),    'COLUMNS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        ),        'COLLATION_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'INDEXES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'INDEX_PARTS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'INNODB_LOCKS' => array(        'LOCK_TRX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_TRX',            'foreign_field' => 'TRX_ID'        )    ),    'INNODB_LOCK_WAITS' => array(        'REQUESTING_TRX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_TRX',            'foreign_field' => 'TRX_ID'        ),        'REQUESTED_LOCK_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_LOCKS',            'foreign_field' => 'LOCK_ID'        ),        'BLOCKING_TRX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_TRX',            'foreign_field' => 'TRX_ID'        ),        'BLOCKING_LOCK_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_LOCKS',            'foreign_field' => 'LOCK_ID'        )    ),    'INNODB_SYS_COLUMNS' => array(        'TABLE_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_TABLES',            'foreign_field' => 'TABLE_ID'        )    ),    'INNODB_SYS_FIELDS' => array(        'INDEX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_INDEXES',            'foreign_field' => 'INDEX_ID'        )    ),    'INNODB_SYS_INDEXES' => array(        'TABLE_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_TABLES',            'foreign_field' => 'TABLE_ID'        )    ),    'INNODB_SYS_TABLESTATS' => array(        'TABLE_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_TABLES',            'foreign_field' => 'TABLE_ID'        )    ),    'PLUGINS' => array(        'MODULE_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'MODULES',            'foreign_field' => 'MODULE_NAME'        )    ),    'SCHEMAS' => array(        'DEFAULT_COLLATION_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'TABLES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_COLLATION' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'TABLE_CACHE' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLE_CONSTRAINTS' => array(        'CONSTRAINT_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLE_DEFINITION_CACHE' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ));?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * the MyISAM storage engine * @package PhpMyAdmin-Engines */class PMA_StorageEngine_pbxt extends PMA_StorageEngine{    /**     * returns array with variable names dedicated to PBXT storage engine     *     * @return  array   variable names     */    function getVariables()    {        return array(            'pbxt_index_cache_size' => array(                'title' => __('Index cache size'),                'desc'  => __('This is the amount of memory allocated to the index cache. Default value is 32MB. The memory allocated here is used only for caching index pages.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_record_cache_size' => array(                'title' => __('Record cache size'),                'desc'  => __('This is the amount of memory allocated to the record cache used to cache table data. The default value is 32MB. This memory is used to cache changes to the handle data (.xtd) and row pointer (.xtr) files.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_log_cache_size' => array(                'title' => __('Log cache size'),                'desc'  => __('The amount of memory allocated to the transaction log cache used to cache on transaction log data. The default is 16MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_log_file_threshold' => array(                'title' => __('Log file threshold'),                'desc'  => __('The size of a transaction log before rollover, and a new log is created. The default value is 16MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_transaction_buffer_size' => array(                'title' => __('Transaction buffer size'),                'desc'  => __('The size of the global transaction log buffer (the engine allocates 2 buffers of this size). The default is 1MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_checkpoint_frequency' => array(                'title' => __('Checkpoint frequency'),                'desc'  => __('The amount of data written to the transaction log before a checkpoint is performed. The default value is 24MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_data_log_threshold' => array(                'title' => __('Data log threshold'),                'desc'  => __('The maximum size of a data log file. The default value is 64MB. PBXT can create a maximum of 32000 data logs, which are used by all tables. So the value of this variable can be increased to increase the total amount of data that can be stored in the database.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_garbage_threshold' => array(                'title' => __('Garbage threshold'),                'desc'  => __('The percentage of garbage in a data log file before it is compacted. This is a value between 1 and 99. The default is 50.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC            ),            'pbxt_log_buffer_size' => array(                'title' => __('Log buffer size'),                'desc'  => __('The size of the buffer used when writing a data log. The default is 256MB. The engine allocates one buffer per thread, but only if the thread is required to write a data log.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_data_file_grow_size' => array(                'title' => __('Data file grow size'),                'desc'  => __('The grow size of the handle data (.xtd) files.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_row_file_grow_size' => array(                'title' => __('Row file grow size'),                'desc'  => __('The grow size of the row pointer (.xtr) files.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_log_file_count' => array(                'title' => __('Log file count'),                'desc'  => __('This is the number of transaction log files (pbxt/system/xlog*.xt) the system will maintain. If the number of logs exceeds this value then old logs will be deleted, otherwise they are renamed and given the next highest number.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC            ),        );    }    /**     * returns the pbxt engine specific handling for     * PMA_ENGINE_DETAILS_TYPE_SIZE variables.     *     * @param   string   $formatted_size   the size expression (for example 8MB)     *     * @return string the formatted value and its unit     */    function resolveTypeSize($formatted_size)    {        if (preg_match('/^[0-9]+[a-zA-Z]+$/', $formatted_size)) {            $value = PMA_extractValueFromFormattedSize($formatted_size);        } else {            $value = $formatted_size;        }        return PMA_formatByteDown($value);    }    //--------------------    function getInfoPages()    {        $pages = array();        $pages['Documentation'] = __('Documentation');        return $pages;    }    //--------------------    function getPage($id)    {        if (! array_key_exists($id, $this->getInfoPages())) {            return false;        }        $id = 'getPage' . $id;        return $this->$id();    }    function getPageDocumentation()    {        $output = '<p>'        . sprintf(__('Documentation and further information about PBXT can be found on the %sPrimeBase XT Home Page%s.'), '<a href="' . PMA_linkURL('http://www.primebase.com/xt/') . '" target="_blank">', '</a>')        . '</p>' . "\n"        . '<h3>' . __('Related Links') . '</h3>' . "\n"        . '<ul>' . "\n"        . '<li><a href="' . PMA_linkURL('http://pbxt.blogspot.com/') . '" target="_blank">' . __('The PrimeBase XT Blog by Paul McCullagh') . '</a></li>' . "\n"        . '<li><a href="' . PMA_linkURL('http://www.blobstreaming.org/') . '" target="_blank">' . __('The PrimeBase Media Streaming (PBMS) home page') . '</a></li>' . "\n"        . '</ul>' . "\n";        return $output;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build XML dumps of tables * * @package PhpMyAdmin-Export * @subpackage XML */if (! defined('PHPMYADMIN')) {    exit;}if (!strlen($GLOBALS['db'])) { /* Can't do server export */    return;}if (isset($plugin_list)) {    $plugin_list['xml'] = array(        'text' => __('XML'),        'extension' => 'xml',        'mime_type' => 'text/xml',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group')            ),        'options_text' => __('Options')        );    /* Export structure */    $plugin_list['xml']['options'][] = array(        'type' => 'begin_group',        'name' => 'structure',        'text' => __('Object creation options (all are recommended)')        );    if (!PMA_DRIZZLE) {        $plugin_list['xml']['options'][] = array(            'type' => 'bool',            'name' => 'export_functions',            'text' => __('Functions')            );        $plugin_list['xml']['options'][] = array(            'type' => 'bool',            'name' => 'export_procedures',            'text' => __('Procedures')            );    }    $plugin_list['xml']['options'][] = array(        'type' => 'bool',        'name' => 'export_tables',        'text' => __('Tables')        );    if (!PMA_DRIZZLE) {        $plugin_list['xml']['options'][] = array(            'type' => 'bool',            'name' => 'export_triggers',            'text' => __('Triggers')            );        $plugin_list['xml']['options'][] = array(            'type' => 'bool',            'name' => 'export_views',            'text' => __('Views')            );    }    $plugin_list['xml']['options'][] = array(        'type' => 'end_group'        );    /* Data */    $plugin_list['xml']['options'][] = array(        'type' => 'begin_group',        'name' => 'data',        'text' => __('Data dump options')        );    $plugin_list['xml']['options'][] = array(        'type' => 'bool',        'name' => 'export_contents',        'text' => __('Export contents')        );    $plugin_list['xml']['options'][] = array(        'type' => 'end_group'        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        $foot = '</pma_xml_export>';        return PMA_exportOutputHandler($foot);    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        global $crlf;        global $cfg;        global $db;        global $table;        global $tables;        $export_struct = isset($GLOBALS['xml_export_functions']) || isset($GLOBALS['xml_export_procedures'])            || isset($GLOBALS['xml_export_tables']) || isset($GLOBALS['xml_export_triggers'])            || isset($GLOBALS['xml_export_views']);        $export_data = isset($GLOBALS['xml_export_contents']) ? true : false;        if ($GLOBALS['output_charset_conversion']) {            $charset = $GLOBALS['charset_of_file'];        } else {            $charset = 'utf-8';        }        $head  =  '<?xml version="1.0" encoding="' . $charset . '"?>' . $crlf               .  '<!--' . $crlf               .  '- phpMyAdmin XML Dump' . $crlf               .  '- version ' . PMA_VERSION . $crlf               .  '- http://www.phpmyadmin.net' . $crlf               .  '-' . $crlf               .  '- ' . __('Host') . ': ' . $cfg['Server']['host'];        if (!empty($cfg['Server']['port'])) {             $head .= ':' . $cfg['Server']['port'];        }        $head .= $crlf               .  '- ' . __('Generation Time') . ': ' . PMA_localisedDate() . $crlf               .  '- ' . __('Server version') . ': ' . PMA_MYSQL_STR_VERSION . $crlf               .  '- ' . __('PHP Version') . ': ' . phpversion() . $crlf               .  '-->' . $crlf . $crlf;        $head .= '<pma_xml_export version="1.0"' . (($export_struct) ? ' xmlns:pma="http://www.phpmyadmin.net/some_doc_url/"' : '') . '>' . $crlf;        if ($export_struct) {            if (PMA_DRIZZLE) {                $result = PMA_DBI_fetch_result("                    SELECT                        'utf8' AS DEFAULT_CHARACTER_SET_NAME,                        DEFAULT_COLLATION_NAME                    FROM data_dictionary.SCHEMAS                    WHERE SCHEMA_NAME = '" . PMA_sqlAddSlashes($db) . "'");            } else {                $result = PMA_DBI_fetch_result('SELECT `DEFAULT_CHARACTER_SET_NAME`, `DEFAULT_COLLATION_NAME` FROM `information_schema`.`SCHEMATA` WHERE `SCHEMA_NAME` = \''.PMA_sqlAddSlashes($db).'\' LIMIT 1');            }            $db_collation = $result[0]['DEFAULT_COLLATION_NAME'];            $db_charset = $result[0]['DEFAULT_CHARACTER_SET_NAME'];            $head .= '    <!--' . $crlf;            $head .= '    - Structure schemas' . $crlf;            $head .= '    -->' . $crlf;            $head .= '    <pma:structure_schemas>' . $crlf;            $head .= '        <pma:database name="' . htmlspecialchars($db) . '" collation="' . $db_collation . '" charset="' . $db_charset . '">' . $crlf;            if (count($tables) == 0) {                $tables[] = $table;            }            foreach ($tables as $table) {                // Export tables and views                $result = PMA_DBI_fetch_result('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table), 0);                $tbl =  $result[$table][1];                $is_view = PMA_Table::isView($db, $table);                if ($is_view) {                    $type = 'view';                } else {                    $type = 'table';                }                if ($is_view && ! isset($GLOBALS['xml_export_views'])) {                    continue;                }                if (! $is_view && ! isset($GLOBALS['xml_export_tables'])) {                    continue;                }                $head .= '            <pma:' . $type . ' name="' . $table . '">' . $crlf;                $tbl = "                " . htmlspecialchars($tbl);                $tbl = str_replace("\n", "\n                ", $tbl);                $head .= $tbl . ';' . $crlf;                $head .= '            </pma:' . $type . '>' . $crlf;                if (isset($GLOBALS['xml_export_triggers']) && $GLOBALS['xml_export_triggers']) {                    // Export triggers                    $triggers = PMA_DBI_get_triggers($db, $table);                    if ($triggers) {                        foreach ($triggers as $trigger) {                            $code = $trigger['create'];                            $head .= '            <pma:trigger name="' . $trigger['name'] . '">' . $crlf;                            // Do some formatting                            $code = substr(rtrim($code), 0, -3);                            $code = "                " . htmlspecialchars($code);                            $code = str_replace("\n", "\n                ", $code);                            $head .= $code . $crlf;                            $head .= '            </pma:trigger>' . $crlf;                        }                        unset($trigger);                        unset($triggers);                    }                }            }            if (isset($GLOBALS['xml_export_functions']) && $GLOBALS['xml_export_functions']) {                // Export functions                $functions = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');                if ($functions) {                    foreach ($functions as $function) {                        $head .= '            <pma:function name="' . $function . '">' . $crlf;                        // Do some formatting                        $sql = PMA_DBI_get_definition($db, 'FUNCTION', $function);                        $sql = rtrim($sql);                        $sql = "                " . htmlspecialchars($sql);                        $sql = str_replace("\n", "\n                ", $sql);                        $head .= $sql . $crlf;                        $head .= '            </pma:function>' . $crlf;                    }                    unset($create_func);                    unset($function);                    unset($functions);                }            }            if (isset($GLOBALS['xml_export_procedures']) && $GLOBALS['xml_export_procedures']) {                // Export procedures                $procedures = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');                if ($procedures) {                    foreach ($procedures as $procedure) {                        $head .= '            <pma:procedure name="' . $procedure . '">' . $crlf;                        // Do some formatting                        $sql = PMA_DBI_get_definition($db, 'PROCEDURE', $procedure);                        $sql = rtrim($sql);                        $sql = "                " . htmlspecialchars($sql);                        $sql = str_replace("\n", "\n                ", $sql);                        $head .= $sql . $crlf;                        $head .= '            </pma:procedure>' . $crlf;                    }                    unset($create_proc);                    unset($procedure);                    unset($procedures);                }            }            unset($result);            $head .= '        </pma:database>' . $crlf;            $head .= '    </pma:structure_schemas>' . $crlf;            if ($export_data) {                $head .= $crlf;            }        }        return PMA_exportOutputHandler($head);    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        global $crlf;        if (isset($GLOBALS['xml_export_contents']) && $GLOBALS['xml_export_contents']) {            $head = '    <!--' . $crlf                  . '    - ' . __('Database') . ': ' .  '\'' . $db . '\'' . $crlf                  . '    -->' . $crlf                  . '    <database name="' . htmlspecialchars($db) . '">' . $crlf;            return PMA_exportOutputHandler($head);        } else {            return true;        }    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        global $crlf;        if (isset($GLOBALS['xml_export_contents']) && $GLOBALS['xml_export_contents']) {            return PMA_exportOutputHandler('    </database>' . $crlf);        } else {            return true;        }    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in XML format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        if (isset($GLOBALS['xml_export_contents']) && $GLOBALS['xml_export_contents']) {            $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);            $columns_cnt = PMA_DBI_num_fields($result);            $columns = array();            for ($i = 0; $i < $columns_cnt; $i++) {                $columns[$i] = stripslashes(str_replace(' ', '_', PMA_DBI_field_name($result, $i)));            }            unset($i);            $buffer      = '        <!-- ' . __('Table') . ' ' . $table . ' -->' . $crlf;            if (!PMA_exportOutputHandler($buffer)) {                return false;            }            while ($record = PMA_DBI_fetch_row($result)) {                $buffer         = '        <table name="' . htmlspecialchars($table) . '">' . $crlf;                for ($i = 0; $i < $columns_cnt; $i++) {                    // If a cell is NULL, still export it to preserve the XML structure                    if (!isset($record[$i]) || is_null($record[$i])) {                        $record[$i] = 'NULL';                    }                    $buffer .= '            <column name="' . htmlspecialchars($columns[$i]) . '">' . htmlspecialchars((string)$record[$i])                            .  '</column>' . $crlf;                }                $buffer         .= '        </table>' . $crlf;                if (!PMA_exportOutputHandler($buffer)) {                    return false;                }            }            PMA_DBI_free_result($result);        }        return true;    } // end of the 'PMA_getTableXML()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Prepares the $column_order array * * @return array */function PMA_getColumnOrder(){    $column_order['DEFAULT_COLLATION_NAME'] = array(            'disp_name' => __('Collation'),            'description_function' => 'PMA_getCollationDescr',            'format'    => 'string',            'footer'    => PMA_getServerCollation(),        );    $column_order['SCHEMA_TABLES'] = array(        'disp_name' => __('Tables'),        'format'    => 'number',        'footer'    => 0,    );    $column_order['SCHEMA_TABLE_ROWS'] = array(        'disp_name' => __('Rows'),        'format'    => 'number',        'footer'    => 0,    );    $column_order['SCHEMA_DATA_LENGTH'] = array(        'disp_name' => __('Data'),        'format'    => 'byte',        'footer'    => 0,    );    $column_order['SCHEMA_INDEX_LENGTH'] = array(        'disp_name' => __('Indexes'),        'format'    => 'byte',        'footer'    => 0,    );    $column_order['SCHEMA_LENGTH'] = array(        'disp_name' => __('Total'),        'format'    => 'byte',        'footer'    => 0,    );    $column_order['SCHEMA_DATA_FREE'] = array(        'disp_name' => __('Overhead'),        'format'    => 'byte',        'footer'    => 0,    );    return $column_order;}/* * Builds the HTML td elements for one database to display in the list * of databases from server_databases.php (which can be modified by * db_create.php) * * @param array $current * @param boolean $is_superuser * @param string $checkall * @param string $url_query * @param array $column_order * @param array $replication_types * @param array $replication_info * * @return array $column_order, $out */function PMA_buildHtmlForDb($current, $is_superuser, $checkall, $url_query, $column_order, $replication_types, $replication_info){    $out = '';    if ($is_superuser || $GLOBALS['cfg']['AllowUserDropDatabase']) {        $out .= '<td class="tool">';        $out .= '<input type="checkbox" name="selected_dbs[]" title="' . htmlspecialchars($current['SCHEMA_NAME']) . '" value="' . htmlspecialchars($current['SCHEMA_NAME']) . '" ';        if (!PMA_is_system_schema($current['SCHEMA_NAME'], true)) {            $out .= (empty($checkall) ? '' : 'checked="checked" ') . '/>';        } else {            $out .= ' disabled="disabled" />';        }        $out .= '</td>';    }    $out .= '<td class="name">'           . '        <a onclick="'           . 'if (window.parent.openDb &amp;&amp; window.parent.openDb(\'' . PMA_jsFormat($current['SCHEMA_NAME'], false) . '\')) return false;'           . '" href="index.php?' . $url_query . '&amp;db='           . urlencode($current['SCHEMA_NAME']) . '" title="'           . sprintf(__('Jump to database'), htmlspecialchars($current['SCHEMA_NAME']))           . '" target="_parent">'           . ' ' . htmlspecialchars($current['SCHEMA_NAME'])           . '</a>'           . '</td>';    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $current)) {            if (is_numeric($stat['footer'])) {                $column_order[$stat_name]['footer'] += $current[$stat_name];            }            if ($stat['format'] === 'byte') {                list($value, $unit) = PMA_formatByteDown($current[$stat_name], 3, 1);            } elseif ($stat['format'] === 'number') {                $value = PMA_formatNumber($current[$stat_name], 0);            } else {                $value = htmlentities($current[$stat_name], 0);            }            $out .= '<td class="value">';            if (isset($stat['description_function'])) {                $out .= '<dfn title="' . $stat['description_function']($current[$stat_name]) . '">';            }            $out .= $value;            if (isset($stat['description_function'])) {                $out .= '</dfn>';            }            $out .= '</td>';            if ($stat['format'] === 'byte') {                $out .= '<td class="unit">' . $unit . '</td>';            }        }    }    foreach ($replication_types as $type) {        if ($replication_info[$type]['status']) {            $out .= '<td class="tool" style="text-align: center;">';            if (strlen(array_search($current["SCHEMA_NAME"], $replication_info[$type]['Ignore_DB'])) > 0) {                $out .= PMA_getIcon('s_cancel.png',  __('Not replicated'));            } else {                $key = array_search($current["SCHEMA_NAME"], $replication_info[$type]['Do_DB']);                if (strlen($key) > 0 || ($replication_info[$type]['Do_DB'][0] == "" && count($replication_info[$type]['Do_DB']) == 1)) {                    // if ($key != null) did not work for index "0"                    $out .= PMA_getIcon('s_success.png', __('Replicated'));                }            }            $out .= '</td>';        }    }    if ($is_superuser && !PMA_DRIZZLE) {        $out .= '<td class="tool">'               . '<a onclick="'               . 'if (window.parent.setDb) window.parent.setDb(\'' . PMA_jsFormat($current['SCHEMA_NAME']) . '\');'               . '" href="./server_privileges.php?' . $url_query               . '&amp;checkprivs=' . urlencode($current['SCHEMA_NAME'])               . '" title="' . sprintf(__('Check privileges for database &quot;%s&quot;.'), htmlspecialchars($current['SCHEMA_NAME']))               . '">'               . ' '               . PMA_getIcon('s_rights.png', __('Check Privileges'))               . '</a></td>';    }    return array($column_order, $out);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Holds class PMA_Error * * @package PhpMyAdmin *//** * base class */require_once './libraries/Message.class.php';/** * a single error * * @package PhpMyAdmin */class PMA_Error extends PMA_Message{    /**     * Error types     *     * @var array     */    static public $errortype = array (        E_ERROR              => 'Error',        E_WARNING            => 'Warning',        E_PARSE              => 'Parsing Error',        E_NOTICE             => 'Notice',        E_CORE_ERROR         => 'Core Error',        E_CORE_WARNING       => 'Core Warning',        E_COMPILE_ERROR      => 'Compile Error',        E_COMPILE_WARNING    => 'Compile Warning',        E_USER_ERROR         => 'User Error',        E_USER_WARNING       => 'User Warning',        E_USER_NOTICE        => 'User Notice',        E_STRICT             => 'Runtime Notice',        E_DEPRECATED         => 'Deprecation Notice',        E_RECOVERABLE_ERROR  => 'Catchable Fatal Error',    );    /**     * Error levels     *     * @var array     */    static public $errorlevel = array (        E_ERROR              => 'error',        E_WARNING            => 'error',        E_PARSE              => 'error',        E_NOTICE             => 'notice',        E_CORE_ERROR         => 'error',        E_CORE_WARNING       => 'error',        E_COMPILE_ERROR      => 'error',        E_COMPILE_WARNING    => 'error',        E_USER_ERROR         => 'error',        E_USER_WARNING       => 'error',        E_USER_NOTICE        => 'notice',        E_STRICT             => 'notice',        E_DEPRECATED         => 'notice',        E_RECOVERABLE_ERROR  => 'error',    );    /**     * The file in which the error occured     *     * @var string     */    protected $_file = '';    /**     * The line in which the error occured     *     * @var integer     */    protected $_line = 0;    /**     * Holds the backtrace for this error     *     * @var array     */    protected $_backtrace = array();    /**     * Unique id     *     * @var string     */    protected $_hash = null;    /**     * Constructor     *     * @param integer $errno     * @param string  $errstr     * @param string  $errfile     * @param integer $errline     */    public function __construct($errno, $errstr, $errfile, $errline)    {        $this->setNumber($errno);        $this->setMessage($errstr, false);        $this->setFile($errfile);        $this->setLine($errline);        $backtrace = debug_backtrace();        // remove last two calls: debug_backtrace() and handleError()        unset($backtrace[0]);        unset($backtrace[1]);        $this->setBacktrace($backtrace);    }    /**     * sets PMA_Error::$_backtrace     *     * @param array $backtrace     */    public function setBacktrace($backtrace)    {        $this->_backtrace = $backtrace;    }    /**     * sets PMA_Error::$_line     *     * @param integer $line     */    public function setLine($line)    {        $this->_line = $line;    }    /**     * sets PMA_Error::$_file     *     * @param string $file     */    public function setFile($file)    {        $this->_file = PMA_Error::relPath($file);    }    /**     * returns unique PMA_Error::$_hash, if not exists it will be created     *     * @param string $file     * @return  string PMA_Error::$_hash     */    public function getHash()    {        try {            $backtrace = serialize($this->getBacktrace());        } catch(Exception $e){            $backtrace = '';        }        if (null === $this->_hash) {            $this->_hash = md5(                $this->getNumber() .                $this->getMessage() .                $this->getFile() .                $this->getLine() .                $backtrace            );        }        return $this->_hash;    }    /**     * returns PMA_Error::$_backtrace     *     * @return  array PMA_Error::$_backtrace     */    public function getBacktrace()    {        return $this->_backtrace;    }    /**     * returns PMA_Error::$_file     *     * @return  string PMA_Error::$_file     */    public function getFile()    {        return $this->_file;    }    /**     * returns PMA_Error::$_line     *     * @return  integer PMA_Error::$_line     */    public function getLine()    {        return $this->_line;    }    /**     * returns type of error     *     * @return  string  type of error     */    public function getType()    {        return PMA_Error::$errortype[$this->getNumber()];    }    /**     * returns level of error     *     * @return  string  level of error     */    public function getLevel()    {        return PMA_Error::$errorlevel[$this->getNumber()];    }    /**     * returns title prepared for HTML Title-Tag     *     * @return  string   HTML escaped and truncated title     */    public function getHtmlTitle()    {        return htmlspecialchars(substr($this->getTitle(), 0, 100));    }    /**     * returns title for error     *     * @return string     */    public function getTitle()    {        return $this->getType() . ': ' . $this->getMessage();    }    /**     * Display HTML backtrace     *     */    public function displayBacktrace()    {        foreach ($this->getBacktrace() as $step) {            echo PMA_Error::relPath($step['file']) . '#' . $step['line'] . ': ';            if (isset($step['class'])) {                echo $step['class'] . $step['type'];            }            echo $step['function'] . '(';            if (isset($step['args']) && (count($step['args']) > 1)) {                echo "<br />\n";                foreach ($step['args'] as $arg) {                    echo "\t";                    $this->displayArg($arg, $step['function']);                    echo ',' . "<br />\n";                }            } elseif (isset($step['args']) && (count($step['args']) > 0)) {                foreach ($step['args'] as $arg) {                    $this->displayArg($arg, $step['function']);                }            }            echo ')' . "<br />\n";        }    }    /**     * Display a single function argument     * if $function is one of include/require the $arg is converted te relative path     *     * @param string $arg     * @param string $function     */    protected function displayArg($arg, $function)    {        $include_functions = array(            'include',            'include_once',            'require',            'require_once',        );        if (in_array($function, $include_functions)) {            echo PMA_Error::relPath($arg);        } elseif (is_scalar($arg)) {            echo gettype($arg) . ' ' . htmlspecialchars($arg);        } else {            echo gettype($arg);        }    }    /**     * Displays the error in HTML     *     */    public function display()    {        echo '<div class="' . $this->getLevel() . '">';        if (! $this->isUserError()) {            echo '<strong>' . $this->getType() . '</strong>';            echo ' in ' . $this->getFile() . '#' . $this->getLine();            echo "<br />\n";        }        echo $this->getMessage();        if (! $this->isUserError()) {            echo "<br />\n";            echo "<br />\n";            echo "<strong>Backtrace</strong><br />\n";            echo "<br />\n";            echo $this->displayBacktrace();        }        echo '</div>';        $this->isDisplayed(true);    }    /**     * whether this error is a user error     *     * @return  boolean     */    public function isUserError()    {        return $this->getNumber() & (E_USER_WARNING | E_USER_ERROR | E_USER_NOTICE);    }    /**     * return short relative path to phpMyAdmin basedir     *     * prevent path disclusore in error message,     * and make users feel save to submit error reports     *     * @static     * @param string $dest  path to be shorten     * @return  string shortened path     */    static function relPath($dest)    {        $dest = realpath($dest);        if (substr(PHP_OS, 0, 3) == 'WIN') {            $path_separator = '\\';        } else {            $path_separator = '/';        }        $Ahere = explode($path_separator, realpath(dirname(__FILE__) . $path_separator . '..'));        $Adest = explode($path_separator, $dest);        $result = '.';        // && count ($Adest)>0 && count($Ahere)>0 )        while (implode($path_separator, $Adest) != implode($path_separator, $Ahere)) {            if (count($Ahere) > count($Adest)) {                array_pop($Ahere);                $result .= $path_separator . '..';            } else {                array_pop($Adest);            }        }        $path = $result . str_replace(implode($path_separator, $Adest), '', $dest);        return str_replace($path_separator . $path_separator, $path_separator, $path);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */$GLOBALS['information_schema_relations'] = array(    'CHARACTER_SETS' => array(        'DEFAULT_COLLATE_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLLATIONS' => array(        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        )    ),    'COLLATION_CHARACTER_SET_APPLICABILITY' => array(        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        ),        'COLLATION_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLUMNS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        ),        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        ),        'COLLATION_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLUMN_PRIVILEGES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'KEY_COLUMN_USAGE' => array(        'CONSTRAINT_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'ROUTINES' => array(        'ROUTINE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'SCHEMATA' => array(        'DEFAULT_CHARACTER_SET_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        )    ),    'SCHEMA_PRIVILEGES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_COLLATION' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'TABLE_CONSTRAINTS' => array(        'CONSTRAINT_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLE_PRIVILEGES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'VIEWS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ));?>
<?php// TCPDF FONT FILE DESCRIPTION$type='TrueTypeUnicode';$name='DejaVuSans-Bold';$up=-63;$ut=44;$dw=600;$diff='';$originalsize=672300;$enc='';$file='dejavusansb.z';$ctg='dejavusansb.ctg.z';$desc=array('Flags'=>32,'FontBBox'=>'[-1069 -415 1975 1174]','ItalicAngle'=>0,'Ascent'=>928,'Descent'=>-236,'Leading'=>0,'CapHeight'=>729,'XHeight'=>547,'StemV'=>60,'StemH'=>26,'AvgWidth'=>573,'MaxWidth'=>2016,'MissingWidth'=>600);$cw=array(0=>600,1=>600,2=>600,3=>600,4=>600,5=>600,6=>600,7=>600,8=>0,9=>333,10=>600,11=>600,12=>600,13=>333,14=>600,15=>600,16=>600,17=>600,18=>600,19=>600,20=>600,21=>600,22=>600,23=>600,24=>600,25=>600,26=>600,27=>600,28=>600,29=>0,30=>600,31=>600,32=>348,33=>456,34=>521,35=>838,36=>696,37=>1002,38=>872,39=>306,40=>457,41=>457,42=>523,43=>838,44=>380,45=>415,46=>380,47=>365,48=>696,49=>696,50=>696,51=>696,52=>696,53=>696,54=>696,55=>696,56=>696,57=>696,58=>400,59=>400,60=>838,61=>838,62=>838,63=>580,64=>1000,65=>774,66=>762,67=>734,68=>830,69=>683,70=>683,71=>821,72=>837,73=>372,74=>372,75=>775,76=>637,77=>995,78=>837,79=>850,80=>733,81=>850,82=>770,83=>720,84=>682,85=>812,86=>774,87=>1103,88=>771,89=>724,90=>725,91=>457,92=>365,93=>457,94=>838,95=>500,96=>500,97=>675,98=>716,99=>593,100=>716,101=>678,102=>435,103=>716,104=>712,105=>343,106=>343,107=>665,108=>343,109=>1042,110=>712,111=>687,112=>716,113=>716,114=>493,115=>595,116=>478,117=>712,118=>652,119=>924,120=>645,121=>652,122=>582,123=>712,124=>365,125=>712,126=>838,127=>600,128=>774,129=>774,130=>734,131=>683,132=>837,133=>850,134=>812,135=>675,136=>675,137=>675,138=>675,139=>675,140=>675,141=>593,142=>678,143=>678,144=>678,145=>678,146=>343,147=>343,148=>343,149=>343,150=>712,151=>687,152=>687,153=>687,154=>687,155=>687,156=>712,157=>712,158=>712,159=>712,160=>348,161=>456,162=>696,163=>696,164=>636,165=>696,166=>365,167=>500,168=>500,169=>1000,170=>564,171=>646,172=>838,173=>415,174=>1000,175=>500,176=>500,177=>838,178=>438,179=>438,180=>500,181=>736,182=>636,183=>380,184=>500,185=>438,186=>564,187=>646,188=>1035,189=>1035,190=>1035,191=>580,192=>774,193=>774,194=>774,195=>774,196=>774,197=>774,198=>1085,199=>734,200=>683,201=>683,202=>683,203=>683,204=>372,205=>372,206=>372,207=>372,208=>838,209=>837,210=>850,211=>850,212=>850,213=>850,214=>850,215=>838,216=>850,217=>812,218=>812,219=>812,220=>812,221=>724,222=>738,223=>719,224=>675,225=>675,226=>675,227=>675,228=>675,229=>675,230=>1048,231=>593,232=>678,233=>678,234=>678,235=>678,236=>343,237=>343,238=>343,239=>343,240=>687,241=>712,242=>687,243=>687,244=>687,245=>687,246=>687,247=>838,248=>687,249=>712,250=>712,251=>712,252=>712,253=>652,254=>716,255=>652,256=>774,257=>675,258=>774,259=>675,260=>774,261=>675,262=>734,263=>593,264=>734,265=>593,266=>734,267=>593,268=>734,269=>593,270=>830,271=>716,272=>838,273=>716,274=>683,275=>678,276=>683,277=>678,278=>683,279=>678,280=>683,281=>678,282=>683,283=>678,284=>821,285=>716,286=>821,287=>716,288=>821,289=>716,290=>821,291=>716,292=>837,293=>712,294=>974,295=>790,296=>372,297=>343,298=>372,299=>343,300=>372,301=>343,302=>372,303=>343,304=>372,305=>343,306=>744,307=>686,308=>372,309=>343,310=>775,311=>665,312=>665,313=>637,314=>343,315=>637,316=>343,317=>637,318=>479,319=>637,320=>557,321=>642,322=>371,323=>837,324=>712,325=>837,326=>712,327=>837,328=>712,329=>983,330=>837,331=>712,332=>850,333=>687,334=>850,335=>687,336=>850,337=>687,338=>1167,339=>1094,340=>770,341=>493,342=>770,343=>493,344=>770,345=>493,346=>720,347=>595,348=>720,349=>595,350=>720,351=>595,352=>720,353=>595,354=>682,355=>478,356=>682,357=>478,358=>682,359=>478,360=>812,361=>712,362=>812,363=>712,364=>812,365=>712,366=>812,367=>712,368=>812,369=>712,370=>812,371=>712,372=>1103,373=>924,374=>724,375=>652,376=>724,377=>725,378=>582,379=>725,380=>582,381=>725,382=>582,383=>435,384=>716,385=>811,386=>762,387=>716,388=>762,389=>716,390=>734,391=>734,392=>593,393=>838,394=>879,395=>757,396=>716,397=>688,398=>683,399=>849,400=>696,401=>683,402=>435,403=>821,404=>793,405=>1045,406=>436,407=>389,408=>775,409=>665,410=>360,411=>592,412=>1042,413=>837,414=>712,415=>850,416=>874,417=>687,418=>1083,419=>912,420=>782,421=>716,422=>770,423=>720,424=>595,425=>683,426=>552,427=>478,428=>707,429=>478,430=>682,431=>835,432=>712,433=>850,434=>813,435=>797,436=>778,437=>725,438=>582,439=>772,440=>772,441=>641,442=>582,443=>696,444=>772,445=>641,446=>573,447=>716,448=>372,449=>659,450=>544,451=>372,452=>1555,453=>1412,454=>1298,455=>1009,456=>980,457=>686,458=>1209,459=>1180,460=>1055,461=>774,462=>675,463=>372,464=>343,465=>850,466=>687,467=>812,468=>712,469=>812,470=>712,471=>812,472=>712,473=>812,474=>712,475=>812,476=>712,477=>678,478=>774,479=>675,480=>774,481=>675,482=>1085,483=>1048,484=>821,485=>716,486=>821,487=>716,488=>775,489=>665,490=>850,491=>687,492=>850,493=>687,494=>772,495=>582,496=>343,497=>1555,498=>1412,499=>1298,500=>821,501=>716,502=>1289,503=>787,504=>837,505=>712,506=>774,507=>675,508=>1085,509=>1048,510=>850,511=>687,512=>774,513=>675,514=>774,515=>675,516=>683,517=>678,518=>683,519=>678,520=>372,521=>343,522=>372,523=>343,524=>850,525=>687,526=>850,527=>687,528=>770,529=>493,530=>770,531=>493,532=>812,533=>712,534=>812,535=>712,536=>720,537=>595,538=>682,539=>478,540=>690,541=>607,542=>837,543=>712,544=>837,545=>865,546=>809,547=>659,548=>725,549=>582,550=>774,551=>675,552=>683,553=>678,554=>850,555=>687,556=>850,557=>687,558=>850,559=>687,560=>850,561=>687,562=>724,563=>652,564=>492,565=>867,566=>512,567=>343,568=>1088,569=>1088,570=>774,571=>734,572=>593,573=>637,574=>682,575=>595,576=>582,577=>782,578=>614,579=>762,580=>812,581=>774,582=>683,583=>678,584=>372,585=>343,586=>860,587=>791,588=>770,589=>493,590=>724,591=>652,592=>675,593=>716,594=>716,595=>716,596=>593,597=>593,598=>717,599=>792,600=>678,601=>678,602=>876,603=>557,604=>545,605=>815,606=>731,607=>343,608=>792,609=>716,610=>627,611=>644,612=>635,613=>712,614=>712,615=>712,616=>545,617=>440,618=>545,619=>559,620=>693,621=>343,622=>841,623=>1042,624=>1042,625=>1042,626=>712,627=>793,628=>707,629=>687,630=>909,631=>681,632=>796,633=>538,634=>538,635=>650,636=>493,637=>493,638=>596,639=>596,640=>642,641=>642,642=>595,643=>415,644=>435,645=>605,646=>552,647=>478,648=>478,649=>920,650=>772,651=>670,652=>652,653=>924,654=>652,655=>724,656=>694,657=>684,658=>641,659=>641,660=>573,661=>573,662=>573,663=>573,664=>850,665=>633,666=>731,667=>685,668=>691,669=>343,670=>732,671=>539,672=>792,673=>573,674=>573,675=>1156,676=>1214,677=>1155,678=>974,679=>769,680=>929,681=>1026,682=>792,683=>780,684=>591,685=>415,686=>677,687=>789,688=>456,689=>456,690=>219,691=>315,692=>315,693=>315,694=>411,695=>591,696=>417,697=>302,698=>521,699=>380,700=>380,701=>380,702=>366,703=>366,704=>326,705=>326,706=>500,707=>500,708=>500,709=>500,710=>500,711=>500,712=>306,713=>500,714=>500,715=>500,716=>306,717=>500,718=>500,719=>500,720=>337,721=>337,722=>366,723=>366,724=>500,725=>500,726=>416,727=>328,728=>500,729=>500,730=>500,731=>500,732=>500,733=>500,734=>351,735=>500,736=>412,737=>219,738=>381,739=>413,740=>326,741=>500,742=>500,743=>500,744=>500,745=>500,748=>500,749=>500,750=>657,755=>500,759=>500,768=>0,769=>0,770=>0,771=>0,772=>0,773=>0,774=>0,775=>0,776=>0,777=>0,778=>0,779=>0,780=>0,781=>0,782=>0,783=>0,784=>0,785=>0,786=>0,787=>0,788=>0,789=>0,790=>0,791=>0,792=>0,793=>0,794=>0,795=>0,796=>0,797=>0,798=>0,799=>0,800=>0,801=>0,802=>0,803=>0,804=>0,805=>0,806=>0,807=>0,808=>0,809=>0,810=>0,811=>0,812=>0,813=>0,814=>0,815=>0,816=>0,817=>0,818=>0,819=>0,820=>0,821=>0,822=>0,823=>0,824=>0,825=>0,826=>0,827=>0,828=>0,829=>0,830=>0,831=>0,832=>0,833=>0,834=>0,835=>0,836=>0,837=>0,838=>0,839=>0,840=>0,841=>0,842=>0,843=>0,844=>0,845=>0,846=>0,847=>0,849=>0,850=>0,851=>0,855=>0,856=>0,858=>0,860=>0,861=>0,862=>0,863=>0,864=>0,865=>0,866=>0,880=>698,881=>565,882=>1022,883=>836,884=>302,885=>302,886=>837,887=>701,890=>500,891=>593,892=>550,893=>549,894=>400,900=>441,901=>500,902=>797,903=>380,904=>846,905=>1009,906=>563,908=>891,910=>980,911=>894,912=>390,913=>774,914=>762,915=>637,916=>774,917=>683,918=>725,919=>837,920=>850,921=>372,922=>775,923=>774,924=>995,925=>837,926=>632,927=>850,928=>837,929=>733,931=>683,932=>682,933=>724,934=>850,935=>771,936=>850,937=>850,938=>372,939=>724,940=>687,941=>557,942=>712,943=>390,944=>675,945=>687,946=>716,947=>681,948=>687,949=>557,950=>591,951=>712,952=>687,953=>390,954=>710,955=>633,956=>736,957=>681,958=>591,959=>687,960=>791,961=>716,962=>593,963=>779,964=>638,965=>675,966=>782,967=>645,968=>794,969=>869,970=>390,971=>675,972=>687,973=>675,974=>869,975=>775,976=>651,977=>661,978=>746,979=>981,980=>746,981=>796,982=>869,983=>744,984=>850,985=>687,986=>734,987=>593,988=>683,989=>494,990=>702,991=>660,992=>919,993=>627,994=>1093,995=>837,996=>832,997=>716,998=>928,999=>744,1000=>733,1001=>650,1002=>789,1003=>671,1004=>752,1005=>716,1006=>682,1007=>590,1008=>744,1009=>716,1010=>593,1011=>343,1012=>850,1013=>645,1014=>644,1015=>738,1016=>716,1017=>734,1018=>995,1019=>732,1020=>716,1021=>698,1022=>734,1023=>698,1024=>683,1025=>683,1026=>878,1027=>637,1028=>734,1029=>720,1030=>372,1031=>372,1032=>372,1033=>1154,1034=>1130,1035=>878,1036=>817,1037=>837,1038=>771,1039=>837,1040=>774,1041=>762,1042=>762,1043=>637,1044=>891,1045=>683,1046=>1224,1047=>710,1048=>837,1049=>837,1050=>817,1051=>831,1052=>995,1053=>837,1054=>850,1055=>837,1056=>733,1057=>734,1058=>682,1059=>771,1060=>992,1061=>771,1062=>928,1063=>808,1064=>1235,1065=>1326,1066=>939,1067=>1036,1068=>762,1069=>734,1070=>1174,1071=>770,1072=>675,1073=>698,1074=>633,1075=>522,1076=>808,1077=>678,1078=>995,1079=>581,1080=>701,1081=>701,1082=>679,1083=>732,1084=>817,1085=>691,1086=>687,1087=>691,1088=>716,1089=>593,1090=>580,1091=>652,1092=>992,1093=>645,1094=>741,1095=>687,1096=>1062,1097=>1105,1098=>751,1099=>904,1100=>632,1101=>593,1102=>972,1103=>642,1104=>678,1105=>678,1106=>714,1107=>522,1108=>593,1109=>595,1110=>343,1111=>343,1112=>343,1113=>991,1114=>956,1115=>734,1116=>679,1117=>701,1118=>652,1119=>691,1120=>1093,1121=>869,1122=>840,1123=>736,1124=>1012,1125=>839,1126=>992,1127=>832,1128=>1358,1129=>1121,1130=>850,1131=>687,1132=>1236,1133=>1007,1134=>696,1135=>557,1136=>1075,1137=>1061,1138=>850,1139=>687,1140=>850,1141=>695,1142=>850,1143=>695,1144=>1148,1145=>1043,1146=>1074,1147=>863,1148=>1405,1149=>1173,1150=>1093,1151=>869,1152=>734,1153=>593,1154=>652,1155=>0,1156=>0,1157=>0,1158=>0,1159=>0,1160=>418,1161=>418,1162=>957,1163=>807,1164=>762,1165=>611,1166=>733,1167=>716,1168=>637,1169=>522,1170=>666,1171=>543,1172=>808,1173=>669,1174=>1224,1175=>995,1176=>710,1177=>581,1178=>775,1179=>679,1180=>817,1181=>679,1182=>817,1183=>679,1184=>1015,1185=>826,1186=>956,1187=>808,1188=>1103,1189=>874,1190=>1273,1191=>1017,1192=>952,1193=>858,1194=>734,1195=>593,1196=>682,1197=>580,1198=>724,1199=>652,1200=>724,1201=>652,1202=>771,1203=>645,1204=>1112,1205=>1000,1206=>808,1207=>687,1208=>808,1209=>687,1210=>808,1211=>712,1212=>1026,1213=>810,1214=>1026,1215=>810,1216=>372,1217=>1224,1218=>995,1219=>775,1220=>630,1221=>951,1222=>805,1223=>837,1224=>691,1225=>957,1226=>807,1227=>808,1228=>687,1229=>1115,1230=>933,1231=>343,1232=>774,1233=>675,1234=>774,1235=>675,1236=>1085,1237=>1048,1238=>683,1239=>678,1240=>849,1241=>678,1242=>849,1243=>678,1244=>1224,1245=>995,1246=>710,1247=>581,1248=>772,1249=>641,1250=>837,1251=>701,1252=>837,1253=>701,1254=>850,1255=>687,1256=>850,1257=>687,1258=>850,1259=>687,1260=>734,1261=>593,1262=>771,1263=>652,1264=>771,1265=>652,1266=>771,1267=>652,1268=>808,1269=>687,1270=>637,1271=>522,1272=>1036,1273=>904,1274=>666,1275=>543,1276=>771,1277=>645,1278=>771,1279=>645,1280=>762,1281=>608,1282=>1159,1283=>893,1284=>1119,1285=>920,1286=>828,1287=>693,1288=>1242,1289=>1017,1290=>1289,1291=>1013,1292=>839,1293=>638,1294=>938,1295=>803,1296=>696,1297=>557,1298=>831,1299=>732,1300=>1286,1301=>1068,1302=>1065,1303=>979,1304=>1082,1305=>1013,1306=>850,1307=>716,1308=>1103,1309=>924,1310=>817,1311=>679,1312=>1267,1313=>1059,1314=>1273,1315=>1017,1316=>957,1317=>807,1329=>813,1330=>729,1331=>728,1332=>731,1333=>729,1334=>733,1335=>652,1336=>720,1337=>903,1338=>728,1339=>666,1340=>558,1341=>961,1342=>788,1343=>713,1344=>651,1345=>730,1346=>715,1347=>704,1348=>780,1349=>689,1350=>715,1351=>708,1352=>731,1353=>677,1354=>867,1355=>711,1356=>780,1357=>731,1358=>715,1359=>693,1360=>666,1361=>698,1362=>576,1363=>833,1364=>698,1365=>763,1366=>855,1369=>330,1370=>342,1371=>308,1372=>374,1373=>313,1374=>461,1375=>468,1377=>938,1378=>642,1379=>704,1380=>708,1381=>642,1382=>644,1383=>565,1384=>642,1385=>756,1386=>704,1387=>643,1388=>310,1389=>984,1390=>638,1391=>643,1392=>643,1393=>603,1394=>643,1395=>642,1396=>643,1397=>309,1398=>643,1399=>486,1400=>643,1401=>366,1402=>938,1403=>573,1404=>666,1405=>643,1406=>643,1407=>934,1408=>643,1409=>643,1410=>479,1411=>934,1412=>648,1413=>620,1414=>813,1415=>812,1417=>360,1418=>374,1456=>0,1457=>0,1458=>0,1459=>0,1460=>0,1461=>0,1462=>0,1463=>0,1464=>0,1465=>0,1466=>0,1467=>0,1468=>0,1469=>0,1470=>415,1471=>0,1472=>372,1473=>0,1474=>0,1475=>372,1478=>497,1479=>0,1488=>728,1489=>610,1490=>447,1491=>588,1492=>687,1493=>343,1494=>400,1495=>687,1496=>679,1497=>294,1498=>578,1499=>566,1500=>605,1501=>696,1502=>724,1503=>343,1504=>453,1505=>680,1506=>666,1507=>675,1508=>658,1509=>661,1510=>653,1511=>736,1512=>602,1513=>758,1514=>683,1520=>664,1521=>567,1522=>519,1523=>444,1524=>710,1542=>667,1543=>667,1545=>884,1546=>1157,1548=>380,1557=>0,1563=>400,1567=>580,1569=>511,1570=>343,1571=>343,1572=>622,1573=>343,1574=>917,1575=>343,1576=>1005,1577=>590,1578=>1005,1579=>1005,1580=>721,1581=>721,1582=>721,1583=>513,1584=>513,1585=>576,1586=>576,1587=>1380,1588=>1380,1589=>1345,1590=>1345,1591=>1039,1592=>1039,1593=>683,1594=>683,1600=>342,1601=>1162,1602=>894,1603=>917,1604=>868,1605=>733,1606=>854,1607=>590,1608=>622,1609=>917,1610=>917,1611=>0,1612=>0,1613=>0,1614=>0,1615=>0,1616=>0,1617=>0,1618=>0,1619=>0,1620=>0,1621=>0,1623=>0,1626=>500,1632=>610,1633=>610,1634=>610,1635=>610,1636=>610,1637=>610,1638=>610,1639=>610,1640=>610,1641=>610,1642=>610,1643=>374,1644=>380,1645=>545,1646=>1005,1647=>894,1648=>0,1652=>292,1657=>1005,1658=>1005,1659=>1005,1660=>1005,1661=>1005,1662=>1005,1663=>1005,1664=>1005,1665=>721,1666=>721,1667=>721,1668=>721,1669=>721,1670=>721,1671=>721,1672=>445,1673=>445,1674=>445,1675=>445,1676=>445,1677=>445,1678=>445,1679=>445,1680=>445,1681=>576,1682=>576,1683=>576,1684=>576,1685=>681,1686=>576,1687=>576,1688=>576,1689=>576,1690=>1380,1691=>1380,1692=>1380,1693=>1345,1694=>1345,1695=>1039,1696=>683,1697=>1162,1698=>1162,1699=>1162,1700=>1162,1701=>1162,1702=>1162,1703=>894,1704=>894,1705=>1024,1706=>1271,1707=>1024,1708=>917,1709=>917,1710=>917,1711=>1024,1712=>1024,1713=>1024,1714=>1024,1715=>1024,1716=>1024,1717=>868,1718=>868,1719=>868,1720=>868,1721=>854,1722=>854,1723=>854,1724=>854,1725=>854,1726=>938,1727=>721,1734=>622,1740=>917,1742=>917,1749=>590,1776=>610,1777=>610,1778=>610,1779=>610,1780=>610,1781=>610,1782=>610,1783=>610,1784=>610,1785=>610,1984=>696,1985=>696,1986=>696,1987=>696,1988=>696,1989=>696,1990=>696,1991=>696,1992=>696,1993=>696,1994=>343,1995=>547,1996=>543,1997=>652,1998=>691,1999=>691,2000=>594,2001=>691,2002=>904,2003=>551,2004=>551,2005=>627,2006=>688,2007=>444,2008=>1022,2009=>506,2010=>826,2011=>691,2012=>652,2013=>912,2014=>627,2015=>707,2016=>506,2017=>652,2018=>574,2019=>627,2020=>627,2021=>627,2022=>574,2023=>574,2027=>0,2028=>0,2029=>0,2030=>0,2031=>0,2032=>0,2033=>0,2034=>0,2035=>0,2036=>380,2037=>380,2040=>691,2041=>691,2042=>415,3647=>696,3713=>790,3714=>748,3716=>749,3719=>569,3720=>742,3722=>744,3725=>761,3732=>706,3733=>704,3734=>747,3735=>819,3737=>730,3738=>727,3739=>727,3740=>922,3741=>827,3742=>866,3743=>866,3745=>836,3746=>761,3747=>770,3749=>769,3751=>713,3754=>827,3755=>1031,3757=>724,3758=>784,3759=>934,3760=>688,3761=>0,3762=>610,3763=>610,3764=>0,3765=>0,3766=>0,3767=>0,3768=>0,3769=>0,3771=>0,3772=>0,3773=>670,3776=>516,3777=>860,3778=>516,3779=>650,3780=>632,3782=>759,3784=>0,3785=>0,3786=>0,3787=>0,3788=>0,3789=>0,3792=>771,3793=>771,3794=>693,3795=>836,3796=>729,3797=>729,3798=>849,3799=>790,3800=>759,3801=>910,3804=>1363,3805=>1363,4256=>918,4257=>744,4258=>739,4259=>837,4260=>649,4261=>773,4262=>857,4263=>889,4264=>530,4265=>633,4266=>857,4267=>900,4268=>643,4269=>903,4270=>814,4271=>752,4272=>869,4273=>643,4274=>643,4275=>886,4276=>886,4277=>733,4278=>653,4279=>643,4280=>646,4281=>643,4282=>790,4283=>902,4284=>633,4285=>619,4286=>643,4287=>778,4288=>892,4289=>601,4290=>742,4291=>616,4292=>633,4293=>742,4304=>553,4305=>552,4306=>596,4307=>815,4308=>562,4309=>563,4310=>553,4311=>827,4312=>553,4313=>543,4314=>1074,4315=>563,4316=>563,4317=>812,4318=>552,4319=>591,4320=>822,4321=>563,4322=>690,4323=>583,4324=>813,4325=>562,4326=>813,4327=>563,4328=>563,4329=>563,4330=>632,4331=>563,4332=>563,4333=>552,4334=>563,4335=>563,4336=>558,4337=>604,4338=>552,4339=>552,4340=>553,4341=>605,4342=>852,4343=>635,4344=>563,4345=>596,4346=>542,4347=>684,4348=>368,5121=>774,5122=>774,5123=>774,5124=>774,5125=>905,5126=>905,5127=>905,5129=>905,5130=>905,5131=>905,5132=>1018,5133=>1009,5134=>1018,5135=>1009,5136=>1018,5137=>1009,5138=>1149,5139=>1140,5140=>1149,5141=>1140,5142=>905,5143=>1149,5144=>1142,5145=>1149,5146=>1142,5147=>905,5149=>310,5150=>529,5151=>425,5152=>425,5153=>395,5154=>395,5155=>395,5156=>395,5157=>564,5158=>470,5159=>310,5160=>395,5161=>395,5162=>395,5163=>1213,5164=>986,5165=>1216,5166=>1297,5167=>774,5168=>774,5169=>774,5170=>774,5171=>886,5172=>886,5173=>886,5175=>886,5176=>886,5177=>886,5178=>1018,5179=>1009,5180=>1018,5181=>1009,5182=>1018,5183=>1009,5184=>1149,5185=>1140,5186=>1149,5187=>1140,5188=>1149,5189=>1142,5190=>1149,5191=>1142,5192=>886,5193=>576,5194=>229,5196=>812,5197=>812,5198=>812,5199=>812,5200=>815,5201=>815,5202=>815,5204=>815,5205=>815,5206=>815,5207=>1056,5208=>1048,5209=>1056,5210=>1048,5211=>1056,5212=>1048,5213=>1060,5214=>1054,5215=>1060,5216=>1054,5217=>1060,5218=>1052,5219=>1060,5220=>1052,5221=>1060,5222=>483,5223=>1005,5224=>1005,5225=>1023,5226=>1017,5227=>743,5228=>743,5229=>743,5230=>743,5231=>743,5232=>743,5233=>743,5234=>743,5235=>743,5236=>1029,5237=>975,5238=>980,5239=>975,5240=>980,5241=>975,5242=>1029,5243=>975,5244=>1029,5245=>975,5246=>980,5247=>975,5248=>980,5249=>975,5250=>980,5251=>501,5252=>501,5253=>938,5254=>938,5255=>938,5256=>938,5257=>743,5258=>743,5259=>743,5260=>743,5261=>743,5262=>743,5263=>743,5264=>743,5265=>743,5266=>1029,5267=>975,5268=>1029,5269=>975,5270=>1029,5271=>975,5272=>1029,5273=>975,5274=>1029,5275=>975,5276=>1029,5277=>975,5278=>1029,5279=>975,5280=>1029,5281=>501,5282=>501,5283=>626,5284=>626,5285=>626,5286=>626,5287=>626,5288=>626,5289=>626,5290=>626,5291=>626,5292=>881,5293=>854,5294=>863,5295=>874,5296=>863,5297=>874,5298=>881,5299=>874,5300=>881,5301=>874,5302=>863,5303=>874,5304=>863,5305=>874,5306=>863,5307=>436,5308=>548,5309=>436,5312=>988,5313=>988,5314=>988,5315=>988,5316=>931,5317=>931,5318=>931,5319=>931,5320=>931,5321=>1238,5322=>1247,5323=>1200,5324=>1228,5325=>1200,5326=>1228,5327=>931,5328=>660,5329=>497,5330=>660,5331=>988,5332=>988,5333=>988,5334=>988,5335=>931,5336=>931,5337=>931,5338=>931,5339=>931,5340=>1231,5341=>1247,5342=>1283,5343=>1228,5344=>1283,5345=>1228,5346=>1228,5347=>1214,5348=>1228,5349=>1214,5350=>1283,5351=>1228,5352=>1283,5353=>1228,5354=>660,5356=>886,5357=>730,5358=>730,5359=>730,5360=>730,5361=>730,5362=>730,5363=>730,5364=>730,5365=>730,5366=>998,5367=>958,5368=>967,5369=>989,5370=>967,5371=>989,5372=>998,5373=>958,5374=>998,5375=>958,5376=>967,5377=>989,5378=>967,5379=>989,5380=>967,5381=>493,5382=>460,5383=>493,5392=>923,5393=>923,5394=>923,5395=>1136,5396=>1136,5397=>1136,5398=>1136,5399=>1209,5400=>1202,5401=>1209,5402=>1202,5403=>1209,5404=>1202,5405=>1431,5406=>1420,5407=>1431,5408=>1420,5409=>1431,5410=>1420,5411=>1431,5412=>1420,5413=>746,5414=>776,5415=>776,5416=>776,5417=>776,5418=>776,5419=>776,5420=>776,5421=>776,5422=>776,5423=>1003,5424=>1003,5425=>1013,5426=>996,5427=>1013,5428=>996,5429=>1003,5430=>1003,5431=>1003,5432=>1003,5433=>1013,5434=>996,5435=>1013,5436=>996,5437=>1013,5438=>495,5440=>395,5441=>510,5442=>1033,5443=>1033,5444=>976,5445=>976,5446=>976,5447=>976,5448=>733,5449=>733,5450=>733,5451=>733,5452=>733,5453=>733,5454=>1003,5455=>959,5456=>495,5458=>886,5459=>774,5460=>774,5461=>774,5462=>774,5463=>928,5464=>928,5465=>928,5466=>928,5467=>1172,5468=>1142,5469=>602,5470=>812,5471=>812,5472=>812,5473=>812,5474=>812,5475=>812,5476=>815,5477=>815,5478=>815,5479=>815,5480=>1060,5481=>1052,5482=>548,5492=>977,5493=>977,5494=>977,5495=>977,5496=>977,5497=>977,5498=>977,5499=>618,5500=>837,5501=>510,5502=>1238,5503=>1238,5504=>1238,5505=>1238,5506=>1238,5507=>1238,5508=>1238,5509=>989,5514=>977,5515=>977,5516=>977,5517=>977,5518=>1591,5519=>1591,5520=>1591,5521=>1295,5522=>1295,5523=>1591,5524=>1591,5525=>848,5526=>1273,5536=>988,5537=>988,5538=>931,5539=>931,5540=>931,5541=>931,5542=>660,5543=>776,5544=>776,5545=>776,5546=>776,5547=>776,5548=>776,5549=>776,5550=>495,5551=>743,5598=>830,5601=>830,5702=>496,5703=>496,5742=>413,5743=>1238,5744=>1591,5745=>2016,5746=>2016,5747=>1720,5748=>1678,5749=>2016,5750=>2016,5760=>543,5761=>637,5762=>945,5763=>1254,5764=>1563,5765=>1871,5766=>627,5767=>936,5768=>1254,5769=>1559,5770=>1871,5771=>569,5772=>877,5773=>1187,5774=>1497,5775=>1807,5776=>637,5777=>945,5778=>1240,5779=>1555,5780=>1871,5781=>569,5782=>569,5783=>789,5784=>1234,5785=>1559,5786=>740,5787=>638,5788=>638,7424=>652,7425=>833,7426=>1048,7427=>608,7428=>593,7429=>676,7430=>676,7431=>559,7432=>557,7433=>343,7434=>494,7435=>665,7436=>539,7437=>817,7438=>701,7439=>687,7440=>593,7441=>660,7442=>660,7443=>660,7444=>1094,7446=>687,7447=>687,7448=>556,7449=>642,7450=>642,7451=>580,7452=>634,7453=>737,7454=>948,7455=>695,7456=>652,7457=>924,7458=>582,7459=>646,7462=>539,7463=>652,7464=>691,7465=>556,7466=>781,7467=>732,7468=>487,7469=>683,7470=>480,7472=>523,7473=>430,7474=>430,7475=>517,7476=>527,7477=>234,7478=>234,7479=>488,7480=>401,7481=>626,7482=>527,7483=>527,7484=>535,7485=>509,7486=>461,7487=>485,7488=>430,7489=>511,7490=>695,7491=>458,7492=>458,7493=>479,7494=>712,7495=>479,7496=>479,7497=>479,7498=>479,7499=>386,7500=>386,7501=>479,7502=>219,7503=>487,7504=>664,7505=>456,7506=>488,7507=>414,7508=>488,7509=>488,7510=>479,7511=>388,7512=>456,7513=>462,7514=>664,7515=>501,7517=>451,7518=>429,7519=>433,7520=>493,7521=>406,7522=>219,7523=>315,7524=>456,7525=>501,7526=>451,7527=>429,7528=>451,7529=>493,7530=>406,7543=>716,7544=>527,7547=>545,7549=>747,7557=>514,7579=>479,7580=>414,7581=>414,7582=>488,7583=>386,7584=>377,7585=>348,7586=>479,7587=>456,7588=>347,7589=>281,7590=>347,7591=>347,7592=>431,7593=>326,7594=>330,7595=>370,7596=>664,7597=>664,7598=>562,7599=>562,7600=>448,7601=>488,7602=>542,7603=>422,7604=>396,7605=>388,7606=>583,7607=>494,7608=>399,7609=>451,7610=>501,7611=>417,7612=>523,7613=>470,7614=>455,7615=>425,7620=>0,7621=>0,7622=>0,7623=>0,7624=>0,7625=>0,7680=>774,7681=>675,7682=>762,7683=>716,7684=>762,7685=>716,7686=>762,7687=>716,7688=>734,7689=>593,7690=>830,7691=>716,7692=>830,7693=>716,7694=>830,7695=>716,7696=>830,7697=>716,7698=>830,7699=>716,7700=>683,7701=>678,7702=>683,7703=>678,7704=>683,7705=>678,7706=>683,7707=>678,7708=>683,7709=>678,7710=>683,7711=>435,7712=>821,7713=>716,7714=>837,7715=>712,7716=>837,7717=>712,7718=>837,7719=>712,7720=>837,7721=>712,7722=>837,7723=>712,7724=>372,7725=>343,7726=>372,7727=>343,7728=>775,7729=>665,7730=>775,7731=>665,7732=>775,7733=>665,7734=>637,7735=>343,7736=>637,7737=>343,7738=>637,7739=>343,7740=>637,7741=>343,7742=>995,7743=>1042,7744=>995,7745=>1042,7746=>995,7747=>1042,7748=>837,7749=>712,7750=>837,7751=>712,7752=>837,7753=>712,7754=>837,7755=>712,7756=>850,7757=>687,7758=>850,7759=>687,7760=>850,7761=>687,7762=>850,7763=>687,7764=>733,7765=>716,7766=>733,7767=>716,7768=>770,7769=>493,7770=>770,7771=>493,7772=>770,7773=>493,7774=>770,7775=>493,7776=>720,7777=>595,7778=>720,7779=>595,7780=>720,7781=>595,7782=>720,7783=>595,7784=>720,7785=>595,7786=>682,7787=>478,7788=>682,7789=>478,7790=>682,7791=>478,7792=>682,7793=>478,7794=>812,7795=>712,7796=>812,7797=>712,7798=>812,7799=>712,7800=>812,7801=>712,7802=>812,7803=>712,7804=>774,7805=>652,7806=>774,7807=>652,7808=>1103,7809=>924,7810=>1103,7811=>924,7812=>1103,7813=>924,7814=>1103,7815=>924,7816=>1103,7817=>924,7818=>771,7819=>645,7820=>771,7821=>645,7822=>724,7823=>652,7824=>725,7825=>582,7826=>725,7827=>582,7828=>725,7829=>582,7830=>712,7831=>478,7832=>924,7833=>652,7834=>675,7835=>435,7836=>435,7837=>435,7838=>896,7839=>687,7840=>774,7841=>675,7842=>774,7843=>675,7844=>774,7845=>675,7846=>774,7847=>675,7848=>774,7849=>675,7850=>774,7851=>675,7852=>774,7853=>675,7854=>774,7855=>675,7856=>774,7857=>675,7858=>774,7859=>675,7860=>774,7861=>675,7862=>774,7863=>675,7864=>683,7865=>678,7866=>683,7867=>678,7868=>683,7869=>678,7870=>683,7871=>678,7872=>683,7873=>678,7874=>683,7875=>678,7876=>683,7877=>678,7878=>683,7879=>678,7880=>372,7881=>343,7882=>372,7883=>343,7884=>850,7885=>687,7886=>850,7887=>687,7888=>850,7889=>687,7890=>850,7891=>687,7892=>850,7893=>687,7894=>850,7895=>687,7896=>850,7897=>687,7898=>874,7899=>687,7900=>874,7901=>687,7902=>874,7903=>687,7904=>874,7905=>687,7906=>874,7907=>687,7908=>812,7909=>712,7910=>812,7911=>712,7912=>835,7913=>712,7914=>835,7915=>712,7916=>835,7917=>712,7918=>835,7919=>712,7920=>835,7921=>712,7922=>724,7923=>652,7924=>724,7925=>652,7926=>724,7927=>652,7928=>724,7929=>652,7930=>953,7931=>644,7936=>687,7937=>687,7938=>687,7939=>687,7940=>687,7941=>687,7942=>687,7943=>687,7944=>774,7945=>774,7946=>1041,7947=>1043,7948=>935,7949=>963,7950=>835,7951=>859,7952=>557,7953=>557,7954=>557,7955=>557,7956=>557,7957=>557,7960=>792,7961=>794,7962=>1100,7963=>1096,7964=>1023,7965=>1052,7968=>712,7969=>712,7970=>712,7971=>712,7972=>712,7973=>712,7974=>712,7975=>712,7976=>945,7977=>951,7978=>1250,7979=>1250,7980=>1180,7981=>1206,7982=>1054,7983=>1063,7984=>390,7985=>390,7986=>390,7987=>390,7988=>390,7989=>390,7990=>390,7991=>390,7992=>483,7993=>489,7994=>777,7995=>785,7996=>712,7997=>738,7998=>604,7999=>604,8000=>687,8001=>687,8002=>687,8003=>687,8004=>687,8005=>687,8008=>892,8009=>933,8010=>1221,8011=>1224,8012=>1053,8013=>1082,8016=>675,8017=>675,8018=>675,8019=>675,8020=>675,8021=>675,8022=>675,8023=>675,8025=>930,8027=>1184,8029=>1199,8031=>1049,8032=>869,8033=>869,8034=>869,8035=>869,8036=>869,8037=>869,8038=>869,8039=>869,8040=>909,8041=>958,8042=>1246,8043=>1251,8044=>1076,8045=>1105,8046=>1028,8047=>1076,8048=>687,8049=>687,8050=>557,8051=>557,8052=>712,8053=>712,8054=>390,8055=>390,8056=>687,8057=>687,8058=>675,8059=>675,8060=>869,8061=>869,8064=>687,8065=>687,8066=>687,8067=>687,8068=>687,8069=>687,8070=>687,8071=>687,8072=>774,8073=>774,8074=>1041,8075=>1043,8076=>935,8077=>963,8078=>835,8079=>859,8080=>712,8081=>712,8082=>712,8083=>712,8084=>712,8085=>712,8086=>712,8087=>712,8088=>945,8089=>951,8090=>1250,8091=>1250,8092=>1180,8093=>1206,8094=>1054,8095=>1063,8096=>869,8097=>869,8098=>869,8099=>869,8100=>869,8101=>869,8102=>869,8103=>869,8104=>909,8105=>958,8106=>1246,8107=>1251,8108=>1076,8109=>1105,8110=>1028,8111=>1076,8112=>687,8113=>687,8114=>687,8115=>687,8116=>687,8118=>687,8119=>687,8120=>774,8121=>774,8122=>876,8123=>797,8124=>774,8125=>500,8126=>500,8127=>500,8128=>500,8129=>500,8130=>712,8131=>712,8132=>712,8134=>712,8135=>712,8136=>929,8137=>846,8138=>1080,8139=>1009,8140=>837,8141=>500,8142=>500,8143=>500,8144=>390,8145=>390,8146=>390,8147=>390,8150=>390,8151=>390,8152=>372,8153=>372,8154=>621,8155=>563,8157=>500,8158=>500,8159=>500,8160=>675,8161=>675,8162=>675,8163=>675,8164=>716,8165=>716,8166=>675,8167=>675,8168=>724,8169=>724,8170=>1020,8171=>980,8172=>838,8173=>500,8174=>500,8175=>500,8178=>869,8179=>869,8180=>869,8182=>869,8183=>869,8184=>1065,8185=>891,8186=>1084,8187=>894,8188=>850,8189=>500,8190=>500,8192=>500,8193=>1000,8194=>500,8195=>1000,8196=>330,8197=>250,8198=>167,8199=>696,8200=>380,8201=>200,8202=>100,8203=>0,8204=>0,8205=>0,8206=>0,8207=>0,8208=>415,8209=>415,8210=>696,8211=>500,8212=>1000,8213=>1000,8214=>500,8215=>500,8216=>380,8217=>380,8218=>380,8219=>380,8220=>657,8221=>657,8222=>657,8223=>657,8224=>500,8225=>500,8226=>639,8227=>639,8228=>333,8229=>667,8230=>1000,8231=>348,8232=>0,8233=>0,8234=>0,8235=>0,8236=>0,8237=>0,8238=>0,8239=>200,8240=>1440,8241=>1887,8242=>264,8243=>447,8244=>630,8245=>264,8246=>447,8247=>630,8248=>733,8249=>412,8250=>412,8251=>972,8252=>627,8253=>580,8254=>500,8255=>828,8256=>828,8257=>329,8258=>1023,8259=>500,8260=>167,8261=>457,8262=>457,8263=>1030,8264=>829,8265=>829,8266=>513,8267=>636,8268=>500,8269=>500,8270=>523,8271=>400,8272=>828,8273=>523,8274=>556,8275=>1000,8276=>828,8277=>838,8278=>684,8279=>813,8280=>838,8281=>838,8282=>380,8283=>872,8284=>838,8285=>380,8286=>380,8287=>222,8288=>0,8289=>0,8290=>0,8291=>0,8292=>0,8298=>0,8299=>0,8300=>0,8301=>0,8302=>0,8303=>0,8304=>438,8305=>219,8308=>438,8309=>438,8310=>438,8311=>438,8312=>438,8313=>438,8314=>528,8315=>528,8316=>528,8317=>288,8318=>288,8319=>456,8320=>438,8321=>438,8322=>438,8323=>438,8324=>438,8325=>438,8326=>438,8327=>438,8328=>438,8329=>438,8330=>528,8331=>528,8332=>528,8333=>288,8334=>288,8336=>458,8337=>479,8338=>488,8339=>413,8340=>479,8341=>456,8342=>487,8343=>219,8344=>664,8345=>456,8346=>479,8347=>381,8348=>388,8352=>929,8353=>696,8354=>696,8355=>696,8356=>696,8357=>1042,8358=>837,8359=>1518,8360=>1205,8361=>1103,8362=>904,8363=>696,8364=>696,8365=>696,8366=>696,8367=>1392,8368=>696,8369=>696,8370=>696,8371=>696,8372=>859,8373=>696,8376=>696,8377=>696,8400=>0,8401=>0,8406=>0,8407=>0,8411=>0,8412=>0,8417=>0,8448=>1120,8449=>1170,8450=>734,8451=>1211,8452=>896,8453=>1091,8454=>1144,8455=>614,8456=>698,8457=>1086,8459=>1073,8460=>913,8461=>888,8462=>712,8463=>712,8464=>597,8465=>697,8466=>856,8467=>472,8468=>974,8469=>837,8470=>1203,8471=>1000,8472=>697,8473=>750,8474=>850,8475=>938,8476=>814,8477=>801,8478=>896,8479=>710,8480=>1020,8481=>1281,8482=>1000,8483=>755,8484=>754,8485=>578,8486=>850,8487=>850,8488=>763,8489=>338,8490=>775,8491=>774,8492=>928,8493=>818,8494=>854,8495=>636,8496=>729,8497=>808,8498=>683,8499=>1184,8500=>465,8501=>794,8502=>731,8503=>494,8504=>684,8505=>380,8506=>945,8507=>1348,8508=>790,8509=>737,8510=>654,8511=>863,8512=>840,8513=>775,8514=>557,8515=>637,8516=>760,8517=>830,8518=>716,8519=>678,8520=>343,8521=>343,8523=>872,8526=>547,8528=>1035,8529=>1035,8530=>1483,8531=>1035,8532=>1035,8533=>1035,8534=>1035,8535=>1035,8536=>1035,8537=>1035,8538=>1035,8539=>1035,8540=>1035,8541=>1035,8542=>1035,8543=>615,8544=>372,8545=>659,8546=>945,8547=>1099,8548=>774,8549=>1099,8550=>1386,8551=>1672,8552=>1121,8553=>771,8554=>1120,8555=>1407,8556=>637,8557=>734,8558=>830,8559=>995,8560=>343,8561=>607,8562=>872,8563=>984,8564=>652,8565=>962,8566=>1227,8567=>1491,8568=>969,8569=>645,8570=>969,8571=>1233,8572=>343,8573=>593,8574=>716,8575=>1042,8576=>1289,8577=>830,8578=>1289,8579=>734,8580=>593,8581=>734,8585=>1035,8592=>838,8593=>838,8594=>838,8595=>838,8596=>838,8597=>838,8598=>838,8599=>838,8600=>838,8601=>838,8602=>838,8603=>838,8604=>838,8605=>838,8606=>838,8607=>838,8608=>838,8609=>838,8610=>838,8611=>838,8612=>838,8613=>838,8614=>838,8615=>838,8616=>838,8617=>838,8618=>838,8619=>838,8620=>838,8621=>838,8622=>838,8623=>838,8624=>838,8625=>838,8626=>838,8627=>838,8628=>838,8629=>838,8630=>838,8631=>838,8632=>838,8633=>838,8634=>838,8635=>838,8636=>838,8637=>838,8638=>838,8639=>838,8640=>838,8641=>838,8642=>838,8643=>838,8644=>838,8645=>838,8646=>838,8647=>838,8648=>838,8649=>838,8650=>838,8651=>838,8652=>838,8653=>838,8654=>838,8655=>838,8656=>838,8657=>838,8658=>838,8659=>838,8660=>838,8661=>838,8662=>838,8663=>838,8664=>838,8665=>838,8666=>838,8667=>838,8668=>838,8669=>838,8670=>838,8671=>838,8672=>838,8673=>838,8674=>838,8675=>838,8676=>838,8677=>838,8678=>838,8679=>838,8680=>838,8681=>838,8682=>838,8683=>838,8684=>838,8685=>838,8686=>838,8687=>838,8688=>838,8689=>838,8690=>838,8691=>838,8692=>838,8693=>838,8694=>838,8695=>838,8696=>838,8697=>838,8698=>838,8699=>838,8700=>838,8701=>838,8702=>838,8703=>838,8704=>774,8705=>696,8706=>544,8707=>683,8708=>683,8709=>856,8710=>697,8711=>697,8712=>896,8713=>896,8714=>750,8715=>896,8716=>896,8717=>750,8718=>636,8719=>787,8720=>787,8721=>718,8722=>838,8723=>838,8724=>696,8725=>365,8726=>696,8727=>838,8728=>626,8729=>380,8730=>667,8731=>667,8732=>667,8733=>712,8734=>833,8735=>838,8736=>896,8737=>896,8738=>838,8739=>500,8740=>500,8741=>500,8742=>500,8743=>812,8744=>812,8745=>812,8746=>812,8747=>610,8748=>929,8749=>1295,8750=>563,8751=>977,8752=>1313,8753=>563,8754=>563,8755=>563,8756=>696,8757=>696,8758=>294,8759=>696,8760=>838,8761=>838,8762=>838,8763=>838,8764=>838,8765=>838,8766=>838,8767=>838,8768=>375,8769=>838,8770=>838,8771=>838,8772=>838,8773=>838,8774=>838,8775=>838,8776=>838,8777=>838,8778=>838,8779=>838,8780=>838,8781=>838,8782=>838,8783=>838,8784=>838,8785=>838,8786=>838,8787=>838,8788=>1063,8789=>1063,8790=>838,8791=>838,8792=>838,8793=>838,8794=>838,8795=>838,8796=>838,8797=>838,8798=>838,8799=>838,8800=>838,8801=>838,8802=>838,8803=>838,8804=>838,8805=>838,8806=>838,8807=>838,8808=>841,8809=>841,8810=>1047,8811=>1047,8812=>500,8813=>838,8814=>838,8815=>838,8816=>838,8817=>838,8818=>838,8819=>838,8820=>838,8821=>838,8822=>838,8823=>838,8824=>838,8825=>838,8826=>838,8827=>838,8828=>838,8829=>838,8830=>838,8831=>838,8832=>838,8833=>838,8834=>838,8835=>838,8836=>838,8837=>838,8838=>838,8839=>838,8840=>838,8841=>838,8842=>838,8843=>838,8844=>812,8845=>812,8846=>812,8847=>838,8848=>838,8849=>838,8850=>838,8851=>796,8852=>796,8853=>838,8854=>838,8855=>838,8856=>838,8857=>838,8858=>838,8859=>838,8860=>838,8861=>838,8862=>838,8863=>838,8864=>838,8865=>838,8866=>914,8867=>914,8868=>914,8869=>914,8870=>542,8871=>542,8872=>914,8873=>914,8874=>914,8875=>914,8876=>914,8877=>914,8878=>914,8879=>914,8880=>838,8881=>838,8882=>838,8883=>838,8884=>838,8885=>838,8886=>1000,8887=>1000,8888=>838,8889=>838,8890=>542,8891=>812,8892=>812,8893=>812,8894=>838,8895=>838,8896=>843,8897=>843,8898=>843,8899=>843,8900=>494,8901=>380,8902=>626,8903=>838,8904=>1000,8905=>1000,8906=>1000,8907=>1000,8908=>1000,8909=>838,8910=>812,8911=>812,8912=>838,8913=>838,8914=>838,8915=>838,8916=>838,8917=>838,8918=>838,8919=>838,8920=>1422,8921=>1422,8922=>838,8923=>838,8924=>838,8925=>838,8926=>838,8927=>838,8928=>838,8929=>838,8930=>838,8931=>838,8932=>838,8933=>838,8934=>838,8935=>838,8936=>838,8937=>838,8938=>838,8939=>838,8940=>838,8941=>838,8942=>1000,8943=>1000,8944=>1000,8945=>1000,8946=>1158,8947=>896,8948=>750,8949=>896,8950=>896,8951=>750,8952=>896,8953=>896,8954=>1158,8955=>896,8956=>750,8957=>896,8958=>750,8959=>896,8960=>602,8961=>602,8962=>716,8963=>838,8964=>838,8965=>838,8966=>838,8967=>488,8968=>457,8969=>457,8970=>457,8971=>457,8972=>809,8973=>809,8974=>809,8975=>809,8976=>838,8977=>539,8984=>928,8985=>838,8988=>469,8989=>469,8990=>469,8991=>469,8992=>610,8993=>610,8996=>1152,8997=>1152,8998=>1414,8999=>1152,9000=>1443,9003=>1414,9004=>873,9075=>390,9076=>716,9077=>869,9082=>687,9085=>863,9095=>1152,9108=>873,9115=>500,9116=>500,9117=>500,9118=>500,9119=>500,9120=>500,9121=>500,9122=>500,9123=>500,9124=>500,9125=>500,9126=>500,9127=>750,9128=>750,9129=>750,9130=>750,9131=>750,9132=>750,9133=>750,9134=>610,9166=>838,9167=>945,9187=>873,9189=>769,9192=>696,9250=>716,9251=>716,9312=>847,9313=>847,9314=>847,9315=>847,9316=>847,9317=>847,9318=>847,9319=>847,9320=>847,9321=>847,9600=>769,9601=>769,9602=>769,9603=>769,9604=>769,9605=>769,9606=>769,9607=>769,9608=>769,9609=>769,9610=>769,9611=>769,9612=>769,9613=>769,9614=>769,9615=>769,9616=>769,9617=>769,9618=>769,9619=>769,9620=>769,9621=>769,9622=>769,9623=>769,9624=>769,9625=>769,9626=>769,9627=>769,9628=>769,9629=>769,9630=>769,9631=>769,9632=>945,9633=>945,9634=>945,9635=>945,9636=>945,9637=>945,9638=>945,9639=>945,9640=>945,9641=>945,9642=>678,9643=>678,9644=>945,9645=>945,9646=>550,9647=>550,9648=>769,9649=>769,9650=>769,9651=>769,9652=>502,9653=>502,9654=>769,9655=>769,9656=>502,9657=>502,9658=>769,9659=>769,9660=>769,9661=>769,9662=>502,9663=>502,9664=>769,9665=>769,9666=>502,9667=>502,9668=>769,9669=>769,9670=>769,9671=>769,9672=>769,9673=>873,9674=>494,9675=>873,9676=>873,9677=>873,9678=>873,9679=>873,9680=>873,9681=>873,9682=>873,9683=>873,9684=>873,9685=>873,9686=>527,9687=>527,9688=>840,9689=>970,9690=>970,9691=>970,9692=>387,9693=>387,9694=>387,9695=>387,9696=>769,9697=>769,9698=>769,9699=>769,9700=>769,9701=>769,9702=>639,9703=>945,9704=>945,9705=>945,9706=>945,9707=>945,9708=>769,9709=>769,9710=>769,9711=>1119,9712=>945,9713=>945,9714=>945,9715=>945,9716=>873,9717=>873,9718=>873,9719=>873,9720=>769,9721=>769,9722=>769,9723=>830,9724=>830,9725=>732,9726=>732,9727=>769,9728=>896,9729=>1000,9730=>896,9731=>896,9732=>896,9733=>896,9734=>896,9735=>573,9736=>896,9737=>896,9738=>888,9739=>888,9740=>671,9741=>1013,9742=>1246,9743=>1250,9744=>896,9745=>896,9746=>896,9747=>532,9748=>896,9749=>896,9750=>896,9751=>896,9752=>896,9753=>896,9754=>896,9755=>896,9756=>896,9757=>609,9758=>896,9759=>609,9760=>896,9761=>896,9762=>896,9763=>896,9764=>669,9765=>746,9766=>649,9767=>784,9768=>545,9769=>896,9770=>896,9771=>896,9772=>710,9773=>896,9774=>896,9775=>896,9776=>896,9777=>896,9778=>896,9779=>896,9780=>896,9781=>896,9782=>896,9783=>896,9784=>896,9785=>1042,9786=>1042,9787=>1042,9788=>896,9789=>896,9790=>896,9791=>614,9792=>732,9793=>732,9794=>896,9795=>896,9796=>896,9797=>896,9798=>896,9799=>896,9800=>896,9801=>896,9802=>896,9803=>896,9804=>896,9805=>896,9806=>896,9807=>896,9808=>896,9809=>896,9810=>896,9811=>896,9812=>896,9813=>896,9814=>896,9815=>896,9816=>896,9817=>896,9818=>896,9819=>896,9820=>896,9821=>896,9822=>896,9823=>896,9824=>896,9825=>896,9826=>896,9827=>896,9828=>896,9829=>896,9830=>896,9831=>896,9832=>896,9833=>472,9834=>638,9835=>896,9836=>896,9837=>472,9838=>357,9839=>484,9840=>748,9841=>766,9842=>896,9843=>896,9844=>896,9845=>896,9846=>896,9847=>896,9848=>896,9849=>896,9850=>896,9851=>896,9852=>896,9853=>896,9854=>896,9855=>896,9856=>869,9857=>869,9858=>869,9859=>869,9860=>869,9861=>869,9862=>896,9863=>896,9864=>896,9865=>896,9866=>896,9867=>896,9868=>896,9869=>896,9870=>896,9871=>896,9872=>896,9873=>896,9874=>896,9875=>896,9876=>896,9877=>541,9878=>896,9879=>896,9880=>896,9881=>896,9882=>896,9883=>896,9884=>896,9888=>896,9889=>702,9890=>1004,9891=>1089,9892=>1175,9893=>903,9894=>838,9895=>838,9896=>838,9897=>838,9898=>838,9899=>838,9900=>838,9901=>838,9902=>838,9903=>838,9904=>844,9905=>838,9906=>732,9907=>732,9908=>732,9909=>732,9910=>850,9911=>732,9912=>732,9920=>838,9921=>838,9922=>838,9923=>838,9954=>732,9985=>838,9986=>838,9987=>838,9988=>838,9990=>838,9991=>838,9992=>838,9993=>838,9996=>838,9997=>838,9998=>838,9999=>838,10000=>838,10001=>838,10002=>838,10003=>838,10004=>838,10005=>838,10006=>838,10007=>838,10008=>838,10009=>838,10010=>838,10011=>838,10012=>838,10013=>838,10014=>838,10015=>838,10016=>838,10017=>838,10018=>838,10019=>838,10020=>838,10021=>838,10022=>838,10023=>838,10025=>838,10026=>838,10027=>838,10028=>838,10029=>838,10030=>838,10031=>838,10032=>838,10033=>838,10034=>838,10035=>838,10036=>838,10037=>838,10038=>838,10039=>838,10040=>838,10041=>838,10042=>838,10043=>838,10044=>838,10045=>838,10046=>838,10047=>838,10048=>838,10049=>838,10050=>838,10051=>838,10052=>838,10053=>838,10054=>838,10055=>838,10056=>838,10057=>838,10058=>838,10059=>838,10061=>896,10063=>896,10064=>896,10065=>896,10066=>896,10070=>896,10072=>838,10073=>838,10074=>838,10075=>347,10076=>347,10077=>587,10078=>587,10081=>838,10082=>838,10083=>838,10084=>838,10085=>838,10086=>838,10087=>838,10088=>838,10089=>838,10090=>838,10091=>838,10092=>838,10093=>838,10094=>838,10095=>838,10096=>838,10097=>838,10098=>838,10099=>838,10100=>838,10101=>838,10102=>847,10103=>847,10104=>847,10105=>847,10106=>847,10107=>847,10108=>847,10109=>847,10110=>847,10111=>847,10112=>838,10113=>838,10114=>838,10115=>838,10116=>838,10117=>838,10118=>838,10119=>838,10120=>838,10121=>838,10122=>838,10123=>838,10124=>838,10125=>838,10126=>838,10127=>838,10128=>838,10129=>838,10130=>838,10131=>838,10132=>838,10136=>838,10137=>838,10138=>838,10139=>838,10140=>838,10141=>838,10142=>838,10143=>838,10144=>838,10145=>838,10146=>838,10147=>838,10148=>838,10149=>838,10150=>838,10151=>838,10152=>838,10153=>838,10154=>838,10155=>838,10156=>838,10157=>838,10158=>838,10159=>838,10161=>838,10162=>838,10163=>838,10164=>838,10165=>838,10166=>838,10167=>838,10168=>838,10169=>838,10170=>838,10171=>838,10172=>838,10173=>838,10174=>838,10181=>457,10182=>457,10208=>494,10214=>487,10215=>487,10216=>457,10217=>457,10218=>721,10219=>721,10224=>838,10225=>838,10226=>838,10227=>838,10228=>1157,10229=>1434,10230=>1434,10231=>1434,10232=>1434,10233=>1434,10234=>1434,10235=>1434,10236=>1434,10237=>1434,10238=>1434,10239=>1434,10240=>781,10241=>781,10242=>781,10243=>781,10244=>781,10245=>781,10246=>781,10247=>781,10248=>781,10249=>781,10250=>781,10251=>781,10252=>781,10253=>781,10254=>781,10255=>781,10256=>781,10257=>781,10258=>781,10259=>781,10260=>781,10261=>781,10262=>781,10263=>781,10264=>781,10265=>781,10266=>781,10267=>781,10268=>781,10269=>781,10270=>781,10271=>781,10272=>781,10273=>781,10274=>781,10275=>781,10276=>781,10277=>781,10278=>781,10279=>781,10280=>781,10281=>781,10282=>781,10283=>781,10284=>781,10285=>781,10286=>781,10287=>781,10288=>781,10289=>781,10290=>781,10291=>781,10292=>781,10293=>781,10294=>781,10295=>781,10296=>781,10297=>781,10298=>781,10299=>781,10300=>781,10301=>781,10302=>781,10303=>781,10304=>781,10305=>781,10306=>781,10307=>781,10308=>781,10309=>781,10310=>781,10311=>781,10312=>781,10313=>781,10314=>781,10315=>781,10316=>781,10317=>781,10318=>781,10319=>781,10320=>781,10321=>781,10322=>781,10323=>781,10324=>781,10325=>781,10326=>781,10327=>781,10328=>781,10329=>781,10330=>781,10331=>781,10332=>781,10333=>781,10334=>781,10335=>781,10336=>781,10337=>781,10338=>781,10339=>781,10340=>781,10341=>781,10342=>781,10343=>781,10344=>781,10345=>781,10346=>781,10347=>781,10348=>781,10349=>781,10350=>781,10351=>781,10352=>781,10353=>781,10354=>781,10355=>781,10356=>781,10357=>781,10358=>781,10359=>781,10360=>781,10361=>781,10362=>781,10363=>781,10364=>781,10365=>781,10366=>781,10367=>781,10368=>781,10369=>781,10370=>781,10371=>781,10372=>781,10373=>781,10374=>781,10375=>781,10376=>781,10377=>781,10378=>781,10379=>781,10380=>781,10381=>781,10382=>781,10383=>781,10384=>781,10385=>781,10386=>781,10387=>781,10388=>781,10389=>781,10390=>781,10391=>781,10392=>781,10393=>781,10394=>781,10395=>781,10396=>781,10397=>781,10398=>781,10399=>781,10400=>781,10401=>781,10402=>781,10403=>781,10404=>781,10405=>781,10406=>781,10407=>781,10408=>781,10409=>781,10410=>781,10411=>781,10412=>781,10413=>781,10414=>781,10415=>781,10416=>781,10417=>781,10418=>781,10419=>781,10420=>781,10421=>781,10422=>781,10423=>781,10424=>781,10425=>781,10426=>781,10427=>781,10428=>781,10429=>781,10430=>781,10431=>781,10432=>781,10433=>781,10434=>781,10435=>781,10436=>781,10437=>781,10438=>781,10439=>781,10440=>781,10441=>781,10442=>781,10443=>781,10444=>781,10445=>781,10446=>781,10447=>781,10448=>781,10449=>781,10450=>781,10451=>781,10452=>781,10453=>781,10454=>781,10455=>781,10456=>781,10457=>781,10458=>781,10459=>781,10460=>781,10461=>781,10462=>781,10463=>781,10464=>781,10465=>781,10466=>781,10467=>781,10468=>781,10469=>781,10470=>781,10471=>781,10472=>781,10473=>781,10474=>781,10475=>781,10476=>781,10477=>781,10478=>781,10479=>781,10480=>781,10481=>781,10482=>781,10483=>781,10484=>781,10485=>781,10486=>781,10487=>781,10488=>781,10489=>781,10490=>781,10491=>781,10492=>781,10493=>781,10494=>781,10495=>781,10502=>838,10503=>838,10506=>838,10507=>838,10560=>838,10561=>838,10627=>753,10628=>753,10702=>838,10703=>1046,10704=>1046,10705=>1000,10706=>1000,10707=>1000,10708=>1000,10709=>1000,10731=>494,10746=>838,10747=>838,10752=>1000,10753=>1000,10754=>1000,10764=>1661,10765=>563,10766=>563,10767=>563,10768=>563,10769=>563,10770=>563,10771=>563,10772=>563,10773=>563,10774=>563,10775=>563,10776=>563,10777=>563,10778=>563,10779=>563,10780=>563,10799=>838,10877=>838,10878=>838,10879=>838,10880=>838,10881=>838,10882=>838,10883=>838,10884=>838,10885=>838,10886=>838,10887=>838,10888=>838,10889=>838,10890=>838,10891=>838,10892=>838,10893=>838,10894=>838,10895=>838,10896=>838,10897=>838,10898=>838,10899=>838,10900=>838,10901=>838,10902=>838,10903=>838,10904=>838,10905=>838,10906=>838,10907=>838,10908=>838,10909=>838,10910=>838,10911=>838,10912=>838,10926=>838,10927=>838,10928=>838,10929=>838,10930=>838,10931=>838,10932=>838,10933=>838,10934=>838,10935=>838,10936=>838,10937=>838,10938=>838,11001=>838,11002=>838,11008=>838,11009=>838,11010=>838,11011=>838,11012=>838,11013=>838,11014=>838,11015=>838,11016=>838,11017=>838,11018=>838,11019=>838,11020=>838,11021=>838,11022=>838,11023=>838,11024=>838,11025=>838,11026=>945,11027=>945,11028=>945,11029=>945,11030=>769,11031=>769,11032=>769,11033=>769,11034=>945,11039=>869,11040=>869,11041=>873,11042=>873,11043=>873,11044=>1119,11091=>869,11092=>869,11360=>637,11361=>360,11362=>637,11363=>733,11364=>770,11365=>675,11366=>478,11367=>956,11368=>712,11369=>775,11370=>665,11371=>725,11372=>582,11373=>860,11374=>995,11375=>774,11376=>860,11377=>778,11378=>1221,11379=>1056,11380=>652,11381=>698,11382=>565,11383=>782,11385=>538,11386=>687,11387=>559,11388=>219,11389=>487,11390=>720,11391=>725,11568=>691,11569=>941,11570=>941,11571=>725,11572=>725,11573=>725,11574=>676,11575=>774,11576=>774,11577=>683,11578=>683,11579=>802,11580=>989,11581=>761,11582=>623,11583=>761,11584=>941,11585=>941,11586=>373,11587=>740,11588=>837,11589=>914,11590=>672,11591=>737,11592=>680,11593=>683,11594=>602,11595=>1039,11596=>778,11597=>837,11598=>683,11599=>372,11600=>778,11601=>373,11602=>725,11603=>691,11604=>941,11605=>941,11606=>837,11607=>373,11608=>836,11609=>941,11610=>941,11611=>734,11612=>876,11613=>771,11614=>734,11615=>683,11616=>774,11617=>837,11618=>683,11619=>850,11620=>697,11621=>850,11631=>716,11800=>580,11810=>457,11811=>457,11812=>457,11813=>457,11822=>580,19904=>896,19905=>896,19906=>896,19907=>896,19908=>896,19909=>896,19910=>896,19911=>896,19912=>896,19913=>896,19914=>896,19915=>896,19916=>896,19917=>896,19918=>896,19919=>896,19920=>896,19921=>896,19922=>896,19923=>896,19924=>896,19925=>896,19926=>896,19927=>896,19928=>896,19929=>896,19930=>896,19931=>896,19932=>896,19933=>896,19934=>896,19935=>896,19936=>896,19937=>896,19938=>896,19939=>896,19940=>896,19941=>896,19942=>896,19943=>896,19944=>896,19945=>896,19946=>896,19947=>896,19948=>896,19949=>896,19950=>896,19951=>896,19952=>896,19953=>896,19954=>896,19955=>896,19956=>896,19957=>896,19958=>896,19959=>896,19960=>896,19961=>896,19962=>896,19963=>896,19964=>896,19965=>896,19966=>896,19967=>896,42564=>720,42565=>595,42566=>436,42567=>440,42572=>1405,42573=>1173,42576=>1234,42577=>1027,42580=>1174,42581=>972,42582=>1093,42583=>958,42594=>1085,42595=>924,42596=>1096,42597=>912,42598=>1260,42599=>997,42600=>850,42601=>687,42602=>1037,42603=>868,42604=>1406,42605=>1106,42606=>961,42634=>963,42635=>787,42636=>682,42637=>580,42644=>808,42645=>712,42760=>500,42761=>500,42762=>500,42763=>500,42764=>500,42765=>500,42766=>500,42767=>500,42768=>500,42769=>500,42770=>500,42771=>500,42772=>500,42773=>500,42774=>500,42779=>400,42780=>400,42781=>287,42782=>287,42783=>287,42786=>444,42787=>390,42788=>540,42789=>540,42790=>837,42791=>712,42792=>1031,42793=>857,42794=>696,42795=>557,42800=>559,42801=>595,42802=>1349,42803=>1052,42804=>1284,42805=>1064,42806=>1216,42807=>1054,42808=>1079,42809=>922,42810=>1079,42811=>922,42812=>1035,42813=>922,42814=>698,42815=>549,42822=>850,42823=>542,42824=>683,42825=>531,42826=>918,42827=>814,42830=>1406,42831=>1106,42832=>733,42833=>716,42834=>948,42835=>937,42838=>850,42839=>716,42852=>738,42853=>716,42854=>738,42855=>716,42880=>637,42881=>343,42882=>837,42883=>712,42889=>400,42890=>386,42891=>456,42892=>306,42893=>808,42894=>693,42896=>928,42897=>768,43002=>1062,43003=>683,43004=>733,43005=>995,43006=>372,43007=>1325,61184=>216,61185=>242,61186=>267,61187=>277,61188=>282,61189=>242,61190=>216,61191=>242,61192=>267,61193=>277,61194=>267,61195=>242,61196=>216,61197=>242,61198=>267,61199=>277,61200=>267,61201=>242,61202=>216,61203=>242,61204=>282,61205=>277,61206=>267,61207=>242,61208=>216,61209=>282,63173=>687,64256=>810,64257=>741,64258=>741,64259=>1115,64260=>1116,64261=>808,64262=>1020,64275=>1388,64276=>1384,64277=>1378,64278=>1384,64279=>1713,64285=>294,64286=>0,64287=>519,64288=>665,64289=>939,64290=>788,64291=>920,64292=>786,64293=>857,64294=>869,64295=>821,64296=>890,64297=>838,64298=>758,64299=>758,64300=>758,64301=>758,64302=>728,64303=>728,64304=>728,64305=>610,64306=>447,64307=>588,64308=>687,64309=>437,64310=>485,64312=>679,64313=>435,64314=>578,64315=>566,64316=>605,64318=>724,64320=>453,64321=>680,64323=>675,64324=>658,64326=>653,64327=>736,64328=>602,64329=>758,64330=>683,64331=>343,64332=>610,64333=>566,64334=>658,64335=>710,64338=>1005,64339=>1059,64340=>375,64341=>408,64342=>1005,64343=>1059,64344=>375,64345=>408,64346=>1005,64347=>1059,64348=>375,64349=>408,64350=>1005,64351=>1059,64352=>375,64353=>408,64354=>1005,64355=>1059,64356=>375,64357=>408,64358=>1005,64359=>1059,64360=>375,64361=>408,64362=>1162,64363=>1191,64364=>655,64365=>720,64366=>1162,64367=>1191,64368=>655,64369=>720,64370=>721,64371=>721,64372=>721,64373=>721,64374=>721,64375=>721,64376=>721,64377=>721,64378=>721,64379=>721,64380=>721,64381=>721,64382=>721,64383=>721,64384=>721,64385=>721,64386=>513,64387=>578,64388=>513,64389=>578,64390=>513,64391=>578,64392=>513,64393=>578,64394=>576,64395=>622,64396=>576,64397=>622,64398=>1024,64399=>1024,64400=>582,64401=>582,64402=>1024,64403=>1024,64404=>582,64405=>582,64406=>1024,64407=>1024,64408=>582,64409=>582,64410=>1024,64411=>1024,64412=>582,64413=>582,64414=>854,64415=>900,64416=>854,64417=>900,64418=>375,64419=>408,64426=>938,64427=>880,64428=>693,64429=>660,64467=>824,64468=>843,64469=>476,64470=>552,64473=>622,64474=>627,64488=>375,64489=>408,64508=>917,64509=>1012,64510=>375,64511=>408,65024=>0,65025=>0,65026=>0,65027=>0,65028=>0,65029=>0,65030=>0,65031=>0,65032=>0,65033=>0,65034=>0,65035=>0,65036=>0,65037=>0,65038=>0,65039=>0,65056=>0,65057=>0,65058=>0,65059=>0,65136=>342,65137=>342,65138=>342,65139=>346,65140=>342,65142=>342,65143=>342,65144=>342,65145=>342,65146=>342,65147=>342,65148=>342,65149=>342,65150=>342,65151=>342,65152=>511,65153=>343,65154=>375,65155=>343,65156=>375,65157=>622,65158=>627,65159=>343,65160=>375,65161=>917,65162=>917,65163=>375,65164=>408,65165=>343,65166=>375,65167=>1005,65168=>1059,65169=>375,65170=>408,65171=>590,65172=>606,65173=>1005,65174=>1059,65175=>375,65176=>408,65177=>1005,65178=>1059,65179=>375,65180=>408,65181=>721,65182=>721,65183=>721,65184=>721,65185=>721,65186=>721,65187=>721,65188=>721,65189=>721,65190=>721,65191=>721,65192=>721,65193=>513,65194=>578,65195=>513,65196=>578,65197=>576,65198=>622,65199=>576,65200=>622,65201=>1380,65202=>1414,65203=>983,65204=>1018,65205=>1380,65206=>1414,65207=>983,65208=>1018,65209=>1345,65210=>1364,65211=>966,65212=>985,65213=>1345,65214=>1364,65215=>966,65216=>985,65217=>1039,65218=>1071,65219=>942,65220=>974,65221=>1039,65222=>1071,65223=>942,65224=>974,65225=>683,65226=>683,65227=>683,65228=>564,65229=>683,65230=>683,65231=>683,65232=>564,65233=>1162,65234=>1191,65235=>655,65236=>720,65237=>894,65238=>901,65239=>655,65240=>720,65241=>917,65242=>931,65243=>582,65244=>582,65245=>868,65246=>893,65247=>375,65248=>408,65249=>733,65250=>784,65251=>619,65252=>670,65253=>854,65254=>900,65255=>375,65256=>408,65257=>590,65258=>606,65259=>693,65260=>660,65261=>622,65262=>627,65263=>917,65264=>1012,65265=>917,65266=>1012,65267=>375,65268=>408,65269=>745,65270=>759,65271=>745,65272=>759,65273=>745,65274=>759,65275=>745,65276=>759,65279=>0,65529=>0,65530=>0,65531=>0,65532=>0,65533=>1113,65535=>600);// --- EOF ---
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface to the Drizzle extension * * WARNING - EXPERIMENTAL, never use in production, drizzle module segfaults often and when you least expect it to * * TODO: This file and drizzle-wrappers.lib.php should be devoid of any segault related hacks. * TODO: Crashing versions of drizzle module and/or libdrizzle should be blacklisted * * @package PhpMyAdmin-DBI-Drizzle */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/logging.lib.php';require_once './libraries/dbi/drizzle-wrappers.lib.php';/** * MySQL client API */if (!defined('PMA_MYSQL_CLIENT_API')) {    define('PMA_MYSQL_CLIENT_API', (int)drizzle_version());}/** * Helper function for connecting to the database server * * @param   PMA_Drizzle  $drizzle * @param   string       $host * @param   int          $port * @param   string       $uds * @param   string       $user * @param   string       $password * @param   string       $db * @param   int          $options * @return  PMA_DrizzleCon */function PMA_DBI_real_connect($drizzle, $host, $port, $uds, $user, $password, $db = null, $options = DRIZZLE_CON_NONE){    if ($uds) {        $con = $drizzle->addUds($uds, $user, $password, $db, $options);    } else {        $con = $drizzle->addTcp($host, $port, $user, $password, $db, $options);    }    return $con;}/** * connects to the database server * * @param   string  $user           drizzle user name * @param   string  $password       drizzle user password * @param   bool    $is_controluser * @param   array   $server host/port/socket * @param   bool    $auxiliary_connection (when true, don't go back to login if connection fails) * @return  mixed   false on error or a mysqli object on success */function PMA_DBI_connect($user, $password, $is_controluser = false, $server = null, $auxiliary_connection = false){    global $cfg;    if ($server) {        $server_port   = (empty($server['port']))            ? false            : (int)$server['port'];        $server_socket = (empty($server['socket']))            ? ''            : $server['socket'];        $server['host'] = (empty($server['host']))            ? 'localhost'            : $server['host'];    } else {        $server_port   = (empty($cfg['Server']['port']))            ? false            : (int) $cfg['Server']['port'];        $server_socket = (empty($cfg['Server']['socket']))            ? null            : $cfg['Server']['socket'];    }    if (strtolower($GLOBALS['cfg']['Server']['connect_type']) == 'tcp') {        $GLOBALS['cfg']['Server']['socket'] = '';    }    $drizzle = new PMA_Drizzle();    $client_flags = 0;    /* Optionally compress connection */    if ($GLOBALS['cfg']['Server']['compress']) {        $client_flags |= DRIZZLE_CAPABILITIES_COMPRESS;    }    /* Optionally enable SSL */    if ($GLOBALS['cfg']['Server']['ssl']) {        $client_flags |= DRIZZLE_CAPABILITIES_SSL;    }    if (!$server) {        $link = @PMA_DBI_real_connect($drizzle, $cfg['Server']['host'], $server_port, $server_socket, $user, $password, false, $client_flags);        // Retry with empty password if we're allowed to        if ($link == false && isset($cfg['Server']['nopassword']) && $cfg['Server']['nopassword'] && !$is_controluser) {            $link = @PMA_DBI_real_connect($drizzle, $cfg['Server']['host'], $server_port, $server_socket, $user, null, false, $client_flags);        }    } else {        $link = @PMA_DBI_real_connect($drizzle, $server['host'], $server_port, $server_socket, $user, $password);    }    if ($link == false) {        if ($is_controluser) {            trigger_error(__('Connection for controluser as defined in your configuration failed.'), E_USER_WARNING);            return false;        }        // we could be calling PMA_DBI_connect() to connect to another        // server, for example in the Synchronize feature, so do not        // go back to main login if it fails        if (! $auxiliary_connection) {            PMA_log_user($user, 'drizzle-denied');            PMA_auth_fails();        } else {            return false;        }    } else {        PMA_DBI_postConnect($link, $is_controluser);    }    return $link;}/** * selects given database * * @param string          $dbname  database name to select * @param PMA_DrizzleCom  $link    connection object * @return bool */function PMA_DBI_select_db($dbname, $link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return $link->selectDb($dbname);}/** * runs a query and returns the result * * @param   string          $query    query to execute * @param   PMA_DrizzleCon  $link     connection object * @param   int             $options * @return  PMA_DrizzleResult */function PMA_DBI_real_query($query, $link, $options){    $buffer_mode = $options & PMA_DBI_QUERY_UNBUFFERED        ? PMA_Drizzle::BUFFER_ROW        : PMA_Drizzle::BUFFER_RESULT;    $res = $link->query($query, $buffer_mode);    return $res;}/** * returns array of rows with associative and numeric keys from $result * * @param   PMA_DrizzleResult  $result * @return  array */function PMA_DBI_fetch_array($result){    return $result->fetchRow(PMA_Drizzle::FETCH_BOTH);}/** * returns array of rows with associative keys from $result * * @param   PMA_DrizzleResult  $result * @return  array */function PMA_DBI_fetch_assoc($result){    return $result->fetchRow(PMA_Drizzle::FETCH_ASSOC);}/** * returns array of rows with numeric keys from $result * * @param   PMA_DrizzleResult  $result * @return  array */function PMA_DBI_fetch_row($result){    return $result->fetchRow(PMA_Drizzle::FETCH_NUM);}/** * Adjusts the result pointer to an arbitrary row in the result * * @param   PMA_DrizzleResult  $result * @param   int                $offset * @return  boolean true on success, false on failure */function PMA_DBI_data_seek($result, $offset){    return $result->seek($offset);}/** * Frees memory associated with the result * * @param  PMA_DrizzleResult  $result */function PMA_DBI_free_result($result){    if ($result instanceof PMA_DrizzleResult) {        $result->free();    }}/** * Check if there are any more query results from a multi query * * @return  bool         false */function PMA_DBI_more_results() {    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Prepare next result from multi_query * * @return  bool         false */function PMA_DBI_next_result() {    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Returns a string representing the type of connection used * @param   PMA_DrizzleCon  $link   connection object * @return  string          type of connection used */function PMA_DBI_get_host_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    $str = $link->port()        ? $link->host() . ':' . $link->port() . ' via TCP/IP'        : 'Localhost via UNIX socket';    return $str;}/** * Returns the version of the Drizzle protocol used * @param   PMA_DrizzleCon  $link   connection object * @return  int         version of the Drizzle protocol used */function PMA_DBI_get_proto_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return $link->protocolVersion();}/** * returns a string that represents the client library version * @return  string          Drizzle client library version */function PMA_DBI_get_client_info(){    return 'libdrizzle (Drizzle ' . drizzle_version() . ')';}/** * returns last error message or false if no errors occured * * @param   PMA_DrizzleCon  $link  connection object * @return  string|bool  $error or false */function PMA_DBI_getError($link = null){    $GLOBALS['errno'] = 0;    /* Treat false same as null because of controllink */    if ($link === false) {        $link = null;    }    if (null === $link && isset($GLOBALS['userlink'])) {        $link =& $GLOBALS['userlink'];        // Do not stop now. We still can get the error code        // with mysqli_connect_errno()//    } else {//        return false;    }    if (null !== $link) {        $error_number = drizzle_con_errno($link->getConnectionObject());        $error_message = drizzle_con_error($link->getConnectionObject());    } else {        $error_number = drizzle_errno();        $error_message = drizzle_error();    }    if (0 == $error_number) {        return false;    }    // keep the error number for further check after the call to PMA_DBI_getError()    $GLOBALS['errno'] = $error_number;    return PMA_DBI_formatError($error_number, $error_message);}/** * returns the number of rows returned by last query * * @param   PMA_DrizzleResult  $result * @return  string|int */function PMA_DBI_num_rows($result){    // see the note for PMA_DBI_try_query();    if (!is_bool($result)) {        return @$result->numRows();    } else {        return 0;    }}/** * returns last inserted auto_increment id for given $link or $GLOBALS['userlink'] * * @param   PMA_DrizzleCon  $link  connection object * @return  string|int */function PMA_DBI_insert_id($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    // copied from mysql and mysqli    // When no controluser is defined, using mysqli_insert_id($link)    // does not always return the last insert id due to a mixup with    // the tracking mechanism, but this works:    return PMA_DBI_fetch_value('SELECT LAST_INSERT_ID();', 0, 0, $link);    // Curiously, this problem does not happen with the mysql extension but    // there is another problem with BIGINT primary keys so PMA_DBI_insert_id()    // in the mysql extension also uses this logic.}/** * returns the number of rows affected by last query * * @param   PMA_DrizzleResult  $link            connection object * @param   bool               $get_from_cache * @return  string|int */function PMA_DBI_affected_rows($link = null, $get_from_cache = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($get_from_cache) {        return $GLOBALS['cached_affected_rows'];    } else {        return $link->affectedRows();    }}/** * returns metainfo for fields in $result * * @param   PMA_DrizzleResult  $result * @return  array  meta info for fields in $result */function PMA_DBI_get_fields_meta($result){    // Build an associative array for a type look up    $typeAr = array();    /*$typeAr[DRIZZLE_COLUMN_TYPE_DECIMAL]     = 'real';    $typeAr[DRIZZLE_COLUMN_TYPE_NEWDECIMAL]  = 'real';    $typeAr[DRIZZLE_COLUMN_TYPE_BIT]         = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_TINY]        = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_SHORT]       = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_LONG]        = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_FLOAT]       = 'real';    $typeAr[DRIZZLE_COLUMN_TYPE_DOUBLE]      = 'real';    $typeAr[DRIZZLE_COLUMN_TYPE_NULL]        = 'null';    $typeAr[DRIZZLE_COLUMN_TYPE_TIMESTAMP]   = 'timestamp';    $typeAr[DRIZZLE_COLUMN_TYPE_LONGLONG]    = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_INT24]       = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_DATE]        = 'date';    $typeAr[DRIZZLE_COLUMN_TYPE_TIME]        = 'date';    $typeAr[DRIZZLE_COLUMN_TYPE_DATETIME]    = 'datetime';    $typeAr[DRIZZLE_COLUMN_TYPE_YEAR]        = 'year';    $typeAr[DRIZZLE_COLUMN_TYPE_NEWDATE]     = 'date';    $typeAr[DRIZZLE_COLUMN_TYPE_ENUM]        = 'unknown';    $typeAr[DRIZZLE_COLUMN_TYPE_SET]         = 'unknown';    $typeAr[DRIZZLE_COLUMN_TYPE_VIRTUAL]     = 'unknown';    $typeAr[DRIZZLE_COLUMN_TYPE_TINY_BLOB]   = 'blob';    $typeAr[DRIZZLE_COLUMN_TYPE_MEDIUM_BLOB] = 'blob';    $typeAr[DRIZZLE_COLUMN_TYPE_LONG_BLOB]   = 'blob';    $typeAr[DRIZZLE_COLUMN_TYPE_BLOB]        = 'blob';    $typeAr[DRIZZLE_COLUMN_TYPE_VAR_STRING]  = 'string';    $typeAr[DRIZZLE_COLUMN_TYPE_VARCHAR]     = 'string';    $typeAr[DRIZZLE_COLUMN_TYPE_STRING]      = 'string';    $typeAr[DRIZZLE_COLUMN_TYPE_GEOMETRY]    = 'geometry';*/    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_BLOB]      = 'blob';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_DATE]      = 'date';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_DATETIME]  = 'datetime';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_DOUBLE]    = 'real';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_ENUM]      = 'unknown';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_LONG]      = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_LONGLONG]  = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_MAX]       = 'unknown';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_NULL]      = 'null';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_TIMESTAMP] = 'timestamp';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_TINY]      = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_VARCHAR]   = 'string';    // array of DrizzleColumn    $columns = $result->getColumns();    // columns in a standarized format    $std_columns = array();    foreach ($columns as $k => $column) {        $c = new stdClass();        $c->name = $column->name();        $c->orgname = $column->origName();        $c->table = $column->table();        $c->orgtable = $column->origTable();        $c->def = $column->defaultValue();        $c->db = $column->db();        $c->catalog = $column->catalog();        // $column->maxSize() returns always 0 while size() seems        // to return a correct value (drizzle extension v.0.5, API v.7)        $c->max_length = $column->size();        $c->decimals = $column->decimals();        $c->charsetnr = $column->charset();        $c->type = $typeAr[$column->typeDrizzle()];        $c->_type = $column->type();        $c->flags = PMA_DBI_field_flags($result, $k);        $c->_flags = $column->flags();        $c->multiple_key = (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_MULTIPLE_KEY);        $c->primary_key =  (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_PRI_KEY);        $c->unique_key =   (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_UNIQUE_KEY);        $c->not_null =     (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_NOT_NULL);        $c->unsigned =     (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_UNSIGNED);        $c->zerofill =     (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_ZEROFILL);        $c->numeric =      (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_NUM);        $c->blob =         (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_BLOB);        $std_columns[] = $c;    }    return $std_columns;}/** * return number of fields in given $result * * @param   PMA_DrizzleResult  $result * @return  int  field count */function PMA_DBI_num_fields($result){    return $result->numColumns();}/** * returns the length of the given field $i in $result * * @param   PMA_DrizzleResult  $result * @param   int                $i       field * @return  int  length of field */function PMA_DBI_field_len($result, $i){    $colums = $result->getColumns();    return $colums[$i]->size();}/** * returns name of $i. field in $result * * @param   PMA_DrizzleResult  $result * @param   int                $i       field * @return  string  name of $i. field in $result */function PMA_DBI_field_name($result, $i){    $colums = $result->getColumns();    return $colums[$i]->name();}/** * returns concatenated string of human readable field flags * * @param   PMA_DrizzleResult  $result * @param   int                $i       field * @return  string  field flags */function PMA_DBI_field_flags($result, $i){    $columns = $result->getColumns();    $f = $columns[$i];    $type = $f->typeDrizzle();    $charsetnr = $f->charset();    $f = $f->flags();    $flags = '';    if ($f & DRIZZLE_COLUMN_FLAGS_UNIQUE_KEY) {        $flags .= 'unique ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_NUM) {        $flags .= 'num ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_PART_KEY) {        $flags .= 'part_key ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_SET) {        $flags .= 'set ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_TIMESTAMP) {        $flags .= 'timestamp ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_AUTO_INCREMENT) {        $flags .= 'auto_increment ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_ENUM) {        $flags .= 'enum ';    }    // See http://dev.mysql.com/doc/refman/6.0/en/c-api-datatypes.html:    // to determine if a string is binary, we should not use MYSQLI_BINARY_FLAG    // but instead the charsetnr member of the MYSQL_FIELD    // structure. Watch out: some types like DATE returns 63 in charsetnr    // so we have to check also the type.    // Unfortunately there is no equivalent in the mysql extension.    if (($type == DRIZZLE_COLUMN_TYPE_DRIZZLE_BLOB || $type == DRIZZLE_COLUMN_TYPE_DRIZZLE_VARCHAR) && 63 == $charsetnr) {        $flags .= 'binary ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_ZEROFILL) {        $flags .= 'zerofill ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_UNSIGNED) {        $flags .= 'unsigned ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_BLOB) {        $flags .= 'blob ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_MULTIPLE_KEY) {        $flags .= 'multiple_key ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_UNIQUE_KEY) {        $flags .= 'unique_key ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_PRI_KEY) {        $flags .= 'primary_key ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_NOT_NULL) {        $flags .= 'not_null ';    }    return trim($flags);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common header for user preferences pages * * @package PhpMyAdmin */if (!defined('PHPMYADMIN')) {    exit;}// show server tabsrequire './libraries/server_links.inc.php';// build user preferences menu$form_param = filter_input(INPUT_GET, 'form');if (! isset($forms[$form_param])) {    $forms_keys = array_keys($forms);    $form_param = array_shift($forms_keys);}$tabs_icons = array(    'Features'    => 'b_tblops.png',    'Sql_queries' => 'b_sql.png',    'Left_frame'  => 'b_select.png',    'Main_frame'  => 'b_props.png',    'Import'      => 'b_import.png',    'Export'      => 'b_export.png');echo '<ul id="topmenu2">';echo PMA_generate_html_tab(    array(        'link' => 'prefs_manage.php',        'text' => __('Manage your settings')    )) . "\n";echo '<li>&nbsp; &nbsp;</li>' . "\n";$script_name = basename($GLOBALS['PMA_PHP_SELF']);foreach (array_keys($forms) as $formset) {    $tab = array(        'link' => 'prefs_forms.php',        'text' => PMA_lang('Form_' . $formset),        'icon' => $tabs_icons[$formset],        'active' => ($script_name == 'prefs_forms.php' && $formset == $form_param));    echo PMA_generate_html_tab($tab, array('form' => $formset)) . "\n";}echo '</ul><div class="clearfloat"></div>';// show "configuration saved" message and reload navigation frame if neededif (!empty($_GET['saved'])) {    $message = PMA_Message::rawSuccess(__('Configuration has been saved'));    $message->display();}/* debug code$arr = ConfigFile::getInstance()->getConfigArray();$arr2 = array();foreach ($arr as $k => $v) {    $arr2[] = "<b>$k</b> " . var_export($v, true);}$arr2 = implode(', ', $arr2);$arr2 .= '<br />Blacklist: ' . (empty($cfg['UserprefsDisallow'])        ? '<i>empty</i>'        : implode(', ', $cfg['UserprefsDisallow']));$msg = PMA_Message::notice('Settings: ' . $arr2);$msg->display();//*/// warn about using session storage for settings$cfgRelation = PMA_getRelationsParam();if (! $cfgRelation['userconfigwork']) {    $msg = __('Your preferences will be saved for current session only. Storing them permanently requires %sphpMyAdmin configuration storage%s.');    $msg = PMA_sanitize(sprintf($msg, '[a@./Documentation.html#linked-tables@_blank]', '[/a]'));    PMA_Message::notice($msg)->display();}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Handles table search tab * * display table search form, create SQL query from form data * and include sql.php to execute it * * @todo display search form again if no results from previous search * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';require_once './libraries/tbl_select.lib.php';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'tbl_select.js';$GLOBALS['js_include'][] = 'tbl_change.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'gis_data_editor.js';$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));$geom_types = PMA_getGISDatatypes();/** * Not selection yet required -> displays the selection form */if (! isset($param) || $param[0] == '') {    // Gets some core libraries    include_once './libraries/tbl_common.php';    //$err_url   = 'tbl_select.php' . $err_url;    $url_query .= '&amp;goto=tbl_select.php&amp;back=tbl_select.php';    /**     * Gets tables informations     */    include_once './libraries/tbl_info.inc.php';    /**     * Displays top menu links     */    include_once './libraries/tbl_links.inc.php';    if (! isset($goto)) {        $goto = $GLOBALS['cfg']['DefaultTabTable'];    }    // Defines the url to return to in case of error in the next sql statement    $err_url   = $goto . '?' . PMA_generate_common_url($db, $table);    // Gets the list and number of fields    list($fields_list, $fields_type, $fields_collation, $fields_null, $geom_column_present) = PMA_tbl_getFields($db, $table);    $fields_cnt = count($fields_list);    // retrieve keys into foreign fields, if any    // check also foreigners even if relwork is FALSE (to get    // foreign keys from innodb)    $foreigners = PMA_getForeigners($db, $table);    ?><fieldset id="fieldset_subtab"><?php$url_params = array();$url_params['db']    = $db;$url_params['table'] = $table;echo PMA_generate_html_tabs(PMA_tbl_getSubTabs(), $url_params, '', 'topmenu2');?>        <form method="post" action="tbl_select.php" name="insertForm" id="tbl_search_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?php echo PMA_generate_common_hidden_inputs($db, $table); ?><input type="hidden" name="goto" value="<?php echo $goto; ?>" /><input type="hidden" name="back" value="tbl_select.php" /><fieldset id="fieldset_table_search"><fieldset id="fieldset_table_qbe">    <legend><?php echo __('Do a "query by example" (wildcard: "%")') ?></legend>    <table class="data">    <?php echo PMA_tbl_setTableHeader($geom_column_present); ?>    <tbody>    <?php    $odd_row = true;    for ($i = 0; $i < $fields_cnt; $i++) {        ?>        <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">            <?php            // if 'Function' column is present            if ($geom_column_present) {                echo('<td>');                // if a geometry column                if (in_array($fields_type[$i], $geom_types)) {                    echo('<select class="geom_func" name="geom_func['. $i .']">');                        // get the relevant list of functions                        $funcs = PMA_getGISFunctions($fields_type[$i], true, true);                        foreach ($funcs as $func_name => $func) {                            $name =  isset($func['display']) ? $func['display'] : $func_name;                            echo('<option value="' . htmlspecialchars($name) . '">'                                . htmlspecialchars($name) . '</option>');                        }                    echo('</select>');                } else {                    echo('&nbsp;');                }                echo('</td>');            }            ?>            <th><?php echo htmlspecialchars($fields_list[$i]); ?></th>            <td><?php echo htmlspecialchars($fields_type[$i]); ?></td>            <td><?php echo $fields_collation[$i]; ?></td>            <td><select name="func[]">        <?php        if (strncasecmp($fields_type[$i], 'enum', 4) == 0) {            foreach ($GLOBALS['cfg']['EnumOperators'] as $fc) {                echo "\n" . '                        '                   . '<option value="' . htmlspecialchars($fc) . '">'                   . htmlspecialchars($fc) . '</option>';            }        } elseif (preg_match('@char|blob|text|set@i', $fields_type[$i])) {            foreach ($GLOBALS['cfg']['TextOperators'] as $fc) {            echo "\n" . '                        '               . '<option value="' . htmlspecialchars($fc) . '">'               . htmlspecialchars($fc) . '</option>';            }        } else {            foreach ($GLOBALS['cfg']['NumOperators'] as $fc) {                echo "\n" . '                        '                   . '<option value="' .  htmlspecialchars($fc) . '">'                   . htmlspecialchars($fc) . '</option>';            }        } // end if... else...        if ($fields_null[$i]) {            foreach ($GLOBALS['cfg']['NullOperators'] as $fc) {                echo "\n" . '                        '                   . '<option value="' .  htmlspecialchars($fc) . '">'                   . htmlspecialchars($fc) . '</option>';            }        }        ?>                </select>            </td>            <td>        <?php        $field = $fields_list[$i];        $foreignData = PMA_getForeignData($foreigners, $field, false, '', '');        echo PMA_getForeignFields_Values($foreigners, $foreignData, $field, $fields_type, $i, $db, $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], '', true);        ?>            <input type="hidden" name="names[<?php echo $i; ?>]"                value="<?php echo htmlspecialchars($fields_list[$i]); ?>" />            <input type="hidden" name="types[<?php echo $i; ?>]"                value="<?php echo $fields_type[$i]; ?>" />            <input type="hidden" name="collations[<?php echo $i; ?>]"                value="<?php echo $fields_collation[$i]; ?>" />        </td>    </tr>        <?php    } // end for    ?>    </tbody>    </table><div id="gis_editor"></div><div id="popup_background"></div></fieldset><?php    PMA_generate_slider_effect('searchoptions', __('Options'));?><fieldset id="fieldset_select_fields">    <legend><?php echo __('Select columns (at least one):'); ?></legend>    <select name="param[]" size="<?php echo min($fields_cnt, 10); ?>"        multiple="multiple">    <?php    // Displays the list of the fields    foreach ($fields_list as $each_field) {        echo '        '            .'<option value="' . htmlspecialchars($each_field) . '"'            .' selected="selected">' . htmlspecialchars($each_field)            .'</option>' . "\n";    }    ?>    </select>    <input type="checkbox" name="distinct" value="DISTINCT" id="oDistinct" />    <label for="oDistinct">DISTINCT</label></fieldset><fieldset id="fieldset_search_conditions">    <legend><?php echo '<em>' . __('Or') . '</em> ' . __('Add search conditions (body of the "where" clause):'); ?></legend><?php echo PMA_showMySQLDocu('SQL-Syntax', 'Functions'); ?><input type="text" name="where" class="textfield" size="64" /></fieldset><fieldset id="fieldset_limit_rows">    <legend><?php echo __('Number of rows per page'); ?></legend>    <input type="text" size="4" name="session_max_rows"        value="<?php echo $GLOBALS['cfg']['MaxRows']; ?>" class="textfield" /></fieldset><fieldset id="fieldset_display_order">    <legend><?php echo __('Display order:'); ?></legend>    <select name="orderField">        <option value="--nil--"></option>    <?php    foreach ($fields_list as $each_field) {        echo '        '            .'<option value="' . htmlspecialchars($each_field) . '">'            .htmlspecialchars($each_field) . '</option>' . "\n";    } // end for    ?>    </select><?php    $choices = array(        'ASC'  => __('Ascending'),        'DESC' => __('Descending')    );    PMA_display_html_radio('order', $choices, 'ASC', false, true, "formelement");    unset($choices);?></fieldset><br style="clear: both;"/></div></fieldset><fieldset class="tblFooters">    <input type="hidden" name="max_number_of_fields"        value="<?php echo $fields_cnt; ?>" />    <input type="submit" name="submit" value="<?php echo __('Go'); ?>" /></fieldset></form><div id="sqlqueryresults"></div>    <?php    include './libraries/footer.inc.php';?></fieldset><?php} else {    /**     * Selection criteria have been submitted -> do the work     */    // Builds the query    $sql_query = 'SELECT ' . (isset($distinct) ? 'DISTINCT ' : '');    // if all fields were selected to display, we do a SELECT *    // (more efficient and this helps prevent a problem in IE    // if one of the rows is edited and we come back to the Select results)    if (count($param) == $max_number_of_fields) {        $sql_query .= '* ';    } else {        $param = PMA_backquote($param);        $sql_query .= implode(', ', $param);    } // end if    // avoid a loop, for example when $cfg['DefaultTabTable'] is set    // to 'tbl_select.php'    unset($param);    $sql_query .= ' FROM ' . PMA_backquote($table);    // The where clause    if (trim($where) != '') {        $sql_query .= ' WHERE ' . $where;    } else {        $w = $charsets = array();        $cnt_func = count($func);        reset($func);        while (list($i, $func_type) = each($func)) {            list($charsets[$i]) = explode('_', $collations[$i]);            $unaryFlag =  (isset($GLOBALS['cfg']['UnaryOperators'][$func_type]) && $GLOBALS['cfg']['UnaryOperators'][$func_type] == 1) ? true : false;            $tmp_geom_func = isset($geom_func[$i]) ? $geom_func[$i] : null;            $whereClause = PMA_tbl_search_getWhereClause($fields[$i], $names[$i], $types[$i], $collations[$i], $func_type, $unaryFlag, $tmp_geom_func);            if($whereClause)                $w[] = $whereClause;            } // end for        if ($w) {            $sql_query .= ' WHERE ' . implode(' AND ', $w);        }    } // end if    if ($orderField != '--nil--') {        $sql_query .= ' ORDER BY ' . PMA_backquote($orderField) . ' ' . $order;    } // end if    include './sql.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays and handles the form where the user can change his password * linked from main.php * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'server_privileges.js';/** * Displays an error message and exits if the user isn't allowed to use this * script */if (!$cfg['ShowChgPassword']) {    $cfg['ShowChgPassword'] = PMA_DBI_select_db('mysql');}if ($cfg['Server']['auth_type'] == 'config' || !$cfg['ShowChgPassword']) {    include_once './libraries/header.inc.php';    PMA_Message::error(__('You don\'t have sufficient privileges to be here right now!'))->display();    include './libraries/footer.inc.php';} // end if/** * If the "change password" form has been submitted, checks for valid values * and submit the query or logout */if (isset($_REQUEST['nopass'])) {    // similar logic in server_privileges.php    $_error = false;    if ($_REQUEST['nopass'] == '1') {        $password = '';    } elseif (empty($_REQUEST['pma_pw']) || empty($_REQUEST['pma_pw2'])) {        $message = PMA_Message::error(__('The password is empty!'));        $_error = true;    } elseif ($_REQUEST['pma_pw'] != $_REQUEST['pma_pw2']) {        $message = PMA_Message::error(__('The passwords aren\'t the same!'));        $_error = true;    } else {        $password = $_REQUEST['pma_pw'];    }    if ($GLOBALS['is_ajax_request'] == true && $_error == true) {        /**         * If in an Ajax request, we don't need to show the rest of the page         */        PMA_ajaxResponse($message, false);    }    if (! $_error) {        // Defines the url to return to in case of error in the sql statement        $_url_params = array();        $err_url          = 'user_password.php' . PMA_generate_common_url($_url_params);        if (PMA_isValid($_REQUEST['pw_hash'], 'identical', 'old')) {            $hashing_function = 'OLD_PASSWORD';        } else {            $hashing_function = 'PASSWORD';        }        $sql_query        = 'SET password = ' . (($password == '') ? '\'\'' : $hashing_function . '(\'***\')');        $local_query      = 'SET password = ' . (($password == '') ? '\'\'' : $hashing_function . '(\'' . PMA_sqlAddSlashes($password) . '\')');        $result           = @PMA_DBI_try_query($local_query)            or PMA_mysqlDie(PMA_DBI_getError(), $sql_query, false, $err_url);        // Changes password cookie if required        // Duration = till the browser is closed for password (we don't want this to be saved)        if ($cfg['Server']['auth_type'] == 'cookie') {            $GLOBALS['PMA_Config']->setCookie('pmaPass-' . $server,                PMA_blowfish_encrypt($password, $GLOBALS['cfg']['blowfish_secret']));        } // end if        // For http auth. mode, the "back" link will also enforce new        // authentication        if ($cfg['Server']['auth_type'] == 'http') {            $_url_params['old_usr'] = 'relog';        }        $message = PMA_Message::success(__('The profile has been updated.'));        if ($GLOBALS['is_ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage($message, $sql_query, 'success');            PMA_ajaxResponse($message, true, $extra_data);        }        // Displays the page        include_once './libraries/header.inc.php';        echo '<h1>' . __('Change password') . '</h1>' . "\n\n";        PMA_showMessage($message, $sql_query, 'success');        ?>        <a href="index.php<?php echo PMA_generate_common_url($_url_params); ?>" target="_parent">            <strong><?php echo __('Back'); ?></strong></a>        <?php        include './libraries/footer.inc.php';    } // end if} // end if/** * If the "change password" form hasn't been submitted or the values submitted * aren't valid -> displays the form */// Loads the headersrequire_once './libraries/header.inc.php';echo '<h1>' . __('Change password') . '</h1>' . "\n\n";// Displays an error message if requiredif (isset($message)) {    $message->display();}require_once './libraries/display_change_password.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/bookmark.lib.php';PMA_checkParameters(array('db'));$is_show_stats = $cfg['ShowStats'];$db_is_information_schema = PMA_is_system_schema($db);if ($db_is_information_schema) {    $is_show_stats = false;}/** * Defines the urls to return to in case of error in a sql statement */$err_url_0 = 'main.php?' . PMA_generate_common_url();$err_url   = $cfg['DefaultTabDatabase'] . '?' . PMA_generate_common_url($db);/** * Ensures the database exists (else move to the "parent" script) and displays * headers */if (! isset($is_db) || ! $is_db) {    if (strlen($db)) {        $is_db = PMA_DBI_select_db($db);        // This "Command out of sync" 2014 error may happen, for example        // after calling a MySQL procedure; at this point we can't select        // the db but it's not necessarily wrong        if (PMA_DBI_getError() && $GLOBALS['errno'] == 2014) {            $is_db = true;            unset($GLOBALS['errno']);        }    }    // Not a valid db name -> back to the welcome page    if (! strlen($db) || ! $is_db) {        PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . 'main.php?' . PMA_generate_common_url('', '', '&') . (isset($message) ? '&message=' . urlencode($message) : '') . '&reload=1');        exit;    }} // end if (ensures db exists)/** * Changes database charset if requested by the user */if (isset($submitcollation) && !empty($db_collation)) {    list($db_charset) = explode('_', $db_collation);    $sql_query        = 'ALTER DATABASE ' . PMA_backquote($db) . ' DEFAULT' . PMA_generateCharsetQueryPart($db_collation);    $result           = PMA_DBI_query($sql_query);    $message          = PMA_Message::success();    unset($db_charset, $db_collation);    /**     * If we are in an Ajax request, let us stop the execution here. Necessary for     * db charset change action on db_operations.php.  If this causes a bug on     * other pages, we might have to move this to a different location.     */    if ( $GLOBALS['is_ajax_request'] == true) {        PMA_ajaxResponse($message, $message->isSuccess());    };}require_once './libraries/header.inc.php';/** * Set parameters for links */$url_query = PMA_generate_common_url($db);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * requirements */require_once './libraries/common.inc.php';/** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . '    ' . ($GLOBALS['cfg']['MainPageIconic']    ? PMA_getImage('s_asci.png')    : '')   . '' . __('Character Sets and Collations') . "\n"   . '</h2>' . "\n";/** * Includes the required charset library */require_once './libraries/mysql_charsets.lib.php';/** * Outputs the result */echo '<div id="div_mysql_charset_collations">' . "\n"   . '<table class="data noclick">' . "\n"   . '<tr><th>' . __('Collation') . '</th>' . "\n"   . '    <th>' . __('Description') . '</th>' . "\n"   . '</tr>' . "\n";$i = 0;$table_row_count = count($mysql_charsets) + count($mysql_collations);foreach ($mysql_charsets as $current_charset) {    if ($i >= $table_row_count / 2) {        $i = 0;        echo '</table>' . "\n"           . '<table class="data noclick">' . "\n"           . '<tr><th>' . __('Collation') . '</th>' . "\n"           . '    <th>' . __('Description') . '</th>' . "\n"           . '</tr>' . "\n";    }    $i++;    echo '<tr><th colspan="2" align="right">' . "\n"       . '        ' . htmlspecialchars($current_charset) . "\n"       . (empty($mysql_charsets_descriptions[$current_charset])            ? ''            : '        (<i>' . htmlspecialchars(                $mysql_charsets_descriptions[$current_charset]) . '</i>)' . "\n")       . '    </th>' . "\n"       . '</tr>' . "\n";    $odd_row = true;    foreach ($mysql_collations[$current_charset] as $current_collation) {        $i++;        echo '<tr class="'           . ($odd_row ? 'odd' : 'even')           . ($mysql_default_collations[$current_charset] == $current_collation                ? ' marked'                : '')           . ($mysql_collations_available[$current_collation] ? '' : ' disabled')           . '">' . "\n"           . '    <td>' . htmlspecialchars($current_collation) . '</td>' . "\n"           . '    <td>' . PMA_getCollationDescr($current_collation) . '</td>' . "\n"           . '</tr>' . "\n";        $odd_row = !$odd_row;    }}unset($table_row_count);echo '</table>' . "\n"   . '</div>' . "\n";require './libraries/footer.inc.php';?>
<?php/** * Overview (main page) * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/display_select_lang.lib.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/index.lib.php';// prepare unfiltered language list$all_languages = PMA_langList();uasort($all_languages, 'PMA_language_cmp');$cf = ConfigFile::getInstance();$separator = PMA_get_arg_separator('html');// message handlingmessages_begin();//// Check phpMyAdmin version//if (isset($_GET['version_check'])) {    PMA_version_check();}//// Perform various security, compatibility and consistency checks//perform_config_checks();//// Check whether we can read/write configuration//$config_readable = false;$config_writable = false;$config_exists = false;check_config_rw($config_readable, $config_writable, $config_exists);if (!$config_writable || !$config_readable) {    messages_set('error', 'config_rw', __('Cannot load or save configuration'),        PMA_lang(__('Please create web server writable folder [em]config[/em] in phpMyAdmin top level directory as described in [a@Documentation.html#setup_script]documentation[/a]. Otherwise you will be only able to download or display it.')));}//// Check https connection//$is_https = !empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) == 'on';if (!$is_https) {    $text = __('You are not using a secure connection; all data (including potentially sensitive information, like passwords) is transferred unencrypted!');    if (!empty($_SERVER['REQUEST_URI']) && !empty($_SERVER['HTTP_HOST'])) {        $link = 'https://' . htmlspecialchars($_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);        $strInsecureConnectionMsg2 = __('If your server is also configured to accept HTTPS requests follow [a@%s]this link[/a] to use a secure connection.');        $strInsecureConnectionMsg2 = sprintf($strInsecureConnectionMsg2, $link);        $text .= ' ' . PMA_lang($strInsecureConnectionMsg2);    }    messages_set('notice', 'no_https', __('Insecure connection'), $text);}?><form id="select_lang" method="post" action="<?php echo htmlspecialchars($_SERVER['REQUEST_URI']) ?>">    <?php echo PMA_generate_common_hidden_inputs() ?>    <bdo xml:lang="en" dir="ltr"><label for="lang">    <?php echo __('Language') . (__('Language') != 'Language' ? ' - Language' : '') ?>    </label></bdo><br />    <select id="lang" name="lang" class="autosubmit" xml:lang="en" dir="ltr">    <?php    // create language list    $lang_list = array();    foreach ($all_languages as $each_lang_key => $each_lang) {        $lang_name = PMA_langName($each_lang);        //Is current one active?        $selected = ($GLOBALS['lang'] == $each_lang_key) ? ' selected="selected"' : '';        echo '<option value="' . $each_lang_key . '"' . $selected . '>' . $lang_name            . '</option>' . "\n";    }    ?>    </select></form><?php// Check for done action info and set notice message if presentswitch ($action_done) {    case 'config_saved':        /* Use uniqid to display this message every time configuration is saved */        messages_set('notice', uniqid('config_saved'), __('Configuration saved.'),            PMA_lang(__('Configuration saved to file config/config.inc.php in phpMyAdmin top level directory, copy it to top level one and delete directory config to use it.')));        break;    default:        break;}?><h2><?php echo __('Overview') ?></h2><?php// message handlingmessages_end();messages_show_html();?><a href="#" id="show_hidden_messages" style="display:none"><?php echo __('Show hidden messages (#MSG_COUNT)') ?></a><h3><?php echo __('Servers') ?></h3><?php//// Display server list//display_form_top('index.php', 'get', array(    'page' => 'servers',    'mode' => 'add'));?><div class="form"><?php if ($cf->getServerCount() > 0): ?><table cellspacing="0" class="datatable" style="table-layout: fixed"><tr>    <th>#</th>    <th><?php echo __('Name') ?></th>    <th><?php echo __('Authentication type') ?></th>    <th colspan="2">DSN</th></tr><?php foreach ($cf->getServers() as $id => $server): ?><tr>    <td><?php echo $id ?></td>    <td><?php echo htmlspecialchars($cf->getServerName($id)) ?></td>    <td><?php echo htmlspecialchars($cf->getValue("Servers/$id/auth_type")) ?></td>    <td><?php echo htmlspecialchars($cf->getServerDSN($id)) ?></td>    <td style="white-space: nowrap">        <small>        <a href="<?php echo "?page=servers{$separator}mode=edit{$separator}id=$id" ?>"><?php echo __('Edit') ?></a>        | <a href="<?php echo "?page=servers{$separator}mode=remove{$separator}id=$id" ?>"><?php echo __('Delete') ?></a>        </small>    </td></tr><?php endforeach; ?></table><?php else: ?><table width="100%"><tr>    <td>        <i><?php echo __('There are no configured servers') ?></i>    </td></tr></table><?php endif; ?><table width="100%"><tr>    <td class="lastrow" style="text-align: left">        <input type="submit" name="submit" value="<?php echo __('New server') ?>" />    </td></tr></table></div><?phpdisplay_form_bottom();?><h3><?php echo __('Configuration file') ?></h3><?php//// Display config file settings and load/save form//$form_display = new FormDisplay();display_form_top('config.php');display_fieldset_top('', '', null, array('class' => 'simple'));// Display language list$opts = array(    'doc' => $form_display->getDocLink('DefaultLang'),    'wiki' => $form_display->getWikiLink('DefaultLang'),    'values' => array(),    'values_escaped' => true);foreach ($all_languages as $each_lang_key => $each_lang) {    $lang_name = PMA_langName($each_lang);    $opts['values'][$each_lang_key] = $lang_name;}display_input('DefaultLang', __('Default language'), '', 'select',    $cf->getValue('DefaultLang'), true, $opts);// Display server list$opts = array(    'doc' => $form_display->getDocLink('ServerDefault'),    'wiki' => $form_display->getWikiLink('ServerDefault'),    'values' => array(),    'values_disabled' => array());if ($cf->getServerCount() > 0) {    $opts['values']['0'] = __('let the user choose');    $opts['values']['-'] = '------------------------------';    if ($cf->getServerCount() == 1) {        $opts['values_disabled'][] = '0';    }    $opts['values_disabled'][] = '-';    foreach ($cf->getServers() as $id => $server) {        $opts['values'][(string)$id] = $cf->getServerName($id) . " [$id]";    }} else {    $opts['values']['1'] = __('- none -');    $opts['values_escaped'] = true;}display_input('ServerDefault', __('Default server'), '', 'select',    $cf->getValue('ServerDefault'), true, $opts);// Display EOL list$opts = array(    'values' => array(        'unix' => 'UNIX / Linux (\n)',        'win' => 'Windows (\r\n)'),    'values_escaped' => true);$eol = PMA_ifSetOr($_SESSION['eol'], (PMA_IS_WINDOWS ? 'win' : 'unix'));display_input('eol', __('End of line'), '', 'select',    $eol, true, $opts);?><tr>    <td colspan="2" class="lastrow" style="text-align: left">        <input type="submit" name="submit_display" value="<?php echo __('Display') ?>" />        <input type="submit" name="submit_download" value="<?php echo __('Download') ?>" />        &nbsp; &nbsp;        <input type="submit" name="submit_save" value="<?php echo __('Save') ?>"<?php if (!$config_writable) echo ' disabled="disabled"' ?> />        <input type="submit" name="submit_load" value="<?php echo __('Load') ?>"<?php if (!$config_exists) echo ' disabled="disabled"' ?> />        <input type="submit" name="submit_delete" value="<?php echo __('Delete') ?>"<?php if (!$config_exists || !$config_writable) echo ' disabled="disabled"' ?> />        &nbsp; &nbsp;        <input type="submit" name="submit_clear" value="<?php echo __('Clear') ?>" class="red" />    </td></tr><?phpdisplay_fieldset_bottom_simple();display_form_bottom();?><div id="footer">    <a href="http://phpmyadmin.net"><?php echo __('phpMyAdmin homepage') ?></a>    <a href="http://sourceforge.net/donate/index.php?group_id=23067"><?php echo __('Donate') ?></a>    <a href="?version_check=1<?php echo "{$separator}token=" . $_SESSION[' PMA_token '] ?>"><?php echo __('Check for latest version') ?></a></div>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';require './libraries/tbl_common.php';/** * Gets the variables sent or posted to this script, then displays headers */$print_view = true;if (! isset($selected_tbl)) {    include_once './libraries/header.inc.php';}// Check parametersif (! isset($the_tables) || ! is_array($the_tables)) {    $the_tables = array();}/** * Gets the relations settings */require_once './libraries/transformations.lib.php';require_once './libraries/Index.class.php';$cfgRelation = PMA_getRelationsParam();/** * Defines the url to return to in case of error in a sql statement */if (strlen($table)) {    $err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);} else {    $err_url = 'db_sql.php?' . PMA_generate_common_url($db);}/** * Selects the database */PMA_DBI_select_db($db);/** * Multi-tables printview */if (isset($selected_tbl) && is_array($selected_tbl)) {    $the_tables   = $selected_tbl;} elseif (strlen($table)) {    $the_tables[] = $table;}$multi_tables     = (count($the_tables) > 1);if ($multi_tables) {    if (empty($GLOBALS['is_header_sent'])) {        include_once './libraries/header.inc.php';    }    $tbl_list     = '';    foreach ($the_tables as $key => $table) {        $tbl_list .= (empty($tbl_list) ? '' : ', ')                  . PMA_backquote($table);    }    echo '<strong>'.  __('Showing tables') . ': ' . htmlspecialchars($tbl_list) . '</strong>' . "\n";    echo '<hr />' . "\n";} // end if$tables_cnt = count($the_tables);$counter    = 0;foreach ($the_tables as $key => $table) {    if ($counter + 1 >= $tables_cnt) {        $breakstyle = '';    } else {        $breakstyle = ' style="page-break-after: always;"';    }    $counter++;    echo '<div' . $breakstyle . '>' . "\n";    echo '<h1>' . htmlspecialchars($table) . '</h1>' . "\n";    /**     * Gets table informations     */    $showtable    = PMA_Table::sGetStatusInfo($db, $table);    $num_rows     = (isset($showtable['Rows']) ? $showtable['Rows'] : 0);    $show_comment = (isset($showtable['Comment']) ? $showtable['Comment'] : '');    $tbl_is_view = PMA_Table::isView($db, $table);    /**     * Gets fields properties     */    $columns = PMA_DBI_get_columns($db, $table);    // We need this to correctly learn if a TIMESTAMP is NOT NULL, since    // SHOW FULL FIELDS or INFORMATION_SCHEMA incorrectly says NULL    // and SHOW CREATE TABLE says NOT NULL (tested    // in MySQL 4.0.25 and 5.0.21, http://bugs.mysql.com/20910).    $show_create_table = PMA_DBI_fetch_value(        'SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table),        0, 1);    $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));    // Check if we can use Relations    // Find which tables are related with the current one and write it in    // an array    $res_rel  = PMA_getForeigners($db, $table);    $have_rel = (bool) count($res_rel);    /**     * Displays the comments of the table if MySQL >= 3.23     */    if (!empty($show_comment)) {        echo __('Table comments') . ': ' . htmlspecialchars($show_comment) . '<br /><br />';    }    /**     * Displays the table structure     */    ?><!-- TABLE INFORMATIONS --><table style="width: 100%;"><thead><tr>    <th><?php echo __('Column'); ?></th>    <th><?php echo __('Type'); ?></th>    <th><?php echo __('Null'); ?></th>    <th><?php echo __('Default'); ?></th>    <?php    if ($have_rel) {        echo '<th>' . __('Links to') . '</th>' . "\n";    }    echo '    <th>' . __('Comments') . '</th>' . "\n";    if ($cfgRelation['mimework']) {        echo '    <th>MIME</th>' . "\n";    }    ?></tr></thead><tbody>    <?php    foreach ($columns as $row) {        $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);        $type             = $extracted_fieldspec['print_type'];        $attribute     = $extracted_fieldspec['attribute'];        if (! isset($row['Default'])) {            if ($row['Null'] != ''  && $row['Null'] != 'NO') {                $row['Default'] = '<i>NULL</i>';            }        } else {            $row['Default'] = htmlspecialchars($row['Default']);        }        $field_name = htmlspecialchars($row['Field']);        // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the        // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe        // the latter.        /**         * @todo merge this logic with the one in tbl_structure.php         * or move it in a function similar to PMA_DBI_get_columns_full()         * but based on SHOW CREATE TABLE because information_schema         * cannot be trusted in this case (MySQL bug)         */        if (!empty($analyzed_sql[0]['create_table_fields'][$field_name]['type']) && $analyzed_sql[0]['create_table_fields'][$field_name]['type'] == 'TIMESTAMP' && $analyzed_sql[0]['create_table_fields'][$field_name]['timestamp_not_null']) {            $row['Null'] = '';        }        echo '<tr><td>';        if (isset($pk_array[$row['Field']])) {            echo '    <u>' . $field_name . '</u>' . "\n";        } else {            echo '    ' . $field_name . "\n";        }    ?>    </td>    <td><?php echo $type; ?><bdo dir="ltr"></bdo></td>    <td><?php echo (($row['Null'] == '' || $row['Null'] == 'NO') ? __('No') : __('Yes')); ?>&nbsp;</td>    <td><?php if (isset($row['Default'])) { echo $row['Default']; } ?>&nbsp;</td>    <?php        if ($have_rel) {            echo '    <td>';            if (isset($res_rel[$field_name])) {                echo htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' -> ' . $res_rel[$field_name]['foreign_field']);            }            echo '&nbsp;</td>' . "\n";        }        echo '    <td>';        $comments = PMA_getComments($db, $table);        if (isset($comments[$field_name])) {            echo htmlspecialchars($comments[$field_name]);        }        echo '&nbsp;</td>' . "\n";        if ($cfgRelation['mimework']) {            $mime_map = PMA_getMIME($db, $table, true);            echo '    <td>';            if (isset($mime_map[$field_name])) {                echo htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype']));            }            echo '&nbsp;</td>' . "\n";        }    ?></tr>        <?php    } // end foreach    ?></tbody></table>    <?php    if (! $tbl_is_view && !PMA_is_system_schema($db)) {        /**         * Displays indexes         */        echo PMA_Index::getView($table, $db, true);        /**         * Displays Space usage and row statistics         *         */        if ($cfg['ShowStats']) {            $nonisam     = false;            if (isset($showtable['Type']) && !preg_match('@ISAM|HEAP@i', $showtable['Type'])) {                $nonisam = true;            }            if ($nonisam == false) {                // Gets some sizes                $mergetable = PMA_Table::isMerge($db, $table);                list($data_size, $data_unit)         = PMA_formatByteDown($showtable['Data_length']);                if ($mergetable == false) {                    list($index_size, $index_unit)   = PMA_formatByteDown($showtable['Index_length']);                }                if (isset($showtable['Data_free']) && $showtable['Data_free'] > 0) {                    list($free_size, $free_unit)     = PMA_formatByteDown($showtable['Data_free']);                    list($effect_size, $effect_unit) = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length'] - $showtable['Data_free']);                } else {                    unset($free_size);                    unset($free_unit);                    list($effect_size, $effect_unit) = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length']);                }                list($tot_size, $tot_unit)           = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length']);                if ($num_rows > 0) {                    list($avg_size, $avg_unit)       = PMA_formatByteDown(($showtable['Data_length'] + $showtable['Index_length']) / $showtable['Rows'], 6, 1);                }                // Displays them                ?>    <br /><br />    <table border="0" cellspacing="0" cellpadding="0" class="noborder">    <tr>        <!-- Space usage -->        <td valign="top">            <big><?php echo __('Space usage') . ':'; ?></big>            <table width="100%">            <tr>                <th><?php echo __('Type'); ?></th>                <th colspan="2" align="center"><?php echo __('Usage'); ?></th>            </tr>            <tr>                <td style="padding-right: 10px"><?php echo __('Data'); ?></td>                <td align="right"><?php echo $data_size; ?></td>                <td><?php echo $data_unit; ?></td>            </tr>                <?php                if (isset($index_size)) {                    echo "\n";                    ?>            <tr>                <td style="padding-right: 10px"><?php echo __('Index'); ?></td>                <td align="right"><?php echo $index_size; ?></td>                <td><?php echo $index_unit; ?></td>            </tr>                    <?php                }                if (isset($free_size)) {                    echo "\n";                    ?>            <tr style="color: #bb0000">                <td style="padding-right: 10px"><?php echo __('Overhead'); ?></td>                <td align="right"><?php echo $free_size; ?></td>                <td><?php echo $free_unit; ?></td>            </tr>            <tr>                <td style="padding-right: 10px"><?php echo __('Effective'); ?></td>                <td align="right"><?php echo $effect_size; ?></td>                <td><?php echo $effect_unit; ?></td>            </tr>                    <?php                }                if (isset($tot_size) && $mergetable == false) {                    echo "\n";                    ?>            <tr>                <td style="padding-right: 10px"><?php echo __('Total'); ?></td>                <td align="right"><?php echo $tot_size; ?></td>                <td><?php echo $tot_unit; ?></td>            </tr>                    <?php                }                echo "\n";                ?>            </table>        </td>        <td width="20">&nbsp;</td>        <!-- Rows Statistic -->        <td valign="top">            <big><?php echo __('Row Statistics') . ':'; ?></big>            <table width="100%">            <tr>                <th><?php echo __('Statements'); ?></th>                <th align="center"><?php echo __('Value'); ?></th>            </tr>                <?php                if (isset($showtable['Row_format'])) {                    ?>            <tr>                <td><?php echo __('Format'); ?></td>                <td align="<?php echo $cell_align_left; ?>">                    <?php                    if ($showtable['Row_format'] == 'Fixed') {                        echo __('static');                    } elseif ($showtable['Row_format'] == 'Dynamic') {                        echo __('dynamic');                    } else {                        echo $showtable['Row_format'];                    }                    ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Rows'])) {                    ?>            <tr>                <td><?php echo __('Rows'); ?></td>                <td align="right">                    <?php echo PMA_formatNumber($showtable['Rows'], 0) . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Avg_row_length']) && $showtable['Avg_row_length'] > 0) {                    ?>            <tr>                <td><?php echo __('Row length'); ?>&nbsp;&oslash;</td>                <td>                    <?php echo PMA_formatNumber($showtable['Avg_row_length'], 0) . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Data_length']) && $showtable['Rows'] > 0 && $mergetable == false) {                    ?>            <tr>                <td><?php echo __('Row size'); ?>&nbsp;&oslash;</td>                <td align="right">                    <?php echo $avg_size . ' ' . $avg_unit . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Auto_increment'])) {                    ?>            <tr>                <td><?php echo __('Next autoindex'); ?></td>                <td align="right">                    <?php echo PMA_formatNumber($showtable['Auto_increment'], 0) . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Create_time'])) {                    ?>            <tr>                <td><?php echo __('Creation'); ?></td>                <td align="right">                    <?php echo PMA_localisedDate(strtotime($showtable['Create_time'])) . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Update_time'])) {                    ?>            <tr>                <td><?php echo __('Last update'); ?></td>                <td align="right">                    <?php echo PMA_localisedDate(strtotime($showtable['Update_time'])) . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Check_time'])) {                    ?>            <tr>                <td><?php echo __('Last check'); ?></td>                <td align="right">                    <?php echo PMA_localisedDate(strtotime($showtable['Check_time'])) . "\n"; ?>                </td>            </tr>                    <?php                }                ?>            </table>        </td>    </tr>    </table>                <?php            } // end if ($nonisam == false)        } // end if ($cfg['ShowStats'])    }    if ($multi_tables) {        unset($num_rows, $show_comment);        echo '<hr />' . "\n";    } // end if    echo '</div>' . "\n";} // end while/** * Displays the footer */PMA_printButton();echo "<div id='PMA_disable_floating_menubar'></div>\n";require './libraries/footer.inc.php';?>
<?php/** * Handles the visualization of GIS MULTILINESTRING objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Multilinestring extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        $min_max = array();        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($spatial, 17, (strlen($spatial) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        foreach ($linestirngs as $linestring) {            $min_max = $this->setMinMax($linestring, $min_max);        }        return $min_max;    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS MULTILINESTRING object     * @param string $label      Label for the GIS MULTILINESTRING object     * @param string $line_color Color for the GIS MULTILINESTRING object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $line_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($line_color, 1, 2));        $green = hexdec(substr($line_color, 3, 2));        $blue  = hexdec(substr($line_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($spatial, 17, (strlen($spatial) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        $first_line = true;        foreach ($linestirngs as $linestring) {            $points_arr = $this->extractPoints($linestring, $scale_data);            foreach ($points_arr as $point) {                if (! isset($temp_point)) {                    $temp_point = $point;                } else {                    // draw line section                    imageline($image, $temp_point[0], $temp_point[1], $point[0], $point[1], $color);                    $temp_point = $point;                }            }            unset($temp_point);            // print label if applicable            if (isset($label) && trim($label) != '' && $first_line) {                imagestring($image, 1, $points_arr[1][0], $points_arr[1][1], trim($label), $black);            }            $first_line = false;        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS MULTILINESTRING object     * @param string $label      Label for the GIS MULTILINESTRING object     * @param string $line_color Color for the GIS MULTILINESTRING object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $line_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($line_color, 1, 2));        $green = hexdec(substr($line_color, 3, 2));        $blue  = hexdec(substr($line_color, 4, 2));        $line  = array('width' => 1.5, 'color' => array($red, $green, $blue));        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($spatial, 17, (strlen($spatial) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        $first_line = true;        foreach ($linestirngs as $linestring) {            $points_arr = $this->extractPoints($linestring, $scale_data);            foreach ($points_arr as $point) {                if (! isset($temp_point)) {                    $temp_point = $point;                } else {                    // draw line section                    $pdf->Line($temp_point[0], $temp_point[1], $point[0], $point[1], $line);                    $temp_point = $point;                }            }            unset($temp_point);            // print label            if (isset($label) && trim($label) != '' && $first_line) {                $pdf->SetXY($points_arr[1][0], $points_arr[1][1]);                $pdf->SetFontSize(5);                $pdf->Cell(0, 0, trim($label));            }            $first_line = false;        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS MULTILINESTRING object     * @param string $label      Label for the GIS MULTILINESTRING object     * @param string $line_color Color for the GIS MULTILINESTRING object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $line_color, $scale_data)    {        $line_options = array(            'name'        => $label,            'class'       => 'linestring vector',            'fill'        => 'none',            'stroke'      => $line_color,            'stroke-width'=> 2,        );        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($spatial, 17, (strlen($spatial) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        $row = '';        foreach ($linestirngs as $linestring) {            $points_arr = $this->extractPoints($linestring, $scale_data);            $row .= '<polyline points="';            foreach ($points_arr as $point) {                $row .= $point[0] . ',' . $point[1] . ' ';            }            $row .= '"';            $line_options['id'] = $label . rand();            foreach ($line_options as $option => $val) {                $row .= ' ' . $option . '="' . trim($val) . '"';            }            $row .= '/>';        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS MULTILINESTRING object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS MULTILINESTRING object     * @param string $line_color Color for the GIS MULTILINESTRING object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $line_color, $scale_data)    {        $style_options = array(            'strokeColor' => $line_color,            'strokeWidth' => 2,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $row = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($spatial, 17, (strlen($spatial) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        $row .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector('            . 'new OpenLayers.Geometry.MultiLineString(new Array(';        foreach ($linestirngs as $linestring) {            $points_arr = $this->extractPoints($linestring, null);            $row .= 'new OpenLayers.Geometry.LineString(new Array(';            foreach ($points_arr as $point) {                $row .= '(new OpenLayers.Geometry.Point(' . $point[0] . ', '                    . $point[1] . ')).transform(new OpenLayers.Projection("EPSG:'                    . $srid . '"), map.getProjectionObject()), ';            }            $row = substr($row, 0, strlen($row) - 2);            $row .= ')), ';        }        $row = substr($row, 0, strlen($row) - 2);        $row .= ')), null, ' . json_encode($style_options) . '));';        return $row;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_lines = isset($gis_data[$index]['MULTILINESTRING']['no_of_lines'])            ? $gis_data[$index]['MULTILINESTRING']['no_of_lines'] : 1;        if ($no_of_lines < 1) {            $no_of_lines = 1;        }        $wkt = 'MULTILINESTRING(';        for ($i = 0; $i < $no_of_lines; $i++) {            $no_of_points = isset($gis_data[$index]['MULTILINESTRING'][$i]['no_of_points'])                ? $gis_data[$index]['MULTILINESTRING'][$i]['no_of_points'] : 2;            if ($no_of_points < 2) {                $no_of_points = 2;            }            $wkt .= '(';            for ($j = 0; $j < $no_of_points; $j++) {                $wkt .= ((isset($gis_data[$index]['MULTILINESTRING'][$i][$j]['x'])                    && trim($gis_data[$index]['MULTILINESTRING'][$i][$j]['x']) != '')                    ? $gis_data[$index]['MULTILINESTRING'][$i][$j]['x'] : $empty)                    . ' ' . ((isset($gis_data[$index]['MULTILINESTRING'][$i][$j]['y'])                    && trim($gis_data[$index]['MULTILINESTRING'][$i][$j]['y']) != '')                    ? $gis_data[$index]['MULTILINESTRING'][$i][$j]['y'] : $empty) . ',';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate the WKT for the data from ESRI shape files.     *     * @param array $row_data GIS data     *     * @return the WKT for the data from ESRI shape files     */    public function getShape($row_data)    {        $wkt = 'MULTILINESTRING(';        for ($i = 0; $i < $row_data['numparts']; $i++) {            $wkt .= '(';            foreach ($row_data['parts'][$i]['points'] as $point) {                $wkt .= $point['x'] . ' ' . $point['y'] . ',';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'MULTILINESTRING';            $wkt = $value;        }        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($wkt, 17, (strlen($wkt) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        $params[$index]['MULTILINESTRING']['no_of_lines'] = count($linestirngs);        $j = 0;        foreach ($linestirngs as $linestring) {            $points_arr = $this->extractPoints($linestring, null);            $no_of_points = count($points_arr);            $params[$index]['MULTILINESTRING'][$j]['no_of_points'] = $no_of_points;            for ($i = 0; $i < $no_of_points; $i++) {                $params[$index]['MULTILINESTRING'][$j][$i]['x'] = $points_arr[$i][0];                $params[$index]['MULTILINESTRING'][$j][$i]['y'] = $points_arr[$i][1];            }            $j++;        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-String-MB *//** * Returns length of string depending on current charset. * * @param string   string to count * @return  int      string length */function PMA_strlen($string){    return mb_strlen($string);}/** * Returns substring from string, works depending on current charset. * * @param string $string  string to count * @param int    $start   start of substring * @param int    $length  length of substring * @return  string */function PMA_substr($string, $start, $length = 2147483647){    return mb_substr($string, $start, $length);}/** * Returns postion of $needle in $haystack or false if not found * * @param string  $haystack * @param string  $needle * @param int     $offset * @return  integer position of $needle in $haystack or false */function PMA_strpos($haystack, $needle, $offset = 0){    return mb_strpos($haystack, $needle, $offset);}/** * Make a string lowercase * * @param string  $string * @return  string */function PMA_strtolower($string){    return mb_strtolower($string);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * print css file from theme Original * * @package PhpMyAdmin-theme * @subpackage pmahomme */?>/* For printview */body, table, th, td {    color:             #000000;    background-color:  #ffffff;}img {    border: 0;}table, th, td {    border-width:      0.1em;    border-color:      #000000;    border-style:      solid;}table {    border-collapse:   collapse;    border-spacing:    0;}th, td {    padding:           0.2em;}th {    font-weight:       bold;    background-color:  #e5e5e5;}.hide {    display: none;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Produce a PDF report (export) from a query * * @package PhpMyAdmin-Export * @subpackage PDF */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['pdf'] = array(        'text' => __('PDF'),        'extension' => 'pdf',        'mime_type' => 'application/pdf',        'force_file' => true,        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'message_only', 'name' => 'explanation', 'text' => __('(Generates a report containing the data of a single table)')),            array('type' => 'text', 'name' => 'report_title', 'text' => __('Report title:')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );} else {    include_once './libraries/PDF.class.php';    /**     * Adapted from a LGPL script by Philip Clarke     * @package PhpMyAdmin-Export     * @subpackage PDF     */    class PMA_Export_PDF extends PMA_PDF    {        var $tablewidths;        var $headerset;        function checkPageBreak($h = 0, $y = '', $addpage = true)        {            if ($this->empty_string($y)) {                $y = $this->y;            }            $current_page = $this->page;            if ((($y + $h) > $this->PageBreakTrigger) AND (! $this->InFooter) AND ($this->AcceptPageBreak())) {                if ($addpage) {                    //Automatic page break                    $x = $this->x;                    $this->AddPage($this->CurOrientation);                    $this->y = $this->dataY;                    $oldpage = $this->page - 1;                    if ($this->rtl) {                        if ($this->pagedim[$this->page]['orm'] != $this->pagedim[$oldpage]['orm']) {                            $this->x = $x - ($this->pagedim[$this->page]['orm'] - $this->pagedim[$oldpage]['orm']);                        } else {                            $this->x = $x;                        }                    } else {                        if ($this->pagedim[$this->page]['olm'] != $this->pagedim[$oldpage]['olm']) {                            $this->x = $x + ($this->pagedim[$this->page]['olm'] - $this->pagedim[$oldpage]['olm']);                        } else {                            $this->x = $x;                        }                    }                }                return true;            }            if ($current_page != $this->page) {                // account for columns mode                return true;            }            return false;        }        function Header()        {            global $maxY;            // Check if header for this page already exists            if (! isset($this->headerset[$this->page])) {                $fullwidth = 0;                foreach ($this->tablewidths as $width) {                    $fullwidth += $width;                }                $this->SetY(($this->tMargin) - ($this->FontSizePt / $this->k) * 5);                $this->cellFontSize = $this->FontSizePt ;                $this->SetFont(PMA_PDF_FONT, '', ($this->titleFontSize ? $this->titleFontSize : $this->FontSizePt));                $this->Cell(0, $this->FontSizePt, $this->titleText, 0, 1, 'C');                $this->SetFont(PMA_PDF_FONT, '', $this->cellFontSize);                $this->SetY(($this->tMargin) - ($this->FontSizePt / $this->k) * 2.5);                $this->Cell(                    0, $this->FontSizePt,                    __('Database') . ': ' . $this->currentDb . ',  ' . __('Table') . ': ' . $this->currentTable,                    0, 1, 'L'                );                $l = ($this->lMargin);                foreach ($this->colTitles as $col => $txt) {                    $this->SetXY($l, ($this->tMargin));                    $this->MultiCell($this->tablewidths[$col], $this->FontSizePt, $txt);                    $l += $this->tablewidths[$col] ;                    $maxY = ($maxY < $this->getY()) ? $this->getY() : $maxY ;                }                $this->SetXY($this->lMargin, $this->tMargin);                $this->setFillColor(200, 200, 200);                $l = ($this->lMargin);                foreach ($this->colTitles as $col => $txt) {                    $this->SetXY($l, $this->tMargin);                    $this->cell($this->tablewidths[$col], $maxY-($this->tMargin), '', 1, 0, 'L', 1);                    $this->SetXY($l, $this->tMargin);                    $this->MultiCell($this->tablewidths[$col], $this->FontSizePt, $txt, 0, 'C');                    $l += $this->tablewidths[$col];                }                $this->setFillColor(255, 255, 255);                // set headerset                $this->headerset[$this->page] = 1;            }            $this->dataY = $maxY;        }        function morepagestable($lineheight=8)        {            // some things to set and 'remember'            $l = $this->lMargin;            $startheight = $h = $this->dataY;            $startpage = $currpage = $this->page;            // calculate the whole width            $fullwidth = 0;            foreach ($this->tablewidths as $width) {                $fullwidth += $width;            }            // Now let's start to write the table            $row = 0;            $tmpheight = array();            $maxpage = $this->page;            while ($data = PMA_DBI_fetch_row($this->results)) {                $this->page = $currpage;                // write the horizontal borders                $this->Line($l, $h, $fullwidth+$l, $h);                // write the content and remember the height of the highest col                foreach ($data as $col => $txt) {                    $this->page = $currpage;                    $this->SetXY($l, $h);                    if ($this->tablewidths[$col] > 0) {                        $this->MultiCell($this->tablewidths[$col], $lineheight, $txt, 0, $this->colAlign[$col]);                        $l += $this->tablewidths[$col];                    }                    if (!isset($tmpheight[$row.'-'.$this->page])) {                        $tmpheight[$row.'-'.$this->page] = 0;                    }                    if ($tmpheight[$row.'-'.$this->page] < $this->GetY()) {                        $tmpheight[$row.'-'.$this->page] = $this->GetY();                    }                    if ($this->page > $maxpage) {                        $maxpage = $this->page;                    }                    unset($data[$col]);                }                // get the height we were in the last used page                $h = $tmpheight[$row.'-'.$maxpage];                // set the "pointer" to the left margin                $l = $this->lMargin;                // set the $currpage to the last page                $currpage = $maxpage;                unset($data[$row]);                $row++;            }            // draw the borders            // we start adding a horizontal line on the last page            $this->page = $maxpage;            $this->Line($l, $h, $fullwidth+$l, $h);            // now we start at the top of the document and walk down            for ($i = $startpage; $i <= $maxpage; $i++) {                $this->page = $i;                $l = $this->lMargin;                $t = ($i == $startpage) ? $startheight : $this->tMargin;                $lh = ($i == $maxpage) ? $h : $this->h-$this->bMargin;                $this->Line($l, $t, $l, $lh);                foreach ($this->tablewidths as $width) {                    $l += $width;                    $this->Line($l, $t, $l, $lh);                }            }            // set it to the last page, if not it'll cause some problems            $this->page = $maxpage;        }        function setAttributes($attr = array())        {            foreach ($attr as $key => $val) {                $this->$key = $val ;            }        }        function setTopMargin($topMargin)        {            $this->tMargin = $topMargin;        }        function mysql_report($query)        {            unset($this->tablewidths);            unset($this->colTitles);            unset($this->titleWidth);            unset($this->colFits);            unset($this->display_column);            unset($this->colAlign);            /**             * Pass 1 for column widths             */            $this->results = PMA_DBI_query($query, null, PMA_DBI_QUERY_UNBUFFERED);            $this->numFields  = PMA_DBI_num_fields($this->results);            $this->fields = PMA_DBI_get_fields_meta($this->results);            // sColWidth = starting col width (an average size width)            $availableWidth = $this->w - $this->lMargin - $this->rMargin;            $this->sColWidth = $availableWidth / $this->numFields;            $totalTitleWidth = 0;            // loop through results header and set initial col widths/ titles/ alignment            // if a col title is less than the starting col width, reduce that column size            $colFits = array();            for ($i = 0; $i < $this->numFields; $i++) {                $stringWidth = $this->getstringwidth($this->fields[$i]->name) + 6 ;                // save the real title's width                $titleWidth[$i] = $stringWidth;                $totalTitleWidth += $stringWidth;                // set any column titles less than the start width to the column title width                if ($stringWidth < $this->sColWidth) {                    $colFits[$i] = $stringWidth ;                }                $this->colTitles[$i] = $this->fields[$i]->name;                $this->display_column[$i] = true;                switch ($this->fields[$i]->type) {                case 'int':                    $this->colAlign[$i] = 'R';                    break;                case 'blob':                case 'tinyblob':                case 'mediumblob':                case 'longblob':                    /**                     * @todo do not deactivate completely the display                     * but show the field's name and [BLOB]                     */                    if (stristr($this->fields[$i]->flags, 'BINARY')) {                        $this->display_column[$i] = false;                        unset($this->colTitles[$i]);                    }                    $this->colAlign[$i] = 'L';                    break;                default:                    $this->colAlign[$i] = 'L';                }            }            // title width verification            if ($totalTitleWidth > $availableWidth) {                $adjustingMode = true;            } else {                $adjustingMode = false;                // we have enough space for all the titles at their                // original width so use the true title's width                foreach ($titleWidth as $key => $val) {                    $colFits[$key] = $val;                }            }            // loop through the data; any column whose contents            // is greater than the column size is resized            /**              * @todo force here a LIMIT to avoid reading all rows              */            while ($row = PMA_DBI_fetch_row($this->results)) {                foreach ($colFits as $key => $val) {                    $stringWidth = $this->getstringwidth($row[$key]) + 6 ;                    if ($adjustingMode && ($stringWidth > $this->sColWidth)) {                        // any column whose data's width is bigger than                        // the start width is now discarded                        unset($colFits[$key]);                    } else {                        // if data's width is bigger than the current column width,                        // enlarge the column (but avoid enlarging it if the                        // data's width is very big)                        if ($stringWidth > $val && $stringWidth < ($this->sColWidth * 3)) {                            $colFits[$key] = $stringWidth ;                        }                    }                }            }            $totAlreadyFitted = 0;            foreach ($colFits as $key => $val) {                // set fitted columns to smallest size                $this->tablewidths[$key] = $val;                // to work out how much (if any) space has been freed up                $totAlreadyFitted += $val;            }            if ($adjustingMode) {                $surplus = (sizeof($colFits) * $this->sColWidth) - $totAlreadyFitted;                $surplusToAdd = $surplus / ($this->numFields - sizeof($colFits));            } else {                $surplusToAdd = 0;            }            for ($i=0; $i < $this->numFields; $i++) {                if (!in_array($i, array_keys($colFits))) {                    $this->tablewidths[$i] = $this->sColWidth + $surplusToAdd;                }                if ($this->display_column[$i] == false) {                    $this->tablewidths[$i] = 0;                }            }            ksort($this->tablewidths);            PMA_DBI_free_result($this->results);            // Pass 2            $this->results = PMA_DBI_query($query, null, PMA_DBI_QUERY_UNBUFFERED);            $this->setY($this->tMargin);            $this->AddPage();            $this->SetFont(PMA_PDF_FONT, '', 9);            $this->morepagestable($this->FontSizePt);            PMA_DBI_free_result($this->results);        } // end of mysql_report function    } // end of PMA_Export_PDF class    $pdf = new PMA_Export_PDF('L', 'pt', 'A3');    /**     * Finalize the pdf.     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        global $pdf;        // instead of $pdf->Output():        if (!PMA_exportOutputHandler($pdf->getPDFData())) {            return false;        }        return true;    }    /**     * Initialize the pdf to export data.     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        global $pdf_report_title;        global $pdf;        $pdf->Open();        $attr = array('titleFontSize' => 18, 'titleText' => $pdf_report_title);        $pdf->setAttributes($attr);        $pdf->setTopMargin(30);        return true;    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        return true;    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in PDF format     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $pdf;        $attr=array('currentDb' => $db, 'currentTable' => $table);        $pdf->setAttributes($attr);        $pdf->mysql_report($sql_query);        return true;    } // end of the 'PMA_exportData()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';extract($_POST, EXTR_SKIP);extract($_GET, EXTR_SKIP);$die_save_pos = 0;require_once 'pmd_save_pos.php';list($DB1, $T1) = explode(".", $T1);list($DB2, $T2) = explode(".", $T2);$tables = PMA_DBI_get_tables_full($db, $T1);$type_T1 = strtoupper($tables[$T1]['ENGINE']);$tables = PMA_DBI_get_tables_full($db, $T2);$type_T2 = strtoupper($tables[$T2]['ENGINE']);$try_to_delete_internal_relation = false;if (PMA_foreignkey_supported($type_T1) && PMA_foreignkey_supported($type_T2) && $type_T1 == $type_T2) {    // InnoDB    $existrel_foreign = PMA_getForeigners($DB2, $T2, '', 'foreign');    if (isset($existrel_foreign[$F2]['constraint'])) {        $upd_query  = 'ALTER TABLE ' . PMA_backquote($T2)                  . ' DROP FOREIGN KEY '                  . PMA_backquote($existrel_foreign[$F2]['constraint']);        $upd_rs     = PMA_DBI_query($upd_query);    } else {        // there can be an internal relation even if InnoDB        $try_to_delete_internal_relation = true;    }} else {    $try_to_delete_internal_relation = true;}if ($try_to_delete_internal_relation) {    // internal relations    PMA_query_as_controluser(        'DELETE FROM '        . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'        . $cfg['Server']['relation'].' WHERE '        . 'master_db = \'' . PMA_sqlAddSlashes($DB2) . '\''        . ' AND master_table = \'' . PMA_sqlAddSlashes($T2) . '\''        . ' AND master_field = \'' . PMA_sqlAddSlashes($F2) . '\''        . ' AND foreign_db = \'' . PMA_sqlAddSlashes($DB1) . '\''        . ' AND foreign_table = \'' . PMA_sqlAddSlashes($T1) . '\''        . ' AND foreign_field = \'' . PMA_sqlAddSlashes($F1) . '\'',        false,        PMA_DBI_QUERY_STORE    );}PMD_return_upd(1, __('Relation deleted'));function PMD_return_upd($b, $ret){    global $K;    header("Content-Type: text/xml; charset=utf-8");    header("Cache-Control: no-cache");    die('<root act="relation_upd" return="'.$ret.'" b="'.$b.'" K="'.$K.'"></root>');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Single signon for phpMyAdmin * * This is just example how to use session based single signon with * phpMyAdmin, it is not intended to be perfect code and look, only * shows how you can integrate this functionality in your application. * * @package PhpMyAdmin * @subpackage Example *//* Need to have cookie visible from parent directory */session_set_cookie_params(0, '/', '', 0);/* Create signon session */$session_name = 'SignonSession';session_name($session_name);session_start();/* Was data posted? */if (isset($_POST['user'])) {    /* Store there credentials */    $_SESSION['PMA_single_signon_user'] = $_POST['user'];    $_SESSION['PMA_single_signon_password'] = $_POST['password'];    $_SESSION['PMA_single_signon_host'] = $_POST['host'];    $_SESSION['PMA_single_signon_port'] = $_POST['port'];    /* Update another field of server configuration */    $_SESSION['PMA_single_signon_cfgupdate'] = array('verbose' => 'Signon test');    $id = session_id();    /* Close that session */    session_write_close();    /* Redirect to phpMyAdmin (should use absolute URL here!) */    header('Location: ../index.php');} else {    /* Show simple form */    header('Content-Type: text/html; charset=utf-8');    echo '<?xml version="1.0" encoding="utf-8"?>' . "\n";    ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr"><head>    <link rel="icon" href="../favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="../favicon.ico" type="image/x-icon" />    <title>phpMyAdmin single signon example</title></head><body><?phpif (isset($_SESSION['PMA_single_signon_error_message'])) {    echo '<p class="error">' . $_SESSION['PMA_single_signon_error_message'] . '</p>';}?><form action="signon.php" method="post">Username: <input type="text" name="user" /><br />Password: <input type="password" name="password" /><br />Host: (will use the one from config.inc.php by default) <input type="text" name="host" /><br />Port: (will use the one from config.inc.php by default) <input type="text" name="port" /><br /><input type="submit" /></form></body></html><?php}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// Display function/** * void PMA_TableHeader([bool $db_is_information_schema = false]) * display table header (<table><thead>...</thead><tbody>) * * @param boolean $db_is_information_schema * @param boolean $replication */function PMA_TableHeader($db_is_information_schema = false, $replication = false){    $cnt = 0; // Let's count the columns...    if ($db_is_information_schema) {        $action_colspan = 3;    } else {        $action_colspan = 6;    }    echo '<table class="data">' . "\n"        .'<thead>' . "\n"        .'<tr><th></th>' . "\n"        .'    <th>' . PMA_SortableTableHeader(__('Table'), 'table') . '</th>' . "\n";    if ($replication) {     echo '    <th>' . "\n"         .'        ' . __('Replication') . "\n"         .'    </th>';    }    echo '    <th colspan="' . $action_colspan . '">' . "\n"        .'        ' . __('Action') . "\n"        .'    </th>'        // larger values are more interesting so default sort order is DESC        .'    <th>' . PMA_SortableTableHeader(__('Rows'), 'records', 'DESC')        .PMA_showHint(PMA_sanitize(__('May be approximate. See [a@./Documentation.html#faq3_11@Documentation]FAQ 3.11[/a]'))) . "\n"        .'    </th>' . "\n";    if (!($GLOBALS['cfg']['PropertiesNumColumns'] > 1)) {        echo '    <th>' . PMA_SortableTableHeader(__('Type'), 'type') . '</th>' . "\n";        $cnt++;        echo '    <th>' . PMA_SortableTableHeader(__('Collation'), 'collation') . '</th>' . "\n";        $cnt++;    }    if ($GLOBALS['is_show_stats']) {        // larger values are more interesting so default sort order is DESC        echo '    <th>' . PMA_SortableTableHeader(__('Size'), 'size', 'DESC') . '</th>' . "\n"        // larger values are more interesting so default sort order is DESC           . '    <th>' . PMA_SortableTableHeader(__('Overhead'), 'overhead', 'DESC') . '</th>' . "\n";        $cnt += 2;    }    echo '</tr>' . "\n";    echo '</thead>' . "\n";    echo '<tbody>' . "\n";    $GLOBALS['colspan_for_structure'] = $cnt + $action_colspan + 3;} // end function PMA_TableHeader()/** * Creates a clickable column header for table information * * @param string  $title title to use for the link * @param string  $sort  corresponds to sortable data name mapped in libraries/db_info.inc.php * @param string  $initial_sort_order * @return string  link to be displayed in the table header */function PMA_SortableTableHeader($title, $sort, $initial_sort_order = 'ASC'){    // Set some defaults    $requested_sort = 'table';    $requested_sort_order = $future_sort_order = $initial_sort_order;        // If the user requested a sort    if (isset($_REQUEST['sort'])) {        $requested_sort = $_REQUEST['sort'];        if (isset($_REQUEST['sort_order'])) {            $requested_sort_order = $_REQUEST['sort_order'];        }    }    $order_img = '';    $order_link_params = array();    $order_link_params['title'] = __('Sort');    // If this column was requested to be sorted.    if ($requested_sort == $sort) {        if ($requested_sort_order == 'ASC') {            $future_sort_order = 'DESC';            // current sort order is ASC            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow', 'title' => ''));            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow hide', 'title' => ''));            // but on mouse over, show the reverse order (DESC)            $order_link_params['onmouseover'] = "$('.sort_arrow').toggle();";            // on mouse out, show current sort order (ASC)            $order_link_params['onmouseout'] = "$('.sort_arrow').toggle();";        } else {            $future_sort_order = 'ASC';            // current sort order is DESC            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow hide', 'title' => ''));            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow', 'title' => ''));            // but on mouse over, show the reverse order (ASC)            $order_link_params['onmouseover'] = "$('.sort_arrow').toggle();";            // on mouse out, show current sort order (DESC)            $order_link_params['onmouseout'] = "$('.sort_arrow').toggle();";        }    }    $_url_params = array(        'db' => $_REQUEST['db'],    );    $url = 'db_structure.php'.PMA_generate_common_url($_url_params);    // We set the position back to 0 every time they sort.    $url .= "&amp;pos=0&amp;sort=$sort&amp;sort_order=$future_sort_order";    return PMA_linkOrButton($url, $title . $order_img, $order_link_params);} // end function PMA_SortableTableHeader()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This library is used with the server IP allow/deny host authentication * feature * * @todo Broken for IPv6 * * @package PhpMyAdmin *//** * Gets the "true" IP address of the current user * * @return  string   the ip of the user * * @access  private */function PMA_getIp(){    /* Get the address of user */    if (!empty($_SERVER['REMOTE_ADDR'])) {        $direct_ip = $_SERVER['REMOTE_ADDR'];    } else {        /* We do not know remote IP */        return false;    }    /* Do we trust this IP as a proxy? If yes we will use it's header. */    if (isset($GLOBALS['cfg']['TrustedProxies'][$direct_ip])) {        $trusted_header_value = PMA_getenv($GLOBALS['cfg']['TrustedProxies'][$direct_ip]);        $matches = array();        // the $ checks that the header contains only one IP address, ?: makes sure the () don't capture        $is_ip = preg_match('|^(?:[0-9]{1,3}\.){3,3}[0-9]{1,3}$|', $trusted_header_value, $matches);        if ($is_ip && (count($matches) == 1)) {            // True IP behind a proxy            return $matches[0];        }    }    /* Return true IP */    return $direct_ip;} // end of the 'PMA_getIp()' function/** * Based on IP Pattern Matcher * Originally by J.Adams <jna@retina.net> * Found on <http://www.php.net/manual/en/function.ip2long.php> * Modified for phpMyAdmin * * Matches: * xxx.xxx.xxx.xxx        (exact) * xxx.xxx.xxx.[yyy-zzz]  (range) * xxx.xxx.xxx.xxx/nn     (CIDR) * * Does not match: * xxx.xxx.xxx.xx[yyy-zzz]  (range, partial octets not supported) * * @param string   string of IP range to match * @param string   string of IP to test against range * * @return  boolean    always true * * @access  public */function PMA_ipMaskTest($testRange, $ipToTest){   $result = true;   if (preg_match('|([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/([0-9]+)|', $testRange, $regs)) {       // performs a mask match       $ipl    = ip2long($ipToTest);       $rangel = ip2long($regs[1] . '.' . $regs[2] . '.' . $regs[3] . '.' . $regs[4]);       $maskl  = 0;       for ($i = 0; $i < 31; $i++) {           if ($i < $regs[5] - 1) {               $maskl = $maskl + PMA_pow(2, (30 - $i));           } // end if       } // end for       if (($maskl & $rangel) == ($maskl & $ipl)) {           return true;       } else {           return false;       }   } else {       // range based       $maskocts = explode('.', $testRange);       $ipocts   = explode('.', $ipToTest);       // perform a range match       for ($i = 0; $i < 4; $i++) {            if (preg_match('|\[([0-9]+)\-([0-9]+)\]|', $maskocts[$i], $regs)) {                if (($ipocts[$i] > $regs[2])                    || ($ipocts[$i] < $regs[1])) {                    $result = false;                } // end if            } else {                if ($maskocts[$i] <> $ipocts[$i]) {                    $result = false;                } // end if            } // end if/else       } //end for   } //end if/else   return $result;} // end of the "PMA_IPMaskTest()" function/** * Runs through IP Allow/Deny rules the use of it below for more information * * @param string 'allow' | 'deny' type of rule to match * * @return  bool   Matched a rule ? * * @access  public * * @see     PMA_getIp() */function PMA_allowDeny($type){    global $cfg;    // Grabs true IP of the user and returns if it can't be found    $remote_ip = PMA_getIp();    if (empty($remote_ip)) {        return false;    }    // copy username    $username  = $cfg['Server']['user'];    // copy rule database    $rules     = $cfg['Server']['AllowDeny']['rules'];    // lookup table for some name shortcuts    $shortcuts = array(        'all'       => '0.0.0.0/0',        'localhost' => '127.0.0.1/8'    );    // Provide some useful shortcuts if server gives us address:    if (PMA_getenv('SERVER_ADDR')) {        $shortcuts['localnetA'] = PMA_getenv('SERVER_ADDR') . '/8';        $shortcuts['localnetB'] = PMA_getenv('SERVER_ADDR') . '/16';        $shortcuts['localnetC'] = PMA_getenv('SERVER_ADDR') . '/24';    }    foreach ($rules as $rule) {        // extract rule data        $rule_data = explode(' ', $rule);        // check for rule type        if ($rule_data[0] != $type) {            continue;        }        // check for username        if (($rule_data[1] != '%') //wildcarded first            && ($rule_data[1] != $username)) {            continue;        }        // check if the config file has the full string with an extra        // 'from' in it and if it does, just discard it        if ($rule_data[2] == 'from') {            $rule_data[2] = $rule_data[3];        }        // Handle shortcuts with above array        if (isset($shortcuts[$rule_data[2]])) {            $rule_data[2] = $shortcuts[$rule_data[2]];        }        // Add code for host lookups here        // Excluded for the moment        // Do the actual matching now        if (PMA_ipMaskTest($rule_data[2], $remote_ip)) {            return true;        }    } // end while    return false;} // end of the "PMA_AllowDeny()" function?>
<?php//============================================================+// File name   : tcpdf_config.php// Begin       : 2004-06-11// Last Update : 2011-04-15//// Description : Configuration file for TCPDF.// Author      : Nicola Asuni - Tecnick.com LTD - Manor Coach House, Church Hill, Aldershot, Hants, GU12 4RQ, UK - www.tecnick.com - info@tecnick.com// License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)// -------------------------------------------------------------------// Copyright (C) 2004-2012  Nicola Asuni - Tecnick.com LTD//// This file is part of TCPDF software library.//// TCPDF is free software: you can redistribute it and/or modify it// under the terms of the GNU Lesser General Public License as// published by the Free Software Foundation, either version 3 of the// License, or (at your option) any later version.//// TCPDF is distributed in the hope that it will be useful, but// WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.// See the GNU Lesser General Public License for more details.//// You should have received a copy of the GNU Lesser General Public License// along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.//// See LICENSE.TXT file for more information.//============================================================+/** * Configuration file for TCPDF. * @author Nicola Asuni * @package com.tecnick.tcpdf * @version 4.9.005 * @since 2004-10-27 */// If you define the constant K_TCPDF_EXTERNAL_CONFIG, the following settings will be ignored.if (!defined('K_TCPDF_EXTERNAL_CONFIG')) {	// DOCUMENT_ROOT fix for IIS Webserver	if ((!isset($_SERVER['DOCUMENT_ROOT'])) OR (empty($_SERVER['DOCUMENT_ROOT']))) {		if(isset($_SERVER['SCRIPT_FILENAME'])) {			$_SERVER['DOCUMENT_ROOT'] = str_replace( '\\', '/', substr($_SERVER['SCRIPT_FILENAME'], 0, 0-strlen($_SERVER['PHP_SELF'])));		} elseif(isset($_SERVER['PATH_TRANSLATED'])) {			$_SERVER['DOCUMENT_ROOT'] = str_replace( '\\', '/', substr(str_replace('\\\\', '\\', $_SERVER['PATH_TRANSLATED']), 0, 0-strlen($_SERVER['PHP_SELF'])));		} else {			// define here your DOCUMENT_ROOT path if the previous fails (e.g. '/var/www')			$_SERVER['DOCUMENT_ROOT'] = '/';		}	}	// Automatic calculation for the following K_PATH_MAIN constant	$k_path_main = str_replace( '\\', '/', realpath(substr(dirname(__FILE__), 0, 0-strlen('config'))));	if (substr($k_path_main, -1) != '/') {		$k_path_main .= '/';	}	/**	 * Installation path (/var/www/tcpdf/).	 * By default it is automatically calculated but you can also set it as a fixed string to improve performances.	 */	define ('K_PATH_MAIN', $k_path_main);	// Automatic calculation for the following K_PATH_URL constant	$k_path_url = $k_path_main; // default value for console mode	if (isset($_SERVER['HTTP_HOST']) AND (!empty($_SERVER['HTTP_HOST']))) {		if(isset($_SERVER['HTTPS']) AND (!empty($_SERVER['HTTPS'])) AND strtolower($_SERVER['HTTPS'])!='off') {			$k_path_url = 'https://';		} else {			$k_path_url = 'http://';		}		$k_path_url .= $_SERVER['HTTP_HOST'];		$k_path_url .= str_replace( '\\', '/', substr(K_PATH_MAIN, (strlen($_SERVER['DOCUMENT_ROOT']) - 1)));	}	/**	 * URL path to tcpdf installation folder (http://localhost/tcpdf/).	 * By default it is automatically calculated but you can also set it as a fixed string to improve performances.	 */	define ('K_PATH_URL', $k_path_url);	/**	 * path for PDF fonts	 * use K_PATH_MAIN.'fonts/old/' for old non-UTF8 fonts	 */	define ('K_PATH_FONTS', K_PATH_MAIN.'fonts/');	/**	 * cache directory for temporary files (full path)	 */	define ('K_PATH_CACHE', K_PATH_MAIN.'cache/');	/**	 * cache directory for temporary files (url path)	 */	define ('K_PATH_URL_CACHE', K_PATH_URL.'cache/');	/**	 *images directory	 */	define ('K_PATH_IMAGES', K_PATH_MAIN.'images/');	/**	 * blank image	 */	define ('K_BLANK_IMAGE', K_PATH_IMAGES.'_blank.png');	/**	 * page format	 */	define ('PDF_PAGE_FORMAT', 'A4');	/**	 * page orientation (P=portrait, L=landscape)	 */	define ('PDF_PAGE_ORIENTATION', 'P');	/**	 * document creator	 */	define ('PDF_CREATOR', 'TCPDF');	/**	 * document author	 */	define ('PDF_AUTHOR', 'TCPDF');	/**	 * header title	 */	define ('PDF_HEADER_TITLE', 'TCPDF Example');	/**	 * header description string	 */	define ('PDF_HEADER_STRING', "by Nicola Asuni - Tecnick.com\nwww.tcpdf.org");	/**	 * image logo	 */	define ('PDF_HEADER_LOGO', 'tcpdf_logo.jpg');	/**	 * header logo image width [mm]	 */	define ('PDF_HEADER_LOGO_WIDTH', 30);	/**	 *  document unit of measure [pt=point, mm=millimeter, cm=centimeter, in=inch]	 */	define ('PDF_UNIT', 'mm');	/**	 * header margin	 */	define ('PDF_MARGIN_HEADER', 5);	/**	 * footer margin	 */	define ('PDF_MARGIN_FOOTER', 10);	/**	 * top margin	 */	define ('PDF_MARGIN_TOP', 27);	/**	 * bottom margin	 */	define ('PDF_MARGIN_BOTTOM', 25);	/**	 * left margin	 */	define ('PDF_MARGIN_LEFT', 15);	/**	 * right margin	 */	define ('PDF_MARGIN_RIGHT', 15);	/**	 * default main font name	 */	define ('PDF_FONT_NAME_MAIN', 'helvetica');	/**	 * default main font size	 */	define ('PDF_FONT_SIZE_MAIN', 10);	/**	 * default data font name	 */	define ('PDF_FONT_NAME_DATA', 'helvetica');	/**	 * default data font size	 */	define ('PDF_FONT_SIZE_DATA', 8);	/**	 * default monospaced font name	 */	define ('PDF_FONT_MONOSPACED', 'courier');	/**	 * ratio used to adjust the conversion of pixels to user units	 */	define ('PDF_IMAGE_SCALE_RATIO', 1.25);	/**	 * magnification factor for titles	 */	define('HEAD_MAGNIFICATION', 1.1);	/**	 * height of cell repect font height	 */	define('K_CELL_HEIGHT_RATIO', 1.25);	/**	 * title magnification respect main font size	 */	define('K_TITLE_MAGNIFICATION', 1.3);	/**	 * reduction factor for small font	 */	define('K_SMALL_RATIO', 2/3);	/**	 * set to true to enable the special procedure used to avoid the overlappind of symbols on Thai language	 */	define('K_THAI_TOPCHARS', true);	/**	 * if true allows to call TCPDF methods using HTML syntax	 * IMPORTANT: For security reason, disable this feature if you are printing user HTML content.	 */	define('K_TCPDF_CALLS_IN_HTML', true);}//============================================================+// END OF FILE//============================================================+
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build CSV dumps of tables for excel * * @package PhpMyAdmin-Export * @subpackage CSV-Excel */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['excel'] = array(        'text' => __('CSV for MS Excel'),        'extension' => 'csv',        'mime_type' => 'text/comma-separated-values',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:')),            array('type' => 'bool', 'name' => 'removeCRLF', 'text' => __('Remove carriage return/line feed characters within columns')),            array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),            array(                'type' => 'select',                'name' => 'edition',                'values' => array(                    'win' => 'Windows',                    'mac_excel2003' => 'Excel 2003 / Macintosh',                    'mac_excel2008' => 'Excel 2008 / Macintosh'),                'text' => __('Excel edition:')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group'),            ),        'options_text' => __('Options'),        );} else {    /* Everything rest is coded in csv plugin */    include './libraries/export/csv.php';}?>
<?php/** * Handles the visualization of GIS MULTIPOLYGON objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Multipolygon extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        $min_max = array();        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        foreach ($polygons as $polygon) {            // If the polygon doesn't have an inner ring, use polygon itself            if (strpos($polygon, "),(") === false) {                $ring = $polygon;            } else {                // Seperate outer ring and use it to determin min-max                $parts = explode("),(", $polygon);                $ring = $parts[0];            }            $min_max = $this->setMinMax($ring, $min_max);        }        return $min_max;    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $fill_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $first_poly = true;        foreach ($polygons as $polygon) {            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $points_arr = $this->extractPoints($polygon, $scale_data, true);            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $outer = $parts[0];                $inner = array_slice($parts, 1);                $points_arr = $this->extractPoints($outer, $scale_data, true);                foreach ($inner as $inner_poly) {                    $points_arr = array_merge(                        $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                    );                }            }            // draw polygon            imagefilledpolygon($image, $points_arr, sizeof($points_arr) / 2, $color);            // mark label point if applicable            if (isset($label) && trim($label) != '' && $first_poly) {                $label_point = array($points_arr[2], $points_arr[3]);            }            $first_poly = false;        }        // print label if applicable        if (isset($label_point)) {            imagestring($image, 1, $points_arr[2], $points_arr[3], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $fill_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = array($red, $green, $blue);        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $first_poly = true;        foreach ($polygons as $polygon) {            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $points_arr = $this->extractPoints($polygon, $scale_data, true);            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $outer = $parts[0];                $inner = array_slice($parts, 1);                $points_arr = $this->extractPoints($outer, $scale_data, true);                foreach ($inner as $inner_poly) {                    $points_arr = array_merge(                        $points_arr,                        $this->extractPoints($inner_poly, $scale_data, true)                    );                }            }            // draw polygon            $pdf->Polygon($points_arr, 'F*', array(), $color, true);            // mark label point if applicable            if (isset($label) && trim($label) != '' && $first_poly) {                $label_point = array($points_arr[2], $points_arr[3]);            }            $first_poly = false;        }        // print label if applicable        if (isset($label_point)) {            $pdf->SetXY($label_point[0], $label_point[1]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $fill_color, $scale_data)    {        $polygon_options = array(            'name'        => $label,            'class'       => 'multipolygon vector',            'stroke'      => 'black',            'stroke-width'=> 0.5,            'fill'        => $fill_color,            'fill-rule'   => 'evenodd',            'fill-opacity'=> 0.8,        );        $row = '';        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        foreach ($polygons as $polygon) {            $row .= '<path d="';            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $row .= $this->_drawPath($polygon, $scale_data);            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $outer = $parts[0];                $inner = array_slice($parts, 1);                $row .= $this->_drawPath($outer, $scale_data);                foreach ($inner as $inner_poly) {                    $row .= $this->_drawPath($inner_poly, $scale_data);                }            }            $polygon_options['id'] = $label . rand();            $row .= '"';            foreach ($polygon_options as $option => $val) {                $row .= ' ' . $option . '="' . trim($val) . '"';            }            $row .= '/>';        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $fill_color, $scale_data)    {        $style_options = array(            'strokeColor' => '#000000',            'strokeWidth' => 0.5,            'fillColor'   => $fill_color,            'fillOpacity' => 0.8,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $row = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $row .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector('            . 'new OpenLayers.Geometry.MultiPolygon(new Array(';        foreach ($polygons as $polygon) {            $row .= $this->addPointsForOpenLayersPolygon($polygon, $srid);        }        $row = substr($row, 0, strlen($row) - 2);        $row .= ')), null, ' . json_encode($style_options) . '));';        return $row;    }    /**     * Draws a ring of the polygon using SVG path element.     *     * @param string $polygon    The ring     * @param array  $scale_data Array containing data related to scaling     *     * @return the code to draw the ring     */    private function _drawPath($polygon, $scale_data)    {        $points_arr = $this->extractPoints($polygon, $scale_data);        $row = ' M ' . $points_arr[0][0] . ', ' . $points_arr[0][1];        $other_points = array_slice($points_arr, 1, count($points_arr) - 2);        foreach ($other_points as $point) {            $row .= ' L ' . $point[0] . ', ' . $point[1];        }        $row .= ' Z ';        return $row;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_polygons = isset($gis_data[$index]['MULTIPOLYGON']['no_of_polygons'])            ? $gis_data[$index]['MULTIPOLYGON']['no_of_polygons'] : 1;        if ($no_of_polygons < 1) {            $no_of_polygons = 1;        }        $wkt = 'MULTIPOLYGON(';        for ($k = 0; $k < $no_of_polygons; $k++) {            $no_of_lines = isset($gis_data[$index]['MULTIPOLYGON'][$k]['no_of_lines'])                ? $gis_data[$index]['MULTIPOLYGON'][$k]['no_of_lines'] : 1;            if ($no_of_lines < 1) {                $no_of_lines = 1;            }            $wkt .= '(';            for ($i = 0; $i < $no_of_lines; $i++) {                $no_of_points = isset($gis_data[$index]['MULTIPOLYGON'][$k][$i]['no_of_points'])                    ? $gis_data[$index]['MULTIPOLYGON'][$k][$i]['no_of_points'] : 4;                if ($no_of_points < 4) {                    $no_of_points = 4;                }                $wkt .= '(';                for ($j = 0; $j < $no_of_points; $j++) {                    $wkt .= ((isset($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['x'])                        && trim($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['x']) != '')                        ? $gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['x'] : $empty)                        . ' ' . ((isset($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['y'])                        && trim($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['y']) != '')                        ? $gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['y'] : $empty) .',';                }                $wkt = substr($wkt, 0, strlen($wkt) - 1);                $wkt .= '),';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate the WKT for the data from ESRI shape files.     *     * @param array $row_data GIS data     *     * @return the WKT for the data from ESRI shape files     */    public function getShape($row_data)    {        // Determines whether each line ring is an inner ring or an outer ring.        // If it's an inner ring get a point on the surface which can be used to        // correctly classify inner rings to their respective outer rings.        include_once './libraries/gis/pma_gis_polygon.php';        foreach ($row_data['parts'] as $i => $ring) {            $row_data['parts'][$i]['isOuter'] = PMA_GIS_Polygon::isOuterRing($ring['points']);        }        // Find points on surface for inner rings        foreach ($row_data['parts'] as $i => $ring) {            if (! $ring['isOuter']) {                $row_data['parts'][$i]['pointOnSurface']                    = PMA_GIS_Polygon::getPointOnSurface($ring['points']);            }        }        // Classify inner rings to their respective outer rings.        foreach ($row_data['parts'] as $j => $ring1) {            if (! $ring1['isOuter']) {                foreach ($row_data['parts'] as $k => $ring2) {                    if ($ring2['isOuter']) {                        // If the pointOnSurface of the inner ring                        // is also inside the outer ring                        if (PMA_GIS_Polygon::isPointInsidePolygon(                            $ring1['pointOnSurface'], $ring2['points']                        )) {                            if (! isset($ring2['inner'])) {                                $row_data['parts'][$k]['inner'] = array();                            }                            $row_data['parts'][$k]['inner'][] = $j;                        }                    }                }            }        }        $wkt = 'MULTIPOLYGON(';        // for each polygon        foreach ($row_data['parts'] as $ring) {            if ($ring['isOuter']) {                $wkt .= '('; // start of polygon                $wkt .= '('; // start of outer ring                foreach ($ring['points'] as $point) {                    $wkt .= $point['x'] . ' ' . $point['y'] . ',';                }                $wkt = substr($wkt, 0, strlen($wkt) - 1);                $wkt .= ')'; // end of outer ring                // inner rings if any                if (isset($ring['inner'])) {                    foreach ($ring['inner'] as $j) {                        $wkt .= ',('; // start of inner ring                        foreach ($row_data['parts'][$j]['points'] as $innerPoint) {                            $wkt .= $innerPoint['x'] . ' ' . $innerPoint['y'] . ',';                        }                        $wkt = substr($wkt, 0, strlen($wkt) - 1);                        $wkt .= ')';  // end of inner ring                    }                }                $wkt .= '),'; // end of polygon            }        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')'; // end of multipolygon        return $wkt;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'MULTIPOLYGON';            $wkt = $value;        }        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($wkt, 15, (strlen($wkt) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $params[$index]['MULTIPOLYGON']['no_of_polygons'] = count($polygons);        $k = 0;        foreach ($polygons as $polygon) {            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $params[$index]['MULTIPOLYGON'][$k]['no_of_lines'] = 1;                $points_arr = $this->extractPoints($polygon, null);                $no_of_points = count($points_arr);                $params[$index]['MULTIPOLYGON'][$k][0]['no_of_points'] = $no_of_points;                for ($i = 0; $i < $no_of_points; $i++) {                    $params[$index]['MULTIPOLYGON'][$k][0][$i]['x'] = $points_arr[$i][0];                    $params[$index]['MULTIPOLYGON'][$k][0][$i]['y'] = $points_arr[$i][1];                }            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $params[$index]['MULTIPOLYGON'][$k]['no_of_lines'] = count($parts);                $j = 0;                foreach ($parts as $ring) {                    $points_arr = $this->extractPoints($ring, null);                    $no_of_points = count($points_arr);                    $params[$index]['MULTIPOLYGON'][$k][$j]['no_of_points'] = $no_of_points;                    for ($i = 0; $i < $no_of_points; $i++) {                        $params[$index]['MULTIPOLYGON'][$k][$j][$i]['x'] = $points_arr[$i][0];                        $params[$index]['MULTIPOLYGON'][$k][$j][$i]['y'] = $points_arr[$i][1];                    }                    $j++;                }            }            $k++;        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * configures general layout * for detailed layout configuration please refer to the css files * * @package PhpMyAdmin-theme * @subpackage Original *//** * navi frame */// navi frame width$GLOBALS['cfg']['NaviWidth']                = 200;// foreground (text) color for the navi frame$GLOBALS['cfg']['NaviColor']                = '#000000';// background for the navi frame$GLOBALS['cfg']['NaviBackground']           = '#D0DCE0';// foreground (text) color of the pointer in navi frame$GLOBALS['cfg']['NaviPointerColor']         = '#000000';// background of the pointer in navi frame$GLOBALS['cfg']['NaviPointerBackground']    = '#9999CC';/** * main frame */// foreground (text) color for the main frame$GLOBALS['cfg']['MainColor']                = '#000000';// background for the main frame$GLOBALS['cfg']['MainBackground']           = '#F5F5F5';// foreground (text) color of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerColor']       = '#000000';// background of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerBackground']  = '#CCFFCC';// foreground (text) color of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerColor']        = '#000000';// background of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerBackground']   = '#FFCC99';/** * fonts *//** * the font family as a valid css font family value, * if not set the browser default will be used * (depending on browser, DTD and system settings) */$GLOBALS['cfg']['FontFamily']           = 'sans-serif';/** * fixed width font family, used in textarea */$GLOBALS['cfg']['FontFamilyFixed']      = 'monospace';/** * tables */// border$GLOBALS['cfg']['Border']               = 0;// table header and footer color$GLOBALS['cfg']['ThBackground']         = '#D3DCE3';// table header and footer background$GLOBALS['cfg']['ThColor']              = '#000000';// table data row background$GLOBALS['cfg']['BgOne']                = '#E5E5E5';// table data row background, alternate$GLOBALS['cfg']['BgTwo']                = '#D5D5D5';/** * query window */// Width of Query window$GLOBALS['cfg']['QueryWindowWidth']     = 600;// Height of Query window$GLOBALS['cfg']['QueryWindowHeight']    = 400;/** * SQL Parser Settings * Syntax colouring data */$GLOBALS['cfg']['SQP']['fmtColor']      = array(    'comment'            => '#808000',    'comment_mysql'      => '',    'comment_ansi'       => '',    'comment_c'          => '',    'digit'              => '',    'digit_hex'          => 'teal',    'digit_integer'      => 'teal',    'digit_float'        => 'aqua',    'punct'              => 'fuchsia',    'alpha'              => '',    'alpha_columnType'   => '#FF9900',    'alpha_columnAttrib' => '#0000FF',    'alpha_reservedWord' => '#990099',    'alpha_functionName' => '#FF0000',    'alpha_identifier'   => 'black',    'alpha_charset'      => '#6495ed',    'alpha_variable'     => '#800000',    'quote'              => '#008000',    'quote_double'       => '',    'quote_single'       => '',    'quote_backtick'     => '');/** * Chart colors */ $GLOBALS['cfg']['chartColor'] = array(    'gradientIntensity'       => 0,    // The style of the chart title.    'titleColor'              => '#000000',    'titleBgColor'            => $GLOBALS['cfg']['ThBackground'],    // Chart border (0 for no border)    'border'                  => '#CCCCCC',    // Chart background color.    'bgColor'                 => $GLOBALS['cfg']['BgTwo'],    // when graph area gradient is used, this is the color of the graph    // area border    'graphAreaColor'          =>  '#D5D9DD',    // the background color of the inner graph area    'graphAreaGradientColor'  => $GLOBALS['cfg']['BgOne'],    // the color of the grid lines in the graph area    'gridColor'               => '#E6E6E6',    // the color of the scale and the labels    'scaleColor'              => '#D5D9DD', );?>
<?php/** * Server create and edit view * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/form_processing.lib.php';require './libraries/config/setup.forms.php';$mode = filter_input(INPUT_GET, 'mode');$id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);$cf = ConfigFile::getInstance();$server_exists = !empty($id) && $cf->get("Servers/$id") !== null;if ($mode == 'edit' && $server_exists) {    $page_title = __('Edit server')        . ' ' . $id . ' <small>(' . htmlspecialchars($cf->getServerDSN($id)) . ')</small>';} elseif ($mode == 'remove' && $server_exists) {    $cf->removeServer($id);    header('Location: index.php');    exit;} elseif ($mode == 'revert' && $server_exists) {    // handled by process_formset()} else {    $page_title = __('Add a new server');    $id = 0;}if (isset($page_title)) {    echo '<h2>' . $page_title . '</h2>';}$form_display = new FormDisplay();foreach ($forms['Servers'] as $form_name => $form) {    $form_display->registerForm($form_name, $form, $id);}process_formset($form_display);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * the PBMS daemon * @package PhpMyAdmin-Engines */class PMA_StorageEngine_pbms extends PMA_StorageEngine{    /**     * returns array with variable names dedicated to PBMS daemon     *     * @return  array   variable names     */    function engine_init()    {        $this->engine  = "PBMS";        $this->title   = "PrimeBase Media Streaming Daemon";        $this->comment = "Provides BLOB streaming service for storage engines,";        $this->support = PMA_ENGINE_SUPPORT_YES;    }    function getVariables()    {        return array(            'pbms_garbage_threshold' => array(                'title' => __('Garbage Threshold'),                'desc'  => __('The percentage of garbage in a repository file before it is compacted.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_port' => array(                'title' => __('Port'),                'desc'  => __('The port for the PBMS stream-based communications. Setting this value to 0 will disable HTTP communication with the daemon.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_repository_threshold' => array(                'title' => __('Repository Threshold'),                'desc'  => __('The maximum size of a BLOB repository file. You may use Kb, MB or GB to indicate the unit of the value. A value in bytes is assumed when no unit is specified.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_temp_blob_timeout' => array(                'title' => __('Temp Blob Timeout'),                'desc'  => __('The timeout, in seconds, for temporary BLOBs. Uploaded BLOB data is removed after this time, unless they are referenced by a record in the database.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_temp_log_threshold' => array(                'title' => __('Temp Log Threshold'),                'desc'  => __('The maximum size of a temporary BLOB log file. You may use Kb, MB or GB to indicate the unit of the value. A value in bytes is assumed when no unit is specified.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_max_keep_alive' => array(                'title' => __('Max Keep Alive'),                'desc'  => __('The timeout for inactive connection with the keep-alive flag set. After this time the connection will be closed. The time-out is in milliseconds (1/1000).'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_http_metadata_headers' => array(                'title' => __('Metadata Headers'),                'desc'  => __('A ":" delimited list of metadata headers to be used to initialize the pbms_metadata_header table when a database is created.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),        );    }    //--------------------    function getInfoPages()    {        $pages = array();        $pages['Documentation'] = __('Documentation');        return $pages;    }    //--------------------    function getPage($id)    {        if (! array_key_exists($id, $this->getInfoPages())) {            return false;        }        $id = 'getPage' . $id;        return $this->$id();    }    function getPageConfigure()    {    }    function getPageDocumentation()    {        $output = '<p>'        . sprintf(__('Documentation and further information about PBMS can be found on %sThe PrimeBase Media Streaming home page%s.'), '<a href="' . PMA_linkURL('http://www.blobstreaming.org/') . '" target="_blank">', '</a>')        . '</p>' . "\n"        . '<h3>' . __('Related Links') . '</h3>' . "\n"        . '<ul>' . "\n"        . '<li><a href="' . PMA_linkURL('http://bpbdev.blogspot.com/') . '" target="_blank">' . __('The PrimeBase Media Streaming Blog by Barry Leslie') . '</a></li>' . "\n"        . '<li><a href="' . PMA_linkURL('http://www.primebase.com/xt') . '" target="_blank">' . __('PrimeBase XT Home Page') . '</a></li>' . "\n"        . '</ul>' . "\n";        return $output;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_innodb extends PMA_StorageEngine{    /**     * @return  array     */    function getVariables()    {        return array(            'innodb_data_home_dir' => array(                'title' => __('Data home directory'),                'desc'  => __('The common part of the directory path for all InnoDB data files.'),            ),            'innodb_data_file_path' => array(                'title' => __('Data files'),            ),            'innodb_autoextend_increment' => array(                'title' => __('Autoextend increment'),                'desc'  => __('The increment size for extending the size of an autoextending tablespace when it becomes full.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_buffer_pool_size' => array(                'title' => __('Buffer pool size'),                'desc'  => __('The size of the memory buffer InnoDB uses to cache data and indexes of its tables.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_additional_mem_pool_size' => array(                'title' => 'innodb_additional_mem_pool_size',                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_buffer_pool_awe_mem_mb' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_checksums' => array(            ),            'innodb_commit_concurrency' => array(            ),            'innodb_concurrency_tickets' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_doublewrite' => array(            ),            'innodb_fast_shutdown' => array(            ),            'innodb_file_io_threads' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_file_per_table' => array(            ),            'innodb_flush_log_at_trx_commit' => array(            ),            'innodb_flush_method' => array(            ),            'innodb_force_recovery' => array(            ),            'innodb_lock_wait_timeout' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_locks_unsafe_for_binlog' => array(            ),            'innodb_log_arch_dir' => array(            ),            'innodb_log_archive' => array(            ),            'innodb_log_buffer_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_log_file_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_log_files_in_group' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_log_group_home_dir' => array(            ),            'innodb_max_dirty_pages_pct' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_max_purge_lag' => array(            ),            'innodb_mirrored_log_groups' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_open_files' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_support_xa' => array(            ),            'innodb_sync_spin_loops' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_table_locks' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_BOOLEAN,            ),            'innodb_thread_concurrency' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_thread_sleep_delay' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),         );    }    /**     * @return  string  SQL query LIKE pattern     */    function getVariablesLikePattern()    {        return 'innodb\\_%';    }    /**     * @return  array   detail pages     */    function getInfoPages()    {        if ($this->support < PMA_ENGINE_SUPPORT_YES) {            return array();        }        $pages = array();        $pages['Bufferpool'] = __('Buffer Pool');        $pages['Status'] = __('InnoDB Status');        return $pages;    }    /**     * returns html tables with stats over inno db buffer pool     *     * @return  string  html table with stats     */    function getPageBufferpool()    {        // The following query is only possible because we know        // that we are on MySQL 5 here (checked above)!        // side note: I love MySQL 5 for this. :-)        $sql = '             SHOW STATUS            WHERE Variable_name LIKE \'Innodb\\_buffer\\_pool\\_%\'               OR Variable_name = \'Innodb_page_size\';';        $status = PMA_DBI_fetch_result($sql, 0, 1);        $output = '<table class="data" id="table_innodb_bufferpool_usage">' . "\n"                . '    <caption class="tblHeaders">' . "\n"                . '        ' . __('Buffer Pool Usage') . "\n"                . '    </caption>' . "\n"                . '    <tfoot>' . "\n"                . '        <tr>' . "\n"                . '            <th colspan="2">' . "\n"                . '                ' . __('Total') . "\n"                . '                : ' . PMA_formatNumber(                        $status['Innodb_buffer_pool_pages_total'], 0)                . '&nbsp;' . __('pages')                . ' / '                . join('&nbsp;',                    PMA_formatByteDown($status['Innodb_buffer_pool_pages_total'] * $status['Innodb_page_size'])) . "\n"                . '            </th>' . "\n"                . '        </tr>' . "\n"                . '    </tfoot>' . "\n"                . '    <tbody>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Free pages') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_free'], 0)                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Dirty pages') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_dirty'], 0)                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Pages containing data') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_data'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Pages to be flushed') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_flushed'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Busy pages') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_misc'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>';            // not present at least since MySQL 5.1.40            if (isset($status['Innodb_buffer_pool_pages_latched'])) {                $output .= '        <tr class="even">'                . '            <th>' . __('Latched pages') . '</th>'                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_latched'], 0)                . '</td>'                . '        </tr>';            }            $output .= '    </tbody>' . "\n"                . '</table>' . "\n\n"                . '<table class="data" id="table_innodb_bufferpool_activity">' . "\n"                . '    <caption class="tblHeaders">' . "\n"                . '        ' . __('Buffer Pool Activity') . "\n"                . '    </caption>' . "\n"                . '    <tbody>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Read requests') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_read_requests'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Write requests') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_write_requests'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Read misses') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_reads'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Write waits') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_wait_free'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Read misses in %') . '</th>' . "\n"                . '            <td class="value">'                . ($status['Innodb_buffer_pool_read_requests'] == 0                    ? '---'                    : htmlspecialchars(PMA_formatNumber($status['Innodb_buffer_pool_reads'] * 100 / $status['Innodb_buffer_pool_read_requests'], 3, 2)) . ' %') . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Write waits in %') . '</th>' . "\n"                . '            <td class="value">'                . ($status['Innodb_buffer_pool_write_requests'] == 0                    ? '---'                    : htmlspecialchars(PMA_formatNumber($status['Innodb_buffer_pool_wait_free'] * 100 / $status['Innodb_buffer_pool_write_requests'], 3, 2)) . ' %') . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '    </tbody>' . "\n"                . '</table>' . "\n";        return $output;    }    /**     * returns InnoDB status     *     * @return  string  result of SHOW INNODB STATUS inside pre tags     */    function getPageStatus()    {        return '<pre id="pre_innodb_status">' . "\n"            . htmlspecialchars(PMA_DBI_fetch_value('SHOW INNODB STATUS;', 0, 'Status')) . "\n"            . '</pre>' . "\n";    }    /**     * returns content for page $id     *     * @param   string  $id page id     * @return  string  html output     */    function getPage($id)    {        if (! array_key_exists($id, $this->getInfoPages())) {            return false;        }        $id = 'getPage' . $id;        return $this->$id();    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'innodb';    }    /**     *       * Gets the InnoDB plugin version number      * http://www.innodb.com/products/innodb_plugin      * (do not confuse this with phpMyAdmin's storage engine plugins!)     *     * @return string the version number, or empty if not running as a plugin      */    function getInnodbPluginVersion()    {        return PMA_DBI_fetch_value('SELECT @@innodb_version;');    }    /**     *       * Gets the InnoDB file format      * (works only for the InnoDB plugin)     * http://www.innodb.com/products/innodb_plugin      * (do not confuse this with phpMyAdmin's storage engine plugins!)     *     * @return string the InnoDB file format      */    function getInnodbFileFormat()    {        return PMA_DBI_fetch_value("SHOW GLOBAL VARIABLES LIKE 'innodb_file_format';", 0, 1);    }    /**     *       * Verifies if this server supports the innodb_file_per_table feature      * (works only for the InnoDB plugin)     * http://www.innodb.com/products/innodb_plugin      * (do not confuse this with phpMyAdmin's storage engine plugins!)     *     * @return boolean whether this feature is supported or not      */    function supportsFilePerTable()    {        $innodb_file_per_table = PMA_DBI_fetch_value("SHOW GLOBAL VARIABLES LIKE 'innodb_file_per_table';", 0, 1);        if ($innodb_file_per_table == 'ON') {            return true;        } else {            return false;        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Various validation functions * * Validation function takes two argument: id for which it is called * and array of fields' values (usually values for entire formset, as defined * in forms.inc.php). * The function must always return an array with an error (or error array) * assigned to a form element (formset name or field path). Even if there are * no errors, key must be set with an empty value. * * Valdiation functions are assigned in $cfg_db['_validators'] (config.values.php). * * @package PhpMyAdmin *//** * Returns validator list * * @return array */function PMA_config_get_validators(){    static $validators = null;    if ($validators === null) {        $cf = ConfigFile::getInstance();        $validators = $cf->getDbEntry('_validators', array());        if (!defined('PMA_SETUP')) {            // not in setup script: load additional validators for user preferences            // we need oryginal config values not overwritten by user preferences, creating a new PMA_Config            // instance is a better idea than hacking into its code            $org_cfg = $cf->getOrgConfigObj();            $uvs = $cf->getDbEntry('_userValidators', array());            foreach ($uvs as $field => $uv_list) {                $uv_list = (array)$uv_list;                foreach ($uv_list as &$uv) {                    if (!is_array($uv)) {                        continue;                    }                    for ($i = 1; $i < count($uv); $i++) {                        if (substr($uv[$i], 0, 6) == 'value:') {                            $uv[$i] = PMA_array_read(substr($uv[$i], 6), $org_cfg->settings);                        }                    }                }                $validators[$field] = isset($validators[$field])                    ? array_merge((array)$validators[$field], $uv_list)                    : $uv_list;            }        }    }    return $validators;}/** * Runs validation $validator_id on values $values and returns error list. * * Return values: * o array, keys - field path or formset id, values - array of errors *   when $isPostSource is true values is an empty array to allow for error list *   cleanup in HTML documen * o false - when no validators match name(s) given by $validator_id * * @param string|array  $validator_id * @param array         $values * @param bool          $isPostSource  tells whether $values are directly from POST request * @return bool|array */function PMA_config_validate($validator_id, &$values, $isPostSource){    // find validators    $validator_id = (array) $validator_id;    $validators = PMA_config_get_validators();    $vids = array();    $cf = ConfigFile::getInstance();    foreach ($validator_id as &$vid) {        $vid = $cf->getCanonicalPath($vid);        if (isset($validators[$vid])) {            $vids[] = $vid;        }    }    if (empty($vids)) {        return false;    }    // create argument list with canonical paths and remember path mapping    $arguments = array();    $key_map = array();    foreach ($values as $k => $v) {        $k2 = $isPostSource ? str_replace('-', '/', $k) : $k;        $k2 = strpos($k2, '/') ? $cf->getCanonicalPath($k2) : $k2;        $key_map[$k2] = $k;        $arguments[$k2] = $v;    }    // validate    $result = array();    foreach ($vids as $vid) {        // call appropriate validation functions        foreach ((array)$validators[$vid] as $validator) {            $vdef = (array) $validator;            $vname = array_shift($vdef);            $args = array_merge(array($vid, &$arguments), $vdef);            $r = call_user_func_array($vname, $args);            // merge results            if (is_array($r)) {                foreach ($r as $key => $error_list) {                    // skip empty values if $isPostSource is false                    if (!$isPostSource && empty($error_list)) {                        continue;                    }                    if (!isset($result[$key])) {                        $result[$key] = array();                    }                    $result[$key] = array_merge($result[$key], (array)$error_list);                }            }        }    }    // restore original paths    $new_result = array();    foreach ($result as $k => $v) {        $k2 = isset($key_map[$k]) ? $key_map[$k] : $k;        $new_result[$k2] = $v;    }    return empty($new_result) ? true : $new_result;}/** * Empty error handler, used to temporarily restore PHP internal error handler * * @return bool */function PMA_null_error_handler(){    return false;}/** * Ensures that $php_errormsg variable will be registered in case of an error * and enables output buffering (when $start = true). * Called with $start = false disables output buffering end restores * html_errors and track_errors. * * @param boolean $start */function test_php_errormsg($start = true){    static $old_html_errors, $old_track_errors, $old_error_reporting;    static $old_display_errors;    if ($start) {        $old_html_errors = ini_get('html_errors');        $old_track_errors = ini_get('track_errors');        $old_display_errors = ini_get('display_errors');        $old_error_reporting = error_reporting(E_ALL);        ini_set('html_errors', false);        ini_set('track_errors', true);        ini_set('display_errors', true);        set_error_handler("PMA_null_error_handler");        ob_start();    } else {        ob_end_clean();        restore_error_handler();        error_reporting($old_error_reporting);        ini_set('html_errors', $old_html_errors);        ini_set('track_errors', $old_track_errors);        ini_set('display_errors', $old_display_errors);    }}/** * Test database connection * * @param string $extension     'drizzle', 'mysql' or 'mysqli' * @param string $connect_type  'tcp' or 'socket' * @param string $host * @param string $port * @param string $socket * @param string $user * @param string $pass * @param string $error_key * @return bool|array */function test_db_connection($extension, $connect_type, $host, $port, $socket, $user, $pass = null, $error_key = 'Server'){    //    test_php_errormsg();    $socket = empty($socket) || $connect_type == 'tcp' ? null : $socket;    $port = empty($port) || $connect_type == 'socket' ? null : ':' . $port;    $error = null;    if ($extension == 'drizzle') {        while (1) {            $drizzle = @drizzle_create();            if (!$drizzle) {                $error = __('Could not initialize Drizzle connection library');                break;            }            $conn = $socket                ? @drizzle_con_add_uds($socket, $user, $pass, null, 0)                : @drizzle_con_add_tcp($drizzle, $host, $port, $user, $pass, null, 0);            if (!$conn) {                $error = __('Could not connect to Drizzle server');                drizzle_free($drizzle);                break;            }            // connection object is set up but we have to send some query to actually connect            $res = @drizzle_query($conn, 'SELECT 1');            if (!$res) {                $error = __('Could not connect to Drizzle server');            } else {                drizzle_result_free($res);            }            drizzle_con_free($conn);            drizzle_free($drizzle);            break;        }    } else if ($extension == 'mysql') {        $conn = @mysql_connect($host . $socket . $port, $user, $pass);        if (!$conn) {            $error = __('Could not connect to MySQL server');        } else {            mysql_close($conn);        }    } else {        $conn = @mysqli_connect($host, $user, $pass, null, $port, $socket);        if (!$conn) {            $error = __('Could not connect to MySQL server');        } else {            mysqli_close($conn);        }    }    //    test_php_errormsg(false);    if (isset($php_errormsg)) {        $error .= " - $php_errormsg";    }    return is_null($error) ? true : array($error_key => $error);}/** * Validate server config * * @param string $path * @param array  $values * @return array */function validate_server($path, $values){    $result = array('Server' => '', 'Servers/1/user' => '', 'Servers/1/SignonSession' => '', 'Servers/1/SignonURL' => '');    $error = false;    if ($values['Servers/1/auth_type'] == 'config' && empty($values['Servers/1/user'])) {        $result['Servers/1/user'] = __('Empty username while using config authentication method');        $error = true;    }    if ($values['Servers/1/auth_type'] == 'signon' && empty($values['Servers/1/SignonSession'])) {        $result['Servers/1/SignonSession'] = __('Empty signon session name while using signon authentication method');        $error = true;    }    if ($values['Servers/1/auth_type'] == 'signon' && empty($values['Servers/1/SignonURL'])) {        $result['Servers/1/SignonURL'] = __('Empty signon URL while using signon authentication method');        $error = true;    }    if (!$error && $values['Servers/1/auth_type'] == 'config') {        $password = $values['Servers/1/nopassword'] ? null : $values['Servers/1/password'];        $test = test_db_connection($values['Servers/1/extension'], $values['Servers/1/connect_type'], $values['Servers/1/host'], $values['Servers/1/port'], $values['Servers/1/socket'], $values['Servers/1/user'], $password, 'Server');        if ($test !== true) {            $result = array_merge($result, $test);        }    }    return $result;}/** * Validate pmadb config * * @param string $path * @param array  $values * @return array */function validate_pmadb($path, $values){    //$tables = array('Servers/1/bookmarktable', 'Servers/1/relation', 'Servers/1/table_info', 'Servers/1/table_coords', 'Servers/1/pdf_pages', 'Servers/1/column_info', 'Servers/1/history', 'Servers/1/designer_coords');    $result = array('Server_pmadb' => '', 'Servers/1/controluser' => '', 'Servers/1/controlpass' => '');    $error = false;    if ($values['Servers/1/pmadb'] == '') {        return $result;    }    $result = array();    if ($values['Servers/1/controluser'] == '') {        $result['Servers/1/controluser'] = __('Empty phpMyAdmin control user while using pmadb');        $error = true;    }    if ($values['Servers/1/controlpass'] == '') {        $result['Servers/1/controlpass'] = __('Empty phpMyAdmin control user password while using pmadb');        $error = true;    }    if (!$error) {        $test = test_db_connection($values['Servers/1/extension'], $values['Servers/1/connect_type'],            $values['Servers/1/host'], $values['Servers/1/port'], $values['Servers/1/socket'],            $values['Servers/1/controluser'], $values['Servers/1/controlpass'], 'Server_pmadb');        if ($test !== true) {            $result = array_merge($result, $test);        }    }    return $result;}/** * Validates regular expression * * @param string $path * @param array  $values * @return array */function validate_regex($path, $values){    $result = array($path => '');    if ($values[$path] == '') {        return $result;    }    test_php_errormsg();    $matches = array();    // in libraries/List_Database.class.php _checkHideDatabase(),    // a '/' is used as the delimiter for hide_db    preg_match('/' . $values[$path] . '/', '', $matches);    test_php_errormsg(false);    if (isset($php_errormsg)) {        $error = preg_replace('/^preg_match\(\): /', '', $php_errormsg);        return array($path => $error);    }    return $result;}/** * Validates TrustedProxies field * * @param string $path * @param array  $values * @return array */function validate_trusted_proxies($path, $values){    $result = array($path => array());    if (empty($values[$path])) {        return $result;    }    if (is_array($values[$path])) {        // value already processed by FormDisplay::save        $lines = array();        foreach ($values[$path] as $ip => $v) {            $lines[] = preg_match('/^-\d+$/', $ip)                ? $v                : $ip . ': ' . $v;        }    } else {        // AJAX validation        $lines = explode("\n", $values[$path]);    }    foreach ($lines as $line) {        $line = trim($line);        $matches = array();        // we catch anything that may (or may not) be an IP        if (!preg_match("/^(.+):(?:[ ]?)\\w+$/", $line, $matches)) {            $result[$path][] = __('Incorrect value') . ': ' . $line;            continue;        }        // now let's check whether we really have an IP address        if (filter_var($matches[1], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) === false            && filter_var($matches[1], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) === false) {            $ip = htmlspecialchars(trim($matches[1]));            $result[$path][] = sprintf(__('Incorrect IP address: %s'), $ip);            continue;        }    }    return $result;}/** * Tests integer value * * @param string $path * @param array  $values * @param bool   $allow_neg       allow negative values * @param bool   $allow_zero      allow zero * @param int    $max_value       max allowed value * @param string $error_string    error message key: $GLOBALS["strConfig$error_lang_key"] * @return string  empty string if test is successful */function test_number($path, $values, $allow_neg, $allow_zero, $max_value, $error_string){    if ($values[$path] === '') {        return '';    }    if (intval($values[$path]) != $values[$path] || (!$allow_neg && $values[$path] < 0) || (!$allow_zero && $values[$path] == 0) || $values[$path] > $max_value) {        return $error_string;    }    return '';}/** * Validates port number * * @param string $path * @param array  $values * @return array */function validate_port_number($path, $values){    return array($path => test_number($path, $values, false, false, 65535, __('Not a valid port number')));}/** * Validates positive number * * @param string $path * @param array  $values * @return array */function validate_positive_number($path, $values){    return array($path => test_number($path, $values, false, false, PHP_INT_MAX, __('Not a positive number')));}/** * Validates non-negative number * * @param string $path * @param array  $values * @return array */function validate_non_negative_number($path, $values){    return array($path => test_number($path, $values, false, true, PHP_INT_MAX, __('Not a non-negative number')));}/** * Validates value according to given regular expression * Pattern and modifiers must be a valid for PCRE <b>and</b> JavaScript RegExp * * @param string $path * @param array  $values * @param string $regex * @return void */function validate_by_regex($path, $values, $regex){    $result = preg_match($regex, $values[$path]);    return array($path => ($result ? '' : __('Incorrect value')));}/** * Validates upper bound for numeric inputs * * @param string $path * @param array  $values * @param int    $max_value * @return array */function validate_upper_bound($path, $values, $max_value){    $result = $values[$path] <= $max_value;    return array($path => ($result ? '' : sprintf(__('Value must be equal or lower than %s'), $max_value)));}?>
<?php/** * Handles the visualization of GIS LINESTRING objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Linestring extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        return $this->setMinMax($linesrting, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS LINESTRING object     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $line_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($line_color, 1, 2));        $green = hexdec(substr($line_color, 3, 2));        $blue  = hexdec(substr($line_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, $scale_data);        foreach ($points_arr as $point) {            if (! isset($temp_point)) {                $temp_point = $point;            } else {                // draw line section                imageline($image, $temp_point[0], $temp_point[1], $point[0], $point[1], $color);                $temp_point = $point;            }        }        // print label if applicable        if (isset($label) && trim($label) != '') {            imagestring($image, 1, $points_arr[1][0], $points_arr[1][1], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS LINESTRING object     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $line_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($line_color, 1, 2));        $green = hexdec(substr($line_color, 3, 2));        $blue  = hexdec(substr($line_color, 4, 2));        $line  = array('width' => 1.5, 'color' => array($red, $green, $blue));        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, $scale_data);        foreach ($points_arr as $point) {            if (! isset($temp_point)) {                $temp_point = $point;            } else {                // draw line section                $pdf->Line($temp_point[0], $temp_point[1], $point[0], $point[1], $line);                $temp_point = $point;            }        }        // print label        if (isset($label) && trim($label) != '') {            $pdf->SetXY($points_arr[1][0], $points_arr[1][1]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS LINESTRING object     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $line_color, $scale_data)    {        $line_options = array(            'name'        => $label,            'id'          => $label . rand(),            'class'       => 'linestring vector',            'fill'        => 'none',            'stroke'      => $line_color,            'stroke-width'=> 2,        );        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, $scale_data);        $row = '<polyline points="';        foreach ($points_arr as $point) {            $row .= $point[0] . ',' . $point[1] . ' ';        }        $row .= '"';        foreach ($line_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS LINESTRING object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $line_color, $scale_data)    {        $style_options = array(            'strokeColor' => $line_color,            'strokeWidth' => 2,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $result = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, null);        $row = 'new Array(';        foreach ($points_arr as $point) {            $row .= '(new OpenLayers.Geometry.Point(' . $point[0] . ', '                . $point[1] . ')).transform(new OpenLayers.Projection("EPSG:'                . $srid . '"), map.getProjectionObject()), ';        }        $row = substr($row, 0, strlen($row) - 2);        $row .= ')';        $result .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector('            . 'new OpenLayers.Geometry.LineString(' . $row . '), null, '            . json_encode($style_options) . '));';        return $result;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_points = isset($gis_data[$index]['LINESTRING']['no_of_points'])            ? $gis_data[$index]['LINESTRING']['no_of_points'] : 2;        if ($no_of_points < 2) {            $no_of_points = 2;        }        $wkt = 'LINESTRING(';        for ($i = 0; $i < $no_of_points; $i++) {            $wkt .= ((isset($gis_data[$index]['LINESTRING'][$i]['x'])                && trim($gis_data[$index]['LINESTRING'][$i]['x']) != '')                ? $gis_data[$index]['LINESTRING'][$i]['x'] : $empty)                . ' ' . ((isset($gis_data[$index]['LINESTRING'][$i]['y'])                && trim($gis_data[$index]['LINESTRING'][$i]['y']) != '')                ? $gis_data[$index]['LINESTRING'][$i]['y'] : $empty) .',';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'LINESTRING';            $wkt = $value;        }        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linestring = substr($wkt, 11, (strlen($wkt) - 12));        $points_arr = $this->extractPoints($linestring, null);        $no_of_points = count($points_arr);        $params[$index]['LINESTRING']['no_of_points'] = $no_of_points;        for ($i = 0; $i < $no_of_points; $i++) {            $params[$index]['LINESTRING'][$i]['x'] = $points_arr[$i][0];            $params[$index]['LINESTRING'][$i]['y'] = $points_arr[$i][1];        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * hold the PMA_List base class * * @package PhpMyAdmin *//** * @todo add caching * @since phpMyAdmin 2.9.10 * @abstract * @package PhpMyAdmin */abstract class PMA_List extends ArrayObject{    /**     * @var mixed   empty item     */    protected $item_empty = '';    public function __construct($array = array(), $flags = 0, $iterator_class = "ArrayIterator")    {        parent::__construct($array, $flags, $iterator_class);    }    /**     * returns item only if there is only one in the list     *     * @return  single item     */    public function getSingleItem()    {        if (count($this) === 1) {            return reset($this);        }        return $this->getEmpty();    }    /**     * defines what is an empty item (0, '', false or null)     *     * @return  mixed   an empty item     */    public function getEmpty()    {        return $this->item_empty;    }    /**     * checks if the given db names exists in the current list, if there is     * missing at least one item it returns false otherwise true     *     * @param string  $db_name,..     one or more mysql result resources     * @return  boolean true if all items exists, otheriwse false     */    public function exists()    {        $this_elements = $this->getArrayCopy();        foreach (func_get_args() as $result) {            if (! in_array($result, $this_elements)) {                return false;            }        }        return true;    }    /**     * returns HTML <option>-tags to be used inside <select></select>     *     * @param mixed   $selected   the selected db or true for selecting current db     * @param boolean $include_information_schema     * @return  string  HTML option tags     */    public function getHtmlOptions($selected = '', $include_information_schema = true)    {        if (true === $selected) {            $selected = $this->getDefault();        }        $options = '';        foreach ($this as $each_item) {            if (false === $include_information_schema                    && PMA_is_system_schema($each_item)) {                continue;            }            $options .= '<option value="' . htmlspecialchars($each_item) . '"';            if ($selected === $each_item) {                $options .= ' selected="selected"';            }            $options .= '>' . htmlspecialchars($each_item) . '</option>' . "\n";        }        return $options;    }    /**     * returns default item     *     * @return  string  default item     */    public function getDefault()    {        return $this->getEmpty();    }    /**     * builds up the list     *     */    abstract public function build();}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$cfgRelation = PMA_getRelationsParam();if (! $cfgRelation['designerwork']) {    PMD_err_sav();}foreach ($t_x as $key => $value) {    $KEY = empty($IS_AJAX) ? urldecode($key) : $key; // table name decode (post PDF exp/imp)    list($DB,$TAB) = explode(".", $KEY);    PMA_query_as_controluser('DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']) . '                      WHERE `db_name` = \'' . PMA_sqlAddSlashes($DB) . '\'                        AND `table_name` = \'' . PMA_sqlAddSlashes($TAB) . '\'', true, PMA_DBI_QUERY_STORE);    PMA_query_as_controluser('INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']) . '                         (db_name, table_name, x, y, v, h)                  VALUES ('                  . '\'' . PMA_sqlAddSlashes($DB) . '\', '                  . '\'' . PMA_sqlAddSlashes($TAB) . '\', '                  . '\'' . PMA_sqlAddSlashes($t_x[$key]) . '\', '                  . '\'' . PMA_sqlAddSlashes($t_y[$key]) . '\', '                  . '\'' . PMA_sqlAddSlashes($t_v[$key]) . '\', '                  . '\'' . PMA_sqlAddSlashes($t_h[$key]) . '\''                  . ')', true, PMA_DBI_QUERY_STORE);}//----------------------------------------------------------------------------function PMD_err_sav(){    global $die_save_pos; // if this file included    if (! empty($die_save_pos)) {        header("Content-Type: text/xml; charset=utf-8");        header("Cache-Control: no-cache");        die('<root act="save_pos" return="' . __('Error saving coordinates for Designer.') . '"></root>');    }}if (! empty($die_save_pos)) {  header("Content-Type: text/xml; charset=utf-8");  header("Cache-Control: no-cache");?><root act='save_pos' return='<?php echo __('Modifications have been saved'); ?>'></root><?php}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handle field values (possibly uploaded from a file) * * original if-clause checked, whether input was stored in a possible * fields_upload_XX var. Now check, if the field is set. If it is empty or a * malicious file, do not alter fields contents. If an empty or invalid file is * specified, the binary data gets deleter. Maybe a nice new text-variable is * appropriate to document this behaviour. * * security cautions! You could trick the form and submit any file the * webserver has access to for upload to a binary field. Shouldn't be that easy! ;) * * default is to advance to the field-value parsing. Will only be set to * true when a binary file is uploaded, thus bypassing further manipulation of $val. * * note: grab_globals has extracted the fields from _FILES or HTTP_POST_FILES * * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * do not import request variable into global scope */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/File.class.php';$file_to_insert = new PMA_File();$file_to_insert->checkTblChangeForm($key, $rownumber);$possibly_uploaded_val = $file_to_insert->getContent();if ($file_to_insert->isError()) {    $message .= $file_to_insert->getError();}$file_to_insert->cleanUp();if (false !== $possibly_uploaded_val) {    $val = $possibly_uploaded_val;} else {    // f i e l d    v a l u e    i n    t h e    f o r m    if (isset($me_fields_type[$key])) {        $type = $me_fields_type[$key];    } else {        $type = '';    }    // $key contains the md5() of the fieldname    if ($type != 'protected' && $type != 'set' && 0 === strlen($val)) {        // best way to avoid problems in strict mode (works also in non-strict mode)        if (isset($me_auto_increment)  && isset($me_auto_increment[$key])) {            $val = 'NULL';        } else {            $val = "''";        }    } elseif ($type == 'set') {        if (! empty($_REQUEST['fields']['multi_edit'][$rownumber][$key])) {            $val = implode(',', $_REQUEST['fields']['multi_edit'][$rownumber][$key]);            $val = "'" . PMA_sqlAddSlashes($val) . "'";        } else {             $val = "''";        }    } elseif ($type == 'protected') {        // here we are in protected mode (asked in the config)        // so tbl_change has put this special value in the        // fields array, so we do not change the field value        // but we can still handle field upload        // when in UPDATE mode, do not alter field's contents. When in INSERT        // mode, insert empty field because no values were submitted. If protected        // blobs where set, insert original fields content.            if (! empty($prot_row[$me_fields_name[$key]])) {                $val = '0x' . bin2hex($prot_row[$me_fields_name[$key]]);            } else {                $val = '';            }    } elseif ($type == 'bit') {        $val = preg_replace('/[^01]/', '0', $val);        $val = "b'" . PMA_sqlAddSlashes($val) . "'";    } elseif (! (($type == 'datetime' || $type == 'timestamp') && $val == 'CURRENT_TIMESTAMP')) {        $val = "'" . PMA_sqlAddSlashes($val) . "'";    }    // Was the Null checkbox checked for this field?    // (if there is a value, we ignore the Null checkbox: this could    // be possible if Javascript is disabled in the browser)    if (! empty($me_fields_null[$key])     && ($val == "''" || $val == '')) {        $val = 'NULL';    }    // The Null checkbox was unchecked for this field    if (empty($val) && ! empty($me_fields_null_prev[$key]) && ! isset($me_fields_null[$key])) {        $val = "''";    }}  // end else (field value in the form)unset($type);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once 'Export_Relation_Schema.class.php';/** * This Class inherits the XMLwriter class and * helps in developing structure of SVG Schema Export * * @access public * @see http://php.net/manual/en/book.xmlwriter.php */class PMA_SVG extends XMLWriter{    public $title;    public $author;    public $font;    public $fontSize;    /**     * The "PMA_SVG" constructor     *     * Upon instantiation This starts writing the Svg XML document     *     * @return void     * @see XMLWriter::openMemory(),XMLWriter::setIndent(),XMLWriter::startDocument()     */    function __construct()    {        $this->openMemory();        /*         * Set indenting using three spaces,         * so output is formatted         */        $this->setIndent(true);        $this->setIndentString('   ');        /*         * Create the XML document         */        $this->startDocument('1.0', 'UTF-8');        $this->startDtd(            'svg', '-//W3C//DTD SVG 1.1//EN',            'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'        );        $this->endDtd();    }    /**     * Set document title     *     * @param string $value sets the title text     *     * @return void     * @access public     */    function setTitle($value)    {        $this->title = $value;    }    /**     * Set document author     *     * @param string $value sets the author     *     * @return void     * @access public     */    function setAuthor($value)    {        $this->author = $value;    }    /**     * Set document font     *     * @param string $value sets the font e.g Arial, Sans-serif etc     *     * @return void     * @access public     */    function setFont($value)    {        $this->font = $value;    }    /**     * Get document font     *     * @return string returns the font name     * @access public     */    function getFont()    {        return $this->font;    }    /**     * Set document font size     *     * @param string $value sets the font size in pixels     *     * @return void     * @access public     */    function setFontSize($value)    {        $this->fontSize = $value;    }    /**     * Get document font size     *     * @return string returns the font size     * @access public     */    function getFontSize()    {        return $this->fontSize;    }    /**     * Starts Svg Document     *     * svg document starts by first initializing svg tag     * which contains all the attributes and namespace that needed     * to define the svg document     *     * @param integer $width  total width of the Svg document     * @param integer $height total height of the Svg document     *     * @return void     * @access public     *     * @see XMLWriter::startElement(),XMLWriter::writeAttribute()     */    function startSvgDoc($width,$height)    {        $this->startElement('svg');        $this->writeAttribute('width', $width);        $this->writeAttribute('height', $height);        $this->writeAttribute('xmlns', 'http://www.w3.org/2000/svg');        $this->writeAttribute('version', '1.1');    }    /**     * Ends Svg Document     *     * @return void     * @access public     * @see XMLWriter::endElement(),XMLWriter::endDocument()     */    function endSvgDoc()    {        $this->endElement();        $this->endDocument();    }    /**     * output Svg Document     *     * svg document prompted to the user for download     * Svg document saved in .svg extension and can be     * easily changeable by using any svg IDE     *     * @param string $fileName file name     *     * @return void     * @access public     * @see XMLWriter::startElement(),XMLWriter::writeAttribute()     */    function showOutput($fileName)    {        //ob_get_clean();        $output = $this->flush();        PMA_download_header($fileName . '.svg', 'image/svg+xml', strlen($output));        print $output;    }    /**     * Draws Svg elements     *     * SVG has some predefined shape elements like rectangle & text     * and other elements who have x,y co-ordinates are drawn.     * specify their width and height and can give styles too.     *     * @param string  $name   Svg element name     * @param integer $x      The x attr defines the left position of the element     * (e.g. x="0" places the element 0 pixels from the left of the browser window)     * @param integer $y      The y attribute defines the top position of the element     * (e.g. y="0" places the element 0 pixels from the top of the browser window)     * @param integer $width  The width attribute defines the width the element     * @param integer $height The height attribute defines the height the element     * @param string  $text   The text attribute defines the text the element     * @param string  $styles The style attribute defines the style the element     *  styles can be defined like CSS styles     *     * @return void     * @access public     *     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),     * XMLWriter::text(), XMLWriter::endElement()     */    function printElement($name, $x, $y, $width = '', $height = '', $text = '', $styles = '')    {        $this->startElement($name);        $this->writeAttribute('width', $width);        $this->writeAttribute('height', $height);        $this->writeAttribute('x', $x);        $this->writeAttribute('y', $y);        $this->writeAttribute('style', $styles);        if (isset($text)) {            $this->writeAttribute('font-family', $this->font);            $this->writeAttribute('font-size', $this->fontSize);            $this->text($text);        }        $this->endElement();    }    /**     * Draws Svg Line element     *     * Svg line element is drawn for connecting the tables.     * arrows are also drawn by specify its start and ending     * co-ordinates     *     * @param string  $name   Svg element name i.e line     * @param integer $x1     Defines the start of the line on the x-axis     * @param integer $y1     Defines the start of the line on the y-axis     * @param integer $x2     Defines the end of the line on the x-axis     * @param integer $y2     Defines the end of the line on the y-axis     * @param string  $styles The style attribute defines the style the element     *                        styles can be defined like CSS styles     *     * @return void     * @access public     *     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),     * XMLWriter::endElement()     */    function printElementLine($name,$x1,$y1,$x2,$y2,$styles)    {        $this->startElement($name);        $this->writeAttribute('x1', $x1);        $this->writeAttribute('y1', $y1);        $this->writeAttribute('x2', $x2);        $this->writeAttribute('y2', $y2);        $this->writeAttribute('style', $styles);        $this->endElement();    }    /**     * get width of string/text     *     * Svg text element width is calcualted depending on font name     * and font size. It is very important to know the width of text     * because rectangle is drawn around it.     *     * This is a bit hardcore method. I didn't found any other than this.     *     * @param string  $text     string that width will be calculated     * @param integer $font     name of the font like Arial,sans-serif etc     * @param integer $fontSize size of font     *     * @return integer width of the text     * @access public     */    function getStringWidth($text,$font,$fontSize)    {        /*         * Start by counting the width, giving each character a modifying value         */        $count = 0;        $count = $count + ((strlen($text) - strlen(str_replace(array("i", "j", "l"), "", $text))) * 0.23);//ijl        $count = $count + ((strlen($text) - strlen(str_replace(array("f"), "", $text))) * 0.27);//f        $count = $count + ((strlen($text) - strlen(str_replace(array("t", "I"), "", $text))) * 0.28);//tI        $count = $count + ((strlen($text) - strlen(str_replace(array("r"), "", $text))) * 0.34);//r        $count = $count + ((strlen($text) - strlen(str_replace(array("1"), "", $text))) * 0.49);//1        $count = $count + ((strlen($text) - strlen(str_replace(array("c", "k", "s", "v", "x", "y", "z", "J"), "", $text))) * 0.5);//cksvxyzJ        $count = $count + ((strlen($text) - strlen(str_replace(array("a", "b", "d", "e", "g", "h", "n", "o", "p", "q", "u", "L", "0", "2", "3", "4", "5", "6", "7", "8", "9"), "", $text))) * 0.56);//abdeghnopquL023456789        $count = $count + ((strlen($text) - strlen(str_replace(array("F", "T", "Z"), "", $text))) * 0.61);//FTZ        $count = $count + ((strlen($text) - strlen(str_replace(array("A", "B", "E", "K", "P", "S", "V", "X", "Y"), "", $text))) * 0.67);//ABEKPSVXY        $count = $count + ((strlen($text) - strlen(str_replace(array("w", "C", "D", "H", "N", "R", "U"), "", $text))) * 0.73);//wCDHNRU        $count = $count + ((strlen($text) - strlen(str_replace(array("G", "O", "Q"), "", $text))) * 0.78);//GOQ        $count = $count + ((strlen($text) - strlen(str_replace(array("m", "M"), "", $text))) * 0.84);//mM        $count = $count + ((strlen($text) - strlen(str_replace("W", "", $text))) * .95);//W        $count = $count + ((strlen($text) - strlen(str_replace(" ", "", $text))) * .28);//" "        $text  = str_replace(" ", "", $text);//remove the " "'s        $count = $count + (strlen(preg_replace("/[a-z0-9]/i", "", $text)) * 0.3); //all other chrs        $modifier = 1;        $font = strtolower($font);        switch($font){        /*         * no modifier for arial and sans-serif         */        case 'arial':        case 'sans-serif':            break;        /*         * .92 modifer for time, serif, brushscriptstd, and californian fb         */        case 'times':        case 'serif':        case 'brushscriptstd':        case 'californian fb':            $modifier = .92;            break;        /*         * 1.23 modifier for broadway         */        case 'broadway':            $modifier = 1.23;            break;        }        $textWidth = $count*$fontSize;        return ceil($textWidth*$modifier);    }}/** * Table preferences/statistics * * This class preserves the table co-ordinates,fields * and helps in drawing/generating the Tables in SVG XML document. * * @name Table_Stats * @see PMA_SVG */class Table_Stats{    /**     * Defines properties     */    private $_tableName;    private $_showInfo = false;    public $width = 0;    public $height;    public $fields = array();    public $heightCell = 0;    public $currentCell = 0;    public $x, $y;    public $primary = array();    /**     * The "Table_Stats" constructor     *     * @param string  $tableName        The table name     * @param string  $font             Font face     * @param integer $fontSize         The font size     * @param integer $pageNumber       Page number     * @param integer &$same_wide_width The max. with among tables     * @param boolean $showKeys         Whether to display keys or not     * @param boolean $showInfo         Whether to display table position or not     *     * @global object    The current SVG image document     * @global integer   The current page number (from the     *                   $cfg['Servers'][$i]['table_coords'] table)     * @global array     The relations settings     * @global string    The current db name     *     * @access private     *     * @see PMA_SVG, Table_Stats::Table_Stats_setWidth,     *       Table_Stats::Table_Stats_setHeight     */    function __construct($tableName, $font, $fontSize, $pageNumber,    &$same_wide_width, $showKeys = false, $showInfo = false)    {        global $svg, $cfgRelation, $db;        $this->_tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $svg->dieSchema(                $pageNumber,                "SVG",                sprintf(__('The %s table doesn\'t exist!'), $tableName)            );        }        /*        * load fields        * check to see if it will load all fields or only the foreign keys        */        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->_tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $this->_showInfo = $showInfo;        // height and width        $this->_setHeightTable($fontSize);        // setWidth must me after setHeight, because title        // can include table height which changes table width        $this->_setWidthTable($font, $fontSize);        if ($same_wide_width < $this->width) {            $same_wide_width = $this->width;        }        // x and y        $sql = 'SELECT x, y FROM '         . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'         . PMA_backquote($cfgRelation['table_coords'])         . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''         . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''         . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $svg->dieSchema(                $pageNumber,                "SVG",                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        // displayfield        $this->displayfield = PMA_getDisplayField($db, $tableName);        // index        $result = PMA_DBI_query(            'SHOW INDEX FROM ' . PMA_backquote($tableName) . ';',            null,            PMA_DBI_QUERY_STORE        );        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }    }    /**     * Returns title of the current table,     * title can have the dimensions/co-ordinates of the table     *     * @access private     */    private function _getTitle()    {        return ($this->_showInfo            ? sprintf('%.0f', $this->width) . 'x' . sprintf('%.0f', $this->heightCell)            : ''        ) . ' ' . $this->_tableName;    }    /**     * Sets the width of the table     *     * @param string  $font     The font size     * @param integer $fontSize The font size     *     * @global object    The current SVG image document     *     * @return nothing     * @access private     *     * @see PMA_SVG     */    private function _setWidthTable($font,$fontSize)    {        global $svg;        foreach ($this->fields as $field) {            $this->width = max(                $this->width,                $svg->getStringWidth($field, $font, $fontSize)            );        }        $this->width += $svg->getStringWidth('  ', $font, $fontSize);        /*         * it is unknown what value must be added, because         * table title is affected by the tabe width value         */        while ($this->width < $svg->getStringWidth($this->_getTitle(), $font, $fontSize)) {            $this->width += 7;        }    }    /**     * Sets the height of the table     *     * @param integer $fontSize font size     *     * @return nothing     * @access private     */    function _setHeightTable($fontSize)    {        $this->heightCell = $fontSize + 4;        $this->height = (count($this->fields) + 1) * $this->heightCell;    }    /**     * draw the table     *     * @param boolean $showColor Whether to display color     *     * @global object The current SVG image document     *     * @access public     * @return nothing     *     * @see PMA_SVG,PMA_SVG::printElement     */    public function tableDraw($showColor)    {        global $svg;        //echo $this->_tableName.'<br />';        $svg->printElement(            'rect', $this->x, $this->y, $this->width,            $this->heightCell, null, 'fill:red;stroke:black;'        );        $svg->printElement(            'text', $this->x + 5, $this->y+ 14, $this->width, $this->heightCell,            $this->_getTitle(), 'fill:none;stroke:black;'        );        foreach ($this->fields as $field) {            $this->currentCell += $this->heightCell;            $showColor    = 'none';            if ($showColor) {                if (in_array($field, $this->primary)) {                    $showColor = '#0c0';                }                if ($field == $this->displayfield) {                    $showColor = 'none';                }            }            $svg->printElement(                'rect', $this->x, $this->y + $this->currentCell, $this->width,                $this->heightCell, null, 'fill:'.$showColor.';stroke:black;'            );            $svg->printElement(                'text', $this->x + 5, $this->y + 14 + $this->currentCell,                $this->width, $this->heightCell, $field, 'fill:none;stroke:black;'            );        }    }}/** * Relation preferences/statistics * * This class fetches the table master and foreign fields positions * and helps in generating the Table references and then connects * master table's master field to foreign table's foreign key * in SVG XML document. * * @name Relation_Stats * @see PMA_SVG::printElementLine */class Relation_Stats{    /**     * Defines properties     */    public $xSrc, $ySrc;    public $srcDir ;    public $destDir;    public $xDest, $yDest;    public $wTick = 10;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @return nothing     *     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        /*        * [0] is x-left        * [1] is x-right        * [2] is y        */        $src_left   = $src_pos[0] - $this->wTick;        $src_right  = $src_pos[1] + $this->wTick;        $dest_left  = $dest_pos[0] - $this->wTick;        $dest_right = $dest_pos[1] + $this->wTick;        $d1 = abs($src_left - $dest_left);        $d2 = abs($src_right - $dest_left);        $d3 = abs($src_left - $dest_right);        $d4 = abs($src_right - $dest_right);        $d  = min($d1, $d2, $d3, $d4);        if ($d == $d1) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d2) {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d3) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        } else {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        }        $this->ySrc   = $src_pos[2];        $this->yDest = $dest_pos[2];    }    /**     * Gets arrows coordinates     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Arrows coordinates     * @access private     */    function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // x_left, x_right, y        return array(            $table->x,            $table->x + $table->width,            $table->y + ($pos + 1.5) * $table->heightCell        );    }    /**     * draws relation links and arrows shows foreign key relations     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @global object The current SVG image document     *     * @return nothing     * @access public     *     * @see PMA_SVG     */    public function relationDraw($changeColor)    {        global $svg;        if ($changeColor) {            $listOfColors = array(                'red',                'grey',                'black',                'yellow',                'green',                'cyan',            '    orange'            );            shuffle($listOfColors);            $color =  $listOfColors[0];        } else {            $color = 'black';        }        $svg->printElementLine(            'line', $this->xSrc, $this->ySrc,            $this->xSrc + $this->srcDir * $this->wTick, $this->ySrc,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick,            $this->yDest, $this->xDest, $this->yDest,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick, $this->ySrc,            $this->xDest + $this->destDir * $this->wTick, $this->yDest,            'fill:' . $color . ';stroke:' . $color . ';stroke-width:1;'        );        $root2 = 2 * sqrt(2);        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick * 0.75, $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc + $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick * 0.75, $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc - $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick / 2, $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest + $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick / 2, $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest - $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );    }}/** end of the "Relation_Stats" class*//** * Svg Relation Schema Class * * Purpose of this class is to generate the SVG XML Document because * SVG defines the graphics in XML format which is used for representing * the database diagrams as vector image. This class actually helps *  in preparing SVG XML format. * * SVG XML is generated by using XMLWriter php extension and this class * inherits Export_Relation_Schema class has common functionality added * to this class * * @name Svg_Relation_Schema */class PMA_Svg_Relation_Schema extends PMA_Export_Relation_Schema{    private $tables = array();    private $_relations = array();    private $_xMax = 0;    private $_yMax = 0;    private $scale;    private $_xMin = 100000;    private $_yMin = 100000;    private $t_marg = 10;    private $b_marg = 10;    private $l_marg = 10;    private $r_marg = 10;    private $_tablewidth;    /**     * The "PMA_Svg_Relation_Schema" constructor     *     * Upon instantiation This starts writing the SVG XML document     * user will be prompted for download as .svg extension     *     * @return void     * @see PMA_SVG     */    function __construct()    {        global $svg,$db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowColor(isset($_POST['show_color']));        $this->setShowKeys(isset($_POST['show_keys']));        $this->setTableDimension(isset($_POST['show_table_dimension']));        $this->setAllTableSameWidth(isset($_POST['all_table_same_wide']));        $this->setExportType($_POST['export_type']);        $svg = new PMA_SVG();        $svg->setTitle(            sprintf(                __('Schema of the %s database - Page %s'),                $db,                $this->pageNumber            )        );        $svg->SetAuthor('phpMyAdmin ' . PMA_VERSION);        $svg->setFont('Arial');        $svg->setFontSize('16px');        $svg->startSvgDoc('1000px', '1000px');        $alltables = $this->getAllTables($db, $this->pageNumber);        foreach ($alltables AS $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats(                    $table, $svg->getFont(), $svg->getFontSize(), $this->pageNumber,                    $this->_tablewidth, $this->showKeys, $this->tableDimension                );            }            if ($this->sameWide) {                $this->tables[$table]->width = $this->_tablewidth;            }            $this->_setMinMax($this->tables[$table]);        }        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    /* put the foreign table on the schema only if selected                    * by the user                    * (do not use array_search() because we would have to                    * to do a === false and this is not PHP3 compatible)                    */                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table, $svg->getFont(), $svg->getFontSize(),                            $master_field, $rel['foreign_table'],                            $rel['foreign_field'], $this->tableDimension                        );                    }                }            }        }        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $this->_drawTables($this->showColor);        $svg->endSvgDoc();        $svg->showOutput($db.'-'.$this->pageNumber);        exit();    }    /**     * Sets X and Y minimum and maximum for a table cell     *     * @param string $table The table name     *     * @return nothing     * @access private     */    private function _setMinMax($table)    {        $this->_xMax = max($this->_xMax, $table->x + $table->width);        $this->_yMax = max($this->_yMax, $table->y + $table->height);        $this->_xMin = min($this->_xMin, $table->x);        $this->_yMin = min($this->_yMin, $table->y);    }    /**     * Defines relation objects     *     * @param string  $masterTable  The master table name     * @param string  $font         The font face     * @param int     $fontSize     Font size     * @param string  $masterField  The relation field in the master table     * @param string  $foreignTable The foreign table name     * @param string  $foreignField The relation field in the foreign table     * @param boolean $showInfo     Whether to display table position or not     *     * @access private     * @return nothing     *     * @see _setMinMax,Table_Stats::__construct(),Relation_Stats::__construct()     */    private function _addRelation($masterTable,$font,$fontSize, $masterField,    $foreignTable, $foreignField, $showInfo)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );            $this->_setMinMax($this->tables[$masterTable]);        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );            $this->_setMinMax($this->tables[$foreignTable]);        }        $this->_relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws relation arrows and lines     * connects master table's master field to     * foreign table's forein field     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @return nothing     * @access private     *     * @see Relation_Stats::relationDraw()     */    private function _drawRelations($changeColor)    {        foreach ($this->_relations as $relation) {            $relation->relationDraw($changeColor);        }    }    /**     * Draws tables     *     * @param boolean $changeColor Whether to show color for primary fields or not     *     * @return nothing     * @access private     *     * @see Table_Stats::Table_Stats_tableDraw()     */    private function _drawTables($changeColor)    {        foreach ($this->tables as $table) {            $table->tableDraw($changeColor);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * the MyISAM storage engine * @package PhpMyAdmin-Engines */class PMA_StorageEngine_myisam extends PMA_StorageEngine{    /**     * returns array with variable names dedicated to MyISAM storage engine     *     * @return  array   variable names     */    function getVariables()    {        return array(            'myisam_data_pointer_size' => array(                'title' => __('Data pointer size'),                'desc'  => __('The default pointer size in bytes, to be used by CREATE TABLE for MyISAM tables when no MAX_ROWS option is specified.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'myisam_recover_options' => array(                'title' => __('Automatic recovery mode'),                'desc'  => __('The mode for automatic recovery of crashed MyISAM tables, as set via the --myisam-recover server startup option.'),            ),            'myisam_max_sort_file_size' => array(                'title' => __('Maximum size for temporary sort files'),                'desc'  => __('The maximum size of the temporary file MySQL is allowed to use while re-creating a MyISAM index (during REPAIR TABLE, ALTER TABLE, or LOAD DATA INFILE).'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'myisam_max_extra_sort_file_size' => array(                'title' => __('Maximum size for temporary files on index creation'),                'desc'  => __('If the temporary file used for fast MyISAM index creation would be larger than using the key cache by the amount specified here, prefer the key cache method.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'myisam_repair_threads' => array(                'title' => __('Repair threads'),                'desc'  => __('If this value is greater than 1, MyISAM table indexes are created in parallel (each index in its own thread) during the repair by sorting process.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'myisam_sort_buffer_size' => array(                'title' => __('Sort buffer size'),                'desc'  => __('The buffer that is allocated when sorting MyISAM indexes during a REPAIR TABLE or when creating indexes with CREATE INDEX or ALTER TABLE.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'myisam_stats_method' => array(            ),            'delay_key_write' => array(            ),            'bulk_insert_buffer_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'skip_external_locking' => array(            ),        );    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__longToIpv4_info(){    return array(        'info' => __('Converts an (IPv4) Internet network address into a string in Internet standard dotted format.'),        );}/** * returns IPv4 address * * @see http://php.net/long2ip */function PMA_transformation_text_plain__longToIpv4($buffer, $options = array(), $meta = ''){    if ($buffer < 0 || $buffer > 4294967295) {        return $buffer;    }    return long2ip($buffer);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Alter one or more table columns * * linked from table_structure, uses libraries/tbl_properties.inc.php to display * form and handles this form data * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Gets tables informations */require_once './libraries/tbl_common.php';require_once './libraries/tbl_info.inc.php';$active_page = 'tbl_structure.php';/** * Defines the url to return to in case of error in a sql statement */$err_url = 'tbl_structure.php?' . PMA_generate_common_url($db, $table);/** * Modifications have been submitted -> updates the table */$abort = false;if (isset($_REQUEST['do_save_data'])) {    $field_cnt = count($_REQUEST['field_orig']);    $key_fields = array();    $changes = array();    for ($i = 0; $i < $field_cnt; $i++) {        $changes[] = 'CHANGE ' . PMA_Table::generateAlter(            $_REQUEST['field_orig'][$i],            $_REQUEST['field_name'][$i],            $_REQUEST['field_type'][$i],            $_REQUEST['field_length'][$i],            $_REQUEST['field_attribute'][$i],            isset($_REQUEST['field_collation'][$i])                ? $_REQUEST['field_collation'][$i]                : '',            isset($_REQUEST['field_null'][$i])                ? $_REQUEST['field_null'][$i]                : 'NOT NULL',            $_REQUEST['field_default_type'][$i],            $_REQUEST['field_default_value'][$i],            isset($_REQUEST['field_extra'][$i])                ? $_REQUEST['field_extra'][$i]                : false,            isset($_REQUEST['field_comments'][$i])                ? $_REQUEST['field_comments'][$i]                : '',            $key_fields,            $i,            $_REQUEST['field_default_orig'][$i]        );    } // end for    // Builds the primary keys statements and updates the table    $key_query = '';    /**     * this is a little bit more complex     *     * @todo if someone selects A_I when altering a column we need to check:     *  - no other column with A_I     *  - the column has an index, if not create one     *    if (count($key_fields)) {        $fields = array();        foreach ($key_fields as $each_field) {            if (isset($_REQUEST['field_name'][$each_field]) && strlen($_REQUEST['field_name'][$each_field])) {                $fields[] = PMA_backquote($_REQUEST['field_name'][$each_field]);            }        } // end for        $key_query = ', ADD KEY (' . implode(', ', $fields) . ') ';    }     */    // To allow replication, we first select the db to use and then run queries    // on this db.    PMA_DBI_select_db($db) or PMA_mysqlDie(PMA_DBI_getError(), 'USE ' . PMA_backquote($db) . ';', '', $err_url);    $sql_query = 'ALTER TABLE ' . PMA_backquote($table) . ' ' . implode(', ', $changes) . $key_query;    $result    = PMA_DBI_try_query($sql_query);    if ($result !== false) {        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        $btnDrop = 'Fake';        /**         * If comments were sent, enable relation stuff         */        include_once './libraries/transformations.lib.php';        // updaet field names in relation        if (isset($_REQUEST['field_orig']) && is_array($_REQUEST['field_orig'])) {            foreach ($_REQUEST['field_orig'] as $fieldindex => $fieldcontent) {                if ($_REQUEST['field_name'][$fieldindex] != $fieldcontent) {                    PMA_REL_renameField($db, $table, $fieldcontent,                        $_REQUEST['field_name'][$fieldindex]);                }            }        }        // update mime types        if (isset($_REQUEST['field_mimetype'])         && is_array($_REQUEST['field_mimetype'])         && $cfg['BrowseMIME']) {            foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {                if (isset($_REQUEST['field_name'][$fieldindex])                 && strlen($_REQUEST['field_name'][$fieldindex])) {                    PMA_setMIME($db, $table, $_REQUEST['field_name'][$fieldindex],                        $mimetype,                        $_REQUEST['field_transformation'][$fieldindex],                        $_REQUEST['field_transformation_options'][$fieldindex]);                }            }        }        if ( $_REQUEST['ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';    } else {        PMA_mysqlDie('', '', '', $err_url, false);        // An error happened while inserting/updating a table definition.        // to prevent total loss of that data, we embed the form once again.        // The variable $regenerate will be used to restore data in libraries/tbl_properties.inc.php        if (isset($_REQUEST['orig_field'])) {            $_REQUEST['field'] = $_REQUEST['orig_field'];        }        $regenerate = true;    }}/** * No modifications yet required -> displays the table fields * * $selected comes from multi_submits.inc.php */if ($abort == false) {    if ($_REQUEST['ajax_request'] != true) {        include_once './libraries/tbl_links.inc.php';    }    if (! isset($selected)) {        PMA_checkParameters(array('field'));        $selected[]   = $_REQUEST['field'];        $selected_cnt = 1;    } else { // from a multiple submit        $selected_cnt = count($selected);    }    /**     * @todo optimize in case of multiple fields to modify     */    for ($i = 0; $i < $selected_cnt; $i++) {        $fields_meta[] = PMA_DBI_get_columns($db, $table, $selected[$i], true);    }    $num_fields  = count($fields_meta);    $action      = 'tbl_alter.php';    // Get more complete field information.    // For now, this is done to obtain MySQL 4.1.2+ new TIMESTAMP options    // and to know when there is an empty DEFAULT value.    // Later, if the analyser returns more information, it    // could be executed to replace the info given by SHOW FULL COLUMNS FROM.    /**     * @todo put this code into a require()     * or maybe make it part of PMA_DBI_get_columns();     */    // We also need this to correctly learn if a TIMESTAMP is NOT NULL, since    // SHOW FULL COLUMNS says NULL and SHOW CREATE TABLE says NOT NULL (tested    // in MySQL 4.0.25).    $show_create_table = PMA_DBI_fetch_value('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table), 0, 1);    $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));    unset($show_create_table);    /**     * Form for changing properties.     */    include './libraries/tbl_properties.inc.php';}/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/*   Copyright (c) 2003, 2005, 2006, 2009 Danilo Segan <danilo@kvota.net>.   This file is part of PHP-gettext.   PHP-gettext is free software; you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation; either version 2 of the License, or   (at your option) any later version.   PHP-gettext is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   GNU General Public License for more details.   You should have received a copy of the GNU General Public License   along with PHP-gettext; if not, write to the Free Software   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA*/  // Simple class to wrap file streams, string streams, etc.  // seek is essential, and it should be byte streamclass StreamReader {  // should return a string [FIXME: perhaps return array of bytes?]  function read($bytes) {    return false;  }  // should return new position  function seekto($position) {    return false;  }  // returns current position  function currentpos() {    return false;  }  // returns length of entire stream (limit for seekto()s)  function length() {    return false;  }};class StringReader {  var $_pos;  var $_str;  function StringReader($str='') {    $this->_str = $str;    $this->_pos = 0;  }  function read($bytes) {    $data = substr($this->_str, $this->_pos, $bytes);    $this->_pos += $bytes;    if (strlen($this->_str)<$this->_pos)      $this->_pos = strlen($this->_str);    return $data;  }  function seekto($pos) {    $this->_pos = $pos;    if (strlen($this->_str)<$this->_pos)      $this->_pos = strlen($this->_str);    return $this->_pos;  }  function currentpos() {    return $this->_pos;  }  function length() {    return strlen($this->_str);  }};class FileReader {  var $_pos;  var $_fd;  var $_length;  function FileReader($filename) {    if (file_exists($filename)) {      $this->_length=filesize($filename);      $this->_pos = 0;      $this->_fd = fopen($filename,'rb');      if (!$this->_fd) {        $this->error = 3; // Cannot read file, probably permissions        return false;      }    } else {      $this->error = 2; // File doesn't exist      return false;    }  }  function read($bytes) {    if ($bytes) {      fseek($this->_fd, $this->_pos);      // PHP 5.1.1 does not read more than 8192 bytes in one fread()      // the discussions at PHP Bugs suggest it's the intended behaviour      $data = '';      while ($bytes > 0) {        $chunk  = fread($this->_fd, $bytes);        $data  .= $chunk;        $bytes -= strlen($chunk);      }      $this->_pos = ftell($this->_fd);      return $data;    } else return '';  }  function seekto($pos) {    fseek($this->_fd, $pos);    $this->_pos = ftell($this->_fd);    return $this->_pos;  }  function currentpos() {    return $this->_pos;  }  function length() {    return $this->_length;  }  function close() {    fclose($this->_fd);  }};// Preloads entire file in memory first, then creates a StringReader// over it (it assumes knowledge of StringReader internals)class CachedFileReader extends StringReader {  function CachedFileReader($filename) {    if (file_exists($filename)) {      $length=filesize($filename);      $fd = fopen($filename,'rb');      if (!$fd) {        $this->error = 3; // Cannot read file, probably permissions        return false;      }      $this->_str = fread($fd, $length);      fclose($fd);    } else {      $this->error = 2; // File doesn't exist      return false;    }  }};?>
<?php/** * Generates the SVG needed for the plot * * @package PhpMyAdmin */require_once 'pma_svg_data_point.php';class PMA_Scatter_Plot{    /**     * @var array   Raw data for the plot     */    private $_data;    /**     * @var array   Data points of the plot     */    private $_dataPoints;    /**     * @var array   Set of default settigs values are here.     */    private $_settings = array(        // Array of colors to be used for plot.        'colors' => array(            '#BCE02E',            '#E0642E',            '#E0D62E',            '#2E97E0',            '#B02EE0',            '#E02E75',            '#5CE02E',            '#E0B02E',            '#000000',            '#0022E0',            '#726CB1',            '#481A36',            '#BAC658',            '#127224',            '#825119',            '#238C74',            '#4C489B',            '#87C9BF',        ),        // Plot background color.        'bgColor' => '#84AD83',        // The width of the plot.        'width' => 520,         // The height of the plot.        'height' => 325,        // Default X Axis label. If empty, label will be taken from the data.        'xLabel' => '',        // Default Y Axis label. If empty, label will be taken from the data.        'yLabel' => '',        // Data point label. If empty, label will be taken from the data.        'dataLabel' => '',    );    /**     * @var array   Options that the user has specified.     */    private $_userSpecifiedSettings = null;    /**     * Returns the settings array     *     * @return the settings array.     */    public function getSettings()    {        return $this->_settings;    }    /**     * Returns the data array     *     * @return the data array.     */    public function getData()    {        return $this->_data;    }    /**     * Constructor. Stores user specified options.     *     * @param array $data    Data for the visualization     * @param array $options Users specified options     */    public function __construct($data, $options)    {        $this->_userSpecifiedSettings = $options;        $this->_data = $data;    }    /**     * All the variable initialization, options handling has to be done here.     */    protected function init()    {        $this->_handleOptions();    }    /**     * A function which handles passed parameters. Useful if desired     * chart needs to be a little bit different from the default one.     */    private function _handleOptions()    {        $this->_dataPoints = array();        if (! is_null($this->_userSpecifiedSettings)) {            foreach (array_keys($this->_userSpecifiedSettings) as $key) {                $this->_settings[$key] = $this->_userSpecifiedSettings[$key];            }        }        if ($this->_settings['dataLabel'] == '') {            $labels = array_keys($this->_data[0]);            $this->_settings['dataLabel'] = $labels[0];        }    }    /**     * Generate the visualization in SVG format.     *     * @return the generated image resource     */    private function _svg()    {        $this->init();        $output   = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>' . "\n";        $output  .= '<svg version="1.1" xmlns:svg="http://www.w3.org/2000/svg"'            . ' xmlns="http://www.w3.org/2000/svg" width="' . $this->_settings['width'] . '"'            . ' height="' . $this->_settings['height'] . '">';        $output .= '<g id="groupPanel">';        $output .= '<defs>            <path id="myTextPath1"                    d="M10,190 L10,50"/>                    <path id="myTextPath2"                    d="M250,10 L370,10"/>                    </defs>';        $output .= '<text x="6" y="190"  style="font-family: Arial; font-size  : 54; stroke:none; fill:#000000;" >                    <textPath xlink:href="#myTextPath1" >';        $output .= $this->_settings['yLabel'];        $output .= '</textPath>                   </text>';        $output .= '<text x="250" y="10"  style="font-family: Arial; font-size  : 54; stroke:none; fill:#000000;" >                    <textPath xlink:href="#myTextPath2" >';        $output .= $this->_settings['xLabel'];        $output .= '</textPath>                   </text>';        $scale_data = $this->_scaleDataSet($this->_data, $this->_settings['xLabel'], $this->_settings['yLabel']);        $output .= $this->_prepareDataSet($this->_data, 0, $scale_data, $this->_settings['dataLabel']);        $output .= '</g>';        $output .= '</svg>';        return $output;    }    /**     * Get the visualization as a SVG.     *     * @return the visualization as a SVG     */    public function asSVG()    {        $output = $this->_svg();        return $output;    }    /**     * Calculates the scale, horizontal and vertical offset that should be used.     *     * @param array $data Row data     *     * @return an array containing the scale, x and y offsets     */    private function _scaleDataSet($data, $xField, $yField)    {        // Currently assuming only numeric fields are selected        $coordinates = array();        foreach ($data as $row) {            $coordinates[0][] = $row[$xField];            $coordinates[1][] = $row[$yField];        }        for ($i = 0 ; $i < 2 ; $i++) {            $maxC = ($i == 0) ? 500 : 320;            if ( !is_numeric($coordinates[$i][0])) {                $uniqueC = array_unique($coordinates[$i]);                $countC = count(array_unique($coordinates[$i]));                $map = $tmp = array();                foreach ($uniqueC as $uc) {                    $tmp[] = $uc;                }                for ($j = 0 ; $j < $countC ; $j++) {                    $map[$tmp[$j]] = 20 + $j * $maxC / $countC;                }                for ($j = 0 ; $j < count($coordinates[$i]) ; $j++) {                     $coordinates[$i][$j] = $map[$coordinates[$i][$j]];                }            } else if (is_numeric($coordinates[$i][0])) {                $maxC = max($coordinates[$i]);                for ($j = 0 ; $j < count($coordinates[$i]) ; $j++) {                    if ($i == 0) {                         $coordinates[$i][$j] = 20 + 500 * $coordinates[$i][$j] / $maxC;                    } else {                         $coordinates[$i][$j] = 20 + 320 * (1 - $coordinates[$i][$j] / $maxC);                    }                }            }        }        return $coordinates;    }    /**     * Prepares and return the dataset as needed by the visualization.     *     * @param array  $data         Raw data     * @param int    $color_number Start index to the color array     * @param array  $scale_data   Data related to scaling     * @param string $label        Label for the data points     * @return string the formatted array of data.     */    private function _prepareDataSet($data, $color_number, $scale_data, $label)    {        $result = '';        // loop through the rows        for ($i = 0 ; $i < count($data) ; $i++) {            $index = $color_number % sizeof($this->_settings['colors']);            $data_element = new PMA_SVG_Data_Point($scale_data[0][$i], $scale_data[1][$i], $data[$i][$label], $data[$i]);            $options = array('color' => $this->_settings['colors'][$index], 'id' => $i);            $this->_dataPoints[] = $data_element;            $result .= $data_element->prepareRowAsSVG($options);            $color_number++;        }        return $result;    }}?>
<?php/** * Handles the visualization of GIS POLYGON objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Polygon extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesn't have an inner ring, use polygon itself        if (strpos($polygon, "),(") === false) {            $ring = $polygon;        } else {            // Seperate outer ring and use it to determin min-max            $parts = explode("),(", $polygon);            $ring = $parts[0];        }        return $this->setMinMax($ring, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $fill_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, $scale_data, true);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $points_arr = $this->extractPoints($outer, $scale_data, true);            foreach ($inner as $inner_poly) {                $points_arr = array_merge(                    $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                );            }        }        // draw polygon        imagefilledpolygon($image, $points_arr, sizeof($points_arr) / 2, $color);        // print label if applicable        if (isset($label) && trim($label) != '') {            imagestring($image, 1, $points_arr[2], $points_arr[3], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $fill_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = array($red, $green, $blue);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, $scale_data, true);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $points_arr = $this->extractPoints($outer, $scale_data, true);            foreach ($inner as $inner_poly) {                $points_arr = array_merge(                    $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                );            }        }        // draw polygon        $pdf->Polygon($points_arr, 'F*', array(), $color, true);        // print label if applicable        if (isset($label) && trim($label) != '') {            $pdf->SetXY($points_arr[2], $points_arr[3]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $fill_color, $scale_data)    {        $polygon_options = array(            'name'        => $label,            'id'          => $label . rand(),            'class'       => 'polygon vector',            'stroke'      => 'black',            'stroke-width'=> 0.5,            'fill'        => $fill_color,            'fill-rule'   => 'evenodd',            'fill-opacity'=> 0.8,        );        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        $row = '<path d="';        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $row .= $this->_drawPath($polygon, $scale_data);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $row .= $this->_drawPath($outer, $scale_data);            foreach ($inner as $inner_poly) {                $row .= $this->_drawPath($inner_poly, $scale_data);            }        }        $row .= '"';        foreach ($polygon_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS POLYGON object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $fill_color, $scale_data)    {        $style_options = array(            'strokeColor' => '#000000',            'strokeWidth' => 0.5,            'fillColor'   => $fill_color,            'fillOpacity' => 0.8,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $row = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        $row .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector(';        $row .= $this->addPointsForOpenLayersPolygon($polygon, $srid);        $row .= 'null, ' . json_encode($style_options) . '));';        return $row;    }    /**     * Draws a ring of the polygon using SVG path element.     *     * @param string $polygon    The ring     * @param array  $scale_data Array containing data related to scaling     *     * @return the code to draw the ring     */    private function _drawPath($polygon, $scale_data)    {        $points_arr = $this->extractPoints($polygon, $scale_data);        $row = ' M ' . $points_arr[0][0] . ', ' . $points_arr[0][1];        $other_points = array_slice($points_arr, 1, count($points_arr) - 2);        foreach ($other_points as $point) {            $row .= ' L ' . $point[0] . ', ' . $point[1];        }        $row .= ' Z ';        return $row;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_lines = isset($gis_data[$index]['POLYGON']['no_of_lines'])            ? $gis_data[$index]['POLYGON']['no_of_lines'] : 1;        if ($no_of_lines < 1) {            $no_of_lines = 1;        }        $wkt = 'POLYGON(';        for ($i = 0; $i < $no_of_lines; $i++) {            $no_of_points = isset($gis_data[$index]['POLYGON'][$i]['no_of_points'])                ? $gis_data[$index]['POLYGON'][$i]['no_of_points'] : 4;            if ($no_of_points < 4) {                $no_of_points = 4;            }            $wkt .= '(';            for ($j = 0; $j < $no_of_points; $j++) {                $wkt .= ((isset($gis_data[$index]['POLYGON'][$i][$j]['x'])                    && trim($gis_data[$index]['POLYGON'][$i][$j]['x']) != '')                    ? $gis_data[$index]['POLYGON'][$i][$j]['x'] : $empty)                    . ' ' . ((isset($gis_data[$index]['POLYGON'][$i][$j]['y'])                    && trim($gis_data[$index]['POLYGON'][$i][$j]['y']) != '')                    ? $gis_data[$index]['POLYGON'][$i][$j]['y'] : $empty) .',';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Calculates the area of a closed simple polygon.     *     * @param array $ring array of points forming the ring     *     * @return the area of a closed simple polygon.     */    public static function area($ring)    {        $no_of_points = count($ring);        // If the last point is same as the first point ignore it        $last = count($ring) - 1;        if (($ring[0]['x'] == $ring[$last]['x'])            && ($ring[0]['y'] == $ring[$last]['y'])        ) {            $no_of_points--;        }        //         _n-1        // A = _1_ \    (X(i) * Y(i+1)) - (Y(i) * X(i+1))        //      2  /__        //         i=0        $area = 0;        for ($i = 0; $i < $no_of_points; $i++) {            $j = ($i + 1) % $no_of_points;            $area += $ring[$i]['x'] * $ring[$j]['y'];            $area -= $ring[$i]['y'] * $ring[$j]['x'];        }        $area /= 2.0;        return $area;    }    /**     * Determines whether a set of points represents an outer ring.     * If points are in clockwise orientation then, they form an outer ring.     *     * @param array $ring array of points forming the ring     *     * @return whether a set of points represents an outer ring.     */    public static function isOuterRing($ring)    {        // If area is negative then it's in clockwise orientation,        // i.e. it's an outer ring        if (PMA_GIS_Polygon::area($ring) < 0) {            return true;        }        return false;    }    /**     * Determines whether a given point is inside a given polygon.     *     * @param array $point   x, y coordinates of the point     * @param array $polygon array of points forming the ring     *     * @return whether a given point is inside a given polygon     */    public static function isPointInsidePolygon($point, $polygon)    {        // If first point is repeated at the end remove it        $last = count($polygon) - 1;        if (($polygon[0]['x'] == $polygon[$last]['x'])            && ($polygon[0]['y'] == $polygon[$last]['y'])        ) {            $polygon = array_slice($polygon, 0, $last);        }        $no_of_points = count($polygon);        $counter = 0;        // Use ray casting algorithm        $p1 = $polygon[0];        for ($i = 1; $i <= $no_of_points; $i++) {            $p2 = $polygon[$i % $no_of_points];            if ($point['y'] > min(array($p1['y'], $p2['y']))) {                if ($point['y'] <= max(array($p1['y'], $p2['y']))) {                    if ($point['x'] <= max(array($p1['x'], $p2['x']))) {                        if ($p1['y'] != $p2['y']) {                            $xinters = ($point['y'] - $p1['y'])                                * ($p2['x'] - $p1['x'])                                / ($p2['y'] - $p1['y']) + $p1['x'];                            if ($p1['x'] == $p2['x'] || $point['x'] <= $xinters) {                                $counter++;                            }                        }                    }                }            }            $p1 = $p2;        }        if ($counter % 2 == 0) {            return  false;        } else {            return true;        }    }    /**     * Returns a point that is guaranteed to be on the surface of the ring.     * (for simple closed rings)     *     * @param array $ring array of points forming the ring     *     * @return a point on the surface of the ring     */    public static function getPointOnSurface($ring)    {        // Find two consecutive distinct points.        for ($i = 0; $i < count($ring) - 1; $i++) {            if ($ring[$i]['y'] != $ring[$i + 1]['y']) {                $x0 = $ring[$i]['x'];                $x1 = $ring[$i + 1]['x'];                $y0 = $ring[$i]['y'];                $y1 = $ring[$i + 1]['y'];                break;            }        }        if (! isset($x0)) {            return false;        }        // Find the mid point        $x2 = ($x0 + $x1) / 2;        $y2 = ($y0 + $y1) / 2;        // Always keep $epsilon < 1 to go with the reduction logic down here        $epsilon = 0.1;        $denominator = sqrt(pow(($y1 - $y0), 2) + pow(($x0 - $x1), 2));        $pointA = array(); $pointB = array();        while (true) {            // Get the points on either sides of the line            // with a distance of epsilon to the mid point            $pointA['x'] = $x2 + ($epsilon * ($y1 - $y0)) / $denominator;            $pointA['y'] = $y2 + ($pointA['x'] - $x2) * ($x0 - $x1) / ($y1 - $y0);            $pointB['x'] = $x2 + ($epsilon * ($y1 - $y0)) / (0 - $denominator);            $pointB['y'] = $y2 + ($pointB['x'] - $x2) * ($x0 - $x1) / ($y1 - $y0);            // One of the points should be inside the polygon,            // unless epcilon chosen is too large            if (PMA_GIS_Polygon::isPointInsidePolygon($pointA, $ring)) {                return $pointA;            } elseif (PMA_GIS_Polygon::isPointInsidePolygon($pointB, $ring)) {                return $pointB;            } else {                //If both are outside the polygon reduce the epsilon and                //recalculate the points(reduce exponentially for faster convergance)                $epsilon = pow($epsilon, 2);                if ($epsilon == 0) {                    return false;                }            }        }    }    /** Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'POLYGON';            $wkt = $value;        }        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($wkt, 9, (strlen($wkt) - 11));        // Seperate each linestring        $linerings = explode("),(", $polygon);        $params[$index]['POLYGON']['no_of_lines'] = count($linerings);        $j = 0;        foreach ($linerings as $linering) {            $points_arr = $this->extractPoints($linering, null);            $no_of_points = count($points_arr);            $params[$index]['POLYGON'][$j]['no_of_points'] = $no_of_points;            for ($i = 0; $i < $no_of_points; $i++) {                $params[$index]['POLYGON'][$j][$i]['x'] = $points_arr[$i][0];                $params[$index]['POLYGON'][$j][$i]['y'] = $points_arr[$i][1];            }            $j++;        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common config manipulation functions * * @package PhpMyAdmin *//** * Returns sanitized language string, taking into account our special codes * for formatting. Takes variable number of arguments. * Based on PMA_sanitize from sanitize.lib.php. * * @param  string  $lang_key  key in $GLOBALS WITHOUT 'strSetup' prefix * @param  mixed   $args,...  arguments for sprintf * @return string */function PMA_lang($lang_key, $args = null){    $message = isset($GLOBALS["strConfig$lang_key"]) ? $GLOBALS["strConfig$lang_key"] : $lang_key;    $message = PMA_sanitize($message);    if (func_num_args() == 1) {        return $message;    } else {        $args = func_get_args();        array_shift($args);        return vsprintf($message, $args);    }}/** * Returns translated field name/description or comment * * @param string $canonical_path * @param string $type  'name', 'desc' or 'cmt' * @param mixed  $default * @return string */function PMA_lang_name($canonical_path, $type = 'name', $default = 'key'){    $lang_key = str_replace(        array('Servers/1/', '/'),        array('Servers/', '_'),        $canonical_path) . '_' . $type;    return isset($GLOBALS["strConfig$lang_key"])        ? ($type == 'desc' ? PMA_lang($lang_key) : $GLOBALS["strConfig$lang_key"])        : ($default == 'key' ? $lang_key : $default);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handle row specifc actions like edit, delete, export * * @package PhpMyAdmin *//** * do not globalize/import request variables * can only be enabled if all included files are switched superglobals too * but leave this here to show that this file is 'superglobalized'define('PMA_NO_VARIABLES_IMPORT', true); *//** * */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';/** * No rows were selected => show again the query and tell that user. */if (! PMA_isValid($_REQUEST['rows_to_delete'], 'array') && ! isset($_REQUEST['mult_btn'])) {    $disp_message = __('No rows selected');    $disp_query = '';    include './sql.php';    include './libraries/footer.inc.php';}if (isset($_REQUEST['submit_mult'])) {    $submit_mult = $_REQUEST['submit_mult'];// workaround for IE problem:} elseif (isset($_REQUEST['submit_mult_delete_x'])) {    $submit_mult = 'row_delete';} elseif (isset($_REQUEST['submit_mult_change_x'])) {    $submit_mult = 'row_edit';} elseif (isset($_REQUEST['submit_mult_export_x'])) {    $submit_mult = 'row_export';}// If the 'Ask for confirmation' button was pressed, this can only come// from 'delete' mode, so we set it straight away.if (isset($_REQUEST['mult_btn'])) {    $submit_mult = 'row_delete';}switch($submit_mult) {    case 'row_delete':    case 'row_edit':    case 'row_export':        // leave as is        break;    case 'export':        $submit_mult = 'row_export';        break;    case 'delete':        $submit_mult = 'row_delete';        break;    default:    case 'edit':        $submit_mult = 'row_edit';        break;}if (!empty($submit_mult)) {    switch($submit_mult) {        case 'row_edit':            // As we got the rows to be edited from the            // 'rows_to_delete' checkbox, we use the index of it as the            // indicating WHERE clause. Then we build the array which is used            // for the tbl_change.php script.            $where_clause = array();            foreach ($_REQUEST['rows_to_delete'] as $i_where_clause => $del_query) {                $where_clause[] = urldecode($i_where_clause);            }            $active_page = 'tbl_change.php';            include './tbl_change.php';            break;        case 'row_export':            // Needed to allow SQL export            $single_table = true;            // As we got the rows to be exported from the            // 'rows_to_delete' checkbox, we use the index of it as the            // indicating WHERE clause. Then we build the array which is used            // for the tbl_change.php script.            $where_clause = array();            foreach ($_REQUEST['rows_to_delete'] as $i_where_clause => $del_query) {                $where_clause[] = urldecode($i_where_clause);            }            $active_page = 'tbl_export.php';            include './tbl_export.php';            break;        case 'row_delete':        default:            $action = 'tbl_row_action.php';            $err_url = 'tbl_row_action.php' . PMA_generate_common_url($GLOBALS['url_params']);            if (! isset($_REQUEST['mult_btn'])) {                $original_sql_query = $sql_query;                if (! empty($url_query)) {                    $original_url_query = $url_query;                }            }            include './libraries/mult_submits.inc.php';            $_url_params = $GLOBALS['url_params'];            $_url_params['goto'] = 'tbl_sql.php';            $url_query = PMA_generate_common_url($_url_params);            /**             * Show result of multi submit operation             */            // sql_query is not set when user does not confirm multi-delete            if ((!empty($submit_mult) || isset($_REQUEST['mult_btn'])) && ! empty($sql_query)) {                $disp_message = __('Your SQL query has been executed successfully');                $disp_query = $sql_query;            }            if (isset($original_sql_query)) {                $sql_query = $original_sql_query;            }            if (isset($original_url_query)) {                $url_query = $original_url_query;            }            // this is because sql.php could call tbl_structure            // which would think it needs to call mult_submits.inc.php:            unset($submit_mult, $_REQUEST['mult_btn']);            $active_page = 'sql.php';            include './sql.php';            /**             * Displays the footer             */            include './libraries/footer.inc.php';            break;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * "Echo" service to allow force downloading of exported charts (png or svg) * and server status monitor settings * * @package PhpMyAdmin */require_once './libraries/common.inc.php';/* For chart exporting */if (isset($_REQUEST['filename']) && isset($_REQUEST['image'])) {    $allowed = array(        'image/png'     => 'png',        'image/svg+xml' => 'svg',    );    /* Check whether MIME type is allowed */    if (! isset($allowed[$_REQUEST['type']])) {        die(__('Invalid export type'));    }    /*     * Check file name to match mime type and not contain new lines     * to prevent response splitting.     */    $extension = $allowed[$_REQUEST['type']];    $valid_match = '/^[^\n\r]*\.' . $extension . '$/';    if (! preg_match($valid_match, $_REQUEST['filename'])) {        if (! preg_match('/^[^\n\r]*$/', $_REQUEST['filename'])) {            /* Filename is unsafe, discard it */            $filename = 'download.' . $extension;        } else {            /* Add extension */            $filename = $_REQUEST['filename'] . '.' . $extension;        }    } else {        /* Filename from request should be safe here */        $filename = $_REQUEST['filename'];    }    /* Decode data */    if ($extension != 'svg') {        $data = substr($_REQUEST['image'], strpos($_REQUEST['image'], ',') + 1);        $data = base64_decode($data);    } else {        $data = $_REQUEST['image'];    }    /* Send download header */    PMA_download_header($filename, $_REQUEST['type'], strlen($data));    /* Send data */    echo $data;/* For monitor chart config export */} else if (isset($_REQUEST['monitorconfig'])) {    PMA_download_header('monitor.cfg', 'application/force-download');    echo urldecode($_REQUEST['monitorconfig']);/* For monitor chart config import */} else if (isset($_REQUEST['import'])) {    header('Content-type: text/plain');    if(!file_exists($_FILES['file']['tmp_name'])) exit();    echo file_get_contents($_FILES['file']['tmp_name']);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple wrapper just to enable error reporting and include config * * @package PhpMyAdmin */$GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';PMA_no_cache_header();header('Content-Type: text/html; charset=utf-8');require './libraries/vendor_config.php';error_reporting(E_ALL);/** * Read config file. */if (is_readable(CONFIG_FILE)) {    require CONFIG_FILE;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library for extracting information about system memory and cpu. Currently supports all * Windows and Linux plattforms * * This code is based on the OS Classes from the phpsysinfo project (http://phpsysinfo.sourceforge.net/) * * @package PhpMyAdmin *//** * @return array */function getSysInfo(){    $supported = array('Linux', 'WINNT');    $sysinfo = array();    if (in_array(PHP_OS, $supported)) {        return eval("return new ".PHP_OS."();");    }    return $sysinfo;}class WINNT{    private $_wmi;    public $os = 'WINNT';    public function __construct() {        // initialize the wmi object        $objLocator = new COM('WbemScripting.SWbemLocator');        $this->_wmi = $objLocator->ConnectServer();    }    function loadavg() {        $loadavg = "";        $sum = 0;        $buffer = $this->_getWMI('Win32_Processor', array('LoadPercentage'));        foreach ($buffer as $load) {            $value = $load['LoadPercentage'];            $loadavg .= $value.' ';            $sum += $value;        }        return array('loadavg' => $sum / count($buffer));    }    private function _getWMI($strClass, $strValue = array()) {        $arrData = array();        $value = "";        $objWEBM = $this->_wmi->Get($strClass);        $arrProp = $objWEBM->Properties_;        $arrWEBMCol = $objWEBM->Instances_();        foreach ($arrWEBMCol as $objItem) {            if (is_array($arrProp)) {                reset($arrProp);            }            $arrInstance = array();            foreach ($arrProp as $propItem) {                if ( empty($strValue)) {                    eval("\$value = \$objItem->".$propItem->Name.";");                    $arrInstance[$propItem->Name] = trim($value);                } else {                    if (in_array($propItem->Name, $strValue)) {                        eval("\$value = \$objItem->".$propItem->Name.";");                        $arrInstance[$propItem->Name] = trim($value);                    }                }            }            $arrData[] = $arrInstance;        }        return $arrData;    }    function memory() {        $buffer = $this->_getWMI("Win32_OperatingSystem", array('TotalVisibleMemorySize', 'FreePhysicalMemory'));        $mem = Array();        $mem['MemTotal'] = $buffer[0]['TotalVisibleMemorySize'];        $mem['MemFree'] = $buffer[0]['FreePhysicalMemory'];        $mem['MemUsed'] = $mem['MemTotal'] - $mem['MemFree'];        $buffer = $this->_getWMI('Win32_PageFileUsage');        $mem['SwapTotal'] = 0;        $mem['SwapUsed'] = 0;        $mem['SwapPeak'] = 0;        foreach ($buffer as $swapdevice) {            $mem['SwapTotal'] += $swapdevice['AllocatedBaseSize'] * 1024;            $mem['SwapUsed'] += $swapdevice['CurrentUsage'] * 1024;            $mem['SwapPeak'] += $swapdevice['PeakUsage'] * 1024;        }        return $mem;    }}class Linux{    public $os = 'Linux';    function loadavg() {        $buf = file_get_contents('/proc/stat');        $nums=preg_split("/\s+/", substr($buf, 0, strpos($buf, "\n")));        return Array('busy' => $nums[1]+$nums[2]+$nums[3], 'idle' => intval($nums[4]));    }    function memory() {        preg_match_all('/^(MemTotal|MemFree|Cached|Buffers|SwapCached|SwapTotal|SwapFree):\s+(.*)\s*kB/im', file_get_contents('/proc/meminfo'), $matches);        $mem = array_combine( $matches[1], $matches[2] );        $mem['MemUsed'] = $mem['MemTotal'] - $mem['MemFree'] - $mem['Cached'] - $mem['Buffers'];        $mem['SwapUsed'] = $mem['SwapTotal'] - $mem['SwapFree'] - $mem['SwapCached'];        foreach ($mem as $idx=>$value)            $mem[$idx] = intval($value);        return $mem;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'server_privileges.js';$GLOBALS['js_include'][] = 'replication.js';require './libraries/server_common.inc.php';require './libraries/replication.inc.php';require './libraries/replication_gui.lib.php';require_once './libraries/server_synchronize.lib.php';/** * Checks if the user is allowed to do what he tries to... */if (! $is_superuser) {    include './libraries/server_links.inc.php';    echo '<h2>' . "\n"        . PMA_getIcon('s_replication.png')        . __('Replication') . "\n"        . '</h2>' . "\n";    PMA_Message::error(__('No Privileges'))->display();    include './libraries/footer.inc.php';}/** * Handling control requests */if (isset($GLOBALS['sr_take_action'])) {    $refresh = false;    if (isset($GLOBALS['slave_changemaster'])) {        $_SESSION['replication']['m_username'] = $sr['username'] = PMA_sqlAddSlashes($GLOBALS['username']);        $_SESSION['replication']['m_password'] = $sr['pma_pw']   = PMA_sqlAddSlashes($GLOBALS['pma_pw']);        $_SESSION['replication']['m_hostname'] = $sr['hostname'] = PMA_sqlAddSlashes($GLOBALS['hostname']);        $_SESSION['replication']['m_port']     = $sr['port']     = PMA_sqlAddSlashes($GLOBALS['port']);        $_SESSION['replication']['m_correct']  = '';        $_SESSION['replication']['sr_action_status'] = 'error';        $_SESSION['replication']['sr_action_info'] = __('Unknown error');        // Attempt to connect to the new master server        $link_to_master = PMA_replication_connect_to_master($sr['username'], $sr['pma_pw'], $sr['hostname'], $sr['port']);        if (! $link_to_master) {            $_SESSION['replication']['sr_action_status'] = 'error';            $_SESSION['replication']['sr_action_info'] = sprintf(__('Unable to connect to master %s.'), htmlspecialchars($sr['hostname']));        } else {            // Read the current master position            $position = PMA_replication_slave_bin_log_master($link_to_master);            if (empty($position)) {                $_SESSION['replication']['sr_action_status'] = 'error';                $_SESSION['replication']['sr_action_info'] = __('Unable to read master log position. Possible privilege problem on master.');            } else {                $_SESSION['replication']['m_correct']  = true;                if (! PMA_replication_slave_change_master($sr['username'], $sr['pma_pw'], $sr['hostname'], $sr['port'], $position, true, false)) {                    $_SESSION['replication']['sr_action_status'] = 'error';                    $_SESSION['replication']['sr_action_info'] = __('Unable to change master');                } else {                    $_SESSION['replication']['sr_action_status'] = 'success';                    $_SESSION['replication']['sr_action_info'] = sprintf(__('Master server changed successfully to %s'), htmlspecialchars($sr['hostname']));                }            }        }    } elseif (isset($GLOBALS['sr_slave_server_control'])) {        if ($GLOBALS['sr_slave_action'] == 'reset') {            PMA_replication_slave_control("STOP");            PMA_DBI_try_query("RESET SLAVE;");            PMA_replication_slave_control("START");        } else {            PMA_replication_slave_control($GLOBALS['sr_slave_action'], $GLOBALS['sr_slave_control_parm']);        }        $refresh = true;    } elseif (isset($GLOBALS['sr_slave_skip_error'])) {        $count = 1;        if (isset($GLOBALS['sr_skip_errors_count'])) {            $count = $GLOBALS['sr_skip_errors_count'] * 1;        }        PMA_replication_slave_control("STOP");        PMA_DBI_try_query("SET GLOBAL SQL_SLAVE_SKIP_COUNTER = ".$count.";");        PMA_replication_slave_control("START");    } elseif (isset($GLOBALS['sl_sync'])) {        // TODO username, host and port could be read from 'show slave status',        // when asked for a password this might work in more situations then just after changing master (where the master password is stored in session)        $src_link = PMA_replication_connect_to_master($_SESSION['replication']['m_username'], $_SESSION['replication']['m_password'], $_SESSION['replication']['m_hostname'], $_SESSION['replication']['m_port']);        $trg_link = null; // using null to indicate the current PMA server        $data = PMA_DBI_fetch_result('SHOW MASTER STATUS', null, null, $src_link); // let's find out, which databases are replicated        $do_db     = array();        $ignore_db = array();        $dblist    = array();        if (! empty($data[0]['Binlog_Do_DB'])) {            $do_db     = explode(',', $data[0]['Binlog_Do_DB']);        }        if (! empty($data[0]['Binlog_Ignore_DB'])) {            $ignore_db = explode(',', $data[0]['Binlog_Ignore_DB']);        }        $tmp_alldbs = PMA_DBI_query('SHOW DATABASES;', $src_link);        while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {            if (PMA_is_system_schema($tmp_row[0])) {                continue;            }            if (count($do_db) == 0) {                if (array_search($tmp_row[0], $ignore_db) !== false) {                    continue;                }                $dblist[] = $tmp_row[0];                PMA_DBI_query('CREATE DATABASE IF NOT EXISTS '.PMA_backquote($tmp_row[0]), $trg_link);            } else {                if (array_search($tmp_row[0], $do_db) !== false) {                    $dblist[] = $tmp_row[0];                    PMA_DBI_query('CREATE DATABASE IF NOT EXISTS '.PMA_backquote($tmp_row[0]), $trg_link);                }            }        } // end while        unset($do_db, $ignore_db, $data);        if (isset($GLOBALS['repl_data'])) {            $include_data = true;        } else {            $include_data = false;        }        foreach ($dblist as $db) {            PMA_replication_synchronize_db($db, $src_link, $trg_link, $include_data);        }        // TODO some form of user feedback error/success would be nice        //  What happens if $dblist is empty?        //  or sync failed?    }    if ($refresh) {        Header("Location: ". PMA_generate_common_url($GLOBALS['url_params']));    }    unset($refresh);}/** * Displays the links */require './libraries/server_links.inc.php';echo '<div id="replication">';echo ' <h2>';echo '   ' . PMA_getImage('s_replication.png');echo     __('Replication');echo ' </h2>';// Display error messagesif (isset($_SESSION['replication']['sr_action_status']) && isset($_SESSION['replication']['sr_action_info'])) {    if ($_SESSION['replication']['sr_action_status'] == 'error') {        PMA_Message::error($_SESSION['replication']['sr_action_info'])->display();        $_SESSION['replication']['sr_action_status'] = 'unknown';    } elseif ($_SESSION['replication']['sr_action_status'] == 'success') {        PMA_Message::success($_SESSION['replication']['sr_action_info'])->display();        $_SESSION['replication']['sr_action_status'] = 'unknown';    }}if ($server_master_status) {    if (! isset($GLOBALS['repl_clear_scr'])) {        echo '<fieldset>';        echo '<legend>' . __('Master replication') . '</legend>';        echo __('This server is configured as master in a replication process.');        echo '<ul>';        echo '  <li><a href="#" id="master_status_href">' . __('Show master status') . '</a></li>';        PMA_replication_print_status_table('master', true, false);        echo '  <li><a href="#" id="master_slaves_href">' . __('Show connected slaves') . '</a></li>';        PMA_replication_print_slaves_table(true);        $_url_params = $GLOBALS['url_params'];        $_url_params['mr_adduser'] = true;        $_url_params['repl_clear_scr'] = true;        echo '  <li><a href="' . PMA_generate_common_url($_url_params) . '" id="master_addslaveuser_href">' . __('Add slave replication user') . '</a></li>';    }    // Display 'Add replication slave user' form    if (isset($GLOBALS['mr_adduser'])) {        PMA_replication_gui_master_addslaveuser();    } elseif (! isset($GLOBALS['repl_clear_scr'])) {        echo "</ul>";        echo "</fieldset>";    }} elseif (! isset($GLOBALS['mr_configure']) && ! isset($GLOBALS['repl_clear_scr'])) {    $_url_params = $GLOBALS['url_params'];    $_url_params['mr_configure'] = true;    echo '<fieldset>';    echo '<legend>' . __('Master replication') . '</legend>';    echo sprintf(__('This server is not configured as master in a replication process. Would you like to <a href="%s">configure</a> it?'), PMA_generate_common_url($_url_params));    echo '</fieldset>';}if (isset($GLOBALS['mr_configure'])) {    // Render the 'Master configuration' section    echo '<fieldset>';    echo '<legend>' . __('Master configuration') . '</legend>';    echo __('This server is not configured as master server in a replication process. You can choose from either replicating all databases and ignoring certain (useful if you want to replicate majority of databases) or you can choose to ignore all databases by default and allow only certain databases to be replicated. Please select the mode:') . '<br /><br />';    echo '<select name="db_type" id="db_type">';    echo '<option value="all">' . __('Replicate all databases; Ignore:') . '</option>';    echo '<option value="ign">' . __('Ignore all databases; Replicate:') . '</option>';    echo '</select>';    echo '<br /><br />';    echo __('Please select databases:') . '<br />';    echo PMA_replication_db_multibox();    echo '<br /><br />';    echo __('Now, add the following lines at the end of [mysqld] section in your my.cnf and please restart the MySQL server afterwards.') . '<br />';    echo '<pre id="rep"></pre>';    echo __('Once you restarted MySQL server, please click on Go button. Afterwards, you should see a message informing you, that this server <b>is</b> configured as master');    echo '</fieldset>';    echo '<fieldset class="tblFooters">';    echo ' <form method="post" action="server_replication.php" >';    echo PMA_generate_common_hidden_inputs('', '');    echo '  <input type="submit" value="' . __('Go') . '" id="goButton" />';    echo ' </form>';    echo '</fieldset>';    include './libraries/footer.inc.php';    exit;}echo '</div>';if (! isset($GLOBALS['repl_clear_scr'])) {    // Render the 'Slave configuration' section    echo '<fieldset>';    echo '<legend>' . __('Slave replication') . '</legend>';    if ($server_slave_status) {        echo '<div id="slave_configuration_gui">';        $_url_params = $GLOBALS['url_params'];        $_url_params['sr_take_action'] = true;        $_url_params['sr_slave_server_control'] = true;        if ($server_slave_replication[0]['Slave_IO_Running'] == 'No') {            $_url_params['sr_slave_action'] = 'start';        } else {            $_url_params['sr_slave_action'] = 'stop';        }        $_url_params['sr_slave_control_parm'] = 'IO_THREAD';        $slave_control_io_link = PMA_generate_common_url($_url_params);        if ($server_slave_replication[0]['Slave_SQL_Running'] == 'No') {            $_url_params['sr_slave_action'] = 'start';        } else {            $_url_params['sr_slave_action'] = 'stop';        }        $_url_params['sr_slave_control_parm'] = 'SQL_THREAD';        $slave_control_sql_link = PMA_generate_common_url($_url_params);        if ($server_slave_replication[0]['Slave_IO_Running'] == 'No'            || $server_slave_replication[0]['Slave_SQL_Running'] == 'No'        ) {            $_url_params['sr_slave_action'] = 'start';        } else {            $_url_params['sr_slave_action'] = 'stop';        }        $_url_params['sr_slave_control_parm'] = null;        $slave_control_full_link = PMA_generate_common_url($_url_params);        $_url_params['sr_slave_action'] = 'reset';        $slave_control_reset_link = PMA_generate_common_url($_url_params);        $_url_params = $GLOBALS['url_params'];        $_url_params['sr_slave_skip_error'] = true;        $slave_skip_error_link = PMA_generate_common_url($_url_params);        if ($server_slave_replication[0]['Slave_SQL_Running'] == 'No') {            PMA_Message::error(__('Slave SQL Thread not running!'))->display();        }        if ($server_slave_replication[0]['Slave_IO_Running'] == 'No') {            PMA_Message::error(__('Slave IO Thread not running!'))->display();        }        $_url_params = $GLOBALS['url_params'];        $_url_params['sl_configure'] = true;        $_url_params['repl_clear_scr'] = true;        $reconfiguremaster_link = PMA_generate_common_url($_url_params);        echo __('Server is configured as slave in a replication process. Would you like to:');        echo '<br />';        echo '<ul>';        echo ' <li><a href="#" id="slave_status_href">' . __('See slave status table') . '</a></li>';        echo PMA_replication_print_status_table('slave', true, false);        if (isset($_SESSION['replication']['m_correct']) && $_SESSION['replication']['m_correct'] == true) {            echo ' <li><a href="#" id="slave_synchronization_href">' . __('Synchronize databases with master') . '</a></li>';            echo ' <div id="slave_synchronization_gui" style="display: none">';            echo '  <form method="post" action="server_replication.php">';            echo PMA_generate_common_hidden_inputs('', '');            echo '   <input type="checkbox" name="repl_struc" value="1" checked="checked" disabled="disabled" /> ' . __('Structure') . '<br />'; // this is just for vizualization, it has no other purpose            echo '   <input type="checkbox" name="repl_data"  value="1" checked="checked" /> ' . __('Data') .' <br />';            echo '   <input type="hidden" name="sr_take_action" value="1" />';            echo '   <input type="submit" name="sl_sync" value="' . __('Go') . '" />';            echo '  </form>';            echo ' </div>';        }        echo ' <li><a href="#" id="slave_control_href">' . __('Control slave:') . '</a>';        echo ' <div id="slave_control_gui" style="display: none">';        echo '  <ul>';        echo '   <li><a href="'. $slave_control_full_link . '">' . (($server_slave_replication[0]['Slave_IO_Running'] == 'No' || $server_slave_replication[0]['Slave_SQL_Running'] == 'No') ? __('Full start') : __('Full stop')) . ' </a></li>';        echo '   <li><a href="'. $slave_control_reset_link . '">' . __('Reset slave') . '</a></li>';        if ($server_slave_replication[0]['Slave_SQL_Running'] == 'No') {            echo '   <li><a href="' . $slave_control_sql_link . '">' . __('Start SQL Thread only') . '</a></li>';        } else {            echo '   <li><a href="' . $slave_control_sql_link . '">' . __('Stop SQL Thread only') . '</a></li>';        }        if ($server_slave_replication[0]['Slave_IO_Running'] == 'No') {            echo '   <li><a href="' . $slave_control_io_link . '">' . __('Start IO Thread only') . '</a></li>';        } else {            echo '   <li><a href="' . $slave_control_io_link . '">' . __('Stop IO Thread only') . '</a></li>';        }        echo '  </ul>';        echo ' </div>';        echo ' </li>';        echo ' <li><a href="#" id="slave_errormanagement_href">' . __('Error management:') . '</a>';        echo ' <div id="slave_errormanagement_gui" style="display: none">';        PMA_Message::error(__('Skipping errors might lead into unsynchronized master and slave!'))->display();        echo '  <ul>';        echo '   <li><a href="' . $slave_skip_error_link . '">' . __('Skip current error') . '</a></li>';        echo '   <li>' . __('Skip next');        echo '    <form method="post" action="server_replication.php">';        echo PMA_generate_common_hidden_inputs('', '');        echo '      <input type="text" name="sr_skip_errors_count" value="1" style="width: 30px" />' . __('errors.');        echo '              <input type="submit" name="sr_slave_skip_error" value="' . __('Go') . '" />';        echo '      <input type="hidden" name="sr_take_action" value="1" />';        echo '    </form></li>';        echo '  </ul>';        echo ' </div>';        echo ' </li>';        echo ' <li><a href="' . $reconfiguremaster_link . '">' . __('Change or reconfigure master server') . '</a></li>';        echo '</ul>';    } elseif (! isset($GLOBALS['sl_configure'])) {        $_url_params = $GLOBALS['url_params'];        $_url_params['sl_configure'] = true;        $_url_params['repl_clear_scr'] = true;        echo sprintf(__('This server is not configured as slave in a replication process. Would you like to <a href="%s">configure</a> it?'), PMA_generate_common_url($_url_params));    }    echo '</div>';    echo '</fieldset>';}if (isset($GLOBALS['sl_configure'])) {    PMA_replication_gui_changemaster("slave_changemaster");}require './libraries/footer.inc.php';?>
<?php/** * Theme based generator for SVG gradient. * * @package PhpMyAdmin-theme */header('Content-Type: image/svg+xml');header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');function get_color($get_name, $default){    // get color from GET args, only alphanumeric chcracters    $opts = array('options' => array('regexp' => '/^[a-z0-9]+$/i'));    $color = filter_input(INPUT_GET, $get_name, FILTER_VALIDATE_REGEXP, $opts);    if (preg_match('/^[a-f0-9]{6}$/', $color)) {        return '#' . $color;    }    return $color ? $color : $default;}?><?php echo '<?xml version="1.0" ?>' ?><svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none" version="1.0" width="100%" height="100%">    <defs>        <linearGradient id="linear-gradient" x1="0%" y1="0%" x2="0%" y2="100%">            <stop offset="0%" stop-color="<?php echo get_color('from', 'white') ?>" stop-opacity="1" />            <stop offset="100%" stop-color="<?php echo get_color('to', 'black') ?>" stop-opacity="1" />        </linearGradient>    </defs>    <rect width="100%" height="100%" style="fill:url(#linear-gradient);" /></svg>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * phpMyAdmin sample configuration, you can use it as base for * manual configuration. For easier setup you can use setup/ * * All directives are explained in Documentation.html and on phpMyAdmin * wiki <http://wiki.phpmyadmin.net>. * * @package PhpMyAdmin *//* * This is needed for cookie based authentication to encrypt password in * cookie */$cfg['blowfish_secret'] = 'a8b7c6d'; /* YOU MUST FILL IN THIS FOR COOKIE AUTH! *//* * Servers configuration */$i = 0;/* * First server */$i++;/* Authentication type */$cfg['Servers'][$i]['auth_type'] = 'cookie';/* Server parameters */$cfg['Servers'][$i]['host'] = 'localhost';$cfg['Servers'][$i]['connect_type'] = 'tcp';$cfg['Servers'][$i]['compress'] = false;/* Select mysql if your server does not have mysqli */$cfg['Servers'][$i]['extension'] = 'mysqli';$cfg['Servers'][$i]['AllowNoPassword'] = false;/* * phpMyAdmin configuration storage settings. *//* User used to manipulate with storage */// $cfg['Servers'][$i]['controlhost'] = '';// $cfg['Servers'][$i]['controluser'] = 'pma';// $cfg['Servers'][$i]['controlpass'] = 'pmapass';/* Storage database and tables */// $cfg['Servers'][$i]['pmadb'] = 'phpmyadmin';// $cfg['Servers'][$i]['bookmarktable'] = 'pma_bookmark';// $cfg['Servers'][$i]['relation'] = 'pma_relation';// $cfg['Servers'][$i]['table_info'] = 'pma_table_info';// $cfg['Servers'][$i]['table_coords'] = 'pma_table_coords';// $cfg['Servers'][$i]['pdf_pages'] = 'pma_pdf_pages';// $cfg['Servers'][$i]['column_info'] = 'pma_column_info';// $cfg['Servers'][$i]['history'] = 'pma_history';// $cfg['Servers'][$i]['table_uiprefs'] = 'pma_table_uiprefs';// $cfg['Servers'][$i]['tracking'] = 'pma_tracking';// $cfg['Servers'][$i]['designer_coords'] = 'pma_designer_coords';// $cfg['Servers'][$i]['userconfig'] = 'pma_userconfig';// $cfg['Servers'][$i]['recent'] = 'pma_recent';// $cfg['Servers'][$i]['table_uiprefs'] = 'pma_table_uiprefs';/* Contrib / Swekey authentication */// $cfg['Servers'][$i]['auth_swekey_config'] = '/etc/swekey-pma.conf';/* * End of servers configuration *//* * Directories for saving/loading files from server */$cfg['UploadDir'] = '';$cfg['SaveDir'] = '';/** * Defines whether a user should be displayed a "show all (records)" * button in browse mode or not. * default = false *///$cfg['ShowAll'] = true;/** * Number of rows displayed when browsing a result set. If the result * set contains more rows, "Previous" and "Next". * default = 30 *///$cfg['MaxRows'] = 50;/** * Use graphically less intense menu tabs * default = false *///$cfg['LightTabs'] = true;/** * disallow editing of binary fields * valid values are: *   false  allow editing *   'blob' allow editing except for BLOB fields *   'all'  disallow editing * default = blob *///$cfg['ProtectBinary'] = 'false';/** * Default language to use, if not browser-defined or user-defined * (you find all languages in the locale folder) * uncomment the desired line: * default = 'en' *///$cfg['DefaultLang'] = 'en';//$cfg['DefaultLang'] = 'de';/** * default display direction (horizontal|vertical|horizontalflipped) *///$cfg['DefaultDisplay'] = 'vertical';/** * How many columns should be used for table display of a database? * (a value larger than 1 results in some information being hidden) * default = 1 *///$cfg['PropertiesNumColumns'] = 2;/** * Set to true if you want DB-based query history.If false, this utilizes * JS-routines to display query history (lost by window close) * * This requires configuration storage enabled, see above. * default = false *///$cfg['QueryHistoryDB'] = true;/** * When using DB-based query history, how many entries should be kept? * * default = 25 *///$cfg['QueryHistoryMax'] = 100;/* * You can find more configuration options in Documentation.html * or here: http://wiki.phpmyadmin.net/pma/Config */?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'server_variables.js';PMA_AddJSVar('pma_token', $_SESSION[' PMA_token ']);PMA_AddJSVar('url_query', str_replace('&amp;', '&', PMA_generate_common_url($db)));PMA_AddJSVar('is_superuser', PMA_isSuperuser() ? true : false);/** * Does the common work */require './libraries/server_common.inc.php';/** * Required to display documentation links */require './libraries/server_variables_doc.php';/** * Ajax request */if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    // Send with correct charset    header('Content-Type: text/html; charset=UTF-8');    if (isset($_REQUEST['type'])) {        switch($_REQUEST['type']) {            case 'getval':                $varValue = PMA_DBI_fetch_single_row('SHOW GLOBAL VARIABLES WHERE Variable_name="' . PMA_sqlAddslashes($_REQUEST['varName']) . '";', 'NUM');                if (isset($VARIABLE_DOC_LINKS[$_REQUEST['varName']][3])                    && $VARIABLE_DOC_LINKS[$_REQUEST['varName']][3] == 'byte') {                    exit(implode(' ', PMA_formatByteDown($varValue[1], 3, 3)));                }                exit($varValue[1]);                break;            case 'setval':                $value = $_REQUEST['varValue'];                if (isset($VARIABLE_DOC_LINKS[$_REQUEST['varName']][3])                   && $VARIABLE_DOC_LINKS[$_REQUEST['varName']][3] == 'byte'                   && preg_match('/^\s*(\d+(\.\d+)?)\s*(mb|kb|mib|kib|gb|gib)\s*$/i', $value, $matches)) {                    $exp = array('kb' => 1, 'kib' => 1, 'mb' => 2, 'mib' => 2, 'gb' => 3, 'gib' => 3);                    $value = floatval($matches[1]) * pow(1024, $exp[strtolower($matches[3])]);                } else {                    $value = PMA_sqlAddslashes($value);                }                if (! is_numeric($value)) $value="'" . $value . "'";                if (! preg_match("/[^a-zA-Z0-9_]+/", $_REQUEST['varName']) && PMA_DBI_query('SET GLOBAL ' . $_REQUEST['varName'] . ' = ' . $value)) {                    // Some values are rounded down etc.                    $varValue = PMA_DBI_fetch_single_row('SHOW GLOBAL VARIABLES WHERE Variable_name="' . PMA_sqlAddslashes($_REQUEST['varName']) . '";', 'NUM');                    exit(json_encode(array(                        'success' => true,                        'variable' => formatVariable($_REQUEST['varName'], $varValue[1])                        ))                    );                }                exit(json_encode(array(                    'success' => false,                    'error' => __('Setting variable failed')                    ))                );                break;        }    }}/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($cfg['MainPageIconic'] ? PMA_getImage('s_vars.png') : '')   . '' . __('Server variables and settings') . "\n"   . PMA_showMySQLDocu('server_system_variables', 'server_system_variables')   . '</h2>' . "\n";/** * Sends the queries and buffers the results */$serverVarsSession = PMA_DBI_fetch_result('SHOW SESSION VARIABLES;', 0, 1);$serverVars = PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES;', 0, 1);/** * Displays the page */?><fieldset id="tableFilter" style="display:none;"><legend><?php echo __('Filters'); ?></legend><div class="formelement">    <label for="filterText"><?php echo __('Containing the word:'); ?></label>    <input name="filterText" type="text" id="filterText" style="vertical-align: baseline;" /></div></fieldset><table id="serverVariables" class="data filteredData noclick"><thead><tr><th><?php echo __('Variable'); ?></th>    <th class="valueHeader"><?phpecho __('Session value') . ' / ' . __('Global value');?>    </th>    <th><?php echo __('Documentation'); ?></th></tr></thead><tbody><?php$odd_row = true;foreach ($serverVars as $name => $value) {    $has_session_value = isset($serverVarsSession[$name]) && $serverVarsSession[$name] != $value;    $row_class = ($odd_row ? 'odd' : 'even') . ' ' . ($has_session_value ? 'diffSession' : '');    ?><tr class="<?php echo $row_class; ?>">    <th nowrap="nowrap"><?php echo htmlspecialchars(str_replace('_', ' ', $name)); ?></th>    <td class="value"><?php echo formatVariable($name, $value); ?></td>    <td class="value"><?php    // To display variable documentation link    if (isset($VARIABLE_DOC_LINKS[$name]))        echo PMA_showMySQLDocu($VARIABLE_DOC_LINKS[$name][1], $VARIABLE_DOC_LINKS[$name][1], false, $VARIABLE_DOC_LINKS[$name][2] . '_' . $VARIABLE_DOC_LINKS[$name][0]);    ?></td>    <?php    if ($has_session_value) {        ?></tr><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> ">    <td>(<?php echo __('Session value'); ?>)</td>    <td class="value"><?php echo formatVariable($name, $serverVarsSession[$name]); ?></td>    <td class="value"></td>    <?php } ?></tr>    <?php    $odd_row = ! $odd_row;}?></tbody></table><?phpfunction formatVariable($name, $value){    global $VARIABLE_DOC_LINKS;    if (is_numeric($value)) {        if (isset($VARIABLE_DOC_LINKS[$name][3]) && $VARIABLE_DOC_LINKS[$name][3]=='byte')            return '<abbr title="'.PMA_formatNumber($value, 0).'">'.implode(' ', PMA_formatByteDown($value, 3, 3)).'</abbr>';        else return PMA_formatNumber($value, 0);    }    return htmlspecialchars($value);}/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/** * Menu items * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}$separator = PMA_get_arg_separator('html');?><ul>    <li><a href="index.php"><?php echo __('Overview') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Features"><?php echo __('Features') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Sql_queries"><?php echo __('SQL queries') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Left_frame"><?php echo __('Navigation frame') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Main_frame"><?php echo __('Main frame') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Import"><?php echo __('Import') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Export"><?php echo __('Export') ?></a></li></ul>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * List of avaible forms, each form is described as an array of fields to display. * Fields MUST have their counterparts in the $cfg array. * * There are two possible notations: * $forms['Form group']['Form name'] = array('Servers' => array(1 => array('host'))); * can be written as * $forms['Form group']['Form name'] = array('Servers/1/host'); * * You can assign default values set by special button ("set value: ..."), eg.: * 'Servers/1/pmadb' => 'phpmyadmin' * * To group options, use: * ':group:' . __('group name') // just define a group * or * 'option' => ':group' // group starting from this option * End group blocks with: * ':group:end' * * @package PhpMyAdmin-setup */$forms = array();$forms['_config.php'] = array(    'DefaultLang',    'ServerDefault');$forms['Servers']['Server'] = array('Servers' => array(1 => array(    'verbose',    'host',    'port',    'socket',    'ssl',    'connect_type',    'extension',    'compress',    'nopassword')));$forms['Servers']['Server_auth'] = array('Servers' => array(1 => array(    'auth_type',    ':group:' . __('Config authentication'),        'user',        'password',        ':group:end',    ':group:' . __('Cookie authentication'),        'auth_swekey_config' => './swekey.conf',        ':group:end',    ':group:' . __('HTTP authentication'),        'auth_http_realm',        ':group:end',    ':group:' . __('Signon authentication'),        'SignonSession',        'SignonURL',        'LogoutURL')));$forms['Servers']['Server_config'] = array('Servers' => array(1 => array(    'only_db',    'hide_db',    'AllowRoot',    'AllowNoPassword',    'DisableIS',    'AllowDeny/order',    'AllowDeny/rules',    'ShowDatabasesCommand',    'CountTables')));$forms['Servers']['Server_pmadb'] = array('Servers' => array(1 => array(    'pmadb' => 'phpmyadmin',    'controlhost',    'controluser',    'controlpass',    'verbose_check',    'bookmarktable' => 'pma_bookmark',    'relation' => 'pma_relation',    'userconfig' => 'pma_userconfig',    'table_info' => 'pma_table_info',    'column_info' => 'pma_column_info',    'history' => 'pma_history',    'recent' => 'pma_recent',    'table_uiprefs' => 'pma_table_uiprefs',    'tracking' => 'pma_tracking',    'table_coords' => 'pma_table_coords',    'pdf_pages' => 'pma_pdf_pages',    'designer_coords' => 'pma_designer_coords',    'MaxTableUiprefs' => 100)));$forms['Servers']['Server_tracking'] = array('Servers' => array(1 => array(    'tracking_version_auto_create',    'tracking_default_statements',    'tracking_add_drop_view',    'tracking_add_drop_table',    'tracking_add_drop_database',)));$forms['Features']['Import_export'] = array(    'UploadDir',    'SaveDir',    'RecodingEngine' => ':group',        'IconvExtraParams',        ':group:end',    'ZipDump',    'GZipDump',    'BZipDump',    'CompressOnFly');$forms['Features']['Security'] = array(    'blowfish_secret',    'ForceSSL',    'CheckConfigurationPermissions',    'TrustedProxies',    'AllowUserDropDatabase',    'AllowArbitraryServer',    'LoginCookieRecall',    'LoginCookieValidity',    'LoginCookieStore',    'LoginCookieDeleteAll');$forms['Features']['Page_titles'] = array(    'TitleDefault',    'TitleTable',    'TitleDatabase',    'TitleServer');$forms['Features']['Warnings'] = array(    'PmaNoRelation_DisableWarning',    'SuhosinDisableWarning',    'McryptDisableWarning');$forms['Features']['Developer'] = array(    'UserprefsDeveloperTab',    'Error_Handler/display',    'Error_Handler/gather',    'DBG/sql');$forms['Features']['Other_core_settings'] = array(    'AjaxEnable',    'VersionCheck',    'NaturalOrder',    'InitialSlidersState',    'ErrorIconic',    'ReplaceHelpImg',    'MaxDbList',    'MaxTableList',    'ShowHint',    'OBGzip',    'PersistentConnections',    'ExecTimeLimit',    'MemoryLimit',    'SkipLockedTables',    'DisableMultiTableMaintenance',    'UseDbSearch',    'AllowThirdPartyFraming');$forms['Sql_queries']['Sql_queries'] = array(    'ShowSQL',    'Confirm',    'QueryHistoryDB',    'QueryHistoryMax',    'IgnoreMultiSubmitErrors',    'VerboseMultiSubmit',    'MaxCharactersInDisplayedSQL',    'EditInWindow',    //'QueryWindowWidth', // overridden in theme    //'QueryWindowHeight',    'QueryWindowDefTab',    'RetainQueryBox');$forms['Sql_queries']['Sql_box'] = array('SQLQuery' => array(    'Edit',    'Explain',    'ShowAsPHP',    'Validate',    'Refresh'));$forms['Sql_queries']['Sql_validator'] = array('SQLValidator' => array(    'use',    'username',    'password'));$forms['Left_frame']['Left_frame'] = array(    'LeftFrameLight',    'LeftDisplayLogo',    'LeftLogoLink',    'LeftLogoLinkWindow',    'LeftPointerEnable',    'LeftRecentTable');$forms['Left_frame']['Left_servers'] = array(    'LeftDisplayServers',    'DisplayServersList');$forms['Left_frame']['Left_databases'] = array(    'DisplayDatabasesList',    'LeftFrameDBTree',    'LeftFrameDBSeparator',    'ShowTooltipAliasDB');$forms['Left_frame']['Left_tables'] = array(    'LeftDisplayTableFilterMinimum',    'LeftDefaultTabTable',    'LeftFrameTableSeparator',    'LeftFrameTableLevel',    'ShowTooltip',    'ShowTooltipAliasTB');$forms['Main_frame']['Startup'] = array(    'MainPageIconic',    'ShowCreateDb' => ':group',        'SuggestDBName',        ':group:end',    'ShowStats',    'ShowServerInfo',    'ShowPhpInfo',    'ShowChgPassword');$forms['Main_frame']['Browse'] = array(    'NavigationBarIconic',    'ShowAll',    'MaxRows',    'Order',    'BrowsePointerEnable',    'BrowseMarkerEnable',    'SaveCellsAtOnce',    'ShowDisplayDirection',    'RepeatCells',    'LimitChars',    'RowActionLinks',    'DefaultDisplay',    'RememberSorting');$forms['Main_frame']['Edit'] = array(    'ProtectBinary',    'ShowFunctionFields',    'ShowFieldTypesInDataEditView',    'CharEditing',    'MinSizeForInputField',    'MaxSizeForInputField',    'CharTextareaCols',    'CharTextareaRows',    'TextareaCols',    'TextareaRows',    'LongtextDoubleTextarea',    'InsertRows',    'ForeignKeyDropdownOrder',    'ForeignKeyMaxLimit');$forms['Main_frame']['Tabs'] = array(    'LightTabs',    'PropertiesIconic',    'DefaultTabServer',    'DefaultTabDatabase',    'DefaultTabTable',    'QueryWindowDefTab');$forms['Import']['Import_defaults'] = array('Import' => array(    'format',    'charset',    'allow_interrupt',    'skip_queries'));$forms['Import']['Sql'] = array('Import' => array(    'sql_compatibility',    'sql_no_auto_value_on_zero'));$forms['Import']['Csv'] = array('Import' => array(    ':group:' . __('CSV'),        'csv_replace',        'csv_ignore',        'csv_terminated',        'csv_enclosed',        'csv_escaped',        'csv_col_names',        ':group:end',    ':group:' . __('CSV using LOAD DATA'),        'ldi_replace',        'ldi_ignore',        'ldi_terminated',        'ldi_enclosed',        'ldi_escaped',        'ldi_local_option',        ':group:end'));$forms['Import']['Open_Document'] = array('Import' => array(    ':group:' . __('Open Document Spreadsheet'),        'ods_col_names',        'ods_empty_rows',        'ods_recognize_percentages',        'ods_recognize_currency'));$forms['Export']['Export_defaults'] = array('Export' => array(    'method',    ':group:' . __('Quick'),        'quick_export_onserver',        'quick_export_onserver_overwrite',        ':group:end',    ':group:' . __('Custom'),        'format',        'compression',        'charset',        'asfile' => ':group',            'onserver',            'onserver_overwrite',            ':group:end',        'remember_file_template',        'file_template_table',        'file_template_database',        'file_template_server'));$forms['Export']['Sql'] = array('Export' => array(    'sql_include_comments' => ':group',        'sql_dates',        'sql_relation',        'sql_mime',        ':group:end',    'sql_use_transaction',    'sql_disable_fk',    'sql_compatibility',    ':group:' . __('Database export options'),        'sql_drop_database',        'sql_structure_or_data',        ':group:end',    ':group:' . __('Structure'),        'sql_drop_table',        'sql_procedure_function',        'sql_create_table_statements' => ':group',            'sql_if_not_exists',            'sql_auto_increment',            ':group:end',        'sql_backquotes',        ':group:end',    ':group:' . __('Data'),        'sql_delayed',        'sql_ignore',        'sql_type',        'sql_insert_syntax',        'sql_max_query_size',        'sql_hex_for_blob',        'sql_utc_time'));$forms['Export']['CodeGen'] = array('Export' => array(    'codegen_format'));$forms['Export']['Csv'] = array('Export' => array(    ':group:' . __('CSV'),        'csv_separator',        'csv_enclosed',        'csv_escaped',        'csv_terminated',        'csv_null',        'csv_removeCRLF',        'csv_columns',        ':group:end',    ':group:' . __('CSV for MS Excel'),        'excel_null',        'excel_removeCRLF',        'excel_columns',        'excel_edition'));$forms['Export']['Latex'] = array('Export' => array(    'latex_caption',    'latex_structure_or_data',    ':group:' . __('Structure'),        'latex_structure_caption',        'latex_structure_continued_caption',        'latex_structure_label',        'latex_relation',        'latex_comments',        'latex_mime',        ':group:end',    ':group:' . __('Data'),        'latex_columns',        'latex_data_caption',        'latex_data_continued_caption',        'latex_data_label',        'latex_null'));$forms['Export']['Microsoft_Office'] = array('Export' => array(    ':group:' . __('Microsoft Word 2000'),        'htmlword_structure_or_data',        'htmlword_null',        'htmlword_columns'));$forms['Export']['Open_Document'] = array('Export' => array(    ':group:' . __('Open Document Spreadsheet'),        'ods_columns',        'ods_null',        ':group:end',    ':group:' . __('Open Document Text'),        'odt_structure_or_data',        ':group:' . __('Structure'),            'odt_relation',            'odt_comments',            'odt_mime',            ':group:end',        ':group:' . __('Data'),            'odt_columns',            'odt_null'));$forms['Export']['Texy'] = array('Export' => array(    'texytext_structure_or_data',    ':group:' . __('Data'),        'texytext_null',        'texytext_columns'));?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (! defined('PHPMYADMIN')) {    exit;}$ID_KEY      = 'noplugin';/** * Returns upload status. * * This is implementation when no webserver support exists, so it returns just zeroes. * * @param string $id * @return array|null */function PMA_getUploadStatus($id){    global $SESSION_KEY;    global $ID_KEY;    if (trim($id) == "") {        return null;    }    if (! array_key_exists($id, $_SESSION[$SESSION_KEY])) {        $_SESSION[$SESSION_KEY][$id] = array(                    'id'       => $id,                    'finished' => false,                    'percent'  => 0,                    'total'    => 0,                    'complete' => 0,                    'plugin'   => $ID_KEY        );    }    $ret = $_SESSION[$SESSION_KEY][$id];    return $ret;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * PHP interface to MimerSQL Validator * * Copyright 2002, 2003 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * All data is transported over HTTP-SOAP * And uses either the PEAR SOAP Module or PHP SOAP extension * * Install instructions for PEAR SOAP: * Make sure you have a really recent PHP with PEAR support * run this: "pear install Mail_Mime Net_DIME SOAP" * * @access   public * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Load SOAP client. */if (class_exists('SOAPClient')) {    $GLOBALS['sqlvalidator_error'] = false;    $GLOBALS['sqlvalidator_soap'] = 'PHP';} else {    @include_once 'SOAP/Client.php';    if (class_exists('SOAP_Client')) {        $GLOBALS['sqlvalidator_soap'] = 'PEAR';        $GLOBALS['sqlvalidator_error'] = false;    } else {        $GLOBALS['sqlvalidator_soap'] = 'NONE';        $GLOBALS['sqlvalidator_error'] = true;        PMA_warnMissingExtension('soap');    }}if (!$GLOBALS['sqlvalidator_error']) {    // Ok, we have SOAP Support, so let's use it!/** * @package PhpMyAdmin */    class PMA_SQLValidator    {        var $url;        var $service_name;        var $wsdl;        var $output_type;        var $username;        var $password;        var $calling_program;        var $calling_program_version;        var $target_dbms;        var $target_dbms_version;        var $connectionTechnology;        var $connection_technology_version;        var $interactive;        var $service_link = null;        var $session_data = null;        /**         * Private functions - You don't need to mess with these         */        /**         * Service opening         *         * @param string  URL of Mimer SQL Validator WSDL file         *         * @return object  Object to use         *         * @access private         */        function _openService($url)        {            if ($GLOBALS['sqlvalidator_soap'] == 'PHP') {                $obj = new SOAPClient($url);            } else {                $obj = new SOAP_Client($url, true);            }            return $obj;        } // end of the "openService()" function        /**         * Service initializer to connect to server         *         * @param object   Service object         * @param string   Username         * @param string   Password         * @param string   Name of calling program         * @param string   Version of calling program         * @param string   Target DBMS         * @param string   Version of target DBMS         * @param string   Connection Technology         * @param string   version of Connection Technology         * @param integer  boolean of 1/0 to specify if we are an interactive system         *         * @return object   stdClass return object with data         *         * @access private         */        function _openSession($obj, $username, $password,                                      $calling_program, $calling_program_version,                                      $target_dbms, $target_dbms_version,                                      $connection_technology, $connection_technology_version,                                      $interactive)        {            $use_array = array(                "a_userName" => $username,                "a_password" => $password,                "a_callingProgram" => $calling_program,                "a_callingProgramVersion" => $calling_program_version,                "a_targetDbms" => $target_dbms,                "a_targetDbmsVersion" => $target_dbms_version,                "a_connectionTechnology" => $connection_technology,                "a_connectionTechnologyVersion" => $connection_technology_version,                "a_interactive" => $interactive,            );            if ($GLOBALS['sqlvalidator_soap'] == 'PHP') {                $ret = $obj->__soapCall("openSession", $use_array);            } else {                $ret = $obj->call("openSession", $use_array);            }            return $ret;        } // end of the "_openSession()" function        /**         * Validator sytem call         *         * @param object  Service object         * @param object  Session object         * @param string  SQL Query to validate         * @param string  Data return type         *         * @return object  stClass return with data         *         * @access private         */        function _validateSQL($obj, $session, $sql, $method)        {            $use_array = array(                "a_sessionId" => $session->sessionId,                "a_sessionKey" => $session->sessionKey,                "a_SQL" => $sql,                "a_resultType" => $this->output_type,            );            if ($GLOBALS['sqlvalidator_soap'] == 'PHP') {                $res = $obj->__soapCall("validateSQL", $use_array);            } else {                $res = $obj->call("validateSQL", $use_array);            }            return $res;        } // end of the "validateSQL()" function        /**         * Validator sytem call         *         * @param string  SQL Query to validate         *         * @return object  stdClass return with data         *         * @access private         *         * @see    validateSQL()         */        function _validate($sql)        {            $ret = $this->_validateSQL($this->service_link, $this->session_data,                                               $sql, $this->output_type);            return $ret;        } // end of the "validate()" function        /**         * Public functions         */        /**         * Constructor         *         * @access public         */        function __construct()        {            $this->url                           = 'http://sqlvalidator.mimer.com/v1/services';            $this->service_name                  = 'SQL99Validator';            $this->wsdl                          = '?wsdl';            $this->output_type                   = 'html';            $this->username                      = 'anonymous';            $this->password                      = '';            $this->calling_program               = 'PHP_SQLValidator';            $this->calling_program_version       = PMA_VERSION;            $this->target_dbms                   = 'N/A';            $this->target_dbms_version           = 'N/A';            $this->connection_technology         = 'PHP';            $this->connection_technology_version = phpversion();            $this->interactive = 1;            $this->service_link = null;            $this->session_data = null;        } // end of the "PMA_SQLValidator()" function        /**         * Sets credentials         *         * @param string  the username         * @param string  the password         *         * @access public         */        function setCredentials($username, $password)        {            $this->username = $username;            $this->password = $password;        } // end of the "setCredentials()" function        /**         * Sets the calling program         *         * @param string  the calling program name         * @param string  the calling program revision         *         * @access public         */        function setCallingProgram($calling_program, $calling_program_version)        {            $this->calling_program         = $calling_program;            $this->calling_program_version = $calling_program_version;        } // end of the "setCallingProgram()" function        /**         * Appends the calling program         *         * @param string  the calling program name         * @param string  the calling program revision         *         * @access public         */        function appendCallingProgram($calling_program, $calling_program_version)        {            $this->calling_program         .= ' - ' . $calling_program;            $this->calling_program_version .= ' - ' . $calling_program_version;        } // end of the "appendCallingProgram()" function        /**         * Sets the target DBMS         *         * @param string  the target DBMS name         * @param string  the target DBMS revision         *         * @access public         */        function setTargetDbms($target_dbms, $target_dbms_version)        {            $this->target_dbms         = $target_dbms;            $this->target_dbms_version = $target_dbms_version;        } // end of the "setTargetDbms()" function        /**         * Appends the target DBMS         *         * @param string  the target DBMS name         * @param string  the target DBMS revision         *         * @access public         */        function appendTargetDbms($target_dbms, $target_dbms_version)        {            $this->target_dbms         .= ' - ' . $target_dbms;            $this->target_dbms_version .= ' - ' . $target_dbms_version;        } // end of the "appendTargetDbms()" function        /**         * Sets the connection technology used         *         * @param string  the connection technology name         * @param string  the connection technology revision         *         * @access public         */        function setConnectionTechnology($connection_technology, $connection_technology_version)        {            $this->connection_technology         = $connection_technology;            $this->connection_technology_version = $connection_technology_version;        } // end of the "setConnectionTechnology()" function        /**         * Appends the connection technology used         *         * @param string  the connection technology name         * @param string  the connection technology revision         *         * @access public         */        function appendConnectionTechnology($connection_technology, $connection_technology_version)        {            $this->connection_technology         .= ' - ' . $connection_technology;            $this->connection_technology_version .= ' - ' . $connection_technology_version;        } // end of the "appendConnectionTechnology()" function        /**         * Sets whether interactive mode should be used or not         *         * @param integer  whether interactive mode should be used or not         *         * @access public         */        function setInteractive($interactive)        {            $this->interactive = $interactive;        } // end of the "setInteractive()" function        /**         * Sets the output type to use         *         * @param string  the output type to use         *         * @access public         */        function setOutputType($output_type)        {            $this->output_type = $output_type;        } // end of the "setOutputType()" function        /**         * Starts service         *         * @access public         */        function startService()        {            $this->service_link = $this->_openService($this->url . '/' . $this->service_name . $this->wsdl);        } // end of the "startService()" function        /**         * Starts session         *         * @access public         */        function startSession()        {            $this->session_data = $this->_openSession($this->service_link, $this->username, $this->password,                                                              $this->calling_program, $this->calling_program_version,                                                              $this->target_dbms, $this->target_dbms_version,                                                              $this->connection_technology, $this->connection_technology_version,                                                              $this->interactive);            if (isset($this->session_data) && ($this->session_data != null)                && ($this->session_data->target != $this->url)) {                // Reopens the service on the new URL that was provided                $url = $this->session_data->target;                $this->startService();            }        } // end of the "startSession()" function        /**         * Do start service and session         *         * @access public         */        function start()        {            $this->startService();            $this->startSession();        } // end of the "start()" function        /**         * Call to determine just if a query is valid or not.         *         * @param string SQL statement to validate         *         * @return string Validator string from Mimer         *         * @see _validate         */        function isValid($sql)        {            $res = $this->_validate($sql);            return $res->standard;        } // end of the "isValid()" function        /**         * Call for complete validator response         *         * @param string SQL statement to validate         *         * @return string Validator string from Mimer         *         * @see _validate         */        function validationString($sql)        {            $res = $this->_validate($sql);            return $res->data;        } // end of the "validationString()" function    } // end class PMA_SQLValidator    //add an extra check to ensure that the class was defined without errors    if (!class_exists('PMA_SQLValidator')) {        $GLOBALS['sqlvalidator_error'] = true;    }} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * CSV import plugin for phpMyAdmin * * @todo    add an option for handling NULL values * @package PhpMyAdmin-Import * @subpackage CSV */if (! defined('PHPMYADMIN')) {    exit;}$analyze = false;if ($plugin_param !== 'table') {    $analyze = true;}if (isset($plugin_list)) {    $plugin_list['csv'] = array(        'text' => __('CSV'),        'extension' => 'csv',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'replace', 'text' => __('Replace table data with file')),            array('type' => 'bool', 'name' => 'ignore', 'text' => __('Do not abort on INSERT error')),            array('type' => 'text', 'name' => 'terminated', 'text' => __('Columns separated with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'enclosed', 'text' => __('Columns enclosed with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'escaped', 'text' => __('Columns escaped with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'new_line', 'text' => __('Lines terminated with:'), 'size' => 2),            ),        'options_text' => __('Options'),        );    if ($plugin_param !== 'table') {        $plugin_list['csv']['options'][]            = array('type' => 'bool', 'name' => 'col_names', 'text' => __('The first line of the file contains the table column names <i>(if this is unchecked, the first line will become part of the data)</i>'));    } else {        $hint = new PMA_Message(__('If the data in each row of the file is not in the same order as in the database, list the corresponding column names here. Column names must be separated by commas and not enclosed in quotations.'));        $plugin_list['csv']['options'][]            = array('type' => 'text', 'name' => 'columns', 'text' => __('Column names: ') . PMA_showHint($hint));    }    $plugin_list['csv']['options'][] = array('type' => 'end_group');    /* We do not define function when plugin is just queried for information above */    return;}$replacements = array(    '\\n'   => "\n",    '\\t'   => "\t",    '\\r'   => "\r",    );$csv_terminated = strtr($csv_terminated, $replacements);$csv_enclosed = strtr($csv_enclosed,  $replacements);$csv_escaped = strtr($csv_escaped, $replacements);$csv_new_line = strtr($csv_new_line, $replacements);$param_error = false;if (strlen($csv_terminated) != 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns terminated by'), false);    $error = true;    $param_error = true;    // The default dialog of MS Excel when generating a CSV produces a    // semi-colon-separated file with no chance of specifying the    // enclosing character. Thus, users who want to import this file    // tend to remove the enclosing character on the Import dialog.    // I could not find a test case where having no enclosing characters    // confuses this script.    // But the parser won't work correctly with strings so we allow just    // one character.} elseif (strlen($csv_enclosed) > 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns enclosed by'), false);    $error = true;    $param_error = true;} elseif (strlen($csv_escaped) != 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns escaped by'), false);    $error = true;    $param_error = true;} elseif (strlen($csv_new_line) != 1 && $csv_new_line != 'auto') {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Lines terminated by'), false);    $error = true;    $param_error = true;}// If there is an error in the parameters entered, indicate that immediately.if ($param_error) {    PMA_mysqlDie($message->getMessage(), '', '', $err_url);}$buffer = '';$required_fields = 0;if (!$analyze) {    if (isset($csv_replace)) {        $sql_template = 'REPLACE';    } else {        $sql_template = 'INSERT';        if (isset($csv_ignore)) {            $sql_template .= ' IGNORE';        }    }    $sql_template .= ' INTO ' . PMA_backquote($table);    $tmp_fields = PMA_DBI_get_columns($db, $table);    if (empty($csv_columns)) {        $fields = $tmp_fields;    } else {        $sql_template .= ' (';        $fields = array();        $tmp   = preg_split('/,( ?)/', $csv_columns);        foreach ($tmp as $key => $val) {            if (count($fields) > 0) {                $sql_template .= ', ';            }            /* Trim also `, if user already included backquoted fields */            $val = trim($val, " \t\r\n\0\x0B`");            $found = false;            foreach ($tmp_fields as $id => $field) {                if ($field['Field'] == $val) {                    $found = true;                    break;                }            }            if (!$found) {                $message = PMA_Message::error(__('Invalid column (%s) specified! Ensure that columns names are spelled correctly, separated by commas, and not enclosed in quotes.'));                $message->addParam($val);                $error = true;                break;            }            $fields[] = $field;            $sql_template .= PMA_backquote($val);        }        $sql_template .= ') ';    }    $required_fields = count($fields);    $sql_template .= ' VALUES (';}// Defaults for parser$i = 0;$len = 0;$line = 1;$lasti = -1;$values = array();$csv_finish = false;$tempRow = array();$rows = array();$col_names = array();$tables = array();$col_count = 0;$max_cols = 0;while (!($finished && $i >= $len) && !$error && !$timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        // subtract data we didn't handle yet and stop processing        $offset -= strlen($buffer);        break;    } elseif ($data === true) {        // Handle rest of buffer    } else {        // Append new data to buffer        $buffer .= $data;        unset($data);        // Do not parse string when we're not at the end and don't have new line inside        if (($csv_new_line == 'auto' && strpos($buffer, "\r") === false && strpos($buffer, "\n") === false)            || ($csv_new_line != 'auto' && strpos($buffer, $csv_new_line) === false)        ) {            continue;        }    }    // Current length of our buffer    $len = strlen($buffer);    // Currently parsed char    $ch = $buffer[$i];    while ($i < $len) {        // Deadlock protection        if ($lasti == $i && $lastlen == $len) {            $message = PMA_Message::error(__('Invalid format of CSV input on line %d.'));            $message->addParam($line);            $error = true;            break;        }        $lasti = $i;        $lastlen = $len;        // This can happen with auto EOL and \r at the end of buffer        if (!$csv_finish) {            // Grab empty field            if ($ch == $csv_terminated) {                if ($i == $len - 1) {                    break;                }                $values[] = '';                $i++;                $ch = $buffer[$i];                continue;            }            // Grab one field            $fallbacki = $i;            if ($ch == $csv_enclosed) {                if ($i == $len - 1) {                    break;                }                $need_end = true;                $i++;                $ch = $buffer[$i];            } else {                $need_end = false;            }            $fail = false;            $value = '';            while (($need_end && ($ch != $csv_enclosed || $csv_enclosed == $csv_escaped))             || (!$need_end && !($ch == $csv_terminated               || $ch == $csv_new_line || ($csv_new_line == 'auto'                && ($ch == "\r" || $ch == "\n"))))) {                if ($ch == $csv_escaped) {                    if ($i == $len - 1) {                        $fail = true;                        break;                    }                    $i++;                    $ch = $buffer[$i];                    if ($csv_enclosed == $csv_escaped && ($ch == $csv_terminated                     || $ch == $csv_new_line || ($csv_new_line == 'auto'                      && ($ch == "\r" || $ch == "\n")))) {                        break;                    }                }                $value .= $ch;                if ($i == $len - 1) {                    if (!$finished) {                        $fail = true;                    }                    break;                }                $i++;                $ch = $buffer[$i];            }            // unquoted NULL string            if (false === $need_end && $value === 'NULL') {                $value = null;            }            if ($fail) {                $i = $fallbacki;                $ch = $buffer[$i];                break;            }            // Need to strip trailing enclosing char?            if ($need_end && $ch == $csv_enclosed) {                if ($finished && $i == $len - 1) {                    $ch = null;                } elseif ($i == $len - 1) {                    $i = $fallbacki;                    $ch = $buffer[$i];                    break;                } else {                    $i++;                    $ch = $buffer[$i];                }            }            // Are we at the end?            if ($ch == $csv_new_line                || ($csv_new_line == 'auto' && ($ch == "\r" || $ch == "\n"))                || ($finished && $i == $len - 1)            ) {                $csv_finish = true;            }            // Go to next char            if ($ch == $csv_terminated) {                if ($i == $len - 1) {                    $i = $fallbacki;                    $ch = $buffer[$i];                    break;                }                $i++;                $ch = $buffer[$i];            }            // If everything went okay, store value            $values[] = $value;        }        // End of line        if ($csv_finish            || $ch == $csv_new_line            || ($csv_new_line == 'auto' && ($ch == "\r" || $ch == "\n"))        ) {            if ($csv_new_line == 'auto' && $ch == "\r") { // Handle "\r\n"                if ($i >= ($len - 2) && !$finished) {                    break; // We need more data to decide new line                }                if ($buffer[$i + 1] == "\n") {                    $i++;                }            }            // We didn't parse value till the end of line, so there was empty one            if (!$csv_finish) {                $values[] = '';            }            if ($analyze) {                foreach ($values as $ley => $val) {                    $tempRow[] = $val;                    ++$col_count;                }                if ($col_count > $max_cols) {                    $max_cols = $col_count;                }                $col_count = 0;                $rows[] = $tempRow;                $tempRow = array();            } else {                // Do we have correct count of values?                if (count($values) != $required_fields) {                    // Hack for excel                    if ($values[count($values) - 1] == ';') {                        unset($values[count($values) - 1]);                    } else {                        $message = PMA_Message::error(__('Invalid column count in CSV input on line %d.'));                        $message->addParam($line);                        $error = true;                        break;                    }                }                $first = true;                $sql = $sql_template;                foreach ($values as $key => $val) {                    if (!$first) {                        $sql .= ', ';                    }                    if ($val === null) {                        $sql .= 'NULL';                    } else {                        $sql .= '\'' . PMA_sqlAddSlashes($val) . '\'';                    }                    $first = false;                }                $sql .= ')';                /**                 * @todo maybe we could add original line to verbose SQL in comment                 */                PMA_importRunQuery($sql, $sql);            }            $line++;            $csv_finish = false;            $values = array();            $buffer = substr($buffer, $i + 1);            $len = strlen($buffer);            $i = 0;            $lasti = -1;            $ch = $buffer[0];        }    } // End of parser loop} // End of import loopif ($analyze) {    /* Fill out all rows */    $num_rows = count($rows);    for ($i = 0; $i < $num_rows; ++$i) {        for ($j = count($rows[$i]); $j < $max_cols; ++$j) {            $rows[$i][] = 'NULL';        }    }    if (isset($_REQUEST['csv_col_names'])) {        $col_names = array_splice($rows, 0, 1);        $col_names = $col_names[0];    }    if ((isset($col_names) && count($col_names) != $max_cols)        || ! isset($col_names)    ) {        // Fill out column names        for ($i = 0; $i < $max_cols; ++$i) {            $col_names[] = 'COL '.($i+1);        }    }    if (strlen($db)) {        $result = PMA_DBI_fetch_result('SHOW TABLES');        $tbl_name = 'TABLE '.(count($result) + 1);    } else {        $tbl_name = 'TBL_NAME';    }    $tables[] = array($tbl_name, $col_names, $rows);    /* Obtain the best-fit MySQL types for each column */    $analyses = array();    $analyses[] = PMA_analyzeTable($tables[0]);    /**     * string $db_name (no backquotes)     *     * array $table = array(table_name, array() column_names, array()() rows)     * array $tables = array of "$table"s     *     * array $analysis = array(array() column_types, array() column_sizes)     * array $analyses = array of "$analysis"s     *     * array $create = array of SQL strings     *     * array $options = an associative array of options     */    /* Set database name to the currently selected one, if applicable */    if (strlen($db)) {        $db_name = $db;        $options = array('create_db' => false);    } else {        $db_name = 'CSV_DB';        $options = null;    }    /* Non-applicable parameters */    $create = null;    /* Created and execute necessary SQL statements from data */    PMA_buildSQL($db_name, $tables, $analyses, $create, $options);    unset($tables);    unset($analyses);}// Commit any possible data in buffersPMA_importRunQuery();if (count($values) != 0 && !$error) {    $message = PMA_Message::error(__('Invalid format of CSV input on line %d.'));    $message->addParam($line);    $error = true;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer */require_once './libraries/pmd_common.php';/** * If called directly from the designer, first save the positions */if (! isset($scale)) {    $no_die_save_pos = 1;    include_once 'pmd_save_pos.php';}if (isset($mode)) {    if ('create_export' != $mode && empty($pdf_page_number)) {        die("<script>alert('Pages not found!');history.go(-2);</script>");    }    $pmd_table = PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']);    $pma_table = PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_coords']);    $scale_q = PMA_sqlAddSlashes($scale);    if ('create_export' == $mode) {        $pdf_page_number = PMA_REL_create_page($newpage, $cfgRelation, $db);        if ($pdf_page_number > 0) {            $message = PMA_Message::success(__('Page has been created'));            $mode = 'export';        } else {            $message = PMA_Message::error(__('Page creation failed'));        }    }    $pdf_page_number_q = PMA_sqlAddSlashes($pdf_page_number);    if ('export' == $mode) {        $sql = "REPLACE INTO " . $pma_table . " (db_name, table_name, pdf_page_number, x, y) SELECT db_name, table_name, " . $pdf_page_number_q . ", ROUND(x/" . $scale_q . ") , ROUND(y/" . $scale_q . ") y FROM " . $pmd_table . " WHERE db_name = '" . PMA_sqlAddSlashes($db) . "'";        PMA_query_as_controluser($sql, true, PMA_DBI_QUERY_STORE);    }    if ('import' == $mode) {        PMA_query_as_controluser(        'UPDATE ' . $pma_table . ',' . $pmd_table .        ' SET ' . $pmd_table . '.`x`= ' . $pma_table . '.`x` * '. $scale_q . ',        ' . $pmd_table . '.`y`= ' . $pma_table . '.`y` * '. $scale_q .'        WHERE        ' . $pmd_table . '.`db_name`=' . $pma_table . '.`db_name`        AND        ' . $pmd_table . '.`table_name` = ' . $pma_table . '.`table_name`        AND        ' . $pmd_table . '.`db_name`=\''. PMA_sqlAddSlashes($db) .'\'        AND pdf_page_number = ' . $pdf_page_number_q . ';', true, PMA_DBI_QUERY_STORE);    }}// no need to use pmd/stylesrequire_once './libraries/header_meta_style.inc.php';?></head><body><br><div><?php    if (!empty($message)) {        $message->display();    }?>  <form name="form1" method="post" action="pmd_pdf.php"><?phpecho PMA_generate_common_hidden_inputs($db);echo '<div>';echo '<fieldset><legend>' . __('Import/Export coordinates for PDF schema') . '</legend>';$choices = array();$table_info_result = PMA_query_as_controluser('SELECT * FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'');if (PMA_DBI_num_rows($table_info_result) > 0) {    echo '<p>' . __('Page') . ':';    echo '<select name="pdf_page_number">';    while ($page = PMA_DBI_fetch_assoc($table_info_result)) {        echo '<option value="' . $page['page_nr'] . '">';        echo htmlspecialchars($page['page_descr']);        echo '</option>';    }    echo '</select>';    echo '</p>';    $choices['import'] = __('Import from selected page');    $choices['export'] = __('Export to selected page');}$choices['create_export'] = __('Create a page and export to it');if (1 == count($choices)) {    echo $choices['create_export'];    echo '<input type="hidden" name="mode" value="create_export" />';} else {    PMA_display_html_radio('mode', $choices, $checked_choice = '', $line_break = true, $escape_label = false, $class = '');}echo '<br />';echo '<label for="newpage">' . __('New page name: ') . '</label>';echo '<input id="newpage" type="text" name="newpage" />';echo '<p>' . __('Export/Import to scale') . ':';?>      <select name="scale">        <option value="1">1:1</option>        <option value="2">1:2</option>        <option value="3" selected>1:3 (<?php echo __('recommended'); ?>)</option>        <option value="4">1:4</option>        <option value="5">1:5</option>        </select>      </p>      <input type="submit" value="<?php echo __('Go'); ?>">    </fieldset>    </div>  </form></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * display the binary logs and the content of the selected * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work, provides $binary_logs */require_once './libraries/server_common.inc.php';/** * Displays the links */require_once './libraries/server_links.inc.php';$url_params = array();/** * Need to find the real end of rows? */if (! isset($_REQUEST['pos'])) {    $pos = 0;} else {    /* We need this to be a integer */    $pos = (int) $_REQUEST['pos'];}if (! isset($_REQUEST['log']) || ! array_key_exists($_REQUEST['log'], $binary_logs)) {    $_REQUEST['log'] = '';} else {    $url_params['log'] = $_REQUEST['log'];}$sql_query = 'SHOW BINLOG EVENTS';if (! empty($_REQUEST['log'])) {    $sql_query .= ' IN \'' . $_REQUEST['log'] . '\'';}if ($GLOBALS['cfg']['MaxRows'] !== 'all') {    $sql_query .= ' LIMIT ' . $pos . ', ' . (int) $GLOBALS['cfg']['MaxRows'];}/** * Sends the query */$result = PMA_DBI_query($sql_query);/** * prepare some vars for displaying the result table */// Gets the list of fields propertiesif (isset($result) && $result) {    $num_rows = PMA_DBI_num_rows($result);} else {    $num_rows = 0;}if (empty($_REQUEST['dontlimitchars'])) {    $dontlimitchars = false;} else {    $dontlimitchars = true;    $url_params['dontlimitchars'] = 1;}/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('s_tbl.png') : '')   . '    ' . __('Binary log') . "\n"   . '</h2>' . "\n";/** * Display log selector. */if (count($binary_logs) > 1) {    echo '<form action="server_binlog.php" method="get">';    echo PMA_generate_common_hidden_inputs($url_params);    echo '<fieldset><legend>';    echo __('Select binary log to view');    echo '</legend><select name="log">';    $full_size = 0;    foreach ($binary_logs as $each_log) {        echo '<option value="' . $each_log['Log_name'] . '"';        if ($each_log['Log_name'] == $_REQUEST['log']) {            echo ' selected="selected"';        }        echo '>' . $each_log['Log_name'];        if (isset($each_log['File_size'])) {            $full_size += $each_log['File_size'];            echo ' (' . implode(' ', PMA_formatByteDown($each_log['File_size'], 3, 2)) . ')';        }        echo '</option>';    }    echo '</select> ';    echo count($binary_logs) . ' ' . __('Files') . ', ';    if ($full_size > 0) {        echo implode(' ', PMA_formatByteDown($full_size));    }    echo '</fieldset>';    echo '<fieldset class="tblFooters">';    echo '<input type="submit" value="' . __('Go') . '" />';    echo '</fieldset>';    echo '</form>';}PMA_showMessage(PMA_Message::success());/** * Displays the page */?><table border="0" cellpadding="2" cellspacing="1"><thead><tr>    <td colspan="6" align="center"><?php// we do not now how much rows are in the binlog// so we can just force 'NEXT' buttonif ($pos > 0) {    $this_url_params = $url_params;    if ($pos > $GLOBALS['cfg']['MaxRows']) {        $this_url_params['pos'] = $pos - $GLOBALS['cfg']['MaxRows'];    }    echo '<a href="./server_binlog.php' . PMA_generate_common_url($this_url_params) . '"';    if ($GLOBALS['cfg']['NavigationBarIconic']) {        echo ' title="' . _pgettext('Previous page', 'Previous') . '">';    } else {        echo '>' . _pgettext('Previous page', 'Previous');    } // end if... else...    echo ' &lt; </a> - ';}$this_url_params = $url_params;if ($pos > 0) {    $this_url_params['pos'] = $pos;}if ($dontlimitchars) {    unset($this_url_params['dontlimitchars']);    ?>        <a href="./server_binlog.php<?php echo PMA_generate_common_url($this_url_params); ?>"            title="<?php __('Truncate Shown Queries'); ?>">                <img src="<?php echo $pmaThemeImage; ?>s_partialtext.png"                    alt="<?php echo __('Truncate Shown Queries'); ?>" /></a>    <?php} else {    $this_url_params['dontlimitchars'] = 1;    ?>        <a href="./server_binlog.php<?php echo PMA_generate_common_url($this_url_params); ?>"            title="<?php __('Show Full Queries'); ?>">                <img src="<?php echo $pmaThemeImage; ?>s_fulltext.png"                    alt="<?php echo __('Show Full Queries'); ?>" /></a>    <?php}// we do not now how much rows are in the binlog// so we can just force 'NEXT' buttonif ($num_rows >= $GLOBALS['cfg']['MaxRows']) {    $this_url_params = $url_params;    $this_url_params['pos'] = $pos + $GLOBALS['cfg']['MaxRows'];    echo ' - <a href="./server_binlog.php' . PMA_generate_common_url($this_url_params) . '"';    if ($GLOBALS['cfg']['NavigationBarIconic']) {        echo ' title="' . _pgettext('Next page', 'Next') . '">';    } else {        echo '>' . _pgettext('Next page', 'Next');    } // end if... else...    echo ' &gt; </a>';}?>    </td></tr><tr>    <th><?php echo __('Log name'); ?></th>    <th><?php echo __('Position'); ?></th>    <th><?php echo __('Event type'); ?></th>    <th><?php echo __('Server ID'); ?></th>    <th><?php echo __('Original position'); ?></th>    <th><?php echo __('Information'); ?></th></tr></thead><tbody><?php$odd_row = true;while ($value = PMA_DBI_fetch_assoc($result)) {    if (! $dontlimitchars && PMA_strlen($value['Info']) > $GLOBALS['cfg']['LimitChars']) {        $value['Info'] = PMA_substr($value['Info'], 0, $GLOBALS['cfg']['LimitChars']) . '...';    }    ?><tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">    <td>&nbsp;<?php echo $value['Log_name']; ?>&nbsp;</td>    <td align="right">&nbsp;<?php echo $value['Pos']; ?>&nbsp;</td>    <td>&nbsp;<?php echo $value['Event_type']; ?>&nbsp;</td>    <td align="right">&nbsp;<?php echo $value['Server_id']; ?>&nbsp;</td>    <td align="right">&nbsp;<?php echo isset($value['Orig_log_pos']) ? $value['Orig_log_pos'] : $value['End_log_pos']; ?>&nbsp;</td>    <td>&nbsp;<?php echo htmlspecialchars($value['Info']); ?>&nbsp;</td></tr>    <?php    $odd_row = !$odd_row;}?></tbody></table><?php/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used with the bookmark feature * * @package PhpMyAdmin *//** * Defines the bookmark parameters for the current user * * @return  array    the bookmark parameters for the current user * @access  public */function PMA_Bookmark_getParams(){    static $cfgBookmark = null;    if (null !== $cfgBookmark) {        return $cfgBookmark;    }    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['bookmarkwork']) {        $cfgBookmark = array(            'user'  => $GLOBALS['cfg']['Server']['user'],            'db'    => $GLOBALS['cfg']['Server']['pmadb'],            'table' => $GLOBALS['cfg']['Server']['bookmarktable'],        );    } else {        $cfgBookmark = false;    }    return $cfgBookmark;} // end of the 'PMA_Bookmark_getParams()' function/** * Gets the list of bookmarks defined for the current database * * @global  resource  the controluser db connection handle * * @param string    the current database name * * @return  array     the bookmarks list (key as index, label as value) * * @access  public */function PMA_Bookmark_getList($db){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return array();    }    $query  = 'SELECT label, id FROM '. PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])            . ' WHERE dbase = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND user = \'' . PMA_sqlAddSlashes($cfgBookmark['user']) . '\''            . ' ORDER BY label';    $per_user = PMA_DBI_fetch_result($query, 'id', 'label', $controllink, PMA_DBI_QUERY_STORE);    $query  = 'SELECT label, id FROM '. PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])            . ' WHERE dbase = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND user = \'\''            . ' ORDER BY label';    $global = PMA_DBI_fetch_result($query, 'id', 'label', $controllink, PMA_DBI_QUERY_STORE);    foreach ($global as $key => $val) {        $global[$key] = $val . ' (' . __('shared') . ')';    }    $ret = $global + $per_user;    asort($ret);    return $ret;} // end of the 'PMA_Bookmark_getList()' function/** * Gets the sql command from a bookmark * * @global  resource  the controluser db connection handle * * @param string    the current database name * @param mixed     the id of the bookmark to get * @param string    which field to look up the $id * @param boolean  true: get all bookmarks regardless of the owning user * @param boolean   whether to ignore bookmarks with no user * * @return  string    the sql query * * @access  public */function PMA_Bookmark_get($db, $id, $id_field = 'id', $action_bookmark_all = false, $exact_user_match = false){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return '';    }    $query = 'SELECT query FROM ' . PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])        . ' WHERE dbase = \'' . PMA_sqlAddSlashes($db) . '\'';    if (!$action_bookmark_all) {        $query .= ' AND (user = \'' . PMA_sqlAddSlashes($cfgBookmark['user']) . '\'';        if (!$exact_user_match) {            $query .= ' OR user = \'\'';        }        $query .= ')';    }    $query .= ' AND ' . PMA_backquote($id_field) . ' = ' . $id;    return PMA_DBI_fetch_value($query, 0, 0, $controllink);} // end of the 'PMA_Bookmark_get()' function/** * Adds a bookmark * * @global  resource  the controluser db connection handle * * @param array     the properties of the bookmark to add; here, *                    $fields['query'] is urlencoded * @param boolean   whether to make the bookmark available for all users * * @return  boolean   whether the INSERT succeeds or not * * @access  public */function PMA_Bookmark_save($fields, $all_users = false){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return false;    }    $query = 'INSERT INTO ' . PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])           . ' (id, dbase, user, query, label) VALUES (NULL, \'' . PMA_sqlAddSlashes($fields['dbase']) . '\', \'' . ($all_users ? '' : PMA_sqlAddSlashes($fields['user'])) . '\', \'' . PMA_sqlAddSlashes(urldecode($fields['query'])) . '\', \'' . PMA_sqlAddSlashes($fields['label']) . '\')';    return PMA_DBI_query($query, $controllink);} // end of the 'PMA_Bookmark_save()' function/** * Deletes a bookmark * * @global  resource  the controluser db connection handle * * @param string   the current database name * @param integer  the id of the bookmark to get * * @access  public */function PMA_Bookmark_delete($db, $id){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return false;    }    $query  = 'DELETE FROM ' . PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])            . ' WHERE (user = \'' . PMA_sqlAddSlashes($cfgBookmark['user']) . '\''            . '        OR user = \'\')'            . ' AND id = ' . $id;    return PMA_DBI_try_query($query, $controllink);} // end of the 'PMA_Bookmark_delete()' function/** * Bookmark Support */$GLOBALS['cfg']['Bookmark'] = PMA_Bookmark_getParams();?>
