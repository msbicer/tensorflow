<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface to the classic MySQL extension * * @package PhpMyAdmin-DBI-MySQL */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/logging.lib.php';/** * MySQL client API */if (! defined('PMA_MYSQL_CLIENT_API')) {    $client_api = explode('.', mysql_get_client_info());    define('PMA_MYSQL_CLIENT_API', (int)sprintf('%d%02d%02d', $client_api[0], $client_api[1], intval($client_api[2])));    unset($client_api);}/** * Helper function for connecting to the database server * * @param   string  $server * @param   string  $user * @param   string  $password * @param   int     $client_flags * @param   bool    $persistent * @return  mixed   false on error or a mysql connection resource on success */function PMA_DBI_real_connect($server, $user, $password, $client_flags, $persistent = false){    global $cfg;    if (empty($client_flags)) {        if ($cfg['PersistentConnections'] || $persistent) {            $link = @mysql_pconnect($server, $user, $password);        } else {            $link = @mysql_connect($server, $user, $password);        }    } else {        if ($cfg['PersistentConnections'] || $persistent) {            $link = @mysql_pconnect($server, $user, $password, $client_flags);        } else {            $link = @mysql_connect($server, $user, $password, false, $client_flags);        }    }    return $link;}/** * connects to the database server * * @param   string  $user           mysql user name * @param   string  $password       mysql user password * @param   bool    $is_controluser * @param   array   $server host/port/socket/persistent * @param   bool    $auxiliary_connection (when true, don't go back to login if connection fails) * @return  mixed   false on error or a mysqli object on success */function PMA_DBI_connect($user, $password, $is_controluser = false, $server = null, $auxiliary_connection = false){    global $cfg;    if ($server) {        $server_port = (empty($server['port']))            ? ''            : ':' . (int)$server['port'];        $server_socket = (empty($server['socket']))            ? ''            : ':' . $server['socket'];    } else {        $server_port   = (empty($cfg['Server']['port']))            ? ''            : ':' . (int)$cfg['Server']['port'];        $server_socket = (empty($cfg['Server']['socket']))            ? ''            : ':' . $cfg['Server']['socket'];    }    $client_flags = 0;    // always use CLIENT_LOCAL_FILES as defined in mysql_com.h    // for the case where the client library was not compiled    // with --enable-local-infile    $client_flags |= 128;    /* Optionally compress connection */    if (defined('MYSQL_CLIENT_COMPRESS') && $cfg['Server']['compress']) {        $client_flags |= MYSQL_CLIENT_COMPRESS;    }    /* Optionally enable SSL */    if (defined('MYSQL_CLIENT_SSL') && $cfg['Server']['ssl']) {        $client_flags |= MYSQL_CLIENT_SSL;    }    if (!$server) {        $link = PMA_DBI_real_connect($cfg['Server']['host'] . $server_port . $server_socket, $user, $password, empty($client_flags) ? null : $client_flags);      // Retry with empty password if we're allowed to        if (empty($link) && $cfg['Server']['nopassword'] && !$is_controluser) {            $link = PMA_DBI_real_connect($cfg['Server']['host'] . $server_port . $server_socket, $user, '', empty($client_flags) ? null : $client_flags);        }    } else {        if (!isset($server['host'])) {            $link = PMA_DBI_real_connect($server_socket, $user, $password, null);        } else {            $link = PMA_DBI_real_connect($server['host'] . $server_port . $server_socket, $user, $password, null);        }    }    if (empty($link)) {        if ($is_controluser) {            trigger_error(__('Connection for controluser as defined in your configuration failed.'), E_USER_WARNING);            return false;        }        // we could be calling PMA_DBI_connect() to connect to another        // server, for example in the Synchronize feature, so do not        // go back to main login if it fails        if (! $auxiliary_connection) {            PMA_log_user($user, 'mysql-denied');            PMA_auth_fails();        } else {            return false;        }    } // end if    if (! $server) {        PMA_DBI_postConnect($link, $is_controluser);    }    return $link;}/** * selects given database * * @param string    $dbname  name of db to select * @param resource  $link    mysql link resource * @return bool */function PMA_DBI_select_db($dbname, $link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_select_db($dbname, $link);}/** * runs a query and returns the result * * @param string    $query    query to run * @param resource  $link     mysql link resource * @param int       $options * @return mixed */function PMA_DBI_real_query($query, $link, $options){    if ($options == ($options | PMA_DBI_QUERY_STORE)) {        return mysql_query($query, $link);    } elseif ($options == ($options | PMA_DBI_QUERY_UNBUFFERED)) {        return mysql_unbuffered_query($query, $link);    } else {        return mysql_query($query, $link);    }}/** * returns array of rows with associative and numeric keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_array($result){    return mysql_fetch_array($result, MYSQL_BOTH);}/** * returns array of rows with associative keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_assoc($result){    return mysql_fetch_array($result, MYSQL_ASSOC);}/** * returns array of rows with numeric keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_row($result){    return mysql_fetch_array($result, MYSQL_NUM);}/** * Adjusts the result pointer to an arbitrary row in the result * * @param   $result * @param   $offset * @return  bool true on success, false on failure */function PMA_DBI_data_seek($result, $offset){    return mysql_data_seek($result, $offset);}/** * Frees memory associated with the result * * @param  resource  $result */function PMA_DBI_free_result($result){    if (is_resource($result) && get_resource_type($result) === 'mysql result') {        mysql_free_result($result);    }}/** * Check if there are any more query results from a multi query * * @return  bool         false */function PMA_DBI_more_results(){    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Prepare next result from multi_query * * @return  boo         false */function PMA_DBI_next_result(){    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Returns a string representing the type of connection used * * @param   resource  $link  mysql link * @return  string          type of connection used */function PMA_DBI_get_host_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_get_host_info($link);}/** * Returns the version of the MySQL protocol used * * @param   resource  $link  mysql link * @return  int         version of the MySQL protocol used */function PMA_DBI_get_proto_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_get_proto_info($link);}/** * returns a string that represents the client library version * * @return  string          MySQL client library version */function PMA_DBI_get_client_info(){    return mysql_get_client_info();}/** * returns last error message or false if no errors occured * * @param   resource  $link  mysql link * @return  string|bool  $error or false */function PMA_DBI_getError($link = null){    $GLOBALS['errno'] = 0;    /* Treat false same as null because of controllink */    if ($link === false) {        $link = null;    }    if (null === $link && isset($GLOBALS['userlink'])) {        $link =& $GLOBALS['userlink'];// Do not stop now. On the initial connection, we don't have a $link,// we don't have a $GLOBALS['userlink'], but we can catch the error code//    } else {//            return false;    }    if (null !== $link && false !== $link) {        $error_number = mysql_errno($link);        $error_message = mysql_error($link);    } else {        $error_number = mysql_errno();        $error_message = mysql_error();    }    if (0 == $error_number) {        return false;    }    // keep the error number for further check after the call to PMA_DBI_getError()    $GLOBALS['errno'] = $error_number;    return PMA_DBI_formatError($error_number, $error_message);}/** * returns the number of rows returned by last query * * @param   resource  $result * @return  string|int */function PMA_DBI_num_rows($result){    if (!is_bool($result)) {        return mysql_num_rows($result);    } else {        return 0;    }}/** * returns last inserted auto_increment id for given $link or $GLOBALS['userlink'] * * @param   resource  $link  the mysql object * @return  string|int */function PMA_DBI_insert_id($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    // If the primary key is BIGINT we get an incorrect result    // (sometimes negative, sometimes positive)    // and in the present function we don't know if the PK is BIGINT    // so better play safe and use LAST_INSERT_ID()    //    return PMA_DBI_fetch_value('SELECT LAST_INSERT_ID();', 0, 0, $link);}/** * returns the number of rows affected by last query * * @param   resource  $link            the mysql object * @param   bool      $get_from_cache * @return  string|int */function PMA_DBI_affected_rows($link = null, $get_from_cache = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($get_from_cache) {        return $GLOBALS['cached_affected_rows'];    } else {        return mysql_affected_rows($link);    }}/** * returns metainfo for fields in $result * * @todo add missing keys like in mysqli_query (decimals) * @param   resource  $result * @return  array  meta info for fields in $result */function PMA_DBI_get_fields_meta($result){    $fields       = array();    $num_fields   = mysql_num_fields($result);    for ($i = 0; $i < $num_fields; $i++) {        $field = mysql_fetch_field($result, $i);        $field->flags = mysql_field_flags($result, $i);        $field->orgtable = mysql_field_table($result, $i);        $field->orgname = mysql_field_name($result, $i);        $fields[] = $field;    }    return $fields;}/** * return number of fields in given $result * * @param   resource  $result * @return  int  field count */function PMA_DBI_num_fields($result){    return mysql_num_fields($result);}/** * returns the length of the given field $i in $result * * @param   resource  $result * @param   int       $i       field * @return  int  length of field */function PMA_DBI_field_len($result, $i){    return mysql_field_len($result, $i);}/** * returns name of $i. field in $result * * @param   resource  $result * @param   int       $i       field * @return  string  name of $i. field in $result */function PMA_DBI_field_name($result, $i){    return mysql_field_name($result, $i);}/** * returns concatenated string of human readable field flags * * @param   resource  $result * @param   int       $i       field * @return  string  field flags */function PMA_DBI_field_flags($result, $i){    return mysql_field_flags($result, $i);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to export a set of queries to a MS Word document * * @package PhpMyAdmin-Export * @subpackage HTMLWord */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['htmlword'] = array(        'text' => __('Microsoft Word 2000'),        'extension' => 'doc',        'mime_type' => 'application/vnd.ms-word',        'force_file' => true,        'options' => array(            /* what to dump (structure/data/both) */            array('type' => 'begin_group', 'name' => 'dump_what', 'text' => __('Dump table')),            array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data'))),            array('type' => 'end_group'),            /* data options */            array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure'),            array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:')),            array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),            array('type' => 'end_group'),            ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return PMA_exportOutputHandler('</body></html>');    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        global $charset_of_file;        return PMA_exportOutputHandler('<html xmlns:o="urn:schemas-microsoft-com:office:office"    xmlns:x="urn:schemas-microsoft-com:office:word"    xmlns="http://www.w3.org/TR/REC-html40">    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">    <html>    <head>        <meta http-equiv="Content-type" content="text/html;charset=' . (isset($charset_of_file) ? $charset_of_file : 'utf-8') . '" />    </head>    <body>');    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return PMA_exportOutputHandler('<h1>' . __('Database') . ' ' . htmlspecialchars($db) . '</h1>');    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in HTML (Microsoft Word) format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $what;        if (! PMA_exportOutputHandler('<h2>' . __('Dumping data for table') . ' ' . htmlspecialchars($table) . '</h2>')) {            return false;        }        if (! PMA_exportOutputHandler('<table class="width100" cellspacing="1">')) {            return false;        }        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        // If required, get fields name at the first line        if (isset($GLOBALS['htmlword_columns'])) {            $schema_insert = '<tr class="print-category">';            for ($i = 0; $i < $fields_cnt; $i++) {                $schema_insert .= '<td class="print"><b>' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i))) . '</b></td>';            } // end for            $schema_insert .= '</tr>';            if (! PMA_exportOutputHandler($schema_insert)) {                return false;            }        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $schema_insert = '<tr class="print-category">';            for ($j = 0; $j < $fields_cnt; $j++) {                if (! isset($row[$j]) || is_null($row[$j])) {                    $value = $GLOBALS[$what . '_null'];                } elseif ($row[$j] == '0' || $row[$j] != '') {                    $value = $row[$j];                } else {                    $value = '';                }                $schema_insert .= '<td class="print">' . htmlspecialchars($value) . '</td>';            } // end for            $schema_insert .= '</tr>';            if (! PMA_exportOutputHandler($schema_insert)) {                return false;            }        } // end while        PMA_DBI_free_result($result);        if (! PMA_exportOutputHandler('</table>')) {            return false;        }        return true;    }    /**     * Outputs table's structure     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         the end of line sequence     * @param string  $error_url    the url to go back in case of error     * @param bool    $do_relation  whether to include relation comments     * @param bool    $do_comments  whether to include the pmadb-style column comments     *                                as comments in the structure; this is deprecated     *                                but the parameter is left here because export.php     *                                calls PMA_exportStructure() also for other export     *                                types which use this parameter     * @param bool    $do_mime      whether to include mime comments     * @param bool    $dates        whether to include creation/update/check dates     * @param string  $export_mode  'create_table', 'triggers', 'create_view', 'stand_in'     * @param string  $export_type  'server', 'database', 'table'     * @return  bool      Whether it succeeded     *     * @access  public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        if (! PMA_exportOutputHandler('<h2>' . __('Table structure for table') . ' ' . htmlspecialchars($table) . '</h2>')) {            return false;        }        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        if (! PMA_exportOutputHandler('<table class="width100" cellspacing="1">')) {            return false;        }        $columns_cnt = 4;        if ($do_relation && $have_rel) {            $columns_cnt++;        }        if ($do_comments && $cfgRelation['commwork']) {            $columns_cnt++;        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;        }        $schema_insert = '<tr class="print-category">';        $schema_insert .= '<th class="print">' . __('Column') . '</th>';        $schema_insert .= '<td class="print"><b>' . __('Type') . '</b></td>';        $schema_insert .= '<td class="print"><b>' . __('Null') . '</b></td>';        $schema_insert .= '<td class="print"><b>' . __('Default') . '</b></td>';        if ($do_relation && $have_rel) {            $schema_insert .= '<td class="print"><b>' . __('Links to') . '</b></td>';        }        if ($do_comments) {            $schema_insert .= '<td class="print"><b>' . __('Comments') . '</b></td>';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $schema_insert .= '<td class="print"><b>' . htmlspecialchars('MIME') . '</b></td>';            $mime_map = PMA_getMIME($db, $table, true);        }        $schema_insert .= '</tr>';        if (! PMA_exportOutputHandler($schema_insert)) {            return false;        }        $columns = PMA_DBI_get_columns($db, $table);        foreach ($columns as $column) {            $schema_insert = '<tr class="print-category">';            $extracted_fieldspec = PMA_extractFieldSpec($column['Type']);            $type = htmlspecialchars($extracted_fieldspec['print_type']);            if (empty($type)) {                $type     = '&nbsp;';            }            if (! isset($column['Default'])) {                if ($column['Null'] != 'NO') {                    $column['Default'] = 'NULL';                }            }            $fmt_pre = '';            $fmt_post = '';            if (in_array($column['Field'], $unique_keys)) {                $fmt_pre = '<b>' . $fmt_pre;                $fmt_post = $fmt_post . '</b>';            }            if ($column['Key'] == 'PRI') {                $fmt_pre = '<i>' . $fmt_pre;                $fmt_post = $fmt_post . '</i>';            }            $schema_insert .= '<td class="print">' . $fmt_pre . htmlspecialchars($column['Field']) . $fmt_post . '</td>';            $schema_insert .= '<td class="print">' . htmlspecialchars($type) . '</td>';            $schema_insert .= '<td class="print">' . (($column['Null'] == '' || $column['Null'] == 'NO') ? __('No') : __('Yes')) . '</td>';            $schema_insert .= '<td class="print">' . htmlspecialchars(isset($column['Default']) ? $column['Default'] : '') . '</td>';            $field_name = $column['Field'];            if ($do_relation && $have_rel) {                $schema_insert .= '<td class="print">' . (isset($res_rel[$field_name]) ? htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' (' . $res_rel[$field_name]['foreign_field'] . ')') : '') . '</td>';            }            if ($do_comments && $cfgRelation['commwork']) {                $schema_insert .= '<td class="print">' . (isset($comments[$field_name]) ? htmlspecialchars($comments[$field_name]) : '') . '</td>';            }            if ($do_mime && $cfgRelation['mimework']) {                $schema_insert .= '<td class="print">' . (isset($mime_map[$field_name]) ? htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype'])) : '') . '</td>';            }            $schema_insert .= '</tr>';            if (! PMA_exportOutputHandler($schema_insert)) {                return false;            }        } // end while        return PMA_exportOutputHandler('</table>');    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run cookie based authentication. * * @package PhpMyAdmin-Auth-Cookie */if (! defined('PHPMYADMIN')) {    exit;}/** * Swekey authentication functions. */require './libraries/auth/swekey/swekey.auth.lib.php';if (function_exists('mcrypt_encrypt')) {    /**     * Uses faster mcrypt library if available     * (as this is not called from anywhere else, put the code in-line     *  for faster execution)     */    /**     * Initialization     * Store the initialization vector because it will be needed for     * further decryption. I don't think necessary to have one iv     * per server so I don't put the server number in the cookie name.     */    if (empty($_COOKIE['pma_mcrypt_iv']) || false === ($iv = base64_decode($_COOKIE['pma_mcrypt_iv'], true))) {        srand((double) microtime() * 1000000);        $td = mcrypt_module_open(MCRYPT_BLOWFISH, '', MCRYPT_MODE_CBC, '');        if ($td === false) {            die(__('Failed to use Blowfish from mcrypt!'));        }        $iv = mcrypt_create_iv(mcrypt_enc_get_iv_size($td), MCRYPT_RAND);        $GLOBALS['PMA_Config']->setCookie('pma_mcrypt_iv', base64_encode($iv));    }    /**     * Encryption using blowfish algorithm (mcrypt)     *     * @param   string  original data     * @param   string  the secret     *     * @return  string  the encrypted result     *     * @access  public     *     */    function PMA_blowfish_encrypt($data, $secret)    {        global $iv;        return base64_encode(mcrypt_encrypt(MCRYPT_BLOWFISH, $secret, $data, MCRYPT_MODE_CBC, $iv));    }    /**     * Decryption using blowfish algorithm (mcrypt)     *     * @param   string  encrypted data     * @param   string  the secret     *     * @return  string  original data     *     * @access  public     *     */    function PMA_blowfish_decrypt($encdata, $secret)    {        global $iv;        return trim(mcrypt_decrypt(MCRYPT_BLOWFISH, $secret, base64_decode($encdata), MCRYPT_MODE_CBC, $iv));    }} else {    include_once './libraries/blowfish.php';}/** * Returns blowfish secret or generates one if needed. * * @access  public * @return string */function PMA_get_blowfish_secret(){    if (empty($GLOBALS['cfg']['blowfish_secret'])) {        if (empty($_SESSION['auto_blowfish_secret'])) {            // this returns 23 characters            $_SESSION['auto_blowfish_secret'] = uniqid('', true);        }        return $_SESSION['auto_blowfish_secret'];    } else {        // apply md5() to work around too long secrets (returns 32 characters)        return md5($GLOBALS['cfg']['blowfish_secret']);    }}/** * Displays authentication form * * this function MUST exit/quit the application * * @global  string    the last connection error * * @access  public */function PMA_auth(){    global $conn_error;    /* Perform logout to custom URL */    if (! empty($_REQUEST['old_usr'])     && ! empty($GLOBALS['cfg']['Server']['LogoutURL'])) {        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);        exit;    }    /* No recall if blowfish secret is not configured as it would produce garbage */    if ($GLOBALS['cfg']['LoginCookieRecall'] && !empty($GLOBALS['cfg']['blowfish_secret'])) {        $default_user   = $GLOBALS['PHP_AUTH_USER'];        $default_server = $GLOBALS['pma_auth_server'];        $autocomplete   = '';    } else {        $default_user   = '';        $default_server = '';        // skip the IE autocomplete feature.        $autocomplete   = ' autocomplete="off"';    }    $cell_align = ($GLOBALS['text_dir'] == 'ltr') ? 'left' : 'right';    // Defines the charset to be used    header('Content-Type: text/html; charset=utf-8');    /* HTML header; do not show here the PMA version to improve security */    $page_title = 'phpMyAdmin ';    include './libraries/header_meta_style.inc.php';    // if $page_title is set, this script uses it as the title:    include './libraries/header_scripts.inc.php';    ?><script type="text/javascript">//<![CDATA[// show login form in top frameif (top != self) {    window.top.location.href=location;}//]]></script></head><body class="loginform">    <?php    if (file_exists(CUSTOM_HEADER_FILE)) {        include CUSTOM_HEADER_FILE;    }    ?><div class="container"><a href="<?php echo PMA_linkURL('http://www.phpmyadmin.net/'); ?>" target="_blank" class="logo"><?php    $logo_image = $GLOBALS['pmaThemeImage'] . 'logo_right.png';    if (@file_exists($logo_image)) {        echo '<img src="' . $logo_image . '" id="imLogo" name="imLogo" alt="phpMyAdmin" border="0" />';    } else {        echo '<img name="imLogo" id="imLogo" src="' . $GLOBALS['pmaThemeImage'] . 'pma_logo.png' . '" '           . 'border="0" width="88" height="31" alt="phpMyAdmin" />';    }    ?></a><h1>    <?php    echo sprintf(__('Welcome to %s'),        '<bdo dir="ltr" xml:lang="en">' . $page_title . '</bdo>');    ?></h1>    <?php    // Show error message    if (! empty($conn_error)) {        PMA_Message::rawError($conn_error)->display();    }    // Displays the languages form    if (empty($GLOBALS['cfg']['Lang'])) {        include_once './libraries/display_select_lang.lib.php';        // use fieldset, don't show doc link        PMA_select_language(true, false);    }    ?><br /><!-- Login form --><form method="post" action="index.php" name="login_form"<?php echo $autocomplete; ?> target="_top" class="login">    <fieldset>    <legend><?php    echo __('Log in');    echo '<a href="./Documentation.html" target="documentation" ' .        'title="' . __('phpMyAdmin documentation') . '"> ';    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        echo PMA_getImage('b_help.png', __('phpMyAdmin documentation'));    } else {        echo '(*)';    }    echo '</a>';?></legend><?php if ($GLOBALS['cfg']['AllowArbitraryServer']) { ?>        <div class="item">            <label for="input_servername" title="<?php echo __('You can enter hostname/IP address and port separated by space.'); ?>"><?php echo __('Server:'); ?></label>            <input type="text" name="pma_servername" id="input_servername" value="<?php echo htmlspecialchars($default_server); ?>" size="24" class="textfield" title="<?php echo __('You can enter hostname/IP address and port separated by space.'); ?>" />        </div><?php } ?>        <div class="item">            <label for="input_username"><?php echo __('Username:'); ?></label>            <input type="text" name="pma_username" id="input_username" value="<?php echo htmlspecialchars($default_user); ?>" size="24" class="textfield"/>        </div>        <div class="item">            <label for="input_password"><?php echo __('Password:'); ?></label>            <input type="password" name="pma_password" id="input_password" value="" size="24" class="textfield" />        </div>    <?php    if (count($GLOBALS['cfg']['Servers']) > 1) {        ?>        <div class="item">            <label for="select_server"><?php echo __('Server Choice'); ?>:</label>            <select name="server" id="select_server"        <?php        if ($GLOBALS['cfg']['AllowArbitraryServer']) {            echo ' onchange="document.forms[\'login_form\'].elements[\'pma_servername\'].value = \'\'" ';        }        echo '>';        include_once './libraries/select_server.lib.php';        PMA_select_server(false, false);        echo '</select></div>';    } else {        echo '    <input type="hidden" name="server" value="' . $GLOBALS['server'] . '" />';    } // end if (server choice)    ?>    </fieldset>    <fieldset class="tblFooters">        <input value="<?php echo __('Go'); ?>" type="submit" id="input_go" />    <?php    $_form_params = array();    if (! empty($GLOBALS['target'])) {        $_form_params['target'] = $GLOBALS['target'];    }    if (! empty($GLOBALS['db'])) {        $_form_params['db'] = $GLOBALS['db'];    }    if (! empty($GLOBALS['table'])) {        $_form_params['table'] = $GLOBALS['table'];    }    // do not generate a "server" hidden field as we want the "server"    // drop-down to have priority    echo PMA_generate_common_hidden_inputs($_form_params, '', 0, 'server');    ?>    </fieldset></form>    <?php    // BEGIN Swekey Integration    Swekey_login('input_username', 'input_go');    // END Swekey Integration    // show the "Cookies required" message only if cookies are disabled    // (we previously tried to set some cookies)    if (empty($_COOKIE)) {        trigger_error(__('Cookies must be enabled past this point.'), E_USER_NOTICE);    }    if ($GLOBALS['error_handler']->hasDisplayErrors()) {        echo '<div>';        $GLOBALS['error_handler']->dispErrors();        echo '</div>';    }    ?></div>    <?php    if (file_exists(CUSTOM_FOOTER_FILE)) {        include CUSTOM_FOOTER_FILE;    }    ?></body></html>    <?php    exit;} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * this function DOES NOT check authentication - it just checks/provides * authentication credentials required to connect to the MySQL server * usually with PMA_DBI_connect() * * it returns false if something is missing - which usually leads to * PMA_auth() which displays login form * * it returns true if all seems ok which usually leads to PMA_auth_set_user() * * it directly switches to PMA_auth_fails() if user inactivity timout is reached * * @todo    AllowArbitraryServer on does not imply that the user wants an *          arbitrary server, or? so we should also check if this is filled and *          not only if allowed * * @return  boolean   whether we get authentication settings or not * * @access  public */function PMA_auth_check(){    // Initialization    /**     * @global $GLOBALS['pma_auth_server'] the user provided server to connect to     */    $GLOBALS['pma_auth_server'] = '';    $GLOBALS['PHP_AUTH_USER'] = $GLOBALS['PHP_AUTH_PW'] = '';    $GLOBALS['from_cookie'] = false;    // BEGIN Swekey Integration    if (! Swekey_auth_check()) {        return false;    }    // END Swekey Integration    if (defined('PMA_CLEAR_COOKIES')) {        foreach ($GLOBALS['cfg']['Servers'] as $key => $val) {            $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $key);            $GLOBALS['PMA_Config']->removeCookie('pmaServer-' . $key);            $GLOBALS['PMA_Config']->removeCookie('pmaUser-' . $key);        }        return false;    }    if (! empty($_REQUEST['old_usr'])) {        // The user wants to be logged out        // -> delete his choices that were stored in session        // according to the PHP manual we should do this before the destroy:        //$_SESSION = array();        // but we still need some parts of the session information        // in libraries/header_meta_style.inc.php        session_destroy();        // -> delete password cookie(s)        if ($GLOBALS['cfg']['LoginCookieDeleteAll']) {            foreach ($GLOBALS['cfg']['Servers'] as $key => $val) {                $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $key);                if (isset($_COOKIE['pmaPass-' . $key])) {                    unset($_COOKIE['pmaPass-' . $key]);                }            }        } else {            $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $GLOBALS['server']);            if (isset($_COOKIE['pmaPass-' . $GLOBALS['server']])) {                unset($_COOKIE['pmaPass-' . $GLOBALS['server']]);            }        }    }    if (! empty($_REQUEST['pma_username'])) {        // The user just logged in        $GLOBALS['PHP_AUTH_USER'] = $_REQUEST['pma_username'];        $GLOBALS['PHP_AUTH_PW']   = empty($_REQUEST['pma_password']) ? '' : $_REQUEST['pma_password'];        if ($GLOBALS['cfg']['AllowArbitraryServer'] && isset($_REQUEST['pma_servername'])) {            $GLOBALS['pma_auth_server'] = $_REQUEST['pma_servername'];        }        return true;    }    // At the end, try to set the $GLOBALS['PHP_AUTH_USER']    // and $GLOBALS['PHP_AUTH_PW'] variables from cookies    // servername    if ($GLOBALS['cfg']['AllowArbitraryServer']     && ! empty($_COOKIE['pmaServer-' . $GLOBALS['server']])) {        $GLOBALS['pma_auth_server'] = $_COOKIE['pmaServer-' . $GLOBALS['server']];    }    // username    if (empty($_COOKIE['pmaUser-' . $GLOBALS['server']])) {        return false;    }    $GLOBALS['PHP_AUTH_USER'] = PMA_blowfish_decrypt(        $_COOKIE['pmaUser-' . $GLOBALS['server']],        PMA_get_blowfish_secret());    // user was never logged in since session start    if (empty($_SESSION['last_access_time'])) {        return false;    }    // User inactive too long    if ($_SESSION['last_access_time'] < time() - $GLOBALS['cfg']['LoginCookieValidity']) {        PMA_cacheUnset('is_create_db_priv', true);        PMA_cacheUnset('is_process_priv', true);        PMA_cacheUnset('is_reload_priv', true);        PMA_cacheUnset('db_to_create', true);        PMA_cacheUnset('dbs_where_create_table_allowed', true);        $GLOBALS['no_activity'] = true;        PMA_auth_fails();        exit;    }    // password    if (empty($_COOKIE['pmaPass-' . $GLOBALS['server']])) {        return false;    }    $GLOBALS['PHP_AUTH_PW'] = PMA_blowfish_decrypt(        $_COOKIE['pmaPass-' . $GLOBALS['server']],        PMA_get_blowfish_secret());    if ($GLOBALS['PHP_AUTH_PW'] == "\xff(blank)") {        $GLOBALS['PHP_AUTH_PW'] = '';    }    $GLOBALS['from_cookie'] = true;    return true;} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    global $cfg;    // Ensures valid authentication mode, 'only_db', bookmark database and    // table names and relation table name are used    if ($cfg['Server']['user'] != $GLOBALS['PHP_AUTH_USER']) {        foreach ($cfg['Servers'] as $idx => $current) {            if ($current['host'] == $cfg['Server']['host']             && $current['port'] == $cfg['Server']['port']             && $current['socket'] == $cfg['Server']['socket']             && $current['ssl'] == $cfg['Server']['ssl']             && $current['connect_type'] == $cfg['Server']['connect_type']             && $current['user'] == $GLOBALS['PHP_AUTH_USER']) {                $GLOBALS['server'] = $idx;                $cfg['Server']     = $current;                break;            }        } // end foreach    } // end if    if ($GLOBALS['cfg']['AllowArbitraryServer']     && ! empty($GLOBALS['pma_auth_server'])) {        /* Allow to specify 'host port' */        $parts = explode(' ', $GLOBALS['pma_auth_server']);        if (count($parts) == 2) {            $tmp_host = $parts[0];            $tmp_port = $parts[1];        } else {            $tmp_host = $GLOBALS['pma_auth_server'];            $tmp_port = '';        }        if ($cfg['Server']['host'] != $GLOBALS['pma_auth_server']) {            $cfg['Server']['host'] = $tmp_host;            if (!empty($tmp_port)) {                $cfg['Server']['port'] = $tmp_port;            }        }        unset($tmp_host, $tmp_port, $parts);    }    $cfg['Server']['user']     = $GLOBALS['PHP_AUTH_USER'];    $cfg['Server']['password'] = $GLOBALS['PHP_AUTH_PW'];    // Avoid showing the password in phpinfo()'s output    unset($GLOBALS['PHP_AUTH_PW']);    unset($_SERVER['PHP_AUTH_PW']);    $_SESSION['last_access_time'] = time();    // Name and password cookies need to be refreshed each time    // Duration = one month for username    $GLOBALS['PMA_Config']->setCookie('pmaUser-' . $GLOBALS['server'],        PMA_blowfish_encrypt($cfg['Server']['user'],            PMA_get_blowfish_secret()));    // Duration = as configured    $GLOBALS['PMA_Config']->setCookie('pmaPass-' . $GLOBALS['server'],        PMA_blowfish_encrypt(!empty($cfg['Server']['password']) ? $cfg['Server']['password'] : "\xff(blank)",            PMA_get_blowfish_secret()),        null,        $GLOBALS['cfg']['LoginCookieStore']);    // Set server cookies if required (once per session) and, in this case, force    // reload to ensure the client accepts cookies    if (! $GLOBALS['from_cookie']) {        if ($GLOBALS['cfg']['AllowArbitraryServer']) {            if (! empty($GLOBALS['pma_auth_server'])) {                // Duration = one month for servername                $GLOBALS['PMA_Config']->setCookie('pmaServer-' . $GLOBALS['server'], $cfg['Server']['host']);            } else {                // Delete servername cookie                $GLOBALS['PMA_Config']->removeCookie('pmaServer-' . $GLOBALS['server']);            }        }        // URL where to go:        $redirect_url = $cfg['PmaAbsoluteUri'] . 'index.php';        // any parameters to pass?        $url_params = array();        if (strlen($GLOBALS['db'])) {            $url_params['db'] = $GLOBALS['db'];        }        if (strlen($GLOBALS['table'])) {            $url_params['table'] = $GLOBALS['table'];        }        // any target to pass?        if (! empty($GLOBALS['target']) && $GLOBALS['target'] != 'index.php') {            $url_params['target'] = $GLOBALS['target'];        }        /**         * whether we come from a fresh cookie login         */        define('PMA_COMING_FROM_COOKIE_LOGIN', true);        /**         * Clear user cache.         */        PMA_clearUserCache();        PMA_sendHeaderLocation($redirect_url . PMA_generate_common_url($url_params, '&'));        exit();    } // end if    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * prepares error message and switches to PMA_auth() which display the error * and the login form * * this function MUST exit/quit the application, * currently doen by call to PMA_auth() * * @access  public */function PMA_auth_fails(){    global $conn_error;    // Deletes password cookie and displays the login form    $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $GLOBALS['server']);    if (! empty($GLOBALS['login_without_password_is_forbidden'])) {        $conn_error = __('Login without a password is forbidden by configuration (see AllowNoPassword)');    } elseif (! empty($GLOBALS['allowDeny_forbidden'])) {        $conn_error = __('Access denied');    } elseif (! empty($GLOBALS['no_activity'])) {        $conn_error = sprintf(__('No activity within %s seconds; please log in again'), $GLOBALS['cfg']['LoginCookieValidity']);        // Remember where we got timeout to return on same place        if (PMA_getenv('SCRIPT_NAME')) {            $GLOBALS['target'] = basename(PMA_getenv('SCRIPT_NAME'));            // avoid "missing parameter: field" on re-entry            if ('tbl_alter.php' == $GLOBALS['target']) {                $GLOBALS['target'] = 'tbl_structure.php';            }        }    } elseif (PMA_DBI_getError()) {        $conn_error = '#' . $GLOBALS['errno'] . ' ' . __('Cannot log in to the MySQL server');    } else {        $conn_error = __('Cannot log in to the MySQL server');    }    // needed for PHP-CGI (not need for FastCGI or mod-php)    header('Cache-Control: no-store, no-cache, must-revalidate');    header('Pragma: no-cache');    PMA_auth();} // end of the 'PMA_auth_fails()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for password change * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * autocomplete feature of IE kills the "onchange" event handler and it *        must be replaced by the "onpropertychange" one in this case */$chg_evt_handler = (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 5)                 ? 'onpropertychange'                 : 'onchange';// Displays the form?>    <form method="post" id="change_password_form" action="<?php echo $GLOBALS['PMA_PHP_SELF']; ?>" name="chgPassword" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="ajax" ' : ''); ?> onsubmit="return checkPassword(this)">    <?php   echo PMA_generate_common_hidden_inputs();            if (strpos($GLOBALS['PMA_PHP_SELF'], 'server_privileges') !== false) {                echo '<input type="hidden" name="username" value="' . htmlspecialchars($username) . '" />' . "\n"                   . '<input type="hidden" name="hostname" value="' . htmlspecialchars($hostname) . '" />' . "\n";            }?>    <fieldset id="fieldset_change_password">        <legend><?php echo __('Change password'); ?></legend>        <table class="data noclick">        <tr class="odd">            <td colspan="2">                <input type="radio" name="nopass" value="1" id="nopass_1" onclick="pma_pw.value = ''; pma_pw2.value = ''; this.checked = true" />        <label for="nopass_1"><?php echo __('No Password') . "\n"; ?></label>            </td>        </tr>        <tr class="even">            <td>                <input type="radio" name="nopass" value="0" id="nopass_0" onclick="document.getElementById('text_pma_pw').focus();" checked="checked " />        <label for="nopass_0"><?php echo __('Password'); ?>:&nbsp;</label>            </td>            <td>                <input type="password" name="pma_pw" id="text_pma_pw" size="10" class="textfield" <?php echo $chg_evt_handler; ?>="nopass[1].checked = true" />        &nbsp;&nbsp;        <?php echo __('Re-type'); ?>:&nbsp;                <input type="password" name="pma_pw2" id="text_pma_pw2" size="10" class="textfield" <?php echo $chg_evt_handler; ?>="nopass[1].checked = true" />            </td>        </tr>        <tr>            <td>            <?php echo __('Password Hashing'); ?>:        </td>        <td>            <input type="radio" name="pw_hash" id="radio_pw_hash_new" value="new" checked="checked" />            <label for="radio_pw_hash_new">                MySQL&nbsp;4.1+            </label>        </td>        </tr>        <tr id="tr_element_before_generate_password">            <td>&nbsp;</td>        <td>            <input type="radio" name="pw_hash" id="radio_pw_hash_old" value="old" />            <label for="radio_pw_hash_old">                <?php echo __('MySQL 4.0 compatible'); ?>            </label>        </td>        </tr>        </table>    </fieldset>    <fieldset id="fieldset_change_password_footer" class="tblFooters">            <input type="submit" name="change_pw" value="<?php echo(__('Go')); ?>" />    </fieldset></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for creating database (if user has privileges for that) * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/check_user_privileges.lib.php';if ($is_create_db_priv) {    // The user is allowed to create a db    ?>        <form method="post" action="db_create.php" id="create_database_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="ajax" ' : ''); ?>><strong>            <?php echo '<label for="text_create_db">' . __('Create database') . '</label>&nbsp;' . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_DATABASE'); ?></strong><br />            <?php echo PMA_generate_common_hidden_inputs('', '', 5); ?>            <input type="hidden" name="reload" value="1" />            <input type="text" name="new_db" value="<?php echo $db_to_create; ?>" maxlength="64" class="textfield" id="text_create_db"/>    <?php    include_once './libraries/mysql_charsets.lib.php';    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION, 'db_collation', null, null, true, 5);    if (! empty($dbstats)) {        echo '<input type="hidden" name="dbstats" value="1" />';    }    ?>            <input type="submit" value="<?php echo __('Create'); ?>" id="buttonGo" />        </form>    <?php} else {    ?>    <!-- db creation no privileges message -->        <strong><?php echo __('Create database') . ':&nbsp;' . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_DATABASE'); ?></strong><br />        <?php              echo '<span class="noPrivileges">'                 . ($cfg['ErrorIconic'] ? PMA_getImage('s_error2.png', '', array('hspace' => 2, 'border' => 0, 'align' => 'middle')) : '')                 . '' . __('No Privileges') .'</span>';} // end create db form or message?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles miscellaneous db operations: *  - move/rename *  - copy *  - changing collation *  - changing comment *  - adding tables *  - viewing PDF schemas * * @package PhpMyAdmin *//** * requirements */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';// add blobstreaming library functionsrequire_once "./libraries/blobstreaming.lib.php";// add a javascript file for jQuery functions to handle Ajax actions// also add jQueryUI$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'db_operations.js';/** * Rename/move or copy database */if (strlen($db) && (! empty($db_rename) || ! empty($db_copy))) {    if (! empty($db_rename)) {        $move = true;    } else {        $move = false;    }    if (! isset($newname) || ! strlen($newname)) {        $message = PMA_Message::error(__('The database name is empty!'));    } else {        $sql_query = ''; // in case target db exists        $_error = false;        if ($move || (isset($create_database_before_copying) && $create_database_before_copying)) {            // lower_case_table_names=1 `DB` becomes `db`            if (!PMA_DRIZZLE) {                $lower_case_table_names = PMA_DBI_fetch_value('SHOW VARIABLES LIKE "lower_case_table_names"', 0, 1);                if ($lower_case_table_names === '1') {                    $newname = PMA_strtolower($newname);                }            }            $local_query = 'CREATE DATABASE ' . PMA_backquote($newname);            if (isset($db_collation)) {                $local_query .= ' DEFAULT' . PMA_generateCharsetQueryPart($db_collation);            }            $local_query .= ';';            $sql_query = $local_query;            // save the original db name because Tracker.class.php which            // may be called under PMA_DBI_query() changes $GLOBALS['db']            // for some statements, one of which being CREATE DATABASE            $original_db = $db;            PMA_DBI_query($local_query);            $db = $original_db;            unset($original_db);            // rebuild the database list because PMA_Table::moveCopy            // checks in this list if the target db exists            $GLOBALS['pma']->databases->build();        }        // here I don't use DELIMITER because it's not part of the        // language; I have to send each statement one by one        // to avoid selecting alternatively the current and new db        // we would need to modify the CREATE definitions to qualify        // the db name        $procedure_names = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');        if ($procedure_names) {            foreach ($procedure_names as $procedure_name) {                PMA_DBI_select_db($db);                $tmp_query = PMA_DBI_get_definition($db, 'PROCEDURE', $procedure_name);                // collect for later display                $GLOBALS['sql_query'] .= "\n" . $tmp_query;                PMA_DBI_select_db($newname);                PMA_DBI_query($tmp_query);            }        }        $function_names = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');        if ($function_names) {            foreach ($function_names as $function_name) {                PMA_DBI_select_db($db);                $tmp_query = PMA_DBI_get_definition($db, 'FUNCTION', $function_name);                // collect for later display                $GLOBALS['sql_query'] .= "\n" . $tmp_query;                PMA_DBI_select_db($newname);                PMA_DBI_query($tmp_query);            }        }        // go back to current db, just in case        PMA_DBI_select_db($db);        $GLOBALS['sql_constraints_query_full_db'] = array();        $tables_full = PMA_DBI_get_tables_full($db);        $views = array();        // remove all foreign key constraints, otherwise we can get errors        include_once './libraries/export/sql.php';        foreach ($tables_full as $each_table => $tmp) {            $sql_constraints = '';            $sql_drop_foreign_keys = '';            $sql_structure = PMA_getTableDef($db, $each_table, "\n", '', false, false);            if ($move && ! empty($sql_drop_foreign_keys)) {                PMA_DBI_query($sql_drop_foreign_keys);            }            // keep the constraint we just dropped            if (! empty($sql_constraints)) {                $GLOBALS['sql_constraints_query_full_db'][] = $sql_constraints;            }        }        unset($sql_constraints, $sql_drop_foreign_keys, $sql_structure);        foreach ($tables_full as $each_table => $tmp) {            // to be able to rename a db containing views,            // first all the views are collected and a stand-in is created            // the real views are created after the tables            if (PMA_Table::isView($db, $each_table)) {                $views[] = $each_table;                // Create stand-in definition to resolve view dependencies                $sql_view_standin = PMA_getTableDefStandIn($db, $each_table, "\n");                PMA_DBI_select_db($newname);                PMA_DBI_query($sql_view_standin);                $GLOBALS['sql_query'] .= "\n" . $sql_view_standin;            }        }        foreach ($tables_full as $each_table => $tmp) {            // skip the views; we have creted stand-in definitions            if (PMA_Table::isView($db, $each_table)) {                continue;            }            $back = $sql_query;            $sql_query = '';            // value of $what for this table only            $this_what = $what;            // do not copy the data from a Merge table            // note: on the calling FORM, 'data' means 'structure and data'            if (PMA_Table::isMerge($db, $each_table)) {                if ($this_what == 'data') {                    $this_what = 'structure';                }                if ($this_what == 'dataonly') {                    $this_what = 'nocopy';                }            }            if ($this_what != 'nocopy') {                // keep the triggers from the original db+table                // (third param is empty because delimiters are only intended                //  for importing via the mysql client or our Import feature)                $triggers = PMA_DBI_get_triggers($db, $each_table, '');                if (! PMA_Table::moveCopy(                    $db, $each_table, $newname, $each_table,                    isset($this_what) ? $this_what : 'data', $move, 'db_copy')                ) {                    $_error = true;                    // $sql_query is filled by PMA_Table::moveCopy()                    $sql_query = $back . $sql_query;                    break;                }                // apply the triggers to the destination db+table                if ($triggers) {                    PMA_DBI_select_db($newname);                    foreach ($triggers as $trigger) {                        PMA_DBI_query($trigger['create']);                        $GLOBALS['sql_query'] .= "\n" . $trigger['create'] . ';';                    }                    unset($trigger);                }                unset($triggers);                // this does not apply to a rename operation                if (isset($GLOBALS['add_constraints']) && !empty($GLOBALS['sql_constraints_query'])) {                    $GLOBALS['sql_constraints_query_full_db'][] = $GLOBALS['sql_constraints_query'];                    unset($GLOBALS['sql_constraints_query']);                }            }            // $sql_query is filled by PMA_Table::moveCopy()            $sql_query = $back . $sql_query;        } // end (foreach)        unset($each_table);        // handle the views        if (! $_error) {            // temporarily force to add DROP IF EXIST to CREATE VIEW query,            // to remove stand-in VIEW that was created earlier            if (isset($GLOBALS['drop_if_exists'])) {                $temp_drop_if_exists = $GLOBALS['drop_if_exists'];            }            $GLOBALS['drop_if_exists'] = 'true';            foreach ($views as $view) {                if (! PMA_Table::moveCopy($db, $view, $newname, $view, 'structure', $move, 'db_copy')) {                    $_error = true;                    break;                }            }            unset($GLOBALS['drop_if_exists']);            if (isset($temp_drop_if_exists)) {                // restore previous value                $GLOBALS['drop_if_exists'] = $temp_drop_if_exists;                unset($temp_drop_if_exists);            }        }        unset($view, $views);        // now that all tables exist, create all the accumulated constraints        if (! $_error && count($GLOBALS['sql_constraints_query_full_db']) > 0) {            PMA_DBI_select_db($newname);            foreach ($GLOBALS['sql_constraints_query_full_db'] as $one_query) {                PMA_DBI_query($one_query);            // and prepare to display them                $GLOBALS['sql_query'] .= "\n" . $one_query;            }            unset($GLOBALS['sql_constraints_query_full_db'], $one_query);        }        if (!PMA_DRIZZLE && PMA_MYSQL_INT_VERSION >= 50100) {            // here DELIMITER is not used because it's not part of the            // language; each statement is sent one by one            // to avoid selecting alternatively the current and new db            // we would need to modify the CREATE definitions to qualify            // the db name            $event_names = PMA_DBI_fetch_result('SELECT EVENT_NAME FROM information_schema.EVENTS WHERE EVENT_SCHEMA= \'' . PMA_sqlAddSlashes($db, true) . '\';');            if ($event_names) {                foreach ($event_names as $event_name) {                    PMA_DBI_select_db($db);                    $tmp_query = PMA_DBI_get_definition($db, 'EVENT', $event_name);                    // collect for later display                    $GLOBALS['sql_query'] .= "\n" . $tmp_query;                    PMA_DBI_select_db($newname);                    PMA_DBI_query($tmp_query);                }            }        }        // go back to current db, just in case        PMA_DBI_select_db($db);        // Duplicate the bookmarks for this db (done once for each db)        if (! $_error && $db != $newname) {            $get_fields = array('user', 'label', 'query');            $where_fields = array('dbase' => $db);            $new_fields = array('dbase' => $newname);            PMA_Table::duplicateInfo('bookmarkwork', 'bookmark', $get_fields,                $where_fields, $new_fields);        }        if (! $_error && $move) {            /**             * cleanup pmadb stuff for this db             */            include_once './libraries/relation_cleanup.lib.php';            PMA_relationsCleanupDatabase($db);            // if someday the RENAME DATABASE reappears, do not DROP            $local_query = 'DROP DATABASE ' . PMA_backquote($db) . ';';            $sql_query .= "\n" . $local_query;            PMA_DBI_query($local_query);            $message = PMA_Message::success(__('Database %s has been renamed to %s'));            $message->addParam($db);            $message->addParam($newname);        } elseif (! $_error) {            $message = PMA_Message::success(__('Database %s has been copied to %s'));            $message->addParam($db);            $message->addParam($newname);        }        $reload     = true;        /* Change database to be used */        if (! $_error && $move) {            $db = $newname;        } elseif (! $_error) {            if (isset($switch_to_new) && $switch_to_new == 'true') {                $GLOBALS['PMA_Config']->setCookie('pma_switch_to_new', 'true');                $db = $newname;            } else {                $GLOBALS['PMA_Config']->setCookie('pma_switch_to_new', '');            }        }        if ($_error && ! isset($message)) {            $message = PMA_Message::error();        }    }    /**     * Database has been successfully renamed/moved.  If in an Ajax request,     * generate the output with {@link PMA_ajaxResponse} and exit     */    if ( $GLOBALS['is_ajax_request'] == true) {        $extra_data['newname'] = $newname;        $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);        PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);    };}/** * Settings for relations stuff */$cfgRelation = PMA_getRelationsParam();/** * Check if comments were updated * (must be done before displaying the menu tabs) */if (isset($_REQUEST['comment'])) {    PMA_setDbComment($db, $comment);}/** * Prepares the tables list if the user where not redirected to this script * because there is no table in the database ($is_info is true) */if (empty($is_info)) {    include './libraries/db_common.inc.php';    $url_query .= '&amp;goto=db_operations.php';    // Gets the database structure    $sub_part = '_structure';    include './libraries/db_info.inc.php';    echo "\n";    if (isset($message)) {        PMA_showMessage($message, $sql_query);        unset($message);    }}$db_collation = PMA_getDbCollation($db);$is_information_schema = PMA_is_system_schema($db);if (!$is_information_schema) {    if ($cfgRelation['commwork']) {        /**         * database comment         */        ?>    <div class="operations_half_width">    <form method="post" action="db_operations.php">    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <fieldset>        <legend>        <?php        if ($cfg['PropertiesIconic']) {            echo '<img class="icon ic_b_comment" src="themes/dot.gif" alt="" />';        }        echo __('Database comment: ');        ?>        </legend>        <input type="text" name="comment" class="textfield" size="30"            value="<?php            echo htmlspecialchars(PMA_getDBComment($db)); ?>" />    </fieldset>    <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div>        <?php    }    ?>    <div class="operations_half_width">    <?php include './libraries/display_create_table.lib.php'; ?>    </div>    <?php    /**     * rename database     */if ($db != 'mysql') {    ?>        <div class="operations_half_width">        <form id="rename_db_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : ''); ?>method="post" action="db_operations.php"        onsubmit="return emptyFormElements(this, 'newname')">        <?php    if (isset($db_collation)) {        echo '<input type="hidden" name="db_collation" value="' . $db_collation            .'" />' . "\n";    }        ?>    <input type="hidden" name="what" value="data" />    <input type="hidden" name="db_rename" value="true" />    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <fieldset>        <legend>    <?php    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Rename database to') . ':';    ?>        </legend>        <input id="new_db_name" type="text" name="newname" size="30" class="textfield" value="" />    </fieldset>    <fieldset class="tblFooters">        <input id="rename_db_input" type="submit" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div><?php} // end if// Drop link if allowed// Don't even try to drop information_schema. You won't be able to. Believe me. You won't.// Don't allow to easily drop mysql database, RFE #1327514.if (($is_superuser || $GLOBALS['cfg']['AllowUserDropDatabase'])        && !$db_is_information_schema        && (PMA_DRIZZLE || $db != 'mysql')) {?><div class="operations_half_width"><fieldset class="caution"> <legend><?phpif ($cfg['PropertiesIconic']) {    echo PMA_getImage('b_deltbl.png');}echo __('Remove database');?></legend><ul><?php    $this_sql_query = 'DROP DATABASE ' . PMA_backquote($GLOBALS['db']);    $this_url_params = array(            'sql_query' => $this_sql_query,            'back' => 'db_operations.php',            'goto' => 'main.php',            'reload' => '1',            'purge' => '1',            'message_to_show' => sprintf(__('Database %s has been dropped.'), htmlspecialchars(PMA_backquote($db))),            'db' => null,        );    ?>        <li><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'id="drop_db_anchor"' : ''); ?>>            <?php echo __('Drop the database (DROP)'); ?></a>        <?php echo PMA_showMySQLDocu('SQL-Syntax', 'DROP_DATABASE'); ?>    </li></ul></fieldset></div><?php } ?>    <?php    /**     * Copy database     */    ?>        <div class="operations_half_width clearfloat">        <form id="copy_db_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : ''); ?>method="post" action="db_operations.php"        onsubmit="return emptyFormElements(this, 'newname')">    <?php    if (isset($db_collation)) {        echo '<input type="hidden" name="db_collation" value="' . $db_collation            .'" />' . "\n";    }    echo '<input type="hidden" name="db_copy" value="true" />' . "\n";    echo PMA_generate_common_hidden_inputs($db);    ?>    <fieldset>        <legend>    <?php    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Copy database to') . ':';    $drop_clause = 'DROP TABLE / DROP VIEW';    ?>        </legend>        <input type="text" name="newname" size="30" class="textfield" value="" /><br /><?php        $choices = array(            'structure' => __('Structure only'),            'data'      => __('Structure and data'),            'dataonly'  => __('Data only'));        PMA_display_html_radio('what', $choices, 'data', true);        unset($choices);?>        <input type="checkbox" name="create_database_before_copying" value="1"            id="checkbox_create_database_before_copying"            checked="checked" />        <label for="checkbox_create_database_before_copying">            <?php echo __('CREATE DATABASE before copying'); ?></label><br />        <input type="checkbox" name="drop_if_exists" value="true"            id="checkbox_drop" />        <label for="checkbox_drop"><?php echo sprintf(__('Add %s'), $drop_clause); ?></label><br />        <input type="checkbox" name="sql_auto_increment" value="1" checked="checked"            id="checkbox_auto_increment" />        <label for="checkbox_auto_increment">            <?php echo __('Add AUTO_INCREMENT value'); ?></label><br />        <input type="checkbox" name="add_constraints" value="1"            id="checkbox_constraints" />        <label for="checkbox_constraints">            <?php echo __('Add constraints'); ?></label><br />    <?php    unset($drop_clause);    if (isset($_COOKIE) && isset($_COOKIE['pma_switch_to_new'])      && $_COOKIE['pma_switch_to_new'] == 'true') {        $pma_switch_to_new = 'true';    }    ?>        <input type="checkbox" name="switch_to_new" value="true"            id="checkbox_switch"            <?php echo ((isset($pma_switch_to_new) && $pma_switch_to_new == 'true') ? ' checked="checked"' : ''); ?>            />        <label for="checkbox_switch"><?php echo __('Switch to copied database'); ?></label>    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="submit_copy" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div>    <?php    /**     * Change database charset     */    echo '<div class="operations_half_width"><form id="change_db_charset_form" ';    if ($GLOBALS['cfg']['AjaxEnable']) {        echo ' class="ajax" ';    }    echo 'method="post" action="./db_operations.php">'       . PMA_generate_common_hidden_inputs($db, $table)       . '<fieldset>' . "\n"       . '    <legend>';    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('s_asci.png');    }    echo '    <label for="select_db_collation">' . __('Collation') . ':</label>' . "\n"       . '    </legend>' . "\n"       . PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION,            'db_collation', 'select_db_collation', $db_collation, false, 3)       . '</fieldset>'       . '<fieldset class="tblFooters">'       . '    <input type="submit" name="submitcollation"'       . ' value="' . __('Go') . '" />' . "\n"       . '</fieldset>' . "\n"       . '</form></div>' . "\n";    if ($num_tables > 0      && ! $cfgRelation['allworks'] && $cfg['PmaNoRelation_DisableWarning'] == false) {        $message = PMA_Message::notice(__('The phpMyAdmin configuration storage has been deactivated. To find out why click %shere%s.'));        $message->addParam('<a href="' . $cfg['PmaAbsoluteUri'] . 'chk_rel.php?' . $url_query . '">', false);        $message->addParam('</a>', false);        /* Show error if user has configured something, notice elsewhere */        if (!empty($cfg['Servers'][$server]['pmadb'])) {            $message->isError(true);        }        echo '<div class="operations_full_width">';        $message->display();        echo '</div>';    } // end if} // end if (!$is_information_schema)// not sure about displaying the PDF dialog in case db is information_schemaif ($cfgRelation['pdfwork'] && $num_tables > 0) { ?>    <!-- Work on PDF Pages -->    <?php    // We only show this if we find something in the new pdf_pages table    $test_query = '         SELECT *           FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages']) . '          WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'';    $test_rs    = PMA_query_as_controluser($test_query, null, PMA_DBI_QUERY_STORE);    /*     * Export Relational Schema View     */    echo '<div class="operations_full_width"><fieldset><a href="schema_edit.php?' . $url_query . '">';    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Edit or export relational schema') . '</a></fieldset></div>';} // end if/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This is in a separate script because it's called from a number of scripts * * @package PhpMyAdmin *//** * Checks whether given link is valid * * @param string $url URL to check * @return boolean True if string can be used as link */function PMA_checkLink($url){    $valid_starts = array(        'http://',        'https://',        './url.php?url=http%3A%2F%2F',        './url.php?url=https%3A%2F%2F',    );    if (defined('PMA_SETUP')) {        $valid_starts[] = '../Documentation.html';        $valid_starts[] = '?page=form&';    } else {        $valid_starts[] = './Documentation.html';    }    foreach ($valid_starts as $val) {        if (substr($url, 0, strlen($val)) == $val) {            return true;        }    }    return false;}/** * Callback function for replacing [a@link@target] links in bb code. * * @param array $found Array of preg matches * @return string Replaced string */function PMA_replaceBBLink($found){    /* Check for valid link */    if (! PMA_checkLink($found[1])) {        return $found[0];    }    /* a-z and _ allowed in target */    if (! empty($found[3]) && preg_match('/[^a-z_]+/i', $found[3])) {        return $found[0];    }    /* Construct target */    $target = '';    if (! empty($found[3])) {        $target = ' target="' . $found[3] . '"';    }    /* Construct url */    if (substr($found[1], 0, 4) == 'http') {        $url = PMA_linkURL($found[1]);    } else {        $url = $found[1];    }    return '<a href="' . $url . '"' . $target . '>';}/** * Sanitizes $message, taking into account our special codes * for formatting. * * If you want to include result in element attribute, you should escape it. * * Examples: * * <p><?php echo PMA_sanitize($foo); ?></p> * * <a title="<?php echo PMA_sanitize($foo, true); ?>">bar</a> * * @param string  $message the message * @param boolean $escape  whether to escape html in result * @param boolean $safe    whether string is safe (can keep < and > chars) * @return  string   the sanitized message */function PMA_sanitize($message, $escape = false, $safe = false){    if (!$safe) {        $message = strtr($message, array('<' => '&lt;', '>' => '&gt;'));    }    /* Interpret bb code */    $replace_pairs = array(        '[i]'       => '<em>',      // deprecated by em        '[/i]'      => '</em>',     // deprecated by em        '[em]'      => '<em>',        '[/em]'     => '</em>',        '[b]'       => '<strong>',  // deprecated by strong        '[/b]'      => '</strong>', // deprecated by strong        '[strong]'  => '<strong>',        '[/strong]' => '</strong>',        '[tt]'      => '<code>',    // deprecated by CODE or KBD        '[/tt]'     => '</code>',   // deprecated by CODE or KBD        '[code]'    => '<code>',        '[/code]'   => '</code>',        '[kbd]'     => '<kbd>',        '[/kbd]'    => '</kbd>',        '[br]'      => '<br />',        '[/a]'      => '</a>',        '[sup]'      => '<sup>',        '[/sup]'      => '</sup>',    );    /* Adjust links for setup, which lives in subfolder */    if (defined('PMA_SETUP')) {        $replace_pairs['[a@Documentation.html'] = '[a@../Documentation.html';    } else {        $replace_pairs['[a@Documentation.html'] = '[a@./Documentation.html';    }    $message = strtr($message, $replace_pairs);    /* Match links in bb code ([a@url@target], where @target is options) */    $pattern = '/\[a@([^]"@]*)(@([^]"]*))?\]/';    /* Find and replace all links */    $message = preg_replace_callback($pattern, 'PMA_replaceBBLink', $message);    /* Possibly escape result */    if ($escape) {        $message = htmlspecialchars($message);    }    return $message;}/** * Sanitize a filename by removing anything besides A-Za-z0-9_.- * * Intended usecase: *    When using a filename in a Content-Disposition header the value should not contain ; or " * * @param   string  The filename * * @return  string  the sanitized filename * */function PMA_sanitize_filename($filename) {    $filename = preg_replace('/[^A-Za-z0-9_.-]/', '_', $filename);    return $filename;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';require_once './libraries/mysql_charsets.lib.php';if (!PMA_DRIZZLE) {    include_once './libraries/replication.inc.php';}require './libraries/build_html_for_db.lib.php';PMA_checkParameters(array('new_db'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'main.php?' . PMA_generate_common_url();/** * Builds and executes the db creation sql query */$sql_query = 'CREATE DATABASE ' . PMA_backquote($new_db);if (!empty($db_collation)) {    list($db_charset) = explode('_', $db_collation);    if (in_array($db_charset, $mysql_charsets) && in_array($db_collation, $mysql_collations[$db_charset])) {        $sql_query .= ' DEFAULT' . PMA_generateCharsetQueryPart($db_collation);    }    $db_collation_for_ajax = $db_collation;    unset($db_charset, $db_collation);}$sql_query .= ';';$result = PMA_DBI_try_query($sql_query);if (! $result) {    $message = PMA_Message::rawError(PMA_DBI_getError());    // avoid displaying the not-created db name in header or navi panel    $GLOBALS['db'] = '';    $GLOBALS['table'] = '';    /**     * If in an Ajax request, just display the message with {@link PMA_ajaxResponse}     */    if ($GLOBALS['is_ajax_request'] == true) {        PMA_ajaxResponse($message, false);    }    include_once './libraries/header.inc.php';    include_once './main.php';} else {    $message = PMA_Message::success(__('Database %1$s has been created.'));    $message->addParam($new_db);    $GLOBALS['db'] = $new_db;    /**     * If in an Ajax request, build the output and send it     */    if ($GLOBALS['is_ajax_request'] == true) {        /**         * String containing the SQL Query formatted in pretty HTML         * @global array $GLOBALS['extra_data']         * @name $extra_data         */        $extra_data['sql_query'] = PMA_showMessage(null, $sql_query, 'success');        //Construct the html for the new database, so that it can be appended to the list of databases on server_databases.php        /**         * Build the array to be passed to {@link PMA_generate_common_url} to generate the links         * @global array $GLOBALS['db_url_params']         * @name $db_url_params         */        $db_url_params['db'] = $new_db;        $is_superuser = PMA_isSuperuser();        $column_order = PMA_getColumnOrder();        $url_query = PMA_generate_common_url($new_db);        /**         * String that will contain the output HTML         * @name    $new_db_string         */        $new_db_string = '<tr>';        if (empty($db_collation_for_ajax)) {            $db_collation_for_ajax = PMA_getServerCollation();        }        // $dbstats comes from the create table dialog        if (! empty($dbstats)) {            $current = array(                'SCHEMA_NAME' => $new_db,                'DEFAULT_COLLATION_NAME' => $db_collation_for_ajax,                'SCHEMA_TABLES' => '0',                'SCHEMA_TABLE_ROWS' => '0',                'SCHEMA_DATA_LENGTH' => '0',                'SCHEMA_MAX_DATA_LENGTH' => '0',                'SCHEMA_INDEX_LENGTH' => '0',                'SCHEMA_LENGTH' => '0',                'SCHEMA_DATA_FREE' => '0'            );        } else {            $current = array(                'SCHEMA_NAME' => $new_db            );        }        list($column_order, $generated_html) = PMA_buildHtmlForDb($current, $is_superuser, (isset($checkall) ? $checkall : ''), $url_query, $column_order, $replication_types, $replication_info);        $new_db_string .= $generated_html;        $new_db_string .= '</tr>';        $extra_data['new_db_string'] = $new_db_string;        PMA_ajaxResponse($message, true, $extra_data);    }    include_once './libraries/header.inc.php';    include_once './' . $cfg['DefaultTabDatabase'];}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require './libraries/StorageEngine.class.php';/** * Include settings for relation stuff * get all variables needed for exporting relational schema * in $cfgRelation */require_once './libraries/relation.lib.php';$cfgRelation = PMA_getRelationsParam();require_once './libraries/transformations.lib.php';require_once './libraries/Index.class.php';require_once "./libraries/schema/Export_Relation_Schema.class.php";/** * get all the export options and verify * call and include the appropriate Schema Class depending on $export_type * default is PDF */global  $db, $export_type;if (!isset($export_type) || !preg_match('/^[a-zA-Z]+$/', $export_type)) {    $export_type = 'pdf';}PMA_DBI_select_db($db);$path = PMA_securePath(ucfirst($export_type));if (!file_exists('./libraries/schema/' . $path . '_Relation_Schema.class.php')) {    PMA_Export_Relation_Schema::dieSchema($_POST['chpage'], $export_type, __('File doesn\'t exist'));}require "./libraries/schema/".$path."_Relation_Schema.class.php";$obj_schema = eval("new PMA_".$path."_Relation_Schema();");
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Holds class PMA_Error_Handler * * @package PhpMyAdmin *//** * */require_once './libraries/Error.class.php';/** * handling errors * * @package PhpMyAdmin */class PMA_Error_Handler{    /**     * holds errors to be displayed or reported later ...     *     * @var array of PMA_Error     */    protected $_errors = array();    /**     * Constructor - set PHP error handler     *     */    public function __construct()    {        set_error_handler(array($this, 'handleError'));    }    /**     * Destructor     *     * stores errors in session     *     */    public function __destruct()    {        if (isset($_SESSION)) {            if (! isset($_SESSION['errors'])) {                $_SESSION['errors'] = array();            }            if ($GLOBALS['cfg']['Error_Handler']['gather']) {                // remember all errors                $_SESSION['errors'] = array_merge($_SESSION['errors'], $this->_errors);            } else {                // remember only not displayed errors                foreach ($this->_errors as $key => $error) {                    /**                     * We don't want to store all errors here as it would explode user                     * session. In case  you want them all set                     * $GLOBALS['cfg']['Error_Handler']['gather'] to true                     */                    if (count($_SESSION['errors']) >= 20) {                        $error = new PMA_Error(0, __('Too many error messages, some are not displayed.'), __FILE__, __LINE__);                        $_SESSION['errors'][$error->getHash()] = $error;                    }                    if (($error instanceof PMA_Error) && ! $error->isDisplayed()) {                        $_SESSION['errors'][$key] = $error;                    }                }            }        }    }    /**     * returns array with all errors     *     * @return array PMA_Error_Handler::$_errors     */    protected function getErrors()    {        $this->_checkSavedErrors();        return $this->_errors;    }    /**     * Error handler - called when errors are triggered/occured     *     * The following error types cannot be handled with a user defined function:     * E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR,     * E_COMPILE_WARNING,     * and most of E_STRICT raised in the file where set_error_handler() is called.     *     * Do not use the context parameter as we want to avoid storing the     * complete $GLOBALS inside $_SESSION['errors']     *     * @param integer $errno     * @param string  $errstr     * @param string  $errfile     * @param integer $errline     */    public function handleError($errno, $errstr, $errfile, $errline)    {        // create error object        $error = new PMA_Error($errno, htmlspecialchars($errstr), $errfile, $errline);        // do not repeat errors        $this->_errors[$error->getHash()] = $error;        switch ($error->getNumber()) {            case E_USER_NOTICE:            case E_USER_WARNING:            case E_STRICT:            case E_DEPRECATED:            case E_NOTICE:            case E_WARNING:            case E_CORE_WARNING:            case E_COMPILE_WARNING:            case E_USER_ERROR:            case E_RECOVERABLE_ERROR:                // just collect the error                // display is called from outside                break;            case E_ERROR:            case E_PARSE:            case E_CORE_ERROR:            case E_COMPILE_ERROR:            default:                // FATAL error, dislay it and exit                $this->_dispFatalError($error);                exit;                break;        }    }    /**     * log error to configured log facility     *     * @todo    finish!     * @param PMA_Error $error     * @return bool     */    protected function _logError($error)    {        return error_log($error->getMessage());    }    /**     * trigger a custom error     *     * @param string  $errorInfo     * @param integer $errorNumber     * @param string  $file     * @param integer $line     */    public function triggerError($errorInfo, $errorNumber = null, $file = null, $line = null)    {        // we could also extract file and line from backtrace and call handleError() directly        trigger_error($errorInfo, $errorNumber);    }    /**     * display fatal error and exit     *     * @param PMA_Error $error     */    protected function _dispFatalError($error)    {        if (! headers_sent()) {            $this->_dispPageStart($error);        }        $error->display();        $this->_dispPageEnd();        exit;    }    /**     * display the whole error page with all errors     *     */    public function dispErrorPage()    {        if (! headers_sent()) {            $this->_dispPageStart();        }        $this->dispAllErrors();        $this->_dispPageEnd();    }    /**     * display user errors not displayed     *     */    public function dispUserErrors()    {        foreach ($this->getErrors() as $error) {            if ($error->isUserError() && ! $error->isDisplayed()) {                $error->display();            }        }    }    /**     * display HTML header     *     * @param PMA_error $error     */    protected function _dispPageStart($error = null)    {        echo '<html><head><title>';        if ($error) {            echo $error->getTitle();        } else {            echo 'phpMyAdmin error reporting page';        }        echo '</title></head>';    }    /**     * display HTML footer     *     */    protected function _dispPageEnd()    {        echo '</body></html>';    }    /**     * display all errors regardless already displayed or user errors     *     */    public function dispAllErrors()    {        foreach ($this->getErrors() as $error) {            $error->display();        }    }    /**     * display errors not displayed     *     */    public function dispErrors()    {        if ($GLOBALS['cfg']['Error_Handler']['display']) {            foreach ($this->getErrors() as $error) {                if ($error instanceof PMA_Error) {                    if (! $error->isDisplayed()) {                        $error->display();                    }                } else {                    var_dump($error);                }            }        } else {            $this->dispUserErrors();        }    }    /**     * look in session for saved errors     *     */    protected function _checkSavedErrors()    {        if (isset($_SESSION['errors'])) {            // restore saved errors            foreach ($_SESSION['errors'] as $hash => $error) {                if ($error instanceof PMA_Error && ! isset($this->_errors[$hash])) {                    $this->_errors[$hash] = $error;                }            }            //$this->_errors = array_merge($_SESSION['errors'], $this->_errors);            // delet stored errors            $_SESSION['errors'] = array();            unset($_SESSION['errors']);        }    }    /**     * return count of errors     *     * @return  integer number of errors occoured     */    public function countErrors()    {        return count($this->getErrors());    }    /**     * return count of user errors     *     * @return  integer number of user errors occoured     */    public function countUserErrors()    {        $count = 0;        if ($this->countErrors()) {            foreach ($this->getErrors() as $error) {                if ($error->isUserError()) {                    $count++;                }            }        }        return $count;    }    /**     * whether use errors occured or not     *     * @return  boolean     */    public function hasUserErrors()    {        return (bool) $this->countUserErrors();    }    /**     * whether errors occured or not     *     * @return  boolean     */    public function hasErrors()    {        return (bool) $this->countErrors();    }    /**     * number of errors to be displayed     *     * @return integer number of errors to be displayed     */    public function countDisplayErrors()    {        if ($GLOBALS['cfg']['Error_Handler']['display']) {            return $this->countErrors();        } else {            return $this->countUserErrors();        }    }    /**     * whether there are errors to display or not     *     * @return boolean     */    public function hasDisplayErrors()    {        return (bool) $this->countDisplayErrors();    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Does the common work */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'export.js';/** * Displays the links */require './libraries/server_links.inc.php';$export_page_title = __('View dump (schema) of databases') . "\n";$checkall_url = 'server_export.php?'              . PMA_generate_common_url()              . '&amp;goto=db_export.php';$multi_values = '<div align="left">';$multi_values .= '<a href="' . $checkall_url . '&amp;selectall=1" onclick="setSelectOptions(\'dump\', \'db_select[]\', true); return false;">' . __('Select All') . '</a>        /        <a href="' . $checkall_url . '" onclick="setSelectOptions(\'dump\', \'db_select[]\', false); return false;">' . __('Unselect All') . '</a><br />';$multi_values .= '<select name="db_select[]" id="db_select" size="10" multiple="multiple">';$multi_values .= "\n";// Check if the selected databases are defined in $_GET (from clicking Back button on export.php)if (isset($_GET['db_select'])) {    $_GET['db_select'] = urldecode($_GET['db_select']);    $_GET['db_select'] = explode(",", $_GET['db_select']);}foreach ($GLOBALS['pma']->databases as $current_db) {    if (isset($_GET['db_select'])) {        if (in_array($current_db, $_GET['db_select'])) {            $is_selected = ' selected="selected"';        } else {            $is_selected = '';        }    } elseif (!empty($selectall) || (isset($tmp_select) && strpos(' ' . $tmp_select, '|' . $current_db . '|'))) {        $is_selected = ' selected="selected"';    } else {        $is_selected = '';    }    $current_db   = htmlspecialchars($current_db);    $multi_values .= '                <option value="' . $current_db . '"' . $is_selected . '>' . $current_db . '</option>' . "\n";} // end while$multi_values .= "\n";$multi_values .= '</select></div>';$export_type = 'server';require_once './libraries/display_export.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Main export hanling code * @package PhpMyAdmin *//** * Get the variables sent or posted to this script and a core script */require_once './libraries/common.inc.php';require_once './libraries/zip.lib.php';require_once './libraries/plugin_interface.lib.php';PMA_checkParameters(array('what', 'export_type'));// Scan plugins$export_list = PMA_getPlugins(    './libraries/export/',    array(        'export_type' => $export_type,        'single_table' => isset($single_table)));// Backward compatbility$type = $what;// Check export typeif (! isset($export_list[$type])) {    die(__('Bad type!'));}/** * valid compression methods */$compression_methods = array(    'zip',    'gzip',    'bzip2',);/** * init and variable checking */$compression = false;$onserver = false;$save_on_server = false;$buffer_needed = false;// Is it a quick or custom export?if ($_REQUEST['quick_or_custom'] == 'quick') {    $quick_export = true;} else {    $quick_export = false;}if ($_REQUEST['output_format'] == 'astext') {    $asfile = false;} else {    $asfile = true;    if (in_array($_REQUEST['compression'], $compression_methods)) {        $compression = $_REQUEST['compression'];        $buffer_needed = true;    }    if (($quick_export && !empty($_REQUEST['quick_export_onserver'])) || (!$quick_export && !empty($_REQUEST['onserver']))) {        if ($quick_export) {            $onserver = $_REQUEST['quick_export_onserver'];        } else {            $onserver = $_REQUEST['onserver'];        }        // Will we save dump on server?        $save_on_server = ! empty($cfg['SaveDir']) && $onserver;    }}// Does export require to be into file?if (isset($export_list[$type]['force_file']) && ! $asfile) {    $message = PMA_Message::error(__('Selected export type has to be saved in file!'));    include_once './libraries/header.inc.php';    if ($export_type == 'server') {        $active_page = 'server_export.php';        include './server_export.php';    } elseif ($export_type == 'database') {        $active_page = 'db_export.php';        include './db_export.php';    } else {        $active_page = 'tbl_export.php';        include './tbl_export.php';    }    exit();}// Generate error url and check for needed variablesif ($export_type == 'server') {    $err_url = 'server_export.php?' . PMA_generate_common_url();} elseif ($export_type == 'database' && strlen($db)) {    $err_url = 'db_export.php?' . PMA_generate_common_url($db);    // Check if we have something to export    if (isset($table_select)) {        $tables = $table_select;    } else {        $tables = array();    }} elseif ($export_type == 'table' && strlen($db) && strlen($table)) {    $err_url = 'tbl_export.php?' . PMA_generate_common_url($db, $table);} else {    die(__('Bad parameters!'));}// Get the functions specific to the export typerequire './libraries/export/' . PMA_securePath($type) . '.php';/** * Increase time limit for script execution and initializes some variables */@set_time_limit($cfg['ExecTimeLimit']);if (!empty($cfg['MemoryLimit'])) {    @ini_set('memory_limit', $cfg['MemoryLimit']);}// Start with empty buffer$dump_buffer = '';$dump_buffer_len = 0;// We send fake headers to avoid browser timeout when buffering$time_start = time();/** * Output handler for all exports, if needed buffering, it stores data into * $dump_buffer, otherwise it prints thems out. * * @param string  $line  the insert statement * @return  bool    Whether output succeeded */function PMA_exportOutputHandler($line){    global $time_start, $dump_buffer, $dump_buffer_len, $save_filename;    // Kanji encoding convert feature    if ($GLOBALS['output_kanji_conversion']) {        $line = PMA_kanji_str_conv($line, $GLOBALS['knjenc'], isset($GLOBALS['xkana']) ? $GLOBALS['xkana'] : '');    }    // If we have to buffer data, we will perform everything at once at the end    if ($GLOBALS['buffer_needed']) {        $dump_buffer .= $line;        if ($GLOBALS['onfly_compression']) {            $dump_buffer_len += strlen($line);            if ($dump_buffer_len > $GLOBALS['memory_limit']) {                if ($GLOBALS['output_charset_conversion']) {                    $dump_buffer = PMA_convert_string('utf-8', $GLOBALS['charset_of_file'], $dump_buffer);                }                // as bzipped                if ($GLOBALS['compression'] == 'bzip2'  && @function_exists('bzcompress')) {                    $dump_buffer = bzcompress($dump_buffer);                } elseif ($GLOBALS['compression'] == 'gzip' && @function_exists('gzencode')) {                    // as a gzipped file                    // without the optional parameter level because it bug                    $dump_buffer = gzencode($dump_buffer);                }                if ($GLOBALS['save_on_server']) {                    $write_result = @fwrite($GLOBALS['file_handle'], $dump_buffer);                    if (!$write_result || ($write_result != strlen($dump_buffer))) {                        $GLOBALS['message'] = PMA_Message::error(__('Insufficient space to save the file %s.'));                        $GLOBALS['message']->addParam($save_filename);                        return false;                    }                } else {                    echo $dump_buffer;                }                $dump_buffer = '';                $dump_buffer_len = 0;            }        } else {            $time_now = time();            if ($time_start >= $time_now + 30) {                $time_start = $time_now;                header('X-pmaPing: Pong');            } // end if        }    } else {        if ($GLOBALS['asfile']) {            if ($GLOBALS['output_charset_conversion']) {                $line = PMA_convert_string('utf-8', $GLOBALS['charset_of_file'], $line);            }            if ($GLOBALS['save_on_server'] && strlen($line) > 0) {                $write_result = @fwrite($GLOBALS['file_handle'], $line);                if (!$write_result || ($write_result != strlen($line))) {                    $GLOBALS['message'] = PMA_Message::error(__('Insufficient space to save the file %s.'));                    $GLOBALS['message']->addParam($save_filename);                    return false;                }                $time_now = time();                if ($time_start >= $time_now + 30) {                    $time_start = $time_now;                    header('X-pmaPing: Pong');                } // end if            } else {                // We export as file - output normally                echo $line;            }        } else {            // We export as html - replace special chars            echo htmlspecialchars($line);        }    }    return true;} // end of the 'PMA_exportOutputHandler()' function// Defines the default <CR><LF> format. For SQL always use \n as MySQL wants this on all platforms.if ($what == 'sql') {    $crlf = "\n";} else {    $crlf = PMA_whichCrlf();}$output_kanji_conversion = function_exists('PMA_kanji_str_conv') && $type != 'xls';// Do we need to convert charset?$output_charset_conversion = $asfile && $GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE    && isset($charset_of_file) && $charset_of_file != 'utf-8'    && $type != 'xls';// Use on the fly compression?$onfly_compression = $GLOBALS['cfg']['CompressOnFly'] && ($compression == 'gzip' || $compression == 'bzip2');if ($onfly_compression) {    $memory_limit = trim(@ini_get('memory_limit'));    // 2 MB as default    if (empty($memory_limit)) {        $memory_limit = 2 * 1024 * 1024;    }    if (strtolower(substr($memory_limit, -1)) == 'm') {        $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024;    } elseif (strtolower(substr($memory_limit, -1)) == 'k') {        $memory_limit = (int)substr($memory_limit, 0, -1) * 1024;    } elseif (strtolower(substr($memory_limit, -1)) == 'g') {        $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024 * 1024;    } else {        $memory_limit = (int)$memory_limit;    }    // Some of memory is needed for other thins and as treshold.    // Nijel: During export I had allocated (see memory_get_usage function)    //        approx 1.2MB so this comes from that.    if ($memory_limit > 1500000) {        $memory_limit -= 1500000;    }    // Some memory is needed for compression, assume 1/3    $memory_limit /= 8;}// Generate filename and mime type if neededif ($asfile) {    $pma_uri_parts = parse_url($cfg['PmaAbsoluteUri']);    if ($export_type == 'server') {        if (isset($remember_template)) {            $GLOBALS['PMA_Config']->setUserValue('pma_server_filename_template',                'Export/file_template_server', $filename_template);        }    } elseif ($export_type == 'database') {        if (isset($remember_template)) {            $GLOBALS['PMA_Config']->setUserValue('pma_db_filename_template',                'Export/file_template_database', $filename_template);        }    } else {        if (isset($remember_template)) {            $GLOBALS['PMA_Config']->setUserValue('pma_table_filename_template',                'Export/file_template_table', $filename_template);        }    }    $filename = PMA_expandUserString($filename_template);    $filename = PMA_sanitize_filename($filename);    // Grab basic dump extension and mime type    // Check if the user already added extension; get the substring where the extension would be if it was included    $extension_start_pos = strlen($filename) - strlen($export_list[$type]['extension']) - 1;    $user_extension = substr($filename, $extension_start_pos, strlen($filename));    $required_extension = "." . $export_list[$type]['extension'];    if (strtolower($user_extension) != $required_extension) {        $filename  .= $required_extension;    }    $mime_type  = $export_list[$type]['mime_type'];    // If dump is going to be compressed, set correct mime_type and add    // compression to extension    if ($compression == 'bzip2') {        $filename  .= '.bz2';        $mime_type = 'application/x-bzip2';    } elseif ($compression == 'gzip') {        $filename  .= '.gz';        $mime_type = 'application/x-gzip';    } elseif ($compression == 'zip') {        $filename  .= '.zip';        $mime_type = 'application/zip';    }}// Open file on server if neededif ($save_on_server) {    $save_filename = PMA_userDir($cfg['SaveDir']) . preg_replace('@[/\\\\]@', '_', $filename);    unset($message);    if (file_exists($save_filename) && ((!$quick_export && empty($onserverover)) || ($quick_export && $_REQUEST['quick_export_onserverover'] != 'saveitover'))) {        $message = PMA_Message::error(__('File %s already exists on server, change filename or check overwrite option.'));        $message->addParam($save_filename);    } else {        if (is_file($save_filename) && !is_writable($save_filename)) {            $message = PMA_Message::error(__('The web server does not have permission to save the file %s.'));            $message->addParam($save_filename);        } else {            if (!$file_handle = @fopen($save_filename, 'w')) {                $message = PMA_Message::error(__('The web server does not have permission to save the file %s.'));                $message->addParam($save_filename);            }        }    }    if (isset($message)) {        include_once './libraries/header.inc.php';        if ($export_type == 'server') {            $active_page = 'server_export.php';            include './server_export.php';        } elseif ($export_type == 'database') {            $active_page = 'db_export.php';            include './db_export.php';        } else {            $active_page = 'tbl_export.php';            include './tbl_export.php';        }        exit();    }}/** * Send headers depending on whether the user chose to download a dump file * or not */if (!$save_on_server) {    if ($asfile) {        // Download        // (avoid rewriting data containing HTML with anchors and forms;        // this was reported to happen under Plesk)        @ini_set('url_rewriter.tags', '');        $filename = PMA_sanitize_filename($filename);        PMA_download_header($filename, $mime_type);    } else {        // HTML        if ($export_type == 'database') {            $num_tables = count($tables);            if ($num_tables == 0) {                $message = PMA_Message::error(__('No tables found in database.'));                include_once './libraries/header.inc.php';                $active_page = 'db_export.php';                include './db_export.php';                exit();            }        }        $backup_cfgServer = $cfg['Server'];        include_once './libraries/header.inc.php';        $cfg['Server'] = $backup_cfgServer;        unset($backup_cfgServer);        echo "\n" . '<div align="' . $cell_align_left . '">' . "\n";        //echo '    <pre>' . "\n";        /**         * Displays a back button with all the $_REQUEST data in the URL (store in a variable to also display after the textarea)         */         $back_button = '<p>[ <a href="';        if ($export_type == 'server') {           $back_button .= 'server_export.php?' . PMA_generate_common_url();         } elseif ($export_type == 'database') {            $back_button .= 'db_export.php?' . PMA_generate_common_url($db);        } else {            $back_button .= 'tbl_export.php?' . PMA_generate_common_url($db, $table);        }        // Convert the multiple select elements from an array to a string        if ($export_type == 'server' && isset($_REQUEST['db_select'])) {            $_REQUEST['db_select'] = implode(",", $_REQUEST['db_select']);        } elseif ($export_type == 'database' && isset($_REQUEST['table_select'])) {            $_REQUEST['table_select'] = implode(",", $_REQUEST['table_select']);        }        foreach ($_REQUEST as $name => $value) {            $back_button .= '&' . urlencode($name) . '=' . urlencode($value);        }        $back_button .= '&repopulate=1">Back</a> ]</p>';        echo $back_button;        echo '    <form name="nofunction">' . "\n"           // remove auto-select for now: there is no way to select           // only a part of the text; anyway, it should obey           // $cfg['TextareaAutoSelect']           //. '        <textarea name="sqldump" cols="50" rows="30" onclick="this.select();" id="textSQLDUMP" wrap="OFF">' . "\n";           . '        <textarea name="sqldump" cols="50" rows="30" id="textSQLDUMP" wrap="OFF">' . "\n";    } // end download}// Fake loop just to allow skip of remain of this code by break, I'd really// need exceptions here :-)do {    // Add possibly some comments to export    if (!PMA_exportHeader()) {        break;    }    // Will we need relation & co. setup?    $do_relation = isset($GLOBALS[$what . '_relation']);    $do_comments = isset($GLOBALS[$what . '_include_comments']);    $do_mime     = isset($GLOBALS[$what . '_mime']);    if ($do_relation || $do_comments || $do_mime) {        $cfgRelation = PMA_getRelationsParam();    }    if ($do_mime) {        include_once './libraries/transformations.lib.php';    }    // Include dates in export?    $do_dates   = isset($GLOBALS[$what . '_dates']);    /**     * Builds the dump     */    // Gets the number of tables if a dump of a database has been required    if ($export_type == 'server') {        if (isset($db_select)) {            $tmp_select = implode($db_select, '|');            $tmp_select = '|' . $tmp_select . '|';        }        // Walk over databases        foreach ($GLOBALS['pma']->databases as $current_db) {            if ((isset($tmp_select) && strpos(' ' . $tmp_select, '|' . $current_db . '|'))                || ! isset($tmp_select)) {                if (!PMA_exportDBHeader($current_db)) {                    break 2;                }                if (!PMA_exportDBCreate($current_db)) {                    break 2;                }                if (function_exists('PMA_exportRoutines') && strpos($GLOBALS['sql_structure_or_data'], 'structure') !== false && isset($GLOBALS['sql_procedure_function'])) {                    PMA_exportRoutines($current_db);                }                $tables = PMA_DBI_get_tables($current_db);                $views = array();                foreach ($tables as $table) {                    // if this is a view, collect it for later; views must be exported                    // after the tables                    $is_view = PMA_Table::isView($current_db, $table);                    if ($is_view) {                        $views[] = $table;                    }                    if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                        // for a view, export a stand-in definition of the table                        // to resolve view dependencies                        if (!PMA_exportStructure($current_db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, $is_view ? 'stand_in' : 'create_table', $export_type)) {                            break 3;                        }                    }                    // if this is a view or a merge table, don't export data                    if (($GLOBALS[$what . '_structure_or_data'] == 'data' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') && !($is_view || PMA_Table::isMerge($current_db, $table))) {                        $local_query  = 'SELECT * FROM ' . PMA_backquote($current_db) . '.' . PMA_backquote($table);                        if (!PMA_exportData($current_db, $table, $crlf, $err_url, $local_query)) {                            break 3;                        }                    }                    // now export the triggers (needs to be done after the data because                    // triggers can modify already imported tables)                    if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                        if (!PMA_exportStructure($current_db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'triggers', $export_type)) {                            break 2;                        }                    }                }                foreach ($views as $view) {                    // no data export for a view                    if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                        if (!PMA_exportStructure($current_db, $view, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'create_view', $export_type)) {                            break 3;                        }                    }                }                if (!PMA_exportDBFooter($current_db)) {                    break 2;                }            }        }    } elseif ($export_type == 'database') {        if (!PMA_exportDBHeader($db)) {            break;        }        if (function_exists('PMA_exportRoutines') && strpos($GLOBALS['sql_structure_or_data'], 'structure') !== false && isset($GLOBALS['sql_procedure_function'])) {            PMA_exportRoutines($db);        }        $i = 0;        $views = array();        // $tables contains the choices from the user (via $table_select)        foreach ($tables as $table) {            // if this is a view, collect it for later; views must be exported after            // the tables            $is_view = PMA_Table::isView($db, $table);            if ($is_view) {                $views[] = $table;            }            if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                // for a view, export a stand-in definition of the table                // to resolve view dependencies                if (!PMA_exportStructure($db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, $is_view ? 'stand_in' : 'create_table', $export_type)) {                    break 2;                }            }            // if this is a view or a merge table, don't export data            if (($GLOBALS[$what . '_structure_or_data'] == 'data' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') && !($is_view || PMA_Table::isMerge($db, $table))) {                $local_query  = 'SELECT * FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table);                if (!PMA_exportData($db, $table, $crlf, $err_url, $local_query)) {                    break 2;                }            }            // now export the triggers (needs to be done after the data because            // triggers can modify already imported tables)            if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                if (!PMA_exportStructure($db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'triggers', $export_type)) {                    break 2;                }            }        }        foreach ($views as $view) {            // no data export for a view            if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                if (!PMA_exportStructure($db, $view, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'create_view', $export_type)) {                    break 2;                }            }        }        if (!PMA_exportDBFooter($db)) {            break;        }    } else {        if (!PMA_exportDBHeader($db)) {            break;        }        // We export just one table        // $allrows comes from the form when "Dump all rows" has been selected        if ($allrows == '0' && $limit_to > 0 && $limit_from >= 0) {            $add_query  = ' LIMIT '                        . (($limit_from > 0) ? $limit_from . ', ' : '')                        . $limit_to;        } else {            $add_query  = '';        }        $is_view = PMA_Table::isView($db, $table);        if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {            if (!PMA_exportStructure($db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, $is_view ? 'create_view' : 'create_table', $export_type)) {                break;            }        }        // If this is an export of a single view, we have to export data;        // for example, a PDF report        // if it is a merge table, no data is exported        if (($GLOBALS[$what . '_structure_or_data'] == 'data' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') && ! PMA_Table::isMerge($db, $table)) {            if (!empty($sql_query)) {                // only preg_replace if needed                if (!empty($add_query)) {                    // remove trailing semicolon before adding a LIMIT                    $sql_query = preg_replace('%;\s*$%', '', $sql_query);                }                $local_query = $sql_query . $add_query;                PMA_DBI_select_db($db);            } else {                $local_query  = 'SELECT * FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table) . $add_query;            }            if (!PMA_exportData($db, $table, $crlf, $err_url, $local_query)) {                break;            }        }        // now export the triggers (needs to be done after the data because        // triggers can modify already imported tables)        if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {            if (!PMA_exportStructure($db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'triggers', $export_type)) {                break 2;            }        }        if (!PMA_exportDBFooter($db)) {            break;        }    }    if (!PMA_exportFooter()) {        break;    }} while (false);// End of fake loopif ($save_on_server && isset($message)) {    include_once './libraries/header.inc.php';    if ($export_type == 'server') {        $active_page = 'server_export.php';        include './server_export.php';    } elseif ($export_type == 'database') {        $active_page = 'db_export.php';        include './db_export.php';    } else {        $active_page = 'tbl_export.php';        include './tbl_export.php';    }    exit();}/** * Send the dump as a file... */if (!empty($asfile)) {    // Convert the charset if required.    if ($output_charset_conversion) {        $dump_buffer = PMA_convert_string('utf-8', $GLOBALS['charset_of_file'], $dump_buffer);    }    // Do the compression    // 1. as a zipped file    if ($compression == 'zip') {        if (@function_exists('gzcompress')) {            $zipfile = new zipfile();            $zipfile -> addFile($dump_buffer, substr($filename, 0, -4));            $dump_buffer = $zipfile -> file();        }    } elseif ($compression == 'bzip2') {        // 2. as a bzipped file        if (@function_exists('bzcompress')) {            $dump_buffer = bzcompress($dump_buffer);        }    } elseif ($compression == 'gzip') {        // 3. as a gzipped file        if (@function_exists('gzencode') && !@ini_get('zlib.output_compression')) {            // without the optional parameter level because it bug            $dump_buffer = gzencode($dump_buffer);        }    }    /* If ve saved on server, we have to close file now */    if ($save_on_server) {        $write_result = @fwrite($file_handle, $dump_buffer);        fclose($file_handle);        if (strlen($dump_buffer) !=0 && (!$write_result || ($write_result != strlen($dump_buffer)))) {            $message = new PMA_Message(__('Insufficient space to save the file %s.'), PMA_Message::ERROR, $save_filename);        } else {            $message = new PMA_Message(__('Dump has been saved to file %s.'), PMA_Message::SUCCESS, $save_filename);        }        include_once './libraries/header.inc.php';        if ($export_type == 'server') {            $active_page = 'server_export.php';            include_once './server_export.php';        } elseif ($export_type == 'database') {            $active_page = 'db_export.php';            include_once './db_export.php';        } else {            $active_page = 'tbl_export.php';            include_once './tbl_export.php';        }        exit();    } else {        echo $dump_buffer;    }} else {    /**     * Displays the dump...     *     * Close the html tags and add the footers if dump is displayed on screen     */    echo '</textarea>' . "\n"       . '    </form>' . "\n";    echo $back_button;    echo "\n";    echo '</div>' . "\n";    echo "\n";?><script type="text/javascript">//<![CDATA[    var bodyWidth=null; var bodyHeight=null;    if (document.getElementById('textSQLDUMP')) {        bodyWidth  = self.innerWidth;        bodyHeight = self.innerHeight;        if (!bodyWidth && !bodyHeight) {            if (document.compatMode && document.compatMode == "BackCompat") {                bodyWidth  = document.body.clientWidth;                bodyHeight = document.body.clientHeight;            } else if (document.compatMode && document.compatMode == "CSS1Compat") {                bodyWidth  = document.documentElement.clientWidth;                bodyHeight = document.documentElement.clientHeight;            }        }        document.getElementById('textSQLDUMP').style.width=(bodyWidth-50) + 'px';        document.getElementById('textSQLDUMP').style.height=(bodyHeight-100) + 'px';    }//]]></script><?php    include './libraries/footer.inc.php';} // end if?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for routine management. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sets required globals */function PMA_RTN_setGlobals(){    global $param_directions, $param_opts_num, $param_sqldataaccess;    $param_directions    = array('IN',                                 'OUT',                                 'INOUT');    $param_opts_num      = array('UNSIGNED',                                 'ZEROFILL',                                 'UNSIGNED ZEROFILL');    $param_sqldataaccess = array('NO SQL',                                 'CONTAINS SQL',                                 'READS SQL DATA',                                 'MODIFIES SQL DATA');}/** * Main function for the routines functionality */function PMA_RTN_main(){    global $db;    PMA_RTN_setGlobals();    /**     * Process all requests     */    PMA_RTN_handleEditor();    PMA_RTN_handleExecute();    PMA_RTN_handleExport();    /**     * Display a list of available routines     */    $columns  = "`SPECIFIC_NAME`, `ROUTINE_NAME`, `ROUTINE_TYPE`, ";    $columns .= "`DTD_IDENTIFIER`, `ROUTINE_DEFINITION`";    $where    = "ROUTINE_SCHEMA='" . PMA_sqlAddSlashes($db) . "'";    $items    = PMA_DBI_fetch_result(        "SELECT $columns FROM `INFORMATION_SCHEMA`.`ROUTINES` WHERE $where;"    );    echo PMA_RTE_getList('routine', $items);    /**     * Display the form for adding a new routine, if the user has the privileges.     */    echo PMA_RTN_getFooterLinks();    /**     * Display a warning for users with PHP's old "mysql" extension.     */    if ($GLOBALS['cfg']['Server']['extension'] === 'mysql') {        trigger_error(            __('You are using PHP\'s deprecated \'mysql\' extension, '            . 'which is not capable of handling multi queries. '            . '<b>The execution of some stored routines may fail!</b> '            . 'Please use the improved \'mysqli\' extension to '            . 'avoid any problems.'),            E_USER_WARNING        );    }} // end PMA_RTN_main()/** * This function parses a string containing one parameter of a routine, * as returned by PMA_RTN_parseAllParameters() and returns an array containing * the information about this parameter. * * @param   string  $value    A string containing one parameter of a routine * * @return  array             Parsed information about the input parameter */function PMA_RTN_parseOneParameter($value){    global $param_directions;    $retval = array(0 => '',                    1 => '',                    2 => '',                    3 => '',                    4 => '');    $parsed_param = PMA_SQP_parse($value);    $pos = 0;    if (in_array(strtoupper($parsed_param[$pos]['data']), $param_directions)) {        $retval[0] = strtoupper($parsed_param[0]['data']);        $pos++;    }    if ($parsed_param[$pos]['type'] == 'alpha_identifier'        || $parsed_param[$pos]['type'] == 'quote_backtick'    ) {        $retval[1] = PMA_unQuote($parsed_param[$pos]['data']);        $pos++;    }    $depth = 0;    $param_length = '';    $param_opts = array();    for ($i=$pos; $i<$parsed_param['len']; $i++) {        if (($parsed_param[$i]['type'] == 'alpha_columnType'            || $parsed_param[$i]['type'] == 'alpha_functionName') && $depth == 0 // "CHAR" seems to be mistaken for a function by the parser        ) {            $retval[2] = strtoupper($parsed_param[$i]['data']);        } else if ($parsed_param[$i]['type'] == 'punct_bracket_open_round' && $depth == 0) {            $depth = 1;        } else if ($parsed_param[$i]['type'] == 'punct_bracket_close_round' && $depth == 1) {            $depth = 0;        } else if ($depth == 1) {            $param_length .= $parsed_param[$i]['data'];        } else if ($parsed_param[$i]['type'] == 'alpha_reservedWord' && strtoupper($parsed_param[$i]['data']) == 'CHARSET' && $depth == 0) {            if ($parsed_param[$i+1]['type'] == 'alpha_charset' || $parsed_param[$i+1]['type'] == 'alpha_identifier') {                $param_opts[] = strtolower($parsed_param[$i+1]['data']);            }        } else if ($parsed_param[$i]['type'] == 'alpha_columnAttrib' && $depth == 0) {            $param_opts[] = strtoupper($parsed_param[$i]['data']);        }    }    $retval[3] = $param_length;    sort($param_opts);    $retval[4] = implode(' ', $param_opts);    return $retval;} // end PMA_RTN_parseOneParameter()/** * This function looks through the contents of a parsed * SHOW CREATE [PROCEDURE | FUNCTION] query and extracts * information about the routine's parameters. * * @param   array   $parsed_query  Parsed query, returned by by PMA_SQP_parse() * @param   string  $routine_type  Routine type: 'PROCEDURE' or 'FUNCTION' * * @return  array   Information about the parameteres of a routine. */function PMA_RTN_parseAllParameters($parsed_query, $routine_type){    $retval = array();    $retval['num'] = 0;    // First get the list of parameters from the query    $buffer = '';    $params = array();    $fetching = false;    $depth = 0;    for ($i=0; $i<$parsed_query['len']; $i++) {        if ($parsed_query[$i]['type'] == 'alpha_reservedWord' && $parsed_query[$i]['data'] == $routine_type) {            $fetching = true;        } else if ($fetching == true && $parsed_query[$i]['type'] == 'punct_bracket_open_round') {            $depth++;            if ($depth > 1) {                $buffer .= $parsed_query[$i]['data'] . ' ';            }        } else if ($fetching == true && $parsed_query[$i]['type'] == 'punct_bracket_close_round') {            $depth--;            if ($depth > 0) {                $buffer .= $parsed_query[$i]['data'] . ' ';            } else {                break;            }        } else if ($parsed_query[$i]['type'] == 'punct_listsep' && $depth == 1) {            $params[] = $buffer;            $retval['num']++;            $buffer = '';        } else if ($fetching == true && $depth > 0) {            $buffer .= $parsed_query[$i]['data'] . ' ';        }    }    if (! empty($buffer)) {        $params[] = $buffer;        $retval['num']++;    }    // Now parse each parameter individually    foreach ($params as $key => $value) {        list($retval['dir'][],             $retval['name'][],             $retval['type'][],             $retval['length'][],             $retval['opts'][]) = PMA_RTN_parseOneParameter($value);    }    // Since some indices of $retval may be still undefined, we fill    // them each with an empty array to avoid E_ALL errors in PHP.    foreach (array('dir', 'name', 'type', 'length', 'opts') as $key => $index) {        if (! isset($retval[$index])) {            $retval[$index] = array();        }    }    return $retval;} // end PMA_RTN_parseAllParameters()/** * This function looks through the contents of a parsed * SHOW CREATE [PROCEDURE | FUNCTION] query and extracts * information about the routine's definer. * * @param   array   $parsed_query   Parsed query, returned by PMA_SQP_parse() * * @return  string  The definer of a routine. */function PMA_RTN_parseRoutineDefiner($parsed_query){    $retval = '';    $fetching = false;    for ($i=0; $i<$parsed_query['len']; $i++) {        if ($parsed_query[$i]['type'] == 'alpha_reservedWord' && $parsed_query[$i]['data'] == 'DEFINER') {            $fetching = true;        } else if ($fetching == true && ($parsed_query[$i]['type'] != 'quote_backtick' && substr($parsed_query[$i]['type'], 0, 5) != 'punct')) {            break;        } else if ($fetching == true && $parsed_query[$i]['type'] == 'quote_backtick') {            $retval .= PMA_unQuote($parsed_query[$i]['data']);        } else if ($fetching == true && $parsed_query[$i]['type'] == 'punct_user') {            $retval .= $parsed_query[$i]['data'];        }    }    return $retval;} // end PMA_RTN_parseRoutineDefiner()/** * Handles editor requests for adding or editing an item */function PMA_RTN_handleEditor(){    global $_GET, $_POST, $_REQUEST, $GLOBALS, $db, $errors;    if (! empty($_REQUEST['editor_process_add'])        || ! empty($_REQUEST['editor_process_edit'])    ) {        /**         * Handle a request to create/edit a routine         */        $sql_query = '';        $routine_query = PMA_RTN_getQueryFromRequest();        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()            // Execute the created query            if (! empty($_REQUEST['editor_process_edit'])) {                if (! in_array($_REQUEST['item_original_type'], array('PROCEDURE', 'FUNCTION'))) {                    $errors[] = sprintf(__('Invalid routine type: "%s"'), htmlspecialchars($_REQUEST['item_original_type']));                } else {                    // Backup the old routine, in case something goes wrong                    $create_routine = PMA_DBI_get_definition($db, $_REQUEST['item_original_type'], $_REQUEST['item_original_name']);                    $drop_routine = "DROP {$_REQUEST['item_original_type']} " . PMA_backquote($_REQUEST['item_original_name']) . ";\n";                    $result = PMA_DBI_try_query($drop_routine);                    if (! $result) {                        $errors[] = sprintf(__('The following query has failed: "%s"'), $drop_routine) . '<br />'                                          . __('MySQL said: ') . PMA_DBI_getError(null);                    } else {                        $result = PMA_DBI_try_query($routine_query);                        if (! $result) {                            $errors[] = sprintf(__('The following query has failed: "%s"'), $routine_query) . '<br />'                                              . __('MySQL said: ') . PMA_DBI_getError(null);                            // We dropped the old routine, but were unable to create the new one                            // Try to restore the backup query                            $result = PMA_DBI_try_query($create_routine);                            if (! $result) {                                // OMG, this is really bad! We dropped the query, failed to create a new one                                // and now even the backup query does not execute!                                // This should not happen, but we better handle this just in case.                                $errors[] = __('Sorry, we failed to restore the dropped routine.') . '<br />'                                                  . __('The backed up query was:') . "\"$create_routine\"" . '<br />'                                                  . __('MySQL said: ') . PMA_DBI_getError(null);                            }                        } else {                            $message = PMA_Message::success(__('Routine %1$s has been modified.'));                            $message->addParam(PMA_backquote($_REQUEST['item_name']));                            $sql_query = $drop_routine . $routine_query;                        }                    }                }            } else {                // 'Add a new routine' mode                $result = PMA_DBI_try_query($routine_query);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $routine_query) . '<br /><br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $message = PMA_Message::success(__('Routine %1$s has been created.'));                    $message->addParam(PMA_backquote($_REQUEST['item_name']));                    $sql_query = $routine_query;                }            }        }        if (count($errors)) {            $message = PMA_Message::error(__('<b>One or more errors have occured while processing your request:</b>'));            $message->addString('<ul>');            foreach ($errors as $string) {                $message->addString('<li>' . $string . '</li>');            }            $message->addString('</ul>');        }        $output = PMA_showMessage($message, $sql_query);        if ($GLOBALS['is_ajax_request']) {            $extra_data = array();            if ($message->isSuccess()) {                $columns  = "`SPECIFIC_NAME`, `ROUTINE_NAME`, `ROUTINE_TYPE`, `DTD_IDENTIFIER`, `ROUTINE_DEFINITION`";                $where    = "ROUTINE_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "                          . "AND ROUTINE_NAME='" . PMA_sqlAddSlashes($_REQUEST['item_name']) . "'"                          . "AND ROUTINE_TYPE='" . PMA_sqlAddSlashes($_REQUEST['item_type']) . "'";                $routine  = PMA_DBI_fetch_single_row("SELECT $columns FROM `INFORMATION_SCHEMA`.`ROUTINES` WHERE $where;");                $extra_data['name']    = htmlspecialchars(strtoupper($_REQUEST['item_name']));                $extra_data['new_row'] = PMA_RTN_getRowForList($routine);                $extra_data['insert']  = ! empty($routine);                $response = $output;            } else {                $response = $message;            }            PMA_ajaxResponse($response, $message->isSuccess(), $extra_data);        }    }    /**     * Display a form used to add/edit a routine, if necessary     */    if (count($errors) || ( empty($_REQUEST['editor_process_add']) && empty($_REQUEST['editor_process_edit'])        && (! empty($_REQUEST['add_item']) || ! empty($_REQUEST['edit_item'])        || ! empty($_REQUEST['routine_addparameter']) || ! empty($_REQUEST['routine_removeparameter'])        || ! empty($_REQUEST['routine_changetype']))) // FIXME: this must be simpler than that    ) {        // Handle requests to add/remove parameters and changing routine type        // This is necessary when JS is disabled        $operation = '';        if (! empty($_REQUEST['routine_addparameter'])) {            $operation = 'add';        } else if (! empty($_REQUEST['routine_removeparameter'])) {            $operation = 'remove';        } else if (! empty($_REQUEST['routine_changetype'])) {            $operation = 'change';        }        // Get the data for the form (if any)        if (! empty($_REQUEST['add_item'])) {            $title = PMA_RTE_getWord('add');            $routine = PMA_RTN_getDataFromRequest();            $mode = 'add';        } else if (! empty($_REQUEST['edit_item'])) {            $title = __("Edit routine");            if (! $operation && ! empty($_REQUEST['item_name']) && empty($_REQUEST['editor_process_edit'])) {                $routine = PMA_RTN_getDataFromName($_REQUEST['item_name'], $_REQUEST['item_type']);                if ($routine !== false) {                    $routine['item_original_name'] = $routine['item_name'];                    $routine['item_original_type'] = $routine['item_type'];                }            } else {                $routine = PMA_RTN_getDataFromRequest();            }            $mode = 'edit';        }        if ($routine !== false) {            // Show form            $editor = PMA_RTN_getEditorForm($mode, $operation, $routine);            if ($GLOBALS['is_ajax_request']) {                $template   = PMA_RTN_getParameterRow();                $extra_data = array('title' => $title,                                    'param_template' => $template,                                    'type' => $routine['item_type']);                PMA_ajaxResponse($editor, true, $extra_data);            }            echo "\n\n<h2>$title</h2>\n\n$editor";            include './libraries/footer.inc.php';            // exit;        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, false);            } else {                $message->display();            }        }    }} // end PMA_RTN_handleEditor()/** * This function will generate the values that are required to * complete the editor form. It is especially necessary to handle * the 'Add another parameter', 'Remove last parameter' and * 'Change routine type' functionalities when JS is disabled. * * @return  array    Data necessary to create the routine editor. */function PMA_RTN_getDataFromRequest(){    global $_REQUEST, $param_directions, $param_sqldataaccess;    $retval = array();    $indices = array('item_name',                     'item_original_name',                     'item_returnlength',                     'item_returnopts_num',                     'item_returnopts_text',                     'item_definition',                     'item_comment',                     'item_definer');    foreach ($indices as $key => $index) {        $retval[$index] = isset($_REQUEST[$index]) ? $_REQUEST[$index] : '';    }    $retval['item_type']         = 'PROCEDURE';    $retval['item_type_toggle']  = 'FUNCTION';    if (isset($_REQUEST['item_type']) && $_REQUEST['item_type'] == 'FUNCTION') {        $retval['item_type']         = 'FUNCTION';        $retval['item_type_toggle']  = 'PROCEDURE';    }    $retval['item_original_type'] = 'PROCEDURE';    if (isset($_REQUEST['item_original_type'])        && $_REQUEST['item_original_type'] == 'FUNCTION'    ) {        $retval['item_original_type'] = 'FUNCTION';    }    $retval['item_num_params']      = 0;    $retval['item_param_dir']       = array();    $retval['item_param_name']      = array();    $retval['item_param_type']      = array();    $retval['item_param_length']    = array();    $retval['item_param_opts_num']  = array();    $retval['item_param_opts_text'] = array();    if (   isset($_REQUEST['item_param_name'])        && isset($_REQUEST['item_param_type'])        && isset($_REQUEST['item_param_length'])        && isset($_REQUEST['item_param_opts_num'])        && isset($_REQUEST['item_param_opts_text'])        && is_array($_REQUEST['item_param_name'])        && is_array($_REQUEST['item_param_type'])        && is_array($_REQUEST['item_param_length'])        && is_array($_REQUEST['item_param_opts_num'])        && is_array($_REQUEST['item_param_opts_text'])    ) {        if ($_REQUEST['item_type'] == 'PROCEDURE') {            $retval['item_param_dir'] = $_REQUEST['item_param_dir'];            foreach ($retval['item_param_dir'] as $key => $value) {                if (! in_array($value, $param_directions, true)) {                    $retval['item_param_dir'][$key] = '';                }            }        }        $retval['item_param_name'] = $_REQUEST['item_param_name'];        $retval['item_param_type'] = $_REQUEST['item_param_type'];        foreach ($retval['item_param_type'] as $key => $value) {            if (! in_array($value, PMA_getSupportedDatatypes(), true)) {                $retval['item_param_type'][$key] = '';            }        }        $retval['item_param_length']    = $_REQUEST['item_param_length'];        $retval['item_param_opts_num']  = $_REQUEST['item_param_opts_num'];        $retval['item_param_opts_text'] = $_REQUEST['item_param_opts_text'];        $retval['item_num_params'] = max(            count($retval['item_param_name']),            count($retval['item_param_type']),            count($retval['item_param_length']),            count($retval['item_param_opts_num']),            count($retval['item_param_opts_text'])        );    }    $retval['item_returntype'] = '';    if (isset($_REQUEST['item_returntype'])        && in_array($_REQUEST['item_returntype'], PMA_getSupportedDatatypes())    ) {        $retval['item_returntype'] = $_REQUEST['item_returntype'];    }    $retval['item_isdeterministic'] = '';    if (isset($_REQUEST['item_isdeterministic'])        && strtolower($_REQUEST['item_isdeterministic']) == 'on'    ) {        $retval['item_isdeterministic'] = " checked='checked'";    }    $retval['item_securitytype_definer'] = '';    $retval['item_securitytype_invoker'] = '';    if (isset($_REQUEST['item_securitytype'])) {        if ($_REQUEST['item_securitytype'] === 'DEFINER') {            $retval['item_securitytype_definer'] = " selected='selected'";        } else if ($_REQUEST['item_securitytype'] === 'INVOKER') {            $retval['item_securitytype_invoker'] = " selected='selected'";        }    }    $retval['item_sqldataaccess'] = '';    if (isset($_REQUEST['item_sqldataaccess'])        && in_array($_REQUEST['item_sqldataaccess'], $param_sqldataaccess, true)    ) {        $retval['item_sqldataaccess'] = $_REQUEST['item_sqldataaccess'];    }    return $retval;} // end function PMA_RTN_getDataFromRequest()/** * This function will generate the values that are required to complete * the "Edit routine" form given the name of a routine. * * @param   string   $name   The name of the routine. * @param   string   $type   Type of routine (ROUTINE|PROCEDURE) * @param   bool     $all    Whether to return all data or just *                           the info about parameters. * * @return  array    Data necessary to create the routine editor. */function PMA_RTN_getDataFromName($name, $type, $all = true){    global $db;    $retval  = array();    // Build and execute the query    $fields  = "SPECIFIC_NAME, ROUTINE_TYPE, DTD_IDENTIFIER, "             . "ROUTINE_DEFINITION, IS_DETERMINISTIC, SQL_DATA_ACCESS, "             . "ROUTINE_COMMENT, SECURITY_TYPE";    $where   = "ROUTINE_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "             . "AND SPECIFIC_NAME='" . PMA_sqlAddSlashes($name) . "'"             . "AND ROUTINE_TYPE='" . PMA_sqlAddSlashes($type) . "'";    $query   = "SELECT $fields FROM INFORMATION_SCHEMA.ROUTINES WHERE $where;";    $routine = PMA_DBI_fetch_single_row($query);    if (! $routine) {        return false;    }    // Get required data    $retval['item_name'] = $routine['SPECIFIC_NAME'];    $retval['item_type'] = $routine['ROUTINE_TYPE'];    $parsed_query = PMA_SQP_parse(        PMA_DBI_get_definition(            $db,            $routine['ROUTINE_TYPE'],            $routine['SPECIFIC_NAME']        )    );    $params = PMA_RTN_parseAllParameters($parsed_query, $routine['ROUTINE_TYPE']);    $retval['item_num_params']      = $params['num'];    $retval['item_param_dir']       = $params['dir'];    $retval['item_param_name']      = $params['name'];    $retval['item_param_type']      = $params['type'];    $retval['item_param_length']    = $params['length'];    $retval['item_param_opts_num']  = $params['opts'];    $retval['item_param_opts_text'] = $params['opts'];    // Get extra data    if ($all) {        if ($retval['item_type'] == 'FUNCTION') {            $retval['item_type_toggle'] = 'PROCEDURE';        } else {            $retval['item_type_toggle'] = 'FUNCTION';        }        $retval['item_returntype']   = '';        $retval['item_returnlength'] = '';        $retval['item_returnopts_num']  = '';        $retval['item_returnopts_text'] = '';        if (! empty($routine['DTD_IDENTIFIER'])) {            if (strlen($routine['DTD_IDENTIFIER']) > 63) {                // If the DTD_IDENTIFIER string from INFORMATION_SCHEMA is                // at least 64 characters, then it may actually have been                // chopped because that column is a varchar(64), so we will                // parse the output of SHOW CREATE query to get accurate                // information about the return variable.                $dtd = '';                $fetching = false;                for ($i=0; $i<$parsed_query['len']; $i++) {                    if ($parsed_query[$i]['type'] == 'alpha_reservedWord'                        && strtoupper($parsed_query[$i]['data']) == 'RETURNS'                    ) {                        $fetching = true;                    } else if ($fetching == true && $parsed_query[$i]['type'] == 'alpha_reservedWord') {                        // We will not be looking for options such as UNSIGNED                        // or ZEROFILL because there is no way that a numeric                        // field's DTD_IDENTIFIER can be longer than 64                        // characters. We can safely assume that the return                        // datatype is either ENUM or SET, so we only look                        // for CHARSET.                        $word = strtoupper($parsed_query[$i]['data']);                        if ($word == 'CHARSET'                            && ($parsed_query[$i+1]['type'] == 'alpha_charset'                            || $parsed_query[$i+1]['type'] == 'alpha_identifier')                        ) {                            $dtd .= $word . ' ' . $parsed_query[$i+1]['data'];                        }                        break;                    } else if ($fetching == true) {                        $dtd .= $parsed_query[$i]['data'] . ' ';                    }                }                $routine['DTD_IDENTIFIER'] = $dtd;            }            $returnparam = PMA_RTN_parseOneParameter($routine['DTD_IDENTIFIER']);            $retval['item_returntype']      = $returnparam[2];            $retval['item_returnlength']    = $returnparam[3];            $retval['item_returnopts_num']  = $returnparam[4];            $retval['item_returnopts_text'] = $returnparam[4];        }        $retval['item_definer']         = PMA_RTN_parseRoutineDefiner($parsed_query);        $retval['item_definition']      = $routine['ROUTINE_DEFINITION'];        $retval['item_isdeterministic'] = '';        if ($routine['IS_DETERMINISTIC'] == 'YES') {            $retval['item_isdeterministic'] = " checked='checked'";        }        $retval['item_securitytype_definer'] = '';        $retval['item_securitytype_invoker'] = '';        if ($routine['SECURITY_TYPE'] == 'DEFINER') {            $retval['item_securitytype_definer'] = " selected='selected'";        } else if ($routine['SECURITY_TYPE'] == 'INVOKER') {            $retval['item_securitytype_invoker'] = " selected='selected'";        }        $retval['item_sqldataaccess'] = $routine['SQL_DATA_ACCESS'];        $retval['item_comment']       = $routine['ROUTINE_COMMENT'];    }    return $retval;} // PMA_RTN_getDataFromName()/** * Creates one row for the parameter table used in the routine editor. * * @param   array    $routine    Data for the routine returned by *                               PMA_RTN_getDataFromRequest() or *                               PMA_RTN_getDataFromName() * @param   mixed    $index      Either a numeric index of the row being processed *                               or NULL to create a template row for AJAX request * @param   string   $class      Class used to hide the direction column, if the *                               row is for a stored function. * * @return    string    HTML code of one row of parameter table for the editor. */function PMA_RTN_getParameterRow($routine = array(), $index = null, $class = ''){    global $param_directions, $param_opts_num, $titles;    if ($index === null) {        // template row for AJAX request        $i = 0;        $index = '%s';        $drop_class = '';        $routine = array(            'item_param_dir'       => array(0 => ''),            'item_param_name'      => array(0 => ''),            'item_param_type'      => array(0 => ''),            'item_param_length'    => array(0 => ''),            'item_param_opts_num'  => array(0 => ''),            'item_param_opts_text' => array(0 => '')        );    } else if (! empty($routine)) {        // regular row for routine editor        $drop_class = ' hide';        $i = $index;    } else {        // No input data. This shouldn't happen,        // but better be safe than sorry.        return '';    }    // Create the output    $retval  = "";    $retval .= "        <tr>\n";    $retval .= "            <td class='routine_direction_cell$class'>\n";    $retval .= "                <select name='item_param_dir[$index]'>\n";    foreach ($param_directions as $key => $value) {        $selected = "";        if (! empty($routine['item_param_dir'][$i])            && $routine['item_param_dir'][$i] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "                    <option$selected>$value</option>\n";    }    $retval .= "                </select>\n";    $retval .= "            </td>\n";    $retval .= "            <td><input name='item_param_name[$index]' type='text'\n";    $retval .= "                       value='{$routine['item_param_name'][$i]}' /></td>\n";    $retval .= "            <td><select name='item_param_type[$index]'>";    $retval .= PMA_getSupportedDatatypes(true, $routine['item_param_type'][$i]) . "\n";    $retval .= "            </select></td>\n";    $retval .= "            <td>\n";    $retval .= "                <input id='item_param_length_$index'\n";    $retval .= "                       name='item_param_length[$index]' type='text'\n";    $retval .= "                       value='{$routine['item_param_length'][$i]}' />\n";    $retval .= "                <div class='enum_hint'>\n";    $retval .= "                    <a class='open_enum_editor' target='_blank'\n";    $retval .= "                       href='enum_editor.php?" . PMA_generate_common_url() . "&amp;values=" . $routine['item_param_length'][$i] . "&amp;field=" . $routine['item_param_name'][$i] . "'>\n";    $retval .= "                        " . PMA_getImage('b_edit', '', array('title'=>__('ENUM/SET editor'))) . "\n";    $retval .= "                    </a>\n";    $retval .= "                </div>\n";    $retval .= "            </td>\n";    $retval .= "            <td class='hide no_len'>---</td>\n";    $retval .= "            <td class='routine_param_opts_text'>\n";    $retval .= PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_CHARSET,        "item_param_opts_text[$index]",        null,        $routine['item_param_opts_text'][$i]    );    $retval .= "            </td>\n";    $retval .= "            <td class='hide no_opts'>---</td>\n";    $retval .= "            <td class='routine_param_opts_num'>\n";    $retval .= "                <select name='item_param_opts_num[$index]'>\n";    $retval .= "                    <option value=''></option>";    foreach ($param_opts_num as $key => $value) {        $selected = "";        if (! empty($routine['item_param_opts_num'][$i])            && $routine['item_param_opts_num'][$i] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "\n                </select>\n";    $retval .= "            </td>\n";    $retval .= "            <td class='routine_param_remove$drop_class'>\n";    $retval .= "                <a href='#' class='routine_param_remove_anchor'>\n";    $retval .= "                    {$titles['Drop']}\n";    $retval .= "                </a>\n";    $retval .= "            </td>\n";    $retval .= "        </tr>\n";    return $retval;} // end PMA_RTN_getParameterRow()/** * Displays a form used to add/edit a routine * * @param   string   $mode         If the editor will be used edit a routine *                                 or add a new one: 'edit' or 'add'. * @param   string   $operation    If the editor was previously invoked with *                                 JS turned off, this will hold the name of *                                 the current operation * @param   array    $routine      Data for the routine returned by *                                 PMA_RTN_getDataFromRequest() or *                                 PMA_RTN_getDataFromName() * * @return  string   HTML code for the editor. */function PMA_RTN_getEditorForm($mode, $operation, $routine){    global $db, $errors, $param_sqldataaccess, $param_opts_num;    // Escape special characters    $need_escape = array(        'item_original_name',        'item_name',        'item_returnlength',        'item_definition',        'item_definer',        'item_comment'    );    foreach ($need_escape as $key => $index) {        $routine[$index] = htmlentities($routine[$index], ENT_QUOTES);    }    for ($i=0; $i<$routine['item_num_params']; $i++) {        $routine['item_param_name'][$i]   = htmlentities(            $routine['item_param_name'][$i],            ENT_QUOTES        );        $routine['item_param_length'][$i] = htmlentities(            $routine['item_param_length'][$i],            ENT_QUOTES        );    }    // Handle some logic first    if ($operation == 'change') {        if ($routine['item_type'] == 'PROCEDURE') {            $routine['item_type']        = 'FUNCTION';            $routine['item_type_toggle'] = 'PROCEDURE';        } else {            $routine['item_type']        = 'PROCEDURE';            $routine['item_type_toggle'] = 'FUNCTION';        }    } else if ($operation == 'add' || ($routine['item_num_params'] == 0 && $mode == 'add' && ! $errors)) {        $routine['item_param_dir'][]       = '';        $routine['item_param_name'][]      = '';        $routine['item_param_type'][]      = '';        $routine['item_param_length'][]    = '';        $routine['item_param_opts_num'][]  = '';        $routine['item_param_opts_text'][] = '';        $routine['item_num_params']++;    } else if ($operation == 'remove') {        unset($routine['item_param_dir'][$routine['item_num_params']-1]);        unset($routine['item_param_name'][$routine['item_num_params']-1]);        unset($routine['item_param_type'][$routine['item_num_params']-1]);        unset($routine['item_param_length'][$routine['item_num_params']-1]);        unset($routine['item_param_opts_num'][$routine['item_num_params']-1]);        unset($routine['item_param_opts_text'][$routine['item_num_params']-1]);        $routine['item_num_params']--;    }    $disable_remove_parameter = '';    if (! $routine['item_num_params']) {        $disable_remove_parameter = " color: gray;' disabled='disabled";    }    $original_routine = '';    if ($mode == 'edit') {        $original_routine = "<input name='item_original_name' "                          . "type='hidden' "                          . "value='{$routine['item_original_name']}'/>\n"                          . "<input name='item_original_type' "                          . "type='hidden' "                          . "value='{$routine['item_original_type']}'/>\n";    }    $isfunction_class   = '';    $isprocedure_class  = '';    $isfunction_select  = '';    $isprocedure_select = '';    if ($routine['item_type'] == 'PROCEDURE') {        $isfunction_class   = ' hide';        $isprocedure_select = " selected='selected'";    } else {        $isprocedure_class = ' hide';        $isfunction_select = " selected='selected'";    }    // Create the output    $retval  = "";    $retval .= "<!-- START " . strtoupper($mode) . " ROUTINE FORM -->\n\n";    $retval .= "<form class='rte_form' action='db_routines.php' method='post'>\n";    $retval .= "<input name='{$mode}_item' type='hidden' value='1' />\n";    $retval .= $original_routine;    $retval .= PMA_generate_common_hidden_inputs($db) . "\n";    $retval .= "<fieldset>\n";    $retval .= "<legend>" . __('Details') . "</legend>\n";    $retval .= "<table class='rte_table' style='width: 100%'>\n";    $retval .= "<tr>\n";    $retval .= "    <td style='width: 20%;'>" . __('Routine name') . "</td>\n";    $retval .= "    <td><input type='text' name='item_name' maxlength='64'\n";    $retval .= "               value='{$routine['item_name']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Type') . "</td>\n";    $retval .= "    <td>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "        <select name='item_type'>\n";        $retval .= "            <option value='PROCEDURE'$isprocedure_select>PROCEDURE</option>\n";        $retval .= "            <option value='FUNCTION'$isfunction_select>FUNCTION</option>\n";        $retval .= "        </select>\n";    } else {        $retval .= "        <input name='item_type' type='hidden' value='{$routine['item_type']}' />\n";        $retval .= "        <div style='width: 49%; float: left; text-align: center; font-weight: bold;'>\n";        $retval .= "            {$routine['item_type']}\n";        $retval .= "        </div>\n";        $retval .= "        <input style='width: 49%;' type='submit' name='routine_changetype'\n";        $retval .= "               value='".sprintf(__('Change to %s'), $routine['item_type_toggle'])."' />\n";    }    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Parameters') . "</td>\n";    $retval .= "    <td>\n";    // parameter handling start    $retval .= "        <table class='routine_params_table'>\n";    $retval .= "        <tr>\n";    $retval .= "            <th class='routine_direction_cell$isprocedure_class'>" . __('Direction') . "</th>\n";    $retval .= "            <th>" . __('Name') . "</th>\n";    $retval .= "            <th>" . __('Type') . "</th>\n";    $retval .= "            <th>" . __('Length/Values') . "</th>\n";    $retval .= "            <th colspan='2'>" . __('Options') . "</th>\n";    $retval .= "            <th class='routine_param_remove hide'>&nbsp;</th>\n";    $retval .= "        </tr>";    for ($i=0; $i<$routine['item_num_params']; $i++) { // each parameter        $retval .= PMA_RTN_getParameterRow($routine, $i, $isprocedure_class);    }    $retval .= "        </table>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>&nbsp;</td>\n";    $retval .= "    <td>\n";    $retval .= "        <input style='width: 49%;' type='submit' \n";    $retval .= "               name='routine_addparameter'\n";    $retval .= "               value='" . __('Add parameter') . "' />\n";    $retval .= "        <input style='width: 49%;$disable_remove_parameter'\n";    $retval .= "               type='submit' \n";    $retval .= "               name='routine_removeparameter'\n";    $retval .= "               value='" . __('Remove last parameter') . "' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    // parameter handling end    $retval .= "<tr class='routine_return_row$isfunction_class'>\n";    $retval .= "    <td>" . __('Return type') . "</td>\n";    $retval .= "    <td><select name='item_returntype'>\n";    $retval .= PMA_getSupportedDatatypes(true, $routine['item_returntype']) . "\n";    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='routine_return_row$isfunction_class'>\n";    $retval .= "    <td>" . __('Return length/values') . "</td>\n";    $retval .= "    <td><input type='text' name='item_returnlength'\n";    $retval .= "               value='{$routine['item_returnlength']}' /></td>\n";    $retval .= "    <td class='hide no_len'>---</td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='routine_return_row$isfunction_class'>\n";    $retval .= "    <td>" . __('Return options') . "</td>\n";    $retval .= "    <td><div>\n";    $retval .= PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_CHARSET,        "item_returnopts_text",        null,        $routine['item_returnopts_text']    );    $retval .= "\n    </div>\n";    $retval .= "    <div><select name='item_returnopts_num'>\n";    $retval .= "        <option value=''></option>";    foreach ($param_opts_num as $key => $value) {        $selected = "";        if (! empty($routine['item_returnopts_num'])            && $routine['item_returnopts_num'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "\n    </select></div>\n";    $retval .= "    <div class='hide no_opts'>---</div>\n";    $retval .= "</td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definition') . "</td>\n";    $retval .= "    <td><textarea name='item_definition' rows='15' cols='40'>";    $retval .= $routine['item_definition'];    $retval .= "</textarea></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Is deterministic') . "</td>\n";    $retval .= "    <td><input type='checkbox' name='item_isdeterministic'{$routine['item_isdeterministic']} /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definer') . "</td>\n";    $retval .= "    <td><input type='text' name='item_definer'\n";    $retval .= "               value='{$routine['item_definer']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Security type') . "</td>\n";    $retval .= "    <td><select name='item_securitytype'>\n";    $retval .= "        <option value='DEFINER'{$routine['item_securitytype_definer']}>DEFINER</option>\n";    $retval .= "        <option value='INVOKER'{$routine['item_securitytype_invoker']}>INVOKER</option>\n";    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('SQL data access') . "</td>\n";    $retval .= "    <td><select name='item_sqldataaccess'>\n";    foreach ($param_sqldataaccess as $key => $value) {        $selected = "";        if ($routine['item_sqldataaccess'] == $value) {            $selected = " selected='selected'";        }        $retval .= "        <option$selected>$value</option>\n";    }    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Comment') . "</td>\n";    $retval .= "    <td><input type='text' name='item_comment' maxlength='64'\n";    $retval .= "               value='{$routine['item_comment']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "</table>\n";    $retval .= "</fieldset>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "<input type='hidden' name='editor_process_{$mode}'\n";        $retval .= "       value='true' />\n";        $retval .= "<input type='hidden' name='ajax_request' value='true' />\n";    } else {        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='editor_process_{$mode}'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END " . strtoupper($mode) . " ROUTINE FORM -->\n\n";    return $retval;} // end PMA_RTN_getEditorForm()/** * Composes the query necessary to create a routine from an HTTP request. * * @return  string  The CREATE [ROUTINE | PROCEDURE] query. */function PMA_RTN_getQueryFromRequest(){    global $_REQUEST, $cfg, $errors, $param_sqldataaccess, $param_directions;    $_REQUEST['item_type'] = isset($_REQUEST['item_type']) ? $_REQUEST['item_type'] : '';    $query = 'CREATE ';    if (! empty($_REQUEST['item_definer'])) {        if (strpos($_REQUEST['item_definer'], '@') !== false) {            $arr = explode('@', $_REQUEST['item_definer']);            $query .= 'DEFINER=' . PMA_backquote($arr[0]);            $query .= '@' . PMA_backquote($arr[1]) . ' ';        } else {            $errors[] = __('The definer must be in the "username@hostname" format');        }    }    if ($_REQUEST['item_type'] == 'FUNCTION'        || $_REQUEST['item_type'] == 'PROCEDURE'    ) {        $query .= $_REQUEST['item_type'] . ' ';    } else {        $errors[] = sprintf(__('Invalid routine type: "%s"'), htmlspecialchars($_REQUEST['item_type']));    }    if (! empty($_REQUEST['item_name'])) {        $query .= PMA_backquote($_REQUEST['item_name']);    } else {        $errors[] = __('You must provide a routine name');    }    $params = '';    $warned_about_dir    = false;    $warned_about_name   = false;    $warned_about_length = false;    if (   ! empty($_REQUEST['item_param_name'])        && ! empty($_REQUEST['item_param_type'])        && ! empty($_REQUEST['item_param_length'])        && is_array($_REQUEST['item_param_name'])        && is_array($_REQUEST['item_param_type'])        && is_array($_REQUEST['item_param_length'])    ) {        for ($i=0; $i<count($_REQUEST['item_param_name']); $i++) {            if (! empty($_REQUEST['item_param_name'][$i]) && ! empty($_REQUEST['item_param_type'][$i])) {                if ($_REQUEST['item_type'] == 'PROCEDURE'                    && ! empty($_REQUEST['item_param_dir'][$i])                    && in_array($_REQUEST['item_param_dir'][$i], $param_directions)                ) {                    $params .= $_REQUEST['item_param_dir'][$i] . " " . PMA_backquote($_REQUEST['item_param_name'][$i]) . " "                            . $_REQUEST['item_param_type'][$i];                } else if ($_REQUEST['item_type'] == 'FUNCTION') {                    $params .= PMA_backquote($_REQUEST['item_param_name'][$i]) . " " . $_REQUEST['item_param_type'][$i];                } else if (! $warned_about_dir) {                    $warned_about_dir = true;                    $errors[] = sprintf(                        __('Invalid direction "%s" given for parameter.'),                        htmlspecialchars($_REQUEST['item_param_dir'][$i])                    );                }                if ($_REQUEST['item_param_length'][$i] != ''                    && !preg_match('@^(DATE|DATETIME|TIME|TINYBLOB|TINYTEXT|BLOB|TEXT|MEDIUMBLOB|MEDIUMTEXT|LONGBLOB|LONGTEXT|SERIAL|BOOLEAN)$@i',                                   $_REQUEST['item_param_type'][$i])                ) {                    $params .= "(" . $_REQUEST['item_param_length'][$i] . ")";                } else if ($_REQUEST['item_param_length'][$i] == '' && preg_match('@^(ENUM|SET|VARCHAR|VARBINARY)$@i', $_REQUEST['item_param_type'][$i])) {                    if (! $warned_about_length) {                        $warned_about_length = true;                        $errors[] = __('You must provide length/values for routine parameters of type ENUM, SET, VARCHAR and VARBINARY.');                    }                }                if (! empty($_REQUEST['item_param_opts_text'][$i])) {                    if (in_array($_REQUEST['item_param_type'][$i], $cfg['ColumnTypes']['STRING'])) {                        $params .= ' CHARSET ' . strtolower($_REQUEST['item_param_opts_text'][$i]);                    }                }                if (! empty($_REQUEST['item_param_opts_num'][$i])) {                    if (in_array($_REQUEST['item_param_type'][$i], $cfg['ColumnTypes']['NUMERIC'])) {                        $params .= ' ' . strtoupper($_REQUEST['item_param_opts_num'][$i]);                    }                }                if ($i != count($_REQUEST['item_param_name'])-1) {                    $params .= ", ";                }            } else if (! $warned_about_name) {                $warned_about_name = true;                $errors[] = __('You must provide a name and a type for each routine parameter.');                break;            }        }    }    $query .= "(" . $params . ") ";    if ($_REQUEST['item_type'] == 'FUNCTION') {        if (! empty($_REQUEST['item_returntype']) && in_array($_REQUEST['item_returntype'], PMA_getSupportedDatatypes())) {            $query .= "RETURNS {$_REQUEST['item_returntype']}";        } else {            $errors[] = __('You must provide a valid return type for the routine.');        }        if (! empty($_REQUEST['item_returnlength'])            && !preg_match('@^(DATE|DATETIME|TIME|TINYBLOB|TINYTEXT|BLOB|TEXT|MEDIUMBLOB|MEDIUMTEXT|LONGBLOB|LONGTEXT|SERIAL|BOOLEAN)$@i',                            $_REQUEST['item_returntype'])        ) {            $query .= "(" . $_REQUEST['item_returnlength'] . ")";        } else if (empty($_REQUEST['item_returnlength']) && preg_match('@^(ENUM|SET|VARCHAR|VARBINARY)$@i', $_REQUEST['item_returntype'])) {            if (! $warned_about_length) {                $warned_about_length = true;                $errors[] = __('You must provide length/values for routine parameters of type ENUM, SET, VARCHAR and VARBINARY.');            }        }        if (! empty($_REQUEST['item_returnopts_text'])) {            if (in_array($_REQUEST['item_returntype'], $cfg['ColumnTypes']['STRING'])) {                $query .= ' CHARSET ' . strtolower($_REQUEST['item_returnopts_text']);            }        }        if (! empty($_REQUEST['item_returnopts_num'])) {            if (in_array($_REQUEST['item_returntype'], $cfg['ColumnTypes']['NUMERIC'])) {                $query .= ' ' . strtoupper($_REQUEST['item_returnopts_num']);            }        }        $query .= ' ';    }    if (! empty($_REQUEST['item_comment'])) {        $query .= "COMMENT '" . PMA_sqlAddslashes($_REQUEST['item_comment']) . "' ";    }    if (isset($_REQUEST['item_isdeterministic'])) {        $query .= 'DETERMINISTIC ';    } else {        $query .= 'NOT DETERMINISTIC ';    }    if (! empty($_REQUEST['item_sqldataaccess']) && in_array($_REQUEST['item_sqldataaccess'], $param_sqldataaccess)) {        $query .= $_REQUEST['item_sqldataaccess'] . ' ';    }    if (! empty($_REQUEST['item_securitytype'])) {        if ($_REQUEST['item_securitytype'] == 'DEFINER' || $_REQUEST['item_securitytype'] == 'INVOKER') {            $query .= 'SQL SECURITY ' . $_REQUEST['item_securitytype'] . ' ';        }    }    if (! empty($_REQUEST['item_definition'])) {        $query .= $_REQUEST['item_definition'];    } else {        $errors[] = __('You must provide a routine definition.');    }    return $query;} // end PMA_RTN_getQueryFromRequest()/** * Handles requests for executing a routine */function PMA_RTN_handleExecute(){    global $_GET, $_POST, $_REQUEST, $GLOBALS, $db, $cfg;    /**     * Handle all user requests other than the default of listing routines     */    if (! empty($_REQUEST['execute_routine']) && ! empty($_REQUEST['item_name'])) {        // Build the queries        $routine = PMA_RTN_getDataFromName($_REQUEST['item_name'], $_REQUEST['item_type'], false);        if ($routine !== false) {            $queries   = array();            $end_query = array();            $args      = array();            for ($i=0; $i<$routine['item_num_params']; $i++) {                if (isset($_REQUEST['params'][$routine['item_param_name'][$i]])) {                    $value = $_REQUEST['params'][$routine['item_param_name'][$i]];                    if (is_array($value)) { // is SET type                        $value = implode(',', $value);                    }                    $value = PMA_sqlAddSlashes($value);                    if (! empty($_REQUEST['funcs'][$routine['item_param_name'][$i]])                        && in_array($_REQUEST['funcs'][$routine['item_param_name'][$i]], $cfg['Functions'])                    ) {                        $queries[] = "SET @p$i={$_REQUEST['funcs'][$routine['item_param_name'][$i]]}('$value');\n";                    } else {                        $queries[] = "SET @p$i='$value';\n";                    }                    $args[] = "@p$i";                } else {                    $args[] = "@p$i";                }                if ($routine['item_type'] == 'PROCEDURE') {                    if ($routine['item_param_dir'][$i] == 'OUT'                        || $routine['item_param_dir'][$i] == 'INOUT'                    ) {                        $end_query[] = "@p$i AS " . PMA_backquote($routine['item_param_name'][$i]);                    }                }            }            if ($routine['item_type'] == 'PROCEDURE') {                $queries[] = "CALL " . PMA_backquote($routine['item_name'])                           . "(" . implode(', ', $args) . ");\n";                if (count($end_query)) {                    $queries[] = "SELECT " . implode(', ', $end_query) . ";\n";                }            } else {                $queries[] = "SELECT " . PMA_backquote($routine['item_name'])                           . "(" . implode(', ', $args) . ") "                           . "AS " . PMA_backquote($routine['item_name']) . ";\n";            }            // Execute the queries            $affected = 0;            $result = null;            $outcome = true;            foreach ($queries as $query) {                $resource = PMA_DBI_try_query($query);                if ($resource === false) {                    $outcome = false;                    break;                }                while (true) {                    if (! PMA_DBI_more_results()) {                        break;                    }                    PMA_DBI_next_result();                }                if (substr($query, 0, 6) == 'SELECT') {                    $result = $resource;                } else if (substr($query, 0, 4) == 'CALL') {                    $result = $resource ? $resource : $result;                    $affected = PMA_DBI_affected_rows() - PMA_DBI_num_rows($resource);                }            }            // Generate output            if ($outcome) {                $message = __('Your SQL query has been executed successfully');                if ($routine['item_type'] == 'PROCEDURE') {                    $message .= '<br />';                    $message .= sprintf(                        _ngettext(                            '%d row affected by the last statement inside the procedure',                            '%d rows affected by the last statement inside the procedure',                            $affected                        ),                        $affected                    );                }                $message = PMA_message::success($message);                // Pass the SQL queries through the "pretty printer"                $output  = '<code class="sql" style="margin-bottom: 1em;">';                $output .= PMA_SQP_formatHtml(PMA_SQP_parse(implode($queries)));                $output .= '</code>';                // Display results                if ($result) {                    $output .= "<fieldset><legend>";                    $output .= sprintf(                        __('Execution results of routine %s'),                        PMA_backquote(htmlspecialchars($routine['item_name']))                    );                    $output .= "</legend>";                    $output .= "<table><tr>";                    foreach (PMA_DBI_get_fields_meta($result) as $key => $field) {                        $output .= "<th>";                        $output .= htmlspecialchars($field->name);                        $output .= "</th>";                    }                    $output .= "</tr>";                    // Stored routines can only ever return ONE ROW.                    $data = PMA_DBI_fetch_single_row($result);                    foreach ($data as $key => $value) {                        if ($value === null) {                            $value = '<i>NULL</i>';                        } else {                            $value = htmlspecialchars($value);                        }                        $output .= "<td class='odd'>" . $value . "</td>";                    }                    $output .= "</table></fieldset>";                } else {                    $notice = __('MySQL returned an empty result set (i.e. zero rows).');                    $output .= PMA_message::notice($notice)->getDisplay();                }            } else {                $output = '';                $message = PMA_message::error(sprintf(__('The following query has failed: "%s"'), $query) . '<br /><br />'                                                    . __('MySQL said: ') . PMA_DBI_getError(null));            }            // Print/send output            if ($GLOBALS['is_ajax_request']) {                $extra_data = array('dialog' => false);                PMA_ajaxResponse(                    $message->getDisplay() . $output,                    $message->isSuccess(),                    $extra_data                );            } else {                echo $message->getDisplay() . $output;                if ($message->isError()) {                    // At least one query has failed, so shouldn't                    // execute any more queries, so we quit.                    exit;                }                unset($_POST);                // Now deliberately fall through to displaying the routines list            }        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, $message->isSuccess());            } else {                echo $message->getDisplay();                unset($_POST);            }        }    } else if (! empty($_GET['execute_dialog']) && ! empty($_GET['item_name'])) {        /**         * Display the execute form for a routine.         */        $routine = PMA_RTN_getDataFromName($_GET['item_name'], $_GET['item_type'], true);        if ($routine !== false) {            $form = PMA_RTN_getExecuteForm($routine);            if ($GLOBALS['is_ajax_request'] == true) {                $extra_data = array();                $extra_data['dialog'] = true;                $extra_data['title']  = __("Execute routine") . " ";                $extra_data['title'] .= PMA_backquote(                    htmlentities($_GET['item_name'], ENT_QUOTES)                );                PMA_ajaxResponse($form, true, $extra_data);            } else {                echo "\n\n<h2>" . __("Execute routine") . "</h2>\n\n";                echo $form;                include './libraries/footer.inc.php';                // exit;            }        } else if (($GLOBALS['is_ajax_request'] == true)) {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            PMA_ajaxResponse($message, false);        }    }}/** * Creates the HTML code that shows the routine execution dialog. * * @param   array    $routine      Data for the routine returned by *                                 PMA_RTN_getDataFromName() * * @return  string   HTML code for the routine execution dialog. */function PMA_RTN_getExecuteForm($routine){    global $db, $cfg;    // Escape special characters    $routine['item_name'] = htmlentities($routine['item_name'], ENT_QUOTES);    for ($i=0; $i<$routine['item_num_params']; $i++) {        $routine['item_param_name'][$i] = htmlentities(            $routine['item_param_name'][$i],            ENT_QUOTES        );    }    // Create the output    $retval  = "";    $retval .= "<!-- START ROUTINE EXECUTE FORM -->\n\n";    $retval .= "<form action='db_routines.php' method='post' class='rte_form'>\n";    $retval .= "<input type='hidden' name='item_name'\n";    $retval .= "       value='{$routine['item_name']}' />\n";    $retval .= "<input type='hidden' name='item_type'\n";    $retval .= "       value='{$routine['item_type']}' />\n";    $retval .= PMA_generate_common_hidden_inputs($db) . "\n";    $retval .= "<fieldset>\n";    if ($GLOBALS['is_ajax_request'] != true) {        $retval .= "<legend>{$routine['item_name']}</legend>\n";        $retval .= "<table class='rte_table'>\n";        $retval .= "<caption class='tblHeaders'>\n";        $retval .= __('Routine parameters');        $retval .= "</caption>\n";    } else {        $retval .= "<legend>" . __('Routine parameters') . "</legend>\n";        $retval .= "<table class='rte_table' style='width: 100%;'>\n";    }    $retval .= "<tr>\n";    $retval .= "<th>" . __('Name') . "</th>\n";    $retval .= "<th>" . __('Type') . "</th>\n";    if ($cfg['ShowFunctionFields']) {        $retval .= "<th>" . __('Function') . "</th>\n";    }    $retval .= "<th>" . __('Value')    . "</th>\n";    $retval .= "</tr>\n";    // Get a list of data types that are not yet supported.    $no_support_types = PMA_unsupportedDatatypes();    for ($i=0; $i<$routine['item_num_params']; $i++) { // Each parameter        if ($routine['item_type'] == 'PROCEDURE'            && $routine['item_param_dir'][$i] == 'OUT'        ) {            continue;        }        $rowclass = ($i % 2 == 0) ? 'even' : 'odd';        $retval .= "\n<tr class='$rowclass'>\n";        $retval .= "<td>{$routine['item_param_name'][$i]}</td>\n";        $retval .= "<td>{$routine['item_param_type'][$i]}</td>\n";        if ($cfg['ShowFunctionFields']) {            $retval .= "<td>\n";            if (stristr($routine['item_param_type'][$i], 'enum')                || stristr($routine['item_param_type'][$i], 'set')                || in_array(strtolower($routine['item_param_type'][$i]), $no_support_types)            ) {                $retval .= "--\n";            } else {                $field = array(                    'True_Type'       => strtolower($routine['item_param_type'][$i]),                    'Type'            => '',                    'Key'             => '',                    'Field'           => '',                    'Default'         => '',                    'first_timestamp' => false                );                $retval .= "<select name='funcs[{$routine['item_param_name'][$i]}]'>";                $retval .= PMA_getFunctionsForField($field, false);                $retval .= "</select>";            }            $retval .= "</td>\n";        }        // Append a class to date/time fields so that        // jQuery can attach a datepicker to them        $class = '';        if ($routine['item_param_type'][$i] == 'DATETIME'            || $routine['item_param_type'][$i] == 'TIMESTAMP'        ) {            $class = 'datetimefield';        } else if ($routine['item_param_type'][$i] == 'DATE') {            $class = 'datefield';        }        $retval .= "<td class='nowrap'>\n";        if (in_array($routine['item_param_type'][$i], array('ENUM', 'SET'))) {            $tokens = PMA_SQP_parse($routine['item_param_length'][$i]);            if ($routine['item_param_type'][$i] == 'ENUM') {                $input_type = 'radio';            } else {                $input_type = 'checkbox';            }            for ($j=0; $j<$tokens['len']; $j++) {                if ($tokens[$j]['type'] != 'punct_listsep') {                    $tokens[$j]['data'] = htmlentities(                        PMA_unquote($tokens[$j]['data']),                        ENT_QUOTES                    );                    $retval .= "<input name='params[{$routine['item_param_name'][$i]}][]' "                             . "value='{$tokens[$j]['data']}' type='$input_type' />"                             . "{$tokens[$j]['data']}<br />\n";                }            }        } else if (in_array(strtolower($routine['item_param_type'][$i]), $no_support_types)) {            $retval .= "\n";        } else {            $retval .= "<input class='$class' type='text' name='params[{$routine['item_param_name'][$i]}]' />\n";        }        $retval .= "</td>\n";        $retval .= "</tr>\n";    }    $retval .= "\n</table>\n";    if ($GLOBALS['is_ajax_request'] != true) {        $retval .= "</fieldset>\n\n";        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='execute_routine'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    } else {        $retval .= "<input type='hidden' name='execute_routine' value='true' />";        $retval .= "<input type='hidden' name='ajax_request' value='true' />";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END ROUTINE EXECUTE FORM -->\n\n";    return $retval;} // end PMA_RTN_getExecuteForm()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Gets the list of the table in the current db and informations about these * tables if possible * * fills tooltip arrays and provides $tables, $num_tables, $is_show_stats * and $db_is_information_schema * * speedup view on locked tables * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * requirements */require_once './libraries/common.inc.php';/** * limits for table list */if (! isset($_SESSION['tmp_user_values']['table_limit_offset']) || $_SESSION['tmp_user_values']['table_limit_offset_db'] != $db) {    $_SESSION['tmp_user_values']['table_limit_offset'] = 0;    $_SESSION['tmp_user_values']['table_limit_offset_db'] = $db;}if (isset($_REQUEST['pos'])) {    $_SESSION['tmp_user_values']['table_limit_offset'] = (int) $_REQUEST['pos'];}$pos = $_SESSION['tmp_user_values']['table_limit_offset'];/** * fills given tooltip arrays * * @param array   $tooltip_truename   tooltip data * @param array   $tooltip_aliasname  tooltip data * @param array   $table              tabledata */function PMA_fillTooltip(&$tooltip_truename, &$tooltip_aliasname, $table){    if (strstr($table['Comment'], '; InnoDB free') === false) {        if (!strstr($table['Comment'], 'InnoDB free') === false) {            // here we have just InnoDB generated part            $table['Comment'] = '';        }    } else {        // remove InnoDB comment from end, just the minimal part (*? is non greedy)        $table['Comment'] = preg_replace('@; InnoDB free:.*?$@', '', $table['Comment']);    }    // views have VIEW as comment so it's not a real comment put by a user    if ('VIEW' == $table['Comment']) {        $table['Comment'] = '';    }    if (empty($table['Comment'])) {        $table['Comment'] = $table['Name'];    } else {        // why?        $table['Comment'] .= ' ';    }    if ($GLOBALS['cfg']['ShowTooltipAliasTB']     && $GLOBALS['cfg']['ShowTooltipAliasTB'] !== 'nested') {        $tooltip_truename[$table['Name']] = $table['Comment'];        $tooltip_aliasname[$table['Name']] = $table['Name'];    } else {        $tooltip_truename[$table['Name']] = $table['Name'];        $tooltip_aliasname[$table['Name']] = $table['Comment'];    }    if (isset($table['Create_time']) && !empty($table['Create_time'])) {        $tooltip_aliasname[$table['Name']] .= ', ' . __('Creation')             . ': ' . PMA_localisedDate(strtotime($table['Create_time']));    }    if (! empty($table['Update_time'])) {        $tooltip_aliasname[$table['Name']] .= ', ' . __('Last update')             . ': ' . PMA_localisedDate(strtotime($table['Update_time']));    }    if (! empty($table['Check_time'])) {        $tooltip_aliasname[$table['Name']] .= ', ' . __('Last check')             . ': ' . PMA_localisedDate(strtotime($table['Check_time']));    }}PMA_checkParameters(array('db'));/** * @global bool whether to display extended stats */$is_show_stats = $cfg['ShowStats'];/** * @global bool whether selected db is information_schema */$db_is_information_schema = false;if (PMA_is_system_schema($db)) {    $is_show_stats = false;    $db_is_information_schema = true;}/** * @global array information about tables in db */$tables = array();// When used in Nested table group mode, only show tables matching the given groupnameif (PMA_isValid($tbl_group) && !$cfg['ShowTooltipAliasTB']) {    $tbl_group_sql = ' LIKE "' . PMA_escape_mysql_wildcards($tbl_group) . '%"';} else {    $tbl_group_sql = '';}if ($cfg['ShowTooltip']) {    $tooltip_truename = array();    $tooltip_aliasname = array();}// Special speedup for newer MySQL Versions (in 4.0 format changed)if (true === $cfg['SkipLockedTables']) {    $db_info_result = PMA_DBI_query('SHOW OPEN TABLES FROM ' . PMA_backquote($db) . ';');    // Blending out tables in use    if ($db_info_result && PMA_DBI_num_rows($db_info_result) > 0) {        while ($tmp = PMA_DBI_fetch_row($db_info_result)) {            // if in use memorize tablename            if (preg_match('@in_use=[1-9]+@i', $tmp[1])) {                $sot_cache[$tmp[0]] = true;            }        }        PMA_DBI_free_result($db_info_result);        if (isset($sot_cache)) {            $db_info_result = PMA_DBI_query(                'SHOW TABLES FROM ' . PMA_backquote($db) . $tbl_group_sql . ';',                null, PMA_DBI_QUERY_STORE);            if ($db_info_result && PMA_DBI_num_rows($db_info_result) > 0) {                while ($tmp = PMA_DBI_fetch_row($db_info_result)) {                    if (! isset($sot_cache[$tmp[0]])) {                        $sts_result  = PMA_DBI_query(                            'SHOW TABLE STATUS FROM ' . PMA_backquote($db)                             . ' LIKE \'' . PMA_sqlAddSlashes($tmp[0], true) . '\';');                        $sts_tmp     = PMA_DBI_fetch_assoc($sts_result);                        PMA_DBI_free_result($sts_result);                        unset($sts_result);                        if (! isset($sts_tmp['Type']) && isset($sts_tmp['Engine'])) {                            $sts_tmp['Type'] =& $sts_tmp['Engine'];                        }                        if (!empty($tbl_group) && $cfg['ShowTooltipAliasTB']                         && !preg_match('@' . preg_quote($tbl_group, '@') . '@i', $sts_tmp['Comment'])) {                            continue;                        }                        if ($cfg['ShowTooltip']) {                            PMA_fillTooltip($tooltip_truename, $tooltip_aliasname, $sts_tmp);                        }                        $tables[$sts_tmp['Name']]    = $sts_tmp;                    } else { // table in use                        $tables[$tmp[0]]    = array('Name' => $tmp[0]);                    }                }                if ($GLOBALS['cfg']['NaturalOrder']) {                    uksort($tables, 'strnatcasecmp');                }                $sot_ready = true;            } elseif ($db_info_result) {                PMA_DBI_free_result($db_info_result);            }            unset($sot_cache);        }        unset($tmp);    } elseif ($db_info_result) {        PMA_DBI_free_result($db_info_result);    }}if (! isset($sot_ready)) {    // Set some sorting defaults    $sort = 'Name';    $sort_order = 'ASC';    if (isset($_REQUEST['sort'])) {        $sortable_name_mappings = array(            'table'     => 'Name',            'records'   => 'Rows',            'type'      => 'Engine',            'collation' => 'Collation',            'size'      => 'Data_length',            'overhead'  => 'Data_free'        );        // Make sure the sort type is implemented        if (isset($sortable_name_mappings[$_REQUEST['sort']])) {            $sort = $sortable_name_mappings[$_REQUEST['sort']];            if ($_REQUEST['sort_order'] == 'DESC') {                $sort_order = 'DESC';            }        }    }    if (! empty($tbl_group) && ! $cfg['ShowTooltipAliasTB']) {        // only tables for selected group        $tables = PMA_DBI_get_tables_full($db, $tbl_group, true, null, 0, false, $sort, $sort_order);    } elseif (! empty($tbl_group) && $cfg['ShowTooltipAliasTB']) {        // only tables for selected group,        // but grouping is done on comment ...        $tables = PMA_DBI_get_tables_full($db, $tbl_group, 'comment', null, 0, false, $sort, $sort_order);    } else {        // all tables in db        // - get the total number of tables        //  (needed for proper working of the MaxTableList feature)        $tables = PMA_DBI_get_tables($db);        $total_num_tables = count($tables);        if (isset($sub_part) && $sub_part == '_export') {            // (don't fetch only a subset if we are coming from db_export.php,            // because I think it's too risky to display only a subset of the            // table names when exporting a db)            /**             *             * @todo Page selector for table names?             */            $tables = PMA_DBI_get_tables_full($db, false, false, null, 0, false, $sort, $sort_order);        } else {            // fetch the details for a possible limited subset            $tables = PMA_DBI_get_tables_full($db, false, false, null, $pos, true, $sort, $sort_order);        }    }    if ($cfg['ShowTooltip']) {        foreach ($tables as $each_table) {            PMA_fillTooltip($tooltip_truename, $tooltip_aliasname, $each_table);        }    }}/** * @global int count of tables in db */$num_tables = count($tables);//  (needed for proper working of the MaxTableList feature)if (! isset($total_num_tables)) {    $total_num_tables = $num_tables;}/** * cleanup */unset($each_table, $tbl_group_sql, $db_info_result);/** * Displays top menu links * If in an Ajax request, we do not need to show this */if ($GLOBALS['is_ajax_request'] != true) {    include './libraries/db_links.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {    die(__("GLOBALS overwrite attempt"));}/** * Sends the beginning of the html page then returns to the calling script */// Defines the cell alignment values depending on text directionif ($GLOBALS['text_dir'] == 'ltr') {    $GLOBALS['cell_align_left']  = 'left';    $GLOBALS['cell_align_right'] = 'right';} else {    $GLOBALS['cell_align_left']  = 'right';    $GLOBALS['cell_align_right'] = 'left';}// removes the bug with the horizontal scrollbar in IE (it's allways shown, if need it or not)// xml declaration moves IE into quirks mode, making much trouble with CSS/* echo '<?xml version="1.0" encoding="utf-8"?>'; */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $GLOBALS['available_languages'][$GLOBALS['lang']][1]; ?>" lang="<?php echo $GLOBALS['available_languages'][$GLOBALS['lang']][1]; ?>" dir="<?php echo $GLOBALS['text_dir']; ?>"><head>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <title><?php    if (!empty($page_title)) {        echo htmlspecialchars($page_title);    } else {        echo 'phpMyAdmin';    }?></title>    <link rel="stylesheet" type="text/css" href="<?php echo defined('PMA_PATH_TO_BASEDIR') ? PMA_PATH_TO_BASEDIR : ''; ?>phpmyadmin.css.php<?php echo PMA_generate_common_url(array('server' => $GLOBALS['server'])); ?>&amp;js_frame=<?php echo isset($print_view) ? 'print' : 'right'; ?>&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" />    <link rel="stylesheet" type="text/css" href="<?php echo defined('PMA_PATH_TO_BASEDIR') ? PMA_PATH_TO_BASEDIR : ''; ?>print.css" media="print" />    <link rel="stylesheet" type="text/css" href="<?php echo $GLOBALS['pmaThemePath']; ?>/jquery/jquery-ui-1.8.16.custom.css" />    <meta name="robots" content="noindex,nofollow" />
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'export.js';/** * Gets tables informations and displays top links */require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_export.php&amp;back=tbl_export.php';require_once './libraries/tbl_info.inc.php';// Dump of a table$export_page_title = __('View dump (schema) of table');// When we have some query, we need to remove LIMIT from that and possibly// generate WHERE clause (if we are asked to export specific rows)if (! empty($sql_query)) {    // Parse query so we can work with tokens    $parsed_sql = PMA_SQP_parse($sql_query);    $analyzed_sql = PMA_SQP_analyze($parsed_sql);    // Need to generate WHERE clause?    if (isset($where_clause)) {        // Yes => rebuild query from scratch; this doesn't work with nested        // selects :-(        $sql_query = 'SELECT ';        if (isset($analyzed_sql[0]['queryflags']['distinct'])) {            $sql_query .= ' DISTINCT ';        }        $sql_query .= $analyzed_sql[0]['select_expr_clause'];        if (!empty($analyzed_sql[0]['from_clause'])) {            $sql_query .= ' FROM ' . $analyzed_sql[0]['from_clause'];        }        $wheres = array();        if (isset($where_clause) && is_array($where_clause)         && count($where_clause) > 0) {            $wheres[] = '(' . implode(') OR (', $where_clause) . ')';        }        if (!empty($analyzed_sql[0]['where_clause'])) {            $wheres[] = $analyzed_sql[0]['where_clause'];        }        if (count($wheres) > 0) {            $sql_query .= ' WHERE (' . implode(') AND (', $wheres) . ')';        }        if (!empty($analyzed_sql[0]['group_by_clause'])) {            $sql_query .= ' GROUP BY ' . $analyzed_sql[0]['group_by_clause'];        }        if (!empty($analyzed_sql[0]['having_clause'])) {            $sql_query .= ' HAVING ' . $analyzed_sql[0]['having_clause'];        }        if (!empty($analyzed_sql[0]['order_by_clause'])) {            $sql_query .= ' ORDER BY ' . $analyzed_sql[0]['order_by_clause'];        }    } else {        // Just crop LIMIT clause        $sql_query = $analyzed_sql[0]['section_before_limit'] . $analyzed_sql[0]['section_after_limit'];    }    $message = PMA_Message::success();}/** * Displays top menu links */require './libraries/tbl_links.inc.php';$export_type = 'table';require_once './libraries/display_export.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** SQL Parser Functions for phpMyAdmin * * These functions define an SQL parser system, capable of understanding and * extracting data from a MySQL type SQL query. * * The basic procedure for using the new SQL parser: * On any page that needs to extract data from a query or to pretty-print a * query, you need code like this up at the top: * * ($sql contains the query) * $parsed_sql = PMA_SQP_parse($sql); * * If you want to extract data from it then, you just need to run * $sql_info = PMA_SQP_analyze($parsed_sql); * * See comments in PMA_SQP_analyze for the returned info * from the analyzer. * * If you want a pretty-printed version of the query, do: * $string = PMA_SQP_formatHtml($parsed_sql); * (note that that you need to have syntax.css.php included somehow in your * page for it to work, I recommend '<link rel="stylesheet" type="text/css" * href="syntax.css.php" />' at the moment.) * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Minimum inclusion? (i.e. for the stylesheet builder) */if (! defined('PMA_MINIMUM_COMMON')) {    /**     * Include the string library as we use it heavily     */    include_once './libraries/string.lib.php';    /**     * Include data for the SQL Parser     */    include_once './libraries/sqlparser.data.php';    if (!defined('TESTSUITE')) {        include_once './libraries/mysql_charsets.lib.php';    }    if (! isset($mysql_charsets)) {        $mysql_charsets = array();        $mysql_collations_flat = array();    }    if (!defined('DEBUG_TIMING')) {        /**         * currently we don't need the $pos (token position in query)         * for other purposes than LIMIT clause verification,         * so many calls to this function do not include the 4th parameter         */        function PMA_SQP_arrayAdd(&$arr, $type, $data, &$arrsize, $pos = 0)        {            $arr[] = array('type' => $type, 'data' => $data, 'pos' => $pos);            $arrsize++;        } // end of the "PMA_SQP_arrayAdd()" function    } else {        /**         * This is debug variant of above.         * @ignore         */        function PMA_SQP_arrayAdd(&$arr, $type, $data, &$arrsize, $pos = 0)        {            global $timer;            $t     = $timer;            $arr[] = array(                'type' => $type,                'data' => $data,                'pos' => $pos,                'time' => $t);            $timer = microtime();            $arrsize++;        } // end of the "PMA_SQP_arrayAdd()" function    } // end if... else...    /**     * Reset the error variable for the SQL parser     *     * @access public     */    function PMA_SQP_resetError()    {        global $SQP_errorString;        $SQP_errorString = '';        unset($SQP_errorString);    }    /**     * Get the contents of the error variable for the SQL parser     *     * @return string Error string from SQL parser     *     * @access public     */    function PMA_SQP_getErrorString()    {        global $SQP_errorString;        return isset($SQP_errorString) ? $SQP_errorString : '';    }    /**     * Check if the SQL parser hit an error     *     * @return boolean error state     *     * @access public     */    function PMA_SQP_isError()    {        global $SQP_errorString;        return isset($SQP_errorString) && !empty($SQP_errorString);    }    /**     * Set an error message for the system     *     * @param string  The error message     * @param string  The failing SQL query     *     * @access private     * @scope SQL Parser internal     */    function PMA_SQP_throwError($message, $sql)    {        global $SQP_errorString;        $SQP_errorString = '<p>'.__('There seems to be an error in your SQL query. The MySQL server error output below, if there is any, may also help you in diagnosing the problem') . '</p>' . "\n"            . '<pre>' . "\n"            . 'ERROR: ' . $message . "\n"            . 'SQL: ' . htmlspecialchars($sql) .  "\n"            . '</pre>' . "\n";    } // end of the "PMA_SQP_throwError()" function    /**     * Do display the bug report     *     * @param string  The error message     * @param string  The failing SQL query     *     * @access public     */    function PMA_SQP_bug($message, $sql)    {        global $SQP_errorString;        $debugstr = 'ERROR: ' . $message . "\n";        $debugstr .= 'MySQL: '.PMA_MYSQL_STR_VERSION . "\n";        $debugstr .= 'USR OS, AGENT, VER: ' . PMA_USR_OS . ' ';        $debugstr .= PMA_USR_BROWSER_AGENT . ' ' . PMA_USR_BROWSER_VER . "\n";        $debugstr .= 'PMA: ' . PMA_VERSION . "\n";        $debugstr .= 'PHP VER,OS: ' . PMA_PHP_STR_VERSION . ' ' . PHP_OS . "\n";        $debugstr .= 'LANG: ' . $GLOBALS['lang'] . "\n";        $debugstr .= 'SQL: ' . htmlspecialchars($sql);        $encodedstr     = $debugstr;        if (@function_exists('gzcompress')) {            $encodedstr = gzcompress($debugstr, 9);        }        $encodedstr     = preg_replace(            "/(\015\012)|(\015)|(\012)/",            '<br />' . "\n",            chunk_split(base64_encode($encodedstr)));        $SQP_errorString .= __('There is a chance that you may have found a bug in the SQL parser. Please examine your query closely, and check that the quotes are correct and not mis-matched. Other possible failure causes may be that you are uploading a file with binary outside of a quoted text area. You can also try your query on the MySQL command line interface. The MySQL server error output below, if there is any, may also help you in diagnosing the problem. If you still have problems or if the parser fails where the command line interface succeeds, please reduce your SQL query input to the single query that causes problems, and submit a bug report with the data chunk in the CUT section below:')             . '<br />' . "\n"             . '----' . __('BEGIN CUT') . '----' . '<br />' . "\n"             . $encodedstr . "\n"             . '----' . __('END CUT') . '----' . '<br />' . "\n";        $SQP_errorString .= '----' . __('BEGIN RAW') . '----<br />' . "\n"             . '<pre>' . "\n"             . $debugstr             . '</pre>' . "\n"             . '----' . __('END RAW') . '----<br />' . "\n";    } // end of the "PMA_SQP_bug()" function    /**     * Parses the SQL queries     *     * @param string   The SQL query list     *     * @return mixed    Most of times, nothing...     *     * @global array    The current PMA configuration     * @global array    MySQL column attributes     * @global array    MySQL reserved words     * @global array    MySQL column types     * @global array    MySQL function names     * @global array    List of available character sets     * @global array    List of available collations     *     * @access public     */    function PMA_SQP_parse($sql)    {        static $PMA_SQPdata_column_attrib, $PMA_SQPdata_reserved_word;        static $PMA_SQPdata_column_type;        static $PMA_SQPdata_function_name, $PMA_SQPdata_forbidden_word;        global $mysql_charsets, $mysql_collations_flat;        // Convert all line feeds to Unix style        $sql = str_replace("\r\n", "\n", $sql);        $sql = str_replace("\r", "\n", $sql);        $len = PMA_strlen($sql);        if ($len == 0) {            return array();        }        // Create local hashtables        if (!isset($PMA_SQPdata_column_attrib)) {            $PMA_SQPdata_column_attrib  = array_flip(                $GLOBALS['PMA_SQPdata_column_attrib']                );            $PMA_SQPdata_function_name  = array_flip(                $GLOBALS['PMA_SQPdata_function_name']                );            $PMA_SQPdata_reserved_word  = array_flip(                $GLOBALS['PMA_SQPdata_reserved_word']                );            $PMA_SQPdata_forbidden_word = array_flip(                $GLOBALS['PMA_SQPdata_forbidden_word']                );            $PMA_SQPdata_column_type    = array_flip(                $GLOBALS['PMA_SQPdata_column_type']                );        }        $sql_array               = array();        $sql_array['raw']        = $sql;        $count1                  = 0;        $count2                  = 0;        $punct_queryend          = ';';        $punct_qualifier         = '.';        $punct_listsep           = ',';        $punct_level_plus        = '(';        $punct_level_minus       = ')';        $punct_user              = '@';        $digit_floatdecimal      = '.';        $digit_hexset            = 'x';        $bracket_list            = '()[]{}';        $allpunct_list           =  '-,;:!?/.^~\*&%+<=>|';        $allpunct_list_pair      = array(            '!=' => 1,            '&&' => 1,            ':=' => 1,            '<<' => 1,            '<=' => 1,            '<=>' => 1,            '<>' => 1,            '>=' => 1,            '>>' => 1,            '||' => 1,            '==' => 1        );        $quote_list              = '\'"`';        $arraysize               = 0;        $previous_was_space   = false;        $this_was_space       = false;        $previous_was_bracket = false;        $this_was_bracket     = false;        $previous_was_punct   = false;        $this_was_punct       = false;        $previous_was_listsep = false;        $this_was_listsep     = false;        $previous_was_quote   = false;        $this_was_quote       = false;        while ($count2 < $len) {            $c      = PMA_substr($sql, $count2, 1);            $count1 = $count2;            $previous_was_space = $this_was_space;            $this_was_space = false;            $previous_was_bracket = $this_was_bracket;            $this_was_bracket = false;            $previous_was_punct = $this_was_punct;            $this_was_punct = false;            $previous_was_listsep = $this_was_listsep;            $this_was_listsep = false;            $previous_was_quote = $this_was_quote;            $this_was_quote = false;            if (($c == "\n")) {                $this_was_space = true;                $count2++;                PMA_SQP_arrayAdd($sql_array, 'white_newline', '', $arraysize);                continue;            }            // Checks for white space            if (PMA_STR_isSpace($c)) {                $this_was_space = true;                $count2++;                continue;            }            // Checks for comment lines.            // MySQL style #            // C style /* */            // ANSI style --            $next_c = PMA_substr($sql, $count2 + 1, 1);            if (($c == '#')                || (($count2 + 1 < $len) && ($c == '/') && ($next_c == '*'))                || (($count2 + 2 == $len) && ($c == '-') && ($next_c == '-'))                || (($count2 + 2 < $len) && ($c == '-') && ($next_c == '-') && ((PMA_substr($sql, $count2 + 2, 1) <= ' ')))) {                $count2++;                $pos  = 0;                $type = 'bad';                switch ($c) {                case '#':                    $type = 'mysql';                case '-':                    $type = 'ansi';                    $pos  = PMA_strpos($sql, "\n", $count2);                    break;                case '/':                    $type = 'c';                    $pos  = PMA_strpos($sql, '*/', $count2);                    $pos  += 2;                    break;                default:                    break;                } // end switch                $count2 = ($pos < $count2) ? $len : $pos;                $str    = PMA_substr($sql, $count1, $count2 - $count1);                PMA_SQP_arrayAdd($sql_array, 'comment_' . $type, $str, $arraysize);                continue;            } // end if            // Checks for something inside quotation marks            if (PMA_strpos($quote_list, $c) !== false) {                $startquotepos   = $count2;                $quotetype       = $c;                $count2++;                $escaped         = false;                $pos             = $count2;                $oldpos          = 0;                do {                    $oldpos = $pos;                    $pos    = PMA_strpos(' ' . $sql, $quotetype, $oldpos + 1) - 1;                    // ($pos === false)                    if ($pos < 0) {                        if ($c == '`') {                            /*                             * Behave same as MySQL and accept end of query as end of backtick.                             * I know this is sick, but MySQL behaves like this:                             *                             * SELECT * FROM `table                             *                             * is treated like                             *                             * SELECT * FROM `table`                             */                            $pos_quote_separator = PMA_strpos(' ' . $sql, $GLOBALS['sql_delimiter'], $oldpos + 1) - 1;                            if ($pos_quote_separator < 0) {                                $len += 1;                                $sql .= '`';                                $sql_array['raw'] .= '`';                                $pos = $len;                            } else {                                $len += 1;                                $sql = PMA_substr($sql, 0, $pos_quote_separator) . '`' . PMA_substr($sql, $pos_quote_separator);                                $sql_array['raw'] = $sql;                                $pos = $pos_quote_separator;                            }                            if (class_exists('PMA_Message') && $GLOBALS['is_ajax_request'] != true) {                                PMA_Message::notice(__('Automatically appended backtick to the end of query!'))->display();                            }                        } else {                            $debugstr = __('Unclosed quote') . ' @ ' . $startquotepos. "\n"                                      . 'STR: ' . htmlspecialchars($quotetype);                            PMA_SQP_throwError($debugstr, $sql);                            return $sql_array;                        }                    }                    // If the quote is the first character, it can't be                    // escaped, so don't do the rest of the code                    if ($pos == 0) {                        break;                    }                    // Checks for MySQL escaping using a \                    // And checks for ANSI escaping using the $quotetype character                    if (($pos < $len) && PMA_STR_charIsEscaped($sql, $pos) && $c != '`') {                        $pos ++;                        continue;                    } elseif (($pos + 1 < $len) && (PMA_substr($sql, $pos, 1) == $quotetype) && (PMA_substr($sql, $pos + 1, 1) == $quotetype)) {                        $pos = $pos + 2;                        continue;                    } else {                        break;                    }                } while ($len > $pos); // end do                $count2       = $pos;                $count2++;                $type         = 'quote_';                switch ($quotetype) {                case '\'':                    $type .= 'single';                    $this_was_quote = true;                    break;                case '"':                    $type .= 'double';                    $this_was_quote = true;                    break;                case '`':                    $type .= 'backtick';                    $this_was_quote = true;                    break;                default:                    break;                } // end switch                $data = PMA_substr($sql, $count1, $count2 - $count1);                PMA_SQP_arrayAdd($sql_array, $type, $data, $arraysize);                continue;            }            // Checks for brackets            if (PMA_strpos($bracket_list, $c) !== false) {                // All bracket tokens are only one item long                $this_was_bracket = true;                $count2++;                $type_type     = '';                if (PMA_strpos('([{', $c) !== false) {                    $type_type = 'open';                } else {                    $type_type = 'close';                }                $type_style     = '';                if (PMA_strpos('()', $c) !== false) {                    $type_style = 'round';                } elseif (PMA_strpos('[]', $c) !== false) {                    $type_style = 'square';                } else {                    $type_style = 'curly';                }                $type = 'punct_bracket_' . $type_type . '_' . $type_style;                PMA_SQP_arrayAdd($sql_array, $type, $c, $arraysize);                continue;            }            /* DEBUG            echo '<pre>1';            var_dump(PMA_STR_isSqlIdentifier($c, false));            var_dump($c == '@');            var_dump($c == '.');            var_dump(PMA_STR_isDigit(PMA_substr($sql, $count2 + 1, 1)));            var_dump($previous_was_space);            var_dump($previous_was_bracket);            var_dump($previous_was_listsep);            echo '</pre>';            */            // Checks for identifier (alpha or numeric)            if (PMA_STR_isSqlIdentifier($c, false)             || $c == '@'             || ($c == '.'              && PMA_STR_isDigit(PMA_substr($sql, $count2 + 1, 1))              && ($previous_was_space || $previous_was_bracket || $previous_was_listsep))) {                /* DEBUG                echo PMA_substr($sql, $count2);                echo '<hr />';                */                $count2++;                /**                 * @todo a @ can also be present in expressions like                 * FROM 'user'@'%' or  TO 'user'@'%'                 * in this case, the @ is wrongly marked as alpha_variable                 */                $is_identifier           = $previous_was_punct;                $is_sql_variable         = $c == '@' && ! $previous_was_quote;                $is_user                 = $c == '@' && $previous_was_quote;                $is_digit                = !$is_identifier && !$is_sql_variable && PMA_STR_isDigit($c);                $is_hex_digit            = $is_digit && $c == '0' && $count2 < $len && PMA_substr($sql, $count2, 1) == 'x';                $is_float_digit          = $c == '.';                $is_float_digit_exponent = false;                /* DEBUG                echo '<pre>2';                var_dump($is_identifier);                var_dump($is_sql_variable);                var_dump($is_digit);                var_dump($is_float_digit);                echo '</pre>';                 */                // Fast skip is especially needed for huge BLOB data                if ($is_hex_digit) {                    $count2++;                    $pos = strspn($sql, '0123456789abcdefABCDEF', $count2);                    if ($pos > $count2) {                        $count2 = $pos;                    }                    unset($pos);                } elseif ($is_digit) {                    $pos = strspn($sql, '0123456789', $count2);                    if ($pos > $count2) {                        $count2 = $pos;                    }                    unset($pos);                }                while (($count2 < $len) && PMA_STR_isSqlIdentifier(PMA_substr($sql, $count2, 1), ($is_sql_variable || $is_digit))) {                    $c2 = PMA_substr($sql, $count2, 1);                    if ($is_sql_variable && ($c2 == '.')) {                        $count2++;                        continue;                    }                    if ($is_digit && (!$is_hex_digit) && ($c2 == '.')) {                        $count2++;                        if (!$is_float_digit) {                            $is_float_digit = true;                            continue;                        } else {                            $debugstr = __('Invalid Identifer') . ' @ ' . ($count1+1) . "\n"                                      . 'STR: ' . htmlspecialchars(PMA_substr($sql, $count1, $count2 - $count1));                            PMA_SQP_throwError($debugstr, $sql);                            return $sql_array;                        }                    }                    if ($is_digit && (!$is_hex_digit) && (($c2 == 'e') || ($c2 == 'E'))) {                        if (!$is_float_digit_exponent) {                            $is_float_digit_exponent = true;                            $is_float_digit          = true;                            $count2++;                            continue;                        } else {                            $is_digit                = false;                            $is_float_digit          = false;                        }                    }                    if (($is_hex_digit && PMA_STR_isHexDigit($c2)) || ($is_digit && PMA_STR_isDigit($c2))) {                        $count2++;                        continue;                    } else {                        $is_digit     = false;                        $is_hex_digit = false;                    }                    $count2++;                } // end while                $l    = $count2 - $count1;                $str  = PMA_substr($sql, $count1, $l);                $type = '';                if ($is_digit || $is_float_digit || $is_hex_digit) {                    $type     = 'digit';                    if ($is_float_digit) {                        $type .= '_float';                    } elseif ($is_hex_digit) {                        $type .= '_hex';                    } else {                        $type .= '_integer';                    }                } elseif ($is_user) {                    $type = 'punct_user';                } elseif ($is_sql_variable != false) {                    $type = 'alpha_variable';                } else {                    $type = 'alpha';                } // end if... else....                PMA_SQP_arrayAdd($sql_array, $type, $str, $arraysize, $count2);                continue;            }            // Checks for punct            if (PMA_strpos($allpunct_list, $c) !== false) {                while (($count2 < $len) && PMA_strpos($allpunct_list, PMA_substr($sql, $count2, 1)) !== false) {                    $count2++;                }                $l = $count2 - $count1;                if ($l == 1) {                    $punct_data = $c;                } else {                    $punct_data = PMA_substr($sql, $count1, $l);                }                // Special case, sometimes, althought two characters are                // adjectent directly, they ACTUALLY need to be seperate                /* DEBUG                echo '<pre>';                var_dump($l);                var_dump($punct_data);                echo '</pre>';                */                if ($l == 1) {                    $t_suffix         = '';                    switch ($punct_data) {                    case $punct_queryend:                        $t_suffix = '_queryend';                        break;                    case $punct_qualifier:                        $t_suffix = '_qualifier';                        $this_was_punct = true;                        break;                    case $punct_listsep:                        $this_was_listsep = true;                        $t_suffix = '_listsep';                        break;                    default:                        break;                    }                    PMA_SQP_arrayAdd($sql_array, 'punct' . $t_suffix, $punct_data, $arraysize);                } elseif ($punct_data == $GLOBALS['sql_delimiter'] || isset($allpunct_list_pair[$punct_data])) {                    // Ok, we have one of the valid combined punct expressions                    PMA_SQP_arrayAdd($sql_array, 'punct', $punct_data, $arraysize);                } else {                    // Bad luck, lets split it up more                    $first  = $punct_data[0];                    $first2 = $punct_data[0] . $punct_data[1];                    $last2  = $punct_data[$l - 2] . $punct_data[$l - 1];                    $last   = $punct_data[$l - 1];                    if (($first == ',') || ($first == ';') || ($first == '.') || ($first == '*')) {                        $count2     = $count1 + 1;                        $punct_data = $first;                    } elseif (($last2 == '/*') || (($last2 == '--') && ($count2 == $len || PMA_substr($sql, $count2, 1) <= ' '))) {                        $count2     -= 2;                        $punct_data = PMA_substr($sql, $count1, $count2 - $count1);                    } elseif (($last == '-') || ($last == '+') || ($last == '!')) {                        $count2--;                        $punct_data = PMA_substr($sql, $count1, $count2 - $count1);                    } elseif ($last != '~') {                        /**                         * @todo for negation operator, split in 2 tokens ?                         * "select x&~1 from t"                         * becomes "select x & ~ 1 from t" ?                         */                        $debugstr =  __('Unknown Punctuation String') . ' @ ' . ($count1+1) . "\n"                                  . 'STR: ' . htmlspecialchars($punct_data);                        PMA_SQP_throwError($debugstr, $sql);                        return $sql_array;                    }                    PMA_SQP_arrayAdd($sql_array, 'punct', $punct_data, $arraysize);                    continue;                } // end if... elseif... else                continue;            }            // DEBUG            $count2++;            $debugstr = 'C1 C2 LEN: ' . $count1 . ' ' . $count2 . ' ' . $len .  "\n"                      . 'STR: ' . PMA_substr($sql, $count1, $count2 - $count1) . "\n";            PMA_SQP_bug($debugstr, $sql);            return $sql_array;        } // end while ($count2 < $len)        /*        echo '<pre>';        print_r($sql_array);        echo '</pre>';        */        if ($arraysize > 0) {            $t_next           = $sql_array[0]['type'];            $t_prev           = '';            $t_bef_prev       = '';            $t_cur            = '';            $d_next           = $sql_array[0]['data'];            $d_prev           = '';            $d_bef_prev       = '';            $d_cur            = '';            $d_next_upper     = $t_next == 'alpha' ? strtoupper($d_next) : $d_next;            $d_prev_upper     = '';            $d_bef_prev_upper = '';            $d_cur_upper      = '';        }        for ($i = 0; $i < $arraysize; $i++) {            $t_bef_prev       = $t_prev;            $t_prev           = $t_cur;            $t_cur            = $t_next;            $d_bef_prev       = $d_prev;            $d_prev           = $d_cur;            $d_cur            = $d_next;            $d_bef_prev_upper = $d_prev_upper;            $d_prev_upper     = $d_cur_upper;            $d_cur_upper      = $d_next_upper;            if (($i + 1) < $arraysize) {                $t_next = $sql_array[$i + 1]['type'];                $d_next = $sql_array[$i + 1]['data'];                $d_next_upper = $t_next == 'alpha' ? strtoupper($d_next) : $d_next;            } else {                $t_next       = '';                $d_next       = '';                $d_next_upper = '';            }            //DEBUG echo "[prev: <strong>".$d_prev."</strong> ".$t_prev."][cur: <strong>".$d_cur."</strong> ".$t_cur."][next: <strong>".$d_next."</strong> ".$t_next."]<br />";            if ($t_cur == 'alpha') {                $t_suffix     = '_identifier';                // for example: `thebit` bit(8) NOT NULL DEFAULT b'0'                if ($t_prev == 'alpha' && $d_prev == 'DEFAULT' && $d_cur == 'b' && $t_next == 'quote_single') {                    $t_suffix = '_bitfield_constant_introducer';                } elseif (($t_next == 'punct_qualifier') || ($t_prev == 'punct_qualifier')) {                    $t_suffix = '_identifier';                } elseif (($t_next == 'punct_bracket_open_round')                  && isset($PMA_SQPdata_function_name[$d_cur_upper])) {                    /**                     * @todo 2005-10-16: in the case of a CREATE TABLE containing                     * a TIMESTAMP, since TIMESTAMP() is also a function, it's                     * found here and the token is wrongly marked as alpha_functionName.                     * But we compensate for this when analysing for timestamp_not_null                     * later in this script.                     *                     * Same applies to CHAR vs. CHAR() function.                     */                    $t_suffix = '_functionName';                    /* There are functions which might be as well column types */                } elseif (isset($PMA_SQPdata_column_type[$d_cur_upper])) {                    $t_suffix = '_columnType';                    /**                     * Temporary fix for BUG #621357 and #2027720                     *                     * @todo FIX PROPERLY NEEDS OVERHAUL OF SQL TOKENIZER                     */                    if (($d_cur_upper == 'SET' || $d_cur_upper == 'BINARY') && $t_next != 'punct_bracket_open_round') {                        $t_suffix = '_reservedWord';                    }                    //END OF TEMPORARY FIX                    // CHARACTER is a synonym for CHAR, but can also be meant as                    // CHARACTER SET. In this case, we have a reserved word.                    if ($d_cur_upper == 'CHARACTER' && $d_next_upper == 'SET') {                        $t_suffix = '_reservedWord';                    }                    // experimental                    // current is a column type, so previous must not be                    // a reserved word but an identifier                    // CREATE TABLE SG_Persons (first varchar(64))                    //if ($sql_array[$i-1]['type'] =='alpha_reservedWord') {                    //    $sql_array[$i-1]['type'] = 'alpha_identifier';                    //}                } elseif (isset($PMA_SQPdata_reserved_word[$d_cur_upper])) {                    $t_suffix = '_reservedWord';                } elseif (isset($PMA_SQPdata_column_attrib[$d_cur_upper])) {                    $t_suffix = '_columnAttrib';                    // INNODB is a MySQL table type, but in "SHOW INNODB STATUS",                    // it should be regarded as a reserved word.                    if ($d_cur_upper == 'INNODB' && $d_prev_upper == 'SHOW' && $d_next_upper == 'STATUS') {                        $t_suffix = '_reservedWord';                    }                    if ($d_cur_upper == 'DEFAULT' && $d_next_upper == 'CHARACTER') {                        $t_suffix = '_reservedWord';                    }                    // Binary as character set                    if ($d_cur_upper == 'BINARY' && (                      ($d_bef_prev_upper == 'CHARACTER' && $d_prev_upper == 'SET')                      || ($d_bef_prev_upper == 'SET' && $d_prev_upper == '=')                      || ($d_bef_prev_upper == 'CHARSET' && $d_prev_upper == '=')                      || $d_prev_upper == 'CHARSET'                      ) && in_array($d_cur, $mysql_charsets)) {                        $t_suffix = '_charset';                    }                } elseif (in_array($d_cur, $mysql_charsets)                  || in_array($d_cur, $mysql_collations_flat)                  || ($d_cur{0} == '_' && in_array(substr($d_cur, 1), $mysql_charsets))) {                    $t_suffix = '_charset';                } else {                    // Do nothing                }                // check if present in the list of forbidden words                if ($t_suffix == '_reservedWord' && isset($PMA_SQPdata_forbidden_word[$d_cur_upper])) {                    $sql_array[$i]['forbidden'] = true;                } else {                    $sql_array[$i]['forbidden'] = false;                }                $sql_array[$i]['type'] .= $t_suffix;            }        } // end for        // Stores the size of the array inside the array, as count() is a slow        // operation.        $sql_array['len'] = $arraysize;        // DEBUG echo 'After parsing<pre>'; print_r($sql_array); echo '</pre>';        // Sends the data back        return $sql_array;    } // end of the "PMA_SQP_parse()" function    /**     * Checks for token types being what we want...     *     * @param string String of type that we have     * @param string String of type that we want     *     * @return boolean result of check     *     * @access private     */    function PMA_SQP_typeCheck($toCheck, $whatWeWant)    {        $typeSeperator = '_';        if (strcmp($whatWeWant, $toCheck) == 0) {            return true;        } else {            if (strpos($whatWeWant, $typeSeperator) === false) {                return strncmp($whatWeWant, $toCheck, strpos($toCheck, $typeSeperator)) == 0;            } else {                return false;            }        }    }    /**     * Analyzes SQL queries     *     * @param array   The SQL queries     *     * @return array   The analyzed SQL queries     *     * @access public     */    function PMA_SQP_analyze($arr)    {        if ($arr == array() || ! isset($arr['len'])) {            return array();        }        $result          = array();        $size            = $arr['len'];        $subresult       = array(            'querytype'      => '',            'select_expr_clause'=> '', // the whole stuff between SELECT and FROM , except DISTINCT            'position_of_first_select' => '', // the array index            'from_clause'=> '',            'group_by_clause'=> '',            'order_by_clause'=> '',            'having_clause'  => '',            'limit_clause'  => '',            'where_clause'   => '',            'where_clause_identifiers'   => array(),            'unsorted_query' => '',            'queryflags'     => array(),            'select_expr'    => array(),            'table_ref'      => array(),            'foreign_keys'   => array(),            'create_table_fields' => array()        );        $subresult_empty = $subresult;        $seek_queryend         = false;        $seen_end_of_table_ref = false;        $number_of_brackets_in_extract = 0;        $number_of_brackets_in_group_concat = 0;        $number_of_brackets = 0;        $in_subquery = false;        $seen_subquery = false;        $seen_from = false;        // for SELECT EXTRACT(YEAR_MONTH FROM CURDATE())        // we must not use CURDATE as a table_ref        // so we track whether we are in the EXTRACT()        $in_extract          = false;        // for GROUP_CONCAT(...)        $in_group_concat     = false;        /* Description of analyzer results         *         * db, table, column, alias         * ------------------------         *         * Inside the $subresult array, we create ['select_expr'] and ['table_ref'] arrays.         *         * The SELECT syntax (simplified) is         *         * SELECT         *    select_expression,...         *    [FROM [table_references]         *         *         * ['select_expr'] is filled with each expression, the key represents the         * expression position in the list (0-based) (so we don't lose track of         * multiple occurences of the same column).         *         * ['table_ref'] is filled with each table ref, same thing for the key.         *         * I create all sub-values empty, even if they are         * not present (for example no select_expression alias).         *         * There is a debug section at the end of loop #1, if you want to         * see the exact contents of select_expr and table_ref         *         * queryflags         * ----------         *         * In $subresult, array 'queryflags' is filled, according to what we         * find in the query.         *         * Currently, those are generated:         *         * ['queryflags']['need_confirm'] = 1; if the query needs confirmation         * ['queryflags']['select_from'] = 1;  if this is a real SELECT...FROM         * ['queryflags']['distinct'] = 1;     for a DISTINCT         * ['queryflags']['union'] = 1;        for a UNION         * ['queryflags']['join'] = 1;         for a JOIN         * ['queryflags']['offset'] = 1;       for the presence of OFFSET         * ['queryflags']['procedure'] = 1;    for the presence of PROCEDURE         *         * query clauses         * -------------         *         * The select is splitted in those clauses:         * ['select_expr_clause']         * ['from_clause']         * ['group_by_clause']         * ['order_by_clause']         * ['having_clause']         * ['limit_clause']         * ['where_clause']         *         * The identifiers of the WHERE clause are put into the array         * ['where_clause_identifier']         *         * For a SELECT, the whole query without the ORDER BY clause is put into         * ['unsorted_query']         *         * foreign keys         * ------------         * The CREATE TABLE may contain FOREIGN KEY clauses, so they get         * analyzed and ['foreign_keys'] is an array filled with         * the constraint name, the index list,         * the REFERENCES table name and REFERENCES index list,         * and ON UPDATE | ON DELETE clauses         *         * position_of_first_select         * ------------------------         *         * The array index of the first SELECT we find. Will be used to         * insert a SQL_CALC_FOUND_ROWS.         *         * create_table_fields         * -------------------         *         * Used to detect the DEFAULT CURRENT_TIMESTAMP and         * ON UPDATE CURRENT_TIMESTAMP clauses of the CREATE TABLE query.         * Also used to store the default value of the field.         * An array, each element is the identifier name.         * Note that for now, the timestamp_not_null element is created         * even for non-TIMESTAMP fields.         *         * Sub-elements: ['type'] which contains the column type         *               optional (currently they are never false but can be absent):         *               ['default_current_timestamp'] boolean         *               ['on_update_current_timestamp'] boolean         *               ['timestamp_not_null'] boolean         *         * section_before_limit, section_after_limit         * -----------------------------------------         *         * Marks the point of the query where we can insert a LIMIT clause;         * so the section_before_limit will contain the left part before         * a possible LIMIT clause         *         *         * End of description of analyzer results         */        // must be sorted        // TODO: current logic checks for only one word, so I put only the        // first word of the reserved expressions that end a table ref;        // maybe this is not ok (the first word might mean something else)        //        $words_ending_table_ref = array(        //            'FOR UPDATE',        //            'GROUP BY',        //            'HAVING',        //            'LIMIT',        //            'LOCK IN SHARE MODE',        //            'ORDER BY',        //            'PROCEDURE',        //            'UNION',        //            'WHERE'        //        );        $words_ending_table_ref = array(            'FOR' => 1,            'GROUP' => 1,            'HAVING' => 1,            'LIMIT' => 1,            'LOCK' => 1,            'ORDER' => 1,            'PROCEDURE' => 1,            'UNION' => 1,            'WHERE' => 1        );        $words_ending_clauses = array(            'FOR' => 1,            'LIMIT' => 1,            'LOCK' => 1,            'PROCEDURE' => 1,            'UNION' => 1        );        $supported_query_types = array(            'SELECT' => 1,            /*            // Support for these additional query types will come later on.            'DELETE' => 1,            'INSERT' => 1,            'REPLACE' => 1,            'TRUNCATE' => 1,            'UPDATE' => 1,            'EXPLAIN' => 1,            'DESCRIBE' => 1,            'SHOW' => 1,            'CREATE' => 1,            'SET' => 1,            'ALTER' => 1            */        );        // loop #1 for each token: select_expr, table_ref for SELECT        for ($i = 0; $i < $size; $i++) {            //DEBUG echo "Loop1 <strong>"  . $arr[$i]['data'] . "</strong> (" . $arr[$i]['type'] . ")<br />";            // High speed seek for locating the end of the current query            if ($seek_queryend == true) {                if ($arr[$i]['type'] == 'punct_queryend') {                    $seek_queryend = false;                } else {                    continue;                } // end if (type == punct_queryend)            } // end if ($seek_queryend)            /**             * Note: do not split if this is a punct_queryend for the first and only query             * @todo when we find a UNION, should we split in another subresult?             */            if ($arr[$i]['type'] == 'punct_queryend' && ($i + 1 != $size)) {                $result[]  = $subresult;                $subresult = $subresult_empty;                continue;            } // end if (type == punct_queryend)            // ==============================================================            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $number_of_brackets++;                if ($in_extract) {                    $number_of_brackets_in_extract++;                }                if ($in_group_concat) {                    $number_of_brackets_in_group_concat++;                }            }            // ==============================================================            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $number_of_brackets--;                if ($number_of_brackets == 0) {                    $in_subquery = false;                }                if ($in_extract) {                    $number_of_brackets_in_extract--;                    if ($number_of_brackets_in_extract == 0) {                       $in_extract = false;                    }                }                if ($in_group_concat) {                    $number_of_brackets_in_group_concat--;                    if ($number_of_brackets_in_group_concat == 0) {                       $in_group_concat = false;                    }                }            }            if ($in_subquery) {                /**                 * skip the subquery to avoid setting                 * select_expr or table_ref with the contents                 * of this subquery; this is to avoid a bug when                 * trying to edit the results of                 * select * from child where not exists (select id from                 * parent where child.parent_id = parent.id);                 */                continue;            }            // ==============================================================            if ($arr[$i]['type'] == 'alpha_functionName') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data =='EXTRACT') {                    $in_extract = true;                    $number_of_brackets_in_extract = 0;                }                if ($upper_data =='GROUP_CONCAT') {                    $in_group_concat = true;                    $number_of_brackets_in_group_concat = 0;                }            }            // ==============================================================            if ($arr[$i]['type'] == 'alpha_reservedWord'                //&& $arr[$i]['forbidden'] == false) {                ) {                // We don't know what type of query yet, so run this                if ($subresult['querytype'] == '') {                    $subresult['querytype'] = strtoupper($arr[$i]['data']);                } // end if (querytype was empty)                // Check if we support this type of query                if (!isset($supported_query_types[$subresult['querytype']])) {                    // Skip ahead to the next one if we don't                    $seek_queryend = true;                    continue;                } // end if (query not supported)                // upper once                $upper_data = strtoupper($arr[$i]['data']);                /**                 * @todo reset for each query?                 */                if ($upper_data == 'SELECT') {                    if ($number_of_brackets > 0) {                        $in_subquery = true;                        $seen_subquery = true;                        // this is a subquery so do not analyze inside it                        continue;                    }                    $seen_from = false;                    $previous_was_identifier = false;                    $current_select_expr = -1;                    $seen_end_of_table_ref = false;                } // end if (data == SELECT)                if ($upper_data =='FROM' && !$in_extract) {                    $current_table_ref = -1;                    $seen_from = true;                    $previous_was_identifier = false;                    $save_table_ref = true;                } // end if (data == FROM)                // here, do not 'continue' the loop, as we have more work for                // reserved words below            } // end if (type == alpha_reservedWord)            // ==============================            if ($arr[$i]['type'] == 'quote_backtick'             || $arr[$i]['type'] == 'quote_double'             || $arr[$i]['type'] == 'quote_single'             || $arr[$i]['type'] == 'alpha_identifier'             || ($arr[$i]['type'] == 'alpha_reservedWord'                && $arr[$i]['forbidden'] == false)) {                switch ($arr[$i]['type']) {                case 'alpha_identifier':                case 'alpha_reservedWord':                    /**                     * this is not a real reservedWord, because it's not                     * present in the list of forbidden words, for example                     * "storage" which can be used as an identifier                     *                     * @todo avoid the pretty printing in color in this case                     */                    $identifier = $arr[$i]['data'];                    break;                case 'quote_backtick':                case 'quote_double':                case 'quote_single':                    $identifier = PMA_unQuote($arr[$i]['data']);                    break;                } // end switch                if ($subresult['querytype'] == 'SELECT'                 && ! $in_group_concat                 && ! ($seen_subquery && $arr[$i - 1]['type'] == 'punct_bracket_close_round')) {                    if (!$seen_from) {                        if ($previous_was_identifier && isset($chain)) {                            // found alias for this select_expr, save it                            // but only if we got something in $chain                            // (for example, SELECT COUNT(*) AS cnt                            // puts nothing in $chain, so we avoid                            // setting the alias)                            $alias_for_select_expr = $identifier;                        } else {                            $chain[] = $identifier;                            $previous_was_identifier = true;                        } // end if !$previous_was_identifier                    } else {                        // ($seen_from)                        if ($save_table_ref && !$seen_end_of_table_ref) {                            if ($previous_was_identifier) {                                // found alias for table ref                                // save it for later                                $alias_for_table_ref = $identifier;                            } else {                                $chain[] = $identifier;                                $previous_was_identifier = true;                            } // end if ($previous_was_identifier)                        } // end if ($save_table_ref &&!$seen_end_of_table_ref)                    } // end if (!$seen_from)                } // end if (querytype SELECT)            } // end if (quote_backtick or double quote or alpha_identifier)            // ===================================            if ($arr[$i]['type'] == 'punct_qualifier') {                // to be able to detect an identifier following another                $previous_was_identifier = false;                continue;            } // end if (punct_qualifier)            /**             * @todo check if 3 identifiers following one another -> error             */            //    s a v e    a    s e l e c t    e x p r            // finding a list separator or FROM            // means that we must save the current chain of identifiers            // into a select expression            // for now, we only save a select expression if it contains            // at least one identifier, as we are interested in checking            // the columns and table names, so in "select * from persons",            // the "*" is not saved            if (isset($chain) && !$seen_end_of_table_ref             && ((!$seen_from && $arr[$i]['type'] == 'punct_listsep')              || ($arr[$i]['type'] == 'alpha_reservedWord' && $upper_data == 'FROM'))) {                $size_chain = count($chain);                $current_select_expr++;                $subresult['select_expr'][$current_select_expr] = array(                  'expr' => '',                  'alias' => '',                  'db'   => '',                  'table_name' => '',                  'table_true_name' => '',                  'column' => ''                 );                if (isset($alias_for_select_expr) && strlen($alias_for_select_expr)) {                    // we had found an alias for this select expression                    $subresult['select_expr'][$current_select_expr]['alias'] = $alias_for_select_expr;                    unset($alias_for_select_expr);                }                // there is at least a column                $subresult['select_expr'][$current_select_expr]['column'] = $chain[$size_chain - 1];                $subresult['select_expr'][$current_select_expr]['expr'] = $chain[$size_chain - 1];                // maybe a table                if ($size_chain > 1) {                    $subresult['select_expr'][$current_select_expr]['table_name'] = $chain[$size_chain - 2];                    // we assume for now that this is also the true name                    $subresult['select_expr'][$current_select_expr]['table_true_name'] = $chain[$size_chain - 2];                    $subresult['select_expr'][$current_select_expr]['expr']                        = $subresult['select_expr'][$current_select_expr]['table_name']                        . '.' . $subresult['select_expr'][$current_select_expr]['expr'];                } // end if ($size_chain > 1)                // maybe a db                if ($size_chain > 2) {                    $subresult['select_expr'][$current_select_expr]['db'] = $chain[$size_chain - 3];                    $subresult['select_expr'][$current_select_expr]['expr']                        = $subresult['select_expr'][$current_select_expr]['db']                        . '.' . $subresult['select_expr'][$current_select_expr]['expr'];                } // end if ($size_chain > 2)                unset($chain);                /**                 * @todo explain this:                 */                if (($arr[$i]['type'] == 'alpha_reservedWord')                 && ($upper_data != 'FROM')) {                    $previous_was_identifier = true;                }            } // end if (save a select expr)            //======================================            //    s a v e    a    t a b l e    r e f            //======================================            // maybe we just saw the end of table refs            // but the last table ref has to be saved            // or we are at the last token            // or we just got a reserved word            /**             * @todo there could be another query after this one             */            if (isset($chain) && $seen_from && $save_table_ref             && ($arr[$i]['type'] == 'punct_listsep'               || ($arr[$i]['type'] == 'alpha_reservedWord' && $upper_data!="AS")               || $seen_end_of_table_ref               || $i==$size-1)) {                $size_chain = count($chain);                $current_table_ref++;                $subresult['table_ref'][$current_table_ref] = array(                  'expr'            => '',                  'db'              => '',                  'table_name'      => '',                  'table_alias'     => '',                  'table_true_name' => ''                 );                if (isset($alias_for_table_ref) && strlen($alias_for_table_ref)) {                    $subresult['table_ref'][$current_table_ref]['table_alias'] = $alias_for_table_ref;                    unset($alias_for_table_ref);                }                $subresult['table_ref'][$current_table_ref]['table_name'] = $chain[$size_chain - 1];                // we assume for now that this is also the true name                $subresult['table_ref'][$current_table_ref]['table_true_name'] = $chain[$size_chain - 1];                $subresult['table_ref'][$current_table_ref]['expr']                    = $subresult['table_ref'][$current_table_ref]['table_name'];                // maybe a db                if ($size_chain > 1) {                    $subresult['table_ref'][$current_table_ref]['db'] = $chain[$size_chain - 2];                    $subresult['table_ref'][$current_table_ref]['expr']                        = $subresult['table_ref'][$current_table_ref]['db']                        . '.' . $subresult['table_ref'][$current_table_ref]['expr'];                } // end if ($size_chain > 1)                // add the table alias into the whole expression                $subresult['table_ref'][$current_table_ref]['expr']                 .= ' ' . $subresult['table_ref'][$current_table_ref]['table_alias'];                unset($chain);                $previous_was_identifier = true;                //continue;            } // end if (save a table ref)            // when we have found all table refs,            // for each table_ref alias, put the true name of the table            // in the corresponding select expressions            if (isset($current_table_ref) && ($seen_end_of_table_ref || $i == $size-1) && $subresult != $subresult_empty) {                for ($tr=0; $tr <= $current_table_ref; $tr++) {                    $alias = $subresult['table_ref'][$tr]['table_alias'];                    $truename = $subresult['table_ref'][$tr]['table_true_name'];                    for ($se=0; $se <= $current_select_expr; $se++) {                        if (isset($alias)                            && strlen($alias)                            && $subresult['select_expr'][$se]['table_true_name'] == $alias                        ) {                            $subresult['select_expr'][$se]['table_true_name'] = $truename;                        } // end if (found the alias)                    } // end for (select expressions)                } // end for (table refs)            } // end if (set the true names)            // e n d i n g    l o o p  #1            // set the $previous_was_identifier to false if the current            // token is not an identifier            if (($arr[$i]['type'] != 'alpha_identifier')             && ($arr[$i]['type'] != 'quote_double')             && ($arr[$i]['type'] != 'quote_single')             && ($arr[$i]['type'] != 'quote_backtick')) {                $previous_was_identifier = false;            } // end if            // however, if we are on AS, we must keep the $previous_was_identifier            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data == 'AS')) {                $previous_was_identifier = true;            }            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data =='ON' || $upper_data =='USING')) {                $save_table_ref = false;            } // end if (data == ON)            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data =='JOIN' || $upper_data =='FROM')) {                $save_table_ref = true;            } // end if (data == JOIN)            /**             * no need to check the end of table ref if we already did             *             * @todo maybe add "&& $seen_from"             */            if (!$seen_end_of_table_ref) {                // if this is the last token, it implies that we have                // seen the end of table references                // Check for the end of table references                //                // Note: if we are analyzing a GROUP_CONCAT clause,                // we might find a word that seems to indicate that                // we have found the end of table refs (like ORDER)                // but it's a modifier of the GROUP_CONCAT so                // it's not the real end of table refs                if (($i == $size-1)                 || ($arr[$i]['type'] == 'alpha_reservedWord'                 && !$in_group_concat                 && isset($words_ending_table_ref[$upper_data]))) {                    $seen_end_of_table_ref = true;                    // to be able to save the last table ref, but do not                    // set it true if we found a word like "ON" that has                    // already set it to false                    if (isset($save_table_ref) && $save_table_ref != false) {                        $save_table_ref = true;                    } //end if                } // end if (check for end of table ref)            } //end if (!$seen_end_of_table_ref)            if ($seen_end_of_table_ref) {                $save_table_ref = false;            } // end if        } // end for $i (loop #1)        //DEBUG        /*          if (isset($current_select_expr)) {           for ($trace=0; $trace<=$current_select_expr; $trace++) {               echo "<br />";               reset ($subresult['select_expr'][$trace]);               while (list ($key, $val) = each ($subresult['select_expr'][$trace]))                   echo "sel expr $trace $key => $val<br />\n";               }          }          if (isset($current_table_ref)) {           echo "current_table_ref = " . $current_table_ref . "<br>";           for ($trace=0; $trace<=$current_table_ref; $trace++) {               echo "<br />";               reset ($subresult['table_ref'][$trace]);               while (list ($key, $val) = each ($subresult['table_ref'][$trace]))               echo "table ref $trace $key => $val<br />\n";               }          }        */        // -------------------------------------------------------        // loop #2: - queryflags        //          - querytype (for queries != 'SELECT')        //          - section_before_limit, section_after_limit        //        // we will also need this queryflag in loop 2        // so set it here        if (isset($current_table_ref) && $current_table_ref > -1) {            $subresult['queryflags']['select_from'] = 1;        }        $section_before_limit = '';        $section_after_limit = ''; // truly the section after the limit clause        $seen_reserved_word = false;        $seen_group = false;        $seen_order = false;        $seen_order_by = false;        $in_group_by = false; // true when we are inside the GROUP BY clause        $in_order_by = false; // true when we are inside the ORDER BY clause        $in_having = false; // true when we are inside the HAVING clause        $in_select_expr = false; // true when we are inside the select expr clause        $in_where = false; // true when we are inside the WHERE clause        $seen_limit = false; // true if we have seen a LIMIT clause        $in_limit = false; // true when we are inside the LIMIT clause        $after_limit = false; // true when we are after the LIMIT clause        $in_from = false; // true when we are in the FROM clause        $in_group_concat = false;        $first_reserved_word = '';        $current_identifier = '';        $unsorted_query = $arr['raw']; // in case there is no ORDER BY        $number_of_brackets = 0;        $in_subquery = false;        for ($i = 0; $i < $size; $i++) {            //DEBUG echo "Loop2 <strong>"  . $arr[$i]['data'] . "</strong> (" . $arr[$i]['type'] . ")<br />";            // need_confirm            //            // check for reserved words that will have to generate            // a confirmation request later in sql.php            // the cases are:            //   DROP TABLE            //   DROP DATABASE            //   ALTER TABLE... DROP            //   DELETE FROM...            //            // this code is not used for confirmations coming from functions.js            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $number_of_brackets++;            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $number_of_brackets--;                if ($number_of_brackets == 0) {                    $in_subquery = false;                }            }            if ($arr[$i]['type'] == 'alpha_reservedWord') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data == 'SELECT' && $number_of_brackets > 0) {                    $in_subquery = true;                }                if (!$seen_reserved_word) {                    $first_reserved_word = $upper_data;                    $subresult['querytype'] = $upper_data;                    $seen_reserved_word = true;                    // if the first reserved word is DROP or DELETE,                    // we know this is a query that needs to be confirmed                    if ($first_reserved_word=='DROP'                     || $first_reserved_word == 'DELETE'                     || $first_reserved_word == 'TRUNCATE') {                        $subresult['queryflags']['need_confirm'] = 1;                    }                    if ($first_reserved_word=='SELECT') {                        $position_of_first_select = $i;                    }                } else {                    if ($upper_data == 'DROP' && $first_reserved_word == 'ALTER') {                        $subresult['queryflags']['need_confirm'] = 1;                    }                }                if ($upper_data == 'LIMIT' && ! $in_subquery) {                    $section_before_limit = substr($arr['raw'], 0, $arr[$i]['pos'] - 5);                    $in_limit = true;                    $seen_limit = true;                    $limit_clause = '';                    $in_order_by = false; // @todo maybe others to set false                }                if ($upper_data == 'PROCEDURE') {                    $subresult['queryflags']['procedure'] = 1;                    $in_limit = false;                    $after_limit = true;                }                /**                 * @todo set also to false if we find FOR UPDATE or LOCK IN SHARE MODE                 */                if ($upper_data == 'SELECT') {                    $in_select_expr = true;                    $select_expr_clause = '';                }                if ($upper_data == 'DISTINCT' && !$in_group_concat) {                    $subresult['queryflags']['distinct'] = 1;                }                if ($upper_data == 'UNION') {                    $subresult['queryflags']['union'] = 1;                }                if ($upper_data == 'JOIN') {                    $subresult['queryflags']['join'] = 1;                }                if ($upper_data == 'OFFSET') {                    $subresult['queryflags']['offset'] = 1;                }                // if this is a real SELECT...FROM                if ($upper_data == 'FROM' && isset($subresult['queryflags']['select_from']) && $subresult['queryflags']['select_from'] == 1) {                    $in_from = true;                    $from_clause = '';                    $in_select_expr = false;                }                // (we could have less resetting of variables to false                // if we trust that the query respects the standard                // MySQL order for clauses)                // we use $seen_group and $seen_order because we are looking                // for the BY                if ($upper_data == 'GROUP') {                    $seen_group = true;                    $seen_order = false;                    $in_having = false;                    $in_order_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'ORDER' && !$in_group_concat) {                    $seen_order = true;                    $seen_group = false;                    $in_having = false;                    $in_group_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'HAVING') {                    $in_having = true;                    $having_clause = '';                    $seen_group = false;                    $seen_order = false;                    $in_group_by = false;                    $in_order_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'WHERE') {                    $in_where = true;                    $where_clause = '';                    $where_clause_identifiers = array();                    $seen_group = false;                    $seen_order = false;                    $in_group_by = false;                    $in_order_by = false;                    $in_having = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'BY') {                    if ($seen_group) {                        $in_group_by = true;                        $group_by_clause = '';                    }                    if ($seen_order) {                        $seen_order_by = true;                        // Here we assume that the ORDER BY keywords took                        // exactly 8 characters.                        // We use PMA_substr() to be charset-safe; otherwise                        // if the table name contains accents, the unsorted                        // query would be missing some characters.                        $unsorted_query = PMA_substr($arr['raw'], 0, $arr[$i]['pos'] - 8);                        $in_order_by = true;                        $order_by_clause = '';                    }                }                // if we find one of the words that could end the clause                if (isset($words_ending_clauses[$upper_data])) {                    $in_group_by = false;                    $in_order_by = false;                    $in_having   = false;                    $in_where    = false;                    $in_select_expr = false;                    $in_from = false;                }            } // endif (reservedWord)            // do not add a space after a function name            /**             * @todo can we combine loop 2 and loop 1? some code is repeated here...             */            $sep = ' ';            if ($arr[$i]['type'] == 'alpha_functionName') {                $sep='';                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data =='GROUP_CONCAT') {                    $in_group_concat = true;                    $number_of_brackets_in_group_concat = 0;                }            }            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                if ($in_group_concat) {                    $number_of_brackets_in_group_concat++;                }            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                if ($in_group_concat) {                    $number_of_brackets_in_group_concat--;                    if ($number_of_brackets_in_group_concat == 0) {                        $in_group_concat = false;                    }                }            }            // do not add a space after an identifier if followed by a dot            if ($arr[$i]['type'] == 'alpha_identifier' && $i < $size - 1 && $arr[$i + 1]['data'] == '.') {                $sep = '';            }            // do not add a space after a dot if followed by an identifier            if ($arr[$i]['data'] == '.' && $i < $size - 1 && $arr[$i + 1]['type'] == 'alpha_identifier') {                $sep = '';            }            if ($in_select_expr && $upper_data != 'SELECT' && $upper_data != 'DISTINCT') {                $select_expr_clause .= $arr[$i]['data'] . $sep;            }            if ($in_from && $upper_data != 'FROM') {                $from_clause .= $arr[$i]['data'] . $sep;            }            if ($in_group_by && $upper_data != 'GROUP' && $upper_data != 'BY') {                $group_by_clause .= $arr[$i]['data'] . $sep;            }            if ($in_order_by && $upper_data != 'ORDER' && $upper_data != 'BY') {                // add a space only before ASC or DESC                // not around the dot between dbname and tablename                if ($arr[$i]['type'] == 'alpha_reservedWord') {                    $order_by_clause .= $sep;                }                $order_by_clause .= $arr[$i]['data'];            }            if ($in_having && $upper_data != 'HAVING') {                $having_clause .= $arr[$i]['data'] . $sep;            }            if ($in_where && $upper_data != 'WHERE') {                $where_clause .= $arr[$i]['data'] . $sep;                if (($arr[$i]['type'] == 'quote_backtick')                 || ($arr[$i]['type'] == 'alpha_identifier')) {                    $where_clause_identifiers[] = $arr[$i]['data'];                }            }            // to grab the rest of the query after the ORDER BY clause            if (isset($subresult['queryflags']['select_from'])             && $subresult['queryflags']['select_from'] == 1             && ! $in_order_by             && $seen_order_by             && $upper_data != 'BY') {                $unsorted_query .= $arr[$i]['data'];                if ($arr[$i]['type'] != 'punct_bracket_open_round'                 && $arr[$i]['type'] != 'punct_bracket_close_round'                 && $arr[$i]['type'] != 'punct') {                    $unsorted_query .= $sep;                }            }            if ($in_limit) {                if ($upper_data == 'OFFSET') {                    $limit_clause .= $sep;                }                $limit_clause .= $arr[$i]['data'];                if ($upper_data == 'LIMIT' || $upper_data == 'OFFSET') {                    $limit_clause .= $sep;                }            }            if ($after_limit && $seen_limit) {                $section_after_limit .= $arr[$i]['data'] . $sep;            }            // clear $upper_data for next iteration            $upper_data='';        } // end for $i (loop #2)        if (empty($section_before_limit)) {            $section_before_limit = $arr['raw'];        }        // -----------------------------------------------------        // loop #3: foreign keys and MySQL 4.1.2+ TIMESTAMP options        // (for now, check only the first query)        // (for now, identifiers are assumed to be backquoted)        // If we find that we are dealing with a CREATE TABLE query,        // we look for the next punct_bracket_open_round, which        // introduces the fields list. Then, when we find a        // quote_backtick, it must be a field, so we put it into        // the create_table_fields array. Even if this field is        // not a timestamp, it will be useful when logic has been        // added for complete field attributes analysis.        $seen_foreign = false;        $seen_references = false;        $seen_constraint = false;        $foreign_key_number = -1;        $seen_create_table = false;        $seen_create = false;        $seen_alter = false;        $in_create_table_fields = false;        $brackets_level = 0;        $in_timestamp_options = false;        $seen_default = false;        for ($i = 0; $i < $size; $i++) {        // DEBUG echo "Loop 3 <strong>" . $arr[$i]['data'] . "</strong> " . $arr[$i]['type'] . "<br />";            if ($arr[$i]['type'] == 'alpha_reservedWord') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data == 'NOT' && $in_timestamp_options) {                    $create_table_fields[$current_identifier]['timestamp_not_null'] = true;                }                if ($upper_data == 'CREATE') {                    $seen_create = true;                }                if ($upper_data == 'ALTER') {                    $seen_alter = true;                }                if ($upper_data == 'TABLE' && $seen_create) {                    $seen_create_table = true;                    $create_table_fields = array();                }                if ($upper_data == 'CURRENT_TIMESTAMP') {                    if ($in_timestamp_options) {                        if ($seen_default) {                            $create_table_fields[$current_identifier]['default_current_timestamp'] = true;                        }                    }                }                if ($upper_data == 'CONSTRAINT') {                    $foreign_key_number++;                    $seen_foreign = false;                    $seen_references = false;                    $seen_constraint = true;                }                if ($upper_data == 'FOREIGN') {                    $seen_foreign = true;                    $seen_references = false;                    $seen_constraint = false;                }                if ($upper_data == 'REFERENCES') {                    $seen_foreign = false;                    $seen_references = true;                    $seen_constraint = false;                }                // Cases covered:                // [ON DELETE {CASCADE | SET NULL | NO ACTION | RESTRICT}]                // [ON UPDATE {CASCADE | SET NULL | NO ACTION | RESTRICT}]                // but we set ['on_delete'] or ['on_cascade'] to                // CASCADE | SET_NULL | NO_ACTION | RESTRICT                // ON UPDATE CURRENT_TIMESTAMP                if ($upper_data == 'ON') {                    if (isset($arr[$i+1]) && $arr[$i+1]['type'] == 'alpha_reservedWord') {                        $second_upper_data = strtoupper($arr[$i+1]['data']);                        if ($second_upper_data == 'DELETE') {                            $clause = 'on_delete';                        }                        if ($second_upper_data == 'UPDATE') {                            $clause = 'on_update';                        }                        if (isset($clause)                        && ($arr[$i+2]['type'] == 'alpha_reservedWord'                // ugly workaround because currently, NO is not                // in the list of reserved words in sqlparser.data                // (we got a bug report about not being able to use                // 'no' as an identifier)                           || ($arr[$i+2]['type'] == 'alpha_identifier'                              && strtoupper($arr[$i+2]['data'])=='NO'))                          ) {                            $third_upper_data = strtoupper($arr[$i+2]['data']);                            if ($third_upper_data == 'CASCADE'                            || $third_upper_data == 'RESTRICT') {                                $value = $third_upper_data;                            } elseif ($third_upper_data == 'SET'                              || $third_upper_data == 'NO') {                                if ($arr[$i+3]['type'] == 'alpha_reservedWord') {                                    $value = $third_upper_data . '_' . strtoupper($arr[$i+3]['data']);                                }                            } elseif ($third_upper_data == 'CURRENT_TIMESTAMP') {                                if ($clause == 'on_update'                                && $in_timestamp_options) {                                    $create_table_fields[$current_identifier]['on_update_current_timestamp'] = true;                                    $seen_default = false;                                }                            } else {                                $value = '';                            }                            if (!empty($value)) {                                $foreign[$foreign_key_number][$clause] = $value;                            }                            unset($clause);                        } // endif (isset($clause))                    }                }            } // end of reserved words analysis            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $brackets_level++;                if ($seen_create_table && $brackets_level == 1) {                    $in_create_table_fields = true;                }            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $brackets_level--;                if ($seen_references) {                    $seen_references = false;                }                if ($seen_create_table && $brackets_level == 0) {                    $in_create_table_fields = false;                }            }            if (($arr[$i]['type'] == 'alpha_columnAttrib')) {                $upper_data = strtoupper($arr[$i]['data']);                if ($seen_create_table && $in_create_table_fields) {                    if ($upper_data == 'DEFAULT') {                        $seen_default = true;                        $create_table_fields[$current_identifier]['default_value'] = $arr[$i + 1]['data'];                    }                }            }            /**             * @see @todo 2005-10-16 note: the "or" part here is a workaround for a bug             */            if (($arr[$i]['type'] == 'alpha_columnType') || ($arr[$i]['type'] == 'alpha_functionName' && $seen_create_table)) {                $upper_data = strtoupper($arr[$i]['data']);                if ($seen_create_table && $in_create_table_fields && isset($current_identifier)) {                    $create_table_fields[$current_identifier]['type'] = $upper_data;                    if ($upper_data == 'TIMESTAMP') {                        $arr[$i]['type'] = 'alpha_columnType';                        $in_timestamp_options = true;                    } else {                        $in_timestamp_options = false;                        if ($upper_data == 'CHAR') {                            $arr[$i]['type'] = 'alpha_columnType';                        }                    }                }            }            if ($arr[$i]['type'] == 'quote_backtick' || $arr[$i]['type'] == 'alpha_identifier') {                if ($arr[$i]['type'] == 'quote_backtick') {                    // remove backquotes                    $identifier = PMA_unQuote($arr[$i]['data']);                } else {                    $identifier = $arr[$i]['data'];                }                if ($seen_create_table && $in_create_table_fields) {                    $current_identifier = $identifier;                    // we set this one even for non TIMESTAMP type                    $create_table_fields[$current_identifier]['timestamp_not_null'] = false;                }                if ($seen_constraint) {                    $foreign[$foreign_key_number]['constraint'] = $identifier;                }                if ($seen_foreign && $brackets_level > 0) {                    $foreign[$foreign_key_number]['index_list'][] = $identifier;                }                if ($seen_references) {                    if ($seen_alter && $brackets_level > 0) {                        $foreign[$foreign_key_number]['ref_index_list'][] = $identifier;                        // here, the first bracket level corresponds to the                        // bracket of CREATE TABLE                        // so if we are on level 2, it must be the index list                        // of the foreign key REFERENCES                    } elseif ($brackets_level > 1) {                        $foreign[$foreign_key_number]['ref_index_list'][] = $identifier;                    } elseif ($arr[$i+1]['type'] == 'punct_qualifier') {                        // identifier is `db`.`table`                        // the first pass will pick the db name                        // the next pass will pick the table name                        $foreign[$foreign_key_number]['ref_db_name'] = $identifier;                    } else {                        // identifier is `table`                        $foreign[$foreign_key_number]['ref_table_name'] = $identifier;                    }                }            }        } // end for $i (loop #3)        // Fill the $subresult array        if (isset($create_table_fields)) {            $subresult['create_table_fields'] = $create_table_fields;        }        if (isset($foreign)) {            $subresult['foreign_keys'] = $foreign;        }        if (isset($select_expr_clause)) {            $subresult['select_expr_clause'] = $select_expr_clause;        }        if (isset($from_clause)) {            $subresult['from_clause'] = $from_clause;        }        if (isset($group_by_clause)) {            $subresult['group_by_clause'] = $group_by_clause;        }        if (isset($order_by_clause)) {            $subresult['order_by_clause'] = $order_by_clause;        }        if (isset($having_clause)) {            $subresult['having_clause'] = $having_clause;        }        if (isset($limit_clause)) {            $subresult['limit_clause'] = $limit_clause;        }        if (isset($where_clause)) {            $subresult['where_clause'] = $where_clause;        }        if (isset($unsorted_query) && !empty($unsorted_query)) {            $subresult['unsorted_query'] = $unsorted_query;        }        if (isset($where_clause_identifiers)) {            $subresult['where_clause_identifiers'] = $where_clause_identifiers;        }        if (isset($position_of_first_select)) {            $subresult['position_of_first_select'] = $position_of_first_select;            $subresult['section_before_limit'] = $section_before_limit;            $subresult['section_after_limit'] = $section_after_limit;        }        // They are naughty and didn't have a trailing semi-colon,        // then still handle it properly        if ($subresult['querytype'] != '') {            $result[] = $subresult;        }        return $result;    } // end of the "PMA_SQP_analyze()" function    /**     * Colorizes SQL queries html formatted     *     * @todo check why adding a "\n" after the </span> would cause extra blanks     * to be displayed: SELECT p . person_name     * @param array   The SQL queries html formatted     *     * @return array   The colorized SQL queries     *     * @access public     */    function PMA_SQP_formatHtml_colorize($arr)    {        $i         = PMA_strpos($arr['type'], '_');        $class     = '';        if ($i > 0) {            $class = 'syntax_' . PMA_substr($arr['type'], 0, $i) . ' ';        }        $class     .= 'syntax_' . $arr['type'];        return '<span class="' . $class . '">' . htmlspecialchars($arr['data']) . '</span>';    } // end of the "PMA_SQP_formatHtml_colorize()" function    /**     * Formats SQL queries to html     *     * @param array   The SQL queries     * @param string  mode     * @param integer starting token     * @param integer number of tokens to format, -1 = all     *     * @return string  The formatted SQL queries     *     * @access public     */    function PMA_SQP_formatHtml($arr, $mode='color', $start_token=0,        $number_of_tokens=-1)    {        global $PMA_SQPdata_operators_docs, $PMA_SQPdata_functions_docs;        //DEBUG echo 'in Format<pre>'; print_r($arr); echo '</pre>';        // then check for an array        if (! is_array($arr)) {            return htmlspecialchars($arr);        }        // first check for the SQL parser having hit an error        if (PMA_SQP_isError()) {            return htmlspecialchars($arr['raw']);        }        // else do it properly        switch ($mode) {        case 'color':            $str                                = '<span class="syntax">';            $html_line_break                    = '<br />';            $docu                               = true;            break;        case 'query_only':            $str                                = '';            $html_line_break                    = "\n";            $docu                               = false;            break;        case 'text':            $str                                = '';            $html_line_break                    = '<br />';            $docu                               = true;            break;        } // end switch        // inner_sql is a span that exists for all cases, except query_only        // of $cfg['SQP']['fmtType'] to make possible a replacement        // for inline editing        if ($mode!='query_only') {            $str .= '<span class="inner_sql">';        }        $close_docu_link = false;        $indent                                     = 0;        $bracketlevel                               = 0;        $functionlevel                              = 0;        $infunction                                 = false;        $space_punct_listsep                        = ' ';        $space_punct_listsep_function_name          = ' ';        // $space_alpha_reserved_word = '<br />'."\n";        $space_alpha_reserved_word                  = ' ';        $keywords_with_brackets_1before            = array(            'INDEX' => 1,            'KEY' => 1,            'ON' => 1,            'USING' => 1        );        $keywords_with_brackets_2before            = array(            'IGNORE' => 1,            'INDEX' => 1,            'INTO' => 1,            'KEY' => 1,            'PRIMARY' => 1,            'PROCEDURE' => 1,            'REFERENCES' => 1,            'UNIQUE' => 1,            'USE' => 1        );        // These reserved words do NOT get a newline placed near them.        $keywords_no_newline               = array(            'AS' => 1,            'ASC' => 1,            'DESC' => 1,            'DISTINCT' => 1,            'DUPLICATE' => 1,            'HOUR' => 1,            'INTERVAL' => 1,            'IS' => 1,            'LIKE' => 1,            'NOT' => 1,            'NULL' => 1,            'ON' => 1,            'REGEXP' => 1        );        // These reserved words introduce a privilege list        $keywords_priv_list                = array(            'GRANT' => 1,            'REVOKE' => 1        );        if ($number_of_tokens == -1) {            $number_of_tokens = $arr['len'];        }        $typearr   = array();        if ($number_of_tokens >= 0) {            $typearr[0] = '';            $typearr[1] = '';            $typearr[2] = '';            $typearr[3] = $arr[$start_token]['type'];        }        $in_priv_list = false;        for ($i = $start_token; $i < $number_of_tokens; $i++) {            // DEBUG echo "Loop format <strong>" . $arr[$i]['data'] . "</strong> " . $arr[$i]['type'] . "<br />";            $before = '';            $after  = '';            // array_shift($typearr);            /*            0 prev2            1 prev            2 current            3 next            */            if (($i + 1) < $number_of_tokens) {                $typearr[4] = $arr[$i + 1]['type'];            } else {                $typearr[4] = '';            }            for ($j=0; $j<4; $j++) {                $typearr[$j] = $typearr[$j + 1];            }            switch ($typearr[2]) {            case 'alpha_bitfield_constant_introducer':                $before     = ' ';                $after      = '';                break;            case 'white_newline':                $before     = '';                break;            case 'punct_bracket_open_round':                $bracketlevel++;                $infunction = false;                // Make sure this array is sorted!                if (($typearr[1] == 'alpha_functionName') || ($typearr[1] == 'alpha_columnType') || ($typearr[1] == 'punct')                    || ($typearr[3] == 'digit_integer') || ($typearr[3] == 'digit_hex') || ($typearr[3] == 'digit_float')                    || (($typearr[0] == 'alpha_reservedWord')                        && isset($keywords_with_brackets_2before[strtoupper($arr[$i - 2]['data'])]))                    || (($typearr[1] == 'alpha_reservedWord')                        && isset($keywords_with_brackets_1before[strtoupper($arr[$i - 1]['data'])]))                    ) {                    $functionlevel++;                    $infunction = true;                    $after      .= ' ';                } else {                    $indent++;                    $after      .= ($mode != 'query_only' ? '<div class="syntax_indent' . $indent . '">' : ' ');                }                break;            case 'alpha_identifier':                if (($typearr[1] == 'punct_qualifier') || ($typearr[3] == 'punct_qualifier')) {                    $after      = '';                    $before     = '';                }                // for example SELECT 1 somealias                if ($typearr[1] == 'digit_integer') {                    $before     = ' ';                }                if (($typearr[3] == 'alpha_columnType') || ($typearr[3] == 'alpha_identifier')) {                    $after      .= ' ';                }                break;            case 'punct_user':            case 'punct_qualifier':                $before         = '';                $after          = '';                break;            case 'punct_listsep':                if ($infunction == true) {                    $after      .= $space_punct_listsep_function_name;                } else {                    $after      .= $space_punct_listsep;                }                break;            case 'punct_queryend':                if (($typearr[3] != 'comment_mysql') && ($typearr[3] != 'comment_ansi') && $typearr[3] != 'comment_c') {                    $after     .= $html_line_break;                    $after     .= $html_line_break;                }                $space_punct_listsep               = ' ';                $space_punct_listsep_function_name = ' ';                $space_alpha_reserved_word         = ' ';                $in_priv_list                      = false;                break;            case 'comment_mysql':            case 'comment_ansi':                $after         .= $html_line_break;                break;            case 'punct':                $before         .= ' ';                if ($docu && isset($PMA_SQPdata_operators_docs[$arr[$i]['data']]) &&                        ($arr[$i]['data'] != '*' || in_array($arr[$i]['type'], array('digit_integer','digit_float','digit_hex')))) {                    $before .= PMA_showMySQLDocu(                        'functions',                        $PMA_SQPdata_operators_docs[$arr[$i]['data']]['link'],                        false,                        $PMA_SQPdata_operators_docs[$arr[$i]['data']]['anchor'],                        true);                    $after .= '</a>';                }                // workaround for                // select * from mytable limit 0,-1                // (a side effect of this workaround is that                // select 20 - 9                // becomes                // select 20 -9                // )                if ($typearr[3] != 'digit_integer') {                    $after        .= ' ';                }                break;            case 'punct_bracket_close_round':                // only close bracket level when it was opened before                if ($bracketlevel > 0) {                    $bracketlevel--;                    if ($infunction == true) {                        $functionlevel--;                        $after     .= ' ';                        $before    .= ' ';                    } else {                        $indent--;                        $before    .= ($mode != 'query_only' ? '</div>' : ' ');                    }                    $infunction    = ($functionlevel > 0) ? true : false;                }                break;            case 'alpha_columnType':                if ($docu) {                    switch ($arr[$i]['data']) {                    case 'tinyint':                    case 'smallint':                    case 'mediumint':                    case 'int':                    case 'bigint':                    case 'decimal':                    case 'float':                    case 'double':                    case 'real':                    case 'bit':                    case 'boolean':                    case 'serial':                        $before .= PMA_showMySQLDocu('data-types', 'numeric-types', false, '', true);                        $after = '</a>' . $after;                        break;                    case 'date':                    case 'datetime':                    case 'timestamp':                    case 'time':                    case 'year':                        $before .= PMA_showMySQLDocu('data-types', 'date-and-time-types', false, '', true);                        $after = '</a>' . $after;                        break;                    case 'char':                    case 'varchar':                    case 'tinytext':                    case 'text':                    case 'mediumtext':                    case 'longtext':                    case 'binary':                    case 'varbinary':                    case 'tinyblob':                    case 'mediumblob':                    case 'blob':                    case 'longblob':                    case 'enum':                    case 'set':                        $before .= PMA_showMySQLDocu('data-types', 'string-types', false, '', true);                        $after = '</a>' . $after;                        break;                    }                }                if ($typearr[3] == 'alpha_columnAttrib') {                    $after     .= ' ';                }                if ($typearr[1] == 'alpha_columnType') {                    $before    .= ' ';                }                break;            case 'alpha_columnAttrib':                // ALTER TABLE tbl_name AUTO_INCREMENT = 1                // COLLATE LATIN1_GENERAL_CI DEFAULT                if ($typearr[1] == 'alpha_identifier' || $typearr[1] == 'alpha_charset') {                    $before .= ' ';                }                if (($typearr[3] == 'alpha_columnAttrib') || ($typearr[3] == 'quote_single') || ($typearr[3] == 'digit_integer')) {                    $after     .= ' ';                }                // workaround for                // AUTO_INCREMENT = 31DEFAULT_CHARSET = utf-8                if ($typearr[2] == 'alpha_columnAttrib' && $typearr[3] == 'alpha_reservedWord') {                    $before .= ' ';                }                // workaround for                // select * from mysql.user where binary user="root"                // binary is marked as alpha_columnAttrib                // but should be marked as a reserved word                if (strtoupper($arr[$i]['data']) == 'BINARY'                  && $typearr[3] == 'alpha_identifier') {                    $after     .= ' ';                }                break;            case 'alpha_functionName':                $funcname = strtoupper($arr[$i]['data']);                if ($docu && isset($PMA_SQPdata_functions_docs[$funcname])) {                    $before .= PMA_showMySQLDocu(                        'functions',                        $PMA_SQPdata_functions_docs[$funcname]['link'],                        false,                        $PMA_SQPdata_functions_docs[$funcname]['anchor'],                        true);                    $after .= '</a>';                }                break;            case 'alpha_reservedWord':                // do not uppercase the reserved word if we are calling                // this function in query_only mode, because we need                // the original query (otherwise we get problems with                // semi-reserved words like "storage" which is legal                // as an identifier name)                if ($mode != 'query_only') {                    $arr[$i]['data'] = strtoupper($arr[$i]['data']);                }                if ((($typearr[1] != 'alpha_reservedWord')                    || (($typearr[1] == 'alpha_reservedWord')                        && isset($keywords_no_newline[strtoupper($arr[$i - 1]['data'])])))                    && ($typearr[1] != 'punct_level_plus')                    && (!isset($keywords_no_newline[$arr[$i]['data']]))) {                    // do not put a space before the first token, because                    // we use a lot of pattern matching checking for the                    // first reserved word at beginning of query                    // so do not put a newline before                    //                    // also we must not be inside a privilege list                    if ($i > 0) {                        // the alpha_identifier exception is there to                        // catch cases like                        // GRANT SELECT ON mydb.mytable TO myuser@localhost                        // (else, we get mydb.mytableTO)                        //                        // the quote_single exception is there to                        // catch cases like                        // GRANT ... TO 'marc'@'domain.com' IDENTIFIED...                        /**                         * @todo fix all cases and find why this happens                         */                        if (!$in_priv_list || $typearr[1] == 'alpha_identifier' || $typearr[1] == 'quote_single' || $typearr[1] == 'white_newline') {                            $before    .= $space_alpha_reserved_word;                        }                    } else {                        // on first keyword, check if it introduces a                        // privilege list                        if (isset($keywords_priv_list[$arr[$i]['data']])) {                            $in_priv_list = true;                        }                    }                } else {                    $before    .= ' ';                }                switch ($arr[$i]['data']) {                case 'CREATE':                case 'ALTER':                case 'DROP':                case 'RENAME';                case 'TRUNCATE':                case 'ANALYZE':                case 'ANALYSE':                case 'OPTIMIZE':                    if ($docu) {                        switch ($arr[$i + 1]['data']) {                        case 'EVENT':                        case 'TABLE':                        case 'TABLESPACE':                        case 'FUNCTION':                        case 'INDEX':                        case 'PROCEDURE':                        case 'TRIGGER':                        case 'SERVER':                        case 'DATABASE':                        case 'VIEW':                            $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'] . '_' . $arr[$i + 1]['data'], false, '', true);                            $close_docu_link = true;                            break;                        }                        if ($arr[$i + 1]['data'] == 'LOGFILE' && $arr[$i + 2]['data'] == 'GROUP') {                            $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'] . '_LOGFILE_GROUP', false, '', true);                            $close_docu_link = true;                        }                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'EVENT':                case 'TABLESPACE':                case 'TABLE':                case 'FUNCTION':                case 'INDEX':                case 'PROCEDURE':                case 'SERVER':                case 'TRIGGER':                case 'DATABASE':                case 'VIEW':                case 'GROUP':                    if ($close_docu_link) {                        $after = '</a>' . $after;                        $close_docu_link = false;                    }                    break;                case 'SET':                    if ($docu && ($i == 0 || $arr[$i - 1]['data'] != 'CHARACTER')) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'EXPLAIN':                case 'DESCRIBE':                case 'DELETE':                case 'SHOW':                case 'UPDATE':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'INSERT':                case 'REPLACE':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = $html_line_break;                    }                    break;                case 'VALUES':                    $space_punct_listsep       = ' ';                    $space_alpha_reserved_word = $html_line_break;                    break;                case 'SELECT':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', 'SELECT', false, '', true);                        $after = '</a>' . $after;                    }                    $space_punct_listsep       = ' ';                    $space_alpha_reserved_word = $html_line_break;                    break;                case 'CALL':                case 'DO':                case 'HANDLER':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    break;                default:                    if ($close_docu_link && in_array($arr[$i]['data'], array('LIKE', 'NOT', 'IN', 'REGEXP', 'NULL'))) {                        $after .= '</a>';                        $close_docu_link = false;                    } else if ($docu && isset($PMA_SQPdata_functions_docs[$arr[$i]['data']])) {                        /* Handle multi word statements first */                        if (isset($typearr[4]) && $typearr[4] == 'alpha_reservedWord' && $typearr[3] == 'alpha_reservedWord' && isset($PMA_SQPdata_functions_docs[strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'] . '_' . $arr[$i + 2]['data'])])) {                            $tempname = strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'] . '_' . $arr[$i + 2]['data']);                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$tempname]['link'], false, $PMA_SQPdata_functions_docs[$tempname]['anchor'], true);                            $close_docu_link = true;                        } else if (isset($typearr[3]) && $typearr[3] == 'alpha_reservedWord' && isset($PMA_SQPdata_functions_docs[strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'])])) {                            $tempname = strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data']);                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$tempname]['link'], false, $PMA_SQPdata_functions_docs[$tempname]['anchor'], true);                            $close_docu_link = true;                        } else {                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$arr[$i]['data']]['link'], false, $PMA_SQPdata_functions_docs[$arr[$i]['data']]['anchor'], true);                            $after .= '</a>';                        }                    }                    break;                } // end switch ($arr[$i]['data'])                $after         .= ' ';                break;            case 'digit_integer':            case 'digit_float':            case 'digit_hex':                /**                 * @todo could there be other types preceding a digit?                 */                if ($typearr[1] == 'alpha_reservedWord') {                    $after .= ' ';                }                if ($infunction && $typearr[3] == 'punct_bracket_close_round') {                    $after     .= ' ';                }                if ($typearr[1] == 'alpha_columnAttrib') {                    $before .= ' ';                }                break;            case 'alpha_variable':                $after      = ' ';                break;            case 'quote_double':            case 'quote_single':                // workaround: for the query                // REVOKE SELECT ON `base2\_db`.* FROM 'user'@'%'                // the @ is incorrectly marked as alpha_variable                // in the parser, and here, the '%' gets a blank before,                // which is a syntax error                if ($typearr[1] != 'punct_user' && $typearr[1] != 'alpha_bitfield_constant_introducer') {                    $before        .= ' ';                }                if ($infunction && $typearr[3] == 'punct_bracket_close_round') {                    $after     .= ' ';                }                break;            case 'quote_backtick':                // here we check for punct_user to handle correctly                // DEFINER = `username`@`%`                // where @ is the punct_user and `%` is the quote_backtick                if ($typearr[3] != 'punct_qualifier' && $typearr[3] != 'alpha_variable' && $typearr[3] != 'punct_user') {                    $after     .= ' ';                }                if ($typearr[1] != 'punct_qualifier' && $typearr[1] != 'alpha_variable' && $typearr[1] != 'punct_user') {                    $before    .= ' ';                }                break;            default:                break;            } // end switch ($typearr[2])            /*            if ($typearr[3] != 'punct_qualifier') {                $after             .= ' ';            }            $after                 .= "\n";            */            $str .= $before;            if ($mode=='color') {                $str .= PMA_SQP_formatHTML_colorize($arr[$i]);            } elseif ($mode == 'text') {                $str .= htmlspecialchars($arr[$i]['data']);            } else {                $str .= $arr[$i]['data'];            }            $str .= $after;        } // end for        // close unclosed indent levels        while ($indent > 0) {            $indent--;            $str .= ($mode != 'query_only' ? '</div>' : ' ');        }        /* End possibly unclosed documentation link */        if ($close_docu_link) {            $str .= '</a>';            $close_docu_link = false;        }        if ($mode!='query_only') {            // close inner_sql span                $str .= '</span>';        }        if ($mode=='color') {            // close syntax span            $str .= '</span>';        }        return $str;    } // end of the "PMA_SQP_formatHtml()" function}/** * Builds a CSS rule used for html formatted SQL queries * * @param string  The class name * @param string  The property name * @param string  The property value * * @return string  The CSS rule * * @access public * * @see    PMA_SQP_buildCssData() */function PMA_SQP_buildCssRule($classname, $property, $value){    $str     = '.' . $classname . ' {';    if ($value != '') {        $str .= $property . ': ' . $value . ';';    }    $str     .= '}' . "\n";    return $str;} // end of the "PMA_SQP_buildCssRule()" function/** * Builds CSS rules used for html formatted SQL queries * * @return string  The CSS rules set * * @access public * * @global array   The current PMA configuration * * @see    PMA_SQP_buildCssRule() */function PMA_SQP_buildCssData(){    global $cfg;    $css_string     = '';    foreach ($cfg['SQP']['fmtColor'] AS $key => $col) {        $css_string .= PMA_SQP_buildCssRule('syntax_' . $key, 'color', $col);    }    for ($i = 0; $i < 8; $i++) {        $css_string .= PMA_SQP_buildCssRule(            'syntax_indent' . $i, 'margin-left',            ($i * $cfg['SQP']['fmtInd']) . $cfg['SQP']['fmtIndUnit']);    }    return $css_string;} // end of the "PMA_SQP_buildCssData()" functionif (! defined('PMA_MINIMUM_COMMON')) {    /**     * Gets SQL queries with no format     *     * @param array   The SQL queries list     *     * @return string  The SQL queries with no format     *     * @access public     */    function PMA_SQP_formatNone($arr)    {        $formatted_sql = htmlspecialchars($arr['raw']);        $formatted_sql = preg_replace(            "@((\015\012)|(\015)|(\012)){3,}@",            "\n\n",            $formatted_sql);        return $formatted_sql;    } // end of the "PMA_SQP_formatNone()" function} // end if: minimal common.lib needed??>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @todo    we must handle the case if sql.php is called directly with a query *          that returns 0 rows - to prevent cyclic redirects or includes * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/Table.class.php';require_once './libraries/check_user_privileges.lib.php';require_once './libraries/bookmark.lib.php';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'tbl_change.js';// the next one needed because sql.php may do a "goto" to tbl_structure.php$GLOBALS['js_include'][] = 'tbl_structure.js';$GLOBALS['js_include'][] = 'gis_data_editor.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';if (isset($_SESSION['profiling'])) {    $GLOBALS['js_include'][] = 'highcharts/highcharts.js';    /* Files required for chart exporting */    $GLOBALS['js_include'][] = 'highcharts/exporting.js';    /* < IE 9 doesn't support canvas natively */    if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {        $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';    }    $GLOBALS['js_include'][] = 'canvg/canvg.js';}/** * Defines the url to return to in case of error in a sql statement */// Security checkingsif (! empty($goto)) {    $is_gotofile     = preg_replace('@^([^?]+).*$@s', '\\1', $goto);    if (! @file_exists('./' . $is_gotofile)) {        unset($goto);    } else {        $is_gotofile = ($is_gotofile == $goto);    }} else {    $goto = (! strlen($table)) ? $cfg['DefaultTabDatabase'] : $cfg['DefaultTabTable'];    $is_gotofile  = true;} // end ifif (! isset($err_url)) {    $err_url = (! empty($back) ? $back : $goto)             . '?' . PMA_generate_common_url($db)             . ((strpos(' ' . $goto, 'db_') != 1 && strlen($table)) ? '&amp;table=' . urlencode($table) : '');} // end if// Coming from a bookmark dialogif (isset($fields['query'])) {    $sql_query = $fields['query'];}// This one is just to fill $dbif (isset($fields['dbase'])) {    $db = $fields['dbase'];}/** * During grid edit, if we have a relational field, show the dropdown for it * * Logic taken from libraries/display_tbl_lib.php * * This doesn't seem to be the right place to do this, but I can't think of any * better place either. */if (isset($_REQUEST['get_relational_values']) && $_REQUEST['get_relational_values'] == true) {    include_once 'libraries/relation.lib.php';    $column = $_REQUEST['column'];    $foreigners = PMA_getForeigners($db, $table, $column);    $display_field = PMA_getDisplayField($foreigners[$column]['foreign_db'], $foreigners[$column]['foreign_table']);    $foreignData = PMA_getForeignData($foreigners, $column, false, '', '');    if ($_SESSION['tmp_user_values']['relational_display'] == 'D'        && isset($display_field)        && strlen($display_field)        && isset($_REQUEST['relation_key_or_display_column'])        && $_REQUEST['relation_key_or_display_column']    ) {            $curr_value = $_REQUEST['relation_key_or_display_column'];    } else {        $curr_value = $_REQUEST['curr_value'];    }    if ($foreignData['disp_row'] == null) {        //Handle the case when number of values is more than $cfg['ForeignKeyMaxLimit']        $_url_params = array(                'db' => $db,                'table' => $table,                'field' => $column        );        $dropdown = '<span class="curr_value">' . htmlspecialchars($_REQUEST['curr_value']) . '</span> <a href="browse_foreigners.php' . PMA_generate_common_url($_url_params) . '"'                    . ' target="_blank" class="browse_foreign" '                    .'>' . __('Browse foreign values') . '</a>';    } else {        $dropdown = PMA_foreignDropdown($foreignData['disp_row'], $foreignData['foreign_field'], $foreignData['foreign_display'], $curr_value, $cfg['ForeignKeyMaxLimit']);        $dropdown = '<select>' . $dropdown . '</select>';    }    $extra_data['dropdown'] = $dropdown;    PMA_ajaxResponse(null, true, $extra_data);}/** * Just like above, find possible values for enum fields during grid edit. * * Logic taken from libraries/display_tbl_lib.php */if (isset($_REQUEST['get_enum_values']) && $_REQUEST['get_enum_values'] == true) {    $field_info_query = PMA_DBI_get_columns_sql($db, $table, $_REQUEST['column']);    $field_info_result = PMA_DBI_fetch_result($field_info_query, null, null, null, PMA_DBI_QUERY_STORE);    $search = array('enum', '(', ')', "'");    $values = explode(',', str_replace($search, '', $field_info_result[0]['Type']));    $dropdown = '<option value="">&nbsp;</option>';    foreach ($values as $value) {        $dropdown .= '<option value="' . htmlspecialchars($value) . '"';        if ($value == $_REQUEST['curr_value']) {            $dropdown .= ' selected="selected"';        }        $dropdown .= '>' . $value . '</option>';    }    $dropdown = '<select>' . $dropdown . '</select>';    $extra_data['dropdown'] = $dropdown;    PMA_ajaxResponse(null, true, $extra_data);}/** * Find possible values for set fields during grid edit. */if (isset($_REQUEST['get_set_values']) && $_REQUEST['get_set_values'] == true) {    $field_info_query = PMA_DBI_get_columns_sql($db, $table, $_REQUEST['column']);    $field_info_result = PMA_DBI_fetch_result($field_info_query, null, null, null, PMA_DBI_QUERY_STORE);    $selected_values = explode(',', $_REQUEST['curr_value']);    $search = array('set', '(', ')', "'");    $values = explode(',', str_replace($search, '', $field_info_result[0]['Type']));    $select = '';    foreach ($values as $value) {        $select .= '<option value="' . htmlspecialchars($value) . '"';        if (in_array($value, $selected_values, true)) {            $select .= ' selected="selected"';        }        $select .= '>' . $value . '</option>';    }    $select_size = (sizeof($values) > 10) ? 10 : sizeof($values);    $select = '<select multiple="multiple" size="' . $select_size . '">' . $select . '</select>';    $extra_data['select'] = $select;    PMA_ajaxResponse(null, true, $extra_data);}/** * Check ajax request to set the column order */if (isset($_REQUEST['set_col_prefs']) && $_REQUEST['set_col_prefs'] == true) {    $pmatable = new PMA_Table($table, $db);    $retval = false;    // set column order    if (isset($_REQUEST['col_order'])) {        $col_order = explode(',', $_REQUEST['col_order']);        $retval = $pmatable->setUiProp(PMA_Table::PROP_COLUMN_ORDER, $col_order, $_REQUEST['table_create_time']);        if (gettype($retval) != 'boolean') {            PMA_ajaxResponse($retval->getString(), false);        }    }    // set column visibility    if ($retval === true && isset($_REQUEST['col_visib'])) {        $col_visib = explode(',', $_REQUEST['col_visib']);        $retval = $pmatable->setUiProp(PMA_Table::PROP_COLUMN_VISIB, $col_visib, $_REQUEST['table_create_time']);        if (gettype($retval) != 'boolean') {            PMA_ajaxResponse($retval->getString(), false);        }    }    PMA_ajaxResponse(null, ($retval == true));}// Default to browse if no query set and we have table// (needed for browsing from DefaultTabTable)if (empty($sql_query) && strlen($table) && strlen($db)) {    include_once './libraries/bookmark.lib.php';    $book_sql_query = PMA_Bookmark_get(        $db,        '\'' . PMA_sqlAddSlashes($table) . '\'',        'label',        false,        true    );    if (! empty($book_sql_query)) {        $GLOBALS['using_bookmark_message'] = PMA_message::notice(__('Using bookmark "%s" as default browse query.'));        $GLOBALS['using_bookmark_message']->addParam($table);        $GLOBALS['using_bookmark_message']->addMessage(PMA_showDocu('faq6_22'));        $sql_query = $book_sql_query;    } else {        $sql_query = 'SELECT * FROM ' . PMA_backquote($table);    }    unset($book_sql_query);    // set $goto to what will be displayed if query returns 0 rows    $goto = 'tbl_structure.php';} else {    // Now we can check the parameters    PMA_checkParameters(array('sql_query'));}// instead of doing the test twice$is_drop_database = preg_match(    '/DROP[[:space:]]+(DATABASE|SCHEMA)[[:space:]]+/i',    $sql_query);/** * Check rights in case of DROP DATABASE * * This test may be bypassed if $is_js_confirmed = 1 (already checked with js) * but since a malicious user may pass this variable by url/form, we don't take * into account this case. */if (! defined('PMA_CHK_DROP')    && ! $cfg['AllowUserDropDatabase']    && $is_drop_database    && ! $is_superuser) {    include_once './libraries/header.inc.php';    PMA_mysqlDie(__('"DROP DATABASE" statements are disabled.'), '', '', $err_url);} // end ifrequire_once './libraries/display_tbl.lib.php';PMA_displayTable_checkConfigParams();/** * Need to find the real end of rows? */if (isset($find_real_end) && $find_real_end) {    $unlim_num_rows = PMA_Table::countRecords($db, $table, $force_exact = true);    $_SESSION['tmp_user_values']['pos'] = @((ceil($unlim_num_rows / $_SESSION['tmp_user_values']['max_rows']) - 1) * $_SESSION['tmp_user_values']['max_rows']);}/** * Bookmark add */if (isset($store_bkm)) {    PMA_Bookmark_save($fields, (isset($bkm_all_users) && $bkm_all_users == 'true' ? true : false));    // go back to sql.php to redisplay query; do not use &amp; in this case:    PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . $goto . '&label=' . $fields['label']);} // end if/** * Parse and analyze the query */require_once './libraries/parse_analyze.lib.php';/** * Sets or modifies the $goto variable if required */if ($goto == 'sql.php') {    $is_gotofile = false;    $goto = 'sql.php?'          . PMA_generate_common_url($db, $table)          . '&amp;sql_query=' . urlencode($sql_query);} // end if/** * Go back to further page if table should not be dropped */if (isset($btnDrop) && $btnDrop == __('No')) {    if (! empty($back)) {        $goto = $back;    }    if ($is_gotofile) {        if (strpos($goto, 'db_') === 0 && strlen($table)) {            $table = '';        }        $active_page = $goto;        include './' . PMA_securePath($goto);    } else {        PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . str_replace('&amp;', '&', $goto));    }    exit();} // end if/** * Displays the confirm page if required * * This part of the script is bypassed if $is_js_confirmed = 1 (already checked * with js) because possible security issue is not so important here: at most, * the confirm message isn't displayed. * * Also bypassed if only showing php code.or validating a SQL query */if (! $cfg['Confirm']    || isset($_REQUEST['is_js_confirmed'])    || isset($btnDrop)    // if we are coming from a "Create PHP code" or a "Without PHP Code"    // dialog, we won't execute the query anyway, so don't confirm    || isset($GLOBALS['show_as_php'])    || ! empty($GLOBALS['validatequery'])) {    $do_confirm = false;} else {    $do_confirm = isset($analyzed_sql[0]['queryflags']['need_confirm']);}if ($do_confirm) {    $stripped_sql_query = $sql_query;    include_once './libraries/header.inc.php';    if ($is_drop_database) {        echo '<h1 class="error">' . __('You are about to DESTROY a complete database!') . '</h1>';    }    echo '<form action="sql.php" method="post">' . "\n"        .PMA_generate_common_hidden_inputs($db, $table);    ?>    <input type="hidden" name="sql_query" value="<?php echo htmlspecialchars($sql_query); ?>" />    <input type="hidden" name="message_to_show" value="<?php echo isset($message_to_show) ? PMA_sanitize($message_to_show, true) : ''; ?>" />    <input type="hidden" name="goto" value="<?php echo $goto; ?>" />    <input type="hidden" name="back" value="<?php echo isset($back) ? PMA_sanitize($back, true) : ''; ?>" />    <input type="hidden" name="reload" value="<?php echo isset($reload) ? PMA_sanitize($reload, true) : 0; ?>" />    <input type="hidden" name="purge" value="<?php echo isset($purge) ? PMA_sanitize($purge, true) : ''; ?>" />    <input type="hidden" name="dropped_column" value="<?php echo isset($dropped_column) ? PMA_sanitize($dropped_column, true) : ''; ?>" />    <input type="hidden" name="show_query" value="<?php echo isset($show_query) ? PMA_sanitize($show_query, true) : ''; ?>" />    <?php    echo '<fieldset class="confirmation">' . "\n"        .'    <legend>' . __('Do you really want to ') . '</legend>'        .'    <tt>' . htmlspecialchars($stripped_sql_query) . '</tt>' . "\n"        .'</fieldset>' . "\n"        .'<fieldset class="tblFooters">' . "\n";    ?>    <input type="submit" name="btnDrop" value="<?php echo __('Yes'); ?>" id="buttonYes" />    <input type="submit" name="btnDrop" value="<?php echo __('No'); ?>" id="buttonNo" />    <?php    echo '</fieldset>' . "\n"       . '</form>' . "\n";    /**     * Displays the footer and exit     */    include './libraries/footer.inc.php';} // end if $do_confirm// Defines some variables// A table has to be created, renamed, dropped -> navi frame should be reloaded/** * @todo use the parser/analyzer */if (empty($reload)    && preg_match('/^(CREATE|ALTER|DROP)\s+(VIEW|TABLE|DATABASE|SCHEMA)\s+/i', $sql_query)) {    $reload = 1;}// SK -- Patch: $is_group added for use in calculation of total number of//              rows.//              $is_count is changed for more correct "LIMIT" clause//              appending in queries like//                "SELECT COUNT(...) FROM ... GROUP BY ..."/** * @todo detect all this with the parser, to avoid problems finding * those strings in comments or backquoted identifiers */$is_explain = $is_count = $is_export = $is_delete = $is_insert = $is_affected = $is_show = $is_maint = $is_analyse = $is_group = $is_func = $is_replace = false;if ($is_select) { // see line 141    $is_group = preg_match('@(GROUP[[:space:]]+BY|HAVING|SELECT[[:space:]]+DISTINCT)[[:space:]]+@i', $sql_query);    $is_func =  ! $is_group && (preg_match('@[[:space:]]+(SUM|AVG|STD|STDDEV|MIN|MAX|BIT_OR|BIT_AND)\s*\(@i', $sql_query));    $is_count = ! $is_group && (preg_match('@^SELECT[[:space:]]+COUNT\((.*\.+)?.*\)@i', $sql_query));    $is_export   = (preg_match('@[[:space:]]+INTO[[:space:]]+OUTFILE[[:space:]]+@i', $sql_query));    $is_analyse  = (preg_match('@[[:space:]]+PROCEDURE[[:space:]]+ANALYSE@i', $sql_query));} elseif (preg_match('@^EXPLAIN[[:space:]]+@i', $sql_query)) {    $is_explain  = true;} elseif (preg_match('@^DELETE[[:space:]]+@i', $sql_query)) {    $is_delete   = true;    $is_affected = true;} elseif (preg_match('@^(INSERT|LOAD[[:space:]]+DATA|REPLACE)[[:space:]]+@i', $sql_query)) {    $is_insert   = true;    $is_affected = true;    if (preg_match('@^(REPLACE)[[:space:]]+@i', $sql_query)) {        $is_replace = true;    }} elseif (preg_match('@^UPDATE[[:space:]]+@i', $sql_query)) {    $is_affected = true;} elseif (preg_match('@^[[:space:]]*SHOW[[:space:]]+@i', $sql_query)) {    $is_show     = true;} elseif (preg_match('@^(CHECK|ANALYZE|REPAIR|OPTIMIZE)[[:space:]]+TABLE[[:space:]]+@i', $sql_query)) {    $is_maint    = true;}// assign default full_sql_query$full_sql_query = $sql_query;// Handle remembered sorting order, only for single table queryif ($GLOBALS['cfg']['RememberSorting']    && ! ($is_count || $is_export || $is_func || $is_analyse)    && count($analyzed_sql[0]['select_expr']) == 0    && isset($analyzed_sql[0]['queryflags']['select_from'])    && count($analyzed_sql[0]['table_ref']) == 1) {    $pmatable = new PMA_Table($table, $db);    if (empty($analyzed_sql[0]['order_by_clause'])) {        $sorted_col = $pmatable->getUiProp(PMA_Table::PROP_SORTED_COLUMN);        if ($sorted_col) {            // retrieve the remembered sorting order for current table            $sql_order_to_append = ' ORDER BY ' . $sorted_col . ' ';            $full_sql_query = $analyzed_sql[0]['section_before_limit'] . $sql_order_to_append                . $analyzed_sql[0]['section_after_limit'];            // update the $analyzed_sql            $analyzed_sql[0]['section_before_limit'] .= $sql_order_to_append;            $analyzed_sql[0]['order_by_clause'] = $sorted_col;        }    } else {        // store the remembered table into session        $pmatable->setUiProp(PMA_Table::PROP_SORTED_COLUMN, $analyzed_sql[0]['order_by_clause']);    }}// Do append a "LIMIT" clause?if (($_SESSION['tmp_user_values']['max_rows'] != 'all')    && ! ($is_count || $is_export || $is_func || $is_analyse)    && isset($analyzed_sql[0]['queryflags']['select_from'])    && ! isset($analyzed_sql[0]['queryflags']['offset'])    && empty($analyzed_sql[0]['limit_clause'])) {    $sql_limit_to_append = ' LIMIT ' . $_SESSION['tmp_user_values']['pos']        . ', ' . $_SESSION['tmp_user_values']['max_rows'] . " ";    $full_sql_query  = $analyzed_sql[0]['section_before_limit'] . "\n"        . $sql_limit_to_append . $analyzed_sql[0]['section_after_limit'];    /**     * @todo pretty printing of this modified query     */    if (isset($display_query)) {        // if the analysis of the original query revealed that we found        // a section_after_limit, we now have to analyze $display_query        // to display it correctly        if (! empty($analyzed_sql[0]['section_after_limit'])            && trim($analyzed_sql[0]['section_after_limit']) != ';'        ) {            $analyzed_display_query = PMA_SQP_analyze(PMA_SQP_parse($display_query));            $display_query  = $analyzed_display_query[0]['section_before_limit']                . "\n" . $sql_limit_to_append . $analyzed_display_query[0]['section_after_limit'];        }    }}if (strlen($db)) {    PMA_DBI_select_db($db);}//  E x e c u t e    t h e    q u e r y// Only if we didn't ask to see the php code (mikebeck)if (isset($GLOBALS['show_as_php']) || ! empty($GLOBALS['validatequery'])) {    unset($result);    $num_rows = 0;    $unlim_num_rows = 0;} else {    if (isset($_SESSION['profiling']) && PMA_profilingSupported()) {        PMA_DBI_query('SET PROFILING=1;');    }    // Measure query time.    $querytime_before = array_sum(explode(' ', microtime()));    $result   = @PMA_DBI_try_query($full_sql_query, null, PMA_DBI_QUERY_STORE);    // If a stored procedure was called, there may be more results that are    // queued up and waiting to be flushed from the buffer. So let's do that.    while (true) {        if (! PMA_DBI_more_results()) {            break;        }        PMA_DBI_next_result();    }    $querytime_after = array_sum(explode(' ', microtime()));    $GLOBALS['querytime'] = $querytime_after - $querytime_before;    // Displays an error message if required and stop parsing the script    if ($error        = PMA_DBI_getError()) {        if ($is_gotofile) {            if (strpos($goto, 'db_') === 0 && strlen($table)) {                $table = '';            }            $active_page = $goto;            $message = PMA_Message::rawError($error);            if ($GLOBALS['is_ajax_request'] == true) {                PMA_ajaxResponse($message, false);            }            /**             * Go to target path.             */            include './' . PMA_securePath($goto);        } else {            $full_err_url = (preg_match('@^(db|tbl)_@', $err_url))                          ? $err_url . '&amp;show_query=1&amp;sql_query=' . urlencode($sql_query)                          : $err_url;            PMA_mysqlDie($error, $full_sql_query, '', $full_err_url);        }        exit;    }    unset($error);    // Gets the number of rows affected/returned    // (This must be done immediately after the query because    // mysql_affected_rows() reports about the last query done)    if (! $is_affected) {        $num_rows = ($result) ? @PMA_DBI_num_rows($result) : 0;    } elseif (! isset($num_rows)) {        $num_rows = @PMA_DBI_affected_rows();    }    // Grabs the profiling results    if (isset($_SESSION['profiling']) && PMA_profilingSupported()) {        $profiling_results = PMA_DBI_fetch_result('SHOW PROFILE;');    }    // Checks if the current database has changed    // This could happen if the user sends a query like "USE `database`;"    /**     * commented out auto-switching to active database - really required?     * bug #1814718 win: table list disappears (mixed case db names)     * https://sourceforge.net/support/tracker.php?aid=1814718     * @todo RELEASE test and comit or rollback before release    $current_db = PMA_DBI_fetch_value('SELECT DATABASE()');    if ($db !== $current_db) {        $db     = $current_db;        $reload = 1;    }    unset($current_db);     */    // tmpfile remove after convert encoding appended by Y.Kawada    if (function_exists('PMA_kanji_file_conv')        && (isset($textfile) && file_exists($textfile))    ) {        unlink($textfile);    }    // Counts the total number of rows for the same 'SELECT' query without the    // 'LIMIT' clause that may have been programatically added    if (empty($sql_limit_to_append)) {        $unlim_num_rows         = $num_rows;        // if we did not append a limit, set this to get a correct        // "Showing rows..." message        //$_SESSION['tmp_user_values']['max_rows'] = 'all';    } elseif ($is_select) {        //    c o u n t    q u e r y        // If we are "just browsing", there is only one table,        // and no WHERE clause (or just 'WHERE 1 '),        // we do a quick count (which uses MaxExactCount) because        // SQL_CALC_FOUND_ROWS is not quick on large InnoDB tables        // However, do not count again if we did it previously        // due to $find_real_end == true        if (! $is_group            && ! isset($analyzed_sql[0]['queryflags']['union'])            && ! isset($analyzed_sql[0]['queryflags']['distinct'])            && ! isset($analyzed_sql[0]['table_ref'][1]['table_name'])            && (empty($analyzed_sql[0]['where_clause']) || $analyzed_sql[0]['where_clause'] == '1 ')            && ! isset($find_real_end)        ) {            // "j u s t   b r o w s i n g"            $unlim_num_rows = PMA_Table::countRecords($db, $table);        } else { // n o t   " j u s t   b r o w s i n g "            // add select expression after the SQL_CALC_FOUND_ROWS            // for UNION, just adding SQL_CALC_FOUND_ROWS            // after the first SELECT works.            // take the left part, could be:            // SELECT            // (SELECT            $count_query = PMA_SQP_formatHtml($parsed_sql, 'query_only', 0, $analyzed_sql[0]['position_of_first_select'] + 1);            $count_query .= ' SQL_CALC_FOUND_ROWS ';            // add everything that was after the first SELECT            $count_query .= PMA_SQP_formatHtml($parsed_sql, 'query_only', $analyzed_sql[0]['position_of_first_select'] + 1);            // ensure there is no semicolon at the end of the            // count query because we'll probably add            // a LIMIT 1 clause after it            $count_query = rtrim($count_query);            $count_query = rtrim($count_query, ';');            // if using SQL_CALC_FOUND_ROWS, add a LIMIT to avoid            // long delays. Returned count will be complete anyway.            // (but a LIMIT would disrupt results in an UNION)            if (! isset($analyzed_sql[0]['queryflags']['union'])) {                $count_query .= ' LIMIT 1';            }            // run the count query            PMA_DBI_try_query($count_query);            // if (mysql_error()) {            // void.            // I tried the case            // (SELECT `User`, `Host`, `Db`, `Select_priv` FROM `db`)            // UNION (SELECT `User`, `Host`, "%" AS "Db",            // `Select_priv`            // FROM `user`) ORDER BY `User`, `Host`, `Db`;            // and although the generated count_query is wrong            // the SELECT FOUND_ROWS() work! (maybe it gets the            // count from the latest query that worked)            //            // another case where the count_query is wrong:            // SELECT COUNT(*), f1 from t1 group by f1            // and you click to sort on count(*)            // }            $unlim_num_rows = PMA_DBI_fetch_value('SELECT FOUND_ROWS()');        } // end else "just browsing"    } else { // not $is_select         $unlim_num_rows         = 0;    } // end rows total count    // if a table or database gets dropped, check column comments.    if (isset($purge) && $purge == '1') {        /**         * Cleanup relations.         */        include_once './libraries/relation_cleanup.lib.php';        if (strlen($table) && strlen($db)) {            PMA_relationsCleanupTable($db, $table);        } elseif (strlen($db)) {            PMA_relationsCleanupDatabase($db);        } else {            // VOID. No DB/Table gets deleted.        } // end if relation-stuff    } // end if ($purge)    // If a column gets dropped, do relation magic.    if (isset($dropped_column) && strlen($db) && strlen($table) && ! empty($dropped_column)) {        include_once './libraries/relation_cleanup.lib.php';        PMA_relationsCleanupColumn($db, $table, $dropped_column);        // to refresh the list of indexes (Ajax mode)        $extra_data['indexes_list'] = PMA_Index::getView($table, $db);    } // end if column was dropped} // end else "didn't ask to see php code"// No rows returned -> move back to the calling pageif ((0 == $num_rows && 0 == $unlim_num_rows) || $is_affected) {    if ($is_delete) {        $message = PMA_Message::deleted_rows($num_rows);    } elseif ($is_insert) {        if ($is_replace) {            /* For replace we get DELETED + INSERTED row count, so we have to call it affected */            $message = PMA_Message::affected_rows($num_rows);        } else {            $message = PMA_Message::inserted_rows($num_rows);        }        $insert_id = PMA_DBI_insert_id();        if ($insert_id != 0) {            // insert_id is id of FIRST record inserted in one insert, so if we inserted multiple rows, we had to increment this            $message->addMessage('[br]');            // need to use a temporary because the Message class            // currently supports adding parameters only to the first            // message            $_inserted = PMA_Message::notice(__('Inserted row id: %1$d'));            $_inserted->addParam($insert_id + $num_rows - 1);            $message->addMessage($_inserted);        }    } elseif ($is_affected) {        $message = PMA_Message::affected_rows($num_rows);        // Ok, here is an explanation for the !$is_select.        // The form generated by sql_query_form.lib.php        // and db_sql.php has many submit buttons        // on the same form, and some confusion arises from the        // fact that $message_to_show is sent for every case.        // The $message_to_show containing a success message and sent with        // the form should not have priority over errors    } elseif (! empty($message_to_show) && ! $is_select) {        $message = PMA_Message::rawSuccess(htmlspecialchars($message_to_show));    } elseif (! empty($GLOBALS['show_as_php'])) {        $message = PMA_Message::success(__('Showing as PHP code'));    } elseif (isset($GLOBALS['show_as_php'])) {        /* User disable showing as PHP, query is only displayed */        $message = PMA_Message::notice(__('Showing SQL query'));    } elseif (! empty($GLOBALS['validatequery'])) {        $message = PMA_Message::notice(__('Validated SQL'));    } else {        $message = PMA_Message::success(__('MySQL returned an empty result set (i.e. zero rows).'));    }    if (isset($GLOBALS['querytime'])) {        $_querytime = PMA_Message::notice(__('Query took %01.4f sec'));        $_querytime->addParam($GLOBALS['querytime']);        $message->addMessage('(');        $message->addMessage($_querytime);        $message->addMessage(')');    }    if ($GLOBALS['is_ajax_request'] == true) {        if ($cfg['ShowSQL']) {            $extra_data['sql_query'] = PMA_showMessage($message, $GLOBALS['sql_query'], 'success');        }        if (isset($GLOBALS['reload']) && $GLOBALS['reload'] == 1) {            $extra_data['reload'] = 1;            $extra_data['db'] = $GLOBALS['db'];        }        PMA_ajaxResponse($message, $message->isSuccess(), (isset($extra_data) ? $extra_data : ''));    }    if ($is_gotofile) {        $goto = PMA_securePath($goto);        // Checks for a valid target script        $is_db = $is_table = false;        if (isset($_REQUEST['purge']) && $_REQUEST['purge'] == '1') {            $table = '';            unset($url_params['table']);        }        include 'libraries/db_table_exists.lib.php';        if (strpos($goto, 'tbl_') === 0 && ! $is_table) {            if (strlen($table)) {                $table = '';            }            $goto = 'db_sql.php';        }        if (strpos($goto, 'db_') === 0 && ! $is_db) {            if (strlen($db)) {                $db = '';            }            $goto = 'main.php';        }        // Loads to target script        if ($goto != 'main.php') {            include_once './libraries/header.inc.php';        }        $active_page = $goto;        include './' . $goto;    } else {        // avoid a redirect loop when last record was deleted        if (0 == $num_rows && 'sql.php' == $cfg['DefaultTabTable']) {            $goto = str_replace('sql.php', 'tbl_structure.php', $goto);        }        PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . str_replace('&amp;', '&', $goto) . '&message=' . urlencode($message));    } // end else    exit();// end no rows returned} else {    // At least one row is returned -> displays a table with results    //If we are retrieving the full value of a truncated field or the original    // value of a transformed field, show it here and exit    if ($GLOBALS['grid_edit'] == true && $GLOBALS['cfg']['AjaxEnable']) {        $row = PMA_DBI_fetch_row($result);        $extra_data = array();        $extra_data['value'] = $row[0];        PMA_ajaxResponse(null, true, $extra_data);    }    if (isset($_REQUEST['ajax_request']) && isset($_REQUEST['table_maintenance'])) {        $GLOBALS['js_include'][] = 'functions.js';        $GLOBALS['js_include'][] = 'makegrid.js';        $GLOBALS['js_include'][] = 'sql.js';        // Gets the list of fields properties        if (isset($result) && $result) {            $fields_meta = PMA_DBI_get_fields_meta($result);            $fields_cnt  = count($fields_meta);        }        if (empty($disp_mode)) {            // see the "PMA_setDisplayMode()" function in            // libraries/display_tbl.lib.php            $disp_mode = 'urdr111101';        }        // hide edit and delete links for information_schema        if (PMA_is_system_schema($db)) {            $disp_mode = 'nnnn110111';        }        $message = PMA_Message::success($message);        echo PMA_showMessage($message, $GLOBALS['sql_query'], 'success');        PMA_displayTable($result, $disp_mode, $analyzed_sql);        exit();    }    // Displays the headers    if (isset($show_query)) {        unset($show_query);    }    if (isset($printview) && $printview == '1') {        include_once './libraries/header_printview.inc.php';    } else {        $GLOBALS['js_include'][] = 'functions.js';        $GLOBALS['js_include'][] = 'makegrid.js';        $GLOBALS['js_include'][] = 'sql.js';        unset($message);        if (! $GLOBALS['is_ajax_request'] || ! $GLOBALS['cfg']['AjaxEnable']) {            if (strlen($table)) {                include './libraries/tbl_common.php';                $url_query .= '&amp;goto=tbl_sql.php&amp;back=tbl_sql.php';                include './libraries/tbl_info.inc.php';                include './libraries/tbl_links.inc.php';            } elseif (strlen($db)) {                include './libraries/db_common.inc.php';                include './libraries/db_info.inc.php';            } else {                include './libraries/server_common.inc.php';                include './libraries/server_links.inc.php';            }        } else {            include_once './libraries/header.inc.php';            //we don't need to buffer the output in PMA_showMessage here.            //set a global variable and check against it in the function            $GLOBALS['buffer_message'] = false;        }    }    if (strlen($db)) {        $cfgRelation = PMA_getRelationsParam();    }    // Gets the list of fields properties    if (isset($result) && $result) {        $fields_meta = PMA_DBI_get_fields_meta($result);        $fields_cnt  = count($fields_meta);    }    if (! $GLOBALS['is_ajax_request']) {        //begin the sqlqueryresults div here. container div        echo '<div id="sqlqueryresults"';        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax"';        }        echo '>';    }    // Display previous update query (from tbl_replace)    if (isset($disp_query) && $cfg['ShowSQL'] == true) {        PMA_showMessage($disp_message, $disp_query, 'success');    }    if (isset($profiling_results)) {        // pma_token/url_query needed for chart export?><script type="text/javascript">pma_token = '<?php echo $_SESSION[' PMA_token ']; ?>';url_query = '<?php echo isset($url_query)?$url_query:PMA_generate_common_url($db);?>';$(document).ready(makeProfilingChart);</script><?php        echo '<fieldset><legend>' . __('Profiling') . '</legend>' . "\n";        echo '<div style="float: left;">';        echo '<table>' . "\n";        echo ' <tr>' .  "\n";        echo '  <th>' . __('Status') . PMA_showMySQLDocu('general-thread-states', 'general-thread-states') .  '</th>' . "\n";        echo '  <th>' . __('Time') . '</th>' . "\n";        echo ' </tr>' .  "\n";        $chart_json = Array();        foreach ($profiling_results as $one_result) {            echo ' <tr>' .  "\n";            echo '<td>' . ucwords($one_result['Status']) . '</td>' .  "\n";            echo '<td align="right">' . (PMA_formatNumber($one_result['Duration'], 3, 1)) . 's</td>' .  "\n";            $chart_json[ucwords($one_result['Status'])] = $one_result['Duration'];        }        echo '</table>' . "\n";        echo '</div>';        //require_once './libraries/chart.lib.php';        echo '<div id="profilingchart" style="display:none;">';        //PMA_chart_profiling($profiling_results);        echo json_encode($chart_json);        echo '</div>';        echo '</fieldset>' . "\n";    }    // Displays the results in a table    if (empty($disp_mode)) {        // see the "PMA_setDisplayMode()" function in        // libraries/display_tbl.lib.php        $disp_mode = 'urdr111101';    }    // hide edit and delete links for information_schema    if (PMA_is_system_schema($db)) {        $disp_mode = 'nnnn110111';    }    if (isset($label)) {        $message = PMA_message::success(__('Bookmark %s created'));        $message->addParam($label);        $message->display();    }    PMA_displayTable($result, $disp_mode, $analyzed_sql);    PMA_DBI_free_result($result);    // BEGIN INDEX CHECK See if indexes should be checked.    if (isset($query_type) && $query_type == 'check_tbl' && isset($selected) && is_array($selected)) {        foreach ($selected as $idx => $tbl_name) {            $check = PMA_Index::findDuplicates($tbl_name, $db);            if (! empty($check)) {                printf(__('Problems with indexes of table `%s`'), $tbl_name);                echo $check;            }        }    } // End INDEX CHECK    // Bookmark support if required    if ($disp_mode[7] == '1'        && (! empty($cfg['Bookmark']) && empty($id_bookmark))        && ! empty($sql_query)    ) {        echo "\n";        $goto = 'sql.php?'              . PMA_generate_common_url($db, $table)              . '&amp;sql_query=' . urlencode($sql_query)              . '&amp;id_bookmark=1';        ?><form action="sql.php" method="post" onsubmit="return emptyFormElements(this, 'fields[label]');"><?php echo PMA_generate_common_hidden_inputs(); ?><input type="hidden" name="goto" value="<?php echo $goto; ?>" /><input type="hidden" name="fields[dbase]" value="<?php echo htmlspecialchars($db); ?>" /><input type="hidden" name="fields[user]" value="<?php echo $cfg['Bookmark']['user']; ?>" /><input type="hidden" name="fields[query]" value="<?php echo urlencode(isset($complete_query) ? $complete_query : $sql_query); ?>" /><fieldset>    <legend><?php    echo PMA_getIcon('b_bookmark.png', __('Bookmark this SQL query'), true);?>    </legend>    <div class="formelement">        <label for="fields_label_"><?php echo __('Label'); ?>:</label>        <input type="text" id="fields_label_" name="fields[label]" value="" />    </div>    <div class="formelement">        <input type="checkbox" name="bkm_all_users" id="bkm_all_users" value="true" />        <label for="bkm_all_users"><?php echo __('Let every user access this bookmark'); ?></label>    </div>    <div class="clearfloat"></div></fieldset><fieldset class="tblFooters">    <input type="submit" name="store_bkm" value="<?php echo __('Bookmark this SQL query'); ?>" /></fieldset></form>        <?php    } // end bookmark support    // Do print the page if required    if (isset($printview) && $printview == '1') {        PMA_printButton();    } // end print case    if ($GLOBALS['is_ajax_request'] != true) {        echo '</div>'; // end sqlqueryresults div    }} // end rows returned/** * Displays the footer */if (! isset($_REQUEST['table_maintenance'])) {    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'import.js';/** * Gets tables informations and displays top links */require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_import.php&amp;back=tbl_import.php';require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';$import_type = 'table';require_once './libraries/display_import.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays status variables with descriptions and some hints an optmizing *  + reset status variables * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    $GLOBALS['is_header_sent'] = true;}require_once './libraries/common.inc.php';/** * Ajax request */if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    // Send with correct charset    header('Content-Type: text/html; charset=UTF-8');    // real-time charting data    if (isset($_REQUEST['chart_data'])) {        switch($_REQUEST['type']) {        // Process and Connections realtime chart        case 'proc':            $c = PMA_DBI_fetch_result("SHOW GLOBAL STATUS WHERE Variable_name = 'Connections'", 0, 1);            $result = PMA_DBI_query('SHOW PROCESSLIST');            $num_procs = PMA_DBI_num_rows($result);            $ret = array(                'x'      => microtime(true) * 1000,                'y_proc' => $num_procs,                'y_conn' => $c['Connections']            );            exit(json_encode($ret));        // Query realtime chart        case 'queries':            if (PMA_DRIZZLE) {                $sql = "SELECT concat('Com_', variable_name), variable_value                    FROM data_dictionary.GLOBAL_STATEMENTS                    WHERE variable_value > 0                      UNION                    SELECT variable_name, variable_value                    FROM data_dictionary.GLOBAL_STATUS                    WHERE variable_name = 'Questions'";                $queries = PMA_DBI_fetch_result($sql, 0, 1);            } else {                $queries = PMA_DBI_fetch_result(                    "SHOW GLOBAL STATUS                    WHERE (Variable_name LIKE 'Com_%' OR Variable_name = 'Questions')                        AND Value > 0", 0, 1                );            }            cleanDeprecated($queries);            // admin commands are not queries            unset($queries['Com_admin_commands']);            $questions = $queries['Questions'];            unset($queries['Questions']);            //$sum=array_sum($queries);            $ret = array(                'x'         => microtime(true) * 1000,                'y'         => $questions,                'pointInfo' => $queries            );            exit(json_encode($ret));        // Traffic realtime chart        case 'traffic':            $traffic = PMA_DBI_fetch_result(                "SHOW GLOBAL STATUS                WHERE Variable_name = 'Bytes_received'                    OR Variable_name = 'Bytes_sent'", 0, 1            );            $ret = array(                'x'          => microtime(true) * 1000,                'y_sent'     => $traffic['Bytes_sent'],                'y_received' => $traffic['Bytes_received']            );            exit(json_encode($ret));        // Data for the monitor        case 'chartgrid':            $ret = json_decode($_REQUEST['requiredData'], true);            $statusVars = array();            $serverVars = array();            $sysinfo = $cpuload = $memory = 0;            $pName = '';            /* Accumulate all required variables and data */            // For each chart            foreach ($ret as $chart_id => $chartNodes) {                // For each data series                foreach ($chartNodes as $node_id => $nodeDataPoints) {                    // For each data point in the series (usually just 1)                    foreach ($nodeDataPoints as $point_id => $dataPoint) {                        $pName = $dataPoint['name'];                        switch ($dataPoint['type']) {                        /* We only collect the status and server variables here to                         * read them all in one query, and only afterwards assign them.                         * Also do some white list filtering on the names                        */                        case 'servervar':                            if (!preg_match('/[^a-zA-Z_]+/', $pName)) {                                $serverVars[] = $pName;                            }                            break;                        case 'statusvar':                            if (!preg_match('/[^a-zA-Z_]+/', $pName)) {                                $statusVars[] = $pName;                            }                            break;                        case 'proc':                            $result = PMA_DBI_query('SHOW PROCESSLIST');                            $ret[$chart_id][$node_id][$point_id]['value'] = PMA_DBI_num_rows($result);                            break;                        case 'cpu':                            if (!$sysinfo) {                                include_once 'libraries/sysinfo.lib.php';                                $sysinfo = getSysInfo();                            }                            if (!$cpuload) {                                $cpuload = $sysinfo->loadavg();                            }                            if (PHP_OS == 'Linux') {                                $ret[$chart_id][$node_id][$point_id]['idle'] = $cpuload['idle'];                                $ret[$chart_id][$node_id][$point_id]['busy'] = $cpuload['busy'];                            } else                                $ret[$chart_id][$node_id][$point_id]['value'] = $cpuload['loadavg'];                            break;                        case 'memory':                            if (!$sysinfo) {                                include_once 'libraries/sysinfo.lib.php';                                $sysinfo = getSysInfo();                            }                            if (!$memory) {                                $memory  = $sysinfo->memory();                            }                            $ret[$chart_id][$node_id][$point_id]['value'] = $memory[$pName];                            break;                        } /* switch */                    } /* foreach */                } /* foreach */            } /* foreach */            // Retrieve all required status variables            if (count($statusVars)) {                $statusVarValues = PMA_DBI_fetch_result(                    "SHOW GLOBAL STATUS                    WHERE Variable_name='" . implode("' OR Variable_name='", $statusVars) . "'", 0, 1                );            } else {                $statusVarValues = array();            }            // Retrieve all required server variables            if (count($serverVars)) {                $serverVarValues = PMA_DBI_fetch_result(                    "SHOW GLOBAL VARIABLES                    WHERE Variable_name='" . implode("' OR Variable_name='", $serverVars) . "'", 0, 1                );            } else {                $serverVarValues = array();            }            // ...and now assign them            foreach ($ret as $chart_id => $chartNodes) {                foreach ($chartNodes as $node_id => $nodeDataPoints) {                    foreach ($nodeDataPoints as $point_id => $dataPoint) {                        switch($dataPoint['type']) {                        case 'statusvar':                            $ret[$chart_id][$node_id][$point_id]['value'] = $statusVarValues[$dataPoint['name']];                            break;                        case 'servervar':                            $ret[$chart_id][$node_id][$point_id]['value'] = $serverVarValues[$dataPoint['name']];                            break;                        }                    }                }            }            $ret['x'] = microtime(true) * 1000;            exit(json_encode($ret));        }    }    if (isset($_REQUEST['log_data'])) {        if (PMA_MYSQL_INT_VERSION < 50106) {            /* FIXME: why this? */            exit('""');        }        $start = intval($_REQUEST['time_start']);        $end = intval($_REQUEST['time_end']);        if ($_REQUEST['type'] == 'slow') {            $q = 'SELECT start_time, user_host, Sec_to_Time(Sum(Time_to_Sec(query_time))) as query_time, Sec_to_Time(Sum(Time_to_Sec(lock_time))) as lock_time, '.                 'SUM(rows_sent) AS rows_sent, SUM(rows_examined) AS rows_examined, db, sql_text, COUNT(sql_text) AS \'#\' '.                 'FROM `mysql`.`slow_log` WHERE start_time > FROM_UNIXTIME(' . $start . ') '.                 'AND start_time < FROM_UNIXTIME(' . $end . ') GROUP BY sql_text';            $result = PMA_DBI_try_query($q);            $return = array('rows' => array(), 'sum' => array());            $type = '';            while ($row = PMA_DBI_fetch_assoc($result)) {                $type = strtolower(substr($row['sql_text'], 0, strpos($row['sql_text'], ' ')));                switch($type) {                case 'insert':                case 'update':                    // Cut off big inserts and updates, but append byte count therefor                    if (strlen($row['sql_text']) > 220) {                        $row['sql_text'] = substr($row['sql_text'], 0, 200)                            . '... ['                            .  implode(' ', PMA_formatByteDown(strlen($row['sql_text']), 2, 2))                            . ']';                    }                    break;                default:                    break;                }                if (!isset($return['sum'][$type])) {                    $return['sum'][$type] = 0;                }                $return['sum'][$type] += $row['#'];                $return['rows'][] = $row;            }            $return['sum']['TOTAL'] = array_sum($return['sum']);            $return['numRows'] = count($return['rows']);            PMA_DBI_free_result($result);            exit(json_encode($return));        }        if ($_REQUEST['type'] == 'general') {            $limitTypes = (isset($_REQUEST['limitTypes']) && $_REQUEST['limitTypes'])                            ? 'AND argument REGEXP \'^(INSERT|SELECT|UPDATE|DELETE)\' ' : '';            $q = 'SELECT TIME(event_time) as event_time, user_host, thread_id, server_id, argument, count(argument) as \'#\' '.                 'FROM `mysql`.`general_log` WHERE command_type=\'Query\' '.                 'AND event_time > FROM_UNIXTIME(' . $start . ') AND event_time < FROM_UNIXTIME(' . $end . ') '.                 $limitTypes . 'GROUP by argument'; // HAVING count > 1';            $result = PMA_DBI_try_query($q);            $return = array('rows' => array(), 'sum' => array());            $type = '';            $insertTables = array();            $insertTablesFirst = -1;            $i = 0;            $removeVars = isset($_REQUEST['removeVariables']) && $_REQUEST['removeVariables'];            while ($row = PMA_DBI_fetch_assoc($result)) {                preg_match('/^(\w+)\s/', $row['argument'], $match);                $type = strtolower($match[1]);                if (!isset($return['sum'][$type])) {                    $return['sum'][$type] = 0;                }                $return['sum'][$type] += $row['#'];                switch($type) {                case 'insert':                    // Group inserts if selected                    if ($removeVars && preg_match('/^INSERT INTO (`|\'|"|)([^\s\\1]+)\\1/i', $row['argument'], $matches)) {                        $insertTables[$matches[2]]++;                        if ($insertTables[$matches[2]] > 1) {                            $return['rows'][$insertTablesFirst]['#'] = $insertTables[$matches[2]];                            // Add a ... to the end of this query to indicate that there's been other queries                            if ($return['rows'][$insertTablesFirst]['argument'][strlen($return['rows'][$insertTablesFirst]['argument'])-1] != '.') {                                $return['rows'][$insertTablesFirst]['argument'] .= '<br/>...';                            }                            // Group this value, thus do not add to the result list                            continue 2;                        } else {                            $insertTablesFirst = $i;                            $insertTables[$matches[2]] += $row['#'] - 1;                        }                    }                    // No break here                case 'update':                    // Cut off big inserts and updates, but append byte count therefor                    if (strlen($row['argument']) > 220) {                        $row['argument'] = substr($row['argument'], 0, 200)                            . '... ['                            .  implode(' ', PMA_formatByteDown(strlen($row['argument'])), 2, 2)                            . ']';                    }                    break;                default:                    break;                }                $return['rows'][] = $row;                $i++;            }            $return['sum']['TOTAL'] = array_sum($return['sum']);            $return['numRows'] = count($return['rows']);            PMA_DBI_free_result($result);            exit(json_encode($return));        }    }    if (isset($_REQUEST['logging_vars'])) {        if (isset($_REQUEST['varName']) && isset($_REQUEST['varValue'])) {            $value = PMA_sqlAddslashes($_REQUEST['varValue']);            if (!is_numeric($value)) {                $value="'" . $value . "'";            }            if (! preg_match("/[^a-zA-Z0-9_]+/", $_REQUEST['varName'])) {                PMA_DBI_query('SET GLOBAL ' . $_REQUEST['varName'] . ' = ' . $value);            }        }        $loggingVars = PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES WHERE Variable_name IN ("general_log","slow_query_log","long_query_time","log_output")', 0, 1);        exit(json_encode($loggingVars));    }    if (isset($_REQUEST['query_analyzer'])) {        $return = array();        if (strlen($_REQUEST['database'])) {            PMA_DBI_select_db($_REQUEST['database']);        }        if ($profiling = PMA_profilingSupported()) {            PMA_DBI_query('SET PROFILING=1;');        }        // Do not cache query        $query = preg_replace('/^(\s*SELECT)/i', '\\1 SQL_NO_CACHE', $_REQUEST['query']);        $result = PMA_DBI_try_query($query);        $return['affectedRows'] = $GLOBALS['cached_affected_rows'];        $result = PMA_DBI_try_query('EXPLAIN ' . $query);        while ($row = PMA_DBI_fetch_assoc($result)) {            $return['explain'][] = $row;        }        // In case an error happened        $return['error'] = PMA_DBI_getError();        PMA_DBI_free_result($result);        if ($profiling) {            $return['profiling'] = array();            $result = PMA_DBI_try_query('SELECT seq,state,duration FROM INFORMATION_SCHEMA.PROFILING WHERE QUERY_ID=1 ORDER BY seq');            while ($row = PMA_DBI_fetch_assoc($result)) {                $return['profiling'][]= $row;            }            PMA_DBI_free_result($result);        }        exit(json_encode($return));    }    if (isset($_REQUEST['advisor'])) {        include 'libraries/Advisor.class.php';        $advisor = new Advisor();        exit(json_encode($advisor->run()));    }}/** * Replication library */if (PMA_DRIZZLE) {    $server_master_status = false;    $server_slave_status = false;} else {    include_once './libraries/replication.inc.php';    include_once './libraries/replication_gui.lib.php';}/** * JS Includes */$GLOBALS['js_include'][] = 'server_status.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/jquery.tablesorter.js';$GLOBALS['js_include'][] = 'jquery/jquery.cookie.js'; // For tab persistence// Charting$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';/* < IE 9 doesn't support canvas natively */if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {    $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';}$GLOBALS['js_include'][] = 'canvg/canvg.js';/** * flush status variables if requested */if (isset($_REQUEST['flush'])) {    $_flush_commands = array(        'STATUS',        'TABLES',        'QUERY CACHE',    );    if (in_array($_REQUEST['flush'], $_flush_commands)) {        PMA_DBI_query('FLUSH ' . $_REQUEST['flush'] . ';');    }    unset($_flush_commands);}/** * Kills a selected process */if (!empty($_REQUEST['kill'])) {    if (PMA_DBI_try_query('KILL ' . $_REQUEST['kill'] . ';')) {        $message = PMA_Message::success(__('Thread %s was successfully killed.'));    } else {        $message = PMA_Message::error(__('phpMyAdmin was unable to kill thread %s. It probably has already been closed.'));    }    $message->addParam($_REQUEST['kill']);    //$message->display();}/** * get status from server */$server_status = PMA_DBI_fetch_result('SHOW GLOBAL STATUS', 0, 1);if (PMA_DRIZZLE) {    // Drizzle doesn't put query statistics into variables, add it    $sql = "SELECT concat('Com_', variable_name), variable_value        FROM data_dictionary.GLOBAL_STATEMENTS";    $statements = PMA_DBI_fetch_result($sql, 0, 1);    $server_status = array_merge($server_status, $statements);}/** * for some calculations we require also some server settings */$server_variables = PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES', 0, 1);/** * cleanup of some deprecated values */cleanDeprecated($server_status);/** * calculate some values */// Key_buffer_fractionif (isset($server_status['Key_blocks_unused'])    && isset($server_variables['key_cache_block_size'])    && isset($server_variables['key_buffer_size'])) {    $server_status['Key_buffer_fraction_%']        = 100        - $server_status['Key_blocks_unused']        * $server_variables['key_cache_block_size']        / $server_variables['key_buffer_size']        * 100;} elseif (isset($server_status['Key_blocks_used'])        && isset($server_variables['key_buffer_size'])) {    $server_status['Key_buffer_fraction_%']        = $server_status['Key_blocks_used']        * 1024        / $server_variables['key_buffer_size'];}// Ratio for key read/writeif (isset($server_status['Key_writes'])    && isset($server_status['Key_write_requests'])    && $server_status['Key_write_requests'] > 0) {    $server_status['Key_write_ratio_%'] = 100 * $server_status['Key_writes'] / $server_status['Key_write_requests'];}if (isset($server_status['Key_reads'])    && isset($server_status['Key_read_requests'])    && $server_status['Key_read_requests'] > 0) {    $server_status['Key_read_ratio_%'] = 100 * $server_status['Key_reads'] / $server_status['Key_read_requests'];}// Threads_cache_hitrateif (isset($server_status['Threads_created'])    && isset($server_status['Connections'])    && $server_status['Connections'] > 0) {    $server_status['Threads_cache_hitrate_%']        = 100 - $server_status['Threads_created'] / $server_status['Connections'] * 100;}/** * split variables in sections */$allocations = array(    // variable name => section    // variable names match when they begin with the given string    'Com_'              => 'com',    'Innodb_'           => 'innodb',    'Ndb_'              => 'ndb',    'Handler_'          => 'handler',    'Qcache_'           => 'qcache',    'Threads_'          => 'threads',    'Slow_launch_threads' => 'threads',    'Binlog_cache_'     => 'binlog_cache',    'Created_tmp_'      => 'created_tmp',    'Key_'              => 'key',    'Delayed_'          => 'delayed',    'Not_flushed_delayed_rows' => 'delayed',    'Flush_commands'    => 'query',    'Last_query_cost'   => 'query',    'Slow_queries'      => 'query',    'Queries'           => 'query',    'Prepared_stmt_count' => 'query',    'Select_'           => 'select',    'Sort_'             => 'sort',    'Open_tables'       => 'table',    'Opened_tables'     => 'table',    'Open_table_definitions' => 'table',    'Opened_table_definitions' => 'table',    'Table_locks_'      => 'table',    'Rpl_status'        => 'repl',    'Slave_'            => 'repl',    'Tc_'               => 'tc',    'Ssl_'              => 'ssl',    'Open_files'        => 'files',    'Open_streams'      => 'files',    'Opened_files'      => 'files',);$sections = array(    // section => section name (description)    'com'           => 'Com',    'query'         => __('SQL query'),    'innodb'        => 'InnoDB',    'ndb'           => 'NDB',    'handler'       => __('Handler'),    'qcache'        => __('Query cache'),    'threads'       => __('Threads'),    'binlog_cache'  => __('Binary log'),    'created_tmp'   => __('Temporary data'),    'delayed'       => __('Delayed inserts'),    'key'           => __('Key cache'),    'select'        => __('Joins'),    'repl'          => __('Replication'),    'sort'          => __('Sorting'),    'table'         => __('Tables'),    'tc'            => __('Transaction coordinator'),    'files'         => __('Files'),    'ssl'           => 'SSL',    'other'         => __('Other'));/** * define some needfull links/commands */// variable or section name => (name => url)$links = array();$links['table'][__('Flush (close) all tables')]    = $PMA_PHP_SELF . '?flush=TABLES&amp;' . PMA_generate_common_url();$links['table'][__('Show open tables')]    = 'sql.php?sql_query=' . urlencode('SHOW OPEN TABLES') .        '&amp;goto=server_status.php&amp;' . PMA_generate_common_url();if ($server_master_status) {    $links['repl'][__('Show slave hosts')]        = 'sql.php?sql_query=' . urlencode('SHOW SLAVE HOSTS') .            '&amp;goto=server_status.php&amp;' . PMA_generate_common_url();    $links['repl'][__('Show master status')] = '#replication_master';}if ($server_slave_status) {    $links['repl'][__('Show slave status')] = '#replication_slave';}$links['repl']['doc'] = 'replication';$links['qcache'][__('Flush query cache')]    = $PMA_PHP_SELF . '?flush=' . urlencode('QUERY CACHE') . '&amp;' .        PMA_generate_common_url();$links['qcache']['doc'] = 'query_cache';//$links['threads'][__('Show processes')]//    = 'server_processlist.php?' . PMA_generate_common_url();$links['threads']['doc'] = 'mysql_threads';$links['key']['doc'] = 'myisam_key_cache';$links['binlog_cache']['doc'] = 'binary_log';$links['Slow_queries']['doc'] = 'slow_query_log';$links['innodb'][__('Variables')]    = 'server_engines.php?engine=InnoDB&amp;' . PMA_generate_common_url();$links['innodb'][__('InnoDB Status')]    = 'server_engines.php?engine=InnoDB&amp;page=Status&amp;' .        PMA_generate_common_url();$links['innodb']['doc'] = 'innodb';// Variable to contain all com_ variables (query statistics)$used_queries = array();// Variable to map variable names to their respective section name// (used for js category filtering)$allocationMap = array();// Variable to mark used sections$categoryUsed = array();// sort vars into arraysforeach ($server_status as $name => $value) {    $section_found = false;    foreach ($allocations as $filter => $section) {        if (strpos($name, $filter) !== false) {            $allocationMap[$name] = $section;            $categoryUsed[$section] = true;            $section_found = true;            if ($section == 'com' && $value > 0) {                $used_queries[$name] = $value;            }            break; // Only exits inner loop        }    }    if (!$section_found) {        $allocationMap[$name] = 'other';        $categoryUsed['other'] = true;    }}if (PMA_DRIZZLE) {    $used_queries = PMA_DBI_fetch_result(        'SELECT * FROM data_dictionary.global_statements',        0,        1    );    unset($used_queries['admin_commands']);} else {    // admin commands are not queries (e.g. they include COM_PING,    // which is excluded from $server_status['Questions'])    unset($used_queries['Com_admin_commands']);}/* Ajax request refresh */if (isset($_REQUEST['show']) && isset($_REQUEST['ajax_request'])) {    switch($_REQUEST['show']) {    case 'query_statistics':        printQueryStatistics();        exit();    case 'server_traffic':        printServerTraffic();        exit();    case 'variables_table':        // Prints the variables table        printVariablesTable();        exit();    default:        break;    }}$server_db_isLocal = strtolower($cfg['Server']['host']) == 'localhost'                              || $cfg['Server']['host'] == '127.0.0.1'                              || $cfg['Server']['host'] == '::1';PMA_AddJSVar(    'pma_token',    $_SESSION[' PMA_token ']);PMA_AddJSVar(    'url_query',    str_replace('&amp;', '&', PMA_generate_common_url($db)));PMA_AddJSVar(    'server_time_diff',    'new Date().getTime() - ' . (microtime(true) * 1000),    false);PMA_AddJSVar(    'server_os',    PHP_OS);PMA_AddJSVar(    'is_superuser',    PMA_isSuperuser());PMA_AddJSVar(    'server_db_isLocal',    $server_db_isLocal);PMA_AddJSVar(    'profiling_docu',    PMA_showMySQLDocu('general-thread-states', 'general-thread-states'));PMA_AddJSVar(    'explain_docu',    PMA_showMySQLDocu('explain-output', 'explain-output'));/** * start output */ /** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';?><div id="serverstatus">    <h2><?php/** * Displays the sub-page heading */if ($GLOBALS['cfg']['MainPageIconic']) {    echo PMA_getImage('s_status.png');}echo __('Runtime Information');?></h2>    <div id="serverStatusTabs">        <ul>            <li><a href="#statustabs_traffic"><?php echo __('Server'); ?></a></li>            <li><a href="#statustabs_queries"><?php echo __('Query statistics'); ?></a></li>            <li><a href="#statustabs_allvars"><?php echo __('All status variables'); ?></a></li>            <li class="jsfeature"><a href="#statustabs_charting"><?php echo __('Monitor'); ?></a></li>            <li class="jsfeature"><a href="#statustabs_advisor"><?php echo __('Advisor'); ?></a></li>        </ul>        <div id="statustabs_traffic" class="clearfloat">            <div class="buttonlinks jsfeature">                <a class="tabRefresh" href="<?php echo $PMA_PHP_SELF . '?show=server_traffic&amp;' . PMA_generate_common_url(); ?>" >                    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />                    <?php echo __('Refresh'); ?>                </a>                <span class="refreshList" style="display:none;">                    <label for="id_trafficChartRefresh"><?php echo __('Refresh rate: '); ?></label>                    <?php refreshList('trafficChartRefresh'); ?>                </span>                <a class="tabChart livetrafficLink" href="#">                    <?php echo __('Live traffic chart'); ?>                </a>                <a class="tabChart liveconnectionsLink" href="#">                    <?php echo __('Live conn./process chart'); ?>                </a>            </div>            <div class="tabInnerContent">                <?php printServerTraffic(); ?>            </div>        </div>        <div id="statustabs_queries" class="clearfloat">            <div class="buttonlinks jsfeature">                <a class="tabRefresh"  href="<?php echo $PMA_PHP_SELF . '?show=query_statistics&amp;' . PMA_generate_common_url(); ?>" >                    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />                    <?php echo __('Refresh'); ?>                </a>                <span class="refreshList" style="display:none;">                    <label for="id_queryChartRefresh"><?php echo __('Refresh rate: '); ?></label>                       <?php refreshList('queryChartRefresh'); ?>                </span>                <a class="tabChart livequeriesLink" href="#">                    <?php echo __('Live query chart'); ?>                </a>            </div>            <div class="tabInnerContent">                <?php printQueryStatistics(); ?>            </div>        </div>        <div id="statustabs_allvars" class="clearfloat">            <fieldset id="tableFilter" class="jsfeature">                <div class="buttonlinks">                    <a class="tabRefresh" href="<?php echo $PMA_PHP_SELF . '?show=variables_table&amp;' . PMA_generate_common_url(); ?>" >                        <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />                        <?php echo __('Refresh'); ?>                    </a>                </div>                <legend><?php echo __('Filters'); ?></legend>                <div class="formelement">                    <label for="filterText"><?php echo __('Containing the word:'); ?></label>                    <input name="filterText" type="text" id="filterText" style="vertical-align: baseline;" />                </div>                <div class="formelement">                    <input type="checkbox" name="filterAlert" id="filterAlert" />                    <label for="filterAlert"><?php echo __('Show only alert values'); ?></label>                </div>                <div class="formelement">                    <select id="filterCategory" name="filterCategory">                        <option value=''><?php echo __('Filter by category...'); ?></option>                <?php                        foreach ($sections as $section_id => $section_name) {                            if (isset($categoryUsed[$section_id])) {                ?>                                <option value='<?php echo $section_id; ?>'><?php echo $section_name; ?></option>                <?php                            }                        }                ?>                    </select>                </div>                <div class="formelement">                    <input type="checkbox" name="dontFormat" id="dontFormat" />                    <label for="dontFormat"><?php echo __('Show unformatted values'); ?></label>                </div>            </fieldset>            <div id="linkSuggestions" class="defaultLinks" style="display:none">                <p class="notice"><?php echo __('Related links:'); ?>                <?php                foreach ($links as $section_name => $section_links) {                    echo '<span class="status_' . $section_name . '"> ';                    $i=0;                    foreach ($section_links as $link_name => $link_url) {                        if ($i > 0) {                            echo ', ';                        }                        if ('doc' == $link_name) {                            echo PMA_showMySQLDocu($link_url, $link_url);                        } else {                            echo '<a href="' . $link_url . '">' . $link_name . '</a>';                        }                        $i++;                    }                    echo '</span>';                }                unset($link_url, $link_name, $i);                ?>                </p>            </div>            <div class="tabInnerContent">                <?php printVariablesTable(); ?>            </div>        </div>        <div id="statustabs_charting" class="jsfeature">            <?php printMonitor(); ?>        </div>        <div id="statustabs_advisor" class="jsfeature">            <div class="tabLinks">                <?php echo PMA_getImage('play.png'); ?> <a href="#startAnalyzer"><?php echo __('Run analyzer'); ?></a>                <?php echo PMA_getImage('b_help.png'); ?> <a href="#openAdvisorInstructions"><?php echo __('Instructions'); ?></a>            </div>            <div class="tabInnerContent clearfloat">            </div>            <div id="advisorInstructionsDialog" style="display:none;">            <?php            echo '<p>';            echo __('The Advisor system can provide recommendations on server variables by analyzing the server status variables.');            echo '</p> <p>';            echo __('Do note however that this system provides recommendations based on simple calculations and by rule of thumb which may not necessarily apply to your system.');            echo '</p> <p>';            echo __('Prior to changing any of the configuration, be sure to know what you are changing (by reading the documentation) and how to undo the change. Wrong tuning can have a very negative effect on performance.');            echo '</p> <p>';            echo __('The best way to tune your system would be to change only one setting at a time, observe or benchmark your database, and undo the change if there was no clearly measurable improvement.');            echo '</p>';            ?>            </div>        </div>    </div></div><?phpfunction printQueryStatistics(){    global $server_status, $used_queries, $url_query, $PMA_PHP_SELF;    $hour_factor   = 3600 / $server_status['Uptime'];    $total_queries = array_sum($used_queries);    ?>    <h3 id="serverstatusqueries">        <?php        /* l10n: Questions is the name of a MySQL Status variable */        echo sprintf(__('Questions since startup: %s'), PMA_formatNumber($total_queries, 0)) . ' ';        echo PMA_showMySQLDocu('server-status-variables', 'server-status-variables', false, 'statvar_Questions');        ?>        <br />        <span>        <?php        echo '&oslash; ' . __('per hour') . ': ';        echo PMA_formatNumber($total_queries * $hour_factor, 0);        echo '<br />';        echo '&oslash; ' . __('per minute') . ': ';        echo PMA_formatNumber($total_queries * 60 / $server_status['Uptime'], 0);        echo '<br />';        if ($total_queries / $server_status['Uptime'] >= 1) {            echo '&oslash; ' . __('per second') . ': ';            echo PMA_formatNumber($total_queries / $server_status['Uptime'], 0);        }        ?>        </span>    </h3>    <?php    // reverse sort by value to show most used statements first    arsort($used_queries);    $odd_row        = true;    $count_displayed_rows = 0;    $perc_factor    = 100 / $total_queries; //(- $server_status['Connections']);    ?>        <table id="serverstatusqueriesdetails" class="data sortable noclick">        <col class="namecol" />        <col class="valuecol" span="3" />        <thead>            <tr><th><?php echo __('Statements'); ?></th>                <th><?php                    /* l10n: # = Amount of queries */                    echo __('#');                    ?>                </th>                <th>&oslash; <?php echo __('per hour'); ?></th>                <th>%</th>            </tr>        </thead>        <tbody>    <?php    $chart_json = array();    $query_sum = array_sum($used_queries);    $other_sum = 0;    foreach ($used_queries as $name => $value) {        $odd_row = !$odd_row;        // For the percentage column, use Questions - Connections, because        // the number of connections is not an item of the Query types        // but is included in Questions. Then the total of the percentages is 100.        $name = str_replace(array('Com_', '_'), array('', ' '), $name);        // Group together values that make out less than 2% into "Other", but only if we have more than 6 fractions already        if ($value < $query_sum * 0.02 && count($chart_json)>6) {            $other_sum += $value;        } else {            $chart_json[$name] = $value;        }    ?>            <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">                <th class="name"><?php echo htmlspecialchars($name); ?></th>                <td class="value"><?php echo htmlspecialchars(PMA_formatNumber($value, 5, 0, true)); ?></td>                <td class="value"><?php echo                    htmlspecialchars(PMA_formatNumber($value * $hour_factor, 4, 1, true)); ?></td>                <td class="value"><?php echo                    htmlspecialchars(PMA_formatNumber($value * $perc_factor, 0, 2)); ?>%</td>            </tr>    <?php    }    ?>        </tbody>        </table>        <div id="serverstatusquerieschart">            <span style="display:none;">        <?php            if ($other_sum > 0) {                $chart_json[__('Other')] = $other_sum;            }            echo json_encode($chart_json);        ?>            </span>        </div>        <?php}function printServerTraffic(){    global $server_status, $PMA_PHP_SELF;    global $server_master_status, $server_slave_status, $replication_types;    $hour_factor    = 3600 / $server_status['Uptime'];    /**     * starttime calculation     */    $start_time = PMA_DBI_fetch_value(        'SELECT UNIX_TIMESTAMP() - ' . $server_status['Uptime']    );    ?>    <h3><?php    echo sprintf(        __('Network traffic since startup: %s'),        implode(' ', PMA_formatByteDown($server_status['Bytes_received'] + $server_status['Bytes_sent'], 3, 1))    );    ?>    </h3>    <p>    <?php    echo sprintf(        __('This MySQL server has been running for %1$s. It started up on %2$s.'),        PMA_timespanFormat($server_status['Uptime']),        PMA_localisedDate($start_time)    ) . "\n";    ?>    </p>    <?php    if ($server_master_status || $server_slave_status) {        echo '<p class="notice">';        if ($server_master_status && $server_slave_status) {            echo __('This MySQL server works as <b>master</b> and <b>slave</b> in <b>replication</b> process.');        } elseif ($server_master_status) {            echo __('This MySQL server works as <b>master</b> in <b>replication</b> process.');        } elseif ($server_slave_status) {            echo __('This MySQL server works as <b>slave</b> in <b>replication</b> process.');        }        echo ' ';        echo __('For further information about replication status on the server, please visit the <a href="#replication">replication section</a>.');        echo '</p>';    }    /* if the server works as master or slave in replication process, display useful information */    if ($server_master_status || $server_slave_status) {    ?>      <hr class="clearfloat" />      <h3><a name="replication"></a><?php echo __('Replication status'); ?></h3>    <?php        foreach ($replication_types as $type) {            if (${"server_{$type}_status"}) {                PMA_replication_print_status_table($type);            }        }        unset($types);    }    ?>    <table id="serverstatustraffic" class="data noclick">    <thead>    <tr>        <th colspan="2"><?php echo __('Traffic') . '&nbsp;' . PMA_showHint(__('On a busy server, the byte counters may overrun, so those statistics as reported by the MySQL server may be incorrect.')); ?></th>        <th>&oslash; <?php echo __('per hour'); ?></th>    </tr>    </thead>    <tbody>    <tr class="odd">        <th class="name"><?php echo __('Received'); ?></th>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown($server_status['Bytes_received'], 3, 1)); ?></td>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    $server_status['Bytes_received'] * $hour_factor, 3, 1)); ?></td>    </tr>    <tr class="even">        <th class="name"><?php echo __('Sent'); ?></th>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown($server_status['Bytes_sent'], 3, 1)); ?></td>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    $server_status['Bytes_sent'] * $hour_factor, 3, 1)); ?></td>    </tr>    <tr class="odd">        <th class="name"><?php echo __('Total'); ?></th>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    $server_status['Bytes_received'] + $server_status['Bytes_sent'], 3, 1)            ); ?></td>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    ($server_status['Bytes_received'] + $server_status['Bytes_sent'])                    * $hour_factor, 3, 1)            ); ?></td>    </tr>    </tbody>    </table>    <table id="serverstatusconnections" class="data noclick">    <thead>    <tr>        <th colspan="2"><?php echo __('Connections'); ?></th>        <th>&oslash; <?php echo __('per hour'); ?></th>        <th>%</th>    </tr>    </thead>    <tbody>    <tr class="odd">        <th class="name"><?php echo __('max. concurrent connections'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Max_used_connections'], 0); ?>  </td>        <td class="value">--- </td>        <td class="value">--- </td>    </tr>    <tr class="even">        <th class="name"><?php echo __('Failed attempts'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_connects'], 4, 1, true); ?></td>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_connects'] * $hour_factor,                4, 2, true); ?></td>        <td class="value"><?php echo            $server_status['Connections'] > 0          ? PMA_formatNumber(                $server_status['Aborted_connects'] * 100 / $server_status['Connections'],                0, 2, true) . '%'          : '--- '; ?></td>    </tr>    <tr class="odd">        <th class="name"><?php echo __('Aborted'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_clients'], 4, 1, true); ?></td>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_clients'] * $hour_factor,                4, 2, true); ?></td>        <td class="value"><?php echo            $server_status['Connections'] > 0          ? PMA_formatNumber(                $server_status['Aborted_clients'] * 100 / $server_status['Connections'],                0, 2, true) . '%'          : '--- '; ?></td>    </tr>    <tr class="even">        <th class="name"><?php echo __('Total'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Connections'], 4, 0); ?></td>        <td class="value"><?php echo            PMA_formatNumber($server_status['Connections'] * $hour_factor,                4, 2); ?></td>        <td class="value"><?php echo            PMA_formatNumber(100, 0, 2); ?>%</td>    </tr>    </tbody>    </table>    <?php    $url_params = array();    $show_full_sql = !empty($_REQUEST['full']);    if ($show_full_sql) {        $url_params['full'] = 1;        $full_text_link = 'server_status.php' . PMA_generate_common_url(array(), 'html', '?');    } else {        $full_text_link = 'server_status.php' . PMA_generate_common_url(array('full' => 1));    }    if (PMA_DRIZZLE) {        $sql_query = "SELECT                p.id       AS Id,                p.username AS User,                p.host     AS Host,                p.db       AS db,                p.command  AS Command,                p.time     AS Time,                p.state    AS State,                " . ($show_full_sql ? 's.query' : 'left(p.info, ' . (int)$GLOBALS['cfg']['MaxCharactersInDisplayedSQL'] . ')') . " AS Info            FROM data_dictionary.PROCESSLIST p                " . ($show_full_sql ? 'LEFT JOIN data_dictionary.SESSIONS s ON s.session_id = p.id' : '');    } else {        $sql_query = $show_full_sql            ? 'SHOW FULL PROCESSLIST'            : 'SHOW PROCESSLIST';    }    $result = PMA_DBI_query($sql_query);    /**     * Displays the page     */    ?>    <table id="tableprocesslist" class="data clearfloat noclick">    <thead>    <tr>        <th><?php echo __('Processes'); ?></th>        <th><?php echo __('ID'); ?></th>        <th><?php echo __('User'); ?></th>        <th><?php echo __('Host'); ?></th>        <th><?php echo __('Database'); ?></th>        <th><?php echo __('Command'); ?></th>        <th><?php echo __('Time'); ?></th>        <th><?php echo __('Status'); ?></th>        <th><?php            echo __('SQL query');            if (! PMA_DRIZZLE) {                ?>            <a href="<?php echo $full_text_link; ?>"                title="<?php echo $show_full_sql ? __('Truncate Shown Queries') : __('Show Full Queries'); ?>">                <img src="<?php echo $GLOBALS['pmaThemeImage'] . 's_' . ($show_full_sql ? 'partial' : 'full'); ?>text.png"                alt="<?php echo $show_full_sql ? __('Truncate Shown Queries') : __('Show Full Queries'); ?>" />            </a>            <?php } ?>        </th>    </tr>    </thead>    <tbody>    <?php    $odd_row = true;    while ($process = PMA_DBI_fetch_assoc($result)) {        $url_params['kill'] = $process['Id'];        $kill_process = 'server_status.php' . PMA_generate_common_url($url_params);        ?>    <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">        <td><a href="<?php echo $kill_process ; ?>"><?php echo __('Kill'); ?></a></td>        <td class="value"><?php echo $process['Id']; ?></td>        <td><?php echo $process['User']; ?></td>        <td><?php echo $process['Host']; ?></td>        <td><?php echo ((! isset($process['db']) || ! strlen($process['db'])) ? '<i>' . __('None') . '</i>' : $process['db']); ?></td>        <td><?php echo $process['Command']; ?></td>        <td class="value"><?php echo $process['Time']; ?></td>        <td><?php echo (empty($process['State']) ? '---' : $process['State']); ?></td>        <td>        <?php        if (empty($process['Info'])) {            echo '---';        } else {            if (!$show_full_sql && strlen($process['Info']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                echo htmlspecialchars(substr($process['Info'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'])) . '[...]';            } else {                echo PMA_SQP_formatHtml(PMA_SQP_parse($process['Info']));            }        }        ?>        </td>    </tr>        <?php        $odd_row = ! $odd_row;    }    ?>    </tbody>    </table>    <?php}function printVariablesTable(){    global $server_status, $server_variables, $allocationMap, $links;    /**     * Messages are built using the message name     */    $strShowStatus = array(        'Aborted_clients' => __('The number of connections that were aborted because the client died without closing the connection properly.'),        'Aborted_connects' => __('The number of failed attempts to connect to the MySQL server.'),        'Binlog_cache_disk_use' => __('The number of transactions that used the temporary binary log cache but that exceeded the value of binlog_cache_size and used a temporary file to store statements from the transaction.'),        'Binlog_cache_use' => __('The number of transactions that used the temporary binary log cache.'),        'Connections' => __('The number of connection attempts (successful or not) to the MySQL server.'),        'Created_tmp_disk_tables' => __('The number of temporary tables on disk created automatically by the server while executing statements. If Created_tmp_disk_tables is big, you may want to increase the tmp_table_size  value to cause temporary tables to be memory-based instead of disk-based.'),        'Created_tmp_files' => __('How many temporary files mysqld has created.'),        'Created_tmp_tables' => __('The number of in-memory temporary tables created automatically by the server while executing statements.'),        'Delayed_errors' => __('The number of rows written with INSERT DELAYED for which some error occurred (probably duplicate key).'),        'Delayed_insert_threads' => __('The number of INSERT DELAYED handler threads in use. Every different table on which one uses INSERT DELAYED gets its own thread.'),        'Delayed_writes' => __('The number of INSERT DELAYED rows written.'),        'Flush_commands'  => __('The number of executed FLUSH statements.'),        'Handler_commit' => __('The number of internal COMMIT statements.'),        'Handler_delete' => __('The number of times a row was deleted from a table.'),        'Handler_discover' => __('The MySQL server can ask the NDB Cluster storage engine if it knows about a table with a given name. This is called discovery. Handler_discover indicates the number of time tables have been discovered.'),        'Handler_read_first' => __('The number of times the first entry was read from an index. If this is high, it suggests that the server is doing a lot of full index scans; for example, SELECT col1 FROM foo, assuming that col1 is indexed.'),        'Handler_read_key' => __('The number of requests to read a row based on a key. If this is high, it is a good indication that your queries and tables are properly indexed.'),        'Handler_read_next' => __('The number of requests to read the next row in key order. This is incremented if you are querying an index column with a range constraint or if you are doing an index scan.'),        'Handler_read_prev' => __('The number of requests to read the previous row in key order. This read method is mainly used to optimize ORDER BY ... DESC.'),        'Handler_read_rnd' => __('The number of requests to read a row based on a fixed position. This is high if you are doing a lot of queries that require sorting of the result. You probably have a lot of queries that require MySQL to scan whole tables or you have joins that don\'t use keys properly.'),        'Handler_read_rnd_next' => __('The number of requests to read the next row in the data file. This is high if you are doing a lot of table scans. Generally this suggests that your tables are not properly indexed or that your queries are not written to take advantage of the indexes you have.'),        'Handler_rollback' => __('The number of internal ROLLBACK statements.'),        'Handler_update' => __('The number of requests to update a row in a table.'),        'Handler_write' => __('The number of requests to insert a row in a table.'),        'Innodb_buffer_pool_pages_data' => __('The number of pages containing data (dirty or clean).'),        'Innodb_buffer_pool_pages_dirty' => __('The number of pages currently dirty.'),        'Innodb_buffer_pool_pages_flushed' => __('The number of buffer pool pages that have been requested to be flushed.'),        'Innodb_buffer_pool_pages_free' => __('The number of free pages.'),        'Innodb_buffer_pool_pages_latched' => __('The number of latched pages in InnoDB buffer pool. These are pages currently being read or written or that can\'t be flushed or removed for some other reason.'),        'Innodb_buffer_pool_pages_misc' => __('The number of pages busy because they have been allocated for administrative overhead such as row locks or the adaptive hash index. This value can also be calculated as Innodb_buffer_pool_pages_total - Innodb_buffer_pool_pages_free - Innodb_buffer_pool_pages_data.'),        'Innodb_buffer_pool_pages_total' => __('Total size of buffer pool, in pages.'),        'Innodb_buffer_pool_read_ahead_rnd' => __('The number of "random" read-aheads InnoDB initiated. This happens when a query is to scan a large portion of a table but in random order.'),        'Innodb_buffer_pool_read_ahead_seq' => __('The number of sequential read-aheads InnoDB initiated. This happens when InnoDB does a sequential full table scan.'),        'Innodb_buffer_pool_read_requests' => __('The number of logical read requests InnoDB has done.'),        'Innodb_buffer_pool_reads' => __('The number of logical reads that InnoDB could not satisfy from buffer pool and had to do a single-page read.'),        'Innodb_buffer_pool_wait_free' => __('Normally, writes to the InnoDB buffer pool happen in the background. However, if it\'s necessary to read or create a page and no clean pages are available, it\'s necessary to wait for pages to be flushed first. This counter counts instances of these waits. If the buffer pool size was set properly, this value should be small.'),        'Innodb_buffer_pool_write_requests' => __('The number writes done to the InnoDB buffer pool.'),        'Innodb_data_fsyncs' => __('The number of fsync() operations so far.'),        'Innodb_data_pending_fsyncs' => __('The current number of pending fsync() operations.'),        'Innodb_data_pending_reads' => __('The current number of pending reads.'),        'Innodb_data_pending_writes' => __('The current number of pending writes.'),        'Innodb_data_read' => __('The amount of data read so far, in bytes.'),        'Innodb_data_reads' => __('The total number of data reads.'),        'Innodb_data_writes' => __('The total number of data writes.'),        'Innodb_data_written' => __('The amount of data written so far, in bytes.'),        'Innodb_dblwr_pages_written' => __('The number of pages that have been written for doublewrite operations.'),        'Innodb_dblwr_writes' => __('The number of doublewrite operations that have been performed.'),        'Innodb_log_waits' => __('The number of waits we had because log buffer was too small and we had to wait for it to be flushed before continuing.'),        'Innodb_log_write_requests' => __('The number of log write requests.'),        'Innodb_log_writes' => __('The number of physical writes to the log file.'),        'Innodb_os_log_fsyncs' => __('The number of fsync() writes done to the log file.'),        'Innodb_os_log_pending_fsyncs' => __('The number of pending log file fsyncs.'),        'Innodb_os_log_pending_writes' => __('Pending log file writes.'),        'Innodb_os_log_written' => __('The number of bytes written to the log file.'),        'Innodb_pages_created' => __('The number of pages created.'),        'Innodb_page_size' => __('The compiled-in InnoDB page size (default 16KB). Many values are counted in pages; the page size allows them to be easily converted to bytes.'),        'Innodb_pages_read' => __('The number of pages read.'),        'Innodb_pages_written' => __('The number of pages written.'),        'Innodb_row_lock_current_waits' => __('The number of row locks currently being waited for.'),        'Innodb_row_lock_time_avg' => __('The average time to acquire a row lock, in milliseconds.'),        'Innodb_row_lock_time' => __('The total time spent in acquiring row locks, in milliseconds.'),        'Innodb_row_lock_time_max' => __('The maximum time to acquire a row lock, in milliseconds.'),        'Innodb_row_lock_waits' => __('The number of times a row lock had to be waited for.'),        'Innodb_rows_deleted' => __('The number of rows deleted from InnoDB tables.'),        'Innodb_rows_inserted' => __('The number of rows inserted in InnoDB tables.'),        'Innodb_rows_read' => __('The number of rows read from InnoDB tables.'),        'Innodb_rows_updated' => __('The number of rows updated in InnoDB tables.'),        'Key_blocks_not_flushed' => __('The number of key blocks in the key cache that have changed but haven\'t yet been flushed to disk. It used to be known as Not_flushed_key_blocks.'),        'Key_blocks_unused' => __('The number of unused blocks in the key cache. You can use this value to determine how much of the key cache is in use.'),        'Key_blocks_used' => __('The number of used blocks in the key cache. This value is a high-water mark that indicates the maximum number of blocks that have ever been in use at one time.'),        'Key_read_requests' => __('The number of requests to read a key block from the cache.'),        'Key_reads' => __('The number of physical reads of a key block from disk. If Key_reads is big, then your key_buffer_size value is probably too small. The cache miss rate can be calculated as Key_reads/Key_read_requests.'),        'Key_write_requests' => __('The number of requests to write a key block to the cache.'),        'Key_writes' => __('The number of physical writes of a key block to disk.'),        'Last_query_cost' => __('The total cost of the last compiled query as computed by the query optimizer. Useful for comparing the cost of different query plans for the same query. The default value of 0 means that no query has been compiled yet.'),        'Max_used_connections' => __('The maximum number of connections that have been in use simultaneously since the server started.'),        'Not_flushed_delayed_rows' => __('The number of rows waiting to be written in INSERT DELAYED queues.'),        'Opened_tables' => __('The number of tables that have been opened. If opened tables is big, your table cache value is probably too small.'),        'Open_files' => __('The number of files that are open.'),        'Open_streams' => __('The number of streams that are open (used mainly for logging).'),        'Open_tables' => __('The number of tables that are open.'),        'Qcache_free_blocks' => __('The number of free memory blocks in query cache. High numbers can indicate fragmentation issues, which may be solved by issuing a FLUSH QUERY CACHE statement.'),        'Qcache_free_memory' => __('The amount of free memory for query cache.'),        'Qcache_hits' => __('The number of cache hits.'),        'Qcache_inserts' => __('The number of queries added to the cache.'),        'Qcache_lowmem_prunes' => __('The number of queries that have been removed from the cache to free up memory for caching new queries. This information can help you tune the query cache size. The query cache uses a least recently used (LRU) strategy to decide which queries to remove from the cache.'),        'Qcache_not_cached' => __('The number of non-cached queries (not cachable, or not cached due to the query_cache_type setting).'),        'Qcache_queries_in_cache' => __('The number of queries registered in the cache.'),        'Qcache_total_blocks' => __('The total number of blocks in the query cache.'),        'Rpl_status' => __('The status of failsafe replication (not yet implemented).'),        'Select_full_join' => __('The number of joins that do not use indexes. If this value is not 0, you should carefully check the indexes of your tables.'),        'Select_full_range_join' => __('The number of joins that used a range search on a reference table.'),        'Select_range_check' => __('The number of joins without keys that check for key usage after each row. (If this is not 0, you should carefully check the indexes of your tables.)'),        'Select_range' => __('The number of joins that used ranges on the first table. (It\'s normally not critical even if this is big.)'),        'Select_scan' => __('The number of joins that did a full scan of the first table.'),        'Slave_open_temp_tables' => __('The number of temporary tables currently open by the slave SQL thread.'),        'Slave_retried_transactions' => __('Total (since startup) number of times the replication slave SQL thread has retried transactions.'),        'Slave_running' => __('This is ON if this server is a slave that is connected to a master.'),        'Slow_launch_threads' => __('The number of threads that have taken more than slow_launch_time seconds to create.'),        'Slow_queries' => __('The number of queries that have taken more than long_query_time seconds.'),        'Sort_merge_passes' => __('The number of merge passes the sort algorithm has had to do. If this value is large, you should consider increasing the value of the sort_buffer_size system variable.'),        'Sort_range' => __('The number of sorts that were done with ranges.'),        'Sort_rows' => __('The number of sorted rows.'),        'Sort_scan' => __('The number of sorts that were done by scanning the table.'),        'Table_locks_immediate' => __('The number of times that a table lock was acquired immediately.'),        'Table_locks_waited' => __('The number of times that a table lock could not be acquired immediately and a wait was needed. If this is high, and you have performance problems, you should first optimize your queries, and then either split your table or tables or use replication.'),        'Threads_cached' => __('The number of threads in the thread cache. The cache hit rate can be calculated as Threads_created/Connections. If this value is red you should raise your thread_cache_size.'),        'Threads_connected' => __('The number of currently open connections.'),        'Threads_created' => __('The number of threads created to handle connections. If Threads_created is big, you may want to increase the thread_cache_size value. (Normally this doesn\'t give a notable performance improvement if you have a good thread implementation.)'),        'Threads_running' => __('The number of threads that are not sleeping.')    );    /**     * define some alerts     */    // name => max value before alert    $alerts = array(        // lower is better        // variable => max value        'Aborted_clients' => 0,        'Aborted_connects' => 0,        'Binlog_cache_disk_use' => 0,        'Created_tmp_disk_tables' => 0,        'Handler_read_rnd' => 0,        'Handler_read_rnd_next' => 0,        'Innodb_buffer_pool_pages_dirty' => 0,        'Innodb_buffer_pool_reads' => 0,        'Innodb_buffer_pool_wait_free' => 0,        'Innodb_log_waits' => 0,        'Innodb_row_lock_time_avg' => 10, // ms        'Innodb_row_lock_time_max' => 50, // ms        'Innodb_row_lock_waits' => 0,        'Slow_queries' => 0,        'Delayed_errors' => 0,        'Select_full_join' => 0,        'Select_range_check' => 0,        'Sort_merge_passes' => 0,        'Opened_tables' => 0,        'Table_locks_waited' => 0,        'Qcache_lowmem_prunes' => 0,        'Qcache_free_blocks' => isset($server_status['Qcache_total_blocks']) ? $server_status['Qcache_total_blocks'] / 5 : 0,        'Slow_launch_threads' => 0,        // depends on Key_read_requests        // normaly lower then 1:0.01        'Key_reads' => isset($server_status['Key_read_requests']) ? (0.01 * $server_status['Key_read_requests']) : 0,        // depends on Key_write_requests        // normaly nearly 1:1        'Key_writes' => isset($server_status['Key_write_requests']) ? (0.9 * $server_status['Key_write_requests']) : 0,        'Key_buffer_fraction' => 0.5,        // alert if more than 95% of thread cache is in use        'Threads_cached' => isset($server_variables['thread_cache_size']) ? 0.95 * $server_variables['thread_cache_size'] : 0        // higher is better        // variable => min value        //'Handler read key' => '> ',    );?><table class="data sortable noclick" id="serverstatusvariables">    <col class="namecol" />    <col class="valuecol" />    <col class="descrcol" />    <thead>        <tr>            <th><?php echo __('Variable'); ?></th>            <th><?php echo __('Value'); ?></th>            <th><?php echo __('Description'); ?></th>        </tr>    </thead>    <tbody>    <?php    $odd_row = false;    foreach ($server_status as $name => $value) {            $odd_row = !$odd_row;?>        <tr class="<?php echo $odd_row ? 'odd' : 'even'; echo isset($allocationMap[$name])?' s_' . $allocationMap[$name]:''; ?>">            <th class="name"><?php            echo htmlspecialchars(str_replace('_', ' ', $name));            /* Fields containing % are calculated, they can not be described in MySQL documentation */            if (strpos($name, '%') === FALSE) {                 echo PMA_showMySQLDocu('server-status-variables', 'server-status-variables', false, 'statvar_' . $name);            }            ?>            </th>            <td class="value"><span class="formatted"><?php            if (isset($alerts[$name])) {                if ($value > $alerts[$name]) {                    echo '<span class="attention">';                } else {                    echo '<span class="allfine">';                }            }            if ('%' === substr($name, -1, 1)) {                echo htmlspecialchars(PMA_formatNumber($value, 0, 2)) . ' %';            } elseif (strpos($name, 'Uptime') !== false) {                echo htmlspecialchars(PMA_timespanFormat($value));            } elseif (is_numeric($value) && $value == (int) $value && $value > 1000) {                echo htmlspecialchars(PMA_formatNumber($value, 3, 1));            } elseif (is_numeric($value) && $value == (int) $value) {                echo htmlspecialchars(PMA_formatNumber($value, 3, 0));            } elseif (is_numeric($value)) {                echo htmlspecialchars(PMA_formatNumber($value, 3, 1));            } else {                echo htmlspecialchars($value);            }            if (isset($alerts[$name])) {                echo '</span>';            }            ?></span><span style="display:none;" class="original"><?php echo $value; ?></span>            </td>            <td class="descr">            <?php            if (isset($strShowStatus[$name ])) {                echo $strShowStatus[$name];            }            if (isset($links[$name])) {                foreach ($links[$name] as $link_name => $link_url) {                    if ('doc' == $link_name) {                        echo PMA_showMySQLDocu($link_url, $link_url);                    } else {                        echo ' <a href="' . $link_url . '">' . $link_name . '</a>' .                        "\n";                    }                }                unset($link_url, $link_name);            }            ?>            </td>        </tr>    <?php    }    ?>    </tbody>    </table>    <?php}function printMonitor(){    global $server_status, $server_db_isLocal;?>    <div class="tabLinks" style="display:none;">        <a href="#pauseCharts">            <?php echo PMA_getImage('play.png'); ?>            <?php echo __('Start Monitor'); ?>        </a>        <a href="#settingsPopup" rel="popupLink" style="display:none;">            <?php echo PMA_getImage('s_cog.png'); ?>            <?php echo __('Settings'); ?>        </a>        <?php if (!PMA_DRIZZLE) { ?>        <a href="#monitorInstructionsDialog">            <?php echo PMA_getImage('b_help.png'); ?>            <?php echo __('Instructions/Setup'); ?>        </a>        <?php } ?>        <a href="#endChartEditMode" style="display:none;">            <?php echo PMA_getImage('s_okay.png'); ?>            <?php echo __('Done rearranging/editing charts'); ?>        </a>    </div>    <div class="popupContent settingsPopup">        <a href="#addNewChart">            <?php echo PMA_getImage('b_chart.png'); ?>            <?php echo __('Add chart'); ?>        </a>        <a href="#rearrangeCharts"><?php echo PMA_getImage('b_tblops.png'); ?><?php echo __('Rearrange/edit charts'); ?></a>        <div class="clearfloat paddingtop"></div>        <div class="floatleft">            <?php            echo __('Refresh rate') . '<br />';            refreshList('gridChartRefresh', 5, Array(2, 3, 4, 5, 10, 20, 40, 60, 120, 300, 600, 1200));        ?><br />        </div>        <div class="floatleft">            <?php echo __('Chart columns'); ?> <br />            <select name="chartColumns">                <option>1</option>                <option>2</option>                <option>3</option>                <option>4</option>                <option>5</option>                <option>6</option>                <option>7</option>                <option>8</option>                <option>9</option>                <option>10</option>            </select>        </div>        <div class="clearfloat paddingtop">        <b><?php echo __('Chart arrangement'); ?></b> <?php echo PMA_showHint(__('The arrangement of the charts is stored to the browsers local storage. You may want to export it if you have a complicated set up.')); ?><br/>        <a href="#importMonitorConfig"><?php echo __('Import'); ?></a>&nbsp;&nbsp;<a href="#exportMonitorConfig"><?php echo __('Export'); ?></a>&nbsp;&nbsp;<a href="#clearMonitorConfig"><?php echo __('Reset to default'); ?></a>        </div>    </div>    <div id="monitorInstructionsDialog" title="<?php echo __('Monitor Instructions'); ?>" style="display:none;">        <?php echo __('The phpMyAdmin Monitor can assist you in optimizing the server configuration and track down time intensive queries. For the latter you will need to set log_output to \'TABLE\' and have either the slow_query_log or general_log enabled. Note however, that the general_log produces a lot of data and increases server load by up to 15%'); ?>    <?php if (PMA_MYSQL_INT_VERSION < 50106) { ?>        <p>        <?php echo PMA_getImage('s_attention.png'); ?>        <?php            echo __('Unfortunately your Database server does not support logging to table, which is a requirement for analyzing the database logs with phpMyAdmin. Logging to table is supported by MySQL 5.1.6 and onwards. You may still use the server charting features however.');        ?>        </p>    <?php    } else {    ?>        <p></p>        <img class="ajaxIcon" src="<?php echo $GLOBALS['pmaThemeImage']; ?>ajax_clock_small.gif" alt="Loading" />        <div class="ajaxContent"></div>        <div class="monitorUse" style="display:none;">            <p></p>            <?php                echo '<strong>';                echo __('Using the monitor:');                echo '</strong><p>';                echo __('Your browser will refresh all displayed charts in a regular interval. You may add charts and change the refresh rate under \'Settings\', or remove any chart using the cog icon on each respective chart.');                echo '</p><p>';                echo __('To display queries from the logs, select the relevant time span on any chart by holding down the left mouse button and panning over the chart. Once confirmed, this will load a table of grouped queries, there you may click on any occuring SELECT statements to further analyze them.');                echo '</p>';            ?>            <p>            <?php echo PMA_getImage('s_attention.png'); ?>            <?php                echo '<strong>';                echo __('Please note:');                echo '</strong><br />';                echo __('Enabling the general_log may increase the server load by 5-15%. Also be aware that generating statistics from the logs is a load intensive task, so it is advisable to select only a small time span and to disable the general_log and empty its table once monitoring is not required any more.');            ?>            </p>        </div>    <?php } ?>    </div>    <div id="addChartDialog" title="<?php echo __('Add chart'); ?>" style="display:none;">        <div id="tabGridVariables">            <p><input type="text" name="chartTitle" value="<?php echo __('Chart Title'); ?>" /></p>            <input type="radio" name="chartType" value="preset" id="chartPreset" />            <label for="chartPreset"><?php echo __('Preset chart'); ?></label>            <select name="presetCharts"></select><br/>            <input type="radio" name="chartType" value="variable" id="chartStatusVar" checked="checked" />            <label for="chartStatusVar"><?php echo __('Status variable(s)'); ?></label><br/>            <div id="chartVariableSettings">                <label for="chartSeries"><?php echo __('Select series:'); ?></label><br />                <select id="chartSeries" name="varChartList" size="1">                    <option><?php echo __('Commonly monitored'); ?></option>                    <option>Processes</option>                    <option>Questions</option>                    <option>Connections</option>                    <option>Bytes_sent</option>                    <option>Bytes_received</option>                    <option>Threads_connected</option>                    <option>Created_tmp_disk_tables</option>                    <option>Handler_read_first</option>                    <option>Innodb_buffer_pool_wait_free</option>                    <option>Key_reads</option>                    <option>Open_tables</option>                    <option>Select_full_join</option>                    <option>Slow_queries</option>                </select><br />                <label for="variableInput"><?php echo __('or type variable name:'); ?> </label>                <input type="text" name="variableInput" id="variableInput" />                <p></p>                <input type="checkbox" name="differentialValue" id="differentialValue" value="differential" checked="checked" />                <label for="differentialValue"><?php echo __('Display as differential value'); ?></label><br />                <input type="checkbox" id="useDivisor" name="useDivisor" value="1" />                <label for="useDivisor"><?php echo __('Apply a divisor'); ?></label>                <span class="divisorInput" style="display:none;">                    <input type="text" name="valueDivisor" size="4" value="1" />                    (<a href="#kibDivisor"><?php echo __('KiB'); ?></a>, <a href="#mibDivisor"><?php echo __('MiB'); ?></a>)                </span><br />                <input type="checkbox" id="useUnit" name="useUnit" value="1" />                <label for="useUnit"><?php echo __('Append unit to data values'); ?></label>                <span class="unitInput" style="display:none;">                    <input type="text" name="valueUnit" size="4" value="" />                </span>                <p>                    <a href="#submitAddSeries"><b><?php echo __('Add this series'); ?></b></a>                    <span id="clearSeriesLink" style="display:none;">                       | <a href="#submitClearSeries"><?php echo __('Clear series'); ?></a>                    </span>                </p>                <?php echo __('Series in Chart:'); ?><br/>                <span id="seriesPreview">                <i><?php echo __('None'); ?></i>                </span>            </div>        </div>    </div>    <!-- For generic use -->    <div id="emptyDialog" title="Dialog" style="display:none;">    </div>    <?php if (!PMA_DRIZZLE) { ?>    <div id="logAnalyseDialog" title="<?php echo __('Log statistics'); ?>" style="display:none;">        <p> <?php echo __('Selected time range:'); ?>        <input type="text" name="dateStart" class="datetimefield" value="" /> -        <input type="text" name="dateEnd" class="datetimefield" value="" /></p>        <input type="checkbox" id="limitTypes" value="1" checked="checked" />        <label for="limitTypes">            <?php echo __('Only retrieve SELECT,INSERT,UPDATE and DELETE Statements'); ?>        </label>        <br/>        <input type="checkbox" id="removeVariables" value="1" checked="checked" />        <label for="removeVariables">            <?php echo __('Remove variable data in INSERT statements for better grouping'); ?>        </label>        <?php        echo '<p>';        echo __('Choose from which log you want the statistics to be generated from.');        echo '</p><p>';        echo __('Results are grouped by query text.');        echo '</p>';        ?>    </div>    <div id="queryAnalyzerDialog" title="<?php echo __('Query analyzer'); ?>" style="display:none;">        <textarea id="sqlquery"> </textarea>        <p></p>        <div class="placeHolder"></div>    </div>    <?php } ?>    <table border="0" class="clearfloat" id="chartGrid">    </table>    <div id="logTable">        <br/>    </div>    <script type="text/javascript">        variableNames = [ <?php            $i=0;            foreach ($server_status as $name=>$value) {                if (is_numeric($value)) {                    if ($i++ > 0) {                        echo ", ";                    }                    echo "'" . $name . "'";                }            }            ?> ];    </script><?php}/* Builds a <select> list for refresh rates */function refreshList($name, $defaultRate=5, $refreshRates=Array(1, 2, 5, 10, 20, 40, 60, 120, 300, 600)){?>    <select name="<?php echo $name; ?>" id="id_<?php echo $name; ?>">        <?php            foreach ($refreshRates as $rate) {                $selected = ($rate == $defaultRate)?' selected="selected"':'';                if ($rate<60) {                    echo '<option value="' . $rate . '"' . $selected . '>' . sprintf(_ngettext('%d second', '%d seconds', $rate), $rate) . '</option>';                } else {                    echo '<option value="' . $rate . '"' . $selected . '>' . sprintf(_ngettext('%d minute', '%d minutes', $rate/60), $rate/60) . '</option>';                }            }        ?>    </select><?php}/** * cleanup of some deprecated values * * @param array &$server_status */function cleanDeprecated(&$server_status){    $deprecated = array(        'Com_prepare_sql' => 'Com_stmt_prepare',        'Com_execute_sql' => 'Com_stmt_execute',        'Com_dealloc_sql' => 'Com_stmt_close',    );    foreach ($deprecated as $old => $new) {        if (isset($server_status[$old]) && isset($server_status[$new])) {            unset($server_status[$old]);        }    }}/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Display form for changing/adding table fields/columns * * included by tbl_addfield.php, -_alter.php, -_create.php * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Check parameters */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';PMA_checkParameters(array('db', 'table', 'action', 'num_fields'));// Get available character sets and storage enginesrequire_once './libraries/mysql_charsets.lib.php';require_once './libraries/StorageEngine.class.php';/** * Class for partition management */require_once './libraries/Partition.class.php';// load additional configuration variablesif (PMA_DRIZZLE) {    include_once './libraries/data_drizzle.inc.php';} else {    include_once './libraries/data_mysql.inc.php';}$length_values_input_size = 8;$_form_params = array(    'db' => $db,);if ($action == 'tbl_create.php') {    $_form_params['reload'] = 1;} elseif ($action == 'tbl_addfield.php') {    $_form_params['field_where'] = $_REQUEST['field_where'];    $_form_params['after_field'] = $_REQUEST['after_field'];    $_form_params['table'] = $table;} else {    $_form_params['table'] = $table;}if (isset($num_fields)) {    $_form_params['orig_num_fields'] = $num_fields;}if (isset($_REQUEST['field_where'])) {    $_form_params['orig_field_where'] = $_REQUEST['field_where'];}if (isset($_REQUEST['after_field'])) {    $_form_params['orig_after_field'] = $_REQUEST['after_field'];}if (isset($selected) && is_array($selected)) {    foreach ($selected as $o_fld_nr => $o_fld_val) {        $_form_params['selected[' . $o_fld_nr . ']'] = $o_fld_val;        if (! isset($true_selected)) {            $_form_params['true_selected[' . $o_fld_nr . ']'] = $o_fld_val;        }    }    if (isset($true_selected) && is_array($true_selected)) {        foreach ($true_selected as $o_fld_nr => $o_fld_val) {            $_form_params['true_selected[' . $o_fld_nr . ']'] = $o_fld_val;        }    }} elseif (isset($_REQUEST['field'])) {    $_form_params['orig_field'] = $_REQUEST['field'];    if (isset($orig_field)) {        $_form_params['true_selected[]'] = $orig_field;    } else {        $_form_params['true_selected[]'] = $_REQUEST['field'];    }}$is_backup = ($action != 'tbl_create.php' && $action != 'tbl_addfield.php');$header_cells = array();$content_cells = array();$header_cells[] = __('Name');$header_cells[] = __('Type')     . ($GLOBALS['cfg']['ReplaceHelpImg']        ? PMA_showMySQLDocu('SQL-Syntax', 'data-types')        : '<br /><span style="font-weight: normal">' . PMA_showMySQLDocu('SQL-Syntax', 'data-types')     . '</span>');$header_cells[] = __('Length/Values') . PMA_showHint(__('If column type is "enum" or "set", please enter the values using this format: \'a\',\'b\',\'c\'...<br />If you ever need to put a backslash ("\") or a single quote ("\'") amongst those values, precede it with a backslash (for example \'\\\\xyz\' or \'a\\\'b\').'));$header_cells[] = __('Default') . PMA_showHint(__('For default values, please enter just a single value, without backslash escaping or quotes, using this format: a'));$header_cells[] = __('Collation');$header_cells[] = __('Attributes');$header_cells[] = __('Null');// We could remove this 'if' and let the key information be shown and// editable. However, for this to work, tbl_alter must be modified to use the// key fields, as tbl_addfield does.if (!$is_backup) {    $header_cells[] = __('Index');}$header_cells[] = '<abbr title="AUTO_INCREMENT">A_I</abbr>';require_once './libraries/transformations.lib.php';$cfgRelation = PMA_getRelationsParam();$comments_map = array();$mime_map = array();$available_mime = array();$comments_map = PMA_getComments($db, $table);$header_cells[] = __('Comments');if ($cfgRelation['mimework'] && $cfg['BrowseMIME']) {    $mime_map = PMA_getMIME($db, $table);    $available_mime = PMA_getAvailableMIMEtypes();    $hint = '<br />' .        sprintf(__('For a list of available transformation options and their MIME type transformations, click on %stransformation descriptions%s'),            '<a href="transformation_overview.php?'            . PMA_generate_common_url($db, $table) . '" target="_blank">',            '</a>');    $header_cells[] = __('MIME type');    $header_cells[] = __('Browser transformation');    $header_cells[] = __('Transformation options')        . PMA_showHint(__('Please enter the values for transformation options using this format: \'a\', 100, b,\'c\'...<br />If you ever need to put a backslash ("\") or a single quote ("\'") amongst those values, precede it with a backslash (for example \'\\\\xyz\' or \'a\\\'b\').') . $hint);}//  workaround for field_fulltext, because its submitted indizes contain//  the index as a value, not a key. Inserted here for easier maintaineance//  and less code to change in existing files.if (isset($field_fulltext) && is_array($field_fulltext)) {    foreach ($field_fulltext as $fulltext_nr => $fulltext_indexkey) {        $submit_fulltext[$fulltext_indexkey] = $fulltext_indexkey;    }}for ($i = 0; $i < $num_fields; $i++) {    if (! empty($regenerate)) {        // An error happened with previous inputs, so we will restore the data        // to embed it once again in this form.        $row['Field']     = (isset($_REQUEST['field_name'][$i]) ? $_REQUEST['field_name'][$i] : false);        $row['Type']      = (isset($_REQUEST['field_type'][$i]) ? $_REQUEST['field_type'][$i] : false);        $row['Collation'] = (isset($_REQUEST['field_collation'][$i]) ? $_REQUEST['field_collation'][$i] : '');        $row['Null']      = (isset($_REQUEST['field_null'][$i]) ? $_REQUEST['field_null'][$i] : '');        if (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'primary_' . $i) {            $row['Key'] = 'PRI';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'index_' . $i) {            $row['Key'] = 'MUL';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'unique_' . $i) {            $row['Key'] = 'UNI';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'fulltext_' . $i) {            $row['Key'] = 'FULLTEXT';        } else {            $row['Key'] = '';        }        // put None in the drop-down for Default, when someone adds a field        $row['DefaultType']  = (isset($_REQUEST['field_default_type'][$i]) ? $_REQUEST['field_default_type'][$i] : 'NONE');        $row['DefaultValue'] = (isset($_REQUEST['field_default_value'][$i]) ? $_REQUEST['field_default_value'][$i] : '');        switch ($row['DefaultType']) {            case 'NONE' :                $row['Default'] = null;                break;            case 'USER_DEFINED' :                $row['Default'] = $row['DefaultValue'];                break;            case 'NULL' :            case 'CURRENT_TIMESTAMP' :                $row['Default'] = $row['DefaultType'];                break;        }        $row['Extra']     = (isset($_REQUEST['field_extra'][$i]) ? $_REQUEST['field_extra'][$i] : false);        $row['Comment']   = (isset($submit_fulltext[$i]) && ($submit_fulltext[$i] == $i) ? 'FULLTEXT' : false);        $submit_length    = (isset($_REQUEST['field_length'][$i]) ? $_REQUEST['field_length'][$i] : false);        $submit_attribute = (isset($_REQUEST['field_attribute'][$i]) ? $_REQUEST['field_attribute'][$i] : false);        $submit_default_current_timestamp = (isset($_REQUEST['field_default_current_timestamp'][$i]) ? true : false);        if (isset($_REQUEST['field_comments'][$i])) {            $comments_map[$row['Field']] = $_REQUEST['field_comments'][$i];        }        if (isset($_REQUEST['field_mimetype'][$i])) {            $mime_map[$row['Field']]['mimetype'] = $_REQUEST['field_mimetype'][$i];        }        if (isset($_REQUEST['field_transformation'][$i])) {            $mime_map[$row['Field']]['transformation'] = $_REQUEST['field_transformation'][$i];        }        if (isset($_REQUEST['field_transformation_options'][$i])) {            $mime_map[$row['Field']]['transformation_options'] = $_REQUEST['field_transformation_options'][$i];        }    } elseif (isset($fields_meta[$i])) {        $row = $fields_meta[$i];        switch ($row['Default']) {            case null:                if ($row['Null'] == 'YES') {                    $row['DefaultType']  = 'NULL';                    $row['DefaultValue'] = '';    // SHOW FULL COLUMNS does not report the case when there is a DEFAULT value    // which is empty so we need to use the results of SHOW CREATE TABLE                } elseif (isset($row) && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['default_value'])) {                    $row['DefaultType']  = 'USER_DEFINED';                    $row['DefaultValue'] = $row['Default'];                } else {                    $row['DefaultType']  = 'NONE';                    $row['DefaultValue'] = '';                }                break;            case 'CURRENT_TIMESTAMP':                $row['DefaultType']  = 'CURRENT_TIMESTAMP';                $row['DefaultValue'] = '';                break;            default:                $row['DefaultType']  = 'USER_DEFINED';                $row['DefaultValue'] = $row['Default'];                break;        }    }    if (isset($row['Type'])) {        $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);        if ($extracted_fieldspec['type'] == 'bit') {            $row['Default'] = PMA_convert_bit_default_value($row['Default']);        }    }    // Cell index: If certain fields get left out, the counter shouldn't change.    $ci = 0;    // Everytime a cell shall be left out the STRG-jumping feature, $ci_offset    // has to be incremented ($ci_offset++)    $ci_offset = -1;    // old column name    if ($is_backup) {        if (! empty($true_selected[$i])) {            $_form_params['field_orig[' . $i . ']'] = $true_selected[$i];        } elseif (isset($row['Field'])) {            $_form_params['field_orig[' . $i . ']'] = $row['Field'];        } else {            $_form_params['field_orig[' . $i . ']'] = '';        }    }    // column name    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_name[' . $i . ']"'        . ' maxlength="64" class="textfield" title="' . __('Column') . '"'        . ' size="10"'        . ' value="' . (isset($row['Field']) ? htmlspecialchars($row['Field']) : '') . '"'        . ' />';    $ci++;    // column type    $select_id = 'field_' . $i . '_' . ($ci - $ci_offset);    $content_cells[$i][$ci] = '<select class="column_type" name="field_type[' . $i . ']"'        .' id="' . $select_id . '">';    if (empty($row['Type'])) {        // creating a column        $row['Type'] = '';        $type        = '';        $length = '';    } else {        $type = $extracted_fieldspec['type'];        $length = $extracted_fieldspec['spec_in_brackets'];    }    // some types, for example longtext, are reported as    // "longtext character set latin7" when their charset and / or collation    // differs from the ones of the corresponding database.    $tmp = strpos($type, 'character set');    if ($tmp) {        $type = substr($type, 0, $tmp - 1);    }    if (isset($submit_length) && $submit_length != false) {        $length = $submit_length;    }    // rtrim the type, for cases like "float unsigned"    $type = rtrim($type);    $type_upper = strtoupper($type);    $content_cells[$i][$ci] .= PMA_getSupportedDatatypes(true, $type_upper);    $content_cells[$i][$ci] .= '    </select>';    $ci++;    // old column length    if ($is_backup) {        $_form_params['field_length_orig[' . $i . ']'] = $length;    }    // column length    $length_to_display = $length;    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_length[' . $i . ']" size="' . $length_values_input_size . '"'        . ' value="' . htmlspecialchars($length_to_display) . '"'        . ' class="textfield" />'        . '<p class="enum_notice" id="enum_notice_' . $i . '_' . ($ci - $ci_offset) . '">';    $content_cells[$i][$ci] .= __('ENUM or SET data too long?')        . '<a onclick="return false;" href="enum_editor.php?'        . PMA_generate_common_url()        . '&amp;values=' . urlencode($length_to_display)        . '&amp;field=' .  (isset($row['Field']) ? urlencode($row['Field']) : "")        . '" class="open_enum_editor" target="_blank"> '        . __('Get more editing space') . '</a>'        . '</p>';    $ci++;    // column default    /**     * having NULL enabled does not implicit having Default with NULL     *    if (isset($row)      && ! isset($row['Default']) && isset($row['Null']) && $row['Null'] == 'YES') {        $row['Default'] = 'NULL';    }     */    // old column default    if ($is_backup) {        $_form_params['field_default_orig[' . $i . ']']            = (isset($row['Default']) ? $row['Default'] : '');    }    // here we put 'NONE' as the default value of drop-down; otherwise    // users would have problems if they forget to enter the default    // value (example, for an INT)    $default_options = array(        'NONE'              =>  _pgettext('for default', 'None'),        'USER_DEFINED'      =>  __('As defined:'),        'NULL'              => 'NULL',        'CURRENT_TIMESTAMP' => 'CURRENT_TIMESTAMP',    );    // for a TIMESTAMP, do not show the string "CURRENT_TIMESTAMP" as a default value    if ($type_upper == 'TIMESTAMP'     && ! empty($default_current_timestamp)     && isset($row['Default'])) {        $row['Default'] = '';    }    if ($type_upper == 'BIT') {        $row['DefaultValue'] = PMA_convert_bit_default_value($row['DefaultValue']);    }    $content_cells[$i][$ci] = '<select name="field_default_type[' . $i . ']" class="default_type">';    foreach ($default_options as $key => $value) {        $content_cells[$i][$ci] .= '<option value="' . $key . '"';        // is only set when we go back to edit a field's structure        if (isset($row['DefaultType']) && $row['DefaultType'] == $key) {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= ' >' . $value . '</option>';    }    $content_cells[$i][$ci] .= '</select>';    $content_cells[$i][$ci] .= '<br />';    $content_cells[$i][$ci] .= '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_default_value[' . $i . ']" size="12"'        . ' value="' . (isset($row['DefaultValue']) ? htmlspecialchars($row['DefaultValue']) : '') . '"'        . ' class="textfield default_value" />';    $ci++;    // column collation    $tmp_collation          = empty($row['Collation']) ? null : $row['Collation'];    $content_cells[$i][$ci] = PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_COLLATION, 'field_collation[' . $i . ']',        'field_' . $i . '_' . ($ci - $ci_offset), $tmp_collation, false);    unset($tmp_collation);    $ci++;    // column attribute    $content_cells[$i][$ci] = '<select style="font-size: 70%;"'        . ' name="field_attribute[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '">';    $attribute     = '';    if (isset($extracted_fieldspec)) {        $attribute = $extracted_fieldspec['attribute'];    }    if (isset($row['Extra']) && $row['Extra'] == 'on update CURRENT_TIMESTAMP') {        $attribute = 'on update CURRENT_TIMESTAMP';    }    if (isset($submit_attribute) && $submit_attribute != false) {        $attribute = $submit_attribute;    }    // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the    // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe    // the latter.    if (PMA_MYSQL_INT_VERSION < 50025     && isset($row['Field'])     && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['type'])     && $analyzed_sql[0]['create_table_fields'][$row['Field']]['type'] == 'TIMESTAMP'     && $analyzed_sql[0]['create_table_fields'][$row['Field']]['timestamp_not_null'] == true) {        $row['Null'] = '';    }    // MySQL 4.1.2+ TIMESTAMP options    // (if on_update_current_timestamp is set, then it's TRUE)    if (isset($row['Field'])     && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['on_update_current_timestamp'])) {        $attribute = 'on update CURRENT_TIMESTAMP';    }    if ((isset($row['Field'])      && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['default_current_timestamp']))     || (isset($submit_default_current_timestamp) && $submit_default_current_timestamp)) {        $default_current_timestamp = true;    } else {        $default_current_timestamp = false;    }    $cnt_attribute_types = count($cfg['AttributeTypes']);    for ($j = 0; $j < $cnt_attribute_types; $j++) {        $content_cells[$i][$ci] .= '                <option value="'. $cfg['AttributeTypes'][$j] . '"';        if (strtoupper($attribute) == strtoupper($cfg['AttributeTypes'][$j])) {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>' . $cfg['AttributeTypes'][$j] . '</option>';    }    $content_cells[$i][$ci] .= '</select>';    $ci++;    // column NULL    $content_cells[$i][$ci] = '<input name="field_null[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '"';    if (! empty($row['Null']) && $row['Null'] != 'NO' && $row['Null'] != 'NOT NULL') {        $content_cells[$i][$ci] .= ' checked="checked"';    }    $content_cells[$i][$ci] .= ' type="checkbox" value="NULL" />';    $ci++;    // column indexes    // See my other comment about removing this 'if'.    if (!$is_backup) {        $content_cells[$i][$ci] = '<select name="field_key[' . $i . ']"'            . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '">';        $content_cells[$i][$ci] .= '<option value="none_' . $i . '">---</option>';        $content_cells[$i][$ci] .= '<option value="primary_' . $i . '" title="' . __('Primary') . '"';        if (isset($row['Key']) && $row['Key'] == 'PRI') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>PRIMARY</option>';        $content_cells[$i][$ci] .= '<option value="unique_' . $i . '" title="' . __('Unique') . '"';        if (isset($row['Key']) && $row['Key'] == 'UNI') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>UNIQUE</option>';        $content_cells[$i][$ci] .= '<option value="index_' . $i . '" title="' . __('Index') . '"';        if (isset($row['Key']) && $row['Key'] == 'MUL') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>INDEX</option>';        if (!PMA_DRIZZLE) {            $content_cells[$i][$ci] .= '<option value="fulltext_' . $i . '" title="' . __('Fulltext') . '"';            if (isset($row['Key']) && $row['Key'] == 'FULLTEXT') {                $content_cells[$i][$ci] .= ' selected="selected"';            }            $content_cells[$i][$ci] .= '>FULLTEXT</option>';        }        $content_cells[$i][$ci] .= '</select>';        $ci++;    } // end if ($action ==...)    // column auto_increment    $content_cells[$i][$ci] = '<input name="field_extra[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '"';    if (isset($row['Extra']) && strtolower($row['Extra']) == 'auto_increment') {        $content_cells[$i][$ci] .= ' checked="checked"';    }    $content_cells[$i][$ci] .= ' type="checkbox" value="AUTO_INCREMENT" />';    $ci++;    // column comments    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_comments[' . $i . ']" size="12"'        . ' value="' . (isset($row['Field']) && is_array($comments_map) && isset($comments_map[$row['Field']]) ?  htmlspecialchars($comments_map[$row['Field']]) : '') . '"'        . ' class="textfield" />';    $ci++;    // column MIME-types    if ($cfgRelation['mimework'] && $cfg['BrowseMIME'] && $cfgRelation['commwork']) {        $content_cells[$i][$ci] = '<select id="field_' . $i . '_' . ($ci - $ci_offset) . '" size="1" name="field_mimetype[' . $i . ']">';        $content_cells[$i][$ci] .= '    <option value="">&nbsp;</option>';        if (is_array($available_mime['mimetype'])) {            foreach ($available_mime['mimetype'] AS $mimekey => $mimetype) {                $checked = (isset($row['Field']) && isset($mime_map[$row['Field']]['mimetype']) && ($mime_map[$row['Field']]['mimetype'] == str_replace('/', '_', $mimetype)) ? 'selected ' : '');                $content_cells[$i][$ci] .= '    <option value="' . str_replace('/', '_', $mimetype) . '" ' . $checked . '>' . htmlspecialchars($mimetype) . '</option>';            }        }        $content_cells[$i][$ci] .= '</select>';        $ci++;        $content_cells[$i][$ci] = '<select id="field_' . $i . '_' . ($ci - $ci_offset) . '" size="1" name="field_transformation[' . $i . ']">';        $content_cells[$i][$ci] .= '    <option value="" title="' . __('None') . '"></option>';        if (is_array($available_mime['transformation'])) {            foreach ($available_mime['transformation'] AS $mimekey => $transform) {                $checked = (isset($row['Field']) && isset($mime_map[$row['Field']]['transformation']) && (preg_match('@' . preg_quote($available_mime['transformation_file'][$mimekey]) . '3?@i', $mime_map[$row['Field']]['transformation'])) ? 'selected ' : '');                $tooltip = PMA_getTransformationDescription($available_mime['transformation_file'][$mimekey], false);                $content_cells[$i][$ci] .= '<option value="' . $available_mime['transformation_file'][$mimekey] . '" ' . $checked . ' title="' . htmlspecialchars($tooltip) . '">' . htmlspecialchars($transform) . '</option>';            }        }        $content_cells[$i][$ci] .= '</select>';        $ci++;        $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'            . ' type="text" name="field_transformation_options[' . $i . ']"'            . ' size="16" class="textfield"'            . ' value="' . (isset($row['Field']) && isset($mime_map[$row['Field']]['transformation_options']) ?  htmlspecialchars($mime_map[$row['Field']]['transformation_options']) : '') . '"'            . ' />';        //$ci++;    }} // end for    ?><script src="./js/keyhandler.js" type="text/javascript"></script><script type="text/javascript">// <![CDATA[var switch_movement = 0;document.onkeydown = onKeyDownArrowsHandler;// ]]></script>    <form id="<?php echo ($action == 'tbl_create.php' ? 'create_table' : 'append_fields'); ?>_form" method="post" action="<?php echo $action; ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?phpecho PMA_generate_common_hidden_inputs($_form_params);unset($_form_params);if ($action == 'tbl_create.php') {    ?>    <table>        <tr><td><?php echo __('Table name'); ?>:&nbsp;<input type="text" name="table" size="40" maxlength="80"                value="<?php echo (isset($_REQUEST['table']) ? htmlspecialchars($_REQUEST['table']) : ''); ?>"                class="textfield" />            </td>            <td>                <?php if ($action == 'tbl_create.php' || $action == 'tbl_addfield.php') { ?>                <?php echo sprintf(__('Add %s column(s)'), '<input type="text" id="added_fields" name="added_fields" size="2" value="1" onfocus="this.select()" />'); ?>                <input type="submit" name="submit_num_fields" value="<?php echo __('Go'); ?>"                    onclick="return checkFormElementInRange(this.form, 'added_fields', '<?php echo str_replace('\'', '\\\'', __('You have to add at least one column.')); ?>', 1)"                />                <?php } ?>            </td>        </tr>    </table>    <?php}if (is_array($content_cells) && is_array($header_cells)) {    // last row is for javascript insert    //$empty_row = array_pop($content_cells);    echo '<table id="table_columns" class="noclick">';    echo '<caption class="tblHeaders">' . __('Structure') . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_TABLE') . '</caption>';        ?><tr>    <?php foreach ($header_cells as $header_val) { ?>    <th><?php echo $header_val; ?></th>    <?php } ?></tr>    <?php    $odd_row = true;    foreach ($content_cells as $content_row) {        echo '<tr class="' . ($odd_row ? 'odd' : 'even') . '">';        $odd_row = ! $odd_row;        if (is_array($content_row)) {            foreach ($content_row as $content_row_val) {                ?>    <td align="center"><?php echo $content_row_val; ?></td>                <?php            }        }        echo '</tr>';    }    ?></table><br />    <?php}/** * needs to be finished * *if ($display_type == 'horizontal') {    $new_field = '';    foreach ($empty_row as $content_row_val) {        $new_field .= '<td align="center">' . $content_row_val . '</td>';    }    ?><script type="text/javascript">// <![CDATA[var odd_row = <?php echo $odd_row; ?>;function addField(){    var new_fields = document.getElementById('added_fields').value;    var new_field_container = document.getElementById('table_columns');    var new_field = '<?php echo preg_replace('|\s+|', ' ', preg_replace('|\'|', '\\\'', $new_field)); ?>';    var i = 0;    for (i = 0; i < new_fields; i++) {        if (odd_row) {            new_field_container.innerHTML += '<tr class="odd">' + new_field + '</tr>';        } else {            new_field_container.innerHTML += '<tr class="even">' + new_field + '</tr>';        }        odd_row = ! odd_row;    }    return true;}// ]]></script>    <?php} */if ($action == 'tbl_create.php') {    ?>    <table>    <tr valign="top">        <th><?php echo __('Table comments'); ?>:&nbsp;</th>        <td width="25">&nbsp;</td>        <th><?php echo __('Storage Engine'); ?>:            <?php echo PMA_showMySQLDocu('Storage_engines', 'Storage_engines'); ?>        </th>        <td width="25">&nbsp;</td>        <th><?php echo __('Collation') ;?>:&nbsp;</th>    </tr>    <tr><td><input type="text" name="comment" size="40" maxlength="80"                value="<?php echo (isset($_REQUEST['comment']) ? htmlspecialchars($_REQUEST['comment']) : ''); ?>"                class="textfield" />        </td>        <td width="25">&nbsp;</td>        <td>    <?php    echo PMA_StorageEngine::getHtmlSelect('tbl_type', null,        (isset($_REQUEST['tbl_type']) ? $_REQUEST['tbl_type'] : null));    ?>        </td>        <td width="25">&nbsp;</td>        <td>    <?php    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION, 'tbl_collation',        null, (isset($_REQUEST['tbl_collation']) ? $_REQUEST['tbl_collation'] : null), false, 3);    ?>        </td>    </tr>    <?php    if (PMA_Partition::havePartitioning()) {        ?>    <tr valign="top">        <th><?php echo __('PARTITION definition'); ?>:&nbsp;<?php echo PMA_showMySQLDocu('Partitioning', 'Partitioning'); ?>        </th>    </tr>    <tr>        <td>            <textarea name="partition_definition" id="partitiondefinition"                cols="<?php echo $GLOBALS['cfg']['TextareaCols'];?>"                rows="<?php echo $GLOBALS['cfg']['TextareaRows'];?>"                dir="<?php echo $GLOBALS['text_dir'];?>"><?php echo (isset($_REQUEST['partition_definition']) ? htmlspecialchars($_REQUEST['partition_definition']) : ''); ?></textarea>        </td>    </tr>        <?php    }    ?>    </table>    <br />    <?php} // end if ($action == 'tbl_create.php')?><fieldset class="tblFooters">    <input type="submit" name="do_save_data" value="<?php echo __('Save'); ?>" /></fieldset><div id="properties_message"></div></form><div id="popup_background"></div>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'import.js';/** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';$import_type = 'server';require './libraries/display_import.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays the pma logo, links and db and server selection in left frame * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (empty($query_url)) {    // avoid putting here $db because it could display a db name    // to which the next user does not have access    $query_url = PMA_generate_common_url();}// display Logo, depending on $GLOBALS['cfg']['LeftDisplayLogo']if ($GLOBALS['cfg']['LeftDisplayLogo']) {    $logo = 'phpMyAdmin';    if (@file_exists($GLOBALS['pmaThemeImage'] . 'logo_left.png')) {        $logo = '<img src="' . $GLOBALS['pmaThemeImage'] . 'logo_left.png" '            .'alt="' . $logo . '" id="imgpmalogo" />';    } elseif (@file_exists($GLOBALS['pmaThemeImage'] . 'pma_logo2.png')) {        $logo = '<img src="' . $GLOBALS['pmaThemeImage'] . 'pma_logo2.png" '            .'alt="' . $logo . '" id="imgpmalogo" />';    }    echo '<div id="pmalogo">' . "\n";    if ($GLOBALS['cfg']['LeftLogoLink']) {        echo '<a href="' . htmlspecialchars($GLOBALS['cfg']['LeftLogoLink']);        switch ($GLOBALS['cfg']['LeftLogoLinkWindow']) {            case 'new':                echo '" target="_blank"';                break;            case 'main':                // do not add our parameters for an external link                if (substr(strtolower($GLOBALS['cfg']['LeftLogoLink']), 0, 4) !== '://') {                    echo '?' . $query_url . '" target="frame_content"';                } else {                    echo '" target="_blank"';                }        }        echo '>' . $logo . '</a>' . "\n";    } else {        echo $logo . "\n";    }    echo '</div>' . "\n";} // end of display logo?><div id="leftframelinks"><?php    echo '<a href="main.php?' . $query_url . '"'        .' title="' . __('Home') . '">'        .($GLOBALS['cfg']['MainPageIconic']            ? PMA_getImage('b_home.png', __('Home'))            : __('Home'))        .'</a>' . "\n";    // if we have chosen server    if ($server != 0) {        // Logout for advanced authentication        if ($GLOBALS['cfg']['Server']['auth_type'] != 'config') {            echo ($GLOBALS['cfg']['MainPageIconic'] ? '' : ' - ');            echo '<a href="index.php?' . $query_url . '&amp;old_usr='                .urlencode($PHP_AUTH_USER) . '" target="_parent"'                .' title="' . __('Log out') . '" >'                .($GLOBALS['cfg']['MainPageIconic']                    ? PMA_getImage('s_loggoff.png', __('Log out'))                    : __('Log out'))                .'</a>' . "\n";        } // end if ($GLOBALS['cfg']['Server']['auth_type'] != 'config'        $anchor = 'querywindow.php?' . PMA_generate_common_url($db, $table);        if ($GLOBALS['cfg']['MainPageIconic']) {            $query_frame_link_text = PMA_getImage('b_selboard.png', __('Query window'));        } else {            echo '<br />' . "\n";            $query_frame_link_text = __('Query window');        }        echo '<a href="' . $anchor . '&amp;no_js=true"'            .' title="' . __('Query window') . '"';        echo ' onclick="if (window.parent.open_querywindow()) return false;"';        echo '>' . $query_frame_link_text . '</a>' . "\n";    } // end if ($server != 0)    echo '    <a href="Documentation.html" target="documentation"'        .' title="' . __('phpMyAdmin documentation') . '" >';    if ($GLOBALS['cfg']['MainPageIconic']) {        echo PMA_getImage('b_docs.png', __('phpMyAdmin documentation'));    } else {        echo '<br />' . __('phpMyAdmin documentation');    }    echo '</a>';    $documentation_link = PMA_showMySQLDocu('', '', true);    if ($GLOBALS['cfg']['MainPageIconic']) {        echo $documentation_link . "\n";    } else {        preg_match('/<a[^>]*>/', $documentation_link, $matches);        $link = $matches[0];        echo substr($link, 0, strlen($link) - 1) . ' title="' . __('Documentation') . '" >'            . '<br />' . __('Documentation') . '</a>';    }    $params = array('uniqid' => uniqid());    if (!empty($GLOBALS['db'])) {        $params['db'] = $GLOBALS['db'];    }    echo '<a href="navigation.php?' . PMA_generate_common_url($params)        . '" title="' . __('Reload navigation frame') . '" target="frame_navigation">';    if ($GLOBALS['cfg']['MainPageIconic']) {        echo PMA_getImage('s_reload', __('Reload navigation frame'));    } else {        echo '<br />' . __('Reload navigation frame');    }    echo '</a>';echo '</div>' . "\n";/** * Displays the MySQL servers choice form */if ($GLOBALS['cfg']['LeftDisplayServers'] && (count($GLOBALS['cfg']['Servers']) > 1 || $server == 0 && count($GLOBALS['cfg']['Servers']) == 1)) {    echo '<div id="serverinfo">';    include './libraries/select_server.lib.php';    PMA_select_server(true, true);    echo '</div><br />';} // end if LeftDisplayServers?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface to the improved MySQL extension (MySQLi) * * @package PhpMyAdmin-DBI-MySQLi */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/logging.lib.php';/** * MySQL client API */if (!defined('PMA_MYSQL_CLIENT_API')) {    $client_api = explode('.', mysqli_get_client_info());    define('PMA_MYSQL_CLIENT_API', (int)sprintf('%d%02d%02d', $client_api[0], $client_api[1], intval($client_api[2])));    unset($client_api);}/** * some PHP versions are reporting extra messages like "No index used in query" */mysqli_report(MYSQLI_REPORT_OFF);/** * some older mysql client libs are missing these constants ... */if (! defined('MYSQLI_BINARY_FLAG')) {   define('MYSQLI_BINARY_FLAG', 128);}/** * @see http://bugs.php.net/36007 */if (! defined('MYSQLI_TYPE_NEWDECIMAL')) {    define('MYSQLI_TYPE_NEWDECIMAL', 246);}if (! defined('MYSQLI_TYPE_BIT')) {    define('MYSQLI_TYPE_BIT', 16);}// for Drizzleif (! defined('MYSQLI_TYPE_VARCHAR')) {    define('MYSQLI_TYPE_VARCHAR', 15);}/** * Helper function for connecting to the database server * * @param   mysqli  $link * @param   string  $host * @param   string  $user * @param   string  $password * @param   string  $dbname * @param   int     $server_port * @param   string  $server_socket * @param   int     $client_flags * @param   bool    $persistent * @return  bool */function PMA_DBI_real_connect($link, $host, $user, $password, $dbname, $server_port, $server_socket, $client_flags = null, $persistent = false){    global $cfg;    // mysqli persistent connections only on PHP 5.3+    if (PMA_PHP_INT_VERSION >= 50300) {        if ($cfg['PersistentConnections'] || $persistent) {            $host = 'p:' . $host;        }    }    if ($client_flags === null) {        return @mysqli_real_connect(            $link,            $host,            $user,            $password,            $dbname,            $server_port,            $server_socket        );    } else {        return @mysqli_real_connect(            $link,            $host,            $user,            $password,            $dbname,            $server_port,            $server_socket,            $client_flags        );    }}/** * connects to the database server * * @param   string  $user           mysql user name * @param   string  $password       mysql user password * @param   bool    $is_controluser * @param   array   $server host/port/socket * @param   bool    $auxiliary_connection (when true, don't go back to login if connection fails) * @return  mixed   false on error or a mysqli object on success */function PMA_DBI_connect($user, $password, $is_controluser = false, $server = null, $auxiliary_connection = false){    global $cfg;    if ($server) {        $server_port   = (empty($server['port']))            ? false            : (int)$server['port'];        $server_socket = (empty($server['socket']))            ? ''            : $server['socket'];        $server['host'] = (empty($server['host']))            ? 'localhost'            : $server['host'];    } else {        $server_port   = (empty($cfg['Server']['port']))            ? false            : (int) $cfg['Server']['port'];        $server_socket = (empty($cfg['Server']['socket']))            ? null            : $cfg['Server']['socket'];    }    // NULL enables connection to the default socket    $link = mysqli_init();    mysqli_options($link, MYSQLI_OPT_LOCAL_INFILE, true);    $client_flags = 0;    /* Optionally compress connection */    if ($cfg['Server']['compress'] && defined('MYSQLI_CLIENT_COMPRESS')) {        $client_flags |= MYSQLI_CLIENT_COMPRESS;    }    /* Optionally enable SSL */    if ($cfg['Server']['ssl'] && defined('MYSQLI_CLIENT_SSL')) {        $client_flags |= MYSQLI_CLIENT_SSL;    }    if (!$server) {        $return_value = @PMA_DBI_real_connect(            $link,            $cfg['Server']['host'],            $user,            $password,            false,            $server_port,            $server_socket,            $client_flags        );        // Retry with empty password if we're allowed to        if ($return_value == false && isset($cfg['Server']['nopassword']) && $cfg['Server']['nopassword'] && !$is_controluser) {            $return_value = @PMA_DBI_real_connect(                $link,                $cfg['Server']['host'],                $user,                '',                false,                $server_port,                $server_socket,                $client_flags            );        }    } else {        $return_value = @PMA_DBI_real_connect(            $link,            $server['host'],            $user,            $password,            false,            $server_port,            $server_socket        );    }    if ($return_value == false) {        if ($is_controluser) {            trigger_error(                __('Connection for controluser as defined in your configuration failed.'),                E_USER_WARNING            );            return false;        }        // we could be calling PMA_DBI_connect() to connect to another        // server, for example in the Synchronize feature, so do not        // go back to main login if it fails        if (! $auxiliary_connection) {            PMA_log_user($user, 'mysql-denied');            PMA_auth_fails();        } else {            return false;        }    } else {        PMA_DBI_postConnect($link, $is_controluser);    }    return $link;}/** * selects given database * * @param string  $dbname  database name to select * @param mysqli  $link    the mysqli object * @return boolean */function PMA_DBI_select_db($dbname, $link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_select_db($link, $dbname);}/** * runs a query and returns the result * * @param   string  $query    query to execute * @param   mysqli  $link     mysqli object * @param   int     $options * @return  mysqli_result|bool */function PMA_DBI_real_query($query, $link, $options){    if ($options == ($options | PMA_DBI_QUERY_STORE)) {        $method = MYSQLI_STORE_RESULT;    } elseif ($options == ($options | PMA_DBI_QUERY_UNBUFFERED)) {        $method = MYSQLI_USE_RESULT;    } else {        $method = 0;    }    return mysqli_query($link, $query, $method);}/** * returns array of rows with associative and numeric keys from $result * * @param   mysqli_result  $result * @return  array */function PMA_DBI_fetch_array($result){    return mysqli_fetch_array($result, MYSQLI_BOTH);}/** * returns array of rows with associative keys from $result * * @param   mysqli_result  $result * @return  array */function PMA_DBI_fetch_assoc($result){    return mysqli_fetch_array($result, MYSQLI_ASSOC);}/** * returns array of rows with numeric keys from $result * * @param   mysqli_result  $result * @return  array */function PMA_DBI_fetch_row($result){    return mysqli_fetch_array($result, MYSQLI_NUM);}/** * Adjusts the result pointer to an arbitrary row in the result * * @param   $result * @param   $offset * @return  bool  true on success, false on failure */function PMA_DBI_data_seek($result, $offset){    return mysqli_data_seek($result, $offset);}/** * Frees memory associated with the result * * @param  mysqli_result  $result */function PMA_DBI_free_result($result){    if ($result instanceof mysqli_result) {        mysqli_free_result($result);    }}/** * Check if there are any more query results from a multi query * * @param   mysqli  $link  the mysqli object * @return  bool         true or false */function PMA_DBI_more_results($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_more_results($link);}/** * Prepare next result from multi_query * * @param   mysqli  $link  the mysqli object * @return  bool         true or false */function PMA_DBI_next_result($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_next_result($link);}/** * Returns a string representing the type of connection used * * @param   resource  $link  mysql link * @return  string          type of connection used */function PMA_DBI_get_host_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_get_host_info($link);}/** * Returns the version of the MySQL protocol used * * @param   resource  $link  mysql link * @return  integer         version of the MySQL protocol used */function PMA_DBI_get_proto_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_get_proto_info($link);}/** * returns a string that represents the client library version * * @return  string          MySQL client library version */function PMA_DBI_get_client_info(){    return mysqli_get_client_info();}/** * returns last error message or false if no errors occured * * @param   resource  $link  mysql link * @return  string|bool  $error or false */function PMA_DBI_getError($link = null){    $GLOBALS['errno'] = 0;    /* Treat false same as null because of controllink */    if ($link === false) {        $link = null;    }    if (null === $link && isset($GLOBALS['userlink'])) {        $link =& $GLOBALS['userlink'];        // Do not stop now. We still can get the error code        // with mysqli_connect_errno()//    } else {//        return false;    }    if (null !== $link) {        $error_number = mysqli_errno($link);        $error_message = mysqli_error($link);    } else {        $error_number = mysqli_connect_errno();        $error_message = mysqli_connect_error();    }    if (0 == $error_number) {        return false;    }    // keep the error number for further check after the call to PMA_DBI_getError()    $GLOBALS['errno'] = $error_number;    return PMA_DBI_formatError($error_number, $error_message);}/** * returns the number of rows returned by last query * * @param   mysqli_result  $result * @return  string|int */function PMA_DBI_num_rows($result){    // see the note for PMA_DBI_try_query();    if (!is_bool($result)) {        return @mysqli_num_rows($result);    } else {        return 0;    }}/** * returns last inserted auto_increment id for given $link or $GLOBALS['userlink'] * * @param   mysqli  $link  the mysqli object * @return  string|int */function PMA_DBI_insert_id($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    // When no controluser is defined, using mysqli_insert_id($link)    // does not always return the last insert id due to a mixup with    // the tracking mechanism, but this works:    return PMA_DBI_fetch_value('SELECT LAST_INSERT_ID();', 0, 0, $link);    // Curiously, this problem does not happen with the mysql extension but    // there is another problem with BIGINT primary keys so PMA_DBI_insert_id()    // in the mysql extension also uses this logic.}/** * returns the number of rows affected by last query * * @param   mysqli   $link            the mysqli object * @param   boolean  $get_from_cache * @return  string|int */function PMA_DBI_affected_rows($link = null, $get_from_cache = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($get_from_cache) {        return $GLOBALS['cached_affected_rows'];    } else {        return mysqli_affected_rows($link);    }}/** * returns metainfo for fields in $result * * @param   mysqli_result  $result * @return  array  meta info for fields in $result */function PMA_DBI_get_fields_meta($result){    // Build an associative array for a type look up    $typeAr = array();    $typeAr[MYSQLI_TYPE_DECIMAL]     = 'real';    $typeAr[MYSQLI_TYPE_NEWDECIMAL]  = 'real';    $typeAr[MYSQLI_TYPE_BIT]         = 'int';    $typeAr[MYSQLI_TYPE_TINY]        = 'int';    $typeAr[MYSQLI_TYPE_SHORT]       = 'int';    $typeAr[MYSQLI_TYPE_LONG]        = 'int';    $typeAr[MYSQLI_TYPE_FLOAT]       = 'real';    $typeAr[MYSQLI_TYPE_DOUBLE]      = 'real';    $typeAr[MYSQLI_TYPE_NULL]        = 'null';    $typeAr[MYSQLI_TYPE_TIMESTAMP]   = 'timestamp';    $typeAr[MYSQLI_TYPE_LONGLONG]    = 'int';    $typeAr[MYSQLI_TYPE_INT24]       = 'int';    $typeAr[MYSQLI_TYPE_DATE]        = 'date';    $typeAr[MYSQLI_TYPE_TIME]        = 'time';    $typeAr[MYSQLI_TYPE_DATETIME]    = 'datetime';    $typeAr[MYSQLI_TYPE_YEAR]        = 'year';    $typeAr[MYSQLI_TYPE_NEWDATE]     = 'date';    $typeAr[MYSQLI_TYPE_ENUM]        = 'unknown';    $typeAr[MYSQLI_TYPE_SET]         = 'unknown';    $typeAr[MYSQLI_TYPE_TINY_BLOB]   = 'blob';    $typeAr[MYSQLI_TYPE_MEDIUM_BLOB] = 'blob';    $typeAr[MYSQLI_TYPE_LONG_BLOB]   = 'blob';    $typeAr[MYSQLI_TYPE_BLOB]        = 'blob';    $typeAr[MYSQLI_TYPE_VAR_STRING]  = 'string';    $typeAr[MYSQLI_TYPE_STRING]      = 'string';    $typeAr[MYSQLI_TYPE_VARCHAR]     = 'string'; // for Drizzle    // MySQL returns MYSQLI_TYPE_STRING for CHAR    // and MYSQLI_TYPE_CHAR === MYSQLI_TYPE_TINY    // so this would override TINYINT and mark all TINYINT as string    // https://sf.net/tracker/?func=detail&aid=1532111&group_id=23067&atid=377408    //$typeAr[MYSQLI_TYPE_CHAR]        = 'string';    $typeAr[MYSQLI_TYPE_GEOMETRY]    = 'geometry';    $typeAr[MYSQLI_TYPE_BIT]         = 'bit';    $fields = mysqli_fetch_fields($result);    // this happens sometimes (seen under MySQL 4.0.25)    if (!is_array($fields)) {        return false;    }    foreach ($fields as $k => $field) {        $fields[$k]->_type = $field->type;        $fields[$k]->type = $typeAr[$field->type];        $fields[$k]->_flags = $field->flags;        $fields[$k]->flags = PMA_DBI_field_flags($result, $k);        // Enhance the field objects for mysql-extension compatibilty        //$flags = explode(' ', $fields[$k]->flags);        //array_unshift($flags, 'dummy');        $fields[$k]->multiple_key            = (int) (bool) ($fields[$k]->_flags & MYSQLI_MULTIPLE_KEY_FLAG);        $fields[$k]->primary_key            = (int) (bool) ($fields[$k]->_flags & MYSQLI_PRI_KEY_FLAG);        $fields[$k]->unique_key            = (int) (bool) ($fields[$k]->_flags & MYSQLI_UNIQUE_KEY_FLAG);        $fields[$k]->not_null            = (int) (bool) ($fields[$k]->_flags & MYSQLI_NOT_NULL_FLAG);        $fields[$k]->unsigned            = (int) (bool) ($fields[$k]->_flags & MYSQLI_UNSIGNED_FLAG);        $fields[$k]->zerofill            = (int) (bool) ($fields[$k]->_flags & MYSQLI_ZEROFILL_FLAG);        $fields[$k]->numeric            = (int) (bool) ($fields[$k]->_flags & MYSQLI_NUM_FLAG);        $fields[$k]->blob            = (int) (bool) ($fields[$k]->_flags & MYSQLI_BLOB_FLAG);    }    return $fields;}/** * return number of fields in given $result * * @param   mysqli_result  $result * @return  int  field count */function PMA_DBI_num_fields($result){    return mysqli_num_fields($result);}/** * returns the length of the given field $i in $result * * @param   mysqli_result  $result * @param   int            $i       field * @return  int  length of field */function PMA_DBI_field_len($result, $i){    return mysqli_fetch_field_direct($result, $i)->length;}/** * returns name of $i. field in $result * * @param   mysqli_result  $result * @param   int            $i       field * @return  string  name of $i. field in $result */function PMA_DBI_field_name($result, $i){    return mysqli_fetch_field_direct($result, $i)->name;}/** * returns concatenated string of human readable field flags * * @param   mysqli_result  $result * @param   int            $i       field * @return  string  field flags */function PMA_DBI_field_flags($result, $i){    // This is missing from PHP 5.2.5, see http://bugs.php.net/bug.php?id=44846    if (! defined('MYSQLI_ENUM_FLAG')) {        define('MYSQLI_ENUM_FLAG', 256); // see MySQL source include/mysql_com.h    }    $f = mysqli_fetch_field_direct($result, $i);    $type = $f->type;    $charsetnr = $f->charsetnr;    $f = $f->flags;    $flags = '';    if ($f & MYSQLI_UNIQUE_KEY_FLAG) {        $flags .= 'unique ';    }    if ($f & MYSQLI_NUM_FLAG) {        $flags .= 'num ';    }    if ($f & MYSQLI_PART_KEY_FLAG) {        $flags .= 'part_key ';    }    if ($f & MYSQLI_SET_FLAG) {        $flags .= 'set ';    }    if ($f & MYSQLI_TIMESTAMP_FLAG) {        $flags .= 'timestamp ';    }    if ($f & MYSQLI_AUTO_INCREMENT_FLAG) {        $flags .= 'auto_increment ';    }    if ($f & MYSQLI_ENUM_FLAG) {        $flags .= 'enum ';    }    // See http://dev.mysql.com/doc/refman/6.0/en/c-api-datatypes.html:    // to determine if a string is binary, we should not use MYSQLI_BINARY_FLAG    // but instead the charsetnr member of the MYSQL_FIELD    // structure. Watch out: some types like DATE returns 63 in charsetnr    // so we have to check also the type.    // Unfortunately there is no equivalent in the mysql extension.    if (($type == MYSQLI_TYPE_TINY_BLOB || $type == MYSQLI_TYPE_BLOB || $type == MYSQLI_TYPE_MEDIUM_BLOB || $type == MYSQLI_TYPE_LONG_BLOB || $type == MYSQLI_TYPE_VAR_STRING || $type == MYSQLI_TYPE_STRING) && 63 == $charsetnr) {        $flags .= 'binary ';    }    if ($f & MYSQLI_ZEROFILL_FLAG) {        $flags .= 'zerofill ';    }    if ($f & MYSQLI_UNSIGNED_FLAG) {        $flags .= 'unsigned ';    }    if ($f & MYSQLI_BLOB_FLAG) {        $flags .= 'blob ';    }    if ($f & MYSQLI_MULTIPLE_KEY_FLAG) {        $flags .= 'multiple_key ';    }    if ($f & MYSQLI_UNIQUE_KEY_FLAG) {        $flags .= 'unique_key ';    }    if ($f & MYSQLI_PRI_KEY_FLAG) {        $flags .= 'primary_key ';    }    if ($f & MYSQLI_NOT_NULL_FLAG) {        $flags .= 'not_null ';    }    return trim($flags);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * query by example the whole database * * @package PhpMyAdmin *//** * requirements */require_once './libraries/common.inc.php';/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam();/** * A query has been submitted -> (maybe) execute it */$message_to_display = false;if (isset($_REQUEST['submit_sql']) && ! empty($sql_query)) {    if (! preg_match('@^SELECT@i', $sql_query)) {        $message_to_display = true;    } else {        $goto      = 'db_sql.php';        include './sql.php';        exit;    }}$sub_part  = '_qbe';require './libraries/db_common.inc.php';$url_query .= '&amp;goto=db_qbe.php';$url_params['goto'] = 'db_qbe.php';require './libraries/db_info.inc.php';if ($message_to_display) {    PMA_Message::error(__('You have to choose at least one column to display'))->display();}unset($message_to_display);/** * Initialize some variables */$col_cnt = PMA_ifSetOr($_REQUEST['col_cnt'], 3, 'numeric');$add_col = PMA_ifSetOr($_REQUEST['add_col'], 0, 'numeric');$add_row = PMA_ifSetOr($_REQUEST['add_row'], 0, 'numeric');$rows    = PMA_ifSetOr($_REQUEST['rows'],    0, 'numeric');$ins_col = PMA_ifSetOr($_REQUEST['ins_col'], null, 'array');$del_col = PMA_ifSetOr($_REQUEST['del_col'], null, 'array');$prev_criteria = isset($_REQUEST['prev_criteria'])    ? $_REQUEST['prev_criteria']    : array();$criteria = isset($_REQUEST['criteria'])    ? $_REQUEST['criteria']    : array_fill(0, $col_cnt, '');$ins_row = isset($_REQUEST['ins_row'])    ? $_REQUEST['ins_row']    : array_fill(0, $col_cnt, '');$del_row = isset($_REQUEST['del_row'])    ? $_REQUEST['del_row']    : array_fill(0, $col_cnt, '');$and_or_row = isset($_REQUEST['and_or_row'])    ? $_REQUEST['and_or_row']    : array_fill(0, $col_cnt, '');$and_or_col = isset($_REQUEST['and_or_col'])    ? $_REQUEST['and_or_col']    : array_fill(0, $col_cnt, '');// minimum width$form_column_width = 12;$col = max($col_cnt + $add_col, 0);$row = max($rows + $add_row, 0);// The tables list sent by a previously submitted formif (PMA_isValid($_REQUEST['TableList'], 'array')) {    foreach ($_REQUEST['TableList'] as $each_table) {        $tbl_names[$each_table] = ' selected="selected"';    }} // end if// this was a work in progress, deactivated for now//$columns = PMA_DBI_get_columns_full($GLOBALS['db']);//$tables  = PMA_DBI_get_columns_full($GLOBALS['db']);/** * Prepares the form */$tbl_result     = PMA_DBI_query('SHOW TABLES FROM ' . PMA_backquote($db) . ';', null, PMA_DBI_QUERY_STORE);$tbl_result_cnt = PMA_DBI_num_rows($tbl_result);if (0 == $tbl_result_cnt) {    PMA_Message::error(__('No tables found in database.'))->display();    include './libraries/footer.inc.php';    exit;}// The tables list gets from MySQLwhile (list($tbl) = PMA_DBI_fetch_row($tbl_result)) {    $fld_results = PMA_DBI_get_columns($db, $tbl);    if (empty($tbl_names[$tbl]) && !empty($_REQUEST['TableList'])) {        $tbl_names[$tbl] = '';    } else {        $tbl_names[$tbl] = ' selected="selected"';    } //  end if    // The fields list per selected tables    if ($tbl_names[$tbl] == ' selected="selected"') {        $each_table = PMA_backquote($tbl);        $fld[]  = $each_table . '.*';        foreach ($fld_results as $each_field) {            $each_field = $each_table . '.' . PMA_backquote($each_field['Field']);            $fld[] = $each_field;            // increase the width if necessary            $form_column_width = max(strlen($each_field), $form_column_width);        } // end foreach    } // end if} // end whilePMA_DBI_free_result($tbl_result);// largest width found$realwidth = $form_column_width . 'ex';/** * Displays the Query by example form *//** * Enter description here... * * @param array     $columns * @param integer   $column_number * @param string    $selected */function showColumnSelectCell($columns, $column_number, $selected = ''){    ?>    <td align="center">        <select name="Field[<?php echo $column_number; ?>]" size="1">            <option value="">&nbsp;</option>    <?php    foreach ($columns as $column) {        if ($column === $selected) {            $sel = ' selected="selected"';        } else {            $sel = '';        }        echo '<option value="' . htmlspecialchars($column) . '"' . $sel . '>'            . str_replace(' ', '&nbsp;', htmlspecialchars($column)) . '</option>' . "\n";    }    ?>        </select>    </td>    <?php}?><?php if (!empty($tab_designer['link'])) {        $tab_designer['link'] = htmlentities($tab_designer['link']);        $tab_designer['link'] = $tab_designer['link'] . PMA_generate_common_url($url_params);        if (! empty($tab_designer['args'])) {            foreach ($tab_designer['args'] as $param => $value) {                $tab_designer['link'] .= PMA_get_arg_separator('html') . urlencode($param) . '='                    . urlencode($value);            }        }    }    if (! empty($tab['fragment'])) {        $tab['link'] .= $tab['fragment'];    }    if (isset($tab_designer['link'])) {?><div id="visual_builder_anchor" class="notice hide">    <span id="footnote_1"><?php printf(__('Switch to %svisual builder%s'), ' <a href="' . $tab_designer['link'] . PMA_get_arg_separator('html') . 'query=1">', '</a>'); ?>    </span></div><?php    }?><form action="db_qbe.php" method="post"><fieldset><table class="data" style="width: 100%;"><tr class="odd noclick">    <th><?php echo __('Column'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (isset($ins_col[$x]) && $ins_col[$x] == 'on') {        showColumnSelectCell($fld, $z);        $z++;    }    if (! empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    $selected = '';    if (isset($Field[$x])) {        $selected = $Field[$x];        $curField[$z] = $Field[$x];    }    showColumnSelectCell($fld, $z, $selected);    $z++;} // end for?></tr><!-- Sort row --><tr class="even noclick">    <th><?php echo __('Sort'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {        ?>    <td align="center">        <select style="width: <?php echo $realwidth; ?>" name="Sort[<?php echo $z; ?>]" size="1">            <option value="">&nbsp;</option>            <option value="ASC"><?php echo __('Ascending'); ?></option>            <option value="DESC"><?php echo __('Descending'); ?></option>        </select>    </td>        <?php        $z++;    } // end if    echo "\n";    if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    ?>    <td align="center">        <select style="width: <?php echo $realwidth; ?>" name="Sort[<?php echo $z; ?>]" size="1">            <option value="">&nbsp;</option>    <?php    echo "\n";    // If they have chosen all fields using the * selector,    // then sorting is not available    // Fix for Bug #570698    if (isset($Sort[$x]) && isset($Field[$x])     && substr($Field[$x], -2) == '.*') {        $Sort[$x] = '';    } //end if    if (isset($Sort[$x]) && $Sort[$x] == 'ASC') {        $curSort[$z] = $Sort[$x];        $sel         = ' selected="selected"';    } else {        $sel         = '';    } // end if    echo '                ';    echo '<option value="ASC"' . $sel . '>' . __('Ascending') . '</option>' . "\n";    if (isset($Sort[$x]) && $Sort[$x] == 'DESC') {        $curSort[$z] = $Sort[$x];        $sel         = ' selected="selected"';    } else {        $sel         = '';    } // end if    echo '                ';    echo '<option value="DESC"' . $sel . '>' . __('Descending') . '</option>' . "\n";    ?>        </select>    </td>    <?php    $z++;    echo "\n";} // end for?></tr><!-- Show row --><tr class="odd noclick">    <th><?php echo __('Show'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {        ?>    <td align="center">        <input type="checkbox" name="Show[<?php echo $z; ?>]" />    </td>        <?php        $z++;    } // end if    echo "\n";    if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    if (isset($Show[$x])) {        $checked     = ' checked="checked"';        $curShow[$z] = $Show[$x];    } else {        $checked     =  '';    }    ?>    <td align="center">        <input type="checkbox" name="Show[<?php echo $z; ?>]"<?php echo $checked; ?> />    </td>    <?php    $z++;    echo "\n";} // end for?></tr><!-- Criteria row --><tr class="even noclick">    <th><?php echo __('Criteria'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {        ?>    <td align="center">        <input type="text" name="criteria[<?php echo $z; ?>]" value="" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>        <?php        $z++;    } // end if    echo "\n";    if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    if (isset($criteria[$x])) {        $tmp_criteria = $criteria[$x];    }    if ((empty($prev_criteria) || ! isset($prev_criteria[$x]))        || $prev_criteria[$x] != htmlspecialchars($tmp_criteria)) {        $curCriteria[$z]   = $tmp_criteria;    } else {        $curCriteria[$z]   = $prev_criteria[$x];    }    ?>    <td align="center">        <input type="hidden" name="prev_criteria[<?php echo $z; ?>]" value="<?php echo htmlspecialchars($curCriteria[$z]); ?>" />        <input type="text" name="criteria[<?php echo $z; ?>]" value="<?php echo htmlspecialchars($tmp_criteria); ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>    <?php    $z++;    echo "\n";} // end for?></tr><!-- And/Or columns and rows --><?php$w = 0;$odd_row = true;for ($y = 0; $y <= $row; $y++) {    if (isset($ins_row[$y]) && $ins_row[$y] == 'on') {        $chk['or']  = ' checked="checked"';        $chk['and'] = '';        ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">        <!-- Row controls -->        <table cellpadding="0" cellspacing="0" border="0">        <tr>            <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">                <small><?php echo __('Ins'); ?>:</small>                <input type="checkbox" name="ins_row[<?php echo $w; ?>]" />            </td>            <td align="<?php echo $cell_align_right; ?>">                <strong><?php echo __('And'); ?>:</strong>            </td>            <td>                <input type="radio" name="and_or_row[<?php echo $w; ?>]" value="and"<?php echo $chk['and']; ?> />                &nbsp;            </td>        </tr>        <tr>            <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">                <small><?php echo __('Del'); ?>:</small>                <input type="checkbox" name="del_row[<?php echo $w; ?>]" />            </td>            <td align="<?php echo $cell_align_right; ?>">                <strong><?php echo __('Or'); ?>:</strong>            </td>            <td>                <input type="radio" name="and_or_row[<?php echo $w; ?>]" value="or"<?php echo $chk['or']; ?> />                &nbsp;            </td>        </tr>        </table>    </td>        <?php        $z = 0;        for ($x = 0; $x < $col; $x++) {            if (isset($ins_col[$x]) && $ins_col[$x] == 'on') {                echo "\n";                $or = 'Or' . $w . '[' . $z . ']';                ?>    <td align="center">        <input type="text" name="Or<?php echo $or; ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>                <?php                $z++;            } // end if            if (isset($del_col[$x]) && $del_col[$x] == 'on') {                continue;            }            echo "\n";            $or = 'Or' . $w . '[' . $z . ']';            ?>    <td align="center">        <input type="text" name="Or<?php echo $or; ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>            <?php            $z++;        } // end for        $w++;        echo "\n";        ?></tr>        <?php        $odd_row =! $odd_row;    } // end if    if (isset($del_row[$y]) && $del_row[$y] == 'on') {        continue;    }    if (isset($and_or_row[$y])) {        $curAndOrRow[$w] = $and_or_row[$y];    }    if (isset($and_or_row[$y]) && $and_or_row[$y] == 'and') {        $chk['and'] =  ' checked="checked"';        $chk['or']  =  '';    } else {        $chk['or']  =  ' checked="checked"';        $chk['and'] =  '';    }    echo "\n";    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">        <!-- Row controls -->        <table border="0" cellpadding="0" cellspacing="0">        <tr>            <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">                <small><?php echo __('Ins'); ?>:</small>                <input type="checkbox" name="ins_row[<?php echo $w; ?>]" />            </td>            <td align="<?php echo $cell_align_right; ?>">                <strong><?php echo __('And'); ?>:</strong>            </td>            <td>                <input type="radio" name="and_or_row[<?php echo $w; ?>]" value="and"<?php echo $chk['and']; ?> />            </td>        </tr>        <tr>            <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">                <small><?php echo __('Del'); ?>:</small>                <input type="checkbox" name="del_row[<?php echo $w; ?>]" />            </td>            <td align="<?php echo $cell_align_right; ?>">                <strong><?php echo __('Or'); ?>:</strong>            </td>            <td>                <input type="radio" name="and_or_row[<?php echo $w; ?>]" value="or"<?php echo $chk['or']; ?> />            </td>        </tr>        </table>    </td>    <?php    $z = 0;    for ($x = 0; $x < $col; $x++) {        if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {            echo "\n";            $or = 'Or' . $w . '[' . $z . ']';            ?>    <td align="center">        <input type="text" name="Or<?php echo $or; ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>            <?php            $z++;        } // end if        if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {            continue;        }        echo "\n";        $or = 'Or' . $y;        if (! isset(${$or})) {            ${$or} = '';        }        if (!empty(${$or}) && isset(${$or}[$x])) {            $tmp_or = ${$or}[$x];        } else {            $tmp_or     = '';        }        ?>    <td align="center">        <input type="text" name="Or<?php echo $w . '[' . $z . ']'; ?>" value="<?php echo htmlspecialchars($tmp_or); ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>        <?php        if (!empty(${$or}) && isset(${$or}[$x])) {            ${'cur' . $or}[$z] = ${$or}[$x];        }        $z++;    } // end for    $w++;    echo "\n";    ?></tr>    <?php    echo "\n";    $odd_row =! $odd_row;} // end for?><!-- Modify columns --><tr class="even noclick">    <th><?php echo __('Modify'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {        $curAndOrCol[$z] = $and_or_col[$y];        if ($and_or_col[$z] == 'or') {            $chk['or']  = ' checked="checked"';            $chk['and'] = '';        } else {            $chk['and'] = ' checked="checked"';            $chk['or']  = '';        }        ?>    <td align="center">        <strong><?php echo __('Or'); ?>:</strong>        <input type="radio" name="and_or_col[<?php echo $z; ?>]" value="or"<?php echo $chk['or']; ?> />        &nbsp;&nbsp;<strong><?php echo __('And'); ?>:</strong>        <input type="radio" name="and_or_col[<?php echo $z; ?>]" value="and"<?php echo $chk['and']; ?> />        <br />        <?php echo __('Ins') . "\n"; ?>        <input type="checkbox" name="ins_col[<?php echo $z; ?>]" />        &nbsp;&nbsp;<?php echo __('Del') . "\n"; ?>        <input type="checkbox" name="del_col[<?php echo $z; ?>]" />    </td>        <?php        $z++;    } // end if    echo "\n";    if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    if (isset($and_or_col[$y])) {        $curAndOrCol[$z] = $and_or_col[$y];    }    if (isset($and_or_col[$z]) && $and_or_col[$z] == 'or') {        $chk['or']  = ' checked="checked"';        $chk['and'] = '';    } else {        $chk['and'] = ' checked="checked"';        $chk['or']  = '';    }    ?>    <td align="center">        <strong><?php echo __('Or'); ?>:</strong>        <input type="radio" name="and_or_col[<?php echo $z; ?>]" value="or"<?php echo $chk['or']; ?> />        &nbsp;&nbsp;<strong><?php echo __('And'); ?>:</strong>        <input type="radio" name="and_or_col[<?php echo $z; ?>]" value="and"<?php echo $chk['and']; ?> />        <br />        <?php echo __('Ins') . "\n"; ?>        <input type="checkbox" name="ins_col[<?php echo $z; ?>]" />        &nbsp;&nbsp;<?php echo __('Del') . "\n"; ?>        <input type="checkbox" name="del_col[<?php echo $z; ?>]" />    </td>    <?php    $z++;    echo "\n";} // end for?>    </tr></table><!-- Other controls --><?php$w--;$url_params['db']       = $db;$url_params['col_cnt']  = $z;$url_params['rows']     = $w;echo PMA_generate_common_hidden_inputs($url_params);?></fieldset><fieldset class="tblFooters"><table border="0" cellpadding="2" cellspacing="1"><tr>    <td nowrap="nowrap">        <?php echo __('Add/Delete criteria rows'); ?>:        <select size="1" name="add_row">            <option value="-3">-3</option>            <option value="-2">-2</option>            <option value="-1">-1</option>            <option value="0" selected="selected">0</option>            <option value="1">1</option>            <option value="2">2</option>            <option value="3">3</option>        </select>    </td>    <td width="10">&nbsp;</td>    <td nowrap="nowrap"><?php echo __('Add/Delete columns'); ?>:        <select size="1" name="add_col">            <option value="-3">-3</option>            <option value="-2">-2</option>            <option value="-1">-1</option>            <option value="0" selected="selected">0</option>            <option value="1">1</option>            <option value="2">2</option>            <option value="3">3</option>        </select>    </td>    <td width="10">&nbsp;</td>    <!-- Generates a query -->    <td><input type="submit" name="modify" value="<?php echo __('Update Query'); ?>" /></td></tr></table></fieldset><table><tr><td>        <fieldset>            <legend><?php echo __('Use Tables'); ?></legend><?php$options = '';$numTableListOptions = 0;foreach ($tbl_names as $key => $val) {    $options .= '                        ';    $options .= '<option value="' . htmlspecialchars($key) . '"' . $val . '>'        . str_replace(' ', '&nbsp;', htmlspecialchars($key)) . '</option>' . "\n";    $numTableListOptions++;}?>            <select name="TableList[]" multiple="multiple" id="listTable"                size="<?php echo ($numTableListOptions > 30) ? '15' : '7'; ?>">                <?php echo $options; ?>            </select>        </fieldset>        <fieldset class="tblFooters">            <input type="submit" name="modify" value="<?php echo __('Update Query'); ?>" />        </fieldset>    </td>    <td width="20">&nbsp;</td>    <td>        <fieldset>            <legend><?php echo sprintf(__('SQL query on database <b>%s</b>:'), PMA_getDbLink($db)); ?>                </legend>            <textarea cols="80" name="sql_query" id="textSqlquery"                rows="<?php echo ($numTableListOptions > 30) ? '15' : '7'; ?>"                dir="<?php echo $text_dir; ?>"><?php// 1. SELECT$last_select = 0;if (! isset($qry_select)) {    $qry_select         = '';}for ($x = 0; $x < $col; $x++) {    if (!empty($curField[$x]) && isset($curShow[$x]) && $curShow[$x] == 'on') {        if ($last_select) {            $qry_select .=  ', ';        }        $qry_select     .= $curField[$x];        $last_select    = 1;    }} // end forif (!empty($qry_select)) {    echo  'SELECT ' . htmlspecialchars($qry_select) . "\n";}// 2. FROM// Create LEFT JOINS out of Relations// If we can use Relations we could make some left joins.// First find out if relations are available in this database.// First we need the really needed Tables - those in TableList might still be// all Tables.if (isset($Field) && count($Field) > 0) {    // Initialize some variables    $tab_all    = array();    $col_all    = array();    $tab_wher   = array();    $tab_know   = array();    $tab_left   = array();    $col_where  = array();    $fromclause = '';    // We only start this if we have fields, otherwise it would be dumb    foreach ($Field as $value) {        $parts             = explode('.', $value);        if (!empty($parts[0]) && !empty($parts[1])) {            $tab_raw       = $parts[0];            $tab           = str_replace('`', '', $tab_raw);            $tab_all[$tab] = $tab;            $col_raw       = $parts[1];            $col_all[]     = $tab . '.' . str_replace('`', '', $col_raw);         }    } // end while    // Check 'where' clauses    if ($cfgRelation['relwork'] && count($tab_all) > 0) {        // Now we need all tables that we have in the where clause        $crit_cnt         = count($criteria);        for ($x = 0; $x < $crit_cnt; $x++) {            $curr_tab     = explode('.', $Field[$x]);            if (!empty($curr_tab[0]) && !empty($curr_tab[1])) {                $tab_raw  = $curr_tab[0];                $tab      = str_replace('`', '', $tab_raw);                $col_raw  = $curr_tab[1];                $col1     = str_replace('`', '', $col_raw);                $col1     = $tab . '.' . $col1;                // Now we know that our array has the same numbers as $criteria                // we can check which of our columns has a where clause                if (!empty($criteria[$x])) {                    if (substr($criteria[$x], 0, 1) == '=' || stristr($criteria[$x], 'is')) {                        $col_where[$col] = $col1;                        $tab_wher[$tab]  = $tab;                    }                } // end if            } // end if        } // end for        // Cleans temp vars w/o further use        unset($tab_raw);        unset($col_raw);        unset($col1);        if (count($tab_wher) == 1) {            // If there is exactly one column that has a decent where-clause            // we will just use this            $master = key($tab_wher);        } else {            // Now let's find out which of the tables has an index            // (When the control user is the same as the normal user            // because he is using one of his databases as pmadb,            // the last db selected is not always the one where we need to work)            PMA_DBI_select_db($db);            foreach ($tab_all as $tab) {                $indexes = PMA_DBI_get_table_indexes($db, $tab);                foreach ($indexes as $ind) {                    $col1 = $tab . '.' . $ind['Column_name'];                    if (isset($col_all[$col1])) {                        if ($ind['Non_unique'] == 0) {                            if (isset($col_where[$col1])) {                                $col_unique[$col1] = 'Y';                            } else {                                $col_unique[$col1] = 'N';                            }                        } else {                            if (isset($col_where[$col1])) {                                $col_index[$col1] = 'Y';                            } else {                                $col_index[$col1] = 'N';                            }                        }                    }                } // end while (each col of tab)            } // end while (each tab)            // now we want to find the best.            if (isset($col_unique) && count($col_unique) > 0) {                $col_cand = $col_unique;                $needsort = 1;            } elseif (isset($col_index) && count($col_index) > 0) {                $col_cand = $col_index;                $needsort = 1;            } elseif (isset($col_where) && count($col_where) > 0) {                $col_cand = $tab_wher;                $needsort = 0;            } else {                $col_cand = $tab_all;                $needsort = 0;            }            // If we came up with $col_unique (very good) or $col_index (still            // good) as $col_cand we want to check if we have any 'Y' there            // (that would mean that they were also found in the whereclauses            // which would be great). if yes, we take only those            if ($needsort == 1) {                foreach ($col_cand as $col => $is_where) {                    $tab           = explode('.', $col);                    $tab           = $tab[0];                    if ($is_where == 'Y') {                        $vg[$col]  = $tab;                    } else {                        $sg[$col]  = $tab;                    }                }                if (isset($vg)) {                    $col_cand      = $vg;                    // Candidates restricted in index+where                } else {                    $col_cand      = $sg;                    // None of the candidates where in a where-clause                }            }            // If our array of candidates has more than one member we'll just            // find the smallest table.            // Of course the actual query would be faster if we check for            // the Criteria which gives the smallest result set in its table,            // but it would take too much time to check this            if (count($col_cand) > 1) {                // Of course we only want to check each table once                $checked_tables = $col_cand;                foreach ($col_cand as $tab) {                    if ($checked_tables[$tab] != 1) {                        $tsize[$tab] = PMA_Table::countRecords($db, $tab, false);                        $checked_tables[$tab] = 1;                    }                    $csize[$tab] = $tsize[$tab];                }                asort($csize);                reset($csize);                $master = key($csize); // Smallest            } else {                reset($col_cand);                $master = current($col_cand); // Only one single candidate            }        } // end if (exactly one where clause)        $tab_left = $tab_all;        unset($tab_left[$master]);        $tab_know[$master] = $master;        $run   = 0;        $emerg = '';        while (count($tab_left) > 0) {            if ($run % 2 == 0) {                PMA_getRelatives('master');            } else {                PMA_getRelatives('foreign');            }            $run++;            if ($run > 5) {                foreach ($tab_left as $tab) {                    $emerg .= ', ' . PMA_backquote($tab);                    unset($tab_left[$tab]);                }            }        } // end while        $qry_from = PMA_backquote($master) . $emerg . $fromclause;    } // end if ($cfgRelation['relwork'] && count($tab_all) > 0)} // end count($Field) > 0// In case relations are not defined, just generate the FROM clause// from the list of tables, however we don't generate any JOINif (empty($qry_from) && isset($tab_all)) {    $qry_from = implode(', ', $tab_all);}// Now let's see what we gotif (!empty($qry_from)) {    echo 'FROM ' . htmlspecialchars($qry_from) . "\n";}// 3. WHERE$qry_where          = '';$criteria_cnt       = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($curField[$x]) && !empty($curCriteria[$x]) && $x && isset($last_where) && isset($curAndOrCol)) {        $qry_where  .= ' ' . strtoupper($curAndOrCol[$last_where]) . ' ';    }    if (!empty($curField[$x]) && !empty($curCriteria[$x])) {        $qry_where  .= '(' . $curField[$x] . ' ' . $curCriteria[$x] . ')';        $last_where = $x;        $criteria_cnt++;    }} // end forif ($criteria_cnt > 1) {    $qry_where      = '(' . $qry_where . ')';}// OR rows ${'cur' . $or}[$x]if (! isset($curAndOrRow)) {    $curAndOrRow          = array();}for ($y = 0; $y <= $row; $y++) {    $criteria_cnt         = 0;    $qry_orwhere          = '';    $last_orwhere         = '';    for ($x = 0; $x < $col; $x++) {        if (!empty($curField[$x]) && !empty(${'curOr' . $y}[$x]) && $x) {            $qry_orwhere  .= ' ' . strtoupper($curAndOrCol[$last_orwhere]) . ' ';        }        if (!empty($curField[$x]) && !empty(${'curOr' . $y}[$x])) {            $qry_orwhere  .= '(' . $curField[$x]                          .  ' '                          .  ${'curOr' . $y}[$x]                          .  ')';            $last_orwhere = $x;            $criteria_cnt++;        }    } // end for    if ($criteria_cnt > 1) {        $qry_orwhere      = '(' . $qry_orwhere . ')';    }    if (!empty($qry_orwhere)) {        $qry_where .= "\n"                   .  strtoupper(isset($curAndOrRow[$y]) ? $curAndOrRow[$y] . ' ' : '')                   .  $qry_orwhere;    } // end if} // end forif (!empty($qry_where) && $qry_where != '()') {    echo 'WHERE ' . htmlspecialchars($qry_where) . "\n";} // end if// 4. ORDER BY$last_orderby = 0;if (! isset($qry_orderby)) {    $qry_orderby      = '';}for ($x = 0; $x < $col; $x++) {    if ($last_orderby && $x && !empty($curField[$x]) && !empty($curSort[$x])) {        $qry_orderby  .=  ', ';    }    if (!empty($curField[$x]) && !empty($curSort[$x])) {        // if they have chosen all fields using the * selector,        // then sorting is not available        // Fix for Bug #570698        if (substr($curField[$x], -2) != '.*') {            $qry_orderby  .=  $curField[$x] . ' ' . $curSort[$x];            $last_orderby = 1;        }    }} // end forif (!empty($qry_orderby)) {    echo 'ORDER BY ' . htmlspecialchars($qry_orderby) . "\n";}?>        </textarea>        </fieldset>        <fieldset class="tblFooters">            <input type="submit" name="submit_sql" value="<?php echo __('Submit Query'); ?>" />        </fieldset>    </td></tr></table></form><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * library for displaying table with results from all sort of select queries * * @package PhpMyAdmin *//** * */require_once './libraries/Index.class.php';/** * Defines the display mode to use for the results of a SQL query * * It uses a synthetic string that contains all the required informations. * In this string: *   - the first two characters stand for the action to do while *     clicking on the "edit" link (e.g. 'ur' for update a row, 'nn' for no *     edit link...); *   - the next two characters stand for the action to do while *     clicking on the "delete" link (e.g. 'kp' for kill a process, 'nn' for *     no delete link...); *   - the next characters are boolean values (1/0) and respectively stand *     for sorting links, navigation bar, "insert a new row" link, the *     bookmark feature, the expand/collapse text/blob fields button and *     the "display printable view" option. *     Of course '0'/'1' means the feature won't/will be enabled. * * @param string  &$the_disp_mode the synthetic value for display_mode (see a few *                                lines above for explanations) * @param integer &$the_total     the total number of rows returned by the SQL query *                                without any programmatically appended "LIMIT" clause *                                (just a copy of $unlim_num_rows if it exists, else *                                computed inside this function) * * @return  array    an array with explicit indexes for all the display *                   elements * * @global  string   the database name * @global  string   the table name * @global  integer  the total number of rows returned by the SQL query *                   without any programmatically appended "LIMIT" clause * @global  array    the properties of the fields returned by the query * @global  string   the URL to return to in case of error in a SQL *                   statement * * @access  private * * @see     PMA_displayTable() */function PMA_setDisplayMode(&$the_disp_mode, &$the_total){    global $db, $table;    global $unlim_num_rows, $fields_meta;    global $err_url;    // 1. Initializes the $do_display array    $do_display              = array();    $do_display['edit_lnk']  = $the_disp_mode[0] . $the_disp_mode[1];    $do_display['del_lnk']   = $the_disp_mode[2] . $the_disp_mode[3];    $do_display['sort_lnk']  = (string) $the_disp_mode[4];    $do_display['nav_bar']   = (string) $the_disp_mode[5];    $do_display['ins_row']   = (string) $the_disp_mode[6];    $do_display['bkm_form']  = (string) $the_disp_mode[7];    $do_display['text_btn']  = (string) $the_disp_mode[8];    $do_display['pview_lnk'] = (string) $the_disp_mode[9];    // 2. Display mode is not "false for all elements" -> updates the    // display mode    if ($the_disp_mode != 'nnnn000000') {        if (isset($GLOBALS['printview']) && $GLOBALS['printview'] == '1') {            // 2.0 Print view -> set all elements to false!            $do_display['edit_lnk']  = 'nn'; // no edit link            $do_display['del_lnk']   = 'nn'; // no delete link            $do_display['sort_lnk']  = (string) '0';            $do_display['nav_bar']   = (string) '0';            $do_display['ins_row']   = (string) '0';            $do_display['bkm_form']  = (string) '0';            $do_display['text_btn']  = (string) '0';            $do_display['pview_lnk'] = (string) '0';        } elseif ($GLOBALS['is_count'] || $GLOBALS['is_analyse']            || $GLOBALS['is_maint'] || $GLOBALS['is_explain']            ) {            // 2.1 Statement is a "SELECT COUNT", a            //     "CHECK/ANALYZE/REPAIR/OPTIMIZE", an "EXPLAIN" one or            //     contains a "PROC ANALYSE" part            $do_display['edit_lnk']  = 'nn'; // no edit link            $do_display['del_lnk']   = 'nn'; // no delete link            $do_display['sort_lnk']  = (string) '0';            $do_display['nav_bar']   = (string) '0';            $do_display['ins_row']   = (string) '0';            $do_display['bkm_form']  = (string) '1';            if ($GLOBALS['is_maint']) {                $do_display['text_btn']  = (string) '1';            } else {                $do_display['text_btn']  = (string) '0';            }            $do_display['pview_lnk'] = (string) '1';        } elseif ($GLOBALS['is_show']) {            // 2.2 Statement is a "SHOW..."            /**             * 2.2.1             * @todo defines edit/delete links depending on show statement             */            $tmp = preg_match('@^SHOW[[:space:]]+(VARIABLES|(FULL[[:space:]]+)?PROCESSLIST|STATUS|TABLE|GRANTS|CREATE|LOGS|DATABASES|FIELDS)@i', $GLOBALS['sql_query'], $which);            if (isset($which[1]) && strpos(' ' . strtoupper($which[1]), 'PROCESSLIST') > 0) {                $do_display['edit_lnk'] = 'nn'; // no edit link                $do_display['del_lnk']  = 'kp'; // "kill process" type edit link            } else {                // Default case -> no links                $do_display['edit_lnk'] = 'nn'; // no edit link                $do_display['del_lnk']  = 'nn'; // no delete link            }            // 2.2.2 Other settings            $do_display['sort_lnk']  = (string) '0';            $do_display['nav_bar']   = (string) '0';            $do_display['ins_row']   = (string) '0';            $do_display['bkm_form']  = (string) '1';            $do_display['text_btn']  = (string) '1';            $do_display['pview_lnk'] = (string) '1';        } else {            // 2.3 Other statements (ie "SELECT" ones) -> updates            //     $do_display['edit_lnk'], $do_display['del_lnk'] and            //     $do_display['text_btn'] (keeps other default values)            $prev_table = $fields_meta[0]->table;            $do_display['text_btn']  = (string) '1';            for ($i = 0; $i < $GLOBALS['fields_cnt']; $i++) {                $is_link = ($do_display['edit_lnk'] != 'nn'                            || $do_display['del_lnk'] != 'nn'                            || $do_display['sort_lnk'] != '0'                            || $do_display['ins_row'] != '0');                // 2.3.2 Displays edit/delete/sort/insert links?                if ($is_link                    && ($fields_meta[$i]->table == '' || $fields_meta[$i]->table != $prev_table)                ) {                    $do_display['edit_lnk'] = 'nn'; // don't display links                    $do_display['del_lnk']  = 'nn';                    /**                     * @todo May be problematic with same fields names in two joined table.                     */                    // $do_display['sort_lnk'] = (string) '0';                    $do_display['ins_row']  = (string) '0';                    if ($do_display['text_btn'] == '1') {                        break;                    }                } // end if (2.3.2)                // 2.3.3 Always display print view link                $do_display['pview_lnk']    = (string) '1';                $prev_table = $fields_meta[$i]->table;            } // end for        } // end if..elseif...else (2.1 -> 2.3)    } // end if (2)    // 3. Gets the total number of rows if it is unknown    if (isset($unlim_num_rows) && $unlim_num_rows != '') {        $the_total = $unlim_num_rows;    } elseif (($do_display['nav_bar'] == '1' || $do_display['sort_lnk'] == '1')             && (strlen($db) && !empty($table))) {        $the_total   = PMA_Table::countRecords($db, $table);    }    // 4. If navigation bar or sorting fields names URLs should be    //    displayed but there is only one row, change these settings to    //    false    if ($do_display['nav_bar'] == '1' || $do_display['sort_lnk'] == '1') {        // - Do not display sort links if less than 2 rows.        // - For a VIEW we (probably) did not count the number of rows        //   so don't test this number here, it would remove the possibility        //   of sorting VIEW results.        if (isset($unlim_num_rows) && $unlim_num_rows < 2 && ! PMA_Table::isView($db, $table)) {            // force display of navbar for vertical/horizontal display-choice.            // $do_display['nav_bar']  = (string) '0';            $do_display['sort_lnk'] = (string) '0';        }    } // end if (3)    // 5. Updates the synthetic var    $the_disp_mode = join('', $do_display);    return $do_display;} // end of the 'PMA_setDisplayMode()' function/** * Return true if we are executing a query in the form of * "SELECT * FROM <a table> ..." * * @return boolean */function PMA_isSelect(){    // global variables set from sql.php    global $is_count, $is_export, $is_func, $is_analyse;    global $analyzed_sql;    return ! ($is_count || $is_export || $is_func || $is_analyse)        && count($analyzed_sql[0]['select_expr']) == 0        && isset($analyzed_sql[0]['queryflags']['select_from'])        && count($analyzed_sql[0]['table_ref']) == 1;}/** * Displays a navigation button * * @param string  $caption            iconic caption for button * @param string  $title              text for button * @param integer $pos                position for next query * @param string  $html_sql_query     query ready for display * @param string  $onsubmit           optional onsubmit clause * @param string  $input_for_real_end optional hidden field for special treatment * @param string  $onclick            optional onclick clause * * @return nothing * * @global string   $db             the database name * @global string   $table          the table name * @global string   $goto           the URL to go back in case of errors * * @access private * * @see     PMA_displayTableNavigation() */function PMA_displayTableNavigationOneButton($caption, $title, $pos, $html_sql_query, $onsubmit = '', $input_for_real_end = '', $onclick = ''){    global $db, $table, $goto;    $caption_output = '';    // for true or 'both'    if ($GLOBALS['cfg']['NavigationBarIconic']) {        $caption_output .= $caption;    }    // for false or 'both'    if (false === $GLOBALS['cfg']['NavigationBarIconic'] || 'both' === $GLOBALS['cfg']['NavigationBarIconic']) {        $caption_output .= '&nbsp;' . $title;    }    $title_output = ' title="' . $title . '"';        ?><td>    <form action="sql.php" method="post" <?php echo $onsubmit; ?>>        <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>        <input type="hidden" name="sql_query" value="<?php echo $html_sql_query; ?>" />        <input type="hidden" name="pos" value="<?php echo $pos; ?>" />        <input type="hidden" name="goto" value="<?php echo $goto; ?>" />        <?php echo $input_for_real_end; ?>        <input type="submit" name="navig" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : '' ); ?> value="<?php echo $caption_output; ?>"<?php echo $title_output . $onclick; ?> />    </form></td><?php} // end function PMA_displayTableNavigationOneButton()/** * Displays a navigation bar to browse among the results of a SQL query * * @param integer $pos_next                  the offset for the "next" page * @param integer $pos_prev                  the offset for the "previous" page * @param string  $sql_query                 the URL-encoded query * @param string  $id_for_direction_dropdown the id for the direction dropdown * * @return nothing * * @global  string   $db             the database name * @global  string   $table          the table name * @global  string   $goto           the URL to go back in case of errors * @global  integer  $num_rows       the total number of rows returned by the *                                   SQL query * @global  integer  $unlim_num_rows the total number of rows returned by the *                                   SQL any programmatically appended "LIMIT" clause * @global  boolean  $is_innodb      whether its InnoDB or not * @global  array    $showtable      table definitions * * @access  private * * @see     PMA_displayTable() */function PMA_displayTableNavigation($pos_next, $pos_prev, $sql_query, $id_for_direction_dropdown){    global $db, $table, $goto;    global $num_rows, $unlim_num_rows;    global $is_innodb;    global $showtable;    // here, using htmlentities() would cause problems if the query    // contains accented characters    $html_sql_query = htmlspecialchars($sql_query);    /**     * @todo move this to a central place     * @todo for other future table types     */    $is_innodb = (isset($showtable['Type']) && $showtable['Type'] == 'InnoDB');    ?><!-- Navigation bar --><table border="0" cellpadding="0" cellspacing="0" class="navigation"><tr>    <td class="navigation_separator"></td>    <?php    // Move to the beginning or to the previous page    if ($_SESSION['tmp_user_values']['pos'] && $_SESSION['tmp_user_values']['max_rows'] != 'all') {        PMA_displayTableNavigationOneButton('&lt;&lt;', _pgettext('First page', 'Begin'), 0, $html_sql_query);        PMA_displayTableNavigationOneButton('&lt;', _pgettext('Previous page', 'Previous'), $pos_prev, $html_sql_query);    } // end move back    $nbTotalPage = 1;    //page redirection    // (unless we are showing all records)    if ('all' != $_SESSION['tmp_user_values']['max_rows']) { //if1        $pageNow = @floor($_SESSION['tmp_user_values']['pos'] / $_SESSION['tmp_user_values']['max_rows']) + 1;        $nbTotalPage = @ceil($unlim_num_rows / $_SESSION['tmp_user_values']['max_rows']);        if ($nbTotalPage > 1) { //if2       ?>   <td>        <?php            $_url_params = array(                'db'        => $db,                'table'     => $table,                'sql_query' => $sql_query,                'goto'      => $goto,            );            //<form> to keep the form alignment of button < and <<            // and also to know what to execute when the selector changes            echo '<form action="sql.php' . PMA_generate_common_url($_url_params). '" method="post">';            echo PMA_pageselector(                $_SESSION['tmp_user_values']['max_rows'],                $pageNow,                $nbTotalPage,                200,                5,                5,                20,                10            );        ?>        </form>    </td>        <?php        } //_if2    } //_if1    // Display the "Show all" button if allowed    if (($num_rows < $unlim_num_rows) && ($GLOBALS['cfg']['ShowAll'] || ($GLOBALS['cfg']['MaxRows'] * 5 >= $unlim_num_rows))) {        echo "\n";        ?>    <td>        <form action="sql.php" method="post">            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="sql_query" value="<?php echo $html_sql_query; ?>" />            <input type="hidden" name="pos" value="0" />            <input type="hidden" name="session_max_rows" value="all" />            <input type="hidden" name="goto" value="<?php echo $goto; ?>" />            <input type="submit" name="navig" value="<?php echo __('Show all'); ?>" />        </form>    </td>        <?php    } // end show all    // Move to the next page or to the last one    if (($_SESSION['tmp_user_values']['pos'] + $_SESSION['tmp_user_values']['max_rows'] < $unlim_num_rows)        && $num_rows >= $_SESSION['tmp_user_values']['max_rows']        && $_SESSION['tmp_user_values']['max_rows'] != 'all'    ) {        // display the Next button        PMA_displayTableNavigationOneButton(            '&gt;',            _pgettext('Next page', 'Next'),            $pos_next,            $html_sql_query        );        // prepare some options for the End button        if ($is_innodb && $unlim_num_rows > $GLOBALS['cfg']['MaxExactCount']) {            $input_for_real_end = '<input id="real_end_input" type="hidden" name="find_real_end" value="1" />';            // no backquote around this message            $onclick = '';        } else {            $input_for_real_end = $onclick = '';        }        // display the End button        PMA_displayTableNavigationOneButton(            '&gt;&gt;',            _pgettext('Last page', 'End'),            @((ceil($unlim_num_rows / $_SESSION['tmp_user_values']['max_rows'])- 1) * $_SESSION['tmp_user_values']['max_rows']),            $html_sql_query,            'onsubmit="return ' . (($_SESSION['tmp_user_values']['pos'] + $_SESSION['tmp_user_values']['max_rows'] < $unlim_num_rows && $num_rows >= $_SESSION['tmp_user_values']['max_rows']) ? 'true' : 'false') . '"',            $input_for_real_end,            $onclick        );    } // end move toward    // show separator if pagination happen    if ($nbTotalPage > 1) {        echo '<td><div class="navigation_separator">|</div></td>';    }    ?>    <td>        <div class="save_edited hide">            <input type="submit" value="<?php echo __('Save edited data'); ?>" />            <div class="navigation_separator">|</div>        </div>    </td>    <td>        <div class="restore_column hide">            <input type="submit" value="<?php echo __('Restore column order'); ?>" />            <div class="navigation_separator">|</div>        </div>    </td><?php // if displaying a VIEW, $unlim_num_rows could be zero because      // of $cfg['MaxExactCountViews']; in this case, avoid passing      // the 5th parameter to checkFormElementInRange()      // (this means we can't validate the upper limit ?>    <td class="navigation_goto">        <form action="sql.php" method="post"    onsubmit="return (checkFormElementInRange(this, 'session_max_rows', '<?php echo str_replace('\'', '\\\'', __('%d is not valid row number.')); ?>', 1) &amp;&amp; checkFormElementInRange(this, 'pos', '<?php echo str_replace('\'', '\\\'', __('%d is not valid row number.')); ?>', 0<?php echo $unlim_num_rows > 0 ? ',' . $unlim_num_rows - 1 : ''; ?>))">            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="sql_query" value="<?php echo $html_sql_query; ?>" />            <input type="hidden" name="goto" value="<?php echo $goto; ?>" />            <input type="submit" name="navig" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?> value="<?php echo __('Show'); ?> :" />            <?php echo __('Start row') . ': ' . "\n"; ?>            <input type="text" name="pos" size="3" value="<?php echo (($pos_next >= $unlim_num_rows) ? 0 : $pos_next); ?>" class="textfield" onfocus="this.select()" />            <?php echo __('Number of rows') . ': ' . "\n"; ?>            <input type="text" name="session_max_rows" size="3" value="<?php echo (($_SESSION['tmp_user_values']['max_rows'] != 'all') ? $_SESSION['tmp_user_values']['max_rows'] : $GLOBALS['cfg']['MaxRows']); ?>" class="textfield" onfocus="this.select()" />        <?php        if ($GLOBALS['cfg']['ShowDisplayDirection']) {            // Display mode (horizontal/vertical and repeat headers)            echo __('Mode') . ': ' . "\n";            $choices = array(                'horizontal'        => __('horizontal'),                'horizontalflipped' => __('horizontal (rotated headers)'),                'vertical'          => __('vertical'));            echo PMA_generate_html_dropdown('disp_direction', $choices, $_SESSION['tmp_user_values']['disp_direction'], $id_for_direction_dropdown);            unset($choices);        }        printf(            __('Headers every %s rows'),            '<input type="text" size="3" name="repeat_cells" value="' . $_SESSION['tmp_user_values']['repeat_cells'] . '" class="textfield" />'        );        echo "\n";        ?>        </form>    </td>    <td class="navigation_separator"></td></tr></table>    <?php} // end of the 'PMA_displayTableNavigation()' function/** * Displays the headers of the results table * * @param array   &$is_display                 which elements to display * @param array   &$fields_meta                the list of fields properties * @param integer $fields_cnt                  the total number of fields returned by the SQL query * @param array   $analyzed_sql                the analyzed query * @param string  $sort_expression             sort expression * @param string  $sort_expression_nodirection sort expression without direction * @param string  $sort_direction              sort direction * * @return  boolean  $clause_is_unique * * @global  string   $db               the database name * @global  string   $table            the table name * @global  string   $goto             the URL to go back in case of errors * @global  string   $sql_query        the SQL query * @global  integer  $num_rows         the total number of rows returned by the *                                     SQL query * @global  array    $vertical_display informations used with vertical display *                                     mode * * @access  private * * @see     PMA_displayTable() */function PMA_displayTableHeaders(&$is_display, &$fields_meta, $fields_cnt = 0, $analyzed_sql = '', $sort_expression, $sort_expression_nodirection, $sort_direction){    global $db, $table, $goto;    global $sql_query, $num_rows;    global $vertical_display, $highlight_columns;    // required to generate sort links that will remember whether the    // "Show all" button has been clicked    $sql_md5 = md5($GLOBALS['sql_query']);    $session_max_rows = $_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'];    if ($analyzed_sql == '') {        $analyzed_sql = array();    }    // can the result be sorted?    if ($is_display['sort_lnk'] == '1') {        // Just as fallback        $unsorted_sql_query     = $sql_query;        if (isset($analyzed_sql[0]['unsorted_query'])) {            $unsorted_sql_query = $analyzed_sql[0]['unsorted_query'];        }        // Handles the case of multiple clicks on a column's header        // which would add many spaces before "ORDER BY" in the        // generated query.        $unsorted_sql_query = trim($unsorted_sql_query);        // sorting by indexes, only if it makes sense (only one table ref)        if (isset($analyzed_sql)            && isset($analyzed_sql[0])            && isset($analyzed_sql[0]['querytype'])            && $analyzed_sql[0]['querytype'] == 'SELECT'            && isset($analyzed_sql[0]['table_ref'])            && count($analyzed_sql[0]['table_ref']) == 1        ) {            // grab indexes data:            $indexes = PMA_Index::getFromTable($table, $db);            // do we have any index?            if ($indexes) {                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                    || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'                ) {                    $span = $fields_cnt;                    if ($is_display['edit_lnk'] != 'nn') {                        $span++;                    }                    if ($is_display['del_lnk'] != 'nn') {                        $span++;                    }                    if ($is_display['del_lnk'] != 'kp' && $is_display['del_lnk'] != 'nn') {                        $span++;                    }                } else {                    $span = $num_rows + floor($num_rows/$_SESSION['tmp_user_values']['repeat_cells']) + 1;                }                echo '<form action="sql.php" method="post">' . "\n";                echo PMA_generate_common_hidden_inputs($db, $table);                echo __('Sort by key') . ': <select name="sql_query" class="autosubmit">' . "\n";                $used_index = false;                $local_order = (isset($sort_expression) ? $sort_expression : '');                foreach ($indexes as $index) {                    $asc_sort = '`' . implode('` ASC, `', array_keys($index->getColumns())) . '` ASC';                    $desc_sort = '`' . implode('` DESC, `', array_keys($index->getColumns())) . '` DESC';                    $used_index = $used_index || $local_order == $asc_sort || $local_order == $desc_sort;                    if (preg_match('@(.*)([[:space:]](LIMIT (.*)|PROCEDURE (.*)|FOR UPDATE|LOCK IN SHARE MODE))@is', $unsorted_sql_query, $my_reg)) {                        $unsorted_sql_query_first_part = $my_reg[1];                        $unsorted_sql_query_second_part = $my_reg[2];                    } else {                        $unsorted_sql_query_first_part = $unsorted_sql_query;                        $unsorted_sql_query_second_part = '';                    }                    echo '<option value="'                        . htmlspecialchars($unsorted_sql_query_first_part  . "\n" . ' ORDER BY ' . $asc_sort . $unsorted_sql_query_second_part)                        . '"' . ($local_order == $asc_sort ? ' selected="selected"' : '')                        . '>' . htmlspecialchars($index->getName()) . ' ('                        . __('Ascending') . ')</option>';                    echo '<option value="'                        . htmlspecialchars($unsorted_sql_query_first_part . "\n" . ' ORDER BY ' . $desc_sort . $unsorted_sql_query_second_part)                        . '"' . ($local_order == $desc_sort ? ' selected="selected"' : '')                        . '>' . htmlspecialchars($index->getName()) . ' ('                        . __('Descending') . ')</option>';                }                echo '<option value="' . htmlspecialchars($unsorted_sql_query) . '"' . ($used_index ? '' : ' selected="selected"') . '>' . __('None') . '</option>';                echo '</select>' . "\n";                echo '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>';                echo '</form>' . "\n";            }        }    }    // Output data needed for grid editing    echo '<input id="save_cells_at_once" type="hidden" value="' . $GLOBALS['cfg']['SaveCellsAtOnce'] . '" />';    echo '<div class="common_hidden_inputs">';    echo PMA_generate_common_hidden_inputs($db, $table);    echo '</div>';    // Output data needed for column reordering and show/hide column    if (PMA_isSelect()) {        // generate the column order, if it is set        $pmatable = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);        if ($col_order) {            echo '<input id="col_order" type="hidden" value="' . implode(',', $col_order) . '" />';        }        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);        if ($col_visib) {            echo '<input id="col_visib" type="hidden" value="' . implode(',', $col_visib) . '" />';        }        // generate table create time        if (! PMA_Table::isView($GLOBALS['table'], $GLOBALS['db'])) {            echo '<input id="table_create_time" type="hidden" value="' .                PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], 'Create_time') . '" />';        }    }    $vertical_display['emptypre']   = 0;    $vertical_display['emptyafter'] = 0;    $vertical_display['textbtn']    = '';    // Display options (if we are not in print view)    if (! (isset($GLOBALS['printview']) && $GLOBALS['printview'] == '1')) {        echo '<form method="post" action="sql.php" name="displayOptionsForm" id="displayOptionsForm"';        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax" ';        }        echo '>';        $url_params = array(            'db' => $db,            'table' => $table,            'sql_query' => $sql_query,            'goto' => $goto,            'display_options_form' => 1        );        echo PMA_generate_common_hidden_inputs($url_params);        echo '<br />';        PMA_generate_slider_effect('displayoptions', __('Options'));        echo '<fieldset>';        echo '<div class="formelement">';        $choices = array(            'P'   => __('Partial texts'),            'F'   => __('Full texts')        );        PMA_display_html_radio('display_text', $choices, $_SESSION['tmp_user_values']['display_text']);        echo '</div>';        // prepare full/partial text button or link        $url_params_full_text = array(            'db' => $db,            'table' => $table,            'sql_query' => $sql_query,            'goto' => $goto,            'full_text_button' => 1        );        if ($_SESSION['tmp_user_values']['display_text']=='F') {            // currently in fulltext mode so show the opposite link            $tmp_image_file = $GLOBALS['pmaThemeImage'] . 's_partialtext.png';            $tmp_txt = __('Partial texts');            $url_params_full_text['display_text'] = 'P';        } else {            $tmp_image_file = $GLOBALS['pmaThemeImage'] . 's_fulltext.png';            $tmp_txt = __('Full texts');            $url_params_full_text['display_text'] = 'F';        }        $tmp_image = '<img class="fulltext" src="' . $tmp_image_file . '" alt="' . $tmp_txt . '" title="' . $tmp_txt . '" />';        $tmp_url = 'sql.php' . PMA_generate_common_url($url_params_full_text);        $full_or_partial_text_link = PMA_linkOrButton($tmp_url, $tmp_image, array(), false);        unset($tmp_image_file, $tmp_txt, $tmp_url, $tmp_image);        if ($GLOBALS['cfgRelation']['relwork'] && $GLOBALS['cfgRelation']['displaywork']) {            echo '<div class="formelement">';            $choices = array(                'K'   => __('Relational key'),                'D'   => __('Relational display column')            );            PMA_display_html_radio('relational_display', $choices, $_SESSION['tmp_user_values']['relational_display']);            echo '</div>';        }        echo '<div class="formelement">';        PMA_display_html_checkbox('display_binary', __('Show binary contents'), ! empty($_SESSION['tmp_user_values']['display_binary']), false);        echo '<br />';        PMA_display_html_checkbox('display_blob', __('Show BLOB contents'), ! empty($_SESSION['tmp_user_values']['display_blob']), false);        echo '<br />';        PMA_display_html_checkbox('display_binary_as_hex', __('Show binary contents as HEX'), ! empty($_SESSION['tmp_user_values']['display_binary_as_hex']), false);        echo '</div>';        // I would have preferred to name this "display_transformation".        // This is the only way I found to be able to keep this setting sticky        // per SQL query, and at the same time have a default that displays        // the transformations.        echo '<div class="formelement">';        PMA_display_html_checkbox('hide_transformation', __('Hide browser transformation'), ! empty($_SESSION['tmp_user_values']['hide_transformation']), false);        echo '</div>';        if (! PMA_DRIZZLE) {            echo '<div class="formelement">';            $choices = array(                'GEOM'  => __('Geometry'),                'WKT'   => __('Well Known Text'),                'WKB'   => __('Well Known Binary')            );            PMA_display_html_radio('geometry_display', $choices, $_SESSION['tmp_user_values']['geometry_display']);            echo '</div>';        }        echo '<div class="clearfloat"></div>';        echo '</fieldset>';        echo '<fieldset class="tblFooters">';        echo '<input type="submit" value="' . __('Go') . '" />';        echo '</fieldset>';        echo '</div>';        echo '</form>';    }    // Start of form for multi-rows edit/delete/export    if ($is_display['del_lnk'] == 'dr' || $is_display['del_lnk'] == 'kp') {        echo '<form method="post" action="tbl_row_action.php" name="resultsForm" id="resultsForm"';        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax" ';        }        echo '>' . "\n";        echo PMA_generate_common_hidden_inputs($db, $table, 1);        echo '<input type="hidden" name="goto"             value="sql.php" />' . "\n";    }    echo '<table id="table_results" class="data';    if ($GLOBALS['cfg']['AjaxEnable']) {        echo ' ajax';    }    echo '">' . "\n";    if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'        || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'    ) {        echo '<thead><tr>' . "\n";    }    // 1. Displays the full/partial text button (part 1)...    if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'        || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'    ) {        $colspan  = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn')                  ? ' colspan="4"'                  : '';    } else {        $rowspan  = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn')                  ? ' rowspan="4"'                  : '';    }    //     ... before the result table    if (($is_display['edit_lnk'] == 'nn' && $is_display['del_lnk'] == 'nn')        && $is_display['text_btn'] == '1'    ) {        $vertical_display['emptypre'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 0;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            ?>    <th colspan="<?php echo $fields_cnt; ?>"></th></tr><tr>            <?php            // end horizontal/horizontalflipped mode        } else {            ?><tr>    <th colspan="<?php echo $num_rows + floor($num_rows/$_SESSION['tmp_user_values']['repeat_cells']) + 1; ?>"></th></tr>            <?php        } // end vertical mode    }    //     ... at the left column of the result table header if possible    //     and required    elseif (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && $is_display['text_btn'] == '1'    ) {        $vertical_display['emptypre'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 0;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            ?>                <th <?php echo $colspan; ?>><?php echo $full_or_partial_text_link;?></th>            <?php            // end horizontal/horizontalflipped mode        } else {            $vertical_display['textbtn'] = '    <th ' . $rowspan . ' valign="middle">' . "\n"                                         . '        ' . "\n"                                         . '    </th>' . "\n";        } // end vertical mode    }    //     ... elseif no button, displays empty(ies) col(s) if required    elseif (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')             && ($is_display['edit_lnk'] != 'nn' || $is_display['del_lnk'] != 'nn')) {        $vertical_display['emptypre'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 0;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            ?>    <td<?php echo $colspan; ?>></td>            <?php            // end horizontal/horizontalfipped mode        } else {            $vertical_display['textbtn'] = '    <td' . $rowspan . '></td>' . "\n";        } // end vertical mode    }    //     ... elseif display an empty column if the actions links are disabled to match the rest of the table    elseif ($GLOBALS['cfg']['RowActionLinks'] == 'none'        && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal' || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')    ) {        echo '<th></th>';    }    // 2. Displays the fields' name    // 2.0 If sorting links should be used, checks if the query is a "JOIN"    //     statement (see 2.1.3)    // 2.0.1 Prepare Display column comments if enabled ($GLOBALS['cfg']['ShowBrowseComments']).    //       Do not show comments, if using horizontalflipped mode, because of space usage    if ($GLOBALS['cfg']['ShowBrowseComments']        && $_SESSION['tmp_user_values']['disp_direction'] != 'horizontalflipped'    ) {        $comments_map = array();        if (isset($analyzed_sql[0]) && is_array($analyzed_sql[0])) {            foreach ($analyzed_sql[0]['table_ref'] as $tbl) {                $tb = $tbl['table_true_name'];                $comments_map[$tb] = PMA_getComments($db, $tb);                unset($tb);            }        }    }    if ($GLOBALS['cfgRelation']['commwork'] && $GLOBALS['cfgRelation']['mimework'] && $GLOBALS['cfg']['BrowseMIME'] && ! $_SESSION['tmp_user_values']['hide_transformation']) {        include_once './libraries/transformations.lib.php';        $GLOBALS['mime_map'] = PMA_getMIME($db, $table);    }    // See if we have to highlight any header fields of a WHERE query.    // Uses SQL-Parser results.    $highlight_columns = array();    if (isset($analyzed_sql) && isset($analyzed_sql[0])        && isset($analyzed_sql[0]['where_clause_identifiers'])    ) {        $wi = 0;        if (isset($analyzed_sql[0]['where_clause_identifiers']) && is_array($analyzed_sql[0]['where_clause_identifiers'])) {            foreach ($analyzed_sql[0]['where_clause_identifiers'] AS $wci_nr => $wci) {                $highlight_columns[$wci] = 'true';            }        }    }    if (PMA_isSelect()) {        // prepare to get the column order, if available        $pmatable = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);    } else {        $col_order = false;        $col_visib = false;    }    for ($j = 0; $j < $fields_cnt; $j++) {        // assign $i with appropriate column order        $i = $col_order ? $col_order[$j] : $j;        //  See if this column should get highlight because it's used in the        //  where-query.        if (isset($highlight_columns[$fields_meta[$i]->name]) || isset($highlight_columns[PMA_backquote($fields_meta[$i]->name)])) {            $condition_field = true;        } else {            $condition_field = false;        }        // 2.0 Prepare comment-HTML-wrappers for each row, if defined/enabled.        if (isset($comments_map)            && isset($comments_map[$fields_meta[$i]->table])            && isset($comments_map[$fields_meta[$i]->table][$fields_meta[$i]->name])        ) {            $comments = '<span class="tblcomment">' . htmlspecialchars($comments_map[$fields_meta[$i]->table][$fields_meta[$i]->name]) . '</span>';        } else {            $comments = '';        }        // 2.1 Results can be sorted        if ($is_display['sort_lnk'] == '1') {            // 2.1.1 Checks if the table name is required; it's the case            //       for a query with a "JOIN" statement and if the column            //       isn't aliased, or in queries like            //       SELECT `1`.`master_field` , `2`.`master_field`            //       FROM `PMA_relation` AS `1` , `PMA_relation` AS `2`            if (isset($fields_meta[$i]->table) && strlen($fields_meta[$i]->table)) {                $sort_tbl = PMA_backquote($fields_meta[$i]->table) . '.';            } else {                $sort_tbl = '';            }            // 2.1.2 Checks if the current column is used to sort the            //       results            // the orgname member does not exist for all MySQL versions            // but if found, it's the one on which to sort            $name_to_use_in_sort = $fields_meta[$i]->name;            $is_orgname = false;            if (isset($fields_meta[$i]->orgname) && strlen($fields_meta[$i]->orgname)) {                $name_to_use_in_sort = $fields_meta[$i]->orgname;                $is_orgname = true;            }            // $name_to_use_in_sort might contain a space due to            // formatting of function expressions like "COUNT(name )"            // so we remove the space in this situation            $name_to_use_in_sort = str_replace(' )', ')', $name_to_use_in_sort);            if (empty($sort_expression)) {                $is_in_sort = false;            } else {                // Field name may be preceded by a space, or any number                // of characters followed by a dot (tablename.fieldname)                // so do a direct comparison for the sort expression;                // this avoids problems with queries like                // "SELECT id, count(id)..." and clicking to sort                // on id or on count(id).                // Another query to test this:                // SELECT p.*, FROM_UNIXTIME(p.temps) FROM mytable AS p                // (and try clicking on each column's header twice)                if (! empty($sort_tbl)                    && strpos($sort_expression_nodirection, $sort_tbl) === false                    && strpos($sort_expression_nodirection, '(') === false                ) {                    $sort_expression_nodirection = $sort_tbl . $sort_expression_nodirection;                }                $is_in_sort = (str_replace('`', '', $sort_tbl) . $name_to_use_in_sort == str_replace('`', '', $sort_expression_nodirection) ? true : false);            }            // 2.1.3 Check the field name for a bracket.            //       If it contains one, it's probably a function column            //       like 'COUNT(`field`)'            //       It still might be a column name of a view. See bug #3383711            //       Check is_orgname.            if (strpos($name_to_use_in_sort, '(') !== false && ! $is_orgname) {                $sort_order = "\n" . 'ORDER BY ' . $name_to_use_in_sort . ' ';            } else {                $sort_order = "\n" . 'ORDER BY ' . $sort_tbl . PMA_backquote($name_to_use_in_sort) . ' ';            }            unset($name_to_use_in_sort);            unset($is_orgname);            // 2.1.4 Do define the sorting URL            if (! $is_in_sort) {                // patch #455484 ("Smart" order)                $GLOBALS['cfg']['Order'] = strtoupper($GLOBALS['cfg']['Order']);                if ($GLOBALS['cfg']['Order'] === 'SMART') {                    $sort_order .= (preg_match('@time|date@i', $fields_meta[$i]->type)) ? 'DESC' : 'ASC';                } else {                    $sort_order .= $GLOBALS['cfg']['Order'];                }                $order_img   = '';            } elseif ('DESC' == $sort_direction) {                $sort_order .= ' ASC';                $order_img   = ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => "soimg$i", 'title' => ''));                $order_img  .= ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => "soimg$i hide", 'title' => ''));            } else {                $sort_order .= ' DESC';                $order_img   = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => "soimg$i", 'title' => ''));                $order_img  .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => "soimg$i hide", 'title' => ''));            }            if (preg_match('@(.*)([[:space:]](LIMIT (.*)|PROCEDURE (.*)|FOR UPDATE|LOCK IN SHARE MODE))@is', $unsorted_sql_query, $regs3)) {                $sorted_sql_query = $regs3[1] . $sort_order . $regs3[2];            } else {                $sorted_sql_query = $unsorted_sql_query . $sort_order;            }            $_url_params = array(                'db'                => $db,                'table'             => $table,                'sql_query'         => $sorted_sql_query,                'session_max_rows'  => $session_max_rows            );            $order_url  = 'sql.php' . PMA_generate_common_url($_url_params);            // 2.1.5 Displays the sorting URL            // enable sort order swapping for image            $order_link_params = array();            if (isset($order_img) && $order_img!='') {                if (strstr($order_img, 'asc')) {                    $order_link_params['onmouseover'] = "$('.soimg$i').toggle()";                    $order_link_params['onmouseout']  = "$('.soimg$i').toggle()";                } elseif (strstr($order_img, 'desc')) {                    $order_link_params['onmouseover'] = "$('.soimg$i').toggle()";                    $order_link_params['onmouseout']  = "$('.soimg$i').toggle()";                }            }            if ($GLOBALS['cfg']['HeaderFlipType'] == 'auto') {                if (PMA_USR_BROWSER_AGENT == 'IE') {                    $GLOBALS['cfg']['HeaderFlipType'] = 'css';                } else {                    $GLOBALS['cfg']['HeaderFlipType'] = 'fake';                }            }            if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'                && $GLOBALS['cfg']['HeaderFlipType'] == 'css'            ) {                $order_link_params['style'] = 'direction: ltr; writing-mode: tb-rl;';            }            $order_link_params['title'] = __('Sort');            $order_link_content = ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped' && $GLOBALS['cfg']['HeaderFlipType'] == 'fake' ? PMA_flipstring(htmlspecialchars($fields_meta[$i]->name), "<br />\n") : htmlspecialchars($fields_meta[$i]->name));            $order_link = PMA_linkOrButton($order_url, $order_link_content . $order_img, $order_link_params, false, true);            if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'            ) {                echo '<th';                $th_class = array();                $th_class[] = 'draggable';                if ($col_visib && !$col_visib[$j]) {                    $th_class[] = 'hide';                }                if ($condition_field) {                    $th_class[] = 'condition';                }                $th_class[] = 'column_heading';                if ($GLOBALS['cfg']['BrowsePointerEnable'] == true) {                    $th_class[] = 'pointer';                }                if ($GLOBALS['cfg']['BrowseMarkerEnable'] == true) {                    $th_class[] = 'marker';                }                echo ' class="' . implode(' ', $th_class) . '"';                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped') {                    echo ' valign="bottom"';                }                echo '>' . $order_link . $comments . '</th>';            }            $vertical_display['desc'][] = '    <th '                . 'class="draggable'                . ($condition_field ? ' condition' : '')                . '">' . "\n"                . $order_link . $comments . '    </th>' . "\n";        } // end if (2.1)        // 2.2 Results can't be sorted        else {            if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'            ) {                echo '<th';                $th_class = array();                $th_class[] = 'draggable';                if ($col_visib && !$col_visib[$j]) {                    $th_class[] = 'hide';                }                if ($condition_field) {                    $th_class[] = 'condition';                }                echo ' class="' . implode(' ', $th_class) . '"';                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped') {                    echo ' valign="bottom"';                }                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'                    && $GLOBALS['cfg']['HeaderFlipType'] == 'css'                ) {                    echo ' style="direction: ltr; writing-mode: tb-rl;"';                }                echo '>';                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'                    && $GLOBALS['cfg']['HeaderFlipType'] == 'fake'                ) {                    echo PMA_flipstring(htmlspecialchars($fields_meta[$i]->name), '<br />');                } else {                    echo htmlspecialchars($fields_meta[$i]->name);                }                echo "\n" . $comments . '</th>';            }            $vertical_display['desc'][] = '    <th '                . 'class="draggable'                . ($condition_field ? ' condition"' : '')                . '">' . "\n"                . '        ' . htmlspecialchars($fields_meta[$i]->name) . "\n"                . $comments . '    </th>';        } // end else (2.2)    } // end for    // 3. Displays the needed checkboxes at the right    //    column of the result table header if possible and required...    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && ($is_display['edit_lnk'] != 'nn' || $is_display['del_lnk'] != 'nn')        && $is_display['text_btn'] == '1'    ) {        $vertical_display['emptyafter'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 1;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            echo "\n";            ?>        <th <?php echo $colspan; ?>><?php echo $full_or_partial_text_link;?></th>            <?php            // end horizontal/horizontalflipped mode        } else {            $vertical_display['textbtn'] = '    <th ' . $rowspan . ' valign="middle">' . "\n"                                         . '        ' . "\n"                                         . '    </th>' . "\n";        } // end vertical mode    }    //     ... elseif no button, displays empty columns if required    // (unless coming from Browse mode print view)    elseif (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && ($is_display['edit_lnk'] == 'nn' && $is_display['del_lnk'] == 'nn')        && (! $GLOBALS['is_header_sent'])    ) {        $vertical_display['emptyafter'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 1;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            echo "\n";            ?><td<?php echo $colspan; ?>></td>            <?php            // end horizontal/horizontalflipped mode        } else {            $vertical_display['textbtn'] = '    <td' . $rowspan . '></td>' . "\n";        } // end vertical mode    }    if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'        || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'    ) {        ?></tr></thead>        <?php    }    return true;} // end of the 'PMA_displayTableHeaders()' function/** * Prepares the display for a value * * @param string $class           class of table cell * @param bool   $condition_field whether to add CSS class condition * @param string $value           value to display * * @return  string  the td */function PMA_buildValueDisplay($class, $condition_field, $value){    return '<td align="left"' . ' class="' . $class . ($condition_field ? ' condition' : '') . '">' . $value . '</td>';}/** * Prepares the display for a null value * * @param string $class           class of table cell * @param bool   $condition_field whether to add CSS class condition * @param object $meta            the meta-information about this field * @param string $align           cell allignment * * @return  string  the td */function PMA_buildNullDisplay($class, $condition_field, $meta, $align = ''){    // the null class is needed for grid editing    return '<td ' . $align . ' class="' . PMA_addClass($class, $condition_field, $meta, '') . ' null"><i>NULL</i></td>';}/** * Prepares the display for an empty value * * @param string $class           class of table cell * @param bool   $condition_field whether to add CSS class condition * @param object $meta            the meta-information about this field * @param string $align           cell allignment * * @return  string  the td */function PMA_buildEmptyDisplay($class, $condition_field, $meta, $align = ''){    $nowrap = ' nowrap';    return '<td ' . $align . ' class="' . PMA_addClass($class, $condition_field, $meta, $nowrap)  . '"></td>';}/** * Adds the relavant classes. * * @param string $class              class of table cell * @param bool   $condition_field    whether to add CSS class condition * @param object $meta               the meta-information about this field * @param string $nowrap             avoid wrapping * @param bool   $is_field_truncated is field truncated (display ...) * @param string $transform_function transformation function * @param string $default_function   default transformation function * * @return string the list of classes */function PMA_addClass($class, $condition_field, $meta, $nowrap, $is_field_truncated = false, $transform_function = '', $default_function = ''){    // Define classes to be added to this data field based on the type of data    $enum_class = '';    if (strpos($meta->flags, 'enum') !== false) {        $enum_class = ' enum';    }    $set_class = '';    if (strpos($meta->flags, 'set') !== false) {        $set_class = ' set';    }    $bit_class = '';    if (strpos($meta->type, 'bit') !== false) {        $bit_class = ' bit';    }    $mime_type_class = '';    if (isset($meta->mimetype)) {        $mime_type_class = ' ' . preg_replace('/\//', '_', $meta->mimetype);    }    $result = $class . ($condition_field ? ' condition' : '') . $nowrap    . ' ' . ($is_field_truncated ? ' truncated' : '')    . ($transform_function != $default_function ? ' transformed' : '')    . $enum_class . $set_class . $bit_class . $mime_type_class;    return $result;}/** * Displays the body of the results table * * @param integer &$dt_result   the link id associated to the query which results have *                              to be displayed * @param array   &$is_display  which elements to display * @param array   $map          the list of relations * @param array   $analyzed_sql the analyzed query * * @return  boolean  always true * * @global string   $db                the database name * @global string   $table             the table name * @global string   $goto              the URL to go back in case of errors * @global string   $sql_query         the SQL query * @global array    $fields_meta       the list of fields properties * @global integer  $fields_cnt        the total number of fields returned by *                                      the SQL query * @global array    $vertical_display  informations used with vertical display *                                      mode * @global array    $highlight_columns column names to highlight * @global array    $row               current row data * * @access private * * @see     PMA_displayTable() */function PMA_displayTableBody(&$dt_result, &$is_display, $map, $analyzed_sql){    global $db, $table, $goto;    global $sql_query, $fields_meta, $fields_cnt;    global $vertical_display, $highlight_columns;    global $row; // mostly because of browser transformations, to make the row-data accessible in a plugin    $url_sql_query          = $sql_query;    // query without conditions to shorten URLs when needed, 200 is just    // guess, it should depend on remaining URL length    if (isset($analyzed_sql)        && isset($analyzed_sql[0])        && isset($analyzed_sql[0]['querytype'])        && $analyzed_sql[0]['querytype'] == 'SELECT'        && strlen($sql_query) > 200    ) {        $url_sql_query = 'SELECT ';        if (isset($analyzed_sql[0]['queryflags']['distinct'])) {            $url_sql_query .= ' DISTINCT ';        }        $url_sql_query .= $analyzed_sql[0]['select_expr_clause'];        if (!empty($analyzed_sql[0]['from_clause'])) {            $url_sql_query .= ' FROM ' . $analyzed_sql[0]['from_clause'];        }    }    if (! is_array($map)) {        $map = array();    }    $row_no                         = 0;    $vertical_display['edit']       = array();    $vertical_display['copy']       = array();    $vertical_display['delete']     = array();    $vertical_display['data']       = array();    $vertical_display['row_delete'] = array();    // name of the class added to all grid editable elements    $grid_edit_class = 'grid_edit';    // prepare to get the column order, if available    if (PMA_isSelect()) {        $pmatable = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);    } else {        $col_order = false;        $col_visib = false;    }    // Correction University of Virginia 19991216 in the while below    // Previous code assumed that all tables have keys, specifically that    // the phpMyAdmin GUI should support row delete/edit only for such    // tables.    // Although always using keys is arguably the prescribed way of    // defining a relational table, it is not required. This will in    // particular be violated by the novice.    // We want to encourage phpMyAdmin usage by such novices. So the code    // below has been changed to conditionally work as before when the    // table being displayed has one or more keys; but to display    // delete/edit options correctly for tables without keys.    $odd_row = true;    while ($row = PMA_DBI_fetch_row($dt_result)) {        // "vertical display" mode stuff        if ($row_no != 0 && $_SESSION['tmp_user_values']['repeat_cells'] != 0            && !($row_no % $_SESSION['tmp_user_values']['repeat_cells'])            && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')        ) {            echo '<tr>' . "\n";            if ($vertical_display['emptypre'] > 0) {                echo '    <th colspan="' . $vertical_display['emptypre'] . '">' . "\n"                    .'        &nbsp;</th>' . "\n";            } else if ($GLOBALS['cfg']['RowActionLinks'] == 'none') {                echo '    <th></th>' . "\n";            }            foreach ($vertical_display['desc'] as $val) {                echo $val;            }            if ($vertical_display['emptyafter'] > 0) {                echo '    <th colspan="' . $vertical_display['emptyafter'] . '">' . "\n"                    .'        &nbsp;</th>' . "\n";            }            echo '</tr>' . "\n";        } // end if        $alternating_color_class = ($odd_row ? 'odd' : 'even');        $odd_row = ! $odd_row;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            // pointer code part            echo '<tr class="' . $alternating_color_class . '">';        }        // 1. Prepares the row        // 1.1 Results from a "SELECT" statement -> builds the        //     WHERE clause to use in links (a unique key if possible)        /**         * @todo $where_clause could be empty, for example a table         *       with only one field and it's a BLOB; in this case,         *       avoid to display the delete and edit links         */        list($where_clause, $clause_is_unique, $condition_array) = PMA_getUniqueCondition($dt_result, $fields_cnt, $fields_meta, $row);        $where_clause_html = urlencode($where_clause);        // 1.2 Defines the URLs for the modify/delete link(s)        if ($is_display['edit_lnk'] != 'nn' || $is_display['del_lnk'] != 'nn') {            // We need to copy the value or else the == 'both' check will always return true            if ($GLOBALS['cfg']['PropertiesIconic'] === 'both') {                $iconic_spacer = '<div class="nowrap">';            } else {                $iconic_spacer = '';            }            // 1.2.1 Modify link(s)            if ($is_display['edit_lnk'] == 'ur') { // update row case                $_url_params = array(                    'db'               => $db,                    'table'            => $table,                    'where_clause'     => $where_clause,                    'clause_is_unique' => $clause_is_unique,                    'sql_query'        => $url_sql_query,                    'goto'             => 'sql.php',                );                $edit_url = 'tbl_change.php' . PMA_generate_common_url($_url_params + array('default_action' => 'update'));                $copy_url = 'tbl_change.php' . PMA_generate_common_url($_url_params + array('default_action' => 'insert'));                $edit_str = PMA_getIcon('b_edit.png', __('Edit'));                $copy_str = PMA_getIcon('b_insrow.png', __('Copy'));                // Class definitions required for grid editing jQuery scripts                $edit_anchor_class = "edit_row_anchor";                if ( $clause_is_unique == 0) {                    $edit_anchor_class .= ' nonunique';                }            } // end if (1.2.1)            // 1.2.2 Delete/Kill link(s)            if ($is_display['del_lnk'] == 'dr') { // delete row case                $_url_params = array(                    'db'        => $db,                    'table'     => $table,                    'sql_query' => $url_sql_query,                    'message_to_show' => __('The row has been deleted'),                    'goto'      => (empty($goto) ? 'tbl_sql.php' : $goto),                );                $lnk_goto = 'sql.php' . PMA_generate_common_url($_url_params, 'text');                $del_query = 'DELETE FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table)                    . ' WHERE ' . $where_clause . ($clause_is_unique ? '' : ' LIMIT 1');                $_url_params = array(                    'db'        => $db,                    'table'     => $table,                    'sql_query' => $del_query,                    'message_to_show' => __('The row has been deleted'),                    'goto'      => $lnk_goto,                );                $del_url  = 'sql.php' . PMA_generate_common_url($_url_params);                $js_conf  = 'DELETE FROM ' . PMA_jsFormat($db) . '.' . PMA_jsFormat($table)                          . ' WHERE ' . PMA_jsFormat($where_clause, false)                          . ($clause_is_unique ? '' : ' LIMIT 1');                $del_str = PMA_getIcon('b_drop.png', __('Delete'));            } elseif ($is_display['del_lnk'] == 'kp') { // kill process case                $_url_params = array(                    'db'        => $db,                    'table'     => $table,                    'sql_query' => $url_sql_query,                    'goto'      => 'main.php',                );                $lnk_goto = 'sql.php' . PMA_generate_common_url($_url_params, 'text');                $_url_params = array(                    'db'        => 'mysql',                    'sql_query' => 'KILL ' . $row[0],                    'goto'      => $lnk_goto,                );                $del_url  = 'sql.php' . PMA_generate_common_url($_url_params);                $del_query = 'KILL ' . $row[0];                $js_conf  = 'KILL ' . $row[0];                $del_str = PMA_getIcon('b_drop.png', __('Kill'));            } // end if (1.2.2)            // 1.3 Displays the links at left if required            if (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')                && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')            ) {                if (! isset($js_conf)) {                    $js_conf = '';                }                echo PMA_generateCheckboxAndLinks('left', $del_url, $is_display, $row_no, $where_clause, $where_clause_html, $condition_array, $del_query, 'l', $edit_url, $copy_url, $edit_anchor_class, $edit_str, $copy_str, $del_str, $js_conf);            } elseif (($GLOBALS['cfg']['RowActionLinks'] == 'none')                && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')            ) {                if (! isset($js_conf)) {                    $js_conf = '';                }                echo PMA_generateCheckboxAndLinks('none', $del_url, $is_display, $row_no, $where_clause, $where_clause_html, $condition_array, $del_query, 'l', $edit_url, $copy_url, $edit_anchor_class, $edit_str, $copy_str, $del_str, $js_conf);            } // end if (1.3)        } // end if (1)        // 2. Displays the rows' values        for ($j = 0; $j < $fields_cnt; ++$j) {            // assign $i with appropriate column order            $i = $col_order ? $col_order[$j] : $j;            $meta    = $fields_meta[$i];            $not_null_class = $meta->not_null ? 'not_null' : '';            $relation_class = isset($map[$meta->name]) ? 'relation' : '';            $hide_class = ($col_visib && !$col_visib[$j] &&                           // hide per <td> only if the display direction is not vertical                           $_SESSION['tmp_user_values']['disp_direction'] != 'vertical') ? 'hide' : '';            // handle datetime-related class, for grid editing            if (substr($meta->type, 0, 9) == 'timestamp' || $meta->type == 'datetime') {                $field_type_class = 'datetimefield';            } else if ($meta->type == 'date') {                $field_type_class = 'datefield';            } else {                $field_type_class = '';            }            $pointer = $i;            $is_field_truncated = false;            //If the previous column had blob data, we need to reset the class            // to $inline_edit_class            $class = 'data ' . $grid_edit_class . ' ' . $not_null_class . ' ' . $relation_class . ' ' . $hide_class . ' ' . $field_type_class; //' ' . $alternating_color_class .            //  See if this column should get highlight because it's used in the            //  where-query.            if (isset($highlight_columns) && (isset($highlight_columns[$meta->name]) || isset($highlight_columns[PMA_backquote($meta->name)]))) {                $condition_field = true;            } else {                $condition_field = false;            }            if ($_SESSION['tmp_user_values']['disp_direction'] == 'vertical' && (! isset($GLOBALS['printview']) || ($GLOBALS['printview'] != '1'))) {                // the row number corresponds to a data row, not HTML table row                $class .= ' row_' . $row_no;                if ($GLOBALS['cfg']['BrowsePointerEnable'] == true) {                    $class .= ' vpointer';                }                if ($GLOBALS['cfg']['BrowseMarkerEnable'] == true) {                    $class .= ' vmarker';                }            }// end if            // Wrap MIME-transformations. [MIME]            $default_function = 'default_function'; // default_function            $transform_function = $default_function;            $transform_options = array();            if ($GLOBALS['cfgRelation']['mimework'] && $GLOBALS['cfg']['BrowseMIME']) {                if (isset($GLOBALS['mime_map'][$meta->name]['mimetype']) && isset($GLOBALS['mime_map'][$meta->name]['transformation']) && !empty($GLOBALS['mime_map'][$meta->name]['transformation'])) {                    $include_file = PMA_securePath($GLOBALS['mime_map'][$meta->name]['transformation']);                    if (file_exists('./libraries/transformations/' . $include_file)) {                        $transformfunction_name = str_replace('.inc.php', '', $GLOBALS['mime_map'][$meta->name]['transformation']);                        include_once './libraries/transformations/' . $include_file;                        if (function_exists('PMA_transformation_' . $transformfunction_name)) {                            $transform_function = 'PMA_transformation_' . $transformfunction_name;                            $transform_options  = PMA_transformation_getOptions((isset($GLOBALS['mime_map'][$meta->name]['transformation_options']) ? $GLOBALS['mime_map'][$meta->name]['transformation_options'] : ''));                            $meta->mimetype     = str_replace('_', '/', $GLOBALS['mime_map'][$meta->name]['mimetype']);                        }                    } // end if file_exists                } // end if transformation is set            } // end if mime/transformation works.            $_url_params = array(                'db'            => $db,                'table'         => $table,                'where_clause'  => $where_clause,                'transform_key' => $meta->name,            );            if (! empty($sql_query)) {                $_url_params['sql_query'] = $url_sql_query;            }            $transform_options['wrapper_link'] = PMA_generate_common_url($_url_params);            // n u m e r i c            if ($meta->numeric == 1) {                // if two fields have the same name (this is possible                //       with self-join queries, for example), using $meta->name                //       will show both fields NULL even if only one is NULL,                //       so use the $pointer                if (! isset($row[$i]) || is_null($row[$i])) {                    $vertical_display['data'][$row_no][$i]     =  PMA_buildNullDisplay($class, $condition_field, $meta, 'align="right"');                } elseif ($row[$i] != '') {                    $nowrap = ' nowrap';                    $where_comparison = ' = ' . $row[$i];                    $vertical_display['data'][$row_no][$i]     = '<td align="right"' . PMA_prepare_row_data($class, $condition_field, $analyzed_sql, $meta, $map, $row[$i], $transform_function, $default_function, $nowrap, $where_comparison, $transform_options, $is_field_truncated);                } else {                    $vertical_display['data'][$row_no][$i]     = PMA_buildEmptyDisplay($class, $condition_field, $meta, 'align="right"');                }            //  b l o b            } elseif (stristr($meta->type, 'BLOB')) {                // PMA_mysql_fetch_fields returns BLOB in place of                // TEXT fields type so we have to ensure it's really a BLOB                $field_flags = PMA_DBI_field_flags($dt_result, $i);                if (stristr($field_flags, 'BINARY')) {                    // remove 'grid_edit' from $class as we can't edit binary data.                    $class = str_replace('grid_edit', '', $class);                    if (! isset($row[$i]) || is_null($row[$i])) {                        $vertical_display['data'][$row_no][$i]     =  PMA_buildNullDisplay($class, $condition_field, $meta);                    } else {                        // for blobstreaming                        // if valid BS reference exists                        if (PMA_BS_IsPBMSReference($row[$i], $db)) {                            $blobtext = PMA_BS_CreateReferenceLink($row[$i], $db);                        } else {                            $blobtext = PMA_handle_non_printable_contents('BLOB', (isset($row[$i]) ? $row[$i] : ''), $transform_function, $transform_options, $default_function, $meta, $_url_params);                        }                        $vertical_display['data'][$row_no][$i]     =  PMA_buildValueDisplay($class, $condition_field, $blobtext);                        unset($blobtext);                    }                // not binary:                } else {                    if (! isset($row[$i]) || is_null($row[$i])) {                        $vertical_display['data'][$row_no][$i]     =  PMA_buildNullDisplay($class, $condition_field, $meta);                    } elseif ($row[$i] != '') {                        // if a transform function for blob is set, none of these replacements will be made                        if (PMA_strlen($row[$i]) > $GLOBALS['cfg']['LimitChars'] && $_SESSION['tmp_user_values']['display_text'] == 'P') {                            $row[$i] = PMA_substr($row[$i], 0, $GLOBALS['cfg']['LimitChars']) . '...';                            $is_field_truncated = true;                        }                        // displays all space characters, 4 space                        // characters for tabulations and <cr>/<lf>                        $row[$i]     = ($default_function != $transform_function ? $transform_function($row[$i], $transform_options, $meta) : $default_function($row[$i], array(), $meta));                        if ($is_field_truncated) {                            $class .= ' truncated';                        }                        $vertical_display['data'][$row_no][$i]     = PMA_buildValueDisplay($class, $condition_field, $row[$i]);                    } else {                        $vertical_display['data'][$row_no][$i]     = PMA_buildEmptyDisplay($class, $condition_field, $meta);                    }                }            // g e o m e t r y            } elseif ($meta->type == 'geometry') {                // Remove 'grid_edit' from $class as we do not allow to inline-edit geometry data.                $class = str_replace('grid_edit', '', $class);                if (! isset($row[$i]) || is_null($row[$i])) {                    $vertical_display['data'][$row_no][$i] = PMA_buildNullDisplay($class, $condition_field, $meta);                } elseif ($row[$i] != '') {                    // Display as [GEOMETRY - (size)]                    if ('GEOM' == $_SESSION['tmp_user_values']['geometry_display']) {                        $geometry_text = PMA_handle_non_printable_contents(                            'GEOMETRY', (isset($row[$i]) ? $row[$i] : ''), $transform_function,                            $transform_options, $default_function, $meta                        );                        $vertical_display['data'][$row_no][$i] = PMA_buildValueDisplay(                            $class, $condition_field, $geometry_text                        );                    // Display in Well Known Text(WKT) format.                    } elseif ('WKT' == $_SESSION['tmp_user_values']['geometry_display']) {                        $where_comparison = ' = ' . $row[$i];                        // Convert to WKT format                        $wktval = PMA_asWKT($row[$i]);                        if (PMA_strlen($wktval) > $GLOBALS['cfg']['LimitChars']                            && $_SESSION['tmp_user_values']['display_text'] == 'P'                        ) {                            $wktval = PMA_substr($wktval, 0, $GLOBALS['cfg']['LimitChars']) . '...';                            $is_field_truncated = true;                        }                        $vertical_display['data'][$row_no][$i] = '<td ' . PMA_prepare_row_data(                            $class, $condition_field, $analyzed_sql, $meta, $map, $wktval, $transform_function,                            $default_function, '', $where_comparison, $transform_options, $is_field_truncated                        );                    // Display in  Well Known Binary(WKB) format.                    } else {                        if ($_SESSION['tmp_user_values']['display_binary']) {                            $where_comparison = ' = ' . $row[$i];                            if ($_SESSION['tmp_user_values']['display_binary_as_hex']                                && PMA_contains_nonprintable_ascii($row[$i])                            ) {                                $wkbval = PMA_substr(bin2hex($row[$i]), 8);                            } else {                                $wkbval = htmlspecialchars(PMA_replace_binary_contents($row[$i]));                            }                            if (PMA_strlen($wkbval) > $GLOBALS['cfg']['LimitChars']                                && $_SESSION['tmp_user_values']['display_text'] == 'P'                            ) {                                $wkbval = PMA_substr($wkbval, 0, $GLOBALS['cfg']['LimitChars']) . '...';                                $is_field_truncated = true;                            }                            $vertical_display['data'][$row_no][$i] = '<td ' . PMA_prepare_row_data(                                $class, $condition_field, $analyzed_sql, $meta, $map, $wkbval, $transform_function,                                $default_function, '', $where_comparison, $transform_options, $is_field_truncated                            );                        } else {                            $wkbval = PMA_handle_non_printable_contents(                                'BINARY', $row[$i], $transform_function, $transform_options, $default_function, $meta, $_url_params                            );                            $vertical_display['data'][$row_no][$i] = PMA_buildValueDisplay($class, $condition_field, $wkbval);                        }                    }                } else {                    $vertical_display['data'][$row_no][$i] = PMA_buildEmptyDisplay($class, $condition_field, $meta);                }            // n o t   n u m e r i c   a n d   n o t   B L O B            } else {                if (! isset($row[$i]) || is_null($row[$i])) {                    $vertical_display['data'][$row_no][$i]     =  PMA_buildNullDisplay($class, $condition_field, $meta);                } elseif ($row[$i] != '') {                    // support blanks in the key                    $relation_id = $row[$i];                    // Cut all fields to $GLOBALS['cfg']['LimitChars']                    // (unless it's a link-type transformation)                    if (PMA_strlen($row[$i]) > $GLOBALS['cfg']['LimitChars'] && $_SESSION['tmp_user_values']['display_text'] == 'P' && !strpos($transform_function, 'link') === true) {                        $row[$i] = PMA_substr($row[$i], 0, $GLOBALS['cfg']['LimitChars']) . '...';                        $is_field_truncated = true;                    }                    // displays special characters from binaries                    $field_flags = PMA_DBI_field_flags($dt_result, $i);                    $formatted = false;                    if (isset($meta->_type) && $meta->_type === MYSQLI_TYPE_BIT) {                        $row[$i]     = PMA_printable_bit_value($row[$i], $meta->length);                        // some results of PROCEDURE ANALYSE() are reported as                        // being BINARY but they are quite readable,                        // so don't treat them as BINARY                    } elseif (stristr($field_flags, 'BINARY') && $meta->type == 'string' && !(isset($GLOBALS['is_analyse']) && $GLOBALS['is_analyse'])) {                        if ($_SESSION['tmp_user_values']['display_binary']) {                            // user asked to see the real contents of BINARY                            // fields                            if ($_SESSION['tmp_user_values']['display_binary_as_hex'] && PMA_contains_nonprintable_ascii($row[$i])) {                                $row[$i] = bin2hex($row[$i]);                            } else {                                $row[$i] = htmlspecialchars(PMA_replace_binary_contents($row[$i]));                            }                        } else {                            // we show the BINARY message and field's size                            // (or maybe use a transformation)                            $row[$i] = PMA_handle_non_printable_contents('BINARY', $row[$i], $transform_function, $transform_options, $default_function, $meta, $_url_params);                            $formatted = true;                        }                    }                    if ($formatted) {                        $vertical_display['data'][$row_no][$i]     = PMA_buildValueDisplay($class, $condition_field, $row[$i]);                    } else {                        // transform functions may enable no-wrapping:                        $function_nowrap = $transform_function . '_nowrap';                        $bool_nowrap = (($default_function != $transform_function && function_exists($function_nowrap)) ? $function_nowrap($transform_options) : false);                        // do not wrap if date field type                        $nowrap = ((preg_match('@DATE|TIME@i', $meta->type) || $bool_nowrap) ? ' nowrap' : '');                        $where_comparison = ' = \'' . PMA_sqlAddSlashes($row[$i]) . '\'';                        $vertical_display['data'][$row_no][$i]     = '<td ' . PMA_prepare_row_data($class, $condition_field, $analyzed_sql, $meta, $map, $row[$i], $transform_function, $default_function, $nowrap, $where_comparison, $transform_options, $is_field_truncated);                    }                } else {                    $vertical_display['data'][$row_no][$i]     = PMA_buildEmptyDisplay($class, $condition_field, $meta);                }            }            // output stored cell            if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'            ) {                echo $vertical_display['data'][$row_no][$i];            }            if (isset($vertical_display['rowdata'][$i][$row_no])) {                $vertical_display['rowdata'][$i][$row_no] .= $vertical_display['data'][$row_no][$i];            } else {                $vertical_display['rowdata'][$i][$row_no] = $vertical_display['data'][$row_no][$i];            }        } // end for (2)        // 3. Displays the modify/delete links on the right if required        if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')            && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')        ) {            if (! isset($js_conf)) {                $js_conf = '';            }            echo PMA_generateCheckboxAndLinks('right', $del_url, $is_display, $row_no, $where_clause, $where_clause_html, $condition_array, $del_query, 'r', $edit_url, $copy_url, $edit_anchor_class, $edit_str, $copy_str, $del_str, $js_conf);        } // end if (3)        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            ?></tr>            <?php        } // end if        // 4. Gather links of del_urls and edit_urls in an array for later        //    output        if (! isset($vertical_display['edit'][$row_no])) {            $vertical_display['edit'][$row_no]       = '';            $vertical_display['copy'][$row_no]       = '';            $vertical_display['delete'][$row_no]     = '';            $vertical_display['row_delete'][$row_no] = '';        }        $vertical_class = ' row_' . $row_no;        if ($GLOBALS['cfg']['BrowsePointerEnable'] == true) {            $vertical_class .= ' vpointer';        }        if ($GLOBALS['cfg']['BrowseMarkerEnable'] == true) {            $vertical_class .= ' vmarker';        }        if (!empty($del_url) && $is_display['del_lnk'] != 'kp') {            $vertical_display['row_delete'][$row_no] .= PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, '[%_PMA_CHECKBOX_DIR_%]', $alternating_color_class . $vertical_class);        } else {            unset($vertical_display['row_delete'][$row_no]);        }        if (isset($edit_url)) {            $vertical_display['edit'][$row_no]   .= PMA_generateEditLink($edit_url, $alternating_color_class . ' ' . $edit_anchor_class . $vertical_class, $edit_str, $where_clause, $where_clause_html);        } else {            unset($vertical_display['edit'][$row_no]);        }        if (isset($copy_url)) {            $vertical_display['copy'][$row_no]   .= PMA_generateCopyLink($copy_url, $copy_str, $where_clause, $where_clause_html, $alternating_color_class . $vertical_class);        } else {            unset($vertical_display['copy'][$row_no]);        }        if (isset($del_url)) {            if (! isset($js_conf)) {                $js_conf = '';            }            $vertical_display['delete'][$row_no] .= PMA_generateDeleteLink($del_url, $del_str, $js_conf, $alternating_color_class . $vertical_class);        } else {            unset($vertical_display['delete'][$row_no]);        }        echo (($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal' || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped') ? "\n" : '');        $row_no++;    } // end while    // this is needed by PMA_displayTable() to generate the proper param    // in the multi-edit and multi-delete form    return $clause_is_unique;} // end of the 'PMA_displayTableBody()' function/** * Do display the result table with the vertical direction mode. * * @return  boolean  always true * * @global  array    $vertical_display the information to display * * @access  private * * @see     PMA_displayTable() */function PMA_displayVerticalTable(){    global $vertical_display;    // Displays "multi row delete" link at top if required    if ($GLOBALS['cfg']['RowActionLinks'] != 'right'        && is_array($vertical_display['row_delete'])        && (count($vertical_display['row_delete']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if ($GLOBALS['cfg']['RowActionLinks'] == 'none') {            // if we are not showing the RowActionLinks, then we need to show the Multi-Row-Action checkboxes            echo '<th></th>' . "\n";        }        echo $vertical_display['textbtn'];        $cell_displayed = 0;        foreach ($vertical_display['row_delete'] as $val) {            if (($cell_displayed != 0) && ($_SESSION['tmp_user_values']['repeat_cells'] != 0) && !($cell_displayed % $_SESSION['tmp_user_values']['repeat_cells'])) {                echo '<th' .                     (($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? ' rowspan="4"' : '') .                     '></th>' . "\n";            }            echo str_replace('[%_PMA_CHECKBOX_DIR_%]', '_left', $val);            $cell_displayed++;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "edit" link at top if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['edit'])        && (count($vertical_display['edit']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['edit'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "copy" link at top if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['copy'])        && (count($vertical_display['copy']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['copy'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "delete" link at top if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['delete'])        && (count($vertical_display['delete']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['edit']) && ! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['delete'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    if (PMA_isSelect()) {        // prepare to get the column order, if available        $pmatable = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);    } else {        $col_order = false;        $col_visib = false;    }    // Displays data    foreach ($vertical_display['desc'] AS $j => $val) {        // assign appropriate key with current column order        $key = $col_order ? $col_order[$j] : $j;        echo '<tr' . (($col_visib && !$col_visib[$j]) ? ' class="hide"' : '') . '>' . "\n";        echo $val;        $cell_displayed = 0;        foreach ($vertical_display['rowdata'][$key] as $subval) {            if (($cell_displayed != 0) && ($_SESSION['tmp_user_values']['repeat_cells'] != 0) and !($cell_displayed % $_SESSION['tmp_user_values']['repeat_cells'])) {                echo $val;            }            echo $subval;            $cell_displayed++;        } // end while        echo '</tr>' . "\n";    } // end while    // Displays "multi row delete" link at bottom if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['row_delete'])        && (count($vertical_display['row_delete']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        echo $vertical_display['textbtn'];        $cell_displayed = 0;        foreach ($vertical_display['row_delete'] as $val) {            if (($cell_displayed != 0) && ($_SESSION['tmp_user_values']['repeat_cells'] != 0) && !($cell_displayed % $_SESSION['tmp_user_values']['repeat_cells'])) {                echo '<th' .                     (($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? ' rowspan="4"' : '') .                     '></th>' . "\n";            }            echo str_replace('[%_PMA_CHECKBOX_DIR_%]', '_right', $val);            $cell_displayed++;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "edit" link at bottom if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['edit'])        && (count($vertical_display['edit']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['edit'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "copy" link at bottom if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['copy'])        && (count($vertical_display['copy']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['copy'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "delete" link at bottom if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['delete'])        && (count($vertical_display['delete']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['edit']) && ! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['delete'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    }    return true;} // end of the 'PMA_displayVerticalTable' function/** * Checks the posted options for viewing query resutls * and sets appropriate values in the session. * * @todo    make maximum remembered queries configurable * @todo    move/split into SQL class!? * @todo    currently this is called twice unnecessary * @todo    ignore LIMIT and ORDER in query!? * * @return nothing */function PMA_displayTable_checkConfigParams(){    $sql_md5 = md5($GLOBALS['sql_query']);    $_SESSION['tmp_user_values']['query'][$sql_md5]['sql'] = $GLOBALS['sql_query'];    if (PMA_isValid($_REQUEST['disp_direction'], array('horizontal', 'vertical', 'horizontalflipped'))) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['disp_direction'] = $_REQUEST['disp_direction'];        unset($_REQUEST['disp_direction']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['disp_direction'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['disp_direction'] = $GLOBALS['cfg']['DefaultDisplay'];    }    if (PMA_isValid($_REQUEST['repeat_cells'], 'numeric')) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['repeat_cells'] = $_REQUEST['repeat_cells'];        unset($_REQUEST['repeat_cells']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['repeat_cells'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['repeat_cells'] = $GLOBALS['cfg']['RepeatCells'];    }    // as this is a form value, the type is always string so we cannot    // use PMA_isValid($_REQUEST['session_max_rows'], 'integer')    if ((PMA_isValid($_REQUEST['session_max_rows'], 'numeric')        && (int) $_REQUEST['session_max_rows'] == $_REQUEST['session_max_rows'])        || $_REQUEST['session_max_rows'] == 'all'    ) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'] = $_REQUEST['session_max_rows'];        unset($_REQUEST['session_max_rows']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'] = $GLOBALS['cfg']['MaxRows'];    }    if (PMA_isValid($_REQUEST['pos'], 'numeric')) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['pos'] = $_REQUEST['pos'];        unset($_REQUEST['pos']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['pos'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['pos'] = 0;    }    if (PMA_isValid($_REQUEST['display_text'], array('P', 'F'))) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_text'] = $_REQUEST['display_text'];        unset($_REQUEST['display_text']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['display_text'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_text'] = 'P';    }    if (PMA_isValid($_REQUEST['relational_display'], array('K', 'D'))) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['relational_display'] = $_REQUEST['relational_display'];        unset($_REQUEST['relational_display']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['relational_display'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['relational_display'] = 'K';    }    if (PMA_isValid($_REQUEST['geometry_display'], array('WKT', 'WKB', 'GEOM'))) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['geometry_display'] = $_REQUEST['geometry_display'];        unset($_REQUEST['geometry_display']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['geometry_display'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['geometry_display'] = 'GEOM';    }    if (isset($_REQUEST['display_binary'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary'] = true;        unset($_REQUEST['display_binary']);    } elseif (isset($_REQUEST['display_options_form'])) {        // we know that the checkbox was unchecked        unset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary']);    } elseif (isset($_REQUEST['full_text_button'])) {        // do nothing to keep the value that is there in the session    } else {        // selected by default because some operations like OPTIMIZE TABLE        // and all queries involving functions return "binary" contents,        // according to low-level field flags        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary'] = true;    }    if (isset($_REQUEST['display_binary_as_hex'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary_as_hex'] = true;        unset($_REQUEST['display_binary_as_hex']);    } elseif (isset($_REQUEST['display_options_form'])) {        // we know that the checkbox was unchecked        unset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary_as_hex']);    } elseif (isset($_REQUEST['full_text_button'])) {        // do nothing to keep the value that is there in the session    } else {        // display_binary_as_hex config option        if (isset($GLOBALS['cfg']['DisplayBinaryAsHex']) && true === $GLOBALS['cfg']['DisplayBinaryAsHex']) {            $_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary_as_hex'] = true;        }    }    if (isset($_REQUEST['display_blob'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_blob'] = true;        unset($_REQUEST['display_blob']);    } elseif (isset($_REQUEST['display_options_form'])) {        // we know that the checkbox was unchecked        unset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_blob']);    }    if (isset($_REQUEST['hide_transformation'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['hide_transformation'] = true;        unset($_REQUEST['hide_transformation']);    } elseif (isset($_REQUEST['display_options_form'])) {        // we know that the checkbox was unchecked        unset($_SESSION['tmp_user_values']['query'][$sql_md5]['hide_transformation']);    }    // move current query to the last position, to be removed last    // so only least executed query will be removed if maximum remembered queries    // limit is reached    $tmp = $_SESSION['tmp_user_values']['query'][$sql_md5];    unset($_SESSION['tmp_user_values']['query'][$sql_md5]);    $_SESSION['tmp_user_values']['query'][$sql_md5] = $tmp;    // do not exceed a maximum number of queries to remember    if (count($_SESSION['tmp_user_values']['query']) > 10) {        array_shift($_SESSION['tmp_user_values']['query']);        //echo 'deleting one element ...';    }    // populate query configuration    $_SESSION['tmp_user_values']['display_text'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['display_text'];    $_SESSION['tmp_user_values']['relational_display'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['relational_display'];    $_SESSION['tmp_user_values']['geometry_display'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['geometry_display'];    $_SESSION['tmp_user_values']['display_binary'] = isset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary']) ? true : false;    $_SESSION['tmp_user_values']['display_binary_as_hex'] = isset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary_as_hex']) ? true : false;    $_SESSION['tmp_user_values']['display_blob'] = isset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_blob']) ? true : false;    $_SESSION['tmp_user_values']['hide_transformation'] = isset($_SESSION['tmp_user_values']['query'][$sql_md5]['hide_transformation']) ? true : false;    $_SESSION['tmp_user_values']['pos'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['pos'];    $_SESSION['tmp_user_values']['max_rows'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'];    $_SESSION['tmp_user_values']['repeat_cells'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['repeat_cells'];    $_SESSION['tmp_user_values']['disp_direction'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['disp_direction'];    /*     * debugging    echo '<pre>';    var_dump($_SESSION['tmp_user_values']);    echo '</pre>';     */}/** * Displays a table of results returned by a SQL query. * This function is called by the "sql.php" script. * * @param integer &$dt_result     the link id associated to the query which results have *                                to be displayed * @param array   &$the_disp_mode the display mode * @param array   $analyzed_sql   the analyzed query * * @global  string   $db                the database name * @global  string   $table             the table name * @global  string   $goto              the URL to go back in case of errors * @global  string   $sql_query         the current SQL query * @global  integer  $num_rows          the total number of rows returned by the *                                      SQL query * @global  integer  $unlim_num_rows    the total number of rows returned by the *                                      SQL query without any programmatically *                                      appended "LIMIT" clause * @global  array    $fields_meta       the list of fields properties * @global  integer  $fields_cnt        the total number of fields returned by *                                      the SQL query * @global  array    $vertical_display  informations used with vertical display *                                      mode * @global  array    $highlight_columns column names to highlight * @global  array    $cfgRelation       the relation settings * @global  array    $showtable         table definitions * * @access  private * * @see     PMA_showMessage(), PMA_setDisplayMode(), *          PMA_displayTableNavigation(), PMA_displayTableHeaders(), *          PMA_displayTableBody(), PMA_displayResultsOperations() * * @return nothing */function PMA_displayTable(&$dt_result, &$the_disp_mode, $analyzed_sql){    global $db, $table, $goto;    global $sql_query, $num_rows, $unlim_num_rows, $fields_meta, $fields_cnt;    global $vertical_display, $highlight_columns;    global $cfgRelation;    global $showtable;    // why was this called here? (already called from sql.php)    //PMA_displayTable_checkConfigParams();    /**     * @todo move this to a central place     * @todo for other future table types     */    $is_innodb = (isset($showtable['Type']) && $showtable['Type'] == 'InnoDB');    if ($is_innodb        && ! isset($analyzed_sql[0]['queryflags']['union'])        && ! isset($analyzed_sql[0]['table_ref'][1]['table_name'])        && (empty($analyzed_sql[0]['where_clause']) || $analyzed_sql[0]['where_clause'] == '1 ')    ) {        // "j u s t   b r o w s i n g"        $pre_count = '~';        $after_count = PMA_showHint(PMA_sanitize(__('May be approximate. See [a@./Documentation.html#faq3_11@Documentation]FAQ 3.11[/a]')));    } else {        $pre_count = '';        $after_count = '';    }    // 1. ----- Prepares the work -----    // 1.1 Gets the informations about which functionalities should be    //     displayed    $total      = '';    $is_display = PMA_setDisplayMode($the_disp_mode, $total);    // 1.2 Defines offsets for the next and previous pages    if ($is_display['nav_bar'] == '1') {        if ($_SESSION['tmp_user_values']['max_rows'] == 'all') {            $pos_next     = 0;            $pos_prev     = 0;        } else {            $pos_next     = $_SESSION['tmp_user_values']['pos'] + $_SESSION['tmp_user_values']['max_rows'];            $pos_prev     = $_SESSION['tmp_user_values']['pos'] - $_SESSION['tmp_user_values']['max_rows'];            if ($pos_prev < 0) {                $pos_prev = 0;            }        }    } // end if    // 1.3 Find the sort expression    // we need $sort_expression and $sort_expression_nodirection    // even if there are many table references    if (! empty($analyzed_sql[0]['order_by_clause'])) {        $sort_expression = trim(str_replace('  ', ' ', $analyzed_sql[0]['order_by_clause']));        /**         * Get rid of ASC|DESC         */        preg_match('@(.*)([[:space:]]*(ASC|DESC))@si', $sort_expression, $matches);        $sort_expression_nodirection = isset($matches[1]) ? trim($matches[1]) : $sort_expression;        $sort_direction = isset($matches[2]) ? trim($matches[2]) : '';        unset($matches);    } else {        $sort_expression = $sort_expression_nodirection = $sort_direction = '';    }    // 1.4 Prepares display of first and last value of the sorted column    if (! empty($sort_expression_nodirection)) {        if (strpos($sort_expression_nodirection, '.') === false) {            $sort_table = $table;            $sort_column = $sort_expression_nodirection;        } else {            list($sort_table, $sort_column) = explode('.', $sort_expression_nodirection);        }        $sort_table = PMA_unQuote($sort_table);        $sort_column = PMA_unQuote($sort_column);        // find the sorted column index in row result        // (this might be a multi-table query)        $sorted_column_index = false;        foreach ($fields_meta as $key => $meta) {            if ($meta->table == $sort_table && $meta->name == $sort_column) {                $sorted_column_index = $key;                break;            }        }        if ($sorted_column_index !== false) {            // fetch first row of the result set            $row = PMA_DBI_fetch_row($dt_result);            // initializing default arguments            $default_function = 'default_function';            $transform_function = $default_function;            $transform_options = array();            // check for non printable sorted row data            $meta = $fields_meta[$sorted_column_index];            if (stristr($meta->type, 'BLOB') || $meta->type == 'geometry') {                $column_for_first_row = PMA_handle_non_printable_contents($meta->type, $row[$sorted_column_index], $transform_function, $transform_options, $default_function, $meta, null);            } else {                $column_for_first_row = $row[$sorted_column_index];            }            $column_for_first_row = strtoupper(substr($column_for_first_row, 0, $GLOBALS['cfg']['LimitChars']));            // fetch last row of the result set            PMA_DBI_data_seek($dt_result, $num_rows - 1);            $row = PMA_DBI_fetch_row($dt_result);            // check for non printable sorted row data            $meta = $fields_meta[$sorted_column_index];            if (stristr($meta->type, 'BLOB') || $meta->type == 'geometry') {                $column_for_last_row = PMA_handle_non_printable_contents($meta->type, $row[$sorted_column_index], $transform_function, $transform_options, $default_function, $meta, null);            } else {                $column_for_last_row = $row[$sorted_column_index];            }            $column_for_last_row = strtoupper(substr($column_for_last_row, 0, $GLOBALS['cfg']['LimitChars']));            // reset to first row for the loop in PMA_displayTableBody()            PMA_DBI_data_seek($dt_result, 0);            // we could also use here $sort_expression_nodirection            $sorted_column_message = ' [' . htmlspecialchars($sort_column) . ': <strong>' . htmlspecialchars($column_for_first_row) . ' - ' . htmlspecialchars($column_for_last_row) . '</strong>]';            unset($row, $column_for_first_row, $column_for_last_row, $meta, $default_function, $transform_function, $transform_options);        }        unset($sorted_column_index, $sort_table, $sort_column);    }    // 2. ----- Displays the top of the page -----    // 2.1 Displays a messages with position informations    if ($is_display['nav_bar'] == '1' && isset($pos_next)) {        if (isset($unlim_num_rows) && $unlim_num_rows != $total) {            $selectstring = ', ' . $unlim_num_rows . ' ' . __('in query');        } else {            $selectstring = '';        }        if (! empty($analyzed_sql[0]['limit_clause'])) {            $limit_data = PMA_analyzeLimitClause($analyzed_sql[0]['limit_clause']);            $first_shown_rec = $limit_data['start'];            if ($limit_data['length'] < $total) {                $last_shown_rec = $limit_data['start'] + $limit_data['length'] - 1;            } else {                $last_shown_rec = $limit_data['start'] + $total - 1;            }        } elseif ($_SESSION['tmp_user_values']['max_rows'] == 'all' || $pos_next > $total) {            $first_shown_rec = $_SESSION['tmp_user_values']['pos'];            $last_shown_rec  = $total - 1;        } else {            $first_shown_rec = $_SESSION['tmp_user_values']['pos'];            $last_shown_rec  = $pos_next - 1;        }        if (PMA_Table::isView($db, $table)            && $total == $GLOBALS['cfg']['MaxExactCountViews']        ) {            $message = PMA_Message::notice(__('This view has at least this number of rows. Please refer to %sdocumentation%s.'));            $message->addParam('[a@./Documentation.html#cfg_MaxExactCount@_blank]');            $message->addParam('[/a]');            $message_view_warning = PMA_showHint($message);        } else {            $message_view_warning = false;        }        $message = PMA_Message::success(__('Showing rows'));        $message->addMessage($first_shown_rec);        if ($message_view_warning) {            $message->addMessage('...', ' - ');            $message->addMessage($message_view_warning);            $message->addMessage('(');        } else {            $message->addMessage($last_shown_rec, ' - ');            $message->addMessage(' (');            $message->addMessage($pre_count  . PMA_formatNumber($total, 0));            $message->addString(__('total'));            if (!empty($after_count)) {                $message->addMessage($after_count);            }            $message->addMessage($selectstring, '');            $message->addMessage(', ', '');        }        $messagge_qt = PMA_Message::notice(__('Query took %01.4f sec'));        $messagge_qt->addParam($GLOBALS['querytime']);        $message->addMessage($messagge_qt, '');        $message->addMessage(')', '');        $message->addMessage(isset($sorted_column_message) ? $sorted_column_message : '', '');        PMA_showMessage($message, $sql_query, 'success');    } elseif (! isset($GLOBALS['printview']) || $GLOBALS['printview'] != '1') {        PMA_showMessage(__('Your SQL query has been executed successfully'), $sql_query, 'success');    }    // 2.3 Displays the navigation bars    if (! strlen($table)) {        if (isset($analyzed_sql[0]['query_type'])            && $analyzed_sql[0]['query_type'] == 'SELECT'        ) {            // table does not always contain a real table name,            // for example in MySQL 5.0.x, the query SHOW STATUS            // returns STATUS as a table name            $table = $fields_meta[0]->table;        } else {            $table = '';        }    }    if ($is_display['nav_bar'] == '1' && empty($analyzed_sql[0]['limit_clause'])) {        PMA_displayTableNavigation($pos_next, $pos_prev, $sql_query, 'top_direction_dropdown');        echo "\n";    } elseif (! isset($GLOBALS['printview']) || $GLOBALS['printview'] != '1') {        echo "\n" . '<br /><br />' . "\n";    }    // 2b ----- Get field references from Database -----    // (see the 'relation' configuration variable)    // initialize map    $map = array();    // find tables    $target=array();    if (isset($analyzed_sql[0]['table_ref']) && is_array($analyzed_sql[0]['table_ref'])) {        foreach ($analyzed_sql[0]['table_ref'] AS $table_ref_position => $table_ref) {            $target[] = $analyzed_sql[0]['table_ref'][$table_ref_position]['table_true_name'];        }    }    $tabs    = '(\'' . join('\',\'', $target) . '\')';    if (! strlen($table)) {        $exist_rel = false;    } else {        // To be able to later display a link to the related table,        // we verify both types of relations: either those that are        // native foreign keys or those defined in the phpMyAdmin        // configuration storage. If no PMA storage, we won't be able        // to use the "column to display" notion (for example show        // the name related to a numeric id).        $exist_rel = PMA_getForeigners($db, $table, '', 'both');        if ($exist_rel) {            foreach ($exist_rel AS $master_field => $rel) {                $display_field = PMA_getDisplayField($rel['foreign_db'], $rel['foreign_table']);                $map[$master_field] = array($rel['foreign_table'],                                      $rel['foreign_field'],                                      $display_field,                                      $rel['foreign_db']);            } // end while        } // end if    } // end if    // end 2b    // 3. ----- Displays the results table -----    PMA_displayTableHeaders($is_display, $fields_meta, $fields_cnt, $analyzed_sql, $sort_expression, $sort_expression_nodirection, $sort_direction);    $url_query = '';    echo '<tbody>' . "\n";    $clause_is_unique = PMA_displayTableBody($dt_result, $is_display, $map, $analyzed_sql);    // vertical output case    if ($_SESSION['tmp_user_values']['disp_direction'] == 'vertical') {        PMA_displayVerticalTable();    } // end if    unset($vertical_display);    echo '</tbody>' . "\n";    ?></table>    <?php    // 4. ----- Displays the link for multi-fields edit and delete    if ($is_display['del_lnk'] == 'dr' && $is_display['del_lnk'] != 'kp') {        $delete_text = $is_display['del_lnk'] == 'dr' ? __('Delete') : __('Kill');        $_url_params = array(            'db'        => $db,            'table'     => $table,            'sql_query' => $sql_query,            'goto'      => $goto,        );        $uncheckall_url = 'sql.php' . PMA_generate_common_url($_url_params);        $_url_params['checkall'] = '1';        $checkall_url = 'sql.php' . PMA_generate_common_url($_url_params);        if ($_SESSION['tmp_user_values']['disp_direction'] == 'vertical') {            $checkall_params['onclick'] = 'if (setCheckboxes(\'resultsForm\', true)) return false;';            $uncheckall_params['onclick'] = 'if (setCheckboxes(\'resultsForm\', false)) return false;';        } else {            $checkall_params['onclick'] = 'if (markAllRows(\'resultsForm\')) return false;';            $uncheckall_params['onclick'] = 'if (unMarkAllRows(\'resultsForm\')) return false;';        }        $checkall_link = PMA_linkOrButton($checkall_url, __('Check All'), $checkall_params, false);        $uncheckall_link = PMA_linkOrButton($uncheckall_url, __('Uncheck All'), $uncheckall_params, false);        if ($_SESSION['tmp_user_values']['disp_direction'] != 'vertical') {            echo '<img class="selectallarrow" width="38" height="22"'                .' src="' . $GLOBALS['pmaThemeImage'] . 'arrow_' . $GLOBALS['text_dir'] . '.png' . '"'                .' alt="' . __('With selected:') . '" />';        }        echo $checkall_link . "\n"            .' / ' . "\n"            .$uncheckall_link . "\n"            .'<i>' . __('With selected:') . '</i>' . "\n";        PMA_buttonOrImage(            'submit_mult', 'mult_submit', 'submit_mult_change',            __('Change'), 'b_edit.png', 'edit'        );        PMA_buttonOrImage(            'submit_mult', 'mult_submit', 'submit_mult_delete',            $delete_text, 'b_drop.png', 'delete'        );        if (isset($analyzed_sql[0]) && $analyzed_sql[0]['querytype'] == 'SELECT') {            PMA_buttonOrImage(                'submit_mult', 'mult_submit', 'submit_mult_export',                __('Export'), 'b_tblexport.png', 'export'            );        }        echo "\n";        echo '<input type="hidden" name="sql_query"'            .' value="' . htmlspecialchars($sql_query) . '" />' . "\n";        if (! empty($GLOBALS['url_query'])) {            echo '<input type="hidden" name="url_query"'                .' value="' . $GLOBALS['url_query'] . '" />' . "\n";        }        echo '<input type="hidden" name="clause_is_unique"'            .' value="' . $clause_is_unique . '" />' . "\n";        echo '</form>' . "\n";    }    // 5. ----- Displays the navigation bar at the bottom if required -----    if ($is_display['nav_bar'] == '1' && empty($analyzed_sql[0]['limit_clause'])) {        echo '<br />' . "\n";        PMA_displayTableNavigation($pos_next, $pos_prev, $sql_query, 'bottom_direction_dropdown');    } elseif (! isset($GLOBALS['printview']) || $GLOBALS['printview'] != '1') {        echo "\n" . '<br /><br />' . "\n";    }    // 6. ----- Displays "Query results operations"    if (! isset($GLOBALS['printview']) || $GLOBALS['printview'] != '1') {        PMA_displayResultsOperations($the_disp_mode, $analyzed_sql);    }} // end of the 'PMA_displayTable()' functionfunction default_function($buffer){    $buffer = htmlspecialchars($buffer);    $buffer = str_replace("\011", ' &nbsp;&nbsp;&nbsp;', str_replace('  ', ' &nbsp;', $buffer));    $buffer = preg_replace("@((\015\012)|(\015)|(\012))@", '<br />', $buffer);    return $buffer;}/** * Displays operations that are available on results. * * @param array $the_disp_mode the display mode * @param array $analyzed_sql  the analyzed query * * @global  string   $db                the database name * @global  string   $table             the table name * @global  string   $sql_query         the current SQL query * @global  integer  $unlim_num_rows    the total number of rows returned by the *                                      SQL query without any programmatically *                                      appended "LIMIT" clause * * @access  private * * @see     PMA_showMessage(), PMA_setDisplayMode(), *          PMA_displayTableNavigation(), PMA_displayTableHeaders(), *          PMA_displayTableBody(), PMA_displayResultsOperations() * * @return nothing */function PMA_displayResultsOperations($the_disp_mode, $analyzed_sql){    global $db, $table, $sql_query, $unlim_num_rows, $fields_meta;    $header_shown = false;    $header = '<fieldset><legend>' . __('Query results operations') . '</legend>';    if ($the_disp_mode[6] == '1' || $the_disp_mode[9] == '1') {        // Displays "printable view" link if required        if ($the_disp_mode[9] == '1') {            if (!$header_shown) {                echo $header;                $header_shown = true;            }            $_url_params = array(                'db'        => $db,                'table'     => $table,                'printview' => '1',                'sql_query' => $sql_query,            );            $url_query = PMA_generate_common_url($_url_params);            echo PMA_linkOrButton(                'sql.php' . $url_query,                PMA_getIcon('b_print.png', __('Print view'), true),                '', true, true, 'print_view'            ) . "\n";            if ($_SESSION['tmp_user_values']['display_text']) {                $_url_params['display_text'] = 'F';                echo PMA_linkOrButton(                    'sql.php' . PMA_generate_common_url($_url_params),                    PMA_getIcon('b_print.png', __('Print view (with full texts)'), true),                    '', true, true, 'print_view'                ) . "\n";                unset($_url_params['display_text']);            }        } // end displays "printable view"    }    // Export link    // (the url_query has extra parameters that won't be used to export)    // (the single_table parameter is used in display_export.lib.php    //  to hide the SQL and the structure export dialogs)    // If the parser found a PROCEDURE clause    // (most probably PROCEDURE ANALYSE()) it makes no sense to    // display the Export link).    if (isset($analyzed_sql[0]) && $analyzed_sql[0]['querytype'] == 'SELECT' && ! isset($printview) && ! isset($analyzed_sql[0]['queryflags']['procedure'])) {        if (isset($analyzed_sql[0]['table_ref'][0]['table_true_name']) && ! isset($analyzed_sql[0]['table_ref'][1]['table_true_name'])) {            $_url_params['single_table'] = 'true';        }        if (!$header_shown) {            echo $header;            $header_shown = true;        }        $_url_params['unlim_num_rows'] = $unlim_num_rows;        /**         * At this point we don't know the table name; this can happen         * for example with a query like         * SELECT bike_code FROM (SELECT bike_code FROM bikes) tmp         * As a workaround we set in the table parameter the name of the         * first table of this database, so that tbl_export.php and         * the script it calls do not fail         */        if (empty($_url_params['table']) && !empty($_url_params['db'])) {            $_url_params['table'] = PMA_DBI_fetch_value("SHOW TABLES");            /* No result (probably no database selected) */            if ($_url_params['table'] === false) {                unset($_url_params['table']);            }        }        echo PMA_linkOrButton(            'tbl_export.php' . PMA_generate_common_url($_url_params),            PMA_getIcon('b_tblexport.png', __('Export'), true),            '', true, true, ''        ) . "\n";        // show chart        echo PMA_linkOrButton(            'tbl_chart.php' . PMA_generate_common_url($_url_params),            PMA_getIcon('b_chart.png', __('Display chart'), true),            '', true, true, ''        ) . "\n";        // show GIS chart        $geometry_found = false;        // If atleast one geometry field is found        foreach ($fields_meta as $meta) {            if ($meta->type == 'geometry') {                $geometry_found = true;                break;            }        }        if ($geometry_found) {            echo PMA_linkOrButton(                'tbl_gis_visualization.php' . PMA_generate_common_url($_url_params),                PMA_getIcon('b_globe.gif', __('Visualize GIS data'), true),                '', true, true, ''            ) . "\n";        }    }    // CREATE VIEW    /**     *     * @todo detect privileges to create a view     *       (but see 2006-01-19 note in display_create_table.lib.php,     *        I think we cannot detect db-specific privileges reliably)     * Note: we don't display a Create view link if we found a PROCEDURE clause     */    if (!$header_shown) {        echo $header;        $header_shown = true;    }    if (!PMA_DRIZZLE && !isset($analyzed_sql[0]['queryflags']['procedure'])) {        echo PMA_linkOrButton(            'view_create.php' . $url_query,            PMA_getIcon('b_views.png', __('Create view'), true),            '', true, true, ''        ) . "\n";    }    if ($header_shown) {        echo '</fieldset><br />';    }}/** * Verifies what to do with non-printable contents (binary or BLOB) * in Browse mode. * * @param string $category           BLOB|BINARY|GEOMETRY * @param string $content            the binary content * @param string $transform_function transformation function * @param string $transform_options  transformation parameters * @param string $default_function   default transformation function * @param object $meta               the meta-information about this field * @param array  $url_params         parameters that should go to the download link * * @return  mixed  string or float */function PMA_handle_non_printable_contents($category, $content, $transform_function, $transform_options, $default_function, $meta, $url_params = array()){    $result = '[' . $category;    if (is_null($content)) {        $result .= ' - NULL';        $size = 0;    } elseif (isset($content)) {        $size = strlen($content);        $display_size = PMA_formatByteDown($size, 3, 1);        $result .= ' - '. $display_size[0] . ' ' . $display_size[1];    }    $result .= ']';    if (strpos($transform_function, 'octetstream')) {        $result = $content;    }    if ($size > 0) {        if ($default_function != $transform_function) {            $result = $transform_function($result, $transform_options, $meta);        } else {            $result = $default_function($result, array(), $meta);            if (stristr($meta->type, 'BLOB') && $_SESSION['tmp_user_values']['display_blob']) {                // in this case, restart from the original $content                $result = htmlspecialchars(PMA_replace_binary_contents($content));            }            /* Create link to download */            if (count($url_params) > 0) {                $result = '<a href="tbl_get_field.php' . PMA_generate_common_url($url_params) . '">' . $result . '</a>';            }        }    }    return($result);}/** * Prepares the displayable content of a data cell in Browse mode, * taking into account foreign key description field and transformations * * @param string $class              css classes for the td element * @param bool   $condition_field    whether the column is a part of the where clause * @param string $analyzed_sql       the analyzed query * @param object $meta               the meta-information about this field * @param array  $map                the list of relations * @param string $data               data * @param string $transform_function transformation function * @param string $default_function   default function * @param string $nowrap             'nowrap' if the content should not be wrapped * @param string $where_comparison   data for the where cluase * @param array  $transform_options  array of options for transformation * @param bool   $is_field_truncated whether the field is truncated * * @return  string  formatted data */function PMA_prepare_row_data($class, $condition_field, $analyzed_sql, $meta, $map, $data, $transform_function, $default_function, $nowrap, $where_comparison, $transform_options, $is_field_truncated ){    $result = ' class="' . PMA_addClass($class, $condition_field, $meta, $nowrap, $is_field_truncated, $transform_function, $default_function) . '">';    if (isset($analyzed_sql[0]['select_expr']) && is_array($analyzed_sql[0]['select_expr'])) {        foreach ($analyzed_sql[0]['select_expr'] AS $select_expr_position => $select_expr) {            $alias = $analyzed_sql[0]['select_expr'][$select_expr_position]['alias'];            if (isset($alias) && strlen($alias)) {                $true_column = $analyzed_sql[0]['select_expr'][$select_expr_position]['column'];                if ($alias == $meta->name) {                    // this change in the parameter does not matter                    // outside of the function                    $meta->name = $true_column;                } // end if            } // end if        } // end foreach    } // end if    if (isset($map[$meta->name])) {        // Field to display from the foreign table?        if (isset($map[$meta->name][2]) && strlen($map[$meta->name][2])) {            $dispsql     = 'SELECT ' . PMA_backquote($map[$meta->name][2])                . ' FROM ' . PMA_backquote($map[$meta->name][3])                . '.' . PMA_backquote($map[$meta->name][0])                . ' WHERE ' . PMA_backquote($map[$meta->name][1])                . $where_comparison;            $dispresult  = PMA_DBI_try_query($dispsql, null, PMA_DBI_QUERY_STORE);            if ($dispresult && PMA_DBI_num_rows($dispresult) > 0) {                list($dispval) = PMA_DBI_fetch_row($dispresult, 0);            } else {                $dispval = __('Link not found');            }            @PMA_DBI_free_result($dispresult);        } else {            $dispval     = '';        } // end if... else...        if (isset($GLOBALS['printview']) && $GLOBALS['printview'] == '1') {            $result .= ($transform_function != $default_function ? $transform_function($data, $transform_options, $meta) : $transform_function($data, array(), $meta)) . ' <code>[-&gt;' . $dispval . ']</code>';        } else {            if ('K' == $_SESSION['tmp_user_values']['relational_display']) {                // user chose "relational key" in the display options, so                // the title contains the display field                $title = (! empty($dispval))? ' title="' . htmlspecialchars($dispval) . '"' : '';            } else {                $title = ' title="' . htmlspecialchars($data) . '"';            }            $_url_params = array(                'db'    => $map[$meta->name][3],                'table' => $map[$meta->name][0],                'pos'   => '0',                'sql_query' => 'SELECT * FROM '                                    . PMA_backquote($map[$meta->name][3]) . '.' . PMA_backquote($map[$meta->name][0])                                    . ' WHERE ' . PMA_backquote($map[$meta->name][1])                                    . $where_comparison,            );            $result .= '<a href="sql.php' . PMA_generate_common_url($_url_params)                 . '"' . $title . '>';            if ($transform_function != $default_function) {                // always apply a transformation on the real data,                // not on the display field                $result .= $transform_function($data, $transform_options, $meta);            } else {                if ('D' == $_SESSION['tmp_user_values']['relational_display']) {                    // user chose "relational display field" in the                    // display options, so show display field in the cell                    $result .= $transform_function($dispval, array(), $meta);                } else {                    // otherwise display data in the cell                    $result .= $transform_function($data, array(), $meta);                }            }            $result .= '</a>';        }    } else {        $result .= ($transform_function != $default_function ? $transform_function($data, $transform_options, $meta) : $transform_function($data, array(), $meta));    }    $result .= '</td>' . "\n";    return $result;}/** * Generates a checkbox for multi-row submits * * @param string $del_url           delete url * @param array  $is_display        array with explicit indexes for all the display elements * @param string $row_no            the row number * @param string $where_clause_html url encoded where cluase * @param array  $condition_array   array of conditions in the where cluase * @param string $del_query         delete query * @param string $id_suffix         suffix for the id * @param string $class             css classes for the td element * * @return  string  the generated HTML */function PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, $id_suffix, $class){    $ret = '';    if (! empty($del_url) && $is_display['del_lnk'] != 'kp') {        $ret .= '<td ';        if (! empty($class)) {            $ret .= 'class="' . $class . '"';        }        $ret .= ' align="center">'           . '<input type="checkbox" id="id_rows_to_delete' . $row_no . $id_suffix . '" name="rows_to_delete[' . $where_clause_html . ']"'           . ' class="multi_checkbox"'           . ' value="' . htmlspecialchars($del_query) . '" ' . (isset($GLOBALS['checkall']) ? 'checked="checked"' : '') . ' />'           . '<input type="hidden" class="condition_array" value="' . htmlspecialchars(json_encode($condition_array)) . '" />'           . '    </td>';    }    return $ret;}/** * Generates an Edit link * * @param string $edit_url          edit url * @param string $class             css classes for td element * @param string $edit_str          text for the edit link * @param string $where_clause      where cluase * @param string $where_clause_html url encoded where cluase * * @return  string  the generated HTML */function PMA_generateEditLink($edit_url, $class, $edit_str, $where_clause, $where_clause_html){    $ret = '';    if (! empty($edit_url)) {        $ret .= '<td class="' . $class . '" align="center" ' . ' ><span class="nowrap">'           . PMA_linkOrButton($edit_url, $edit_str, array(), false);        /*         * Where clause for selecting this row uniquely is provided as         * a hidden input. Used by jQuery scripts for handling grid editing         */        if (! empty($where_clause)) {            $ret .= '<input type="hidden" class="where_clause" value ="' . $where_clause_html . '" />';        }        $ret .= '</span></td>';    }    return $ret;}/** * Generates an Copy link * * @param string $copy_url          copy url * @param string $copy_str          text for the copy link * @param string $where_clause      where clause * @param string $where_clause_html url encoded where cluase * @param string $class             css classes for the td element * * @return  string  the generated HTML */function PMA_generateCopyLink($copy_url, $copy_str, $where_clause, $where_clause_html, $class){    $ret = '';    if (! empty($copy_url)) {        $ret .= '<td ';        if (! empty($class)) {            $ret .= 'class="' . $class . '" ';        }        $ret .= 'align="center" ' . ' ><span class="nowrap">'           . PMA_linkOrButton($copy_url, $copy_str, array(), false);        /*         * Where clause for selecting this row uniquely is provided as         * a hidden input. Used by jQuery scripts for handling grid editing         */        if (! empty($where_clause)) {            $ret .= '<input type="hidden" class="where_clause" value ="' . $where_clause_html . '" />';        }        $ret .= '</span></td>';    }    return $ret;}/** * Generates a Delete link * * @param string $del_url delete url * @param string $del_str text for the delete link * @param string $js_conf text for the JS confirmation * @param string $class   css classes for the td element * * @return  string  the generated HTML */function PMA_generateDeleteLink($del_url, $del_str, $js_conf, $class){    $ret = '';    if (! empty($del_url)) {        $ret .= '<td ';        if (! empty($class)) {            $ret .= 'class="' . $class . '" ';        }        $ret .= 'align="center" ' . ' >'           . PMA_linkOrButton($del_url, $del_str, $js_conf, false)           . '</td>';    }    return $ret;}/** * Generates checkbox and links at some position (left or right) * (only called for horizontal mode) * * @param string $position          the position of the checkbox and links * @param string $del_url           delete url * @param array  $is_display        array with explicit indexes for all the display elements * @param string $row_no            row number * @param string $where_clause      where clause * @param string $where_clause_html url encoded where cluase * @param array  $condition_array   array of conditions in the where cluase * @param string $del_query         delete query * @param string $id_suffix         suffix for the id * @param string $edit_url          edit url * @param string $copy_url          copy url * @param string $class             css classes for the td elements * @param string $edit_str          text for the edit link * @param string $copy_str          text for the copy link * @param string $del_str           text for the delete link * @param string $js_conf           text for the JS confirmation * * @return  string  the generated HTML */function PMA_generateCheckboxAndLinks($position, $del_url, $is_display, $row_no, $where_clause, $where_clause_html, $condition_array, $del_query, $id_suffix, $edit_url, $copy_url, $class, $edit_str, $copy_str, $del_str, $js_conf){    $ret = '';    if ($position == 'left') {        $ret .= PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, $id_suffix = '_left', '', '', '');        $ret .= PMA_generateEditLink($edit_url, $class, $edit_str, $where_clause, $where_clause_html, '');        $ret .= PMA_generateCopyLink($copy_url, $copy_str, $where_clause, $where_clause_html, '');        $ret .= PMA_generateDeleteLink($del_url, $del_str, $js_conf, '', '');    } elseif ($position == 'right') {        $ret .= PMA_generateDeleteLink($del_url, $del_str, $js_conf, '', '');        $ret .= PMA_generateCopyLink($copy_url, $copy_str, $where_clause, $where_clause_html, '');        $ret .= PMA_generateEditLink($edit_url, $class, $edit_str, $where_clause, $where_clause_html, '');        $ret .= PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, $id_suffix = '_right', '', '', '');    } else { // $position == 'none'        $ret .= PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, $id_suffix = '_left', '', '', '');    }    return $ret;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * session handling * * @todo    add failover or warn if sessions are not configured properly * @todo    add an option to use mm-module for session handler * @see     http://www.php.net/session * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// verify if PHP supports session, die if it does notif (!@function_exists('session_name')) {    PMA_warnMissingExtension('session', true);} elseif (ini_get('session.auto_start') == true && session_name() != 'phpMyAdmin') {    // Do not delete the existing session, it might be used by other    // applications; instead just close it.    session_write_close();}// disable starting of sessions before all settings are done// does not work, besides how it is written in php manual//ini_set('session.auto_start', 0);// session cookie settingssession_set_cookie_params(0, $GLOBALS['PMA_Config']->getCookiePath(),    '', $GLOBALS['PMA_Config']->isHttps(), true);// cookies are safer (use @ini_set() in case this function is disabled)@ini_set('session.use_cookies', true);// optionally set session_save_path$path = $GLOBALS['PMA_Config']->get('SessionSavePath');if (!empty($path)) {    session_save_path($path);}// but not all user allow cookies@ini_set('session.use_only_cookies', false);// do not force transparent session ids, see bug #3398788//@ini_set('session.use_trans_sid', true);@ini_set('url_rewriter.tags',    'a=href,frame=src,input=src,form=fakeentry,fieldset=');//ini_set('arg_separator.output', '&amp;');// delete session/cookies when browser is closed@ini_set('session.cookie_lifetime', 0);// warn but dont work with bug@ini_set('session.bug_compat_42', false);@ini_set('session.bug_compat_warn', true);// use more secure session ids@ini_set('session.hash_function', 1);// some pages (e.g. stylesheet) may be cached on clients, but not in shared// proxy serverssession_cache_limiter('private');// start the session// on some servers (for example, sourceforge.net), we get a permission error// on the session data directory, so I add some "@"// See bug #1538132. This would block normal behavior on a cluster//ini_set('session.save_handler', 'files');$session_name = 'phpMyAdmin';@session_name($session_name);if (! isset($_COOKIE[$session_name])) {    // on first start of session we check for errors    // f.e. session dir cannot be accessed - session file not created    $orig_error_count = $GLOBALS['error_handler']->countErrors();    $r = session_start();    if ($r !== true || $orig_error_count != $GLOBALS['error_handler']->countErrors()) {        setcookie($session_name, '', 1);        /*         * Session initialization is done before selecting language, so we         * can not use translations here.         */        PMA_fatalError('Cannot start session without errors, please check errors given in your PHP and/or webserver log file and configure your PHP installation properly.');    }    unset($orig_error_count);} else {    session_start();}/** * Token which is used for authenticating access queries. * (we use "space PMA_token space" to prevent overwriting) */if (! isset($_SESSION[' PMA_token '])) {    $_SESSION[' PMA_token '] = md5(uniqid(rand(), true));}/** * tries to secure session from hijacking and fixation * should be called before login and after successfull login * (only required if sensitive information stored in session) * */function PMA_secureSession(){    // prevent session fixation and XSS    session_regenerate_id(true);    $_SESSION[' PMA_token '] = md5(uniqid(rand(), true));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin *//** * Get some core libraries */require_once './libraries/common.inc.php';$action = 'tbl_create.php';require_once './libraries/header.inc.php';$titles = PMA_buildActionTitles();// Check parametersPMA_checkParameters(array('db'));/* Check if database name is empty */if (strlen($db) == 0) {    PMA_mysqlDie(__('The database name is empty!'), '', '', 'main.php');}/** * Defines the url to return to in case of error in a sql statement */if (PMA_DBI_get_columns($db, $table)) {    // table exists already    PMA_mysqlDie(        sprintf(__('Table %s already exists!'), htmlspecialchars($table)),        '',        '',        'db_structure.php?' . PMA_generate_common_url($db)    );}$err_url = 'tbl_create.php?' . PMA_generate_common_url($db, $table);// check number of fields to be createdif (isset($_REQUEST['submit_num_fields'])) {    $regenerate = true; // for libraries/tbl_properties.inc.php    $num_fields = $_REQUEST['orig_num_fields'] + $_REQUEST['added_fields'];} elseif (isset($_REQUEST['num_fields']) && intval($_REQUEST['num_fields']) > 0) {    $num_fields = (int) $_REQUEST['num_fields'];} else {    $num_fields = 4;}/** * Selects the database to work with */if (!PMA_DBI_select_db($db)) {    PMA_mysqlDie(        sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($db)),        '',        '',        'main.php'    );}/** * The form used to define the structure of the table has been submitted */if (isset($_REQUEST['do_save_data'])) {    $sql_query = '';    // Transforms the radio button field_key into 3 arrays    $field_cnt = count($_REQUEST['field_name']);    for ($i = 0; $i < $field_cnt; ++$i) {        if (isset($_REQUEST['field_key'][$i])) {            if ($_REQUEST['field_key'][$i] == 'primary_' . $i) {                $field_primary[] = $i;            }            if ($_REQUEST['field_key'][$i] == 'index_' . $i) {                $field_index[]   = $i;            }            if ($_REQUEST['field_key'][$i] == 'unique_' . $i) {                $field_unique[]  = $i;            }        } // end if    } // end for    // Builds the fields creation statements    for ($i = 0; $i < $field_cnt; $i++) {        // '0' is also empty for php :-(        if (empty($_REQUEST['field_name'][$i]) && $_REQUEST['field_name'][$i] != '0') {            continue;        }        $query = PMA_Table::generateFieldSpec(            $_REQUEST['field_name'][$i],            $_REQUEST['field_type'][$i],            $_REQUEST['field_length'][$i],            $_REQUEST['field_attribute'][$i],            isset($_REQUEST['field_collation'][$i])                ? $_REQUEST['field_collation'][$i]                : '',            isset($_REQUEST['field_null'][$i])                ? $_REQUEST['field_null'][$i]                : 'NOT NULL',            $_REQUEST['field_default_type'][$i],            $_REQUEST['field_default_value'][$i],            isset($_REQUEST['field_extra'][$i])                ? $_REQUEST['field_extra'][$i]                : false,            isset($_REQUEST['field_comments'][$i])                ? $_REQUEST['field_comments'][$i]                : '',            $field_primary,            $i        );        $query .= ', ';        $sql_query .= $query;    } // end for    unset($field_cnt, $query);    $sql_query = preg_replace('@, $@', '', $sql_query);    // Builds the primary keys statements    $primary     = '';    $primary_cnt = (isset($field_primary) ? count($field_primary) : 0);    for ($i = 0; $i < $primary_cnt; $i++) {        $j = $field_primary[$i];        if (isset($_REQUEST['field_name'][$j]) && strlen($_REQUEST['field_name'][$j])) {            $primary .= PMA_backquote($_REQUEST['field_name'][$j]) . ', ';        }    } // end for    unset($primary_cnt);    $primary = preg_replace('@, $@', '', $primary);    if (strlen($primary)) {        $sql_query .= ', PRIMARY KEY (' . $primary . ')';    }    unset($primary);    // Builds the indexes statements    $index     = '';    $index_cnt = (isset($field_index) ? count($field_index) : 0);    for ($i = 0;$i < $index_cnt; $i++) {        $j = $field_index[$i];        if (isset($_REQUEST['field_name'][$j]) && strlen($_REQUEST['field_name'][$j])) {            $index .= PMA_backquote($_REQUEST['field_name'][$j]) . ', ';        }    } // end for    unset($index_cnt);    $index = preg_replace('@, $@', '', $index);    if (strlen($index)) {        $sql_query .= ', INDEX (' . $index . ')';    }    unset($index);    // Builds the uniques statements    $unique     = '';    $unique_cnt = (isset($field_unique) ? count($field_unique) : 0);    for ($i = 0; $i < $unique_cnt; $i++) {        $j = $field_unique[$i];        if (isset($_REQUEST['field_name'][$j]) && strlen($_REQUEST['field_name'][$j])) {           $unique .= PMA_backquote($_REQUEST['field_name'][$j]) . ', ';        }    } // end for    unset($unique_cnt);    $unique = preg_replace('@, $@', '', $unique);    if (strlen($unique)) {        $sql_query .= ', UNIQUE (' . $unique . ')';    }    unset($unique);    // Builds the FULLTEXT statements    $fulltext     = '';    $fulltext_cnt = (isset($field_fulltext) ? count($field_fulltext) : 0);    for ($i = 0; $i < $fulltext_cnt; $i++) {        $j = $field_fulltext[$i];        if (isset($_REQUEST['field_name'][$j]) && strlen($_REQUEST['field_name'][$j])) {           $fulltext .= PMA_backquote($_REQUEST['field_name'][$j]) . ', ';        }    } // end for    $fulltext = preg_replace('@, $@', '', $fulltext);    if (strlen($fulltext)) {        $sql_query .= ', FULLTEXT (' . $fulltext . ')';    }    unset($fulltext);    // Builds the 'create table' statement    $sql_query = 'CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table)     . ' (' . $sql_query . ')';    // Adds table type, character set, comments and partition definition    if (!empty($_REQUEST['tbl_type']) && ($_REQUEST['tbl_type'] != 'Default')) {        $sql_query .= ' ENGINE = ' . $_REQUEST['tbl_type'];    }    if (!empty($_REQUEST['tbl_collation'])) {        $sql_query .= PMA_generateCharsetQueryPart($_REQUEST['tbl_collation']);    }    if (!empty($_REQUEST['comment'])) {        $sql_query .= ' COMMENT = \'' . PMA_sqlAddSlashes($_REQUEST['comment']) . '\'';    }    if (!empty($_REQUEST['partition_definition'])) {        $sql_query .= ' ' . PMA_sqlAddSlashes($_REQUEST['partition_definition']);    }    $sql_query .= ';';    // Executes the query    $result = PMA_DBI_try_query($sql_query);    if ($result) {        // If comments were sent, enable relation stuff        include_once './libraries/transformations.lib.php';        // Update comment table for mime types [MIME]        if (isset($_REQUEST['field_mimetype'])         && is_array($_REQUEST['field_mimetype'])         && $cfg['BrowseMIME']) {            foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {                if (isset($_REQUEST['field_name'][$fieldindex])                 && strlen($_REQUEST['field_name'][$fieldindex])) {                    PMA_setMIME(                        $db, $table, $_REQUEST['field_name'][$fieldindex], $mimetype,                        $_REQUEST['field_transformation'][$fieldindex],                        $_REQUEST['field_transformation_options'][$fieldindex]                    );                }            }        }        $message = PMA_Message::success(__('Table %1$s has been created.'));        $message->addParam(PMA_backquote($db) . '.' . PMA_backquote($table));        if ($GLOBALS['is_ajax_request'] == true) {            /**             * construct the html for the newly created table's row to be appended             * to the list of tables.             *             * Logic taken from db_structure.php             */            $tbl_url_params = array();            $tbl_url_params['db'] = $db;            $tbl_url_params['table'] = $table;            $is_show_stats = $cfg['ShowStats'];            $tbl_stats_result = PMA_DBI_query('SHOW TABLE STATUS FROM '                    . PMA_backquote($db) . ' LIKE \'' . PMA_sqlAddSlashes($table, true) . '\';');            $tbl_stats = PMA_DBI_fetch_assoc($tbl_stats_result);            PMA_DBI_free_result($tbl_stats_result);            unset($tbl_stats_result);            if ($is_show_stats) {                $sum_size       = (double) 0;                $overhead_size  = (double) 0;                $overhead_check = '';                $tblsize                    =  doubleval($tbl_stats['Data_length']) + doubleval($tbl_stats['Index_length']);                $sum_size                   += $tblsize;                list($formatted_size, $unit) =  PMA_formatByteDown($tblsize, 3, ($tblsize > 0) ? 1 : 0);                if (isset($tbl_stats['Data_free']) && $tbl_stats['Data_free'] > 0) {                    list($formatted_overhead, $overhead_unit)     = PMA_formatByteDown($tbl_stats['Data_free'], 3, ($tbl_stats['Data_free'] > 0) ? 1 : 0);                    $overhead_size           += $tbl_stats['Data_free'];                }                if (isset($formatted_overhead)) {                        $overhead = '<span>' . $formatted_overhead . '</span> <span class="unit">' . $overhead_unit . '</span>';                        unset($formatted_overhead);                    } else {                        $overhead = '-';                }           }            $new_table_string = '<tr>' . "\n";            $new_table_string .= '<td align="center"> <input type="checkbox" id="checkbox_tbl_" name="selected_tbl[]" value="'.htmlspecialchars($table).'" /> </td>' . "\n";            $new_table_string .= '<th>';            $new_table_string .= '<a href="sql.php' . PMA_generate_common_url($tbl_url_params) . '">'. $table . '</a>';            if (PMA_Tracker::isActive()) {                $truename = str_replace(' ', '&nbsp;', htmlspecialchars($table));                if (PMA_Tracker::isTracked($db, $truename)) {                    $new_table_string .= '<a href="tbl_tracking.php' . PMA_generate_common_url($tbl_url_params) . '">';                    $new_table_string .= PMA_getImage('eye.png', __('Tracking is active.'));                } elseif (PMA_Tracker::getVersion($db, $truename) > 0) {                    $new_table_string .= '<a href="tbl_tracking.php' . PMA_generate_common_url($tbl_url_params) . '">';                    $new_table_string .= PMA_getImage('eye_grey.png', __('Tracking is not active.'));                }                unset($truename);            }            $new_table_string .= '</th>' . "\n";            $new_table_string .= '<td>' . $titles['NoBrowse'] . '</td>' . "\n";            $new_table_string .= '<td><a href="tbl_structure.php' . PMA_generate_common_url($tbl_url_params) . '">' . $titles['Structure'] . '</a></td>' . "\n";            $new_table_string .= '<td>' . $titles['NoSearch'] . '</td>' . "\n";            $new_table_string .= '<td><a href="tbl_change.php' . PMA_generate_common_url($tbl_url_params) . '">' . $titles['Insert'] . '</a></td>' . "\n";            $new_table_string .= '<td>' . $titles['NoEmpty'] . '</td>' . "\n";            $new_table_string .= '<td><a class="drop_table_anchor" href="sql.php' . PMA_generate_common_url($tbl_url_params) . '&amp;sql_query=';            $new_table_string .= urlencode('DROP TABLE ' . PMA_backquote($table));            $new_table_string .= '">';            $new_table_string .= $titles['Drop'];            $new_table_string .= '</a></td>' . "\n";            $new_table_string .= '<td class="value">' . $tbl_stats['Rows'] . '</td>' . "\n";            $new_table_string .= '<td nowrap="nowrap">' . $tbl_stats['Engine'] . '</td>' . "\n";            $new_table_string .= '<td> <dfn title="' . PMA_getCollationDescr($tbl_stats['Collation']) . '">'. $tbl_stats['Collation'] .'</dfn></td>' . "\n";            if ($is_show_stats) {                $new_table_string .= '<td class="value tbl_size"> <a href="tbl_structure.php' . PMA_generate_common_url($tbl_url_params) . '#showusage" ><span>' . $formatted_size . '</span> <span class="unit">' . $unit . '</class></a> </td>' . "\n" ;                $new_table_string .= '<td class="value tbl_overhead">' . $overhead . '</td>' . "\n" ;            }            $new_table_string .= '</tr>' . "\n";            $extra_data['new_table_string'] = $new_table_string;            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $display_query = $sql_query;        $sql_query = '';        // read table info on this newly created table, in case        // the next page is Structure        $reread_info = true;        include './libraries/tbl_info.inc.php';        // do not switch to sql.php - as there is no row to be displayed on a new table        if ($cfg['DefaultTabTable'] === 'sql.php') {            include './tbl_structure.php';        } else {            include './' . $cfg['DefaultTabTable'];        }        exit;    } else {        if ($GLOBALS['is_ajax_request'] == true) {            PMA_ajaxResponse(PMA_DBI_getError(), false);        } else {            PMA_mysqlDie('', '', '', $err_url, false);            // An error happened while inserting/updating a table definition.            // to prevent total loss of that data, we embed the form once again.            // The variable $regenerate will be used to restore data in libraries/tbl_properties.inc.php            $num_fields = $_REQUEST['orig_num_fields'];            $regenerate = true;        }    }} // end do create table/** * Displays the form used to define the structure of the table */// This div is used to show the content(eg: create table form with more columns) fetched with AJAX subsequently.if ($GLOBALS['is_ajax_request'] != true) {    echo('<div id="create_table_div">');}require './libraries/tbl_properties.inc.php';// Displays the footerrequire './libraries/footer.inc.php';if ($GLOBALS['is_ajax_request'] != true) {    echo('</div>');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Runs common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_sql.php&amp;back=tbl_sql.php';require_once './libraries/sql_query_form.lib.php';$err_url   = 'tbl_sql.php' . $err_url;// After a syntax error, we return to this script// with the typed query in the textarea.$goto = 'tbl_sql.php';$back = 'tbl_sql.php';/** * Get table information */require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm(true, false, isset($_REQUEST['delimiter']) ? htmlspecialchars($_REQUEST['delimiter']) : ';');/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build OpenDocument Text dumps of tables * * @package PhpMyAdmin-Export * @subpackage ODT */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && !$plugin_param['single_table']) {        $hide_structure = true;    }    $plugin_list['odt'] = array(        'text' => __('Open Document Text'),        'extension' => 'odt',        'mime_type' => 'application/vnd.oasis.opendocument.text',        'force_file' => true,        'options' => array(), /* Filled later */        'options_text' => __('Options'),        );    /* what to dump (structure/data/both) */    $plugin_list['odt']['options'][]        = array('type' => 'begin_group', 'text' => __('Dump table') , 'name' => 'general_opts');    $plugin_list['odt']['options'][]        = array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data')));    $plugin_list['odt']['options'][] = array('type' => 'end_group');    /* Structure options */    if (!$hide_structure) {        $plugin_list['odt']['options'][]            = array('type' => 'begin_group', 'name' => 'structure', 'text' => __('Object creation options'), 'force' => 'data');        if (!empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['odt']['options'][]                = array('type' => 'bool', 'name' => 'relation', 'text' => __('Display foreign key relationships'));        }        $plugin_list['odt']['options'][]            = array('type' => 'bool', 'name' => 'comments', 'text' => __('Display comments'));        if (!empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['odt']['options'][]                = array('type' => 'bool', 'name' => 'mime', 'text' => __('Display MIME types'));        }        $plugin_list['odt']['options'][]            = array('type' => 'end_group');    }    /* Data */    $plugin_list['odt']['options'][]        = array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure');    $plugin_list['odt']['options'][]        = array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row'));    $plugin_list['odt']['options'][]        = array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:'));    $plugin_list['odt']['options'][]        = array('type' => 'end_group');} else {    $GLOBALS['odt_buffer'] = '';    include_once './libraries/opendocument.lib.php';    /**     * Outputs export footer     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportFooter()    {        $GLOBALS['odt_buffer'] .= '</office:text>'            . '</office:body>'            . '</office:document-content>';        if (! PMA_exportOutputHandler(PMA_createOpenDocument('application/vnd.oasis.opendocument.text', $GLOBALS['odt_buffer']))) {            return false;        }        return true;    }    /**     * Outputs export header     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportHeader()    {        $GLOBALS['odt_buffer'] .= '<?xml version="1.0" encoding="utf-8"?' . '>'            . '<office:document-content '. $GLOBALS['OpenDocumentNS'] . 'office:version="1.0">'            . '<office:body>'            . '<office:text>';        return true;    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="1" text:style-name="Heading_1" text:is-list-header="true">'            . __('Database') . ' ' . htmlspecialchars($db) . '</text:h>';        return true;    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in ODT format     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $what;        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        $fields_meta = PMA_DBI_get_fields_meta($result);        $field_flags = array();        for ($j = 0; $j < $fields_cnt; $j++) {            $field_flags[$j] = PMA_DBI_field_flags($result, $j);        }        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="2" text:style-name="Heading_2" text:is-list-header="true">'            . __('Dumping data for table') . ' ' . htmlspecialchars($table) . '</text:h>';        $GLOBALS['odt_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '_structure">';        $GLOBALS['odt_buffer'] .= '<table:table-column table:number-columns-repeated="' . $fields_cnt . '"/>';        // If required, get fields name at the first line        if (isset($GLOBALS[$what . '_columns'])) {            $GLOBALS['odt_buffer'] .= '<table:table-row>';            for ($i = 0; $i < $fields_cnt; $i++) {                $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                    . '<text:p>' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i))) . '</text:p>'                    . '</table:table-cell>';            } // end for            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $GLOBALS['odt_buffer'] .= '<table:table-row>';            for ($j = 0; $j < $fields_cnt; $j++) {                if (!isset($row[$j]) || is_null($row[$j])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($GLOBALS[$what . '_null']) . '</text:p>'                        . '</table:table-cell>';                // ignore BLOB                } elseif (stristr($field_flags[$j], 'BINARY')                        && $fields_meta[$j]->blob) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->numeric && $fields_meta[$j]->type != 'timestamp' && ! $fields_meta[$j]->blob) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="float" office:value="' . $row[$j] . '" >'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                }            } // end for            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end while        PMA_DBI_free_result($result);        $GLOBALS['odt_buffer'] .= '</table:table>';        return true;    }    /**     * Outputs table's structure     *     * @param string $db          database name     * @param string $table       table name     * @param string $crlf        the end of line sequence     * @param string $error_url   the url to go back in case of error     * @param bool   $do_relation whether to include relation comments     * @param bool   $do_comments whether to include the pmadb-style column comments     *                            as comments in the structure; this is deprecated     *                            but the parameter is left here because export.php     *                            calls PMA_exportStructure() also for other export     *                            types which use this parameter     * @param bool   $do_mime     whether to include mime comments     * @param bool   $dates       whether to include creation/update/check dates     * @param string $export_mode 'create_table', 'triggers', 'create_view', 'stand_in'     * @param string $export_type 'server', 'database', 'table'     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        /* Heading */        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="2" text:style-name="Heading_2" text:is-list-header="true">'            . __('Table structure for table') . ' ' . htmlspecialchars($table) . '</text:h>';        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && !empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $GLOBALS['odt_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '_data">';        $columns_cnt = 4;        if ($do_relation && $have_rel) {            $columns_cnt++;        }        if ($do_comments) {            $columns_cnt++;        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;        }        $GLOBALS['odt_buffer'] .= '<table:table-column table:number-columns-repeated="' . $columns_cnt . '"/>';        /* Header */        $GLOBALS['odt_buffer'] .= '<table:table-row>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Column') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Type') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Null') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Default') . '</text:p>'            . '</table:table-cell>';        if ($do_relation && $have_rel) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('Links to') . '</text:p>'                . '</table:table-cell>';        }        if ($do_comments) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('Comments') . '</text:p>'                . '</table:table-cell>';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('MIME type') . '</text:p>'                . '</table:table-cell>';            $mime_map = PMA_getMIME($db, $table, true);        }        $GLOBALS['odt_buffer'] .= '</table:table-row>';        $columns = PMA_DBI_get_columns($db, $table);        foreach ($columns as $column) {            $field_name = $column['Field'];            $GLOBALS['odt_buffer'] .= '<table:table-row>';            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($field_name) . '</text:p>'                . '</table:table-cell>';            $extracted_fieldspec = PMA_extractFieldSpec($column['Type']);            $type = htmlspecialchars($extracted_fieldspec['print_type']);            if (empty($type)) {                $type     = '&nbsp;';            }            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($type) . '</text:p>'                . '</table:table-cell>';            if (!isset($column['Default'])) {                if ($column['Null'] != 'NO') {                    $column['Default'] = 'NULL';                } else {                    $column['Default'] = '';                }            } else {                $column['Default'] = $column['Default'];            }            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . (($column['Null'] == '' || $column['Null'] == 'NO') ? __('No') : __('Yes')) . '</text:p>'                . '</table:table-cell>';            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($column['Default']) . '</text:p>'                . '</table:table-cell>';            if ($do_relation && $have_rel) {                if (isset($res_rel[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' (' . $res_rel[$field_name]['foreign_field'] . ')') . '</text:p>'                        . '</table:table-cell>';                }            }            if ($do_comments) {                if (isset($comments[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($comments[$field_name]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                }            }            if ($do_mime && $cfgRelation['mimework']) {                if (isset($mime_map[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype'])) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                }            }            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end while        $GLOBALS['odt_buffer'] .= '</table:table>';        return true;    } // end of the 'PMA_exportStructure' function} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Core functions used all over the scripts. * This script is distinct from libraries/common.inc.php because this * script is called from /test. * * @package PhpMyAdmin *//** * checks given $var and returns it if valid, or $default of not valid * given $var is also checked for type being 'similar' as $default * or against any other type if $type is provided * * <code> * // $_REQUEST['db'] not set * echo PMA_ifSetOr($_REQUEST['db'], ''); // '' * // $_REQUEST['sql_query'] not set * echo PMA_ifSetOr($_REQUEST['sql_query']); // null * // $cfg['ForceSSL'] not set * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // false * echo PMA_ifSetOr($cfg['ForceSSL']); // null * // $cfg['ForceSSL'] set to 1 * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // false * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'similar'); // 1 * echo PMA_ifSetOr($cfg['ForceSSL'], false); // 1 * // $cfg['ForceSSL'] set to true * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // true * </code> * * @see     PMA_isValid() * @param mixed   $var        param to check * @param mixed   $default    default value * @param mixed   $type       var type or array of values to check against $var * @return  mixed   $var or $default */function PMA_ifSetOr(&$var, $default = null, $type = 'similar'){    if (! PMA_isValid($var, $type, $default)) {        return $default;    }    return $var;}/** * checks given $var against $type or $compare * * $type can be: * - false       : no type checking * - 'scalar'    : whether type of $var is integer, float, string or boolean * - 'numeric'   : whether type of $var is any number repesentation * - 'length'    : whether type of $var is scalar with a string length > 0 * - 'similar'   : whether type of $var is similar to type of $compare * - 'equal'     : whether type of $var is identical to type of $compare * - 'identical' : whether $var is identical to $compare, not only the type! * - or any other valid PHP variable type * * <code> * // $_REQUEST['doit'] = true; * PMA_isValid($_REQUEST['doit'], 'identical', 'true'); // false * // $_REQUEST['doit'] = 'true'; * PMA_isValid($_REQUEST['doit'], 'identical', 'true'); // true * </code> * * NOTE: call-by-reference is used to not get NOTICE on undefined vars, * but the var is not altered inside this function, also after checking a var * this var exists nut is not set, example: * <code> * // $var is not set * isset($var); // false * functionCallByReference($var); // false * isset($var); // true * functionCallByReference($var); // true * </code> * * to avoid this we set this var to null if not isset * * @todo create some testsuites * @todo add some more var types like hex, bin, ...? * @see     http://php.net/gettype * @param mixed   $var        variable to check * @param mixed   $type       var type or array of valid values to check against $var * @param mixed   $compare    var to compare with $var * @return  boolean whether valid or not */function PMA_isValid(&$var, $type = 'length', $compare = null){    if (! isset($var)) {        // var is not even set        return false;    }    if ($type === false) {        // no vartype requested        return true;    }    if (is_array($type)) {        return in_array($var, $type);    }    // allow some aliaes of var types    $type = strtolower($type);    switch ($type) {        case 'identic' :            $type = 'identical';            break;        case 'len' :            $type = 'length';            break;        case 'bool' :            $type = 'boolean';            break;        case 'float' :            $type = 'double';            break;        case 'int' :            $type = 'integer';            break;        case 'null' :            $type = 'NULL';            break;    }    if ($type === 'identical') {        return $var === $compare;    }    // whether we should check against given $compare    if ($type === 'similar') {        switch (gettype($compare)) {            case 'string':            case 'boolean':                $type = 'scalar';                break;            case 'integer':            case 'double':                $type = 'numeric';                break;            default:                $type = gettype($compare);        }    } elseif ($type === 'equal') {        $type = gettype($compare);    }    // do the check    if ($type === 'length' || $type === 'scalar') {        $is_scalar = is_scalar($var);        if ($is_scalar && $type === 'length') {            return (bool) strlen($var);        }        return $is_scalar;    }    if ($type === 'numeric') {        return is_numeric($var);    }    if (gettype($var) === $type) {        return true;    }    return false;}/** * Removes insecure parts in a path; used before include() or * require() when a part of the path comes from an insecure source * like a cookie or form. * * @param string  The path to check * * @return   string  The secured path * * @access  public */function PMA_securePath($path){    // change .. to .    $path = preg_replace('@\.\.*@', '.', $path);    return $path;} // end function/** * displays the given error message on phpMyAdmin error page in foreign language, * ends script execution and closes session * * loads language file if not loaded already * * @todo    use detected argument separator (PMA_Config) * @param string $error_message the error message or named error message * @param string|array $message_args arguments applied to $error_message * @return  exit */function PMA_fatalError($error_message, $message_args = null){    /* Use format string if applicable */    if (is_string($message_args)) {        $error_message = sprintf($error_message, $message_args);    } elseif (is_array($message_args)) {        $error_message = vsprintf($error_message, $message_args);    }    $error_message = strtr($error_message, array('<br />' => '[br]'));    if (function_exists('__')) {        $error_header = __('Error');    } else {        $error_header = 'Error';    }    // Displays the error message    $lang = $GLOBALS['available_languages'][$GLOBALS['lang']][1];    $dir = $GLOBALS['text_dir'];    $type = $error_header;    $error = $error_message;    // on fatal errors it cannot hurt to always delete the current session    if (isset($GLOBALS['session_name']) && isset($_COOKIE[$GLOBALS['session_name']])) {        $GLOBALS['PMA_Config']->removeCookie($GLOBALS['session_name']);    }    include './libraries/error.inc.php';    if (!defined('TESTSUITE')) {        exit;    }}/** * Returns a link to the PHP documentation * * @param string  anchor in documentation * * @return  string  the URL * * @access  public */function PMA_getPHPDocLink($target){    /* Gettext does not have to be loaded yet */    if (function_exists('_pgettext')) {        /* l10n: Please check that translation actually exists. */        $lang = _pgettext('PHP documentation language', 'en');    } else {        $lang = 'en';    }    return PMA_linkURL('http://php.net/manual/' . $lang . '/' . $target);}/** * Warn or fail on missing extension. * * @param string $extension Extension name * @param bool $fatal Whether the error is fatal. / @param string $extra Extra string to append to messsage. */function PMA_warnMissingExtension($extension, $fatal = false, $extra = ''){    /* Gettext does not have to be loaded yet here */    if (function_exists('__')) {        $message = __('The %s extension is missing. Please check your PHP configuration.');    } else {        $message = 'The %s extension is missing. Please check your PHP configuration.';    }    $message = sprintf($message,        '[a@' . PMA_getPHPDocLink('book.' . $extension . '.php') . '@Documentation][em]' . $extension . '[/em][/a]');    if ($extra != '') {        $message .= ' ' . $extra;    }    if ($fatal) {        PMA_fatalError($message);    } else {        trigger_error($message, E_USER_WARNING);    }}/** * returns count of tables in given db * * @param string  $db database to count tables for * @return  integer count of tables in $db */function PMA_getTableCount($db){    $tables = PMA_DBI_try_query(        'SHOW TABLES FROM ' . PMA_backquote($db) . ';',        null, PMA_DBI_QUERY_STORE);    if ($tables) {        $num_tables = PMA_DBI_num_rows($tables);        // do not count hidden blobstreaming tables        while ((($num_tables > 0)) && $data = PMA_DBI_fetch_assoc($tables)) {            if (PMA_BS_IsHiddenTable($data['Tables_in_' . $db])) {                $num_tables--;            }        }        PMA_DBI_free_result($tables);    } else {        $num_tables = 0;    }    return $num_tables;}/** * Converts numbers like 10M into bytes * Used with permission from Moodle (http://moodle.org) by Martin Dougiamas * (renamed with PMA prefix to avoid double definition when embedded * in Moodle) * * @param string  $size * @return  integer $size */function PMA_get_real_size($size = 0){    if (! $size) {        return 0;    }    $scan['gb'] = 1073741824; //1024 * 1024 * 1024;    $scan['g']  = 1073741824; //1024 * 1024 * 1024;    $scan['mb'] = 1048576;    $scan['m']  = 1048576;    $scan['kb'] =    1024;    $scan['k']  =    1024;    $scan['b']  =       1;    foreach ($scan as $unit => $factor) {        if (strlen($size) > strlen($unit)         && strtolower(substr($size, strlen($size) - strlen($unit))) == $unit) {            return substr($size, 0, strlen($size) - strlen($unit)) * $factor;        }    }    return $size;} // end function PMA_get_real_size()/** * merges array recursive like array_merge_recursive() but keyed-values are * always overwritten. * * array PMA_array_merge_recursive(array $array1[, array $array2[, array ...]]) * * @see     http://php.net/array_merge * @see     http://php.net/array_merge_recursive * @param array   array to merge * @param array   array to merge * @param array   ... * @return  array   merged array */function PMA_array_merge_recursive(){    switch(func_num_args()) {        case 0 :            return false;            break;        case 1 :            // when does that happen?            return func_get_arg(0);            break;        case 2 :            $args = func_get_args();            if (! is_array($args[0]) || ! is_array($args[1])) {                return $args[1];            }            foreach ($args[1] as $key2 => $value2) {                if (isset($args[0][$key2]) && !is_int($key2)) {                    $args[0][$key2] = PMA_array_merge_recursive($args[0][$key2],                        $value2);                } else {                    // we erase the parent array, otherwise we cannot override a directive that                    // contains array elements, like this:                    // (in config.default.php) $cfg['ForeignKeyDropdownOrder'] = array('id-content','content-id');                    // (in config.inc.php) $cfg['ForeignKeyDropdownOrder'] = array('content-id');                    if (is_int($key2) && $key2 == 0) {                        unset($args[0]);                    }                    $args[0][$key2] = $value2;                }            }            return $args[0];            break;        default :            $args = func_get_args();            $args[1] = PMA_array_merge_recursive($args[0], $args[1]);            array_shift($args);            return call_user_func_array('PMA_array_merge_recursive', $args);            break;    }}/** * calls $function vor every element in $array recursively * * this function is protected against deep recursion attack CVE-2006-1549, * 1000 seems to be more than enough * * @see http://www.php-security.org/MOPB/MOPB-02-2007.html * @see http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1549 * * @param array   $array      array to walk * @param string  $function   function to call for every array element */function PMA_arrayWalkRecursive(&$array, $function, $apply_to_keys_also = false){    static $recursive_counter = 0;    if (++$recursive_counter > 1000) {        die(__('possible deep recursion attack'));    }    foreach ($array as $key => $value) {        if (is_array($value)) {            PMA_arrayWalkRecursive($array[$key], $function, $apply_to_keys_also);        } else {            $array[$key] = $function($value);        }        if ($apply_to_keys_also && is_string($key)) {            $new_key = $function($key);            if ($new_key != $key) {                $array[$new_key] = $array[$key];                unset($array[$key]);            }        }    }    $recursive_counter--;}/** * boolean phpMyAdmin.PMA_checkPageValidity(string &$page, array $whitelist) * * checks given given $page against given $whitelist and returns true if valid * it ignores optionaly query paramters in $page (script.php?ignored) * * @param string  &$page      page to check * @param array   $whitelist  whitelist to check page against * @return  boolean whether $page is valid or not (in $whitelist or not) */function PMA_checkPageValidity(&$page, $whitelist){    if (! isset($page) || !is_string($page)) {        return false;    }    if (in_array($page, $whitelist)) {        return true;    } elseif (in_array(substr($page, 0, strpos($page . '?', '?')), $whitelist)) {        return true;    } else {        $_page = urldecode($page);        if (in_array(substr($_page, 0, strpos($_page . '?', '?')), $whitelist)) {            return true;        }    }    return false;}/** * trys to find the value for the given environment vriable name * * searchs in $_SERVER, $_ENV than trys getenv() and apache_getenv() * in this order * * @param string  $var_name   variable name * @return  string  value of $var or empty string */function PMA_getenv($var_name){    if (isset($_SERVER[$var_name])) {        return $_SERVER[$var_name];    } elseif (isset($_ENV[$var_name])) {        return $_ENV[$var_name];    } elseif (getenv($var_name)) {        return getenv($var_name);    } elseif (function_exists('apache_getenv')     && apache_getenv($var_name, true)) {        return apache_getenv($var_name, true);    }    return '';}/** * Send HTTP header, taking IIS limits into account (600 seems ok) * * @param string   $uri the header to send * @return  boolean  always true */function PMA_sendHeaderLocation($uri){    if (PMA_IS_IIS && strlen($uri) > 600) {        include_once './libraries/js_escape.lib.php';        echo '<html><head><title>- - -</title>' . "\n";        echo '<meta http-equiv="expires" content="0">' . "\n";        echo '<meta http-equiv="Pragma" content="no-cache">' . "\n";        echo '<meta http-equiv="Cache-Control" content="no-cache">' . "\n";        echo '<meta http-equiv="Refresh" content="0;url=' .  htmlspecialchars($uri) . '">' . "\n";        echo '<script type="text/javascript">' . "\n";        echo '//<![CDATA[' . "\n";        echo 'setTimeout("window.location = unescape(\'"' . PMA_escapeJsString($uri) . '"\')", 2000);' . "\n";        echo '//]]>' . "\n";        echo '</script>' . "\n";        echo '</head>' . "\n";        echo '<body>' . "\n";        echo '<script type="text/javascript">' . "\n";        echo '//<![CDATA[' . "\n";        echo 'document.write(\'<p><a href="' . htmlspecialchars($uri) . '">' . __('Go') . '</a></p>\');' . "\n";        echo '//]]>' . "\n";        echo '</script></body></html>' . "\n";    } else {        if (SID) {            if (strpos($uri, '?') === false) {                header('Location: ' . $uri . '?' . SID);            } else {                $separator = PMA_get_arg_separator();                header('Location: ' . $uri . $separator . SID);            }        } else {            session_write_close();            if (headers_sent()) {                if (function_exists('debug_print_backtrace')) {                    echo '<pre>';                    debug_print_backtrace();                    echo '</pre>';                }                trigger_error('PMA_sendHeaderLocation called when headers are already sent!', E_USER_ERROR);            }            // bug #1523784: IE6 does not like 'Refresh: 0', it            // results in a blank page            // but we need it when coming from the cookie login panel)            if (PMA_IS_IIS && defined('PMA_COMING_FROM_COOKIE_LOGIN')) {                header('Refresh: 0; ' . $uri);            } else {                header('Location: ' . $uri);            }        }    }}/** * Outputs headers to prevent caching in browser (and on the way). * * @return nothing */function PMA_no_cache_header(){    header('Expires: ' . date(DATE_RFC1123)); // rfc2616 - Section 14.21    header('Cache-Control: no-store, no-cache, must-revalidate, pre-check=0, post-check=0, max-age=0'); // HTTP/1.1    if (PMA_USR_BROWSER_AGENT == 'IE') {        /* FIXME: Why is this speecial case for IE needed? */        header('Pragma: public');    } else {        header('Pragma: no-cache'); // HTTP/1.0        // test case: exporting a database into a .gz file with Safari        // would produce files not having the current time        // (added this header for Safari but should not harm other browsers)        header('Last-Modified: ' . date(DATE_RFC1123));    }}/** * Sends header indicating file download. * * @param string $filename Filename to include in headers if empty, *                         none Content-Disposition header will be sent. * @param string $mimetype MIME type to include in headers. * @param int    $length   Length of content (optional) * @param bool   $no_cache Whether to include no-caching headers. * * @return nothing */function PMA_download_header($filename, $mimetype, $length = 0, $no_cache = true){    if ($no_cache) {        PMA_no_cache_header();    }    /* Replace all possibly dangerous chars in filename */    $filename = str_replace(array(';', '"', "\n", "\r"), '-', $filename);    if (!empty($filename)) {        header('Content-Description: File Transfer');        header('Content-Disposition: attachment; filename="' . $filename . '"');    }    header('Content-Type: ' . $mimetype);    header('Content-Transfer-Encoding: binary');    if ($length > 0) {        header('Content-Length: ' . $length);    }}/** * Returns value of an element in $array given by $path. * $path is a string describing position of an element in an associative array, * eg. Servers/1/host refers to $array[Servers][1][host] * * @param string   $path * @param array    $array * @param mixed    $default * @return mixed    array element or $default */function PMA_array_read($path, $array, $default = null){    $keys = explode('/', $path);    $value =& $array;    foreach ($keys as $key) {        if (! isset($value[$key])) {            return $default;        }        $value =& $value[$key];    }    return $value;}/** * Stores value in an array * * @param string   $path * @param array    &$array * @param mixed    $value */function PMA_array_write($path, &$array, $value){    $keys = explode('/', $path);    $last_key = array_pop($keys);    $a =& $array;    foreach ($keys as $key) {        if (! isset($a[$key])) {            $a[$key] = array();        }        $a =& $a[$key];    }    $a[$last_key] = $value;}/** * Removes value from an array * * @param string   $path * @param array    &$array * @param mixed    $value */function PMA_array_remove($path, &$array){    $keys = explode('/', $path);    $keys_last = array_pop($keys);    $path = array();    $depth = 0;    $path[0] =& $array;    $found = true;    // go as deep as required or possible    foreach ($keys as $key) {        if (! isset($path[$depth][$key])) {            $found = false;            break;        }        $depth++;        $path[$depth] =& $path[$depth-1][$key];    }    // if element found, remove it    if ($found) {        unset($path[$depth][$keys_last]);        $depth--;    }    // remove empty nested arrays    for (; $depth >= 0; $depth--) {        if (! isset($path[$depth+1]) || count($path[$depth+1]) == 0) {            unset($path[$depth][$keys[$depth]]);        } else {            break;        }    }}/** * Returns link to (possibly) external site using defined redirector. * * @param string $url  URL where to go. * * @return string URL for a link. */function PMA_linkURL($url){    if (!preg_match('#^https?://#', $url) || defined('PMA_SETUP')) {        return $url;    } else {        if (!function_exists('PMA_generate_common_url')) {            include_once './libraries/url_generating.lib.php';        }        $params = array();        $params['url'] = $url;        return './url.php' . PMA_generate_common_url($params);    }}/** * Returns HTML code to include javascript file. * * @param string $url Location of javascript, relative to js/ folder. * * @return string HTML code for javascript inclusion. */function PMA_includeJS($url){    if (strpos($url, '?') === false) {        return '<script src="./js/' . $url . '?ts=' . filemtime('./js/' . $url) . '" type="text/javascript"></script>' . "\n";    } else {        return '<script src="./js/' . $url . '" type="text/javascript"></script>' . "\n";    }}/** * Adds JS code snippets to be displayed by header.inc.php. Adds a * newline to each snippet. * * @param string $str Js code to be added (e.g. "token=1234;") * */function PMA_AddJSCode($str){    $GLOBALS['js_script'][] = $str;}/** * Adds JS code snippet for variable assignment to be displayed by header.inc.php. * * @param string $key    Name of value to set * @param mixed  $value  Value to set, can be either string or array of strings * @param bool   $escape Whether to escape value or keep it as it is (for inclusion of js code) * */function PMA_AddJSVar($key, $value, $escape = true){    PMA_AddJsCode(PMA_getJsValue($key, $value, $escape));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * file upload functions * * @package PhpMyAdmin *//** * * @todo when uploading a file into a blob field, should we also consider using *       chunks like in import? UPDATE `table` SET `field` = `field` + [chunk] * @package PhpMyAdmin */class PMA_File{    /**     * @var string the temporary file name     * @access protected     */    var $_name = null;    /**     * @var string the content     * @access protected     */    var $_content = null;    /**     * @var string the error message     * @access protected     */    var $_error_message = '';    /**     * @var bool whether the file is temporary or not     * @access protected     */    var $_is_temp = false;    /**     * @var string type of compression     * @access protected     */    var $_compression = null;    /**     * @var integer     */    var $_offset = 0;    /**     * @var integer size of chunk to read with every step     */    var $_chunk_size = 32768;    /**     * @var resource file handle     */    var $_handle = null;    /**     * @var boolean whether to decompress content before returning     */    var $_decompress = false;    /**     * @var string charset of file     */    var $_charset = null;    /**     * @staticvar string most recent BLOB repository reference    */    static $_recent_bs_reference = null;    /**     * constructor     *     * @access  public     * @param string  $name   file name     */    function __construct($name = false)    {        if ($name) {            $this->setName($name);        }    }    /**     * destructor     *     * @see     PMA_File::cleanUp()     * @access  public     */    function __destruct()    {        $this->cleanUp();    }    /**     * deletes file if it is temporary, usally from a moved upload file     *     * @access  public     * @return  boolean success     */    function cleanUp()    {        if ($this->isTemp()) {            return $this->delete();        }        return true;    }    /**     * deletes the file     *     * @access  public     * @return  boolean success     */    function delete()    {        return unlink($this->getName());    }    /**     * checks or sets the temp flag for this file     * file objects with temp flags are deleted with object destruction     *     * @access  public     * @param boolean sets the temp flag     * @return  boolean PMA_File::$_is_temp     */    function isTemp($is_temp = null)    {        if (null !== $is_temp) {            $this->_is_temp = (bool) $is_temp;        }        return $this->_is_temp;    }    /**     * accessor     *     * @access  public     * @param string  $name   file name     */    function setName($name)    {        $this->_name = trim($name);    }    /**     * @access  public     * @return  string  binary file content     */    function getContent($as_binary = true, $offset = 0, $length = null)    {        if (null === $this->_content) {            if ($this->isUploaded() && ! $this->checkUploadedFile()) {                return false;            }            if (! $this->isReadable()) {                return false;            }            if (function_exists('file_get_contents')) {                $this->_content = file_get_contents($this->getName());            } elseif ($size = filesize($this->getName())) {                $this->_content = fread(fopen($this->getName(), 'rb'), $size);            }        }        if (! empty($this->_content) && $as_binary) {            return '0x' . bin2hex($this->_content);        }        if (null !== $length) {            return substr($this->_content, $offset, $length);        } elseif ($offset > 0) {            return substr($this->_content, $offset);        }        return $this->_content;    }    /**     * @access  public     * @return bool     */    function isUploaded()    {        return is_uploaded_file($this->getName());    }    /**     * accessor     *     * @access  public     * @return  string  PMA_File::$_name     */    function getName()    {        return $this->_name;    }    /**     * @access  public     * @param string  name of file uploaded     * @return  boolean success     */    function setUploadedFile($name)    {        $this->setName($name);        if (! $this->isUploaded()) {            $this->setName(null);            $this->_error_message = __('File was not an uploaded file.');            return false;        }        return true;    }    /**     * @access  public     * @param string  $key the md5 hash of the column name     * @param string  $rownumber     * @return  boolean success     */    function setUploadedFromTblChangeRequest($key, $rownumber)    {        if (! isset($_FILES['fields_upload'])  || empty($_FILES['fields_upload']['name']['multi_edit'][$rownumber][$key])) {            return false;        }        $file = PMA_File::fetchUploadedFromTblChangeRequestMultiple($_FILES['fields_upload'], $rownumber, $key);        // for blobstreaming        $is_bs_upload = false;        // check if this field requires a repository upload        if (isset($_REQUEST['upload_blob_repo']['multi_edit'][$rownumber][$key])) {            $is_bs_upload = ($_REQUEST['upload_blob_repo']['multi_edit'][$rownumber][$key] == "on") ? true : false;        }        // if request is an upload to the BLOB repository        if ($is_bs_upload) {            $bs_db = $_REQUEST['db'];            $bs_table = $_REQUEST['table'];            $tmp_filename = $file['tmp_name'];            $tmp_file_type = $file['type'];            if (! $tmp_file_type) {                $tmp_file_type = null;            }            if (! $bs_db || ! $bs_table) {                $this->_error_message = __('Unknown error while uploading.');                return false;            }            $blob_url =  PMA_BS_UpLoadFile($bs_db, $bs_table, $tmp_file_type, $tmp_filename);            PMA_File::setRecentBLOBReference($blob_url);         }   // end if ($is_bs_upload)        // check for file upload errors        switch ($file['error']) {            // we do not use the PHP constants here cause not all constants            // are defined in all versions of PHP - but the correct constants names            // are given as comment            case 0: //UPLOAD_ERR_OK:                return $this->setUploadedFile($file['tmp_name']);                break;            case 4: //UPLOAD_ERR_NO_FILE:                break;            case 1: //UPLOAD_ERR_INI_SIZE:                $this->_error_message = __('The uploaded file exceeds the upload_max_filesize directive in php.ini.');                break;            case 2: //UPLOAD_ERR_FORM_SIZE:                $this->_error_message = __('The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.');                break;            case 3: //UPLOAD_ERR_PARTIAL:                $this->_error_message = __('The uploaded file was only partially uploaded.');                break;            case 6: //UPLOAD_ERR_NO_TMP_DIR:                $this->_error_message = __('Missing a temporary folder.');                break;            case 7: //UPLOAD_ERR_CANT_WRITE:                $this->_error_message = __('Failed to write file to disk.');                break;            case 8: //UPLOAD_ERR_EXTENSION:                $this->_error_message = __('File upload stopped by extension.');                break;            default:                $this->_error_message = __('Unknown error in file upload.');        } // end switch        return false;    }    /**     * strips some dimension from the multi-dimensional array from $_FILES     *     * <code>     * $file['name']['multi_edit'][$rownumber][$key] = [value]     * $file['type']['multi_edit'][$rownumber][$key] = [value]     * $file['size']['multi_edit'][$rownumber][$key] = [value]     * $file['tmp_name']['multi_edit'][$rownumber][$key] = [value]     * $file['error']['multi_edit'][$rownumber][$key] = [value]     *     * // becomes:     *     * $file['name'] = [value]     * $file['type'] = [value]     * $file['size'] = [value]     * $file['tmp_name'] = [value]     * $file['error'] = [value]     * </code>     *     * @access  public     * @static     * @param array   $file       the array     * @param string  $rownumber     * @param string  $key     * @return  array     */    function fetchUploadedFromTblChangeRequestMultiple($file, $rownumber, $key)    {        $new_file = array(            'name' => $file['name']['multi_edit'][$rownumber][$key],            'type' => $file['type']['multi_edit'][$rownumber][$key],            'size' => $file['size']['multi_edit'][$rownumber][$key],            'tmp_name' => $file['tmp_name']['multi_edit'][$rownumber][$key],            'error' => $file['error']['multi_edit'][$rownumber][$key],        );        return $new_file;    }    /**     * sets the name if the file to the one selected in the tbl_change form     *     * @access  public     * @param string  $key the md5 hash of the column name     * @param string  $rownumber     * @return  boolean success     */    function setSelectedFromTblChangeRequest($key, $rownumber = null)    {        if (! empty($_REQUEST['fields_uploadlocal']['multi_edit'][$rownumber][$key])         && is_string($_REQUEST['fields_uploadlocal']['multi_edit'][$rownumber][$key])) {            // ... whether with multiple rows ...            // for blobstreaming            $is_bs_upload = false;            // check if this field requires a repository upload            if (isset($_REQUEST['upload_blob_repo']['multi_edit'][$rownumber][$key])) {                $is_bs_upload = ($_REQUEST['upload_blob_repo']['multi_edit'][$rownumber][$key] == "on") ? true : false;            }            // is a request to upload file to BLOB repository using uploadDir mechanism            if ($is_bs_upload) {                $bs_db = $_REQUEST['db'];                $bs_table = $_REQUEST['table'];                $tmp_filename = $GLOBALS['cfg']['UploadDir'] . '/' . $_REQUEST['fields_uploadlocal_' . $key]['multi_edit'][$rownumber];                // check if fileinfo library exists                if ($PMA_Config->get('FILEINFO_EXISTS')) {                // attempt to init fileinfo                    $finfo = finfo_open(FILEINFO_MIME);                    // fileinfo exists                    if ($finfo) {                        // pass in filename to fileinfo and close fileinfo handle after                        $tmp_file_type = finfo_file($finfo, $tmp_filename);                        finfo_close($finfo);                    }                } else {                    // no fileinfo library exists, use file command                    $tmp_file_type = exec("file -bi " . escapeshellarg($tmp_filename));                }                if (! $tmp_file_type) {                    $tmp_file_type = null;                }                if (! $bs_db || !$bs_table) {                    $this->_error_message = __('Unknown error while uploading.');                    return false;                }                $blob_url = PMA_BS_UpLoadFile($bs_db, $bs_table, $tmp_file_type, $tmp_filename);                PMA_File::setRecentBLOBReference($blob_url);            }   // end if ($is_bs_upload)            return $this->setLocalSelectedFile($_REQUEST['fields_uploadlocal']['multi_edit'][$rownumber][$key]);        } else {            return false;        }    }    /**     * @access  public     * @return  string  error message     */    function getError()    {        return $this->_error_message;    }    /**     * @access  public     * @return  boolean whether an error occured or not     */    function isError()    {        return ! empty($this->_error_message);    }    /**     * checks the superglobals provided if the tbl_change form is submitted     * and uses the submitted/selected file     *     * @access  public     * @param string  $key the md5 hash of the column name     * @param string  $rownumber     * @return  boolean success     */    function checkTblChangeForm($key, $rownumber)    {        if ($this->setUploadedFromTblChangeRequest($key, $rownumber)) {            // well done ...            $this->_error_message = '';            return true;        } elseif ($this->setSelectedFromTblChangeRequest($key, $rownumber)) {            // well done ...            $this->_error_message = '';            return true;        }        // all failed, whether just no file uploaded/selected or an error        return false;    }    /**     *     * @access  public     * @param string  $name     * @return  boolean success     */    function setLocalSelectedFile($name)    {        if (empty($GLOBALS['cfg']['UploadDir'])) return false;        $this->setName(PMA_userDir($GLOBALS['cfg']['UploadDir']) . PMA_securePath($name));        if (! $this->isReadable()) {            $this->_error_message = __('File could not be read');            $this->setName(null);            return false;        }        return true;    }    /**     * @access  public     * @return  boolean whether the file is readable or not     */    function isReadable()    {        // suppress warnings from being displayed, but not from being logged        // any file access outside of open_basedir will issue a warning        ob_start();        $is_readable = is_readable($this->getName());        ob_end_clean();        return $is_readable;    }    /**     * If we are on a server with open_basedir, we must move the file     * before opening it. The FAQ 1.11 explains how to create the "./tmp"     * directory - if needed     *     * @todo move check of $cfg['TempDir'] into PMA_Config?     * @access  public     * @return  boolean whether uploaded fiel is fine or not     */    function checkUploadedFile()    {        if ($this->isReadable()) {            return true;        }        if (empty($GLOBALS['cfg']['TempDir']) || ! is_writable($GLOBALS['cfg']['TempDir'])) {            // cannot create directory or access, point user to FAQ 1.11            $this->_error_message = __('Error moving the uploaded file, see [a@./Documentation.html#faq1_11@Documentation]FAQ 1.11[/a]');            return false;        }        $new_file_to_upload = tempnam(realpath($GLOBALS['cfg']['TempDir']), basename($this->getName()));        // suppress warnings from being displayed, but not from being logged        // any file access outside of open_basedir will issue a warning        ob_start();        $move_uploaded_file_result = move_uploaded_file($this->getName(), $new_file_to_upload);        ob_end_clean();        if (! $move_uploaded_file_result) {            $this->_error_message = __('Error while moving uploaded file.');            return false;        }        $this->setName($new_file_to_upload);        $this->isTemp(true);        if (! $this->isReadable()) {            $this->_error_message = __('Cannot read (moved) upload file.');            return false;        }        return true;    }    /**     * Detects what compression filse uses     *     * @todo    move file read part into readChunk() or getChunk()     * @todo    add support for compression plugins     * @access  protected     * @return  string MIME type of compression, none for none     */    function _detectCompression()    {        // suppress warnings from being displayed, but not from being logged        // f.e. any file access outside of open_basedir will issue a warning        ob_start();        $file = fopen($this->getName(), 'rb');        ob_end_clean();        if (! $file) {            $this->_error_message = __('File could not be read');            return false;        }        /**         * @todo         * get registered plugins for file compression        foreach (PMA_getPlugins($type = 'compression') as $plugin) {            if (call_user_func_array(array($plugin['classname'], 'canHandle'), array($this->getName()))) {                $this->setCompressionPlugin($plugin);                break;            }        }         */        $test = fread($file, 4);        $len = strlen($test);        fclose($file);        if ($len >= 2 && $test[0] == chr(31) && $test[1] == chr(139)) {            $this->_compression = 'application/gzip';        } elseif ($len >= 3 && substr($test, 0, 3) == 'BZh') {            $this->_compression = 'application/bzip2';        } elseif ($len >= 4 && $test == "PK\003\004") {            $this->_compression = 'application/zip';        } else {            $this->_compression = 'none';        }        return $this->_compression;    }    /**     * whether the content should be decompressed before returned     */    function setDecompressContent($decompress)    {        $this->_decompress = (bool) $decompress;    }    function getHandle()    {        if (null === $this->_handle) {            $this->open();        }        return $this->_handle;    }    function setHandle($handle)    {        $this->_handle = $handle;    }    /**     * @return bool     */    function open()    {        if (! $this->_decompress) {            $this->_handle = @fopen($this->getName(), 'r');        }        switch ($this->getCompression()) {            case false:                return false;            case 'application/bzip2':                if ($GLOBALS['cfg']['BZipDump'] && @function_exists('bzopen')) {                    $this->_handle = @bzopen($this->getName(), 'r');                } else {                    $this->_error_message = sprintf(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'), $this->getCompression());                    return false;                }                break;            case 'application/gzip':                if ($GLOBALS['cfg']['GZipDump'] && @function_exists('gzopen')) {                    $this->_handle = @gzopen($this->getName(), 'r');                } else {                    $this->_error_message = sprintf(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'), $this->getCompression());                    return false;                }                break;            case 'application/zip':                if ($GLOBALS['cfg']['ZipDump'] && @function_exists('zip_open')) {                    include_once './libraries/zip_extension.lib.php';                    $result = PMA_getZipContents($this->getName());                    if (! empty($result['error'])) {                        $this->_error_message = PMA_Message::rawError($result['error']);                        return false;                    } else {                        $this->content_uncompressed = $result['data'];                    }                    unset($result);                } else {                    $this->_error_message = sprintf(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'), $this->getCompression());                    return false;                }                break;            case 'none':                $this->_handle = @fopen($this->getName(), 'r');                break;            default:                $this->_error_message = sprintf(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'), $this->getCompression());                return false;                break;        }        return true;    }    function getCharset()    {        return $this->_charset;    }    function setCharset($charset)    {        $this->_charset = $charset;    }    /**     * @return  string MIME type of compression, none for none     * @access  public     */    function getCompression()    {        if (null === $this->_compression) {            return $this->_detectCompression();        }        return $this->_compression;    }    /**     * advances the file pointer in the file handle by $length bytes/chars     *     * @param integer $length numbers of chars/bytes to skip     * @return  boolean     * @todo this function is unused     */    function advanceFilePointer($length)    {        while ($length > 0) {            $this->getNextChunk($length);            $length -= $this->getChunkSize();        }    }    /**     * http://bugs.php.net/bug.php?id=29532     * bzip reads a maximum of 8192 bytes on windows systems     * @todo this function is unused     * @param int $max_size     * @return bool|string     */    function getNextChunk($max_size = null)    {        if (null !== $max_size) {            $size = min($max_size, $this->getChunkSize());        } else {            $size = $this->getChunkSize();        }        // $result = $this->handler->getNextChunk($size);        $result = '';        switch ($this->getCompression()) {            case 'application/bzip2':                $result = '';                while (strlen($result) < $size - 8192 && ! feof($this->getHandle())) {                    $result .= bzread($this->getHandle(), $size);                }                break;            case 'application/gzip':                $result = gzread($this->getHandle(), $size);                break;            case 'application/zip':                /*                 * if getNextChunk() is used some day,                 * replace this code by code similar to the one                 * in open()                 *                include_once './libraries/unzip.lib.php';                $import_handle = new SimpleUnzip();                $import_handle->ReadFile($this->getName());                if ($import_handle->Count() == 0) {                    $this->_error_message = __('No files found inside ZIP archive!');                    return false;                } elseif ($import_handle->GetError(0) != 0) {                    $this->_error_message = __('Error in ZIP archive:')                        . ' ' . $import_handle->GetErrorMsg(0);                    return false;                } else {                    $result = $import_handle->GetData(0);                }                 */                break;            case 'none':                $result = fread($this->getHandle(), $size);                break;            default:                return false;        }        if ($GLOBALS['charset_conversion']) {            $result = PMA_convert_string($this->getCharset(), 'utf-8', $result);        } else {            /**             * Skip possible byte order marks (I do not think we need more             * charsets, but feel free to add more, you can use wikipedia for             * reference: <http://en.wikipedia.org/wiki/Byte_Order_Mark>)             *             * @todo BOM could be used for charset autodetection             */            if ($this->getOffset() === 0) {                // UTF-8                if (strncmp($result, "\xEF\xBB\xBF", 3) == 0) {                    $result = substr($result, 3);                // UTF-16 BE, LE                } elseif (strncmp($result, "\xFE\xFF", 2) == 0                 || strncmp($result, "\xFF\xFE", 2) == 0) {                    $result = substr($result, 2);                }            }        }        $this->_offset += $size;        if (0 === $result) {            return true;        }        return $result;    }    function getOffset()    {        return $this->_offset;    }    function getChunkSize()    {        return $this->_chunk_size;    }    function setChunkSize($chunk_size)    {        $this->_chunk_size = (int) $chunk_size;    }    function getContentLength()    {        return strlen($this->_content);    }    function eof()    {        if ($this->getHandle()) {            return feof($this->getHandle());        } else {            return ($this->getOffset() >= $this->getContentLength());        }    }    /**     * sets reference to most recent BLOB repository reference     *     * @access  public     * @param string - BLOB repository reference    */    static function setRecentBLOBReference($ref)    {        PMA_File::$_recent_bs_reference = $ref;    }    /**     * retrieves reference to most recent BLOB repository reference     *     * @access  public     * @return  string - most recent BLOB repository reference    */    static function getRecentBLOBReference()    {        $ref = PMA_File::$_recent_bs_reference;        PMA_File::$_recent_bs_reference = null;        return $ref;    }}?>
