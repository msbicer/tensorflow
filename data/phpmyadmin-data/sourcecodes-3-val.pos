<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once 'Export_Relation_Schema.class.php';/** * This Class inherits the XMLwriter class and * helps in developing structure of MS Visio Schema Export * * @access public * @see http://php.net/manual/en/book.xmlwriter.php */class PMA_VISIO extends XMLWriter{    public $title;    public $author;    public $font;    public $fontSize;    /**     * The "PMA_VISIO" constructor     *     * Upon instantiation This starts writing the Visio XML .VDX document     *     * @return void     * @see XMLWriter::openMemory(),XMLWriter::setIndent(),XMLWriter::startDocument()     */    function __construct()    {        $this->openMemory();        /*         * Set indenting using three spaces,         * so output is formatted         */        $this->setIndent(true);        $this->setIndentString('   ');        /*         * Create the XML document         */        $this->startDocument('1.0', 'UTF-8');    }    /**     * Starts Visio XML .VDX Document     *     * Visio XML document starts by first initializing VisioDocument tag     * then DocumentProperties & DocumentSettings contains all the     * attributes that needed to define the document. Order of elements     * should be maintained while generating XML of Visio.     *     * @return void     * @access public     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),     * _documentProperties, _documentSettings     */    function startVisioDoc()    {        $this->startElement('VisioDocument');        $this->writeAttribute('xmlns', 'http://schemas.microsoft.com/visio/2003/core');        $this->writeAttribute('xmlns:vx', 'http://schemas.microsoft.com/visio/2006/extension');        $this->writeAttribute('xml:space', 'preserve');        $this->_documentProperties();        $this->_documentSettings();    }    /**     * Set document title     *     * @param string $value title text     *     * @return void     * @access public     */    function setTitle($value)    {        $this->title = $value;    }    /**     * Set document author     *     * @param string $value the author     *     * @return void     * @access public     */    function setAuthor($value)    {        $this->author = $value;    }    /**     * Sets Visio XML .VDX Document Properties     *     * DocumentProperties tag contains document property elements such as       the document's Title,Subject,Creator and templates tags     *     * @return void     * @access private     * @see XMLWriter::startElement(),XMLWriter::endElement(),XMLWriter::writeRaw()     */    private function _documentProperties()    {        $this->startElement('DocumentProperties');        $this->writeRaw('<Title>'.$this->title.'</Title>');        $this->writeRaw('<Subject>'.$this->title.'</Subject>');        $this->writeRaw('<Creator>'.$this->author.'</Creator>');        $this->writeRaw('<Company>phpMyAdmin</Company>');        $this->writeRaw('<Template>c:\program files\microsoft office\office12\1033\DBMODL_U.VST</Template>');        $this->endElement();    }    /**     * Sets Visio XML .VDX Document Settings     *     * DocumentSettings  tag contains elements that specify document settings.     *     * @return void     * @access private     * @see XMLWriter::startElement(),XMLWriter::endElement()     */    private function _documentSettings()    {        $this->startElement('DocumentSettings');        $this->endElement();    }    /**     * Ends Visio XML Document     *     * @return void     * @access public     * @see XMLWriter::endElement(),XMLWriter::endDocument()     */    function endVisioDoc()    {        $this->endElement();        $this->endDocument();    }    /**     * Output Visio XML .VDX Document for download     *     * @param string $fileName name of the Visio XML document     *     * @return void     * @access public     * @see XMLWriter::flush()     */    function showOutput($fileName)    {         //if(ob_get_clean()){            //ob_end_clean();        //}        $output = $this->flush();        PMA_download_header($fileName . '.vdx', 'application/visio', strlen($output));        print $output;    }}/** * Draws tables schema */class Table_Stats{    /**     * Defines properties     */    private $_tableName;    private $_showInfo = false;    public $width = 0;    public $height;    public $fields = array();    public $heightCell = 0;    public $currentCell = 0;    public $x, $y;    public $primary = array();    /**     * The "Table_Stats" constructor     *     * @param string  $tableName        The table name     * @param integer $pageNumber       Page number     * @param integer &$same_wide_width The max. with among tables     * @param boolean $showKeys         Whether to display keys or not     * @param boolean $showInfo         Whether to display table position or not     *     * @global object    The current Visio XML document     * @global integer   The current page number (from the     *                     $cfg['Servers'][$i]['table_coords'] table)     * @global array     The relations settings     * @global string    The current db name     *     * @return void     * @access private     * @see PMA_VISIO, Table_Stats::Table_Stats_setWidth,     *      Table_Stats::Table_Stats_setHeight     */    function __construct($tableName, $pageNumber, &$same_wide_width, $showKeys = false, $showInfo = false)    {        global $visio, $cfgRelation, $db;        $this->_tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $visio->dieSchema(                $pageNumber,                "VISIO",                sprintf(__('The %s table doesn\'t exist!'), $tableName)            );        }        /*        * load fields        * check to see if it will load all fields or only the foreign keys        */        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->_tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $this->_showInfo = $showInfo;        // height and width        $this->_setHeightTable($fontSize);        // setWidth must me after setHeight, because title        // can include table height which changes table width        $this->_setWidthTable($font, $fontSize);        if ($same_wide_width < $this->width) {            $same_wide_width = $this->width;        }        // x and y        $sql = 'SELECT x, y FROM '         . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'         . PMA_backquote($cfgRelation['table_coords'])         . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''         . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''         . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $visio->dieSchema(                $pageNumber,                "VISIO",                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        // displayfield        $this->displayfield = PMA_getDisplayField($db, $tableName);        // index        $result = PMA_DBI_query('SHOW INDEX FROM ' . PMA_backquote($tableName) . ';', null, PMA_DBI_QUERY_STORE);        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }    }    /**     * Returns title of the current table,     * title can have the dimensions/co-ordinates of the table     *     * @return the title     * @access private     */    private function _getTitle()    {        return ($this->_showInfo            ? sprintf('%.0f', $this->width) . 'x' . sprintf('%.0f', $this->heightCell)            : '') . ' ' . $this->_tableName;    }    /**     * Sets the width of the table     *     * @param string  $font     font name     * @param integer $fontSize font size     *     * @global object The current Visio XML document     *     * @return void     * @see PMA_VISIO     */    private function _setWidthTable($font,$fontSize)    {        global $visio;    }    /**     * Sets the height of the table     *     * @param integer $fontSize font size     *     * @return void     * @access private     */    function _setHeightTable($fontSize)    {        $this->heightCell = $fontSize + 4;        $this->height = (count($this->fields) + 1) * $this->heightCell;    }    /**     * draw the table     *     * @param boolean $showColor Whether to display color     *     * @global object The current Visio XML document     *     * @return void     * @access public     * @see PMA_VISIO     */    public function tableDraw($showColor)    {        global $visio;        //echo $this->_tableName.'<br />';        foreach ($this->fields as $field) {            $this->currentCell += $this->heightCell;            $showColor    = 'none';            if ($showColor) {                if (in_array($field, $this->primary)) {                    $showColor = '#0c0';                }                if ($field == $this->displayfield) {                    $showColor = 'none';                }            }            // code here for drawing table diagrams        }    }}/** * Draws relation links * * @access public * @see PMA_VISIO */class Relation_Stats{    /**     * Defines properties     */    public $xSrc, $ySrc;    public $srcDir ;    public $destDir;    public $xDest, $yDest;    public $wTick = 10;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @return void     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        /*        * [0] is x-left        * [1] is x-right        * [2] is y        */        $src_left   = $src_pos[0] - $this->wTick;        $src_right  = $src_pos[1] + $this->wTick;        $dest_left  = $dest_pos[0] - $this->wTick;        $dest_right = $dest_pos[1] + $this->wTick;        $d1 = abs($src_left - $dest_left);        $d2 = abs($src_right - $dest_left);        $d3 = abs($src_left - $dest_right);        $d4 = abs($src_right - $dest_right);        $d  = min($d1, $d2, $d3, $d4);        if ($d == $d1) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d2) {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d3) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        } else {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        }        $this->ySrc   = $src_pos[2];        $this->yDest = $dest_pos[2];    }    /**     * Gets arrows coordinates     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Arrows coordinates     * @access private     */    function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // x_left, x_right, y        return array(            $table->x,            $table->x + $table->width,            $table->y + ($pos + 1.5) * $table->heightCell        );    }    /**     * draws relation links and arrows shows foreign key relations     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @global object The current Visio XML document     *     * @return void     * @access public     * @see PMA_VISIO     */    public function relationDraw($changeColor)    {        global $visio;        if ($changeColor) {            $listOfColors = array(                'red',                'grey',                'black',                'yellow',                'green',                'cyan',                'orange'            );            shuffle($listOfColors);            $color =  $listOfColors[0];        } else {            $color = 'black';        }        // code here for making connections b/w relation objects    }}/** end of the "Relation_Stats" class*//** * Visio Relation Schema Class * * Purpose of this class is to generate the Visio XML .VDX Document which is used * for representing the database diagrams in any version of MS Visio IDE. * This class uses Software and Database Template and Database model diagram of * Visio and with the combination of these objects actually helps in preparing * Visio XML .VDX document. * * Visio XML is generated by using XMLWriter php extension and this class * inherits Export_Relation_Schema class has common functionality added * to this class * * @name Visio_Relation_Schema */class PMA_Visio_Relation_Schema extends PMA_Export_Relation_Schema{    /**     * The "PMA_Visio_Relation_Schema" constructor     *     * Upon instantiation This outputs the Visio XML document     * that user can download     *     * @return void     * @see PMA_VISIO,Table_Stats,Relation_Stats     */    function __construct()    {        global $visio,$db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowGrid(isset($_POST['show_grid']));        $this->setShowColor($_POST['show_color']);        $this->setShowKeys(isset($_POST['show_keys']));        $this->setOrientation(isset($_POST['orientation']));        $this->setPaper($_POST['paper']);        $this->setExportType($_POST['export_type']);        $visio = new PMA_VISIO();        $visio->setTitle(sprintf(__('Schema of the %s database - Page %s'), $db, $this->pageNumber));        $visio->SetAuthor('phpMyAdmin ' . PMA_VERSION);        $visio->startVisioDoc();        $alltables = $this->getAllTables($db, $this->pageNumber);        foreach ($alltables as $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats($table, $this->pageNumber, $this->showKeys);            }        }        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    /* put the foreign table on the schema only if selected                    * by the user                    * (do not use array_search() because we would have to                    * to do a === false and this is not PHP3 compatible)                    */                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table,                            $master_field,                            $rel['foreign_table'],                            $rel['foreign_field'],                            $this->showKeys                        );                    }                }            }        }        $this->_drawTables($this->showColor);        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $visio->endVisioDoc();        $visio->showOutput($db.'-'.$this->pageNumber);        exit();    }    /**     * Defines relation objects     *     * @param string  $masterTable  The master table name     * @param string  $masterField  The relation field in the master table     * @param string  $foreignTable The foreign table name     * @param string  $foreignField The relation field in the foreign table     * @param boolean $showKeys     Whether to display keys or not     *     * @return void     * @access private     * @see Table_Stats::__construct(), Relation_Stats::__construct()     */    private function _addRelation($masterTable, $masterField, $foreignTable, $foreignField, $showKeys)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $this->pageNumber, $showKeys            );        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $this->pageNumber, $showKeys            );        }        $this->_relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws relation references     * connects master table's master field to foreign table's forein field.     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @return void     * @access private     * @see Relation_Stats::relationDraw()     */    private function _drawRelations($changeColor)    {        foreach ($this->_relations as $relation) {            $relation->relationDraw($changeColor);        }    }    /**     * Draws tables     *     * @param boolean $changeColor Whether to show color for tables text or not     *     * @return void     * @access private     * @see Table_Stats::tableDraw()     */    private function _drawTables($changeColor)    {        foreach ($this->tables as $table) {            $table->tableDraw($changeColor);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'server_privileges.js';$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';$_add_user_error = false;require './libraries/server_common.inc.php';if ($GLOBALS['cfg']['AjaxEnable']) {    $conditional_class = 'ajax';} else {    $conditional_class = '';}/** * Messages are built using the message name */$strPrivDescAllPrivileges = __('Includes all privileges except GRANT.');$strPrivDescAlter = __('Allows altering the structure of existing tables.');$strPrivDescAlterRoutine = __('Allows altering and dropping stored routines.');$strPrivDescCreateDb = __('Allows creating new databases and tables.');$strPrivDescCreateRoutine = __('Allows creating stored routines.');$strPrivDescCreateTbl = __('Allows creating new tables.');$strPrivDescCreateTmpTable = __('Allows creating temporary tables.');$strPrivDescCreateUser = __('Allows creating, dropping and renaming user accounts.');$strPrivDescCreateView = __('Allows creating new views.');$strPrivDescDelete = __('Allows deleting data.');$strPrivDescDropDb = __('Allows dropping databases and tables.');$strPrivDescDropTbl = __('Allows dropping tables.');$strPrivDescEvent = __('Allows to set up events for the event scheduler');$strPrivDescExecute = __('Allows executing stored routines.');$strPrivDescFile = __('Allows importing data from and exporting data into files.');$strPrivDescGrant = __('Allows adding users and privileges without reloading the privilege tables.');$strPrivDescIndex = __('Allows creating and dropping indexes.');$strPrivDescInsert = __('Allows inserting and replacing data.');$strPrivDescLockTables = __('Allows locking tables for the current thread.');$strPrivDescMaxConnections = __('Limits the number of new connections the user may open per hour.');$strPrivDescMaxQuestions = __('Limits the number of queries the user may send to the server per hour.');$strPrivDescMaxUpdates = __('Limits the number of commands that change any table or database the user may execute per hour.');$strPrivDescMaxUserConnections = __('Limits the number of simultaneous connections the user may have.');$strPrivDescProcess = __('Allows viewing processes of all users');$strPrivDescReferences = __('Has no effect in this MySQL version.');$strPrivDescReload = __('Allows reloading server settings and flushing the server\'s caches.');$strPrivDescReplClient = __('Allows the user to ask where the slaves / masters are.');$strPrivDescReplSlave = __('Needed for the replication slaves.');$strPrivDescSelect = __('Allows reading data.');$strPrivDescShowDb = __('Gives access to the complete list of databases.');$strPrivDescShowView = __('Allows performing SHOW CREATE VIEW queries.');$strPrivDescShutdown = __('Allows shutting down the server.');$strPrivDescSuper = __('Allows connecting, even if maximum number of connections is reached; required for most administrative operations like setting global variables or killing threads of other users.');$strPrivDescTrigger = __('Allows creating and dropping triggers');$strPrivDescUpdate = __('Allows changing data.');$strPrivDescUsage = __('No privileges.');/** * Checks if a dropdown box has been used for selecting a database / table */if (PMA_isValid($_REQUEST['pred_tablename'])) {    $tablename = $_REQUEST['pred_tablename'];    unset($pred_tablename);} elseif (PMA_isValid($_REQUEST['tablename'])) {    $tablename = $_REQUEST['tablename'];} else {    unset($tablename);}if (PMA_isValid($_REQUEST['pred_dbname'])) {    $dbname = $_REQUEST['pred_dbname'];    unset($pred_dbname);} elseif (PMA_isValid($_REQUEST['dbname'])) {    $dbname = $_REQUEST['dbname'];} else {    unset($dbname);    unset($tablename);}if (isset($dbname)) {    $db_and_table = PMA_backquote(PMA_unescape_mysql_wildcards($dbname)) . '.';    if (isset($tablename)) {        $db_and_table .= PMA_backquote($tablename);    } else {        $db_and_table .= '*';    }} else {    $db_and_table = '*.*';}// check if given $dbname is a wildcard or notif (isset($dbname)) {    //if (preg_match('/\\\\(?:_|%)/i', $dbname)) {    if (preg_match('/(?<!\\\\)(?:_|%)/i', $dbname)) {        $dbname_is_wildcard = true;    } else {        $dbname_is_wildcard = false;    }}/** * Checks if the user is allowed to do what he tries to... */if (! $is_superuser) {    include './libraries/server_links.inc.php';    echo '<h2>' . "\n"       . PMA_getIcon('b_usrlist.png')       . __('Privileges') . "\n"       . '</h2>' . "\n";    PMA_Message::error(__('No Privileges'))->display();    include './libraries/footer.inc.php';}$random_n = mt_rand(0, 1000000); // a random number that will be appended to the id of the user forms/** * Escapes wildcard in a database+table specification * before using it in a GRANT statement. * * Escaping a wildcard character in a GRANT is only accepted at the global * or database level, not at table level; this is why I remove * the escaping character. Internally, in mysql.tables_priv.Db there are * no escaping (for example test_db) but in mysql.db you'll see test\_db * for a db-specific privilege. * * @param string $dbname    Database name * @param string $tablename Table name * * @return string the escaped (if necessary) database.table */function PMA_wildcardEscapeForGrant($dbname, $tablename){    if (! strlen($dbname)) {        $db_and_table = '*.*';    } else {        if (strlen($tablename)) {            $db_and_table = PMA_backquote(PMA_unescape_mysql_wildcards($dbname)) . '.';            $db_and_table .= PMA_backquote($tablename);        } else {            $db_and_table = PMA_backquote($dbname) . '.';            $db_and_table .= '*';        }    }    return $db_and_table;}/** * Generates a condition on the user name * * @param string $initial the user's initial * * @return  string   the generated condition */function PMA_rangeOfUsers($initial = ''){    // strtolower() is used because the User field    // might be BINARY, so LIKE would be case sensitive    if (! empty($initial)) {        $ret = " WHERE `User` LIKE '" . PMA_sqlAddSlashes($initial, true) . "%'"            . " OR `User` LIKE '" . PMA_sqlAddSlashes(strtolower($initial), true) . "%'";    } else {        $ret = '';    }    return $ret;} // end function/** * Extracts the privilege information of a priv table row * * @param array   $row        the row * @param boolean $enableHTML add <dfn> tag with tooltips * * @global  resource $user_link the database connection * * @return  array */function PMA_extractPrivInfo($row = '', $enableHTML = false){    $grants = array(        array(            'Select_priv',            'SELECT',            __('Allows reading data.')),        array(            'Insert_priv',            'INSERT',            __('Allows inserting and replacing data.')),        array(            'Update_priv',            'UPDATE',            __('Allows changing data.')),        array(            'Delete_priv',            'DELETE',            __('Allows deleting data.')),        array(            'Create_priv',            'CREATE',            __('Allows creating new databases and tables.')),        array(            'Drop_priv',            'DROP',            __('Allows dropping databases and tables.')),        array(            'Reload_priv',            'RELOAD',            __('Allows reloading server settings and flushing the server\'s caches.')),        array(            'Shutdown_priv',            'SHUTDOWN',            __('Allows shutting down the server.')),        array(            'Process_priv',            'PROCESS',            __('Allows viewing processes of all users')),        array(            'File_priv',            'FILE',            __('Allows importing data from and exporting data into files.')),        array(            'References_priv',            'REFERENCES',            __('Has no effect in this MySQL version.')),        array(            'Index_priv',            'INDEX',            __('Allows creating and dropping indexes.')),        array(            'Alter_priv',            'ALTER',            __('Allows altering the structure of existing tables.')),        array(            'Show_db_priv',            'SHOW DATABASES',            __('Gives access to the complete list of databases.')),        array(            'Super_priv',            'SUPER',            __('Allows connecting, even if maximum number of connections is reached; required for most administrative operations like setting global variables or killing threads of other users.')),        array(            'Create_tmp_table_priv',            'CREATE TEMPORARY TABLES',            __('Allows creating temporary tables.')),        array(            'Lock_tables_priv',            'LOCK TABLES',            __('Allows locking tables for the current thread.')),        array(            'Repl_slave_priv',            'REPLICATION SLAVE',            __('Needed for the replication slaves.')),        array(            'Repl_client_priv',            'REPLICATION CLIENT',            __('Allows the user to ask where the slaves / masters are.')),        array(            'Create_view_priv',            'CREATE VIEW',            __('Allows creating new views.')),        array(            'Event_priv',            'EVENT',            __('Allows to set up events for the event scheduler')),        array(            'Trigger_priv',            'TRIGGER',            __('Allows creating and dropping triggers')),        // for table privs:        array(            'Create View_priv',            'CREATE VIEW',            __('Allows creating new views.')),        array(            'Show_view_priv',            'SHOW VIEW',            __('Allows performing SHOW CREATE VIEW queries.')),        // for table privs:        array(            'Show view_priv',            'SHOW VIEW',            __('Allows performing SHOW CREATE VIEW queries.')),        array(            'Create_routine_priv',            'CREATE ROUTINE',            __('Allows creating stored routines.')),        array(            'Alter_routine_priv',            'ALTER ROUTINE',            __('Allows altering and dropping stored routines.')),        array(            'Create_user_priv',            'CREATE USER',            __('Allows creating, dropping and renaming user accounts.')),        array(            'Execute_priv',            'EXECUTE',            __('Allows executing stored routines.')),    );    if (! empty($row) && isset($row['Table_priv'])) {        $row1 = PMA_DBI_fetch_single_row(            'SHOW COLUMNS FROM `mysql`.`tables_priv` LIKE \'Table_priv\';',            'ASSOC', $GLOBALS['userlink']        );        $av_grants = explode('\',\'', substr($row1['Type'], 5, strlen($row1['Type']) - 7));        unset($row1);        $users_grants = explode(',', $row['Table_priv']);        foreach ($av_grants as $current_grant) {            $row[$current_grant . '_priv'] = in_array($current_grant, $users_grants) ? 'Y' : 'N';        }        unset($current_grant);        unset($av_grants);        unset($users_grants);    }    $privs = array();    $allPrivileges = true;    foreach ($grants as $current_grant) {        if ((! empty($row) && isset($row[$current_grant[0]]))            || (empty($row) && isset($GLOBALS[$current_grant[0]]))        ) {            if ((! empty($row) && $row[$current_grant[0]] == 'Y')                || (empty($row)                && ($GLOBALS[$current_grant[0]] == 'Y'                || (is_array($GLOBALS[$current_grant[0]])                && count($GLOBALS[$current_grant[0]]) == $GLOBALS['column_count']                && empty($GLOBALS[$current_grant[0] . '_none']))))            ) {                if ($enableHTML) {                    $privs[] = '<dfn title="' . $current_grant[2] . '">' . $current_grant[1] . '</dfn>';                } else {                    $privs[] = $current_grant[1];                }            } elseif (! empty($GLOBALS[$current_grant[0]])             && is_array($GLOBALS[$current_grant[0]])             && empty($GLOBALS[$current_grant[0] . '_none'])) {                if ($enableHTML) {                    $priv_string = '<dfn title="' . $current_grant[2] . '">' . $current_grant[1] . '</dfn>';                } else {                    $priv_string = $current_grant[1];                }                $privs[] = $priv_string . ' (`' . join('`, `', $GLOBALS[$current_grant[0]]) . '`)';            } else {                $allPrivileges = false;            }        }    }    if (empty($privs)) {        if ($enableHTML) {            $privs[] = '<dfn title="' . __('No privileges.') . '">USAGE</dfn>';        } else {            $privs[] = 'USAGE';        }    } elseif ($allPrivileges && (! isset($GLOBALS['grant_count']) || count($privs) == $GLOBALS['grant_count'])) {        if ($enableHTML) {            $privs = array('<dfn title="' . __('Includes all privileges except GRANT.') . '">ALL PRIVILEGES</dfn>');        } else {            $privs = array('ALL PRIVILEGES');        }    }    return $privs;} // end of the 'PMA_extractPrivInfo()' function/** * Displays on which column(s) a table-specific privilege is granted */function PMA_display_column_privs($columns, $row, $name_for_select,    $priv_for_header, $name, $name_for_dfn, $name_for_current){    echo '    <div class="item" id="div_item_' . $name . '">' . "\n"       . '        <label for="select_' . $name . '_priv">' . "\n"       . '            <tt><dfn title="' . $name_for_dfn . '">'        . $priv_for_header . '</dfn></tt>' . "\n"       . '        </label><br />' . "\n"       . '        <select id="select_' . $name . '_priv" name="'        . $name_for_select . '[]" multiple="multiple" size="8">' . "\n";    foreach ($columns as $current_column => $current_column_privileges) {        echo '            <option value="' . htmlspecialchars($current_column) . '"';        if ($row[$name_for_select] == 'Y' || $current_column_privileges[$name_for_current]) {            echo ' selected="selected"';        }        echo '>' . htmlspecialchars($current_column) . '</option>' . "\n";    }    echo '        </select>' . "\n"       . '        <i>' . __('Or') . '</i>' . "\n"       . '        <label for="checkbox_' . $name_for_select        . '_none"><input type="checkbox"'        . (empty($GLOBALS['checkall']) ?  '' : ' checked="checked"')        . ' name="' . $name_for_select . '_none" id="checkbox_'        . $name_for_select . '_none" title="' . _pgettext('None privileges', 'None') . '" />'        . _pgettext('None privileges', 'None') . '</label>' . "\n"       . '    </div>' . "\n";} // end function/** * Displays the privileges form table * * @param string  $db     the database * @param string  $table  the table * @param boolean $submit wheather to display the submit button or not * * @global  array      $cfg         the phpMyAdmin configuration * @global  ressource  $user_link   the database connection * * @return  void */function PMA_displayPrivTable($db = '*', $table = '*', $submit = true){    global $random_n;    if ($db == '*') {        $table = '*';    }    if (isset($GLOBALS['username'])) {        $username = $GLOBALS['username'];        $hostname = $GLOBALS['hostname'];        if ($db == '*') {            $sql_query = "SELECT * FROM `mysql`.`user`"                ." WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"                ." AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "';";        } elseif ($table == '*') {            $sql_query = "SELECT * FROM `mysql`.`db`"                ." WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"                ." AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "'"                ." AND '" . PMA_unescape_mysql_wildcards($db) . "'"                ." LIKE `Db`;";        } else {            $sql_query = "SELECT `Table_priv`"                ." FROM `mysql`.`tables_priv`"                ." WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"                ." AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "'"                ." AND `Db` = '" . PMA_unescape_mysql_wildcards($db) . "'"                ." AND `Table_name` = '" . PMA_sqlAddSlashes($table) . "';";        }        $row = PMA_DBI_fetch_single_row($sql_query);    }    if (empty($row)) {        if ($table == '*') {            if ($db == '*') {                $sql_query = 'SHOW COLUMNS FROM `mysql`.`user`;';            } elseif ($table == '*') {                $sql_query = 'SHOW COLUMNS FROM `mysql`.`db`;';            }            $res = PMA_DBI_query($sql_query);            while ($row1 = PMA_DBI_fetch_row($res)) {                if (substr($row1[0], 0, 4) == 'max_') {                    $row[$row1[0]] = 0;                } else {                    $row[$row1[0]] = 'N';                }            }            PMA_DBI_free_result($res);        } else {            $row = array('Table_priv' => '');        }    }    if (isset($row['Table_priv'])) {        $row1 = PMA_DBI_fetch_single_row(            'SHOW COLUMNS FROM `mysql`.`tables_priv` LIKE \'Table_priv\';',            'ASSOC', $GLOBALS['userlink']        );        // note: in MySQL 5.0.3 we get "Create View', 'Show view';        // the View for Create is spelled with uppercase V        // the view for Show is spelled with lowercase v        // and there is a space between the words        $av_grants = explode('\',\'', substr($row1['Type'], strpos($row1['Type'], '(') + 2, strpos($row1['Type'], ')') - strpos($row1['Type'], '(') - 3));        unset($row1);        $users_grants = explode(',', $row['Table_priv']);        foreach ($av_grants as $current_grant) {            $row[$current_grant . '_priv'] = in_array($current_grant, $users_grants) ? 'Y' : 'N';        }        unset($row['Table_priv'], $current_grant, $av_grants, $users_grants);        // get collumns        $res = PMA_DBI_try_query('SHOW COLUMNS FROM ' . PMA_backquote(PMA_unescape_mysql_wildcards($db)) . '.' . PMA_backquote($table) . ';');        $columns = array();        if ($res) {            while ($row1 = PMA_DBI_fetch_row($res)) {                $columns[$row1[0]] = array(                    'Select' => false,                    'Insert' => false,                    'Update' => false,                    'References' => false                );            }            PMA_DBI_free_result($res);        }        unset($res, $row1);    }    // t a b l e - s p e c i f i c    p r i v i l e g e s    if (! empty($columns)) {        $res = PMA_DBI_query(            'SELECT `Column_name`, `Column_priv`'            .' FROM `mysql`.`columns_priv`'            .' WHERE `User`'            .' = \'' . PMA_sqlAddSlashes($username) . "'"            .' AND `Host`'            .' = \'' . PMA_sqlAddSlashes($hostname) . "'"            .' AND `Db`'            .' = \'' . PMA_sqlAddSlashes(PMA_unescape_mysql_wildcards($db)) . "'"            .' AND `Table_name`'            .' = \'' . PMA_sqlAddSlashes($table) . '\';'        );        while ($row1 = PMA_DBI_fetch_row($res)) {            $row1[1] = explode(',', $row1[1]);            foreach ($row1[1] as $current) {                $columns[$row1[0]][$current] = true;            }        }        PMA_DBI_free_result($res);        unset($res, $row1, $current);        echo '<input type="hidden" name="grant_count" value="' . count($row) . '" />' . "\n"           . '<input type="hidden" name="column_count" value="' . count($columns) . '" />' . "\n"           . '<fieldset id="fieldset_user_priv">' . "\n"           . '    <legend>' . __('Table-specific privileges')           . PMA_showHint(__('Note: MySQL privilege names are expressed in English'))           . '</legend>' . "\n";        // privs that are attached to a specific column        PMA_display_column_privs(            $columns, $row, 'Select_priv', 'SELECT',            'select', __('Allows reading data.'), 'Select'        );        PMA_display_column_privs(            $columns, $row, 'Insert_priv', 'INSERT',            'insert', __('Allows inserting and replacing data.'), 'Insert'        );        PMA_display_column_privs(            $columns, $row, 'Update_priv', 'UPDATE',            'update', __('Allows changing data.'), 'Update'        );        PMA_display_column_privs(            $columns, $row, 'References_priv', 'REFERENCES', 'references',            __('Has no effect in this MySQL version.'), 'References'        );        // privs that are not attached to a specific column        echo '    <div class="item">' . "\n";        foreach ($row as $current_grant => $current_grant_value) {            if (in_array(substr($current_grant, 0, (strlen($current_grant) - 5)),                    array('Select', 'Insert', 'Update', 'References'))) {                continue;            }            // make a substitution to match the messages variables;            // also we must substitute the grant we get, because we can't generate            // a form variable containing blanks (those would get changed to            // an underscore when receiving the POST)            if ($current_grant == 'Create View_priv') {                $tmp_current_grant = 'CreateView_priv';                $current_grant = 'Create_view_priv';            } elseif ($current_grant == 'Show view_priv') {                $tmp_current_grant = 'ShowView_priv';                $current_grant = 'Show_view_priv';            } else {                $tmp_current_grant = $current_grant;            }            echo '        <div class="item">' . "\n"               . '            <input type="checkbox"'               . (empty($GLOBALS['checkall']) ?  '' : ' checked="checked"')               . ' name="' . $current_grant . '" id="checkbox_' . $current_grant               . '" value="Y" '               . ($current_grant_value == 'Y' ? 'checked="checked" ' : '')               . 'title="';            echo (isset($GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5))])                ? $GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5))]                : $GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5)) . 'Tbl']) . '"/>' . "\n";            echo '            <label for="checkbox_' . $current_grant                . '"><tt><dfn title="'                . (isset($GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5))])                    ? $GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5))]                    : $GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5)) . 'Tbl'])               . '">' . strtoupper(substr($current_grant, 0, strlen($current_grant) - 5)) . '</dfn></tt></label>' . "\n"               . '        </div>' . "\n";        } // end foreach ()        echo '    </div>' . "\n";        // for Safari 2.0.2        echo '    <div class="clearfloat"></div>' . "\n";    } else {        // g l o b a l    o r    d b - s p e c i f i c        //        $privTable_names = array(0 => __('Data'), 1 => __('Structure'), 2 => __('Administration'));        // d a t a        $privTable[0] = array(            array('Select', 'SELECT', __('Allows reading data.')),            array('Insert', 'INSERT', __('Allows inserting and replacing data.')),            array('Update', 'UPDATE', __('Allows changing data.')),            array('Delete', 'DELETE', __('Allows deleting data.'))        );        if ($db == '*') {            $privTable[0][] = array('File', 'FILE', __('Allows importing data from and exporting data into files.'));        }        // s t r u c t u r e        $privTable[1] = array(            array('Create', 'CREATE', ($table == '*' ? __('Allows creating new databases and tables.') : __('Allows creating new tables.'))),            array('Alter', 'ALTER', __('Allows altering the structure of existing tables.')),            array('Index', 'INDEX', __('Allows creating and dropping indexes.')),            array('Drop', 'DROP', ($table == '*' ? __('Allows dropping databases and tables.') : __('Allows dropping tables.'))),            array('Create_tmp_table', 'CREATE TEMPORARY TABLES', __('Allows creating temporary tables.')),            array('Show_view', 'SHOW VIEW', __('Allows performing SHOW CREATE VIEW queries.')),            array('Create_routine', 'CREATE ROUTINE', __('Allows creating stored routines.')),            array('Alter_routine', 'ALTER ROUTINE', __('Allows altering and dropping stored routines.')),            array('Execute', 'EXECUTE', __('Allows executing stored routines.')),        );        // this one is for a db-specific priv: Create_view_priv        if (isset($row['Create_view_priv'])) {            $privTable[1][] = array('Create_view', 'CREATE VIEW', __('Allows creating new views.'));        }        // this one is for a table-specific priv: Create View_priv        if (isset($row['Create View_priv'])) {            $privTable[1][] = array('Create View', 'CREATE VIEW', __('Allows creating new views.'));        }        if (isset($row['Event_priv'])) {            // MySQL 5.1.6            $privTable[1][] = array('Event', 'EVENT', __('Allows to set up events for the event scheduler'));            $privTable[1][] = array('Trigger', 'TRIGGER', __('Allows creating and dropping triggers'));        }        // a d m i n i s t r a t i o n        $privTable[2] = array(            array('Grant', 'GRANT', __('Allows adding users and privileges without reloading the privilege tables.')),        );        if ($db == '*') {            $privTable[2][] = array('Super', 'SUPER', __('Allows connecting, even if maximum number of connections is reached; required for most administrative operations like setting global variables or killing threads of other users.'));            $privTable[2][] = array('Process', 'PROCESS', __('Allows viewing processes of all users'));            $privTable[2][] = array('Reload', 'RELOAD', __('Allows reloading server settings and flushing the server\'s caches.'));            $privTable[2][] = array('Shutdown', 'SHUTDOWN', __('Allows shutting down the server.'));            $privTable[2][] = array('Show_db', 'SHOW DATABASES', __('Gives access to the complete list of databases.'));        }        $privTable[2][] = array('Lock_tables', 'LOCK TABLES', __('Allows locking tables for the current thread.'));        $privTable[2][] = array('References', 'REFERENCES', __('Has no effect in this MySQL version.'));        if ($db == '*') {            $privTable[2][] = array('Repl_client', 'REPLICATION CLIENT', __('Allows the user to ask where the slaves / masters are.'));            $privTable[2][] = array('Repl_slave', 'REPLICATION SLAVE', __('Needed for the replication slaves.'));            $privTable[2][] = array('Create_user', 'CREATE USER', __('Allows creating, dropping and renaming user accounts.'));        }        echo '<input type="hidden" name="grant_count" value="'            . (count($privTable[0]) + count($privTable[1]) + count($privTable[2]) - (isset($row['Grant_priv']) ? 1 : 0))            . '" />' . "\n"           . '<fieldset id="fieldset_user_global_rights">' . "\n"           . '    <legend>' . "\n"           . '        '            . ($db == '*'                ? __('Global privileges')                : ($table == '*'                    ? __('Database-specific privileges')                    : __('Table-specific privileges'))) . "\n"           . '        (<a href="server_privileges.php?'            . $GLOBALS['url_query'] . '&amp;checkall=1" onclick="setCheckboxes(\'addUsersForm_' . $random_n . '\', true); return false;">'            . __('Check All') . '</a> /' . "\n"           . '        <a href="server_privileges.php?'            . $GLOBALS['url_query'] . '" onclick="setCheckboxes(\'addUsersForm_' . $random_n . '\', false); return false;">'            . __('Uncheck All') . '</a>)' . "\n"           . '    </legend>' . "\n"           . '    <p><small><i>' . __('Note: MySQL privilege names are expressed in English') . '</i></small></p>' . "\n";        // Output the Global privilege tables with checkboxes        foreach ($privTable as $i => $table) {            echo '    <fieldset>' . "\n"                . '        <legend>' . __($privTable_names[$i]) . '</legend>' . "\n";            foreach ($table as $priv) {                echo '        <div class="item">' . "\n"                    . '            <input type="checkbox"'                    .                   ' name="' . $priv[0] . '_priv" id="checkbox_' . $priv[0] . '_priv"'                    .                   ' value="Y" title="' . $priv[2] . '"'                    .                   ((! empty($GLOBALS['checkall']) || $row[$priv[0] . '_priv'] == 'Y') ?  ' checked="checked"' : '')                    .               '/>' . "\n"                    . '            <label for="checkbox_' . $priv[0] . '_priv"><tt><dfn title="' . $priv[2] . '">'                    .                    $priv[1] . '</dfn></tt></label>' . "\n"                    . '        </div>' . "\n";            }            echo '    </fieldset>' . "\n";        }        // The "Resource limits" box is not displayed for db-specific privs        if ($db == '*') {            echo '    <fieldset>' . "\n"               . '        <legend>' . __('Resource limits') . '</legend>' . "\n"               . '        <p><small><i>' . __('Note: Setting these options to 0 (zero) removes the limit.') . '</i></small></p>' . "\n"               . '        <div class="item">' . "\n"               . '            <label for="text_max_questions"><tt><dfn title="'                . __('Limits the number of queries the user may send to the server per hour.') . '">MAX QUERIES PER HOUR</dfn></tt></label>' . "\n"               . '            <input type="text" name="max_questions" id="text_max_questions" value="'                . $row['max_questions'] . '" size="11" maxlength="11" title="' . __('Limits the number of queries the user may send to the server per hour.') . '" />' . "\n"               . '        </div>' . "\n"               . '        <div class="item">' . "\n"               . '            <label for="text_max_updates"><tt><dfn title="'                . __('Limits the number of commands that change any table or database the user may execute per hour.') . '">MAX UPDATES PER HOUR</dfn></tt></label>' . "\n"               . '            <input type="text" name="max_updates" id="text_max_updates" value="'                . $row['max_updates'] . '" size="11" maxlength="11" title="' . __('Limits the number of commands that change any table or database the user may execute per hour.') . '" />' . "\n"               . '        </div>' . "\n"               . '        <div class="item">' . "\n"               . '            <label for="text_max_connections"><tt><dfn title="'                . __('Limits the number of new connections the user may open per hour.') . '">MAX CONNECTIONS PER HOUR</dfn></tt></label>' . "\n"               . '            <input type="text" name="max_connections" id="text_max_connections" value="'                . $row['max_connections'] . '" size="11" maxlength="11" title="' . __('Limits the number of new connections the user may open per hour.') . '" />' . "\n"               . '        </div>' . "\n"               . '        <div class="item">' . "\n"               . '            <label for="text_max_user_connections"><tt><dfn title="'                . __('Limits the number of simultaneous connections the user may have.') . '">MAX USER_CONNECTIONS</dfn></tt></label>' . "\n"               . '            <input type="text" name="max_user_connections" id="text_max_user_connections" value="'                . $row['max_user_connections'] . '" size="11" maxlength="11" title="' . __('Limits the number of simultaneous connections the user may have.') . '" />' . "\n"               . '        </div>' . "\n"               . '    </fieldset>' . "\n";        }        // for Safari 2.0.2        echo '    <div class="clearfloat"></div>' . "\n";    }    echo '</fieldset>' . "\n";    if ($submit) {        echo '<fieldset id="fieldset_user_privtable_footer" class="tblFooters">' . "\n"           . '    <input type="submit" name="update_privs" value="' . __('Go') . '" />' . "\n"           . '</fieldset>' . "\n";    }} // end of the 'PMA_displayPrivTable()' function/** * Displays the fields used by the "new user" form as well as the * "change login information / copy user" form. * * @param string $mode are we creating a new user or are we just *                     changing  one? (allowed values: 'new', 'change') * * @global  array      $cfg     the phpMyAdmin configuration * @global  ressource  $user_link the database connection * * @return  void */function PMA_displayLoginInformationFields($mode = 'new'){    // Get user/host name lengths    $fields_info = PMA_DBI_get_columns('mysql', 'user', null, true);    $username_length = 16;    $hostname_length = 41;    foreach ($fields_info as $val) {        if ($val['Field'] == 'User') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $username_length = $v;            }        } elseif ($val['Field'] == 'Host') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $hostname_length = $v;            }        }    }    unset($fields_info);    if (isset($GLOBALS['username']) && strlen($GLOBALS['username']) === 0) {        $GLOBALS['pred_username'] = 'any';    }    echo '<fieldset id="fieldset_add_user_login">' . "\n"       . '<legend>' . __('Login Information') . '</legend>' . "\n"       . '<div class="item">' . "\n"       . '<label for="select_pred_username">' . "\n"       . '    ' . __('User name') . ':' . "\n"       . '</label>' . "\n"       . '<span class="options">' . "\n"       . '    <select name="pred_username" id="select_pred_username" title="' . __('User name') . '"' . "\n"       . '        onchange="if (this.value == \'any\') { username.value = \'\'; } else if (this.value == \'userdefined\') { username.focus(); username.select(); }">' . "\n"       . '        <option value="any"' . ((isset($GLOBALS['pred_username']) && $GLOBALS['pred_username'] == 'any') ? ' selected="selected"' : '') . '>' . __('Any user') . '</option>' . "\n"       . '        <option value="userdefined"' . ((! isset($GLOBALS['pred_username']) || $GLOBALS['pred_username'] == 'userdefined') ? ' selected="selected"' : '') . '>' . __('Use text field') . ':</option>' . "\n"       . '    </select>' . "\n"       . '</span>' . "\n"       . '<input type="text" name="username" maxlength="'        . $username_length . '" title="' . __('User name') . '"'        . (empty($GLOBALS['username'])            ? ''            : ' value="' . htmlspecialchars(isset($GLOBALS['new_username'])                ? $GLOBALS['new_username']                : $GLOBALS['username']) . '"')        . ' onchange="pred_username.value = \'userdefined\';" />' . "\n"       . '</div>' . "\n"       . '<div class="item">' . "\n"       . '<label for="select_pred_hostname">' . "\n"       . '    ' . __('Host') . ':' . "\n"       . '</label>' . "\n"       . '<span class="options">' . "\n"       . '    <select name="pred_hostname" id="select_pred_hostname" title="' . __('Host') . '"' . "\n";    $_current_user = PMA_DBI_fetch_value('SELECT USER();');    if (! empty($_current_user)) {        $thishost = str_replace("'", '', substr($_current_user, (strrpos($_current_user, '@') + 1)));        if ($thishost == 'localhost' || $thishost == '127.0.0.1') {            unset($thishost);        }    }    echo '    onchange="if (this.value == \'any\') { hostname.value = \'%\'; } else if (this.value == \'localhost\') { hostname.value = \'localhost\'; } '       . (empty($thishost) ? '' : 'else if (this.value == \'thishost\') { hostname.value = \'' . addslashes(htmlspecialchars($thishost)) . '\'; } ')       . 'else if (this.value == \'hosttable\') { hostname.value = \'\'; } else if (this.value == \'userdefined\') { hostname.focus(); hostname.select(); }">' . "\n";    unset($_current_user);    // when we start editing a user, $GLOBALS['pred_hostname'] is not defined    if (! isset($GLOBALS['pred_hostname']) && isset($GLOBALS['hostname'])) {        switch (strtolower($GLOBALS['hostname'])) {        case 'localhost':        case '127.0.0.1':            $GLOBALS['pred_hostname'] = 'localhost';            break;        case '%':            $GLOBALS['pred_hostname'] = 'any';            break;        default:            $GLOBALS['pred_hostname'] = 'userdefined';            break;        }    }    echo '        <option value="any"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'any')            ? ' selected="selected"' : '') . '>' . __('Any host')        . '</option>' . "\n"       . '        <option value="localhost"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'localhost')            ? ' selected="selected"' : '') . '>' . __('Local')        . '</option>' . "\n";    if (! empty($thishost)) {        echo '        <option value="thishost"'            . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'thishost')                ? ' selected="selected"' : '') . '>' . __('This Host')            . '</option>' . "\n";    }    unset($thishost);    echo '        <option value="hosttable"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'hosttable')            ? ' selected="selected"' : '') . '>' . __('Use Host Table')        . '</option>' . "\n"       . '        <option value="userdefined"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'userdefined')            ? ' selected="selected"' : '')        . '>' . __('Use text field') . ':</option>' . "\n"       . '    </select>' . "\n"       . '</span>' . "\n"       . '<input type="text" name="hostname" maxlength="'        . $hostname_length . '" value="'        . htmlspecialchars(isset($GLOBALS['hostname']) ? $GLOBALS['hostname'] : '')        . '" title="' . __('Host')        . '" onchange="pred_hostname.value = \'userdefined\';" />' . "\n"       . PMA_showHint(__('When Host table is used, this field is ignored and values stored in Host table are used instead.'))       . '</div>' . "\n"       . '<div class="item">' . "\n"       . '<label for="select_pred_password">' . "\n"       . '    ' . __('Password') . ':' . "\n"       . '</label>' . "\n"       . '<span class="options">' . "\n"       . '    <select name="pred_password" id="select_pred_password" title="'        . __('Password') . '"' . "\n"       . '            onchange="if (this.value == \'none\') { pma_pw.value = \'\'; pma_pw2.value = \'\'; } else if (this.value == \'userdefined\') { pma_pw.focus(); pma_pw.select(); }">' . "\n"       . ($mode == 'change' ? '            <option value="keep" selected="selected">' . __('Do not change the password') . '</option>' . "\n" : '')       . '        <option value="none"';    if (isset($GLOBALS['username']) && $mode != 'change') {        echo '  selected="selected"';    }    echo '>' . __('No Password') . '</option>' . "\n"       . '        <option value="userdefined"' . (isset($GLOBALS['username']) ? '' : ' selected="selected"') . '>' . __('Use text field') . ':</option>' . "\n"       . '    </select>' . "\n"       . '</span>' . "\n"       . '<input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" onchange="pred_password.value = \'userdefined\';" />' . "\n"       . '</div>' . "\n"       . '<div class="item" id="div_element_before_generate_password">' . "\n"       . '<label for="text_pma_pw2">' . "\n"       . '    ' . __('Re-type') . ':' . "\n"       . '</label>' . "\n"       . '<span class="options">&nbsp;</span>' . "\n"       . '<input type="password" name="pma_pw2" id="text_pma_pw2" title="' . __('Re-type') . '" onchange="pred_password.value = \'userdefined\';" />' . "\n"       . '</div>' . "\n"       // Generate password added here via jQuery       . '</fieldset>' . "\n";} // end of the 'PMA_displayUserAndHostFields()' function/** * Changes / copies a user, part I */if (isset($_REQUEST['change_copy'])) {    $user_host_condition = ' WHERE `User`'        .' = \'' . PMA_sqlAddSlashes($old_username) . "'"        .' AND `Host`'        .' = \'' . PMA_sqlAddSlashes($old_hostname) . '\';';    $row = PMA_DBI_fetch_single_row('SELECT * FROM `mysql`.`user` ' . $user_host_condition);    if (! $row) {        PMA_Message::notice(__('No user found.'))->display();        unset($_REQUEST['change_copy']);    } else {        extract($row, EXTR_OVERWRITE);        // Recent MySQL versions have the field "Password" in mysql.user,        // so the previous extract creates $Password but this script        // uses $password        if (! isset($password) && isset($Password)) {            $password = $Password;        }        $queries = array();    }}/** * Adds a user *   (Changes / copies a user, part II) */if (isset($_REQUEST['adduser_submit']) || isset($_REQUEST['change_copy'])) {    $sql_query = '';    if ($pred_username == 'any') {        $username = '';    }    switch ($pred_hostname) {    case 'any':        $hostname = '%';        break;    case 'localhost':        $hostname = 'localhost';        break;    case 'hosttable':        $hostname = '';        break;    case 'thishost':        $_user_name = PMA_DBI_fetch_value('SELECT USER()');        $hostname = substr($_user_name, (strrpos($_user_name, '@') + 1));        unset($_user_name);        break;    }    $sql = "SELECT '1' FROM `mysql`.`user`"        . " WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"        . " AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "';";    if (PMA_DBI_fetch_value($sql) == 1) {        $message = PMA_Message::error(__('The user %s already exists!'));        $message->addParam('[i]\'' . $username . '\'@\'' . $hostname . '\'[/i]');        $_REQUEST['adduser'] = true;        $_add_user_error = true;    } else {        $create_user_real = 'CREATE USER \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\'';        $real_sql_query = 'GRANT ' . join(', ', PMA_extractPrivInfo()) . ' ON *.* TO \''            . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\'';        if ($pred_password != 'none' && $pred_password != 'keep') {            $sql_query = $real_sql_query . ' IDENTIFIED BY \'***\'';            $real_sql_query .= ' IDENTIFIED BY \'' . PMA_sqlAddSlashes($pma_pw) . '\'';            if (isset($create_user_real)) {                $create_user_show = $create_user_real . ' IDENTIFIED BY \'***\'';                $create_user_real .= ' IDENTIFIED BY \'' . PMA_sqlAddSlashes($pma_pw) . '\'';            }        } else {            if ($pred_password == 'keep' && ! empty($password)) {                $real_sql_query .= ' IDENTIFIED BY PASSWORD \'' . $password . '\'';                if (isset($create_user_real)) {                    $create_user_real .= ' IDENTIFIED BY PASSWORD \'' . $password . '\'';                }            }            $sql_query = $real_sql_query;            if (isset($create_user_real)) {                $create_user_show = $create_user_real;            }        }        /**         * @todo similar code appears twice in this script         */        if ((isset($Grant_priv) && $Grant_priv == 'Y')            || (isset($max_questions) || isset($max_connections)            || isset($max_updates) || isset($max_user_connections))        ) {            $real_sql_query .= ' WITH';            $sql_query .= ' WITH';            if (isset($Grant_priv) && $Grant_priv == 'Y') {                $real_sql_query .= ' GRANT OPTION';                $sql_query .= ' GRANT OPTION';            }            if (isset($max_questions)) {                // avoid negative values                $max_questions = max(0, (int)$max_questions);                $real_sql_query .= ' MAX_QUERIES_PER_HOUR ' . $max_questions;                $sql_query .= ' MAX_QUERIES_PER_HOUR ' . $max_questions;            }            if (isset($max_connections)) {                $max_connections = max(0, (int)$max_connections);                $real_sql_query .= ' MAX_CONNECTIONS_PER_HOUR ' . $max_connections;                $sql_query .= ' MAX_CONNECTIONS_PER_HOUR ' . $max_connections;            }            if (isset($max_updates)) {                $max_updates = max(0, (int)$max_updates);                $real_sql_query .= ' MAX_UPDATES_PER_HOUR ' . $max_updates;                $sql_query .= ' MAX_UPDATES_PER_HOUR ' . $max_updates;            }            if (isset($max_user_connections)) {                $max_user_connections = max(0, (int)$max_user_connections);                $real_sql_query .= ' MAX_USER_CONNECTIONS ' . $max_user_connections;                $sql_query .= ' MAX_USER_CONNECTIONS ' . $max_user_connections;            }        }        if (isset($create_user_real)) {            $create_user_real .= ';';            $create_user_show .= ';';        }        $real_sql_query .= ';';        $sql_query .= ';';        if (empty($_REQUEST['change_copy'])) {            $_error = false;            if (isset($create_user_real)) {                if (! PMA_DBI_try_query($create_user_real)) {                    $_error = true;                }                $sql_query = $create_user_show . $sql_query;            }            if ($_error || ! PMA_DBI_try_query($real_sql_query)) {                $_REQUEST['createdb'] = false;                $message = PMA_Message::rawError(PMA_DBI_getError());            } else {                $message = PMA_Message::success(__('You have added a new user.'));            }            switch (PMA_ifSetOr($_REQUEST['createdb'], '0')) {            case '1' :                // Create database with same name and grant all privileges                $q = 'CREATE DATABASE IF NOT EXISTS '                    . PMA_backquote(PMA_sqlAddSlashes($username)) . ';';                $sql_query .= $q;                if (! PMA_DBI_try_query($q)) {                    $message = PMA_Message::rawError(PMA_DBI_getError());                    break;                }                /**                 * If we are not in an Ajax request, we can't reload navigation now                 */                if ($GLOBALS['is_ajax_request'] != true) {                    // this is needed in case tracking is on:                    $GLOBALS['db'] = $username;                    $GLOBALS['reload'] = true;                    PMA_reloadNavigation();                }                $q = 'GRANT ALL PRIVILEGES ON '                    . PMA_backquote(PMA_sqlAddSlashes($username)) . '.* TO \''                    . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';                $sql_query .= $q;                if (! PMA_DBI_try_query($q)) {                    $message = PMA_Message::rawError(PMA_DBI_getError());                }                break;            case '2' :                // Grant all privileges on wildcard name (username\_%)                $q = 'GRANT ALL PRIVILEGES ON '                    . PMA_backquote(PMA_sqlAddSlashes($username) . '\_%') . '.* TO \''                    . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';                $sql_query .= $q;                if (! PMA_DBI_try_query($q)) {                    $message = PMA_Message::rawError(PMA_DBI_getError());                }                break;            case '3' :                // Grant all privileges on the specified database to the new user                $q = 'GRANT ALL PRIVILEGES ON '                . PMA_backquote(PMA_sqlAddSlashes($dbname)) . '.* TO \''                . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';                $sql_query .= $q;                if (! PMA_DBI_try_query($q)) {                    $message = PMA_Message::rawError(PMA_DBI_getError());                }                break;            case '0' :            default :                break;            }        } else {            if (isset($create_user_real)) {                $queries[]             = $create_user_real;            }            $queries[]             = $real_sql_query;            // we put the query containing the hidden password in            // $queries_for_display, at the same position occupied            // by the real query in $queries            $tmp_count = count($queries);            if (isset($create_user_real)) {                $queries_for_display[$tmp_count - 2] = $create_user_show;            }            $queries_for_display[$tmp_count - 1] = $sql_query;        }        unset($res, $real_sql_query);    }}/** * Changes / copies a user, part III */if (isset($_REQUEST['change_copy'])) {    $user_host_condition = ' WHERE `User`'        .' = \'' . PMA_sqlAddSlashes($old_username) . "'"        .' AND `Host`'        .' = \'' . PMA_sqlAddSlashes($old_hostname) . '\';';    $res = PMA_DBI_query('SELECT * FROM `mysql`.`db`' . $user_host_condition);    while ($row = PMA_DBI_fetch_assoc($res)) {        $queries[] = 'GRANT ' . join(', ', PMA_extractPrivInfo($row))            .' ON ' . PMA_backquote($row['Db']) . '.*'            .' TO \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\''            . ($row['Grant_priv'] == 'Y' ? ' WITH GRANT OPTION;' : ';');    }    PMA_DBI_free_result($res);    $res = PMA_DBI_query(        'SELECT `Db`, `Table_name`, `Table_priv` FROM `mysql`.`tables_priv`' . $user_host_condition,        $GLOBALS['userlink'],        PMA_DBI_QUERY_STORE    );    while ($row = PMA_DBI_fetch_assoc($res)) {        $res2 = PMA_DBI_QUERY(            'SELECT `Column_name`, `Column_priv`'            .' FROM `mysql`.`columns_priv`'            .' WHERE `User`'            .' = \'' . PMA_sqlAddSlashes($old_username) . "'"            .' AND `Host`'            .' = \'' . PMA_sqlAddSlashes($old_hostname) . '\''            .' AND `Db`'            .' = \'' . PMA_sqlAddSlashes($row['Db']) . "'"            .' AND `Table_name`'            .' = \'' . PMA_sqlAddSlashes($row['Table_name']) . "'"            .';',            null,            PMA_DBI_QUERY_STORE        );        $tmp_privs1 = PMA_extractPrivInfo($row);        $tmp_privs2 = array(            'Select' => array(),            'Insert' => array(),            'Update' => array(),            'References' => array()        );        while ($row2 = PMA_DBI_fetch_assoc($res2)) {            $tmp_array = explode(',', $row2['Column_priv']);            if (in_array('Select', $tmp_array)) {                $tmp_privs2['Select'][] = $row2['Column_name'];            }            if (in_array('Insert', $tmp_array)) {                $tmp_privs2['Insert'][] = $row2['Column_name'];            }            if (in_array('Update', $tmp_array)) {                $tmp_privs2['Update'][] = $row2['Column_name'];            }            if (in_array('References', $tmp_array)) {                $tmp_privs2['References'][] = $row2['Column_name'];            }            unset($tmp_array);        }        if (count($tmp_privs2['Select']) > 0 && ! in_array('SELECT', $tmp_privs1)) {            $tmp_privs1[] = 'SELECT (`' . join('`, `', $tmp_privs2['Select']) . '`)';        }        if (count($tmp_privs2['Insert']) > 0 && ! in_array('INSERT', $tmp_privs1)) {            $tmp_privs1[] = 'INSERT (`' . join('`, `', $tmp_privs2['Insert']) . '`)';        }        if (count($tmp_privs2['Update']) > 0 && ! in_array('UPDATE', $tmp_privs1)) {            $tmp_privs1[] = 'UPDATE (`' . join('`, `', $tmp_privs2['Update']) . '`)';        }        if (count($tmp_privs2['References']) > 0 && ! in_array('REFERENCES', $tmp_privs1)) {            $tmp_privs1[] = 'REFERENCES (`' . join('`, `', $tmp_privs2['References']) . '`)';        }        unset($tmp_privs2);        $queries[] = 'GRANT ' . join(', ', $tmp_privs1)            . ' ON ' . PMA_backquote($row['Db']) . '.' . PMA_backquote($row['Table_name'])            . ' TO \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\''            . (in_array('Grant', explode(',', $row['Table_priv'])) ? ' WITH GRANT OPTION;' : ';');    }}/** * Updates privileges */if (! empty($update_privs)) {    $db_and_table = PMA_wildcardEscapeForGrant($dbname, (isset($tablename) ? $tablename : ''));    $sql_query0 = 'REVOKE ALL PRIVILEGES ON ' . $db_and_table        . ' FROM \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';    if (! isset($Grant_priv) || $Grant_priv != 'Y') {        $sql_query1 = 'REVOKE GRANT OPTION ON ' . $db_and_table            . ' FROM \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';    } else {        $sql_query1 = '';    }    // Should not do a GRANT USAGE for a table-specific privilege, it    // causes problems later (cannot revoke it)    if (! (isset($tablename) && 'USAGE' == implode('', PMA_extractPrivInfo()))) {        $sql_query2 = 'GRANT ' . join(', ', PMA_extractPrivInfo())            . ' ON ' . $db_and_table            . ' TO \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\'';        /**         * @todo similar code appears twice in this script         */        if ((isset($Grant_priv) && $Grant_priv == 'Y')            || (! isset($dbname)            && (isset($max_questions) || isset($max_connections)            || isset($max_updates) || isset($max_user_connections)))        ) {            $sql_query2 .= 'WITH';            if (isset($Grant_priv) && $Grant_priv == 'Y') {                $sql_query2 .= ' GRANT OPTION';            }            if (isset($max_questions)) {                $max_questions = max(0, (int)$max_questions);                $sql_query2 .= ' MAX_QUERIES_PER_HOUR ' . $max_questions;            }            if (isset($max_connections)) {                $max_connections = max(0, (int)$max_connections);                $sql_query2 .= ' MAX_CONNECTIONS_PER_HOUR ' . $max_connections;            }            if (isset($max_updates)) {                $max_updates = max(0, (int)$max_updates);                $sql_query2 .= ' MAX_UPDATES_PER_HOUR ' . $max_updates;            }            if (isset($max_user_connections)) {                $max_user_connections = max(0, (int)$max_user_connections);                $sql_query2 .= ' MAX_USER_CONNECTIONS ' . $max_user_connections;            }        }        $sql_query2 .= ';';    }    if (! PMA_DBI_try_query($sql_query0)) {        // This might fail when the executing user does not have ALL PRIVILEGES himself.        // See https://sourceforge.net/tracker/index.php?func=detail&aid=3285929&group_id=23067&atid=377408        $sql_query0 = '';    }    if (isset($sql_query1) && ! PMA_DBI_try_query($sql_query1)) {        // this one may fail, too...        $sql_query1 = '';    }    if (isset($sql_query2)) {        PMA_DBI_query($sql_query2);    } else {        $sql_query2 = '';    }    $sql_query = $sql_query0 . ' ' . $sql_query1 . ' ' . $sql_query2;    $message = PMA_Message::success(__('You have updated the privileges for %s.'));    $message->addParam('\'' . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname) . '\'');}/** * Revokes Privileges */if (isset($_REQUEST['revokeall'])) {    $db_and_table = PMA_wildcardEscapeForGrant($dbname, isset($tablename) ? $tablename : '');    $sql_query0 = 'REVOKE ALL PRIVILEGES ON ' . $db_and_table        . ' FROM \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';    $sql_query1 = 'REVOKE GRANT OPTION ON ' . $db_and_table        . ' FROM \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';    PMA_DBI_query($sql_query0);    if (! PMA_DBI_try_query($sql_query1)) {        // this one may fail, too...        $sql_query1 = '';    }    $sql_query = $sql_query0 . ' ' . $sql_query1;    $message = PMA_Message::success(__('You have revoked the privileges for %s'));    $message->addParam('\'' . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname) . '\'');    if (! isset($tablename)) {        unset($dbname);    } else {        unset($tablename);    }}/** * Updates the password */if (isset($_REQUEST['change_pw'])) {    // similar logic in user_password.php    $message = '';    if ($nopass == 0 && isset($pma_pw) && isset($pma_pw2)) {        if ($pma_pw != $pma_pw2) {            $message = PMA_Message::error(__('The passwords aren\'t the same!'));        } elseif (empty($pma_pw) || empty($pma_pw2)) {            $message = PMA_Message::error(__('The password is empty!'));        }    } // end if    // here $nopass could be == 1    if (empty($message)) {        $hashing_function = (! empty($pw_hash) && $pw_hash == 'old' ? 'OLD_' : '')                      . 'PASSWORD';        // in $sql_query which will be displayed, hide the password        $sql_query        = 'SET PASSWORD FOR \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\' = ' . (($pma_pw == '') ? '\'\'' : $hashing_function . '(\'' . preg_replace('@.@s', '*', $pma_pw) . '\')');        $local_query      = 'SET PASSWORD FOR \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\' = ' . (($pma_pw == '') ? '\'\'' : $hashing_function . '(\'' . PMA_sqlAddSlashes($pma_pw) . '\')');        PMA_DBI_try_query($local_query)            or PMA_mysqlDie(PMA_DBI_getError(), $sql_query, false, $err_url);        $message = PMA_Message::success(__('The password for %s was changed successfully.'));        $message->addParam('\'' . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname) . '\'');    }}/** * Deletes users *   (Changes / copies a user, part IV) */if (isset($_REQUEST['delete']) || (isset($_REQUEST['change_copy']) && $_REQUEST['mode'] < 4)) {    if (isset($_REQUEST['change_copy'])) {        $selected_usr = array($old_username . '&amp;#27;' . $old_hostname);    } else {        $selected_usr = $_REQUEST['selected_usr'];        $queries = array();    }    foreach ($selected_usr as $each_user) {        list($this_user, $this_host) = explode('&amp;#27;', $each_user);        $queries[] = '# ' . sprintf(__('Deleting %s'), '\'' . $this_user . '\'@\'' . $this_host . '\'') . ' ...';        $queries[] = 'DROP USER \'' . PMA_sqlAddSlashes($this_user) . '\'@\'' . PMA_sqlAddSlashes($this_host) . '\';';        if (isset($_REQUEST['drop_users_db'])) {            $queries[] = 'DROP DATABASE IF EXISTS ' . PMA_backquote($this_user) . ';';            $GLOBALS['reload'] = true;            if ($GLOBALS['is_ajax_request'] != true) {                PMA_reloadNavigation();            }        }    }    if (empty($_REQUEST['change_copy'])) {        if (empty($queries)) {            $message = PMA_Message::error(__('No users selected for deleting!'));        } else {            if ($_REQUEST['mode'] == 3) {                $queries[] = '# ' . __('Reloading the privileges') . ' ...';                $queries[] = 'FLUSH PRIVILEGES;';            }            $drop_user_error = '';            foreach ($queries as $sql_query) {                if ($sql_query{0} != '#') {                    if (! PMA_DBI_try_query($sql_query, $GLOBALS['userlink'])) {                        $drop_user_error .= PMA_DBI_getError() . "\n";                    }                }            }            // tracking sets this, causing the deleted db to be shown in navi            unset($GLOBALS['db']);            $sql_query = join("\n", $queries);            if (! empty($drop_user_error)) {                $message = PMA_Message::rawError($drop_user_error);            } else {                $message = PMA_Message::success(__('The selected users have been deleted successfully.'));            }        }        unset($queries);    }}/** * Changes / copies a user, part V */if (isset($_REQUEST['change_copy'])) {    $tmp_count = 0;    foreach ($queries as $sql_query) {        if ($sql_query{0} != '#') {            PMA_DBI_query($sql_query);        }        // when there is a query containing a hidden password, take it        // instead of the real query sent        if (isset($queries_for_display[$tmp_count])) {            $queries[$tmp_count] = $queries_for_display[$tmp_count];        }        $tmp_count++;    }    $message = PMA_Message::success();    $sql_query = join("\n", $queries);}/** * Reloads the privilege tables into memory */if (isset($_REQUEST['flush_privileges'])) {    $sql_query = 'FLUSH PRIVILEGES;';    PMA_DBI_query($sql_query);    $message = PMA_Message::success(__('The privileges were reloaded successfully.'));}/** * defines some standard links */$link_edit = '<a class="edit_user_anchor ' . $conditional_class . '" href="server_privileges.php?' . str_replace('%', '%%', $GLOBALS['url_query'])    . '&amp;username=%s'    . '&amp;hostname=%s'    . '&amp;dbname=%s'    . '&amp;tablename=%s">'    . PMA_getIcon('b_usredit.png', __('Edit Privileges'))    . '</a>';$link_revoke = '<a href="server_privileges.php?' . str_replace('%', '%%', $GLOBALS['url_query'])    . '&amp;username=%s'    . '&amp;hostname=%s'    . '&amp;dbname=%s'    . '&amp;tablename=%s'    . '&amp;revokeall=1">'    . PMA_getIcon('b_usrdrop.png', __('Revoke'))    . '</a>';$link_export = '<a class="export_user_anchor ' . $conditional_class . '" href="server_privileges.php?' . str_replace('%', '%%', $GLOBALS['url_query'])    . '&amp;username=%s'    . '&amp;hostname=%s'    . '&amp;initial=%s'    . '&amp;export=1">'    . PMA_getIcon('b_tblexport.png', __('Export'))    . '</a>';/** * If we are in an Ajax request for Create User/Edit User/Revoke User/ * Flush Privileges, show $message and exit. */if ($GLOBALS['is_ajax_request'] && ! isset($_REQUEST['export']) && (! isset($_REQUEST['adduser']) || $_add_user_error) && ! isset($_REQUEST['initial']) && ! isset($_REQUEST['showall']) && ! isset($_REQUEST['edit_user_dialog']) && ! isset($_REQUEST['db_specific'])) {    if (isset($sql_query)) {        $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);    }    if (isset($_REQUEST['adduser_submit']) || isset($_REQUEST['change_copy'])) {        /**         * generate html on the fly for the new user that was just created.         */        $new_user_string = '<tr>'."\n"                           .'<td> <input type="checkbox" name="selected_usr[]" id="checkbox_sel_users_" value="' . htmlspecialchars($username) . '&amp;#27;' . htmlspecialchars($hostname) . '" /> </td>' . "\n"                           .'<td><label for="checkbox_sel_users_">' . (empty($username) ? '<span style="color: #FF0000">' . __('Any') . '</span>' : htmlspecialchars($username) ) . '</label></td>' . "\n"                           .'<td>' . htmlspecialchars($hostname) . '</td>' . "\n";        $new_user_string .= '<td>';        if (! empty($password) || isset($pma_pw)) {            $new_user_string .= __('Yes');        } else {            $new_user_string .= '<span style="color: #FF0000">' . __('No') . '</span>';        };        $new_user_string .= '</td>'."\n";        $new_user_string .= '<td><tt>' . join(', ', PMA_extractPrivInfo('', true)) . '</tt></td>'; //Fill in privileges here        $new_user_string .= '<td>';        if ((isset($Grant_priv) && $Grant_priv == 'Y')) {            $new_user_string .= __('Yes');        } else {            $new_user_string .= __('No');        }        $new_user_string .='</td>';        $new_user_string .= '<td>' . sprintf($link_edit, urlencode($username), urlencode($hostname), '', '') . '</td>' . "\n";        $new_user_string .= '<td>' . sprintf($link_export, urlencode($username), urlencode($hostname), (isset($initial) ? $initial : '')) . '</td>' . "\n";        $new_user_string .= '</tr>';        $extra_data['new_user_string'] = $new_user_string;        /**         * Generate the string for this alphabet's initial, to update the user         * pagination         */        $new_user_initial = strtoupper(substr($username, 0, 1));        $new_user_initial_string = '<a href="server_privileges.php?' . $GLOBALS['url_query'] . '&initial=' . $new_user_initial            .'">' . $new_user_initial . '</a>';        $extra_data['new_user_initial'] = $new_user_initial;        $extra_data['new_user_initial_string'] = $new_user_initial_string;    }    if (isset($update_privs)) {        $extra_data['db_specific_privs'] = false;        if (isset($dbname_is_wildcard)) {            $extra_data['db_specific_privs'] = ! $dbname_is_wildcard;        }        $new_privileges = join(', ', PMA_extractPrivInfo('', true));        $extra_data['new_privileges'] = $new_privileges;    }    if ($message instanceof PMA_Message) {        PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);    }}/** * Displays the links */if (isset($viewing_mode) && $viewing_mode == 'db') {    $db = $checkprivs;    $url_query .= '&amp;goto=db_operations.php';    // Gets the database structure    $sub_part = '_structure';    include './libraries/db_info.inc.php';    echo "\n";} else {    include './libraries/server_links.inc.php';}/** * Displays the page */// export user definitionif (isset($_REQUEST['export'])) {    $title = __('User') . ' `' . htmlspecialchars($username) . '`@`' . htmlspecialchars($hostname) . '`';    $response = '<textarea cols="' . $GLOBALS['cfg']['TextareaCols'] . '" rows="' . $GLOBALS['cfg']['TextareaRows'] . '">';    $grants = PMA_DBI_fetch_result("SHOW GRANTS FOR '" . PMA_sqlAddSlashes($username) . "'@'" . PMA_sqlAddSlashes($hostname) . "'");    foreach ($grants as $one_grant) {        $response .= $one_grant . ";\n\n";    }    $response .= '</textarea>';    unset($username, $hostname, $grants, $one_grant);    if ($GLOBALS['is_ajax_request']) {        PMA_ajaxResponse($response, 1, array('title' => $title));    } else {        echo "<h2>$title</h2>$response";    }}if (empty($_REQUEST['adduser']) && (! isset($checkprivs) || ! strlen($checkprivs))) {    if (! isset($username)) {        // No username is given --> display the overview        echo '<h2>' . "\n"           . PMA_getIcon('b_usrlist.png')           . __('Users overview') . "\n"           . '</h2>' . "\n";        $sql_query = 'SELECT *,' .            "       IF(`Password` = _latin1 '', 'N', 'Y') AS 'Password'" .            '  FROM `mysql`.`user`';        $sql_query .= (isset($initial) ? PMA_rangeOfUsers($initial) : '');        $sql_query .= ' ORDER BY `User` ASC, `Host` ASC;';        $res = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_STORE);        if (! $res) {            // the query failed! This may have two reasons:            // - the user does not have enough privileges            // - the privilege tables use a structure of an earlier version.            // so let's try a more simple query            $sql_query = 'SELECT * FROM `mysql`.`user`';            $res = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_STORE);            if (! $res) {                PMA_Message::error(__('No Privileges'))->display();                PMA_DBI_free_result($res);                unset($res);            } else {                // This message is hardcoded because I will replace it by                // a automatic repair feature soon.                $raw = 'Your privilege table structure seems to be older than'                    . ' this MySQL version!<br />'                    . 'Please run the <tt>mysql_upgrade</tt> command'                    . '(<tt>mysql_fix_privilege_tables</tt> on older systems)'                    . ' that should be included in your MySQL server distribution'                    . ' to solve this problem!';                PMA_Message::rawError($raw)->display();            }        } else {            // we also want users not in table `user` but in other table            $tables = PMA_DBI_fetch_result('SHOW TABLES FROM `mysql`;');            $tables_to_search_for_users = array(                'user', 'db', 'tables_priv', 'columns_priv', 'procs_priv',            );            $db_rights_sqls = array();            foreach ($tables_to_search_for_users as $table_search_in) {                if (in_array($table_search_in, $tables)) {                    $db_rights_sqls[] = 'SELECT DISTINCT `User`, `Host` FROM `mysql`.`' . $table_search_in . '` ' . (isset($initial) ? PMA_rangeOfUsers($initial) : '');                }            }            $user_defaults = array(                'User'      => '',                'Host'      => '%',                'Password'  => '?',                'Grant_priv' => 'N',                'privs'     => array('USAGE'),            );            // for all initials, even non A-Z            $array_initials = array();            // for the rights            $db_rights = array();            $db_rights_sql = '(' . implode(') UNION (', $db_rights_sqls) . ')'                .' ORDER BY `User` ASC, `Host` ASC';            $db_rights_result = PMA_DBI_query($db_rights_sql);            while ($db_rights_row = PMA_DBI_fetch_assoc($db_rights_result)) {                $db_rights_row = array_merge($user_defaults, $db_rights_row);                $db_rights[$db_rights_row['User']][$db_rights_row['Host']]                    = $db_rights_row;            }            PMA_DBI_free_result($db_rights_result);            unset($db_rights_sql, $db_rights_sqls, $db_rights_result, $db_rights_row);            ksort($db_rights);            /**             * Displays the initials             * In an Ajax request, we don't need to show this.             * Also not necassary if there is less than 20 privileges             */            if ($GLOBALS['is_ajax_request'] != true && PMA_DBI_num_rows($res) > 20 ) {                // initialize to false the letters A-Z                for ($letter_counter = 1; $letter_counter < 27; $letter_counter++) {                    if (! isset($array_initials[chr($letter_counter + 64)])) {                        $array_initials[chr($letter_counter + 64)] = false;                    }                }                $initials = PMA_DBI_try_query('SELECT DISTINCT UPPER(LEFT(`User`,1)) FROM `user` ORDER BY `User` ASC', null, PMA_DBI_QUERY_STORE);                while (list($tmp_initial) = PMA_DBI_fetch_row($initials)) {                    $array_initials[$tmp_initial] = true;                }                // Display the initials, which can be any characters, not                // just letters. For letters A-Z, we add the non-used letters                // as greyed out.                uksort($array_initials, "strnatcasecmp");                echo '<table id="initials_table" class="' . $conditional_class . '" <cellspacing="5"><tr>';                foreach ($array_initials as $tmp_initial => $initial_was_found) {                    if ($initial_was_found) {                        echo '<td><a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;initial=' . urlencode($tmp_initial) . '">' . $tmp_initial . '</a></td>' . "\n";                    } else {                        echo '<td>' . $tmp_initial . '</td>';                    }                }                echo '<td><a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;showall=1" class="nowrap">[' . __('Show all') . ']</a></td>' . "\n";                echo '</tr></table>';            }            /**            * Display the user overview            * (if less than 50 users, display them immediately)            */            if (isset($initial) || isset($showall) || PMA_DBI_num_rows($res) < 50) {                while ($row = PMA_DBI_fetch_assoc($res)) {                    $row['privs'] = PMA_extractPrivInfo($row, true);                    $db_rights[$row['User']][$row['Host']] = $row;                }                @PMA_DBI_free_result($res);                unset($res);                echo '<form name="usersForm" id="usersForm" action="server_privileges.php" method="post">' . "\n"                   . PMA_generate_common_hidden_inputs('', '')                   . '    <table id="tableuserrights" class="data">' . "\n"                   . '    <thead>' . "\n"                   . '        <tr><th></th>' . "\n"                   . '            <th>' . __('User') . '</th>' . "\n"                   . '            <th>' . __('Host') . '</th>' . "\n"                   . '            <th>' . __('Password') . '</th>' . "\n"                   . '            <th>' . __('Global privileges') . ' '                   . PMA_showHint(__('Note: MySQL privilege names are expressed in English')) . '</th>' . "\n"                   . '            <th>' . __('Grant') . '</th>' . "\n"                   . '            <th colspan="2">' . __('Action') . '</th>' . "\n";                echo '        </tr>' . "\n";                echo '    </thead>' . "\n";                echo '    <tbody>' . "\n";                $odd_row = true;                $index_checkbox = -1;                foreach ($db_rights as $user) {                    $index_checkbox++;                    ksort($user);                    foreach ($user as $host) {                        $index_checkbox++;                        echo '        <tr class="' . ($odd_row ? 'odd' : 'even') . '">' . "\n"                           . '            <td><input type="checkbox" name="selected_usr[]" id="checkbox_sel_users_'                            . $index_checkbox . '" value="'                            . htmlspecialchars($host['User'] . '&amp;#27;' . $host['Host'])                            . '"'                            . (empty($GLOBALS['checkall']) ?  '' : ' checked="checked"')                            . ' /></td>' . "\n"                           . '            <td><label for="checkbox_sel_users_' . $index_checkbox . '">' . (empty($host['User']) ? '<span style="color: #FF0000">' . __('Any') . '</span>' : htmlspecialchars($host['User'])) . '</label></td>' . "\n"                           . '            <td>' . htmlspecialchars($host['Host']) . '</td>' . "\n";                        echo '            <td>';                        switch ($host['Password']) {                        case 'Y':                            echo __('Yes');                            break;                        case 'N':                            echo '<span style="color: #FF0000">' . __('No') . '</span>';                            break;                        // this happens if this is a definition not coming from mysql.user                        default:                            echo '--'; // in future version, replace by "not present"                            break;                        } // end switch                        echo '</td>' . "\n"                           . '            <td><tt>' . "\n"                           . '                ' . implode(',' . "\n" . '            ', $host['privs']) . "\n"                           . '                </tt></td>' . "\n"                           . '            <td>' . ($host['Grant_priv'] == 'Y' ? __('Yes') : __('No')) . '</td>' . "\n"                           . '            <td align="center">';                        printf($link_edit, urlencode($host['User']), urlencode($host['Host']), '', '');                        echo '</td>';                        echo '<td align="center">';                        printf($link_export, urlencode($host['User']), urlencode($host['Host']), (isset($initial) ? $initial : ''));                        echo '</td>';                        echo '</tr>';                        $odd_row = ! $odd_row;                    }                }                unset($user, $host, $odd_row);                echo '    </tbody></table>' . "\n"                   .'<img class="selectallarrow"'                   .' src="' . $pmaThemeImage . 'arrow_' . $text_dir . '.png"'                   .' width="38" height="22"'                   .' alt="' . __('With selected:') . '" />' . "\n"                   .'<a href="server_privileges.php?' . $GLOBALS['url_query'] .  '&amp;checkall=1"'                   .' onclick="if (markAllRows(\'usersForm\')) return false;">'                   . __('Check All') . '</a>' . "\n"                   .'/' . "\n"                   .'<a href="server_privileges.php?' . $GLOBALS['url_query'] .  '"'                   .' onclick="if (unMarkAllRows(\'usersForm\')) return false;">'                   . __('Uncheck All') . '</a>' . "\n";                // add/delete user fieldset                echo '    <fieldset id="fieldset_add_user">' . "\n"                   . '        <a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;adduser=1" class="' . $conditional_class . '">' . "\n"                   . PMA_getIcon('b_usradd.png')                   . '            ' . __('Add user') . '</a>' . "\n"                   . '    </fieldset>' . "\n"                   . '    <fieldset id="fieldset_delete_user">'                   . '        <legend>' . "\n"                   . PMA_getIcon('b_usrdrop.png')                   . '            ' . __('Remove selected users') . '' . "\n"                   . '        </legend>' . "\n"                   . '        <input type="hidden" name="mode" value="2" />' . "\n"                   . '(' . __('Revoke all active privileges from the users and delete them afterwards.') . ')<br />' . "\n"                   . '        <input type="checkbox" title="' . __('Drop the databases that have the same names as the users.') . '" name="drop_users_db" id="checkbox_drop_users_db" />' . "\n"                   . '        <label for="checkbox_drop_users_db" title="' . __('Drop the databases that have the same names as the users.') . '">' . "\n"                   . '            ' . __('Drop the databases that have the same names as the users.') . "\n"                   . '        </label>' . "\n"                   . '    </fieldset>' . "\n"                   . '    <fieldset id="fieldset_delete_user_footer" class="tblFooters">' . "\n"                   . '        <input type="submit" name="delete" value="' . __('Go') . '" id="buttonGo" class="' . $conditional_class . '"/>' . "\n"                   . '    </fieldset>' . "\n"                   . '</form>' . "\n";            } else {                unset ($row);                echo '    <fieldset id="fieldset_add_user">' . "\n"                   . '        <a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;adduser=1" class="' . $conditional_class . '">' . "\n"                   . PMA_getIcon('b_usradd.png')                   . '            ' . __('Add user') . '</a>' . "\n"                   . '    </fieldset>' . "\n";            } // end if (display overview)            if ($GLOBALS['is_ajax_request']) {                exit;            }            $flushnote = new PMA_Message(__('Note: phpMyAdmin gets the users\' privileges directly from MySQL\'s privilege tables. The content of these tables may differ from the privileges the server uses, if they have been changed manually. In this case, you should %sreload the privileges%s before you continue.'), PMA_Message::NOTICE);            $flushnote->addParam('<a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;flush_privileges=1" id="reload_privileges_anchor" class="' . $conditional_class . '">', false);            $flushnote->addParam('</a>', false);            $flushnote->display();        }    } else {        // A user was selected -> display the user's properties        // In an Ajax request, prevent cached values from showing        if ($GLOBALS['is_ajax_request'] == true) {            header('Cache-Control: no-cache');        }        echo '<h2>' . "\n"           . PMA_getIcon('b_usredit.png')           . __('Edit Privileges') . ': '           . __('User');        if (isset($dbname)) {            echo ' <i><a href="server_privileges.php?'                . $GLOBALS['url_query'] . '&amp;username=' . htmlspecialchars(urlencode($username))                . '&amp;hostname=' . htmlspecialchars(urlencode($hostname)) . '&amp;dbname=&amp;tablename=">\''                . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname)                . '\'</a></i>' . "\n";            $url_dbname = urlencode(str_replace(array('\_', '\%'), array('_', '%'), $dbname));            echo ' - ' . ($dbname_is_wildcard ? __('Databases') : __('Database') );            if (isset($tablename)) {                echo ' <i><a href="server_privileges.php?' . $GLOBALS['url_query']                    . '&amp;username=' . htmlspecialchars(urlencode($username)) . '&amp;hostname=' . htmlspecialchars(urlencode($hostname))                    . '&amp;dbname=' . htmlspecialchars($url_dbname) . '&amp;tablename=">' . htmlspecialchars($dbname) . '</a></i>';                echo ' - ' . __('Table') . ' <i>' . htmlspecialchars($tablename) . '</i>';            } else {                echo ' <i>' . htmlspecialchars($dbname) . '</i>';            }        } else {            echo ' <i>\'' . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname)                . '\'</i>' . "\n";        }        echo '</h2>' . "\n";        $sql = "SELECT '1' FROM `mysql`.`user`"            . " WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"            . " AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "';";        $user_does_not_exists = (bool) ! PMA_DBI_fetch_value($sql);        unset($sql);        if ($user_does_not_exists) {            PMA_Message::error(__('The selected user was not found in the privilege table.'))->display();            PMA_displayLoginInformationFields();            //require './libraries/footer.inc.php';        }        echo '<form name="usersForm" id="addUsersForm_' . $random_n . '" action="server_privileges.php" method="post">' . "\n";        $_params = array(            'username' => $username,            'hostname' => $hostname,        );        if (isset($dbname)) {            $_params['dbname'] = $dbname;            if (isset($tablename)) {                $_params['tablename'] = $tablename;            }        }        echo PMA_generate_common_hidden_inputs($_params);        PMA_displayPrivTable(            PMA_ifSetOr($dbname, '*', 'length'),            PMA_ifSetOr($tablename, '*', 'length')        );        echo '</form>' . "\n";        if (! isset($tablename) && empty($dbname_is_wildcard)) {            // no table name was given, display all table specific rights            // but only if $dbname contains no wildcards            // table header            echo '<form action="server_privileges.php" id="db_or_table_specific_priv" method="post">' . "\n"               . PMA_generate_common_hidden_inputs('', '')               . '<input type="hidden" name="username" value="' . htmlspecialchars($username) . '" />' . "\n"               . '<input type="hidden" name="hostname" value="' . htmlspecialchars($hostname) . '" />' . "\n"               . '<fieldset>' . "\n"               . '<legend>' . (! isset($dbname) ? __('Database-specific privileges') : __('Table-specific privileges')) . '</legend>' . "\n"               . '<table class="data">' . "\n"               . '<thead>' . "\n"               . '<tr><th>' . (! isset($dbname) ? __('Database') : __('Table')) . '</th>' . "\n"               . '    <th>' . __('Privileges') . '</th>' . "\n"               . '    <th>' . __('Grant') . '</th>' . "\n"               . '    <th>' . (! isset($dbname) ? __('Table-specific privileges') : __('Column-specific privileges')) . '</th>' . "\n"               . '    <th colspan="2">' . __('Action') . '</th>' . "\n"               . '</tr>' . "\n"               . '</thead>' . "\n"               . '<tbody>' . "\n";            $user_host_condition = ' WHERE `User`'                . ' = \'' . PMA_sqlAddSlashes($username) . "'"                . ' AND `Host`'                . ' = \'' . PMA_sqlAddSlashes($hostname) . "'";            // table body            // get data            // we also want privielgs for this user not in table `db` but in other table            $tables = PMA_DBI_fetch_result('SHOW TABLES FROM `mysql`;');            if (! isset($dbname)) {                // no db name given, so we want all privs for the given user                $tables_to_search_for_users = array(                    'tables_priv', 'columns_priv',                );                $db_rights_sqls = array();                foreach ($tables_to_search_for_users as $table_search_in) {                    if (in_array($table_search_in, $tables)) {                        $db_rights_sqls[] = '                            SELECT DISTINCT `Db`                                   FROM `mysql`.' . PMA_backquote($table_search_in)                                   . $user_host_condition;                    }                }                $user_defaults = array(                    'Db'          => '',                    'Grant_priv'  => 'N',                    'privs'       => array('USAGE'),                    'Table_privs' => true,                );                // for the rights                $db_rights = array();                $db_rights_sql = '(' . implode(') UNION (', $db_rights_sqls) . ')'                    .' ORDER BY `Db` ASC';                $db_rights_result = PMA_DBI_query($db_rights_sql);                while ($db_rights_row = PMA_DBI_fetch_assoc($db_rights_result)) {                    $db_rights_row = array_merge($user_defaults, $db_rights_row);                    // only Db names in the table `mysql`.`db` uses wildcards                    // as we are in the db specific rights display we want                    // all db names escaped, also from other sources                    $db_rights_row['Db'] = PMA_escape_mysql_wildcards(                        $db_rights_row['Db']                    );                    $db_rights[$db_rights_row['Db']] = $db_rights_row;                }                PMA_DBI_free_result($db_rights_result);                unset($db_rights_sql, $db_rights_sqls, $db_rights_result, $db_rights_row);                $sql_query = 'SELECT * FROM `mysql`.`db`' . $user_host_condition . ' ORDER BY `Db` ASC';                $res = PMA_DBI_query($sql_query);                $sql_query = '';                while ($row = PMA_DBI_fetch_assoc($res)) {                    if (isset($db_rights[$row['Db']])) {                        $db_rights[$row['Db']] = array_merge($db_rights[$row['Db']], $row);                    } else {                        $db_rights[$row['Db']] = $row;                    }                    // there are db specific rights for this user                    // so we can drop this db rights                    $db_rights[$row['Db']]['can_delete'] = true;                }                PMA_DBI_free_result($res);                unset($row, $res);            } else {                // db name was given,                // so we want all user specific rights for this db                $user_host_condition .=                    ' AND `Db`'                    .' LIKE \'' . PMA_sqlAddSlashes($dbname, true) . "'";                $tables_to_search_for_users = array(                    'columns_priv',                );                $db_rights_sqls = array();                foreach ($tables_to_search_for_users as $table_search_in) {                    if (in_array($table_search_in, $tables)) {                        $db_rights_sqls[] = '                            SELECT DISTINCT `Table_name`                                   FROM `mysql`.' . PMA_backquote($table_search_in)                                   . $user_host_condition;                    }                }                $user_defaults = array(                    'Table_name'  => '',                    'Grant_priv'  => 'N',                    'privs'       => array('USAGE'),                    'Column_priv' => true,                );                // for the rights                $db_rights = array();                $db_rights_sql = '(' . implode(') UNION (', $db_rights_sqls) . ')'                    .' ORDER BY `Table_name` ASC';                $db_rights_result = PMA_DBI_query($db_rights_sql);                while ($db_rights_row = PMA_DBI_fetch_assoc($db_rights_result)) {                    $db_rights_row = array_merge($user_defaults, $db_rights_row);                    $db_rights[$db_rights_row['Table_name']] = $db_rights_row;                }                PMA_DBI_free_result($db_rights_result);                unset($db_rights_sql, $db_rights_sqls, $db_rights_result, $db_rights_row);                $sql_query = 'SELECT `Table_name`,'                    .' `Table_priv`,'                    .' IF(`Column_priv` = _latin1 \'\', 0, 1)'                    .' AS \'Column_priv\''                    .' FROM `mysql`.`tables_priv`'                    . $user_host_condition                    .' ORDER BY `Table_name` ASC;';                $res = PMA_DBI_query($sql_query);                $sql_query = '';                while ($row = PMA_DBI_fetch_assoc($res)) {                    if (isset($db_rights[$row['Table_name']])) {                        $db_rights[$row['Table_name']] = array_merge($db_rights[$row['Table_name']], $row);                    } else {                        $db_rights[$row['Table_name']] = $row;                    }                }                PMA_DBI_free_result($res);                unset($row, $res);            }            ksort($db_rights);            // display rows            if (count($db_rights) < 1) {                echo '<tr class="odd">' . "\n"                   . '    <td colspan="6"><center><i>' . __('None') . '</i></center></td>' . "\n"                   . '</tr>' . "\n";            } else {                $odd_row = true;                $found_rows = array();                //while ($row = PMA_DBI_fetch_assoc($res)) {                foreach ($db_rights as $row) {                    $found_rows[] = (! isset($dbname)) ? $row['Db'] : $row['Table_name'];                    echo '<tr class="' . ($odd_row ? 'odd' : 'even') . '">' . "\n"                       . '    <td>' . htmlspecialchars((! isset($dbname)) ? $row['Db'] : $row['Table_name']) . '</td>' . "\n"                       . '    <td><tt>' . "\n"                       . '        ' . join(',' . "\n" . '            ', PMA_extractPrivInfo($row, true)) . "\n"                       . '        </tt></td>' . "\n"                       . '    <td>' . ((((! isset($dbname)) && $row['Grant_priv'] == 'Y') || (isset($dbname) && in_array('Grant', explode(',', $row['Table_priv'])))) ? __('Yes') : __('No')) . '</td>' . "\n"                       . '    <td>';                    if (! empty($row['Table_privs']) || ! empty ($row['Column_priv'])) {                        echo __('Yes');                    } else {                        echo __('No');                    }                    echo '</td>' . "\n"                       . '    <td>';                    printf(                        $link_edit,                        htmlspecialchars(urlencode($username)),                        urlencode(htmlspecialchars($hostname)),                        urlencode((! isset($dbname)) ? $row['Db'] : htmlspecialchars($dbname)),                        urlencode((! isset($dbname)) ? '' : $row['Table_name'])                    );                    echo '</td>' . "\n"                       . '    <td>';                    if (! empty($row['can_delete']) || isset($row['Table_name']) && strlen($row['Table_name'])) {                        printf(                            $link_revoke,                            htmlspecialchars(urlencode($username)),                            urlencode(htmlspecialchars($hostname)),                            urlencode((! isset($dbname)) ? $row['Db'] : htmlspecialchars($dbname)),                            urlencode((! isset($dbname)) ? '' : $row['Table_name'])                        );                    }                    echo '</td>' . "\n"                       . '</tr>' . "\n";                    $odd_row = ! $odd_row;                } // end while            }            unset($row);            echo '</tbody>' . "\n"               . '</table>' . "\n";            if (! isset($dbname)) {                // no database name was given, display select db                $pred_db_array =PMA_DBI_fetch_result('SHOW DATABASES;');                echo '    <label for="text_dbname">' . __('Add privileges on the following database') . ':</label>' . "\n";                if (! empty($pred_db_array)) {                    echo '    <select name="pred_dbname" class="autosubmit">' . "\n"                       . '        <option value="" selected="selected">' . __('Use text field') . ':</option>' . "\n";                    foreach ($pred_db_array as $current_db) {                        $current_db = PMA_escape_mysql_wildcards($current_db);                        // cannot use array_diff() once, outside of the loop,                        // because the list of databases has special characters                        // already escaped in $found_rows,                        // contrary to the output of SHOW DATABASES                        if (empty($found_rows) || ! in_array($current_db, $found_rows)) {                            echo '        <option value="' . htmlspecialchars($current_db) . '">'                                . htmlspecialchars($current_db) . '</option>' . "\n";                        }                    }                    echo '    </select>' . "\n";                }                echo '    <input type="text" id="text_dbname" name="dbname" />' . "\n"                    . PMA_showHint(__('Wildcards % and _ should be escaped with a \ to use them literally'));            } else {                echo '    <input type="hidden" name="dbname" value="' . htmlspecialchars($dbname) . '"/>' . "\n"                   . '    <label for="text_tablename">' . __('Add privileges on the following table') . ':</label>' . "\n";                if ($res = @PMA_DBI_try_query('SHOW TABLES FROM ' . PMA_backquote(PMA_unescape_mysql_wildcards($dbname)) . ';', null, PMA_DBI_QUERY_STORE)) {                    $pred_tbl_array = array();                    while ($row = PMA_DBI_fetch_row($res)) {                        if (! isset($found_rows) || ! in_array($row[0], $found_rows)) {                            $pred_tbl_array[] = $row[0];                        }                    }                    PMA_DBI_free_result($res);                    unset($res, $row);                    if (! empty($pred_tbl_array)) {                        echo '    <select name="pred_tablename" class="autosubmit">' . "\n"                           . '        <option value="" selected="selected">' . __('Use text field') . ':</option>' . "\n";                        foreach ($pred_tbl_array as $current_table) {                            echo '        <option value="' . htmlspecialchars($current_table) . '">' . htmlspecialchars($current_table) . '</option>' . "\n";                        }                        echo '    </select>' . "\n";                    }                } else {                    unset($res);                }                echo '    <input type="text" id="text_tablename" name="tablename" />' . "\n";            }            echo '</fieldset>' . "\n";            echo '<fieldset class="tblFooters">' . "\n"               . '    <input type="submit" value="' . __('Go') . '" />'               . '</fieldset>' . "\n"               . '</form>' . "\n";        }        // Provide a line with links to the relevant database and table        if (isset($dbname) && empty($dbname_is_wildcard)) {            echo '[ ' . __('Database')                . ' <a href="' . $GLOBALS['cfg']['DefaultTabDatabase'] . '?'                . $GLOBALS['url_query'] . '&amp;db=' . $url_dbname . '&amp;reload=1">'                . htmlspecialchars($dbname) . ': ' . PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabDatabase']) . "</a> ]\n";            if (isset($tablename)) {                echo ' [ ' . __('Table') . ' <a href="'                    . $GLOBALS['cfg']['DefaultTabTable'] . '?' . $GLOBALS['url_query']                    . '&amp;db=' . $url_dbname . '&amp;table=' . htmlspecialchars(urlencode($tablename))                    . '&amp;reload=1">' . htmlspecialchars($tablename) . ': '                    . PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabTable'])                    . "</a> ]\n";            }            unset($url_dbname);        }        if (! isset($dbname) && ! $user_does_not_exists) {            include_once './libraries/display_change_password.lib.php';            echo '<form action="server_privileges.php" method="post" onsubmit="return checkPassword(this);">' . "\n"               . PMA_generate_common_hidden_inputs('', '')               . '<input type="hidden" name="old_username" value="' . htmlspecialchars($username) . '" />' . "\n"               . '<input type="hidden" name="old_hostname" value="' . htmlspecialchars($hostname) . '" />' . "\n"               . '<fieldset id="fieldset_change_copy_user">' . "\n"               . '    <legend>' . __('Change Login Information / Copy User') . '</legend>' . "\n";            PMA_displayLoginInformationFields('change');            echo '    <fieldset>' . "\n"                . '        <legend>' . __('Create a new user with the same privileges and ...') . '</legend>' . "\n";            $choices = array(                '4' => __('... keep the old one.'),                '1' => __('... delete the old one from the user tables.'),                '2' => __('... revoke all active privileges from the old one and delete it afterwards.'),                '3' => __('... delete the old one from the user tables and reload the privileges afterwards.'));            PMA_display_html_radio('mode', $choices, '4', true);            unset($choices);            echo '    </fieldset>' . "\n"               . '</fieldset>' . "\n"               . '<fieldset id="fieldset_change_copy_user_footer" class="tblFooters">' . "\n"               . '    <input type="submit" name="change_copy" value="' . __('Go') . '" />' . "\n"               . '</fieldset>' . "\n"               . '</form>' . "\n";        }    }} elseif (isset($_REQUEST['adduser'])) {    // Add user    $GLOBALS['url_query'] .= '&amp;adduser=1';    echo '<h2>' . "\n"       . PMA_getIcon('b_usradd.png') . __('Add user') . "\n"       . '</h2>' . "\n"       . '<form name="usersForm" id="addUsersForm_' . $random_n . '" action="server_privileges.php" method="post">' . "\n"       . PMA_generate_common_hidden_inputs('', '');    PMA_displayLoginInformationFields('new');    echo '<fieldset id="fieldset_add_user_database">' . "\n"        . '<legend>' . __('Database for user') . '</legend>' . "\n";    $default_choice = 0;    $choices = array(        '0' => _pgettext('Create none database for user', 'None'),        '1' => __('Create database with same name and grant all privileges'),        '2' => __('Grant all privileges on wildcard name (username\\_%)'));    if (! empty($dbname) ) {        $choices['3'] = sprintf(            __('Grant all privileges on database &quot;%s&quot;'),            htmlspecialchars($dbname)        );        $default_choice = 3;        echo '<input type="hidden" name="dbname" value="' . htmlspecialchars($dbname) . '" />' . "\n";    }    // 4th parameter set to true to add line breaks    // 5th parameter set to false to avoid htmlspecialchars() escaping in the label    //  since we have some HTML in some labels    PMA_display_html_radio('createdb', $choices, $default_choice, true, false);    unset($choices);    unset($default_choice);    echo '</fieldset>' . "\n";    PMA_displayPrivTable('*', '*', false);    echo '    <fieldset id="fieldset_add_user_footer" class="tblFooters">' . "\n"       . '        <input type="submit" name="adduser_submit" value="' . __('Go') . '" />' . "\n"       . '    </fieldset>' . "\n"       . '</form>' . "\n";} else {    // check the privileges for a particular database.    $user_form = '<form id="usersForm" action="server_privileges.php"><fieldset>' . "\n"       . '<legend>' . "\n"       . PMA_getIcon('b_usrcheck.png')       . '    ' . sprintf(__('Users having access to &quot;%s&quot;'), '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase'] . '?' . PMA_generate_common_url($checkprivs) . '">' .  htmlspecialchars($checkprivs) . '</a>') . "\n"       . '</legend>' . "\n"       . '<table id="dbspecificuserrights" class="data">' . "\n"       . '<thead>' . "\n"       . '    <tr><th>' . __('User') . '</th>' . "\n"       . '        <th>' . __('Host') . '</th>' . "\n"       . '        <th>' . __('Type') . '</th>' . "\n"       . '        <th>' . __('Privileges') . '</th>' . "\n"       . '        <th>' . __('Grant') . '</th>' . "\n"       . '        <th>' . __('Action') . '</th>' . "\n"       . '    </tr>' . "\n"       . '</thead>' . "\n"       . '<tbody>' . "\n";    $odd_row = true;    unset($row, $row1, $row2);    // now, we build the table...    $list_of_privileges        = '`User`, '        . '`Host`, '        . '`Select_priv`, '        . '`Insert_priv`, '        . '`Update_priv`, '        . '`Delete_priv`, '        . '`Create_priv`, '        . '`Drop_priv`, '        . '`Grant_priv`, '        . '`Index_priv`, '        . '`Alter_priv`, '        . '`References_priv`, '        . '`Create_tmp_table_priv`, '        . '`Lock_tables_priv`, '        . '`Create_view_priv`, '        . '`Show_view_priv`, '        . '`Create_routine_priv`, '        . '`Alter_routine_priv`, '        . '`Execute_priv`';    $list_of_compared_privileges        = '`Select_priv` = \'N\''        . ' AND `Insert_priv` = \'N\''        . ' AND `Update_priv` = \'N\''        . ' AND `Delete_priv` = \'N\''        . ' AND `Create_priv` = \'N\''        . ' AND `Drop_priv` = \'N\''        . ' AND `Grant_priv` = \'N\''        . ' AND `References_priv` = \'N\''        . ' AND `Create_tmp_table_priv` = \'N\''        . ' AND `Lock_tables_priv` = \'N\''        . ' AND `Create_view_priv` = \'N\''        . ' AND `Show_view_priv` = \'N\''        . ' AND `Create_routine_priv` = \'N\''        . ' AND `Alter_routine_priv` = \'N\''        . ' AND `Execute_priv` = \'N\'';    if (PMA_MYSQL_INT_VERSION >= 50106) {        $list_of_privileges .=            ', `Event_priv`, '            . '`Trigger_priv`';        $list_of_compared_privileges .=            ' AND `Event_priv` = \'N\''            . ' AND `Trigger_priv` = \'N\'';    }    $sql_query = '(SELECT ' . $list_of_privileges . ', `Db`'        .' FROM `mysql`.`db`'        .' WHERE \'' . PMA_sqlAddSlashes($checkprivs) . "'"        .' LIKE `Db`'        .' AND NOT (' . $list_of_compared_privileges. ')) '        .'UNION '        .'(SELECT ' . $list_of_privileges . ', \'*\' AS `Db`'        .' FROM `mysql`.`user` '        .' WHERE NOT (' . $list_of_compared_privileges . ')) '        .' ORDER BY `User` ASC,'        .'  `Host` ASC,'        .'  `Db` ASC;';    $res = PMA_DBI_query($sql_query);    $row = PMA_DBI_fetch_assoc($res);    if ($row) {        $found = true;    }    if ($found) {        while (true) {            // prepare the current user            $current_privileges = array();            $current_user = $row['User'];            $current_host = $row['Host'];            while ($row && $current_user == $row['User'] && $current_host == $row['Host']) {                $current_privileges[] = $row;                $row = PMA_DBI_fetch_assoc($res);            }            $user_form .= '    <tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">' . "\n"               . '        <td';            if (count($current_privileges) > 1) {                $user_form .= ' rowspan="' . count($current_privileges) . '"';            }            $user_form .= '>' . (empty($current_user) ? '<span style="color: #FF0000">' . __('Any') . '</span>' : htmlspecialchars($current_user)) . "\n"               . '        </td>' . "\n"               . '        <td';            if (count($current_privileges) > 1) {                $user_form .= ' rowspan="' . count($current_privileges) . '"';            }            $user_form .= '>' . htmlspecialchars($current_host) . '</td>' . "\n";            for ($i = 0; $i < count($current_privileges); $i++) {                $current = $current_privileges[$i];                $user_form .= '        <td>' . "\n"                   . '            ';                if (! isset($current['Db']) || $current['Db'] == '*') {                    $user_form .= __('global');                } elseif ($current['Db'] == PMA_escape_mysql_wildcards($checkprivs)) {                    $user_form .= __('database-specific');                } else {                    $user_form .= __('wildcard'). ': <tt>' . htmlspecialchars($current['Db']) . '</tt>';                }                $user_form .= "\n"                   . '        </td>' . "\n"                   . '        <td>' . "\n"                   . '            <tt>' . "\n"                   . '                ' . join(',' . "\n" . '                ', PMA_extractPrivInfo($current, true)) . "\n"                   . '            </tt>' . "\n"                   . '        </td>' . "\n"                   . '        <td>' . "\n"                   . '            ' . ($current['Grant_priv'] == 'Y' ? __('Yes') : __('No')) . "\n"                   . '        </td>' . "\n"                   . '        <td>' . "\n";                $user_form .= sprintf(                    $link_edit,                    urlencode($current_user),                    urlencode($current_host),                    urlencode(! isset($current['Db']) || $current['Db'] == '*' ? '' : $current['Db']),                    ''                );                $user_form .= '</td>' . "\n"                   . '    </tr>' . "\n";                if (($i + 1) < count($current_privileges)) {                    $user_form .= '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">' . "\n";                }            }            if (empty($row) && empty($row1) && empty($row2)) {                break;            }            $odd_row = ! $odd_row;        }    } else {        $user_form .= '    <tr class="odd">' . "\n"           . '        <td colspan="6">' . "\n"           . '            ' . __('No user found.') . "\n"           . '        </td>' . "\n"           . '    </tr>' . "\n";    }    $user_form .= '</tbody>' . "\n"       . '</table></fieldset></form>' . "\n";    if ($GLOBALS['is_ajax_request'] == true) {        $extra_data['user_form'] = $user_form;        $message = PMA_Message::success(__('User has been added.'));        PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);    } else {        // Offer to create a new user for the current database        $user_form .= '<fieldset id="fieldset_add_user">' . "\n"           . '<legend>' . __('New') . '</legend>' . "\n"           . '    <a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;adduser=1&amp;dbname=' . htmlspecialchars($checkprivs) .'" rel="'.'checkprivs='.htmlspecialchars($checkprivs). '&amp;'.$GLOBALS['url_query'] . '" class="'.$conditional_class.'" name="db_specific">' . "\n"           . PMA_getIcon('b_usradd.png')           . '        ' . __('Add user') . '</a>' . "\n"           . '</fieldset>' . "\n";        echo $user_form ;    }} // end if (empty($_REQUEST['adduser']) && empty($checkprivs)) ... elseif ... else .../** * Displays the footer */echo "\n\n";require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for creating a table (if user has privileges for that) * * for MySQL >= 4.1.0, we should be able to detect if user has a CREATE * privilege by looking at SHOW GRANTS output; * for < 4.1.0, it could be more difficult because the logic tries to * detect the current host and it might be expressed in many ways; also * on a shared server, the user might be unable to define a controluser * that has the proper rights to the "mysql" db; * so we give up and assume that user has the right to create a table * * Note: in this case we could even skip the following "foreach" logic * * Addendum, 2006-01-19: ok, I give up. We got some reports about servers * where the hostname field in mysql.user is not the same as the one * in mysql.db for a user. In this case, SHOW GRANTS does not return * the db-specific privileges. And probably, those users are on a shared * server, so can't set up a control user with rights to the "mysql" db. * We cannot reliably detect the db-specific privileges, so no more * warnings about the lack of privileges for CREATE TABLE. Tested * on MySQL 5.0.18. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/check_user_privileges.lib.php';$is_create_table_priv = true;?>    <form id="create_table_form_minimal" method="post" action="tbl_create.php"<?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><fieldset>    <legend><?phpif ($GLOBALS['cfg']['PropertiesIconic']) {    echo PMA_getImage('b_newtbl.png');}echo __('Create table');?>    </legend>    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <div class="formelement">        <?php echo __('Name'); ?>:        <input type="text" name="table" maxlength="64" size="30" />    </div>    <div class="formelement">        <?php echo __('Number of columns'); ?>:        <input type="text" name="num_fields" size="2" />    </div>    <div class="clearfloat"></div></fieldset><fieldset class="tblFooters">    <input type="submit" value="<?php echo __('Go'); ?>" /></fieldset></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @todo a .lib filename should not have code in main(), split or rename file * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Load proper code for handling input. */if (@function_exists('mb_strlen')) {    mb_internal_encoding('utf-8');    include './libraries/string_mb.lib.php';} else {    include './libraries/string_native.lib.php';}/** * Load ctype handler. */if (@extension_loaded('ctype')) {    include './libraries/string_type_ctype.lib.php';} else {    include './libraries/string_type_native.lib.php';}/** * Checks if a given character position in the string is escaped or not * * @param string   string to check for * @param integer  the character to check for * @param integer  starting position in the string * @return  boolean  whether the character is escaped or not */function PMA_STR_charIsEscaped($string, $pos, $start = 0){    $pos = max(intval($pos), 0);    $start = max(intval($start), 0);    $len = PMA_strlen($string);    // Base case:    // Check for string length or invalid input or special case of input    // (pos == $start)    if ($pos <= $start || $len <= max($pos, $start)) {        return false;    }    $pos--;    $escaped     = false;    while ($pos >= $start && PMA_substr($string, $pos, 1) == '\\') {        $escaped = !$escaped;        $pos--;    } // end while    return $escaped;} // end of the "PMA_STR_charIsEscaped()" function/** * Checks if a number is in a range * * @param integer  number to check for * @param integer  lower bound * @param integer  upper bound * @return  boolean  whether the number is in the range or not */function PMA_STR_numberInRangeInclusive($num, $lower, $upper){    return ($num >= $lower && $num <= $upper);} // end of the "PMA_STR_numberInRangeInclusive()" function/** * Checks if a character is an SQL identifier * * @param string   character to check for * @param boolean  whether the dot character is valid or not * @return  boolean  whether the character is an SQL identifier or not */function PMA_STR_isSqlIdentifier($c, $dot_is_valid = false){    return (PMA_STR_isAlnum($c)        || ($ord_c = ord($c)) && $ord_c >= 192 && $ord_c != 215 && $ord_c != 249        || $c == '_'        || $c == '$'        || ($dot_is_valid != false && $c == '.'));} // end of the "PMA_STR_isSqlIdentifier()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common config manipulation functions * * @package PhpMyAdmin *//** * Returns sanitized language string, taking into account our special codes * for formatting. Takes variable number of arguments. * Based on PMA_sanitize from sanitize.lib.php. * * @param  string  $lang_key  key in $GLOBALS WITHOUT 'strSetup' prefix * @param  mixed   $args,...  arguments for sprintf * @return string */function PMA_lang($lang_key, $args = null){    $message = isset($GLOBALS["strConfig$lang_key"]) ? $GLOBALS["strConfig$lang_key"] : $lang_key;    $message = PMA_sanitize($message);    if (func_num_args() == 1) {        return $message;    } else {        $args = func_get_args();        array_shift($args);        return vsprintf($message, $args);    }}/** * Returns translated field name/description or comment * * @param string $canonical_path * @param string $type  'name', 'desc' or 'cmt' * @param mixed  $default * @return string */function PMA_lang_name($canonical_path, $type = 'name', $default = 'key'){    $lang_key = str_replace(        array('Servers/1/', '/'),        array('Servers/', '_'),        $canonical_path) . '_' . $type;    return isset($GLOBALS["strConfig$lang_key"])        ? ($type == 'desc' ? PMA_lang($lang_key) : $GLOBALS["strConfig$lang_key"])        : ($default == 'key' ? $lang_key : $default);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * configures general layout * for detailed layout configuration please refer to the css files * * @package PhpMyAdmin-theme * @subpackage Original *//** * navi frame */// navi frame width$GLOBALS['cfg']['NaviWidth']                = 200;// foreground (text) color for the navi frame$GLOBALS['cfg']['NaviColor']                = '#000000';// background for the navi frame$GLOBALS['cfg']['NaviBackground']           = '#D0DCE0';// foreground (text) color of the pointer in navi frame$GLOBALS['cfg']['NaviPointerColor']         = '#000000';// background of the pointer in navi frame$GLOBALS['cfg']['NaviPointerBackground']    = '#9999CC';/** * main frame */// foreground (text) color for the main frame$GLOBALS['cfg']['MainColor']                = '#000000';// background for the main frame$GLOBALS['cfg']['MainBackground']           = '#F5F5F5';// foreground (text) color of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerColor']       = '#000000';// background of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerBackground']  = '#CCFFCC';// foreground (text) color of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerColor']        = '#000000';// background of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerBackground']   = '#FFCC99';/** * fonts *//** * the font family as a valid css font family value, * if not set the browser default will be used * (depending on browser, DTD and system settings) */$GLOBALS['cfg']['FontFamily']           = 'sans-serif';/** * fixed width font family, used in textarea */$GLOBALS['cfg']['FontFamilyFixed']      = 'monospace';/** * tables */// border$GLOBALS['cfg']['Border']               = 0;// table header and footer color$GLOBALS['cfg']['ThBackground']         = '#D3DCE3';// table header and footer background$GLOBALS['cfg']['ThColor']              = '#000000';// table data row background$GLOBALS['cfg']['BgOne']                = '#E5E5E5';// table data row background, alternate$GLOBALS['cfg']['BgTwo']                = '#D5D5D5';/** * query window */// Width of Query window$GLOBALS['cfg']['QueryWindowWidth']     = 600;// Height of Query window$GLOBALS['cfg']['QueryWindowHeight']    = 400;/** * SQL Parser Settings * Syntax colouring data */$GLOBALS['cfg']['SQP']['fmtColor']      = array(    'comment'            => '#808000',    'comment_mysql'      => '',    'comment_ansi'       => '',    'comment_c'          => '',    'digit'              => '',    'digit_hex'          => 'teal',    'digit_integer'      => 'teal',    'digit_float'        => 'aqua',    'punct'              => 'fuchsia',    'alpha'              => '',    'alpha_columnType'   => '#FF9900',    'alpha_columnAttrib' => '#0000FF',    'alpha_reservedWord' => '#990099',    'alpha_functionName' => '#FF0000',    'alpha_identifier'   => 'black',    'alpha_charset'      => '#6495ed',    'alpha_variable'     => '#800000',    'quote'              => '#008000',    'quote_double'       => '',    'quote_single'       => '',    'quote_backtick'     => '');/** * Chart colors */ $GLOBALS['cfg']['chartColor'] = array(    'gradientIntensity'       => 0,    // The style of the chart title.    'titleColor'              => '#000000',    'titleBgColor'            => $GLOBALS['cfg']['ThBackground'],    // Chart border (0 for no border)    'border'                  => '#CCCCCC',    // Chart background color.    'bgColor'                 => $GLOBALS['cfg']['BgTwo'],    // when graph area gradient is used, this is the color of the graph    // area border    'graphAreaColor'          =>  '#D5D9DD',    // the background color of the inner graph area    'graphAreaGradientColor'  => $GLOBALS['cfg']['BgOne'],    // the color of the grid lines in the graph area    'gridColor'               => '#E6E6E6',    // the color of the scale and the labels    'scaleColor'              => '#D5D9DD', );?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * the PBMS daemon * @package PhpMyAdmin-Engines */class PMA_StorageEngine_pbms extends PMA_StorageEngine{    /**     * returns array with variable names dedicated to PBMS daemon     *     * @return  array   variable names     */    function engine_init()    {        $this->engine  = "PBMS";        $this->title   = "PrimeBase Media Streaming Daemon";        $this->comment = "Provides BLOB streaming service for storage engines,";        $this->support = PMA_ENGINE_SUPPORT_YES;    }    function getVariables()    {        return array(            'pbms_garbage_threshold' => array(                'title' => __('Garbage Threshold'),                'desc'  => __('The percentage of garbage in a repository file before it is compacted.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_port' => array(                'title' => __('Port'),                'desc'  => __('The port for the PBMS stream-based communications. Setting this value to 0 will disable HTTP communication with the daemon.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_repository_threshold' => array(                'title' => __('Repository Threshold'),                'desc'  => __('The maximum size of a BLOB repository file. You may use Kb, MB or GB to indicate the unit of the value. A value in bytes is assumed when no unit is specified.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_temp_blob_timeout' => array(                'title' => __('Temp Blob Timeout'),                'desc'  => __('The timeout, in seconds, for temporary BLOBs. Uploaded BLOB data is removed after this time, unless they are referenced by a record in the database.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_temp_log_threshold' => array(                'title' => __('Temp Log Threshold'),                'desc'  => __('The maximum size of a temporary BLOB log file. You may use Kb, MB or GB to indicate the unit of the value. A value in bytes is assumed when no unit is specified.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_max_keep_alive' => array(                'title' => __('Max Keep Alive'),                'desc'  => __('The timeout for inactive connection with the keep-alive flag set. After this time the connection will be closed. The time-out is in milliseconds (1/1000).'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_http_metadata_headers' => array(                'title' => __('Metadata Headers'),                'desc'  => __('A ":" delimited list of metadata headers to be used to initialize the pbms_metadata_header table when a database is created.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),        );    }    //--------------------    function getInfoPages()    {        $pages = array();        $pages['Documentation'] = __('Documentation');        return $pages;    }    //--------------------    function getPage($id)    {        if (! array_key_exists($id, $this->getInfoPages())) {            return false;        }        $id = 'getPage' . $id;        return $this->$id();    }    function getPageConfigure()    {    }    function getPageDocumentation()    {        $output = '<p>'        . sprintf(__('Documentation and further information about PBMS can be found on %sThe PrimeBase Media Streaming home page%s.'), '<a href="' . PMA_linkURL('http://www.blobstreaming.org/') . '" target="_blank">', '</a>')        . '</p>' . "\n"        . '<h3>' . __('Related Links') . '</h3>' . "\n"        . '<ul>' . "\n"        . '<li><a href="' . PMA_linkURL('http://bpbdev.blogspot.com/') . '" target="_blank">' . __('The PrimeBase Media Streaming Blog by Barry Leslie') . '</a></li>' . "\n"        . '<li><a href="' . PMA_linkURL('http://www.primebase.com/xt') . '" target="_blank">' . __('PrimeBase XT Home Page') . '</a></li>' . "\n"        . '</ul>' . "\n";        return $output;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * List of avaible forms, each form is described as an array of fields to display. * Fields MUST have their counterparts in the $cfg array. * * To define form field, use the notatnion below: * $forms['Form group']['Form name'] = array('Option/path'); * * You can assign default values set by special button ("set value: ..."), eg.: * 'Servers/1/pmadb' => 'phpmyadmin' * * To group options, use: * ':group:' . __('group name') // just define a group * or * 'option' => ':group' // group starting from this option * End group blocks with: * ':group:end' * * @package PhpMyAdmin */$forms = array();$forms['Features']['General'] = array(    'AjaxEnable',    'VersionCheck',    'NaturalOrder',    'InitialSlidersState',    'ErrorIconic',    'LoginCookieValidity',    'ReplaceHelpImg',    'Servers/1/only_db', // saves to Server/only_db    'Servers/1/hide_db', // saves to Server/hide_db    'SkipLockedTables',    'DisableMultiTableMaintenance',    'MaxDbList',    'MaxTableList',    'ShowHint');$forms['Features']['Text_fields'] = array(    'CharEditing',    'MinSizeForInputField',    'MaxSizeForInputField',    'CharTextareaCols',    'CharTextareaRows',    'TextareaCols',    'TextareaRows',    'LongtextDoubleTextarea');$forms['Features']['Page_titles'] = array(    'TitleDefault',    'TitleTable',    'TitleDatabase',    'TitleServer');$forms['Features']['Warnings'] = array(    'PmaNoRelation_DisableWarning',    'SuhosinDisableWarning',    'McryptDisableWarning');// settings from this form are treated specially, see prefs_forms.php and user_preferences.lib.php$forms['Features']['Developer'] = array(    'Error_Handler/display',    'Error_Handler/gather',    'DBG/sql');$forms['Sql_queries']['Sql_queries'] = array(    'ShowSQL',    'Confirm',    'QueryHistoryMax',    'IgnoreMultiSubmitErrors',    'VerboseMultiSubmit',    'MaxCharactersInDisplayedSQL',    'EditInWindow',    //'QueryWindowWidth', // overridden in theme    //'QueryWindowHeight',    'QueryWindowDefTab',    'RetainQueryBox');$forms['Sql_queries']['Sql_box'] = array(    'SQLQuery/Edit',    'SQLQuery/Explain',    'SQLQuery/ShowAsPHP',    'SQLQuery/Validate',    'SQLQuery/Refresh');$forms['Left_frame']['Left_frame'] = array(    'LeftFrameLight',    'LeftDisplayLogo',    'LeftLogoLink',    'LeftLogoLinkWindow',    'LeftPointerEnable',    'LeftRecentTable');$forms['Left_frame']['Left_databases'] = array(    'DisplayDatabasesList',    'LeftFrameDBTree',    'LeftFrameDBSeparator',    'ShowTooltipAliasDB');$forms['Left_frame']['Left_tables'] = array(    'LeftDisplayTableFilterMinimum',    'LeftDefaultTabTable',    'LeftFrameTableSeparator',    'LeftFrameTableLevel',    'ShowTooltip',    'ShowTooltipAliasTB');$forms['Main_frame']['Startup'] = array(    'MainPageIconic',    'ShowCreateDb' => ':group',        'SuggestDBName',        ':group:end',    'ShowStats',    'ShowServerInfo');$forms['Main_frame']['Browse'] = array(    'NavigationBarIconic',    'PropertiesIconic',    'ShowAll',    'MaxRows',    'Order',    'DisplayBinaryAsHex',    'BrowsePointerEnable',    'BrowseMarkerEnable',    'SaveCellsAtOnce',    'ShowDisplayDirection',    'RepeatCells',    'LimitChars',    'RowActionLinks',    'DefaultDisplay',    'RememberSorting');$forms['Main_frame']['Edit'] = array(    'ProtectBinary',    'ShowFunctionFields',    'ShowFieldTypesInDataEditView',    'InsertRows',    'ForeignKeyDropdownOrder',    'ForeignKeyMaxLimit');$forms['Main_frame']['Tabs'] = array(    'LightTabs',    'DefaultTabServer',    'DefaultTabDatabase',    'DefaultTabTable');$forms['Import']['Import_defaults'] = array(    'Import/format',    'Import/charset',    'Import/allow_interrupt',    'Import/skip_queries');$forms['Import']['Sql'] = array(    'Import/sql_compatibility',    'Import/sql_no_auto_value_on_zero');$forms['Import']['Csv'] = array(    ':group:' . __('CSV'),        'Import/csv_replace',        'Import/csv_ignore',        'Import/csv_terminated',        'Import/csv_enclosed',        'Import/csv_escaped',        'Import/csv_col_names',        ':group:end',    ':group:' . __('CSV using LOAD DATA'),        'Import/ldi_replace',        'Import/ldi_ignore',        'Import/ldi_terminated',        'Import/ldi_enclosed',        'Import/ldi_escaped',        'Import/ldi_local_option');$forms['Import']['Open_Document'] = array(    ':group:' . __('Open Document Spreadsheet'),        'Import/ods_col_names',        'Import/ods_empty_rows',        'Import/ods_recognize_percentages',        'Import/ods_recognize_currency');$forms['Export']['Export_defaults'] = array(    'Export/method',    ':group:' . __('Quick'),        'Export/quick_export_onserver',        'Export/quick_export_onserver_overwrite',        ':group:end',    ':group:' . __('Custom'),        'Export/format',        'Export/compression',        'Export/charset',        'Export/asfile' => ':group',            'Export/onserver',            'Export/onserver_overwrite',            ':group:end',        'Export/file_template_table',        'Export/file_template_database',        'Export/file_template_server');$forms['Export']['Sql'] = array(    'Export/sql_include_comments' => ':group',        'Export/sql_dates',        'Export/sql_relation',        'Export/sql_mime',        ':group:end',    'Export/sql_use_transaction',    'Export/sql_disable_fk',    'Export/sql_compatibility',    ':group:' . __('Database export options'),        'Export/sql_drop_database',        'Export/sql_structure_or_data',        ':group:end',    ':group:' . __('Structure'),        'Export/sql_drop_table',        'Export/sql_procedure_function',        'Export/sql_create_table_statements' => ':group',            'Export/sql_if_not_exists',            'Export/sql_auto_increment',            ':group:end',        'Export/sql_backquotes',        ':group:end',    ':group:' . __('Data'),        'Export/sql_delayed',        'Export/sql_ignore',        'Export/sql_type',        'Export/sql_insert_syntax',        'Export/sql_max_query_size',        'Export/sql_hex_for_blob',        'Export/sql_utc_time');$forms['Export']['CodeGen'] = array(    'Export/codegen_format');$forms['Export']['Csv'] = array(    ':group:' . __('CSV'),        'Export/csv_separator',        'Export/csv_enclosed',        'Export/csv_escaped',        'Export/csv_terminated',        'Export/csv_null',        'Export/csv_removeCRLF',        'Export/csv_columns',        ':group:end',    ':group:' . __('CSV for MS Excel'),        'Export/excel_null',        'Export/excel_removeCRLF',        'Export/excel_columns',        'Export/excel_edition');$forms['Export']['Latex'] = array(    'Export/latex_caption',    'Export/latex_structure_or_data',    ':group:' . __('Structure'),        'Export/latex_structure_caption',        'Export/latex_structure_continued_caption',        'Export/latex_structure_label',        'Export/latex_relation',        'Export/latex_comments',        'Export/latex_mime',        ':group:end',    ':group:' . __('Data'),        'Export/latex_columns',        'Export/latex_data_caption',        'Export/latex_data_continued_caption',        'Export/latex_data_label',        'Export/latex_null');$forms['Export']['Microsoft_Office'] = array(    ':group:' . __('Microsoft Word 2000'),        'Export/htmlword_structure_or_data',        'Export/htmlword_null',        'Export/htmlword_columns');$forms['Export']['Open_Document'] = array(    ':group:' . __('Open Document Spreadsheet'),        'Export/ods_columns',        'Export/ods_null',        ':group:end',    ':group:' . __('Open Document Text'),        'Export/odt_structure_or_data',        ':group:' . __('Structure'),            'Export/odt_relation',            'Export/odt_comments',            'Export/odt_mime',            ':group:end',        ':group:' . __('Data'),            'Export/odt_columns',            'Export/odt_null');$forms['Export']['Texy'] = array(    'Export/texytext_structure_or_data',    ':group:' . __('Data'),        'Export/texytext_null',        'Export/texytext_columns');?>
<?php/** * Used to create server variables documentation links * $VARIABLE_DOC_LINKS[string $name] = array( *    string $anchor, *    string $chapter, *    string $type); * string $name: name of the system variable * string $anchor: anchor to the documentation page * string $chapter: chapter of "HTML, one page per chapter" documentation * string $type: type of system variable * string $format: if set to 'byte' it will format the variable * with PMA_formatByteDown() */$VARIABLE_DOC_LINKS = array();$VARIABLE_DOC_LINKS['auto_increment_increment'] = array(    'auto_increment_increment',    'replication-options-master',    'sysvar');$VARIABLE_DOC_LINKS['auto_increment_offset'] = array(    'auto_increment_offset',    'replication-options-master',    'sysvar');$VARIABLE_DOC_LINKS['autocommit'] = array(    'autocommit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['automatic_sp_privileges'] = array(    'automatic_sp_privileges',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['back_log'] = array(    'back_log',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['basedir'] = array(    'basedir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['big_tables'] = array(    'big-tables',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['bind_address'] = array(    'bind-address',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['binlog_cache_size'] = array(    'binlog_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['binlog_direct_non_transactional_updates'] = array(    'binlog_direct_non_transactional_updates',    'replication-options-binary-log',    'sysvar');$VARIABLE_DOC_LINKS['binlog_format'] = array(    'binlog-format',    'server-options',    'sysvar');$VARIABLE_DOC_LINKS['binlog_stmt_cache_size'] = array(    'binlog_stmt_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['bulk_insert_buffer_size'] = array(    'bulk_insert_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['character_set_client'] = array(    'character_set_client',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_connection'] = array(    'character_set_connection',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_database'] = array(    'character_set_database',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_filesystem'] = array(    'character-set-filesystem',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['character_set_results'] = array(    'character_set_results',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_server'] = array(    'character-set-server',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['character_set_system'] = array(    'character_set_system',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_sets_dir'] = array(    'character-sets-dir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['collation_connection'] = array(    'collation_connection',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['collation_database'] = array(    'collation_database',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['collation_server'] = array(    'collation-server',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['completion_type'] = array(    'completion_type',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['concurrent_insert'] = array(    'concurrent_insert',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['connect_timeout'] = array(    'connect_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['datadir'] = array(    'datadir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['date_format'] = array(    'date_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['datetime_format'] = array(    'datetime_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['debug'] = array(    'debug',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['debug_sync'] = array(    'debug_sync',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['default_storage_engine'] = array(    'default-storage-engine',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['default_week_format'] = array(    'default_week_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['delay_key_write'] = array(    'delay-key-write',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['delayed_insert_limit'] = array(    'delayed_insert_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['delayed_insert_timeout'] = array(    'delayed_insert_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['delayed_queue_size'] = array(    'delayed_queue_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['div_precision_increment'] = array(    'div_precision_increment',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['engine_condition_pushdown'] = array(    'engine-condition-pushdown',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['error_count'] = array(    'error_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['event_scheduler'] = array(    'event-scheduler',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['expire_logs_days'] = array(    'expire_logs_days',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['external_user'] = array(    'external_user',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['flush'] = array(    'flush',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['flush_time'] = array(    'flush_time',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['foreign_key_checks'] = array(    'foreign_key_checks',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_boolean_syntax'] = array(    'ft_boolean_syntax',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_max_word_len'] = array(    'ft_max_word_len',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_min_word_len'] = array(    'ft_min_word_len',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_query_expansion_limit'] = array(    'ft_query_expansion_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_stopword_file'] = array(    'ft_stopword_file',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['general_log'] = array(    'general-log',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['general_log_file'] = array(    'general_log_file',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['group_concat_max_len'] = array(    'group_concat_max_len',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_compress'] = array(    'have_compress',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_crypt'] = array(    'have_crypt',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_csv'] = array(    'have_csv',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_dynamic_loading'] = array(    'have_dynamic_loading',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_geometry'] = array(    'have_geometry',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_innodb'] = array(    'have_innodb',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_openssl'] = array(    'have_openssl',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_partitioning'] = array(    'have_partitioning',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_profiling'] = array(    'have_profiling',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_query_cache'] = array(    'have_query_cache',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_rtree_keys'] = array(    'have_rtree_keys',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_ssl'] = array(    'have_ssl',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_symlink'] = array(    'have_symlink',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['hostname'] = array(    'hostname',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['identity'] = array(    'identity',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ignore_builtin_innodb'] = array(    'ignore-builtin-innodb',    'innodb-parameters',    'option_mysqld');$VARIABLE_DOC_LINKS['init_connect'] = array(    'init_connect',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['init_file'] = array(    'init-file',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['init_slave'] = array(    'init_slave',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['innodb_adaptive_flushing'] = array(    'innodb_adaptive_flushing',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_adaptive_hash_index'] = array(    'innodb_adaptive_hash_index',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_additional_mem_pool_size'] = array(    'innodb_additional_mem_pool_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_autoextend_increment'] = array(    'innodb_autoextend_increment',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_autoinc_lock_mode'] = array(    'innodb_autoinc_lock_mode',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_buffer_pool_instances'] = array(    'innodb_buffer_pool_instances',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_buffer_pool_size'] = array(    'innodb_buffer_pool_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_change_buffering'] = array(    'innodb_change_buffering',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_checksums'] = array(    'innodb_checksums',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_commit_concurrency'] = array(    'innodb_commit_concurrency',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_concurrency_tickets'] = array(    'innodb_concurrency_tickets',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_data_file_path'] = array(    'innodb_data_file_path',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_data_home_dir'] = array(    'innodb_data_home_dir',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_doublewrite'] = array(    'innodb_doublewrite',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_fast_shutdown'] = array(    'innodb_fast_shutdown',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_format'] = array(    'innodb_file_format',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_format_check'] = array(    'innodb_file_format_check',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_format_max'] = array(    'innodb_file_format_max',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_per_table'] = array(    'innodb_file_per_table',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_flush_log_at_trx_commit'] = array(    'innodb_flush_log_at_trx_commit',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_flush_method'] = array(    'innodb_flush_method',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_force_recovery'] = array(    'innodb_force_recovery',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_io_capacity'] = array(    'innodb_io_capacity',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_lock_wait_timeout'] = array(    'innodb_lock_wait_timeout',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_locks_unsafe_for_binlog'] = array(    'innodb_locks_unsafe_for_binlog',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_log_buffer_size'] = array(    'innodb_log_buffer_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_log_file_size'] = array(    'innodb_log_file_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_log_files_in_group'] = array(    'innodb_log_files_in_group',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_log_group_home_dir'] = array(    'innodb_log_group_home_dir',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_max_dirty_pages_pct'] = array(    'innodb_max_dirty_pages_pct',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_max_purge_lag'] = array(    'innodb_max_purge_lag',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_mirrored_log_groups'] = array(    'innodb_mirrored_log_groups',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_old_blocks_pct'] = array(    'innodb_old_blocks_pct',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_old_blocks_time'] = array(    'innodb_old_blocks_time',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_open_files'] = array(    'innodb_open_files',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_purge_batch_size'] = array(    'innodb_purge_batch_size',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_purge_threads'] = array(    'innodb_purge_threads',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_read_ahead_threshold'] = array(    'innodb_read_ahead_threshold',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_read_io_threads'] = array(    'innodb_read_io_threads',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_replication_delay'] = array(    'innodb_replication_delay',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_rollback_on_timeout'] = array(    'innodb_rollback_on_timeout',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_spin_wait_delay'] = array(    'innodb_spin_wait_delay',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_stats_on_metadata'] = array(    'innodb_stats_on_metadata',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_stats_sample_pages'] = array(    'innodb_stats_sample_pages',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_strict_mode'] = array(    'innodb_strict_mode',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_support_xa'] = array(    'innodb_support_xa',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_sync_spin_loops'] = array(    'innodb_sync_spin_loops',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_table_locks'] = array(    'innodb_table_locks',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_thread_concurrency'] = array(    'innodb_thread_concurrency',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_thread_sleep_delay'] = array(    'innodb_thread_sleep_delay',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_use_native_aio'] = array(    'innodb_use_native_aio',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_use_sys_malloc'] = array(    'innodb_use_sys_malloc',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_version'] = array(    'innodb_version',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_write_io_threads'] = array(    'innodb_write_io_threads',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['insert_id'] = array(    'insert_id',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['interactive_timeout'] = array(    'interactive_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['join_buffer_size'] = array(    'join_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['keep_files_on_create'] = array(    'keep_files_on_create',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['key_buffer_size'] = array(    'key_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['key_cache_age_threshold'] = array(    'key_cache_age_threshold',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['key_cache_block_size'] = array(    'key_cache_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['key_cache_division_limit'] = array(    'key_cache_division_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['language'] = array(    'language',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['large_files_support'] = array(    'large_files_support',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['large_page_size'] = array(    'large_page_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['large_pages'] = array(    'large-pages',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['last_insert_id'] = array(    'last_insert_id',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['lc_messages'] = array(    'lc-messages',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['lc_messages_dir'] = array(    'lc-messages-dir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['lc_time_names'] = array(    'lc_time_names',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['license'] = array(    'license',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['local_infile'] = array(    'local_infile',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['lock_wait_timeout'] = array(    'lock_wait_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['locked_in_memory'] = array(    'locked_in_memory',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['log'] = array(    'log',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_bin'] = array(    'log_bin',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['log-bin'] = array(    'log-bin',    'replication-options-binary-log',    'option_mysqld');$VARIABLE_DOC_LINKS['log_bin_trust_function_creators'] = array(    'log-bin-trust-function-creators',    'replication-options-binary-log',    'option_mysqld');$VARIABLE_DOC_LINKS['log_error'] = array(    'log-error',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_output'] = array(    'log-output',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_queries_not_using_indexes'] = array(    'log-queries-not-using-indexes',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_slave_updates'] = array(    'log-slave-updates',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['log_slow_queries'] = array(    'log-slow-queries',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_warnings'] = array(    'log-warnings',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['long_query_time'] = array(    'long_query_time',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['low_priority_updates'] = array(    'low-priority-updates',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['lower_case_file_system'] = array(    'lower_case_file_system',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['lower_case_table_names'] = array(    'lower_case_table_names',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['master-bind'] = array(    '',    'replication-options',    0);$VARIABLE_DOC_LINKS['max_allowed_packet'] = array(    'max_allowed_packet',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_binlog_cache_size'] = array(    'max_binlog_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_binlog_size'] = array(    'max_binlog_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_binlog_stmt_cache_size'] = array(    'max_binlog_stmt_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_connect_errors'] = array(    'max_connect_errors',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_connections'] = array(    'max_connections',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_delayed_threads'] = array(    'max_delayed_threads',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_error_count'] = array(    'max_error_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_heap_table_size'] = array(    'max_heap_table_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_insert_delayed_threads'] = array(    'max_insert_delayed_threads',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_join_size'] = array(    'max_join_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_length_for_sort_data'] = array(    'max_length_for_sort_data',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_prepared_stmt_count'] = array(    'max_prepared_stmt_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_relay_log_size'] = array(    'max_relay_log_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_seeks_for_key'] = array(    'max_seeks_for_key',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_sort_length'] = array(    'max_sort_length',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_sp_recursion_depth'] = array(    'max_sp_recursion_depth',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_tmp_tables'] = array(    'max_tmp_tables',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_user_connections'] = array(    'max_user_connections',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_write_lock_count'] = array(    'max_write_lock_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['memlock'] = array(    'memlock',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['min_examined_row_limit'] = array(    'min-examined-row-limit',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['myisam_data_pointer_size'] = array(    'myisam_data_pointer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_max_sort_file_size'] = array(    'myisam_max_sort_file_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_mmap_size'] = array(    'myisam_mmap_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_recover_options'] = array(    'myisam_recover_options',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['myisam_repair_threads'] = array(    'myisam_repair_threads',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['myisam_sort_buffer_size'] = array(    'myisam_sort_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_stats_method'] = array(    'myisam_stats_method',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['myisam_use_mmap'] = array(    'myisam_use_mmap',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['named_pipe'] = array(    'named_pipe',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_buffer_length'] = array(    'net_buffer_length',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_read_timeout'] = array(    'net_read_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_retry_count'] = array(    'net_retry_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_write_timeout'] = array(    'net_write_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['new'] = array(    'new',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['old'] = array(    'old',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['old_alter_table'] = array(    'old-alter-table',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['old_passwords'] = array(    'old-passwords',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['open_files_limit'] = array(    'open-files-limit',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['optimizer_prune_level'] = array(    'optimizer_prune_level',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['optimizer_search_depth'] = array(    'optimizer_search_depth',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['optimizer_switch'] = array(    'optimizer_switch',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['partition'] = array(    'partition',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['performance_schema'] = array(    'performance_schema',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_events_waits_history_long_size'] = array(    'performance_schema_events_waits_history_long_size',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_events_waits_history_size'] = array(    'performance_schema_events_waits_history_size',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_cond_classes'] = array(    'performance_schema_max_cond_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_cond_instances'] = array(    'performance_schema_max_cond_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_file_classes'] = array(    'performance_schema_max_file_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_file_handles'] = array(    'performance_schema_max_file_handles',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_file_instances'] = array(    'performance_schema_max_file_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_mutex_classes'] = array(    'performance_schema_max_mutex_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_mutex_instances'] = array(    'performance_schema_max_mutex_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_rwlock_classes'] = array(    'performance_schema_max_rwlock_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_rwlock_instances'] = array(    'performance_schema_max_rwlock_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_table_handles'] = array(    'performance_schema_max_table_handles',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_table_instances'] = array(    'performance_schema_max_table_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_thread_classes'] = array(    'performance_schema_max_thread_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_thread_instances'] = array(    'performance_schema_max_thread_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['pid_file'] = array(    'pid-file',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['plugin_dir'] = array(    'plugin_dir',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['port'] = array(    'port',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['preload_buffer_size'] = array(    'preload_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['profiling'] = array(    'profiling',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['profiling_history_size'] = array(    'profiling_history_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['protocol_version'] = array(    'protocol_version',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['proxy_user'] = array(    'proxy_user',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['pseudo_thread_id'] = array(    'pseudo_thread_id',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_alloc_block_size'] = array(    'query_alloc_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['query_cache_limit'] = array(    'query_cache_limit',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['query_cache_min_res_unit'] = array(    'query_cache_min_res_unit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_cache_size'] = array(    'query_cache_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['query_cache_type'] = array(    'query_cache_type',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_cache_wlock_invalidate'] = array(    'query_cache_wlock_invalidate',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_prealloc_size'] = array(    'query_prealloc_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['rand_seed1'] = array(    'rand_seed1',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rand_seed2'] = array(    'rand_seed2',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['range_alloc_block_size'] = array(    'range_alloc_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['read_buffer_size'] = array(    'read_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['read_only'] = array(    'read_only',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['read_rnd_buffer_size'] = array(    'read_rnd_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['relay-log-index'] = array(    'relay-log-index',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['relay_log_index'] = array(    'relay_log_index',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_info_file'] = array(    'relay_log_info_file',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_purge'] = array(    'relay_log_purge',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_recovery'] = array(    'relay_log_recovery',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_space_limit'] = array(    'relay_log_space_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['report_host'] = array(    'report-host',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['report_password'] = array(    'report-password',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['report_port'] = array(    'report-port',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['report_user'] = array(    'report-user',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['rpl_recovery_rank'] = array(    'rpl_recovery_rank',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_enabled'] = array(    'rpl_semi_sync_master_enabled',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_timeout'] = array(    'rpl_semi_sync_master_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_trace_level'] = array(    'rpl_semi_sync_master_trace_level',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_wait_no_slave'] = array(    'rpl_semi_sync_master_wait_no_slave',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_slave_enabled'] = array(    'rpl_semi_sync_slave_enabled',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_slave_trace_level'] = array(    'rpl_semi_sync_slave_trace_level',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['safe_show_database'] = array(    'safe-show-database',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['secure_auth'] = array(    'secure-auth',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['secure_file_priv'] = array(    'secure-file-priv',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['server_id'] = array(    'server-id',    'replication-options',    'option_mysqld');$VARIABLE_DOC_LINKS['shared_memory'] = array(    'shared_memory',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['shared_memory_base_name'] = array(    'shared_memory_base_name',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['skip_external_locking'] = array(    'skip-external-locking',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['skip_name_resolve'] = array(    'skip-name-resolve',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['skip_networking'] = array(    'skip-networking',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['skip_show_database'] = array(    'skip-show-database',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_compressed_protocol'] = array(    'slave_compressed_protocol',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slave_exec_mode'] = array(    'slave_exec_mode',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slave_load_tmpdir'] = array(    'slave-load-tmpdir',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_net_timeout'] = array(    'slave-net-timeout',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_skip_errors'] = array(    'slave-skip-errors',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_transaction_retries'] = array(    'slave_transaction_retries',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slave_type_conversions'] = array(    'slave_type_conversions',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slow_launch_time'] = array(    'slow_launch_time',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['slow_query_log'] = array(    'slow-query-log',    'server-options',    'server-system-variables');$VARIABLE_DOC_LINKS['slow_query_log_file'] = array(    'slow_query_log_file',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['socket'] = array(    'socket',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['sort_buffer_size'] = array(    'sort_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['sql_auto_is_null'] = array(    'sql_auto_is_null',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_big_selects'] = array(    'sql_big_selects',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_big_tables'] = array(    'big-tables',    'server-options',    'server-system-variables');$VARIABLE_DOC_LINKS['sql_buffer_result'] = array(    'sql_buffer_result',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_log_bin'] = array(    'sql_log_bin',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_log_off'] = array(    'sql_log_off',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_log_update'] = array(    'sql_log_update',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_low_priority_updates'] = array(    'sql_low_priority_updates',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_max_join_size'] = array(    'sql_max_join_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_mode'] = array(    'sql-mode',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['sql_notes'] = array(    'sql_notes',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_quote_show_create'] = array(    'sql_quote_show_create',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_safe_updates'] = array(    'sql_safe_updates',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_select_limit'] = array(    'sql_select_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_slave_skip_counter'] = array(    'sql_slave_skip_counter',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['sql_warnings'] = array(    'sql_warnings',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ssl_ca'] = array(    'ssl-ca',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_capath'] = array(    'ssl-capath',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_cert'] = array(    'ssl-cert',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_cipher'] = array(    'ssl-cipher',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_key'] = array(    'ssl-key',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['storage_engine'] = array(    'storage_engine',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sync_binlog'] = array(    'sync_binlog',    'replication-options-binary-log',    'sysvar');$VARIABLE_DOC_LINKS['sync_frm'] = array(    'sync_frm',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sync_master_info'] = array(    'sync_master_info',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['sync_relay_log'] = array(    'sync_relay_log',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['sync_relay_log_info'] = array(    'sync_relay_log_info',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['system_time_zone'] = array(    'system_time_zone',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_definition_cache'] = array(    'table_definition_cache',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_lock_wait_timeout'] = array(    'table_lock_wait_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_open_cache'] = array(    'table_open_cache',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_type'] = array(    'table_type',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_cache_size'] = array(    'thread_cache_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_concurrency'] = array(    'thread_concurrency',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_handling'] = array(    'thread_handling',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_stack'] = array(    'thread_stack',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['time_format'] = array(    'time_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['time_zone'] = array(    'time_zone',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['timed_mutexes'] = array(    'timed_mutexes',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['timestamp'] = array(    'timestamp',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['tmp_table_size'] = array(    'tmp_table_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['tmpdir'] = array(    'tmpdir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['transaction_alloc_block_size'] = array(    'transaction_alloc_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['transaction_prealloc_size'] = array(    'transaction_prealloc_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['tx_isolation'] = array(    'tx_isolation',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['unique_checks'] = array(    'unique_checks',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['updatable_views_with_limit'] = array(    'updatable_views_with_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version'] = array(    'version',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version_comment'] = array(    'version_comment',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version_compile_machine'] = array(    'version_compile_machine',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version_compile_os'] = array(    'version_compile_os',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['wait_timeout'] = array(    'wait_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['warning_count'] = array(    'warning_count',    'server-system-variables',    'sysvar');?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_innodb extends PMA_StorageEngine{    /**     * @return  array     */    function getVariables()    {        return array(            'innodb_data_home_dir' => array(                'title' => __('Data home directory'),                'desc'  => __('The common part of the directory path for all InnoDB data files.'),            ),            'innodb_data_file_path' => array(                'title' => __('Data files'),            ),            'innodb_autoextend_increment' => array(                'title' => __('Autoextend increment'),                'desc'  => __('The increment size for extending the size of an autoextending tablespace when it becomes full.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_buffer_pool_size' => array(                'title' => __('Buffer pool size'),                'desc'  => __('The size of the memory buffer InnoDB uses to cache data and indexes of its tables.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_additional_mem_pool_size' => array(                'title' => 'innodb_additional_mem_pool_size',                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_buffer_pool_awe_mem_mb' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_checksums' => array(            ),            'innodb_commit_concurrency' => array(            ),            'innodb_concurrency_tickets' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_doublewrite' => array(            ),            'innodb_fast_shutdown' => array(            ),            'innodb_file_io_threads' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_file_per_table' => array(            ),            'innodb_flush_log_at_trx_commit' => array(            ),            'innodb_flush_method' => array(            ),            'innodb_force_recovery' => array(            ),            'innodb_lock_wait_timeout' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_locks_unsafe_for_binlog' => array(            ),            'innodb_log_arch_dir' => array(            ),            'innodb_log_archive' => array(            ),            'innodb_log_buffer_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_log_file_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_log_files_in_group' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_log_group_home_dir' => array(            ),            'innodb_max_dirty_pages_pct' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_max_purge_lag' => array(            ),            'innodb_mirrored_log_groups' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_open_files' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_support_xa' => array(            ),            'innodb_sync_spin_loops' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_table_locks' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_BOOLEAN,            ),            'innodb_thread_concurrency' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_thread_sleep_delay' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),         );    }    /**     * @return  string  SQL query LIKE pattern     */    function getVariablesLikePattern()    {        return 'innodb\\_%';    }    /**     * @return  array   detail pages     */    function getInfoPages()    {        if ($this->support < PMA_ENGINE_SUPPORT_YES) {            return array();        }        $pages = array();        $pages['Bufferpool'] = __('Buffer Pool');        $pages['Status'] = __('InnoDB Status');        return $pages;    }    /**     * returns html tables with stats over inno db buffer pool     *     * @return  string  html table with stats     */    function getPageBufferpool()    {        // The following query is only possible because we know        // that we are on MySQL 5 here (checked above)!        // side note: I love MySQL 5 for this. :-)        $sql = '             SHOW STATUS            WHERE Variable_name LIKE \'Innodb\\_buffer\\_pool\\_%\'               OR Variable_name = \'Innodb_page_size\';';        $status = PMA_DBI_fetch_result($sql, 0, 1);        $output = '<table class="data" id="table_innodb_bufferpool_usage">' . "\n"                . '    <caption class="tblHeaders">' . "\n"                . '        ' . __('Buffer Pool Usage') . "\n"                . '    </caption>' . "\n"                . '    <tfoot>' . "\n"                . '        <tr>' . "\n"                . '            <th colspan="2">' . "\n"                . '                ' . __('Total') . "\n"                . '                : ' . PMA_formatNumber(                        $status['Innodb_buffer_pool_pages_total'], 0)                . '&nbsp;' . __('pages')                . ' / '                . join('&nbsp;',                    PMA_formatByteDown($status['Innodb_buffer_pool_pages_total'] * $status['Innodb_page_size'])) . "\n"                . '            </th>' . "\n"                . '        </tr>' . "\n"                . '    </tfoot>' . "\n"                . '    <tbody>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Free pages') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_free'], 0)                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Dirty pages') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_dirty'], 0)                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Pages containing data') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_data'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Pages to be flushed') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_flushed'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Busy pages') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_misc'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>';            // not present at least since MySQL 5.1.40            if (isset($status['Innodb_buffer_pool_pages_latched'])) {                $output .= '        <tr class="even">'                . '            <th>' . __('Latched pages') . '</th>'                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_latched'], 0)                . '</td>'                . '        </tr>';            }            $output .= '    </tbody>' . "\n"                . '</table>' . "\n\n"                . '<table class="data" id="table_innodb_bufferpool_activity">' . "\n"                . '    <caption class="tblHeaders">' . "\n"                . '        ' . __('Buffer Pool Activity') . "\n"                . '    </caption>' . "\n"                . '    <tbody>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Read requests') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_read_requests'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Write requests') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_write_requests'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Read misses') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_reads'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Write waits') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_wait_free'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Read misses in %') . '</th>' . "\n"                . '            <td class="value">'                . ($status['Innodb_buffer_pool_read_requests'] == 0                    ? '---'                    : htmlspecialchars(PMA_formatNumber($status['Innodb_buffer_pool_reads'] * 100 / $status['Innodb_buffer_pool_read_requests'], 3, 2)) . ' %') . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Write waits in %') . '</th>' . "\n"                . '            <td class="value">'                . ($status['Innodb_buffer_pool_write_requests'] == 0                    ? '---'                    : htmlspecialchars(PMA_formatNumber($status['Innodb_buffer_pool_wait_free'] * 100 / $status['Innodb_buffer_pool_write_requests'], 3, 2)) . ' %') . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '    </tbody>' . "\n"                . '</table>' . "\n";        return $output;    }    /**     * returns InnoDB status     *     * @return  string  result of SHOW INNODB STATUS inside pre tags     */    function getPageStatus()    {        return '<pre id="pre_innodb_status">' . "\n"            . htmlspecialchars(PMA_DBI_fetch_value('SHOW INNODB STATUS;', 0, 'Status')) . "\n"            . '</pre>' . "\n";    }    /**     * returns content for page $id     *     * @param   string  $id page id     * @return  string  html output     */    function getPage($id)    {        if (! array_key_exists($id, $this->getInfoPages())) {            return false;        }        $id = 'getPage' . $id;        return $this->$id();    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'innodb';    }    /**     *       * Gets the InnoDB plugin version number      * http://www.innodb.com/products/innodb_plugin      * (do not confuse this with phpMyAdmin's storage engine plugins!)     *     * @return string the version number, or empty if not running as a plugin      */    function getInnodbPluginVersion()    {        return PMA_DBI_fetch_value('SELECT @@innodb_version;');    }    /**     *       * Gets the InnoDB file format      * (works only for the InnoDB plugin)     * http://www.innodb.com/products/innodb_plugin      * (do not confuse this with phpMyAdmin's storage engine plugins!)     *     * @return string the InnoDB file format      */    function getInnodbFileFormat()    {        return PMA_DBI_fetch_value("SHOW GLOBAL VARIABLES LIKE 'innodb_file_format';", 0, 1);    }    /**     *       * Verifies if this server supports the innodb_file_per_table feature      * (works only for the InnoDB plugin)     * http://www.innodb.com/products/innodb_plugin      * (do not confuse this with phpMyAdmin's storage engine plugins!)     *     * @return boolean whether this feature is supported or not      */    function supportsFilePerTable()    {        $innodb_file_per_table = PMA_DBI_fetch_value("SHOW GLOBAL VARIABLES LIKE 'innodb_file_per_table';", 0, 1);        if ($innodb_file_per_table == 'ON') {            return true;        } else {            return false;        }    }}?>
<?php// TCPDF FONT FILE DESCRIPTION$type='core';$name='Helvetica';$up=-100;$ut=50;$dw=513;$diff='';$enc='';$desc=array('Flags'=>32,'FontBBox'=>'[-166 -225 1000 931]','ItalicAngle'=>0,'Ascent'=>931,'Descent'=>-225,'Leading'=>0,'CapHeight'=>718,'XHeight'=>523,'StemV'=>88,'StemH'=>76,'AvgWidth'=>513,'MaxWidth'=>1015,'MissingWidth'=>513);$cw=array(0=>500,1=>500,2=>500,3=>500,4=>500,5=>500,6=>500,7=>500,8=>500,9=>500,10=>500,11=>500,12=>500,13=>500,14=>500,15=>500,16=>500,17=>500,18=>500,19=>500,20=>500,21=>500,22=>500,23=>500,24=>500,25=>500,26=>500,27=>500,28=>500,29=>500,30=>500,31=>500,32=>278,33=>278,34=>355,35=>556,36=>556,37=>889,38=>667,39=>191,40=>333,41=>333,42=>389,43=>584,44=>278,45=>333,46=>278,47=>278,48=>556,49=>556,50=>556,51=>556,52=>556,53=>556,54=>556,55=>556,56=>556,57=>556,58=>278,59=>278,60=>584,61=>584,62=>584,63=>556,64=>1015,65=>667,66=>667,67=>722,68=>722,69=>667,70=>611,71=>778,72=>722,73=>278,74=>500,75=>667,76=>556,77=>833,78=>722,79=>778,80=>667,81=>778,82=>722,83=>667,84=>611,85=>722,86=>667,87=>944,88=>667,89=>667,90=>611,91=>278,92=>278,93=>277,94=>469,95=>556,96=>333,97=>556,98=>556,99=>500,100=>556,101=>556,102=>278,103=>556,104=>556,105=>222,106=>222,107=>500,108=>222,109=>833,110=>556,111=>556,112=>556,113=>556,114=>333,115=>500,116=>278,117=>556,118=>500,119=>722,120=>500,121=>500,122=>500,123=>334,124=>260,125=>334,126=>584,127=>500,128=>655,129=>500,130=>222,131=>278,132=>333,133=>1000,134=>556,135=>556,136=>333,137=>1000,138=>667,139=>250,140=>1000,141=>500,142=>611,143=>500,144=>500,145=>222,146=>221,147=>333,148=>333,149=>350,150=>556,151=>1000,152=>333,153=>1000,154=>500,155=>250,156=>938,157=>500,158=>500,159=>667,160=>278,161=>278,162=>556,163=>556,164=>556,165=>556,166=>260,167=>556,168=>333,169=>737,170=>370,171=>448,172=>584,173=>333,174=>737,175=>333,176=>606,177=>584,178=>350,179=>350,180=>333,181=>556,182=>537,183=>278,184=>333,185=>350,186=>365,187=>448,188=>869,189=>869,190=>879,191=>556,192=>667,193=>667,194=>667,195=>667,196=>667,197=>667,198=>1000,199=>722,200=>667,201=>667,202=>667,203=>667,204=>278,205=>278,206=>278,207=>278,208=>722,209=>722,210=>778,211=>778,212=>778,213=>778,214=>778,215=>584,216=>778,217=>722,218=>722,219=>722,220=>722,221=>667,222=>666,223=>611,224=>556,225=>556,226=>556,227=>556,228=>556,229=>556,230=>896,231=>500,232=>556,233=>556,234=>556,235=>556,236=>251,237=>251,238=>251,239=>251,240=>556,241=>556,242=>556,243=>556,244=>556,245=>556,246=>556,247=>584,248=>611,249=>556,250=>556,251=>556,252=>556,253=>500,254=>555,255=>500);// --- EOF ---
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * TCPDF wrapper class. */require_once './libraries/tcpdf/tcpdf.php';/** * PDF font to use. */define('PMA_PDF_FONT', 'DejaVuSans');/** * PDF export base class providing basic configuration. */class PMA_PDF extends TCPDF{    var $footerset;    var $Alias = array();    public function __construct($orientation='P', $unit='mm', $format='A4', $unicode=true, $encoding='UTF-8', $diskcache=false)    {        parent::__construct();        $this->SetAuthor('phpMyAdmin ' . PMA_VERSION);        $this->AliasNbPages();        $this->AddFont('DejaVuSans', '', 'dejavusans.php');        $this->AddFont('DejaVuSans', 'B', 'dejavusansb.php');        $this->SetFont(PMA_PDF_FONT, '', 14);        $this->setFooterFont(array(PMA_PDF_FONT, '', 14));    }    /**     * This function must be named "Footer" to work with the TCPDF library     */    function Footer()    {        // Check if footer for this page already exists        if (!isset($this->footerset[$this->page])) {            $this->SetY(-15);            $this->SetFont(PMA_PDF_FONT, '', 14);            $this->Cell(0, 6, __('Page number:') . ' ' . $this->getAliasNumPage() . '/' .  $this->getAliasNbPages(), 'T', 0, 'C');            $this->Cell(0, 6, PMA_localisedDate(), 0, 1, 'R');            $this->SetY(20);            // set footerset            $this->footerset[$this->page] = 1;        }    }    /**     * Function to set alias which will be expanded on page rendering.     */    function SetAlias($name, $value)    {        $this->Alias[$this->UTF8ToUTF16BE($name)] = $this->UTF8ToUTF16BE($value);    }    /**     * Improved with alias expading.     */    function _putpages()    {        if (count($this->Alias) > 0) {            $nb = count($this->pages);            for ($n = 1;$n <= $nb;$n++) {                $this->pages[$n] = strtr($this->pages[$n], $this->Alias);            }        }        parent::_putpages();    }    /**     * Displays an error message     *     * @param string $error_message the error mesage     */    function Error($error_message = '')    {        include './libraries/header.inc.php';        PMA_Message::error(__('Error while creating PDF:') . ' ' . $error_message)->display();        include './libraries/footer.inc.php';    }    /**     * Sends file as a download to user.     */    function Download($filename)    {        $pdfData = $this->getPDFData();        PMA_download_header($filename, 'application/pdf', strlen($pdfData));        echo $pdfData;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Handles table zoom search tab * * display table zoom search form, create SQL queries from form data * *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';require_once './libraries/tbl_select.lib.php';require_once './libraries/relation.lib.php';require_once './libraries/tbl_info.inc.php';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'tbl_zoom_plot.js';$GLOBALS['js_include'][] = 'date.js';$GLOBALS['js_include'][] = 'jquery/jquery.mousewheel.js';$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';$GLOBALS['js_include'][] = 'canvg/canvg.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';/** * Handle AJAX request for data row on point select * @var post_params Object containing parameters for the POST request */if (isset($_REQUEST['get_data_row']) && $_REQUEST['get_data_row'] == true) {    $extra_data = array();    $row_info_query = 'SELECT * FROM `' . $_REQUEST['db'] . '`.`'        . $_REQUEST['table'] . '` WHERE ' .  $_REQUEST['where_clause'];    $result = PMA_DBI_query($row_info_query . ";", null, PMA_DBI_QUERY_STORE);    $fields_meta = PMA_DBI_get_fields_meta($result);    while ($row = PMA_DBI_fetch_assoc($result)) {        // for bit fields we need to convert them to printable form        $i = 0;        foreach ($row as $col => $val) {            if ($fields_meta[$i]->type == 'bit') {                $row[$col] = PMA_printable_bit_value($val, $fields_meta[$i]->length);            }            $i++;        }        $extra_data['row_info'] = $row;    }    PMA_ajaxResponse(null, true, $extra_data);}$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));/** * Not selection yet required -> displays the selection form */// Gets some core librariesrequire_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_select.php&amp;back=tbl_select.php';/** * Gets tables informations */require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';if (! isset($goto)) {    $goto = $GLOBALS['cfg']['DefaultTabTable'];}// Defines the url to return to in case of error in the next sql statement$err_url   = $goto . '?' . PMA_generate_common_url($db, $table);// Gets the list and number of fieldslist($fields_list, $fields_type, $fields_collation, $fields_null) = PMA_tbl_getFields($db, $table);$fields_cnt = count($fields_list);// retrieve keys into foreign fields, if any// check also foreigners even if relwork is FALSE (to get// foreign keys from innodb)$foreigners = PMA_getForeigners($db, $table);$flag = 1;$tbl_fields_type = $tbl_fields_collation = $tbl_fields_null = array();if (! isset($zoom_submit) && ! isset($inputs)) {    $dataLabel = PMA_getDisplayField($db, $table);}?><div id="sqlqueryresults"></div><fieldset id="fieldset_subtab"><?php$url_params = array();$url_params['db']    = $db;$url_params['table'] = $table;echo PMA_generate_html_tabs(PMA_tbl_getSubTabs(), $url_params, '', 'topmenu2');/** *  Set the field name,type,collation and whether null on select of a coulmn */if (isset($inputs) && ($inputs[0] != 'pma_null' || $inputs[1] != 'pma_null')) {    $flag = 2;    for ($i = 0 ; $i < 4 ; $i++) {        if ($inputs[$i] != 'pma_null') {            $key = array_search($inputs[$i], $fields_list);            $tbl_fields_type[$i] = $fields_type[$key];            $tbl_fields_collation[$i] = $fields_collation[$key];            $tbl_fields_null[$i] = $fields_null[$key];        }    }}/* * Form for input criteria */?><form method="post" action="tbl_zoom_select.php" name="insertForm" id="zoom_search_form"    <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?php echo PMA_generate_common_hidden_inputs($db, $table); ?><input type="hidden" name="goto" value="<?php echo $goto; ?>" /><input type="hidden" name="back" value="tbl_zoom_select.php" /><input type="hidden" name="flag" id="id_flag" value="<?php echo $flag; ?>" /><fieldset id="inputSection"><legend><?php echo __('Do a "query by example" (wildcard: "%") for two different columns') ?></legend><table class="data"><?php echo PMA_tbl_setTableHeader();?><tbody><?php    $odd_row = true;for ($i = 0; $i < 4; $i++) {    if ($i == 2) {        echo "<tr><td>";        echo __("Additional search criteria");        echo "</td></tr>";    }    ?>    <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">        <th><select name="inputs[]" id="<?php echo 'tableid_' . $i; ?>" >        <option value="<?php echo 'pma_null'; ?>"><?php echo __('None');  ?></option>    <?php    for ($j = 0 ; $j < $fields_cnt ; $j++) {        if (isset($inputs[$i]) && $inputs[$i] == htmlspecialchars($fields_list[$j])) {?>            <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" selected="selected">                <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php        } else { ?>            <option value="<?php echo htmlspecialchars($fields_list[$j]);?>">                <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php        }    } ?>        </select></th>        <td><?php if (isset($tbl_fields_type[$i])) echo $tbl_fields_type[$i]; ?></td>        <td><?php if (isset($tbl_fields_collation[$i])) echo $tbl_fields_collation[$i]; ?></td>        <td>    <?php    if (isset($inputs) && $inputs[$i] != 'pma_null') { ?>        <select name="zoomFunc[]">        <?php        if (strncasecmp($tbl_fields_type[$i], 'enum', 4) == 0) {            foreach ($GLOBALS['cfg']['EnumOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == htmlspecialchars($fc)) {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } elseif (preg_match('@char|blob|text|set@i', $tbl_fields_type[$i])) {            foreach ($GLOBALS['cfg']['TextOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } else {            foreach ($GLOBALS['cfg']['NumOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } // end if... else...        if ($tbl_fields_null[$i]) {            foreach ($GLOBALS['cfg']['NullOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        }        ?>        </select>        </td>        <td>        <?php        $field = $inputs[$i];        $foreignData = PMA_getForeignData($foreigners, $field, false, '', '');        if (isset($fields)) {            echo PMA_getForeignFields_Values(                $foreigners, $foreignData, $field, $tbl_fields_type, $i, $db,                $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], $fields            );        } else {            echo PMA_getForeignFields_Values(                $foreigners, $foreignData, $field, $tbl_fields_type, $i, $db,                $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], ''            );        }    } else { ?>        </td><td></td>        <?php    } ?>    </tr>    <tr><td>      <input type="hidden" name="types[<?php echo $i; ?>]" id="types_<?php echo $i; ?>"        value="<?php if(isset($tbl_fields_type[$i]))echo $tbl_fields_type[$i]; ?>" />      <input type="hidden" name="collations[<?php echo $i; ?>]"        value="<?php if(isset($tbl_fields_collation[$i]))echo $tbl_fields_collation[$i]; ?>" />    </td></tr>    <?php}//end for?>    </tbody>    </table><?php/* * Other inputs like data label and mode go after selection of column criteria *///Set default datalabel if not selectedif (isset($zoom_submit) && $inputs[0] != 'pma_null' && $inputs[1] != 'pma_null') {    if ($dataLabel == '') {        $dataLabel = PMA_getDisplayField($db, $table);    }}?>    <table class="data">    <tr><td><label for="dataLabel"><?php echo __("Use this column to label each point"); ?></label></td>    <td><select name="dataLabel" id='dataLabel' >        <option value = ''> <?php echo __('None');  ?> </option><?phpfor ($j = 0; $j < $fields_cnt; $j++) {    if (isset($dataLabel) && $dataLabel == htmlspecialchars($fields_list[$j])) {        ?>        <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" selected="selected">            <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php    } else {        ?>        <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" >            <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php    }}?>    </select>    </td></tr>    <tr><td><label for="maxRowPlotLimit"><?php echo __("Maximum rows to plot"); ?></label></td>    <td><?phpecho '<input type="text" name="maxPlotLimit" id="maxRowPlotLimit" value="';if (! empty($maxPlotLimit)) {    echo htmlspecialchars($maxPlotLimit);} else {    echo $GLOBALS['cfg']['maxRowPlotLimit'];}echo '" /></td></tr>';?>    </table></fieldset><fieldset class="tblFooters">    <input type="hidden" name="max_number_of_fields"        value="<?php echo $fields_cnt; ?>" />    <input type="submit" name="zoom_submit" id="inputFormSubmitId" value="<?php echo __('Go'); ?>" /></fieldset></form></fieldset><?php/* * Handle the input criteria and generate the query result * Form for displaying query results */if (isset($zoom_submit) && $inputs[0] != 'pma_null' && $inputs[1] != 'pma_null' && $inputs[0] != $inputs[1]) {    /*     * Query generation part     */    $w = $data = array();    $sql_query = 'SELECT *';    //Add the table    $sql_query .= ' FROM ' . PMA_backquote($table);    for ($i = 0; $i < 4; $i++) {        if ($inputs[$i] == 'pma_null') {            continue;        }        $tmp = array();        // The where clause        $charsets = array();        $cnt_func = count($zoomFunc[$i]);        $func_type = $zoomFunc[$i];        list($charsets[$i]) = explode('_', $collations[$i]);        $unaryFlag = (isset($GLOBALS['cfg']['UnaryOperators'][$func_type])                      && $GLOBALS['cfg']['UnaryOperators'][$func_type] == 1)                      ? true                      : false;        $whereClause = PMA_tbl_search_getWhereClause(            $fields[$i], $inputs[$i], $types[$i],            $collations[$i], $func_type, $unaryFlag        );        if ($whereClause) {            $w[] = $whereClause;        }    } // end for    if ($w) {        $sql_query .= ' WHERE ' . implode(' AND ', $w);    }    $sql_query .= ' LIMIT ' . $maxPlotLimit;    /*     * Query execution part     */    $result = PMA_DBI_query($sql_query . ";", null, PMA_DBI_QUERY_STORE);    $fields_meta = PMA_DBI_get_fields_meta($result);    while ($row = PMA_DBI_fetch_assoc($result)) {        //Need a row with indexes as 0,1,2 for the PMA_getUniqueCondition hence using a temporary array        $tmpRow = array();        foreach ($row as $val) {            $tmpRow[] = $val;        }        //Get unique conditon on each row (will be needed for row update)        $uniqueCondition = PMA_getUniqueCondition($result, $fields_cnt, $fields_meta, $tmpRow, true);        //Append it to row array as where_clause        $row['where_clause'] = $uniqueCondition[0];        if ($dataLabel == $inputs[0] || $dataLabel == $inputs[1]) {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                'where_clause' => $uniqueCondition[0]            );        } elseif ($dataLabel) {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                $dataLabel     => $row[$dataLabel],                'where_clause' => $uniqueCondition[0]            );        } else {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                $dataLabel     => '',                'where_clause' => $uniqueCondition[0]            );        }    }    /*     * Form for displaying point data and also the scatter plot     */    ?>    <form method="post" action="tbl_zoom_select.php" name="displayResultForm" id="zoom_display_form"        <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>>    <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>    <input type="hidden" name="goto" value="<?php echo $goto; ?>" />    <input type="hidden" name="back" value="tbl_zoom_select.php" />    <fieldset id="displaySection">      <legend><?php echo __('Browse/Edit the points') ?></legend>      <center>    <?php    //JSON encode the data(query result)    if (isset($zoom_submit) && ! empty($data)) {        ?>        <div id='resizer' style="width:600px;height:400px">          <center><a href="#" onclick="displayHelp();"><?php echo __('How to use'); ?></a></center>          <div id="querydata" style="display:none">        <?php        echo json_encode($data);        ?>          </div>          <div id="querychart" style="float:right"></div>        </div>        <?php    }    ?>      </center>      <div id='dataDisplay' style="display:none">        <table>          <thead>            <tr>              <th> <?php echo __('Column'); ?> </th>              <th> <?php echo __('Null'); ?> </th>              <th> <?php echo __('Value'); ?> </th>            </tr>          </thead>          <tbody>    <?php    $odd_row = true;    for ($i = 4; $i < $fields_cnt + 4; $i++) {        $tbl_fields_type[$i] = $fields_type[$i - 4];        $fieldpopup = $fields_list[$i - 4];        $foreignData = PMA_getForeignData($foreigners, $fieldpopup, false, '', '');        ?>            <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">              <th><?php echo htmlspecialchars($fields_list[$i - 4]); ?></th>              <th><?php echo ($fields_null[$i - 4] == 'YES')                  ? '<input type="checkbox" class="checkbox_null" name="fields_null[ '                      . $i . ' ]" id="fields_null_id_' . $i . '" />'                  : ''; ?>              </th>              <th> <?php              echo PMA_getForeignFields_Values(                  $foreigners, $foreignData, $fieldpopup, $tbl_fields_type,                  $i, $db, $table, $titles,                  $GLOBALS['cfg']['ForeignKeyMaxLimit'], '', false, true              ); ?>              </th>            </tr>        <?php    }    ?>          </tbody>        </table>    </div>    <input type="hidden" id="queryID" name="sql_query" />    </form>    <?php}require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * URL/hidden inputs generating. * * @package PhpMyAdmin *//** * Generates text with hidden inputs. * * @param string $db     optional database name *                       (can also be an array of parameters) * @param string $table  optional table name * @param int    $indent indenting level * @param string $skip   do not generate a hidden field for this parameter *                       (can be an array of strings) * * @see PMA_generate_common_url() * * @return  string   string with input fields * * @global  string   the current language * @global  string   the current conversion charset * @global  string   the current connection collation * @global  string   the current server * @global  array    the configuration array * @global  boolean  whether recoding is allowed or not * * @access  public */function PMA_generate_common_hidden_inputs($db = '', $table = '', $indent = 0, $skip = array()){    if (is_array($db)) {        $params  =& $db;        $_indent = empty($table) ? $indent : $table;        $_skip   = empty($indent) ? $skip : $indent;        $indent  =& $_indent;        $skip    =& $_skip;    } else {        $params = array();        if (strlen($db)) {            $params['db'] = $db;        }        if (strlen($table)) {            $params['table'] = $table;        }    }    if (! empty($GLOBALS['server'])        && $GLOBALS['server'] != $GLOBALS['cfg']['ServerDefault']    ) {        $params['server'] = $GLOBALS['server'];    }    if (empty($_COOKIE['pma_lang']) && ! empty($GLOBALS['lang'])) {        $params['lang'] = $GLOBALS['lang'];    }    if (empty($_COOKIE['pma_collation_connection'])        && ! empty($GLOBALS['collation_connection'])    ) {        $params['collation_connection'] = $GLOBALS['collation_connection'];    }    $params['token'] = $_SESSION[' PMA_token '];    if (! is_array($skip)) {        if (isset($params[$skip])) {            unset($params[$skip]);        }    } else {        foreach ($skip as $skipping) {            if (isset($params[$skipping])) {                unset($params[$skipping]);            }        }    }    return PMA_getHiddenFields($params);}/** * create hidden form fields from array with name => value * * <code> * $values = array( *     'aaa' => aaa, *     'bbb' => array( *          'bbb_0', *          'bbb_1', *     ), *     'ccc' => array( *          'a' => 'ccc_a', *          'b' => 'ccc_b', *     ), * ); * echo PMA_getHiddenFields($values); * * // produces: * <input type="hidden" name="aaa" Value="aaa" /> * <input type="hidden" name="bbb[0]" Value="bbb_0" /> * <input type="hidden" name="bbb[1]" Value="bbb_1" /> * <input type="hidden" name="ccc[a]" Value="ccc_a" /> * <input type="hidden" name="ccc[b]" Value="ccc_b" /> * </code> * * @param array  $values hidden values * @param string $pre    prefix * * @return string form fields of type hidden */function PMA_getHiddenFields($values, $pre = ''){    $fields = '';    foreach ($values as $name => $value) {        if (! empty($pre)) {            $name = $pre. '[' . $name . ']';        }        if (is_array($value)) {            $fields .= PMA_getHiddenFields($value, $name);        } else {            // do not generate an ending "\n" because            // PMA_generate_common_hidden_inputs() is sometimes called            // from a JS document.write()            $fields .= '<input type="hidden" name="' . htmlspecialchars($name)                . '" value="' . htmlspecialchars($value) . '" />';        }    }    return $fields;}/** * Generates text with URL parameters. * * <code> * // OLD derepecated style * // note the ? * echo 'script.php?' . PMA_generate_common_url('mysql', 'rights'); * // produces with cookies enabled: * // script.php?db=mysql&amp;table=rights * // with cookies disabled: * // script.php?server=1&amp;lang=en&amp;db=mysql&amp;table=rights * * // NEW style * $params['myparam'] = 'myvalue'; * $params['db']      = 'mysql'; * $params['table']   = 'rights'; * // note the missing ? * echo 'script.php' . PMA_generate_common_url($params); * // produces with cookies enabled: * // script.php?myparam=myvalue&amp;db=mysql&amp;table=rights * // with cookies disabled: * // script.php?server=1&amp;lang=en&amp;myparam=myvalue&amp;db=mysql&amp;table=rights * * // note the missing ? * echo 'script.php' . PMA_generate_common_url(); * // produces with cookies enabled: * // script.php * // with cookies disabled: * // script.php?server=1&amp;lang=en * </code> * * @param mixed  assoc. array with url params or optional string with database name *               if first param is an array there is also an ? prefixed to the url * * @param string - if first param is array: 'html' to use htmlspecialchars() *               on the resulting URL (for a normal URL displayed in HTML) *               or something else to avoid using htmlspecialchars() (for *               a URL sent via a header); if not set,'html' is assumed *               - if first param is not array:  optional table name * * @param string - if first param is array: optional character to *               use instead of '?' *               - if first param is not array: optional character to use *               instead of '&amp;' for dividing URL parameters * * @return  string   string with URL parameters * @access  public */function PMA_generate_common_url(){    $args = func_get_args();    if (isset($args[0]) && is_array($args[0])) {        // new style        $params = $args[0];        if (isset($args[1])) {            $encode = $args[1];        } else {            $encode = 'html';        }        if (isset($args[2])) {            $questionmark = $args[2];        } else {            $questionmark = '?';        }    } else {        // old style        if (PMA_isValid($args[0])) {            $params['db'] = $args[0];        }        if (PMA_isValid($args[1])) {            $params['table'] = $args[1];        }        if (isset($args[2]) && $args[2] !== '&amp;') {            $encode = 'text';        } else {            $encode = 'html';        }        $questionmark = '';    }    $separator = PMA_get_arg_separator();    if (isset($GLOBALS['server'])        && $GLOBALS['server'] != $GLOBALS['cfg']['ServerDefault']        // avoid overwriting when creating navi panel links to servers        && ! isset($params['server'])    ) {        $params['server'] = $GLOBALS['server'];    }    if (empty($_COOKIE['pma_lang']) && ! empty($GLOBALS['lang'])) {        $params['lang'] = $GLOBALS['lang'];    }    if (empty($_COOKIE['pma_collation_connection'])        && ! empty($GLOBALS['collation_connection'])    ) {        $params['collation_connection'] = $GLOBALS['collation_connection'];    }    if (isset($_SESSION[' PMA_token '])) {        $params['token'] = $_SESSION[' PMA_token '];    }    if (empty($params)) {        return '';    }    $query = $questionmark . http_build_query($params, null, $separator);    if ($encode === 'html') {        $query = htmlspecialchars($query);    }    return $query;}/** * Returns url separator * * extracted from arg_separator.input as set in php.ini * we do not use arg_separator.output to avoid problems with &amp; and & * * @param string $encode whether to encode separator or not, * currently 'none' or 'html' * * @return  string  character used for separating url parts usally ; or & * @access  public */function PMA_get_arg_separator($encode = 'none'){    static $separator = null;    if (null === $separator) {        // use seperators defined by php, but prefer ';'        // as recommended by W3C        $php_arg_separator_input = ini_get('arg_separator.input');        if (strpos($php_arg_separator_input, ';') !== false) {            $separator = ';';        } elseif (strlen($php_arg_separator_input) > 0) {            $separator = $php_arg_separator_input{0};        } else {            $separator = '&';        }    }    switch ($encode) {    case 'html':        return htmlentities($separator);        break;    case 'text' :    case 'none' :    default :        return $separator;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_image_jpeg__inline_info(){    return array(        'info' => __('Displays a clickable thumbnail. The options are the maximum width and height in pixels. The original aspect ratio is preserved.'),        );}/** * */function PMA_transformation_image_jpeg__inline($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    if (PMA_IS_GD2) {        $transform_options = array ('string' => '<a href="transformation_wrapper.php' . $options['wrapper_link'] . '" target="_blank"><img src="transformation_wrapper.php' . $options['wrapper_link'] . '&amp;resize=jpeg&amp;newWidth=' . (isset($options[0]) ? $options[0] : '100') . '&amp;newHeight=' . (isset($options[1]) ? $options[1] : 100) . '" alt="[__BUFFER__]" border="0" /></a>');    } else {        $transform_options = array ('string' => '<img src="transformation_wrapper.php' . $options['wrapper_link'] . '" alt="[__BUFFER__]" width="320" height="240" />');    }    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Various checks and message functions used on index page. * * Security checks are the idea of Aung Khant <aungkhant[at]yehg.net>, http://yehg.net/lab * Version check taken from the old setup script by Michal iha <michal@cihar.com> * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Initializes message list */function messages_begin(){    if (! isset($_SESSION['messages']) || !is_array($_SESSION['messages'])) {        $_SESSION['messages'] = array('error' => array(), 'notice' => array());    } else {        // reset message states        foreach ($_SESSION['messages'] as &$messages) {            foreach ($messages as &$msg) {                $msg['fresh'] = false;                $msg['active'] = false;            }        }    }}/** * Adds a new message to message list * * @param string $type one of: notice, error * @param string $id unique message identifier * @param string $title language string id (in $str array) * @param string $message message text */function messages_set($type, $id, $title, $message){    $fresh = ! isset($_SESSION['messages'][$type][$id]);    $_SESSION['messages'][$type][$id] = array(        'fresh' => $fresh,        'active' => true,        'title' => $title,        'message' => $message);}/** * Cleans up message list */function messages_end(){    foreach ($_SESSION['messages'] as &$messages) {        $remove_ids = array();        foreach ($messages as $id => &$msg) {            if ($msg['active'] == false) {                $remove_ids[] = $id;            }        }        foreach ($remove_ids as $id) {            unset($messages[$id]);        }    }}/** * Prints message list, must be called after messages_end() */function messages_show_html(){    $old_ids = array();    foreach ($_SESSION['messages'] as $type => $messages) {        foreach ($messages as $id => $msg) {            echo '<div class="' . $type . '" id="' . $id . '">' . '<h4>' . $msg['title'] . '</h4>' . $msg['message'] . '</div>';            if (!$msg['fresh'] && $type != 'error') {                $old_ids[] = $id;            }        }    }    echo "\n" . '<script type="text/javascript">';    foreach ($old_ids as $id) {        echo "\nhiddenMessages.push('$id');";    }    echo "\n</script>\n";}/** * Checks for newest phpMyAdmin version and sets result as a new notice */function PMA_version_check(){    // version check messages should always be visible so let's make    // a unique message id each time we run it    $message_id = uniqid('version_check');    // wait 3s at most for server response, it's enough to get information    // from a working server    $connection_timeout = 3;    $url = 'http://phpmyadmin.net/home_page/version.php';    $context = stream_context_create(array(        'http' => array(            'timeout' => $connection_timeout)));    $data = @file_get_contents($url, null, $context);    if ($data === false) {        if (function_exists('curl_init')) {            $ch = curl_init($url);            curl_setopt($ch, CURLOPT_HEADER, false);            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);            curl_setopt($ch, CURLOPT_TIMEOUT, $connection_timeout);            $data = curl_exec($ch);            curl_close($ch);        } else {            messages_set(                'error',                $message_id,                __('Version check'),                __('Neither URL wrapper nor CURL is available. Version check is not possible.'));            return;        }    }    if (empty($data)) {        messages_set(            'error',            $message_id,            __('Version check'),            __('Reading of version failed. Maybe you\'re offline or the upgrade server does not respond.'));        return;    }    /* Format: version\ndate\n(download\n)* */    $data_list = explode("\n", $data);    if (count($data_list) > 1) {        $version = $data_list[0];        $date = $data_list[1];    } else {        $version = $date = '';    }    $version_upstream = version_to_int($version);    if ($version_upstream === false) {        messages_set(            'error',            $message_id,            __('Version check'),            __('Got invalid version string from server'));        return;    }    $version_local = version_to_int($GLOBALS['PMA_Config']->get('PMA_VERSION'));    if ($version_local === false) {        messages_set(            'error',            $message_id,            __('Version check'),            __('Unparsable version string'));        return;    }    if ($version_upstream > $version_local) {        $version = htmlspecialchars($version);        $date = htmlspecialchars($date);        messages_set(            'notice',            $message_id,            __('Version check'),            sprintf(__('A newer version of phpMyAdmin is available and you should consider upgrading. The newest version is %s, released on %s.'), $version, $date));    } else {        if ($version_local % 100 == 0) {            messages_set(                'notice',                $message_id,                __('Version check'),                PMA_sanitize(sprintf(__('You are using Git version, run [kbd]git pull[/kbd] :-)[br]The latest stable version is %s, released on %s.'), $version, $date)));        } else {            messages_set(                'notice',                $message_id,                __('Version check'),                __('No newer stable version is available'));        }    }}/** * Calculates numerical equivalent of phpMyAdmin version string * * @param string  $version * @return mixed  false on failure, integer on success */function version_to_int($version){    $matches = array();    if (!preg_match('/^(\d+)\.(\d+)\.(\d+)((\.|-(pl|rc|dev|beta|alpha))(\d+)?(-dev)?)?$/', $version, $matches)) {        return false;    }    if (!empty($matches[6])) {        switch ($matches[6]) {            case 'pl':                $added = 60;                break;            case 'rc':                $added = 30;                break;            case 'beta':                $added = 20;                break;            case 'alpha':                $added = 10;                break;            case 'dev':                $added = 0;                break;            default:                messages_set(                    'notice',                    'version_match',                    __('Version check'),                    'Unknown version part: ' . htmlspecialchars($matches[6]));                $added = 0;                break;        }    } else {        $added = 50; // for final    }    if (!empty($matches[7])) {        $added = $added + $matches[7];    }    return $matches[1] * 1000000 + $matches[2] * 10000 + $matches[3] * 100 + $added;}/** * Checks whether config file is readable/writable * * @param bool &$is_readable * @param bool &$is_writable * @param bool &$file_exists */function check_config_rw(&$is_readable, &$is_writable, &$file_exists){    $file_path = ConfigFile::getInstance()->getFilePath();    $file_dir = dirname($file_path);    $is_readable = true;    $is_writable = is_dir($file_dir);    if (SETUP_DIR_WRITABLE) {        $is_writable = $is_writable && is_writable($file_dir);    }    $file_exists = file_exists($file_path);    if ($file_exists) {        $is_readable = is_readable($file_path);        $is_writable = $is_writable && is_writable($file_path);    }}/** * Performs various compatibility, security and consistency checks on current config * * Outputs results to message list, must be called between messages_begin() * and messages_end() */function perform_config_checks(){    $cf = ConfigFile::getInstance();    $blowfish_secret = $cf->get('blowfish_secret');    $blowfish_secret_set = false;    $cookie_auth_used = false;    $strAllowArbitraryServerWarning = __('This %soption%s should be disabled as it allows attackers to bruteforce login to any MySQL server. If you feel this is necessary, use %strusted proxies list%s. However, IP-based protection may not be reliable if your IP belongs to an ISP where thousands of users, including you, are connected to.');    $strAllowArbitraryServerWarning = sprintf($strAllowArbitraryServerWarning, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]', '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strBlowfishSecretMsg = __('You didn\'t have blowfish secret set and have enabled cookie authentication, so a key was automatically generated for you. It is used to encrypt cookies; you don\'t need to remember it.');    $strBZipDumpWarning = __('%sBzip2 compression and decompression%s requires functions (%s) which are unavailable on this system.');    $strBZipDumpWarning = sprintf($strBZipDumpWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    $strDirectoryNotice = __('This value should be double checked to ensure that this directory is neither world accessible nor readable or writable by other users on your server.');    $strForceSSLNotice = __('This %soption%s should be enabled if your web server supports it.');    $strForceSSLNotice = sprintf($strForceSSLNotice, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strGZipDumpWarning = __('%sGZip compression and decompression%s requires functions (%s) which are unavailable on this system.');    $strGZipDumpWarning = sprintf($strGZipDumpWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    $strLoginCookieValidityWarning = __('%sLogin cookie validity%s greater than 1440 seconds may cause random session invalidation if %ssession.gc_maxlifetime%s is lower than its value (currently %d).');    $strLoginCookieValidityWarning = sprintf($strLoginCookieValidityWarning, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]', '[a@' . PMA_getPHPDocLink('session.configuration.php#ini.session.gc-maxlifetime') . ']', '[/a]', ini_get('session.gc_maxlifetime'));    $strLoginCookieValidityWarning2 = __('%sLogin cookie validity%s should be set to 1800 seconds (30 minutes) at most. Values larger than 1800 may pose a security risk such as impersonation.');    $strLoginCookieValidityWarning2 = sprintf($strLoginCookieValidityWarning2, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strLoginCookieValidityWarning3 = __('If using cookie authentication and %sLogin cookie store%s is not 0, %sLogin cookie validity%s must be set to a value less or equal to it.');    $strLoginCookieValidityWarning3 = sprintf($strLoginCookieValidityWarning3, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]', '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strSecurityInfoMsg = __('If you feel this is necessary, use additional protection settings - %shost authentication%s settings and %strusted proxies list%s. However, IP-based protection may not be reliable if your IP belongs to an ISP where thousands of users, including you, are connected to.');    $strSecurityInfoMsg = sprintf($strSecurityInfoMsg, '[a@?page=servers&amp;mode=edit&amp;id=%1$d#tab_Server_config]', '[/a]', '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strServerAuthConfigMsg = __('You set the [kbd]config[/kbd] authentication type and included username and password for auto-login, which is not a desirable option for live hosts. Anyone who knows or guesses your phpMyAdmin URL can directly access your phpMyAdmin panel. Set %sauthentication type%s to [kbd]cookie[/kbd] or [kbd]http[/kbd].');    $strServerAuthConfigMsg = sprintf($strServerAuthConfigMsg, '[a@?page=servers&amp;mode=edit&amp;id=%1$d#tab_Server]', '[/a]');    $strZipDumpExportWarning = __('%sZip compression%s requires functions (%s) which are unavailable on this system.');    $strZipDumpExportWarning = sprintf($strZipDumpExportWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    $strZipDumpImportWarning = __('%sZip decompression%s requires functions (%s) which are unavailable on this system.');    $strZipDumpImportWarning = sprintf($strZipDumpImportWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    for ($i = 1, $server_cnt = $cf->getServerCount(); $i <= $server_cnt; $i++) {        $cookie_auth_server = ($cf->getValue("Servers/$i/auth_type") == 'cookie');        $cookie_auth_used |= $cookie_auth_server;        $server_name = $cf->getServerName($i);        if ($server_name == 'localhost') {            $server_name .=  " [$i]";        }        $server_name = htmlspecialchars($server_name);        if ($cookie_auth_server && $blowfish_secret === null) {            $blowfish_secret = uniqid('', true);            $blowfish_secret_set = true;            $cf->set('blowfish_secret', $blowfish_secret);        }        //        // $cfg['Servers'][$i]['ssl']        // should be enabled if possible        //        if (!$cf->getValue("Servers/$i/ssl")) {            $title = PMA_lang(PMA_lang_name('Servers/1/ssl')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/ssl",                $title,                __('You should use SSL connections if your database server supports it.'));        }        //        // $cfg['Servers'][$i]['extension']        // warn about using 'mysql'        //        if ($cf->getValue("Servers/$i/extension") == 'mysql') {            $title = PMA_lang(PMA_lang_name('Servers/1/extension')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/extension",                $title,                __('You should use mysqli for performance reasons.'));        }        //        // $cfg['Servers'][$i]['auth_type']        // warn about full user credentials if 'auth_type' is 'config'        //        if ($cf->getValue("Servers/$i/auth_type") == 'config'                && $cf->getValue("Servers/$i/user") != ''                && $cf->getValue("Servers/$i/password") != '') {            $title = PMA_lang(PMA_lang_name('Servers/1/auth_type')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/auth_type",                $title,                PMA_lang($strServerAuthConfigMsg, $i) . ' ' .                    PMA_lang($strSecurityInfoMsg, $i));        }        //        // $cfg['Servers'][$i]['AllowRoot']        // $cfg['Servers'][$i]['AllowNoPassword']        // serious security flaw        //        if ($cf->getValue("Servers/$i/AllowRoot")                && $cf->getValue("Servers/$i/AllowNoPassword")) {            $title = PMA_lang(PMA_lang_name('Servers/1/AllowNoPassword')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/AllowNoPassword",                $title,                __('You allow for connecting to the server without a password.') . ' ' .                    PMA_lang($strSecurityInfoMsg, $i));        }    }    //    // $cfg['blowfish_secret']    // it's required for 'cookie' authentication    //    if ($cookie_auth_used) {        if ($blowfish_secret_set) {            // 'cookie' auth used, blowfish_secret was generated            messages_set(                'notice',                'blowfish_secret_created',                PMA_lang(PMA_lang_name('blowfish_secret')),                $strBlowfishSecretMsg);        } else {            $blowfish_warnings = array();            // check length            if (strlen($blowfish_secret) < 8) {                // too short key                $blowfish_warnings[] = __('Key is too short, it should have at least 8 characters.');            }            // check used characters            $has_digits = (bool) preg_match('/\d/', $blowfish_secret);            $has_chars = (bool) preg_match('/\S/', $blowfish_secret);            $has_nonword = (bool) preg_match('/\W/', $blowfish_secret);            if (!$has_digits || !$has_chars || !$has_nonword) {                $blowfish_warnings[] = PMA_lang(__('Key should contain letters, numbers [em]and[/em] special characters.'));            }            if (!empty($blowfish_warnings)) {                messages_set(                    'error',                    'blowfish_warnings' . count($blowfish_warnings),                    PMA_lang(PMA_lang_name('blowfish_secret')),                    implode('<br />', $blowfish_warnings));            }        }    }    //    // $cfg['ForceSSL']    // should be enabled if possible    //    if (!$cf->getValue('ForceSSL')) {        messages_set(            'notice',            'ForceSSL',            PMA_lang(PMA_lang_name('ForceSSL')),            PMA_lang($strForceSSLNotice));    }    //    // $cfg['AllowArbitraryServer']    // should be disabled    //    if ($cf->getValue('AllowArbitraryServer')) {        messages_set(            'notice',            'AllowArbitraryServer',            PMA_lang(PMA_lang_name('AllowArbitraryServer')),            PMA_lang($strAllowArbitraryServerWarning));    }    //    // $cfg['LoginCookieValidity']    // value greater than session.gc_maxlifetime will cause random session invalidation after that time    //    if ($cf->getValue('LoginCookieValidity') > 1440            || $cf->getValue('LoginCookieValidity') > ini_get('session.gc_maxlifetime')) {        $message_type = $cf->getValue('LoginCookieValidity') > ini_get('session.gc_maxlifetime')            ? 'error'            : 'notice';        messages_set(            $message_type,            'LoginCookieValidity',            PMA_lang(PMA_lang_name('LoginCookieValidity')),            PMA_lang($strLoginCookieValidityWarning));    }    //    // $cfg['LoginCookieValidity']    // should be at most 1800 (30 min)    //    if ($cf->getValue('LoginCookieValidity') > 1800) {        messages_set(            'notice',            'LoginCookieValidity',            PMA_lang(PMA_lang_name('LoginCookieValidity')),            PMA_lang($strLoginCookieValidityWarning2));    }    //    // $cfg['LoginCookieValidity']    // $cfg['LoginCookieStore']    // LoginCookieValidity must be less or equal to LoginCookieStore    //    if ($cf->getValue('LoginCookieStore') != 0 && $cf->getValue('LoginCookieValidity') > $cf->getValue('LoginCookieStore')) {        messages_set(            'error',            'LoginCookieValidity',            PMA_lang(PMA_lang_name('LoginCookieValidity')),            PMA_lang($strLoginCookieValidityWarning3));    }    //    // $cfg['SaveDir']    // should not be world-accessible    //    if ($cf->getValue('SaveDir') != '') {        messages_set(            'notice',            'SaveDir',            PMA_lang(PMA_lang_name('SaveDir')),            PMA_lang($strDirectoryNotice));    }    //    // $cfg['TempDir']    // should not be world-accessible    //    if ($cf->getValue('TempDir') != '') {        messages_set(            'notice',            'TempDir',            PMA_lang(PMA_lang_name('TempDir')),            PMA_lang($strDirectoryNotice));    }    //    // $cfg['GZipDump']    // requires zlib functions    //    if ($cf->getValue('GZipDump')            && (@!function_exists('gzopen') || @!function_exists('gzencode'))) {        messages_set(            'error',            'GZipDump',            PMA_lang(PMA_lang_name('GZipDump')),            PMA_lang($strGZipDumpWarning, 'gzencode'));    }    //    // $cfg['BZipDump']    // requires bzip2 functions    //    if ($cf->getValue('BZipDump')            && (!@function_exists('bzopen') || !@function_exists('bzcompress'))) {        $functions = @function_exists('bzopen')                ? '' :                'bzopen';        $functions .= @function_exists('bzcompress')                ? ''                : ($functions ? ', ' : '') . 'bzcompress';        messages_set(            'error',            'BZipDump',            PMA_lang(PMA_lang_name('BZipDump')),            PMA_lang($strBZipDumpWarning, $functions));    }    //    // $cfg['ZipDump']    // requires zip_open in import    //    if ($cf->getValue('ZipDump') && !@function_exists('zip_open')) {        messages_set(            'error',            'ZipDump_import',            PMA_lang(PMA_lang_name('ZipDump')),            PMA_lang($strZipDumpImportWarning, 'zip_open'));    }    //    // $cfg['ZipDump']    // requires gzcompress in export    //    if ($cf->getValue('ZipDump') && !@function_exists('gzcompress')) {        messages_set(            'error',            'ZipDump_export',            PMA_lang(PMA_lang_name('ZipDump')),            PMA_lang($strZipDumpExportWarning, 'gzcompress'));    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets the variables sent or posted to this script, then displays headers */require_once './libraries/common.inc.php';if (! isset($selected_tbl)) {    include './libraries/db_common.inc.php';    include './libraries/db_info.inc.php';}/** * Gets the relations settings */$cfgRelation  = PMA_getRelationsParam();require_once './libraries/transformations.lib.php';/** * Check parameters */PMA_checkParameters(array('db'));/** * Defines the url to return to in case of error in a sql statement */if (strlen($table)) {    $err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);} else {    $err_url = 'db_sql.php?' . PMA_generate_common_url($db);}if ($cfgRelation['commwork']) {    $comment = PMA_getDbComment($db);    /**     * Displays DB comment     */    if ($comment) {        ?>    <p> <?php echo __('Database comment: '); ?>        <i><?php echo htmlspecialchars($comment); ?></i></p>        <?php    } // end if}/** * Selects the database and gets tables names */PMA_DBI_select_db($db);$tables = PMA_DBI_get_tables($db);$count  = 0;foreach ($tables as $table) {    $comments = PMA_getComments($db, $table);    echo '<div>' . "\n";    echo '<h2>' . htmlspecialchars($table) . '</h2>' . "\n";    /**     * Gets table informations     */    $show_comment = PMA_Table::sGetStatusInfo($db, $table, 'TABLE_COMMENT');    /**     * Gets table keys and retains them     */    PMA_DBI_select_db($db);    $indexes      = PMA_DBI_get_table_indexes($db, $table);    $primary      = '';    $indexes      = array();    $lastIndex    = '';    $indexes_info = array();    $indexes_data = array();    $pk_array     = array(); // will be use to emphasis prim. keys in the table                             // view    foreach ($indexes as $row) {        // Backups the list of primary keys        if ($row['Key_name'] == 'PRIMARY') {            $primary   .= $row['Column_name'] . ', ';            $pk_array[$row['Column_name']] = 1;        }        // Retains keys informations        if ($row['Key_name'] != $lastIndex) {            $indexes[] = $row['Key_name'];            $lastIndex = $row['Key_name'];        }        $indexes_info[$row['Key_name']]['Sequences'][]     = $row['Seq_in_index'];        $indexes_info[$row['Key_name']]['Non_unique']      = $row['Non_unique'];        if (isset($row['Cardinality'])) {            $indexes_info[$row['Key_name']]['Cardinality'] = $row['Cardinality'];        }        // I don't know what does following column mean....        // $indexes_info[$row['Key_name']]['Packed']          = $row['Packed'];        $indexes_info[$row['Key_name']]['Comment']     = $row['Comment'];        $indexes_data[$row['Key_name']][$row['Seq_in_index']]['Column_name']  = $row['Column_name'];        if (isset($row['Sub_part'])) {            $indexes_data[$row['Key_name']][$row['Seq_in_index']]['Sub_part'] = $row['Sub_part'];        }    } // end while    /**     * Gets columns properties     */    $columns = PMA_DBI_get_columns($db, $table);    $fields_cnt  = count($columns);    if (PMA_MYSQL_INT_VERSION < 50025) {        // We need this to correctly learn if a TIMESTAMP is NOT NULL, since        // SHOW FULL COLUMNS or INFORMATION_SCHEMA incorrectly says NULL        // and SHOW CREATE TABLE says NOT NULL        // http://bugs.mysql.com/20910.        $show_create_table = PMA_DBI_fetch_value(            'SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table),            0, 1);        $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));    }    // Check if we can use Relations    if (!empty($cfgRelation['relation'])) {        // Find which tables are related with the current one and write it in        // an array        $res_rel = PMA_getForeigners($db, $table);        if (count($res_rel) > 0) {            $have_rel = true;        } else {            $have_rel = false;        }    } else {        $have_rel = false;    } // end if    /**     * Displays the comments of the table if MySQL >= 3.23     */    if (!empty($show_comment)) {        echo __('Table comments') . ': ' . htmlspecialchars($show_comment) . '<br /><br />';    }    /**     * Displays the table structure     */    ?><table width="100%" class="print"><tr><th width="50"><?php echo __('Column'); ?></th>    <th width="80"><?php echo __('Type'); ?></th><?php /*    <th width="50"><?php echo __('Attributes'); ?></th>*/ ?>    <th width="40"><?php echo __('Null'); ?></th>    <th width="70"><?php echo __('Default'); ?></th><?php /*    <th width="50"><?php echo __('Extra'); ?></th>*/ ?>    <?php    if ($have_rel) {        echo '    <th>' . __('Links to') . '</th>' . "\n";    }    echo '    <th>' . __('Comments') . '</th>' . "\n";    if ($cfgRelation['mimework']) {        echo '    <th>MIME</th>' . "\n";    }    ?></tr>    <?php    $odd_row = true;    foreach ($columns as $row) {        if ($row['Null'] == '') {            $row['Null'] = 'NO';        }        $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);        // reformat mysql query output        // set or enum types: slashes single quotes inside options        if ('set' == $extracted_fieldspec['type'] || 'enum' == $extracted_fieldspec['type']) {            $type_nowrap  = '';        } else {            $type_nowrap  = ' nowrap="nowrap"';        }        $type = htmlspecialchars($extracted_fieldspec['print_type']);        $attribute     = $extracted_fieldspec['attribute'];        if (! isset($row['Default'])) {            if ($row['Null'] != 'NO') {                $row['Default'] = '<i>NULL</i>';            }        } else {            $row['Default'] = htmlspecialchars($row['Default']);        }        $field_name = $row['Field'];        if (PMA_MYSQL_INT_VERSION < 50025         && ! empty($analyzed_sql[0]['create_table_fields'][$field_name]['type'])         && $analyzed_sql[0]['create_table_fields'][$field_name]['type'] == 'TIMESTAMP'         && $analyzed_sql[0]['create_table_fields'][$field_name]['timestamp_not_null']) {            // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the            // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe            // the latter.            /**             * @todo merge this logic with the one in tbl_structure.php             * or move it in a function similar to PMA_DBI_get_columns_full()             * but based on SHOW CREATE TABLE because information_schema             * cannot be trusted in this case (MySQL bug)             */             $row['Null'] = 'NO';        }        ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">    <td nowrap="nowrap">        <?php        if (isset($pk_array[$row['Field']])) {            echo '<u>' . htmlspecialchars($field_name) . '</u>';        } else {            echo htmlspecialchars($field_name);        }        ?>    </td>    <td<?php echo $type_nowrap; ?> xml:lang="en" dir="ltr"><?php echo $type; ?></td><?php /*    <td<?php echo $type_nowrap; ?>><?php echo $attribute; ?></td>*/ ?>    <td><?php echo (($row['Null'] == 'NO') ? __('No') : __('Yes')); ?></td>    <td nowrap="nowrap"><?php if (isset($row['Default'])) { echo $row['Default']; } ?></td><?php /*    <td<?php echo $type_nowrap; ?>><?php echo $row['Extra']; ?></td>*/ ?>        <?php        if ($have_rel) {            echo '    <td>';            if (isset($res_rel[$field_name])) {                echo htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' -> ' . $res_rel[$field_name]['foreign_field']);            }            echo '</td>' . "\n";        }        echo '    <td>';        if (isset($comments[$field_name])) {            echo htmlspecialchars($comments[$field_name]);        }        echo '</td>' . "\n";        if ($cfgRelation['mimework']) {            $mime_map = PMA_getMIME($db, $table, true);            echo '    <td>';            if (isset($mime_map[$field_name])) {                echo htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype']));            }            echo '</td>' . "\n";        }        ?></tr>        <?php    } // end foreach    $count++;    ?></table></div>    <?php} //ends main while/** * Displays the footer */PMA_printButton();require './libraries/footer.inc.php';?>
<?php/*   Copyright (c) 2003, 2009 Danilo Segan <danilo@kvota.net>.   Copyright (c) 2005 Nico Kaiser <nico@siriux.net>   This file is part of PHP-gettext.   PHP-gettext is free software; you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation; either version 2 of the License, or   (at your option) any later version.   PHP-gettext is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   GNU General Public License for more details.   You should have received a copy of the GNU General Public License   along with PHP-gettext; if not, write to the Free Software   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA*//** * Provides a simple gettext replacement that works independently from * the system's gettext abilities. * It can read MO files and use them for translating strings. * The files are passed to gettext_reader as a Stream (see streams.php) * * This version has the ability to cache all strings and translations to * speed up the string lookup. * While the cache is enabled by default, it can be switched off with the * second parameter in the constructor (e.g. whenusing very large MO files * that you don't want to keep in memory) */class gettext_reader {  //public:   var $error = 0; // public variable that holds error code (0 if no error)   //private:  var $BYTEORDER = 0;        // 0: low endian, 1: big endian  var $STREAM = NULL;  var $short_circuit = false;  var $enable_cache = false;  var $originals = NULL;      // offset of original table  var $translations = NULL;    // offset of translation table  var $pluralheader = NULL;    // cache header field for plural forms  var $total = 0;          // total string count  var $table_originals = NULL;  // table for original strings (offsets)  var $table_translations = NULL;  // table for translated strings (offsets)  var $cache_translations = NULL;  // original -> translation mapping  /* Methods */  /**   * Reads a 32bit Integer from the Stream   *   * @access private   * @return Integer from the Stream   */  function readint() {      if ($this->BYTEORDER == 0) {        // low endian        $input=unpack('V', $this->STREAM->read(4));        return array_shift($input);      } else {        // big endian        $input=unpack('N', $this->STREAM->read(4));        return array_shift($input);      }    }  function read($bytes) {    return $this->STREAM->read($bytes);  }  /**   * Reads an array of Integers from the Stream   *   * @param int count How many elements should be read   * @return Array of Integers   */  function readintarray($count) {    if ($this->BYTEORDER == 0) {        // low endian        return unpack('V'.$count, $this->STREAM->read(4 * $count));      } else {        // big endian        return unpack('N'.$count, $this->STREAM->read(4 * $count));      }  }  /**   * Constructor   *   * @param object Reader the StreamReader object   * @param boolean enable_cache Enable or disable caching of strings (default on)   */  function gettext_reader($Reader, $enable_cache = true) {    // If there isn't a StreamReader, turn on short circuit mode.    if (! $Reader || isset($Reader->error) ) {      $this->short_circuit = true;      return;    }    // Caching can be turned off    $this->enable_cache = $enable_cache;    $MAGIC1 = "\x95\x04\x12\xde";    $MAGIC2 = "\xde\x12\x04\x95";    $this->STREAM = $Reader;    $magic = $this->read(4);    if ($magic == $MAGIC1) {      $this->BYTEORDER = 1;    } elseif ($magic == $MAGIC2) {      $this->BYTEORDER = 0;    } else {      $this->error = 1; // not MO file      return false;    }    // FIXME: Do we care about revision? We should.    $revision = $this->readint();    $this->total = $this->readint();    $this->originals = $this->readint();    $this->translations = $this->readint();  }  /**   * Loads the translation tables from the MO file into the cache   * If caching is enabled, also loads all strings into a cache   * to speed up translation lookups   *   * @access private   */  function load_tables() {    if (is_array($this->cache_translations) &&      is_array($this->table_originals) &&      is_array($this->table_translations))      return;    /* get original and translations tables */    if (!is_array($this->table_originals)) {      $this->STREAM->seekto($this->originals);      $this->table_originals = $this->readintarray($this->total * 2);    }    if (!is_array($this->table_translations)) {      $this->STREAM->seekto($this->translations);      $this->table_translations = $this->readintarray($this->total * 2);    }    if ($this->enable_cache) {      $this->cache_translations = array ();      /* read all strings in the cache */      for ($i = 0; $i < $this->total; $i++) {        $this->STREAM->seekto($this->table_originals[$i * 2 + 2]);        $original = $this->STREAM->read($this->table_originals[$i * 2 + 1]);        $this->STREAM->seekto($this->table_translations[$i * 2 + 2]);        $translation = $this->STREAM->read($this->table_translations[$i * 2 + 1]);        $this->cache_translations[$original] = $translation;      }    }  }  /**   * Returns a string from the "originals" table   *   * @access private   * @param int num Offset number of original string   * @return string Requested string if found, otherwise ''   */  function get_original_string($num) {    $length = $this->table_originals[$num * 2 + 1];    $offset = $this->table_originals[$num * 2 + 2];    if (! $length)      return '';    $this->STREAM->seekto($offset);    $data = $this->STREAM->read($length);    return (string)$data;  }  /**   * Returns a string from the "translations" table   *   * @access private   * @param int num Offset number of original string   * @return string Requested string if found, otherwise ''   */  function get_translation_string($num) {    $length = $this->table_translations[$num * 2 + 1];    $offset = $this->table_translations[$num * 2 + 2];    if (! $length)      return '';    $this->STREAM->seekto($offset);    $data = $this->STREAM->read($length);    return (string)$data;  }  /**   * Binary search for string   *   * @access private   * @param string string   * @param int start (internally used in recursive function)   * @param int end (internally used in recursive function)   * @return int string number (offset in originals table)   */  function find_string($string, $start = -1, $end = -1) {    if (($start == -1) or ($end == -1)) {      // find_string is called with only one parameter, set start end end      $start = 0;      $end = $this->total;    }    if (abs($start - $end) <= 1) {      // We're done, now we either found the string, or it doesn't exist      $txt = $this->get_original_string($start);      if ($string == $txt)        return $start;      else        return -1;    } else if ($start > $end) {      // start > end -> turn around and start over      return $this->find_string($string, $end, $start);    } else {      // Divide table in two parts      $half = (int)(($start + $end) / 2);      $cmp = strcmp($string, $this->get_original_string($half));      if ($cmp == 0)        // string is exactly in the middle => return it        return $half;      else if ($cmp < 0)        // The string is in the upper half        return $this->find_string($string, $start, $half);      else        // The string is in the lower half        return $this->find_string($string, $half, $end);    }  }  /**   * Translates a string   *   * @access public   * @param string string to be translated   * @return string translated string (or original, if not found)   */  function translate($string) {    if ($this->short_circuit)      return $string;    $this->load_tables();    if ($this->enable_cache) {      // Caching enabled, get translated string from cache      if (array_key_exists($string, $this->cache_translations))        return $this->cache_translations[$string];      else        return $string;    } else {      // Caching not enabled, try to find string      $num = $this->find_string($string);      if ($num == -1)        return $string;      else        return $this->get_translation_string($num);    }  }  /**   * Sanitize plural form expression for use in PHP eval call.   *   * @access private   * @return string sanitized plural form expression   */  function sanitize_plural_expression($expr) {    // Get rid of disallowed characters.    $expr = preg_replace('@[^a-zA-Z0-9_:;\(\)\?\|\&=!<>+*/\%-]@', '', $expr);    // Add parenthesis for tertiary '?' operator.    $expr .= ';';    $res = '';    $p = 0;    for ($i = 0; $i < strlen($expr); $i++) {      $ch = $expr[$i];      switch ($ch) {      case '?':        $res .= ' ? (';        $p++;        break;      case ':':        $res .= ') : (';        break;      case ';':        $res .= str_repeat( ')', $p) . ';';        $p = 0;        break;      default:        $res .= $ch;      }    }    return $res;  }  /**   * Parse full PO header and extract only plural forms line.   *   * @access private   * @return string verbatim plural form header field   */  function extract_plural_forms_header_from_po_header($header) {    if (preg_match("/(^|\n)plural-forms: ([^\n]*)\n/i", $header, $regs))      $expr = $regs[2];    else      $expr = "nplurals=2; plural=n == 1 ? 0 : 1;";    return $expr;  }  /**   * Get possible plural forms from MO header   *   * @access private   * @return string plural form header   */  function get_plural_forms() {    // lets assume message number 0 is header    // this is true, right?    $this->load_tables();    // cache header field for plural forms    if (! is_string($this->pluralheader)) {      if ($this->enable_cache) {        $header = $this->cache_translations[""];      } else {        $header = $this->get_translation_string(0);      }      $expr = $this->extract_plural_forms_header_from_po_header($header);      $this->pluralheader = $this->sanitize_plural_expression($expr);    }    return $this->pluralheader;  }  /**   * Detects which plural form to take   *   * @access private   * @param n count   * @return int array index of the right plural form   */  function select_string($n) {    $string = $this->get_plural_forms();    $string = str_replace('nplurals',"\$total",$string);    $string = str_replace("n",$n,$string);    $string = str_replace('plural',"\$plural",$string);    $total = 0;    $plural = 0;    eval("$string");    if ($plural >= $total) $plural = $total - 1;    return $plural;  }  /**   * Plural version of gettext   *   * @access public   * @param string single   * @param string plural   * @param string number   * @return translated plural form   */  function ngettext($single, $plural, $number) {    if ($this->short_circuit) {      if ($number != 1)        return $plural;      else        return $single;    }    // find out the appropriate form    $select = $this->select_string($number);    // this should contains all strings separated by NULLs    $key = $single . chr(0) . $plural;    if ($this->enable_cache) {      if (! array_key_exists($key, $this->cache_translations)) {        return ($number != 1) ? $plural : $single;      } else {        $result = $this->cache_translations[$key];        $list = explode(chr(0), $result);        return $list[$select];      }    } else {      $num = $this->find_string($key);      if ($num == -1) {        return ($number != 1) ? $plural : $single;      } else {        $result = $this->get_translation_string($num);        $list = explode(chr(0), $result);        return $list[$select];      }    }  }  function pgettext($context, $msgid) {    $key = $context . chr(4) . $msgid;    $ret = $this->translate($key);    if (strpos($ret, "\004") !== FALSE) {      return $msgid;    } else {      return $ret;    }  }  function npgettext($context, $singular, $plural, $number) {    $key = $context . chr(4) . $singular;    $ret = $this->ngettext($key, $plural, $number);    if (strpos($ret, "\004") !== FALSE) {      return $singular;    } else {      return $ret;    }  }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build dumps of tables as PHP Arrays * * @package PhpMyAdmin-Export * @subpackage PHP */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['php_array'] = array(        'text'          => __('PHP array'),        'extension'     => 'php',        'mime_type'     => 'text/plain',        'options'       => array(        array('type' => 'begin_group', 'name' => 'general_opts'),            array(                'type' => 'hidden',                'name' => 'structure_or_data',            ),        array('type' => 'end_group')        ),        'options_text'  => __('Options'),    );} else {    /**     * Set of functions used to build exports of tables     */    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        PMA_exportOutputHandler(              '<?php' . $GLOBALS['crlf']            . '/**' . $GLOBALS['crlf']            . ' * Export to PHP Array plugin for PHPMyAdmin' . $GLOBALS['crlf']            . ' * @version 0.2b' . $GLOBALS['crlf']            . ' */' . $GLOBALS['crlf'] . $GLOBALS['crlf']        );        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        PMA_exportOutputHandler('//' . $GLOBALS['crlf'] . '// Database ' . PMA_backquote($db) . $GLOBALS['crlf'] . '//' . $GLOBALS['crlf']);        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table as a fragment of PHP code     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = stripslashes(PMA_DBI_field_name($result, $i));        }        unset($i);        // fix variable names (based on http://www.php.net/manual/language.variables.basics.php)        if (preg_match('/^[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*$/', $table) == false) {            // fix invalid chars in variable names by replacing them with underscores            $tablefixed = preg_replace('/[^a-zA-Z0-9_\x7f-\xff]/', '_', $table);            // variable name must not start with a number or dash...            if (preg_match('/^[a-zA-Z_\x7f-\xff]/', $tablefixed) == false) {                $tablefixed = '_' . $tablefixed;            }        } else {            $tablefixed = $table;        }        $buffer = '';        $record_cnt = 0;        while ($record = PMA_DBI_fetch_row($result)) {            $record_cnt++;            // Output table name as comment if this is the first record of the table            if ($record_cnt == 1) {                $buffer .= $crlf . '// ' . PMA_backquote($db) . '.' . PMA_backquote($table) . $crlf;                $buffer .= '$' . $tablefixed . ' = array(' . $crlf;                $buffer .= '  array(';            } else {                $buffer .= ',' . $crlf . '  array(';            }            for ($i = 0; $i < $columns_cnt; $i++) {                $buffer .= var_export($columns[$i], true) . " => " . var_export($record[$i], true) . (($i + 1 >= $columns_cnt) ? '' : ',');            }            $buffer .= ')';        }        $buffer .= $crlf . ');' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        PMA_DBI_free_result($result);        return true;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */$GLOBALS['data_dictionary_relations'] = array(    'CHARACTER_SETS' => array(        'DEFAULT_COLLATE_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLLATIONS' => array(        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        )    ),    'COLUMNS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        ),        'COLLATION_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'INDEXES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'INDEX_PARTS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'INNODB_LOCKS' => array(        'LOCK_TRX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_TRX',            'foreign_field' => 'TRX_ID'        )    ),    'INNODB_LOCK_WAITS' => array(        'REQUESTING_TRX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_TRX',            'foreign_field' => 'TRX_ID'        ),        'REQUESTED_LOCK_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_LOCKS',            'foreign_field' => 'LOCK_ID'        ),        'BLOCKING_TRX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_TRX',            'foreign_field' => 'TRX_ID'        ),        'BLOCKING_LOCK_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_LOCKS',            'foreign_field' => 'LOCK_ID'        )    ),    'INNODB_SYS_COLUMNS' => array(        'TABLE_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_TABLES',            'foreign_field' => 'TABLE_ID'        )    ),    'INNODB_SYS_FIELDS' => array(        'INDEX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_INDEXES',            'foreign_field' => 'INDEX_ID'        )    ),    'INNODB_SYS_INDEXES' => array(        'TABLE_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_TABLES',            'foreign_field' => 'TABLE_ID'        )    ),    'INNODB_SYS_TABLESTATS' => array(        'TABLE_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_TABLES',            'foreign_field' => 'TABLE_ID'        )    ),    'PLUGINS' => array(        'MODULE_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'MODULES',            'foreign_field' => 'MODULE_NAME'        )    ),    'SCHEMAS' => array(        'DEFAULT_COLLATION_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'TABLES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_COLLATION' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'TABLE_CACHE' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLE_CONSTRAINTS' => array(        'CONSTRAINT_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLE_DEFINITION_CACHE' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ));?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Gets the variables sent or posted to this script, then displays headers */$print_view = true;require_once './libraries/header.inc.php';PMA_checkParameters(array('db'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'db_sql.php?' . PMA_generate_common_url($db);/** * Settings for relations stuff */$cfgRelation = PMA_getRelationsParam();/** * Gets the list of the table in the current db and informations about these * tables if possible * * @todo merge this speedup _optionaly_ into PMA_DBI_get_tables_full() *// speedup view on locked tables// Special speedup for newer MySQL Versions (in 4.0 format changed)if ($cfg['SkipLockedTables'] == true) {    $result = PMA_DBI_query('SHOW OPEN TABLES FROM ' . PMA_backquote($db) . ';');    // Blending out tables in use    if ($result != false && PMA_DBI_num_rows($result) > 0) {        while ($tmp = PMA_DBI_fetch_row($result)) {            // if in use memorize tablename            if (preg_match('@in_use=[1-9]+@i', $tmp[0])) {                $sot_cache[$tmp[0]] = true;            }        }        PMA_DBI_free_result($result);        if (isset($sot_cache)) {            $result      = PMA_DBI_query('SHOW TABLES FROM ' . PMA_backquote($db) . ';', null, PMA_DBI_QUERY_STORE);            if ($result != false && PMA_DBI_num_rows($result) > 0) {                while ($tmp = PMA_DBI_fetch_row($result)) {                    if (! isset($sot_cache[$tmp[0]])) {                        $sts_result  = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ' LIKE \'' . PMA_sqlAddSlashes($tmp[0], true) . '\';');                        $sts_tmp     = PMA_DBI_fetch_assoc($sts_result);                        $tables[]    = $sts_tmp;                    } else { // table in use                        $tables[]    = array('Name' => $tmp[0]);                    }                }                PMA_DBI_free_result($result);                $sot_ready = true;            }        }        unset($tmp, $result);    }}if (! isset($sot_ready)) {    $result      = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ';');    if (PMA_DBI_num_rows($result) > 0) {        while ($sts_tmp = PMA_DBI_fetch_assoc($result)) {            $tables[] = $sts_tmp;        }        PMA_DBI_free_result($result);        unset($res);    }} *//** * If there is at least one table, displays the printer friendly view, else * an error message */$tables = PMA_DBI_get_tables_full($db);$num_tables = count($tables);echo '<br />';// 1. No tableif ($num_tables == 0) {    echo __('No tables found in database.');} else {// 2. Shows table information    ?><table><thead><tr>    <th><?php echo __('Table'); ?></th>    <th><?php echo __('Rows'); ?></th>    <th><?php echo __('Type'); ?></th>    <?php    if ($cfg['ShowStats']) {        echo '<th>' . __('Size') . '</th>';    }    ?>    <th><?php echo __('Comments'); ?></th></tr></thead><tbody>    <?php    $sum_entries = $sum_size = 0;    $odd_row = true;    foreach ($tables as $sts_data) {        if (PMA_Table::isMerge($db, $sts_data['TABLE_NAME'])         || strtoupper($sts_data['ENGINE']) == 'FEDERATED') {            $merged_size = true;        } else {            $merged_size = false;        }        $sum_entries += $sts_data['TABLE_ROWS'];        ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">    <th>        <?php echo htmlspecialchars($sts_data['TABLE_NAME']); ?>    </th>        <?php        if (isset($sts_data['TABLE_ROWS'])) {            ?>    <td align="right">            <?php            if ($merged_size) {                echo '<i>' . PMA_formatNumber($sts_data['TABLE_ROWS'], 0) . '</i>' . "\n";            } else {                echo PMA_formatNumber($sts_data['TABLE_ROWS'], 0) . "\n";            }            ?>    </td>    <td nowrap="nowrap">        <?php echo $sts_data['ENGINE']; ?>    </td>            <?php            if ($cfg['ShowStats']) {                $tblsize =  $sts_data['Data_length'] + $sts_data['Index_length'];                $sum_size += $tblsize;                list($formated_size, $unit) =  PMA_formatByteDown($tblsize, 3, 1);                ?>    <td align="right" nowrap="nowrap">        <?php echo $formated_size . ' ' . $unit; ?>    </td>                <?php            } // end if        } else {            ?>    <td colspan="3" align="center">        <?php echo __('in use'); ?>    </td>            <?php        }        ?>    <td>        <?php        if (! empty($sts_data['Comment'])) {            echo htmlspecialchars($sts_data['Comment']);            $needs_break = '<br />';        } else {            $needs_break = '';        }        if (! empty($sts_data['Create_time'])         || ! empty($sts_data['Update_time'])         || ! empty($sts_data['Check_time'])) {            echo $needs_break;            ?>            <table width="100%">            <?php            if (! empty($sts_data['Create_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Creation') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Create_time'])); ?></td>                </tr>                <?php            }            if (! empty($sts_data['Update_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Last update') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Update_time'])); ?></td>                </tr>                <?php            }            if (! empty($sts_data['Check_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Last check') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Check_time'])); ?></td>                </tr>                <?php            }            ?>            </table>            <?php        }        ?>    </td></tr>        <?php    }    ?><tr>    <th align="center">        <?php echo sprintf(_ngettext('%s table', '%s tables', $num_tables), PMA_formatNumber($num_tables, 0)); ?>    </th>    <th align="right" nowrap="nowrap">        <?php echo PMA_formatNumber($sum_entries, 0); ?>    </th>    <th align="center">        --    </th>    <?php    if ($cfg['ShowStats']) {        list($sum_formated, $unit) = PMA_formatByteDown($sum_size, 3, 1);        ?>    <th align="right" nowrap="nowrap">        <?php echo $sum_formated . ' ' . $unit; ?>    </th>        <?php    }    ?>    <th></th></tr></tbody></table>    <?php}/** * Displays the footer */PMA_printButton();echo "<div id='PMA_disable_floating_menubar'></div>\n";require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once './libraries/Message.class.php';/** * Handles the recently used tables. * * @TODO Change the release version in table pma_recent (#recent in Documentation.html) * * @package PhpMyAdmin */class PMA_RecentTable{    /**     * Defines the internal PMA table which contains recent tables.     *     * @access  private     * @var string     */    private $pma_table;    /**     * Reference to session variable containing recently used tables.     *     * @access public     * @var array     */    public $tables;    /**     * PMA_RecentTable instance.     *     * @var PMA_RecentTable     */    private static $_instance;    public function __construct()    {        if (strlen($GLOBALS['cfg']['Server']['pmadb']) &&            strlen($GLOBALS['cfg']['Server']['recent'])) {            $this->pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) .".".                               PMA_backquote($GLOBALS['cfg']['Server']['recent']);        }        $server_id = $GLOBALS['server'];        if (! isset($_SESSION['tmp_user_values']['recent_tables'][$server_id])) {            $_SESSION['tmp_user_values']['recent_tables'][$server_id] =                isset($this->pma_table) ? $this->getFromDb() : array();        }        $this->tables =& $_SESSION['tmp_user_values']['recent_tables'][$server_id];    }    /**     * Returns class instance.     *     * @return PMA_RecentTable     */    public static function getInstance()    {        if (is_null(self::$_instance)) {            self::$_instance = new PMA_RecentTable();        }        return self::$_instance;    }    /**     * Returns recently used tables from phpMyAdmin database.     *     *     * @return array     */    public function getFromDb()    {        // Read from phpMyAdmin database, if recent tables is not in session        $sql_query            = " SELECT `tables` FROM " . $this->pma_table .            " WHERE `username` = '" . $GLOBALS['cfg']['Server']['user'] . "'";        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        if (isset($row[0])) {            return json_decode($row[0], true);        } else {            return array();        }    }    /**     * Save recent tables into phpMyAdmin database.     *     *     * @return true|PMA_Message     */    public function saveToDb()    {        $username = $GLOBALS['cfg']['Server']['user'];        $sql_query            = " REPLACE INTO " . $this->pma_table . " (`username`, `tables`)" .            " VALUES ('" . $username . "', '" . PMA_sqlAddSlashes(json_encode($this->tables)) . "')";        $success = PMA_DBI_try_query($sql_query, $GLOBALS['controllink']);        if (!$success) {            $message = PMA_Message::error(__('Could not save recent table'));            $message->addMessage('<br /><br />');            $message->addMessage(PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink'])));            return $message;        }        return true;    }    /**     * Trim recent table according to the LeftRecentTable configuration.     *     * @return boolean True if trimming occurred     */    public function trim()    {        $max = max($GLOBALS['cfg']['LeftRecentTable'], 0);        $trimming_occured = count($this->tables) > $max;        while (count($this->tables) > $max) {            array_pop($this->tables);        }        return $trimming_occured;    }    /**     * Return options for HTML select.     *     * @return string     */    public function getHtmlSelectOption()    {        // trim and save, in case where the configuration is changed        if ($this->trim() && isset($this->pma_table)) {            $this->saveToDb();        }        $html = '<option value="">(' . __('Recent tables') . ') ...</option>';        if (count($this->tables)) {            foreach ($this->tables as $table) {                $html .= '<option value="' . htmlspecialchars(json_encode($table)) . '">' .                         htmlspecialchars('`' . $table['db'] . '`.`' . $table['table'] . '`') . '</option>';            }        } else {            $html .= '<option value="">' . __('There are no recent tables') . '</option>';        }        return $html;    }    /**     * Return HTML select.     *     * @return string     */    public function getHtmlSelect()    {        $html  = '<input type="hidden" name="goto" id="LeftDefaultTabTable" value="' .                         htmlspecialchars($GLOBALS['cfg']['LeftDefaultTabTable']) . '" />';        $html .= '<select name="selected_recent_table" id="recentTable">';        $html .= $this->getHtmlSelectOption();        $html .= '</select>';        return $html;    }    /**     * Add recently used tables.     *     * @param string $db Database name where the table is located     * @param string $table Table name     *     * @return true|PMA_Message True if success, PMA_Message if not     */    public function add($db, $table)    {        $table_arr = array();        $table_arr['db'] = $db;        $table_arr['table'] = $table;        // add only if this is new table        if (! isset($this->tables[0]) || $this->tables[0] != $table_arr) {            array_unshift($this->tables, $table_arr);            $this->tables = array_merge(array_unique($this->tables, SORT_REGULAR));            $this->trim();            if (isset($this->pma_table)) {                return $this->saveToDb();            }        }        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Produce a PDF report (export) from a query * * @package PhpMyAdmin-Export * @subpackage PDF */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['pdf'] = array(        'text' => __('PDF'),        'extension' => 'pdf',        'mime_type' => 'application/pdf',        'force_file' => true,        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'message_only', 'name' => 'explanation', 'text' => __('(Generates a report containing the data of a single table)')),            array('type' => 'text', 'name' => 'report_title', 'text' => __('Report title:')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );} else {    include_once './libraries/PDF.class.php';    /**     * Adapted from a LGPL script by Philip Clarke     * @package PhpMyAdmin-Export     * @subpackage PDF     */    class PMA_Export_PDF extends PMA_PDF    {        var $tablewidths;        var $headerset;        function checkPageBreak($h = 0, $y = '', $addpage = true)        {            if ($this->empty_string($y)) {                $y = $this->y;            }            $current_page = $this->page;            if ((($y + $h) > $this->PageBreakTrigger) AND (! $this->InFooter) AND ($this->AcceptPageBreak())) {                if ($addpage) {                    //Automatic page break                    $x = $this->x;                    $this->AddPage($this->CurOrientation);                    $this->y = $this->dataY;                    $oldpage = $this->page - 1;                    if ($this->rtl) {                        if ($this->pagedim[$this->page]['orm'] != $this->pagedim[$oldpage]['orm']) {                            $this->x = $x - ($this->pagedim[$this->page]['orm'] - $this->pagedim[$oldpage]['orm']);                        } else {                            $this->x = $x;                        }                    } else {                        if ($this->pagedim[$this->page]['olm'] != $this->pagedim[$oldpage]['olm']) {                            $this->x = $x + ($this->pagedim[$this->page]['olm'] - $this->pagedim[$oldpage]['olm']);                        } else {                            $this->x = $x;                        }                    }                }                return true;            }            if ($current_page != $this->page) {                // account for columns mode                return true;            }            return false;        }        function Header()        {            global $maxY;            // Check if header for this page already exists            if (! isset($this->headerset[$this->page])) {                $fullwidth = 0;                foreach ($this->tablewidths as $width) {                    $fullwidth += $width;                }                $this->SetY(($this->tMargin) - ($this->FontSizePt / $this->k) * 5);                $this->cellFontSize = $this->FontSizePt ;                $this->SetFont(PMA_PDF_FONT, '', ($this->titleFontSize ? $this->titleFontSize : $this->FontSizePt));                $this->Cell(0, $this->FontSizePt, $this->titleText, 0, 1, 'C');                $this->SetFont(PMA_PDF_FONT, '', $this->cellFontSize);                $this->SetY(($this->tMargin) - ($this->FontSizePt / $this->k) * 2.5);                $this->Cell(                    0, $this->FontSizePt,                    __('Database') . ': ' . $this->currentDb . ',  ' . __('Table') . ': ' . $this->currentTable,                    0, 1, 'L'                );                $l = ($this->lMargin);                foreach ($this->colTitles as $col => $txt) {                    $this->SetXY($l, ($this->tMargin));                    $this->MultiCell($this->tablewidths[$col], $this->FontSizePt, $txt);                    $l += $this->tablewidths[$col] ;                    $maxY = ($maxY < $this->getY()) ? $this->getY() : $maxY ;                }                $this->SetXY($this->lMargin, $this->tMargin);                $this->setFillColor(200, 200, 200);                $l = ($this->lMargin);                foreach ($this->colTitles as $col => $txt) {                    $this->SetXY($l, $this->tMargin);                    $this->cell($this->tablewidths[$col], $maxY-($this->tMargin), '', 1, 0, 'L', 1);                    $this->SetXY($l, $this->tMargin);                    $this->MultiCell($this->tablewidths[$col], $this->FontSizePt, $txt, 0, 'C');                    $l += $this->tablewidths[$col];                }                $this->setFillColor(255, 255, 255);                // set headerset                $this->headerset[$this->page] = 1;            }            $this->dataY = $maxY;        }        function morepagestable($lineheight=8)        {            // some things to set and 'remember'            $l = $this->lMargin;            $startheight = $h = $this->dataY;            $startpage = $currpage = $this->page;            // calculate the whole width            $fullwidth = 0;            foreach ($this->tablewidths as $width) {                $fullwidth += $width;            }            // Now let's start to write the table            $row = 0;            $tmpheight = array();            $maxpage = $this->page;            while ($data = PMA_DBI_fetch_row($this->results)) {                $this->page = $currpage;                // write the horizontal borders                $this->Line($l, $h, $fullwidth+$l, $h);                // write the content and remember the height of the highest col                foreach ($data as $col => $txt) {                    $this->page = $currpage;                    $this->SetXY($l, $h);                    if ($this->tablewidths[$col] > 0) {                        $this->MultiCell($this->tablewidths[$col], $lineheight, $txt, 0, $this->colAlign[$col]);                        $l += $this->tablewidths[$col];                    }                    if (!isset($tmpheight[$row.'-'.$this->page])) {                        $tmpheight[$row.'-'.$this->page] = 0;                    }                    if ($tmpheight[$row.'-'.$this->page] < $this->GetY()) {                        $tmpheight[$row.'-'.$this->page] = $this->GetY();                    }                    if ($this->page > $maxpage) {                        $maxpage = $this->page;                    }                    unset($data[$col]);                }                // get the height we were in the last used page                $h = $tmpheight[$row.'-'.$maxpage];                // set the "pointer" to the left margin                $l = $this->lMargin;                // set the $currpage to the last page                $currpage = $maxpage;                unset($data[$row]);                $row++;            }            // draw the borders            // we start adding a horizontal line on the last page            $this->page = $maxpage;            $this->Line($l, $h, $fullwidth+$l, $h);            // now we start at the top of the document and walk down            for ($i = $startpage; $i <= $maxpage; $i++) {                $this->page = $i;                $l = $this->lMargin;                $t = ($i == $startpage) ? $startheight : $this->tMargin;                $lh = ($i == $maxpage) ? $h : $this->h-$this->bMargin;                $this->Line($l, $t, $l, $lh);                foreach ($this->tablewidths as $width) {                    $l += $width;                    $this->Line($l, $t, $l, $lh);                }            }            // set it to the last page, if not it'll cause some problems            $this->page = $maxpage;        }        function setAttributes($attr = array())        {            foreach ($attr as $key => $val) {                $this->$key = $val ;            }        }        function setTopMargin($topMargin)        {            $this->tMargin = $topMargin;        }        function mysql_report($query)        {            unset($this->tablewidths);            unset($this->colTitles);            unset($this->titleWidth);            unset($this->colFits);            unset($this->display_column);            unset($this->colAlign);            /**             * Pass 1 for column widths             */            $this->results = PMA_DBI_query($query, null, PMA_DBI_QUERY_UNBUFFERED);            $this->numFields  = PMA_DBI_num_fields($this->results);            $this->fields = PMA_DBI_get_fields_meta($this->results);            // sColWidth = starting col width (an average size width)            $availableWidth = $this->w - $this->lMargin - $this->rMargin;            $this->sColWidth = $availableWidth / $this->numFields;            $totalTitleWidth = 0;            // loop through results header and set initial col widths/ titles/ alignment            // if a col title is less than the starting col width, reduce that column size            $colFits = array();            for ($i = 0; $i < $this->numFields; $i++) {                $stringWidth = $this->getstringwidth($this->fields[$i]->name) + 6 ;                // save the real title's width                $titleWidth[$i] = $stringWidth;                $totalTitleWidth += $stringWidth;                // set any column titles less than the start width to the column title width                if ($stringWidth < $this->sColWidth) {                    $colFits[$i] = $stringWidth ;                }                $this->colTitles[$i] = $this->fields[$i]->name;                $this->display_column[$i] = true;                switch ($this->fields[$i]->type) {                case 'int':                    $this->colAlign[$i] = 'R';                    break;                case 'blob':                case 'tinyblob':                case 'mediumblob':                case 'longblob':                    /**                     * @todo do not deactivate completely the display                     * but show the field's name and [BLOB]                     */                    if (stristr($this->fields[$i]->flags, 'BINARY')) {                        $this->display_column[$i] = false;                        unset($this->colTitles[$i]);                    }                    $this->colAlign[$i] = 'L';                    break;                default:                    $this->colAlign[$i] = 'L';                }            }            // title width verification            if ($totalTitleWidth > $availableWidth) {                $adjustingMode = true;            } else {                $adjustingMode = false;                // we have enough space for all the titles at their                // original width so use the true title's width                foreach ($titleWidth as $key => $val) {                    $colFits[$key] = $val;                }            }            // loop through the data; any column whose contents            // is greater than the column size is resized            /**              * @todo force here a LIMIT to avoid reading all rows              */            while ($row = PMA_DBI_fetch_row($this->results)) {                foreach ($colFits as $key => $val) {                    $stringWidth = $this->getstringwidth($row[$key]) + 6 ;                    if ($adjustingMode && ($stringWidth > $this->sColWidth)) {                        // any column whose data's width is bigger than                        // the start width is now discarded                        unset($colFits[$key]);                    } else {                        // if data's width is bigger than the current column width,                        // enlarge the column (but avoid enlarging it if the                        // data's width is very big)                        if ($stringWidth > $val && $stringWidth < ($this->sColWidth * 3)) {                            $colFits[$key] = $stringWidth ;                        }                    }                }            }            $totAlreadyFitted = 0;            foreach ($colFits as $key => $val) {                // set fitted columns to smallest size                $this->tablewidths[$key] = $val;                // to work out how much (if any) space has been freed up                $totAlreadyFitted += $val;            }            if ($adjustingMode) {                $surplus = (sizeof($colFits) * $this->sColWidth) - $totAlreadyFitted;                $surplusToAdd = $surplus / ($this->numFields - sizeof($colFits));            } else {                $surplusToAdd = 0;            }            for ($i=0; $i < $this->numFields; $i++) {                if (!in_array($i, array_keys($colFits))) {                    $this->tablewidths[$i] = $this->sColWidth + $surplusToAdd;                }                if ($this->display_column[$i] == false) {                    $this->tablewidths[$i] = 0;                }            }            ksort($this->tablewidths);            PMA_DBI_free_result($this->results);            // Pass 2            $this->results = PMA_DBI_query($query, null, PMA_DBI_QUERY_UNBUFFERED);            $this->setY($this->tMargin);            $this->AddPage();            $this->SetFont(PMA_PDF_FONT, '', 9);            $this->morepagestable($this->FontSizePt);            PMA_DBI_free_result($this->results);        } // end of mysql_report function    } // end of PMA_Export_PDF class    $pdf = new PMA_Export_PDF('L', 'pt', 'A3');    /**     * Finalize the pdf.     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        global $pdf;        // instead of $pdf->Output():        if (!PMA_exportOutputHandler($pdf->getPDFData())) {            return false;        }        return true;    }    /**     * Initialize the pdf to export data.     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        global $pdf_report_title;        global $pdf;        $pdf->Open();        $attr = array('titleFontSize' => 18, 'titleText' => $pdf_report_title);        $pdf->setAttributes($attr);        $pdf->setTopMargin(30);        return true;    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        return true;    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in PDF format     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $pdf;        $attr=array('currentDb' => $db, 'currentTable' => $table);        $pdf->setAttributes($attr);        $pdf->mysql_report($sql_query);        return true;    } // end of the 'PMA_exportData()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */# GNU iconv code set to IBM AIX libiconv code set table# Keys of this table should be in lowercase, and searches should be performed using lowercase!$gnu_iconv_to_aix_iconv_codepage_map = array (    // "iso-8859-[1-9]" --> "ISO8859-[1-9]" according to http://publibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/libs/basetrf2/setlocale.htm    'iso-8859-1' => 'ISO8859-1',    'iso-8859-2' => 'ISO8859-2',    'iso-8859-3' => 'ISO8859-3',    'iso-8859-4' => 'ISO8859-4',    'iso-8859-5' => 'ISO8859-5',    'iso-8859-6' => 'ISO8859-6',    'iso-8859-7' => 'ISO8859-7',    'iso-8859-8' => 'ISO8859-8',    'iso-8859-9' => 'ISO8859-9',    // "big5" --> "IBM-eucTW" according to http://kadesh.cepba.upc.es/mancpp/classref/ref/ITranscoder_DSC.htm    'big5' => 'IBM-eucTW',    // Other mappings corresponding to the phpMyAdmin dropdown box when using the charset conversion feature    'euc-jp' => 'IBM-eucJP',    'koi8-r' => 'IBM-eucKR',    'ks_c_5601-1987' => 'KSC5601.1987-0',    'tis-620' => 'TIS-620',    'utf-8' => 'UTF-8');/** * Wrapper around IBM AIX iconv(), whose character set naming differs * from the GNU version of iconv(). * * @param string   input character set * @param string   output character set * @param string   the string to convert * * @return  mixed    converted string or false on failure * * @access  public * */function PMA_aix_iconv_wrapper($in_charset, $out_charset, $str){    global $gnu_iconv_to_aix_iconv_codepage_map;    // Check for transliteration argument at the end of output character set name    $translit_search = strpos(strtolower($out_charset), '//translit');    $using_translit = (!($translit_search === false));    // Extract "plain" output character set name (without any transliteration argument)    $out_charset_plain = ($using_translit ? substr($out_charset, 0, $translit_search) : $out_charset);    // Transform name of input character set (if found)    if (array_key_exists(strtolower($in_charset), $gnu_iconv_to_aix_iconv_codepage_map)) {        $in_charset = $gnu_iconv_to_aix_iconv_codepage_map[strtolower($in_charset)];    }    // Transform name of "plain" output character set (if found)    if (array_key_exists(strtolower($out_charset_plain), $gnu_iconv_to_aix_iconv_codepage_map)) {        $out_charset_plain = $gnu_iconv_to_aix_iconv_codepage_map[strtolower($out_charset_plain)];    }    // Add transliteration argument again (exactly as specified by user) if used    // Build the output character set name that we will use    $out_charset = ($using_translit ? $out_charset_plain . substr($out_charset, $translit_search) : $out_charset_plain);    // NOTE: Transliteration not supported; we will use the "plain" output character set name    $out_charset = $out_charset_plain;    // Call iconv() with the possibly modified parameters    $result = iconv($in_charset, $out_charset, $str);    return $result;} //  end of the "PMA_aix_iconv_wrapper()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//****/require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'server_synchronize.js';require_once './libraries/server_common.inc.php';/*** Contains all the functions specific to synchronization*/require './libraries/server_synchronize.lib.php';/** * Increases the time limit up to the configured maximum */@set_time_limit($cfg['ExecTimeLimit']);/** * Displays the links */require './libraries/server_links.inc.php';/*** Enables warnings on the page*///$cfg['Error_Handler']['display'] = true;//$cfg['Error_Handler']['gather'] = true;/*** Save the value of token generated for this page*/if (isset($_REQUEST['token'])) {    $_SESSION['token'] = $_REQUEST['token'];}// variable for code saving$cons = array ("src", "trg");/** * Displays the page when 'Go' is pressed */if ((isset($_REQUEST['submit_connect']))) {    foreach ($cons as $con) {        ${"{$con}_host"}     = $_REQUEST[$con . '_host'];        ${"{$con}_username"} = $_REQUEST[$con . '_username'];        ${"{$con}_password"} = $_REQUEST[$con . '_pass'];        ${"{$con}_port"}     = $_REQUEST[$con . '_port'];        ${"{$con}_socket"}   = $_REQUEST[$con . '_socket'];        ${"{$con}_db"}       = $_REQUEST[$con . '_db'];        ${"{$con}_type"}     = $_REQUEST[$con . '_type'];        if (${"{$con}_type"} == 'cur') {            ${"{$con}_connection"} = null;            ${"{$con}_server"} = null;            ${"{$con}_db"}       = $_REQUEST[$con . '_db_sel'];            continue;        }        if (isset(${"{$con}_socket"}) && ! empty(${"{$con}_socket"})) {            ${"{$con}_server"}['socket'] = ${"{$con}_socket"};        } else {            ${"{$con}_server"}['host'] = ${"{$con}_host"};            if (isset(${"{$con}_port"})                && ! empty(${"{$con}_port"})                && ((int)${"{$con}_port"} * 1) > 0            ) {                ${"{$con}_server"}['port'] = (int)${"{$con}_port"};            }        }        ${"{$con}_connection"} = PMA_DBI_connect(${"{$con}_username"},            ${"{$con}_password"}, $is_controluser = false,            ${"{$con}_server"}, $auxiliary_connection = true);    } // end foreach ($cons as $con)    if ((! $src_connection && $src_type != 'cur')        || (! $trg_connection && $trg_type != 'cur')    ) {        /**        * Displays the connection error string if        * connections are not established        */        echo '<div class="error">';        if (! $src_connection && $src_type != 'cur') {            echo __('Could not connect to the source') . '<br />';        }        if (! $trg_connection && $trg_type != 'cur') {            echo __('Could not connect to the target');        }        echo '</div>';        unset($_REQUEST['submit_connect']);    } else {        /**        * Creating the link object for both source and target databases and        * selecting the source and target databases using these links        */        foreach ($cons as $con) {            if (${"{$con}_connection"} != null) {                ${"{$con}_link"} = PMA_DBI_connect(${"{$con}_username"},                    ${"{$con}_password"}, $is_controluser = false, ${"{$con}_server"});            } else {                ${"{$con}_link"} = null;            }            ${"{$con}_db_selected"} = PMA_DBI_select_db(${"{$con}_db"}, ${"{$con}_link"});            ${"{$con}_version"} = PMA_DBI_fetch_value('SELECT VERSION()', 0, 0, ${"{$con}_link"});            ${"{$con}_is_drizzle"} = (bool)preg_match('/\d{4}\./', ${"{$con}_version"});        } // end foreach ($cons as $con)        if (($src_db_selected != 1) || ($trg_db_selected != 1)) {            /**            * Displays error string if the database(s) did not exist            */            echo '<div class="error">';            if ($src_db_selected != 1) {                echo sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($src_db));            }            if ($trg_db_selected != 1) {                echo sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($trg_db));            }            echo '</div>';            unset($_REQUEST['submit_connect']);        } else if (($src_db_selected == 1) && ($trg_db_selected == 1)) {            /**            * Using PMA_DBI_get_tables() to get all the tables            * from target and source databases.            */            $src_tables = PMA_DBI_get_tables($src_db, $src_link);            $source_tables_num = sizeof($src_tables);            $trg_tables = PMA_DBI_get_tables($trg_db, $trg_link);            $target_tables_num = sizeof($trg_tables);            /**            * initializing arrays to save matching and non-matching            * table names from target and source databases.            */            $unmatched_num_src = 0;            $source_tables_uncommon = array();            $unmatched_num_trg = 0;            $target_tables_uncommon = array();            $matching_tables = array();            $matching_tables_num = 0;            /**            * Using PMA_getMatchingTables to find which of the tables' names match            * in target and source database.            */            PMA_getMatchingTables($trg_tables, $src_tables, $matching_tables, $source_tables_uncommon);            /**            * Finding the uncommon tables for the target database            * using function PMA_getNonMatchingTargetTables()            */            PMA_getNonMatchingTargetTables($trg_tables, $matching_tables, $target_tables_uncommon);            /**            * Initializing several arrays to save the data and structure            * difference between the source and target databases.            */            $row_count = array();   //number of rows in source table that needs to be created in target database            $fields_num = array();  //number of fields in each matching table            $delete_array = array(); //stores the primary key values for target tables that have excessive rows than corresponding source tables.            $insert_array = array(array(array()));// stores the primary key values for the rows in each source table that are not present in target tables.            $update_array = array(array(array())); //stores the primary key values, name of field to be updated, value of the field to be updated for                                                    // each row of matching table.            $matching_tables_fields = array(); //contains the fields' names for each matching table            $matching_tables_keys   = array(); //contains the primary keys' names for each matching table            $uncommon_tables_fields = array(); //coantains the fields for all the source tables that are not present in target            $matching_tables_num = sizeof($matching_tables);            $source_columns = array();  //contains the full columns' information for all the source tables' columns            $target_columns = array();  //contains the full columns' information for all the target tables' columns            $uncommon_columns = array(); //contains names of columns present in source table but absent from the corresponding target table            $source_indexes = array();   //contains indexes on all the source tables            $target_indexes = array();   //contains indexes on all the target tables            $add_indexes_array = array(); //contains the indexes name present in source but absent from target tables            $target_tables_keys = array(); //contains the keys of all the target tables            $alter_indexes_array = array();  //contains the names of all the indexes for each table that need to be altered in target database            $remove_indexes_array = array();  //contains the names of indexes that are excessive in target tables            $alter_str_array = array(array());  //contains the criteria for each column that needs to be altered in target tables            $add_column_array = array(array()); //contains the name of columns that need to be added in target tables            /**            * The criteria array contains all the criteria against which columns are compared for differences.            */            $criteria = array('Field', 'Type', 'Null', 'Collation', 'Key', 'Default', 'Comment');            for ($i = 0; $i < sizeof($matching_tables); $i++) {                /**                * Finding out all the differences structure, data and index diff                * for all the matching tables only                */                PMA_dataDiffInTables($src_db, $trg_db, $src_link, $trg_link,                    $matching_tables, $matching_tables_fields, $update_array,                    $insert_array, $delete_array, $fields_num, $i,                    $matching_tables_keys);                PMA_structureDiffInTables($src_db, $trg_db, $src_link, $trg_link,                    $matching_tables, $source_columns, $target_columns,                    $alter_str_array, $add_column_array, $uncommon_columns,                    $criteria, $target_tables_keys, $i);                PMA_indexesDiffInTables($src_db, $trg_db, $src_link, $trg_link,                    $matching_tables, $source_indexes, $target_indexes,                    $add_indexes_array, $alter_indexes_array, $remove_indexes_array, $i);            }            for ($j = 0; $j < sizeof($source_tables_uncommon); $j++) {                /**                * Finding out the number of rows to be added in tables                * that need to be added in target database                */                PMA_dataDiffInUncommonTables($source_tables_uncommon, $src_db,                    $src_link, $j, $row_count);            }            /**            * Storing all arrays in session for use when page is reloaded            * for each button press            */            $_SESSION['matching_tables'] = $matching_tables;            $_SESSION['update_array'] = $update_array;            $_SESSION['insert_array'] = $insert_array;            $_SESSION['src_db'] = $src_db;            $_SESSION['trg_db'] =  $trg_db;            $_SESSION['matching_fields'] = $matching_tables_fields;            $_SESSION['src_uncommon_tables'] = $source_tables_uncommon;            $_SESSION['src_username'] = $src_username ;            $_SESSION['trg_username'] = $trg_username;            $_SESSION['src_password'] = $src_password;            $_SESSION['trg_password'] = $trg_password;            $_SESSION['trg_password'] = $trg_password;            $_SESSION['src_server']   = $src_server;            $_SESSION['trg_server']   = $trg_server;            $_SESSION['src_type']     = $src_type;            $_SESSION['trg_type']     = $trg_type;            $_SESSION['matching_tables_keys'] = $matching_tables_keys;            $_SESSION['uncommon_tables_fields'] = $uncommon_tables_fields;            $_SESSION['uncommon_tables_row_count'] = $row_count;            $_SESSION['target_tables_uncommon'] = $target_tables_uncommon;            $_SESSION['uncommon_tables'] = $source_tables_uncommon;            $_SESSION['delete_array'] = $delete_array;            $_SESSION['uncommon_columns'] = $uncommon_columns;            $_SESSION['source_columns'] = $source_columns;            $_SESSION['alter_str_array'] = $alter_str_array;            $_SESSION['target_tables_keys'] = $target_tables_keys;            $_SESSION['add_column_array'] = $add_column_array;            $_SESSION['criteria'] = $criteria;            $_SESSION['target_tables'] = $trg_tables;            $_SESSION['add_indexes_array'] = $add_indexes_array;            $_SESSION['alter_indexes_array'] = $alter_indexes_array;            $_SESSION['remove_indexes_array'] = $remove_indexes_array;            $_SESSION['source_indexes'] = $source_indexes;            $_SESSION['target_indexes'] = $target_indexes;            /**            * Displays the sub-heading and icons showing Structure Synchronization            * and Data Synchronization            */            ?>            <form name="synchronize_form" id="synchronize_form" method="post" action="server_synchronize.php">                <?php echo PMA_generate_common_hidden_inputs('', ''); ?>            <table width="40%">            <tr>                <td>                    <img class="icon" src="<?php echo $pmaThemeImage; ?>new_struct.png" width="16" height="16" alt="" />                    <?php echo __('Structure Synchronization'); ?>                </td>                <td>                    <img class="icon" src="<?php echo $pmaThemeImage; ?>new_data.png" width="16" height="16" alt="" />                    <?php echo __('Data Synchronization'); ?>                </td>            </tr>            </table>            <?php            /**            * Displays the tables containing the source tables names,            * their difference with the target tables and target tables names.            */            PMA_syncDisplayHeaderCompare($src_db, $trg_db);            $rows = array();            /**            * Display the matching tables' names and difference, first            */            for ($i = 0; $i < count($matching_tables); $i++) {                /**                * Calculating the number of updates for each matching table                */                if (isset($update_array[$i]) && isset($update_array[$i][0])                        && !empty($matching_tables_keys[$i][0])                        && isset($update_array[$i][0][$matching_tables_keys[$i][0]])) {                    $num_of_updates = sizeof($update_array[$i]);                } else {                    $num_of_updates = 0;                }                /**                * Calculating the number of insertions for each matching table                */                if (isset($insert_array[$i]) && isset($insert_array[$i][0])                        && !empty($matching_tables_keys[$i])                        && isset($insert_array[$i][0][$matching_tables_keys[$i][0]])) {                    $num_of_insertions = sizeof($insert_array[$i]);                } else {                    $num_of_insertions = 0;                }                /**                * Calculating the number of alter columns, number of columns to be                * added, number of columns to be removed,                * number of index to be added and removed.                */                $num_alter_cols  = 0;                $num_insert_cols = 0;                $num_remove_cols = 0;                $num_add_index   = 0;                $num_remove_index = 0;                if (isset($alter_str_array[$i])) {                    $num_alter_cols = sizeof($alter_str_array[$i]);                }                if (isset($add_column_array[$i])) {                    $num_insert_cols = sizeof($add_column_array[$i]);                }                if (isset($uncommon_columns[$i])) {                    $num_remove_cols = sizeof($uncommon_columns[$i]);                }                if (isset($add_indexes_array[$i])) {                    $num_add_index = sizeof($add_indexes_array[$i]);                }                if (isset($remove_indexes_array[$i])) {                    $num_remove_index = sizeof($remove_indexes_array[$i]);                }                if (isset($alter_indexes_array[$i])) {                    $num_add_index += sizeof($alter_indexes_array[$i]);                    $num_remove_index += sizeof($alter_indexes_array[$i]);                }                $btn_structure_params = null;                $btn_data_params = null;                /**                * Display the red button of structure synchronization if there                * exists any structure difference or index difference.                */                if (($num_alter_cols > 0)                    || ($num_insert_cols > 0)                    || ($num_remove_cols > 0)                    || ($num_add_index > 0)                    || ($num_remove_index > 0)                ) {                    $btn_structure_params = array($i, $num_alter_cols, $num_insert_cols,                        $num_remove_cols, $num_add_index, $num_remove_index);                }                /**                * Display the green button of data synchronization if there exists                * any data difference.                */                if ((isset($update_array[$i])                    || isset($insert_array[$i]))                    && !empty($matching_tables_keys[$i])                ) {                    if (isset($update_array[$i][0][$matching_tables_keys[$i][0]])                        || isset($insert_array[$i][0][$matching_tables_keys[$i][0]])                    ) {                        $btn_data_params = array($i, $num_of_updates,                            $num_of_insertions, null, null, null);                    }                }                $rows[] = array(                    'src_table_name' => $matching_tables[$i],                    'dst_table_name' => $matching_tables[$i],                    'btn_type' => 'M',                    'btn_structure' => $btn_structure_params,                    'btn_data' => $btn_data_params                );            }            /**            * Displays the tables' names present in source but missing from target            */            for ($j = 0; $j < count($source_tables_uncommon); $j++) {                $row = array(                    'src_table_name' => '+ ' . $source_tables_uncommon[$j],                    'dst_table_name' => $source_tables_uncommon[$j] . ' (' . __('not present') . ')',                    'btn_type' => 'U',                    'btn_structure' => array($j, null, null, null, null, null),                    'btn_data' => null                );                if ($row_count[$j] > 0) {                    $row['btn_data'] = array($j, null, $row_count[$j], null, null, null);                }                $rows[] = $row;            }            foreach ($target_tables_uncommon as $tbl_nc_name) {                $rows[] = array(                    'src_table_name' => '',                    'dst_table_name' => $tbl_nc_name);            }            /**            * Displays the target tables names            */            PMA_syncDisplayDataCompare($rows);            echo '</table>                </div>                </fieldset>';            /**            * This "list" div will contain a table and each row will depict            * information about structure/data difference in tables.            * Rows will be generated dynamically as soon as the colored            * buttons "D" or "S"  are clicked.            */            echo '<fieldset style="padding:0"><div id="list" style="overflow:auto; height:140px; padding:1em">            <table>                <thead>                <tr style="width: 100%;">                    <th id="table_name" style="width: 10%;" colspan="1">' . __('Table') . ' </th>                    <th id="str_diff"   style="width: 65%;" colspan="6">' . __('Structure Difference') . ' </th>                    <th id="data_diff"  style="width: 20%;" colspan="2">' . __('Data Difference') . '</th>                </tr>                <tr style="width: 100%;">                    <th style="width: 10%;">' . __('Table name') . '</th>                    <th style="width: 10%;">' . __('Create table'). '</th>                    <th style="width: 11%;">' . __('Add column(s)') . '</th>                    <th style="width: 13%;">' . __('Remove column(s)') . '</th>                    <th style="width: 11%;">' . __('Alter column(s)') . '</th>                    <th style="width: 12%;">' . __('Remove index(s)') . '</th>                    <th style="width: 11%;">' . __('Apply index(s)') . '</th>                    <th style="width: 10%;">'.  __('Update row(s)') . '</th>                    <th style="width: 10%;">' . __('Insert row(s)') . '</th>                </tr>                </thead>                <tbody></tbody>            </table>            </div></fieldset>';            /**            *  This fieldset displays the checkbox to confirm deletion of previous rows from target tables            */            echo '<fieldset>            <p><input type= "checkbox" name="delete_rows" id ="delete_rows" /><label for="delete_rows">'                . __('Would you like to delete all the previous rows from target tables?')                . '</label> </p>            </fieldset>            <fieldset class="tblFooters">';            echo '<input type="button" name="apply_changes" value="'                . __('Apply Selected Changes')                . '" onclick ="ApplySelectedChanges('                . "'" . htmlspecialchars($_SESSION['token']) . "'" . ')" />';            echo '<input type="submit" name="synchronize_db" value="'                . __('Synchronize Databases') . '" />' . '</fieldset>';            echo '</form>';        }    }} // end if ((isset($_REQUEST['submit_connect']))) /** * Display the page when 'Apply Selected Changes' is pressed */if (isset($_REQUEST['Table_ids'])) {    /**    * Displays success message    */    echo '<div class="success">'        . __('Selected target tables have been synchronized with source tables.')        . '</div>';    $src_db = $_SESSION['src_db'];    $trg_db = $_SESSION['trg_db'];    $update_array = $_SESSION['update_array'];    $insert_array = $_SESSION['insert_array'];    $src_username = $_SESSION['src_username'];    $trg_username = $_SESSION['trg_username'];    $src_password = $_SESSION['src_password'];    $trg_password = $_SESSION['trg_password'];    $src_server   = $_SESSION['src_server'];    $trg_server   = $_SESSION['trg_server'];    $src_type     = $_SESSION['src_type'];    $trg_type     = $_SESSION['trg_type'];    $uncommon_tables = $_SESSION['uncommon_tables'];    $matching_tables = $_SESSION['matching_tables'];    $matching_tables_keys = $_SESSION['matching_tables_keys'];    $matching_tables_fields = $_SESSION['matching_fields'];    $source_tables_uncommon = $_SESSION['src_uncommon_tables'];    $uncommon_tables_fields = $_SESSION['uncommon_tables_fields'];    $target_tables_uncommon = $_SESSION['target_tables_uncommon'];    $row_count = $_SESSION['uncommon_tables_row_count'];    $target_tables = $_SESSION['target_tables'];    $delete_array = $_SESSION['delete_array'];    $uncommon_columns = $_SESSION['uncommon_columns'];    $source_columns = $_SESSION['source_columns'];    $alter_str_array = $_SESSION['alter_str_array'];    $criteria = $_SESSION['criteria'];    $target_tables_keys = $_SESSION['target_tables_keys'];    $add_column_array = $_SESSION['add_column_array'];    $add_indexes_array = $_SESSION['add_indexes_array'];    $alter_indexes_array = $_SESSION['alter_indexes_array'];    $remove_indexes_array = $_SESSION['remove_indexes_array'];    $source_indexes = $_SESSION['source_indexes'];    $target_indexes = $_SESSION['target_indexes'];    $uncommon_cols = $uncommon_columns;    /**    * Creating link object for source and target databases    */    foreach ($cons as $con) {        if (${"{$con}_type"} != "cur") {            ${"{$con}_link"} = PMA_DBI_connect(${"{$con}_username"},                ${"{$con}_password"}, $is_controluser = false, ${"{$con}_server"});        } else {            ${"{$con}_link"} = null;            // working on current server, so initialize this for tracking            // (does not work if user defined current server as a remote one)            $GLOBALS['db'] = ${"{$con}_db"};        }    } // end foreach ($cons as $con)    /**    * Initializing arrays to save the table ids whose data and structure difference is to be applied    */    $matching_table_data_diff = array();  //stores id of matching table having data difference    $matching_table_structure_diff = array(); //stores id of matching tables having structure difference    $uncommon_table_structure_diff = array(); //stores id of uncommon tables having structure difference    $uncommon_table_data_diff = array();     //stores id of uncommon tables having data difference    for ($i = 0; isset($_REQUEST[$i]); $i++ ) {        if (isset($_REQUEST[$i])) {            $table_id = explode("US", $_REQUEST[$i]);            if (isset($table_id[1])) {                $uncommon_table_structure_diff[] = $table_id[1];            }            $table_id = explode("UD", $_REQUEST[$i]);            if (isset($table_id[1])) {                $uncommon_table_data_diff[] = $table_id[1];            }            $table_id = explode("MS", $_REQUEST[$i]);            if (isset($table_id[1])) {                $matching_table_structure_diff[] = $table_id[1];            }            $table_id = explode("MD", $_REQUEST[$i]);            if (isset($table_id[1])) {                 $matching_table_data_diff[] = $table_id[1];            }        }    } // end for    /**    * Applying the structure difference on selected matching tables    */    for ($q = 0; $q < sizeof($matching_table_structure_diff); $q++) {        if (isset($alter_str_array[$matching_table_structure_diff[$q]])) {            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,                $source_columns, $alter_str_array, $matching_tables_fields,                $criteria, $matching_tables_keys, $target_tables_keys,                $matching_table_structure_diff[$q], false);            unset($alter_str_array[$matching_table_structure_diff[$q]]);        }        if (isset($add_column_array[$matching_table_structure_diff[$q]])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,                $matching_table_structure_diff[$q], $target_tables_keys,                $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$matching_table_structure_diff[$q]])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,                    $matching_table_structure_diff[$q], $target_tables_keys,                    $delete_array, false);                unset($delete_array[$matching_table_structure_diff[$q]]);            }            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,                $matching_tables, $source_columns, $add_column_array,                $matching_tables_fields, $criteria, $matching_tables_keys,                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,                $matching_table_structure_diff[$q], $uncommon_cols, false);            unset($add_column_array[$matching_table_structure_diff[$q]]);        }        if (isset($uncommon_columns[$matching_table_structure_diff[$q]])) {            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,                $uncommon_columns, $matching_table_structure_diff[$q], false);            unset($uncommon_columns[$matching_table_structure_diff[$q]]);        }        if (isset($add_indexes_array[$matching_table_structure_diff[$q]])            || isset($remove_indexes_array[$matching_table_structure_diff[$q]])            || isset($alter_indexes_array[$matching_table_structure_diff[$q]])        ) {            PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables,                $source_indexes, $target_indexes, $add_indexes_array,                $alter_indexes_array, $remove_indexes_array,                $matching_table_structure_diff[$q], false);            unset($add_indexes_array[$matching_table_structure_diff[$q]]);            unset($alter_indexes_array[$matching_table_structure_diff[$q]]);            unset($remove_indexes_array[$matching_table_structure_diff[$q]]);        }    }    /**    * Applying the data difference. First checks if structure diff is applied or not.    * If not, then apply structure difference first then apply data difference.    */    for ($p = 0; $p < sizeof($matching_table_data_diff); $p++) {        if ($_REQUEST['checked'] == 'true') {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,                $matching_table_data_diff[$p], $target_tables_keys,                $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$matching_table_data_diff[$p]])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,                    $matching_table_data_diff[$p], $target_tables_keys,                    $delete_array, false);                unset($delete_array[$matching_table_data_diff[$p]]);            }        }        if (isset($alter_str_array[$matching_table_data_diff[$p]])) {            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,                $source_columns, $alter_str_array, $matching_tables_fields,                $criteria, $matching_tables_keys, $target_tables_keys,                $matching_table_data_diff[$p], false);            unset($alter_str_array[$matching_table_data_diff[$p]]);        }        if (isset($add_column_array[$matching_table_data_diff[$p]])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,                $matching_table_data_diff[$p], $target_tables_keys,                $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$matching_table_data_diff[$p]])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,                    $matching_table_data_diff[$p], $target_tables_keys,                    $delete_array, false);                unset($delete_array[$matching_table_data_diff[$p]]);            }            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,                $matching_tables, $source_columns, $add_column_array,                $matching_tables_fields, $criteria, $matching_tables_keys,                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,                $matching_table_data_diff[$p], $uncommon_cols, false);            unset($add_column_array[$matching_table_data_diff[$p]]);        }        if (isset($uncommon_columns[$matching_table_data_diff[$p]])) {            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,                $uncommon_columns, $matching_table_data_diff[$p], false);            unset($uncommon_columns[$matching_table_data_diff[$p]]);        }        if ((isset($matching_table_structure_diff[$q])            && isset($add_indexes_array[$matching_table_structure_diff[$q]]))            || (isset($matching_table_structure_diff[$q])            && isset($remove_indexes_array[$matching_table_structure_diff[$q]]))            || (isset($matching_table_structure_diff[$q])            && isset($alter_indexes_array[$matching_table_structure_diff[$q]]))        ) {            PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables,                $source_indexes, $target_indexes, $add_indexes_array,                $alter_indexes_array, $remove_indexes_array,                $matching_table_structure_diff[$q], false);            unset($add_indexes_array[$matching_table_structure_diff[$q]]);            unset($alter_indexes_array[$matching_table_structure_diff[$q]]);            unset($remove_indexes_array[$matching_table_structure_diff[$q]]);        }        /**        * Applying the data difference.        */        PMA_updateTargetTables($matching_tables, $update_array, $src_db, $trg_db,            $trg_link, $matching_table_data_diff[$p], $matching_tables_keys, false);        PMA_insertIntoTargetTable($matching_tables, $src_db, $trg_db, $src_link,            $trg_link, $matching_tables_fields, $insert_array,            $matching_table_data_diff[$p], $matching_tables_keys, $source_columns,            $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,            $uncommon_tables_fields, $uncommon_cols, $alter_str_array,            $source_indexes, $target_indexes, $add_indexes_array,            $alter_indexes_array, $delete_array, $update_array, false);    }    /**    * Updating the session variables to the latest values of the arrays.    */    $_SESSION['delete_array'] = $delete_array;    $_SESSION['uncommon_columns'] = $uncommon_columns;    $_SESSION['alter_str_array']  = $alter_str_array;    $_SESSION['add_column_array'] = $add_column_array;    $_SESSION['add_indexes_array'] = $add_indexes_array;    $_SESSION['remove_indexes_array'] = $remove_indexes_array;    $_SESSION['insert_array'] = $insert_array;    $_SESSION['update_array'] = $update_array;    /**    * Applying structure difference to selected non-matching tables    * (present in Source but absent from Target).    */    for ($s = 0; $s < sizeof($uncommon_table_structure_diff); $s++) {        PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,            $uncommon_tables, $uncommon_table_structure_diff[$s],            $uncommon_tables_fields, false);        $_SESSION['uncommon_tables_fields'] = $uncommon_tables_fields;        unset($uncommon_tables[$uncommon_table_structure_diff[$s]]);    }    /**    * Applying data difference to selected non-matching tables    * (present in Source but absent from Target).    * Before data synchronization, structure synchronization is confirmed.    */    for ($r = 0; $r < sizeof($uncommon_table_data_diff); $r++) {        if (!(in_array($uncommon_table_data_diff[$r], $uncommon_table_structure_diff))) {            if (isset($uncommon_tables[$uncommon_table_data_diff[$r]])) {                PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,                    $uncommon_tables, $uncommon_table_data_diff[$r],                    $uncommon_tables_fields, false);                $_SESSION['uncommon_tables_fields'] = $uncommon_tables_fields;                unset($uncommon_tables[$uncommon_table_data_diff[$r]]);            }        }        PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link,            $source_tables_uncommon, $uncommon_table_data_diff[$r],            $_SESSION['uncommon_tables_fields'], false);        unset($row_count[$uncommon_table_data_diff[$r]]);    }    /**    * Again all the tables from source and target database are displayed with their differences.    * The differences have been removed from tables that have been synchronized    */    echo '<form name="applied_difference" id="synchronize_form" method="post" action="server_synchronize.php">'        . PMA_generate_common_hidden_inputs('', '');    PMA_syncDisplayHeaderCompare($src_db, $trg_db);    $rows = array();    for ($i = 0; $i < count($matching_tables); $i++) {        $num_alter_cols  = 0;        $num_insert_cols = 0;        $num_remove_cols = 0;        $num_add_index = 0;        $num_remove_index = 0;        if (isset($alter_str_array[$i])) {            $num_alter_cols = sizeof($alter_str_array[$i]);        }        if (isset($add_column_array[$i])) {            $num_insert_cols = sizeof($add_column_array[$i]);        }        if (isset($uncommon_columns[$i])) {            $num_remove_cols = sizeof($uncommon_columns[$i]);        }        if (isset($add_indexes_array[$i])) {            $num_add_index = sizeof($add_indexes_array[$i]);        }        if (isset($remove_indexes_array[$i])) {            $num_remove_index = sizeof($remove_indexes_array[$i]);        }        $btn_structure_params = null;        $btn_data_params = null;        if (($num_alter_cols > 0)            || ($num_insert_cols > 0)            || ($num_remove_cols > 0)            || ($num_add_index > 0)            || ($num_remove_index > 0)        ) {            $btn_structure_params = array($i, $num_alter_cols, $num_insert_cols,                $num_remove_cols, $num_add_index, $num_remove_index);        }        if (!(in_array($i, $matching_table_data_diff))) {            if (isset($matching_tables_keys[$i][0])                && isset($update_array[$i][0][$matching_tables_keys[$i][0]])            ) {                if (isset($update_array[$i])) {                    $num_of_updates = sizeof($update_array[$i]);                } else {                    $num_of_updates = 0;                }            } else {                $num_of_updates = 0;            }            if (isset($matching_tables_keys[$i][0])                && isset($insert_array[$i][0][$matching_tables_keys[$i][0]])            ) {                if (isset($insert_array[$i])) {                    $num_of_insertions = sizeof($insert_array[$i]);                } else {                    $num_of_insertions = 0;                }            } else {                $num_of_insertions = 0;            }            if ((isset($matching_tables_keys[$i][0])                && isset($update_array[$i][0][$matching_tables_keys[$i][0]]))                || (isset($matching_tables_keys[$i][0])                && isset($insert_array[$i][0][$matching_tables_keys[$i][0]]))            ) {                $btn_data_params = array($i, $num_of_updates, $num_of_insertions,                    null, null, null);            }        } else {            unset($update_array[$i]);            unset($insert_array[$i]);        }        $rows[] = array(            'src_table_name' => $matching_tables[$i],            'dst_table_name' => $matching_tables[$i],            'btn_type' => 'M',            'btn_structure' => $btn_structure_params,            'btn_data' => $btn_data_params        );    }    /**    * placing updated value of arrays in session    *    */    $_SESSION['update_array'] = $update_array;    $_SESSION['insert_array'] = $insert_array;    for ($j = 0; $j < count($source_tables_uncommon); $j++) {        $btn_structure_params = null;        $btn_data_params = null;        /**        * Display the difference only when it has not been applied        */        if (!(in_array($j, $uncommon_table_structure_diff))) {            if (isset($uncommon_tables[$j])) {                $btn_structure_params = array($j, null, null, null, null, null);            }            $dst_table_name = $source_tables_uncommon[$j] . ' (' .  __('not present') . ')';        } else {            unset($uncommon_tables[$j]);            $dst_table_name = $source_tables_uncommon[$j];        }        /**        * Display the difference only when it has not been applied        */        if (!(in_array($j, $uncommon_table_data_diff))) {            if (isset($row_count[$j]) && ($row_count[$j] > 0)) {                $btn_data_params = array($j, null, $row_count[$j], null, null, null);            }        } else {            unset($row_count[$j]);        }        $rows[] = array(            'src_table_name' => $source_tables_uncommon[$j],            'dst_table_name' => $dst_table_name,            'btn_type' => 'U',            'btn_structure' => $btn_structure_params,            'btn_data' => $btn_data_params        );    }    /**    * placing the latest values of arrays in session    */    $_SESSION['uncommon_tables'] = $uncommon_tables;    $_SESSION['uncommon_tables_row_count'] = $row_count;    /**    * Displaying the target database tables    */    foreach ($target_tables_uncommon as $tbl_nc_name) {        $rows[] = array(            'src_table_name' => '',            'dst_table_name' => $tbl_nc_name);    }    PMA_syncDisplayDataCompare($rows);    echo '</table>        </div>        </fieldset>';    /**    * This "list" div will contain a table and each row will depict information about    * structure/data difference in tables.    * Rows will be generated dynamically as soon as the colored buttons "D" or "S"    * are clicked.    */    echo '<fieldset style="padding:0"><div id="list" style = "overflow:auto; height:140px; padding:1em">';    echo '<table>          <thead>            <tr style="width: 100%;">                <th id="table_name" style="width: 10%;" colspan="1">' . __('Table') . ' </th>                <th id="str_diff"   style="width: 65%;" colspan="6">' . __('Structure Difference') . ' </th>                <th id="data_diff"  style="width: 20%;" colspan="2">' . __('Data Difference') . '</th>            </tr>            <tr style="width: 100%;">                <th style="width: 10%;">' . __('Table name') . '</th>                <th style="width: 10%;">' . __('Create table'). '</th>                <th style="width: 11%;">' . __('Add column(s)') . '</th>                <th style="width: 13%;">' . __('Remove column(s)') . '</th>                <th style="width: 11%;">' . __('Alter column(s)') . '</th>                <th style="width: 12%;">' . __('Remove index(s)') . '</th>                <th style="width: 11%;">' . __('Apply index(s)') . '</th>                <th style="width: 10%;">' . __('Update row(s)') . '</th>                <th style="width: 10%;">' . __('Insert row(s)') . '</th>            </tr>            </thead>            <tbody></tbody>         </table>        </div></fieldset>';    /**    *  This fieldset displays the checkbox to confirm deletion of previous rows from target tables    */    echo '<fieldset>        <p><input type="checkbox" name="delete_rows" id ="delete_rows" /><label for="delete_rows">'        . __('Would you like to delete all the previous rows from target tables?') . '</label> </p>        </fieldset>';    echo '<fieldset class="tblFooters">';    echo '<input type="button" name="apply_changes" value="'        . __('Apply Selected Changes') . '" onclick ="ApplySelectedChanges('        . "'" . htmlspecialchars($_SESSION['token']) . "'" .')" />';    echo '<input type="submit" name="synchronize_db" value="'        . __('Synchronize Databases') . '" />'        . '</fieldset>';    echo '</form>';}/*** Displays the page when 'Synchronize Databases' is pressed.*/if (isset($_REQUEST['synchronize_db'])) {    $src_db = $_SESSION['src_db'];    $trg_db = $_SESSION['trg_db'];    $update_array = $_SESSION['update_array'];    $insert_array = $_SESSION['insert_array'];    $src_username = $_SESSION['src_username'];    $trg_username = $_SESSION['trg_username'];    $src_password = $_SESSION['src_password'];    $trg_password = $_SESSION['trg_password'];    $matching_tables = $_SESSION['matching_tables'];    $matching_tables_keys = $_SESSION['matching_tables_keys'];    $matching_tables_fields = $_SESSION['matching_fields'];    $source_tables_uncommon = $_SESSION['src_uncommon_tables'];    $uncommon_tables_fields = $_SESSION['uncommon_tables_fields'];    $target_tables_uncommon = $_SESSION['target_tables_uncommon'];    $row_count = $_SESSION['uncommon_tables_row_count'];    $uncommon_tables = $_SESSION['uncommon_tables'];    $target_tables = $_SESSION['target_tables'];    $delete_array = $_SESSION['delete_array'];    $uncommon_columns = $_SESSION['uncommon_columns'];    $source_columns = $_SESSION['source_columns'];    $alter_str_array = $_SESSION['alter_str_array'];    $criteria = $_SESSION['criteria'];    $target_tables_keys = $_SESSION['target_tables_keys'];    $add_column_array = $_SESSION['add_column_array'];    $add_indexes_array = $_SESSION['add_indexes_array'];    $alter_indexes_array = $_SESSION['alter_indexes_array'];    $remove_indexes_array = $_SESSION['remove_indexes_array'];    $source_indexes = $_SESSION['source_indexes'];    $target_indexes = $_SESSION['target_indexes'];    $uncommon_cols = $uncommon_columns;   /**   * Display success message.   */    echo '<div class="success">'        . __('Target database has been synchronized with source database')        . '</div>';    /**    * Displaying all the tables of source and target database    * and now no difference is there.    */    PMA_syncDisplayHeaderCompare($src_db, $trg_db);    $rows = array();    for ($i = 0; $i < count($matching_tables); $i++) {        $rows[] = array(            'src_table_name' => $matching_tables[$i],            'dst_table_name' => $matching_tables[$i]);    }    foreach ($source_tables_uncommon as $tbl_nc_name) {        $rows[] = array(            'src_table_name' => '+ ' . $tbl_nc_name,            'dst_table_name' => $tbl_nc_name);    }    foreach ($target_tables_uncommon as $tbl_nc_name) {        $rows[] = array(            'src_table_name' => '',            'dst_table_name' => $tbl_nc_name);    }    PMA_syncDisplayDataCompare($rows);    echo '</table>        </div>        </fieldset>';    /**    * connecting the source and target servers    */    if ('cur' != $_SESSION['src_type']) {        $src_link = PMA_DBI_connect($src_username, $src_password, $is_controluser = false, $_SESSION['src_server']);        $src_version = PMA_DBI_fetch_value('SELECT VERSION()', 0, 0, $src_link);        $src_is_drizzle = (bool)preg_match('/\d{4}\./', $src_version);    } else {        $src_link = $GLOBALS['userlink'];        $src_version = PMA_MYSQL_STR_VERSION;        $src_is_drizzle = PMA_DRIZZLE;        // working on current server, so initialize this for tracking        // (does not work if user defined current server as a remote one)        $GLOBALS['db'] = $_SESSION['src_db'];    }    if ('cur' != $_SESSION['trg_type']) {        $trg_link = PMA_DBI_connect($trg_username, $trg_password, $is_controluser = false, $_SESSION['trg_server']);        $trg_version = PMA_DBI_fetch_value('SELECT VERSION()', 0, 0, $trg_link);        $trg_is_drizzle = (bool)preg_match('/\d{4}\./', $trg_version);    } else {        $trg_link = $GLOBALS['userlink'];        $trg_version = PMA_MYSQL_STR_VERSION;        $trg_is_drizzle = PMA_DRIZZLE;        // working on current server, so initialize this for tracking        $GLOBALS['db'] = $_SESSION['trg_db'];    }    /**    * Displaying the queries.    */    echo '<fieldset><legend>' . __('Executed queries') . '</legend>';    /**    * Applying all sorts of differences for each matching table    */    for ($p = 0; $p < sizeof($matching_tables); $p++) {        /**        *  If the check box is checked for deleting previous rows from the target database tables then        *  first find out rows to be deleted and then delete the rows.        */        if (isset($_REQUEST['delete_rows'])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables, $p,                $target_tables_keys, $matching_tables_keys,                $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$p])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $p,                    $target_tables_keys, $delete_array, true);                unset($delete_array[$p]);            }        }        if (isset($alter_str_array[$p])) {            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,                $source_columns, $alter_str_array, $matching_tables_fields,                $criteria, $matching_tables_keys, $target_tables_keys, $p, true);            unset($alter_str_array[$p]);        }        if (! empty($add_column_array[$p])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables, $p,                $target_tables_keys, $matching_tables_keys,                $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$p])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $p,                    $target_tables_keys, $delete_array, true);                unset($delete_array[$p]);            }            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,                $matching_tables, $source_columns, $add_column_array,                $matching_tables_fields, $criteria, $matching_tables_keys,                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,                $p, $uncommon_cols, true);            unset($add_column_array[$p]);        }        if (isset($uncommon_columns[$p])) {            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,                $uncommon_columns, $p, true);            unset($uncommon_columns[$p]);        }        if (isset($matching_table_structure_diff)            && (isset($add_indexes_array[$matching_table_structure_diff[$p]])            || isset($remove_indexes_array[$matching_table_structure_diff[$p]])            || isset($alter_indexes_array[$matching_table_structure_diff[$p]]))        ) {            PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables,                $source_indexes, $target_indexes, $add_indexes_array,                $alter_indexes_array, $remove_indexes_array,                $matching_table_structure_diff[$p], true);            unset($add_indexes_array[$matching_table_structure_diff[$p]]);            unset($alter_indexes_array[$matching_table_structure_diff[$p]]);            unset($remove_indexes_array[$matching_table_structure_diff[$p]]);        }        PMA_updateTargetTables($matching_tables, $update_array, $src_db, $trg_db,            $trg_link, $p, $matching_tables_keys, true);        PMA_insertIntoTargetTable(            $matching_tables, $src_db, $trg_db, $src_link,            $trg_link, $matching_tables_fields, $insert_array, $p,            $matching_tables_keys, $matching_tables_keys, $source_columns,            $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,            $uncommon_tables_fields, $uncommon_cols, $alter_str_array, $source_indexes,            $target_indexes, $add_indexes_array,            $alter_indexes_array, $delete_array, $update_array, true        );    }    /**    *  Creating and populating tables present in source but absent    *  from target database.    */    for ($q = 0; $q < sizeof($source_tables_uncommon); $q++) {        if (isset($uncommon_tables[$q])) {            PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,                $source_tables_uncommon, $q, $uncommon_tables_fields, true);        }        if (isset($row_count[$q])) {            PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link,                $source_tables_uncommon, $q, $uncommon_tables_fields, true);        }    }    echo "</fieldset>";}/** * Displays the main page when none of the following buttons is pressed */if (! isset($_REQUEST['submit_connect'])    && ! isset($_REQUEST['synchronize_db'])    && ! isset($_REQUEST['Table_ids'])) {/*** Displays the sub-page heading*/    echo '<h2>' . ($GLOBALS['cfg']['MainPageIconic']    ? PMA_getImage('s_sync.png')    : '')    . __('Synchronize')    .'</h2>';    echo  '<div id="serverstatus">    <form name="connection_form" id="connection_form" method="post" action="server_synchronize.php"   >' // TODO: add check if all var. are filled in    . PMA_generate_common_hidden_inputs('', '');    echo '<fieldset>';    echo '<legend>' . __('Synchronize') . '</legend>';    /**     * Displays the forms     */    $databases = PMA_DBI_get_databases_full(null, false, null, 'SCHEMA_NAME',        'ASC', 0, true);    $databases_to_hide = array(        'information_schema',        'mysql'    );    if (PMA_DRIZZLE) {        $databases_to_hide[] = 'data_dictionary';    }    if ($GLOBALS['cfg']['AllowArbitraryServer'] === false) {        $possibly_readonly = ' readonly="readonly"';    } else {        $possibly_readonly = '';    }    foreach ($cons as $type) {        if ('src' == $type) {            $database_header = __('Source database');        } else {            $database_header = __('Target database');        }        $database_header .= PMA_showHint(PMA_sanitize(sprintf('%sAllowArbitraryServer%s',            '[a@./Documentation.html#AllowArbitraryServer@_blank]', '[/a]')));?>      <table id="serverconnection_<?php echo $type; ?>_remote" class="data noclick">      <caption class="tblHeaders"><?php echo $database_header; ?></caption>      <tr class="odd">      <td colspan="2" style="text-align: center">         <select name="<?php echo $type; ?>_type" id="<?php echo $type; ?>_type" class="server_selector"><?php        if ($GLOBALS['cfg']['AllowArbitraryServer']) {            $preselected_option = 'rmt';            echo '<option value="rmt" selected="selected">' . __('Enter manually') . '</option>';        } else {            $preselected_option = 'cur';        }        echo '<option value="cur"';        if ('cur' == $preselected_option) {            echo ' selected="selected"';        }        echo '>' .  __('Current connection') . '</option>';        $loaded_dbi = $GLOBALS['cfg']['Server']['extension'];        foreach ($GLOBALS['cfg']['Servers'] as $key => $tmp_server) {            if (empty($tmp_server['host']) && empty($tmp_server['socket'])) {                continue;            }            if (!empty($tmp_server['verbose'])) {                $label = $tmp_server['verbose'];            } else {                $label = $tmp_server['host'];                if (!empty($tmp_server['port'])) {                    $label .= ':' . $tmp_server['port'];                }            }            if ($loaded_dbi == 'drizzle' && $tmp_server['extension'] != 'drizzle'                    || $loaded_dbi != 'drizzle' && $tmp_server['extension'] == 'drizzle') {                // incompatible connection protocols                $disabled = ' disabled="disabled"';                $value = '';            } else {                $disabled = '';                $value = $tmp_server['host'];                $value .= '||||';                if (empty($tmp_server['port']) && empty($tmp_server['socket'])) {                    $value .= '3306';                } else {                    $value .= $tmp_server['port'];                }                $value .= '||||';                $value .= $tmp_server['socket'];                $value .= '||||';                $value .= $tmp_server['user'];                $value .= '||||';                $value .= $tmp_server['only_db'];            }            echo '<option value="' . $value . '"' . $disabled . '>'                . sprintf(__('Configuration: %s'), htmlspecialchars($label)) . '</option>';        } // end foreach?>         </select>      </td>      </tr>    <tr class="even toggler remote-server">        <td><?php echo __('Server'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_host" class="server-host" <?php echo $possibly_readonly; ?>/></td>    </tr>    <tr class="odd toggler remote-server">        <td><?php echo __('Port'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_port" class="server-port" <?php echo $possibly_readonly; ?> value="3306" maxlength="5" size="5" /></td>    </tr>    <tr class="even toggler remote-server">        <td><?php echo __('Socket'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_socket" class="server-socket" <?php echo $possibly_readonly; ?>/></td>    </tr>    <tr class="odd toggler remote-server">        <td><?php echo __('User name'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_username" class="server-user" /></td>    </tr>    <tr class="even toggler remote-server">        <td><?php echo __('Password'); ?></td>        <td><input type="password" name="<?php echo $type; ?>_pass" class="server-pass" /> </td>    </tr>    <tr class="odd toggler remote-server">        <td><?php echo __('Database'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_db" class="server-db" /></td>    </tr>    <tr class="even toggler current-server" style="display: none;">        <td><?php echo __('Database'); ?></td>        <td><?php    $options_list = '';    foreach ($databases as $array_key => $db) {        if (in_array($db['SCHEMA_NAME'], $databases_to_hide)) {            unset($databases[$array_key]);        } else {            $options_list .= '<option>' . htmlspecialchars($db['SCHEMA_NAME']) . '</option>';        }    }    if (count($databases) == 0) {        echo __('No databases');    } else {        echo '<select name="' . $type . '_db_sel">'         . $options_list         . '</select>';        unset($options_list);    }    echo '</td> </tr>      </table>';   }   unset ($types, $type);    echo '    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="submit_connect" value="' . __('Go') .'" id="buttonGo" />    </fieldset>    </form>    </div>    <div class="notice">' . __('Target database will be completely synchronized with source database. Source database will remain unchanged.') . '</div>';} /** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/** * Enter description here... * @package PhpMyAdmin * *//** * Database listing. */require_once './libraries/List_Database.class.php';/** * phpMyAdmin main Controller * * * * @package PhpMyAdmin */class PMA{    /**     * Holds database list     *     * @var PMA_List_Database     */    protected $databases = null;    /**     * DBMS user link     *     * @var resource     */    protected $userlink = null;    /**     * DBMS control link     *     * @var resource     */    protected $controllink = null;    /**     * magic access to protected/inaccessible members/properties     *     * @see http://php.net/language.oop5.overloading     *     * @param string $param     * @return mixed     */    public function __get($param)    {        switch ($param) {            case 'databases' :                return $this->getDatabaseList();                break;            case 'userlink' :                return $this->userlink;                break;            case 'controllink' :                return $this->controllink;                break;        }        return null;    }    /**     * magic access to protected/inaccessible members/properties     *     * @see http://php.net/language.oop5.overloading     *     * @param string $param     * @param mixed  $value     */    public function __set($param, $value)    {        switch ($param) {            case 'userlink' :                $this->userlink = $value;                break;            case 'controllink' :                $this->controllink = $value;                break;        }    }    /**     * Accessor to PMA::$databases     *     * @return PMA_List_Databases     */    public function getDatabaseList()    {        if (null === $this->databases) {            $this->databases = new PMA_List_Database($this->userlink, $this->controllink);        }        return $this->databases;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Does the common work */require_once './libraries/common.inc.php';require './libraries/server_common.inc.php';if (!PMA_DRIZZLE) {    include_once './libraries/replication.inc.php';} else {    $replication_types = array();    $replication_info = null;}require './libraries/build_html_for_db.lib.php';/** * avoids 'undefined index' errors */if (empty($_REQUEST['sort_by'])) {    $sort_by = 'SCHEMA_NAME';} else {    $sort_by_whitelist = array(        'SCHEMA_NAME',        'DEFAULT_COLLATION_NAME',        'SCHEMA_TABLES',        'SCHEMA_TABLE_ROWS',        'SCHEMA_DATA_LENGTH',        'SCHEMA_INDEX_LENGTH',        'SCHEMA_LENGTH',        'SCHEMA_DATA_FREE'    );    if (in_array($_REQUEST['sort_by'], $sort_by_whitelist)) {        $sort_by = $_REQUEST['sort_by'];    } else {        $sort_by = 'SCHEMA_NAME';    }}if (isset($_REQUEST['sort_order']) && strtolower($_REQUEST['sort_order']) == 'desc') {    $sort_order = 'desc';} else {    $sort_order = 'asc';}$dbstats    = empty($_REQUEST['dbstats']) ? 0 : 1;$pos        = empty($_REQUEST['pos']) ? 0 : (int) $_REQUEST['pos'];/** * Drops multiple databases */// workaround for IE behavior (it returns some coordinates based on where// the mouse was on the Drop image):if (isset($_REQUEST['drop_selected_dbs_x'])) {    $_REQUEST['drop_selected_dbs'] = true;}if ((isset($_REQUEST['drop_selected_dbs']) || isset($_REQUEST['query_type']))  && ($is_superuser || $cfg['AllowUserDropDatabase'])) {    if (! isset($_REQUEST['selected_dbs']) && ! isset($_REQUEST['query_type'])) {        $message = PMA_Message::error(__('No databases selected.'));    } else {        $action = 'server_databases.php';        $submit_mult = 'drop_db' ;        $err_url = 'server_databases.php?' . PMA_generate_common_url();        if (isset($_REQUEST['selected_dbs'])) {            $selected_db = $_REQUEST['selected_dbs'];        }        include './libraries/mult_submits.inc.php';        unset($action, $submit_mult, $err_url, $selected_db, $GLOBALS['db']);        if (empty($message)) {            $message = PMA_Message::success(__('%s databases have been dropped successfully.'));            if ($mult_btn == __('Yes')) {                $message->addParam(count($selected));            } else {                $message->addParam(0);            }        }    }}/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($GLOBALS['cfg']['MainPageIconic']      ? PMA_getImage('s_db.png')      : '')   . ($dbstats ? __('Databases statistics') : __('Databases')) . "\n"   .'</h2>' . "\n";/** * Create database. */if ($cfg['ShowCreateDb']) {    echo '<ul><li id="li_create_database">' . "\n";    include './libraries/display_create_database.lib.php';    echo '    </li>' . "\n";    echo '</ul>' . "\n";}/** * Gets the databases list */if ($server > 0) {    $databases = PMA_DBI_get_databases_full(null, $dbstats, null, $sort_by,        $sort_order, $pos, true);    $databases_count = count($GLOBALS['pma']->databases);} else {    $databases_count = 0;}/** * Displays the page */if ($databases_count > 0) {    echo '<div id="tableslistcontainer">';    reset($databases);    $first_database = current($databases);    // table col order    $column_order = PMA_getColumnOrder();    $_url_params = array(        'pos' => $pos,        'dbstats' => $dbstats,        'sort_by' => $sort_by,        'sort_order' => $sort_order,    );    PMA_listNavigator($databases_count, $pos, $_url_params, 'server_databases.php', 'frame_content', $GLOBALS['cfg']['MaxDbList']);    $_url_params['pos'] = $pos;    echo '<form action="./server_databases.php" method="post" name="dbStatsForm" id="dbStatsForm">' . "\n"       . PMA_generate_common_hidden_inputs($_url_params);    $_url_params['sort_by'] = 'SCHEMA_NAME';    $_url_params['sort_order'] = ($sort_by == 'SCHEMA_NAME' && $sort_order == 'asc') ? 'desc' : 'asc';    echo '<table id="tabledatabases" class="data">' . "\n"       . '<thead>' . "\n"       . '<tr>' . "\n"       . ($is_superuser || $cfg['AllowUserDropDatabase'] ? '        <th></th>' . "\n" : '')       . '    <th><a href="./server_databases.php' . PMA_generate_common_url($_url_params) . '">' . "\n"       . '            ' . __('Database') . "\n"       . ($sort_by == 'SCHEMA_NAME' ? '                ' . PMA_getImage('s_' . $sort_order . '.png', ($sort_order == 'asc' ? __('Ascending') : __('Descending'))) . "\n" : '')       . '        </a></th>' . "\n";    $table_columns = 3;    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $first_database)) {            if ($stat['format'] === 'byte') {                $table_columns += 2;                $colspan = ' colspan="2"';            } else {                $table_columns++;                $colspan = '';            }            $_url_params['sort_by'] = $stat_name;            $_url_params['sort_order'] = ($sort_by == $stat_name && $sort_order == 'desc') ? 'asc' : 'desc';            echo '    <th' . $colspan . '>'                .'<a href="./server_databases.php' . PMA_generate_common_url($_url_params) . '">' . "\n"                .'            ' . $stat['disp_name'] . "\n"                .($sort_by == $stat_name ? '            ' . PMA_getImage('s_' . $sort_order . '.png', ($sort_order == 'asc' ? __('Ascending') : __('Descending'))) . "\n" : '')                .'        </a></th>' . "\n";        }    }    foreach ($replication_types as $type) {      if ($type=="master")        $name = __('Master replication');      elseif ($type == "slave")        $name = __('Slave replication');      if (${"server_{$type}_status"})        echo '    <th>'. $name .'</th>' . "\n";    }    if ($is_superuser && !PMA_DRIZZLE) {        echo '    <th>' . ($cfg['PropertiesIconic'] ? '' : __('Action')) . "\n"           . '    </th>' . "\n";    }    echo '</tr>' . "\n"       . '</thead>' . "\n"       . '<tbody>' . "\n";    $odd_row = true;    foreach ($databases as $current) {        $tr_class = $odd_row ? 'odd' : 'even';        if (PMA_is_system_schema($current['SCHEMA_NAME'], true)) {            $tr_class .= ' noclick';        }        echo '<tr class="' . $tr_class . '">' . "\n";        $odd_row = ! $odd_row;        list($column_order, $generated_html) = PMA_buildHtmlForDb($current, $is_superuser, (isset($checkall) ? $checkall : ''), $url_query, $column_order, $replication_types, $replication_info);        echo $generated_html;        echo '</tr>' . "\n";    } // end foreach ($databases as $key => $current)    unset($current, $odd_row);    echo '<tr id="db_summary_row">' . "\n";    if ($is_superuser || $cfg['AllowUserDropDatabase']) {        echo '    <th></th>' . "\n";    }    echo '    <th>' . __('Total') . ': <span id="databases_count">' . $databases_count . '</span></th>' . "\n";    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $first_database)) {            if ($stat['format'] === 'byte') {                list($value, $unit) = PMA_formatByteDown($stat['footer'], 3, 1);            } elseif ($stat['format'] === 'number') {                $value = PMA_formatNumber($stat['footer'], 0);            } else {                $value = htmlentities($stat['footer'], 0);            }            echo '    <th class="value">';            if (isset($stat['description_function'])) {                echo '<dfn title="' . $stat['description_function']($stat['footer']) . '">';            }            echo $value;            if (isset($stat['description_function'])) {                echo '</dfn>';            }            echo '</th>' . "\n";            if ($stat['format'] === 'byte') {                echo '    <th class="unit">' . $unit . '</th>' . "\n";            }        }    }    foreach ($replication_types as $type) {        if (${"server_{$type}_status"}) {            echo '    <th></th>' . "\n";        }    }    if ($is_superuser) {        echo '    <th></th>' . "\n";    }    echo '</tr>' . "\n";    echo '</tbody>' . "\n"        .'</table>' . "\n";    unset($column_order, $stat_name, $stat, $databases, $table_columns);    if ($is_superuser || $cfg['AllowUserDropDatabase']) {        $common_url_query = PMA_generate_common_url(array('sort_by' => $sort_by, 'sort_order' => $sort_order, 'dbstats' => $dbstats));        echo '<img class="selectallarrow" src="' . $pmaThemeImage . 'arrow_' . $text_dir . '.png" width="38" height="22" alt="' . __('With selected:') . '" />' . "\n"           . '<a href="./server_databases.php' . $common_url_query . '&amp;checkall=1" onclick="if (markAllRows(\'tabledatabases\')) return false;">' . "\n"           . '    ' . __('Check All') . '</a> / ' . "\n"           . '<a href="./server_databases.php' . $common_url_query . '" onclick="if (unMarkAllRows(\'tabledatabases\')) return false;">' . "\n"           . '    ' . __('Uncheck All') . '</a>' . "\n"           . '<i>' . __('With selected:') . '</i>' . "\n";        PMA_buttonOrImage('drop_selected_dbs', 'mult_submit', 'drop_selected_dbs', __('Drop'), 'b_deltbl.png');    }    if (empty($dbstats)) {        echo '<ul><li id="li_switch_dbstats"><strong>' . "\n";            echo '        <a href="./server_databases.php?' . $url_query . '&amp;dbstats=1"'                .' title="' . __('Enable Statistics') . '">' . "\n"                .'            ' . __('Enable Statistics');        echo '</a></strong><br />' . "\n";        PMA_Message::notice(__('Note: Enabling the database statistics here might cause heavy traffic between the web server and the MySQL server.'))->display();        echo '</li>' . "\n" . '</ul>' . "\n";    }    echo '</form>';    echo '</div>';} else {    echo __('No databases');}unset($databases_count);/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Config file management * * @package PhpMyAdmin *//** * Config file management class. * Stores its data in $_SESSION * * @package    phpMyAdmin */class ConfigFile{    /**     * Stores default PMA config from config.default.php     * @var array     */    private $cfg;    /**     * Stores original PMA_Config object, not modified by user preferences     * @var PMA_Config     */    private $orgCfgObject;    /**     * Stores allowed values for non-standard fields     * @var array     */    private $cfgDb;    /**     * Keys which will be always written to config file     * @var array     */    private $persistKeys = array();    /**     * Changes keys while updating config in {@link updateWithGlobalConfig()} or reading     * by {@link getConfig()} or {@link getConfigArray()}     * @var array     */    private $cfgUpdateReadMapping = array();    /**     * Key filter for {@link set()}     * @var array|null     */    private $setFilter;    /**     * Instance id (key in $_SESSION array, separate for each server - ConfigFile{server id})     * @var string     */    private $id;    /**     * Result for {@link _flattenArray()}     * @var array     */    private $_flattenArrayResult;    /**     * ConfigFile instance     * @var ConfigFile     */    private static $_instance;    /**     * Private constructor, use {@link getInstance()}     *     */    private function __construct()    {        // load default config values        $cfg = &$this->cfg;        include './libraries/config.default.php';        $cfg['fontsize'] = '82%';        // create PMA_Config to read config.inc.php values        $this->orgCfgObject = new PMA_Config(CONFIG_FILE);        // load additional config information        $cfg_db = &$this->cfgDb;        include './libraries/config.values.php';        // apply default values overrides        if (count($cfg_db['_overrides'])) {            foreach ($cfg_db['_overrides'] as $path => $value) {                PMA_array_write($path, $cfg, $value);            }        }        $this->id = 'ConfigFile' . $GLOBALS['server'];        if (!isset($_SESSION[$this->id])) {            $_SESSION[$this->id] = array();        }    }    /**     * Returns class instance     *     * @return ConfigFile     */    public static function getInstance()    {        if (is_null(self::$_instance)) {            self::$_instance = new ConfigFile();        }        return self::$_instance;    }    /**     * Returns PMA_Config without user preferences applied     *     * @return PMA_Config     */    public function getOrgConfigObj()    {        return $this->orgCfgObject;    }    /**     * Sets names of config options which will be placed in config file even if they are set     * to their default values (use only full paths)     *     * @param array $keys     */    public function setPersistKeys($keys)    {        // checking key presence is much faster than searching so move values to keys        $this->persistKeys = array_flip($keys);    }    /**     * Returns flipped array set by {@link setPersistKeys()}     *     * @return array     */    public function getPersistKeysMap()    {        return $this->persistKeys;    }    /**     * By default ConfigFile allows setting of all configuration keys, use this method     * to set up a filter on {@link set()} method     *     * @param array|null $keys array of allowed keys or null to remove filter     */    public function setAllowedKeys($keys)    {        if ($keys === null) {            $this->setFilter = null;            return;        }        // checking key presence is much faster than searching so move values to keys        $this->setFilter = array_flip($keys);    }    /**     * Sets path mapping for updating config in {@link updateWithGlobalConfig()} or reading     * by {@link getConfig()} or {@link getConfigArray()}     * @var array     */    public function setCfgUpdateReadMapping(array $mapping)    {        $this->cfgUpdateReadMapping = $mapping;    }    /**     * Resets configuration data     */    public function resetConfigData()    {        $_SESSION[$this->id] = array();    }    /**     * Sets configuration data (overrides old data)     *     * @param array $cfg     */    public function setConfigData(array $cfg)    {        $_SESSION[$this->id] = $cfg;    }    /**     * Sets config value     *     * @param string $path     * @param mixed  $value     * @param string $canonical_path     */    public function set($path, $value, $canonical_path = null)    {        if ($canonical_path === null) {            $canonical_path = $this->getCanonicalPath($path);        }        // apply key whitelist        if ($this->setFilter !== null && !isset($this->setFilter[$canonical_path])) {            return;        }        // remove if the path isn't protected and it's empty or has a default value        if (!isset($this->persistKeys[$canonical_path])) {            $default_value = $this->getDefault($canonical_path);            // we need oryginal config values not overwritten by user preferences            // to allow for overwriting options set in config.inc.php with default values            $instance_default_value = PMA_array_read($canonical_path, $this->orgCfgObject->settings);            if (($value === $default_value && (defined('PMA_SETUP') || $instance_default_value === $default_value))                    || (empty($value) && empty($default_value) && (defined('PMA_SETUP') || empty($current_global)))) {                PMA_array_remove($path, $_SESSION[$this->id]);                return;            }        }        PMA_array_write($path, $_SESSION[$this->id], $value);    }    /**     * Flattens multidimensional array, changes indices to paths (eg. 'key/subkey').     * Used as array_walk() callback.     *     * @param mixed $value     * @param mixed $key     * @param mixed $prefix     */    private function _flattenArray($value, $key, $prefix)    {        // no recursion for numeric arrays        if (is_array($value) && !isset($value[0])) {            $prefix .= $key . '/';            array_walk($value, array($this, '_flattenArray'), $prefix);        } else {            $this->_flattenArrayResult[$prefix . $key] = $value;        }    }    /**     * Returns default config in a flattened array     *     * @return array     */    public function getFlatDefaultConfig()    {        $this->_flattenArrayResult = array();        array_walk($this->cfg, array($this, '_flattenArray'), '');        $flat_cfg = $this->_flattenArrayResult;        $this->_flattenArrayResult = null;        return $flat_cfg;    }    /**     * Updates config with values read from given array     * (config will contain differences to defaults from config.defaults.php).     *     * @param array $cfg     */    public function updateWithGlobalConfig(array $cfg)    {        // load config array and flatten it        $this->_flattenArrayResult = array();        array_walk($cfg, array($this, '_flattenArray'), '');        $flat_cfg = $this->_flattenArrayResult;        $this->_flattenArrayResult = null;        // save values        // map for translating a few user preferences paths, should be complemented        // by code reading from generated config to perform inverse mapping        foreach ($flat_cfg as $path => $value) {            if (isset($this->cfgUpdateReadMapping[$path])) {                $path = $this->cfgUpdateReadMapping[$path];            }            $this->set($path, $value, $path);        }    }    /**     * Returns config value or $default if it's not set     *     * @param  string $path     * @param  mixed  $default     * @return mixed     */    public function get($path, $default = null)    {        return PMA_array_read($path, $_SESSION[$this->id], $default);    }    /**     * Returns default config value or $default it it's not set ie. it doesn't     * exist in config.default.php ($cfg) and config.values.php     * ($_cfg_db['_overrides'])     *     * @param  string $canonical_path     * @param  mixed  $default     * @return mixed     */    public function getDefault($canonical_path, $default = null)    {        return PMA_array_read($canonical_path, $this->cfg, $default);    }    /**     * Returns config value, if it's not set uses the default one; returns     * $default if the path isn't set and doesn't contain a default value     *     * @param  string $path     * @param  mixed  $default     * @return mixed     */    public function getValue($path, $default = null)    {        $v = PMA_array_read($path, $_SESSION[$this->id], null);        if ($v !== null) {            return $v;        }        $path = $this->getCanonicalPath($path);        return $this->getDefault($path, $default);    }    /**     * Returns canonical path     *     * @param string $path     * @return string     */    public function getCanonicalPath($path) {        return preg_replace('#^Servers/([\d]+)/#', 'Servers/1/', $path);    }    /**     * Returns config database entry for $path ($cfg_db in config_info.php)     *     * @param  string $path     * @param  mixed  $default     * @return mixed     */    public function getDbEntry($path, $default = null)    {        return PMA_array_read($path, $this->cfgDb, $default);    }    /**     * Returns server count     *     * @return int     */    public function getServerCount()    {        return isset($_SESSION[$this->id]['Servers'])            ? count($_SESSION[$this->id]['Servers'])            : 0;    }    /**     * Returns server list     *     * @return array|null     */    public function getServers()    {      return isset($_SESSION[$this->id]['Servers'])          ? $_SESSION[$this->id]['Servers']          : null;    }    /**     * Returns DSN of given server     *     * @param integer $server     * @return string     */    function getServerDSN($server)    {        if (!isset($_SESSION[$this->id]['Servers'][$server])) {            return '';        }        $path = 'Servers/' . $server;        $dsn = $this->getValue("$path/extension") . '://';        if ($this->getValue("$path/auth_type") == 'config') {            $dsn .= $this->getValue("$path/user");            if (!$this->getValue("$path/nopassword")) {                $dsn .= ':***';            }            $dsn .= '@';        }        if ($this->getValue("$path/connect_type") == 'tcp') {            $dsn .= $this->getValue("$path/host");            $port = $this->getValue("$path/port");            if ($port) {                $dsn .= ':' . $port;            }        } else {            $dsn .= $this->getValue("$path/socket");        }        return $dsn;    }    /**     * Returns server name     *     * @param int $id     * @return string     */    public function getServerName($id)    {        if (!isset($_SESSION[$this->id]['Servers'][$id])) {            return '';        }        $verbose = $this->get("Servers/$id/verbose");        if (!empty($verbose)) {            return $verbose;        }        $host = $this->get("Servers/$id/host");        return empty($host) ? 'localhost' : $host;    }    /**     * Removes server     *     * @param int $server     */    public function removeServer($server)    {        if (!isset($_SESSION[$this->id]['Servers'][$server])) {            return;        }        $last_server = $this->getServerCount();        for ($i = $server; $i < $last_server; $i++) {            $_SESSION[$this->id]['Servers'][$i] = $_SESSION[$this->id]['Servers'][$i+1];        }        unset($_SESSION[$this->id]['Servers'][$last_server]);        if (isset($_SESSION[$this->id]['ServerDefault'])            && $_SESSION[$this->id]['ServerDefault'] >= 0) {            unset($_SESSION[$this->id]['ServerDefault']);        }    }    /**     * Returns config file path, relative to phpMyAdmin's root path     *     * @return string     */    public function getFilePath()    {        // Load paths        if (!defined('SETUP_CONFIG_FILE')) {            include_once './libraries/vendor_config.php';        }        return SETUP_CONFIG_FILE;    }    /**     * Returns configuration array (full, multidimensional format)     *     * @return array     */    public function getConfig()    {        $c = $_SESSION[$this->id];        foreach ($this->cfgUpdateReadMapping as $map_to => $map_from) {            PMA_array_write($map_to, $c, PMA_array_read($map_from, $c));            PMA_array_remove($map_from, $c);        }        return $c;    }    /**     * Returns configuration array (flat format)     *     * @return array     */    public function getConfigArray()    {        $this->_flattenArrayResult = array();        array_walk($_SESSION[$this->id], array($this, '_flattenArray'), '');        $c = $this->_flattenArrayResult;        $this->_flattenArrayResult = null;        $persistKeys = array_diff(array_keys($this->persistKeys), array_keys($c));        foreach ($persistKeys as $k) {            $c[$k] = $this->getDefault($k);        }        foreach ($this->cfgUpdateReadMapping as $map_to => $map_from) {            if (!isset($c[$map_from])) {                continue;            }            $c[$map_to] = $c[$map_from];            unset($c[$map_from]);        }        return $c;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles creation of VIEWs * * @todo js error when view name is empty (strFormEmpty) * @todo (also validate if js is disabled, after form submission?) * @package PhpMyAdmin *//** * do not import request variable into global scope * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * */require_once './libraries/common.inc.php';/** * Runs common work */require './libraries/db_common.inc.php';$url_params['goto'] = $cfg['DefaultTabDatabase'];$url_params['back'] = 'view_create.php';$view_algorithm_options = array(    'UNDEFINED',    'MERGE',    'TEMPTABLE',);$view_with_options = array(    'CASCADED CHECK OPTION',    'LOCAL CHECK OPTION');if (isset($_REQUEST['createview'])) {    /**     * Creates the view     */    $sep = "\r\n";    $sql_query = 'CREATE';    if (isset($_REQUEST['view']['or_replace'])) {        $sql_query .= ' OR REPLACE';    }    if (PMA_isValid($_REQUEST['view']['algorithm'], $view_algorithm_options)) {        $sql_query .= $sep . ' ALGORITHM = ' . $_REQUEST['view']['algorithm'];    }    $sql_query .= $sep . ' VIEW ' . PMA_backquote($_REQUEST['view']['name']);    if (! empty($_REQUEST['view']['column_names'])) {        $sql_query .= $sep . ' (' . $_REQUEST['view']['column_names'] . ')';    }    $sql_query .= $sep . ' AS ' . $_REQUEST['view']['as'];    if (isset($_REQUEST['view']['with'])) {        $options = array_intersect($_REQUEST['view']['with'], $view_with_options);        if (count($options)) {            $sql_query .= $sep . ' WITH ' . implode(' ', $options);        }    }    if (PMA_DBI_try_query($sql_query)) {        $message = PMA_Message::success();        include './' . $cfg['DefaultTabDatabase'];        exit();    } else {        $message = PMA_Message::rawError(PMA_DBI_getError());    }}// prefill values if not already filled from former submission$view = array(    'or_replace' => '',    'algorithm' => '',    'name' => '',    'column_names' => '',    'as' => $sql_query,    'with' => array(),);if (PMA_isValid($_REQUEST['view'], 'array')) {    $view = array_merge($view, $_REQUEST['view']);}/** * Displays top menu links * We use db links because a VIEW is not necessarily on a single table */$num_tables = 0;require_once './libraries/db_links.inc.php';$url_params['db'] = $GLOBALS['db'];$url_params['reload'] = 1;/** * Displays the page */?><!-- CREATE VIEW options --><div id="div_view_options"><form method="post" action="view_create.php"><?php echo PMA_generate_common_hidden_inputs($url_params); ?><fieldset>    <legend>CREATE VIEW</legend>    <table>    <tr><td><label for="or_replace">OR REPLACE</label></td>        <td><input type="checkbox" name="view[or_replace]" id="or_replace"                <?php if ($view['or_replace']) { ?>                checked="checked"                <?php } ?>                value="1" />        </td>    </tr>    <tr>        <td><label for="algorithm">ALGORITHM</label></td>        <td><select name="view[algorithm]" id="algorithm">            <?php            foreach ($view_algorithm_options as $option) {                echo '<option value="' . htmlspecialchars($option) . '"';                if ($view['algorithm'] === $option) {                    echo 'selected="selected"';                }                echo '>' . htmlspecialchars($option) . '</option>';            }            ?>            </select>        </td>    </tr>    <tr><td><?php echo __('VIEW name'); ?></td>        <td><input type="text" size="20" name="view[name]" onfocus="this.select()"                value="<?php echo htmlspecialchars($view['name']); ?>" />        </td>    </tr>    <tr><td><?php echo __('Column names'); ?></td>        <td><input type="text" maxlength="100" size="50" name="view[column_names]"                onfocus="this.select()"                value="<?php echo htmlspecialchars($view['column_names']); ?>" />        </td>    </tr>    <tr><td>AS</td>        <td>            <textarea name="view[as]" rows="<?php echo $cfg['TextareaRows']; ?>"                cols="<?php echo $cfg['TextareaCols']; ?>"                dir="<?php echo $text_dir; ?>" onfocus="this.select();"                ><?php echo htmlspecialchars($view['as']); ?></textarea>        </td>    </tr>    <tr><td>WITH</td>        <td>            <?php            foreach ($view_with_options as $option) {                echo '<input type="checkbox" name="view[with][]"';                if (in_array($option, $view['with'])) {                    echo ' checked="checked"';                }                echo ' id="view_with_' . str_replace(' ', '_', htmlspecialchars($option)) . '"';                echo ' value="' . htmlspecialchars($option) . '" />';                echo '<label for="view_with_' . str_replace(' ', '_', htmlspecialchars($option)) . '">';                echo htmlspecialchars($option) . '</label>&nbsp;';            }            ?>        </td>    </tr>    </table></fieldset><fieldset class="tblFooters">    <input type="submit" name="createview" value="<?php echo __('Go'); ?>" /></fieldset></form></div><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build MediaWiki dumps of tables * * @package PhpMyAdmin-Export * @subpackage MediaWiki */if (! defined('PHPMYADMIN')) {    exit;}if (isset($plugin_list)) {    $plugin_list['mediawiki'] = array(        'text' => __('MediaWiki Table'),        'extension' => 'txt',        'mime_type' => 'text/plain',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in MediaWiki format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query) {        $columns = PMA_DBI_get_columns($db, $table);        $columns = array_values($columns);        $row_cnt = count($columns);        $output = "{| cellpadding=\"10\" cellspacing=\"0\" border=\"1\" style=\"text-align:center;\"\n";        $output .= "|+'''" . $table . "'''\n";        $output .= "|- style=\"background:#ffdead;\"\n";        $output .= "! style=\"background:#ffffff\" | \n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Field'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Type\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Type'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Null\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Null'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Default\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Default'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Extra\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Extra'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|}\n\n\n\n";        return PMA_exportOutputHandler($output);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Charset conversion functions. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}define('PMA_CHARSET_NONE', 0);define('PMA_CHARSET_ICONV', 1);define('PMA_CHARSET_RECODE', 2);define('PMA_CHARSET_ICONV_AIX', 3);// Finally detect which function we will use:if ($cfg['RecodingEngine'] == 'iconv') {    if (@function_exists('iconv')) {        if ((@stristr(PHP_OS, 'AIX')) && (@strcasecmp(ICONV_IMPL, 'unknown') == 0) && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)) {            $PMA_recoding_engine = PMA_CHARSET_ICONV_AIX;        } else {            $PMA_recoding_engine = PMA_CHARSET_ICONV;        }    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;        PMA_warnMissingExtension('iconv');    }} elseif ($cfg['RecodingEngine'] == 'recode') {    if (@function_exists('recode_string')) {        $PMA_recoding_engine = PMA_CHARSET_RECODE;    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;        PMA_warnMissingExtension('recode');    }} elseif ($cfg['RecodingEngine'] == 'auto') {    if (@function_exists('iconv')) {        if ((@stristr(PHP_OS, 'AIX')) && (@strcasecmp(ICONV_IMPL, 'unknown') == 0) && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)) {            $PMA_recoding_engine = PMA_CHARSET_ICONV_AIX;        } else {            $PMA_recoding_engine = PMA_CHARSET_ICONV;        }    } elseif (@function_exists('recode_string')) {        $PMA_recoding_engine = PMA_CHARSET_RECODE;    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;    }} else {    $PMA_recoding_engine = PMA_CHARSET_NONE;}/* Load AIX iconv wrapper if needed */if ($PMA_recoding_engine == PMA_CHARSET_ICONV_AIX) {    include_once './libraries/iconv_wrapper.lib.php';}/** * Converts encoding of text according to parameters with detected * conversion function. * * @param string   source charset * @param string   target charset * @param string   what to convert * * @return  string   converted text * * @access  public * */function PMA_convert_string($src_charset, $dest_charset, $what){    if ($src_charset == $dest_charset) {        return $what;    }    switch ($GLOBALS['PMA_recoding_engine']) {        case PMA_CHARSET_RECODE:            return recode_string($src_charset . '..'  . $dest_charset, $what);        case PMA_CHARSET_ICONV:            return iconv($src_charset, $dest_charset . $GLOBALS['cfg']['IconvExtraParams'], $what);        case PMA_CHARSET_ICONV_AIX:            return PMA_aix_iconv_wrapper($src_charset, $dest_charset . $GLOBALS['cfg']['IconvExtraParams'], $what);        default:            return $what;    }} //  end of the "PMA_convert_string()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build XML dumps of tables * * @package PhpMyAdmin-Export * @subpackage XML */if (! defined('PHPMYADMIN')) {    exit;}if (!strlen($GLOBALS['db'])) { /* Can't do server export */    return;}if (isset($plugin_list)) {    $plugin_list['xml'] = array(        'text' => __('XML'),        'extension' => 'xml',        'mime_type' => 'text/xml',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group')            ),        'options_text' => __('Options')        );    /* Export structure */    $plugin_list['xml']['options'][] = array(        'type' => 'begin_group',        'name' => 'structure',        'text' => __('Object creation options (all are recommended)')        );    if (!PMA_DRIZZLE) {        $plugin_list['xml']['options'][] = array(            'type' => 'bool',            'name' => 'export_functions',            'text' => __('Functions')            );        $plugin_list['xml']['options'][] = array(            'type' => 'bool',            'name' => 'export_procedures',            'text' => __('Procedures')            );    }    $plugin_list['xml']['options'][] = array(        'type' => 'bool',        'name' => 'export_tables',        'text' => __('Tables')        );    if (!PMA_DRIZZLE) {        $plugin_list['xml']['options'][] = array(            'type' => 'bool',            'name' => 'export_triggers',            'text' => __('Triggers')            );        $plugin_list['xml']['options'][] = array(            'type' => 'bool',            'name' => 'export_views',            'text' => __('Views')            );    }    $plugin_list['xml']['options'][] = array(        'type' => 'end_group'        );    /* Data */    $plugin_list['xml']['options'][] = array(        'type' => 'begin_group',        'name' => 'data',        'text' => __('Data dump options')        );    $plugin_list['xml']['options'][] = array(        'type' => 'bool',        'name' => 'export_contents',        'text' => __('Export contents')        );    $plugin_list['xml']['options'][] = array(        'type' => 'end_group'        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        $foot = '</pma_xml_export>';        return PMA_exportOutputHandler($foot);    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        global $crlf;        global $cfg;        global $db;        global $table;        global $tables;        $export_struct = isset($GLOBALS['xml_export_functions']) || isset($GLOBALS['xml_export_procedures'])            || isset($GLOBALS['xml_export_tables']) || isset($GLOBALS['xml_export_triggers'])            || isset($GLOBALS['xml_export_views']);        $export_data = isset($GLOBALS['xml_export_contents']) ? true : false;        if ($GLOBALS['output_charset_conversion']) {            $charset = $GLOBALS['charset_of_file'];        } else {            $charset = 'utf-8';        }        $head  =  '<?xml version="1.0" encoding="' . $charset . '"?>' . $crlf               .  '<!--' . $crlf               .  '- phpMyAdmin XML Dump' . $crlf               .  '- version ' . PMA_VERSION . $crlf               .  '- http://www.phpmyadmin.net' . $crlf               .  '-' . $crlf               .  '- ' . __('Host') . ': ' . $cfg['Server']['host'];        if (!empty($cfg['Server']['port'])) {             $head .= ':' . $cfg['Server']['port'];        }        $head .= $crlf               .  '- ' . __('Generation Time') . ': ' . PMA_localisedDate() . $crlf               .  '- ' . __('Server version') . ': ' . PMA_MYSQL_STR_VERSION . $crlf               .  '- ' . __('PHP Version') . ': ' . phpversion() . $crlf               .  '-->' . $crlf . $crlf;        $head .= '<pma_xml_export version="1.0"' . (($export_struct) ? ' xmlns:pma="http://www.phpmyadmin.net/some_doc_url/"' : '') . '>' . $crlf;        if ($export_struct) {            if (PMA_DRIZZLE) {                $result = PMA_DBI_fetch_result("                    SELECT                        'utf8' AS DEFAULT_CHARACTER_SET_NAME,                        DEFAULT_COLLATION_NAME                    FROM data_dictionary.SCHEMAS                    WHERE SCHEMA_NAME = '" . PMA_sqlAddSlashes($db) . "'");            } else {                $result = PMA_DBI_fetch_result('SELECT `DEFAULT_CHARACTER_SET_NAME`, `DEFAULT_COLLATION_NAME` FROM `information_schema`.`SCHEMATA` WHERE `SCHEMA_NAME` = \''.PMA_sqlAddSlashes($db).'\' LIMIT 1');            }            $db_collation = $result[0]['DEFAULT_COLLATION_NAME'];            $db_charset = $result[0]['DEFAULT_CHARACTER_SET_NAME'];            $head .= '    <!--' . $crlf;            $head .= '    - Structure schemas' . $crlf;            $head .= '    -->' . $crlf;            $head .= '    <pma:structure_schemas>' . $crlf;            $head .= '        <pma:database name="' . htmlspecialchars($db) . '" collation="' . $db_collation . '" charset="' . $db_charset . '">' . $crlf;            if (count($tables) == 0) {                $tables[] = $table;            }            foreach ($tables as $table) {                // Export tables and views                $result = PMA_DBI_fetch_result('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table), 0);                $tbl =  $result[$table][1];                $is_view = PMA_Table::isView($db, $table);                if ($is_view) {                    $type = 'view';                } else {                    $type = 'table';                }                if ($is_view && ! isset($GLOBALS['xml_export_views'])) {                    continue;                }                if (! $is_view && ! isset($GLOBALS['xml_export_tables'])) {                    continue;                }                $head .= '            <pma:' . $type . ' name="' . $table . '">' . $crlf;                $tbl = "                " . htmlspecialchars($tbl);                $tbl = str_replace("\n", "\n                ", $tbl);                $head .= $tbl . ';' . $crlf;                $head .= '            </pma:' . $type . '>' . $crlf;                if (isset($GLOBALS['xml_export_triggers']) && $GLOBALS['xml_export_triggers']) {                    // Export triggers                    $triggers = PMA_DBI_get_triggers($db, $table);                    if ($triggers) {                        foreach ($triggers as $trigger) {                            $code = $trigger['create'];                            $head .= '            <pma:trigger name="' . $trigger['name'] . '">' . $crlf;                            // Do some formatting                            $code = substr(rtrim($code), 0, -3);                            $code = "                " . htmlspecialchars($code);                            $code = str_replace("\n", "\n                ", $code);                            $head .= $code . $crlf;                            $head .= '            </pma:trigger>' . $crlf;                        }                        unset($trigger);                        unset($triggers);                    }                }            }            if (isset($GLOBALS['xml_export_functions']) && $GLOBALS['xml_export_functions']) {                // Export functions                $functions = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');                if ($functions) {                    foreach ($functions as $function) {                        $head .= '            <pma:function name="' . $function . '">' . $crlf;                        // Do some formatting                        $sql = PMA_DBI_get_definition($db, 'FUNCTION', $function);                        $sql = rtrim($sql);                        $sql = "                " . htmlspecialchars($sql);                        $sql = str_replace("\n", "\n                ", $sql);                        $head .= $sql . $crlf;                        $head .= '            </pma:function>' . $crlf;                    }                    unset($create_func);                    unset($function);                    unset($functions);                }            }            if (isset($GLOBALS['xml_export_procedures']) && $GLOBALS['xml_export_procedures']) {                // Export procedures                $procedures = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');                if ($procedures) {                    foreach ($procedures as $procedure) {                        $head .= '            <pma:procedure name="' . $procedure . '">' . $crlf;                        // Do some formatting                        $sql = PMA_DBI_get_definition($db, 'PROCEDURE', $procedure);                        $sql = rtrim($sql);                        $sql = "                " . htmlspecialchars($sql);                        $sql = str_replace("\n", "\n                ", $sql);                        $head .= $sql . $crlf;                        $head .= '            </pma:procedure>' . $crlf;                    }                    unset($create_proc);                    unset($procedure);                    unset($procedures);                }            }            unset($result);            $head .= '        </pma:database>' . $crlf;            $head .= '    </pma:structure_schemas>' . $crlf;            if ($export_data) {                $head .= $crlf;            }        }        return PMA_exportOutputHandler($head);    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        global $crlf;        if (isset($GLOBALS['xml_export_contents']) && $GLOBALS['xml_export_contents']) {            $head = '    <!--' . $crlf                  . '    - ' . __('Database') . ': ' .  '\'' . $db . '\'' . $crlf                  . '    -->' . $crlf                  . '    <database name="' . htmlspecialchars($db) . '">' . $crlf;            return PMA_exportOutputHandler($head);        } else {            return true;        }    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        global $crlf;        if (isset($GLOBALS['xml_export_contents']) && $GLOBALS['xml_export_contents']) {            return PMA_exportOutputHandler('    </database>' . $crlf);        } else {            return true;        }    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in XML format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        if (isset($GLOBALS['xml_export_contents']) && $GLOBALS['xml_export_contents']) {            $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);            $columns_cnt = PMA_DBI_num_fields($result);            $columns = array();            for ($i = 0; $i < $columns_cnt; $i++) {                $columns[$i] = stripslashes(str_replace(' ', '_', PMA_DBI_field_name($result, $i)));            }            unset($i);            $buffer      = '        <!-- ' . __('Table') . ' ' . $table . ' -->' . $crlf;            if (!PMA_exportOutputHandler($buffer)) {                return false;            }            while ($record = PMA_DBI_fetch_row($result)) {                $buffer         = '        <table name="' . htmlspecialchars($table) . '">' . $crlf;                for ($i = 0; $i < $columns_cnt; $i++) {                    // If a cell is NULL, still export it to preserve the XML structure                    if (!isset($record[$i]) || is_null($record[$i])) {                        $record[$i] = 'NULL';                    }                    $buffer .= '            <column name="' . htmlspecialchars($columns[$i]) . '">' . htmlspecialchars((string)$record[$i])                            .  '</column>' . $crlf;                }                $buffer         .= '        </table>' . $crlf;                if (!PMA_exportOutputHandler($buffer)) {                    return false;                }            }            PMA_DBI_free_result($result);        }        return true;    } // end of the 'PMA_getTableXML()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * CSV import plugin for phpMyAdmin * * @todo    add an option for handling NULL values * @package PhpMyAdmin-Import * @subpackage CSV */if (! defined('PHPMYADMIN')) {    exit;}$analyze = false;if ($plugin_param !== 'table') {    $analyze = true;}if (isset($plugin_list)) {    $plugin_list['csv'] = array(        'text' => __('CSV'),        'extension' => 'csv',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'replace', 'text' => __('Replace table data with file')),            array('type' => 'bool', 'name' => 'ignore', 'text' => __('Do not abort on INSERT error')),            array('type' => 'text', 'name' => 'terminated', 'text' => __('Columns separated with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'enclosed', 'text' => __('Columns enclosed with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'escaped', 'text' => __('Columns escaped with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'new_line', 'text' => __('Lines terminated with:'), 'size' => 2),            ),        'options_text' => __('Options'),        );    if ($plugin_param !== 'table') {        $plugin_list['csv']['options'][]            = array('type' => 'bool', 'name' => 'col_names', 'text' => __('The first line of the file contains the table column names <i>(if this is unchecked, the first line will become part of the data)</i>'));    } else {        $hint = new PMA_Message(__('If the data in each row of the file is not in the same order as in the database, list the corresponding column names here. Column names must be separated by commas and not enclosed in quotations.'));        $plugin_list['csv']['options'][]            = array('type' => 'text', 'name' => 'columns', 'text' => __('Column names: ') . PMA_showHint($hint));    }    $plugin_list['csv']['options'][] = array('type' => 'end_group');    /* We do not define function when plugin is just queried for information above */    return;}$replacements = array(    '\\n'   => "\n",    '\\t'   => "\t",    '\\r'   => "\r",    );$csv_terminated = strtr($csv_terminated, $replacements);$csv_enclosed = strtr($csv_enclosed,  $replacements);$csv_escaped = strtr($csv_escaped, $replacements);$csv_new_line = strtr($csv_new_line, $replacements);$param_error = false;if (strlen($csv_terminated) != 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns terminated by'), false);    $error = true;    $param_error = true;    // The default dialog of MS Excel when generating a CSV produces a    // semi-colon-separated file with no chance of specifying the    // enclosing character. Thus, users who want to import this file    // tend to remove the enclosing character on the Import dialog.    // I could not find a test case where having no enclosing characters    // confuses this script.    // But the parser won't work correctly with strings so we allow just    // one character.} elseif (strlen($csv_enclosed) > 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns enclosed by'), false);    $error = true;    $param_error = true;} elseif (strlen($csv_escaped) != 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns escaped by'), false);    $error = true;    $param_error = true;} elseif (strlen($csv_new_line) != 1 && $csv_new_line != 'auto') {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Lines terminated by'), false);    $error = true;    $param_error = true;}// If there is an error in the parameters entered, indicate that immediately.if ($param_error) {    PMA_mysqlDie($message->getMessage(), '', '', $err_url);}$buffer = '';$required_fields = 0;if (!$analyze) {    if (isset($csv_replace)) {        $sql_template = 'REPLACE';    } else {        $sql_template = 'INSERT';        if (isset($csv_ignore)) {            $sql_template .= ' IGNORE';        }    }    $sql_template .= ' INTO ' . PMA_backquote($table);    $tmp_fields = PMA_DBI_get_columns($db, $table);    if (empty($csv_columns)) {        $fields = $tmp_fields;    } else {        $sql_template .= ' (';        $fields = array();        $tmp   = preg_split('/,( ?)/', $csv_columns);        foreach ($tmp as $key => $val) {            if (count($fields) > 0) {                $sql_template .= ', ';            }            /* Trim also `, if user already included backquoted fields */            $val = trim($val, " \t\r\n\0\x0B`");            $found = false;            foreach ($tmp_fields as $id => $field) {                if ($field['Field'] == $val) {                    $found = true;                    break;                }            }            if (!$found) {                $message = PMA_Message::error(__('Invalid column (%s) specified! Ensure that columns names are spelled correctly, separated by commas, and not enclosed in quotes.'));                $message->addParam($val);                $error = true;                break;            }            $fields[] = $field;            $sql_template .= PMA_backquote($val);        }        $sql_template .= ') ';    }    $required_fields = count($fields);    $sql_template .= ' VALUES (';}// Defaults for parser$i = 0;$len = 0;$line = 1;$lasti = -1;$values = array();$csv_finish = false;$tempRow = array();$rows = array();$col_names = array();$tables = array();$col_count = 0;$max_cols = 0;while (!($finished && $i >= $len) && !$error && !$timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        // subtract data we didn't handle yet and stop processing        $offset -= strlen($buffer);        break;    } elseif ($data === true) {        // Handle rest of buffer    } else {        // Append new data to buffer        $buffer .= $data;        unset($data);        // Do not parse string when we're not at the end and don't have new line inside        if (($csv_new_line == 'auto' && strpos($buffer, "\r") === false && strpos($buffer, "\n") === false)            || ($csv_new_line != 'auto' && strpos($buffer, $csv_new_line) === false)        ) {            continue;        }    }    // Current length of our buffer    $len = strlen($buffer);    // Currently parsed char    $ch = $buffer[$i];    while ($i < $len) {        // Deadlock protection        if ($lasti == $i && $lastlen == $len) {            $message = PMA_Message::error(__('Invalid format of CSV input on line %d.'));            $message->addParam($line);            $error = true;            break;        }        $lasti = $i;        $lastlen = $len;        // This can happen with auto EOL and \r at the end of buffer        if (!$csv_finish) {            // Grab empty field            if ($ch == $csv_terminated) {                if ($i == $len - 1) {                    break;                }                $values[] = '';                $i++;                $ch = $buffer[$i];                continue;            }            // Grab one field            $fallbacki = $i;            if ($ch == $csv_enclosed) {                if ($i == $len - 1) {                    break;                }                $need_end = true;                $i++;                $ch = $buffer[$i];            } else {                $need_end = false;            }            $fail = false;            $value = '';            while (($need_end && ($ch != $csv_enclosed || $csv_enclosed == $csv_escaped))             || (!$need_end && !($ch == $csv_terminated               || $ch == $csv_new_line || ($csv_new_line == 'auto'                && ($ch == "\r" || $ch == "\n"))))) {                if ($ch == $csv_escaped) {                    if ($i == $len - 1) {                        $fail = true;                        break;                    }                    $i++;                    $ch = $buffer[$i];                    if ($csv_enclosed == $csv_escaped && ($ch == $csv_terminated                     || $ch == $csv_new_line || ($csv_new_line == 'auto'                      && ($ch == "\r" || $ch == "\n")))) {                        break;                    }                }                $value .= $ch;                if ($i == $len - 1) {                    if (!$finished) {                        $fail = true;                    }                    break;                }                $i++;                $ch = $buffer[$i];            }            // unquoted NULL string            if (false === $need_end && $value === 'NULL') {                $value = null;            }            if ($fail) {                $i = $fallbacki;                $ch = $buffer[$i];                break;            }            // Need to strip trailing enclosing char?            if ($need_end && $ch == $csv_enclosed) {                if ($finished && $i == $len - 1) {                    $ch = null;                } elseif ($i == $len - 1) {                    $i = $fallbacki;                    $ch = $buffer[$i];                    break;                } else {                    $i++;                    $ch = $buffer[$i];                }            }            // Are we at the end?            if ($ch == $csv_new_line                || ($csv_new_line == 'auto' && ($ch == "\r" || $ch == "\n"))                || ($finished && $i == $len - 1)            ) {                $csv_finish = true;            }            // Go to next char            if ($ch == $csv_terminated) {                if ($i == $len - 1) {                    $i = $fallbacki;                    $ch = $buffer[$i];                    break;                }                $i++;                $ch = $buffer[$i];            }            // If everything went okay, store value            $values[] = $value;        }        // End of line        if ($csv_finish            || $ch == $csv_new_line            || ($csv_new_line == 'auto' && ($ch == "\r" || $ch == "\n"))        ) {            if ($csv_new_line == 'auto' && $ch == "\r") { // Handle "\r\n"                if ($i >= ($len - 2) && !$finished) {                    break; // We need more data to decide new line                }                if ($buffer[$i + 1] == "\n") {                    $i++;                }            }            // We didn't parse value till the end of line, so there was empty one            if (!$csv_finish) {                $values[] = '';            }            if ($analyze) {                foreach ($values as $ley => $val) {                    $tempRow[] = $val;                    ++$col_count;                }                if ($col_count > $max_cols) {                    $max_cols = $col_count;                }                $col_count = 0;                $rows[] = $tempRow;                $tempRow = array();            } else {                // Do we have correct count of values?                if (count($values) != $required_fields) {                    // Hack for excel                    if ($values[count($values) - 1] == ';') {                        unset($values[count($values) - 1]);                    } else {                        $message = PMA_Message::error(__('Invalid column count in CSV input on line %d.'));                        $message->addParam($line);                        $error = true;                        break;                    }                }                $first = true;                $sql = $sql_template;                foreach ($values as $key => $val) {                    if (!$first) {                        $sql .= ', ';                    }                    if ($val === null) {                        $sql .= 'NULL';                    } else {                        $sql .= '\'' . PMA_sqlAddSlashes($val) . '\'';                    }                    $first = false;                }                $sql .= ')';                /**                 * @todo maybe we could add original line to verbose SQL in comment                 */                PMA_importRunQuery($sql, $sql);            }            $line++;            $csv_finish = false;            $values = array();            $buffer = substr($buffer, $i + 1);            $len = strlen($buffer);            $i = 0;            $lasti = -1;            $ch = $buffer[0];        }    } // End of parser loop} // End of import loopif ($analyze) {    /* Fill out all rows */    $num_rows = count($rows);    for ($i = 0; $i < $num_rows; ++$i) {        for ($j = count($rows[$i]); $j < $max_cols; ++$j) {            $rows[$i][] = 'NULL';        }    }    if (isset($_REQUEST['csv_col_names'])) {        $col_names = array_splice($rows, 0, 1);        $col_names = $col_names[0];    }    if ((isset($col_names) && count($col_names) != $max_cols)        || ! isset($col_names)    ) {        // Fill out column names        for ($i = 0; $i < $max_cols; ++$i) {            $col_names[] = 'COL '.($i+1);        }    }    if (strlen($db)) {        $result = PMA_DBI_fetch_result('SHOW TABLES');        $tbl_name = 'TABLE '.(count($result) + 1);    } else {        $tbl_name = 'TBL_NAME';    }    $tables[] = array($tbl_name, $col_names, $rows);    /* Obtain the best-fit MySQL types for each column */    $analyses = array();    $analyses[] = PMA_analyzeTable($tables[0]);    /**     * string $db_name (no backquotes)     *     * array $table = array(table_name, array() column_names, array()() rows)     * array $tables = array of "$table"s     *     * array $analysis = array(array() column_types, array() column_sizes)     * array $analyses = array of "$analysis"s     *     * array $create = array of SQL strings     *     * array $options = an associative array of options     */    /* Set database name to the currently selected one, if applicable */    if (strlen($db)) {        $db_name = $db;        $options = array('create_db' => false);    } else {        $db_name = 'CSV_DB';        $options = null;    }    /* Non-applicable parameters */    $create = null;    /* Created and execute necessary SQL statements from data */    PMA_buildSQL($db_name, $tables, $analyses, $create, $options);    unset($tables);    unset($analyses);}// Commit any possible data in buffersPMA_importRunQuery();if (count($values) != 0 && !$error) {    $message = PMA_Message::error(__('Invalid format of CSV input on line %d.'));    $message->addParam($line);    $error = true;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build CSV dumps of tables for excel * * @package PhpMyAdmin-Export * @subpackage CSV-Excel */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['excel'] = array(        'text' => __('CSV for MS Excel'),        'extension' => 'csv',        'mime_type' => 'text/comma-separated-values',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:')),            array('type' => 'bool', 'name' => 'removeCRLF', 'text' => __('Remove carriage return/line feed characters within columns')),            array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),            array(                'type' => 'select',                'name' => 'edition',                'values' => array(                    'win' => 'Windows',                    'mac_excel2003' => 'Excel 2003 / Macintosh',                    'mac_excel2008' => 'Excel 2008 / Macintosh'),                'text' => __('Excel edition:')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group'),            ),        'options_text' => __('Options'),        );} else {    /* Everything rest is coded in csv plugin */    include './libraries/export/csv.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * The Horde_Cipher_Blowfish:: class implements the Horde_Cipher interface * encryption data using the Blowfish algorithm. * * Copyright 2002-2009 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you * did not receive this file, see http://www.fsf.org/copyleft/lgpl.html. * * @author  Mike Cochrane <mike@graftonhall.co.nz> * @package Horde_Cipher */class Horde_Cipher_blowfish{    /**     * Pi Array     *     * @var array     */    protected $p = array(            0x243F6A88, 0x85A308D3, 0x13198A2E, 0x03707344,            0xA4093822, 0x299F31D0, 0x082EFA98, 0xEC4E6C89,            0x452821E6, 0x38D01377, 0xBE5466CF, 0x34E90C6C,            0xC0AC29B7, 0xC97C50DD, 0x3F84D5B5, 0xB5470917,            0x9216D5D9, 0x8979FB1B);    /**     * S Box (s1)     *     * @var array     */    protected $s1 = array(            0xD1310BA6, 0x98DFB5AC, 0x2FFD72DB, 0xD01ADFB7,            0xB8E1AFED, 0x6A267E96, 0xBA7C9045, 0xF12C7F99,            0x24A19947, 0xB3916CF7, 0x0801F2E2, 0x858EFC16,            0x636920D8, 0x71574E69, 0xA458FEA3, 0xF4933D7E,            0x0D95748F, 0x728EB658, 0x718BCD58, 0x82154AEE,            0x7B54A41D, 0xC25A59B5, 0x9C30D539, 0x2AF26013,            0xC5D1B023, 0x286085F0, 0xCA417918, 0xB8DB38EF,            0x8E79DCB0, 0x603A180E, 0x6C9E0E8B, 0xB01E8A3E,            0xD71577C1, 0xBD314B27, 0x78AF2FDA, 0x55605C60,            0xE65525F3, 0xAA55AB94, 0x57489862, 0x63E81440,            0x55CA396A, 0x2AAB10B6, 0xB4CC5C34, 0x1141E8CE,            0xA15486AF, 0x7C72E993, 0xB3EE1411, 0x636FBC2A,            0x2BA9C55D, 0x741831F6, 0xCE5C3E16, 0x9B87931E,            0xAFD6BA33, 0x6C24CF5C, 0x7A325381, 0x28958677,            0x3B8F4898, 0x6B4BB9AF, 0xC4BFE81B, 0x66282193,            0x61D809CC, 0xFB21A991, 0x487CAC60, 0x5DEC8032,            0xEF845D5D, 0xE98575B1, 0xDC262302, 0xEB651B88,            0x23893E81, 0xD396ACC5, 0x0F6D6FF3, 0x83F44239,            0x2E0B4482, 0xA4842004, 0x69C8F04A, 0x9E1F9B5E,            0x21C66842, 0xF6E96C9A, 0x670C9C61, 0xABD388F0,            0x6A51A0D2, 0xD8542F68, 0x960FA728, 0xAB5133A3,            0x6EEF0B6C, 0x137A3BE4, 0xBA3BF050, 0x7EFB2A98,            0xA1F1651D, 0x39AF0176, 0x66CA593E, 0x82430E88,            0x8CEE8619, 0x456F9FB4, 0x7D84A5C3, 0x3B8B5EBE,            0xE06F75D8, 0x85C12073, 0x401A449F, 0x56C16AA6,            0x4ED3AA62, 0x363F7706, 0x1BFEDF72, 0x429B023D,            0x37D0D724, 0xD00A1248, 0xDB0FEAD3, 0x49F1C09B,            0x075372C9, 0x80991B7B, 0x25D479D8, 0xF6E8DEF7,            0xE3FE501A, 0xB6794C3B, 0x976CE0BD, 0x04C006BA,            0xC1A94FB6, 0x409F60C4, 0x5E5C9EC2, 0x196A2463,            0x68FB6FAF, 0x3E6C53B5, 0x1339B2EB, 0x3B52EC6F,            0x6DFC511F, 0x9B30952C, 0xCC814544, 0xAF5EBD09,            0xBEE3D004, 0xDE334AFD, 0x660F2807, 0x192E4BB3,            0xC0CBA857, 0x45C8740F, 0xD20B5F39, 0xB9D3FBDB,            0x5579C0BD, 0x1A60320A, 0xD6A100C6, 0x402C7279,            0x679F25FE, 0xFB1FA3CC, 0x8EA5E9F8, 0xDB3222F8,            0x3C7516DF, 0xFD616B15, 0x2F501EC8, 0xAD0552AB,            0x323DB5FA, 0xFD238760, 0x53317B48, 0x3E00DF82,            0x9E5C57BB, 0xCA6F8CA0, 0x1A87562E, 0xDF1769DB,            0xD542A8F6, 0x287EFFC3, 0xAC6732C6, 0x8C4F5573,            0x695B27B0, 0xBBCA58C8, 0xE1FFA35D, 0xB8F011A0,            0x10FA3D98, 0xFD2183B8, 0x4AFCB56C, 0x2DD1D35B,            0x9A53E479, 0xB6F84565, 0xD28E49BC, 0x4BFB9790,            0xE1DDF2DA, 0xA4CB7E33, 0x62FB1341, 0xCEE4C6E8,            0xEF20CADA, 0x36774C01, 0xD07E9EFE, 0x2BF11FB4,            0x95DBDA4D, 0xAE909198, 0xEAAD8E71, 0x6B93D5A0,            0xD08ED1D0, 0xAFC725E0, 0x8E3C5B2F, 0x8E7594B7,            0x8FF6E2FB, 0xF2122B64, 0x8888B812, 0x900DF01C,            0x4FAD5EA0, 0x688FC31C, 0xD1CFF191, 0xB3A8C1AD,            0x2F2F2218, 0xBE0E1777, 0xEA752DFE, 0x8B021FA1,            0xE5A0CC0F, 0xB56F74E8, 0x18ACF3D6, 0xCE89E299,            0xB4A84FE0, 0xFD13E0B7, 0x7CC43B81, 0xD2ADA8D9,            0x165FA266, 0x80957705, 0x93CC7314, 0x211A1477,            0xE6AD2065, 0x77B5FA86, 0xC75442F5, 0xFB9D35CF,            0xEBCDAF0C, 0x7B3E89A0, 0xD6411BD3, 0xAE1E7E49,            0x00250E2D, 0x2071B35E, 0x226800BB, 0x57B8E0AF,            0x2464369B, 0xF009B91E, 0x5563911D, 0x59DFA6AA,            0x78C14389, 0xD95A537F, 0x207D5BA2, 0x02E5B9C5,            0x83260376, 0x6295CFA9, 0x11C81968, 0x4E734A41,            0xB3472DCA, 0x7B14A94A, 0x1B510052, 0x9A532915,            0xD60F573F, 0xBC9BC6E4, 0x2B60A476, 0x81E67400,            0x08BA6FB5, 0x571BE91F, 0xF296EC6B, 0x2A0DD915,            0xB6636521, 0xE7B9F9B6, 0xFF34052E, 0xC5855664,            0x53B02D5D, 0xA99F8FA1, 0x08BA4799, 0x6E85076A);    /**     * S Box (s2)     *     * @var array     */    protected $s2 = array(            0x4B7A70E9, 0xB5B32944, 0xDB75092E, 0xC4192623,            0xAD6EA6B0, 0x49A7DF7D, 0x9CEE60B8, 0x8FEDB266,            0xECAA8C71, 0x699A17FF, 0x5664526C, 0xC2B19EE1,            0x193602A5, 0x75094C29, 0xA0591340, 0xE4183A3E,            0x3F54989A, 0x5B429D65, 0x6B8FE4D6, 0x99F73FD6,            0xA1D29C07, 0xEFE830F5, 0x4D2D38E6, 0xF0255DC1,            0x4CDD2086, 0x8470EB26, 0x6382E9C6, 0x021ECC5E,            0x09686B3F, 0x3EBAEFC9, 0x3C971814, 0x6B6A70A1,            0x687F3584, 0x52A0E286, 0xB79C5305, 0xAA500737,            0x3E07841C, 0x7FDEAE5C, 0x8E7D44EC, 0x5716F2B8,            0xB03ADA37, 0xF0500C0D, 0xF01C1F04, 0x0200B3FF,            0xAE0CF51A, 0x3CB574B2, 0x25837A58, 0xDC0921BD,            0xD19113F9, 0x7CA92FF6, 0x94324773, 0x22F54701,            0x3AE5E581, 0x37C2DADC, 0xC8B57634, 0x9AF3DDA7,            0xA9446146, 0x0FD0030E, 0xECC8C73E, 0xA4751E41,            0xE238CD99, 0x3BEA0E2F, 0x3280BBA1, 0x183EB331,            0x4E548B38, 0x4F6DB908, 0x6F420D03, 0xF60A04BF,            0x2CB81290, 0x24977C79, 0x5679B072, 0xBCAF89AF,            0xDE9A771F, 0xD9930810, 0xB38BAE12, 0xDCCF3F2E,            0x5512721F, 0x2E6B7124, 0x501ADDE6, 0x9F84CD87,            0x7A584718, 0x7408DA17, 0xBC9F9ABC, 0xE94B7D8C,            0xEC7AEC3A, 0xDB851DFA, 0x63094366, 0xC464C3D2,            0xEF1C1847, 0x3215D908, 0xDD433B37, 0x24C2BA16,            0x12A14D43, 0x2A65C451, 0x50940002, 0x133AE4DD,            0x71DFF89E, 0x10314E55, 0x81AC77D6, 0x5F11199B,            0x043556F1, 0xD7A3C76B, 0x3C11183B, 0x5924A509,            0xF28FE6ED, 0x97F1FBFA, 0x9EBABF2C, 0x1E153C6E,            0x86E34570, 0xEAE96FB1, 0x860E5E0A, 0x5A3E2AB3,            0x771FE71C, 0x4E3D06FA, 0x2965DCB9, 0x99E71D0F,            0x803E89D6, 0x5266C825, 0x2E4CC978, 0x9C10B36A,            0xC6150EBA, 0x94E2EA78, 0xA5FC3C53, 0x1E0A2DF4,            0xF2F74EA7, 0x361D2B3D, 0x1939260F, 0x19C27960,            0x5223A708, 0xF71312B6, 0xEBADFE6E, 0xEAC31F66,            0xE3BC4595, 0xA67BC883, 0xB17F37D1, 0x018CFF28,            0xC332DDEF, 0xBE6C5AA5, 0x65582185, 0x68AB9802,            0xEECEA50F, 0xDB2F953B, 0x2AEF7DAD, 0x5B6E2F84,            0x1521B628, 0x29076170, 0xECDD4775, 0x619F1510,            0x13CCA830, 0xEB61BD96, 0x0334FE1E, 0xAA0363CF,            0xB5735C90, 0x4C70A239, 0xD59E9E0B, 0xCBAADE14,            0xEECC86BC, 0x60622CA7, 0x9CAB5CAB, 0xB2F3846E,            0x648B1EAF, 0x19BDF0CA, 0xA02369B9, 0x655ABB50,            0x40685A32, 0x3C2AB4B3, 0x319EE9D5, 0xC021B8F7,            0x9B540B19, 0x875FA099, 0x95F7997E, 0x623D7DA8,            0xF837889A, 0x97E32D77, 0x11ED935F, 0x16681281,            0x0E358829, 0xC7E61FD6, 0x96DEDFA1, 0x7858BA99,            0x57F584A5, 0x1B227263, 0x9B83C3FF, 0x1AC24696,            0xCDB30AEB, 0x532E3054, 0x8FD948E4, 0x6DBC3128,            0x58EBF2EF, 0x34C6FFEA, 0xFE28ED61, 0xEE7C3C73,            0x5D4A14D9, 0xE864B7E3, 0x42105D14, 0x203E13E0,            0x45EEE2B6, 0xA3AAABEA, 0xDB6C4F15, 0xFACB4FD0,            0xC742F442, 0xEF6ABBB5, 0x654F3B1D, 0x41CD2105,            0xD81E799E, 0x86854DC7, 0xE44B476A, 0x3D816250,            0xCF62A1F2, 0x5B8D2646, 0xFC8883A0, 0xC1C7B6A3,            0x7F1524C3, 0x69CB7492, 0x47848A0B, 0x5692B285,            0x095BBF00, 0xAD19489D, 0x1462B174, 0x23820E00,            0x58428D2A, 0x0C55F5EA, 0x1DADF43E, 0x233F7061,            0x3372F092, 0x8D937E41, 0xD65FECF1, 0x6C223BDB,            0x7CDE3759, 0xCBEE7460, 0x4085F2A7, 0xCE77326E,            0xA6078084, 0x19F8509E, 0xE8EFD855, 0x61D99735,            0xA969A7AA, 0xC50C06C2, 0x5A04ABFC, 0x800BCADC,            0x9E447A2E, 0xC3453484, 0xFDD56705, 0x0E1E9EC9,            0xDB73DBD3, 0x105588CD, 0x675FDA79, 0xE3674340,            0xC5C43465, 0x713E38D8, 0x3D28F89E, 0xF16DFF20,            0x153E21E7, 0x8FB03D4A, 0xE6E39F2B, 0xDB83ADF7);    /**     * S Box (s3)     *     * @var array     */    protected $s3 = array(            0xE93D5A68, 0x948140F7, 0xF64C261C, 0x94692934,            0x411520F7, 0x7602D4F7, 0xBCF46B2E, 0xD4A20068,            0xD4082471, 0x3320F46A, 0x43B7D4B7, 0x500061AF,            0x1E39F62E, 0x97244546, 0x14214F74, 0xBF8B8840,            0x4D95FC1D, 0x96B591AF, 0x70F4DDD3, 0x66A02F45,            0xBFBC09EC, 0x03BD9785, 0x7FAC6DD0, 0x31CB8504,            0x96EB27B3, 0x55FD3941, 0xDA2547E6, 0xABCA0A9A,            0x28507825, 0x530429F4, 0x0A2C86DA, 0xE9B66DFB,            0x68DC1462, 0xD7486900, 0x680EC0A4, 0x27A18DEE,            0x4F3FFEA2, 0xE887AD8C, 0xB58CE006, 0x7AF4D6B6,            0xAACE1E7C, 0xD3375FEC, 0xCE78A399, 0x406B2A42,            0x20FE9E35, 0xD9F385B9, 0xEE39D7AB, 0x3B124E8B,            0x1DC9FAF7, 0x4B6D1856, 0x26A36631, 0xEAE397B2,            0x3A6EFA74, 0xDD5B4332, 0x6841E7F7, 0xCA7820FB,            0xFB0AF54E, 0xD8FEB397, 0x454056AC, 0xBA489527,            0x55533A3A, 0x20838D87, 0xFE6BA9B7, 0xD096954B,            0x55A867BC, 0xA1159A58, 0xCCA92963, 0x99E1DB33,            0xA62A4A56, 0x3F3125F9, 0x5EF47E1C, 0x9029317C,            0xFDF8E802, 0x04272F70, 0x80BB155C, 0x05282CE3,            0x95C11548, 0xE4C66D22, 0x48C1133F, 0xC70F86DC,            0x07F9C9EE, 0x41041F0F, 0x404779A4, 0x5D886E17,            0x325F51EB, 0xD59BC0D1, 0xF2BCC18F, 0x41113564,            0x257B7834, 0x602A9C60, 0xDFF8E8A3, 0x1F636C1B,            0x0E12B4C2, 0x02E1329E, 0xAF664FD1, 0xCAD18115,            0x6B2395E0, 0x333E92E1, 0x3B240B62, 0xEEBEB922,            0x85B2A20E, 0xE6BA0D99, 0xDE720C8C, 0x2DA2F728,            0xD0127845, 0x95B794FD, 0x647D0862, 0xE7CCF5F0,            0x5449A36F, 0x877D48FA, 0xC39DFD27, 0xF33E8D1E,            0x0A476341, 0x992EFF74, 0x3A6F6EAB, 0xF4F8FD37,            0xA812DC60, 0xA1EBDDF8, 0x991BE14C, 0xDB6E6B0D,            0xC67B5510, 0x6D672C37, 0x2765D43B, 0xDCD0E804,            0xF1290DC7, 0xCC00FFA3, 0xB5390F92, 0x690FED0B,            0x667B9FFB, 0xCEDB7D9C, 0xA091CF0B, 0xD9155EA3,            0xBB132F88, 0x515BAD24, 0x7B9479BF, 0x763BD6EB,            0x37392EB3, 0xCC115979, 0x8026E297, 0xF42E312D,            0x6842ADA7, 0xC66A2B3B, 0x12754CCC, 0x782EF11C,            0x6A124237, 0xB79251E7, 0x06A1BBE6, 0x4BFB6350,            0x1A6B1018, 0x11CAEDFA, 0x3D25BDD8, 0xE2E1C3C9,            0x44421659, 0x0A121386, 0xD90CEC6E, 0xD5ABEA2A,            0x64AF674E, 0xDA86A85F, 0xBEBFE988, 0x64E4C3FE,            0x9DBC8057, 0xF0F7C086, 0x60787BF8, 0x6003604D,            0xD1FD8346, 0xF6381FB0, 0x7745AE04, 0xD736FCCC,            0x83426B33, 0xF01EAB71, 0xB0804187, 0x3C005E5F,            0x77A057BE, 0xBDE8AE24, 0x55464299, 0xBF582E61,            0x4E58F48F, 0xF2DDFDA2, 0xF474EF38, 0x8789BDC2,            0x5366F9C3, 0xC8B38E74, 0xB475F255, 0x46FCD9B9,            0x7AEB2661, 0x8B1DDF84, 0x846A0E79, 0x915F95E2,            0x466E598E, 0x20B45770, 0x8CD55591, 0xC902DE4C,            0xB90BACE1, 0xBB8205D0, 0x11A86248, 0x7574A99E,            0xB77F19B6, 0xE0A9DC09, 0x662D09A1, 0xC4324633,            0xE85A1F02, 0x09F0BE8C, 0x4A99A025, 0x1D6EFE10,            0x1AB93D1D, 0x0BA5A4DF, 0xA186F20F, 0x2868F169,            0xDCB7DA83, 0x573906FE, 0xA1E2CE9B, 0x4FCD7F52,            0x50115E01, 0xA70683FA, 0xA002B5C4, 0x0DE6D027,            0x9AF88C27, 0x773F8641, 0xC3604C06, 0x61A806B5,            0xF0177A28, 0xC0F586E0, 0x006058AA, 0x30DC7D62,            0x11E69ED7, 0x2338EA63, 0x53C2DD94, 0xC2C21634,            0xBBCBEE56, 0x90BCB6DE, 0xEBFC7DA1, 0xCE591D76,            0x6F05E409, 0x4B7C0188, 0x39720A3D, 0x7C927C24,            0x86E3725F, 0x724D9DB9, 0x1AC15BB4, 0xD39EB8FC,            0xED545578, 0x08FCA5B5, 0xD83D7CD3, 0x4DAD0FC4,            0x1E50EF5E, 0xB161E6F8, 0xA28514D9, 0x6C51133C,            0x6FD5C7E7, 0x56E14EC4, 0x362ABFCE, 0xDDC6C837,            0xD79A3234, 0x92638212, 0x670EFA8E, 0x406000E0);    /**     * S Box (s4)     *     * @var array     */    protected $s4 = array(            0x3A39CE37, 0xD3FAF5CF, 0xABC27737, 0x5AC52D1B,            0x5CB0679E, 0x4FA33742, 0xD3822740, 0x99BC9BBE,            0xD5118E9D, 0xBF0F7315, 0xD62D1C7E, 0xC700C47B,            0xB78C1B6B, 0x21A19045, 0xB26EB1BE, 0x6A366EB4,            0x5748AB2F, 0xBC946E79, 0xC6A376D2, 0x6549C2C8,            0x530FF8EE, 0x468DDE7D, 0xD5730A1D, 0x4CD04DC6,            0x2939BBDB, 0xA9BA4650, 0xAC9526E8, 0xBE5EE304,            0xA1FAD5F0, 0x6A2D519A, 0x63EF8CE2, 0x9A86EE22,            0xC089C2B8, 0x43242EF6, 0xA51E03AA, 0x9CF2D0A4,            0x83C061BA, 0x9BE96A4D, 0x8FE51550, 0xBA645BD6,            0x2826A2F9, 0xA73A3AE1, 0x4BA99586, 0xEF5562E9,            0xC72FEFD3, 0xF752F7DA, 0x3F046F69, 0x77FA0A59,            0x80E4A915, 0x87B08601, 0x9B09E6AD, 0x3B3EE593,            0xE990FD5A, 0x9E34D797, 0x2CF0B7D9, 0x022B8B51,            0x96D5AC3A, 0x017DA67D, 0xD1CF3ED6, 0x7C7D2D28,            0x1F9F25CF, 0xADF2B89B, 0x5AD6B472, 0x5A88F54C,            0xE029AC71, 0xE019A5E6, 0x47B0ACFD, 0xED93FA9B,            0xE8D3C48D, 0x283B57CC, 0xF8D56629, 0x79132E28,            0x785F0191, 0xED756055, 0xF7960E44, 0xE3D35E8C,            0x15056DD4, 0x88F46DBA, 0x03A16125, 0x0564F0BD,            0xC3EB9E15, 0x3C9057A2, 0x97271AEC, 0xA93A072A,            0x1B3F6D9B, 0x1E6321F5, 0xF59C66FB, 0x26DCF319,            0x7533D928, 0xB155FDF5, 0x03563482, 0x8ABA3CBB,            0x28517711, 0xC20AD9F8, 0xABCC5167, 0xCCAD925F,            0x4DE81751, 0x3830DC8E, 0x379D5862, 0x9320F991,            0xEA7A90C2, 0xFB3E7BCE, 0x5121CE64, 0x774FBE32,            0xA8B6E37E, 0xC3293D46, 0x48DE5369, 0x6413E680,            0xA2AE0810, 0xDD6DB224, 0x69852DFD, 0x09072166,            0xB39A460A, 0x6445C0DD, 0x586CDECF, 0x1C20C8AE,            0x5BBEF7DD, 0x1B588D40, 0xCCD2017F, 0x6BB4E3BB,            0xDDA26A7E, 0x3A59FF45, 0x3E350A44, 0xBCB4CDD5,            0x72EACEA8, 0xFA6484BB, 0x8D6612AE, 0xBF3C6F47,            0xD29BE463, 0x542F5D9E, 0xAEC2771B, 0xF64E6370,            0x740E0D8D, 0xE75B1357, 0xF8721671, 0xAF537D5D,            0x4040CB08, 0x4EB4E2CC, 0x34D2466A, 0x0115AF84,            0xE1B00428, 0x95983A1D, 0x06B89FB4, 0xCE6EA048,            0x6F3F3B82, 0x3520AB82, 0x011A1D4B, 0x277227F8,            0x611560B1, 0xE7933FDC, 0xBB3A792B, 0x344525BD,            0xA08839E1, 0x51CE794B, 0x2F32C9B7, 0xA01FBAC9,            0xE01CC87E, 0xBCC7D1F6, 0xCF0111C3, 0xA1E8AAC7,            0x1A908749, 0xD44FBD9A, 0xD0DADECB, 0xD50ADA38,            0x0339C32A, 0xC6913667, 0x8DF9317C, 0xE0B12B4F,            0xF79E59B7, 0x43F5BB3A, 0xF2D519FF, 0x27D9459C,            0xBF97222C, 0x15E6FC2A, 0x0F91FC71, 0x9B941525,            0xFAE59361, 0xCEB69CEB, 0xC2A86459, 0x12BAA8D1,            0xB6C1075E, 0xE3056A0C, 0x10D25065, 0xCB03A442,            0xE0EC6E0E, 0x1698DB3B, 0x4C98A0BE, 0x3278E964,            0x9F1F9532, 0xE0D392DF, 0xD3A0342B, 0x8971F21E,            0x1B0A7441, 0x4BA3348C, 0xC5BE7120, 0xC37632D8,            0xDF359F8D, 0x9B992F2E, 0xE60B6F47, 0x0FE3F11D,            0xE54CDA54, 0x1EDAD891, 0xCE6279CF, 0xCD3E7E6F,            0x1618B166, 0xFD2C1D05, 0x848FD2C5, 0xF6FB2299,            0xF523F357, 0xA6327623, 0x93A83531, 0x56CCCD02,            0xACF08162, 0x5A75EBB5, 0x6E163697, 0x88D273CC,            0xDE966292, 0x81B949D0, 0x4C50901B, 0x71C65614,            0xE6C6C7BD, 0x327A140A, 0x45E1D006, 0xC3F27B9A,            0xC9AA53FD, 0x62A80F00, 0xBB25BFE2, 0x35BDD2F6,            0x71126905, 0xB2040222, 0xB6CBCF7C, 0xCD769C2B,            0x53113EC0, 0x1640E3D3, 0x38ABBD60, 0x2547ADF0,            0xBA38209C, 0xF746CE76, 0x77AFA1C5, 0x20756060,            0x85CBFE4E, 0x8AE88DD8, 0x7AAAF9B0, 0x4CF9AA7E,            0x1948C25C, 0x02FB8A8C, 0x01C36AE4, 0xD6EBE1F9,            0x90D4F869, 0xA65CDEA0, 0x3F09252D, 0xC208E69F,            0xB74E6132, 0xCE77E25B, 0x578FDFE3, 0x3AC372E6);    /**     * The number of rounds to do     *     * @var integer     */    protected $_rounds = 16;    /**     * Set the key to be used for en/decryption.     *     * @param string $key  The key to use.     * @return bool     */    public function setKey($key)    {        $key = array_values(unpack('C*', $key));        $keyLen = count($key);        if ($keyLen == 0) {            return false;        }        $keyPos = $keyXor = 0;        for ($i = 0, $iMax = count($this->p); $i < $iMax; ++$i) {            for ($t = 0; $t < 4; $t++) {                $keyXor = ($keyXor << 8) | (($key[$keyPos]) & 0x0ff);                if (++$keyPos == $keyLen) {                    $keyPos = 0;                }            }            $this->p[$i] = $this->p[$i] ^ $keyXor;        }        $encZero = array('L' => 0, 'R' => 0);        for ($i = 0; $i + 1 < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->p[$i] = $encZero['L'];          $this->p[$i + 1] = $encZero['R'];        }        $iMax = count($this->s1);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s1[$i] = $encZero['L'];          $this->s1[$i + 1] = $encZero['R'];        }        $iMax = count($this->s2);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s2[$i] = $encZero['L'];          $this->s2[$i + 1] = $encZero['R'];        }        $iMax = count($this->s3);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s3[$i] = $encZero['L'];          $this->s3[$i + 1] = $encZero['R'];        }        $iMax = count($this->s4);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s4[$i] = $encZero['L'];          $this->s4[$i + 1] = $encZero['R'];        }    }    /**     * Encrypt a block of data.     *     * @param string $block      The data to encrypt.     * @param string $key        The key to use.     *     * @return string  The encrypted output.     */    public function encryptBlock($block, $key = null)    {        if (!is_null($key)) {            $this->setKey($key);        }        list($L, $R) = array_values(unpack('N*', $block));        $parts = $this->_encryptBlock($L, $R);        return pack('NN', $parts['L'], $parts['R']);    }    /**     * Encrypt left and right halves of a block of data.     *     * @param integer $L  Left half of the data.     * @param integer $R  Right half of the data.     *     * @return array  A hash, with keys 'L' and 'R', and the encrypted data as     *                the values.     */    protected function _encryptBlock($L, $R)    {        $L ^= $this->p[0];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[1];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[2];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[3];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[4];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[5];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[6];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[7];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[8];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[9];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[10];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[11];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[12];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[13];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[14];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[15];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[16];        $R ^= $this->p[17];        return array('L' => $R, 'R' => $L);    }    /**     * Decrypt a block of data.     *     * @param string $block  The data to decrypt.     * @param string $key    The key to use.     *     * @return string  The decrypted output.     */    public function decryptBlock($block, $key = null)    {        if (!is_null($key)) {            $this->setKey($key);        }// change for phpMyAdmin        $L = null;        $R = null;        $retarray = array_values(unpack('N*', $block));        if (isset($retarray[0])) {            $L = $retarray[0];        }        if (isset($retarray[1])) {            $R = $retarray[1];        }// end change for phpMyAdmin        $L ^= $this->p[17];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[16];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[15];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[14];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[13];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[12];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[11];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[10];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[9];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[8];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[7];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[6];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[5];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[4];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[3];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[2];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[1];        return pack("NN", $R ^ $this->p[0], $L);    }}// higher-level functions:/** * Encryption using blowfish algorithm * * @param string  original data * @param string  the secret * * @return  string  the encrypted result * * @access  public * */function PMA_blowfish_encrypt($data, $secret){    $pma_cipher = new Horde_Cipher_blowfish;    $encrypt = '';    $mod = strlen($data) % 8;    if ($mod > 0) {        $data .= str_repeat("\0", 8 - $mod);    }    foreach (str_split($data, 8) as $chunk) {        $encrypt .= $pma_cipher->encryptBlock($chunk, $secret);    }    return base64_encode($encrypt);}/** * Decryption using blowfish algorithm * * @param string  encrypted data * @param string  the secret * * @return  string  original data * * @access  public * */function PMA_blowfish_decrypt($encdata, $secret){    $pma_cipher = new Horde_Cipher_blowfish;    $decrypt = '';    $data = base64_decode($encdata);    foreach (str_split($data, 8) as $chunk) {        $decrypt .= $pma_cipher->decryptBlock($chunk, $secret);    }    return trim($decrypt);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form templates * * @package PhpMyAdmin *//** * Displays top part of the form * * @param string $action         default: $_SERVER['REQUEST_URI'] * @param string $method         'post' or 'get' * @param array  $hidden_fields  array of form hidden fields (key: field name) */function display_form_top($action = null, $method = 'post', $hidden_fields = null){    static $has_check_page_refresh = false;    if ($action === null) {        $action = $_SERVER['REQUEST_URI'];    }    if ($method != 'post') {        $method = 'get';    }?><form method="<?php echo $method ?>" action="<?php echo htmlspecialchars($action) ?>" class="config-form"><input type="hidden" name="tab_hash" value="" /><?php    // we do validation on page refresh when browser remembers field values,    // add a field with known value which will be used for checks    if (!$has_check_page_refresh) {        $has_check_page_refresh = true;        echo '<input type="hidden" name="check_page_refresh" id="check_page_refresh"'            . ' value="" />' . "\n";    }    echo PMA_generate_common_hidden_inputs('', '', 0, 'server') . "\n";    echo PMA_getHiddenFields((array)$hidden_fields);}/** * Displays form tabs which are given by an array indexed by fieldset id * ({@link display_fieldset_top}), with values being tab titles. * * @param array $tabs */function display_tabs_top($tabs){?><ul class="tabs"><?php foreach ($tabs as $tab_id => $tab_name): ?>    <li><a href="#<?php echo $tab_id ?>"><?php echo htmlspecialchars($tab_name); ?></a></li><?php endforeach; ?></ul><br clear="right" /><div class="tabs_contents"><?php}/** * Displays top part of a fieldset * * @param string $title * @param string $description * @param array  $errors * @param array  $attributes */function display_fieldset_top($title = '', $description = '', $errors = null, $attributes = array()){    global $_FormDisplayGroup;    $_FormDisplayGroup = 0;    $attributes = array_merge(array('class' => 'optbox'), $attributes);    foreach ($attributes as $k => &$attr) {        $attr = $k . '="' . htmlspecialchars($attr) . '"';    }    echo '<fieldset ' . implode(' ', $attributes) . '>';    echo '<legend>' . $title . '</legend>';    if (!empty($description)) {        echo '<p>' . $description . '</p>';    }    // this must match with displayErrors() in scripts.js    if (is_array($errors) && count($errors) > 0) {        echo '<dl class="errors">';        foreach ($errors as $error) {            echo '<dd>' . $error . '</dd>';        }        echo '</dl>';    }?><table width="100%" cellspacing="0"><?php}/** * Displays input field * * $opts keys: * o doc - (string) documentation link * o errors - error array * o setvalue - (string) shows button allowing to set poredefined value * o show_restore_default - (boolean) whether show "restore default" button * o userprefs_allow - whether user preferences are enabled for this field (null - no support, *                     true/false - enabled/disabled) * o userprefs_comment - (string) field comment * o values - key - value paris for <select> fields * o values_escaped - (boolean) tells whether values array is already escaped (defaults to false) * o values_disabled -  (array)list of disabled values (keys from values) * o comment - (string) tooltip comment * o comment_warning - (bool) whether this comments warns about something * o wiki - (string) wiki link * * @param string $path * @param string $name * @param string $description * @param string $type * @param mixed  $value * @param bool   $value_is_default * @param array  $opts */function display_input($path, $name, $description = '', $type, $value, $value_is_default = true, $opts = null){    global $_FormDisplayGroup;    static $base_dir; // Relative path to the root phpMyAdmin folder    static $icons;    // An array of IMG tags used further below in the function    $is_setup_script = defined('PMA_SETUP');    if ($base_dir === null) { // if the static variables have not been initialised        $base_dir = $is_setup_script ? '../' : '';        $icons = array();        // Icon definitions:        // The same indexes will be used in the $icons array.        // The first element contains the filename and the second        // element is used for the "alt" and "title" attributes.        $icon_init = array(            'edit'   => array('b_edit.png',   ''),            'help'   => array('b_help.png',   __('Documentation')),            'info'   => array('b_info.png',   __('Wiki')),            'reload' => array('s_reload.png', ''),            'tblops' => array('b_tblops.png', '')        );        if ($is_setup_script) {            // When called from the setup script, we don't have access to the            // sprite-aware PMA_getImage() function because the PMA_theme class            // has not been loaded, so we generate the img tags manually.            foreach ($icon_init as $k => $v) {                $title = '';                if (! empty($v[1])) {                    $title = ' title="' . $v[1] . '"';                }                $icons[$k] = sprintf(                    '<img alt="%s" src="%s"%s />',                    $v[1],                    ".{$GLOBALS['cfg']['ThemePath']}/original/img/{$v[0]}",                    $title                );            }        } else {            // In this case we just use PMA_getImage() because it's available            foreach ($icon_init as $k => $v) {                $icons[$k] = PMA_getImage($v[0], $v[1]);            }        }    }    $has_errors = isset($opts['errors']) && !empty($opts['errors']);    $option_is_disabled = !$is_setup_script && isset($opts['userprefs_allow']) && !$opts['userprefs_allow'];    $name_id = 'name="' . htmlspecialchars($path) . '" id="' . htmlspecialchars($path) . '"';    $field_class = $type == 'checkbox' ? 'checkbox' : '';    if (!$value_is_default) {        $field_class .= ($field_class == '' ? '' : ' ') . ($has_errors ? 'custom field-error' : 'custom');    }    $field_class = $field_class ? ' class="' . $field_class . '"' : '';    $tr_class = $_FormDisplayGroup > 0        ? 'group-field group-field-' . $_FormDisplayGroup        : '';    if (isset($opts['setvalue']) && $opts['setvalue'] == ':group') {        unset($opts['setvalue']);        $_FormDisplayGroup++;        $tr_class = 'group-header-field group-header-' . $_FormDisplayGroup;    }    if ($option_is_disabled) {        $tr_class .= ($tr_class ? ' ' : '') . 'disabled-field';    }    $tr_class = $tr_class ? ' class="' . $tr_class . '"' : '';?><tr<?php echo $tr_class ?>>    <th>        <label for="<?php echo htmlspecialchars($path) ?>"><?php echo $name ?></label>        <?php if (!empty($opts['doc']) || !empty($opts['wiki'])) { ?>        <span class="doc">            <?php if (!empty($opts['doc'])) { ?><a href="<?php echo $base_dir . $opts['doc']  ?>" target="documentation"><?php echo $icons['help']; ?></a><?php } ?>            <?php if (!empty($opts['wiki'])){ ?><a href="<?php echo $opts['wiki'] ?>" target="wiki"><?php echo $icons['info']; ?></a><?php } ?>        </span>        <?php } ?>        <?php if ($option_is_disabled) { ?>            <span class="disabled-notice" title="<?php echo __('This setting is disabled, it will not be applied to your configuration') ?>"><?php echo __('Disabled') ?></span>        <?php } ?>        <?php if (!empty($description)) { ?><small><?php echo $description ?></small><?php } ?>    </th>    <td>    <?php    switch ($type) {        case 'text':            echo '<input type="text" size="60" ' . $name_id . $field_class                . ' value="' . htmlspecialchars($value) . '" />';          break;        case 'short_text':            echo '<input type="text" size="25" ' . $name_id . $field_class                . ' value="' . htmlspecialchars($value) . '" />';          break;        case 'number_text':            echo '<input type="text" size="15" ' . $name_id . $field_class                . ' value="' . htmlspecialchars($value) . '" />';          break;        case 'checkbox':            echo '<span' . $field_class . '><input type="checkbox" ' . $name_id              . ($value ? ' checked="checked"' : '') . ' /></span>';          break;        case 'select':            echo '<select ' . $name_id . $field_class . '>';            $escape = !(isset($opts['values_escaped']) && $opts['values_escaped']);            $values_disabled = isset($opts['values_disabled'])                ? array_flip($opts['values_disabled']) : array();            foreach ($opts['values'] as $opt_value_key => $opt_value) {                // set names for boolean values                if (is_bool($opt_value)) {                    $opt_value = strtolower($opt_value ? __('Yes') : __('No'));                }                // escape if necessary                if ($escape) {                    $display = htmlspecialchars($opt_value);                    $display_value = htmlspecialchars($opt_value_key);                } else {                    $display = $opt_value;                    $display_value = $opt_value_key;                }                // compare with selected value                // boolean values are cast to integers when used as array keys                $selected = is_bool($value)                    ? (int) $value === $opt_value_key                    : $opt_value_key === $value;                echo '<option value="' . $display_value . '"'                    . ($selected ? ' selected="selected"' : '')                    . (isset($values_disabled[$opt_value_key]) ? ' disabled="disabled"' : '')                    . '>' . $display . '</option>';            }            echo '</select>';            break;        case 'list':            echo '<textarea cols="40" rows="5" ' . $name_id . $field_class . '>'                . htmlspecialchars(implode("\n", $value))                . '</textarea>';            break;    }    if (isset($opts['comment']) && $opts['comment']) {        $class = 'field-comment-mark';        if (isset($opts['comment_warning']) && $opts['comment_warning']) {            $class .= ' field-comment-warning';        }        ?>        <span class="<?php echo $class ?>" title="<?php echo htmlspecialchars($opts['comment']) ?>">i</span>        <?php    }    if ($is_setup_script && isset($opts['userprefs_comment']) && $opts['userprefs_comment']) {        ?>        <a class="userprefs-comment" title="<?php echo htmlspecialchars($opts['userprefs_comment']) ?>"><?php echo $icons['tblops']; ?></a>        <?php    }    if (isset($opts['setvalue']) && $opts['setvalue']) {        ?>        <a class="set-value" href="#<?php echo htmlspecialchars("$path={$opts['setvalue']}") ?>" title="<?php echo sprintf(__('Set value: %s'), htmlspecialchars($opts['setvalue'])) ?>" style="display:none"><?php echo $icons['edit']; ?></a>        <?php    }    if (isset($opts['show_restore_default']) && $opts['show_restore_default']) {        ?>        <a class="restore-default" href="#<?php echo $path ?>" title="<?php echo __('Restore default value') ?>" style="display:none"><?php echo $icons['reload']; ?></a>        <?php    }    // this must match with displayErrors() in scripts/config.js    if ($has_errors) {        echo "\n        <dl class=\"inline_errors\">";        foreach ($opts['errors'] as $error) {            echo '<dd>' . htmlspecialchars($error) . '</dd>';        }        echo '</dl>';    }    ?>    </td>    <?php    if ($is_setup_script && isset($opts['userprefs_allow'])) {    ?>    <td class="userprefs-allow" title="<?php echo __('Allow users to customize this value') ?>">        <input type="checkbox" name="<?php echo $path ?>-userprefs-allow" <?php if ($opts['userprefs_allow']) echo 'checked="checked"' ?> />    </td>    <?php    } else if ($is_setup_script) {        echo '<td>&nbsp;</td>';    }    ?></tr><?php}/** * Display group header * * @param string $header_text */function display_group_header($header_text){    global $_FormDisplayGroup;    $_FormDisplayGroup++;    if (!$header_text) {        return;    }    $colspan = defined('PMA_SETUP')        ? 3        : 2;?><tr class="group-header group-header-<?php echo $_FormDisplayGroup ?>">    <th colspan="<?php echo $colspan ?>">        <?php echo $header_text ?>    </th></tr><?php}/** * Display group footer * */function display_group_footer(){    global $_FormDisplayGroup;    $_FormDisplayGroup--;}/** * Displays bottom part of a fieldset */function display_fieldset_bottom(){    $colspan = 2;    if (defined('PMA_SETUP')) {        $colspan++;    }?><tr>    <td colspan="<?php echo $colspan ?>" class="lastrow">        <input type="submit" name="submit_save" value="<?php echo __('Save') ?>" class="green" />        <input type="button" name="submit_reset" value="<?php echo __('Reset') ?>" />    </td></tr></table></fieldset><?php}/** * Displays simple bottom part of a fieldset (without submit buttons) */function display_fieldset_bottom_simple(){?></table></fieldset><?php}/** * Closes form tabs */function display_tabs_bottom(){    echo "</div>\n";}/** * Displays bottom part of the form */function display_form_bottom(){    echo "</form>\n";}/** * Appends JS validation code to $js_array * * @param string       $field_id * @param string|array $validator * @param array        $js_array */function js_validate($field_id, $validators, &$js_array){    foreach ((array)$validators as $validator) {        $validator = (array)$validator;        $v_name = array_shift($validator);        $v_args = array();        foreach ($validator as $arg) {            $v_args[] = PMA_escapeJsString($arg);        }        $v_args = $v_args ? ", ['" . implode("', '", $v_args) . "']" : '';        $js_array[] = "validateField('$field_id', '$v_name', true$v_args)";    }}/** * Displays JavaScript code * * @param array $js_array */function display_js($js_array){    if (empty($js_array)) {        return;    }?><script type="text/javascript"><?php echo implode(";\n", $js_array) . ";\n" ?></script><?php}/** * Displays error list * * @param string $name * @param array  $error_list */function display_errors($name, $error_list){    echo '<dl>';    echo '<dt>' . htmlspecialchars($name) . '</dt>';    foreach ($error_list as $error) {        echo '<dd>' . htmlspecialchars($error) . '</dd>';    }    echo '</dl>';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Holds class PMA_Message * * @package PhpMyAdmin *//** * a single message * * simple usage examples: * <code> * // display simple error message 'Error' * PMA_Message::error()->display(); * * // get simple success message 'Success' * $message = PMA_Message::success(); * * // get special notice 'Some locale notice' * $message = PMA_Message::notice('strSomeLocaleNotice'); * </code> * * more advanced usage example: * <code> * // create a localized success message * $message = PMA_Message::success('strSomeLocaleMessage'); * * // create another message, a hint, with a localized string which expects * // two parameters: $strSomeFootnote = 'Read the %smanual%s' * $hint = PMA_Message::notice('strSomeFootnote'); * // replace %d with the following params * $hint->addParam('[a@./Documentation.html#cfg_Example@_blank]'); * $hint->addParam('[/a]'); * // add this hint as a footnote * $hint = PMA_showHint($hint); * * // add the retrieved footnote reference to the original message * $message->addMessage($hint); * * // create another message ... * $more = PMA_Message::notice('strSomeMoreLocale'); * $more->addString('strSomeEvenMoreLocale', '<br />'); * $more->addParam('parameter for strSomeMoreLocale'); * $more->addParam('more parameter for strSomeMoreLocale'); * * // and add it also to the original message * $message->addMessage($more); * // finally add another raw message * $message->addMessage('some final words', ' - '); * * // display() will now print all messages in the same order as they are added * $message->display(); * // strSomeLocaleMessage <sup>1</sup> strSomeMoreLocale<br /> * // strSomeEvenMoreLocale - some final words * </code> * @package PhpMyAdmin */class PMA_Message{    const SUCCESS = 1; // 0001    const NOTICE  = 2; // 0010    const ERROR   = 8; // 1000    const SANITIZE_NONE   = 0;  // 0000 0000    const SANITIZE_STRING = 16; // 0001 0000    const SANITIZE_PARAMS = 32; // 0010 0000    const SANITIZE_BOOTH  = 48; // 0011 0000    /**     * message levels     *     * @var array     */    static public $level = array (        PMA_Message::SUCCESS => 'success',        PMA_Message::NOTICE  => 'notice',        PMA_Message::ERROR   => 'error',    );    /**     * The message number     *     * @access  protected     * @var     integer     */    protected $_number = PMA_Message::NOTICE;    /**     * The locale string identifier     *     * @access  protected     * @var     string     */    protected $_string = '';    /**     * The formatted message     *     * @access  protected     * @var     string     */    protected $_message = '';    /**     * Whether the message was already displayed     *     * @access  protected     * @var     boolean     */    protected $_is_displayed = false;    /**     * Unique id     *     * @access  protected     * @var string     */    protected $_hash = null;    /**     * holds parameters     *     * @access  protected     * @var     array     */    protected $_params = array();    /**     * holds additional messages     *     * @access  protected     * @var     array     */    protected $_added_messages = array();    /**     * Constructor     *     * @param string  $string     * @param integer $number     * @param array   $params     * @param integer $sanitize     */    public function __construct($string = '', $number = PMA_Message::NOTICE,        $params = array(), $sanitize = PMA_Message::SANITIZE_NONE)    {        $this->setString($string, $sanitize & PMA_Message::SANITIZE_STRING);        $this->setNumber($number);        $this->setParams($params, $sanitize & PMA_Message::SANITIZE_PARAMS);    }    /**     * magic method: return string representation for this object     *     * @return string     */    public function __toString()    {        return $this->getMessage();    }    /**     * get PMA_Message of type success     *     * shorthand for getting a simple success message     *     * @static     * @param string $string a localized string e.g. __('Your SQL query has been executed successfully')     * @return  PMA_Message     */    static public function success($string = '')    {        if (empty($string)) {            $string = __('Your SQL query has been executed successfully');        }        return new PMA_Message($string, PMA_Message::SUCCESS);    }    /**     * get PMA_Message of type error     *     * shorthand for getting a simple error message     *     * @static     * @param string $string a localized string e.g. __('Error')     * @return  PMA_Message     */    static public function error($string = '')    {        if (empty($string)) {            $string = __('Error');        }        return new PMA_Message($string, PMA_Message::ERROR);    }    /**     * get PMA_Message of type notice     *     * shorthand for getting a simple notice message     *     * @static     * @param string  $string a localized string e.g. __('The additional features for working with linked tables have been deactivated. To find out why click %shere%s.')     * @return  PMA_Message     */    static public function notice($string)    {        return new PMA_Message($string, PMA_Message::NOTICE);    }    /**     * get PMA_Message with customized content     *     * shorthand for getting a customized message     *     * @static     * @param string    $message     * @param integer   $type     * @return  PMA_Message     */    static public function raw($message, $type = PMA_Message::NOTICE)    {        $r = new PMA_Message('', $type);        $r->setMessage($message);        return $r;    }    /**     * get PMA_Message for number of affected rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function affected_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row affected.', '%1$d rows affected.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message for number of deleted rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function deleted_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row deleted.', '%1$d rows deleted.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message for number of inserted rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function inserted_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row inserted.', '%1$d rows inserted.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message of type error with custom content     *     * shorthand for getting a customized error message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawError($message)    {        return PMA_Message::raw($message, PMA_Message::ERROR);    }    /**     * get PMA_Message of type notice with custom content     *     * shorthand for getting a customized notice message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawNotice($message)    {        return PMA_Message::raw($message, PMA_Message::NOTICE);    }    /**     * get PMA_Message of type success with custom content     *     * shorthand for getting a customized success message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawSuccess($message)    {        return PMA_Message::raw($message, PMA_Message::SUCCESS);    }    /**     * returns whether this message is a success message or not     * and optionaly makes this message a success message     *     * @param boolean $set     * @return  boolean whether this is a success message or not     */    public function isSuccess($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::SUCCESS);        }        return $this->getNumber() === PMA_Message::SUCCESS;    }    /**     * returns whether this message is a notice message or not     * and optionally makes this message a notice message     *     * @param boolean $set     * @return  boolean whether this is a notice message or not     */    public function isNotice($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::NOTICE);        }        return $this->getNumber() === PMA_Message::NOTICE;    }    /**     * returns whether this message is an error message or not     * and optionally makes this message an error message     *     * @param boolean $set     * @return  boolean whether this is an error message or not     */    public function isError($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::ERROR);        }        return $this->getNumber() === PMA_Message::ERROR;    }    /**     * set raw message (overrides string)     *     * @param string  $message     * @param boolean $sanitize whether to sanitize $message or not     */    public function setMessage($message, $sanitize = false)    {        if ($sanitize) {            $message = PMA_Message::sanitize($message);        }        $this->_message = $message;    }    /**     * set string (does not take effect if raw message is set)     *     * @param string  $_string     * @param boolean $sanitize whether to sanitize $string or not     */    public function setString($_string, $sanitize = true)    {        if ($sanitize) {            $_string = PMA_Message::sanitize($_string);        }        $this->_string = $_string;    }    /**     * set message type number     *     * @param integer $number     */    public function setNumber($number)    {        $this->_number = $number;    }    /**     * add parameter, usually in conjunction with strings     *     * usage     * <code>     * $message->addParam('strLocale', false);     * $message->addParam('[em]some string[/em]');     * $message->addParam('<img src="img" />', false);     * </code>     *     * @param mixed   $param     * @param boolean $raw     */    public function addParam($param, $raw = true)    {        if ($param instanceof PMA_Message) {            $this->_params[] = $param;        } elseif ($raw) {            $this->_params[] = htmlspecialchars($param);        } else {            $this->_params[] = PMA_Message::notice($param);        }    }    /**     * add another string to be concatenated on displaying     *     * @param string  $string    to be added     * @param string  $separator to use between this and previous string/message     */    public function addString($string, $separator = ' ')    {        $this->_added_messages[] = $separator;        $this->_added_messages[] = PMA_Message::notice($string);    }    /**     * add a bunch of messages at once     *     * @param array   $messages  to be added     * @param string  $separator to use between this and previous string/message     */    public function addMessages($messages, $separator = ' ')    {        foreach ($messages as $message) {            $this->addMessage($message, $separator);        }    }    /**     * add another raw message to be concatenated on displaying     *     * @param mixed   $message   to be added     * @param string  $separator to use between this and previous string/message     */    public function addMessage($message, $separator = ' ')    {        if (strlen($separator)) {            $this->_added_messages[] = $separator;        }        if ($message instanceof PMA_Message) {            $this->_added_messages[] = $message;        } else {            $this->_added_messages[] = PMA_Message::rawNotice($message);        }    }    /**     * set all params at once, usually used in conjunction with string     *     * @param array   $params     * @param boolean $sanitize     */    public function setParams($params, $sanitize = false)    {        if ($sanitize) {            $params = PMA_Message::sanitize($params);        }        $this->_params = $params;    }    /**     * return all parameters     *     * @return array     */    public function getParams()    {        return $this->_params;    }    /**     * return all added messages     *     * @return array     */    public function getAddedMessages()    {        return $this->_added_messages;    }    /**     * Sanitizes $message     *     * @static     * @param mixed  $message the message(s)     * @return  mixed  the sanitized message(s)     * @access  public     */    static public function sanitize($message)    {        if (is_array($message)) {            foreach ($message as $key => $val) {                $message[$key] = PMA_Message::sanitize($val);            }            return $message;        }        return htmlspecialchars($message);    }    /**     * decode $message, taking into account our special codes     * for formatting     *     * @static     * @param string  $message the message     * @return  string  the decoded message     * @access  public     */    static public function decodeBB($message)    {        return PMA_sanitize($message, false, true);    }    /**     * wrapper for sprintf()     *     * @return  string formatted     */    static public function format()    {        $params = func_get_args();        if (isset($params[1]) && is_array($params[1])) {            array_unshift($params[1], $params[0]);            $params = $params[1];        }        return call_user_func_array('sprintf', $params);    }    /**     * returns unique PMA_Message::$_hash, if not exists it will be created     *     * @return  string PMA_Message::$_hash     */    public function getHash()    {        if (null === $this->_hash) {            $this->_hash = md5(                $this->getNumber() .                $this->_string .                $this->_message            );        }        return $this->_hash;    }    /**     * returns compiled message     *     * @return  string complete message     */    public function getMessage()    {        $message = $this->_message;        if (0 === strlen($message)) {            $string = $this->getString();            if (isset($GLOBALS[$string])) {                $message = $GLOBALS[$string];            } elseif (0 === strlen($string)) {                $message = '';            } else {                $message = $string;            }        }        if (count($this->getParams()) > 0) {            $message = PMA_Message::format($message, $this->getParams());        }        $message = PMA_Message::decodeBB($message);        foreach ($this->getAddedMessages() as $add_message) {            $message .= $add_message;        }        return $message;    }    /**     * returns PMA_Message::$_string     *     * @return  string PMA_Message::$_string     */    public function getString()    {        return $this->_string;    }    /**     * returns PMA_Message::$_number     *     * @return  integer PMA_Message::$_number     */    public function getNumber()    {        return $this->_number;    }    /**     * returns level of message     *     * @return  string  level of message     */    public function getLevel()    {        return PMA_Message::$level[$this->getNumber()];    }    /**     * Displays the message in HTML     *     */    public function display()    {        echo $this->getDisplay();        $this->isDisplayed(true);    }    /**     * returns HTML code for displaying this message     *     *     * @return string whole message box     */    public function getDisplay()    {        return '<div class="' . $this->getLevel() . '">'            . $this->getMessage() . '</div>';    }    /**     * sets and returns whether the message was displayed or not     *     * @param boolean $is_displayed     * @return  boolean PMA_Message::$_is_displayed     */    public function isDisplayed($is_displayed = false)    {        if ($is_displayed) {            $this->_is_displayed = true;        }        return $this->_is_displayed;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for listing directories * * @todo rename to file_listing.lib.php * @package PhpMyAdmin *//** * Returns array of filtered file names * * @param string $dir        directory to list * @param string $expression regular expression to match files * @return array   sorted file list on success, false on failure */function PMA_getDirContent($dir, $expression = ''){    if (file_exists($dir) && $handle = @opendir($dir)) {        $result = array();        if (substr($dir, -1) != '/') {            $dir .= '/';        }        while ($file = @readdir($handle)) {        // for PHP < 5.2.4, is_file() gives a warning when using open_basedir        // and verifying '..' or '.'            if ('.' != $file && '..' != $file && is_file($dir . $file) && ($expression == '' || preg_match($expression, $file))) {                $result[] = $file;            }        }        @closedir($handle);        asort($result);        return $result;    } else {        return false;    }}/** * Returns options of filtered file names * * @param string $dir        directory to list * @param string $extensions regullar expression to match files * @param string $active     currently active choice * @return array   sorted file list on success, false on failure */function PMA_getFileSelectOptions($dir, $extensions = '', $active = ''){    $list = PMA_getDirContent($dir, $extensions);    if ($list === false) {        return false;    }    $result = '';    foreach ($list as $key => $val) {        $result .= '<option value="'. htmlspecialchars($val) . '"';        if ($val == $active) {            $result .= ' selected="selected"';        }        $result .= '>' . htmlspecialchars($val) . '</option>' . "\n";    }    return $result;}/** * Get currently supported decompressions. * * @return string | separated list of extensions usable in PMA_getDirContent */function PMA_supportedDecompressions(){    global $cfg;    $compressions = '';    if ($cfg['GZipDump'] && @function_exists('gzopen')) {        if (!empty($compressions)) {            $compressions .= '|';        }        $compressions .= 'gz';    }    if ($cfg['BZipDump'] && @function_exists('bzopen')) {        if (!empty($compressions)) {            $compressions .= '|';        }        $compressions .= 'bz2';    }    if ($cfg['ZipDump'] && @function_exists('gzinflate')) {        if (!empty($compressions)) {            $compressions .= '|';        }        $compressions .= 'zip';    }    return $compressions;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface for the zip extension * @package    phpMyAdmin *//** * Gets zip file contents * * @param string $file           zip file * @param string $specific_entry regular expression to match a file * * @return array ($error_message, $file_data); $error_message *                  is empty if no error */function PMA_getZipContents($file, $specific_entry = null){    $error_message = '';    $file_data = '';    $zip_handle = zip_open($file);    if (is_resource($zip_handle)) {        $first_zip_entry = zip_read($zip_handle);        if (false === $first_zip_entry) {            $error_message = __('No files found inside ZIP archive!');        } else {            /* Is the the zip really an ODS file? */            $read = zip_entry_read($first_zip_entry);            $ods_mime = 'application/vnd.oasis.opendocument.spreadsheet';            if (!strcmp($ods_mime, $read)) {                $specific_entry = '/^content\.xml$/';            }            if (isset($specific_entry)) {                /* Return the correct contents, not just the first entry */                for ( ; ; ) {                    $entry = zip_read($zip_handle);                    if (is_resource($entry)) {                        if (preg_match($specific_entry, zip_entry_name($entry))) {                            zip_entry_open($zip_handle, $entry, 'r');                            $file_data = zip_entry_read($entry, zip_entry_filesize($entry));                            zip_entry_close($entry);                            break;                        }                    } else {                        /**                         * Either we have reached the end of the zip and still                         * haven't found $specific_entry or there was a parsing                         * error that we must display                         */                        if ($entry === false) {                            $error_message = __('Error in ZIP archive:') . ' Could not find "' . $specific_entry . '"';                        } else {                            $error_message = __('Error in ZIP archive:') . ' ' . PMA_getZipError($zip_handle);                        }                        break;                    }                }            } else {                zip_entry_open($zip_handle, $first_zip_entry, 'r');                /* File pointer has already been moved, so include what was read above */                $file_data = $read;                $file_data .= zip_entry_read($first_zip_entry, zip_entry_filesize($first_zip_entry));                zip_entry_close($first_zip_entry);            }        }    } else {        $error_message = __('Error in ZIP archive:') . ' ' . PMA_getZipError($zip_handle);    }    zip_close($zip_handle);    return (array('error' => $error_message, 'data' => $file_data));}/** * Returns the file name of the first file that matches the given $file_regexp. * * @param string $file_regexp regular expression for the file name to match * @param string $file        zip archive * * @return string the file name of the first file that matches the given regexp */function PMA_findFileFromZipArchive ($file_regexp, $file){    $zip_handle = zip_open($file);    $found = false;    if (is_resource($zip_handle)) {        $entry = zip_read($zip_handle);        while (is_resource($entry)) {            if (preg_match($file_regexp, zip_entry_name($entry))) {                $file_name = zip_entry_name($entry);                zip_close($zip_handle);                return $file_name;            }            $entry = zip_read($zip_handle);        }    }    zip_close($zip_handle);    return false;}/** * Returns the number of files in the zip archive. * * @param string $file zip archive * * @return int the number of files in the zip archive */function PMA_getNoOfFilesInZip($file){    $count = 0;    $zip_handle = zip_open($file);    $found = false;    if (is_resource($zip_handle)) {        $entry = zip_read($zip_handle);        while (is_resource($entry)) {            $count++;            $entry = zip_read($zip_handle);        }    }    zip_close($zip_handle);    return $count;}/** * Extracts a set of files from the given zip archive to a given destinations. * * @param string $zip_path    path to the zip archive * @param string $destination destination to extract files * @param array  $entries     files in archive that should be extracted * * @return bool true on sucess, false otherwise */function PMA_zipExtract($zip_path, $destination, $entries){    $zip = new ZipArchive;    if ($zip->open($zip_path) === true) {        $zip->extractTo($destination, $entries);        $zip->close();        return true;    }    return false;}/**  * Gets zip error message  *  * @param integer $code error code  *  * @return string error message */function PMA_getZipError($code){    // I don't think this needs translation    switch ($code) {    case ZIPARCHIVE::ER_MULTIDISK:        $message = 'Multi-disk zip archives not supported';        break;    case ZIPARCHIVE::ER_READ:        $message = 'Read error';        break;    case ZIPARCHIVE::ER_CRC:        $message = 'CRC error';        break;    case ZIPARCHIVE::ER_NOZIP:        $message = 'Not a zip archive';        break;    case ZIPARCHIVE::ER_INCONS:        $message = 'Zip archive inconsistent';        break;    default:        $message = $code;    }    return $message;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Single signon for phpMyAdmin * * This is just example how to use script based single signon with * phpMyAdmin, it is not intended to be perfect code and look, only * shows how you can integrate this functionality in your application. * * @package PhpMyAdmin * @subpackage Example *//** * This function returns username and password. * * It can optionally use configured username as parameter. * * @param string $user * @return array */function get_login_credentials($user){    return array('root', '');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * List of avaible forms, each form is described as an array of fields to display. * Fields MUST have their counterparts in the $cfg array. * * There are two possible notations: * $forms['Form group']['Form name'] = array('Servers' => array(1 => array('host'))); * can be written as * $forms['Form group']['Form name'] = array('Servers/1/host'); * * You can assign default values set by special button ("set value: ..."), eg.: * 'Servers/1/pmadb' => 'phpmyadmin' * * To group options, use: * ':group:' . __('group name') // just define a group * or * 'option' => ':group' // group starting from this option * End group blocks with: * ':group:end' * * @package PhpMyAdmin-setup */$forms = array();$forms['_config.php'] = array(    'DefaultLang',    'ServerDefault');$forms['Servers']['Server'] = array('Servers' => array(1 => array(    'verbose',    'host',    'port',    'socket',    'ssl',    'connect_type',    'extension',    'compress',    'nopassword')));$forms['Servers']['Server_auth'] = array('Servers' => array(1 => array(    'auth_type',    ':group:' . __('Config authentication'),        'user',        'password',        ':group:end',    ':group:' . __('Cookie authentication'),        'auth_swekey_config' => './swekey.conf',        ':group:end',    ':group:' . __('HTTP authentication'),        'auth_http_realm',        ':group:end',    ':group:' . __('Signon authentication'),        'SignonSession',        'SignonURL',        'LogoutURL')));$forms['Servers']['Server_config'] = array('Servers' => array(1 => array(    'only_db',    'hide_db',    'AllowRoot',    'AllowNoPassword',    'DisableIS',    'AllowDeny/order',    'AllowDeny/rules',    'ShowDatabasesCommand',    'CountTables')));$forms['Servers']['Server_pmadb'] = array('Servers' => array(1 => array(    'pmadb' => 'phpmyadmin',    'controlhost',    'controluser',    'controlpass',    'verbose_check',    'bookmarktable' => 'pma_bookmark',    'relation' => 'pma_relation',    'userconfig' => 'pma_userconfig',    'table_info' => 'pma_table_info',    'column_info' => 'pma_column_info',    'history' => 'pma_history',    'recent' => 'pma_recent',    'table_uiprefs' => 'pma_table_uiprefs',    'tracking' => 'pma_tracking',    'table_coords' => 'pma_table_coords',    'pdf_pages' => 'pma_pdf_pages',    'designer_coords' => 'pma_designer_coords',    'MaxTableUiprefs' => 100)));$forms['Servers']['Server_tracking'] = array('Servers' => array(1 => array(    'tracking_version_auto_create',    'tracking_default_statements',    'tracking_add_drop_view',    'tracking_add_drop_table',    'tracking_add_drop_database',)));$forms['Features']['Import_export'] = array(    'UploadDir',    'SaveDir',    'RecodingEngine' => ':group',        'IconvExtraParams',        ':group:end',    'ZipDump',    'GZipDump',    'BZipDump',    'CompressOnFly');$forms['Features']['Security'] = array(    'blowfish_secret',    'ForceSSL',    'CheckConfigurationPermissions',    'TrustedProxies',    'AllowUserDropDatabase',    'AllowArbitraryServer',    'LoginCookieRecall',    'LoginCookieValidity',    'LoginCookieStore',    'LoginCookieDeleteAll');$forms['Features']['Page_titles'] = array(    'TitleDefault',    'TitleTable',    'TitleDatabase',    'TitleServer');$forms['Features']['Warnings'] = array(    'PmaNoRelation_DisableWarning',    'SuhosinDisableWarning',    'McryptDisableWarning');$forms['Features']['Developer'] = array(    'UserprefsDeveloperTab',    'Error_Handler/display',    'Error_Handler/gather',    'DBG/sql');$forms['Features']['Other_core_settings'] = array(    'AjaxEnable',    'VersionCheck',    'NaturalOrder',    'InitialSlidersState',    'ErrorIconic',    'ReplaceHelpImg',    'MaxDbList',    'MaxTableList',    'ShowHint',    'OBGzip',    'PersistentConnections',    'ExecTimeLimit',    'MemoryLimit',    'SkipLockedTables',    'DisableMultiTableMaintenance',    'UseDbSearch',    'AllowThirdPartyFraming');$forms['Sql_queries']['Sql_queries'] = array(    'ShowSQL',    'Confirm',    'QueryHistoryDB',    'QueryHistoryMax',    'IgnoreMultiSubmitErrors',    'VerboseMultiSubmit',    'MaxCharactersInDisplayedSQL',    'EditInWindow',    //'QueryWindowWidth', // overridden in theme    //'QueryWindowHeight',    'QueryWindowDefTab',    'RetainQueryBox');$forms['Sql_queries']['Sql_box'] = array('SQLQuery' => array(    'Edit',    'Explain',    'ShowAsPHP',    'Validate',    'Refresh'));$forms['Sql_queries']['Sql_validator'] = array('SQLValidator' => array(    'use',    'username',    'password'));$forms['Left_frame']['Left_frame'] = array(    'LeftFrameLight',    'LeftDisplayLogo',    'LeftLogoLink',    'LeftLogoLinkWindow',    'LeftPointerEnable',    'LeftRecentTable');$forms['Left_frame']['Left_servers'] = array(    'LeftDisplayServers',    'DisplayServersList');$forms['Left_frame']['Left_databases'] = array(    'DisplayDatabasesList',    'LeftFrameDBTree',    'LeftFrameDBSeparator',    'ShowTooltipAliasDB');$forms['Left_frame']['Left_tables'] = array(    'LeftDisplayTableFilterMinimum',    'LeftDefaultTabTable',    'LeftFrameTableSeparator',    'LeftFrameTableLevel',    'ShowTooltip',    'ShowTooltipAliasTB');$forms['Main_frame']['Startup'] = array(    'MainPageIconic',    'ShowCreateDb' => ':group',        'SuggestDBName',        ':group:end',    'ShowStats',    'ShowServerInfo',    'ShowPhpInfo',    'ShowChgPassword');$forms['Main_frame']['Browse'] = array(    'NavigationBarIconic',    'ShowAll',    'MaxRows',    'Order',    'BrowsePointerEnable',    'BrowseMarkerEnable',    'SaveCellsAtOnce',    'ShowDisplayDirection',    'RepeatCells',    'LimitChars',    'RowActionLinks',    'DefaultDisplay',    'RememberSorting');$forms['Main_frame']['Edit'] = array(    'ProtectBinary',    'ShowFunctionFields',    'ShowFieldTypesInDataEditView',    'CharEditing',    'MinSizeForInputField',    'MaxSizeForInputField',    'CharTextareaCols',    'CharTextareaRows',    'TextareaCols',    'TextareaRows',    'LongtextDoubleTextarea',    'InsertRows',    'ForeignKeyDropdownOrder',    'ForeignKeyMaxLimit');$forms['Main_frame']['Tabs'] = array(    'LightTabs',    'PropertiesIconic',    'DefaultTabServer',    'DefaultTabDatabase',    'DefaultTabTable',    'QueryWindowDefTab');$forms['Import']['Import_defaults'] = array('Import' => array(    'format',    'charset',    'allow_interrupt',    'skip_queries'));$forms['Import']['Sql'] = array('Import' => array(    'sql_compatibility',    'sql_no_auto_value_on_zero'));$forms['Import']['Csv'] = array('Import' => array(    ':group:' . __('CSV'),        'csv_replace',        'csv_ignore',        'csv_terminated',        'csv_enclosed',        'csv_escaped',        'csv_col_names',        ':group:end',    ':group:' . __('CSV using LOAD DATA'),        'ldi_replace',        'ldi_ignore',        'ldi_terminated',        'ldi_enclosed',        'ldi_escaped',        'ldi_local_option',        ':group:end'));$forms['Import']['Open_Document'] = array('Import' => array(    ':group:' . __('Open Document Spreadsheet'),        'ods_col_names',        'ods_empty_rows',        'ods_recognize_percentages',        'ods_recognize_currency'));$forms['Export']['Export_defaults'] = array('Export' => array(    'method',    ':group:' . __('Quick'),        'quick_export_onserver',        'quick_export_onserver_overwrite',        ':group:end',    ':group:' . __('Custom'),        'format',        'compression',        'charset',        'asfile' => ':group',            'onserver',            'onserver_overwrite',            ':group:end',        'remember_file_template',        'file_template_table',        'file_template_database',        'file_template_server'));$forms['Export']['Sql'] = array('Export' => array(    'sql_include_comments' => ':group',        'sql_dates',        'sql_relation',        'sql_mime',        ':group:end',    'sql_use_transaction',    'sql_disable_fk',    'sql_compatibility',    ':group:' . __('Database export options'),        'sql_drop_database',        'sql_structure_or_data',        ':group:end',    ':group:' . __('Structure'),        'sql_drop_table',        'sql_procedure_function',        'sql_create_table_statements' => ':group',            'sql_if_not_exists',            'sql_auto_increment',            ':group:end',        'sql_backquotes',        ':group:end',    ':group:' . __('Data'),        'sql_delayed',        'sql_ignore',        'sql_type',        'sql_insert_syntax',        'sql_max_query_size',        'sql_hex_for_blob',        'sql_utc_time'));$forms['Export']['CodeGen'] = array('Export' => array(    'codegen_format'));$forms['Export']['Csv'] = array('Export' => array(    ':group:' . __('CSV'),        'csv_separator',        'csv_enclosed',        'csv_escaped',        'csv_terminated',        'csv_null',        'csv_removeCRLF',        'csv_columns',        ':group:end',    ':group:' . __('CSV for MS Excel'),        'excel_null',        'excel_removeCRLF',        'excel_columns',        'excel_edition'));$forms['Export']['Latex'] = array('Export' => array(    'latex_caption',    'latex_structure_or_data',    ':group:' . __('Structure'),        'latex_structure_caption',        'latex_structure_continued_caption',        'latex_structure_label',        'latex_relation',        'latex_comments',        'latex_mime',        ':group:end',    ':group:' . __('Data'),        'latex_columns',        'latex_data_caption',        'latex_data_continued_caption',        'latex_data_label',        'latex_null'));$forms['Export']['Microsoft_Office'] = array('Export' => array(    ':group:' . __('Microsoft Word 2000'),        'htmlword_structure_or_data',        'htmlword_null',        'htmlword_columns'));$forms['Export']['Open_Document'] = array('Export' => array(    ':group:' . __('Open Document Spreadsheet'),        'ods_columns',        'ods_null',        ':group:end',    ':group:' . __('Open Document Text'),        'odt_structure_or_data',        ':group:' . __('Structure'),            'odt_relation',            'odt_comments',            'odt_mime',            ':group:end',        ':group:' . __('Data'),            'odt_columns',            'odt_null'));$forms['Export']['Texy'] = array('Export' => array(    'texytext_structure_or_data',    ':group:' . __('Data'),        'texytext_null',        'texytext_columns'));?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Messages for phpMyAdmin. * * This file defines variables in a special format suited for the * configuration subsystem, with $strConfig as a prefix, _desc or _name * as a suffix, and the directive name in between. * * @package PhpMyAdmin */if (!function_exists('__')) {    die('Bad invocation!');}$strConfigAjaxEnable_desc = __('Improves efficiency of screen refresh');$strConfigAjaxEnable_name = __('Enable Ajax');$strConfigAllowArbitraryServer_desc = __('If enabled user can enter any MySQL server in login form for cookie auth');$strConfigAllowArbitraryServer_name = __('Allow login to any MySQL server');$strConfigAllowThirdPartyFraming_desc = __('Enabling this allows a page located on a different domain to call phpMyAdmin inside a frame, and is a potential [strong]security hole[/strong] allowing cross-frame scripting attacks');$strConfigAllowThirdPartyFraming_name = __('Allow third party framing');$strConfigAllowUserDropDatabase_name = __('Show &quot;Drop database&quot; link to normal users');$strConfigblowfish_secret_desc = __('Secret passphrase used for encrypting cookies in [kbd]cookie[/kbd] authentication');$strConfigblowfish_secret_name = __('Blowfish secret');$strConfigBrowseMarkerEnable_desc = __('Highlight selected rows');$strConfigBrowseMarkerEnable_name = __('Row marker');$strConfigBrowsePointerEnable_desc = __('Highlight row pointed by the mouse cursor');$strConfigBrowsePointerEnable_name = __('Highlight pointer');$strConfigBZipDump_desc = __('Enable [a@http://en.wikipedia.org/wiki/Bzip2]bzip2[/a] compression for import and export operations');$strConfigBZipDump_name = __('Bzip2');$strConfigCharEditing_desc = __('Defines which type of editing controls should be used for CHAR and VARCHAR columns; [kbd]input[/kbd] - allows limiting of input length, [kbd]textarea[/kbd] - allows newlines in columns');$strConfigCharEditing_name = __('CHAR columns editing');$strConfigMinSizeForInputField_desc = __('Defines the minimum size for input fields generated for CHAR and VARCHAR columns');$strConfigMinSizeForInputField_name = __('Minimum size for input field');$strConfigMaxSizeForInputField_desc = __('Defines the maximum size for input fields generated for CHAR and VARCHAR columns');$strConfigMaxSizeForInputField_name = __('Maximum size for input field');$strConfigCharTextareaCols_desc = __('Number of columns for CHAR/VARCHAR textareas');$strConfigCharTextareaCols_name = __('CHAR textarea columns');$strConfigCharTextareaRows_desc = __('Number of rows for CHAR/VARCHAR textareas');$strConfigCharTextareaRows_name = __('CHAR textarea rows');$strConfigCheckConfigurationPermissions_name = __('Check config file permissions');$strConfigCompressOnFly_desc = __('Compress gzip/bzip2 exports on the fly without the need for much memory; if you encounter problems with created gzip/bzip2 files disable this feature');$strConfigCompressOnFly_name = __('Compress on the fly');$strConfigConfigurationFile = __('Configuration file');$strConfigConfirm_desc = __('Whether a warning (&quot;Are your really sure...&quot;) should be displayed when you\'re about to lose data');$strConfigConfirm_name = __('Confirm DROP queries');$strConfigDBG_sql_name = __('Debug SQL');$strConfigDefaultDisplay_name = __('Default display direction');$strConfigDefaultTabDatabase_desc = __('Tab that is displayed when entering a database');$strConfigDefaultTabDatabase_name = __('Default database tab');$strConfigDefaultTabServer_desc = __('Tab that is displayed when entering a server');$strConfigDefaultTabServer_name = __('Default server tab');$strConfigDefaultTabTable_desc = __('Tab that is displayed when entering a table');$strConfigDefaultTabTable_name = __('Default table tab');$strConfigDisplayBinaryAsHex_desc = __('Show binary contents as HEX by default');$strConfigDisplayBinaryAsHex_name = __('Show binary contents as HEX');$strConfigDisplayDatabasesList_desc = __('Show database listing as a list instead of a drop down');$strConfigDisplayDatabasesList_name = __('Display databases as a list');$strConfigDisplayServersList_desc = __('Show server listing as a list instead of a drop down');$strConfigDisplayServersList_name = __('Display servers as a list');$strConfigDisableMultiTableMaintenance_desc = __('Disable the table maintenance mass operations, like optimizing or repairing the selected tables of a database.');$strConfigDisableMultiTableMaintenance_name = __('Disable multi table maintenance');$strConfigEditInWindow_desc = __('Edit SQL queries in popup window');$strConfigEditInWindow_name = __('Edit in window');$strConfigError_Handler_display_name = __('Display errors');$strConfigError_Handler_gather_name = __('Gather errors');$strConfigErrorIconic_desc = __('Show icons for warning, error and information messages');$strConfigErrorIconic_name = __('Iconic errors');$strConfigExecTimeLimit_desc = __('Set the number of seconds a script is allowed to run ([kbd]0[/kbd] for no limit)');$strConfigExecTimeLimit_name = __('Maximum execution time');$strConfigExport_asfile_name = __('Save as file');$strConfigExport_charset_name = __('Character set of the file');$strConfigExport_codegen_format_name = __('Format');$strConfigExport_compression_name = __('Compression');$strConfigExport_csv_columns_name = __('Put columns names in the first row');$strConfigExport_csv_enclosed_name = __('Columns enclosed by');$strConfigExport_csv_escaped_name = __('Columns escaped by');$strConfigExport_csv_null_name = __('Replace NULL by');$strConfigExport_csv_removeCRLF_name = __('Remove CRLF characters within columns');$strConfigExport_csv_separator_name = __('Columns terminated by');$strConfigExport_csv_terminated_name = __('Lines terminated by');$strConfigExport_excel_columns_name = __('Put columns names in the first row');$strConfigExport_excel_edition_name = __('Excel edition');$strConfigExport_excel_null_name = __('Replace NULL by');$strConfigExport_excel_removeCRLF_name = __('Remove CRLF characters within columns');$strConfigExport_file_template_database_name = __('Database name template');$strConfigExport_file_template_server_name = __('Server name template');$strConfigExport_file_template_table_name = __('Table name template');$strConfigExport_format_name = __('Format');$strConfigExport_htmlword_columns_name = __('Put columns names in the first row');$strConfigExport_htmlword_null_name = __('Replace NULL by');$strConfigExport_htmlword_structure_or_data_name = __('Dump table');$strConfigExport_latex_caption_name = __('Include table caption');$strConfigExport_latex_columns_name = __('Put columns names in the first row');$strConfigExport_latex_comments_name = __('Comments');$strConfigExport_latex_data_caption_name = __('Table caption');$strConfigExport_latex_data_continued_caption_name = __('Continued table caption');$strConfigExport_latex_data_label_name = __('Label key');$strConfigExport_latex_mime_name = __('MIME type');$strConfigExport_latex_null_name  = __('Replace NULL by');$strConfigExport_latex_relation_name = __('Relations');$strConfigExport_latex_structure_caption_name = __('Table caption');$strConfigExport_latex_structure_continued_caption_name = __('Continued table caption');$strConfigExport_latex_structure_label_name = __('Label key');$strConfigExport_latex_structure_or_data_name = __('Dump table');$strConfigExport_method_name = __('Export method');$strConfigExport_ods_columns_name = __('Put columns names in the first row');$strConfigExport_ods_null_name = __('Replace NULL by');$strConfigExport_odt_columns_name = __('Put columns names in the first row');$strConfigExport_odt_comments_name = __('Comments');$strConfigExport_odt_mime_name = __('MIME type');$strConfigExport_odt_null_name = __('Replace NULL by');$strConfigExport_odt_relation_name = __('Relations');$strConfigExport_odt_structure_or_data_name = __('Dump table');$strConfigExport_onserver_name = __('Save on server');$strConfigExport_onserver_overwrite_name = __('Overwrite existing file(s)');$strConfigExport_quick_export_onserver_name = __('Save on server');$strConfigExport_quick_export_onserver_overwrite_name = __('Overwrite existing file(s)');$strConfigExport_remember_file_template_name = __('Remember file name template');$strConfigExport_sql_auto_increment_name = __('Add AUTO_INCREMENT value');$strConfigExport_sql_backquotes_name = __('Enclose table and column names with backquotes');$strConfigExport_sql_compatibility_name = __('SQL compatibility mode');$strConfigExport_sql_create_table_statements_name = __('<code>CREATE TABLE</code> options:');$strConfigExport_sql_dates_name = __('Creation/Update/Check dates');$strConfigExport_sql_delayed_name = __('Use delayed inserts');$strConfigExport_sql_disable_fk_name = __('Disable foreign key checks');$strConfigExport_sql_drop_database_name = sprintf(__('Add %s'), 'DROP DATABASE');$strConfigExport_sql_drop_table_name = sprintf(__('Add %s'), 'DROP TABLE / VIEW / PROCEDURE / FUNCTION / EVENT');$strConfigExport_sql_hex_for_blob_name = __('Use hexadecimal for BLOB');$strConfigExport_sql_if_not_exists_name = sprintf(__('Add %s'), 'IF NOT EXISTS');$strConfigExport_sql_ignore_name = __('Use ignore inserts');$strConfigExport_sql_include_comments_name = __('Comments');$strConfigExport_sql_insert_syntax_name = __('Syntax to use when inserting data');$strConfigExport_sql_max_query_size_name = __('Maximal length of created query');$strConfigExport_sql_mime_name = __('MIME type');$strConfigExport_sql_procedure_function_name = sprintf(__('Add %s'), 'CREATE PROCEDURE / FUNCTION / EVENT');$strConfigExport_sql_relation_name = __('Relations');$strConfigExport_sql_structure_or_data_name = __('Dump table');$strConfigExport_sql_type_name = __('Export type');$strConfigExport_sql_use_transaction_name = __('Enclose export in a transaction');$strConfigExport_sql_utc_time_name = __('Export time in UTC');$strConfigExport_texytext_columns_name = __('Put columns names in the first row');$strConfigExport_texytext_null_name = __('Replace NULL by');$strConfigExport_texytext_structure_or_data_name = __('Dump table');$strConfigExport_xls_columns_name = __('Put columns names in the first row');$strConfigExport_xls_null_name = __('Replace NULL by');$strConfigExport_xlsx_columns_name = __('Put columns names in the first row');$strConfigExport_xlsx_null_name = __('Replace NULL by');$strConfigForceSSL_desc = __('Force secured connection while using phpMyAdmin');$strConfigForceSSL_name = __('Force SSL connection');$strConfigForeignKeyDropdownOrder_desc = __('Sort order for items in a foreign-key dropdown box; [kbd]content[/kbd] is the referenced data, [kbd]id[/kbd] is the key value');$strConfigForeignKeyDropdownOrder_name = __('Foreign key dropdown order');$strConfigForeignKeyMaxLimit_desc = __('A dropdown will be used if fewer items are present');$strConfigForeignKeyMaxLimit_name = __('Foreign key limit');$strConfigForm_Browse = __('Browse mode');$strConfigForm_Browse_desc = __('Customize browse mode');$strConfigForm_CodeGen = 'CodeGen';$strConfigForm_CodeGen_desc = __('Customize default options');$strConfigForm_Csv = __('CSV');$strConfigForm_Csv_desc = __('Customize default options');$strConfigForm_Developer = __('Developer');$strConfigForm_Developer_desc = __('Settings for phpMyAdmin developers');$strConfigForm_Edit = __('Edit mode');$strConfigForm_Edit_desc = __('Customize edit mode');$strConfigForm_Export = __('Export');$strConfigForm_Export_defaults = __('Export defaults');$strConfigForm_Export_defaults_desc = __('Customize default export options');$strConfigForm_Features = __('Features');$strConfigForm_General = __('General');$strConfigForm_General_desc = __('Set some commonly used options');$strConfigForm_Import = __('Import');$strConfigForm_Import_defaults = __('Import defaults');$strConfigForm_Import_defaults_desc = __('Customize default common import options');$strConfigForm_Import_export = __('Import / export');$strConfigForm_Import_export_desc = __('Set import and export directories and compression options');$strConfigForm_Latex = __('LaTeX');$strConfigForm_Latex_desc = __('Customize default options');$strConfigForm_Left_databases = __('Databases');$strConfigForm_Left_databases_desc = __('Databases display options');$strConfigForm_Left_frame = __('Navigation frame');$strConfigForm_Left_frame_desc = __('Customize appearance of the navigation frame');$strConfigForm_Left_servers = __('Servers');$strConfigForm_Left_servers_desc = __('Servers display options');$strConfigForm_Left_tables = __('Tables');$strConfigForm_Left_tables_desc = __('Tables display options');$strConfigForm_Main_frame = __('Main frame');$strConfigForm_Microsoft_Office = __('Microsoft Office');$strConfigForm_Microsoft_Office_desc = __('Customize default options');$strConfigForm_Open_Document = __('Open Document');$strConfigForm_Open_Document_desc = __('Customize default options');$strConfigForm_Other_core_settings = __('Other core settings');$strConfigForm_Other_core_settings_desc = __('Settings that didn\'t fit enywhere else');$strConfigForm_Page_titles = __('Page titles');$strConfigForm_Page_titles_desc = __('Specify browser\'s title bar text. Refer to [a@Documentation.html#cfg_TitleTable]documentation[/a] for magic strings that can be used to get special values.');$strConfigForm_Query_window = __('Query window');$strConfigForm_Query_window_desc = __('Customize query window options');$strConfigForm_Security = __('Security');$strConfigForm_Security_desc = __('Please note that phpMyAdmin is just a user interface and its features do not limit MySQL');$strConfigForm_Server = __('Basic settings');$strConfigForm_Server_auth = __('Authentication');$strConfigForm_Server_auth_desc = __('Authentication settings');$strConfigForm_Server_config = __('Server configuration');$strConfigForm_Server_config_desc = __('Advanced server configuration, do not change these options unless you know what they are for');$strConfigForm_Server_desc = __('Enter server connection parameters');$strConfigForm_Server_pmadb = __('Configuration storage');$strConfigForm_Server_pmadb_desc = __('Configure phpMyAdmin configuration storage to gain access to additional features, see [a@Documentation.html#linked-tables]phpMyAdmin configuration storage[/a] in documentation');$strConfigForm_Server_tracking = __('Changes tracking');$strConfigForm_Server_tracking_desc = __('Tracking of changes made in database. Requires the phpMyAdmin configuration storage.');$strConfigFormset_Export = __('Customize export options');$strConfigFormset_Features = __('Features');$strConfigFormset_Import = __('Customize import defaults');$strConfigFormset_Left_frame = __('Customize navigation frame');$strConfigFormset_Main_frame = __('Customize main frame');$strConfigFormset_Sql_queries = __('SQL queries');$strConfigForm_Sql = __('SQL');$strConfigForm_Sql_box = __('SQL Query box');$strConfigForm_Sql_box_desc = __('Customize links shown in SQL Query boxes');$strConfigForm_Sql_desc = __('Customize default options');$strConfigForm_Sql_queries = __('SQL queries');$strConfigForm_Sql_queries_desc = __('SQL queries settings');$strConfigForm_Sql_validator = __('SQL Validator');$strConfigForm_Sql_validator_desc = __('If you wish to use the SQL Validator service, you should be aware that [strong]all SQL statements are stored anonymously for statistical purposes[/strong].[br][em][a@http://sqlvalidator.mimer.com/]Mimer SQL Validator[/a], Copyright 2002 Upright Database Technology. All rights reserved.[/em]');$strConfigForm_Startup = __('Startup');$strConfigForm_Startup_desc = __('Customize startup page');$strConfigForm_Tabs = __('Tabs');$strConfigForm_Tabs_desc = __('Choose how you want tabs to work');$strConfigForm_Text_fields = __('Text fields');$strConfigForm_Text_fields_desc = __('Customize text input fields');$strConfigForm_Texy = __('Texy! text');$strConfigForm_Texy_desc = __('Customize default options');$strConfigForm_Warnings = __('Warnings');$strConfigForm_Warnings_desc = __('Disable some of the warnings shown by phpMyAdmin');$strConfigGZipDump_desc = __('Enable [a@http://en.wikipedia.org/wiki/Gzip]gzip[/a] compression for import and export operations');$strConfigGZipDump_name = __('GZip');$strConfigIconvExtraParams_name = __('Extra parameters for iconv');$strConfigIgnoreMultiSubmitErrors_desc = __('If enabled, phpMyAdmin continues computing multiple-statement queries even if one of the queries failed');$strConfigIgnoreMultiSubmitErrors_name = __('Ignore multiple statement errors');$strConfigImport_allow_interrupt_desc = __('Allow interrupt of import in case script detects it is close to time limit. This might be good way to import large files, however it can break transactions.');$strConfigImport_allow_interrupt_name = __('Partial import: allow interrupt');$strConfigImport_charset_name = __('Character set of the file');$strConfigImport_csv_col_names_name = __('Lines terminated by');$strConfigImport_csv_enclosed_name = __('Columns enclosed by');$strConfigImport_csv_escaped_name = __('Columns escaped by');$strConfigImport_csv_ignore_name = __('Do not abort on INSERT error');$strConfigImport_csv_replace_name = __('Replace table data with file');$strConfigImport_csv_terminated_name = __('Columns terminated by');$strConfigImport_format_desc = __('Default format; be aware that this list depends on location (database, table) and only SQL is always available');$strConfigImport_format_name = __('Format of imported file');$strConfigImport_ldi_enclosed_name = __('Columns enclosed by');$strConfigImport_ldi_escaped_name = __('Columns escaped by');$strConfigImport_ldi_ignore_name = __('Do not abort on INSERT error');$strConfigImport_ldi_local_option_name = __('Use LOCAL keyword');$strConfigImport_ldi_replace_name = __('Replace table data with file');$strConfigImport_ldi_terminated_name = __('Columns terminated by');$strConfigImport_ods_col_names_name = __('Column names in first row');$strConfigImport_ods_empty_rows_name = __('Do not import empty rows');$strConfigImport_ods_recognize_currency_name = __('Import currencies ($5.00 to 5.00)');$strConfigImport_ods_recognize_percentages_name = __('Import percentages as proper decimals (12.00% to .12)');$strConfigImport_skip_queries_desc = __('Number of queries to skip from start');$strConfigImport_skip_queries_name = __('Partial import: skip queries');$strConfigImport_sql_compatibility_name = __('SQL compatibility mode');$strConfigImport_sql_no_auto_value_on_zero_name = __('Do not use AUTO_INCREMENT for zero values');$strConfigImport_xls_col_names_name = __('Column names in first row');$strConfigImport_xlsx_col_names_name = __('Column names in first row');$strConfigInitialSlidersState_name = __('Initial state for sliders');$strConfigInsertRows_desc = __('How many rows can be inserted at one time');$strConfigInsertRows_name = __('Number of inserted rows');$strConfigLeftDefaultTabTable_name = __('Target for quick access icon');$strConfigLeftDisplayLogo_desc = __('Show logo in left frame');$strConfigLeftDisplayLogo_name = __('Display logo');$strConfigLeftDisplayServers_desc = __('Display server choice at the top of the left frame');$strConfigLeftDisplayServers_name = __('Display servers selection');$strConfigLeftDisplayTableFilterMinimum_name = __('Minimum number of tables to display the table filter box');$strConfigLeftFrameDBSeparator_desc = __('String that separates databases into different tree levels');$strConfigLeftFrameDBSeparator_name = __('Database tree separator');$strConfigLeftFrameDBTree_desc = __('Only light version; display databases in a tree (determined by the separator defined below)');$strConfigLeftFrameDBTree_name = __('Display databases in a tree');$strConfigLeftFrameLight_desc = __('Disable this if you want to see all databases at once');$strConfigLeftFrameLight_name = __('Use light version');$strConfigLeftFrameTableLevel_name = __('Maximum table tree depth');$strConfigLeftFrameTableSeparator_desc = __('String that separates tables into different tree levels');$strConfigLeftFrameTableSeparator_name = __('Table tree separator');$strConfigLeftLogoLink_desc = __('URL where logo in the navigation frame will point to');$strConfigLeftLogoLink_name = __('Logo link URL');$strConfigLeftLogoLinkWindow_desc = __('Open the linked page in the main window ([kbd]main[/kbd]) or in a new one ([kbd]new[/kbd])');$strConfigLeftLogoLinkWindow_name = __('Logo link target');$strConfigLeftPointerEnable_desc = __('Highlight server under the mouse cursor');$strConfigLeftPointerEnable_name = __('Enable highlighting');$strConfigLeftRecentTable_desc = __('Maximum number of recently used tables; set 0 to disable');$strConfigLeftRecentTable_name = __('Recently used tables');$strConfigLightTabs_desc = __('Use less graphically intense tabs');$strConfigLightTabs_name = __('Light tabs');$strConfigLimitChars_desc = __('Maximum number of characters shown in any non-numeric column on browse view');$strConfigLimitChars_name = __('Limit column characters');$strConfigLoginCookieDeleteAll_desc = __('If TRUE, logout deletes cookies for all servers; when set to FALSE, logout only occurs for the current server. Setting this to FALSE makes it easy to forget to log out from other servers when connected to multiple servers.');$strConfigLoginCookieDeleteAll_name = __('Delete all cookies on logout');$strConfigLoginCookieRecall_desc = __('Define whether the previous login should be recalled or not in cookie authentication mode');$strConfigLoginCookieRecall_name = __('Recall user name');$strConfigLoginCookieStore_desc = __('Defines how long (in seconds) a login cookie should be stored in browser. The default of 0 means that it will be kept for the existing session only, and will be deleted as soon as you close the browser window. This is recommended for non-trusted environments.');$strConfigLoginCookieStore_name = __('Login cookie store');$strConfigLoginCookieValidity_desc = __('Define how long (in seconds) a login cookie is valid');$strConfigLoginCookieValidity_name = __('Login cookie validity');$strConfigLongtextDoubleTextarea_desc = __('Double size of textarea for LONGTEXT columns');$strConfigLongtextDoubleTextarea_name = __('Bigger textarea for LONGTEXT');$strConfigMainPageIconic_name = __('Use icons on main page');$strConfigMaxCharactersInDisplayedSQL_desc = __('Maximum number of characters used when a SQL query is displayed');$strConfigMaxCharactersInDisplayedSQL_name = __('Maximum displayed SQL length');$strConfigMaxDbList_cmt = __('Users cannot set a higher value');$strConfigMaxDbList_desc = __('Maximum number of databases displayed in left frame and database list');$strConfigMaxDbList_name = __('Maximum databases');$strConfigMaxRows_desc = __('Number of rows displayed when browsing a result set. If the result set contains more rows, &quot;Previous&quot; and &quot;Next&quot; links will be shown.');$strConfigMaxRows_name = __('Maximum number of rows to display');$strConfigMaxTableList_cmt = __('Users cannot set a higher value');$strConfigMaxTableList_desc = __('Maximum number of tables displayed in table list');$strConfigMaxTableList_name = __('Maximum tables');$strConfigMcryptDisableWarning_desc = __('Disable the default warning that is displayed if mcrypt is missing for cookie authentication');$strConfigMcryptDisableWarning_name = __('mcrypt warning');$strConfigMemoryLimit_desc = __('The number of bytes a script is allowed to allocate, eg. [kbd]32M[/kbd] ([kbd]0[/kbd] for no limit)');$strConfigMemoryLimit_name = __('Memory limit');$strConfigRowActionLinks_desc = __('These are Edit, Copy and Delete links');$strConfigRowActionLinks_name = __('Where to show the table row links');$strConfigNaturalOrder_desc = __('Use natural order for sorting table and database names');$strConfigNaturalOrder_name = __('Natural order');$strConfigNavigationBarIconic_desc = __('Use only icons, only text or both');$strConfigNavigationBarIconic_name = __('Iconic navigation bar');$strConfigOBGzip_desc = __('use GZip output buffering for increased speed in HTTP transfers');$strConfigOBGzip_name = __('GZip output buffering');$strConfigOrder_desc = __('[kbd]SMART[/kbd] - i.e. descending order for columns of type TIME, DATE, DATETIME and TIMESTAMP, ascending order otherwise');$strConfigOrder_name = __('Default sorting order');$strConfigPersistentConnections_desc = __('Use persistent connections to MySQL databases');$strConfigPersistentConnections_name = __('Persistent connections');$strConfigPmaNoRelation_DisableWarning_desc = __('Disable the default warning that is displayed on the database details Structure page if any of the required tables for the phpMyAdmin configuration storage could not be found');$strConfigPmaNoRelation_DisableWarning_name = __('Missing phpMyAdmin configuration storage tables');$strConfigPropertiesIconic_desc = __('Use only icons, only text or both');$strConfigPropertiesIconic_name = __('Iconic table operations');$strConfigProtectBinary_desc = __('Disallow BLOB and BINARY columns from editing');$strConfigProtectBinary_name = __('Protect binary columns');$strConfigQueryHistoryDB_desc = __('Enable if you want DB-based query history (requires phpMyAdmin configuration storage). If disabled, this utilizes JS-routines to display query history (lost by window close).');$strConfigQueryHistoryDB_name = __('Permanent query history');$strConfigQueryHistoryMax_cmt = __('Users cannot set a higher value');$strConfigQueryHistoryMax_desc = __('How many queries are kept in history');$strConfigQueryHistoryMax_name = __('Query history length');$strConfigQueryWindowDefTab_desc = __('Tab displayed when opening a new query window');$strConfigQueryWindowDefTab_name = __('Default query window tab');$strConfigQueryWindowHeight_desc = __('Query window height (in pixels)');$strConfigQueryWindowHeight_name = __('Query window height');$strConfigQueryWindowWidth_desc = __('Query window width (in pixels)');$strConfigQueryWindowWidth_name = __('Query window width');$strConfigRecodingEngine_desc = __('Select which functions will be used for character set conversion');$strConfigRecodingEngine_name = __('Recoding engine');$strConfigRememberSorting_desc = __('When browsing tables, the sorting of each table is remembered');$strConfigRememberSorting_name = __('Remember table\'s sorting');$strConfigRepeatCells_desc = __('Repeat the headers every X cells, [kbd]0[/kbd] deactivates this feature');$strConfigRepeatCells_name = __('Repeat headers');$strConfigReplaceHelpImg_desc = __('Show help button instead of Documentation text');$strConfigReplaceHelpImg_name = __('Show help button');$strConfigRestoreDefaultValue = __('Restore default value');$strConfigSaveCellsAtOnce_name = __('Save all edited cells at once');$strConfigSaveDir_desc = __('Directory where exports can be saved on server');$strConfigSaveDir_name = __('Save directory');$strConfigServers_AllowDeny_order_desc = __('Leave blank if not used');$strConfigServers_AllowDeny_order_name = __('Host authorization order');$strConfigServers_AllowDeny_rules_desc = __('Leave blank for defaults');$strConfigServers_AllowDeny_rules_name = __('Host authorization rules');$strConfigServers_AllowNoPassword_name = __('Allow logins without a password');$strConfigServers_AllowRoot_name = __('Allow root login');$strConfigServers_auth_http_realm_desc = __('HTTP Basic Auth Realm name to display when doing HTTP Auth');$strConfigServers_auth_http_realm_name = __('HTTP Realm');$strConfigServers_auth_swekey_config_desc = __('The path for the config file for [a@http://swekey.com]SweKey hardware authentication[/a] (not located in your document root; suggested: /etc/swekey.conf)');$strConfigServers_auth_swekey_config_name = __('SweKey config file');$strConfigServers_auth_type_desc = __('Authentication method to use');$strConfigServers_auth_type_name = __('Authentication type');$strConfigServers_bookmarktable_desc = __('Leave blank for no [a@http://wiki.phpmyadmin.net/pma/bookmark]bookmark[/a] support, suggested: [kbd]pma_bookmark[/kbd]');$strConfigServers_bookmarktable_name = __('Bookmark table');$strConfigServers_column_info_desc = __('Leave blank for no column comments/mime types, suggested: [kbd]pma_column_info[/kbd]');$strConfigServers_column_info_name = __('Column information table');$strConfigServers_compress_desc = __('Compress connection to MySQL server');$strConfigServers_compress_name = __('Compress connection');$strConfigServers_connect_type_desc = __('How to connect to server, keep [kbd]tcp[/kbd] if unsure');$strConfigServers_connect_type_name = __('Connection type');$strConfigServers_controlpass_name = __('Control user password');$strConfigServers_controluser_desc = __('A special MySQL user configured with limited permissions, more information available on [a@http://wiki.phpmyadmin.net/pma/controluser]wiki[/a]');$strConfigServers_controluser_name = __('Control user');$strConfigServers_controlhost_desc = __('An alternate host to hold the configuration storage; leave blank to use the already defined host');$strConfigServers_controlhost_name = __('Control host');$strConfigServers_CountTables_desc = __('Count tables when showing database list');$strConfigServers_CountTables_name = __('Count tables');$strConfigServers_designer_coords_desc = __('Leave blank for no Designer support, suggested: [kbd]pma_designer_coords[/kbd]');$strConfigServers_designer_coords_name = __('Designer table');$strConfigServers_DisableIS_desc = __('More information on [a@http://sf.net/support/tracker.php?aid=1849494]PMA bug tracker[/a] and [a@http://bugs.mysql.com/19588]MySQL Bugs[/a]');$strConfigServers_DisableIS_name = __('Disable use of INFORMATION_SCHEMA');$strConfigServers_extension_desc = __('What PHP extension to use; you should use mysqli if supported');$strConfigServers_extension_name = __('PHP extension to use');$strConfigServers_hide_db_desc = __('Hide databases matching regular expression (PCRE)');$strConfigServers_hide_db_name = __('Hide databases');$strConfigServers_history_desc = __('Leave blank for no SQL query history support, suggested: [kbd]pma_history[/kbd]');$strConfigServers_history_name = __('SQL query history table');$strConfigServers_host_desc = __('Hostname where MySQL server is running');$strConfigServers_host_name = __('Server hostname');$strConfigServers_LogoutURL_name = __('Logout URL');$strConfigServers_MaxTableUiprefs_desc = __('Limits number of table preferences which are stored in database, the oldest records are automatically removed');$strConfigServers_MaxTableUiprefs_name = __('Maximal number of table preferences to store');$strConfigServers_nopassword_desc = __('Try to connect without password');$strConfigServers_nopassword_name = __('Connect without password');$strConfigServers_only_db_desc = __('You can use MySQL wildcard characters (% and _), escape them if you want to use their literal instances, i.e. use [kbd]\'my\_db\'[/kbd] and not [kbd]\'my_db\'[/kbd]. Using this option you can sort database list, just enter their names in order and use [kbd]*[/kbd] at the end to show the rest in alphabetical order.');$strConfigServers_only_db_name = __('Show only listed databases');$strConfigServers_password_desc = __('Leave empty if not using config auth');$strConfigServers_password_name = __('Password for config auth');$strConfigServers_pdf_pages_desc = __('Leave blank for no PDF schema support, suggested: [kbd]pma_pdf_pages[/kbd]');$strConfigServers_pdf_pages_name = __('PDF schema: pages table');$strConfigServers_pmadb_desc = __('Database used for relations, bookmarks, and PDF features. See [a@http://wiki.phpmyadmin.net/pma/pmadb]pmadb[/a] for complete information. Leave blank for no support. Suggested: [kbd]phpmyadmin[/kbd]');$strConfigServers_pmadb_name = __('Database name');$strConfigServers_port_desc = __('Port on which MySQL server is listening, leave empty for default');$strConfigServers_port_name = __('Server port');$strConfigServers_recent_desc = __('Leave blank for no "persistent" recently used tables across sessions, suggested: [kbd]pma_recent[/kbd]');$strConfigServers_recent_name = __('Recently used table');$strConfigServers_relation_desc = __('Leave blank for no [a@http://wiki.phpmyadmin.net/pma/relation]relation-links[/a] support, suggested: [kbd]pma_relation[/kbd]');$strConfigServers_relation_name = __('Relation table');$strConfigServers_ShowDatabasesCommand_desc = __('SQL command to fetch available databases');$strConfigServers_ShowDatabasesCommand_name = __('SHOW DATABASES command');$strConfigServers_SignonSession_desc = __('See [a@http://wiki.phpmyadmin.net/pma/auth_types#signon]authentication types[/a] for an example');$strConfigServers_SignonSession_name = __('Signon session name');$strConfigServers_SignonURL_name = __('Signon URL');$strConfigServers_socket_desc = __('Socket on which MySQL server is listening, leave empty for default');$strConfigServers_socket_name = __('Server socket');$strConfigServers_ssl_desc = __('Enable SSL for connection to MySQL server');$strConfigServers_ssl_name = __('Use SSL');$strConfigServers_table_coords_desc = __('Leave blank for no PDF schema support, suggested: [kbd]pma_table_coords[/kbd]');$strConfigServers_table_coords_name = __('PDF schema: table coordinates');$strConfigServers_table_info_desc = __('Table to describe the display columns, leave blank for no support; suggested: [kbd]pma_table_info[/kbd]');$strConfigServers_table_info_name = __('Display columns table');$strConfigServers_table_uiprefs_desc = __('Leave blank for no "persistent" tables\'UI preferences across sessions, suggested: [kbd]pma_table_uiprefs[/kbd]');$strConfigServers_table_uiprefs_name = __('UI preferences table');$strConfigServers_tracking_add_drop_database_desc = __('Whether a DROP DATABASE IF EXISTS statement will be added as first line to the log when creating a database.');$strConfigServers_tracking_add_drop_database_name = __('Add DROP DATABASE');$strConfigServers_tracking_add_drop_table_desc = __('Whether a DROP TABLE IF EXISTS statement will be added as first line to the log when creating a table.');$strConfigServers_tracking_add_drop_table_name = __('Add DROP TABLE');$strConfigServers_tracking_add_drop_view_desc = __('Whether a DROP VIEW IF EXISTS statement will be added as first line to the log when creating a view.');$strConfigServers_tracking_add_drop_view_name = __('Add DROP VIEW');$strConfigServers_tracking_default_statements_desc = __('Defines the list of statements the auto-creation uses for new versions.');$strConfigServers_tracking_default_statements_name = __('Statements to track');$strConfigServers_tracking_desc = __('Leave blank for no SQL query tracking support, suggested: [kbd]pma_tracking[/kbd]');$strConfigServers_tracking_name = __('SQL query tracking table');$strConfigServers_tracking_version_auto_create_desc = __('Whether the tracking mechanism creates versions for tables and views automatically.');$strConfigServers_tracking_version_auto_create_name = __('Automatically create versions');$strConfigServers_userconfig_desc = __('Leave blank for no user preferences storage in database, suggested: [kbd]pma_userconfig[/kbd]');$strConfigServers_userconfig_name = __('User preferences storage table');$strConfigServers_user_desc = __('Leave empty if not using config auth');$strConfigServers_user_name = __('User for config auth');$strConfigServers_verbose_check_desc = __('Disable if you know that your pma_* tables are up to date. This prevents compatibility checks and thereby increases performance');$strConfigServers_verbose_check_name = __('Verbose check');$strConfigServers_verbose_desc = __('A user-friendly description of this server. Leave blank to display the hostname instead.');$strConfigServers_verbose_name = __('Verbose name of this server');$strConfigShowAll_desc = __('Whether a user should be displayed a &quot;show all (rows)&quot; button');$strConfigShowAll_name = __('Allow to display all the rows');$strConfigShowChgPassword_desc = __('Please note that enabling this has no effect with [kbd]config[/kbd] authentication mode because the password is hard coded in the configuration file; this does not limit the ability to execute the same command directly');$strConfigShowChgPassword_name = __('Show password change form');$strConfigShowCreateDb_name = __('Show create database form');$strConfigShowDisplayDirection_desc = __('Defines whether or not type display direction option is shown when browsing a table');$strConfigShowDisplayDirection_name = __('Show display direction');$strConfigShowFieldTypesInDataEditView_desc = __('Defines whether or not type fields should be initially displayed in edit/insert mode');$strConfigShowFieldTypesInDataEditView_name = __('Show field types');$strConfigShowFunctionFields_desc = __('Display the function fields in edit/insert mode');$strConfigShowFunctionFields_name = __('Show function fields');$strConfigShowHint_desc = __('Whether to show hint or not');$strConfigShowHint_name = __('Show hint');$strConfigShowPhpInfo_desc = __('Shows link to [a@http://php.net/manual/function.phpinfo.php]phpinfo()[/a] output');$strConfigShowPhpInfo_name = __('Show phpinfo() link');$strConfigShowServerInfo_name = __('Show detailed MySQL server information');$strConfigShowSQL_desc = __('Defines whether SQL queries generated by phpMyAdmin should be displayed');$strConfigShowSQL_name = __('Show SQL queries');$strConfigRetainQueryBox_desc = __('Defines whether the query box should stay on-screen after its submission');$strConfigRetainQueryBox_name = __('Retain query box');$strConfigShowStats_desc = __('Allow to display database and table statistics (eg. space usage)');$strConfigShowStats_name = __('Show statistics');$strConfigShowTooltipAliasDB_desc = __('If tooltips are enabled and a database comment is set, this will flip the comment and the real name');$strConfigShowTooltipAliasDB_name = __('Display database comment instead of its name');$strConfigShowTooltipAliasTB_desc = __('When setting this to [kbd]nested[/kbd], the alias of the table name is only used to split/nest the tables according to the $cfg[\'LeftFrameTableSeparator\'] directive, so only the folder is called like the alias, the table name itself stays unchanged');$strConfigShowTooltipAliasTB_name = __('Display table comment instead of its name');$strConfigShowTooltip_name = __('Display table comments in tooltips');$strConfigSkipLockedTables_desc = __('Mark used tables and make it possible to show databases with locked tables');$strConfigSkipLockedTables_name = __('Skip locked tables');$strConfigSQLQuery_Edit_name = __('Edit');$strConfigSQLQuery_Explain_name = __('Explain SQL');$strConfigSQLQuery_Refresh_name = __('Refresh');$strConfigSQLQuery_ShowAsPHP_name = __('Create PHP Code');$strConfigSQLQuery_Validate_desc = __('Requires SQL Validator to be enabled');$strConfigSQLQuery_Validate_name = __('Validate SQL');$strConfigSQLValidator_password_name = __('Password');$strConfigSQLValidator_use_desc = __('[strong]Warning:[/strong] requires PHP SOAP extension or PEAR SOAP to be installed');$strConfigSQLValidator_use_name = __('Enable SQL Validator');$strConfigSQLValidator_username_desc = __('If you have a custom username, specify it here (defaults to [kbd]anonymous[/kbd])');$strConfigSQLValidator_username_name = __('Username');$strConfigSuggestDBName_desc = __('Suggest a database name on the &quot;Create Database&quot; form (if possible) or keep the text field empty');$strConfigSuggestDBName_name = __('Suggest new database name');$strConfigSuhosinDisableWarning_desc = __('A warning is displayed on the main page if Suhosin is detected');$strConfigSuhosinDisableWarning_name = __('Suhosin warning');$strConfigTextareaCols_desc = __('Textarea size (columns) in edit mode, this value will be emphasized for SQL query textareas (*2) and for query window (*1.25)');$strConfigTextareaCols_name = __('Textarea columns');$strConfigTextareaRows_desc = __('Textarea size (rows) in edit mode, this value will be emphasized for SQL query textareas (*2) and for query window (*1.25)');$strConfigTextareaRows_name = __('Textarea rows');$strConfigTitleDatabase_desc = __('Title of browser window when a database is selected');$strConfigTitleDatabase_name = __('Database');$strConfigTitleDefault_desc = __('Title of browser window when nothing is selected');$strConfigTitleDefault_name = __('Default title');$strConfigTitleServer_desc = __('Title of browser window when a server is selected');$strConfigTitleServer_name = __('Server');$strConfigTitleTable_desc = __('Title of browser window when a table is selected');$strConfigTitleTable_name = __('Table');$strConfigTrustedProxies_desc = __('Input proxies as [kbd]IP: trusted HTTP header[/kbd]. The following example specifies that phpMyAdmin should trust a HTTP_X_FORWARDED_FOR (X-Forwarded-For) header coming from the proxy 1.2.3.4:[br][kbd]1.2.3.4: HTTP_X_FORWARDED_FOR[/kbd]');$strConfigTrustedProxies_name = __('List of trusted proxies for IP allow/deny');$strConfigUploadDir_desc = __('Directory on server where you can upload files for import');$strConfigUploadDir_name = __('Upload directory');$strConfigUseDbSearch_desc = __('Allow for searching inside the entire database');$strConfigUseDbSearch_name = __('Use database search');$strConfigUserprefsDeveloperTab_desc = __('When disabled, users cannot set any of the options below, regardless of the checkbox on the right');$strConfigUserprefsDeveloperTab_name = __('Enable the Developer tab in settings');$strConfigVerboseMultiSubmit_desc = __('Show affected rows of each statement on multiple-statement queries. See libraries/import.lib.php for defaults on how many queries a statement may contain.');$strConfigVerboseMultiSubmit_name = __('Verbose multiple statements');$strConfigVersionCheckLink = __('Check for latest version');$strConfigVersionCheck_desc = __('Enables check for latest version on main phpMyAdmin page');$strConfigVersionCheck_name = __('Version check');$strConfigZipDump_desc = __('Enable [a@http://en.wikipedia.org/wiki/ZIP_(file_format)]ZIP[/a] compression for import and export operations');$strConfigZipDump_name = __('ZIP');?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This function is used to retreive some language strings that are used * in functionalities that are common to routines, triggers and events. * * @param   string  $index   The index of the string to get * * @return  string  The requested string or an empty string, if not available */function PMA_RTE_getWord($index){    global $_PMA_RTE;    switch ($_PMA_RTE) {    case 'RTN':        $words = array(            'add'       => __('Add routine'),            'docu'      => 'STORED_ROUTINES',            'export'    => __('Export of routine %s'),            'human'     => __('routine'),            'no_create' => __('You do not have the necessary privileges to create a routine'),            'not_found' => __('No routine with name %1$s found in database %2$s'),            'nothing'   => __('There are no routines to display.'),            'title'     => __('Routines'),        );        break;    case 'TRI':        $words = array(            'add'       => __('Add trigger'),            'docu'      => 'TRIGGERS',            'export'    => __('Export of trigger %s'),            'human'     => __('trigger'),            'no_create' => __('You do not have the necessary privileges to create a trigger'),            'not_found' => __('No trigger with name %1$s found in database %2$s'),            'nothing'   => __('There are no triggers to display.'),            'title'     => __('Triggers'),        );        break;    case 'EVN':        $words = array(            'add'       => __('Add event'),            'docu'      => 'EVENTS',            'export'    => __('Export of event %s'),            'human'     => __('event'),            'no_create' => __('You do not have the necessary privileges to create an event'),            'not_found' => __('No event with name %1$s found in database %2$s'),            'nothing'   => __('There are no events to display.'),            'title'     => __('Events'),        );        break;    default:        $words = array();        break;    }    return isset($words[$index]) ? $words[$index] : '';} // end PMA_RTE_getWord()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Wrappers for Drizzle extension classes * * Drizzle extension exposes libdrizzle functions and requires user to have it in mind while using them. * This wrapper is not complete and hides a lot of original functionality, but allows for easy usage * of the drizzle PHP extension. * * @package PhpMyAdmin-DBI-Drizzle */// TODO: drizzle module segfaults while freeing resources, often. This allows at least for some developmentfunction _drizzle_shutdown_flush() {    flush();}register_shutdown_function('_drizzle_shutdown_flush');function _dlog_argstr($args){    $r = array();    foreach ($args as $arg) {        if (is_object($arg)) {            $r[] = get_class($arg);        } elseif (is_bool($arg)) {            $r[] = $arg ? 'true' : 'false';        } elseif (is_null($arg)) {            $r[] = 'null';        } else {            $r[] = $arg;        }    }    return implode(', ', $r);}function _dlog($end = false){    /*    static $fp = null;    if (!$fp) {        $fp = fopen('./drizzle_log.log', 'a');        flock($fp, LOCK_EX);        fwrite($fp, "\r\n[" . date('H:i:s') . "]\t" . $_SERVER['REQUEST_URI'] . "\r\n");        register_shutdown_function(function() use ($fp) {            fwrite($fp, '[' . date('H:i:s') . "]\tEND\r\n\r\n");        });    }    if ($end) {        fwrite($fp, '[' . date('H:i:s') . "]\tok\r\n");    } else {        $bt = debug_backtrace(true);        $caller = (isset($bt[1]['class']) ? $bt[1]['class'] . '::' : '') . $bt[1]['function'];        if ($bt[1]['function'] == '__call') {            $caller .= '^' . $bt[1]['args'][0];            $args = _dlog_argstr($bt[1]['args'][1]);        } else {            $args = _dlog_argstr($bt[1]['args']);        }        fwrite($fp, '[' . date('H:i:s') . "]\t" . $caller . "\t" . $args . "\r\n");        for ($i = 2; $i <= count($bt)-1; $i++) {            if (!isset($bt[$i])) {                break;            }            $caller = (isset($bt[$i]['class']) ? $bt[$i]['class'] . '::' : '') . $bt[$i]['function'];            $caller .= ' (' . $bt[$i]['file'] . ':' . $bt[$i]['line'] .  ')';            fwrite($fp, str_repeat(' ', 20) . $caller . "\r\n");        }    }    //*/}/** * Wrapper for Drizzle class */class PMA_Drizzle extends Drizzle{    /**     * Fetch mode: result rows contain column names     */    const FETCH_ASSOC = 1;    /**     * Fetch mode: result rows contain only numeric indices     */    const FETCH_NUM = 2;    /**     * Fetch mode: result rows have both column names and numeric indices     */    const FETCH_BOTH = 3;    /**     * Result buffering: entire result set is buffered upon execution     */    const BUFFER_RESULT = 1;    /**     * Result buffering: buffering occurs only on row level     */    const BUFFER_ROW = 2;    /**     * Constructor     */    public function __construct()    {_dlog();        parent::__construct();    }    /**     * Creates a new database conection using TCP     *     * @param $host     * @param $port     * @param $user     * @param $password     * @param $db     * @param $options     * @return PMA_DrizzleCon     */    public function addTcp($host, $port, $user, $password, $db, $options)    {_dlog();        $dcon = parent::addTcp($host, $port, $user, $password, $db, $options);        return $dcon instanceof DrizzleCon            ? new PMA_DrizzleCon($dcon)            : $dcon;    }    /**     * Creates a new connection using unix domain socket     *      * @param $uds     * @param $user     * @param $password     * @param $db     * @param $options     * @return PMA_DrizzleCon     */    public function addUds($uds, $user, $password, $db, $options)    {_dlog();        $dcon = parent::addUds($uds, $user, $password, $db, $options);        return $dcon instanceof DrizzleCon            ? new PMA_DrizzleCon($dcon)            : $dcon;    }}/** * Wrapper around DrizzleCon class * * Its main task is to wrap results with PMA_DrizzleResult class */class PMA_DrizzleCon{    /**     * Instance of DrizzleCon class     * @var DrizzleCon     */    private $dcon;    /**     * Result of the most recent query     * @var PMA_DrizzleResult     */    private $lastResult;    /**     * Constructor     *     * @param DrizzleCon $dcon     */    public function __construct(DrizzleCon $dcon)    {_dlog();        $this->dcon = $dcon;    }    /**     * Executes given query. Opens database connection if not already done.     *     * @param string $query     * @param int    $bufferMode  PMA_Drizzle::BUFFER_RESULT, PMA_Drizzle::BUFFER_ROW     * @param int    $fetchMode   PMA_Drizzle::FETCH_ASSOC, PMA_Drizzle::FETCH_NUM or PMA_Drizzle::FETCH_BOTH     * @return PMA_DrizzleResult     */    public function query($query, $bufferMode = PMA_Drizzle::BUFFER_RESULT, $fetchMode = PMA_Drizzle::FETCH_ASSOC)    {_dlog();        $result = $this->dcon->query($query);        if ($result instanceof DrizzleResult) {    _dlog(true);            $this->lastResult = new PMA_DrizzleResult($result, $bufferMode, $fetchMode);            return $this->lastResult;        }        return $result;    }    /**     * Returns the number of rows affected by last query     *     * @return int|false     */    public function affectedRows()    {        return $this->lastResult            ? $this->lastResult->affectedRows()            : false;    }    /**     * Pass calls of undefined methods to DrizzleCon object     *      * @param $method     * @param $args     * @return mixed     */    public function __call($method, $args)    {_dlog();        return call_user_func_array(array($this->dcon, $method), $args);    }    /**     * Returns original Drizzle connection object     *     * @return DrizzleCon     */    public function getConnectionObject()    {_dlog();        return $this->dcon;    }}/** * Wrapper around DrizzleResult. Allows for reading result rows as an associative array * and hides complexity behind buffering. */class PMA_DrizzleResult{    /**     * Instamce of DrizzleResult class     * @var DrizzleResult     */    private $dresult;    /**     * Fetch mode     * @var int     */    private $fetchMode;    /**     * Buffering mode     * @var int     */    private $bufferMode;    /**     * Cached column data     * @var DrizzleColumn[]     */    private $columns = null;    /**     * Cached column names     * @var string[]     */    private $columnNames = null;    /**     * Constructor     *     * @param DrizzleResult $dresult     * @param int           $bufferMode     * @param int           $fetchMode     */    public function __construct(DrizzleResult $dresult, $bufferMode, $fetchMode)    {_dlog();        $this->dresult = $dresult;        $this->bufferMode = $bufferMode;        $this->fetchMode = $fetchMode;        if ($this->bufferMode == PMA_Drizzle::BUFFER_RESULT) {            $this->dresult->buffer();        }    }    /**     * Sets fetch mode     *     * @param int $fetchMode     */    public function setFetchMode($fetchMode)    {_dlog();        $this->fetchMode = $fetchMode;    }    /**     * Reads information about columns contained in current result set into {@see $columns} and {@see $columnNames} arrays     */    private function _readColumns()    {_dlog();        $this->columns = array();        $this->columnNames = array();        if ($this->bufferMode == PMA_Drizzle::BUFFER_RESULT) {            while (($column = $this->dresult->columnNext()) !== null) {                $this->columns[] = $column;                $this->columnNames[] = $column->name();            }        } else {            while (($column = $this->dresult->columnRead()) !== null) {                $this->columns[] = $column;                $this->columnNames[] = $column->name();            }        }    }    /**     * Returns columns in current result     *     * @return DrizzleColumn[]     */    public function getColumns()    {_dlog();        if (!$this->columns) {            $this->_readColumns();        }        return $this->columns;    }    /**     * Returns number if columns in result     *     * @return int     */    public function numColumns()    {_dlog();        return $this->dresult->columnCount();    }    /**     * Transforms result row to conform to current fetch mode     *     * @param mixed &$row     * @param int   $fetchMode     */    private function _transformResultRow(&$row, $fetchMode)    {        if (!$row) {            return;        }        switch ($fetchMode) {            case PMA_Drizzle::FETCH_ASSOC:                $row = array_combine($this->columnNames, $row);                break;            case PMA_Drizzle::FETCH_BOTH:                $length = count($row);                for ($i = 0; $i < $length; $i++) {                    $row[$this->columnNames[$i]] = $row[$i];                }                break;            default:                break;        }    }    /**     * Fetches next for from this result set     *     * @param int $fetchMode  fetch mode to use, if none given the default one is used     * @return array|null     */    public function fetchRow($fetchMode = null)    {_dlog();        // read column names on first fetch, only buffered results allow for reading it later        if (!$this->columns) {            $this->_readColumns();        }        if ($fetchMode === null) {            $fetchMode = $this->fetchMode;        }        $row = null;        switch ($this->bufferMode) {            case PMA_Drizzle::BUFFER_RESULT:                $row = $this->dresult->rowNext();                break;            case PMA_Drizzle::BUFFER_ROW:                $row = $this->dresult->rowBuffer();                break;        }        $this->_transformResultRow($row, $fetchMode);        return $row;    }    /**     * Adjusts the result pointer to an arbitrary row in buffered result     *     * @param $row_index     * @return bool     */    public function seek($row_index)    {_dlog();        if ($this->bufferMode != PMA_Drizzle::BUFFER_RESULT) {            trigger_error("Can't seek in an unbuffered result set", E_USER_WARNING);            return false;        }        // rowSeek always returns NULL (drizzle extension v.0.5, API v.7)        if ($row_index >= 0 && $row_index < $this->dresult->rowCount()) {            $this->dresult->rowSeek($row_index);            return true;        }        return false;    }    /**     * Returns the number of rows in buffered result set     *     * @return int|false     */    public function numRows()    {_dlog();        if ($this->bufferMode != PMA_Drizzle::BUFFER_RESULT) {            trigger_error("Can't count rows in an unbuffered result set", E_USER_WARNING);            return false;        }        return $this->dresult->rowCount();    }    /**     * Returns the number of rows affected by query     *     * @return int|false     */    public function affectedRows()    {_dlog();        return $this->dresult->affectedRows();    }    /**     * Frees resources taken by this result     */    public function free()    {_dlog();        unset($this->columns);        unset($this->columnNames);        drizzle_result_free($this->dresult);        unset($this->dresult);    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/common.inc.php';// Cross-framing protectionif ( false === $GLOBALS['cfg']['AllowThirdPartyFraming']) {    echo PMA_includeJS('cross_framing_protection.js');}// generate title (unless we already have $page_title, from cookie auth)if (! isset($page_title)) {    if ($GLOBALS['server'] > 0) {        $title = PMA_expandUserString(            ! empty($GLOBALS['table']) ? $GLOBALS['cfg']['TitleTable'] :            (! empty($GLOBALS['db']) ? $GLOBALS['cfg']['TitleDatabase'] :            (! empty($GLOBALS['cfg']['Server']['host']) ? $GLOBALS['cfg']['TitleServer'] :            $GLOBALS['cfg']['TitleDefault']))        );    }} else {    $title = $page_title;}// here, the function does not exist with this configuration: $cfg['ServerDefault'] = 0;$is_superuser    = function_exists('PMA_isSuperuser') && PMA_isSuperuser();$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'jquery/jquery.qtip-1.0.0-rc3.js';$params = array('lang' => $GLOBALS['lang']);if (isset($GLOBALS['db'])) {    $params['db'] = $GLOBALS['db'];}$GLOBALS['js_include'][] = 'messages.php' . PMA_generate_common_url($params);// Append the theme id to this url to invalidate the cache on a theme change$GLOBALS['js_include'][] = 'get_image.js.php?theme=' . urlencode($_SESSION['PMA_Theme']->getId());/** * Here we add a timestamp when loading the file, so that users who * upgrade phpMyAdmin are not stuck with older .js files in their * browser cache. This produces an HTTP 304 request for each file. */// avoid loading twice a js file$GLOBALS['js_include'] = array_unique($GLOBALS['js_include']);foreach ($GLOBALS['js_include'] as $js_script_file) {    echo PMA_includeJS($js_script_file);}// Below javascript Updates the title of the frameset if possible?><script type="text/javascript">// <![CDATA[if (typeof(parent.document) != 'undefined' && typeof(parent.document) != 'unknown'    && typeof(parent.document.title) == 'string') {    parent.document.title = '<?php echo (isset($title) ? PMA_sanitize(PMA_escapeJsString(htmlspecialchars($title))) : ''); ?>';}<?phpif (count($GLOBALS['js_script']) > 0) {    echo implode("\n", $GLOBALS['js_script'])."\n";}foreach ($GLOBALS['js_events'] as $js_event) {    echo "$(window.parent).bind('" . $js_event['event'] . "', "        . $js_event['function'] . ");\n";}?>// ]]></script><?php// Reloads the navigation frame via JavaScript if requiredPMA_reloadNavigation();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package     BLOBStreaming *//** * Initializes PBMS database * * @return bool */function initPBMSDatabase(){    // If no other choice then try this.    $query = "create database IF NOT EXISTS pbms;";    /*     * The user may not have privileges to create the 'pbms' database     * so if it doesn't exist then we perform a select on a pbms system     * table in an already existing database which will cause the PBMS     * daemon to create the 'pbms' database.     */    $db_array = PMA_DBI_fetch_result('SHOW DATABASES;');    if (! empty($db_array)) {        $target = "";        foreach ($db_array as $current_db) {            if ($current_db == 'pbms') {                return true;            }            if ($target == "") {                if ($current_db != 'pbxt'                    && ! PMA_is_system_schema($current_db, true)                ) {                    $target = $current_db;                }            }        }        if ($target != "") {            // If it exists this table will not contain much            $query = "select * from $target.pbms_metadata_header";        }    }    $result = PMA_DBI_query($query);    if (! $result) {        return false;    }    return true;}/** * checks whether the necessary plugins for BLOBStreaming exist * * @access  public * @return  boolean*/function checkBLOBStreamingPlugins(){    if (PMA_cacheGet('skip_blobstreaming', true) === true) {        return false;    }    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    // return if unable to load PMA configuration    if (empty($PMA_Config)) {        return false;    }    // If we don't know that we can skip blobstreaming, we continue    // verifications; anyway, in case we won't skip blobstreaming,    // we still need to set some variables in non-persistent settings,    // which is done via $PMA_Config->set().    /** Retrieve current server configuration;     *  at this point, $PMA_Config->get('Servers') contains the server parameters     *  as explicitely defined in config.inc.php, so it cannot be used; it's     *  better to use $GLOBALS['cfg']['Server'] which contains the explicit     *  parameters merged with the default ones     *     */    $serverCfg = $GLOBALS['cfg']['Server'];    // return if unable to retrieve current server configuration    if (! $serverCfg) {        return false;    }    // if PHP extension in use is 'mysql', specify element 'PersistentConnections'    if ($serverCfg['extension'] == "mysql") {        $serverCfg['PersistentConnections'] = $PMA_Config->settings['PersistentConnections'];    }    // if connection type is TCP, unload socket variable    if (strtolower($serverCfg['connect_type']) == "tcp") {        $serverCfg['socket'] = "";    }    $has_blobstreaming = PMA_cacheGet('has_blobstreaming', true);    if ($has_blobstreaming === null) {        if (! PMA_DRIZZLE && PMA_MYSQL_INT_VERSION >= 50109) {            // Retrieve MySQL plugins            $existing_plugins = PMA_DBI_fetch_result('SHOW PLUGINS');            foreach ($existing_plugins as $one_existing_plugin) {                // check if required plugins exist                if ( strtolower($one_existing_plugin['Library']) == 'libpbms.so'                    && $one_existing_plugin['Status'] == "ACTIVE"                ) {                    $has_blobstreaming = true;                    break;                }            }            unset($existing_plugins, $one_existing_plugin);        } else if (PMA_DRIZZLE) {            $has_blobstreaming = (bool) PMA_DBI_fetch_result(                "SELECT 1                FROM data_dictionary.plugins                WHERE module_name = 'PBMS'                    AND is_active = true                LIMIT 1"            );        }        PMA_cacheSet('has_blobstreaming', $has_blobstreaming, true);    }    // set variable indicating BS plugin existence    $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', $has_blobstreaming);    if (! $has_blobstreaming) {        PMA_cacheSet('skip_blobstreaming', true, true);        return false;    }    if ($has_blobstreaming) {        $bs_variables = PMA_BS_GetVariables();        // if no BS variables exist, set plugin existence to false and return        if (count($bs_variables) == 0) {            $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', false);            PMA_cacheSet('skip_blobstreaming', true, true);            PMA_cacheSet('has_blobstreaming', false, true);            return false;        } // end if (count($bs_variables) <= 0)        // Check that the required pbms functions exist:        if (function_exists("pbms_connect") == false            || function_exists("pbms_error") == false            || function_exists("pbms_close") == false            || function_exists("pbms_is_blob_reference") == false            || function_exists("pbms_get_info") == false            || function_exists("pbms_get_metadata_value") == false            || function_exists("pbms_add_metadata") == false            || function_exists("pbms_read_stream") == false        ) {            // We should probably notify the user that they need to install            // the pbms client lib and PHP extension to make use of blob streaming.            $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', false);            PMA_cacheSet('skip_blobstreaming', true, true);            PMA_cacheSet('has_blobstreaming', false, true);            return false;        }        if (function_exists("pbms_connection_pool_size")) {            if ( isset($PMA_Config->settings['pbms_connection_pool_size'])) {                $pool_size = $PMA_Config->settings['pbms_connection_pool_size'];                if ($pool_size == "") {                    $pool_size = 1;                }            } else {                $pool_size = 1;            }            pbms_connection_pool_size($pool_size);        }         // get BS server port        $BS_PORT = $bs_variables['pbms_port'];        // if no BS server port or 'pbms' database exists,        // set plugin existance to false and return        if ((! $BS_PORT) || (! initPBMSDatabase())) {            $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', false);            PMA_cacheSet('skip_blobstreaming', true, true);            return false;        } // end if (!$BS_PORT)        // Ping PBMS: the database doesn't need to exist for this to work.        if (pbms_connect($serverCfg['host'], $BS_PORT, "anydb") == false) {            $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', false);            PMA_cacheSet('skip_blobstreaming', true, true);            return false;        }        pbms_close();        if (function_exists("pbms_pconnect")) {            $PMA_Config->set('PBMS_PCONNECT_EXISTS', true);        } else {            $PMA_Config->set('PBMS_PCONNECT_EXISTS', false);        }        // add selected BS, CURL and fileinfo library variables to PMA configuration        $PMA_Config->set('BLOBSTREAMING_PORT', $BS_PORT);        $PMA_Config->set('BLOBSTREAMING_HOST', $serverCfg['host']);        $PMA_Config->set('BLOBSTREAMING_SERVER', $serverCfg['host'] . ':' . $BS_PORT);        $PMA_Config->set('PHP_PBMS_EXISTS', false);        $PMA_Config->set('FILEINFO_EXISTS', false);        // check if PECL's fileinfo library exist        $finfo = null;        if (function_exists("finfo_open")) {            $finfo = finfo_open(FILEINFO_MIME);        }        // fileinfo library exists, set necessary variable and close resource        if (! empty($finfo)) {            $PMA_Config->set('FILEINFO_EXISTS', true);            finfo_close($finfo);        } // end if (!empty($finfo))    } else {        PMA_cacheSet('skip_blobstreaming', true, true);        return false;    } // end if ($has_blobstreaming)    return true;}/** * returns a list of BLOBStreaming variables used by MySQL * * @access  public * @return  array - list of BLOBStreaming variables */function PMA_BS_GetVariables(){    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    // return if unable to load PMA configuration    if (empty($PMA_Config)) {        return null;    }    // run query to retrieve BS variables    $query = "SHOW VARIABLES LIKE '%pbms%'";    $result = PMA_DBI_query($query);    $BS_Variables = array();    // while there are records to retrieve    while ($data = @PMA_DBI_fetch_assoc($result)) {        $BS_Variables[$data['Variable_name']] = $data['Value'];    }    // return BS variables    return $BS_Variables;}/** * Retrieves and shows PBMS error. * * @param sting $msg error message * * @return nothing */function PMA_BS_ReportPBMSError($msg){    $tmp_err = pbms_error();    PMA_showMessage(__('PBMS error') . " $msg $tmp_err");}/** * Tries to connect to PBMS server. * * @param string $db_name Database name * @param bool   $quiet   Whether to report errors * * @return bool Connection status. */function PMA_do_connect($db_name, $quiet){    $PMA_Config = $GLOBALS['PMA_Config'];    // return if unable to load PMA configuration    if (empty($PMA_Config)) {        return false;    }    // generate bs reference link    $pbms_host = $PMA_Config->get('BLOBSTREAMING_HOST');    $pbms_port = $PMA_Config->get('BLOBSTREAMING_PORT');    if ($PMA_Config->get('PBMS_PCONNECT_EXISTS')) {        // Open a persistent connection.        $ok = pbms_pconnect($pbms_host, $pbms_port, $db_name);    } else {        $ok = pbms_connect($pbms_host, $pbms_port, $db_name);    }    if ($ok == false) {        if ($quiet == false) {            PMA_BS_ReportPBMSError(                __('PBMS connection failed:')                . " pbms_connect($pbms_host, $pbms_port, $db_name)"            );        }        return false;    }    return true;}/** * Disconnects from PBMS server. * * @return nothing */function PMA_do_disconnect(){    pbms_close();}/** * Checks whether the BLOB reference looks valid * * @param string $bs_reference BLOB reference * @param string $db_name      Database name * * @return bool True on success. */function PMA_BS_IsPBMSReference($bs_reference, $db_name){    if (PMA_cacheGet('skip_blobstreaming', true)) {        return false;    }    // You do not really need a connection to the PBMS Daemon    // to check if a reference looks valid but unfortunalty the API    // requires one at this point so until the API is updated    // we need to epen one here. If you use pool connections this    // will not be a performance problem.    if (PMA_do_connect($db_name, false) == false) {        return false;    }    $ok = pbms_is_blob_reference($bs_reference);    return $ok ;}//------------function PMA_BS_CreateReferenceLink($bs_reference, $db_name){    if (PMA_do_connect($db_name, false) == false) {        return __('Error');    }    if (pbms_get_info(trim($bs_reference)) == false) {        PMA_BS_ReportPBMSError(            __('PBMS get BLOB info failed:')            . " pbms_get_info($bs_reference)"        );        PMA_do_disconnect();        return __('Error');    }    $content_type = pbms_get_metadata_value("Content-Type");    if ($content_type == false) {        $br = trim($bs_reference);        PMA_BS_ReportPBMSError(            "PMA_BS_CreateReferenceLink('$br', '$db_name'): "            . __('PBMS get BLOB Content-Type failed')        );    }    PMA_do_disconnect();    if (! $content_type) {        $content_type = "image/jpeg";    }    $bs_url = PMA_BS_getURL($bs_reference);    if (empty($bs_url)) {        PMA_BS_ReportPBMSError(__('No blob streaming server configured!'));        return 'Error';    }    $output = $content_type;    // specify custom HTML for various content types    switch ($content_type) {    // no content specified    case null:        $output = "NULL";        break;    // image content    case 'image/jpeg':    case 'image/png':        $output .= ' (<a href="' . $bs_url . '" target="new">'            . __('View image') . '</a>)';        break;    // audio content    case 'audio/mpeg':        $output .= ' (<a href="#" onclick="popupBSMedia(\''            . PMA_generate_common_url() . '\',\'' . urlencode($bs_reference)            . '\', \'' . urlencode($content_type) . '\','            . ($is_custom_type ? 1 : 0) . ', 640, 120)">' . __('Play audio')            . '</a>)';        break;    // video content    case 'application/x-flash-video':    case 'video/mpeg':        $output .= ' (<a href="#" onclick="popupBSMedia(\''            . PMA_generate_common_url() . '\',\'' . urlencode($bs_reference)            . '\', \'' . urlencode($content_type) . '\','            . ($is_custom_type ? 1 : 0) . ', 640, 480)">' . __('View video')            . '</a>)';        break;    // unsupported content. specify download    default:        $output .= ' (<a href="' . $bs_url . '" target="new">'            . __('Download file') . '</a>)';    }    return $output;}/** * In the future there may be server variables to turn on/off PBMS * BLOB streaming on a per table or database basis. So in anticipation of this * PMA_BS_IsTablePBMSEnabled() passes in the table and database name even though * they are not currently needed. * * @param string $db_name  database name * @param string $tbl_name table name * @param string $tbl_type table type * * @return bool */function PMA_BS_IsTablePBMSEnabled($db_name, $tbl_name, $tbl_type){    if (PMA_cacheGet('skip_blobstreaming', true)) {        return false;    }    if ((isset($tbl_type) == false) || (strlen($tbl_type) == 0)) {        return false;    }    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    // return if unable to load PMA configuration    if (empty($PMA_Config)) {        return false;    }    if (! $PMA_Config->get('BLOBSTREAMING_PLUGINS_EXIST')) {        return false;    }    // This information should be cached rather than selecting it each time.    // $query = "SELECT count(*)  FROM information_schema.TABLES T,    // pbms.pbms_enabled E where T.table_schema = ". PMA_backquote($db_name) . "    // and T.table_name = ". PMA_backquote($tbl_name) . " and T.engine = E.name";    $query = "SELECT count(*)  FROM pbms.pbms_enabled E where E.name = '"        . PMA_sqlAddSlashes($tbl_type) . "'";    $result = PMA_DBI_query($query);    $data = PMA_DBI_fetch_row($result);    if ($data[0] == 1) {        return true;    }    return false;}//------------function PMA_BS_UpLoadFile($db_name, $tbl_name, $file_type, $file_name){    if (PMA_cacheGet('skip_blobstreaming', true)) {        return false;    }    if (PMA_do_connect($db_name, false) == false) {        return false;    }    $fh = fopen($file_name, 'r');    if (! $fh) {        PMA_do_disconnect();        PMA_showMessage(sprintf(__('Could not open file: %s'), $file_name));        return false;    }    pbms_add_metadata("Content-Type", $file_type);    $pbms_blob_url = pbms_read_stream($fh, filesize($file_name), $tbl_name);    if (! $pbms_blob_url) {        PMA_BS_ReportPBMSError("pbms_read_stream()");    }    fclose($fh);    PMA_do_disconnect();    return $pbms_blob_url;}//------------function PMA_BS_SetContentType($db_name, $bsTable, $blobReference, $contentType){    if (PMA_cacheGet('skip_blobstreaming', true)) {        return false;    }    // This is a really ugly way to do this but currently there is nothing better.    // In a future version of PBMS the system tables will be redesigned to make this    // more efficient.    $query = "SELECT Repository_id, Repo_blob_offset FROM pbms_reference"        . " WHERE Blob_url='" . PMA_sqlAddSlashes($blobReference) . "'";    //error_log(" PMA_BS_SetContentType: $query\n", 3, "/tmp/mylog");    $result = PMA_DBI_query($query);    //error_log(" $query\n", 3, "/tmp/mylog");    // if record exists    if ($data = PMA_DBI_fetch_assoc($result)) {        $where = "WHERE Repository_id=" . $data['Repository_id']           . " AND Repo_blob_offset=" . $data['Repo_blob_offset'] ;        $query = "SELECT name from  pbms_metadata $where";        $result = PMA_DBI_query($query);        if (PMA_DBI_num_rows($result) == 0) {            $query = "INSERT into pbms_metadata Values( ". $data['Repository_id']                . ", " . $data['Repo_blob_offset']  . ", 'Content_type', '"                . PMA_sqlAddSlashes($contentType)  . "')";        } else {            $query = "UPDATE pbms_metadata SET name = 'Content_type', Value = '"                . PMA_sqlAddSlashes($contentType) . "' $where";        }        //error_log("$query\n", 3, "/tmp/mylog");        PMA_DBI_query($query);    } else {        return false;    }    return true;}//------------function PMA_BS_IsHiddenTable($table){    if ($table === 'pbms_repository'        || $table === 'pbms_reference'        || $table === 'pbms_metadata'        || $table === 'pbms_metadata_header'        || $table === 'pbms_dump'    ) {        return true;    }    return false;}//------------function PMA_BS_getURL($reference){    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    if (empty($PMA_Config)) {        return false;    }    // retrieve BS server variables from PMA configuration    $bs_server = $PMA_Config->get('BLOBSTREAMING_SERVER');    if (empty($bs_server)) {        return false;    }    $bs_url = PMA_linkURL('http://' . $bs_server . '/' . rtrim($reference));    return $bs_url;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form edit view * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/form_processing.lib.php';require './libraries/config/setup.forms.php';$formset_id = filter_input(INPUT_GET, 'formset');$mode = filter_input(INPUT_GET, 'mode');if (! isset($forms[$formset_id])) {    die(__('Incorrect formset, check $formsets array in setup/frames/form.inc.php'));}if (isset($GLOBALS['strConfigFormset_' . $formset_id])) {    echo '<h2>' . $GLOBALS['strConfigFormset_' . $formset_id] . '</h2>';}$form_display = new FormDisplay();foreach ($forms[$formset_id] as $form_name => $form) {    $form_display->registerForm($form_name, $form);}process_formset($form_display);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * SQL Parser Matching Data * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * This data is used by the SQL Parser to recognize keywords * * It has been extracted from the lex.h file in the MySQL BK tree * (around 4.0.2) as well as the MySQL documentation. * * It's easier to use only uppercase for proper sorting. In case of * doubt, use the test case to verify. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}if (! isset($GLOBALS['sql_delimiter'])) {        $GLOBALS['sql_delimiter'] = ';';}/** * @global array MySQL function names */$PMA_SQPdata_function_name = array (    'ABS',    'ACOS',    'ADDDATE',    'ADDTIME',    'AES_DECRYPT',    'AES_ENCRYPT',    'AREA',                     // Area() polygon-property-functions.html    'ASBINARY',                 // AsBinary()    'ASCII',    'ASIN',    'ASTEXT',                   // AsText()    'ATAN',    'ATAN2',    'AVG',    'BDMPOLYFROMTEXT',          // BdMPolyFromText()    'BDMPOLYFROMWKB',           // BdMPolyFromWKB()    'BDPOLYFROMTEXT',           // BdPolyFromText()    'BDPOLYFROMWKB',            // BdPolyFromWKB()    'BENCHMARK',    'BIN',    'BIT_AND',    'BIT_COUNT',    'BIT_LENGTH',    'BIT_OR',    'BIT_XOR',                  // group-by-functions.html    'BOUNDARY',                 // Boundary() general-geometry-property-functions.html    'BUFFER',                   // Buffer()    'CAST',    'CEIL',    'CEILING',    'CENTROID',                 // Centroid() multipolygon-property-functions.html    'CHAR',                     // string-functions.html    'CHARACTER_LENGTH',    'CHARSET',                  // information-functions.html    'CHAR_LENGTH',    'COALESCE',    'COERCIBILITY',             // information-functions.html    'COLLATION',                // information-functions.html    'COMPRESS',                 // string-functions.html    'CONCAT',    'CONCAT_WS',    'CONNECTION_ID',    'CONTAINS',                 // Contains()    'CONV',    'CONVERT',    'CONVERT_TZ',    'CONVEXHULL',               // ConvexHull()    'COS',    'COT',    'COUNT',    'CRC32',                    // mathematical-functions.html    'CROSSES',                  // Crosses()    'CURDATE',    'CURRENT_DATE',    'CURRENT_TIME',    'CURRENT_TIMESTAMP',    'CURRENT_USER',    'CURTIME',    'DATABASE',    'DATE',                     // date-and-time-functions.html    'DATEDIFF',                 // date-and-time-functions.html    'DATE_ADD',    'DATE_DIFF',    'DATE_FORMAT',    'DATE_SUB',    'DAY',    'DAYNAME',    'DAYOFMONTH',    'DAYOFWEEK',    'DAYOFYEAR',    'DECODE',    'DEFAULT',                  // miscellaneous-functions.html    'DEGREES',    'DES_DECRYPT',    'DES_ENCRYPT',    'DIFFERENCE',               // Difference()    'DIMENSION',                // Dimension() general-geometry-property-functions.html    'DISJOINT',                 // Disjoint()    'DISTANCE',                 // Distance()    'ELT',    'ENCODE',    'ENCRYPT',    'ENDPOINT',                 // EndPoint() linestring-property-functions.html    'ENVELOPE',                 // Envelope() general-geometry-property-functions.html    'EQUALS',                   // Equals()    'EXP',    'EXPORT_SET',    'EXTERIORRING',             // ExteriorRing() polygon-property-functions.html    'EXTRACT',    'EXTRACTVALUE',             // ExtractValue() xml-functions.html    'FIELD',    'FIND_IN_SET',    'FLOOR',    'FORMAT',    'FOUND_ROWS',    'FROM_DAYS',    'FROM_UNIXTIME',    'GEOMCOLLFROMTEXT',         // GeomCollFromText()    'GEOMCOLLFROMWKB',          // GeomCollFromWKB()    'GEOMETRYCOLLECTION',       // GeometryCollection()    'GEOMETRYCOLLECTIONFROMTEXT',   // GeometryCollectionFromText()    'GEOMETRYCOLLECTIONFROMWKB',    // GeometryCollectionFromWKB()    'GEOMETRYFROMTEXT',         // GeometryFromText()    'GEOMETRYFROMWKB',          // GeometryFromWKB()    'GEOMETRYN',                // GeometryN() geometrycollection-property-functions.html    'GEOMETRYTYPE',             // GeometryType() general-geometry-property-functions.html    'GEOMFROMTEXT',             // GeomFromText()    'GEOMFROMWKB',              // GeomFromWKB()    'GET_FORMAT',    'GET_LOCK',    'GLENGTH',                  // GLength() linestring-property-functions.html    'GREATEST',    'GROUP_CONCAT',    'GROUP_UNIQUE_USERS',    'HEX',    'HOUR',    'IF',                       //control-flow-functions.html    'IFNULL',    'INET_ATON',    'INET_NTOA',    'INSERT',                   // string-functions.html    'INSTR',    'INTERIORRINGN',            // InteriorRingN() polygon-property-functions.html    'INTERSECTION',             // Intersection()    'INTERSECTS',               // Intersects()    'INTERVAL',    'ISCLOSED',                 // IsClosed() multilinestring-property-functions.html    'ISEMPTY',                  // IsEmpty() general-geometry-property-functions.html    'ISNULL',    'ISRING',                   // IsRing() linestring-property-functions.html    'ISSIMPLE',                 // IsSimple() general-geometry-property-functions.html    'IS_FREE_LOCK',    'IS_USED_LOCK',             // miscellaneous-functions.html    'LAST_DAY',    'LAST_INSERT_ID',    'LCASE',    'LEAST',    'LEFT',    'LENGTH',    'LINEFROMTEXT',             // LineFromText()    'LINEFROMWKB',              // LineFromWKB()    'LINESTRING',               // LineString()    'LINESTRINGFROMTEXT',       // LineStringFromText()    'LINESTRINGFROMWKB',        // LineStringFromWKB()    'LN',    'LOAD_FILE',    'LOCALTIME',    'LOCALTIMESTAMP',    'LOCATE',    'LOG',    'LOG10',    'LOG2',    'LOWER',    'LPAD',    'LTRIM',    'MAKEDATE',    'MAKETIME',    'MAKE_SET',    'MASTER_POS_WAIT',    'MAX',    'MBRCONTAINS',              // MBRContains()    'MBRDISJOINT',              // MBRDisjoint()    'MBREQUAL',                 // MBREqual()    'MBRINTERSECTS',            // MBRIntersects()    'MBROVERLAPS',              // MBROverlaps()    'MBRTOUCHES',               // MBRTouches()    'MBRWITHIN',                // MBRWithin()    'MD5',    'MICROSECOND',    'MID',    'MIN',    'MINUTE',    'MLINEFROMTEXT',            // MLineFromText()    'MLINEFROMWKB',             // MLineFromWKB()    'MOD',    'MONTH',    'MONTHNAME',    'MPOINTFROMTEXT',           // MPointFromText()    'MPOINTFROMWKB',            // MPointFromWKB()    'MPOLYFROMTEXT',            // MPolyFromText()    'MPOLYFROMWKB',             // MPolyFromWKB()    'MULTILINESTRING',          // MultiLineString()    'MULTILINESTRINGFROMTEXT',  // MultiLineStringFromText()    'MULTILINESTRINGFROMWKB',   // MultiLineStringFromWKB()    'MULTIPOINT',               // MultiPoint()    'MULTIPOINTFROMTEXT',       // MultiPointFromText()    'MULTIPOINTFROMWKB',        // MultiPointFromWKB()    'MULTIPOLYGON',             // MultiPolygon()    'MULTIPOLYGONFROMTEXT',     // MultiPolygonFromText()    'MULTIPOLYGONFROMWKB',      // MultiPolygonFromWKB()    'NAME_CONST',               // NAME_CONST()    'NOW',                      // NOW()    'NULLIF',    'NUMGEOMETRIES',            // NumGeometries() geometrycollection-property-functions.html    'NUMINTERIORRINGS',         // NumInteriorRings() polygon-property-functions.html    'NUMPOINTS',                // NumPoints() linestring-property-functions.html    'OCT',    'OCTET_LENGTH',    'OLD_PASSWORD',    'ORD',    'OVERLAPS',                 // Overlaps()    'PASSWORD',    'PERIOD_ADD',    'PERIOD_DIFF',    'PI',    'POINT',                    // Point()    'POINTFROMTEXT',            // PointFromText()    'POINTFROMWKB',             // PointFromWKB()    'POINTN',                   // PointN() inestring-property-functions.html    'POINTONSURFACE',           // PointOnSurface() multipolygon-property-functions.html    'POLYFROMTEXT',             // PolyFromText()    'POLYFROMWKB',              // PolyFromWKB()    'POLYGON',                  // Polygon()    'POLYGONFROMTEXT',          // PolygonFromText()    'POLYGONFROMWKB',           // PolygonFromWKB()    'POSITION',    'POW',    'POWER',    'QUARTER',    'QUOTE',    'RADIANS',    'RAND',    'RELATED',                  // Related()    'RELEASE_LOCK',    'REPEAT',    'REPLACE',                  // string-functions.html    'REVERSE',    'RIGHT',    'ROUND',    'ROW_COUNT',                // information-functions.html    'RPAD',    'RTRIM',    'SCHEMA',                   // information-functions.html    'SECOND',    'SEC_TO_TIME',    'SESSION_USER',    'SHA',    'SHA1',    'SIGN',    'SIN',    'SLEEP',                    // miscellaneous-functions.html    'SOUNDEX',    'SPACE',    'SQRT',    'SRID',                     // general-geometry-property-functions.html    'STARTPOINT',               // StartPoint() linestring-property-functions.html    'STD',    'STDDEV',    'STDDEV_POP',               // group-by-functions.html    'STDDEV_SAMP',              // group-by-functions.html    'STRCMP',    'STR_TO_DATE',    'SUBDATE',    'SUBSTR',    'SUBSTRING',    'SUBSTRING_INDEX',    'SUBTIME',    'SUM',    'SYMDIFFERENCE',            // SymDifference()    'SYSDATE',    'SYSTEM_USER',    'TAN',    'TIME',    'TIMEDIFF',    'TIMESTAMP',    'TIMESTAMPADD',    'TIMESTAMPDIFF',    'TIME_FORMAT',    'TIME_TO_SEC',    'TOUCHES',                  // Touches()    'TO_DAYS',    'TRIM',    'TRUNCATE',                 // mathematical-functions.html    'UCASE',    'UNCOMPRESS',               // string-functions.html    'UNCOMPRESSED_LENGTH',      // string-functions.html    'UNHEX',                    // string-functions.html    'UNIQUE_USERS',    'UNIX_TIMESTAMP',    'UPDATEXML',                // UpdateXML() xml-functions.html    'UPPER',    'USER',    'UTC_DATE',    'UTC_TIME',    'UTC_TIMESTAMP',    'UUID',                     // miscellaneous-functions.html    'VARIANCE',                 // group-by-functions.html    'VAR_POP',                  // group-by-functions.html    'VAR_SAMP',                 // group-by-functions.html    'VERSION',    'WEEK',    'WEEKDAY',    'WEEKOFYEAR',    'WITHIN',                   // Within()    'X',                        // point-property-functions.html    'Y',                        // point-property-functions.html    'YEAR',    'YEARWEEK');/** * @global array MySQL attributes */$PMA_SQPdata_column_attrib = array (    'ARCHIVE',          // Engine    'ASCII',    'AUTO_INCREMENT',    'BDB',              // Engine    'BERKELEYDB',       // Engine alias BDB    'BINARY',    'BLACKHOLE',        // Engine    'CSV',              // Engine    'DEFAULT',    'EXAMPLE',          // Engine    'FEDERATED',        // Engine    'HEAP',             // Engine    'INNOBASE',         // Engine alias InnoDB    'INNODB',           // Engine InnoDB    'ISAM',             // Engine    'MARIA',            // Engine    'MEMORY',           // Engine alias HEAP, but preferred    'MERGE',            // Engine    'MRG_ISAM',         // Engine    'MRG_MYISAM',       // Engine alias MERGE    'MYISAM',           // Engine MyISAM    'NATIONAL',    'NDB',              // Engine alias NDBCLUSTER    'NDBCLUSTER',       // Engine    'PRECISION',    'UNDEFINED',    'UNICODE',    'UNSIGNED',    'VARYING',    'ZEROFILL');/** * words that are reserved by MySQL and may not be used as identifiers without quotes * * @see http://dev.mysql.com/doc/refman/5.5/en/reserved-words.html * * @global array MySQL reserved words */$PMA_SQPdata_reserved_word = array (    'ACCESSIBLE',       // 5.1    'ACTION',    'ADD',    'AFTER',    'AGAINST',    'AGGREGATE',    'ALGORITHM',    'ALL',    'ALTER',    'ANALYSE',    'ANALYZE',    'AND',    'AS',    'ASC',    'AUTOCOMMIT',    'AUTO_INCREMENT',    'AVG_ROW_LENGTH',    'BACKUP',    'BEGIN',    'BETWEEN',    'BINLOG',    'BOTH',    'BY',    'CASCADE',    'CASE',    'CHANGE',    'CHANGED',    'CHARSET',    'CHECK',    'CHECKSUM',    'COLLATE',    'COLLATION',    'COLUMN',    'COLUMNS',    'COMMENT',    'COMMIT',    'COMMITTED',    'COMPRESSED',    'CONCURRENT',    'CONSTRAINT',    'CONTAINS',    'CONVERT',    'CREATE',    'CROSS',    'CURRENT_TIMESTAMP',    'DATABASE',    'DATABASES',    'DAY',    'DAY_HOUR',    'DAY_MINUTE',    'DAY_SECOND',    'DECLARE',    'DEFINER',    'DELAYED',    'DELAY_KEY_WRITE',    'DELETE',    'DESC',    'DESCRIBE',    'DETERMINISTIC',    'DISTINCT',    'DISTINCTROW',    'DIV',    'DO',    'DROP',    'DUMPFILE',    'DUPLICATE',    'DYNAMIC',    'ELSE',    'ENCLOSED',    'END',    'ENGINE',    'ENGINES',    'ESCAPE',    'ESCAPED',    'EVENTS',    'EXECUTE',    'EXISTS',    'EXPLAIN',    'EXTENDED',    'FALSE',    'FAST',    'FIELDS',    'FILE',    'FIRST',    'FIXED',    'FLUSH',    'FOR',    'FORCE',    'FOREIGN',    'FROM',    'FULL',    'FULLTEXT',    'FUNCTION',    'GEMINI',    'GEMINI_SPIN_RETRIES',    'GENERAL',    'GLOBAL',    'GRANT',    'GRANTS',    'GROUP',    'HAVING',    'HEAP',    'HIGH_PRIORITY',    'HOSTS',    'HOUR',    'HOUR_MINUTE',    'HOUR_SECOND',    'IDENTIFIED',    'IF',    'IGNORE',    'IGNORE_SERVER_IDS',    'IN',    'INDEX',    'INDEXES',    'INFILE',    'INNER',    'INSERT',    'INSERT_ID',    'INSERT_METHOD',    'INTERVAL',    'INTO',    'INVOKER',    'IS',    'ISOLATION',    'JOIN',    'KEY',    'KEYS',    'KILL',    'LAST_INSERT_ID',    'LEADING',    'LEFT',    'LIKE',    'LIMIT',    'LINEAR',               // 5.1    'LINES',    'LOAD',    'LOCAL',    'LOCK',    'LOCKS',    'LOGS',    'LOW_PRIORITY',    'MARIA',                // 5.1 ?    'MASTER_CONNECT_RETRY',    'MASTER_HEARTBEAT_PERIOD',    'MASTER_HOST',    'MASTER_LOG_FILE',    'MASTER_LOG_POS',    'MASTER_PASSWORD',    'MASTER_PORT',    'MASTER_USER',    'MATCH',    'MAXVALUE',    'MAX_CONNECTIONS_PER_HOUR',    'MAX_QUERIES_PER_HOUR',    'MAX_ROWS',    'MAX_UPDATES_PER_HOUR',    'MAX_USER_CONNECTIONS',    'MEDIUM',    'MERGE',    'MINUTE',    'MINUTE_SECOND',    'MIN_ROWS',    'MODE',    'MODIFY',    'MONTH',    'MRG_MYISAM',    'MYISAM',    'NAMES',    'NATURAL',    // 'NO' is not allowed in SQL-99 but is allowed in MySQL    //'NO',    'NOT',    'NULL',    'OFFSET',    'ON',    'OPEN',    'OPTIMIZE',    'OPTION',    'OPTIONALLY',    'OR',    'ORDER',    'OUTER',    'OUTFILE',    'PACK_KEYS',    'PAGE',                 // 5.1-maria ?    'PAGE_CHECKSUM',        // 5.1    'PARTIAL',    'PARTITION',            // 5.1    'PARTITIONS',           // 5.1    'PASSWORD',    'PRIMARY',    'PRIVILEGES',    'PROCEDURE',    'PROCESS',    'PROCESSLIST',    'PURGE',    'QUICK',    'RAID0',    'RAID_CHUNKS',    'RAID_CHUNKSIZE',    'RAID_TYPE',    'RANGE',                // 5.1    'READ',    'READ_ONLY',            // 5.1    'READ_WRITE',           // 5.1    'REFERENCES',    'REGEXP',    'RELOAD',    'RENAME',    'REPAIR',    'REPEATABLE',    'REPLACE',    'REPLICATION',    'RESET',    'RESIGNAL',    'RESTORE',    'RESTRICT',    'RETURN',    'RETURNS',    'REVOKE',    'RIGHT',    'RLIKE',    'ROLLBACK',    'ROW',    'ROWS',    'ROW_FORMAT',    'SECOND',    'SECURITY',    'SELECT',    'SEPARATOR',    'SERIALIZABLE',    'SESSION',    'SHARE',    'SHOW',    'SHUTDOWN',    'SIGNAL',    'SLAVE',    'SLOW',    'SONAME',    'SOUNDS',                   // string-functions.html    'SQL',    'SQL_AUTO_IS_NULL',    'SQL_BIG_RESULT',    'SQL_BIG_SELECTS',    'SQL_BIG_TABLES',    'SQL_BUFFER_RESULT',    'SQL_CACHE',    'SQL_CALC_FOUND_ROWS',    'SQL_LOG_BIN',    'SQL_LOG_OFF',    'SQL_LOG_UPDATE',    'SQL_LOW_PRIORITY_UPDATES',    'SQL_MAX_JOIN_SIZE',    'SQL_NO_CACHE',    'SQL_QUOTE_SHOW_CREATE',    'SQL_SAFE_UPDATES',    'SQL_SELECT_LIMIT',    'SQL_SLAVE_SKIP_COUNTER',    'SQL_SMALL_RESULT',    'SQL_WARNINGS',    'START',    'STARTING',    'STATUS',    'STOP',    'STORAGE',    'STRAIGHT_JOIN',    'STRING',    'STRIPED',    'SUPER',    'TABLE',    'TABLES',    'TEMPORARY',    'TERMINATED',    'THEN',    'TO',    'TRAILING',    'TRANSACTIONAL',    // 5.1 ?    'TRUE',    'TRUNCATE',    'TYPE',    'TYPES',    'UNCOMMITTED',    'UNION',    'UNIQUE',    'UNLOCK',    'UPDATE',    'USAGE',    'USE',    'USING',    'VALUES',    'VARIABLES',    'VIEW',    'WHEN',    'WHERE',    'WITH',    'WORK',    'WRITE',    'XOR',    'YEAR_MONTH');/** * words forbidden to be used as column or table name wihtout quotes * as seen in http://dev.mysql.com/doc/mysql/en/reserved-words.html * * @global array MySQL forbidden words */$PMA_SQPdata_forbidden_word = array (    'ACCESSIBLE',       // 5.1    'ACTION',    'ADD',    'AFTER',    'AGAINST',    'AGGREGATE',    'ALGORITHM',    'ALL',    'ALTER',    'ANALYZE',    'AND',    'ANY',    'AS',    'ASC',    'ASCII',    'ASENSITIVE',    'AUTO_INCREMENT',    'AVG',    'AVG_ROW_LENGTH',    'BACKUP',    'BDB',    'BEFORE',    'BEGIN',    'BERKELEYDB',    'BETWEEN',    'BIGINT',    'BINARY',    'BINLOG',    'BIT',    'BLOB',    'BOOL',    'BOOLEAN',    'BOTH',    'BTREE',    'BY',    'BYTE',    'CACHE',    'CALL',    'CASCADE',    'CASCADED',    'CASE',    'CHAIN',    'CHANGE',    'CHANGED',    'CHAR',    'CHARACTER',    'CHARSET',    'CHECK',    'CHECKSUM',    'CIPHER',    'CLOSE',    'COLLATE',    'COLLATION',    'COLUMN',    'COLUMNS',    'COMMENT',    'COMMIT',    'COMMITTED',    'COMPACT',    'COMPRESSED',    'CONCURRENT',    'CONDITION',    'CONNECTION',    'CONSISTENT',    'CONSTRAINT',    'CONTAINS',    'CONTINUE',    'CONVERT',    'CREATE',    'CROSS',    'CUBE',    'CURRENT_DATE',    'CURRENT_TIME',    'CURRENT_TIMESTAMP',    'CURRENT_USER',    'CURSOR',    'DATA',    'DATABASE',    'DATABASES',    'DATE',    'DATETIME',    'DAY',    'DAY_HOUR',    'DAY_MICROSECOND',    'DAY_MINUTE',    'DAY_SECOND',    'DEALLOCATE',    'DEC',    'DECIMAL',    'DECLARE',    'DEFAULT',    'DEFINER',    'DELAYED',    'DELAY_KEY_WRITE',    'DELETE',    'DESC',    'DESCRIBE',    'DES_KEY_FILE',    'DETERMINISTIC',    'DIRECTORY',    'DISABLE',    'DISCARD',    'DISTINCT',    'DISTINCTROW',    'DIV',    'DO',    'DOUBLE',    'DROP',    'DUAL',    'DUMPFILE',    'DUPLICATE',    'DYNAMIC',    'EACH',    'ELSE',    'ELSEIF',    'ENABLE',    'ENCLOSED',    'END',    'ENGINE',    'ENGINES',    'ENUM',    'ERRORS',    'ESCAPE',    'ESCAPED',    'EVENTS',    'EXECUTE',    'EXISTS',    'EXIT',    'EXPANSION',    'EXPLAIN',    'EXTENDED',    'FALSE',    'FAST',    'FETCH',    'FIELDS',    'FILE',    'FIRST',    'FIXED',    'FLOAT',    'FLOAT4',    'FLOAT8',    'FLUSH',    'FOR',    'FORCE',    'FOREIGN',    'FOUND',    'FRAC_SECOND',    'FROM',    'FULL',    'FULLTEXT',    'FUNCTION',    'GEOMETRY',    'GEOMETRYCOLLECTION',    'GET_FORMAT',    'GLOBAL',    'GOTO',    'GRANT',    'GRANTS',    'GROUP',    'HANDLER',    'HASH',    'HAVING',    'HELP',    'HIGH_PRIORITY',    'HOSTS',    'HOUR',    'HOUR_MICROSECOND',    'HOUR_MINUTE',    'HOUR_SECOND',    'IDENTIFIED',    'IF',    'IGNORE',    'IMPORT',    'IN',    'INDEX',    'INDEXES',    'INFILE',    'INNER',    'INNOBASE',    'INNODB',    'INOUT',    'INSENSITIVE',    'INSERT',    'INSERT_METHOD',    'INT',    'INT1',    'INT2',    'INT3',    'INT4',    'INT8',    'INTEGER',    'INTERVAL',    'INTO',    'INVOKER',    'IO_THREAD',    'IS',    'ISOLATION',    'ISSUER',    'ITERATE',    'JOIN',    'KEY',    'KEYS',    'KILL',    'LABEL',    'LANGUAGE',    'LAST',    'LEADING',    'LEAVE',    'LEAVES',    'LEFT',    'LIKE',    'LIMIT',    'LINEAR',               // 5.1    'LINES',    'LINESTRING',    'LOAD',    'LOCAL',    'LOCALTIME',    'LOCALTIMESTAMP',    'LOCK',    'LOCKS',    'LOGS',    'LONG',    'LONGBLOB',    'LONGTEXT',    'LOOP',    'LOW_PRIORITY',    'MASTER',    'MASTER_CONNECT_RETRY',    'MASTER_HOST',    'MASTER_LOG_FILE',    'MASTER_LOG_POS',    'MASTER_PASSWORD',    'MASTER_PORT',    'MASTER_SERVER_ID',    'MASTER_SSL',    'MASTER_SSL_CA',    'MASTER_SSL_CAPATH',    'MASTER_SSL_CERT',    'MASTER_SSL_CIPHER',    'MASTER_SSL_KEY',    'MASTER_USER',    'MATCH',    'MAX_CONNECTIONS_PER_HOUR',    'MAX_QUERIES_PER_HOUR',    'MAX_ROWS',    'MAX_UPDATES_PER_HOUR',    'MAX_USER_CONNECTIONS',    'MEDIUM',    'MEDIUMBLOB',    'MEDIUMINT',    'MEDIUMTEXT',    'MERGE',    'MICROSECOND',    'MIDDLEINT',    'MIGRATE',    'MINUTE',    'MINUTE_MICROSECOND',    'MINUTE_SECOND',    'MIN_ROWS',    'MOD',    'MODE',    'MODIFIES',    'MODIFY',    'MONTH',    'MULTILINESTRING',    'MULTIPOINT',    'MULTIPOLYGON',    'MUTEX',    'NAME',    'NAMES',    'NATIONAL',    'NATURAL',    'NCHAR',    'NDB',    'NDBCLUSTER',    'NEW',    'NEXT',    'NO',    'NONE',    'NOT',    'NO_WRITE_TO_BINLOG',    'NULL',    'NUMERIC',    'NVARCHAR',    'OFFSET',    'OLD_PASSWORD',    'ON',    'ONE',    'ONE_SHOT',    'OPEN',    'OPTIMIZE',    'OPTION',    'OPTIONALLY',    'OR',    'ORDER',    'OUT',    'OUTER',    'OUTFILE',    'PACK_KEYS',    'PARTIAL',    'PASSWORD',    'PHASE',    'POINT',    'POLYGON',    'PRECISION',    'PREPARE',    'PREV',    'PRIMARY',    'PRIVILEGES',    'PROCEDURE',    'PROCESSLIST',    'PURGE',    'QUARTER',    'QUERY',    'QUICK',    'RAID0',    'RAID_CHUNKS',    'RAID_CHUNKSIZE',    'RAID_TYPE',    'RANGE',                // 5.1    'READ',    'READS',    'READ_ONLY',            // 5.1    'READ_WRITE',           // 5.1    'REAL',    'RECOVER',    'REDUNDANT',    'REFERENCES',    'REGEXP',    'RELAY_LOG_FILE',    'RELAY_LOG_POS',    'RELAY_THREAD',    'RELEASE',    'RELOAD',    'RENAME',    'REPAIR',    'REPEAT',    'REPEATABLE',    'REPLACE',    'REPLICATION',    'REQUIRE',    'RESET',    'RESTORE',    'RESTRICT',    'RESUME',    'RETURN',    'RETURNS',    'REVOKE',    'RIGHT',    'RLIKE',    'ROLLBACK',    'ROLLUP',    'ROUTINE',    'ROW',    'ROWS',    'ROW_FORMAT',    'RTREE',    'SAVEPOINT',    'SCHEMA',    'SCHEMAS',    'SECOND',    'SECOND_MICROSECOND',    'SECURITY',    'SELECT',    'SENSITIVE',    'SEPARATOR',    'SERIAL',    'SERIALIZABLE',    'SESSION',    'SET',    'SHARE',    'SHOW',    'SHUTDOWN',    'SIGNED',    'SIMPLE',    'SLAVE',    'SMALLINT',    'SNAPSHOT',    'SOME',    'SONAME',    'SOUNDS',    'SPATIAL',    'SPECIFIC',    'SQL',    'SQLEXCEPTION',    'SQLSTATE',    'SQLWARNING',    'SQL_BIG_RESULT',    'SQL_BUFFER_RESULT',    'SQL_CACHE',    'SQL_CALC_FOUND_ROWS',    'SQL_NO_CACHE',    'SQL_SMALL_RESULT',    'SQL_THREAD',    'SQL_TSI_DAY',    'SQL_TSI_FRAC_SECOND',    'SQL_TSI_HOUR',    'SQL_TSI_MINUTE',    'SQL_TSI_MONTH',    'SQL_TSI_QUARTER',    'SQL_TSI_SECOND',    'SQL_TSI_WEEK',    'SQL_TSI_YEAR',    'SSL',    'START',    'STARTING',    'STATUS',    'STOP',    'STORAGE',    'STRAIGHT_JOIN',    'STRING',    'STRIPED',    'SUBJECT',    'SUPER',    'SUSPEND',    'TABLE',    'TABLES',    'TABLESPACE',    'TEMPORARY',    'TEMPTABLE',    'TERMINATED',    'TEXT',    'THEN',    'TIME',    'TIMESTAMP',    'TIMESTAMPADD',    'TIMESTAMPDIFF',    'TINYBLOB',    'TINYINT',    'TINYTEXT',    'TO',    'TRAILING',    'TRANSACTION',    'TRIGGER',    'TRIGGERS',    'TRUE',    'TRUNCATE',    'TYPE',    'TYPES',    'UNCOMMITTED',    'UNDEFINED',    'UNDO',    'UNICODE',    'UNION',    'UNIQUE',    'UNKNOWN',    'UNLOCK',    'UNSIGNED',    'UNTIL',    'UPDATE',    'USAGE',    'USE',    'USER',    'USER_RESOURCES',    'USE_FRM',    'USING',    'UTC_DATE',    'UTC_TIME',    'UTC_TIMESTAMP',    'VALUE',    'VALUES',    'VARBINARY',    'VARCHAR',    'VARCHARACTER',    'VARIABLES',    'VARYING',    'VIEW',    'WARNINGS',    'WEEK',    'WHEN',    'WHERE',    'WHILE',    'WITH',    'WORK',    'WRITE',    'X509',    'XA',    'XOR',    'YEAR',    'YEAR_MONTH',    'ZEROFILL');/** * the MySQL column/data types * * @see http://dev.mysql.com/doc/refman/5.1/en/data-types.html * @see http://dev.mysql.com/doc/refman/5.1/en/mysql-spatial-datatypes.html * * @global array MySQL column types */$PMA_SQPdata_column_type = array (    'BIGINT',    'BINARY',    'BIT',    'BLOB',    'BOOL',    'BOOLEAN',              // numeric-type-overview.html    'CHAR',    'CHARACTER',    'DATE',    'DATETIME',    'DEC',    'DECIMAL',    'DOUBLE',    'ENUM',    'FLOAT',    'FLOAT4',    'FLOAT8',    'GEOMETRY',             // spatial    'GEOMETRYCOLLECTION',   // spatial    'INT',    'INT1',    'INT2',    'INT3',    'INT4',    'INT8',    'INTEGER',    'LINESTRING',           // spatial    'LONG',    'LONGBLOB',    'LONGTEXT',    'MEDIUMBLOB',    'MEDIUMINT',    'MEDIUMTEXT',    'MIDDLEINT',    'MULTILINESTRING',      // spatial    'MULTIPOINT',           // spatial    'MULTIPOLYGON',         // spatial    'NCHAR',    'NUMERIC',    'POINT',                // spatial    'POLYGON',              // spatial    'REAL',    'SERIAL',               // alias for BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY    'SET',    'SMALLINT',    'TEXT',    'TIME',    'TIMESTAMP',    'TINYBLOB',    'TINYINT',    'TINYTEXT',    'VARBINARY',    'VARCHAR',    'YEAR');/** * Documentation links for operators. */$PMA_SQPdata_operators_docs = array(   '!=' => array('link' => 'comparison-operators','anchor' => 'operator_not-equal'),   '<>' => array('link' => 'comparison-operators','anchor' => 'operator_not-equal'),   '!' => array('link' => 'logical-operators','anchor' => 'operator_not'),   '||' => array('link' => 'logical-operators','anchor' => 'operator_or'),   '+' => array('link' => 'arithmetic-functions','anchor' => 'operator_plus'),   '>>' => array('link' => 'bit-functions','anchor' => 'operator_right-shift'),   '-' => array('link' => 'arithmetic-functions','anchor' => 'operator_minus'),   '*' => array('link' => 'arithmetic-functions','anchor' => 'operator_times'),   '&&' => array('link' => 'logical-operators','anchor' => 'operator_and'),   '&' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-and'),   '~' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-invert'),   '|' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-or'),   '^' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-xor'),   '=' => array('link' => 'assignment-operators','anchor' => 'operator_assign-equal'),   ':=' => array('link' => 'assignment-operators','anchor' => 'operator_assign-value'),   '/' => array('link' => 'arithmetic-functions','anchor' => 'operator_divide'),   '<=>' => array('link' => 'comparison-operators','anchor' => 'operator_equal-to'),   '=' => array('link' => 'comparison-operators','anchor' => 'operator_equal'),   '>=' => array('link' => 'comparison-operators','anchor' => 'operator_greater-than-or-equal'),   '>' => array('link' => 'comparison-operators','anchor' => 'operator_greater-than'),   '<<' => array('link' => 'bit-functions','anchor' => 'operator_left-shift'),   '<=' => array('link' => 'comparison-operators','anchor' => 'operator_less-than-or-equal'),   '<' => array('link' => 'comparison-operators','anchor' => 'operator_less-than'),   '%' => array('link' => 'arithmetic-functions','anchor' => 'operator_mod'));/** * Documentation links for functions. */$PMA_SQPdata_functions_docs = array(   'ABS' => array('link' => 'mathematical-functions','anchor' => 'function_abs'),   'ACOS' => array('link' => 'mathematical-functions','anchor' => 'function_acos'),   'ADDDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_adddate'),   'ADDTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_addtime'),   'AES_DECRYPT' => array('link' => 'encryption-functions','anchor' => 'function_aes_decrypt'),   'AES_ENCRYPT' => array('link' => 'encryption-functions','anchor' => 'function_aes_encrypt'),   'AND' => array('link' => 'logical-operators','anchor' => 'operator_and'),   'ASCII' => array('link' => 'string-functions','anchor' => 'function_ascii'),   'ASIN' => array('link' => 'mathematical-functions','anchor' => 'function_asin'),   'ATAN2' => array('link' => 'mathematical-functions','anchor' => 'function_atan2'),   'ATAN' => array('link' => 'mathematical-functions','anchor' => 'function_atan2'),   'ATAN' => array('link' => 'mathematical-functions','anchor' => 'function_atan'),   'AVG' => array('link' => 'group-by-functions','anchor' => 'function_avg'),   'BENCHMARK' => array('link' => 'information-functions','anchor' => 'function_benchmark'),   'BIN' => array('link' => 'string-functions','anchor' => 'function_bin'),   'BINARY' => array('link' => 'cast-functions','anchor' => 'operator_binary'),   'BIT_AND' => array('link' => 'group-by-functions','anchor' => 'function_bit_and'),   'BIT_COUNT' => array('link' => 'bit-functions','anchor' => 'function_bit_count'),   'BIT_LENGTH' => array('link' => 'string-functions','anchor' => 'function_bit_length'),   'BIT_OR' => array('link' => 'group-by-functions','anchor' => 'function_bit_or'),   'BIT_XOR' => array('link' => 'group-by-functions','anchor' => 'function_bit_xor'),   'CASE' => array('link' => 'control-flow-functions','anchor' => 'operator_case'),   'CAST' => array('link' => 'cast-functions','anchor' => 'function_cast'),   'CEIL' => array('link' => 'mathematical-functions','anchor' => 'function_ceil'),   'CEILING' => array('link' => 'mathematical-functions','anchor' => 'function_ceiling'),   'CHAR_LENGTH' => array('link' => 'string-functions','anchor' => 'function_char_length'),   'CHAR' => array('link' => 'string-functions','anchor' => 'function_char'),   'CHARACTER_LENGTH' => array('link' => 'string-functions','anchor' => 'function_character_length'),   'CHARSET' => array('link' => 'information-functions','anchor' => 'function_charset'),   'COALESCE' => array('link' => 'comparison-operators','anchor' => 'function_coalesce'),   'COERCIBILITY' => array('link' => 'information-functions','anchor' => 'function_coercibility'),   'COLLATION' => array('link' => 'information-functions','anchor' => 'function_collation'),   'COMPRESS' => array('link' => 'encryption-functions','anchor' => 'function_compress'),   'CONCAT_WS' => array('link' => 'string-functions','anchor' => 'function_concat_ws'),   'CONCAT' => array('link' => 'string-functions','anchor' => 'function_concat'),   'CONNECTION_ID' => array('link' => 'information-functions','anchor' => 'function_connection_id'),   'CONV' => array('link' => 'mathematical-functions','anchor' => 'function_conv'),   'CONVERT_TZ' => array('link' => 'date-and-time-functions','anchor' => 'function_convert_tz'),   'Convert' => array('link' => 'cast-functions','anchor' => 'function_convert'),   'COS' => array('link' => 'mathematical-functions','anchor' => 'function_cos'),   'COT' => array('link' => 'mathematical-functions','anchor' => 'function_cot'),   'COUNT' => array('link' => 'group-by-functions','anchor' => 'function_count'),   'CRC32' => array('link' => 'mathematical-functions','anchor' => 'function_crc32'),   'CURDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_curdate'),   'CURRENT_DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_current_date'),   'CURRENT_TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_current_time'),   'CURRENT_TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_current_timestamp'),   'CURRENT_USER' => array('link' => 'information-functions','anchor' => 'function_current_user'),   'CURTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_curtime'),   'DATABASE' => array('link' => 'information-functions','anchor' => 'function_database'),   'DATE_ADD' => array('link' => 'date-and-time-functions','anchor' => 'function_date_add'),   'DATE_FORMAT' => array('link' => 'date-and-time-functions','anchor' => 'function_date_format'),   'DATE_SUB' => array('link' => 'date-and-time-functions','anchor' => 'function_date_sub'),   'DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_date'),   'DATEDIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_datediff'),   'DAY' => array('link' => 'date-and-time-functions','anchor' => 'function_day'),   'DAYNAME' => array('link' => 'date-and-time-functions','anchor' => 'function_dayname'),   'DAYOFMONTH' => array('link' => 'date-and-time-functions','anchor' => 'function_dayofmonth'),   'DAYOFWEEK' => array('link' => 'date-and-time-functions','anchor' => 'function_dayofweek'),   'DAYOFYEAR' => array('link' => 'date-and-time-functions','anchor' => 'function_dayofyear'),   'DECLARE' => array('link' => 'declare', 'anchor' => 'declare'),   'DECODE' => array('link' => 'encryption-functions','anchor' => 'function_decode'),   'DEFAULT' => array('link' => 'miscellaneous-functions','anchor' => 'function_default'),   'DEGREES' => array('link' => 'mathematical-functions','anchor' => 'function_degrees'),   'DES_DECRYPT' => array('link' => 'encryption-functions','anchor' => 'function_des_decrypt'),   'DES_ENCRYPT' => array('link' => 'encryption-functions','anchor' => 'function_des_encrypt'),   'DIV' => array('link' => 'arithmetic-functions','anchor' => 'operator_div'),   'ELT' => array('link' => 'string-functions','anchor' => 'function_elt'),   'ENCODE' => array('link' => 'encryption-functions','anchor' => 'function_encode'),   'ENCRYPT' => array('link' => 'encryption-functions','anchor' => 'function_encrypt'),   'EXP' => array('link' => 'mathematical-functions','anchor' => 'function_exp'),   'EXPORT_SET' => array('link' => 'string-functions','anchor' => 'function_export_set'),   'EXTRACT' => array('link' => 'date-and-time-functions','anchor' => 'function_extract'),   'ExtractValue' => array('link' => 'xml-functions','anchor' => 'function_extractvalue'),   'FIELD' => array('link' => 'string-functions','anchor' => 'function_field'),   'FIND_IN_SET' => array('link' => 'string-functions','anchor' => 'function_find_in_set'),   'FLOOR' => array('link' => 'mathematical-functions','anchor' => 'function_floor'),   'FORMAT' => array('link' => 'string-functions','anchor' => 'function_format'),   'FOUND_ROWS' => array('link' => 'information-functions','anchor' => 'function_found_rows'),   'FROM_DAYS' => array('link' => 'date-and-time-functions','anchor' => 'function_from_days'),   'FROM_UNIXTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_from_unixtime'),   'GET_FORMAT' => array('link' => 'date-and-time-functions','anchor' => 'function_get_format'),   'GET_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_get_lock'),   'GREATEST' => array('link' => 'comparison-operators','anchor' => 'function_greatest'),   'GROUP_CONCAT' => array('link' => 'group-by-functions','anchor' => 'function_group_concat'),   'HEX' => array('link' => 'string-functions','anchor' => 'function_hex'),   'HOUR' => array('link' => 'date-and-time-functions','anchor' => 'function_hour'),   'IF' => array('link' => 'control-flow-functions','anchor' => 'function_if'),   'IFNULL' => array('link' => 'control-flow-functions','anchor' => 'function_ifnull'),   'IN' => array('link' => 'comparison-operators','anchor' => 'function_in'),   'INET_ATON' => array('link' => 'miscellaneous-functions','anchor' => 'function_inet_aton'),   'INET_NTOA' => array('link' => 'miscellaneous-functions','anchor' => 'function_inet_ntoa'),   'INSERT' => array('link' => 'string-functions','anchor' => 'function_insert'),   'INSTR' => array('link' => 'string-functions','anchor' => 'function_instr'),   'INTERVAL' => array('link' => 'comparison-operators','anchor' => 'function_interval'),   'IS_FREE_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_is_free_lock'),   'IS_USED_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_is_used_lock'),   'IS' => array('link' => 'comparison-operators','anchor' => 'operator_is'),   'ISNULL' => array('link' => 'comparison-operators','anchor' => 'function_isnull'),   'LAST_DAY' => array('link' => 'date-and-time-functions','anchor' => 'function_last_day'),   'LAST_INSERT_ID' => array('link' => 'information-functions','anchor' => 'function_last_insert_id'),   'LCASE' => array('link' => 'string-functions','anchor' => 'function_lcase'),   'LEAST' => array('link' => 'comparison-operators','anchor' => 'function_least'),   'LEFT' => array('link' => 'string-functions','anchor' => 'function_left'),   'LENGTH' => array('link' => 'string-functions','anchor' => 'function_length'),   'LIKE' => array('link' => 'string-comparison-functions','anchor' => 'operator_like'),   'LN' => array('link' => 'mathematical-functions','anchor' => 'function_ln'),   'LOAD_FILE' => array('link' => 'string-functions','anchor' => 'function_load_file'),   'LOCALTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_localtime'),   'LOCALTIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_localtimestamp'),   'LOCATE' => array('link' => 'string-functions','anchor' => 'function_locate'),   'LOG10' => array('link' => 'mathematical-functions','anchor' => 'function_log10'),   'LOG2' => array('link' => 'mathematical-functions','anchor' => 'function_log2'),   'LOG' => array('link' => 'mathematical-functions','anchor' => 'function_log'),   'LOWER' => array('link' => 'string-functions','anchor' => 'function_lower'),   'LPAD' => array('link' => 'string-functions','anchor' => 'function_lpad'),   'LTRIM' => array('link' => 'string-functions','anchor' => 'function_ltrim'),   'MAKE_SET' => array('link' => 'string-functions','anchor' => 'function_make_set'),   'MAKEDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_makedate'),   'MAKETIME' => array('link' => 'date-and-time-functions','anchor' => 'function_maketime'),   'MASTER_POS_WAIT' => array('link' => 'miscellaneous-functions','anchor' => 'function_master_pos_wait'),   'MATCH' => array('link' => 'fulltext-search','anchor' => 'function_match'),   'MAX' => array('link' => 'group-by-functions','anchor' => 'function_max'),   'MD5' => array('link' => 'encryption-functions','anchor' => 'function_md5'),   'MICROSECOND' => array('link' => 'date-and-time-functions','anchor' => 'function_microsecond'),   'MID' => array('link' => 'string-functions','anchor' => 'function_mid'),   'MIN' => array('link' => 'group-by-functions','anchor' => 'function_min'),   'MINUTE' => array('link' => 'date-and-time-functions','anchor' => 'function_minute'),   'MOD' => array('link' => 'mathematical-functions','anchor' => 'function_mod'),   'MONTH' => array('link' => 'date-and-time-functions','anchor' => 'function_month'),   'MONTHNAME' => array('link' => 'date-and-time-functions','anchor' => 'function_monthname'),   'NAME_CONST' => array('link' => 'miscellaneous-functions','anchor' => 'function_name_const'),   'NOT' => array('link' => 'logical-operators','anchor' => 'operator_not'),   'NOW' => array('link' => 'date-and-time-functions','anchor' => 'function_now'),   'NULLIF' => array('link' => 'control-flow-functions','anchor' => 'function_nullif'),   'OCT' => array('link' => 'mathematical-functions','anchor' => 'function_oct'),   'OCTET_LENGTH' => array('link' => 'string-functions','anchor' => 'function_octet_length'),   'OLD_PASSWORD' => array('link' => 'encryption-functions','anchor' => 'function_old_password'),   'OR' => array('link' => 'logical-operators','anchor' => 'operator_or'),   'ORD' => array('link' => 'string-functions','anchor' => 'function_ord'),   'PASSWORD' => array('link' => 'encryption-functions','anchor' => 'function_password'),   'PERIOD_ADD' => array('link' => 'date-and-time-functions','anchor' => 'function_period_add'),   'PERIOD_DIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_period_diff'),   'PI' => array('link' => 'mathematical-functions','anchor' => 'function_pi'),   'POSITION' => array('link' => 'string-functions','anchor' => 'function_position'),   'POW' => array('link' => 'mathematical-functions','anchor' => 'function_pow'),   'POWER' => array('link' => 'mathematical-functions','anchor' => 'function_power'),   'QUARTER' => array('link' => 'date-and-time-functions','anchor' => 'function_quarter'),   'QUOTE' => array('link' => 'string-functions','anchor' => 'function_quote'),   'RADIANS' => array('link' => 'mathematical-functions','anchor' => 'function_radians'),   'RAND' => array('link' => 'mathematical-functions','anchor' => 'function_rand'),   'REGEXP' => array('link' => 'regexp','anchor' => 'operator_regexp'),   'RELEASE_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_release_lock'),   'REPEAT' => array('link' => 'string-functions','anchor' => 'function_repeat'),   'REPLACE' => array('link' => 'string-functions','anchor' => 'function_replace'),   'REVERSE' => array('link' => 'string-functions','anchor' => 'function_reverse'),   'RIGHT' => array('link' => 'string-functions','anchor' => 'function_right'),   'RLIKE' => array('link' => 'regexp','anchor' => 'operator_rlike'),   'ROUND' => array('link' => 'mathematical-functions','anchor' => 'function_round'),   'ROW_COUNT' => array('link' => 'information-functions','anchor' => 'function_row_count'),   'RPAD' => array('link' => 'string-functions','anchor' => 'function_rpad'),   'RTRIM' => array('link' => 'string-functions','anchor' => 'function_rtrim'),   'SCHEMA' => array('link' => 'information-functions','anchor' => 'function_schema'),   'SEC_TO_TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_sec_to_time'),   'SECOND' => array('link' => 'date-and-time-functions','anchor' => 'function_second'),   'SESSION_USER' => array('link' => 'information-functions','anchor' => 'function_session_user'),   'SHA' => array('link' => 'encryption-functions','anchor' => 'function_sha1'),   'SHA1' => array('link' => 'encryption-functions','anchor' => 'function_sha1'),   'SIGN' => array('link' => 'mathematical-functions','anchor' => 'function_sign'),   'SIN' => array('link' => 'mathematical-functions','anchor' => 'function_sin'),   'SLEEP' => array('link' => 'miscellaneous-functions','anchor' => 'function_sleep'),   'SOUNDEX' => array('link' => 'string-functions','anchor' => 'function_soundex'),   'SPACE' => array('link' => 'string-functions','anchor' => 'function_space'),   'SQRT' => array('link' => 'mathematical-functions','anchor' => 'function_sqrt'),   'STD' => array('link' => 'group-by-functions','anchor' => 'function_std'),   'STDDEV_POP' => array('link' => 'group-by-functions','anchor' => 'function_stddev_pop'),   'STDDEV_SAMP' => array('link' => 'group-by-functions','anchor' => 'function_stddev_samp'),   'STDDEV' => array('link' => 'group-by-functions','anchor' => 'function_stddev'),   'STR_TO_DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_str_to_date'),   'STRCMP' => array('link' => 'string-comparison-functions','anchor' => 'function_strcmp'),   'SUBDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_subdate'),   'SUBSTR' => array('link' => 'string-functions','anchor' => 'function_substr'),   'SUBSTRING_INDEX' => array('link' => 'string-functions','anchor' => 'function_substring_index'),   'SUBSTRING' => array('link' => 'string-functions','anchor' => 'function_substring'),   'SUBTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_subtime'),   'SUM' => array('link' => 'group-by-functions','anchor' => 'function_sum'),   'SYSDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_sysdate'),   'SYSTEM_USER' => array('link' => 'information-functions','anchor' => 'function_system_user'),   'TAN' => array('link' => 'mathematical-functions','anchor' => 'function_tan'),   'TIME_FORMAT' => array('link' => 'date-and-time-functions','anchor' => 'function_time_format'),   'TIME_TO_SEC' => array('link' => 'date-and-time-functions','anchor' => 'function_time_to_sec'),   'TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_time'),   'TIMEDIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_timediff'),   'TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_timestamp'),   'TIMESTAMPADD' => array('link' => 'date-and-time-functions','anchor' => 'function_timestampadd'),   'TIMESTAMPDIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_timestampdiff'),   'TO_DAYS' => array('link' => 'date-and-time-functions','anchor' => 'function_to_days'),   'TRIM' => array('link' => 'string-functions','anchor' => 'function_trim'),   'TRUNCATE' => array('link' => 'mathematical-functions','anchor' => 'function_truncate'),   'UCASE' => array('link' => 'string-functions','anchor' => 'function_ucase'),   'UNCOMPRESS' => array('link' => 'encryption-functions','anchor' => 'function_uncompress'),   'UNCOMPRESSED_LENGTH' => array('link' => 'encryption-functions','anchor' => 'function_uncompressed_length'),   'UNHEX' => array('link' => 'string-functions','anchor' => 'function_unhex'),   'UNIX_TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_unix_timestamp'),   'UpdateXML' => array('link' => 'xml-functions','anchor' => 'function_updatexml'),   'UPPER' => array('link' => 'string-functions','anchor' => 'function_upper'),   'USER' => array('link' => 'information-functions','anchor' => 'function_user'),   'UTC_DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_utc_date'),   'UTC_TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_utc_time'),   'UTC_TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_utc_timestamp'),   'UUID_SHORT' => array('link' => 'miscellaneous-functions','anchor' => 'function_uuid_short'),   'UUID' => array('link' => 'miscellaneous-functions','anchor' => 'function_uuid'),   'VALUES' => array('link' => 'miscellaneous-functions','anchor' => 'function_values'),   'VAR_POP' => array('link' => 'group-by-functions','anchor' => 'function_var_pop'),   'VAR_SAMP' => array('link' => 'group-by-functions','anchor' => 'function_var_samp'),   'VARIANCE' => array('link' => 'group-by-functions','anchor' => 'function_variance'),   'VERSION' => array('link' => 'information-functions','anchor' => 'function_version'),   'WEEK' => array('link' => 'date-and-time-functions','anchor' => 'function_week'),   'WEEKDAY' => array('link' => 'date-and-time-functions','anchor' => 'function_weekday'),   'WEEKOFYEAR' => array('link' => 'date-and-time-functions','anchor' => 'function_weekofyear'),   'XOR' => array('link' => 'logical-operators','anchor' => 'operator_xor'),   'YEAR' => array('link' => 'date-and-time-functions','anchor' => 'function_year'),   'YEARWEEK' => array('link' => 'date-and-time-functions','anchor' => 'function_yearweek'),   'SOUNDS_LIKE' => array('link' => 'string-functions','anchor' => 'operator_sounds-like'),   'IS_NOT_NULL' => array('link' => 'comparison-operators','anchor' => 'operator_is-not-null'),   'IS_NOT' => array('link' => 'comparison-operators','anchor' => 'operator_is-not'),   'IS_NULL' => array('link' => 'comparison-operators','anchor' => 'operator_is-null'),   'NOT_LIKE' => array('link' => 'string-comparison-functions','anchor' => 'operator_not-like'),   'NOT_REGEXP' => array('link' => 'regexp','anchor' => 'operator_not-regexp'),   'COUNT_DISTINCT' => array('link' => 'group-by-functions','anchor' => 'function_count-distinct'),   'NOT_IN' => array('link' => 'comparison-operators','anchor' => 'function_not-in'));?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$die_save_pos = 0;require_once 'pmd_save_pos.php';extract($_POST, EXTR_SKIP);$tables = PMA_DBI_get_tables_full($db, $T1);$type_T1 = strtoupper($tables[$T1]['ENGINE']);$tables = PMA_DBI_get_tables_full($db, $T2);$type_T2 = strtoupper($tables[$T2]['ENGINE']);// native foreign keyif (PMA_foreignkey_supported($type_T1) && PMA_foreignkey_supported($type_T2) && $type_T1 == $type_T2) {    // relation exists?    $existrel_foreign = PMA_getForeigners($db, $T2, '', 'foreign');    if (isset($existrel_foreign[$F2])     && isset($existrel_foreign[$F2]['constraint'])) {         PMD_return_new(0, __('Error: relation already exists.'));    }// note: in InnoDB, the index does not requires to be on a PRIMARY// or UNIQUE key// improve: check all other requirements for InnoDB relations    $result      = PMA_DBI_query('SHOW INDEX FROM ' . PMA_backquote($T1) . ';');    $index_array1   = array(); // will be use to emphasis prim. keys in the table view    while ($row = PMA_DBI_fetch_assoc($result))        $index_array1[$row['Column_name']] = 1;    PMA_DBI_free_result($result);    $result     = PMA_DBI_query('SHOW INDEX FROM ' . PMA_backquote($T2) . ';');    $index_array2  = array(); // will be used to emphasis prim. keys in the table view    while ($row = PMA_DBI_fetch_assoc($result))        $index_array2[$row['Column_name']] = 1;    PMA_DBI_free_result($result);    if (! empty($index_array1[$F1]) && ! empty($index_array2[$F2])) {        $upd_query  = 'ALTER TABLE ' . PMA_backquote($T2)                 . ' ADD FOREIGN KEY ('                 . PMA_backquote($F2) . ')'                 . ' REFERENCES '                 . PMA_backquote($db) . '.'                 . PMA_backquote($T1) . '('                 . PMA_backquote($F1) . ')';        if ($on_delete != 'nix') {            $upd_query   .= ' ON DELETE ' . $on_delete;        }        if ($on_update != 'nix') {            $upd_query   .= ' ON UPDATE ' . $on_update;        }        PMA_DBI_try_query($upd_query) or PMD_return_new(0, __('Error: Relation not added.'));    PMD_return_new(1, __('FOREIGN KEY relation added'));    }// internal (pmadb) relation} else {    if ($GLOBALS['cfgRelation']['relwork'] == false) {        PMD_return_new(0, _('General relation features') . ':' . _('Disabled'));    } else {        // no need to recheck if the keys are primary or unique at this point,        // this was checked on the interface part        $q  = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation'])                            . '(master_db, master_table, master_field, foreign_db, foreign_table, foreign_field)'                            . ' values('                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($T2) . '\', '                            . '\'' . PMA_sqlAddSlashes($F2) . '\', '                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($T1) . '\','                            . '\'' . PMA_sqlAddSlashes($F1) . '\')';        if (PMA_query_as_controluser($q, false, PMA_DBI_QUERY_STORE)) {            PMD_return_new(1, __('Internal relation added'));        } else {            PMD_return_new(0, __('Error: Relation not added.'));        }   }}function PMD_return_new($b,$ret){    global $db,$T1,$F1,$T2,$F2;    header("Content-Type: text/xml; charset=utf-8");    header("Cache-Control: no-cache");    die('<root act="relation_new" return="'.$ret.'" b="'.$b.    '" DB1="'.urlencode($db).    '" T1="'.urlencode($T1).    '" F1="'.urlencode($F1).    '" DB2="'.urlencode($db).    '" T2="'.urlencode($T2).    '" F2="'.urlencode($F2).    '"></root>');}?>
<?php/*   Copyright (c) 2003, 2005, 2006, 2009 Danilo Segan <danilo@kvota.net>.   This file is part of PHP-gettext.   PHP-gettext is free software; you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation; either version 2 of the License, or   (at your option) any later version.   PHP-gettext is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   GNU General Public License for more details.   You should have received a copy of the GNU General Public License   along with PHP-gettext; if not, write to the Free Software   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA*/  // Simple class to wrap file streams, string streams, etc.  // seek is essential, and it should be byte streamclass StreamReader {  // should return a string [FIXME: perhaps return array of bytes?]  function read($bytes) {    return false;  }  // should return new position  function seekto($position) {    return false;  }  // returns current position  function currentpos() {    return false;  }  // returns length of entire stream (limit for seekto()s)  function length() {    return false;  }};class StringReader {  var $_pos;  var $_str;  function StringReader($str='') {    $this->_str = $str;    $this->_pos = 0;  }  function read($bytes) {    $data = substr($this->_str, $this->_pos, $bytes);    $this->_pos += $bytes;    if (strlen($this->_str)<$this->_pos)      $this->_pos = strlen($this->_str);    return $data;  }  function seekto($pos) {    $this->_pos = $pos;    if (strlen($this->_str)<$this->_pos)      $this->_pos = strlen($this->_str);    return $this->_pos;  }  function currentpos() {    return $this->_pos;  }  function length() {    return strlen($this->_str);  }};class FileReader {  var $_pos;  var $_fd;  var $_length;  function FileReader($filename) {    if (file_exists($filename)) {      $this->_length=filesize($filename);      $this->_pos = 0;      $this->_fd = fopen($filename,'rb');      if (!$this->_fd) {        $this->error = 3; // Cannot read file, probably permissions        return false;      }    } else {      $this->error = 2; // File doesn't exist      return false;    }  }  function read($bytes) {    if ($bytes) {      fseek($this->_fd, $this->_pos);      // PHP 5.1.1 does not read more than 8192 bytes in one fread()      // the discussions at PHP Bugs suggest it's the intended behaviour      $data = '';      while ($bytes > 0) {        $chunk  = fread($this->_fd, $bytes);        $data  .= $chunk;        $bytes -= strlen($chunk);      }      $this->_pos = ftell($this->_fd);      return $data;    } else return '';  }  function seekto($pos) {    fseek($this->_fd, $pos);    $this->_pos = ftell($this->_fd);    return $this->_pos;  }  function currentpos() {    return $this->_pos;  }  function length() {    return $this->_length;  }  function close() {    fclose($this->_fd);  }};// Preloads entire file in memory first, then creates a StringReader// over it (it assumes knowledge of StringReader internals)class CachedFileReader extends StringReader {  function CachedFileReader($filename) {    if (file_exists($filename)) {      $length=filesize($filename);      $fd = fopen($filename,'rb');      if (!$fd) {        $this->error = 3; // Cannot read file, probably permissions        return false;      }      $this->_str = fread($fd, $length);      fclose($fd);    } else {      $this->error = 2; // File doesn't exist      return false;    }  }};?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$table = $T;$display_field = $F;if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);    if ($disp) {        if ($display_field != $disp) {            $upd_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' SET display_field = \'' . PMA_sqlAddSlashes($display_field) . '\''                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        } else {            $upd_query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        }    } elseif ($display_field != '') {        $upd_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                   . '(db_name, table_name, display_field) '                   . ' VALUES('                   . '\'' . PMA_sqlAddSlashes($db) . '\','                   . '\'' . PMA_sqlAddSlashes($table) . '\','                   . '\'' . PMA_sqlAddSlashes($display_field) . '\')';    }    if (isset($upd_query)) {        $upd_rs    = PMA_query_as_controluser($upd_query);    }} // end ifheader("Content-Type: text/xml; charset=utf-8");header("Cache-Control: no-cache");die("<root act='save_pos' return=__('Modifications have been saved')></root>");?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_application_octetstream__download_info(){    return array(        'info' =>  __('Displays a link to download the binary data of the column. You can use the first option to specify the filename, or use the second option as the name of a column which contains the filename. If you use the second option, you need to set the first option to the empty string.'),        );}/** * */function PMA_transformation_application_octetstream__download(&$buffer, $options = array(), $meta = ''){    global $row, $fields_meta;    if (isset($options[0]) && !empty($options[0])) {        $cn = $options[0]; // filename    } else {        if (isset($options[1]) && !empty($options[1])) {            foreach ($fields_meta as $key => $val) {                if ($val->name == $options[1]) {                    $pos = $key;                    break;                }            }            if (isset($pos)) {                $cn = $row[$pos];            }        }        if (empty($cn)) {            $cn = 'binary_file.dat';        }    }    return      sprintf(        '<a href="transformation_wrapper.php%s&amp;ct=application/octet-stream&amp;cn=%s" title="%s">%s</a>',        $options['wrapper_link'],        urlencode($cn),        htmlspecialchars($cn),        htmlspecialchars($cn)      );}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */define('IS_TRANSFORMATION_WRAPPER', true);/** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';require_once './libraries/transformations.lib.php'; // Transformations$cfgRelation = PMA_getRelationsParam();/** * Ensures db and table are valid, else moves to the "parent" script */require_once './libraries/db_table_exists.lib.php';/** * Get the list of the fields of the current table */PMA_DBI_select_db($db);if (isset($where_clause)) {    $result      = PMA_DBI_query('SELECT * FROM ' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';', null, PMA_DBI_QUERY_STORE);    $row         = PMA_DBI_fetch_assoc($result);} else {    $result      = PMA_DBI_query('SELECT * FROM ' . PMA_backquote($table) . ' LIMIT 1;', null, PMA_DBI_QUERY_STORE);    $row         = PMA_DBI_fetch_assoc($result);}// No row returnedif (!$row) {    exit;} // end if (no record returned)$default_ct = 'application/octet-stream';if ($cfgRelation['commwork'] && $cfgRelation['mimework']) {    $mime_map = PMA_getMime($db, $table);    $mime_options = PMA_transformation_getOptions((isset($mime_map[$transform_key]['transformation_options']) ? $mime_map[$transform_key]['transformation_options'] : ''));    foreach ($mime_options AS $key => $option) {        if (substr($option, 0, 10) == '; charset=') {            $mime_options['charset'] = $option;        }    }}// For re-usability, moved http-headers and stylesheets// to a seperate file. It can now be included by libraries/header.inc.php,// querywindow.php.require_once './libraries/header_http.inc.php';// [MIME]if (isset($ct) && !empty($ct)) {    $mime_type = $ct;} else {    $mime_type = (isset($mime_map[$transform_key]['mimetype']) ? str_replace('_', '/', $mime_map[$transform_key]['mimetype']) : $default_ct) . (isset($mime_options['charset']) ? $mime_options['charset'] : '');}PMA_download_header($cn, $mime_type);if (! isset($resize)) {    echo $row[$transform_key];} else {    // if image_*__inline.inc.php finds that we can resize,    // it sets $resize to jpeg or png    $srcImage = imagecreatefromstring($row[$transform_key]);    $srcWidth = ImageSX($srcImage);    $srcHeight = ImageSY($srcImage);    // Check to see if the width > height or if width < height    // if so adjust accordingly to make sure the image    // stays smaller then the $newWidth and $newHeight    $ratioWidth = $srcWidth/$newWidth;    $ratioHeight = $srcHeight/$newHeight;    if ($ratioWidth < $ratioHeight) {        $destWidth = $srcWidth/$ratioHeight;        $destHeight = $newHeight;    } else {        $destWidth = $newWidth;        $destHeight = $srcHeight/$ratioWidth;    }    if ($resize) {        $destImage = ImageCreateTrueColor($destWidth, $destHeight);    }//    ImageCopyResized($destImage, $srcImage, 0, 0, 0, 0, $destWidth, $destHeight, $srcWidth, $srcHeight);// better quality but slower:    ImageCopyResampled($destImage, $srcImage, 0, 0, 0, 0, $destWidth, $destHeight, $srcWidth, $srcHeight);    if ($resize == 'jpeg') {        ImageJPEG($destImage, '', 75);    }    if ($resize == 'png') {        ImagePNG($destImage);    }    ImageDestroy($srcImage);    ImageDestroy($destImage);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/common.inc.php';require_once './libraries/RecentTable.class.php';/** * Add recently used table and reload the navigation. * * @param string $db Database name where the table is located. * @param string $table The table name */function PMA_addRecentTable($db, $table){    $tmp_result = PMA_RecentTable::getInstance()->add($db, $table);    if ($tmp_result === true) {        echo '<span class="hide" id="update_recent_tables"></span>';    } else {        $error = $tmp_result;        $error->display();    }}/** * This is not an Ajax request so we need to generate all this output. */if (isset($GLOBALS['is_ajax_request']) && !$GLOBALS['is_ajax_request']) {    if (empty($GLOBALS['is_header_sent'])) {        /**         * Gets a core script and starts output buffering work         */        include_once './libraries/ob.lib.php';        PMA_outBufferPre();        // if database storage for user preferences is transient, offer to load        // exported settings from localStorage (detection will be done in JavaScript)        $userprefs_offer_import = $GLOBALS['PMA_Config']->get('user_preferences') == 'session'                && ! isset($_SESSION['userprefs_autoload']);        if ($userprefs_offer_import) {            $GLOBALS['js_include'][] = 'config.js';        }        // For re-usability, moved http-headers and stylesheets        // to a seperate file. It can now be included by header.inc.php,        // querywindow.php.        include_once './libraries/header_http.inc.php';        include_once './libraries/header_meta_style.inc.php';        include_once './libraries/header_scripts.inc.php';        ?>        <meta name="OBGZip" content="<?php echo ($GLOBALS['cfg']['OBGzip'] ? 'true' : 'false'); ?>" />        <?php /* remove vertical scroll bar bug in ie */ ?>        <!--[if IE 6]>        <style type="text/css">        /* <![CDATA[ */        html {            overflow-y: scroll;        }        /* ]]> */        </style>        <![endif]-->    </head>    <body>        <?php        // Include possible custom headers        if (file_exists(CUSTOM_HEADER_FILE)) {            include CUSTOM_HEADER_FILE;        }        // message of "Cookies required" displayed for auth_type http or config        // note: here, the decoration won't work because without cookies,        // our standard CSS is not operational        if (empty($_COOKIE)) {            PMA_Message::notice(__('Cookies must be enabled past this point.'))->display();        }        // offer to load user preferences from localStorage        if ($userprefs_offer_import) {            include_once './libraries/user_preferences.lib.php';            PMA_userprefs_autoload_header();        }        if (!defined('PMA_DISPLAY_HEADING')) {            define('PMA_DISPLAY_HEADING', 1);        }        // pass configuration for hint tooltip display        // (to be used by PMA_createqTip in js/functions.js)        if (! $GLOBALS['cfg']['ShowHint']) {            echo '<span id="no_hint" class="hide"></span>';        }        /**         * Display heading if needed. Design can be set in css file.         */        if (PMA_DISPLAY_HEADING && $GLOBALS['server'] > 0) {            $server_info = (!empty($GLOBALS['cfg']['Server']['verbose'])                            ? $GLOBALS['cfg']['Server']['verbose']                            : $GLOBALS['cfg']['Server']['host'] . (empty($GLOBALS['cfg']['Server']['port'])                                                                   ? ''                                                                   : ':' . $GLOBALS['cfg']['Server']['port']                                                                  )                           );            $separator = "<span class='separator item'>&nbsp;</span>\n";            $item = '<a href="%1$s?%2$s" class="item">';                if ($GLOBALS['cfg']['NavigationBarIconic'] !== true) {                    $item .= '%4$s: ';                }                $item .= '%3$s</a>' . "\n";                echo "<div id='floating_menubar'></div>\n";                echo "<div id='serverinfo'>\n";                if ($GLOBALS['cfg']['NavigationBarIconic']) {                    echo PMA_getImage('s_host.png', '', array('class' => 'item')) . "\n";                }                printf($item,                        $GLOBALS['cfg']['DefaultTabServer'],                        PMA_generate_common_url(),                        htmlspecialchars($server_info),                        __('Server'));                if (strlen($GLOBALS['db'])) {                    echo $separator;                    if ($GLOBALS['cfg']['NavigationBarIconic']) {                        echo PMA_getImage('s_db.png', '', array('class' => 'item')) . "\n";                    }                    printf($item,                            $GLOBALS['cfg']['DefaultTabDatabase'],                            PMA_generate_common_url($GLOBALS['db']),                            htmlspecialchars($GLOBALS['db']),                            __('Database'));                    // if the table is being dropped, $_REQUEST['purge'] is set to '1'                    // so do not display the table name in upper div                    if (strlen($GLOBALS['table']) && ! (isset($_REQUEST['purge']) && $_REQUEST['purge'] == '1')) {                        include_once './libraries/tbl_info.inc.php';                        echo $separator;                        if ($GLOBALS['cfg']['NavigationBarIconic']) {                            $icon = isset($GLOBALS['tbl_is_view']) && $GLOBALS['tbl_is_view'] ? 'b_views.png' : 's_tbl.png';                            echo PMA_getImage($icon, '', array('class' => 'item')) . "\n";                        }                        printf($item,                            $GLOBALS['cfg']['DefaultTabTable'],                            PMA_generate_common_url($GLOBALS['db'], $GLOBALS['table']),                            str_replace(' ', '&nbsp;', htmlspecialchars($GLOBALS['table'])),                            (isset($GLOBALS['tbl_is_view']) && $GLOBALS['tbl_is_view'] ? __('View') : __('Table')));                        /**                         * Displays table comment                         */                        if (!empty($show_comment) && ! isset($GLOBALS['avoid_show_comment'])) {                            if (strstr($show_comment, '; InnoDB free')) {                                $show_comment = preg_replace('@; InnoDB free:.*?$@', '', $show_comment);                            }                            echo '<span class="table_comment" id="span_table_comment">'                                .'&quot;' . htmlspecialchars($show_comment)                                .'&quot;</span>' . "\n";                        } // end if                        // add recently used table and reload the navigation                        if ($GLOBALS['cfg']['LeftRecentTable'] > 0) {                            PMA_addRecentTable($GLOBALS['db'], $GLOBALS['table']);                        }                    } else {                        // no table selected, display database comment if present                        /**                         * Settings for relations stuff                         */                        include_once './libraries/relation.lib.php';                        $cfgRelation = PMA_getRelationsParam();                        // Get additional information about tables for tooltip is done                        // in libraries/db_info.inc.php only once                        if ($cfgRelation['commwork']) {                            $comment = PMA_getDbComment($GLOBALS['db']);                            /**                             * Displays table comment                             */                            if (! empty($comment)) {                                echo '<span class="table_comment"'                                    . ' id="span_table_comment">&quot;'                                    . htmlspecialchars($comment)                                    . '&quot;</span>' . "\n";                            } // end if                        }                    }                }            }            echo '<div class="clearfloat"></div>';            echo '</div>';        }        /**         * Sets a variable to remember headers have been sent         */        $GLOBALS['is_header_sent'] = true;//end if (!$GLOBALS['is_ajax_request'])} else {    if (empty($GLOBALS['is_header_sent'])) {        include_once './libraries/header_http.inc.php';        $GLOBALS['is_header_sent'] = true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handle field values (possibly uploaded from a file) * * original if-clause checked, whether input was stored in a possible * fields_upload_XX var. Now check, if the field is set. If it is empty or a * malicious file, do not alter fields contents. If an empty or invalid file is * specified, the binary data gets deleter. Maybe a nice new text-variable is * appropriate to document this behaviour. * * security cautions! You could trick the form and submit any file the * webserver has access to for upload to a binary field. Shouldn't be that easy! ;) * * default is to advance to the field-value parsing. Will only be set to * true when a binary file is uploaded, thus bypassing further manipulation of $val. * * note: grab_globals has extracted the fields from _FILES or HTTP_POST_FILES * * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * do not import request variable into global scope */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/File.class.php';$file_to_insert = new PMA_File();$file_to_insert->checkTblChangeForm($key, $rownumber);$possibly_uploaded_val = $file_to_insert->getContent();if ($file_to_insert->isError()) {    $message .= $file_to_insert->getError();}$file_to_insert->cleanUp();if (false !== $possibly_uploaded_val) {    $val = $possibly_uploaded_val;} else {    // f i e l d    v a l u e    i n    t h e    f o r m    if (isset($me_fields_type[$key])) {        $type = $me_fields_type[$key];    } else {        $type = '';    }    // $key contains the md5() of the fieldname    if ($type != 'protected' && $type != 'set' && 0 === strlen($val)) {        // best way to avoid problems in strict mode (works also in non-strict mode)        if (isset($me_auto_increment)  && isset($me_auto_increment[$key])) {            $val = 'NULL';        } else {            $val = "''";        }    } elseif ($type == 'set') {        if (! empty($_REQUEST['fields']['multi_edit'][$rownumber][$key])) {            $val = implode(',', $_REQUEST['fields']['multi_edit'][$rownumber][$key]);            $val = "'" . PMA_sqlAddSlashes($val) . "'";        } else {             $val = "''";        }    } elseif ($type == 'protected') {        // here we are in protected mode (asked in the config)        // so tbl_change has put this special value in the        // fields array, so we do not change the field value        // but we can still handle field upload        // when in UPDATE mode, do not alter field's contents. When in INSERT        // mode, insert empty field because no values were submitted. If protected        // blobs where set, insert original fields content.            if (! empty($prot_row[$me_fields_name[$key]])) {                $val = '0x' . bin2hex($prot_row[$me_fields_name[$key]]);            } else {                $val = '';            }    } elseif ($type == 'bit') {        $val = preg_replace('/[^01]/', '0', $val);        $val = "b'" . PMA_sqlAddSlashes($val) . "'";    } elseif (! (($type == 'datetime' || $type == 'timestamp') && $val == 'CURRENT_TIMESTAMP')) {        $val = "'" . PMA_sqlAddSlashes($val) . "'";    }    // Was the Null checkbox checked for this field?    // (if there is a value, we ignore the Null checkbox: this could    // be possible if Javascript is disabled in the browser)    if (! empty($me_fields_null[$key])     && ($val == "''" || $val == '')) {        $val = 'NULL';    }    // The Null checkbox was unchecked for this field    if (empty($val) && ! empty($me_fields_null_prev[$key]) && ! isset($me_fields_null[$key])) {        $val = "''";    }}  // end else (field value in the form)unset($type);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * User preferences page * * @package PhpMyAdmin *//** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';require_once './libraries/user_preferences.lib.php';require_once './libraries/config/config_functions.lib.php';require_once './libraries/config/messages.inc.php';require_once './libraries/config/ConfigFile.class.php';require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require './libraries/config/user_preferences.forms.php';PMA_userprefs_pageinit();// handle form processing$form_param = filter_input(INPUT_GET, 'form');if (! isset($forms[$form_param])) {    $forms_keys = array_keys($forms);    $form_param = array_shift($forms_keys);}$form_display = new FormDisplay();foreach ($forms[$form_param] as $form_name => $form) {    // skip Developer form if no setting is available    if ($form_name == 'Developer' && !$GLOBALS['cfg']['UserprefsDeveloperTab']) {        continue;    }    $form_display->registerForm($form_name, $form, 1);}if (isset($_POST['revert'])) {    // revert erroneous fields to their default values    $form_display->fixErrors();    // redirect    $url_params = array('form' => $form_param);    PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . 'prefs_forms.php'            . PMA_generate_common_url($url_params, '&'));    exit;}$error = null;if ($form_display->process(false) && !$form_display->hasErrors()) {    // save settings    $old_settings = PMA_load_userprefs();    $result = PMA_save_userprefs(ConfigFile::getInstance()->getConfigArray());    if ($result === true) {        // reload config        $GLOBALS['PMA_Config']->loadUserPreferences();        $hash = ltrim(filter_input(INPUT_POST, 'tab_hash'), '#');        PMA_userprefs_redirect($forms, $old_settings, 'prefs_forms.php', array(            'form' => $form_param), $hash);        exit;    } else {        $error = $result;    }}// display forms$GLOBALS['js_include'][] = 'config.js';require './libraries/header.inc.php';require './libraries/user_preferences.inc.php';if ($error) {    $error->display();}if ($form_display->hasErrors()) {    // form has errors    ?>    <div class="error config-form">        <b><?php echo __('Cannot save settings, submitted form contains errors') ?></b>        <?php $form_display->displayErrors(); ?>    </div>    <?php}$form_display->display(true, true);/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-String-MB *//** * Returns length of string depending on current charset. * * @param string   string to count * @return  int      string length */function PMA_strlen($string){    return mb_strlen($string);}/** * Returns substring from string, works depending on current charset. * * @param string $string  string to count * @param int    $start   start of substring * @param int    $length  length of substring * @return  string */function PMA_substr($string, $start, $length = 2147483647){    return mb_substr($string, $start, $length);}/** * Returns postion of $needle in $haystack or false if not found * * @param string  $haystack * @param string  $needle * @param int     $offset * @return  integer position of $needle in $haystack or false */function PMA_strpos($haystack, $needle, $offset = 0){    return mb_strpos($haystack, $needle, $offset);}/** * Make a string lowercase * * @param string  $string * @return  string */function PMA_strtolower($string){    return mb_strtolower($string);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common functions for the export functionality for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * This function is called from one of the other functions in this file * and it completes the handling of the export functionality. * * @param  string  $item_name    The name of the item that we are exporting * @param  string  $export_data  The SQL query to create the requested item */function PMA_RTE_handleExport($item_name, $export_data){    global $db;    $item_name = htmlspecialchars(PMA_backquote($_GET['item_name']));    if ($export_data !== false) {        $export_data = '<textarea cols="40" rows="15" style="width: 100%;">'                     . htmlspecialchars(trim($export_data)) . '</textarea>';        $title = sprintf(PMA_RTE_getWord('export'), $item_name);        if ($GLOBALS['is_ajax_request'] == true) {            $extra_data = array('title' => $title);            PMA_ajaxResponse($export_data, true, $extra_data);        } else {            echo "<fieldset>\n"               . "<legend>$title</legend>\n"               . $export_data               . "</fieldset>\n";        }    } else {        $_db = htmlspecialchars(PMA_backquote($db));        $response = __('Error in Processing Request') . ' : '                  . sprintf(PMA_RTE_getWord('not_found'), $item_name, $_db);        $response = PMA_message::error($response);        if ($GLOBALS['is_ajax_request'] == true) {            PMA_ajaxResponse($response, false);        } else {            $response->display();        }    }} // end PMA_RTE_handleExport()/** * If necessary, prepares event information and passes * it to PMA_RTE_handleExport() for the actual export. */function PMA_EVN_handleExport(){    global $_GET, $db;    if (! empty($_GET['export_item']) && ! empty($_GET['item_name'])) {        $item_name = $_GET['item_name'];        $export_data = PMA_DBI_get_definition($db, 'EVENT', $item_name);        PMA_RTE_handleExport($item_name, $export_data);    }} // end PMA_EVN_handleExport()/** * If necessary, prepares routine information and passes * it to PMA_RTE_handleExport() for the actual export. */function PMA_RTN_handleExport(){    global $_GET, $db;    if (   ! empty($_GET['export_item'])        && ! empty($_GET['item_name'])        && ! empty($_GET['item_type'])    ) {        if ($_GET['item_type'] == 'FUNCTION' || $_GET['item_type'] == 'PROCEDURE') {            $export_data = PMA_DBI_get_definition(                $db,                $_GET['item_type'],                $_GET['item_name']);            PMA_RTE_handleExport($_GET['item_name'], $export_data);        }    }} // end PMA_RTN_handleExport()/** * If necessary, prepares trigger information and passes * it to PMA_RTE_handleExport() for the actual export. */function PMA_TRI_handleExport(){    global $_GET, $db, $table;    if (! empty($_GET['export_item']) && ! empty($_GET['item_name'])) {        $item_name = $_GET['item_name'];        $triggers = PMA_DBI_get_triggers($db, $table, '');        $export_data = false;        foreach ($triggers as $trigger) {            if ($trigger['name'] === $item_name) {                $export_data = $trigger['create'];                break;            }        }        PMA_RTE_handleExport($item_name, $export_data);    }} // end PMA_TRI_handleExport()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for cleanup of user input. * * @package PhpMyAdmin *//** * Removes all variables from request except whitelisted ones. * * @param string list of variables to allow * @return nothing * @access public */function PMA_remove_request_vars(&$whitelist){    // do not check only $_REQUEST because it could have been overwritten    // and use type casting because the variables could have become    // strings    $keys = array_keys(array_merge((array)$_REQUEST, (array)$_GET, (array)$_POST, (array)$_COOKIE));    foreach ($keys as $key) {        if (! in_array($key, $whitelist)) {            unset($_REQUEST[$key], $_GET[$key], $_POST[$key], $GLOBALS[$key]);        } else {            // allowed stuff could be compromised so escape it            // we require it to be a string            if (isset($_REQUEST[$key]) && ! is_string($_REQUEST[$key])) {                unset($_REQUEST[$key]);            }            if (isset($_POST[$key]) && ! is_string($_POST[$key])) {                unset($_POST[$key]);            }            if (isset($_COOKIE[$key]) && ! is_string($_COOKIE[$key])) {                unset($_COOKIE[$key]);            }            if (isset($_GET[$key]) && ! is_string($_GET[$key])) {                unset($_GET[$key]);            }        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Single signon for phpMyAdmin * * This is just example how to use session based single signon with * phpMyAdmin, it is not intended to be perfect code and look, only * shows how you can integrate this functionality in your application. * * @package PhpMyAdmin * @subpackage Example *//* Need to have cookie visible from parent directory */session_set_cookie_params(0, '/', '', 0);/* Create signon session */$session_name = 'SignonSession';session_name($session_name);session_start();/* Was data posted? */if (isset($_POST['user'])) {    /* Store there credentials */    $_SESSION['PMA_single_signon_user'] = $_POST['user'];    $_SESSION['PMA_single_signon_password'] = $_POST['password'];    $_SESSION['PMA_single_signon_host'] = $_POST['host'];    $_SESSION['PMA_single_signon_port'] = $_POST['port'];    /* Update another field of server configuration */    $_SESSION['PMA_single_signon_cfgupdate'] = array('verbose' => 'Signon test');    $id = session_id();    /* Close that session */    session_write_close();    /* Redirect to phpMyAdmin (should use absolute URL here!) */    header('Location: ../index.php');} else {    /* Show simple form */    header('Content-Type: text/html; charset=utf-8');    echo '<?xml version="1.0" encoding="utf-8"?>' . "\n";    ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr"><head>    <link rel="icon" href="../favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="../favicon.ico" type="image/x-icon" />    <title>phpMyAdmin single signon example</title></head><body><?phpif (isset($_SESSION['PMA_single_signon_error_message'])) {    echo '<p class="error">' . $_SESSION['PMA_single_signon_error_message'] . '</p>';}?><form action="signon.php" method="post">Username: <input type="text" name="user" /><br />Password: <input type="password" name="password" /><br />Host: (will use the one from config.inc.php by default) <input type="text" name="host" /><br />Port: (will use the one from config.inc.php by default) <input type="text" name="port" /><br /><input type="submit" /></form></body></html><?php}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common code for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Include all other files that are common * to routines, triggers and events. */require_once './libraries/rte/rte_words.lib.php';require_once './libraries/rte/rte_export.lib.php';require_once './libraries/rte/rte_list.lib.php';require_once './libraries/rte/rte_footer.lib.php';if ($GLOBALS['is_ajax_request'] != true) {    /**     * Displays the header and tabs     */    if (! empty($table) && in_array($table, PMA_DBI_get_tables($db))) {        include_once './libraries/tbl_common.php';        include_once './libraries/tbl_links.inc.php';    } else {        $table = '';        include_once './libraries/db_common.inc.php';        include_once './libraries/db_info.inc.php';    }} else {    /**     * Since we did not include some libraries, we need     * to manually select the required database and     * create the missing $url_query variable     */    if (strlen($db)) {        PMA_DBI_select_db($db);        if (! isset($url_query)) {            $url_query = PMA_generate_common_url($db, $table);        }    }}/** * Generate the conditional classes that will * be used to attach jQuery events to links */$ajax_class = array('add'    => '',                    'edit'   => '',                    'exec'   => '',                    'drop'   => '',                    'export' => '');if ($GLOBALS['cfg']['AjaxEnable']) {    $ajax_class = array('add'    => 'class="ajax_add_anchor"',                        'edit'   => 'class="ajax_edit_anchor"',                        'exec'   => 'class="ajax_exec_anchor"',                        'drop'   => 'class="ajax_drop_anchor"',                        'export' => 'class="ajax_export_anchor"');}/** * Create labels for the list */$titles = PMA_buildActionTitles();/** * Keep a list of errors that occured while * processing an 'Add' or 'Edit' operation. */$errors = array();/** * Call the appropriate main function */switch ($_PMA_RTE) {case 'RTN':    PMA_RTN_main();    break;case 'TRI':    PMA_TRI_main();    break;case 'EVN':    PMA_EVN_main();    break;}/** * Display the footer, if necessary */if ($GLOBALS['is_ajax_request'] != true) {    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays and handles the form where the user can change his password * linked from main.php * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'server_privileges.js';/** * Displays an error message and exits if the user isn't allowed to use this * script */if (!$cfg['ShowChgPassword']) {    $cfg['ShowChgPassword'] = PMA_DBI_select_db('mysql');}if ($cfg['Server']['auth_type'] == 'config' || !$cfg['ShowChgPassword']) {    include_once './libraries/header.inc.php';    PMA_Message::error(__('You don\'t have sufficient privileges to be here right now!'))->display();    include './libraries/footer.inc.php';} // end if/** * If the "change password" form has been submitted, checks for valid values * and submit the query or logout */if (isset($_REQUEST['nopass'])) {    // similar logic in server_privileges.php    $_error = false;    if ($_REQUEST['nopass'] == '1') {        $password = '';    } elseif (empty($_REQUEST['pma_pw']) || empty($_REQUEST['pma_pw2'])) {        $message = PMA_Message::error(__('The password is empty!'));        $_error = true;    } elseif ($_REQUEST['pma_pw'] != $_REQUEST['pma_pw2']) {        $message = PMA_Message::error(__('The passwords aren\'t the same!'));        $_error = true;    } else {        $password = $_REQUEST['pma_pw'];    }    if ($GLOBALS['is_ajax_request'] == true && $_error == true) {        /**         * If in an Ajax request, we don't need to show the rest of the page         */        PMA_ajaxResponse($message, false);    }    if (! $_error) {        // Defines the url to return to in case of error in the sql statement        $_url_params = array();        $err_url          = 'user_password.php' . PMA_generate_common_url($_url_params);        if (PMA_isValid($_REQUEST['pw_hash'], 'identical', 'old')) {            $hashing_function = 'OLD_PASSWORD';        } else {            $hashing_function = 'PASSWORD';        }        $sql_query        = 'SET password = ' . (($password == '') ? '\'\'' : $hashing_function . '(\'***\')');        $local_query      = 'SET password = ' . (($password == '') ? '\'\'' : $hashing_function . '(\'' . PMA_sqlAddSlashes($password) . '\')');        $result           = @PMA_DBI_try_query($local_query)            or PMA_mysqlDie(PMA_DBI_getError(), $sql_query, false, $err_url);        // Changes password cookie if required        // Duration = till the browser is closed for password (we don't want this to be saved)        if ($cfg['Server']['auth_type'] == 'cookie') {            $GLOBALS['PMA_Config']->setCookie('pmaPass-' . $server,                PMA_blowfish_encrypt($password, $GLOBALS['cfg']['blowfish_secret']));        } // end if        // For http auth. mode, the "back" link will also enforce new        // authentication        if ($cfg['Server']['auth_type'] == 'http') {            $_url_params['old_usr'] = 'relog';        }        $message = PMA_Message::success(__('The profile has been updated.'));        if ($GLOBALS['is_ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage($message, $sql_query, 'success');            PMA_ajaxResponse($message, true, $extra_data);        }        // Displays the page        include_once './libraries/header.inc.php';        echo '<h1>' . __('Change password') . '</h1>' . "\n\n";        PMA_showMessage($message, $sql_query, 'success');        ?>        <a href="index.php<?php echo PMA_generate_common_url($_url_params); ?>" target="_parent">            <strong><?php echo __('Back'); ?></strong></a>        <?php        include './libraries/footer.inc.php';    } // end if} // end if/** * If the "change password" form hasn't been submitted or the values submitted * aren't valid -> displays the form */// Loads the headersrequire_once './libraries/header.inc.php';echo '<h1>' . __('Change password') . '</h1>' . "\n\n";// Displays an error message if requiredif (isset($message)) {    $message->display();}require_once './libraries/display_change_password.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * This Class interacts with the user to gather the information * about their tables for which they want to export the relational schema * export options are shown to user from they can choose */class PMA_User_Schema{    public $chosenPage;    public $autoLayoutForeign;    public $autoLayoutInternal;    public $pageNumber;    public $c_table_rows;    public $action;    public function setAction($value)    {        $this->action = $value;    }    /**     * This function will process the user defined pages     * and tables which will be exported as Relational schema     * you can set the table positions on the paper via scratchboard     * for table positions, put the x,y co-ordinates     *     * $this->action tells what the Schema is supposed to do     * create and select a page, generate schema etc     *     * @access public     * @return void     */    public function processUserChoice()    {        global $action_choose, $db, $cfgRelation;        if (isset($this->action)) {            switch ($this->action) {            case 'selectpage':                $this->chosenPage = $_REQUEST['chpage'];                if ($action_choose=="1") {                    $this->deleteCoordinates(                        $db,                        $cfgRelation,                        $this->chosenPage                    );                    $this->deletePages(                        $db,                        $cfgRelation,                        $this->chosenPage                    );                    $this->chosenPage = 0;                }                break;            case 'createpage':                $this->pageNumber = PMA_REL_create_page(                    $_POST['newpage'],                    $cfgRelation,                    $db                );                $this->autoLayoutForeign = isset($_POST['auto_layout_foreign'])                    ? "1"                    : null;                $this->autoLayoutInternal = isset($_POST['auto_layout_internal'])                    ? "1"                    : null;                $this->processRelations(                    $db,                    $this->pageNumber,                    $cfgRelation                );                break;            case 'edcoord':                $this->chosenPage = $_POST['chpage'];                $this->c_table_rows = $_POST['c_table_rows'];                $this->_editCoordinates($db, $cfgRelation);                break;            case 'delete_old_references':                $this->_deleteTableRows(                    $_POST['delrow'],                    $cfgRelation,                    $db,                    $_POST['chpage']                );                break;            case 'process_export':                $this->_processExportSchema();                break;            } // end switch        } // end if (isset($do))    }    /**     * shows/displays the HTML FORM to create the page     *     * @param string $db name of the selected database     *     * @return void     * @access public     */    public function showCreatePageDialog($db)    {        ?>        <form method="post" action="schema_edit.php" name="frm_create_page">        <fieldset>        <legend>        <?php echo __('Create a page') . "\n"; ?>        </legend>        <?php echo PMA_generate_common_hidden_inputs($db); ?>        <input type="hidden" name="do" value="createpage" />        <table>        <tr>        <td><label for="id_newpage"><?php echo __('Page name'); ?></label></td>        <td><input type="text" name="newpage" id="id_newpage" size="20" maxlength="50" /></td>        </tr>        <tr>        <td><?php echo __('Automatic layout based on'); ?></td>        <td>        <input type="checkbox" name="auto_layout_internal" id="id_auto_layout_internal" /><label for="id_auto_layout_internal">        <?php echo __('Internal relations'); ?></label><br />        <?php        /*         * Check to see whether INNODB and PBXT storage engines are Available in MYSQL PACKAGE         * If available, then provide AutoLayout for Foreign Keys in Schema View         */        if (PMA_StorageEngine::isValid('InnoDB') || PMA_StorageEngine::isValid('PBXT')) {            ?>            <input type="checkbox" name="auto_layout_foreign" id="id_auto_layout_foreign" /><label for="id_auto_layout_foreign">            <?php echo __('FOREIGN KEY'); ?></label><br />            <?php        }        ?>        </td></tr>        </table>        </fieldset>        <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Go'); ?>" />        </fieldset>        </form>        <?php    }    /**     * shows/displays the created page names in a drop down list     * User can select any page number and edit it using dashboard etc     *     * @return void     * @access public     */    public function selectPage()    {        global $db,$table,$cfgRelation;        $page_query = 'SELECT * FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'';        $page_rs    = PMA_query_as_controluser($page_query, false, PMA_DBI_QUERY_STORE);        if ($page_rs && PMA_DBI_num_rows($page_rs) > 0) {            ?>            <form method="get" action="schema_edit.php" name="frm_select_page">            <fieldset>            <legend>            <?php echo __('Please choose a page to edit') . "\n"; ?>            </legend>            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="do" value="selectpage" />            <select name="chpage" id="chpage" class="autosubmit">            <option value="0"><?php echo __('Select page'); ?></option>            <?php            while ($curr_page = PMA_DBI_fetch_assoc($page_rs)) {                echo "\n" . '        '                    . '<option value="' . $curr_page['page_nr'] . '"';                if (isset($this->chosenPage)                    && $this->chosenPage == $curr_page['page_nr']                ) {                    echo ' selected="selected"';                }                echo '>' . $curr_page['page_nr'] . ': '                    . htmlspecialchars($curr_page['page_descr']) . '</option>';            } // end while            echo "\n";            ?>            </select>            <?php            $choices = array(                 '0' => __('Edit'),                 '1' => __('Delete')            );            PMA_display_html_radio('action_choose', $choices, '0', false);            unset($choices);            ?>            </fieldset>            <fieldset class="tblFooters">            <input type="submit" value="<?php echo __('Go'); ?>" /><br />            </fieldset>            </form>            <?php        } // end IF        echo "\n";    } // end function    /**     * A dashboard is displayed to AutoLayout the position of tables     * users can drag n drop the tables and change their positions     *     * @return void     * @access public     */    public function showTableDashBoard()    {        global $db, $cfgRelation, $table, $with_field_names;        /*         * We will need an array of all tables in this db         */        $selectboxall = array('--');        $alltab_rs    = PMA_DBI_query(            'SHOW TABLES FROM ' . PMA_backquote($db) . ';',            null,            PMA_DBI_QUERY_STORE        );        while ($val = @PMA_DBI_fetch_row($alltab_rs)) {               $selectboxall[] = $val[0];        }        $tabExist = array();        /*         * Now if we already have chosen a page number then we should         * show the tables involved         */        if (isset($this->chosenPage) && $this->chosenPage > 0) {            echo "\n";            ?>            <h2><?php echo __('Select Tables'); ?></h2>            <?php            $page_query = 'SELECT * FROM '                . PMA_backquote($GLOBALS['cfgRelation']['db'])                . '.' . PMA_backquote($cfgRelation['table_coords'])                . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                . ' AND pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';            $page_rs    = PMA_query_as_controluser($page_query, false);            $array_sh_page = array();            while ($temp_sh_page = @PMA_DBI_fetch_assoc($page_rs)) {                   $array_sh_page[] = $temp_sh_page;            }            /*             * Display WYSIWYG parts             */            if (! isset($_POST['with_field_names']) && ! isset($_POST['showwysiwyg'])) {                $with_field_names = true;            }            $this->_displayScratchboardTables($array_sh_page);            ?>            <form method="post" action="schema_edit.php" name="edcoord">            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="chpage" value="<?php echo htmlspecialchars($this->chosenPage); ?>" />            <input type="hidden" name="do" value="edcoord" />            <table border="0">            <tr>                <th><?php echo __('Table'); ?></th>                <th><?php echo __('Delete'); ?></th>                <th>X</th>                <th>Y</th>            </tr>            <?php            if (isset($ctable)) {                unset($ctable);            }            $i = 0;            $odd_row = true;            foreach ($array_sh_page as $dummy_sh_page => $sh_page) {                $_mtab            =  $sh_page['table_name'];                $tabExist[$_mtab] =  false;                echo "\n" . '    <tr class="noclick ';                if ($odd_row) {                    echo 'odd';                } else {                    echo 'even';                }                echo '">';                $odd_row != $odd_row;                echo "\n" . '        <td>'                     . "\n" . '            <select name="c_table_' . $i . '[name]">';                foreach ($selectboxall as $key => $value) {                    echo "\n" . '                <option value="' . htmlspecialchars($value) . '"';                    if ($value == $sh_page['table_name']) {                        echo ' selected="selected"';                        $tabExist[$_mtab] = true;                    }                    echo '>' . htmlspecialchars($value) . '</option>';                }                echo "\n" . '            </select>'                     . "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="checkbox" id="id_c_table_' . $i .'" name="c_table_' . $i . '[delete]" value="y" /><label for="id_c_table_' . $i .'">' . __('Delete') . '</label>';                echo "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="text" onchange="dragPlace(' . $i . ', \'x\', this.value)" name="c_table_' . $i . '[x]" value="' . $sh_page['x'] . '" />';                echo "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="text" onchange="dragPlace(' . $i . ', \'y\', this.value)" name="c_table_' . $i . '[y]" value="' . $sh_page['y'] . '" />';                echo "\n" . '        </td>';                echo "\n" . '    </tr>';                $i++;            }            /*             * Add one more empty row             */            echo "\n" . '    <tr class="noclick ';            if ($odd_row) {                echo 'odd';            } else {                echo 'even';            }            $odd_row != $odd_row;            echo '">';            echo "\n" . '        <td>'                 . "\n" . '            <select name="c_table_' . $i . '[name]">';            foreach ($selectboxall as $key => $value) {                echo "\n" . '                <option value="' . htmlspecialchars($value) . '">' . htmlspecialchars($value) . '</option>';            }            echo "\n" . '            </select>'                 . "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="checkbox" id="id_c_table_' . $i .'" name="c_table_' . $i . '[delete]" value="y" /><label for="id_c_table_' . $i .'">' . __('Delete') . '</label>';            echo "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="text" name="c_table_' . $i . '[x]" value="' . (isset($sh_page['x'])?$sh_page['x']:'') . '" />';            echo "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="text" name="c_table_' . $i . '[y]" value="' . (isset($sh_page['y'])?$sh_page['y']:'') . '" />';            echo "\n" . '        </td>';            echo "\n" . '    </tr>';            echo "\n" . '    </table>' . "\n";            echo "\n" . '    <input type="hidden" name="c_table_rows" value="' . ($i + 1) . '" />';            echo "\n" . '    <input type="hidden" id="showwysiwyg" name="showwysiwyg" value="' . ((isset($showwysiwyg) && $showwysiwyg == '1') ? '1' : '0') . '" />';            echo "\n" . '    <input type="checkbox" name="with_field_names" ' . (isset($with_field_names) ? 'checked="checked"' : ''). ' />' . __('Column names') . '<br />';            echo "\n" . '    <input type="submit" value="' . __('Save') . '" />';            echo "\n" . '</form>' . "\n\n";        } // end if        if (isset($tabExist)) {            $this->_deleteTables($db, $this->chosenPage, $tabExist);        }    }    /**     * show Export relational schema generation options     * user can select export type of his own choice     * and the attributes related to it     *     * @return void     * @access public     */    public function displaySchemaGenerationOptions()    {        global $cfg,$pmaThemeImage,$db,$test_rs,$chpage;        ?>        <form method="post" action="schema_export.php">            <fieldset>            <legend>            <?php            echo PMA_generate_common_hidden_inputs($db);            if ($cfg['PropertiesIconic']) {                echo PMA_getImage('b_views.png');            }            echo __('Display relational schema');            ?>:            </legend>            <select name="export_type" id="export_type">                <option value="pdf" selected="selected">PDF</option>                <option value="svg">SVG</option>                <option value="dia">DIA</option>                <option value="visio">Visio</option>                <option value="eps">EPS</option>            </select>            <label><?php echo __('Select Export Relational Type');?></label><br />            <?php            if (isset($test_rs)) {            ?>            <label for="pdf_page_number_opt"><?php echo __('Page number:'); ?></label>            <select name="pdf_page_number" id="pdf_page_number_opt">                <?php                while ($pages = @PMA_DBI_fetch_assoc($test_rs)) {                    echo '                <option value="' . $pages['page_nr'] . '">'                        . $pages['page_nr'] . ': ' . htmlspecialchars($pages['page_descr']) . '</option>' . "\n";                } // end while                PMA_DBI_free_result($test_rs);                unset($test_rs);                ?>            </select><br />            <?php } else { ?>            <input type="hidden" name="pdf_page_number" value="<?php echo htmlspecialchars($this->chosenPage); ?>" />            <?php } ?>            <input type="hidden" name="do" value="process_export" />            <input type="hidden" name="chpage" value="<?php echo $chpage; ?>" />            <input type="checkbox" name="show_grid" id="show_grid_opt" />            <label for="show_grid_opt"><?php echo __('Show grid'); ?></label><br />            <input type="checkbox" name="show_color" id="show_color_opt" checked="checked" />            <label for="show_color_opt"><?php echo __('Show color'); ?></label><br />            <input type="checkbox" name="show_table_dimension" id="show_table_dim_opt" />            <label for="show_table_dim_opt"><?php echo __('Show dimension of tables'); ?>            </label><br />            <input type="checkbox" name="all_table_same_wide" id="all_table_same_wide" />            <label for="all_table_same_wide"><?php echo __('Display all tables with the same width'); ?>            </label><br />            <input type="checkbox" name="with_doc" id="with_doc" checked="checked" />            <label for="with_doc"><?php echo __('Data Dictionary'); ?></label><br />            <input type="checkbox" name="show_keys" id="show_keys" />            <label for="show_keys"><?php echo __('Only show keys'); ?></label><br />            <select name="orientation" id="orientation_opt" onchange="refreshDragOption('pdflayout');" >                <option value="L"><?php echo __('Landscape');?></option>                <option value="P"><?php echo __('Portrait');?></option>            </select>            <label for="orientation_opt"><?php echo __('Orientation'); ?></label>            <br />            <select name="paper" id="paper_opt" onchange="refreshDragOption('pdflayout');">                <?php                foreach ($cfg['PDFPageSizes'] as $key => $val) {                        echo '<option value="' . $val . '"';                        if ($val == $cfg['PDFDefaultPageSize']) {                            echo ' selected="selected"';                        }                        echo ' >' . $val . '</option>' . "\n";                }                ?>            </select>            <label for="paper_opt"><?php echo __('Paper size'); ?></label>            </fieldset>            <fieldset class="tblFooters">            <input type="submit" value="<?php echo __('Go'); ?>" />            </fieldset>        </form>        <?php    }    /**    * Check if there are tables that need to be deleted in dashboard,    * if there are, ask the user for allowance    *    * @param string  $db       name of database selected    * @param integer $chpage   selected page    * @param array   $tabExist    *    * @return void    * @access private    */    private function _deleteTables($db, $chpage, $tabExist)    {        global $table;        $_strtrans  = '';        $_strname   = '';        $shoot      = false;        if (! empty($tabExist) && is_array($tabExist)) {            foreach ($tabExist as $key => $value) {                if (! $value) {                    $_strtrans  .= '<input type="hidden" name="delrow[]" value="' . htmlspecialchars($key) . '" />' . "\n";                    $_strname   .= '<li>' . htmlspecialchars($key) . '</li>' . "\n";                    $shoot       = true;                }            }            if ($shoot) {                echo '<form action="schema_edit.php" method="post">' . "\n"                    . PMA_generate_common_hidden_inputs($db)                    . '<input type="hidden" name="do" value="delete_old_references" />' . "\n"                    . '<input type="hidden" name="chpage" value="' . htmlspecialchars($chpage) . '" />' . "\n"                    . __('The current page has references to tables that no longer exist. Would you like to delete those references?')                    . '<ul>' . "\n"                    . $_strname                    . '</ul>' . "\n"                    . $_strtrans                    . '<input type="submit" value="' . __('Go') . '" />' . "\n"                    . '</form>';            }        }    }    /**     * Check if there are tables that need to be deleted in dashboard,     * if there are, ask the user for allowance     *     * @return void     * @access private     */    private function _displayScratchboardTables($array_sh_page)    {        global $with_field_names, $db;        ?>        <script type="text/javascript" src="./js/dom-drag.js"></script>        <form method="post" action="schema_edit.php" name="dragdrop">        <input type="button" name="dragdrop" value="<?php echo __('Toggle scratchboard'); ?>" onclick="ToggleDragDrop('pdflayout');" />        <input type="button" name="dragdropreset" value="<?php echo __('Reset'); ?>" onclick="resetDrag();" />        </form>        <div id="pdflayout" class="pdflayout" style="visibility: hidden;">        <?php        $draginit = '';        $draginit2 = '';        $reset_draginit = '';        $i = 0;        foreach ($array_sh_page as $key => $temp_sh_page) {            $drag_x = $temp_sh_page['x'];            $drag_y = $temp_sh_page['y'];            $draginit2      .= ' Drag.init($("#table_' . $i . '")[0], null, 0, parseInt(myid.style.width)-2, 0, parseInt(myid.style.height)-5);' . "\n";            $draginit2      .= '    $("#table_' . $i . '")[0].onDrag = function (x, y) { document.edcoord.elements["c_table_' . $i . '[x]"].value = parseInt(x); document.edcoord.elements["c_table_' . $i . '[y]"].value = parseInt(y) }' . "\n";            $draginit       .= '    $("#table_' . $i . '")[0].style.left = "' . $drag_x . 'px";' . "\n";            $draginit       .= '    $("#table_' . $i . '")[0].style.top  = "' . $drag_y . 'px";' . "\n";            $reset_draginit .= '    $("#table_' . $i . '")[0].style.left = "2px";' . "\n";            $reset_draginit .= '    $("#table_' . $i . '")[0].style.top  = "' . (15 * $i) . 'px";' . "\n";            $reset_draginit .= '    document.edcoord.elements["c_table_' . $i . '[x]"].value = "2"' . "\n";            $reset_draginit .= '    document.edcoord.elements["c_table_' . $i . '[y]"].value = "' . (15 * $i) . '"' . "\n";            echo '<div id="table_' . $i . '" class="pdflayout_table"><u>' . $temp_sh_page['table_name'] . '</u>';            if (isset($with_field_names)) {                $fields = PMA_DBI_get_columns($db, $temp_sh_page['table_name']);                // if the table has been dropped from outside phpMyAdmin,                // we can no longer obtain its columns list                if ($fields) {                    foreach ($fields as $row) {                        echo '<br />' . htmlspecialchars($row['Field']) . "\n";                    }                }            }            echo '</div>' . "\n";            $i++;        }        ?>        </div>        <script type="text/javascript">        //<![CDATA[        function PDFinit() {            refreshLayout();            myid = $('#pdflayout')[0];            <?php echo $draginit; ?>            TableDragInit();        }        function TableDragInit() {            myid = $('#pdflayout')[0];            <?php echo $draginit2; ?>        }        function resetDrag() {            <?php echo $reset_draginit; ?>        }        //]]>        </script>        <?php    }    /**     * delete the table rows with table co-ordinates     *     * @param int     $delrow      delete selected table from list of tables     * @param array   $cfgRelation relation settings     * @param string  $db          database name     * @param integer $chpage      selected page for adding relations etc     *     * @return void     * @access private     */    private function _deleteTableRows($delrow,$cfgRelation,$db,$chpage)    {        foreach ($delrow as $current_row) {            $del_query = 'DELETE FROM '                . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['table_coords']) . ' ' . "\n"                .   ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'' . "\n"                .   ' AND table_name = \'' . PMA_sqlAddSlashes($current_row) . '\'' . "\n"                .   ' AND pdf_page_number = \'' . PMA_sqlAddSlashes($chpage) . '\'';                echo $del_query;            PMA_query_as_controluser($del_query, false);        }    }    /**     * get all the export options and verify     * call and include the appropriate Schema Class depending on $export_type     *     * @return void     * @access private     */    private function _processExportSchema()    {        /**        * Settings for relation stuff        */        include_once './libraries/transformations.lib.php';        include_once './libraries/Index.class.php';        /**         * default is PDF, otherwise validate it's only letters a-z         */        global  $db,$export_type;        if (!isset($export_type) || !preg_match('/^[a-zA-Z]+$/', $export_type)) {            $export_type = 'pdf';        }        PMA_DBI_select_db($db);        include "./libraries/schema/" . ucfirst($export_type) . "_Relation_Schema.class.php";        $obj_schema = eval("new PMA_" . ucfirst($export_type) . "_Relation_Schema();");    }    /**     * delete X and Y coordinates     *     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     * @param integer $choosePage  selected page for adding relations etc     *     * @return void     * @access private     */    public function deleteCoordinates($db, $cfgRelation, $choosePage)    {        $query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['table_coords'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($choosePage) . '\'';        PMA_query_as_controluser($query, false);    }    /**     * delete pages     *     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     * @param integer $choosePage  selected page for adding relations etc     *     * @return void     * @access private     */    public function deletePages($db, $cfgRelation, $choosePage)    {        $query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND   page_nr = \'' . PMA_sqlAddSlashes($choosePage) . '\'';        PMA_query_as_controluser($query, false);    }    /**     * process internal and foreign key relations     *     * @param string  $db          The database name     * @param integer $pageNumber  document number/Id     * @param array   $cfgRelation relation settings     *     * @return void     * @access private     */    public function processRelations($db, $pageNumber, $cfgRelation)    {        /*         * A u t o m a t i c    l a y o u t         *         * There are 2 kinds of relations in PMA         * 1) Internal Relations 2) Foreign Key Relations         */        if (isset($this->autoLayoutInternal) || isset($this->autoLayoutForeign)) {            $all_tables = array();        }        if (isset($this->autoLayoutForeign)) {            /*             * get the tables list             * who support FOREIGN KEY, it's not             * important that we group together InnoDB tables             * and PBXT tables, as this logic is just to put             * the tables on the layout, not to determine relations             */            $tables = PMA_DBI_get_tables_full($db);            $foreignkey_tables = array();            foreach ($tables as $table_name => $table_properties) {                if (PMA_foreignkey_supported($table_properties['ENGINE'])) {                    $foreignkey_tables[] = $table_name;                }            }            $all_tables = $foreignkey_tables;            /*             * could be improved by finding the tables which have the             * most references keys and placing them at the beginning             * of the array (so that they are all center of schema)             */            unset($tables, $foreignkey_tables);        }        if (isset($this->autoLayoutInternal)) {            /*             * get the tables list who support Internal Relations;             * This type of relations will be created when             * you setup the PMA tables correctly             */            $master_tables = 'SELECT COUNT(master_table), master_table'                . ' FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['relation'])                . ' WHERE master_db = \'' . PMA_sqlAddSlashes($db) . '\''                . ' GROUP BY master_table'                . ' ORDER BY COUNT(master_table) DESC';            $master_tables_rs = PMA_query_as_controluser(                $master_tables, false, PMA_DBI_QUERY_STORE            );            if ($master_tables_rs && PMA_DBI_num_rows($master_tables_rs) > 0) {                /* first put all the master tables at beginning                 * of the list, so they are near the center of                 * the schema                 */                while (list(, $master_table) = PMA_DBI_fetch_row($master_tables_rs)) {                       $all_tables[] = $master_table;                }                /* Now for each master, add its foreigns into an array                 * of foreign tables, if not already there                 * (a foreign might be foreign for more than                 * one table, and might be a master itself)                 */                $foreign_tables = array();                foreach ($all_tables as $master_table) {                    $foreigners = PMA_getForeigners($db, $master_table);                    foreach ($foreigners as $foreigner) {                        if (! in_array($foreigner['foreign_table'], $foreign_tables)) {                            $foreign_tables[] = $foreigner['foreign_table'];                        }                    }                }                /*                 * Now merge the master and foreign arrays/tables                 */                foreach ($foreign_tables as $foreign_table) {                    if (! in_array($foreign_table, $all_tables)) {                        $all_tables[] = $foreign_table;                    }                }            }        }        if (isset($this->autoLayoutInternal) || isset($this->autoLayoutForeign)) {            $this->addRelationCoordinates(                $all_tables, $pageNumber, $db, $cfgRelation            );        }        $this->chosenPage = $pageNumber;    }    /**     * Add X and Y coordinates for a table     *     * @param array   $all_tables  A list of all tables involved     * @param integer $pageNumber  document number/Id     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     *     * @return void     * @access private     */    public function addRelationCoordinates($all_tables, $pageNumber, $db, $cfgRelation)    {        /*         * Now generate the coordinates for the schema         * in a clockwise spiral and add to co-ordinates table         */        $pos_x = 300;        $pos_y = 300;        $delta = 110;        $delta_mult = 1.10;        $direction = "right";        foreach ($all_tables as $current_table) {            /*            * save current table's coordinates            */            $insert_query = 'INSERT INTO '                . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['table_coords']) . ' '                . '(db_name, table_name, pdf_page_number, x, y) '                . 'VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \''                . PMA_sqlAddSlashes($current_table) . '\',' . $pageNumber                . ',' . $pos_x . ',' . $pos_y . ')';            PMA_query_as_controluser($insert_query, false);            /*             * compute for the next table             */            switch ($direction) {            case 'right':                $pos_x    += $delta;                $direction = "down";                $delta    *= $delta_mult;                break;            case 'down':                $pos_y    += $delta;                $direction = "left";                $delta    *= $delta_mult;                break;            case 'left':                $pos_x    -= $delta;                $direction = "up";                $delta    *= $delta_mult;                break;            case 'up':                $pos_y    -= $delta;                $direction = "right";                $delta    *= $delta_mult;                break;            }        }    }    /**     * update X and Y coordinates for a table     *     * @param string $db          The database name     * @param array  $cfgRelation relation settings     *     * @return void     * @access private     */    private function _editCoordinates($db, $cfgRelation)    {        for ($i = 0; $i < $this->c_table_rows; $i++) {            $arrvalue = 'c_table_' . $i;            global $$arrvalue;            $arrvalue = $$arrvalue;            if (! isset($arrvalue['x']) || $arrvalue['x'] == '') {                $arrvalue['x'] = 0;            }            if (! isset($arrvalue['y']) || $arrvalue['y'] == '') {                $arrvalue['y'] = 0;            }            if (isset($arrvalue['name']) && $arrvalue['name'] != '--') {                $test_query = 'SELECT * FROM '                    . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($cfgRelation['table_coords'])                    . ' WHERE db_name = \'' .  PMA_sqlAddSlashes($db) . '\''                    . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                    . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                $test_rs = PMA_query_as_controluser($test_query, false, PMA_DBI_QUERY_STORE);                //echo $test_query;                if ($test_rs && PMA_DBI_num_rows($test_rs) > 0) {                    if (isset($arrvalue['delete']) && $arrvalue['delete'] == 'y') {                        $ch_query = 'DELETE FROM '                            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                            . PMA_backquote($cfgRelation['table_coords'])                            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                    } else {                        $ch_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db'])                            . '.' . PMA_backquote($cfgRelation['table_coords']) . ' '                            . 'SET x = ' . $arrvalue['x'] . ', y= ' . $arrvalue['y']                            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                    }                } else {                    $ch_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db'])                        . '.' . PMA_backquote($cfgRelation['table_coords']) . ' '                        . '(db_name, table_name, pdf_page_number, x, y) '                        . 'VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \''                        . PMA_sqlAddSlashes($arrvalue['name']) . '\', \''                        . PMA_sqlAddSlashes($this->chosenPage) . '\','                        . $arrvalue['x'] . ',' . $arrvalue['y'] . ')';                }                //echo $ch_query;                PMA_query_as_controluser($ch_query, false);            } // end if        } // end for    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles creation of the chart * * @package PhpMyAdmin *//** * do not import request variable into global scope * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'tbl_chart.js';$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';/* < IE 9 doesn't support canvas natively */if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {    $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';}$GLOBALS['js_include'][] = 'canvg/canvg.js';/** * Runs common work */if (strlen($GLOBALS['table'])) {    $url_params['goto'] = $cfg['DefaultTabTable'];    $url_params['back'] = 'tbl_sql.php';    include './libraries/tbl_common.php';    include './libraries/tbl_info.inc.php';    include './libraries/tbl_links.inc.php';} elseif (strlen($GLOBALS['db'])) {    $url_params['goto'] = $cfg['DefaultTabDatabase'];    $url_params['back'] = 'sql.php';    include './libraries/db_common.inc.php';    include './libraries/db_info.inc.php';} else {    $url_params['goto'] = $cfg['DefaultTabServer'];    $url_params['back'] = 'sql.php';    include './libraries/server_common.inc.php';    include './libraries/server_links.inc.php';}/* * Execute the query and return the result */$data = array();$result = PMA_DBI_try_query($sql_query);while ($row = PMA_DBI_fetch_assoc($result)) {    $data[] = $row;}// get settings if any posted$chartSettings = array();if (PMA_isValid($_REQUEST['chartSettings'], 'array')) {    $chartSettings = $_REQUEST['chartSettings'];}$url_params['db'] = $GLOBALS['db'];$url_params['reload'] = 1;/** * Displays the page */// pma_token/url_query needed for chart export?><script type="text/javascript">pma_token = '<?php echo $_SESSION[' PMA_token ']; ?>';url_query = '<?php echo $url_query;?>';</script><!-- Display Chart options --><div id="div_view_options"><form method="post" action="tbl_chart.php"><?php echo PMA_generate_common_hidden_inputs($url_params); ?><fieldset>    <legend><?php echo __('Display chart'); ?></legend>    <div style="float:left;">        <input type="radio" name="chartType" value="bar" id="radio_bar" />        <label for ="radio_bar"><?php echo _pgettext('Chart type', 'Bar'); ?></label>        <input type="radio" name="chartType" value="column" id="radio_column" />        <label for ="radio_column"><?php echo _pgettext('Chart type', 'Column'); ?></label>        <input type="radio" name="chartType" value="line" id="radio_line" checked="checked" />        <label for ="radio_line"><?php echo _pgettext('Chart type', 'Line'); ?></label>        <input type="radio" name="chartType" value="spline" id="radio_spline" />        <label for ="radio_spline"><?php echo _pgettext('Chart type', 'Spline'); ?></label>        <input type="radio" name="chartType" value="pie" id="radio_pie" />        <label for ="radio_pie"><?php echo _pgettext('Chart type', 'Pie'); ?></label>        <span class="barStacked" style="display:none;">        <input type="checkbox" name="barStacked" value="1" id="checkbox_barStacked" />        <label for ="checkbox_barStacked"><?php echo __('Stacked'); ?></label>        </span>        <br>        <input type="text" name="chartTitle" value="<?php echo __('Chart title'); ?>">        <?php        $keys = array_keys($data[0]);        $yaxis = -1;        if (count($keys) > 1) { ?>            <br />            <label for="select_chartXAxis"><?php echo __('X-Axis:'); ?></label>            <select name="chartXAxis" id="select_chartXAxis">            <?php                        foreach ($keys as $idx => $key) {                if ($yaxis == -1 && (($idx == count($data[0]) - 1) || preg_match("/(date|time)/i", $key))) {                    echo '<option value="' . htmlspecialchars($idx) . '" selected>' . htmlspecialchars($key) . '</option>';                    $yaxis=$idx;                } else {                    echo '<option value="' . htmlspecialchars($idx) . '">' . htmlspecialchars($key) . '</option>';                }            }                        ?>        </select><br />        <label for="select_chartSeries"><?php echo __('Series:'); ?></label>        <select name="chartSeries" id="select_chartSeries">            <option value="columns"><?php echo __('The remaining columns'); ?></option>            <?php            foreach ($keys as $idx => $key) {                echo '<option>' . htmlspecialchars($key) . '</option>';            }        ?>        </select>        <?php        }        ?>            </div>    <div style="float:left; padding-left:40px;">        <label for="xaxis_label"><?php echo __('X-Axis label:'); ?></label>        <input style="margin-top:0;" type="text" name="xaxis_label" id="xaxis_label"            value="<?php echo ($yaxis == -1) ? __('X Values') : htmlspecialchars($keys[$yaxis]); ?>" /><br />        <label for="yaxis_label"><?php echo __('Y-Axis label:'); ?></label>        <input type="text" name="yaxis_label" id="yaxis_label" value="<?php echo __('Y Values'); ?>" />    </div>    <p style="clear:both;">&nbsp;</p>    <div id="resizer" style="width:600px; height:400px;">        <div id="inner-resizer">            <div id="querychart" style="display:none;"><?php$sanitized_data = array();foreach ($data as $data_row_number => $data_row) {    $tmp_row = array();    foreach ($data_row as $data_column => $data_value) {        $tmp_row[htmlspecialchars($data_column)] = htmlspecialchars($data_value);    }    $sanitized_data[] = $tmp_row;} echo json_encode($sanitized_data); unset($sanitized_data);?>            </div>        </div>    </div></fieldset></form></div><?php/** * Displays the footer */require_once './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library for extracting information about the partitions * * @package PhpMyAdmin *//** * base Partition Class * @package PhpMyAdmin */class PMA_Partition{    /**     * returns array of partition names for a specific db/table     *     * @access  public     * @return  array   of partition names     */    static public function getPartitionNames($db, $table)    {        if (PMA_Partition::havePartitioning()) {            return PMA_DBI_fetch_result("select `PARTITION_NAME` from `information_schema`.`PARTITIONS` where `TABLE_SCHEMA` = '" . $db . "' and `TABLE_NAME` = '" . $table . "'");        } else {            return array();        }    }    /**     * checks if MySQL server supports partitioning     *     * @static     * @staticvar boolean $have_partitioning     * @staticvar boolean $already_checked     * @access  public     * @return  boolean     */    static public function havePartitioning()    {        static $have_partitioning = false;        static $already_checked = false;        if (! $already_checked) {            $have_partitioning = PMA_MYSQL_INT_VERSION >= 50100 && PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'have_partitioning';");            $already_checked = true;        }        return $have_partitioning;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * SQL Validator interface for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * This function uses the Mimer SQL Validator service * <http://developer.mimer.com/validator/index.htm> from phpMyAdmin * * Copyright for Server side validator systems: * "All SQL statements are stored anonymously for statistical purposes. * Mimer SQL Validator, Copyright 2002 Upright Database Technology. * All rights reserved." * * All data is transported over HTTP-SOAP * And uses the PEAR SOAP Module * * Install instructions for PEAR SOAP * Make sure you have a really recent PHP with PEAR support * run this: "pear install Mail_Mime Net_DIME SOAP" * * Enable the SQL Validator options in the configuration file * $cfg['SQLQuery']['Validate'] = true; * $cfg['SQLValidator']['use']  = true; * * Also set a username and password if you have a private one * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * We need the PEAR libraries, so do a minimum version check first * I'm not sure if PEAR was available before this point * For now we actually use a configuration flag */if ($cfg['SQLValidator']['use'] == true) {    include_once './libraries/sqlvalidator.class.php';} // if ($cfg['SQLValidator']['use'] == true)/** * This function utilizes the Mimer SQL Validator service * to validate an SQL query * * <http://developer.mimer.com/validator/index.htm> * * @param string   SQL query to validate * * @return  string   Validator result string * * @global  array    The PMA configuration array */function PMA_validateSQL($sql){    global $cfg;    $str = '';    if ($cfg['SQLValidator']['use']) {        if (isset($GLOBALS['sqlvalidator_error'])            && $GLOBALS['sqlvalidator_error']) {            $str = sprintf(__('The SQL validator could not be initialized. Please check if you have installed the necessary PHP extensions as described in the %sdocumentation%s.'), '<a href="./Documentation.html#faqsqlvalidator" target="documentation">', '</a>');        } else {            // create new class instance            $srv = new PMA_SQLValidator();            // Checks for username settings            // The class defaults to anonymous with an empty password            // automatically            if ($cfg['SQLValidator']['username'] != '') {                $srv->setCredentials($cfg['SQLValidator']['username'], $cfg['SQLValidator']['password']);            }            // Identify ourselves to the server properly...            $srv->appendCallingProgram('phpMyAdmin', PMA_VERSION);            // ... and specify what database system we are using            $srv->setTargetDbms('MySQL', PMA_MYSQL_STR_VERSION);            // Log on to service            $srv->start();            // Do service validation            $str = $srv->validationString($sql);        }    } // end if    // Gives string back to caller    return $str;} // end of the "PMA_validateSQL()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once 'Export_Relation_Schema.class.php';require_once './libraries/PDF.class.php';/** * Extends the "TCPDF" class and helps * in developing the structure of PDF Schema Export * * @access public * @see TCPDF */class PMA_Schema_PDF extends PMA_PDF{    /**     * Defines properties     */    var $_xMin;    var $_yMin;    var $leftMargin = 10;    var $topMargin = 10;    var $scale;    var $PMA_links;    var $Outlines = array();    var $def_outlines;    var $widths;    private $_ff = PMA_PDF_FONT;    /**     * Sets the value for margins     *     * @param float $c_margin margin     *     * @return nothing     */    public function setCMargin($c_margin)    {        $this->cMargin = $c_margin;    }    /**     * Sets the scaling factor, defines minimum coordinates and margins     *     * @param float $scale      The scaling factor     * @param float $xMin       The minimum X coordinate     * @param float $yMin       The minimum Y coordinate     * @param float $leftMargin The left margin     * @param float $topMargin  The top margin     *     * @access public     *     * @return nothing     */    function PMA_PDF_setScale($scale = 1, $xMin = 0, $yMin = 0, $leftMargin = -1, $topMargin = -1)    {        $this->scale = $scale;        $this->_xMin = $xMin;        $this->_yMin = $yMin;        if ($this->leftMargin != -1) {            $this->leftMargin = $leftMargin;        }        if ($this->topMargin != -1) {            $this->topMargin = $topMargin;        }    }    /**     * Outputs a scaled cell     *     * @param float   $w      The cell width     * @param float   $h      The cell height     * @param string  $txt    The text to output     * @param mixed   $border Whether to add borders or not     * @param integer $ln     Where to put the cursor once the output is done     * @param string  $align  Align mode     * @param integer $fill   Whether to fill the cell with a color or not     * @param string  $link   Link     *     * @access public     *     * @return nothing     *     * @see TCPDF::Cell()     */    function PMA_PDF_cellScale($w, $h = 0, $txt = '', $border = 0, $ln = 0, $align = '', $fill = 0, $link = '')    {        $h = $h / $this->scale;        $w = $w / $this->scale;        $this->Cell($w, $h, $txt, $border, $ln, $align, $fill, $link);    }    /**     * Draws a scaled line     *     * @param float $x1 The horizontal position of the starting point     * @param float $y1 The vertical position of the starting point     * @param float $x2 The horizontal position of the ending point     * @param float $y2 The vertical position of the ending point     *     * @access public     *     * @return nothing     *     * @see TCPDF::Line()     */    function PMA_PDF_lineScale($x1, $y1, $x2, $y2)    {        $x1 = ($x1 - $this->_xMin) / $this->scale + $this->leftMargin;        $y1 = ($y1 - $this->_yMin) / $this->scale + $this->topMargin;        $x2 = ($x2 - $this->_xMin) / $this->scale + $this->leftMargin;        $y2 = ($y2 - $this->_yMin) / $this->scale + $this->topMargin;        $this->Line($x1, $y1, $x2, $y2);    }    /**     * Sets x and y scaled positions     *     * @param float $x The x position     * @param float $y The y position     *     * @access public     *     * @return nothing     *     * @see TCPDF::SetXY()     */    function PMA_PDF_setXyScale($x, $y)    {        $x = ($x - $this->_xMin) / $this->scale + $this->leftMargin;        $y = ($y - $this->_yMin) / $this->scale + $this->topMargin;        $this->SetXY($x, $y);    }    /**     * Sets the X scaled positions     *     * @param float $x The x position     *     * @access public     *     * @return nothing     *     * @see TCPDF::SetX()     */    function PMA_PDF_setXScale($x)    {        $x = ($x - $this->_xMin) / $this->scale + $this->leftMargin;        $this->SetX($x);    }    /**     * Sets the scaled font size     *     * @param float $size The font size (in points)     *     * @access public     *     * @return nothing     *     * @see TCPDF::SetFontSize()     */    function PMA_PDF_setFontSizeScale($size)    {        // Set font size in points        $size = $size / $this->scale;        $this->SetFontSize($size);    }    /**     * Sets the scaled line width     *     * @param float $width The line width     *     * @access public     *     * @return nothing     *     * @see TCPDF::SetLineWidth()     */    function PMA_PDF_setLineWidthScale($width)    {        $width = $width / $this->scale;        $this->SetLineWidth($width);    }    /**     * This method is used to render the page header.     *     * @return nothing     *     * @see TCPDF::Header()     */    function Header()    {        // We only show this if we find something in the new pdf_pages table        // This function must be named "Header" to work with the TCPDF library        global $cfgRelation, $db, $pdf_page_number, $with_doc;        if ($with_doc) {            $test_query = 'SELECT * FROM '                . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['pdf_pages'])                . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                . ' AND page_nr = \'' . $pdf_page_number . '\'';            $test_rs = PMA_query_as_controluser($test_query);            $pages = @PMA_DBI_fetch_assoc($test_rs);            $this->SetFont($this->_ff, 'B', 14);            $this->Cell(0, 6, ucfirst($pages['page_descr']), 'B', 1, 'C');            $this->SetFont($this->_ff, '');            $this->Ln();        }    }    /**     * This function must be named "Footer" to work with the TCPDF library     *     * @return nothing     *     * @see PMA_PDF::Footer()     */    function Footer()    {        global $with_doc;        if ($with_doc) {            parent::Footer();        }    }    /**     * Sets widths     *     * @param array $w array of widths     *     * @return nothing     */    function SetWidths($w)    {        // column widths        $this->widths = $w;    }    function Row($data, $links)    {        // line height        $nb = 0;        $data_cnt = count($data);        for ($i = 0;$i < $data_cnt;$i++) {            $nb = max($nb, $this->NbLines($this->widths[$i], $data[$i]));        }        $il = $this->FontSize;        $h = ($il + 1) * $nb;        // page break if necessary        $this->CheckPageBreak($h);        // draw the cells        $data_cnt = count($data);        for ($i = 0;$i < $data_cnt;$i++) {            $w = $this->widths[$i];            // save current position            $x = $this->GetX();            $y = $this->GetY();            // draw the border            $this->Rect($x, $y, $w, $h);            if (isset($links[$i])) {                $this->Link($x, $y, $w, $h, $links[$i]);            }            // print text            $this->MultiCell($w, $il + 1, $data[$i], 0, 'L');            // go to right side            $this->SetXY($x + $w, $y);        }        // go to line        $this->Ln($h);    }    /**     * Compute number of lines used by a multicell of width w     *     * @param int    $w   width     * @param string $txt text     *     * @return int     */    function NbLines($w, $txt)    {        $cw = &$this->CurrentFont['cw'];        if ($w == 0) {            $w = $this->w - $this->rMargin - $this->x;        }        $wmax = ($w-2 * $this->cMargin) * 1000 / $this->FontSize;        $s = str_replace("\r", '', $txt);        $nb = strlen($s);        if ($nb > 0 and $s[$nb-1] == "\n") {            $nb--;        }        $sep = -1;        $i = 0;        $j = 0;        $l = 0;        $nl = 1;        while ($i < $nb) {            $c = $s[$i];            if ($c == "\n") {                $i++;                $sep = -1;                $j = $i;                $l = 0;                $nl++;                continue;            }            if ($c == ' ') {                $sep = $i;            }            $l += isset($cw[ord($c)])?$cw[ord($c)]:0 ;            if ($l > $wmax) {                if ($sep == -1) {                    if ($i == $j) {                        $i++;                    }                } else {                    $i = $sep + 1;                }                $sep = -1;                $j = $i;                $l = 0;                $nl++;            } else {                $i++;            }        }        return $nl;    }}/** * Table preferences/statistics * * This class preserves the table co-ordinates,fields * and helps in drawing/generating the Tables in PDF document. * * @name Table_Stats * @see PMA_Schema_PDF */class Table_Stats{    /**     * Defines properties     */    private $_tableName;    private $_showInfo = false;    public $nb_fiels;    public $width = 0;    public $height;    public $fields = array();    public $heightCell = 6;    public $x, $y;    public $primary = array();    private $_ff = PMA_PDF_FONT;    /**     * The "Table_Stats" constructor     *     * @param string  $tableName      The table name     * @param integer $fontSize       The font size     * @param integer $pageNumber     The current page number (from the     *                                $cfg['Servers'][$i]['table_coords'] table)     * @param integer &$sameWideWidth The max. with among tables     * @param boolean $showKeys       Whether to display keys or not     * @param boolean $showInfo       Whether to display table position or not     *     * @global object    The current PDF document     * @global array     The relations settings     * @global string    The current db name     *     * @return nothing     *     * @see PMA_Schema_PDF, Table_Stats::Table_Stats_setWidth,     *     Table_Stats::Table_Stats_setHeight     */    function __construct($tableName, $fontSize, $pageNumber, &$sameWideWidth, $showKeys = false, $showInfo = false)    {        global $pdf, $cfgRelation, $db;        $this->_tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $pdf->Error(sprintf(__('The %s table doesn\'t exist!'), $tableName));        }        // load fields        //check to see if it will load all fields or only the foreign keys        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->_tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $this->_showInfo = $showInfo;        $this->_setHeight();        /*         * setWidth must me after setHeight, because title         * can include table height which changes table width         */        $this->_setWidth($fontSize);        if ($sameWideWidth < $this->width) {            $sameWideWidth = $this->width;        }        $sql = 'SELECT x, y FROM '             . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'             . PMA_backquote($cfgRelation['table_coords'])             . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''             . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''             . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $pdf->Error(                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        /*         * displayfield         */        $this->displayfield = PMA_getDisplayField($db, $tableName);        /*         * index         */        $result = PMA_DBI_query(            'SHOW INDEX FROM ' . PMA_backquote($tableName) . ';',            null, PMA_DBI_QUERY_STORE        );        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }    }    /**     * Returns title of the current table,     * title can have the dimensions of the table     *     * @return string     */    private function _getTitle()    {        return ($this->_showInfo ? sprintf('%.0f', $this->width) . 'x' . sprintf('%.0f', $this->height) : '') . ' ' . $this->_tableName;    }    /**     * Sets the width of the table     *     * @param integer $fontSize The font size     *     * @global object    The current PDF document     *     * @access private     *     * @return nothing     *     * @see PMA_Schema_PDF     */    private function _setWidth($fontSize)    {        global $pdf;        foreach ($this->fields as $field) {            $this->width = max($this->width, $pdf->GetStringWidth($field));        }        $this->width += $pdf->GetStringWidth('      ');        $pdf->SetFont($this->_ff, 'B', $fontSize);        /*         * it is unknown what value must be added, because         * table title is affected by the tabe width value         */        while ($this->width < $pdf->GetStringWidth($this->_getTitle())) {            $this->width += 5;        }        $pdf->SetFont($this->_ff, '', $fontSize);    }    /**     * Sets the height of the table     *     * @return nothing     *     * @access private     */    private function _setHeight()    {        $this->height = (count($this->fields) + 1) * $this->heightCell;    }    /**     * Do draw the table     *     * @param integer $fontSize The font size     * @param boolean $withDoc     * @param boolean $setColor Whether to display color     *     * @global object The current PDF document     *     * @access public     *     * @return nothing     *     * @see PMA_Schema_PDF     */    public function tableDraw($fontSize, $withDoc, $setColor = 0)    {        global $pdf, $withDoc;        $pdf->PMA_PDF_setXyScale($this->x, $this->y);        $pdf->SetFont($this->_ff, 'B', $fontSize);        if ($setColor) {            $pdf->SetTextColor(200);            $pdf->SetFillColor(0, 0, 128);        }        if ($withDoc) {            $pdf->SetLink($pdf->PMA_links['RT'][$this->_tableName]['-'], -1);        } else {            $pdf->PMA_links['doc'][$this->_tableName]['-'] = '';        }        $pdf->PMA_PDF_cellScale(            $this->width,            $this->heightCell,            $this->_getTitle(),            1,            1,            'C',            $setColor,            $pdf->PMA_links['doc'][$this->_tableName]['-']        );        $pdf->PMA_PDF_setXScale($this->x);        $pdf->SetFont($this->_ff, '', $fontSize);        $pdf->SetTextColor(0);        $pdf->SetFillColor(255);        foreach ($this->fields as $field) {            if ($setColor) {                if (in_array($field, $this->primary)) {                    $pdf->SetFillColor(215, 121, 123);                }                if ($field == $this->displayfield) {                    $pdf->SetFillColor(142, 159, 224);                }            }            if ($withDoc) {                $pdf->SetLink($pdf->PMA_links['RT'][$this->_tableName][$field], -1);            } else {                $pdf->PMA_links['doc'][$this->_tableName][$field] = '';            }            $pdf->PMA_PDF_cellScale(                $this->width,                $this->heightCell,                ' ' . $field,                1,                1,                'L',                $setColor,                $pdf->PMA_links['doc'][$this->_tableName][$field]            );            $pdf->PMA_PDF_setXScale($this->x);            $pdf->SetFillColor(255);        }    }}/** * Relation preferences/statistics * * This class fetches the table master and foreign fields positions * and helps in generating the Table references and then connects * master table's master field to foreign table's foreign key * in PDF document. * * @name Relation_Stats * @see PMA_Schema_PDF::SetDrawColor, PMA_Schema_PDF::PMA_PDF_setLineWidthScale, * PMA_Schema_PDF::PMA_PDF_lineScale */class Relation_Stats{    /**     * Defines properties     */    public $xSrc, $ySrc;    public $srcDir;    public $destDir;    public $xDest, $yDest;    public $wTick = 5;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @return nothing     *     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        /*        * [0] is x-left        * [1] is x-right        * [2] is y        */        $src_left   = $src_pos[0] - $this->wTick;        $src_right  = $src_pos[1] + $this->wTick;        $dest_left  = $dest_pos[0] - $this->wTick;        $dest_right = $dest_pos[1] + $this->wTick;        $d1 = abs($src_left - $dest_left);        $d2 = abs($src_right - $dest_left);        $d3 = abs($src_left - $dest_right);        $d4 = abs($src_right - $dest_right);        $d  = min($d1, $d2, $d3, $d4);        if ($d == $d1) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d2) {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d3) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        } else {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        }        $this->ySrc   = $src_pos[2];        $this->yDest = $dest_pos[2];    }    /**     * Gets arrows coordinates     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Arrows coordinates     *     * @access private     */    private function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // x_left, x_right, y        return array($table->x, $table->x + + $table->width, $table->y + ($pos + 1.5) * $table->heightCell);    }    /**     * draws relation links and arrows shows foreign key relations     *     * @param boolean $changeColor Whether to use one color per relation or not     * @param integer $i           The id of the link to draw     *     * @global object    The current PDF document     *     * @access public     *     * @return nothing     *     * @see PMA_Schema_PDF     */    public function relationDraw($changeColor, $i)    {        global $pdf;        if ($changeColor) {            $d = $i % 6;            $j = ($i - $d) / 6;            $j = $j % 4;            $j++;            $case = array(                array(1, 0, 0),                array(0, 1, 0),                array(0, 0, 1),                array(1, 1, 0),                array(1, 0, 1),                array(0, 1, 1)            );            list ($a, $b, $c) = $case[$d];            $e = (1 - ($j - 1) / 6);            $pdf->SetDrawColor($a * 255 * $e, $b * 255 * $e, $c * 255 * $e);        } else {            $pdf->SetDrawColor(0);        }        $pdf->PMA_PDF_setLineWidthScale(0.2);        $pdf->PMA_PDF_lineScale(            $this->xSrc,            $this->ySrc,            $this->xSrc + $this->srcDir * $this->wTick,            $this->ySrc        );        $pdf->PMA_PDF_lineScale(            $this->xDest + $this->destDir * $this->wTick,            $this->yDest,            $this->xDest,            $this->yDest        );        $pdf->PMA_PDF_setLineWidthScale(0.1);        $pdf->PMA_PDF_lineScale(            $this->xSrc + $this->srcDir * $this->wTick,            $this->ySrc,            $this->xDest + $this->destDir * $this->wTick,            $this->yDest        );        /*         * Draws arrows ->         */        $root2 = 2 * sqrt(2);        $pdf->PMA_PDF_lineScale(            $this->xSrc + $this->srcDir * $this->wTick * 0.75,            $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc + $this->wTick / $root2        );        $pdf->PMA_PDF_lineScale(            $this->xSrc + $this->srcDir * $this->wTick * 0.75,            $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc - $this->wTick / $root2        );        $pdf->PMA_PDF_lineScale(            $this->xDest + $this->destDir * $this->wTick / 2,            $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest + $this->wTick / $root2        );        $pdf->PMA_PDF_lineScale(            $this->xDest + $this->destDir * $this->wTick / 2,            $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest - $this->wTick / $root2        );        $pdf->SetDrawColor(0);    }}/** * Pdf Relation Schema Class * * Purpose of this class is to generate the PDF Document. PDF is widely * used format for documenting text,fonts,images and 3d vector graphics. * * This class inherits Export_Relation_Schema class has common functionality added * to this class * * @name Pdf_Relation_Schema */class PMA_Pdf_Relation_Schema extends PMA_Export_Relation_Schema{    /**     * Defines properties     */    private $_ff = PMA_PDF_FONT;    private $_xMax = 0;    private $_yMax = 0;    private $scale;    private $_xMin = 100000;    private $_yMin = 100000;    private $topMargin = 10;    private $bottomMargin = 10;    private $leftMargin = 10;    private $rightMargin = 10;    private $_tablewidth;    /**     * The "PMA_Pdf_Relation_Schema" constructor     *     * @global object   The current PDF Schema document     * @global string   The current db name     * @global array    The relations settings     * @access private     * @see PMA_Schema_PDF     */    function __construct()    {        global $pdf, $db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowGrid(isset($_POST['show_grid']));        $this->setShowColor(isset($_POST['show_color']));        $this->setShowKeys(isset($_POST['show_keys']));        $this->setTableDimension(isset($_POST['show_table_dimension']));        $this->setAllTableSameWidth(isset($_POST['all_table_same_wide']));        $this->setWithDataDictionary($_POST['with_doc']);        $this->setOrientation($_POST['orientation']);        $this->setPaper($_POST['paper']);        $this->setExportType($_POST['export_type']);         // Initializes a new document        $pdf = new PMA_Schema_PDF($this->orientation, 'mm', $this->paper);        $pdf->SetTitle(            sprintf(                __('Schema of the %s database - Page %s'),                $GLOBALS['db'],                $this->pageNumber            )        );        $pdf->setCMargin(0);        $pdf->Open();        $pdf->SetAutoPageBreak('auto');        $alltables = $this->getAllTables($db, $this->pageNumber);        if ($this->withDoc) {            $pdf->SetAutoPageBreak('auto', 15);            $pdf->setCMargin(1);            $this->dataDictionaryDoc($alltables);            $pdf->SetAutoPageBreak('auto');            $pdf->setCMargin(0);        }        $pdf->Addpage();        if ($this->withDoc) {            $pdf->SetLink($pdf->PMA_links['RT']['-'], -1);            $pdf->Bookmark(__('Relational schema'));            $pdf->SetAlias('{00}', $pdf->PageNo());            $this->topMargin = 28;            $this->bottomMargin = 28;        }        /* snip */        foreach ($alltables as $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats(                    $table, $this->_ff,                    $this->pageNumber,                    $this->_tablewidth,                    $this->showKeys,                    $this->tableDimension                );            }            if ($this->sameWide) {                $this->tables[$table]->width = $this->_tablewidth;            }            $this->_setMinMax($this->tables[$table]);        }        // Defines the scale factor        $this->scale = ceil(            max(                ($this->_xMax - $this->_xMin) / ($pdf->getPageWidth() - $this->rightMargin - $this->leftMargin),                ($this->_yMax - $this->_yMin) / ($pdf->getPageHeight() - $this->topMargin - $this->bottomMargin)            ) * 100        ) / 100;        $pdf->PMA_PDF_setScale(            $this->scale,            $this->_xMin,            $this->_yMin,            $this->leftMargin,            $this->topMargin        );        // Builds and save the PDF document        $pdf->PMA_PDF_setLineWidthScale(0.1);        if ($this->showGrid) {            $pdf->SetFontSize(10);            $this->_strokeGrid();        }        $pdf->PMA_PDF_setFontSizeScale(14);        // previous logic was checking master tables and foreign tables        // but I think that looping on every table of the pdf page as a master        // and finding its foreigns is OK (then we can support innodb)        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    // put the foreign table on the schema only if selected                    // by the user                    // (do not use array_search() because we would have to                    // to do a === false and this is not PHP3 compatible)                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table,                            $master_field,                            $rel['foreign_table'],                            $rel['foreign_field'],                            $this->tableDimension                        );                    }                } // end while            } // end if        } // end while        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $this->_drawTables($this->showColor);        $this->_showOutput($this->pageNumber);        exit();    }    /**     * Sets X and Y minimum and maximum for a table cell     *     * @param string $table The table name of which sets XY co-ordinates     *     * @return nothing     *     * @access private     */    private function _setMinMax($table)    {        $this->_xMax = max($this->_xMax, $table->x + $table->width);        $this->_yMax = max($this->_yMax, $table->y + $table->height);        $this->_xMin = min($this->_xMin, $table->x);        $this->_yMin = min($this->_yMin, $table->y);    }    /**     * Defines relation objects     *     * @param string  $masterTable  The master table name     * @param string  $masterField  The relation field in the master table     * @param string  $foreignTable The foreign table name     * @param string  $foreignField The relation field in the foreign table     * @param boolean $showInfo     Whether to display table position or not     *     * @access private     *     * @return nothing     *     * @see _setMinMax     */    private function _addRelation($masterTable, $masterField, $foreignTable, $foreignField, $showInfo)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $this->_ff, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );            $this->_setMinMax($this->tables[$masterTable]);        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $this->_ff, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );            $this->_setMinMax($this->tables[$foreignTable]);        }        $this->relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws the grid     *     * @global object  the current PMA_Schema_PDF instance     *     * @access private     *     * @return nothing     *     * @see PMA_Schema_PDF     */    private function _strokeGrid()    {        global $pdf;        $gridSize = 10;        $labelHeight = 4;        $labelWidth = 5;        if ($this->withDoc) {            $topSpace = 6;            $bottomSpace = 15;        } else {            $topSpace = 0;            $bottomSpace = 0;        }        $pdf->SetMargins(0, 0);        $pdf->SetDrawColor(200, 200, 200);        // Draws horizontal lines        for ($l = 0; $l <= intval(($pdf->getPageHeight() - $topSpace - $bottomSpace) / $gridSize); $l++) {            $pdf->line(                0, $l * $gridSize + $topSpace,                $pdf->getPageWidth(), $l * $gridSize + $topSpace            );            // Avoid duplicates            if ($l > 0                && $l <= intval(($pdf->getPageHeight() - $topSpace - $bottomSpace - $labelHeight) / $gridSize)            ) {                $pdf->SetXY(0, $l * $gridSize + $topSpace);                $label = (string) sprintf(                    '%.0f',                    ($l * $gridSize + $topSpace - $this->topMargin) * $this->scale + $this->_yMin                );                $pdf->Cell($labelWidth, $labelHeight, ' ' . $label);            } // end if        } // end for        // Draws vertical lines        for ($j = 0; $j <= intval($pdf->getPageWidth() / $gridSize); $j++) {            $pdf->line(                $j * $gridSize,                $topSpace,                $j * $gridSize,                $pdf->getPageHeight() - $bottomSpace            );            $pdf->SetXY($j * $gridSize, $topSpace);            $label = (string) sprintf(                '%.0f',                ($j * $gridSize - $this->leftMargin) * $this->scale + $this->_xMin            );            $pdf->Cell($labelWidth, $labelHeight, $label);        }    }    /**     * Draws relation arrows     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @access private     *     * @return nothing     *     * @see Relation_Stats::relationdraw()     */    private function _drawRelations($changeColor)    {        $i = 0;        foreach ($this->relations as $relation) {            $relation->relationDraw($changeColor, $i);            $i++;        }    }    /**     * Draws tables     *     * @param boolean $changeColor Whether to display table position or not     *     * @access private     *     * @return nothing     *     * @see Table_Stats::tableDraw()     */    private function _drawTables($changeColor = 0)    {        foreach ($this->tables as $table) {            $table->tableDraw($this->_ff, $this->withDoc, $changeColor);        }    }    /**     * Ouputs the PDF document to a file     * or sends the output to browser     *     * @param integer $pageNumber page number     *     * @global object   The current PDF document     * @global string   The current database name     * @global integer  The current page number (from the     *                  $cfg['Servers'][$i]['table_coords'] table)     * @access private     *     * @return nothing     *     * @see PMA_Schema_PDF     */    private function _showOutput($pageNumber)    {        global $pdf, $cfgRelation;        // Get the name of this pdfpage to use as filename        $_name_sql = 'SELECT page_descr FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE page_nr = ' . $pageNumber;        $_name_rs = PMA_query_as_controluser($_name_sql);        if ($_name_rs) {            $_name_row = PMA_DBI_fetch_row($_name_rs);            $filename = $_name_row[0] . '.pdf';        }        if (empty($filename)) {            $filename = $pageNumber . '.pdf';        }        $pdf->Download($filename);    }    public function dataDictionaryDoc($alltables)    {        global $db, $pdf, $orientation, $paper;        // TOC        $pdf->addpage($GLOBALS['orientation']);        $pdf->Cell(0, 9, __('Table of contents'), 1, 0, 'C');        $pdf->Ln(15);        $i = 1;        foreach ($alltables as $table) {            $pdf->PMA_links['doc'][$table]['-'] = $pdf->AddLink();            $pdf->SetX(10);            // $pdf->Ln(1);            $pdf->Cell(                0, 6, __('Page number:') . ' {' . sprintf("%02d", $i) . '}', 0, 0,                'R', 0, $pdf->PMA_links['doc'][$table]['-']            );            $pdf->SetX(10);            $pdf->Cell(                0, 6, $i . ' ' . $table, 0, 1,                'L', 0, $pdf->PMA_links['doc'][$table]['-']            );            // $pdf->Ln(1);            $fields = PMA_DBI_get_columns($GLOBALS['db'], $table);            foreach ($fields as $row) {                $pdf->SetX(20);                $field_name = $row['Field'];                $pdf->PMA_links['doc'][$table][$field_name] = $pdf->AddLink();                //$pdf->Cell(                //    0, 6, $field_name, 0, 1,                //    'L', 0, $pdf->PMA_links['doc'][$table][$field_name]                //);            }            $i++;        }        $pdf->PMA_links['RT']['-'] = $pdf->AddLink();        $pdf->SetX(10);        $pdf->Cell(            0, 6, __('Page number:') . ' {00}', 0, 0,            'R', 0, $pdf->PMA_links['RT']['-']        );        $pdf->SetX(10);        $pdf->Cell(            0, 6, $i . ' ' . __('Relational schema'), 0, 1,            'L', 0, $pdf->PMA_links['RT']['-']        );        $z = 0;        foreach ($alltables as $table) {            $z++;            $pdf->SetAutoPageBreak(true, 15);            $pdf->addpage($GLOBALS['orientation']);            $pdf->Bookmark($table);            $pdf->SetAlias('{' . sprintf("%02d", $z) . '}', $pdf->PageNo());            $pdf->PMA_links['RT'][$table]['-'] = $pdf->AddLink();            $pdf->SetLink($pdf->PMA_links['doc'][$table]['-'], -1);            $pdf->SetFont($this->_ff, 'B', 18);            $pdf->Cell(                0, 8, $z . ' ' . $table, 1, 1,                'C', 0, $pdf->PMA_links['RT'][$table]['-']            );            $pdf->SetFont($this->_ff, '', 8);            $pdf->ln();            $cfgRelation = PMA_getRelationsParam();            $comments = PMA_getComments($db, $table);            if ($cfgRelation['mimework']) {                $mime_map = PMA_getMIME($db, $table, true);            }            /**             * Gets table informations             */            $showtable    = PMA_Table::sGetStatusInfo($db, $table);            $show_comment = isset($showtable['Comment'])                ? $showtable['Comment']                : '';            $create_time  = isset($showtable['Create_time'])                ? PMA_localisedDate(strtotime($showtable['Create_time']))                : '';            $update_time  = isset($showtable['Update_time'])                ? PMA_localisedDate(strtotime($showtable['Update_time']))                : '';            $check_time   = isset($showtable['Check_time'])                ? PMA_localisedDate(strtotime($showtable['Check_time']))                : '';            /**             * Gets table keys and retains them             */            $result = PMA_DBI_query('SHOW KEYS FROM ' . PMA_backquote($table) . ';');            $primary = '';            $indexes = array();            $lastIndex = '';            $indexes_info = array();            $indexes_data = array();            $pk_array = array(); // will be use to emphasis prim. keys in the table            // view            while ($row = PMA_DBI_fetch_assoc($result)) {                // Backups the list of primary keys                if ($row['Key_name'] == 'PRIMARY') {                    $primary .= $row['Column_name'] . ', ';                    $pk_array[$row['Column_name']] = 1;                }                // Retains keys informations                if ($row['Key_name'] != $lastIndex) {                    $indexes[] = $row['Key_name'];                    $lastIndex = $row['Key_name'];                }                $indexes_info[$row['Key_name']]['Sequences'][] = $row['Seq_in_index'];                $indexes_info[$row['Key_name']]['Non_unique'] = $row['Non_unique'];                if (isset($row['Cardinality'])) {                    $indexes_info[$row['Key_name']]['Cardinality'] = $row['Cardinality'];                }                // I don't know what does following column mean....                // $indexes_info[$row['Key_name']]['Packed'] = $row['Packed'];                $indexes_info[$row['Key_name']]['Comment'] = $row['Comment'];                $indexes_data[$row['Key_name']][$row['Seq_in_index']]['Column_name'] = $row['Column_name'];                if (isset($row['Sub_part'])) {                    $indexes_data[$row['Key_name']][$row['Seq_in_index']]['Sub_part'] = $row['Sub_part'];                }            } // end while            if ($result) {                PMA_DBI_free_result($result);            }            /**             * Gets fields properties             */            $columns = PMA_DBI_get_columns($db, $table);            // Check if we can use Relations            if (!empty($cfgRelation['relation'])) {                // Find which tables are related with the current one and write it in                // an array                $res_rel = PMA_getForeigners($db, $table);                if (count($res_rel) > 0) {                    $have_rel = true;                } else {                    $have_rel = false;                }            } else {                $have_rel = false;            } // end if            /**             * Displays the comments of the table if MySQL >= 3.23             */            $break = false;            if (! empty($show_comment)) {                $pdf->Cell(0, 3, __('Table comments') . ' : ' . $show_comment, 0, 1);                $break = true;            }            if (! empty($create_time)) {                $pdf->Cell(0, 3, __('Creation') . ': ' . $create_time, 0, 1);                $break = true;            }            if (! empty($update_time)) {                $pdf->Cell(0, 3, __('Last update') . ': ' . $update_time, 0, 1);                $break = true;            }            if (! empty($check_time)) {                $pdf->Cell(0, 3, __('Last check') . ': ' . $check_time, 0, 1);                $break = true;            }            if ($break == true) {                $pdf->Cell(0, 3, '', 0, 1);                $pdf->Ln();            }            $pdf->SetFont($this->_ff, 'B');            if (isset($orientation) && $orientation == 'L') {                $pdf->Cell(25, 8, __('Column'), 1, 0, 'C');                $pdf->Cell(20, 8, __('Type'), 1, 0, 'C');                $pdf->Cell(20, 8, __('Attributes'), 1, 0, 'C');                $pdf->Cell(10, 8, __('Null'), 1, 0, 'C');                $pdf->Cell(20, 8, __('Default'), 1, 0, 'C');                $pdf->Cell(25, 8, __('Extra'), 1, 0, 'C');                $pdf->Cell(45, 8, __('Links to'), 1, 0, 'C');                if ($paper == 'A4') {                    $comments_width = 67;                } else {                    // this is really intended for 'letter'                    /**                     * @todo find optimal width for all formats                     */                    $comments_width = 50;                }                $pdf->Cell($comments_width, 8, __('Comments'), 1, 0, 'C');                $pdf->Cell(45, 8, 'MIME', 1, 1, 'C');                $pdf->SetWidths(array(25, 20, 20, 10, 20, 25, 45, $comments_width, 45));            } else {                $pdf->Cell(20, 8, __('Column'), 1, 0, 'C');                $pdf->Cell(20, 8, __('Type'), 1, 0, 'C');                $pdf->Cell(20, 8, __('Attributes'), 1, 0, 'C');                $pdf->Cell(10, 8, __('Null'), 1, 0, 'C');                $pdf->Cell(15, 8, __('Default'), 1, 0, 'C');                $pdf->Cell(15, 8, __('Extra'), 1, 0, 'C');                $pdf->Cell(30, 8, __('Links to'), 1, 0, 'C');                $pdf->Cell(30, 8, __('Comments'), 1, 0, 'C');                $pdf->Cell(30, 8, 'MIME', 1, 1, 'C');                $pdf->SetWidths(array(20, 20, 20, 10, 15, 15, 30, 30, 30));            }            $pdf->SetFont($this->_ff, '');            foreach ($columns as $row) {                $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);                $type                = $extracted_fieldspec['print_type'];                $attribute           = $extracted_fieldspec['attribute'];                if (! isset($row['Default'])) {                    if ($row['Null'] != '' && $row['Null'] != 'NO') {                        $row['Default'] = 'NULL';                    }                }                $field_name = $row['Field'];                // $pdf->Ln();                $pdf->PMA_links['RT'][$table][$field_name] = $pdf->AddLink();                $pdf->Bookmark($field_name, 1, -1);                $pdf->SetLink($pdf->PMA_links['doc'][$table][$field_name], -1);                $pdf_row = array(                    $field_name,                    $type,                    $attribute,                    ($row['Null'] == '' || $row['Null'] == 'NO') ? __('No') : __('Yes'),                    (isset($row['Default']) ? $row['Default'] : ''),                    $row['Extra'],                    (isset($res_rel[$field_name])                        ? $res_rel[$field_name]['foreign_table'] . ' -> ' . $res_rel[$field_name]['foreign_field']                        : ''),                    (isset($comments[$field_name])                        ? $comments[$field_name]                        : ''),                    (isset($mime_map) && isset($mime_map[$field_name])                        ? str_replace('_', '/', $mime_map[$field_name]['mimetype'])                        : '')                );                $links[0] = $pdf->PMA_links['RT'][$table][$field_name];                if (isset($res_rel[$field_name]['foreign_table'])                    AND isset($res_rel[$field_name]['foreign_field'])                    AND isset($pdf->PMA_links['doc'][$res_rel[$field_name]['foreign_table']][$res_rel[$field_name]['foreign_field']])                ) {                    $links[6] = $pdf->PMA_links['doc'][$res_rel[$field_name]['foreign_table']][$res_rel[$field_name]['foreign_field']];                } else {                    unset($links[6]);                }                $pdf->Row($pdf_row, $links);            } // end foreach            $pdf->SetFont($this->_ff, '', 14);        } //end each    }}?>
<?php/** * @package Swekey */?><script>	var g_SwekeyPlugin = null;	// -------------------------------------------------------------------	// Create the swekey plugin if it does not exists	function Swekey_Plugin()	{		try		{			if (g_SwekeyPlugin != null)				return g_SwekeyPlugin;			if (window.ActiveXObject)			{    			g_SwekeyPlugin = document.getElementById("swekey_activex");    			if (g_SwekeyPlugin == null)    			{                    // we must create the activex that way instead of new ActiveXObject("FbAuthAx.FbAuthCtl");                    // ortherwise SetClientSite is not called and we can not get the url  			  		var div = document.createElement('div');	   				div.innerHTML='<object id="swekey_activex" style="display:none" CLASSID="CLSID:8E02E3F9-57AA-4EE1-AA68-A42DD7B0FADE"></object>';    				// Never append to the body because it may still loading and it breaks IE	   				document.body.insertBefore(div, document.body.firstChild);    				g_SwekeyPlugin = document.getElementById("swekey_activex");                }				return g_SwekeyPlugin;			}			g_SwekeyPlugin = document.getElementById("swekey_plugin");			if (g_SwekeyPlugin != null)				return g_SwekeyPlugin;			for (i = 0; i < navigator.plugins.length; i ++)			{				try				{				    if (navigator.plugins[i] == null)				    {				        navigator.plugins.refresh();                    }                    else if (navigator.plugins[i][0] != null && navigator.plugins[i][0].type == "application/fbauth-plugin")					{						var x = document.createElement('embed');						x.setAttribute('type', 'application/fbauth-plugin');						x.setAttribute('id', 'swekey_plugin');						x.setAttribute('width', '0');						x.setAttribute('height', '0');						x.style.dislay='none';						//document.body.appendChild(x);						document.body.insertBefore(x, document.body.firstChild);						g_SwekeyPlugin = document.getElementById("swekey_plugin");						return g_SwekeyPlugin;					}				}				catch (e)				{				    navigator.plugins.refresh();					//alert ('Failed to create plugin: ' + e);				}			}		}		catch (e)		{			//alert("Swekey_Plugin " + e);			g_SwekeyPlugin = null;		}		return null;	}	// -------------------------------------------------------------------	// Returns true if the swekey plugin is installed	function Swekey_Installed()	{		return (Swekey_Plugin() != null);	}	// -------------------------------------------------------------------	// List the id of the Swekey connected to the PC	// Returns a string containing comma separated Swekey Ids    // A Swekey is a 32 char hexadecimal value.	function Swekey_ListKeyIds()	{		try		{			return Swekey_Plugin().list();		}		catch (e)		{//			alert("Swekey_ListKeyIds " + e);		}		return "";	}	// -------------------------------------------------------------------	// Ask the Connected Swekey to generate an OTP	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// rt: A random token	// return: The calculated OTP encoded in a 64 chars hexadecimal value.	function Swekey_GetOtp(id, rt)	{		try		{			return Swekey_Plugin().getotp(id, rt);		}		catch (e)		{//			alert("Swekey_GetOtp " + e);		}		return "";	}	// -------------------------------------------------------------------	// Ask the Connected Swekey to generate a OTP linked to the current https host	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// rt: A random token	// return: The calculated OTP encoded in a 64 chars hexadecimal value.	// or "" if the current url does not start with https	function Swekey_GetLinkedOtp(id, rt)	{		try		{			return Swekey_Plugin().getlinkedotp(id, rt);		}		catch (e)		{//			alert("Swekey_GetSOtp " + e);		}		return "";	}	// -------------------------------------------------------------------    // Calls Swekey_GetOtp or Swekey_GetLinkedOtp depending if we are in    // an https page or not.	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// rt: A random token	// return: The calculated OTP encoded in a 64 chars hexadecimal value.	function Swekey_GetSmartOtp(id, rt)	{        var res = Swekey_GetLinkedOtp(id, rt);        if (res == "")            res = Swekey_GetOtp(id, rt);		return res;	}	// -------------------------------------------------------------------	// Set a unplug handler (url) to the specified connected feebee	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// key: The key that index that url, (aplhanumeric values only)	// url: The url that will be launched ("" deletes the url)	function Swekey_SetUnplugUrl(id, key, url)	{		try		{			return Swekey_Plugin().setunplugurl(id, key, url);		}		catch (e)		{//			alert("Swekey_SetUnplugUrl " + e);		}	}</script>
<?php//============================================================+// File name   : encodings_maps.php// Version     : 1.0.001// Begin       : 2011-10-01// Last Update : 2011-11-15// Author      : Nicola Asuni - Tecnick.com LTD - Manor Coach House, Church Hill, Aldershot, Hants, GU12 4RQ, UK - www.tecnick.com - info@tecnick.com// License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)// -------------------------------------------------------------------// Copyright (C) 2008-2012  Nicola Asuni - Tecnick.com LTD//// This file is part of TCPDF software library.//// TCPDF is free software: you can redistribute it and/or modify it// under the terms of the GNU Lesser General Public License as// published by the Free Software Foundation, either version 3 of the// License, or (at your option) any later version.//// TCPDF is distributed in the hope that it will be useful, but// WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.// See the GNU Lesser General Public License for more details.//// You should have received a copy of the GNU Lesser General Public License// along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.//// See LICENSE.TXT file for more information.// -------------------------------------------------------------------//// Description : Unicode data for TCPDF library.////============================================================+/** * @file * Font encodings maps class for TCPDF library. * @author Nicola Asuni * @package com.tecnick.tcpdf * @since 5.9.123 (2011-10-01) *//** * @class TCPDF_ENCODING_MAPS * This is a PHP class containing Font encodings maps class for TCPDF library. * @package com.tecnick.tcpdf * @version 1.0.000 * @author Nicola Asuni - info@tecnick.com */class TCPDF_ENCODING_MAPS {/** * Array of Encoding Maps. * @public */public $encmap = array(// encoding map for: cp1251'cp1251' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'afii10051',129=>'afii10052',130=>'quotesinglbase',131=>'afii10100',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'Euro',137=>'perthousand',138=>'afii10058',139=>'guilsinglleft',140=>'afii10059',141=>'afii10061',142=>'afii10060',143=>'afii10145',144=>'afii10099',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'trademark',154=>'afii10106',155=>'guilsinglright',156=>'afii10107',157=>'afii10109',158=>'afii10108',159=>'afii10193',160=>'space',161=>'afii10062',162=>'afii10110',163=>'afii10057',164=>'currency',165=>'afii10050',166=>'brokenbar',167=>'section',168=>'afii10023',169=>'copyright',170=>'afii10053',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'afii10056',176=>'degree',177=>'plusminus',178=>'afii10055',179=>'afii10103',180=>'afii10098',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'afii10071',185=>'afii61352',186=>'afii10101',187=>'guillemotright',188=>'afii10105',189=>'afii10054',190=>'afii10102',191=>'afii10104',192=>'afii10017',193=>'afii10018',194=>'afii10019',195=>'afii10020',196=>'afii10021',197=>'afii10022',198=>'afii10024',199=>'afii10025',200=>'afii10026',201=>'afii10027',202=>'afii10028',203=>'afii10029',204=>'afii10030',205=>'afii10031',206=>'afii10032',207=>'afii10033',208=>'afii10034',209=>'afii10035',210=>'afii10036',211=>'afii10037',212=>'afii10038',213=>'afii10039',214=>'afii10040',215=>'afii10041',216=>'afii10042',217=>'afii10043',218=>'afii10044',219=>'afii10045',220=>'afii10046',221=>'afii10047',222=>'afii10048',223=>'afii10049',224=>'afii10065',225=>'afii10066',226=>'afii10067',227=>'afii10068',228=>'afii10069',229=>'afii10070',230=>'afii10072',231=>'afii10073',232=>'afii10074',233=>'afii10075',234=>'afii10076',235=>'afii10077',236=>'afii10078',237=>'afii10079',238=>'afii10080',239=>'afii10081',240=>'afii10082',241=>'afii10083',242=>'afii10084',243=>'afii10085',244=>'afii10086',245=>'afii10087',246=>'afii10088',247=>'afii10089',248=>'afii10090',249=>'afii10091',250=>'afii10092',251=>'afii10093',252=>'afii10094',253=>'afii10095',254=>'afii10096',255=>'afii10097'),// encoding map for: iso-8859-4'iso-8859-4' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'Aogonek',162=>'kgreenlandic',163=>'Rcommaaccent',164=>'currency',165=>'Itilde',166=>'Lcommaaccent',167=>'section',168=>'dieresis',169=>'Scaron',170=>'Emacron',171=>'Gcommaaccent',172=>'Tbar',173=>'hyphen',174=>'Zcaron',175=>'macron',176=>'degree',177=>'aogonek',178=>'ogonek',179=>'rcommaaccent',180=>'acute',181=>'itilde',182=>'lcommaaccent',183=>'caron',184=>'cedilla',185=>'scaron',186=>'emacron',187=>'gcommaaccent',188=>'tbar',189=>'Eng',190=>'zcaron',191=>'eng',192=>'Amacron',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Iogonek',200=>'Ccaron',201=>'Eacute',202=>'Eogonek',203=>'Edieresis',204=>'Edotaccent',205=>'Iacute',206=>'Icircumflex',207=>'Imacron',208=>'Dcroat',209=>'Ncommaaccent',210=>'Omacron',211=>'Kcommaaccent',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Uogonek',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Utilde',222=>'Umacron',223=>'germandbls',224=>'amacron',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'iogonek',232=>'ccaron',233=>'eacute',234=>'eogonek',235=>'edieresis',236=>'edotaccent',237=>'iacute',238=>'icircumflex',239=>'imacron',240=>'dcroat',241=>'ncommaaccent',242=>'omacron',243=>'kcommaaccent',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'uogonek',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'utilde',254=>'umacron',255=>'dotaccent'),// encoding map for: cp1255'cp1255' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'circumflex',137=>'perthousand',138=>'.notdef',139=>'guilsinglleft',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'tilde',153=>'trademark',154=>'.notdef',155=>'guilsinglright',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'afii57636',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'multiply',171=>'guillemotleft',172=>'logicalnot',173=>'sfthyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'middot',184=>'cedilla',185=>'onesuperior',186=>'divide',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'afii57799',193=>'afii57801',194=>'afii57800',195=>'afii57802',196=>'afii57793',197=>'afii57794',198=>'afii57795',199=>'afii57798',200=>'afii57797',201=>'afii57806',202=>'.notdef',203=>'afii57796',204=>'afii57807',205=>'afii57839',206=>'afii57645',207=>'afii57841',208=>'afii57842',209=>'afii57804',210=>'afii57803',211=>'afii57658',212=>'afii57716',213=>'afii57717',214=>'afii57718',215=>'gereshhebrew',216=>'gershayimhebrew',217=>'.notdef',218=>'.notdef',219=>'.notdef',220=>'.notdef',221=>'.notdef',222=>'.notdef',223=>'.notdef',224=>'afii57664',225=>'afii57665',226=>'afii57666',227=>'afii57667',228=>'afii57668',229=>'afii57669',230=>'afii57670',231=>'afii57671',232=>'afii57672',233=>'afii57673',234=>'afii57674',235=>'afii57675',236=>'afii57676',237=>'afii57677',238=>'afii57678',239=>'afii57679',240=>'afii57680',241=>'afii57681',242=>'afii57682',243=>'afii57683',244=>'afii57684',245=>'afii57685',246=>'afii57686',247=>'afii57687',248=>'afii57688',249=>'afii57689',250=>'afii57690',251=>'.notdef',252=>'.notdef',253=>'afii299',254=>'afii300',255=>'.notdef'),// encoding map for: iso-8859-11'iso-8859-11' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'kokaithai',162=>'khokhaithai',163=>'khokhuatthai',164=>'khokhwaithai',165=>'khokhonthai',166=>'khorakhangthai',167=>'ngonguthai',168=>'chochanthai',169=>'chochingthai',170=>'chochangthai',171=>'sosothai',172=>'chochoethai',173=>'yoyingthai',174=>'dochadathai',175=>'topatakthai',176=>'thothanthai',177=>'thonangmonthothai',178=>'thophuthaothai',179=>'nonenthai',180=>'dodekthai',181=>'totaothai',182=>'thothungthai',183=>'thothahanthai',184=>'thothongthai',185=>'nonuthai',186=>'bobaimaithai',187=>'poplathai',188=>'phophungthai',189=>'fofathai',190=>'phophanthai',191=>'fofanthai',192=>'phosamphaothai',193=>'momathai',194=>'yoyakthai',195=>'roruathai',196=>'ruthai',197=>'lolingthai',198=>'luthai',199=>'wowaenthai',200=>'sosalathai',201=>'sorusithai',202=>'sosuathai',203=>'hohipthai',204=>'lochulathai',205=>'oangthai',206=>'honokhukthai',207=>'paiyannoithai',208=>'saraathai',209=>'maihanakatthai',210=>'saraaathai',211=>'saraamthai',212=>'saraithai',213=>'saraiithai',214=>'sarauethai',215=>'saraueethai',216=>'sarauthai',217=>'sarauuthai',218=>'phinthuthai',219=>'.notdef',220=>'.notdef',221=>'.notdef',222=>'.notdef',223=>'bahtthai',224=>'saraethai',225=>'saraaethai',226=>'saraothai',227=>'saraaimaimuanthai',228=>'saraaimaimalaithai',229=>'lakkhangyaothai',230=>'maiyamokthai',231=>'maitaikhuthai',232=>'maiekthai',233=>'maithothai',234=>'maitrithai',235=>'maichattawathai',236=>'thanthakhatthai',237=>'nikhahitthai',238=>'yamakkanthai',239=>'fongmanthai',240=>'zerothai',241=>'onethai',242=>'twothai',243=>'threethai',244=>'fourthai',245=>'fivethai',246=>'sixthai',247=>'seventhai',248=>'eightthai',249=>'ninethai',250=>'angkhankhuthai',251=>'khomutthai',252=>'.notdef',253=>'.notdef',254=>'.notdef',255=>'.notdef'),// encoding map for: cp1257'cp1257' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'.notdef',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'.notdef',137=>'perthousand',138=>'.notdef',139=>'guilsinglleft',140=>'.notdef',141=>'dieresis',142=>'caron',143=>'cedilla',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'trademark',154=>'.notdef',155=>'guilsinglright',156=>'.notdef',157=>'macron',158=>'ogonek',159=>'.notdef',160=>'space',161=>'.notdef',162=>'cent',163=>'sterling',164=>'currency',165=>'.notdef',166=>'brokenbar',167=>'section',168=>'Oslash',169=>'copyright',170=>'Rcommaaccent',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'AE',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'oslash',185=>'onesuperior',186=>'rcommaaccent',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'ae',192=>'Aogonek',193=>'Iogonek',194=>'Amacron',195=>'Cacute',196=>'Adieresis',197=>'Aring',198=>'Eogonek',199=>'Emacron',200=>'Ccaron',201=>'Eacute',202=>'Zacute',203=>'Edotaccent',204=>'Gcommaaccent',205=>'Kcommaaccent',206=>'Imacron',207=>'Lcommaaccent',208=>'Scaron',209=>'Nacute',210=>'Ncommaaccent',211=>'Oacute',212=>'Omacron',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Uogonek',217=>'Lslash',218=>'Sacute',219=>'Umacron',220=>'Udieresis',221=>'Zdotaccent',222=>'Zcaron',223=>'germandbls',224=>'aogonek',225=>'iogonek',226=>'amacron',227=>'cacute',228=>'adieresis',229=>'aring',230=>'eogonek',231=>'emacron',232=>'ccaron',233=>'eacute',234=>'zacute',235=>'edotaccent',236=>'gcommaaccent',237=>'kcommaaccent',238=>'imacron',239=>'lcommaaccent',240=>'scaron',241=>'nacute',242=>'ncommaaccent',243=>'oacute',244=>'omacron',245=>'otilde',246=>'odieresis',247=>'divide',248=>'uogonek',249=>'lslash',250=>'sacute',251=>'umacron',252=>'udieresis',253=>'zdotaccent',254=>'zcaron',255=>'dotaccent'),// encoding map for: cp1258'cp1258' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'circumflex',137=>'perthousand',138=>'.notdef',139=>'guilsinglleft',140=>'OE',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'tilde',153=>'trademark',154=>'.notdef',155=>'guilsinglright',156=>'oe',157=>'.notdef',158=>'.notdef',159=>'Ydieresis',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Abreve',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'gravecomb',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Dcroat',209=>'Ntilde',210=>'hookabovecomb',211=>'Oacute',212=>'Ocircumflex',213=>'Ohorn',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Uhorn',222=>'tildecomb',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'abreve',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'acutecomb',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'dcroat',241=>'ntilde',242=>'dotbelowcomb',243=>'oacute',244=>'ocircumflex',245=>'ohorn',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'uhorn',254=>'dong',255=>'ydieresis'),// encoding map for: cp1253'cp1253' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'.notdef',137=>'perthousand',138=>'.notdef',139=>'guilsinglleft',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'trademark',154=>'.notdef',155=>'guilsinglright',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'dieresistonos',162=>'Alphatonos',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'.notdef',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'afii00208',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'tonos',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'Epsilontonos',185=>'Etatonos',186=>'Iotatonos',187=>'guillemotright',188=>'Omicrontonos',189=>'onehalf',190=>'Upsilontonos',191=>'Omegatonos',192=>'iotadieresistonos',193=>'Alpha',194=>'Beta',195=>'Gamma',196=>'Delta',197=>'Epsilon',198=>'Zeta',199=>'Eta',200=>'Theta',201=>'Iota',202=>'Kappa',203=>'Lambda',204=>'Mu',205=>'Nu',206=>'Xi',207=>'Omicron',208=>'Pi',209=>'Rho',210=>'.notdef',211=>'Sigma',212=>'Tau',213=>'Upsilon',214=>'Phi',215=>'Chi',216=>'Psi',217=>'Omega',218=>'Iotadieresis',219=>'Upsilondieresis',220=>'alphatonos',221=>'epsilontonos',222=>'etatonos',223=>'iotatonos',224=>'upsilondieresistonos',225=>'alpha',226=>'beta',227=>'gamma',228=>'delta',229=>'epsilon',230=>'zeta',231=>'eta',232=>'theta',233=>'iota',234=>'kappa',235=>'lambda',236=>'mu',237=>'nu',238=>'xi',239=>'omicron',240=>'pi',241=>'rho',242=>'sigma1',243=>'sigma',244=>'tau',245=>'upsilon',246=>'phi',247=>'chi',248=>'psi',249=>'omega',250=>'iotadieresis',251=>'upsilondieresis',252=>'omicrontonos',253=>'upsilontonos',254=>'omegatonos',255=>'.notdef'),// encoding map for: cp874'cp874' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'ellipsis',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'kokaithai',162=>'khokhaithai',163=>'khokhuatthai',164=>'khokhwaithai',165=>'khokhonthai',166=>'khorakhangthai',167=>'ngonguthai',168=>'chochanthai',169=>'chochingthai',170=>'chochangthai',171=>'sosothai',172=>'chochoethai',173=>'yoyingthai',174=>'dochadathai',175=>'topatakthai',176=>'thothanthai',177=>'thonangmonthothai',178=>'thophuthaothai',179=>'nonenthai',180=>'dodekthai',181=>'totaothai',182=>'thothungthai',183=>'thothahanthai',184=>'thothongthai',185=>'nonuthai',186=>'bobaimaithai',187=>'poplathai',188=>'phophungthai',189=>'fofathai',190=>'phophanthai',191=>'fofanthai',192=>'phosamphaothai',193=>'momathai',194=>'yoyakthai',195=>'roruathai',196=>'ruthai',197=>'lolingthai',198=>'luthai',199=>'wowaenthai',200=>'sosalathai',201=>'sorusithai',202=>'sosuathai',203=>'hohipthai',204=>'lochulathai',205=>'oangthai',206=>'honokhukthai',207=>'paiyannoithai',208=>'saraathai',209=>'maihanakatthai',210=>'saraaathai',211=>'saraamthai',212=>'saraithai',213=>'saraiithai',214=>'sarauethai',215=>'saraueethai',216=>'sarauthai',217=>'sarauuthai',218=>'phinthuthai',219=>'.notdef',220=>'.notdef',221=>'.notdef',222=>'.notdef',223=>'bahtthai',224=>'saraethai',225=>'saraaethai',226=>'saraothai',227=>'saraaimaimuanthai',228=>'saraaimaimalaithai',229=>'lakkhangyaothai',230=>'maiyamokthai',231=>'maitaikhuthai',232=>'maiekthai',233=>'maithothai',234=>'maitrithai',235=>'maichattawathai',236=>'thanthakhatthai',237=>'nikhahitthai',238=>'yamakkanthai',239=>'fongmanthai',240=>'zerothai',241=>'onethai',242=>'twothai',243=>'threethai',244=>'fourthai',245=>'fivethai',246=>'sixthai',247=>'seventhai',248=>'eightthai',249=>'ninethai',250=>'angkhankhuthai',251=>'khomutthai',252=>'.notdef',253=>'.notdef',254=>'.notdef',255=>'.notdef'),// encoding map for: iso-8859-2'iso-8859-2' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'Aogonek',162=>'breve',163=>'Lslash',164=>'currency',165=>'Lcaron',166=>'Sacute',167=>'section',168=>'dieresis',169=>'Scaron',170=>'Scedilla',171=>'Tcaron',172=>'Zacute',173=>'hyphen',174=>'Zcaron',175=>'Zdotaccent',176=>'degree',177=>'aogonek',178=>'ogonek',179=>'lslash',180=>'acute',181=>'lcaron',182=>'sacute',183=>'caron',184=>'cedilla',185=>'scaron',186=>'scedilla',187=>'tcaron',188=>'zacute',189=>'hungarumlaut',190=>'zcaron',191=>'zdotaccent',192=>'Racute',193=>'Aacute',194=>'Acircumflex',195=>'Abreve',196=>'Adieresis',197=>'Lacute',198=>'Cacute',199=>'Ccedilla',200=>'Ccaron',201=>'Eacute',202=>'Eogonek',203=>'Edieresis',204=>'Ecaron',205=>'Iacute',206=>'Icircumflex',207=>'Dcaron',208=>'Dcroat',209=>'Nacute',210=>'Ncaron',211=>'Oacute',212=>'Ocircumflex',213=>'Ohungarumlaut',214=>'Odieresis',215=>'multiply',216=>'Rcaron',217=>'Uring',218=>'Uacute',219=>'Uhungarumlaut',220=>'Udieresis',221=>'Yacute',222=>'Tcommaaccent',223=>'germandbls',224=>'racute',225=>'aacute',226=>'acircumflex',227=>'abreve',228=>'adieresis',229=>'lacute',230=>'cacute',231=>'ccedilla',232=>'ccaron',233=>'eacute',234=>'eogonek',235=>'edieresis',236=>'ecaron',237=>'iacute',238=>'icircumflex',239=>'dcaron',240=>'dcroat',241=>'nacute',242=>'ncaron',243=>'oacute',244=>'ocircumflex',245=>'ohungarumlaut',246=>'odieresis',247=>'divide',248=>'rcaron',249=>'uring',250=>'uacute',251=>'uhungarumlaut',252=>'udieresis',253=>'yacute',254=>'tcommaaccent',255=>'dotaccent'),// encoding map for: cp1250'cp1250' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'.notdef',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'.notdef',137=>'perthousand',138=>'Scaron',139=>'guilsinglleft',140=>'Sacute',141=>'Tcaron',142=>'Zcaron',143=>'Zacute',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'trademark',154=>'scaron',155=>'guilsinglright',156=>'sacute',157=>'tcaron',158=>'zcaron',159=>'zacute',160=>'space',161=>'caron',162=>'breve',163=>'Lslash',164=>'currency',165=>'Aogonek',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'Scedilla',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'Zdotaccent',176=>'degree',177=>'plusminus',178=>'ogonek',179=>'lslash',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'aogonek',186=>'scedilla',187=>'guillemotright',188=>'Lcaron',189=>'hungarumlaut',190=>'lcaron',191=>'zdotaccent',192=>'Racute',193=>'Aacute',194=>'Acircumflex',195=>'Abreve',196=>'Adieresis',197=>'Lacute',198=>'Cacute',199=>'Ccedilla',200=>'Ccaron',201=>'Eacute',202=>'Eogonek',203=>'Edieresis',204=>'Ecaron',205=>'Iacute',206=>'Icircumflex',207=>'Dcaron',208=>'Dcroat',209=>'Nacute',210=>'Ncaron',211=>'Oacute',212=>'Ocircumflex',213=>'Ohungarumlaut',214=>'Odieresis',215=>'multiply',216=>'Rcaron',217=>'Uring',218=>'Uacute',219=>'Uhungarumlaut',220=>'Udieresis',221=>'Yacute',222=>'Tcommaaccent',223=>'germandbls',224=>'racute',225=>'aacute',226=>'acircumflex',227=>'abreve',228=>'adieresis',229=>'lacute',230=>'cacute',231=>'ccedilla',232=>'ccaron',233=>'eacute',234=>'eogonek',235=>'edieresis',236=>'ecaron',237=>'iacute',238=>'icircumflex',239=>'dcaron',240=>'dcroat',241=>'nacute',242=>'ncaron',243=>'oacute',244=>'ocircumflex',245=>'ohungarumlaut',246=>'odieresis',247=>'divide',248=>'rcaron',249=>'uring',250=>'uacute',251=>'uhungarumlaut',252=>'udieresis',253=>'yacute',254=>'tcommaaccent',255=>'dotaccent'),// encoding map for: iso-8859-7'iso-8859-7' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'quoteleft',162=>'quoteright',163=>'sterling',164=>'.notdef',165=>'.notdef',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'.notdef',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'.notdef',175=>'afii00208',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'tonos',181=>'dieresistonos',182=>'Alphatonos',183=>'periodcentered',184=>'Epsilontonos',185=>'Etatonos',186=>'Iotatonos',187=>'guillemotright',188=>'Omicrontonos',189=>'onehalf',190=>'Upsilontonos',191=>'Omegatonos',192=>'iotadieresistonos',193=>'Alpha',194=>'Beta',195=>'Gamma',196=>'Delta',197=>'Epsilon',198=>'Zeta',199=>'Eta',200=>'Theta',201=>'Iota',202=>'Kappa',203=>'Lambda',204=>'Mu',205=>'Nu',206=>'Xi',207=>'Omicron',208=>'Pi',209=>'Rho',210=>'.notdef',211=>'Sigma',212=>'Tau',213=>'Upsilon',214=>'Phi',215=>'Chi',216=>'Psi',217=>'Omega',218=>'Iotadieresis',219=>'Upsilondieresis',220=>'alphatonos',221=>'epsilontonos',222=>'etatonos',223=>'iotatonos',224=>'upsilondieresistonos',225=>'alpha',226=>'beta',227=>'gamma',228=>'delta',229=>'epsilon',230=>'zeta',231=>'eta',232=>'theta',233=>'iota',234=>'kappa',235=>'lambda',236=>'mu',237=>'nu',238=>'xi',239=>'omicron',240=>'pi',241=>'rho',242=>'sigma1',243=>'sigma',244=>'tau',245=>'upsilon',246=>'phi',247=>'chi',248=>'psi',249=>'omega',250=>'iotadieresis',251=>'upsilondieresis',252=>'omicrontonos',253=>'upsilontonos',254=>'omegatonos',255=>'.notdef'),// encoding map for: iso-8859-9'iso-8859-9' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Gbreve',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Idotaccent',222=>'Scedilla',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'gbreve',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'dotlessi',254=>'scedilla',255=>'ydieresis'),// encoding map for: cp1252'cp1252' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'circumflex',137=>'perthousand',138=>'Scaron',139=>'guilsinglleft',140=>'OE',141=>'.notdef',142=>'Zcaron',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'tilde',153=>'trademark',154=>'scaron',155=>'guilsinglright',156=>'oe',157=>'.notdef',158=>'zcaron',159=>'Ydieresis',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Eth',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Yacute',222=>'Thorn',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'eth',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'yacute',254=>'thorn',255=>'ydieresis'),// encoding map for: cp1254'cp1254' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'circumflex',137=>'perthousand',138=>'Scaron',139=>'guilsinglleft',140=>'OE',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'tilde',153=>'trademark',154=>'scaron',155=>'guilsinglright',156=>'oe',157=>'.notdef',158=>'.notdef',159=>'Ydieresis',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Gbreve',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Idotaccent',222=>'Scedilla',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'gbreve',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'dotlessi',254=>'scedilla',255=>'ydieresis'),// encoding map for: iso-8859-1'iso-8859-1' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Eth',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Yacute',222=>'Thorn',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'eth',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'yacute',254=>'thorn',255=>'ydieresis'),// encoding map for: iso-8859-15'iso-8859-15' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'Euro',165=>'yen',166=>'Scaron',167=>'section',168=>'scaron',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'Zcaron',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'zcaron',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'OE',189=>'oe',190=>'Ydieresis',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Eth',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Yacute',222=>'Thorn',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'eth',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'yacute',254=>'thorn',255=>'ydieresis'),// encoding map for: iso-8859-5'iso-8859-5' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'afii10023',162=>'afii10051',163=>'afii10052',164=>'afii10053',165=>'afii10054',166=>'afii10055',167=>'afii10056',168=>'afii10057',169=>'afii10058',170=>'afii10059',171=>'afii10060',172=>'afii10061',173=>'hyphen',174=>'afii10062',175=>'afii10145',176=>'afii10017',177=>'afii10018',178=>'afii10019',179=>'afii10020',180=>'afii10021',181=>'afii10022',182=>'afii10024',183=>'afii10025',184=>'afii10026',185=>'afii10027',186=>'afii10028',187=>'afii10029',188=>'afii10030',189=>'afii10031',190=>'afii10032',191=>'afii10033',192=>'afii10034',193=>'afii10035',194=>'afii10036',195=>'afii10037',196=>'afii10038',197=>'afii10039',198=>'afii10040',199=>'afii10041',200=>'afii10042',201=>'afii10043',202=>'afii10044',203=>'afii10045',204=>'afii10046',205=>'afii10047',206=>'afii10048',207=>'afii10049',208=>'afii10065',209=>'afii10066',210=>'afii10067',211=>'afii10068',212=>'afii10069',213=>'afii10070',214=>'afii10072',215=>'afii10073',216=>'afii10074',217=>'afii10075',218=>'afii10076',219=>'afii10077',220=>'afii10078',221=>'afii10079',222=>'afii10080',223=>'afii10081',224=>'afii10082',225=>'afii10083',226=>'afii10084',227=>'afii10085',228=>'afii10086',229=>'afii10087',230=>'afii10088',231=>'afii10089',232=>'afii10090',233=>'afii10091',234=>'afii10092',235=>'afii10093',236=>'afii10094',237=>'afii10095',238=>'afii10096',239=>'afii10097',240=>'afii61352',241=>'afii10071',242=>'afii10099',243=>'afii10100',244=>'afii10101',245=>'afii10102',246=>'afii10103',247=>'afii10104',248=>'afii10105',249=>'afii10106',250=>'afii10107',251=>'afii10108',252=>'afii10109',253=>'section',254=>'afii10110',255=>'afii10193'),// encoding map for: iso-8859-5'iso-8859-5' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'afii10023',162=>'afii10051',163=>'afii10052',164=>'afii10053',165=>'afii10054',166=>'afii10055',167=>'afii10056',168=>'afii10057',169=>'afii10058',170=>'afii10059',171=>'afii10060',172=>'afii10061',173=>'hyphen',174=>'afii10062',175=>'afii10145',176=>'afii10017',177=>'afii10018',178=>'afii10019',179=>'afii10020',180=>'afii10021',181=>'afii10022',182=>'afii10024',183=>'afii10025',184=>'afii10026',185=>'afii10027',186=>'afii10028',187=>'afii10029',188=>'afii10030',189=>'afii10031',190=>'afii10032',191=>'afii10033',192=>'afii10034',193=>'afii10035',194=>'afii10036',195=>'afii10037',196=>'afii10038',197=>'afii10039',198=>'afii10040',199=>'afii10041',200=>'afii10042',201=>'afii10043',202=>'afii10044',203=>'afii10045',204=>'afii10046',205=>'afii10047',206=>'afii10048',207=>'afii10049',208=>'afii10065',209=>'afii10066',210=>'afii10067',211=>'afii10068',212=>'afii10069',213=>'afii10070',214=>'afii10072',215=>'afii10073',216=>'afii10074',217=>'afii10075',218=>'afii10076',219=>'afii10077',220=>'afii10078',221=>'afii10079',222=>'afii10080',223=>'afii10081',224=>'afii10082',225=>'afii10083',226=>'afii10084',227=>'afii10085',228=>'afii10086',229=>'afii10087',230=>'afii10088',231=>'afii10089',232=>'afii10090',233=>'afii10091',234=>'afii10092',235=>'afii10093',236=>'afii10094',237=>'afii10095',238=>'afii10096',239=>'afii10097',240=>'afii61352',241=>'afii10071',242=>'afii10099',243=>'afii10100',244=>'afii10101',245=>'afii10102',246=>'afii10103',247=>'afii10104',248=>'afii10105',249=>'afii10106',250=>'afii10107',251=>'afii10108',252=>'afii10109',253=>'section',254=>'afii10110',255=>'afii10193'),// encoding map for: koi8-r'koi8-r' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'SF100000',129=>'SF110000',130=>'SF010000',131=>'SF030000',132=>'SF020000',133=>'SF040000',134=>'SF080000',135=>'SF090000',136=>'SF060000',137=>'SF070000',138=>'SF050000',139=>'upblock',140=>'dnblock',141=>'block',142=>'lfblock',143=>'rtblock',144=>'ltshade',145=>'shade',146=>'dkshade',147=>'integraltp',148=>'filledbox',149=>'periodcentered',150=>'radical',151=>'approxequal',152=>'lessequal',153=>'greaterequal',154=>'space',155=>'integralbt',156=>'degree',157=>'twosuperior',158=>'periodcentered',159=>'divide',160=>'SF430000',161=>'SF240000',162=>'SF510000',163=>'afii10071',164=>'SF520000',165=>'SF390000',166=>'SF220000',167=>'SF210000',168=>'SF250000',169=>'SF500000',170=>'SF490000',171=>'SF380000',172=>'SF280000',173=>'SF270000',174=>'SF260000',175=>'SF360000',176=>'SF370000',177=>'SF420000',178=>'SF190000',179=>'afii10023',180=>'SF200000',181=>'SF230000',182=>'SF470000',183=>'SF480000',184=>'SF410000',185=>'SF450000',186=>'SF460000',187=>'SF400000',188=>'SF540000',189=>'SF530000',190=>'SF440000',191=>'copyright',192=>'afii10096',193=>'afii10065',194=>'afii10066',195=>'afii10088',196=>'afii10069',197=>'afii10070',198=>'afii10086',199=>'afii10068',200=>'afii10087',201=>'afii10074',202=>'afii10075',203=>'afii10076',204=>'afii10077',205=>'afii10078',206=>'afii10079',207=>'afii10080',208=>'afii10081',209=>'afii10097',210=>'afii10082',211=>'afii10083',212=>'afii10084',213=>'afii10085',214=>'afii10072',215=>'afii10067',216=>'afii10094',217=>'afii10093',218=>'afii10073',219=>'afii10090',220=>'afii10095',221=>'afii10091',222=>'afii10089',223=>'afii10092',224=>'afii10048',225=>'afii10017',226=>'afii10018',227=>'afii10040',228=>'afii10021',229=>'afii10022',230=>'afii10038',231=>'afii10020',232=>'afii10039',233=>'afii10026',234=>'afii10027',235=>'afii10028',236=>'afii10029',237=>'afii10030',238=>'afii10031',239=>'afii10032',240=>'afii10033',241=>'afii10049',242=>'afii10034',243=>'afii10035',244=>'afii10036',245=>'afii10037',246=>'afii10024',247=>'afii10019',248=>'afii10046',249=>'afii10045',250=>'afii10025',251=>'afii10042',252=>'afii10047',253=>'afii10043',254=>'afii10041',255=>'afii10044'),// encoding map for: koi8-r'koi8-r' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'SF100000',129=>'SF110000',130=>'SF010000',131=>'SF030000',132=>'SF020000',133=>'SF040000',134=>'SF080000',135=>'SF090000',136=>'SF060000',137=>'SF070000',138=>'SF050000',139=>'upblock',140=>'dnblock',141=>'block',142=>'lfblock',143=>'rtblock',144=>'ltshade',145=>'shade',146=>'dkshade',147=>'integraltp',148=>'filledbox',149=>'periodcentered',150=>'radical',151=>'approxequal',152=>'lessequal',153=>'greaterequal',154=>'space',155=>'integralbt',156=>'degree',157=>'twosuperior',158=>'periodcentered',159=>'divide',160=>'SF430000',161=>'SF240000',162=>'SF510000',163=>'afii10071',164=>'SF520000',165=>'SF390000',166=>'SF220000',167=>'SF210000',168=>'SF250000',169=>'SF500000',170=>'SF490000',171=>'SF380000',172=>'SF280000',173=>'SF270000',174=>'SF260000',175=>'SF360000',176=>'SF370000',177=>'SF420000',178=>'SF190000',179=>'afii10023',180=>'SF200000',181=>'SF230000',182=>'SF470000',183=>'SF480000',184=>'SF410000',185=>'SF450000',186=>'SF460000',187=>'SF400000',188=>'SF540000',189=>'SF530000',190=>'SF440000',191=>'copyright',192=>'afii10096',193=>'afii10065',194=>'afii10066',195=>'afii10088',196=>'afii10069',197=>'afii10070',198=>'afii10086',199=>'afii10068',200=>'afii10087',201=>'afii10074',202=>'afii10075',203=>'afii10076',204=>'afii10077',205=>'afii10078',206=>'afii10079',207=>'afii10080',208=>'afii10081',209=>'afii10097',210=>'afii10082',211=>'afii10083',212=>'afii10084',213=>'afii10085',214=>'afii10072',215=>'afii10067',216=>'afii10094',217=>'afii10093',218=>'afii10073',219=>'afii10090',220=>'afii10095',221=>'afii10091',222=>'afii10089',223=>'afii10092',224=>'afii10048',225=>'afii10017',226=>'afii10018',227=>'afii10040',228=>'afii10021',229=>'afii10022',230=>'afii10038',231=>'afii10020',232=>'afii10039',233=>'afii10026',234=>'afii10027',235=>'afii10028',236=>'afii10029',237=>'afii10030',238=>'afii10031',239=>'afii10032',240=>'afii10033',241=>'afii10049',242=>'afii10034',243=>'afii10035',244=>'afii10036',245=>'afii10037',246=>'afii10024',247=>'afii10019',248=>'afii10046',249=>'afii10045',250=>'afii10025',251=>'afii10042',252=>'afii10047',253=>'afii10043',254=>'afii10041',255=>'afii10044'),// encoding map for: iso-8859-16'iso-8859-16' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'Aogonek',162=>'aogonek',163=>'Lslash',164=>'Euro',165=>'quotedblbase',166=>'Scaron',167=>'section',168=>'scaron',169=>'copyright',170=>'Scommaaccent',171=>'guillemotleft',172=>'Zacute',173=>'hyphen',174=>'zacute',175=>'Zdotaccent',176=>'degree',177=>'plusminus',178=>'Ccaron',179=>'lslash',180=>'Zcaron',181=>'quotedblright',182=>'paragraph',183=>'periodcentered',184=>'zcaron',185=>'ccaron',186=>'scommaaccent',187=>'guillemotright',188=>'OE',189=>'oe',190=>'Ydieresis',191=>'zdotaccent',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Abreve',196=>'Adieresis',197=>'Cacute',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Dcroat',209=>'Nacute',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Ohungarumlaut',214=>'Odieresis',215=>'Sacute',216=>'Uhungarumlaut',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Eogonek',222=>'Tcommaaccent',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'abreve',228=>'adieresis',229=>'cacute',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'dcroat',241=>'nacute',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'ohungarumlaut',246=>'odieresis',247=>'sacute',248=>'uhungarumlaut',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'eogonek',254=>'tcommaaccent',255=>'ydieresis'),// encoding map for: koi8-u'koi8-u' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'SF100000',129=>'SF110000',130=>'SF010000',131=>'SF030000',132=>'SF020000',133=>'SF040000',134=>'SF080000',135=>'SF090000',136=>'SF060000',137=>'SF070000',138=>'SF050000',139=>'upblock',140=>'dnblock',141=>'block',142=>'lfblock',143=>'rtblock',144=>'ltshade',145=>'shade',146=>'dkshade',147=>'integraltp',148=>'filledbox',149=>'bullet',150=>'radical',151=>'approxequal',152=>'lessequal',153=>'greaterequal',154=>'space',155=>'integralbt',156=>'degree',157=>'twosuperior',158=>'periodcentered',159=>'divide',160=>'SF430000',161=>'SF240000',162=>'SF510000',163=>'afii10071',164=>'afii10101',165=>'SF390000',166=>'afii10103',167=>'afii10104',168=>'SF250000',169=>'SF500000',170=>'SF490000',171=>'SF380000',172=>'SF280000',173=>'afii10098',174=>'SF260000',175=>'SF360000',176=>'SF370000',177=>'SF420000',178=>'SF190000',179=>'afii10023',180=>'afii10053',181=>'SF230000',182=>'afii10055',183=>'afii10056',184=>'SF410000',185=>'SF450000',186=>'SF460000',187=>'SF400000',188=>'SF540000',189=>'afii10050',190=>'SF440000',191=>'copyright',192=>'afii10096',193=>'afii10065',194=>'afii10066',195=>'afii10088',196=>'afii10069',197=>'afii10070',198=>'afii10086',199=>'afii10068',200=>'afii10087',201=>'afii10074',202=>'afii10075',203=>'afii10076',204=>'afii10077',205=>'afii10078',206=>'afii10079',207=>'afii10080',208=>'afii10081',209=>'afii10097',210=>'afii10082',211=>'afii10083',212=>'afii10084',213=>'afii10085',214=>'afii10072',215=>'afii10067',216=>'afii10094',217=>'afii10093',218=>'afii10073',219=>'afii10090',220=>'afii10095',221=>'afii10091',222=>'afii10089',223=>'afii10092',224=>'afii10048',225=>'afii10017',226=>'afii10018',227=>'afii10040',228=>'afii10021',229=>'afii10022',230=>'afii10038',231=>'afii10020',232=>'afii10039',233=>'afii10026',234=>'afii10027',235=>'afii10028',236=>'afii10029',237=>'afii10030',238=>'afii10031',239=>'afii10032',240=>'afii10033',241=>'afii10049',242=>'afii10034',243=>'afii10035',244=>'afii10036',245=>'afii10037',246=>'afii10024',247=>'afii10019',248=>'afii10046',249=>'afii10045',250=>'afii10025',251=>'afii10042',252=>'afii10047',253=>'afii10043',254=>'afii10041',255=>'afii10044'),// encoding map for: symbol'symbol' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'universal',35=>'numbersign',36=>'existential',37=>'percent',38=>'ampersand',39=>'suchthat',40=>'parenleft',41=>'parenright',42=>'asteriskmath',43=>'plus',44=>'comma',45=>'minus',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'congruent',65=>'Alpha',66=>'Beta',67=>'Chi',68=>'Delta',69=>'Epsilon',70=>'Phi',71=>'Gamma',72=>'Eta',73=>'Iota',74=>'theta1',75=>'Kappa',76=>'Lambda',77=>'Mu',78=>'Nu',79=>'Omicron',80=>'Pi',81=>'Theta',82=>'Rho',83=>'Sigma',84=>'Tau',85=>'Upsilon',86=>'sigma1',87=>'Omega',88=>'Xi',89=>'Psi',90=>'Zeta',91=>'bracketleft',92=>'therefore',93=>'bracketright',94=>'perpendicular',95=>'underscore',96=>'radicalex',97=>'alpha',98=>'beta',99=>'chi',100=>'delta',101=>'epsilon',102=>'phi',103=>'gamma',104=>'eta',105=>'iota',106=>'phi1',107=>'kappa',108=>'lambda',109=>'mu',110=>'nu',111=>'omicron',112=>'pi',113=>'theta',114=>'rho',115=>'sigma',116=>'tau',117=>'upsilon',118=>'omega1',119=>'omega',120=>'xi',121=>'psi',122=>'zeta',123=>'braceleft',124=>'bar',125=>'braceright',126=>'similar',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'Euro',161=>'Upsilon1',162=>'minute',163=>'lessequal',164=>'fraction',165=>'infinity',166=>'florin',167=>'club',168=>'diamond',169=>'heart',170=>'spade',171=>'arrowboth',172=>'arrowleft',173=>'arrowup',174=>'arrowright',175=>'arrowdown',176=>'degree',177=>'plusminus',178=>'second',179=>'greaterequal',180=>'multiply',181=>'proportional',182=>'partialdiff',183=>'bullet',184=>'divide',185=>'notequal',186=>'equivalence',187=>'approxequal',188=>'ellipsis',189=>'arrowvertex',190=>'arrowhorizex',191=>'carriagereturn',192=>'aleph',193=>'Ifraktur',194=>'Rfraktur',195=>'weierstrass',196=>'circlemultiply',197=>'circleplus',198=>'emptyset',199=>'intersection',200=>'union',201=>'propersuperset',202=>'reflexsuperset',203=>'notsubset',204=>'propersubset',205=>'reflexsubset',206=>'element',207=>'notelement',208=>'angle',209=>'gradient',210=>'registerserif',211=>'copyrightserif',212=>'trademarkserif',213=>'product',214=>'radical',215=>'dotmath',216=>'logicalnot',217=>'logicaland',218=>'logicalor',219=>'arrowdblboth',220=>'arrowdblleft',221=>'arrowdblup',222=>'arrowdblright',223=>'arrowdbldown',224=>'lozenge',225=>'angleleft',226=>'registersans',227=>'copyrightsans',228=>'trademarksans',229=>'summation',230=>'parenlefttp',231=>'parenleftex',232=>'parenleftbt',233=>'bracketlefttp',234=>'bracketleftex',235=>'bracketleftbt',236=>'bracelefttp',237=>'braceleftmid',238=>'braceleftbt',239=>'braceex',240=>'.notdef',241=>'angleright',242=>'integral',243=>'integraltp',244=>'integralex',245=>'integralbt',246=>'parenrighttp',247=>'parenrightex',248=>'parenrightbt',249=>'bracketrighttp',250=>'bracketrightex',251=>'bracketrightbt',252=>'bracerighttp',253=>'bracerightmid',254=>'bracerightbt',255=>'.notdef',1226=>'registered',1227=>'copyright',1228=>'trademark')); // end of encoding maps} // --- END OF CLASS ---//============================================================+// END OF FILE//============================================================+
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Export to Texy! text. * * @package PhpMyAdmin-Export * @subpackage Texy */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['texytext'] = array(        'text' => __('Texy! text'),        'extension' => 'txt',        'mime_type' => 'text/plain',        'options' => array(        /* what to dump (structure/data/both) */        array('type' => 'begin_group', 'text' => __('Dump table'), 'name' => 'general_opts'),        array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data'))),        array('type' => 'end_group'),        array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure'),        array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL by')),        array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),        array('type' => 'end_group'),        ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return PMA_exportOutputHandler('===' . __('Database') . ' ' . $db . "\n\n");    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in Texy format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $what;        if (! PMA_exportOutputHandler('== ' . __('Dumping data for table') . ' ' . $table . "\n\n")) {            return false;        }        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        // If required, get fields name at the first line        if (isset($GLOBALS[$what . '_columns'])) {            $text_output = "|------\n";            for ($i = 0; $i < $fields_cnt; $i++) {                $text_output .= '|' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i)));            } // end for            $text_output .= "\n|------\n";            if (! PMA_exportOutputHandler($text_output)) {                return false;            }        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $text_output = '';            for ($j = 0; $j < $fields_cnt; $j++) {                if (! isset($row[$j]) || is_null($row[$j])) {                    $value = $GLOBALS[$what . '_null'];                } elseif ($row[$j] == '0' || $row[$j] != '') {                    $value = $row[$j];                } else {                    $value = ' ';                }                $text_output .= '|' . htmlspecialchars($value);            } // end for            $text_output .= "\n";            if (! PMA_exportOutputHandler($text_output)) {                return false;            }        } // end while        PMA_DBI_free_result($result);        return true;    }    /**     * Outputs table's structure     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         the end of line sequence     * @param string  $error_url    the url to go back in case of error     * @param bool    $do_relation  whether to include relation comments     * @param bool    $do_comments  whether to include the pmadb-style column comments     *                                as comments in the structure; this is deprecated     *                                but the parameter is left here because export.php     *                                calls PMA_exportStructure() also for other export     *                                types which use this parameter     * @param bool    $do_mime      whether to include mime comments     * @param bool    $dates        whether to include creation/update/check dates     * @param string  $export_mode  'create_table', 'triggers', 'create_view', 'stand_in'     * @param string  $export_type  'server', 'database', 'table'     * @return  bool      Whether it succeeded     *     * @access  public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        if (! PMA_exportOutputHandler('== ' . __('Table structure for table') . ' ' .$table . "\n\n")) {            return false;        }        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $columns_cnt = 4;        if ($do_relation && $have_rel) {            $columns_cnt++;        }        if ($do_comments && $cfgRelation['commwork']) {            $columns_cnt++;        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;        }        $text_output = "|------\n";        $text_output .= '|' . __('Column');        $text_output .= '|' . __('Type');        $text_output .= '|' . __('Null');        $text_output .= '|' . __('Default');        if ($do_relation && $have_rel) {            $text_output .= '|' . __('Links to');        }        if ($do_comments) {            $text_output .= '|' . __('Comments');            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $text_output .= '|' . htmlspecialchars('MIME');            $mime_map = PMA_getMIME($db, $table, true);        }        $text_output .= "\n|------\n";        if (! PMA_exportOutputHandler($text_output)) {            return false;        }        $columns = PMA_DBI_get_columns($db, $table);        foreach ($columns as $column) {            $text_output = '';            $extracted_fieldspec = PMA_extractFieldSpec($column['Type']);            $type = $extracted_fieldspec['print_type'];            if (empty($type)) {                $type     = '&nbsp;';            }            if (! isset($column['Default'])) {                if ($column['Null'] != 'NO') {                    $column['Default'] = 'NULL';                }            }            $fmt_pre = '';            $fmt_post = '';            if (in_array($column['Field'], $unique_keys)) {                $fmt_pre = '**' . $fmt_pre;                $fmt_post = $fmt_post . '**';            }            if ($column['Key']=='PRI') {                $fmt_pre = '//' . $fmt_pre;                $fmt_post = $fmt_post . '//';            }            $text_output .= '|' . $fmt_pre . htmlspecialchars($column['Field']) . $fmt_post;            $text_output .= '|' . htmlspecialchars($type);            $text_output .= '|' . (($column['Null'] == '' || $column['Null'] == 'NO') ? __('No') : __('Yes'));            $text_output .= '|' . htmlspecialchars(isset($column['Default']) ? $column['Default'] : '');            $field_name = $column['Field'];            if ($do_relation && $have_rel) {                $text_output .= '|' . (isset($res_rel[$field_name]) ? htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' (' . $res_rel[$field_name]['foreign_field'] . ')') : '');            }            if ($do_comments && $cfgRelation['commwork']) {                $text_output .= '|' . (isset($comments[$field_name]) ? htmlspecialchars($comments[$field_name]) : '');            }            if ($do_mime && $cfgRelation['mimework']) {                $text_output .= '|' . (isset($mime_map[$field_name]) ? htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype'])) : '');            }            $text_output .= "\n";            if (! PMA_exportOutputHandler($text_output)) {                return false;            }        } // end while        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * returns code for selecting databases * * @return String HTML code */function PMA_replication_db_multibox(){    $multi_values = '';    $multi_values .= '<select name="db_select[]" size="6" multiple="multiple" id="db_select">';    foreach ($GLOBALS['pma']->databases as $current_db) {        if (PMA_is_system_schema($current_db)) {            continue;        }        if (! empty($selectall) || (isset($tmp_select) && strpos(' ' . $tmp_select, '|' . $current_db . '|'))) {            $is_selected = ' selected="selected"';        } else {            $is_selected = '';        }        $current_db = htmlspecialchars($current_db);        $multi_values .= '                <option value="' . $current_db . '" ' . $is_selected . '>' . $current_db . '</option>';    } // end while    $multi_values .= '</select>';    $multi_values .= '<br /><a href="#" id="db_reset_href">' . __('Uncheck All') . '</a>';    return $multi_values;}/** * prints out code for changing master * * @param String $submitname - submit button name */function PMA_replication_gui_changemaster($submitname){    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();    echo '<form method="post" action="server_replication.php">';    echo PMA_generate_common_hidden_inputs('', '');    echo ' <fieldset id="fieldset_add_user_login">';    echo '  <legend>' . __('Slave configuration') . ' - ' . __('Change or reconfigure master server') . '</legend>';    echo __('Make sure, you have unique server-id in your configuration file (my.cnf). If not, please add the following line into [mysqld] section:') . '<br />';    echo '<pre>server-id=' . time() . '</pre>';    echo '  <div class="item">';    echo '    <label for="text_username">' . __('User name') . ':</label>';    echo '    <input type="text" name="username" id="text_username" maxlength="'. $username_length . '" title="' . __('User name') . '" />';    echo '  </div>';    echo '  <div class="item">';    echo '    <label for="text_pma_pw">' . __('Password') .' :</label>';    echo '    <input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" />';    echo '  </div>';    echo '  <div class="item">';    echo '    <label for="text_hostname">' . __('Host') . ' :</label>';    echo '    <input type="text" id="text_hostname" name="hostname" maxlength="' . $hostname_length . '" value="" />';    echo '  </div>';    echo '  <div class="item">';    echo '     <label for="text_port">' . __('Port') . ':</label>';    echo '     <input type="text" id="text_port" name="port" maxlength="6" value="3306"  />';    echo '  </div>';    echo ' </fieldset>';    echo ' <fieldset id="fieldset_user_privtable_footer" class="tblFooters">';    echo '    <input type="hidden" name="sr_take_action" value="true" />';    echo '     <input type="submit" name="' . $submitname . '" id="confslave_submit" value="' . __('Go') . '" />';    echo ' </fieldset>';    echo '</form>';}/** * This function prints out table with replication status. * * @param string  $type   either master or slave * @param boolean $hidden if true, then default style is set to hidden, default value false * @param boolen  $title  if true, then title is displayed, default true */function PMA_replication_print_status_table($type, $hidden = false, $title = true){    global ${"{$type}_variables"};    global ${"{$type}_variables_alerts"};    global ${"{$type}_variables_oks"};    global ${"server_{$type}_replication"};    global ${"strReplicationStatus_{$type}"};    // TODO check the Masters server id?    // seems to default to '1' when queried via SHOW VARIABLES , but resulted in error on the master when slave connects    // [ERROR] Error reading packet from server: Misconfigured master - server id was not set ( server_errno=1236)    // [ERROR] Got fatal error 1236: 'Misconfigured master - server id was not set' from master when reading data from binary log    //    //$server_id = PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'server_id'", 0, 1);    echo '<div id="replication_' . $type . '_section" style="' . ($hidden ? 'display: none;' : '') . '"> ';    if ($title) {        if ($type == 'master') {            echo '<h4><a name="replication_' . $type . '"></a>' . __('Master status') . '</h4>';        } else {            echo '<h4><a name="replication_' . $type . '"></a>' . __('Slave status') . '</h4>';        }    } else {        echo '<br />';    }    echo '   <table id="server' . $type . 'replicationsummary" class="data"> ';    echo '   <thead>';    echo '    <tr>';    echo '     <th>' . __('Variable') . '</th>';    echo '        <th>' . __('Value') . '</th>';    echo '    </tr>';    echo '   </thead>';    echo '   <tbody>';    $odd_row = true;    foreach (${"{$type}_variables"} as $variable) {        echo '   <tr class="' . ($odd_row ? 'odd' : 'even') . '">';        echo '     <td class="name">';        echo        $variable;        echo '     </td>';        echo '     <td class="value">';        // TODO change to regexp or something, to allow for negative match        if (isset(${"{$type}_variables_alerts"}[$variable])            && ${"{$type}_variables_alerts"}[$variable] == ${"server_{$type}_replication"}[0][$variable]        ) {            echo '<span class="attention">';        } elseif (isset(${"{$type}_variables_oks"}[$variable])            && ${"{$type}_variables_oks"}[$variable] == ${"server_{$type}_replication"}[0][$variable]        ) {            echo '<span class="allfine">';        } else {            echo '<span>';        }        echo ${"server_{$type}_replication"}[0][$variable];        echo '</span>';        echo '  </td>';        echo ' </tr>';        $odd_row = ! $odd_row;    }    echo '   </tbody>';    echo ' </table>';    echo ' <br />';    echo '</div>';}/** * Prints table with slave users connected to this master * * @param boolean $hidden - if true, then default style is set to hidden, default value false */function PMA_replication_print_slaves_table($hidden = false){    // Fetch data    $data = PMA_DBI_fetch_result('SHOW SLAVE HOSTS', null, null);    echo '  <br />';    echo '  <div id="replication_slaves_section" style="' . ($hidden ? 'display: none;' : '') . '"> ';    echo '    <table class="data">';    echo '    <thead>';    echo '      <tr>';    echo '        <th>' . __('Server ID') . '</th>';    echo '        <th>' . __('Host') . '</th>';    echo '      </tr>';    echo '    </thead>';    echo '    <tbody>';    $odd_row = true;    foreach ($data as $slave) {        echo '    <tr class="' . ($odd_row ? 'odd' : 'even') . '">';        echo '      <td class="value">' . $slave['Server_id'] . '</td>';        echo '      <td class="value">' . $slave['Host'] . '</td>';        echo '    </tr>';        $odd_row = ! $odd_row;    }    echo '    </tbody>';    echo '    </table>';    echo '    <br />';    PMA_Message::notice(__('Only slaves started with the --report-host=host_name option are visible in this list.'))->display();    echo '    <br />';    echo '  </div>';}/** * get the correct username and hostname lengths for this MySQL server * * @return  array   username length, hostname length */function PMA_replication_get_username_hostname_length(){    $fields_info = PMA_DBI_get_columns('mysql', 'user');    $username_length = 16;    $hostname_length = 41;    foreach ($fields_info as $val) {        if ($val['Field'] == 'User') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $username_length = $v;            }        } elseif ($val['Field'] == 'Host') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $hostname_length = $v;            }        }    }    return array($username_length, $hostname_length);}/** * Print code to add a replication slave user to the master */function PMA_replication_gui_master_addslaveuser(){    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();    if (isset($GLOBALS['username']) && strlen($GLOBALS['username']) === 0) {        $GLOBALS['pred_username'] = 'any';    }    echo '<div id="master_addslaveuser_gui">';    echo '<form autocomplete="off" method="post" action="server_privileges.php" onsubmit="return checkAddUser(this);">';    echo PMA_generate_common_hidden_inputs('', '');    echo '<fieldset id="fieldset_add_user_login">'        . '<legend>'.__('Add slave replication user').'</legend>'    . '<input type="hidden" name="grant_count" value="25" />'    . '<input type="hidden" name="createdb" id="createdb_0" value="0" />'        . '<input id="checkbox_Repl_slave_priv" type="hidden" title="Needed for the replication slaves." value="Y" name="Repl_slave_priv"/>'        . '<input id="checkbox_Repl_client_priv" type="hidden" title="Needed for the replication slaves." value="Y" name="Repl_client_priv"/>'    . ''        . '<input type="hidden" name="sr_take_action" value="true" />'        . '<div class="item">'        . '<label for="select_pred_username">'        . '    ' . __('User name') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_username" id="select_pred_username" title="' . __('User name') . '"'        . '        onchange="if (this.value == \'any\') { username.value = \'\'; } else if (this.value == \'userdefined\') { username.focus(); username.select(); }">'        . '        <option value="any"' . ((isset($GLOBALS['pred_username']) && $GLOBALS['pred_username'] == 'any') ? ' selected="selected"' : '') . '>' . __('Any user') . '</option>'        . '        <option value="userdefined"' . ((! isset($GLOBALS['pred_username']) || $GLOBALS['pred_username'] == 'userdefined') ? ' selected="selected"' : '') . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="text" name="username" maxlength="'        . $username_length . '" title="' . __('User name') . '"'        . (empty($GLOBALS['username'])        ? ''        : ' value="' . (isset($GLOBALS['new_username'])        ? $GLOBALS['new_username']        : $GLOBALS['username']) . '"')        . ' onchange="pred_username.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="select_pred_hostname">'        . '    ' . __('Host') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_hostname" id="select_pred_hostname" title="' . __('Host') . '"';    $_current_user = PMA_DBI_fetch_value('SELECT USER();');    if (! empty($_current_user)) {        $thishost = str_replace("'", '', substr($_current_user, (strrpos($_current_user, '@') + 1)));        if ($thishost == 'localhost' || $thishost == '127.0.0.1') {            unset($thishost);        }    }    echo '    onchange="if (this.value == \'any\') { hostname.value = \'%\'; } else if (this.value == \'localhost\') { hostname.value = \'localhost\'; } '        . (empty($thishost) ? '' : 'else if (this.value == \'thishost\') { hostname.value = \'' . addslashes(htmlspecialchars($thishost)) . '\'; } ')        . 'else if (this.value == \'hosttable\') { hostname.value = \'\'; } else if (this.value == \'userdefined\') { hostname.focus(); hostname.select(); }">' . "\n";    unset($_current_user);    // when we start editing a user, $GLOBALS['pred_hostname'] is not defined    if (! isset($GLOBALS['pred_hostname']) && isset($GLOBALS['hostname'])) {        switch (strtolower($GLOBALS['hostname'])) {        case 'localhost':        case '127.0.0.1':            $GLOBALS['pred_hostname'] = 'localhost';            break;        case '%':            $GLOBALS['pred_hostname'] = 'any';            break;        default:            $GLOBALS['pred_hostname'] = 'userdefined';            break;        }    }    echo '        <option value="any"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'any')        ? ' selected="selected"' : '') . '>' . __('Any host')        . '</option>'        . '        <option value="localhost"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'localhost')        ? ' selected="selected"' : '') . '>' . __('Local')        . '</option>';    if (!empty($thishost)) {        echo '        <option value="thishost"'            . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'thishost')            ? ' selected="selected"' : '') . '>' . __('This Host')            . '</option>';    }    unset($thishost);    echo '        <option value="hosttable"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'hosttable')        ? ' selected="selected"' : '') . '>' . __('Use Host Table')        . '</option>'        . '        <option value="userdefined"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'userdefined')        ? ' selected="selected"' : '')        . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="text" name="hostname" maxlength="'        . $hostname_length . '" value="'        . (isset($GLOBALS['hostname']) ? $GLOBALS['hostname'] : '')        . '" title="' . __('Host')        . '" onchange="pred_hostname.value = \'userdefined\';" />'        . PMA_showHint(__('When Host table is used, this field is ignored and values stored in Host table are used instead.'))        . '</div>'        . '<div class="item">'        . '<label for="select_pred_password">'        . '    ' . __('Password') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_password" id="select_pred_password" title="'        . __('Password') . '"'        . '            onchange="if (this.value == \'none\') { pma_pw.value = \'\'; pma_pw2.value = \'\'; } else if (this.value == \'userdefined\') { pma_pw.focus(); pma_pw.select(); }">'        . '        <option value="none"';    if (isset($GLOBALS['username']) && $mode != 'change') {        echo '  selected="selected"';    }    echo '>' . __('No Password') . '</option>'        . '        <option value="userdefined"' . (isset($GLOBALS['username']) ? '' : ' selected="selected"') . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" onchange="pred_password.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="text_pma_pw2">'        . '    ' . __('Re-type') . ':'        . '</label>'        . '<span class="options">&nbsp;</span>'        . '<input type="password" name="pma_pw2" id="text_pma_pw2" title="' . __('Re-type') . '" onchange="pred_password.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="button_generate_password">'        . '    ' . __('Generate Password') . ':'        . '</label>'        . '<span class="options">'        . '    <input type="button" id="button_generate_password" value="' . __('Generate') . '" onclick="suggestPassword(this.form)" />'        . '</span>'        . '<input type="text" name="generated_pw" id="generated_pw" />'        . '</div>'        . '</fieldset>';    echo '<fieldset id="fieldset_user_privtable_footer" class="tblFooters">'        . '    <input type="submit" name="adduser_submit" id="adduser_submit" value="' . __('Go') . '" />'        . '</fieldset>';    echo '</form>';    echo '</div>';}?>
<?php/** * ESRI Shape file import plugin for phpMyAdmin * * @package PhpMyAdmin-Import * @subpackage ESRI_Shape */if (! defined('PHPMYADMIN')) {    exit;}// Drizzle does not suppost GIS data typesif (PMA_DRIZZLE) {    return;}if (isset($plugin_list)) {    $plugin_list['shp'] = array(        'text' => __('ESRI Shape File'),        'extension' => 'shp',        'options' => array(),        'options_text' => __('Options'),    );} else {    if ((int) ini_get('memory_limit') < 512) {        @ini_set('memory_limit', '512M');    }    @set_time_limit(300);    // Append the bfShapeFiles directory to the include path variable    set_include_path(get_include_path() . PATH_SEPARATOR . getcwd() . '/libraries/bfShapeFiles/');    include_once './libraries/bfShapeFiles/ShapeFile.lib.php';    $GLOBALS['finished'] = false;    $buffer = '';    $eof = false;    // Returns specified number of bytes from the buffer.    // Buffer automatically fetches next chunk of data when the buffer falls short.    // Sets $eof when $GLOBALS['finished'] is set and the buffer falls short.    function readFromBuffer($length){        global $buffer, $eof;        if (strlen($buffer) < $length) {            if ($GLOBALS['finished']) {                $eof = true;            } else {                $buffer .= PMA_importGetNextChunk();            }        }        $result = substr($buffer, 0, $length);        $buffer = substr($buffer, $length);        return $result;    }    /**     * This class extends ShapeFile class to cater the following phpMyAdmin     * specific requirements.     * 1) To load data from .dbf file only when the dBase extension is available.     * 2) To use PMA_importGetNextChunk() functionality to read data, rather than     *    reading directly from a file. Using readFromBuffer() in place of fread().     *    This makes it possible to use compressions.     */    class PMA_ShapeFile extends ShapeFile    {        function _isDbaseLoaded()        {            return extension_loaded('dbase');        }        function loadFromFile($FileName)        {            $this->_loadHeaders();            $this->_loadRecords();            if ($this->_isDbaseLoaded()) {                $this->_closeDBFFile();            }        }        function _loadHeaders()        {            readFromBuffer(24);            $this->fileLength = loadData("N", readFromBuffer(4));            readFromBuffer(4);            $this->shapeType = loadData("V", readFromBuffer(4));            $this->boundingBox = array();            $this->boundingBox["xmin"] = loadData("d", readFromBuffer(8));            $this->boundingBox["ymin"] = loadData("d", readFromBuffer(8));            $this->boundingBox["xmax"] = loadData("d", readFromBuffer(8));            $this->boundingBox["ymax"] = loadData("d", readFromBuffer(8));            if ($this->_isDbaseLoaded() && $this->_openDBFFile()) {                $this->DBFHeader = $this->_loadDBFHeader();            }        }        function _loadRecords()        {            global $eof;            readFromBuffer(32);            while (true) {                $record = new PMA_ShapeRecord(-1);                $record->loadFromFile($this->SHPFile, $this->DBFFile);                if ($record->lastError != "") {                    return false;                }                if ($eof) {                    break;                }                $this->records[] = $record;            }        }    }    /**     * This class extends ShapeRecord class to cater the following phpMyAdmin     * specific requirements.     * 1) To load data from .dbf file only when the dBase extension is available.     * 2) To use PMA_importGetNextChunk() functionality to read data, rather than     *    reading directly from a file. Using readFromBuffer() in place of fread().     *    This makes it possible to use compressions.     */    class PMA_ShapeRecord extends ShapeRecord    {        function loadFromFile(&$SHPFile, &$DBFFile)        {            $this->DBFFile = $DBFFile;            $this->_loadHeaders();            switch ($this->shapeType) {            case 0:                $this->_loadNullRecord();                break;            case 1:                $this->_loadPointRecord();                break;            case 3:                $this->_loadPolyLineRecord();                break;            case 5:                $this->_loadPolygonRecord();                break;            case 8:                $this->_loadMultiPointRecord();                break;            default:                $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));                break;            }            if (extension_loaded('dbase') && isset($this->DBFFile)) {                $this->_loadDBFData();            }        }        function _loadHeaders()        {            $this->recordNumber = loadData("N", readFromBuffer(4));            //We read the length of the record            $tmp = loadData("N", readFromBuffer(4));            $this->shapeType = loadData("V", readFromBuffer(4));        }        function _loadPoint()        {            $data = array();            $data["x"] = loadData("d", readFromBuffer(8));            $data["y"] = loadData("d", readFromBuffer(8));            return $data;        }        function _loadMultiPointRecord()        {            $this->SHPData = array();            $this->SHPData["xmin"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymin"] = loadData("d", readFromBuffer(8));            $this->SHPData["xmax"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymax"] = loadData("d", readFromBuffer(8));            $this->SHPData["numpoints"] = loadData("V", readFromBuffer(4));            for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {                $this->SHPData["points"][] = $this->_loadPoint();            }        }        function _loadPolyLineRecord()        {            $this->SHPData = array();            $this->SHPData["xmin"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymin"] = loadData("d", readFromBuffer(8));            $this->SHPData["xmax"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymax"] = loadData("d", readFromBuffer(8));            $this->SHPData["numparts"]  = loadData("V", readFromBuffer(4));            $this->SHPData["numpoints"] = loadData("V", readFromBuffer(4));            for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {                $this->SHPData["parts"][$i] = loadData("V", readFromBuffer(4));            }            $readPoints = 0;            reset($this->SHPData["parts"]);            while (list($partIndex, $partData) = each($this->SHPData["parts"])) {                if (! isset($this->SHPData["parts"][$partIndex]["points"])                    || !is_array($this->SHPData["parts"][$partIndex]["points"])                ) {                    $this->SHPData["parts"][$partIndex] = array();                    $this->SHPData["parts"][$partIndex]["points"] = array();                }                while (! in_array($readPoints, $this->SHPData["parts"])                && ($readPoints < ($this->SHPData["numpoints"]))                ) {                    $this->SHPData["parts"][$partIndex]["points"][] = $this->_loadPoint();                    $readPoints++;                }            }        }    }    $shp = new PMA_ShapeFile(1);    // If the zip archive has more than one file,    // get the correct content to the buffer from .shp file.    if ($compression == 'application/zip' && PMA_getNoOfFilesInZip($import_file) > 1) {        $zip_content =  PMA_getZipContents($import_file, '/^.*\.shp$/i');        $GLOBALS['import_text'] = $zip_content['data'];    }    $temp_dbf_file = false;    // We need dbase extension to handle .dbf file    if (extension_loaded('dbase')) {        // If we can extract the zip archive to 'TempDir'        // and use the files in it for import        if ($compression == 'application/zip'            && ! empty($cfg['TempDir'])            && is_writable($cfg['TempDir'])        ) {            $dbf_file_name = PMA_findFileFromZipArchive('/^.*\.dbf$/i', $import_file);            // If the corresponding .dbf file is in the zip archive            if ($dbf_file_name) {                // Extract the .dbf file and point to it.                $extracted =  PMA_zipExtract(                    $import_file,                    realpath($cfg['TempDir']),                    array($dbf_file_name)                );                if ($extracted) {                    $dbf_file_path = realpath($cfg['TempDir'])                        . (PMA_IS_WINDOWS ? '\\' : '/') . $dbf_file_name;                    $temp_dbf_file = true;                    // Replace the .dbf with .*, as required by the bsShapeFiles library.                    $file_name = substr($dbf_file_path, 0, strlen($dbf_file_path) - 4) . '.*';                    $shp->FileName = $file_name;                }            }        }        // If file is in UploadDir, use .dbf file in the same UploadDir        // to load extra data.        elseif (! empty($local_import_file)            && ! empty($cfg['UploadDir'])            && $compression == 'none'        ) {            // Replace the .shp with .*,            // so the bsShapeFiles library correctly locates .dbf file.            $file_name = substr($import_file, 0, strlen($import_file) - 4) . '.*';            $shp->FileName = $file_name;        }    }    // Load data    $shp->loadFromFile('');    if ($shp->lastError != "") {        $error = true;        $message = PMA_Message::error(__('There was an error importing the ESRI shape file: "%s".'));        $message->addParam($shp->lastError);        return;    }    // Delete the .dbf file extracted to 'TempDir'    if ($temp_dbf_file) {        unlink($dbf_file_path);    }    $esri_types = array(        0  => 'Null Shape',        1  => 'Point',        3  => 'PolyLine',        5  => 'Polygon',        8  => 'MultiPoint',        11 => 'PointZ',        13 => 'PolyLineZ',        15 => 'PolygonZ',        18 => 'MultiPointZ',        21 => 'PointM',        23 => 'PolyLineM',        25 => 'PolygonM',        28 => 'MultiPointM',        31 => 'MultiPatch',    );    include_once './libraries/gis/pma_gis_geometry.php';    switch ($shp->shapeType) {    // ESRI Null Shape    case 0:        $gis_obj = null;        break;    // ESRI Point    case 1:        include_once './libraries/gis/pma_gis_point.php';        $gis_obj = PMA_GIS_Point::singleton();        break;    // ESRI PolyLine    case 3:        include_once './libraries/gis/pma_gis_multilinestring.php';        $gis_obj = PMA_GIS_Multilinestring::singleton();        break;    // ESRI Polygon    case 5:        include_once './libraries/gis/pma_gis_multipolygon.php';        $gis_obj = PMA_GIS_Multipolygon::singleton();        break;    // ESRI MultiPoint    case 8:        include_once './libraries/gis/pma_gis_multipoint.php';        $gis_obj = PMA_GIS_Multipoint::singleton();        break;    default:        $error = true;        if (! isset($esri_types[$shp->shapeType])) {            $message = PMA_Message::error(__('You tried to import an invalid file or the imported file contains invalid data'));        } else {            $message = PMA_Message::error(__('MySQL Spatial Extension does not support ESRI type "%s".'));            $message->addParam($param);        }        return;    }    $num_rows = count($shp->records);    // If .dbf file is loaded, the number of extra data columns    $num_data_cols = isset($shp->DBFHeader) ? count($shp->DBFHeader) : 0;    $rows = array();    $col_names = array();    if ($num_rows != 0) {        foreach ($shp->records as $record) {            $tempRow = array();            if ($gis_obj == null) {                $tempRow[] = null;            } else {                $tempRow[] = "GeomFromText('" . $gis_obj->getShape($record->SHPData) . "')";            }            if (isset($shp->DBFHeader)) {                foreach ($shp->DBFHeader as $c) {                    $cell = trim($record->DBFData[$c[0]]);                    if (! strcmp($cell, '')) {                        $cell = 'NULL';                    }                    $tempRow[] = $cell;                }            }            $rows[] = $tempRow;        }    }    if (count($rows) == 0) {        $error = true;        $message = PMA_Message::error(__('The imported file does not contain any data'));        return;    }    // Column names for spatial column and the rest of the columns,    // if they are available    $col_names[] = 'SPATIAL';    for ($n = 0; $n < $num_data_cols; $n++) {        $col_names[] = $shp->DBFHeader[$n][0];    }    // Set table name based on the number of tables    if (strlen($db)) {        $result = PMA_DBI_fetch_result('SHOW TABLES');        $table_name = 'TABLE '.(count($result) + 1);    } else {        $table_name = 'TBL_NAME';    }    $tables = array(array($table_name, $col_names, $rows));    // Use data from shape file to chose best-fit MySQL types for each column    $analyses = array();    $analyses[] = PMA_analyzeTable($tables[0]);    $table_no = 0; $spatial_col = 0;    $analyses[$table_no][TYPES][$spatial_col] = GEOMETRY;    $analyses[$table_no][FORMATTEDSQL][$spatial_col] = true;    // Set database name to the currently selected one, if applicable    if (strlen($db)) {        $db_name = $db;        $options = array('create_db' => false);    } else {        $db_name = 'SHP_DB';        $options = null;    }    // Created and execute necessary SQL statements from data    $null_param = null;    PMA_buildSQL($db_name, $tables, $analyses, $null_param, $options);    unset($tables);    unset($analyses);    $finished = true;    $error = false;    // Commit any possible data in buffers    PMA_importRunQuery();}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'server_privileges.js';$GLOBALS['js_include'][] = 'replication.js';require './libraries/server_common.inc.php';require './libraries/replication.inc.php';require './libraries/replication_gui.lib.php';require_once './libraries/server_synchronize.lib.php';/** * Checks if the user is allowed to do what he tries to... */if (! $is_superuser) {    include './libraries/server_links.inc.php';    echo '<h2>' . "\n"        . PMA_getIcon('s_replication.png')        . __('Replication') . "\n"        . '</h2>' . "\n";    PMA_Message::error(__('No Privileges'))->display();    include './libraries/footer.inc.php';}/** * Handling control requests */if (isset($GLOBALS['sr_take_action'])) {    $refresh = false;    if (isset($GLOBALS['slave_changemaster'])) {        $_SESSION['replication']['m_username'] = $sr['username'] = PMA_sqlAddSlashes($GLOBALS['username']);        $_SESSION['replication']['m_password'] = $sr['pma_pw']   = PMA_sqlAddSlashes($GLOBALS['pma_pw']);        $_SESSION['replication']['m_hostname'] = $sr['hostname'] = PMA_sqlAddSlashes($GLOBALS['hostname']);        $_SESSION['replication']['m_port']     = $sr['port']     = PMA_sqlAddSlashes($GLOBALS['port']);        $_SESSION['replication']['m_correct']  = '';        $_SESSION['replication']['sr_action_status'] = 'error';        $_SESSION['replication']['sr_action_info'] = __('Unknown error');        // Attempt to connect to the new master server        $link_to_master = PMA_replication_connect_to_master($sr['username'], $sr['pma_pw'], $sr['hostname'], $sr['port']);        if (! $link_to_master) {            $_SESSION['replication']['sr_action_status'] = 'error';            $_SESSION['replication']['sr_action_info'] = sprintf(__('Unable to connect to master %s.'), htmlspecialchars($sr['hostname']));        } else {            // Read the current master position            $position = PMA_replication_slave_bin_log_master($link_to_master);            if (empty($position)) {                $_SESSION['replication']['sr_action_status'] = 'error';                $_SESSION['replication']['sr_action_info'] = __('Unable to read master log position. Possible privilege problem on master.');            } else {                $_SESSION['replication']['m_correct']  = true;                if (! PMA_replication_slave_change_master($sr['username'], $sr['pma_pw'], $sr['hostname'], $sr['port'], $position, true, false)) {                    $_SESSION['replication']['sr_action_status'] = 'error';                    $_SESSION['replication']['sr_action_info'] = __('Unable to change master');                } else {                    $_SESSION['replication']['sr_action_status'] = 'success';                    $_SESSION['replication']['sr_action_info'] = sprintf(__('Master server changed successfully to %s'), htmlspecialchars($sr['hostname']));                }            }        }    } elseif (isset($GLOBALS['sr_slave_server_control'])) {        if ($GLOBALS['sr_slave_action'] == 'reset') {            PMA_replication_slave_control("STOP");            PMA_DBI_try_query("RESET SLAVE;");            PMA_replication_slave_control("START");        } else {            PMA_replication_slave_control($GLOBALS['sr_slave_action'], $GLOBALS['sr_slave_control_parm']);        }        $refresh = true;    } elseif (isset($GLOBALS['sr_slave_skip_error'])) {        $count = 1;        if (isset($GLOBALS['sr_skip_errors_count'])) {            $count = $GLOBALS['sr_skip_errors_count'] * 1;        }        PMA_replication_slave_control("STOP");        PMA_DBI_try_query("SET GLOBAL SQL_SLAVE_SKIP_COUNTER = ".$count.";");        PMA_replication_slave_control("START");    } elseif (isset($GLOBALS['sl_sync'])) {        // TODO username, host and port could be read from 'show slave status',        // when asked for a password this might work in more situations then just after changing master (where the master password is stored in session)        $src_link = PMA_replication_connect_to_master($_SESSION['replication']['m_username'], $_SESSION['replication']['m_password'], $_SESSION['replication']['m_hostname'], $_SESSION['replication']['m_port']);        $trg_link = null; // using null to indicate the current PMA server        $data = PMA_DBI_fetch_result('SHOW MASTER STATUS', null, null, $src_link); // let's find out, which databases are replicated        $do_db     = array();        $ignore_db = array();        $dblist    = array();        if (! empty($data[0]['Binlog_Do_DB'])) {            $do_db     = explode(',', $data[0]['Binlog_Do_DB']);        }        if (! empty($data[0]['Binlog_Ignore_DB'])) {            $ignore_db = explode(',', $data[0]['Binlog_Ignore_DB']);        }        $tmp_alldbs = PMA_DBI_query('SHOW DATABASES;', $src_link);        while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {            if (PMA_is_system_schema($tmp_row[0])) {                continue;            }            if (count($do_db) == 0) {                if (array_search($tmp_row[0], $ignore_db) !== false) {                    continue;                }                $dblist[] = $tmp_row[0];                PMA_DBI_query('CREATE DATABASE IF NOT EXISTS '.PMA_backquote($tmp_row[0]), $trg_link);            } else {                if (array_search($tmp_row[0], $do_db) !== false) {                    $dblist[] = $tmp_row[0];                    PMA_DBI_query('CREATE DATABASE IF NOT EXISTS '.PMA_backquote($tmp_row[0]), $trg_link);                }            }        } // end while        unset($do_db, $ignore_db, $data);        if (isset($GLOBALS['repl_data'])) {            $include_data = true;        } else {            $include_data = false;        }        foreach ($dblist as $db) {            PMA_replication_synchronize_db($db, $src_link, $trg_link, $include_data);        }        // TODO some form of user feedback error/success would be nice        //  What happens if $dblist is empty?        //  or sync failed?    }    if ($refresh) {        Header("Location: ". PMA_generate_common_url($GLOBALS['url_params']));    }    unset($refresh);}/** * Displays the links */require './libraries/server_links.inc.php';echo '<div id="replication">';echo ' <h2>';echo '   ' . PMA_getImage('s_replication.png');echo     __('Replication');echo ' </h2>';// Display error messagesif (isset($_SESSION['replication']['sr_action_status']) && isset($_SESSION['replication']['sr_action_info'])) {    if ($_SESSION['replication']['sr_action_status'] == 'error') {        PMA_Message::error($_SESSION['replication']['sr_action_info'])->display();        $_SESSION['replication']['sr_action_status'] = 'unknown';    } elseif ($_SESSION['replication']['sr_action_status'] == 'success') {        PMA_Message::success($_SESSION['replication']['sr_action_info'])->display();        $_SESSION['replication']['sr_action_status'] = 'unknown';    }}if ($server_master_status) {    if (! isset($GLOBALS['repl_clear_scr'])) {        echo '<fieldset>';        echo '<legend>' . __('Master replication') . '</legend>';        echo __('This server is configured as master in a replication process.');        echo '<ul>';        echo '  <li><a href="#" id="master_status_href">' . __('Show master status') . '</a></li>';        PMA_replication_print_status_table('master', true, false);        echo '  <li><a href="#" id="master_slaves_href">' . __('Show connected slaves') . '</a></li>';        PMA_replication_print_slaves_table(true);        $_url_params = $GLOBALS['url_params'];        $_url_params['mr_adduser'] = true;        $_url_params['repl_clear_scr'] = true;        echo '  <li><a href="' . PMA_generate_common_url($_url_params) . '" id="master_addslaveuser_href">' . __('Add slave replication user') . '</a></li>';    }    // Display 'Add replication slave user' form    if (isset($GLOBALS['mr_adduser'])) {        PMA_replication_gui_master_addslaveuser();    } elseif (! isset($GLOBALS['repl_clear_scr'])) {        echo "</ul>";        echo "</fieldset>";    }} elseif (! isset($GLOBALS['mr_configure']) && ! isset($GLOBALS['repl_clear_scr'])) {    $_url_params = $GLOBALS['url_params'];    $_url_params['mr_configure'] = true;    echo '<fieldset>';    echo '<legend>' . __('Master replication') . '</legend>';    echo sprintf(__('This server is not configured as master in a replication process. Would you like to <a href="%s">configure</a> it?'), PMA_generate_common_url($_url_params));    echo '</fieldset>';}if (isset($GLOBALS['mr_configure'])) {    // Render the 'Master configuration' section    echo '<fieldset>';    echo '<legend>' . __('Master configuration') . '</legend>';    echo __('This server is not configured as master server in a replication process. You can choose from either replicating all databases and ignoring certain (useful if you want to replicate majority of databases) or you can choose to ignore all databases by default and allow only certain databases to be replicated. Please select the mode:') . '<br /><br />';    echo '<select name="db_type" id="db_type">';    echo '<option value="all">' . __('Replicate all databases; Ignore:') . '</option>';    echo '<option value="ign">' . __('Ignore all databases; Replicate:') . '</option>';    echo '</select>';    echo '<br /><br />';    echo __('Please select databases:') . '<br />';    echo PMA_replication_db_multibox();    echo '<br /><br />';    echo __('Now, add the following lines at the end of [mysqld] section in your my.cnf and please restart the MySQL server afterwards.') . '<br />';    echo '<pre id="rep"></pre>';    echo __('Once you restarted MySQL server, please click on Go button. Afterwards, you should see a message informing you, that this server <b>is</b> configured as master');    echo '</fieldset>';    echo '<fieldset class="tblFooters">';    echo ' <form method="post" action="server_replication.php" >';    echo PMA_generate_common_hidden_inputs('', '');    echo '  <input type="submit" value="' . __('Go') . '" id="goButton" />';    echo ' </form>';    echo '</fieldset>';    include './libraries/footer.inc.php';    exit;}echo '</div>';if (! isset($GLOBALS['repl_clear_scr'])) {    // Render the 'Slave configuration' section    echo '<fieldset>';    echo '<legend>' . __('Slave replication') . '</legend>';    if ($server_slave_status) {        echo '<div id="slave_configuration_gui">';        $_url_params = $GLOBALS['url_params'];        $_url_params['sr_take_action'] = true;        $_url_params['sr_slave_server_control'] = true;        if ($server_slave_replication[0]['Slave_IO_Running'] == 'No') {            $_url_params['sr_slave_action'] = 'start';        } else {            $_url_params['sr_slave_action'] = 'stop';        }        $_url_params['sr_slave_control_parm'] = 'IO_THREAD';        $slave_control_io_link = PMA_generate_common_url($_url_params);        if ($server_slave_replication[0]['Slave_SQL_Running'] == 'No') {            $_url_params['sr_slave_action'] = 'start';        } else {            $_url_params['sr_slave_action'] = 'stop';        }        $_url_params['sr_slave_control_parm'] = 'SQL_THREAD';        $slave_control_sql_link = PMA_generate_common_url($_url_params);        if ($server_slave_replication[0]['Slave_IO_Running'] == 'No'            || $server_slave_replication[0]['Slave_SQL_Running'] == 'No'        ) {            $_url_params['sr_slave_action'] = 'start';        } else {            $_url_params['sr_slave_action'] = 'stop';        }        $_url_params['sr_slave_control_parm'] = null;        $slave_control_full_link = PMA_generate_common_url($_url_params);        $_url_params['sr_slave_action'] = 'reset';        $slave_control_reset_link = PMA_generate_common_url($_url_params);        $_url_params = $GLOBALS['url_params'];        $_url_params['sr_slave_skip_error'] = true;        $slave_skip_error_link = PMA_generate_common_url($_url_params);        if ($server_slave_replication[0]['Slave_SQL_Running'] == 'No') {            PMA_Message::error(__('Slave SQL Thread not running!'))->display();        }        if ($server_slave_replication[0]['Slave_IO_Running'] == 'No') {            PMA_Message::error(__('Slave IO Thread not running!'))->display();        }        $_url_params = $GLOBALS['url_params'];        $_url_params['sl_configure'] = true;        $_url_params['repl_clear_scr'] = true;        $reconfiguremaster_link = PMA_generate_common_url($_url_params);        echo __('Server is configured as slave in a replication process. Would you like to:');        echo '<br />';        echo '<ul>';        echo ' <li><a href="#" id="slave_status_href">' . __('See slave status table') . '</a></li>';        echo PMA_replication_print_status_table('slave', true, false);        if (isset($_SESSION['replication']['m_correct']) && $_SESSION['replication']['m_correct'] == true) {            echo ' <li><a href="#" id="slave_synchronization_href">' . __('Synchronize databases with master') . '</a></li>';            echo ' <div id="slave_synchronization_gui" style="display: none">';            echo '  <form method="post" action="server_replication.php">';            echo PMA_generate_common_hidden_inputs('', '');            echo '   <input type="checkbox" name="repl_struc" value="1" checked="checked" disabled="disabled" /> ' . __('Structure') . '<br />'; // this is just for vizualization, it has no other purpose            echo '   <input type="checkbox" name="repl_data"  value="1" checked="checked" /> ' . __('Data') .' <br />';            echo '   <input type="hidden" name="sr_take_action" value="1" />';            echo '   <input type="submit" name="sl_sync" value="' . __('Go') . '" />';            echo '  </form>';            echo ' </div>';        }        echo ' <li><a href="#" id="slave_control_href">' . __('Control slave:') . '</a>';        echo ' <div id="slave_control_gui" style="display: none">';        echo '  <ul>';        echo '   <li><a href="'. $slave_control_full_link . '">' . (($server_slave_replication[0]['Slave_IO_Running'] == 'No' || $server_slave_replication[0]['Slave_SQL_Running'] == 'No') ? __('Full start') : __('Full stop')) . ' </a></li>';        echo '   <li><a href="'. $slave_control_reset_link . '">' . __('Reset slave') . '</a></li>';        if ($server_slave_replication[0]['Slave_SQL_Running'] == 'No') {            echo '   <li><a href="' . $slave_control_sql_link . '">' . __('Start SQL Thread only') . '</a></li>';        } else {            echo '   <li><a href="' . $slave_control_sql_link . '">' . __('Stop SQL Thread only') . '</a></li>';        }        if ($server_slave_replication[0]['Slave_IO_Running'] == 'No') {            echo '   <li><a href="' . $slave_control_io_link . '">' . __('Start IO Thread only') . '</a></li>';        } else {            echo '   <li><a href="' . $slave_control_io_link . '">' . __('Stop IO Thread only') . '</a></li>';        }        echo '  </ul>';        echo ' </div>';        echo ' </li>';        echo ' <li><a href="#" id="slave_errormanagement_href">' . __('Error management:') . '</a>';        echo ' <div id="slave_errormanagement_gui" style="display: none">';        PMA_Message::error(__('Skipping errors might lead into unsynchronized master and slave!'))->display();        echo '  <ul>';        echo '   <li><a href="' . $slave_skip_error_link . '">' . __('Skip current error') . '</a></li>';        echo '   <li>' . __('Skip next');        echo '    <form method="post" action="server_replication.php">';        echo PMA_generate_common_hidden_inputs('', '');        echo '      <input type="text" name="sr_skip_errors_count" value="1" style="width: 30px" />' . __('errors.');        echo '              <input type="submit" name="sr_slave_skip_error" value="' . __('Go') . '" />';        echo '      <input type="hidden" name="sr_take_action" value="1" />';        echo '    </form></li>';        echo '  </ul>';        echo ' </div>';        echo ' </li>';        echo ' <li><a href="' . $reconfiguremaster_link . '">' . __('Change or reconfigure master server') . '</a></li>';        echo '</ul>';    } elseif (! isset($GLOBALS['sl_configure'])) {        $_url_params = $GLOBALS['url_params'];        $_url_params['sl_configure'] = true;        $_url_params['repl_clear_scr'] = true;        echo sprintf(__('This server is not configured as slave in a replication process. Would you like to <a href="%s">configure</a> it?'), PMA_generate_common_url($_url_params));    }    echo '</div>';    echo '</fieldset>';}if (isset($GLOBALS['sl_configure'])) {    PMA_replication_gui_changemaster("slave_changemaster");}require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin *//** * Run common work */require_once './libraries/common.inc.php';//Get some js files needed for Ajax requests$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'db_structure.js';/** * If we are not in an Ajax request, then do the common work and show the links etc. */if ($GLOBALS['is_ajax_request'] != true) {    include './libraries/db_common.inc.php';}$url_query .= '&amp;goto=tbl_tracking.php&amp;back=db_tracking.php';// Get the database structure$sub_part = '_structure';require './libraries/db_info.inc.php';// Work to do?//  (here, do not use $_REQUEST['db] as it can be crafted)if (isset($_REQUEST['delete_tracking']) && isset($_REQUEST['table'])) {    PMA_Tracker::deleteTracking($GLOBALS['db'], $_REQUEST['table']);    /**     * If in an Ajax request, generate the success message and use     * {@link PMA_ajaxResponse()} to send the output     */    if ($GLOBALS['is_ajax_request'] == true) {        $message = PMA_Message::success();        PMA_ajaxResponse($message, true);    }}// Get tracked data about the database$data = PMA_Tracker::getTrackedData($_REQUEST['db'], '', '1');// No tables present and no log existif ($num_tables == 0 && count($data['ddlog']) == 0) {    echo '<p>' . __('No tables found in database.') . '</p>' . "\n";    if (empty($db_is_information_schema)) {        include './libraries/display_create_table.lib.php';    }    // Display the footer    include './libraries/footer.inc.php';    exit;}// ---------------------------------------------------------------------------/* * Display top menu links */require_once './libraries/db_links.inc.php';// Prepare statement to get HEAD version$all_tables_query = ' SELECT table_name, MAX(version) as version FROM ' .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . '.' .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             ' WHERE db_name = \'' . PMA_sqlAddSlashes($_REQUEST['db']) . '\' ' .             ' GROUP BY table_name' .             ' ORDER BY table_name ASC';$all_tables_result = PMA_query_as_controluser($all_tables_query);// If a HEAD version existsif (PMA_DBI_num_rows($all_tables_result) > 0) {?>    <div id="tracked_tables">    <h3><?php echo __('Tracked tables');?></h3>    <table id="versions" class="data">    <thead>    <tr>        <th><?php echo __('Database');?></th>        <th><?php echo __('Table');?></th>        <th><?php echo __('Last version');?></th>        <th><?php echo __('Created');?></th>        <th><?php echo __('Updated');?></th>        <th><?php echo __('Status');?></th>        <th><?php echo __('Action');?></th>        <th><?php echo __('Show');?></th>    </tr>    </thead>    <tbody>    <?php    // Print out information about versions    $drop_image_or_text = '';    if (true == $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= PMA_getImage('b_drop.png', __('Delete tracking data for this table'));    }    if ('both' === $GLOBALS['cfg']['PropertiesIconic'] || false === $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= __('Drop');    }    $style = 'odd';    while ($one_result = PMA_DBI_fetch_array($all_tables_result)) {        list($table_name, $version_number) = $one_result;        $table_query = ' SELECT * FROM ' .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . '.' .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             ' WHERE `db_name` = \'' . PMA_sqlAddSlashes($_REQUEST['db']) . '\' AND `table_name`  = \'' . PMA_sqlAddSlashes($table_name) . '\' AND `version` = \'' . $version_number . '\'';        $table_result = PMA_query_as_controluser($table_query);        $version_data = PMA_DBI_fetch_array($table_result);        if ($version_data['tracking_active'] == 1) {            $version_status = __('active');        } else {            $version_status = __('not active');        }        $tmp_link = 'tbl_tracking.php?' . $url_query . '&amp;table=' . htmlspecialchars($version_data['table_name']);        $delete_link = 'db_tracking.php?' . $url_query . '&amp;table=' . htmlspecialchars($version_data['table_name']) . '&amp;delete_tracking=true&amp';        ?>        <tr class="noclick <?php echo $style;?>">            <td><?php echo htmlspecialchars($version_data['db_name']);?></td>            <td><?php echo htmlspecialchars($version_data['table_name']);?></td>            <td><?php echo $version_data['version'];?></td>            <td><?php echo $version_data['date_created'];?></td>            <td><?php echo $version_data['date_updated'];?></td>            <td><?php echo $version_status;?></td>            <td><a <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="drop_tracking_anchor"' : ''); ?> href="<?php echo $delete_link;?>" ><?php echo $drop_image_or_text; ?></a></td>            <td> <a href="<?php echo $tmp_link; ?>"><?php echo __('Versions');?></a>               | <a href="<?php echo $tmp_link; ?>&amp;report=true&amp;version=<?php echo $version_data['version'];?>"><?php echo __('Tracking report');?></a>               | <a href="<?php echo $tmp_link; ?>&amp;snapshot=true&amp;version=<?php echo $version_data['version'];?>"><?php echo __('Structure snapshot');?></a></td>        </tr>        <?php        if ($style == 'even') {            $style = 'odd';        } else {            $style = 'even';        }    }    unset($tmp_link);    ?>    </tbody>    </table>    </div><?php}$sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];// Get list of tables$table_list = PMA_getTableList($GLOBALS['db']);// For each table try to get the tracking versionforeach ($table_list as $key => $value) {    // If $value is a table group.    if (array_key_exists(('is' . $sep . 'group'), $value) && $value['is' . $sep . 'group']) {        foreach ($value as $temp_table) {            // If $temp_table is a table with the value for 'Name' is set,            // rather than a propery of the table group.            if (is_array($temp_table) && array_key_exists('Name', $temp_table)) {                if (PMA_Tracker::getVersion($GLOBALS['db'], $temp_table['Name']) == -1) {                    $my_tables[] = $temp_table['Name'];                }            }        }    // If $value is a table.    } else {        if (PMA_Tracker::getVersion($GLOBALS['db'], $value['Name']) == -1) {            $my_tables[] = $value['Name'];        }    }}// If untracked tables existif (isset($my_tables)) {?>    <h3><?php echo __('Untracked tables');?></h3>    <table id="noversions" class="data">    <thead>    <tr>        <th width="300"><?php echo __('Table');?></th>        <th></th>    </tr>    </thead>    <tbody><?php    // Print out list of untracked tables    $style = 'odd';    foreach ($my_tables as $key => $tablename) {        if (PMA_Tracker::getVersion($GLOBALS['db'], $tablename) == -1) {            $my_link = '<a href="tbl_tracking.php?' . $url_query . '&amp;table=' . htmlspecialchars($tablename) .'">';            $my_link .= PMA_getIcon('eye.png', __('Track table')) . '</a>';        ?>            <tr class="noclick <?php echo $style;?>">            <td><?php echo htmlspecialchars($tablename);?></td>            <td><?php echo $my_link;?></td>            </tr>        <?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }        }    }    ?>    </tbody>    </table><?php}// If available print out database logif (count($data['ddlog']) > 0) {    $log = '';    foreach ($data['ddlog'] as $entry) {        $log .= '# ' . $entry['date'] . ' ' . $entry['username'] . "\n" . $entry['statement'] . "\n";    }    PMA_showMessage(__('Database Log'), $log);}/** * Display the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form handling code. * * @package PhpMyAdmin *//** * Base class for forms, loads default configuration options, checks allowed * values etc. * * @package    phpMyAdmin */class Form{    /**     * Form name     * @var string     */    public $name;    /**     * Arbitrary index, doesn't affect class' behavior     * @var int     */    public $index;    /**     * Form fields (paths), filled by {@link readFormPaths()}, indexed by field name     * @var array     */    public $fields;    /**     * Stores default values for some fields (eg. pmadb tables)     * @var array     */    public $default;    /**     * Caches field types, indexed by field names     * @var array     */    private $fieldsTypes;    /**     * Constructor, reads default config values     *     * @param string  $form_name     * @param array   $form     * @param int     $index      arbitrary index, stored in Form::$index     */    public function __construct($form_name, array $form, $index = null)    {        $this->index = $index;        $this->loadForm($form_name, $form);    }    /**     * Returns type of given option     *     * @param   string  $option_name path or field name     * @return  string|null  one of: boolean, integer, double, string, select, array     */    public function getOptionType($option_name)    {        $key = ltrim(substr($option_name, strrpos($option_name, '/')), '/');        return isset($this->fieldsTypes[$key])            ? $this->fieldsTypes[$key]            : null;    }    /**     * Returns allowed values for select fields     *     * @param   string  $option_path     * @return  array     */    public function getOptionValueList($option_path)    {        $value = ConfigFile::getInstance()->getDbEntry($option_path);        if ($value === null) {            trigger_error("$option_path - select options not defined", E_USER_ERROR);            return array();        }        if (!is_array($value)) {            trigger_error("$option_path - not a static value list", E_USER_ERROR);            return array();        }        // convert array('#', 'a', 'b') to array('a', 'b')        if (isset($value[0]) && $value[0] === '#') {            // remove first element ('#')            array_shift($value);        } else {            // convert value list array('a', 'b') to array('a' => 'a', 'b' => 'b')            $has_string_keys = false;            $keys = array();            for ($i = 0; $i < count($value); $i++) {                if (!isset($value[$i])) {                    $has_string_keys = true;                    break;                }                $keys[] = is_bool($value[$i]) ? (int)$value[$i] : $value[$i];            }            if (!$has_string_keys) {                $value = array_combine($keys, $value);            }        }        // $value has keys and value names, return it        return $value;    }    /**     * array_walk callback function, reads path of form fields from     * array (see file comment in setup.forms.php or user_preferences.forms.inc)     *     * @param   mixed   $value     * @param   mixed   $key     * @param   mixed   $prefix     */    private function _readFormPathsCallback($value, $key, $prefix)    {        static $group_counter = 0;        if (is_array($value)) {            $prefix .= $key . '/';            array_walk($value, array($this, '_readFormPathsCallback'), $prefix);        } else {            if (!is_int($key)) {                $this->default[$prefix . $key] = $value;                $value = $key;            }            // add unique id to group ends            if ($value == ':group:end') {                $value .= ':' . $group_counter++;            }            $this->fields[] = $prefix . $value;        }    }    /**     * Reads form paths to {@link $fields}     *     * @param array $form     */    protected function readFormPaths($form)    {        // flatten form fields' paths and save them to $fields        $this->fields = array();        array_walk($form, array($this, '_readFormPathsCallback'), '');        // $this->fields is an array of the form: [0..n] => 'field path'        // change numeric indexes to contain field names (last part of the path)        $paths = $this->fields;        $this->fields = array();        foreach ($paths as $path) {            $key = ltrim(substr($path, strrpos($path, '/')), '/');            $this->fields[$key] = $path;        }        // now $this->fields is an array of the form: 'field name' => 'field path'    }    /**     * Reads fields' types to $this->fieldsTypes     *     */    protected function readTypes()    {        $cf = ConfigFile::getInstance();        foreach ($this->fields as $name => $path) {            if (strpos($name, ':group:') === 0) {                $this->fieldsTypes[$name] = 'group';                continue;            }            $v = $cf->getDbEntry($path);            if ($v !== null) {                $type = is_array($v) ? 'select' : $v;            } else {                $type = gettype($cf->getDefault($path));            }            $this->fieldsTypes[$name] = $type;        }    }    /**     * Reads form settings and prepares class to work with given subset of     * config file     *     * @param string $form_name     * @param array  $form     */    public function loadForm($form_name, $form)    {        $this->name = $form_name;        $this->readFormPaths($form);        $this->readTypes();    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Get some core libraries */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);/** * The form used to define the field to add has been submitted */$abort = false;// check number of fields to be createdif (isset($_REQUEST['submit_num_fields'])) {    if (isset($_REQUEST['orig_after_field'])) {        $_REQUEST['after_field'] = $_REQUEST['orig_after_field'];    }    if (isset($_REQUEST['orig_field_where'])) {        $_REQUEST['field_where'] = $_REQUEST['orig_field_where'];    }    $num_fields = $_REQUEST['orig_num_fields'] + $_REQUEST['added_fields'];    $regenerate = true;} elseif (isset($_REQUEST['num_fields']) && intval($_REQUEST['num_fields']) > 0) {    $num_fields = (int) $_REQUEST['num_fields'];} else {    $num_fields = 1;}if (isset($_REQUEST['do_save_data'])) {    $query = '';    $definitions = array();    // Transforms the radio button field_key into 3 arrays    $field_cnt      = count($_REQUEST['field_name']);    $field_primary  = array();    $field_index    = array();    $field_unique   = array();    $field_fulltext = array();    for ($i = 0; $i < $field_cnt; ++$i) {        if (isset($_REQUEST['field_key'][$i])         && strlen($_REQUEST['field_name'][$i])) {            if ($_REQUEST['field_key'][$i] == 'primary_' . $i) {                $field_primary[] = $i;            }            if ($_REQUEST['field_key'][$i] == 'index_' . $i) {                $field_index[]   = $i;            }            if ($_REQUEST['field_key'][$i] == 'unique_' . $i) {                $field_unique[]  = $i;            }            if ($_REQUEST['field_key'][$i] == 'fulltext_' . $i) {                $field_fulltext[]  = $i;            }        } // end if    } // end for    // Builds the field creation statement and alters the table    for ($i = 0; $i < $field_cnt; ++$i) {        // '0' is also empty for php :-(        if (empty($_REQUEST['field_name'][$i]) && $_REQUEST['field_name'][$i] != '0') {            continue;        }        $definition = ' ADD ' . PMA_Table::generateFieldSpec(            $_REQUEST['field_name'][$i],            $_REQUEST['field_type'][$i],            $_REQUEST['field_length'][$i],            $_REQUEST['field_attribute'][$i],            isset($_REQUEST['field_collation'][$i])                ? $_REQUEST['field_collation'][$i]                : '',            isset($_REQUEST['field_null'][$i])                ? $_REQUEST['field_null'][$i]                : 'NOT NULL',            $_REQUEST['field_default_type'][$i],            $_REQUEST['field_default_value'][$i],            isset($_REQUEST['field_extra'][$i])                ? $_REQUEST['field_extra'][$i]                : false,            isset($_REQUEST['field_comments'][$i])                ? $_REQUEST['field_comments'][$i]                : '',            $field_primary,            $i        );        if ($_REQUEST['field_where'] != 'last') {            // Only the first field can be added somewhere other than at the end            if ($i == 0) {                if ($_REQUEST['field_where'] == 'first') {                    $definition .= ' FIRST';                } else {                    $definition .= ' AFTER ' . PMA_backquote($_REQUEST['after_field']);                }            } else {                $definition .= ' AFTER ' . PMA_backquote($_REQUEST['field_name'][$i-1]);            }        }        $definitions[] = $definition;    } // end for    // Builds the primary keys statements and updates the table    if (count($field_primary)) {        $fields = array();        foreach ($field_primary as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD PRIMARY KEY (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the indexes statements and updates the table    if (count($field_index)) {        $fields = array();        foreach ($field_index as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD INDEX (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the uniques statements and updates the table    if (count($field_unique)) {        $fields = array();        foreach ($field_unique as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD UNIQUE (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the fulltext statements and updates the table    if (count($field_fulltext)) {        $fields = array();        foreach ($field_fulltext as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD FULLTEXT (' . implode(', ', $fields) . ') ';        unset($fields);    }    // To allow replication, we first select the db to use and then run queries    // on this db.    PMA_DBI_select_db($db) or PMA_mysqlDie(PMA_getError(), 'USE ' . PMA_backquotes($db), '', $err_url);    $sql_query    = 'ALTER TABLE ' . PMA_backquote($table) . ' ' . implode(', ', $definitions);    $result = PMA_DBI_try_query($sql_query);    if ($result === true) {        // If comments were sent, enable relation stuff        include_once './libraries/transformations.lib.php';        // Update comment table for mime types [MIME]        if (isset($_REQUEST['field_mimetype'])         && is_array($_REQUEST['field_mimetype'])         && $cfg['BrowseMIME']) {            foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {                if (isset($_REQUEST['field_name'][$fieldindex])                 && strlen($_REQUEST['field_name'][$fieldindex])) {                    PMA_setMIME($db, $table,                        $_REQUEST['field_name'][$fieldindex],                        $mimetype,                        $_REQUEST['field_transformation'][$fieldindex],                        $_REQUEST['field_transformation_options'][$fieldindex]);                }            }        }        // Go back to the structure sub-page        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';    } else {        PMA_mysqlDie('', '', '', $err_url, false);        // An error happened while inserting/updating a table definition.        // to prevent total loss of that data, we embed the form once again.        // The variable $regenerate will be used to restore data in libraries/tbl_properties.inc.php        $num_fields = $_REQUEST['orig_num_fields'];        if (isset($_REQUEST['orig_after_field'])) {            $_REQUEST['after_field'] = $_REQUEST['orig_after_field'];        }        if (isset($_REQUEST['orig_field_where'])) {            $_REQUEST['field_where'] = $_REQUEST['orig_field_where'];        }        $regenerate = true;    }} // end do alter table/** * Displays the form used to define the new field */if ($abort == false) {    /**     * Gets tables informations     */    include_once './libraries/tbl_common.php';    include_once './libraries/tbl_info.inc.php';    /**     * Displays top menu links     */    $active_page = 'tbl_structure.php';    if ($GLOBALS['is_ajax_request'] != true) {        include_once './libraries/tbl_links.inc.php';    }    /**     * Display the form     */    $action = 'tbl_addfield.php';    include_once './libraries/tbl_properties.inc.php';    // Diplays the footer    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Display table relations for viewing and editing * * includes phpMyAdmin relations and InnoDB relations * * @todo fix name handling: currently names with dots (.) are not properly handled for internal relations (but foreign keys relations are correct) * @todo foreign key constraints require both fields being of equal type and size * @todo check foreign fields to be from same type and size, all other makes no sense * @todo add an link to create an index required for constraints, or an option to do automatically * @todo if above todos are fullfilled we can add all fields meet requirements in the select dropdown * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'tbl_relation.js';require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_sql.php';/** * Gets tables informations */require_once './libraries/tbl_info.inc.php';// Note: in libraries/tbl_links.inc.php we get and display the table comment.// For InnoDB, this comment contains the REFER information but any update// has not been done yet (will be done in tbl_relation.php later).$avoid_show_comment = true;/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';$options_array = array(    'CASCADE'   => 'CASCADE',    'SET_NULL'  => 'SET NULL',    'NO_ACTION' => 'NO ACTION',    'RESTRICT'  => 'RESTRICT',);/** * Generate dropdown choices * * @param string $dropdown_question Message to display * @param string $select_name       Name of the <select> field * @param array  $choices           Choices for dropdown * @param string $selected_value    Selected value * * @return  string   The existing value (for selected) * * @access  public */function PMA_generate_dropdown($dropdown_question, $select_name, $choices, $selected_value){    echo htmlspecialchars($dropdown_question) . '&nbsp;&nbsp;';    echo '<select name="' . htmlspecialchars($select_name) . '">' . "\n";    foreach ($choices as $one_value => $one_label) {        echo '<option value="' . htmlspecialchars($one_value) . '"';        if ($selected_value == $one_value) {            echo ' selected="selected" ';        }        echo '>' . htmlspecialchars($one_label) . '</option>' . "\n";    }    echo '</select>' . "\n";}/** * Split a string on backquote pairs * * @param string $text original string * * @return  array   containing the elements (and their surrounding backquotes) * * @access  public */function PMA_backquote_split($text){    $elements = array();    $final_pos = strlen($text) - 1;    $pos = 0;    while ($pos <= $final_pos) {        $first_backquote = strpos($text, '`', $pos);        $second_backquote = strpos($text, '`', $first_backquote + 1);        // after the second one, there might be another one which means        // this is an escaped backquote        if ($second_backquote < $final_pos && '`' == $text[$second_backquote + 1]) {            $second_backquote = strpos($text, '`', $second_backquote + 2);        }        if (false === $first_backquote || false === $second_backquote) {            break;        }        $elements[] = substr($text, $first_backquote, $second_backquote - $first_backquote + 1);        $pos = $second_backquote + 1;    }    return($elements);}/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam();/** * Updates */if ($cfgRelation['relwork']) {    $existrel = PMA_getForeigners($db, $table, '', 'internal');}if (PMA_foreignkey_supported($tbl_type)) {    $existrel_foreign = PMA_getForeigners($db, $table, '', 'foreign');}if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);}// will be used in the logic for internal relations and foreign keys:$me_fields_name = isset($_REQUEST['fields_name'])    ? $_REQUEST['fields_name']    : null;// u p d a t e s   f o r   I n t e r n a l    r e l a t i o n sif (isset($destination) && $cfgRelation['relwork']) {    foreach ($destination as $master_field_md5 => $foreign_string) {        $upd_query = false;        // Map the fieldname's md5 back to its real name        $master_field = $me_fields_name[$master_field_md5];        if (! empty($foreign_string)) {            $foreign_string = trim($foreign_string, '`');            list($foreign_db, $foreign_table, $foreign_field) = explode('.', $foreign_string);            if (! isset($existrel[$master_field])) {                $upd_query  = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation'])                            . '(master_db, master_table, master_field, foreign_db, foreign_table, foreign_field)'                            . ' values('                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($table) . '\', '                            . '\'' . PMA_sqlAddSlashes($master_field) . '\', '                            . '\'' . PMA_sqlAddSlashes($foreign_db) . '\', '                            . '\'' . PMA_sqlAddSlashes($foreign_table) . '\','                            . '\'' . PMA_sqlAddSlashes($foreign_field) . '\')';            } elseif ($existrel[$master_field]['foreign_db'] . '.' .$existrel[$master_field]['foreign_table'] . '.' . $existrel[$master_field]['foreign_field'] != $foreign_string) {                $upd_query  = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation']) . ' SET'                            . ' foreign_db       = \'' . PMA_sqlAddSlashes($foreign_db) . '\', '                            . ' foreign_table    = \'' . PMA_sqlAddSlashes($foreign_table) . '\', '                            . ' foreign_field    = \'' . PMA_sqlAddSlashes($foreign_field) . '\' '                            . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                            . ' AND master_field = \'' . PMA_sqlAddSlashes($master_field) . '\'';            } // end if... else....        } elseif (isset($existrel[$master_field])) {            $upd_query      = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation'])                            . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                            . ' AND master_field = \'' . PMA_sqlAddSlashes($master_field) . '\'';        } // end if... else....        if ($upd_query) {            PMA_query_as_controluser($upd_query);        }    } // end while} // end if (updates for internal relations)// u p d a t e s    f o r    f o r e i g n    k e y s// (for now, one index name only; we keep the definitions if the// foreign db is not the same)// I use $sql_query to be able to display directly the query via// PMA_showMessage()if (isset($_REQUEST['destination_foreign'])) {    $display_query = '';    $seen_error = false;    foreach ($_REQUEST['destination_foreign'] as $master_field_md5 => $foreign_string) {        // Map the fieldname's md5 back to it's real name        $master_field = $me_fields_name[$master_field_md5];        if (! empty($foreign_string)) {            list($foreign_db, $foreign_table, $foreign_field) = PMA_backquote_split($foreign_string);            if (! isset($existrel_foreign[$master_field])) {                // no key defined for this field                // The next few lines are repeated below, so they                // could be put in an include file                // Note: I tried to enclose the db and table name with                // backquotes but MySQL 4.0.16 did not like the syntax                // (for example: `base2`.`table1`)                $sql_query  = 'ALTER TABLE ' . PMA_backquote($table)                            . ' ADD FOREIGN KEY ('                            . PMA_backquote($master_field) . ')'                            . ' REFERENCES '                            . $foreign_db . '.'                            . $foreign_table . '('                            . $foreign_field . ')';                if (! empty($_REQUEST['on_delete'][$master_field_md5])) {                    $sql_query .= ' ON DELETE ' . $options_array[$_REQUEST['on_delete'][$master_field_md5]];                }                if (! empty($_REQUEST['on_update'][$master_field_md5])) {                    $sql_query .= ' ON UPDATE ' . $options_array[$_REQUEST['on_update'][$master_field_md5]];                }                $sql_query .= ';';                $display_query .= $sql_query . "\n";                // end repeated code            } elseif (PMA_backquote($existrel_foreign[$master_field]['foreign_db']) != $foreign_db                || PMA_backquote($existrel_foreign[$master_field]['foreign_table']) != $foreign_table                || PMA_backquote($existrel_foreign[$master_field]['foreign_field']) != $foreign_field                || ($_REQUEST['on_delete'][$master_field_md5] != (!empty($existrel_foreign[$master_field]['on_delete']) ? $existrel_foreign[$master_field]['on_delete'] : 'RESTRICT'))                || ($_REQUEST['on_update'][$master_field_md5] != (!empty($existrel_foreign[$master_field]['on_update']) ? $existrel_foreign[$master_field]['on_update'] : 'RESTRICT'))                   ) {                // another foreign key is already defined for this field                // or                // an option has been changed for ON DELETE or ON UPDATE                // remove existing key and add the new one                $sql_query  = 'ALTER TABLE ' . PMA_backquote($table)                            . ' DROP FOREIGN KEY '                            . PMA_backquote($existrel_foreign[$master_field]['constraint']) . ', '                            . 'ADD FOREIGN KEY ('                            . PMA_backquote($master_field) . ')'                            . ' REFERENCES '                            . $foreign_db . '.'                            . $foreign_table . '('                            . $foreign_field . ')';                if (! empty($_REQUEST['on_delete'][$master_field_md5])) {                    $sql_query   .= ' ON DELETE '                        . $options_array[$_REQUEST['on_delete'][$master_field_md5]];                }                if (! empty($_REQUEST['on_update'][$master_field_md5])) {                    $sql_query   .= ' ON UPDATE '                        . $options_array[$_REQUEST['on_update'][$master_field_md5]];                }                $sql_query .= ';';                $display_query .= $sql_query . "\n";            } // end if... else....        } elseif (isset($existrel_foreign[$master_field])) {            $sql_query  = 'ALTER TABLE ' . PMA_backquote($table)                    . ' DROP FOREIGN KEY '                    . PMA_backquote($existrel_foreign[$master_field]['constraint']);            $sql_query .= ';';            $display_query .= $sql_query . "\n";        } // end if... else....        if (! empty($sql_query)) {            PMA_DBI_try_query($sql_query);            $tmp_error = PMA_DBI_getError();            if (! empty($tmp_error)) {                $seen_error = true;            }            if (substr($tmp_error, 1, 4) == '1216'                ||  substr($tmp_error, 1, 4) == '1452'            ) {                PMA_mysqlDie($tmp_error, $sql_query, false, '', false);                echo PMA_showMySQLDocu('manual_Table_types', 'InnoDB_foreign_key_constraints') . "\n";            }            if (substr($tmp_error, 1, 4) == '1005') {                $message = PMA_Message::error(__('Error creating foreign key on %1$s (check data types)'));                $message->addParam($master_field);                $message->display();                echo PMA_showMySQLDocu('manual_Table_types', 'InnoDB_foreign_key_constraints') . "\n";            }            unset($tmp_error);            $sql_query = '';        }    } // end foreach    if (!empty($display_query)) {        if ($seen_error) {            PMA_showMessage(__('Error'), null, 'error');        } else {            PMA_showMessage(__('Your SQL query has been executed successfully'), null, 'success');        }    }} // end if isset($destination_foreign)// U p d a t e s   f o r   d i s p l a y   f i e l dif ($cfgRelation['displaywork'] && isset($display_field)) {    $upd_query = false;    if ($disp) {        if ($display_field != '') {            $upd_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' SET display_field = \'' . PMA_sqlAddSlashes($display_field) . '\''                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        } else {            $upd_query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        }    } elseif ($display_field != '') {        $upd_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                   . '(db_name, table_name, display_field) '                   . ' VALUES('                   . '\'' . PMA_sqlAddSlashes($db) . '\','                   . '\'' . PMA_sqlAddSlashes($table) . '\','                   . '\'' . PMA_sqlAddSlashes($display_field) . '\')';    }    if ($upd_query) {        PMA_query_as_controluser($upd_query);    }} // end if// If we did an update, refresh our dataif (isset($destination) && $cfgRelation['relwork']) {    $existrel = PMA_getForeigners($db, $table, '', 'internal');}if (isset($destination_foreign) && PMA_foreignkey_supported($tbl_type)) {    $existrel_foreign = PMA_getForeigners($db, $table, '', 'foreign');}if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);}/** * Dialog */// common formecho '<form method="post" action="tbl_relation.php">' . "\n";echo PMA_generate_common_hidden_inputs($db, $table);// relationsif ($cfgRelation['relwork'] || PMA_foreignkey_supported($tbl_type)) {    // To choose relations we first need all tables names in current db    // and if the main table supports foreign keys    // we use SHOW TABLE STATUS because we need to find other tables of the    // same engine.    if (PMA_foreignkey_supported($tbl_type)) {        $tab_query           = 'SHOW TABLE STATUS FROM ' . PMA_backquote($db);        // [0] of the row is the name        // [1] is the type    } else {        $tab_query           = 'SHOW TABLES FROM ' . PMA_backquote($db);        // [0] of the row is the name    }    $tab_rs              = PMA_DBI_query($tab_query, null, PMA_DBI_QUERY_STORE);    $selectboxall[] = '';    $selectboxall_foreign[] = '';    while ($curr_table = PMA_DBI_fetch_row($tab_rs)) {        $current_table = new PMA_Table($curr_table[0], $db);        // explicitely ask for non-quoted list of indexed columns        $selectboxall = array_merge($selectboxall, $current_table->getUniqueColumns($backquoted = false));        // if foreign keys are supported, collect all keys from other        // tables of the same engine        if (PMA_foreignkey_supported($tbl_type)            && isset($curr_table[1])            && strtoupper($curr_table[1]) == $tbl_type        ) {             // explicitely ask for non-quoted list of indexed columns             // need to obtain backquoted values to support dots inside values             $selectboxall_foreign = array_merge($selectboxall_foreign, $current_table->getIndexedColumns($backquoted = true));        }    } // end while over tables} // end if// Now find out the columns of our $table// need to use PMA_DBI_QUERY_STORE with PMA_DBI_num_rows() in mysqli$columns = PMA_DBI_get_columns($db, $table);if (count($columns) > 0) {    foreach ($columns as $row) {        $save_row[] = $row;    }    $saved_row_cnt  = count($save_row);    ?>    <fieldset>    <legend><?php echo __('Relations'); ?></legend>    <table>    <tr><th><?php echo __('Column'); ?></th>    <?php    if ($cfgRelation['relwork']) {        echo '<th>' . __('Internal relation');        if (PMA_foreignkey_supported($tbl_type)) {            echo PMA_showHint(__('An internal relation is not necessary when a corresponding FOREIGN KEY relation exists.'));        }        echo '</th>';    }    if (PMA_foreignkey_supported($tbl_type)) {        // this does not have to be translated, it's part of the MySQL syntax        echo '<th colspan="2">' . __('Foreign key constraint') . ' (' . $tbl_type . ')';        echo '</th>';    }    ?>    </tr>    <?php    $odd_row = true;    for ($i = 0; $i < $saved_row_cnt; $i++) {        $myfield = $save_row[$i]['Field'];        // Use an md5 as array index to avoid having special characters in the name atttibure (see bug #1746964 )        $myfield_md5 = md5($myfield);        $myfield_html = htmlspecialchars($myfield);        ?>    <tr class="<?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">        <td align="center">            <strong><?php echo $myfield_html; ?></strong>            <input type="hidden" name="fields_name[<?php echo $myfield_md5; ?>]" value="<?php echo $myfield_html; ?>"/>        </td>        <?php        if ($cfgRelation['relwork']) {            ?>        <td><select name="destination[<?php echo $myfield_md5; ?>]">            <?php            // PMA internal relations            if (isset($existrel[$myfield])) {                $foreign_field    = $existrel[$myfield]['foreign_db'] . '.'                         . $existrel[$myfield]['foreign_table'] . '.'                         . $existrel[$myfield]['foreign_field'];            } else {                $foreign_field    = false;            }            $seen_key = false;            foreach ($selectboxall as $value) {                echo '                '                     . '<option value="' . htmlspecialchars($value) . '"';                if ($foreign_field && $value == $foreign_field) {                    echo ' selected="selected"';                    $seen_key = true;                }                echo '>' . htmlspecialchars($value) . '</option>'. "\n";            } // end while            // if the link defined in relationtable points to a foreign field            // that is not a key in the foreign table, we show the link            // (will not be shown with an arrow)            if ($foreign_field && !$seen_key) {                echo '                '                    .'<option value="' . htmlspecialchars($foreign_field) . '"'                    .' selected="selected"'                    .'>' . $foreign_field . '</option>'. "\n";            }            ?>            </select>        </td>            <?php        } // end if (internal relations)        if (PMA_foreignkey_supported($tbl_type)) {            echo '<td>';            if (!empty($save_row[$i]['Key'])) {                ?>            <span class="formelement">            <select name="destination_foreign[<?php echo $myfield_md5; ?>]" class="referenced_column_dropdown">                <?php                if (isset($existrel_foreign[$myfield])) {                    // need to backquote to support a dot character inside                    // an element                    $foreign_field    = PMA_backquote($existrel_foreign[$myfield]['foreign_db']) . '.'                             . PMA_backquote($existrel_foreign[$myfield]['foreign_table']) . '.'                             . PMA_backquote($existrel_foreign[$myfield]['foreign_field']);                } else {                    $foreign_field    = false;                }                $found_foreign_field = false;                foreach ($selectboxall_foreign as $value) {                    echo '                '                         . '<option value="' . htmlspecialchars($value) . '"';                    if ($foreign_field && $value == $foreign_field) {                        echo ' selected="selected"';                        $found_foreign_field = true;                    }                    echo '>' . htmlspecialchars($value) . '</option>'. "\n";                } // end while                // we did not find the foreign field in the tables of current db,                // must be defined in another db so show it to avoid erasing it                if (!$found_foreign_field && $foreign_field) {                    echo '                '                         . '<option value="' . htmlspecialchars($foreign_field) . '"';                    echo ' selected="selected"';                    echo '>' . $foreign_field . '</option>' . "\n";                }                ?>            </select>            </span>            <span class="formelement">                <?php                // For ON DELETE and ON UPDATE, the default action                // is RESTRICT as per MySQL doc; however, a SHOW CREATE TABLE                // won't display the clause if it's set as RESTRICT.                PMA_generate_dropdown('ON DELETE',                    'on_delete[' . $myfield_md5 . ']',                    $options_array,                    isset($existrel_foreign[$myfield]['on_delete']) ? $existrel_foreign[$myfield]['on_delete']: 'RESTRICT');                echo '</span>' . "\n"                    .'<span class="formelement">' . "\n";                PMA_generate_dropdown('ON UPDATE',                    'on_update[' . $myfield_md5 . ']',                    $options_array,                    isset($existrel_foreign[$myfield]['on_update']) ? $existrel_foreign[$myfield]['on_update']: 'RESTRICT');                echo '</span>' . "\n";            } else {                echo __('No index defined!');            } // end if (a key exists)            echo '        </td>';        } // end if (InnoDB)        ?>    </tr>        <?php    } // end for    unset( $myfield, $myfield_md5, $myfield_html);    echo '    </table>' . "\n";    echo '</fieldset>' . "\n";    if ($cfgRelation['displaywork']) {        // Get "display_field" infos        $disp = PMA_getDisplayField($db, $table);        ?>    <fieldset>        <label><?php echo __('Choose column to display') . ': '; ?></label>        <select name="display_field">            <option value="">---</option>        <?php        foreach ($save_row AS $row) {            echo '            <option value="' . htmlspecialchars($row['Field']) . '"';            if (isset($disp) && $row['Field'] == $disp) {                echo ' selected="selected"';            }            echo '>' . htmlspecialchars($row['Field']) . '</option>'. "\n";        } // end while        ?>        </select>    </fieldset>        <?php    } // end if (displayworks)    ?>    <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Save'); ?>" />    </fieldset></form>    <?php} // end if (we have columns in this table)/** * Displays the footer */require './libraries/footer.inc.php';?>
