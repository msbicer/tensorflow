<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form management class, displays and processes forms * * Explanation of used terms: * o work_path - original field path, eg. Servers/4/verbose * o system_path - work_path modified so that it points to the first server, *                 eg. Servers/1/verbose * o translated_path - work_path modified for HTML field name, a path with *                     slashes changed to hyphens, eg. Servers-4-verbose * * @package PhpMyAdmin *//** * Core libraries. */require_once './libraries/config/FormDisplay.tpl.php';require_once './libraries/config/validate.lib.php';require_once './libraries/js_escape.lib.php';/** * Form management class, displays and processes forms */class FormDisplay{    /**     * Form list     * @var Form[]     */    private $forms = array();    /**     * Stores validation errors, indexed by paths     * [ Form_name ] is an array of form errors     * [path] is a string storing error associated with single field     * @var array     */    private $errors = array();    /**     * Paths changed so that they can be used as HTML ids, indexed by paths     * @var array     */    private $translated_paths = array();    /**     * Server paths change indexes so we define maps from current server     * path to the first one, indexed by work path     * @var array     */    private $system_paths = array();    /**     * Language strings which will be sent to PMA_messages JS variable     * Will be looked up in $GLOBALS: str{value} or strSetup{value}     * @var array     */    private $js_lang_strings = array();    /**     * Tells whether forms have been validated     * @var bool     */    private $is_validated = true;    /**     * Dictionary with user preferences keys     * @var array     */    private $userprefs_keys;    /**     * Dictionary with disallowed user preferences keys     * @var array     */    private $userprefs_disallow;    public function __construct()    {        $this->js_lang_strings = array(            'error_nan_p' => __('Not a positive number'),            'error_nan_nneg' => __('Not a non-negative number'),            'error_incorrect_port' => __('Not a valid port number'),            'error_invalid_value' => __('Incorrect value'),            'error_value_lte' => __('Value must be equal or lower than %s'));        // initialize validators        PMA_config_get_validators();    }    /**     * Registers form in form manager     *     * @param string $form_name     * @param array  $form     * @param int    $server_id 0 if new server, validation; >= 1 if editing a server     */    public function registerForm($form_name, array $form, $server_id = null)    {        $this->forms[$form_name] = new Form($form_name, $form, $server_id);        $this->is_validated = false;        foreach ($this->forms[$form_name]->fields as $path) {            $work_path = $server_id === null                ? $path                : str_replace('Servers/1/', "Servers/$server_id/", $path);            $this->system_paths[$work_path] = $path;            $this->translated_paths[$work_path] = str_replace('/', '-', $work_path);        }    }    /**     * Processes forms, returns true on successful save     *     * @param  bool  $allow_partial_save  allows for partial form saving on failed validation     * @param  bool  $check_form_submit   whether check for $_POST['submit_save']     * @return boolean     */    public function process($allow_partial_save = true, $check_form_submit = true)    {        if ($check_form_submit && !isset($_POST['submit_save'])) {            return false;        }        // save forms        if (count($this->forms) > 0) {            return $this->save(array_keys($this->forms), $allow_partial_save);        }        return false;    }    /**     * Runs validation for all registered forms     *     */    private function _validate()    {        if ($this->is_validated) {            return;        }        $cf = ConfigFile::getInstance();        $paths = array();        $values = array();        foreach ($this->forms as $form) {            /* @var $form Form */            $paths[] = $form->name;            // collect values and paths            foreach ($form->fields as $path) {                $work_path = array_search($path, $this->system_paths);                $values[$path] = $cf->getValue($work_path);                $paths[] = $path;            }        }        // run validation        $errors = PMA_config_validate($paths, $values, false);        // change error keys from canonical paths to work paths        if (is_array($errors) && count($errors) > 0) {            $this->errors = array();            foreach ($errors as $path => $error_list) {                $work_path = array_search($path, $this->system_paths);                // field error                if (!$work_path) {                    // form error, fix path                    $work_path = $path;                }                $this->errors[$work_path] = $error_list;            }        }        $this->is_validated = true;    }    /**     * Outputs HTML for forms     *     * @param bool $tabbed_form     * @param bool   $show_restore_default  whether show "restore default" button besides the input field     */    public function display($tabbed_form = false, $show_restore_default = false)    {        static $js_lang_sent = false;        $js = array();        $js_default = array();        $tabbed_form = $tabbed_form && (count($this->forms) > 1);        $validators = PMA_config_get_validators();        display_form_top();        if ($tabbed_form) {            $tabs = array();            foreach ($this->forms as $form) {                $tabs[$form->name] = PMA_lang("Form_$form->name");            }            display_tabs_top($tabs);        }        // valdiate only when we aren't displaying a "new server" form        $is_new_server = false;        foreach ($this->forms as $form) {            /* @var $form Form */            if ($form->index === 0) {                $is_new_server = true;                break;            }        }        if (!$is_new_server) {            $this->_validate();        }        // user preferences        $this->_loadUserprefsInfo();        // display forms        foreach ($this->forms as $form) {            /* @var $form Form */            $form_desc = isset($GLOBALS["strConfigForm_{$form->name}_desc"])                ? PMA_lang("Form_{$form->name}_desc")                : '';            $form_errors = isset($this->errors[$form->name])                ? $this->errors[$form->name] : null;            display_fieldset_top(                PMA_lang("Form_$form->name"),                $form_desc,                $form_errors,                array('id' => $form->name)            );            foreach ($form->fields as $field => $path) {                $work_path = array_search($path, $this->system_paths);                $translated_path = $this->translated_paths[$work_path];                // always true/false for user preferences display                // otherwise null                $userprefs_allow = isset($this->userprefs_keys[$path])                    ? !isset($this->userprefs_disallow[$path])                    : null;                // display input                $this->_displayFieldInput(                    $form,                    $field,                    $path,                    $work_path,                    $translated_path,                    $show_restore_default,                    $userprefs_allow,                    $js_default                );                // register JS validators for this field                if (isset($validators[$path])) {                    js_validate($translated_path, $validators[$path], $js);                }            }            display_fieldset_bottom();        }        if ($tabbed_form) {            display_tabs_bottom();        }        display_form_bottom();        // if not already done, send strings used for valdiation to JavaScript        if (!$js_lang_sent) {            $js_lang_sent = true;            $js_lang = array();            foreach ($this->js_lang_strings as $strName => $strValue) {                $js_lang[] = "'$strName': '" . PMA_jsFormat($strValue, false) . '\'';            }            $js[] = "$.extend(PMA_messages, {\n\t" . implode(",\n\t", $js_lang) . '})';        }        $js[] = "$.extend(defaultValues, {\n\t" . implode(",\n\t", $js_default) . '})';        display_js($js);    }    /**     * Prepares data for input field display and outputs HTML code     *     * @param Form   $form     * @param string $field                 field name as it appears in $form     * @param string $system_path           field path, eg. Servers/1/verbose     * @param string $work_path             work path, eg. Servers/4/verbose     * @param string $translated_path       work path changed so that it can be used as XHTML id     * @param bool   $show_restore_default  whether show "restore default" button besides the input field     * @param mixed  $userprefs_allow       whether user preferences are enabled for this field     *                                      (null - no support, true/false - enabled/disabled)     * @param array  &$js_default           array which stores JavaScript code to be displayed     */    private function _displayFieldInput(Form $form, $field, $system_path, $work_path,            $translated_path, $show_restore_default, $userprefs_allow, array &$js_default)    {        $name = PMA_lang_name($system_path);        $description = PMA_lang_name($system_path, 'desc', '');        $cf = ConfigFile::getInstance();        $value = $cf->get($work_path);        $value_default = $cf->getDefault($system_path);        $value_is_default = false;        if ($value === null || $value === $value_default) {            $value = $value_default;            $value_is_default = true;        }        $opts = array(            'doc' => $this->getDocLink($system_path),            'wiki' =>  $this->getWikiLink($system_path),            'show_restore_default' => $show_restore_default,            'userprefs_allow' => $userprefs_allow,            'userprefs_comment' => PMA_lang_name($system_path, 'cmt', ''));        if (isset($form->default[$system_path])) {            $opts['setvalue'] = $form->default[$system_path];        }        if (isset($this->errors[$work_path])) {            $opts['errors'] = $this->errors[$work_path];        }        switch ($form->getOptionType($field)) {            case 'string':                $type = 'text';                break;            case 'short_string':                $type = 'short_text';                break;            case 'double':            case 'integer':                $type = 'number_text';                break;            case 'boolean':                $type = 'checkbox';                break;            case 'select':                $type = 'select';                $opts['values'] = $form->getOptionValueList($form->fields[$field]);                break;            case 'array':                $type = 'list';                $value = (array) $value;                $value_default = (array) $value_default;                break;            case 'group':                if (substr($field, 7, 4) != 'end:') { // :group:end is changed to :group:end:{unique id} in Form class                    display_group_header(substr($field, 7));                } else {                    display_group_footer();                }                return;            case 'NULL':                trigger_error("Field $system_path has no type", E_USER_WARNING);                return;        }        // TrustedProxies requires changes before displaying        if ($system_path == 'TrustedProxies') {            foreach ($value as $ip => &$v) {                if (!preg_match('/^-\d+$/', $ip)) {                    $v = $ip . ': ' . $v;                }            }        }        $this->_setComments($system_path, $opts);        // send default value to form's JS        $js_line = '\'' . $translated_path . '\': ';        switch ($type) {            case 'text':            case 'short_text':            case 'number_text':                $js_line .= '\'' . PMA_escapeJsString($value_default) . '\'';                break;            case 'checkbox':                $js_line .= $value_default ? 'true' : 'false';                break;            case 'select':                $value_default_js = is_bool($value_default)                    ? (int) $value_default                    : $value_default;                $js_line .= '[\'' . PMA_escapeJsString($value_default_js) . '\']';                break;            case 'list':                $js_line .= '\'' . PMA_escapeJsString(implode("\n", $value_default)) . '\'';                break;        }        $js_default[] = $js_line;        display_input($translated_path, $name, $description, $type,            $value, $value_is_default, $opts);    }    /**     * Displays errors     *     */    public function displayErrors()    {        $this->_validate();        if (count($this->errors) == 0) {            return;        }        foreach ($this->errors as $system_path => $error_list) {            if (isset($this->system_paths[$system_path])) {                $path = $this->system_paths[$system_path];                $name = PMA_lang_name($path);            } else {                $name = $GLOBALS["strConfigForm_$system_path"];            }            display_errors($name, $error_list);        }    }    /**     * Reverts erroneous fields to their default values     *     *     */    public function fixErrors()    {        $this->_validate();        if (count($this->errors) == 0) {            return;        }        $cf = ConfigFile::getInstance();        foreach (array_keys($this->errors) as $work_path) {            if (!isset($this->system_paths[$work_path])) {                continue;            }            $canonical_path = $this->system_paths[$work_path];            $cf->set($work_path, $cf->getDefault($canonical_path));        }    }    /**     * Validates select field and casts $value to correct type     *     * @param  string  $value     * @param  array   $allowed     * @return bool     */    private function _validateSelect(&$value, array $allowed)    {        $value_cmp = is_bool($value)            ? (int) $value            : $value;        foreach ($allowed as $vk => $v) {            // equality comparison only if both values are numeric or not numeric            // (allows to skip 0 == 'string' equalling to true) or identity (for string-string)            if (($vk == $value && !(is_numeric($value_cmp) xor is_numeric($vk)))                    || $vk === $value) {                // keep boolean value as boolean                if (!is_bool($value)) {                    settype($value, gettype($vk));                }                return true;            }        }        return false;    }    /**     * Validates and saves form data to session     *     * @param  array|string  $forms               array of form names     * @param  bool          $allow_partial_save  allows for partial form saving on failed validation     * @return boolean  true on success (no errors and all saved)     */    public function save($forms, $allow_partial_save = true)    {        $result = true;        $cf = ConfigFile::getInstance();        $forms = (array) $forms;        $values = array();        $to_save = array();        $is_setup_script = defined('PMA_SETUP');        if ($is_setup_script) {            $this->_loadUserprefsInfo();        }        $this->errors = array();        foreach ($forms as $form_name) {            /* @var $form Form */            if (isset($this->forms[$form_name])) {                $form = $this->forms[$form_name];            } else {                continue;            }            // get current server id            $change_index = $form->index === 0                ? $cf->getServerCount() + 1                : false;            // grab POST values            foreach ($form->fields as $field => $system_path) {                $work_path = array_search($system_path, $this->system_paths);                $key = $this->translated_paths[$work_path];                $type = $form->getOptionType($field);                // skip groups                if ($type == 'group') {                    continue;                }                // ensure the value is set                if (!isset($_POST[$key])) {                    // checkboxes aren't set by browsers if they're off                    if ($type == 'boolean') {                        $_POST[$key] = false;                    } else {                        $this->errors[$form->name][] = sprintf(                            __('Missing data for %s'),                            '<i>' . PMA_lang_name($system_path) . '</i>');                        $result = false;                        continue;                    }                }                // user preferences allow/disallow                if ($is_setup_script && isset($this->userprefs_keys[$system_path])) {                    if (isset($this->userprefs_disallow[$system_path])                            && isset($_POST[$key . '-userprefs-allow'])) {                        unset($this->userprefs_disallow[$system_path]);                    } else if (!isset($_POST[$key . '-userprefs-allow'])) {                        $this->userprefs_disallow[$system_path] = true;                    }                }                // cast variables to correct type                switch ($type) {                    case 'double':                        settype($_POST[$key], 'float');                        break;                    case 'boolean':                    case 'integer':                        if ($_POST[$key] !== '') {                            settype($_POST[$key], $type);                        }                        break;                    case 'select':                        // special treatment for NavigationBarIconic and PropertiesIconic                        if ($key === 'NavigationBarIconic' || $key === 'PropertiesIconic') {                            if ($_POST[$key] !== 'both') {                                settype($_POST[$key], 'boolean');                            }                        }                        if (!$this->_validateSelect($_POST[$key], $form->getOptionValueList($system_path))) {                            $this->errors[$work_path][] = __('Incorrect value');                            $result = false;                            continue;                        }                        break;                    case 'string':                    case 'short_string':                        $_POST[$key] = trim($_POST[$key]);                        break;                    case 'array':                        // eliminate empty values and ensure we have an array                        $post_values = is_array($_POST[$key])                            ? $_POST[$key]                            : explode("\n", $_POST[$key]);                        $_POST[$key] = array();                        foreach ($post_values as $v) {                            $v = trim($v);                            if ($v !== '') {                                $_POST[$key][] = $v;                            }                        }                        break;                }                // now we have value with proper type                $values[$system_path] = $_POST[$key];                if ($change_index !== false) {                    $work_path = str_replace("Servers/$form->index/",                      "Servers/$change_index/", $work_path);                }                $to_save[$work_path] = $system_path;            }        }        // save forms        if ($allow_partial_save || empty($this->errors)) {            foreach ($to_save as $work_path => $path) {                // TrustedProxies requires changes before saving                if ($path == 'TrustedProxies') {                    $proxies = array();                    $i = 0;                    foreach ($values[$path] as $value) {                        $matches = array();                        if (preg_match("/^(.+):(?:[ ]?)(\\w+)$/", $value, $matches)) {                            // correct 'IP: HTTP header' pair                            $ip = trim($matches[1]);                            $proxies[$ip] = trim($matches[2]);                        } else {                            // save also incorrect values                            $proxies["-$i"] = $value;                            $i++;                        }                    }                    $values[$path] = $proxies;                }                $cf->set($work_path, $values[$path], $path);            }            if ($is_setup_script) {                $cf->set('UserprefsDisallow', array_keys($this->userprefs_disallow));            }        }        // don't look for non-critical errors        $this->_validate();        return $result;    }    /**     * Tells whether form validation failed     *     * @return boolean     */    public function hasErrors()    {        return count($this->errors) > 0;    }    /**     * Returns link to documentation     *     * @param string $path     * @return string     */    public function getDocLink($path)    {        $test = substr($path, 0, 6);        if ($test == 'Import' || $test == 'Export') {            return '';        }        return 'Documentation.html#cfg_' . $this->_getOptName($path);    }    /**     * Returns link to wiki     *     * @param string $path     * @return string     */    public function getWikiLink($path)    {        $opt_name = $this->_getOptName($path);        if (substr($opt_name, 0, 7) == 'Servers') {            $opt_name = substr($opt_name, 8);            if (strpos($opt_name, 'AllowDeny') === 0) {                $opt_name = str_replace('_', '_.28', $opt_name) . '.29';            }        }        $test = substr($path, 0, 6);        if ($test == 'Import') {            $opt_name = substr($opt_name, 7);            if ($opt_name == 'format') {                $opt_name = 'format_2';            }        }        if ($test == 'Export') {            $opt_name = substr($opt_name, 7);        }        return PMA_linkURL('http://wiki.phpmyadmin.net/pma/Config#' . $opt_name);    }    /**     * Changes path so it can be used in URLs     *     * @param string $path     * @return string     */    private function _getOptName($path)    {        return str_replace(array('Servers/1/', '/'), array('Servers/', '_'), $path);    }    /**     * Fills out {@link userprefs_keys} and {@link userprefs_disallow}     *     */    private function _loadUserprefsInfo()    {        if ($this->userprefs_keys === null) {            $this->userprefs_keys = array_flip(PMA_read_userprefs_fieldnames());            // read real config for user preferences display            $userprefs_disallow = defined('PMA_SETUP')                ? ConfigFile::getInstance()->get('UserprefsDisallow', array())                : $GLOBALS['cfg']['UserprefsDisallow'];            $this->userprefs_disallow = array_flip($userprefs_disallow);        }    }    /**     * Sets field comments and warnings based on current environment     *     * @param string $system_path     * @param array  $opts     */    private function _setComments($system_path, array &$opts)    {        // RecodingEngine - mark unavailable types        if ($system_path == 'RecodingEngine') {            $comment = '';            if (!function_exists('iconv')) {                $opts['values']['iconv'] .= ' (' . __('unavailable') . ')';                $comment = sprintf(__('"%s" requires %s extension'), 'iconv', 'iconv');            }            if (!function_exists('recode_string')) {                $opts['values']['recode'] .= ' (' . __('unavailable') . ')';                $comment .= ($comment ? ", " : '') . sprintf(__('"%s" requires %s extension'),                    'recode', 'recode');            }            $opts['comment'] = $comment;            $opts['comment_warning'] = true;        }        // ZipDump, GZipDump, BZipDump - check function availability        if ($system_path == 'ZipDump' || $system_path == 'GZipDump' || $system_path == 'BZipDump') {            $comment = '';            $funcs = array(                'ZipDump'  => array('zip_open', 'gzcompress'),                'GZipDump' => array('gzopen', 'gzencode'),                'BZipDump' => array('bzopen', 'bzcompress'));            if (!function_exists($funcs[$system_path][0])) {                $comment = sprintf(__('import will not work, missing function (%s)'),                    $funcs[$system_path][0]);            }            if (!function_exists($funcs[$system_path][1])) {                $comment .= ($comment ? '; ' : '') . sprintf(__('export will not work, missing function (%s)'),                    $funcs[$system_path][1]);            }            $opts['comment'] = $comment;            $opts['comment_warning'] = true;        }        if ($system_path == 'SQLQuery/Validate' && !$GLOBALS['cfg']['SQLValidator']['use']) {            $opts['comment'] = __('SQL Validator is disabled');            $opts['comment_warning'] = true;        }        if ($system_path == 'SQLValidator/use') {            if (!class_exists('SOAPClient')) {                @include_once 'SOAP/Client.php';                if (!class_exists('SOAP_Client')) {                    $opts['comment'] = __('SOAP extension not found');                    $opts['comment_warning'] = true;                }            }        }        if (!defined('PMA_SETUP')) {            if (($system_path == 'MaxDbList' || $system_path == 'MaxTableList'                    || $system_path == 'QueryHistoryMax')) {                $opts['comment'] = sprintf(__('maximum %s'), $GLOBALS['cfg'][$system_path]);            }        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Handles table search tab * * display table search form, create SQL query from form data * and include sql.php to execute it * * @todo display search form again if no results from previous search * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';require_once './libraries/tbl_select.lib.php';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'tbl_select.js';$GLOBALS['js_include'][] = 'tbl_change.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'gis_data_editor.js';$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));$geom_types = PMA_getGISDatatypes();/** * Not selection yet required -> displays the selection form */if (! isset($param) || $param[0] == '') {    // Gets some core libraries    include_once './libraries/tbl_common.php';    //$err_url   = 'tbl_select.php' . $err_url;    $url_query .= '&amp;goto=tbl_select.php&amp;back=tbl_select.php';    /**     * Gets tables informations     */    include_once './libraries/tbl_info.inc.php';    /**     * Displays top menu links     */    include_once './libraries/tbl_links.inc.php';    if (! isset($goto)) {        $goto = $GLOBALS['cfg']['DefaultTabTable'];    }    // Defines the url to return to in case of error in the next sql statement    $err_url   = $goto . '?' . PMA_generate_common_url($db, $table);    // Gets the list and number of fields    list($fields_list, $fields_type, $fields_collation, $fields_null, $geom_column_present) = PMA_tbl_getFields($db, $table);    $fields_cnt = count($fields_list);    // retrieve keys into foreign fields, if any    // check also foreigners even if relwork is FALSE (to get    // foreign keys from innodb)    $foreigners = PMA_getForeigners($db, $table);    ?><fieldset id="fieldset_subtab"><?php$url_params = array();$url_params['db']    = $db;$url_params['table'] = $table;echo PMA_generate_html_tabs(PMA_tbl_getSubTabs(), $url_params, '', 'topmenu2');?>        <form method="post" action="tbl_select.php" name="insertForm" id="tbl_search_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?php echo PMA_generate_common_hidden_inputs($db, $table); ?><input type="hidden" name="goto" value="<?php echo $goto; ?>" /><input type="hidden" name="back" value="tbl_select.php" /><fieldset id="fieldset_table_search"><fieldset id="fieldset_table_qbe">    <legend><?php echo __('Do a "query by example" (wildcard: "%")') ?></legend>    <table class="data">    <?php echo PMA_tbl_setTableHeader($geom_column_present); ?>    <tbody>    <?php    $odd_row = true;    for ($i = 0; $i < $fields_cnt; $i++) {        ?>        <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">            <?php            // if 'Function' column is present            if ($geom_column_present) {                echo('<td>');                // if a geometry column                if (in_array($fields_type[$i], $geom_types)) {                    echo('<select class="geom_func" name="geom_func['. $i .']">');                        // get the relevant list of functions                        $funcs = PMA_getGISFunctions($fields_type[$i], true, true);                        foreach ($funcs as $func_name => $func) {                            $name =  isset($func['display']) ? $func['display'] : $func_name;                            echo('<option value="' . htmlspecialchars($name) . '">'                                . htmlspecialchars($name) . '</option>');                        }                    echo('</select>');                } else {                    echo('&nbsp;');                }                echo('</td>');            }            ?>            <th><?php echo htmlspecialchars($fields_list[$i]); ?></th>            <td><?php echo htmlspecialchars($fields_type[$i]); ?></td>            <td><?php echo $fields_collation[$i]; ?></td>            <td><select name="func[]">        <?php        if (strncasecmp($fields_type[$i], 'enum', 4) == 0) {            foreach ($GLOBALS['cfg']['EnumOperators'] as $fc) {                echo "\n" . '                        '                   . '<option value="' . htmlspecialchars($fc) . '">'                   . htmlspecialchars($fc) . '</option>';            }        } elseif (preg_match('@char|blob|text|set@i', $fields_type[$i])) {            foreach ($GLOBALS['cfg']['TextOperators'] as $fc) {            echo "\n" . '                        '               . '<option value="' . htmlspecialchars($fc) . '">'               . htmlspecialchars($fc) . '</option>';            }        } else {            foreach ($GLOBALS['cfg']['NumOperators'] as $fc) {                echo "\n" . '                        '                   . '<option value="' .  htmlspecialchars($fc) . '">'                   . htmlspecialchars($fc) . '</option>';            }        } // end if... else...        if ($fields_null[$i]) {            foreach ($GLOBALS['cfg']['NullOperators'] as $fc) {                echo "\n" . '                        '                   . '<option value="' .  htmlspecialchars($fc) . '">'                   . htmlspecialchars($fc) . '</option>';            }        }        ?>                </select>            </td>            <td>        <?php        $field = $fields_list[$i];        $foreignData = PMA_getForeignData($foreigners, $field, false, '', '');        echo PMA_getForeignFields_Values($foreigners, $foreignData, $field, $fields_type, $i, $db, $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], '', true);        ?>            <input type="hidden" name="names[<?php echo $i; ?>]"                value="<?php echo htmlspecialchars($fields_list[$i]); ?>" />            <input type="hidden" name="types[<?php echo $i; ?>]"                value="<?php echo $fields_type[$i]; ?>" />            <input type="hidden" name="collations[<?php echo $i; ?>]"                value="<?php echo $fields_collation[$i]; ?>" />        </td>    </tr>        <?php    } // end for    ?>    </tbody>    </table><div id="gis_editor"></div><div id="popup_background"></div></fieldset><?php    PMA_generate_slider_effect('searchoptions', __('Options'));?><fieldset id="fieldset_select_fields">    <legend><?php echo __('Select columns (at least one):'); ?></legend>    <select name="param[]" size="<?php echo min($fields_cnt, 10); ?>"        multiple="multiple">    <?php    // Displays the list of the fields    foreach ($fields_list as $each_field) {        echo '        '            .'<option value="' . htmlspecialchars($each_field) . '"'            .' selected="selected">' . htmlspecialchars($each_field)            .'</option>' . "\n";    }    ?>    </select>    <input type="checkbox" name="distinct" value="DISTINCT" id="oDistinct" />    <label for="oDistinct">DISTINCT</label></fieldset><fieldset id="fieldset_search_conditions">    <legend><?php echo '<em>' . __('Or') . '</em> ' . __('Add search conditions (body of the "where" clause):'); ?></legend><?php echo PMA_showMySQLDocu('SQL-Syntax', 'Functions'); ?><input type="text" name="where" class="textfield" size="64" /></fieldset><fieldset id="fieldset_limit_rows">    <legend><?php echo __('Number of rows per page'); ?></legend>    <input type="text" size="4" name="session_max_rows"        value="<?php echo $GLOBALS['cfg']['MaxRows']; ?>" class="textfield" /></fieldset><fieldset id="fieldset_display_order">    <legend><?php echo __('Display order:'); ?></legend>    <select name="orderField">        <option value="--nil--"></option>    <?php    foreach ($fields_list as $each_field) {        echo '        '            .'<option value="' . htmlspecialchars($each_field) . '">'            .htmlspecialchars($each_field) . '</option>' . "\n";    } // end for    ?>    </select><?php    $choices = array(        'ASC'  => __('Ascending'),        'DESC' => __('Descending')    );    PMA_display_html_radio('order', $choices, 'ASC', false, true, "formelement");    unset($choices);?></fieldset><br style="clear: both;"/></div></fieldset><fieldset class="tblFooters">    <input type="hidden" name="max_number_of_fields"        value="<?php echo $fields_cnt; ?>" />    <input type="submit" name="submit" value="<?php echo __('Go'); ?>" /></fieldset></form><div id="sqlqueryresults"></div>    <?php    include './libraries/footer.inc.php';?></fieldset><?php} else {    /**     * Selection criteria have been submitted -> do the work     */    // Builds the query    $sql_query = 'SELECT ' . (isset($distinct) ? 'DISTINCT ' : '');    // if all fields were selected to display, we do a SELECT *    // (more efficient and this helps prevent a problem in IE    // if one of the rows is edited and we come back to the Select results)    if (count($param) == $max_number_of_fields) {        $sql_query .= '* ';    } else {        $param = PMA_backquote($param);        $sql_query .= implode(', ', $param);    } // end if    // avoid a loop, for example when $cfg['DefaultTabTable'] is set    // to 'tbl_select.php'    unset($param);    $sql_query .= ' FROM ' . PMA_backquote($table);    // The where clause    if (trim($where) != '') {        $sql_query .= ' WHERE ' . $where;    } else {        $w = $charsets = array();        $cnt_func = count($func);        reset($func);        while (list($i, $func_type) = each($func)) {            list($charsets[$i]) = explode('_', $collations[$i]);            $unaryFlag =  (isset($GLOBALS['cfg']['UnaryOperators'][$func_type]) && $GLOBALS['cfg']['UnaryOperators'][$func_type] == 1) ? true : false;            $tmp_geom_func = isset($geom_func[$i]) ? $geom_func[$i] : null;            $whereClause = PMA_tbl_search_getWhereClause($fields[$i], $names[$i], $types[$i], $collations[$i], $func_type, $unaryFlag, $tmp_geom_func);            if($whereClause)                $w[] = $whereClause;            } // end for        if ($w) {            $sql_query .= ' WHERE ' . implode(' AND ', $w);        }    } // end if    if ($orderField != '--nil--') {        $sql_query .= ' ORDER BY ' . PMA_backquote($orderField) . ' ' . $order;    } // end if    include './sql.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (!defined('PHPMYADMIN')) {    exit;}/**  * constant for differenciating array in $_SESSION variable  */$SESSION_KEY = '__upload_status';/**  * sets default plugin for handling the import process  */$_SESSION[$SESSION_KEY]["handler"] = "";/**  * unique ID for each upload  */$upload_id = uniqid("");/**  * list of available plugins  */$plugins = array(       "uploadprogress",       "apc",       "noplugin"       ); // available plugins. Each plugin has own checkfunction in display_import_ajax.lib.php and own file with functions in upload_#KEY#.php// select available pluginforeach ($plugins as $plugin) {    $check = "PMA_import_" . $plugin . "Check";    if ($check()) {        $_SESSION[$SESSION_KEY]["handler"] = $plugin;        include_once "import/upload/" . $plugin . ".php";        break;    }}/**  * Checks if APC bar extension is available and configured correctly.  *  * @return true if APC extension is available and if rfc1867 is enabled, false if it is not  */function PMA_import_apcCheck(){    if (! extension_loaded('apc') || ! function_exists('apc_fetch') || ! function_exists('getallheaders')) {        return false;    }    return (ini_get('apc.enabled') && ini_get('apc.rfc1867'));}/**  * Checks if UploadProgress bar extension is available.  *  * @return true if UploadProgress extension is available, false if it is not  */function PMA_import_uploadprogressCheck(){    if (! function_exists("uploadprogress_get_info") || ! function_exists('getallheaders')) {        return false;    }    return true;}/**  * Default plugin for handling import. If no other plugin is available, noplugin is used.  *  * @return true  */function PMA_import_nopluginCheck(){    return true;}/**  * The function outputs json encoded status of uploaded. It uses PMA_getUploadStatus, which is defined in plugin's file.  *  * @param $id - ID of transfer, usually $upload_id from display_import_ajax.lib.php  */function PMA_importAjaxStatus($id){    header('Content-type: application/json');    echo json_encode(PMA_getUploadStatus($id));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Holds class PMA_Error * * @package PhpMyAdmin *//** * base class */require_once './libraries/Message.class.php';/** * a single error * * @package PhpMyAdmin */class PMA_Error extends PMA_Message{    /**     * Error types     *     * @var array     */    static public $errortype = array (        E_ERROR              => 'Error',        E_WARNING            => 'Warning',        E_PARSE              => 'Parsing Error',        E_NOTICE             => 'Notice',        E_CORE_ERROR         => 'Core Error',        E_CORE_WARNING       => 'Core Warning',        E_COMPILE_ERROR      => 'Compile Error',        E_COMPILE_WARNING    => 'Compile Warning',        E_USER_ERROR         => 'User Error',        E_USER_WARNING       => 'User Warning',        E_USER_NOTICE        => 'User Notice',        E_STRICT             => 'Runtime Notice',        E_DEPRECATED         => 'Deprecation Notice',        E_RECOVERABLE_ERROR  => 'Catchable Fatal Error',    );    /**     * Error levels     *     * @var array     */    static public $errorlevel = array (        E_ERROR              => 'error',        E_WARNING            => 'error',        E_PARSE              => 'error',        E_NOTICE             => 'notice',        E_CORE_ERROR         => 'error',        E_CORE_WARNING       => 'error',        E_COMPILE_ERROR      => 'error',        E_COMPILE_WARNING    => 'error',        E_USER_ERROR         => 'error',        E_USER_WARNING       => 'error',        E_USER_NOTICE        => 'notice',        E_STRICT             => 'notice',        E_DEPRECATED         => 'notice',        E_RECOVERABLE_ERROR  => 'error',    );    /**     * The file in which the error occured     *     * @var string     */    protected $_file = '';    /**     * The line in which the error occured     *     * @var integer     */    protected $_line = 0;    /**     * Holds the backtrace for this error     *     * @var array     */    protected $_backtrace = array();    /**     * Unique id     *     * @var string     */    protected $_hash = null;    /**     * Constructor     *     * @param integer $errno     * @param string  $errstr     * @param string  $errfile     * @param integer $errline     */    public function __construct($errno, $errstr, $errfile, $errline)    {        $this->setNumber($errno);        $this->setMessage($errstr, false);        $this->setFile($errfile);        $this->setLine($errline);        $backtrace = debug_backtrace();        // remove last two calls: debug_backtrace() and handleError()        unset($backtrace[0]);        unset($backtrace[1]);        $this->setBacktrace($backtrace);    }    /**     * sets PMA_Error::$_backtrace     *     * @param array $backtrace     */    public function setBacktrace($backtrace)    {        $this->_backtrace = $backtrace;    }    /**     * sets PMA_Error::$_line     *     * @param integer $line     */    public function setLine($line)    {        $this->_line = $line;    }    /**     * sets PMA_Error::$_file     *     * @param string $file     */    public function setFile($file)    {        $this->_file = PMA_Error::relPath($file);    }    /**     * returns unique PMA_Error::$_hash, if not exists it will be created     *     * @param string $file     * @return  string PMA_Error::$_hash     */    public function getHash()    {        try {            $backtrace = serialize($this->getBacktrace());        } catch(Exception $e){            $backtrace = '';        }        if (null === $this->_hash) {            $this->_hash = md5(                $this->getNumber() .                $this->getMessage() .                $this->getFile() .                $this->getLine() .                $backtrace            );        }        return $this->_hash;    }    /**     * returns PMA_Error::$_backtrace     *     * @return  array PMA_Error::$_backtrace     */    public function getBacktrace()    {        return $this->_backtrace;    }    /**     * returns PMA_Error::$_file     *     * @return  string PMA_Error::$_file     */    public function getFile()    {        return $this->_file;    }    /**     * returns PMA_Error::$_line     *     * @return  integer PMA_Error::$_line     */    public function getLine()    {        return $this->_line;    }    /**     * returns type of error     *     * @return  string  type of error     */    public function getType()    {        return PMA_Error::$errortype[$this->getNumber()];    }    /**     * returns level of error     *     * @return  string  level of error     */    public function getLevel()    {        return PMA_Error::$errorlevel[$this->getNumber()];    }    /**     * returns title prepared for HTML Title-Tag     *     * @return  string   HTML escaped and truncated title     */    public function getHtmlTitle()    {        return htmlspecialchars(substr($this->getTitle(), 0, 100));    }    /**     * returns title for error     *     * @return string     */    public function getTitle()    {        return $this->getType() . ': ' . $this->getMessage();    }    /**     * Display HTML backtrace     *     */    public function displayBacktrace()    {        foreach ($this->getBacktrace() as $step) {            echo PMA_Error::relPath($step['file']) . '#' . $step['line'] . ': ';            if (isset($step['class'])) {                echo $step['class'] . $step['type'];            }            echo $step['function'] . '(';            if (isset($step['args']) && (count($step['args']) > 1)) {                echo "<br />\n";                foreach ($step['args'] as $arg) {                    echo "\t";                    $this->displayArg($arg, $step['function']);                    echo ',' . "<br />\n";                }            } elseif (isset($step['args']) && (count($step['args']) > 0)) {                foreach ($step['args'] as $arg) {                    $this->displayArg($arg, $step['function']);                }            }            echo ')' . "<br />\n";        }    }    /**     * Display a single function argument     * if $function is one of include/require the $arg is converted te relative path     *     * @param string $arg     * @param string $function     */    protected function displayArg($arg, $function)    {        $include_functions = array(            'include',            'include_once',            'require',            'require_once',        );        if (in_array($function, $include_functions)) {            echo PMA_Error::relPath($arg);        } elseif (is_scalar($arg)) {            echo gettype($arg) . ' ' . htmlspecialchars($arg);        } else {            echo gettype($arg);        }    }    /**     * Displays the error in HTML     *     */    public function display()    {        echo '<div class="' . $this->getLevel() . '">';        if (! $this->isUserError()) {            echo '<strong>' . $this->getType() . '</strong>';            echo ' in ' . $this->getFile() . '#' . $this->getLine();            echo "<br />\n";        }        echo $this->getMessage();        if (! $this->isUserError()) {            echo "<br />\n";            echo "<br />\n";            echo "<strong>Backtrace</strong><br />\n";            echo "<br />\n";            echo $this->displayBacktrace();        }        echo '</div>';        $this->isDisplayed(true);    }    /**     * whether this error is a user error     *     * @return  boolean     */    public function isUserError()    {        return $this->getNumber() & (E_USER_WARNING | E_USER_ERROR | E_USER_NOTICE);    }    /**     * return short relative path to phpMyAdmin basedir     *     * prevent path disclusore in error message,     * and make users feel save to submit error reports     *     * @static     * @param string $dest  path to be shorten     * @return  string shortened path     */    static function relPath($dest)    {        $dest = realpath($dest);        if (substr(PHP_OS, 0, 3) == 'WIN') {            $path_separator = '\\';        } else {            $path_separator = '/';        }        $Ahere = explode($path_separator, realpath(dirname(__FILE__) . $path_separator . '..'));        $Adest = explode($path_separator, $dest);        $result = '.';        // && count ($Adest)>0 && count($Ahere)>0 )        while (implode($path_separator, $Adest) != implode($path_separator, $Ahere)) {            if (count($Ahere) > count($Adest)) {                array_pop($Ahere);                $result .= $path_separator . '..';            } else {                array_pop($Adest);            }        }        $path = $result . str_replace(implode($path_separator, $Adest), '', $dest);        return str_replace($path_separator . $path_separator, $path_separator, $path);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */$GLOBALS['unparsed_sql'] = $sql_query;$parsed_sql = PMA_SQP_parse($sql_query);$analyzed_sql = PMA_SQP_analyze($parsed_sql);// for bug 780516: now that we use case insensitive preg_match// or flags from the analyser, do not put back the reformatted query// into $sql_query, to make this kind of query work without// capitalizing keywords://// CREATE TABLE SG_Persons (//  id int(10) unsigned NOT NULL auto_increment,//  first varchar(64) NOT NULL default '',//  PRIMARY KEY  (`id`)// )// check for a real SELECT ... FROM$is_select = isset($analyzed_sql[0]['queryflags']['select_from']);// If the query is a Select, extract the db and table names and modify// $db and $table, to have correct page headers, links and left frame.// db and table name may be enclosed with backquotes, db is optionnal,// query may contain aliases./** * @todo if there are more than one table name in the Select: * - do not extract the first table name * - do not show a table name in the page header * - do not display the sub-pages links) */if ($is_select) {    $prev_db = $db;    if (isset($analyzed_sql[0]['table_ref'][0]['table_true_name'])) {        $table = $analyzed_sql[0]['table_ref'][0]['table_true_name'];    }    if (isset($analyzed_sql[0]['table_ref'][0]['db'])      && strlen($analyzed_sql[0]['table_ref'][0]['db'])) {        $db    = $analyzed_sql[0]['table_ref'][0]['db'];    } else {        $db = $prev_db;    }    // Nijel: don't change reload, if we already decided to reload in import    if (empty($reload)) {        $reload  = ($db == $prev_db) ? 0 : 1;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This library is used with the server IP allow/deny host authentication * feature * * @todo Broken for IPv6 * * @package PhpMyAdmin *//** * Gets the "true" IP address of the current user * * @return  string   the ip of the user * * @access  private */function PMA_getIp(){    /* Get the address of user */    if (!empty($_SERVER['REMOTE_ADDR'])) {        $direct_ip = $_SERVER['REMOTE_ADDR'];    } else {        /* We do not know remote IP */        return false;    }    /* Do we trust this IP as a proxy? If yes we will use it's header. */    if (isset($GLOBALS['cfg']['TrustedProxies'][$direct_ip])) {        $trusted_header_value = PMA_getenv($GLOBALS['cfg']['TrustedProxies'][$direct_ip]);        $matches = array();        // the $ checks that the header contains only one IP address, ?: makes sure the () don't capture        $is_ip = preg_match('|^(?:[0-9]{1,3}\.){3,3}[0-9]{1,3}$|', $trusted_header_value, $matches);        if ($is_ip && (count($matches) == 1)) {            // True IP behind a proxy            return $matches[0];        }    }    /* Return true IP */    return $direct_ip;} // end of the 'PMA_getIp()' function/** * Based on IP Pattern Matcher * Originally by J.Adams <jna@retina.net> * Found on <http://www.php.net/manual/en/function.ip2long.php> * Modified for phpMyAdmin * * Matches: * xxx.xxx.xxx.xxx        (exact) * xxx.xxx.xxx.[yyy-zzz]  (range) * xxx.xxx.xxx.xxx/nn     (CIDR) * * Does not match: * xxx.xxx.xxx.xx[yyy-zzz]  (range, partial octets not supported) * * @param string   string of IP range to match * @param string   string of IP to test against range * * @return  boolean    always true * * @access  public */function PMA_ipMaskTest($testRange, $ipToTest){   $result = true;   if (preg_match('|([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/([0-9]+)|', $testRange, $regs)) {       // performs a mask match       $ipl    = ip2long($ipToTest);       $rangel = ip2long($regs[1] . '.' . $regs[2] . '.' . $regs[3] . '.' . $regs[4]);       $maskl  = 0;       for ($i = 0; $i < 31; $i++) {           if ($i < $regs[5] - 1) {               $maskl = $maskl + PMA_pow(2, (30 - $i));           } // end if       } // end for       if (($maskl & $rangel) == ($maskl & $ipl)) {           return true;       } else {           return false;       }   } else {       // range based       $maskocts = explode('.', $testRange);       $ipocts   = explode('.', $ipToTest);       // perform a range match       for ($i = 0; $i < 4; $i++) {            if (preg_match('|\[([0-9]+)\-([0-9]+)\]|', $maskocts[$i], $regs)) {                if (($ipocts[$i] > $regs[2])                    || ($ipocts[$i] < $regs[1])) {                    $result = false;                } // end if            } else {                if ($maskocts[$i] <> $ipocts[$i]) {                    $result = false;                } // end if            } // end if/else       } //end for   } //end if/else   return $result;} // end of the "PMA_IPMaskTest()" function/** * Runs through IP Allow/Deny rules the use of it below for more information * * @param string 'allow' | 'deny' type of rule to match * * @return  bool   Matched a rule ? * * @access  public * * @see     PMA_getIp() */function PMA_allowDeny($type){    global $cfg;    // Grabs true IP of the user and returns if it can't be found    $remote_ip = PMA_getIp();    if (empty($remote_ip)) {        return false;    }    // copy username    $username  = $cfg['Server']['user'];    // copy rule database    $rules     = $cfg['Server']['AllowDeny']['rules'];    // lookup table for some name shortcuts    $shortcuts = array(        'all'       => '0.0.0.0/0',        'localhost' => '127.0.0.1/8'    );    // Provide some useful shortcuts if server gives us address:    if (PMA_getenv('SERVER_ADDR')) {        $shortcuts['localnetA'] = PMA_getenv('SERVER_ADDR') . '/8';        $shortcuts['localnetB'] = PMA_getenv('SERVER_ADDR') . '/16';        $shortcuts['localnetC'] = PMA_getenv('SERVER_ADDR') . '/24';    }    foreach ($rules as $rule) {        // extract rule data        $rule_data = explode(' ', $rule);        // check for rule type        if ($rule_data[0] != $type) {            continue;        }        // check for username        if (($rule_data[1] != '%') //wildcarded first            && ($rule_data[1] != $username)) {            continue;        }        // check if the config file has the full string with an extra        // 'from' in it and if it does, just discard it        if ($rule_data[2] == 'from') {            $rule_data[2] = $rule_data[3];        }        // Handle shortcuts with above array        if (isset($shortcuts[$rule_data[2]])) {            $rule_data[2] = $shortcuts[$rule_data[2]];        }        // Add code for host lookups here        // Excluded for the moment        // Do the actual matching now        if (PMA_ipMaskTest($rule_data[2], $remote_ip)) {            return true;        }    } // end while    return false;} // end of the "PMA_AllowDeny()" function?>
<?php/** * generate an WebApp file for Prism / WebRunner * * @see http://wiki.mozilla.org/Prism * @package PhpMyAdmin *//** * @ignore */define('PMA_MINIMUM_COMMON', true);/** * Gets core libraries and defines some variables */require './libraries/common.inc.php';/** * ZIP file handler. */require './libraries/zip.lib.php';// ini file$parameters = array(    'id'        => 'phpMyAdmin@' . $_SERVER['HTTP_HOST'],    'uri'       => $GLOBALS['PMA_Config']->get('PmaAbsoluteUri'),    'status'    => 'yes',    'location'  => 'no',    'sidebar'   => 'no',    'navigation' => 'no',    'icon'      => 'phpMyAdmin',);// dom sript file// none need yet// icon$icon = 'favicon.ico';// name$name = 'phpMyAdmin.webapp';$ini_file = "[Parameters]\n";foreach ($parameters as $key => $value) {    $ini_file .= $key . '=' . $value . "\n";}PMA_download_header($name, 'application/webapp', 0, false);$zip = new zipfile;$zip->setDoWrite();$zip->addFile($ini_file, 'webapp.ini');$zip->addFile(file_get_contents($icon), 'phpMyAdmin.ico');$zip->file();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// Display function/** * void PMA_TableHeader([bool $db_is_information_schema = false]) * display table header (<table><thead>...</thead><tbody>) * * @param boolean $db_is_information_schema * @param boolean $replication */function PMA_TableHeader($db_is_information_schema = false, $replication = false){    $cnt = 0; // Let's count the columns...    if ($db_is_information_schema) {        $action_colspan = 3;    } else {        $action_colspan = 6;    }    echo '<table class="data">' . "\n"        .'<thead>' . "\n"        .'<tr><th></th>' . "\n"        .'    <th>' . PMA_SortableTableHeader(__('Table'), 'table') . '</th>' . "\n";    if ($replication) {     echo '    <th>' . "\n"         .'        ' . __('Replication') . "\n"         .'    </th>';    }    echo '    <th colspan="' . $action_colspan . '">' . "\n"        .'        ' . __('Action') . "\n"        .'    </th>'        // larger values are more interesting so default sort order is DESC        .'    <th>' . PMA_SortableTableHeader(__('Rows'), 'records', 'DESC')        .PMA_showHint(PMA_sanitize(__('May be approximate. See [a@./Documentation.html#faq3_11@Documentation]FAQ 3.11[/a]'))) . "\n"        .'    </th>' . "\n";    if (!($GLOBALS['cfg']['PropertiesNumColumns'] > 1)) {        echo '    <th>' . PMA_SortableTableHeader(__('Type'), 'type') . '</th>' . "\n";        $cnt++;        echo '    <th>' . PMA_SortableTableHeader(__('Collation'), 'collation') . '</th>' . "\n";        $cnt++;    }    if ($GLOBALS['is_show_stats']) {        // larger values are more interesting so default sort order is DESC        echo '    <th>' . PMA_SortableTableHeader(__('Size'), 'size', 'DESC') . '</th>' . "\n"        // larger values are more interesting so default sort order is DESC           . '    <th>' . PMA_SortableTableHeader(__('Overhead'), 'overhead', 'DESC') . '</th>' . "\n";        $cnt += 2;    }    echo '</tr>' . "\n";    echo '</thead>' . "\n";    echo '<tbody>' . "\n";    $GLOBALS['colspan_for_structure'] = $cnt + $action_colspan + 3;} // end function PMA_TableHeader()/** * Creates a clickable column header for table information * * @param string  $title title to use for the link * @param string  $sort  corresponds to sortable data name mapped in libraries/db_info.inc.php * @param string  $initial_sort_order * @return string  link to be displayed in the table header */function PMA_SortableTableHeader($title, $sort, $initial_sort_order = 'ASC'){    // Set some defaults    $requested_sort = 'table';    $requested_sort_order = $future_sort_order = $initial_sort_order;        // If the user requested a sort    if (isset($_REQUEST['sort'])) {        $requested_sort = $_REQUEST['sort'];        if (isset($_REQUEST['sort_order'])) {            $requested_sort_order = $_REQUEST['sort_order'];        }    }    $order_img = '';    $order_link_params = array();    $order_link_params['title'] = __('Sort');    // If this column was requested to be sorted.    if ($requested_sort == $sort) {        if ($requested_sort_order == 'ASC') {            $future_sort_order = 'DESC';            // current sort order is ASC            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow', 'title' => ''));            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow hide', 'title' => ''));            // but on mouse over, show the reverse order (DESC)            $order_link_params['onmouseover'] = "$('.sort_arrow').toggle();";            // on mouse out, show current sort order (ASC)            $order_link_params['onmouseout'] = "$('.sort_arrow').toggle();";        } else {            $future_sort_order = 'ASC';            // current sort order is DESC            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow hide', 'title' => ''));            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow', 'title' => ''));            // but on mouse over, show the reverse order (ASC)            $order_link_params['onmouseover'] = "$('.sort_arrow').toggle();";            // on mouse out, show current sort order (DESC)            $order_link_params['onmouseout'] = "$('.sort_arrow').toggle();";        }    }    $_url_params = array(        'db' => $_REQUEST['db'],    );    $url = 'db_structure.php'.PMA_generate_common_url($_url_params);    // We set the position back to 0 every time they sort.    $url .= "&amp;pos=0&amp;sort=$sort&amp;sort_order=$future_sort_order";    return PMA_linkOrButton($url, $title . $order_img, $order_link_params);} // end function PMA_SortableTableHeader()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library that provides common import functions that are used by import plugins * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * We need to know something about user */require_once './libraries/check_user_privileges.lib.php';/** * We do this check, DROP DATABASE does not need to be confirmed elsewhere */define('PMA_CHK_DROP', 1);/** *  Check whether timeout is getting close * *  @return boolean true if timeout is close *  @access public */function PMA_checkTimeout(){    global $timestamp, $maximum_time, $timeout_passed;    if ($maximum_time == 0) {        return false;    } elseif ($timeout_passed) {        return true;    /* 5 in next row might be too much */    } elseif ((time() - $timestamp) > ($maximum_time - 5)) {        $timeout_passed = true;        return true;    } else {        return false;    }}/** *  Detects what compression filse uses * *  @param string  $filepath  filename to check *  @return string MIME type of compression, none for none *  @access public */function PMA_detectCompression($filepath){    $file = @fopen($filepath, 'rb');    if (!$file) {        return false;    }    $test = fread($file, 4);    $len = strlen($test);    fclose($file);    if ($len >= 2 && $test[0] == chr(31) && $test[1] == chr(139)) {        return 'application/gzip';    }    if ($len >= 3 && substr($test, 0, 3) == 'BZh') {        return 'application/bzip2';    }    if ($len >= 4 && $test == "PK\003\004") {        return 'application/zip';    }    return 'none';}/** * Runs query inside import buffer. This is needed to allow displaying * of last SELECT, SHOW or HANDLER results and similar nice stuff. * * @param string  $sql          query to run * @param string  $full         query to display, this might be commented * @param bool    $controluser  whether to use control user for queries * @access public */function PMA_importRunQuery($sql = '', $full = '', $controluser = false){    global $import_run_buffer, $go_sql, $complete_query, $display_query,        $sql_query, $my_die, $error, $reload,        $last_query_with_results,        $skip_queries, $executed_queries, $max_sql_len, $read_multiply,        $cfg, $sql_query_disabled, $db, $run_query, $is_superuser;    $read_multiply = 1;    if (isset($import_run_buffer)) {        // Should we skip something?        if ($skip_queries > 0) {            $skip_queries--;        } else {            if (!empty($import_run_buffer['sql']) && trim($import_run_buffer['sql']) != '') {                $max_sql_len = max($max_sql_len, strlen($import_run_buffer['sql']));                if (!$sql_query_disabled) {                    $sql_query .= $import_run_buffer['full'];                }                if (!$cfg['AllowUserDropDatabase']                    && !$is_superuser                    && preg_match('@^[[:space:]]*DROP[[:space:]]+(IF EXISTS[[:space:]]+)?DATABASE @i', $import_run_buffer['sql'])                ) {                    $GLOBALS['message'] = PMA_Message::error(__('"DROP DATABASE" statements are disabled.'));                    $error = true;                } else {                    $executed_queries++;                    if ($run_query                        && $GLOBALS['finished']                        && empty($sql)                        && !$error                        && ((!empty($import_run_buffer['sql'])                        && preg_match('/^[\s]*(SELECT|SHOW|HANDLER)/i', $import_run_buffer['sql']))                        || ($executed_queries == 1))                    ) {                        $go_sql = true;                        if (!$sql_query_disabled) {                            $complete_query = $sql_query;                            $display_query = $sql_query;                        } else {                            $complete_query = '';                            $display_query = '';                        }                        $sql_query = $import_run_buffer['sql'];                        // If a 'USE <db>' SQL-clause was found, set our current $db to the new one                        list($db, $reload) = PMA_lookForUse($import_run_buffer['sql'], $db, $reload);                    } elseif ($run_query) {                        if ($controluser) {                            $result = PMA_query_as_controluser($import_run_buffer['sql']);                        } else {                            $result = PMA_DBI_try_query($import_run_buffer['sql']);                        }                        $msg = '# ';                        if ($result === false) { // execution failed                            if (! isset($my_die)) {                                $my_die = array();                            }                            $my_die[] = array('sql' => $import_run_buffer['full'], 'error' => PMA_DBI_getError());                            if ($cfg['VerboseMultiSubmit']) {                                $msg .= __('Error');                            }                            if (!$cfg['IgnoreMultiSubmitErrors']) {                                $error = true;                                return;                            }                        } elseif ($cfg['VerboseMultiSubmit']) {                            $a_num_rows = (int)@PMA_DBI_num_rows($result);                            $a_aff_rows = (int)@PMA_DBI_affected_rows();                            if ($a_num_rows > 0) {                                $msg .= __('Rows'). ': ' . $a_num_rows;                                $last_query_with_results = $import_run_buffer['sql'];                            } elseif ($a_aff_rows > 0) {                                $message = PMA_Message::affected_rows($a_aff_rows);                                $msg .= $message->getMessage();                            } else {                                $msg .= __('MySQL returned an empty result set (i.e. zero rows).');                            }                        }                        if (!$sql_query_disabled) {                            $sql_query .= $msg . "\n";                        }                        // If a 'USE <db>' SQL-clause was found and the query succeeded, set our current $db to the new one                        if ($result != false) {                            list($db, $reload) = PMA_lookForUse($import_run_buffer['sql'], $db, $reload);                        }                        if ($result != false                            && preg_match('@^[\s]*(DROP|CREATE)[\s]+(IF EXISTS[[:space:]]+)?(TABLE|DATABASE)[[:space:]]+(.+)@im', $import_run_buffer['sql'])                        ) {                            $reload = true;                        }                    } // end run query                } // end if not DROP DATABASE            // end non empty query            } elseif (!empty($import_run_buffer['full'])) {                if ($go_sql) {                    $complete_query .= $import_run_buffer['full'];                    $display_query .= $import_run_buffer['full'];                } else {                    if (!$sql_query_disabled) {                        $sql_query .= $import_run_buffer['full'];                    }                }            }            // check length of query unless we decided to pass it to sql.php            // (if $run_query is false, we are just displaying so show            // the complete query in the textarea)            if (! $go_sql && $run_query) {                if ($cfg['VerboseMultiSubmit'] && ! empty($sql_query)) {                    if (strlen($sql_query) > 50000 || $executed_queries > 50 || $max_sql_len > 1000) {                        $sql_query = '';                        $sql_query_disabled = true;                    }                } else {                    if (strlen($sql_query) > 10000 || $executed_queries > 10 || $max_sql_len > 500) {                        $sql_query = '';                        $sql_query_disabled = true;                    }                }            }        } // end do query (no skip)    } // end buffer exists    // Do we have something to push into buffer?    if (!empty($sql) || !empty($full)) {        $import_run_buffer = array('sql' => $sql, 'full' => $full);    } else {        unset($GLOBALS['import_run_buffer']);    }}/** * Looks for the presence of USE to possibly change current db * * @param string  $buffer  buffer to examine * @param string  $db      current db * @param bool    $reload  reload * @return array (current or new db, whether to reload) * @access public */function PMA_lookForUse($buffer, $db, $reload){    if (preg_match('@^[\s]*USE[[:space:]]+([\S]+)@i', $buffer, $match)) {        $db = trim($match[1]);        $db = trim($db, ';'); // for example, USE abc;        $reload = true;    }    return(array($db, $reload));}/** * Returns next part of imported file/buffer * * @param int  $size  size of buffer to read (this is maximal size function will return) * @return string part of file/buffer * @access public */function PMA_importGetNextChunk($size = 32768){    global $compression, $import_handle, $charset_conversion, $charset_of_file,        $read_multiply;    // Add some progression while reading large amount of data    if ($read_multiply <= 8) {        $size *= $read_multiply;    } else {        $size *= 8;    }    $read_multiply++;    // We can not read too much    if ($size > $GLOBALS['read_limit']) {        $size = $GLOBALS['read_limit'];    }    if (PMA_checkTimeout()) {        return false;    }    if ($GLOBALS['finished']) {        return true;    }    if ($GLOBALS['import_file'] == 'none') {        // Well this is not yet supported and tested, but should return content of textarea        if (strlen($GLOBALS['import_text']) < $size) {            $GLOBALS['finished'] = true;            return $GLOBALS['import_text'];        } else {            $r = substr($GLOBALS['import_text'], 0, $size);            $GLOBALS['offset'] += $size;            $GLOBALS['import_text'] = substr($GLOBALS['import_text'], $size);            return $r;        }    }    switch ($compression) {        case 'application/bzip2':            $result = bzread($import_handle, $size);            $GLOBALS['finished'] = feof($import_handle);            break;        case 'application/gzip':            $result = gzread($import_handle, $size);            $GLOBALS['finished'] = feof($import_handle);            break;        case 'application/zip':            $result = substr($GLOBALS['import_text'], 0, $size);            $GLOBALS['import_text'] = substr($GLOBALS['import_text'], $size);            $GLOBALS['finished'] = empty($GLOBALS['import_text']);            break;        case 'none':            $result = fread($import_handle, $size);            $GLOBALS['finished'] = feof($import_handle);            break;    }    $GLOBALS['offset'] += $size;    if ($charset_conversion) {        return PMA_convert_string($charset_of_file, 'utf-8', $result);    } else {        /**         * Skip possible byte order marks (I do not think we need more         * charsets, but feel free to add more, you can use wikipedia for         * reference: <http://en.wikipedia.org/wiki/Byte_Order_Mark>)         *         * @todo BOM could be used for charset autodetection         */        if ($GLOBALS['offset'] == $size) {            // UTF-8            if (strncmp($result, "\xEF\xBB\xBF", 3) == 0) {                $result = substr($result, 3);            // UTF-16 BE, LE            } elseif (strncmp($result, "\xFE\xFF", 2) == 0 || strncmp($result, "\xFF\xFE", 2) == 0) {                $result = substr($result, 2);            }        }        return $result;    }}/** * Returns the "Excel" column name (i.e. 1 = "A", 26 = "Z", 27 = "AA", etc.) * * This functions uses recursion to build the Excel column name. * * The column number (1-26) is converted to the responding ASCII character (A-Z) and returned. * * If the column number is bigger than 26 (= num of letters in alfabet), * an extra character needs to be added. To find this extra character, the number is divided by 26 * and this value is passed to another instance of the same function (hence recursion). * In that new instance the number is evaluated again, and if it is still bigger than 26, it is divided again * and passed to another instance of the same function. This continues until the number is smaller than 26. * Then the last called function returns the corresponding ASCII character to the function that called it. * Each time a called function ends an extra character is added to the column name. * When the first function is reached, the last character is addded and the complete column name is returned. * * @access  public * * @param int $num * @return  string The column's "Excel" name */function PMA_getColumnAlphaName($num){    $A = 65; // ASCII value for capital "A"    $col_name = "";    if ($num > 26) {        $div = (int)($num / 26);        $remain = (int)($num % 26);        // subtract 1 of divided value in case the modulus is 0,        // this is necessary because A-Z has no 'zero'        if ($remain == 0) {            $div--;        }        // recursive function call        $col_name = PMA_getColumnAlphaName($div);        // use modulus as new column number        $num = $remain;    }    if ($num == 0) {        // use 'Z' if column number is 0,        // this is necessary because A-Z has no 'zero'        $col_name .= chr(($A + 26) - 1);    } else {        // convert column number to ASCII character        $col_name .= chr(($A + $num) - 1);    }    return $col_name;}/** * Returns the column number based on the Excel name. * So "A" = 1, "Z" = 26, "AA" = 27, etc. * * Basicly this is a base26 (A-Z) to base10 (0-9) conversion. * It iterates through all characters in the column name and * calculates the corresponding value, based on character value * (A = 1, ..., Z = 26) and position in the string. * * @access  public * * @param string $name (i.e. "A", or "BC", etc.) * @return  int The column number */function PMA_getColumnNumberFromName($name){    if (!empty($name)) {        $name = strtoupper($name);        $num_chars = strlen($name);        $column_number = 0;        for ($i = 0; $i < $num_chars; ++$i) {        // read string from back to front        $char_pos = ($num_chars - 1) - $i;        // convert capital character to ASCII value        // and subtract 64 to get corresponding decimal value        // ASCII value of "A" is 65, "B" is 66, etc.        // Decimal equivalent of "A" is 1, "B" is 2, etc.        $number = (ord($name[$char_pos]) - 64);        // base26 to base10 conversion : multiply each number        // with corresponding value of the position, in this case        // $i=0 : 1; $i=1 : 26; $i=2 : 676; ...        $column_number += $number * pow(26, $i);        }        return $column_number;    } else {        return 0;    }}/** * Constants definitions *//* MySQL type defs */define("NONE",      0);define("VARCHAR",   1);define("INT",       2);define("DECIMAL",   3);define("BIGINT",    4);define("GEOMETRY",  5);/* Decimal size defs */define("M",         0);define("D",         1);define("FULL",      2);/* Table array defs */define("TBL_NAME",  0);define("COL_NAMES", 1);define("ROWS",      2);/* Analysis array defs */define("TYPES",        0);define("SIZES",        1);define("FORMATTEDSQL", 2);/** * Obtains the precision (total # of digits) from a size of type decimal * * @access  public * * @param string $last_cumulative_size * @return  int Precision of the given decimal size notation */function PMA_getM($last_cumulative_size){    return (int)substr($last_cumulative_size, 0, strpos($last_cumulative_size, ","));}/** * Obtains the scale (# of digits to the right of the decimal point) from a size of type decimal * * @access  public * * @param string $last_cumulative_size * @return  int Scale of the given decimal size notation */function PMA_getD($last_cumulative_size){    return (int)substr($last_cumulative_size, (strpos($last_cumulative_size, ",") + 1), (strlen($last_cumulative_size) - strpos($last_cumulative_size, ",")));}/** * Obtains the decimal size of a given cell * * @access  public * * @param string &$cell * @return  array Contains the precision, scale, and full size representation of the given decimal cell */function PMA_getDecimalSize(&$cell){    $curr_size = strlen((string)$cell);    $decPos = strpos($cell, ".");    $decPrecision = ($curr_size - 1) - $decPos;    $m = $curr_size - 1;    $d = $decPrecision;    return array($m, $d, ($m . "," . $d));}/** * Obtains the size of the given cell * * @todo    Handle the error cases more elegantly * * @access  public * * @param string $last_cumulative_size    Last cumulative column size * @param int    $last_cumulative_type    Last cumulative column type  (NONE or VARCHAR or DECIMAL or INT or BIGINT) * @param int    $curr_type               Type of the current cell     (NONE or VARCHAR or DECIMAL or INT or BIGINT) * @param string &$cell                   The current cell * @return  string                          Size of the given cell in the type-appropriate format */function PMA_detectSize($last_cumulative_size, $last_cumulative_type, $curr_type, &$cell){    $curr_size = strlen((string)$cell);    /**     * If the cell is NULL, don't treat it as a varchar     */    if (! strcmp('NULL', $cell)) {        return $last_cumulative_size;    }    /**     * What to do if the current cell is of type VARCHAR     */    elseif ($curr_type == VARCHAR) {        /**         * The last cumulative type was VARCHAR         */        if ($last_cumulative_type == VARCHAR) {            if ($curr_size >= $last_cumulative_size) {                return $curr_size;            } else {                return $last_cumulative_size;            }        }        /**         * The last cumulative type was DECIMAL         */        elseif ($last_cumulative_type == DECIMAL) {            $oldM = PMA_getM($last_cumulative_size);            if ($curr_size >= $oldM) {                return $curr_size;            } else {                return $oldM;            }        }        /**         * The last cumulative type was BIGINT or INT         */        elseif ($last_cumulative_type == BIGINT || $last_cumulative_type == INT) {            if ($curr_size >= $last_cumulative_size) {                return $curr_size;            } else {                return $last_cumulative_size;            }        }        /**         * This is the first row to be analyzed         */        elseif (! isset($last_cumulative_type) || $last_cumulative_type == NONE) {            return $curr_size;        }        /**         * An error has DEFINITELY occurred         */        else {            /**             * TODO: Handle this MUCH more elegantly             */            return -1;        }    }    /**     * What to do if the current cell is of type DECIMAL     */    elseif ($curr_type == DECIMAL) {        /**         * The last cumulative type was VARCHAR         */        if ($last_cumulative_type == VARCHAR) {            /* Convert $last_cumulative_size from varchar to decimal format */            $size = PMA_getDecimalSize($cell);            if ($size[M] >= $last_cumulative_size) {                return $size[M];            } else {                return $last_cumulative_size;            }        }        /**         * The last cumulative type was DECIMAL         */        elseif ($last_cumulative_type == DECIMAL) {            $size = PMA_getDecimalSize($cell);            $oldM = PMA_getM($last_cumulative_size);            $oldD = PMA_getD($last_cumulative_size);            /* New val if M or D is greater than current largest */            if ($size[M] > $oldM || $size[D] > $oldD) {                /* Take the largest of both types */                return (string)((($size[M] > $oldM) ? $size[M] : $oldM) . "," . (($size[D] > $oldD) ? $size[D] : $oldD));            } else {                return $last_cumulative_size;            }        }        /**         * The last cumulative type was BIGINT or INT         */        elseif ($last_cumulative_type == BIGINT || $last_cumulative_type == INT) {            /* Convert $last_cumulative_size from int to decimal format */            $size = PMA_getDecimalSize($cell);            if ($size[M] >= $last_cumulative_size) {                return $size[FULL];            } else {                return ($last_cumulative_size.",".$size[D]);            }        }        /**         * This is the first row to be analyzed         */        elseif (! isset($last_cumulative_type) || $last_cumulative_type == NONE) {            /* First row of the column */            $size = PMA_getDecimalSize($cell);            return $size[FULL];        }        /**         * An error has DEFINITELY occurred         */        else {            /**             * TODO: Handle this MUCH more elegantly             */            return -1;        }    }    /**     * What to do if the current cell is of type BIGINT or INT     */    elseif ($curr_type == BIGINT || $curr_type == INT) {        /**         * The last cumulative type was VARCHAR         */        if ($last_cumulative_type == VARCHAR) {            if ($curr_size >= $last_cumulative_size) {                return $curr_size;            } else {                return $last_cumulative_size;            }        }        /**         * The last cumulative type was DECIMAL         */        elseif ($last_cumulative_type == DECIMAL) {            $oldM = PMA_getM($last_cumulative_size);            $oldD = PMA_getD($last_cumulative_size);            $oldInt = $oldM - $oldD;            $newInt = strlen((string)$cell);            /* See which has the larger integer length */            if ($oldInt >= $newInt) {                /* Use old decimal size */                return $last_cumulative_size;            } else {                /* Use $newInt + $oldD as new M */                return (($newInt + $oldD) . "," . $oldD);            }        }        /**         * The last cumulative type was BIGINT or INT         */        elseif ($last_cumulative_type == BIGINT || $last_cumulative_type == INT) {            if ($curr_size >= $last_cumulative_size) {                return $curr_size;            } else {                return $last_cumulative_size;            }        }        /**         * This is the first row to be analyzed         */        elseif (! isset($last_cumulative_type) || $last_cumulative_type == NONE) {            return $curr_size;        }        /**         * An error has DEFINITELY occurred         */        else {            /**             * TODO: Handle this MUCH more elegantly             */            return -1;        }    }    /**     * An error has DEFINITELY occurred     */    else {        /**         * TODO: Handle this MUCH more elegantly         */        return -1;    }}/** * Determines what MySQL type a cell is * * @access  public * * @param int    $last_cumulative_type  Last cumulative column type  (VARCHAR or INT or BIGINT or DECIMAL or NONE) * @param string &$cell                 String representation of the cell for which a best-fit type is to be determined * @return  int                           The MySQL type representation (VARCHAR or INT or BIGINT or DECIMAL or NONE) */function PMA_detectType($last_cumulative_type, &$cell){    /**     * If numeric, determine if decimal, int or bigint     * Else, we call it varchar for simplicity     */    if (! strcmp('NULL', $cell)) {        if ($last_cumulative_type === null || $last_cumulative_type == NONE) {            return NONE;        } else {            return $last_cumulative_type;        }    } elseif (is_numeric($cell)) {        if ($cell == (string)(float)$cell && strpos($cell, ".") !== false && substr_count($cell, ".") == 1) {            return DECIMAL;        } else {        if (abs($cell) > 2147483647) {            return BIGINT;        } else {            return INT;        }        }    } else {        return VARCHAR;    }}/** * Determines if the column types are int, decimal, or string * * @link http://wiki.phpmyadmin.net/pma/Import * * @todo    Handle the error case more elegantly * * @access  public * * @param &$table  array(string $table_name, array $col_names, array $rows) * @return  array    array(array $types, array $sizes) */function PMA_analyzeTable(&$table){    /* Get number of rows in table */    $numRows = count($table[ROWS]);    /* Get number of columns */    $numCols = count($table[COL_NAMES]);    /* Current type for each column */    $types = array();    $sizes = array();    /* Initialize $sizes to all 0's */    for ($i = 0; $i < $numCols; ++$i) {        $sizes[$i] = 0;    }    /* Initialize $types to NONE */    for ($i = 0; $i < $numCols; ++$i) {        $types[$i] = NONE;    }    /* Temp vars */    $curr_type = NONE;    $curr_size = 0;    /* If the passed array is not of the correct form, do not process it */    if (is_array($table) && ! is_array($table[TBL_NAME]) && is_array($table[COL_NAMES]) && is_array($table[ROWS])) {        /* Analyze each column */        for ($i = 0; $i < $numCols; ++$i) {            /* Analyze the column in each row */            for ($j = 0; $j < $numRows; ++$j) {                /* Determine type of the current cell */                $curr_type = PMA_detectType($types[$i], $table[ROWS][$j][$i]);                /* Determine size of the current cell */                $sizes[$i] = PMA_detectSize($sizes[$i], $types[$i], $curr_type, $table[ROWS][$j][$i]);                /**                 * If a type for this column has already been declared,                 * only alter it if it was a number and a varchar was found                 */                if ($curr_type != NONE) {                    if ($curr_type == VARCHAR) {                        $types[$i] = VARCHAR;                    } else if ($curr_type == DECIMAL) {                        if ($types[$i] != VARCHAR) {                            $types[$i] = DECIMAL;                        }                    } else if ($curr_type == BIGINT) {                        if ($types[$i] != VARCHAR && $types[$i] != DECIMAL) {                            $types[$i] = BIGINT;                        }                    } else if ($curr_type == INT) {                        if ($types[$i] != VARCHAR && $types[$i] != DECIMAL && $types[$i] != BIGINT) {                            $types[$i] = INT;                        }                    }                }            }        }        /* Check to ensure that all types are valid */        $len = count($types);        for ($n = 0; $n < $len; ++$n) {            if (! strcmp(NONE, $types[$n])) {                $types[$n] = VARCHAR;                $sizes[$n] = '10';            }        }        return array($types, $sizes);    } else {        /**         * TODO: Handle this better         */        return false;    }}/* Needed to quell the beast that is PMA_Message */$import_notice = null;/** * Builds and executes SQL statements to create the database and tables * as necessary, as well as insert all the data. * * @link http://wiki.phpmyadmin.net/pma/Import * * @access  public * * @param string  $db_name          Name of the database * @param array   &$tables          Array of tables for the specified database * @param array   &$analyses        Analyses of the tables * @param array   &$additional_sql  Additional SQL statements to be executed * @param array   $options          Associative array of options * @return  void */function PMA_buildSQL($db_name, &$tables, &$analyses = null, &$additional_sql = null, $options = null){    /* Take care of the options */    if (isset($options['db_collation'])&& ! is_null($options['db_collation'])) {        $collation = $options['db_collation'];    } else {        $collation = "utf8_general_ci";    }    if (isset($options['db_charset']) && ! is_null($options['db_charset'])) {        $charset = $options['db_charset'];    } else {        $charset = "utf8";    }    if (isset($options['create_db'])) {        $create_db = $options['create_db'];    } else {        $create_db = true;    }    /* Create SQL code to handle the database */    $sql = array();    if ($create_db) {        if (PMA_DRIZZLE) {            $sql[] = "CREATE DATABASE IF NOT EXISTS " . PMA_backquote($db_name) . " COLLATE " . $collation;        } else {            $sql[] = "CREATE DATABASE IF NOT EXISTS " . PMA_backquote($db_name) . " DEFAULT CHARACTER SET " . $charset . " COLLATE " . $collation;        }    }    /**     * The calling plug-in should include this statement, if necessary, in the $additional_sql parameter     *     * $sql[] = "USE " . PMA_backquote($db_name);     */    /* Execute the SQL statements create above */    $sql_len = count($sql);    for ($i = 0; $i < $sql_len; ++$i) {        PMA_importRunQuery($sql[$i], $sql[$i]);    }    /* No longer needed */    unset($sql);    /* Run the $additional_sql statements supplied by the caller plug-in */    if ($additional_sql != null) {        /* Clean the SQL first */        $additional_sql_len = count($additional_sql);        /**         * Only match tables for now, because CREATE IF NOT EXISTS         * syntax is lacking or nonexisting for views, triggers,         * functions, and procedures.         *         * See: http://bugs.mysql.com/bug.php?id=15287         *         * To the best of my knowledge this is still an issue.         *         * $pattern = 'CREATE (TABLE|VIEW|TRIGGER|FUNCTION|PROCEDURE)';         */        $pattern = '/CREATE .*(TABLE)/';        $replacement = 'CREATE \\1 IF NOT EXISTS';        /* Change CREATE statements to CREATE IF NOT EXISTS to support inserting into existing structures */        for ($i = 0; $i < $additional_sql_len; ++$i) {            $additional_sql[$i] = preg_replace($pattern, $replacement, $additional_sql[$i]);            /* Execute the resulting statements */            PMA_importRunQuery($additional_sql[$i], $additional_sql[$i]);        }    }    if ($analyses != null) {        $type_array = array(NONE => "NULL", VARCHAR => "varchar", INT => "int", DECIMAL => "decimal", BIGINT => "bigint", GEOMETRY => 'geometry');        /* TODO: Do more checking here to make sure they really are matched */        if (count($tables) != count($analyses)) {            exit();        }        /* Create SQL code to create the tables */        $tempSQLStr = "";        $num_tables = count($tables);        for ($i = 0; $i < $num_tables; ++$i) {            $num_cols = count($tables[$i][COL_NAMES]);            $tempSQLStr = "CREATE TABLE IF NOT EXISTS " . PMA_backquote($db_name) . '.' . PMA_backquote($tables[$i][TBL_NAME]) . " (";            for ($j = 0; $j < $num_cols; ++$j) {                $size = $analyses[$i][SIZES][$j];                if ((int)$size == 0) {                    $size = 10;                }                $tempSQLStr .= PMA_backquote($tables[$i][COL_NAMES][$j]) . " " . $type_array[$analyses[$i][TYPES][$j]];                if ($analyses[$i][TYPES][$j] != GEOMETRY) {                    $tempSQLStr .= "(" . $size . ")";                }                if ($j != (count($tables[$i][COL_NAMES]) - 1)) {                    $tempSQLStr .= ", ";                }            }            $tempSQLStr .= ")"                . (PMA_DRIZZLE ? "" : " DEFAULT CHARACTER SET " . $charset)                . " COLLATE " . $collation . ";";            /**             * Each SQL statement is executed immediately             * after it is formed so that we don't have             * to store them in a (possibly large) buffer             */            PMA_importRunQuery($tempSQLStr, $tempSQLStr);        }    }    /**     * Create the SQL statements to insert all the data     *     * Only one insert query is formed for each table     */    $tempSQLStr = "";    $col_count = 0;    $num_tables = count($tables);    for ($i = 0; $i < $num_tables; ++$i) {        $num_cols = count($tables[$i][COL_NAMES]);        $num_rows = count($tables[$i][ROWS]);        $tempSQLStr = "INSERT INTO " . PMA_backquote($db_name) . '.' . PMA_backquote($tables[$i][TBL_NAME]) . " (";        for ($m = 0; $m < $num_cols; ++$m) {            $tempSQLStr .= PMA_backquote($tables[$i][COL_NAMES][$m]);            if ($m != ($num_cols - 1)) {                $tempSQLStr .= ", ";            }        }        $tempSQLStr .= ") VALUES ";        for ($j = 0; $j < $num_rows; ++$j) {            $tempSQLStr .= "(";            for ($k = 0; $k < $num_cols; ++$k) {                // If fully formatted SQL, no need to enclose with aphostrophes, add shalshes etc.                if ($analyses != null                    && isset($analyses[$i][FORMATTEDSQL][$col_count])                    && $analyses[$i][FORMATTEDSQL][$col_count] == true                ) {                    $tempSQLStr .= (string) $tables[$i][ROWS][$j][$k];                } else {                    if ($analyses != null) {                        $is_varchar = ($analyses[$i][TYPES][$col_count] === VARCHAR);                    } else {                        $is_varchar = !is_numeric($tables[$i][ROWS][$j][$k]);                    }                    /* Don't put quotes around NULL fields */                    if (! strcmp($tables[$i][ROWS][$j][$k], 'NULL')) {                        $is_varchar = false;                    }                    $tempSQLStr .= (($is_varchar) ? "'" : "");                    $tempSQLStr .= PMA_sqlAddSlashes((string)$tables[$i][ROWS][$j][$k]);                    $tempSQLStr .= (($is_varchar) ? "'" : "");                }                if ($k != ($num_cols - 1)) {                    $tempSQLStr .= ", ";                }                if ($col_count == ($num_cols - 1)) {                    $col_count = 0;                } else {                    $col_count++;                }                /* Delete the cell after we are done with it */                unset($tables[$i][ROWS][$j][$k]);            }            $tempSQLStr .= ")";            if ($j != ($num_rows - 1)) {                $tempSQLStr .= ",\n ";            }            $col_count = 0;            /* Delete the row after we are done with it */            unset($tables[$i][ROWS][$j]);        }        $tempSQLStr .= ";";        /**         * Each SQL statement is executed immediately         * after it is formed so that we don't have         * to store them in a (possibly large) buffer         */        PMA_importRunQuery($tempSQLStr, $tempSQLStr);    }    /* No longer needed */    unset($tempSQLStr);    /**     * A work in progress     */    /* Add the viewable structures from $additional_sql to $tables so they are also displayed */    $view_pattern = '@VIEW `[^`]+`\.`([^`]+)@';    $table_pattern = '@CREATE TABLE IF NOT EXISTS `([^`]+)`@';    /* Check a third pattern to make sure its not a "USE `db_name`;" statement */    $regs = array();    $inTables = false;    $additional_sql_len = count($additional_sql);    for ($i = 0; $i < $additional_sql_len; ++$i) {        preg_match($view_pattern, $additional_sql[$i], $regs);        if (count($regs) == 0) {            preg_match($table_pattern, $additional_sql[$i], $regs);        }        if (count($regs)) {            for ($n = 0; $n < $num_tables; ++$n) {                if (!strcmp($regs[1], $tables[$n][TBL_NAME])) {                    $inTables = true;                    break;                }            }            if (!$inTables) {                $tables[] = array(TBL_NAME => $regs[1]);            }        }        /* Reset the array */        $regs = array();        $inTables = false;    }    $params = array('db' => (string)$db_name);    $db_url = 'db_structure.php' . PMA_generate_common_url($params);    $db_ops_url = 'db_operations.php' . PMA_generate_common_url($params);    $message = '<br /><br />';    $message .= '<strong>' . __('The following structures have either been created or altered. Here you can:') . '</strong><br />';    $message .= '<ul><li>' . __("View a structure's contents by clicking on its name") . '</li>';    $message .= '<li>' . __('Change any of its settings by clicking the corresponding "Options" link') . '</li>';    $message .= '<li>' . __('Edit structure by following the "Structure" link') . '</li>';    $message .= sprintf('<br /><li><a href="%s" title="%s">%s</a> (<a href="%s" title="%s">' . __('Options') . '</a>)</li>',                        $db_url,                        sprintf(__('Go to database: %s'), htmlspecialchars(PMA_backquote($db_name))),                        htmlspecialchars($db_name),                        $db_ops_url,                        sprintf(__('Edit settings for %s'), htmlspecialchars(PMA_backquote($db_name))));    $message .= '<ul>';    unset($params);    $num_tables = count($tables);    for ($i = 0; $i < $num_tables; ++$i) {        $params = array('db' => (string)$db_name, 'table' => (string)$tables[$i][TBL_NAME]);        $tbl_url = 'sql.php' . PMA_generate_common_url($params);        $tbl_struct_url = 'tbl_structure.php' . PMA_generate_common_url($params);        $tbl_ops_url = 'tbl_operations.php' . PMA_generate_common_url($params);        unset($params);        if (! PMA_Table::isView($db_name, $tables[$i][TBL_NAME])) {            $message .= sprintf('<li><a href="%s" title="%s">%s</a> (<a href="%s" title="%s">' . __('Structure') . '</a>) (<a href="%s" title="%s">' . __('Options') . '</a>)</li>',                                $tbl_url,                                sprintf(__('Go to table: %s'), htmlspecialchars(PMA_backquote($tables[$i][TBL_NAME]))),                                htmlspecialchars($tables[$i][TBL_NAME]),                                $tbl_struct_url,                                sprintf(__('Structure of %s'), htmlspecialchars(PMA_backquote($tables[$i][TBL_NAME]))),                                $tbl_ops_url,                                sprintf(__('Edit settings for %s'), htmlspecialchars(PMA_backquote($db_name))));        } else {            $message .= sprintf('<li><a href="%s" title="%s">%s</a></li>',                                $tbl_url,                                sprintf(__('Go to view: %s'), htmlspecialchars(PMA_backquote($tables[$i][TBL_NAME]))),                                htmlspecialchars($tables[$i][TBL_NAME]));        }    }    $message .= '</ul></ul>';    global $import_notice;    $import_notice = $message;    unset($tables);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Triggers management. * * @package PhpMyAdmin */require_once './db_triggers.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build OpenDocument Spreadsheet dumps of tables * * @package PhpMyAdmin-Export * @subpackage ODS */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['ods'] = array(        'text' => __('Open Document Spreadsheet'),        'extension' => 'ods',        'mime_type' => 'application/vnd.oasis.opendocument.spreadsheet',        'force_file' => true,        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:')),            array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group'),            ),        'options_text' => __('Options'),        );} else {    $GLOBALS['ods_buffer'] = '';    include_once './libraries/opendocument.lib.php';    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        $GLOBALS['ods_buffer'] .= '</office:spreadsheet>'            . '</office:body>'            . '</office:document-content>';        if (!PMA_exportOutputHandler(PMA_createOpenDocument('application/vnd.oasis.opendocument.spreadsheet', $GLOBALS['ods_buffer']))) {            return false;        }        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        $GLOBALS['ods_buffer'] .= '<?xml version="1.0" encoding="utf-8"?' . '>'            . '<office:document-content '. $GLOBALS['OpenDocumentNS'] . 'office:version="1.0">'            . '<office:automatic-styles>'                . '<number:date-style style:name="N37" number:automatic-order="true">'                . '<number:month number:style="long"/>'                . '<number:text>/</number:text>'                . '<number:day number:style="long"/>'                . '<number:text>/</number:text>'                . '<number:year/>'              . '</number:date-style>'              . '<number:time-style style:name="N43">'                . '<number:hours number:style="long"/>'                . '<number:text>:</number:text>'                . '<number:minutes number:style="long"/>'                . '<number:text>:</number:text>'                . '<number:seconds number:style="long"/>'                . '<number:text> </number:text>'                . '<number:am-pm/>'              . '</number:time-style>'              . '<number:date-style style:name="N50" number:automatic-order="true" number:format-source="language">'                . '<number:month/>'                . '<number:text>/</number:text>'                . '<number:day/>'                . '<number:text>/</number:text>'                . '<number:year/>'                . '<number:text> </number:text>'                . '<number:hours number:style="long"/>'                . '<number:text>:</number:text>'                . '<number:minutes number:style="long"/>'                . '<number:text> </number:text>'                . '<number:am-pm/>'              . '</number:date-style>'              . '<style:style style:name="DateCell" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>'              . '<style:style style:name="TimeCell" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N43"/>'              . '<style:style style:name="DateTimeCell" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N50"/>'            . '</office:automatic-styles>'            . '<office:body>'            . '<office:spreadsheet>';        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in ODS format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query) {        global $what;        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        $fields_meta = PMA_DBI_get_fields_meta($result);        $field_flags = array();        for ($j = 0; $j < $fields_cnt; $j++) {            $field_flags[$j] = PMA_DBI_field_flags($result, $j);        }        $GLOBALS['ods_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '">';        // If required, get fields name at the first line        if (isset($GLOBALS[$what . '_columns'])) {            $GLOBALS['ods_buffer'] .= '<table:table-row>';            for ($i = 0; $i < $fields_cnt; $i++) {                $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                    . '<text:p>' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i))) . '</text:p>'                    . '</table:table-cell>';            } // end for            $GLOBALS['ods_buffer'] .= '</table:table-row>';        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $GLOBALS['ods_buffer'] .= '<table:table-row>';            for ($j = 0; $j < $fields_cnt; $j++) {                if (!isset($row[$j]) || is_null($row[$j])) {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($GLOBALS[$what . '_null']) . '</text:p>'                        . '</table:table-cell>';                // ignore BLOB                } elseif (stristr($field_flags[$j], 'BINARY')                        && $fields_meta[$j]->blob) {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->type == "date") {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="date" office:date-value="' . date("Y-m-d", strtotime($row[$j])) . '" table:style-name="DateCell">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->type == "time") {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="time" office:time-value="' . date("\P\TH\Hi\Ms\S", strtotime($row[$j])) . '" table:style-name="TimeCell">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->type == "datetime") {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="date" office:date-value="' . date("Y-m-d\TH:i:s", strtotime($row[$j])) . '" table:style-name="DateTimeCell">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->numeric && $fields_meta[$j]->type != 'timestamp' && ! $fields_meta[$j]->blob) {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="float" office:value="' . $row[$j] . '" >'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                }            } // end for            $GLOBALS['ods_buffer'] .= '</table:table-row>';        } // end while        PMA_DBI_free_result($result);        $GLOBALS['ods_buffer'] .= '</table:table>';        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * get some globals */require './libraries/common.inc.php';/* Theme Select */$path_to_themes = $cfg['ThemePath'] . '/';/* set language and charset */require './libraries/header_http.inc.php';/* HTML header */$page_title = 'phpMyAdmin - ' . __('Theme');require './libraries/header_meta_style.inc.php';require './libraries/header_scripts.inc.php';?></head><body id="bodythemes"><h1>phpMyAdmin - <?php echo __('Theme'); ?></h1><p><a href="<?php echo PMA_linkURL('http://www.phpmyadmin.net/home_page/themes.php'); ?>#pma_<?php echo preg_replace('/([0-9]*)\.([0-9]*)\..*/', '\1_\2', PMA_VERSION); ?>"><?php echo __('Get more themes!'); ?></a></p><?php$_SESSION['PMA_Theme_Manager']->printPreviews();?></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * PHP interface to MimerSQL Validator * * Copyright 2002, 2003 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * All data is transported over HTTP-SOAP * And uses either the PEAR SOAP Module or PHP SOAP extension * * Install instructions for PEAR SOAP: * Make sure you have a really recent PHP with PEAR support * run this: "pear install Mail_Mime Net_DIME SOAP" * * @access   public * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Load SOAP client. */if (class_exists('SOAPClient')) {    $GLOBALS['sqlvalidator_error'] = false;    $GLOBALS['sqlvalidator_soap'] = 'PHP';} else {    @include_once 'SOAP/Client.php';    if (class_exists('SOAP_Client')) {        $GLOBALS['sqlvalidator_soap'] = 'PEAR';        $GLOBALS['sqlvalidator_error'] = false;    } else {        $GLOBALS['sqlvalidator_soap'] = 'NONE';        $GLOBALS['sqlvalidator_error'] = true;        PMA_warnMissingExtension('soap');    }}if (!$GLOBALS['sqlvalidator_error']) {    // Ok, we have SOAP Support, so let's use it!/** * @package PhpMyAdmin */    class PMA_SQLValidator    {        var $url;        var $service_name;        var $wsdl;        var $output_type;        var $username;        var $password;        var $calling_program;        var $calling_program_version;        var $target_dbms;        var $target_dbms_version;        var $connectionTechnology;        var $connection_technology_version;        var $interactive;        var $service_link = null;        var $session_data = null;        /**         * Private functions - You don't need to mess with these         */        /**         * Service opening         *         * @param string  URL of Mimer SQL Validator WSDL file         *         * @return object  Object to use         *         * @access private         */        function _openService($url)        {            if ($GLOBALS['sqlvalidator_soap'] == 'PHP') {                $obj = new SOAPClient($url);            } else {                $obj = new SOAP_Client($url, true);            }            return $obj;        } // end of the "openService()" function        /**         * Service initializer to connect to server         *         * @param object   Service object         * @param string   Username         * @param string   Password         * @param string   Name of calling program         * @param string   Version of calling program         * @param string   Target DBMS         * @param string   Version of target DBMS         * @param string   Connection Technology         * @param string   version of Connection Technology         * @param integer  boolean of 1/0 to specify if we are an interactive system         *         * @return object   stdClass return object with data         *         * @access private         */        function _openSession($obj, $username, $password,                                      $calling_program, $calling_program_version,                                      $target_dbms, $target_dbms_version,                                      $connection_technology, $connection_technology_version,                                      $interactive)        {            $use_array = array(                "a_userName" => $username,                "a_password" => $password,                "a_callingProgram" => $calling_program,                "a_callingProgramVersion" => $calling_program_version,                "a_targetDbms" => $target_dbms,                "a_targetDbmsVersion" => $target_dbms_version,                "a_connectionTechnology" => $connection_technology,                "a_connectionTechnologyVersion" => $connection_technology_version,                "a_interactive" => $interactive,            );            if ($GLOBALS['sqlvalidator_soap'] == 'PHP') {                $ret = $obj->__soapCall("openSession", $use_array);            } else {                $ret = $obj->call("openSession", $use_array);            }            return $ret;        } // end of the "_openSession()" function        /**         * Validator sytem call         *         * @param object  Service object         * @param object  Session object         * @param string  SQL Query to validate         * @param string  Data return type         *         * @return object  stClass return with data         *         * @access private         */        function _validateSQL($obj, $session, $sql, $method)        {            $use_array = array(                "a_sessionId" => $session->sessionId,                "a_sessionKey" => $session->sessionKey,                "a_SQL" => $sql,                "a_resultType" => $this->output_type,            );            if ($GLOBALS['sqlvalidator_soap'] == 'PHP') {                $res = $obj->__soapCall("validateSQL", $use_array);            } else {                $res = $obj->call("validateSQL", $use_array);            }            return $res;        } // end of the "validateSQL()" function        /**         * Validator sytem call         *         * @param string  SQL Query to validate         *         * @return object  stdClass return with data         *         * @access private         *         * @see    validateSQL()         */        function _validate($sql)        {            $ret = $this->_validateSQL($this->service_link, $this->session_data,                                               $sql, $this->output_type);            return $ret;        } // end of the "validate()" function        /**         * Public functions         */        /**         * Constructor         *         * @access public         */        function __construct()        {            $this->url                           = 'http://sqlvalidator.mimer.com/v1/services';            $this->service_name                  = 'SQL99Validator';            $this->wsdl                          = '?wsdl';            $this->output_type                   = 'html';            $this->username                      = 'anonymous';            $this->password                      = '';            $this->calling_program               = 'PHP_SQLValidator';            $this->calling_program_version       = PMA_VERSION;            $this->target_dbms                   = 'N/A';            $this->target_dbms_version           = 'N/A';            $this->connection_technology         = 'PHP';            $this->connection_technology_version = phpversion();            $this->interactive = 1;            $this->service_link = null;            $this->session_data = null;        } // end of the "PMA_SQLValidator()" function        /**         * Sets credentials         *         * @param string  the username         * @param string  the password         *         * @access public         */        function setCredentials($username, $password)        {            $this->username = $username;            $this->password = $password;        } // end of the "setCredentials()" function        /**         * Sets the calling program         *         * @param string  the calling program name         * @param string  the calling program revision         *         * @access public         */        function setCallingProgram($calling_program, $calling_program_version)        {            $this->calling_program         = $calling_program;            $this->calling_program_version = $calling_program_version;        } // end of the "setCallingProgram()" function        /**         * Appends the calling program         *         * @param string  the calling program name         * @param string  the calling program revision         *         * @access public         */        function appendCallingProgram($calling_program, $calling_program_version)        {            $this->calling_program         .= ' - ' . $calling_program;            $this->calling_program_version .= ' - ' . $calling_program_version;        } // end of the "appendCallingProgram()" function        /**         * Sets the target DBMS         *         * @param string  the target DBMS name         * @param string  the target DBMS revision         *         * @access public         */        function setTargetDbms($target_dbms, $target_dbms_version)        {            $this->target_dbms         = $target_dbms;            $this->target_dbms_version = $target_dbms_version;        } // end of the "setTargetDbms()" function        /**         * Appends the target DBMS         *         * @param string  the target DBMS name         * @param string  the target DBMS revision         *         * @access public         */        function appendTargetDbms($target_dbms, $target_dbms_version)        {            $this->target_dbms         .= ' - ' . $target_dbms;            $this->target_dbms_version .= ' - ' . $target_dbms_version;        } // end of the "appendTargetDbms()" function        /**         * Sets the connection technology used         *         * @param string  the connection technology name         * @param string  the connection technology revision         *         * @access public         */        function setConnectionTechnology($connection_technology, $connection_technology_version)        {            $this->connection_technology         = $connection_technology;            $this->connection_technology_version = $connection_technology_version;        } // end of the "setConnectionTechnology()" function        /**         * Appends the connection technology used         *         * @param string  the connection technology name         * @param string  the connection technology revision         *         * @access public         */        function appendConnectionTechnology($connection_technology, $connection_technology_version)        {            $this->connection_technology         .= ' - ' . $connection_technology;            $this->connection_technology_version .= ' - ' . $connection_technology_version;        } // end of the "appendConnectionTechnology()" function        /**         * Sets whether interactive mode should be used or not         *         * @param integer  whether interactive mode should be used or not         *         * @access public         */        function setInteractive($interactive)        {            $this->interactive = $interactive;        } // end of the "setInteractive()" function        /**         * Sets the output type to use         *         * @param string  the output type to use         *         * @access public         */        function setOutputType($output_type)        {            $this->output_type = $output_type;        } // end of the "setOutputType()" function        /**         * Starts service         *         * @access public         */        function startService()        {            $this->service_link = $this->_openService($this->url . '/' . $this->service_name . $this->wsdl);        } // end of the "startService()" function        /**         * Starts session         *         * @access public         */        function startSession()        {            $this->session_data = $this->_openSession($this->service_link, $this->username, $this->password,                                                              $this->calling_program, $this->calling_program_version,                                                              $this->target_dbms, $this->target_dbms_version,                                                              $this->connection_technology, $this->connection_technology_version,                                                              $this->interactive);            if (isset($this->session_data) && ($this->session_data != null)                && ($this->session_data->target != $this->url)) {                // Reopens the service on the new URL that was provided                $url = $this->session_data->target;                $this->startService();            }        } // end of the "startSession()" function        /**         * Do start service and session         *         * @access public         */        function start()        {            $this->startService();            $this->startSession();        } // end of the "start()" function        /**         * Call to determine just if a query is valid or not.         *         * @param string SQL statement to validate         *         * @return string Validator string from Mimer         *         * @see _validate         */        function isValid($sql)        {            $res = $this->_validate($sql);            return $res->standard;        } // end of the "isValid()" function        /**         * Call for complete validator response         *         * @param string SQL statement to validate         *         * @return string Validator string from Mimer         *         * @see _validate         */        function validationString($sql)        {            $res = $this->_validate($sql);            return $res->data;        } // end of the "validationString()" function    } // end class PMA_SQLValidator    //add an extra check to ensure that the class was defined without errors    if (!class_exists('PMA_SQLValidator')) {        $GLOBALS['sqlvalidator_error'] = true;    }} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * finishes HTML output * * updates javascript variables in index.php for correct working with querywindow * and navigation frame refreshing * * send buffered data if buffered * * WARNING: This script has to be included at the very end of your code because *          it will stop the script execution! * * always use $GLOBALS, as this script is also included by functions * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * for PMA_setHistory() */if (! PMA_isValid($_REQUEST['no_history']) && empty($GLOBALS['error_message']) && ! empty($GLOBALS['sql_query'])) {    PMA_setHistory(PMA_ifSetOr($GLOBALS['db'], ''),        PMA_ifSetOr($GLOBALS['table'], ''),        $GLOBALS['cfg']['Server']['user'],        $GLOBALS['sql_query']);}if ($GLOBALS['error_handler']->hasDisplayErrors()) {    echo '<div class="clearfloat">';    $GLOBALS['error_handler']->dispErrors();    echo '</div>';}if (count($GLOBALS['footnotes'])) {    echo '<div class="footnotes">';    foreach ($GLOBALS['footnotes'] as $footnote) {        echo '<span id="footnote_' . $footnote['nr'] . '"><sup>'            . $footnote['nr'] . '</sup> ' . $footnote['note'] . '</span><br />';    }    echo '</div>';}if (! empty($_SESSION['debug'])) {    $sum_time = 0;    $sum_exec = 0;    foreach ($_SESSION['debug']['queries'] as $query) {        $sum_time += $query['count'] * $query['time'];        $sum_exec += $query['count'];    }    echo '<div>';    echo count($_SESSION['debug']['queries']) . ' queries executed '        . $sum_exec . ' times in ' . $sum_time . ' seconds';    echo '<pre>';    print_r($_SESSION['debug']);    echo '</pre>';    echo '</div>';    $_SESSION['debug'] = array();}if (!$GLOBALS['is_ajax_request']) {?><script type="text/javascript">//<![CDATA[<?phpif (empty($GLOBALS['error_message'])) {    ?>$(document).ready(function() {// updates current settingsif (window.parent.setAll) {    window.parent.setAll('<?php        echo PMA_escapeJsString($GLOBALS['lang']) . "', '";        echo PMA_escapeJsString($GLOBALS['collation_connection']) . "', '";        echo PMA_escapeJsString($GLOBALS['server']) . "', '";        echo PMA_escapeJsString(PMA_ifSetOr($GLOBALS['db'], '')) . "', '";        echo PMA_escapeJsString(PMA_ifSetOr($GLOBALS['table'], '')) . "', '";        echo PMA_escapeJsString($_SESSION[' PMA_token ']);?>');}    <?php    if (! empty($GLOBALS['reload'])) {        ?>// refresh navigation frame contentif (window.parent.refreshNavigation) {    window.parent.refreshNavigation();}        <?php    } else if (isset($_GET['reload_left_frame']) && $_GET['reload_left_frame'] == '1') {        // reload left frame (used by user preferences)        ?>        if (window.parent && window.parent.frame_navigation) {            window.parent.frame_navigation.location.reload();        }        <?php    }    ?>// set current db, table and sql query in the querywindowif (window.parent.reload_querywindow) {    window.parent.reload_querywindow(        '<?php echo PMA_escapeJsString(PMA_ifSetOr($GLOBALS['db'], '')) ?>',        '<?php echo PMA_escapeJsString(PMA_ifSetOr($GLOBALS['table'], '')) ?>',        '<?php echo strlen($GLOBALS['sql_query']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'] ? PMA_escapeJsString($GLOBALS['sql_query']) : ''; ?>');}    <?php}if (! empty($GLOBALS['focus_querywindow'])) {    ?>// set focus to the querywindowif (parent.querywindow && !parent.querywindow.closed && parent.querywindow.location) {    self.focus();}    <?php}?>if (window.parent.frame_content) {    // reset content frame name, as querywindow needs to set a unique name    // before submitting form data, and navigation frame needs the original name    if (typeof(window.parent.frame_content.name) != 'undefined'     && window.parent.frame_content.name != 'frame_content') {        window.parent.frame_content.name = 'frame_content';    }    if (typeof(window.parent.frame_content.id) != 'undefined'     && window.parent.frame_content.id != 'frame_content') {        window.parent.frame_content.id = 'frame_content';    }    //window.parent.frame_content.setAttribute('name', 'frame_content');    //window.parent.frame_content.setAttribute('id', 'frame_content');}});//]]></script><?php}// Link to itself to replicate windows including framesetif (! isset($GLOBALS['checked_special'])) {    $GLOBALS['checked_special'] = false;}if (PMA_getenv('SCRIPT_NAME') && empty($_POST) && !$GLOBALS['checked_special'] && ! $GLOBALS['is_ajax_request']) {    echo '<div id="selflink" class="print_ignore">' . "\n";    $url_params['target'] = basename(PMA_getenv('SCRIPT_NAME'));    ?><script type="text/javascript">//<![CDATA[/* Store current location in hash part of URL to allow direct bookmarking */setURLHash("<?php echo PMA_generate_common_url($url_params, 'text', ''); ?>");//]]></script><?php    echo '<a href="index.php' . PMA_generate_common_url($url_params) . '"'        . ' title="' . __('Open new phpMyAdmin window') . '" target="_blank">';    if ($GLOBALS['cfg']['NavigationBarIconic']) {        echo PMA_getImage('window-new.png', __('Open new phpMyAdmin window'));    }    if ($GLOBALS['cfg']['NavigationBarIconic'] !== true) {        echo __('Open new phpMyAdmin window');    }    echo '</a>' . "\n";    echo '</div>' . "\n";}// Include possible custom footersif (! $GLOBALS['is_ajax_request'] && file_exists(CUSTOM_FOOTER_FILE)) {    include CUSTOM_FOOTER_FILE;}/** * If we are in an AJAX request, we do not need to generate the closing tags for * body and html. */if (! $GLOBALS['is_ajax_request']) {?></body></html><?php}/** * Stops the script execution */exit;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer */require_once './libraries/pmd_common.php';/** * If called directly from the designer, first save the positions */if (! isset($scale)) {    $no_die_save_pos = 1;    include_once 'pmd_save_pos.php';}if (isset($mode)) {    if ('create_export' != $mode && empty($pdf_page_number)) {        die("<script>alert('Pages not found!');history.go(-2);</script>");    }    $pmd_table = PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']);    $pma_table = PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_coords']);    $scale_q = PMA_sqlAddSlashes($scale);    if ('create_export' == $mode) {        $pdf_page_number = PMA_REL_create_page($newpage, $cfgRelation, $db);        if ($pdf_page_number > 0) {            $message = PMA_Message::success(__('Page has been created'));            $mode = 'export';        } else {            $message = PMA_Message::error(__('Page creation failed'));        }    }    $pdf_page_number_q = PMA_sqlAddSlashes($pdf_page_number);    if ('export' == $mode) {        $sql = "REPLACE INTO " . $pma_table . " (db_name, table_name, pdf_page_number, x, y) SELECT db_name, table_name, " . $pdf_page_number_q . ", ROUND(x/" . $scale_q . ") , ROUND(y/" . $scale_q . ") y FROM " . $pmd_table . " WHERE db_name = '" . PMA_sqlAddSlashes($db) . "'";        PMA_query_as_controluser($sql, true, PMA_DBI_QUERY_STORE);    }    if ('import' == $mode) {        PMA_query_as_controluser(        'UPDATE ' . $pma_table . ',' . $pmd_table .        ' SET ' . $pmd_table . '.`x`= ' . $pma_table . '.`x` * '. $scale_q . ',        ' . $pmd_table . '.`y`= ' . $pma_table . '.`y` * '. $scale_q .'        WHERE        ' . $pmd_table . '.`db_name`=' . $pma_table . '.`db_name`        AND        ' . $pmd_table . '.`table_name` = ' . $pma_table . '.`table_name`        AND        ' . $pmd_table . '.`db_name`=\''. PMA_sqlAddSlashes($db) .'\'        AND pdf_page_number = ' . $pdf_page_number_q . ';', true, PMA_DBI_QUERY_STORE);    }}// no need to use pmd/stylesrequire_once './libraries/header_meta_style.inc.php';?></head><body><br><div><?php    if (!empty($message)) {        $message->display();    }?>  <form name="form1" method="post" action="pmd_pdf.php"><?phpecho PMA_generate_common_hidden_inputs($db);echo '<div>';echo '<fieldset><legend>' . __('Import/Export coordinates for PDF schema') . '</legend>';$choices = array();$table_info_result = PMA_query_as_controluser('SELECT * FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'');if (PMA_DBI_num_rows($table_info_result) > 0) {    echo '<p>' . __('Page') . ':';    echo '<select name="pdf_page_number">';    while ($page = PMA_DBI_fetch_assoc($table_info_result)) {        echo '<option value="' . $page['page_nr'] . '">';        echo htmlspecialchars($page['page_descr']);        echo '</option>';    }    echo '</select>';    echo '</p>';    $choices['import'] = __('Import from selected page');    $choices['export'] = __('Export to selected page');}$choices['create_export'] = __('Create a page and export to it');if (1 == count($choices)) {    echo $choices['create_export'];    echo '<input type="hidden" name="mode" value="create_export" />';} else {    PMA_display_html_radio('mode', $choices, $checked_choice = '', $line_break = true, $escape_label = false, $class = '');}echo '<br />';echo '<label for="newpage">' . __('New page name: ') . '</label>';echo '<input id="newpage" type="text" name="newpage" />';echo '<p>' . __('Export/Import to scale') . ':';?>      <select name="scale">        <option value="1">1:1</option>        <option value="2">1:2</option>        <option value="3" selected>1:3 (<?php echo __('recommended'); ?>)</option>        <option value="4">1:4</option>        <option value="5">1:5</option>        </select>      </p>      <input type="submit" value="<?php echo __('Go'); ?>">    </fieldset>    </div>  </form></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handle row specifc actions like edit, delete, export * * @package PhpMyAdmin *//** * do not globalize/import request variables * can only be enabled if all included files are switched superglobals too * but leave this here to show that this file is 'superglobalized'define('PMA_NO_VARIABLES_IMPORT', true); *//** * */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';/** * No rows were selected => show again the query and tell that user. */if (! PMA_isValid($_REQUEST['rows_to_delete'], 'array') && ! isset($_REQUEST['mult_btn'])) {    $disp_message = __('No rows selected');    $disp_query = '';    include './sql.php';    include './libraries/footer.inc.php';}if (isset($_REQUEST['submit_mult'])) {    $submit_mult = $_REQUEST['submit_mult'];// workaround for IE problem:} elseif (isset($_REQUEST['submit_mult_delete_x'])) {    $submit_mult = 'row_delete';} elseif (isset($_REQUEST['submit_mult_change_x'])) {    $submit_mult = 'row_edit';} elseif (isset($_REQUEST['submit_mult_export_x'])) {    $submit_mult = 'row_export';}// If the 'Ask for confirmation' button was pressed, this can only come// from 'delete' mode, so we set it straight away.if (isset($_REQUEST['mult_btn'])) {    $submit_mult = 'row_delete';}switch($submit_mult) {    case 'row_delete':    case 'row_edit':    case 'row_export':        // leave as is        break;    case 'export':        $submit_mult = 'row_export';        break;    case 'delete':        $submit_mult = 'row_delete';        break;    default:    case 'edit':        $submit_mult = 'row_edit';        break;}if (!empty($submit_mult)) {    switch($submit_mult) {        case 'row_edit':            // As we got the rows to be edited from the            // 'rows_to_delete' checkbox, we use the index of it as the            // indicating WHERE clause. Then we build the array which is used            // for the tbl_change.php script.            $where_clause = array();            foreach ($_REQUEST['rows_to_delete'] as $i_where_clause => $del_query) {                $where_clause[] = urldecode($i_where_clause);            }            $active_page = 'tbl_change.php';            include './tbl_change.php';            break;        case 'row_export':            // Needed to allow SQL export            $single_table = true;            // As we got the rows to be exported from the            // 'rows_to_delete' checkbox, we use the index of it as the            // indicating WHERE clause. Then we build the array which is used            // for the tbl_change.php script.            $where_clause = array();            foreach ($_REQUEST['rows_to_delete'] as $i_where_clause => $del_query) {                $where_clause[] = urldecode($i_where_clause);            }            $active_page = 'tbl_export.php';            include './tbl_export.php';            break;        case 'row_delete':        default:            $action = 'tbl_row_action.php';            $err_url = 'tbl_row_action.php' . PMA_generate_common_url($GLOBALS['url_params']);            if (! isset($_REQUEST['mult_btn'])) {                $original_sql_query = $sql_query;                if (! empty($url_query)) {                    $original_url_query = $url_query;                }            }            include './libraries/mult_submits.inc.php';            $_url_params = $GLOBALS['url_params'];            $_url_params['goto'] = 'tbl_sql.php';            $url_query = PMA_generate_common_url($_url_params);            /**             * Show result of multi submit operation             */            // sql_query is not set when user does not confirm multi-delete            if ((!empty($submit_mult) || isset($_REQUEST['mult_btn'])) && ! empty($sql_query)) {                $disp_message = __('Your SQL query has been executed successfully');                $disp_query = $sql_query;            }            if (isset($original_sql_query)) {                $sql_query = $original_sql_query;            }            if (isset($original_url_query)) {                $url_query = $original_url_query;            }            // this is because sql.php could call tbl_structure            // which would think it needs to call mult_submits.inc.php:            unset($submit_mult, $_REQUEST['mult_btn']);            $active_page = 'sql.php';            include './sql.php';            /**             * Displays the footer             */            include './libraries/footer.inc.php';            break;    }}?>
<?php/** * This example configuration shows how to configure phpMyAdmin for * many hosts that all have identical configuration otherwise. To add * a new host, just drop it into $hosts below. Contributed by * Matthew Hawkins. */$i=0;$hosts = array (    "foo.example.com",    "bar.example.com",    "baz.example.com",    "quux.example.com",);foreach ($hosts as $host) {    $i++;    $cfg['Servers'][$i]['host']     = $host;    $cfg['Servers'][$i]['port']     = '';    $cfg['Servers'][$i]['socket']   = '';    $cfg['Servers'][$i]['connect_type']     = 'tcp';    $cfg['Servers'][$i]['extension']        = 'mysql';    $cfg['Servers'][$i]['compress'] = FALSE;    $cfg['Servers'][$i]['controluser']      = 'pma';    $cfg['Servers'][$i]['controlpass']      = 'pmapass';    $cfg['Servers'][$i]['auth_type']        = 'cookie';    $cfg['Servers'][$i]['user']     = '';    $cfg['Servers'][$i]['password'] = '';    $cfg['Servers'][$i]['only_db']  = '';    $cfg['Servers'][$i]['verbose']  = '';    $cfg['Servers'][$i]['pmadb']    = 'phpmyadmin';    $cfg['Servers'][$i]['bookmarktable']    = 'pma_bookmark';    $cfg['Servers'][$i]['relation'] = 'pma_relation';    $cfg['Servers'][$i]['table_info']       = 'pma_table_info';    $cfg['Servers'][$i]['table_coords']     = 'pma_table_coords';    $cfg['Servers'][$i]['pdf_pages']        = 'pma_pdf_pages';    $cfg['Servers'][$i]['column_info']      = 'pma_column_info';    $cfg['Servers'][$i]['history']  = 'pma_history';    $cfg['Servers'][$i]['designer_coords'] = 'pma_designer_coords';}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Prepares the work and runs some other scripts if required */if (! empty($submit_mult) && $submit_mult != __('With selected:') && (! empty($selected_db)  || ! empty($selected_tbl)  || ! empty($selected_fld)  || ! empty($rows_to_delete))) {    define('PMA_SUBMIT_MULT', 1);    if (isset($selected_db) && !empty($selected_db)) {        // coming from server database view - do something with selected databases        $selected     = $selected_db;        $what         = 'drop_db';    } elseif (isset($selected_tbl) && !empty($selected_tbl)) {        // coming from database structure view - do something with selected tables        if ($submit_mult == 'print') {            include './tbl_printview.php';        } else {           $selected = $selected_tbl;           switch ($submit_mult) {               case 'add_prefix_tbl':               case 'replace_prefix_tbl':               case 'copy_tbl_change_prefix':               case 'drop_db':               case 'drop_tbl':               case 'empty_tbl':                   $what = $submit_mult;                   break;               case 'check_tbl':               case 'optimize_tbl':               case 'repair_tbl':               case 'analyze_tbl':                   $query_type = $submit_mult;                   unset($submit_mult);                   $mult_btn   = __('Yes');                   break;               case 'export':                   unset($submit_mult);                   include 'db_export.php';                   exit;                   break;           } // end switch        }    } elseif (isset($selected_fld) && !empty($selected_fld)) {        // coming from table structure view - do something with selected columns/fileds        $selected     = $selected_fld;        switch ($submit_mult) {            case 'drop':                $what     = 'drop_fld';                break;            case 'primary':                // Gets table primary key                PMA_DBI_select_db($db);                $result      = PMA_DBI_query('SHOW KEYS FROM ' . PMA_backquote($table) . ';');                $primary     = '';                while ($row = PMA_DBI_fetch_assoc($result)) {                    // Backups the list of primary keys                    if ($row['Key_name'] == 'PRIMARY') {                        $primary .= $row['Column_name'] . ', ';                    }                } // end while                PMA_DBI_free_result($result);                if (empty($primary)) {                    // no primary key, so we can safely create new                    unset($submit_mult);                    $query_type = 'primary_fld';                    $mult_btn   = __('Yes');                } else {                    // primary key exists, so lets as user                    $what = 'primary_fld';                }                break;            case 'index':                unset($submit_mult);                $query_type = 'index_fld';                $mult_btn   = __('Yes');                break;            case 'unique':                unset($submit_mult);                $query_type = 'unique_fld';                $mult_btn   = __('Yes');                break;            case 'spatial':                unset($submit_mult);                $query_type = 'spatial_fld';                $mult_btn   = __('Yes');                break;            case 'ftext':                unset($submit_mult);                $query_type = 'fulltext_fld';                $mult_btn   = __('Yes');                break;            case 'change':                include './tbl_alter.php';                break;            case 'browse':                // this should already be handled by tbl_structure.php        }    } else {        // coming from browsing - do something with selected rows        $what = 'row_delete';        $selected = $rows_to_delete;    }} // end if/** * Displays the confirmation form if required */if (!empty($submit_mult) && !empty($what)) {    unset($message);    include_once './libraries/header.inc.php';    if (strlen($table)) {        include './libraries/tbl_common.php';        $url_query .= '&amp;goto=tbl_sql.php&amp;back=tbl_sql.php';        include './libraries/tbl_info.inc.php';        include_once './libraries/tbl_links.inc.php';    } elseif (strlen($db)) {        include './libraries/db_common.inc.php';        include './libraries/db_info.inc.php';    } else {        include_once './libraries/server_common.inc.php';        include_once './libraries/server_links.inc.php';    }    // Builds the query    $full_query     = '';    if ($what == 'drop_tbl') {        $full_query_views = '';    }    $selected_cnt   = count($selected);    $i = 0;    foreach ($selected AS $idx => $sval) {        switch ($what) {            case 'row_delete':                $full_query .= htmlspecialchars($sval)                    . ';<br />';                break;            case 'drop_db':                $full_query .= 'DROP DATABASE '                    . PMA_backquote(htmlspecialchars($sval))                    . ';<br />';                $reload = 1;                break;            case 'drop_tbl':                $current = $sval;                if (!empty($views) && in_array($current, $views)) {                    $full_query_views .= (empty($full_query_views) ? 'DROP VIEW ' : ', ')                        . PMA_backquote(htmlspecialchars($current));                } else {                    $full_query .= (empty($full_query) ? 'DROP TABLE ' : ', ')                        . PMA_backquote(htmlspecialchars($current));                }                break;            case 'empty_tbl':                $full_query .= 'TRUNCATE ';                $full_query .= PMA_backquote(htmlspecialchars($sval))                            . ';<br />';                break;            case 'primary_fld':                if ($full_query == '') {                    $full_query .= 'ALTER TABLE '                        . PMA_backquote(htmlspecialchars($table))                        . '<br />&nbsp;&nbsp;DROP PRIMARY KEY,'                        . '<br />&nbsp;&nbsp; ADD PRIMARY KEY('                        . '<br />&nbsp;&nbsp;&nbsp;&nbsp; '                        . PMA_backquote(htmlspecialchars($sval))                        . ',';                } else {                    $full_query .= '<br />&nbsp;&nbsp;&nbsp;&nbsp; '                        . PMA_backquote(htmlspecialchars($sval))                        . ',';                }                if ($i == $selected_cnt-1) {                    $full_query = preg_replace('@,$@', ');<br />', $full_query);                }                break;            case 'drop_fld':                if ($full_query == '') {                    $full_query .= 'ALTER TABLE '                        . PMA_backquote(htmlspecialchars($table));                }                $full_query .= '<br />&nbsp;&nbsp;DROP '                    . PMA_backquote(htmlspecialchars($sval))                    . ',';                if ($i == $selected_cnt - 1) {                    $full_query = preg_replace('@,$@', ';<br />', $full_query);                }                break;        } // end switch        $i++;    }    if ($what == 'drop_tbl') {        if (!empty($full_query)) {            $full_query .= ';<br />' . "\n";        }        if (!empty($full_query_views)) {            $full_query .= $full_query_views . ';<br />' . "\n";        }        unset($full_query_views);    }    // Displays the confirmation form    $_url_params = array(        'query_type' => $what,        'reload' => (! empty($reload) ? 1 : 0),    );    if (strpos(' ' . $action, 'db_') == 1) {        $_url_params['db']= $db;    } elseif (strpos(' ' . $action, 'tbl_') == 1 || $what == 'row_delete') {        $_url_params['db']= $db;        $_url_params['table']= $table;    }    foreach ($selected as $idx => $sval) {        $_url_params['selected'][] = $sval;    }    if ($what == 'drop_tbl' && !empty($views)) {        foreach ($views as $current) {            $_url_params['views'][] = $current;       }    }    if ($what == 'row_delete') {        $_url_params['original_sql_query'] = $original_sql_query;        if (! empty($original_url_query)) {            $_url_params['original_url_query'] = $original_url_query;        }    }    ?><form action="<?php echo $action; ?>" method="post">    <?php    echo PMA_generate_common_hidden_inputs($_url_params);    ?><?php if ($what == 'replace_prefix_tbl' || $what == 'copy_tbl_change_prefix') { ?>        <fieldset class = "input">                <legend><?php echo ($what == 'replace_prefix_tbl' ? __('Replace table prefix') : __('Copy table with prefix')) ?>:</legend>                <table>                <tr>                <td><?php echo __('From'); ?></td><td><input type="text" name="from_prefix" id="initialPrefix"</td>                </tr>                <tr>                <td><?php echo __('To'); ?> </td><td><input type="text" name="to_prefix" id="newPrefix"</td>                </tr>                </table>        </fieldset>        <fieldset class="tblFooters">                <button type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes"><?php echo __('Submit'); ?></button>        </fieldset>    <?php        } elseif ($what == 'add_prefix_tbl') { ?>        <fieldset class = "input">                <legend><?php echo __('Add table prefix') ?>:</legend>                <table>                <tr>                <td><?php echo __('Add prefix'); ?></td>     <td><input type="text" name="add_prefix" id="txtPrefix"</td>                </tr>                </table>        </fieldset>        <fieldset class="tblFooters">                <button type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes"><?php echo __('Submit'); ?></button>        </fieldset>    <?php        } else { ?>    <fieldset class="confirmation">        <legend><?php echo ($what == 'drop_db' ? __('You are about to DESTROY a complete database!') . '&nbsp;' : '') . __('Do you really want to '); ?>:</legend>        <tt><?php echo $full_query; ?></tt>    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes" />        <input type="submit" name="mult_btn" value="<?php echo __('No'); ?>" id="buttonNo" />    </fieldset>    <?php    }    include './libraries/footer.inc.php';} elseif ($mult_btn == __('Yes')) {/** * Executes the query - dropping rows, columns/fields, tables or dbs */    if ($query_type == 'drop_db' || $query_type == 'drop_tbl' || $query_type == 'drop_fld') {        include_once './libraries/relation_cleanup.lib.php';    }    $sql_query      = '';    if ($query_type == 'drop_tbl') {        $sql_query_views = '';    }    $selected_cnt   = count($selected);    $run_parts      = false; // whether to run query after each pass    $use_sql        = false; // whether to include sql.php at the end (to display results)    if ($query_type == 'primary_fld') {        // Gets table primary key        PMA_DBI_select_db($db);        $result      = PMA_DBI_query('SHOW KEYS FROM ' . PMA_backquote($table) . ';');        $primary     = '';        while ($row = PMA_DBI_fetch_assoc($result)) {            // Backups the list of primary keys            if ($row['Key_name'] == 'PRIMARY') {                $primary .= $row['Column_name'] . ', ';            }        } // end while        PMA_DBI_free_result($result);    }    $rebuild_database_list = false;    for ($i = 0; $i < $selected_cnt; $i++) {        switch ($query_type) {            case 'row_delete':                $a_query = $selected[$i];                $run_parts = true;                break;            case 'drop_db':                PMA_relationsCleanupDatabase($selected[$i]);                $a_query   = 'DROP DATABASE '                           . PMA_backquote($selected[$i]);                $reload    = 1;                $run_parts = true;                $rebuild_database_list = true;                break;            case 'drop_tbl':                PMA_relationsCleanupTable($db, $selected[$i]);                $current = $selected[$i];                if (!empty($views) && in_array($current, $views)) {                    $sql_query_views .= (empty($sql_query_views) ? 'DROP VIEW ' : ', ')                              . PMA_backquote($current);                } else {                    $sql_query .= (empty($sql_query) ? 'DROP TABLE ' : ', ')                               . PMA_backquote($current);                }                $reload    = 1;                break;            case 'check_tbl':                $sql_query .= (empty($sql_query) ? 'CHECK TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'optimize_tbl':                $sql_query .= (empty($sql_query) ? 'OPTIMIZE TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'analyze_tbl':                $sql_query .= (empty($sql_query) ? 'ANALYZE TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'repair_tbl':                $sql_query .= (empty($sql_query) ? 'REPAIR TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'empty_tbl':                $a_query = 'TRUNCATE ';                $a_query .= PMA_backquote($selected[$i]);                $run_parts = true;                break;            case 'drop_fld':                PMA_relationsCleanupColumn($db, $table, $selected[$i]);                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) : ',')                           . ' DROP ' . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ';' : '');                break;            case 'primary_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . (empty($primary) ? '' : ' DROP PRIMARY KEY,') . ' ADD PRIMARY KEY( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'index_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD INDEX( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'unique_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD UNIQUE( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'spatial_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD SPATIAL( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'fulltext_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD FULLTEXT( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;        case 'add_prefix_tbl':                $newtablename = $add_prefix . $selected[$i];                $a_query = 'ALTER TABLE ' . PMA_backquote($selected[$i]) . ' RENAME ' . PMA_backquote($newtablename) ; // ADD PREFIX TO TABLE NAME                $run_parts = true;                break;            case 'replace_prefix_tbl':                $current = $selected[$i];                $newtablename = preg_replace("/^" . $from_prefix . "/", $to_prefix, $current);                $a_query = 'ALTER TABLE ' . PMA_backquote($selected[$i]) . ' RENAME ' . PMA_backquote($newtablename) ; // CHANGE PREFIX PATTERN                $run_parts = true;                break;            case 'copy_tbl_change_prefix':                $current = $selected[$i];                $newtablename = preg_replace("/^" . $from_prefix . "/", $to_prefix, $current);                $a_query = 'CREATE TABLE ' . PMA_backquote($newtablename) . ' SELECT * FROM ' . PMA_backquote($selected[$i]) ; // COPY TABLE AND CHANGE PREFIX PATTERN                $run_parts = true;                break;        } // end switch        // All "DROP TABLE", "DROP FIELD", "OPTIMIZE TABLE" and "REPAIR TABLE"        // statements will be run at once below        if ($run_parts) {            $sql_query .= $a_query . ';' . "\n";            if ($query_type != 'drop_db') {                PMA_DBI_select_db($db);            }            $result = PMA_DBI_query($a_query);        } // end if    } // end for    if ($query_type == 'drop_tbl') {        if (!empty($sql_query)) {        $sql_query .= ';';    } elseif (!empty($sql_query_views)) {        $sql_query = $sql_query_views . ';';            unset($sql_query_views);        }    }    if ($use_sql) {        include './sql.php';    } elseif (!$run_parts) {        PMA_DBI_select_db($db);        $result = PMA_DBI_try_query($sql_query);        if ($result && !empty($sql_query_views)) {            $sql_query .= ' ' . $sql_query_views . ';';            $result = PMA_DBI_try_query($sql_query_views);            unset($sql_query_views);        }        if (! $result) {            $message = PMA_Message::error(PMA_DBI_getError());        }    }    if ($rebuild_database_list) {        // avoid a problem with the database list navigator        // when dropping a db from server_databases        $GLOBALS['pma']->databases->build();    }} else {    $message = PMA_Message::success(__('No change'));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Parser bug report decoder * * This is the parser bug decoder system * Throw the bug data in the query box, and hit submit for output. * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * * @package PhpMyAdmin-debug *//** * Displays the form */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US"><head>    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />    <title>phpMyAdmin - Parser bug report decoder</title>    <style type="text/css">    <!--    body, p {        font-family: Arial, Helvetica, sans-serif;        font-size:   medium;    }    h1 {        font-family: Verdana, Arial, Helvetica, sans-serif;        font-size:   large;        font-weight: bold;        color:       #000066;    }    //-->    </style></head><body bgcolor="#FFFFFF"><h1>Parser bug report decoder</h1><br /><form method="post" action="./decode_bug.php">    <input type="hidden" name="bar" value="<?php echo rand(); ?>" />    Encoded bug report:<br />    <textarea name="bug_encoded" cols="72" rows="10"></textarea>    <br /><br />    <input type="submit" /></form><hr /><?php/** * If the form has been submitted -> decodes the bug report *//** * Display the decoded bug report in ASCII format * * @param  string  the text data * * @return string  the text enclosed by "<pre>...</pre>" tags * * @access public */function PMA_printDecodedBug($textdata){    return '<pre>' . htmlspecialchars($textdata) . '</pre><br />';} // end of the "PMA_printDecodedBug()" functionif (!empty($_POST) && isset($_POST['bug_encoded'])) {    $bug_encoded = $_POST['bug_encoded'];}if (!empty($bug_encoded) && is_string($bug_encoded)) {    if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) {        $bug_encoded = stripslashes($bug_encoded);    }    $bug_encoded     = preg_replace('/[[:space:]]/', '', $bug_encoded);    $bug_decoded     = base64_decode($bug_encoded);    if (substr($bug_encoded, 0, 2) == 'eN') {        if (function_exists('gzuncompress')) {                $result  = PMA_printDecodedBug(gzuncompress($bug_decoded));            } else {                $result  = 'Error: &quot;gzuncompress()&quot; is unavailable!' . "\n";        }    } else {        $result  = PMA_printDecodedBug($bug_decoded);    } // end if... else...    echo '<p>Decoded:</p>' . "\n"         . $result . "\n";} // end if?></body></html>
<?php// TCPDF FONT FILE DESCRIPTION$type='TrueTypeUnicode';$name='DejaVuSans';$up=-63;$ut=44;$dw=600;$diff='';$originalsize=720012;$enc='';$file='dejavusans.z';$ctg='dejavusans.ctg.z';$desc=array('Flags'=>32,'FontBBox'=>'[-1021 -415 1681 1167]','ItalicAngle'=>0,'Ascent'=>928,'Descent'=>-236,'Leading'=>0,'CapHeight'=>729,'XHeight'=>547,'StemV'=>34,'StemH'=>15,'AvgWidth'=>507,'MaxWidth'=>1735,'MissingWidth'=>600);$cw=array(0=>600,1=>600,2=>600,3=>600,4=>600,5=>600,6=>600,7=>600,8=>0,9=>333,10=>600,11=>600,12=>600,13=>333,14=>600,15=>600,16=>600,17=>600,18=>600,19=>600,20=>600,21=>600,22=>600,23=>600,24=>600,25=>600,26=>600,27=>600,28=>600,29=>0,30=>600,31=>600,32=>318,33=>401,34=>460,35=>838,36=>636,37=>950,38=>780,39=>275,40=>390,41=>390,42=>500,43=>838,44=>318,45=>361,46=>318,47=>337,48=>636,49=>636,50=>636,51=>636,52=>636,53=>636,54=>636,55=>636,56=>636,57=>636,58=>337,59=>337,60=>838,61=>838,62=>838,63=>531,64=>1000,65=>684,66=>686,67=>698,68=>770,69=>632,70=>575,71=>775,72=>752,73=>295,74=>295,75=>656,76=>557,77=>863,78=>748,79=>787,80=>603,81=>787,82=>695,83=>635,84=>611,85=>732,86=>684,87=>989,88=>685,89=>611,90=>685,91=>390,92=>337,93=>390,94=>838,95=>500,96=>500,97=>613,98=>635,99=>550,100=>635,101=>615,102=>352,103=>635,104=>634,105=>278,106=>278,107=>579,108=>278,109=>974,110=>634,111=>612,112=>635,113=>635,114=>411,115=>521,116=>392,117=>634,118=>592,119=>818,120=>592,121=>592,122=>525,123=>636,124=>337,125=>636,126=>838,127=>600,128=>684,129=>684,130=>698,131=>632,132=>748,133=>787,134=>732,135=>613,136=>613,137=>613,138=>613,139=>613,140=>613,141=>550,142=>615,143=>615,144=>615,145=>615,146=>278,147=>278,148=>278,149=>278,150=>634,151=>612,152=>612,153=>612,154=>612,155=>612,156=>634,157=>634,158=>634,159=>634,160=>318,161=>401,162=>636,163=>636,164=>636,165=>636,166=>337,167=>500,168=>500,169=>1000,170=>471,171=>612,172=>838,173=>361,174=>1000,175=>500,176=>500,177=>838,178=>401,179=>401,180=>500,181=>636,182=>636,183=>318,184=>500,185=>401,186=>471,187=>612,188=>969,189=>969,190=>969,191=>531,192=>684,193=>684,194=>684,195=>684,196=>684,197=>684,198=>974,199=>698,200=>632,201=>632,202=>632,203=>632,204=>295,205=>295,206=>295,207=>295,208=>775,209=>748,210=>787,211=>787,212=>787,213=>787,214=>787,215=>838,216=>787,217=>732,218=>732,219=>732,220=>732,221=>611,222=>605,223=>630,224=>613,225=>613,226=>613,227=>613,228=>613,229=>613,230=>982,231=>550,232=>615,233=>615,234=>615,235=>615,236=>278,237=>278,238=>278,239=>278,240=>612,241=>634,242=>612,243=>612,244=>612,245=>612,246=>612,247=>838,248=>612,249=>634,250=>634,251=>634,252=>634,253=>592,254=>635,255=>592,256=>684,257=>613,258=>684,259=>613,260=>684,261=>613,262=>698,263=>550,264=>698,265=>550,266=>698,267=>550,268=>698,269=>550,270=>770,271=>635,272=>775,273=>635,274=>632,275=>615,276=>632,277=>615,278=>632,279=>615,280=>632,281=>615,282=>632,283=>615,284=>775,285=>635,286=>775,287=>635,288=>775,289=>635,290=>775,291=>635,292=>752,293=>634,294=>916,295=>695,296=>295,297=>278,298=>295,299=>278,300=>295,301=>278,302=>295,303=>278,304=>295,305=>278,306=>590,307=>556,308=>295,309=>278,310=>656,311=>579,312=>579,313=>557,314=>278,315=>557,316=>278,317=>557,318=>375,319=>557,320=>342,321=>562,322=>284,323=>748,324=>634,325=>748,326=>634,327=>748,328=>634,329=>813,330=>748,331=>634,332=>787,333=>612,334=>787,335=>612,336=>787,337=>612,338=>1070,339=>1023,340=>695,341=>411,342=>695,343=>411,344=>695,345=>411,346=>635,347=>521,348=>635,349=>521,350=>635,351=>521,352=>635,353=>521,354=>611,355=>392,356=>611,357=>392,358=>611,359=>392,360=>732,361=>634,362=>732,363=>634,364=>732,365=>634,366=>732,367=>634,368=>732,369=>634,370=>732,371=>634,372=>989,373=>818,374=>611,375=>592,376=>611,377=>685,378=>525,379=>685,380=>525,381=>685,382=>525,383=>352,384=>635,385=>735,386=>686,387=>635,388=>686,389=>635,390=>703,391=>698,392=>550,393=>775,394=>819,395=>686,396=>635,397=>612,398=>632,399=>787,400=>614,401=>575,402=>352,403=>775,404=>687,405=>984,406=>354,407=>295,408=>746,409=>579,410=>278,411=>592,412=>974,413=>748,414=>634,415=>787,416=>913,417=>612,418=>949,419=>759,420=>652,421=>635,422=>695,423=>635,424=>521,425=>632,426=>336,427=>392,428=>611,429=>392,430=>611,431=>858,432=>634,433=>764,434=>721,435=>744,436=>730,437=>685,438=>525,439=>666,440=>666,441=>578,442=>525,443=>636,444=>666,445=>578,446=>510,447=>635,448=>295,449=>492,450=>459,451=>295,452=>1422,453=>1299,454=>1154,455=>835,456=>787,457=>457,458=>931,459=>924,460=>797,461=>684,462=>613,463=>295,464=>278,465=>787,466=>612,467=>732,468=>634,469=>732,470=>634,471=>732,472=>634,473=>732,474=>634,475=>732,476=>634,477=>615,478=>684,479=>613,480=>684,481=>613,482=>974,483=>982,484=>775,485=>635,486=>775,487=>635,488=>656,489=>579,490=>787,491=>612,492=>787,493=>612,494=>666,495=>578,496=>278,497=>1422,498=>1299,499=>1154,500=>775,501=>635,502=>1113,503=>682,504=>748,505=>634,506=>684,507=>613,508=>974,509=>982,510=>787,511=>612,512=>684,513=>613,514=>684,515=>613,516=>632,517=>615,518=>632,519=>615,520=>295,521=>278,522=>295,523=>278,524=>787,525=>612,526=>787,527=>612,528=>695,529=>411,530=>695,531=>411,532=>732,533=>634,534=>732,535=>634,536=>635,537=>521,538=>611,539=>392,540=>627,541=>521,542=>752,543=>634,544=>735,545=>838,546=>698,547=>610,548=>685,549=>525,550=>684,551=>613,552=>632,553=>615,554=>787,555=>612,556=>787,557=>612,558=>787,559=>612,560=>787,561=>612,562=>611,563=>592,564=>475,565=>843,566=>477,567=>278,568=>998,569=>998,570=>684,571=>698,572=>550,573=>557,574=>611,575=>521,576=>525,577=>603,578=>479,579=>686,580=>732,581=>684,582=>632,583=>615,584=>295,585=>278,586=>781,587=>635,588=>695,589=>411,590=>611,591=>592,592=>600,593=>635,594=>635,595=>635,596=>549,597=>550,598=>635,599=>696,600=>615,601=>615,602=>819,603=>541,604=>532,605=>775,606=>664,607=>278,608=>696,609=>635,610=>629,611=>596,612=>596,613=>634,614=>634,615=>634,616=>278,617=>338,618=>372,619=>396,620=>487,621=>278,622=>706,623=>974,624=>974,625=>974,626=>646,627=>642,628=>634,629=>612,630=>858,631=>728,632=>660,633=>414,634=>414,635=>414,636=>411,637=>411,638=>530,639=>530,640=>604,641=>604,642=>521,643=>336,644=>336,645=>461,646=>336,647=>392,648=>392,649=>634,650=>618,651=>598,652=>592,653=>818,654=>592,655=>611,656=>525,657=>525,658=>578,659=>578,660=>510,661=>510,662=>510,663=>510,664=>787,665=>580,666=>664,667=>708,668=>654,669=>292,670=>667,671=>507,672=>727,673=>510,674=>510,675=>1014,676=>1058,677=>1013,678=>824,679=>610,680=>778,681=>848,682=>641,683=>654,684=>515,685=>515,686=>661,687=>664,688=>404,689=>399,690=>175,691=>259,692=>295,693=>296,694=>379,695=>515,696=>373,697=>278,698=>460,699=>318,700=>318,701=>318,702=>307,703=>307,704=>370,705=>370,706=>500,707=>500,708=>500,709=>500,710=>500,711=>500,712=>275,713=>500,714=>500,715=>500,716=>275,717=>500,718=>500,719=>500,720=>337,721=>337,722=>307,723=>307,724=>500,725=>500,726=>390,727=>317,728=>500,729=>500,730=>500,731=>500,732=>500,733=>500,734=>315,735=>500,736=>426,737=>166,738=>373,739=>444,740=>370,741=>493,742=>493,743=>493,744=>493,745=>493,748=>500,749=>500,750=>518,755=>500,759=>500,768=>0,769=>0,770=>0,771=>0,772=>0,773=>0,774=>0,775=>0,776=>0,777=>0,778=>0,779=>0,780=>0,781=>0,782=>0,783=>0,784=>0,785=>0,786=>0,787=>0,788=>0,789=>0,790=>0,791=>0,792=>0,793=>0,794=>0,795=>0,796=>0,797=>0,798=>0,799=>0,800=>0,801=>0,802=>0,803=>0,804=>0,805=>0,806=>0,807=>0,808=>0,809=>0,810=>0,811=>0,812=>0,813=>0,814=>0,815=>0,816=>0,817=>0,818=>0,819=>0,820=>0,821=>0,822=>0,823=>0,824=>0,825=>0,826=>0,827=>0,828=>0,829=>0,830=>0,831=>0,832=>0,833=>0,834=>0,835=>0,836=>0,837=>0,838=>0,839=>0,840=>0,841=>0,842=>0,843=>0,844=>0,845=>0,846=>0,847=>0,849=>0,850=>0,851=>0,855=>0,856=>0,858=>0,860=>0,861=>0,862=>0,863=>0,864=>0,865=>0,866=>0,880=>654,881=>568,882=>862,883=>647,884=>278,885=>278,886=>748,887=>650,890=>500,891=>549,892=>550,893=>549,894=>337,900=>500,901=>500,902=>692,903=>318,904=>746,905=>871,906=>408,908=>813,910=>825,911=>826,912=>338,913=>684,914=>686,915=>557,916=>684,917=>632,918=>685,919=>752,920=>787,921=>295,922=>656,923=>684,924=>863,925=>748,926=>632,927=>787,928=>752,929=>603,931=>632,932=>611,933=>611,934=>787,935=>685,936=>787,937=>764,938=>295,939=>611,940=>659,941=>541,942=>634,943=>338,944=>579,945=>659,946=>638,947=>592,948=>612,949=>541,950=>544,951=>634,952=>612,953=>338,954=>589,955=>592,956=>636,957=>559,958=>558,959=>612,960=>602,961=>635,962=>587,963=>634,964=>602,965=>579,966=>660,967=>578,968=>660,969=>837,970=>338,971=>579,972=>612,973=>579,974=>837,975=>656,976=>614,977=>619,978=>699,979=>842,980=>699,981=>660,982=>837,983=>664,984=>787,985=>612,986=>648,987=>587,988=>575,989=>458,990=>660,991=>660,992=>865,993=>627,994=>934,995=>837,996=>758,997=>659,998=>792,999=>615,1000=>687,1001=>607,1002=>768,1003=>625,1004=>699,1005=>612,1006=>611,1007=>536,1008=>664,1009=>635,1010=>550,1011=>278,1012=>787,1013=>615,1014=>615,1015=>605,1016=>635,1017=>698,1018=>863,1019=>651,1020=>635,1021=>703,1022=>698,1023=>703,1024=>632,1025=>632,1026=>786,1027=>610,1028=>698,1029=>635,1030=>295,1031=>295,1032=>295,1033=>1094,1034=>1045,1035=>786,1036=>710,1037=>748,1038=>609,1039=>752,1040=>684,1041=>686,1042=>686,1043=>610,1044=>781,1045=>632,1046=>1077,1047=>641,1048=>748,1049=>748,1050=>710,1051=>752,1052=>863,1053=>752,1054=>787,1055=>752,1056=>603,1057=>698,1058=>611,1059=>609,1060=>861,1061=>685,1062=>776,1063=>686,1064=>1069,1065=>1094,1066=>833,1067=>882,1068=>686,1069=>698,1070=>1080,1071=>695,1072=>613,1073=>617,1074=>589,1075=>525,1076=>691,1077=>615,1078=>901,1079=>532,1080=>650,1081=>650,1082=>604,1083=>639,1084=>754,1085=>654,1086=>612,1087=>654,1088=>635,1089=>550,1090=>583,1091=>592,1092=>855,1093=>592,1094=>681,1095=>591,1096=>915,1097=>942,1098=>707,1099=>790,1100=>589,1101=>549,1102=>842,1103=>602,1104=>615,1105=>615,1106=>625,1107=>525,1108=>549,1109=>521,1110=>278,1111=>278,1112=>278,1113=>902,1114=>898,1115=>652,1116=>604,1117=>650,1118=>592,1119=>654,1120=>934,1121=>837,1122=>771,1123=>672,1124=>942,1125=>749,1126=>879,1127=>783,1128=>1160,1129=>1001,1130=>787,1131=>612,1132=>1027,1133=>824,1134=>636,1135=>541,1136=>856,1137=>876,1138=>787,1139=>612,1140=>781,1141=>665,1142=>781,1143=>665,1144=>992,1145=>904,1146=>953,1147=>758,1148=>1180,1149=>1028,1150=>934,1151=>837,1152=>698,1153=>550,1154=>502,1155=>0,1156=>0,1157=>0,1158=>0,1159=>0,1160=>418,1161=>418,1162=>772,1163=>677,1164=>686,1165=>589,1166=>603,1167=>635,1168=>610,1169=>525,1170=>675,1171=>590,1172=>624,1173=>530,1174=>1077,1175=>901,1176=>641,1177=>532,1178=>710,1179=>604,1180=>710,1181=>604,1182=>710,1183=>604,1184=>856,1185=>832,1186=>752,1187=>661,1188=>1014,1189=>877,1190=>1081,1191=>916,1192=>878,1193=>693,1194=>698,1195=>550,1196=>611,1197=>583,1198=>611,1199=>592,1200=>611,1201=>592,1202=>685,1203=>592,1204=>934,1205=>807,1206=>686,1207=>591,1208=>686,1209=>591,1210=>686,1211=>634,1212=>941,1213=>728,1214=>941,1215=>728,1216=>295,1217=>1077,1218=>901,1219=>656,1220=>604,1221=>776,1222=>670,1223=>752,1224=>661,1225=>776,1226=>681,1227=>686,1228=>591,1229=>888,1230=>774,1231=>278,1232=>684,1233=>613,1234=>684,1235=>613,1236=>974,1237=>982,1238=>632,1239=>615,1240=>787,1241=>615,1242=>787,1243=>615,1244=>1077,1245=>901,1246=>641,1247=>532,1248=>666,1249=>578,1250=>748,1251=>650,1252=>748,1253=>650,1254=>787,1255=>612,1256=>787,1257=>612,1258=>787,1259=>612,1260=>698,1261=>549,1262=>609,1263=>592,1264=>609,1265=>592,1266=>609,1267=>592,1268=>686,1269=>591,1270=>610,1271=>525,1272=>882,1273=>790,1274=>675,1275=>590,1276=>685,1277=>592,1278=>685,1279=>592,1280=>686,1281=>589,1282=>1006,1283=>897,1284=>975,1285=>869,1286=>679,1287=>588,1288=>1072,1289=>957,1290=>1113,1291=>967,1292=>775,1293=>660,1294=>773,1295=>711,1296=>614,1297=>541,1298=>752,1299=>639,1300=>1169,1301=>994,1302=>894,1303=>864,1304=>1032,1305=>986,1306=>787,1307=>635,1308=>989,1309=>818,1310=>710,1311=>604,1312=>1081,1313=>905,1314=>1081,1315=>912,1316=>793,1317=>683,1329=>766,1330=>732,1331=>753,1332=>753,1333=>732,1334=>772,1335=>640,1336=>732,1337=>859,1338=>753,1339=>691,1340=>533,1341=>922,1342=>863,1343=>732,1344=>716,1345=>766,1346=>753,1347=>767,1348=>792,1349=>728,1350=>729,1351=>757,1352=>732,1353=>713,1354=>800,1355=>768,1356=>792,1357=>732,1358=>753,1359=>705,1360=>694,1361=>744,1362=>538,1363=>811,1364=>757,1365=>787,1366=>790,1369=>307,1370=>318,1371=>234,1372=>361,1373=>238,1374=>405,1375=>500,1377=>974,1378=>634,1379=>658,1380=>663,1381=>634,1382=>635,1383=>515,1384=>634,1385=>738,1386=>658,1387=>634,1388=>271,1389=>980,1390=>623,1391=>634,1392=>634,1393=>608,1394=>634,1395=>629,1396=>634,1397=>271,1398=>634,1399=>499,1400=>634,1401=>404,1402=>974,1403=>560,1404=>648,1405=>634,1406=>634,1407=>974,1408=>634,1409=>633,1410=>435,1411=>974,1412=>636,1413=>609,1414=>805,1415=>812,1417=>337,1418=>361,1456=>0,1457=>0,1458=>0,1459=>0,1460=>0,1461=>0,1462=>0,1463=>0,1464=>0,1465=>0,1466=>0,1467=>0,1468=>0,1469=>0,1470=>361,1471=>0,1472=>295,1473=>0,1474=>0,1475=>295,1478=>441,1479=>0,1488=>668,1489=>578,1490=>412,1491=>546,1492=>653,1493=>272,1494=>346,1495=>653,1496=>648,1497=>224,1498=>537,1499=>529,1500=>568,1501=>664,1502=>679,1503=>272,1504=>400,1505=>649,1506=>626,1507=>640,1508=>625,1509=>540,1510=>593,1511=>709,1512=>564,1513=>708,1514=>657,1520=>471,1521=>423,1522=>331,1523=>416,1524=>645,1542=>637,1543=>637,1545=>757,1546=>977,1548=>323,1557=>0,1563=>318,1567=>531,1569=>470,1570=>278,1571=>278,1572=>483,1573=>278,1574=>783,1575=>278,1576=>941,1577=>524,1578=>941,1579=>941,1580=>646,1581=>646,1582=>646,1583=>445,1584=>445,1585=>483,1586=>483,1587=>1221,1588=>1221,1589=>1209,1590=>1209,1591=>925,1592=>925,1593=>597,1594=>597,1600=>293,1601=>1037,1602=>776,1603=>824,1604=>727,1605=>619,1606=>734,1607=>524,1608=>483,1609=>783,1610=>783,1611=>0,1612=>0,1613=>0,1614=>0,1615=>0,1616=>0,1617=>0,1618=>0,1619=>0,1620=>0,1621=>0,1623=>0,1626=>500,1632=>537,1633=>537,1634=>537,1635=>537,1636=>537,1637=>537,1638=>537,1639=>537,1640=>537,1641=>537,1642=>537,1643=>325,1644=>318,1645=>545,1646=>941,1647=>776,1648=>0,1652=>292,1657=>941,1658=>941,1659=>941,1660=>941,1661=>941,1662=>941,1663=>941,1664=>941,1665=>646,1666=>646,1667=>646,1668=>646,1669=>646,1670=>646,1671=>646,1672=>445,1673=>445,1674=>445,1675=>445,1676=>445,1677=>445,1678=>445,1679=>445,1680=>445,1681=>483,1682=>483,1683=>498,1684=>530,1685=>610,1686=>530,1687=>483,1688=>483,1689=>483,1690=>1221,1691=>1221,1692=>1221,1693=>1209,1694=>1209,1695=>925,1696=>597,1697=>1037,1698=>1037,1699=>1037,1700=>1037,1701=>1037,1702=>1037,1703=>776,1704=>776,1705=>895,1706=>1054,1707=>895,1708=>824,1709=>824,1710=>824,1711=>895,1712=>895,1713=>895,1714=>895,1715=>895,1716=>895,1717=>727,1718=>727,1719=>727,1720=>727,1721=>734,1722=>734,1723=>734,1724=>734,1725=>734,1726=>698,1727=>646,1734=>483,1740=>783,1742=>783,1749=>524,1776=>537,1777=>537,1778=>537,1779=>537,1780=>537,1781=>537,1782=>537,1783=>537,1784=>537,1785=>537,1984=>636,1985=>636,1986=>636,1987=>636,1988=>636,1989=>636,1990=>636,1991=>636,1992=>636,1993=>636,1994=>278,1995=>571,1996=>424,1997=>592,1998=>654,1999=>654,2000=>594,2001=>654,2002=>829,2003=>438,2004=>438,2005=>559,2006=>612,2007=>350,2008=>959,2009=>473,2010=>783,2011=>654,2012=>625,2013=>734,2014=>530,2015=>724,2016=>473,2017=>625,2018=>594,2019=>530,2020=>530,2021=>522,2022=>594,2023=>594,2027=>0,2028=>0,2029=>0,2030=>0,2031=>0,2032=>0,2033=>0,2034=>0,2035=>0,2036=>313,2037=>313,2040=>560,2041=>560,2042=>361,3647=>636,3713=>670,3714=>684,3716=>688,3719=>482,3720=>628,3722=>684,3725=>688,3732=>669,3733=>642,3734=>645,3735=>655,3737=>659,3738=>625,3739=>625,3740=>745,3741=>767,3742=>687,3743=>687,3745=>702,3746=>688,3747=>684,3749=>649,3751=>632,3754=>703,3755=>819,3757=>633,3758=>684,3759=>788,3760=>632,3761=>0,3762=>539,3763=>539,3764=>0,3765=>0,3766=>0,3767=>0,3768=>0,3769=>0,3771=>0,3772=>0,3773=>663,3776=>375,3777=>657,3778=>460,3779=>547,3780=>491,3782=>674,3784=>0,3785=>0,3786=>0,3787=>0,3788=>0,3789=>0,3792=>636,3793=>641,3794=>641,3795=>670,3796=>625,3797=>625,3798=>703,3799=>670,3800=>674,3801=>677,3804=>1028,3805=>1028,4256=>840,4257=>690,4258=>642,4259=>759,4260=>591,4261=>686,4262=>789,4263=>811,4264=>467,4265=>565,4266=>789,4267=>793,4268=>584,4269=>837,4270=>750,4271=>688,4272=>811,4273=>584,4274=>584,4275=>837,4276=>837,4277=>646,4278=>604,4279=>584,4280=>596,4281=>584,4282=>721,4283=>795,4284=>584,4285=>566,4286=>584,4287=>669,4288=>799,4289=>542,4290=>664,4291=>542,4292=>565,4293=>674,4304=>508,4305=>508,4306=>533,4307=>785,4308=>522,4309=>517,4310=>508,4311=>797,4312=>507,4313=>518,4314=>1058,4315=>522,4316=>523,4317=>783,4318=>518,4319=>523,4320=>792,4321=>523,4322=>656,4323=>524,4324=>788,4325=>523,4326=>782,4327=>523,4328=>522,4329=>522,4330=>566,4331=>523,4332=>523,4333=>489,4334=>522,4335=>498,4336=>517,4337=>560,4338=>508,4339=>508,4340=>508,4341=>563,4342=>824,4343=>595,4344=>522,4345=>554,4346=>553,4347=>586,4348=>304,5121=>684,5122=>684,5123=>684,5124=>684,5125=>769,5126=>769,5127=>769,5129=>769,5130=>769,5131=>769,5132=>835,5133=>834,5134=>835,5135=>834,5136=>835,5137=>834,5138=>967,5139=>1007,5140=>967,5141=>1007,5142=>769,5143=>967,5144=>1007,5145=>967,5146=>1007,5147=>769,5149=>256,5150=>543,5151=>423,5152=>423,5153=>389,5154=>389,5155=>393,5156=>389,5157=>466,5158=>385,5159=>256,5160=>389,5161=>389,5162=>389,5163=>1090,5164=>909,5165=>953,5166=>1117,5167=>684,5168=>684,5169=>684,5170=>684,5171=>729,5172=>729,5173=>729,5175=>729,5176=>729,5177=>729,5178=>835,5179=>684,5180=>835,5181=>834,5182=>835,5183=>834,5184=>967,5185=>1007,5186=>967,5187=>1007,5188=>967,5189=>1007,5190=>967,5191=>1007,5192=>729,5193=>508,5194=>192,5196=>732,5197=>732,5198=>732,5199=>732,5200=>730,5201=>730,5202=>730,5204=>730,5205=>730,5206=>730,5207=>921,5208=>889,5209=>921,5210=>889,5211=>921,5212=>889,5213=>928,5214=>900,5215=>928,5216=>900,5217=>947,5218=>900,5219=>947,5220=>900,5221=>947,5222=>434,5223=>877,5224=>877,5225=>866,5226=>890,5227=>628,5228=>628,5229=>628,5230=>628,5231=>628,5232=>628,5233=>628,5234=>628,5235=>628,5236=>860,5237=>771,5238=>815,5239=>816,5240=>815,5241=>816,5242=>860,5243=>771,5244=>860,5245=>771,5246=>815,5247=>816,5248=>815,5249=>816,5250=>815,5251=>407,5252=>407,5253=>750,5254=>775,5255=>750,5256=>775,5257=>628,5258=>628,5259=>628,5260=>628,5261=>628,5262=>628,5263=>628,5264=>628,5265=>628,5266=>860,5267=>771,5268=>815,5269=>816,5270=>815,5271=>816,5272=>860,5273=>771,5274=>860,5275=>771,5276=>815,5277=>816,5278=>815,5279=>816,5280=>815,5281=>435,5282=>435,5283=>610,5284=>557,5285=>557,5286=>557,5287=>610,5288=>610,5289=>610,5290=>557,5291=>557,5292=>749,5293=>769,5294=>746,5295=>764,5296=>746,5297=>764,5298=>749,5299=>769,5300=>749,5301=>769,5302=>746,5303=>764,5304=>746,5305=>764,5306=>746,5307=>386,5308=>508,5309=>386,5312=>852,5313=>852,5314=>852,5315=>852,5316=>852,5317=>852,5318=>852,5319=>852,5320=>852,5321=>1069,5322=>1035,5323=>1059,5324=>852,5325=>1059,5326=>852,5327=>852,5328=>600,5329=>453,5330=>600,5331=>852,5332=>852,5333=>852,5334=>852,5335=>852,5336=>852,5337=>852,5338=>852,5339=>852,5340=>1069,5341=>1035,5342=>1059,5343=>1030,5344=>1059,5345=>1030,5346=>1069,5347=>1035,5348=>1069,5349=>1035,5350=>1083,5351=>1030,5352=>1083,5353=>1030,5354=>600,5356=>729,5357=>603,5358=>603,5359=>603,5360=>603,5361=>603,5362=>603,5363=>603,5364=>603,5365=>603,5366=>834,5367=>754,5368=>792,5369=>771,5370=>792,5371=>771,5372=>834,5373=>754,5374=>834,5375=>754,5376=>792,5377=>771,5378=>792,5379=>771,5380=>792,5381=>418,5382=>420,5383=>418,5392=>712,5393=>712,5394=>712,5395=>892,5396=>892,5397=>892,5398=>892,5399=>910,5400=>872,5401=>910,5402=>872,5403=>910,5404=>872,5405=>1140,5406=>1100,5407=>1140,5408=>1100,5409=>1140,5410=>1100,5411=>1140,5412=>1100,5413=>641,5414=>627,5415=>627,5416=>627,5417=>627,5418=>627,5419=>627,5420=>627,5421=>627,5422=>627,5423=>844,5424=>781,5425=>816,5426=>818,5427=>816,5428=>818,5429=>844,5430=>781,5431=>844,5432=>781,5433=>816,5434=>818,5435=>816,5436=>818,5437=>816,5438=>418,5440=>389,5441=>484,5442=>916,5443=>916,5444=>916,5445=>916,5446=>916,5447=>916,5448=>603,5449=>603,5450=>603,5451=>603,5452=>603,5453=>603,5454=>834,5455=>754,5456=>418,5458=>729,5459=>684,5460=>684,5461=>684,5462=>684,5463=>726,5464=>726,5465=>726,5466=>726,5467=>924,5468=>1007,5469=>508,5470=>732,5471=>732,5472=>732,5473=>732,5474=>732,5475=>732,5476=>730,5477=>730,5478=>730,5479=>730,5480=>947,5481=>900,5482=>508,5492=>831,5493=>831,5494=>831,5495=>831,5496=>831,5497=>831,5498=>831,5499=>563,5500=>752,5501=>484,5502=>1047,5503=>1047,5504=>1047,5505=>1047,5506=>1047,5507=>1047,5508=>1047,5509=>825,5514=>831,5515=>831,5516=>831,5517=>831,5518=>1259,5519=>1259,5520=>1259,5521=>1002,5522=>1002,5523=>1259,5524=>1259,5525=>700,5526=>1073,5536=>852,5537=>852,5538=>852,5539=>852,5540=>852,5541=>852,5542=>600,5543=>643,5544=>643,5545=>643,5546=>643,5547=>643,5548=>643,5549=>643,5550=>418,5551=>628,5598=>770,5601=>767,5702=>468,5703=>468,5742=>444,5743=>1047,5744=>1310,5745=>1632,5746=>1632,5747=>1375,5748=>1375,5749=>1632,5750=>1632,5760=>477,5761=>493,5762=>712,5763=>931,5764=>1150,5765=>1370,5766=>493,5767=>712,5768=>931,5769=>1150,5770=>1370,5771=>498,5772=>718,5773=>938,5774=>1159,5775=>1379,5776=>493,5777=>712,5778=>930,5779=>1149,5780=>1370,5781=>498,5782=>752,5783=>789,5784=>1205,5785=>1150,5786=>683,5787=>507,5788=>507,7424=>592,7425=>717,7426=>982,7427=>586,7428=>550,7429=>605,7430=>605,7431=>491,7432=>541,7433=>278,7434=>395,7435=>579,7436=>583,7437=>754,7438=>650,7439=>612,7440=>550,7441=>684,7442=>684,7443=>684,7444=>1023,7446=>612,7447=>612,7448=>524,7449=>602,7450=>602,7451=>583,7452=>574,7453=>737,7454=>948,7455=>638,7456=>592,7457=>818,7458=>525,7459=>526,7462=>583,7463=>592,7464=>564,7465=>524,7466=>590,7467=>639,7468=>431,7469=>613,7470=>432,7472=>485,7473=>398,7474=>398,7475=>488,7476=>474,7477=>186,7478=>186,7479=>413,7480=>351,7481=>543,7482=>471,7483=>471,7484=>496,7485=>439,7486=>380,7487=>438,7488=>385,7489=>461,7490=>623,7491=>392,7492=>392,7493=>405,7494=>648,7495=>428,7496=>405,7497=>417,7498=>417,7499=>360,7500=>359,7501=>405,7502=>179,7503=>426,7504=>623,7505=>409,7506=>414,7507=>370,7508=>414,7509=>414,7510=>428,7511=>295,7512=>405,7513=>470,7514=>623,7515=>417,7517=>402,7518=>373,7519=>385,7520=>416,7521=>364,7522=>179,7523=>259,7524=>405,7525=>417,7526=>402,7527=>373,7528=>412,7529=>416,7530=>364,7543=>635,7544=>474,7547=>372,7549=>667,7557=>278,7579=>405,7580=>370,7581=>370,7582=>414,7583=>360,7584=>296,7585=>233,7586=>405,7587=>405,7588=>261,7589=>250,7590=>261,7591=>261,7592=>234,7593=>250,7594=>235,7595=>376,7596=>623,7597=>623,7598=>411,7599=>479,7600=>409,7601=>414,7602=>414,7603=>360,7604=>287,7605=>295,7606=>508,7607=>418,7608=>361,7609=>406,7610=>417,7611=>366,7612=>437,7613=>366,7614=>392,7615=>414,7620=>0,7621=>0,7622=>0,7623=>0,7624=>0,7625=>0,7680=>684,7681=>613,7682=>686,7683=>635,7684=>686,7685=>635,7686=>686,7687=>635,7688=>698,7689=>550,7690=>770,7691=>635,7692=>770,7693=>635,7694=>770,7695=>635,7696=>770,7697=>635,7698=>770,7699=>635,7700=>632,7701=>615,7702=>632,7703=>615,7704=>632,7705=>615,7706=>632,7707=>615,7708=>632,7709=>615,7710=>575,7711=>352,7712=>775,7713=>635,7714=>752,7715=>634,7716=>752,7717=>634,7718=>752,7719=>634,7720=>752,7721=>634,7722=>752,7723=>634,7724=>295,7725=>278,7726=>295,7727=>278,7728=>656,7729=>579,7730=>656,7731=>579,7732=>656,7733=>579,7734=>557,7735=>288,7736=>557,7737=>288,7738=>557,7739=>278,7740=>557,7741=>278,7742=>863,7743=>974,7744=>863,7745=>974,7746=>863,7747=>974,7748=>748,7749=>634,7750=>748,7751=>634,7752=>748,7753=>634,7754=>748,7755=>634,7756=>787,7757=>612,7758=>787,7759=>612,7760=>787,7761=>612,7762=>787,7763=>612,7764=>603,7765=>635,7766=>603,7767=>635,7768=>695,7769=>411,7770=>695,7771=>411,7772=>695,7773=>411,7774=>695,7775=>411,7776=>635,7777=>521,7778=>635,7779=>521,7780=>635,7781=>521,7782=>635,7783=>521,7784=>635,7785=>521,7786=>611,7787=>392,7788=>611,7789=>392,7790=>611,7791=>392,7792=>611,7793=>392,7794=>732,7795=>634,7796=>732,7797=>634,7798=>732,7799=>634,7800=>732,7801=>634,7802=>732,7803=>634,7804=>684,7805=>592,7806=>684,7807=>592,7808=>989,7809=>818,7810=>989,7811=>818,7812=>989,7813=>818,7814=>989,7815=>818,7816=>989,7817=>818,7818=>685,7819=>592,7820=>685,7821=>592,7822=>611,7823=>592,7824=>685,7825=>525,7826=>685,7827=>525,7828=>685,7829=>525,7830=>634,7831=>392,7832=>818,7833=>592,7834=>613,7835=>352,7836=>352,7837=>352,7838=>769,7839=>612,7840=>684,7841=>613,7842=>684,7843=>613,7844=>684,7845=>613,7846=>684,7847=>613,7848=>684,7849=>613,7850=>684,7851=>613,7852=>684,7853=>613,7854=>684,7855=>613,7856=>684,7857=>613,7858=>684,7859=>613,7860=>684,7861=>613,7862=>684,7863=>613,7864=>632,7865=>615,7866=>632,7867=>615,7868=>632,7869=>615,7870=>632,7871=>615,7872=>632,7873=>615,7874=>632,7875=>615,7876=>632,7877=>615,7878=>632,7879=>615,7880=>295,7881=>278,7882=>295,7883=>278,7884=>787,7885=>612,7886=>787,7887=>612,7888=>787,7889=>612,7890=>787,7891=>612,7892=>787,7893=>612,7894=>787,7895=>612,7896=>787,7897=>612,7898=>913,7899=>612,7900=>913,7901=>612,7902=>913,7903=>612,7904=>913,7905=>612,7906=>913,7907=>612,7908=>732,7909=>634,7910=>732,7911=>634,7912=>858,7913=>634,7914=>858,7915=>634,7916=>858,7917=>634,7918=>858,7919=>634,7920=>858,7921=>634,7922=>611,7923=>592,7924=>611,7925=>592,7926=>611,7927=>592,7928=>611,7929=>592,7930=>769,7931=>477,7936=>659,7937=>659,7938=>659,7939=>659,7940=>659,7941=>659,7942=>659,7943=>659,7944=>684,7945=>684,7946=>877,7947=>877,7948=>769,7949=>801,7950=>708,7951=>743,7952=>541,7953=>541,7954=>541,7955=>541,7956=>541,7957=>541,7960=>711,7961=>711,7962=>966,7963=>975,7964=>898,7965=>928,7968=>634,7969=>634,7970=>634,7971=>634,7972=>634,7973=>634,7974=>634,7975=>634,7976=>837,7977=>835,7978=>1086,7979=>1089,7980=>1027,7981=>1051,7982=>934,7983=>947,7984=>338,7985=>338,7986=>338,7987=>338,7988=>338,7989=>338,7990=>338,7991=>338,7992=>380,7993=>374,7994=>635,7995=>635,7996=>570,7997=>600,7998=>489,7999=>493,8000=>612,8001=>612,8002=>612,8003=>612,8004=>612,8005=>612,8008=>804,8009=>848,8010=>1095,8011=>1100,8012=>938,8013=>970,8016=>579,8017=>579,8018=>579,8019=>579,8020=>579,8021=>579,8022=>579,8023=>579,8025=>784,8027=>998,8029=>1012,8031=>897,8032=>837,8033=>837,8034=>837,8035=>837,8036=>837,8037=>837,8038=>837,8039=>837,8040=>802,8041=>843,8042=>1089,8043=>1095,8044=>946,8045=>972,8046=>921,8047=>952,8048=>659,8049=>659,8050=>541,8051=>548,8052=>634,8053=>654,8054=>338,8055=>338,8056=>612,8057=>612,8058=>579,8059=>579,8060=>837,8061=>837,8064=>659,8065=>659,8066=>659,8067=>659,8068=>659,8069=>659,8070=>659,8071=>659,8072=>684,8073=>684,8074=>877,8075=>877,8076=>769,8077=>801,8078=>708,8079=>743,8080=>634,8081=>634,8082=>634,8083=>634,8084=>634,8085=>634,8086=>634,8087=>634,8088=>837,8089=>835,8090=>1086,8091=>1089,8092=>1027,8093=>1051,8094=>934,8095=>947,8096=>837,8097=>837,8098=>837,8099=>837,8100=>837,8101=>837,8102=>837,8103=>837,8104=>802,8105=>843,8106=>1089,8107=>1095,8108=>946,8109=>972,8110=>921,8111=>952,8112=>659,8113=>659,8114=>659,8115=>659,8116=>659,8118=>659,8119=>659,8120=>684,8121=>684,8122=>716,8123=>692,8124=>684,8125=>500,8126=>500,8127=>500,8128=>500,8129=>500,8130=>634,8131=>634,8132=>654,8134=>634,8135=>634,8136=>805,8137=>746,8138=>931,8139=>871,8140=>752,8141=>500,8142=>500,8143=>500,8144=>338,8145=>338,8146=>338,8147=>338,8150=>338,8151=>338,8152=>295,8153=>295,8154=>475,8155=>408,8157=>500,8158=>500,8159=>500,8160=>579,8161=>579,8162=>579,8163=>579,8164=>635,8165=>635,8166=>579,8167=>579,8168=>611,8169=>611,8170=>845,8171=>825,8172=>685,8173=>500,8174=>500,8175=>500,8178=>837,8179=>837,8180=>837,8182=>837,8183=>837,8184=>941,8185=>813,8186=>922,8187=>826,8188=>764,8189=>500,8190=>500,8192=>500,8193=>1000,8194=>500,8195=>1000,8196=>330,8197=>250,8198=>167,8199=>636,8200=>318,8201=>200,8202=>100,8203=>0,8204=>0,8205=>0,8206=>0,8207=>0,8208=>361,8209=>361,8210=>636,8211=>500,8212=>1000,8213=>1000,8214=>500,8215=>500,8216=>318,8217=>318,8218=>318,8219=>318,8220=>518,8221=>518,8222=>518,8223=>518,8224=>500,8225=>500,8226=>590,8227=>590,8228=>334,8229=>667,8230=>1000,8231=>318,8232=>0,8233=>0,8234=>0,8235=>0,8236=>0,8237=>0,8238=>0,8239=>200,8240=>1342,8241=>1735,8242=>227,8243=>374,8244=>520,8245=>227,8246=>374,8247=>520,8248=>339,8249=>400,8250=>400,8251=>838,8252=>485,8253=>531,8254=>500,8255=>804,8256=>804,8257=>250,8258=>1000,8259=>500,8260=>167,8261=>390,8262=>390,8263=>922,8264=>733,8265=>733,8266=>497,8267=>636,8268=>500,8269=>500,8270=>500,8271=>337,8272=>804,8273=>500,8274=>450,8275=>1000,8276=>804,8277=>838,8278=>586,8279=>663,8280=>838,8281=>838,8282=>318,8283=>797,8284=>838,8285=>318,8286=>318,8287=>222,8288=>0,8289=>0,8290=>0,8291=>0,8292=>0,8298=>0,8299=>0,8300=>0,8301=>0,8302=>0,8303=>0,8304=>401,8305=>179,8308=>401,8309=>401,8310=>401,8311=>401,8312=>401,8313=>401,8314=>528,8315=>528,8316=>528,8317=>246,8318=>246,8319=>398,8320=>401,8321=>401,8322=>401,8323=>401,8324=>401,8325=>401,8326=>401,8327=>401,8328=>401,8329=>401,8330=>528,8331=>528,8332=>528,8333=>246,8334=>246,8336=>392,8337=>417,8338=>414,8339=>444,8340=>417,8341=>404,8342=>426,8343=>166,8344=>623,8345=>398,8346=>428,8347=>373,8348=>295,8352=>877,8353=>636,8354=>636,8355=>636,8356=>636,8357=>974,8358=>748,8359=>1272,8360=>1074,8361=>989,8362=>784,8363=>636,8364=>636,8365=>636,8366=>636,8367=>1272,8368=>636,8369=>636,8370=>636,8371=>636,8372=>774,8373=>636,8376=>636,8377=>636,8400=>0,8401=>0,8406=>0,8407=>0,8411=>0,8412=>0,8417=>0,8448=>1019,8449=>1019,8450=>698,8451=>1123,8452=>642,8453=>1019,8454=>1067,8455=>614,8456=>698,8457=>952,8459=>988,8460=>754,8461=>850,8462=>634,8463=>634,8464=>470,8465=>697,8466=>720,8467=>413,8468=>818,8469=>801,8470=>1040,8471=>1000,8472=>697,8473=>701,8474=>787,8475=>798,8476=>814,8477=>792,8478=>896,8479=>684,8480=>1020,8481=>1074,8482=>1000,8483=>684,8484=>745,8485=>578,8486=>764,8487=>764,8488=>616,8489=>338,8490=>656,8491=>684,8492=>786,8493=>703,8494=>854,8495=>592,8496=>605,8497=>786,8498=>575,8499=>1069,8500=>462,8501=>745,8502=>674,8503=>466,8504=>645,8505=>380,8506=>926,8507=>1194,8508=>702,8509=>728,8510=>654,8511=>849,8512=>811,8513=>775,8514=>557,8515=>557,8516=>611,8517=>819,8518=>708,8519=>615,8520=>351,8521=>351,8523=>780,8526=>526,8528=>969,8529=>969,8530=>1370,8531=>969,8532=>969,8533=>969,8534=>969,8535=>969,8536=>969,8537=>969,8538=>969,8539=>969,8540=>969,8541=>969,8542=>969,8543=>568,8544=>295,8545=>492,8546=>689,8547=>923,8548=>684,8549=>922,8550=>1120,8551=>1317,8552=>917,8553=>685,8554=>933,8555=>1131,8556=>557,8557=>698,8558=>770,8559=>863,8560=>278,8561=>458,8562=>637,8563=>812,8564=>592,8565=>811,8566=>991,8567=>1170,8568=>819,8569=>592,8570=>822,8571=>1002,8572=>278,8573=>550,8574=>635,8575=>974,8576=>1245,8577=>770,8578=>1245,8579=>703,8580=>549,8581=>698,8585=>969,8592=>838,8593=>838,8594=>838,8595=>838,8596=>838,8597=>838,8598=>838,8599=>838,8600=>838,8601=>838,8602=>838,8603=>838,8604=>838,8605=>838,8606=>838,8607=>838,8608=>838,8609=>838,8610=>838,8611=>838,8612=>838,8613=>838,8614=>838,8615=>838,8616=>838,8617=>838,8618=>838,8619=>838,8620=>838,8621=>838,8622=>838,8623=>838,8624=>838,8625=>838,8626=>838,8627=>838,8628=>838,8629=>838,8630=>838,8631=>838,8632=>838,8633=>838,8634=>838,8635=>838,8636=>838,8637=>838,8638=>838,8639=>838,8640=>838,8641=>838,8642=>838,8643=>838,8644=>838,8645=>838,8646=>838,8647=>838,8648=>838,8649=>838,8650=>838,8651=>838,8652=>838,8653=>838,8654=>838,8655=>838,8656=>838,8657=>838,8658=>838,8659=>838,8660=>838,8661=>838,8662=>838,8663=>838,8664=>838,8665=>838,8666=>838,8667=>838,8668=>838,8669=>838,8670=>838,8671=>838,8672=>838,8673=>838,8674=>838,8675=>838,8676=>838,8677=>838,8678=>838,8679=>838,8680=>838,8681=>838,8682=>838,8683=>838,8684=>838,8685=>838,8686=>838,8687=>838,8688=>838,8689=>838,8690=>838,8691=>838,8692=>838,8693=>838,8694=>838,8695=>838,8696=>838,8697=>838,8698=>838,8699=>838,8700=>838,8701=>838,8702=>838,8703=>838,8704=>684,8705=>636,8706=>517,8707=>632,8708=>632,8709=>871,8710=>669,8711=>669,8712=>871,8713=>871,8714=>718,8715=>871,8716=>871,8717=>718,8718=>636,8719=>757,8720=>757,8721=>674,8722=>838,8723=>838,8724=>838,8725=>337,8726=>637,8727=>838,8728=>626,8729=>626,8730=>637,8731=>637,8732=>637,8733=>714,8734=>833,8735=>838,8736=>896,8737=>896,8738=>838,8739=>500,8740=>500,8741=>500,8742=>500,8743=>732,8744=>732,8745=>732,8746=>732,8747=>521,8748=>789,8749=>1057,8750=>521,8751=>789,8752=>1057,8753=>521,8754=>521,8755=>521,8756=>636,8757=>636,8758=>260,8759=>636,8760=>838,8761=>838,8762=>838,8763=>838,8764=>838,8765=>838,8766=>838,8767=>838,8768=>375,8769=>838,8770=>838,8771=>838,8772=>838,8773=>838,8774=>838,8775=>838,8776=>838,8777=>838,8778=>838,8779=>838,8780=>838,8781=>838,8782=>838,8783=>838,8784=>838,8785=>838,8786=>839,8787=>839,8788=>1000,8789=>1000,8790=>838,8791=>838,8792=>838,8793=>838,8794=>838,8795=>838,8796=>838,8797=>838,8798=>838,8799=>838,8800=>838,8801=>838,8802=>838,8803=>838,8804=>838,8805=>838,8806=>838,8807=>838,8808=>838,8809=>838,8810=>1047,8811=>1047,8812=>464,8813=>838,8814=>838,8815=>838,8816=>838,8817=>838,8818=>838,8819=>838,8820=>838,8821=>838,8822=>838,8823=>838,8824=>838,8825=>838,8826=>838,8827=>838,8828=>838,8829=>838,8830=>838,8831=>838,8832=>838,8833=>838,8834=>838,8835=>838,8836=>838,8837=>838,8838=>838,8839=>838,8840=>838,8841=>838,8842=>838,8843=>838,8844=>732,8845=>732,8846=>732,8847=>838,8848=>838,8849=>838,8850=>838,8851=>780,8852=>780,8853=>838,8854=>838,8855=>838,8856=>838,8857=>838,8858=>838,8859=>838,8860=>838,8861=>838,8862=>838,8863=>838,8864=>838,8865=>838,8866=>871,8867=>871,8868=>871,8869=>871,8870=>521,8871=>521,8872=>871,8873=>871,8874=>871,8875=>871,8876=>871,8877=>871,8878=>871,8879=>871,8880=>838,8881=>838,8882=>838,8883=>838,8884=>838,8885=>838,8886=>1000,8887=>1000,8888=>838,8889=>838,8890=>521,8891=>732,8892=>732,8893=>732,8894=>838,8895=>838,8896=>820,8897=>820,8898=>820,8899=>820,8900=>494,8901=>318,8902=>626,8903=>838,8904=>1000,8905=>1000,8906=>1000,8907=>1000,8908=>1000,8909=>838,8910=>732,8911=>732,8912=>838,8913=>838,8914=>838,8915=>838,8916=>838,8917=>838,8918=>838,8919=>838,8920=>1422,8921=>1422,8922=>838,8923=>838,8924=>838,8925=>838,8926=>838,8927=>838,8928=>838,8929=>838,8930=>838,8931=>838,8932=>838,8933=>838,8934=>838,8935=>838,8936=>838,8937=>838,8938=>838,8939=>838,8940=>838,8941=>838,8942=>1000,8943=>1000,8944=>1000,8945=>1000,8946=>1000,8947=>871,8948=>718,8949=>871,8950=>871,8951=>718,8952=>871,8953=>871,8954=>1000,8955=>871,8956=>718,8957=>871,8958=>718,8959=>871,8960=>602,8961=>602,8962=>635,8963=>838,8964=>838,8965=>838,8966=>838,8967=>488,8968=>390,8969=>390,8970=>390,8971=>390,8972=>809,8973=>809,8974=>809,8975=>809,8976=>838,8977=>513,8984=>1000,8985=>838,8988=>469,8989=>469,8990=>469,8991=>469,8992=>521,8993=>521,8996=>1152,8997=>1152,8998=>1414,8999=>1152,9000=>1443,9003=>1414,9004=>873,9075=>338,9076=>635,9077=>837,9082=>659,9085=>757,9095=>1152,9108=>873,9115=>500,9116=>500,9117=>500,9118=>500,9119=>500,9120=>500,9121=>500,9122=>500,9123=>500,9124=>500,9125=>500,9126=>500,9127=>750,9128=>750,9129=>750,9130=>750,9131=>750,9132=>750,9133=>750,9134=>521,9166=>838,9167=>945,9187=>873,9189=>769,9192=>636,9250=>635,9251=>635,9312=>896,9313=>896,9314=>896,9315=>896,9316=>896,9317=>896,9318=>896,9319=>896,9320=>896,9321=>896,9472=>602,9473=>602,9474=>602,9475=>602,9476=>602,9477=>602,9478=>602,9479=>602,9480=>602,9481=>602,9482=>602,9483=>602,9484=>602,9485=>602,9486=>602,9487=>602,9488=>602,9489=>602,9490=>602,9491=>602,9492=>602,9493=>602,9494=>602,9495=>602,9496=>602,9497=>602,9498=>602,9499=>602,9500=>602,9501=>602,9502=>602,9503=>602,9504=>602,9505=>602,9506=>602,9507=>602,9508=>602,9509=>602,9510=>602,9511=>602,9512=>602,9513=>602,9514=>602,9515=>602,9516=>602,9517=>602,9518=>602,9519=>602,9520=>602,9521=>602,9522=>602,9523=>602,9524=>602,9525=>602,9526=>602,9527=>602,9528=>602,9529=>602,9530=>602,9531=>602,9532=>602,9533=>602,9534=>602,9535=>602,9536=>602,9537=>602,9538=>602,9539=>602,9540=>602,9541=>602,9542=>602,9543=>602,9544=>602,9545=>602,9546=>602,9547=>602,9548=>602,9549=>602,9550=>602,9551=>602,9552=>602,9553=>602,9554=>602,9555=>602,9556=>602,9557=>602,9558=>602,9559=>602,9560=>602,9561=>602,9562=>602,9563=>602,9564=>602,9565=>602,9566=>602,9567=>602,9568=>602,9569=>602,9570=>602,9571=>602,9572=>602,9573=>602,9574=>602,9575=>602,9576=>602,9577=>602,9578=>602,9579=>602,9580=>602,9581=>602,9582=>602,9583=>602,9584=>602,9585=>602,9586=>602,9587=>602,9588=>602,9589=>602,9590=>602,9591=>602,9592=>602,9593=>602,9594=>602,9595=>602,9596=>602,9597=>602,9598=>602,9599=>602,9600=>769,9601=>769,9602=>769,9603=>769,9604=>769,9605=>769,9606=>769,9607=>769,9608=>769,9609=>769,9610=>769,9611=>769,9612=>769,9613=>769,9614=>769,9615=>769,9616=>769,9617=>769,9618=>769,9619=>769,9620=>769,9621=>769,9622=>769,9623=>769,9624=>769,9625=>769,9626=>769,9627=>769,9628=>769,9629=>769,9630=>769,9631=>769,9632=>945,9633=>945,9634=>945,9635=>945,9636=>945,9637=>945,9638=>945,9639=>945,9640=>945,9641=>945,9642=>678,9643=>678,9644=>945,9645=>945,9646=>550,9647=>550,9648=>769,9649=>769,9650=>769,9651=>769,9652=>502,9653=>502,9654=>769,9655=>769,9656=>502,9657=>502,9658=>769,9659=>769,9660=>769,9661=>769,9662=>502,9663=>502,9664=>769,9665=>769,9666=>502,9667=>502,9668=>769,9669=>769,9670=>769,9671=>769,9672=>769,9673=>873,9674=>494,9675=>873,9676=>873,9677=>873,9678=>873,9679=>873,9680=>873,9681=>873,9682=>873,9683=>873,9684=>873,9685=>873,9686=>527,9687=>527,9688=>791,9689=>970,9690=>970,9691=>970,9692=>387,9693=>387,9694=>387,9695=>387,9696=>873,9697=>873,9698=>769,9699=>769,9700=>769,9701=>769,9702=>590,9703=>945,9704=>945,9705=>945,9706=>945,9707=>945,9708=>769,9709=>769,9710=>769,9711=>1119,9712=>945,9713=>945,9714=>945,9715=>945,9716=>873,9717=>873,9718=>873,9719=>873,9720=>769,9721=>769,9722=>769,9723=>830,9724=>830,9725=>732,9726=>732,9727=>769,9728=>896,9729=>1000,9730=>896,9731=>896,9732=>896,9733=>896,9734=>896,9735=>573,9736=>896,9737=>896,9738=>888,9739=>888,9740=>671,9741=>1013,9742=>1246,9743=>1250,9744=>896,9745=>896,9746=>896,9747=>532,9748=>896,9749=>896,9750=>896,9751=>896,9752=>896,9753=>896,9754=>896,9755=>896,9756=>896,9757=>609,9758=>896,9759=>609,9760=>896,9761=>896,9762=>896,9763=>896,9764=>669,9765=>746,9766=>649,9767=>784,9768=>545,9769=>896,9770=>896,9771=>896,9772=>710,9773=>896,9774=>896,9775=>896,9776=>896,9777=>896,9778=>896,9779=>896,9780=>896,9781=>896,9782=>896,9783=>896,9784=>896,9785=>1042,9786=>1042,9787=>1042,9788=>896,9789=>896,9790=>896,9791=>614,9792=>732,9793=>732,9794=>896,9795=>896,9796=>896,9797=>896,9798=>896,9799=>896,9800=>896,9801=>896,9802=>896,9803=>896,9804=>896,9805=>896,9806=>896,9807=>896,9808=>896,9809=>896,9810=>896,9811=>896,9812=>896,9813=>896,9814=>896,9815=>896,9816=>896,9817=>896,9818=>896,9819=>896,9820=>896,9821=>896,9822=>896,9823=>896,9824=>896,9825=>896,9826=>896,9827=>896,9828=>896,9829=>896,9830=>896,9831=>896,9832=>896,9833=>472,9834=>638,9835=>896,9836=>896,9837=>472,9838=>357,9839=>484,9840=>748,9841=>766,9842=>896,9843=>896,9844=>896,9845=>896,9846=>896,9847=>896,9848=>896,9849=>896,9850=>896,9851=>896,9852=>896,9853=>896,9854=>896,9855=>896,9856=>869,9857=>869,9858=>869,9859=>869,9860=>869,9861=>869,9862=>896,9863=>896,9864=>896,9865=>896,9866=>896,9867=>896,9868=>896,9869=>896,9870=>896,9871=>896,9872=>896,9873=>896,9874=>896,9875=>896,9876=>896,9877=>541,9878=>896,9879=>896,9880=>896,9881=>896,9882=>896,9883=>896,9884=>896,9888=>896,9889=>702,9890=>1004,9891=>1089,9892=>1175,9893=>903,9894=>838,9895=>838,9896=>838,9897=>838,9898=>838,9899=>838,9900=>838,9901=>838,9902=>838,9903=>838,9904=>844,9905=>838,9906=>732,9907=>732,9908=>732,9909=>732,9910=>850,9911=>732,9912=>732,9920=>838,9921=>838,9922=>838,9923=>838,9954=>732,9985=>838,9986=>838,9987=>838,9988=>838,9990=>838,9991=>838,9992=>838,9993=>838,9996=>838,9997=>838,9998=>838,9999=>838,10000=>838,10001=>838,10002=>838,10003=>838,10004=>838,10005=>838,10006=>838,10007=>838,10008=>838,10009=>838,10010=>838,10011=>838,10012=>838,10013=>838,10014=>838,10015=>838,10016=>838,10017=>838,10018=>838,10019=>838,10020=>838,10021=>838,10022=>838,10023=>838,10025=>838,10026=>838,10027=>838,10028=>838,10029=>838,10030=>838,10031=>838,10032=>838,10033=>838,10034=>838,10035=>838,10036=>838,10037=>838,10038=>838,10039=>838,10040=>838,10041=>838,10042=>838,10043=>838,10044=>838,10045=>838,10046=>838,10047=>838,10048=>838,10049=>838,10050=>838,10051=>838,10052=>838,10053=>838,10054=>838,10055=>838,10056=>838,10057=>838,10058=>838,10059=>838,10061=>896,10063=>896,10064=>896,10065=>896,10066=>896,10070=>896,10072=>838,10073=>838,10074=>838,10075=>322,10076=>322,10077=>538,10078=>538,10081=>838,10082=>838,10083=>838,10084=>838,10085=>838,10086=>838,10087=>838,10088=>838,10089=>838,10090=>838,10091=>838,10092=>838,10093=>838,10094=>838,10095=>838,10096=>838,10097=>838,10098=>838,10099=>838,10100=>838,10101=>838,10102=>896,10103=>896,10104=>896,10105=>896,10106=>896,10107=>896,10108=>896,10109=>896,10110=>896,10111=>896,10112=>838,10113=>838,10114=>838,10115=>838,10116=>838,10117=>838,10118=>838,10119=>838,10120=>838,10121=>838,10122=>838,10123=>838,10124=>838,10125=>838,10126=>838,10127=>838,10128=>838,10129=>838,10130=>838,10131=>838,10132=>838,10136=>838,10137=>838,10138=>838,10139=>838,10140=>838,10141=>838,10142=>838,10143=>838,10144=>838,10145=>838,10146=>838,10147=>838,10148=>838,10149=>838,10150=>838,10151=>838,10152=>838,10153=>838,10154=>838,10155=>838,10156=>838,10157=>838,10158=>838,10159=>838,10161=>838,10162=>838,10163=>838,10164=>838,10165=>838,10166=>838,10167=>838,10168=>838,10169=>838,10170=>838,10171=>838,10172=>838,10173=>838,10174=>838,10181=>390,10182=>390,10208=>494,10214=>495,10215=>495,10216=>390,10217=>390,10218=>556,10219=>556,10224=>838,10225=>838,10226=>838,10227=>838,10228=>1157,10229=>1434,10230=>1434,10231=>1434,10232=>1434,10233=>1434,10234=>1434,10235=>1434,10236=>1434,10237=>1434,10238=>1434,10239=>1434,10240=>732,10241=>732,10242=>732,10243=>732,10244=>732,10245=>732,10246=>732,10247=>732,10248=>732,10249=>732,10250=>732,10251=>732,10252=>732,10253=>732,10254=>732,10255=>732,10256=>732,10257=>732,10258=>732,10259=>732,10260=>732,10261=>732,10262=>732,10263=>732,10264=>732,10265=>732,10266=>732,10267=>732,10268=>732,10269=>732,10270=>732,10271=>732,10272=>732,10273=>732,10274=>732,10275=>732,10276=>732,10277=>732,10278=>732,10279=>732,10280=>732,10281=>732,10282=>732,10283=>732,10284=>732,10285=>732,10286=>732,10287=>732,10288=>732,10289=>732,10290=>732,10291=>732,10292=>732,10293=>732,10294=>732,10295=>732,10296=>732,10297=>732,10298=>732,10299=>732,10300=>732,10301=>732,10302=>732,10303=>732,10304=>732,10305=>732,10306=>732,10307=>732,10308=>732,10309=>732,10310=>732,10311=>732,10312=>732,10313=>732,10314=>732,10315=>732,10316=>732,10317=>732,10318=>732,10319=>732,10320=>732,10321=>732,10322=>732,10323=>732,10324=>732,10325=>732,10326=>732,10327=>732,10328=>732,10329=>732,10330=>732,10331=>732,10332=>732,10333=>732,10334=>732,10335=>732,10336=>732,10337=>732,10338=>732,10339=>732,10340=>732,10341=>732,10342=>732,10343=>732,10344=>732,10345=>732,10346=>732,10347=>732,10348=>732,10349=>732,10350=>732,10351=>732,10352=>732,10353=>732,10354=>732,10355=>732,10356=>732,10357=>732,10358=>732,10359=>732,10360=>732,10361=>732,10362=>732,10363=>732,10364=>732,10365=>732,10366=>732,10367=>732,10368=>732,10369=>732,10370=>732,10371=>732,10372=>732,10373=>732,10374=>732,10375=>732,10376=>732,10377=>732,10378=>732,10379=>732,10380=>732,10381=>732,10382=>732,10383=>732,10384=>732,10385=>732,10386=>732,10387=>732,10388=>732,10389=>732,10390=>732,10391=>732,10392=>732,10393=>732,10394=>732,10395=>732,10396=>732,10397=>732,10398=>732,10399=>732,10400=>732,10401=>732,10402=>732,10403=>732,10404=>732,10405=>732,10406=>732,10407=>732,10408=>732,10409=>732,10410=>732,10411=>732,10412=>732,10413=>732,10414=>732,10415=>732,10416=>732,10417=>732,10418=>732,10419=>732,10420=>732,10421=>732,10422=>732,10423=>732,10424=>732,10425=>732,10426=>732,10427=>732,10428=>732,10429=>732,10430=>732,10431=>732,10432=>732,10433=>732,10434=>732,10435=>732,10436=>732,10437=>732,10438=>732,10439=>732,10440=>732,10441=>732,10442=>732,10443=>732,10444=>732,10445=>732,10446=>732,10447=>732,10448=>732,10449=>732,10450=>732,10451=>732,10452=>732,10453=>732,10454=>732,10455=>732,10456=>732,10457=>732,10458=>732,10459=>732,10460=>732,10461=>732,10462=>732,10463=>732,10464=>732,10465=>732,10466=>732,10467=>732,10468=>732,10469=>732,10470=>732,10471=>732,10472=>732,10473=>732,10474=>732,10475=>732,10476=>732,10477=>732,10478=>732,10479=>732,10480=>732,10481=>732,10482=>732,10483=>732,10484=>732,10485=>732,10486=>732,10487=>732,10488=>732,10489=>732,10490=>732,10491=>732,10492=>732,10493=>732,10494=>732,10495=>732,10502=>838,10503=>838,10506=>838,10507=>838,10560=>683,10561=>683,10627=>734,10628=>734,10702=>838,10703=>1000,10704=>1000,10705=>1000,10706=>1000,10707=>1000,10708=>1000,10709=>1000,10731=>494,10746=>838,10747=>838,10752=>1000,10753=>1000,10754=>1000,10764=>1325,10765=>521,10766=>521,10767=>521,10768=>521,10769=>521,10770=>521,10771=>521,10772=>521,10773=>521,10774=>521,10775=>521,10776=>521,10777=>521,10778=>521,10779=>521,10780=>521,10799=>838,10877=>838,10878=>838,10879=>838,10880=>838,10881=>838,10882=>838,10883=>838,10884=>838,10885=>838,10886=>838,10887=>838,10888=>838,10889=>838,10890=>838,10891=>838,10892=>838,10893=>838,10894=>838,10895=>838,10896=>838,10897=>838,10898=>838,10899=>838,10900=>838,10901=>838,10902=>838,10903=>838,10904=>838,10905=>838,10906=>838,10907=>838,10908=>838,10909=>838,10910=>838,10911=>838,10912=>838,10926=>838,10927=>838,10928=>838,10929=>838,10930=>838,10931=>838,10932=>838,10933=>838,10934=>838,10935=>838,10936=>838,10937=>838,10938=>838,11001=>838,11002=>838,11008=>838,11009=>838,11010=>838,11011=>838,11012=>838,11013=>838,11014=>838,11015=>838,11016=>838,11017=>838,11018=>838,11019=>838,11020=>838,11021=>838,11022=>836,11023=>836,11024=>836,11025=>836,11026=>945,11027=>945,11028=>945,11029=>945,11030=>769,11031=>769,11032=>769,11033=>769,11034=>945,11039=>869,11040=>869,11041=>873,11042=>873,11043=>873,11044=>1119,11091=>869,11092=>869,11360=>557,11361=>278,11362=>557,11363=>603,11364=>695,11365=>613,11366=>392,11367=>752,11368=>634,11369=>656,11370=>579,11371=>685,11372=>525,11373=>781,11374=>863,11375=>684,11376=>781,11377=>734,11378=>1128,11379=>961,11380=>592,11381=>654,11382=>568,11383=>660,11385=>414,11386=>612,11387=>491,11388=>175,11389=>431,11390=>635,11391=>685,11568=>646,11569=>888,11570=>888,11571=>682,11572=>684,11573=>635,11574=>562,11575=>684,11576=>684,11577=>632,11578=>632,11579=>683,11580=>875,11581=>685,11582=>491,11583=>685,11584=>888,11585=>888,11586=>300,11587=>627,11588=>752,11589=>656,11590=>527,11591=>685,11592=>645,11593=>632,11594=>502,11595=>953,11596=>778,11597=>748,11598=>621,11599=>295,11600=>778,11601=>295,11602=>752,11603=>633,11604=>888,11605=>888,11606=>752,11607=>320,11608=>749,11609=>888,11610=>888,11611=>698,11612=>768,11613=>685,11614=>698,11615=>622,11616=>684,11617=>752,11618=>632,11619=>788,11620=>567,11621=>788,11631=>515,11800=>531,11810=>390,11811=>390,11812=>390,11813=>390,11822=>531,19904=>896,19905=>896,19906=>896,19907=>896,19908=>896,19909=>896,19910=>896,19911=>896,19912=>896,19913=>896,19914=>896,19915=>896,19916=>896,19917=>896,19918=>896,19919=>896,19920=>896,19921=>896,19922=>896,19923=>896,19924=>896,19925=>896,19926=>896,19927=>896,19928=>896,19929=>896,19930=>896,19931=>896,19932=>896,19933=>896,19934=>896,19935=>896,19936=>896,19937=>896,19938=>896,19939=>896,19940=>896,19941=>896,19942=>896,19943=>896,19944=>896,19945=>896,19946=>896,19947=>896,19948=>896,19949=>896,19950=>896,19951=>896,19952=>896,19953=>896,19954=>896,19955=>896,19956=>896,19957=>896,19958=>896,19959=>896,19960=>896,19961=>896,19962=>896,19963=>896,19964=>896,19965=>896,19966=>896,19967=>896,42564=>635,42565=>521,42566=>354,42567=>338,42572=>1180,42573=>1028,42576=>1029,42577=>906,42580=>1080,42581=>842,42582=>977,42583=>843,42594=>1062,42595=>912,42596=>1066,42597=>901,42598=>1178,42599=>1008,42600=>787,42601=>612,42602=>855,42603=>712,42604=>1358,42605=>1019,42606=>879,42634=>782,42635=>685,42636=>611,42637=>583,42644=>686,42645=>634,42760=>493,42761=>493,42762=>493,42763=>493,42764=>493,42765=>493,42766=>493,42767=>493,42768=>493,42769=>493,42770=>493,42771=>493,42772=>493,42773=>493,42774=>493,42779=>369,42780=>369,42781=>252,42782=>252,42783=>252,42786=>385,42787=>356,42788=>472,42789=>472,42790=>752,42791=>634,42792=>878,42793=>709,42794=>614,42795=>541,42800=>491,42801=>521,42802=>1250,42803=>985,42804=>1203,42805=>990,42806=>1142,42807=>981,42808=>971,42809=>818,42810=>971,42811=>818,42812=>959,42813=>818,42814=>703,42815=>549,42822=>680,42823=>392,42824=>582,42825=>427,42826=>807,42827=>704,42830=>1358,42831=>1019,42832=>603,42833=>635,42834=>734,42835=>774,42838=>787,42839=>635,42852=>605,42853=>635,42854=>605,42855=>635,42880=>557,42881=>278,42882=>735,42883=>634,42889=>337,42890=>376,42891=>401,42892=>275,42893=>686,42894=>487,42896=>772,42897=>667,43002=>915,43003=>575,43004=>603,43005=>863,43006=>295,43007=>1199,61184=>213,61185=>238,61186=>257,61187=>264,61188=>267,61189=>238,61190=>213,61191=>238,61192=>257,61193=>264,61194=>257,61195=>238,61196=>213,61197=>238,61198=>257,61199=>264,61200=>257,61201=>238,61202=>213,61203=>238,61204=>267,61205=>264,61206=>257,61207=>238,61208=>213,61209=>275,61440=>977,61441=>977,61442=>977,61443=>977,63173=>612,64256=>689,64257=>630,64258=>630,64259=>967,64260=>967,64261=>686,64262=>861,64275=>1202,64276=>1202,64277=>1196,64278=>1186,64279=>1529,64285=>224,64286=>0,64287=>331,64288=>636,64289=>856,64290=>774,64291=>906,64292=>771,64293=>843,64294=>855,64295=>807,64296=>875,64297=>838,64298=>708,64299=>708,64300=>708,64301=>708,64302=>668,64303=>668,64304=>668,64305=>578,64306=>412,64307=>546,64308=>653,64309=>355,64310=>406,64312=>648,64313=>330,64314=>537,64315=>529,64316=>568,64318=>679,64320=>399,64321=>649,64323=>640,64324=>625,64326=>593,64327=>709,64328=>564,64329=>708,64330=>657,64331=>272,64332=>578,64333=>529,64334=>625,64335=>629,64338=>941,64339=>982,64340=>278,64341=>302,64342=>941,64343=>982,64344=>278,64345=>302,64346=>941,64347=>982,64348=>278,64349=>302,64350=>941,64351=>982,64352=>278,64353=>302,64354=>941,64355=>982,64356=>278,64357=>302,64358=>941,64359=>982,64360=>278,64361=>302,64362=>1037,64363=>1035,64364=>478,64365=>506,64366=>1037,64367=>1035,64368=>478,64369=>506,64370=>646,64371=>646,64372=>618,64373=>646,64374=>646,64375=>646,64376=>618,64377=>646,64378=>646,64379=>646,64380=>618,64381=>646,64382=>646,64383=>646,64384=>618,64385=>646,64386=>445,64387=>525,64388=>445,64389=>525,64390=>445,64391=>525,64392=>445,64393=>525,64394=>483,64395=>552,64396=>483,64397=>552,64398=>895,64399=>895,64400=>476,64401=>552,64402=>895,64403=>895,64404=>476,64405=>552,64406=>895,64407=>895,64408=>476,64409=>552,64410=>895,64411=>895,64412=>476,64413=>552,64414=>734,64415=>761,64416=>734,64417=>761,64418=>278,64419=>302,64426=>698,64427=>632,64428=>527,64429=>461,64467=>824,64468=>843,64469=>476,64470=>552,64473=>483,64474=>517,64488=>278,64489=>302,64508=>783,64509=>833,64510=>278,64511=>302,65024=>0,65025=>0,65026=>0,65027=>0,65028=>0,65029=>0,65030=>0,65031=>0,65032=>0,65033=>0,65034=>0,65035=>0,65036=>0,65037=>0,65038=>0,65039=>0,65056=>0,65057=>0,65058=>0,65059=>0,65136=>293,65137=>293,65138=>293,65139=>262,65140=>293,65142=>293,65143=>293,65144=>293,65145=>293,65146=>293,65147=>293,65148=>293,65149=>293,65150=>293,65151=>293,65152=>470,65153=>278,65154=>305,65155=>278,65156=>305,65157=>483,65158=>517,65159=>278,65160=>305,65161=>783,65162=>833,65163=>278,65164=>302,65165=>278,65166=>305,65167=>941,65168=>982,65169=>278,65170=>302,65171=>524,65172=>536,65173=>941,65174=>982,65175=>278,65176=>302,65177=>941,65178=>982,65179=>278,65180=>302,65181=>646,65182=>646,65183=>618,65184=>646,65185=>646,65186=>646,65187=>618,65188=>646,65189=>646,65190=>646,65191=>618,65192=>646,65193=>445,65194=>525,65195=>445,65196=>525,65197=>483,65198=>552,65199=>483,65200=>552,65201=>1221,65202=>1275,65203=>838,65204=>892,65205=>1221,65206=>1275,65207=>838,65208=>892,65209=>1209,65210=>1225,65211=>849,65212=>867,65213=>1209,65214=>1225,65215=>849,65216=>867,65217=>925,65218=>949,65219=>796,65220=>820,65221=>925,65222=>949,65223=>796,65224=>820,65225=>597,65226=>532,65227=>597,65228=>482,65229=>597,65230=>532,65231=>523,65232=>482,65233=>1037,65234=>1035,65235=>478,65236=>506,65237=>776,65238=>834,65239=>478,65240=>506,65241=>824,65242=>843,65243=>476,65244=>552,65245=>727,65246=>757,65247=>305,65248=>331,65249=>619,65250=>666,65251=>536,65252=>578,65253=>734,65254=>761,65255=>278,65256=>302,65257=>524,65258=>536,65259=>527,65260=>461,65261=>483,65262=>517,65263=>783,65264=>833,65265=>783,65266=>833,65267=>278,65268=>302,65269=>570,65270=>597,65271=>570,65272=>597,65273=>570,65274=>597,65275=>570,65276=>597,65279=>0,65529=>0,65530=>0,65531=>0,65532=>0,65533=>1025,65535=>600);// --- EOF ---
<?php/** * Handles the visualization of GIS GEOMETRYCOLLECTION objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Geometrycollection extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        $min_max = array();        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $scale_data = $gis_obj->scaleRow($sub_part);            // Upadate minimum/maximum values for x and y cordinates.            $c_maxX = (float) $scale_data['maxX'];            if (! isset($min_max['maxX']) || $c_maxX > $min_max['maxX']) {                $min_max['maxX'] = $c_maxX;            }            $c_minX = (float) $scale_data['minX'];            if (! isset($min_max['minX']) || $c_minX < $min_max['minX']) {                $min_max['minX'] = $c_minX;            }            $c_maxY = (float) $scale_data['maxY'];            if (! isset($min_max['maxY']) || $c_maxY > $min_max['maxY']) {                $min_max['maxY'] = $c_maxY;            }            $c_minY = (float) $scale_data['minY'];            if (! isset($min_max['minY']) || $c_minY < $min_max['minY']) {                $min_max['minY'] = $c_minY;            }        }        return $min_max;    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $color, $scale_data, $image)    {        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $image = $gis_obj->prepareRowAsPng($sub_part, $label, $color, $scale_data, $image);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $color, $scale_data, $pdf)    {        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $pdf = $gis_obj->prepareRowAsPdf($sub_part, $label, $color, $scale_data, $pdf);        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $color, $scale_data)    {        $row = '';        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $row .= $gis_obj->prepareRowAsSvg($sub_part, $label, $color, $scale_data);        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $color, $scale_data)    {        $row = '';        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $row .= $gis_obj->prepareRowAsOl($sub_part, $srid, $label, $color, $scale_data);        }        return $row;    }    /**     * Split the GEOMETRYCOLLECTION object and get its constituents.     *     * @param string $goem_col Geometry collection string     *     * @return the constituents of the geometry collection object     */    private function _explodeGeomCol($goem_col)    {        $sub_parts = array();        $br_count = 0;        $start = 0;        $count = 0;        foreach (str_split($goem_col) as $char) {            if ($char == '(') {                $br_count++;            } elseif ($char == ')') {                $br_count--;                if ($br_count == 0) {                    $sub_parts[] = substr($goem_col, $start, ($count + 1 - $start));                    $start = $count + 2;                }            }            $count++;        }        return $sub_parts;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $geom_count = (isset($gis_data['GEOMETRYCOLLECTION']['geom_count']))            ? $gis_data['GEOMETRYCOLLECTION']['geom_count'] : 1;        $wkt = 'GEOMETRYCOLLECTION(';        for ($i = 0; $i < $geom_count; $i++) {            if (isset($gis_data[$i]['gis_type'])) {                $type = $gis_data[$i]['gis_type'];                $gis_obj = PMA_GIS_Factory::factory($type);                if (! $gis_obj) {                    continue;                }                $wkt .= $gis_obj->generateWkt($gis_data, $i, $empty) . ',';            }        }        if (isset($gis_data[0]['gis_type'])) {            $wkt = substr($wkt, 0, strlen($wkt) - 1);        }        $wkt .= ')';        return $wkt;    }    /** Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value)    {        $params = array();        $data = PMA_GIS_Geometry::generateParams($value);        $params['srid'] = $data['srid'];        $wkt = $data['wkt'];        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($wkt, 19, (strlen($wkt) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        $params['GEOMETRYCOLLECTION']['geom_count'] = count($sub_parts);        $i = 0;        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $params = array_merge($params, $gis_obj->generateParams($sub_part, $i));            $i++;        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * This class tracks changes on databases, tables and views. * For more information please see phpMyAdmin/Documentation.html * * @package PhpMyAdmin * * @todo use stristr instead of strstr */class PMA_Tracker{    /**     * Whether tracking is ready.     */    static protected $enabled = false;    /**     * Defines the internal PMA table which contains tracking data.     *     * @access  protected     * @var string     */    static protected $pma_table;    /**     * Defines the usage of DROP TABLE statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_table;    /**     * Defines the usage of DROP VIEW statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_view;    /**     * Defines the usage of DROP DATABASE statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_database;    /**     * Defines auto-creation of tracking versions.     *     * @var boolean     */    static protected $version_auto_create;    /**     * Defines the default set of tracked statements.     *     * @var string     */    static protected $default_tracking_set;    /**     * Flags copied from `tracking` column definition in `pma_tracking` table.     * Used for column type conversion in Drizzle.     *     * @var array     */    static private $tracking_set_flags = array('UPDATE','REPLACE','INSERT','DELETE','TRUNCATE','CREATE DATABASE',            'ALTER DATABASE','DROP DATABASE','CREATE TABLE','ALTER TABLE','RENAME TABLE','DROP TABLE','CREATE INDEX',            'DROP INDEX','CREATE VIEW','ALTER VIEW','DROP VIEW');    /**     * Initializes settings. See phpMyAdmin/Documentation.html.     *     * @static     *     * @return nothing     */    static protected function init()    {        self::$pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) .".".                           PMA_backquote($GLOBALS['cfg']['Server']['tracking']);        self::$add_drop_table = $GLOBALS['cfg']['Server']['tracking_add_drop_table'];        self::$add_drop_view = $GLOBALS['cfg']['Server']['tracking_add_drop_view'];        self::$add_drop_database = $GLOBALS['cfg']['Server']['tracking_add_drop_database'];        self::$default_tracking_set = $GLOBALS['cfg']['Server']['tracking_default_statements'];        self::$version_auto_create = $GLOBALS['cfg']['Server']['tracking_version_auto_create'];    }    /**     * Actually enables tracking. This needs to be done after all     * underlaying code is initialized.     *     * @static     *     * @return nothing     */    static public function enable()    {        self::$enabled = true;    }    /**     * Gets the on/off value of the Tracker module, starts initialization.     *     * @static     *     * @return boolean (true=on|false=off)     */    static public function isActive()    {        if (! self::$enabled) {            return false;        }        /* We need to avoid attempt to track any queries from PMA_getRelationsParam */        self::$enabled = false;        $cfgRelation = PMA_getRelationsParam();        /* Restore original state */        self::$enabled = true;        if (! $cfgRelation['trackingwork']) {            return false;        }        self::init();        if (isset(self::$pma_table)) {            return true;        } else {            return false;        }    }    /**     * Parses the name of a table from a SQL statement substring.     *     * @param string $string part of SQL statement     *     * @static     *     * @return string the name of table     */    static protected function getTableName($string)    {        if (strstr($string, '.')) {            $temp = explode('.', $string);            $tablename = $temp[1];        } else {            $tablename = $string;        }        $str = explode("\n", $tablename);        $tablename = $str[0];        $tablename = str_replace(';', '', $tablename);        $tablename = str_replace('`', '', $tablename);        $tablename = trim($tablename);        return $tablename;    }    /**     * Gets the tracking status of a table, is it active or deactive ?     *     * @param string $dbname    name of database     * @param string $tablename name of table     *     * @static     *     * @return boolean true or false     */    static public function isTracked($dbname, $tablename)    {        if (! self::$enabled) {            return false;        }        /* We need to avoid attempt to track any queries from PMA_getRelationsParam */        self::$enabled = false;        $cfgRelation = PMA_getRelationsParam();        /* Restore original state */        self::$enabled = true;        if (! $cfgRelation['trackingwork']) {            return false;        }        $sql_query = " SELECT tracking_active FROM " . self::$pma_table .        " WHERE db_name = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND table_name = '" . PMA_sqlAddSlashes($tablename) . "' " .        " ORDER BY version DESC";        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        if (isset($row['tracking_active']) && $row['tracking_active'] == 1) {            return true;        } else {            return false;        }    }    /**     * Returns the comment line for the log.     *     * @return string Comment, contains date and username     */    static public function getLogComment()    {        $date = date('Y-m-d H:i:s');        return "# log " . $date . " " . $GLOBALS['cfg']['Server']['user'] . "\n";    }    /**     * Creates tracking version of a table / view     * (in other words: create a job to track future changes on the table).     *     * @param string $dbname       name of database     * @param string $tablename    name of table     * @param string $version      version     * @param string $tracking_set set of tracking statements     * @param bool   $is_view      if table is a view     *     * @static     *     * @return int result of version insertion     */    static public function createVersion($dbname, $tablename, $version, $tracking_set = '', $is_view = false)    {        global $sql_backquotes;        if ($tracking_set == '') {            $tracking_set = self::$default_tracking_set;        }        include_once './libraries/export/sql.php';        $sql_backquotes = true;        $date = date('Y-m-d H:i:s');        // Get data definition snapshot of table        $columns = PMA_DBI_get_columns($dbname, $tablename, null, true);        // int indices to reduce size        $columns = array_values($columns);        // remove Privileges to reduce size        for ($i = 0; $i < count($columns); $i++) {            unset($columns[$i]['Privileges']);        }        $indexes = PMA_DBI_get_table_indexes($dbname, $tablename);        $snapshot = array('COLUMNS' => $columns, 'INDEXES' => $indexes);        $snapshot = serialize($snapshot);        // Get DROP TABLE / DROP VIEW and CREATE TABLE SQL statements        $sql_backquotes = true;        $create_sql  = "";        if (self::$add_drop_table == true && $is_view == false) {            $create_sql .= self::getLogComment() .                           'DROP TABLE IF EXISTS ' . PMA_backquote($tablename) . ";\n";        }        if (self::$add_drop_view == true && $is_view == true) {            $create_sql .= self::getLogComment() .                           'DROP VIEW IF EXISTS ' . PMA_backquote($tablename) . ";\n";        }        $create_sql .= self::getLogComment() .                       PMA_getTableDef($dbname, $tablename, "\n", "");        // Save version        $sql_query = "/*NOTRACK*/\n" .        "INSERT INTO" . self::$pma_table . " (" .        "db_name, " .        "table_name, " .        "version, " .        "date_created, " .        "date_updated, " .        "schema_snapshot, " .        "schema_sql, " .        "data_sql, " .        "tracking " .        ") " .        "values (        '" . PMA_sqlAddSlashes($dbname) . "',        '" . PMA_sqlAddSlashes($tablename) . "',        '" . PMA_sqlAddSlashes($version) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($snapshot) . "',        '" . PMA_sqlAddSlashes($create_sql) . "',        '" . PMA_sqlAddSlashes("\n") . "',        '" . PMA_sqlAddSlashes(self::transformTrackingSet($tracking_set)) . "' )";        $result = PMA_query_as_controluser($sql_query);        if ($result) {            // Deactivate previous version            self::deactivateTracking($dbname, $tablename, ($version - 1));        }        return $result;    }    /**     * Removes all tracking data for a table     *     * @param string $dbname    name of database     * @param string $tablename name of table     *     * @static     *     * @return int result of version insertion     */    static public function deleteTracking($dbname, $tablename)    {        $sql_query = "/*NOTRACK*/\n" .        "DELETE FROM " . self::$pma_table . " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "'";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Creates tracking version of a database     * (in other words: create a job to track future changes on the database).     *     * @param string $dbname       name of database     * @param string $version      version     * @param string $query        query     * @param string $tracking_set set of tracking statements     *     * @static     *     * @return int result of version insertion     */    static public function createDatabaseVersion($dbname, $version, $query, $tracking_set = 'CREATE DATABASE,ALTER DATABASE,DROP DATABASE')    {        $date = date('Y-m-d H:i:s');        if ($tracking_set == '') {            $tracking_set = self::$default_tracking_set;        }        include_once './libraries/export/sql.php';        $create_sql  = "";        if (self::$add_drop_database == true) {            $create_sql .= self::getLogComment() .                           'DROP DATABASE IF EXISTS ' . PMA_backquote($dbname) . ";\n";        }        $create_sql .= self::getLogComment() . $query;        // Save version        $sql_query = "/*NOTRACK*/\n" .        "INSERT INTO" . self::$pma_table . " (" .        "db_name, " .        "table_name, " .        "version, " .        "date_created, " .        "date_updated, " .        "schema_snapshot, " .        "schema_sql, " .        "data_sql, " .        "tracking " .        ") " .        "values (        '" . PMA_sqlAddSlashes($dbname) . "',        '" . PMA_sqlAddSlashes('') . "',        '" . PMA_sqlAddSlashes($version) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes('') . "',        '" . PMA_sqlAddSlashes($create_sql) . "',        '" . PMA_sqlAddSlashes("\n") . "',        '" . PMA_sqlAddSlashes(self::transformTrackingSet($tracking_set)) . "' )";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Changes tracking of a table.     *     * @param string  $dbname    name of database     * @param string  $tablename name of table     * @param string  $version   version     * @param integer $new_state the new state of tracking     *     * @static     *     * @return int result of SQL query     */    static private function _changeTracking($dbname, $tablename, $version, $new_state)    {        $sql_query = " UPDATE " . self::$pma_table .        " SET `tracking_active` = '" . $new_state . "' " .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' " .        " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Changes tracking data of a table.     *     * @param string       $dbname    name of database     * @param string       $tablename name of table     * @param string       $version   version     * @param string       $type      type of data(DDL || DML)     * @param string|array $new_data  the new tracking data     *     * @static     *     * @return bool result of change     */    static public function changeTrackingData($dbname, $tablename, $version, $type, $new_data)    {        if ($type == 'DDL') {            $save_to = 'schema_sql';        } elseif ($type == 'DML') {            $save_to = 'data_sql';        } else {            return false;        }        $date  = date('Y-m-d H:i:s');        $new_data_processed = '';        if (is_array($new_data)) {            foreach ($new_data as $data) {                $new_data_processed .= '# log ' . $date . ' ' . $data['username']                    . PMA_sqlAddSlashes($data['statement']) . "\n";            }        } else {            $new_data_processed = $new_data;        }        $sql_query = " UPDATE " . self::$pma_table .        " SET `" . $save_to . "` = '" . $new_data_processed . "' " .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' " .        " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Activates tracking of a table.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version     *     * @static     *     * @return int result of SQL query     */    static public function activateTracking($dbname, $tablename, $version)    {        return self::_changeTracking($dbname, $tablename, $version, 1);    }    /**     * Deactivates tracking of a table.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version     *     * @static     *     * @return int result of SQL query     */    static public function deactivateTracking($dbname, $tablename, $version)    {        return self::_changeTracking($dbname, $tablename, $version, 0);    }    /**     * Gets the newest version of a tracking job     * (in other words: gets the HEAD version).     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $statement tracked statement     *     * @static     *     * @return int (-1 if no version exists | >  0 if a version exists)     */    static public function getVersion($dbname, $tablename, $statement = null)    {        $sql_query = " SELECT MAX(version) FROM " . self::$pma_table .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' ";        if ($statement != "") {            $sql_query .= PMA_DRIZZLE                ? ' AND tracking & ' . self::transformTrackingSet($statement) . ' <> 0'                : " AND FIND_IN_SET('" . $statement . "',tracking) > 0" ;        }        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        return isset($row[0])            ? $row[0]            : -1;    }    /**     * Gets the record of a tracking job.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version number     *     * @static     *     * @return mixed record DDM log, DDL log, structure snapshot, tracked statements.     */    static public function getTrackedData($dbname, $tablename, $version)    {        if (! isset(self::$pma_table)) {            self::init();        }        $sql_query = " SELECT * FROM " . self::$pma_table .            " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' ";        if (! empty($tablename)) {            $sql_query .= " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) ."' ";        }        $sql_query .= " AND `version` = '" . PMA_sqlAddSlashes($version) ."' ".                     " ORDER BY `version` DESC LIMIT 1";        $mixed = PMA_DBI_fetch_assoc(PMA_query_as_controluser($sql_query));        // Parse log        $log_schema_entries = explode('# log ',  $mixed['schema_sql']);        $log_data_entries   = explode('# log ',  $mixed['data_sql']);        $ddl_date_from = $date = date('Y-m-d H:i:s');        $ddlog = array();        $i = 0;        // Iterate tracked data definition statements        // For each log entry we want to get date, username and statement        foreach ($log_schema_entries as $log_entry) {            if (trim($log_entry) != '') {                $date      = substr($log_entry, 0, 19);                $username  = substr($log_entry, 20, strpos($log_entry, "\n") - 20);                if ($i == 0) {                    $ddl_date_from = $date;                }                $statement = rtrim(strstr($log_entry, "\n"));                $ddlog[] = array( 'date' => $date,                                  'username'=> $username,                                  'statement' => $statement );                $i++;            }        }        $date_from = $ddl_date_from;        $date_to   = $ddl_date_to = $date;        $dml_date_from = $date_from;        $dmlog = array();        $i = 0;        // Iterate tracked data manipulation statements        // For each log entry we want to get date, username and statement        foreach ($log_data_entries as $log_entry) {            if (trim($log_entry) != '') {                $date      = substr($log_entry, 0, 19);                $username  = substr($log_entry, 20, strpos($log_entry, "\n") - 20);                if ($i == 0) {                    $dml_date_from = $date;                }                $statement = rtrim(strstr($log_entry, "\n"));                $dmlog[] = array( 'date' => $date,                                  'username' => $username,                                  'statement' => $statement );                $i++;            }        }        $dml_date_to = $date;        // Define begin and end of date range for both logs        if (strtotime($ddl_date_from) <= strtotime($dml_date_from)) {            $data['date_from'] = $ddl_date_from;        } else {            $data['date_from'] = $dml_date_from;        }        if (strtotime($ddl_date_to) >= strtotime($dml_date_to)) {            $data['date_to'] = $ddl_date_to;        } else {            $data['date_to'] = $dml_date_to;        }        $data['ddlog']           = $ddlog;        $data['dmlog']           = $dmlog;        $data['tracking']        = self::transformTrackingSet($mixed['tracking']);        $data['schema_snapshot'] = $mixed['schema_snapshot'];        return $data;    }    /**     * Parses a query. Gets     *  - statement identifier (UPDATE, ALTER TABLE, ...)     *  - type of statement, is it part of DDL or DML ?     *  - tablename     *     * @param string $query query     *     * @static     * @todo: using PMA SQL Parser when possible     * @todo: support multi-table/view drops     *     * @return mixed Array containing identifier, type and tablename.     *     */    static public function parseQuery($query)    {        // Usage of PMA_SQP does not work here        //        // require_once("libraries/sqlparser.lib.php");        // $parsed_sql = PMA_SQP_parse($query);        // $sql_info = PMA_SQP_analyze($parsed_sql);        $query = str_replace("\n", " ", $query);        $query = str_replace("\r", " ", $query);        $query = trim($query);        $query = trim($query, ' -');        $tokens = explode(" ", $query);        foreach ($tokens as $key => $value) {            $tokens[$key] = strtoupper($value);        }        // Parse USE statement, need it for SQL dump imports        if (substr($query, 0, 4) == 'USE ') {            $prefix = explode('USE ', $query);            $GLOBALS['db'] = self::getTableName($prefix[1]);        }        /*         * DDL statements         */        $result['type']         = 'DDL';        // Parse CREATE VIEW statement        if (in_array('CREATE', $tokens) == true            && in_array('VIEW', $tokens) == true            && in_array('AS', $tokens) == true        ) {            $result['identifier'] = 'CREATE VIEW';            $index = array_search('VIEW', $tokens);            $result['tablename'] = strtolower(self::getTableName($tokens[$index + 1]));        }        // Parse ALTER VIEW statement        if (in_array('ALTER', $tokens) == true            && in_array('VIEW', $tokens) == true            && in_array('AS', $tokens) == true            && ! isset($result['identifier'])        ) {            $result['identifier'] = 'ALTER VIEW';            $index = array_search('VIEW', $tokens);            $result['tablename'] = strtolower(self::getTableName($tokens[$index + 1]));        }        // Parse DROP VIEW statement        if (! isset($result['identifier']) && substr($query, 0, 10) == 'DROP VIEW ') {            $result['identifier'] = 'DROP VIEW';            $prefix  = explode('DROP VIEW ', $query);            $str = strstr($prefix[1], 'IF EXISTS');            if ($str == false ) {                $str = $prefix[1];            }            $result['tablename'] = self::getTableName($str);        }        // Parse CREATE DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 15) == 'CREATE DATABASE') {            $result['identifier'] = 'CREATE DATABASE';            $str = str_replace('CREATE DATABASE', '', $query);            $str = str_replace('IF NOT EXISTS', '', $str);            $prefix = explode('DEFAULT ', $str);            $result['tablename'] = '';            $GLOBALS['db'] = self::getTableName($prefix[0]);        }        // Parse ALTER DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 14) == 'ALTER DATABASE') {            $result['identifier'] = 'ALTER DATABASE';            $result['tablename'] = '';        }        // Parse DROP DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 13) == 'DROP DATABASE') {            $result['identifier'] = 'DROP DATABASE';            $str = str_replace('DROP DATABASE', '', $query);            $str = str_replace('IF EXISTS', '', $str);            $GLOBALS['db'] = self::getTableName($str);            $result['tablename'] = '';        }        // Parse CREATE TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 12) == 'CREATE TABLE' ) {            $result['identifier'] = 'CREATE TABLE';            $query   = str_replace('IF NOT EXISTS', '', $query);            $prefix  = explode('CREATE TABLE ', $query);            $suffix  = explode('(', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse ALTER TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 12) == 'ALTER TABLE ') {            $result['identifier'] = 'ALTER TABLE';            $prefix  = explode('ALTER TABLE ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename']  = self::getTableName($suffix[0]);        }        // Parse DROP TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 11) == 'DROP TABLE ') {            $result['identifier'] = 'DROP TABLE';            $prefix  = explode('DROP TABLE ', $query);            $str = strstr($prefix[1], 'IF EXISTS');            if ($str == false ) {                $str = $prefix[1];            }            $result['tablename'] = self::getTableName($str);        }        // Parse CREATE INDEX statement        if (! isset($result['identifier'])            && (substr($query, 0, 12) == 'CREATE INDEX'            || substr($query, 0, 19) == 'CREATE UNIQUE INDEX'            || substr($query, 0, 20) == 'CREATE SPATIAL INDEX')        ) {             $result['identifier'] = 'CREATE INDEX';             $prefix = explode('ON ', $query);             $suffix = explode('(', $prefix[1]);             $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse DROP INDEX statement        if (! isset($result['identifier']) && substr($query, 0, 10) == 'DROP INDEX') {             $result['identifier'] = 'DROP INDEX';             $prefix = explode('ON ', $query);             $result['tablename'] = self::getTableName($prefix[1]);        }        // Parse RENAME TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 13) == 'RENAME TABLE ') {            $result['identifier'] = 'RENAME TABLE';            $prefix = explode('RENAME TABLE ', $query);            $names  = explode(' TO ', $prefix[1]);            $result['tablename']      = self::getTableName($names[0]);            $result["tablename_after_rename"]  = self::getTableName($names[1]);        }        /*         * DML statements         */        if (! isset($result['identifier'])) {            $result["type"]       = 'DML';        }        // Parse UPDATE statement        if (! isset($result['identifier']) && substr($query, 0, 6) == 'UPDATE') {            $result['identifier'] = 'UPDATE';            $prefix  = explode('UPDATE ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse INSERT INTO statement        if (! isset($result['identifier']) && substr($query, 0, 11) == 'INSERT INTO') {            $result['identifier'] = 'INSERT';            $prefix  = explode('INSERT INTO', $query);            $suffix  = explode('(', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse DELETE statement        if (! isset($result['identifier']) && substr($query, 0, 6) == 'DELETE') {            $result['identifier'] = 'DELETE';            $prefix  = explode('FROM ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse TRUNCATE statement        if (! isset($result['identifier']) && substr($query, 0, 8) == 'TRUNCATE') {            $result['identifier'] = 'TRUNCATE';            $prefix  = explode('TRUNCATE', $query);            $result['tablename'] = self::getTableName($prefix[1]);        }        return $result;    }    /**     * Analyzes a given SQL statement and saves tracking data.     *     * @param string $query a SQL query     *     * @static     *     * @return nothing     */    static public function handleQuery($query)    {        // If query is marked as untouchable, leave        if (strstr($query, "/*NOTRACK*/")) {            return;        }        if (! (substr($query, -1) == ';')) {            $query = $query . ";\n";        }        // Get some information about query        $result = self::parseQuery($query);        // Get database name        $dbname = trim($GLOBALS['db'], '`');        // $dbname can be empty, for example when coming from Synchronize        // and this is a query for the remote server        if (empty($dbname)) {            return;        }        // If we found a valid statement        if (isset($result['identifier'])) {            $version = self::getVersion($dbname, $result['tablename'], $result['identifier']);            // If version not exists and auto-creation is enabled            if (self::$version_auto_create == true                && self::isTracked($dbname, $result['tablename']) == false                && $version == -1            ) {                // Create the version                switch ($result['identifier']) {                case 'CREATE TABLE':                    self::createVersion($dbname, $result['tablename'], '1');                    break;                case 'CREATE VIEW':                    self::createVersion($dbname, $result['tablename'], '1', '', true);                    break;                case 'CREATE DATABASE':                    self::createDatabaseVersion($dbname, '1', $query);                    break;                } // end switch            }            // If version exists            if (self::isTracked($dbname, $result['tablename']) && $version != -1) {                if ($result['type'] == 'DDL') {                    $save_to = 'schema_sql';                } elseif ($result['type'] == 'DML') {                    $save_to = 'data_sql';                } else {                    $save_to = '';                }                $date  = date('Y-m-d H:i:s');                // Cut off `dbname`. from query                $query = preg_replace('/`' . $dbname . '`\s?\./', '', $query);                // Add log information                $query = self::getLogComment() . $query ;                // Mark it as untouchable                $sql_query = " /*NOTRACK*/\n" .                " UPDATE " . self::$pma_table .                " SET " . PMA_backquote($save_to) ." = CONCAT( " . PMA_backquote($save_to) . ",'\n"                . PMA_sqlAddSlashes($query) . "') ," . " `date_updated` = '" . $date . "' ";                // If table was renamed we have to change the tablename attribute in pma_tracking too                if ($result['identifier'] == 'RENAME TABLE') {                    $sql_query .= ', `table_name` = \'' . PMA_sqlAddSlashes($result['tablename_after_rename']) . '\' ';                }                // Save the tracking information only for                //     1. the database                //     2. the table / view                //     3. the statements                // we want to track                $sql_query .=                " WHERE FIND_IN_SET('" . $result['identifier'] . "',tracking) > 0" .                " AND `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .                " AND `table_name` = '" . PMA_sqlAddSlashes($result['tablename']) . "' " .                " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";                $result = PMA_query_as_controluser($sql_query);            }        }    }    /**     * Transforms tracking set for Drizzle, which has no SET type     *     * Converts int<>string for Drizzle, does nothing for MySQL     *     * @param int|string $tracking_set     * @return int|string     */    static private function transformTrackingSet($tracking_set)    {        if (!PMA_DRIZZLE) {            return $tracking_set;        }        // init conversion array (key 3 doesn't exist in calculated array)        if (isset(self::$tracking_set_flags[3])) {            // initialize flags            $set = self::$tracking_set_flags;            $array = array();            for ($i = 0; $i < count($set); $i++) {                $flag = 1 << $i;                $array[$flag] = $set[$i];                $array[$set[$i]] = $flag;            }            self::$tracking_set_flags = $array;        }        if (is_numeric($tracking_set)) {            // int > string conversion            $aflags = array();            // count/2 - conversion table has both int > string and string > int values            for ($i = 0; $i < count(self::$tracking_set_flags)/2; $i++) {                $flag = 1 << $i;                if ($tracking_set & $flag) {                    $aflags[] = self::$tracking_set_flags[$flag];                }            }            $flags = implode(',', $aflags);        } else {            // string > int conversion            $flags = 0;            foreach (explode(',', $tracking_set) as $strflag) {                if ($strflag == '') {                    continue;                }                $flags |= self::$tracking_set_flags[$strflag];            }        }        return $flags;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * phpMyAdmin sample configuration, you can use it as base for * manual configuration. For easier setup you can use setup/ * * All directives are explained in Documentation.html and on phpMyAdmin * wiki <http://wiki.phpmyadmin.net>. * * @package PhpMyAdmin *//* * This is needed for cookie based authentication to encrypt password in * cookie */$cfg['blowfish_secret'] = 'a8b7c6d'; /* YOU MUST FILL IN THIS FOR COOKIE AUTH! *//* * Servers configuration */$i = 0;/* * First server */$i++;/* Authentication type */$cfg['Servers'][$i]['auth_type'] = 'cookie';/* Server parameters */$cfg['Servers'][$i]['host'] = 'localhost';$cfg['Servers'][$i]['connect_type'] = 'tcp';$cfg['Servers'][$i]['compress'] = false;/* Select mysql if your server does not have mysqli */$cfg['Servers'][$i]['extension'] = 'mysqli';$cfg['Servers'][$i]['AllowNoPassword'] = false;/* * phpMyAdmin configuration storage settings. *//* User used to manipulate with storage */// $cfg['Servers'][$i]['controlhost'] = '';// $cfg['Servers'][$i]['controluser'] = 'pma';// $cfg['Servers'][$i]['controlpass'] = 'pmapass';/* Storage database and tables */// $cfg['Servers'][$i]['pmadb'] = 'phpmyadmin';// $cfg['Servers'][$i]['bookmarktable'] = 'pma_bookmark';// $cfg['Servers'][$i]['relation'] = 'pma_relation';// $cfg['Servers'][$i]['table_info'] = 'pma_table_info';// $cfg['Servers'][$i]['table_coords'] = 'pma_table_coords';// $cfg['Servers'][$i]['pdf_pages'] = 'pma_pdf_pages';// $cfg['Servers'][$i]['column_info'] = 'pma_column_info';// $cfg['Servers'][$i]['history'] = 'pma_history';// $cfg['Servers'][$i]['table_uiprefs'] = 'pma_table_uiprefs';// $cfg['Servers'][$i]['tracking'] = 'pma_tracking';// $cfg['Servers'][$i]['designer_coords'] = 'pma_designer_coords';// $cfg['Servers'][$i]['userconfig'] = 'pma_userconfig';// $cfg['Servers'][$i]['recent'] = 'pma_recent';// $cfg['Servers'][$i]['table_uiprefs'] = 'pma_table_uiprefs';/* Contrib / Swekey authentication */// $cfg['Servers'][$i]['auth_swekey_config'] = '/etc/swekey-pma.conf';/* * End of servers configuration *//* * Directories for saving/loading files from server */$cfg['UploadDir'] = '';$cfg['SaveDir'] = '';/** * Defines whether a user should be displayed a "show all (records)" * button in browse mode or not. * default = false *///$cfg['ShowAll'] = true;/** * Number of rows displayed when browsing a result set. If the result * set contains more rows, "Previous" and "Next". * default = 30 *///$cfg['MaxRows'] = 50;/** * Use graphically less intense menu tabs * default = false *///$cfg['LightTabs'] = true;/** * disallow editing of binary fields * valid values are: *   false  allow editing *   'blob' allow editing except for BLOB fields *   'all'  disallow editing * default = blob *///$cfg['ProtectBinary'] = 'false';/** * Default language to use, if not browser-defined or user-defined * (you find all languages in the locale folder) * uncomment the desired line: * default = 'en' *///$cfg['DefaultLang'] = 'en';//$cfg['DefaultLang'] = 'de';/** * default display direction (horizontal|vertical|horizontalflipped) *///$cfg['DefaultDisplay'] = 'vertical';/** * How many columns should be used for table display of a database? * (a value larger than 1 results in some information being hidden) * default = 1 *///$cfg['PropertiesNumColumns'] = 2;/** * Set to true if you want DB-based query history.If false, this utilizes * JS-routines to display query history (lost by window close) * * This requires configuration storage enabled, see above. * default = false *///$cfg['QueryHistoryDB'] = true;/** * When using DB-based query history, how many entries should be kept? * * default = 25 *///$cfg['QueryHistoryMax'] = 100;/* * You can find more configuration options in Documentation.html * or here: http://wiki.phpmyadmin.net/pma/Config */?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Generic plugin interface. * * @package PhpMyAdmin *//** * array PMA_getPlugins(string $plugins_dir, mixed $plugin_param) * * Reads all plugin information from directory $plugins_dir. * * @param string  $plugins_dir    directrory with plugins * @param mixed   $plugin_param   parameter to plugin by which they can decide whether they can work * @return  array                   list of plugins */function PMA_getPlugins($plugins_dir, $plugin_param){    /* Scan for plugins */    $plugin_list = array();    if ($handle = @opendir($plugins_dir)) {        while ($file = @readdir($handle)) {            // In some situations, Mac OS creates a new file for each file            // (for example ._csv.php) so the following regexp            // matches a file which does not start with a dot but ends            // with ".php"            if (is_file($plugins_dir . $file) && preg_match('@^[^\.](.)*\.php$@i', $file)) {                include $plugins_dir . $file;            }        }    }    ksort($plugin_list);    return $plugin_list;}/** * string PMA_getString(string $name) * * returns locale string for $name or $name if no locale is found * * @param string  $name   for local string * @return  string          locale string for $name */function PMA_getString($name){    return isset($GLOBALS[$name]) ? $GLOBALS[$name] : $name;}/** * string PMA_pluginCheckboxCheck(string $section, string $opt) * * returns html input tag option 'checked' if plugin $opt should be set by config or request * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @return  string              hmtl input tag option 'checked' */function PMA_pluginCheckboxCheck($section, $opt){    // If the form is being repopulated using $_GET data, that is priority    if (isset($_GET[$opt]) || ! isset($_GET['repopulate']) && ((isset($GLOBALS['timeout_passed']) && $GLOBALS['timeout_passed'] && isset($_REQUEST[$opt])) ||        (isset($GLOBALS['cfg'][$section][$opt]) && $GLOBALS['cfg'][$section][$opt]))) {        return ' checked="checked"';    }    return '';}/** * string PMA_pluginGetDefault(string $section, string $opt) * * returns default value for option $opt * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @return  string              default value for option $opt */function PMA_pluginGetDefault($section, $opt){    if (isset($_GET[$opt])) { // If the form is being repopulated using $_GET data, that is priority        return htmlspecialchars($_GET[$opt]);    } elseif (isset($GLOBALS['timeout_passed']) && $GLOBALS['timeout_passed'] && isset($_REQUEST[$opt])) {        return htmlspecialchars($_REQUEST[$opt]);    } elseif (isset($GLOBALS['cfg'][$section][$opt])) {        $matches = array();        /* Possibly replace localised texts */        if (preg_match_all('/(str[A-Z][A-Za-z0-9]*)/', $GLOBALS['cfg'][$section][$opt], $matches)) {            $val = $GLOBALS['cfg'][$section][$opt];            foreach ($matches[0] as $match) {                if (isset($GLOBALS[$match])) {                    $val = str_replace($match, $GLOBALS[$match], $val);                }            }            return htmlspecialchars($val);        } else {            return htmlspecialchars($GLOBALS['cfg'][$section][$opt]);        }    }    return '';}/** * string PMA_pluginIsActive(string $section, string $opt, string $val) * * returns html input tag option 'checked' if option $opt should be set by config or request * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @param string  $val        value of option to check against * @return  string              html input tag option 'checked' */function PMA_pluginIsActive($section, $opt, $val){    if (! empty($GLOBALS['timeout_passed']) && isset($_REQUEST[$opt])) {        if ($_REQUEST[$opt] == $val) {            return ' checked="checked"';        }    } elseif (isset($GLOBALS['cfg'][$section][$opt]) &&  $GLOBALS['cfg'][$section][$opt] == $val) {        return ' checked="checked"';    }    return '';}/** * string PMA_pluginGetChoice(string $section, string $name, array &$list, string $cfgname) * * returns html select form element for plugin choice * and hidden fields denoting whether each plugin must be exported as a file * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $name       name of select element * @param array   &$list      array with plugin configuration defined in plugin file * @param string  $cfgname    name of config value, if none same as $name * @return  string              html select tag */function PMA_pluginGetChoice($section, $name, &$list, $cfgname = null){    if (! isset($cfgname)) {        $cfgname = $name;    }    $ret = '<select id="plugins" name="' . $name . '">';    $default = PMA_pluginGetDefault($section, $cfgname);    foreach ($list as $plugin_name => $val) {        $ret .= '<option';         // If the form is being repopulated using $_GET data, that is priority        if (isset($_GET[$name]) && $plugin_name == $_GET[$name] || ! isset($_GET[$name]) && $plugin_name == $default) {            $ret .= ' selected="selected"';        }         $ret .= ' value="' . $plugin_name . '">' . PMA_getString($val['text']) . '</option>' . "\n";    }    $ret .= '</select>' . "\n";    // Whether each plugin has to be saved as a file    foreach ($list as $plugin_name => $val) {        $ret .= '<input type="hidden" id="force_file_' . $plugin_name . '" value="';        if (isset($val['force_file'])) {            $ret .= 'true';        } else {            $ret .= 'false';        }        $ret .= '" />'. "\n";    }    return $ret;}/** * string PMA_pluginGetOneOption(string $section, string $plugin_name, string $id, array &$opt) * * returns single option in a list element * * @param string  $section        name of config section in *                                  $GLOBALS['cfg'][$section] for plugin * @param string  $plugin_name    unique plugin name * @param string  $id             option id * @param array   &$opt           plugin option details * @return  string                  table row with option */function PMA_pluginGetOneOption($section, $plugin_name, $id, &$opt){    $ret = "\n";    if ($opt['type'] == 'bool') {        $ret .= '<li>' . "\n";        $ret .= '<input type="checkbox" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="something" id="checkbox_' . $plugin_name . '_' . $opt['name'] . '"'            . ' ' . PMA_pluginCheckboxCheck($section, $plugin_name . '_' . $opt['name']);        if (isset($opt['force'])) {            /* Same code is also few lines lower, update both if needed */            $ret .= ' onclick="if (!this.checked &amp;&amp; '                . '(!document.getElementById(\'checkbox_' . $plugin_name . '_' .$opt['force'] . '\') '                . '|| !document.getElementById(\'checkbox_' . $plugin_name . '_' .$opt['force'] . '\').checked)) '                . 'return false; else return true;"';        }        $ret .= ' />';        $ret .= '<label for="checkbox_' . $plugin_name . '_' . $opt['name'] . '">'            . PMA_getString($opt['text']) . '</label>';    } elseif ($opt['type'] == 'text') {        $ret .= '<li>' . "\n";        $ret .= '<label for="text_' . $plugin_name . '_' . $opt['name'] . '" class="desc">'            . PMA_getString($opt['text']) . '</label>';        $ret .= '<input type="text" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="' . PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']) . '"'            . ' id="text_' . $plugin_name . '_' . $opt['name'] . '"'            . (isset($opt['size']) ? ' size="' . $opt['size'] . '"' : '')            . (isset($opt['len']) ? ' maxlength="' . $opt['len'] . '"' : '') . ' />';    } elseif ($opt['type'] == 'message_only') {        $ret .= '<li>' . "\n";        $ret .= '<p>' . PMA_getString($opt['text']) . '</p>';    } elseif ($opt['type'] == 'select') {        $ret .= '<li>' . "\n";        $ret .= '<label for="select_' . $plugin_name . '_' . $opt['name'] . '" class="desc">'            . PMA_getString($opt['text']) . '</label>';        $ret .= '<select name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' id="select_' . $plugin_name . '_' . $opt['name'] . '">';        $default = PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']);        foreach ($opt['values'] as $key => $val) {            $ret .= '<option value="' . $key . '"';            if ($key == $default) {                $ret .= ' selected="selected"';            }            $ret .= '>' . PMA_getString($val) . '</option>';        }        $ret .= '</select>';    } elseif ($opt['type'] == 'radio') {        $default = PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']);        foreach ($opt['values'] as $key => $val) {            $ret .= '<li><input type="radio" name="' . $plugin_name . '_' . $opt['name'] . '" value="' . $key            . '" id="radio_' . $plugin_name . '_' . $opt['name'] . '_' . $key . '"';            if ($key == $default) {                $ret .= 'checked="checked"';            }            $ret .= ' />' . '<label for="radio_' . $plugin_name . '_' . $opt['name'] . '_' . $key . '">'            . PMA_getString($val) . '</label></li>';        }    } elseif ($opt['type'] == 'hidden') {        $ret .= '<li><input type="hidden" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="' . PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']) . '"' . ' /></li>';    } elseif ($opt['type'] == 'begin_group') {        $ret .= '<div class="export_sub_options" id="' . $plugin_name . '_' . $opt['name'] . '">';        if (isset($opt['text'])) {            $ret .= '<h4>' . PMA_getString($opt['text']) . '</h4>';        }        $ret .= '<ul>';    } elseif ($opt['type'] == 'end_group') {        $ret .= '</ul></div>';    } elseif ($opt['type'] == 'begin_subgroup') {        /* each subgroup can have a header, which may also be a form element */        $ret .=  PMA_pluginGetOneOption($section, $plugin_name, $id, $opt['subgroup_header']) . '<li class="subgroup"><ul';        if (isset($opt['subgroup_header']['name'])) {            $ret .= ' id="ul_' . $opt['subgroup_header']['name'] . '">';        } else {            $ret .= '>';        }    } elseif ($opt['type'] == 'end_subgroup') {        $ret .= '</ul></li>';    } else {        /* This should be seen only by plugin writers, so I do not thing this         * needs translation. */        $ret .= 'UNKNOWN OPTION ' . $opt['type'] . ' IN IMPORT PLUGIN ' . $plugin_name . '!';    }    if (isset($opt['doc'])) {        if (count($opt['doc']) == 3) {            $ret .= PMA_showMySQLDocu($opt['doc'][0], $opt['doc'][1], false, $opt['doc'][2]);        } elseif (count($opt['doc']) == 1) {            $ret .= PMA_showDocu($opt['doc'][0]);        } else {            $ret .= PMA_showMySQLDocu($opt['doc'][0], $opt['doc'][1]);        }    }    // Close the list element after $opt['doc'] link is displayed    if ($opt['type'] == 'bool' || $opt['type'] == 'text' || $opt['type'] == 'message_only' || $opt['type'] == 'select') {        $ret .= '</li>';    }    $ret .= "\n";    return $ret;}/** * string PMA_pluginGetOptions(string $section, array &$list) * * return html div with editable options for plugin * * @param string  $section    name of config section in $GLOBALS['cfg'][$section] * @param array   &$list      array with plugin configuration defined in plugin file * @return  string              html fieldset with plugin options */function PMA_pluginGetOptions($section, &$list){    $ret = '';    $default = PMA_pluginGetDefault('Export', 'format');    // Options for plugins that support them    foreach ($list as $plugin_name => $val) {        $ret .= '<div id="' . $plugin_name . '_options" class="format_specific_options">';        $count = 0;            $ret .= '<h3>' . PMA_getString($val['text']) . '</h3>';        if (isset($val['options']) && count($val['options']) > 0) {            foreach ($val['options'] as $id => $opt) {                if ($opt['type'] != 'hidden' && $opt['type'] != 'begin_group' && $opt['type'] != 'end_group' && $opt['type'] != 'begin_subgroup' && $opt['type'] != 'end_subgroup') {                    $count++;                }                $ret .= PMA_pluginGetOneOption($section, $plugin_name, $id, $opt);            }        }        if ($count == 0) {            $ret .= '<p>' . __('This format has no options') . '</p>';        }        $ret .= '</div>';    }    return $ret;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */// Run common workrequire_once './libraries/common.inc.php';define('TABLE_MAY_BE_ABSENT', true);require './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_tracking.php&amp;back=tbl_tracking.php';$url_params['goto'] = 'tbl_tracking.php';;$url_params['back'] = 'tbl_tracking.php';// Init vars for tracking reportif (isset($_REQUEST['report']) || isset($_REQUEST['report_export'])) {    $data = PMA_Tracker::getTrackedData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version']);    $selection_schema = false;    $selection_data   = false;    $selection_both  = false;    if (! isset($_REQUEST['logtype'])) {        $_REQUEST['logtype'] = 'schema_and_data';    }    if ($_REQUEST['logtype'] == 'schema') {        $selection_schema = true;    } elseif ($_REQUEST['logtype'] == 'data') {        $selection_data   = true;    } else {        $selection_both   = true;    }    if (! isset($_REQUEST['date_from'])) {        $_REQUEST['date_from'] = $data['date_from'];    }    if (! isset($_REQUEST['date_to'])) {        $_REQUEST['date_to'] = $data['date_to'];    }    if (! isset($_REQUEST['users'])) {        $_REQUEST['users'] = '*';    }    $filter_ts_from = strtotime($_REQUEST['date_from']);    $filter_ts_to   = strtotime($_REQUEST['date_to']);    $filter_users   = array_map('trim', explode(',', $_REQUEST['users']));}// Prepare exportif (isset($_REQUEST['report_export'])) {/** * Filters tracking entries * * @param array   the entries to filter * @param string  "from" date * @param string  "to" date * @param string  users * * @return  array   filtered entries * */    function PMA_filter_tracking($data, $filter_ts_from, $filter_ts_to, $filter_users) {        $tmp_entries = array();        $id = 0;        foreach ( $data as $entry ) {            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {                $tmp_entries[] = array( 'id' => $id,                                    'timestamp' => $timestamp,                                    'username'  => $entry['username'],                                    'statement' => $entry['statement']                             );            }            $id++;        }        return($tmp_entries);    }    $entries = array();    // Filtering data definition statements    if ($_REQUEST['logtype'] == 'schema' || $_REQUEST['logtype'] == 'schema_and_data') {        $entries = array_merge($entries, PMA_filter_tracking($data['ddlog'], $filter_ts_from, $filter_ts_to, $filter_users));    }    // Filtering data manipulation statements    if ($_REQUEST['logtype'] == 'data' || $_REQUEST['logtype'] == 'schema_and_data') {        $entries = array_merge($entries, PMA_filter_tracking($data['dmlog'], $filter_ts_from, $filter_ts_to, $filter_users));    }    // Sort it    foreach ($entries as $key => $row) {        $ids[$key]        = $row['id'];        $timestamps[$key] = $row['timestamp'];        $usernames[$key]  = $row['username'];        $statements[$key] = $row['statement'];    }    array_multisort($timestamps, SORT_ASC, $ids, SORT_ASC, $usernames, SORT_ASC, $statements, SORT_ASC, $entries);}// Export as file downloadif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'sqldumpfile') {    @ini_set('url_rewriter.tags', '');    $dump = "# " . sprintf(__('Tracking report for table `%s`'), htmlspecialchars($_REQUEST['table'])) . "\n" .            "# " . date('Y-m-d H:i:s') . "\n";    foreach ($entries as $entry) {        $dump .= $entry['statement'];    }    $filename = 'log_' . htmlspecialchars($_REQUEST['table']) . '.sql';    PMA_download_header($filename, 'text/x-sql', strlen($dump));    echo $dump;    exit();}/** * Gets tables informations *//** * Displays top menu links */require_once './libraries/tbl_links.inc.php';echo '<br />';/** * Actions */// Create tracking versionif (isset($_REQUEST['submit_create_version'])) {    $tracking_set = '';    if ($_REQUEST['alter_table'] == true) {        $tracking_set .= 'ALTER TABLE,';    }    if ($_REQUEST['rename_table'] == true) {        $tracking_set .= 'RENAME TABLE,';    }    if ($_REQUEST['create_table'] == true) {        $tracking_set .= 'CREATE TABLE,';    }    if ($_REQUEST['drop_table'] == true) {        $tracking_set .= 'DROP TABLE,';    }    if ($_REQUEST['create_index'] == true) {        $tracking_set .= 'CREATE INDEX,';    }    if ($_REQUEST['drop_index'] == true) {        $tracking_set .= 'DROP INDEX,';    }    if ($_REQUEST['insert'] == true) {        $tracking_set .= 'INSERT,';    }    if ($_REQUEST['update'] == true) {        $tracking_set .= 'UPDATE,';    }    if ($_REQUEST['delete'] == true) {        $tracking_set .= 'DELETE,';    }    if ($_REQUEST['truncate'] == true) {        $tracking_set .= 'TRUNCATE,';    }    $tracking_set = rtrim($tracking_set, ',');    if (PMA_Tracker::createVersion($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'], $tracking_set )) {        $msg = PMA_Message::success(sprintf(__('Version %s is created, tracking for %s.%s is activated.'), htmlspecialchars($_REQUEST['version']), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])));        $msg->display();    }}// Deactivate trackingif (isset($_REQUEST['submit_deactivate_now'])) {    if (PMA_Tracker::deactivateTracking($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'])) {        $msg = PMA_Message::success(sprintf(__('Tracking for %s.%s , version %s is deactivated.'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table']), htmlspecialchars($_REQUEST['version'])));        $msg->display();    }}// Activate trackingif (isset($_REQUEST['submit_activate_now'])) {    if (PMA_Tracker::activateTracking($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'])) {        $msg = PMA_Message::success(sprintf(__('Tracking for %s.%s , version %s is activated.'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table']), htmlspecialchars($_REQUEST['version'])));        $msg->display();    }}// Export as SQL executionif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'execution') {    foreach ($entries as $entry) {        $sql_result = PMA_DBI_query( "/*NOTRACK*/\n" . $entry['statement'] );    }    $msg = PMA_Message::success(__('SQL statements executed.'));    $msg->display();}// Export as SQL dumpif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'sqldump') {    $new_query =    "# " . __('You can execute the dump by creating and using a temporary database. Please ensure that you have the privileges to do so.') . "\n" .                    "# " . __('Comment out these two lines if you do not need them.') . "\n" .                    "\n" .                    "CREATE database IF NOT EXISTS pma_temp_db; \n" .                    "USE pma_temp_db; \n" .                    "\n";    foreach ($entries as $entry) {        $new_query .= $entry['statement'];    }    $msg = PMA_Message::success(__('SQL statements exported. Please copy the dump or execute it.'));    $msg->display();    $db_temp = $db;    $table_temp = $table;    $db = $table = '';    include_once './libraries/sql_query_form.lib.php';    PMA_sqlQueryForm($new_query, 'sql');    $db = $db_temp;    $table = $table_temp;}/* * Schema snapshot */if (isset($_REQUEST['snapshot'])) {?>    <h3><?php echo __('Structure snapshot');?>  [<a href="tbl_tracking.php?<?php echo $url_query;?>"><?php echo __('Close');?></a>]</h3><?php    $data = PMA_Tracker::getTrackedData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version']);    // Get first DROP TABLE and CREATE TABLE statements    $drop_create_statements = $data['ddlog'][0]['statement'];    if (strstr($data['ddlog'][0]['statement'], 'DROP TABLE')) {        $drop_create_statements .= $data['ddlog'][1]['statement'];    }    // Print SQL code    PMA_showMessage(sprintf(__('Version %s snapshot (SQL code)'), htmlspecialchars($_REQUEST['version'])), $drop_create_statements);    // Unserialize snapshot    $temp = unserialize($data['schema_snapshot']);    $columns = $temp['COLUMNS'];    $indexes = $temp['INDEXES'];?>    <h3><?php echo __('Structure');?></h3>    <table id="tablestructure" class="data">    <thead>    <tr>        <th><?php echo __('Column'); ?></th>        <th><?php echo __('Type'); ?></th>        <th><?php echo __('Collation'); ?></th>        <th><?php echo __('Null'); ?></th>        <th><?php echo __('Default'); ?></th>        <th><?php echo __('Extra'); ?></th>        <th><?php echo __('Comment'); ?></th>    </tr>    </thead>    <tbody><?php    $style = 'odd';    foreach ($columns as $field_index => $field) {?>        <tr class="noclick <?php echo $style; ?>">            <?php            if ($field['Key'] == 'PRI') {                echo '<td><b><u>' . htmlspecialchars($field['Field']) . '</u></b></td>' . "\n";            } else {                echo '<td><b>' . htmlspecialchars($field['Field']) . '</b></td>' . "\n";            }            ?>            <td><?php echo htmlspecialchars($field['Type']);?></td>            <td><?php echo htmlspecialchars($field['Collation']);?></td>            <td><?php echo (($field['Null'] == 'YES') ? __('Yes') : __('No')); ?></td>            <td><?php            if (isset($field['Default'])) {                $extracted_fieldspec = PMA_extractFieldSpec($field['Type']);                if ($extracted_fieldspec['type'] == 'bit') {                    // here, $field['Default'] contains something like b'010'                    echo PMA_convert_bit_default_value($field['Default']);                } else {                    echo htmlspecialchars($field['Default']);                }            } else {                if ($field['Null'] == 'YES') {                    echo '<i>NULL</i>';                } else {                    echo '<i>' . _pgettext('None for default', 'None') . '</i>';                }            } ?></td>            <td><?php echo htmlspecialchars($field['Extra']);?></td>            <td><?php echo htmlspecialchars($field['Comment']);?></td>        </tr><?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }    }?>    </tbody>    </table><?php    if (count($indexes) > 0) {?>        <h3><?php echo __('Indexes');?></h3>        <table id="tablestructure_indexes" class="data">        <thead>        <tr>            <th><?php echo __('Keyname');?></th>            <th><?php echo __('Type');?></th>            <th><?php echo __('Unique');?></th>            <th><?php echo __('Packed');?></th>            <th><?php echo __('Column');?></th>            <th><?php echo __('Cardinality');?></th>            <th><?php echo __('Collation');?></th>            <th><?php echo __('Null');?></th>            <th><?php echo __('Comment');?></th>        </tr>        <tbody><?php        $style = 'odd';        foreach ($indexes as $indexes_index => $index) {            if ($index['Non_unique'] == 0) {                $str_unique = __('Yes');            } else {                $str_unique = __('No');            }            if ($index['Packed'] != '') {                $str_packed = __('Yes');            } else {                $str_packed = __('No');            }?>            <tr class="noclick <?php echo $style; ?>">                <td><b><?php echo htmlspecialchars($index['Key_name']);?></b></td>                <td><?php echo htmlspecialchars($index['Index_type']);?></td>                <td><?php echo $str_unique;?></td>                <td><?php echo $str_packed;?></td>                <td><?php echo htmlspecialchars($index['Column_name']);?></td>                <td><?php echo htmlspecialchars($index['Cardinality']);?></td>                <td><?php echo htmlspecialchars($index['Collation']);?></td>                <td><?php echo htmlspecialchars($index['Null']);?></td>                <td><?php echo htmlspecialchars($index['Comment']);?></td>            </tr><?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }        }?>    </tbody>    </table><?php    } // endif?>    <br /><hr /><br /><?php}// end of snapshot report/* *  Tracking report */if (isset($_REQUEST['report']) && (isset($_REQUEST['delete_ddlog']) || isset($_REQUEST['delete_dmlog']))) {    if (isset($_REQUEST['delete_ddlog'])) {        // Delete ddlog row data        $delete_id = $_REQUEST['delete_ddlog'];        // Only in case of valable id        if ($delete_id == (int)$delete_id) {            unset($data['ddlog'][$delete_id]);            if (PMA_Tracker::changeTrackingData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version'], 'DDL', $data['ddlog']))                $msg = PMA_Message::success(__('Tracking data definition successfully deleted'));            else                $msg = PMA_Message::rawError(__('Query error'));            $msg->display();        }    }    if (isset($_REQUEST['delete_dmlog'])) {        // Delete dmlog row data        $delete_id = $_REQUEST['delete_dmlog'];        // Only in case of valable id        if ($delete_id == (int)$delete_id) {            unset($data['dmlog'][$delete_id]);            if (PMA_Tracker::changeTrackingData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version'], 'DML', $data['dmlog']))                $msg = PMA_Message::success(__('Tracking data manipulation successfully deleted'));            else                $msg = PMA_Message::rawError(__('Query error'));            $msg->display();        }    }}if (isset($_REQUEST['report']) || isset($_REQUEST['report_export'])) {    ?>    <h3><?php echo __('Tracking report');?>  [<a href="tbl_tracking.php?<?php echo $url_query;?>"><?php echo __('Close');?></a>]</h3>    <small><?php echo __('Tracking statements') . ' ' . htmlspecialchars($data['tracking']); ?></small><br/>    <br/>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <?php    $str1 = '<select name="logtype">' .            '<option value="schema"' . ($selection_schema ? ' selected="selected"' : '') . '>' . __('Structure only') . '</option>' .            '<option value="data"' . ($selection_data ? ' selected="selected"' : ''). '>' . __('Data only') . '</option>' .            '<option value="schema_and_data"' . ($selection_both ? ' selected="selected"' : '') . '>' . __('Structure and data') . '</option>' .            '</select>';    $str2 = '<input type="text" name="date_from" value="' . htmlspecialchars($_REQUEST['date_from']) . '" size="19" />';    $str3 = '<input type="text" name="date_to" value="' . htmlspecialchars($_REQUEST['date_to']) . '" size="19" />';    $str4 = '<input type="text" name="users" value="' . htmlspecialchars($_REQUEST['users']) . '" />';    $str5 = '<input type="submit" name="list_report" value="' . __('Go') . '" />';    printf(__('Show %s with dates from %s to %s by user %s %s'), $str1, $str2, $str3, $str4, $str5);    // Prepare delete link content here    $drop_image_or_text = '';    if (true == $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= PMA_getImage('b_drop.png', __('Delete tracking data row from report'));    }    if ('both' === $GLOBALS['cfg']['PropertiesIconic'] || false === $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= __('Delete');    }    /*     *  First, list tracked data definition statements     */    $i = 1;    if (count($data['ddlog']) == 0 && count($data['dmlog']) == 0) {        $msg = PMA_Message::notice(__('No data'));        $msg->display();    }    if ($selection_schema || $selection_both  && count($data['ddlog']) > 0) {    ?>        <table id="ddl_versions" class="data" width="100%">        <thead>        <tr>            <th width="18">#</th>            <th width="100"><?php echo __('Date');?></th>            <th width="60"><?php echo __('Username');?></th>            <th><?php echo __('Data definition statement');?></th>            <th><?php echo __('Delete');?></th>        </tr>        </thead>        <tbody>        <?php        $style = 'odd';        foreach ($data['ddlog'] as $entry) {            if (strlen($entry['statement']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                $statement = substr($entry['statement'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';            } else {                $statement  = PMA_formatSql(PMA_SQP_parse($entry['statement']));            }            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {        ?>                <tr class="noclick <?php echo $style; ?>">                    <td><small><?php echo $i;?></small></td>                    <td><small><?php echo htmlspecialchars($entry['date']);?></small></td>                    <td><small><?php echo htmlspecialchars($entry['username']); ?></small></td>                    <td><?php echo $statement; ?></td>                    <td nowrap="nowrap"><a href="tbl_tracking.php?<?php echo $url_query;?>&amp;report=true&amp;version=<?php echo $version['version'];?>&amp;delete_ddlog=<?php echo $i-1; ?>"><?php echo $drop_image_or_text; ?></a></td>                </tr>        <?php                if ($style == 'even') {                    $style = 'odd';                } else {                    $style = 'even';                }                $i++;            }        }        ?>        </tbody>        </table>    <?php    } //endif    // Memorize data definition amount    $ddlog_count = $i;    /*     *  Secondly, list tracked data manipulation statements     */    if (($selection_data || $selection_both) && count($data['dmlog']) > 0) {    ?>        <table id="dml_versions" class="data" width="100%">        <thead>        <tr>            <th width="18">#</th>            <th width="100"><?php echo __('Date');?></th>            <th width="60"><?php echo __('Username');?></th>            <th><?php echo __('Data manipulation statement');?></th>            <th><?php echo __('Delete');?></th>        </tr>        </thead>        <tbody>        <?php        $style = 'odd';        foreach ($data['dmlog'] as $entry) {            if (strlen($entry['statement']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                $statement = substr($entry['statement'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';            } else {                $statement  = PMA_formatSql(PMA_SQP_parse($entry['statement']));            }            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {        ?>                <tr class="noclick <?php echo $style; ?>">                    <td><small><?php echo $i; ?></small></td>                    <td><small><?php echo htmlspecialchars($entry['date']); ?></small></td>                    <td><small><?php echo htmlspecialchars($entry['username']); ?></small></td>                    <td><?php echo $statement; ?></td>                    <td nowrap="nowrap"><a href="tbl_tracking.php?<?php echo $url_query;?>&amp;report=true&amp;version=<?php echo $version['version'];?>&amp;delete_dmlog=<?php echo $i-$ddlog_count; ?>"><?php echo $drop_image_or_text; ?></a></td>                </tr>        <?php                if ($style == 'even') {                    $style = 'odd';                } else {                    $style = 'even';                }                $i++;            }        }    ?>        </tbody>        </table>    <?php    }    ?>    </form>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <?php    printf(__('Show %s with dates from %s to %s by user %s %s'), $str1, $str2, $str3, $str4, $str5);    $str_export1 =  '<select name="export_type">' .                    '<option value="sqldumpfile">' . __('SQL dump (file download)') . '</option>' .                    '<option value="sqldump">' . __('SQL dump') . '</option>' .                    '<option value="execution" onclick="alert(\'' . PMA_escapeJsString(__('This option will replace your table and contained data.')) .'\')">' . __('SQL execution') . '</option>' .                    '</select>';    $str_export2 = '<input type="submit" name="report_export" value="' . __('Go') .'" />';    ?>    </form>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <input type="hidden" name="logtype" value="<?php echo htmlspecialchars($_REQUEST['logtype']);?>" />    <input type="hidden" name="date_from" value="<?php echo htmlspecialchars($_REQUEST['date_from']);?>" />    <input type="hidden" name="date_to" value="<?php echo htmlspecialchars($_REQUEST['date_to']);?>" />    <input type="hidden" name="users" value="<?php echo htmlspecialchars($_REQUEST['users']);?>" />    <?php    echo "<br/>" . sprintf(__('Export as %s'), $str_export1) . $str_export2 . "<br/>";    ?>    </form>    <?php    echo "<br/><br/><hr/><br/>\n";} // end of report/* * List selectable tables */$sql_query = " SELECT DISTINCT db_name, table_name FROM " .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . "." .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             " WHERE db_name = '" . PMA_sqlAddSlashes($GLOBALS['db']) . "' " .             " ORDER BY db_name, table_name";$sql_result = PMA_query_as_controluser($sql_query);if (PMA_DBI_num_rows($sql_result) > 0) {?>    <form method="post" action="tbl_tracking.php?<?php echo $url_query;?>">    <select name="table">    <?php    while ($entries = PMA_DBI_fetch_array($sql_result)) {        if (PMA_Tracker::isTracked($entries['db_name'], $entries['table_name'])) {            $status = ' (' . __('active') . ')';        } else {            $status = ' (' . __('not active') . ')';        }        if ($entries['table_name'] == $_REQUEST['table']) {            $s = ' selected="selected"';        } else {            $s = '';        }        echo '<option value="' . htmlspecialchars($entries['table_name']) . '"' . $s . '>' . htmlspecialchars($entries['db_name']) . ' . ' . htmlspecialchars($entries['table_name']) . $status . '</option>' . "\n";    }    ?>    </select>    <input type="submit" name="show_versions_submit" value="<?php echo __('Show versions');?>" />    </form><?php}?><br /><?php/* * List versions of current table */$sql_query = " SELECT * FROM " .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . "." .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             " WHERE db_name = '" . PMA_sqlAddSlashes($_REQUEST['db']) . "' ".             " AND table_name = '" . PMA_sqlAddSlashes($_REQUEST['table']) ."' ".             " ORDER BY version DESC ";$sql_result = PMA_query_as_controluser($sql_query);$last_version = 0;$maxversion = PMA_DBI_fetch_array($sql_result);$last_version = $maxversion['version'];if ($last_version > 0) {?>    <table id="versions" class="data">    <thead>    <tr>        <th><?php echo __('Database');?></th>        <th><?php echo __('Table');?></th>        <th><?php echo __('Version');?></th>        <th><?php echo __('Created');?></th>        <th><?php echo __('Updated');?></th>        <th><?php echo __('Status');?></th>        <th><?php echo __('Show');?></th>    </tr>    </thead>    <tbody>    <?php    $style = 'odd';    PMA_DBI_data_seek($sql_result, 0);    while ($version = PMA_DBI_fetch_array($sql_result)) {        if ($version['tracking_active'] == 1) {            $version_status = __('active');        } else {            $version_status = __('not active');        }        if ($version['version'] == $last_version) {            if ($version['tracking_active'] == 1) {                $tracking_active = true;            } else {                $tracking_active = false;            }        }    ?>        <tr class="noclick <?php echo $style;?>">            <td><?php echo htmlspecialchars($version['db_name']);?></td>            <td><?php echo htmlspecialchars($version['table_name']);?></td>            <td><?php echo htmlspecialchars($version['version']);?></td>            <td><?php echo htmlspecialchars($version['date_created']);?></td>            <td><?php echo htmlspecialchars($version['date_updated']);?></td>            <td><?php echo $version_status;?></td>            <td> <a href="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $version['version']));?>"><?php echo __('Tracking report');?></a>                | <a href="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('snapshot' => 'true', 'version' => $version['version']));?>"><?php echo __('Structure snapshot');?></a>            </td>        </tr>    <?php        if ($style == 'even') {            $style = 'odd';        } else {            $style = 'even';        }    }    ?>    </tbody>    </table>    <?php if ($tracking_active == true) {?>        <div id="div_deactivate_tracking">        <form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>">        <fieldset>            <legend><?php printf(__('Deactivate tracking for %s.%s'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>            <input type="hidden" name="version" value="<?php echo $last_version; ?>" />            <input type="submit" name="submit_deactivate_now" value="<?php echo __('Deactivate now'); ?>" />        </fieldset>        </form>        </div>    <?php    }    ?>    <?php if ($tracking_active == false) {?>        <div id="div_activate_tracking">        <form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>">        <fieldset>            <legend><?php printf(__('Activate tracking for %s.%s'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>            <input type="hidden" name="version" value="<?php echo $last_version; ?>" />            <input type="submit" name="submit_activate_now" value="<?php echo __('Activate now'); ?>" />        </fieldset>        </form>        </div>    <?php    }}?><div id="div_create_version"><form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><fieldset>    <legend><?php printf(__('Create version %s of %s.%s'), ($last_version + 1), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>    <input type="hidden" name="version" value="<?php echo ($last_version + 1); ?>" />    <p><?php echo __('Track these data definition statements:');?></p>    <input type="checkbox" name="alter_table" value="true" checked="checked" /> ALTER TABLE<br/>    <input type="checkbox" name="rename_table" value="true" checked="checked" /> RENAME TABLE<br/>    <input type="checkbox" name="create_table" value="true" checked="checked" /> CREATE TABLE<br/>    <input type="checkbox" name="drop_table" value="true" checked="checked" /> DROP TABLE<br/>    <br/>    <input type="checkbox" name="create_index" value="true" checked="checked" /> CREATE INDEX<br/>    <input type="checkbox" name="drop_index" value="true" checked="checked" /> DROP INDEX<br/>    <p><?php echo __('Track these data manipulation statements:');?></p>    <input type="checkbox" name="insert" value="true" checked="checked" /> INSERT<br/>    <input type="checkbox" name="update" value="true" checked="checked" /> UPDATE<br/>    <input type="checkbox" name="delete" value="true" checked="checked" /> DELETE<br/>    <input type="checkbox" name="truncate" value="true" checked="checked" /> TRUNCATE<br/></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_create_version" value="<?php echo __('Create version'); ?>" /></fieldset></form></div><br class="clearfloat"/><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Provides download to a given field defined in parameters. * @package PhpMyAdmin *//** * Common functions. */require_once './libraries/common.inc.php';require_once './libraries/mime.lib.php';/* Check parameters */PMA_checkParameters(array('db', 'table', 'where_clause', 'transform_key'));/* Select database */if (!PMA_DBI_select_db($db)) {    PMA_mysqlDie(sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($db)),        '', '');}/* Check if table exists */if (!PMA_DBI_get_columns($db, $table)) {    PMA_mysqlDie(__('Invalid table name'));}/* Grab data */$sql = 'SELECT ' . PMA_backquote($transform_key) . ' FROM ' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';';$result = PMA_DBI_fetch_value($sql);/* Check return code */if ($result === false) {    PMA_mysqlDie(__('MySQL returned an empty result set (i.e. zero rows).'), $sql);}/* Avoid corrupting data */@ini_set('url_rewriter.tags', '');PMA_download_header(    $table . '-' .  $transform_key . '.bin',    PMA_detectMIME($result),    strlen($result)    );echo $result;?>
<?php/** * URL redirector to avoid leaking Referer with some sensitive information. *//** * Gets core libraries and defines some variables */require_once './libraries/common.inc.php';if (! PMA_isValid($_GET['url']) || ! preg_match('/^https?:\/\/[^\n\r]*$/', $_GET['url'])) {    header('Location: ' . $cfg['PmaAbsoluteUri']);} else {    header('Location: ' . $_GET['url']);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Formset processing library * * @package PhpMyAdmin-setup *//** * Processes forms registered in $form_display, handles error correction * * @param FormDisplay $form_display */function process_formset(FormDisplay $form_display){    if (filter_input(INPUT_GET, 'mode') == 'revert') {        // revert erroneous fields to their default values        $form_display->fixErrors();        // drop post data        header('HTTP/1.1 303 See Other');        header('Location: index.php');        exit;    }    if (!$form_display->process(false)) {        // handle form view and failed POST        $form_display->display(true, true);    } else {        // check for form errors        if ($form_display->hasErrors()) {            // form has errors, show warning            $separator = PMA_get_arg_separator('html');            $page = filter_input(INPUT_GET, 'page');            $formset = filter_input(INPUT_GET, 'formset');            $formset = $formset ? "{$separator}formset=$formset" : '';            $id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);            if ($id === null && $page == 'servers') {                // we've just added a new server, get it's id                $id = ConfigFile::getInstance()->getServerCount();            }            $id = $id ? "{$separator}id=$id" : '';            ?>            <div class="error">                <h4><?php echo __('Warning') ?></h4>                <?php echo __('Submitted form contains errors') ?><br />                <a href="?page=<?php echo $page . $formset . $id . $separator ?>mode=revert"><?php echo __('Try to revert erroneous fields to their default values') ?></a>            </div>            <?php $form_display->displayErrors() ?>            <a class="btn" href="index.php"><?php echo __('Ignore errors') ?></a>            &nbsp;            <a class="btn" href="?page=<?php echo $page . $formset . $id . $separator ?>mode=edit"><?php echo __('Show form') ?></a>            <?php        } else {            // drop post data            header('HTTP/1.1 303 See Other');            header('Location: index.php');            exit;        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Validation callback. * * @package PhpMyAdmin-setup *//** * Core libraries. */require './lib/common.inc.php';$validators = array();require './libraries/config/validate.lib.php';header('Content-type: application/json');$vids = explode(',', filter_input(INPUT_POST, 'id'));$values = json_decode(filter_input(INPUT_POST, 'values'));if (!($values instanceof stdClass)) {    die(__('Wrong data'));}$values = (array)$values;$result = PMA_config_validate($vids, $values, true);if ($result === false) {    $result = 'Wrong data or no validation for ' . $vids;}echo $result !== true ? json_encode($result) : '';?>
