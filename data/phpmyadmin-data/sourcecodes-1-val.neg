<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build LaTeX dumps of tables * * @package PhpMyAdmin-Export * @subpackage Latex */if (! defined('PHPMYADMIN')) {    exit;}/* Messages used in default captions */$GLOBALS['strLatexContent'] = __('Content of table @TABLE@');$GLOBALS['strLatexContinued'] = __('(continued)');$GLOBALS['strLatexStructure'] = __('Structure of table @TABLE@');/** * */if (isset($plugin_list)) {    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && ! $plugin_param['single_table']) {        $hide_structure = true;    }    $plugin_list['latex'] = array(        'text' => __('LaTeX'),        'extension' => 'tex',        'mime_type' => 'application/x-tex',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'caption', 'text' => __('Include table caption')),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );    /* what to dump (structure/data/both) */    $plugin_list['latex']['options'][]        = array('type' => 'begin_group', 'name' => 'dump_what', 'text' => __('Dump table'));    $plugin_list['latex']['options'][]        = array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data')));    $plugin_list['latex']['options'][] = array('type' => 'end_group');    /* Structure options */    if (! $hide_structure) {        $plugin_list['latex']['options'][]            = array('type' => 'begin_group', 'name' => 'structure', 'text' => __('Object creation options'), 'force' => 'data');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_caption', 'text' => __('Table caption'), 'doc' => 'faq6_27');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_continued_caption', 'text' => __('Table caption (continued)'), 'doc' => 'faq6_27');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_label', 'text' => __('Label key'), 'doc' => 'faq6_27');        if (! empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['latex']['options'][]                = array('type' => 'bool', 'name' => 'relation', 'text' => __('Display foreign key relationships'));        }        $plugin_list['latex']['options'][]            = array('type' => 'bool', 'name' => 'comments', 'text' => __('Display comments'));        if (! empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['latex']['options'][]                = array('type' => 'bool', 'name' => 'mime', 'text' => __('Display MIME types'));        }        $plugin_list['latex']['options'][]            = array('type' => 'end_group');    }    /* Data */    $plugin_list['latex']['options'][]        = array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure');    $plugin_list['latex']['options'][]        = array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row'));    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_caption', 'text' => __('Table caption'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_continued_caption', 'text' => __('Table caption (continued)'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_label', 'text' => __('Label key'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:'));    $plugin_list['latex']['options'][]        = array('type' => 'end_group');} else {    /**     * Escapes some special characters for use in TeX/LaTeX     *     * @param string $string the string to convert     *     * @return  string      the converted string with escape codes     *     * @access  private     */    function PMA_texEscape($string)    {        $escape = array('$', '%', '{', '}',  '&',  '#', '_', '^');        $cnt_escape = count($escape);        for ($k=0; $k < $cnt_escape; $k++) {            $string = str_replace($escape[$k], '\\' . $escape[$k], $string);        }        return $string;    }    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportHeader()    {        global $crlf;        global $cfg;        $head  =  '% phpMyAdmin LaTeX Dump' . $crlf               .  '% version ' . PMA_VERSION . $crlf               .  '% http://www.phpmyadmin.net' . $crlf               .  '%' . $crlf               .  '% ' . __('Host') . ': ' . $cfg['Server']['host'];        if (! empty($cfg['Server']['port'])) {             $head .= ':' . $cfg['Server']['port'];        }        $head .= $crlf               .  '% ' . __('Generation Time') . ': ' . PMA_localisedDate() . $crlf               .  '% ' . __('Server version') . ': ' . PMA_MYSQL_STR_VERSION . $crlf               .  '% ' . __('PHP Version') . ': ' . phpversion() . $crlf;        return PMA_exportOutputHandler($head);    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        global $crlf;        $head = '% ' . $crlf              . '% ' . __('Database') . ': ' . '\'' . $db . '\'' . $crlf              . '% ' . $crlf;        return PMA_exportOutputHandler($head);    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in LaTeX table/sideways table environment     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = PMA_DBI_field_name($result, $i);        }        unset($i);        $buffer      = $crlf . '%' . $crlf . '% ' . __('Data') . ': ' . $table            . $crlf . '%' . $crlf . ' \\begin{longtable}{|';        for ($index = 0; $index < $columns_cnt; $index++) {            $buffer .= 'l|';        }        $buffer .= '} ' . $crlf ;        $buffer .= ' \\hline \\endhead \\hline \\endfoot \\hline ' . $crlf;        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_data_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\label{'                . PMA_expandUserString(                    $GLOBALS['latex_data_label'],                    null,                    array('table' => $table, 'database' => $db)                )                . '} \\\\';        }        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        // show column names        if (isset($GLOBALS['latex_columns'])) {            $buffer = '\\hline ';            for ($i = 0; $i < $columns_cnt; $i++) {                $buffer .= '\\multicolumn{1}{|c|}{\\textbf{'                    . PMA_texEscape(stripslashes($columns[$i])) . '}} & ';            }            $buffer = substr($buffer, 0, -2) . '\\\\ \\hline \hline ';            if (! PMA_exportOutputHandler($buffer . ' \\endfirsthead ' . $crlf)) {                return false;            }            if (isset($GLOBALS['latex_caption'])) {                if (! PMA_exportOutputHandler(                    '\\caption{'                    . PMA_expandUserString(                        $GLOBALS['latex_data_continued_caption'],                        'PMA_texEscape',                        array('table' => $table, 'database' => $db)                    )                    . '} \\\\ '                )) {                    return false;                }            }            if (! PMA_exportOutputHandler($buffer . '\\endhead \\endfoot' . $crlf)) {                return false;            }        } else {            if (! PMA_exportOutputHandler('\\\\ \hline')) {                return false;            }        }        // print the whole table        while ($record = PMA_DBI_fetch_assoc($result)) {            $buffer = '';            // print each row            for ($i = 0; $i < $columns_cnt; $i++) {                if (isset($record[$columns[$i]])                    && (! function_exists('is_null') || ! is_null($record[$columns[$i]]))                ) {                    $column_value = PMA_texEscape(stripslashes($record[$columns[$i]]));                } else {                    $column_value = $GLOBALS['latex_null'];                }                // last column ... no need for & character                if ($i == ($columns_cnt - 1)) {                    $buffer .= $column_value;                } else {                    $buffer .= $column_value . " & ";                }            }            $buffer .= ' \\\\ \\hline ' . $crlf;            if (! PMA_exportOutputHandler($buffer)) {                return false;            }        }        $buffer = ' \\end{longtable}' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        PMA_DBI_free_result($result);        return true;    } // end getTableLaTeX    /**     * Outputs table's structure     *     * @param string $db          database name     * @param string $table       table name     * @param string $crlf        the end of line sequence     * @param string $error_url   the url to go back in case of error     * @param bool   $do_relation whether to include relation comments     * @param bool   $do_comments whether to include the pmadb-style column comments     *                            as comments in the structure; this is deprecated     *                            but the parameter is left here because export.php     *                            calls PMA_exportStructure() also for other export     *                            types which use this parameter     * @param bool   $do_mime     whether to include mime comments     * @param bool   $dates       whether to include creation/update/check dates     * @param string $export_mode 'create_table', 'triggers', 'create_view', 'stand_in'     * @param string $export_type 'server', 'database', 'table'     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $buffer      = $crlf . '%' . $crlf . '% ' . __('Structure') . ': ' . $table            . $crlf . '%' . $crlf . ' \\begin{longtable}{';        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        $columns_cnt = 4;        $alignment = '|l|c|c|c|';        if ($do_relation && $have_rel) {            $columns_cnt++;            $alignment .= 'l|';        }        if ($do_comments) {            $columns_cnt++;            $alignment .= 'l|';        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;            $alignment .='l|';        }        $buffer = $alignment . '} ' . $crlf ;        $header = ' \\hline ';        $header .= '\\multicolumn{1}{|c|}{\\textbf{' . __('Column')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Type')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Null')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Default') . '}}';        if ($do_relation && $have_rel) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{' . __('Links to') . '}}';        }        if ($do_comments) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{' . __('Comments') . '}}';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{MIME}}';            $mime_map = PMA_getMIME($db, $table, true);        }        // Table caption for first page and label        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\label{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_label'],                    null,                    array('table' => $table, 'database' => $db)                )                . '} \\\\' . $crlf;        }        $buffer .= $header . ' \\\\ \\hline \\hline' . $crlf . '\\endfirsthead' . $crlf;        // Table caption on next pages        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_continued_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\\\ ' . $crlf;        }        $buffer .= $header . ' \\\\ \\hline \\hline \\endhead \\endfoot ' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        $fields = PMA_DBI_get_columns($db, $table);        foreach ($fields as $row) {            $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);            $type = $extracted_fieldspec['print_type'];            if (empty($type)) {                $type     = ' ';            }            if (! isset($row['Default'])) {                if ($row['Null'] != 'NO') {                    $row['Default'] = 'NULL';                }            }            $field_name = $row['Field'];            $local_buffer = $field_name . "\000" . $type . "\000"                . (($row['Null'] == '' || $row['Null'] == 'NO') ? __('No') : __('Yes'))                . "\000" . (isset($row['Default']) ? $row['Default'] : '');            if ($do_relation && $have_rel) {                $local_buffer .= "\000";                if (isset($res_rel[$field_name])) {                    $local_buffer .= $res_rel[$field_name]['foreign_table'] . ' ('                        . $res_rel[$field_name]['foreign_field'] . ')';                }            }            if ($do_comments && $cfgRelation['commwork']) {                $local_buffer .= "\000";                if (isset($comments[$field_name])) {                    $local_buffer .= $comments[$field_name];                }            }            if ($do_mime && $cfgRelation['mimework']) {                $local_buffer .= "\000";                if (isset($mime_map[$field_name])) {                    $local_buffer .= str_replace('_', '/', $mime_map[$field_name]['mimetype']);                }            }            $local_buffer = PMA_texEscape($local_buffer);            if ($row['Key']=='PRI') {                $pos=strpos($local_buffer, "\000");                $local_buffer = '\\textit{' . substr($local_buffer, 0, $pos) . '}' . substr($local_buffer, $pos);            }            if (in_array($field_name, $unique_keys)) {                $pos=strpos($local_buffer, "\000");                $local_buffer = '\\textbf{' . substr($local_buffer, 0, $pos) . '}' . substr($local_buffer, $pos);            }            $buffer = str_replace("\000", ' & ', $local_buffer);            $buffer .= ' \\\\ \\hline ' . $crlf;            if (! PMA_exportOutputHandler($buffer)) {                return false;            }        } // end while        $buffer = ' \\end{longtable}' . $crlf;        return PMA_exportOutputHandler($buffer);    } // end of the 'PMA_exportStructure' function} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * DocSQL import plugin for phpMyAdmin * * @package PhpMyAdmin-Import * @subpackage DocSQL */if (! defined('PHPMYADMIN')) {    exit;}/** * Load relations. */$cfgRelation = PMA_getRelationsParam();/** * We need relations enabled and we work only on database */if ($plugin_param !== 'database' || $GLOBALS['num_tables'] < 1 || ! $cfgRelation['relwork'] || ! $cfgRelation['commwork']) {    return;}if (isset($plugin_list)) {    $plugin_list['docsql'] = array(           // set name of your plugin        'text' => __('DocSQL'),                // text to be displayed as choice        'extension' => '',                  // extension this plugin can handle        'options' => array(                 // array of options for your plugin (optional)            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'text', 'name' => 'table', 'text' => __('Table name')),            array('type' => 'end_group')        ),        'options_text' => __('Options'), // text to describe plugin options (must be set if options are used)        );    /* We do not define function when plugin is just queried for information above */    return;}$tab = $_POST['docsql_table'];$buffer = '';/* Read whole buffer, we except it is small enough */while (!$finished && !$error && !$timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        // subtract data we didn't handle yet and stop processing        break;    } elseif ($data === true) {        // nothing to read        break;    } else {        // Append new data to buffer        $buffer .= $data;    }} // End of import loop/* Process the data */if ($data === true && !$error && !$timeout_passed) {    $buffer = str_replace("\r\n", "\n", $buffer);    $buffer = str_replace("\r", "\n", $buffer);    $lines = explode("\n", $buffer);    foreach ($lines AS $lkey => $line) {        //echo '<p>' . $line . '</p>';        $inf     = explode('|', $line);        if (!empty($inf[1]) && strlen(trim($inf[1])) > 0) {            $qry = '                 INSERT INTO                        ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '                      (db_name, table_name, column_name, comment)                 VALUES (                        \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\',                        \'' . PMA_sqlAddSlashes(trim($tab)) . '\',                        \'' . PMA_sqlAddSlashes(trim($inf[0])) . '\',                        \'' . PMA_sqlAddSlashes(trim($inf[1])) . '\')';            PMA_importRunQuery($qry, $qry . '-- ' . htmlspecialchars($tab) . '.' . htmlspecialchars($inf[0]), true);        } // end inf[1] exists        if (!empty($inf[2]) && strlen(trim($inf[2])) > 0) {            $for = explode('->', $inf[2]);            $qry = '                 INSERT INTO                        ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation']) . '                      (master_db, master_table, master_field, foreign_db, foreign_table, foreign_field)                 VALUES (                        \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\',                        \'' . PMA_sqlAddSlashes(trim($tab)) . '\',                        \'' . PMA_sqlAddSlashes(trim($inf[0])) . '\',                        \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\',                        \'' . PMA_sqlAddSlashes(trim($for[0])) . '\',                        \'' . PMA_sqlAddSlashes(trim($for[1])) . '\')';            PMA_importRunQuery($qry, $qry . '-- ' . htmlspecialchars($tab) . '.' . htmlspecialchars($inf[0]) . '(' . htmlspecialchars($inf[2]) . ')', true);        } // end inf[2] exists    } // End lines loop} // End import// Commit any possible data in buffersPMA_importRunQuery();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * manipulation of table data like inserting, replacing and updating * * usally called as form action from tbl_change.php to insert or update table rows * * * @todo 'edit_next' tends to not work as expected if used ... at least there is no order by *       it needs the original query and the row number and than replace the LIMIT clause * @package PhpMyAdmin *//** * do not import request variable into global scope * * cannot be used as long as it could happen that the $goto file that is included * at the end of this script is not updated to work without imported request variables * * @todo uncomment this if all possible included files to rely on import request variablesif (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);} *//** * Gets some core libraries */require_once './libraries/common.inc.php';$blob_streaming_active = $GLOBALS['PMA_Config']->get('BLOBSTREAMING_PLUGINS_EXIST');// Check parametersPMA_checkParameters(array('db', 'table', 'goto'));PMA_DBI_select_db($GLOBALS['db']);/** * Initializes some variables */$goto_include = false;$GLOBALS['js_include'][] = 'makegrid.js';// Needed for generation of Inline Edit anchors$GLOBALS['js_include'][] = 'sql.js';if (isset($_REQUEST['insert_rows']) && is_numeric($_REQUEST['insert_rows']) && $_REQUEST['insert_rows'] != $cfg['InsertRows']) {    $cfg['InsertRows'] = $_REQUEST['insert_rows'];    $GLOBALS['js_include'][] = 'tbl_change.js';    include_once './libraries/header.inc.php';    include './tbl_change.php';    exit;}if (isset($_REQUEST['after_insert']) && in_array($_REQUEST['after_insert'], array('new_insert', 'same_insert', 'edit_next'))) {    $url_params['after_insert'] = $_REQUEST['after_insert'];    //$GLOBALS['goto'] = 'tbl_change.php';    $goto_include = 'tbl_change.php';    if (isset($_REQUEST['where_clause'])) {        if ($_REQUEST['after_insert'] == 'same_insert') {            foreach ($_REQUEST['where_clause'] as $one_where_clause) {                $url_params['where_clause'][] = $one_where_clause;            }        } elseif ($_REQUEST['after_insert'] == 'edit_next') {            foreach ($_REQUEST['where_clause'] as $one_where_clause) {                $local_query    = 'SELECT * FROM ' . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($GLOBALS['table'])                                . ' WHERE ' . str_replace('` =', '` >', $one_where_clause)                                . ' LIMIT 1;';                $res            = PMA_DBI_query($local_query);                $row            = PMA_DBI_fetch_row($res);                $meta           = PMA_DBI_get_fields_meta($res);                // must find a unique condition based on unique key,                // not a combination of all fields                list($unique_condition, $clause_is_unique) = PMA_getUniqueCondition($res, count($meta), $meta, $row, true);                if (! empty($unique_condition)) {                    $_SESSION['edit_next'] = $unique_condition;                }                unset($unique_condition, $clause_is_unique);            }        }    }} elseif (! empty($GLOBALS['goto'])) {    if (! preg_match('@^[a-z_]+\.php$@', $GLOBALS['goto'])) {        // this should NOT happen        //$GLOBALS['goto'] = false;        $goto_include = false;    } else {        $goto_include = $GLOBALS['goto'];    }    if ($GLOBALS['goto'] == 'db_sql.php' && strlen($GLOBALS['table'])) {        $GLOBALS['table'] = '';    }}if (! $goto_include) {    if (! strlen($GLOBALS['table'])) {        $goto_include = 'db_sql.php';    } else {        $goto_include = 'tbl_sql.php';    }}// Defines the url to return in case of failure of the queryif (isset($_REQUEST['err_url'])) {    $err_url = $_REQUEST['err_url'];} else {    $err_url = 'tbl_change.php' . PMA_generate_common_url($url_params);}/** * Prepares the update/insert of a row */if (isset($_REQUEST['where_clause'])) {    // we were editing something => use the WHERE clause    $loop_array = (is_array($_REQUEST['where_clause']) ? $_REQUEST['where_clause'] : array($_REQUEST['where_clause']));    $using_key  = true;    $is_insert  = ($_REQUEST['submit_type'] == 'insert') || ($_REQUEST['submit_type'] == 'showinsert') || ($_REQUEST['submit_type'] == 'insertignore');    $is_insertignore  = ($_REQUEST['submit_type'] == 'insertignore');} else {    // new row => use indexes    $loop_array = array();    foreach ($_REQUEST['fields']['multi_edit'] as $key => $dummy) {        $loop_array[] = $key;    }    $using_key  = false;    $is_insert  = true;    $is_insertignore = false;}$query = array();$value_sets = array();$func_no_param = array(    'CONNECTION_ID',    'CURRENT_USER',    'CURDATE',    'CURTIME',    'DATABASE',    'LAST_INSERT_ID',    'NOW',    'PI',    'RAND',    'SYSDATE',    'UNIX_TIMESTAMP',    'USER',    'UTC_DATE',    'UTC_TIME',    'UTC_TIMESTAMP',    'UUID',    'VERSION',);$func_optional_param = array(    'RAND',    'UNIX_TIMESTAMP',);$gis_from_text_functions = array(    'GeomFromText',    'GeomCollFromText',    'LineFromText',    'MLineFromText',    'PointFromText',    'MPointFromText',    'PolyFromText',    'MPolyFromText',);$gis_from_wkb_functions = array(    'GeomFromWKB',    'GeomCollFromWKB',    'LineFromWKB',    'MLineFromWKB',    'PointFromWKB',    'MPointFromWKB',    'PolyFromWKB',    'MPolyFromWKB',);foreach ($loop_array as $rownumber => $where_clause) {    // skip fields to be ignored    if (! $using_key && isset($_REQUEST['insert_ignore_' . $where_clause])) {        continue;    }    // Defines the SET part of the sql query    $query_values = array();    // Map multi-edit keys to single-level arrays, dependent on how we got the fields    $me_fields        = isset($_REQUEST['fields']['multi_edit'][$rownumber])        ? $_REQUEST['fields']['multi_edit'][$rownumber]        : array();    $me_fields_name        = isset($_REQUEST['fields_name']['multi_edit'][$rownumber])        ? $_REQUEST['fields_name']['multi_edit'][$rownumber]        : null;    $me_fields_prev        = isset($_REQUEST['fields_prev']['multi_edit'][$rownumber])        ? $_REQUEST['fields_prev']['multi_edit'][$rownumber]        : null;    $me_funcs        = isset($_REQUEST['funcs']['multi_edit'][$rownumber])        ? $_REQUEST['funcs']['multi_edit'][$rownumber]        : null;    $me_fields_type        = isset($_REQUEST['fields_type']['multi_edit'][$rownumber])        ? $_REQUEST['fields_type']['multi_edit'][$rownumber]        : null;    $me_fields_null        = isset($_REQUEST['fields_null']['multi_edit'][$rownumber])        ? $_REQUEST['fields_null']['multi_edit'][$rownumber]        : null;    $me_fields_null_prev        = isset($_REQUEST['fields_null_prev']['multi_edit'][$rownumber])        ? $_REQUEST['fields_null_prev']['multi_edit'][$rownumber]        : null;    $me_auto_increment        = isset($_REQUEST['auto_increment']['multi_edit'][$rownumber])        ? $_REQUEST['auto_increment']['multi_edit'][$rownumber]        : null;    // Fetch the current values of a row to use in case we have a protected field    // @todo possibly move to ./libraries/tbl_replace_fields.inc.php    if ($is_insert && $using_key && isset($me_fields_type) && is_array($me_fields_type) && isset($where_clause)) {        $prot_row = PMA_DBI_fetch_single_row('SELECT * FROM ' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';');    }    // When a select field is nullified, it's not present in $_REQUEST    // so initialize it; this way, the foreach($me_fields) will process it    foreach ($me_fields_name as $key => $val) {        if (! isset($me_fields[$key])) {            $me_fields[$key] = '';        }    }    // Iterate in the order of $me_fields_name, not $me_fields, to avoid problems    // when inserting multiple entries    foreach ($me_fields_name as $key => $field_name) {        $val = $me_fields[$key];        // Note: $key is an md5 of the fieldname. The actual fieldname is available in $me_fields_name[$key]        include './libraries/tbl_replace_fields.inc.php';        // for blobstreaming        if ($blob_streaming_active) {            $remove_blob_repo = isset($_REQUEST['remove_blob_repo_' . $key]) ? $_REQUEST['remove_blob_repo_' . $key] : null;            $upload_blob_repo = isset($_REQUEST['upload_blob_repo_' . $key]) ? $_REQUEST['upload_blob_repo_' . $key] : null;            // checks if an existing blob repository reference should be removed            if (isset($remove_blob_repo) && ! isset($upload_blob_repo)) {                $remove_blob_reference = $_REQUEST['remove_blob_ref_' . $key];                if (isset($remove_blob_reference)) {                    $val = "NULL";                }            }            // checks if this field requires a bs reference attached to it            if (isset($upload_blob_repo)) {                // get the most recent BLOB reference                $bs_reference = PMA_File::getRecentBLOBReference();                // if the most recent BLOB reference exists, set it as a field value                if (!is_null($bs_reference)) {                    $val = "'" . PMA_sqlAddSlashes($bs_reference) . "'";                }            }        }        if (empty($me_funcs[$key])) {            $cur_value = $val;        } elseif ('UUID' === $me_funcs[$key]) {            /* This way user will know what UUID new row has */            $uuid = PMA_DBI_fetch_value('SELECT UUID()');            $cur_value = "'" . $uuid . "'";        } elseif ((in_array($me_funcs[$key], $gis_from_text_functions)            && substr($val, 0, 3) == "'''")            || in_array($me_funcs[$key], $gis_from_wkb_functions)        ) {            // Remove enclosing apostrophes            $val = substr($val, 1, strlen($val) - 2);            // Remove escaping apostrophes            $val = str_replace("''", "'", $val);            $cur_value = $me_funcs[$key] . '(' . $val . ')';        } elseif (! in_array($me_funcs[$key], $func_no_param)                  || ($val != "''" && in_array($me_funcs[$key], $func_optional_param))) {            $cur_value = $me_funcs[$key] . '(' . $val . ')';        } else {            $cur_value = $me_funcs[$key] . '()';        }        //  i n s e r t        if ($is_insert) {            // no need to add column into the valuelist            if (strlen($cur_value)) {                $query_values[] = $cur_value;                // first inserted row so prepare the list of fields                if (empty($value_sets)) {                    $query_fields[] = PMA_backquote($me_fields_name[$key]);                }            }        //  u p d a t e        } elseif (!empty($me_fields_null_prev[$key])         && ! isset($me_fields_null[$key])) {            // field had the null checkbox before the update            // field no longer has the null checkbox            $query_values[] = PMA_backquote($me_fields_name[$key]) . ' = ' . $cur_value;        } elseif (empty($me_funcs[$key])         && isset($me_fields_prev[$key])         && ("'" . PMA_sqlAddSlashes($me_fields_prev[$key]) . "'" == $val)) {            // No change for this column and no MySQL function is used -> next column            continue;        } elseif (! empty($val)) {            // avoid setting a field to NULL when it's already NULL            // (field had the null checkbox before the update            //  field still has the null checkbox)            if (empty($me_fields_null_prev[$key])             || empty($me_fields_null[$key])) {                 $query_values[] = PMA_backquote($me_fields_name[$key]) . ' = ' . $cur_value;            }        }    } // end foreach ($me_fields as $key => $val)    if (count($query_values) > 0) {        if ($is_insert) {            $value_sets[] = implode(', ', $query_values);        } else {            // build update query            $query[] = 'UPDATE ' . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($GLOBALS['table'])                . ' SET ' . implode(', ', $query_values) . ' WHERE ' . $where_clause . ($_REQUEST['clause_is_unique'] ? '' : ' LIMIT 1');        }    }} // end foreach ($loop_array as $where_clause)unset($me_fields_name, $me_fields_prev, $me_funcs, $me_fields_type, $me_fields_null, $me_fields_null_prev,    $me_auto_increment, $cur_value, $key, $val, $loop_array, $where_clause, $using_key,    $func_no_param);// Builds the sql queryif ($is_insert && count($value_sets) > 0) {    if ($is_insertignore) {        $insert_command = 'INSERT IGNORE ';    } else {        $insert_command = 'INSERT ';    }    $query[] = $insert_command . 'INTO ' . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($GLOBALS['table'])        . ' (' . implode(', ', $query_fields) . ') VALUES (' . implode('), (', $value_sets) . ')';    unset($insert_command);    unset($query_fields);} elseif (empty($query)) {    // No change -> move back to the calling script    //    // Note: logic passes here for inline edit    $message = PMA_Message::success(__('No change'));    $active_page = $goto_include;    if (! $GLOBALS['is_ajax_request'] == true) {        include_once './libraries/header.inc.php';    }    include './' . PMA_securePath($goto_include);    exit;}unset($me_fields, $is_insertignore);/** * Executes the sql query and get the result, then move back to the calling * page */if (! empty($GLOBALS['sql_query'])) {    $url_params['sql_query'] = $GLOBALS['sql_query'];    $return_to_sql_query = $GLOBALS['sql_query'];}$GLOBALS['sql_query'] = implode('; ', $query) . ';';// to ensure that the query is displayed in case of// "insert as new row" and then "insert another new row"$GLOBALS['display_query'] = $GLOBALS['sql_query'];$total_affected_rows = 0;$last_messages = array();$warning_messages = array();$error_messages = array();foreach ($query as $single_query) {    if ($_REQUEST['submit_type'] == 'showinsert') {        $last_messages[] = PMA_Message::notice(__('Showing SQL query'));        continue;    }    if ($GLOBALS['cfg']['IgnoreMultiSubmitErrors']) {        $result = PMA_DBI_try_query($single_query);    } else {        $result = PMA_DBI_query($single_query);    }    if (! $result) {        $error_messages[] = PMA_Message::sanitize(PMA_DBI_getError());    } else {        // The next line contains a real assignment, it's not a typo        if ($tmp = @PMA_DBI_affected_rows()) {            $total_affected_rows += $tmp;        }        unset($tmp);        $insert_id = PMA_DBI_insert_id();        if ($insert_id != 0) {            // insert_id is id of FIRST record inserted in one insert, so if we            // inserted multiple rows, we had to increment this            if ($total_affected_rows > 0) {                $insert_id = $insert_id + $total_affected_rows - 1;            }            $last_message = PMA_Message::notice(__('Inserted row id: %1$d'));            $last_message->addParam($insert_id);            $last_messages[] = $last_message;        }        PMA_DBI_free_result($result);    } // end if    foreach (PMA_DBI_get_warnings() as $warning) {        $warning_messages[]            = PMA_Message::sanitize(                $warning['Level'] . ': #' . $warning['Code'] . ' ' . $warning['Message']            );    }    unset($result);}unset($single_query, $query);if ($is_insert && count($value_sets) > 0) {    $message = PMA_Message::inserted_rows($total_affected_rows);} else {    $message = PMA_Message::affected_rows($total_affected_rows);}$message->addMessages($last_messages, '<br />');if (! empty($warning_messages)) {    $message->addMessages($warning_messages, '<br />');    $message->isError(true);}if (! empty($error_messages)) {    $message->addMessages($error_messages);    $message->isError(true);}unset($error_messages, $warning_messages, $total_affected_rows, $last_messages, $last_message);if ($GLOBALS['is_ajax_request'] == true) {    /**     * If we are in grid editing, we need to process the relational and     * transformed fields, if they were edited. After that, output the correct     * link/transformed value and exit     *     * Logic taken from libraries/display_tbl.lib.php     */    if (isset($_REQUEST['rel_fields_list']) && $_REQUEST['rel_fields_list'] != '') {        //handle relations work here for updated row.        include_once './libraries/relation.lib.php';        $map = PMA_getForeigners($db, $table, '', 'both');        $rel_fields = array();        parse_str($_REQUEST['rel_fields_list'], $rel_fields);        // loop for each relation cell        foreach ( $rel_fields as $cell_index => $curr_cell_rel_field) {            foreach ( $curr_cell_rel_field as $rel_field => $rel_field_value) {                $where_comparison = "='" . $rel_field_value . "'";                $display_field = PMA_getDisplayField($map[$rel_field]['foreign_db'], $map[$rel_field]['foreign_table']);                // Field to display from the foreign table?                if (isset($display_field) && strlen($display_field)) {                    $dispsql     = 'SELECT ' . PMA_backquote($display_field)                        . ' FROM ' . PMA_backquote($map[$rel_field]['foreign_db'])                        . '.' . PMA_backquote($map[$rel_field]['foreign_table'])                        . ' WHERE ' . PMA_backquote($map[$rel_field]['foreign_field'])                        . $where_comparison;                    $dispresult  = PMA_DBI_try_query($dispsql, null, PMA_DBI_QUERY_STORE);                    if ($dispresult && PMA_DBI_num_rows($dispresult) > 0) {                        list($dispval) = PMA_DBI_fetch_row($dispresult, 0);                    } else {                        //$dispval = __('Link not found');                    }                    @PMA_DBI_free_result($dispresult);                } else {                    $dispval     = '';                } // end if... else...                if ('K' == $_SESSION['tmp_user_values']['relational_display']) {                    // user chose "relational key" in the display options, so                    // the title contains the display field                    $title = (! empty($dispval))? ' title="' . htmlspecialchars($dispval) . '"' : '';                } else {                    $title = ' title="' . htmlspecialchars($rel_field_value) . '"';                }                $_url_params = array(                    'db'    => $map[$rel_field]['foreign_db'],                    'table' => $map[$rel_field]['foreign_table'],                    'pos'   => '0',                    'sql_query' => 'SELECT * FROM '                                        . PMA_backquote($map[$rel_field]['foreign_db']) . '.' . PMA_backquote($map[$rel_field]['foreign_table'])                                        . ' WHERE ' . PMA_backquote($map[$rel_field]['foreign_field'])                                        . $where_comparison                );                $output = '<a href="sql.php' . PMA_generate_common_url($_url_params) . '"' . $title . '>';                if ('D' == $_SESSION['tmp_user_values']['relational_display']) {                    // user chose "relational display field" in the                    // display options, so show display field in the cell                    $output .= (!empty($dispval)) ? htmlspecialchars($dispval) : '';                } else {                    // otherwise display data in the cell                    $output .= htmlspecialchars($rel_field_value);                }                $output .= '</a>';                $extra_data['relations'][$cell_index] = $output;            }        }   // end of loop for each relation cell    }    if (isset($_REQUEST['do_transformations']) && $_REQUEST['do_transformations'] == true ) {        include_once './libraries/transformations.lib.php';        //if some posted fields need to be transformed, generate them here.        $mime_map = PMA_getMIME($db, $table);        if ($mime_map === false) {            $mime_map = array();        }        $edited_values = array();        parse_str($_REQUEST['transform_fields_list'], $edited_values);        foreach ($mime_map as $transformation) {            $include_file = PMA_securePath($transformation['transformation']);            $column_name = $transformation['column_name'];            foreach ($edited_values as $cell_index => $curr_cell_edited_values) {                if (isset($curr_cell_edited_values[$column_name])) {                    $column_data = $curr_cell_edited_values[$column_name];                    $_url_params = array(                        'db'            => $db,                        'table'         => $table,                        'where_clause'  => $_REQUEST['where_clause'],                        'transform_key' => $column_name,                    );                    if (file_exists('./libraries/transformations/' . $include_file)) {                        $transformfunction_name = str_replace('.inc.php', '', $transformation['transformation']);                        include_once './libraries/transformations/' . $include_file;                        if (function_exists('PMA_transformation_' . $transformfunction_name)) {                            $transform_function = 'PMA_transformation_' . $transformfunction_name;                            $transform_options  = PMA_transformation_getOptions((isset($transformation['transformation_options']) ? $transformation['transformation_options'] : ''));                            $transform_options['wrapper_link'] = PMA_generate_common_url($_url_params);                        }                    }                    $extra_data['transformations'][$cell_index] = $transform_function($column_data, $transform_options);                }            }   // end of loop for each transformation cell        }   // end of loop for each $mime_map    }    /**Get the total row count of the table*/    $extra_data['row_count'] = PMA_Table::countRecords($_REQUEST['db'], $_REQUEST['table']);    $extra_data['sql_query'] = PMA_showMessage($message, $GLOBALS['display_query']);    PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);}if (isset($return_to_sql_query)) {    $disp_query = $GLOBALS['sql_query'];    $disp_message = $message;    unset($message);    $GLOBALS['sql_query'] = $return_to_sql_query;}$GLOBALS['js_include'][] = 'tbl_change.js';// in case we call sql.php which needs those:$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$active_page = $goto_include;/** * If user asked for "and then Insert another new row" we have to remove * WHERE clause information so that tbl_change.php does not go back * to the current record */if (isset($_REQUEST['after_insert']) && 'new_insert' == $_REQUEST['after_insert']) {        unset($_REQUEST['where_clause']);}/** * Load header. */require_once './libraries/header.inc.php';/** * Load target page. */require './' . PMA_securePath($goto_include);exit;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Exporting of translated messages from PHP to Javascript * * @package PhpMyAdmin */chdir('..');// Send correct type:header('Content-Type: text/javascript; charset=UTF-8');// Cache output in client - the nocache query parameter makes sure that this// file is reloaded when config changesheader('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');// Avoid loading the full common.inc.php because this would add many// non-js-compatible stuff like DOCTYPEdefine('PMA_MINIMUM_COMMON', true);require_once './libraries/common.inc.php';// Close session early as we won't write anything theresession_write_close();// But this one is needed for PMA_escapeJsString()require_once './libraries/js_escape.lib.php';$js_messages['strNoDropDatabases'] = $cfg['AllowUserDropDatabase'] ? '' : __('"DROP DATABASE" statements are disabled.');/* For confirmations */$js_messages['strDoYouReally'] = __('Do you really want to ');$js_messages['strDropDatabaseStrongWarning'] = __('You are about to DESTROY a complete database!');$js_messages['strDropTableStrongWarning'] = __('You are about to DESTROY a complete table!');$js_messages['strTruncateTableStrongWarning'] = __('You are about to TRUNCATE a complete table!');$js_messages['strDeleteTrackingData'] = __('Delete tracking data for this table');$js_messages['strDeletingTrackingData'] = __('Deleting tracking data');$js_messages['strDroppingPrimaryKeyIndex'] = __('Dropping Primary Key/Index');$js_messages['strOperationTakesLongTime'] = __('This operation could take a long time. Proceed anyway?');/* For blobstreaming */$js_messages['strBLOBRepositoryDisableStrongWarning'] = __('You are about to DISABLE a BLOB Repository!');$js_messages['strBLOBRepositoryDisableAreYouSure'] = sprintf(__('Are you sure you want to disable all BLOB references for database %s?'), PMA_escapeJsString($GLOBALS['db']));/* For indexes */$js_messages['strFormEmpty'] = __('Missing value in the form!');$js_messages['strNotNumber'] = __('This is not a number!');$js_messages['strAddIndex'] = __('Add Index');$js_messages['strEditIndex'] = __('Edit Index');$js_messages['strAddToIndex'] = __('Add %d column(s) to index');/* Charts *//* l10n: Default description for the y-Axis of Charts */$js_messages['strTotalCount'] = __('Total count');/* For server_privileges.js */$js_messages['strHostEmpty'] = __('The host name is empty!');$js_messages['strUserEmpty'] = __('The user name is empty!');$js_messages['strPasswordEmpty'] = __('The password is empty!');$js_messages['strPasswordNotSame'] = __('The passwords aren\'t the same!');$js_messages['strAddUser'] = __('Add user');$js_messages['strReloadingPrivileges'] = __('Reloading Privileges');$js_messages['strRemovingSelectedUsers'] = __('Removing Selected Users');$js_messages['strClose'] = __('Close');/* for server_status.js */$js_messages['strEdit'] = __('Edit');$js_messages['strLiveTrafficChart'] = __('Live traffic chart');$js_messages['strLiveConnChart'] = __('Live conn./process chart');$js_messages['strLiveQueryChart'] = __('Live query chart');$js_messages['strStaticData'] = __('Static data');/* l10n: Total number of queries */$js_messages['strTotal'] = __('Total');/* l10n: Other, small valued, queries */$js_messages['strOther'] = __('Other');/* l10n: Thousands separator */$js_messages['strThousandsSeperator'] = __(',');/* l10n: Decimal separator */$js_messages['strDecimalSeperator'] = __('.');$js_messages['strChartKBSent'] = __('KiB sent since last refresh');$js_messages['strChartKBReceived'] = __('KiB received since last refresh');$js_messages['strChartServerTraffic'] = __('Server traffic (in KiB)');$js_messages['strChartConnections'] = __('Connections since last refresh');$js_messages['strChartProcesses'] = __('Processes');$js_messages['strChartConnectionsTitle'] = __('Connections / Processes');/* l10n: Questions is the name of a MySQL Status variable */$js_messages['strChartIssuedQueries'] = __('Questions since last refresh');/* l10n: Questions is the name of a MySQL Status variable */$js_messages['strChartIssuedQueriesTitle'] = __('Questions (executed statements by the server)');$js_messages['strChartQueryPie'] = __('Query statistics');/* server status monitor */$js_messages['strIncompatibleMonitorConfig'] = __('Local monitor configuration incompatible');$js_messages['strIncompatibleMonitorConfigDescription'] = __('The chart arrangement configuration in your browsers local storage is not compatible anymore to the newer version of the monitor dialog. It is very likely that your current configuration will not work anymore. Please reset your configuration to default in the <i>Settings</i> menu.');$js_messages['strQueryCacheEfficiency'] = __('Query cache efficiency');$js_messages['strQueryCacheUsage'] = __('Query cache usage');$js_messages['strQueryCacheUsed'] = __('Query cache used');$js_messages['strSystemCPUUsage'] = __('System CPU Usage');$js_messages['strSystemMemory'] = __('System memory');$js_messages['strSystemSwap'] = __('System swap');$js_messages['strMiB'] = __('MiB');$js_messages['strKiB'] = __('KiB');$js_messages['strAverageLoad'] = __('Average load');$js_messages['strTotalMemory'] = __('Total memory');$js_messages['strCachedMemory'] = __('Cached memory');$js_messages['strBufferedMemory'] = __('Buffered memory');$js_messages['strFreeMemory'] = __('Free memory');$js_messages['strUsedMemory'] = __('Used memory');$js_messages['strTotalSwap'] = __('Total Swap');$js_messages['strCachedSwap'] = __('Cached Swap');$js_messages['strUsedSwap'] = __('Used Swap');$js_messages['strFreeSwap'] = __('Free Swap');$js_messages['strBytesSent'] = __('Bytes sent');$js_messages['strBytesReceived'] = __('Bytes received');$js_messages['strConnections'] = __('Connections');$js_messages['strProcesses'] = __('Processes');/* summary row */$js_messages['strB'] = __('B');$js_messages['strKiB'] = __('KiB');$js_messages['strMiB'] = __('MiB');$js_messages['strGiB'] = __('GiB');$js_messages['strTiB'] = __('TiB');$js_messages['strPiB'] = __('PiB');$js_messages['strEiB'] = __('EiB');$js_messages['strTables'] = __('%d table(s)');/* l10n: Questions is the name of a MySQL Status variable */$js_messages['strQuestions'] = __('Questions');$js_messages['strTraffic'] = __('Traffic');$js_messages['strSettings'] = __('Settings');$js_messages['strRemoveChart'] = __('Remove chart');$js_messages['strEditChart'] = __('Edit title and labels');$js_messages['strAddChart'] = __('Add chart to grid');$js_messages['strClose'] = __('Close');$js_messages['strAddOneSeriesWarning'] = __('Please add at least one variable to the series');$js_messages['strNone'] = __('None');$js_messages['strResumeMonitor'] = __('Resume monitor');$js_messages['strPauseMonitor'] = __('Pause monitor');/* Monitor: Instructions Dialog */$js_messages['strBothLogOn'] = __('general_log and slow_query_log are enabled.');$js_messages['strGenLogOn'] = __('general_log is enabled.');$js_messages['strSlowLogOn'] = __('slow_query_log is enabled.');$js_messages['strBothLogOff'] = __('slow_query_log and general_log are disabled.');$js_messages['strLogOutNotTable'] = __('log_output is not set to TABLE.');$js_messages['strLogOutIsTable'] = __('log_output is set to TABLE.');$js_messages['strSmallerLongQueryTimeAdvice'] = __('slow_query_log is enabled, but the server logs only queries that take longer than %d seconds. It is advisable to set this long_query_time 0-2 seconds, depending on your system.');$js_messages['strLongQueryTimeSet'] = __('long_query_time is set to %d second(s).');$js_messages['strSettingsAppliedGlobal'] = __('Following settings will be applied globally and reset to default on server restart:');/* l10n: %s is FILE or TABLE */$js_messages['strSetLogOutput'] = __('Set log_output to %s');/* l10n: Enable in this context means setting a status variable to ON */$js_messages['strEnableVar'] = __('Enable %s');/* l10n: Disable in this context means setting a status variable to OFF */$js_messages['strDisableVar'] = __('Disable %s');/* l10n: %d seconds */$js_messages['setSetLongQueryTime'] = __('Set long_query_time to %ds');$js_messages['strNoSuperUser'] = __('You can\'t change these variables. Please log in as root or contact your database administrator.');$js_messages['strChangeSettings'] = __('Change settings');$js_messages['strCurrentSettings'] = __('Current settings');$js_messages['strChartTitle'] = __('Chart Title');/* l10n: As in differential values */$js_messages['strDifferential'] = __('Differential');$js_messages['strDividedBy'] = __('Divided by %s');$js_messages['strUnit'] = __('Unit');$js_messages['strFromSlowLog'] = __('From slow log');$js_messages['strFromGeneralLog'] = __('From general log');$js_messages['strAnalysingLogs'] = __('Analysing & loading logs. This may take a while.');$js_messages['strCancelRequest'] = __('Cancel request');$js_messages['strCountColumnExplanation'] = __('This column shows the amount of identical queries that are grouped together. However only the SQL query itself has been used as a grouping criteria, so the other attributes of queries, such as start time, may differ.');$js_messages['strMoreCountColumnExplanation'] = __('Since grouping of INSERTs queries has been selected, INSERT queries into the same table are also being grouped together, disregarding of the inserted data.');$js_messages['strLogDataLoaded'] = __('Log data loaded. Queries executed in this time span:');$js_messages['strJumpToTable'] = __('Jump to Log table');$js_messages['strNoDataFound'] = __('Log analysed, but no data found in this time span.');$js_messages['strAnalyzing'] = __('Analyzing...');$js_messages['strExplainOutput'] = __('Explain output');$js_messages['strStatus'] = __('Status');$js_messages['strTime'] = __('Time');$js_messages['strTotalTime'] = __('Total time:');$js_messages['strProfilingResults'] = __('Profiling results');$js_messages['strTable'] = _pgettext('Display format', 'Table');$js_messages['strChart'] = __('Chart');/* l10n: A collection of available filters */$js_messages['strFiltersForLogTable'] = __('Log table filter options');/* l10n: Filter as in "Start Filtering" */$js_messages['strFilter'] = __('Filter');$js_messages['strFilterByWordRegexp'] = __('Filter queries by word/regexp:');$js_messages['strIgnoreWhereAndGroup'] = __('Group queries, ignoring variable data in WHERE clauses');$js_messages['strSumRows'] = __('Sum of grouped rows:');$js_messages['strTotal'] = __('Total:');$js_messages['strLoadingLogs'] = __('Loading logs');$js_messages['strRefreshFailed'] = __('Monitor refresh failed');$js_messages['strInvalidResponseExplanation'] = __('While requesting new chart data the server returned an invalid response. This is most likely because your session expired. Reloading the page and reentering your credentials should help.');$js_messages['strReloadPage'] = __('Reload page');$js_messages['strAffectedRows'] = __('Affected rows:');$js_messages['strFailedParsingConfig'] = __('Failed parsing config file. It doesn\'t seem to be valid JSON code.');$js_messages['strFailedBuildingGrid'] = __('Failed building chart grid with imported config. Resetting to default config...');$js_messages['strImport'] = __('Import');$js_messages['strAnalyzeQuery'] = __('Analyse Query');/* Server status advisor */$js_messages['strAdvisorSystem'] = __('Advisor system');$js_messages['strPerformanceIssues'] = __('Possible performance issues');$js_messages['strIssuse'] = __('Issue');$js_messages['strRecommendation'] = __('Recommendation');$js_messages['strRuleDetails'] = __('Rule details');$js_messages['strJustification'] = __('Justification');$js_messages['strFormula'] = __('Used variable / formula');$js_messages['strTest'] = __('Test');/* For inline query editing */$js_messages['strGo'] = __('Go');$js_messages['strCancel'] = __('Cancel');/* For Ajax Notifications */$js_messages['strLoading'] = __('Loading');$js_messages['strProcessingRequest'] = __('Processing Request');$js_messages['strErrorProcessingRequest'] = __('Error in Processing Request');$js_messages['strDroppingColumn'] = __('Dropping Column');$js_messages['strAddingPrimaryKey'] = __('Adding Primary Key');$js_messages['strOK'] = __('OK');$js_messages['strDismiss'] = __('Click to dismiss this notification');/* For db_operations.js */$js_messages['strRenamingDatabases'] = __('Renaming Databases');$js_messages['strReloadDatabase'] = __('Reload Database');$js_messages['strCopyingDatabase'] = __('Copying Database');$js_messages['strChangingCharset'] = __('Changing Charset');$js_messages['strTableMustHaveAtleastOneColumn'] = __('Table must have at least one column');$js_messages['strYes'] = __('Yes');$js_messages['strNo'] = __('No');/* For db_stucture.js */$js_messages['strInsertTable'] = __('Insert Table');$js_messages['strHideIndexes'] = __('Hide indexes');$js_messages['strShowIndexes'] = __('Show indexes');/* For db_search.js */$js_messages['strSearching'] = __('Searching');$js_messages['strHideSearchResults'] = __('Hide search results');$js_messages['strShowSearchResults'] = __('Show search results');$js_messages['strBrowsing'] = __('Browsing');$js_messages['strDeleting'] = __('Deleting');/* For db_routines.js */$js_messages['MissingReturn'] = __('The definition of a stored function must contain a RETURN statement!');/* For ENUM/SET editor*/$js_messages['enum_editor'] = __('ENUM/SET editor');$js_messages['enum_columnVals'] =__('Values for column %s');$js_messages['enum_newColumnVals'] = __('Values for a new column');$js_messages['enum_hint'] =__('Enter each value in a separate field');$js_messages['enum_addValue'] =__('Add %d value(s)');/* For import.js */$js_messages['strImportCSV'] = __('Note: If the file contains multiple tables, they will be combined into one');/* For sql.js */$js_messages['strHideQueryBox'] = __('Hide query box');$js_messages['strShowQueryBox'] = __('Show query box');$js_messages['strEdit'] = __('Edit');$js_messages['strNoRowSelected'] = __('No rows selected');$js_messages['strChangeTbl'] = __('Change');$js_messages['strQueryExecutionTime'] = __('Query execution time');/* For server_variables.js */$js_messages['strSave'] = __('Save');/* For tbl_select.js */$js_messages['strHideSearchCriteria'] = __('Hide search criteria');$js_messages['strShowSearchCriteria'] = __('Show search criteria');/* For tbl_zoom_plot.js */$js_messages['strZoomSearch'] = __('Zoom Search');$js_messages['strDisplayHelp'] = '<ul><li>'    . __('Each point represents a data row.')    . '</li><li>'    . __('Hovering over a point will show its label.')    . '</li><li>'    . __('Use mousewheel to zoom in or out of the plot.')    . '</li><li>'    . __('Click and drag the mouse to navigate the plot.')    . '</li><li>'    . __('Click reset zoom link to come back to original state.')    . '</li><li>'    . __('Click a data point to view and possibly edit the data row.')    . '</li><li>'    . __('The plot can be resized by dragging it along the bottom right corner.')    . '</li><li>'    . __('Strings are converted into integer for plotting')    . '</li></ul>';$js_messages['strInputNull'] = '<strong>' . __('Select two columns') . '</strong>';$js_messages['strSameInputs'] = '<strong>' . __('Select two different columns') . '</strong>';$js_messages['strQueryResults'] = __('Query results');$js_messages['strDataPointContent'] = __('Data point content');/* For tbl_change.js */$js_messages['strIgnore'] = __('Ignore');$js_messages['strCopy'] = __('Copy');$js_messages['strX'] = __('X');$js_messages['strY'] = __('Y');$js_messages['strPoint'] = __('Point');$js_messages['strPointN'] = __('Point %d');$js_messages['strLineString'] = __('Linestring');$js_messages['strPolygon'] = __('Polygon');$js_messages['strGeometry'] = __('Geometry');$js_messages['strInnerRing'] = __('Inner Ring');$js_messages['strOuterRing'] = __('Outer Ring');$js_messages['strAddPoint'] = __('Add a point');$js_messages['strAddInnerRing'] = __('Add an inner ring');$js_messages['strAddPolygon'] = __('Add a polygon');/* For tbl_structure.js */$js_messages['strAddColumns'] = __('Add columns');/* Designer (js/pmd/move.js) */$js_messages['strSelectReferencedKey'] = __('Select referenced key');$js_messages['strSelectForeignKey'] = __('Select Foreign Key');$js_messages['strPleaseSelectPrimaryOrUniqueKey'] = __('Please select the primary key or a unique key');$js_messages['strChangeDisplay'] = __('Choose column to display');$js_messages['strLeavingDesigner'] = __('You haven\'t saved the changes in the layout. They will be lost if you don\'t save them. Do you want to continue?');/* Visual query builder (js/pmd/move.js) */$js_messages['strAddOption'] = __('Add an option for column ');/* For makegrid.js (column reordering, show/hide column, grid editing) */$js_messages['strCellEditHint'] = __('Press escape to cancel editing');$js_messages['strSaveCellWarning'] = __('You have edited some data and they have not been saved. Are you sure you want to leave this page before saving the data?');$js_messages['strColOrderHint'] = __('Drag to reorder');$js_messages['strSortHint'] = __('Click to sort');$js_messages['strColMarkHint'] = __('Click to mark/unmark');$js_messages['strColVisibHint'] = __('Click the drop-down arrow<br />to toggle column\'s visibility');$js_messages['strShowAllCol'] = __('Show all');$js_messages['strAlertNonUnique'] = __('This table does not contain a unique column. Features related to the grid edit, checkbox, Edit, Copy and Delete links may not work after saving.');$js_messages['strGridEditFeatureHint'] = __('You can also edit most columns<br />by clicking directly on their content.');$js_messages['strGoToLink'] = __('Go to link');/* password generation */$js_messages['strGeneratePassword'] = __('Generate password');$js_messages['strGenerate'] = __('Generate');$js_messages['strChangePassword'] = __('Change Password');/* navigation tabs */$js_messages['strMore'] = __('More');/* update */$js_messages['strNewerVersion'] = __('A newer version of phpMyAdmin is available and you should consider upgrading. The newest version is %s, released on %s.');/* l10n: Latest available phpMyAdmin version */$js_messages['strLatestAvailable'] = __(', latest stable version:');$js_messages['strUpToDate'] = __('up to date');echo "var PMA_messages = new Array();\n";foreach ($js_messages as $name => $js_message) {    PMA_printJsValue("PMA_messages['" . $name . "']", $js_message);}/* Calendar */echo "var themeCalendarImage = '" . $GLOBALS['pmaThemeImage'] . 'b_calendar.png' . "';\n";/* Image path */echo "var pmaThemeImage = '" . $GLOBALS['pmaThemeImage'] . "';\n";/* Version */echo "var pmaversion = '" . PMA_VERSION . "';\n";echo "if ($.datepicker) {\n";/* l10n: Display text for calendar close link */PMA_printJsValue("$.datepicker.regional['']['closeText']", __('Done'));/* l10n: Display text for previous month link in calendar */PMA_printJsValue(    "$.datepicker.regional['']['prevText']",    _pgettext('Previous month', 'Prev'));/* l10n: Display text for next month link in calendar */PMA_printJsValue(    "$.datepicker.regional['']['nextText']",    _pgettext('Next month', 'Next'));/* l10n: Display text for current month link in calendar */PMA_printJsValue("$.datepicker.regional['']['currentText']", __('Today'));PMA_printJsValue("$.datepicker.regional['']['monthNames']",    array(        __('January'),        __('February'),        __('March'),        __('April'),        __('May'),        __('June'),        __('July'),        __('August'),        __('September'),        __('October'),        __('November'),        __('December')));PMA_printJsValue("$.datepicker.regional['']['monthNamesShort']",    array(/* l10n: Short month name */        __('Jan'),/* l10n: Short month name */        __('Feb'),/* l10n: Short month name */        __('Mar'),/* l10n: Short month name */        __('Apr'),/* l10n: Short month name */        _pgettext('Short month name', 'May'),/* l10n: Short month name */        __('Jun'),/* l10n: Short month name */        __('Jul'),/* l10n: Short month name */        __('Aug'),/* l10n: Short month name */        __('Sep'),/* l10n: Short month name */        __('Oct'),/* l10n: Short month name */        __('Nov'),/* l10n: Short month name */        __('Dec')));PMA_printJsValue("$.datepicker.regional['']['dayNames']",    array(        __('Sunday'),        __('Monday'),        __('Tuesday'),        __('Wednesday'),        __('Thursday'),        __('Friday'),        __('Saturday')));PMA_printJsValue("$.datepicker.regional['']['dayNamesShort']",    array(/* l10n: Short week day name */        __('Sun'),/* l10n: Short week day name */        __('Mon'),/* l10n: Short week day name */        __('Tue'),/* l10n: Short week day name */        __('Wed'),/* l10n: Short week day name */        __('Thu'),/* l10n: Short week day name */        __('Fri'),/* l10n: Short week day name */        __('Sat')));PMA_printJsValue("$.datepicker.regional['']['dayNamesMin']",    array(/* l10n: Minimal week day name */        __('Su'),/* l10n: Minimal week day name */        __('Mo'),/* l10n: Minimal week day name */        __('Tu'),/* l10n: Minimal week day name */        __('We'),/* l10n: Minimal week day name */        __('Th'),/* l10n: Minimal week day name */        __('Fr'),/* l10n: Minimal week day name */        __('Sa')));/* l10n: Column header for week of the year in calendar */PMA_printJsValue("$.datepicker.regional['']['weekHeader']", __('Wk'));/* l10n: Month-year order for calendar, use either "calendar-month-year" or "calendar-year-month". */PMA_printJsValue("$.datepicker.regional['']['showMonthAfterYear']", (__('calendar-month-year') == 'calendar-year-month'));/* l10n: Year suffix for calendar, "none" is empty. */$year_suffix = _pgettext('Year suffix', 'none');PMA_printJsValue("$.datepicker.regional['']['yearSuffix']", ($year_suffix == 'none' ? '' : $year_suffix));?>$.extend($.datepicker._defaults, $.datepicker.regional['']);} /* if ($.datepicker) */<?phpecho "if ($.timepicker) {\n";PMA_printJsValue("$.timepicker.regional['']['timeText']", __('Time'));PMA_printJsValue("$.timepicker.regional['']['hourText']", __('Hour'));PMA_printJsValue("$.timepicker.regional['']['minuteText']", __('Minute'));PMA_printJsValue("$.timepicker.regional['']['secondText']", __('Second'));?>$.extend($.timepicker._defaults, $.timepicker.regional['']);} /* if ($.timepicker) */
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';require_once './libraries/ob.lib.php';PMA_outBufferPre();// Check parametersPMA_checkParameters(array('db', 'full_sql_query'));// For re-usability, moved http-headers// to a separate file. It can now be included by libraries/header.inc.php,// querywindow.php.require_once './libraries/header_http.inc.php';/** * Sends the beginning of the html page then returns to the calling script */// Defines the cell alignment values depending on text directionif ($text_dir == 'ltr') {    $cell_align_left  = 'left';    $cell_align_right = 'right';} else {    $cell_align_left  = 'right';    $cell_align_right = 'left';}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $available_languages[$lang][1]; ?>" lang="<?php echo $available_languages[$lang][1]; ?>" dir="<?php echo $text_dir; ?>"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><link rel="icon" href="./favicon.ico" type="image/x-icon" /><link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" /><title><?php echo __('SQL result'); ?> - phpMyAdmin <?php echo PMA_VERSION ?></title><link rel="stylesheet" type="text/css" href="phpmyadmin.css.php?<?php echo PMA_generate_common_url('', ''); ?>&amp;js_frame=print&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" /><?phprequire_once './libraries/header_scripts.inc.php';?></head><body bgcolor="#ffffff"><h1><?php echo __('SQL result'); ?></h1><p>    <strong><?php echo __('Host'); ?>:</strong> <?php echo $cfg['Server']['verbose'] ? $cfg['Server']['verbose'] : $cfg['Server']['host'] . ((!empty($cfg['Server']['port'])) ? ':' . $cfg['Server']['port'] : ''); ?><br />    <strong><?php echo __('Database'); ?>:</strong> <?php echo htmlspecialchars($db); ?><br />    <strong><?php echo __('Generation Time'); ?>:</strong> <?php echo PMA_localisedDate(); ?><br />    <strong><?php echo __('Generated by'); ?>:</strong> phpMyAdmin&nbsp;<?php echo PMA_VERSION; ?>&nbsp;/ MySQL&nbsp;<?php echo PMA_MYSQL_STR_VERSION; ?><br />    <strong><?php echo __('SQL query'); ?>:</strong> <?php echo htmlspecialchars($full_sql_query); ?>;    <?php if (isset($num_rows)) { ?><br />    <strong><?php echo __('Rows'); ?>:</strong> <?php echo $num_rows; ?>    <?php } ?></p><?php/** * Sets a variable to remember headers have been sent */$is_header_sent = true;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * phpMyAdmin Language Loading File * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Returns language name * * @param string $tmplang * @return string */function PMA_langName($tmplang){    $lang_name = ucfirst(substr(strrchr($tmplang[0], '|'), 1));    // Include native name if non empty    if (!empty($tmplang[2])) {        $lang_name = $tmplang[2] . ' - ' . $lang_name;    }    return $lang_name;}/** * tries to find the language to use * * @return  bool    success if valid lang is found, otherwise false */function PMA_langCheck(){    // check forced language    if (! empty($GLOBALS['cfg']['Lang'])) {        if (PMA_langSet($GLOBALS['cfg']['Lang'])) {            return true;        } else {            $GLOBALS['lang_failed_cfg'] = $GLOBALS['cfg']['Lang'];        }    }    // Don't use REQUEST in following code as it might be confused by cookies with same name    // check user requested language (POST)    if (! empty($_POST['lang'])) {        if (PMA_langSet($_POST['lang'])) {            return true;        } elseif (!is_string($_POST['lang'])) {            /* Faked request, don't care on localisation */            $GLOBALS['lang_failed_request'] = 'Yes';        } else {            $GLOBALS['lang_failed_request'] = $_POST['lang'];        }    }    // check user requested language (GET)    if (! empty($_GET['lang'])) {        if (PMA_langSet($_GET['lang'])) {            return true;        } elseif (!is_string($_GET['lang'])) {            /* Faked request, don't care on localisation */            $GLOBALS['lang_failed_request'] = 'Yes';        } else {            $GLOBALS['lang_failed_request'] = $_GET['lang'];        }    }    // check previous set language    if (! empty($_COOKIE['pma_lang'])) {        if (PMA_langSet($_COOKIE['pma_lang'])) {            return true;        } elseif (!is_string($_COOKIE['pma_lang'])) {            /* Faked request, don't care on localisation */            $GLOBALS['lang_failed_cookie'] = 'Yes';        } else {            $GLOBALS['lang_failed_cookie'] = $_COOKIE['pma_lang'];        }    }    // try to findout user's language by checking its HTTP_ACCEPT_LANGUAGE variable    if (PMA_getenv('HTTP_ACCEPT_LANGUAGE')) {        foreach (explode(',', PMA_getenv('HTTP_ACCEPT_LANGUAGE')) as $lang) {            if (PMA_langDetect($lang, 1)) {                return true;            }        }    }    // try to findout user's language by checking its HTTP_USER_AGENT variable    if (PMA_langDetect(PMA_getenv('HTTP_USER_AGENT'), 2)) {        return true;    }    // Didn't catch any valid lang : we use the default settings    if (PMA_langSet($GLOBALS['cfg']['DefaultLang'])) {        return true;    }    return false;}/** * checks given lang and sets it if valid * returns true on success, otherwise flase * * @param string  $lang   language to set * @return  bool    success */function PMA_langSet(&$lang){    /* Partial backward compatibility with 3.3 and older branches */    $lang = str_replace('-utf-8', '', $lang);    if (!is_string($lang) || empty($lang) || empty($GLOBALS['available_languages'][$lang])) {        return false;    }    $GLOBALS['lang'] = $lang;    return true;}/** * Analyzes some PHP environment variables to find the most probable language * that should be used * * @param string   string to analyze * @param integer  type of the PHP environment variable which value is $str * * @return  bool    true on success, otherwise false * * * @access  private */function PMA_langDetect($str, $envType){    if (empty($str)) {        return false;    }    if (empty($GLOBALS['available_languages'])) {        return false;    }    foreach ($GLOBALS['available_languages'] as $lang => $value) {        // $envType =  1 for the 'HTTP_ACCEPT_LANGUAGE' environment variable,        //             2 for the 'HTTP_USER_AGENT' one        $expr = $value[0];        if (strpos($expr, '[-_]') === false) {            $expr = str_replace('|', '([-_][[:alpha:]]{2,3})?|', $expr);        }        if (($envType == 1 && preg_match('/^(' . addcslashes($expr, '/') . ')(;q=[0-9]\\.[0-9])?$/i', $str))            || ($envType == 2 && preg_match('/(\(|\[|;[[:space:]])(' . addcslashes($expr, '/') . ')(;|\]|\))/i', $str))) {            if (PMA_langSet($lang)) {                return true;            }        }    }    return false;} // end of the 'PMA_langDetect()' function/** * All the supported languages have to be listed in the array below. * 1. The key must be the "official" ISO 639 language code and, if required, *    the dialect code. It can also contain some information about the *    charset (see the Russian case). * 2. The first of the values associated to the key is used in a regular *    expression to find some keywords corresponding to the language inside two *    environment variables. *    These values contain: *    - the "official" ISO language code and, if required, the dialect code *      too ('bu' for Bulgarian, 'fr([-_][[:alpha:]]{2})?' for all French *      dialects, 'zh[-_]tw' for Chinese traditional...), the dialect has to *      be specified first; *    - the '|' character (it means 'OR'); *    - the full language name. * 3. The second value associated to the key is the language code as defined by *    the RFC1766. * 4. The third value is its native name in html entities or UTF-8. * * Beware that the sorting order (first values associated to keys by * alphabetical reverse order in the array) is important: 'zh-tw' (chinese * traditional) must be detected before 'zh' (chinese simplified) for * example. * * @param string $lang * @return array */function PMA_langDetails($lang){    switch ($lang) {    case 'af':        return array('af|afrikaans', 'af', '');    case 'ar':        return array('ar|arabic', 'ar', '&#1575;&#1604;&#1593;&#1585;&#1576;&#1610;&#1577;');    case 'az':        return array('az|azerbaijani', 'az', 'Az&#601;rbaycanca');    case 'bn':        return array('bn|bangla', 'bn', '');    case 'be':        return array('be|belarusian', 'be', '&#1041;&#1077;&#1083;&#1072;&#1088;&#1091;&#1089;&#1082;&#1072;&#1103;');    case 'be@latin':        return array('be[-_]lat|belarusian latin', 'be-lat', 'Bie&#0322;aruskaja');    case 'bg':        return array('bg|bulgarian', 'bg', '&#1041;&#1098;&#1083;&#1075;&#1072;&#1088;&#1089;&#1082;&#1080;');    case 'bs':        return array('bs|bosnian', 'bs', 'Bosanski');    case 'br':        return array('br|breton', 'br', 'Brezhoneg');    case 'ca':        return array('ca|catalan', 'ca', 'Catal&agrave;');    case 'cs':        return array('cs|czech', 'cs', 'etina');    case 'cy':        return array('cy|welsh', 'cy', 'Cymraeg');    case 'da':        return array('da|danish', 'da', 'Dansk');    case 'de':        return array('de|german', 'de', 'Deutsch');    case 'el':        return array('el|greek', 'el', '&Epsilon;&lambda;&lambda;&eta;&nu;&iota;&kappa;&#940;');    case 'en':        return array('en|english', 'en', '');    case 'en_GB':        return array('en[_-]gb|english (United Kingdom)', 'en-gb', '');    case 'es':        return array('es|spanish', 'es', 'Espa&ntilde;ol');    case 'et':        return array('et|estonian', 'et', 'Eesti');    case 'eu':        return array('eu|basque', 'eu', 'Euskara');    case 'fa':        return array('fa|persian', 'fa', '&#1601;&#1575;&#1585;&#1587;&#1740;');    case 'fi':        return array('fi|finnish', 'fi', 'Suomi');    case 'fr':        return array('fr|french', 'fr', 'Fran&ccedil;ais');    case 'gl':        return array('gl|galician', 'gl', 'Galego');    case 'he':        return array('he|hebrew', 'he', '&#1506;&#1489;&#1512;&#1497;&#1514;');    case 'hi':        return array('hi|hindi', 'hi', '&#2361;&#2367;&#2344;&#2381;&#2342;&#2368;');    case 'hr':        return array('hr|croatian', 'hr', 'Hrvatski');    case 'hu':        return array('hu|hungarian', 'hu', 'Magyar');    case 'id':        return array('id|indonesian', 'id', 'Bahasa Indonesia');    case 'it':        return array('it|italian', 'it', 'Italiano');    case 'ja':        return array('ja|japanese', 'ja', '&#26085;&#26412;&#35486;');    case 'ko':        return array('ko|korean', 'ko', '&#54620;&#44397;&#50612;');    case 'ka':        return array('ka|georgian', 'ka', '&#4325;&#4304;&#4320;&#4311;&#4323;&#4314;&#4312;');    case 'lt':        return array('lt|lithuanian', 'lt', 'Lietuvi&#371;');    case 'lv':        return array('lv|latvian', 'lv', 'Latvie&scaron;u');    case 'mk':        return array('mk|macedonian', 'mk', 'Macedonian');    case 'mn':        return array('mn|mongolian', 'mn', '&#1052;&#1086;&#1085;&#1075;&#1086;&#1083;');    case 'ms':        return array('ms|malay', 'ms', 'Bahasa Melayu');    case 'nl':        return array('nl|dutch', 'nl', 'Nederlands');    case 'nb':        return array('nb|norwegian', 'nb', 'Norsk');    case 'pl':        return array('pl|polish', 'pl', 'Polski');    case 'pt_BR':        return array('pt[-_]br|brazilian portuguese', 'pt-BR', 'Portugu&ecirc;s');    case 'pt':        return array('pt|portuguese', 'pt', 'Portugu&ecirc;s');    case 'ro':        return array('ro|romanian', 'ro', 'Rom&acirc;n&#259;');    case 'ru':        return array('ru|russian', 'ru', '&#1056;&#1091;&#1089;&#1089;&#1082;&#1080;&#1081;');    case 'si':        return array('si|sinhala', 'si', '&#3523;&#3538;&#3458;&#3524;&#3517;');    case 'sk':        return array('sk|slovak', 'sk', 'Sloven&#269;ina');    case 'sl':        return array('sl|slovenian', 'sl', 'Sloven&scaron;&#269;ina');    case 'sq':        return array('sq|albanian', 'sq', 'Shqip');    case 'sr@latin':        return array('sr[-_]lat|serbian latin', 'sr-lat', 'Srpski');    case 'sr':        return array('sr|serbian', 'sr', '&#1057;&#1088;&#1087;&#1089;&#1082;&#1080;');    case 'sv':        return array('sv|swedish', 'sv', 'Svenska');    case 'ta':        return array('ta|tamil', 'ta', '');    case 'te':        return array('te|telugu', 'te', '');    case 'th':        return array('th|thai', 'th', '&#3616;&#3634;&#3625;&#3634;&#3652;&#3607;&#3618;');    case 'tk':        return array('tk|turkmen', 'tk', 'trkmene');    case 'tr':        return array('tr|turkish', 'tr', 'T&uuml;rk&ccedil;e');    case 'tt':        return array('tt|tatarish', 'tt', 'Tatar&ccedil;a');    case 'ug':        return array('ug|uyghur', 'ug', '');    case 'uk':        return array('uk|ukrainian', 'uk', '&#1059;&#1082;&#1088;&#1072;&#1111;&#1085;&#1089;&#1100;&#1082;&#1072;');    case 'ur':        return array('ur|urdu', 'ur', '');    case 'uz@latin':        return array('uz[-_]lat|uzbek-latin', 'uz-lat', 'O&lsquo;zbekcha');    case 'uz':        return array('uz[-_]cyr|uzbek-cyrillic', 'uz-cyr', '&#1038;&#1079;&#1073;&#1077;&#1082;&#1095;&#1072;');    case 'zh_TW':        return array('zh[-_](tw|hk)|chinese traditional', 'zh-TW', '&#20013;&#25991;');    case 'zh_CN':        return array('zh|chinese simplified', 'zh', '&#20013;&#25991;');    }    return array("$lang|$lang", $lang, $lang);}/** * Returns list of languages supported by phpMyAdmin * * @return array */function PMA_langList(){    /* We can always speak English */    $result = array('en' => PMA_langDetails('en'));    /* Check for existing directory */    if (!is_dir($GLOBALS['lang_path'])) {        return $result;    }    /* Open the directory */    $handle = @opendir($GLOBALS['lang_path']);    /* This can happen if the kit is English-only */    if ($handle === false) {        return $result;    }    /* Process all files */    while (false !== ($file = readdir($handle))) {        if ($file != "." && $file != ".." && file_exists($GLOBALS['lang_path'] . '/' . $file . '/LC_MESSAGES/phpmyadmin.mo')) {            $result[$file] = PMA_langDetails($file);        }    }    /* Close the handle */    closedir($handle);    return $result;}/** * @global string  path to the translations directory; may be absent if the kit is English-only */$GLOBALS['lang_path'] = './locale/';/** * Load gettext functions. */require_once GETTEXT_INC;/** * @global string  interface language */$GLOBALS['lang'] = 'en';/** * @global boolean whether loading lang from cfg failed */$GLOBALS['lang_failed_cfg'] = false;/** * @global boolean whether loading lang from cookie failed */$GLOBALS['lang_failed_cookie'] = false;/** * @global boolean whether loading lang from user request failed */$GLOBALS['lang_failed_request'] = false;/** * @global string text direction ltr or rtl */$GLOBALS['text_dir'] = 'ltr';/** * @global array supported languages */$GLOBALS['available_languages'] = PMA_langList();// Language filtering supportif (! empty($GLOBALS['cfg']['FilterLanguages'])) {    $new_lang = array();    foreach ($GLOBALS['available_languages'] as $key => $val) {        if (preg_match('@' . $GLOBALS['cfg']['FilterLanguages'] . '@', $key)) {            $new_lang[$key] = $val;        }    }    if (count($new_lang) > 0) {        $GLOBALS['available_languages'] = $new_lang;    }    unset($key, $val, $new_lang);}/** * @global array MySQL charsets map */$GLOBALS['mysql_charset_map'] = array(    'big5'         => 'big5',    'cp-866'       => 'cp866',    'euc-jp'       => 'ujis',    'euc-kr'       => 'euckr',    'gb2312'       => 'gb2312',    'gbk'          => 'gbk',    'iso-8859-1'   => 'latin1',    'iso-8859-2'   => 'latin2',    'iso-8859-7'   => 'greek',    'iso-8859-8'   => 'hebrew',    'iso-8859-8-i' => 'hebrew',    'iso-8859-9'   => 'latin5',    'iso-8859-13'  => 'latin7',    'iso-8859-15'  => 'latin1',    'koi8-r'       => 'koi8r',    'shift_jis'    => 'sjis',    'tis-620'      => 'tis620',    'utf-8'        => 'utf8',    'windows-1250' => 'cp1250',    'windows-1251' => 'cp1251',    'windows-1252' => 'latin1',    'windows-1256' => 'cp1256',    'windows-1257' => 'cp1257',);/* * Do the work! */if (! PMA_langCheck()) {    // fallback language    $fall_back_lang = 'en';    $line = __LINE__;    if (! PMA_langSet($fall_back_lang)) {        trigger_error('phpMyAdmin-ERROR: invalid lang code: '            . __FILE__ . '#' . $line . ', check hard coded fall back language.',            E_USER_WARNING);        // stop execution        // and tell the user that his chosen language is invalid        PMA_fatalError('Could not load any language, please check your language settings and folder.');    }}// Set locale_setlocale(LC_MESSAGES, $GLOBALS['lang']);_bindtextdomain('phpmyadmin', $GLOBALS['lang_path']);_bind_textdomain_codeset('phpmyadmin', 'UTF-8');_textdomain('phpmyadmin');/** * Messages for phpMyAdmin. * * These messages are here for easy transition to Gettext. * You should not add any messages here, use instead gettext directly * in your template/PHP file. */if (! function_exists('__')) {    die('Bad invocation!');}/* l10n: Text direction, use either ltr or rtl */$GLOBALS['text_dir'] = __('ltr');/* TCPDF */$GLOBALS['l'] = array();/* TCPDF settings */$GLOBALS['l']['a_meta_charset'] = 'UTF-8';$GLOBALS['l']['a_meta_dir'] = $GLOBALS['text_dir'];$GLOBALS['l']['a_meta_language'] = $GLOBALS['lang'];/* TCPDF translations */$GLOBALS['l']['w_page'] = __('Page number:');// now, that we have loaded the language strings we can send the errorsif ($GLOBALS['lang_failed_cfg']) {    trigger_error(        sprintf(__('Unknown language: %1$s.'),            htmlspecialchars($GLOBALS['lang_failed_cfg'])),        E_USER_ERROR);}if ($GLOBALS['lang_failed_cookie']) {    trigger_error(        sprintf(__('Unknown language: %1$s.'),            htmlspecialchars($GLOBALS['lang_failed_cookie'])),        E_USER_ERROR);}if ($GLOBALS['lang_failed_request']) {    trigger_error(        sprintf(__('Unknown language: %1$s.'),            htmlspecialchars($GLOBALS['lang_failed_request'])),        E_USER_ERROR);}unset($line, $fall_back_lang,    $GLOBALS['lang_failed_cfg'], $GLOBALS['lang_failed_cookie'], $GLOBALS['lang_failed_request']);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple script to set correct charset for the license * * Note: please do not fold this script into a general script * that would read any file using a GET parameter, it would open a hole * * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require './libraries/common.inc.php';/** * */header('Content-type: text/plain; charset=utf-8');$filename = LICENSE_FILE;// Check if the file is available, some distributions remove these.if (is_readable($filename)) {    readfile($filename);} else {    printf(__('The %s file is not available on this system, please visit www.phpmyadmin.net for more information.'), $filename);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Runs common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require './libraries/db_common.inc.php';require_once './libraries/sql_query_form.lib.php';// After a syntax error, we return to this script// with the typed query in the textarea.$goto = 'db_sql.php';$back = 'db_sql.php';/** * Gets informations about the database and, if it is empty, move to the * "db_structure.php" script where table can be created */require './libraries/db_info.inc.php';if ($num_tables == 0 && empty($db_query_force)) {    $sub_part   = '';    $is_info    = true;    include './db_structure.php';    exit();}/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm(true, false, isset($_REQUEST['delimiter']) ? htmlspecialchars($_REQUEST['delimiter']) : ';');/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * this file is register_globals safe * * @todo    move JavaScript out of here into .js files * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$is_superuser = PMA_isSuperuser();/** * Gets a core script and starts output buffering work */require_once './libraries/sql_query_form.lib.php';/** * starts output buffering if requested and supported */require_once './libraries/ob.lib.php';PMA_outBufferPre();/** * load relation params */$cfgRelation = PMA_getRelationsParam();/** * load bookmark support */require_once './libraries/bookmark.lib.php';$querydisplay_tabs = array(    'sql',    'files',    'history',    'full',);if (isset($_REQUEST['querydisplay_tab']) && in_array($_REQUEST['querydisplay_tab'], $querydisplay_tabs)) {    $querydisplay_tab = $_REQUEST['querydisplay_tab'];} else {    $querydisplay_tab = $GLOBALS['cfg']['QueryWindowDefTab'];}/** * $_REQUEST['no_js'] is set if open new window by JavaScript failed * so this page is loaded in main frame */$no_js = PMA_ifSetOr($_REQUEST['no_js'], false);if ($no_js) {    $querydisplay_tab = 'full';    $tabs = false;} else {    $tabs = array();    $tabs['sql']['icon']   = 'b_sql.png';    $tabs['sql']['text']   = __('SQL');    $tabs['sql']['fragment']   = '#';    $tabs['sql']['attr']   = 'onclick="PMA_querywindowCommit(\'sql\');return false;"';    $tabs['sql']['active'] = (bool) ($querydisplay_tab == 'sql');    $tabs['import']['icon']   = 'b_import.png';    $tabs['import']['text']   = __('Import files');    $tabs['import']['fragment']   = '#';    $tabs['import']['attr']   = 'onclick="PMA_querywindowCommit(\'files\');return false;"';    $tabs['import']['active'] = (bool) ($querydisplay_tab == 'files');    $tabs['history']['icon']   = 'b_bookmark.png';    $tabs['history']['text']   = __('SQL history');    $tabs['history']['fragment']   = '#';    $tabs['history']['attr']   = 'onclick="PMA_querywindowCommit(\'history\');return false;"';    $tabs['history']['active'] = (bool) ($querydisplay_tab == 'history');    if ($GLOBALS['cfg']['QueryWindowDefTab'] == 'full') {        $tabs['all']['text']   = __('All');        $tabs['all']['fragment']   = '#';        $tabs['all']['attr']   = 'onclick="PMA_querywindowCommit(\'full\');return false;"';        $tabs['all']['active'] = (bool) ($querydisplay_tab == 'full');    }}$titles['Change'] = PMA_getIcon('b_edit.png', __('Change'));$url_query = PMA_generate_common_url($db, $table);if (! empty($sql_query)) {    $show_query = 1;}if ($no_js) {    // ... we redirect to appropriate query sql page    // works only full if $db and $table is also stored/grabbed from $_COOKIE    if (strlen($table)) {        include './tbl_sql.php';    } elseif (strlen($db)) {        include './db_sql.php';    } else {        include './server_sql.php';    }    exit;}/** * Defines the query to be displayed in the query textarea */if (! empty($show_query)) {    $query_to_display = $sql_query;} else {    $query_to_display = '';}$sql_query = '';/** * prepare JavaScript functionality */$js_include[] = 'common.js';$js_include[] = 'querywindow.js';if (PMA_isValid($_REQUEST['auto_commit'], 'identical', 'true')) {    $js_events[] = array(        'event'     => 'load',        'function'  => 'PMA_queryAutoCommit',    );}if (PMA_isValid($_REQUEST['init'])) {    $js_events[] = array(        'event'     => 'load',        'function'  => 'PMA_querywindowResize',    );}// always set focus to the textareaif ($querydisplay_tab == 'sql' || $querydisplay_tab == 'full') {    $js_events[] = array(        'event'     => 'load',        'function'  => 'PMA_querywindowSetFocus',    );}/** * start HTTP/HTML output */require_once './libraries/header_http.inc.php';require_once './libraries/header_meta_style.inc.php';require_once './libraries/header_scripts.inc.php';?></head><body id="bodyquerywindow"><div id="querywindowcontainer"><?phpif ($tabs) {    echo PMA_generate_html_tabs($tabs, array());    unset($tabs);}PMA_sqlQueryForm($query_to_display, $querydisplay_tab);// Hidden forms and query frame interaction stuff$_sql_history = PMA_getHistory($GLOBALS['cfg']['Server']['user']);if (! empty($_sql_history) && ($querydisplay_tab == 'history' || $querydisplay_tab == 'full')) {    $tab = $querydisplay_tab != 'full' ? 'sql' : 'full';    echo __('SQL history') . ':<br />'        . '<ul>';    foreach ($_sql_history as $query) {        echo '<li>' . "\n";        // edit link        $url_params = array(            'querydisplay_tab' => $tab,            'sql_query' => $query['sqlquery'],            'db' => $query['db'],            'table' => $query['table'],        );        echo '<a href="querywindow.php' . PMA_generate_common_url($url_params)            . '">' . $titles['Change'] . '</a>';        // execute link        $url_params['auto_commit'] = 'true';        echo '<a href="import.php' . PMA_generate_common_url($url_params) . '"'            . ' target="frame_content">';        if (! empty($query['db'])) {            echo '[';            echo htmlspecialchars(PMA_backquote($query['db']));            if (! empty($query['table'])) {                echo '.' . htmlspecialchars(PMA_backquote($query['table']));            }            echo  '] ';        }        if (strlen($query['sqlquery']) > 120) {            echo '<span title="' . htmlspecialchars($query['sqlquery']) . '">';            echo htmlspecialchars(substr($query['sqlquery'], 0, 50)) . ' [...] ';            echo htmlspecialchars(substr($query['sqlquery'], -50));            echo '</span>';        } else {            echo htmlspecialchars($query['sqlquery']);        }        echo '</a>' . "\n";        echo '</li>' . "\n";    }    unset($tab, $_sql_history, $query);    echo '</ul>' . "\n";}?><form action="querywindow.php" method="post" name="hiddenqueryform"    id="hiddenqueryform">    <?php echo PMA_generate_common_hidden_inputs('', ''); ?>    <input type="hidden" name="db" value="<?php echo htmlspecialchars($db); ?>" />    <input type="hidden" name="table" value="<?php echo htmlspecialchars($table); ?>" />    <input type="hidden" name="sql_query" value="" />    <input type="hidden" name="querydisplay_tab" value="<?php echo $querydisplay_tab; ?>" /></form></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * main css file from theme Original * * @package PhpMyAdmin-theme * @subpackage Original */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON') && !defined('TESTSUITE')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : (        isset($_COOKIE['pma_fontsize']) ? $_COOKIE['pma_fontsize'] : '82%'));?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    padding:            0;    margin:             0 0.5em 0 0;    color:              <?php echo $GLOBALS['cfg']['MainColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['MainBackground']; ?>;}<?php if (! empty($GLOBALS['cfg']['FontFamilyFixed'])) { ?>textarea, tt, pre, code {    font-family:        <?php echo $GLOBALS['cfg']['FontFamilyFixed']; ?>;}<?php } ?>h1 {    font-size:          140%;    font-weight:        bold;}h2 {    font-size:          120%;    font-weight:        bold;}h3 {    font-weight:        bold;}a, a:link,a:visited,a:active {    text-decoration:    none;    color:              #0000FF;    cursor:             pointer;}a:hover {    text-decoration:    underline;    color:              #FF0000;}dfn {    font-style:         normal;}dfn:hover {    font-style:         normal;    cursor:             help;}th {    font-weight:        bold;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;}a img {    border:             0;}hr {    color:              <?php echo $GLOBALS['cfg']['MainColor']; ?>;    background-color:   <?php echo $GLOBALS['cfg']['MainColor']; ?>;    border:             0;    height:             1px;}form {    padding:            0;    margin:             0;    display:            inline;}textarea {    overflow:           visible;    height:             <?php echo ceil($GLOBALS['cfg']['TextareaRows'] * 1.2); ?>em;}textarea.char {    height:             <?php echo ceil($GLOBALS['cfg']['CharTextareaRows'] * 1.2); ?>em;}fieldset {    margin-top:         1em;    border:             <?php echo $GLOBALS['cfg']['MainColor']; ?> solid 1px;    padding:            0.5em;    background:         <?php echo $GLOBALS['cfg']['BgOne']; ?>;}fieldset fieldset {    margin:             0.8em;}fieldset legend {    font-weight:        bold;    color:              #444444;    background-color:   <?php echo 'OPERA' != PMA_USR_BROWSER_AGENT ? 'transparent' : $GLOBALS['cfg']['BgOne']; ?>;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}table caption,table th,table td {    padding:            0.1em 0.5em 0.1em 0.5em;    margin:             0.1em;    vertical-align:     top;}img,input,select,button {    vertical-align:     middle;}/******************************************************************************//* classes */.clearfloat {    clear: both;}.floatleft {    float: <?php echo $left; ?>;    margin-<?php echo $right; ?>: 1em;}.paddingtop {    padding-top: 1em;}div.tools {    border: 1px solid #000000;    padding: 0.2em;}div.tools,fieldset.tblFooters {    margin-top:         0;    margin-bottom:      0.5em;    /* avoid a thick line since this should be used under another fieldset */    border-top:         0;    text-align:         <?php echo $right; ?>;    float:              none;    clear:              both;}div.null_div {    height: 20px;    text-align: center;    font-style:normal;    min-width:50px;}fieldset .formelement {    float:              <?php echo $left; ?>;    margin-<?php echo $right; ?>:       0.5em;    /* IE */    white-space:        nowrap;}/* revert for Gecko */fieldset div[class=formelement] {    white-space:        normal;}button.mult_submit {    border:             none;    background-color:   transparent;}/* odd items 1,3,5,7,... */table tr.odd th,.odd {    background: <?php echo $GLOBALS['cfg']['BgOne']; ?>;}/* even items 2,4,6,8,... */table tr.even th,.even {    background: <?php echo $GLOBALS['cfg']['BgTwo']; ?>;}/* odd table rows 1,3,5,7,... */table tr.odd th,table tr.odd,table tr.even th,table tr.even {    text-align:         <?php echo $left; ?>;}<?php if ($GLOBALS['cfg']['BrowseMarkerEnable']) { ?>/* marked table rows */td.marked,table tr.marked td,table tr.marked th,table tr.marked {    background:   <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color:   <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['BrowsePointerEnable']) { ?>/* hovered items */.odd:hover,.even:hover,.hover,.structure_actions_dropdown {    background: <?php echo $GLOBALS['cfg']['BrowsePointerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowsePointerColor']; ?>;}/* hovered table rows */table tr.odd:hover th,table tr.even:hover th,table tr.hover th {    background:   <?php echo $GLOBALS['cfg']['BrowsePointerBackground']; ?>;    color:   <?php echo $GLOBALS['cfg']['BrowsePointerColor']; ?>;}<?php } ?>/** * marks table rows/cells if the db field is in a where condition */td.condition,th.condition {    border: 1px solid <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;}/** * cells with the value NULL */td.null {    font-style: italic;    text-align: <?php echo $right; ?>;}table .valueHeader {    text-align:         <?php echo $right; ?>;    white-space:        normal;}table .value {    text-align:         <?php echo $right; ?>;    white-space:        normal;}/* IE doesnt handles 'pre' right */table [class=value] {    white-space:        normal;}<?php if (! empty($GLOBALS['cfg']['FontFamilyFixed'])) { ?>.value {    font-family:        <?php echo $GLOBALS['cfg']['FontFamilyFixed']; ?>;}<?php } ?>.attention {    color:              red;    font-weight:        bold;}.allfine {    color:              green;}img.lightbulb {    cursor:             pointer;}.pdflayout {    overflow:           hidden;    clip:               inherit;    background-color:   #FFFFFF;    display:            none;    border:             1px solid #000000;    position:           relative;}.pdflayout_table {    background:         #D3DCE3;    color:              #000000;    overflow:           hidden;    clip:               inherit;    z-index:            2;    display:            inline;    visibility:         inherit;    cursor:             move;    position:           absolute;    font-size:          80%;    border:             1px dashed #000000;}/* MySQL Parser */.syntax {    font-size:          80%;}.syntax a {    text-decoration: none;    border-bottom:1px dotted black;}.syntax_comment {    padding-left:       4pt;    padding-right:      4pt;}.syntax_digit {}.syntax_digit_hex {}.syntax_digit_integer {}.syntax_digit_float {}.syntax_punct {}.syntax_alpha {}.syntax_alpha_columnType {    text-transform:     uppercase;}.syntax_alpha_columnAttrib {    text-transform:     uppercase;}.syntax_alpha_reservedWord {    text-transform:     uppercase;    font-weight:        bold;}.syntax_alpha_functionName {    text-transform:     uppercase;}.syntax_alpha_identifier {}.syntax_alpha_charset {}.syntax_alpha_variable {}.syntax_quote {    white-space:        pre;}.syntax_quote_backtick {}/* leave some space between icons and text */.icon, img.footnotemarker {    vertical-align:     middle;    margin-right:       0.3em;    margin-left:        0.3em;}img.footnotemarker {    display: none;}/* no extra space in table cells */td .icon {    margin: 0;}.selectallarrow {    margin-<?php echo $right; ?>: 0.3em;    margin-<?php echo $left; ?>: 0.6em;}/* message boxes: error, confirmation */.success h1,.notice h1,div.error h1 {    border-bottom:      2px solid;    font-weight:        bold;    text-align:         <?php echo $left; ?>;    margin:             0 0 0.2em 0;}div.success,div.notice,div.error,div.footnotes {    margin:             0.3em 0 0 0;    border:             2px solid;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 10px 50%;    padding:            0.1em 0.1em 0.1em 36px;        <?php } else { ?>    background-position: 99% 50%;    padding:            10px 5% 10px 10px;        <?php } ?>    <?php } else { ?>    padding:            0.3em;    <?php } ?>}.success {    color:              #000000;    background-color:   #f0fff0;}h1.success,div.success {    border-color:       #00FF00;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_success.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;    padding:            0.2em 0.2em 0.2em 25px;        <?php } else { ?>    background-position: 97% 50%;    padding:            0.2em 25px 0.2em 0.2em;        <?php } ?>    <?php } ?>}.success h1 {    border-color:       #00FF00;}.notice, .footnotes {    color:              #000000;    background-color:   #FFFFDD;}h1.notice,div.notice,div.footnotes {    border-color:       #FFD700;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_notice.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;    padding:            0.2em 0.2em 0.2em 25px;        <?php } else { ?>    background-position: 97% 50%;    padding:            0.2em 25px 0.2em 0.2em;        <?php } ?>    <?php } ?>}.notice h1 {    border-color:       #FFD700;}.error {    background-color:   #FFFFCC;    color:              #ff0000;}h1.error,div.error {    border-color:       #ff0000;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_error.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;    padding:            0.2em 0.2em 0.2em 25px;        <?php } else { ?>    background-position: 97% 50%;    padding:            0.2em 25px 0.2em 0.2em;        <?php } ?>    <?php } ?>}div.error h1 {    border-color:       #ff0000;}.confirmation {    background-color:   #FFFFCC;}fieldset.confirmation {    border:             0.1em solid #FF0000;}fieldset.confirmation legend {    border-left:        0.1em solid #FF0000;    border-right:       0.1em solid #FF0000;    font-weight:        bold;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_really.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;    padding:            0.2em 0.2em 0.2em 25px;        <?php } else { ?>    background-position: 97% 50%;    padding:            0.2em 25px 0.2em 0.2em;        <?php } ?>    <?php } ?>}/* end messageboxes */.tblcomment {    font-size:          70%;    font-weight:        normal;    color:              #000099;}.tblHeaders {    font-weight:        bold;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;}div.tools,.tblFooters {    font-weight:        normal;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;}.tblHeaders a:link,.tblHeaders a:active,.tblHeaders a:visited,div.tools a:link,div.tools a:visited,div.tools a:active,.tblFooters a:link,.tblFooters a:active,.tblFooters a:visited {    color:              #0000FF;}.tblHeaders a:hover,div.tools a:hover,.tblFooters a:hover {    color:              #FF0000;}/* forbidden, no privilegs */.noPrivileges {    color:              #FF0000;    font-weight:        bold;}/* disabled text */.disabled,.disabled a:link,.disabled a:active,.disabled a:visited {    color:              #666666;}.disabled a:hover {    color:              #666666;    text-decoration:    none;}tr.disabled td,td.disabled {    background-color:   #cccccc;}.nowrap {    white-space:        nowrap;}/** * login form */body.loginform h1,body.loginform a.logo {    display: block;    text-align: center;}body.loginform {    text-align: center;}body.loginform div.container {    text-align: <?php echo $left; ?>;    width: 30em;    margin: 0 auto;}form.login label {    float: <?php echo $left; ?>;    width: 10em;    font-weight: bolder;}.commented_column {    border-bottom: 1px dashed black;}.column_attribute {    font-size: 70%;}/******************************************************************************//* specific elements *//* topmenu */ul#topmenu, ul#topmenu2, ul.tabs {    font-weight:        bold;    list-style-type:    none;    margin:             0;    padding:            0;}ul#topmenu2 {    margin: 0.25em 0.5em 0;    height: 2em;    clear: both;}ul#topmenu li, ul#topmenu2 li {    float:              <?php echo $left; ?>;    margin:             0;    padding:            0;    vertical-align:     middle;}#topmenu img, #topmenu2 img {    vertical-align:     middle;    margin-<?php echo $right; ?>:       0.1em;}/* default tab styles */ul#topmenu a, ul#topmenu span {    display:            block;    margin:             2px 2px 0;    padding:            2px 2px 0;    white-space:        nowrap;}ul#topmenu ul a {    margin:             0;    padding-bottom:     2px;}ul#topmenu .submenu {    position:           relative;    display:            none;}ul#topmenu .shown {    display:            block;}ul#topmenu ul {    margin:             0;    padding:            0;    position:           absolute;    list-style-type:    none;    display:            none;    border:             1px #666 solid;    z-index:            2;}ul#topmenu ul.only {    left: 0;}ul#topmenu ul.notonly {    right: 0;}ul#topmenu li:hover ul, ul#topmenu .submenuhover ul {    display:            block;}ul#topmenu ul li {    width:              100%;}ul#topmenu2 a {    display:            block;    margin:             0.1em;    padding:            0.2em;    white-space:        nowrap;}/* disabled tabs */ul#topmenu span.tab {    color:              #666666;}fieldset.caution a {    color:              #FF0000;}fieldset.caution a:hover {    color:              #ffffff;    background-color:   #FF0000;}<?php if ($GLOBALS['cfg']['LightTabs']) { ?>/* active tab */ul#topmenu a.tabactive, ul#topmenu2 a.tabactive {    color:              black;}ul#topmenu ul {    background:         <?php echo $GLOBALS['cfg']['MainBackground']; ?>;}<?php } else { ?>#topmenu {    margin-top:         0.5em;    padding:            0.1em 0.3em 0.1em 0.3em;}ul#topmenu ul {    -moz-box-shadow:    2px 2px 3px #666;    -webkit-box-shadow: 2px 2px 3px #666;    box-shadow:         2px 2px 3px #666;}ul#topmenu > li {    border-bottom:      1pt solid black;}/* default tab styles */ul#topmenu a, ul#topmenu span {    background-color:   <?php echo $GLOBALS['cfg']['BgOne']; ?>;    border:             0 solid <?php echo $GLOBALS['cfg']['BgTwo']; ?>;    border-width:       1pt 1pt 0 1pt;    -moz-border-radius: 0.4em 0.4em 0 0;    border-radius:      0.4em 0.4em 0 0;}ul#topmenu ul a {    border-width:       1pt 0 0 0;    -moz-border-radius: 0;    border-radius:      0;}ul#topmenu ul li:first-child a {    border-width:       0;}/* enabled hover/active tabs */ul#topmenu > li > a:hover,ul#topmenu > li > .tabactive {    margin:             0;    padding:            2px 4px;    text-decoration:    none;}ul#topmenu ul a:hover,ul#topmenu ul .tabactive {    text-decoration:    none;}ul#topmenu a.tab:hover,ul#topmenu .tabactive {    background-color:   <?php echo $GLOBALS['cfg']['MainBackground']; ?>;}ul#topmenu2 a.tab:hover,ul#topmenu2 a.tabactive {    background-color:   <?php echo $GLOBALS['cfg']['BgOne']; ?>;    -moz-border-radius: 0.3em;    border-radius:      0.3em;    text-decoration:    none;}/* to be able to cancel the bottom border, use <li class="active"> */ul#topmenu > li.active {     border-bottom:      1pt solid <?php echo $GLOBALS['cfg']['MainBackground']; ?>;}/* disabled tabs */ul#topmenu span.tab,a.error {    cursor:             url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>error.ico), default;}<?php } ?>/* end topmenu *//* zoom search */div#dataDisplay input, div#dataDisplay select {    margin: 0;    margin-<?php echo $right; ?>: 0.5em;}div#dataDisplay th {    line-height: 2em;}/* Calendar */table.calendar {    width:              100%;}table.calendar td {    text-align:         center;}table.calendar td a {    display:            block;}table.calendar td a:hover {    background-color:   #CCFFCC;}table.calendar th {    background-color:   #D3DCE3;}table.calendar td.selected {    background-color:   #FFCC99;}img.calendar {    border:             none;}form.clock {    text-align:         center;}/* end Calendar *//* table stats */div#tablestatistics table {    float: <?php echo $left; ?>;    margin-top: 0.5em;    margin-bottom: 0.5em;    margin-<?php echo $right; ?>: 0.5em;}/* END table stats *//* server privileges */#tableuserrights td,#tablespecificuserrights td,#tabledatabases td {    vertical-align: middle;}/* END server privileges *//* Heading */#topmenucontainer {    background: white;    padding-right: 1em;    width: 100%;}#serverinfo {    background: white;    font-weight:        bold;    padding-bottom: 0.5em;    width: 10000px;    overflow: hidden;}#serverinfo .item {    white-space:        nowrap;    float: <?php echo $left; ?>}#span_table_comment {    font-weight:        normal;    font-style:         italic;    white-space:        nowrap;}#serverinfo img {    margin:             0 0.1em 0 0.2em;}#textSQLDUMP {    width:              95%;    height:             95%;    font-family:        "Courier New", Courier, mono;    font-size:          110%;}#TooltipContainer {    position:           absolute;    z-index:            99;    width:              20em;    height:             auto;    overflow:           visible;    visibility:         hidden;    background-color:   #ffffcc;    color:              #006600;    border:             0.1em solid #000000;    padding:            0.5em;}/* user privileges */#fieldset_add_user_login div.item {    border-bottom:      1px solid silver;    padding-bottom:     0.3em;    margin-bottom:      0.3em;}#fieldset_add_user_login label {    float:              <?php echo $left; ?>;    display:            block;    width:              10em;    max-width:          100%;    text-align:         <?php echo $right; ?>;    padding-<?php echo $right; ?>:      0.5em;}#fieldset_add_user_login span.options #select_pred_username,#fieldset_add_user_login span.options #select_pred_hostname,#fieldset_add_user_login span.options #select_pred_password {    width:              100%;    max-width:          100%;}#fieldset_add_user_login span.options {    float: <?php echo $left; ?>;    display: block;    width: 12em;    max-width: 100%;    padding-<?php echo $right; ?>: 0.5em;}#fieldset_add_user_login input {    width: 12em;    clear: <?php echo $right; ?>;    max-width: 100%;}#fieldset_add_user_login span.options input {    width: auto;}#fieldset_user_priv div.item {    float: <?php echo $left; ?>;    width: 9em;    max-width: 100%;}#fieldset_user_priv div.item div.item {    float: none;}#fieldset_user_priv div.item label {    white-space: nowrap;}#fieldset_user_priv div.item select {    width: 100%;}#fieldset_user_global_rights fieldset {    float: <?php echo $left; ?>;}/* END user privileges *//* serverstatus */.linkElem:hover {    text-decoration:    underline;    color:              #235a81;    cursor: pointer;}h3#serverstatusqueries span {    font-size:60%;    display:inline;}img.sortableIcon {    float:right;    background-repeat:no-repeat;    margin:0;}.buttonlinks {    float: <?php echo $right; ?>;    white-space: nowrap;}.jsfeature {    display: none; /* Made visible with js */}/* Also used for the variables page */fieldset#tableFilter {    margin-bottom:1em;}div#serverStatusTabs {    margin-top:1em;}caption a.top {    float: <?php echo $right; ?>;}div#serverstatusquerieschart {    float:<?php echo $left; ?>;    width:500px;    height:350px;    padding-<?php echo $left; ?>: 30px;}div#serverstatus table#serverstatusqueriesdetails {    float: <?php echo $left; ?>;}table#serverstatustraffic {    float: <?php echo $left; ?>;}table#serverstatusconnections {    float: <?php echo $left; ?>;    margin-<?php echo $left; ?>: 30px;}table#serverstatusvariables {    width: 100%;    margin-bottom: 1em;}table#serverstatusvariables .name {    width: 18em;    white-space:nowrap;}table#serverstatusvariables .value {    width: 6em;}table#serverstatusconnections {    float: <?php echo $left; ?>;    margin-<?php echo $left; ?>: 30px;}div#serverstatus table tbody td.descr a,div#serverstatus table .tblFooters a {    white-space: nowrap;}div.liveChart {    clear:both;    min-width:500px;    height:400px;    padding-bottom:80px;}#addChartDialog input[type="text"] {    margin: 0;    padding:3px;}div#chartVariableSettings {    border:1px solid #ddd;    background-color:#E6E6E6;    margin-left:10px;}table#chartGrid div.monitorChart {    background: #EBEBEB;}div#serverstatus div.tabLinks {    float:<?php echo $left; ?>;    padding-bottom: 10px;}.popupContent {    display: none;    position: absolute;    border: 1px solid #CCC;    margin:0;    padding:3px;    -moz-box-shadow:    1px 1px 6px #ddd;    -webkit-box-shadow: 2px 2px 3px #666;    box-shadow:         2px 2px 3px #666;    background-color:white;    z-index: 2;}div#logTable {    padding-top: 10px;    clear: both;}div#logTable table {    width:100%;}.smallIndent {    padding-left: 7px;}/* end serverstatus *//* server variables */a.editLink {    float: <?php echo $left; ?>;    font-family:sans-serif;}table.serverVariableEditTable {    border:0;    margin:0;    padding:0;    width:100%;}table.serverVariableEditTable td {    border:0;    margin:0;    padding:0;}table.serverVariableEditTable td:first-child {    white-space:nowrap;    vertical-align:middle;}table.serverVariableEditTable input {    width:95%;}table#serverVariables td {    height:18px;}/* end server variables *//* querywindow */body#bodyquerywindow {    margin: 0;    padding: 0;    background-image: none;    background-color: #F5F5F5;}div#querywindowcontainer {    margin: 0;    padding: 0;    width: 100%;}div#querywindowcontainer fieldset {    margin-top: 0;}/* END querywindow *//* profiling */div#profilingchart {    width:550px;    height:370px;    float:left;}/* END profiling *//* querybox */div#sqlquerycontainer {    float: <?php echo $left; ?>;    width: 69%;    /* height: 15em; */}div#tablefieldscontainer {    float: <?php echo $right; ?>;    width: 29%;    /* height: 15em; */}div#tablefieldscontainer select {    width: 100%;    /* height: 12em; */}textarea#sqlquery {    width: 100%;    /* height: 100%; */}textarea#sql_query_edit{    height:7em;    width: 95%;    display:block;}div#queryboxcontainer div#bookmarkoptions {    margin-top: 0.5em;}/* end querybox *//* main page */#maincontainer {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>logo_right.png);    background-position: <?php echo $right; ?> bottom;    background-repeat: no-repeat;}#mysqlmaininformation,#pmamaininformation {    float: <?php echo $left; ?>;    width: 49%;}#maincontainer ul {    list-style-type: disc;    vertical-align: middle;}#maincontainer li {    margin:  0.2em 0em;}/* END main page */<?php if ($GLOBALS['cfg']['MainPageIconic']) { ?>/* iconic view for ul items */li#li_create_database {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_newdb.png);}li#li_select_lang {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_lang.png);}li#li_select_mysql_collation {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_asci.png);}li#li_select_theme{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_theme.png);}li#li_user_info{    /* list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_rights.png); */}li#li_mysql_status{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_status.png);}li#li_mysql_variables{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_vars.png);}li#li_mysql_processes{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_process.png);}li#li_mysql_collations{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_asci.png);}li#li_mysql_engines{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_engine.png);}li#li_mysql_binlogs {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_tbl.png);}li#li_mysql_databases {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_db.png);}li#li_export {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_export.png);}li#li_import {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_import.png);}li#li_change_password {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_passwd.png);}li#li_log_out {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_loggoff.png);}li#li_mysql_privilegs{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_rights.png);}li#li_switch_dbstats {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_dbstatistics.png);}li#li_flush_privileges {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_reload.png);}li#li_user_preferences {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_tblops.png);}/* END iconic view for ul items */<?php } /* end if $GLOBALS['cfg']['MainPageIconic'] */ ?>#body_browse_foreigners {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    margin:             0.5em 0.5em 0 0.5em;}#bodyquerywindow {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;}#bodythemes {    width: 500px;    margin: auto;    text-align: center;}#bodythemes img {    border: 0.1em solid black;}#bodythemes a:hover img {    border: 0.1em solid red;}#fieldset_select_fields {    float: <?php echo $left; ?>;}#selflink {    clear: both;    display: block;    margin-top: 1em;    margin-bottom: 1em;    width: 100%;    border-top: 0.1em solid silver;    text-align: <?php echo $right; ?>;}#table_innodb_bufferpool_usage,#table_innodb_bufferpool_activity {    float: <?php echo $left; ?>;}#div_mysql_charset_collations table {    float: <?php echo $left; ?>;}.operations_half_width {    width: 48%;    float: <?php echo $left; ?>;}.operations_full_width {    width: 100%;    clear: both;}#qbe_div_table_list {    float: <?php echo $left; ?>;}#qbe_div_sql_query {    float: <?php echo $left; ?>;}label.desc {    width: 30em;    float: <?php echo $left; ?>;}label.desc sup {    position: absolute;}code.sql, div.sqlvalidate {    display:            block;    padding:            0.3em;    margin-top:         0;    margin-bottom:      0;    border:             <?php echo $GLOBALS['cfg']['MainColor']; ?> solid 1px;    border-top:         0;    border-bottom:      0;    max-height:         10em;    overflow:           auto;    background:         <?php echo $GLOBALS['cfg']['BgOne']; ?>;}#main_pane_left {    width:              60%;    float:              <?php echo $left; ?>;    padding-top:        1em;}#main_pane_right {    margin-<?php echo $left; ?>: 60%;    padding-top: 1em;    padding-<?php echo $left; ?>: 1em;}.group {    border-<?php echo $left; ?>: 0.3em solid <?php echo $GLOBALS['cfg']['ThBackground']; ?>;    margin-bottom:      1em;}.group h2 {    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;    padding:            0.1em 0.3em;    margin-top:         0;}.group-cnt {    padding: 0 0 0 0.5em;    display: inline-block;    width: 98%;}textarea#partitiondefinition {    height:3em;}/* for elements that should be revealed only via js */.hide {    display:            none;}#li_select_server {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_host.png);}#list_server {    list-style-image: none;}/**  *  Progress bar styles  */div.upload_progress_bar_outer{    border: 1px solid black;    width: 202px;}div.upload_progress_bar_inner{    background-color: <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    width: 0;    height: 12px;    margin: 1px;}table#serverconnection_src_remote,table#serverconnection_trg_remote,table#serverconnection_src_local,table#serverconnection_trg_local  {  float:left;}/**  *  Validation error message styles  */.invalid_value{background:#F00;}/**  *  Ajax notification styling  */ .ajax_notification {    top: 0;           /** The notification needs to be shown on the top of the page */    position: fixed;    margin-top: 0;    margin-right: auto;    margin-bottom: 0;    margin-left: auto;    padding: 3px 5px;   /** Keep a little space on the sides of the text */    width: 350px;    background-color: #FFD700;    z-index: 1100;      /** If this is not kept at a high z-index, the jQueryUI modal dialogs (z-index:1000) might hide this */    text-align: center;    display: block;    left: 0;    right: 0;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif);    background-repeat: no-repeat;    background-position: 2%; } #loading_parent {    /** Need this parent to properly center the notification division */    position: relative;    width: 100%; }/**  * Export and Import styles  */.exportoptions h3, .importoptions h3 {    border-bottom: 1px #999999 solid;    font-size: 110%;}.exportoptions ul, .importoptions ul, .format_specific_options ul {    list-style-type: none;    margin-bottom: 15px;}.exportoptions li, .importoptions li {    margin: 7px;}.exportoptions label, .importoptions label, .exportoptions p, .importoptions p {    margin: 5px;    float: none;}#csv_options label.desc, #ldi_options label.desc, #latex_options label.desc, #output label.desc{    float: left;    width: 15em;}.exportoptions, .importoptions {    margin: 20px 30px 30px 10px}.format_specific_options h3 {    margin: 10px 0 0 10px;    border: 0;}.format_specific_options {    border: 1px solid #999999;    margin: 7px 0;    padding: 3px;}p.desc {    margin: 5px;}/**  * Export styles only  */select#db_select, select#table_select {    width: 400px;}.export_sub_options {    margin: 20px 0 0 30px;}.export_sub_options h4 {    border-bottom: 1px #999999 solid;}.export_sub_options li.subgroup {    display: inline-block;    margin-top: 0;}.export_sub_options li {    margin-bottom: 0;}#quick_or_custom, #output_quick_export {    display: none;}/** * Import styles only */.importoptions #import_notification {    margin: 10px 0;    font-style: italic;}input#input_import_file {    margin: 5px;}.formelementrow {    margin: 5px 0 5px 0;}/** * GIS data editor styles */a.close_gis_editor {    float: right;}#gis_editor {    display: none;    position: fixed;    _position: absolute; /* hack for IE */    z-index: 1001;    overflow-y: auto;    overflow-x: hidden;}#gis_data {    min-height: 230px;}#gis_data_textarea {    height: 6em;}#gis_data_editor {    background: #D0DCE0;    padding: 15px;    min-height: 500px;}#gis_data_editor .choice {    display: none;}#gis_data_editor input[type="text"] {    width: 75px;}#popup_background {    display: none;    position: fixed;    _position: absolute; /* hack for IE6 */    width: 100%;    height: 100%;    top: 0;    left: 0;    background: #000;    z-index: 1000;    overflow: hidden;}/** * ENUM/SET editor styles */p.enum_notice {    margin: 5px 2px;    font-size: 80%;}fieldset.enum_editor_no_js {    width: 40em;    padding: 1em;}hr.enum_editor_no_js {    background-color: #aaa;}#enum_editor p {    font-style:italic;}#enum_editor .values, #enum_editor .add, .enum_editor_no_js #values {    width: 100%;}#enum_editor .add td {    vertical-align: middle;    width: 50%;    padding: 0 1em;}#enum_editor .values td.drop {    width: 2em;    cursor: pointer;    vertical-align: middle;}#enum_editor .values input {    margin: 0.1em 0;    padding-right: 2.5em;    width: 100%;}#enum_editor .values img {    width: 2em;    vertical-align: middle;}#enum_editor input.add_value {    margin: 1em 0;}#enum_editor_output textarea,.enum_editor_no_js input {    width: 100%;    float: right;    margin: 1em 0 0 0;}#enum_editor_no_js {    width: 100%;}.enum_editor_no_js input.submit {    margin: 1em 0;}/** * ENUM/SET editor integration for the routines editor */.enum_hint {    position: relative;}.enum_hint a {    position: absolute;    left: 81%;    bottom: 0.35em;}/** * Table structure styles */.structure_actions_dropdown {    position: absolute;    padding: 3px;    display: none;    z-index: 100;}.structure_actions_dropdown a {    display: block;}td.more_opts {    display: none;    white-space: nowrap;}/** * Indexes */#index_frm .index_info input,#index_frm .index_info select {    width: 100%;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}#index_frm .slider {    width: 10em;    margin: 0.6em;    float: <?php echo $left; ?>;}#index_frm .add_fields {    float: <?php echo $left; ?>;}#index_frm .add_fields input {    margin-<?php echo $left; ?>: 1em;}#index_frm input {    margin: 0;}#index_frm td {    vertical-align: middle;}table#index_columns {    width: 100%;}table#index_columns select {    width: 100%;}iframe.IE_hack {    z-index: 1;    position: absolute;    display: none;    border: 0;    filter: alpha(opacity=0);}/* config forms */.config-form ul.tabs {    margin:      1.1em 0.2em 0;    padding:     0 0 0.3em 0;    list-style:  none;    font-weight: bold;}.config-form ul.tabs li {    float: <?php echo $left; ?>;}.config-form ul.tabs li a {    display:          block;    margin:           0.1em 0.2em 0;    padding:          0.1em 0.4em;    white-space:      nowrap;    text-decoration:  none;    border:           1px solid <?php echo $GLOBALS['cfg']['BgTwo']; ?>;    border-bottom:    none;}.config-form ul.tabs li a:hover,.config-form ul.tabs li a:active,.config-form ul.tabs li a.active {    margin:           0;    padding:          0.1em 0.6em 0.2em;}.config-form ul.tabs li.active a {    background-color: <?php echo $GLOBALS['cfg']['BgOne']; ?>;}.config-form fieldset {    margin-top:   0;    padding:      0;    clear:        both;    /*border-color: <?php echo $GLOBALS['cfg']['BgTwo']; ?>;*/}.config-form legend {    display: none;}.config-form fieldset p {    margin:    0;    padding:   0.5em;    background: <?php echo $GLOBALS['cfg']['BgTwo']; ?>;}.config-form fieldset .errors { /* form error list */    margin:       0 -2px 1em -2px;    padding:      0.5em 1.5em;    background:   #FBEAD9;    border:       0 #C83838 solid;    border-width: 1px 0;    list-style:   none;    font-family:  sans-serif;    font-size:    small;}.config-form fieldset .inline_errors { /* field error list */    margin:     0.3em 0.3em 0.3em 0;    padding:    0;    list-style: none;    color:      #9A0000;    font-size:  small;}.config-form fieldset th {    padding:        0.3em 0.3em 0.3em 0.5em;    text-align:     left;    vertical-align: top;    width:          40%;    background:     transparent;}.config-form fieldset .doc, .config-form fieldset .disabled-notice {    margin-left: 1em;}.config-form fieldset .disabled-notice {    font-size: 80%;    text-transform: uppercase;    color: #E00;    cursor: help;}.config-form fieldset td {    padding-top:    0.3em;    padding-bottom: 0.3em;    vertical-align: top;}.config-form fieldset th small {    display:     block;    font-weight: normal;    font-family: sans-serif;    font-size:   x-small;    color:       #444;}.config-form fieldset th, .config-form fieldset td {    border-top: 1px <?php echo $GLOBALS['cfg']['BgTwo']; ?> solid;}fieldset .group-header th {    background: <?php echo $GLOBALS['cfg']['BgTwo']; ?>;}fieldset .group-header + tr th {    padding-top: 0.6em;}fieldset .group-field-1 th, fieldset .group-header-2 th {    padding-left: 1.5em;}fieldset .group-field-2 th, fieldset .group-header-3 th {    padding-left: 3em;}fieldset .group-field-3 th {    padding-left: 4.5em;}fieldset .disabled-field th,fieldset .disabled-field th small,fieldset .disabled-field td {    color: #666;    background-color: #ddd;}.config-form .lastrow {    border-top: 1px #000 solid;}.config-form .lastrow {    background: <?php echo $GLOBALS['cfg']['ThBackground']; ?>;;    padding:    0.5em;    text-align: center;}.config-form .lastrow input {    font-weight: bold;}/* form elements */.config-form span.checkbox {    padding: 2px;    display: inline-block;}.config-form .custom { /* customized field */    background: #FFC;}.config-form span.checkbox.custom {    padding:    1px;    border:     1px #EDEC90 solid;    background: #FFC;}.config-form .field-error {    border-color: #A11 !important;}.config-form input[type="text"],.config-form select,.config-form textarea {    border: 1px #A7A6AA solid;    height: auto;}.config-form input[type="text"]:focus,.config-form select:focus,.config-form textarea:focus {    border:     1px #6676FF solid;    background: #F7FBFF;}.config-form .field-comment-mark {    font-family: serif;    color: #007;    cursor: help;    padding: 0 0.2em;    font-weight: bold;    font-style: italic;}.config-form .field-comment-warning {    color: #A00;}/* error list */.config-form dd {    margin-left: 0.5em;}.config-form dd:before {    content: "\25B8  ";}.click-hide-message {    cursor: pointer;}.prefsmanage_opts {    margin-<?php echo $left; ?>: 2em;}#prefs_autoload {    margin-bottom: 0.5em;}.rte_table {    table-layout: fixed;}.rte_table td {    vertical-align:     middle;}.rte_table tr td:nth-child(1) {    font-weight:        bold;}.rte_table input, .rte_table select, .rte_table textarea {    width:              100%;    margin:             0;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}.rte_table .routine_params_table {    width:              100%;}#placeholder .button {    position: absolute;    cursor: pointer;}#placeholder div.button {    font-size: smaller;    color: #999;    background-color: #eee;    padding: 2px;}.wrapper {    float: <?php echo $left; ?>;    margin-bottom: 0.5em;}.toggleButton {    position: relative;    cursor: pointer;    font-size: 0.8em;    text-align: center;    line-height: 1.55em;    height: 1.55em;    overflow: hidden;    border-right: 0.1em solid #888;    border-left: 0.1em solid #888;}.toggleButton table,.toggleButton td,.toggleButton img {    padding: 0;    position: relative;}.toggleButton .container {    position: absolute;}.toggleButton .toggleOn {    color: white;    padding: 0 1em;}.toggleButton .toggleOff {    padding: 0 1em;}.doubleFieldset fieldset {    width: 48%;    float: <?php echo $left; ?>;    padding: 0;}.doubleFieldset fieldset.left {    margin-<?php echo $right; ?>: 1%;}.doubleFieldset fieldset.right {    margin-<?php echo $left; ?>: 1%;}.doubleFieldset legend {    margin-<?php echo $left; ?>: 0.5em;}.doubleFieldset div.wrap {    padding: 0.5em;}#table_columns input[type="text"], #table_columns select {    width:              10em;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}#placeholder {    position: relative;    border: 1px solid #aaa;    float: right;    overflow: hidden;}.placeholderDrag {    cursor: move;}#placeholder .button {    position: absolute;}#left_arrow {    left:8px;    top:26px;}#right_arrow {    left:26px;    top:26px;}#up_arrow {    left:17px;    top:8px;}#down_arrow {    left:17px;    top:44px;}#zoom_in {    left:17px;    top:67px;}#zoom_world {    left:17px;    top:85px;}#zoom_out {    left:17px;    top:103px;}.gis_table td {    vertical-align: middle;}.gis_table select {    min-width: 151px;}.gis_table .save {    font-weight: bold;    vertical-align: bottom;    height: 100px;}.gis_table .button {   text-align: <?php echo $right; ?>;}.gis_table .choice {    display:none;}.CodeMirror {  font-size: 140%;  font-family: monospace;  background: white;  border: 1px solid black;}.CodeMirror-scroll {  overflow: auto;  height:             <?php echo ceil($GLOBALS['cfg']['TextareaRows'] * 1.2); ?>em;  /* This is needed to prevent an IE[67] bug where the scrolled content     is visible outside of the scrolling box. */  position: relative;}.CodeMirror-gutter {  position: absolute; left: 0; top: 0;  z-index: 10;  background-color: #f7f7f7;  border-right: 1px solid #eee;  min-width: 2em;  height: 100%;}.CodeMirror-gutter-text {  color: #aaa;  text-align: right;  padding: .4em .2em .4em .4em;  white-space: pre !important;}.CodeMirror-lines {  padding: .4em;}.CodeMirror pre {  -moz-border-radius: 0;  -webkit-border-radius: 0;  -o-border-radius: 0;  border-radius: 0;  border-width: 0; margin: 0; padding: 0; background: transparent;  font-family: inherit;  font-size: inherit;  padding: 0; margin: 0;  white-space: pre;  word-wrap: normal;}.CodeMirror-wrap pre {  word-wrap: break-word;  white-space: pre-wrap;}.CodeMirror-wrap .CodeMirror-scroll {  overflow-x: hidden;}.CodeMirror textarea {  font-family: inherit !important;  font-size: inherit !important;}.CodeMirror-cursor {  z-index: 10;  position: absolute;  visibility: hidden;  border-left: 1px solid black !important;}.CodeMirror-focused .CodeMirror-cursor {  visibility: visible;}span.CodeMirror-selected {  background: #ccc !important;  color: HighlightText !important;}.CodeMirror-focused span.CodeMirror-selected {  background: Highlight !important;}.CodeMirror-matchingbracket {color: #0f0 !important;}.CodeMirror-nonmatchingbracket {color: #f22 !important;}<?php echo $_SESSION['PMA_Theme']->getCssCodeMirror(); ?>.colborder {    cursor: col-resize;    height: 100%;    margin-left: -5px;    position: absolute;    width: 5px;}.colborder_active {    border-right: 2px solid #a44;}.pma_table td {    position: static;}.pma_table th.draggable span, .pma_table tbody td span {    display: block;    overflow: hidden;}.cRsz {    position: absolute;}.draggable {    cursor: move;}.cCpy {    background: #000;    color: #FFF;    font-weight: bold;    margin: 0.1em;    padding: 0.3em;    position: absolute;}.cPointer {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_pointer.png);    height: 20px;    margin-left: -5px;  /* must be minus half of its width */    margin-top: -10px;    position: absolute;    width: 10px;}.normalqTip {    background: #333 !important;    opacity: 0.8 !important;    border:1px solid #000 !important;    -moz-border-radius: 0.3em !important;    -webkit-border-radius: 0.3em !important;    border-radius: 0.3em !important;    text-shadow: -1px -1px #000 !important;    font-size: 0.8em !important;    font-weight: bold !important;}.normalqTip * {    background: none !important;    color: #FFF !important;}.normalqTipContent {    padding: 1px 3px !important;}.data_full_width {    width: 100%;}.cHide {    background: #D3DCE3 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_hide.png);    color: #CCC;    cursor: pointer;    height: 16px;    margin-left: -5px;    margin-top: 0.3em;    position: absolute;    width: 16px;}.cHide:hover {    background-color: #AAA;}.cDrop {    left: 0;    position: absolute;    top: 0;}.coldrop {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_drop.png);    cursor: pointer;    height: 16px;    margin-left: 0.5em;    margin-top: 0.3em;    position: absolute;    width: 16px;}.coldrop:hover, .coldrop-hover {    background-color: #999;}.cList {    background: #EEE;    border: solid 1px #999;    position: absolute;}.cList .lDiv div {    padding: 0.2em 0.5em 0.2em 0.2em;}.cList .lDiv div:hover {    background: #DDD;    cursor: pointer;}.cList .lDiv div input {    cursor: pointer;}.showAllColBtn {    border-bottom: solid 1px #999;    border-top: solid 1px #999;    cursor: pointer;    font-size: 0.9em;    font-weight: bold;    padding: 0.35em 1em;    text-align: center;}.showAllColBtn:hover {    background: #DDD;}.navigation {    background: #E5E5E5;    border: 1px solid black;    margin: 0.8em 0;}.navigation td {    margin: 0;    padding: 0;    vertical-align: middle;    white-space: nowrap;}.navigation_separator {    color: #555;    display: inline-block;    text-align: center;    width: 1.2em;    text-shadow: 1px 0 #FFF;}.navigation input[type=submit] {    background: none;    border: 0;    margin: 0;    padding: 0.3em 0.5em;    min-width: 1.5em;    font-weight: bold;}.navigation input[type=submit]:hover, .navigation input.edit_mode_active {    background: #333;    color: white;    cursor: pointer;}.navigation select {    margin: 0 0.8em;}.cEdit {    margin: 0;    padding: 0;    position: absolute;}.cEdit input[type=text] {    background: #FFF;    height: 100%;    margin: 0;    padding: 0;}.cEdit .edit_area {    background: #FFF;    border: 1px solid #999;    min-width: 10em;    padding: 0.3em 0.5em;}.cEdit .edit_area select, .cEdit .edit_area textarea {    width: 97%;}.cEdit .cell_edit_hint {    color: #555;    font-size: 0.8em;    margin: 0.3em 0.2em;}.cEdit .edit_box {    overflow: hidden;    padding: 0;}.cEdit .edit_box_posting {    background: #FFF url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat right center;    padding-right: 1.5em;}.cEdit .edit_area_loading {    background: #FFF url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat center;    height: 10em;}.cEdit .goto_link {    background: #EEE;    color: #555;    padding: 0.2em 0.3em;}.saving_edited_data {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat left;    padding-left: 20px;}/* css for timepicker */.ui-timepicker-div .ui-widget-header { margin-bottom: 8px; }.ui-timepicker-div dl { text-align: left; }.ui-timepicker-div dl dt { height: 25px; }.ui-timepicker-div dl dd { margin: -25px 0 10px 65px; }.ui-timepicker-div td { font-size: 90%; }/* Designer */.input_tab {    background-color: #A6C7E1;    color: #000000;}#canvas {    background-color: #FFFFFF;    color: #000000;}canvas.pmd {    display: inline-block;    overflow: hidden;    text-align: left;}canvas.pmd * {    behavior: url(#default#VML);}.pmd_tab {    background-color: #FFFFFF;    color: #000000;    border-collapse: collapse;    border: 1px solid #AAAAAA;    z-index: 1;    -moz-user-select: none;}.tab_zag {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    text-align: center;    cursor: move;    padding: 1px;    font-weight: bold;}.tab_zag_2 {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header_Linked.png);    background-repeat: repeat-x;    text-align: center;    cursor: move;    padding: 1px;    font-weight: bold;}.tab_field {    background: #FFFFFF;    color: #000000;    cursor: default;}.tab_field_2 {    background-color: #CCFFCC;    color: #000000;    background-repeat: repeat-x;    cursor: default;}.tab_field_3 {    background-color: #FFE6E6; /*#DDEEFF*/    color: #000000;    cursor: default;}#pmd_hint {    white-space: nowrap;    position: absolute;    background-color: #99FF99;    color: #000000;    left: 200px;    top: 50px;    z-index: 3;    border: #00CC66 solid 1px;    display: none;}.scroll_tab {    overflow: auto;    width: 100%;    height: 500px;}.pmd_Tabs {    cursor: default;    color: #0055bb;    white-space: nowrap;    text-decoration: none;    text-indent: 3px;    font-weight: bold;    margin-left: 2px;    text-align: left;    background-color: #FFFFFF;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/left_panel_butt.png);    border: #CCCCCC solid 1px;}.pmd_Tabs2 {    cursor: default;    color: #0055bb;    background: #FFEE99;    text-indent: 3px;    font-weight: bold;    white-space: nowrap;    text-decoration: none;    border: #9999FF solid 1px;    text-align: left;}.owner {    font-weight: normal;    color: #888888;}.option_tab {    padding-left: 2px;    padding-right: 2px;    width: 5px;}.select_all {    vertical-align: top;    padding-left: 2px;    padding-right: 2px;    cursor: default;    width: 1px;    color: #000000;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;}.small_tab {    vertical-align: top;    background-color: #0064ea;    color: #FFFFFF;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/small_tab.png);    cursor: default;    text-align: center;    font-weight: bold;    padding-left: 2px;    padding-right: 2px;    width: 1px;    text-decoration: none;}.small_tab2 {    vertical-align: top;    color: #FFFFFF;    background-color: #FF9966;    cursor: default;    padding-left: 2px;    padding-right: 2px;    text-align: center;    font-weight: bold;    width: 1px;    text-decoration: none;}.small_tab_pref {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    text-align: center;    width: 1px;}.small_tab_pref2 {    vertical-align: top;    color: #FFFFFF;    background-color: #FF9966;    cursor: default;    text-align: center;    font-weight: bold;    width: 1px;    text-decoration: none;}.butt {    border: #4477aa solid 1px;    font-weight: bold;    height: 19px;    width: 70px;    background-color: #FFFFFF;    color: #000000;    vertical-align: baseline;}.L_butt2_1 {    padding: 1px;    text-decoration: none;    background-color: #ffffff;    color: #000000;    vertical-align: middle;    cursor: default;}.L_butt2_2 {    padding: 0;    border: #0099CC solid 1px;    background: #FFEE99;    text-decoration: none;    color: #000000;    cursor: default;}/* ---------------------------------------------------------------------------*/.bor {    width: 10px;    height: 10px;}.frams1 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/1.png) no-repeat right bottom;}.frams2 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/2.png) no-repeat left bottom;}.frams3 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/3.png) no-repeat left top;}.frams4 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/4.png) no-repeat right top;}.frams5 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/5.png) repeat-x center bottom;}.frams6 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/6.png) repeat-y left;}.frams7 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/7.png) repeat-x top;}.frams8 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/8.png) repeat-y right;}#osn_tab {    background-color: #FFFFFF;    color: #000000;    border: #A9A9A9 solid 1px;}.pmd_header {    background-color: #EAEEF0;    color: #000000;    text-align: center;    font-weight: bold;    margin: 0;    padding: 0;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/top_panel.png);    background-position: top;    background-repeat: repeat-x;    border-right: #999999 solid 1px;    border-left: #999999 solid 1px;    height: 28px;}.pmd_header a {    display: block;    float: left;    margin: 3px 1px 4px 1px;    height: 20px;    border: 1px dotted #ffffff;}.pmd_header .M_bord {    display: block;    float: left;    margin: 4px;    height: 20px;    width: 2px;}.pmd_header a.first {    margin-right: 1em;}.pmd_header a.last {    margin-left: 1em;}a.M_butt_Selected_down_IE,a.M_butt_Selected_down {    border: 1px solid #C0C0BB;    background-color: #99FF99;    color: #000000;}a.M_butt_Selected_down_IE:hover,a.M_butt_Selected_down:hover,a.M_butt:hover {    border: 1px solid #0099CC;    background-color: #FFEE99;    color: #000000;}#layer_menu {    z-index: 1000;    position: absolute;    left: 0;    background-color: #EAEEF0;    border: #999999 solid 1px;}#layer_action {    position: absolute;    left: 638px;    top: 52px;    z-index: 1000;    background-color: #CCFF99;    padding: 3px;    border: #009933 solid 1px;    white-space: nowrap;    font-weight: bold;}#layer_upd_relation {    position: absolute;    left: 637px;    top: 224px;    z-index: 1000;}#layer_new_relation {    position: absolute;    left: 636px;    top: 85px;    z-index: 1000;    width: 153px;}#pmd_optionse {    position: absolute;    left: 636px;    top: 85px;    z-index: 1000;    width: 153px;}#layer_menu_sizer {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/resize.png);    cursor: nw-resize;    width: 16px;    height: 16px;}.panel {    position: fixed;    top: 50px;    right: 0;    display: none;    background: #FFF;    border:1px solid #F5F5F5;    width: 350 px;    height: auto;    padding: 30px 170px 30px 30px;    color:#FFF;    z-index:99;}a.trigger{    position: fixed;    text-decoration: none;    top: 60px; right: 0;    color:#fff;    padding: 10px 40px 10px 15px;    background:#333333 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/plus.png) 85% 55% no-repeat;    border:1px solid #444444;    display: block;}a.trigger:hover{    position: fixed;    text-decoration: none;    top: 60px; right: 0;    color:#080808;    padding: 10px 40px 10px 15px;    background:#fff696 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/plus.png) 85% 55% no-repeat;    border:1px solid #999;    display: block;}a.active.trigger {    background:#222222 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/minus.png) 85% 55% no-repeat;    z-index:999;}a.active.trigger:hover {    background:#fff696 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/minus.png) 85% 55% no-repeat;    z-index:999;}h2.tiger{    background-repeat: repeat-x;    padding: 1px;    font-weight: bold;    padding: 50 20 50 20px;    margin: 0 0 5px 0;    width: 250px;    float: left;    color : #333;    text-align: center;}h2.tiger a {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    text-align: center;    text-decoration: none;    color : #333;    display: block;}h2.tiger a:hover {    color: #000;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header_Linked.png);}h2.active {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    padding: 1px;    background-position: left bottom;}.toggle_container {    margin: 0 0 5px;    padding: 0;    border-top: 1px solid #d6d6d6;    background: #FFF ;    width: 250px;    overflow: hidden;    font-size: 1.2em;    clear: both;}.toggle_container .block {    background-color: #DBE4E8;    padding:40 15 40 15px; /*--Padding of Container--*/    border:1px solid #999;    color:#000;}.history_table {    text-align: center;    background-color: #9999CC;}.history_table2 {    text-align: center;    background-color: #DBE4E8;}#filter {    display: none;    position: absolute;    top: 0%;    left: 0%;    width: 100%;    height: 100%;    background-color: #CCA;    z-index:10;    opacity:0.5;    filter: alpha(opacity=50);}#box {    display: none;    position: absolute;    top: 20%;    left: 30%;    width: 500px;    height: 220px;    padding: 48px;    margin:0;    border: 1px solid black;    background-color: white;    z-index:101;    overflow: visible;}#boxtitle {    position:absolute;    float:center;    top:0;    left:0;    width:593px;    height:20px;    padding:0;    padding-top:4px;    left-padding:8px;    margin:0;    border-bottom:4px solid #3CF;    background-color: #D0DCE0;    color:black;    font-weight:bold;    padding-left: 2px;    text-align:left;}#tblfooter {    background-color: #D3DCE3;    float: right;    padding-top:10px;    color: black;    font-weight: normal;}input.btn {    color:#333;    background-color: #D0DCE0;}body .ui-widget {    font-size: 1em;}.ui-dialog fieldset legend a {    color: #0000FF;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * navigation css file from theme Original * * @package PhpMyAdmin-theme * @subpackage Original */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON') && !defined('TESTSUITE')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : $_COOKIE['pma_fontsize']); ?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    margin:             0;    padding:            0.2em 0.2em 0.2em 0.2em;}a img {    border: 0;}a:link,a:visited,a:active {    text-decoration:    none;    color:              #0000FF;}ul {    margin:0;}form {    margin:             0;    padding:            0;    display:            inline;}select#select_server,select#lightm_db {    width:              100%;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}/******************************************************************************//* classes *//******************************************************************************//* specific elements */div#pmalogo {    <?php //better echo $GLOBALS['cfg']['logoBGC']; ?>    background-color: <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    padding:.3em;}div#recentTableList {    text-align: center;    margin-bottom: 0.5em;}div#recentTableList select {    width: 100%;}div#pmalogo,div#leftframelinks,div#databaseList {    text-align:         center;    margin-bottom:      0.5em;    padding-bottom:     0.5em;}ul#databaseList {    margin-bottom:      0.5em;    padding-bottom:     0.5em;    padding-<?php echo $left; ?>:     1.5em;    font-style: italic;}ul#databaseList a {    display: block;    font-style: normal;}div#navidbpageselector a,ul#databaseList a {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}ul#databaseList ul {    padding-left: 1em;    padding-right: 0;}ul#databaseList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}ul#databaseList li.selected a {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}div#leftframelinks .icon {    padding:            0;    margin:             0;}div#leftframelinks a img.icon {    margin:             2px;    border:             0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding:            0;}div#leftframelinks a:hover img {    background-color:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}/* serverlist */#body_leftFrame #list_server {    list-style-image: url(<?php echo $GLOBALS['cfg']['ThemePath']; ?>/original/img/s_host.png);    list-style-position: inside;    list-style-type: none;    margin: 0;    padding: 0;}#body_leftFrame #list_server li {    margin: 0;    padding: 0;    font-size:          80%;}div#left_tableList ul {    list-style-type:    none;    list-style-position: outside;    margin:             0;    padding:            0;    font-size:          80%;    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;}div#left_tableList ul ul {    font-size:          100%;}div#left_tableList a {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    none;}div#left_tableList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    underline;}div#left_tableList li {    margin:             0;    padding:            0;    white-space:        nowrap;}<?php if ($GLOBALS['cfg']['BrowseMarkerColor']) { ?>/* marked items */div#left_tableList > ul li.marked > a,div#left_tableList > ul li.marked {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['LeftPointerEnable']) { ?>div#left_tableList > ul li:hover > a,div#left_tableList > ul li:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}<?php } ?>div#left_tableList img {    padding:            0;    vertical-align:     middle;}div#left_tableList ul ul {    margin-<?php echo $left; ?>:        0;    padding-<?php echo $left; ?>:       0.1em;    border-<?php echo $left; ?>:        0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding-bottom:     0.1em;    border-bottom:      0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}/* for the servers list in navi panel */#serverinfo .item {    white-space:        nowrap;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}#serverinfo a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}#NavFilter {    display: none;}#clear_fast_filter {    background: white;    color: black;    cursor: pointer;    padding: 0;    margin: 3px 5px 0 -23px;    position: relative;    float: right;}#fast_filter {    width: 100%;    padding: 2px 0;    margin: 0;    border: 0;}#fast_filter.gray {    color: gray;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * functions for displaying the sql query form * * @usedby  server_sql.php * @usedby  db_sql.php * @usedby  tbl_sql.php * @usedby  tbl_structure.php * @usedby  tbl_tracking.php * @usedby  querywindow.php * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/file_listing.php'; // used for file listingrequire_once './libraries/bookmark.lib.php'; // used for file listing/** * prints the sql query boxes * * @usedby  server_sql.php * @usedby  db_sql.php * @usedby  tbl_sql.php * @usedby  tbl_structure.php * @usedby  tbl_tracking.php * @usedby  querywindow.php * @param boolean|string  $query          query to display in the textarea *                                          or true to display last executed * @param boolean|string  $display_tab    sql|files|history|full|false *                                          what part to display *                                          false if not inside querywindow * @param string          $delimiter */function PMA_sqlQueryForm($query = true, $display_tab = false, $delimiter = ';'){    // check tab to display if inside querywindow    if (! $display_tab) {        $display_tab = 'full';        $is_querywindow = false;    } else {        $is_querywindow = true;    }    // query to show    if (true === $query) {        $query = $GLOBALS['sql_query'];    }    // set enctype to multipart for file uploads    if ($GLOBALS['is_upload']) {        $enctype = ' enctype="multipart/form-data"';    } else {        $enctype = '';    }    $table  = '';    $db     = '';    if (! strlen($GLOBALS['db'])) {        // prepare for server related        $goto   = empty($GLOBALS['goto']) ?                    'server_sql.php' : $GLOBALS['goto'];    } elseif (! strlen($GLOBALS['table'])) {        // prepare for db related        $db     = $GLOBALS['db'];        $goto   = empty($GLOBALS['goto']) ?                    'db_sql.php' : $GLOBALS['goto'];    } else {        $table  = $GLOBALS['table'];        $db     = $GLOBALS['db'];        $goto   = empty($GLOBALS['goto']) ?                    'tbl_sql.php' : $GLOBALS['goto'];    }    // start output    if ($is_querywindow) {        ?>        <form method="post" id="sqlqueryform" target="frame_content"              action="import.php"<?php echo $enctype; ?> name="sqlform"              onsubmit="var save_name = window.opener.parent.frame_content.name;              window.opener.parent.frame_content.name = save_name + '<?php echo time(); ?>';              this.target = window.opener.parent.frame_content.name;              return checkSqlQuery(this)">        <?php    } else {        echo '<form method="post" action="import.php" ' . $enctype;        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax"';        }        echo ' id="sqlqueryform" name="sqlform">' . "\n";    }    if ($is_querywindow) {        echo '<input type="hidden" name="focus_querywindow" value="true" />'            ."\n";        if ($display_tab != 'sql' && $display_tab != 'full') {            echo '<input type="hidden" name="sql_query" value="" />' . "\n";            echo '<input type="hidden" name="show_query" value="1" />' . "\n";        }    }    echo '<input type="hidden" name="is_js_confirmed" value="0" />' . "\n"        .PMA_generate_common_hidden_inputs($db, $table) . "\n"        .'<input type="hidden" name="pos" value="0" />' . "\n"        .'<input type="hidden" name="goto" value="'        .htmlspecialchars($goto) . '" />' . "\n"        .'<input type="hidden" name="message_to_show" value="'        . __('Your SQL query has been executed successfully') . '" />' . "\n"        .'<input type="hidden" name="prev_sql_query" value="'        . htmlspecialchars($query) . '" />' . "\n";    // display querybox    if ($display_tab === 'full' || $display_tab === 'sql') {        PMA_sqlQueryFormInsert($query, $is_querywindow, $delimiter);    }    // display uploads    if ($display_tab === 'files' && $GLOBALS['is_upload']) {        PMA_sqlQueryFormUpload();    }    // Bookmark Support    if ($display_tab === 'full' || $display_tab === 'history') {        if (! empty($GLOBALS['cfg']['Bookmark'])) {            PMA_sqlQueryFormBookmark();        }    }    // Encoding setting form appended by Y.Kawada    if (function_exists('PMA_set_enc_form')) {        echo PMA_set_enc_form('    ');    }    echo '</form>' . "\n";    if ($is_querywindow) {        ?>        <script type="text/javascript">        //<![CDATA[            if (window.opener) {                window.opener.parent.insertQuery();            }        //]]>        </script>        <?php    }    // print an empty div, which will be later filled with the sql query results by ajax    echo '<div id="sqlqueryresults"></div>';}/** * prints querybox fieldset * * @usedby  PMA_sqlQueryForm() * @param string      $query          query to display in the textarea * @param boolean     $is_querywindow if inside querywindow or not * @param string      $delimiter      default delimiter to use */function PMA_sqlQueryFormInsert($query = '', $is_querywindow = false, $delimiter = ';'){    // enable auto select text in textarea    if ($GLOBALS['cfg']['TextareaAutoSelect']) {        $auto_sel = ' onclick="selectContent(this, sql_box_locked, true)"';    } else {        $auto_sel = '';    }    // enable locking if inside query window    if ($is_querywindow) {        $locking = ' onkeypress="document.sqlform.elements[\'LockFromUpdate\'].'            .'checked = true;"';        $height = $GLOBALS['cfg']['TextareaRows'] * 1.25;    } else {        $locking = '';        $height = $GLOBALS['cfg']['TextareaRows'] * 2;    }    $table          = '';    $db             = '';    $fields_list    = array();    if (! strlen($GLOBALS['db'])) {        // prepare for server related        $legend = sprintf(__('Run SQL query/queries on server %s'),            '&quot;' . htmlspecialchars(                ! empty($GLOBALS['cfg']['Servers'][$GLOBALS['server']]['verbose']) ? $GLOBALS['cfg']['Servers'][$GLOBALS['server']]['verbose'] : $GLOBALS['cfg']['Servers'][$GLOBALS['server']]['host']) . '&quot;');    } elseif (! strlen($GLOBALS['table'])) {        // prepare for db related        $db     = $GLOBALS['db'];        // if you want navigation:        $tmp_db_link = '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase']            . '?' . PMA_generate_common_url($db) . '"';        if ($is_querywindow) {            $tmp_db_link .= ' target="_self"'                . ' onclick="this.target=window.opener.frame_content.name"';        }        $tmp_db_link .= '>'            . htmlspecialchars($db) . '</a>';        // else use        // $tmp_db_link = htmlspecialchars($db);        $legend = sprintf(__('Run SQL query/queries on database %s'), $tmp_db_link);        if (empty($query)) {            $query = PMA_expandUserString($GLOBALS['cfg']['DefaultQueryDatabase'], 'PMA_backquote');        }    } else {        $table  = $GLOBALS['table'];        $db     = $GLOBALS['db'];        // Get the list and number of fields        // we do a try_query here, because we could be in the query window,        // trying to synchonize and the table has not yet been created        $fields_list = PMA_DBI_get_columns($db, $GLOBALS['table'], null, true);        $tmp_db_link = '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase']            . '?' . PMA_generate_common_url($db) . '"';        if ($is_querywindow) {            $tmp_db_link .= ' target="_self"'                . ' onclick="this.target=window.opener.frame_content.name"';        }        $tmp_db_link .= '>'            . htmlspecialchars($db) . '</a>';        // else use        // $tmp_db_link = htmlspecialchars($db);        $legend = sprintf(__('Run SQL query/queries on database %s'), $tmp_db_link);        if (empty($query)) {            $query = PMA_expandUserString($GLOBALS['cfg']['DefaultQueryTable'], 'PMA_backquote');        }    }    $legend .= ': ' . PMA_showMySQLDocu('SQL-Syntax', 'SELECT');    if (count($fields_list)) {        $sqlquerycontainer_id = 'sqlquerycontainer';    } else {        $sqlquerycontainer_id = 'sqlquerycontainerfull';    }    echo '<a name="querybox"></a>' . "\n"        .'<div id="queryboxcontainer">' . "\n"        .'<fieldset id="querybox">' . "\n";    echo '<legend>' . $legend . '</legend>' . "\n";    echo '<div id="queryfieldscontainer">' . "\n";    echo '<div id="' . $sqlquerycontainer_id . '">' . "\n"        .'<textarea tabindex="100" name="sql_query" id="sqlquery"'        .'  cols="' . $GLOBALS['cfg']['TextareaCols'] . '"'        .'  rows="' . $height . '"'        .'  dir="' . $GLOBALS['text_dir'] . '"'        .$auto_sel . $locking . '>' . htmlspecialchars($query) . '</textarea>' . "\n";    // Add buttons to generate query easily for select all,single select,insert,update and delete    if (count($fields_list)) {        echo '<input type="button" value="SELECT *" id="selectall" class="sqlbutton" />';        echo '<input type="button" value="SELECT" id="select" class="sqlbutton" />';        echo '<input type="button" value="INSERT" id="insert" class="sqlbutton" />';        echo '<input type="button" value="UPDATE" id="update" class="sqlbutton" />';        echo '<input type="button" value="DELETE" id="delete" class="sqlbutton" />';    }    echo '<input type="button" value="' . __('Clear') . '" id="clear" class="sqlbutton" />';    echo '</div>' . "\n";    if (count($fields_list)) {        echo '<div id="tablefieldscontainer">' . "\n"            .'<label>' . __('Columns') . '</label>' . "\n"            .'<select id="tablefields" name="dummy" '            .'size="' . ($GLOBALS['cfg']['TextareaRows'] - 2) . '" '            .'multiple="multiple" ondblclick="insertValueQuery()">' . "\n";        foreach ($fields_list as $field) {            echo '<option value="'                .PMA_backquote(htmlspecialchars($field['Field'])) . '"';            if (isset($field['Field']) && strlen($field['Field']) && isset($field['Comment'])) {                echo ' title="' . htmlspecialchars($field['Comment']) . '"';            }            echo '>' . htmlspecialchars($field['Field']) . '</option>' . "\n";        }        echo '</select>' . "\n"            .'<div id="tablefieldinsertbuttoncontainer">' . "\n";        if ($GLOBALS['cfg']['PropertiesIconic']) {            echo '<input type="button" name="insert" value="&lt;&lt;"'                .' onclick="insertValueQuery()"'                .' title="' . __('Insert') . '" />' . "\n";        } else {            echo '<input type="button" name="insert"'                .' value="' . __('Insert') . '"'                .' onclick="insertValueQuery()" />' . "\n";        }        echo '</div>' . "\n"            .'</div>' . "\n";    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</div>' . "\n";    if (! empty($GLOBALS['cfg']['Bookmark'])) {        ?>        <div id="bookmarkoptions">        <div class="formelement">        <label for="bkm_label">            <?php echo __('Bookmark this SQL query'); ?>:</label>        <input type="text" name="bkm_label" id="bkm_label" tabindex="110" value="" />        </div>        <div class="formelement">        <input type="checkbox" name="bkm_all_users" tabindex="111" id="id_bkm_all_users"            value="true" />        <label for="id_bkm_all_users">            <?php echo __('Let every user access this bookmark'); ?></label>        </div>        <div class="formelement">        <input type="checkbox" name="bkm_replace" tabindex="112" id="id_bkm_replace"            value="true" />        <label for="id_bkm_replace">            <?php echo __('Replace existing bookmark of same name'); ?></label>        </div>        </div>        <?php    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n"        .'</div>' . "\n";    echo '<fieldset id="queryboxfooter" class="tblFooters">' . "\n";    echo '<div class="formelement">' . "\n";    if ($is_querywindow) {        ?>        <script type="text/javascript">        //<![CDATA[            document.writeln(' <input type="checkbox" name="LockFromUpdate" checked="checked" tabindex="120" id="checkbox_lock" /> <label for="checkbox_lock"><?php echo __('Do not overwrite this query from outside the window'); ?></label> ');        //]]>        </script>        <?php    }    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo '<label for="id_sql_delimiter">[ ' . __('Delimiter')        .'</label>' . "\n";    echo '<input type="text" name="sql_delimiter" tabindex="131" size="3" '        .'value="' . $delimiter . '" '        .'id="id_sql_delimiter" /> ]' . "\n";    echo '<input type="checkbox" name="show_query" value="1" '        .'id="checkbox_show_query" tabindex="132" checked="checked" />' . "\n"        .'<label for="checkbox_show_query">' . __('Show this query here again')        .'</label>' . "\n";    if (! $is_querywindow) {        echo '<input type="checkbox" name="retain_query_box" value="1" '            . 'id="retain_query_box" tabindex="133" '            . ($GLOBALS['cfg']['RetainQueryBox'] === false ? '' : ' checked="checked"')            . ' />'            . '<label for="retain_query_box">' . __('Retain query box')            . '</label>';    }    echo '</div>' . "\n";    echo '<input type="submit" id="button_submit_query" name="SQL" tabindex="200" value="' . __('Go') . '" />'        ."\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";}/** * prints bookmark fieldset * * @usedby  PMA_sqlQueryForm() */function PMA_sqlQueryFormBookmark(){    $bookmark_list = PMA_Bookmark_getList($GLOBALS['db']);    if (! $bookmark_list || count($bookmark_list) < 1) {        return;    }    echo '<fieldset id="bookmarkoptions">';    echo '<legend>';    echo __('Bookmarked SQL query') . '</legend>' . "\n";    echo '<div class="formelement">';    echo '<select name="id_bookmark" id="id_bookmark">' . "\n";    echo '<option value="">&nbsp;</option>' . "\n";    foreach ($bookmark_list as $key => $value) {        echo '<option value="' . htmlspecialchars($key) . '">'            .htmlspecialchars($value) . '</option>' . "\n";    }    // &nbsp; is required for correct display with styles/line height    echo '</select>&nbsp;' . "\n";    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo __('Variable');    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        echo ' <a href="./Documentation.html#faqbookmark"'            .' target="documentation">'            . PMA_getImage('b_help.png', __('Documentation')) . '</a>';    } else {        echo ' (<a href="./Documentation.html#faqbookmark"'            .' target="documentation">' . __('Documentation') . '</a>): ';    }    echo '<input type="text" name="bookmark_variable" class="textfield"'        .' size="10" />' . "\n";    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo '<input type="radio" name="action_bookmark" value="0"'        .' id="radio_bookmark_exe" checked="checked" />'        .'<label for="radio_bookmark_exe">' . __('Submit')        .'</label>' . "\n";    echo '<input type="radio" name="action_bookmark" value="1"'        .' id="radio_bookmark_view" />'        .'<label for="radio_bookmark_view">' . __('View only')        .'</label>' . "\n";    echo '<input type="radio" name="action_bookmark" value="2"'        .' id="radio_bookmark_del" />'        .'<label for="radio_bookmark_del">' . __('Delete')        .'</label>' . "\n";    echo '</div>' . "\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";    echo '<fieldset id="bookmarkoptionsfooter" class="tblFooters">' . "\n";    echo '<input type="submit" name="SQL" id="button_submit_bookmark" value="' . __('Go') . '" />';    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";}/** * prints bookmark fieldset * * @usedby  PMA_sqlQueryForm() */function PMA_sqlQueryFormUpload(){    $errors = array ();    $matcher = '@\.sql(\.(' . PMA_supportedDecompressions() . '))?$@'; // we allow only SQL here    if (!empty($GLOBALS['cfg']['UploadDir'])) {        $files = PMA_getFileSelectOptions(PMA_userDir($GLOBALS['cfg']['UploadDir']), $matcher, (isset($timeout_passed) && $timeout_passed && isset($local_import_file)) ? $local_import_file : '');    } else {        $files = '';    }    // start output    echo '<fieldset id="">';    echo '<legend>';    echo __('Browse your computer:') . '</legend>';    echo '<div class="formelement">';    echo '<input type="file" name="sql_file" class="textfield" /> ';    echo PMA_displayMaximumUploadSize($GLOBALS['max_upload_size']);    // some browsers should respect this :)    echo PMA_generateHiddenMaxFileSize($GLOBALS['max_upload_size']) . "\n";    echo '</div>';    if ($files === false) {        $errors[] = PMA_Message::error( __('The directory you set for upload work cannot be reached'));    } elseif (!empty($files)) {        echo '<div class="formelement">';        echo '<strong>' . __('web server upload directory') .':</strong>' . "\n";        echo '<select size="1" name="sql_localfile">' . "\n";        echo '<option value="" selected="selected"></option>' . "\n";        echo $files;        echo '</select>' . "\n";        echo '</div>';    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>';    echo '<fieldset id="" class="tblFooters">';    echo __('Character set of the file:') . "\n";    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_CHARSET,            'charset_of_file', null, 'utf8', false);    echo '<input type="submit" name="SQL" value="' . __('Go')        .'" />' . "\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>';    foreach ($errors as $error) {        $error->display();    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);/** * Selects the database to work with */PMA_DBI_select_db($db);$goto = $cfg['DefaultTabTable'];/** * $_REQUEST['target_db'] could be empty in case we came from an input field * (when there are many databases, no drop-down) */if (empty($_REQUEST['target_db'])) {    $_REQUEST['target_db'] = $db;}/** * A target table name has been sent to this script -> do the work */if (PMA_isValid($_REQUEST['new_name'])) {    if ($db == $_REQUEST['target_db'] && $table == $_REQUEST['new_name']) {        if (isset($_REQUEST['submit_move'])) {            $message = PMA_Message::error(__('Can\'t move table to same one!'));        } else {            $message = PMA_Message::error(__('Can\'t copy table to same one!'));        }        $result = false;    } else {        $result = PMA_Table::moveCopy($db, $table, $_REQUEST['target_db'], $_REQUEST['new_name'],            $_REQUEST['what'], isset($_REQUEST['submit_move']), 'one_table');        if (isset($_REQUEST['submit_move'])) {            $message = PMA_Message::success(__('Table %s has been moved to %s.'));        } else {            $message = PMA_Message::success(__('Table %s has been copied to %s.'));        }        $old = PMA_backquote($db) . '.' . PMA_backquote($table);        $message->addParam($old);        $new = PMA_backquote($_REQUEST['target_db']) . '.' . PMA_backquote($_REQUEST['new_name']);        $message->addParam($new);        /* Check: Work on new table or on old table? */        if (isset($_REQUEST['submit_move']) || PMA_isValid($_REQUEST['switch_to_new'])) {            $db        = $_REQUEST['target_db'];            $table     = $_REQUEST['new_name'];        }        if ( $_REQUEST['ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            $extra_data['db'] = $GLOBALS['db'];            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $reload = 1;    }} else {    /**     * No new name for the table!     */    $message = PMA_Message::error(__('The table name is empty!'));    $result = false;}/** * Back to the calling script */$_message = $message;unset($message);?>
