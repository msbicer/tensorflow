<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * holds the PMA_List_Database class * * @package PhpMyAdmin *//** * the list base class */require_once './libraries/List.class.php';/** * handles database lists * * <code> * $PMA_List_Database = new PMA_List_Database($userlink, $controllink); * </code> * * @todo this object should be attached to the PMA_Server object * @todo ? make use of INFORMATION_SCHEMA * @todo ? support --skip-showdatabases and user has only global rights * @access public * @since phpMyAdmin 2.9.10 * @package PhpMyAdmin *//*public*/ class PMA_List_Database extends PMA_List{    /**     * @var mixed   database link resource|object to be used     */    protected $_db_link = null;    /**     * @var mixed   user database link resource|object     */    protected $_db_link_user = null;    /**     * @var mixed   controluser database link resource|object     */    protected $_db_link_control = null;    /**     * @var boolean whether SHOW DATABASES is disabled or not     * @access protected     */    protected $_show_databases_disabled = false;    /**     * @var string command to retrieve databases from server     */    protected $_command = null;    /**     * Constructor     *     * @param mixed   $db_link_user       user database link resource|object     * @param mixed   $db_link_control    control database link resource|object     */    public function __construct($db_link_user = null, $db_link_control = null)    {        $this->_db_link = $db_link_user;        $this->_db_link_user = $db_link_user;        $this->_db_link_control = $db_link_control;        parent::__construct();        $this->build();    }    /**     * checks if the configuration wants to hide some databases     */    protected function _checkHideDatabase()    {        if (empty($GLOBALS['cfg']['Server']['hide_db'])) {            return;        }        foreach ($this->getArrayCopy() as $key => $db) {            if (preg_match('/' . $GLOBALS['cfg']['Server']['hide_db'] . '/', $db)) {                $this->offsetUnset($key);            }        }    }    /**     * retrieves database list from server     *     * @todo    we could also search mysql tables if all fail?     * @param string  $like_db_name   usally a db_name containing wildcards     * @return array     */    protected function _retrieve($like_db_name = null)    {        if ($this->_show_databases_disabled) {            return array();        }        if (null !== $like_db_name) {            $command = "SHOW DATABASES LIKE '" . $like_db_name . "'";        } elseif (null === $this->_command) {            $command = str_replace('#user#', $GLOBALS['cfg']['Server']['user'],                $GLOBALS['cfg']['Server']['ShowDatabasesCommand']);            $this->_command = $command;        } else {            $command = $this->_command;        }        $database_list = PMA_DBI_fetch_result($command, null, null, $this->_db_link);        PMA_DBI_getError();        if ($GLOBALS['errno'] !== 0) {            // failed to get database list, try the control user            // (hopefully there is one and he has SHOW DATABASES right)            $this->_db_link = $this->_db_link_control;            $database_list = PMA_DBI_fetch_result($command, null, null, $this->_db_link);            PMA_DBI_getError();            if ($GLOBALS['errno'] !== 0) {                // failed! we will display a warning that phpMyAdmin could not safely                // retrieve database list, the admin has to setup a control user or                // allow SHOW DATABASES                $GLOBALS['error_showdatabases'] = true;                $this->_show_databases_disabled = true;            }        }        if ($GLOBALS['cfg']['NaturalOrder']) {            natsort($database_list);        } else {            // need to sort anyway, otherwise information_schema            // goes at the top            sort($database_list);        }        return $database_list;    }    /**     * builds up the list     *     */    public function build()    {        if (! $this->_checkOnlyDatabase()) {            $items = $this->_retrieve();            $this->exchangeArray($items);        }        $this->_checkHideDatabase();    }    /**     * checks the only_db configuration     *     * @return  boolean false if there is no only_db, otherwise true     */    protected function _checkOnlyDatabase()    {        if (is_string($GLOBALS['cfg']['Server']['only_db'])         && strlen($GLOBALS['cfg']['Server']['only_db'])) {            $GLOBALS['cfg']['Server']['only_db'] = array(                $GLOBALS['cfg']['Server']['only_db']            );        }        if (! is_array($GLOBALS['cfg']['Server']['only_db'])) {            return false;        }        $items = array();        foreach ($GLOBALS['cfg']['Server']['only_db'] as $each_only_db) {            if ($each_only_db === '*' && ! $this->_show_databases_disabled) {                // append all not already listed dbs to the list                $items = array_merge($items,                    array_diff($this->_retrieve(), $items));                // there can only be one '*', and this can only be last                break;            }            // check if the db name contains wildcard,            // thus containing not escaped _ or %            if (! preg_match('/(^|[^\\\\])(_|%)/', $each_only_db)) {                // ... not contains wildcard                $items[] = PMA_unescape_mysql_wildcards($each_only_db);                continue;            }            if (! $this->_show_databases_disabled) {                $items = array_merge($items, $this->_retrieve($each_only_db));                continue;            }            // @todo induce error, about not using wildcards with SHOW DATABASE disabled?        }        $this->exchangeArray($items);        return true;    }    /**     * returns default item     *     * @return  string  default item     */    public function getDefault()    {        if (strlen($GLOBALS['db'])) {            return $GLOBALS['db'];        }        return $this->getEmpty();    }    /**     * returns array with dbs grouped with extended infos     *     * @param integer $offset     * @param integer $count     * @return  array   db list     */    public function getGroupedDetails($offset, $count)    {        $dbgroups   = array();        if ($GLOBALS['cfg']['ShowTooltip']          && $GLOBALS['cfgRelation']['commwork']) {            $db_tooltips = PMA_getDbComments();        }        if (!$GLOBALS['cfg']['LeftFrameDBTree']) {            $separators = array();        } elseif (is_array($GLOBALS['cfg']['LeftFrameDBSeparator'])) {            $separators = $GLOBALS['cfg']['LeftFrameDBSeparator'];        } elseif (!empty($GLOBALS['cfg']['LeftFrameDBSeparator'])) {            $separators = array($GLOBALS['cfg']['LeftFrameDBSeparator']);        } else {            $separators = array();        }        foreach ($this->getLimitedItems($offset, $count) as $db) {            // Get comments from PMA comments table            $db_tooltip = '';            if (isset($db_tooltips[$db])) {                $db_tooltip = $db_tooltips[$db];            }            $pos = false;            foreach ($separators as $separator) {                // use strpos instead of strrpos; it seems more common to                // have the db name, the separator, then the rest which                // might contain a separator                // like dbname_the_rest                $pos = strpos($db, $separator, 1);                if ($pos !== false) {                    break;                }            }            if ($pos !== false) {                $group          = substr($db, 0, $pos);                $disp_name_cut  = substr($db, $pos);            } else {                $group          = $db;                $disp_name_cut  = $db;            }            $disp_name  = $db;            if ($db_tooltip && $GLOBALS['cfg']['ShowTooltipAliasDB']) {                $disp_name      = $db_tooltip;                $disp_name_cut  = $db_tooltip;                $db_tooltip     = $db;            }            $dbgroups[$group][$db] = array(                'name'          => $db,                'disp_name_cut' => $disp_name_cut,                'disp_name'     => $disp_name,                'comment'       => $db_tooltip,            );            if ($GLOBALS['cfg']['Server']['CountTables']) {                $dbgroups[$group][$db]['num_tables'] = PMA_getTableCount($db);            }        } // end foreach ($GLOBALS['PMA_List_Database']->items as $db)        return $dbgroups;    }    /**     * returns a part of the items     *     * @param integer $offset     * @param integer $count     * @return  array  some items     */    public function getLimitedItems($offset, $count)    {        return array_slice($this->getArrayCopy(), $offset, $count);    }    /**     * returns html code for list with dbs     *     * @return  string  html code list     */    public function getHtmlListGrouped($selected = '', $offset, $count)    {        if (true === $selected) {            $selected = $this->getDefault();        }        $return = '<ul id="databaseList" xml:lang="en" dir="ltr">' . "\n";        foreach ($this->getGroupedDetails($offset, $count) as $group => $dbs) {            if (count($dbs) > 1) {                $return .= '<li class="group"><span>' . htmlspecialchars($group) . '</span><ul>' . "\n";                // whether display db_name cut by the group part                $cut = true;            } else {                // .. or full                $cut = false;            }            foreach ($dbs as $db) {                $return .= '<li';                if ($db['name'] == $selected) {                    $return .= ' class="selected"';                }                $return .= '><a';                if (! empty($db['comment'])) {                    $return .= ' title="' . htmlspecialchars($db['comment']) . '"';                }                $return .= ' href="index.php?' . PMA_generate_common_url($db['name'])                    . '" target="_parent">';                if ($cut) {                    $return .= htmlspecialchars($db['disp_name_cut']);                } else {                    $return .= htmlspecialchars($db['disp_name']);                }                if (! empty($db['num_tables'])) {                    $return .= ' (' . $db['num_tables'] . ')';                }                $return .= '</a></li>' . "\n";            }            if (count($dbs) > 1) {                $return .= '</ul></li>' . "\n";            }        }        $return .= '</ul>';        return $return;    }    /**     * returns html code for select form element with dbs     *     * @todo IE can not handle different text directions in select boxes so,     * as mostly names will be in english, we set the whole selectbox to LTR     * and EN     *     * @return  string  html code select     */    public function getHtmlSelectGrouped($selected = '', $offset, $count)    {        if (true === $selected) {            $selected = $this->getDefault();        }        $return = '<select name="db" id="lightm_db" xml:lang="en" dir="ltr"'            . ' onchange="if (this.value != \'\') window.parent.openDb(this.value);">' . "\n"            . '<option value="" dir="' . $GLOBALS['text_dir'] . '">'            . '(' . __('Databases') . ') ...</option>' . "\n";        foreach ($this->getGroupedDetails($offset, $count) as $group => $dbs) {            if (count($dbs) > 1) {                $return .= '<optgroup label="' . htmlspecialchars($group)                    . '">' . "\n";                // whether display db_name cuted by the group part                $cut = true;            } else {                // .. or full                $cut = false;            }            foreach ($dbs as $db) {                $return .= '<option value="' . htmlspecialchars($db['name']) . '"'                    .' title="' . htmlspecialchars($db['comment']) . '"';                if ($db['name'] == $selected || (PMA_DRIZZLE && strtolower($db['name']) == strtolower($selected))) {                    $return .= ' selected="selected"';                }                $return .= '>' . htmlspecialchars($cut ? $db['disp_name_cut'] : $db['disp_name']);                if (! empty($db['num_tables'])) {                    $return .= ' (' . $db['num_tables'] . ')';                }                $return .= '</option>' . "\n";            }            if (count($dbs) > 1) {                $return .= '</optgroup>' . "\n";            }        }        $return .= '</select>';        return $return;    }    /**     * this is just a backup, if all is fine this can be deleted later     *     * @deprecated     */    protected function _checkAgainstPrivTables()    {        // 1. get allowed dbs from the "mysql.db" table        // User can be blank (anonymous user)        $local_query = "            SELECT DISTINCT `Db` FROM `mysql`.`db`            WHERE `Select_priv` = 'Y'            AND `User`            IN ('" . PMA_sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . "', '')";        $tmp_mydbs = PMA_DBI_fetch_result($local_query, null, null,            $GLOBALS['controllink']);        if ($tmp_mydbs) {            // Will use as associative array of the following 2 code            // lines:            //   the 1st is the only line intact from before            //     correction,            //   the 2nd replaces $dblist[] = $row['Db'];            // Code following those 2 lines in correction continues            // populating $dblist[], as previous code did. But it is            // now populated with actual database names instead of            // with regular expressions.            $tmp_alldbs = PMA_DBI_query('SHOW DATABASES;', $GLOBALS['controllink']);            // all databases cases - part 2            if (isset($tmp_mydbs['%'])) {                while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {                    $dblist[] = $tmp_row[0];                } // end while            } else {                while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {                    $tmp_db = $tmp_row[0];                    if (isset($tmp_mydbs[$tmp_db]) && $tmp_mydbs[$tmp_db] == 1) {                        $dblist[]           = $tmp_db;                        $tmp_mydbs[$tmp_db] = 0;                    } elseif (! isset($dblist[$tmp_db])) {                        foreach ($tmp_mydbs as $tmp_matchpattern => $tmp_value) {                            // fixed bad regexp                            // TODO: db names may contain characters                            //       that are regexp instructions                            $re        = '(^|(\\\\\\\\)+|[^\])';                            $tmp_regex = preg_replace('/' . addcslashes($re, '/') . '%/', '\\1.*', preg_replace('/' . addcslashes($re, '/') . '_/', '\\1.{1}', $tmp_matchpattern));                            // Fixed db name matching                            // 2000-08-28 -- Benjamin Gandon                            if (preg_match('/^' . addcslashes($tmp_regex, '/') . '$/', $tmp_db)) {                                $dblist[] = $tmp_db;                                break;                            }                        } // end while                    } // end if ... elseif ...                } // end while            } // end else            PMA_DBI_free_result($tmp_alldbs);            unset($tmp_mydbs);        } // end if        // 2. get allowed dbs from the "mysql.tables_priv" table        $local_query = 'SELECT DISTINCT Db FROM mysql.tables_priv WHERE Table_priv LIKE \'%Select%\' AND User = \'' . PMA_sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . '\'';        $rs          = PMA_DBI_try_query($local_query, $GLOBALS['controllink']);        if ($rs && @PMA_DBI_num_rows($rs)) {            while ($row = PMA_DBI_fetch_assoc($rs)) {                if (!in_array($row['Db'], $dblist)) {                    $dblist[] = $row['Db'];                }            } // end while            PMA_DBI_free_result($rs);        } // end if    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * configures general layout * for detailed layout configuration please refer to the css files * * @package PhpMyAdmin-theme * @subpackage pmahomme *//** * navi frame */// navi frame width$GLOBALS['cfg']['NaviWidth']                = 200;// foreground (text) color for the navi frame$GLOBALS['cfg']['NaviColor']                = '#000000';// background for the navi frame$GLOBALS['cfg']['NaviBackground']           = '#D0DCE0';// foreground (text) color of the pointer in navi frame$GLOBALS['cfg']['NaviPointerColor']         = '#000000';// background of the pointer in navi frame$GLOBALS['cfg']['NaviPointerBackground']    = '#9999CC';// text color of the selected database name (when showing the table list)$GLOBALS['cfg']['NaviDatabaseNameColor']    = '#0000FF';/** * main frame */// foreground (text) color for the main frame$GLOBALS['cfg']['MainColor']                = '#000000';// background for the main frame$GLOBALS['cfg']['MainBackground']           = '#F5F5F5';// foreground (text) color of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerColor']       = '#000000';// background of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerBackground']  = '#CCFFCC';// foreground (text) color of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerColor']        = '#000000';// background of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerBackground']   = '#FFCC99';/** * fonts *//** * the font family as a valid css font family value, * if not set the browser default will be used * (depending on browser, DTD and system settings) */$GLOBALS['cfg']['FontFamily']           = 'sans-serif';/** * fixed width font family, used in textarea */$GLOBALS['cfg']['FontFamilyFixed']      = 'monospace';/** * tables */// border$GLOBALS['cfg']['Border']               = 0;// table header and footer color$GLOBALS['cfg']['ThBackground']         = '#D3DCE3';// table header and footer background$GLOBALS['cfg']['ThColor']              = '#000000';// table data row background$GLOBALS['cfg']['BgOne']                = '#E5E5E5';// table data row background, alternate$GLOBALS['cfg']['BgTwo']                = '#D5D5D5';/** * query window */// Width of Query window$GLOBALS['cfg']['QueryWindowWidth']     = 600;// Height of Query window$GLOBALS['cfg']['QueryWindowHeight']    = 400;/** * SQL Parser Settings * Syntax colouring data */$GLOBALS['cfg']['SQP']['fmtColor']      = array(    'comment'            => '#808000',    'comment_mysql'      => '',    'comment_ansi'       => '',    'comment_c'          => '',    'digit'              => '',    'digit_hex'          => 'teal',    'digit_integer'      => 'teal',    'digit_float'        => 'aqua',    'punct'              => 'fuchsia',    'alpha'              => '',    'alpha_columnType'   => '#FF9900',    'alpha_columnAttrib' => '#0000FF',    'alpha_reservedWord' => '#990099',    'alpha_functionName' => '#FF0000',    'alpha_identifier'   => 'black',    'alpha_charset'      => '#6495ed',    'alpha_variable'     => '#800000',    'quote'              => '#008000',    'quote_double'       => '',    'quote_single'       => '',    'quote_backtick'     => '');/** * Chart colors */ $GLOBALS['cfg']['chartColor'] = array(    'gradientIntensity'       => 50,    // The style of the chart title.    'titleColor'              => '#000000',    'titleBgColor'            => '#E5E5E5',    // Chart border (0 for no border)    'border'                  => '#CCCCCC',    // Chart background color.    'bgColor'                 => '#FBFBFB',    // when graph area gradient is used, this is the color of the graph    // area border    'graphAreaColor'          => '#D5D9DD',    // the background color of the graph area    'graphAreaGradientColor'  => $GLOBALS['cfg']['BgTwo'],    // the color of the grid lines in the graph area    'gridColor'               => '#E6E6E6',    // the color of the scale and the labels    'scaleColor'              => '#D5D9DD', );?>
<?php/** * handles creation of the GIS visualizations. * * @package PhpMyAdmin *//** * do not import request variable into global scope * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'openlayers/OpenLayers.js';$GLOBALS['js_include'][] = 'jquery/jquery.svg.js';$GLOBALS['js_include'][] = 'jquery/jquery.mousewheel.js';$GLOBALS['js_include'][] = 'jquery/jquery.event.drag-2.0.min.js';$GLOBALS['js_include'][] = 'tbl_gis_visualization.js';$GLOBALS['js_include'][] = 'OpenStreetMap.js';// Allows for resending headers even after sending some dataob_start();// Runs common workrequire_once './libraries/db_common.inc.php';$url_params['goto'] = $cfg['DefaultTabDatabase'];$url_params['back'] = 'sql.php';// Import visualization functionsrequire_once './libraries/gis_visualization.lib.php';// Execute the query and return the result$result = PMA_DBI_try_query($sql_query);// Get the meta data of results$meta = PMA_DBI_get_fields_meta($result);// Find the candidate fields for label column and spatial column$labelCandidates = array(); $spatialCandidates = array();foreach ($meta as $column_meta) {    if ($column_meta->type == 'geometry') {        $spatialCandidates[] = $column_meta->name;    } else {        $labelCandidates[] = $column_meta->name;    }}// Get settings if any posted$visualizationSettings = array();if (PMA_isValid($_REQUEST['visualizationSettings'], 'array')) {    $visualizationSettings = $_REQUEST['visualizationSettings'];}if (! isset($visualizationSettings['labelColumn']) && isset($labelCandidates[0])) {    $visualizationSettings['labelColumn'] = '';}// If spatial column is not set, use first geometric colum as spatial columnif (! isset($visualizationSettings['spatialColumn'])) {    $visualizationSettings['spatialColumn'] = $spatialCandidates[0];}// Convert geometric columns from bytes to text.$modified_query = PMA_GIS_modifyQuery($sql_query, $visualizationSettings);$modified_result = PMA_DBI_try_query($modified_query);$data = array();while ($row = PMA_DBI_fetch_assoc($modified_result)) {    $data[] = $row;}// If all the rows contain SRID, use OpenStreetMaps on the initial loading.if (! isset($_REQUEST['displayVisualization'])) {    $visualizationSettings['choice'] = 'useBaseLayer';    foreach ($data as $row) {        if ($row['srid'] == 0) {            unset($visualizationSettings['choice']);            break;        }    }}if (isset($_REQUEST['saveToFile'])) {    $file_name = $_REQUEST['fileName'];    if ($file_name == '') {        $file_name = $visualizationSettings['spatialColumn'];    }    $save_format = $_REQUEST['fileFormat'];    PMA_GIS_saveToFile($data, $visualizationSettings, $save_format, $file_name);    exit();}$svg_support = (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER <= 8) ? false : true;$format = $svg_support ? 'svg' : 'png';// get the chart and settings after chart generation$visualization = PMA_GIS_visualizationResults($data, $visualizationSettings, $format);/** * Displays the page */?><!-- Display visulalization options --><div id="div_view_options"><form method="post" action="tbl_gis_visualization.php"><?php echo PMA_generate_common_hidden_inputs($url_params); ?><fieldset>    <legend><?php echo __('Display GIS Visualization'); ?></legend>    <div id="placeholder" style="width:<?php echo($visualizationSettings['width']); ?>px;height:<?php echo($visualizationSettings['height']); ?>px;">        <?php echo $visualization; ?>    </div>    <div id="openlayersmap"></div>    <input type="hidden" id="pmaThemeImage" value="<?php echo($GLOBALS['pmaThemeImage']); ?>" />    <script language="javascript" type="text/javascript">        function drawOpenLayers() {            <?php echo (PMA_GIS_visualizationResults($data, $visualizationSettings, 'ol')); ?>        }    </script>    <input type="hidden" name="sql_query" id="sql_query" value="<?php echo htmlspecialchars($sql_query); ?>" />    <table class="gis_table">    <tr><td><label for="width"><?php echo __("Width"); ?></label></td>        <td><input type="text" name="visualizationSettings[width]" id="width" value="<?php echo (isset($visualizationSettings['width']) ? htmlspecialchars($visualizationSettings['width']) : ''); ?>" /></td>    </tr>    <tr><td><label for="height"><?php echo __("Height"); ?></label></td>        <td><input type="text" name="visualizationSettings[height]" id="height" value="<?php echo (isset($visualizationSettings['height']) ? htmlspecialchars($visualizationSettings['height']) : ''); ?>" /></td>    </tr>    <tr><td><label for="labelColumn"><?php echo __("Label column"); ?></label></td>        <td><select name="visualizationSettings[labelColumn]" id="labelColumn">            <option value=""><?php echo __("-- None --"); ?></option>        <?php            foreach ($labelCandidates as $labelCandidate) {                echo('<option value="' . htmlspecialchars($labelCandidate) . '"');                if ($labelCandidate == $visualizationSettings['labelColumn']) {                    echo(' selected="selected"');                }                echo('>' . htmlspecialchars($labelCandidate) . '</option>');            }        ?>        </select></td>    </tr>    <tr><td><label for="spatial Column"><?php echo __("Spatial column"); ?></label></td>        <td><select name="visualizationSettings[spatialColumn]" id="spatialColumn">        <?php            foreach ($spatialCandidates as $spatialCandidate) {                echo('<option value="' . htmlspecialchars($spatialCandidate) . '"');                if ($spatialCandidate == $visualizationSettings['spatialColumn']) {                    echo(' selected="selected"');                }                echo('>' . htmlspecialchars($spatialCandidate) . '</option>');            }        ?>        </select></td>    </tr>    <tr><td class="choice" colspan="2">        <input type="checkbox" name="visualizationSettings[choice]" id="choice" value="useBaseLayer"        <?php            if (isset($visualizationSettings['choice'])) {                echo(' checked="checked"');            }        ?>        />        <label for="choice"><?php echo __("Use OpenStreetMaps as Base Layer"); ?></label>    </td></tr>    <tr><td></td>        <td class="button"><input type="submit" name="displayVisualization" value="<?php echo __('Redraw'); ?>" /></td>    </tr>    <tr><td class="save"><?php echo __("Save to file"); ?></td></tr>    <tr><td><label for="fileName"><?php echo __("File name"); ?></label></td>        <td><input type="text" name="fileName" id="fileName" /></td>    </tr>    <tr><td><label for="fileFormat"><?php echo __("Format"); ?></label></td>        <td><select name="fileFormat" id="fileFormat">            <option value="png">PNG</option>            <option value="pdf">PDF</option>            <?php            if ($svg_support) {                echo ('<option value="svg" selected="selected">SVG</option>');            }            ?>        </select></td>    </tr>    <tr><td></td>        <td class="button"><input type="submit" name="saveToFile" value="<?php echo __('Save'); ?>" /></td>    </tr>    </table></fieldset></form></div><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * GLOBAL Plugin function. * --------------- * * THIS FILE PROVIDES BASIC FUNCTIONS TO USE IN OTHER PLUGINS! * * The basic filename usage for any plugin, residing in the libraries/transformations directory is: * * -- <mime_type>_<mime_subtype>__<transformation_name>.inc.php * * The function name has to be the like above filename: * * -- function PMA_transformation_<mime_type>_<mime_subtype>__<transformation_name>.inc.php * * Please use short and expressive names. For now, special characters which aren't allowed in * filenames or functions should not be used. * * Please provide a comment for your function, what it does and what parameters are available. * * @package PhpMyAdmin-Transformation *//** * */function PMA_transformation_global_plain($buffer, $options = array(), $meta = ''){    return htmlspecialchars($buffer);}function PMA_transformation_global_html($buffer, $options = array(), $meta = ''){    return $buffer;}function PMA_transformation_global_html_replace($buffer, $options = array(), $meta = ''){    if (!isset($options['string'])) {        $options['string'] = '';    }    if (isset($options['regex']) && isset($options['regex_replace'])) {        $buffer = preg_replace('@' . str_replace('@', '\@', $options['regex']) . '@si', $options['regex_replace'], $buffer);    }    // Replace occurences of [__BUFFER__] with actual text    $return = str_replace("[__BUFFER__]", $buffer, $options['string']);    return $return;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__substr_info(){    return array(        'info' => __('Displays a part of a string. The first option is the number of characters to skip from the beginning of the string (Default 0). The second option is the number of characters to return (Default: until end of string). The third option is the string to append and/or prepend when truncation occurs (Default: "...").'),        );}/** * */function PMA_transformation_text_plain__substr($buffer, $options = array(), $meta = ''){    // possibly use a global transform and feed it with special options:    // include './libraries/transformations/global.inc.php';    // further operations on $buffer using the $options[] array.    if (!isset($options[0]) ||  $options[0] == '') {        $options[0] = 0;    }    if (!isset($options[1]) ||  $options[1] == '') {        $options[1] = 'all';    }    if (!isset($options[2]) || $options[2] == '') {        $options[2] = '...';    }    $newtext = '';    if ($options[1] != 'all') {        $newtext = PMA_substr($buffer, $options[0], $options[1]);    } else {        $newtext = PMA_substr($buffer, $options[0]);    }    $length = strlen($newtext);    $baselength = strlen($buffer);    if ($length != $baselength) {        if ($options[0] != 0) {            $newtext = $options[2] . $newtext;        }        if (($length + $options[0]) != $baselength) {            $newtext .= $options[2];        }    }    return $newtext;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Loads libraries/common.inc.php and preforms some additional actions * * @package PhpMyAdmin-setup *//** * Do not include full common. * @ignore */define('PMA_MINIMUM_COMMON', true);define('PMA_SETUP', true);chdir('..');if (!file_exists('./libraries/common.inc.php')) {    die('Bad invocation!');}require_once './libraries/common.inc.php';require_once './libraries/config/config_functions.lib.php';require_once './libraries/config/messages.inc.php';require_once './libraries/config/ConfigFile.class.php';require_once './libraries/url_generating.lib.php';require_once './libraries/user_preferences.lib.php';// use default error handlerrestore_error_handler();// Save current language in a cookie, required since we use PMA_MINIMUM_COMMON$GLOBALS['PMA_Config']->setCookie('pma_lang', $GLOBALS['lang']);ConfigFile::getInstance()->setPersistKeys(array(    'DefaultLang',    'ServerDefault',    'UploadDir',    'SaveDir',    'Servers/1/verbose',    'Servers/1/host',    'Servers/1/port',    'Servers/1/socket',    'Servers/1/extension',    'Servers/1/connect_type',    'Servers/1/auth_type',    'Servers/1/user',    'Servers/1/password'));// allows for redirection even after sending some dataob_start();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/common.inc.php';require_once './libraries/RecentTable.class.php';/** * Add recently used table and reload the navigation. * * @param string $db Database name where the table is located. * @param string $table The table name */function PMA_addRecentTable($db, $table){    $tmp_result = PMA_RecentTable::getInstance()->add($db, $table);    if ($tmp_result === true) {        echo '<span class="hide" id="update_recent_tables"></span>';    } else {        $error = $tmp_result;        $error->display();    }}/** * This is not an Ajax request so we need to generate all this output. */if (isset($GLOBALS['is_ajax_request']) && !$GLOBALS['is_ajax_request']) {    if (empty($GLOBALS['is_header_sent'])) {        /**         * Gets a core script and starts output buffering work         */        include_once './libraries/ob.lib.php';        PMA_outBufferPre();        // if database storage for user preferences is transient, offer to load        // exported settings from localStorage (detection will be done in JavaScript)        $userprefs_offer_import = $GLOBALS['PMA_Config']->get('user_preferences') == 'session'                && ! isset($_SESSION['userprefs_autoload']);        if ($userprefs_offer_import) {            $GLOBALS['js_include'][] = 'config.js';        }        // For re-usability, moved http-headers and stylesheets        // to a seperate file. It can now be included by header.inc.php,        // querywindow.php.        include_once './libraries/header_http.inc.php';        include_once './libraries/header_meta_style.inc.php';        include_once './libraries/header_scripts.inc.php';        ?>        <meta name="OBGZip" content="<?php echo ($GLOBALS['cfg']['OBGzip'] ? 'true' : 'false'); ?>" />        <?php /* remove vertical scroll bar bug in ie */ ?>        <!--[if IE 6]>        <style type="text/css">        /* <![CDATA[ */        html {            overflow-y: scroll;        }        /* ]]> */        </style>        <![endif]-->    </head>    <body>        <?php        // Include possible custom headers        if (file_exists(CUSTOM_HEADER_FILE)) {            include CUSTOM_HEADER_FILE;        }        // message of "Cookies required" displayed for auth_type http or config        // note: here, the decoration won't work because without cookies,        // our standard CSS is not operational        if (empty($_COOKIE)) {            PMA_Message::notice(__('Cookies must be enabled past this point.'))->display();        }        // offer to load user preferences from localStorage        if ($userprefs_offer_import) {            include_once './libraries/user_preferences.lib.php';            PMA_userprefs_autoload_header();        }        if (!defined('PMA_DISPLAY_HEADING')) {            define('PMA_DISPLAY_HEADING', 1);        }        // pass configuration for hint tooltip display        // (to be used by PMA_createqTip in js/functions.js)        if (! $GLOBALS['cfg']['ShowHint']) {            echo '<span id="no_hint" class="hide"></span>';        }        /**         * Display heading if needed. Design can be set in css file.         */        if (PMA_DISPLAY_HEADING && $GLOBALS['server'] > 0) {            $server_info = (!empty($GLOBALS['cfg']['Server']['verbose'])                            ? $GLOBALS['cfg']['Server']['verbose']                            : $GLOBALS['cfg']['Server']['host'] . (empty($GLOBALS['cfg']['Server']['port'])                                                                   ? ''                                                                   : ':' . $GLOBALS['cfg']['Server']['port']                                                                  )                           );            $separator = "<span class='separator item'>&nbsp;</span>\n";            $item = '<a href="%1$s?%2$s" class="item">';                if ($GLOBALS['cfg']['NavigationBarIconic'] !== true) {                    $item .= '%4$s: ';                }                $item .= '%3$s</a>' . "\n";                echo "<div id='floating_menubar'></div>\n";                echo "<div id='serverinfo'>\n";                if ($GLOBALS['cfg']['NavigationBarIconic']) {                    echo PMA_getImage('s_host.png', '', array('class' => 'item')) . "\n";                }                printf($item,                        $GLOBALS['cfg']['DefaultTabServer'],                        PMA_generate_common_url(),                        htmlspecialchars($server_info),                        __('Server'));                if (strlen($GLOBALS['db'])) {                    echo $separator;                    if ($GLOBALS['cfg']['NavigationBarIconic']) {                        echo PMA_getImage('s_db.png', '', array('class' => 'item')) . "\n";                    }                    printf($item,                            $GLOBALS['cfg']['DefaultTabDatabase'],                            PMA_generate_common_url($GLOBALS['db']),                            htmlspecialchars($GLOBALS['db']),                            __('Database'));                    // if the table is being dropped, $_REQUEST['purge'] is set to '1'                    // so do not display the table name in upper div                    if (strlen($GLOBALS['table']) && ! (isset($_REQUEST['purge']) && $_REQUEST['purge'] == '1')) {                        include_once './libraries/tbl_info.inc.php';                        echo $separator;                        if ($GLOBALS['cfg']['NavigationBarIconic']) {                            $icon = isset($GLOBALS['tbl_is_view']) && $GLOBALS['tbl_is_view'] ? 'b_views.png' : 's_tbl.png';                            echo PMA_getImage($icon, '', array('class' => 'item')) . "\n";                        }                        printf($item,                            $GLOBALS['cfg']['DefaultTabTable'],                            PMA_generate_common_url($GLOBALS['db'], $GLOBALS['table']),                            str_replace(' ', '&nbsp;', htmlspecialchars($GLOBALS['table'])),                            (isset($GLOBALS['tbl_is_view']) && $GLOBALS['tbl_is_view'] ? __('View') : __('Table')));                        /**                         * Displays table comment                         */                        if (!empty($show_comment) && ! isset($GLOBALS['avoid_show_comment'])) {                            if (strstr($show_comment, '; InnoDB free')) {                                $show_comment = preg_replace('@; InnoDB free:.*?$@', '', $show_comment);                            }                            echo '<span class="table_comment" id="span_table_comment">'                                .'&quot;' . htmlspecialchars($show_comment)                                .'&quot;</span>' . "\n";                        } // end if                        // add recently used table and reload the navigation                        if ($GLOBALS['cfg']['LeftRecentTable'] > 0) {                            PMA_addRecentTable($GLOBALS['db'], $GLOBALS['table']);                        }                    } else {                        // no table selected, display database comment if present                        /**                         * Settings for relations stuff                         */                        include_once './libraries/relation.lib.php';                        $cfgRelation = PMA_getRelationsParam();                        // Get additional information about tables for tooltip is done                        // in libraries/db_info.inc.php only once                        if ($cfgRelation['commwork']) {                            $comment = PMA_getDbComment($GLOBALS['db']);                            /**                             * Displays table comment                             */                            if (! empty($comment)) {                                echo '<span class="table_comment"'                                    . ' id="span_table_comment">&quot;'                                    . htmlspecialchars($comment)                                    . '&quot;</span>' . "\n";                            } // end if                        }                    }                }            }            echo '<div class="clearfloat"></div>';            echo '</div>';        }        /**         * Sets a variable to remember headers have been sent         */        $GLOBALS['is_header_sent'] = true;//end if (!$GLOBALS['is_ajax_request'])} else {    if (empty($GLOBALS['is_header_sent'])) {        include_once './libraries/header_http.inc.php';        $GLOBALS['is_header_sent'] = true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Holds class PMA_Message * * @package PhpMyAdmin *//** * a single message * * simple usage examples: * <code> * // display simple error message 'Error' * PMA_Message::error()->display(); * * // get simple success message 'Success' * $message = PMA_Message::success(); * * // get special notice 'Some locale notice' * $message = PMA_Message::notice('strSomeLocaleNotice'); * </code> * * more advanced usage example: * <code> * // create a localized success message * $message = PMA_Message::success('strSomeLocaleMessage'); * * // create another message, a hint, with a localized string which expects * // two parameters: $strSomeFootnote = 'Read the %smanual%s' * $hint = PMA_Message::notice('strSomeFootnote'); * // replace %d with the following params * $hint->addParam('[a@./Documentation.html#cfg_Example@_blank]'); * $hint->addParam('[/a]'); * // add this hint as a footnote * $hint = PMA_showHint($hint); * * // add the retrieved footnote reference to the original message * $message->addMessage($hint); * * // create another message ... * $more = PMA_Message::notice('strSomeMoreLocale'); * $more->addString('strSomeEvenMoreLocale', '<br />'); * $more->addParam('parameter for strSomeMoreLocale'); * $more->addParam('more parameter for strSomeMoreLocale'); * * // and add it also to the original message * $message->addMessage($more); * // finally add another raw message * $message->addMessage('some final words', ' - '); * * // display() will now print all messages in the same order as they are added * $message->display(); * // strSomeLocaleMessage <sup>1</sup> strSomeMoreLocale<br /> * // strSomeEvenMoreLocale - some final words * </code> * @package PhpMyAdmin */class PMA_Message{    const SUCCESS = 1; // 0001    const NOTICE  = 2; // 0010    const ERROR   = 8; // 1000    const SANITIZE_NONE   = 0;  // 0000 0000    const SANITIZE_STRING = 16; // 0001 0000    const SANITIZE_PARAMS = 32; // 0010 0000    const SANITIZE_BOOTH  = 48; // 0011 0000    /**     * message levels     *     * @var array     */    static public $level = array (        PMA_Message::SUCCESS => 'success',        PMA_Message::NOTICE  => 'notice',        PMA_Message::ERROR   => 'error',    );    /**     * The message number     *     * @access  protected     * @var     integer     */    protected $_number = PMA_Message::NOTICE;    /**     * The locale string identifier     *     * @access  protected     * @var     string     */    protected $_string = '';    /**     * The formatted message     *     * @access  protected     * @var     string     */    protected $_message = '';    /**     * Whether the message was already displayed     *     * @access  protected     * @var     boolean     */    protected $_is_displayed = false;    /**     * Unique id     *     * @access  protected     * @var string     */    protected $_hash = null;    /**     * holds parameters     *     * @access  protected     * @var     array     */    protected $_params = array();    /**     * holds additional messages     *     * @access  protected     * @var     array     */    protected $_added_messages = array();    /**     * Constructor     *     * @param string  $string     * @param integer $number     * @param array   $params     * @param integer $sanitize     */    public function __construct($string = '', $number = PMA_Message::NOTICE,        $params = array(), $sanitize = PMA_Message::SANITIZE_NONE)    {        $this->setString($string, $sanitize & PMA_Message::SANITIZE_STRING);        $this->setNumber($number);        $this->setParams($params, $sanitize & PMA_Message::SANITIZE_PARAMS);    }    /**     * magic method: return string representation for this object     *     * @return string     */    public function __toString()    {        return $this->getMessage();    }    /**     * get PMA_Message of type success     *     * shorthand for getting a simple success message     *     * @static     * @param string $string a localized string e.g. __('Your SQL query has been executed successfully')     * @return  PMA_Message     */    static public function success($string = '')    {        if (empty($string)) {            $string = __('Your SQL query has been executed successfully');        }        return new PMA_Message($string, PMA_Message::SUCCESS);    }    /**     * get PMA_Message of type error     *     * shorthand for getting a simple error message     *     * @static     * @param string $string a localized string e.g. __('Error')     * @return  PMA_Message     */    static public function error($string = '')    {        if (empty($string)) {            $string = __('Error');        }        return new PMA_Message($string, PMA_Message::ERROR);    }    /**     * get PMA_Message of type notice     *     * shorthand for getting a simple notice message     *     * @static     * @param string  $string a localized string e.g. __('The additional features for working with linked tables have been deactivated. To find out why click %shere%s.')     * @return  PMA_Message     */    static public function notice($string)    {        return new PMA_Message($string, PMA_Message::NOTICE);    }    /**     * get PMA_Message with customized content     *     * shorthand for getting a customized message     *     * @static     * @param string    $message     * @param integer   $type     * @return  PMA_Message     */    static public function raw($message, $type = PMA_Message::NOTICE)    {        $r = new PMA_Message('', $type);        $r->setMessage($message);        return $r;    }    /**     * get PMA_Message for number of affected rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function affected_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row affected.', '%1$d rows affected.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message for number of deleted rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function deleted_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row deleted.', '%1$d rows deleted.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message for number of inserted rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function inserted_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row inserted.', '%1$d rows inserted.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message of type error with custom content     *     * shorthand for getting a customized error message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawError($message)    {        return PMA_Message::raw($message, PMA_Message::ERROR);    }    /**     * get PMA_Message of type notice with custom content     *     * shorthand for getting a customized notice message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawNotice($message)    {        return PMA_Message::raw($message, PMA_Message::NOTICE);    }    /**     * get PMA_Message of type success with custom content     *     * shorthand for getting a customized success message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawSuccess($message)    {        return PMA_Message::raw($message, PMA_Message::SUCCESS);    }    /**     * returns whether this message is a success message or not     * and optionaly makes this message a success message     *     * @param boolean $set     * @return  boolean whether this is a success message or not     */    public function isSuccess($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::SUCCESS);        }        return $this->getNumber() === PMA_Message::SUCCESS;    }    /**     * returns whether this message is a notice message or not     * and optionally makes this message a notice message     *     * @param boolean $set     * @return  boolean whether this is a notice message or not     */    public function isNotice($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::NOTICE);        }        return $this->getNumber() === PMA_Message::NOTICE;    }    /**     * returns whether this message is an error message or not     * and optionally makes this message an error message     *     * @param boolean $set     * @return  boolean whether this is an error message or not     */    public function isError($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::ERROR);        }        return $this->getNumber() === PMA_Message::ERROR;    }    /**     * set raw message (overrides string)     *     * @param string  $message     * @param boolean $sanitize whether to sanitize $message or not     */    public function setMessage($message, $sanitize = false)    {        if ($sanitize) {            $message = PMA_Message::sanitize($message);        }        $this->_message = $message;    }    /**     * set string (does not take effect if raw message is set)     *     * @param string  $_string     * @param boolean $sanitize whether to sanitize $string or not     */    public function setString($_string, $sanitize = true)    {        if ($sanitize) {            $_string = PMA_Message::sanitize($_string);        }        $this->_string = $_string;    }    /**     * set message type number     *     * @param integer $number     */    public function setNumber($number)    {        $this->_number = $number;    }    /**     * add parameter, usually in conjunction with strings     *     * usage     * <code>     * $message->addParam('strLocale', false);     * $message->addParam('[em]some string[/em]');     * $message->addParam('<img src="img" />', false);     * </code>     *     * @param mixed   $param     * @param boolean $raw     */    public function addParam($param, $raw = true)    {        if ($param instanceof PMA_Message) {            $this->_params[] = $param;        } elseif ($raw) {            $this->_params[] = htmlspecialchars($param);        } else {            $this->_params[] = PMA_Message::notice($param);        }    }    /**     * add another string to be concatenated on displaying     *     * @param string  $string    to be added     * @param string  $separator to use between this and previous string/message     */    public function addString($string, $separator = ' ')    {        $this->_added_messages[] = $separator;        $this->_added_messages[] = PMA_Message::notice($string);    }    /**     * add a bunch of messages at once     *     * @param array   $messages  to be added     * @param string  $separator to use between this and previous string/message     */    public function addMessages($messages, $separator = ' ')    {        foreach ($messages as $message) {            $this->addMessage($message, $separator);        }    }    /**     * add another raw message to be concatenated on displaying     *     * @param mixed   $message   to be added     * @param string  $separator to use between this and previous string/message     */    public function addMessage($message, $separator = ' ')    {        if (strlen($separator)) {            $this->_added_messages[] = $separator;        }        if ($message instanceof PMA_Message) {            $this->_added_messages[] = $message;        } else {            $this->_added_messages[] = PMA_Message::rawNotice($message);        }    }    /**     * set all params at once, usually used in conjunction with string     *     * @param array   $params     * @param boolean $sanitize     */    public function setParams($params, $sanitize = false)    {        if ($sanitize) {            $params = PMA_Message::sanitize($params);        }        $this->_params = $params;    }    /**     * return all parameters     *     * @return array     */    public function getParams()    {        return $this->_params;    }    /**     * return all added messages     *     * @return array     */    public function getAddedMessages()    {        return $this->_added_messages;    }    /**     * Sanitizes $message     *     * @static     * @param mixed  $message the message(s)     * @return  mixed  the sanitized message(s)     * @access  public     */    static public function sanitize($message)    {        if (is_array($message)) {            foreach ($message as $key => $val) {                $message[$key] = PMA_Message::sanitize($val);            }            return $message;        }        return htmlspecialchars($message);    }    /**     * decode $message, taking into account our special codes     * for formatting     *     * @static     * @param string  $message the message     * @return  string  the decoded message     * @access  public     */    static public function decodeBB($message)    {        return PMA_sanitize($message, false, true);    }    /**     * wrapper for sprintf()     *     * @return  string formatted     */    static public function format()    {        $params = func_get_args();        if (isset($params[1]) && is_array($params[1])) {            array_unshift($params[1], $params[0]);            $params = $params[1];        }        return call_user_func_array('sprintf', $params);    }    /**     * returns unique PMA_Message::$_hash, if not exists it will be created     *     * @return  string PMA_Message::$_hash     */    public function getHash()    {        if (null === $this->_hash) {            $this->_hash = md5(                $this->getNumber() .                $this->_string .                $this->_message            );        }        return $this->_hash;    }    /**     * returns compiled message     *     * @return  string complete message     */    public function getMessage()    {        $message = $this->_message;        if (0 === strlen($message)) {            $string = $this->getString();            if (isset($GLOBALS[$string])) {                $message = $GLOBALS[$string];            } elseif (0 === strlen($string)) {                $message = '';            } else {                $message = $string;            }        }        if (count($this->getParams()) > 0) {            $message = PMA_Message::format($message, $this->getParams());        }        $message = PMA_Message::decodeBB($message);        foreach ($this->getAddedMessages() as $add_message) {            $message .= $add_message;        }        return $message;    }    /**     * returns PMA_Message::$_string     *     * @return  string PMA_Message::$_string     */    public function getString()    {        return $this->_string;    }    /**     * returns PMA_Message::$_number     *     * @return  integer PMA_Message::$_number     */    public function getNumber()    {        return $this->_number;    }    /**     * returns level of message     *     * @return  string  level of message     */    public function getLevel()    {        return PMA_Message::$level[$this->getNumber()];    }    /**     * Displays the message in HTML     *     */    public function display()    {        echo $this->getDisplay();        $this->isDisplayed(true);    }    /**     * returns HTML code for displaying this message     *     *     * @return string whole message box     */    public function getDisplay()    {        return '<div class="' . $this->getLevel() . '">'            . $this->getMessage() . '</div>';    }    /**     * sets and returns whether the message was displayed or not     *     * @param boolean $is_displayed     * @return  boolean PMA_Message::$_is_displayed     */    public function isDisplayed($is_displayed = false)    {        if ($is_displayed) {            $this->_is_displayed = true;        }        return $this->_is_displayed;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$die_save_pos = 0;require_once 'pmd_save_pos.php';extract($_POST, EXTR_SKIP);$tables = PMA_DBI_get_tables_full($db, $T1);$type_T1 = strtoupper($tables[$T1]['ENGINE']);$tables = PMA_DBI_get_tables_full($db, $T2);$type_T2 = strtoupper($tables[$T2]['ENGINE']);// native foreign keyif (PMA_foreignkey_supported($type_T1) && PMA_foreignkey_supported($type_T2) && $type_T1 == $type_T2) {    // relation exists?    $existrel_foreign = PMA_getForeigners($db, $T2, '', 'foreign');    if (isset($existrel_foreign[$F2])     && isset($existrel_foreign[$F2]['constraint'])) {         PMD_return_new(0, __('Error: relation already exists.'));    }// note: in InnoDB, the index does not requires to be on a PRIMARY// or UNIQUE key// improve: check all other requirements for InnoDB relations    $result      = PMA_DBI_query('SHOW INDEX FROM ' . PMA_backquote($T1) . ';');    $index_array1   = array(); // will be use to emphasis prim. keys in the table view    while ($row = PMA_DBI_fetch_assoc($result))        $index_array1[$row['Column_name']] = 1;    PMA_DBI_free_result($result);    $result     = PMA_DBI_query('SHOW INDEX FROM ' . PMA_backquote($T2) . ';');    $index_array2  = array(); // will be used to emphasis prim. keys in the table view    while ($row = PMA_DBI_fetch_assoc($result))        $index_array2[$row['Column_name']] = 1;    PMA_DBI_free_result($result);    if (! empty($index_array1[$F1]) && ! empty($index_array2[$F2])) {        $upd_query  = 'ALTER TABLE ' . PMA_backquote($T2)                 . ' ADD FOREIGN KEY ('                 . PMA_backquote($F2) . ')'                 . ' REFERENCES '                 . PMA_backquote($db) . '.'                 . PMA_backquote($T1) . '('                 . PMA_backquote($F1) . ')';        if ($on_delete != 'nix') {            $upd_query   .= ' ON DELETE ' . $on_delete;        }        if ($on_update != 'nix') {            $upd_query   .= ' ON UPDATE ' . $on_update;        }        PMA_DBI_try_query($upd_query) or PMD_return_new(0, __('Error: Relation not added.'));    PMD_return_new(1, __('FOREIGN KEY relation added'));    }// internal (pmadb) relation} else {    if ($GLOBALS['cfgRelation']['relwork'] == false) {        PMD_return_new(0, _('General relation features') . ':' . _('Disabled'));    } else {        // no need to recheck if the keys are primary or unique at this point,        // this was checked on the interface part        $q  = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation'])                            . '(master_db, master_table, master_field, foreign_db, foreign_table, foreign_field)'                            . ' values('                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($T2) . '\', '                            . '\'' . PMA_sqlAddSlashes($F2) . '\', '                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($T1) . '\','                            . '\'' . PMA_sqlAddSlashes($F1) . '\')';        if (PMA_query_as_controluser($q, false, PMA_DBI_QUERY_STORE)) {            PMD_return_new(1, __('Internal relation added'));        } else {            PMD_return_new(0, __('Error: Relation not added.'));        }   }}function PMD_return_new($b,$ret){    global $db,$T1,$F1,$T2,$F2;    header("Content-Type: text/xml; charset=utf-8");    header("Cache-Control: no-cache");    die('<root act="relation_new" return="'.$ret.'" b="'.$b.    '" DB1="'.urlencode($db).    '" T1="'.urlencode($T1).    '" F1="'.urlencode($F1).    '" DB2="'.urlencode($db).    '" T2="'.urlencode($T2).    '" F2="'.urlencode($F2).    '"></root>');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @todo a .lib filename should not have code in main(), split or rename file * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Load proper code for handling input. */if (@function_exists('mb_strlen')) {    mb_internal_encoding('utf-8');    include './libraries/string_mb.lib.php';} else {    include './libraries/string_native.lib.php';}/** * Load ctype handler. */if (@extension_loaded('ctype')) {    include './libraries/string_type_ctype.lib.php';} else {    include './libraries/string_type_native.lib.php';}/** * Checks if a given character position in the string is escaped or not * * @param string   string to check for * @param integer  the character to check for * @param integer  starting position in the string * @return  boolean  whether the character is escaped or not */function PMA_STR_charIsEscaped($string, $pos, $start = 0){    $pos = max(intval($pos), 0);    $start = max(intval($start), 0);    $len = PMA_strlen($string);    // Base case:    // Check for string length or invalid input or special case of input    // (pos == $start)    if ($pos <= $start || $len <= max($pos, $start)) {        return false;    }    $pos--;    $escaped     = false;    while ($pos >= $start && PMA_substr($string, $pos, 1) == '\\') {        $escaped = !$escaped;        $pos--;    } // end while    return $escaped;} // end of the "PMA_STR_charIsEscaped()" function/** * Checks if a number is in a range * * @param integer  number to check for * @param integer  lower bound * @param integer  upper bound * @return  boolean  whether the number is in the range or not */function PMA_STR_numberInRangeInclusive($num, $lower, $upper){    return ($num >= $lower && $num <= $upper);} // end of the "PMA_STR_numberInRangeInclusive()" function/** * Checks if a character is an SQL identifier * * @param string   character to check for * @param boolean  whether the dot character is valid or not * @return  boolean  whether the character is an SQL identifier or not */function PMA_STR_isSqlIdentifier($c, $dot_is_valid = false){    return (PMA_STR_isAlnum($c)        || ($ord_c = ord($c)) && $ord_c >= 192 && $ord_c != 215 && $ord_c != 249        || $c == '_'        || $c == '$'        || ($dot_is_valid != false && $c == '.'));} // end of the "PMA_STR_isSqlIdentifier()" function?>
<?php/** * Overview (main page) * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/display_select_lang.lib.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/index.lib.php';// prepare unfiltered language list$all_languages = PMA_langList();uasort($all_languages, 'PMA_language_cmp');$cf = ConfigFile::getInstance();$separator = PMA_get_arg_separator('html');// message handlingmessages_begin();//// Check phpMyAdmin version//if (isset($_GET['version_check'])) {    PMA_version_check();}//// Perform various security, compatibility and consistency checks//perform_config_checks();//// Check whether we can read/write configuration//$config_readable = false;$config_writable = false;$config_exists = false;check_config_rw($config_readable, $config_writable, $config_exists);if (!$config_writable || !$config_readable) {    messages_set('error', 'config_rw', __('Cannot load or save configuration'),        PMA_lang(__('Please create web server writable folder [em]config[/em] in phpMyAdmin top level directory as described in [a@Documentation.html#setup_script]documentation[/a]. Otherwise you will be only able to download or display it.')));}//// Check https connection//$is_https = !empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) == 'on';if (!$is_https) {    $text = __('You are not using a secure connection; all data (including potentially sensitive information, like passwords) is transferred unencrypted!');    if (!empty($_SERVER['REQUEST_URI']) && !empty($_SERVER['HTTP_HOST'])) {        $link = 'https://' . htmlspecialchars($_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);        $strInsecureConnectionMsg2 = __('If your server is also configured to accept HTTPS requests follow [a@%s]this link[/a] to use a secure connection.');        $strInsecureConnectionMsg2 = sprintf($strInsecureConnectionMsg2, $link);        $text .= ' ' . PMA_lang($strInsecureConnectionMsg2);    }    messages_set('notice', 'no_https', __('Insecure connection'), $text);}?><form id="select_lang" method="post" action="<?php echo htmlspecialchars($_SERVER['REQUEST_URI']) ?>">    <?php echo PMA_generate_common_hidden_inputs() ?>    <bdo xml:lang="en" dir="ltr"><label for="lang">    <?php echo __('Language') . (__('Language') != 'Language' ? ' - Language' : '') ?>    </label></bdo><br />    <select id="lang" name="lang" class="autosubmit" xml:lang="en" dir="ltr">    <?php    // create language list    $lang_list = array();    foreach ($all_languages as $each_lang_key => $each_lang) {        $lang_name = PMA_langName($each_lang);        //Is current one active?        $selected = ($GLOBALS['lang'] == $each_lang_key) ? ' selected="selected"' : '';        echo '<option value="' . $each_lang_key . '"' . $selected . '>' . $lang_name            . '</option>' . "\n";    }    ?>    </select></form><?php// Check for done action info and set notice message if presentswitch ($action_done) {    case 'config_saved':        /* Use uniqid to display this message every time configuration is saved */        messages_set('notice', uniqid('config_saved'), __('Configuration saved.'),            PMA_lang(__('Configuration saved to file config/config.inc.php in phpMyAdmin top level directory, copy it to top level one and delete directory config to use it.')));        break;    default:        break;}?><h2><?php echo __('Overview') ?></h2><?php// message handlingmessages_end();messages_show_html();?><a href="#" id="show_hidden_messages" style="display:none"><?php echo __('Show hidden messages (#MSG_COUNT)') ?></a><h3><?php echo __('Servers') ?></h3><?php//// Display server list//display_form_top('index.php', 'get', array(    'page' => 'servers',    'mode' => 'add'));?><div class="form"><?php if ($cf->getServerCount() > 0): ?><table cellspacing="0" class="datatable" style="table-layout: fixed"><tr>    <th>#</th>    <th><?php echo __('Name') ?></th>    <th><?php echo __('Authentication type') ?></th>    <th colspan="2">DSN</th></tr><?php foreach ($cf->getServers() as $id => $server): ?><tr>    <td><?php echo $id ?></td>    <td><?php echo htmlspecialchars($cf->getServerName($id)) ?></td>    <td><?php echo htmlspecialchars($cf->getValue("Servers/$id/auth_type")) ?></td>    <td><?php echo htmlspecialchars($cf->getServerDSN($id)) ?></td>    <td style="white-space: nowrap">        <small>        <a href="<?php echo "?page=servers{$separator}mode=edit{$separator}id=$id" ?>"><?php echo __('Edit') ?></a>        | <a href="<?php echo "?page=servers{$separator}mode=remove{$separator}id=$id" ?>"><?php echo __('Delete') ?></a>        </small>    </td></tr><?php endforeach; ?></table><?php else: ?><table width="100%"><tr>    <td>        <i><?php echo __('There are no configured servers') ?></i>    </td></tr></table><?php endif; ?><table width="100%"><tr>    <td class="lastrow" style="text-align: left">        <input type="submit" name="submit" value="<?php echo __('New server') ?>" />    </td></tr></table></div><?phpdisplay_form_bottom();?><h3><?php echo __('Configuration file') ?></h3><?php//// Display config file settings and load/save form//$form_display = new FormDisplay();display_form_top('config.php');display_fieldset_top('', '', null, array('class' => 'simple'));// Display language list$opts = array(    'doc' => $form_display->getDocLink('DefaultLang'),    'wiki' => $form_display->getWikiLink('DefaultLang'),    'values' => array(),    'values_escaped' => true);foreach ($all_languages as $each_lang_key => $each_lang) {    $lang_name = PMA_langName($each_lang);    $opts['values'][$each_lang_key] = $lang_name;}display_input('DefaultLang', __('Default language'), '', 'select',    $cf->getValue('DefaultLang'), true, $opts);// Display server list$opts = array(    'doc' => $form_display->getDocLink('ServerDefault'),    'wiki' => $form_display->getWikiLink('ServerDefault'),    'values' => array(),    'values_disabled' => array());if ($cf->getServerCount() > 0) {    $opts['values']['0'] = __('let the user choose');    $opts['values']['-'] = '------------------------------';    if ($cf->getServerCount() == 1) {        $opts['values_disabled'][] = '0';    }    $opts['values_disabled'][] = '-';    foreach ($cf->getServers() as $id => $server) {        $opts['values'][(string)$id] = $cf->getServerName($id) . " [$id]";    }} else {    $opts['values']['1'] = __('- none -');    $opts['values_escaped'] = true;}display_input('ServerDefault', __('Default server'), '', 'select',    $cf->getValue('ServerDefault'), true, $opts);// Display EOL list$opts = array(    'values' => array(        'unix' => 'UNIX / Linux (\n)',        'win' => 'Windows (\r\n)'),    'values_escaped' => true);$eol = PMA_ifSetOr($_SESSION['eol'], (PMA_IS_WINDOWS ? 'win' : 'unix'));display_input('eol', __('End of line'), '', 'select',    $eol, true, $opts);?><tr>    <td colspan="2" class="lastrow" style="text-align: left">        <input type="submit" name="submit_display" value="<?php echo __('Display') ?>" />        <input type="submit" name="submit_download" value="<?php echo __('Download') ?>" />        &nbsp; &nbsp;        <input type="submit" name="submit_save" value="<?php echo __('Save') ?>"<?php if (!$config_writable) echo ' disabled="disabled"' ?> />        <input type="submit" name="submit_load" value="<?php echo __('Load') ?>"<?php if (!$config_exists) echo ' disabled="disabled"' ?> />        <input type="submit" name="submit_delete" value="<?php echo __('Delete') ?>"<?php if (!$config_exists || !$config_writable) echo ' disabled="disabled"' ?> />        &nbsp; &nbsp;        <input type="submit" name="submit_clear" value="<?php echo __('Clear') ?>" class="red" />    </td></tr><?phpdisplay_fieldset_bottom_simple();display_form_bottom();?><div id="footer">    <a href="http://phpmyadmin.net"><?php echo __('phpMyAdmin homepage') ?></a>    <a href="http://sourceforge.net/donate/index.php?group_id=23067"><?php echo __('Donate') ?></a>    <a href="?version_check=1<?php echo "{$separator}token=" . $_SESSION[' PMA_token '] ?>"><?php echo __('Check for latest version') ?></a></div>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * phpinfo() wrapper to allow displaying only when configured to do so. * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require_once './libraries/common.inc.php';/** * Displays PHP information */if ($GLOBALS['cfg']['ShowPhpInfo']) {    phpinfo();}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common header for user preferences pages * * @package PhpMyAdmin */if (!defined('PHPMYADMIN')) {    exit;}// show server tabsrequire './libraries/server_links.inc.php';// build user preferences menu$form_param = filter_input(INPUT_GET, 'form');if (! isset($forms[$form_param])) {    $forms_keys = array_keys($forms);    $form_param = array_shift($forms_keys);}$tabs_icons = array(    'Features'    => 'b_tblops.png',    'Sql_queries' => 'b_sql.png',    'Left_frame'  => 'b_select.png',    'Main_frame'  => 'b_props.png',    'Import'      => 'b_import.png',    'Export'      => 'b_export.png');echo '<ul id="topmenu2">';echo PMA_generate_html_tab(    array(        'link' => 'prefs_manage.php',        'text' => __('Manage your settings')    )) . "\n";echo '<li>&nbsp; &nbsp;</li>' . "\n";$script_name = basename($GLOBALS['PMA_PHP_SELF']);foreach (array_keys($forms) as $formset) {    $tab = array(        'link' => 'prefs_forms.php',        'text' => PMA_lang('Form_' . $formset),        'icon' => $tabs_icons[$formset],        'active' => ($script_name == 'prefs_forms.php' && $formset == $form_param));    echo PMA_generate_html_tab($tab, array('form' => $formset)) . "\n";}echo '</ul><div class="clearfloat"></div>';// show "configuration saved" message and reload navigation frame if neededif (!empty($_GET['saved'])) {    $message = PMA_Message::rawSuccess(__('Configuration has been saved'));    $message->display();}/* debug code$arr = ConfigFile::getInstance()->getConfigArray();$arr2 = array();foreach ($arr as $k => $v) {    $arr2[] = "<b>$k</b> " . var_export($v, true);}$arr2 = implode(', ', $arr2);$arr2 .= '<br />Blacklist: ' . (empty($cfg['UserprefsDisallow'])        ? '<i>empty</i>'        : implode(', ', $cfg['UserprefsDisallow']));$msg = PMA_Message::notice('Settings: ' . $arr2);$msg->display();//*/// warn about using session storage for settings$cfgRelation = PMA_getRelationsParam();if (! $cfgRelation['userconfigwork']) {    $msg = __('Your preferences will be saved for current session only. Storing them permanently requires %sphpMyAdmin configuration storage%s.');    $msg = PMA_sanitize(sprintf($msg, '[a@./Documentation.html#linked-tables@_blank]', '[/a]'));    PMA_Message::notice($msg)->display();}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles creation of the chart * * @package PhpMyAdmin *//** * do not import request variable into global scope * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'tbl_chart.js';$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';/* < IE 9 doesn't support canvas natively */if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {    $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';}$GLOBALS['js_include'][] = 'canvg/canvg.js';/** * Runs common work */if (strlen($GLOBALS['table'])) {    $url_params['goto'] = $cfg['DefaultTabTable'];    $url_params['back'] = 'tbl_sql.php';    include './libraries/tbl_common.php';    include './libraries/tbl_info.inc.php';    include './libraries/tbl_links.inc.php';} elseif (strlen($GLOBALS['db'])) {    $url_params['goto'] = $cfg['DefaultTabDatabase'];    $url_params['back'] = 'sql.php';    include './libraries/db_common.inc.php';    include './libraries/db_info.inc.php';} else {    $url_params['goto'] = $cfg['DefaultTabServer'];    $url_params['back'] = 'sql.php';    include './libraries/server_common.inc.php';    include './libraries/server_links.inc.php';}/* * Execute the query and return the result */$data = array();$result = PMA_DBI_try_query($sql_query);while ($row = PMA_DBI_fetch_assoc($result)) {    $data[] = $row;}// get settings if any posted$chartSettings = array();if (PMA_isValid($_REQUEST['chartSettings'], 'array')) {    $chartSettings = $_REQUEST['chartSettings'];}$url_params['db'] = $GLOBALS['db'];$url_params['reload'] = 1;/** * Displays the page */// pma_token/url_query needed for chart export?><script type="text/javascript">pma_token = '<?php echo $_SESSION[' PMA_token ']; ?>';url_query = '<?php echo $url_query;?>';</script><!-- Display Chart options --><div id="div_view_options"><form method="post" action="tbl_chart.php"><?php echo PMA_generate_common_hidden_inputs($url_params); ?><fieldset>    <legend><?php echo __('Display chart'); ?></legend>    <div style="float:left;">        <input type="radio" name="chartType" value="bar" id="radio_bar" />        <label for ="radio_bar"><?php echo _pgettext('Chart type', 'Bar'); ?></label>        <input type="radio" name="chartType" value="column" id="radio_column" />        <label for ="radio_column"><?php echo _pgettext('Chart type', 'Column'); ?></label>        <input type="radio" name="chartType" value="line" id="radio_line" checked="checked" />        <label for ="radio_line"><?php echo _pgettext('Chart type', 'Line'); ?></label>        <input type="radio" name="chartType" value="spline" id="radio_spline" />        <label for ="radio_spline"><?php echo _pgettext('Chart type', 'Spline'); ?></label>        <input type="radio" name="chartType" value="pie" id="radio_pie" />        <label for ="radio_pie"><?php echo _pgettext('Chart type', 'Pie'); ?></label>        <span class="barStacked" style="display:none;">        <input type="checkbox" name="barStacked" value="1" id="checkbox_barStacked" />        <label for ="checkbox_barStacked"><?php echo __('Stacked'); ?></label>        </span>        <br>        <input type="text" name="chartTitle" value="<?php echo __('Chart title'); ?>">        <?php        $keys = array_keys($data[0]);        $yaxis = -1;        if (count($keys) > 1) { ?>            <br />            <label for="select_chartXAxis"><?php echo __('X-Axis:'); ?></label>            <select name="chartXAxis" id="select_chartXAxis">            <?php                        foreach ($keys as $idx => $key) {                if ($yaxis == -1 && (($idx == count($data[0]) - 1) || preg_match("/(date|time)/i", $key))) {                    echo '<option value="' . htmlspecialchars($idx) . '" selected>' . htmlspecialchars($key) . '</option>';                    $yaxis=$idx;                } else {                    echo '<option value="' . htmlspecialchars($idx) . '">' . htmlspecialchars($key) . '</option>';                }            }                        ?>        </select><br />        <label for="select_chartSeries"><?php echo __('Series:'); ?></label>        <select name="chartSeries" id="select_chartSeries">            <option value="columns"><?php echo __('The remaining columns'); ?></option>            <?php            foreach ($keys as $idx => $key) {                echo '<option>' . htmlspecialchars($key) . '</option>';            }        ?>        </select>        <?php        }        ?>            </div>    <div style="float:left; padding-left:40px;">        <label for="xaxis_label"><?php echo __('X-Axis label:'); ?></label>        <input style="margin-top:0;" type="text" name="xaxis_label" id="xaxis_label"            value="<?php echo ($yaxis == -1) ? __('X Values') : htmlspecialchars($keys[$yaxis]); ?>" /><br />        <label for="yaxis_label"><?php echo __('Y-Axis label:'); ?></label>        <input type="text" name="yaxis_label" id="yaxis_label" value="<?php echo __('Y Values'); ?>" />    </div>    <p style="clear:both;">&nbsp;</p>    <div id="resizer" style="width:600px; height:400px;">        <div id="inner-resizer">            <div id="querychart" style="display:none;"><?php$sanitized_data = array();foreach ($data as $data_row_number => $data_row) {    $tmp_row = array();    foreach ($data_row as $data_column => $data_value) {        $tmp_row[htmlspecialchars($data_column)] = htmlspecialchars($data_value);    }    $sanitized_data[] = $tmp_row;} echo json_encode($sanitized_data); unset($sanitized_data);?>            </div>        </div>    </div></fieldset></form></div><?php/** * Displays the footer */require_once './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for the table-search page and zoom-search page * * @package PhpMyAdmin */require_once 'url_generating.lib.php';/** * Gets all the fields of a table along with their types, collations * and whether null or not. * * @param string $db    Selected database * @param string $table Selected table * * @return array Array containing the field list, field types, collations * and null constraint */function PMA_tbl_getFields($db, $table){    // Gets the list and number of fields    $fields = PMA_DBI_get_columns($db, $table, null, true);    $fields_list = $fields_null = $fields_type = $fields_collation = array();    $geom_column_present = false;    $geom_types = PMA_getGISDatatypes();    foreach ($fields as $key => $row) {        $fields_list[] = $row['Field'];        $type          = $row['Type'];        // check whether table contains geometric columns        if (in_array($type, $geom_types)) {            $geom_column_present = true;        }        // reformat mysql query output        if (strncasecmp($type, 'set', 3) == 0            || strncasecmp($type, 'enum', 4) == 0        ) {            $type = str_replace(',', ', ', $type);        } else {            // strip the "BINARY" attribute, except if we find "BINARY(" because            // this would be a BINARY or VARBINARY field type            if (!preg_match('@BINARY[\(]@i', $type)) {                $type = preg_replace('@BINARY@i', '', $type);            }            $type = preg_replace('@ZEROFILL@i', '', $type);            $type = preg_replace('@UNSIGNED@i', '', $type);            $type = strtolower($type);        }        if (empty($type)) {            $type = '&nbsp;';        }        $fields_null[] = $row['Null'];        $fields_type[] = $type;        $fields_collation[] = ! empty($row['Collation']) && $row['Collation'] != 'NULL'            ? $row['Collation']            : '';    } // end while    return array($fields_list, $fields_type, $fields_collation, $fields_null, $geom_column_present);}/** * Sets the table header for displaying a table in query-by-example format. * * @param bool $geom_column_present whether a geometry column is present * * @return HTML content, the tags and content for table header */function PMA_tbl_setTableHeader($geom_column_present = false){    // Display the Function column only if there is alteast one geomety colum    $func = '';    if ($geom_column_present) {        $func = '<th>' . __('Function') . '</th>';    }    return '<thead>        <tr>' . $func . '<th>' .  __('Column') . '</th>        <th>' .  __('Type') . '</th>        <th>' .  __('Collation') . '</th>        <th>' .  __('Operator') . '</th>        <th>' .  __('Value') . '</th>        </tr>        </thead>';}/** * Returns an array with necessary configrations to create * sub-tabs(Table Search and Zoom Search) in the table_select page. * * @return array Array containing configuration (icon, text, link, id, args) * of sub-tabs for Table Search and Zoom search */function PMA_tbl_getSubTabs(){    $subtabs = array();    $subtabs['search']['icon'] = 'b_search.png';    $subtabs['search']['text'] = __('Table Search');    $subtabs['search']['link'] = 'tbl_select.php';    $subtabs['search']['id'] = 'tbl_search_id';    $subtabs['search']['args']['pos'] = 0;    $subtabs['zoom']['icon'] = 'b_props.png';    $subtabs['zoom']['link'] = 'tbl_zoom_select.php';    $subtabs['zoom']['text'] = __('Zoom Search');    $subtabs['zoom']['id'] = 'zoom_search_id';    return $subtabs;}/** * Creates the HTML content for: * 1) Browsing foreign data for a field. * 2) Creating elements for search criteria input on fields. * * @param array  $foreigners      Array of foreign keys * @param array  $foreignData     Foreign keys data * @param string $field           Column name * @param string $tbl_fields_type Column type * @param int    $i               Column index * @param string $db              Selected database * @param string $table           Selected table * @param array  $titles          Selected title * @param int    $foreignMaxLimit Max limit of displaying foreign elements * @param array  $fields          Array of search criteria inputs * @param bool   $in_fbs          Whether we are in 'function based search' * @param bool   $in_zoom_search_edit  Whether we are in zoom search edit  * * @return string HTML content for viewing foreing data and elements * for search criteria input. */function PMA_getForeignFields_Values($foreigners, $foreignData, $field, $tbl_fields_type, $i, $db, $table, $titles, $foreignMaxLimit, $fields, $in_fbs = false, $in_zoom_search_edit = false){    $str = '';    if ($foreigners && isset($foreigners[$field]) && is_array($foreignData['disp_row'])) {        // f o r e i g n    k e y s        $str .=  '<select name="fields[' . $i . ']" id="fieldID_' . $i .'">' . "\n";        // go back to first row        // here, the 4th parameter is empty because there is no current        // value of data for the dropdown (the search page initial values        // are displayed empty)        $str .= PMA_foreignDropdown(            $foreignData['disp_row'], $foreignData['foreign_field'],            $foreignData['foreign_display'], '', $foreignMaxLimit        );        $str .= '</select>' . "\n";    } elseif ($foreignData['foreign_link'] == true) {        if (isset($fields[$i]) && is_string($fields[$i])) {            $str .= '<input type="text" id="fieldID_' . $i . '" name="fields[' . $i . ']" value="' . $fields[$i] . '" id="field_' . md5($field) . '[' . $i .']" class="textfield" />' ;        } else {            $str .= '<input type="text" id="fieldID_' . $i . '" name="fields[' . $i . ']" id="field_' . md5($field) . '[' . $i .']" class="textfield" />' ;        }        $str .=  <<<EOT<a target="_blank" onclick="window.open(this.href, 'foreigners', 'width=640,height=240,scrollbars=yes'); return false" href="browse_foreigners.php?EOT;        $str .= '' . PMA_generate_common_url($db, $table) .  '&amp;field=' . urlencode($field) . '&amp;fieldkey=' . $i . '"';        if ($in_zoom_search_edit) {            $str .= ' class="browse_foreign"';        }        $str .= '>' . str_replace("'", "\'", $titles['Browse']) . '</a>';    } elseif (in_array($tbl_fields_type[$i], PMA_getGISDatatypes())) {        // g e o m e t r y        $str .= '<input type="text" name="fields[' . $i . ']"'        .' size="40" class="textfield" id="field_' . $i . '" />' .  "\n";        if ($in_fbs) {            $edit_url = 'gis_data_editor.php?' . PMA_generate_common_url();            $edit_str = PMA_getIcon('b_edit.png', __('Edit/Insert'));            $str .= '<span class="open_search_gis_editor">';            $str .= PMA_linkOrButton($edit_url, $edit_str, array(), false, false, '_blank');            $str .= '</span>';        }    } elseif (strncasecmp($tbl_fields_type[$i], 'enum', 4) == 0        || (strncasecmp($tbl_fields_type[$i], 'set', 3) == 0 && $in_zoom_search_edit)    ) {        // e n u m s   a n d   s e t s        // Enum in edit mode   --> dropdown        // Enum in search mode --> multiselect        // Set in edit mode    --> multiselect        // Set in search mode  --> input (skipped here, so the 'else'        //                                 section would handle it)        $value = explode(', ', str_replace("'", '', substr($tbl_fields_type[$i], 5, -1)));        $cnt_value = count($value);        if ((strncasecmp($tbl_fields_type[$i], 'enum', 4) && ! $in_zoom_search_edit)            || (strncasecmp($tbl_fields_type[$i], 'set', 3) && $in_zoom_search_edit)        ) {            $str .= '<select name="fields[' . ($i) . '][]" id="fieldID_' . $i .'">' . "\n";        } else {            $str .= '<select name="fields[' . ($i) . '][]" id="fieldID_' . $i .'"'                . ' multiple="multiple" size="' . min(3, $cnt_value) . '">' . "\n";        }        for ($j = 0; $j < $cnt_value; $j++) {            if (isset($fields[$i])                && is_array($fields[$i])                && in_array($value[$j], $fields[$i])            ) {                $str .= '<option value="' . $value[$j] . '" Selected>'                    . $value[$j] . '</option>';            } else {                $str .= '<option value="' . $value[$j] . '">'                    . $value[$j] . '</option>';            }        } // end for        $str .= '</select>' . "\n";    } else {        // o t h e r   c a s e s        $the_class = 'textfield';        $type = $tbl_fields_type[$i];        if ($type == 'date') {            $the_class .= ' datefield';        } elseif ($type == 'datetime' || substr($type, 0, 9) == 'timestamp') {            $the_class .= ' datetimefield';        } elseif (substr($type, 0, 3) == 'bit') {            $the_class .= ' bit';        }        if (isset($fields[$i]) && is_string($fields[$i])) {            $str .= '<input type="text" name="fields[' . $i . ']"'                .' size="40" class="' . $the_class . '" id="fieldID_'                . $i .'" value = "' . $fields[$i] . '"/>' .  "\n";        } else {            $str .= '<input type="text" name="fields[' . $i . ']"'                .' size="40" class="' . $the_class . '" id="fieldID_'                . $i .'" />' .  "\n";        }    }    return $str;}/** * Return the where clause for query generation based on the inputs provided. * * @param mixed  $fields     Search criteria input * @param string $names      Name of the column on which search is submitted * @param string $types      Type of the field * @param string $collations Field collation * @param string $func_type  Search fucntion/operator * @param bool   $unaryFlag  Whether operator unary or not * @param bool   $geom_func  Whether geometry functions should be applied * * @return string HTML content for viewing foreing data and elements * for search criteria input. */function PMA_tbl_search_getWhereClause($fields, $names, $types, $collations, $func_type, $unaryFlag, $geom_func = null){    /**     * @todo move this to a more apropriate place     */    $geom_unary_functions = array(        'IsEmpty' => 1,        'IsSimple' => 1,        'IsRing' => 1,        'IsClosed' => 1,    );    $w = '';    // If geometry function is set apply it to the field name    if ($geom_func != null && trim($geom_func) != '') {        // Get details about the geometry fucntions        $geom_funcs = PMA_getGISFunctions($types, true, false);        // If the function takes a single parameter        if ($geom_funcs[$geom_func]['params'] == 1) {            $backquoted_name = $geom_func . '(' . PMA_backquote($names) . ')';        } else {            // If the function takes two parameters            // create gis data from the string            $gis_data = PMA_createGISData($fields);            $w = $geom_func . '(' . PMA_backquote($names) . ',' . $gis_data . ')';            return $w;        }        // New output type is the output type of the function being applied        $types = $geom_funcs[$geom_func]['type'];        // If the where clause is something like 'IsEmpty(`spatial_col_name`)'        if (isset($geom_unary_functions[$geom_func]) && trim($fields) == '') {            $w = $backquoted_name;            return $w;        }    } else {        $backquoted_name = PMA_backquote($names);    }    if ($unaryFlag) {        $fields = '';        $w = $backquoted_name . ' ' . $func_type;    } elseif (in_array($types, PMA_getGISDatatypes()) && ! empty($fields)) {        // create gis data from the string        $gis_data = PMA_createGISData($fields);        $w = $backquoted_name . ' ' . $func_type . ' ' . $gis_data;    } elseif (strncasecmp($types, 'enum', 4) == 0) {        if (!empty($fields)) {            if (! is_array($fields)) {                $fields = explode(',', $fields);            }            $enum_selected_count = count($fields);            if ($func_type == '=' && $enum_selected_count > 1) {                $func_type    = 'IN';                $parens_open  = '(';                $parens_close = ')';            } elseif ($func_type == '!=' && $enum_selected_count > 1) {                $func_type    = 'NOT IN';                $parens_open  = '(';                $parens_close = ')';            } else {                $parens_open  = '';                $parens_close = '';            }            $enum_where = '\'' . PMA_sqlAddslashes($fields[0]) . '\'';            for ($e = 1; $e < $enum_selected_count; $e++) {                $enum_where .= ', \'' . PMA_sqlAddslashes($fields[$e]) . '\'';            }            $w = $backquoted_name . ' ' . $func_type . ' ' . $parens_open . $enum_where . $parens_close;        }    } elseif ($fields != '') {        // For these types we quote the value. Even if it's another type (like INT),        // for a LIKE we always quote the value. MySQL converts strings to numbers        // and numbers to strings as necessary during the comparison        if (preg_match('@char|binary|blob|text|set|date|time|year@i', $types)            || strpos(' ' . $func_type, 'LIKE')        ) {            $quot = '\'';        } else {            $quot = '';        }        // LIKE %...%        if ($func_type == 'LIKE %...%') {            $func_type = 'LIKE';            $fields = '%' . $fields . '%';        }        if ($func_type == 'REGEXP ^...$') {            $func_type = 'REGEXP';            $fields = '^' . $fields . '$';        }        if ($func_type == 'IN (...)'            || $func_type == 'NOT IN (...)'            || $func_type == 'BETWEEN'            || $func_type == 'NOT BETWEEN'        ) {            $func_type = str_replace(' (...)', '', $func_type);            // quote values one by one            $values = explode(',', $fields);            foreach ($values as &$value) {                $value = $quot . PMA_sqlAddslashes(trim($value)) . $quot;            }            if ($func_type == 'BETWEEN' || $func_type == 'NOT BETWEEN') {                $w = $backquoted_name . ' ' . $func_type . ' ' . (isset($values[0]) ? $values[0] : '')                    . ' AND ' . (isset($values[1]) ? $values[1] : '');            } else {                $w = $backquoted_name . ' ' . $func_type . ' (' . implode(',', $values) . ')';            }        } else {            $w = $backquoted_name . ' ' . $func_type . ' ' . $quot . PMA_sqlAddslashes($fields) . $quot;;        }    } // end if    return $w;}/** * Formats a SVG plot for the query results. * * @param array $data      Data for the status chart * @param array &$settings Settings used to generate the chart * * @return string HTML and JS code for the SVG plot */function PMA_SVG_scatter_plot($data, &$settings){    include_once './libraries/svg_plot/pma_scatter_plot.php';    if (empty($data)) {        // empty data        return '';    } else {        $scatter_plot = new PMA_Scatter_Plot($data, $settings);        if ($settings != null) {            foreach ($scatter_plot->getSettings() as $setting => $val) {                if (! isset($settings[$setting])) {                    $settings[$setting] = $val;                }            }        }        return $scatter_plot->asSVG();    }}?>
<?php/** * Handles the visualization of GIS MULTILINESTRING objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Multilinestring extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        $min_max = array();        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($spatial, 17, (strlen($spatial) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        foreach ($linestirngs as $linestring) {            $min_max = $this->setMinMax($linestring, $min_max);        }        return $min_max;    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS MULTILINESTRING object     * @param string $label      Label for the GIS MULTILINESTRING object     * @param string $line_color Color for the GIS MULTILINESTRING object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $line_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($line_color, 1, 2));        $green = hexdec(substr($line_color, 3, 2));        $blue  = hexdec(substr($line_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($spatial, 17, (strlen($spatial) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        $first_line = true;        foreach ($linestirngs as $linestring) {            $points_arr = $this->extractPoints($linestring, $scale_data);            foreach ($points_arr as $point) {                if (! isset($temp_point)) {                    $temp_point = $point;                } else {                    // draw line section                    imageline($image, $temp_point[0], $temp_point[1], $point[0], $point[1], $color);                    $temp_point = $point;                }            }            unset($temp_point);            // print label if applicable            if (isset($label) && trim($label) != '' && $first_line) {                imagestring($image, 1, $points_arr[1][0], $points_arr[1][1], trim($label), $black);            }            $first_line = false;        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS MULTILINESTRING object     * @param string $label      Label for the GIS MULTILINESTRING object     * @param string $line_color Color for the GIS MULTILINESTRING object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $line_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($line_color, 1, 2));        $green = hexdec(substr($line_color, 3, 2));        $blue  = hexdec(substr($line_color, 4, 2));        $line  = array('width' => 1.5, 'color' => array($red, $green, $blue));        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($spatial, 17, (strlen($spatial) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        $first_line = true;        foreach ($linestirngs as $linestring) {            $points_arr = $this->extractPoints($linestring, $scale_data);            foreach ($points_arr as $point) {                if (! isset($temp_point)) {                    $temp_point = $point;                } else {                    // draw line section                    $pdf->Line($temp_point[0], $temp_point[1], $point[0], $point[1], $line);                    $temp_point = $point;                }            }            unset($temp_point);            // print label            if (isset($label) && trim($label) != '' && $first_line) {                $pdf->SetXY($points_arr[1][0], $points_arr[1][1]);                $pdf->SetFontSize(5);                $pdf->Cell(0, 0, trim($label));            }            $first_line = false;        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS MULTILINESTRING object     * @param string $label      Label for the GIS MULTILINESTRING object     * @param string $line_color Color for the GIS MULTILINESTRING object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $line_color, $scale_data)    {        $line_options = array(            'name'        => $label,            'class'       => 'linestring vector',            'fill'        => 'none',            'stroke'      => $line_color,            'stroke-width'=> 2,        );        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($spatial, 17, (strlen($spatial) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        $row = '';        foreach ($linestirngs as $linestring) {            $points_arr = $this->extractPoints($linestring, $scale_data);            $row .= '<polyline points="';            foreach ($points_arr as $point) {                $row .= $point[0] . ',' . $point[1] . ' ';            }            $row .= '"';            $line_options['id'] = $label . rand();            foreach ($line_options as $option => $val) {                $row .= ' ' . $option . '="' . trim($val) . '"';            }            $row .= '/>';        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS MULTILINESTRING object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS MULTILINESTRING object     * @param string $line_color Color for the GIS MULTILINESTRING object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $line_color, $scale_data)    {        $style_options = array(            'strokeColor' => $line_color,            'strokeWidth' => 2,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $row = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($spatial, 17, (strlen($spatial) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        $row .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector('            . 'new OpenLayers.Geometry.MultiLineString(new Array(';        foreach ($linestirngs as $linestring) {            $points_arr = $this->extractPoints($linestring, null);            $row .= 'new OpenLayers.Geometry.LineString(new Array(';            foreach ($points_arr as $point) {                $row .= '(new OpenLayers.Geometry.Point(' . $point[0] . ', '                    . $point[1] . ')).transform(new OpenLayers.Projection("EPSG:'                    . $srid . '"), map.getProjectionObject()), ';            }            $row = substr($row, 0, strlen($row) - 2);            $row .= ')), ';        }        $row = substr($row, 0, strlen($row) - 2);        $row .= ')), null, ' . json_encode($style_options) . '));';        return $row;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_lines = isset($gis_data[$index]['MULTILINESTRING']['no_of_lines'])            ? $gis_data[$index]['MULTILINESTRING']['no_of_lines'] : 1;        if ($no_of_lines < 1) {            $no_of_lines = 1;        }        $wkt = 'MULTILINESTRING(';        for ($i = 0; $i < $no_of_lines; $i++) {            $no_of_points = isset($gis_data[$index]['MULTILINESTRING'][$i]['no_of_points'])                ? $gis_data[$index]['MULTILINESTRING'][$i]['no_of_points'] : 2;            if ($no_of_points < 2) {                $no_of_points = 2;            }            $wkt .= '(';            for ($j = 0; $j < $no_of_points; $j++) {                $wkt .= ((isset($gis_data[$index]['MULTILINESTRING'][$i][$j]['x'])                    && trim($gis_data[$index]['MULTILINESTRING'][$i][$j]['x']) != '')                    ? $gis_data[$index]['MULTILINESTRING'][$i][$j]['x'] : $empty)                    . ' ' . ((isset($gis_data[$index]['MULTILINESTRING'][$i][$j]['y'])                    && trim($gis_data[$index]['MULTILINESTRING'][$i][$j]['y']) != '')                    ? $gis_data[$index]['MULTILINESTRING'][$i][$j]['y'] : $empty) . ',';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate the WKT for the data from ESRI shape files.     *     * @param array $row_data GIS data     *     * @return the WKT for the data from ESRI shape files     */    public function getShape($row_data)    {        $wkt = 'MULTILINESTRING(';        for ($i = 0; $i < $row_data['numparts']; $i++) {            $wkt .= '(';            foreach ($row_data['parts'][$i]['points'] as $point) {                $wkt .= $point['x'] . ' ' . $point['y'] . ',';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'MULTILINESTRING';            $wkt = $value;        }        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($wkt, 17, (strlen($wkt) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        $params[$index]['MULTILINESTRING']['no_of_lines'] = count($linestirngs);        $j = 0;        foreach ($linestirngs as $linestring) {            $points_arr = $this->extractPoints($linestring, null);            $no_of_points = count($points_arr);            $params[$index]['MULTILINESTRING'][$j]['no_of_points'] = $no_of_points;            for ($i = 0; $i < $no_of_points; $i++) {                $params[$index]['MULTILINESTRING'][$j][$i]['x'] = $points_arr[$i][0];                $params[$index]['MULTILINESTRING'][$j][$i]['y'] = $points_arr[$i][1];            }            $j++;        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * User preferences page * * @package PhpMyAdmin *//** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';require_once './libraries/user_preferences.lib.php';require_once './libraries/config/config_functions.lib.php';require_once './libraries/config/messages.inc.php';require_once './libraries/config/ConfigFile.class.php';require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require './libraries/config/user_preferences.forms.php';PMA_userprefs_pageinit();// handle form processing$form_param = filter_input(INPUT_GET, 'form');if (! isset($forms[$form_param])) {    $forms_keys = array_keys($forms);    $form_param = array_shift($forms_keys);}$form_display = new FormDisplay();foreach ($forms[$form_param] as $form_name => $form) {    // skip Developer form if no setting is available    if ($form_name == 'Developer' && !$GLOBALS['cfg']['UserprefsDeveloperTab']) {        continue;    }    $form_display->registerForm($form_name, $form, 1);}if (isset($_POST['revert'])) {    // revert erroneous fields to their default values    $form_display->fixErrors();    // redirect    $url_params = array('form' => $form_param);    PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . 'prefs_forms.php'            . PMA_generate_common_url($url_params, '&'));    exit;}$error = null;if ($form_display->process(false) && !$form_display->hasErrors()) {    // save settings    $old_settings = PMA_load_userprefs();    $result = PMA_save_userprefs(ConfigFile::getInstance()->getConfigArray());    if ($result === true) {        // reload config        $GLOBALS['PMA_Config']->loadUserPreferences();        $hash = ltrim(filter_input(INPUT_POST, 'tab_hash'), '#');        PMA_userprefs_redirect($forms, $old_settings, 'prefs_forms.php', array(            'form' => $form_param), $hash);        exit;    } else {        $error = $result;    }}// display forms$GLOBALS['js_include'][] = 'config.js';require './libraries/header.inc.php';require './libraries/user_preferences.inc.php';if ($error) {    $error->display();}if ($form_display->hasErrors()) {    // form has errors    ?>    <div class="error config-form">        <b><?php echo __('Cannot save settings, submitted form contains errors') ?></b>        <?php $form_display->displayErrors(); ?>    </div>    <?php}$form_display->display(true, true);/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/** * Generates the JavaScripts needed to visualize GIS data. * * @package PhpMyAdmin-GIS */class PMA_GIS_Visualization{    /**     * @var array   Raw data for the visualization     */    private $_data;    /**     * @var array   Set of default settigs values are here.     */    private $_settings = array(        // Array of colors to be used for GIS visualizations.        'colors' => array(            '#B02EE0',            '#E0642E',            '#E0D62E',            '#2E97E0',            '#BCE02E',            '#E02E75',            '#5CE02E',            '#E0B02E',            '#0022E0',            '#726CB1',            '#481A36',            '#BAC658',            '#127224',            '#825119',            '#238C74',            '#4C489B',            '#87C9BF',        ),        // The width of the GIS visualization.        'width' => 600,         // The height of the GIS visualization.        'height' => 450,    );    /**     * @var array   Options that the user has specified.     */    private $_userSpecifiedSettings = null;    /**     * Returns the settings array     *     * @return the settings array.     */    public function getSettings()    {        return $this->_settings;    }    /**     * Constructor. Stores user specified options.     *     * @param array $data    Data for the visualization     * @param array $options Users specified options     */    public function __construct($data, $options)    {        $this->_userSpecifiedSettings = $options;        $this->_data = $data;    }    /**     * All the variable initialization, options handling has to be done here.     *     * @return nothing     */    protected function init()    {        $this->_handleOptions();    }    /**     * A function which handles passed parameters. Useful if desired     * chart needs to be a little bit different from the default one.     *     * @return nothing     */    private function _handleOptions()    {        if (! is_null($this->_userSpecifiedSettings)) {            $this->_settings = array_merge($this->_settings, $this->_userSpecifiedSettings);        }    }    /**     * Sanitizes the file name.     *     * @param string $file_name file name     * @param string $ext       extension of the file     *     * @return the sanitized file name     */    private function _sanitizeName($file_name, $ext)    {        $file_name = PMA_sanitize_filename($file_name);        // Check if the user already added extension;        // get the substring where the extension would be if it was included        $extension_start_pos = strlen($file_name) - strlen($ext) - 1;        $user_extension = substr($file_name, $extension_start_pos, strlen($file_name));        $required_extension = "." . $ext;        if (strtolower($user_extension) != $required_extension) {            $file_name  .= $required_extension;        }        return $file_name;    }    /**     * Handles common tasks of writing the visualization to file for various formats.     *     * @param string $file_name file name     * @param string $type      mime type     * @param string $ext       extension of the file     *     * @return nothing     */    private function _toFile($file_name, $type, $ext)    {        $file_name = $this->_sanitizeName($file_name, $ext);        ob_clean();        PMA_download_header($file_name, $type);    }    /**     * Generate the visualization in SVG format.     *     * @return the generated image resource     */    private function _svg()    {        $this->init();        $output   = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>' . "\n";        $output  .= '<svg version="1.1" xmlns:svg="http://www.w3.org/2000/svg"'            . ' xmlns="http://www.w3.org/2000/svg" width="' . $this->_settings['width'] . '"'            . ' height="' . $this->_settings['height'] . '">';        $output .= '<g id="groupPanel">';        $scale_data = $this->_scaleDataSet($this->_data);        $output .= $this->_prepareDataSet($this->_data, $scale_data, 'svg', '');        $output .= '</g>';        $output .= '</svg>';        return $output;    }    /**     * Get the visualization as a SVG.     *     * @return the visualization as a SVG     */    public function asSVG()    {        $output = $this->_svg();        return $output;    }    /**     * Saves as a SVG image to a file.     *     * @param string $file_name File name     *     * @return nothing     */    public function toFileAsSvg($file_name)    {        $img = $this->_svg();        $this->_toFile($file_name, 'image/svg+xml', 'svg');        echo($img);    }    /**     * Generate the visualization in PNG format.     *     * @return the generated image resource     */    private function _png()    {        $this->init();        // create image        $image = imagecreatetruecolor($this->_settings['width'], $this->_settings['height']);        // fill the background        $bg = imagecolorallocate($image, 229, 229, 229);        imagefilledrectangle(            $image, 0, 0, $this->_settings['width'] - 1,            $this->_settings['height'] - 1, $bg        );        $scale_data = $this->_scaleDataSet($this->_data);        $image = $this->_prepareDataSet($this->_data, $scale_data, 'png', $image);        return $image;    }    /**     * Get the visualization as a PNG.     *     * @return the visualization as a PNG     */    public function asPng()    {        $img = $this->_png();        // render and save it to variable        ob_start();        imagepng($img, null, 9, PNG_ALL_FILTERS);        imagedestroy($img);        $output = ob_get_contents();        ob_end_clean();        // base64 encode        $encoded = base64_encode($output);        return '<img src="data:image/png;base64,'. $encoded .'" />';    }    /**     * Saves as a PNG image to a file.     *     * @param string $file_name File name     *     * @return nothing     */    public function toFileAsPng($file_name)    {        $img = $this->_png();        $this->_toFile($file_name, 'image/png', 'png');        imagepng($img, null, 9, PNG_ALL_FILTERS);        imagedestroy($img);    }    /**     * Get the code for visualization with OpenLayers.     *     * @return the code for visualization with OpenLayers     */    public function asOl()    {        $this->init();        $scale_data = $this->_scaleDataSet($this->_data);        $output            = 'var options = {'                . 'projection: new OpenLayers.Projection("EPSG:900913"),'                . 'displayProjection: new OpenLayers.Projection("EPSG:4326"),'                . 'units: "m",'                . 'numZoomLevels: 18,'                . 'maxResolution: 156543.0339,'                . 'maxExtent: new OpenLayers.Bounds(-20037508, -20037508, 20037508, 20037508),'                . 'restrictedExtent: new OpenLayers.Bounds(-20037508, -20037508, 20037508, 20037508)'            . '};'            . 'var map = new OpenLayers.Map("openlayersmap", options);'            . 'var layerNone = new OpenLayers.Layer.Boxes("None", {isBaseLayer: true});'            . 'var layerMapnik = new OpenLayers.Layer.OSM.Mapnik("Mapnik");'            . 'var layerOsmarender = new OpenLayers.Layer.OSM.Osmarender("Osmarender");'            . 'var layerCycleMap = new OpenLayers.Layer.OSM.CycleMap("CycleMap");'            . 'map.addLayers([layerMapnik, layerOsmarender, layerCycleMap, layerNone]);'            . 'var vectorLayer = new OpenLayers.Layer.Vector("Data");'            . 'var bound;';        $output .= $this->_prepareDataSet($this->_data, $scale_data, 'ol', '');        $output .=              'map.addLayer(vectorLayer);'            . 'map.zoomToExtent(bound);'            . 'if (map.getZoom() < 2) {'                . 'map.zoomTo(2);'            . '}'            . 'map.addControl(new OpenLayers.Control.LayerSwitcher());'            . 'map.addControl(new OpenLayers.Control.MousePosition());';        return $output;    }    /**     * Saves as a PDF to a file.     *     * @param string $file_name File name     *     * @return nothing     */    public function toFileAsPdf($file_name)    {        $this->init();        include_once './libraries/tcpdf/tcpdf.php';        // create pdf        $pdf = new TCPDF('', 'pt', $GLOBALS['cfg']['PDFDefaultPageSize'], true, 'UTF-8', false);        // disable header and footer        $pdf->setPrintHeader(false);        $pdf->setPrintFooter(false);        //set auto page breaks        $pdf->SetAutoPageBreak(false);        // add a page        $pdf->AddPage();        $scale_data = $this->_scaleDataSet($this->_data);        $pdf = $this->_prepareDataSet($this->_data, $scale_data, 'pdf', $pdf);        // sanitize file name        $file_name = $this->_sanitizeName($file_name, 'pdf');        ob_clean();        $pdf->Output($file_name, 'D');    }    /**     * Calculates the scale, horizontal and vertical offset that should be used.     *     * @param array $data Row data     *     * @return an array containing the scale, x and y offsets     */    private function _scaleDataSet($data)    {        $min_max = array();        $border = 15;        // effective width and height of the plot        $plot_width = $this->_settings['width'] - 2 * $border;        $plot_height = $this->_settings['height'] - 2 * $border;        foreach ($data as $row) {            // Figure out the data type            $ref_data = $row[$this->_settings['spatialColumn']];            $type_pos = stripos($ref_data, '(');            $type = substr($ref_data, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $scale_data = $gis_obj->scaleRow($row[$this->_settings['spatialColumn']]);            // Upadate minimum/maximum values for x and y cordinates.            $c_maxX = (float) $scale_data['maxX'];            if (! isset($min_max['maxX']) || $c_maxX > $min_max['maxX']) {                $min_max['maxX'] = $c_maxX;            }            $c_minX = (float) $scale_data['minX'];            if (! isset($min_max['minX']) || $c_minX < $min_max['minX']) {                $min_max['minX'] = $c_minX;            }            $c_maxY = (float) $scale_data['maxY'];            if (! isset($min_max['maxY']) || $c_maxY > $min_max['maxY']) {                $min_max['maxY'] = $c_maxY;            }            $c_minY = (float) $scale_data['minY'];            if (! isset($min_max['minY']) || $c_minY < $min_max['minY']) {                $min_max['minY'] = $c_minY;            }        }        // scale the visualization        $x_ratio = ($min_max['maxX'] - $min_max['minX']) / $plot_width;        $y_ratio = ($min_max['maxY'] - $min_max['minY']) / $plot_height;        $ratio = ($x_ratio > $y_ratio) ? $x_ratio : $y_ratio;        $scale = ($ratio != 0) ? (1 / $ratio) : 1;        if ($x_ratio < $y_ratio) {            // center horizontally            $x = ($min_max['maxX'] + $min_max['minX'] - $plot_width / $scale) / 2;            // fit vertically            $y = $min_max['minY'] - ($border / $scale);        } else {            // fit horizontally            $x = $min_max['minX'] - ($border / $scale);            // center vertically            $y =($min_max['maxY'] + $min_max['minY'] - $plot_height / $scale) / 2;        }        return array(            'scale'  => $scale,            'x'      => $x,            'y'      => $y,            'minX'   => $min_max['minX'],            'maxX'   => $min_max['maxX'],            'minY'   => $min_max['minY'],            'maxY'   => $min_max['maxY'],            'height' => $this->_settings['height'],        );    }    /**     * Prepares and return the dataset as needed by the visualization.     *     * @param array  $data       Raw data     * @param array  $scale_data Data related to scaling     * @param string $format     Format of the visulaization     * @param image  $results    Image object in the case of png     *     * @return the formatted array of data.     */    private function _prepareDataSet($data, $scale_data, $format, $results)    {        $color_number = 0;        // loop through the rows        foreach ($data as $row) {            $index = $color_number % sizeof($this->_settings['colors']);            // Figure out the data type            $ref_data = $row[$this->_settings['spatialColumn']];            $type_pos = stripos($ref_data, '(');            $type = substr($ref_data, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $label = '';            if (isset($this->_settings['labelColumn'])                && isset($row[$this->_settings['labelColumn']])            ) {                $label = $row[$this->_settings['labelColumn']];            }            if ($format == 'svg') {                $results .= $gis_obj->prepareRowAsSvg(                    $row[$this->_settings['spatialColumn']], $label,                    $this->_settings['colors'][$index], $scale_data                );            } elseif ($format == 'png') {                $results = $gis_obj->prepareRowAsPng(                    $row[$this->_settings['spatialColumn']], $label,                    $this->_settings['colors'][$index], $scale_data, $results                );            } elseif ($format == 'pdf') {                $results = $gis_obj->prepareRowAsPdf(                    $row[$this->_settings['spatialColumn']], $label,                    $this->_settings['colors'][$index], $scale_data, $results                );            } elseif ($format == 'ol') {                $results .= $gis_obj->prepareRowAsOl(                    $row[$this->_settings['spatialColumn']], $row['srid'],                    $label, $this->_settings['colors'][$index], $scale_data                );            }            $color_number++;        }        return $results;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * TCPDF wrapper class. */require_once './libraries/tcpdf/tcpdf.php';/** * PDF font to use. */define('PMA_PDF_FONT', 'DejaVuSans');/** * PDF export base class providing basic configuration. */class PMA_PDF extends TCPDF{    var $footerset;    var $Alias = array();    public function __construct($orientation='P', $unit='mm', $format='A4', $unicode=true, $encoding='UTF-8', $diskcache=false)    {        parent::__construct();        $this->SetAuthor('phpMyAdmin ' . PMA_VERSION);        $this->AliasNbPages();        $this->AddFont('DejaVuSans', '', 'dejavusans.php');        $this->AddFont('DejaVuSans', 'B', 'dejavusansb.php');        $this->SetFont(PMA_PDF_FONT, '', 14);        $this->setFooterFont(array(PMA_PDF_FONT, '', 14));    }    /**     * This function must be named "Footer" to work with the TCPDF library     */    function Footer()    {        // Check if footer for this page already exists        if (!isset($this->footerset[$this->page])) {            $this->SetY(-15);            $this->SetFont(PMA_PDF_FONT, '', 14);            $this->Cell(0, 6, __('Page number:') . ' ' . $this->getAliasNumPage() . '/' .  $this->getAliasNbPages(), 'T', 0, 'C');            $this->Cell(0, 6, PMA_localisedDate(), 0, 1, 'R');            $this->SetY(20);            // set footerset            $this->footerset[$this->page] = 1;        }    }    /**     * Function to set alias which will be expanded on page rendering.     */    function SetAlias($name, $value)    {        $this->Alias[$this->UTF8ToUTF16BE($name)] = $this->UTF8ToUTF16BE($value);    }    /**     * Improved with alias expading.     */    function _putpages()    {        if (count($this->Alias) > 0) {            $nb = count($this->pages);            for ($n = 1;$n <= $nb;$n++) {                $this->pages[$n] = strtr($this->pages[$n], $this->Alias);            }        }        parent::_putpages();    }    /**     * Displays an error message     *     * @param string $error_message the error mesage     */    function Error($error_message = '')    {        include './libraries/header.inc.php';        PMA_Message::error(__('Error while creating PDF:') . ' ' . $error_message)->display();        include './libraries/footer.inc.php';    }    /**     * Sends file as a download to user.     */    function Download($filename)    {        $pdfData = $this->getPDFData();        PMA_download_header($filename, 'application/pdf', strlen($pdfData));        echo $pdfData;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam(true);/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: */    /**     * @package     BLOBStreaming     */    /**     * Core library.     */    require_once './libraries/common.inc.php';    /*     * @var     string  contains media type of BLOB reference     */    $mediaType = isset($_REQUEST['media_type']) ? $_REQUEST['media_type'] : null;    /*     * @var     string  indicates whether media type is of custom type     */    $customType = isset($_REQUEST['custom_type']) ? $_REQUEST['custom_type'] : false;    /*     * @var     string  contains BLOB reference     */    $bsReference = isset($_REQUEST['bs_reference']) ? $_REQUEST['bs_reference'] : null;    // if media type and BS reference are specified    if (isset($mediaType) && isset($bsReference)) {        if (isset($customType) && $customType) {            $bs_file_path = 'bs_disp_as_mime_type.php' . PMA_generate_common_url(array('reference' => $bsReference, 'c_type' => $mediaType));        } else {            // Get the BLOB streaming URL            $bs_file_path = PMA_BS_getURL($bsReference);            if (empty($bs_file_path)) {                die(__('No blob streaming server configured!'));            }        }            ?><html>    <head>    </head>    <body>            <?php            // supported media types            switch ($mediaType)            {                // audio content                case 'audio/mpeg':                    ?><embed width=620 height=100 src="<?php echo htmlspecialchars($bs_file_path); ?>" autostart=true></embed><?php                    break;                // video content                case 'application/x-flash-video':                case 'video/mpeg':                    ?><embed width=620 height=460 src="<?php echo htmlspecialchars($bs_file_path); ?>" autostart=true></embed><?php                    break;                default:                    // do nothing            }            ?>    </body></html>            <?php    } // end if (isset($mediaType) && isset($bsReference))?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * The Horde_Cipher_Blowfish:: class implements the Horde_Cipher interface * encryption data using the Blowfish algorithm. * * Copyright 2002-2009 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you * did not receive this file, see http://www.fsf.org/copyleft/lgpl.html. * * @author  Mike Cochrane <mike@graftonhall.co.nz> * @package Horde_Cipher */class Horde_Cipher_blowfish{    /**     * Pi Array     *     * @var array     */    protected $p = array(            0x243F6A88, 0x85A308D3, 0x13198A2E, 0x03707344,            0xA4093822, 0x299F31D0, 0x082EFA98, 0xEC4E6C89,            0x452821E6, 0x38D01377, 0xBE5466CF, 0x34E90C6C,            0xC0AC29B7, 0xC97C50DD, 0x3F84D5B5, 0xB5470917,            0x9216D5D9, 0x8979FB1B);    /**     * S Box (s1)     *     * @var array     */    protected $s1 = array(            0xD1310BA6, 0x98DFB5AC, 0x2FFD72DB, 0xD01ADFB7,            0xB8E1AFED, 0x6A267E96, 0xBA7C9045, 0xF12C7F99,            0x24A19947, 0xB3916CF7, 0x0801F2E2, 0x858EFC16,            0x636920D8, 0x71574E69, 0xA458FEA3, 0xF4933D7E,            0x0D95748F, 0x728EB658, 0x718BCD58, 0x82154AEE,            0x7B54A41D, 0xC25A59B5, 0x9C30D539, 0x2AF26013,            0xC5D1B023, 0x286085F0, 0xCA417918, 0xB8DB38EF,            0x8E79DCB0, 0x603A180E, 0x6C9E0E8B, 0xB01E8A3E,            0xD71577C1, 0xBD314B27, 0x78AF2FDA, 0x55605C60,            0xE65525F3, 0xAA55AB94, 0x57489862, 0x63E81440,            0x55CA396A, 0x2AAB10B6, 0xB4CC5C34, 0x1141E8CE,            0xA15486AF, 0x7C72E993, 0xB3EE1411, 0x636FBC2A,            0x2BA9C55D, 0x741831F6, 0xCE5C3E16, 0x9B87931E,            0xAFD6BA33, 0x6C24CF5C, 0x7A325381, 0x28958677,            0x3B8F4898, 0x6B4BB9AF, 0xC4BFE81B, 0x66282193,            0x61D809CC, 0xFB21A991, 0x487CAC60, 0x5DEC8032,            0xEF845D5D, 0xE98575B1, 0xDC262302, 0xEB651B88,            0x23893E81, 0xD396ACC5, 0x0F6D6FF3, 0x83F44239,            0x2E0B4482, 0xA4842004, 0x69C8F04A, 0x9E1F9B5E,            0x21C66842, 0xF6E96C9A, 0x670C9C61, 0xABD388F0,            0x6A51A0D2, 0xD8542F68, 0x960FA728, 0xAB5133A3,            0x6EEF0B6C, 0x137A3BE4, 0xBA3BF050, 0x7EFB2A98,            0xA1F1651D, 0x39AF0176, 0x66CA593E, 0x82430E88,            0x8CEE8619, 0x456F9FB4, 0x7D84A5C3, 0x3B8B5EBE,            0xE06F75D8, 0x85C12073, 0x401A449F, 0x56C16AA6,            0x4ED3AA62, 0x363F7706, 0x1BFEDF72, 0x429B023D,            0x37D0D724, 0xD00A1248, 0xDB0FEAD3, 0x49F1C09B,            0x075372C9, 0x80991B7B, 0x25D479D8, 0xF6E8DEF7,            0xE3FE501A, 0xB6794C3B, 0x976CE0BD, 0x04C006BA,            0xC1A94FB6, 0x409F60C4, 0x5E5C9EC2, 0x196A2463,            0x68FB6FAF, 0x3E6C53B5, 0x1339B2EB, 0x3B52EC6F,            0x6DFC511F, 0x9B30952C, 0xCC814544, 0xAF5EBD09,            0xBEE3D004, 0xDE334AFD, 0x660F2807, 0x192E4BB3,            0xC0CBA857, 0x45C8740F, 0xD20B5F39, 0xB9D3FBDB,            0x5579C0BD, 0x1A60320A, 0xD6A100C6, 0x402C7279,            0x679F25FE, 0xFB1FA3CC, 0x8EA5E9F8, 0xDB3222F8,            0x3C7516DF, 0xFD616B15, 0x2F501EC8, 0xAD0552AB,            0x323DB5FA, 0xFD238760, 0x53317B48, 0x3E00DF82,            0x9E5C57BB, 0xCA6F8CA0, 0x1A87562E, 0xDF1769DB,            0xD542A8F6, 0x287EFFC3, 0xAC6732C6, 0x8C4F5573,            0x695B27B0, 0xBBCA58C8, 0xE1FFA35D, 0xB8F011A0,            0x10FA3D98, 0xFD2183B8, 0x4AFCB56C, 0x2DD1D35B,            0x9A53E479, 0xB6F84565, 0xD28E49BC, 0x4BFB9790,            0xE1DDF2DA, 0xA4CB7E33, 0x62FB1341, 0xCEE4C6E8,            0xEF20CADA, 0x36774C01, 0xD07E9EFE, 0x2BF11FB4,            0x95DBDA4D, 0xAE909198, 0xEAAD8E71, 0x6B93D5A0,            0xD08ED1D0, 0xAFC725E0, 0x8E3C5B2F, 0x8E7594B7,            0x8FF6E2FB, 0xF2122B64, 0x8888B812, 0x900DF01C,            0x4FAD5EA0, 0x688FC31C, 0xD1CFF191, 0xB3A8C1AD,            0x2F2F2218, 0xBE0E1777, 0xEA752DFE, 0x8B021FA1,            0xE5A0CC0F, 0xB56F74E8, 0x18ACF3D6, 0xCE89E299,            0xB4A84FE0, 0xFD13E0B7, 0x7CC43B81, 0xD2ADA8D9,            0x165FA266, 0x80957705, 0x93CC7314, 0x211A1477,            0xE6AD2065, 0x77B5FA86, 0xC75442F5, 0xFB9D35CF,            0xEBCDAF0C, 0x7B3E89A0, 0xD6411BD3, 0xAE1E7E49,            0x00250E2D, 0x2071B35E, 0x226800BB, 0x57B8E0AF,            0x2464369B, 0xF009B91E, 0x5563911D, 0x59DFA6AA,            0x78C14389, 0xD95A537F, 0x207D5BA2, 0x02E5B9C5,            0x83260376, 0x6295CFA9, 0x11C81968, 0x4E734A41,            0xB3472DCA, 0x7B14A94A, 0x1B510052, 0x9A532915,            0xD60F573F, 0xBC9BC6E4, 0x2B60A476, 0x81E67400,            0x08BA6FB5, 0x571BE91F, 0xF296EC6B, 0x2A0DD915,            0xB6636521, 0xE7B9F9B6, 0xFF34052E, 0xC5855664,            0x53B02D5D, 0xA99F8FA1, 0x08BA4799, 0x6E85076A);    /**     * S Box (s2)     *     * @var array     */    protected $s2 = array(            0x4B7A70E9, 0xB5B32944, 0xDB75092E, 0xC4192623,            0xAD6EA6B0, 0x49A7DF7D, 0x9CEE60B8, 0x8FEDB266,            0xECAA8C71, 0x699A17FF, 0x5664526C, 0xC2B19EE1,            0x193602A5, 0x75094C29, 0xA0591340, 0xE4183A3E,            0x3F54989A, 0x5B429D65, 0x6B8FE4D6, 0x99F73FD6,            0xA1D29C07, 0xEFE830F5, 0x4D2D38E6, 0xF0255DC1,            0x4CDD2086, 0x8470EB26, 0x6382E9C6, 0x021ECC5E,            0x09686B3F, 0x3EBAEFC9, 0x3C971814, 0x6B6A70A1,            0x687F3584, 0x52A0E286, 0xB79C5305, 0xAA500737,            0x3E07841C, 0x7FDEAE5C, 0x8E7D44EC, 0x5716F2B8,            0xB03ADA37, 0xF0500C0D, 0xF01C1F04, 0x0200B3FF,            0xAE0CF51A, 0x3CB574B2, 0x25837A58, 0xDC0921BD,            0xD19113F9, 0x7CA92FF6, 0x94324773, 0x22F54701,            0x3AE5E581, 0x37C2DADC, 0xC8B57634, 0x9AF3DDA7,            0xA9446146, 0x0FD0030E, 0xECC8C73E, 0xA4751E41,            0xE238CD99, 0x3BEA0E2F, 0x3280BBA1, 0x183EB331,            0x4E548B38, 0x4F6DB908, 0x6F420D03, 0xF60A04BF,            0x2CB81290, 0x24977C79, 0x5679B072, 0xBCAF89AF,            0xDE9A771F, 0xD9930810, 0xB38BAE12, 0xDCCF3F2E,            0x5512721F, 0x2E6B7124, 0x501ADDE6, 0x9F84CD87,            0x7A584718, 0x7408DA17, 0xBC9F9ABC, 0xE94B7D8C,            0xEC7AEC3A, 0xDB851DFA, 0x63094366, 0xC464C3D2,            0xEF1C1847, 0x3215D908, 0xDD433B37, 0x24C2BA16,            0x12A14D43, 0x2A65C451, 0x50940002, 0x133AE4DD,            0x71DFF89E, 0x10314E55, 0x81AC77D6, 0x5F11199B,            0x043556F1, 0xD7A3C76B, 0x3C11183B, 0x5924A509,            0xF28FE6ED, 0x97F1FBFA, 0x9EBABF2C, 0x1E153C6E,            0x86E34570, 0xEAE96FB1, 0x860E5E0A, 0x5A3E2AB3,            0x771FE71C, 0x4E3D06FA, 0x2965DCB9, 0x99E71D0F,            0x803E89D6, 0x5266C825, 0x2E4CC978, 0x9C10B36A,            0xC6150EBA, 0x94E2EA78, 0xA5FC3C53, 0x1E0A2DF4,            0xF2F74EA7, 0x361D2B3D, 0x1939260F, 0x19C27960,            0x5223A708, 0xF71312B6, 0xEBADFE6E, 0xEAC31F66,            0xE3BC4595, 0xA67BC883, 0xB17F37D1, 0x018CFF28,            0xC332DDEF, 0xBE6C5AA5, 0x65582185, 0x68AB9802,            0xEECEA50F, 0xDB2F953B, 0x2AEF7DAD, 0x5B6E2F84,            0x1521B628, 0x29076170, 0xECDD4775, 0x619F1510,            0x13CCA830, 0xEB61BD96, 0x0334FE1E, 0xAA0363CF,            0xB5735C90, 0x4C70A239, 0xD59E9E0B, 0xCBAADE14,            0xEECC86BC, 0x60622CA7, 0x9CAB5CAB, 0xB2F3846E,            0x648B1EAF, 0x19BDF0CA, 0xA02369B9, 0x655ABB50,            0x40685A32, 0x3C2AB4B3, 0x319EE9D5, 0xC021B8F7,            0x9B540B19, 0x875FA099, 0x95F7997E, 0x623D7DA8,            0xF837889A, 0x97E32D77, 0x11ED935F, 0x16681281,            0x0E358829, 0xC7E61FD6, 0x96DEDFA1, 0x7858BA99,            0x57F584A5, 0x1B227263, 0x9B83C3FF, 0x1AC24696,            0xCDB30AEB, 0x532E3054, 0x8FD948E4, 0x6DBC3128,            0x58EBF2EF, 0x34C6FFEA, 0xFE28ED61, 0xEE7C3C73,            0x5D4A14D9, 0xE864B7E3, 0x42105D14, 0x203E13E0,            0x45EEE2B6, 0xA3AAABEA, 0xDB6C4F15, 0xFACB4FD0,            0xC742F442, 0xEF6ABBB5, 0x654F3B1D, 0x41CD2105,            0xD81E799E, 0x86854DC7, 0xE44B476A, 0x3D816250,            0xCF62A1F2, 0x5B8D2646, 0xFC8883A0, 0xC1C7B6A3,            0x7F1524C3, 0x69CB7492, 0x47848A0B, 0x5692B285,            0x095BBF00, 0xAD19489D, 0x1462B174, 0x23820E00,            0x58428D2A, 0x0C55F5EA, 0x1DADF43E, 0x233F7061,            0x3372F092, 0x8D937E41, 0xD65FECF1, 0x6C223BDB,            0x7CDE3759, 0xCBEE7460, 0x4085F2A7, 0xCE77326E,            0xA6078084, 0x19F8509E, 0xE8EFD855, 0x61D99735,            0xA969A7AA, 0xC50C06C2, 0x5A04ABFC, 0x800BCADC,            0x9E447A2E, 0xC3453484, 0xFDD56705, 0x0E1E9EC9,            0xDB73DBD3, 0x105588CD, 0x675FDA79, 0xE3674340,            0xC5C43465, 0x713E38D8, 0x3D28F89E, 0xF16DFF20,            0x153E21E7, 0x8FB03D4A, 0xE6E39F2B, 0xDB83ADF7);    /**     * S Box (s3)     *     * @var array     */    protected $s3 = array(            0xE93D5A68, 0x948140F7, 0xF64C261C, 0x94692934,            0x411520F7, 0x7602D4F7, 0xBCF46B2E, 0xD4A20068,            0xD4082471, 0x3320F46A, 0x43B7D4B7, 0x500061AF,            0x1E39F62E, 0x97244546, 0x14214F74, 0xBF8B8840,            0x4D95FC1D, 0x96B591AF, 0x70F4DDD3, 0x66A02F45,            0xBFBC09EC, 0x03BD9785, 0x7FAC6DD0, 0x31CB8504,            0x96EB27B3, 0x55FD3941, 0xDA2547E6, 0xABCA0A9A,            0x28507825, 0x530429F4, 0x0A2C86DA, 0xE9B66DFB,            0x68DC1462, 0xD7486900, 0x680EC0A4, 0x27A18DEE,            0x4F3FFEA2, 0xE887AD8C, 0xB58CE006, 0x7AF4D6B6,            0xAACE1E7C, 0xD3375FEC, 0xCE78A399, 0x406B2A42,            0x20FE9E35, 0xD9F385B9, 0xEE39D7AB, 0x3B124E8B,            0x1DC9FAF7, 0x4B6D1856, 0x26A36631, 0xEAE397B2,            0x3A6EFA74, 0xDD5B4332, 0x6841E7F7, 0xCA7820FB,            0xFB0AF54E, 0xD8FEB397, 0x454056AC, 0xBA489527,            0x55533A3A, 0x20838D87, 0xFE6BA9B7, 0xD096954B,            0x55A867BC, 0xA1159A58, 0xCCA92963, 0x99E1DB33,            0xA62A4A56, 0x3F3125F9, 0x5EF47E1C, 0x9029317C,            0xFDF8E802, 0x04272F70, 0x80BB155C, 0x05282CE3,            0x95C11548, 0xE4C66D22, 0x48C1133F, 0xC70F86DC,            0x07F9C9EE, 0x41041F0F, 0x404779A4, 0x5D886E17,            0x325F51EB, 0xD59BC0D1, 0xF2BCC18F, 0x41113564,            0x257B7834, 0x602A9C60, 0xDFF8E8A3, 0x1F636C1B,            0x0E12B4C2, 0x02E1329E, 0xAF664FD1, 0xCAD18115,            0x6B2395E0, 0x333E92E1, 0x3B240B62, 0xEEBEB922,            0x85B2A20E, 0xE6BA0D99, 0xDE720C8C, 0x2DA2F728,            0xD0127845, 0x95B794FD, 0x647D0862, 0xE7CCF5F0,            0x5449A36F, 0x877D48FA, 0xC39DFD27, 0xF33E8D1E,            0x0A476341, 0x992EFF74, 0x3A6F6EAB, 0xF4F8FD37,            0xA812DC60, 0xA1EBDDF8, 0x991BE14C, 0xDB6E6B0D,            0xC67B5510, 0x6D672C37, 0x2765D43B, 0xDCD0E804,            0xF1290DC7, 0xCC00FFA3, 0xB5390F92, 0x690FED0B,            0x667B9FFB, 0xCEDB7D9C, 0xA091CF0B, 0xD9155EA3,            0xBB132F88, 0x515BAD24, 0x7B9479BF, 0x763BD6EB,            0x37392EB3, 0xCC115979, 0x8026E297, 0xF42E312D,            0x6842ADA7, 0xC66A2B3B, 0x12754CCC, 0x782EF11C,            0x6A124237, 0xB79251E7, 0x06A1BBE6, 0x4BFB6350,            0x1A6B1018, 0x11CAEDFA, 0x3D25BDD8, 0xE2E1C3C9,            0x44421659, 0x0A121386, 0xD90CEC6E, 0xD5ABEA2A,            0x64AF674E, 0xDA86A85F, 0xBEBFE988, 0x64E4C3FE,            0x9DBC8057, 0xF0F7C086, 0x60787BF8, 0x6003604D,            0xD1FD8346, 0xF6381FB0, 0x7745AE04, 0xD736FCCC,            0x83426B33, 0xF01EAB71, 0xB0804187, 0x3C005E5F,            0x77A057BE, 0xBDE8AE24, 0x55464299, 0xBF582E61,            0x4E58F48F, 0xF2DDFDA2, 0xF474EF38, 0x8789BDC2,            0x5366F9C3, 0xC8B38E74, 0xB475F255, 0x46FCD9B9,            0x7AEB2661, 0x8B1DDF84, 0x846A0E79, 0x915F95E2,            0x466E598E, 0x20B45770, 0x8CD55591, 0xC902DE4C,            0xB90BACE1, 0xBB8205D0, 0x11A86248, 0x7574A99E,            0xB77F19B6, 0xE0A9DC09, 0x662D09A1, 0xC4324633,            0xE85A1F02, 0x09F0BE8C, 0x4A99A025, 0x1D6EFE10,            0x1AB93D1D, 0x0BA5A4DF, 0xA186F20F, 0x2868F169,            0xDCB7DA83, 0x573906FE, 0xA1E2CE9B, 0x4FCD7F52,            0x50115E01, 0xA70683FA, 0xA002B5C4, 0x0DE6D027,            0x9AF88C27, 0x773F8641, 0xC3604C06, 0x61A806B5,            0xF0177A28, 0xC0F586E0, 0x006058AA, 0x30DC7D62,            0x11E69ED7, 0x2338EA63, 0x53C2DD94, 0xC2C21634,            0xBBCBEE56, 0x90BCB6DE, 0xEBFC7DA1, 0xCE591D76,            0x6F05E409, 0x4B7C0188, 0x39720A3D, 0x7C927C24,            0x86E3725F, 0x724D9DB9, 0x1AC15BB4, 0xD39EB8FC,            0xED545578, 0x08FCA5B5, 0xD83D7CD3, 0x4DAD0FC4,            0x1E50EF5E, 0xB161E6F8, 0xA28514D9, 0x6C51133C,            0x6FD5C7E7, 0x56E14EC4, 0x362ABFCE, 0xDDC6C837,            0xD79A3234, 0x92638212, 0x670EFA8E, 0x406000E0);    /**     * S Box (s4)     *     * @var array     */    protected $s4 = array(            0x3A39CE37, 0xD3FAF5CF, 0xABC27737, 0x5AC52D1B,            0x5CB0679E, 0x4FA33742, 0xD3822740, 0x99BC9BBE,            0xD5118E9D, 0xBF0F7315, 0xD62D1C7E, 0xC700C47B,            0xB78C1B6B, 0x21A19045, 0xB26EB1BE, 0x6A366EB4,            0x5748AB2F, 0xBC946E79, 0xC6A376D2, 0x6549C2C8,            0x530FF8EE, 0x468DDE7D, 0xD5730A1D, 0x4CD04DC6,            0x2939BBDB, 0xA9BA4650, 0xAC9526E8, 0xBE5EE304,            0xA1FAD5F0, 0x6A2D519A, 0x63EF8CE2, 0x9A86EE22,            0xC089C2B8, 0x43242EF6, 0xA51E03AA, 0x9CF2D0A4,            0x83C061BA, 0x9BE96A4D, 0x8FE51550, 0xBA645BD6,            0x2826A2F9, 0xA73A3AE1, 0x4BA99586, 0xEF5562E9,            0xC72FEFD3, 0xF752F7DA, 0x3F046F69, 0x77FA0A59,            0x80E4A915, 0x87B08601, 0x9B09E6AD, 0x3B3EE593,            0xE990FD5A, 0x9E34D797, 0x2CF0B7D9, 0x022B8B51,            0x96D5AC3A, 0x017DA67D, 0xD1CF3ED6, 0x7C7D2D28,            0x1F9F25CF, 0xADF2B89B, 0x5AD6B472, 0x5A88F54C,            0xE029AC71, 0xE019A5E6, 0x47B0ACFD, 0xED93FA9B,            0xE8D3C48D, 0x283B57CC, 0xF8D56629, 0x79132E28,            0x785F0191, 0xED756055, 0xF7960E44, 0xE3D35E8C,            0x15056DD4, 0x88F46DBA, 0x03A16125, 0x0564F0BD,            0xC3EB9E15, 0x3C9057A2, 0x97271AEC, 0xA93A072A,            0x1B3F6D9B, 0x1E6321F5, 0xF59C66FB, 0x26DCF319,            0x7533D928, 0xB155FDF5, 0x03563482, 0x8ABA3CBB,            0x28517711, 0xC20AD9F8, 0xABCC5167, 0xCCAD925F,            0x4DE81751, 0x3830DC8E, 0x379D5862, 0x9320F991,            0xEA7A90C2, 0xFB3E7BCE, 0x5121CE64, 0x774FBE32,            0xA8B6E37E, 0xC3293D46, 0x48DE5369, 0x6413E680,            0xA2AE0810, 0xDD6DB224, 0x69852DFD, 0x09072166,            0xB39A460A, 0x6445C0DD, 0x586CDECF, 0x1C20C8AE,            0x5BBEF7DD, 0x1B588D40, 0xCCD2017F, 0x6BB4E3BB,            0xDDA26A7E, 0x3A59FF45, 0x3E350A44, 0xBCB4CDD5,            0x72EACEA8, 0xFA6484BB, 0x8D6612AE, 0xBF3C6F47,            0xD29BE463, 0x542F5D9E, 0xAEC2771B, 0xF64E6370,            0x740E0D8D, 0xE75B1357, 0xF8721671, 0xAF537D5D,            0x4040CB08, 0x4EB4E2CC, 0x34D2466A, 0x0115AF84,            0xE1B00428, 0x95983A1D, 0x06B89FB4, 0xCE6EA048,            0x6F3F3B82, 0x3520AB82, 0x011A1D4B, 0x277227F8,            0x611560B1, 0xE7933FDC, 0xBB3A792B, 0x344525BD,            0xA08839E1, 0x51CE794B, 0x2F32C9B7, 0xA01FBAC9,            0xE01CC87E, 0xBCC7D1F6, 0xCF0111C3, 0xA1E8AAC7,            0x1A908749, 0xD44FBD9A, 0xD0DADECB, 0xD50ADA38,            0x0339C32A, 0xC6913667, 0x8DF9317C, 0xE0B12B4F,            0xF79E59B7, 0x43F5BB3A, 0xF2D519FF, 0x27D9459C,            0xBF97222C, 0x15E6FC2A, 0x0F91FC71, 0x9B941525,            0xFAE59361, 0xCEB69CEB, 0xC2A86459, 0x12BAA8D1,            0xB6C1075E, 0xE3056A0C, 0x10D25065, 0xCB03A442,            0xE0EC6E0E, 0x1698DB3B, 0x4C98A0BE, 0x3278E964,            0x9F1F9532, 0xE0D392DF, 0xD3A0342B, 0x8971F21E,            0x1B0A7441, 0x4BA3348C, 0xC5BE7120, 0xC37632D8,            0xDF359F8D, 0x9B992F2E, 0xE60B6F47, 0x0FE3F11D,            0xE54CDA54, 0x1EDAD891, 0xCE6279CF, 0xCD3E7E6F,            0x1618B166, 0xFD2C1D05, 0x848FD2C5, 0xF6FB2299,            0xF523F357, 0xA6327623, 0x93A83531, 0x56CCCD02,            0xACF08162, 0x5A75EBB5, 0x6E163697, 0x88D273CC,            0xDE966292, 0x81B949D0, 0x4C50901B, 0x71C65614,            0xE6C6C7BD, 0x327A140A, 0x45E1D006, 0xC3F27B9A,            0xC9AA53FD, 0x62A80F00, 0xBB25BFE2, 0x35BDD2F6,            0x71126905, 0xB2040222, 0xB6CBCF7C, 0xCD769C2B,            0x53113EC0, 0x1640E3D3, 0x38ABBD60, 0x2547ADF0,            0xBA38209C, 0xF746CE76, 0x77AFA1C5, 0x20756060,            0x85CBFE4E, 0x8AE88DD8, 0x7AAAF9B0, 0x4CF9AA7E,            0x1948C25C, 0x02FB8A8C, 0x01C36AE4, 0xD6EBE1F9,            0x90D4F869, 0xA65CDEA0, 0x3F09252D, 0xC208E69F,            0xB74E6132, 0xCE77E25B, 0x578FDFE3, 0x3AC372E6);    /**     * The number of rounds to do     *     * @var integer     */    protected $_rounds = 16;    /**     * Set the key to be used for en/decryption.     *     * @param string $key  The key to use.     * @return bool     */    public function setKey($key)    {        $key = array_values(unpack('C*', $key));        $keyLen = count($key);        if ($keyLen == 0) {            return false;        }        $keyPos = $keyXor = 0;        for ($i = 0, $iMax = count($this->p); $i < $iMax; ++$i) {            for ($t = 0; $t < 4; $t++) {                $keyXor = ($keyXor << 8) | (($key[$keyPos]) & 0x0ff);                if (++$keyPos == $keyLen) {                    $keyPos = 0;                }            }            $this->p[$i] = $this->p[$i] ^ $keyXor;        }        $encZero = array('L' => 0, 'R' => 0);        for ($i = 0; $i + 1 < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->p[$i] = $encZero['L'];          $this->p[$i + 1] = $encZero['R'];        }        $iMax = count($this->s1);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s1[$i] = $encZero['L'];          $this->s1[$i + 1] = $encZero['R'];        }        $iMax = count($this->s2);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s2[$i] = $encZero['L'];          $this->s2[$i + 1] = $encZero['R'];        }        $iMax = count($this->s3);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s3[$i] = $encZero['L'];          $this->s3[$i + 1] = $encZero['R'];        }        $iMax = count($this->s4);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s4[$i] = $encZero['L'];          $this->s4[$i + 1] = $encZero['R'];        }    }    /**     * Encrypt a block of data.     *     * @param string $block      The data to encrypt.     * @param string $key        The key to use.     *     * @return string  The encrypted output.     */    public function encryptBlock($block, $key = null)    {        if (!is_null($key)) {            $this->setKey($key);        }        list($L, $R) = array_values(unpack('N*', $block));        $parts = $this->_encryptBlock($L, $R);        return pack('NN', $parts['L'], $parts['R']);    }    /**     * Encrypt left and right halves of a block of data.     *     * @param integer $L  Left half of the data.     * @param integer $R  Right half of the data.     *     * @return array  A hash, with keys 'L' and 'R', and the encrypted data as     *                the values.     */    protected function _encryptBlock($L, $R)    {        $L ^= $this->p[0];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[1];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[2];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[3];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[4];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[5];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[6];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[7];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[8];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[9];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[10];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[11];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[12];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[13];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[14];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[15];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[16];        $R ^= $this->p[17];        return array('L' => $R, 'R' => $L);    }    /**     * Decrypt a block of data.     *     * @param string $block  The data to decrypt.     * @param string $key    The key to use.     *     * @return string  The decrypted output.     */    public function decryptBlock($block, $key = null)    {        if (!is_null($key)) {            $this->setKey($key);        }// change for phpMyAdmin        $L = null;        $R = null;        $retarray = array_values(unpack('N*', $block));        if (isset($retarray[0])) {            $L = $retarray[0];        }        if (isset($retarray[1])) {            $R = $retarray[1];        }// end change for phpMyAdmin        $L ^= $this->p[17];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[16];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[15];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[14];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[13];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[12];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[11];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[10];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[9];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[8];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[7];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[6];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[5];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[4];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[3];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[2];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[1];        return pack("NN", $R ^ $this->p[0], $L);    }}// higher-level functions:/** * Encryption using blowfish algorithm * * @param string  original data * @param string  the secret * * @return  string  the encrypted result * * @access  public * */function PMA_blowfish_encrypt($data, $secret){    $pma_cipher = new Horde_Cipher_blowfish;    $encrypt = '';    $mod = strlen($data) % 8;    if ($mod > 0) {        $data .= str_repeat("\0", 8 - $mod);    }    foreach (str_split($data, 8) as $chunk) {        $encrypt .= $pma_cipher->encryptBlock($chunk, $secret);    }    return base64_encode($encrypt);}/** * Decryption using blowfish algorithm * * @param string  encrypted data * @param string  the secret * * @return  string  original data * * @access  public * */function PMA_blowfish_decrypt($encdata, $secret){    $pma_cipher = new Horde_Cipher_blowfish;    $decrypt = '';    $data = base64_decode($encdata);    foreach (str_split($data, 8) as $chunk) {        $decrypt .= $pma_cipher->decryptBlock($chunk, $secret);    }    return trim($decrypt);}?>
<?php/** * ESRI Shape file import plugin for phpMyAdmin * * @package PhpMyAdmin-Import * @subpackage ESRI_Shape */if (! defined('PHPMYADMIN')) {    exit;}// Drizzle does not suppost GIS data typesif (PMA_DRIZZLE) {    return;}if (isset($plugin_list)) {    $plugin_list['shp'] = array(        'text' => __('ESRI Shape File'),        'extension' => 'shp',        'options' => array(),        'options_text' => __('Options'),    );} else {    if ((int) ini_get('memory_limit') < 512) {        @ini_set('memory_limit', '512M');    }    @set_time_limit(300);    // Append the bfShapeFiles directory to the include path variable    set_include_path(get_include_path() . PATH_SEPARATOR . getcwd() . '/libraries/bfShapeFiles/');    include_once './libraries/bfShapeFiles/ShapeFile.lib.php';    $GLOBALS['finished'] = false;    $buffer = '';    $eof = false;    // Returns specified number of bytes from the buffer.    // Buffer automatically fetches next chunk of data when the buffer falls short.    // Sets $eof when $GLOBALS['finished'] is set and the buffer falls short.    function readFromBuffer($length){        global $buffer, $eof;        if (strlen($buffer) < $length) {            if ($GLOBALS['finished']) {                $eof = true;            } else {                $buffer .= PMA_importGetNextChunk();            }        }        $result = substr($buffer, 0, $length);        $buffer = substr($buffer, $length);        return $result;    }    /**     * This class extends ShapeFile class to cater the following phpMyAdmin     * specific requirements.     * 1) To load data from .dbf file only when the dBase extension is available.     * 2) To use PMA_importGetNextChunk() functionality to read data, rather than     *    reading directly from a file. Using readFromBuffer() in place of fread().     *    This makes it possible to use compressions.     */    class PMA_ShapeFile extends ShapeFile    {        function _isDbaseLoaded()        {            return extension_loaded('dbase');        }        function loadFromFile($FileName)        {            $this->_loadHeaders();            $this->_loadRecords();            if ($this->_isDbaseLoaded()) {                $this->_closeDBFFile();            }        }        function _loadHeaders()        {            readFromBuffer(24);            $this->fileLength = loadData("N", readFromBuffer(4));            readFromBuffer(4);            $this->shapeType = loadData("V", readFromBuffer(4));            $this->boundingBox = array();            $this->boundingBox["xmin"] = loadData("d", readFromBuffer(8));            $this->boundingBox["ymin"] = loadData("d", readFromBuffer(8));            $this->boundingBox["xmax"] = loadData("d", readFromBuffer(8));            $this->boundingBox["ymax"] = loadData("d", readFromBuffer(8));            if ($this->_isDbaseLoaded() && $this->_openDBFFile()) {                $this->DBFHeader = $this->_loadDBFHeader();            }        }        function _loadRecords()        {            global $eof;            readFromBuffer(32);            while (true) {                $record = new PMA_ShapeRecord(-1);                $record->loadFromFile($this->SHPFile, $this->DBFFile);                if ($record->lastError != "") {                    return false;                }                if ($eof) {                    break;                }                $this->records[] = $record;            }        }    }    /**     * This class extends ShapeRecord class to cater the following phpMyAdmin     * specific requirements.     * 1) To load data from .dbf file only when the dBase extension is available.     * 2) To use PMA_importGetNextChunk() functionality to read data, rather than     *    reading directly from a file. Using readFromBuffer() in place of fread().     *    This makes it possible to use compressions.     */    class PMA_ShapeRecord extends ShapeRecord    {        function loadFromFile(&$SHPFile, &$DBFFile)        {            $this->DBFFile = $DBFFile;            $this->_loadHeaders();            switch ($this->shapeType) {            case 0:                $this->_loadNullRecord();                break;            case 1:                $this->_loadPointRecord();                break;            case 3:                $this->_loadPolyLineRecord();                break;            case 5:                $this->_loadPolygonRecord();                break;            case 8:                $this->_loadMultiPointRecord();                break;            default:                $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));                break;            }            if (extension_loaded('dbase') && isset($this->DBFFile)) {                $this->_loadDBFData();            }        }        function _loadHeaders()        {            $this->recordNumber = loadData("N", readFromBuffer(4));            //We read the length of the record            $tmp = loadData("N", readFromBuffer(4));            $this->shapeType = loadData("V", readFromBuffer(4));        }        function _loadPoint()        {            $data = array();            $data["x"] = loadData("d", readFromBuffer(8));            $data["y"] = loadData("d", readFromBuffer(8));            return $data;        }        function _loadMultiPointRecord()        {            $this->SHPData = array();            $this->SHPData["xmin"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymin"] = loadData("d", readFromBuffer(8));            $this->SHPData["xmax"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymax"] = loadData("d", readFromBuffer(8));            $this->SHPData["numpoints"] = loadData("V", readFromBuffer(4));            for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {                $this->SHPData["points"][] = $this->_loadPoint();            }        }        function _loadPolyLineRecord()        {            $this->SHPData = array();            $this->SHPData["xmin"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymin"] = loadData("d", readFromBuffer(8));            $this->SHPData["xmax"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymax"] = loadData("d", readFromBuffer(8));            $this->SHPData["numparts"]  = loadData("V", readFromBuffer(4));            $this->SHPData["numpoints"] = loadData("V", readFromBuffer(4));            for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {                $this->SHPData["parts"][$i] = loadData("V", readFromBuffer(4));            }            $readPoints = 0;            reset($this->SHPData["parts"]);            while (list($partIndex, $partData) = each($this->SHPData["parts"])) {                if (! isset($this->SHPData["parts"][$partIndex]["points"])                    || !is_array($this->SHPData["parts"][$partIndex]["points"])                ) {                    $this->SHPData["parts"][$partIndex] = array();                    $this->SHPData["parts"][$partIndex]["points"] = array();                }                while (! in_array($readPoints, $this->SHPData["parts"])                && ($readPoints < ($this->SHPData["numpoints"]))                ) {                    $this->SHPData["parts"][$partIndex]["points"][] = $this->_loadPoint();                    $readPoints++;                }            }        }    }    $shp = new PMA_ShapeFile(1);    // If the zip archive has more than one file,    // get the correct content to the buffer from .shp file.    if ($compression == 'application/zip' && PMA_getNoOfFilesInZip($import_file) > 1) {        $zip_content =  PMA_getZipContents($import_file, '/^.*\.shp$/i');        $GLOBALS['import_text'] = $zip_content['data'];    }    $temp_dbf_file = false;    // We need dbase extension to handle .dbf file    if (extension_loaded('dbase')) {        // If we can extract the zip archive to 'TempDir'        // and use the files in it for import        if ($compression == 'application/zip'            && ! empty($cfg['TempDir'])            && is_writable($cfg['TempDir'])        ) {            $dbf_file_name = PMA_findFileFromZipArchive('/^.*\.dbf$/i', $import_file);            // If the corresponding .dbf file is in the zip archive            if ($dbf_file_name) {                // Extract the .dbf file and point to it.                $extracted =  PMA_zipExtract(                    $import_file,                    realpath($cfg['TempDir']),                    array($dbf_file_name)                );                if ($extracted) {                    $dbf_file_path = realpath($cfg['TempDir'])                        . (PMA_IS_WINDOWS ? '\\' : '/') . $dbf_file_name;                    $temp_dbf_file = true;                    // Replace the .dbf with .*, as required by the bsShapeFiles library.                    $file_name = substr($dbf_file_path, 0, strlen($dbf_file_path) - 4) . '.*';                    $shp->FileName = $file_name;                }            }        }        // If file is in UploadDir, use .dbf file in the same UploadDir        // to load extra data.        elseif (! empty($local_import_file)            && ! empty($cfg['UploadDir'])            && $compression == 'none'        ) {            // Replace the .shp with .*,            // so the bsShapeFiles library correctly locates .dbf file.            $file_name = substr($import_file, 0, strlen($import_file) - 4) . '.*';            $shp->FileName = $file_name;        }    }    // Load data    $shp->loadFromFile('');    if ($shp->lastError != "") {        $error = true;        $message = PMA_Message::error(__('There was an error importing the ESRI shape file: "%s".'));        $message->addParam($shp->lastError);        return;    }    // Delete the .dbf file extracted to 'TempDir'    if ($temp_dbf_file) {        unlink($dbf_file_path);    }    $esri_types = array(        0  => 'Null Shape',        1  => 'Point',        3  => 'PolyLine',        5  => 'Polygon',        8  => 'MultiPoint',        11 => 'PointZ',        13 => 'PolyLineZ',        15 => 'PolygonZ',        18 => 'MultiPointZ',        21 => 'PointM',        23 => 'PolyLineM',        25 => 'PolygonM',        28 => 'MultiPointM',        31 => 'MultiPatch',    );    include_once './libraries/gis/pma_gis_geometry.php';    switch ($shp->shapeType) {    // ESRI Null Shape    case 0:        $gis_obj = null;        break;    // ESRI Point    case 1:        include_once './libraries/gis/pma_gis_point.php';        $gis_obj = PMA_GIS_Point::singleton();        break;    // ESRI PolyLine    case 3:        include_once './libraries/gis/pma_gis_multilinestring.php';        $gis_obj = PMA_GIS_Multilinestring::singleton();        break;    // ESRI Polygon    case 5:        include_once './libraries/gis/pma_gis_multipolygon.php';        $gis_obj = PMA_GIS_Multipolygon::singleton();        break;    // ESRI MultiPoint    case 8:        include_once './libraries/gis/pma_gis_multipoint.php';        $gis_obj = PMA_GIS_Multipoint::singleton();        break;    default:        $error = true;        if (! isset($esri_types[$shp->shapeType])) {            $message = PMA_Message::error(__('You tried to import an invalid file or the imported file contains invalid data'));        } else {            $message = PMA_Message::error(__('MySQL Spatial Extension does not support ESRI type "%s".'));            $message->addParam($param);        }        return;    }    $num_rows = count($shp->records);    // If .dbf file is loaded, the number of extra data columns    $num_data_cols = isset($shp->DBFHeader) ? count($shp->DBFHeader) : 0;    $rows = array();    $col_names = array();    if ($num_rows != 0) {        foreach ($shp->records as $record) {            $tempRow = array();            if ($gis_obj == null) {                $tempRow[] = null;            } else {                $tempRow[] = "GeomFromText('" . $gis_obj->getShape($record->SHPData) . "')";            }            if (isset($shp->DBFHeader)) {                foreach ($shp->DBFHeader as $c) {                    $cell = trim($record->DBFData[$c[0]]);                    if (! strcmp($cell, '')) {                        $cell = 'NULL';                    }                    $tempRow[] = $cell;                }            }            $rows[] = $tempRow;        }    }    if (count($rows) == 0) {        $error = true;        $message = PMA_Message::error(__('The imported file does not contain any data'));        return;    }    // Column names for spatial column and the rest of the columns,    // if they are available    $col_names[] = 'SPATIAL';    for ($n = 0; $n < $num_data_cols; $n++) {        $col_names[] = $shp->DBFHeader[$n][0];    }    // Set table name based on the number of tables    if (strlen($db)) {        $result = PMA_DBI_fetch_result('SHOW TABLES');        $table_name = 'TABLE '.(count($result) + 1);    } else {        $table_name = 'TBL_NAME';    }    $tables = array(array($table_name, $col_names, $rows));    // Use data from shape file to chose best-fit MySQL types for each column    $analyses = array();    $analyses[] = PMA_analyzeTable($tables[0]);    $table_no = 0; $spatial_col = 0;    $analyses[$table_no][TYPES][$spatial_col] = GEOMETRY;    $analyses[$table_no][FORMATTEDSQL][$spatial_col] = true;    // Set database name to the currently selected one, if applicable    if (strlen($db)) {        $db_name = $db;        $options = array('create_db' => false);    } else {        $db_name = 'SHP_DB';        $options = null;    }    // Created and execute necessary SQL statements from data    $null_param = null;    PMA_buildSQL($db_name, $tables, $analyses, $null_param, $options);    unset($tables);    unset($analyses);    $finished = true;    $error = false;    // Commit any possible data in buffers    PMA_importRunQuery();}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface for the zip extension * @package    phpMyAdmin *//** * Gets zip file contents * * @param string $file           zip file * @param string $specific_entry regular expression to match a file * * @return array ($error_message, $file_data); $error_message *                  is empty if no error */function PMA_getZipContents($file, $specific_entry = null){    $error_message = '';    $file_data = '';    $zip_handle = zip_open($file);    if (is_resource($zip_handle)) {        $first_zip_entry = zip_read($zip_handle);        if (false === $first_zip_entry) {            $error_message = __('No files found inside ZIP archive!');        } else {            /* Is the the zip really an ODS file? */            $read = zip_entry_read($first_zip_entry);            $ods_mime = 'application/vnd.oasis.opendocument.spreadsheet';            if (!strcmp($ods_mime, $read)) {                $specific_entry = '/^content\.xml$/';            }            if (isset($specific_entry)) {                /* Return the correct contents, not just the first entry */                for ( ; ; ) {                    $entry = zip_read($zip_handle);                    if (is_resource($entry)) {                        if (preg_match($specific_entry, zip_entry_name($entry))) {                            zip_entry_open($zip_handle, $entry, 'r');                            $file_data = zip_entry_read($entry, zip_entry_filesize($entry));                            zip_entry_close($entry);                            break;                        }                    } else {                        /**                         * Either we have reached the end of the zip and still                         * haven't found $specific_entry or there was a parsing                         * error that we must display                         */                        if ($entry === false) {                            $error_message = __('Error in ZIP archive:') . ' Could not find "' . $specific_entry . '"';                        } else {                            $error_message = __('Error in ZIP archive:') . ' ' . PMA_getZipError($zip_handle);                        }                        break;                    }                }            } else {                zip_entry_open($zip_handle, $first_zip_entry, 'r');                /* File pointer has already been moved, so include what was read above */                $file_data = $read;                $file_data .= zip_entry_read($first_zip_entry, zip_entry_filesize($first_zip_entry));                zip_entry_close($first_zip_entry);            }        }    } else {        $error_message = __('Error in ZIP archive:') . ' ' . PMA_getZipError($zip_handle);    }    zip_close($zip_handle);    return (array('error' => $error_message, 'data' => $file_data));}/** * Returns the file name of the first file that matches the given $file_regexp. * * @param string $file_regexp regular expression for the file name to match * @param string $file        zip archive * * @return string the file name of the first file that matches the given regexp */function PMA_findFileFromZipArchive ($file_regexp, $file){    $zip_handle = zip_open($file);    $found = false;    if (is_resource($zip_handle)) {        $entry = zip_read($zip_handle);        while (is_resource($entry)) {            if (preg_match($file_regexp, zip_entry_name($entry))) {                $file_name = zip_entry_name($entry);                zip_close($zip_handle);                return $file_name;            }            $entry = zip_read($zip_handle);        }    }    zip_close($zip_handle);    return false;}/** * Returns the number of files in the zip archive. * * @param string $file zip archive * * @return int the number of files in the zip archive */function PMA_getNoOfFilesInZip($file){    $count = 0;    $zip_handle = zip_open($file);    $found = false;    if (is_resource($zip_handle)) {        $entry = zip_read($zip_handle);        while (is_resource($entry)) {            $count++;            $entry = zip_read($zip_handle);        }    }    zip_close($zip_handle);    return $count;}/** * Extracts a set of files from the given zip archive to a given destinations. * * @param string $zip_path    path to the zip archive * @param string $destination destination to extract files * @param array  $entries     files in archive that should be extracted * * @return bool true on sucess, false otherwise */function PMA_zipExtract($zip_path, $destination, $entries){    $zip = new ZipArchive;    if ($zip->open($zip_path) === true) {        $zip->extractTo($destination, $entries);        $zip->close();        return true;    }    return false;}/**  * Gets zip error message  *  * @param integer $code error code  *  * @return string error message */function PMA_getZipError($code){    // I don't think this needs translation    switch ($code) {    case ZIPARCHIVE::ER_MULTIDISK:        $message = 'Multi-disk zip archives not supported';        break;    case ZIPARCHIVE::ER_READ:        $message = 'Read error';        break;    case ZIPARCHIVE::ER_CRC:        $message = 'CRC error';        break;    case ZIPARCHIVE::ER_NOZIP:        $message = 'Not a zip archive';        break;    case ZIPARCHIVE::ER_INCONS:        $message = 'Zip archive inconsistent';        break;    default:        $message = $code;    }    return $message;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * searchs the entire database * * @todo    make use of UNION when searching multiple tables * @todo    display executed query, optional? * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'db_search.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';/** * Gets some core libraries and send headers */require './libraries/db_common.inc.php';/** * init */// If config variable $GLOBALS['cfg']['Usedbsearch'] is on false : exit.if (! $GLOBALS['cfg']['UseDbSearch']) {    PMA_mysqlDie(__('Access denied'), '', false, $err_url);} // end if$url_query .= '&amp;goto=db_search.php';$url_params['goto'] = 'db_search.php';/** * @global array list of tables from the current database * but do not clash with $tables coming from db_info.inc.php */$tables_names_only = PMA_DBI_get_tables($GLOBALS['db']);$search_options = array(    '1' => __('at least one of the words'),    '2' => __('all words'),    '3' => __('the exact phrase'),    '4' => __('as regular expression'),);if (empty($_REQUEST['search_option']) || ! is_string($_REQUEST['search_option']) || ! array_key_exists($_REQUEST['search_option'], $search_options)) {    $search_option = 1;    unset($_REQUEST['submit_search']);} else {    $search_option = (int) $_REQUEST['search_option'];    $option_str = $search_options[$_REQUEST['search_option']];}if (empty($_REQUEST['search_str']) || ! is_string($_REQUEST['search_str'])) {    unset($_REQUEST['submit_search']);    $searched = '';} else {    $searched = htmlspecialchars($_REQUEST['search_str']);    // For "as regular expression" (search option 4), we should not treat    // this as an expression that contains a LIKE (second parameter of    // PMA_sqlAddSlashes()).    //    // Usage example: If user is seaching for a literal $ in a regexp search,    // he should enter \$ as the value.    $search_str = PMA_sqlAddSlashes($_REQUEST['search_str'], ($search_option == 4 ? false : true));}$tables_selected = array();if (empty($_REQUEST['table_select']) || ! is_array($_REQUEST['table_select'])) {    unset($_REQUEST['submit_search']);} elseif (! isset($_REQUEST['selectall']) && ! isset($_REQUEST['unselectall'])) {    $tables_selected = array_intersect($_REQUEST['table_select'], $tables_names_only);}if (isset($_REQUEST['selectall'])) {    $tables_selected = $tables_names_only;} elseif (isset($_REQUEST['unselectall'])) {    $tables_selected = array();}if (empty($_REQUEST['field_str']) || ! is_string($_REQUEST['field_str'])) {    unset($field_str);} else {    $field_str = PMA_sqlAddSlashes($_REQUEST['field_str'], true);}/** * Displays top links if we are not in an Ajax request */$sub_part = '';if ( $GLOBALS['is_ajax_request'] != true) {    include './libraries/db_info.inc.php';    echo '<div id="searchresults">';}/** * 1. Main search form has been submitted */if (isset($_REQUEST['submit_search'])) {    /**     * Builds the SQL search query     *     * @todo    can we make use of fulltextsearch IN BOOLEAN MODE for this?     * PMA_backquote     * PMA_DBI_free_result     * PMA_DBI_fetch_assoc     * $GLOBALS['db']     * explode     * count     * strlen     * @param string   the table name     * @param string   restrict the search to this field     * @param string   the string to search     * @param integer  type of search (1 -> 1 word at least, 2 -> all words,     *                                   3 -> exact string, 4 -> regexp)     *     * @return  array    3 SQL querys (for count, display and delete results)     */    function PMA_getSearchSqls($table, $field, $search_str, $search_option)    {        // Statement types        $sqlstr_select = 'SELECT';        $sqlstr_delete = 'DELETE';        // Fields to select        $tblfields = PMA_DBI_get_columns($GLOBALS['db'], $table);        // Table to use        $sqlstr_from = ' FROM ' . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($table);        $search_words    = (($search_option > 2) ? array($search_str) : explode(' ', $search_str));        $like_or_regex   = (($search_option == 4) ? 'REGEXP' : 'LIKE');        $automatic_wildcard   = (($search_option < 3) ? '%' : '');        $fieldslikevalues = array();        foreach ($search_words as $search_word) {            // Eliminates empty values            if (strlen($search_word) === 0) {                continue;            }            $thefieldlikevalue = array();            foreach ($tblfields as $tblfield) {                if (! isset($field) || strlen($field) == 0 || $tblfield['Field'] == $field) {                    // Drizzle has no CONVERT and all text columns are UTF-8                    if (PMA_DRIZZLE) {                        $thefieldlikevalue[] = PMA_backquote($tblfield['Field'])                                            . ' ' . $like_or_regex . ' '                                            . "'" . $automatic_wildcard                                            . $search_word                                            . $automatic_wildcard . "'";                    } else {                        $thefieldlikevalue[] = 'CONVERT(' . PMA_backquote($tblfield['Field']) . ' USING utf8)'                                            . ' ' . $like_or_regex . ' '                                            . "'" . $automatic_wildcard                                            . $search_word                                            . $automatic_wildcard . "'";                    }                }            } // end for            if (count($thefieldlikevalue) > 0) {                $fieldslikevalues[]      = implode(' OR ', $thefieldlikevalue);            }        } // end for        $implode_str  = ($search_option == 1 ? ' OR ' : ' AND ');        if ( empty($fieldslikevalues)) {            // this could happen when the "inside field" does not exist            // in any selected tables            $sqlstr_where = ' WHERE FALSE';        } else {            $sqlstr_where = ' WHERE (' . implode(') ' . $implode_str . ' (', $fieldslikevalues) . ')';        }        unset($fieldslikevalues);        // Builds complete queries        $sql['select_fields'] = $sqlstr_select . ' * ' . $sqlstr_from . $sqlstr_where;        // here, I think we need to still use the COUNT clause, even for        // VIEWs, anyway we have a WHERE clause that should limit results        $sql['select_count']  = $sqlstr_select . ' COUNT(*) AS `count`' . $sqlstr_from . $sqlstr_where;        $sql['delete']        = $sqlstr_delete . $sqlstr_from . $sqlstr_where;        return $sql;    } // end of the "PMA_getSearchSqls()" function    /**     * Displays the results     */    $this_url_params = array(        'db'    => $GLOBALS['db'],        'goto'  => 'db_sql.php',        'pos'   => 0,        'is_js_confirmed' => 0,    );    // Displays search string    echo '<br />' . "\n"        .'<table class="data">' . "\n"        .'<caption class="tblHeaders">' . "\n"        .sprintf(__('Search results for "<i>%s</i>" %s:'),            $searched, $option_str) . "\n"        .'</caption>' . "\n";    $num_search_result_total = 0;    $odd_row = true;    foreach ($tables_selected as $each_table) {        // Gets the SQL statements        $newsearchsqls = PMA_getSearchSqls($each_table, (! empty($field_str) ? $field_str : ''), $search_str, $search_option);        // Executes the "COUNT" statement        $res_cnt = PMA_DBI_fetch_value($newsearchsqls['select_count']);        $num_search_result_total += $res_cnt;        $sql_query .= $newsearchsqls['select_count'];        echo '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">'            .'<td>' . sprintf(_ngettext('%s match inside table <i>%s</i>', '%s matches inside table <i>%s</i>', $res_cnt), $res_cnt,                htmlspecialchars($each_table)) . "</td>\n";        if ($res_cnt > 0) {            $this_url_params['sql_query'] = $newsearchsqls['select_fields'];             $browse_result_path = 'sql.php' . PMA_generate_common_url($this_url_params);             ?>            <td> <a name="browse_search" href="<?php echo $browse_result_path; ?>" onclick="loadResult('<?php echo $browse_result_path ?> ',' <?php echo  $each_table?> ' , '<?php echo PMA_generate_common_url($GLOBALS['db'], $each_table)?>','<?php echo ($GLOBALS['cfg']['AjaxEnable']); ?>');return false;" ><?php echo __('Browse') ?></a>   </td>            <?php            $this_url_params['sql_query'] = $newsearchsqls['delete'];            $delete_result_path = 'sql.php' . PMA_generate_common_url($this_url_params);            ?>            <td> <a name="delete_search" href="<?php echo $delete_result_path; ?>" onclick="deleteResult('<?php echo $delete_result_path ?>' , ' <?php printf(__('Delete the matches for the %s table?'), htmlspecialchars($each_table)); ?>','<?php echo ($GLOBALS['cfg']['AjaxEnable']); ?>');return false;" ><?php echo __('Delete') ?></a>   </td>            <?php         } else {            echo '<td>&nbsp;</td>' . "\n"                .'<td>&nbsp;</td>' . "\n";        }// end if else        $odd_row = ! $odd_row;        echo '</tr>' . "\n";    } // end for    echo '</table>' . "\n";    if (count($tables_selected) > 1) {        echo '<p>' . sprintf(_ngettext('<b>Total:</b> <i>%s</i> match', '<b>Total:</b> <i>%s</i> matches', $num_search_result_total),            $num_search_result_total) . '</p>' . "\n";    }} // end 1./** * If we are in an Ajax request, we need to exit after displaying all the HTML */if ($GLOBALS['is_ajax_request'] == true) {    exit;} else {    echo '</div>';//end searchresults div}/** * 2. Displays the main search form */?><a name="db_search"></a><form id="db_search_form"<?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?> method="post" action="db_search.php" name="db_search"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db']); ?><fieldset>    <legend><?php echo __('Search in database'); ?></legend>    <table class="formlayout">    <tr><td><?php echo __('Words or values to search for (wildcard: "%"):'); ?></td>        <td><input type="text" name="search_str" size="60"                value="<?php echo $searched; ?>" /></td>    </tr>    <tr><td align="right" valign="top">            <?php echo __('Find:'); ?></td>            <td><?php$choices = array(    '1' => __('at least one of the words') . PMA_showHint(__('Words are separated by a space character (" ").')),    '2' => __('all words') . PMA_showHint(__('Words are separated by a space character (" ").')),    '3' => __('the exact phrase'),    '4' => __('as regular expression') . ' ' . PMA_showMySQLDocu('Regexp', 'Regexp'));// 4th parameter set to true to add line breaks// 5th parameter set to false to avoid htmlspecialchars() escaping in the label//  since we have some HTML in some labelsPMA_display_html_radio('search_option', $choices, $search_option, true, false);unset($choices);            ?>            </td>    </tr>    <tr><td align="right" valign="top">            <?php echo __('Inside tables:'); ?></td>        <td rowspan="2"><?phpecho '            <select name="table_select[]" size="6" multiple="multiple">' . "\n";foreach ($tables_names_only as $each_table) {    if (in_array($each_table, $tables_selected)) {        $is_selected = ' selected="selected"';    } else {        $is_selected = '';    }    echo '                <option value="' . htmlspecialchars($each_table) . '"'        . $is_selected . '>'        . str_replace(' ', '&nbsp;', htmlspecialchars($each_table)) . '</option>' . "\n";} // end whileecho '            </select>' . "\n";$alter_select    = '<a href="db_search.php' . PMA_generate_common_url(array_merge($url_params, array('selectall' => 1))) . '#db_search"'    . ' onclick="setSelectOptions(\'db_search\', \'table_select[]\', true); return false;">' . __('Select All') . '</a>'    . '&nbsp;/&nbsp;'    . '<a href="db_search.php' . PMA_generate_common_url(array_merge($url_params, array('unselectall' => 1))) . '#db_search"'    . ' onclick="setSelectOptions(\'db_search\', \'table_select[]\', false); return false;">' . __('Unselect All') . '</a>';?>        </td>    </tr>    <tr><td align="right" valign="bottom">            <?php echo $alter_select; ?></td>    </tr>    <tr><td align="right">            <?php echo __('Inside column:'); ?></td>        <td><input type="text" name="field_str" size="60"                value="<?php echo ! empty($field_str) ? htmlspecialchars($field_str) : ''; ?>" /></td>    </tr>    </table></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_search" value="<?php echo __('Go'); ?>"        id="buttonGo" /></fieldset></form><!-- These two table-image and table-link elements display the table name in browse search results  --><div id='table-info'><a class="item" id="table-link" ></a></div><div id="browse-results"><!-- this browse-results div is used to load the browse and delete results in the db search --></div><br class="clearfloat" /><div id="sqlqueryform"><!-- this sqlqueryform div is used to load the delete form in the db search --></div><!--  toggle query box link--><a id="togglequerybox"></a><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library that provides common import functions that are used by import plugins * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * We need to know something about user */require_once './libraries/check_user_privileges.lib.php';/** * We do this check, DROP DATABASE does not need to be confirmed elsewhere */define('PMA_CHK_DROP', 1);/** *  Check whether timeout is getting close * *  @return boolean true if timeout is close *  @access public */function PMA_checkTimeout(){    global $timestamp, $maximum_time, $timeout_passed;    if ($maximum_time == 0) {        return false;    } elseif ($timeout_passed) {        return true;    /* 5 in next row might be too much */    } elseif ((time() - $timestamp) > ($maximum_time - 5)) {        $timeout_passed = true;        return true;    } else {        return false;    }}/** *  Detects what compression filse uses * *  @param string  $filepath  filename to check *  @return string MIME type of compression, none for none *  @access public */function PMA_detectCompression($filepath){    $file = @fopen($filepath, 'rb');    if (!$file) {        return false;    }    $test = fread($file, 4);    $len = strlen($test);    fclose($file);    if ($len >= 2 && $test[0] == chr(31) && $test[1] == chr(139)) {        return 'application/gzip';    }    if ($len >= 3 && substr($test, 0, 3) == 'BZh') {        return 'application/bzip2';    }    if ($len >= 4 && $test == "PK\003\004") {        return 'application/zip';    }    return 'none';}/** * Runs query inside import buffer. This is needed to allow displaying * of last SELECT, SHOW or HANDLER results and similar nice stuff. * * @param string  $sql          query to run * @param string  $full         query to display, this might be commented * @param bool    $controluser  whether to use control user for queries * @access public */function PMA_importRunQuery($sql = '', $full = '', $controluser = false){    global $import_run_buffer, $go_sql, $complete_query, $display_query,        $sql_query, $my_die, $error, $reload,        $last_query_with_results,        $skip_queries, $executed_queries, $max_sql_len, $read_multiply,        $cfg, $sql_query_disabled, $db, $run_query, $is_superuser;    $read_multiply = 1;    if (isset($import_run_buffer)) {        // Should we skip something?        if ($skip_queries > 0) {            $skip_queries--;        } else {            if (!empty($import_run_buffer['sql']) && trim($import_run_buffer['sql']) != '') {                $max_sql_len = max($max_sql_len, strlen($import_run_buffer['sql']));                if (!$sql_query_disabled) {                    $sql_query .= $import_run_buffer['full'];                }                if (!$cfg['AllowUserDropDatabase']                    && !$is_superuser                    && preg_match('@^[[:space:]]*DROP[[:space:]]+(IF EXISTS[[:space:]]+)?DATABASE @i', $import_run_buffer['sql'])                ) {                    $GLOBALS['message'] = PMA_Message::error(__('"DROP DATABASE" statements are disabled.'));                    $error = true;                } else {                    $executed_queries++;                    if ($run_query                        && $GLOBALS['finished']                        && empty($sql)                        && !$error                        && ((!empty($import_run_buffer['sql'])                        && preg_match('/^[\s]*(SELECT|SHOW|HANDLER)/i', $import_run_buffer['sql']))                        || ($executed_queries == 1))                    ) {                        $go_sql = true;                        if (!$sql_query_disabled) {                            $complete_query = $sql_query;                            $display_query = $sql_query;                        } else {                            $complete_query = '';                            $display_query = '';                        }                        $sql_query = $import_run_buffer['sql'];                        // If a 'USE <db>' SQL-clause was found, set our current $db to the new one                        list($db, $reload) = PMA_lookForUse($import_run_buffer['sql'], $db, $reload);                    } elseif ($run_query) {                        if ($controluser) {                            $result = PMA_query_as_controluser($import_run_buffer['sql']);                        } else {                            $result = PMA_DBI_try_query($import_run_buffer['sql']);                        }                        $msg = '# ';                        if ($result === false) { // execution failed                            if (! isset($my_die)) {                                $my_die = array();                            }                            $my_die[] = array('sql' => $import_run_buffer['full'], 'error' => PMA_DBI_getError());                            if ($cfg['VerboseMultiSubmit']) {                                $msg .= __('Error');                            }                            if (!$cfg['IgnoreMultiSubmitErrors']) {                                $error = true;                                return;                            }                        } elseif ($cfg['VerboseMultiSubmit']) {                            $a_num_rows = (int)@PMA_DBI_num_rows($result);                            $a_aff_rows = (int)@PMA_DBI_affected_rows();                            if ($a_num_rows > 0) {                                $msg .= __('Rows'). ': ' . $a_num_rows;                                $last_query_with_results = $import_run_buffer['sql'];                            } elseif ($a_aff_rows > 0) {                                $message = PMA_Message::affected_rows($a_aff_rows);                                $msg .= $message->getMessage();                            } else {                                $msg .= __('MySQL returned an empty result set (i.e. zero rows).');                            }                        }                        if (!$sql_query_disabled) {                            $sql_query .= $msg . "\n";                        }                        // If a 'USE <db>' SQL-clause was found and the query succeeded, set our current $db to the new one                        if ($result != false) {                            list($db, $reload) = PMA_lookForUse($import_run_buffer['sql'], $db, $reload);                        }                        if ($result != false                            && preg_match('@^[\s]*(DROP|CREATE)[\s]+(IF EXISTS[[:space:]]+)?(TABLE|DATABASE)[[:space:]]+(.+)@im', $import_run_buffer['sql'])                        ) {                            $reload = true;                        }                    } // end run query                } // end if not DROP DATABASE            // end non empty query            } elseif (!empty($import_run_buffer['full'])) {                if ($go_sql) {                    $complete_query .= $import_run_buffer['full'];                    $display_query .= $import_run_buffer['full'];                } else {                    if (!$sql_query_disabled) {                        $sql_query .= $import_run_buffer['full'];                    }                }            }            // check length of query unless we decided to pass it to sql.php            // (if $run_query is false, we are just displaying so show            // the complete query in the textarea)            if (! $go_sql && $run_query) {                if ($cfg['VerboseMultiSubmit'] && ! empty($sql_query)) {                    if (strlen($sql_query) > 50000 || $executed_queries > 50 || $max_sql_len > 1000) {                        $sql_query = '';                        $sql_query_disabled = true;                    }                } else {                    if (strlen($sql_query) > 10000 || $executed_queries > 10 || $max_sql_len > 500) {                        $sql_query = '';                        $sql_query_disabled = true;                    }                }            }        } // end do query (no skip)    } // end buffer exists    // Do we have something to push into buffer?    if (!empty($sql) || !empty($full)) {        $import_run_buffer = array('sql' => $sql, 'full' => $full);    } else {        unset($GLOBALS['import_run_buffer']);    }}/** * Looks for the presence of USE to possibly change current db * * @param string  $buffer  buffer to examine * @param string  $db      current db * @param bool    $reload  reload * @return array (current or new db, whether to reload) * @access public */function PMA_lookForUse($buffer, $db, $reload){    if (preg_match('@^[\s]*USE[[:space:]]+([\S]+)@i', $buffer, $match)) {        $db = trim($match[1]);        $db = trim($db, ';'); // for example, USE abc;        $reload = true;    }    return(array($db, $reload));}/** * Returns next part of imported file/buffer * * @param int  $size  size of buffer to read (this is maximal size function will return) * @return string part of file/buffer * @access public */function PMA_importGetNextChunk($size = 32768){    global $compression, $import_handle, $charset_conversion, $charset_of_file,        $read_multiply;    // Add some progression while reading large amount of data    if ($read_multiply <= 8) {        $size *= $read_multiply;    } else {        $size *= 8;    }    $read_multiply++;    // We can not read too much    if ($size > $GLOBALS['read_limit']) {        $size = $GLOBALS['read_limit'];    }    if (PMA_checkTimeout()) {        return false;    }    if ($GLOBALS['finished']) {        return true;    }    if ($GLOBALS['import_file'] == 'none') {        // Well this is not yet supported and tested, but should return content of textarea        if (strlen($GLOBALS['import_text']) < $size) {            $GLOBALS['finished'] = true;            return $GLOBALS['import_text'];        } else {            $r = substr($GLOBALS['import_text'], 0, $size);            $GLOBALS['offset'] += $size;            $GLOBALS['import_text'] = substr($GLOBALS['import_text'], $size);            return $r;        }    }    switch ($compression) {        case 'application/bzip2':            $result = bzread($import_handle, $size);            $GLOBALS['finished'] = feof($import_handle);            break;        case 'application/gzip':            $result = gzread($import_handle, $size);            $GLOBALS['finished'] = feof($import_handle);            break;        case 'application/zip':            $result = substr($GLOBALS['import_text'], 0, $size);            $GLOBALS['import_text'] = substr($GLOBALS['import_text'], $size);            $GLOBALS['finished'] = empty($GLOBALS['import_text']);            break;        case 'none':            $result = fread($import_handle, $size);            $GLOBALS['finished'] = feof($import_handle);            break;    }    $GLOBALS['offset'] += $size;    if ($charset_conversion) {        return PMA_convert_string($charset_of_file, 'utf-8', $result);    } else {        /**         * Skip possible byte order marks (I do not think we need more         * charsets, but feel free to add more, you can use wikipedia for         * reference: <http://en.wikipedia.org/wiki/Byte_Order_Mark>)         *         * @todo BOM could be used for charset autodetection         */        if ($GLOBALS['offset'] == $size) {            // UTF-8            if (strncmp($result, "\xEF\xBB\xBF", 3) == 0) {                $result = substr($result, 3);            // UTF-16 BE, LE            } elseif (strncmp($result, "\xFE\xFF", 2) == 0 || strncmp($result, "\xFF\xFE", 2) == 0) {                $result = substr($result, 2);            }        }        return $result;    }}/** * Returns the "Excel" column name (i.e. 1 = "A", 26 = "Z", 27 = "AA", etc.) * * This functions uses recursion to build the Excel column name. * * The column number (1-26) is converted to the responding ASCII character (A-Z) and returned. * * If the column number is bigger than 26 (= num of letters in alfabet), * an extra character needs to be added. To find this extra character, the number is divided by 26 * and this value is passed to another instance of the same function (hence recursion). * In that new instance the number is evaluated again, and if it is still bigger than 26, it is divided again * and passed to another instance of the same function. This continues until the number is smaller than 26. * Then the last called function returns the corresponding ASCII character to the function that called it. * Each time a called function ends an extra character is added to the column name. * When the first function is reached, the last character is addded and the complete column name is returned. * * @access  public * * @param int $num * @return  string The column's "Excel" name */function PMA_getColumnAlphaName($num){    $A = 65; // ASCII value for capital "A"    $col_name = "";    if ($num > 26) {        $div = (int)($num / 26);        $remain = (int)($num % 26);        // subtract 1 of divided value in case the modulus is 0,        // this is necessary because A-Z has no 'zero'        if ($remain == 0) {            $div--;        }        // recursive function call        $col_name = PMA_getColumnAlphaName($div);        // use modulus as new column number        $num = $remain;    }    if ($num == 0) {        // use 'Z' if column number is 0,        // this is necessary because A-Z has no 'zero'        $col_name .= chr(($A + 26) - 1);    } else {        // convert column number to ASCII character        $col_name .= chr(($A + $num) - 1);    }    return $col_name;}/** * Returns the column number based on the Excel name. * So "A" = 1, "Z" = 26, "AA" = 27, etc. * * Basicly this is a base26 (A-Z) to base10 (0-9) conversion. * It iterates through all characters in the column name and * calculates the corresponding value, based on character value * (A = 1, ..., Z = 26) and position in the string. * * @access  public * * @param string $name (i.e. "A", or "BC", etc.) * @return  int The column number */function PMA_getColumnNumberFromName($name){    if (!empty($name)) {        $name = strtoupper($name);        $num_chars = strlen($name);        $column_number = 0;        for ($i = 0; $i < $num_chars; ++$i) {        // read string from back to front        $char_pos = ($num_chars - 1) - $i;        // convert capital character to ASCII value        // and subtract 64 to get corresponding decimal value        // ASCII value of "A" is 65, "B" is 66, etc.        // Decimal equivalent of "A" is 1, "B" is 2, etc.        $number = (ord($name[$char_pos]) - 64);        // base26 to base10 conversion : multiply each number        // with corresponding value of the position, in this case        // $i=0 : 1; $i=1 : 26; $i=2 : 676; ...        $column_number += $number * pow(26, $i);        }        return $column_number;    } else {        return 0;    }}/** * Constants definitions *//* MySQL type defs */define("NONE",      0);define("VARCHAR",   1);define("INT",       2);define("DECIMAL",   3);define("BIGINT",    4);define("GEOMETRY",  5);/* Decimal size defs */define("M",         0);define("D",         1);define("FULL",      2);/* Table array defs */define("TBL_NAME",  0);define("COL_NAMES", 1);define("ROWS",      2);/* Analysis array defs */define("TYPES",        0);define("SIZES",        1);define("FORMATTEDSQL", 2);/** * Obtains the precision (total # of digits) from a size of type decimal * * @access  public * * @param string $last_cumulative_size * @return  int Precision of the given decimal size notation */function PMA_getM($last_cumulative_size){    return (int)substr($last_cumulative_size, 0, strpos($last_cumulative_size, ","));}/** * Obtains the scale (# of digits to the right of the decimal point) from a size of type decimal * * @access  public * * @param string $last_cumulative_size * @return  int Scale of the given decimal size notation */function PMA_getD($last_cumulative_size){    return (int)substr($last_cumulative_size, (strpos($last_cumulative_size, ",") + 1), (strlen($last_cumulative_size) - strpos($last_cumulative_size, ",")));}/** * Obtains the decimal size of a given cell * * @access  public * * @param string &$cell * @return  array Contains the precision, scale, and full size representation of the given decimal cell */function PMA_getDecimalSize(&$cell){    $curr_size = strlen((string)$cell);    $decPos = strpos($cell, ".");    $decPrecision = ($curr_size - 1) - $decPos;    $m = $curr_size - 1;    $d = $decPrecision;    return array($m, $d, ($m . "," . $d));}/** * Obtains the size of the given cell * * @todo    Handle the error cases more elegantly * * @access  public * * @param string $last_cumulative_size    Last cumulative column size * @param int    $last_cumulative_type    Last cumulative column type  (NONE or VARCHAR or DECIMAL or INT or BIGINT) * @param int    $curr_type               Type of the current cell     (NONE or VARCHAR or DECIMAL or INT or BIGINT) * @param string &$cell                   The current cell * @return  string                          Size of the given cell in the type-appropriate format */function PMA_detectSize($last_cumulative_size, $last_cumulative_type, $curr_type, &$cell){    $curr_size = strlen((string)$cell);    /**     * If the cell is NULL, don't treat it as a varchar     */    if (! strcmp('NULL', $cell)) {        return $last_cumulative_size;    }    /**     * What to do if the current cell is of type VARCHAR     */    elseif ($curr_type == VARCHAR) {        /**         * The last cumulative type was VARCHAR         */        if ($last_cumulative_type == VARCHAR) {            if ($curr_size >= $last_cumulative_size) {                return $curr_size;            } else {                return $last_cumulative_size;            }        }        /**         * The last cumulative type was DECIMAL         */        elseif ($last_cumulative_type == DECIMAL) {            $oldM = PMA_getM($last_cumulative_size);            if ($curr_size >= $oldM) {                return $curr_size;            } else {                return $oldM;            }        }        /**         * The last cumulative type was BIGINT or INT         */        elseif ($last_cumulative_type == BIGINT || $last_cumulative_type == INT) {            if ($curr_size >= $last_cumulative_size) {                return $curr_size;            } else {                return $last_cumulative_size;            }        }        /**         * This is the first row to be analyzed         */        elseif (! isset($last_cumulative_type) || $last_cumulative_type == NONE) {            return $curr_size;        }        /**         * An error has DEFINITELY occurred         */        else {            /**             * TODO: Handle this MUCH more elegantly             */            return -1;        }    }    /**     * What to do if the current cell is of type DECIMAL     */    elseif ($curr_type == DECIMAL) {        /**         * The last cumulative type was VARCHAR         */        if ($last_cumulative_type == VARCHAR) {            /* Convert $last_cumulative_size from varchar to decimal format */            $size = PMA_getDecimalSize($cell);            if ($size[M] >= $last_cumulative_size) {                return $size[M];            } else {                return $last_cumulative_size;            }        }        /**         * The last cumulative type was DECIMAL         */        elseif ($last_cumulative_type == DECIMAL) {            $size = PMA_getDecimalSize($cell);            $oldM = PMA_getM($last_cumulative_size);            $oldD = PMA_getD($last_cumulative_size);            /* New val if M or D is greater than current largest */            if ($size[M] > $oldM || $size[D] > $oldD) {                /* Take the largest of both types */                return (string)((($size[M] > $oldM) ? $size[M] : $oldM) . "," . (($size[D] > $oldD) ? $size[D] : $oldD));            } else {                return $last_cumulative_size;            }        }        /**         * The last cumulative type was BIGINT or INT         */        elseif ($last_cumulative_type == BIGINT || $last_cumulative_type == INT) {            /* Convert $last_cumulative_size from int to decimal format */            $size = PMA_getDecimalSize($cell);            if ($size[M] >= $last_cumulative_size) {                return $size[FULL];            } else {                return ($last_cumulative_size.",".$size[D]);            }        }        /**         * This is the first row to be analyzed         */        elseif (! isset($last_cumulative_type) || $last_cumulative_type == NONE) {            /* First row of the column */            $size = PMA_getDecimalSize($cell);            return $size[FULL];        }        /**         * An error has DEFINITELY occurred         */        else {            /**             * TODO: Handle this MUCH more elegantly             */            return -1;        }    }    /**     * What to do if the current cell is of type BIGINT or INT     */    elseif ($curr_type == BIGINT || $curr_type == INT) {        /**         * The last cumulative type was VARCHAR         */        if ($last_cumulative_type == VARCHAR) {            if ($curr_size >= $last_cumulative_size) {                return $curr_size;            } else {                return $last_cumulative_size;            }        }        /**         * The last cumulative type was DECIMAL         */        elseif ($last_cumulative_type == DECIMAL) {            $oldM = PMA_getM($last_cumulative_size);            $oldD = PMA_getD($last_cumulative_size);            $oldInt = $oldM - $oldD;            $newInt = strlen((string)$cell);            /* See which has the larger integer length */            if ($oldInt >= $newInt) {                /* Use old decimal size */                return $last_cumulative_size;            } else {                /* Use $newInt + $oldD as new M */                return (($newInt + $oldD) . "," . $oldD);            }        }        /**         * The last cumulative type was BIGINT or INT         */        elseif ($last_cumulative_type == BIGINT || $last_cumulative_type == INT) {            if ($curr_size >= $last_cumulative_size) {                return $curr_size;            } else {                return $last_cumulative_size;            }        }        /**         * This is the first row to be analyzed         */        elseif (! isset($last_cumulative_type) || $last_cumulative_type == NONE) {            return $curr_size;        }        /**         * An error has DEFINITELY occurred         */        else {            /**             * TODO: Handle this MUCH more elegantly             */            return -1;        }    }    /**     * An error has DEFINITELY occurred     */    else {        /**         * TODO: Handle this MUCH more elegantly         */        return -1;    }}/** * Determines what MySQL type a cell is * * @access  public * * @param int    $last_cumulative_type  Last cumulative column type  (VARCHAR or INT or BIGINT or DECIMAL or NONE) * @param string &$cell                 String representation of the cell for which a best-fit type is to be determined * @return  int                           The MySQL type representation (VARCHAR or INT or BIGINT or DECIMAL or NONE) */function PMA_detectType($last_cumulative_type, &$cell){    /**     * If numeric, determine if decimal, int or bigint     * Else, we call it varchar for simplicity     */    if (! strcmp('NULL', $cell)) {        if ($last_cumulative_type === null || $last_cumulative_type == NONE) {            return NONE;        } else {            return $last_cumulative_type;        }    } elseif (is_numeric($cell)) {        if ($cell == (string)(float)$cell && strpos($cell, ".") !== false && substr_count($cell, ".") == 1) {            return DECIMAL;        } else {        if (abs($cell) > 2147483647) {            return BIGINT;        } else {            return INT;        }        }    } else {        return VARCHAR;    }}/** * Determines if the column types are int, decimal, or string * * @link http://wiki.phpmyadmin.net/pma/Import * * @todo    Handle the error case more elegantly * * @access  public * * @param &$table  array(string $table_name, array $col_names, array $rows) * @return  array    array(array $types, array $sizes) */function PMA_analyzeTable(&$table){    /* Get number of rows in table */    $numRows = count($table[ROWS]);    /* Get number of columns */    $numCols = count($table[COL_NAMES]);    /* Current type for each column */    $types = array();    $sizes = array();    /* Initialize $sizes to all 0's */    for ($i = 0; $i < $numCols; ++$i) {        $sizes[$i] = 0;    }    /* Initialize $types to NONE */    for ($i = 0; $i < $numCols; ++$i) {        $types[$i] = NONE;    }    /* Temp vars */    $curr_type = NONE;    $curr_size = 0;    /* If the passed array is not of the correct form, do not process it */    if (is_array($table) && ! is_array($table[TBL_NAME]) && is_array($table[COL_NAMES]) && is_array($table[ROWS])) {        /* Analyze each column */        for ($i = 0; $i < $numCols; ++$i) {            /* Analyze the column in each row */            for ($j = 0; $j < $numRows; ++$j) {                /* Determine type of the current cell */                $curr_type = PMA_detectType($types[$i], $table[ROWS][$j][$i]);                /* Determine size of the current cell */                $sizes[$i] = PMA_detectSize($sizes[$i], $types[$i], $curr_type, $table[ROWS][$j][$i]);                /**                 * If a type for this column has already been declared,                 * only alter it if it was a number and a varchar was found                 */                if ($curr_type != NONE) {                    if ($curr_type == VARCHAR) {                        $types[$i] = VARCHAR;                    } else if ($curr_type == DECIMAL) {                        if ($types[$i] != VARCHAR) {                            $types[$i] = DECIMAL;                        }                    } else if ($curr_type == BIGINT) {                        if ($types[$i] != VARCHAR && $types[$i] != DECIMAL) {                            $types[$i] = BIGINT;                        }                    } else if ($curr_type == INT) {                        if ($types[$i] != VARCHAR && $types[$i] != DECIMAL && $types[$i] != BIGINT) {                            $types[$i] = INT;                        }                    }                }            }        }        /* Check to ensure that all types are valid */        $len = count($types);        for ($n = 0; $n < $len; ++$n) {            if (! strcmp(NONE, $types[$n])) {                $types[$n] = VARCHAR;                $sizes[$n] = '10';            }        }        return array($types, $sizes);    } else {        /**         * TODO: Handle this better         */        return false;    }}/* Needed to quell the beast that is PMA_Message */$import_notice = null;/** * Builds and executes SQL statements to create the database and tables * as necessary, as well as insert all the data. * * @link http://wiki.phpmyadmin.net/pma/Import * * @access  public * * @param string  $db_name          Name of the database * @param array   &$tables          Array of tables for the specified database * @param array   &$analyses        Analyses of the tables * @param array   &$additional_sql  Additional SQL statements to be executed * @param array   $options          Associative array of options * @return  void */function PMA_buildSQL($db_name, &$tables, &$analyses = null, &$additional_sql = null, $options = null){    /* Take care of the options */    if (isset($options['db_collation'])&& ! is_null($options['db_collation'])) {        $collation = $options['db_collation'];    } else {        $collation = "utf8_general_ci";    }    if (isset($options['db_charset']) && ! is_null($options['db_charset'])) {        $charset = $options['db_charset'];    } else {        $charset = "utf8";    }    if (isset($options['create_db'])) {        $create_db = $options['create_db'];    } else {        $create_db = true;    }    /* Create SQL code to handle the database */    $sql = array();    if ($create_db) {        if (PMA_DRIZZLE) {            $sql[] = "CREATE DATABASE IF NOT EXISTS " . PMA_backquote($db_name) . " COLLATE " . $collation;        } else {            $sql[] = "CREATE DATABASE IF NOT EXISTS " . PMA_backquote($db_name) . " DEFAULT CHARACTER SET " . $charset . " COLLATE " . $collation;        }    }    /**     * The calling plug-in should include this statement, if necessary, in the $additional_sql parameter     *     * $sql[] = "USE " . PMA_backquote($db_name);     */    /* Execute the SQL statements create above */    $sql_len = count($sql);    for ($i = 0; $i < $sql_len; ++$i) {        PMA_importRunQuery($sql[$i], $sql[$i]);    }    /* No longer needed */    unset($sql);    /* Run the $additional_sql statements supplied by the caller plug-in */    if ($additional_sql != null) {        /* Clean the SQL first */        $additional_sql_len = count($additional_sql);        /**         * Only match tables for now, because CREATE IF NOT EXISTS         * syntax is lacking or nonexisting for views, triggers,         * functions, and procedures.         *         * See: http://bugs.mysql.com/bug.php?id=15287         *         * To the best of my knowledge this is still an issue.         *         * $pattern = 'CREATE (TABLE|VIEW|TRIGGER|FUNCTION|PROCEDURE)';         */        $pattern = '/CREATE .*(TABLE)/';        $replacement = 'CREATE \\1 IF NOT EXISTS';        /* Change CREATE statements to CREATE IF NOT EXISTS to support inserting into existing structures */        for ($i = 0; $i < $additional_sql_len; ++$i) {            $additional_sql[$i] = preg_replace($pattern, $replacement, $additional_sql[$i]);            /* Execute the resulting statements */            PMA_importRunQuery($additional_sql[$i], $additional_sql[$i]);        }    }    if ($analyses != null) {        $type_array = array(NONE => "NULL", VARCHAR => "varchar", INT => "int", DECIMAL => "decimal", BIGINT => "bigint", GEOMETRY => 'geometry');        /* TODO: Do more checking here to make sure they really are matched */        if (count($tables) != count($analyses)) {            exit();        }        /* Create SQL code to create the tables */        $tempSQLStr = "";        $num_tables = count($tables);        for ($i = 0; $i < $num_tables; ++$i) {            $num_cols = count($tables[$i][COL_NAMES]);            $tempSQLStr = "CREATE TABLE IF NOT EXISTS " . PMA_backquote($db_name) . '.' . PMA_backquote($tables[$i][TBL_NAME]) . " (";            for ($j = 0; $j < $num_cols; ++$j) {                $size = $analyses[$i][SIZES][$j];                if ((int)$size == 0) {                    $size = 10;                }                $tempSQLStr .= PMA_backquote($tables[$i][COL_NAMES][$j]) . " " . $type_array[$analyses[$i][TYPES][$j]];                if ($analyses[$i][TYPES][$j] != GEOMETRY) {                    $tempSQLStr .= "(" . $size . ")";                }                if ($j != (count($tables[$i][COL_NAMES]) - 1)) {                    $tempSQLStr .= ", ";                }            }            $tempSQLStr .= ")"                . (PMA_DRIZZLE ? "" : " DEFAULT CHARACTER SET " . $charset)                . " COLLATE " . $collation . ";";            /**             * Each SQL statement is executed immediately             * after it is formed so that we don't have             * to store them in a (possibly large) buffer             */            PMA_importRunQuery($tempSQLStr, $tempSQLStr);        }    }    /**     * Create the SQL statements to insert all the data     *     * Only one insert query is formed for each table     */    $tempSQLStr = "";    $col_count = 0;    $num_tables = count($tables);    for ($i = 0; $i < $num_tables; ++$i) {        $num_cols = count($tables[$i][COL_NAMES]);        $num_rows = count($tables[$i][ROWS]);        $tempSQLStr = "INSERT INTO " . PMA_backquote($db_name) . '.' . PMA_backquote($tables[$i][TBL_NAME]) . " (";        for ($m = 0; $m < $num_cols; ++$m) {            $tempSQLStr .= PMA_backquote($tables[$i][COL_NAMES][$m]);            if ($m != ($num_cols - 1)) {                $tempSQLStr .= ", ";            }        }        $tempSQLStr .= ") VALUES ";        for ($j = 0; $j < $num_rows; ++$j) {            $tempSQLStr .= "(";            for ($k = 0; $k < $num_cols; ++$k) {                // If fully formatted SQL, no need to enclose with aphostrophes, add shalshes etc.                if ($analyses != null                    && isset($analyses[$i][FORMATTEDSQL][$col_count])                    && $analyses[$i][FORMATTEDSQL][$col_count] == true                ) {                    $tempSQLStr .= (string) $tables[$i][ROWS][$j][$k];                } else {                    if ($analyses != null) {                        $is_varchar = ($analyses[$i][TYPES][$col_count] === VARCHAR);                    } else {                        $is_varchar = !is_numeric($tables[$i][ROWS][$j][$k]);                    }                    /* Don't put quotes around NULL fields */                    if (! strcmp($tables[$i][ROWS][$j][$k], 'NULL')) {                        $is_varchar = false;                    }                    $tempSQLStr .= (($is_varchar) ? "'" : "");                    $tempSQLStr .= PMA_sqlAddSlashes((string)$tables[$i][ROWS][$j][$k]);                    $tempSQLStr .= (($is_varchar) ? "'" : "");                }                if ($k != ($num_cols - 1)) {                    $tempSQLStr .= ", ";                }                if ($col_count == ($num_cols - 1)) {                    $col_count = 0;                } else {                    $col_count++;                }                /* Delete the cell after we are done with it */                unset($tables[$i][ROWS][$j][$k]);            }            $tempSQLStr .= ")";            if ($j != ($num_rows - 1)) {                $tempSQLStr .= ",\n ";            }            $col_count = 0;            /* Delete the row after we are done with it */            unset($tables[$i][ROWS][$j]);        }        $tempSQLStr .= ";";        /**         * Each SQL statement is executed immediately         * after it is formed so that we don't have         * to store them in a (possibly large) buffer         */        PMA_importRunQuery($tempSQLStr, $tempSQLStr);    }    /* No longer needed */    unset($tempSQLStr);    /**     * A work in progress     */    /* Add the viewable structures from $additional_sql to $tables so they are also displayed */    $view_pattern = '@VIEW `[^`]+`\.`([^`]+)@';    $table_pattern = '@CREATE TABLE IF NOT EXISTS `([^`]+)`@';    /* Check a third pattern to make sure its not a "USE `db_name`;" statement */    $regs = array();    $inTables = false;    $additional_sql_len = count($additional_sql);    for ($i = 0; $i < $additional_sql_len; ++$i) {        preg_match($view_pattern, $additional_sql[$i], $regs);        if (count($regs) == 0) {            preg_match($table_pattern, $additional_sql[$i], $regs);        }        if (count($regs)) {            for ($n = 0; $n < $num_tables; ++$n) {                if (!strcmp($regs[1], $tables[$n][TBL_NAME])) {                    $inTables = true;                    break;                }            }            if (!$inTables) {                $tables[] = array(TBL_NAME => $regs[1]);            }        }        /* Reset the array */        $regs = array();        $inTables = false;    }    $params = array('db' => (string)$db_name);    $db_url = 'db_structure.php' . PMA_generate_common_url($params);    $db_ops_url = 'db_operations.php' . PMA_generate_common_url($params);    $message = '<br /><br />';    $message .= '<strong>' . __('The following structures have either been created or altered. Here you can:') . '</strong><br />';    $message .= '<ul><li>' . __("View a structure's contents by clicking on its name") . '</li>';    $message .= '<li>' . __('Change any of its settings by clicking the corresponding "Options" link') . '</li>';    $message .= '<li>' . __('Edit structure by following the "Structure" link') . '</li>';    $message .= sprintf('<br /><li><a href="%s" title="%s">%s</a> (<a href="%s" title="%s">' . __('Options') . '</a>)</li>',                        $db_url,                        sprintf(__('Go to database: %s'), htmlspecialchars(PMA_backquote($db_name))),                        htmlspecialchars($db_name),                        $db_ops_url,                        sprintf(__('Edit settings for %s'), htmlspecialchars(PMA_backquote($db_name))));    $message .= '<ul>';    unset($params);    $num_tables = count($tables);    for ($i = 0; $i < $num_tables; ++$i) {        $params = array('db' => (string)$db_name, 'table' => (string)$tables[$i][TBL_NAME]);        $tbl_url = 'sql.php' . PMA_generate_common_url($params);        $tbl_struct_url = 'tbl_structure.php' . PMA_generate_common_url($params);        $tbl_ops_url = 'tbl_operations.php' . PMA_generate_common_url($params);        unset($params);        if (! PMA_Table::isView($db_name, $tables[$i][TBL_NAME])) {            $message .= sprintf('<li><a href="%s" title="%s">%s</a> (<a href="%s" title="%s">' . __('Structure') . '</a>) (<a href="%s" title="%s">' . __('Options') . '</a>)</li>',                                $tbl_url,                                sprintf(__('Go to table: %s'), htmlspecialchars(PMA_backquote($tables[$i][TBL_NAME]))),                                htmlspecialchars($tables[$i][TBL_NAME]),                                $tbl_struct_url,                                sprintf(__('Structure of %s'), htmlspecialchars(PMA_backquote($tables[$i][TBL_NAME]))),                                $tbl_ops_url,                                sprintf(__('Edit settings for %s'), htmlspecialchars(PMA_backquote($db_name))));        } else {            $message .= sprintf('<li><a href="%s" title="%s">%s</a></li>',                                $tbl_url,                                sprintf(__('Go to view: %s'), htmlspecialchars(PMA_backquote($tables[$i][TBL_NAME]))),                                htmlspecialchars($tables[$i][TBL_NAME]));        }    }    $message .= '</ul></ul>';    global $import_notice;    $import_notice = $message;    unset($tables);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * phpMyAdmin fatal error display page * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}header('Content-Type: text/html; charset=utf-8');?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $lang; ?>" dir="<?php echo $dir; ?>"><head>    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <title>phpMyAdmin</title>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <style type="text/css">    <!--    html {        padding: 0;        margin: 0;    }    body  {        font-family: sans-serif;        font-size: small;        color: #000000;        background-color: #F5F5F5;        margin: 1em;    }    h1 {        margin: 0;        padding: 0.3em;        font-size: 1.4em;        font-weight: bold;        color: #ffffff;        background-color: #ff0000;    }    p {        margin: 0;        padding: 0.5em;        border: 0.1em solid red;        background-color: #ffeeee;    }    //-->    </style></head><body><h1>phpMyAdmin - <?php echo $error_header; ?></h1><p><?php echo PMA_sanitize($error_message); ?></p></body></html>
<?phprequire_once './libraries/common.inc.php';if (! isset($_REQUEST['get_gis_editor']) && ! isset($_REQUEST['generate'])) {    include_once './libraries/header_http.inc.php';    include_once './libraries/header_meta_style.inc.php';}require_once './libraries/gis/pma_gis_factory.php';require_once './libraries/gis_visualization.lib.php';// Get data if any posted$gis_data = array();if (PMA_isValid($_REQUEST['gis_data'], 'array')) {    $gis_data = $_REQUEST['gis_data'];}$gis_types = array(    'POINT',    'MULTIPOINT',    'LINESTRING',    'MULTILINESTRING',    'POLYGON',    'MULTIPOLYGON',    'GEOMETRYCOLLECTION');// Extract type from the initial call and make sure that it's a valid one.// Extract from field's values if availbale, if not use the column type passed.if (! isset($gis_data['gis_type'])) {    if (isset($_REQUEST['type']) && $_REQUEST['type'] != '') {        $gis_data['gis_type'] = strtoupper($_REQUEST['type']);    }    if (isset($_REQUEST['value']) && trim($_REQUEST['value']) != '') {        $start = (substr($_REQUEST['value'], 0, 1) == "'") ? 1 : 0;        $gis_data['gis_type'] = substr($_REQUEST['value'], $start, strpos($_REQUEST['value'], "(") - $start);    }    if ((! isset($gis_data['gis_type'])) || (! in_array($gis_data['gis_type'], $gis_types))) {        $gis_data['gis_type'] = $gis_types[0];    }}$geom_type = $gis_data['gis_type'];// Generate parameters from value passed.$gis_obj = PMA_GIS_Factory::factory($geom_type);if (isset($_REQUEST['value'])) {    $gis_data = array_merge($gis_data, $gis_obj->generateParams($_REQUEST['value']));}// Generate Well Known Text$srid = (isset($gis_data['srid']) && $gis_data['srid'] != '') ? htmlspecialchars($gis_data['srid']) : 0;$wkt = $gis_obj->generateWkt($gis_data, 0);$wkt_with_zero = $gis_obj->generateWkt($gis_data, 0, '0');$result = "'" . $wkt . "'," . $srid;// Generate PNG or SVG based visualization$format = (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER <= 8) ? 'png' : 'svg';$visualizationSettings = array('width' => 450, 'height' => 300, 'spatialColumn' => 'wkt');$data = array(array('wkt' => $wkt_with_zero, 'srid' => $srid));$visualization = PMA_GIS_visualizationResults($data, $visualizationSettings, $format);$open_layers = PMA_GIS_visualizationResults($data, $visualizationSettings, 'ol');// If the call is to update the WKT and visualization make an AJAX responseif (isset($_REQUEST['generate']) && $_REQUEST['generate'] == true) {    $extra_data = array(        'result'        => $result,        'visualization' => $visualization,        'openLayers'    => $open_layers,    );    PMA_ajaxResponse(null, true, $extra_data);}// If the call is to get the whole content, start buffering, skipping </head> and <body> tagsif (isset($_REQUEST['get_gis_editor']) && $_REQUEST['get_gis_editor'] == true) {    ob_start();} else {?></head><body><?php}?>    <form id="gis_data_editor_form" action="gis_data_editor.php" method="post">    <input type="hidden" id="pmaThemeImage" value="<?php echo($GLOBALS['pmaThemeImage']); ?>" />    <div id="gis_data_editor">        <h3><?php printf(__('Value for the column "%s"'), htmlspecialchars($_REQUEST['field'])); ?></h3><?php   echo('<input type="hidden" name="field" value="' . htmlspecialchars($_REQUEST['field']) . '" />');        // The input field to which the final result should be added and corresponding null checkbox        if (isset($_REQUEST['input_name'])) {            echo('<input type="hidden" name="input_name" value="' . htmlspecialchars($_REQUEST['input_name']) . '" />');        }        echo PMA_generate_common_hidden_inputs();?>        <!-- Visualization section -->        <div id="placeholder" style="width:450px;height:300px;<?php       if ($srid != 0) {                echo('display:none;');            }?>      "><?php       echo ($visualization);?>      </div>        <div id="openlayersmap" style="width:450px;height:300px;<?php       if ($srid == 0) {                echo('display:none;');            }?>      ">        </div>        <div class="choice" style="float:right;clear:right;">            <input type="checkbox" id="choice" value="useBaseLayer"<?php       if ($srid != 0) {                echo(' checked="checked"');            }?>          />            <label for="choice"><?php echo __("Use OpenStreetMaps as Base Layer"); ?></label>        </div>        <script language="javascript" type="text/javascript">            <?php echo($open_layers); ?>        </script>        <!-- End of visualization section -->        <!-- Header section - Inclueds GIS type selector and input field for SRID -->        <div id="gis_data_header">            <select name="gis_data[gis_type]" class="gis_type"><?php                foreach ($gis_types as $gis_type) {                    echo('<option value="' . $gis_type . '"');                    if ($geom_type == $gis_type) {                        echo(' selected="selected"');                    }                    echo('>' . $gis_type . '</option>');                }?>            </select>            <input type="submit" name="gis_data[go]" class="go" value="<?php echo __("Go")?>" />            <label for="srid"><?php echo __("SRID"); ?>:&nbsp;</label>            <input name="gis_data[srid]" type="text" value="<?php echo($srid); ?>" />        </div>        <!-- End of header section -->        <!-- Data section -->        <div id="gis_data"><?php   $geom_count = 1;        if ($geom_type == 'GEOMETRYCOLLECTION') {            $geom_count = (isset($gis_data[$geom_type]['geom_count'])) ? $gis_data[$geom_type]['geom_count'] : 1;            if (isset($gis_data[$geom_type]['add_geom'])) {                $geom_count++;            }            echo('<input type="hidden" name="gis_data[GEOMETRYCOLLECTION][geom_count]" value="' . $geom_count . '">');        }        for ($a = 0; $a < $geom_count; $a++) {            if ($geom_type == 'GEOMETRYCOLLECTION') {                echo('<br/><br/>'); echo __("Geometry"); echo($a + 1 . ':<br/>');                if (isset($gis_data[$a]['gis_type'])) {                    $type = $gis_data[$a]['gis_type'];                } else {                    $type = $gis_types[0];                }                echo('<select name="gis_data[' . $a . '][gis_type]" class="gis_type">');                foreach (array_slice($gis_types, 0, 6) as $gis_type) {                    echo('<option value="' . $gis_type . '"');                    if ($type == $gis_type) {                        echo(' selected="selected"');                    }                    echo('>' . $gis_type . '</option>');                }                echo('</select>');                echo('<input type="submit" name="gis_data[' . $a . '][go]" class="go" value="'); echo __("Go"); echo('">');            } else {                $type = $geom_type;            }            if ($type == 'POINT') {                echo('<br/>'); echo __("Point"); echo(' :');?>              <label for="x"><?php echo __("X"); ?></label>                <input name="gis_data[<?php echo($a); ?>][POINT][x]" type="text" value="<?php echo(isset($gis_data[$a]['POINT']['x']) ? htmlspecialchars($gis_data[$a]['POINT']['x']) : ''); ?>" />                <label for="y"><?php echo __("Y"); ?></label>                <input name="gis_data[<?php echo($a); ?>][POINT][y]" type="text" value="<?php echo(isset($gis_data[$a]['POINT']['y']) ? htmlspecialchars($gis_data[$a]['POINT']['y']) : ''); ?>" /><?php            } elseif ($type == 'MULTIPOINT' || $type == 'LINESTRING') {                $no_of_points = isset($gis_data[$a][$type]['no_of_points']) ? $gis_data[$a][$type]['no_of_points'] : 1;                if ($type == 'LINESTRING' && $no_of_points < 2) {                    $no_of_points = 2;                }                if ($type == 'MULTIPOINT' && $no_of_points < 1) {                    $no_of_points = 1;                }                if (isset($gis_data[$a][$type]['add_point'])) {                    $no_of_points++;                }                echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][no_of_points]" value="' . $no_of_points . '">');                for ($i = 0; $i < $no_of_points; $i++) {                    echo('<br/>');                    printf(__('Point %d'), $i + 1);                    echo ':';?>                  <label for="x"><?php echo  __("X"); ?></label>                    <input type="text" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][x]" value="<?php echo(isset($gis_data[$a][$type][$i]['x']) ? htmlspecialchars($gis_data[$a][$type][$i]['x']) : ''); ?>" />                    <label for="y"><?php echo  __("Y"); ?></label>                    <input type="text" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][y]" value="<?php echo(isset($gis_data[$a][$type][$i]['y']) ? htmlspecialchars($gis_data[$a][$type][$i]['y']) : ''); ?>" /><?php                }?>               <input type="submit" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][add_point]" class="add addPoint" value="<?php echo __("Add a point"); ?>"><?php            } elseif ($type == 'MULTILINESTRING' || $type == 'POLYGON') {                $no_of_lines = isset($gis_data[$a][$type]['no_of_lines']) ? $gis_data[$a][$type]['no_of_lines'] : 1;                if ($no_of_lines < 1) {                    $no_of_lines = 1;                }                if (isset($gis_data[$a][$type]['add_line'])) {                    $no_of_lines++;                }                echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][no_of_lines]" value="' . $no_of_lines . '">');                for ($i = 0; $i < $no_of_lines; $i++) {                    echo('<br/>');                    if ($type == 'MULTILINESTRING') {                        echo __("Linestring"); echo($i + 1 . ':');                    } else {                        if ($i == 0) {                            echo __("Outer Ring") . ':';                        } else {                            echo __("Inner Ring"); echo($i . ':');                        }                    }                    $no_of_points = isset($gis_data[$a][$type][$i]['no_of_points']) ? $gis_data[$a][$type][$i]['no_of_points'] : 2;                    if ($type == 'MULTILINESTRING' && $no_of_points < 2) {                        $no_of_points = 2;                    }                    if ($type == 'POLYGON' && $no_of_points < 4) {                        $no_of_points = 4;                    }                    if (isset($gis_data[$a][$type][$i]['add_point'])) {                        $no_of_points++;                    }                    echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][' . $i . '][no_of_points]" value="' . $no_of_points . '">');                    for ($j = 0; $j < $no_of_points; $j++) {                        echo('<br/>');                        printf(__('Point %d'), $j + 1);                        echo ':';?>                      <label for="x"><?php echo  __("X"); ?></label>                        <input type="text" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][<?php echo($j); ?>][x]" value="<?php echo(isset($gis_data[$a][$type][$i][$j]['x']) ? htmlspecialchars($gis_data[$a][$type][$i][$j]['x']) : ''); ?>" />                        <label for="y"><?php echo  __("Y"); ?></label>                        <input type="text" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][<?php echo($j); ?>][y]" value="<?php echo(isset($gis_data[$a][$type][$i][$j]['x']) ? htmlspecialchars($gis_data[$a][$type][$i][$j]['y']) : ''); ?>" /><?php               }?>                  <input type="submit" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][add_point]" class="add addPoint" value="<?php echo __("Add a point"); ?>"><?php           }                $caption = ($type == 'MULTILINESTRING') ? __('Add a linestring') : __('Add an inner ring');?>              <br/><input type="submit" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][add_line]" class="add addLine" value="<?php echo($caption); ?>"><?php            } elseif ($type == 'MULTIPOLYGON') {                $no_of_polygons = isset($gis_data[$a][$type]['no_of_polygons']) ? $gis_data[$a][$type]['no_of_polygons'] : 1;                if ($no_of_polygons < 1) {                    $no_of_polygons = 1;                }                if (isset($gis_data[$a][$type]['add_polygon'])) {                    $no_of_polygons++;                }                echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][no_of_polygons]" value="' . $no_of_polygons . '">');                for ($k = 0; $k < $no_of_polygons; $k++) {                    echo('<br/>'); echo __("Polygon"); echo($k + 1 . ':');                    $no_of_lines = isset($gis_data[$a][$type][$k]['no_of_lines']) ? $gis_data[$a][$type][$k]['no_of_lines'] : 1;                    if ($no_of_lines < 1) {                        $no_of_lines = 1;                    }                    if (isset($gis_data[$a][$type][$k]['add_line'])) {                        $no_of_lines++;                    }                    echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][' . $k . '][no_of_lines]" value="' . $no_of_lines . '">');                    for ($i = 0; $i < $no_of_lines; $i++) {                        echo('<br/><br/>');                        if ($i == 0) {                            echo __("Outer Ring") . ':';                        } else {                            echo __("Inner Ring"); echo($i . ':');                        }                        $no_of_points = isset($gis_data[$a][$type][$k][$i]['no_of_points']) ? $gis_data[$a][$type][$k][$i]['no_of_points'] : 4;                        if ($no_of_points < 4) {                            $no_of_points = 4;                        }                        if (isset($gis_data[$a][$type][$k][$i]['add_point'])) {                            $no_of_points++;                        }                        echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][' . $k . '][' . $i . '][no_of_points]" value="' . $no_of_points . '">');                        for ($j = 0; $j < $no_of_points; $j++) {                            echo('<br/>');                            printf(__('Point %d'), $j + 1);                            echo ':';?>                          <label for="x"><?php echo  __("X"); ?></label>                            <input type="text" name="<?php echo("gis_data[" . $a . "][" . $type . "][" . $k . "][" . $i . "][" . $j . "][x]"); ?>" value="<?php echo(isset($gis_data[$a][$type][$k][$i][$j]['x']) ? htmlspecialchars($gis_data[$a][$type][$k][$i][$j]['x']) : ''); ?>" />                            <label for="y"><?php echo  __("Y"); ?></label>                            <input type="text" name="<?php echo("gis_data[" . $a . "][" . $type . "][" . $k . "][" . $i . "][" . $j . "][y]"); ?>" value="<?php echo(isset($gis_data[$a][$type][$k][$i][$j]['y']) ? htmlspecialchars($gis_data[$a][$type][$k][$i][$j]['y']) : ''); ?>" /><?php                   }?>                      <input type="submit" name="<?php echo("gis_data[" . $a . "][" . $type . "][" . $k . "][" . $i . "][add_point]"); ?>" class="add addPoint" value="<?php echo __("Add a point"); ?>"><?php               }?>                  <br/><input type="submit" name="<?php echo("gis_data[" . $a . "][" . $type . "][" . $k . "][add_line]"); ?>" class="add addLine" value="<?php echo __('Add an inner ring') ?>"><br/><?php           }?>              <br/><input type="submit" name="<?php echo("gis_data[" . $a . "][" . $type . "][add_polygon]"); ?>" class="add addPolygon" value="<?php echo __('Add a polygon') ?>"><?php       }        }        if ($geom_type == 'GEOMETRYCOLLECTION') {?>          <br/><br/><input type="submit" name="gis_data[GEOMETRYCOLLECTION][add_geom]" class="add addGeom" value="<?php  echo __("Add geometry"); ?>" /><?php   }?>      </div>        <!-- End of data section -->        <br/><input type="submit" name="gis_data[save]" value="<?php echo __('Go') ?>">        <div id="gis_data_output">            <h3><?php echo __('Output'); ?></h3>            <p><?php echo __('Chose "GeomFromText" from the "Function" column and paste the below string into the "Value" field'); ?></p>            <textarea id="gis_data_textarea" cols="95" rows="5"><?php           echo($result);?>          </textarea>        </div>    </div>    </form><?php// If the call is to get the whole content, get the content in the buffer and make and AJAX response.if (isset($_REQUEST['get_gis_editor']) && $_REQUEST['get_gis_editor'] == true) {    $extra_data['gis_editor'] = ob_get_contents();    PMA_ajaxResponse(null, ob_end_clean(), $extra_data);}?></body><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions for kanji-encoding convert (available only with japanese * language) * * PHP4 configure requirements: *     --enable-mbstring --enable-mbstr-enc-trans --enable-mbregex * * 2002/2/22 - by Yukihiro Kawada <kawada@den.fujifilm.co.jp> * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets the php internal encoding codes and sets the available encoding * codes list * 2002/1/4 by Y.Kawada * * @global  string   the current encoding code * @global  string   the available encoding codes list * * @return  boolean  always true */function PMA_internal_enc_check(){    global $internal_enc, $enc_list;    $internal_enc = mb_internal_encoding();    if ($internal_enc == 'EUC-JP') {        $enc_list = 'ASCII,EUC-JP,SJIS,JIS';    } else {        $enc_list = 'ASCII,SJIS,EUC-JP,JIS';    }    return true;} // end of the 'PMA_internal_enc_check' function/** * Reverses SJIS & EUC-JP position in the encoding codes list * 2002/1/4 by Y.Kawada * * @global  string   the available encoding codes list * * @return  boolean  always true */function PMA_change_enc_order(){    global $enc_list;    $p            = explode(',', $enc_list);    if ($p[1] == 'EUC-JP') {        $enc_list = 'ASCII,SJIS,EUC-JP,JIS';    } else {        $enc_list = 'ASCII,EUC-JP,SJIS,JIS';    }    return true;} // end of the 'PMA_change_enc_order' function/** * Kanji string encoding convert * 2002/1/4 by Y.Kawada * * @param string   the string to convert * @param string   the destination encoding code * @param string   set 'kana' convert to JIS-X208-kana * * @global  string   the available encoding codes list * * @return  string   the converted string */function PMA_kanji_str_conv($str, $enc, $kana){    global $enc_list;    if ($enc == '' && $kana == '') {        return $str;    }    $nw       = mb_detect_encoding($str, $enc_list);    if ($kana == 'kana') {        $dist = mb_convert_kana($str, 'KV', $nw);        $str  = $dist;    }    if ($nw != $enc && $enc != '') {        $dist = mb_convert_encoding($str, $enc, $nw);    } else {        $dist = $str;    }    return $dist;} // end of the 'PMA_kanji_str_conv' function/** * Kanji file encoding convert * 2002/1/4 by Y.Kawada * * @param string   the name of the file to convert * @param string   the destination encoding code * @param string   set 'kana' convert to JIS-X208-kana * * @return  string   the name of the converted file */function PMA_kanji_file_conv($file, $enc, $kana){    if ($enc == '' && $kana == '') {        return $file;    }    $tmpfname = tempnam('', $enc);    $fpd      = fopen($tmpfname, 'wb');    $fps      = fopen($file, 'r');    PMA_change_enc_order();    while (!feof($fps)) {        $line = fgets($fps, 4096);        $dist = PMA_kanji_str_conv($line, $enc, $kana);        fputs($fpd, $dist);    } // end while    PMA_change_enc_order();    fclose($fps);    fclose($fpd);    unlink($file);    return $tmpfname;} // end of the 'PMA_kanji_file_conv' function/** * Defines radio form fields to switch between encoding modes * 2002/1/4 by Y.Kawada * * @param string   spaces character to prepend the output with * * @return  string   xhtml code for the radio controls */function PMA_set_enc_form($spaces){    return "\n"             /* l10n: This is currently used only in Japanese locales */           . $spaces . '<ul>' . "\n" . '<li>'           . $spaces . '<input type="radio" name="knjenc" value="" checked="checked" id="kj-none" /><label for="kj-none">' . _pgettext('None encoding conversion', 'None') . "</label>\n"           . $spaces . '<input type="radio" name="knjenc" value="EUC-JP" id="kj-euc" /><label for="kj-euc">EUC</label>' . "\n"           . $spaces . '<input type="radio" name="knjenc" value="SJIS" id="kj-sjis" /><label for="kj-sjis">SJIS</label>' . "\n"           . $spaces . '</li>' . "\n" . '<li>'           . $spaces . '<input type="checkbox" name="xkana" value="kana" id="kj-kana" />' . "\n"           /* l10n: This is currently used only in Japanese locales */           . $spaces . '<label for="kj-kana">' . __('Convert to Kana') . '</label><br />' . "\n"           . $spaces . '</li>' . "\n" . '</ul>'           ;} // end of the 'PMA_set_enc_form' functionPMA_internal_enc_check();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__imagelink_info(){    return array(        'info' => __('Displays an image and a link; the column contains the filename. The first option is a URL prefix like "http://www.example.com/". The second and third options are the width and the height in pixels.'),        );}/** * */function PMA_transformation_text_plain__imagelink($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    $transform_options = array ('string' => '<a href="' . (isset($options[0]) ? $options[0] : '') . $buffer . '" target="_blank"><img src="' . (isset($options[0]) ? $options[0] : '') . $buffer . '" border="0" width="' . (isset($options[1]) ? $options[1] : 100) . '" height="' . (isset($options[2]) ? $options[2] : 50) . '" />' . $buffer . '</a>');    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form handling code. * * @package PhpMyAdmin *//** * Base class for forms, loads default configuration options, checks allowed * values etc. * * @package    phpMyAdmin */class Form{    /**     * Form name     * @var string     */    public $name;    /**     * Arbitrary index, doesn't affect class' behavior     * @var int     */    public $index;    /**     * Form fields (paths), filled by {@link readFormPaths()}, indexed by field name     * @var array     */    public $fields;    /**     * Stores default values for some fields (eg. pmadb tables)     * @var array     */    public $default;    /**     * Caches field types, indexed by field names     * @var array     */    private $fieldsTypes;    /**     * Constructor, reads default config values     *     * @param string  $form_name     * @param array   $form     * @param int     $index      arbitrary index, stored in Form::$index     */    public function __construct($form_name, array $form, $index = null)    {        $this->index = $index;        $this->loadForm($form_name, $form);    }    /**     * Returns type of given option     *     * @param   string  $option_name path or field name     * @return  string|null  one of: boolean, integer, double, string, select, array     */    public function getOptionType($option_name)    {        $key = ltrim(substr($option_name, strrpos($option_name, '/')), '/');        return isset($this->fieldsTypes[$key])            ? $this->fieldsTypes[$key]            : null;    }    /**     * Returns allowed values for select fields     *     * @param   string  $option_path     * @return  array     */    public function getOptionValueList($option_path)    {        $value = ConfigFile::getInstance()->getDbEntry($option_path);        if ($value === null) {            trigger_error("$option_path - select options not defined", E_USER_ERROR);            return array();        }        if (!is_array($value)) {            trigger_error("$option_path - not a static value list", E_USER_ERROR);            return array();        }        // convert array('#', 'a', 'b') to array('a', 'b')        if (isset($value[0]) && $value[0] === '#') {            // remove first element ('#')            array_shift($value);        } else {            // convert value list array('a', 'b') to array('a' => 'a', 'b' => 'b')            $has_string_keys = false;            $keys = array();            for ($i = 0; $i < count($value); $i++) {                if (!isset($value[$i])) {                    $has_string_keys = true;                    break;                }                $keys[] = is_bool($value[$i]) ? (int)$value[$i] : $value[$i];            }            if (!$has_string_keys) {                $value = array_combine($keys, $value);            }        }        // $value has keys and value names, return it        return $value;    }    /**     * array_walk callback function, reads path of form fields from     * array (see file comment in setup.forms.php or user_preferences.forms.inc)     *     * @param   mixed   $value     * @param   mixed   $key     * @param   mixed   $prefix     */    private function _readFormPathsCallback($value, $key, $prefix)    {        static $group_counter = 0;        if (is_array($value)) {            $prefix .= $key . '/';            array_walk($value, array($this, '_readFormPathsCallback'), $prefix);        } else {            if (!is_int($key)) {                $this->default[$prefix . $key] = $value;                $value = $key;            }            // add unique id to group ends            if ($value == ':group:end') {                $value .= ':' . $group_counter++;            }            $this->fields[] = $prefix . $value;        }    }    /**     * Reads form paths to {@link $fields}     *     * @param array $form     */    protected function readFormPaths($form)    {        // flatten form fields' paths and save them to $fields        $this->fields = array();        array_walk($form, array($this, '_readFormPathsCallback'), '');        // $this->fields is an array of the form: [0..n] => 'field path'        // change numeric indexes to contain field names (last part of the path)        $paths = $this->fields;        $this->fields = array();        foreach ($paths as $path) {            $key = ltrim(substr($path, strrpos($path, '/')), '/');            $this->fields[$key] = $path;        }        // now $this->fields is an array of the form: 'field name' => 'field path'    }    /**     * Reads fields' types to $this->fieldsTypes     *     */    protected function readTypes()    {        $cf = ConfigFile::getInstance();        foreach ($this->fields as $name => $path) {            if (strpos($name, ':group:') === 0) {                $this->fieldsTypes[$name] = 'group';                continue;            }            $v = $cf->getDbEntry($path);            if ($v !== null) {                $type = is_array($v) ? 'select' : $v;            } else {                $type = gettype($cf->getDefault($path));            }            $this->fieldsTypes[$name] = $type;        }    }    /**     * Reads form settings and prepares class to work with given subset of     * config file     *     * @param string $form_name     * @param array  $form     */    public function loadForm($form_name, $form)    {        $this->name = $form_name;        $this->readFormPaths($form);        $this->readTypes();    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Display table relations for viewing and editing * * includes phpMyAdmin relations and InnoDB relations * * @todo fix name handling: currently names with dots (.) are not properly handled for internal relations (but foreign keys relations are correct) * @todo foreign key constraints require both fields being of equal type and size * @todo check foreign fields to be from same type and size, all other makes no sense * @todo add an link to create an index required for constraints, or an option to do automatically * @todo if above todos are fullfilled we can add all fields meet requirements in the select dropdown * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'tbl_relation.js';require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_sql.php';/** * Gets tables informations */require_once './libraries/tbl_info.inc.php';// Note: in libraries/tbl_links.inc.php we get and display the table comment.// For InnoDB, this comment contains the REFER information but any update// has not been done yet (will be done in tbl_relation.php later).$avoid_show_comment = true;/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';$options_array = array(    'CASCADE'   => 'CASCADE',    'SET_NULL'  => 'SET NULL',    'NO_ACTION' => 'NO ACTION',    'RESTRICT'  => 'RESTRICT',);/** * Generate dropdown choices * * @param string $dropdown_question Message to display * @param string $select_name       Name of the <select> field * @param array  $choices           Choices for dropdown * @param string $selected_value    Selected value * * @return  string   The existing value (for selected) * * @access  public */function PMA_generate_dropdown($dropdown_question, $select_name, $choices, $selected_value){    echo htmlspecialchars($dropdown_question) . '&nbsp;&nbsp;';    echo '<select name="' . htmlspecialchars($select_name) . '">' . "\n";    foreach ($choices as $one_value => $one_label) {        echo '<option value="' . htmlspecialchars($one_value) . '"';        if ($selected_value == $one_value) {            echo ' selected="selected" ';        }        echo '>' . htmlspecialchars($one_label) . '</option>' . "\n";    }    echo '</select>' . "\n";}/** * Split a string on backquote pairs * * @param string $text original string * * @return  array   containing the elements (and their surrounding backquotes) * * @access  public */function PMA_backquote_split($text){    $elements = array();    $final_pos = strlen($text) - 1;    $pos = 0;    while ($pos <= $final_pos) {        $first_backquote = strpos($text, '`', $pos);        $second_backquote = strpos($text, '`', $first_backquote + 1);        // after the second one, there might be another one which means        // this is an escaped backquote        if ($second_backquote < $final_pos && '`' == $text[$second_backquote + 1]) {            $second_backquote = strpos($text, '`', $second_backquote + 2);        }        if (false === $first_backquote || false === $second_backquote) {            break;        }        $elements[] = substr($text, $first_backquote, $second_backquote - $first_backquote + 1);        $pos = $second_backquote + 1;    }    return($elements);}/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam();/** * Updates */if ($cfgRelation['relwork']) {    $existrel = PMA_getForeigners($db, $table, '', 'internal');}if (PMA_foreignkey_supported($tbl_type)) {    $existrel_foreign = PMA_getForeigners($db, $table, '', 'foreign');}if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);}// will be used in the logic for internal relations and foreign keys:$me_fields_name = isset($_REQUEST['fields_name'])    ? $_REQUEST['fields_name']    : null;// u p d a t e s   f o r   I n t e r n a l    r e l a t i o n sif (isset($destination) && $cfgRelation['relwork']) {    foreach ($destination as $master_field_md5 => $foreign_string) {        $upd_query = false;        // Map the fieldname's md5 back to its real name        $master_field = $me_fields_name[$master_field_md5];        if (! empty($foreign_string)) {            $foreign_string = trim($foreign_string, '`');            list($foreign_db, $foreign_table, $foreign_field) = explode('.', $foreign_string);            if (! isset($existrel[$master_field])) {                $upd_query  = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation'])                            . '(master_db, master_table, master_field, foreign_db, foreign_table, foreign_field)'                            . ' values('                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($table) . '\', '                            . '\'' . PMA_sqlAddSlashes($master_field) . '\', '                            . '\'' . PMA_sqlAddSlashes($foreign_db) . '\', '                            . '\'' . PMA_sqlAddSlashes($foreign_table) . '\','                            . '\'' . PMA_sqlAddSlashes($foreign_field) . '\')';            } elseif ($existrel[$master_field]['foreign_db'] . '.' .$existrel[$master_field]['foreign_table'] . '.' . $existrel[$master_field]['foreign_field'] != $foreign_string) {                $upd_query  = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation']) . ' SET'                            . ' foreign_db       = \'' . PMA_sqlAddSlashes($foreign_db) . '\', '                            . ' foreign_table    = \'' . PMA_sqlAddSlashes($foreign_table) . '\', '                            . ' foreign_field    = \'' . PMA_sqlAddSlashes($foreign_field) . '\' '                            . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                            . ' AND master_field = \'' . PMA_sqlAddSlashes($master_field) . '\'';            } // end if... else....        } elseif (isset($existrel[$master_field])) {            $upd_query      = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation'])                            . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                            . ' AND master_field = \'' . PMA_sqlAddSlashes($master_field) . '\'';        } // end if... else....        if ($upd_query) {            PMA_query_as_controluser($upd_query);        }    } // end while} // end if (updates for internal relations)// u p d a t e s    f o r    f o r e i g n    k e y s// (for now, one index name only; we keep the definitions if the// foreign db is not the same)// I use $sql_query to be able to display directly the query via// PMA_showMessage()if (isset($_REQUEST['destination_foreign'])) {    $display_query = '';    $seen_error = false;    foreach ($_REQUEST['destination_foreign'] as $master_field_md5 => $foreign_string) {        // Map the fieldname's md5 back to it's real name        $master_field = $me_fields_name[$master_field_md5];        if (! empty($foreign_string)) {            list($foreign_db, $foreign_table, $foreign_field) = PMA_backquote_split($foreign_string);            if (! isset($existrel_foreign[$master_field])) {                // no key defined for this field                // The next few lines are repeated below, so they                // could be put in an include file                // Note: I tried to enclose the db and table name with                // backquotes but MySQL 4.0.16 did not like the syntax                // (for example: `base2`.`table1`)                $sql_query  = 'ALTER TABLE ' . PMA_backquote($table)                            . ' ADD FOREIGN KEY ('                            . PMA_backquote($master_field) . ')'                            . ' REFERENCES '                            . $foreign_db . '.'                            . $foreign_table . '('                            . $foreign_field . ')';                if (! empty($_REQUEST['on_delete'][$master_field_md5])) {                    $sql_query .= ' ON DELETE ' . $options_array[$_REQUEST['on_delete'][$master_field_md5]];                }                if (! empty($_REQUEST['on_update'][$master_field_md5])) {                    $sql_query .= ' ON UPDATE ' . $options_array[$_REQUEST['on_update'][$master_field_md5]];                }                $sql_query .= ';';                $display_query .= $sql_query . "\n";                // end repeated code            } elseif (PMA_backquote($existrel_foreign[$master_field]['foreign_db']) != $foreign_db                || PMA_backquote($existrel_foreign[$master_field]['foreign_table']) != $foreign_table                || PMA_backquote($existrel_foreign[$master_field]['foreign_field']) != $foreign_field                || ($_REQUEST['on_delete'][$master_field_md5] != (!empty($existrel_foreign[$master_field]['on_delete']) ? $existrel_foreign[$master_field]['on_delete'] : 'RESTRICT'))                || ($_REQUEST['on_update'][$master_field_md5] != (!empty($existrel_foreign[$master_field]['on_update']) ? $existrel_foreign[$master_field]['on_update'] : 'RESTRICT'))                   ) {                // another foreign key is already defined for this field                // or                // an option has been changed for ON DELETE or ON UPDATE                // remove existing key and add the new one                $sql_query  = 'ALTER TABLE ' . PMA_backquote($table)                            . ' DROP FOREIGN KEY '                            . PMA_backquote($existrel_foreign[$master_field]['constraint']) . ', '                            . 'ADD FOREIGN KEY ('                            . PMA_backquote($master_field) . ')'                            . ' REFERENCES '                            . $foreign_db . '.'                            . $foreign_table . '('                            . $foreign_field . ')';                if (! empty($_REQUEST['on_delete'][$master_field_md5])) {                    $sql_query   .= ' ON DELETE '                        . $options_array[$_REQUEST['on_delete'][$master_field_md5]];                }                if (! empty($_REQUEST['on_update'][$master_field_md5])) {                    $sql_query   .= ' ON UPDATE '                        . $options_array[$_REQUEST['on_update'][$master_field_md5]];                }                $sql_query .= ';';                $display_query .= $sql_query . "\n";            } // end if... else....        } elseif (isset($existrel_foreign[$master_field])) {            $sql_query  = 'ALTER TABLE ' . PMA_backquote($table)                    . ' DROP FOREIGN KEY '                    . PMA_backquote($existrel_foreign[$master_field]['constraint']);            $sql_query .= ';';            $display_query .= $sql_query . "\n";        } // end if... else....        if (! empty($sql_query)) {            PMA_DBI_try_query($sql_query);            $tmp_error = PMA_DBI_getError();            if (! empty($tmp_error)) {                $seen_error = true;            }            if (substr($tmp_error, 1, 4) == '1216'                ||  substr($tmp_error, 1, 4) == '1452'            ) {                PMA_mysqlDie($tmp_error, $sql_query, false, '', false);                echo PMA_showMySQLDocu('manual_Table_types', 'InnoDB_foreign_key_constraints') . "\n";            }            if (substr($tmp_error, 1, 4) == '1005') {                $message = PMA_Message::error(__('Error creating foreign key on %1$s (check data types)'));                $message->addParam($master_field);                $message->display();                echo PMA_showMySQLDocu('manual_Table_types', 'InnoDB_foreign_key_constraints') . "\n";            }            unset($tmp_error);            $sql_query = '';        }    } // end foreach    if (!empty($display_query)) {        if ($seen_error) {            PMA_showMessage(__('Error'), null, 'error');        } else {            PMA_showMessage(__('Your SQL query has been executed successfully'), null, 'success');        }    }} // end if isset($destination_foreign)// U p d a t e s   f o r   d i s p l a y   f i e l dif ($cfgRelation['displaywork'] && isset($display_field)) {    $upd_query = false;    if ($disp) {        if ($display_field != '') {            $upd_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' SET display_field = \'' . PMA_sqlAddSlashes($display_field) . '\''                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        } else {            $upd_query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        }    } elseif ($display_field != '') {        $upd_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                   . '(db_name, table_name, display_field) '                   . ' VALUES('                   . '\'' . PMA_sqlAddSlashes($db) . '\','                   . '\'' . PMA_sqlAddSlashes($table) . '\','                   . '\'' . PMA_sqlAddSlashes($display_field) . '\')';    }    if ($upd_query) {        PMA_query_as_controluser($upd_query);    }} // end if// If we did an update, refresh our dataif (isset($destination) && $cfgRelation['relwork']) {    $existrel = PMA_getForeigners($db, $table, '', 'internal');}if (isset($destination_foreign) && PMA_foreignkey_supported($tbl_type)) {    $existrel_foreign = PMA_getForeigners($db, $table, '', 'foreign');}if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);}/** * Dialog */// common formecho '<form method="post" action="tbl_relation.php">' . "\n";echo PMA_generate_common_hidden_inputs($db, $table);// relationsif ($cfgRelation['relwork'] || PMA_foreignkey_supported($tbl_type)) {    // To choose relations we first need all tables names in current db    // and if the main table supports foreign keys    // we use SHOW TABLE STATUS because we need to find other tables of the    // same engine.    if (PMA_foreignkey_supported($tbl_type)) {        $tab_query           = 'SHOW TABLE STATUS FROM ' . PMA_backquote($db);        // [0] of the row is the name        // [1] is the type    } else {        $tab_query           = 'SHOW TABLES FROM ' . PMA_backquote($db);        // [0] of the row is the name    }    $tab_rs              = PMA_DBI_query($tab_query, null, PMA_DBI_QUERY_STORE);    $selectboxall[] = '';    $selectboxall_foreign[] = '';    while ($curr_table = PMA_DBI_fetch_row($tab_rs)) {        $current_table = new PMA_Table($curr_table[0], $db);        // explicitely ask for non-quoted list of indexed columns        $selectboxall = array_merge($selectboxall, $current_table->getUniqueColumns($backquoted = false));        // if foreign keys are supported, collect all keys from other        // tables of the same engine        if (PMA_foreignkey_supported($tbl_type)            && isset($curr_table[1])            && strtoupper($curr_table[1]) == $tbl_type        ) {             // explicitely ask for non-quoted list of indexed columns             // need to obtain backquoted values to support dots inside values             $selectboxall_foreign = array_merge($selectboxall_foreign, $current_table->getIndexedColumns($backquoted = true));        }    } // end while over tables} // end if// Now find out the columns of our $table// need to use PMA_DBI_QUERY_STORE with PMA_DBI_num_rows() in mysqli$columns = PMA_DBI_get_columns($db, $table);if (count($columns) > 0) {    foreach ($columns as $row) {        $save_row[] = $row;    }    $saved_row_cnt  = count($save_row);    ?>    <fieldset>    <legend><?php echo __('Relations'); ?></legend>    <table>    <tr><th><?php echo __('Column'); ?></th>    <?php    if ($cfgRelation['relwork']) {        echo '<th>' . __('Internal relation');        if (PMA_foreignkey_supported($tbl_type)) {            echo PMA_showHint(__('An internal relation is not necessary when a corresponding FOREIGN KEY relation exists.'));        }        echo '</th>';    }    if (PMA_foreignkey_supported($tbl_type)) {        // this does not have to be translated, it's part of the MySQL syntax        echo '<th colspan="2">' . __('Foreign key constraint') . ' (' . $tbl_type . ')';        echo '</th>';    }    ?>    </tr>    <?php    $odd_row = true;    for ($i = 0; $i < $saved_row_cnt; $i++) {        $myfield = $save_row[$i]['Field'];        // Use an md5 as array index to avoid having special characters in the name atttibure (see bug #1746964 )        $myfield_md5 = md5($myfield);        $myfield_html = htmlspecialchars($myfield);        ?>    <tr class="<?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">        <td align="center">            <strong><?php echo $myfield_html; ?></strong>            <input type="hidden" name="fields_name[<?php echo $myfield_md5; ?>]" value="<?php echo $myfield_html; ?>"/>        </td>        <?php        if ($cfgRelation['relwork']) {            ?>        <td><select name="destination[<?php echo $myfield_md5; ?>]">            <?php            // PMA internal relations            if (isset($existrel[$myfield])) {                $foreign_field    = $existrel[$myfield]['foreign_db'] . '.'                         . $existrel[$myfield]['foreign_table'] . '.'                         . $existrel[$myfield]['foreign_field'];            } else {                $foreign_field    = false;            }            $seen_key = false;            foreach ($selectboxall as $value) {                echo '                '                     . '<option value="' . htmlspecialchars($value) . '"';                if ($foreign_field && $value == $foreign_field) {                    echo ' selected="selected"';                    $seen_key = true;                }                echo '>' . htmlspecialchars($value) . '</option>'. "\n";            } // end while            // if the link defined in relationtable points to a foreign field            // that is not a key in the foreign table, we show the link            // (will not be shown with an arrow)            if ($foreign_field && !$seen_key) {                echo '                '                    .'<option value="' . htmlspecialchars($foreign_field) . '"'                    .' selected="selected"'                    .'>' . $foreign_field . '</option>'. "\n";            }            ?>            </select>        </td>            <?php        } // end if (internal relations)        if (PMA_foreignkey_supported($tbl_type)) {            echo '<td>';            if (!empty($save_row[$i]['Key'])) {                ?>            <span class="formelement">            <select name="destination_foreign[<?php echo $myfield_md5; ?>]" class="referenced_column_dropdown">                <?php                if (isset($existrel_foreign[$myfield])) {                    // need to backquote to support a dot character inside                    // an element                    $foreign_field    = PMA_backquote($existrel_foreign[$myfield]['foreign_db']) . '.'                             . PMA_backquote($existrel_foreign[$myfield]['foreign_table']) . '.'                             . PMA_backquote($existrel_foreign[$myfield]['foreign_field']);                } else {                    $foreign_field    = false;                }                $found_foreign_field = false;                foreach ($selectboxall_foreign as $value) {                    echo '                '                         . '<option value="' . htmlspecialchars($value) . '"';                    if ($foreign_field && $value == $foreign_field) {                        echo ' selected="selected"';                        $found_foreign_field = true;                    }                    echo '>' . htmlspecialchars($value) . '</option>'. "\n";                } // end while                // we did not find the foreign field in the tables of current db,                // must be defined in another db so show it to avoid erasing it                if (!$found_foreign_field && $foreign_field) {                    echo '                '                         . '<option value="' . htmlspecialchars($foreign_field) . '"';                    echo ' selected="selected"';                    echo '>' . $foreign_field . '</option>' . "\n";                }                ?>            </select>            </span>            <span class="formelement">                <?php                // For ON DELETE and ON UPDATE, the default action                // is RESTRICT as per MySQL doc; however, a SHOW CREATE TABLE                // won't display the clause if it's set as RESTRICT.                PMA_generate_dropdown('ON DELETE',                    'on_delete[' . $myfield_md5 . ']',                    $options_array,                    isset($existrel_foreign[$myfield]['on_delete']) ? $existrel_foreign[$myfield]['on_delete']: 'RESTRICT');                echo '</span>' . "\n"                    .'<span class="formelement">' . "\n";                PMA_generate_dropdown('ON UPDATE',                    'on_update[' . $myfield_md5 . ']',                    $options_array,                    isset($existrel_foreign[$myfield]['on_update']) ? $existrel_foreign[$myfield]['on_update']: 'RESTRICT');                echo '</span>' . "\n";            } else {                echo __('No index defined!');            } // end if (a key exists)            echo '        </td>';        } // end if (InnoDB)        ?>    </tr>        <?php    } // end for    unset( $myfield, $myfield_md5, $myfield_html);    echo '    </table>' . "\n";    echo '</fieldset>' . "\n";    if ($cfgRelation['displaywork']) {        // Get "display_field" infos        $disp = PMA_getDisplayField($db, $table);        ?>    <fieldset>        <label><?php echo __('Choose column to display') . ': '; ?></label>        <select name="display_field">            <option value="">---</option>        <?php        foreach ($save_row AS $row) {            echo '            <option value="' . htmlspecialchars($row['Field']) . '"';            if (isset($disp) && $row['Field'] == $disp) {                echo ' selected="selected"';            }            echo '>' . htmlspecialchars($row['Field']) . '</option>'. "\n";        } // end while        ?>        </select>    </fieldset>        <?php    } // end if (displayworks)    ?>    <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Save'); ?>" />    </fieldset></form>    <?php} // end if (we have columns in this table)/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/bookmark.lib.php';// Check parametersPMA_checkParameters(array('db', 'table'));$db_is_information_schema = PMA_is_system_schema($db);/** * Set parameters for links * @deprecated */$url_query = PMA_generate_common_url($db, $table);$url_params['db']    = $db;$url_params['table'] = $table;/** * Defines the urls to return to in case of error in a sql statement */$err_url_0 = $cfg['DefaultTabDatabase'] . PMA_generate_common_url(array('db' => $db,));$err_url   = $cfg['DefaultTabTable'] . PMA_generate_common_url($url_params);/** * Ensures the database and the table exist (else move to the "parent" script) */require_once './libraries/db_table_exists.lib.php';?>
<?php/* AUTOGENERATED CONTENT - DO NOT EDIT *//* ALL CHANGES WILL BE UNDONE *//* RUN './scripts/generate-sprites' TO UPDATE THIS FILE */function PMA_sprites() {    return array(        'b_bookmark' => array(            'position' => '1',            'width'    => '16',            'height'   => '16'        ),        'b_browse' => array(            'position' => '2',            'width'    => '16',            'height'   => '16'        ),        'b_calendar' => array(            'position' => '3',            'width'    => '16',            'height'   => '16'        ),        'b_chart' => array(            'position' => '4',            'width'    => '16',            'height'   => '16'        ),        'b_close' => array(            'position' => '5',            'width'    => '16',            'height'   => '16'        ),        'b_comment' => array(            'position' => '6',            'width'    => '16',            'height'   => '16'        ),        'bd_browse' => array(            'position' => '7',            'width'    => '16',            'height'   => '16'        ),        'b_dbstatistics' => array(            'position' => '8',            'width'    => '16',            'height'   => '16'        ),        'bd_deltbl' => array(            'position' => '9',            'width'    => '16',            'height'   => '16'        ),        'bd_drop' => array(            'position' => '10',            'width'    => '16',            'height'   => '16'        ),        'bd_edit' => array(            'position' => '11',            'width'    => '16',            'height'   => '16'        ),        'b_deltbl' => array(            'position' => '12',            'width'    => '16',            'height'   => '16'        ),        'bd_empty' => array(            'position' => '13',            'width'    => '16',            'height'   => '16'        ),        'bd_export' => array(            'position' => '14',            'width'    => '16',            'height'   => '16'        ),        'bd_ftext' => array(            'position' => '15',            'width'    => '16',            'height'   => '16'        ),        'bd_index' => array(            'position' => '16',            'width'    => '16',            'height'   => '16'        ),        'bd_insrow' => array(            'position' => '17',            'width'    => '16',            'height'   => '16'        ),        'bd_nextpage' => array(            'position' => '18',            'width'    => '8',            'height'   => '13'        ),        'b_docs' => array(            'position' => '19',            'width'    => '16',            'height'   => '16'        ),        'bd_primary' => array(            'position' => '20',            'width'    => '16',            'height'   => '16'        ),        'b_drop' => array(            'position' => '21',            'width'    => '16',            'height'   => '16'        ),        'bd_sbrowse' => array(            'position' => '22',            'width'    => '10',            'height'   => '10'        ),        'bd_select' => array(            'position' => '23',            'width'    => '16',            'height'   => '16'        ),        'bd_spatial' => array(            'position' => '24',            'width'    => '16',            'height'   => '16'        ),        'bd_unique' => array(            'position' => '25',            'width'    => '16',            'height'   => '16'        ),        'b_edit' => array(            'position' => '26',            'width'    => '16',            'height'   => '16'        ),        'b_empty' => array(            'position' => '27',            'width'    => '16',            'height'   => '16'        ),        'b_engine' => array(            'position' => '28',            'width'    => '16',            'height'   => '16'        ),        'b_event_add' => array(            'position' => '29',            'width'    => '16',            'height'   => '16'        ),        'b_events' => array(            'position' => '30',            'width'    => '16',            'height'   => '16'        ),        'b_export' => array(            'position' => '31',            'width'    => '16',            'height'   => '16'        ),        'b_ftext' => array(            'position' => '32',            'width'    => '16',            'height'   => '16'        ),        'b_help' => array(            'position' => '33',            'width'    => '11',            'height'   => '11'        ),        'b_home' => array(            'position' => '34',            'width'    => '16',            'height'   => '16'        ),        'b_import' => array(            'position' => '35',            'width'    => '16',            'height'   => '16'        ),        'b_index' => array(            'position' => '36',            'width'    => '16',            'height'   => '16'        ),        'b_info' => array(            'position' => '37',            'width'    => '11',            'height'   => '11'        ),        'b_inline_edit' => array(            'position' => '38',            'width'    => '16',            'height'   => '16'        ),        'b_insrow' => array(            'position' => '39',            'width'    => '16',            'height'   => '16'        ),        'b_minus' => array(            'position' => '40',            'width'    => '9',            'height'   => '9'        ),        'b_more' => array(            'position' => '41',            'width'    => '16',            'height'   => '16'        ),        'b_newdb' => array(            'position' => '42',            'width'    => '16',            'height'   => '16'        ),        'b_newtbl' => array(            'position' => '43',            'width'    => '16',            'height'   => '16'        ),        'b_nextpage' => array(            'position' => '44',            'width'    => '16',            'height'   => '16'        ),        'b_plus' => array(            'position' => '45',            'width'    => '9',            'height'   => '9'        ),        'b_primary' => array(            'position' => '46',            'width'    => '16',            'height'   => '16'        ),        'b_print' => array(            'position' => '47',            'width'    => '16',            'height'   => '16'        ),        'b_props' => array(            'position' => '48',            'width'    => '16',            'height'   => '16'        ),        'b_relations' => array(            'position' => '49',            'width'    => '16',            'height'   => '16'        ),        'b_routine_add' => array(            'position' => '50',            'width'    => '16',            'height'   => '16'        ),        'b_routines' => array(            'position' => '51',            'width'    => '16',            'height'   => '16'        ),        'b_save' => array(            'position' => '52',            'width'    => '16',            'height'   => '16'        ),        'b_sbrowse' => array(            'position' => '53',            'width'    => '10',            'height'   => '10'        ),        'b_search' => array(            'position' => '54',            'width'    => '16',            'height'   => '16'        ),        'b_selboard' => array(            'position' => '55',            'width'    => '16',            'height'   => '16'        ),        'b_select' => array(            'position' => '56',            'width'    => '16',            'height'   => '16'        ),        'b_snewtbl' => array(            'position' => '57',            'width'    => '10',            'height'   => '10'        ),        'b_spatial' => array(            'position' => '58',            'width'    => '16',            'height'   => '16'        ),        'b_sqlhelp' => array(            'position' => '59',            'width'    => '16',            'height'   => '16'        ),        'b_sql' => array(            'position' => '60',            'width'    => '16',            'height'   => '16'        ),        'b_tblanalyse' => array(            'position' => '61',            'width'    => '16',            'height'   => '16'        ),        'b_tblexport' => array(            'position' => '62',            'width'    => '16',            'height'   => '16'        ),        'b_tblimport' => array(            'position' => '63',            'width'    => '16',            'height'   => '16'        ),        'b_tblops' => array(            'position' => '64',            'width'    => '16',            'height'   => '16'        ),        'b_tbloptimize' => array(            'position' => '65',            'width'    => '16',            'height'   => '16'        ),        'b_tipp' => array(            'position' => '66',            'width'    => '16',            'height'   => '16'        ),        'b_trigger_add' => array(            'position' => '67',            'width'    => '16',            'height'   => '16'        ),        'b_triggers' => array(            'position' => '68',            'width'    => '16',            'height'   => '16'        ),        'b_unique' => array(            'position' => '69',            'width'    => '16',            'height'   => '16'        ),        'b_usradd' => array(            'position' => '70',            'width'    => '16',            'height'   => '16'        ),        'b_usrcheck' => array(            'position' => '71',            'width'    => '16',            'height'   => '16'        ),        'b_usrdrop' => array(            'position' => '72',            'width'    => '16',            'height'   => '16'        ),        'b_usredit' => array(            'position' => '73',            'width'    => '16',            'height'   => '16'        ),        'b_usrlist' => array(            'position' => '74',            'width'    => '16',            'height'   => '16'        ),        'b_view' => array(            'position' => '75',            'width'    => '16',            'height'   => '16'        ),        'b_views' => array(            'position' => '76',            'width'    => '16',            'height'   => '16'        ),        'col_drop' => array(            'position' => '77',            'width'    => '16',            'height'   => '16'        ),        'docs_menu_bg' => array(            'position' => '78',            'width'    => '2',            'height'   => '2'        ),        'eye_grey' => array(            'position' => '79',            'width'    => '16',            'height'   => '16'        ),        'eye' => array(            'position' => '80',            'width'    => '16',            'height'   => '16'        ),        'item_ltr' => array(            'position' => '81',            'width'    => '5',            'height'   => '9'        ),        'item_rtl' => array(            'position' => '82',            'width'    => '5',            'height'   => '9'        ),        'more' => array(            'position' => '83',            'width'    => '13',            'height'   => '16'        ),        'new_data_hovered' => array(            'position' => '84',            'width'    => '16',            'height'   => '16'        ),        'new_data' => array(            'position' => '85',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected_hovered' => array(            'position' => '86',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected' => array(            'position' => '87',            'width'    => '16',            'height'   => '16'        ),        'new_struct_hovered' => array(            'position' => '88',            'width'    => '16',            'height'   => '16'        ),        'new_struct' => array(            'position' => '89',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected_hovered' => array(            'position' => '90',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected' => array(            'position' => '91',            'width'    => '16',            'height'   => '16'        ),        's_asci' => array(            'position' => '92',            'width'    => '16',            'height'   => '16'        ),        's_asc' => array(            'position' => '93',            'width'    => '11',            'height'   => '9'        ),        's_cancel' => array(            'position' => '94',            'width'    => '16',            'height'   => '16'        ),        's_cog' => array(            'position' => '95',            'width'    => '16',            'height'   => '16'        ),        's_db' => array(            'position' => '96',            'width'    => '16',            'height'   => '16'        ),        's_desc' => array(            'position' => '97',            'width'    => '11',            'height'   => '9'        ),        's_error2' => array(            'position' => '98',            'width'    => '11',            'height'   => '11'        ),        's_error' => array(            'position' => '99',            'width'    => '16',            'height'   => '16'        ),        's_host' => array(            'position' => '100',            'width'    => '16',            'height'   => '16'        ),        's_lang' => array(            'position' => '101',            'width'    => '16',            'height'   => '16'        ),        's_loggoff' => array(            'position' => '102',            'width'    => '16',            'height'   => '16'        ),        's_notice' => array(            'position' => '103',            'width'    => '16',            'height'   => '16'        ),        's_passwd' => array(            'position' => '104',            'width'    => '16',            'height'   => '16'        ),        's_really' => array(            'position' => '105',            'width'    => '11',            'height'   => '11'        ),        's_reload' => array(            'position' => '106',            'width'    => '16',            'height'   => '16'        ),        's_replication' => array(            'position' => '107',            'width'    => '16',            'height'   => '16'        ),        's_rights' => array(            'position' => '108',            'width'    => '16',            'height'   => '16'        ),        's_sortable' => array(            'position' => '109',            'width'    => '11',            'height'   => '15'        ),        's_status' => array(            'position' => '110',            'width'    => '16',            'height'   => '16'        ),        's_success' => array(            'position' => '111',            'width'    => '16',            'height'   => '16'        ),        's_sync' => array(            'position' => '112',            'width'    => '16',            'height'   => '16'        ),        's_tbl' => array(            'position' => '113',            'width'    => '16',            'height'   => '16'        ),        's_theme' => array(            'position' => '114',            'width'    => '16',            'height'   => '16'        ),        's_vars' => array(            'position' => '115',            'width'    => '16',            'height'   => '16'        ),        's_views' => array(            'position' => '116',            'width'    => '10',            'height'   => '10'        ),        'window-new' => array(            'position' => '117',            'width'    => '16',            'height'   => '16'        ),    );}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * display list of server engines and additonal information about them * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * requirements */require_once './libraries/common.inc.php';/** * Does the common work */require './libraries/server_common.inc.php';require './libraries/StorageEngine.class.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Did the user request information about a certain storage engine? */if (empty($_REQUEST['engine']) || ! PMA_StorageEngine::isValid($_REQUEST['engine'])) {    /**     * Displays the sub-page heading     */    echo '<h2>' . "\n"       . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('b_engine.png') : '')       . "\n" . __('Storage Engines') . "\n"       . '</h2>' . "\n";    /**     * Displays the table header     */    echo '<table class="noclick">' . "\n"       . '<thead>' . "\n"       . '<tr><th>' . __('Storage Engine') . '</th>' . "\n"       . '    <th>' . __('Description') . '</th>' . "\n"       . '</tr>' . "\n"       . '</thead>' . "\n"       . '<tbody>' . "\n";    /**     * Listing the storage engines     */    $odd_row = true;    foreach (PMA_StorageEngine::getStorageEngines() as $engine => $details) {        echo '<tr class="'           . ($odd_row ? 'odd' : 'even')           . ($details['Support'] == 'NO' || $details['Support'] == 'DISABLED'                ? ' disabled'                : '')           . '">' . "\n"           . '    <td><a href="./server_engines.php'           . PMA_generate_common_url(array('engine' => $engine)) . '">' . "\n"           . '            ' . htmlspecialchars($details['Engine']) . "\n"           . '        </a></td>' . "\n"           . '    <td>' . htmlspecialchars($details['Comment']) . '</td>' . "\n"           . '</tr>' . "\n";        $odd_row = !$odd_row;    }    $PMA_Config = $GLOBALS['PMA_Config'];    if ($PMA_Config->get('BLOBSTREAMING_PLUGINS_EXIST')) {        // Special case for PBMS daemon which is not listed as an engine        echo '<tr class="'            . ($odd_row ? 'odd' : 'even')            .  '">' . "\n"            . '    <td><a href="./server_engines.php'            . PMA_generate_common_url(array('engine' => "PBMS")) . '">' . "\n"            . '            '  . "PBMS\n"            . '        </a></td>' . "\n"            . '    <td>' . htmlspecialchars("PrimeBase MediaStream (PBMS) daemon") . '</td>' . "\n"            . '</tr>' . "\n";    }   unset($odd_row, $engine, $details);    echo '</tbody>' . "\n"       . '</table>' . "\n";} else {    /**     * Displays details about a given Storage Engine     */    $engine_plugin = PMA_StorageEngine::getEngine($_REQUEST['engine']);    echo '<h2>' . "\n"       . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('b_engine.png') : '')       . '    ' . htmlspecialchars($engine_plugin->getTitle()) . "\n"       . '    ' . PMA_showMySQLDocu('', $engine_plugin->getMysqlHelpPage()) . "\n"       . '</h2>' . "\n\n";    echo '<p>' . "\n"       . '    <em>' . "\n"       . '        ' . htmlspecialchars($engine_plugin->getComment()) . "\n"       . '    </em>' . "\n"       . '</p>' . "\n\n";    $infoPages = $engine_plugin->getInfoPages();    if (!empty($infoPages) && is_array($infoPages)) {        echo '<p>' . "\n"           . '    <strong>[</strong>' . "\n";        if (empty($_REQUEST['page'])) {            echo '    <strong>' . __('Variables') . '</strong>' . "\n";        } else {            echo '    <a href="./server_engines.php'                . PMA_generate_common_url(array('engine' => $_REQUEST['engine'])) . '">'                . __('Variables') . '</a>' . "\n";        }        foreach ($infoPages as $current => $label) {            echo '    <strong>|</strong>' . "\n";            if (isset($_REQUEST['page']) && $_REQUEST['page'] == $current) {                echo '    <strong>' . $label . '</strong>' . "\n";            } else {                echo '    <a href="./server_engines.php'                    . PMA_generate_common_url(                        array('engine' => $_REQUEST['engine'], 'page' => $current))                    . '">' . htmlspecialchars($label) . '</a>' . "\n";            }        }        unset($current, $label);        echo '    <strong>]</strong>' . "\n"           . '</p>' . "\n\n";    }    unset($infoPages, $page_output);    if (!empty($_REQUEST['page'])) {        $page_output = $engine_plugin->getPage($_REQUEST['page']);    }    if (!empty($page_output)) {        echo $page_output;    } else {        echo '<p> ' . $engine_plugin->getSupportInformationMessage() . "\n"           . '</p>' . "\n"           . $engine_plugin->getHtmlVariables();    }}/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Prepares the work and runs some other scripts if required */if (! empty($submit_mult) && $submit_mult != __('With selected:') && (! empty($selected_db)  || ! empty($selected_tbl)  || ! empty($selected_fld)  || ! empty($rows_to_delete))) {    define('PMA_SUBMIT_MULT', 1);    if (isset($selected_db) && !empty($selected_db)) {        // coming from server database view - do something with selected databases        $selected     = $selected_db;        $what         = 'drop_db';    } elseif (isset($selected_tbl) && !empty($selected_tbl)) {        // coming from database structure view - do something with selected tables        if ($submit_mult == 'print') {            include './tbl_printview.php';        } else {           $selected = $selected_tbl;           switch ($submit_mult) {               case 'add_prefix_tbl':               case 'replace_prefix_tbl':               case 'copy_tbl_change_prefix':               case 'drop_db':               case 'drop_tbl':               case 'empty_tbl':                   $what = $submit_mult;                   break;               case 'check_tbl':               case 'optimize_tbl':               case 'repair_tbl':               case 'analyze_tbl':                   $query_type = $submit_mult;                   unset($submit_mult);                   $mult_btn   = __('Yes');                   break;               case 'export':                   unset($submit_mult);                   include 'db_export.php';                   exit;                   break;           } // end switch        }    } elseif (isset($selected_fld) && !empty($selected_fld)) {        // coming from table structure view - do something with selected columns/fileds        $selected     = $selected_fld;        switch ($submit_mult) {            case 'drop':                $what     = 'drop_fld';                break;            case 'primary':                // Gets table primary key                PMA_DBI_select_db($db);                $result      = PMA_DBI_query('SHOW KEYS FROM ' . PMA_backquote($table) . ';');                $primary     = '';                while ($row = PMA_DBI_fetch_assoc($result)) {                    // Backups the list of primary keys                    if ($row['Key_name'] == 'PRIMARY') {                        $primary .= $row['Column_name'] . ', ';                    }                } // end while                PMA_DBI_free_result($result);                if (empty($primary)) {                    // no primary key, so we can safely create new                    unset($submit_mult);                    $query_type = 'primary_fld';                    $mult_btn   = __('Yes');                } else {                    // primary key exists, so lets as user                    $what = 'primary_fld';                }                break;            case 'index':                unset($submit_mult);                $query_type = 'index_fld';                $mult_btn   = __('Yes');                break;            case 'unique':                unset($submit_mult);                $query_type = 'unique_fld';                $mult_btn   = __('Yes');                break;            case 'spatial':                unset($submit_mult);                $query_type = 'spatial_fld';                $mult_btn   = __('Yes');                break;            case 'ftext':                unset($submit_mult);                $query_type = 'fulltext_fld';                $mult_btn   = __('Yes');                break;            case 'change':                include './tbl_alter.php';                break;            case 'browse':                // this should already be handled by tbl_structure.php        }    } else {        // coming from browsing - do something with selected rows        $what = 'row_delete';        $selected = $rows_to_delete;    }} // end if/** * Displays the confirmation form if required */if (!empty($submit_mult) && !empty($what)) {    unset($message);    include_once './libraries/header.inc.php';    if (strlen($table)) {        include './libraries/tbl_common.php';        $url_query .= '&amp;goto=tbl_sql.php&amp;back=tbl_sql.php';        include './libraries/tbl_info.inc.php';        include_once './libraries/tbl_links.inc.php';    } elseif (strlen($db)) {        include './libraries/db_common.inc.php';        include './libraries/db_info.inc.php';    } else {        include_once './libraries/server_common.inc.php';        include_once './libraries/server_links.inc.php';    }    // Builds the query    $full_query     = '';    if ($what == 'drop_tbl') {        $full_query_views = '';    }    $selected_cnt   = count($selected);    $i = 0;    foreach ($selected AS $idx => $sval) {        switch ($what) {            case 'row_delete':                $full_query .= htmlspecialchars($sval)                    . ';<br />';                break;            case 'drop_db':                $full_query .= 'DROP DATABASE '                    . PMA_backquote(htmlspecialchars($sval))                    . ';<br />';                $reload = 1;                break;            case 'drop_tbl':                $current = $sval;                if (!empty($views) && in_array($current, $views)) {                    $full_query_views .= (empty($full_query_views) ? 'DROP VIEW ' : ', ')                        . PMA_backquote(htmlspecialchars($current));                } else {                    $full_query .= (empty($full_query) ? 'DROP TABLE ' : ', ')                        . PMA_backquote(htmlspecialchars($current));                }                break;            case 'empty_tbl':                $full_query .= 'TRUNCATE ';                $full_query .= PMA_backquote(htmlspecialchars($sval))                            . ';<br />';                break;            case 'primary_fld':                if ($full_query == '') {                    $full_query .= 'ALTER TABLE '                        . PMA_backquote(htmlspecialchars($table))                        . '<br />&nbsp;&nbsp;DROP PRIMARY KEY,'                        . '<br />&nbsp;&nbsp; ADD PRIMARY KEY('                        . '<br />&nbsp;&nbsp;&nbsp;&nbsp; '                        . PMA_backquote(htmlspecialchars($sval))                        . ',';                } else {                    $full_query .= '<br />&nbsp;&nbsp;&nbsp;&nbsp; '                        . PMA_backquote(htmlspecialchars($sval))                        . ',';                }                if ($i == $selected_cnt-1) {                    $full_query = preg_replace('@,$@', ');<br />', $full_query);                }                break;            case 'drop_fld':                if ($full_query == '') {                    $full_query .= 'ALTER TABLE '                        . PMA_backquote(htmlspecialchars($table));                }                $full_query .= '<br />&nbsp;&nbsp;DROP '                    . PMA_backquote(htmlspecialchars($sval))                    . ',';                if ($i == $selected_cnt - 1) {                    $full_query = preg_replace('@,$@', ';<br />', $full_query);                }                break;        } // end switch        $i++;    }    if ($what == 'drop_tbl') {        if (!empty($full_query)) {            $full_query .= ';<br />' . "\n";        }        if (!empty($full_query_views)) {            $full_query .= $full_query_views . ';<br />' . "\n";        }        unset($full_query_views);    }    // Displays the confirmation form    $_url_params = array(        'query_type' => $what,        'reload' => (! empty($reload) ? 1 : 0),    );    if (strpos(' ' . $action, 'db_') == 1) {        $_url_params['db']= $db;    } elseif (strpos(' ' . $action, 'tbl_') == 1 || $what == 'row_delete') {        $_url_params['db']= $db;        $_url_params['table']= $table;    }    foreach ($selected as $idx => $sval) {        $_url_params['selected'][] = $sval;    }    if ($what == 'drop_tbl' && !empty($views)) {        foreach ($views as $current) {            $_url_params['views'][] = $current;       }    }    if ($what == 'row_delete') {        $_url_params['original_sql_query'] = $original_sql_query;        if (! empty($original_url_query)) {            $_url_params['original_url_query'] = $original_url_query;        }    }    ?><form action="<?php echo $action; ?>" method="post">    <?php    echo PMA_generate_common_hidden_inputs($_url_params);    ?><?php if ($what == 'replace_prefix_tbl' || $what == 'copy_tbl_change_prefix') { ?>        <fieldset class = "input">                <legend><?php echo ($what == 'replace_prefix_tbl' ? __('Replace table prefix') : __('Copy table with prefix')) ?>:</legend>                <table>                <tr>                <td><?php echo __('From'); ?></td><td><input type="text" name="from_prefix" id="initialPrefix"</td>                </tr>                <tr>                <td><?php echo __('To'); ?> </td><td><input type="text" name="to_prefix" id="newPrefix"</td>                </tr>                </table>        </fieldset>        <fieldset class="tblFooters">                <button type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes"><?php echo __('Submit'); ?></button>        </fieldset>    <?php        } elseif ($what == 'add_prefix_tbl') { ?>        <fieldset class = "input">                <legend><?php echo __('Add table prefix') ?>:</legend>                <table>                <tr>                <td><?php echo __('Add prefix'); ?></td>     <td><input type="text" name="add_prefix" id="txtPrefix"</td>                </tr>                </table>        </fieldset>        <fieldset class="tblFooters">                <button type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes"><?php echo __('Submit'); ?></button>        </fieldset>    <?php        } else { ?>    <fieldset class="confirmation">        <legend><?php echo ($what == 'drop_db' ? __('You are about to DESTROY a complete database!') . '&nbsp;' : '') . __('Do you really want to '); ?>:</legend>        <tt><?php echo $full_query; ?></tt>    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes" />        <input type="submit" name="mult_btn" value="<?php echo __('No'); ?>" id="buttonNo" />    </fieldset>    <?php    }    include './libraries/footer.inc.php';} elseif ($mult_btn == __('Yes')) {/** * Executes the query - dropping rows, columns/fields, tables or dbs */    if ($query_type == 'drop_db' || $query_type == 'drop_tbl' || $query_type == 'drop_fld') {        include_once './libraries/relation_cleanup.lib.php';    }    $sql_query      = '';    if ($query_type == 'drop_tbl') {        $sql_query_views = '';    }    $selected_cnt   = count($selected);    $run_parts      = false; // whether to run query after each pass    $use_sql        = false; // whether to include sql.php at the end (to display results)    if ($query_type == 'primary_fld') {        // Gets table primary key        PMA_DBI_select_db($db);        $result      = PMA_DBI_query('SHOW KEYS FROM ' . PMA_backquote($table) . ';');        $primary     = '';        while ($row = PMA_DBI_fetch_assoc($result)) {            // Backups the list of primary keys            if ($row['Key_name'] == 'PRIMARY') {                $primary .= $row['Column_name'] . ', ';            }        } // end while        PMA_DBI_free_result($result);    }    $rebuild_database_list = false;    for ($i = 0; $i < $selected_cnt; $i++) {        switch ($query_type) {            case 'row_delete':                $a_query = $selected[$i];                $run_parts = true;                break;            case 'drop_db':                PMA_relationsCleanupDatabase($selected[$i]);                $a_query   = 'DROP DATABASE '                           . PMA_backquote($selected[$i]);                $reload    = 1;                $run_parts = true;                $rebuild_database_list = true;                break;            case 'drop_tbl':                PMA_relationsCleanupTable($db, $selected[$i]);                $current = $selected[$i];                if (!empty($views) && in_array($current, $views)) {                    $sql_query_views .= (empty($sql_query_views) ? 'DROP VIEW ' : ', ')                              . PMA_backquote($current);                } else {                    $sql_query .= (empty($sql_query) ? 'DROP TABLE ' : ', ')                               . PMA_backquote($current);                }                $reload    = 1;                break;            case 'check_tbl':                $sql_query .= (empty($sql_query) ? 'CHECK TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'optimize_tbl':                $sql_query .= (empty($sql_query) ? 'OPTIMIZE TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'analyze_tbl':                $sql_query .= (empty($sql_query) ? 'ANALYZE TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'repair_tbl':                $sql_query .= (empty($sql_query) ? 'REPAIR TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'empty_tbl':                $a_query = 'TRUNCATE ';                $a_query .= PMA_backquote($selected[$i]);                $run_parts = true;                break;            case 'drop_fld':                PMA_relationsCleanupColumn($db, $table, $selected[$i]);                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) : ',')                           . ' DROP ' . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ';' : '');                break;            case 'primary_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . (empty($primary) ? '' : ' DROP PRIMARY KEY,') . ' ADD PRIMARY KEY( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'index_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD INDEX( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'unique_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD UNIQUE( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'spatial_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD SPATIAL( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'fulltext_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD FULLTEXT( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;        case 'add_prefix_tbl':                $newtablename = $add_prefix . $selected[$i];                $a_query = 'ALTER TABLE ' . PMA_backquote($selected[$i]) . ' RENAME ' . PMA_backquote($newtablename) ; // ADD PREFIX TO TABLE NAME                $run_parts = true;                break;            case 'replace_prefix_tbl':                $current = $selected[$i];                $newtablename = preg_replace("/^" . $from_prefix . "/", $to_prefix, $current);                $a_query = 'ALTER TABLE ' . PMA_backquote($selected[$i]) . ' RENAME ' . PMA_backquote($newtablename) ; // CHANGE PREFIX PATTERN                $run_parts = true;                break;            case 'copy_tbl_change_prefix':                $current = $selected[$i];                $newtablename = preg_replace("/^" . $from_prefix . "/", $to_prefix, $current);                $a_query = 'CREATE TABLE ' . PMA_backquote($newtablename) . ' SELECT * FROM ' . PMA_backquote($selected[$i]) ; // COPY TABLE AND CHANGE PREFIX PATTERN                $run_parts = true;                break;        } // end switch        // All "DROP TABLE", "DROP FIELD", "OPTIMIZE TABLE" and "REPAIR TABLE"        // statements will be run at once below        if ($run_parts) {            $sql_query .= $a_query . ';' . "\n";            if ($query_type != 'drop_db') {                PMA_DBI_select_db($db);            }            $result = PMA_DBI_query($a_query);        } // end if    } // end for    if ($query_type == 'drop_tbl') {        if (!empty($sql_query)) {        $sql_query .= ';';    } elseif (!empty($sql_query_views)) {        $sql_query = $sql_query_views . ';';            unset($sql_query_views);        }    }    if ($use_sql) {        include './sql.php';    } elseif (!$run_parts) {        PMA_DBI_select_db($db);        $result = PMA_DBI_try_query($sql_query);        if ($result && !empty($sql_query_views)) {            $sql_query .= ' ' . $sql_query_views . ';';            $result = PMA_DBI_try_query($sql_query_views);            unset($sql_query_views);        }        if (! $result) {            $message = PMA_Message::error(PMA_DBI_getError());        }    }    if ($rebuild_database_list) {        // avoid a problem with the database list navigator        // when dropping a db from server_databases        $GLOBALS['pma']->databases->build();    }} else {    $message = PMA_Message::success(__('No change'));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used with the bookmark feature * * @package PhpMyAdmin *//** * Defines the bookmark parameters for the current user * * @return  array    the bookmark parameters for the current user * @access  public */function PMA_Bookmark_getParams(){    static $cfgBookmark = null;    if (null !== $cfgBookmark) {        return $cfgBookmark;    }    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['bookmarkwork']) {        $cfgBookmark = array(            'user'  => $GLOBALS['cfg']['Server']['user'],            'db'    => $GLOBALS['cfg']['Server']['pmadb'],            'table' => $GLOBALS['cfg']['Server']['bookmarktable'],        );    } else {        $cfgBookmark = false;    }    return $cfgBookmark;} // end of the 'PMA_Bookmark_getParams()' function/** * Gets the list of bookmarks defined for the current database * * @global  resource  the controluser db connection handle * * @param string    the current database name * * @return  array     the bookmarks list (key as index, label as value) * * @access  public */function PMA_Bookmark_getList($db){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return array();    }    $query  = 'SELECT label, id FROM '. PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])            . ' WHERE dbase = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND user = \'' . PMA_sqlAddSlashes($cfgBookmark['user']) . '\''            . ' ORDER BY label';    $per_user = PMA_DBI_fetch_result($query, 'id', 'label', $controllink, PMA_DBI_QUERY_STORE);    $query  = 'SELECT label, id FROM '. PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])            . ' WHERE dbase = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND user = \'\''            . ' ORDER BY label';    $global = PMA_DBI_fetch_result($query, 'id', 'label', $controllink, PMA_DBI_QUERY_STORE);    foreach ($global as $key => $val) {        $global[$key] = $val . ' (' . __('shared') . ')';    }    $ret = $global + $per_user;    asort($ret);    return $ret;} // end of the 'PMA_Bookmark_getList()' function/** * Gets the sql command from a bookmark * * @global  resource  the controluser db connection handle * * @param string    the current database name * @param mixed     the id of the bookmark to get * @param string    which field to look up the $id * @param boolean  true: get all bookmarks regardless of the owning user * @param boolean   whether to ignore bookmarks with no user * * @return  string    the sql query * * @access  public */function PMA_Bookmark_get($db, $id, $id_field = 'id', $action_bookmark_all = false, $exact_user_match = false){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return '';    }    $query = 'SELECT query FROM ' . PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])        . ' WHERE dbase = \'' . PMA_sqlAddSlashes($db) . '\'';    if (!$action_bookmark_all) {        $query .= ' AND (user = \'' . PMA_sqlAddSlashes($cfgBookmark['user']) . '\'';        if (!$exact_user_match) {            $query .= ' OR user = \'\'';        }        $query .= ')';    }    $query .= ' AND ' . PMA_backquote($id_field) . ' = ' . $id;    return PMA_DBI_fetch_value($query, 0, 0, $controllink);} // end of the 'PMA_Bookmark_get()' function/** * Adds a bookmark * * @global  resource  the controluser db connection handle * * @param array     the properties of the bookmark to add; here, *                    $fields['query'] is urlencoded * @param boolean   whether to make the bookmark available for all users * * @return  boolean   whether the INSERT succeeds or not * * @access  public */function PMA_Bookmark_save($fields, $all_users = false){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return false;    }    $query = 'INSERT INTO ' . PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])           . ' (id, dbase, user, query, label) VALUES (NULL, \'' . PMA_sqlAddSlashes($fields['dbase']) . '\', \'' . ($all_users ? '' : PMA_sqlAddSlashes($fields['user'])) . '\', \'' . PMA_sqlAddSlashes(urldecode($fields['query'])) . '\', \'' . PMA_sqlAddSlashes($fields['label']) . '\')';    return PMA_DBI_query($query, $controllink);} // end of the 'PMA_Bookmark_save()' function/** * Deletes a bookmark * * @global  resource  the controluser db connection handle * * @param string   the current database name * @param integer  the id of the bookmark to get * * @access  public */function PMA_Bookmark_delete($db, $id){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return false;    }    $query  = 'DELETE FROM ' . PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])            . ' WHERE (user = \'' . PMA_sqlAddSlashes($cfgBookmark['user']) . '\''            . '        OR user = \'\')'            . ' AND id = ' . $id;    return PMA_DBI_try_query($query, $controllink);} // end of the 'PMA_Bookmark_delete()' function/** * Bookmark Support */$GLOBALS['cfg']['Bookmark'] = PMA_Bookmark_getParams();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Alter one or more table columns * * linked from table_structure, uses libraries/tbl_properties.inc.php to display * form and handles this form data * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Gets tables informations */require_once './libraries/tbl_common.php';require_once './libraries/tbl_info.inc.php';$active_page = 'tbl_structure.php';/** * Defines the url to return to in case of error in a sql statement */$err_url = 'tbl_structure.php?' . PMA_generate_common_url($db, $table);/** * Modifications have been submitted -> updates the table */$abort = false;if (isset($_REQUEST['do_save_data'])) {    $field_cnt = count($_REQUEST['field_orig']);    $key_fields = array();    $changes = array();    for ($i = 0; $i < $field_cnt; $i++) {        $changes[] = 'CHANGE ' . PMA_Table::generateAlter(            $_REQUEST['field_orig'][$i],            $_REQUEST['field_name'][$i],            $_REQUEST['field_type'][$i],            $_REQUEST['field_length'][$i],            $_REQUEST['field_attribute'][$i],            isset($_REQUEST['field_collation'][$i])                ? $_REQUEST['field_collation'][$i]                : '',            isset($_REQUEST['field_null'][$i])                ? $_REQUEST['field_null'][$i]                : 'NOT NULL',            $_REQUEST['field_default_type'][$i],            $_REQUEST['field_default_value'][$i],            isset($_REQUEST['field_extra'][$i])                ? $_REQUEST['field_extra'][$i]                : false,            isset($_REQUEST['field_comments'][$i])                ? $_REQUEST['field_comments'][$i]                : '',            $key_fields,            $i,            $_REQUEST['field_default_orig'][$i]        );    } // end for    // Builds the primary keys statements and updates the table    $key_query = '';    /**     * this is a little bit more complex     *     * @todo if someone selects A_I when altering a column we need to check:     *  - no other column with A_I     *  - the column has an index, if not create one     *    if (count($key_fields)) {        $fields = array();        foreach ($key_fields as $each_field) {            if (isset($_REQUEST['field_name'][$each_field]) && strlen($_REQUEST['field_name'][$each_field])) {                $fields[] = PMA_backquote($_REQUEST['field_name'][$each_field]);            }        } // end for        $key_query = ', ADD KEY (' . implode(', ', $fields) . ') ';    }     */    // To allow replication, we first select the db to use and then run queries    // on this db.    PMA_DBI_select_db($db) or PMA_mysqlDie(PMA_DBI_getError(), 'USE ' . PMA_backquote($db) . ';', '', $err_url);    $sql_query = 'ALTER TABLE ' . PMA_backquote($table) . ' ' . implode(', ', $changes) . $key_query;    $result    = PMA_DBI_try_query($sql_query);    if ($result !== false) {        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        $btnDrop = 'Fake';        /**         * If comments were sent, enable relation stuff         */        include_once './libraries/transformations.lib.php';        // updaet field names in relation        if (isset($_REQUEST['field_orig']) && is_array($_REQUEST['field_orig'])) {            foreach ($_REQUEST['field_orig'] as $fieldindex => $fieldcontent) {                if ($_REQUEST['field_name'][$fieldindex] != $fieldcontent) {                    PMA_REL_renameField($db, $table, $fieldcontent,                        $_REQUEST['field_name'][$fieldindex]);                }            }        }        // update mime types        if (isset($_REQUEST['field_mimetype'])         && is_array($_REQUEST['field_mimetype'])         && $cfg['BrowseMIME']) {            foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {                if (isset($_REQUEST['field_name'][$fieldindex])                 && strlen($_REQUEST['field_name'][$fieldindex])) {                    PMA_setMIME($db, $table, $_REQUEST['field_name'][$fieldindex],                        $mimetype,                        $_REQUEST['field_transformation'][$fieldindex],                        $_REQUEST['field_transformation_options'][$fieldindex]);                }            }        }        if ( $_REQUEST['ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';    } else {        PMA_mysqlDie('', '', '', $err_url, false);        // An error happened while inserting/updating a table definition.        // to prevent total loss of that data, we embed the form once again.        // The variable $regenerate will be used to restore data in libraries/tbl_properties.inc.php        if (isset($_REQUEST['orig_field'])) {            $_REQUEST['field'] = $_REQUEST['orig_field'];        }        $regenerate = true;    }}/** * No modifications yet required -> displays the table fields * * $selected comes from multi_submits.inc.php */if ($abort == false) {    if ($_REQUEST['ajax_request'] != true) {        include_once './libraries/tbl_links.inc.php';    }    if (! isset($selected)) {        PMA_checkParameters(array('field'));        $selected[]   = $_REQUEST['field'];        $selected_cnt = 1;    } else { // from a multiple submit        $selected_cnt = count($selected);    }    /**     * @todo optimize in case of multiple fields to modify     */    for ($i = 0; $i < $selected_cnt; $i++) {        $fields_meta[] = PMA_DBI_get_columns($db, $table, $selected[$i], true);    }    $num_fields  = count($fields_meta);    $action      = 'tbl_alter.php';    // Get more complete field information.    // For now, this is done to obtain MySQL 4.1.2+ new TIMESTAMP options    // and to know when there is an empty DEFAULT value.    // Later, if the analyser returns more information, it    // could be executed to replace the info given by SHOW FULL COLUMNS FROM.    /**     * @todo put this code into a require()     * or maybe make it part of PMA_DBI_get_columns();     */    // We also need this to correctly learn if a TIMESTAMP is NOT NULL, since    // SHOW FULL COLUMNS says NULL and SHOW CREATE TABLE says NOT NULL (tested    // in MySQL 4.0.25).    $show_create_table = PMA_DBI_fetch_value('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table), 0, 1);    $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));    unset($show_create_table);    /**     * Form for changing properties.     */    include './libraries/tbl_properties.inc.php';}/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Javascript escaping functions. * * @package PhpMyAdmin * *//** * Format a string so it can be a string inside JavaScript code inside an * eventhandler (onclick, onchange, on..., ). * This function is used to displays a javascript confirmation box for * "DROP/DELETE/ALTER" queries. * * @param string   $a_string          the string to format * @param boolean  $add_backquotes    whether to add backquotes to the string or not * * @return  string   the formatted string * * @access  public */function PMA_jsFormat($a_string = '', $add_backquotes = true){    if (is_string($a_string)) {        $a_string = htmlspecialchars($a_string);        $a_string = PMA_escapeJsString($a_string);        // Needed for inline javascript to prevent some browsers        // treating it as a anchor        $a_string = str_replace('#', '\\#', $a_string);    }    return (($add_backquotes) ? PMA_backquote($a_string) : $a_string);} // end of the 'PMA_jsFormat()' function/** * escapes a string to be inserted as string a JavaScript block * enclosed by <![CDATA[ ... ]]> * this requires only to escape ' with \' and end of script block * * We also remove NUL byte as some browsers (namely MSIE) ignore it and * inserting it anywhere inside </script would allow to bypass this check. * * @param string  $string the string to be escaped * @return  string  the escaped string */function PMA_escapeJsString($string){    return preg_replace('@</script@i', '</\' + \'script',                        strtr($string, array(                                "\000" => '',                                '\\' => '\\\\',                                '\'' => '\\\'',                                '"' => '\"',                                "\n" => '\n',                                "\r" => '\r')));}/** * Formats a value for javascript code. * * @param string $value String to be formatted. * * @retrun string formatted value. */function PMA_formatJsVal($value){    if (is_bool($value)) {        if ($value) {            return 'true';        } else {            return 'false';        }    } elseif (is_int($value)) {        return (int)$value;    } else {        return '"' . PMA_escapeJsString($value) . '"';    }}/** * Formats an javascript assignment with proper escaping of a value * and support for assigning array of strings. * * @param string $key    Name of value to set * @param mixed  $value  Value to set, can be either string or array of strings * @param bool   $escape Whether to escape value or keep it as it is (for inclusion of js code) * * @return string Javascript code. */function PMA_getJsValue($key, $value, $escape = true){    $result = $key . ' = ';    if (!$escape) {        $result .= $value;    } elseif (is_array($value)) {        $result .= '[';        foreach ($value as $id => $val) {            $result .= PMA_formatJsVal($val) . ",";        }        $result .= "];\n";    } else {        $result .= PMA_formatJsVal($value) . ";\n";    }    return $result;}/** * Prints an javascript assignment with proper escaping of a value * and support for assigning array of strings. * * @param string $key Name of value to set * @param mixed $value Value to set, can be either string or array of strings * * @return nothing */function PMA_printJsValue($key, $value){    echo PMA_getJsValue($key, $value);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Get some core libraries */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);/** * The form used to define the field to add has been submitted */$abort = false;// check number of fields to be createdif (isset($_REQUEST['submit_num_fields'])) {    if (isset($_REQUEST['orig_after_field'])) {        $_REQUEST['after_field'] = $_REQUEST['orig_after_field'];    }    if (isset($_REQUEST['orig_field_where'])) {        $_REQUEST['field_where'] = $_REQUEST['orig_field_where'];    }    $num_fields = $_REQUEST['orig_num_fields'] + $_REQUEST['added_fields'];    $regenerate = true;} elseif (isset($_REQUEST['num_fields']) && intval($_REQUEST['num_fields']) > 0) {    $num_fields = (int) $_REQUEST['num_fields'];} else {    $num_fields = 1;}if (isset($_REQUEST['do_save_data'])) {    $query = '';    $definitions = array();    // Transforms the radio button field_key into 3 arrays    $field_cnt      = count($_REQUEST['field_name']);    $field_primary  = array();    $field_index    = array();    $field_unique   = array();    $field_fulltext = array();    for ($i = 0; $i < $field_cnt; ++$i) {        if (isset($_REQUEST['field_key'][$i])         && strlen($_REQUEST['field_name'][$i])) {            if ($_REQUEST['field_key'][$i] == 'primary_' . $i) {                $field_primary[] = $i;            }            if ($_REQUEST['field_key'][$i] == 'index_' . $i) {                $field_index[]   = $i;            }            if ($_REQUEST['field_key'][$i] == 'unique_' . $i) {                $field_unique[]  = $i;            }            if ($_REQUEST['field_key'][$i] == 'fulltext_' . $i) {                $field_fulltext[]  = $i;            }        } // end if    } // end for    // Builds the field creation statement and alters the table    for ($i = 0; $i < $field_cnt; ++$i) {        // '0' is also empty for php :-(        if (empty($_REQUEST['field_name'][$i]) && $_REQUEST['field_name'][$i] != '0') {            continue;        }        $definition = ' ADD ' . PMA_Table::generateFieldSpec(            $_REQUEST['field_name'][$i],            $_REQUEST['field_type'][$i],            $_REQUEST['field_length'][$i],            $_REQUEST['field_attribute'][$i],            isset($_REQUEST['field_collation'][$i])                ? $_REQUEST['field_collation'][$i]                : '',            isset($_REQUEST['field_null'][$i])                ? $_REQUEST['field_null'][$i]                : 'NOT NULL',            $_REQUEST['field_default_type'][$i],            $_REQUEST['field_default_value'][$i],            isset($_REQUEST['field_extra'][$i])                ? $_REQUEST['field_extra'][$i]                : false,            isset($_REQUEST['field_comments'][$i])                ? $_REQUEST['field_comments'][$i]                : '',            $field_primary,            $i        );        if ($_REQUEST['field_where'] != 'last') {            // Only the first field can be added somewhere other than at the end            if ($i == 0) {                if ($_REQUEST['field_where'] == 'first') {                    $definition .= ' FIRST';                } else {                    $definition .= ' AFTER ' . PMA_backquote($_REQUEST['after_field']);                }            } else {                $definition .= ' AFTER ' . PMA_backquote($_REQUEST['field_name'][$i-1]);            }        }        $definitions[] = $definition;    } // end for    // Builds the primary keys statements and updates the table    if (count($field_primary)) {        $fields = array();        foreach ($field_primary as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD PRIMARY KEY (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the indexes statements and updates the table    if (count($field_index)) {        $fields = array();        foreach ($field_index as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD INDEX (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the uniques statements and updates the table    if (count($field_unique)) {        $fields = array();        foreach ($field_unique as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD UNIQUE (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the fulltext statements and updates the table    if (count($field_fulltext)) {        $fields = array();        foreach ($field_fulltext as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD FULLTEXT (' . implode(', ', $fields) . ') ';        unset($fields);    }    // To allow replication, we first select the db to use and then run queries    // on this db.    PMA_DBI_select_db($db) or PMA_mysqlDie(PMA_getError(), 'USE ' . PMA_backquotes($db), '', $err_url);    $sql_query    = 'ALTER TABLE ' . PMA_backquote($table) . ' ' . implode(', ', $definitions);    $result = PMA_DBI_try_query($sql_query);    if ($result === true) {        // If comments were sent, enable relation stuff        include_once './libraries/transformations.lib.php';        // Update comment table for mime types [MIME]        if (isset($_REQUEST['field_mimetype'])         && is_array($_REQUEST['field_mimetype'])         && $cfg['BrowseMIME']) {            foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {                if (isset($_REQUEST['field_name'][$fieldindex])                 && strlen($_REQUEST['field_name'][$fieldindex])) {                    PMA_setMIME($db, $table,                        $_REQUEST['field_name'][$fieldindex],                        $mimetype,                        $_REQUEST['field_transformation'][$fieldindex],                        $_REQUEST['field_transformation_options'][$fieldindex]);                }            }        }        // Go back to the structure sub-page        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';    } else {        PMA_mysqlDie('', '', '', $err_url, false);        // An error happened while inserting/updating a table definition.        // to prevent total loss of that data, we embed the form once again.        // The variable $regenerate will be used to restore data in libraries/tbl_properties.inc.php        $num_fields = $_REQUEST['orig_num_fields'];        if (isset($_REQUEST['orig_after_field'])) {            $_REQUEST['after_field'] = $_REQUEST['orig_after_field'];        }        if (isset($_REQUEST['orig_field_where'])) {            $_REQUEST['field_where'] = $_REQUEST['orig_field_where'];        }        $regenerate = true;    }} // end do alter table/** * Displays the form used to define the new field */if ($abort == false) {    /**     * Gets tables informations     */    include_once './libraries/tbl_common.php';    include_once './libraries/tbl_info.inc.php';    /**     * Displays top menu links     */    $active_page = 'tbl_structure.php';    if ($GLOBALS['is_ajax_request'] != true) {        include_once './libraries/tbl_links.inc.php';    }    /**     * Display the form     */    $action = 'tbl_addfield.php';    include_once './libraries/tbl_properties.inc.php';    // Diplays the footer    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * finishes HTML output * * updates javascript variables in index.php for correct working with querywindow * and navigation frame refreshing * * send buffered data if buffered * * WARNING: This script has to be included at the very end of your code because *          it will stop the script execution! * * always use $GLOBALS, as this script is also included by functions * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * for PMA_setHistory() */if (! PMA_isValid($_REQUEST['no_history']) && empty($GLOBALS['error_message']) && ! empty($GLOBALS['sql_query'])) {    PMA_setHistory(PMA_ifSetOr($GLOBALS['db'], ''),        PMA_ifSetOr($GLOBALS['table'], ''),        $GLOBALS['cfg']['Server']['user'],        $GLOBALS['sql_query']);}if ($GLOBALS['error_handler']->hasDisplayErrors()) {    echo '<div class="clearfloat">';    $GLOBALS['error_handler']->dispErrors();    echo '</div>';}if (count($GLOBALS['footnotes'])) {    echo '<div class="footnotes">';    foreach ($GLOBALS['footnotes'] as $footnote) {        echo '<span id="footnote_' . $footnote['nr'] . '"><sup>'            . $footnote['nr'] . '</sup> ' . $footnote['note'] . '</span><br />';    }    echo '</div>';}if (! empty($_SESSION['debug'])) {    $sum_time = 0;    $sum_exec = 0;    foreach ($_SESSION['debug']['queries'] as $query) {        $sum_time += $query['count'] * $query['time'];        $sum_exec += $query['count'];    }    echo '<div>';    echo count($_SESSION['debug']['queries']) . ' queries executed '        . $sum_exec . ' times in ' . $sum_time . ' seconds';    echo '<pre>';    print_r($_SESSION['debug']);    echo '</pre>';    echo '</div>';    $_SESSION['debug'] = array();}if (!$GLOBALS['is_ajax_request']) {?><script type="text/javascript">//<![CDATA[<?phpif (empty($GLOBALS['error_message'])) {    ?>$(document).ready(function() {// updates current settingsif (window.parent.setAll) {    window.parent.setAll('<?php        echo PMA_escapeJsString($GLOBALS['lang']) . "', '";        echo PMA_escapeJsString($GLOBALS['collation_connection']) . "', '";        echo PMA_escapeJsString($GLOBALS['server']) . "', '";        echo PMA_escapeJsString(PMA_ifSetOr($GLOBALS['db'], '')) . "', '";        echo PMA_escapeJsString(PMA_ifSetOr($GLOBALS['table'], '')) . "', '";        echo PMA_escapeJsString($_SESSION[' PMA_token ']);?>');}    <?php    if (! empty($GLOBALS['reload'])) {        ?>// refresh navigation frame contentif (window.parent.refreshNavigation) {    window.parent.refreshNavigation();}        <?php    } else if (isset($_GET['reload_left_frame']) && $_GET['reload_left_frame'] == '1') {        // reload left frame (used by user preferences)        ?>        if (window.parent && window.parent.frame_navigation) {            window.parent.frame_navigation.location.reload();        }        <?php    }    ?>// set current db, table and sql query in the querywindowif (window.parent.reload_querywindow) {    window.parent.reload_querywindow(        '<?php echo PMA_escapeJsString(PMA_ifSetOr($GLOBALS['db'], '')) ?>',        '<?php echo PMA_escapeJsString(PMA_ifSetOr($GLOBALS['table'], '')) ?>',        '<?php echo strlen($GLOBALS['sql_query']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'] ? PMA_escapeJsString($GLOBALS['sql_query']) : ''; ?>');}    <?php}if (! empty($GLOBALS['focus_querywindow'])) {    ?>// set focus to the querywindowif (parent.querywindow && !parent.querywindow.closed && parent.querywindow.location) {    self.focus();}    <?php}?>if (window.parent.frame_content) {    // reset content frame name, as querywindow needs to set a unique name    // before submitting form data, and navigation frame needs the original name    if (typeof(window.parent.frame_content.name) != 'undefined'     && window.parent.frame_content.name != 'frame_content') {        window.parent.frame_content.name = 'frame_content';    }    if (typeof(window.parent.frame_content.id) != 'undefined'     && window.parent.frame_content.id != 'frame_content') {        window.parent.frame_content.id = 'frame_content';    }    //window.parent.frame_content.setAttribute('name', 'frame_content');    //window.parent.frame_content.setAttribute('id', 'frame_content');}});//]]></script><?php}// Link to itself to replicate windows including framesetif (! isset($GLOBALS['checked_special'])) {    $GLOBALS['checked_special'] = false;}if (PMA_getenv('SCRIPT_NAME') && empty($_POST) && !$GLOBALS['checked_special'] && ! $GLOBALS['is_ajax_request']) {    echo '<div id="selflink" class="print_ignore">' . "\n";    $url_params['target'] = basename(PMA_getenv('SCRIPT_NAME'));    ?><script type="text/javascript">//<![CDATA[/* Store current location in hash part of URL to allow direct bookmarking */setURLHash("<?php echo PMA_generate_common_url($url_params, 'text', ''); ?>");//]]></script><?php    echo '<a href="index.php' . PMA_generate_common_url($url_params) . '"'        . ' title="' . __('Open new phpMyAdmin window') . '" target="_blank">';    if ($GLOBALS['cfg']['NavigationBarIconic']) {        echo PMA_getImage('window-new.png', __('Open new phpMyAdmin window'));    }    if ($GLOBALS['cfg']['NavigationBarIconic'] !== true) {        echo __('Open new phpMyAdmin window');    }    echo '</a>' . "\n";    echo '</div>' . "\n";}// Include possible custom footersif (! $GLOBALS['is_ajax_request'] && file_exists(CUSTOM_FOOTER_FILE)) {    include CUSTOM_FOOTER_FILE;}/** * If we are in an AJAX request, we do not need to generate the closing tags for * body and html. */if (! $GLOBALS['is_ajax_request']) {?></body></html><?php}/** * Stops the script execution */exit;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */// Run common workrequire_once './libraries/common.inc.php';define('TABLE_MAY_BE_ABSENT', true);require './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_tracking.php&amp;back=tbl_tracking.php';$url_params['goto'] = 'tbl_tracking.php';;$url_params['back'] = 'tbl_tracking.php';// Init vars for tracking reportif (isset($_REQUEST['report']) || isset($_REQUEST['report_export'])) {    $data = PMA_Tracker::getTrackedData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version']);    $selection_schema = false;    $selection_data   = false;    $selection_both  = false;    if (! isset($_REQUEST['logtype'])) {        $_REQUEST['logtype'] = 'schema_and_data';    }    if ($_REQUEST['logtype'] == 'schema') {        $selection_schema = true;    } elseif ($_REQUEST['logtype'] == 'data') {        $selection_data   = true;    } else {        $selection_both   = true;    }    if (! isset($_REQUEST['date_from'])) {        $_REQUEST['date_from'] = $data['date_from'];    }    if (! isset($_REQUEST['date_to'])) {        $_REQUEST['date_to'] = $data['date_to'];    }    if (! isset($_REQUEST['users'])) {        $_REQUEST['users'] = '*';    }    $filter_ts_from = strtotime($_REQUEST['date_from']);    $filter_ts_to   = strtotime($_REQUEST['date_to']);    $filter_users   = array_map('trim', explode(',', $_REQUEST['users']));}// Prepare exportif (isset($_REQUEST['report_export'])) {/** * Filters tracking entries * * @param array   the entries to filter * @param string  "from" date * @param string  "to" date * @param string  users * * @return  array   filtered entries * */    function PMA_filter_tracking($data, $filter_ts_from, $filter_ts_to, $filter_users) {        $tmp_entries = array();        $id = 0;        foreach ( $data as $entry ) {            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {                $tmp_entries[] = array( 'id' => $id,                                    'timestamp' => $timestamp,                                    'username'  => $entry['username'],                                    'statement' => $entry['statement']                             );            }            $id++;        }        return($tmp_entries);    }    $entries = array();    // Filtering data definition statements    if ($_REQUEST['logtype'] == 'schema' || $_REQUEST['logtype'] == 'schema_and_data') {        $entries = array_merge($entries, PMA_filter_tracking($data['ddlog'], $filter_ts_from, $filter_ts_to, $filter_users));    }    // Filtering data manipulation statements    if ($_REQUEST['logtype'] == 'data' || $_REQUEST['logtype'] == 'schema_and_data') {        $entries = array_merge($entries, PMA_filter_tracking($data['dmlog'], $filter_ts_from, $filter_ts_to, $filter_users));    }    // Sort it    foreach ($entries as $key => $row) {        $ids[$key]        = $row['id'];        $timestamps[$key] = $row['timestamp'];        $usernames[$key]  = $row['username'];        $statements[$key] = $row['statement'];    }    array_multisort($timestamps, SORT_ASC, $ids, SORT_ASC, $usernames, SORT_ASC, $statements, SORT_ASC, $entries);}// Export as file downloadif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'sqldumpfile') {    @ini_set('url_rewriter.tags', '');    $dump = "# " . sprintf(__('Tracking report for table `%s`'), htmlspecialchars($_REQUEST['table'])) . "\n" .            "# " . date('Y-m-d H:i:s') . "\n";    foreach ($entries as $entry) {        $dump .= $entry['statement'];    }    $filename = 'log_' . htmlspecialchars($_REQUEST['table']) . '.sql';    PMA_download_header($filename, 'text/x-sql', strlen($dump));    echo $dump;    exit();}/** * Gets tables informations *//** * Displays top menu links */require_once './libraries/tbl_links.inc.php';echo '<br />';/** * Actions */// Create tracking versionif (isset($_REQUEST['submit_create_version'])) {    $tracking_set = '';    if ($_REQUEST['alter_table'] == true) {        $tracking_set .= 'ALTER TABLE,';    }    if ($_REQUEST['rename_table'] == true) {        $tracking_set .= 'RENAME TABLE,';    }    if ($_REQUEST['create_table'] == true) {        $tracking_set .= 'CREATE TABLE,';    }    if ($_REQUEST['drop_table'] == true) {        $tracking_set .= 'DROP TABLE,';    }    if ($_REQUEST['create_index'] == true) {        $tracking_set .= 'CREATE INDEX,';    }    if ($_REQUEST['drop_index'] == true) {        $tracking_set .= 'DROP INDEX,';    }    if ($_REQUEST['insert'] == true) {        $tracking_set .= 'INSERT,';    }    if ($_REQUEST['update'] == true) {        $tracking_set .= 'UPDATE,';    }    if ($_REQUEST['delete'] == true) {        $tracking_set .= 'DELETE,';    }    if ($_REQUEST['truncate'] == true) {        $tracking_set .= 'TRUNCATE,';    }    $tracking_set = rtrim($tracking_set, ',');    if (PMA_Tracker::createVersion($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'], $tracking_set )) {        $msg = PMA_Message::success(sprintf(__('Version %s is created, tracking for %s.%s is activated.'), htmlspecialchars($_REQUEST['version']), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])));        $msg->display();    }}// Deactivate trackingif (isset($_REQUEST['submit_deactivate_now'])) {    if (PMA_Tracker::deactivateTracking($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'])) {        $msg = PMA_Message::success(sprintf(__('Tracking for %s.%s , version %s is deactivated.'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table']), htmlspecialchars($_REQUEST['version'])));        $msg->display();    }}// Activate trackingif (isset($_REQUEST['submit_activate_now'])) {    if (PMA_Tracker::activateTracking($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'])) {        $msg = PMA_Message::success(sprintf(__('Tracking for %s.%s , version %s is activated.'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table']), htmlspecialchars($_REQUEST['version'])));        $msg->display();    }}// Export as SQL executionif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'execution') {    foreach ($entries as $entry) {        $sql_result = PMA_DBI_query( "/*NOTRACK*/\n" . $entry['statement'] );    }    $msg = PMA_Message::success(__('SQL statements executed.'));    $msg->display();}// Export as SQL dumpif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'sqldump') {    $new_query =    "# " . __('You can execute the dump by creating and using a temporary database. Please ensure that you have the privileges to do so.') . "\n" .                    "# " . __('Comment out these two lines if you do not need them.') . "\n" .                    "\n" .                    "CREATE database IF NOT EXISTS pma_temp_db; \n" .                    "USE pma_temp_db; \n" .                    "\n";    foreach ($entries as $entry) {        $new_query .= $entry['statement'];    }    $msg = PMA_Message::success(__('SQL statements exported. Please copy the dump or execute it.'));    $msg->display();    $db_temp = $db;    $table_temp = $table;    $db = $table = '';    include_once './libraries/sql_query_form.lib.php';    PMA_sqlQueryForm($new_query, 'sql');    $db = $db_temp;    $table = $table_temp;}/* * Schema snapshot */if (isset($_REQUEST['snapshot'])) {?>    <h3><?php echo __('Structure snapshot');?>  [<a href="tbl_tracking.php?<?php echo $url_query;?>"><?php echo __('Close');?></a>]</h3><?php    $data = PMA_Tracker::getTrackedData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version']);    // Get first DROP TABLE and CREATE TABLE statements    $drop_create_statements = $data['ddlog'][0]['statement'];    if (strstr($data['ddlog'][0]['statement'], 'DROP TABLE')) {        $drop_create_statements .= $data['ddlog'][1]['statement'];    }    // Print SQL code    PMA_showMessage(sprintf(__('Version %s snapshot (SQL code)'), htmlspecialchars($_REQUEST['version'])), $drop_create_statements);    // Unserialize snapshot    $temp = unserialize($data['schema_snapshot']);    $columns = $temp['COLUMNS'];    $indexes = $temp['INDEXES'];?>    <h3><?php echo __('Structure');?></h3>    <table id="tablestructure" class="data">    <thead>    <tr>        <th><?php echo __('Column'); ?></th>        <th><?php echo __('Type'); ?></th>        <th><?php echo __('Collation'); ?></th>        <th><?php echo __('Null'); ?></th>        <th><?php echo __('Default'); ?></th>        <th><?php echo __('Extra'); ?></th>        <th><?php echo __('Comment'); ?></th>    </tr>    </thead>    <tbody><?php    $style = 'odd';    foreach ($columns as $field_index => $field) {?>        <tr class="noclick <?php echo $style; ?>">            <?php            if ($field['Key'] == 'PRI') {                echo '<td><b><u>' . htmlspecialchars($field['Field']) . '</u></b></td>' . "\n";            } else {                echo '<td><b>' . htmlspecialchars($field['Field']) . '</b></td>' . "\n";            }            ?>            <td><?php echo htmlspecialchars($field['Type']);?></td>            <td><?php echo htmlspecialchars($field['Collation']);?></td>            <td><?php echo (($field['Null'] == 'YES') ? __('Yes') : __('No')); ?></td>            <td><?php            if (isset($field['Default'])) {                $extracted_fieldspec = PMA_extractFieldSpec($field['Type']);                if ($extracted_fieldspec['type'] == 'bit') {                    // here, $field['Default'] contains something like b'010'                    echo PMA_convert_bit_default_value($field['Default']);                } else {                    echo htmlspecialchars($field['Default']);                }            } else {                if ($field['Null'] == 'YES') {                    echo '<i>NULL</i>';                } else {                    echo '<i>' . _pgettext('None for default', 'None') . '</i>';                }            } ?></td>            <td><?php echo htmlspecialchars($field['Extra']);?></td>            <td><?php echo htmlspecialchars($field['Comment']);?></td>        </tr><?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }    }?>    </tbody>    </table><?php    if (count($indexes) > 0) {?>        <h3><?php echo __('Indexes');?></h3>        <table id="tablestructure_indexes" class="data">        <thead>        <tr>            <th><?php echo __('Keyname');?></th>            <th><?php echo __('Type');?></th>            <th><?php echo __('Unique');?></th>            <th><?php echo __('Packed');?></th>            <th><?php echo __('Column');?></th>            <th><?php echo __('Cardinality');?></th>            <th><?php echo __('Collation');?></th>            <th><?php echo __('Null');?></th>            <th><?php echo __('Comment');?></th>        </tr>        <tbody><?php        $style = 'odd';        foreach ($indexes as $indexes_index => $index) {            if ($index['Non_unique'] == 0) {                $str_unique = __('Yes');            } else {                $str_unique = __('No');            }            if ($index['Packed'] != '') {                $str_packed = __('Yes');            } else {                $str_packed = __('No');            }?>            <tr class="noclick <?php echo $style; ?>">                <td><b><?php echo htmlspecialchars($index['Key_name']);?></b></td>                <td><?php echo htmlspecialchars($index['Index_type']);?></td>                <td><?php echo $str_unique;?></td>                <td><?php echo $str_packed;?></td>                <td><?php echo htmlspecialchars($index['Column_name']);?></td>                <td><?php echo htmlspecialchars($index['Cardinality']);?></td>                <td><?php echo htmlspecialchars($index['Collation']);?></td>                <td><?php echo htmlspecialchars($index['Null']);?></td>                <td><?php echo htmlspecialchars($index['Comment']);?></td>            </tr><?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }        }?>    </tbody>    </table><?php    } // endif?>    <br /><hr /><br /><?php}// end of snapshot report/* *  Tracking report */if (isset($_REQUEST['report']) && (isset($_REQUEST['delete_ddlog']) || isset($_REQUEST['delete_dmlog']))) {    if (isset($_REQUEST['delete_ddlog'])) {        // Delete ddlog row data        $delete_id = $_REQUEST['delete_ddlog'];        // Only in case of valable id        if ($delete_id == (int)$delete_id) {            unset($data['ddlog'][$delete_id]);            if (PMA_Tracker::changeTrackingData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version'], 'DDL', $data['ddlog']))                $msg = PMA_Message::success(__('Tracking data definition successfully deleted'));            else                $msg = PMA_Message::rawError(__('Query error'));            $msg->display();        }    }    if (isset($_REQUEST['delete_dmlog'])) {        // Delete dmlog row data        $delete_id = $_REQUEST['delete_dmlog'];        // Only in case of valable id        if ($delete_id == (int)$delete_id) {            unset($data['dmlog'][$delete_id]);            if (PMA_Tracker::changeTrackingData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version'], 'DML', $data['dmlog']))                $msg = PMA_Message::success(__('Tracking data manipulation successfully deleted'));            else                $msg = PMA_Message::rawError(__('Query error'));            $msg->display();        }    }}if (isset($_REQUEST['report']) || isset($_REQUEST['report_export'])) {    ?>    <h3><?php echo __('Tracking report');?>  [<a href="tbl_tracking.php?<?php echo $url_query;?>"><?php echo __('Close');?></a>]</h3>    <small><?php echo __('Tracking statements') . ' ' . htmlspecialchars($data['tracking']); ?></small><br/>    <br/>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <?php    $str1 = '<select name="logtype">' .            '<option value="schema"' . ($selection_schema ? ' selected="selected"' : '') . '>' . __('Structure only') . '</option>' .            '<option value="data"' . ($selection_data ? ' selected="selected"' : ''). '>' . __('Data only') . '</option>' .            '<option value="schema_and_data"' . ($selection_both ? ' selected="selected"' : '') . '>' . __('Structure and data') . '</option>' .            '</select>';    $str2 = '<input type="text" name="date_from" value="' . htmlspecialchars($_REQUEST['date_from']) . '" size="19" />';    $str3 = '<input type="text" name="date_to" value="' . htmlspecialchars($_REQUEST['date_to']) . '" size="19" />';    $str4 = '<input type="text" name="users" value="' . htmlspecialchars($_REQUEST['users']) . '" />';    $str5 = '<input type="submit" name="list_report" value="' . __('Go') . '" />';    printf(__('Show %s with dates from %s to %s by user %s %s'), $str1, $str2, $str3, $str4, $str5);    // Prepare delete link content here    $drop_image_or_text = '';    if (true == $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= PMA_getImage('b_drop.png', __('Delete tracking data row from report'));    }    if ('both' === $GLOBALS['cfg']['PropertiesIconic'] || false === $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= __('Delete');    }    /*     *  First, list tracked data definition statements     */    $i = 1;    if (count($data['ddlog']) == 0 && count($data['dmlog']) == 0) {        $msg = PMA_Message::notice(__('No data'));        $msg->display();    }    if ($selection_schema || $selection_both  && count($data['ddlog']) > 0) {    ?>        <table id="ddl_versions" class="data" width="100%">        <thead>        <tr>            <th width="18">#</th>            <th width="100"><?php echo __('Date');?></th>            <th width="60"><?php echo __('Username');?></th>            <th><?php echo __('Data definition statement');?></th>            <th><?php echo __('Delete');?></th>        </tr>        </thead>        <tbody>        <?php        $style = 'odd';        foreach ($data['ddlog'] as $entry) {            if (strlen($entry['statement']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                $statement = substr($entry['statement'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';            } else {                $statement  = PMA_formatSql(PMA_SQP_parse($entry['statement']));            }            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {        ?>                <tr class="noclick <?php echo $style; ?>">                    <td><small><?php echo $i;?></small></td>                    <td><small><?php echo htmlspecialchars($entry['date']);?></small></td>                    <td><small><?php echo htmlspecialchars($entry['username']); ?></small></td>                    <td><?php echo $statement; ?></td>                    <td nowrap="nowrap"><a href="tbl_tracking.php?<?php echo $url_query;?>&amp;report=true&amp;version=<?php echo $version['version'];?>&amp;delete_ddlog=<?php echo $i-1; ?>"><?php echo $drop_image_or_text; ?></a></td>                </tr>        <?php                if ($style == 'even') {                    $style = 'odd';                } else {                    $style = 'even';                }                $i++;            }        }        ?>        </tbody>        </table>    <?php    } //endif    // Memorize data definition amount    $ddlog_count = $i;    /*     *  Secondly, list tracked data manipulation statements     */    if (($selection_data || $selection_both) && count($data['dmlog']) > 0) {    ?>        <table id="dml_versions" class="data" width="100%">        <thead>        <tr>            <th width="18">#</th>            <th width="100"><?php echo __('Date');?></th>            <th width="60"><?php echo __('Username');?></th>            <th><?php echo __('Data manipulation statement');?></th>            <th><?php echo __('Delete');?></th>        </tr>        </thead>        <tbody>        <?php        $style = 'odd';        foreach ($data['dmlog'] as $entry) {            if (strlen($entry['statement']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                $statement = substr($entry['statement'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';            } else {                $statement  = PMA_formatSql(PMA_SQP_parse($entry['statement']));            }            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {        ?>                <tr class="noclick <?php echo $style; ?>">                    <td><small><?php echo $i; ?></small></td>                    <td><small><?php echo htmlspecialchars($entry['date']); ?></small></td>                    <td><small><?php echo htmlspecialchars($entry['username']); ?></small></td>                    <td><?php echo $statement; ?></td>                    <td nowrap="nowrap"><a href="tbl_tracking.php?<?php echo $url_query;?>&amp;report=true&amp;version=<?php echo $version['version'];?>&amp;delete_dmlog=<?php echo $i-$ddlog_count; ?>"><?php echo $drop_image_or_text; ?></a></td>                </tr>        <?php                if ($style == 'even') {                    $style = 'odd';                } else {                    $style = 'even';                }                $i++;            }        }    ?>        </tbody>        </table>    <?php    }    ?>    </form>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <?php    printf(__('Show %s with dates from %s to %s by user %s %s'), $str1, $str2, $str3, $str4, $str5);    $str_export1 =  '<select name="export_type">' .                    '<option value="sqldumpfile">' . __('SQL dump (file download)') . '</option>' .                    '<option value="sqldump">' . __('SQL dump') . '</option>' .                    '<option value="execution" onclick="alert(\'' . PMA_escapeJsString(__('This option will replace your table and contained data.')) .'\')">' . __('SQL execution') . '</option>' .                    '</select>';    $str_export2 = '<input type="submit" name="report_export" value="' . __('Go') .'" />';    ?>    </form>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <input type="hidden" name="logtype" value="<?php echo htmlspecialchars($_REQUEST['logtype']);?>" />    <input type="hidden" name="date_from" value="<?php echo htmlspecialchars($_REQUEST['date_from']);?>" />    <input type="hidden" name="date_to" value="<?php echo htmlspecialchars($_REQUEST['date_to']);?>" />    <input type="hidden" name="users" value="<?php echo htmlspecialchars($_REQUEST['users']);?>" />    <?php    echo "<br/>" . sprintf(__('Export as %s'), $str_export1) . $str_export2 . "<br/>";    ?>    </form>    <?php    echo "<br/><br/><hr/><br/>\n";} // end of report/* * List selectable tables */$sql_query = " SELECT DISTINCT db_name, table_name FROM " .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . "." .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             " WHERE db_name = '" . PMA_sqlAddSlashes($GLOBALS['db']) . "' " .             " ORDER BY db_name, table_name";$sql_result = PMA_query_as_controluser($sql_query);if (PMA_DBI_num_rows($sql_result) > 0) {?>    <form method="post" action="tbl_tracking.php?<?php echo $url_query;?>">    <select name="table">    <?php    while ($entries = PMA_DBI_fetch_array($sql_result)) {        if (PMA_Tracker::isTracked($entries['db_name'], $entries['table_name'])) {            $status = ' (' . __('active') . ')';        } else {            $status = ' (' . __('not active') . ')';        }        if ($entries['table_name'] == $_REQUEST['table']) {            $s = ' selected="selected"';        } else {            $s = '';        }        echo '<option value="' . htmlspecialchars($entries['table_name']) . '"' . $s . '>' . htmlspecialchars($entries['db_name']) . ' . ' . htmlspecialchars($entries['table_name']) . $status . '</option>' . "\n";    }    ?>    </select>    <input type="submit" name="show_versions_submit" value="<?php echo __('Show versions');?>" />    </form><?php}?><br /><?php/* * List versions of current table */$sql_query = " SELECT * FROM " .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . "." .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             " WHERE db_name = '" . PMA_sqlAddSlashes($_REQUEST['db']) . "' ".             " AND table_name = '" . PMA_sqlAddSlashes($_REQUEST['table']) ."' ".             " ORDER BY version DESC ";$sql_result = PMA_query_as_controluser($sql_query);$last_version = 0;$maxversion = PMA_DBI_fetch_array($sql_result);$last_version = $maxversion['version'];if ($last_version > 0) {?>    <table id="versions" class="data">    <thead>    <tr>        <th><?php echo __('Database');?></th>        <th><?php echo __('Table');?></th>        <th><?php echo __('Version');?></th>        <th><?php echo __('Created');?></th>        <th><?php echo __('Updated');?></th>        <th><?php echo __('Status');?></th>        <th><?php echo __('Show');?></th>    </tr>    </thead>    <tbody>    <?php    $style = 'odd';    PMA_DBI_data_seek($sql_result, 0);    while ($version = PMA_DBI_fetch_array($sql_result)) {        if ($version['tracking_active'] == 1) {            $version_status = __('active');        } else {            $version_status = __('not active');        }        if ($version['version'] == $last_version) {            if ($version['tracking_active'] == 1) {                $tracking_active = true;            } else {                $tracking_active = false;            }        }    ?>        <tr class="noclick <?php echo $style;?>">            <td><?php echo htmlspecialchars($version['db_name']);?></td>            <td><?php echo htmlspecialchars($version['table_name']);?></td>            <td><?php echo htmlspecialchars($version['version']);?></td>            <td><?php echo htmlspecialchars($version['date_created']);?></td>            <td><?php echo htmlspecialchars($version['date_updated']);?></td>            <td><?php echo $version_status;?></td>            <td> <a href="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $version['version']));?>"><?php echo __('Tracking report');?></a>                | <a href="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('snapshot' => 'true', 'version' => $version['version']));?>"><?php echo __('Structure snapshot');?></a>            </td>        </tr>    <?php        if ($style == 'even') {            $style = 'odd';        } else {            $style = 'even';        }    }    ?>    </tbody>    </table>    <?php if ($tracking_active == true) {?>        <div id="div_deactivate_tracking">        <form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>">        <fieldset>            <legend><?php printf(__('Deactivate tracking for %s.%s'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>            <input type="hidden" name="version" value="<?php echo $last_version; ?>" />            <input type="submit" name="submit_deactivate_now" value="<?php echo __('Deactivate now'); ?>" />        </fieldset>        </form>        </div>    <?php    }    ?>    <?php if ($tracking_active == false) {?>        <div id="div_activate_tracking">        <form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>">        <fieldset>            <legend><?php printf(__('Activate tracking for %s.%s'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>            <input type="hidden" name="version" value="<?php echo $last_version; ?>" />            <input type="submit" name="submit_activate_now" value="<?php echo __('Activate now'); ?>" />        </fieldset>        </form>        </div>    <?php    }}?><div id="div_create_version"><form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><fieldset>    <legend><?php printf(__('Create version %s of %s.%s'), ($last_version + 1), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>    <input type="hidden" name="version" value="<?php echo ($last_version + 1); ?>" />    <p><?php echo __('Track these data definition statements:');?></p>    <input type="checkbox" name="alter_table" value="true" checked="checked" /> ALTER TABLE<br/>    <input type="checkbox" name="rename_table" value="true" checked="checked" /> RENAME TABLE<br/>    <input type="checkbox" name="create_table" value="true" checked="checked" /> CREATE TABLE<br/>    <input type="checkbox" name="drop_table" value="true" checked="checked" /> DROP TABLE<br/>    <br/>    <input type="checkbox" name="create_index" value="true" checked="checked" /> CREATE INDEX<br/>    <input type="checkbox" name="drop_index" value="true" checked="checked" /> DROP INDEX<br/>    <p><?php echo __('Track these data manipulation statements:');?></p>    <input type="checkbox" name="insert" value="true" checked="checked" /> INSERT<br/>    <input type="checkbox" name="update" value="true" checked="checked" /> UPDATE<br/>    <input type="checkbox" name="delete" value="true" checked="checked" /> DELETE<br/>    <input type="checkbox" name="truncate" value="true" checked="checked" /> TRUNCATE<br/></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_create_version" value="<?php echo __('Create version'); ?>" /></fieldset></form></div><br class="clearfloat"/><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run config authentication (ie no authentication). * * @package PhpMyAdmin-Auth-Config *//** * Displays authentication form * * @return  boolean   always true * * @access  public */function PMA_auth(){    return true;} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * @return  boolean   always true * * @access  public */function PMA_auth_check(){    return true;} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * @global  string    the MySQL error message PHP returns * @global  string    the connection type (persistent or not) * @global  string    the MySQL server port to use * @global  string    the MySQL socket port to use * @global  array     the current server settings * @global  string    the font face to use in case of failure * @global  string    the default font size to use in case of failure * @global  string    the big font size to use in case of failure * @global  boolean   tell the "PMA_mysqlDie()" function headers have been *                    sent * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth_fails(){    $conn_error = PMA_DBI_getError();    if (!$conn_error) {        $conn_error = __('Cannot connect: invalid settings.');    }    // Defines the charset to be used    header('Content-Type: text/html; charset=utf-8');    /* HTML header */    $page_title = __('Access denied');    include './libraries/header_meta_style.inc.php';    ?></head><body><br /><br /><center>    <h1><?php echo sprintf(__('Welcome to %s'), ' phpMyAdmin '); ?></h1></center><br /><table border="0" cellpadding="0" cellspacing="3" align="center" width="80%">    <tr>        <td>    <?php    $GLOBALS['is_header_sent'] = true;    if (isset($GLOBALS['allowDeny_forbidden']) && $GLOBALS['allowDeny_forbidden']) {        trigger_error(__('Access denied'), E_USER_NOTICE);    } else {        // Check whether user has configured something        if ($GLOBALS['PMA_Config']->source_mtime == 0) {            echo '<p>' . sprintf(__('You probably did not create a configuration file. You might want to use the %1$ssetup script%2$s to create one.'), '<a href="setup/">', '</a>') . '</p>' . "\n";        } elseif (!isset($GLOBALS['errno']) || (isset($GLOBALS['errno']) && $GLOBALS['errno'] != 2002) && $GLOBALS['errno'] != 2003) {        // if we display the "Server not responding" error, do not confuse users        // by telling them they have a settings problem        // (note: it's true that they could have a badly typed host name, but        //  anyway the current message tells that the server        //  rejected the connection, which is not really what happened)        // 2002 is the error given by mysqli        // 2003 is the error given by mysql            trigger_error(__('phpMyAdmin tried to connect to the MySQL server, and the server rejected the connection. You should check the host, username and password in your configuration and make sure that they correspond to the information given by the administrator of the MySQL server.'), E_USER_WARNING);        }        PMA_mysqlDie($conn_error, '', true, '', false);    }    $GLOBALS['error_handler']->dispUserErrors();?>        </td>    </tr><?php    if (count($GLOBALS['cfg']['Servers']) > 1) {        // offer a chance to login to other servers if the current one failed        include_once './libraries/select_server.lib.php';        echo '<tr>' . "\n";        echo ' <td>' . "\n";        PMA_select_server(true, true);        echo ' </td>' . "\n";        echo '</tr>' . "\n";    }    echo '</table>' . "\n";    include './libraries/footer.inc.php';    return true;} // end of the 'PMA_auth_fails()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * configures general layout * for detailed layout configuration please refer to the css files * * @package PhpMyAdmin-theme * @subpackage Original *//** * navi frame */// navi frame width$GLOBALS['cfg']['NaviWidth']                = 200;// foreground (text) color for the navi frame$GLOBALS['cfg']['NaviColor']                = '#000000';// background for the navi frame$GLOBALS['cfg']['NaviBackground']           = '#D0DCE0';// foreground (text) color of the pointer in navi frame$GLOBALS['cfg']['NaviPointerColor']         = '#000000';// background of the pointer in navi frame$GLOBALS['cfg']['NaviPointerBackground']    = '#9999CC';/** * main frame */// foreground (text) color for the main frame$GLOBALS['cfg']['MainColor']                = '#000000';// background for the main frame$GLOBALS['cfg']['MainBackground']           = '#F5F5F5';// foreground (text) color of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerColor']       = '#000000';// background of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerBackground']  = '#CCFFCC';// foreground (text) color of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerColor']        = '#000000';// background of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerBackground']   = '#FFCC99';/** * fonts *//** * the font family as a valid css font family value, * if not set the browser default will be used * (depending on browser, DTD and system settings) */$GLOBALS['cfg']['FontFamily']           = 'sans-serif';/** * fixed width font family, used in textarea */$GLOBALS['cfg']['FontFamilyFixed']      = 'monospace';/** * tables */// border$GLOBALS['cfg']['Border']               = 0;// table header and footer color$GLOBALS['cfg']['ThBackground']         = '#D3DCE3';// table header and footer background$GLOBALS['cfg']['ThColor']              = '#000000';// table data row background$GLOBALS['cfg']['BgOne']                = '#E5E5E5';// table data row background, alternate$GLOBALS['cfg']['BgTwo']                = '#D5D5D5';/** * query window */// Width of Query window$GLOBALS['cfg']['QueryWindowWidth']     = 600;// Height of Query window$GLOBALS['cfg']['QueryWindowHeight']    = 400;/** * SQL Parser Settings * Syntax colouring data */$GLOBALS['cfg']['SQP']['fmtColor']      = array(    'comment'            => '#808000',    'comment_mysql'      => '',    'comment_ansi'       => '',    'comment_c'          => '',    'digit'              => '',    'digit_hex'          => 'teal',    'digit_integer'      => 'teal',    'digit_float'        => 'aqua',    'punct'              => 'fuchsia',    'alpha'              => '',    'alpha_columnType'   => '#FF9900',    'alpha_columnAttrib' => '#0000FF',    'alpha_reservedWord' => '#990099',    'alpha_functionName' => '#FF0000',    'alpha_identifier'   => 'black',    'alpha_charset'      => '#6495ed',    'alpha_variable'     => '#800000',    'quote'              => '#008000',    'quote_double'       => '',    'quote_single'       => '',    'quote_backtick'     => '');/** * Chart colors */ $GLOBALS['cfg']['chartColor'] = array(    'gradientIntensity'       => 0,    // The style of the chart title.    'titleColor'              => '#000000',    'titleBgColor'            => $GLOBALS['cfg']['ThBackground'],    // Chart border (0 for no border)    'border'                  => '#CCCCCC',    // Chart background color.    'bgColor'                 => $GLOBALS['cfg']['BgTwo'],    // when graph area gradient is used, this is the color of the graph    // area border    'graphAreaColor'          =>  '#D5D9DD',    // the background color of the inner graph area    'graphAreaGradientColor'  => $GLOBALS['cfg']['BgOne'],    // the color of the grid lines in the graph area    'gridColor'               => '#E6E6E6',    // the color of the scale and the labels    'scaleColor'              => '#D5D9DD', );?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common functions for generating the footer for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Creates a fieldset for adding a new item, if the user has the privileges. * * @param    string   $docu   String used to create a link to the MySQL docs * @param    string   $priv   Privilege to check for adding a new item * @param    string   $name   MySQL name of the item * * @return   string   An HTML snippet with the link to add a new item */function PMA_RTE_getFooterLinks($docu, $priv, $name){    global $db, $url_query, $ajax_class;    $icon = 'b_' . strtolower($name) . '_add.png';    $retval  = "";    $retval .= "<!-- ADD " . $name . " FORM START -->\n";    $retval .= "<fieldset class='left'>\n";    $retval .= "    <legend>" . __('New'). "</legend>\n";    $retval .= "        <div class='wrap'>\n";    if (PMA_currentUserHasPrivilege($priv, $db)) {        $retval .= "            <a {$ajax_class['add']} ";        $retval .= "href='db_" . strtolower($name) . "s.php";        $retval .= "?$url_query&amp;add_item=1'>";        $retval .= PMA_getIcon($icon);        $retval .= PMA_RTE_getWord('add') . "</a>\n";    } else {        $retval .= "            " . PMA_getIcon($icon);        $retval .= PMA_RTE_getWord('no_create') . "\n";    }    $retval .= "            " . PMA_showMySQLDocu('SQL-Syntax', $docu) . "\n";    $retval .= "        </div>\n";    $retval .= "</fieldset>\n";    $retval .= "<!-- ADD " . $name . " FORM END -->\n\n";    return $retval;} // end PMA_RTE_getFooterLinks()/** * Creates a fieldset for adding a new routine, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_RTN_getFooterLinks(){    return PMA_RTE_getFooterLinks('CREATE_PROCEDURE', 'CREATE ROUTINE', 'ROUTINE');}// end PMA_RTN_getFooterLinks()/** * Creates a fieldset for adding a new trigger, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_TRI_getFooterLinks(){    return PMA_RTE_getFooterLinks('CREATE_TRIGGER', 'TRIGGER', 'TRIGGER');} // end PMA_TRI_getFooterLinks()/** * Creates a fieldset for adding a new event, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_EVN_getFooterLinks(){    global $db, $url_query;    /**     * For events, we show the usual 'Add event' form and also     * a form for toggling the state of the event scheduler     */    // Init options for the event scheduler toggle functionality    $es_state = PMA_DBI_fetch_value(        "SHOW GLOBAL VARIABLES LIKE 'event_scheduler'",        0,        1    );    $es_state = strtolower($es_state);    $options = array(                    0 => array(                        'label' => __('OFF'),                        'value' => "SET GLOBAL event_scheduler=\"OFF\"",                        'selected' => ($es_state != 'on')                    ),                    1 => array(                        'label' => __('ON'),                        'value' => "SET GLOBAL event_scheduler=\"ON\"",                        'selected' => ($es_state == 'on')                    )               );    // Generate output    $retval  = "<!-- FOOTER LINKS START -->\n";    $retval .= "<div class='doubleFieldset'>\n";    // show the usual footer    $retval .= PMA_RTE_getFooterLinks('CREATE_EVENT', 'EVENT', 'EVENT');    $retval .= "    <fieldset class='right'>\n";    $retval .= "        <legend>\n";    $retval .= "            " . __('Event scheduler status') . "\n";    $retval .= "        </legend>\n";    $retval .= "        <div class='wrap'>\n";    // show the toggle button    $retval .= PMA_toggleButton(        "sql.php?$url_query&amp;goto=db_events.php" . urlencode("?db=$db"),        'sql_query',        $options,        'PMA_slidingMessage(data.sql_query);'    );    $retval .= "        </div>\n";    $retval .= "    </fieldset>\n";    $retval .= "    <div style='clear: both;'></div>\n";    $retval .= "</div>";    $retval .= "<!-- FOOTER LINKS END -->\n";    return $retval;} // end PMA_EVN_getFooterLinks()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/bookmark.lib.php';PMA_checkParameters(array('db'));$is_show_stats = $cfg['ShowStats'];$db_is_information_schema = PMA_is_system_schema($db);if ($db_is_information_schema) {    $is_show_stats = false;}/** * Defines the urls to return to in case of error in a sql statement */$err_url_0 = 'main.php?' . PMA_generate_common_url();$err_url   = $cfg['DefaultTabDatabase'] . '?' . PMA_generate_common_url($db);/** * Ensures the database exists (else move to the "parent" script) and displays * headers */if (! isset($is_db) || ! $is_db) {    if (strlen($db)) {        $is_db = PMA_DBI_select_db($db);        // This "Command out of sync" 2014 error may happen, for example        // after calling a MySQL procedure; at this point we can't select        // the db but it's not necessarily wrong        if (PMA_DBI_getError() && $GLOBALS['errno'] == 2014) {            $is_db = true;            unset($GLOBALS['errno']);        }    }    // Not a valid db name -> back to the welcome page    if (! strlen($db) || ! $is_db) {        PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . 'main.php?' . PMA_generate_common_url('', '', '&') . (isset($message) ? '&message=' . urlencode($message) : '') . '&reload=1');        exit;    }} // end if (ensures db exists)/** * Changes database charset if requested by the user */if (isset($submitcollation) && !empty($db_collation)) {    list($db_charset) = explode('_', $db_collation);    $sql_query        = 'ALTER DATABASE ' . PMA_backquote($db) . ' DEFAULT' . PMA_generateCharsetQueryPart($db_collation);    $result           = PMA_DBI_query($sql_query);    $message          = PMA_Message::success();    unset($db_charset, $db_collation);    /**     * If we are in an Ajax request, let us stop the execution here. Necessary for     * db charset change action on db_operations.php.  If this causes a bug on     * other pages, we might have to move this to a different location.     */    if ( $GLOBALS['is_ajax_request'] == true) {        PMA_ajaxResponse($message, $message->isSuccess());    };}require_once './libraries/header.inc.php';/** * Set parameters for links */$url_query = PMA_generate_common_url($db);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Does the common work */require_once './libraries/common.inc.php';require './libraries/server_common.inc.php';if (!PMA_DRIZZLE) {    include_once './libraries/replication.inc.php';} else {    $replication_types = array();    $replication_info = null;}require './libraries/build_html_for_db.lib.php';/** * avoids 'undefined index' errors */if (empty($_REQUEST['sort_by'])) {    $sort_by = 'SCHEMA_NAME';} else {    $sort_by_whitelist = array(        'SCHEMA_NAME',        'DEFAULT_COLLATION_NAME',        'SCHEMA_TABLES',        'SCHEMA_TABLE_ROWS',        'SCHEMA_DATA_LENGTH',        'SCHEMA_INDEX_LENGTH',        'SCHEMA_LENGTH',        'SCHEMA_DATA_FREE'    );    if (in_array($_REQUEST['sort_by'], $sort_by_whitelist)) {        $sort_by = $_REQUEST['sort_by'];    } else {        $sort_by = 'SCHEMA_NAME';    }}if (isset($_REQUEST['sort_order']) && strtolower($_REQUEST['sort_order']) == 'desc') {    $sort_order = 'desc';} else {    $sort_order = 'asc';}$dbstats    = empty($_REQUEST['dbstats']) ? 0 : 1;$pos        = empty($_REQUEST['pos']) ? 0 : (int) $_REQUEST['pos'];/** * Drops multiple databases */// workaround for IE behavior (it returns some coordinates based on where// the mouse was on the Drop image):if (isset($_REQUEST['drop_selected_dbs_x'])) {    $_REQUEST['drop_selected_dbs'] = true;}if ((isset($_REQUEST['drop_selected_dbs']) || isset($_REQUEST['query_type']))  && ($is_superuser || $cfg['AllowUserDropDatabase'])) {    if (! isset($_REQUEST['selected_dbs']) && ! isset($_REQUEST['query_type'])) {        $message = PMA_Message::error(__('No databases selected.'));    } else {        $action = 'server_databases.php';        $submit_mult = 'drop_db' ;        $err_url = 'server_databases.php?' . PMA_generate_common_url();        if (isset($_REQUEST['selected_dbs'])) {            $selected_db = $_REQUEST['selected_dbs'];        }        include './libraries/mult_submits.inc.php';        unset($action, $submit_mult, $err_url, $selected_db, $GLOBALS['db']);        if (empty($message)) {            $message = PMA_Message::success(__('%s databases have been dropped successfully.'));            if ($mult_btn == __('Yes')) {                $message->addParam(count($selected));            } else {                $message->addParam(0);            }        }    }}/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($GLOBALS['cfg']['MainPageIconic']      ? PMA_getImage('s_db.png')      : '')   . ($dbstats ? __('Databases statistics') : __('Databases')) . "\n"   .'</h2>' . "\n";/** * Create database. */if ($cfg['ShowCreateDb']) {    echo '<ul><li id="li_create_database">' . "\n";    include './libraries/display_create_database.lib.php';    echo '    </li>' . "\n";    echo '</ul>' . "\n";}/** * Gets the databases list */if ($server > 0) {    $databases = PMA_DBI_get_databases_full(null, $dbstats, null, $sort_by,        $sort_order, $pos, true);    $databases_count = count($GLOBALS['pma']->databases);} else {    $databases_count = 0;}/** * Displays the page */if ($databases_count > 0) {    echo '<div id="tableslistcontainer">';    reset($databases);    $first_database = current($databases);    // table col order    $column_order = PMA_getColumnOrder();    $_url_params = array(        'pos' => $pos,        'dbstats' => $dbstats,        'sort_by' => $sort_by,        'sort_order' => $sort_order,    );    PMA_listNavigator($databases_count, $pos, $_url_params, 'server_databases.php', 'frame_content', $GLOBALS['cfg']['MaxDbList']);    $_url_params['pos'] = $pos;    echo '<form action="./server_databases.php" method="post" name="dbStatsForm" id="dbStatsForm">' . "\n"       . PMA_generate_common_hidden_inputs($_url_params);    $_url_params['sort_by'] = 'SCHEMA_NAME';    $_url_params['sort_order'] = ($sort_by == 'SCHEMA_NAME' && $sort_order == 'asc') ? 'desc' : 'asc';    echo '<table id="tabledatabases" class="data">' . "\n"       . '<thead>' . "\n"       . '<tr>' . "\n"       . ($is_superuser || $cfg['AllowUserDropDatabase'] ? '        <th></th>' . "\n" : '')       . '    <th><a href="./server_databases.php' . PMA_generate_common_url($_url_params) . '">' . "\n"       . '            ' . __('Database') . "\n"       . ($sort_by == 'SCHEMA_NAME' ? '                ' . PMA_getImage('s_' . $sort_order . '.png', ($sort_order == 'asc' ? __('Ascending') : __('Descending'))) . "\n" : '')       . '        </a></th>' . "\n";    $table_columns = 3;    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $first_database)) {            if ($stat['format'] === 'byte') {                $table_columns += 2;                $colspan = ' colspan="2"';            } else {                $table_columns++;                $colspan = '';            }            $_url_params['sort_by'] = $stat_name;            $_url_params['sort_order'] = ($sort_by == $stat_name && $sort_order == 'desc') ? 'asc' : 'desc';            echo '    <th' . $colspan . '>'                .'<a href="./server_databases.php' . PMA_generate_common_url($_url_params) . '">' . "\n"                .'            ' . $stat['disp_name'] . "\n"                .($sort_by == $stat_name ? '            ' . PMA_getImage('s_' . $sort_order . '.png', ($sort_order == 'asc' ? __('Ascending') : __('Descending'))) . "\n" : '')                .'        </a></th>' . "\n";        }    }    foreach ($replication_types as $type) {      if ($type=="master")        $name = __('Master replication');      elseif ($type == "slave")        $name = __('Slave replication');      if (${"server_{$type}_status"})        echo '    <th>'. $name .'</th>' . "\n";    }    if ($is_superuser && !PMA_DRIZZLE) {        echo '    <th>' . ($cfg['PropertiesIconic'] ? '' : __('Action')) . "\n"           . '    </th>' . "\n";    }    echo '</tr>' . "\n"       . '</thead>' . "\n"       . '<tbody>' . "\n";    $odd_row = true;    foreach ($databases as $current) {        $tr_class = $odd_row ? 'odd' : 'even';        if (PMA_is_system_schema($current['SCHEMA_NAME'], true)) {            $tr_class .= ' noclick';        }        echo '<tr class="' . $tr_class . '">' . "\n";        $odd_row = ! $odd_row;        list($column_order, $generated_html) = PMA_buildHtmlForDb($current, $is_superuser, (isset($checkall) ? $checkall : ''), $url_query, $column_order, $replication_types, $replication_info);        echo $generated_html;        echo '</tr>' . "\n";    } // end foreach ($databases as $key => $current)    unset($current, $odd_row);    echo '<tr id="db_summary_row">' . "\n";    if ($is_superuser || $cfg['AllowUserDropDatabase']) {        echo '    <th></th>' . "\n";    }    echo '    <th>' . __('Total') . ': <span id="databases_count">' . $databases_count . '</span></th>' . "\n";    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $first_database)) {            if ($stat['format'] === 'byte') {                list($value, $unit) = PMA_formatByteDown($stat['footer'], 3, 1);            } elseif ($stat['format'] === 'number') {                $value = PMA_formatNumber($stat['footer'], 0);            } else {                $value = htmlentities($stat['footer'], 0);            }            echo '    <th class="value">';            if (isset($stat['description_function'])) {                echo '<dfn title="' . $stat['description_function']($stat['footer']) . '">';            }            echo $value;            if (isset($stat['description_function'])) {                echo '</dfn>';            }            echo '</th>' . "\n";            if ($stat['format'] === 'byte') {                echo '    <th class="unit">' . $unit . '</th>' . "\n";            }        }    }    foreach ($replication_types as $type) {        if (${"server_{$type}_status"}) {            echo '    <th></th>' . "\n";        }    }    if ($is_superuser) {        echo '    <th></th>' . "\n";    }    echo '</tr>' . "\n";    echo '</tbody>' . "\n"        .'</table>' . "\n";    unset($column_order, $stat_name, $stat, $databases, $table_columns);    if ($is_superuser || $cfg['AllowUserDropDatabase']) {        $common_url_query = PMA_generate_common_url(array('sort_by' => $sort_by, 'sort_order' => $sort_order, 'dbstats' => $dbstats));        echo '<img class="selectallarrow" src="' . $pmaThemeImage . 'arrow_' . $text_dir . '.png" width="38" height="22" alt="' . __('With selected:') . '" />' . "\n"           . '<a href="./server_databases.php' . $common_url_query . '&amp;checkall=1" onclick="if (markAllRows(\'tabledatabases\')) return false;">' . "\n"           . '    ' . __('Check All') . '</a> / ' . "\n"           . '<a href="./server_databases.php' . $common_url_query . '" onclick="if (unMarkAllRows(\'tabledatabases\')) return false;">' . "\n"           . '    ' . __('Uncheck All') . '</a>' . "\n"           . '<i>' . __('With selected:') . '</i>' . "\n";        PMA_buttonOrImage('drop_selected_dbs', 'mult_submit', 'drop_selected_dbs', __('Drop'), 'b_deltbl.png');    }    if (empty($dbstats)) {        echo '<ul><li id="li_switch_dbstats"><strong>' . "\n";            echo '        <a href="./server_databases.php?' . $url_query . '&amp;dbstats=1"'                .' title="' . __('Enable Statistics') . '">' . "\n"                .'            ' . __('Enable Statistics');        echo '</a></strong><br />' . "\n";        PMA_Message::notice(__('Note: Enabling the database statistics here might cause heavy traffic between the web server and the MySQL server.'))->display();        echo '</li>' . "\n" . '</ul>' . "\n";    }    echo '</form>';    echo '</div>';} else {    echo __('No databases');}unset($databases_count);/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Prepares the $column_order array * * @return array */function PMA_getColumnOrder(){    $column_order['DEFAULT_COLLATION_NAME'] = array(            'disp_name' => __('Collation'),            'description_function' => 'PMA_getCollationDescr',            'format'    => 'string',            'footer'    => PMA_getServerCollation(),        );    $column_order['SCHEMA_TABLES'] = array(        'disp_name' => __('Tables'),        'format'    => 'number',        'footer'    => 0,    );    $column_order['SCHEMA_TABLE_ROWS'] = array(        'disp_name' => __('Rows'),        'format'    => 'number',        'footer'    => 0,    );    $column_order['SCHEMA_DATA_LENGTH'] = array(        'disp_name' => __('Data'),        'format'    => 'byte',        'footer'    => 0,    );    $column_order['SCHEMA_INDEX_LENGTH'] = array(        'disp_name' => __('Indexes'),        'format'    => 'byte',        'footer'    => 0,    );    $column_order['SCHEMA_LENGTH'] = array(        'disp_name' => __('Total'),        'format'    => 'byte',        'footer'    => 0,    );    $column_order['SCHEMA_DATA_FREE'] = array(        'disp_name' => __('Overhead'),        'format'    => 'byte',        'footer'    => 0,    );    return $column_order;}/* * Builds the HTML td elements for one database to display in the list * of databases from server_databases.php (which can be modified by * db_create.php) * * @param array $current * @param boolean $is_superuser * @param string $checkall * @param string $url_query * @param array $column_order * @param array $replication_types * @param array $replication_info * * @return array $column_order, $out */function PMA_buildHtmlForDb($current, $is_superuser, $checkall, $url_query, $column_order, $replication_types, $replication_info){    $out = '';    if ($is_superuser || $GLOBALS['cfg']['AllowUserDropDatabase']) {        $out .= '<td class="tool">';        $out .= '<input type="checkbox" name="selected_dbs[]" title="' . htmlspecialchars($current['SCHEMA_NAME']) . '" value="' . htmlspecialchars($current['SCHEMA_NAME']) . '" ';        if (!PMA_is_system_schema($current['SCHEMA_NAME'], true)) {            $out .= (empty($checkall) ? '' : 'checked="checked" ') . '/>';        } else {            $out .= ' disabled="disabled" />';        }        $out .= '</td>';    }    $out .= '<td class="name">'           . '        <a onclick="'           . 'if (window.parent.openDb &amp;&amp; window.parent.openDb(\'' . PMA_jsFormat($current['SCHEMA_NAME'], false) . '\')) return false;'           . '" href="index.php?' . $url_query . '&amp;db='           . urlencode($current['SCHEMA_NAME']) . '" title="'           . sprintf(__('Jump to database'), htmlspecialchars($current['SCHEMA_NAME']))           . '" target="_parent">'           . ' ' . htmlspecialchars($current['SCHEMA_NAME'])           . '</a>'           . '</td>';    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $current)) {            if (is_numeric($stat['footer'])) {                $column_order[$stat_name]['footer'] += $current[$stat_name];            }            if ($stat['format'] === 'byte') {                list($value, $unit) = PMA_formatByteDown($current[$stat_name], 3, 1);            } elseif ($stat['format'] === 'number') {                $value = PMA_formatNumber($current[$stat_name], 0);            } else {                $value = htmlentities($current[$stat_name], 0);            }            $out .= '<td class="value">';            if (isset($stat['description_function'])) {                $out .= '<dfn title="' . $stat['description_function']($current[$stat_name]) . '">';            }            $out .= $value;            if (isset($stat['description_function'])) {                $out .= '</dfn>';            }            $out .= '</td>';            if ($stat['format'] === 'byte') {                $out .= '<td class="unit">' . $unit . '</td>';            }        }    }    foreach ($replication_types as $type) {        if ($replication_info[$type]['status']) {            $out .= '<td class="tool" style="text-align: center;">';            if (strlen(array_search($current["SCHEMA_NAME"], $replication_info[$type]['Ignore_DB'])) > 0) {                $out .= PMA_getIcon('s_cancel.png',  __('Not replicated'));            } else {                $key = array_search($current["SCHEMA_NAME"], $replication_info[$type]['Do_DB']);                if (strlen($key) > 0 || ($replication_info[$type]['Do_DB'][0] == "" && count($replication_info[$type]['Do_DB']) == 1)) {                    // if ($key != null) did not work for index "0"                    $out .= PMA_getIcon('s_success.png', __('Replicated'));                }            }            $out .= '</td>';        }    }    if ($is_superuser && !PMA_DRIZZLE) {        $out .= '<td class="tool">'               . '<a onclick="'               . 'if (window.parent.setDb) window.parent.setDb(\'' . PMA_jsFormat($current['SCHEMA_NAME']) . '\');'               . '" href="./server_privileges.php?' . $url_query               . '&amp;checkprivs=' . urlencode($current['SCHEMA_NAME'])               . '" title="' . sprintf(__('Check privileges for database &quot;%s&quot;.'), htmlspecialchars($current['SCHEMA_NAME']))               . '">'               . ' '               . PMA_getIcon('s_rights.png', __('Check Privileges'))               . '</a></td>';    }    return array($column_order, $out);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Various validation functions * * Validation function takes two argument: id for which it is called * and array of fields' values (usually values for entire formset, as defined * in forms.inc.php). * The function must always return an array with an error (or error array) * assigned to a form element (formset name or field path). Even if there are * no errors, key must be set with an empty value. * * Valdiation functions are assigned in $cfg_db['_validators'] (config.values.php). * * @package PhpMyAdmin *//** * Returns validator list * * @return array */function PMA_config_get_validators(){    static $validators = null;    if ($validators === null) {        $cf = ConfigFile::getInstance();        $validators = $cf->getDbEntry('_validators', array());        if (!defined('PMA_SETUP')) {            // not in setup script: load additional validators for user preferences            // we need oryginal config values not overwritten by user preferences, creating a new PMA_Config            // instance is a better idea than hacking into its code            $org_cfg = $cf->getOrgConfigObj();            $uvs = $cf->getDbEntry('_userValidators', array());            foreach ($uvs as $field => $uv_list) {                $uv_list = (array)$uv_list;                foreach ($uv_list as &$uv) {                    if (!is_array($uv)) {                        continue;                    }                    for ($i = 1; $i < count($uv); $i++) {                        if (substr($uv[$i], 0, 6) == 'value:') {                            $uv[$i] = PMA_array_read(substr($uv[$i], 6), $org_cfg->settings);                        }                    }                }                $validators[$field] = isset($validators[$field])                    ? array_merge((array)$validators[$field], $uv_list)                    : $uv_list;            }        }    }    return $validators;}/** * Runs validation $validator_id on values $values and returns error list. * * Return values: * o array, keys - field path or formset id, values - array of errors *   when $isPostSource is true values is an empty array to allow for error list *   cleanup in HTML documen * o false - when no validators match name(s) given by $validator_id * * @param string|array  $validator_id * @param array         $values * @param bool          $isPostSource  tells whether $values are directly from POST request * @return bool|array */function PMA_config_validate($validator_id, &$values, $isPostSource){    // find validators    $validator_id = (array) $validator_id;    $validators = PMA_config_get_validators();    $vids = array();    $cf = ConfigFile::getInstance();    foreach ($validator_id as &$vid) {        $vid = $cf->getCanonicalPath($vid);        if (isset($validators[$vid])) {            $vids[] = $vid;        }    }    if (empty($vids)) {        return false;    }    // create argument list with canonical paths and remember path mapping    $arguments = array();    $key_map = array();    foreach ($values as $k => $v) {        $k2 = $isPostSource ? str_replace('-', '/', $k) : $k;        $k2 = strpos($k2, '/') ? $cf->getCanonicalPath($k2) : $k2;        $key_map[$k2] = $k;        $arguments[$k2] = $v;    }    // validate    $result = array();    foreach ($vids as $vid) {        // call appropriate validation functions        foreach ((array)$validators[$vid] as $validator) {            $vdef = (array) $validator;            $vname = array_shift($vdef);            $args = array_merge(array($vid, &$arguments), $vdef);            $r = call_user_func_array($vname, $args);            // merge results            if (is_array($r)) {                foreach ($r as $key => $error_list) {                    // skip empty values if $isPostSource is false                    if (!$isPostSource && empty($error_list)) {                        continue;                    }                    if (!isset($result[$key])) {                        $result[$key] = array();                    }                    $result[$key] = array_merge($result[$key], (array)$error_list);                }            }        }    }    // restore original paths    $new_result = array();    foreach ($result as $k => $v) {        $k2 = isset($key_map[$k]) ? $key_map[$k] : $k;        $new_result[$k2] = $v;    }    return empty($new_result) ? true : $new_result;}/** * Empty error handler, used to temporarily restore PHP internal error handler * * @return bool */function PMA_null_error_handler(){    return false;}/** * Ensures that $php_errormsg variable will be registered in case of an error * and enables output buffering (when $start = true). * Called with $start = false disables output buffering end restores * html_errors and track_errors. * * @param boolean $start */function test_php_errormsg($start = true){    static $old_html_errors, $old_track_errors, $old_error_reporting;    static $old_display_errors;    if ($start) {        $old_html_errors = ini_get('html_errors');        $old_track_errors = ini_get('track_errors');        $old_display_errors = ini_get('display_errors');        $old_error_reporting = error_reporting(E_ALL);        ini_set('html_errors', false);        ini_set('track_errors', true);        ini_set('display_errors', true);        set_error_handler("PMA_null_error_handler");        ob_start();    } else {        ob_end_clean();        restore_error_handler();        error_reporting($old_error_reporting);        ini_set('html_errors', $old_html_errors);        ini_set('track_errors', $old_track_errors);        ini_set('display_errors', $old_display_errors);    }}/** * Test database connection * * @param string $extension     'drizzle', 'mysql' or 'mysqli' * @param string $connect_type  'tcp' or 'socket' * @param string $host * @param string $port * @param string $socket * @param string $user * @param string $pass * @param string $error_key * @return bool|array */function test_db_connection($extension, $connect_type, $host, $port, $socket, $user, $pass = null, $error_key = 'Server'){    //    test_php_errormsg();    $socket = empty($socket) || $connect_type == 'tcp' ? null : $socket;    $port = empty($port) || $connect_type == 'socket' ? null : ':' . $port;    $error = null;    if ($extension == 'drizzle') {        while (1) {            $drizzle = @drizzle_create();            if (!$drizzle) {                $error = __('Could not initialize Drizzle connection library');                break;            }            $conn = $socket                ? @drizzle_con_add_uds($socket, $user, $pass, null, 0)                : @drizzle_con_add_tcp($drizzle, $host, $port, $user, $pass, null, 0);            if (!$conn) {                $error = __('Could not connect to Drizzle server');                drizzle_free($drizzle);                break;            }            // connection object is set up but we have to send some query to actually connect            $res = @drizzle_query($conn, 'SELECT 1');            if (!$res) {                $error = __('Could not connect to Drizzle server');            } else {                drizzle_result_free($res);            }            drizzle_con_free($conn);            drizzle_free($drizzle);            break;        }    } else if ($extension == 'mysql') {        $conn = @mysql_connect($host . $socket . $port, $user, $pass);        if (!$conn) {            $error = __('Could not connect to MySQL server');        } else {            mysql_close($conn);        }    } else {        $conn = @mysqli_connect($host, $user, $pass, null, $port, $socket);        if (!$conn) {            $error = __('Could not connect to MySQL server');        } else {            mysqli_close($conn);        }    }    //    test_php_errormsg(false);    if (isset($php_errormsg)) {        $error .= " - $php_errormsg";    }    return is_null($error) ? true : array($error_key => $error);}/** * Validate server config * * @param string $path * @param array  $values * @return array */function validate_server($path, $values){    $result = array('Server' => '', 'Servers/1/user' => '', 'Servers/1/SignonSession' => '', 'Servers/1/SignonURL' => '');    $error = false;    if ($values['Servers/1/auth_type'] == 'config' && empty($values['Servers/1/user'])) {        $result['Servers/1/user'] = __('Empty username while using config authentication method');        $error = true;    }    if ($values['Servers/1/auth_type'] == 'signon' && empty($values['Servers/1/SignonSession'])) {        $result['Servers/1/SignonSession'] = __('Empty signon session name while using signon authentication method');        $error = true;    }    if ($values['Servers/1/auth_type'] == 'signon' && empty($values['Servers/1/SignonURL'])) {        $result['Servers/1/SignonURL'] = __('Empty signon URL while using signon authentication method');        $error = true;    }    if (!$error && $values['Servers/1/auth_type'] == 'config') {        $password = $values['Servers/1/nopassword'] ? null : $values['Servers/1/password'];        $test = test_db_connection($values['Servers/1/extension'], $values['Servers/1/connect_type'], $values['Servers/1/host'], $values['Servers/1/port'], $values['Servers/1/socket'], $values['Servers/1/user'], $password, 'Server');        if ($test !== true) {            $result = array_merge($result, $test);        }    }    return $result;}/** * Validate pmadb config * * @param string $path * @param array  $values * @return array */function validate_pmadb($path, $values){    //$tables = array('Servers/1/bookmarktable', 'Servers/1/relation', 'Servers/1/table_info', 'Servers/1/table_coords', 'Servers/1/pdf_pages', 'Servers/1/column_info', 'Servers/1/history', 'Servers/1/designer_coords');    $result = array('Server_pmadb' => '', 'Servers/1/controluser' => '', 'Servers/1/controlpass' => '');    $error = false;    if ($values['Servers/1/pmadb'] == '') {        return $result;    }    $result = array();    if ($values['Servers/1/controluser'] == '') {        $result['Servers/1/controluser'] = __('Empty phpMyAdmin control user while using pmadb');        $error = true;    }    if ($values['Servers/1/controlpass'] == '') {        $result['Servers/1/controlpass'] = __('Empty phpMyAdmin control user password while using pmadb');        $error = true;    }    if (!$error) {        $test = test_db_connection($values['Servers/1/extension'], $values['Servers/1/connect_type'],            $values['Servers/1/host'], $values['Servers/1/port'], $values['Servers/1/socket'],            $values['Servers/1/controluser'], $values['Servers/1/controlpass'], 'Server_pmadb');        if ($test !== true) {            $result = array_merge($result, $test);        }    }    return $result;}/** * Validates regular expression * * @param string $path * @param array  $values * @return array */function validate_regex($path, $values){    $result = array($path => '');    if ($values[$path] == '') {        return $result;    }    test_php_errormsg();    $matches = array();    // in libraries/List_Database.class.php _checkHideDatabase(),    // a '/' is used as the delimiter for hide_db    preg_match('/' . $values[$path] . '/', '', $matches);    test_php_errormsg(false);    if (isset($php_errormsg)) {        $error = preg_replace('/^preg_match\(\): /', '', $php_errormsg);        return array($path => $error);    }    return $result;}/** * Validates TrustedProxies field * * @param string $path * @param array  $values * @return array */function validate_trusted_proxies($path, $values){    $result = array($path => array());    if (empty($values[$path])) {        return $result;    }    if (is_array($values[$path])) {        // value already processed by FormDisplay::save        $lines = array();        foreach ($values[$path] as $ip => $v) {            $lines[] = preg_match('/^-\d+$/', $ip)                ? $v                : $ip . ': ' . $v;        }    } else {        // AJAX validation        $lines = explode("\n", $values[$path]);    }    foreach ($lines as $line) {        $line = trim($line);        $matches = array();        // we catch anything that may (or may not) be an IP        if (!preg_match("/^(.+):(?:[ ]?)\\w+$/", $line, $matches)) {            $result[$path][] = __('Incorrect value') . ': ' . $line;            continue;        }        // now let's check whether we really have an IP address        if (filter_var($matches[1], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) === false            && filter_var($matches[1], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) === false) {            $ip = htmlspecialchars(trim($matches[1]));            $result[$path][] = sprintf(__('Incorrect IP address: %s'), $ip);            continue;        }    }    return $result;}/** * Tests integer value * * @param string $path * @param array  $values * @param bool   $allow_neg       allow negative values * @param bool   $allow_zero      allow zero * @param int    $max_value       max allowed value * @param string $error_string    error message key: $GLOBALS["strConfig$error_lang_key"] * @return string  empty string if test is successful */function test_number($path, $values, $allow_neg, $allow_zero, $max_value, $error_string){    if ($values[$path] === '') {        return '';    }    if (intval($values[$path]) != $values[$path] || (!$allow_neg && $values[$path] < 0) || (!$allow_zero && $values[$path] == 0) || $values[$path] > $max_value) {        return $error_string;    }    return '';}/** * Validates port number * * @param string $path * @param array  $values * @return array */function validate_port_number($path, $values){    return array($path => test_number($path, $values, false, false, 65535, __('Not a valid port number')));}/** * Validates positive number * * @param string $path * @param array  $values * @return array */function validate_positive_number($path, $values){    return array($path => test_number($path, $values, false, false, PHP_INT_MAX, __('Not a positive number')));}/** * Validates non-negative number * * @param string $path * @param array  $values * @return array */function validate_non_negative_number($path, $values){    return array($path => test_number($path, $values, false, true, PHP_INT_MAX, __('Not a non-negative number')));}/** * Validates value according to given regular expression * Pattern and modifiers must be a valid for PCRE <b>and</b> JavaScript RegExp * * @param string $path * @param array  $values * @param string $regex * @return void */function validate_by_regex($path, $values, $regex){    $result = preg_match($regex, $values[$path]);    return array($path => ($result ? '' : __('Incorrect value')));}/** * Validates upper bound for numeric inputs * * @param string $path * @param array  $values * @param int    $max_value * @return array */function validate_upper_bound($path, $values, $max_value){    $result = $values[$path] <= $max_value;    return array($path => ($result ? '' : sprintf(__('Value must be equal or lower than %s'), $max_value)));}?>
<?php/*   Copyright (c) 2003, 2009 Danilo Segan <danilo@kvota.net>.   Copyright (c) 2005 Nico Kaiser <nico@siriux.net>   This file is part of PHP-gettext.   PHP-gettext is free software; you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation; either version 2 of the License, or   (at your option) any later version.   PHP-gettext is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   GNU General Public License for more details.   You should have received a copy of the GNU General Public License   along with PHP-gettext; if not, write to the Free Software   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA*//** * Provides a simple gettext replacement that works independently from * the system's gettext abilities. * It can read MO files and use them for translating strings. * The files are passed to gettext_reader as a Stream (see streams.php) * * This version has the ability to cache all strings and translations to * speed up the string lookup. * While the cache is enabled by default, it can be switched off with the * second parameter in the constructor (e.g. whenusing very large MO files * that you don't want to keep in memory) */class gettext_reader {  //public:   var $error = 0; // public variable that holds error code (0 if no error)   //private:  var $BYTEORDER = 0;        // 0: low endian, 1: big endian  var $STREAM = NULL;  var $short_circuit = false;  var $enable_cache = false;  var $originals = NULL;      // offset of original table  var $translations = NULL;    // offset of translation table  var $pluralheader = NULL;    // cache header field for plural forms  var $total = 0;          // total string count  var $table_originals = NULL;  // table for original strings (offsets)  var $table_translations = NULL;  // table for translated strings (offsets)  var $cache_translations = NULL;  // original -> translation mapping  /* Methods */  /**   * Reads a 32bit Integer from the Stream   *   * @access private   * @return Integer from the Stream   */  function readint() {      if ($this->BYTEORDER == 0) {        // low endian        $input=unpack('V', $this->STREAM->read(4));        return array_shift($input);      } else {        // big endian        $input=unpack('N', $this->STREAM->read(4));        return array_shift($input);      }    }  function read($bytes) {    return $this->STREAM->read($bytes);  }  /**   * Reads an array of Integers from the Stream   *   * @param int count How many elements should be read   * @return Array of Integers   */  function readintarray($count) {    if ($this->BYTEORDER == 0) {        // low endian        return unpack('V'.$count, $this->STREAM->read(4 * $count));      } else {        // big endian        return unpack('N'.$count, $this->STREAM->read(4 * $count));      }  }  /**   * Constructor   *   * @param object Reader the StreamReader object   * @param boolean enable_cache Enable or disable caching of strings (default on)   */  function gettext_reader($Reader, $enable_cache = true) {    // If there isn't a StreamReader, turn on short circuit mode.    if (! $Reader || isset($Reader->error) ) {      $this->short_circuit = true;      return;    }    // Caching can be turned off    $this->enable_cache = $enable_cache;    $MAGIC1 = "\x95\x04\x12\xde";    $MAGIC2 = "\xde\x12\x04\x95";    $this->STREAM = $Reader;    $magic = $this->read(4);    if ($magic == $MAGIC1) {      $this->BYTEORDER = 1;    } elseif ($magic == $MAGIC2) {      $this->BYTEORDER = 0;    } else {      $this->error = 1; // not MO file      return false;    }    // FIXME: Do we care about revision? We should.    $revision = $this->readint();    $this->total = $this->readint();    $this->originals = $this->readint();    $this->translations = $this->readint();  }  /**   * Loads the translation tables from the MO file into the cache   * If caching is enabled, also loads all strings into a cache   * to speed up translation lookups   *   * @access private   */  function load_tables() {    if (is_array($this->cache_translations) &&      is_array($this->table_originals) &&      is_array($this->table_translations))      return;    /* get original and translations tables */    if (!is_array($this->table_originals)) {      $this->STREAM->seekto($this->originals);      $this->table_originals = $this->readintarray($this->total * 2);    }    if (!is_array($this->table_translations)) {      $this->STREAM->seekto($this->translations);      $this->table_translations = $this->readintarray($this->total * 2);    }    if ($this->enable_cache) {      $this->cache_translations = array ();      /* read all strings in the cache */      for ($i = 0; $i < $this->total; $i++) {        $this->STREAM->seekto($this->table_originals[$i * 2 + 2]);        $original = $this->STREAM->read($this->table_originals[$i * 2 + 1]);        $this->STREAM->seekto($this->table_translations[$i * 2 + 2]);        $translation = $this->STREAM->read($this->table_translations[$i * 2 + 1]);        $this->cache_translations[$original] = $translation;      }    }  }  /**   * Returns a string from the "originals" table   *   * @access private   * @param int num Offset number of original string   * @return string Requested string if found, otherwise ''   */  function get_original_string($num) {    $length = $this->table_originals[$num * 2 + 1];    $offset = $this->table_originals[$num * 2 + 2];    if (! $length)      return '';    $this->STREAM->seekto($offset);    $data = $this->STREAM->read($length);    return (string)$data;  }  /**   * Returns a string from the "translations" table   *   * @access private   * @param int num Offset number of original string   * @return string Requested string if found, otherwise ''   */  function get_translation_string($num) {    $length = $this->table_translations[$num * 2 + 1];    $offset = $this->table_translations[$num * 2 + 2];    if (! $length)      return '';    $this->STREAM->seekto($offset);    $data = $this->STREAM->read($length);    return (string)$data;  }  /**   * Binary search for string   *   * @access private   * @param string string   * @param int start (internally used in recursive function)   * @param int end (internally used in recursive function)   * @return int string number (offset in originals table)   */  function find_string($string, $start = -1, $end = -1) {    if (($start == -1) or ($end == -1)) {      // find_string is called with only one parameter, set start end end      $start = 0;      $end = $this->total;    }    if (abs($start - $end) <= 1) {      // We're done, now we either found the string, or it doesn't exist      $txt = $this->get_original_string($start);      if ($string == $txt)        return $start;      else        return -1;    } else if ($start > $end) {      // start > end -> turn around and start over      return $this->find_string($string, $end, $start);    } else {      // Divide table in two parts      $half = (int)(($start + $end) / 2);      $cmp = strcmp($string, $this->get_original_string($half));      if ($cmp == 0)        // string is exactly in the middle => return it        return $half;      else if ($cmp < 0)        // The string is in the upper half        return $this->find_string($string, $start, $half);      else        // The string is in the lower half        return $this->find_string($string, $half, $end);    }  }  /**   * Translates a string   *   * @access public   * @param string string to be translated   * @return string translated string (or original, if not found)   */  function translate($string) {    if ($this->short_circuit)      return $string;    $this->load_tables();    if ($this->enable_cache) {      // Caching enabled, get translated string from cache      if (array_key_exists($string, $this->cache_translations))        return $this->cache_translations[$string];      else        return $string;    } else {      // Caching not enabled, try to find string      $num = $this->find_string($string);      if ($num == -1)        return $string;      else        return $this->get_translation_string($num);    }  }  /**   * Sanitize plural form expression for use in PHP eval call.   *   * @access private   * @return string sanitized plural form expression   */  function sanitize_plural_expression($expr) {    // Get rid of disallowed characters.    $expr = preg_replace('@[^a-zA-Z0-9_:;\(\)\?\|\&=!<>+*/\%-]@', '', $expr);    // Add parenthesis for tertiary '?' operator.    $expr .= ';';    $res = '';    $p = 0;    for ($i = 0; $i < strlen($expr); $i++) {      $ch = $expr[$i];      switch ($ch) {      case '?':        $res .= ' ? (';        $p++;        break;      case ':':        $res .= ') : (';        break;      case ';':        $res .= str_repeat( ')', $p) . ';';        $p = 0;        break;      default:        $res .= $ch;      }    }    return $res;  }  /**   * Parse full PO header and extract only plural forms line.   *   * @access private   * @return string verbatim plural form header field   */  function extract_plural_forms_header_from_po_header($header) {    if (preg_match("/(^|\n)plural-forms: ([^\n]*)\n/i", $header, $regs))      $expr = $regs[2];    else      $expr = "nplurals=2; plural=n == 1 ? 0 : 1;";    return $expr;  }  /**   * Get possible plural forms from MO header   *   * @access private   * @return string plural form header   */  function get_plural_forms() {    // lets assume message number 0 is header    // this is true, right?    $this->load_tables();    // cache header field for plural forms    if (! is_string($this->pluralheader)) {      if ($this->enable_cache) {        $header = $this->cache_translations[""];      } else {        $header = $this->get_translation_string(0);      }      $expr = $this->extract_plural_forms_header_from_po_header($header);      $this->pluralheader = $this->sanitize_plural_expression($expr);    }    return $this->pluralheader;  }  /**   * Detects which plural form to take   *   * @access private   * @param n count   * @return int array index of the right plural form   */  function select_string($n) {    $string = $this->get_plural_forms();    $string = str_replace('nplurals',"\$total",$string);    $string = str_replace("n",$n,$string);    $string = str_replace('plural',"\$plural",$string);    $total = 0;    $plural = 0;    eval("$string");    if ($plural >= $total) $plural = $total - 1;    return $plural;  }  /**   * Plural version of gettext   *   * @access public   * @param string single   * @param string plural   * @param string number   * @return translated plural form   */  function ngettext($single, $plural, $number) {    if ($this->short_circuit) {      if ($number != 1)        return $plural;      else        return $single;    }    // find out the appropriate form    $select = $this->select_string($number);    // this should contains all strings separated by NULLs    $key = $single . chr(0) . $plural;    if ($this->enable_cache) {      if (! array_key_exists($key, $this->cache_translations)) {        return ($number != 1) ? $plural : $single;      } else {        $result = $this->cache_translations[$key];        $list = explode(chr(0), $result);        return $list[$select];      }    } else {      $num = $this->find_string($key);      if ($num == -1) {        return ($number != 1) ? $plural : $single;      } else {        $result = $this->get_translation_string($num);        $list = explode(chr(0), $result);        return $list[$select];      }    }  }  function pgettext($context, $msgid) {    $key = $context . chr(4) . $msgid;    $ret = $this->translate($key);    if (strpos($ret, "\004") !== FALSE) {      return $msgid;    } else {      return $ret;    }  }  function npgettext($context, $singular, $plural, $number) {    $key = $context . chr(4) . $singular;    $ret = $this->ngettext($key, $plural, $number);    if (strpos($ret, "\004") !== FALSE) {      return $singular;    } else {      return $ret;    }  }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__external_info(){    return array(        'info' => __('LINUX ONLY: Launches an external application and feeds it the column data via standard input. Returns the standard output of the application. The default is Tidy, to pretty-print HTML code. For security reasons, you have to manually edit the file libraries/transformations/text_plain__external.inc.php and list the tools you want to make available. The first option is then the number of the program you want to use and the second option is the parameters for the program. The third option, if set to 1, will convert the output using htmlspecialchars() (Default 1). The fourth option, if set to 1, will prevent wrapping and ensure that the output appears all on one line (Default 1).'),        );}/** * */function PMA_transformation_text_plain__external_nowrap($options = array()){    if (!isset($options[3]) || $options[3] == '') {        $nowrap = true;    } elseif ($options[3] == '1' || $options[3] == 1) {        $nowrap = true;    } else {        $nowrap = false;    }    return $nowrap;}function PMA_transformation_text_plain__external($buffer, $options = array(), $meta = ''){    // possibly use a global transform and feed it with special options:    // include './libraries/transformations/global.inc.php';    // further operations on $buffer using the $options[] array.    $allowed_programs = array();    //    // WARNING:    //    // It's up to administrator to allow anything here. Note that users may    // specify any parameters, so when programs allow output redirection or    // any other possibly dangerous operations, you should write wrapper    // script that will publish only functions you really want.    //    // Add here program definitions like (note that these are NOT safe    // programs):    //    //$allowed_programs[0] = '/usr/local/bin/tidy';    //$allowed_programs[1] = '/usr/local/bin/validate';    // no-op when no allowed programs    if (count($allowed_programs) == 0) {        return $buffer;    }    if (!isset($options[0]) ||  $options[0] == '' || !isset($allowed_programs[$options[0]])) {        $program = $allowed_programs[0];    } else {        $program = $allowed_programs[$options[0]];    }    if (!isset($options[1]) || $options[1] == '') {        $poptions = '-f /dev/null -i -wrap -q';    } else {        $poptions = $options[1];    }    if (!isset($options[2]) || $options[2] == '') {        $options[2] = 1;    }    if (!isset($options[3]) || $options[3] == '') {        $options[3] = 1;    }    // needs PHP >= 4.3.0    $newstring = '';    $descriptorspec = array(        0 => array("pipe", "r"),        1 => array("pipe", "w")    );    $process = proc_open($program . ' ' . $poptions, $descriptorspec, $pipes);    if (is_resource($process)) {        fwrite($pipes[0], $buffer);        fclose($pipes[0]);        while (!feof($pipes[1])) {            $newstring .= fgets($pipes[1], 1024);        }        fclose($pipes[1]);        // we don't currently use the return value        $return_value = proc_close($process);    }    if ($options[2] == 1 || $options[2] == '2') {        $retstring = htmlspecialchars($newstring);    } else {        $retstring = $newstring;    }    return $retstring;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//****/require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'server_synchronize.js';require_once './libraries/server_common.inc.php';/*** Contains all the functions specific to synchronization*/require './libraries/server_synchronize.lib.php';/** * Increases the time limit up to the configured maximum */@set_time_limit($cfg['ExecTimeLimit']);/** * Displays the links */require './libraries/server_links.inc.php';/*** Enables warnings on the page*///$cfg['Error_Handler']['display'] = true;//$cfg['Error_Handler']['gather'] = true;/*** Save the value of token generated for this page*/if (isset($_REQUEST['token'])) {    $_SESSION['token'] = $_REQUEST['token'];}// variable for code saving$cons = array ("src", "trg");/** * Displays the page when 'Go' is pressed */if ((isset($_REQUEST['submit_connect']))) {    foreach ($cons as $con) {        ${"{$con}_host"}     = $_REQUEST[$con . '_host'];        ${"{$con}_username"} = $_REQUEST[$con . '_username'];        ${"{$con}_password"} = $_REQUEST[$con . '_pass'];        ${"{$con}_port"}     = $_REQUEST[$con . '_port'];        ${"{$con}_socket"}   = $_REQUEST[$con . '_socket'];        ${"{$con}_db"}       = $_REQUEST[$con . '_db'];        ${"{$con}_type"}     = $_REQUEST[$con . '_type'];        if (${"{$con}_type"} == 'cur') {            ${"{$con}_connection"} = null;            ${"{$con}_server"} = null;            ${"{$con}_db"}       = $_REQUEST[$con . '_db_sel'];            continue;        }        if (isset(${"{$con}_socket"}) && ! empty(${"{$con}_socket"})) {            ${"{$con}_server"}['socket'] = ${"{$con}_socket"};        } else {            ${"{$con}_server"}['host'] = ${"{$con}_host"};            if (isset(${"{$con}_port"})                && ! empty(${"{$con}_port"})                && ((int)${"{$con}_port"} * 1) > 0            ) {                ${"{$con}_server"}['port'] = (int)${"{$con}_port"};            }        }        ${"{$con}_connection"} = PMA_DBI_connect(${"{$con}_username"},            ${"{$con}_password"}, $is_controluser = false,            ${"{$con}_server"}, $auxiliary_connection = true);    } // end foreach ($cons as $con)    if ((! $src_connection && $src_type != 'cur')        || (! $trg_connection && $trg_type != 'cur')    ) {        /**        * Displays the connection error string if        * connections are not established        */        echo '<div class="error">';        if (! $src_connection && $src_type != 'cur') {            echo __('Could not connect to the source') . '<br />';        }        if (! $trg_connection && $trg_type != 'cur') {            echo __('Could not connect to the target');        }        echo '</div>';        unset($_REQUEST['submit_connect']);    } else {        /**        * Creating the link object for both source and target databases and        * selecting the source and target databases using these links        */        foreach ($cons as $con) {            if (${"{$con}_connection"} != null) {                ${"{$con}_link"} = PMA_DBI_connect(${"{$con}_username"},                    ${"{$con}_password"}, $is_controluser = false, ${"{$con}_server"});            } else {                ${"{$con}_link"} = null;            }            ${"{$con}_db_selected"} = PMA_DBI_select_db(${"{$con}_db"}, ${"{$con}_link"});            ${"{$con}_version"} = PMA_DBI_fetch_value('SELECT VERSION()', 0, 0, ${"{$con}_link"});            ${"{$con}_is_drizzle"} = (bool)preg_match('/\d{4}\./', ${"{$con}_version"});        } // end foreach ($cons as $con)        if (($src_db_selected != 1) || ($trg_db_selected != 1)) {            /**            * Displays error string if the database(s) did not exist            */            echo '<div class="error">';            if ($src_db_selected != 1) {                echo sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($src_db));            }            if ($trg_db_selected != 1) {                echo sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($trg_db));            }            echo '</div>';            unset($_REQUEST['submit_connect']);        } else if (($src_db_selected == 1) && ($trg_db_selected == 1)) {            /**            * Using PMA_DBI_get_tables() to get all the tables            * from target and source databases.            */            $src_tables = PMA_DBI_get_tables($src_db, $src_link);            $source_tables_num = sizeof($src_tables);            $trg_tables = PMA_DBI_get_tables($trg_db, $trg_link);            $target_tables_num = sizeof($trg_tables);            /**            * initializing arrays to save matching and non-matching            * table names from target and source databases.            */            $unmatched_num_src = 0;            $source_tables_uncommon = array();            $unmatched_num_trg = 0;            $target_tables_uncommon = array();            $matching_tables = array();            $matching_tables_num = 0;            /**            * Using PMA_getMatchingTables to find which of the tables' names match            * in target and source database.            */            PMA_getMatchingTables($trg_tables, $src_tables, $matching_tables, $source_tables_uncommon);            /**            * Finding the uncommon tables for the target database            * using function PMA_getNonMatchingTargetTables()            */            PMA_getNonMatchingTargetTables($trg_tables, $matching_tables, $target_tables_uncommon);            /**            * Initializing several arrays to save the data and structure            * difference between the source and target databases.            */            $row_count = array();   //number of rows in source table that needs to be created in target database            $fields_num = array();  //number of fields in each matching table            $delete_array = array(); //stores the primary key values for target tables that have excessive rows than corresponding source tables.            $insert_array = array(array(array()));// stores the primary key values for the rows in each source table that are not present in target tables.            $update_array = array(array(array())); //stores the primary key values, name of field to be updated, value of the field to be updated for                                                    // each row of matching table.            $matching_tables_fields = array(); //contains the fields' names for each matching table            $matching_tables_keys   = array(); //contains the primary keys' names for each matching table            $uncommon_tables_fields = array(); //coantains the fields for all the source tables that are not present in target            $matching_tables_num = sizeof($matching_tables);            $source_columns = array();  //contains the full columns' information for all the source tables' columns            $target_columns = array();  //contains the full columns' information for all the target tables' columns            $uncommon_columns = array(); //contains names of columns present in source table but absent from the corresponding target table            $source_indexes = array();   //contains indexes on all the source tables            $target_indexes = array();   //contains indexes on all the target tables            $add_indexes_array = array(); //contains the indexes name present in source but absent from target tables            $target_tables_keys = array(); //contains the keys of all the target tables            $alter_indexes_array = array();  //contains the names of all the indexes for each table that need to be altered in target database            $remove_indexes_array = array();  //contains the names of indexes that are excessive in target tables            $alter_str_array = array(array());  //contains the criteria for each column that needs to be altered in target tables            $add_column_array = array(array()); //contains the name of columns that need to be added in target tables            /**            * The criteria array contains all the criteria against which columns are compared for differences.            */            $criteria = array('Field', 'Type', 'Null', 'Collation', 'Key', 'Default', 'Comment');            for ($i = 0; $i < sizeof($matching_tables); $i++) {                /**                * Finding out all the differences structure, data and index diff                * for all the matching tables only                */                PMA_dataDiffInTables($src_db, $trg_db, $src_link, $trg_link,                    $matching_tables, $matching_tables_fields, $update_array,                    $insert_array, $delete_array, $fields_num, $i,                    $matching_tables_keys);                PMA_structureDiffInTables($src_db, $trg_db, $src_link, $trg_link,                    $matching_tables, $source_columns, $target_columns,                    $alter_str_array, $add_column_array, $uncommon_columns,                    $criteria, $target_tables_keys, $i);                PMA_indexesDiffInTables($src_db, $trg_db, $src_link, $trg_link,                    $matching_tables, $source_indexes, $target_indexes,                    $add_indexes_array, $alter_indexes_array, $remove_indexes_array, $i);            }            for ($j = 0; $j < sizeof($source_tables_uncommon); $j++) {                /**                * Finding out the number of rows to be added in tables                * that need to be added in target database                */                PMA_dataDiffInUncommonTables($source_tables_uncommon, $src_db,                    $src_link, $j, $row_count);            }            /**            * Storing all arrays in session for use when page is reloaded            * for each button press            */            $_SESSION['matching_tables'] = $matching_tables;            $_SESSION['update_array'] = $update_array;            $_SESSION['insert_array'] = $insert_array;            $_SESSION['src_db'] = $src_db;            $_SESSION['trg_db'] =  $trg_db;            $_SESSION['matching_fields'] = $matching_tables_fields;            $_SESSION['src_uncommon_tables'] = $source_tables_uncommon;            $_SESSION['src_username'] = $src_username ;            $_SESSION['trg_username'] = $trg_username;            $_SESSION['src_password'] = $src_password;            $_SESSION['trg_password'] = $trg_password;            $_SESSION['trg_password'] = $trg_password;            $_SESSION['src_server']   = $src_server;            $_SESSION['trg_server']   = $trg_server;            $_SESSION['src_type']     = $src_type;            $_SESSION['trg_type']     = $trg_type;            $_SESSION['matching_tables_keys'] = $matching_tables_keys;            $_SESSION['uncommon_tables_fields'] = $uncommon_tables_fields;            $_SESSION['uncommon_tables_row_count'] = $row_count;            $_SESSION['target_tables_uncommon'] = $target_tables_uncommon;            $_SESSION['uncommon_tables'] = $source_tables_uncommon;            $_SESSION['delete_array'] = $delete_array;            $_SESSION['uncommon_columns'] = $uncommon_columns;            $_SESSION['source_columns'] = $source_columns;            $_SESSION['alter_str_array'] = $alter_str_array;            $_SESSION['target_tables_keys'] = $target_tables_keys;            $_SESSION['add_column_array'] = $add_column_array;            $_SESSION['criteria'] = $criteria;            $_SESSION['target_tables'] = $trg_tables;            $_SESSION['add_indexes_array'] = $add_indexes_array;            $_SESSION['alter_indexes_array'] = $alter_indexes_array;            $_SESSION['remove_indexes_array'] = $remove_indexes_array;            $_SESSION['source_indexes'] = $source_indexes;            $_SESSION['target_indexes'] = $target_indexes;            /**            * Displays the sub-heading and icons showing Structure Synchronization            * and Data Synchronization            */            ?>            <form name="synchronize_form" id="synchronize_form" method="post" action="server_synchronize.php">                <?php echo PMA_generate_common_hidden_inputs('', ''); ?>            <table width="40%">            <tr>                <td>                    <img class="icon" src="<?php echo $pmaThemeImage; ?>new_struct.png" width="16" height="16" alt="" />                    <?php echo __('Structure Synchronization'); ?>                </td>                <td>                    <img class="icon" src="<?php echo $pmaThemeImage; ?>new_data.png" width="16" height="16" alt="" />                    <?php echo __('Data Synchronization'); ?>                </td>            </tr>            </table>            <?php            /**            * Displays the tables containing the source tables names,            * their difference with the target tables and target tables names.            */            PMA_syncDisplayHeaderCompare($src_db, $trg_db);            $rows = array();            /**            * Display the matching tables' names and difference, first            */            for ($i = 0; $i < count($matching_tables); $i++) {                /**                * Calculating the number of updates for each matching table                */                if (isset($update_array[$i]) && isset($update_array[$i][0])                        && !empty($matching_tables_keys[$i][0])                        && isset($update_array[$i][0][$matching_tables_keys[$i][0]])) {                    $num_of_updates = sizeof($update_array[$i]);                } else {                    $num_of_updates = 0;                }                /**                * Calculating the number of insertions for each matching table                */                if (isset($insert_array[$i]) && isset($insert_array[$i][0])                        && !empty($matching_tables_keys[$i])                        && isset($insert_array[$i][0][$matching_tables_keys[$i][0]])) {                    $num_of_insertions = sizeof($insert_array[$i]);                } else {                    $num_of_insertions = 0;                }                /**                * Calculating the number of alter columns, number of columns to be                * added, number of columns to be removed,                * number of index to be added and removed.                */                $num_alter_cols  = 0;                $num_insert_cols = 0;                $num_remove_cols = 0;                $num_add_index   = 0;                $num_remove_index = 0;                if (isset($alter_str_array[$i])) {                    $num_alter_cols = sizeof($alter_str_array[$i]);                }                if (isset($add_column_array[$i])) {                    $num_insert_cols = sizeof($add_column_array[$i]);                }                if (isset($uncommon_columns[$i])) {                    $num_remove_cols = sizeof($uncommon_columns[$i]);                }                if (isset($add_indexes_array[$i])) {                    $num_add_index = sizeof($add_indexes_array[$i]);                }                if (isset($remove_indexes_array[$i])) {                    $num_remove_index = sizeof($remove_indexes_array[$i]);                }                if (isset($alter_indexes_array[$i])) {                    $num_add_index += sizeof($alter_indexes_array[$i]);                    $num_remove_index += sizeof($alter_indexes_array[$i]);                }                $btn_structure_params = null;                $btn_data_params = null;                /**                * Display the red button of structure synchronization if there                * exists any structure difference or index difference.                */                if (($num_alter_cols > 0)                    || ($num_insert_cols > 0)                    || ($num_remove_cols > 0)                    || ($num_add_index > 0)                    || ($num_remove_index > 0)                ) {                    $btn_structure_params = array($i, $num_alter_cols, $num_insert_cols,                        $num_remove_cols, $num_add_index, $num_remove_index);                }                /**                * Display the green button of data synchronization if there exists                * any data difference.                */                if ((isset($update_array[$i])                    || isset($insert_array[$i]))                    && !empty($matching_tables_keys[$i])                ) {                    if (isset($update_array[$i][0][$matching_tables_keys[$i][0]])                        || isset($insert_array[$i][0][$matching_tables_keys[$i][0]])                    ) {                        $btn_data_params = array($i, $num_of_updates,                            $num_of_insertions, null, null, null);                    }                }                $rows[] = array(                    'src_table_name' => $matching_tables[$i],                    'dst_table_name' => $matching_tables[$i],                    'btn_type' => 'M',                    'btn_structure' => $btn_structure_params,                    'btn_data' => $btn_data_params                );            }            /**            * Displays the tables' names present in source but missing from target            */            for ($j = 0; $j < count($source_tables_uncommon); $j++) {                $row = array(                    'src_table_name' => '+ ' . $source_tables_uncommon[$j],                    'dst_table_name' => $source_tables_uncommon[$j] . ' (' . __('not present') . ')',                    'btn_type' => 'U',                    'btn_structure' => array($j, null, null, null, null, null),                    'btn_data' => null                );                if ($row_count[$j] > 0) {                    $row['btn_data'] = array($j, null, $row_count[$j], null, null, null);                }                $rows[] = $row;            }            foreach ($target_tables_uncommon as $tbl_nc_name) {                $rows[] = array(                    'src_table_name' => '',                    'dst_table_name' => $tbl_nc_name);            }            /**            * Displays the target tables names            */            PMA_syncDisplayDataCompare($rows);            echo '</table>                </div>                </fieldset>';            /**            * This "list" div will contain a table and each row will depict            * information about structure/data difference in tables.            * Rows will be generated dynamically as soon as the colored            * buttons "D" or "S"  are clicked.            */            echo '<fieldset style="padding:0"><div id="list" style="overflow:auto; height:140px; padding:1em">            <table>                <thead>                <tr style="width: 100%;">                    <th id="table_name" style="width: 10%;" colspan="1">' . __('Table') . ' </th>                    <th id="str_diff"   style="width: 65%;" colspan="6">' . __('Structure Difference') . ' </th>                    <th id="data_diff"  style="width: 20%;" colspan="2">' . __('Data Difference') . '</th>                </tr>                <tr style="width: 100%;">                    <th style="width: 10%;">' . __('Table name') . '</th>                    <th style="width: 10%;">' . __('Create table'). '</th>                    <th style="width: 11%;">' . __('Add column(s)') . '</th>                    <th style="width: 13%;">' . __('Remove column(s)') . '</th>                    <th style="width: 11%;">' . __('Alter column(s)') . '</th>                    <th style="width: 12%;">' . __('Remove index(s)') . '</th>                    <th style="width: 11%;">' . __('Apply index(s)') . '</th>                    <th style="width: 10%;">'.  __('Update row(s)') . '</th>                    <th style="width: 10%;">' . __('Insert row(s)') . '</th>                </tr>                </thead>                <tbody></tbody>            </table>            </div></fieldset>';            /**            *  This fieldset displays the checkbox to confirm deletion of previous rows from target tables            */            echo '<fieldset>            <p><input type= "checkbox" name="delete_rows" id ="delete_rows" /><label for="delete_rows">'                . __('Would you like to delete all the previous rows from target tables?')                . '</label> </p>            </fieldset>            <fieldset class="tblFooters">';            echo '<input type="button" name="apply_changes" value="'                . __('Apply Selected Changes')                . '" onclick ="ApplySelectedChanges('                . "'" . htmlspecialchars($_SESSION['token']) . "'" . ')" />';            echo '<input type="submit" name="synchronize_db" value="'                . __('Synchronize Databases') . '" />' . '</fieldset>';            echo '</form>';        }    }} // end if ((isset($_REQUEST['submit_connect']))) /** * Display the page when 'Apply Selected Changes' is pressed */if (isset($_REQUEST['Table_ids'])) {    /**    * Displays success message    */    echo '<div class="success">'        . __('Selected target tables have been synchronized with source tables.')        . '</div>';    $src_db = $_SESSION['src_db'];    $trg_db = $_SESSION['trg_db'];    $update_array = $_SESSION['update_array'];    $insert_array = $_SESSION['insert_array'];    $src_username = $_SESSION['src_username'];    $trg_username = $_SESSION['trg_username'];    $src_password = $_SESSION['src_password'];    $trg_password = $_SESSION['trg_password'];    $src_server   = $_SESSION['src_server'];    $trg_server   = $_SESSION['trg_server'];    $src_type     = $_SESSION['src_type'];    $trg_type     = $_SESSION['trg_type'];    $uncommon_tables = $_SESSION['uncommon_tables'];    $matching_tables = $_SESSION['matching_tables'];    $matching_tables_keys = $_SESSION['matching_tables_keys'];    $matching_tables_fields = $_SESSION['matching_fields'];    $source_tables_uncommon = $_SESSION['src_uncommon_tables'];    $uncommon_tables_fields = $_SESSION['uncommon_tables_fields'];    $target_tables_uncommon = $_SESSION['target_tables_uncommon'];    $row_count = $_SESSION['uncommon_tables_row_count'];    $target_tables = $_SESSION['target_tables'];    $delete_array = $_SESSION['delete_array'];    $uncommon_columns = $_SESSION['uncommon_columns'];    $source_columns = $_SESSION['source_columns'];    $alter_str_array = $_SESSION['alter_str_array'];    $criteria = $_SESSION['criteria'];    $target_tables_keys = $_SESSION['target_tables_keys'];    $add_column_array = $_SESSION['add_column_array'];    $add_indexes_array = $_SESSION['add_indexes_array'];    $alter_indexes_array = $_SESSION['alter_indexes_array'];    $remove_indexes_array = $_SESSION['remove_indexes_array'];    $source_indexes = $_SESSION['source_indexes'];    $target_indexes = $_SESSION['target_indexes'];    $uncommon_cols = $uncommon_columns;    /**    * Creating link object for source and target databases    */    foreach ($cons as $con) {        if (${"{$con}_type"} != "cur") {            ${"{$con}_link"} = PMA_DBI_connect(${"{$con}_username"},                ${"{$con}_password"}, $is_controluser = false, ${"{$con}_server"});        } else {            ${"{$con}_link"} = null;            // working on current server, so initialize this for tracking            // (does not work if user defined current server as a remote one)            $GLOBALS['db'] = ${"{$con}_db"};        }    } // end foreach ($cons as $con)    /**    * Initializing arrays to save the table ids whose data and structure difference is to be applied    */    $matching_table_data_diff = array();  //stores id of matching table having data difference    $matching_table_structure_diff = array(); //stores id of matching tables having structure difference    $uncommon_table_structure_diff = array(); //stores id of uncommon tables having structure difference    $uncommon_table_data_diff = array();     //stores id of uncommon tables having data difference    for ($i = 0; isset($_REQUEST[$i]); $i++ ) {        if (isset($_REQUEST[$i])) {            $table_id = explode("US", $_REQUEST[$i]);            if (isset($table_id[1])) {                $uncommon_table_structure_diff[] = $table_id[1];            }            $table_id = explode("UD", $_REQUEST[$i]);            if (isset($table_id[1])) {                $uncommon_table_data_diff[] = $table_id[1];            }            $table_id = explode("MS", $_REQUEST[$i]);            if (isset($table_id[1])) {                $matching_table_structure_diff[] = $table_id[1];            }            $table_id = explode("MD", $_REQUEST[$i]);            if (isset($table_id[1])) {                 $matching_table_data_diff[] = $table_id[1];            }        }    } // end for    /**    * Applying the structure difference on selected matching tables    */    for ($q = 0; $q < sizeof($matching_table_structure_diff); $q++) {        if (isset($alter_str_array[$matching_table_structure_diff[$q]])) {            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,                $source_columns, $alter_str_array, $matching_tables_fields,                $criteria, $matching_tables_keys, $target_tables_keys,                $matching_table_structure_diff[$q], false);            unset($alter_str_array[$matching_table_structure_diff[$q]]);        }        if (isset($add_column_array[$matching_table_structure_diff[$q]])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,                $matching_table_structure_diff[$q], $target_tables_keys,                $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$matching_table_structure_diff[$q]])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,                    $matching_table_structure_diff[$q], $target_tables_keys,                    $delete_array, false);                unset($delete_array[$matching_table_structure_diff[$q]]);            }            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,                $matching_tables, $source_columns, $add_column_array,                $matching_tables_fields, $criteria, $matching_tables_keys,                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,                $matching_table_structure_diff[$q], $uncommon_cols, false);            unset($add_column_array[$matching_table_structure_diff[$q]]);        }        if (isset($uncommon_columns[$matching_table_structure_diff[$q]])) {            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,                $uncommon_columns, $matching_table_structure_diff[$q], false);            unset($uncommon_columns[$matching_table_structure_diff[$q]]);        }        if (isset($add_indexes_array[$matching_table_structure_diff[$q]])            || isset($remove_indexes_array[$matching_table_structure_diff[$q]])            || isset($alter_indexes_array[$matching_table_structure_diff[$q]])        ) {            PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables,                $source_indexes, $target_indexes, $add_indexes_array,                $alter_indexes_array, $remove_indexes_array,                $matching_table_structure_diff[$q], false);            unset($add_indexes_array[$matching_table_structure_diff[$q]]);            unset($alter_indexes_array[$matching_table_structure_diff[$q]]);            unset($remove_indexes_array[$matching_table_structure_diff[$q]]);        }    }    /**    * Applying the data difference. First checks if structure diff is applied or not.    * If not, then apply structure difference first then apply data difference.    */    for ($p = 0; $p < sizeof($matching_table_data_diff); $p++) {        if ($_REQUEST['checked'] == 'true') {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,                $matching_table_data_diff[$p], $target_tables_keys,                $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$matching_table_data_diff[$p]])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,                    $matching_table_data_diff[$p], $target_tables_keys,                    $delete_array, false);                unset($delete_array[$matching_table_data_diff[$p]]);            }        }        if (isset($alter_str_array[$matching_table_data_diff[$p]])) {            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,                $source_columns, $alter_str_array, $matching_tables_fields,                $criteria, $matching_tables_keys, $target_tables_keys,                $matching_table_data_diff[$p], false);            unset($alter_str_array[$matching_table_data_diff[$p]]);        }        if (isset($add_column_array[$matching_table_data_diff[$p]])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,                $matching_table_data_diff[$p], $target_tables_keys,                $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$matching_table_data_diff[$p]])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,                    $matching_table_data_diff[$p], $target_tables_keys,                    $delete_array, false);                unset($delete_array[$matching_table_data_diff[$p]]);            }            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,                $matching_tables, $source_columns, $add_column_array,                $matching_tables_fields, $criteria, $matching_tables_keys,                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,                $matching_table_data_diff[$p], $uncommon_cols, false);            unset($add_column_array[$matching_table_data_diff[$p]]);        }        if (isset($uncommon_columns[$matching_table_data_diff[$p]])) {            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,                $uncommon_columns, $matching_table_data_diff[$p], false);            unset($uncommon_columns[$matching_table_data_diff[$p]]);        }        if ((isset($matching_table_structure_diff[$q])            && isset($add_indexes_array[$matching_table_structure_diff[$q]]))            || (isset($matching_table_structure_diff[$q])            && isset($remove_indexes_array[$matching_table_structure_diff[$q]]))            || (isset($matching_table_structure_diff[$q])            && isset($alter_indexes_array[$matching_table_structure_diff[$q]]))        ) {            PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables,                $source_indexes, $target_indexes, $add_indexes_array,                $alter_indexes_array, $remove_indexes_array,                $matching_table_structure_diff[$q], false);            unset($add_indexes_array[$matching_table_structure_diff[$q]]);            unset($alter_indexes_array[$matching_table_structure_diff[$q]]);            unset($remove_indexes_array[$matching_table_structure_diff[$q]]);        }        /**        * Applying the data difference.        */        PMA_updateTargetTables($matching_tables, $update_array, $src_db, $trg_db,            $trg_link, $matching_table_data_diff[$p], $matching_tables_keys, false);        PMA_insertIntoTargetTable($matching_tables, $src_db, $trg_db, $src_link,            $trg_link, $matching_tables_fields, $insert_array,            $matching_table_data_diff[$p], $matching_tables_keys, $source_columns,            $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,            $uncommon_tables_fields, $uncommon_cols, $alter_str_array,            $source_indexes, $target_indexes, $add_indexes_array,            $alter_indexes_array, $delete_array, $update_array, false);    }    /**    * Updating the session variables to the latest values of the arrays.    */    $_SESSION['delete_array'] = $delete_array;    $_SESSION['uncommon_columns'] = $uncommon_columns;    $_SESSION['alter_str_array']  = $alter_str_array;    $_SESSION['add_column_array'] = $add_column_array;    $_SESSION['add_indexes_array'] = $add_indexes_array;    $_SESSION['remove_indexes_array'] = $remove_indexes_array;    $_SESSION['insert_array'] = $insert_array;    $_SESSION['update_array'] = $update_array;    /**    * Applying structure difference to selected non-matching tables    * (present in Source but absent from Target).    */    for ($s = 0; $s < sizeof($uncommon_table_structure_diff); $s++) {        PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,            $uncommon_tables, $uncommon_table_structure_diff[$s],            $uncommon_tables_fields, false);        $_SESSION['uncommon_tables_fields'] = $uncommon_tables_fields;        unset($uncommon_tables[$uncommon_table_structure_diff[$s]]);    }    /**    * Applying data difference to selected non-matching tables    * (present in Source but absent from Target).    * Before data synchronization, structure synchronization is confirmed.    */    for ($r = 0; $r < sizeof($uncommon_table_data_diff); $r++) {        if (!(in_array($uncommon_table_data_diff[$r], $uncommon_table_structure_diff))) {            if (isset($uncommon_tables[$uncommon_table_data_diff[$r]])) {                PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,                    $uncommon_tables, $uncommon_table_data_diff[$r],                    $uncommon_tables_fields, false);                $_SESSION['uncommon_tables_fields'] = $uncommon_tables_fields;                unset($uncommon_tables[$uncommon_table_data_diff[$r]]);            }        }        PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link,            $source_tables_uncommon, $uncommon_table_data_diff[$r],            $_SESSION['uncommon_tables_fields'], false);        unset($row_count[$uncommon_table_data_diff[$r]]);    }    /**    * Again all the tables from source and target database are displayed with their differences.    * The differences have been removed from tables that have been synchronized    */    echo '<form name="applied_difference" id="synchronize_form" method="post" action="server_synchronize.php">'        . PMA_generate_common_hidden_inputs('', '');    PMA_syncDisplayHeaderCompare($src_db, $trg_db);    $rows = array();    for ($i = 0; $i < count($matching_tables); $i++) {        $num_alter_cols  = 0;        $num_insert_cols = 0;        $num_remove_cols = 0;        $num_add_index = 0;        $num_remove_index = 0;        if (isset($alter_str_array[$i])) {            $num_alter_cols = sizeof($alter_str_array[$i]);        }        if (isset($add_column_array[$i])) {            $num_insert_cols = sizeof($add_column_array[$i]);        }        if (isset($uncommon_columns[$i])) {            $num_remove_cols = sizeof($uncommon_columns[$i]);        }        if (isset($add_indexes_array[$i])) {            $num_add_index = sizeof($add_indexes_array[$i]);        }        if (isset($remove_indexes_array[$i])) {            $num_remove_index = sizeof($remove_indexes_array[$i]);        }        $btn_structure_params = null;        $btn_data_params = null;        if (($num_alter_cols > 0)            || ($num_insert_cols > 0)            || ($num_remove_cols > 0)            || ($num_add_index > 0)            || ($num_remove_index > 0)        ) {            $btn_structure_params = array($i, $num_alter_cols, $num_insert_cols,                $num_remove_cols, $num_add_index, $num_remove_index);        }        if (!(in_array($i, $matching_table_data_diff))) {            if (isset($matching_tables_keys[$i][0])                && isset($update_array[$i][0][$matching_tables_keys[$i][0]])            ) {                if (isset($update_array[$i])) {                    $num_of_updates = sizeof($update_array[$i]);                } else {                    $num_of_updates = 0;                }            } else {                $num_of_updates = 0;            }            if (isset($matching_tables_keys[$i][0])                && isset($insert_array[$i][0][$matching_tables_keys[$i][0]])            ) {                if (isset($insert_array[$i])) {                    $num_of_insertions = sizeof($insert_array[$i]);                } else {                    $num_of_insertions = 0;                }            } else {                $num_of_insertions = 0;            }            if ((isset($matching_tables_keys[$i][0])                && isset($update_array[$i][0][$matching_tables_keys[$i][0]]))                || (isset($matching_tables_keys[$i][0])                && isset($insert_array[$i][0][$matching_tables_keys[$i][0]]))            ) {                $btn_data_params = array($i, $num_of_updates, $num_of_insertions,                    null, null, null);            }        } else {            unset($update_array[$i]);            unset($insert_array[$i]);        }        $rows[] = array(            'src_table_name' => $matching_tables[$i],            'dst_table_name' => $matching_tables[$i],            'btn_type' => 'M',            'btn_structure' => $btn_structure_params,            'btn_data' => $btn_data_params        );    }    /**    * placing updated value of arrays in session    *    */    $_SESSION['update_array'] = $update_array;    $_SESSION['insert_array'] = $insert_array;    for ($j = 0; $j < count($source_tables_uncommon); $j++) {        $btn_structure_params = null;        $btn_data_params = null;        /**        * Display the difference only when it has not been applied        */        if (!(in_array($j, $uncommon_table_structure_diff))) {            if (isset($uncommon_tables[$j])) {                $btn_structure_params = array($j, null, null, null, null, null);            }            $dst_table_name = $source_tables_uncommon[$j] . ' (' .  __('not present') . ')';        } else {            unset($uncommon_tables[$j]);            $dst_table_name = $source_tables_uncommon[$j];        }        /**        * Display the difference only when it has not been applied        */        if (!(in_array($j, $uncommon_table_data_diff))) {            if (isset($row_count[$j]) && ($row_count[$j] > 0)) {                $btn_data_params = array($j, null, $row_count[$j], null, null, null);            }        } else {            unset($row_count[$j]);        }        $rows[] = array(            'src_table_name' => $source_tables_uncommon[$j],            'dst_table_name' => $dst_table_name,            'btn_type' => 'U',            'btn_structure' => $btn_structure_params,            'btn_data' => $btn_data_params        );    }    /**    * placing the latest values of arrays in session    */    $_SESSION['uncommon_tables'] = $uncommon_tables;    $_SESSION['uncommon_tables_row_count'] = $row_count;    /**    * Displaying the target database tables    */    foreach ($target_tables_uncommon as $tbl_nc_name) {        $rows[] = array(            'src_table_name' => '',            'dst_table_name' => $tbl_nc_name);    }    PMA_syncDisplayDataCompare($rows);    echo '</table>        </div>        </fieldset>';    /**    * This "list" div will contain a table and each row will depict information about    * structure/data difference in tables.    * Rows will be generated dynamically as soon as the colored buttons "D" or "S"    * are clicked.    */    echo '<fieldset style="padding:0"><div id="list" style = "overflow:auto; height:140px; padding:1em">';    echo '<table>          <thead>            <tr style="width: 100%;">                <th id="table_name" style="width: 10%;" colspan="1">' . __('Table') . ' </th>                <th id="str_diff"   style="width: 65%;" colspan="6">' . __('Structure Difference') . ' </th>                <th id="data_diff"  style="width: 20%;" colspan="2">' . __('Data Difference') . '</th>            </tr>            <tr style="width: 100%;">                <th style="width: 10%;">' . __('Table name') . '</th>                <th style="width: 10%;">' . __('Create table'). '</th>                <th style="width: 11%;">' . __('Add column(s)') . '</th>                <th style="width: 13%;">' . __('Remove column(s)') . '</th>                <th style="width: 11%;">' . __('Alter column(s)') . '</th>                <th style="width: 12%;">' . __('Remove index(s)') . '</th>                <th style="width: 11%;">' . __('Apply index(s)') . '</th>                <th style="width: 10%;">' . __('Update row(s)') . '</th>                <th style="width: 10%;">' . __('Insert row(s)') . '</th>            </tr>            </thead>            <tbody></tbody>         </table>        </div></fieldset>';    /**    *  This fieldset displays the checkbox to confirm deletion of previous rows from target tables    */    echo '<fieldset>        <p><input type="checkbox" name="delete_rows" id ="delete_rows" /><label for="delete_rows">'        . __('Would you like to delete all the previous rows from target tables?') . '</label> </p>        </fieldset>';    echo '<fieldset class="tblFooters">';    echo '<input type="button" name="apply_changes" value="'        . __('Apply Selected Changes') . '" onclick ="ApplySelectedChanges('        . "'" . htmlspecialchars($_SESSION['token']) . "'" .')" />';    echo '<input type="submit" name="synchronize_db" value="'        . __('Synchronize Databases') . '" />'        . '</fieldset>';    echo '</form>';}/*** Displays the page when 'Synchronize Databases' is pressed.*/if (isset($_REQUEST['synchronize_db'])) {    $src_db = $_SESSION['src_db'];    $trg_db = $_SESSION['trg_db'];    $update_array = $_SESSION['update_array'];    $insert_array = $_SESSION['insert_array'];    $src_username = $_SESSION['src_username'];    $trg_username = $_SESSION['trg_username'];    $src_password = $_SESSION['src_password'];    $trg_password = $_SESSION['trg_password'];    $matching_tables = $_SESSION['matching_tables'];    $matching_tables_keys = $_SESSION['matching_tables_keys'];    $matching_tables_fields = $_SESSION['matching_fields'];    $source_tables_uncommon = $_SESSION['src_uncommon_tables'];    $uncommon_tables_fields = $_SESSION['uncommon_tables_fields'];    $target_tables_uncommon = $_SESSION['target_tables_uncommon'];    $row_count = $_SESSION['uncommon_tables_row_count'];    $uncommon_tables = $_SESSION['uncommon_tables'];    $target_tables = $_SESSION['target_tables'];    $delete_array = $_SESSION['delete_array'];    $uncommon_columns = $_SESSION['uncommon_columns'];    $source_columns = $_SESSION['source_columns'];    $alter_str_array = $_SESSION['alter_str_array'];    $criteria = $_SESSION['criteria'];    $target_tables_keys = $_SESSION['target_tables_keys'];    $add_column_array = $_SESSION['add_column_array'];    $add_indexes_array = $_SESSION['add_indexes_array'];    $alter_indexes_array = $_SESSION['alter_indexes_array'];    $remove_indexes_array = $_SESSION['remove_indexes_array'];    $source_indexes = $_SESSION['source_indexes'];    $target_indexes = $_SESSION['target_indexes'];    $uncommon_cols = $uncommon_columns;   /**   * Display success message.   */    echo '<div class="success">'        . __('Target database has been synchronized with source database')        . '</div>';    /**    * Displaying all the tables of source and target database    * and now no difference is there.    */    PMA_syncDisplayHeaderCompare($src_db, $trg_db);    $rows = array();    for ($i = 0; $i < count($matching_tables); $i++) {        $rows[] = array(            'src_table_name' => $matching_tables[$i],            'dst_table_name' => $matching_tables[$i]);    }    foreach ($source_tables_uncommon as $tbl_nc_name) {        $rows[] = array(            'src_table_name' => '+ ' . $tbl_nc_name,            'dst_table_name' => $tbl_nc_name);    }    foreach ($target_tables_uncommon as $tbl_nc_name) {        $rows[] = array(            'src_table_name' => '',            'dst_table_name' => $tbl_nc_name);    }    PMA_syncDisplayDataCompare($rows);    echo '</table>        </div>        </fieldset>';    /**    * connecting the source and target servers    */    if ('cur' != $_SESSION['src_type']) {        $src_link = PMA_DBI_connect($src_username, $src_password, $is_controluser = false, $_SESSION['src_server']);        $src_version = PMA_DBI_fetch_value('SELECT VERSION()', 0, 0, $src_link);        $src_is_drizzle = (bool)preg_match('/\d{4}\./', $src_version);    } else {        $src_link = $GLOBALS['userlink'];        $src_version = PMA_MYSQL_STR_VERSION;        $src_is_drizzle = PMA_DRIZZLE;        // working on current server, so initialize this for tracking        // (does not work if user defined current server as a remote one)        $GLOBALS['db'] = $_SESSION['src_db'];    }    if ('cur' != $_SESSION['trg_type']) {        $trg_link = PMA_DBI_connect($trg_username, $trg_password, $is_controluser = false, $_SESSION['trg_server']);        $trg_version = PMA_DBI_fetch_value('SELECT VERSION()', 0, 0, $trg_link);        $trg_is_drizzle = (bool)preg_match('/\d{4}\./', $trg_version);    } else {        $trg_link = $GLOBALS['userlink'];        $trg_version = PMA_MYSQL_STR_VERSION;        $trg_is_drizzle = PMA_DRIZZLE;        // working on current server, so initialize this for tracking        $GLOBALS['db'] = $_SESSION['trg_db'];    }    /**    * Displaying the queries.    */    echo '<fieldset><legend>' . __('Executed queries') . '</legend>';    /**    * Applying all sorts of differences for each matching table    */    for ($p = 0; $p < sizeof($matching_tables); $p++) {        /**        *  If the check box is checked for deleting previous rows from the target database tables then        *  first find out rows to be deleted and then delete the rows.        */        if (isset($_REQUEST['delete_rows'])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables, $p,                $target_tables_keys, $matching_tables_keys,                $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$p])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $p,                    $target_tables_keys, $delete_array, true);                unset($delete_array[$p]);            }        }        if (isset($alter_str_array[$p])) {            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,                $source_columns, $alter_str_array, $matching_tables_fields,                $criteria, $matching_tables_keys, $target_tables_keys, $p, true);            unset($alter_str_array[$p]);        }        if (! empty($add_column_array[$p])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables, $p,                $target_tables_keys, $matching_tables_keys,                $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$p])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $p,                    $target_tables_keys, $delete_array, true);                unset($delete_array[$p]);            }            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,                $matching_tables, $source_columns, $add_column_array,                $matching_tables_fields, $criteria, $matching_tables_keys,                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,                $p, $uncommon_cols, true);            unset($add_column_array[$p]);        }        if (isset($uncommon_columns[$p])) {            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,                $uncommon_columns, $p, true);            unset($uncommon_columns[$p]);        }        if (isset($matching_table_structure_diff)            && (isset($add_indexes_array[$matching_table_structure_diff[$p]])            || isset($remove_indexes_array[$matching_table_structure_diff[$p]])            || isset($alter_indexes_array[$matching_table_structure_diff[$p]]))        ) {            PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables,                $source_indexes, $target_indexes, $add_indexes_array,                $alter_indexes_array, $remove_indexes_array,                $matching_table_structure_diff[$p], true);            unset($add_indexes_array[$matching_table_structure_diff[$p]]);            unset($alter_indexes_array[$matching_table_structure_diff[$p]]);            unset($remove_indexes_array[$matching_table_structure_diff[$p]]);        }        PMA_updateTargetTables($matching_tables, $update_array, $src_db, $trg_db,            $trg_link, $p, $matching_tables_keys, true);        PMA_insertIntoTargetTable(            $matching_tables, $src_db, $trg_db, $src_link,            $trg_link, $matching_tables_fields, $insert_array, $p,            $matching_tables_keys, $matching_tables_keys, $source_columns,            $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,            $uncommon_tables_fields, $uncommon_cols, $alter_str_array, $source_indexes,            $target_indexes, $add_indexes_array,            $alter_indexes_array, $delete_array, $update_array, true        );    }    /**    *  Creating and populating tables present in source but absent    *  from target database.    */    for ($q = 0; $q < sizeof($source_tables_uncommon); $q++) {        if (isset($uncommon_tables[$q])) {            PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,                $source_tables_uncommon, $q, $uncommon_tables_fields, true);        }        if (isset($row_count[$q])) {            PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link,                $source_tables_uncommon, $q, $uncommon_tables_fields, true);        }    }    echo "</fieldset>";}/** * Displays the main page when none of the following buttons is pressed */if (! isset($_REQUEST['submit_connect'])    && ! isset($_REQUEST['synchronize_db'])    && ! isset($_REQUEST['Table_ids'])) {/*** Displays the sub-page heading*/    echo '<h2>' . ($GLOBALS['cfg']['MainPageIconic']    ? PMA_getImage('s_sync.png')    : '')    . __('Synchronize')    .'</h2>';    echo  '<div id="serverstatus">    <form name="connection_form" id="connection_form" method="post" action="server_synchronize.php"   >' // TODO: add check if all var. are filled in    . PMA_generate_common_hidden_inputs('', '');    echo '<fieldset>';    echo '<legend>' . __('Synchronize') . '</legend>';    /**     * Displays the forms     */    $databases = PMA_DBI_get_databases_full(null, false, null, 'SCHEMA_NAME',        'ASC', 0, true);    $databases_to_hide = array(        'information_schema',        'mysql'    );    if (PMA_DRIZZLE) {        $databases_to_hide[] = 'data_dictionary';    }    if ($GLOBALS['cfg']['AllowArbitraryServer'] === false) {        $possibly_readonly = ' readonly="readonly"';    } else {        $possibly_readonly = '';    }    foreach ($cons as $type) {        if ('src' == $type) {            $database_header = __('Source database');        } else {            $database_header = __('Target database');        }        $database_header .= PMA_showHint(PMA_sanitize(sprintf('%sAllowArbitraryServer%s',            '[a@./Documentation.html#AllowArbitraryServer@_blank]', '[/a]')));?>      <table id="serverconnection_<?php echo $type; ?>_remote" class="data noclick">      <caption class="tblHeaders"><?php echo $database_header; ?></caption>      <tr class="odd">      <td colspan="2" style="text-align: center">         <select name="<?php echo $type; ?>_type" id="<?php echo $type; ?>_type" class="server_selector"><?php        if ($GLOBALS['cfg']['AllowArbitraryServer']) {            $preselected_option = 'rmt';            echo '<option value="rmt" selected="selected">' . __('Enter manually') . '</option>';        } else {            $preselected_option = 'cur';        }        echo '<option value="cur"';        if ('cur' == $preselected_option) {            echo ' selected="selected"';        }        echo '>' .  __('Current connection') . '</option>';        $loaded_dbi = $GLOBALS['cfg']['Server']['extension'];        foreach ($GLOBALS['cfg']['Servers'] as $key => $tmp_server) {            if (empty($tmp_server['host']) && empty($tmp_server['socket'])) {                continue;            }            if (!empty($tmp_server['verbose'])) {                $label = $tmp_server['verbose'];            } else {                $label = $tmp_server['host'];                if (!empty($tmp_server['port'])) {                    $label .= ':' . $tmp_server['port'];                }            }            if ($loaded_dbi == 'drizzle' && $tmp_server['extension'] != 'drizzle'                    || $loaded_dbi != 'drizzle' && $tmp_server['extension'] == 'drizzle') {                // incompatible connection protocols                $disabled = ' disabled="disabled"';                $value = '';            } else {                $disabled = '';                $value = $tmp_server['host'];                $value .= '||||';                if (empty($tmp_server['port']) && empty($tmp_server['socket'])) {                    $value .= '3306';                } else {                    $value .= $tmp_server['port'];                }                $value .= '||||';                $value .= $tmp_server['socket'];                $value .= '||||';                $value .= $tmp_server['user'];                $value .= '||||';                $value .= $tmp_server['only_db'];            }            echo '<option value="' . $value . '"' . $disabled . '>'                . sprintf(__('Configuration: %s'), htmlspecialchars($label)) . '</option>';        } // end foreach?>         </select>      </td>      </tr>    <tr class="even toggler remote-server">        <td><?php echo __('Server'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_host" class="server-host" <?php echo $possibly_readonly; ?>/></td>    </tr>    <tr class="odd toggler remote-server">        <td><?php echo __('Port'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_port" class="server-port" <?php echo $possibly_readonly; ?> value="3306" maxlength="5" size="5" /></td>    </tr>    <tr class="even toggler remote-server">        <td><?php echo __('Socket'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_socket" class="server-socket" <?php echo $possibly_readonly; ?>/></td>    </tr>    <tr class="odd toggler remote-server">        <td><?php echo __('User name'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_username" class="server-user" /></td>    </tr>    <tr class="even toggler remote-server">        <td><?php echo __('Password'); ?></td>        <td><input type="password" name="<?php echo $type; ?>_pass" class="server-pass" /> </td>    </tr>    <tr class="odd toggler remote-server">        <td><?php echo __('Database'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_db" class="server-db" /></td>    </tr>    <tr class="even toggler current-server" style="display: none;">        <td><?php echo __('Database'); ?></td>        <td><?php    $options_list = '';    foreach ($databases as $array_key => $db) {        if (in_array($db['SCHEMA_NAME'], $databases_to_hide)) {            unset($databases[$array_key]);        } else {            $options_list .= '<option>' . htmlspecialchars($db['SCHEMA_NAME']) . '</option>';        }    }    if (count($databases) == 0) {        echo __('No databases');    } else {        echo '<select name="' . $type . '_db_sel">'         . $options_list         . '</select>';        unset($options_list);    }    echo '</td> </tr>      </table>';   }   unset ($types, $type);    echo '    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="submit_connect" value="' . __('Go') .'" id="buttonGo" />    </fieldset>    </form>    </div>    <div class="notice">' . __('Target database will be completely synchronized with source database. Source database will remain unchanged.') . '</div>';} /** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';require './libraries/db_common.inc.php';require './libraries/db_info.inc.php';$tab_column       = get_tab_info();$script_tabs      = get_script_tabs();$script_contr     = get_script_contr();$tab_pos          = get_tab_pos();$tables_pk_or_unique_keys = get_pk_or_unique_keys();$tables_all_keys  = get_all_keys();$params = array('lang' => $GLOBALS['lang']);if (isset($GLOBALS['db'])) {    $params['db'] = $GLOBALS['db'];}require_once './libraries/header_scripts.inc.php';?>    <script type="text/javascript">    // <![CDATA[<?phpecho '    var server = "' . PMA_escapeJsString($server) . '";    var db = "' . PMA_escapeJsString($db) . '";    var token = "' . PMA_escapeJsString($token) . '";';    echo "\n";    if (isset($_REQUEST['query'])) {    echo '     $(document).ready(function() {        $(".trigger").click(function() {        $(".panel").toggle("fast");        $(this).toggleClass("active");        return false;        });    });';    }?>    // ]]>    </script>    <script src="js/pmd/ajax.js" type="text/javascript"></script>    <script src="js/pmd/history.js" type="text/javascript"></script>    <script src="js/pmd/move.js" type="text/javascript"></script>    <!--[if IE]>    <script src="js/pmd/iecanvas.js" type="text/javascript"></script>    <![endif]--><?phpecho $script_tabs . $script_contr . $script_display_field;?></head><body onload="Main()" class="general_body" id="pmd_body"><div class="pmd_header" id="top_menu">        <a href="#"            onclick="Show_left_menu(document.getElementById('key_Show_left_menu')); return false" class="M_butt first" target="_self">            <img id='key_Show_left_menu' title="<?php echo __('Show/Hide left menu'); ?>"                alt="v" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/downarrow2_m.png" /></a>        <a href="#" onclick="Save2(); return false"            class="M_butt" target="_self"        ><img title="<?php echo __('Save position') ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/save.png" alt=""        /></a><a href="#" onclick="Start_table_new(); return false"            class="M_butt" target="_self"        ><img title="<?php echo __('Create table')?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/table.png" alt=""        /></a><a href="#" onclick="Start_relation(); return false"            class="M_butt" id="rel_button" target="_self"        ><img title="<?php echo __('Create relation') ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/relation.png" alt=""        /></a><a href="#" onclick="Start_display_field(); return false"            class="M_butt" id="display_field_button" target="_self"        ><img title="<?php echo __('Choose column to display') ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/display_field.png" alt=""        /></a><a href="#" onclick="location.reload(); return false"            class="M_butt" target="_self"        ><img title="<?php echo __('Reload'); ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/reload.png" alt=""        /></a><a href="Documentation.html#faq6_31" target="documentation"            class="M_butt" target="_self"        ><img title="<?php echo __('Help'); ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/help.png" alt=""        /></a><img class="M_bord" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bord.png" alt=""        /><a href="#" onclick="Angular_direct(); return false"            class="M_butt" id="angular_direct_button" target="_self"        ><img title="<?php echo __('Angular links') . ' / ' . __('Direct links'); ?>"                src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/ang_direct.png" alt=""        /></a><a href="#" onclick="Grid(); return false"            class="M_butt" id="grid_button" target="_self"        ><img title="<?php echo __('Snap to grid') ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/grid.png" alt=""        /></a><img class="M_bord" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bord.png" alt=""        /><a href="#"            onclick="Small_tab_all(document.getElementById('key_SB_all')); return false" class="M_butt" target="_self"        ><img id='key_SB_all' title="<?php echo __('Small/Big All'); ?>" alt="v"                src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/downarrow1.png"        /></a><a href="#" onclick="Small_tab_invert(); return false" class="M_butt" target="_self" ><img title="<?php echo __('Toggle small/big'); ?>" alt="key" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bottom.png" /></a><a href="#" onclick="Relation_lines_invert(); return false" class="M_butt" target="_self" ><img title="<?php echo __('Toggle relation lines'); ?>" alt="key" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/toggle_lines.png" /></a><img class="M_bord" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bord.png" alt="" /><a href="#" onclick="PDF_save(); return false"            class="M_butt" target="_self"        ><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/pdf.png" alt="key" width="20" height="20"                title="<?php echo __('Import/Export coordinates for PDF schema'); ?>" /></a         >        <?php if (isset($_REQUEST['query'])) {            echo '<a href="#" onclick="build_query(\'SQL Query on Database\', 0)" onmousedown="return false;"            class="M_butt" target="_self">';            echo '<img src="'. $GLOBALS['pmaThemeImage'] . 'pmd/query_builder.png" alt="key" width="20" height="20" title="';            echo __('Build Query');            echo '"/></a>'; }?>         <a href="#"            onclick="Top_menu_right(document.getElementById('key_Left_Right')); return false" class="M_butt last" target="_self">            <img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/2rightarrow_m.png" id="key_Left_Right" alt=">"                title="<?php echo __('Move Menu'); ?>" /></a></div><form action="" method="post" name="form1"><div id="osn_tab">  <canvas class="pmd" id="canvas" width="100" height="100" onclick="Canvas_click(this)"></canvas></div><div id="layer_menu" style="display:none;"><div align="center" style="padding-top:5px;">    <a href="#"        onclick="Hide_tab_all(document.getElementById('key_HS_all')); return false" class="M_butt" target="_self">    <img title="<?php echo __('Hide/Show all'); ?>" alt="v"        src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/downarrow1.png" id='key_HS_all' /></a>    <a href="#"        onclick="No_have_constr(document.getElementById('key_HS')); return false" class="M_butt" target="_self">    <img title="<?php echo __('Hide/Show Tables with no relation'); ?>" alt="v"        src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/downarrow2.png" id='key_HS' /></a></div><div id="id_scroll_tab" class="scroll_tab">    <table width="100%" style="padding-left: 3px;"><?php$name_cnt = count($GLOBALS['PMD']['TABLE_NAME']);for ($i = 0; $i < $name_cnt; $i++) {    ?>    <tr><td title="<?php echo __('Structure'); ?>" width="1px"            onmouseover="this.className='L_butt2_2'"            onmouseout="this.className='L_butt2_1'">            <img onclick="Start_tab_upd('<?php echo $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i]; ?>');"                src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/exec.png" alt="" /></td>        <td width="1px">            <input onclick="VisibleTab(this,'<?php echo $GLOBALS['PMD_URL']["TABLE_NAME"][$i]; ?>')"                title="<?php echo __('Hide'); ?>"                id="check_vis_<?php echo $GLOBALS['PMD_URL']["TABLE_NAME"][$i]; ?>"                style="margin:0px;" type="checkbox"                value="<?php echo $GLOBALS['PMD_URL']["TABLE_NAME"][$i]; ?>"                <?php                if (isset($tab_pos[$GLOBALS['PMD']["TABLE_NAME"][$i]])) {                    echo $tab_pos[$GLOBALS['PMD']["TABLE_NAME"][$i]]["H"] ? 'checked="checked"' : '';                } else {                    echo 'checked="checked"';                }                ?> /></td>        <td class="pmd_Tabs" onmouseover="this.className='pmd_Tabs2'"            onmouseout="this.className='pmd_Tabs'"            onclick="Select_tab('<?php echo $GLOBALS['PMD_URL']["TABLE_NAME"][$i]; ?>');">            <?php echo $GLOBALS['PMD_OUT']["TABLE_NAME"][$i]; ?></td>    </tr>    <?php}?>    </table></div><div align="center">    <?php echo __('Number of tables') . ': ' . $name_cnt; ?></div><div align="right">    <div id="layer_menu_sizer" onmousedown="layer_menu_cur_click=1">    </div></div></div><?phpfor ($i = 0; $i < count($GLOBALS['PMD']["TABLE_NAME"]); $i++) {    $t_n = $GLOBALS['PMD']["TABLE_NAME"][$i];    $t_n_url = $GLOBALS['PMD_URL']["TABLE_NAME"][$i];    ?><input name="t_x[<?php echo $t_n_url ?>]" type="hidden" id="t_x_<?php echo $t_n_url ?>_" /><input name="t_y[<?php echo $t_n_url ?>]" type="hidden" id="t_y_<?php echo $t_n_url ?>_" /><input name="t_v[<?php echo $t_n_url ?>]" type="hidden" id="t_v_<?php echo $t_n_url ?>_" /><input name="t_h[<?php echo $t_n_url ?>]" type="hidden" id="t_h_<?php echo $t_n_url ?>_" /><table id="<?php echo $t_n_url ?>" cellpadding="0" cellspacing="0" class="pmd_tab"   style="position: absolute;          left: <?php if (isset($tab_pos[$t_n])) echo $tab_pos[$t_n]["X"]; else echo rand(180, 800); ?>px;          top: <?php if (isset($tab_pos[$t_n])) echo $tab_pos[$t_n]["Y"]; else echo rand(30, 500); ?>px;          visibility: <?php if (isset($tab_pos[$t_n])) echo $tab_pos[$t_n]["H"] ? "visible" : "hidden"; ?>;         "><thead><tr>    <?php    if (isset($_REQUEST['query'])) {        echo '<td class="select_all">';        echo '<input type="checkbox" value="select_all_'.htmlspecialchars($t_n_url).'" style="margin: 0px;" ';        echo 'id="select_all_'.htmlspecialchars($t_n_url).'" title="select all" ';        echo 'onclick="Select_all(\''. htmlspecialchars($t_n_url) .'\',\''.htmlspecialchars($GLOBALS['PMD_OUT']["OWNER"][$i]).'\')"></td>';    }?>    <td class="small_tab" onmouseover="this.className='small_tab2';"        onmouseout="this.className='small_tab';"        id="id_hide_tbody_<?php echo $t_n_url ?>"        onclick="Small_tab('<?php echo $t_n_url ?>', 1)"><?php        // no space alloawd here, between tags and content !!!        // JavaScript function does require this        if (! isset($tab_pos[$t_n]) || ! empty($tab_pos[$t_n]["V"])) {            echo 'v';        } else {            echo '&gt;';        }        ?></td>    <td class="small_tab_pref" onmouseover="this.className='small_tab_pref2';"        onmouseout="this.className='small_tab_pref';"        onclick="Start_tab_upd('<?php echo $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i]; ?>');">        <img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/exec_small.png" alt="" /></td>    <td nowrap="nowrap" id="id_zag_<?php echo $t_n_url ?>" class="tab_zag"        onmousedown="cur_click=document.getElementById('<?php echo $t_n_url ?>');"/        onmouseover="Table_onover('<?php echo $t_n_url ?>',0,<?php echo (isset($_REQUEST['query'])? 1 : 0 )?> )"        onmouseout="Table_onover('<?php echo $t_n_url ?>',1,<?php echo (isset($_REQUEST['query']) ? 1 : 0 )?>)">        <span class='owner'>        <?php        echo $GLOBALS['PMD_OUT']["OWNER"][$i];        echo '.</span>';        echo $GLOBALS['PMD_OUT']["TABLE_NAME_SMALL"][$i];        ?></td>    <?php    if (isset($_REQUEST['query'])) {        echo '<td class="tab_zag"  onmouseover="Table_onover(\''.htmlspecialchars($t_n_url).'\',0,1)"  id="id_zag_'.htmlspecialchars($t_n_url).'_2"';        echo 'onmousedown="cur_click=document.getElementById(\''.htmlspecialchars($t_n_url).'\');"';        echo 'onmouseout="Table_onover(\''.htmlspecialchars($t_n_url).'\',1,1)">';    }?></tr></thead><tbody id="id_tbody_<?php echo $t_n_url ?>"    <?php    if (isset($tab_pos[$t_n]) && empty($tab_pos[$t_n]["V"])) {        echo 'style="display: none;"';    }?>>    <?php    $display_field = PMA_getDisplayField($db, $GLOBALS['PMD']["TABLE_NAME_SMALL"][$i]);    for ($j = 0, $id_cnt = count($tab_column[$t_n]["COLUMN_ID"]); $j < $id_cnt; $j++) {        ?><tr id="id_tr_<?php        echo $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i] . '.'            . urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]) ?>"        <?php        if ($display_field == $tab_column[$t_n]["COLUMN_NAME"][$j]) {            echo ' class="tab_field_3" ';        } else {            echo ' class="tab_field" ';        }        ?>    onmouseover="old_class = this.className; this.className = 'tab_field_2';"    onmouseout="this.className = old_class;"    onmousedown="Click_field('<?php        echo $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i]."','".urlencode($tab_column[$t_n]["COLUMN_NAME"][$j])."',";        if (! PMA_foreignkey_supported($GLOBALS['PMD']['TABLE_TYPE'][$i])) {            echo (isset($tables_pk_or_unique_keys[$t_n . "." . $tab_column[$t_n]["COLUMN_NAME"][$j]]) ? 1 : 0);        } else {            // if foreign keys are supported, it's not necessary that the            // index is a primary key            echo (isset($tables_all_keys[$t_n.".".$tab_column[$t_n]["COLUMN_NAME"][$j]]) ? 1 : 0);        }        ?>)">    <?php    if (isset($_REQUEST['query'])) {        echo '<td class="select_all">';        echo '<input value="'.htmlspecialchars($t_n_url).urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'"';        echo 'type="checkbox" id="select_'.htmlspecialchars($t_n_url).'._'.urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'" ';        echo 'style="margin: 0px;" title="select_'.urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'" ';        echo 'onclick="store_column(\''.urlencode($GLOBALS['PMD_OUT']["TABLE_NAME_SMALL"][$i]).'\',\''.htmlspecialchars($GLOBALS['PMD_OUT']["OWNER"][$i]).'\',\''.urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'\')"></td>';    }?>    <td width="10px" colspan="3"        id="<?php echo $t_n_url.".".urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]) ?>">        <div style="white-space:nowrap">        <?php        if (isset($tables_pk_or_unique_keys[$t_n.".".$tab_column[$t_n]["COLUMN_NAME"][$j]])) {            ?>                <img src="<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/FieldKey_small.png"                    alt="*" />            <?php        } else {            ?>                    <img src="<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Field_small<?php            if (strstr($tab_column[$t_n]["TYPE"][$j], 'char')             || strstr($tab_column[$t_n]["TYPE"][$j], 'text')) {                echo '_char';            } elseif (strstr($tab_column[$t_n]["TYPE"][$j], 'int')             || strstr($tab_column[$t_n]["TYPE"][$j], 'float')             || strstr($tab_column[$t_n]["TYPE"][$j], 'double')             || strstr($tab_column[$t_n]["TYPE"][$j], 'decimal')) {                echo '_int';            } elseif (strstr($tab_column[$t_n]["TYPE"][$j], 'date')             || strstr($tab_column[$t_n]["TYPE"][$j], 'time')             || strstr($tab_column[$t_n]["TYPE"][$j], 'year')) {                echo '_date';            }            ?>.png" alt="*" />            <?php        }        echo htmlspecialchars($tab_column[$t_n]["COLUMN_NAME"][$j]            . " : " . $tab_column[$t_n]["TYPE"][$j], ENT_QUOTES);        ?>        </div>   </td>   <?php   if (isset($_REQUEST['query'])) {       //$temp = $GLOBALS['PMD_OUT']["OWNER"][$i].'.'.$GLOBALS['PMD_OUT']["TABLE_NAME_SMALL"][$i];       echo '<td class="small_tab_pref" onmouseover="this.className=\'small_tab_pref2\';"';       echo 'onmouseout="this.className=\'small_tab_pref\';"';       echo 'onclick="Click_option(\'pmd_optionse\',\''.urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'\',\''.$GLOBALS['PMD_OUT']["TABLE_NAME_SMALL"][$i].'\')" >';       echo  '<img src="' . $GLOBALS['pmaThemeImage'] . 'pmd/exec_small.png" title="options" alt="" /></td> ';    } ?></tr>        <?php    }    ?></tbody></table>    <?php}?></form><div id="pmd_hint"></div><div id='layer_action' style="display:none;">Load...</div><table id="layer_new_relation" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%" ></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">        <thead>        <tr>            <td colspan="2" align="center" nowrap="nowrap"><strong><?php echo __('Create relation'); ?></strong></td>        </tr>        </thead>        <tbody id="foreign_relation">        <tr>        <td colspan="2" align="center" nowrap="nowrap"><strong>FOREIGN KEY</strong></td>        </tr>        <tr>            <td width="58" nowrap="nowrap">on delete</td>            <td width="102"><select name="on_delete" id="on_delete">                    <option value="nix" selected="selected">--</option>                    <option value="CASCADE">CASCADE</option>                    <option value="SET NULL">SET NULL</option>                    <option value="NO ACTION">NO ACTION</option>                    <option value="RESTRICT">RESTRICT</option>                </select>            </td>        </tr>        <tr>            <td nowrap="nowrap">on update</td>            <td><select name="on_update" id="on_update">                    <option value="nix" selected="selected">--</option>                    <option value="CASCADE">CASCADE</option>                    <option value="SET NULL">SET NULL</option>                    <option value="NO ACTION">NO ACTION</option>                    <option value="RESTRICT">RESTRICT</option>                </select>            </td>        </tr>        </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="New_relation()" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('layer_new_relation').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="layer_upd_relation" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%"></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="100%" border="0" align="center" cellpadding="2" cellspacing="0">        <tr>            <td colspan="3" align="center" nowrap="nowrap"><strong><?php echo __('Delete relation'); ?></strong></td>        </tr>        <tr>            <td colspan="3" align="center" nowrap="nowrap">                <input name="Button" type="button" class="butt"                    onclick="Upd_relation()" value="<?php echo __('Delete'); ?>" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('layer_upd_relation').style.display = 'none'; Re_load();" />            </td>        </tr>    </table></td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="pmd_optionse" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%" ></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">       <thead>        <tr>            <td colspan="2" rowspan="2" id="option_col_name" nowrap="nowrap" align="center"></td>        </tr>        </thead>        <tbody id="where">        <tr><td align="center" nowrap="nowrap"><b>WHERE</b></td></tr>        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Relation operator'); ?></td>            <td width="102"><select name="rel_opt" id="rel_opt">                    <option value="--" selected="selected"> -- </option>                    <option value="=" > = </option>                    <option value=">"> > </option>                    <option value="<"> < </option>                    <option value=">="> >= </option>                    <option value="<="> <= </option>                    <option value="NOT"> NOT </option>                    <option value="IN"> IN </option>                    <option value="EXCEPT"> <?php echo __('Except'); ?> </option>                    <option value="NOT IN"> NOT IN </option>                </select>            </td>        </tr>        <tr>        <td nowrap="nowrap"><?php echo __('Value'); ?>/<br /><?php echo __('subquery'); ?></td>            <td><textarea id="Query" value="" cols="18"></textarea>            </td>        </tr>        <tr><td align="center" nowrap="nowrap"><b><?php echo __('Rename to'); ?></b></td></tr>        <tr>        <td width="58" nowrap="nowrap"><?php echo __('New name'); ?></td>            <td width="102"><input type="text" value="" id="new_name"/></td>        </tr>        <tr><td align="center" nowrap="nowrap"><b><?php echo __('Aggregate'); ?></b></td></tr>         <tr>         <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="operator" id="operator">                    <option value="---" selected="selected">---</option>                    <option value="sum" > SUM </option>                    <option value="min"> MIN </option>                    <option value="max"> MAX </option>                    <option value="avg"> AVG </option>                    <option value="count"> COUNT </option>                    </select>           </td></tr>           <tr>                <td nowrap="nowrap" width="58" align="center"><b>GROUP BY</b></td>                <td><input type="checkbox" value="groupby" id="groupby"/></td>           </tr>           <tr>                <td nowrap="nowrap" width="58" align="center"><b>ORDER BY</b></td>                <td><input type="checkbox" value="orderby" id="orderby"/></td>           </tr>          <tr><td align="center" nowrap="nowrap"><b>HAVING</b></td></tr>          <tr>          <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="h_operator" id="h_operator">                    <option value="---" selected="selected">---</option>                    <option value="None" > <?php echo __('None'); ?> </option>                    <option value="sum" > SUM </option>                    <option value="min"> MIN </option>                    <option value="max"> MAX </option>                    <option value="avg"> AVG </option>                    <option value="count"> COUNT </option>                    </select>               </td></tr>            <tr>            <td width="58" nowrap="nowrap"><?php echo __('Relation operator'); ?></td>            <td width="102"><select name="h_rel_opt" id="h_rel_opt">                    <option value="--" selected="selected"> -- </option>                    <option value="=" > = </option>                    <option value=">"> > </option>                    <option value="<"> < </option>                    <option value=">="> >= </option>                    <option value="<="> <= </option>                    <option value="NOT"> NOT </option>                    <option value="IN"> IN </option>                    <option value="EXCEPT"> <?php echo __('Except'); ?> </option>                    <option value="NOT IN"> NOT IN </option>                </select>            </td>            </tr>            <tr>            <td width="58" nowrap="nowrap"><?php echo __('Value'); ?>/<br/><?php echo __('subquery'); ?></td>                <td width="102"><textarea id="having" value="" cols="18"></textarea></td>            </tr>        </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="add_object()" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="Close_option()" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="query_rename_to" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%" ></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">        <thead>        <tr>        <td colspan="2" align="center" nowrap="nowrap"><strong><?php echo __('Rename to'); ?></strong></td>        </tr>        </thead>        <tbody id="rename_to">        <tr>        <td width="58" nowrap="nowrap"><?php echo __('New name'); ?></td>            <td width="102">                <input type="text" value="" id="e_rename"/>            </td>        </tr>        </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="edit('Rename')" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('query_rename_to').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="query_having" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody>    <tr>        <td class="frams1" width="10px"></td>        <td class="frams5" width="99%" ></td>        <td class="frams2" width="10px"><div class="bor"></div></td>    </tr><tr>    <td class="frams8"></td>    <td class="input_tab">    <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">       <thead>        <tr>          <td colspan="2" align="center" nowrap="nowrap"><strong>HAVING</strong></td>        </tr>        </thead>        <tbody id="rename_to">        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="hoperator" id="hoperator">                    <option value="---" selected="selected">---</option>                    <option value="None" > None </option>                    <option value="sum" > SUM </option>                    <option value="min"> MIN </option>                    <option value="max"> MAX </option>                    <option value="avg"> AVG </option>                    <option value="count"> COUNT </option>                    </select>           </td></tr>        <tr>        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="hrel_opt" id="hrel_opt">                <option value="--" selected="selected"> -- </option>                    <option value="=" > = </option>                    <option value=">"> > </option>                    <option value="<"> < </option>                    <option value=">="> >= </option>                    <option value="<="> <= </option>                    <option value="NOT"> NOT </option>                    <option value="IN"> IN </option>                    <option value="EXCEPT"> <?php echo __('Except'); ?> </option>                    <option value="NOT IN"> NOT IN </option>                </select>            </td>        </tr>        <tr>        <td nowrap="nowrap"><?php echo __('Value'); ?>/<br /><?php echo __('subquery'); ?></td>            <td><textarea id="hQuery" value="" cols="18"></textarea>            </td>            </tr>         </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="edit('Having')" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('query_having').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="query_Aggregate" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%" ></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">        <thead>        <tr>        <td colspan="2" align="center" nowrap="nowrap"><strong><?php echo __('Aggregate'); ?></strong></td>        </tr>        </thead>        <tbody>        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102">                <select name="operator" id="e_operator">                    <option value="---" selected="selected">---</option>                    <option value="sum" > SUM </option>                    <option value="min"> MIN </option>                    <option value="max"> MAX </option>                       <option value="avg"> AVG </option>                    <option value="avg"> COUNT </option>                </select>           </td></tr>        </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="edit('Aggregate')" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('query_Aggregate').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="query_where" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody>    <tr>        <td class="frams1" width="10px"></td>        <td class="frams5" width="99%" ></td>        <td class="frams2" width="10px"><div class="bor"></div></td>    </tr><tr>    <td class="frams8"></td>    <td class="input_tab">    <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">       <thead>        <tr>          <td colspan="2" align="center" nowrap="nowrap"><strong>WHERE</strong></td>        </tr>        </thead>        <tbody id="rename_to">        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="erel_opt" id="erel_opt">                <option value="--" selected="selected"> -- </option>                    <option value="=" > = </option>                    <option value=">"> > </option>                    <option value="<"> < </option>                    <option value=">="> >= </option>                    <option value="<="> <= </option>                    <option value="NOT"> NOT </option>                    <option value="IN"> IN </option>                    <option value="EXCEPT"> <?php echo __('Except'); ?> </option>                    <option value="NOT IN"> NOT IN </option>                </select>            </td>        </tr>        <tr>        <td nowrap="nowrap"><?php echo __('Value'); ?>/<br /><?php echo __('subquery'); ?></td>            <td><textarea id="eQuery" value="" cols="18"></textarea>            </td>            </tr>         </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="edit('Where')" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('query_where').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><?phpif (! empty($_REQUEST['query'])) {    echo '<div class="panel">';    echo '<div style="clear:both;"></div>';    echo '<div id="ab"></div>';    echo '<div style="clear:both;"></div>';    echo '</div>';    echo '<a class="trigger" href="#">' . __('Active options') . '</a>';    echo '<div id="filter"></div>';    echo '<div id="box">';    echo '<span id="boxtitle"></span>';    echo '<form method="post" action="db_qbe.php" >';    echo '<textarea cols="80" name="sql_query" id="textSqlquery" rows="15"></textarea><div id="tblfooter">';    echo '  <input type="submit" name="submit_sql" class="btn">';    echo '  <input type="button" name="cancel" value="' . __('Cancel') . '" onclick="closebox()" class="btn">';    echo PMA_generate_common_hidden_inputs($GLOBALS['db']);    echo '</div></p>';    echo '</form></div>';} ?><!-- cache images --><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/2leftarrow_m.png" width="0" height="0" alt="" /><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/rightarrow1.png" width="0" height="0" alt="" /><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/rightarrow2.png" width="0" height="0" alt="" /><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/uparrow2_m.png" width="0" height="0" alt="" /><div id="PMA_disable_floating_menubar"></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_ndbcluster extends PMA_StorageEngine{    /**     * @return  array     */    function getVariables()    {        return array(            'ndb_connectstring' => array(            ),         );    }    /**     * @return  string  SQL query LIKE pattern     */    function getVariablesLikePattern()    {        return 'ndb\\_%';    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'ndbcluster';    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_innodb extends PMA_StorageEngine{    /**     * @return  array     */    function getVariables()    {        return array(            'innodb_data_home_dir' => array(                'title' => __('Data home directory'),                'desc'  => __('The common part of the directory path for all InnoDB data files.'),            ),            'innodb_data_file_path' => array(                'title' => __('Data files'),            ),            'innodb_autoextend_increment' => array(                'title' => __('Autoextend increment'),                'desc'  => __('The increment size for extending the size of an autoextending tablespace when it becomes full.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_buffer_pool_size' => array(                'title' => __('Buffer pool size'),                'desc'  => __('The size of the memory buffer InnoDB uses to cache data and indexes of its tables.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_additional_mem_pool_size' => array(                'title' => 'innodb_additional_mem_pool_size',                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_buffer_pool_awe_mem_mb' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_checksums' => array(            ),            'innodb_commit_concurrency' => array(            ),            'innodb_concurrency_tickets' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_doublewrite' => array(            ),            'innodb_fast_shutdown' => array(            ),            'innodb_file_io_threads' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_file_per_table' => array(            ),            'innodb_flush_log_at_trx_commit' => array(            ),            'innodb_flush_method' => array(            ),            'innodb_force_recovery' => array(            ),            'innodb_lock_wait_timeout' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_locks_unsafe_for_binlog' => array(            ),            'innodb_log_arch_dir' => array(            ),            'innodb_log_archive' => array(            ),            'innodb_log_buffer_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_log_file_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_log_files_in_group' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_log_group_home_dir' => array(            ),            'innodb_max_dirty_pages_pct' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_max_purge_lag' => array(            ),            'innodb_mirrored_log_groups' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_open_files' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_support_xa' => array(            ),            'innodb_sync_spin_loops' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_table_locks' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_BOOLEAN,            ),            'innodb_thread_concurrency' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_thread_sleep_delay' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),         );    }    /**     * @return  string  SQL query LIKE pattern     */    function getVariablesLikePattern()    {        return 'innodb\\_%';    }    /**     * @return  array   detail pages     */    function getInfoPages()    {        if ($this->support < PMA_ENGINE_SUPPORT_YES) {            return array();        }        $pages = array();        $pages['Bufferpool'] = __('Buffer Pool');        $pages['Status'] = __('InnoDB Status');        return $pages;    }    /**     * returns html tables with stats over inno db buffer pool     *     * @return  string  html table with stats     */    function getPageBufferpool()    {        // The following query is only possible because we know        // that we are on MySQL 5 here (checked above)!        // side note: I love MySQL 5 for this. :-)        $sql = '             SHOW STATUS            WHERE Variable_name LIKE \'Innodb\\_buffer\\_pool\\_%\'               OR Variable_name = \'Innodb_page_size\';';        $status = PMA_DBI_fetch_result($sql, 0, 1);        $output = '<table class="data" id="table_innodb_bufferpool_usage">' . "\n"                . '    <caption class="tblHeaders">' . "\n"                . '        ' . __('Buffer Pool Usage') . "\n"                . '    </caption>' . "\n"                . '    <tfoot>' . "\n"                . '        <tr>' . "\n"                . '            <th colspan="2">' . "\n"                . '                ' . __('Total') . "\n"                . '                : ' . PMA_formatNumber(                        $status['Innodb_buffer_pool_pages_total'], 0)                . '&nbsp;' . __('pages')                . ' / '                . join('&nbsp;',                    PMA_formatByteDown($status['Innodb_buffer_pool_pages_total'] * $status['Innodb_page_size'])) . "\n"                . '            </th>' . "\n"                . '        </tr>' . "\n"                . '    </tfoot>' . "\n"                . '    <tbody>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Free pages') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_free'], 0)                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Dirty pages') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_dirty'], 0)                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Pages containing data') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_data'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Pages to be flushed') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_flushed'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Busy pages') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_misc'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>';            // not present at least since MySQL 5.1.40            if (isset($status['Innodb_buffer_pool_pages_latched'])) {                $output .= '        <tr class="even">'                . '            <th>' . __('Latched pages') . '</th>'                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_latched'], 0)                . '</td>'                . '        </tr>';            }            $output .= '    </tbody>' . "\n"                . '</table>' . "\n\n"                . '<table class="data" id="table_innodb_bufferpool_activity">' . "\n"                . '    <caption class="tblHeaders">' . "\n"                . '        ' . __('Buffer Pool Activity') . "\n"                . '    </caption>' . "\n"                . '    <tbody>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Read requests') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_read_requests'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Write requests') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_write_requests'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Read misses') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_reads'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Write waits') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_wait_free'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Read misses in %') . '</th>' . "\n"                . '            <td class="value">'                . ($status['Innodb_buffer_pool_read_requests'] == 0                    ? '---'                    : htmlspecialchars(PMA_formatNumber($status['Innodb_buffer_pool_reads'] * 100 / $status['Innodb_buffer_pool_read_requests'], 3, 2)) . ' %') . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Write waits in %') . '</th>' . "\n"                . '            <td class="value">'                . ($status['Innodb_buffer_pool_write_requests'] == 0                    ? '---'                    : htmlspecialchars(PMA_formatNumber($status['Innodb_buffer_pool_wait_free'] * 100 / $status['Innodb_buffer_pool_write_requests'], 3, 2)) . ' %') . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '    </tbody>' . "\n"                . '</table>' . "\n";        return $output;    }    /**     * returns InnoDB status     *     * @return  string  result of SHOW INNODB STATUS inside pre tags     */    function getPageStatus()    {        return '<pre id="pre_innodb_status">' . "\n"            . htmlspecialchars(PMA_DBI_fetch_value('SHOW INNODB STATUS;', 0, 'Status')) . "\n"            . '</pre>' . "\n";    }    /**     * returns content for page $id     *     * @param   string  $id page id     * @return  string  html output     */    function getPage($id)    {        if (! array_key_exists($id, $this->getInfoPages())) {            return false;        }        $id = 'getPage' . $id;        return $this->$id();    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'innodb';    }    /**     *       * Gets the InnoDB plugin version number      * http://www.innodb.com/products/innodb_plugin      * (do not confuse this with phpMyAdmin's storage engine plugins!)     *     * @return string the version number, or empty if not running as a plugin      */    function getInnodbPluginVersion()    {        return PMA_DBI_fetch_value('SELECT @@innodb_version;');    }    /**     *       * Gets the InnoDB file format      * (works only for the InnoDB plugin)     * http://www.innodb.com/products/innodb_plugin      * (do not confuse this with phpMyAdmin's storage engine plugins!)     *     * @return string the InnoDB file format      */    function getInnodbFileFormat()    {        return PMA_DBI_fetch_value("SHOW GLOBAL VARIABLES LIKE 'innodb_file_format';", 0, 1);    }    /**     *       * Verifies if this server supports the innodb_file_per_table feature      * (works only for the InnoDB plugin)     * http://www.innodb.com/products/innodb_plugin      * (do not confuse this with phpMyAdmin's storage engine plugins!)     *     * @return boolean whether this feature is supported or not      */    function supportsFilePerTable()    {        $innodb_file_per_table = PMA_DBI_fetch_value("SHOW GLOBAL VARIABLES LIKE 'innodb_file_per_table';", 0, 1);        if ($innodb_file_per_table == 'ON') {            return true;        } else {            return false;        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$table = $T;$display_field = $F;if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);    if ($disp) {        if ($display_field != $disp) {            $upd_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' SET display_field = \'' . PMA_sqlAddSlashes($display_field) . '\''                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        } else {            $upd_query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        }    } elseif ($display_field != '') {        $upd_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                   . '(db_name, table_name, display_field) '                   . ' VALUES('                   . '\'' . PMA_sqlAddSlashes($db) . '\','                   . '\'' . PMA_sqlAddSlashes($table) . '\','                   . '\'' . PMA_sqlAddSlashes($display_field) . '\')';    }    if (isset($upd_query)) {        $upd_rs    = PMA_query_as_controluser($upd_query);    }} // end ifheader("Content-Type: text/xml; charset=utf-8");header("Cache-Control: no-cache");die("<root act='save_pos' return=__('Modifications have been saved')></root>");?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Parser bug report decoder * * This is the parser bug decoder system * Throw the bug data in the query box, and hit submit for output. * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * * @package PhpMyAdmin-debug *//** * Displays the form */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US"><head>    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />    <title>phpMyAdmin - Parser bug report decoder</title>    <style type="text/css">    <!--    body, p {        font-family: Arial, Helvetica, sans-serif;        font-size:   medium;    }    h1 {        font-family: Verdana, Arial, Helvetica, sans-serif;        font-size:   large;        font-weight: bold;        color:       #000066;    }    //-->    </style></head><body bgcolor="#FFFFFF"><h1>Parser bug report decoder</h1><br /><form method="post" action="./decode_bug.php">    <input type="hidden" name="bar" value="<?php echo rand(); ?>" />    Encoded bug report:<br />    <textarea name="bug_encoded" cols="72" rows="10"></textarea>    <br /><br />    <input type="submit" /></form><hr /><?php/** * If the form has been submitted -> decodes the bug report *//** * Display the decoded bug report in ASCII format * * @param  string  the text data * * @return string  the text enclosed by "<pre>...</pre>" tags * * @access public */function PMA_printDecodedBug($textdata){    return '<pre>' . htmlspecialchars($textdata) . '</pre><br />';} // end of the "PMA_printDecodedBug()" functionif (!empty($_POST) && isset($_POST['bug_encoded'])) {    $bug_encoded = $_POST['bug_encoded'];}if (!empty($bug_encoded) && is_string($bug_encoded)) {    if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) {        $bug_encoded = stripslashes($bug_encoded);    }    $bug_encoded     = preg_replace('/[[:space:]]/', '', $bug_encoded);    $bug_decoded     = base64_decode($bug_encoded);    if (substr($bug_encoded, 0, 2) == 'eN') {        if (function_exists('gzuncompress')) {                $result  = PMA_printDecodedBug(gzuncompress($bug_decoded));            } else {                $result  = 'Error: &quot;gzuncompress()&quot; is unavailable!' . "\n";        }    } else {        $result  = PMA_printDecodedBug($bug_decoded);    } // end if... else...    echo '<p>Decoded:</p>' . "\n"         . $result . "\n";} // end if?></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * This Class interacts with the user to gather the information * about their tables for which they want to export the relational schema * export options are shown to user from they can choose */class PMA_User_Schema{    public $chosenPage;    public $autoLayoutForeign;    public $autoLayoutInternal;    public $pageNumber;    public $c_table_rows;    public $action;    public function setAction($value)    {        $this->action = $value;    }    /**     * This function will process the user defined pages     * and tables which will be exported as Relational schema     * you can set the table positions on the paper via scratchboard     * for table positions, put the x,y co-ordinates     *     * $this->action tells what the Schema is supposed to do     * create and select a page, generate schema etc     *     * @access public     * @return void     */    public function processUserChoice()    {        global $action_choose, $db, $cfgRelation;        if (isset($this->action)) {            switch ($this->action) {            case 'selectpage':                $this->chosenPage = $_REQUEST['chpage'];                if ($action_choose=="1") {                    $this->deleteCoordinates(                        $db,                        $cfgRelation,                        $this->chosenPage                    );                    $this->deletePages(                        $db,                        $cfgRelation,                        $this->chosenPage                    );                    $this->chosenPage = 0;                }                break;            case 'createpage':                $this->pageNumber = PMA_REL_create_page(                    $_POST['newpage'],                    $cfgRelation,                    $db                );                $this->autoLayoutForeign = isset($_POST['auto_layout_foreign'])                    ? "1"                    : null;                $this->autoLayoutInternal = isset($_POST['auto_layout_internal'])                    ? "1"                    : null;                $this->processRelations(                    $db,                    $this->pageNumber,                    $cfgRelation                );                break;            case 'edcoord':                $this->chosenPage = $_POST['chpage'];                $this->c_table_rows = $_POST['c_table_rows'];                $this->_editCoordinates($db, $cfgRelation);                break;            case 'delete_old_references':                $this->_deleteTableRows(                    $_POST['delrow'],                    $cfgRelation,                    $db,                    $_POST['chpage']                );                break;            case 'process_export':                $this->_processExportSchema();                break;            } // end switch        } // end if (isset($do))    }    /**     * shows/displays the HTML FORM to create the page     *     * @param string $db name of the selected database     *     * @return void     * @access public     */    public function showCreatePageDialog($db)    {        ?>        <form method="post" action="schema_edit.php" name="frm_create_page">        <fieldset>        <legend>        <?php echo __('Create a page') . "\n"; ?>        </legend>        <?php echo PMA_generate_common_hidden_inputs($db); ?>        <input type="hidden" name="do" value="createpage" />        <table>        <tr>        <td><label for="id_newpage"><?php echo __('Page name'); ?></label></td>        <td><input type="text" name="newpage" id="id_newpage" size="20" maxlength="50" /></td>        </tr>        <tr>        <td><?php echo __('Automatic layout based on'); ?></td>        <td>        <input type="checkbox" name="auto_layout_internal" id="id_auto_layout_internal" /><label for="id_auto_layout_internal">        <?php echo __('Internal relations'); ?></label><br />        <?php        /*         * Check to see whether INNODB and PBXT storage engines are Available in MYSQL PACKAGE         * If available, then provide AutoLayout for Foreign Keys in Schema View         */        if (PMA_StorageEngine::isValid('InnoDB') || PMA_StorageEngine::isValid('PBXT')) {            ?>            <input type="checkbox" name="auto_layout_foreign" id="id_auto_layout_foreign" /><label for="id_auto_layout_foreign">            <?php echo __('FOREIGN KEY'); ?></label><br />            <?php        }        ?>        </td></tr>        </table>        </fieldset>        <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Go'); ?>" />        </fieldset>        </form>        <?php    }    /**     * shows/displays the created page names in a drop down list     * User can select any page number and edit it using dashboard etc     *     * @return void     * @access public     */    public function selectPage()    {        global $db,$table,$cfgRelation;        $page_query = 'SELECT * FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'';        $page_rs    = PMA_query_as_controluser($page_query, false, PMA_DBI_QUERY_STORE);        if ($page_rs && PMA_DBI_num_rows($page_rs) > 0) {            ?>            <form method="get" action="schema_edit.php" name="frm_select_page">            <fieldset>            <legend>            <?php echo __('Please choose a page to edit') . "\n"; ?>            </legend>            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="do" value="selectpage" />            <select name="chpage" id="chpage" class="autosubmit">            <option value="0"><?php echo __('Select page'); ?></option>            <?php            while ($curr_page = PMA_DBI_fetch_assoc($page_rs)) {                echo "\n" . '        '                    . '<option value="' . $curr_page['page_nr'] . '"';                if (isset($this->chosenPage)                    && $this->chosenPage == $curr_page['page_nr']                ) {                    echo ' selected="selected"';                }                echo '>' . $curr_page['page_nr'] . ': '                    . htmlspecialchars($curr_page['page_descr']) . '</option>';            } // end while            echo "\n";            ?>            </select>            <?php            $choices = array(                 '0' => __('Edit'),                 '1' => __('Delete')            );            PMA_display_html_radio('action_choose', $choices, '0', false);            unset($choices);            ?>            </fieldset>            <fieldset class="tblFooters">            <input type="submit" value="<?php echo __('Go'); ?>" /><br />            </fieldset>            </form>            <?php        } // end IF        echo "\n";    } // end function    /**     * A dashboard is displayed to AutoLayout the position of tables     * users can drag n drop the tables and change their positions     *     * @return void     * @access public     */    public function showTableDashBoard()    {        global $db, $cfgRelation, $table, $with_field_names;        /*         * We will need an array of all tables in this db         */        $selectboxall = array('--');        $alltab_rs    = PMA_DBI_query(            'SHOW TABLES FROM ' . PMA_backquote($db) . ';',            null,            PMA_DBI_QUERY_STORE        );        while ($val = @PMA_DBI_fetch_row($alltab_rs)) {               $selectboxall[] = $val[0];        }        $tabExist = array();        /*         * Now if we already have chosen a page number then we should         * show the tables involved         */        if (isset($this->chosenPage) && $this->chosenPage > 0) {            echo "\n";            ?>            <h2><?php echo __('Select Tables'); ?></h2>            <?php            $page_query = 'SELECT * FROM '                . PMA_backquote($GLOBALS['cfgRelation']['db'])                . '.' . PMA_backquote($cfgRelation['table_coords'])                . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                . ' AND pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';            $page_rs    = PMA_query_as_controluser($page_query, false);            $array_sh_page = array();            while ($temp_sh_page = @PMA_DBI_fetch_assoc($page_rs)) {                   $array_sh_page[] = $temp_sh_page;            }            /*             * Display WYSIWYG parts             */            if (! isset($_POST['with_field_names']) && ! isset($_POST['showwysiwyg'])) {                $with_field_names = true;            }            $this->_displayScratchboardTables($array_sh_page);            ?>            <form method="post" action="schema_edit.php" name="edcoord">            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="chpage" value="<?php echo htmlspecialchars($this->chosenPage); ?>" />            <input type="hidden" name="do" value="edcoord" />            <table border="0">            <tr>                <th><?php echo __('Table'); ?></th>                <th><?php echo __('Delete'); ?></th>                <th>X</th>                <th>Y</th>            </tr>            <?php            if (isset($ctable)) {                unset($ctable);            }            $i = 0;            $odd_row = true;            foreach ($array_sh_page as $dummy_sh_page => $sh_page) {                $_mtab            =  $sh_page['table_name'];                $tabExist[$_mtab] =  false;                echo "\n" . '    <tr class="noclick ';                if ($odd_row) {                    echo 'odd';                } else {                    echo 'even';                }                echo '">';                $odd_row != $odd_row;                echo "\n" . '        <td>'                     . "\n" . '            <select name="c_table_' . $i . '[name]">';                foreach ($selectboxall as $key => $value) {                    echo "\n" . '                <option value="' . htmlspecialchars($value) . '"';                    if ($value == $sh_page['table_name']) {                        echo ' selected="selected"';                        $tabExist[$_mtab] = true;                    }                    echo '>' . htmlspecialchars($value) . '</option>';                }                echo "\n" . '            </select>'                     . "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="checkbox" id="id_c_table_' . $i .'" name="c_table_' . $i . '[delete]" value="y" /><label for="id_c_table_' . $i .'">' . __('Delete') . '</label>';                echo "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="text" onchange="dragPlace(' . $i . ', \'x\', this.value)" name="c_table_' . $i . '[x]" value="' . $sh_page['x'] . '" />';                echo "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="text" onchange="dragPlace(' . $i . ', \'y\', this.value)" name="c_table_' . $i . '[y]" value="' . $sh_page['y'] . '" />';                echo "\n" . '        </td>';                echo "\n" . '    </tr>';                $i++;            }            /*             * Add one more empty row             */            echo "\n" . '    <tr class="noclick ';            if ($odd_row) {                echo 'odd';            } else {                echo 'even';            }            $odd_row != $odd_row;            echo '">';            echo "\n" . '        <td>'                 . "\n" . '            <select name="c_table_' . $i . '[name]">';            foreach ($selectboxall as $key => $value) {                echo "\n" . '                <option value="' . htmlspecialchars($value) . '">' . htmlspecialchars($value) . '</option>';            }            echo "\n" . '            </select>'                 . "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="checkbox" id="id_c_table_' . $i .'" name="c_table_' . $i . '[delete]" value="y" /><label for="id_c_table_' . $i .'">' . __('Delete') . '</label>';            echo "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="text" name="c_table_' . $i . '[x]" value="' . (isset($sh_page['x'])?$sh_page['x']:'') . '" />';            echo "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="text" name="c_table_' . $i . '[y]" value="' . (isset($sh_page['y'])?$sh_page['y']:'') . '" />';            echo "\n" . '        </td>';            echo "\n" . '    </tr>';            echo "\n" . '    </table>' . "\n";            echo "\n" . '    <input type="hidden" name="c_table_rows" value="' . ($i + 1) . '" />';            echo "\n" . '    <input type="hidden" id="showwysiwyg" name="showwysiwyg" value="' . ((isset($showwysiwyg) && $showwysiwyg == '1') ? '1' : '0') . '" />';            echo "\n" . '    <input type="checkbox" name="with_field_names" ' . (isset($with_field_names) ? 'checked="checked"' : ''). ' />' . __('Column names') . '<br />';            echo "\n" . '    <input type="submit" value="' . __('Save') . '" />';            echo "\n" . '</form>' . "\n\n";        } // end if        if (isset($tabExist)) {            $this->_deleteTables($db, $this->chosenPage, $tabExist);        }    }    /**     * show Export relational schema generation options     * user can select export type of his own choice     * and the attributes related to it     *     * @return void     * @access public     */    public function displaySchemaGenerationOptions()    {        global $cfg,$pmaThemeImage,$db,$test_rs,$chpage;        ?>        <form method="post" action="schema_export.php">            <fieldset>            <legend>            <?php            echo PMA_generate_common_hidden_inputs($db);            if ($cfg['PropertiesIconic']) {                echo PMA_getImage('b_views.png');            }            echo __('Display relational schema');            ?>:            </legend>            <select name="export_type" id="export_type">                <option value="pdf" selected="selected">PDF</option>                <option value="svg">SVG</option>                <option value="dia">DIA</option>                <option value="visio">Visio</option>                <option value="eps">EPS</option>            </select>            <label><?php echo __('Select Export Relational Type');?></label><br />            <?php            if (isset($test_rs)) {            ?>            <label for="pdf_page_number_opt"><?php echo __('Page number:'); ?></label>            <select name="pdf_page_number" id="pdf_page_number_opt">                <?php                while ($pages = @PMA_DBI_fetch_assoc($test_rs)) {                    echo '                <option value="' . $pages['page_nr'] . '">'                        . $pages['page_nr'] . ': ' . htmlspecialchars($pages['page_descr']) . '</option>' . "\n";                } // end while                PMA_DBI_free_result($test_rs);                unset($test_rs);                ?>            </select><br />            <?php } else { ?>            <input type="hidden" name="pdf_page_number" value="<?php echo htmlspecialchars($this->chosenPage); ?>" />            <?php } ?>            <input type="hidden" name="do" value="process_export" />            <input type="hidden" name="chpage" value="<?php echo $chpage; ?>" />            <input type="checkbox" name="show_grid" id="show_grid_opt" />            <label for="show_grid_opt"><?php echo __('Show grid'); ?></label><br />            <input type="checkbox" name="show_color" id="show_color_opt" checked="checked" />            <label for="show_color_opt"><?php echo __('Show color'); ?></label><br />            <input type="checkbox" name="show_table_dimension" id="show_table_dim_opt" />            <label for="show_table_dim_opt"><?php echo __('Show dimension of tables'); ?>            </label><br />            <input type="checkbox" name="all_table_same_wide" id="all_table_same_wide" />            <label for="all_table_same_wide"><?php echo __('Display all tables with the same width'); ?>            </label><br />            <input type="checkbox" name="with_doc" id="with_doc" checked="checked" />            <label for="with_doc"><?php echo __('Data Dictionary'); ?></label><br />            <input type="checkbox" name="show_keys" id="show_keys" />            <label for="show_keys"><?php echo __('Only show keys'); ?></label><br />            <select name="orientation" id="orientation_opt" onchange="refreshDragOption('pdflayout');" >                <option value="L"><?php echo __('Landscape');?></option>                <option value="P"><?php echo __('Portrait');?></option>            </select>            <label for="orientation_opt"><?php echo __('Orientation'); ?></label>            <br />            <select name="paper" id="paper_opt" onchange="refreshDragOption('pdflayout');">                <?php                foreach ($cfg['PDFPageSizes'] as $key => $val) {                        echo '<option value="' . $val . '"';                        if ($val == $cfg['PDFDefaultPageSize']) {                            echo ' selected="selected"';                        }                        echo ' >' . $val . '</option>' . "\n";                }                ?>            </select>            <label for="paper_opt"><?php echo __('Paper size'); ?></label>            </fieldset>            <fieldset class="tblFooters">            <input type="submit" value="<?php echo __('Go'); ?>" />            </fieldset>        </form>        <?php    }    /**    * Check if there are tables that need to be deleted in dashboard,    * if there are, ask the user for allowance    *    * @param string  $db       name of database selected    * @param integer $chpage   selected page    * @param array   $tabExist    *    * @return void    * @access private    */    private function _deleteTables($db, $chpage, $tabExist)    {        global $table;        $_strtrans  = '';        $_strname   = '';        $shoot      = false;        if (! empty($tabExist) && is_array($tabExist)) {            foreach ($tabExist as $key => $value) {                if (! $value) {                    $_strtrans  .= '<input type="hidden" name="delrow[]" value="' . htmlspecialchars($key) . '" />' . "\n";                    $_strname   .= '<li>' . htmlspecialchars($key) . '</li>' . "\n";                    $shoot       = true;                }            }            if ($shoot) {                echo '<form action="schema_edit.php" method="post">' . "\n"                    . PMA_generate_common_hidden_inputs($db)                    . '<input type="hidden" name="do" value="delete_old_references" />' . "\n"                    . '<input type="hidden" name="chpage" value="' . htmlspecialchars($chpage) . '" />' . "\n"                    . __('The current page has references to tables that no longer exist. Would you like to delete those references?')                    . '<ul>' . "\n"                    . $_strname                    . '</ul>' . "\n"                    . $_strtrans                    . '<input type="submit" value="' . __('Go') . '" />' . "\n"                    . '</form>';            }        }    }    /**     * Check if there are tables that need to be deleted in dashboard,     * if there are, ask the user for allowance     *     * @return void     * @access private     */    private function _displayScratchboardTables($array_sh_page)    {        global $with_field_names, $db;        ?>        <script type="text/javascript" src="./js/dom-drag.js"></script>        <form method="post" action="schema_edit.php" name="dragdrop">        <input type="button" name="dragdrop" value="<?php echo __('Toggle scratchboard'); ?>" onclick="ToggleDragDrop('pdflayout');" />        <input type="button" name="dragdropreset" value="<?php echo __('Reset'); ?>" onclick="resetDrag();" />        </form>        <div id="pdflayout" class="pdflayout" style="visibility: hidden;">        <?php        $draginit = '';        $draginit2 = '';        $reset_draginit = '';        $i = 0;        foreach ($array_sh_page as $key => $temp_sh_page) {            $drag_x = $temp_sh_page['x'];            $drag_y = $temp_sh_page['y'];            $draginit2      .= ' Drag.init($("#table_' . $i . '")[0], null, 0, parseInt(myid.style.width)-2, 0, parseInt(myid.style.height)-5);' . "\n";            $draginit2      .= '    $("#table_' . $i . '")[0].onDrag = function (x, y) { document.edcoord.elements["c_table_' . $i . '[x]"].value = parseInt(x); document.edcoord.elements["c_table_' . $i . '[y]"].value = parseInt(y) }' . "\n";            $draginit       .= '    $("#table_' . $i . '")[0].style.left = "' . $drag_x . 'px";' . "\n";            $draginit       .= '    $("#table_' . $i . '")[0].style.top  = "' . $drag_y . 'px";' . "\n";            $reset_draginit .= '    $("#table_' . $i . '")[0].style.left = "2px";' . "\n";            $reset_draginit .= '    $("#table_' . $i . '")[0].style.top  = "' . (15 * $i) . 'px";' . "\n";            $reset_draginit .= '    document.edcoord.elements["c_table_' . $i . '[x]"].value = "2"' . "\n";            $reset_draginit .= '    document.edcoord.elements["c_table_' . $i . '[y]"].value = "' . (15 * $i) . '"' . "\n";            echo '<div id="table_' . $i . '" class="pdflayout_table"><u>' . $temp_sh_page['table_name'] . '</u>';            if (isset($with_field_names)) {                $fields = PMA_DBI_get_columns($db, $temp_sh_page['table_name']);                // if the table has been dropped from outside phpMyAdmin,                // we can no longer obtain its columns list                if ($fields) {                    foreach ($fields as $row) {                        echo '<br />' . htmlspecialchars($row['Field']) . "\n";                    }                }            }            echo '</div>' . "\n";            $i++;        }        ?>        </div>        <script type="text/javascript">        //<![CDATA[        function PDFinit() {            refreshLayout();            myid = $('#pdflayout')[0];            <?php echo $draginit; ?>            TableDragInit();        }        function TableDragInit() {            myid = $('#pdflayout')[0];            <?php echo $draginit2; ?>        }        function resetDrag() {            <?php echo $reset_draginit; ?>        }        //]]>        </script>        <?php    }    /**     * delete the table rows with table co-ordinates     *     * @param int     $delrow      delete selected table from list of tables     * @param array   $cfgRelation relation settings     * @param string  $db          database name     * @param integer $chpage      selected page for adding relations etc     *     * @return void     * @access private     */    private function _deleteTableRows($delrow,$cfgRelation,$db,$chpage)    {        foreach ($delrow as $current_row) {            $del_query = 'DELETE FROM '                . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['table_coords']) . ' ' . "\n"                .   ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'' . "\n"                .   ' AND table_name = \'' . PMA_sqlAddSlashes($current_row) . '\'' . "\n"                .   ' AND pdf_page_number = \'' . PMA_sqlAddSlashes($chpage) . '\'';                echo $del_query;            PMA_query_as_controluser($del_query, false);        }    }    /**     * get all the export options and verify     * call and include the appropriate Schema Class depending on $export_type     *     * @return void     * @access private     */    private function _processExportSchema()    {        /**        * Settings for relation stuff        */        include_once './libraries/transformations.lib.php';        include_once './libraries/Index.class.php';        /**         * default is PDF, otherwise validate it's only letters a-z         */        global  $db,$export_type;        if (!isset($export_type) || !preg_match('/^[a-zA-Z]+$/', $export_type)) {            $export_type = 'pdf';        }        PMA_DBI_select_db($db);        include "./libraries/schema/" . ucfirst($export_type) . "_Relation_Schema.class.php";        $obj_schema = eval("new PMA_" . ucfirst($export_type) . "_Relation_Schema();");    }    /**     * delete X and Y coordinates     *     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     * @param integer $choosePage  selected page for adding relations etc     *     * @return void     * @access private     */    public function deleteCoordinates($db, $cfgRelation, $choosePage)    {        $query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['table_coords'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($choosePage) . '\'';        PMA_query_as_controluser($query, false);    }    /**     * delete pages     *     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     * @param integer $choosePage  selected page for adding relations etc     *     * @return void     * @access private     */    public function deletePages($db, $cfgRelation, $choosePage)    {        $query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND   page_nr = \'' . PMA_sqlAddSlashes($choosePage) . '\'';        PMA_query_as_controluser($query, false);    }    /**     * process internal and foreign key relations     *     * @param string  $db          The database name     * @param integer $pageNumber  document number/Id     * @param array   $cfgRelation relation settings     *     * @return void     * @access private     */    public function processRelations($db, $pageNumber, $cfgRelation)    {        /*         * A u t o m a t i c    l a y o u t         *         * There are 2 kinds of relations in PMA         * 1) Internal Relations 2) Foreign Key Relations         */        if (isset($this->autoLayoutInternal) || isset($this->autoLayoutForeign)) {            $all_tables = array();        }        if (isset($this->autoLayoutForeign)) {            /*             * get the tables list             * who support FOREIGN KEY, it's not             * important that we group together InnoDB tables             * and PBXT tables, as this logic is just to put             * the tables on the layout, not to determine relations             */            $tables = PMA_DBI_get_tables_full($db);            $foreignkey_tables = array();            foreach ($tables as $table_name => $table_properties) {                if (PMA_foreignkey_supported($table_properties['ENGINE'])) {                    $foreignkey_tables[] = $table_name;                }            }            $all_tables = $foreignkey_tables;            /*             * could be improved by finding the tables which have the             * most references keys and placing them at the beginning             * of the array (so that they are all center of schema)             */            unset($tables, $foreignkey_tables);        }        if (isset($this->autoLayoutInternal)) {            /*             * get the tables list who support Internal Relations;             * This type of relations will be created when             * you setup the PMA tables correctly             */            $master_tables = 'SELECT COUNT(master_table), master_table'                . ' FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['relation'])                . ' WHERE master_db = \'' . PMA_sqlAddSlashes($db) . '\''                . ' GROUP BY master_table'                . ' ORDER BY COUNT(master_table) DESC';            $master_tables_rs = PMA_query_as_controluser(                $master_tables, false, PMA_DBI_QUERY_STORE            );            if ($master_tables_rs && PMA_DBI_num_rows($master_tables_rs) > 0) {                /* first put all the master tables at beginning                 * of the list, so they are near the center of                 * the schema                 */                while (list(, $master_table) = PMA_DBI_fetch_row($master_tables_rs)) {                       $all_tables[] = $master_table;                }                /* Now for each master, add its foreigns into an array                 * of foreign tables, if not already there                 * (a foreign might be foreign for more than                 * one table, and might be a master itself)                 */                $foreign_tables = array();                foreach ($all_tables as $master_table) {                    $foreigners = PMA_getForeigners($db, $master_table);                    foreach ($foreigners as $foreigner) {                        if (! in_array($foreigner['foreign_table'], $foreign_tables)) {                            $foreign_tables[] = $foreigner['foreign_table'];                        }                    }                }                /*                 * Now merge the master and foreign arrays/tables                 */                foreach ($foreign_tables as $foreign_table) {                    if (! in_array($foreign_table, $all_tables)) {                        $all_tables[] = $foreign_table;                    }                }            }        }        if (isset($this->autoLayoutInternal) || isset($this->autoLayoutForeign)) {            $this->addRelationCoordinates(                $all_tables, $pageNumber, $db, $cfgRelation            );        }        $this->chosenPage = $pageNumber;    }    /**     * Add X and Y coordinates for a table     *     * @param array   $all_tables  A list of all tables involved     * @param integer $pageNumber  document number/Id     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     *     * @return void     * @access private     */    public function addRelationCoordinates($all_tables, $pageNumber, $db, $cfgRelation)    {        /*         * Now generate the coordinates for the schema         * in a clockwise spiral and add to co-ordinates table         */        $pos_x = 300;        $pos_y = 300;        $delta = 110;        $delta_mult = 1.10;        $direction = "right";        foreach ($all_tables as $current_table) {            /*            * save current table's coordinates            */            $insert_query = 'INSERT INTO '                . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['table_coords']) . ' '                . '(db_name, table_name, pdf_page_number, x, y) '                . 'VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \''                . PMA_sqlAddSlashes($current_table) . '\',' . $pageNumber                . ',' . $pos_x . ',' . $pos_y . ')';            PMA_query_as_controluser($insert_query, false);            /*             * compute for the next table             */            switch ($direction) {            case 'right':                $pos_x    += $delta;                $direction = "down";                $delta    *= $delta_mult;                break;            case 'down':                $pos_y    += $delta;                $direction = "left";                $delta    *= $delta_mult;                break;            case 'left':                $pos_x    -= $delta;                $direction = "up";                $delta    *= $delta_mult;                break;            case 'up':                $pos_y    -= $delta;                $direction = "right";                $delta    *= $delta_mult;                break;            }        }    }    /**     * update X and Y coordinates for a table     *     * @param string $db          The database name     * @param array  $cfgRelation relation settings     *     * @return void     * @access private     */    private function _editCoordinates($db, $cfgRelation)    {        for ($i = 0; $i < $this->c_table_rows; $i++) {            $arrvalue = 'c_table_' . $i;            global $$arrvalue;            $arrvalue = $$arrvalue;            if (! isset($arrvalue['x']) || $arrvalue['x'] == '') {                $arrvalue['x'] = 0;            }            if (! isset($arrvalue['y']) || $arrvalue['y'] == '') {                $arrvalue['y'] = 0;            }            if (isset($arrvalue['name']) && $arrvalue['name'] != '--') {                $test_query = 'SELECT * FROM '                    . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($cfgRelation['table_coords'])                    . ' WHERE db_name = \'' .  PMA_sqlAddSlashes($db) . '\''                    . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                    . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                $test_rs = PMA_query_as_controluser($test_query, false, PMA_DBI_QUERY_STORE);                //echo $test_query;                if ($test_rs && PMA_DBI_num_rows($test_rs) > 0) {                    if (isset($arrvalue['delete']) && $arrvalue['delete'] == 'y') {                        $ch_query = 'DELETE FROM '                            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                            . PMA_backquote($cfgRelation['table_coords'])                            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                    } else {                        $ch_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db'])                            . '.' . PMA_backquote($cfgRelation['table_coords']) . ' '                            . 'SET x = ' . $arrvalue['x'] . ', y= ' . $arrvalue['y']                            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                    }                } else {                    $ch_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db'])                        . '.' . PMA_backquote($cfgRelation['table_coords']) . ' '                        . '(db_name, table_name, pdf_page_number, x, y) '                        . 'VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \''                        . PMA_sqlAddSlashes($arrvalue['name']) . '\', \''                        . PMA_sqlAddSlashes($this->chosenPage) . '\','                        . $arrvalue['x'] . ',' . $arrvalue['y'] . ')';                }                //echo $ch_query;                PMA_query_as_controluser($ch_query, false);            } // end if        } // end for    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form templates * * @package PhpMyAdmin *//** * Displays top part of the form * * @param string $action         default: $_SERVER['REQUEST_URI'] * @param string $method         'post' or 'get' * @param array  $hidden_fields  array of form hidden fields (key: field name) */function display_form_top($action = null, $method = 'post', $hidden_fields = null){    static $has_check_page_refresh = false;    if ($action === null) {        $action = $_SERVER['REQUEST_URI'];    }    if ($method != 'post') {        $method = 'get';    }?><form method="<?php echo $method ?>" action="<?php echo htmlspecialchars($action) ?>" class="config-form"><input type="hidden" name="tab_hash" value="" /><?php    // we do validation on page refresh when browser remembers field values,    // add a field with known value which will be used for checks    if (!$has_check_page_refresh) {        $has_check_page_refresh = true;        echo '<input type="hidden" name="check_page_refresh" id="check_page_refresh"'            . ' value="" />' . "\n";    }    echo PMA_generate_common_hidden_inputs('', '', 0, 'server') . "\n";    echo PMA_getHiddenFields((array)$hidden_fields);}/** * Displays form tabs which are given by an array indexed by fieldset id * ({@link display_fieldset_top}), with values being tab titles. * * @param array $tabs */function display_tabs_top($tabs){?><ul class="tabs"><?php foreach ($tabs as $tab_id => $tab_name): ?>    <li><a href="#<?php echo $tab_id ?>"><?php echo htmlspecialchars($tab_name); ?></a></li><?php endforeach; ?></ul><br clear="right" /><div class="tabs_contents"><?php}/** * Displays top part of a fieldset * * @param string $title * @param string $description * @param array  $errors * @param array  $attributes */function display_fieldset_top($title = '', $description = '', $errors = null, $attributes = array()){    global $_FormDisplayGroup;    $_FormDisplayGroup = 0;    $attributes = array_merge(array('class' => 'optbox'), $attributes);    foreach ($attributes as $k => &$attr) {        $attr = $k . '="' . htmlspecialchars($attr) . '"';    }    echo '<fieldset ' . implode(' ', $attributes) . '>';    echo '<legend>' . $title . '</legend>';    if (!empty($description)) {        echo '<p>' . $description . '</p>';    }    // this must match with displayErrors() in scripts.js    if (is_array($errors) && count($errors) > 0) {        echo '<dl class="errors">';        foreach ($errors as $error) {            echo '<dd>' . $error . '</dd>';        }        echo '</dl>';    }?><table width="100%" cellspacing="0"><?php}/** * Displays input field * * $opts keys: * o doc - (string) documentation link * o errors - error array * o setvalue - (string) shows button allowing to set poredefined value * o show_restore_default - (boolean) whether show "restore default" button * o userprefs_allow - whether user preferences are enabled for this field (null - no support, *                     true/false - enabled/disabled) * o userprefs_comment - (string) field comment * o values - key - value paris for <select> fields * o values_escaped - (boolean) tells whether values array is already escaped (defaults to false) * o values_disabled -  (array)list of disabled values (keys from values) * o comment - (string) tooltip comment * o comment_warning - (bool) whether this comments warns about something * o wiki - (string) wiki link * * @param string $path * @param string $name * @param string $description * @param string $type * @param mixed  $value * @param bool   $value_is_default * @param array  $opts */function display_input($path, $name, $description = '', $type, $value, $value_is_default = true, $opts = null){    global $_FormDisplayGroup;    static $base_dir; // Relative path to the root phpMyAdmin folder    static $icons;    // An array of IMG tags used further below in the function    $is_setup_script = defined('PMA_SETUP');    if ($base_dir === null) { // if the static variables have not been initialised        $base_dir = $is_setup_script ? '../' : '';        $icons = array();        // Icon definitions:        // The same indexes will be used in the $icons array.        // The first element contains the filename and the second        // element is used for the "alt" and "title" attributes.        $icon_init = array(            'edit'   => array('b_edit.png',   ''),            'help'   => array('b_help.png',   __('Documentation')),            'info'   => array('b_info.png',   __('Wiki')),            'reload' => array('s_reload.png', ''),            'tblops' => array('b_tblops.png', '')        );        if ($is_setup_script) {            // When called from the setup script, we don't have access to the            // sprite-aware PMA_getImage() function because the PMA_theme class            // has not been loaded, so we generate the img tags manually.            foreach ($icon_init as $k => $v) {                $title = '';                if (! empty($v[1])) {                    $title = ' title="' . $v[1] . '"';                }                $icons[$k] = sprintf(                    '<img alt="%s" src="%s"%s />',                    $v[1],                    ".{$GLOBALS['cfg']['ThemePath']}/original/img/{$v[0]}",                    $title                );            }        } else {            // In this case we just use PMA_getImage() because it's available            foreach ($icon_init as $k => $v) {                $icons[$k] = PMA_getImage($v[0], $v[1]);            }        }    }    $has_errors = isset($opts['errors']) && !empty($opts['errors']);    $option_is_disabled = !$is_setup_script && isset($opts['userprefs_allow']) && !$opts['userprefs_allow'];    $name_id = 'name="' . htmlspecialchars($path) . '" id="' . htmlspecialchars($path) . '"';    $field_class = $type == 'checkbox' ? 'checkbox' : '';    if (!$value_is_default) {        $field_class .= ($field_class == '' ? '' : ' ') . ($has_errors ? 'custom field-error' : 'custom');    }    $field_class = $field_class ? ' class="' . $field_class . '"' : '';    $tr_class = $_FormDisplayGroup > 0        ? 'group-field group-field-' . $_FormDisplayGroup        : '';    if (isset($opts['setvalue']) && $opts['setvalue'] == ':group') {        unset($opts['setvalue']);        $_FormDisplayGroup++;        $tr_class = 'group-header-field group-header-' . $_FormDisplayGroup;    }    if ($option_is_disabled) {        $tr_class .= ($tr_class ? ' ' : '') . 'disabled-field';    }    $tr_class = $tr_class ? ' class="' . $tr_class . '"' : '';?><tr<?php echo $tr_class ?>>    <th>        <label for="<?php echo htmlspecialchars($path) ?>"><?php echo $name ?></label>        <?php if (!empty($opts['doc']) || !empty($opts['wiki'])) { ?>        <span class="doc">            <?php if (!empty($opts['doc'])) { ?><a href="<?php echo $base_dir . $opts['doc']  ?>" target="documentation"><?php echo $icons['help']; ?></a><?php } ?>            <?php if (!empty($opts['wiki'])){ ?><a href="<?php echo $opts['wiki'] ?>" target="wiki"><?php echo $icons['info']; ?></a><?php } ?>        </span>        <?php } ?>        <?php if ($option_is_disabled) { ?>            <span class="disabled-notice" title="<?php echo __('This setting is disabled, it will not be applied to your configuration') ?>"><?php echo __('Disabled') ?></span>        <?php } ?>        <?php if (!empty($description)) { ?><small><?php echo $description ?></small><?php } ?>    </th>    <td>    <?php    switch ($type) {        case 'text':            echo '<input type="text" size="60" ' . $name_id . $field_class                . ' value="' . htmlspecialchars($value) . '" />';          break;        case 'short_text':            echo '<input type="text" size="25" ' . $name_id . $field_class                . ' value="' . htmlspecialchars($value) . '" />';          break;        case 'number_text':            echo '<input type="text" size="15" ' . $name_id . $field_class                . ' value="' . htmlspecialchars($value) . '" />';          break;        case 'checkbox':            echo '<span' . $field_class . '><input type="checkbox" ' . $name_id              . ($value ? ' checked="checked"' : '') . ' /></span>';          break;        case 'select':            echo '<select ' . $name_id . $field_class . '>';            $escape = !(isset($opts['values_escaped']) && $opts['values_escaped']);            $values_disabled = isset($opts['values_disabled'])                ? array_flip($opts['values_disabled']) : array();            foreach ($opts['values'] as $opt_value_key => $opt_value) {                // set names for boolean values                if (is_bool($opt_value)) {                    $opt_value = strtolower($opt_value ? __('Yes') : __('No'));                }                // escape if necessary                if ($escape) {                    $display = htmlspecialchars($opt_value);                    $display_value = htmlspecialchars($opt_value_key);                } else {                    $display = $opt_value;                    $display_value = $opt_value_key;                }                // compare with selected value                // boolean values are cast to integers when used as array keys                $selected = is_bool($value)                    ? (int) $value === $opt_value_key                    : $opt_value_key === $value;                echo '<option value="' . $display_value . '"'                    . ($selected ? ' selected="selected"' : '')                    . (isset($values_disabled[$opt_value_key]) ? ' disabled="disabled"' : '')                    . '>' . $display . '</option>';            }            echo '</select>';            break;        case 'list':            echo '<textarea cols="40" rows="5" ' . $name_id . $field_class . '>'                . htmlspecialchars(implode("\n", $value))                . '</textarea>';            break;    }    if (isset($opts['comment']) && $opts['comment']) {        $class = 'field-comment-mark';        if (isset($opts['comment_warning']) && $opts['comment_warning']) {            $class .= ' field-comment-warning';        }        ?>        <span class="<?php echo $class ?>" title="<?php echo htmlspecialchars($opts['comment']) ?>">i</span>        <?php    }    if ($is_setup_script && isset($opts['userprefs_comment']) && $opts['userprefs_comment']) {        ?>        <a class="userprefs-comment" title="<?php echo htmlspecialchars($opts['userprefs_comment']) ?>"><?php echo $icons['tblops']; ?></a>        <?php    }    if (isset($opts['setvalue']) && $opts['setvalue']) {        ?>        <a class="set-value" href="#<?php echo htmlspecialchars("$path={$opts['setvalue']}") ?>" title="<?php echo sprintf(__('Set value: %s'), htmlspecialchars($opts['setvalue'])) ?>" style="display:none"><?php echo $icons['edit']; ?></a>        <?php    }    if (isset($opts['show_restore_default']) && $opts['show_restore_default']) {        ?>        <a class="restore-default" href="#<?php echo $path ?>" title="<?php echo __('Restore default value') ?>" style="display:none"><?php echo $icons['reload']; ?></a>        <?php    }    // this must match with displayErrors() in scripts/config.js    if ($has_errors) {        echo "\n        <dl class=\"inline_errors\">";        foreach ($opts['errors'] as $error) {            echo '<dd>' . htmlspecialchars($error) . '</dd>';        }        echo '</dl>';    }    ?>    </td>    <?php    if ($is_setup_script && isset($opts['userprefs_allow'])) {    ?>    <td class="userprefs-allow" title="<?php echo __('Allow users to customize this value') ?>">        <input type="checkbox" name="<?php echo $path ?>-userprefs-allow" <?php if ($opts['userprefs_allow']) echo 'checked="checked"' ?> />    </td>    <?php    } else if ($is_setup_script) {        echo '<td>&nbsp;</td>';    }    ?></tr><?php}/** * Display group header * * @param string $header_text */function display_group_header($header_text){    global $_FormDisplayGroup;    $_FormDisplayGroup++;    if (!$header_text) {        return;    }    $colspan = defined('PMA_SETUP')        ? 3        : 2;?><tr class="group-header group-header-<?php echo $_FormDisplayGroup ?>">    <th colspan="<?php echo $colspan ?>">        <?php echo $header_text ?>    </th></tr><?php}/** * Display group footer * */function display_group_footer(){    global $_FormDisplayGroup;    $_FormDisplayGroup--;}/** * Displays bottom part of a fieldset */function display_fieldset_bottom(){    $colspan = 2;    if (defined('PMA_SETUP')) {        $colspan++;    }?><tr>    <td colspan="<?php echo $colspan ?>" class="lastrow">        <input type="submit" name="submit_save" value="<?php echo __('Save') ?>" class="green" />        <input type="button" name="submit_reset" value="<?php echo __('Reset') ?>" />    </td></tr></table></fieldset><?php}/** * Displays simple bottom part of a fieldset (without submit buttons) */function display_fieldset_bottom_simple(){?></table></fieldset><?php}/** * Closes form tabs */function display_tabs_bottom(){    echo "</div>\n";}/** * Displays bottom part of the form */function display_form_bottom(){    echo "</form>\n";}/** * Appends JS validation code to $js_array * * @param string       $field_id * @param string|array $validator * @param array        $js_array */function js_validate($field_id, $validators, &$js_array){    foreach ((array)$validators as $validator) {        $validator = (array)$validator;        $v_name = array_shift($validator);        $v_args = array();        foreach ($validator as $arg) {            $v_args[] = PMA_escapeJsString($arg);        }        $v_args = $v_args ? ", ['" . implode("', '", $v_args) . "']" : '';        $js_array[] = "validateField('$field_id', '$v_name', true$v_args)";    }}/** * Displays JavaScript code * * @param array $js_array */function display_js($js_array){    if (empty($js_array)) {        return;    }?><script type="text/javascript"><?php echo implode(";\n", $js_array) . ";\n" ?></script><?php}/** * Displays error list * * @param string $name * @param array  $error_list */function display_errors($name, $error_list){    echo '<dl>';    echo '<dt>' . htmlspecialchars($name) . '</dt>';    foreach ($error_list as $error) {        echo '<dd>' . htmlspecialchars($error) . '</dd>';    }    echo '</dl>';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__formatted_info(){    return array(        'info' => __('Displays the contents of the column as-is, without running it through htmlspecialchars(). That is, the column is assumed to contain valid HTML.'),        );}/** * */function PMA_transformation_text_plain__formatted($buffer, $options = array(), $meta = ''){    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library for extracting information about the available storage engines * * @package PhpMyAdmin *//** * defines */define('PMA_ENGINE_SUPPORT_NO', 0);define('PMA_ENGINE_SUPPORT_DISABLED', 1);define('PMA_ENGINE_SUPPORT_YES', 2);define('PMA_ENGINE_SUPPORT_DEFAULT', 3);define('PMA_ENGINE_DETAILS_TYPE_PLAINTEXT', 0);define('PMA_ENGINE_DETAILS_TYPE_SIZE',      1);define('PMA_ENGINE_DETAILS_TYPE_NUMERIC',   2); //Has no effect yet...define('PMA_ENGINE_DETAILS_TYPE_BOOLEAN',   3); // 'ON' or 'OFF'/** * base Storage Engine Class * @package PhpMyAdmin */class PMA_StorageEngine{    /**     * @var string engine name     */    var $engine  = 'dummy';    /**     * @var string engine title/description     */    var $title   = 'PMA Dummy Engine Class';    /**     * @var string engine lang description     */    var $comment = 'If you read this text inside phpMyAdmin, something went wrong...';    /**     * @var integer engine supported by current server     */    var $support = PMA_ENGINE_SUPPORT_NO;    /**     * returns array of storage engines     *     * @static     * @staticvar array $storage_engines storage engines     * @access  public     * @return  array    of storage engines     */    static public function getStorageEngines()    {        static $storage_engines = null;        if (null == $storage_engines) {            if (PMA_DRIZZLE) {                $sql = "SELECT                        p.plugin_name            AS Engine,                        (CASE                            WHEN p.plugin_name = @@storage_engine THEN 'DEFAULT'                            WHEN p.is_active THEN 'YES'                            ELSE 'DISABLED' END) AS Support,                        m.module_description     AS Comment                    FROM data_dictionary.plugins p                        JOIN data_dictionary.modules m USING (module_name)                    WHERE p.plugin_type = 'StorageEngine'                        AND p.plugin_name NOT IN ('FunctionEngine', 'schema')";                $storage_engines = PMA_DBI_fetch_result($sql, 'Engine');            } else {                $storage_engines = PMA_DBI_fetch_result('SHOW STORAGE ENGINES', 'Engine');            }        }        return $storage_engines;    }    /**     * returns HTML code for storage engine select box     *     * @param string  $name                    The name of the select form element     * @param string  $id                      The ID of the form field     * @param string  $selected                The selected engine     * @param boolean $offerUnavailableEngines Should unavailable storage engines be offered?     *     * @static     * @return  string  html selectbox     */    static public function getHtmlSelect($name = 'engine', $id = null,      $selected = null, $offerUnavailableEngines = false)    {        $selected   = strtolower($selected);        $output     = '<select name="' . $name . '"'            . (empty($id) ? '' : ' id="' . $id . '"') . '>' . "\n";        foreach (PMA_StorageEngine::getStorageEngines() as $key => $details) {            // Don't show PERFORMANCE_SCHEMA engine (MySQL 5.5)            // Don't show MyISAM for Drizzle (allowed only for temporary tables)            if (! $offerUnavailableEngines                && ($details['Support'] == 'NO'                || $details['Support'] == 'DISABLED'                || $details['Engine'] == 'PERFORMANCE_SCHEMA')                || (PMA_DRIZZLE && $details['Engine'] == 'MyISAM')            ) {                continue;            }            $output .= '    <option value="' . htmlspecialchars($key). '"'                . (empty($details['Comment'])                    ? '' : ' title="' . htmlspecialchars($details['Comment']) . '"')                . (strtolower($key) == $selected || (empty($selected) && $details['Support'] == 'DEFAULT')                    ? ' selected="selected"' : '') . '>' . "\n"                . '        ' . htmlspecialchars($details['Engine']) . "\n"                . '    </option>' . "\n";        }        $output .= '</select>' . "\n";        return $output;    }    /**     * public static final PMA_StorageEngine getEngine()     *     * Loads the corresponding engine plugin, if available.     *     * @param string $engine The engine ID     *     * @return  object  The engine plugin     */    static public function getEngine($engine)    {        $engine = str_replace('/', '', str_replace('.', '', $engine));        $engine_lowercase_filename = strtolower($engine);        if (file_exists('./libraries/engines/' . $engine_lowercase_filename . '.lib.php')            && include_once './libraries/engines/' . $engine_lowercase_filename . '.lib.php'        ) {            $class_name = 'PMA_StorageEngine_' . $engine;            $engine_object = new $class_name($engine);        } else {            $engine_object = new PMA_StorageEngine($engine);        }        return $engine_object;    }    /**     * return true if given engine name is supported/valid, otherwise false     *     * @param string $engine name of engine     *     * @static     * @return  boolean whether $engine is valid or not     */    static public function isValid($engine)    {        if ($engine == "PBMS") {            return true;        }        $storage_engines = PMA_StorageEngine::getStorageEngines();        return isset($storage_engines[$engine]);    }    /**     * returns as HTML table of the engine's server variables     *     * @return string The table that was generated based on the retrieved information     */    function getHtmlVariables()    {        $odd_row    = false;        $ret        = '';        foreach ($this->getVariablesStatus() as $details) {            $ret .= '<tr class="' . ($odd_row ? 'odd' : 'even') . '">' . "\n"                  . '    <td>' . "\n";            if (! empty($details['desc'])) {                $ret .= '        ' . PMA_showHint($details['desc']) . "\n";            }            $ret .= '    </td>' . "\n"                  . '    <th>' . htmlspecialchars($details['title']) . '</th>' . "\n"                  . '    <td class="value">';            switch ($details['type']) {            case PMA_ENGINE_DETAILS_TYPE_SIZE:                $parsed_size = $this->resolveTypeSize($details['value']);                $ret .= $parsed_size[0] . '&nbsp;' . $parsed_size[1];                unset($parsed_size);                break;            case PMA_ENGINE_DETAILS_TYPE_NUMERIC:                $ret .= PMA_formatNumber($details['value']) . ' ';                break;            default:                $ret .= htmlspecialchars($details['value']) . '   ';            }            $ret .= '</td>' . "\n"                  . '</tr>' . "\n";            $odd_row = ! $odd_row;        }        if (! $ret) {            $ret = '<p>' . "\n"                 . '    ' . __('There is no detailed status information available for this storage engine.') . "\n"                 . '</p>' . "\n";        } else {            $ret = '<table class="data">' . "\n" . $ret . '</table>' . "\n";        }        return $ret;    }    /**     * returns the engine specific handling for     * PMA_ENGINE_DETAILS_TYPE_SIZE type variables.     *     * This function should be overridden when     * PMA_ENGINE_DETAILS_TYPE_SIZE type needs to be     * handled differently for a particular engine.     *     * @return string the formatted value and its unit     */    function resolveTypeSize($value)    {        return PMA_formatByteDown($value);    }    /**     * returns array with detailed info about engine specific server variables     *     * @return  array   with detailed info about specific engine server variables     */    function getVariablesStatus()    {        $variables = $this->getVariables();        $like = $this->getVariablesLikePattern();        if ($like) {            $like = " LIKE '" . $like . "' ";        } else {            $like = '';        }        $mysql_vars = array();        $sql_query = 'SHOW GLOBAL VARIABLES ' . $like . ';';        $res = PMA_DBI_query($sql_query);        while ($row = PMA_DBI_fetch_assoc($res)) {            if (isset($variables[$row['Variable_name']])) {                $mysql_vars[$row['Variable_name']] = $variables[$row['Variable_name']];            } elseif (! $like             && strpos(strtolower($row['Variable_name']), strtolower($this->engine)) !== 0) {                continue;            }            $mysql_vars[$row['Variable_name']]['value'] = $row['Value'];            if (empty($mysql_vars[$row['Variable_name']]['title'])) {                $mysql_vars[$row['Variable_name']]['title'] = $row['Variable_name'];            }            if (! isset($mysql_vars[$row['Variable_name']]['type'])) {                $mysql_vars[$row['Variable_name']]['type'] = PMA_ENGINE_DETAILS_TYPE_PLAINTEXT;            }        }        PMA_DBI_free_result($res);        return $mysql_vars;    }    function engine_init() {}    /**     * Constructor     *     * @param string $engine The engine ID     */    function __construct($engine)    {        $storage_engines = PMA_StorageEngine::getStorageEngines();        if (! empty($storage_engines[$engine])) {            $this->engine  = $engine;            $this->title   = $storage_engines[$engine]['Engine'];            $this->comment                = (isset($storage_engines[$engine]['Comment'])                    ? $storage_engines[$engine]['Comment']                    : '');            switch ($storage_engines[$engine]['Support']) {            case 'DEFAULT':                $this->support = PMA_ENGINE_SUPPORT_DEFAULT;                break;            case 'YES':                $this->support = PMA_ENGINE_SUPPORT_YES;                break;            case 'DISABLED':                $this->support = PMA_ENGINE_SUPPORT_DISABLED;                break;            case 'NO':            default:                $this->support = PMA_ENGINE_SUPPORT_NO;            }        } else {            $this->engine_init();        }    }    /**     * public String getTitle()     *     * Reveals the engine's title     *     * @return string The title     */    function getTitle()    {        return $this->title;    }    /**     * public String getComment()     *     * Fetches the server's comment about this engine     *     * @return string The comment     */    function getComment()    {        return $this->comment;    }    /**     * public String getSupportInformationMessage()     *     * @return  string   The localized message.     */    function getSupportInformationMessage()    {        switch ($this->support) {        case PMA_ENGINE_SUPPORT_DEFAULT:            $message = __('%s is the default storage engine on this MySQL server.');            break;        case PMA_ENGINE_SUPPORT_YES:            $message = __('%s is available on this MySQL server.');            break;        case PMA_ENGINE_SUPPORT_DISABLED:            $message = __('%s has been disabled for this MySQL server.');            break;        case PMA_ENGINE_SUPPORT_NO:        default:            $message = __('This MySQL server does not support the %s storage engine.');        }        return sprintf($message, htmlspecialchars($this->title));    }    /**     * public string[][] getVariables()     *     * Generates a list of MySQL variables that provide information about this     * engine. This function should be overridden when extending this class     * for a particular engine.     *     * @abstract     * @return   Array   The list of variables.     */    function getVariables()    {        return array();    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return $this->engine . '-storage-engine';    }    /**     * public string getVariablesLikePattern()     *     * @abstract     * @return  string  SQL query LIKE pattern     */    function getVariablesLikePattern()    {        return false;    }    /**     * public String[] getInfoPages()     *     * Returns a list of available information pages with labels     *     * @abstract     * @return  array    The list     */    function getInfoPages()    {        return array();    }    /**     * public String getPage()     *     * Generates the requested information page     *     * @param string $id The page ID     *     * @abstract     * @return  string      The page     *          boolean     or false on error.     */    function getPage($id)    {        return false;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * This class is inherited by all schema classes * It contains those methods which are common in them * it works like factory pattern */class PMA_Export_Relation_Schema{    private $_pageTitle;    public $showGrid;    public $showColor;    public $tableDimension;    public $sameWide;    public $withDoc;    public $showKeys;    public $orientation;    public $paper;    public $pageNumber;    /**     * Set Page Number     *     * @param integer $value Page Number of the document to be created     *     * @return void     *     * @access public     */    public function setPageNumber($value)    {        $this->pageNumber = isset($value) ? $value : 1;    }    /**     * Set Show Grid     *     * @param boolean $value show grid of the document or not     *     * @return void     *     * @access public     */    public function setShowGrid($value)    {        $this->showGrid = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Sets showColor     *     * @param string $value 'on' to set the the variable     *     * @return nothing     */    public function setShowColor($value)    {        $this->showColor = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Set Table Dimension     *     * @param boolean $value show table co-ordinates or not     *     * @return void     *     * @access public     */    public function setTableDimension($value)    {        $this->tableDimension = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Set same width of All Tables     *     * @param boolean $value set same width of all tables or not     *     * @return void     *     * @access public     */    public function setAllTableSameWidth($value)    {        $this->sameWide = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Set Data Dictionary     *     * @param boolean $value show selected database data dictionary or not     *     * @return void     *     * @access public     */    public function setWithDataDictionary($value)    {        $this->withDoc = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Set Show only keys     *     * @param boolean $value show only keys or not     *     * @return void     *     * @access public     */    public function setShowKeys($value)    {        $this->showKeys = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Set Orientation     *     * @param string $value Orientation will be portrait or landscape     *     * @return void     *     * @access public     */    public function setOrientation($value)    {        $this->orientation = (isset($value) && $value == 'P') ? 'P' : 'L';    }    /**     * Set type of paper     *     * @param string $value paper type can be A4 etc     *     * @return void     *     * @access public     */    public function setPaper($value)    {        $this->paper = isset($value) ? $value : 'A4';    }    /**     * Set title of the page     *     * @param string $title title of the page displayed at top of the document     *     * @return void     *     * @access public     */    public function setPageTitle($title)    {        $this->_pageTitle=$title;    }    /**     * Set type of export relational schema     *     * @param string $value can be pdf,svg,dia,visio,eps etc     *     * @return void     *     * @access public     */    public function setExportType($value)    {        $this->exportType=$value;    }    /**     * get all tables involved or included in page     *     * @param string  $db         name of the database     * @param integer $pageNumber page no. whose tables will be fetched in an array     *     * @return Array an array of tables     *     * @access public     */    public function getAllTables($db, $pageNumber)    {        global $cfgRelation;         // Get All tables        $tab_sql = 'SELECT table_name FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['table_coords'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND pdf_page_number = ' . $pageNumber;        $tab_rs = PMA_query_as_controluser($tab_sql, null, PMA_DBI_QUERY_STORE);        if (!$tab_rs || !PMA_DBI_num_rows($tab_rs) > 0) {            $this->dieSchema('', __('This page does not contain any tables!'));        }        while ($curr_table = @PMA_DBI_fetch_assoc($tab_rs)) {            $alltables[] = PMA_sqlAddSlashes($curr_table['table_name']);        }        return $alltables;    }    /**     * Displays an error message     *     * @param integer $pageNumber    ID of the chosen page     * @param string  $type          Schema Type     * @param string  $error_message The error mesage     *     * @global array    the PMA configuration array     * @global string   the current database name     *     * @access public     *     * @return void     */    function dieSchema($pageNumber, $type = '', $error_message = '')    {        global $cfg;        global $db;        include_once './libraries/header.inc.php';        echo "<p><strong>" . __("SCHEMA ERROR: ") .  $type . "</strong></p>" . "\n";        if (!empty($error_message)) {            $error_message = htmlspecialchars($error_message);        }        echo '<p>' . "\n";        echo '    ' . $error_message . "\n";        echo '</p>' . "\n";        echo '<a href="schema_edit.php?' . PMA_generate_common_url($db)            . '&do=selectpage&chpage=' . $pageNumber . '&action_choose=0'            . '">' . __('Back') . '</a>';        echo "\n";        include_once './libraries/footer.inc.php';        exit();    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handle field values (possibly uploaded from a file) * * original if-clause checked, whether input was stored in a possible * fields_upload_XX var. Now check, if the field is set. If it is empty or a * malicious file, do not alter fields contents. If an empty or invalid file is * specified, the binary data gets deleter. Maybe a nice new text-variable is * appropriate to document this behaviour. * * security cautions! You could trick the form and submit any file the * webserver has access to for upload to a binary field. Shouldn't be that easy! ;) * * default is to advance to the field-value parsing. Will only be set to * true when a binary file is uploaded, thus bypassing further manipulation of $val. * * note: grab_globals has extracted the fields from _FILES or HTTP_POST_FILES * * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * do not import request variable into global scope */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/File.class.php';$file_to_insert = new PMA_File();$file_to_insert->checkTblChangeForm($key, $rownumber);$possibly_uploaded_val = $file_to_insert->getContent();if ($file_to_insert->isError()) {    $message .= $file_to_insert->getError();}$file_to_insert->cleanUp();if (false !== $possibly_uploaded_val) {    $val = $possibly_uploaded_val;} else {    // f i e l d    v a l u e    i n    t h e    f o r m    if (isset($me_fields_type[$key])) {        $type = $me_fields_type[$key];    } else {        $type = '';    }    // $key contains the md5() of the fieldname    if ($type != 'protected' && $type != 'set' && 0 === strlen($val)) {        // best way to avoid problems in strict mode (works also in non-strict mode)        if (isset($me_auto_increment)  && isset($me_auto_increment[$key])) {            $val = 'NULL';        } else {            $val = "''";        }    } elseif ($type == 'set') {        if (! empty($_REQUEST['fields']['multi_edit'][$rownumber][$key])) {            $val = implode(',', $_REQUEST['fields']['multi_edit'][$rownumber][$key]);            $val = "'" . PMA_sqlAddSlashes($val) . "'";        } else {             $val = "''";        }    } elseif ($type == 'protected') {        // here we are in protected mode (asked in the config)        // so tbl_change has put this special value in the        // fields array, so we do not change the field value        // but we can still handle field upload        // when in UPDATE mode, do not alter field's contents. When in INSERT        // mode, insert empty field because no values were submitted. If protected        // blobs where set, insert original fields content.            if (! empty($prot_row[$me_fields_name[$key]])) {                $val = '0x' . bin2hex($prot_row[$me_fields_name[$key]]);            } else {                $val = '';            }    } elseif ($type == 'bit') {        $val = preg_replace('/[^01]/', '0', $val);        $val = "b'" . PMA_sqlAddSlashes($val) . "'";    } elseif (! (($type == 'datetime' || $type == 'timestamp') && $val == 'CURRENT_TIMESTAMP')) {        $val = "'" . PMA_sqlAddSlashes($val) . "'";    }    // Was the Null checkbox checked for this field?    // (if there is a value, we ignore the Null checkbox: this could    // be possible if Javascript is disabled in the browser)    if (! empty($me_fields_null[$key])     && ($val == "''" || $val == '')) {        $val = 'NULL';    }    // The Null checkbox was unchecked for this field    if (empty($val) && ! empty($me_fields_null_prev[$key]) && ! isset($me_fields_null[$key])) {        $val = "''";    }}  // end else (field value in the form)unset($type);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * CSV import plugin for phpMyAdmin using LOAD DATA * * @package PhpMyAdmin-Import * @subpackage LDI */if (! defined('PHPMYADMIN')) {    exit;}/** * */if ($plugin_param !== 'table') {    return;}if (isset($plugin_list)) {    if ($GLOBALS['cfg']['Import']['ldi_local_option'] == 'auto') {        $GLOBALS['cfg']['Import']['ldi_local_option'] = false;        $result = PMA_DBI_try_query('SHOW VARIABLES LIKE \'local\\_infile\';');        if ($result != false && PMA_DBI_num_rows($result) > 0) {            $tmp = PMA_DBI_fetch_row($result);            if ($tmp[1] == 'ON') {                $GLOBALS['cfg']['Import']['ldi_local_option'] = true;            }        }        PMA_DBI_free_result($result);        unset($result);    }    $plugin_list['ldi'] = array(        'text' => __('CSV using LOAD DATA'),        'extension' => 'ldi', // This is nonsense, however we want to default to our parser for csv        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'replace', 'text' => __('Replace table data with file')),            array('type' => 'bool', 'name' => 'ignore', 'text' => __('Do not abort on INSERT error')),            array('type' => 'text', 'name' => 'terminated', 'text' => __('Columns terminated by'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'enclosed', 'text' => __('Columns enclosed by'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'escaped', 'text' => __('Columns escaped by'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'new_line', 'text' => __('Lines terminated by'), 'size' => 2),            array('type' => 'text', 'name' => 'columns', 'text' => __('Column names')),            array('type' => 'bool', 'name' => 'local_option', 'text' => __('Use LOCAL keyword')),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );    /* We do not define function when plugin is just queried for information above */    return;}if ($import_file == 'none' || $compression != 'none' || $charset_conversion) {    // We handle only some kind of data!    $message = PMA_Message::error(__('This plugin does not support compressed imports!'));    $error = true;    return;}$sql = 'LOAD DATA';if (isset($ldi_local_option)) {    $sql .= ' LOCAL';}$sql .= ' INFILE \'' . PMA_sqlAddSlashes($import_file) . '\'';if (isset($ldi_replace)) {    $sql .= ' REPLACE';} elseif (isset($ldi_ignore)) {    $sql .= ' IGNORE';}$sql .= ' INTO TABLE ' . PMA_backquote($table);if (strlen($ldi_terminated) > 0) {    $sql .= ' FIELDS TERMINATED BY \'' . $ldi_terminated . '\'';}if (strlen($ldi_enclosed) > 0) {    $sql .= ' ENCLOSED BY \'' . PMA_sqlAddSlashes($ldi_enclosed) . '\'';}if (strlen($ldi_escaped) > 0) {    $sql .= ' ESCAPED BY \'' . PMA_sqlAddSlashes($ldi_escaped) . '\'';}if (strlen($ldi_new_line) > 0) {    if ($ldi_new_line == 'auto') {        $ldi_new_line = PMA_whichCrlf() == "\n" ? '\n' : '\r\n';    }    $sql .= ' LINES TERMINATED BY \'' . $ldi_new_line . '\'';}if ($skip_queries > 0) {    $sql .= ' IGNORE ' . $skip_queries . ' LINES';    $skip_queries = 0;}if (strlen($ldi_columns) > 0) {    $sql .= ' (';    $tmp   = preg_split('/,( ?)/', $ldi_columns);    $cnt_tmp = count($tmp);    for ($i = 0; $i < $cnt_tmp; $i++) {        if ($i > 0) {            $sql .= ', ';        }        /* Trim also `, if user already included backquoted fields */        $sql     .= PMA_backquote(trim($tmp[$i], " \t\r\n\0\x0B`"));    } // end for    $sql .= ')';}PMA_importRunQuery($sql, $sql);PMA_importRunQuery();$finished = true;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin *//** * Run common work */require_once './libraries/common.inc.php';//Get some js files needed for Ajax requests$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'db_structure.js';/** * If we are not in an Ajax request, then do the common work and show the links etc. */if ($GLOBALS['is_ajax_request'] != true) {    include './libraries/db_common.inc.php';}$url_query .= '&amp;goto=tbl_tracking.php&amp;back=db_tracking.php';// Get the database structure$sub_part = '_structure';require './libraries/db_info.inc.php';// Work to do?//  (here, do not use $_REQUEST['db] as it can be crafted)if (isset($_REQUEST['delete_tracking']) && isset($_REQUEST['table'])) {    PMA_Tracker::deleteTracking($GLOBALS['db'], $_REQUEST['table']);    /**     * If in an Ajax request, generate the success message and use     * {@link PMA_ajaxResponse()} to send the output     */    if ($GLOBALS['is_ajax_request'] == true) {        $message = PMA_Message::success();        PMA_ajaxResponse($message, true);    }}// Get tracked data about the database$data = PMA_Tracker::getTrackedData($_REQUEST['db'], '', '1');// No tables present and no log existif ($num_tables == 0 && count($data['ddlog']) == 0) {    echo '<p>' . __('No tables found in database.') . '</p>' . "\n";    if (empty($db_is_information_schema)) {        include './libraries/display_create_table.lib.php';    }    // Display the footer    include './libraries/footer.inc.php';    exit;}// ---------------------------------------------------------------------------/* * Display top menu links */require_once './libraries/db_links.inc.php';// Prepare statement to get HEAD version$all_tables_query = ' SELECT table_name, MAX(version) as version FROM ' .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . '.' .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             ' WHERE db_name = \'' . PMA_sqlAddSlashes($_REQUEST['db']) . '\' ' .             ' GROUP BY table_name' .             ' ORDER BY table_name ASC';$all_tables_result = PMA_query_as_controluser($all_tables_query);// If a HEAD version existsif (PMA_DBI_num_rows($all_tables_result) > 0) {?>    <div id="tracked_tables">    <h3><?php echo __('Tracked tables');?></h3>    <table id="versions" class="data">    <thead>    <tr>        <th><?php echo __('Database');?></th>        <th><?php echo __('Table');?></th>        <th><?php echo __('Last version');?></th>        <th><?php echo __('Created');?></th>        <th><?php echo __('Updated');?></th>        <th><?php echo __('Status');?></th>        <th><?php echo __('Action');?></th>        <th><?php echo __('Show');?></th>    </tr>    </thead>    <tbody>    <?php    // Print out information about versions    $drop_image_or_text = '';    if (true == $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= PMA_getImage('b_drop.png', __('Delete tracking data for this table'));    }    if ('both' === $GLOBALS['cfg']['PropertiesIconic'] || false === $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= __('Drop');    }    $style = 'odd';    while ($one_result = PMA_DBI_fetch_array($all_tables_result)) {        list($table_name, $version_number) = $one_result;        $table_query = ' SELECT * FROM ' .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . '.' .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             ' WHERE `db_name` = \'' . PMA_sqlAddSlashes($_REQUEST['db']) . '\' AND `table_name`  = \'' . PMA_sqlAddSlashes($table_name) . '\' AND `version` = \'' . $version_number . '\'';        $table_result = PMA_query_as_controluser($table_query);        $version_data = PMA_DBI_fetch_array($table_result);        if ($version_data['tracking_active'] == 1) {            $version_status = __('active');        } else {            $version_status = __('not active');        }        $tmp_link = 'tbl_tracking.php?' . $url_query . '&amp;table=' . htmlspecialchars($version_data['table_name']);        $delete_link = 'db_tracking.php?' . $url_query . '&amp;table=' . htmlspecialchars($version_data['table_name']) . '&amp;delete_tracking=true&amp';        ?>        <tr class="noclick <?php echo $style;?>">            <td><?php echo htmlspecialchars($version_data['db_name']);?></td>            <td><?php echo htmlspecialchars($version_data['table_name']);?></td>            <td><?php echo $version_data['version'];?></td>            <td><?php echo $version_data['date_created'];?></td>            <td><?php echo $version_data['date_updated'];?></td>            <td><?php echo $version_status;?></td>            <td><a <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="drop_tracking_anchor"' : ''); ?> href="<?php echo $delete_link;?>" ><?php echo $drop_image_or_text; ?></a></td>            <td> <a href="<?php echo $tmp_link; ?>"><?php echo __('Versions');?></a>               | <a href="<?php echo $tmp_link; ?>&amp;report=true&amp;version=<?php echo $version_data['version'];?>"><?php echo __('Tracking report');?></a>               | <a href="<?php echo $tmp_link; ?>&amp;snapshot=true&amp;version=<?php echo $version_data['version'];?>"><?php echo __('Structure snapshot');?></a></td>        </tr>        <?php        if ($style == 'even') {            $style = 'odd';        } else {            $style = 'even';        }    }    unset($tmp_link);    ?>    </tbody>    </table>    </div><?php}$sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];// Get list of tables$table_list = PMA_getTableList($GLOBALS['db']);// For each table try to get the tracking versionforeach ($table_list as $key => $value) {    // If $value is a table group.    if (array_key_exists(('is' . $sep . 'group'), $value) && $value['is' . $sep . 'group']) {        foreach ($value as $temp_table) {            // If $temp_table is a table with the value for 'Name' is set,            // rather than a propery of the table group.            if (is_array($temp_table) && array_key_exists('Name', $temp_table)) {                if (PMA_Tracker::getVersion($GLOBALS['db'], $temp_table['Name']) == -1) {                    $my_tables[] = $temp_table['Name'];                }            }        }    // If $value is a table.    } else {        if (PMA_Tracker::getVersion($GLOBALS['db'], $value['Name']) == -1) {            $my_tables[] = $value['Name'];        }    }}// If untracked tables existif (isset($my_tables)) {?>    <h3><?php echo __('Untracked tables');?></h3>    <table id="noversions" class="data">    <thead>    <tr>        <th width="300"><?php echo __('Table');?></th>        <th></th>    </tr>    </thead>    <tbody><?php    // Print out list of untracked tables    $style = 'odd';    foreach ($my_tables as $key => $tablename) {        if (PMA_Tracker::getVersion($GLOBALS['db'], $tablename) == -1) {            $my_link = '<a href="tbl_tracking.php?' . $url_query . '&amp;table=' . htmlspecialchars($tablename) .'">';            $my_link .= PMA_getIcon('eye.png', __('Track table')) . '</a>';        ?>            <tr class="noclick <?php echo $style;?>">            <td><?php echo htmlspecialchars($tablename);?></td>            <td><?php echo $my_link;?></td>            </tr>        <?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }        }    }    ?>    </tbody>    </table><?php}// If available print out database logif (count($data['ddlog']) > 0) {    $log = '';    foreach ($data['ddlog'] as $entry) {        $log .= '# ' . $entry['date'] . ' ' . $entry['username'] . "\n" . $entry['statement'] . "\n";    }    PMA_showMessage(__('Database Log'), $log);}/** * Display the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */$GLOBALS['unparsed_sql'] = $sql_query;$parsed_sql = PMA_SQP_parse($sql_query);$analyzed_sql = PMA_SQP_analyze($parsed_sql);// for bug 780516: now that we use case insensitive preg_match// or flags from the analyser, do not put back the reformatted query// into $sql_query, to make this kind of query work without// capitalizing keywords://// CREATE TABLE SG_Persons (//  id int(10) unsigned NOT NULL auto_increment,//  first varchar(64) NOT NULL default '',//  PRIMARY KEY  (`id`)// )// check for a real SELECT ... FROM$is_select = isset($analyzed_sql[0]['queryflags']['select_from']);// If the query is a Select, extract the db and table names and modify// $db and $table, to have correct page headers, links and left frame.// db and table name may be enclosed with backquotes, db is optionnal,// query may contain aliases./** * @todo if there are more than one table name in the Select: * - do not extract the first table name * - do not show a table name in the page header * - do not display the sub-pages links) */if ($is_select) {    $prev_db = $db;    if (isset($analyzed_sql[0]['table_ref'][0]['table_true_name'])) {        $table = $analyzed_sql[0]['table_ref'][0]['table_true_name'];    }    if (isset($analyzed_sql[0]['table_ref'][0]['db'])      && strlen($analyzed_sql[0]['table_ref'][0]['db'])) {        $db    = $analyzed_sql[0]['table_ref'][0]['db'];    } else {        $db = $prev_db;    }    // Nijel: don't change reload, if we already decided to reload in import    if (empty($reload)) {        $reload  = ($db == $prev_db) ? 0 : 1;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Produce a PDF report (export) from a query * * @package PhpMyAdmin-Export * @subpackage PDF */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['pdf'] = array(        'text' => __('PDF'),        'extension' => 'pdf',        'mime_type' => 'application/pdf',        'force_file' => true,        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'message_only', 'name' => 'explanation', 'text' => __('(Generates a report containing the data of a single table)')),            array('type' => 'text', 'name' => 'report_title', 'text' => __('Report title:')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );} else {    include_once './libraries/PDF.class.php';    /**     * Adapted from a LGPL script by Philip Clarke     * @package PhpMyAdmin-Export     * @subpackage PDF     */    class PMA_Export_PDF extends PMA_PDF    {        var $tablewidths;        var $headerset;        function checkPageBreak($h = 0, $y = '', $addpage = true)        {            if ($this->empty_string($y)) {                $y = $this->y;            }            $current_page = $this->page;            if ((($y + $h) > $this->PageBreakTrigger) AND (! $this->InFooter) AND ($this->AcceptPageBreak())) {                if ($addpage) {                    //Automatic page break                    $x = $this->x;                    $this->AddPage($this->CurOrientation);                    $this->y = $this->dataY;                    $oldpage = $this->page - 1;                    if ($this->rtl) {                        if ($this->pagedim[$this->page]['orm'] != $this->pagedim[$oldpage]['orm']) {                            $this->x = $x - ($this->pagedim[$this->page]['orm'] - $this->pagedim[$oldpage]['orm']);                        } else {                            $this->x = $x;                        }                    } else {                        if ($this->pagedim[$this->page]['olm'] != $this->pagedim[$oldpage]['olm']) {                            $this->x = $x + ($this->pagedim[$this->page]['olm'] - $this->pagedim[$oldpage]['olm']);                        } else {                            $this->x = $x;                        }                    }                }                return true;            }            if ($current_page != $this->page) {                // account for columns mode                return true;            }            return false;        }        function Header()        {            global $maxY;            // Check if header for this page already exists            if (! isset($this->headerset[$this->page])) {                $fullwidth = 0;                foreach ($this->tablewidths as $width) {                    $fullwidth += $width;                }                $this->SetY(($this->tMargin) - ($this->FontSizePt / $this->k) * 5);                $this->cellFontSize = $this->FontSizePt ;                $this->SetFont(PMA_PDF_FONT, '', ($this->titleFontSize ? $this->titleFontSize : $this->FontSizePt));                $this->Cell(0, $this->FontSizePt, $this->titleText, 0, 1, 'C');                $this->SetFont(PMA_PDF_FONT, '', $this->cellFontSize);                $this->SetY(($this->tMargin) - ($this->FontSizePt / $this->k) * 2.5);                $this->Cell(                    0, $this->FontSizePt,                    __('Database') . ': ' . $this->currentDb . ',  ' . __('Table') . ': ' . $this->currentTable,                    0, 1, 'L'                );                $l = ($this->lMargin);                foreach ($this->colTitles as $col => $txt) {                    $this->SetXY($l, ($this->tMargin));                    $this->MultiCell($this->tablewidths[$col], $this->FontSizePt, $txt);                    $l += $this->tablewidths[$col] ;                    $maxY = ($maxY < $this->getY()) ? $this->getY() : $maxY ;                }                $this->SetXY($this->lMargin, $this->tMargin);                $this->setFillColor(200, 200, 200);                $l = ($this->lMargin);                foreach ($this->colTitles as $col => $txt) {                    $this->SetXY($l, $this->tMargin);                    $this->cell($this->tablewidths[$col], $maxY-($this->tMargin), '', 1, 0, 'L', 1);                    $this->SetXY($l, $this->tMargin);                    $this->MultiCell($this->tablewidths[$col], $this->FontSizePt, $txt, 0, 'C');                    $l += $this->tablewidths[$col];                }                $this->setFillColor(255, 255, 255);                // set headerset                $this->headerset[$this->page] = 1;            }            $this->dataY = $maxY;        }        function morepagestable($lineheight=8)        {            // some things to set and 'remember'            $l = $this->lMargin;            $startheight = $h = $this->dataY;            $startpage = $currpage = $this->page;            // calculate the whole width            $fullwidth = 0;            foreach ($this->tablewidths as $width) {                $fullwidth += $width;            }            // Now let's start to write the table            $row = 0;            $tmpheight = array();            $maxpage = $this->page;            while ($data = PMA_DBI_fetch_row($this->results)) {                $this->page = $currpage;                // write the horizontal borders                $this->Line($l, $h, $fullwidth+$l, $h);                // write the content and remember the height of the highest col                foreach ($data as $col => $txt) {                    $this->page = $currpage;                    $this->SetXY($l, $h);                    if ($this->tablewidths[$col] > 0) {                        $this->MultiCell($this->tablewidths[$col], $lineheight, $txt, 0, $this->colAlign[$col]);                        $l += $this->tablewidths[$col];                    }                    if (!isset($tmpheight[$row.'-'.$this->page])) {                        $tmpheight[$row.'-'.$this->page] = 0;                    }                    if ($tmpheight[$row.'-'.$this->page] < $this->GetY()) {                        $tmpheight[$row.'-'.$this->page] = $this->GetY();                    }                    if ($this->page > $maxpage) {                        $maxpage = $this->page;                    }                    unset($data[$col]);                }                // get the height we were in the last used page                $h = $tmpheight[$row.'-'.$maxpage];                // set the "pointer" to the left margin                $l = $this->lMargin;                // set the $currpage to the last page                $currpage = $maxpage;                unset($data[$row]);                $row++;            }            // draw the borders            // we start adding a horizontal line on the last page            $this->page = $maxpage;            $this->Line($l, $h, $fullwidth+$l, $h);            // now we start at the top of the document and walk down            for ($i = $startpage; $i <= $maxpage; $i++) {                $this->page = $i;                $l = $this->lMargin;                $t = ($i == $startpage) ? $startheight : $this->tMargin;                $lh = ($i == $maxpage) ? $h : $this->h-$this->bMargin;                $this->Line($l, $t, $l, $lh);                foreach ($this->tablewidths as $width) {                    $l += $width;                    $this->Line($l, $t, $l, $lh);                }            }            // set it to the last page, if not it'll cause some problems            $this->page = $maxpage;        }        function setAttributes($attr = array())        {            foreach ($attr as $key => $val) {                $this->$key = $val ;            }        }        function setTopMargin($topMargin)        {            $this->tMargin = $topMargin;        }        function mysql_report($query)        {            unset($this->tablewidths);            unset($this->colTitles);            unset($this->titleWidth);            unset($this->colFits);            unset($this->display_column);            unset($this->colAlign);            /**             * Pass 1 for column widths             */            $this->results = PMA_DBI_query($query, null, PMA_DBI_QUERY_UNBUFFERED);            $this->numFields  = PMA_DBI_num_fields($this->results);            $this->fields = PMA_DBI_get_fields_meta($this->results);            // sColWidth = starting col width (an average size width)            $availableWidth = $this->w - $this->lMargin - $this->rMargin;            $this->sColWidth = $availableWidth / $this->numFields;            $totalTitleWidth = 0;            // loop through results header and set initial col widths/ titles/ alignment            // if a col title is less than the starting col width, reduce that column size            $colFits = array();            for ($i = 0; $i < $this->numFields; $i++) {                $stringWidth = $this->getstringwidth($this->fields[$i]->name) + 6 ;                // save the real title's width                $titleWidth[$i] = $stringWidth;                $totalTitleWidth += $stringWidth;                // set any column titles less than the start width to the column title width                if ($stringWidth < $this->sColWidth) {                    $colFits[$i] = $stringWidth ;                }                $this->colTitles[$i] = $this->fields[$i]->name;                $this->display_column[$i] = true;                switch ($this->fields[$i]->type) {                case 'int':                    $this->colAlign[$i] = 'R';                    break;                case 'blob':                case 'tinyblob':                case 'mediumblob':                case 'longblob':                    /**                     * @todo do not deactivate completely the display                     * but show the field's name and [BLOB]                     */                    if (stristr($this->fields[$i]->flags, 'BINARY')) {                        $this->display_column[$i] = false;                        unset($this->colTitles[$i]);                    }                    $this->colAlign[$i] = 'L';                    break;                default:                    $this->colAlign[$i] = 'L';                }            }            // title width verification            if ($totalTitleWidth > $availableWidth) {                $adjustingMode = true;            } else {                $adjustingMode = false;                // we have enough space for all the titles at their                // original width so use the true title's width                foreach ($titleWidth as $key => $val) {                    $colFits[$key] = $val;                }            }            // loop through the data; any column whose contents            // is greater than the column size is resized            /**              * @todo force here a LIMIT to avoid reading all rows              */            while ($row = PMA_DBI_fetch_row($this->results)) {                foreach ($colFits as $key => $val) {                    $stringWidth = $this->getstringwidth($row[$key]) + 6 ;                    if ($adjustingMode && ($stringWidth > $this->sColWidth)) {                        // any column whose data's width is bigger than                        // the start width is now discarded                        unset($colFits[$key]);                    } else {                        // if data's width is bigger than the current column width,                        // enlarge the column (but avoid enlarging it if the                        // data's width is very big)                        if ($stringWidth > $val && $stringWidth < ($this->sColWidth * 3)) {                            $colFits[$key] = $stringWidth ;                        }                    }                }            }            $totAlreadyFitted = 0;            foreach ($colFits as $key => $val) {                // set fitted columns to smallest size                $this->tablewidths[$key] = $val;                // to work out how much (if any) space has been freed up                $totAlreadyFitted += $val;            }            if ($adjustingMode) {                $surplus = (sizeof($colFits) * $this->sColWidth) - $totAlreadyFitted;                $surplusToAdd = $surplus / ($this->numFields - sizeof($colFits));            } else {                $surplusToAdd = 0;            }            for ($i=0; $i < $this->numFields; $i++) {                if (!in_array($i, array_keys($colFits))) {                    $this->tablewidths[$i] = $this->sColWidth + $surplusToAdd;                }                if ($this->display_column[$i] == false) {                    $this->tablewidths[$i] = 0;                }            }            ksort($this->tablewidths);            PMA_DBI_free_result($this->results);            // Pass 2            $this->results = PMA_DBI_query($query, null, PMA_DBI_QUERY_UNBUFFERED);            $this->setY($this->tMargin);            $this->AddPage();            $this->SetFont(PMA_PDF_FONT, '', 9);            $this->morepagestable($this->FontSizePt);            PMA_DBI_free_result($this->results);        } // end of mysql_report function    } // end of PMA_Export_PDF class    $pdf = new PMA_Export_PDF('L', 'pt', 'A3');    /**     * Finalize the pdf.     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        global $pdf;        // instead of $pdf->Output():        if (!PMA_exportOutputHandler($pdf->getPDFData())) {            return false;        }        return true;    }    /**     * Initialize the pdf to export data.     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        global $pdf_report_title;        global $pdf;        $pdf->Open();        $attr = array('titleFontSize' => 18, 'titleText' => $pdf_report_title);        $pdf->setAttributes($attr);        $pdf->setTopMargin(30);        return true;    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        return true;    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in PDF format     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $pdf;        $attr=array('currentDb' => $db, 'currentTable' => $table);        $pdf->setAttributes($attr);        $pdf->mysql_report($sql_query);        return true;    } // end of the 'PMA_exportData()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * the MEMORY (HEAP) storage engine * @package PhpMyAdmin-Engines */class PMA_StorageEngine_memory extends PMA_StorageEngine{    /**     * returns array with variable names dedicated to MyISAM storage engine     *     * @return  array   variable names     */    function getVariables()    {        return array(            'max_heap_table_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),        );    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build dumps of tables as PHP Arrays * * @package PhpMyAdmin-Export * @subpackage PHP */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['php_array'] = array(        'text'          => __('PHP array'),        'extension'     => 'php',        'mime_type'     => 'text/plain',        'options'       => array(        array('type' => 'begin_group', 'name' => 'general_opts'),            array(                'type' => 'hidden',                'name' => 'structure_or_data',            ),        array('type' => 'end_group')        ),        'options_text'  => __('Options'),    );} else {    /**     * Set of functions used to build exports of tables     */    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        PMA_exportOutputHandler(              '<?php' . $GLOBALS['crlf']            . '/**' . $GLOBALS['crlf']            . ' * Export to PHP Array plugin for PHPMyAdmin' . $GLOBALS['crlf']            . ' * @version 0.2b' . $GLOBALS['crlf']            . ' */' . $GLOBALS['crlf'] . $GLOBALS['crlf']        );        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        PMA_exportOutputHandler('//' . $GLOBALS['crlf'] . '// Database ' . PMA_backquote($db) . $GLOBALS['crlf'] . '//' . $GLOBALS['crlf']);        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table as a fragment of PHP code     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = stripslashes(PMA_DBI_field_name($result, $i));        }        unset($i);        // fix variable names (based on http://www.php.net/manual/language.variables.basics.php)        if (preg_match('/^[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*$/', $table) == false) {            // fix invalid chars in variable names by replacing them with underscores            $tablefixed = preg_replace('/[^a-zA-Z0-9_\x7f-\xff]/', '_', $table);            // variable name must not start with a number or dash...            if (preg_match('/^[a-zA-Z_\x7f-\xff]/', $tablefixed) == false) {                $tablefixed = '_' . $tablefixed;            }        } else {            $tablefixed = $table;        }        $buffer = '';        $record_cnt = 0;        while ($record = PMA_DBI_fetch_row($result)) {            $record_cnt++;            // Output table name as comment if this is the first record of the table            if ($record_cnt == 1) {                $buffer .= $crlf . '// ' . PMA_backquote($db) . '.' . PMA_backquote($table) . $crlf;                $buffer .= '$' . $tablefixed . ' = array(' . $crlf;                $buffer .= '  array(';            } else {                $buffer .= ',' . $crlf . '  array(';            }            for ($i = 0; $i < $columns_cnt; $i++) {                $buffer .= var_export($columns[$i], true) . " => " . var_export($record[$i], true) . (($i + 1 >= $columns_cnt) ? '' : ',');            }            $buffer .= ')';        }        $buffer .= $crlf . ');' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        PMA_DBI_free_result($result);        return true;    }}
<?php  function loadData($type, $data) {    if (!$data) return $data;    $tmp = unpack($type, $data);    return current($tmp);  }  function swap($binValue) {    $result = $binValue{strlen($binValue) - 1};    for($i = strlen($binValue) - 2; $i >= 0 ; $i--) {      $result .= $binValue{$i};    }    return $result;  }  function packDouble($value, $mode = 'LE') {    $value = (double)$value;    $bin = pack("d", $value);    //We test if the conversion of an integer (1) is done as LE or BE by default    switch (pack ('L', 1)) {      case pack ('V', 1): //Little Endian        $result = ($mode == 'LE') ? $bin : swap($bin);      break;      case pack ('N', 1): //Big Endian        $result = ($mode == 'BE') ? $bin : swap($bin);      break;      default: //Some other thing, we just return false        $result = FALSE;    }    return $result;  }  class ShapeFile {    var $FileName;    var $SHPFile;    var $SHXFile;    var $DBFFile;    var $DBFHeader;    var $lastError = "";    var $boundingBox = array("xmin" => 0.0, "ymin" => 0.0, "xmax" => 0.0, "ymax" => 0.0);    var $fileLength = 0;    var $shapeType = 0;    var $records;    function ShapeFile($shapeType, $boundingBox = array("xmin" => 0.0, "ymin" => 0.0, "xmax" => 0.0, "ymax" => 0.0), $FileName = NULL) {      $this->shapeType = $shapeType;      $this->boundingBox = $boundingBox;      $this->FileName = $FileName;      $this->fileLength = 50;    }    function loadFromFile($FileName) {      $this->FileName = $FileName;      if (($this->_openSHPFile()) && ($this->_openDBFFile())) {        $this->_loadHeaders();        $this->_loadRecords();        $this->_closeSHPFile();        $this->_closeDBFFile();      } else {        return false;      }    }    function saveToFile($FileName = NULL) {      if ($FileName != NULL) $this->FileName = $FileName;      if (($this->_openSHPFile(TRUE)) && ($this->_openSHXFile(TRUE)) && ($this->_openDBFFile(TRUE))) {        $this->_saveHeaders();        $this->_saveRecords();        $this->_closeSHPFile();        $this->_closeSHXFile();        $this->_closeDBFFile();      } else {        return false;      }    }    function addRecord($record) {      if ((isset($this->DBFHeader)) && (is_array($this->DBFHeader))) {        $record->updateDBFInfo($this->DBFHeader);      }      $this->fileLength += ($record->getContentLength() + 4);      $this->records[] = $record;      $this->records[count($this->records) - 1]->recordNumber = count($this->records);      return (count($this->records) - 1);    }    function deleteRecord($index) {      if (isset($this->records[$index])) {        $this->fileLength -= ($this->records[$index]->getContentLength() + 4);        for ($i = $index; $i < (count($this->records) - 1); $i++) {          $this->records[$i] = $this->records[$i + 1];        }        unset($this->records[count($this->records) - 1]);        $this->_deleteRecordFromDBF($index);      }    }    function getDBFHeader() {      return $this->DBFHeader;    }    function setDBFHeader($header) {      $this->DBFHeader = $header;      for ($i = 0; $i < count($this->records); $i++) {        $this->records[$i]->updateDBFInfo($header);      }    }    function getIndexFromDBFData($field, $value) {      $result = -1;      for ($i = 0; $i < (count($this->records) - 1); $i++) {        if (isset($this->records[$i]->DBFData[$field]) && (strtoupper($this->records[$i]->DBFData[$field]) == strtoupper($value))) {          $result = $i;        }      }      return $result;    }    function _loadDBFHeader() {      $DBFFile = fopen(str_replace('.*', '.dbf', $this->FileName), 'r');      $result = array();      $buff32 = array();      $i = 1;      $inHeader = true;      while ($inHeader) {        if (!feof($DBFFile)) {          $buff32 = fread($DBFFile, 32);          if ($i > 1) {            if (substr($buff32, 0, 1) == chr(13)) {              $inHeader = false;            } else {              $pos = strpos(substr($buff32, 0, 10), chr(0));              $pos = ($pos == 0 ? 10 : $pos);              $fieldName = substr($buff32, 0, $pos);              $fieldType = substr($buff32, 11, 1);              $fieldLen = ord(substr($buff32, 16, 1));              $fieldDec = ord(substr($buff32, 17, 1));              array_push($result, array($fieldName, $fieldType, $fieldLen, $fieldDec));            }          }          $i++;        } else {          $inHeader = false;        }      }      fclose($DBFFile);      return($result);    }    function _deleteRecordFromDBF($index) {      if (@dbase_delete_record($this->DBFFile, $index)) {        @dbase_pack($this->DBFFile);      }    }    function _loadHeaders() {      fseek($this->SHPFile, 24, SEEK_SET);      $this->fileLength = loadData("N", fread($this->SHPFile, 4));      fseek($this->SHPFile, 32, SEEK_SET);      $this->shapeType = loadData("V", fread($this->SHPFile, 4));      $this->boundingBox = array();      $this->boundingBox["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->DBFHeader = $this->_loadDBFHeader();    }    function _saveHeaders() {      fwrite($this->SHPFile, pack("NNNNNN", 9994, 0, 0, 0, 0, 0));      fwrite($this->SHPFile, pack("N", $this->fileLength));      fwrite($this->SHPFile, pack("V", 1000));      fwrite($this->SHPFile, pack("V", $this->shapeType));      fwrite($this->SHPFile, packDouble($this->boundingBox['xmin']));      fwrite($this->SHPFile, packDouble($this->boundingBox['ymin']));      fwrite($this->SHPFile, packDouble($this->boundingBox['xmax']));      fwrite($this->SHPFile, packDouble($this->boundingBox['ymax']));      fwrite($this->SHPFile, pack("dddd", 0, 0, 0, 0));      fwrite($this->SHXFile, pack("NNNNNN", 9994, 0, 0, 0, 0, 0));      fwrite($this->SHXFile, pack("N", 50 + 4*count($this->records)));      fwrite($this->SHXFile, pack("V", 1000));      fwrite($this->SHXFile, pack("V", $this->shapeType));      fwrite($this->SHXFile, packDouble($this->boundingBox['xmin']));      fwrite($this->SHXFile, packDouble($this->boundingBox['ymin']));      fwrite($this->SHXFile, packDouble($this->boundingBox['xmax']));      fwrite($this->SHXFile, packDouble($this->boundingBox['ymax']));      fwrite($this->SHXFile, pack("dddd", 0, 0, 0, 0));    }    function _loadRecords() {      fseek($this->SHPFile, 100);      while (!feof($this->SHPFile)) {        $bByte = ftell($this->SHPFile);        $record = new ShapeRecord(-1);        $record->loadFromFile($this->SHPFile, $this->DBFFile);        $eByte = ftell($this->SHPFile);        if (($eByte <= $bByte) || ($record->lastError != "")) {          return false;        }        $this->records[] = $record;      }    }    function _saveRecords() {      if (file_exists(str_replace('.*', '.dbf', $this->FileName))) {        @unlink(str_replace('.*', '.dbf', $this->FileName));      }      if (!($this->DBFFile = @dbase_create(str_replace('.*', '.dbf', $this->FileName), $this->DBFHeader))) {        return $this->setError(sprintf("It wasn't possible to create the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));      }      $offset = 50;      if (is_array($this->records) && (count($this->records) > 0)) {        reset($this->records);        while (list($index, $record) = each($this->records)) {          //Save the record to the .shp file          $record->saveToFile($this->SHPFile, $this->DBFFile, $index + 1);          //Save the record to the .shx file          fwrite($this->SHXFile, pack("N", $offset));          fwrite($this->SHXFile, pack("N", $record->getContentLength()));          $offset += (4 + $record->getContentLength());        }      }      @dbase_pack($this->DBFFile);    }    function _openSHPFile($toWrite = false) {      $this->SHPFile = @fopen(str_replace('.*', '.shp', $this->FileName), ($toWrite ? "wb+" : "rb"));      if (!$this->SHPFile) {        return $this->setError(sprintf("It wasn't possible to open the Shape file '%s'", str_replace('.*', '.shp', $this->FileName)));      }      return TRUE;    }    function _closeSHPFile() {      if ($this->SHPFile) {        fclose($this->SHPFile);        $this->SHPFile = NULL;      }    }    function _openSHXFile($toWrite = false) {      $this->SHXFile = @fopen(str_replace('.*', '.shx', $this->FileName), ($toWrite ? "wb+" : "rb"));      if (!$this->SHXFile) {        return $this->setError(sprintf("It wasn't possible to open the Index file '%s'", str_replace('.*', '.shx', $this->FileName)));      }      return TRUE;    }    function _closeSHXFile() {      if ($this->SHXFile) {        fclose($this->SHXFile);        $this->SHXFile = NULL;      }    }    function _openDBFFile($toWrite = false) {      $checkFunction = $toWrite ? "is_writable" : "is_readable";      if (($toWrite) && (!file_exists(str_replace('.*', '.dbf', $this->FileName)))) {        if (!@dbase_create(str_replace('.*', '.dbf', $this->FileName), $this->DBFHeader)) {          return $this->setError(sprintf("It wasn't possible to create the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));        }      }      if ($checkFunction(str_replace('.*', '.dbf', $this->FileName))) {        $this->DBFFile = dbase_open(str_replace('.*', '.dbf', $this->FileName), ($toWrite ? 2 : 0));        if (!$this->DBFFile) {          return $this->setError(sprintf("It wasn't possible to open the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));        }      } else {        return $this->setError(sprintf("It wasn't possible to find the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));      }      return TRUE;    }    function _closeDBFFile() {      if ($this->DBFFile) {        dbase_close($this->DBFFile);        $this->DBFFile = NULL;      }    }    function setError($error) {      $this->lastError = $error;      return false;    }  }  class ShapeRecord {    var $SHPFile = NULL;    var $DBFFile = NULL;    var $recordNumber = NULL;    var $shapeType = NULL;    var $lastError = "";    var $SHPData = array();    var $DBFData = array();    function ShapeRecord($shapeType) {      $this->shapeType = $shapeType;    }    function loadFromFile(&$SHPFile, &$DBFFile) {      $this->SHPFile = $SHPFile;      $this->DBFFile = $DBFFile;      $this->_loadHeaders();      switch ($this->shapeType) {        case 0:          $this->_loadNullRecord();        break;        case 1:          $this->_loadPointRecord();        break;        case 3:          $this->_loadPolyLineRecord();        break;        case 5:          $this->_loadPolygonRecord();        break;        case 8:          $this->_loadMultiPointRecord();        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      $this->_loadDBFData();    }    function saveToFile(&$SHPFile, &$DBFFile, $recordNumber) {      $this->SHPFile = $SHPFile;      $this->DBFFile = $DBFFile;      $this->recordNumber = $recordNumber;      $this->_saveHeaders();      switch ($this->shapeType) {        case 0:          $this->_saveNullRecord();        break;        case 1:          $this->_savePointRecord();        break;        case 3:          $this->_savePolyLineRecord();        break;        case 5:          $this->_savePolygonRecord();        break;        case 8:          $this->_saveMultiPointRecord();        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      $this->_saveDBFData();    }    function updateDBFInfo($header) {      $tmp = $this->DBFData;      unset($this->DBFData);      $this->DBFData = array();      reset($header);      while (list($key, $value) = each($header)) {        $this->DBFData[$value[0]] = (isset($tmp[$value[0]])) ? $tmp[$value[0]] : "";      }    }    function _loadHeaders() {      $this->recordNumber = loadData("N", fread($this->SHPFile, 4));      $tmp = loadData("N", fread($this->SHPFile, 4)); //We read the length of the record      $this->shapeType = loadData("V", fread($this->SHPFile, 4));    }    function _saveHeaders() {      fwrite($this->SHPFile, pack("N", $this->recordNumber));      fwrite($this->SHPFile, pack("N", $this->getContentLength()));      fwrite($this->SHPFile, pack("V", $this->shapeType));    }    function _loadPoint() {      $data = array();      $data["x"] = loadData("d", fread($this->SHPFile, 8));      $data["y"] = loadData("d", fread($this->SHPFile, 8));      return $data;    }    function _savePoint($data) {      fwrite($this->SHPFile, packDouble($data["x"]));      fwrite($this->SHPFile, packDouble($data["y"]));    }    function _loadNullRecord() {      $this->SHPData = array();    }    function _saveNullRecord() {      //Don't save anything    }    function _loadPointRecord() {      $this->SHPData = $this->_loadPoint();    }    function _savePointRecord() {      $this->_savePoint($this->SHPData);    }    function _loadMultiPointRecord() {      $this->SHPData = array();      $this->SHPData["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["numpoints"] = loadData("V", fread($this->SHPFile, 4));      for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {        $this->SHPData["points"][] = $this->_loadPoint();      }    }    function _saveMultiPointRecord() {      fwrite($this->SHPFile, pack("dddd", $this->SHPData["xmin"], $this->SHPData["ymin"], $this->SHPData["xmax"], $this->SHPData["ymax"]));      fwrite($this->SHPFile, pack("V", $this->SHPData["numpoints"]));      for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {        $this->_savePoint($this->SHPData["points"][$i]);      }    }    function _loadPolyLineRecord() {      $this->SHPData = array();      $this->SHPData["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["numparts"]  = loadData("V", fread($this->SHPFile, 4));      $this->SHPData["numpoints"] = loadData("V", fread($this->SHPFile, 4));      for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {        $this->SHPData["parts"][$i] = loadData("V", fread($this->SHPFile, 4));      }      $firstIndex = ftell($this->SHPFile);      $readPoints = 0;      reset($this->SHPData["parts"]);      while (list($partIndex, $partData) = each($this->SHPData["parts"])) {        if (!isset($this->SHPData["parts"][$partIndex]["points"]) || !is_array($this->SHPData["parts"][$partIndex]["points"])) {          $this->SHPData["parts"][$partIndex] = array();          $this->SHPData["parts"][$partIndex]["points"] = array();        }        while (!in_array($readPoints, $this->SHPData["parts"]) && ($readPoints < ($this->SHPData["numpoints"])) && !feof($this->SHPFile)) {          $this->SHPData["parts"][$partIndex]["points"][] = $this->_loadPoint();          $readPoints++;        }      }      fseek($this->SHPFile, $firstIndex + ($readPoints*16));    }    function _savePolyLineRecord() {      fwrite($this->SHPFile, pack("dddd", $this->SHPData["xmin"], $this->SHPData["ymin"], $this->SHPData["xmax"], $this->SHPData["ymax"]));      fwrite($this->SHPFile, pack("VV", $this->SHPData["numparts"], $this->SHPData["numpoints"]));      for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {        fwrite($this->SHPFile, pack("V", count($this->SHPData["parts"][$i])));      }      reset($this->SHPData["parts"]);      foreach ($this->SHPData["parts"] as $partData){        reset($partData["points"]);        while (list($pointIndex, $pointData) = each($partData["points"])) {          $this->_savePoint($pointData);        }      }    }    function _loadPolygonRecord() {      $this->_loadPolyLineRecord();    }    function _savePolygonRecord() {      $this->_savePolyLineRecord();    }    function addPoint($point, $partIndex = 0) {      switch ($this->shapeType) {        case 0:          //Don't add anything        break;        case 1:          //Substitutes the value of the current point          $this->SHPData = $point;        break;        case 3:        case 5:          //Adds a new point to the selected part          if (!isset($this->SHPData["xmin"]) || ($this->SHPData["xmin"] > $point["x"])) $this->SHPData["xmin"] = $point["x"];          if (!isset($this->SHPData["ymin"]) || ($this->SHPData["ymin"] > $point["y"])) $this->SHPData["ymin"] = $point["y"];          if (!isset($this->SHPData["xmax"]) || ($this->SHPData["xmax"] < $point["x"])) $this->SHPData["xmax"] = $point["x"];          if (!isset($this->SHPData["ymax"]) || ($this->SHPData["ymax"] < $point["y"])) $this->SHPData["ymax"] = $point["y"];          $this->SHPData["parts"][$partIndex]["points"][] = $point;          $this->SHPData["numparts"] = count($this->SHPData["parts"]);          $this->SHPData["numpoints"]++;        break;        case 8:          //Adds a new point          if (!isset($this->SHPData["xmin"]) || ($this->SHPData["xmin"] > $point["x"])) $this->SHPData["xmin"] = $point["x"];          if (!isset($this->SHPData["ymin"]) || ($this->SHPData["ymin"] > $point["y"])) $this->SHPData["ymin"] = $point["y"];          if (!isset($this->SHPData["xmax"]) || ($this->SHPData["xmax"] < $point["x"])) $this->SHPData["xmax"] = $point["x"];          if (!isset($this->SHPData["ymax"]) || ($this->SHPData["ymax"] < $point["y"])) $this->SHPData["ymax"] = $point["y"];          $this->SHPData["points"][] = $point;          $this->SHPData["numpoints"]++;        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }    }    function deletePoint($pointIndex = 0, $partIndex = 0) {      switch ($this->shapeType) {        case 0:          //Don't delete anything        break;        case 1:          //Sets the value of the point to zero          $this->SHPData["x"] = 0.0;          $this->SHPData["y"] = 0.0;        break;        case 3:        case 5:          //Deletes the point from the selected part, if exists          if (isset($this->SHPData["parts"][$partIndex]) && isset($this->SHPData["parts"][$partIndex]["points"][$pointIndex])) {            for ($i = $pointIndex; $i < (count($this->SHPData["parts"][$partIndex]["points"]) - 1); $i++) {              $this->SHPData["parts"][$partIndex]["points"][$i] = $this->SHPData["parts"][$partIndex]["points"][$i + 1];            }            unset($this->SHPData["parts"][$partIndex]["points"][count($this->SHPData["parts"][$partIndex]["points"]) - 1]);            $this->SHPData["numparts"] = count($this->SHPData["parts"]);            $this->SHPData["numpoints"]--;          }        break;        case 8:          //Deletes the point, if exists          if (isset($this->SHPData["points"][$pointIndex])) {            for ($i = $pointIndex; $i < (count($this->SHPData["points"]) - 1); $i++) {              $this->SHPData["points"][$i] = $this->SHPData["points"][$i + 1];            }            unset($this->SHPData["points"][count($this->SHPData["points"]) - 1]);            $this->SHPData["numpoints"]--;          }        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }    }    function getContentLength() {      switch ($this->shapeType) {        case 0:          $result = 0;        break;        case 1:          $result = 10;        break;        case 3:        case 5:          $result = 22 + 2*count($this->SHPData["parts"]);          for ($i = 0; $i < count($this->SHPData["parts"]); $i++) {            $result += 8*count($this->SHPData["parts"][$i]["points"]);          }        break;        case 8:          $result = 20 + 8*count($this->SHPData["points"]);        break;        default:          $result = false;          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      return $result;    }    function _loadDBFData() {      $this->DBFData = @dbase_get_record_with_names($this->DBFFile, $this->recordNumber);      unset($this->DBFData["deleted"]);    }    function _saveDBFData() {      unset($this->DBFData["deleted"]);      if ($this->recordNumber <= dbase_numrecords($this->DBFFile)) {        if (!dbase_replace_record($this->DBFFile, array_values($this->DBFData), $this->recordNumber)) {          $this->setError("I wasn't possible to update the information in the DBF file.");        }      } else {        if (!dbase_add_record($this->DBFFile, array_values($this->DBFData))) {          $this->setError("I wasn't possible to add the information to the DBF file.");        }      }    }    function setError($error) {      $this->lastError = $error;      return false;    }  }?>
<?php// TCPDF FONT FILE DESCRIPTION$type='core';$name='Helvetica';$up=-100;$ut=50;$dw=513;$diff='';$enc='';$desc=array('Flags'=>32,'FontBBox'=>'[-166 -225 1000 931]','ItalicAngle'=>0,'Ascent'=>931,'Descent'=>-225,'Leading'=>0,'CapHeight'=>718,'XHeight'=>523,'StemV'=>88,'StemH'=>76,'AvgWidth'=>513,'MaxWidth'=>1015,'MissingWidth'=>513);$cw=array(0=>500,1=>500,2=>500,3=>500,4=>500,5=>500,6=>500,7=>500,8=>500,9=>500,10=>500,11=>500,12=>500,13=>500,14=>500,15=>500,16=>500,17=>500,18=>500,19=>500,20=>500,21=>500,22=>500,23=>500,24=>500,25=>500,26=>500,27=>500,28=>500,29=>500,30=>500,31=>500,32=>278,33=>278,34=>355,35=>556,36=>556,37=>889,38=>667,39=>191,40=>333,41=>333,42=>389,43=>584,44=>278,45=>333,46=>278,47=>278,48=>556,49=>556,50=>556,51=>556,52=>556,53=>556,54=>556,55=>556,56=>556,57=>556,58=>278,59=>278,60=>584,61=>584,62=>584,63=>556,64=>1015,65=>667,66=>667,67=>722,68=>722,69=>667,70=>611,71=>778,72=>722,73=>278,74=>500,75=>667,76=>556,77=>833,78=>722,79=>778,80=>667,81=>778,82=>722,83=>667,84=>611,85=>722,86=>667,87=>944,88=>667,89=>667,90=>611,91=>278,92=>278,93=>277,94=>469,95=>556,96=>333,97=>556,98=>556,99=>500,100=>556,101=>556,102=>278,103=>556,104=>556,105=>222,106=>222,107=>500,108=>222,109=>833,110=>556,111=>556,112=>556,113=>556,114=>333,115=>500,116=>278,117=>556,118=>500,119=>722,120=>500,121=>500,122=>500,123=>334,124=>260,125=>334,126=>584,127=>500,128=>655,129=>500,130=>222,131=>278,132=>333,133=>1000,134=>556,135=>556,136=>333,137=>1000,138=>667,139=>250,140=>1000,141=>500,142=>611,143=>500,144=>500,145=>222,146=>221,147=>333,148=>333,149=>350,150=>556,151=>1000,152=>333,153=>1000,154=>500,155=>250,156=>938,157=>500,158=>500,159=>667,160=>278,161=>278,162=>556,163=>556,164=>556,165=>556,166=>260,167=>556,168=>333,169=>737,170=>370,171=>448,172=>584,173=>333,174=>737,175=>333,176=>606,177=>584,178=>350,179=>350,180=>333,181=>556,182=>537,183=>278,184=>333,185=>350,186=>365,187=>448,188=>869,189=>869,190=>879,191=>556,192=>667,193=>667,194=>667,195=>667,196=>667,197=>667,198=>1000,199=>722,200=>667,201=>667,202=>667,203=>667,204=>278,205=>278,206=>278,207=>278,208=>722,209=>722,210=>778,211=>778,212=>778,213=>778,214=>778,215=>584,216=>778,217=>722,218=>722,219=>722,220=>722,221=>667,222=>666,223=>611,224=>556,225=>556,226=>556,227=>556,228=>556,229=>556,230=>896,231=>500,232=>556,233=>556,234=>556,235=>556,236=>251,237=>251,238=>251,239=>251,240=>556,241=>556,242=>556,243=>556,244=>556,245=>556,246=>556,247=>584,248=>611,249=>556,250=>556,251=>556,252=>556,253=>500,254=>555,255=>500);// --- EOF ---
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$pma_table = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);/** * Runs common work */require './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_operations.php&amp;back=tbl_operations.php';$url_params['goto'] = $url_params['back'] = 'tbl_operations.php';/** * Gets relation settings */$cfgRelation = PMA_getRelationsParam();/** * Gets available MySQL charsets and storage engines */require_once './libraries/mysql_charsets.lib.php';require_once './libraries/StorageEngine.class.php';// add a javascript file for jQuery functions to handle Ajax actions// also add jQueryUI$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';/** * Class for partition management */require_once './libraries/Partition.class.php';// reselect current db (needed in some cases probably due to// the calling of relation.lib.php)PMA_DBI_select_db($GLOBALS['db']);/** * Gets tables informations */require './libraries/tbl_info.inc.php';// define some globals here, for improved syntax in the conditionals$is_myisam_or_aria = $is_isam = $is_innodb = $is_berkeleydb = $is_aria = $is_pbxt = false;// set initial value of these globals, based on the current table enginePMA_set_global_variables_for_engine($tbl_type);if ($is_aria) {    // the value for transactional can be implicit    // (no create option found, in this case it means 1)    // or explicit (option found with a value of 0 or 1)    // ($transactional may have been set by libraries/tbl_info.inc.php,    // from the $create_options)    $transactional = (isset($transactional) && $transactional == '0') ? '0' : '1';    $page_checksum = (isset($page_checksum)) ? $page_checksum : '';}$reread_info = false;$table_alters = array();/** * If the table has to be moved to some other database */if (isset($_REQUEST['submit_move']) || isset($_REQUEST['submit_copy'])) {    $_message = '';    include_once './tbl_move_copy.php';}/** * If the table has to be maintained */if (isset($_REQUEST['table_maintenance'])) {    include_once './sql.php';    unset($result);}/** * Updates table comment, type and options if required */if (isset($_REQUEST['submitoptions'])) {    $_message = '';    $warning_messages = array();    if (isset($_REQUEST['new_name'])) {        if ($pma_table->rename($_REQUEST['new_name'])) {            $_message .= $pma_table->getLastMessage();            $result = true;            $GLOBALS['table'] = $pma_table->getName();            $reread_info = true;            $reload = true;        } else {            $_message .= $pma_table->getLastError();            $result = false;        }    }    if (isset($_REQUEST['comment'])      && urldecode($_REQUEST['prev_comment']) !== $_REQUEST['comment']) {        $table_alters[] = 'COMMENT = \'' . PMA_sqlAddSlashes($_REQUEST['comment']) . '\'';    }    if (! empty($_REQUEST['new_tbl_type'])      && strtolower($_REQUEST['new_tbl_type']) !== strtolower($tbl_type)) {        $table_alters[] = 'ENGINE = ' . $_REQUEST['new_tbl_type'];        $tbl_type = $_REQUEST['new_tbl_type'];        // reset the globals for the new engine        PMA_set_global_variables_for_engine($tbl_type);        if ($is_aria) {            $transactional = (isset($transactional) && $transactional == '0') ? '0' : '1';            $page_checksum = (isset($page_checksum)) ? $page_checksum : '';        }    }    if (! empty($_REQUEST['tbl_collation'])      && $_REQUEST['tbl_collation'] !== $tbl_collation) {        $table_alters[] = 'DEFAULT ' . PMA_generateCharsetQueryPart($_REQUEST['tbl_collation']);    }    if (($is_myisam_or_aria || $is_isam)      && isset($_REQUEST['new_pack_keys'])      && $_REQUEST['new_pack_keys'] != (string)$pack_keys) {        $table_alters[] = 'pack_keys = ' . $_REQUEST['new_pack_keys'];    }    $checksum = empty($checksum) ? '0' : '1';    $_REQUEST['new_checksum'] = empty($_REQUEST['new_checksum']) ? '0' : '1';    if ($is_myisam_or_aria      && $_REQUEST['new_checksum'] !== $checksum) {        $table_alters[] = 'checksum = ' . $_REQUEST['new_checksum'];    }    $_REQUEST['new_transactional'] = empty($_REQUEST['new_transactional']) ? '0' : '1';    if ($is_aria      && $_REQUEST['new_transactional'] !== $transactional) {        $table_alters[] = 'TRANSACTIONAL = ' . $_REQUEST['new_transactional'];    }    $_REQUEST['new_page_checksum'] = empty($_REQUEST['new_page_checksum']) ? '0' : '1';    if ($is_aria      && $_REQUEST['new_page_checksum'] !== $page_checksum) {        $table_alters[] = 'PAGE_CHECKSUM = ' . $_REQUEST['new_page_checksum'];    }    $delay_key_write = empty($delay_key_write) ? '0' : '1';    $_REQUEST['new_delay_key_write'] = empty($_REQUEST['new_delay_key_write']) ? '0' : '1';    if ($is_myisam_or_aria      && $_REQUEST['new_delay_key_write'] !== $delay_key_write) {        $table_alters[] = 'delay_key_write = ' . $_REQUEST['new_delay_key_write'];    }    if (($is_myisam_or_aria || $is_innodb || $is_pbxt)      &&  ! empty($_REQUEST['new_auto_increment'])      && (! isset($auto_increment) || $_REQUEST['new_auto_increment'] !== $auto_increment)) {        $table_alters[] = 'auto_increment = ' . PMA_sqlAddSlashes($_REQUEST['new_auto_increment']);    }    if (($is_myisam_or_aria || $is_innodb || $is_pbxt)      &&  ! empty($_REQUEST['new_row_format'])      && (! isset($row_format) || strtolower($_REQUEST['new_row_format']) !== strtolower($row_format))) {        $table_alters[] = 'ROW_FORMAT = ' . PMA_sqlAddSlashes($_REQUEST['new_row_format']);    }    if (count($table_alters) > 0) {        $sql_query      = 'ALTER TABLE ' . PMA_backquote($GLOBALS['table']);        $sql_query     .= "\r\n" . implode("\r\n", $table_alters);        $result        .= PMA_DBI_query($sql_query) ? true : false;        $reread_info    = true;        unset($table_alters);        foreach (PMA_DBI_get_warnings() as $warning) {            // In MariaDB 5.1.44, when altering a table from Maria to MyISAM            // and if TRANSACTIONAL was set, the system reports an error;            // I discussed with a Maria developer and he agrees that this            // should not be reported with a Level of Error, so here            // I just ignore it. But there are other 1478 messages            // that it's better to show.            if (! ($_REQUEST['new_tbl_type'] == 'MyISAM' && $warning['Code'] == '1478' && $warning['Level'] == 'Error')) {                $warning_messages[] = $warning['Level'] . ': #' . $warning['Code']                    . ' ' . $warning['Message'];            }        }    }}/** * Reordering the table has been requested by the user */if (isset($_REQUEST['submitorderby']) && ! empty($_REQUEST['order_field'])) {    $sql_query = '        ALTER TABLE ' . PMA_backquote($GLOBALS['table']) . '        ORDER BY ' . PMA_backquote(urldecode($_REQUEST['order_field']));    if (isset($_REQUEST['order_order']) && $_REQUEST['order_order'] === 'desc') {        $sql_query .= ' DESC';    }    $result = PMA_DBI_query($sql_query);} // end if/** * A partition operation has been requested by the user */if (isset($_REQUEST['submit_partition']) && ! empty($_REQUEST['partition_operation'])) {    $sql_query = 'ALTER TABLE ' . PMA_backquote($GLOBALS['table']) . ' ' . $_REQUEST['partition_operation'] . ' PARTITION ' . $_REQUEST['partition_name'];    $result = PMA_DBI_query($sql_query);} // end ifif ($reread_info) {    // to avoid showing the old value (for example the AUTO_INCREMENT) after    // a change, clear the cache    PMA_Table::$cache = array();    $page_checksum = $checksum = $delay_key_write = 0;    include './libraries/tbl_info.inc.php';}unset($reread_info);/** * Displays top menu links in non ajax requests */if (!isset($_REQUEST['ajax_request'])) {    include_once './libraries/tbl_links.inc.php';}if (isset($result) && empty($message_to_show)) {    // set to success by default, because result set could be empty    // (for example, a table rename)    $_type = 'success';    if (empty($_message)) {        $_message = $result ? $message = PMA_Message::success(__('Your SQL query has been executed successfully')) : PMA_Message::error(__('Error'));        // $result should exist, regardless of $_message        $_type = $result ? 'success' : 'error';        if ( $_REQUEST['ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($_message, $_message->isSuccess(), $extra_data);        }    }    if (! empty($warning_messages)) {        $_message = new PMA_Message;        $_message->addMessages($warning_messages);        $_message->isError(true);        if ( $_REQUEST['ajax_request'] == true) {            PMA_ajaxResponse($_message, false);        }        unset($warning_messages);    }    PMA_showMessage($_message, $sql_query, $_type);    unset($_message, $_type);}$url_params['goto'] = 'tbl_operations.php';$url_params['back'] = 'tbl_operations.php';/** * Get columns names */$columns = PMA_DBI_get_columns($GLOBALS['db'], $GLOBALS['table']);/** * Displays the page */?><!-- Order the table --><div class="operations_half_width"><form method="post" id="alterTableOrderby" action="tbl_operations.php" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><fieldset id="fieldset_table_order">    <legend><?php echo __('Alter table order by'); ?></legend>    <select name="order_field"><?phpforeach ($columns as $fieldname) {    echo '            <option value="' . htmlspecialchars($fieldname['Field']) . '">'        . htmlspecialchars($fieldname['Field']) . '</option>' . "\n";}unset($columns);?>    </select> <?php echo __('(singly)'); ?>    <select name="order_order">        <option value="asc"><?php echo __('Ascending'); ?></option>        <option value="desc"><?php echo __('Descending'); ?></option>    </select></fieldset><fieldset class="tblFooters">    <input type="submit" name="submitorderby" value="<?php echo __('Go'); ?>" /></fieldset></form></div><!-- Move table --><div class="operations_half_width"><form method="post" action="tbl_operations.php"    onsubmit="return emptyFormElements(this, 'new_name')"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><input type="hidden" name="reload" value="1" /><input type="hidden" name="what" value="data" /><fieldset id="fieldset_table_rename">    <legend><?php echo __('Move table to (database<b>.</b>table):'); ?></legend><?php if (count($GLOBALS['pma']->databases) > $GLOBALS['cfg']['MaxDbList']) {?>    <input type="text" maxlength="100" size="30" name="target_db" value="<?php echo htmlspecialchars($GLOBALS['db']); ?>"/><?php    } else {?>    <select name="target_db">        <?php echo $GLOBALS['pma']->databases->getHtmlOptions(true, false); ?>    </select><?php    } // end if?>    &nbsp;<strong>.</strong>&nbsp;    <input type="text" size="20" name="new_name" onfocus="this.select()"value="<?php echo htmlspecialchars($GLOBALS['table']); ?>" /><br />    <?php    // starting with MySQL 5.0.24, SHOW CREATE TABLE includes the AUTO_INCREMENT    // next value but users can decide if they want it or not for the operation    ?>    <input type="checkbox" name="sql_auto_increment" value="1" id="checkbox_auto_increment_mv" checked="checked" />    <label for="checkbox_auto_increment_mv"><?php echo __('Add AUTO_INCREMENT value'); ?></label><br /></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_move" value="<?php echo __('Go'); ?>" /></fieldset></form></div><?phpif (strstr($show_comment, '; InnoDB free') === false) {    if (strstr($show_comment, 'InnoDB free') === false) {        // only user entered comment        $comment = $show_comment;    } else {        // here we have just InnoDB generated part        $comment = '';    }} else {    // remove InnoDB comment from end, just the minimal part (*? is non greedy)    $comment = preg_replace('@; InnoDB free:.*?$@', '', $show_comment);}// PACK_KEYS: MyISAM or ISAM// DELAY_KEY_WRITE, CHECKSUM, : MyISAM only// AUTO_INCREMENT: MyISAM and InnoDB since 5.0.3, PBXT// Here should be version check for InnoDB, however it is supported// in >5.0.4, >4.1.12 and >4.0.11, so I decided not to// check for version?><!-- Table options --><div class="operations_half_width clearfloat"><form method="post" action="tbl_operations.php"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><input type="hidden" name="reload" value="1" /><fieldset>    <legend><?php echo __('Table options'); ?></legend>    <table>    <!-- Change table name -->    <tr><td><?php echo __('Rename table to'); ?></td>        <td><input type="text" size="20" name="new_name" onfocus="this.select()"                value="<?php echo htmlspecialchars($GLOBALS['table']); ?>" />        </td>    </tr>    <!-- Table comments -->    <tr><td><?php echo __('Table comments'); ?></td>        <td><input type="text" name="comment" maxlength="60" size="30"                value="<?php echo htmlspecialchars($comment); ?>" onfocus="this.select()" />            <input type="hidden" name="prev_comment" value="<?php echo htmlspecialchars($comment); ?>" />        </td>    </tr>    <!-- Storage engine -->    <tr><td><?php echo __('Storage Engine'); ?>            <?php echo PMA_showMySQLDocu('Storage_engines', 'Storage_engines'); ?>        </td>        <td><?php echo PMA_StorageEngine::getHtmlSelect('new_tbl_type', null, $tbl_type); ?>        </td>    </tr>    <!-- Table character set -->    <tr><td><?php echo __('Collation'); ?></td>        <td><?php echo PMA_generateCharsetDropdownBox(                PMA_CSDROPDOWN_COLLATION,                'tbl_collation', null, $tbl_collation, false, 3            ); ?>        </td>    </tr><?phpif ($is_myisam_or_aria || $is_isam) {    ?>    <tr>        <td><label for="new_pack_keys">PACK_KEYS</label></td>        <td><select name="new_pack_keys" id="new_pack_keys">                <option value="DEFAULT"                    <?php if ($pack_keys == 'DEFAULT') echo 'selected="selected"'; ?>                    >DEFAULT</option>                <option value="0"                    <?php if ($pack_keys == '0') echo 'selected="selected"'; ?>                    >0</option>                <option value="1"                    <?php if ($pack_keys == '1') echo 'selected="selected"'; ?>                    >1</option>            </select>        </td>    </tr>    <?php} // end if (MYISAM|ISAM)if ($is_myisam_or_aria) {    ?>    <tr><td><label for="new_checksum">CHECKSUM</label></td>        <td><input type="checkbox" name="new_checksum" id="new_checksum"                value="1"    <?php echo (isset($checksum) && $checksum == 1)        ? ' checked="checked"'        : ''; ?> />        </td>    </tr>    <tr><td><label for="new_delay_key_write">DELAY_KEY_WRITE</label></td>        <td><input type="checkbox" name="new_delay_key_write" id="new_delay_key_write"                value="1"    <?php echo (isset($delay_key_write) && $delay_key_write == 1)        ? ' checked="checked"'        : ''; ?> />        </td>    </tr>    <?php} // end if (MYISAM)if ($is_aria) {    ?>    <tr><td><label for="new_transactional">TRANSACTIONAL</label></td>        <td><input type="checkbox" name="new_transactional" id="new_transactional"                value="1"    <?php echo (isset($transactional) && $transactional == 1)        ? ' checked="checked"'        : ''; ?> />        </td>    </tr>    <tr><td><label for="new_page_checksum">PAGE_CHECKSUM</label></td>        <td><input type="checkbox" name="new_page_checksum" id="new_page_checksum"                value="1"    <?php echo (isset($page_checksum) && $page_checksum == 1)        ? ' checked="checked"'        : ''; ?> />        </td>    </tr>    <?php} // end if (ARIA)if (isset($auto_increment) && strlen($auto_increment) > 0  && ($is_myisam_or_aria || $is_innodb || $is_pbxt)) {    ?>    <tr><td><label for="auto_increment_opt">AUTO_INCREMENT</label></td>        <td><input type="text" name="new_auto_increment" id="auto_increment_opt"                value="<?php echo $auto_increment; ?>" /></td>    </tr>    <?php} // end if (MYISAM|INNODB)// the outer array is for engines, the inner array contains the dropdown// option values as keys then the dropdown option labels$possible_row_formats = array(     'ARIA'  => array(        'FIXED'     => 'FIXED',        'DYNAMIC'   => 'DYNAMIC',        'PAGE'      => 'PAGE'            ),     'MARIA'  => array(        'FIXED'     => 'FIXED',        'DYNAMIC'   => 'DYNAMIC',        'PAGE'      => 'PAGE'            ),     'MYISAM' => array(         'FIXED'    => 'FIXED',         'DYNAMIC'  => 'DYNAMIC'     ),     'PBXT'   => array(         'FIXED'    => 'FIXED',         'DYNAMIC'  => 'DYNAMIC'     ),     'INNODB' => array(         'COMPACT'  => 'COMPACT',         'REDUNDANT' => 'REDUNDANT'));$innodb_engine_plugin = PMA_StorageEngine::getEngine('innodb');$innodb_plugin_version = $innodb_engine_plugin->getInnodbPluginVersion();if (!empty($innodb_plugin_version)) {    $innodb_file_format = $innodb_engine_plugin->getInnodbFileFormat();} else {    $innodb_file_format = '';}if ('Barracuda' == $innodb_file_format && $innodb_engine_plugin->supportsFilePerTable()) {    $possible_row_formats['INNODB']['DYNAMIC'] = 'DYNAMIC';    $possible_row_formats['INNODB']['COMPRESSED'] = 'COMPRESSED';}unset($innodb_engine_plugin, $innodb_plugin_version, $innodb_file_format);// for MYISAM there is also COMPRESSED but it can be set only by the// myisampack utility, so don't offer here the choice because if we// try it inside an ALTER TABLE, MySQL (at least in 5.1.23-maria)// does not return a warning// (if the table was compressed, it can be seen on the Structure page)if (isset($possible_row_formats[$tbl_type])) {    $current_row_format = strtoupper($showtable['Row_format']);    echo '<tr><td><label for="new_row_format">ROW_FORMAT</label></td>';    echo '<td>';    echo PMA_generate_html_dropdown('new_row_format', $possible_row_formats[$tbl_type], $current_row_format, 'new_row_format');    unset($possible_row_formats, $current_row_format);    echo '</td>';    echo '</tr>';}?>    </table></fieldset><fieldset class="tblFooters">        <input type="submit" name="submitoptions" value="<?php echo __('Go'); ?>" /></fieldset></form></div><!-- Copy table --><div class="operations_half_width"><form method="post" action="tbl_operations.php" name="copyTable" id="copyTable" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>    onsubmit="return emptyFormElements(this, 'new_name')"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><input type="hidden" name="reload" value="1" /><fieldset>    <legend><?php echo __('Copy table to (database<b>.</b>table):'); ?></legend><?php if (count($GLOBALS['pma']->databases) > $GLOBALS['cfg']['MaxDbList']) {?>    <input type="text" maxlength="100" size="30" name="target_db" value="<?php echo htmlspecialchars($GLOBALS['db']); ?>"/><?php    } else {?>    <select name="target_db">        <?php echo $GLOBALS['pma']->databases->getHtmlOptions(true, false); ?>    </select><?php    } // end if?>    &nbsp;<strong>.</strong>&nbsp;    <input type="text" size="20" name="new_name" onfocus="this.select()" value="<?php echo htmlspecialchars($GLOBALS['table']); ?>"/><br /><?php        $choices = array(            'structure' => __('Structure only'),            'data'      => __('Structure and data'),            'dataonly'  => __('Data only'));        PMA_display_html_radio('what', $choices, 'data', true);        unset($choices);?>    <input type="checkbox" name="drop_if_exists" value="true" id="checkbox_drop" />    <label for="checkbox_drop"><?php echo sprintf(__('Add %s'), 'DROP TABLE'); ?></label><br />    <input type="checkbox" name="sql_auto_increment" value="1" id="checkbox_auto_increment_cp" />    <label for="checkbox_auto_increment_cp"><?php echo __('Add AUTO_INCREMENT value'); ?></label><br />    <?php        // display "Add constraints" choice only if there are        // foreign keys        if (PMA_getForeigners($GLOBALS['db'], $GLOBALS['table'], '', 'foreign')) {        ?>    <input type="checkbox" name="add_constraints" value="1" id="checkbox_constraints" />    <label for="checkbox_constraints"><?php echo __('Add constraints'); ?></label><br />        <?php        } // endif        if (isset($_COOKIE['pma_switch_to_new'])          && $_COOKIE['pma_switch_to_new'] == 'true') {            $pma_switch_to_new = 'true';        }    ?>    <input type="checkbox" name="switch_to_new" value="true"        id="checkbox_switch"<?php echo            isset($pma_switch_to_new) && $pma_switch_to_new == 'true'            ? ' checked="checked"'            : ''; ?> />    <label for="checkbox_switch"><?php echo __('Switch to copied table'); ?></label></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_copy" value="<?php echo __('Go'); ?>" /></fieldset></form></div><br class="clearfloat"/><div class="operations_half_width"><fieldset> <legend><?php echo __('Table maintenance'); ?></legend><ul id="tbl_maintenance" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>><?php// Note: BERKELEY (BDB) is no longer supported, starting with MySQL 5.1if ($is_myisam_or_aria || $is_innodb || $is_berkeleydb) {    if ($is_myisam_or_aria || $is_innodb) {        $this_url_params = array_merge(            $url_params,            array(                'sql_query' => 'CHECK TABLE ' . PMA_backquote($GLOBALS['table']),                'table_maintenance' => 'Go',                )        );        ?>    <li><a class='maintain_action' href="tbl_operations.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Check table'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'CHECK_TABLE'); ?>    </li>        <?php    }    if ($is_innodb) {        $this_url_params = array_merge(            $url_params,            array('sql_query' => 'ALTER TABLE ' . PMA_backquote($GLOBALS['table']) . ' ENGINE = InnoDB')        );        ?>    <li><a class='maintain_action' href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Defragment table'); ?></a>        <?php echo PMA_showMySQLDocu('Table_types', 'InnoDB_File_Defragmenting'); ?>    </li>        <?php    }    if ($is_myisam_or_aria || $is_berkeleydb) {        $this_url_params = array_merge(            $url_params,            array(                'sql_query' => 'ANALYZE TABLE ' . PMA_backquote($GLOBALS['table']),                'table_maintenance' => 'Go',                )        );        ?>    <li><a class='maintain_action' href="tbl_operations.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Analyze table'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'ANALYZE_TABLE');?>    </li>        <?php    }    if ($is_myisam_or_aria && !PMA_DRIZZLE) {        $this_url_params = array_merge(            $url_params,            array(                'sql_query' => 'REPAIR TABLE ' . PMA_backquote($GLOBALS['table']),                'table_maintenance' => 'Go',                )        );        ?>    <li><a class='maintain_action' href="tbl_operations.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Repair table'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'REPAIR_TABLE'); ?>    </li>        <?php    }    if (($is_myisam_or_aria || $is_innodb || $is_berkeleydb) && !PMA_DRIZZLE) {        $this_url_params = array_merge(            $url_params,            array(                'sql_query' => 'OPTIMIZE TABLE ' . PMA_backquote($GLOBALS['table']),                'table_maintenance' => 'Go',                )        );        ?>    <li><a class='maintain_action' href="tbl_operations.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Optimize table'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'OPTIMIZE_TABLE'); ?>    </li>        <?php    }} // end MYISAM or BERKELEYDB case$this_url_params = array_merge(    $url_params,    array(        'sql_query' => 'FLUSH TABLE ' . PMA_backquote($GLOBALS['table']),        'message_to_show' => sprintf(            __('Table %s has been flushed'),            htmlspecialchars($GLOBALS['table'])        ),        'reload'    => 1,    ));?>    <li><a class='maintain_action' href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Flush the table (FLUSH)'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'FLUSH'); ?>    </li></ul></fieldset></div><?php if (! (isset($db_is_information_schema) && $db_is_information_schema)) { ?><div class="operations_half_width"><fieldset class="caution"> <legend><?php echo __('Delete data or table'); ?></legend><ul><?phpif (! $tbl_is_view && ! (isset($db_is_information_schema) && $db_is_information_schema)) {    $this_sql_query = 'TRUNCATE TABLE ' . PMA_backquote($GLOBALS['table']);    $this_url_params = array_merge(        $url_params,        array(            'sql_query' => $this_sql_query,            'goto' => 'tbl_structure.php',            'reload' => '1',            'message_to_show' => sprintf(__('Table %s has been emptied'), htmlspecialchars($table)),        )    );    ?>    <li><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'id="truncate_tbl_anchor" class="ajax"' : ''); ?>>            <?php echo __('Empty the table (TRUNCATE)'); ?></a>        <?php echo PMA_showMySQLDocu('SQL-Syntax', 'TRUNCATE_TABLE'); ?>    </li><?php}if (! (isset($db_is_information_schema) && $db_is_information_schema)) {    $this_sql_query = 'DROP TABLE ' . PMA_backquote($GLOBALS['table']);    $this_url_params = array_merge(        $url_params,        array(            'sql_query' => $this_sql_query,            'goto' => 'db_operations.php',            'reload' => '1',            'purge' => '1',            'message_to_show' => sprintf(($tbl_is_view ? __('View %s has been dropped') : __('Table %s has been dropped')), htmlspecialchars($table)),            // table name is needed to avoid running            // PMA_relationsCleanupDatabase() on the whole db later            'table' => $GLOBALS['table'],        )    );    ?>    <li><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'id="drop_tbl_anchor"' : ''); ?>>            <?php echo __('Delete the table (DROP)'); ?></a>        <?php echo PMA_showMySQLDocu('SQL-Syntax', 'DROP_TABLE'); ?>    </li><?php}?></ul></fieldset></div><?php}?><br class="clearfloat"><?php if (PMA_Partition::havePartitioning()) {    $partition_names = PMA_Partition::getPartitionNames($db, $table);    // show the Partition maintenance section only if we detect a partition    if (! is_null($partition_names[0])) {    ?><div class="operations_half_width"><form method="post" action="tbl_operations.php"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><fieldset> <legend><?php echo __('Partition maintenance'); ?></legend><?php        $html_select = '<select name="partition_name">' . "\n";        foreach ($partition_names as $one_partition) {            $one_partition = htmlspecialchars($one_partition);            $html_select .= '<option value="' . $one_partition . '">' . $one_partition . '</option>' . "\n";        }        $html_select .= '</select>' . "\n";        printf(__('Partition %s'), $html_select);        unset($partition_names, $one_partition, $html_select);        $choices = array(            'ANALYZE' => __('Analyze'),            'CHECK' => __('Check'),            'OPTIMIZE' => __('Optimize'),            'REBUILD' => __('Rebuild'),            'REPAIR' => __('Repair'));        PMA_display_html_radio('partition_operation', $choices, '', false);        unset($choices);        echo PMA_showMySQLDocu('partitioning_maintenance', 'partitioning_maintenance');        // I'm not sure of the best way to display that; this link does        // not depend on the Go button    $this_url_params = array_merge(        $url_params,        array(            'sql_query' => 'ALTER TABLE ' . PMA_backquote($GLOBALS['table']) . ' REMOVE PARTITIONING'            )        );?>    <br /><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Remove partitioning'); ?></a></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_partition" value="<?php echo __('Go'); ?>" /></fieldset></form></div><?php        } // end if    } // end if// Referential integrity check// The Referential integrity check was intended for the non-InnoDB// tables for which the relations are defined in pmadb// so I assume that if the current table is InnoDB, I don't display// this choice (InnoDB maintains integrity by itself)if ($cfgRelation['relwork'] && ! $is_innodb) {    PMA_DBI_select_db($GLOBALS['db']);    $foreign = PMA_getForeigners($GLOBALS['db'], $GLOBALS['table']);    if ($foreign) {        ?>    <!-- Referential integrity check --><div class="operations_half_width"><fieldset> <legend><?php echo __('Check referential integrity:'); ?></legend>    <ul>        <?php        echo "\n";        foreach ($foreign AS $master => $arr) {            $join_query  = 'SELECT ' . PMA_backquote($GLOBALS['table']) . '.* FROM '                         . PMA_backquote($GLOBALS['table']) . ' LEFT JOIN '                         . PMA_backquote($arr['foreign_table']);            if ($arr['foreign_table'] == $GLOBALS['table']) {                $foreign_table = $GLOBALS['table'] . '1';                $join_query .= ' AS ' . PMA_backquote($foreign_table);            } else {                $foreign_table = $arr['foreign_table'];            }            $join_query .= ' ON '                         . PMA_backquote($GLOBALS['table']) . '.' . PMA_backquote($master)                         . ' = ' . PMA_backquote($foreign_table) . '.' . PMA_backquote($arr['foreign_field'])                         . ' WHERE '                         . PMA_backquote($foreign_table) . '.' . PMA_backquote($arr['foreign_field'])                         . ' IS NULL AND '                         . PMA_backquote($GLOBALS['table']) . '.' . PMA_backquote($master)                         . ' IS NOT NULL';            $this_url_params = array_merge(                $url_params,                array('sql_query' => $join_query)            );            echo '        <li>'                 . '<a href="sql.php'                 . PMA_generate_common_url($this_url_params)                 . '">' . $master . '&nbsp;->&nbsp;' . $arr['foreign_table'] . '.' . $arr['foreign_field']                 . '</a></li>' . "\n";        } //  foreach $foreign        unset($foreign_table, $join_query);        ?>    </ul>   </fieldset>  </div>        <?php    } // end if ($foreign)} // end  if (!empty($cfg['Server']['relation']))/** * Displays the footer */require './libraries/footer.inc.php';function PMA_set_global_variables_for_engine($tbl_type){    global $is_myisam_or_aria, $is_innodb, $is_isam, $is_berkeleydb, $is_aria, $is_pbxt;    $is_myisam_or_aria = $is_isam = $is_innodb = $is_berkeleydb = $is_aria = $is_pbxt = false;    $upper_tbl_type = strtoupper($tbl_type);    //Options that apply to MYISAM usually apply to ARIA    $is_myisam_or_aria = ($upper_tbl_type == 'MYISAM' || $upper_tbl_type == 'ARIA' || $upper_tbl_type == 'MARIA');    $is_aria = ($upper_tbl_type == 'ARIA');    $is_isam = ($upper_tbl_type == 'ISAM');    $is_innodb = ($upper_tbl_type == 'INNODB');    $is_berkeleydb = ($upper_tbl_type == 'BERKELEYDB');    $is_pbxt = ($upper_tbl_type == 'PBXT');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form edit view * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/form_processing.lib.php';require './libraries/config/setup.forms.php';$formset_id = filter_input(INPUT_GET, 'formset');$mode = filter_input(INPUT_GET, 'mode');if (! isset($forms[$formset_id])) {    die(__('Incorrect formset, check $formsets array in setup/frames/form.inc.php'));}if (isset($GLOBALS['strConfigFormset_' . $formset_id])) {    echo '<h2>' . $GLOBALS['strConfigFormset_' . $formset_id] . '</h2>';}$form_display = new FormDisplay();foreach ($forms[$formset_id] as $form_name => $form) {    $form_display->registerForm($form_name, $form);}process_formset($form_display);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once 'Export_Relation_Schema.class.php';/** * This Class inherits the XMLwriter class and * helps in developing structure of MS Visio Schema Export * * @access public * @see http://php.net/manual/en/book.xmlwriter.php */class PMA_VISIO extends XMLWriter{    public $title;    public $author;    public $font;    public $fontSize;    /**     * The "PMA_VISIO" constructor     *     * Upon instantiation This starts writing the Visio XML .VDX document     *     * @return void     * @see XMLWriter::openMemory(),XMLWriter::setIndent(),XMLWriter::startDocument()     */    function __construct()    {        $this->openMemory();        /*         * Set indenting using three spaces,         * so output is formatted         */        $this->setIndent(true);        $this->setIndentString('   ');        /*         * Create the XML document         */        $this->startDocument('1.0', 'UTF-8');    }    /**     * Starts Visio XML .VDX Document     *     * Visio XML document starts by first initializing VisioDocument tag     * then DocumentProperties & DocumentSettings contains all the     * attributes that needed to define the document. Order of elements     * should be maintained while generating XML of Visio.     *     * @return void     * @access public     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),     * _documentProperties, _documentSettings     */    function startVisioDoc()    {        $this->startElement('VisioDocument');        $this->writeAttribute('xmlns', 'http://schemas.microsoft.com/visio/2003/core');        $this->writeAttribute('xmlns:vx', 'http://schemas.microsoft.com/visio/2006/extension');        $this->writeAttribute('xml:space', 'preserve');        $this->_documentProperties();        $this->_documentSettings();    }    /**     * Set document title     *     * @param string $value title text     *     * @return void     * @access public     */    function setTitle($value)    {        $this->title = $value;    }    /**     * Set document author     *     * @param string $value the author     *     * @return void     * @access public     */    function setAuthor($value)    {        $this->author = $value;    }    /**     * Sets Visio XML .VDX Document Properties     *     * DocumentProperties tag contains document property elements such as       the document's Title,Subject,Creator and templates tags     *     * @return void     * @access private     * @see XMLWriter::startElement(),XMLWriter::endElement(),XMLWriter::writeRaw()     */    private function _documentProperties()    {        $this->startElement('DocumentProperties');        $this->writeRaw('<Title>'.$this->title.'</Title>');        $this->writeRaw('<Subject>'.$this->title.'</Subject>');        $this->writeRaw('<Creator>'.$this->author.'</Creator>');        $this->writeRaw('<Company>phpMyAdmin</Company>');        $this->writeRaw('<Template>c:\program files\microsoft office\office12\1033\DBMODL_U.VST</Template>');        $this->endElement();    }    /**     * Sets Visio XML .VDX Document Settings     *     * DocumentSettings  tag contains elements that specify document settings.     *     * @return void     * @access private     * @see XMLWriter::startElement(),XMLWriter::endElement()     */    private function _documentSettings()    {        $this->startElement('DocumentSettings');        $this->endElement();    }    /**     * Ends Visio XML Document     *     * @return void     * @access public     * @see XMLWriter::endElement(),XMLWriter::endDocument()     */    function endVisioDoc()    {        $this->endElement();        $this->endDocument();    }    /**     * Output Visio XML .VDX Document for download     *     * @param string $fileName name of the Visio XML document     *     * @return void     * @access public     * @see XMLWriter::flush()     */    function showOutput($fileName)    {         //if(ob_get_clean()){            //ob_end_clean();        //}        $output = $this->flush();        PMA_download_header($fileName . '.vdx', 'application/visio', strlen($output));        print $output;    }}/** * Draws tables schema */class Table_Stats{    /**     * Defines properties     */    private $_tableName;    private $_showInfo = false;    public $width = 0;    public $height;    public $fields = array();    public $heightCell = 0;    public $currentCell = 0;    public $x, $y;    public $primary = array();    /**     * The "Table_Stats" constructor     *     * @param string  $tableName        The table name     * @param integer $pageNumber       Page number     * @param integer &$same_wide_width The max. with among tables     * @param boolean $showKeys         Whether to display keys or not     * @param boolean $showInfo         Whether to display table position or not     *     * @global object    The current Visio XML document     * @global integer   The current page number (from the     *                     $cfg['Servers'][$i]['table_coords'] table)     * @global array     The relations settings     * @global string    The current db name     *     * @return void     * @access private     * @see PMA_VISIO, Table_Stats::Table_Stats_setWidth,     *      Table_Stats::Table_Stats_setHeight     */    function __construct($tableName, $pageNumber, &$same_wide_width, $showKeys = false, $showInfo = false)    {        global $visio, $cfgRelation, $db;        $this->_tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $visio->dieSchema(                $pageNumber,                "VISIO",                sprintf(__('The %s table doesn\'t exist!'), $tableName)            );        }        /*        * load fields        * check to see if it will load all fields or only the foreign keys        */        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->_tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $this->_showInfo = $showInfo;        // height and width        $this->_setHeightTable($fontSize);        // setWidth must me after setHeight, because title        // can include table height which changes table width        $this->_setWidthTable($font, $fontSize);        if ($same_wide_width < $this->width) {            $same_wide_width = $this->width;        }        // x and y        $sql = 'SELECT x, y FROM '         . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'         . PMA_backquote($cfgRelation['table_coords'])         . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''         . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''         . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $visio->dieSchema(                $pageNumber,                "VISIO",                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        // displayfield        $this->displayfield = PMA_getDisplayField($db, $tableName);        // index        $result = PMA_DBI_query('SHOW INDEX FROM ' . PMA_backquote($tableName) . ';', null, PMA_DBI_QUERY_STORE);        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }    }    /**     * Returns title of the current table,     * title can have the dimensions/co-ordinates of the table     *     * @return the title     * @access private     */    private function _getTitle()    {        return ($this->_showInfo            ? sprintf('%.0f', $this->width) . 'x' . sprintf('%.0f', $this->heightCell)            : '') . ' ' . $this->_tableName;    }    /**     * Sets the width of the table     *     * @param string  $font     font name     * @param integer $fontSize font size     *     * @global object The current Visio XML document     *     * @return void     * @see PMA_VISIO     */    private function _setWidthTable($font,$fontSize)    {        global $visio;    }    /**     * Sets the height of the table     *     * @param integer $fontSize font size     *     * @return void     * @access private     */    function _setHeightTable($fontSize)    {        $this->heightCell = $fontSize + 4;        $this->height = (count($this->fields) + 1) * $this->heightCell;    }    /**     * draw the table     *     * @param boolean $showColor Whether to display color     *     * @global object The current Visio XML document     *     * @return void     * @access public     * @see PMA_VISIO     */    public function tableDraw($showColor)    {        global $visio;        //echo $this->_tableName.'<br />';        foreach ($this->fields as $field) {            $this->currentCell += $this->heightCell;            $showColor    = 'none';            if ($showColor) {                if (in_array($field, $this->primary)) {                    $showColor = '#0c0';                }                if ($field == $this->displayfield) {                    $showColor = 'none';                }            }            // code here for drawing table diagrams        }    }}/** * Draws relation links * * @access public * @see PMA_VISIO */class Relation_Stats{    /**     * Defines properties     */    public $xSrc, $ySrc;    public $srcDir ;    public $destDir;    public $xDest, $yDest;    public $wTick = 10;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @return void     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        /*        * [0] is x-left        * [1] is x-right        * [2] is y        */        $src_left   = $src_pos[0] - $this->wTick;        $src_right  = $src_pos[1] + $this->wTick;        $dest_left  = $dest_pos[0] - $this->wTick;        $dest_right = $dest_pos[1] + $this->wTick;        $d1 = abs($src_left - $dest_left);        $d2 = abs($src_right - $dest_left);        $d3 = abs($src_left - $dest_right);        $d4 = abs($src_right - $dest_right);        $d  = min($d1, $d2, $d3, $d4);        if ($d == $d1) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d2) {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d3) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        } else {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        }        $this->ySrc   = $src_pos[2];        $this->yDest = $dest_pos[2];    }    /**     * Gets arrows coordinates     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Arrows coordinates     * @access private     */    function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // x_left, x_right, y        return array(            $table->x,            $table->x + $table->width,            $table->y + ($pos + 1.5) * $table->heightCell        );    }    /**     * draws relation links and arrows shows foreign key relations     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @global object The current Visio XML document     *     * @return void     * @access public     * @see PMA_VISIO     */    public function relationDraw($changeColor)    {        global $visio;        if ($changeColor) {            $listOfColors = array(                'red',                'grey',                'black',                'yellow',                'green',                'cyan',                'orange'            );            shuffle($listOfColors);            $color =  $listOfColors[0];        } else {            $color = 'black';        }        // code here for making connections b/w relation objects    }}/** end of the "Relation_Stats" class*//** * Visio Relation Schema Class * * Purpose of this class is to generate the Visio XML .VDX Document which is used * for representing the database diagrams in any version of MS Visio IDE. * This class uses Software and Database Template and Database model diagram of * Visio and with the combination of these objects actually helps in preparing * Visio XML .VDX document. * * Visio XML is generated by using XMLWriter php extension and this class * inherits Export_Relation_Schema class has common functionality added * to this class * * @name Visio_Relation_Schema */class PMA_Visio_Relation_Schema extends PMA_Export_Relation_Schema{    /**     * The "PMA_Visio_Relation_Schema" constructor     *     * Upon instantiation This outputs the Visio XML document     * that user can download     *     * @return void     * @see PMA_VISIO,Table_Stats,Relation_Stats     */    function __construct()    {        global $visio,$db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowGrid(isset($_POST['show_grid']));        $this->setShowColor($_POST['show_color']);        $this->setShowKeys(isset($_POST['show_keys']));        $this->setOrientation(isset($_POST['orientation']));        $this->setPaper($_POST['paper']);        $this->setExportType($_POST['export_type']);        $visio = new PMA_VISIO();        $visio->setTitle(sprintf(__('Schema of the %s database - Page %s'), $db, $this->pageNumber));        $visio->SetAuthor('phpMyAdmin ' . PMA_VERSION);        $visio->startVisioDoc();        $alltables = $this->getAllTables($db, $this->pageNumber);        foreach ($alltables as $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats($table, $this->pageNumber, $this->showKeys);            }        }        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    /* put the foreign table on the schema only if selected                    * by the user                    * (do not use array_search() because we would have to                    * to do a === false and this is not PHP3 compatible)                    */                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table,                            $master_field,                            $rel['foreign_table'],                            $rel['foreign_field'],                            $this->showKeys                        );                    }                }            }        }        $this->_drawTables($this->showColor);        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $visio->endVisioDoc();        $visio->showOutput($db.'-'.$this->pageNumber);        exit();    }    /**     * Defines relation objects     *     * @param string  $masterTable  The master table name     * @param string  $masterField  The relation field in the master table     * @param string  $foreignTable The foreign table name     * @param string  $foreignField The relation field in the foreign table     * @param boolean $showKeys     Whether to display keys or not     *     * @return void     * @access private     * @see Table_Stats::__construct(), Relation_Stats::__construct()     */    private function _addRelation($masterTable, $masterField, $foreignTable, $foreignField, $showKeys)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $this->pageNumber, $showKeys            );        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $this->pageNumber, $showKeys            );        }        $this->_relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws relation references     * connects master table's master field to foreign table's forein field.     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @return void     * @access private     * @see Relation_Stats::relationDraw()     */    private function _drawRelations($changeColor)    {        foreach ($this->_relations as $relation) {            $relation->relationDraw($changeColor);        }    }    /**     * Draws tables     *     * @param boolean $changeColor Whether to show color for tables text or not     *     * @return void     * @access private     * @see Table_Stats::tableDraw()     */    private function _drawTables($changeColor)    {        foreach ($this->tables as $table) {            $table->tableDraw($changeColor);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */define('IS_TRANSFORMATION_WRAPPER', true);/** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';require_once './libraries/transformations.lib.php'; // Transformations$cfgRelation = PMA_getRelationsParam();/** * Ensures db and table are valid, else moves to the "parent" script */require_once './libraries/db_table_exists.lib.php';/** * Get the list of the fields of the current table */PMA_DBI_select_db($db);if (isset($where_clause)) {    $result      = PMA_DBI_query('SELECT * FROM ' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';', null, PMA_DBI_QUERY_STORE);    $row         = PMA_DBI_fetch_assoc($result);} else {    $result      = PMA_DBI_query('SELECT * FROM ' . PMA_backquote($table) . ' LIMIT 1;', null, PMA_DBI_QUERY_STORE);    $row         = PMA_DBI_fetch_assoc($result);}// No row returnedif (!$row) {    exit;} // end if (no record returned)$default_ct = 'application/octet-stream';if ($cfgRelation['commwork'] && $cfgRelation['mimework']) {    $mime_map = PMA_getMime($db, $table);    $mime_options = PMA_transformation_getOptions((isset($mime_map[$transform_key]['transformation_options']) ? $mime_map[$transform_key]['transformation_options'] : ''));    foreach ($mime_options AS $key => $option) {        if (substr($option, 0, 10) == '; charset=') {            $mime_options['charset'] = $option;        }    }}// For re-usability, moved http-headers and stylesheets// to a seperate file. It can now be included by libraries/header.inc.php,// querywindow.php.require_once './libraries/header_http.inc.php';// [MIME]if (isset($ct) && !empty($ct)) {    $mime_type = $ct;} else {    $mime_type = (isset($mime_map[$transform_key]['mimetype']) ? str_replace('_', '/', $mime_map[$transform_key]['mimetype']) : $default_ct) . (isset($mime_options['charset']) ? $mime_options['charset'] : '');}PMA_download_header($cn, $mime_type);if (! isset($resize)) {    echo $row[$transform_key];} else {    // if image_*__inline.inc.php finds that we can resize,    // it sets $resize to jpeg or png    $srcImage = imagecreatefromstring($row[$transform_key]);    $srcWidth = ImageSX($srcImage);    $srcHeight = ImageSY($srcImage);    // Check to see if the width > height or if width < height    // if so adjust accordingly to make sure the image    // stays smaller then the $newWidth and $newHeight    $ratioWidth = $srcWidth/$newWidth;    $ratioHeight = $srcHeight/$newHeight;    if ($ratioWidth < $ratioHeight) {        $destWidth = $srcWidth/$ratioHeight;        $destHeight = $newHeight;    } else {        $destWidth = $newWidth;        $destHeight = $srcHeight/$ratioWidth;    }    if ($resize) {        $destImage = ImageCreateTrueColor($destWidth, $destHeight);    }//    ImageCopyResized($destImage, $srcImage, 0, 0, 0, 0, $destWidth, $destHeight, $srcWidth, $srcHeight);// better quality but slower:    ImageCopyResampled($destImage, $srcImage, 0, 0, 0, 0, $destWidth, $destHeight, $srcWidth, $srcHeight);    if ($resize == 'jpeg') {        ImageJPEG($destImage, '', 75);    }    if ($resize == 'png') {        ImagePNG($destImage);    }    ImageDestroy($srcImage);    ImageDestroy($destImage);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_image_png__inline_info(){    return array(        'info' => __('Displays a clickable thumbnail. The options are the maximum width and height in pixels. The original aspect ratio is preserved.'),        );}/** * */function PMA_transformation_image_png__inline($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    if (PMA_IS_GD2) {        $transform_options = array ('string' => '<a href="transformation_wrapper.php' . $options['wrapper_link'] . '" target="_blank"><img src="transformation_wrapper.php' . $options['wrapper_link'] . '&amp;resize=png&amp;newWidth=' . (isset($options[0]) ? $options[0] : '100') . '&amp;newHeight=' . (isset($options[1]) ? $options[1] : 100) . '" alt="[__BUFFER__]" border="0" /></a>');    } else {        $transform_options = array ('string' => '<img src="transformation_wrapper.php' . $options['wrapper_link'] . '" alt="[__BUFFER__]" width="320" height="240" />');    }    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run single signon authentication. * * @package PhpMyAdmin-Auth-Signon *//** * Displays authentication form * * @global  string    the font face to use in case of failure * @global  string    the default font size to use in case of failure * @global  string    the big font size to use in case of failure * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth(){    unset($_SESSION['LAST_SIGNON_URL']);    if (empty($GLOBALS['cfg']['Server']['SignonURL'])) {        PMA_fatalError('You must set SignonURL!');    } elseif (!empty($_REQUEST['old_usr']) && !empty($GLOBALS['cfg']['Server']['LogoutURL'])) {        /* Perform logout to custom URL */        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);    } else {        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['SignonURL']);    }    exit();} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * @global  string    the username if register_globals is on * @global  string    the password if register_globals is on * @global  array     the array of server variables if register_globals is *                    off * @global  array     the array of environment variables if register_globals *                    is off * @global  string    the username for the ? server * @global  string    the password for the ? server * @global  string    the username for the WebSite Professional server * @global  string    the password for the WebSite Professional server * @global  string    the username of the user who logs out * * @return  boolean   whether we get authentication settings or not * * @access  public */function PMA_auth_check(){    global $PHP_AUTH_USER, $PHP_AUTH_PW;    /* Check if we're using same sigon server */    if (isset($_SESSION['LAST_SIGNON_URL']) && $_SESSION['LAST_SIGNON_URL'] != $GLOBALS['cfg']['Server']['SignonURL']) {        return false;    }    /* Script name */    $script_name = $GLOBALS['cfg']['Server']['SignonScript'];    /* Session name */    $session_name = $GLOBALS['cfg']['Server']['SignonSession'];    /* Login URL */    $signon_url = $GLOBALS['cfg']['Server']['SignonURL'];    /* Current host */    $single_signon_host = $GLOBALS['cfg']['Server']['host'];    /* Current port */    $single_signon_port = $GLOBALS['cfg']['Server']['port'];    /* No configuration updates */    $single_signon_cfgupdate = array();    /* Are we requested to do logout? */    $do_logout = !empty($_REQUEST['old_usr']);    /* Handle script based auth */    if (!empty($script_name)) {        if (! file_exists($script_name)) {            PMA_fatalError(__('Can not find signon authentication script:') . ' ' . $script_name);        }        include $script_name;        list ($PHP_AUTH_USER, $PHP_AUTH_PW) = get_login_credentials($cfg['Server']['user']);    /* Does session exist? */    } elseif (isset($_COOKIE[$session_name])) {        /* End current session */        $old_session = session_name();        $old_id = session_id();        session_write_close();        /* Load single signon session */        session_name($session_name);        session_id($_COOKIE[$session_name]);        session_start();        /* Clear error message */        unset($_SESSION['PMA_single_signon_error_message']);        /* Grab credentials if they exist */        if (isset($_SESSION['PMA_single_signon_user'])) {            if ($do_logout) {                $PHP_AUTH_USER = '';            } else {                $PHP_AUTH_USER = $_SESSION['PMA_single_signon_user'];            }        }        if (isset($_SESSION['PMA_single_signon_password'])) {            if ($do_logout) {                $PHP_AUTH_PW = '';            } else {                $PHP_AUTH_PW = $_SESSION['PMA_single_signon_password'];            }        }        if (isset($_SESSION['PMA_single_signon_host'])) {            $single_signon_host = $_SESSION['PMA_single_signon_host'];        }        if (isset($_SESSION['PMA_single_signon_port'])) {            $single_signon_port = $_SESSION['PMA_single_signon_port'];        }        if (isset($_SESSION['PMA_single_signon_cfgupdate'])) {            $single_signon_cfgupdate = $_SESSION['PMA_single_signon_cfgupdate'];        }        /* Also get token as it is needed to access subpages */        if (isset($_SESSION['PMA_single_signon_token'])) {            /* No need to care about token on logout */            $pma_token = $_SESSION['PMA_single_signon_token'];        }        /* End single signon session */        session_write_close();        /* Restart phpMyAdmin session */        session_name($old_session);        if (!empty($old_id)) {            session_id($old_id);        }        session_start();        /* Set the single signon host */        $GLOBALS['cfg']['Server']['host'] = $single_signon_host;        /* Set the single signon port */        $GLOBALS['cfg']['Server']['port'] = $single_signon_port;        /* Configuration update */        $GLOBALS['cfg']['Server'] = array_merge($GLOBALS['cfg']['Server'], $single_signon_cfgupdate);        /* Restore our token */        if (!empty($pma_token)) {            $_SESSION[' PMA_token '] = $pma_token;        }        /**         * Clear user cache.         */        PMA_clearUserCache();    }    // Returns whether we get authentication settings or not    if (empty($PHP_AUTH_USER)) {        unset($_SESSION['LAST_SIGNON_URL']);        return false;    } else {        $_SESSION['LAST_SIGNON_URL'] = $GLOBALS['cfg']['Server']['SignonURL'];        return true;    }} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @global  array     the valid servers settings * @global  integer   the id of the current server * @global  array     the current server settings * @global  string    the current username * @global  string    the current password * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    global $cfg;    global $PHP_AUTH_USER, $PHP_AUTH_PW;    $cfg['Server']['user']     = $PHP_AUTH_USER;    $cfg['Server']['password'] = $PHP_AUTH_PW;    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth_fails(){    /* Session name */    $session_name = $GLOBALS['cfg']['Server']['SignonSession'];    /* Does session exist? */    if (isset($_COOKIE[$session_name])) {        /* End current session */        $old_session = session_name();        $old_id = session_id();        session_write_close();        /* Load single signon session */        session_name($session_name);        session_id($_COOKIE[$session_name]);        session_start();        /* Set error message */        if (! empty($GLOBALS['login_without_password_is_forbidden'])) {            $_SESSION['PMA_single_signon_error_message'] = __('Login without a password is forbidden by configuration (see AllowNoPassword)');        } elseif (! empty($GLOBALS['allowDeny_forbidden'])) {            $_SESSION['PMA_single_signon_error_message'] = __('Access denied');        } elseif (! empty($GLOBALS['no_activity'])) {            $_SESSION['PMA_single_signon_error_message'] = sprintf(__('No activity within %s seconds; please log in again'), $GLOBALS['cfg']['LoginCookieValidity']);        } elseif (PMA_DBI_getError()) {            $_SESSION['PMA_single_signon_error_message'] = PMA_sanitize(PMA_DBI_getError());        } else {            $_SESSION['PMA_single_signon_error_message'] = __('Cannot log in to the MySQL server');        }    }    PMA_auth();} // end of the 'PMA_auth_fails()' function?>
