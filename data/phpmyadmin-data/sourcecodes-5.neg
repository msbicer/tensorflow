<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to export a set of queries to a MS Word document * * @package PhpMyAdmin-Export * @subpackage HTMLWord */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['htmlword'] = array(        'text' => __('Microsoft Word 2000'),        'extension' => 'doc',        'mime_type' => 'application/vnd.ms-word',        'force_file' => true,        'options' => array(            /* what to dump (structure/data/both) */            array('type' => 'begin_group', 'name' => 'dump_what', 'text' => __('Dump table')),            array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data'))),            array('type' => 'end_group'),            /* data options */            array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure'),            array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:')),            array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),            array('type' => 'end_group'),            ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return PMA_exportOutputHandler('</body></html>');    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        global $charset_of_file;        return PMA_exportOutputHandler('<html xmlns:o="urn:schemas-microsoft-com:office:office"    xmlns:x="urn:schemas-microsoft-com:office:word"    xmlns="http://www.w3.org/TR/REC-html40">    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">    <html>    <head>        <meta http-equiv="Content-type" content="text/html;charset=' . (isset($charset_of_file) ? $charset_of_file : 'utf-8') . '" />    </head>    <body>');    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return PMA_exportOutputHandler('<h1>' . __('Database') . ' ' . htmlspecialchars($db) . '</h1>');    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in HTML (Microsoft Word) format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $what;        if (! PMA_exportOutputHandler('<h2>' . __('Dumping data for table') . ' ' . htmlspecialchars($table) . '</h2>')) {            return false;        }        if (! PMA_exportOutputHandler('<table class="width100" cellspacing="1">')) {            return false;        }        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        // If required, get fields name at the first line        if (isset($GLOBALS['htmlword_columns'])) {            $schema_insert = '<tr class="print-category">';            for ($i = 0; $i < $fields_cnt; $i++) {                $schema_insert .= '<td class="print"><b>' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i))) . '</b></td>';            } // end for            $schema_insert .= '</tr>';            if (! PMA_exportOutputHandler($schema_insert)) {                return false;            }        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $schema_insert = '<tr class="print-category">';            for ($j = 0; $j < $fields_cnt; $j++) {                if (! isset($row[$j]) || is_null($row[$j])) {                    $value = $GLOBALS[$what . '_null'];                } elseif ($row[$j] == '0' || $row[$j] != '') {                    $value = $row[$j];                } else {                    $value = '';                }                $schema_insert .= '<td class="print">' . htmlspecialchars($value) . '</td>';            } // end for            $schema_insert .= '</tr>';            if (! PMA_exportOutputHandler($schema_insert)) {                return false;            }        } // end while        PMA_DBI_free_result($result);        if (! PMA_exportOutputHandler('</table>')) {            return false;        }        return true;    }    /**     * Outputs table's structure     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         the end of line sequence     * @param string  $error_url    the url to go back in case of error     * @param bool    $do_relation  whether to include relation comments     * @param bool    $do_comments  whether to include the pmadb-style column comments     *                                as comments in the structure; this is deprecated     *                                but the parameter is left here because export.php     *                                calls PMA_exportStructure() also for other export     *                                types which use this parameter     * @param bool    $do_mime      whether to include mime comments     * @param bool    $dates        whether to include creation/update/check dates     * @param string  $export_mode  'create_table', 'triggers', 'create_view', 'stand_in'     * @param string  $export_type  'server', 'database', 'table'     * @return  bool      Whether it succeeded     *     * @access  public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        if (! PMA_exportOutputHandler('<h2>' . __('Table structure for table') . ' ' . htmlspecialchars($table) . '</h2>')) {            return false;        }        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        if (! PMA_exportOutputHandler('<table class="width100" cellspacing="1">')) {            return false;        }        $columns_cnt = 4;        if ($do_relation && $have_rel) {            $columns_cnt++;        }        if ($do_comments && $cfgRelation['commwork']) {            $columns_cnt++;        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;        }        $schema_insert = '<tr class="print-category">';        $schema_insert .= '<th class="print">' . __('Column') . '</th>';        $schema_insert .= '<td class="print"><b>' . __('Type') . '</b></td>';        $schema_insert .= '<td class="print"><b>' . __('Null') . '</b></td>';        $schema_insert .= '<td class="print"><b>' . __('Default') . '</b></td>';        if ($do_relation && $have_rel) {            $schema_insert .= '<td class="print"><b>' . __('Links to') . '</b></td>';        }        if ($do_comments) {            $schema_insert .= '<td class="print"><b>' . __('Comments') . '</b></td>';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $schema_insert .= '<td class="print"><b>' . htmlspecialchars('MIME') . '</b></td>';            $mime_map = PMA_getMIME($db, $table, true);        }        $schema_insert .= '</tr>';        if (! PMA_exportOutputHandler($schema_insert)) {            return false;        }        $columns = PMA_DBI_get_columns($db, $table);        foreach ($columns as $column) {            $schema_insert = '<tr class="print-category">';            $extracted_fieldspec = PMA_extractFieldSpec($column['Type']);            $type = htmlspecialchars($extracted_fieldspec['print_type']);            if (empty($type)) {                $type     = '&nbsp;';            }            if (! isset($column['Default'])) {                if ($column['Null'] != 'NO') {                    $column['Default'] = 'NULL';                }            }            $fmt_pre = '';            $fmt_post = '';            if (in_array($column['Field'], $unique_keys)) {                $fmt_pre = '<b>' . $fmt_pre;                $fmt_post = $fmt_post . '</b>';            }            if ($column['Key'] == 'PRI') {                $fmt_pre = '<i>' . $fmt_pre;                $fmt_post = $fmt_post . '</i>';            }            $schema_insert .= '<td class="print">' . $fmt_pre . htmlspecialchars($column['Field']) . $fmt_post . '</td>';            $schema_insert .= '<td class="print">' . htmlspecialchars($type) . '</td>';            $schema_insert .= '<td class="print">' . (($column['Null'] == '' || $column['Null'] == 'NO') ? __('No') : __('Yes')) . '</td>';            $schema_insert .= '<td class="print">' . htmlspecialchars(isset($column['Default']) ? $column['Default'] : '') . '</td>';            $field_name = $column['Field'];            if ($do_relation && $have_rel) {                $schema_insert .= '<td class="print">' . (isset($res_rel[$field_name]) ? htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' (' . $res_rel[$field_name]['foreign_field'] . ')') : '') . '</td>';            }            if ($do_comments && $cfgRelation['commwork']) {                $schema_insert .= '<td class="print">' . (isset($comments[$field_name]) ? htmlspecialchars($comments[$field_name]) : '') . '</td>';            }            if ($do_mime && $cfgRelation['mimework']) {                $schema_insert .= '<td class="print">' . (isset($mime_map[$field_name]) ? htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype'])) : '') . '</td>';            }            $schema_insert .= '</tr>';            if (! PMA_exportOutputHandler($schema_insert)) {                return false;            }        } // end while        return PMA_exportOutputHandler('</table>');    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This is in a separate script because it's called from a number of scripts * * @package PhpMyAdmin *//** * Checks whether given link is valid * * @param string $url URL to check * @return boolean True if string can be used as link */function PMA_checkLink($url){    $valid_starts = array(        'http://',        'https://',        './url.php?url=http%3A%2F%2F',        './url.php?url=https%3A%2F%2F',    );    if (defined('PMA_SETUP')) {        $valid_starts[] = '../Documentation.html';        $valid_starts[] = '?page=form&';    } else {        $valid_starts[] = './Documentation.html';    }    foreach ($valid_starts as $val) {        if (substr($url, 0, strlen($val)) == $val) {            return true;        }    }    return false;}/** * Callback function for replacing [a@link@target] links in bb code. * * @param array $found Array of preg matches * @return string Replaced string */function PMA_replaceBBLink($found){    /* Check for valid link */    if (! PMA_checkLink($found[1])) {        return $found[0];    }    /* a-z and _ allowed in target */    if (! empty($found[3]) && preg_match('/[^a-z_]+/i', $found[3])) {        return $found[0];    }    /* Construct target */    $target = '';    if (! empty($found[3])) {        $target = ' target="' . $found[3] . '"';    }    /* Construct url */    if (substr($found[1], 0, 4) == 'http') {        $url = PMA_linkURL($found[1]);    } else {        $url = $found[1];    }    return '<a href="' . $url . '"' . $target . '>';}/** * Sanitizes $message, taking into account our special codes * for formatting. * * If you want to include result in element attribute, you should escape it. * * Examples: * * <p><?php echo PMA_sanitize($foo); ?></p> * * <a title="<?php echo PMA_sanitize($foo, true); ?>">bar</a> * * @param string  $message the message * @param boolean $escape  whether to escape html in result * @param boolean $safe    whether string is safe (can keep < and > chars) * @return  string   the sanitized message */function PMA_sanitize($message, $escape = false, $safe = false){    if (!$safe) {        $message = strtr($message, array('<' => '&lt;', '>' => '&gt;'));    }    /* Interpret bb code */    $replace_pairs = array(        '[i]'       => '<em>',      // deprecated by em        '[/i]'      => '</em>',     // deprecated by em        '[em]'      => '<em>',        '[/em]'     => '</em>',        '[b]'       => '<strong>',  // deprecated by strong        '[/b]'      => '</strong>', // deprecated by strong        '[strong]'  => '<strong>',        '[/strong]' => '</strong>',        '[tt]'      => '<code>',    // deprecated by CODE or KBD        '[/tt]'     => '</code>',   // deprecated by CODE or KBD        '[code]'    => '<code>',        '[/code]'   => '</code>',        '[kbd]'     => '<kbd>',        '[/kbd]'    => '</kbd>',        '[br]'      => '<br />',        '[/a]'      => '</a>',        '[sup]'      => '<sup>',        '[/sup]'      => '</sup>',    );    /* Adjust links for setup, which lives in subfolder */    if (defined('PMA_SETUP')) {        $replace_pairs['[a@Documentation.html'] = '[a@../Documentation.html';    } else {        $replace_pairs['[a@Documentation.html'] = '[a@./Documentation.html';    }    $message = strtr($message, $replace_pairs);    /* Match links in bb code ([a@url@target], where @target is options) */    $pattern = '/\[a@([^]"@]*)(@([^]"]*))?\]/';    /* Find and replace all links */    $message = preg_replace_callback($pattern, 'PMA_replaceBBLink', $message);    /* Possibly escape result */    if ($escape) {        $message = htmlspecialchars($message);    }    return $message;}/** * Sanitize a filename by removing anything besides A-Za-z0-9_.- * * Intended usecase: *    When using a filename in a Content-Disposition header the value should not contain ; or " * * @param   string  The filename * * @return  string  the sanitized filename * */function PMA_sanitize_filename($filename) {    $filename = preg_replace('/[^A-Za-z0-9_.-]/', '_', $filename);    return $filename;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for event management. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sets required globals */function PMA_EVN_setGlobals(){    global $event_status, $event_type, $event_interval;    $event_status        = array(                               'query'   => array('ENABLE',                                                  'DISABLE',                                                  'DISABLE ON SLAVE'),                               'display' => array('ENABLED',                                                  'DISABLED',                                                  'SLAVESIDE_DISABLED')                           );    $event_type          = array('RECURRING',                                 'ONE TIME');    $event_interval      = array('YEAR',                                 'QUARTER',                                 'MONTH',                                 'DAY',                                 'HOUR',                                 'MINUTE',                                 'WEEK',                                 'SECOND',                                 'YEAR_MONTH',                                 'DAY_HOUR',                                 'DAY_MINUTE',                                 'DAY_SECOND',                                 'HOUR_MINUTE',                                 'HOUR_SECOND',                                 'MINUTE_SECOND');}/** * Main function for the events functionality */function PMA_EVN_main(){    global $db;    PMA_EVN_setGlobals();    /**     * Process all requests     */    PMA_EVN_handleEditor();    PMA_EVN_handleExport();    /**     * Display a list of available events     */    $columns = "`EVENT_NAME`, `EVENT_TYPE`, `STATUS`";    $where   = "EVENT_SCHEMA='" . PMA_sqlAddSlashes($db) . "'";    $query   = "SELECT $columns FROM `INFORMATION_SCHEMA`.`EVENTS` "             . "WHERE $where ORDER BY `EVENT_NAME` ASC;";    $items   = PMA_DBI_fetch_result($query);    echo PMA_RTE_getList('event', $items);    /**     * Display a link for adding a new event, if     * the user has the privileges and a link to     * toggle the state of the event scheduler.     */    echo PMA_EVN_getFooterLinks();} // end PMA_EVN_main()/** * Handles editor requests for adding or editing an item */function PMA_EVN_handleEditor(){    global $_REQUEST, $_POST, $errors, $db;    if (! empty($_REQUEST['editor_process_add'])        || ! empty($_REQUEST['editor_process_edit'])    ) {        $sql_query = '';        $item_query = PMA_EVN_getQueryFromRequest();        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()            // Execute the created query            if (! empty($_REQUEST['editor_process_edit'])) {                // Backup the old trigger, in case something goes wrong                $create_item = PMA_DBI_get_definition(                    $db,                    'EVENT',                    $_REQUEST['item_original_name']                );                $drop_item = "DROP EVENT " . PMA_backquote($_REQUEST['item_original_name']) . ";\n";                $result = PMA_DBI_try_query($drop_item);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $drop_item) . '<br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $result = PMA_DBI_try_query($item_query);                    if (! $result) {                        $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br />'                                          . __('MySQL said: ') . PMA_DBI_getError(null);                        // We dropped the old item, but were unable to create the new one                        // Try to restore the backup query                        $result = PMA_DBI_try_query($create_item);                        if (! $result) {                            // OMG, this is really bad! We dropped the query, failed to create a new one                            // and now even the backup query does not execute!                            // This should not happen, but we better handle this just in case.                            $errors[] = __('Sorry, we failed to restore the dropped event.') . '<br />'                                              . __('The backed up query was:') . "\"$create_item\"" . '<br />'                                              . __('MySQL said: ') . PMA_DBI_getError(null);                        }                    } else {                        $message = PMA_Message::success(__('Event %1$s has been modified.'));                        $message->addParam(PMA_backquote($_REQUEST['item_name']));                        $sql_query = $drop_item . $item_query;                    }                }            } else {                // 'Add a new item' mode                $result = PMA_DBI_try_query($item_query);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br /><br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $message = PMA_Message::success(__('Event %1$s has been created.'));                    $message->addParam(PMA_backquote($_REQUEST['item_name']));                    $sql_query = $item_query;                }            }        }        if (count($errors)) {            $message = PMA_Message::error(__('<b>One or more errors have occured while processing your request:</b>'));            $message->addString('<ul>');            foreach ($errors as $string) {                $message->addString('<li>' . $string . '</li>');            }            $message->addString('</ul>');        }        $output = PMA_showMessage($message, $sql_query);        if ($GLOBALS['is_ajax_request']) {            $extra_data = array();            if ($message->isSuccess()) {                $columns = "`EVENT_NAME`, `EVENT_TYPE`, `STATUS`";                $where   = "EVENT_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "                         . "AND EVENT_NAME='" . PMA_sqlAddSlashes($_REQUEST['item_name']) . "'";                $query   = "SELECT $columns FROM `INFORMATION_SCHEMA`.`EVENTS` WHERE $where;";                $event   = PMA_DBI_fetch_single_row($query);                $extra_data['name'] = htmlspecialchars(strtoupper($_REQUEST['item_name']));                $extra_data['new_row'] = PMA_EVN_getRowForList($event);                $extra_data['insert'] = ! empty($event);                $response = $output;            } else {                $response = $message;            }            PMA_ajaxResponse($response, $message->isSuccess(), $extra_data);        }    }    /**     * Display a form used to add/edit a trigger, if necessary     */    if (count($errors) || ( empty($_REQUEST['editor_process_add']) && empty($_REQUEST['editor_process_edit'])        && (! empty($_REQUEST['add_item']) || ! empty($_REQUEST['edit_item'])        || ! empty($_REQUEST['item_changetype'])))    ) { // FIXME: this must be simpler than that        $operation = '';        if (! empty($_REQUEST['item_changetype'])) {            $operation = 'change';        }        // Get the data for the form (if any)        if (! empty($_REQUEST['add_item'])) {            $title = PMA_RTE_getWord('add');            $item = PMA_EVN_getDataFromRequest();            $mode = 'add';        } else if (! empty($_REQUEST['edit_item'])) {            $title = __("Edit event");            if (! empty($_REQUEST['item_name'])                && empty($_REQUEST['editor_process_edit'])                && empty($_REQUEST['item_changetype'])            ) {                $item = PMA_EVN_getDataFromName($_REQUEST['item_name']);                if ($item !== false) {                    $item['item_original_name'] = $item['item_name'];                }            } else {                $item = PMA_EVN_getDataFromRequest();            }            $mode = 'edit';        }        if ($item !== false) {            // Show form            $editor = PMA_EVN_getEditorForm($mode, $operation, $item);            if ($GLOBALS['is_ajax_request']) {                $extra_data = array('title' => $title);                PMA_ajaxResponse($editor, true, $extra_data);            } else {                echo "\n\n<h2>$title</h2>\n\n$editor";                unset($_POST);                include './libraries/footer.inc.php';            }            // exit;        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, false);            } else {                $message->display();            }        }    }} // end PMA_EVN_handleEditor()/** * This function will generate the values that are required to for the editor * * @return  array    Data necessary to create the editor. */function PMA_EVN_getDataFromRequest(){    $retval = array();    $indices = array('item_name',                     'item_original_name',                     'item_status',                     'item_execute_at',                     'item_interval_value',                     'item_interval_field',                     'item_starts',                     'item_ends',                     'item_definition',                     'item_preserve',                     'item_comment',                     'item_definer');    foreach ($indices as $index) {        $retval[$index] = isset($_REQUEST[$index]) ? $_REQUEST[$index] : '';    }    $retval['item_type']        = 'ONE TIME';    $retval['item_type_toggle'] = 'RECURRING';    if (isset($_REQUEST['item_type']) && $_REQUEST['item_type'] == 'RECURRING') {        $retval['item_type']        = 'RECURRING';        $retval['item_type_toggle'] = 'ONE TIME';    }    return $retval;} // end PMA_EVN_getDataFromRequest()/** * This function will generate the values that are required to complete * the "Edit event" form given the name of a event. * * @param   string   $name   The name of the event. * * @return  array    Data necessary to create the editor. */function PMA_EVN_getDataFromName($name){    global $db;    $retval = array();    $columns = "`EVENT_NAME`, `STATUS`, `EVENT_TYPE`, `EXECUTE_AT`, "             . "`INTERVAL_VALUE`, `INTERVAL_FIELD`, `STARTS`, `ENDS`, "             . "`EVENT_DEFINITION`, `ON_COMPLETION`, `DEFINER`, `EVENT_COMMENT`";    $where   = "EVENT_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "             . "AND EVENT_NAME='" . PMA_sqlAddSlashes($name) . "'";    $query   = "SELECT $columns FROM `INFORMATION_SCHEMA`.`EVENTS` WHERE $where;";    $item    = PMA_DBI_fetch_single_row($query);    if (! $item) {        return false;    }    $retval['item_name']   = $item['EVENT_NAME'];    $retval['item_status'] = $item['STATUS'];    $retval['item_type']   = $item['EVENT_TYPE'];    if ($retval['item_type'] == 'RECURRING') {        $retval['item_type_toggle'] = 'ONE TIME';    } else {        $retval['item_type_toggle'] = 'RECURRING';    }    $retval['item_execute_at']     = $item['EXECUTE_AT'];    $retval['item_interval_value'] = $item['INTERVAL_VALUE'];    $retval['item_interval_field'] = $item['INTERVAL_FIELD'];    $retval['item_starts']         = $item['STARTS'];    $retval['item_ends']           = $item['ENDS'];    $retval['item_preserve']       = '';    if ($item['ON_COMPLETION'] == 'PRESERVE') {        $retval['item_preserve']   = " checked='checked'";    }    $retval['item_definition'] = $item['EVENT_DEFINITION'];    $retval['item_definer']    = $item['DEFINER'];    $retval['item_comment']    = $item['EVENT_COMMENT'];    return $retval;} // end PMA_EVN_getDataFromName()/** * Displays a form used to add/edit an event * * @param   string   $mode      If the editor will be used edit an event *                              or add a new one: 'edit' or 'add'. * @param   string   $operation If the editor was previously invoked with *                              JS turned off, this will hold the name of *                              the current operation * @param   array    $item      Data for the event returned by *                              PMA_EVN_getDataFromRequest() or *                              PMA_EVN_getDataFromName() * * @return  string   HTML code for the editor. */function PMA_EVN_getEditorForm($mode, $operation, $item){    global $db, $table, $event_status, $event_type, $event_interval;    // Escape special characters    $need_escape = array(                       'item_original_name',                       'item_name',                       'item_type',                       'item_execute_at',                       'item_interval_value',                       'item_starts',                       'item_ends',                       'item_definition',                       'item_definer',                       'item_comment'                   );    foreach ($need_escape as $index) {        $item[$index] = htmlentities($item[$index], ENT_QUOTES);    }    $original_data = '';    if ($mode == 'edit') {        $original_data = "<input name='item_original_name' "                       . "type='hidden' value='{$item['item_original_name']}'/>\n";    }    // Handle some logic first    if ($operation == 'change') {        if ($item['item_type'] == 'RECURRING') {            $item['item_type']         = 'ONE TIME';            $item['item_type_toggle']  = 'RECURRING';        } else {            $item['item_type']         = 'RECURRING';            $item['item_type_toggle']  = 'ONE TIME';        }    }    if ($item['item_type'] == 'ONE TIME') {        $isrecurring_class = ' hide';        $isonetime_class   = '';    } else {        $isrecurring_class = '';        $isonetime_class   = ' hide';    }    // Create the output    $retval  = "";    $retval .= "<!-- START " . strtoupper($mode) . " EVENT FORM -->\n\n";    $retval .= "<form class='rte_form' action='db_events.php' method='post'>\n";    $retval .= "<input name='{$mode}_item' type='hidden' value='1' />\n";    $retval .= $original_data;    $retval .= PMA_generate_common_hidden_inputs($db, $table) . "\n";    $retval .= "<fieldset>\n";    $retval .= "<legend>" . __('Details') . "</legend>\n";    $retval .= "<table class='rte_table' style='width: 100%'>\n";    $retval .= "<tr>\n";    $retval .= "    <td style='width: 20%;'>" . __('Event name') . "</td>\n";    $retval .= "    <td><input type='text' name='item_name' \n";    $retval .= "               value='{$item['item_name']}'\n";    $retval .= "               maxlength='64' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Status') . "</td>\n";    $retval .= "    <td>\n";    $retval .= "        <select name='item_status'>\n";    foreach ($event_status['display'] as $key => $value) {        $selected = "";        if (! empty($item['item_status']) && $item['item_status'] == $value) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "        </select>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Event type') . "</td>\n";    $retval .= "    <td>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "        <select name='item_type'>";        foreach ($event_type as $key => $value) {            $selected = "";            if (! empty($item['item_type']) && $item['item_type'] == $value) {                $selected = " selected='selected'";            }            $retval .= "<option$selected>$value</option>";        }        $retval .= "        </select>\n";    } else {        $retval .= "        <input name='item_type' type='hidden' \n";        $retval .= "               value='{$item['item_type']}' />\n";        $retval .= "        <div style='width: 49%; float: left; text-align: center; font-weight: bold;'>\n";        $retval .= "            {$item['item_type']}\n";        $retval .= "        </div>\n";        $retval .= "        <input style='width: 49%;' type='submit'\n";        $retval .= "               name='item_changetype'\n";        $retval .= "               value='";        $retval .= sprintf(__('Change to %s'), $item['item_type_toggle']);        $retval .= "' />\n";    }    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='onetime_event_row $isonetime_class'>\n";    $retval .= "    <td>" . __('Execute at') . "</td>\n";    $retval .= "    <td class='nowrap'>\n";    $retval .= "        <input type='text' name='item_execute_at'\n";    $retval .= "               value='{$item['item_execute_at']}'\n";    $retval .= "               class='datetimefield' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='recurring_event_row $isrecurring_class'>\n";    $retval .= "    <td>" . __('Execute every') . "</td>\n";    $retval .= "    <td>\n";    $retval .= "        <input style='width: 49%;' type='text'\n";    $retval .= "               name='item_interval_value'\n";    $retval .= "               value='{$item['item_interval_value']}' />\n";    $retval .= "        <select style='width: 49%;' name='item_interval_field'>";    foreach ($event_interval as $key => $value) {        $selected = "";        if (! empty($item['item_interval_field'])            && $item['item_interval_field'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "        </select>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='recurring_event_row$isrecurring_class'>\n";    $retval .= "    <td>" . _pgettext('Start of recurring event', 'Start') . "</td>\n";    $retval .= "    <td class='nowrap'>\n";    $retval .= "        <input type='text'\n name='item_starts'\n";    $retval .= "               value='{$item['item_starts']}'\n";    $retval .= "               class='datetimefield' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='recurring_event_row$isrecurring_class'>\n";    $retval .= "    <td>" . _pgettext('End of recurring event', 'End') . "</td>\n";    $retval .= "    <td class='nowrap'>\n";    $retval .= "        <input type='text' name='item_ends'\n";    $retval .= "               value='{$item['item_ends']}'\n";    $retval .= "               class='datetimefield' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definition') . "</td>\n";    $retval .= "    <td><textarea name='item_definition' rows='15' cols='40'>";    $retval .= $item['item_definition'];    $retval .= "</textarea></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('On completion preserve') . "</td>\n";    $retval .= "    <td><input type='checkbox' name='item_preserve'{$item['item_preserve']} /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definer') . "</td>\n";    $retval .= "    <td><input type='text' name='item_definer'\n";    $retval .= "               value='{$item['item_definer']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Comment') . "</td>\n";    $retval .= "    <td><input type='text' name='item_comment' maxlength='64'\n";    $retval .= "               value='{$item['item_comment']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "</table>\n";    $retval .= "</fieldset>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "<input type='hidden' name='editor_process_{$mode}'\n";        $retval .= "       value='true' />\n";        $retval .= "<input type='hidden' name='ajax_request' value='true' />\n";    } else {        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='editor_process_{$mode}'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END " . strtoupper($mode) . " EVENT FORM -->\n\n";    return $retval;} // end PMA_EVN_getEditorForm()/** * Composes the query necessary to create an event from an HTTP request. * * @return  string  The CREATE EVENT query. */function PMA_EVN_getQueryFromRequest(){    global $_REQUEST, $errors, $event_status, $event_type, $event_interval;    $query = 'CREATE ';    if (! empty($_REQUEST['item_definer'])) {        if (strpos($_REQUEST['item_definer'], '@') !== false) {            $arr = explode('@', $_REQUEST['item_definer']);            $query .= 'DEFINER=' . PMA_backquote($arr[0]);            $query .= '@' . PMA_backquote($arr[1]) . ' ';        } else {            $errors[] = __('The definer must be in the "username@hostname" format');        }    }    $query .= 'EVENT ';    if (! empty($_REQUEST['item_name'])) {        $query .= PMA_backquote($_REQUEST['item_name']) . ' ';    } else {        $errors[] = __('You must provide an event name');    }    $query .= 'ON SCHEDULE ';    if (! empty($_REQUEST['item_type']) && in_array($_REQUEST['item_type'], $event_type)) {        if ($_REQUEST['item_type'] == 'RECURRING') {            if (! empty($_REQUEST['item_interval_value'])                && !empty($_REQUEST['item_interval_field'])                && in_array($_REQUEST['item_interval_field'], $event_interval)            ) {                $query .= 'EVERY ' . intval($_REQUEST['item_interval_value']) . ' ';                $query .= $_REQUEST['item_interval_field'] . ' ';            } else {                $errors[] = __('You must provide a valid interval value for the event.');            }            if (! empty($_REQUEST['item_starts'])) {                $query .= "STARTS '" . PMA_sqlAddSlashes($_REQUEST['item_starts']) . "' ";            }            if (! empty($_REQUEST['item_ends'])) {                $query .= "ENDS '" . PMA_sqlAddSlashes($_REQUEST['item_ends']) . "' ";            }        } else {            if (! empty($_REQUEST['item_execute_at'])) {                $query .= "AT '" . PMA_sqlAddSlashes($_REQUEST['item_execute_at']) . "' ";            } else {                $errors[] = __('You must provide a valid execution time for the event.');            }        }    } else {        $errors[] = __('You must provide a valid type for the event.');    }    $query .= 'ON COMPLETION ';    if (empty($_REQUEST['item_preserve'])) {        $query .= 'NOT ';    }    $query .= 'PRESERVE ';    if (! empty($_REQUEST['item_status'])) {        foreach ($event_status['display'] as $key => $value) {            if ($value == $_REQUEST['item_status']) {                $query .= $event_status['query'][$key] . ' ';                break;            }        }    }    $query .= 'DO ';    if (! empty($_REQUEST['item_definition'])) {        $query .= $_REQUEST['item_definition'];    } else {        $errors[] = __('You must provide an event definition.');    }    return $query;} // end PMA_EVN_getQueryFromRequest()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for editing and inserting new table rows * * register_globals_save (mark this file save for disabling register globals) * * @package PhpMyAdmin *//** * Gets the variables sent or posted to this script and displays the header */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';/** * Ensures db and table are valid, else moves to the "parent" script */require_once './libraries/db_table_exists.lib.php';// load additional configuration variablesif (PMA_DRIZZLE) {    include_once './libraries/data_drizzle.inc.php';} else {    include_once './libraries/data_mysql.inc.php';}/** * Sets global variables. * Here it's better to use a if, instead of the '?' operator * to avoid setting a variable to '' when it's not present in $_REQUEST */if (isset($_REQUEST['where_clause'])) {    $where_clause = $_REQUEST['where_clause'];}if (isset($_REQUEST['clause_is_unique'])) {    $clause_is_unique = $_REQUEST['clause_is_unique'];}if (isset($_SESSION['edit_next'])) {    $where_clause = $_SESSION['edit_next'];    unset($_SESSION['edit_next']);    $after_insert = 'edit_next';}if (isset($_REQUEST['sql_query'])) {    $sql_query = $_REQUEST['sql_query'];}if (isset($_REQUEST['ShowFunctionFields'])) {    $cfg['ShowFunctionFields'] = $_REQUEST['ShowFunctionFields'];}if (isset($_REQUEST['ShowFieldTypesInDataEditView'])) {    $cfg['ShowFieldTypesInDataEditView'] = $_REQUEST['ShowFieldTypesInDataEditView'];}if (isset($_REQUEST['default_action'])) {    $default_action = $_REQUEST['default_action'];}/** * file listing */require_once './libraries/file_listing.php';/** * Defines the url to return to in case of error in a sql statement * (at this point, $GLOBALS['goto'] will be set but could be empty) */if (empty($GLOBALS['goto'])) {    if (strlen($table)) {        // avoid a problem (see bug #2202709)        $GLOBALS['goto'] = 'tbl_sql.php';    } else {        $GLOBALS['goto'] = 'db_sql.php';    }}/** * @todo check if we could replace by "db_|tbl_" - please clarify!? */$_url_params = array(    'db'        => $db,    'sql_query' => $sql_query);if (preg_match('@^tbl_@', $GLOBALS['goto'])) {    $_url_params['table'] = $table;}$err_url = $GLOBALS['goto'] . PMA_generate_common_url($_url_params);unset($_url_params);/** * Sets parameters for links * where is this variable used? * replace by PMA_generate_common_url($url_params); */$url_query = PMA_generate_common_url($url_params, 'html', '');/** * get table information * @todo should be done by a Table object */require_once './libraries/tbl_info.inc.php';/** * Get comments for table fileds/columns */$comments_map = array();if ($GLOBALS['cfg']['ShowPropertyComments']) {    $comments_map = PMA_getComments($db, $table);}/** * START REGULAR OUTPUT *//** * used in ./libraries/header.inc.php to load JavaScript library file */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'tbl_change.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'gis_data_editor.js';/** * HTTP and HTML headers */require_once './libraries/header.inc.php';/** * Displays the query submitted and its result * * @todo where does $disp_message and $disp_query come from??? */if (! empty($disp_message)) {    if (! isset($disp_query)) {        $disp_query     = null;    }    PMA_showMessage($disp_message, $disp_query);}/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';/** * Get the analysis of SHOW CREATE TABLE for this table * @todo should be handled by class Table */$show_create_table = PMA_DBI_fetch_value(        'SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table),        0, 1);$analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));unset($show_create_table);/** * Get the list of the fields of the current table */PMA_DBI_select_db($db);$table_fields = array_values(PMA_DBI_get_columns($db, $table));$rows               = array();if (isset($where_clause)) {    // when in edit mode load all selected rows from table    $insert_mode = false;    if (is_array($where_clause)) {        $where_clause_array = $where_clause;    } else {        $where_clause_array = array(0 => $where_clause);    }    $result             = array();    $found_unique_key   = false;    $where_clauses      = array();    foreach ($where_clause_array as $key_id => $where_clause) {        $local_query           = 'SELECT * FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';';        $result[$key_id]       = PMA_DBI_query($local_query, null, PMA_DBI_QUERY_STORE);        $rows[$key_id]         = PMA_DBI_fetch_assoc($result[$key_id]);        $where_clauses[$key_id] = str_replace('\\', '\\\\', $where_clause);        // No row returned        if (! $rows[$key_id]) {            unset($rows[$key_id], $where_clause_array[$key_id]);            PMA_showMessage(__('MySQL returned an empty result set (i.e. zero rows).'), $local_query);            echo "\n";            include './libraries/footer.inc.php';        } else { // end if (no row returned)            $meta = PMA_DBI_get_fields_meta($result[$key_id]);            list($unique_condition, $tmp_clause_is_unique) = PMA_getUniqueCondition($result[$key_id], count($meta), $meta, $rows[$key_id], true);            if (! empty($unique_condition)) {                $found_unique_key = true;            }            unset($unique_condition, $tmp_clause_is_unique);        }    }} else {    // no primary key given, just load first row - but what happens if table is empty?    $insert_mode = true;    $result = PMA_DBI_query('SELECT * FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table) . ' LIMIT 1;', null, PMA_DBI_QUERY_STORE);    $rows = array_fill(0, $cfg['InsertRows'], false);}// Copying a row - fetched data will be inserted as a new row, therefore the where clause is needless.if (isset($default_action) && $default_action === 'insert') {    unset($where_clause, $where_clauses);}// retrieve keys into foreign fields, if any$foreigners  = PMA_getForeigners($db, $table);/** * Displays the form */// autocomplete feature of IE kills the "onchange" event handler and it//        must be replaced by the "onpropertychange" one in this case$chg_evt_handler = (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 5 && PMA_USR_BROWSER_VER < 7)                 ? 'onpropertychange'                 : 'onchange';// Had to put the URI because when hosted on an https server,// some browsers send wrongly this form to the http server.    ?><!-- Set on key handler for moving using by Ctrl+arrows --><script src="./js/keyhandler.js" type="text/javascript"></script><script type="text/javascript">//<![CDATA[var switch_movement = 0;document.onkeydown = onKeyDownArrowsHandler;//]]></script>    <?php$_form_params = array(    'db'        => $db,    'table'     => $table,    'goto'      => $GLOBALS['goto'],    'err_url'   => $err_url,    'sql_query' => $sql_query,);if (isset($where_clauses)) {    foreach ($where_clause_array as $key_id => $where_clause) {        $_form_params['where_clause[' . $key_id . ']'] = trim($where_clause);    }}if (isset($clause_is_unique)) {    $_form_params['clause_is_unique'] = $clause_is_unique;}?><!-- Insert/Edit form --><form id="insertForm" method="post" action="tbl_replace.php" name="insertForm" <?php if ($is_upload) { echo ' enctype="multipart/form-data"'; } ?>><?phpecho PMA_generate_common_hidden_inputs($_form_params);$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));// Set if we passed the first timestamp field$timestamp_seen = 0;$fields_cnt     = count($table_fields);$tabindex = 0;$tabindex_for_function = +3000;$tabindex_for_null     = +6000;$tabindex_for_value    = 0;$o_rows   = 0;$biggest_max_file_size = 0;// user can toggle the display of Function column// (currently does not work for multi-edits)$url_params['db'] = $db;$url_params['table'] = $table;if (isset($where_clause)) {    $url_params['where_clause'] = trim($where_clause);}if (! empty($sql_query)) {    $url_params['sql_query'] = $sql_query;}if (! $cfg['ShowFunctionFields'] || ! $cfg['ShowFieldTypesInDataEditView']) {    echo __('Show');}if (! $cfg['ShowFunctionFields']) {    $this_url_params = array_merge($url_params,        array('ShowFunctionFields' => 1, 'ShowFieldTypesInDataEditView' => $cfg['ShowFieldTypesInDataEditView'], 'goto' => 'sql.php'));    echo ' : <a href="tbl_change.php' . PMA_generate_common_url($this_url_params) . '">' . __('Function') . '</a>' . "\n";}if (! $cfg['ShowFieldTypesInDataEditView']) {    $this_other_url_params = array_merge($url_params,        array('ShowFieldTypesInDataEditView' => 1, 'ShowFunctionFields' => $cfg['ShowFunctionFields'], 'goto' => 'sql.php'));    echo ' : <a href="tbl_change.php' . PMA_generate_common_url($this_other_url_params) . '">' . __('Type') . '</a>' . "\n";}foreach ($rows as $row_id => $vrow) {    if ($vrow === false) {        unset($vrow);    }    $jsvkey = $row_id;    $rownumber_param = '&amp;rownumber=' . $row_id;    $vkey = '[multi_edit][' . $jsvkey . ']';    $vresult = (isset($result) && is_array($result) && isset($result[$row_id]) ? $result[$row_id] : $result);    if ($insert_mode && $row_id > 0) {        echo '<input type="checkbox" checked="checked" name="insert_ignore_' . $row_id . '" id="insert_ignore_' . $row_id . '" />';        echo '<label for="insert_ignore_' . $row_id . '">' . __('Ignore') . '</label><br />' . "\n";    }?>    <table class="insertRowTable">    <thead>        <tr>            <th><?php echo __('Column'); ?></th> <?php     if ($cfg['ShowFieldTypesInDataEditView']) {        $this_url_params = array_merge($url_params,            array('ShowFieldTypesInDataEditView' => 0, 'ShowFunctionFields' => $cfg['ShowFunctionFields'], 'goto' => 'sql.php'));        echo '          <th><a href="tbl_change.php' . PMA_generate_common_url($this_url_params) . '" title="' . __('Hide') . '">' . __('Type') . '</a></th>' . "\n";    }    if ($cfg['ShowFunctionFields']) {        $this_url_params = array_merge($url_params,            array('ShowFunctionFields' => 0, 'ShowFieldTypesInDataEditView' => $cfg['ShowFieldTypesInDataEditView'], 'goto' => 'sql.php'));        echo '          <th><a href="tbl_change.php' . PMA_generate_common_url($this_url_params) . '" title="' . __('Hide') . '">' . __('Function') . '</a></th>' . "\n";    }?>            <th><?php echo __('Null'); ?></th>            <th><?php echo __('Value'); ?></th>        </tr>    </thead>    <tfoot>        <tr>            <th colspan="5" align="right" class="tblFooters">                <input type="submit" value="<?php echo __('Go'); ?>" />            </th>        </tr>    </tfoot>    <tbody><?php    // Sets a multiplier used for input-field counts (as zero cannot be used, advance the counter plus one)    $m_rows = $o_rows + 1;    $odd_row = true;    for ($i = 0; $i < $fields_cnt; $i++) {        if (! isset($table_fields[$i]['processed'])) {            $table_fields[$i]['Field_html'] = htmlspecialchars($table_fields[$i]['Field']);            $table_fields[$i]['Field_md5']  = md5($table_fields[$i]['Field']);            // True_Type contains only the type (stops at first bracket)            $table_fields[$i]['True_Type']  = preg_replace('@\(.*@s', '', $table_fields[$i]['Type']);            // d a t e t i m e            //            // Current date should not be set as default if the field is NULL            // for the current row, but do not put here the current datetime            // if there is a default value (the real default value will be set            // in the Default value logic below)            // Note: (tested in MySQL 4.0.16): when lang is some UTF-8,            // $field['Default'] is not set if it contains NULL:            // Array ([Field] => d [Type] => datetime [Null] => YES [Key] => [Extra] => [True_Type] => datetime)            // but, look what we get if we switch to iso: (Default is NULL)            // Array ([Field] => d [Type] => datetime [Null] => YES [Key] => [Default] => [Extra] => [True_Type] => datetime)            // so I force a NULL into it (I don't think it's possible            // to have an empty default value for DATETIME)            // then, the "if" after this one will work            if ($table_fields[$i]['Type'] == 'datetime'             && ! isset($table_fields[$i]['Default'])             && isset($table_fields[$i]['Null'])             && $table_fields[$i]['Null'] == 'YES') {                $table_fields[$i]['Default'] = null;            }            $table_fields[$i]['len']                = preg_match('@float|double@', $table_fields[$i]['Type']) ? 100 : -1;            if (isset($comments_map[$table_fields[$i]['Field']])) {                $table_fields[$i]['Field_title'] = '<span style="border-bottom: 1px dashed black;" title="'                    . htmlspecialchars($comments_map[$table_fields[$i]['Field']]) . '">'                    . $table_fields[$i]['Field_html'] . '</span>';            } else {                $table_fields[$i]['Field_title'] = $table_fields[$i]['Field_html'];            }            // The type column.            // Fix for bug #3152931 'ENUM and SET cannot have "Binary" option'            // If check to ensure types such as "enum('one','two','binary',..)" or            // "enum('one','two','varbinary',..)" are not categorized as binary.            if (stripos($table_fields[$i]['Type'], 'binary') === 0            || stripos($table_fields[$i]['Type'], 'varbinary') === 0) {                $table_fields[$i]['is_binary'] = stristr($table_fields[$i]['Type'], 'binary');            } else {                $table_fields[$i]['is_binary'] = false;            }            // If check to ensure types such as "enum('one','two','blob',..)" or            // "enum('one','two','tinyblob',..)" etc. are not categorized as blob.            if (stripos($table_fields[$i]['Type'], 'blob') === 0            || stripos($table_fields[$i]['Type'], 'tinyblob') === 0            || stripos($table_fields[$i]['Type'], 'mediumblob') === 0            || stripos($table_fields[$i]['Type'], 'longblob') === 0) {                $table_fields[$i]['is_blob']   = stristr($table_fields[$i]['Type'], 'blob');            } else {                $table_fields[$i]['is_blob'] = false;            }            // If check to ensure types such as "enum('one','two','char',..)" or            // "enum('one','two','varchar',..)" are not categorized as char.            if (stripos($table_fields[$i]['Type'], 'char') === 0            || stripos($table_fields[$i]['Type'], 'varchar') === 0) {                $table_fields[$i]['is_char']   = stristr($table_fields[$i]['Type'], 'char');            } else {                $table_fields[$i]['is_char'] = false;            }            $table_fields[$i]['first_timestamp'] = false;            switch ($table_fields[$i]['True_Type']) {                case 'set':                    $table_fields[$i]['pma_type'] = 'set';                    $table_fields[$i]['wrap']  = '';                    break;                case 'enum':                    $table_fields[$i]['pma_type'] = 'enum';                    $table_fields[$i]['wrap']  = '';                    break;                case 'timestamp':                    if (!$timestamp_seen) {   // can only occur once per table                        $timestamp_seen  = 1;                        $table_fields[$i]['first_timestamp'] = true;                    }                    $table_fields[$i]['pma_type'] = $table_fields[$i]['Type'];                    $table_fields[$i]['wrap']  = ' nowrap="nowrap"';                    break;                default:                    $table_fields[$i]['pma_type'] = $table_fields[$i]['Type'];                    $table_fields[$i]['wrap']  = ' nowrap="nowrap"';                    break;            }        }        $field = $table_fields[$i];        $extracted_fieldspec = PMA_extractFieldSpec($field['Type']);        if (-1 === $field['len']) {            $field['len'] = PMA_DBI_field_len($vresult, $i);            // length is unknown for geometry fields, make enough space to edit very simple WKTs            if (-1 === $field['len']) {                $field['len'] = 30;            }        }        //Call validation when the form submited...        $unnullify_trigger = $chg_evt_handler . "=\"return verificationsAfterFieldChange('". PMA_escapeJsString($field['Field_md5']) . "', '"            . PMA_escapeJsString($jsvkey) . "','".$field['pma_type']."')\"";        // Use an MD5 as an array index to avoid having special characters in the name atttibute (see bug #1746964 )        $field_name_appendix =  $vkey . '[' . $field['Field_md5'] . ']';        if ($field['Type'] == 'datetime'         && ! isset($field['Default'])         && ! is_null($field['Default'])         && ($insert_mode || ! isset($vrow[$field['Field']]))) {            // INSERT case or            // UPDATE case with an NULL value            $vrow[$field['Field']] = date('Y-m-d H:i:s', time());        }        ?>        <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">            <td <?php echo ($cfg['LongtextDoubleTextarea'] && strstr($field['True_Type'], 'longtext') ? 'rowspan="2"' : ''); ?> align="center">                <?php echo $field['Field_title']; ?>                <input type="hidden" name="fields_name<?php echo $field_name_appendix; ?>" value="<?php echo $field['Field_html']; ?>"/>            </td><?php if ($cfg['ShowFieldTypesInDataEditView']) { ?>             <td align="center"<?php echo $field['wrap']; ?>><span class="column_type"><?php echo $field['pma_type']; ?></span>             </td>         <?php } //End if        // Get a list of GIS data types.        $gis_data_types = PMA_getGISDatatypes();        // Prepares the field value        $real_null_value = false;        $special_chars_encoded = '';        if (isset($vrow)) {            // (we are editing)            if (is_null($vrow[$field['Field']])) {                $real_null_value = true;                $vrow[$field['Field']]    = '';                $special_chars   = '';                $data            = $vrow[$field['Field']];            } elseif ($field['True_Type'] == 'bit') {                $special_chars = PMA_printable_bit_value($vrow[$field['Field']], $extracted_fieldspec['spec_in_brackets']);            } elseif (in_array($field['True_Type'], $gis_data_types)) {                // Convert gis data to Well Know Text format                $vrow[$field['Field']] = PMA_asWKT($vrow[$field['Field']], true);                $special_chars = htmlspecialchars($vrow[$field['Field']]);            } else {                // special binary "characters"                if ($field['is_binary'] || ($field['is_blob'] && ! $cfg['ProtectBinary'])) {                    if ($_SESSION['tmp_user_values']['display_binary_as_hex'] && $cfg['ShowFunctionFields']) {                        $vrow[$field['Field']] = bin2hex($vrow[$field['Field']]);                        $field['display_binary_as_hex'] = true;                    } else {                        $vrow[$field['Field']] = PMA_replace_binary_contents($vrow[$field['Field']]);                    }                } // end if                $special_chars   = htmlspecialchars($vrow[$field['Field']]);            //We need to duplicate the first \n or otherwise we will lose the first newline entered in a VARCHAR or TEXT column                $special_chars_encoded = PMA_duplicateFirstNewline($special_chars);                $data            = $vrow[$field['Field']];            } // end if... else...            //when copying row, it is useful to empty auto-increment column to prevent duplicate key error            if (isset($default_action) && $default_action === 'insert') {                if ($field['Key'] === 'PRI' && strpos($field['Extra'], 'auto_increment') !== false) {                    $data = $special_chars_encoded = $special_chars = null;                }            }            // If a timestamp field value is not included in an update            // statement MySQL auto-update it to the current timestamp;            // however, things have changed since MySQL 4.1, so            // it's better to set a fields_prev in this situation            $backup_field  = '<input type="hidden" name="fields_prev'                . $field_name_appendix . '" value="'                . htmlspecialchars($vrow[$field['Field']]) . '" />';        } else {            // (we are inserting)            // display default values            if (! isset($field['Default'])) {                $field['Default'] = '';                $real_null_value          = true;                $data                     = '';            } else {                $data                     = $field['Default'];            }            if ($field['True_Type'] == 'bit') {                $special_chars = PMA_convert_bit_default_value($field['Default']);            } else {                $special_chars = htmlspecialchars($field['Default']);            }            $backup_field  = '';            $special_chars_encoded = PMA_duplicateFirstNewline($special_chars);            // this will select the UNHEX function while inserting            if (($field['is_binary'] || ($field['is_blob'] && ! $cfg['ProtectBinary'])) && $_SESSION['tmp_user_values']['display_binary_as_hex'] && $cfg['ShowFunctionFields']) {                $field['display_binary_as_hex'] = true;            }        }        $idindex  = ($o_rows * $fields_cnt) + $i + 1;        $tabindex = $idindex;        // Get a list of data types that are not yet supported.        $no_support_types = PMA_unsupportedDatatypes();        // The function column        // -------------------        // We don't want binary data to be destroyed        // Note: from the MySQL manual: "BINARY doesn't affect how the column is        //       stored or retrieved" so it does not mean that the contents is        //       binary        if ($cfg['ShowFunctionFields']) {            if (($cfg['ProtectBinary'] && $field['is_blob'] && !$is_upload)             || ($cfg['ProtectBinary'] == 'all' && $field['is_binary'])) {                echo '        <td align="center">' . __('Binary') . '</td>' . "\n";            } elseif (strstr($field['True_Type'], 'enum') || strstr($field['True_Type'], 'set') || in_array($field['pma_type'], $no_support_types)) {                echo '        <td align="center">--</td>' . "\n";            } else {                ?>            <td>                <select name="funcs<?php echo $field_name_appendix; ?>" <?php echo $unnullify_trigger; ?> tabindex="<?php echo ($tabindex + $tabindex_for_function); ?>" id="field_<?php echo $idindex; ?>_1"><?php    echo PMA_getFunctionsForField($field, $insert_mode);?>                </select>            </td>                <?php            }        } // end if ($cfg['ShowFunctionFields'])        // The null column        // ---------------        $foreignData = PMA_getForeignData($foreigners, $field['Field'], false, '', '');        echo '        <td>' . "\n";        if ($field['Null'] == 'YES') {            echo '            <input type="hidden" name="fields_null_prev' . $field_name_appendix . '"';            if ($real_null_value && !$field['first_timestamp']) {                echo ' value="on"';            }            echo ' />' . "\n";            echo '            <input type="checkbox" class="checkbox_null" tabindex="' . ($tabindex + $tabindex_for_null) . '"'                 . ' name="fields_null' . $field_name_appendix . '"';            if ($real_null_value && !$field['first_timestamp']) {                echo ' checked="checked"';            }            echo ' id="field_' . ($idindex) . '_2" />';            // nullify_code is needed by the js nullify() function            if (strstr($field['True_Type'], 'enum')) {                if (strlen($field['Type']) > 20) {                    $nullify_code = '1';                } else {                    $nullify_code = '2';                }            } elseif (strstr($field['True_Type'], 'set')) {                $nullify_code = '3';            } elseif ($foreigners && isset($foreigners[$field['Field']]) && $foreignData['foreign_link'] == false) {                // foreign key in a drop-down                $nullify_code = '4';            } elseif ($foreigners && isset($foreigners[$field['Field']]) && $foreignData['foreign_link'] == true) {                // foreign key with a browsing icon                $nullify_code = '6';            } else {                $nullify_code = '5';            }            // to be able to generate calls to nullify() in jQuery            echo '<input type="hidden" class="nullify_code" name="nullify_code' . $field_name_appendix . '" value="' . $nullify_code . '" />';            echo '<input type="hidden" class="hashed_field" name="hashed_field' . $field_name_appendix . '" value="' .  $field['Field_md5'] . '" />';            echo '<input type="hidden" class="multi_edit" name="multi_edit' . $field_name_appendix . '" value="' . PMA_escapeJsString($vkey) . '" />';        }        echo '        </td>' . "\n";        // The value column (depends on type)        // ----------------        // See bug #1667887 for the reason why we don't use the maxlength        // HTML attribute        echo '        <td>' . "\n";        // Will be used by js/tbl_change.js to set the default value        // for the "Continue insertion" feature        echo '<span class="default_value hide">' . $special_chars . '</span>';        if ($foreignData['foreign_link'] == true) {            echo $backup_field . "\n";            ?>            <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>"                value="foreign" />            <input type="text" name="fields<?php echo $field_name_appendix; ?>"                class="textfield" <?php echo $unnullify_trigger; ?>                tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                id="field_<?php echo ($idindex); ?>_3"                value="<?php echo htmlspecialchars($data); ?>" />                <a class="hide foreign_values_anchor" target="_blank" onclick="window.open(this.href, 'foreigners', 'width=640,height=240,scrollbars=yes,resizable=yes'); return false;" href="browse_foreigners.php?<?php echo PMA_generate_common_url($db, $table); ?>&amp;field=<?php echo PMA_escapeJsString(urlencode($field['Field']) . $rownumber_param); ?>"><?php echo str_replace("'", "\'", $titles['Browse']); ?></a>            <?php        } elseif (is_array($foreignData['disp_row'])) {            echo $backup_field . "\n";            ?>            <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>"                value="foreign" />            <select name="fields<?php echo $field_name_appendix; ?>"                <?php echo $unnullify_trigger; ?>                class="textfield"                tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                id="field_<?php echo ($idindex); ?>_3">                <?php echo PMA_foreignDropdown($foreignData['disp_row'], $foreignData['foreign_field'], $foreignData['foreign_display'], $data, $cfg['ForeignKeyMaxLimit']); ?>            </select>            <?php                // still needed? :            unset($foreignData['disp_row']);        } elseif ($cfg['LongtextDoubleTextarea'] && strstr($field['pma_type'], 'longtext')) {            ?>            &nbsp;</td>        </tr>        <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">            <td colspan="5" align="right">                <?php echo $backup_field . "\n"; ?>                <textarea name="fields<?php echo $field_name_appendix; ?>"                    rows="<?php echo ($cfg['TextareaRows']*2); ?>"                    cols="<?php echo ($cfg['TextareaCols']*2); ?>"                    dir="<?php echo $text_dir; ?>"                    id="field_<?php echo ($idindex); ?>_3"                    <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    ><?php echo $special_chars_encoded; ?></textarea>          <?php        } elseif (strstr($field['pma_type'], 'text')) {            echo $backup_field . "\n";            ?>                <textarea name="fields<?php echo $field_name_appendix; ?>"                    rows="<?php echo $cfg['TextareaRows']; ?>"                    cols="<?php echo $cfg['TextareaCols']; ?>"                    dir="<?php echo $text_dir; ?>"                    id="field_<?php echo ($idindex); ?>_3"                    <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    ><?php echo $special_chars_encoded; ?></textarea>            <?php            echo "\n";            if (strlen($special_chars) > 32000) {                echo "        </td>\n";                echo '        <td>' . __('Because of its length,<br /> this column might not be editable');            }        } elseif ($field['pma_type'] == 'enum') {            if (! isset($table_fields[$i]['values'])) {                $table_fields[$i]['values'] = array();                foreach ($extracted_fieldspec['enum_set_values'] as $val) {                    // Removes automatic MySQL escape format                    $val = str_replace('\'\'', '\'', str_replace('\\\\', '\\', $val));                    $table_fields[$i]['values'][] = array(                        'plain' => $val,                        'html'  => htmlspecialchars($val),                    );                }            }            $field_enum_values = $table_fields[$i]['values'];            ?>                <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="enum" />                <input type="hidden" name="fields<?php echo $field_name_appendix; ?>" value="" />            <?php            echo "\n" . '            ' . $backup_field . "\n";            // show dropdown or radio depend on length            if (strlen($field['Type']) > 20) {                ?>                <select name="fields<?php echo $field_name_appendix; ?>"                    <?php echo $unnullify_trigger; ?>                    class="textfield"                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    id="field_<?php echo ($idindex); ?>_3">                    <option value="">&nbsp;</option>                <?php                echo "\n";                foreach ($field_enum_values as $enum_value) {                    echo '                ';                    echo '<option value="' . $enum_value['html'] . '"';                    if ($data == $enum_value['plain']                     || ($data == ''                      && (! isset($where_clause) || $field['Null'] != 'YES')                      && isset($field['Default'])                      && $enum_value['plain'] == $field['Default'])) {                        echo ' selected="selected"';                    }                    echo '>' . $enum_value['html'] . '</option>' . "\n";                } // end for                ?>                </select>                <?php            } else {                $j = 0;                foreach ($field_enum_values as $enum_value) {                    echo '            ';                    echo '<input type="radio" name="fields' . $field_name_appendix . '"';                    echo ' class="textfield"';                    echo ' value="' . $enum_value['html'] . '"';                    echo ' id="field_' . ($idindex) . '_3_'  . $j . '"';                    echo $unnullify_trigger;                    if ($data == $enum_value['plain']                     || ($data == ''                      && (! isset($where_clause) || $field['Null'] != 'YES')                      && isset($field['Default'])                      && $enum_value['plain'] == $field['Default'])) {                        echo ' checked="checked"';                    }                    echo ' tabindex="' . ($tabindex + $tabindex_for_value) . '" />';                    echo '<label for="field_' . $idindex . '_3_' . $j . '">'                        . $enum_value['html'] . '</label>' . "\n";                    $j++;                } // end for            } // end else        } elseif ($field['pma_type'] == 'set') {            if (! isset($table_fields[$i]['values'])) {                $table_fields[$i]['values'] = array();                foreach ($extracted_fieldspec['enum_set_values'] as $val) {                    $table_fields[$i]['values'][] = array(                        'plain' => $val,                        'html'  => htmlspecialchars($val),                    );                }                $table_fields[$i]['select_size'] = min(4, count($table_fields[$i]['values']));            }            $field_set_values = $table_fields[$i]['values'];            $select_size = $table_fields[$i]['select_size'];            $vset = array_flip(explode(',', $data));            echo $backup_field . "\n";            ?>                <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="set" />                <select name="fields<?php echo $field_name_appendix . '[]'; ?>"                    class="textfield"                    size="<?php echo $select_size; ?>"                    multiple="multiple" <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    id="field_<?php echo ($idindex); ?>_3">            <?php            foreach ($field_set_values as $field_set_value) {                echo '                ';                echo '<option value="' . $field_set_value['html'] . '"';                if (isset($vset[$field_set_value['plain']])) {                    echo ' selected="selected"';                }                echo '>' . $field_set_value['html'] . '</option>' . "\n";            } // end for            ?>                </select>            <?php        // We don't want binary data destroyed        } elseif ($field['is_binary'] || $field['is_blob']) {            if (($cfg['ProtectBinary'] && $field['is_blob'])                || ($cfg['ProtectBinary'] == 'all' && $field['is_binary'])            ) {                echo "\n";                    // for blobstreaming                if (PMA_BS_IsTablePBMSEnabled($db, $table, $tbl_type)                    && PMA_BS_IsPBMSReference($data, $db)                ) {                    echo '<input type="hidden" name="remove_blob_ref_' . $field['Field_md5'] . $vkey . '" value="' . $data . '" />';                    echo '<input type="checkbox" name="remove_blob_repo_' . $field['Field_md5'] . $vkey . '" /> ' . __('Remove BLOB Repository Reference') . "<br />";                    echo PMA_BS_CreateReferenceLink($data, $db);                    echo "<br />";                } else {                    echo __('Binary - do not edit');                    if (isset($data)) {                        $data_size = PMA_formatByteDown(strlen(stripslashes($data)), 3, 1);                        echo ' ('. $data_size [0] . ' ' . $data_size[1] . ')';                        unset($data_size);                    }                    echo "\n";                }   // end if (PMA_BS_IsTablePBMSEnabled($db, $table, $tbl_type) && PMA_BS_IsPBMSReference($data, $db))                ?>                <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="protected" />                <input type="hidden" name="fields<?php echo $field_name_appendix; ?>" value="" />                <?php            } elseif ($field['is_blob']) {                echo "\n";                echo $backup_field . "\n";                ?>                <textarea name="fields<?php echo $field_name_appendix; ?>"                    rows="<?php echo $cfg['TextareaRows']; ?>"                    cols="<?php echo $cfg['TextareaCols']; ?>"                    dir="<?php echo $text_dir; ?>"                    id="field_<?php echo ($idindex); ?>_3"                    <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    ><?php echo $special_chars_encoded; ?></textarea>                <?php            } else {                // field size should be at least 4 and max $cfg['LimitChars']                $fieldsize = min(max($field['len'], 4), $cfg['LimitChars']);                echo "\n";                echo $backup_field . "\n";                ?>                <input type="text" name="fields<?php echo $field_name_appendix; ?>"                    value="<?php echo $special_chars; ?>" size="<?php echo $fieldsize; ?>"                    class="textfield" <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    id="field_<?php echo ($idindex); ?>_3" />                <?php            } // end if...elseif...else            // Upload choice (only for BLOBs because the binary            // attribute does not imply binary contents)            // (displayed whatever value the ProtectBinary has)            if ($is_upload && $field['is_blob']) {                // check if field type is of longblob and  if the table is PBMS enabled.                if (($field['pma_type'] == "longblob")                    && PMA_BS_IsTablePBMSEnabled($db, $table, $tbl_type)                ) {                    echo '<br />';                    echo '<input type="checkbox" name="upload_blob_repo' . $vkey . '[' . $field['Field_md5'] . ']" /> ' .  __('Upload to BLOB repository');                }                echo '<br />';                echo '<input type="file" name="fields_upload' . $vkey . '[' . $field['Field_md5'] . ']" class="textfield" id="field_' . $idindex . '_3" size="10" ' . $unnullify_trigger . '/>&nbsp;';                // find maximum upload size, based on field type                /**                 * @todo with functions this is not so easy, as you can basically                 * process any data with function like MD5                 */                $max_field_sizes = array(                    'tinyblob'   =>        '256',                    'blob'       =>      '65536',                    'mediumblob' =>   '16777216',                    'longblob'   => '4294967296'); // yeah, really                $this_field_max_size = $max_upload_size; // from PHP max                if ($this_field_max_size > $max_field_sizes[$field['pma_type']]) {                   $this_field_max_size = $max_field_sizes[$field['pma_type']];                }                echo PMA_displayMaximumUploadSize($this_field_max_size) . "\n";                // do not generate here the MAX_FILE_SIZE, because we should                // put only one in the form to accommodate the biggest field                if ($this_field_max_size > $biggest_max_file_size) {                    $biggest_max_file_size = $this_field_max_size;                }            }            if (!empty($cfg['UploadDir'])) {                $files = PMA_getFileSelectOptions(PMA_userDir($cfg['UploadDir']));                if ($files === false) {                    echo '        <font color="red">' . __('Error') . '</font><br />' . "\n";                    echo '        ' . __('The directory you set for upload work cannot be reached') . "\n";                } elseif (!empty($files)) {                    echo "<br />\n";                    echo '    <i>' . __('Or') . '</i>' . ' ' . __('web server upload directory') . ':<br />' . "\n";                    echo '        <select size="1" name="fields_uploadlocal' . $vkey . '[' . $field['Field_md5'] . ']">' . "\n";                    echo '            <option value="" selected="selected"></option>' . "\n";                    echo $files;                    echo '        </select>' . "\n";                }            } // end if (web-server upload directory)        // end elseif (binary or blob)        } elseif (! in_array($field['pma_type'], $no_support_types)) {            // ignore this column to avoid changing it            if ($field['is_char']) {                $fieldsize = $extracted_fieldspec['spec_in_brackets'];            } else {            /**             * This case happens for example for INT or DATE columns;             * in these situations, the value returned in $field['len']             * seems appropriate.             */                $fieldsize = $field['len'];            }            $fieldsize = min(max($fieldsize, $cfg['MinSizeForInputField']), $cfg['MaxSizeForInputField']);            echo $backup_field . "\n";            if ($field['is_char']                && ($cfg['CharEditing'] == 'textarea'                || strpos($data, "\n") !== false)            ) {                echo "\n";                ?>                <textarea class="char" name="fields<?php echo $field_name_appendix; ?>"                    rows="<?php echo $cfg['CharTextareaRows']; ?>"                    cols="<?php echo $cfg['CharTextareaCols']; ?>"                    dir="<?php echo $text_dir; ?>"                    id="field_<?php echo ($idindex); ?>_3"                    <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    ><?php echo $special_chars_encoded; ?></textarea>                <?php            } else {                $the_class = 'textfield';                if ($field['pma_type'] == 'date') {                    $the_class .= ' datefield';                } elseif ($field['pma_type'] == 'datetime'                    || substr($field['pma_type'], 0, 9) == 'timestamp'                ) {                    $the_class .= ' datetimefield';                }                ?>                <input type="text" name="fields<?php echo $field_name_appendix; ?>"                    value="<?php echo $special_chars; ?>" size="<?php echo $fieldsize; ?>"                    class="<?php echo $the_class; ?>" <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    id="field_<?php echo ($idindex); ?>_3" />                <?php                if ($field['Extra'] == 'auto_increment') {                    ?>                    <input type="hidden" name="auto_increment<?php echo $field_name_appendix; ?>" value="1" />                    <?php                } // end if                if (substr($field['pma_type'], 0, 9) == 'timestamp') {                    ?>                    <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="timestamp" />                    <?php                }                if (substr($field['pma_type'], 0, 8) == 'datetime') {                    ?>                    <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="datetime" />                    <?php                }                if ($field['True_Type'] == 'bit') {                    ?>                    <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="bit" />                    <?php                }                if ($field['pma_type'] == 'date'                    || $field['pma_type'] == 'datetime'                    || substr($field['pma_type'], 0, 9) == 'timestamp'                ) {                    // the _3 suffix points to the date field                    // the _2 suffix points to the corresponding NULL checkbox                    // in dateFormat, 'yy' means the year with 4 digits                }            }        }        if (in_array($field['pma_type'], $gis_data_types)) {            $data_val = isset($vrow[$field['Field']]) ? $vrow[$field['Field']] : '';            $_url_params = array(                'field' => $field['Field_title'],                'value' => $data_val,             );            if ($field['pma_type'] != 'geometry') {                $_url_params = $_url_params + array('gis_data[gis_type]' => strtoupper($field['pma_type']));            }            $edit_url = 'gis_data_editor.php' . PMA_generate_common_url($_url_params);            $edit_str = PMA_getIcon('b_edit.png', __('Edit/Insert'));            echo('<span class="open_gis_editor">');            echo(PMA_linkOrButton($edit_url, $edit_str, array(), false, false, '_blank'));            echo('</span>');        }        ?>            </td>        </tr>        <?php        $odd_row = !$odd_row;    } // end for    $o_rows++;    echo '  </tbody></table><br />';} // end foreach on multi-edit?>    <div id="gis_editor"></div><div id="popup_background"></div>    <br />    <fieldset id="actions_panel">    <table border="0" cellpadding="5" cellspacing="0">    <tr>        <td valign="middle" nowrap="nowrap">            <select name="submit_type" class="control_at_footer" tabindex="<?php echo ($tabindex + $tabindex_for_value + 1); ?>"><?phpif (isset($where_clause)) {    ?>                <option value="save"><?php echo __('Save'); ?></option>    <?php}    ?>                <option value="insert"><?php echo __('Insert as new row'); ?></option>                <option value="insertignore"><?php echo __('Insert as new row and ignore errors'); ?></option>                <option value="showinsert"><?php echo __('Show insert query'); ?></option>            </select>    <?phpecho "\n";if (! isset($after_insert)) {    $after_insert = 'back';}?>        </td>        <td valign="middle">            &nbsp;&nbsp;&nbsp;<strong><?php echo __('and then'); ?></strong>&nbsp;&nbsp;&nbsp;        </td>        <td valign="middle" nowrap="nowrap">            <select name="after_insert">                <option value="back" <?php echo ($after_insert == 'back' ? 'selected="selected"' : ''); ?>><?php echo __('Go back to previous page'); ?></option>                <option value="new_insert" <?php echo ($after_insert == 'new_insert' ? 'selected="selected"' : ''); ?>><?php echo __('Insert another new row'); ?></option><?phpif (isset($where_clause)) {    ?>                <option value="same_insert" <?php echo ($after_insert == 'same_insert' ? 'selected="selected"' : ''); ?>><?php echo __('Go back to this page'); ?></option>    <?php    // If we have just numeric primary key, we can also edit next    // in 2.8.2, we were looking for `field_name` = numeric_value    //if (preg_match('@^[\s]*`[^`]*` = [0-9]+@', $where_clause)) {    // in 2.9.0, we are looking for `table_name`.`field_name` = numeric_value    if ($found_unique_key && preg_match('@^[\s]*`[^`]*`[\.]`[^`]*` = [0-9]+@', $where_clause)) {        ?>    <option value="edit_next" <?php echo ($after_insert == 'edit_next' ? 'selected="selected"' : ''); ?>><?php echo __('Edit next row'); ?></option>        <?php    }}?>            </select>        </td>    </tr>    <tr>        <td><?php echo PMA_showHint(__('Use TAB key to move from value to value, or CTRL+arrows to move anywhere')); ?>        </td>        <td colspan="3" align="right" valign="middle">            <input type="submit" class="control_at_footer" value="<?php echo __('Go'); ?>" tabindex="<?php echo ($tabindex + $tabindex_for_value + 6); ?>" id="buttonYes" />            <input type="reset" class="control_at_footer" value="<?php echo __('Reset'); ?>" tabindex="<?php echo ($tabindex + $tabindex_for_value + 7); ?>" />        </td>    </tr>    </table>    </fieldset>    <?php if ($biggest_max_file_size > 0) {            echo '        ' . PMA_generateHiddenMaxFileSize($biggest_max_file_size) . "\n";          } ?></form><?phpif ($insert_mode) {?><!-- Continue insertion form --><form id="continueForm" method="post" action="tbl_replace.php" name="continueForm" >    <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>    <input type="hidden" name="goto" value="<?php echo htmlspecialchars($GLOBALS['goto']); ?>" />    <input type="hidden" name="err_url" value="<?php echo htmlspecialchars($err_url); ?>" />    <input type="hidden" name="sql_query" value="<?php echo htmlspecialchars($sql_query); ?>" /><?php    if (isset($where_clauses)) {        foreach ($where_clause_array as $key_id => $where_clause) {            echo '<input type="hidden" name="where_clause[' . $key_id . ']" value="' . htmlspecialchars(trim($where_clause)) . '" />'. "\n";        }    }    $tmp = '<select name="insert_rows" id="insert_rows">' . "\n";    $option_values = array(1,2,5,10,15,20,30,40);    foreach ($option_values as $value) {        $tmp .= '<option value="' . $value . '"';        if ($value == $cfg['InsertRows']) {            $tmp .= ' selected="selected"';        }        $tmp .= '>' . $value . '</option>' . "\n";    }    $tmp .= '</select>' . "\n";    echo "\n" . sprintf(__('Continue insertion with %s rows'), $tmp);    unset($tmp);    echo '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>' . "\n";    echo '</form>' . "\n";}/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * CSV export code * * @package PhpMyAdmin-Export * @subpackage CSV */if (! defined('PHPMYADMIN')) {    exit;}/** * Set of functions used to build CSV dumps of tables */if (isset($plugin_list)) {    $plugin_list['csv'] = array(        'text' => __('CSV'),        'extension' => 'csv',        'mime_type' => 'text/comma-separated-values',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'text', 'name' => 'separator', 'text' => __('Columns separated with:')),            array('type' => 'text', 'name' => 'enclosed', 'text' => __('Columns enclosed with:')),            array('type' => 'text', 'name' => 'escaped', 'text' => __('Columns escaped with:')),            array('type' => 'text', 'name' => 'terminated', 'text' => __('Lines terminated with:')),            array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:')),            array('type' => 'bool', 'name' => 'removeCRLF', 'text' => __('Remove carriage return/line feed characters within columns')),            array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group'),            ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        global $what;        global $csv_terminated;        global $csv_separator;        global $csv_enclosed;        global $csv_escaped;        // Here we just prepare some values for export        if ($what == 'excel') {            $csv_terminated      = "\015\012";            switch($GLOBALS['excel_edition']) {            case 'win':                // as tested on Windows with Excel 2002 and Excel 2007                $csv_separator = ';';                break;            case 'mac_excel2003':                $csv_separator = ';';                break;            case 'mac_excel2008':                $csv_separator = ',';                break;            }            $csv_enclosed           = '"';            $csv_escaped            = '"';            if (isset($GLOBALS['excel_columns'])) {                $GLOBALS['csv_columns'] = 'yes';            }        } else {            if (empty($csv_terminated) || strtolower($csv_terminated) == 'auto') {                $csv_terminated  = $GLOBALS['crlf'];            } else {                $csv_terminated  = str_replace('\\r', "\015", $csv_terminated);                $csv_terminated  = str_replace('\\n', "\012", $csv_terminated);                $csv_terminated  = str_replace('\\t', "\011", $csv_terminated);            } // end if            $csv_separator          = str_replace('\\t', "\011", $csv_separator);        }        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in CSV format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query) {        global $what;        global $csv_terminated;        global $csv_separator;        global $csv_enclosed;        global $csv_escaped;        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        // If required, get fields name at the first line        if (isset($GLOBALS['csv_columns'])) {            $schema_insert = '';            for ($i = 0; $i < $fields_cnt; $i++) {                if ($csv_enclosed == '') {                    $schema_insert .= stripslashes(PMA_DBI_field_name($result, $i));                } else {                    $schema_insert .= $csv_enclosed                                   . str_replace($csv_enclosed, $csv_escaped . $csv_enclosed, stripslashes(PMA_DBI_field_name($result, $i)))                                   . $csv_enclosed;                }                $schema_insert     .= $csv_separator;            } // end for            $schema_insert  =trim(substr($schema_insert, 0, -1));            if (!PMA_exportOutputHandler($schema_insert . $csv_terminated)) {                return false;            }        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $schema_insert = '';            for ($j = 0; $j < $fields_cnt; $j++) {                if (!isset($row[$j]) || is_null($row[$j])) {                    $schema_insert .= $GLOBALS[$what . '_null'];                } elseif ($row[$j] == '0' || $row[$j] != '') {                    // always enclose fields                    if ($what == 'excel') {                        $row[$j]       = preg_replace("/\015(\012)?/", "\012", $row[$j]);                    }                    // remove CRLF characters within field                    if (isset($GLOBALS[$what . '_removeCRLF']) && $GLOBALS[$what . '_removeCRLF']) {                        $row[$j] = str_replace("\n", "", str_replace("\r", "", $row[$j]));                    }                    if ($csv_enclosed == '') {                        $schema_insert .= $row[$j];                    } else {                        // also double the escape string if found in the data                        if ($csv_escaped != $csv_enclosed) {                            $schema_insert .= $csv_enclosed                                       . str_replace($csv_enclosed, $csv_escaped . $csv_enclosed, str_replace($csv_escaped, $csv_escaped . $csv_escaped, $row[$j]))                                       . $csv_enclosed;                        } else {                            // avoid a problem when escape string equals enclose                            $schema_insert .= $csv_enclosed                                       . str_replace($csv_enclosed, $csv_escaped . $csv_enclosed, $row[$j])                                       . $csv_enclosed;                        }                    }                } else {                    $schema_insert .= '';                }                if ($j < $fields_cnt-1) {                    $schema_insert .= $csv_separator;                }            } // end for            if (!PMA_exportOutputHandler($schema_insert . $csv_terminated)) {                return false;            }        } // end while        PMA_DBI_free_result($result);        return true;    } // end of the 'PMA_getTableCsv()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';require_once './libraries/mysql_charsets.lib.php';if (!PMA_DRIZZLE) {    include_once './libraries/replication.inc.php';}require './libraries/build_html_for_db.lib.php';PMA_checkParameters(array('new_db'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'main.php?' . PMA_generate_common_url();/** * Builds and executes the db creation sql query */$sql_query = 'CREATE DATABASE ' . PMA_backquote($new_db);if (!empty($db_collation)) {    list($db_charset) = explode('_', $db_collation);    if (in_array($db_charset, $mysql_charsets) && in_array($db_collation, $mysql_collations[$db_charset])) {        $sql_query .= ' DEFAULT' . PMA_generateCharsetQueryPart($db_collation);    }    $db_collation_for_ajax = $db_collation;    unset($db_charset, $db_collation);}$sql_query .= ';';$result = PMA_DBI_try_query($sql_query);if (! $result) {    $message = PMA_Message::rawError(PMA_DBI_getError());    // avoid displaying the not-created db name in header or navi panel    $GLOBALS['db'] = '';    $GLOBALS['table'] = '';    /**     * If in an Ajax request, just display the message with {@link PMA_ajaxResponse}     */    if ($GLOBALS['is_ajax_request'] == true) {        PMA_ajaxResponse($message, false);    }    include_once './libraries/header.inc.php';    include_once './main.php';} else {    $message = PMA_Message::success(__('Database %1$s has been created.'));    $message->addParam($new_db);    $GLOBALS['db'] = $new_db;    /**     * If in an Ajax request, build the output and send it     */    if ($GLOBALS['is_ajax_request'] == true) {        /**         * String containing the SQL Query formatted in pretty HTML         * @global array $GLOBALS['extra_data']         * @name $extra_data         */        $extra_data['sql_query'] = PMA_showMessage(null, $sql_query, 'success');        //Construct the html for the new database, so that it can be appended to the list of databases on server_databases.php        /**         * Build the array to be passed to {@link PMA_generate_common_url} to generate the links         * @global array $GLOBALS['db_url_params']         * @name $db_url_params         */        $db_url_params['db'] = $new_db;        $is_superuser = PMA_isSuperuser();        $column_order = PMA_getColumnOrder();        $url_query = PMA_generate_common_url($new_db);        /**         * String that will contain the output HTML         * @name    $new_db_string         */        $new_db_string = '<tr>';        if (empty($db_collation_for_ajax)) {            $db_collation_for_ajax = PMA_getServerCollation();        }        // $dbstats comes from the create table dialog        if (! empty($dbstats)) {            $current = array(                'SCHEMA_NAME' => $new_db,                'DEFAULT_COLLATION_NAME' => $db_collation_for_ajax,                'SCHEMA_TABLES' => '0',                'SCHEMA_TABLE_ROWS' => '0',                'SCHEMA_DATA_LENGTH' => '0',                'SCHEMA_MAX_DATA_LENGTH' => '0',                'SCHEMA_INDEX_LENGTH' => '0',                'SCHEMA_LENGTH' => '0',                'SCHEMA_DATA_FREE' => '0'            );        } else {            $current = array(                'SCHEMA_NAME' => $new_db            );        }        list($column_order, $generated_html) = PMA_buildHtmlForDb($current, $is_superuser, (isset($checkall) ? $checkall : ''), $url_query, $column_order, $replication_types, $replication_info);        $new_db_string .= $generated_html;        $new_db_string .= '</tr>';        $extra_data['new_db_string'] = $new_db_string;        PMA_ajaxResponse($message, true, $extra_data);    }    include_once './libraries/header.inc.php';    include_once './' . $cfg['DefaultTabDatabase'];}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build SQL dumps of tables * * @package PhpMyAdmin-Export * @subpackage SQL */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $hide_sql       = false;    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && !$plugin_param['single_table']) {        $hide_structure = true;        $hide_sql       = true;    }    if (!$hide_sql) {        $plugin_list['sql'] = array(            'text' => __('SQL'),            'extension' => 'sql',            'mime_type' => 'text/x-sql',            'options' => array());        $plugin_list['sql']['options'][] = array(            'type' => 'begin_group',            'name' => 'general_opts');        /* comments */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'bool',                'name' => 'include_comments',                'text' => __('Display comments <i>(includes info such as export timestamp, PHP version, and server version)</i>')            ));        $plugin_list['sql']['options'][] = array(            'type' => 'text',            'name' => 'header_comment',            'text' => __('Additional custom header comment (\n splits lines):')            );        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'dates',            'text' => __('Include a timestamp of when databases were created, last updated, and last checked')            );        if (!empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'relation',                'text' => __('Display foreign key relationships')                );        }        if (!empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'mime',                'text' => __('Display MIME types')                );        }        $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        /* end comments */        /* enclose in a transaction */        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'use_transaction',            'text' => __('Enclose export in a transaction'),            'doc' => array('programs', 'mysqldump', 'option_mysqldump_single-transaction')            );        /* disable foreign key checks */        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'disable_fk',            'text' => __('Disable foreign key checks'),            'doc' => array(                'manual_MySQL_Database_Administration',                'server-system-variables',                'sysvar_foreign_key_checks')            );        $plugin_list['sql']['options_text'] = __('Options');        /* compatibility maximization */        $compats = PMA_DBI_getCompatibilities();        if (count($compats) > 0) {            $values = array();            foreach ($compats as $val) {                $values[$val] = $val;            }            $plugin_list['sql']['options'][] = array(                'type' => 'select',                'name' => 'compatibility',                'text' => __('Database system or older MySQL server to maximize output compatibility with:'),                'values' => $values,                'doc' => array(                    'manual_MySQL_Database_Administration',                    'Server_SQL_mode')                );            unset($values);        }        /* server export options */        if ($plugin_param['export_type'] == 'server') {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'drop_database',                'text' => sprintf(__('Add %s statement'), '<code>DROP DATABASE</code>')                );         }        /* what to dump (structure/data/both) */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'message_only',                'text' => __('Dump table')            ));        $plugin_list['sql']['options'][] = array(            'type' => 'radio',            'name' => 'structure_or_data',            'values' => array(                'structure' => __('structure'),                'data' => __('data'),                'structure_and_data' => __('structure and data')            ));        $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        $plugin_list['sql']['options'][] = array('type' => 'end_group');        /* begin Structure options */        if (!$hide_structure) {            $plugin_list['sql']['options'][] = array(                'type' => 'begin_group',                'name' => 'structure',                'text' => __('Object creation options'),                'force' => 'data'                );            /* begin SQL Statements */            $plugin_list['sql']['options'][] = array(                'type' => 'begin_subgroup',                'subgroup_header' => array(                    'type' => 'message_only',                    'name' => 'add_statements',                    'text' => __('Add statements:')                ));            if ($plugin_param['export_type'] == 'table') {                if (PMA_Table::isView($GLOBALS['db'], $GLOBALS['table'])) {                    $drop_clause = '<code>DROP VIEW</code>';                } else {                    $drop_clause = '<code>DROP TABLE</code>';                }            } else {                if (PMA_DRIZZLE) {                    $drop_clause = '<code>DROP TABLE</code>';                } else {                    $drop_clause = '<code>DROP TABLE / VIEW / PROCEDURE / FUNCTION</code>';                    if (PMA_MYSQL_INT_VERSION > 50100) {                        $drop_clause .= '<code> / EVENT</code>';                    }                }            }            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'drop_table',                'text' => sprintf(__('Add %s statement'), $drop_clause)                );            // Drizzle doesn't support procedures and functions            if (!PMA_DRIZZLE) {                $plugin_list['sql']['options'][] = array(                    'type' => 'bool',                    'name' => 'procedure_function',                    'text' => sprintf(__('Add %s statement'), '<code>CREATE PROCEDURE / FUNCTION' . (PMA_MYSQL_INT_VERSION > 50100 ? ' / EVENT</code>' : '</code>'))                    );            }            /* begin CREATE TABLE statements*/            $plugin_list['sql']['options'][] = array(                'type' => 'begin_subgroup',                'subgroup_header' => array(                    'type' => 'bool',                    'name' => 'create_table_statements',                    'text' => __('<code>CREATE TABLE</code> options:')                ));            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'if_not_exists',                'text' => '<code>IF NOT EXISTS</code>'                );            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'auto_increment',                'text' => '<code>AUTO_INCREMENT</code>'                );            $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');            /* end CREATE TABLE statements */            $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');            /* end SQL statements */            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'backquotes',                'text' => __('Enclose table and column names with backquotes <i>(Protects column and table names formed with special characters or keywords)</i>')                );            $plugin_list['sql']['options'][] = array('type' => 'end_group');        }        /* end Structure options */        /* begin Data options */         $plugin_list['sql']['options'][] = array(            'type' => 'begin_group',            'name' => 'data',            'text' => __('Data dump options'),            'force' => 'structure'            );        /* begin SQL statements */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'message_only',                'text' => __('Instead of <code>INSERT</code> statements, use:')            ));        // Not supported in Drizzle        if (!PMA_DRIZZLE) {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'delayed',                'text' => __('<code>INSERT DELAYED</code> statements'),                'doc' => array('manual_MySQL_Database_Administration', 'insert_delayed')                );        }        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'ignore',            'text' => __('<code>INSERT IGNORE</code> statements'),            'doc' => array('manual_MySQL_Database_Administration', 'insert')            );        $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        /* end SQL statements */        /* Function to use when dumping data */        $plugin_list['sql']['options'][] = array(            'type' => 'select',            'name' => 'type',            'text' => __('Function to use when dumping data:'),            'values' => array(                'INSERT' => 'INSERT',                'UPDATE' => 'UPDATE',                'REPLACE' => 'REPLACE'                )            );        /* Syntax to use when inserting data */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'message_only',                'text' => __('Syntax to use when inserting data:')            ));        $plugin_list['sql']['options'][] = array(            'type' => 'radio',            'name' => 'insert_syntax',            'values' => array(                'complete' => __('include column names in every <code>INSERT</code> statement <br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name (col_A,col_B,col_C) VALUES (1,2,3)</code>'),                'extended' => __('insert multiple rows in every <code>INSERT</code> statement<br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name VALUES (1,2,3), (4,5,6), (7,8,9)</code>'),                'both' => __('both of the above<br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name (col_A,col_B) VALUES (1,2,3), (4,5,6), (7,8,9)</code>'),                'none' => __('neither of the above<br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name VALUES (1,2,3)</code>')            ));          $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        /* Max length of query */        $plugin_list['sql']['options'][] = array(            'type' => 'text',            'name' => 'max_query_size',            'text' => __('Maximal length of created query')            );        /* Dump binary columns in hexadecimal */        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'hex_for_blob',            'text' => __('Dump binary columns in hexadecimal notation <i>(for example, "abc" becomes 0x616263)</i>')            );        // Drizzle works only with UTC timezone        if (!PMA_DRIZZLE) {            /* Dump time in UTC */            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'utc_time',                'text' => __('Dump TIMESTAMP columns in UTC <i>(enables TIMESTAMP columns to be dumped and reloaded between servers in different time zones)</i>')                );        }        $plugin_list['sql']['options'][] = array('type' => 'end_group');         /* end Data options */    }} else {    /**     * Avoids undefined variables, use NULL so isset() returns false     */    if (! isset($GLOBALS['sql_backquotes'])) {        $GLOBALS['sql_backquotes'] = null;    }    /**     * Exports routines (procedures and functions)     *     * @param string  $db     * @return  bool  Whether it succeeded     *     * @access  public     */    function PMA_exportRoutines($db) {        global $crlf;        $text = '';        $delimiter = '$$';        $procedure_names = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');        $function_names = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');        if ($procedure_names || $function_names) {            $text .= $crlf                . 'DELIMITER ' . $delimiter . $crlf;        }        if ($procedure_names) {            $text .=                PMA_exportComment()              . PMA_exportComment(__('Procedures'))              . PMA_exportComment();            foreach ($procedure_names as $procedure_name) {                if (! empty($GLOBALS['sql_drop_table'])) {                    $text .= 'DROP PROCEDURE IF EXISTS '                        . PMA_backquote($procedure_name)                        . $delimiter . $crlf;                }                $text .= PMA_DBI_get_definition($db, 'PROCEDURE', $procedure_name)                    . $delimiter . $crlf . $crlf;            }        }        if ($function_names) {            $text .=                PMA_exportComment()              . PMA_exportComment(__('Functions'))              . PMA_exportComment();            foreach ($function_names as $function_name) {                if (! empty($GLOBALS['sql_drop_table'])) {                    $text .= 'DROP FUNCTION IF EXISTS '                        . PMA_backquote($function_name)                        . $delimiter . $crlf;                }                $text .= PMA_DBI_get_definition($db, 'FUNCTION', $function_name)                    . $delimiter . $crlf . $crlf;            }        }        if ($procedure_names || $function_names) {            $text .= 'DELIMITER ;' . $crlf;        }        if (! empty($text)) {            return PMA_exportOutputHandler($text);        } else {            return false;        }    }    /**     * Possibly outputs comment     *     * @param string  $text  Text of comment     * @return  string      The formatted comment     *     * @access  private     */    function PMA_exportComment($text = '')    {        if (isset($GLOBALS['sql_include_comments']) && $GLOBALS['sql_include_comments']) {            // see http://dev.mysql.com/doc/refman/5.0/en/ansi-diff-comments.html            return '--' . (empty($text) ? '' : ' ') . $text . $GLOBALS['crlf'];        } else {            return '';        }    }    /**     * Possibly outputs CRLF     *     * @return  string  $crlf or nothing     *     * @access private     */    function PMA_possibleCRLF()    {        if (isset($GLOBALS['sql_include_comments']) && $GLOBALS['sql_include_comments']) {            return $GLOBALS['crlf'];        } else {            return '';        }    }    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        global $crlf;        global $mysql_charset_map;        $foot = '';        if (isset($GLOBALS['sql_disable_fk'])) {            $foot .=  'SET FOREIGN_KEY_CHECKS=1;' . $crlf;        }        if (isset($GLOBALS['sql_use_transaction'])) {            $foot .=  'COMMIT;' . $crlf;        }        // restore connection settings        $charset_of_file = isset($GLOBALS['charset_of_file']) ? $GLOBALS['charset_of_file'] : '';        if (!empty($GLOBALS['asfile']) && isset($mysql_charset_map[$charset_of_file]) && !PMA_DRIZZLE) {            $foot .=  $crlf                    . '/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;' . $crlf                    . '/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;' . $crlf                    . '/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;' . $crlf;        }        /* Restore timezone */        if (isset($GLOBALS['sql_utc_time']) && $GLOBALS['sql_utc_time']) {            PMA_DBI_query('SET time_zone = "' . $GLOBALS['old_tz'] . '"');        }        return PMA_exportOutputHandler($foot);    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        global $crlf;        global $cfg;        global $mysql_charset_map;        if (isset($GLOBALS['sql_compatibility'])) {            $tmp_compat = $GLOBALS['sql_compatibility'];            if ($tmp_compat == 'NONE') {                $tmp_compat = '';            }            PMA_DBI_try_query('SET SQL_MODE="' . $tmp_compat . '"');            unset($tmp_compat);        }        $head  =  PMA_exportComment('phpMyAdmin SQL Dump')               .  PMA_exportComment('version ' . PMA_VERSION)               .  PMA_exportComment('http://www.phpmyadmin.net')               .  PMA_exportComment();        $host_string = __('Host') . ': ' .  $cfg['Server']['host'];        if (!empty($cfg['Server']['port'])) {            $host_string .= ':' . $cfg['Server']['port'];        }        $head .= PMA_exportComment($host_string);        $head .= PMA_exportComment(__('Generation Time')              . ': ' .  PMA_localisedDate())              .  PMA_exportComment(__('Server version') . ': ' . PMA_MYSQL_STR_VERSION)              .  PMA_exportComment(__('PHP Version') . ': ' . phpversion())              .  PMA_possibleCRLF();        if (isset($GLOBALS['sql_header_comment']) && !empty($GLOBALS['sql_header_comment'])) {            // '\n' is not a newline (like "\n" would be), it's the characters            // backslash and n, as explained on the export interface            $lines = explode('\n', $GLOBALS['sql_header_comment']);            $head .= PMA_exportComment();            foreach ($lines as $one_line) {                $head .= PMA_exportComment($one_line);            }            $head .= PMA_exportComment();        }        if (isset($GLOBALS['sql_disable_fk'])) {            $head .= 'SET FOREIGN_KEY_CHECKS=0;' . $crlf;        }        /* We want exported AUTO_INCREMENT columns to have still same value, do this only for recent MySQL exports */        if ((!isset($GLOBALS['sql_compatibility']) || $GLOBALS['sql_compatibility'] == 'NONE')                && !PMA_DRIZZLE) {            $head .= 'SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";' . $crlf;        }        if (isset($GLOBALS['sql_use_transaction'])) {            $head .= 'SET AUTOCOMMIT=0;' . $crlf                   . 'START TRANSACTION;' . $crlf;        }        /* Change timezone if we should export timestamps in UTC */        if (isset($GLOBALS['sql_utc_time']) && $GLOBALS['sql_utc_time']) {            $head .= 'SET time_zone = "+00:00";' . $crlf;            $GLOBALS['old_tz'] = PMA_DBI_fetch_value('SELECT @@session.time_zone');            PMA_DBI_query('SET time_zone = "+00:00"');        }        $head .= PMA_possibleCRLF();        if (! empty($GLOBALS['asfile']) && !PMA_DRIZZLE) {            // we are saving as file, therefore we provide charset information            // so that a utility like the mysql client can interpret            // the file correctly            if (isset($GLOBALS['charset_of_file']) && isset($mysql_charset_map[$GLOBALS['charset_of_file']])) {                // we got a charset from the export dialog                $set_names = $mysql_charset_map[$GLOBALS['charset_of_file']];            } else {                // by default we use the connection charset                $set_names = $mysql_charset_map['utf-8'];            }            $head .=  $crlf                   . '/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;' . $crlf                   . '/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;' . $crlf                   . '/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;' . $crlf                   . '/*!40101 SET NAMES ' . $set_names . ' */;' . $crlf . $crlf;        }        return PMA_exportOutputHandler($head);    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        global $crlf;        if (isset($GLOBALS['sql_drop_database'])) {            if (!PMA_exportOutputHandler('DROP DATABASE ' . (isset($GLOBALS['sql_backquotes']) ? PMA_backquote($db) : $db) . ';' . $crlf)) {                return false;            }        }        $create_query = 'CREATE DATABASE ' . (isset($GLOBALS['sql_backquotes']) ? PMA_backquote($db) : $db);        $collation = PMA_getDbCollation($db);        if (PMA_DRIZZLE) {            $create_query .= ' COLLATE ' . $collation;        } else {            if (strpos($collation, '_')) {                $create_query .= ' DEFAULT CHARACTER SET ' . substr($collation, 0, strpos($collation, '_')) . ' COLLATE ' . $collation;            } else {                $create_query .= ' DEFAULT CHARACTER SET ' . $collation;            }        }        $create_query .= ';' . $crlf;        if (!PMA_exportOutputHandler($create_query)) {            return false;        }        if (isset($GLOBALS['sql_backquotes'])                && ((isset($GLOBALS['sql_compatibility']) && $GLOBALS['sql_compatibility'] == 'NONE') || PMA_DRIZZLE)) {            $result = PMA_exportOutputHandler('USE ' . PMA_backquote($db) . ';' . $crlf);        } else {            $result = PMA_exportOutputHandler('USE ' . $db . ';' . $crlf);        }        return $result;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        $head = PMA_exportComment()              . PMA_exportComment(__('Database') . ': ' . (isset($GLOBALS['sql_backquotes']) ? PMA_backquote($db) : '\'' . $db . '\''))              . PMA_exportComment();        return PMA_exportOutputHandler($head);    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        global $crlf;        $result = true;        if (isset($GLOBALS['sql_constraints'])) {            $result = PMA_exportOutputHandler($GLOBALS['sql_constraints']);            unset($GLOBALS['sql_constraints']);        }        if (($GLOBALS['sql_structure_or_data'] == 'structure' || $GLOBALS['sql_structure_or_data'] == 'structure_and_data') && isset($GLOBALS['sql_procedure_function'])) {            $text = '';            $delimiter = '$$';            if (PMA_MYSQL_INT_VERSION > 50100) {                $event_names = PMA_DBI_fetch_result('SELECT EVENT_NAME FROM information_schema.EVENTS WHERE EVENT_SCHEMA= \'' . PMA_sqlAddSlashes($db, true) . '\';');            } else {                $event_names = array();            }            if ($event_names) {                $text .= $crlf                  . 'DELIMITER ' . $delimiter . $crlf;                $text .=                    PMA_exportComment()                  . PMA_exportComment(__('Events'))                  . PMA_exportComment();                foreach ($event_names as $event_name) {                    if (! empty($GLOBALS['sql_drop_table'])) {                $text .= 'DROP EVENT ' . PMA_backquote($event_name) . $delimiter . $crlf;                    }                    $text .= PMA_DBI_get_definition($db, 'EVENT', $event_name) . $delimiter . $crlf . $crlf;                }                $text .= 'DELIMITER ;' . $crlf;            }            if (! empty($text)) {                $result = PMA_exportOutputHandler($text);            }        }        return $result;    }    /**     * Returns a stand-in CREATE definition to resolve view dependencies     *     * @param string  $db    the database name     * @param string  $view  the view name     * @param string  $crlf  the end of line sequence     * @return  string         resulting definition     *     * @access  public     */    function PMA_getTableDefStandIn($db, $view, $crlf) {        $create_query = '';        if (! empty($GLOBALS['sql_drop_table'])) {            $create_query .= 'DROP VIEW IF EXISTS ' . PMA_backquote($view) . ';' . $crlf;        }        $create_query .= 'CREATE TABLE ';        if (isset($GLOBALS['sql_if_not_exists']) && $GLOBALS['sql_if_not_exists']) {            $create_query .= 'IF NOT EXISTS ';        }        $create_query .= PMA_backquote($view) . ' (' . $crlf;        $tmp = array();        $columns = PMA_DBI_get_columns_full($db, $view);        foreach ($columns as $column_name => $definition) {            $tmp[] = PMA_backquote($column_name) . ' ' . $definition['Type'] . $crlf;        }        $create_query .= implode(',', $tmp) . ');';        return($create_query);    }    /**     * Returns $table's CREATE definition     *     * @param string  $db             the database name     * @param string  $table          the table name     * @param string  $crlf           the end of line sequence     * @param string  $error_url      the url to go back in case of error     * @param bool    $show_dates     whether to include creation/update/check dates     * @param bool    $add_semicolon  whether to add semicolon and end-of-line at the end     * @param bool    $view           whether we're handling a view     * @return  string   resulting schema     *     * @access  public     */    function PMA_getTableDef($db, $table, $crlf, $error_url, $show_dates = false, $add_semicolon = true, $view = false)    {        global $sql_drop_table;        global $sql_backquotes;        global $sql_constraints;        global $sql_constraints_query; // just the text of the query        global $sql_drop_foreign_keys;        $schema_create = '';        $auto_increment = '';        $new_crlf = $crlf;        // need to use PMA_DBI_QUERY_STORE with PMA_DBI_num_rows() in mysqli        $result = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ' LIKE \'' . PMA_sqlAddSlashes($table, true) . '\'', null, PMA_DBI_QUERY_STORE);        if ($result != false) {            if (PMA_DBI_num_rows($result) > 0) {                $tmpres        = PMA_DBI_fetch_assoc($result);                if (PMA_DRIZZLE && $show_dates) {                    // Drizzle doesn't give Create_time and Update_time in SHOW TABLE STATUS, add it                    $sql ="SELECT                            TABLE_CREATION_TIME AS Create_time,                            TABLE_UPDATE_TIME AS Update_time                        FROM data_dictionary.TABLES                        WHERE TABLE_SCHEMA = '" . PMA_sqlAddSlashes($db) . "'                          AND TABLE_NAME = '" . PMA_sqlAddSlashes($table) . "'";                    $tmpres = array_merge(PMA_DBI_fetch_single_row($sql), $tmpres);                }                // Here we optionally add the AUTO_INCREMENT next value,                // but starting with MySQL 5.0.24, the clause is already included                // in SHOW CREATE TABLE so we'll remove it below                // It's required for Drizzle because SHOW CREATE TABLE uses                // the value from table's creation time                if (isset($GLOBALS['sql_auto_increment']) && !empty($tmpres['Auto_increment'])) {                    $auto_increment .= ' AUTO_INCREMENT=' . $tmpres['Auto_increment'] . ' ';                }                if ($show_dates && isset($tmpres['Create_time']) && !empty($tmpres['Create_time'])) {                    $schema_create .= PMA_exportComment(__('Creation') . ': ' . PMA_localisedDate(strtotime($tmpres['Create_time'])));                    $new_crlf = PMA_exportComment() . $crlf;                }                if ($show_dates && isset($tmpres['Update_time']) && !empty($tmpres['Update_time'])) {                    $schema_create .= PMA_exportComment(__('Last update') . ': ' . PMA_localisedDate(strtotime($tmpres['Update_time'])));                    $new_crlf = PMA_exportComment() . $crlf;                }                if ($show_dates && isset($tmpres['Check_time']) && !empty($tmpres['Check_time'])) {                    $schema_create .= PMA_exportComment(__('Last check') . ': ' . PMA_localisedDate(strtotime($tmpres['Check_time'])));                    $new_crlf = PMA_exportComment() . $crlf;                }            }            PMA_DBI_free_result($result);        }        $schema_create .= $new_crlf;        // no need to generate a DROP VIEW here, it was done earlier        if (! empty($sql_drop_table) && ! PMA_Table::isView($db, $table)) {            $schema_create .= 'DROP TABLE IF EXISTS ' . PMA_backquote($table, $sql_backquotes) . ';' . $crlf;        }        // Complete table dump,        // Whether to quote table and column names or not        // Drizzle always quotes names        if (!PMA_DRIZZLE) {            if ($sql_backquotes) {                PMA_DBI_query('SET SQL_QUOTE_SHOW_CREATE = 1');            } else {                PMA_DBI_query('SET SQL_QUOTE_SHOW_CREATE = 0');            }        }        // I don't see the reason why this unbuffered query could cause problems,        // because SHOW CREATE TABLE returns only one row, and we free the        // results below. Nonetheless, we got 2 user reports about this        // (see bug 1562533) so I remove the unbuffered mode.        //$result = PMA_DBI_query('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table), null, PMA_DBI_QUERY_UNBUFFERED);        //        // Note: SHOW CREATE TABLE, at least in MySQL 5.1.23, does not        // produce a displayable result for the default value of a BIT        // column, nor does the mysqldump command. See MySQL bug 35796        $result = PMA_DBI_try_query('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table));        // an error can happen, for example the table is crashed        $tmp_error = PMA_DBI_getError();        if ($tmp_error) {            return PMA_exportComment(__('in use') . '(' . $tmp_error . ')');        }        if ($result != false && ($row = PMA_DBI_fetch_row($result))) {            $create_query = $row[1];            unset($row);            // Convert end of line chars to one that we want (note that MySQL doesn't return query it will accept in all cases)            if (strpos($create_query, "(\r\n ")) {                $create_query = str_replace("\r\n", $crlf, $create_query);            } elseif (strpos($create_query, "(\n ")) {                $create_query = str_replace("\n", $crlf, $create_query);            } elseif (strpos($create_query, "(\r ")) {                $create_query = str_replace("\r", $crlf, $create_query);            }            /*             * Drop database name from VIEW creation.             *             * This is a bit tricky, but we need to issue SHOW CREATE TABLE with             * database name, but we don't want name to show up in CREATE VIEW             * statement.             */            if ($view) {                $create_query = preg_replace('/' . PMA_backquote($db) . '\./', '', $create_query);            }            // Should we use IF NOT EXISTS?            if (isset($GLOBALS['sql_if_not_exists'])) {                $create_query     = preg_replace('/^CREATE TABLE/', 'CREATE TABLE IF NOT EXISTS', $create_query);            }            // Drizzle (checked on 2011.03.13) returns ROW_FORMAT surrounded with quotes, which is not accepted by parser            if (PMA_DRIZZLE) {                $create_query = preg_replace('/ROW_FORMAT=\'(\S+)\'/', 'ROW_FORMAT=$1', $create_query);            }            // are there any constraints to cut out?            if (preg_match('@CONSTRAINT|FOREIGN[\s]+KEY@', $create_query)) {                // Split the query into lines, so we can easily handle it. We know lines are separated by $crlf (done few lines above).                $sql_lines = explode($crlf, $create_query);                $sql_count = count($sql_lines);                // lets find first line with constraints                for ($i = 0; $i < $sql_count; $i++) {                    if (preg_match('@^[\s]*(CONSTRAINT|FOREIGN[\s]+KEY)@', $sql_lines[$i])) {                        break;                    }                }                // If we really found a constraint                if ($i != $sql_count) {                    // remove , from the end of create statement                    $sql_lines[$i - 1] = preg_replace('@,$@', '', $sql_lines[$i - 1]);                    // prepare variable for constraints                    if (!isset($sql_constraints)) {                        if (isset($GLOBALS['no_constraints_comments'])) {                            $sql_constraints = '';                        } else {                            $sql_constraints = $crlf                                             . PMA_exportComment()                                             . PMA_exportComment(__('Constraints for dumped tables'))                                             . PMA_exportComment();                        }                    }                    // comments for current table                    if (!isset($GLOBALS['no_constraints_comments'])) {                        $sql_constraints .= $crlf                                          . PMA_exportComment()                                          . PMA_exportComment(__('Constraints for table') . ' ' . PMA_backquote($table))                                          . PMA_exportComment();                    }                    // let's do the work                    $sql_constraints_query .= 'ALTER TABLE ' . PMA_backquote($table) . $crlf;                    $sql_constraints .= 'ALTER TABLE ' . PMA_backquote($table) . $crlf;                    $sql_drop_foreign_keys .= 'ALTER TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table) . $crlf;                    $first = true;                    for ($j = $i; $j < $sql_count; $j++) {                        if (preg_match('@CONSTRAINT|FOREIGN[\s]+KEY@', $sql_lines[$j])) {                            if (!$first) {                                $sql_constraints .= $crlf;                            }                            if (strpos($sql_lines[$j], 'CONSTRAINT') === false) {                                $tmp_str = preg_replace('/(FOREIGN[\s]+KEY)/', 'ADD \1', $sql_lines[$j]);                                $sql_constraints_query .= $tmp_str;                                $sql_constraints .= $tmp_str;                            } else {                                $tmp_str = preg_replace('/(CONSTRAINT)/', 'ADD \1', $sql_lines[$j]);                                $sql_constraints_query .= $tmp_str;                                $sql_constraints .= $tmp_str;                                preg_match('/(CONSTRAINT)([\s])([\S]*)([\s])/', $sql_lines[$j], $matches);                                if (! $first) {                                    $sql_drop_foreign_keys .= ', ';                                }                                $sql_drop_foreign_keys .= 'DROP FOREIGN KEY ' . $matches[3];                            }                            $first = false;                        } else {                            break;                        }                    }                    $sql_constraints .= ';' . $crlf;                    $sql_constraints_query .= ';';                    $create_query = implode($crlf, array_slice($sql_lines, 0, $i)) . $crlf . implode($crlf, array_slice($sql_lines, $j, $sql_count - 1));                    unset($sql_lines);                }            }            $schema_create .= $create_query;        }        // remove a possible "AUTO_INCREMENT = value" clause        // that could be there starting with MySQL 5.0.24        // in Drizzle it's useless as it contains the value given at table creation time        $schema_create = preg_replace('/AUTO_INCREMENT\s*=\s*([0-9])+/', '', $schema_create);        $schema_create .= $auto_increment;        PMA_DBI_free_result($result);        return $schema_create . ($add_semicolon ? ';' . $crlf : '');    } // end of the 'PMA_getTableDef()' function    /**     * Returns $table's comments, relations etc.     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         end of line sequence     * @param bool    $do_relation  whether to include relation comments     * @param bool    $do_mime      whether to include mime comments     * @return  string   resulting comments     *     * @access  private     */    function PMA_getTableComments($db, $table, $crlf, $do_relation = false, $do_mime = false)    {        global $cfgRelation;        global $sql_backquotes;        global $sql_constraints;        $schema_create = '';        // Check if we can use Relations        if ($do_relation && !empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        if ($do_mime && $cfgRelation['mimework']) {            if (!($mime_map = PMA_getMIME($db, $table, true))) {                unset($mime_map);            }        }        if (isset($mime_map) && count($mime_map) > 0) {            $schema_create .= PMA_possibleCRLF()                           . PMA_exportComment()                           . PMA_exportComment(__('MIME TYPES FOR TABLE'). ' ' . PMA_backquote($table, $sql_backquotes) . ':');            @reset($mime_map);            foreach ($mime_map AS $mime_field => $mime) {                $schema_create .= PMA_exportComment('  ' . PMA_backquote($mime_field, $sql_backquotes))                                . PMA_exportComment('      ' . PMA_backquote($mime['mimetype'], $sql_backquotes));            }            $schema_create .= PMA_exportComment();        }        if ($have_rel) {            $schema_create .= PMA_possibleCRLF()                           . PMA_exportComment()                           . PMA_exportComment(__('RELATIONS FOR TABLE'). ' ' . PMA_backquote($table, $sql_backquotes) . ':');            foreach ($res_rel AS $rel_field => $rel) {                $schema_create .= PMA_exportComment('  ' . PMA_backquote($rel_field, $sql_backquotes))                                . PMA_exportComment('      ' . PMA_backquote($rel['foreign_table'], $sql_backquotes)                                . ' -> ' . PMA_backquote($rel['foreign_field'], $sql_backquotes));            }            $schema_create .= PMA_exportComment();        }        return $schema_create;    } // end of the 'PMA_getTableComments()' function    /**     * Outputs table's structure     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         the end of line sequence     * @param string  $error_url    the url to go back in case of error     * @param bool    $relation     whether to include relation comments     * @param bool    $comments     whether to include the pmadb-style column comments     *                                as comments in the structure; this is deprecated     *                                but the parameter is left here because export.php     *                                calls PMA_exportStructure() also for other export     *                                types which use this parameter     * @param bool    $mime         whether to include mime comments     * @param bool    $dates        whether to include creation/update/check dates     * @param string  $export_mode  'create_table', 'triggers', 'create_view', 'stand_in'     * @param string  $export_type  'server', 'database', 'table'     * @return  bool      Whether it succeeded     *     * @access  public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $relation = false, $comments = false, $mime = false, $dates = false, $export_mode, $export_type)    {        $formatted_table_name = (isset($GLOBALS['sql_backquotes']))                              ? PMA_backquote($table)                              : '\'' . $table . '\'';        $dump = PMA_possibleCRLF()              . PMA_exportComment(str_repeat('-', 56))              . PMA_possibleCRLF()              . PMA_exportComment();        switch($export_mode) {            case 'create_table':                $dump .= PMA_exportComment(__('Table structure for table') . ' ' . $formatted_table_name);                $dump .= PMA_exportComment();                $dump .= PMA_getTableDef($db, $table, $crlf, $error_url, $dates);                $dump .= PMA_getTableComments($db, $table, $crlf, $relation, $mime);                break;            case 'triggers':                $dump = '';                $triggers = PMA_DBI_get_triggers($db, $table);                if ($triggers) {                    $dump .=  PMA_possibleCRLF()                            . PMA_exportComment()                            . PMA_exportComment(__('Triggers') . ' ' . $formatted_table_name)                            . PMA_exportComment();                    $delimiter = '//';                    foreach ($triggers as $trigger) {                        $dump .= $trigger['drop'] . ';' . $crlf;                        $dump .= 'DELIMITER ' . $delimiter . $crlf;                        $dump .= $trigger['create'];                        $dump .= 'DELIMITER ;' . $crlf;                    }                }                break;            case 'create_view':                $dump .= PMA_exportComment(__('Structure for view') . ' ' . $formatted_table_name)                       . PMA_exportComment();                // delete the stand-in table previously created (if any)                if ($export_type != 'table') {                    $dump .= 'DROP TABLE IF EXISTS ' . PMA_backquote($table) . ';' . $crlf;                }                $dump .= PMA_getTableDef($db, $table, $crlf, $error_url, $dates, true, true);                break;            case 'stand_in':                $dump .=  PMA_exportComment(__('Stand-in structure for view') . ' ' . $formatted_table_name)                        . PMA_exportComment();                // export a stand-in definition to resolve view dependencies                $dump .= PMA_getTableDefStandIn($db, $table, $crlf);        } // end switch        // this one is built by PMA_getTableDef() to use in table copy/move        // but not in the case of export        unset($GLOBALS['sql_constraints_query']);        return PMA_exportOutputHandler($dump);    }    /**     * Outputs the content of a table in SQL format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $sql_backquotes;        global $current_row;        $formatted_table_name = (isset($GLOBALS['sql_backquotes']))                              ? PMA_backquote($table)                              : '\'' . $table . '\'';        // Do not export data for a VIEW        // (For a VIEW, this is called only when exporting a single VIEW)        if (PMA_Table::isView($db, $table)) {            $head = PMA_possibleCRLF()              . PMA_exportComment()              . PMA_exportComment('VIEW ' . ' ' . $formatted_table_name)              . PMA_exportComment(__('Data') . ': ' . __('None'))              . PMA_exportComment()              . PMA_possibleCRLF();            if (! PMA_exportOutputHandler($head)) {                return false;            }            return true;        }        // analyze the query to get the true column names, not the aliases        // (this fixes an undefined index, also if Complete inserts        //  are used, we did not get the true column name in case of aliases)        $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($sql_query));        $result = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        // a possible error: the table has crashed        $tmp_error = PMA_DBI_getError();        if ($tmp_error) {            return PMA_exportOutputHandler(PMA_exportComment(__('Error reading data:') . ' (' . $tmp_error . ')'));        }        if ($result != false) {            $fields_cnt = PMA_DBI_num_fields($result);            // Get field information            $fields_meta = PMA_DBI_get_fields_meta($result);            $field_flags = array();            for ($j = 0; $j < $fields_cnt; $j++) {                $field_flags[$j] = PMA_DBI_field_flags($result, $j);            }            for ($j = 0; $j < $fields_cnt; $j++) {                if (isset($analyzed_sql[0]['select_expr'][$j]['column'])) {                    $field_set[$j] = PMA_backquote($analyzed_sql[0]['select_expr'][$j]['column'], $sql_backquotes);                } else {                    $field_set[$j] = PMA_backquote($fields_meta[$j]->name, $sql_backquotes);                }            }            if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'UPDATE') {                // update                $schema_insert  = 'UPDATE ';                if (isset($GLOBALS['sql_ignore'])) {                    $schema_insert .= 'IGNORE ';                }                // avoid EOL blank                $schema_insert .= PMA_backquote($table, $sql_backquotes) . ' SET';            } else {                // insert or replace                if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'REPLACE') {                    $sql_command = 'REPLACE';                } else {                    $sql_command = 'INSERT';                }                // delayed inserts?                if (isset($GLOBALS['sql_delayed'])) {                    $insert_delayed = ' DELAYED';                } else {                    $insert_delayed = '';                }                // insert ignore?                if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'INSERT' && isset($GLOBALS['sql_ignore'])) {                    $insert_delayed .= ' IGNORE';                }                // scheme for inserting fields                if ($GLOBALS['sql_insert_syntax'] == 'complete' || $GLOBALS['sql_insert_syntax'] == 'both') {                    $fields        = implode(', ', $field_set);                    $schema_insert = $sql_command . $insert_delayed .' INTO ' . PMA_backquote($table, $sql_backquotes)                // avoid EOL blank                                   . ' (' . $fields . ') VALUES';                } else {                    $schema_insert = $sql_command . $insert_delayed .' INTO ' . PMA_backquote($table, $sql_backquotes)                                   . ' VALUES';                }            }            $search      = array("\x00", "\x0a", "\x0d", "\x1a"); //\x08\\x09, not required            $replace     = array('\0', '\n', '\r', '\Z');            $current_row = 0;            $query_size  = 0;            if (($GLOBALS['sql_insert_syntax'] == 'extended' || $GLOBALS['sql_insert_syntax'] == 'both') && (!isset($GLOBALS['sql_type']) || $GLOBALS['sql_type'] != 'UPDATE')) {                $separator    = ',';                $schema_insert .= $crlf;            } else {                $separator    = ';';            }            while ($row = PMA_DBI_fetch_row($result)) {                if ($current_row == 0) {                    $head = PMA_possibleCRLF()                          . PMA_exportComment()                          . PMA_exportComment(__('Dumping data for table') . ' ' . $formatted_table_name)                          . PMA_exportComment()                          . $crlf;                    if (! PMA_exportOutputHandler($head)) {                        return false;                    }                }                $current_row++;                for ($j = 0; $j < $fields_cnt; $j++) {                    // NULL                    if (!isset($row[$j]) || is_null($row[$j])) {                        $values[] = 'NULL';                    // a number                    // timestamp is numeric on some MySQL 4.1, BLOBs are sometimes numeric                    } elseif ($fields_meta[$j]->numeric && $fields_meta[$j]->type != 'timestamp'                            && ! $fields_meta[$j]->blob) {                        $values[] = $row[$j];                    // a true BLOB                    // - mysqldump only generates hex data when the --hex-blob                    //   option is used, for fields having the binary attribute                    //   no hex is generated                    // - a TEXT field returns type blob but a real blob                    //   returns also the 'binary' flag                    } elseif (stristr($field_flags[$j], 'BINARY')                            && $fields_meta[$j]->blob                            && isset($GLOBALS['sql_hex_for_blob'])) {                        // empty blobs need to be different, but '0' is also empty :-(                        if (empty($row[$j]) && $row[$j] != '0') {                            $values[] = '\'\'';                        } else {                            $values[] = '0x' . bin2hex($row[$j]);                        }                    // detection of 'bit' works only on mysqli extension                    } elseif ($fields_meta[$j]->type == 'bit') {                        $values[] = "b'" . PMA_sqlAddSlashes(PMA_printable_bit_value($row[$j], $fields_meta[$j]->length)) . "'";                    // something else -> treat as a string                    } else {                        $values[] = '\'' . str_replace($search, $replace, PMA_sqlAddSlashes($row[$j])) . '\'';                    } // end if                } // end for                // should we make update?                if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'UPDATE') {                    $insert_line = $schema_insert;                    for ($i = 0; $i < $fields_cnt; $i++) {                        if (0 == $i) {                            $insert_line .= ' ';                        }                        if ($i > 0) {                            // avoid EOL blank                            $insert_line .= ',';                        }                        $insert_line .= $field_set[$i] . ' = ' . $values[$i];                    }                    list($tmp_unique_condition, $tmp_clause_is_unique) = PMA_getUniqueCondition($result, $fields_cnt, $fields_meta, $row);                    $insert_line .= ' WHERE ' . $tmp_unique_condition;                    unset($tmp_unique_condition, $tmp_clause_is_unique);                } else {                    // Extended inserts case                    if ($GLOBALS['sql_insert_syntax'] == 'extended' || $GLOBALS['sql_insert_syntax'] == 'both') {                        if ($current_row == 1) {                            $insert_line  = $schema_insert . '(' . implode(', ', $values) . ')';                        } else {                            $insert_line  = '(' . implode(', ', $values) . ')';                            if (isset($GLOBALS['sql_max_query_size']) && $GLOBALS['sql_max_query_size'] > 0 && $query_size + strlen($insert_line) > $GLOBALS['sql_max_query_size']) {                                if (!PMA_exportOutputHandler(';' . $crlf)) {                                    return false;                                }                                $query_size = 0;                                $current_row = 1;                                $insert_line = $schema_insert . $insert_line;                            }                        }                        $query_size += strlen($insert_line);                    }                    // Other inserts case                    else {                        $insert_line = $schema_insert . '(' . implode(', ', $values) . ')';                    }                }                unset($values);                if (!PMA_exportOutputHandler(($current_row == 1 ? '' : $separator . $crlf) . $insert_line)) {                    return false;                }            } // end while            if ($current_row > 0) {                if (!PMA_exportOutputHandler(';' . $crlf)) {                    return false;                }            }        } // end if ($result != false)        PMA_DBI_free_result($result);        return true;    } // end of the 'PMA_exportData()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run cookie based authentication. * * @package PhpMyAdmin-Auth-Cookie */if (! defined('PHPMYADMIN')) {    exit;}/** * Swekey authentication functions. */require './libraries/auth/swekey/swekey.auth.lib.php';if (function_exists('mcrypt_encrypt')) {    /**     * Uses faster mcrypt library if available     * (as this is not called from anywhere else, put the code in-line     *  for faster execution)     */    /**     * Initialization     * Store the initialization vector because it will be needed for     * further decryption. I don't think necessary to have one iv     * per server so I don't put the server number in the cookie name.     */    if (empty($_COOKIE['pma_mcrypt_iv']) || false === ($iv = base64_decode($_COOKIE['pma_mcrypt_iv'], true))) {        srand((double) microtime() * 1000000);        $td = mcrypt_module_open(MCRYPT_BLOWFISH, '', MCRYPT_MODE_CBC, '');        if ($td === false) {            die(__('Failed to use Blowfish from mcrypt!'));        }        $iv = mcrypt_create_iv(mcrypt_enc_get_iv_size($td), MCRYPT_RAND);        $GLOBALS['PMA_Config']->setCookie('pma_mcrypt_iv', base64_encode($iv));    }    /**     * Encryption using blowfish algorithm (mcrypt)     *     * @param   string  original data     * @param   string  the secret     *     * @return  string  the encrypted result     *     * @access  public     *     */    function PMA_blowfish_encrypt($data, $secret)    {        global $iv;        return base64_encode(mcrypt_encrypt(MCRYPT_BLOWFISH, $secret, $data, MCRYPT_MODE_CBC, $iv));    }    /**     * Decryption using blowfish algorithm (mcrypt)     *     * @param   string  encrypted data     * @param   string  the secret     *     * @return  string  original data     *     * @access  public     *     */    function PMA_blowfish_decrypt($encdata, $secret)    {        global $iv;        return trim(mcrypt_decrypt(MCRYPT_BLOWFISH, $secret, base64_decode($encdata), MCRYPT_MODE_CBC, $iv));    }} else {    include_once './libraries/blowfish.php';}/** * Returns blowfish secret or generates one if needed. * * @access  public * @return string */function PMA_get_blowfish_secret(){    if (empty($GLOBALS['cfg']['blowfish_secret'])) {        if (empty($_SESSION['auto_blowfish_secret'])) {            // this returns 23 characters            $_SESSION['auto_blowfish_secret'] = uniqid('', true);        }        return $_SESSION['auto_blowfish_secret'];    } else {        // apply md5() to work around too long secrets (returns 32 characters)        return md5($GLOBALS['cfg']['blowfish_secret']);    }}/** * Displays authentication form * * this function MUST exit/quit the application * * @global  string    the last connection error * * @access  public */function PMA_auth(){    global $conn_error;    /* Perform logout to custom URL */    if (! empty($_REQUEST['old_usr'])     && ! empty($GLOBALS['cfg']['Server']['LogoutURL'])) {        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);        exit;    }    /* No recall if blowfish secret is not configured as it would produce garbage */    if ($GLOBALS['cfg']['LoginCookieRecall'] && !empty($GLOBALS['cfg']['blowfish_secret'])) {        $default_user   = $GLOBALS['PHP_AUTH_USER'];        $default_server = $GLOBALS['pma_auth_server'];        $autocomplete   = '';    } else {        $default_user   = '';        $default_server = '';        // skip the IE autocomplete feature.        $autocomplete   = ' autocomplete="off"';    }    $cell_align = ($GLOBALS['text_dir'] == 'ltr') ? 'left' : 'right';    // Defines the charset to be used    header('Content-Type: text/html; charset=utf-8');    /* HTML header; do not show here the PMA version to improve security */    $page_title = 'phpMyAdmin ';    include './libraries/header_meta_style.inc.php';    // if $page_title is set, this script uses it as the title:    include './libraries/header_scripts.inc.php';    ?><script type="text/javascript">//<![CDATA[// show login form in top frameif (top != self) {    window.top.location.href=location;}//]]></script></head><body class="loginform">    <?php    if (file_exists(CUSTOM_HEADER_FILE)) {        include CUSTOM_HEADER_FILE;    }    ?><div class="container"><a href="<?php echo PMA_linkURL('http://www.phpmyadmin.net/'); ?>" target="_blank" class="logo"><?php    $logo_image = $GLOBALS['pmaThemeImage'] . 'logo_right.png';    if (@file_exists($logo_image)) {        echo '<img src="' . $logo_image . '" id="imLogo" name="imLogo" alt="phpMyAdmin" border="0" />';    } else {        echo '<img name="imLogo" id="imLogo" src="' . $GLOBALS['pmaThemeImage'] . 'pma_logo.png' . '" '           . 'border="0" width="88" height="31" alt="phpMyAdmin" />';    }    ?></a><h1>    <?php    echo sprintf(__('Welcome to %s'),        '<bdo dir="ltr" xml:lang="en">' . $page_title . '</bdo>');    ?></h1>    <?php    // Show error message    if (! empty($conn_error)) {        PMA_Message::rawError($conn_error)->display();    }    // Displays the languages form    if (empty($GLOBALS['cfg']['Lang'])) {        include_once './libraries/display_select_lang.lib.php';        // use fieldset, don't show doc link        PMA_select_language(true, false);    }    ?><br /><!-- Login form --><form method="post" action="index.php" name="login_form"<?php echo $autocomplete; ?> target="_top" class="login">    <fieldset>    <legend><?php    echo __('Log in');    echo '<a href="./Documentation.html" target="documentation" ' .        'title="' . __('phpMyAdmin documentation') . '"> ';    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        echo PMA_getImage('b_help.png', __('phpMyAdmin documentation'));    } else {        echo '(*)';    }    echo '</a>';?></legend><?php if ($GLOBALS['cfg']['AllowArbitraryServer']) { ?>        <div class="item">            <label for="input_servername" title="<?php echo __('You can enter hostname/IP address and port separated by space.'); ?>"><?php echo __('Server:'); ?></label>            <input type="text" name="pma_servername" id="input_servername" value="<?php echo htmlspecialchars($default_server); ?>" size="24" class="textfield" title="<?php echo __('You can enter hostname/IP address and port separated by space.'); ?>" />        </div><?php } ?>        <div class="item">            <label for="input_username"><?php echo __('Username:'); ?></label>            <input type="text" name="pma_username" id="input_username" value="<?php echo htmlspecialchars($default_user); ?>" size="24" class="textfield"/>        </div>        <div class="item">            <label for="input_password"><?php echo __('Password:'); ?></label>            <input type="password" name="pma_password" id="input_password" value="" size="24" class="textfield" />        </div>    <?php    if (count($GLOBALS['cfg']['Servers']) > 1) {        ?>        <div class="item">            <label for="select_server"><?php echo __('Server Choice'); ?>:</label>            <select name="server" id="select_server"        <?php        if ($GLOBALS['cfg']['AllowArbitraryServer']) {            echo ' onchange="document.forms[\'login_form\'].elements[\'pma_servername\'].value = \'\'" ';        }        echo '>';        include_once './libraries/select_server.lib.php';        PMA_select_server(false, false);        echo '</select></div>';    } else {        echo '    <input type="hidden" name="server" value="' . $GLOBALS['server'] . '" />';    } // end if (server choice)    ?>    </fieldset>    <fieldset class="tblFooters">        <input value="<?php echo __('Go'); ?>" type="submit" id="input_go" />    <?php    $_form_params = array();    if (! empty($GLOBALS['target'])) {        $_form_params['target'] = $GLOBALS['target'];    }    if (! empty($GLOBALS['db'])) {        $_form_params['db'] = $GLOBALS['db'];    }    if (! empty($GLOBALS['table'])) {        $_form_params['table'] = $GLOBALS['table'];    }    // do not generate a "server" hidden field as we want the "server"    // drop-down to have priority    echo PMA_generate_common_hidden_inputs($_form_params, '', 0, 'server');    ?>    </fieldset></form>    <?php    // BEGIN Swekey Integration    Swekey_login('input_username', 'input_go');    // END Swekey Integration    // show the "Cookies required" message only if cookies are disabled    // (we previously tried to set some cookies)    if (empty($_COOKIE)) {        trigger_error(__('Cookies must be enabled past this point.'), E_USER_NOTICE);    }    if ($GLOBALS['error_handler']->hasDisplayErrors()) {        echo '<div>';        $GLOBALS['error_handler']->dispErrors();        echo '</div>';    }    ?></div>    <?php    if (file_exists(CUSTOM_FOOTER_FILE)) {        include CUSTOM_FOOTER_FILE;    }    ?></body></html>    <?php    exit;} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * this function DOES NOT check authentication - it just checks/provides * authentication credentials required to connect to the MySQL server * usually with PMA_DBI_connect() * * it returns false if something is missing - which usually leads to * PMA_auth() which displays login form * * it returns true if all seems ok which usually leads to PMA_auth_set_user() * * it directly switches to PMA_auth_fails() if user inactivity timout is reached * * @todo    AllowArbitraryServer on does not imply that the user wants an *          arbitrary server, or? so we should also check if this is filled and *          not only if allowed * * @return  boolean   whether we get authentication settings or not * * @access  public */function PMA_auth_check(){    // Initialization    /**     * @global $GLOBALS['pma_auth_server'] the user provided server to connect to     */    $GLOBALS['pma_auth_server'] = '';    $GLOBALS['PHP_AUTH_USER'] = $GLOBALS['PHP_AUTH_PW'] = '';    $GLOBALS['from_cookie'] = false;    // BEGIN Swekey Integration    if (! Swekey_auth_check()) {        return false;    }    // END Swekey Integration    if (defined('PMA_CLEAR_COOKIES')) {        foreach ($GLOBALS['cfg']['Servers'] as $key => $val) {            $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $key);            $GLOBALS['PMA_Config']->removeCookie('pmaServer-' . $key);            $GLOBALS['PMA_Config']->removeCookie('pmaUser-' . $key);        }        return false;    }    if (! empty($_REQUEST['old_usr'])) {        // The user wants to be logged out        // -> delete his choices that were stored in session        // according to the PHP manual we should do this before the destroy:        //$_SESSION = array();        // but we still need some parts of the session information        // in libraries/header_meta_style.inc.php        session_destroy();        // -> delete password cookie(s)        if ($GLOBALS['cfg']['LoginCookieDeleteAll']) {            foreach ($GLOBALS['cfg']['Servers'] as $key => $val) {                $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $key);                if (isset($_COOKIE['pmaPass-' . $key])) {                    unset($_COOKIE['pmaPass-' . $key]);                }            }        } else {            $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $GLOBALS['server']);            if (isset($_COOKIE['pmaPass-' . $GLOBALS['server']])) {                unset($_COOKIE['pmaPass-' . $GLOBALS['server']]);            }        }    }    if (! empty($_REQUEST['pma_username'])) {        // The user just logged in        $GLOBALS['PHP_AUTH_USER'] = $_REQUEST['pma_username'];        $GLOBALS['PHP_AUTH_PW']   = empty($_REQUEST['pma_password']) ? '' : $_REQUEST['pma_password'];        if ($GLOBALS['cfg']['AllowArbitraryServer'] && isset($_REQUEST['pma_servername'])) {            $GLOBALS['pma_auth_server'] = $_REQUEST['pma_servername'];        }        return true;    }    // At the end, try to set the $GLOBALS['PHP_AUTH_USER']    // and $GLOBALS['PHP_AUTH_PW'] variables from cookies    // servername    if ($GLOBALS['cfg']['AllowArbitraryServer']     && ! empty($_COOKIE['pmaServer-' . $GLOBALS['server']])) {        $GLOBALS['pma_auth_server'] = $_COOKIE['pmaServer-' . $GLOBALS['server']];    }    // username    if (empty($_COOKIE['pmaUser-' . $GLOBALS['server']])) {        return false;    }    $GLOBALS['PHP_AUTH_USER'] = PMA_blowfish_decrypt(        $_COOKIE['pmaUser-' . $GLOBALS['server']],        PMA_get_blowfish_secret());    // user was never logged in since session start    if (empty($_SESSION['last_access_time'])) {        return false;    }    // User inactive too long    if ($_SESSION['last_access_time'] < time() - $GLOBALS['cfg']['LoginCookieValidity']) {        PMA_cacheUnset('is_create_db_priv', true);        PMA_cacheUnset('is_process_priv', true);        PMA_cacheUnset('is_reload_priv', true);        PMA_cacheUnset('db_to_create', true);        PMA_cacheUnset('dbs_where_create_table_allowed', true);        $GLOBALS['no_activity'] = true;        PMA_auth_fails();        exit;    }    // password    if (empty($_COOKIE['pmaPass-' . $GLOBALS['server']])) {        return false;    }    $GLOBALS['PHP_AUTH_PW'] = PMA_blowfish_decrypt(        $_COOKIE['pmaPass-' . $GLOBALS['server']],        PMA_get_blowfish_secret());    if ($GLOBALS['PHP_AUTH_PW'] == "\xff(blank)") {        $GLOBALS['PHP_AUTH_PW'] = '';    }    $GLOBALS['from_cookie'] = true;    return true;} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    global $cfg;    // Ensures valid authentication mode, 'only_db', bookmark database and    // table names and relation table name are used    if ($cfg['Server']['user'] != $GLOBALS['PHP_AUTH_USER']) {        foreach ($cfg['Servers'] as $idx => $current) {            if ($current['host'] == $cfg['Server']['host']             && $current['port'] == $cfg['Server']['port']             && $current['socket'] == $cfg['Server']['socket']             && $current['ssl'] == $cfg['Server']['ssl']             && $current['connect_type'] == $cfg['Server']['connect_type']             && $current['user'] == $GLOBALS['PHP_AUTH_USER']) {                $GLOBALS['server'] = $idx;                $cfg['Server']     = $current;                break;            }        } // end foreach    } // end if    if ($GLOBALS['cfg']['AllowArbitraryServer']     && ! empty($GLOBALS['pma_auth_server'])) {        /* Allow to specify 'host port' */        $parts = explode(' ', $GLOBALS['pma_auth_server']);        if (count($parts) == 2) {            $tmp_host = $parts[0];            $tmp_port = $parts[1];        } else {            $tmp_host = $GLOBALS['pma_auth_server'];            $tmp_port = '';        }        if ($cfg['Server']['host'] != $GLOBALS['pma_auth_server']) {            $cfg['Server']['host'] = $tmp_host;            if (!empty($tmp_port)) {                $cfg['Server']['port'] = $tmp_port;            }        }        unset($tmp_host, $tmp_port, $parts);    }    $cfg['Server']['user']     = $GLOBALS['PHP_AUTH_USER'];    $cfg['Server']['password'] = $GLOBALS['PHP_AUTH_PW'];    // Avoid showing the password in phpinfo()'s output    unset($GLOBALS['PHP_AUTH_PW']);    unset($_SERVER['PHP_AUTH_PW']);    $_SESSION['last_access_time'] = time();    // Name and password cookies need to be refreshed each time    // Duration = one month for username    $GLOBALS['PMA_Config']->setCookie('pmaUser-' . $GLOBALS['server'],        PMA_blowfish_encrypt($cfg['Server']['user'],            PMA_get_blowfish_secret()));    // Duration = as configured    $GLOBALS['PMA_Config']->setCookie('pmaPass-' . $GLOBALS['server'],        PMA_blowfish_encrypt(!empty($cfg['Server']['password']) ? $cfg['Server']['password'] : "\xff(blank)",            PMA_get_blowfish_secret()),        null,        $GLOBALS['cfg']['LoginCookieStore']);    // Set server cookies if required (once per session) and, in this case, force    // reload to ensure the client accepts cookies    if (! $GLOBALS['from_cookie']) {        if ($GLOBALS['cfg']['AllowArbitraryServer']) {            if (! empty($GLOBALS['pma_auth_server'])) {                // Duration = one month for servername                $GLOBALS['PMA_Config']->setCookie('pmaServer-' . $GLOBALS['server'], $cfg['Server']['host']);            } else {                // Delete servername cookie                $GLOBALS['PMA_Config']->removeCookie('pmaServer-' . $GLOBALS['server']);            }        }        // URL where to go:        $redirect_url = $cfg['PmaAbsoluteUri'] . 'index.php';        // any parameters to pass?        $url_params = array();        if (strlen($GLOBALS['db'])) {            $url_params['db'] = $GLOBALS['db'];        }        if (strlen($GLOBALS['table'])) {            $url_params['table'] = $GLOBALS['table'];        }        // any target to pass?        if (! empty($GLOBALS['target']) && $GLOBALS['target'] != 'index.php') {            $url_params['target'] = $GLOBALS['target'];        }        /**         * whether we come from a fresh cookie login         */        define('PMA_COMING_FROM_COOKIE_LOGIN', true);        /**         * Clear user cache.         */        PMA_clearUserCache();        PMA_sendHeaderLocation($redirect_url . PMA_generate_common_url($url_params, '&'));        exit();    } // end if    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * prepares error message and switches to PMA_auth() which display the error * and the login form * * this function MUST exit/quit the application, * currently doen by call to PMA_auth() * * @access  public */function PMA_auth_fails(){    global $conn_error;    // Deletes password cookie and displays the login form    $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $GLOBALS['server']);    if (! empty($GLOBALS['login_without_password_is_forbidden'])) {        $conn_error = __('Login without a password is forbidden by configuration (see AllowNoPassword)');    } elseif (! empty($GLOBALS['allowDeny_forbidden'])) {        $conn_error = __('Access denied');    } elseif (! empty($GLOBALS['no_activity'])) {        $conn_error = sprintf(__('No activity within %s seconds; please log in again'), $GLOBALS['cfg']['LoginCookieValidity']);        // Remember where we got timeout to return on same place        if (PMA_getenv('SCRIPT_NAME')) {            $GLOBALS['target'] = basename(PMA_getenv('SCRIPT_NAME'));            // avoid "missing parameter: field" on re-entry            if ('tbl_alter.php' == $GLOBALS['target']) {                $GLOBALS['target'] = 'tbl_structure.php';            }        }    } elseif (PMA_DBI_getError()) {        $conn_error = '#' . $GLOBALS['errno'] . ' ' . __('Cannot log in to the MySQL server');    } else {        $conn_error = __('Cannot log in to the MySQL server');    }    // needed for PHP-CGI (not need for FastCGI or mod-php)    header('Cache-Control: no-store, no-cache, must-revalidate');    header('Pragma: no-cache');    PMA_auth();} // end of the 'PMA_auth_fails()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * * @package PhpMyAdmin */class PMA_Theme_Manager{    /**     * @var string path to theme folder     * @access protected     */    var $_themes_path;    /**     * @var array available themes     */    var $themes = array();    /**     * @var string  cookie name     */    var $cookie_name = 'pma_theme';    /**     * @var boolean     */    var $per_server = false;    /**     * @var string name of active theme     */    var $active_theme = '';    /**     * @var PMA_Theme PMA_Theme active theme     */    var $theme = null;    /**     * @var string     */    var $theme_default = 'original';    function __construct()    {        $this->init();    }    /**     * sets path to folder containing the themes     *     * @param string  $path   path to themes folder     * @return  boolean success     */    function setThemesPath($path)    {        if (! $this->_checkThemeFolder($path)) {            return false;        }        $this->_themes_path = trim($path);        return true;    }    /**     * @public     * @return  string     */    function getThemesPath()    {        return $this->_themes_path;    }    /**     * sets if there are different themes per server     *     * @param boolean $per_server     */    function setThemePerServer($per_server)    {        $this->per_server  = (bool) $per_server;    }    function init()    {        $this->themes = array();        $this->theme_default = 'original';        $this->active_theme = '';        if (! $this->setThemesPath($GLOBALS['cfg']['ThemePath'])) {            return false;        }        $this->setThemePerServer($GLOBALS['cfg']['ThemePerServer']);        $this->loadThemes();        $this->theme = new PMA_Theme;        if (! $this->checkTheme($GLOBALS['cfg']['ThemeDefault'])) {            trigger_error(                sprintf(                    __('Default theme %s not found!'),                    htmlspecialchars($GLOBALS['cfg']['ThemeDefault'])                    ),                E_USER_ERROR                );            $GLOBALS['cfg']['ThemeDefault'] = false;        }        $this->theme_default = $GLOBALS['cfg']['ThemeDefault'];        // check if user have a theme cookie        if (! $this->getThemeCookie()         || ! $this->setActiveTheme($this->getThemeCookie())) {            // otherwise use default theme            if ($GLOBALS['cfg']['ThemeDefault']) {                $this->setActiveTheme($GLOBALS['cfg']['ThemeDefault']);            } else {                // or original theme                $this->setActiveTheme('original');            }        }    }    function checkConfig()    {        if ($this->_themes_path != trim($GLOBALS['cfg']['ThemePath'])         || $this->theme_default != $GLOBALS['cfg']['ThemeDefault']) {            $this->init();        } else {            // at least the theme path needs to be checked every time for new            // themes, as there is no other way at the moment to keep track of            // new or removed themes            $this->loadThemes();        }    }    function setActiveTheme($theme = null)    {        if (! $this->checkTheme($theme)) {            trigger_error(                sprintf(                    __('Theme %s not found!'),                    htmlspecialchars($theme)                ),                E_USER_ERROR);            return false;        }        $this->active_theme = $theme;        $this->theme = $this->themes[$theme];        // need to set later        //$this->setThemeCookie();        return true;    }    /**     * @return  string  cookie name     */    function getThemeCookieName()    {        // Allow different theme per server        if (isset($GLOBALS['server']) && $this->per_server) {            return $this->cookie_name . '-' . $GLOBALS['server'];        } else {            return $this->cookie_name;        }    }    /**     * returns name of theme stored in the cookie     * @return  string  theme name from cookie     */    function getThemeCookie()    {        if (isset($_COOKIE[$this->getThemeCookieName()])) {            return $_COOKIE[$this->getThemeCookieName()];        }        return false;    }    /**     * save theme in cookie     *     * @return bool true     */    function setThemeCookie()    {        $GLOBALS['PMA_Config']->setCookie($this->getThemeCookieName(), $this->theme->id,            $this->theme_default);        // force a change of a dummy session variable to avoid problems        // with the caching of phpmyadmin.css.php        $GLOBALS['PMA_Config']->set('theme-update', $this->theme->id);        return true;    }    /**     * @private     * @param string $folder     * @return  boolean     */    private function _checkThemeFolder($folder)    {        if (! is_dir($folder)) {            trigger_error(                sprintf(__('Theme path not found for theme %s!'),                    htmlspecialchars($folder)),                E_USER_ERROR);            return false;        }        return true;    }    /**     * read all themes     *     * @return bool true     */    function loadThemes()    {        $this->themes = array();        if ($handleThemes = opendir($this->getThemesPath())) {            // check for themes directory            while (false !== ($PMA_Theme = readdir($handleThemes))) {                // Skip non dirs, . and ..                if ($PMA_Theme == '.' || $PMA_Theme == '..' || ! is_dir($this->getThemesPath() . '/' . $PMA_Theme)) {                    continue;                }                if (array_key_exists($PMA_Theme, $this->themes)) {                    continue;                }                $new_theme = PMA_Theme::load($this->getThemesPath() . '/' . $PMA_Theme);                if ($new_theme) {                    $new_theme->setId($PMA_Theme);                    $this->themes[$PMA_Theme] = $new_theme;                }            } // end get themes            closedir($handleThemes);        } else {            trigger_error(                'phpMyAdmin-ERROR: cannot open themes folder: ' . $this->getThemesPath(),                E_USER_WARNING);            return false;        } // end check for themes directory        ksort($this->themes);        return true;    }    /**     * checks if given theme name is a known theme     *     * @param string  $theme  name fo theme to check for     * @return bool     */    function checkTheme($theme)    {        if (! array_key_exists($theme, $this->themes)) {            return false;        }        return true;    }    /**     * returns HTML selectbox, with or without form enclosed     *     * @param boolean $form   whether enclosed by from tags or not     * @return string     */    function getHtmlSelectBox($form = true)    {        $select_box = '';        if ($form) {            $select_box .= '<form name="setTheme" method="post" action="index.php"'                .' target="_parent">';            $select_box .=  PMA_generate_common_hidden_inputs();        }        $theme_preview_path= './themes.php';        $theme_preview_href = '<a href="' . $theme_preview_path . '" target="themes" class="themeselect">';        $select_box .=  $theme_preview_href . __('Theme') . '</a>:' . "\n";        $select_box .=  '<select name="set_theme" xml:lang="en" dir="ltr" class="autosubmit">';        foreach ($this->themes as $each_theme_id => $each_theme) {            $select_box .=  '<option value="' . $each_theme_id . '"';            if ($this->active_theme === $each_theme_id) {                $select_box .=  ' selected="selected"';            }            $select_box .=  '>' . htmlspecialchars($each_theme->getName()) . '</option>';        }        $select_box .=  '</select>';        if ($form) {            $select_box .=  '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>';            $select_box .=  '</form>';        }        return $select_box;    }    /**     * enables backward compatibility     */    function makeBc()    {        $GLOBALS['theme']           = $this->theme->getId();        $GLOBALS['pmaThemePath']    = $this->theme->getPath();        $GLOBALS['pmaThemeImage']   = $this->theme->getImgPath();        /**         * load layout file if exists         */        if (file_exists($this->theme->getLayoutFile())) {            include $this->theme->getLayoutFile();        }    }    /**     * prints out preview for every theme     *     */    function printPreviews()    {        foreach ($this->themes as $each_theme) {            $each_theme->printPreview();        } // end 'open themes'    }    /**     * returns PMA_Theme object for fall back theme     * @return object   PMA_Theme     */    function getFallBackTheme()    {        if (isset($this->themes['original'])) {            return $this->themes['original'];        }        return false;    }    /**     * prints css data     *     * @param string $type     * @return bool     */    function printCss($type)    {        if ($this->theme->loadCss($type)) {            return true;        }        // if loading css for this theme failed, try default theme css        $fallback_theme = $this->getFallBackTheme();        if ($fallback_theme && $fallback_theme->loadCss($type)) {            return true;        }        return false;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Display form for changing/adding table fields/columns * * included by tbl_addfield.php, -_alter.php, -_create.php * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Check parameters */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';PMA_checkParameters(array('db', 'table', 'action', 'num_fields'));// Get available character sets and storage enginesrequire_once './libraries/mysql_charsets.lib.php';require_once './libraries/StorageEngine.class.php';/** * Class for partition management */require_once './libraries/Partition.class.php';// load additional configuration variablesif (PMA_DRIZZLE) {    include_once './libraries/data_drizzle.inc.php';} else {    include_once './libraries/data_mysql.inc.php';}$length_values_input_size = 8;$_form_params = array(    'db' => $db,);if ($action == 'tbl_create.php') {    $_form_params['reload'] = 1;} elseif ($action == 'tbl_addfield.php') {    $_form_params['field_where'] = $_REQUEST['field_where'];    $_form_params['after_field'] = $_REQUEST['after_field'];    $_form_params['table'] = $table;} else {    $_form_params['table'] = $table;}if (isset($num_fields)) {    $_form_params['orig_num_fields'] = $num_fields;}if (isset($_REQUEST['field_where'])) {    $_form_params['orig_field_where'] = $_REQUEST['field_where'];}if (isset($_REQUEST['after_field'])) {    $_form_params['orig_after_field'] = $_REQUEST['after_field'];}if (isset($selected) && is_array($selected)) {    foreach ($selected as $o_fld_nr => $o_fld_val) {        $_form_params['selected[' . $o_fld_nr . ']'] = $o_fld_val;        if (! isset($true_selected)) {            $_form_params['true_selected[' . $o_fld_nr . ']'] = $o_fld_val;        }    }    if (isset($true_selected) && is_array($true_selected)) {        foreach ($true_selected as $o_fld_nr => $o_fld_val) {            $_form_params['true_selected[' . $o_fld_nr . ']'] = $o_fld_val;        }    }} elseif (isset($_REQUEST['field'])) {    $_form_params['orig_field'] = $_REQUEST['field'];    if (isset($orig_field)) {        $_form_params['true_selected[]'] = $orig_field;    } else {        $_form_params['true_selected[]'] = $_REQUEST['field'];    }}$is_backup = ($action != 'tbl_create.php' && $action != 'tbl_addfield.php');$header_cells = array();$content_cells = array();$header_cells[] = __('Name');$header_cells[] = __('Type')     . ($GLOBALS['cfg']['ReplaceHelpImg']        ? PMA_showMySQLDocu('SQL-Syntax', 'data-types')        : '<br /><span style="font-weight: normal">' . PMA_showMySQLDocu('SQL-Syntax', 'data-types')     . '</span>');$header_cells[] = __('Length/Values') . PMA_showHint(__('If column type is "enum" or "set", please enter the values using this format: \'a\',\'b\',\'c\'...<br />If you ever need to put a backslash ("\") or a single quote ("\'") amongst those values, precede it with a backslash (for example \'\\\\xyz\' or \'a\\\'b\').'));$header_cells[] = __('Default') . PMA_showHint(__('For default values, please enter just a single value, without backslash escaping or quotes, using this format: a'));$header_cells[] = __('Collation');$header_cells[] = __('Attributes');$header_cells[] = __('Null');// We could remove this 'if' and let the key information be shown and// editable. However, for this to work, tbl_alter must be modified to use the// key fields, as tbl_addfield does.if (!$is_backup) {    $header_cells[] = __('Index');}$header_cells[] = '<abbr title="AUTO_INCREMENT">A_I</abbr>';require_once './libraries/transformations.lib.php';$cfgRelation = PMA_getRelationsParam();$comments_map = array();$mime_map = array();$available_mime = array();$comments_map = PMA_getComments($db, $table);$header_cells[] = __('Comments');if ($cfgRelation['mimework'] && $cfg['BrowseMIME']) {    $mime_map = PMA_getMIME($db, $table);    $available_mime = PMA_getAvailableMIMEtypes();    $hint = '<br />' .        sprintf(__('For a list of available transformation options and their MIME type transformations, click on %stransformation descriptions%s'),            '<a href="transformation_overview.php?'            . PMA_generate_common_url($db, $table) . '" target="_blank">',            '</a>');    $header_cells[] = __('MIME type');    $header_cells[] = __('Browser transformation');    $header_cells[] = __('Transformation options')        . PMA_showHint(__('Please enter the values for transformation options using this format: \'a\', 100, b,\'c\'...<br />If you ever need to put a backslash ("\") or a single quote ("\'") amongst those values, precede it with a backslash (for example \'\\\\xyz\' or \'a\\\'b\').') . $hint);}//  workaround for field_fulltext, because its submitted indizes contain//  the index as a value, not a key. Inserted here for easier maintaineance//  and less code to change in existing files.if (isset($field_fulltext) && is_array($field_fulltext)) {    foreach ($field_fulltext as $fulltext_nr => $fulltext_indexkey) {        $submit_fulltext[$fulltext_indexkey] = $fulltext_indexkey;    }}for ($i = 0; $i < $num_fields; $i++) {    if (! empty($regenerate)) {        // An error happened with previous inputs, so we will restore the data        // to embed it once again in this form.        $row['Field']     = (isset($_REQUEST['field_name'][$i]) ? $_REQUEST['field_name'][$i] : false);        $row['Type']      = (isset($_REQUEST['field_type'][$i]) ? $_REQUEST['field_type'][$i] : false);        $row['Collation'] = (isset($_REQUEST['field_collation'][$i]) ? $_REQUEST['field_collation'][$i] : '');        $row['Null']      = (isset($_REQUEST['field_null'][$i]) ? $_REQUEST['field_null'][$i] : '');        if (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'primary_' . $i) {            $row['Key'] = 'PRI';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'index_' . $i) {            $row['Key'] = 'MUL';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'unique_' . $i) {            $row['Key'] = 'UNI';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'fulltext_' . $i) {            $row['Key'] = 'FULLTEXT';        } else {            $row['Key'] = '';        }        // put None in the drop-down for Default, when someone adds a field        $row['DefaultType']  = (isset($_REQUEST['field_default_type'][$i]) ? $_REQUEST['field_default_type'][$i] : 'NONE');        $row['DefaultValue'] = (isset($_REQUEST['field_default_value'][$i]) ? $_REQUEST['field_default_value'][$i] : '');        switch ($row['DefaultType']) {            case 'NONE' :                $row['Default'] = null;                break;            case 'USER_DEFINED' :                $row['Default'] = $row['DefaultValue'];                break;            case 'NULL' :            case 'CURRENT_TIMESTAMP' :                $row['Default'] = $row['DefaultType'];                break;        }        $row['Extra']     = (isset($_REQUEST['field_extra'][$i]) ? $_REQUEST['field_extra'][$i] : false);        $row['Comment']   = (isset($submit_fulltext[$i]) && ($submit_fulltext[$i] == $i) ? 'FULLTEXT' : false);        $submit_length    = (isset($_REQUEST['field_length'][$i]) ? $_REQUEST['field_length'][$i] : false);        $submit_attribute = (isset($_REQUEST['field_attribute'][$i]) ? $_REQUEST['field_attribute'][$i] : false);        $submit_default_current_timestamp = (isset($_REQUEST['field_default_current_timestamp'][$i]) ? true : false);        if (isset($_REQUEST['field_comments'][$i])) {            $comments_map[$row['Field']] = $_REQUEST['field_comments'][$i];        }        if (isset($_REQUEST['field_mimetype'][$i])) {            $mime_map[$row['Field']]['mimetype'] = $_REQUEST['field_mimetype'][$i];        }        if (isset($_REQUEST['field_transformation'][$i])) {            $mime_map[$row['Field']]['transformation'] = $_REQUEST['field_transformation'][$i];        }        if (isset($_REQUEST['field_transformation_options'][$i])) {            $mime_map[$row['Field']]['transformation_options'] = $_REQUEST['field_transformation_options'][$i];        }    } elseif (isset($fields_meta[$i])) {        $row = $fields_meta[$i];        switch ($row['Default']) {            case null:                if ($row['Null'] == 'YES') {                    $row['DefaultType']  = 'NULL';                    $row['DefaultValue'] = '';    // SHOW FULL COLUMNS does not report the case when there is a DEFAULT value    // which is empty so we need to use the results of SHOW CREATE TABLE                } elseif (isset($row) && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['default_value'])) {                    $row['DefaultType']  = 'USER_DEFINED';                    $row['DefaultValue'] = $row['Default'];                } else {                    $row['DefaultType']  = 'NONE';                    $row['DefaultValue'] = '';                }                break;            case 'CURRENT_TIMESTAMP':                $row['DefaultType']  = 'CURRENT_TIMESTAMP';                $row['DefaultValue'] = '';                break;            default:                $row['DefaultType']  = 'USER_DEFINED';                $row['DefaultValue'] = $row['Default'];                break;        }    }    if (isset($row['Type'])) {        $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);        if ($extracted_fieldspec['type'] == 'bit') {            $row['Default'] = PMA_convert_bit_default_value($row['Default']);        }    }    // Cell index: If certain fields get left out, the counter shouldn't change.    $ci = 0;    // Everytime a cell shall be left out the STRG-jumping feature, $ci_offset    // has to be incremented ($ci_offset++)    $ci_offset = -1;    // old column name    if ($is_backup) {        if (! empty($true_selected[$i])) {            $_form_params['field_orig[' . $i . ']'] = $true_selected[$i];        } elseif (isset($row['Field'])) {            $_form_params['field_orig[' . $i . ']'] = $row['Field'];        } else {            $_form_params['field_orig[' . $i . ']'] = '';        }    }    // column name    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_name[' . $i . ']"'        . ' maxlength="64" class="textfield" title="' . __('Column') . '"'        . ' size="10"'        . ' value="' . (isset($row['Field']) ? htmlspecialchars($row['Field']) : '') . '"'        . ' />';    $ci++;    // column type    $select_id = 'field_' . $i . '_' . ($ci - $ci_offset);    $content_cells[$i][$ci] = '<select class="column_type" name="field_type[' . $i . ']"'        .' id="' . $select_id . '">';    if (empty($row['Type'])) {        // creating a column        $row['Type'] = '';        $type        = '';        $length = '';    } else {        $type = $extracted_fieldspec['type'];        $length = $extracted_fieldspec['spec_in_brackets'];    }    // some types, for example longtext, are reported as    // "longtext character set latin7" when their charset and / or collation    // differs from the ones of the corresponding database.    $tmp = strpos($type, 'character set');    if ($tmp) {        $type = substr($type, 0, $tmp - 1);    }    if (isset($submit_length) && $submit_length != false) {        $length = $submit_length;    }    // rtrim the type, for cases like "float unsigned"    $type = rtrim($type);    $type_upper = strtoupper($type);    $content_cells[$i][$ci] .= PMA_getSupportedDatatypes(true, $type_upper);    $content_cells[$i][$ci] .= '    </select>';    $ci++;    // old column length    if ($is_backup) {        $_form_params['field_length_orig[' . $i . ']'] = $length;    }    // column length    $length_to_display = $length;    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_length[' . $i . ']" size="' . $length_values_input_size . '"'        . ' value="' . htmlspecialchars($length_to_display) . '"'        . ' class="textfield" />'        . '<p class="enum_notice" id="enum_notice_' . $i . '_' . ($ci - $ci_offset) . '">';    $content_cells[$i][$ci] .= __('ENUM or SET data too long?')        . '<a onclick="return false;" href="enum_editor.php?'        . PMA_generate_common_url()        . '&amp;values=' . urlencode($length_to_display)        . '&amp;field=' .  (isset($row['Field']) ? urlencode($row['Field']) : "")        . '" class="open_enum_editor" target="_blank"> '        . __('Get more editing space') . '</a>'        . '</p>';    $ci++;    // column default    /**     * having NULL enabled does not implicit having Default with NULL     *    if (isset($row)      && ! isset($row['Default']) && isset($row['Null']) && $row['Null'] == 'YES') {        $row['Default'] = 'NULL';    }     */    // old column default    if ($is_backup) {        $_form_params['field_default_orig[' . $i . ']']            = (isset($row['Default']) ? $row['Default'] : '');    }    // here we put 'NONE' as the default value of drop-down; otherwise    // users would have problems if they forget to enter the default    // value (example, for an INT)    $default_options = array(        'NONE'              =>  _pgettext('for default', 'None'),        'USER_DEFINED'      =>  __('As defined:'),        'NULL'              => 'NULL',        'CURRENT_TIMESTAMP' => 'CURRENT_TIMESTAMP',    );    // for a TIMESTAMP, do not show the string "CURRENT_TIMESTAMP" as a default value    if ($type_upper == 'TIMESTAMP'     && ! empty($default_current_timestamp)     && isset($row['Default'])) {        $row['Default'] = '';    }    if ($type_upper == 'BIT') {        $row['DefaultValue'] = PMA_convert_bit_default_value($row['DefaultValue']);    }    $content_cells[$i][$ci] = '<select name="field_default_type[' . $i . ']" class="default_type">';    foreach ($default_options as $key => $value) {        $content_cells[$i][$ci] .= '<option value="' . $key . '"';        // is only set when we go back to edit a field's structure        if (isset($row['DefaultType']) && $row['DefaultType'] == $key) {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= ' >' . $value . '</option>';    }    $content_cells[$i][$ci] .= '</select>';    $content_cells[$i][$ci] .= '<br />';    $content_cells[$i][$ci] .= '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_default_value[' . $i . ']" size="12"'        . ' value="' . (isset($row['DefaultValue']) ? htmlspecialchars($row['DefaultValue']) : '') . '"'        . ' class="textfield default_value" />';    $ci++;    // column collation    $tmp_collation          = empty($row['Collation']) ? null : $row['Collation'];    $content_cells[$i][$ci] = PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_COLLATION, 'field_collation[' . $i . ']',        'field_' . $i . '_' . ($ci - $ci_offset), $tmp_collation, false);    unset($tmp_collation);    $ci++;    // column attribute    $content_cells[$i][$ci] = '<select style="font-size: 70%;"'        . ' name="field_attribute[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '">';    $attribute     = '';    if (isset($extracted_fieldspec)) {        $attribute = $extracted_fieldspec['attribute'];    }    if (isset($row['Extra']) && $row['Extra'] == 'on update CURRENT_TIMESTAMP') {        $attribute = 'on update CURRENT_TIMESTAMP';    }    if (isset($submit_attribute) && $submit_attribute != false) {        $attribute = $submit_attribute;    }    // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the    // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe    // the latter.    if (PMA_MYSQL_INT_VERSION < 50025     && isset($row['Field'])     && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['type'])     && $analyzed_sql[0]['create_table_fields'][$row['Field']]['type'] == 'TIMESTAMP'     && $analyzed_sql[0]['create_table_fields'][$row['Field']]['timestamp_not_null'] == true) {        $row['Null'] = '';    }    // MySQL 4.1.2+ TIMESTAMP options    // (if on_update_current_timestamp is set, then it's TRUE)    if (isset($row['Field'])     && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['on_update_current_timestamp'])) {        $attribute = 'on update CURRENT_TIMESTAMP';    }    if ((isset($row['Field'])      && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['default_current_timestamp']))     || (isset($submit_default_current_timestamp) && $submit_default_current_timestamp)) {        $default_current_timestamp = true;    } else {        $default_current_timestamp = false;    }    $cnt_attribute_types = count($cfg['AttributeTypes']);    for ($j = 0; $j < $cnt_attribute_types; $j++) {        $content_cells[$i][$ci] .= '                <option value="'. $cfg['AttributeTypes'][$j] . '"';        if (strtoupper($attribute) == strtoupper($cfg['AttributeTypes'][$j])) {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>' . $cfg['AttributeTypes'][$j] . '</option>';    }    $content_cells[$i][$ci] .= '</select>';    $ci++;    // column NULL    $content_cells[$i][$ci] = '<input name="field_null[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '"';    if (! empty($row['Null']) && $row['Null'] != 'NO' && $row['Null'] != 'NOT NULL') {        $content_cells[$i][$ci] .= ' checked="checked"';    }    $content_cells[$i][$ci] .= ' type="checkbox" value="NULL" />';    $ci++;    // column indexes    // See my other comment about removing this 'if'.    if (!$is_backup) {        $content_cells[$i][$ci] = '<select name="field_key[' . $i . ']"'            . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '">';        $content_cells[$i][$ci] .= '<option value="none_' . $i . '">---</option>';        $content_cells[$i][$ci] .= '<option value="primary_' . $i . '" title="' . __('Primary') . '"';        if (isset($row['Key']) && $row['Key'] == 'PRI') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>PRIMARY</option>';        $content_cells[$i][$ci] .= '<option value="unique_' . $i . '" title="' . __('Unique') . '"';        if (isset($row['Key']) && $row['Key'] == 'UNI') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>UNIQUE</option>';        $content_cells[$i][$ci] .= '<option value="index_' . $i . '" title="' . __('Index') . '"';        if (isset($row['Key']) && $row['Key'] == 'MUL') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>INDEX</option>';        if (!PMA_DRIZZLE) {            $content_cells[$i][$ci] .= '<option value="fulltext_' . $i . '" title="' . __('Fulltext') . '"';            if (isset($row['Key']) && $row['Key'] == 'FULLTEXT') {                $content_cells[$i][$ci] .= ' selected="selected"';            }            $content_cells[$i][$ci] .= '>FULLTEXT</option>';        }        $content_cells[$i][$ci] .= '</select>';        $ci++;    } // end if ($action ==...)    // column auto_increment    $content_cells[$i][$ci] = '<input name="field_extra[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '"';    if (isset($row['Extra']) && strtolower($row['Extra']) == 'auto_increment') {        $content_cells[$i][$ci] .= ' checked="checked"';    }    $content_cells[$i][$ci] .= ' type="checkbox" value="AUTO_INCREMENT" />';    $ci++;    // column comments    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_comments[' . $i . ']" size="12"'        . ' value="' . (isset($row['Field']) && is_array($comments_map) && isset($comments_map[$row['Field']]) ?  htmlspecialchars($comments_map[$row['Field']]) : '') . '"'        . ' class="textfield" />';    $ci++;    // column MIME-types    if ($cfgRelation['mimework'] && $cfg['BrowseMIME'] && $cfgRelation['commwork']) {        $content_cells[$i][$ci] = '<select id="field_' . $i . '_' . ($ci - $ci_offset) . '" size="1" name="field_mimetype[' . $i . ']">';        $content_cells[$i][$ci] .= '    <option value="">&nbsp;</option>';        if (is_array($available_mime['mimetype'])) {            foreach ($available_mime['mimetype'] AS $mimekey => $mimetype) {                $checked = (isset($row['Field']) && isset($mime_map[$row['Field']]['mimetype']) && ($mime_map[$row['Field']]['mimetype'] == str_replace('/', '_', $mimetype)) ? 'selected ' : '');                $content_cells[$i][$ci] .= '    <option value="' . str_replace('/', '_', $mimetype) . '" ' . $checked . '>' . htmlspecialchars($mimetype) . '</option>';            }        }        $content_cells[$i][$ci] .= '</select>';        $ci++;        $content_cells[$i][$ci] = '<select id="field_' . $i . '_' . ($ci - $ci_offset) . '" size="1" name="field_transformation[' . $i . ']">';        $content_cells[$i][$ci] .= '    <option value="" title="' . __('None') . '"></option>';        if (is_array($available_mime['transformation'])) {            foreach ($available_mime['transformation'] AS $mimekey => $transform) {                $checked = (isset($row['Field']) && isset($mime_map[$row['Field']]['transformation']) && (preg_match('@' . preg_quote($available_mime['transformation_file'][$mimekey]) . '3?@i', $mime_map[$row['Field']]['transformation'])) ? 'selected ' : '');                $tooltip = PMA_getTransformationDescription($available_mime['transformation_file'][$mimekey], false);                $content_cells[$i][$ci] .= '<option value="' . $available_mime['transformation_file'][$mimekey] . '" ' . $checked . ' title="' . htmlspecialchars($tooltip) . '">' . htmlspecialchars($transform) . '</option>';            }        }        $content_cells[$i][$ci] .= '</select>';        $ci++;        $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'            . ' type="text" name="field_transformation_options[' . $i . ']"'            . ' size="16" class="textfield"'            . ' value="' . (isset($row['Field']) && isset($mime_map[$row['Field']]['transformation_options']) ?  htmlspecialchars($mime_map[$row['Field']]['transformation_options']) : '') . '"'            . ' />';        //$ci++;    }} // end for    ?><script src="./js/keyhandler.js" type="text/javascript"></script><script type="text/javascript">// <![CDATA[var switch_movement = 0;document.onkeydown = onKeyDownArrowsHandler;// ]]></script>    <form id="<?php echo ($action == 'tbl_create.php' ? 'create_table' : 'append_fields'); ?>_form" method="post" action="<?php echo $action; ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?phpecho PMA_generate_common_hidden_inputs($_form_params);unset($_form_params);if ($action == 'tbl_create.php') {    ?>    <table>        <tr><td><?php echo __('Table name'); ?>:&nbsp;<input type="text" name="table" size="40" maxlength="80"                value="<?php echo (isset($_REQUEST['table']) ? htmlspecialchars($_REQUEST['table']) : ''); ?>"                class="textfield" />            </td>            <td>                <?php if ($action == 'tbl_create.php' || $action == 'tbl_addfield.php') { ?>                <?php echo sprintf(__('Add %s column(s)'), '<input type="text" id="added_fields" name="added_fields" size="2" value="1" onfocus="this.select()" />'); ?>                <input type="submit" name="submit_num_fields" value="<?php echo __('Go'); ?>"                    onclick="return checkFormElementInRange(this.form, 'added_fields', '<?php echo str_replace('\'', '\\\'', __('You have to add at least one column.')); ?>', 1)"                />                <?php } ?>            </td>        </tr>    </table>    <?php}if (is_array($content_cells) && is_array($header_cells)) {    // last row is for javascript insert    //$empty_row = array_pop($content_cells);    echo '<table id="table_columns" class="noclick">';    echo '<caption class="tblHeaders">' . __('Structure') . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_TABLE') . '</caption>';        ?><tr>    <?php foreach ($header_cells as $header_val) { ?>    <th><?php echo $header_val; ?></th>    <?php } ?></tr>    <?php    $odd_row = true;    foreach ($content_cells as $content_row) {        echo '<tr class="' . ($odd_row ? 'odd' : 'even') . '">';        $odd_row = ! $odd_row;        if (is_array($content_row)) {            foreach ($content_row as $content_row_val) {                ?>    <td align="center"><?php echo $content_row_val; ?></td>                <?php            }        }        echo '</tr>';    }    ?></table><br />    <?php}/** * needs to be finished * *if ($display_type == 'horizontal') {    $new_field = '';    foreach ($empty_row as $content_row_val) {        $new_field .= '<td align="center">' . $content_row_val . '</td>';    }    ?><script type="text/javascript">// <![CDATA[var odd_row = <?php echo $odd_row; ?>;function addField(){    var new_fields = document.getElementById('added_fields').value;    var new_field_container = document.getElementById('table_columns');    var new_field = '<?php echo preg_replace('|\s+|', ' ', preg_replace('|\'|', '\\\'', $new_field)); ?>';    var i = 0;    for (i = 0; i < new_fields; i++) {        if (odd_row) {            new_field_container.innerHTML += '<tr class="odd">' + new_field + '</tr>';        } else {            new_field_container.innerHTML += '<tr class="even">' + new_field + '</tr>';        }        odd_row = ! odd_row;    }    return true;}// ]]></script>    <?php} */if ($action == 'tbl_create.php') {    ?>    <table>    <tr valign="top">        <th><?php echo __('Table comments'); ?>:&nbsp;</th>        <td width="25">&nbsp;</td>        <th><?php echo __('Storage Engine'); ?>:            <?php echo PMA_showMySQLDocu('Storage_engines', 'Storage_engines'); ?>        </th>        <td width="25">&nbsp;</td>        <th><?php echo __('Collation') ;?>:&nbsp;</th>    </tr>    <tr><td><input type="text" name="comment" size="40" maxlength="80"                value="<?php echo (isset($_REQUEST['comment']) ? htmlspecialchars($_REQUEST['comment']) : ''); ?>"                class="textfield" />        </td>        <td width="25">&nbsp;</td>        <td>    <?php    echo PMA_StorageEngine::getHtmlSelect('tbl_type', null,        (isset($_REQUEST['tbl_type']) ? $_REQUEST['tbl_type'] : null));    ?>        </td>        <td width="25">&nbsp;</td>        <td>    <?php    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION, 'tbl_collation',        null, (isset($_REQUEST['tbl_collation']) ? $_REQUEST['tbl_collation'] : null), false, 3);    ?>        </td>    </tr>    <?php    if (PMA_Partition::havePartitioning()) {        ?>    <tr valign="top">        <th><?php echo __('PARTITION definition'); ?>:&nbsp;<?php echo PMA_showMySQLDocu('Partitioning', 'Partitioning'); ?>        </th>    </tr>    <tr>        <td>            <textarea name="partition_definition" id="partitiondefinition"                cols="<?php echo $GLOBALS['cfg']['TextareaCols'];?>"                rows="<?php echo $GLOBALS['cfg']['TextareaRows'];?>"                dir="<?php echo $GLOBALS['text_dir'];?>"><?php echo (isset($_REQUEST['partition_definition']) ? htmlspecialchars($_REQUEST['partition_definition']) : ''); ?></textarea>        </td>    </tr>        <?php    }    ?>    </table>    <br />    <?php} // end if ($action == 'tbl_create.php')?><fieldset class="tblFooters">    <input type="submit" name="do_save_data" value="<?php echo __('Save'); ?>" /></fieldset><div id="properties_message"></div></form><div id="popup_background"></div>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @todo    we must handle the case if sql.php is called directly with a query *          that returns 0 rows - to prevent cyclic redirects or includes * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/Table.class.php';require_once './libraries/check_user_privileges.lib.php';require_once './libraries/bookmark.lib.php';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'tbl_change.js';// the next one needed because sql.php may do a "goto" to tbl_structure.php$GLOBALS['js_include'][] = 'tbl_structure.js';$GLOBALS['js_include'][] = 'gis_data_editor.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';if (isset($_SESSION['profiling'])) {    $GLOBALS['js_include'][] = 'highcharts/highcharts.js';    /* Files required for chart exporting */    $GLOBALS['js_include'][] = 'highcharts/exporting.js';    /* < IE 9 doesn't support canvas natively */    if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {        $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';    }    $GLOBALS['js_include'][] = 'canvg/canvg.js';}/** * Defines the url to return to in case of error in a sql statement */// Security checkingsif (! empty($goto)) {    $is_gotofile     = preg_replace('@^([^?]+).*$@s', '\\1', $goto);    if (! @file_exists('./' . $is_gotofile)) {        unset($goto);    } else {        $is_gotofile = ($is_gotofile == $goto);    }} else {    $goto = (! strlen($table)) ? $cfg['DefaultTabDatabase'] : $cfg['DefaultTabTable'];    $is_gotofile  = true;} // end ifif (! isset($err_url)) {    $err_url = (! empty($back) ? $back : $goto)             . '?' . PMA_generate_common_url($db)             . ((strpos(' ' . $goto, 'db_') != 1 && strlen($table)) ? '&amp;table=' . urlencode($table) : '');} // end if// Coming from a bookmark dialogif (isset($fields['query'])) {    $sql_query = $fields['query'];}// This one is just to fill $dbif (isset($fields['dbase'])) {    $db = $fields['dbase'];}/** * During grid edit, if we have a relational field, show the dropdown for it * * Logic taken from libraries/display_tbl_lib.php * * This doesn't seem to be the right place to do this, but I can't think of any * better place either. */if (isset($_REQUEST['get_relational_values']) && $_REQUEST['get_relational_values'] == true) {    include_once 'libraries/relation.lib.php';    $column = $_REQUEST['column'];    $foreigners = PMA_getForeigners($db, $table, $column);    $display_field = PMA_getDisplayField($foreigners[$column]['foreign_db'], $foreigners[$column]['foreign_table']);    $foreignData = PMA_getForeignData($foreigners, $column, false, '', '');    if ($_SESSION['tmp_user_values']['relational_display'] == 'D'        && isset($display_field)        && strlen($display_field)        && isset($_REQUEST['relation_key_or_display_column'])        && $_REQUEST['relation_key_or_display_column']    ) {            $curr_value = $_REQUEST['relation_key_or_display_column'];    } else {        $curr_value = $_REQUEST['curr_value'];    }    if ($foreignData['disp_row'] == null) {        //Handle the case when number of values is more than $cfg['ForeignKeyMaxLimit']        $_url_params = array(                'db' => $db,                'table' => $table,                'field' => $column        );        $dropdown = '<span class="curr_value">' . htmlspecialchars($_REQUEST['curr_value']) . '</span> <a href="browse_foreigners.php' . PMA_generate_common_url($_url_params) . '"'                    . ' target="_blank" class="browse_foreign" '                    .'>' . __('Browse foreign values') . '</a>';    } else {        $dropdown = PMA_foreignDropdown($foreignData['disp_row'], $foreignData['foreign_field'], $foreignData['foreign_display'], $curr_value, $cfg['ForeignKeyMaxLimit']);        $dropdown = '<select>' . $dropdown . '</select>';    }    $extra_data['dropdown'] = $dropdown;    PMA_ajaxResponse(null, true, $extra_data);}/** * Just like above, find possible values for enum fields during grid edit. * * Logic taken from libraries/display_tbl_lib.php */if (isset($_REQUEST['get_enum_values']) && $_REQUEST['get_enum_values'] == true) {    $field_info_query = PMA_DBI_get_columns_sql($db, $table, $_REQUEST['column']);    $field_info_result = PMA_DBI_fetch_result($field_info_query, null, null, null, PMA_DBI_QUERY_STORE);    $search = array('enum', '(', ')', "'");    $values = explode(',', str_replace($search, '', $field_info_result[0]['Type']));    $dropdown = '<option value="">&nbsp;</option>';    foreach ($values as $value) {        $dropdown .= '<option value="' . htmlspecialchars($value) . '"';        if ($value == $_REQUEST['curr_value']) {            $dropdown .= ' selected="selected"';        }        $dropdown .= '>' . $value . '</option>';    }    $dropdown = '<select>' . $dropdown . '</select>';    $extra_data['dropdown'] = $dropdown;    PMA_ajaxResponse(null, true, $extra_data);}/** * Find possible values for set fields during grid edit. */if (isset($_REQUEST['get_set_values']) && $_REQUEST['get_set_values'] == true) {    $field_info_query = PMA_DBI_get_columns_sql($db, $table, $_REQUEST['column']);    $field_info_result = PMA_DBI_fetch_result($field_info_query, null, null, null, PMA_DBI_QUERY_STORE);    $selected_values = explode(',', $_REQUEST['curr_value']);    $search = array('set', '(', ')', "'");    $values = explode(',', str_replace($search, '', $field_info_result[0]['Type']));    $select = '';    foreach ($values as $value) {        $select .= '<option value="' . htmlspecialchars($value) . '"';        if (in_array($value, $selected_values, true)) {            $select .= ' selected="selected"';        }        $select .= '>' . $value . '</option>';    }    $select_size = (sizeof($values) > 10) ? 10 : sizeof($values);    $select = '<select multiple="multiple" size="' . $select_size . '">' . $select . '</select>';    $extra_data['select'] = $select;    PMA_ajaxResponse(null, true, $extra_data);}/** * Check ajax request to set the column order */if (isset($_REQUEST['set_col_prefs']) && $_REQUEST['set_col_prefs'] == true) {    $pmatable = new PMA_Table($table, $db);    $retval = false;    // set column order    if (isset($_REQUEST['col_order'])) {        $col_order = explode(',', $_REQUEST['col_order']);        $retval = $pmatable->setUiProp(PMA_Table::PROP_COLUMN_ORDER, $col_order, $_REQUEST['table_create_time']);        if (gettype($retval) != 'boolean') {            PMA_ajaxResponse($retval->getString(), false);        }    }    // set column visibility    if ($retval === true && isset($_REQUEST['col_visib'])) {        $col_visib = explode(',', $_REQUEST['col_visib']);        $retval = $pmatable->setUiProp(PMA_Table::PROP_COLUMN_VISIB, $col_visib, $_REQUEST['table_create_time']);        if (gettype($retval) != 'boolean') {            PMA_ajaxResponse($retval->getString(), false);        }    }    PMA_ajaxResponse(null, ($retval == true));}// Default to browse if no query set and we have table// (needed for browsing from DefaultTabTable)if (empty($sql_query) && strlen($table) && strlen($db)) {    include_once './libraries/bookmark.lib.php';    $book_sql_query = PMA_Bookmark_get(        $db,        '\'' . PMA_sqlAddSlashes($table) . '\'',        'label',        false,        true    );    if (! empty($book_sql_query)) {        $GLOBALS['using_bookmark_message'] = PMA_message::notice(__('Using bookmark "%s" as default browse query.'));        $GLOBALS['using_bookmark_message']->addParam($table);        $GLOBALS['using_bookmark_message']->addMessage(PMA_showDocu('faq6_22'));        $sql_query = $book_sql_query;    } else {        $sql_query = 'SELECT * FROM ' . PMA_backquote($table);    }    unset($book_sql_query);    // set $goto to what will be displayed if query returns 0 rows    $goto = 'tbl_structure.php';} else {    // Now we can check the parameters    PMA_checkParameters(array('sql_query'));}// instead of doing the test twice$is_drop_database = preg_match(    '/DROP[[:space:]]+(DATABASE|SCHEMA)[[:space:]]+/i',    $sql_query);/** * Check rights in case of DROP DATABASE * * This test may be bypassed if $is_js_confirmed = 1 (already checked with js) * but since a malicious user may pass this variable by url/form, we don't take * into account this case. */if (! defined('PMA_CHK_DROP')    && ! $cfg['AllowUserDropDatabase']    && $is_drop_database    && ! $is_superuser) {    include_once './libraries/header.inc.php';    PMA_mysqlDie(__('"DROP DATABASE" statements are disabled.'), '', '', $err_url);} // end ifrequire_once './libraries/display_tbl.lib.php';PMA_displayTable_checkConfigParams();/** * Need to find the real end of rows? */if (isset($find_real_end) && $find_real_end) {    $unlim_num_rows = PMA_Table::countRecords($db, $table, $force_exact = true);    $_SESSION['tmp_user_values']['pos'] = @((ceil($unlim_num_rows / $_SESSION['tmp_user_values']['max_rows']) - 1) * $_SESSION['tmp_user_values']['max_rows']);}/** * Bookmark add */if (isset($store_bkm)) {    PMA_Bookmark_save($fields, (isset($bkm_all_users) && $bkm_all_users == 'true' ? true : false));    // go back to sql.php to redisplay query; do not use &amp; in this case:    PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . $goto . '&label=' . $fields['label']);} // end if/** * Parse and analyze the query */require_once './libraries/parse_analyze.lib.php';/** * Sets or modifies the $goto variable if required */if ($goto == 'sql.php') {    $is_gotofile = false;    $goto = 'sql.php?'          . PMA_generate_common_url($db, $table)          . '&amp;sql_query=' . urlencode($sql_query);} // end if/** * Go back to further page if table should not be dropped */if (isset($btnDrop) && $btnDrop == __('No')) {    if (! empty($back)) {        $goto = $back;    }    if ($is_gotofile) {        if (strpos($goto, 'db_') === 0 && strlen($table)) {            $table = '';        }        $active_page = $goto;        include './' . PMA_securePath($goto);    } else {        PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . str_replace('&amp;', '&', $goto));    }    exit();} // end if/** * Displays the confirm page if required * * This part of the script is bypassed if $is_js_confirmed = 1 (already checked * with js) because possible security issue is not so important here: at most, * the confirm message isn't displayed. * * Also bypassed if only showing php code.or validating a SQL query */if (! $cfg['Confirm']    || isset($_REQUEST['is_js_confirmed'])    || isset($btnDrop)    // if we are coming from a "Create PHP code" or a "Without PHP Code"    // dialog, we won't execute the query anyway, so don't confirm    || isset($GLOBALS['show_as_php'])    || ! empty($GLOBALS['validatequery'])) {    $do_confirm = false;} else {    $do_confirm = isset($analyzed_sql[0]['queryflags']['need_confirm']);}if ($do_confirm) {    $stripped_sql_query = $sql_query;    include_once './libraries/header.inc.php';    if ($is_drop_database) {        echo '<h1 class="error">' . __('You are about to DESTROY a complete database!') . '</h1>';    }    echo '<form action="sql.php" method="post">' . "\n"        .PMA_generate_common_hidden_inputs($db, $table);    ?>    <input type="hidden" name="sql_query" value="<?php echo htmlspecialchars($sql_query); ?>" />    <input type="hidden" name="message_to_show" value="<?php echo isset($message_to_show) ? PMA_sanitize($message_to_show, true) : ''; ?>" />    <input type="hidden" name="goto" value="<?php echo $goto; ?>" />    <input type="hidden" name="back" value="<?php echo isset($back) ? PMA_sanitize($back, true) : ''; ?>" />    <input type="hidden" name="reload" value="<?php echo isset($reload) ? PMA_sanitize($reload, true) : 0; ?>" />    <input type="hidden" name="purge" value="<?php echo isset($purge) ? PMA_sanitize($purge, true) : ''; ?>" />    <input type="hidden" name="dropped_column" value="<?php echo isset($dropped_column) ? PMA_sanitize($dropped_column, true) : ''; ?>" />    <input type="hidden" name="show_query" value="<?php echo isset($show_query) ? PMA_sanitize($show_query, true) : ''; ?>" />    <?php    echo '<fieldset class="confirmation">' . "\n"        .'    <legend>' . __('Do you really want to ') . '</legend>'        .'    <tt>' . htmlspecialchars($stripped_sql_query) . '</tt>' . "\n"        .'</fieldset>' . "\n"        .'<fieldset class="tblFooters">' . "\n";    ?>    <input type="submit" name="btnDrop" value="<?php echo __('Yes'); ?>" id="buttonYes" />    <input type="submit" name="btnDrop" value="<?php echo __('No'); ?>" id="buttonNo" />    <?php    echo '</fieldset>' . "\n"       . '</form>' . "\n";    /**     * Displays the footer and exit     */    include './libraries/footer.inc.php';} // end if $do_confirm// Defines some variables// A table has to be created, renamed, dropped -> navi frame should be reloaded/** * @todo use the parser/analyzer */if (empty($reload)    && preg_match('/^(CREATE|ALTER|DROP)\s+(VIEW|TABLE|DATABASE|SCHEMA)\s+/i', $sql_query)) {    $reload = 1;}// SK -- Patch: $is_group added for use in calculation of total number of//              rows.//              $is_count is changed for more correct "LIMIT" clause//              appending in queries like//                "SELECT COUNT(...) FROM ... GROUP BY ..."/** * @todo detect all this with the parser, to avoid problems finding * those strings in comments or backquoted identifiers */$is_explain = $is_count = $is_export = $is_delete = $is_insert = $is_affected = $is_show = $is_maint = $is_analyse = $is_group = $is_func = $is_replace = false;if ($is_select) { // see line 141    $is_group = preg_match('@(GROUP[[:space:]]+BY|HAVING|SELECT[[:space:]]+DISTINCT)[[:space:]]+@i', $sql_query);    $is_func =  ! $is_group && (preg_match('@[[:space:]]+(SUM|AVG|STD|STDDEV|MIN|MAX|BIT_OR|BIT_AND)\s*\(@i', $sql_query));    $is_count = ! $is_group && (preg_match('@^SELECT[[:space:]]+COUNT\((.*\.+)?.*\)@i', $sql_query));    $is_export   = (preg_match('@[[:space:]]+INTO[[:space:]]+OUTFILE[[:space:]]+@i', $sql_query));    $is_analyse  = (preg_match('@[[:space:]]+PROCEDURE[[:space:]]+ANALYSE@i', $sql_query));} elseif (preg_match('@^EXPLAIN[[:space:]]+@i', $sql_query)) {    $is_explain  = true;} elseif (preg_match('@^DELETE[[:space:]]+@i', $sql_query)) {    $is_delete   = true;    $is_affected = true;} elseif (preg_match('@^(INSERT|LOAD[[:space:]]+DATA|REPLACE)[[:space:]]+@i', $sql_query)) {    $is_insert   = true;    $is_affected = true;    if (preg_match('@^(REPLACE)[[:space:]]+@i', $sql_query)) {        $is_replace = true;    }} elseif (preg_match('@^UPDATE[[:space:]]+@i', $sql_query)) {    $is_affected = true;} elseif (preg_match('@^[[:space:]]*SHOW[[:space:]]+@i', $sql_query)) {    $is_show     = true;} elseif (preg_match('@^(CHECK|ANALYZE|REPAIR|OPTIMIZE)[[:space:]]+TABLE[[:space:]]+@i', $sql_query)) {    $is_maint    = true;}// assign default full_sql_query$full_sql_query = $sql_query;// Handle remembered sorting order, only for single table queryif ($GLOBALS['cfg']['RememberSorting']    && ! ($is_count || $is_export || $is_func || $is_analyse)    && count($analyzed_sql[0]['select_expr']) == 0    && isset($analyzed_sql[0]['queryflags']['select_from'])    && count($analyzed_sql[0]['table_ref']) == 1) {    $pmatable = new PMA_Table($table, $db);    if (empty($analyzed_sql[0]['order_by_clause'])) {        $sorted_col = $pmatable->getUiProp(PMA_Table::PROP_SORTED_COLUMN);        if ($sorted_col) {            // retrieve the remembered sorting order for current table            $sql_order_to_append = ' ORDER BY ' . $sorted_col . ' ';            $full_sql_query = $analyzed_sql[0]['section_before_limit'] . $sql_order_to_append                . $analyzed_sql[0]['section_after_limit'];            // update the $analyzed_sql            $analyzed_sql[0]['section_before_limit'] .= $sql_order_to_append;            $analyzed_sql[0]['order_by_clause'] = $sorted_col;        }    } else {        // store the remembered table into session        $pmatable->setUiProp(PMA_Table::PROP_SORTED_COLUMN, $analyzed_sql[0]['order_by_clause']);    }}// Do append a "LIMIT" clause?if (($_SESSION['tmp_user_values']['max_rows'] != 'all')    && ! ($is_count || $is_export || $is_func || $is_analyse)    && isset($analyzed_sql[0]['queryflags']['select_from'])    && ! isset($analyzed_sql[0]['queryflags']['offset'])    && empty($analyzed_sql[0]['limit_clause'])) {    $sql_limit_to_append = ' LIMIT ' . $_SESSION['tmp_user_values']['pos']        . ', ' . $_SESSION['tmp_user_values']['max_rows'] . " ";    $full_sql_query  = $analyzed_sql[0]['section_before_limit'] . "\n"        . $sql_limit_to_append . $analyzed_sql[0]['section_after_limit'];    /**     * @todo pretty printing of this modified query     */    if (isset($display_query)) {        // if the analysis of the original query revealed that we found        // a section_after_limit, we now have to analyze $display_query        // to display it correctly        if (! empty($analyzed_sql[0]['section_after_limit'])            && trim($analyzed_sql[0]['section_after_limit']) != ';'        ) {            $analyzed_display_query = PMA_SQP_analyze(PMA_SQP_parse($display_query));            $display_query  = $analyzed_display_query[0]['section_before_limit']                . "\n" . $sql_limit_to_append . $analyzed_display_query[0]['section_after_limit'];        }    }}if (strlen($db)) {    PMA_DBI_select_db($db);}//  E x e c u t e    t h e    q u e r y// Only if we didn't ask to see the php code (mikebeck)if (isset($GLOBALS['show_as_php']) || ! empty($GLOBALS['validatequery'])) {    unset($result);    $num_rows = 0;    $unlim_num_rows = 0;} else {    if (isset($_SESSION['profiling']) && PMA_profilingSupported()) {        PMA_DBI_query('SET PROFILING=1;');    }    // Measure query time.    $querytime_before = array_sum(explode(' ', microtime()));    $result   = @PMA_DBI_try_query($full_sql_query, null, PMA_DBI_QUERY_STORE);    // If a stored procedure was called, there may be more results that are    // queued up and waiting to be flushed from the buffer. So let's do that.    while (true) {        if (! PMA_DBI_more_results()) {            break;        }        PMA_DBI_next_result();    }    $querytime_after = array_sum(explode(' ', microtime()));    $GLOBALS['querytime'] = $querytime_after - $querytime_before;    // Displays an error message if required and stop parsing the script    if ($error        = PMA_DBI_getError()) {        if ($is_gotofile) {            if (strpos($goto, 'db_') === 0 && strlen($table)) {                $table = '';            }            $active_page = $goto;            $message = PMA_Message::rawError($error);            if ($GLOBALS['is_ajax_request'] == true) {                PMA_ajaxResponse($message, false);            }            /**             * Go to target path.             */            include './' . PMA_securePath($goto);        } else {            $full_err_url = (preg_match('@^(db|tbl)_@', $err_url))                          ? $err_url . '&amp;show_query=1&amp;sql_query=' . urlencode($sql_query)                          : $err_url;            PMA_mysqlDie($error, $full_sql_query, '', $full_err_url);        }        exit;    }    unset($error);    // Gets the number of rows affected/returned    // (This must be done immediately after the query because    // mysql_affected_rows() reports about the last query done)    if (! $is_affected) {        $num_rows = ($result) ? @PMA_DBI_num_rows($result) : 0;    } elseif (! isset($num_rows)) {        $num_rows = @PMA_DBI_affected_rows();    }    // Grabs the profiling results    if (isset($_SESSION['profiling']) && PMA_profilingSupported()) {        $profiling_results = PMA_DBI_fetch_result('SHOW PROFILE;');    }    // Checks if the current database has changed    // This could happen if the user sends a query like "USE `database`;"    /**     * commented out auto-switching to active database - really required?     * bug #1814718 win: table list disappears (mixed case db names)     * https://sourceforge.net/support/tracker.php?aid=1814718     * @todo RELEASE test and comit or rollback before release    $current_db = PMA_DBI_fetch_value('SELECT DATABASE()');    if ($db !== $current_db) {        $db     = $current_db;        $reload = 1;    }    unset($current_db);     */    // tmpfile remove after convert encoding appended by Y.Kawada    if (function_exists('PMA_kanji_file_conv')        && (isset($textfile) && file_exists($textfile))    ) {        unlink($textfile);    }    // Counts the total number of rows for the same 'SELECT' query without the    // 'LIMIT' clause that may have been programatically added    if (empty($sql_limit_to_append)) {        $unlim_num_rows         = $num_rows;        // if we did not append a limit, set this to get a correct        // "Showing rows..." message        //$_SESSION['tmp_user_values']['max_rows'] = 'all';    } elseif ($is_select) {        //    c o u n t    q u e r y        // If we are "just browsing", there is only one table,        // and no WHERE clause (or just 'WHERE 1 '),        // we do a quick count (which uses MaxExactCount) because        // SQL_CALC_FOUND_ROWS is not quick on large InnoDB tables        // However, do not count again if we did it previously        // due to $find_real_end == true        if (! $is_group            && ! isset($analyzed_sql[0]['queryflags']['union'])            && ! isset($analyzed_sql[0]['queryflags']['distinct'])            && ! isset($analyzed_sql[0]['table_ref'][1]['table_name'])            && (empty($analyzed_sql[0]['where_clause']) || $analyzed_sql[0]['where_clause'] == '1 ')            && ! isset($find_real_end)        ) {            // "j u s t   b r o w s i n g"            $unlim_num_rows = PMA_Table::countRecords($db, $table);        } else { // n o t   " j u s t   b r o w s i n g "            // add select expression after the SQL_CALC_FOUND_ROWS            // for UNION, just adding SQL_CALC_FOUND_ROWS            // after the first SELECT works.            // take the left part, could be:            // SELECT            // (SELECT            $count_query = PMA_SQP_formatHtml($parsed_sql, 'query_only', 0, $analyzed_sql[0]['position_of_first_select'] + 1);            $count_query .= ' SQL_CALC_FOUND_ROWS ';            // add everything that was after the first SELECT            $count_query .= PMA_SQP_formatHtml($parsed_sql, 'query_only', $analyzed_sql[0]['position_of_first_select'] + 1);            // ensure there is no semicolon at the end of the            // count query because we'll probably add            // a LIMIT 1 clause after it            $count_query = rtrim($count_query);            $count_query = rtrim($count_query, ';');            // if using SQL_CALC_FOUND_ROWS, add a LIMIT to avoid            // long delays. Returned count will be complete anyway.            // (but a LIMIT would disrupt results in an UNION)            if (! isset($analyzed_sql[0]['queryflags']['union'])) {                $count_query .= ' LIMIT 1';            }            // run the count query            PMA_DBI_try_query($count_query);            // if (mysql_error()) {            // void.            // I tried the case            // (SELECT `User`, `Host`, `Db`, `Select_priv` FROM `db`)            // UNION (SELECT `User`, `Host`, "%" AS "Db",            // `Select_priv`            // FROM `user`) ORDER BY `User`, `Host`, `Db`;            // and although the generated count_query is wrong            // the SELECT FOUND_ROWS() work! (maybe it gets the            // count from the latest query that worked)            //            // another case where the count_query is wrong:            // SELECT COUNT(*), f1 from t1 group by f1            // and you click to sort on count(*)            // }            $unlim_num_rows = PMA_DBI_fetch_value('SELECT FOUND_ROWS()');        } // end else "just browsing"    } else { // not $is_select         $unlim_num_rows         = 0;    } // end rows total count    // if a table or database gets dropped, check column comments.    if (isset($purge) && $purge == '1') {        /**         * Cleanup relations.         */        include_once './libraries/relation_cleanup.lib.php';        if (strlen($table) && strlen($db)) {            PMA_relationsCleanupTable($db, $table);        } elseif (strlen($db)) {            PMA_relationsCleanupDatabase($db);        } else {            // VOID. No DB/Table gets deleted.        } // end if relation-stuff    } // end if ($purge)    // If a column gets dropped, do relation magic.    if (isset($dropped_column) && strlen($db) && strlen($table) && ! empty($dropped_column)) {        include_once './libraries/relation_cleanup.lib.php';        PMA_relationsCleanupColumn($db, $table, $dropped_column);        // to refresh the list of indexes (Ajax mode)        $extra_data['indexes_list'] = PMA_Index::getView($table, $db);    } // end if column was dropped} // end else "didn't ask to see php code"// No rows returned -> move back to the calling pageif ((0 == $num_rows && 0 == $unlim_num_rows) || $is_affected) {    if ($is_delete) {        $message = PMA_Message::deleted_rows($num_rows);    } elseif ($is_insert) {        if ($is_replace) {            /* For replace we get DELETED + INSERTED row count, so we have to call it affected */            $message = PMA_Message::affected_rows($num_rows);        } else {            $message = PMA_Message::inserted_rows($num_rows);        }        $insert_id = PMA_DBI_insert_id();        if ($insert_id != 0) {            // insert_id is id of FIRST record inserted in one insert, so if we inserted multiple rows, we had to increment this            $message->addMessage('[br]');            // need to use a temporary because the Message class            // currently supports adding parameters only to the first            // message            $_inserted = PMA_Message::notice(__('Inserted row id: %1$d'));            $_inserted->addParam($insert_id + $num_rows - 1);            $message->addMessage($_inserted);        }    } elseif ($is_affected) {        $message = PMA_Message::affected_rows($num_rows);        // Ok, here is an explanation for the !$is_select.        // The form generated by sql_query_form.lib.php        // and db_sql.php has many submit buttons        // on the same form, and some confusion arises from the        // fact that $message_to_show is sent for every case.        // The $message_to_show containing a success message and sent with        // the form should not have priority over errors    } elseif (! empty($message_to_show) && ! $is_select) {        $message = PMA_Message::rawSuccess(htmlspecialchars($message_to_show));    } elseif (! empty($GLOBALS['show_as_php'])) {        $message = PMA_Message::success(__('Showing as PHP code'));    } elseif (isset($GLOBALS['show_as_php'])) {        /* User disable showing as PHP, query is only displayed */        $message = PMA_Message::notice(__('Showing SQL query'));    } elseif (! empty($GLOBALS['validatequery'])) {        $message = PMA_Message::notice(__('Validated SQL'));    } else {        $message = PMA_Message::success(__('MySQL returned an empty result set (i.e. zero rows).'));    }    if (isset($GLOBALS['querytime'])) {        $_querytime = PMA_Message::notice(__('Query took %01.4f sec'));        $_querytime->addParam($GLOBALS['querytime']);        $message->addMessage('(');        $message->addMessage($_querytime);        $message->addMessage(')');    }    if ($GLOBALS['is_ajax_request'] == true) {        if ($cfg['ShowSQL']) {            $extra_data['sql_query'] = PMA_showMessage($message, $GLOBALS['sql_query'], 'success');        }        if (isset($GLOBALS['reload']) && $GLOBALS['reload'] == 1) {            $extra_data['reload'] = 1;            $extra_data['db'] = $GLOBALS['db'];        }        PMA_ajaxResponse($message, $message->isSuccess(), (isset($extra_data) ? $extra_data : ''));    }    if ($is_gotofile) {        $goto = PMA_securePath($goto);        // Checks for a valid target script        $is_db = $is_table = false;        if (isset($_REQUEST['purge']) && $_REQUEST['purge'] == '1') {            $table = '';            unset($url_params['table']);        }        include 'libraries/db_table_exists.lib.php';        if (strpos($goto, 'tbl_') === 0 && ! $is_table) {            if (strlen($table)) {                $table = '';            }            $goto = 'db_sql.php';        }        if (strpos($goto, 'db_') === 0 && ! $is_db) {            if (strlen($db)) {                $db = '';            }            $goto = 'main.php';        }        // Loads to target script        if ($goto != 'main.php') {            include_once './libraries/header.inc.php';        }        $active_page = $goto;        include './' . $goto;    } else {        // avoid a redirect loop when last record was deleted        if (0 == $num_rows && 'sql.php' == $cfg['DefaultTabTable']) {            $goto = str_replace('sql.php', 'tbl_structure.php', $goto);        }        PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . str_replace('&amp;', '&', $goto) . '&message=' . urlencode($message));    } // end else    exit();// end no rows returned} else {    // At least one row is returned -> displays a table with results    //If we are retrieving the full value of a truncated field or the original    // value of a transformed field, show it here and exit    if ($GLOBALS['grid_edit'] == true && $GLOBALS['cfg']['AjaxEnable']) {        $row = PMA_DBI_fetch_row($result);        $extra_data = array();        $extra_data['value'] = $row[0];        PMA_ajaxResponse(null, true, $extra_data);    }    if (isset($_REQUEST['ajax_request']) && isset($_REQUEST['table_maintenance'])) {        $GLOBALS['js_include'][] = 'functions.js';        $GLOBALS['js_include'][] = 'makegrid.js';        $GLOBALS['js_include'][] = 'sql.js';        // Gets the list of fields properties        if (isset($result) && $result) {            $fields_meta = PMA_DBI_get_fields_meta($result);            $fields_cnt  = count($fields_meta);        }        if (empty($disp_mode)) {            // see the "PMA_setDisplayMode()" function in            // libraries/display_tbl.lib.php            $disp_mode = 'urdr111101';        }        // hide edit and delete links for information_schema        if (PMA_is_system_schema($db)) {            $disp_mode = 'nnnn110111';        }        $message = PMA_Message::success($message);        echo PMA_showMessage($message, $GLOBALS['sql_query'], 'success');        PMA_displayTable($result, $disp_mode, $analyzed_sql);        exit();    }    // Displays the headers    if (isset($show_query)) {        unset($show_query);    }    if (isset($printview) && $printview == '1') {        include_once './libraries/header_printview.inc.php';    } else {        $GLOBALS['js_include'][] = 'functions.js';        $GLOBALS['js_include'][] = 'makegrid.js';        $GLOBALS['js_include'][] = 'sql.js';        unset($message);        if (! $GLOBALS['is_ajax_request'] || ! $GLOBALS['cfg']['AjaxEnable']) {            if (strlen($table)) {                include './libraries/tbl_common.php';                $url_query .= '&amp;goto=tbl_sql.php&amp;back=tbl_sql.php';                include './libraries/tbl_info.inc.php';                include './libraries/tbl_links.inc.php';            } elseif (strlen($db)) {                include './libraries/db_common.inc.php';                include './libraries/db_info.inc.php';            } else {                include './libraries/server_common.inc.php';                include './libraries/server_links.inc.php';            }        } else {            include_once './libraries/header.inc.php';            //we don't need to buffer the output in PMA_showMessage here.            //set a global variable and check against it in the function            $GLOBALS['buffer_message'] = false;        }    }    if (strlen($db)) {        $cfgRelation = PMA_getRelationsParam();    }    // Gets the list of fields properties    if (isset($result) && $result) {        $fields_meta = PMA_DBI_get_fields_meta($result);        $fields_cnt  = count($fields_meta);    }    if (! $GLOBALS['is_ajax_request']) {        //begin the sqlqueryresults div here. container div        echo '<div id="sqlqueryresults"';        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax"';        }        echo '>';    }    // Display previous update query (from tbl_replace)    if (isset($disp_query) && $cfg['ShowSQL'] == true) {        PMA_showMessage($disp_message, $disp_query, 'success');    }    if (isset($profiling_results)) {        // pma_token/url_query needed for chart export?><script type="text/javascript">pma_token = '<?php echo $_SESSION[' PMA_token ']; ?>';url_query = '<?php echo isset($url_query)?$url_query:PMA_generate_common_url($db);?>';$(document).ready(makeProfilingChart);</script><?php        echo '<fieldset><legend>' . __('Profiling') . '</legend>' . "\n";        echo '<div style="float: left;">';        echo '<table>' . "\n";        echo ' <tr>' .  "\n";        echo '  <th>' . __('Status') . PMA_showMySQLDocu('general-thread-states', 'general-thread-states') .  '</th>' . "\n";        echo '  <th>' . __('Time') . '</th>' . "\n";        echo ' </tr>' .  "\n";        $chart_json = Array();        foreach ($profiling_results as $one_result) {            echo ' <tr>' .  "\n";            echo '<td>' . ucwords($one_result['Status']) . '</td>' .  "\n";            echo '<td align="right">' . (PMA_formatNumber($one_result['Duration'], 3, 1)) . 's</td>' .  "\n";            $chart_json[ucwords($one_result['Status'])] = $one_result['Duration'];        }        echo '</table>' . "\n";        echo '</div>';        //require_once './libraries/chart.lib.php';        echo '<div id="profilingchart" style="display:none;">';        //PMA_chart_profiling($profiling_results);        echo json_encode($chart_json);        echo '</div>';        echo '</fieldset>' . "\n";    }    // Displays the results in a table    if (empty($disp_mode)) {        // see the "PMA_setDisplayMode()" function in        // libraries/display_tbl.lib.php        $disp_mode = 'urdr111101';    }    // hide edit and delete links for information_schema    if (PMA_is_system_schema($db)) {        $disp_mode = 'nnnn110111';    }    if (isset($label)) {        $message = PMA_message::success(__('Bookmark %s created'));        $message->addParam($label);        $message->display();    }    PMA_displayTable($result, $disp_mode, $analyzed_sql);    PMA_DBI_free_result($result);    // BEGIN INDEX CHECK See if indexes should be checked.    if (isset($query_type) && $query_type == 'check_tbl' && isset($selected) && is_array($selected)) {        foreach ($selected as $idx => $tbl_name) {            $check = PMA_Index::findDuplicates($tbl_name, $db);            if (! empty($check)) {                printf(__('Problems with indexes of table `%s`'), $tbl_name);                echo $check;            }        }    } // End INDEX CHECK    // Bookmark support if required    if ($disp_mode[7] == '1'        && (! empty($cfg['Bookmark']) && empty($id_bookmark))        && ! empty($sql_query)    ) {        echo "\n";        $goto = 'sql.php?'              . PMA_generate_common_url($db, $table)              . '&amp;sql_query=' . urlencode($sql_query)              . '&amp;id_bookmark=1';        ?><form action="sql.php" method="post" onsubmit="return emptyFormElements(this, 'fields[label]');"><?php echo PMA_generate_common_hidden_inputs(); ?><input type="hidden" name="goto" value="<?php echo $goto; ?>" /><input type="hidden" name="fields[dbase]" value="<?php echo htmlspecialchars($db); ?>" /><input type="hidden" name="fields[user]" value="<?php echo $cfg['Bookmark']['user']; ?>" /><input type="hidden" name="fields[query]" value="<?php echo urlencode(isset($complete_query) ? $complete_query : $sql_query); ?>" /><fieldset>    <legend><?php    echo PMA_getIcon('b_bookmark.png', __('Bookmark this SQL query'), true);?>    </legend>    <div class="formelement">        <label for="fields_label_"><?php echo __('Label'); ?>:</label>        <input type="text" id="fields_label_" name="fields[label]" value="" />    </div>    <div class="formelement">        <input type="checkbox" name="bkm_all_users" id="bkm_all_users" value="true" />        <label for="bkm_all_users"><?php echo __('Let every user access this bookmark'); ?></label>    </div>    <div class="clearfloat"></div></fieldset><fieldset class="tblFooters">    <input type="submit" name="store_bkm" value="<?php echo __('Bookmark this SQL query'); ?>" /></fieldset></form>        <?php    } // end bookmark support    // Do print the page if required    if (isset($printview) && $printview == '1') {        PMA_printButton();    } // end print case    if ($GLOBALS['is_ajax_request'] != true) {        echo '</div>'; // end sqlqueryresults div    }} // end rows returned/** * Displays the footer */if (! isset($_REQUEST['table_maintenance'])) {    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * hold PMA_Theme class * * @package PhpMyAdmin *//** * handles theme * * @todo add the possibility to make a theme depend on another theme and by default on original * @todo make all components optional - get missing components from 'parent' theme * @todo make css optionally replacing 'parent' css or extending it (by appending at the end) * @todo add an optional global css file - which will be used for both frames * * @package PhpMyAdmin */class PMA_Theme{    /**     * @var string theme version     * @access  protected     */    var $version = '0.0.0.0';    /**     * @var string theme name     * @access  protected     */    var $name = '';    /**     * @var string theme id     * @access  protected     */    var $id = '';    /**     * @var string theme path     * @access  protected     */    var $path = '';    /**     * @var string image path     * @access  protected     */    var $img_path = '';    /**     * @var array   valid css types     * @access  protected     */    var $types = array('left', 'right', 'print');    /**     * @var integer last modification time for info file     * @access  protected     */    var $mtime_info = 0;    /**     * needed because sometimes, the mtime for different themes     * is identical     * @var integer filesize for info file     * @access  protected     */    var $filesize_info = 0;    /**     * @access  public     * @return  boolean     whether loading them info was successful or not     */    function loadInfo()    {        if (! file_exists($this->getPath() . '/info.inc.php')) {            return false;        }        if ($this->mtime_info === filemtime($this->getPath() . '/info.inc.php')) {            return true;        }        @include $this->getPath() . '/info.inc.php';        // was it set correctly?        if (! isset($theme_name)) {            return false;        }        $this->mtime_info = filemtime($this->getPath() . '/info.inc.php');        $this->filesize_info = filesize($this->getPath() . '/info.inc.php');        if (isset($theme_full_version)) {            $this->setVersion($theme_full_version);        } elseif (isset($theme_generation, $theme_version)) {            $this->setVersion($theme_generation . '.' . $theme_version);        }        $this->setName($theme_name);        return true;    }    /**     * returns theme object loaded from given folder     * or false if theme is invalid     *     * @static     * @access  public     * @param string  $folder path to theme     * @return  object  PMA_Theme     */    static public function load($folder)    {        $theme = new PMA_Theme();        $theme->setPath($folder);        if (! $theme->loadInfo()) {            return false;        }        $theme->checkImgPath();        return $theme;    }    /**     * checks image path for existance - if not found use img from original theme     *     * @access  public     * @return bool     */    function checkImgPath()    {        if (is_dir($this->getPath() . '/img/')) {            $this->setImgPath($this->getPath() . '/img/');            return true;        } elseif (is_dir($GLOBALS['cfg']['ThemePath'] . '/original/img/')) {            $this->setImgPath($GLOBALS['cfg']['ThemePath'] . '/original/img/');            return true;        } else {            trigger_error(                sprintf(__('No valid image path for theme %s found!'), $this->getName()),                E_USER_ERROR);            return false;        }    }    /**     * returns path to theme     *     * @access  public     * @return  string  $path   path to theme     */    function getPath()    {        return $this->path;    }    /**     * returns layout file     *     * @access  public     * @return  string  layout file     */    function getLayoutFile()    {        return $this->getPath() . '/layout.inc.php';    }    /**     * set path to theme     *     * @access  public     * @param string  $path   path to theme     */    function setPath($path)    {        $this->path = trim($path);    }    /**     * sets version     *     * @access  public     * @param string new version     */    function setVersion($version)    {        $this->version = trim($version);    }    /**     * returns version     *     * @access  public     * @return  string  version     */    function getVersion()    {        return $this->version;    }    /**     * checks theme version agaisnt $version     * returns true if theme version is equal or higher to $version     *     * @access  public     * @param string  $version    version to compare to     * @return  boolean     */    function checkVersion($version)    {        return version_compare($this->getVersion(), $version, 'lt');    }    /**     * sets name     *     * @access  public     * @param string  $name   new name     */    function setName($name)    {        $this->name = trim($name);    }    /**     * returns name     *     * @access  public     * @return  string name     */    function getName()    {        return $this->name;    }    /**     * sets id     *     * @access  public     * @param string  $id   new id     */    function setId($id)    {        $this->id = trim($id);    }    /**     * returns id     *     * @access  public     * @return  string  id     */    function getId()    {        return $this->id;    }    /**     * @access  public     * @param string  path to images for this theme     */    function setImgPath($path)    {        $this->img_path = $path;    }    /**     * @access  public     * @return  string image path for this theme     */    function getImgPath()    {        return $this->img_path;    }    /**     * load css (send to stdout, normally the browser)     *     * @access  public     * @param string  $type   left, right or print     * @return bool     */    function loadCss(&$type)    {        if (empty($type) || ! in_array($type, $this->types)) {            $type = 'left';        }        if ($type == 'right') {            echo PMA_SQP_buildCssData();        }        $_css_file = $this->getPath()                   . '/css/theme_' . $type . '.css.php';        if (! file_exists($_css_file)) {            return false;        }        if ($GLOBALS['text_dir'] === 'ltr') {            $right = 'right';            $left = 'left';        } else {            $right = 'left';            $left = 'right';        }        include $_css_file;        if ($type != 'print') {            $_sprites_data_file = $this->getPath() . '/sprites.lib.php';            $_sprites_css_file = './themes/sprites.css.php';            if (   (file_exists($_sprites_data_file)  && is_readable($_sprites_data_file))                && (file_exists($_sprites_css_file) && is_readable($_sprites_css_file))            ) {                include $_sprites_data_file;                include $_sprites_css_file;            }        }        return true;    }    /**     * prints out the preview for this theme     *     * @access  public     */    function printPreview()    {        echo '<div class="theme_preview">';        echo '<h2>' . htmlspecialchars($this->getName())            .' (' . htmlspecialchars($this->getVersion()) . ')</h2>';        echo '<p>';        echo '<a target="_top" class="take_theme" '            .'name="' . htmlspecialchars($this->getId()) . '" '            . 'href="index.php'.PMA_generate_common_url(array(                'set_theme' => $this->getId()                )) . '">';        if (@file_exists($this->getPath() . '/screen.png')) {            // if screen exists then output            echo '<img src="' . $this->getPath() . '/screen.png" border="1"'                .' alt="' . htmlspecialchars($this->getName()) . '"'                .' title="' . htmlspecialchars($this->getName()) . '" /><br />';        } else {            echo __('No preview available.');        }        echo '[ <strong>' . __('take it') . '</strong> ]</a>'            .'</p>'            .'</div>';    }    /**     * Remove filter for IE.     *     * @return string CSS code.     */    function getCssIEClearFilter() {        return PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 6 && PMA_USR_BROWSER_VER <= 8            ? 'filter: none'            : '';    }    /**     * Generates code for CSS gradient using various browser extensions.     *     * @param string $start_color Color of gradient start, hex value without #     * @param string $end_color   Color of gradient end, hex value without #     *     * @return string CSS code.     */    function getCssGradient($start_color, $end_color)    {        $result = array();        // Opera 9.5+, IE 9        $result[] = 'background-image: url(./themes/svg_gradient.php?from=' . $start_color . '&to=' . $end_color . ');';        $result[] = 'background-size: 100% 100%;';        // Safari 4-5, Chrome 1-9        $result[] = 'background: -webkit-gradient(linear, left top, left bottom, from(#' . $start_color . '), to(#' . $end_color . '));';        // Safari 5.1, Chrome 10+        $result[] = 'background: -webkit-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // Firefox 3.6+        $result[] = 'background: -moz-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // IE 10        $result[] = 'background: -ms-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // Opera 11.10        $result[] = 'background: -o-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // IE 6-8        if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 6 && PMA_USR_BROWSER_VER <= 8) {            $result[] = 'filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#' . $start_color . '", endColorstr="#' . $end_color . '");';        }        return implode("\n", $result);    }    /**     * Returns CSS styles for CodeMirror editor based on query formatter colors.     *     * @return string CSS code.     */    function getCssCodeMirror()    {        $result[] = 'span.cm-keyword, span.cm-statement-verb {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_reservedWord'] . ';';        $result[] = '}';        $result[] = 'span.cm-variable {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_identifier'] . ';';        $result[] = '}';        $result[] = 'span.cm-comment {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['comment'] . ';';        $result[] = '}';        $result[] = 'span.cm-mysql-string {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['quote'] . ';';        $result[] = '}';        $result[] = 'span.cm-operator {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['punct'] . ';';        $result[] = '}';        $result[] = 'span.cm-mysql-word {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_identifier'] . ';';        $result[] = '}';        $result[] = 'span.cm-builtin {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_functionName'] . ';';        $result[] = '}';        $result[] = 'span.cm-variable-2 {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_columnType'] . ';';        $result[] = '}';        $result[] = 'span.cm-variable-3 {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_columnAttrib'] . ';';        $result[] = '}';        $result[] = 'span.cm-separator {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['punct'] . ';';        $result[] = '}';        $result[] = 'span.cm-number {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['digit_integer'] . ';';        $result[] = '}';        return implode("\n", $result);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'db_structure.js';$GLOBALS['js_include'][] = 'tbl_change.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'jquery/jquery.sprintf.js';/** * Prepares the tables list if the user where not redirected to this script * because there is no table in the database ($is_info is true) */if (empty($is_info)) {    // Drops/deletes/etc. multiple tables if required    if ((!empty($submit_mult) && isset($selected_tbl))        || isset($mult_btn)    ) {        $action = 'db_structure.php';        $err_url = 'db_structure.php?'. PMA_generate_common_url($db);        // see bug #2794840; in this case, code path is:        // db_structure.php -> libraries/mult_submits.inc.php -> sql.php        // -> db_structure.php and if we got an error on the multi submit,        // we must display it here and not call again mult_submits.inc.php        if (! isset($error) || false === $error) {            include './libraries/mult_submits.inc.php';        }        if (empty($message)) {            $message = PMA_Message::success();        }    }    include './libraries/db_common.inc.php';    $url_query .= '&amp;goto=db_structure.php';    // Gets the database structure    $sub_part = '_structure';    include './libraries/db_info.inc.php';    if (!PMA_DRIZZLE) {        include_once './libraries/replication.inc.php';    } else {        $server_slave_status = false;    }}require_once './libraries/bookmark.lib.php';require_once './libraries/mysql_charsets.lib.php';$db_collation = PMA_getDbCollation($db);// in a separate file to avoid redeclaration of functions in some code pathsrequire_once './libraries/db_structure.lib.php';$titles = PMA_buildActionTitles();// 1. No tablesif ($num_tables == 0) {    echo '<p>' . __('No tables found in database') . '</p>' . "\n";    if (empty($db_is_information_schema)) {        include './libraries/display_create_table.lib.php';    } // end if (Create Table dialog)    /**     * Displays the footer     */    include_once './libraries/footer.inc.php';    exit;}// else// 2. Shows table informations/** * Displays the tables list */echo '<div id="tableslistcontainer">';$_url_params = array(    'pos' => $pos,    'db'  => $db);// Add the sort options if they existsif (isset($_REQUEST['sort'])) {    $_url_params['sort'] = $_REQUEST['sort'];}if (isset($_REQUEST['sort_order'])) {    $_url_params['sort_order'] = $_REQUEST['sort_order'];}PMA_listNavigator(    $total_num_tables, $pos, $_url_params, 'db_structure.php',    'frame_content', $GLOBALS['cfg']['MaxTableList']);?><form method="post" action="db_structure.php" name="tablesForm" id="tablesForm"><?phpecho PMA_generate_common_hidden_inputs($db);PMA_TableHeader($db_is_information_schema, $server_slave_status);$i = $sum_entries = 0;$sum_size       = (double) 0;$overhead_size  = (double) 0;$overhead_check = '';$checked        = !empty($checkall) ? ' checked="checked"' : '';$num_columns    = $cfg['PropertiesNumColumns'] > 1    ? ceil($num_tables / $cfg['PropertiesNumColumns']) + 1    : 0;$row_count      = 0;$hidden_fields = array();$odd_row       = true;$sum_row_count_pre = '';$tableReductionCount = 0;   // the amount to reduce the table count byforeach ($tables as $keyname => $each_table) {    if (PMA_BS_IsHiddenTable($keyname)) {        $tableReductionCount++;        continue;    }    // Get valid statistics whatever is the table type    $table_is_view = false;    $table_encoded = urlencode($each_table['TABLE_NAME']);    // Sets parameters for links    $tbl_url_query = $url_query . '&amp;table=' . $table_encoded;    // do not list the previous table's size info for a view    $formatted_size = '-';    $unit = '';    switch ( $each_table['ENGINE']) {        // MyISAM, ISAM or Heap table: Row count, data size and index size        // are accurate; data size is accurate for ARCHIVE    case 'MyISAM' :    case 'ISAM' :    case 'HEAP' :    case 'MEMORY' :    case 'ARCHIVE' :    case 'Aria' :    case 'Maria' :        if ($db_is_information_schema) {            $each_table['Rows'] = PMA_Table::countRecords(                $db, $each_table['Name']            );        }        if ($is_show_stats) {            $tblsize                    =  doubleval($each_table['Data_length']) + doubleval($each_table['Index_length']);            $sum_size                   += $tblsize;            list($formatted_size, $unit) =  PMA_formatByteDown($tblsize, 3, ($tblsize > 0) ? 1 : 0);            if (isset($each_table['Data_free']) && $each_table['Data_free'] > 0) {                list($formatted_overhead, $overhead_unit)     = PMA_formatByteDown($each_table['Data_free'], 3, ($each_table['Data_free'] > 0) ? 1 : 0);                $overhead_size           += $each_table['Data_free'];            }        }        break;    case 'InnoDB' :    case 'PBMS' :        // InnoDB table: Row count is not accurate but data and index sizes are.        // PBMS table in Drizzle: TABLE_ROWS is taken from table cache, so it may be unavailable        if (($each_table['ENGINE'] == 'InnoDB'            && $each_table['TABLE_ROWS'] < $GLOBALS['cfg']['MaxExactCount'])            || !isset($each_table['TABLE_ROWS'])        ) {            $each_table['COUNTED'] = true;            $each_table['TABLE_ROWS'] = PMA_Table::countRecords(                $db, $each_table['TABLE_NAME'],                $force_exact = true, $is_view = false            );        } else {            $each_table['COUNTED'] = false;        }        // Drizzle doesn't provide data and index length, check for null        if ($is_show_stats && $each_table['Data_length'] !== null) {            $tblsize                    =  $each_table['Data_length'] + $each_table['Index_length'];            $sum_size                   += $tblsize;            list($formatted_size, $unit) =  PMA_formatByteDown($tblsize, 3, ($tblsize > 0) ? 1 : 0);        }        //$display_rows                   =  ' - ';        break;    // Mysql 5.0.x (and lower) uses MRG_MyISAM and MySQL 5.1.x (and higher) uses MRG_MYISAM    // Both are aliases for MERGE    case 'MRG_MyISAM' :    case 'MRG_MYISAM' :    case 'MERGE' :    case 'BerkeleyDB' :        // Merge or BerkleyDB table: Only row count is accurate.        if ($is_show_stats) {            $formatted_size =  ' - ';            $unit          =  '';        }        break;        // for a view, the ENGINE is sometimes reported as null,        // or on some servers it's reported as "SYSTEM VIEW"    case null :    case 'SYSTEM VIEW' :    case 'FunctionEngine' :        // if table is broken, Engine is reported as null, so one more test        if ($each_table['TABLE_TYPE'] == 'VIEW') {            // countRecords() takes care of $cfg['MaxExactCountViews']            $each_table['TABLE_ROWS'] = PMA_Table::countRecords(                $db, $each_table['TABLE_NAME'],                $force_exact = true, $is_view = true            );            $table_is_view = true;        }        break;    default :        // Unknown table type.        if ($is_show_stats) {            $formatted_size =  __('unknown');            $unit          =  '';        }    } // end switch    if (! PMA_Table::isMerge($db, $each_table['TABLE_NAME'])) {        $sum_entries += $each_table['TABLE_ROWS'];    }    if (isset($each_table['Collation'])) {        $collation = '<dfn title="'            . PMA_getCollationDescr($each_table['Collation']) . '">'            . $each_table['Collation'] . '</dfn>';    } else {        $collation = '---';    }    if ($is_show_stats) {        if (isset($formatted_overhead)) {            $overhead = '<a href="tbl_structure.php?'                . $tbl_url_query . '#showusage"><span>' . $formatted_overhead                . '</span> <span class="unit">' . $overhead_unit . '</span></a>' . "\n";            unset($formatted_overhead);            $overhead_check .=                "document.getElementById('checkbox_tbl_" . ($i + 1) . "').checked = true;";        } else {            $overhead = '-';        }    } // end if    $alias = (!empty($tooltip_aliasname) && isset($tooltip_aliasname[$each_table['TABLE_NAME']]))               ? str_replace(' ', '&nbsp;', htmlspecialchars($tooltip_truename[$each_table['TABLE_NAME']]))               : str_replace(' ', '&nbsp;', htmlspecialchars($each_table['TABLE_NAME']));    $truename = (!empty($tooltip_truename) && isset($tooltip_truename[$each_table['TABLE_NAME']]))               ? str_replace(' ', '&nbsp;', htmlspecialchars($tooltip_truename[$each_table['TABLE_NAME']]))               : str_replace(' ', '&nbsp;', htmlspecialchars($each_table['TABLE_NAME']));    $i++;    $row_count++;    if ($table_is_view) {        $hidden_fields[] = '<input type="hidden" name="views[]" value="'            .  htmlspecialchars($each_table['TABLE_NAME']) . '" />';    }    /*     * Always activate links for Browse, Search and Empty, even if     * the icons are greyed, because     * 1. for views, we don't know the number of rows at this point     * 2. for tables, another source could have populated them since the     *    page was generated     *     * I could have used the PHP ternary conditional operator but I find     * the code easier to read without this operator.     */    if ($each_table['TABLE_ROWS'] > 0 || $table_is_view) {        $may_have_rows = true;    } else {        $may_have_rows = false;    }    $browse_table = '<a href="sql.php?' . $tbl_url_query . '&amp;pos=0">';    if ($may_have_rows) {        $browse_table .= $titles['Browse'];    } else {        $browse_table .= $titles['NoBrowse'];    }    $browse_table .= '</a>';    $search_table = '<a href="tbl_select.php?' . $tbl_url_query . '">';    if ($may_have_rows) {        $search_table .= $titles['Search'];    } else {        $search_table .= $titles['NoSearch'];    }    $search_table .= '</a>';    $browse_table_label = '<a href="sql.php?' . $tbl_url_query . '&amp;pos=0">' . $truename . '</a>';    if (! $db_is_information_schema) {        $empty_table = '<a ';        if ($GLOBALS['cfg']['AjaxEnable']) {            $empty_table .= 'class="truncate_table_anchor"';        }        $empty_table .= ' href="sql.php?' . $tbl_url_query             . '&amp;sql_query=';        $empty_table .= urlencode('TRUNCATE ' . PMA_backquote($each_table['TABLE_NAME']))             . '&amp;message_to_show='             . urlencode(sprintf(__('Table %s has been emptied'), htmlspecialchars($each_table['TABLE_NAME'])))             .'">';        if ($may_have_rows) {            $empty_table .= $titles['Empty'];        } else {            $empty_table .= $titles['NoEmpty'];        }        $empty_table .= '</a>';        $drop_query = 'DROP '            . ($table_is_view ? 'VIEW' : 'TABLE')            . ' ' . PMA_backquote($each_table['TABLE_NAME']);        $drop_message = sprintf(            $table_is_view ? __('View %s has been dropped') : __('Table %s has been dropped'),            str_replace(' ', '&nbsp;', htmlspecialchars($each_table['TABLE_NAME']))        );    }    $tracking_icon = '';    if (PMA_Tracker::isActive()) {        if (PMA_Tracker::isTracked($GLOBALS["db"], $truename)) {            $tracking_icon = '<a href="tbl_tracking.php?' . $url_query                . '&amp;table=' . $truename . '">'                . PMA_getImage('eye.png', __('Tracking is active.'))                . '</a>';        } elseif (PMA_Tracker::getVersion($GLOBALS["db"], $truename) > 0) {            $tracking_icon = '<a href="tbl_tracking.php?' . $url_query                . '&amp;table=' . $truename . '">'                . PMA_getImage('eye.png', __('Tracking is not active.'))                . '</a>';        }    }    if ($num_columns > 0        && $num_tables > $num_columns        && ($row_count % $num_columns) == 0    ) {        $row_count = 1;        $odd_row = true;        ?>    </tr></tbody></table>        <?php        PMA_TableHeader(false, $server_slave_status);    }    $ignored = false;    $do = false;    if ($server_slave_status) {        ////////////////////////////////////////////////////////////////        if ((strlen(array_search($truename, $server_slave_Do_Table)) > 0)            || (strlen(array_search($db, $server_slave_Do_DB)) > 0)            || (count($server_slave_Do_DB) == 1 && count($server_slave_Ignore_DB) == 1)        ) {            $do = true;        }        foreach ($server_slave_Wild_Do_Table as $db_table) {            $table_part = PMA_extract_db_or_table($db_table, 'table');            if (($db == PMA_extract_db_or_table($db_table, 'db'))                && (preg_match("@^" . substr($table_part, 0, strlen($table_part) - 1) . "@", $truename))            ) {                $do = true;            }        }        ////////////////////////////////////////////////////////////////////        if ((strlen(array_search($truename, $server_slave_Ignore_Table)) > 0)            || (strlen(array_search($db, $server_slave_Ignore_DB)) > 0)        ) {            $ignored = true;        }        foreach ($server_slave_Wild_Ignore_Table as $db_table) {            $table_part = PMA_extract_db_or_table($db_table, 'table');            if (($db == PMA_extract_db_or_table($db_table))                && (preg_match("@^" . substr($table_part, 0, strlen($table_part) - 1) . "@", $truename))            ) {                $ignored = true;            }        }        unset($table_part);    }    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">    <td align="center">        <input type="checkbox" name="selected_tbl[]"            value="<?php echo htmlspecialchars($each_table['TABLE_NAME']); ?>"            id="checkbox_tbl_<?php echo $i; ?>"<?php echo $checked; ?> /></td>    <th><?php echo $browse_table_label; ?>        <?php echo (! empty($tracking_icon) ? $tracking_icon : ''); ?>    </th>   <?php if ($server_slave_status) { ?><td align="center"><?php        echo $ignored            ? PMA_getImage('s_cancel.png', 'NOT REPLICATED')            : ''.        $do            ? PMA_getImage('s_success.png', 'REPLICATED')            : ''; ?></td><?php } ?>    <td align="center"><?php echo $browse_table; ?></td>    <td align="center">        <a href="tbl_structure.php?<?php echo $tbl_url_query; ?>">            <?php echo $titles['Structure']; ?></a></td>    <td align="center"><?php echo $search_table; ?></td>    <?php if (! $db_is_information_schema) { ?>    <td align="center" class="insert_table">        <a <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="ajax"' : ''); ?> href="tbl_change.php?<?php echo $tbl_url_query; ?>">            <?php echo $titles['Insert']; ?></a></td>    <td align="center"><?php echo $empty_table; ?></td>    <td align="center">    <a <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="drop_table_anchor"' : ''); ?> href="sql.php?<?php echo $tbl_url_query;            ?>&amp;reload=1&amp;purge=1&amp;sql_query=<?php            echo urlencode($drop_query); ?>&amp;message_to_show=<?php            echo urlencode($drop_message); ?>" >            <?php echo $titles['Drop']; ?></a></td>    <?php } // end if (! $db_is_information_schema)    // there is a null value in the ENGINE    // - when the table needs to be repaired, or    // - when it's a view    //  so ensure that we'll display "in use" below for a table    //  that needs to be repaired    if (isset($each_table['TABLE_ROWS']) && ($each_table['ENGINE'] != null || $table_is_view)) {        $row_count_pre = '';        $show_superscript = '';        if ($table_is_view) {            // Drizzle views use FunctionEngine, and the only place where they are available are I_S and D_D            // schemas, where we do exact counting            if ($each_table['TABLE_ROWS'] >= $GLOBALS['cfg']['MaxExactCountViews']                && $each_table['ENGINE'] != 'FunctionEngine'            ) {                $row_count_pre = '~';                $sum_row_count_pre = '~';                $show_superscript = PMA_showHint(                    PMA_sanitize(                        sprintf(                            __('This view has at least this number of rows. Please refer to %sdocumentation%s.'),                            '[a@./Documentation.html#cfg_MaxExactCountViews@_blank]',                            '[/a]'                        )                    )                );            }        } elseif ($each_table['ENGINE'] == 'InnoDB' && (! $each_table['COUNTED'])) {            // InnoDB table: we did not get an accurate row count            $row_count_pre = '~';            $sum_row_count_pre = '~';            $show_superscript = '';        }    ?>    <td class="value tbl_rows"><?php echo $row_count_pre . PMA_formatNumber($each_table['TABLE_ROWS'], 0) . $show_superscript; ?></td>        <?php if (!($cfg['PropertiesNumColumns'] > 1)) { ?>    <td nowrap="nowrap"><?php echo ($table_is_view ? __('View') : $each_table['ENGINE']); ?></td>            <?php if (isset($collation)) { ?>    <td nowrap="nowrap"><?php echo $collation ?></td>            <?php } ?>        <?php } ?>        <?php if ($is_show_stats) { ?>    <td class="value tbl_size"><a        href="tbl_structure.php?<?php echo $tbl_url_query; ?>#showusage"        ><?php echo '<span>' . $formatted_size . '</span> <span class="unit">' . $unit . '</span>'; ?></a></td>    <td class="value tbl_overhead"><?php echo $overhead; ?></td>        <?php } // end if ?>    <?php } elseif ($table_is_view) { ?>    <td class="value">-</td>    <td><?php echo __('View'); ?></td>    <td>---</td>        <?php if ($is_show_stats) { ?>    <td class="value">-</td>    <td class="value">-</td>        <?php } ?>    <?php } else { ?>    <td colspan="<?php echo ($colspan_for_structure - ($db_is_information_schema ? 5 : 8)) ?>"        align="center">        <?php echo __('in use'); ?></td>    <?php } // end if (isset($each_table['TABLE_ROWS'])) else ?></tr>    <?php} // end foreach// Show Summaryif ($is_show_stats) {    list($sum_formatted, $unit) = PMA_formatByteDown($sum_size, 3, 1);    list($overhead_formatted, $overhead_unit)        = PMA_formatByteDown($overhead_size, 3, 1);}?></tbody><tbody id="tbl_summary_row"><tr><th></th>    <th align="center" nowrap="nowrap" class="tbl_num">        <?php            // for blobstreaming - if the number of tables is 0, set tableReductionCount to 0            // (we don't want negative numbers here)            if ($num_tables == 0) {                $tableReductionCount = 0;            }            echo sprintf(                _ngettext('%s table', '%s tables', $num_tables - $tableReductionCount),                PMA_formatNumber($num_tables - $tableReductionCount, 0)            );        ?>    </th>    <?php        if ($server_slave_status) {            echo '    <th>' . __('Replication') . '</th>' . "\n";        }    ?>    <th colspan="<?php echo ($db_is_information_schema ? 3 : 6) ?>" align="center">        <?php echo __('Sum'); ?></th>    <th class="value tbl_rows"><?php echo $sum_row_count_pre . PMA_formatNumber($sum_entries, 0); ?></th><?phpif (!($cfg['PropertiesNumColumns'] > 1)) {    $default_engine = PMA_DBI_fetch_value('SHOW VARIABLES LIKE \'storage_engine\';', 0, 1);    echo '    <th align="center">' . "\n"       . '        <dfn title="'       . sprintf(__('%s is the default storage engine on this MySQL server.'), $default_engine)       . '">' .$default_engine . '</dfn></th>' . "\n";    // we got a case where $db_collation was empty    echo '    <th align="center">' . "\n";    if (! empty($db_collation)) {        echo '        <dfn title="'            . PMA_getCollationDescr($db_collation) . ' (' . __('Default') . ')">' . $db_collation            . '</dfn>';    }    echo '</th>';}if ($is_show_stats) {    ?>    <th class="value tbl_size"><?php echo $sum_formatted . ' ' . $unit; ?></th>    <th class="value tbl_overhead"><?php echo $overhead_formatted . ' ' . $overhead_unit; ?></th>    <?php}?></tr></tbody></table><div class="clearfloat"><?php// Check all tables url$checkall_url = 'db_structure.php?' . PMA_generate_common_url($db);?><img class="selectallarrow" src="<?php echo $pmaThemeImage .'arrow_'.$text_dir.'.png'; ?>"    width="38" height="22" alt="<?php echo __('With selected:'); ?>" /><a href="<?php echo $checkall_url; ?>&amp;checkall=1"    onclick="if (markAllRows('tablesForm')) return false;">    <?php echo __('Check All'); ?></a>/<a href="<?php echo $checkall_url; ?>"    onclick="if (unMarkAllRows('tablesForm')) return false;">    <?php echo __('Uncheck All'); ?></a><?php if ($overhead_check != '') { ?>/<a href="#" onclick="unMarkAllRows('tablesForm');    <?php echo $overhead_check; ?> return false;">    <?php echo __('Check tables having overhead'); ?></a><?php } ?><select name="submit_mult" class="autosubmit" style="margin: 0 3em 0 3em;"><?phpecho '    <option value="' . __('With selected:') . '" selected="selected">'     . __('With selected:') . '</option>' . "\n";echo '    <option value="export" >'     . __('Export') . '</option>' . "\n";echo '    <option value="print" >'    . __('Print view') . '</option>' . "\n";if (!$db_is_information_schema && !$cfg['DisableMultiTableMaintenance']) {    echo '    <option value="empty_tbl" >'         . __('Empty') . '</option>' . "\n";    echo '    <option value="drop_tbl" >'         . __('Drop') . '</option>' . "\n";    echo '    <option value="check_tbl" >'         . __('Check table') . '</option>' . "\n";    if (!PMA_DRIZZLE) {        echo '    <option value="optimize_tbl" >'             . __('Optimize table') . '</option>' . "\n";        echo '    <option value="repair_tbl" >'             . __('Repair table') . '</option>' . "\n";    }    echo '    <option value="analyze_tbl" >'         . __('Analyze table') . '</option>' . "\n";    echo '    <option value="add_prefix_tbl" >'         . __('Add prefix to table') . '</option>' . "\n";    echo '    <option value="replace_prefix_tbl" >'         . __('Replace table prefix') . '</option>' . "\n";    echo '    <option value="copy_tbl_change_prefix" >'         . __('Copy table with prefix') . '</option>' . "\n";}?></select><script type="text/javascript"><!--// Fake js to allow the use of the <noscript> tag//--></script><noscript>    <input type="submit" value="<?php echo __('Go'); ?>" /></noscript><?php echo implode("\n", $hidden_fields) . "\n"; ?></div></form><?php// display again the table list navigatorPMA_listNavigator(    $total_num_tables, $pos, $_url_params, 'db_structure.php',    'frame_content', $GLOBALS['cfg']['MaxTableList']);?></div><hr /><?php/** * Work on the database *//* DATABASE WORK *//* Printable view of a table */echo '<p>';echo '<a href="db_printview.php?' . $url_query . '">';echo PMA_getIcon('b_print.png', __('Print view'), true) . '</a>';echo '<a href="./db_datadict.php?' . $url_query . '">';echo PMA_getIcon('b_tblanalyse.png', __('Data Dictionary'), true) . '</a>';echo '</p>';if (empty($db_is_information_schema)) {    include './libraries/display_create_table.lib.php';} // end if (Create Table dialog)/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'import.js';/** * Gets tables informations and displays top links */require './libraries/db_common.inc.php';require './libraries/db_info.inc.php';$import_type = 'database';require './libraries/display_import.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * navigation css file from theme Original * * @package PhpMyAdmin-theme * @subpackage Original */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON') && !defined('TESTSUITE')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : $_COOKIE['pma_fontsize']); ?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    margin:             0;    padding:            0.2em 0.2em 0.2em 0.2em;}a img {    border: 0;}a:link,a:visited,a:active {    text-decoration:    none;    color:              #0000FF;}ul {    margin:0;}form {    margin:             0;    padding:            0;    display:            inline;}select#select_server,select#lightm_db {    width:              100%;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}/******************************************************************************//* classes *//******************************************************************************//* specific elements */div#pmalogo {    <?php //better echo $GLOBALS['cfg']['logoBGC']; ?>    background-color: <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    padding:.3em;}div#recentTableList {    text-align: center;    margin-bottom: 0.5em;}div#recentTableList select {    width: 100%;}div#pmalogo,div#leftframelinks,div#databaseList {    text-align:         center;    margin-bottom:      0.5em;    padding-bottom:     0.5em;}ul#databaseList {    margin-bottom:      0.5em;    padding-bottom:     0.5em;    padding-<?php echo $left; ?>:     1.5em;    font-style: italic;}ul#databaseList a {    display: block;    font-style: normal;}div#navidbpageselector a,ul#databaseList a {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}ul#databaseList ul {    padding-left: 1em;    padding-right: 0;}ul#databaseList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}ul#databaseList li.selected a {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}div#leftframelinks .icon {    padding:            0;    margin:             0;}div#leftframelinks a img.icon {    margin:             2px;    border:             0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding:            0;}div#leftframelinks a:hover img {    background-color:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}/* serverlist */#body_leftFrame #list_server {    list-style-image: url(<?php echo $GLOBALS['cfg']['ThemePath']; ?>/original/img/s_host.png);    list-style-position: inside;    list-style-type: none;    margin: 0;    padding: 0;}#body_leftFrame #list_server li {    margin: 0;    padding: 0;    font-size:          80%;}div#left_tableList ul {    list-style-type:    none;    list-style-position: outside;    margin:             0;    padding:            0;    font-size:          80%;    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;}div#left_tableList ul ul {    font-size:          100%;}div#left_tableList a {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    none;}div#left_tableList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    underline;}div#left_tableList li {    margin:             0;    padding:            0;    white-space:        nowrap;}<?php if ($GLOBALS['cfg']['BrowseMarkerColor']) { ?>/* marked items */div#left_tableList > ul li.marked > a,div#left_tableList > ul li.marked {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['LeftPointerEnable']) { ?>div#left_tableList > ul li:hover > a,div#left_tableList > ul li:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}<?php } ?>div#left_tableList img {    padding:            0;    vertical-align:     middle;}div#left_tableList ul ul {    margin-<?php echo $left; ?>:        0;    padding-<?php echo $left; ?>:       0.1em;    border-<?php echo $left; ?>:        0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding-bottom:     0.1em;    border-bottom:      0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}/* for the servers list in navi panel */#serverinfo .item {    white-space:        nowrap;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}#serverinfo a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}#NavFilter {    display: none;}#clear_fast_filter {    background: white;    color: black;    cursor: pointer;    padding: 0;    margin: 3px 5px 0 -23px;    position: relative;    float: right;}#fast_filter {    width: 100%;    padding: 2px 0;    margin: 0;    border: 0;}#fast_filter.gray {    color: gray;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * the navigation frame - displays server, db and table selection tree * * @package PhpMyAdmin *//** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';/** * finish and cleanup navigation.php script execution, only to be used in navigation.php * * @access private */function PMA_exitNavigationFrame(){    echo '</body></html>';    exit;}require_once './libraries/common.lib.php';require_once './libraries/RecentTable.class.php';/** * Check if it is an ajax request to reload the recent tables list. */if ($GLOBALS['is_ajax_request'] && $_REQUEST['recent_table']) {    PMA_ajaxResponse('', true, array('options' => PMA_RecentTable::getInstance()->getHtmlSelectOption()) );}// keep the offset of the db list in session before closing itif (! isset($_SESSION['tmp_user_values']['navi_limit_offset'])) {    $_SESSION['tmp_user_values']['navi_limit_offset'] = 0;}if (! isset($_SESSION['tmp_user_values']['table_limit_offset']) || $_SESSION['tmp_user_values']['table_limit_offset_db'] != $db) {    $_SESSION['tmp_user_values']['table_limit_offset'] = 0;    $_SESSION['tmp_user_values']['table_limit_offset_db'] = $db;}if (isset($_REQUEST['pos'])) {    if (isset($_REQUEST['tpos'])) {        $_SESSION['tmp_user_values']['table_limit_offset'] = (int) $_REQUEST['pos'];    } else {        $_SESSION['tmp_user_values']['navi_limit_offset'] = (int) $_REQUEST['pos'];    }}$pos = $_SESSION['tmp_user_values']['navi_limit_offset'];$tpos = $_SESSION['tmp_user_values']['table_limit_offset'];// free the session file, for the other frames to be loaded// but only if debugging is not enabledif (empty($_SESSION['debug'])) {    session_write_close();}/** * the output compression library */require_once './libraries/ob.lib.php';PMA_outBufferPre();/* * selects the database if there is only one on current server */if ($GLOBALS['server'] && ! strlen($GLOBALS['db'])) {    $GLOBALS['db'] = $GLOBALS['pma']->databases->getSingleItem();}$db_start = $GLOBALS['db'];/** * the relation settings */$cfgRelation = PMA_getRelationsParam();/** * For re-usability, moved http-headers to a seperate file. * It can now be included by libraries/header.inc.php, querywindow.php. */require_once './libraries/header_http.inc.php';/* * Displays the frame */// xml declaration moves IE into quirks mode, making much trouble with CSS/* echo '<?xml version="1.0" encoding="utf-8"?>'; */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"    xml:lang="<?php echo $available_languages[$lang][1]; ?>"    lang="<?php echo $available_languages[$lang][1]; ?>"    dir="<?php echo $GLOBALS['text_dir']; ?>"><head>    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <title>phpMyAdmin</title>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <base target="frame_content" />    <link rel="stylesheet" type="text/css"        href="phpmyadmin.css.php?<?php echo PMA_generate_common_url('', ''); ?>&amp;js_frame=left&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" />    <?php    echo PMA_includeJS('jquery/jquery-1.6.2.js');    echo PMA_includeJS('jquery/jquery-ui-1.8.16.custom.js');    echo PMA_includeJS('jquery/jquery.qtip-1.0.0-rc3.js');    echo PMA_includeJS('navigation.js');    echo PMA_includeJS('functions.js');    echo PMA_includeJS('messages.php');    // Append the theme id to this url to invalidate the cache on a theme change    echo PMA_includeJS('get_image.js.php?theme=' . urlencode($_SESSION['PMA_Theme']->getId()));    ?>    <script type="text/javascript">    // <![CDATA[    // INIT PMA_setFrameSize    var onloadCnt = 0;    var onLoadHandler = window.onload;    var resizeHandler = window.onresize;    window.document.onresize  = resizeHandler;    window.onload = function() {        if (onloadCnt == 0) {            if (typeof(onLoadHandler) == "function") {                onLoadHandler();            }            if (typeof(PMA_setFrameSize) != 'undefined' && typeof(PMA_setFrameSize) == 'function') {                PMA_setFrameSize();            }            onloadCnt++;        }    };    window.onresize = function() {        if (typeof(resizeHandler) == "function") {            resizeHandler();        }        if (typeof(PMA_saveFrameSize) != 'undefined' && typeof(PMA_saveFrameSize) == 'function') {            PMA_saveFrameSize();        }    };    // ]]>    </script>    <?php    /*     * remove horizontal scroll bar bug in IE 6 by forcing a vertical scroll bar     */    ?>    <!--[if IE 6]>    <style type="text/css">    /* <![CDATA[ */    html {        overflow-y: scroll;    }    /* ]]> */    </style>    <![endif]--></head><body id="body_leftFrame"><?phprequire './libraries/navigation_header.inc.php';// display recently used tablesif ($GLOBALS['cfg']['LeftRecentTable'] > 0) {    echo '<div id="recentTableList">' . "\n"        .'<form method="post" action="index.php" target="_parent">' . "\n"        .PMA_generate_common_hidden_inputs() . "\n"        .PMA_RecentTable::getInstance()->getHtmlSelect()        .'<noscript>' . "\n"        .'<input type="submit" name="Go" value="' . __('Go') . '" />' . "\n"        .'</noscript>' . "\n"        .'</form>' . "\n"        .'</div>' . "\n";}if (! $GLOBALS['server']) {    // no server selected    PMA_exitNavigationFrame();} elseif (! count($GLOBALS['pma']->databases)) {    // no database available, so we break here    echo '<p>' . __('No databases') . '</p>';    PMA_exitNavigationFrame();} elseif ($GLOBALS['cfg']['LeftFrameLight'] && count($GLOBALS['pma']->databases) > 1) {    $list = $cfg['DisplayDatabasesList'];    if ($list === 'auto') {        if (empty($GLOBALS['db'])) {            $list = true;        } else {            $list = false;        }    }    if (!$list) {        // more than one database available and LeftFrameLight is true        // display db selectbox        //        // Light mode -> beginning of the select combo for databases        // Note: When javascript is active, the frameset will be changed from        // within navigation.php. With no JS (<noscript>) the whole frameset will        // be rebuilt with the new target frame.    ?>    <div id="databaseList">    <form method="post" action="index.php" target="_parent" id="left">    <?php        echo PMA_generate_common_hidden_inputs() . "\n";        echo $GLOBALS['pma']->databases->getHtmlSelectGrouped(true, $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']) . "\n";        echo '<noscript>' . "\n"            .'<input type="submit" name="Go" value="' . __('Go') . '" />' . "\n"            .'</noscript>' . "\n"            .'</form>' . "\n"            . '</div>' . "\n";    } else {        echo $GLOBALS['pma']->databases->getHtmlListGrouped(true, $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']) . "\n";    }    $_url_params = array('pos' => $pos);    PMA_listNavigator(count($GLOBALS['pma']->databases), $pos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxDbList']);}?><div id="left_tableList"><?php// Don't display expansible/collapsible database info if:// 1. $GLOBALS['server'] == 0 (no server selected)//    This is the case when there are multiple servers and//    '$GLOBALS['cfg']['ServerDefault'] = 0' is set. In that case, we want the welcome//    screen to appear with no database info displayed.// 2. there is only one database available (ie either only one database exists//    or $GLOBALS['cfg']['Servers']['only_db'] is defined and is not an array)//    In this case, the database should not be collapsible/expandable$img_plus = PMA_getImage('b_plus.png', '+', array('id' => 'el%dImg'));$img_minus = PMA_getImage('b_minus.png', '-', array('id' => 'el%dImg'));$href_left = '<a onclick="if (toggle(\'%d\')) return false;"'    .' href="navigation.php?%s" target="_self">';$element_counter = 0;if ($GLOBALS['cfg']['LeftFrameLight'] && strlen($GLOBALS['db'])) {    $table_list = PMA_getTableList($GLOBALS['db'], null, $tpos, $cfg['MaxTableList']);    $table_count = PMA_getTableCount($GLOBALS['db']);    // show selected databasename as link to DefaultTabDatabase-page    // with table count in ()    $common_url_query = PMA_generate_common_url($GLOBALS['db']);    $db_tooltip = '';    if ($GLOBALS['cfg']['ShowTooltip']      && $GLOBALS['cfgRelation']['commwork']) {        $_db_tooltip = PMA_getDbComment($GLOBALS['db']);        if ($_db_tooltip) {            $db_tooltip = $_db_tooltip;        }    }    $disp_name  = $GLOBALS['db'];    if ($db_tooltip && $GLOBALS['cfg']['ShowTooltipAliasDB']) {        $disp_name      = $db_tooltip;        $disp_name_cut  = $db_tooltip;        $db_tooltip     = $GLOBALS['db'];    }    if ($table_count >= $GLOBALS['cfg']['LeftDisplayTableFilterMinimum']) {        ?>        <span id="NavFilter">        <span id="clear_fast_filter" title="<?php echo __('Clear'); ?>">X</span>            <input type="text" class="gray" name="fast_filter" id="fast_filter" title="<?php echo __('Filter tables by name'); ?>" value="<?php echo __('Filter tables by name'); ?>" />        </span>        <?php    }    /**     * This helps reducing the navi panel size; in the right panel,     * user can find a navigator to page thru all tables.     *     */    if (! empty($table_list)) {        // upper table list paginator        if (count($table_list) <= $GLOBALS['cfg']['MaxTableList'] && $table_count > $GLOBALS['cfg']['MaxTableList']) {            $_url_params = array(              'tpos' => 'true',              'pos' => $tpos,              'db' => $GLOBALS['db']            );            PMA_listNavigator($table_count, $tpos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxTableList']);        }        PMA_displayTableList($table_list, true, '', $GLOBALS['db']);        // lower table list paginator        if (count($table_list) <= $GLOBALS['cfg']['MaxTableList'] && $table_count > $GLOBALS['cfg']['MaxTableList']) {            PMA_listNavigator($table_count, $tpos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxTableList']);        }    } else {        echo __('No tables found in database.');    }    unset($table_list);    if (!PMA_is_system_schema($db)) {        $class = '';        $GLOBALS['cfg']['AjaxEnable'] ? $class="ajax" : '';        echo '<ul id="newtable"><li><a target="frame_content" href="tbl_create.php' . PMA_generate_common_url(array('db' => $GLOBALS['db'])) . '"  class="'.$class .'" >'            . PMA_getImage('b_snewtbl.png', _pgettext('short form', 'Create table'), array('id' => "icon_newtable"))            . _pgettext('short form', 'Create table') . '</a></li></ul>';    }} elseif ($GLOBALS['cfg']['LeftFrameLight']) {    /* No need to tell user to select database if we're showing complete list */    if (!$list) {        echo '<p>' . __('Please select a database') . '</p>';    }} else {    echo '<div id="databaseList">' . "\n";    $_url_params = array('pos' => $pos);    PMA_listNavigator(count($GLOBALS['pma']->databases), $pos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxDbList']);    echo '</div>' . "\n";    $common_url_query = PMA_generate_common_url();    PMA_displayDbList($GLOBALS['pma']->databases->getGroupedDetails($_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']), $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']);}/** * displays collapsable db list * * @global  integer $element_counter * @global  string $img_minus * @global  string $img_plus * @global  string $href_left * @global  string $db_start * @global  string $common_url_query * @param array   $ext_dblist extended db list * @param integer $offset * @param integer $count */function PMA_displayDbList($ext_dblist, $offset, $count){    global $element_counter, $img_minus, $img_plus, $href_left,        $db_start, $common_url_query;    // get table list, for all databases    // doing this in one step takes advantage of a single query with information_schema!    $tables_full = PMA_DBI_get_tables_full($GLOBALS['pma']->databases->getLimitedItems($offset, $count));    $url_dbgroup = '';    echo '<ul id="leftdatabaselist">';    $close_db_group = false;    foreach ($ext_dblist as $group => $db_group) {        if (count($GLOBALS['pma']->databases) > 1) {            if ($close_db_group) {                $url_dbgroup = '';                echo '</ul>';                echo '</li>';                $close_db_group = false;            }            if (count($db_group) > 1) {                $close_db_group = true;                $url_dbgroup = '&amp;dbgroup=' . urlencode($group);                $common_url_query = PMA_generate_common_url() . $url_dbgroup;                $element_counter++;                echo '<li class="dbgroup">';                if ((! empty($_REQUEST['dbgroup']) && $_REQUEST['dbgroup'] == $group)                  || $db_start == $group || strpos($db_start, $group) === 0) {                    // display + only if this db(group) is not preselected                    printf($href_left, $element_counter, PMA_generate_common_url());                    printf($img_minus, $element_counter);                } else {                    printf($href_left, $element_counter, $common_url_query);                    printf($img_plus, $element_counter);                }                echo '</a> ' . $group . "\n";                if ((! empty($_REQUEST['dbgroup']) && $_REQUEST['dbgroup'] == $group)                  || $db_start == $group || strpos($db_start, $group) === 0) {                    echo '<ul id="subel' . $element_counter . '">' . "\n";                } else {                    echo '<ul id="subel' . $element_counter . '"'                        .' style="display: none">' . "\n";                }            }        }        foreach ($db_group as $db) {            $common_url_query = PMA_generate_common_url($db['name']) . $url_dbgroup;            $element_counter++;            // Displays the database name            echo '<li>' . "\n";            if (count($GLOBALS['pma']->databases) > 1) {                // only with more than one db we need collapse ...                if ($db_start != $db['name'] || $db['num_tables'] < 1) {                    // display + only if this db is not preselected                    // or table count is 0                    printf($href_left, $element_counter, $common_url_query);                    printf($img_plus, $element_counter);                } else {                    printf($href_left, $element_counter,                        PMA_generate_common_url() . $url_dbgroup);                    printf($img_minus, $element_counter);                }                echo '</a>';                // ... and we need to refresh both frames on db selection                ?>                <a class="item"                    id="<?php echo htmlspecialchars($db['name']); ?>"                    href="index.php?<?php echo $common_url_query; ?>"                    target="_parent"                    title="<?php echo htmlspecialchars($db['comment']); ?>"                    onclick="                        if (! toggle('<?php echo $element_counter; ?>', true))                            window.parent.goTo('./navigation.php?<?php echo $common_url_query; ?>');                        window.parent.goTo('./<?php echo $GLOBALS['cfg']['DefaultTabDatabase']                            . '?' . $common_url_query; ?>', 'main');                        return false;">                    <?php                    // Might be unset if CountTables directive is false                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'rtl') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    echo htmlspecialchars($db['disp_name']);                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'ltr') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    ?>                </a>                <?php            } else {                // with only 1 db available we dont need to refresh navi frame                // on db selection, only phpmain                ?>                <a href="<?php echo $GLOBALS['cfg']['DefaultTabDatabase']                    . '?' . $common_url_query; ?>"                    id="<?php echo htmlspecialchars($db['name']); ?>"                    title="<?php echo htmlspecialchars($db['comment']); ?>">                    <?php                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'rtl') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    echo htmlspecialchars($db['disp_name']);                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'ltr') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    ?>                </a>                <?php            }            if (($GLOBALS['cfg']['Server']['CountTables'] === false) || $db['num_tables']) {                if (isset($tables_full[$db['name']])) {                    $tables = PMA_getTableList($db['name'], $tables_full[$db['name']]);                } elseif (isset($tables_full[strtolower($db['name'])])) {                    // on windows with lower_case_table_names = 1                    // MySQL returns                    // with SHOW DATABASES or information_schema.SCHEMATA: `Test`                    // but information_schema.TABLES gives `test`                    // bug #1436171                    // sf.net/tracker/?func=detail&aid=1436171&group_id=23067&atid=377408                    $tables = PMA_getTableList($db['name'], $tables_full[strtolower($db['name'])]);                } else {                    $tables = PMA_getTableList($db['name']);                }                $child_visible                    = (bool) (count($GLOBALS['pma']->databases) === 1 || $db_start == $db['name']);                PMA_displayTableList($tables, $child_visible, '', $db['name']);            } elseif ($GLOBALS['cfg']['LeftFrameLight']) {                // no tables and LeftFrameLight:                // display message no tables in selected db                echo '<p>' . __('Please select a database') . '</p>' . "\n";            }            echo '</li>' . "\n";        } // end foreach db    } // end foreach group    if ($close_db_group) {        $url_dbgroup = '';        echo '</ul>';        echo '</li>';        $close_db_group = false;    }    echo '</ul>' . "\n";}/** * display unordered list of tables * calls itself recursively if table in given list * is a list itself * * @global  integer the element counter * @global  string  html code for '-' image * @global  string  html code for '+' image * @global  string  html code for self link * @param array   $tables         array of tables/tablegroups * @param boolean $visible        whether the list is visible or not * @param string  $tab_group_full full tab group name * @param string  $table_db       db of this table */function PMA_displayTableList($tables, $visible = false,    $tab_group_full = '', $table_db = ''){    if (! is_array($tables) || count($tables) === 0) {        return;    }    global $element_counter, $img_minus, $img_plus, $href_left;    $sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];    if ($visible) {        echo '<ul id="subel' . $element_counter . '">';    } else {        echo '<ul id="subel' . $element_counter . '" style="display: none">';    }    foreach ($tables as $group => $table) {        // only allow grouping if the group has more than 1 table        if (isset($table['is' . $sep . 'group']) && $table['tab' . $sep . 'count'] > 1) {            $common_url_query = $GLOBALS['common_url_query']                . '&amp;tbl_group=' . urlencode($tab_group_full . $group);            $element_counter++;            echo '<li>' . "\n";            if ($visible             && ((isset($_REQUEST['tbl_group'])               && (strpos($_REQUEST['tbl_group'], $group) === 0                || strpos($_REQUEST['tbl_group'], $sep . $group) !== false))              || strpos($GLOBALS['table'], $group) === 0)) {                printf($href_left, $element_counter,                    $GLOBALS['common_url_query'] . '&amp;tbl_group=' . $tab_group_full);                printf($img_minus, $element_counter);            } else {                printf($href_left, $element_counter, $common_url_query);                printf($img_plus, $element_counter);            }            echo '</a>';            ?>            <a href="index.php?<?php echo $common_url_query; ?>"                target="_parent"                onclick="                    if (! toggle('<?php echo $element_counter; ?>', true))                        window.parent.goTo('./navigation.php?<?php echo $common_url_query; ?>');                    window.parent.goTo('./<?php echo $GLOBALS['cfg']['DefaultTabDatabase']                        . '?' . $common_url_query; ?>', 'main');                    return false;">                <?php                if ($GLOBALS['text_dir'] === 'rtl') {                    echo ' <bdo dir="ltr">(' . $table['tab' . $sep . 'count'] . ')</bdo> ';                }                echo htmlspecialchars(substr($group, 0, strlen($group) - strlen($sep)));                if ($GLOBALS['text_dir'] === 'ltr') {                    echo ' <bdo dir="ltr">(' . $table['tab' . $sep . 'count'] . ')</bdo> ';                }                ?>            </a>            <?php            unset($table['is' . $sep . 'group']);            unset($table['tab' . $sep . 'group']);            unset($table['tab' . $sep . 'count']);            if ($visible &&              ((isset($_REQUEST['tbl_group'])                && (strpos($_REQUEST['tbl_group'], $group) === 0                || strpos($_REQUEST['tbl_group'], $sep . $group) !== false))              || strpos($GLOBALS['table'], $group) === 0)) {                PMA_displayTableList($table, true,                    $tab_group_full . $group, $table_db);            } else {                PMA_displayTableList($table, false, '', $table_db);            }            echo '</li>' . "\n";        } elseif (is_array($table)) {            // the table was not grouped because it is the only one with its prefix            while (isset($table['is' . $sep . 'group'])) {                // get the array with the actual table information                foreach ($table as $value) {                    if (is_array($value)) {                        $table = $value;                    }                }            }            $link_title = PMA_getTitleForTarget($GLOBALS['cfg']['LeftDefaultTabTable']);            // quick access icon next to each table name            echo '<li>' . "\n";            echo '<a class="tableicon" title="'                . htmlspecialchars($link_title)                . ': ' . htmlspecialchars($table['Comment'])                .' (' . PMA_formatNumber($table['Rows'], 0) . ' ' . __('Rows') . ')"'                .' id="quick_' . htmlspecialchars($table_db . '.' . $table['Name']) . '"'                .' href="' . $GLOBALS['cfg']['LeftDefaultTabTable'] . '?'                . $GLOBALS['common_url_query']                .'&amp;table=' . urlencode($table['Name'])                .'&amp;goto=' . $GLOBALS['cfg']['LeftDefaultTabTable']                . '" >';            $attr = array('id' => 'icon_' . htmlspecialchars($table_db . '.' . $table['Name']));            if (PMA_Table::isView($table_db, $table['Name'])) {                echo PMA_getImage('s_views.png', htmlspecialchars($link_title), $attr);            } else {                echo PMA_getImage('b_browse.png', htmlspecialchars($link_title), $attr);            }            echo '</a>';            // link for the table name itself            $href = $GLOBALS['cfg']['DefaultTabTable'] . '?'                .$GLOBALS['common_url_query'] . '&amp;table='                .urlencode($table['Name']) . '&amp;pos=0';            echo '<a href="' . $href            . '" title="' . htmlspecialchars(PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabTable']) . ': ' . $table['Comment']                .' (' . PMA_formatNumber($table['Rows'], 0) . ' ' . __('Rows')) . ')"'                .' id="' . htmlspecialchars($table_db . '.' . $table['Name']) . '">'                // preserve spaces in table name                . str_replace(' ', '&nbsp;', htmlspecialchars($table['disp_name'])) . '</a>';            echo '</li>' . "\n";        }    }    echo '</ul>';}echo '</div>' . "\n";PMA_exitNavigationFrame();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for creating database (if user has privileges for that) * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/check_user_privileges.lib.php';if ($is_create_db_priv) {    // The user is allowed to create a db    ?>        <form method="post" action="db_create.php" id="create_database_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="ajax" ' : ''); ?>><strong>            <?php echo '<label for="text_create_db">' . __('Create database') . '</label>&nbsp;' . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_DATABASE'); ?></strong><br />            <?php echo PMA_generate_common_hidden_inputs('', '', 5); ?>            <input type="hidden" name="reload" value="1" />            <input type="text" name="new_db" value="<?php echo $db_to_create; ?>" maxlength="64" class="textfield" id="text_create_db"/>    <?php    include_once './libraries/mysql_charsets.lib.php';    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION, 'db_collation', null, null, true, 5);    if (! empty($dbstats)) {        echo '<input type="hidden" name="dbstats" value="1" />';    }    ?>            <input type="submit" value="<?php echo __('Create'); ?>" id="buttonGo" />        </form>    <?php} else {    ?>    <!-- db creation no privileges message -->        <strong><?php echo __('Create database') . ':&nbsp;' . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_DATABASE'); ?></strong><br />        <?php              echo '<span class="noPrivileges">'                 . ($cfg['ErrorIconic'] ? PMA_getImage('s_error2.png', '', array('hspace' => 2, 'border' => 0, 'align' => 'middle')) : '')                 . '' . __('No Privileges') .'</span>';} // end create db form or message?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used with the relation and pdf feature * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Executes a query as controluser if possible, otherwise as normal user * * @param string  $sql        the query to execute * @param boolean $show_error whether to display SQL error messages or not * @param int     $options    query options * * @return  integer   the result set, or false if no result set * * @access  public * */function PMA_query_as_controluser($sql, $show_error = true, $options = 0){    // Avoid caching of the number of rows affected; for example, this function    // is called for tracking purposes but we want to display the correct number    // of rows affected by the original query, not by the query generated for    // tracking.    $cache_affected_rows = false;    if ($show_error) {        $result = PMA_DBI_query($sql, $GLOBALS['controllink'], $options, $cache_affected_rows);    } else {        $result = @PMA_DBI_try_query($sql, $GLOBALS['controllink'], $options, $cache_affected_rows);    } // end if... else...    if ($result) {        return $result;    } else {        return false;    }} // end of the "PMA_query_as_controluser()" function/** * @param bool $verbose whether to print diagnostic info * * @return  array   $cfgRelation */function PMA_getRelationsParam($verbose = false){    if (empty($_SESSION['relation'][$GLOBALS['server']])) {        $_SESSION['relation'][$GLOBALS['server']] = PMA__getRelationsParam();    }    // just for BC but needs to be before PMA_printRelationsParamDiagnostic()    // which uses it    $GLOBALS['cfgRelation'] = $_SESSION['relation'][$GLOBALS['server']];    if ($verbose) {        PMA_printRelationsParamDiagnostic($_SESSION['relation'][$GLOBALS['server']]);    }    return $_SESSION['relation'][$GLOBALS['server']];}/** * prints out diagnostic info for pma relation feature * * @param array $cfgRelation * * @return nothing */function PMA_printRelationsParamDiagnostic($cfgRelation){    $messages['error'] = '<font color="red"><strong>' . __('not OK')                   . '</strong></font> [ <a href="Documentation.html#%s" target="documentation">'                   . __('Documentation') . '</a> ]';    $messages['ok'] = '<font color="green"><strong>' . __('OK') . '</strong></font>';    $messages['enabled']  = '<font color="green">' . __('Enabled') . '</font>';    $messages['disabled'] = '<font color="red">'   . __('Disabled') . '</font>';    if (false === $GLOBALS['cfg']['Server']['pmadb']) {        echo 'PMA Database ... '             . sprintf($messages['error'], 'pmadb')             . '<br />' . "\n"             . __('General relation features')             . ' <font color="green">' . __('Disabled')             . '</font>' . "\n";        return;    }    echo '<table>' . "\n";    PMA_printDiagMessageForParameter('pmadb', $GLOBALS['cfg']['Server']['pmadb'], $messages, 'pmadb');    PMA_printDiagMessageForParameter('relation', isset($cfgRelation['relation']), $messages, 'relation');    PMA_printDiagMessageForFeature(__('General relation features'), 'relwork', $messages);    PMA_printDiagMessageForParameter('table_info', isset($cfgRelation['table_info']), $messages, 'table_info');    PMA_printDiagMessageForFeature(__('Display Features'), 'displaywork', $messages);    PMA_printDiagMessageForParameter('table_coords', isset($cfgRelation['table_coords']), $messages, 'table_coords');    PMA_printDiagMessageForParameter('pdf_pages', isset($cfgRelation['pdf_pages']), $messages, 'table_coords');    PMA_printDiagMessageForFeature(__('Creation of PDFs'), 'pdfwork', $messages);    PMA_printDiagMessageForParameter('column_info', isset($cfgRelation['column_info']), $messages, 'col_com');    PMA_printDiagMessageForFeature(__('Displaying Column Comments'), 'commwork', $messages, false);    PMA_printDiagMessageForFeature(__('Browser transformation'), 'mimework', $messages);    if ($cfgRelation['commwork'] && ! $cfgRelation['mimework']) {        echo '<tr><td colspan=2 align="left">' . __('Please see the documentation on how to update your column_comments table') . '</td></tr>' . "\n";    }    PMA_printDiagMessageForParameter('bookmarktable', isset($cfgRelation['bookmark']), $messages, 'bookmark');    PMA_printDiagMessageForFeature(__('Bookmarked SQL query'), 'bookmarkwork', $messages);    PMA_printDiagMessageForParameter('history', isset($cfgRelation['history']), $messages, 'history');    PMA_printDiagMessageForFeature(__('SQL history'), 'historywork', $messages);    PMA_printDiagMessageForParameter('designer_coords', isset($cfgRelation['designer_coords']), $messages, 'designer_coords');    PMA_printDiagMessageForFeature(__('Designer'), 'designerwork', $messages);    PMA_printDiagMessageForParameter('recent', isset($cfgRelation['recent']), $messages, 'recent');    PMA_printDiagMessageForFeature(__('Persistent recently used tables'), 'recentwork', $messages);    PMA_printDiagMessageForParameter('table_uiprefs', isset($cfgRelation['table_uiprefs']), $messages, 'table_uiprefs');    PMA_printDiagMessageForFeature(__('Persistent tables\' UI preferences'), 'uiprefswork', $messages);    PMA_printDiagMessageForParameter('tracking', isset($cfgRelation['tracking']), $messages, 'tracking');    PMA_printDiagMessageForFeature(__('Tracking'), 'trackingwork', $messages);    PMA_printDiagMessageForParameter('userconfig', isset($cfgRelation['userconfig']), $messages, 'userconfig');    PMA_printDiagMessageForFeature(__('User preferences'), 'userconfigwork', $messages);    echo '</table>' . "\n";    echo '<p>' . __('Quick steps to setup advanced features:') . '</p>';    echo '<ul>';    echo '<li>' . __('Create the needed tables with the <code>examples/create_tables.sql</code>.') . ' ' . PMA_showDocu('linked-tables') . '</li>';    echo '<li>' . __('Create a pma user and give access to these tables.') . ' ' . PMA_showDocu('pmausr') . '</li>';    echo '<li>' . __('Enable advanced features in configuration file (<code>config.inc.php</code>), for example by starting from <code>config.sample.inc.php</code>.') . ' ' . PMA_showDocu('quick_install') . '</li>';    echo '<li>' . __('Re-login to phpMyAdmin to load the updated configuration file.') . '</li>';    echo '</ul>';}/** * prints out one diagnostic message for a feature * * @param string  $feature_name       feature name in a message string * @param string  $relation_parameter the $GLOBALS['cfgRelation'] parameter to check * @param array   $messages           utility messages * @param boolean $skip_line          whether to skip a line after the message * * @return nothing */function PMA_printDiagMessageForFeature($feature_name, $relation_parameter, $messages, $skip_line=true){    echo '    <tr><td colspan=2 align="right">' . $feature_name . ': '         . ($GLOBALS['cfgRelation'][$relation_parameter] ? $messages['enabled'] : $messages['disabled'])         . '</td></tr>' . "\n";    if ($skip_line) {        echo '    <tr><td>&nbsp;</td></tr>' . "\n";    }}/** * prints out one diagnostic message for a configuration parameter * * @param string  $parameter              config parameter name to display * @param boolean $relation_parameter_set whether this parameter is set * @param array   $messages               utility messages * @param string  $doc_anchor             anchor in Documentation.html * * @return nothing */function PMA_printDiagMessageForParameter($parameter, $relation_parameter_set, $messages, $doc_anchor){    echo '    <tr><th align="left">';    echo '$cfg[\'Servers\'][$i][\'' . $parameter . '\']  ... </th><td align="right">';    echo ($relation_parameter_set ? $messages['ok'] : sprintf($messages['error'], $doc_anchor)) . '</td></tr>' . "\n";}/** * Defines the relation parameters for the current user * just a copy of the functions used for relations ;-) * but added some stuff to check what will work * * @access  protected * @return  array    the relation parameters for the current user */function PMA__getRelationsParam(){    $cfgRelation                = array();    $cfgRelation['relwork']     = false;    $cfgRelation['displaywork'] = false;    $cfgRelation['bookmarkwork']= false;    $cfgRelation['pdfwork']     = false;    $cfgRelation['commwork']    = false;    $cfgRelation['mimework']    = false;    $cfgRelation['historywork'] = false;    $cfgRelation['recentwork']  = false;    $cfgRelation['uiprefswork'] = false;    $cfgRelation['trackingwork'] = false;    $cfgRelation['designerwork'] = false;    $cfgRelation['userconfigwork'] = false;    $cfgRelation['allworks']    = false;    $cfgRelation['user']        = null;    $cfgRelation['db']          = null;    if ($GLOBALS['server'] == 0 || empty($GLOBALS['cfg']['Server']['pmadb'])        || ! PMA_DBI_select_db($GLOBALS['cfg']['Server']['pmadb'], $GLOBALS['controllink'])    ) {        // No server selected -> no bookmark table        // we return the array with the falses in it,        // to avoid some 'Unitialized string offset' errors later        $GLOBALS['cfg']['Server']['pmadb'] = false;        return $cfgRelation;    }    $cfgRelation['user']  = $GLOBALS['cfg']['Server']['user'];    $cfgRelation['db']    = $GLOBALS['cfg']['Server']['pmadb'];    //  Now I just check if all tables that i need are present so I can for    //  example enable relations but not pdf...    //  I was thinking of checking if they have all required columns but I    //  fear it might be too slow    $tab_query = 'SHOW TABLES FROM ' . PMA_backquote($GLOBALS['cfg']['Server']['pmadb']);    $tab_rs    = PMA_query_as_controluser($tab_query, false, PMA_DBI_QUERY_STORE);    if (! $tab_rs) {        // query failed ... ?        //$GLOBALS['cfg']['Server']['pmadb'] = false;        return $cfgRelation;    }    while ($curr_table = @PMA_DBI_fetch_row($tab_rs)) {        if ($curr_table[0] == $GLOBALS['cfg']['Server']['bookmarktable']) {            $cfgRelation['bookmark']        = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['relation']) {            $cfgRelation['relation']        = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['table_info']) {            $cfgRelation['table_info']      = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['table_coords']) {            $cfgRelation['table_coords']    = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['designer_coords']) {            $cfgRelation['designer_coords']    = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['column_info']) {            $cfgRelation['column_info'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['pdf_pages']) {            $cfgRelation['pdf_pages']       = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['history']) {            $cfgRelation['history'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['recent']) {            $cfgRelation['recent'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['table_uiprefs']) {            $cfgRelation['table_uiprefs'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['tracking']) {            $cfgRelation['tracking'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['userconfig']) {            $cfgRelation['userconfig'] = $curr_table[0];        }    } // end while    PMA_DBI_free_result($tab_rs);    if (isset($cfgRelation['relation'])) {        $cfgRelation['relwork']         = true;        if (isset($cfgRelation['table_info'])) {                $cfgRelation['displaywork'] = true;        }    }    if (isset($cfgRelation['table_coords']) && isset($cfgRelation['pdf_pages'])) {        $cfgRelation['pdfwork']     = true;    }    if (isset($cfgRelation['column_info'])) {        $cfgRelation['commwork']    = true;        if ($GLOBALS['cfg']['Server']['verbose_check']) {            $mime_query  = PMA_DBI_get_columns_sql($cfgRelation['db'], $cfgRelation['column_info']);            $mime_rs     = PMA_query_as_controluser($mime_query, false);            $mime_field_mimetype                = false;            $mime_field_transformation          = false;            $mime_field_transformation_options  = false;            while ($curr_mime_field = @PMA_DBI_fetch_row($mime_rs)) {                if ($curr_mime_field[0] == 'mimetype') {                    $mime_field_mimetype               = true;                } elseif ($curr_mime_field[0] == 'transformation') {                    $mime_field_transformation         = true;                } elseif ($curr_mime_field[0] == 'transformation_options') {                    $mime_field_transformation_options = true;                }            }            PMA_DBI_free_result($mime_rs);            if ($mime_field_mimetype                && $mime_field_transformation                && $mime_field_transformation_options            ) {                $cfgRelation['mimework'] = true;            }        } else {            $cfgRelation['mimework'] = true;        }    }    if (isset($cfgRelation['history'])) {        $cfgRelation['historywork']     = true;    }    if (isset($cfgRelation['recent'])) {        $cfgRelation['recentwork']      = true;    }    if (isset($cfgRelation['table_uiprefs'])) {        $cfgRelation['uiprefswork']     = true;    }    if (isset($cfgRelation['tracking'])) {        $cfgRelation['trackingwork']     = true;    }    if (isset($cfgRelation['userconfig'])) {        $cfgRelation['userconfigwork']   = true;    }    // we do not absolutely need that the internal relations or the PDF    // schema feature be activated    if (isset($cfgRelation['designer_coords'])) {        $cfgRelation['designerwork']     = true;    }    if (isset($cfgRelation['bookmark'])) {        $cfgRelation['bookmarkwork']     = true;    }    if ($cfgRelation['relwork'] && $cfgRelation['displaywork']        && $cfgRelation['pdfwork'] && $cfgRelation['commwork']        && $cfgRelation['mimework'] && $cfgRelation['historywork']        && $cfgRelation['recentwork'] && $cfgRelation['uiprefswork']        && $cfgRelation['trackingwork'] && $cfgRelation['userconfigwork']        && $cfgRelation['bookmarkwork'] && $cfgRelation['designerwork']    ) {        $cfgRelation['allworks'] = true;    }    return $cfgRelation;} // end of the 'PMA_getRelationsParam()' function/** * Gets all Relations to foreign tables for a given table or * optionally a given column in a table * * @param string $db     the name of the db to check for * @param string $table  the name of the table to check for * @param string $column the name of the column to check for * @param string $source the source for foreign key information * * @return  array    db,table,column * * @access  public */function PMA_getForeigners($db, $table, $column = '', $source = 'both'){    $cfgRelation = PMA_getRelationsParam();    $foreign = array();    if ($cfgRelation['relwork'] && ($source == 'both' || $source == 'internal')) {        $rel_query = '             SELECT `master_field`,                    `foreign_db`,                    `foreign_table`,                    `foreign_field`               FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation']) . '              WHERE `master_db`    = \'' . PMA_sqlAddSlashes($db) . '\'                AND `master_table` = \'' . PMA_sqlAddSlashes($table) . '\' ';        if (strlen($column)) {            $rel_query .= ' AND `master_field` = \'' . PMA_sqlAddSlashes($column) . '\'';        }        $foreign = PMA_DBI_fetch_result($rel_query, 'master_field', null, $GLOBALS['controllink']);    }    if (($source == 'both' || $source == 'foreign') && strlen($table)) {        $show_create_table_query = 'SHOW CREATE TABLE '            . PMA_backquote($db) . '.' . PMA_backquote($table);        $show_create_table = PMA_DBI_fetch_value($show_create_table_query, 0, 1);        $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));        foreach ($analyzed_sql[0]['foreign_keys'] as $one_key) {            // The analyzer may return more than one column name in the            // index list or the ref_index_list; if this happens,            // the current logic just discards the whole index; having            // more than one index field is currently unsupported (see FAQ 3.6)            if (count($one_key['index_list']) == 1) {                foreach ($one_key['index_list'] as $i => $field) {                    // If a foreign key is defined in the 'internal' source (pmadb)                    // and as a native foreign key, we won't get it twice                    // if $source='both' because we use $field as key                    // The parser looks for a CONSTRAINT clause just before                    // the FOREIGN KEY clause. It finds it (as output from                    // SHOW CREATE TABLE) in MySQL 4.0.13, but not in older                    // versions like 3.23.58.                    // In those cases, the FOREIGN KEY parsing will put numbers                    // like -1, 0, 1... instead of the constraint number.                    if (isset($one_key['constraint'])) {                        $foreign[$field]['constraint'] = $one_key['constraint'];                    }                    if (isset($one_key['ref_db_name'])) {                        $foreign[$field]['foreign_db'] = $one_key['ref_db_name'];                    } else {                        $foreign[$field]['foreign_db'] = $db;                    }                    $foreign[$field]['foreign_table'] = $one_key['ref_table_name'];                    $foreign[$field]['foreign_field'] = $one_key['ref_index_list'][$i];                    if (isset($one_key['on_delete'])) {                        $foreign[$field]['on_delete'] = $one_key['on_delete'];                    }                    if (isset($one_key['on_update'])) {                        $foreign[$field]['on_update'] = $one_key['on_update'];                    }                }            }        }    }    /**     * Emulating relations for some information_schema and data_dictionary tables     */    $is_information_schema = strtolower($db) == 'information_schema';    $is_data_dictionary = PMA_DRIZZLE && strtolower($db) == 'data_dictionary';    if (($is_information_schema || $is_data_dictionary) && ($source == 'internal' || $source == 'both')) {        if ($is_information_schema) {            $relations_key = 'information_schema_relations';            include_once './libraries/information_schema_relations.lib.php';        } else {            $relations_key = 'data_dictionary_relations';            include_once './libraries/data_dictionary_relations.lib.php';        }        if (isset($GLOBALS[$relations_key][$table])) {            foreach ($GLOBALS[$relations_key][$table] as $field => $relations) {                if ((! strlen($column) || $column == $field)                    && (! isset($foreign[$field]) || ! strlen($foreign[$field]))                ) {                    $foreign[$field] = $relations;                }            }        }    }    return $foreign;} // end of the 'PMA_getForeigners()' function/** * Gets the display field of a table * * @param string $db    the name of the db to check for * @param string $table the name of the table to check for * * @return  string   field name * * @access  public */function PMA_getDisplayField($db, $table){    $cfgRelation = PMA_getRelationsParam();    /**     * Try to fetch the display field from DB.     */    if ($cfgRelation['displaywork']) {        $disp_query = '             SELECT `display_field`               FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info']) . '              WHERE `db_name`    = \'' . PMA_sqlAddSlashes($db) . '\'                AND `table_name` = \'' . PMA_sqlAddSlashes($table) . '\'';        $row = PMA_DBI_fetch_single_row($disp_query, 'ASSOC', $GLOBALS['controllink']);        if (isset($row['display_field'])) {            return $row['display_field'];        }    }    /**     * Emulating the display field for some information_schema tables.     */    if ($db == 'information_schema') {        switch ($table) {        case 'CHARACTER_SETS':            return 'DESCRIPTION';        case 'TABLES':            return 'TABLE_COMMENT';        }    }    /**     * No Luck...     */    return false;} // end of the 'PMA_getDisplayField()' function/** * Gets the comments for all rows of a table or the db itself * * @param string $db    the name of the db to check for * @param string $table the name of the table to check for * * @return  array    [field_name] = comment * * @access  public */function PMA_getComments($db, $table = ''){    $comments = array();    if ($table != '') {        // MySQL native column comments        $fields = PMA_DBI_get_columns($db, $table, null, true);        if ($fields) {            foreach ($fields as $field) {                if (! empty($field['Comment'])) {                    $comments[$field['Field']] = $field['Comment'];                }            }        }    } else {        $comments[] = PMA_getDbComment($db);    }    return $comments;} // end of the 'PMA_getComments()' function/** * Gets the comment for a db * * @param string $db the name of the db to check for * * @return  string   comment * * @access  public */function PMA_getDbComment($db){    $cfgRelation = PMA_getRelationsParam();    $comment = '';    if ($cfgRelation['commwork']) {        // pmadb internal db comment        $com_qry = "             SELECT `comment`               FROM " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['column_info']) . "              WHERE db_name     = '" . PMA_sqlAddSlashes($db) . "'                AND table_name  = ''                AND column_name = '(db_comment)'";        $com_rs = PMA_query_as_controluser($com_qry, true, PMA_DBI_QUERY_STORE);        if ($com_rs && PMA_DBI_num_rows($com_rs) > 0) {            $row = PMA_DBI_fetch_assoc($com_rs);            $comment = $row['comment'];        }        PMA_DBI_free_result($com_rs);    }    return $comment;} // end of the 'PMA_getDbComment()' function/** * Gets the comment for a db * * @access  public * * @return  string   comment */function PMA_getDbComments(){    $cfgRelation = PMA_getRelationsParam();    $comments = array();    if ($cfgRelation['commwork']) {        // pmadb internal db comment        $com_qry = "             SELECT `db_name`, `comment`               FROM " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['column_info']) . "              WHERE `column_name` = '(db_comment)'";        $com_rs = PMA_query_as_controluser($com_qry, true, PMA_DBI_QUERY_STORE);        if ($com_rs && PMA_DBI_num_rows($com_rs) > 0) {            while ($row = PMA_DBI_fetch_assoc($com_rs)) {                $comments[$row['db_name']] = $row['comment'];            }        }        PMA_DBI_free_result($com_rs);    }    return $comments;} // end of the 'PMA_getDbComments()' function/** * Set a database comment to a certain value. * * @param string $db      the name of the db * @param string $comment the value of the column * * @return  boolean  true, if comment-query was made. * * @access  public */function PMA_setDbComment($db, $comment = ''){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['commwork']) {        return false;    }    if (strlen($comment)) {        $upd_query = "             INSERT INTO                    " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['column_info']) . "                    (`db_name`, `table_name`, `column_name`, `comment`)             VALUES (                   '" . PMA_sqlAddSlashes($db) . "',                   '',                   '(db_comment)',                   '" . PMA_sqlAddSlashes($comment) . "')             ON DUPLICATE KEY UPDATE                `comment` = '" . PMA_sqlAddSlashes($comment) . "'";    } else {        $upd_query = '             DELETE FROM                    ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '              WHERE `db_name`     = \'' . PMA_sqlAddSlashes($db) . '\'                AND `table_name`  = \'\'                AND `column_name` = \'(db_comment)\'';    }    if (isset($upd_query)) {        return PMA_query_as_controluser($upd_query);    }    return false;} // end of 'PMA_setDbComment()' function/** * Set a SQL history entry * * @param string $db       the name of the db * @param string $table    the name of the table * @param string $username the username * @param string $sqlquery the sql query * * @return nothing * * @access  public */function PMA_setHistory($db, $table, $username, $sqlquery){    if (strlen($sqlquery) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {        return;    }    $cfgRelation = PMA_getRelationsParam();    if (! isset($_SESSION['sql_history'])) {        $_SESSION['sql_history'] = array();    }    $key = md5($sqlquery . $db . $table);    if (isset($_SESSION['sql_history'][$key])) {        unset($_SESSION['sql_history'][$key]);    }    $_SESSION['sql_history'][$key] = array(        'db' => $db,        'table' => $table,        'sqlquery' => $sqlquery,    );    if (count($_SESSION['sql_history']) > $GLOBALS['cfg']['QueryHistoryMax']) {        // history should not exceed a maximum count        array_shift($_SESSION['sql_history']);    }    if (! $cfgRelation['historywork'] || ! $GLOBALS['cfg']['QueryHistoryDB']) {        return;    }    PMA_query_as_controluser(        'INSERT INTO                ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '              (`username`,                `db`,                `table`,                `timevalue`,                `sqlquery`)        VALUES              (\'' . PMA_sqlAddSlashes($username) . '\',               \'' . PMA_sqlAddSlashes($db) . '\',               \'' . PMA_sqlAddSlashes($table) . '\',               NOW(),               \'' . PMA_sqlAddSlashes($sqlquery) . '\')'    );} // end of 'PMA_setHistory()' function/** * Gets a SQL history entry * * @param string $username the username * * @return  array    list of history items * * @access  public */function PMA_getHistory($username){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['historywork']) {        return false;    }    $hist_query = '         SELECT `db`,                `table`,                `sqlquery`           FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '          WHERE `username` = \'' . PMA_sqlAddSlashes($username) . '\'       ORDER BY `id` DESC';    return PMA_DBI_fetch_result($hist_query, null, null, $GLOBALS['controllink']);} // end of 'PMA_getHistory()' function/** * purges SQL history * * deletes entries that exceeds $cfg['QueryHistoryMax'], oldest first, for the * given user * * @param string $username the username * * @return nothing * * @access  public */function PMA_purgeHistory($username){    $cfgRelation = PMA_getRelationsParam();    if (! $GLOBALS['cfg']['QueryHistoryDB'] || ! $cfgRelation['historywork']) {        return;    }    if (! $cfgRelation['historywork']) {        return;    }    $search_query = '         SELECT `timevalue`           FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '          WHERE `username` = \'' . PMA_sqlAddSlashes($username) . '\'       ORDER BY `timevalue` DESC          LIMIT ' . $GLOBALS['cfg']['QueryHistoryMax'] . ', 1';    if ($max_time = PMA_DBI_fetch_value($search_query, 0, 0, $GLOBALS['controllink'])) {        PMA_query_as_controluser(            'DELETE FROM                    ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '              WHERE `username` = \'' . PMA_sqlAddSlashes($username) . '\'                AND `timevalue` <= \'' . $max_time . '\''        );    }} // end of 'PMA_purgeHistory()' function/** * Prepares the dropdown for one mode * * @param array  $foreign the keys and values for foreigns * @param string $data    the current data of the dropdown * @param string $mode    the needed mode * * @return  array   the <option value=""><option>s * * @access  protected */function PMA__foreignDropdownBuild($foreign, $data, $mode){    $reloptions = array();    // id-only is a special mode used when no foreign display column    // is available    if ($mode == 'id-content' || $mode == 'id-only') {        // sort for id-content        if ($GLOBALS['cfg']['NaturalOrder']) {            uksort($foreign, 'strnatcasecmp');        } else {            ksort($foreign);        }    } elseif ($mode == 'content-id') {        // sort for content-id        if ($GLOBALS['cfg']['NaturalOrder']) {            natcasesort($foreign);        } else {            asort($foreign);        }    }    foreach ($foreign as $key => $value) {        if (PMA_strlen($value) <= $GLOBALS['cfg']['LimitChars']) {            $vtitle = '';            $value  = htmlspecialchars($value);        } else {            $vtitle  = htmlspecialchars($value);            $value  = htmlspecialchars(substr($value, 0, $GLOBALS['cfg']['LimitChars']) . '...');        }        $reloption = '<option value="' . htmlspecialchars($key) . '"';        if ($vtitle != '') {            $reloption .= ' title="' . $vtitle . '"';        }        if ((string) $key == (string) $data) {            $reloption .= ' selected="selected"';        }        if ($mode == 'content-id') {            $reloptions[] = $reloption . '>' . $value . '&nbsp;-&nbsp;' . htmlspecialchars($key) .  '</option>';        } elseif ($mode == 'id-content') {            $reloptions[] = $reloption . '>' . htmlspecialchars($key) .  '&nbsp;-&nbsp;' . $value . '</option>';        } elseif ($mode == 'id-only') {            $reloptions[] = $reloption . '>' . htmlspecialchars($key) . '</option>';        }    } // end foreach    return $reloptions;} // end of 'PMA__foreignDropdownBuild' function/** * Outputs dropdown with values of foreign fields * * @param array  $disp_row        array of the displayed row * @param string $foreign_field   the foreign field * @param string $foreign_display the foreign field to display * @param string $data            the current data of the dropdown (field in row) * @param int    $max             maximum number of items in the dropdown * * @return  string   the <option value=""><option>s * * @access  public */function PMA_foreignDropdown($disp_row, $foreign_field, $foreign_display, $data,    $max = null){    if (null === $max) {        $max = $GLOBALS['cfg']['ForeignKeyMaxLimit'];    }    $foreign = array();    // collect the data    foreach ($disp_row as $relrow) {        $key   = $relrow[$foreign_field];        // if the display field has been defined for this foreign table        if ($foreign_display) {            $value  = $relrow[$foreign_display];        } else {            $value = '';        } // end if ($foreign_display)        $foreign[$key] = $value;    } // end foreach    // put the dropdown sections in correct order    $top = array();    $bottom = array();    if ($foreign_display) {        if (PMA_isValid($GLOBALS['cfg']['ForeignKeyDropdownOrder'], 'array')) {            if (PMA_isValid($GLOBALS['cfg']['ForeignKeyDropdownOrder'][0])) {                $top = PMA__foreignDropdownBuild(                    $foreign,                    $data,                    $GLOBALS['cfg']['ForeignKeyDropdownOrder'][0]                );            }            if (PMA_isValid($GLOBALS['cfg']['ForeignKeyDropdownOrder'][1])) {                $bottom = PMA__foreignDropdownBuild(                    $foreign,                    $data,                    $GLOBALS['cfg']['ForeignKeyDropdownOrder'][1]                );            }        } else {            $top = PMA__foreignDropdownBuild($foreign, $data, 'id-content');            $bottom = PMA__foreignDropdownBuild($foreign, $data, 'content-id');        }    } else {        $top = PMA__foreignDropdownBuild($foreign, $data, 'id-only');    }    // beginning of dropdown    $ret = '<option value="">&nbsp;</option>';    $top_count = count($top);    if ($max == -1 || $top_count < $max) {        $ret .= implode('', $top);        if ($foreign_display && $top_count > 0) {            // this empty option is to visually mark the beginning of the            // second series of values (bottom)            $ret .= '<option value="">&nbsp;</option>';        }    }    if ($foreign_display) {        $ret .= implode('', $bottom);    }    return $ret;} // end of 'PMA_foreignDropdown()' function/** * Gets foreign keys in preparation for a drop-down selector * * @param array  $foreigners     array of the foreign keys * @param string $field          the foreign field name * @param bool   $override_total whether to override the total * @param string $foreign_filter a possible filter * @param string $foreign_limit  a possible LIMIT clause * * @return  array    data about the foreign keys * * @access  public */function PMA_getForeignData($foreigners, $field, $override_total, $foreign_filter, $foreign_limit){    // we always show the foreign field in the drop-down; if a display    // field is defined, we show it besides the foreign field    $foreign_link = false;    if ($foreigners && isset($foreigners[$field])) {        $foreigner       = $foreigners[$field];        $foreign_db      = $foreigner['foreign_db'];        $foreign_table   = $foreigner['foreign_table'];        $foreign_field   = $foreigner['foreign_field'];        // Count number of rows in the foreign table. Currently we do        // not use a drop-down if more than 200 rows in the foreign table,        // for speed reasons and because we need a better interface for this.        //        // We could also do the SELECT anyway, with a LIMIT, and ensure that        // the current value of the field is one of the choices.        $the_total   = PMA_Table::countRecords($foreign_db, $foreign_table);        if ($override_total == true || $the_total < $GLOBALS['cfg']['ForeignKeyMaxLimit']) {            // foreign_display can be false if no display field defined:            $foreign_display = PMA_getDisplayField($foreign_db, $foreign_table);            $f_query_main = 'SELECT ' . PMA_backquote($foreign_field)                        . (($foreign_display == false) ? '' : ', ' . PMA_backquote($foreign_display));            $f_query_from = ' FROM ' . PMA_backquote($foreign_db) . '.' . PMA_backquote($foreign_table);            $f_query_filter = empty($foreign_filter) ? '' : ' WHERE ' . PMA_backquote($foreign_field)                            . ' LIKE "%' . PMA_sqlAddSlashes($foreign_filter, true) . '%"'                            . (($foreign_display == false) ? '' : ' OR ' . PMA_backquote($foreign_display)                                . ' LIKE "%' . PMA_sqlAddSlashes($foreign_filter, true) . '%"'                                );            $f_query_order = ($foreign_display == false) ? '' :' ORDER BY ' . PMA_backquote($foreign_table) . '.' . PMA_backquote($foreign_display);            $f_query_limit = isset($foreign_limit) ? $foreign_limit : '';            if (!empty($foreign_filter)) {                $res = PMA_DBI_query('SELECT COUNT(*)' . $f_query_from . $f_query_filter);                if ($res) {                    $the_total = PMA_DBI_fetch_value($res);                    @PMA_DBI_free_result($res);                } else {                    $the_total = 0;                }            }            $disp  = PMA_DBI_query($f_query_main . $f_query_from . $f_query_filter . $f_query_order . $f_query_limit);            if ($disp && PMA_DBI_num_rows($disp) > 0) {                // If a resultset has been created, pre-cache it in the $disp_row array                // This helps us from not needing to use mysql_data_seek by accessing a pre-cached                // PHP array. Usually those resultsets are not that big, so a performance hit should                // not be expected.                $disp_row = array();                while ($single_disp_row = @PMA_DBI_fetch_assoc($disp)) {                    $disp_row[] = $single_disp_row;                }                @PMA_DBI_free_result($disp);            }        } else {            $disp_row = null;            $foreign_link = true;        }    }  // end if $foreigners    $foreignData['foreign_link'] = $foreign_link;    $foreignData['the_total'] = isset($the_total) ? $the_total : null;    $foreignData['foreign_display'] = isset($foreign_display) ? $foreign_display : null;    $foreignData['disp_row'] = isset($disp_row) ? $disp_row : null;    $foreignData['foreign_field'] = isset($foreign_field) ? $foreign_field : null;    return $foreignData;} // end of 'PMA_getForeignData()' function/** * Finds all related tables * * @param string $from whether to go from master to foreign or vice versa * * @return  boolean  always true * * @global  array    $tab_left the list of tables that we still couldn't connect * @global  array    $tab_know the list of allready connected tables * @global  string   $fromclause * * @access  private */function PMA_getRelatives($from){    global $tab_left, $tab_know, $fromclause;    if ($from == 'master') {        $to    = 'foreign';    } else {        $to    = 'master';    }    $in_know = '(\'' . implode('\', \'', $tab_know) . '\')';    $in_left = '(\'' . implode('\', \'', $tab_left) . '\')';    $rel_query = 'SELECT *'               . '  FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db'])               .       '.' . PMA_backquote($GLOBALS['cfgRelation']['relation'])               . ' WHERE ' . $from . '_db = \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\''               . '   AND ' . $to   . '_db = \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\''               . '   AND ' . $from . '_table IN ' . $in_know               . '   AND ' . $to   . '_table IN ' . $in_left;    $relations = @PMA_DBI_query($rel_query, $GLOBALS['controllink']);    while ($row = PMA_DBI_fetch_assoc($relations)) {        $found_table                = $row[$to . '_table'];        if (isset($tab_left[$found_table])) {            $fromclause                .= "\n" . ' LEFT JOIN '                . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($row[$to . '_table']) . ' ON '                . PMA_backquote($row[$from . '_table']) . '.'                . PMA_backquote($row[$from . '_field']) . ' = '                . PMA_backquote($row[$to . '_table']) . '.'                . PMA_backquote($row[$to . '_field']) . ' ';            $tab_know[$found_table] = $found_table;            unset($tab_left[$found_table]);        }    } // end while    return true;} // end of the "PMA_getRelatives()" function/** * Rename a field in relation tables * * usually called after a field in a table was renamed in tbl_alter.php * * @param string $db       databse name * @param string $table    table name * @param string $field    old field name * @param string $new_name new field name * * @return nothing */function PMA_REL_renameField($db, $table, $field, $new_name){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['displaywork']) {        $table_query = 'UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                      . '   SET display_field = \'' . PMA_sqlAddSlashes($new_name) . '\''                      . ' WHERE db_name       = \'' . PMA_sqlAddSlashes($db) . '\''                      . '   AND table_name    = \'' . PMA_sqlAddSlashes($table) . '\''                      . '   AND display_field = \'' . PMA_sqlAddSlashes($field) . '\'';        PMA_query_as_controluser($table_query);    }    if ($cfgRelation['relwork']) {        $table_query = 'UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                      . '   SET master_field = \'' . PMA_sqlAddSlashes($new_name) . '\''                      . ' WHERE master_db    = \'' . PMA_sqlAddSlashes($db) . '\''                      . '   AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                      . '   AND master_field = \'' . PMA_sqlAddSlashes($field) . '\'';        PMA_query_as_controluser($table_query);        $table_query = 'UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                      . '   SET foreign_field = \'' . PMA_sqlAddSlashes($new_name) . '\''                      . ' WHERE foreign_db    = \'' . PMA_sqlAddSlashes($db) . '\''                      . '   AND foreign_table = \'' . PMA_sqlAddSlashes($table) . '\''                      . '   AND foreign_field = \'' . PMA_sqlAddSlashes($field) . '\'';        PMA_query_as_controluser($table_query);    } // end if relwork}/** * Create a PDF page * * @param string $newpage     name of the new PDF page * @param array  $cfgRelation * @param string $db          database name * * @return string   $pdf_page_number */function PMA_REL_create_page($newpage, $cfgRelation, $db){    if (! isset($newpage) || $newpage == '') {        $newpage = __('no description');    }    $ins_query   = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages'])                 . ' (db_name, page_descr)'                 . ' VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \'' . PMA_sqlAddSlashes($newpage) . '\')';    PMA_query_as_controluser($ins_query, false);    return PMA_DBI_insert_id(isset($GLOBALS['controllink']) ? $GLOBALS['controllink'] : '');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Main export hanling code * @package PhpMyAdmin *//** * Get the variables sent or posted to this script and a core script */require_once './libraries/common.inc.php';require_once './libraries/zip.lib.php';require_once './libraries/plugin_interface.lib.php';PMA_checkParameters(array('what', 'export_type'));// Scan plugins$export_list = PMA_getPlugins(    './libraries/export/',    array(        'export_type' => $export_type,        'single_table' => isset($single_table)));// Backward compatbility$type = $what;// Check export typeif (! isset($export_list[$type])) {    die(__('Bad type!'));}/** * valid compression methods */$compression_methods = array(    'zip',    'gzip',    'bzip2',);/** * init and variable checking */$compression = false;$onserver = false;$save_on_server = false;$buffer_needed = false;// Is it a quick or custom export?if ($_REQUEST['quick_or_custom'] == 'quick') {    $quick_export = true;} else {    $quick_export = false;}if ($_REQUEST['output_format'] == 'astext') {    $asfile = false;} else {    $asfile = true;    if (in_array($_REQUEST['compression'], $compression_methods)) {        $compression = $_REQUEST['compression'];        $buffer_needed = true;    }    if (($quick_export && !empty($_REQUEST['quick_export_onserver'])) || (!$quick_export && !empty($_REQUEST['onserver']))) {        if ($quick_export) {            $onserver = $_REQUEST['quick_export_onserver'];        } else {            $onserver = $_REQUEST['onserver'];        }        // Will we save dump on server?        $save_on_server = ! empty($cfg['SaveDir']) && $onserver;    }}// Does export require to be into file?if (isset($export_list[$type]['force_file']) && ! $asfile) {    $message = PMA_Message::error(__('Selected export type has to be saved in file!'));    include_once './libraries/header.inc.php';    if ($export_type == 'server') {        $active_page = 'server_export.php';        include './server_export.php';    } elseif ($export_type == 'database') {        $active_page = 'db_export.php';        include './db_export.php';    } else {        $active_page = 'tbl_export.php';        include './tbl_export.php';    }    exit();}// Generate error url and check for needed variablesif ($export_type == 'server') {    $err_url = 'server_export.php?' . PMA_generate_common_url();} elseif ($export_type == 'database' && strlen($db)) {    $err_url = 'db_export.php?' . PMA_generate_common_url($db);    // Check if we have something to export    if (isset($table_select)) {        $tables = $table_select;    } else {        $tables = array();    }} elseif ($export_type == 'table' && strlen($db) && strlen($table)) {    $err_url = 'tbl_export.php?' . PMA_generate_common_url($db, $table);} else {    die(__('Bad parameters!'));}// Get the functions specific to the export typerequire './libraries/export/' . PMA_securePath($type) . '.php';/** * Increase time limit for script execution and initializes some variables */@set_time_limit($cfg['ExecTimeLimit']);if (!empty($cfg['MemoryLimit'])) {    @ini_set('memory_limit', $cfg['MemoryLimit']);}// Start with empty buffer$dump_buffer = '';$dump_buffer_len = 0;// We send fake headers to avoid browser timeout when buffering$time_start = time();/** * Output handler for all exports, if needed buffering, it stores data into * $dump_buffer, otherwise it prints thems out. * * @param string  $line  the insert statement * @return  bool    Whether output succeeded */function PMA_exportOutputHandler($line){    global $time_start, $dump_buffer, $dump_buffer_len, $save_filename;    // Kanji encoding convert feature    if ($GLOBALS['output_kanji_conversion']) {        $line = PMA_kanji_str_conv($line, $GLOBALS['knjenc'], isset($GLOBALS['xkana']) ? $GLOBALS['xkana'] : '');    }    // If we have to buffer data, we will perform everything at once at the end    if ($GLOBALS['buffer_needed']) {        $dump_buffer .= $line;        if ($GLOBALS['onfly_compression']) {            $dump_buffer_len += strlen($line);            if ($dump_buffer_len > $GLOBALS['memory_limit']) {                if ($GLOBALS['output_charset_conversion']) {                    $dump_buffer = PMA_convert_string('utf-8', $GLOBALS['charset_of_file'], $dump_buffer);                }                // as bzipped                if ($GLOBALS['compression'] == 'bzip2'  && @function_exists('bzcompress')) {                    $dump_buffer = bzcompress($dump_buffer);                } elseif ($GLOBALS['compression'] == 'gzip' && @function_exists('gzencode')) {                    // as a gzipped file                    // without the optional parameter level because it bug                    $dump_buffer = gzencode($dump_buffer);                }                if ($GLOBALS['save_on_server']) {                    $write_result = @fwrite($GLOBALS['file_handle'], $dump_buffer);                    if (!$write_result || ($write_result != strlen($dump_buffer))) {                        $GLOBALS['message'] = PMA_Message::error(__('Insufficient space to save the file %s.'));                        $GLOBALS['message']->addParam($save_filename);                        return false;                    }                } else {                    echo $dump_buffer;                }                $dump_buffer = '';                $dump_buffer_len = 0;            }        } else {            $time_now = time();            if ($time_start >= $time_now + 30) {                $time_start = $time_now;                header('X-pmaPing: Pong');            } // end if        }    } else {        if ($GLOBALS['asfile']) {            if ($GLOBALS['output_charset_conversion']) {                $line = PMA_convert_string('utf-8', $GLOBALS['charset_of_file'], $line);            }            if ($GLOBALS['save_on_server'] && strlen($line) > 0) {                $write_result = @fwrite($GLOBALS['file_handle'], $line);                if (!$write_result || ($write_result != strlen($line))) {                    $GLOBALS['message'] = PMA_Message::error(__('Insufficient space to save the file %s.'));                    $GLOBALS['message']->addParam($save_filename);                    return false;                }                $time_now = time();                if ($time_start >= $time_now + 30) {                    $time_start = $time_now;                    header('X-pmaPing: Pong');                } // end if            } else {                // We export as file - output normally                echo $line;            }        } else {            // We export as html - replace special chars            echo htmlspecialchars($line);        }    }    return true;} // end of the 'PMA_exportOutputHandler()' function// Defines the default <CR><LF> format. For SQL always use \n as MySQL wants this on all platforms.if ($what == 'sql') {    $crlf = "\n";} else {    $crlf = PMA_whichCrlf();}$output_kanji_conversion = function_exists('PMA_kanji_str_conv') && $type != 'xls';// Do we need to convert charset?$output_charset_conversion = $asfile && $GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE    && isset($charset_of_file) && $charset_of_file != 'utf-8'    && $type != 'xls';// Use on the fly compression?$onfly_compression = $GLOBALS['cfg']['CompressOnFly'] && ($compression == 'gzip' || $compression == 'bzip2');if ($onfly_compression) {    $memory_limit = trim(@ini_get('memory_limit'));    // 2 MB as default    if (empty($memory_limit)) {        $memory_limit = 2 * 1024 * 1024;    }    if (strtolower(substr($memory_limit, -1)) == 'm') {        $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024;    } elseif (strtolower(substr($memory_limit, -1)) == 'k') {        $memory_limit = (int)substr($memory_limit, 0, -1) * 1024;    } elseif (strtolower(substr($memory_limit, -1)) == 'g') {        $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024 * 1024;    } else {        $memory_limit = (int)$memory_limit;    }    // Some of memory is needed for other thins and as treshold.    // Nijel: During export I had allocated (see memory_get_usage function)    //        approx 1.2MB so this comes from that.    if ($memory_limit > 1500000) {        $memory_limit -= 1500000;    }    // Some memory is needed for compression, assume 1/3    $memory_limit /= 8;}// Generate filename and mime type if neededif ($asfile) {    $pma_uri_parts = parse_url($cfg['PmaAbsoluteUri']);    if ($export_type == 'server') {        if (isset($remember_template)) {            $GLOBALS['PMA_Config']->setUserValue('pma_server_filename_template',                'Export/file_template_server', $filename_template);        }    } elseif ($export_type == 'database') {        if (isset($remember_template)) {            $GLOBALS['PMA_Config']->setUserValue('pma_db_filename_template',                'Export/file_template_database', $filename_template);        }    } else {        if (isset($remember_template)) {            $GLOBALS['PMA_Config']->setUserValue('pma_table_filename_template',                'Export/file_template_table', $filename_template);        }    }    $filename = PMA_expandUserString($filename_template);    $filename = PMA_sanitize_filename($filename);    // Grab basic dump extension and mime type    // Check if the user already added extension; get the substring where the extension would be if it was included    $extension_start_pos = strlen($filename) - strlen($export_list[$type]['extension']) - 1;    $user_extension = substr($filename, $extension_start_pos, strlen($filename));    $required_extension = "." . $export_list[$type]['extension'];    if (strtolower($user_extension) != $required_extension) {        $filename  .= $required_extension;    }    $mime_type  = $export_list[$type]['mime_type'];    // If dump is going to be compressed, set correct mime_type and add    // compression to extension    if ($compression == 'bzip2') {        $filename  .= '.bz2';        $mime_type = 'application/x-bzip2';    } elseif ($compression == 'gzip') {        $filename  .= '.gz';        $mime_type = 'application/x-gzip';    } elseif ($compression == 'zip') {        $filename  .= '.zip';        $mime_type = 'application/zip';    }}// Open file on server if neededif ($save_on_server) {    $save_filename = PMA_userDir($cfg['SaveDir']) . preg_replace('@[/\\\\]@', '_', $filename);    unset($message);    if (file_exists($save_filename) && ((!$quick_export && empty($onserverover)) || ($quick_export && $_REQUEST['quick_export_onserverover'] != 'saveitover'))) {        $message = PMA_Message::error(__('File %s already exists on server, change filename or check overwrite option.'));        $message->addParam($save_filename);    } else {        if (is_file($save_filename) && !is_writable($save_filename)) {            $message = PMA_Message::error(__('The web server does not have permission to save the file %s.'));            $message->addParam($save_filename);        } else {            if (!$file_handle = @fopen($save_filename, 'w')) {                $message = PMA_Message::error(__('The web server does not have permission to save the file %s.'));                $message->addParam($save_filename);            }        }    }    if (isset($message)) {        include_once './libraries/header.inc.php';        if ($export_type == 'server') {            $active_page = 'server_export.php';            include './server_export.php';        } elseif ($export_type == 'database') {            $active_page = 'db_export.php';            include './db_export.php';        } else {            $active_page = 'tbl_export.php';            include './tbl_export.php';        }        exit();    }}/** * Send headers depending on whether the user chose to download a dump file * or not */if (!$save_on_server) {    if ($asfile) {        // Download        // (avoid rewriting data containing HTML with anchors and forms;        // this was reported to happen under Plesk)        @ini_set('url_rewriter.tags', '');        $filename = PMA_sanitize_filename($filename);        PMA_download_header($filename, $mime_type);    } else {        // HTML        if ($export_type == 'database') {            $num_tables = count($tables);            if ($num_tables == 0) {                $message = PMA_Message::error(__('No tables found in database.'));                include_once './libraries/header.inc.php';                $active_page = 'db_export.php';                include './db_export.php';                exit();            }        }        $backup_cfgServer = $cfg['Server'];        include_once './libraries/header.inc.php';        $cfg['Server'] = $backup_cfgServer;        unset($backup_cfgServer);        echo "\n" . '<div align="' . $cell_align_left . '">' . "\n";        //echo '    <pre>' . "\n";        /**         * Displays a back button with all the $_REQUEST data in the URL (store in a variable to also display after the textarea)         */         $back_button = '<p>[ <a href="';        if ($export_type == 'server') {           $back_button .= 'server_export.php?' . PMA_generate_common_url();         } elseif ($export_type == 'database') {            $back_button .= 'db_export.php?' . PMA_generate_common_url($db);        } else {            $back_button .= 'tbl_export.php?' . PMA_generate_common_url($db, $table);        }        // Convert the multiple select elements from an array to a string        if ($export_type == 'server' && isset($_REQUEST['db_select'])) {            $_REQUEST['db_select'] = implode(",", $_REQUEST['db_select']);        } elseif ($export_type == 'database' && isset($_REQUEST['table_select'])) {            $_REQUEST['table_select'] = implode(",", $_REQUEST['table_select']);        }        foreach ($_REQUEST as $name => $value) {            $back_button .= '&' . urlencode($name) . '=' . urlencode($value);        }        $back_button .= '&repopulate=1">Back</a> ]</p>';        echo $back_button;        echo '    <form name="nofunction">' . "\n"           // remove auto-select for now: there is no way to select           // only a part of the text; anyway, it should obey           // $cfg['TextareaAutoSelect']           //. '        <textarea name="sqldump" cols="50" rows="30" onclick="this.select();" id="textSQLDUMP" wrap="OFF">' . "\n";           . '        <textarea name="sqldump" cols="50" rows="30" id="textSQLDUMP" wrap="OFF">' . "\n";    } // end download}// Fake loop just to allow skip of remain of this code by break, I'd really// need exceptions here :-)do {    // Add possibly some comments to export    if (!PMA_exportHeader()) {        break;    }    // Will we need relation & co. setup?    $do_relation = isset($GLOBALS[$what . '_relation']);    $do_comments = isset($GLOBALS[$what . '_include_comments']);    $do_mime     = isset($GLOBALS[$what . '_mime']);    if ($do_relation || $do_comments || $do_mime) {        $cfgRelation = PMA_getRelationsParam();    }    if ($do_mime) {        include_once './libraries/transformations.lib.php';    }    // Include dates in export?    $do_dates   = isset($GLOBALS[$what . '_dates']);    /**     * Builds the dump     */    // Gets the number of tables if a dump of a database has been required    if ($export_type == 'server') {        if (isset($db_select)) {            $tmp_select = implode($db_select, '|');            $tmp_select = '|' . $tmp_select . '|';        }        // Walk over databases        foreach ($GLOBALS['pma']->databases as $current_db) {            if ((isset($tmp_select) && strpos(' ' . $tmp_select, '|' . $current_db . '|'))                || ! isset($tmp_select)) {                if (!PMA_exportDBHeader($current_db)) {                    break 2;                }                if (!PMA_exportDBCreate($current_db)) {                    break 2;                }                if (function_exists('PMA_exportRoutines') && strpos($GLOBALS['sql_structure_or_data'], 'structure') !== false && isset($GLOBALS['sql_procedure_function'])) {                    PMA_exportRoutines($current_db);                }                $tables = PMA_DBI_get_tables($current_db);                $views = array();                foreach ($tables as $table) {                    // if this is a view, collect it for later; views must be exported                    // after the tables                    $is_view = PMA_Table::isView($current_db, $table);                    if ($is_view) {                        $views[] = $table;                    }                    if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                        // for a view, export a stand-in definition of the table                        // to resolve view dependencies                        if (!PMA_exportStructure($current_db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, $is_view ? 'stand_in' : 'create_table', $export_type)) {                            break 3;                        }                    }                    // if this is a view or a merge table, don't export data                    if (($GLOBALS[$what . '_structure_or_data'] == 'data' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') && !($is_view || PMA_Table::isMerge($current_db, $table))) {                        $local_query  = 'SELECT * FROM ' . PMA_backquote($current_db) . '.' . PMA_backquote($table);                        if (!PMA_exportData($current_db, $table, $crlf, $err_url, $local_query)) {                            break 3;                        }                    }                    // now export the triggers (needs to be done after the data because                    // triggers can modify already imported tables)                    if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                        if (!PMA_exportStructure($current_db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'triggers', $export_type)) {                            break 2;                        }                    }                }                foreach ($views as $view) {                    // no data export for a view                    if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                        if (!PMA_exportStructure($current_db, $view, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'create_view', $export_type)) {                            break 3;                        }                    }                }                if (!PMA_exportDBFooter($current_db)) {                    break 2;                }            }        }    } elseif ($export_type == 'database') {        if (!PMA_exportDBHeader($db)) {            break;        }        if (function_exists('PMA_exportRoutines') && strpos($GLOBALS['sql_structure_or_data'], 'structure') !== false && isset($GLOBALS['sql_procedure_function'])) {            PMA_exportRoutines($db);        }        $i = 0;        $views = array();        // $tables contains the choices from the user (via $table_select)        foreach ($tables as $table) {            // if this is a view, collect it for later; views must be exported after            // the tables            $is_view = PMA_Table::isView($db, $table);            if ($is_view) {                $views[] = $table;            }            if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                // for a view, export a stand-in definition of the table                // to resolve view dependencies                if (!PMA_exportStructure($db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, $is_view ? 'stand_in' : 'create_table', $export_type)) {                    break 2;                }            }            // if this is a view or a merge table, don't export data            if (($GLOBALS[$what . '_structure_or_data'] == 'data' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') && !($is_view || PMA_Table::isMerge($db, $table))) {                $local_query  = 'SELECT * FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table);                if (!PMA_exportData($db, $table, $crlf, $err_url, $local_query)) {                    break 2;                }            }            // now export the triggers (needs to be done after the data because            // triggers can modify already imported tables)            if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                if (!PMA_exportStructure($db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'triggers', $export_type)) {                    break 2;                }            }        }        foreach ($views as $view) {            // no data export for a view            if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                if (!PMA_exportStructure($db, $view, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'create_view', $export_type)) {                    break 2;                }            }        }        if (!PMA_exportDBFooter($db)) {            break;        }    } else {        if (!PMA_exportDBHeader($db)) {            break;        }        // We export just one table        // $allrows comes from the form when "Dump all rows" has been selected        if ($allrows == '0' && $limit_to > 0 && $limit_from >= 0) {            $add_query  = ' LIMIT '                        . (($limit_from > 0) ? $limit_from . ', ' : '')                        . $limit_to;        } else {            $add_query  = '';        }        $is_view = PMA_Table::isView($db, $table);        if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {            if (!PMA_exportStructure($db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, $is_view ? 'create_view' : 'create_table', $export_type)) {                break;            }        }        // If this is an export of a single view, we have to export data;        // for example, a PDF report        // if it is a merge table, no data is exported        if (($GLOBALS[$what . '_structure_or_data'] == 'data' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') && ! PMA_Table::isMerge($db, $table)) {            if (!empty($sql_query)) {                // only preg_replace if needed                if (!empty($add_query)) {                    // remove trailing semicolon before adding a LIMIT                    $sql_query = preg_replace('%;\s*$%', '', $sql_query);                }                $local_query = $sql_query . $add_query;                PMA_DBI_select_db($db);            } else {                $local_query  = 'SELECT * FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table) . $add_query;            }            if (!PMA_exportData($db, $table, $crlf, $err_url, $local_query)) {                break;            }        }        // now export the triggers (needs to be done after the data because        // triggers can modify already imported tables)        if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {            if (!PMA_exportStructure($db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'triggers', $export_type)) {                break 2;            }        }        if (!PMA_exportDBFooter($db)) {            break;        }    }    if (!PMA_exportFooter()) {        break;    }} while (false);// End of fake loopif ($save_on_server && isset($message)) {    include_once './libraries/header.inc.php';    if ($export_type == 'server') {        $active_page = 'server_export.php';        include './server_export.php';    } elseif ($export_type == 'database') {        $active_page = 'db_export.php';        include './db_export.php';    } else {        $active_page = 'tbl_export.php';        include './tbl_export.php';    }    exit();}/** * Send the dump as a file... */if (!empty($asfile)) {    // Convert the charset if required.    if ($output_charset_conversion) {        $dump_buffer = PMA_convert_string('utf-8', $GLOBALS['charset_of_file'], $dump_buffer);    }    // Do the compression    // 1. as a zipped file    if ($compression == 'zip') {        if (@function_exists('gzcompress')) {            $zipfile = new zipfile();            $zipfile -> addFile($dump_buffer, substr($filename, 0, -4));            $dump_buffer = $zipfile -> file();        }    } elseif ($compression == 'bzip2') {        // 2. as a bzipped file        if (@function_exists('bzcompress')) {            $dump_buffer = bzcompress($dump_buffer);        }    } elseif ($compression == 'gzip') {        // 3. as a gzipped file        if (@function_exists('gzencode') && !@ini_get('zlib.output_compression')) {            // without the optional parameter level because it bug            $dump_buffer = gzencode($dump_buffer);        }    }    /* If ve saved on server, we have to close file now */    if ($save_on_server) {        $write_result = @fwrite($file_handle, $dump_buffer);        fclose($file_handle);        if (strlen($dump_buffer) !=0 && (!$write_result || ($write_result != strlen($dump_buffer)))) {            $message = new PMA_Message(__('Insufficient space to save the file %s.'), PMA_Message::ERROR, $save_filename);        } else {            $message = new PMA_Message(__('Dump has been saved to file %s.'), PMA_Message::SUCCESS, $save_filename);        }        include_once './libraries/header.inc.php';        if ($export_type == 'server') {            $active_page = 'server_export.php';            include_once './server_export.php';        } elseif ($export_type == 'database') {            $active_page = 'db_export.php';            include_once './db_export.php';        } else {            $active_page = 'tbl_export.php';            include_once './tbl_export.php';        }        exit();    } else {        echo $dump_buffer;    }} else {    /**     * Displays the dump...     *     * Close the html tags and add the footers if dump is displayed on screen     */    echo '</textarea>' . "\n"       . '    </form>' . "\n";    echo $back_button;    echo "\n";    echo '</div>' . "\n";    echo "\n";?><script type="text/javascript">//<![CDATA[    var bodyWidth=null; var bodyHeight=null;    if (document.getElementById('textSQLDUMP')) {        bodyWidth  = self.innerWidth;        bodyHeight = self.innerHeight;        if (!bodyWidth && !bodyHeight) {            if (document.compatMode && document.compatMode == "BackCompat") {                bodyWidth  = document.body.clientWidth;                bodyHeight = document.body.clientHeight;            } else if (document.compatMode && document.compatMode == "CSS1Compat") {                bodyWidth  = document.documentElement.clientWidth;                bodyHeight = document.documentElement.clientHeight;            }        }        document.getElementById('textSQLDUMP').style.width=(bodyWidth-50) + 'px';        document.getElementById('textSQLDUMP').style.height=(bodyHeight-100) + 'px';    }//]]></script><?php    include './libraries/footer.inc.php';} // end if?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays a form for editing ENUM and SET values with more * space (as an alternative to doing it in tbl_alter.php). * This form is only for users with JavaScript disabled, * users with JavaScript enabled will see a jQuery dialog. * * @package PhpMyAdmin */require_once './libraries/common.inc.php';require_once './libraries/header_http.inc.php';require_once './libraries/header_meta_style.inc.php';?></head><body>    <form action="enum_editor.php" method="get">        <?php echo PMA_generate_common_hidden_inputs(); ?>        <input type="hidden" name="field" value="<?php echo htmlspecialchars($_GET['field']); ?>" />        <fieldset class="enum_editor_no_js">        <legend><?php echo __('ENUM/SET editor'); ?></legend>        <div class="enum_editor_no_js">            <h3>            <?php                if (empty($_GET['field'])) {                    echo __('Values for a new column');                } else {                    printf(__('Values for column %s'), '"' . htmlspecialchars($_GET['field']) . '"');                }            ?>            </h3>            <p><?php echo PMA_getImage('s_info.png') . __('Enter each value in a separate field'); ?></p>            <table id="values">            <?php                // Get the enum values                $values = array();                // If the values are in an array                if (isset($_GET['values']) && is_array($_GET['values'])) {                     // then this page was called from itself via the "Add a value", "Drop" or "Go" buttons                    $values = $_GET['values'];                    foreach ($values as $key => $value) {                        $values[$key] = htmlentities($value);                    }                    // If the values are in a string                } elseif (isset($_GET['values']) && is_string($_GET['values'])) {                    // then this page was called via a link from some external page                    $values_string = htmlentities($_GET['values']);                    // There is a JS port of the below parser in functions.js                    // If you are fixing something here,                    // you need to also update the JS port.                    $values = array();                    $in_string = false;                    $buffer = '';                    for ($i=0; $i<strlen($values_string); $i++) {                        $curr = $values_string[$i];                        $next = $i == strlen($values_string)-1 ? '' : $values_string[$i+1];                        if (! $in_string && $curr == "'") {                            $in_string = true;                        } else if ($in_string && $curr == "\\" && $next == "\\") {                            $buffer .= "&#92;";                            $i++;                        } else if ($in_string && $next == "'" && ($curr == "'" || $curr == "\\")) {                            $buffer .= "&#39;";                            $i++;                        } else if ($in_string && $curr == "'") {                            $in_string = false;                            $values[] = $buffer;                            $buffer = '';                        } else if ($in_string) {                             $buffer .= $curr;                        }                    }                    if (strlen($buffer) > 0) {                        // The leftovers in the buffer are the last value (if any)                        $values[] = $buffer;                    }                }                // Escape double quotes                foreach ($values as $key => $value) {                    $values[$key] = str_replace('"', "&quote;", $value);                }                // If there are no values, maybe the user is about to make a                // new list so we add a few for him/her to get started with.                if (! count($values)                    || (count($values) == 1 && strlen($values[0]) == 0)                ) {                    array_push($values, '', '', '');                }                // Add an empty value, if there was a request to do so                if (! empty($_GET['add_field'])) {                    $values[] = '';                }                // Remove a value, given a valid index, from the list                // of values, if there was a request to do so.                if (isset($_GET['drop']) && is_array($_GET['drop'])) {                    foreach ($_GET['drop'] as $index => $value) {                        if ((int)$index == $index                            && $index > 0                            && $index <= count($values)                        ) {                            unset($values[$index]);                        }                    }                }                // Display the values in text fields                $field_counter = 0;                foreach ($values as $value) {                    $field_counter++;                    echo sprintf(                        '<tr><td><input class="text" type="text" size="30" value="%s" name="values[' . $field_counter . ']" />' . "\n",                        $value                    );                    echo '</td><td>';                    echo '<input class="drop" type="submit" value="' . __('Drop') . '" name="drop[' . $field_counter . ']" />' . "\n";                    echo '</td></tr>' . "\n";                }            ?>                <tr><td>                    <input type="submit" class="submit" value="<?php echo __('Go'); ?>" />                </td><td>                    <input type="submit" class="submit" name="add_field" value="<?php echo __('Add a value'); ?>" />                </td></tr>            </table>        </div>        <hr class='enum_editor_no_js' />        <div id="enum_editor_output">        <h3><?php echo __('Output'); ?></h3>        <p><?php echo PMA_getImage('s_info.png') . __('Copy and paste the joined values into the "Length/Values" field'); ?></p>            <?php                // Escape quotes and slashes for usage with MySQL                foreach ($values as $key => $value) {                    $values[$key]  = "'";                    $values[$key] .= str_replace(                        array("'", "\\", "&#39;", "&#92;"),                        array("''", '\\\\', "''", '\\\\'),                        $value                    );                    $values[$key] .= "'";                }                // Print out the values as a string            ?>            <textarea id="joined_values" cols="95" rows="5"><?php echo join(",", $values); ?></textarea>        </div>        </fieldset>    </form></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';require_once './libraries/ob.lib.php';PMA_outBufferPre();// Check parametersPMA_checkParameters(array('db', 'full_sql_query'));// For re-usability, moved http-headers// to a separate file. It can now be included by libraries/header.inc.php,// querywindow.php.require_once './libraries/header_http.inc.php';/** * Sends the beginning of the html page then returns to the calling script */// Defines the cell alignment values depending on text directionif ($text_dir == 'ltr') {    $cell_align_left  = 'left';    $cell_align_right = 'right';} else {    $cell_align_left  = 'right';    $cell_align_right = 'left';}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $available_languages[$lang][1]; ?>" lang="<?php echo $available_languages[$lang][1]; ?>" dir="<?php echo $text_dir; ?>"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><link rel="icon" href="./favicon.ico" type="image/x-icon" /><link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" /><title><?php echo __('SQL result'); ?> - phpMyAdmin <?php echo PMA_VERSION ?></title><link rel="stylesheet" type="text/css" href="phpmyadmin.css.php?<?php echo PMA_generate_common_url('', ''); ?>&amp;js_frame=print&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" /><?phprequire_once './libraries/header_scripts.inc.php';?></head><body bgcolor="#ffffff"><h1><?php echo __('SQL result'); ?></h1><p>    <strong><?php echo __('Host'); ?>:</strong> <?php echo $cfg['Server']['verbose'] ? $cfg['Server']['verbose'] : $cfg['Server']['host'] . ((!empty($cfg['Server']['port'])) ? ':' . $cfg['Server']['port'] : ''); ?><br />    <strong><?php echo __('Database'); ?>:</strong> <?php echo htmlspecialchars($db); ?><br />    <strong><?php echo __('Generation Time'); ?>:</strong> <?php echo PMA_localisedDate(); ?><br />    <strong><?php echo __('Generated by'); ?>:</strong> phpMyAdmin&nbsp;<?php echo PMA_VERSION; ?>&nbsp;/ MySQL&nbsp;<?php echo PMA_MYSQL_STR_VERSION; ?><br />    <strong><?php echo __('SQL query'); ?>:</strong> <?php echo htmlspecialchars($full_sql_query); ?>;    <?php if (isset($num_rows)) { ?><br />    <strong><?php echo __('Rows'); ?>:</strong> <?php echo $num_rows; ?>    <?php } ?></p><?php/** * Sets a variable to remember headers have been sent */$is_header_sent = true;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'import.js';/** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';$import_type = 'server';require './libraries/display_import.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/file_listing.php';require_once './libraries/plugin_interface.lib.php';require_once './libraries/display_import_ajax.lib.php';/* Scan for plugins */$import_list = PMA_getPlugins('./libraries/import/', $import_type);/* Fail if we didn't find any plugin */if (empty($import_list)) {    PMA_Message::error(__('Could not load import plugins, please check your installation!'))->display();    include './libraries/footer.inc.php';}?><iframe id="import_upload_iframe" name="import_upload_iframe" width="1" height="1" style="display: none;"></iframe><div id="import_form_status" style="display: none;"></div><div id="importmain">    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />    <script type="text/javascript">        //<![CDATA[        $(document).ready( function() {            // add event when user click on "Go" button            $('#buttonGo').bind('click', function() {                $('#upload_form_form').css("display", "none"); // hide form                $('#upload_form_status').css("display", "inline"); // show progress bar                $('#upload_form_status_info').css("display", "inline"); // - || -<?phpif ($_SESSION[$SESSION_KEY]["handler"]!="noplugin") {    ?>                $('#upload_form_status').html('<div class="upload_progress_bar_outer"><div id="status" class="upload_progress_bar_inner"></div></div>'); // add the progress bar                var finished = false;                var percent  = 0.0;                var total    = 0;                var complete = 0;                var perform_upload;                var periodical_upload;                var request_upload = [];                perform_upload = function () {                    new $.getJSON(                    'import_status.php?id=<?php echo $upload_id ; ?>&<?php echo PMA_generate_common_url(); ?>',                    {},                    function(response) {                        finished = response.finished;                        percent = response.percent;                        total = response.total;                        complete = response.complete;                          if (total==0 && complete==0 && percent==0) {                              $('#upload_form_status_info').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('The file being uploaded is probably larger than the maximum allowed size or this is a known bug in webkit based (Safari, Google Chrome, Arora etc.) browsers.'), false); ?>');                              $('#upload_form_status').css("display", "none");                          } else {                              $('#upload_form_status_info').html(' '+Math.round(percent)+'%, '+complete+'/'+total);                              $('#status').animate({width: Math.round(percent)*2+'px'},150);                          } // else                          if (finished==true) {                                    $('#importmain').css('display', 'none');                                    $('#import_form_status').css('display', 'inline');                                    $('#import_form_status').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('The file is being processed, please be patient.'), false); ?> ');                                    $('#import_form_status').load('import_status.php?message=true&<?php echo PMA_generate_common_url(); ?>'); // loads the message, either success or mysql error                                    <?php                                    // reload the left sidebar when the import is finished                                    $GLOBALS['reload']=true;                                    PMA_reloadNavigation(true);                                    ?>                          } // if finished                          else {                                window.setTimeout(perform_upload, 1000);                          }                      }                  );              }                window.setTimeout(perform_upload, 1000);    <?php} else { // no plugin available    ?>                        $('#upload_form_status_info').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('Please be patient, the file is being uploaded. Details about the upload are not available.'), false) . PMA_showDocu('faq2_9'); ?>');                        $('#upload_form_status').css("display", "none");    <?php} // else?>                    }); // onclick                }); // domready                document.write('<form action="import.php" method="post" enctype="multipart/form-data" name="import"<?php if ($_SESSION[$SESSION_KEY]["handler"]!="noplugin") echo ' target="import_upload_iframe"'; ?>>');                //]]>    </script>    <noscript>        <form action="import.php" method="post" enctype="multipart/form-data" name="import">    </noscript>    <input type="hidden" name="<?php echo $ID_KEY; ?>" value="<?php echo $upload_id ; ?>" />    <?php    if ($import_type == 'server') {        echo PMA_generate_common_hidden_inputs('', '', 1);    } elseif ($import_type == 'database') {        echo PMA_generate_common_hidden_inputs($db, '', 1);    } else {        echo PMA_generate_common_hidden_inputs($db, $table, 1);    }    echo '    <input type="hidden" name="import_type" value="' . $import_type . '" />'."\n";    ?>    <div class="exportoptions" id="header">        <h2>            <?php echo PMA_getImage('b_import.png', __('Import')); ?>            <?php            if ($import_type == 'server') {                echo __('Importing into the current server');            } elseif ($import_type == 'database') {                printf(__('Importing into the database "%s"'), htmlspecialchars($db));            } else {                printf(__('Importing into the table "%s"'), htmlspecialchars($table));            }?>        </h2>    </div>    <div class="importoptions">        <h3><?php echo __('File to Import:'); ?></h3>        <?php        // zip, gzip and bzip2 encode features        $compressions = array();        if ($cfg['GZipDump'] && @function_exists('gzopen')) {            $compressions[] = 'gzip';        }        if ($cfg['BZipDump'] && @function_exists('bzopen')) {            $compressions[] = 'bzip2';        }        if ($cfg['ZipDump'] && @function_exists('zip_open')) {            $compressions[] = 'zip';        }        // We don't have show anything about compression, when no supported        if ($compressions != array()) {            echo '<div class="formelementrow" id="compression_info">';            printf(__('File may be compressed (%s) or uncompressed.'), implode(", ", $compressions));            echo '<br />';            echo __('A compressed file\'s name must end in <b>.[format].[compression]</b>. Example: <b>.sql.zip</b>');            echo '</div>';        }?>        <div class="formelementrow" id="upload_form">        <?php if ($GLOBALS['is_upload'] && !empty($cfg['UploadDir'])) { ?>            <ul>            <li>                <input type="radio" name="file_location" id="radio_import_file" />                <?php PMA_browseUploadFile($max_upload_size); ?>            </li>            <li>                <input type="radio" name="file_location" id="radio_local_import_file" />                <?php PMA_selectUploadFile($import_list, $cfg['UploadDir']); ?>            </li>            </ul>        <?php } else if ($GLOBALS['is_upload']) {            $uid = uniqid("");            PMA_browseUploadFile($max_upload_size);        } else if (!$GLOBALS['is_upload']) {            PMA_Message::notice(__('File uploads are not allowed on this server.'))->display();        } else if (!empty($cfg['UploadDir'])) {            PMA_selectUploadFile($import_list, $cfg['UploadDir']);        } // end if (web-server upload directory)        ?>        </div>       <div class="formelementrow" id="charaset_of_file">        <?php // charset of file        if ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE) {            echo '<label for="charset_of_file">' . __('Character set of the file:') . '</label>';            reset($cfg['AvailableCharsets']);            echo '<select id="charset_of_file" name="charset_of_file" size="1">';            foreach ($cfg['AvailableCharsets'] as $temp_charset) {                echo '<option value="' . htmlentities($temp_charset) .  '"';                if ((empty($cfg['Import']['charset']) && $temp_charset == 'utf-8')                        || $temp_charset == $cfg['Import']['charset']) {                    echo ' selected="selected"';                }                echo '>' . htmlentities($temp_charset) . '</option>';            }            echo ' </select><br />';        } else {            echo '<label for="charset_of_file">' . __('Character set of the file:') . '</label>' . "\n";            echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_CHARSET, 'charset_of_file', 'charset_of_file', 'utf8', false);        } // end if (recoding)        ?>        </div>    </div>    <div class="importoptions">        <h3><?php echo __('Partial Import:'); ?></h3>        <?php        if (isset($timeout_passed) && $timeout_passed) {            echo '<div class="formelementrow">' . "\n";            echo '<input type="hidden" name="skip" value="' . $offset . '" />';            echo sprintf(__('Previous import timed out, after resubmitting will continue from position %d.'), $offset) . '';            echo '</div>' . "\n";        }        ?>        <div class="formelementrow">            <input type="checkbox" name="allow_interrupt" value="yes"                   id="checkbox_allow_interrupt" <?php echo PMA_pluginCheckboxCheck('Import', 'allow_interrupt'); ?>/>            <label for="checkbox_allow_interrupt"><?php echo __('Allow the interruption of an import in case the script detects it is close to the PHP timeout limit. <i>(This might be good way to import large files, however it can break transactions.)</i>'); ?></label><br />        </div>        <?php        if (! (isset($timeout_passed) && $timeout_passed)) {            ?>        <div class="formelementrow">            <label for="text_skip_queries"><?php echo __('Number of rows to skip, starting from the first row:'); ?></label>            <input type="text" name="skip_queries" value="<?php echo PMA_pluginGetDefault('Import', 'skip_queries');?>" id="text_skip_queries" />        </div>            <?php        } else {            // If timeout has passed,            // do not show the Skip dialog to avoid the risk of someone            // entering a value here that would interfere with "skip"            ?>        <input type="hidden" name="skip_queries" value="<?php echo PMA_pluginGetDefault('Import', 'skip_queries');?>" id="text_skip_queries" />            <?php        }        ?>    </div>    <div class="importoptions">        <h3><?php echo __('Format:'); ?></h3>        <?php echo PMA_pluginGetChoice('Import', 'format', $import_list); ?>        <div id="import_notification"></div>    </div>    <div class="importoptions" id="format_specific_opts">        <h3><?php echo __('Format-Specific Options:'); ?></h3>        <p class="no_js_msg" id="scroll_to_options_msg">Scroll down to fill in the options for the selected format and ignore the options for other formats.</p>        <?php echo PMA_pluginGetOptions('Import', $import_list); ?>    </div>        <div class="clearfloat"></div>    </div>    <?php    // Encoding setting form appended by Y.Kawada    if (function_exists('PMA_set_enc_form')) { ?>        <div class="importoptions" id="kanji_encoding">            <h3><?php echo __('Encoding Conversion:'); ?></h3>            <?php echo PMA_set_enc_form('            '); ?>        </div>    <?php }    echo "\n";    ?>    <div class="importoptions" id="submit">        <input type="submit" value="<?php echo __('Go'); ?>" id="buttonGo" />    </div></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * session handling * * @todo    add failover or warn if sessions are not configured properly * @todo    add an option to use mm-module for session handler * @see     http://www.php.net/session * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// verify if PHP supports session, die if it does notif (!@function_exists('session_name')) {    PMA_warnMissingExtension('session', true);} elseif (ini_get('session.auto_start') == true && session_name() != 'phpMyAdmin') {    // Do not delete the existing session, it might be used by other    // applications; instead just close it.    session_write_close();}// disable starting of sessions before all settings are done// does not work, besides how it is written in php manual//ini_set('session.auto_start', 0);// session cookie settingssession_set_cookie_params(0, $GLOBALS['PMA_Config']->getCookiePath(),    '', $GLOBALS['PMA_Config']->isHttps(), true);// cookies are safer (use @ini_set() in case this function is disabled)@ini_set('session.use_cookies', true);// optionally set session_save_path$path = $GLOBALS['PMA_Config']->get('SessionSavePath');if (!empty($path)) {    session_save_path($path);}// but not all user allow cookies@ini_set('session.use_only_cookies', false);// do not force transparent session ids, see bug #3398788//@ini_set('session.use_trans_sid', true);@ini_set('url_rewriter.tags',    'a=href,frame=src,input=src,form=fakeentry,fieldset=');//ini_set('arg_separator.output', '&amp;');// delete session/cookies when browser is closed@ini_set('session.cookie_lifetime', 0);// warn but dont work with bug@ini_set('session.bug_compat_42', false);@ini_set('session.bug_compat_warn', true);// use more secure session ids@ini_set('session.hash_function', 1);// some pages (e.g. stylesheet) may be cached on clients, but not in shared// proxy serverssession_cache_limiter('private');// start the session// on some servers (for example, sourceforge.net), we get a permission error// on the session data directory, so I add some "@"// See bug #1538132. This would block normal behavior on a cluster//ini_set('session.save_handler', 'files');$session_name = 'phpMyAdmin';@session_name($session_name);if (! isset($_COOKIE[$session_name])) {    // on first start of session we check for errors    // f.e. session dir cannot be accessed - session file not created    $orig_error_count = $GLOBALS['error_handler']->countErrors();    $r = session_start();    if ($r !== true || $orig_error_count != $GLOBALS['error_handler']->countErrors()) {        setcookie($session_name, '', 1);        /*         * Session initialization is done before selecting language, so we         * can not use translations here.         */        PMA_fatalError('Cannot start session without errors, please check errors given in your PHP and/or webserver log file and configure your PHP installation properly.');    }    unset($orig_error_count);} else {    session_start();}/** * Token which is used for authenticating access queries. * (we use "space PMA_token space" to prevent overwriting) */if (! isset($_SESSION[' PMA_token '])) {    $_SESSION[' PMA_token '] = md5(uniqid(rand(), true));}/** * tries to secure session from hijacking and fixation * should be called before login and after successfull login * (only required if sensitive information stored in session) * */function PMA_secureSession(){    // prevent session fixation and XSS    session_regenerate_id(true);    $_SESSION[' PMA_token '] = md5(uniqid(rand(), true));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface to the classic MySQL extension * * @package PhpMyAdmin-DBI-MySQL */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/logging.lib.php';/** * MySQL client API */if (! defined('PMA_MYSQL_CLIENT_API')) {    $client_api = explode('.', mysql_get_client_info());    define('PMA_MYSQL_CLIENT_API', (int)sprintf('%d%02d%02d', $client_api[0], $client_api[1], intval($client_api[2])));    unset($client_api);}/** * Helper function for connecting to the database server * * @param   string  $server * @param   string  $user * @param   string  $password * @param   int     $client_flags * @param   bool    $persistent * @return  mixed   false on error or a mysql connection resource on success */function PMA_DBI_real_connect($server, $user, $password, $client_flags, $persistent = false){    global $cfg;    if (empty($client_flags)) {        if ($cfg['PersistentConnections'] || $persistent) {            $link = @mysql_pconnect($server, $user, $password);        } else {            $link = @mysql_connect($server, $user, $password);        }    } else {        if ($cfg['PersistentConnections'] || $persistent) {            $link = @mysql_pconnect($server, $user, $password, $client_flags);        } else {            $link = @mysql_connect($server, $user, $password, false, $client_flags);        }    }    return $link;}/** * connects to the database server * * @param   string  $user           mysql user name * @param   string  $password       mysql user password * @param   bool    $is_controluser * @param   array   $server host/port/socket/persistent * @param   bool    $auxiliary_connection (when true, don't go back to login if connection fails) * @return  mixed   false on error or a mysqli object on success */function PMA_DBI_connect($user, $password, $is_controluser = false, $server = null, $auxiliary_connection = false){    global $cfg;    if ($server) {        $server_port = (empty($server['port']))            ? ''            : ':' . (int)$server['port'];        $server_socket = (empty($server['socket']))            ? ''            : ':' . $server['socket'];    } else {        $server_port   = (empty($cfg['Server']['port']))            ? ''            : ':' . (int)$cfg['Server']['port'];        $server_socket = (empty($cfg['Server']['socket']))            ? ''            : ':' . $cfg['Server']['socket'];    }    $client_flags = 0;    // always use CLIENT_LOCAL_FILES as defined in mysql_com.h    // for the case where the client library was not compiled    // with --enable-local-infile    $client_flags |= 128;    /* Optionally compress connection */    if (defined('MYSQL_CLIENT_COMPRESS') && $cfg['Server']['compress']) {        $client_flags |= MYSQL_CLIENT_COMPRESS;    }    /* Optionally enable SSL */    if (defined('MYSQL_CLIENT_SSL') && $cfg['Server']['ssl']) {        $client_flags |= MYSQL_CLIENT_SSL;    }    if (!$server) {        $link = PMA_DBI_real_connect($cfg['Server']['host'] . $server_port . $server_socket, $user, $password, empty($client_flags) ? null : $client_flags);      // Retry with empty password if we're allowed to        if (empty($link) && $cfg['Server']['nopassword'] && !$is_controluser) {            $link = PMA_DBI_real_connect($cfg['Server']['host'] . $server_port . $server_socket, $user, '', empty($client_flags) ? null : $client_flags);        }    } else {        if (!isset($server['host'])) {            $link = PMA_DBI_real_connect($server_socket, $user, $password, null);        } else {            $link = PMA_DBI_real_connect($server['host'] . $server_port . $server_socket, $user, $password, null);        }    }    if (empty($link)) {        if ($is_controluser) {            trigger_error(__('Connection for controluser as defined in your configuration failed.'), E_USER_WARNING);            return false;        }        // we could be calling PMA_DBI_connect() to connect to another        // server, for example in the Synchronize feature, so do not        // go back to main login if it fails        if (! $auxiliary_connection) {            PMA_log_user($user, 'mysql-denied');            PMA_auth_fails();        } else {            return false;        }    } // end if    if (! $server) {        PMA_DBI_postConnect($link, $is_controluser);    }    return $link;}/** * selects given database * * @param string    $dbname  name of db to select * @param resource  $link    mysql link resource * @return bool */function PMA_DBI_select_db($dbname, $link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_select_db($dbname, $link);}/** * runs a query and returns the result * * @param string    $query    query to run * @param resource  $link     mysql link resource * @param int       $options * @return mixed */function PMA_DBI_real_query($query, $link, $options){    if ($options == ($options | PMA_DBI_QUERY_STORE)) {        return mysql_query($query, $link);    } elseif ($options == ($options | PMA_DBI_QUERY_UNBUFFERED)) {        return mysql_unbuffered_query($query, $link);    } else {        return mysql_query($query, $link);    }}/** * returns array of rows with associative and numeric keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_array($result){    return mysql_fetch_array($result, MYSQL_BOTH);}/** * returns array of rows with associative keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_assoc($result){    return mysql_fetch_array($result, MYSQL_ASSOC);}/** * returns array of rows with numeric keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_row($result){    return mysql_fetch_array($result, MYSQL_NUM);}/** * Adjusts the result pointer to an arbitrary row in the result * * @param   $result * @param   $offset * @return  bool true on success, false on failure */function PMA_DBI_data_seek($result, $offset){    return mysql_data_seek($result, $offset);}/** * Frees memory associated with the result * * @param  resource  $result */function PMA_DBI_free_result($result){    if (is_resource($result) && get_resource_type($result) === 'mysql result') {        mysql_free_result($result);    }}/** * Check if there are any more query results from a multi query * * @return  bool         false */function PMA_DBI_more_results(){    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Prepare next result from multi_query * * @return  boo         false */function PMA_DBI_next_result(){    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Returns a string representing the type of connection used * * @param   resource  $link  mysql link * @return  string          type of connection used */function PMA_DBI_get_host_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_get_host_info($link);}/** * Returns the version of the MySQL protocol used * * @param   resource  $link  mysql link * @return  int         version of the MySQL protocol used */function PMA_DBI_get_proto_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_get_proto_info($link);}/** * returns a string that represents the client library version * * @return  string          MySQL client library version */function PMA_DBI_get_client_info(){    return mysql_get_client_info();}/** * returns last error message or false if no errors occured * * @param   resource  $link  mysql link * @return  string|bool  $error or false */function PMA_DBI_getError($link = null){    $GLOBALS['errno'] = 0;    /* Treat false same as null because of controllink */    if ($link === false) {        $link = null;    }    if (null === $link && isset($GLOBALS['userlink'])) {        $link =& $GLOBALS['userlink'];// Do not stop now. On the initial connection, we don't have a $link,// we don't have a $GLOBALS['userlink'], but we can catch the error code//    } else {//            return false;    }    if (null !== $link && false !== $link) {        $error_number = mysql_errno($link);        $error_message = mysql_error($link);    } else {        $error_number = mysql_errno();        $error_message = mysql_error();    }    if (0 == $error_number) {        return false;    }    // keep the error number for further check after the call to PMA_DBI_getError()    $GLOBALS['errno'] = $error_number;    return PMA_DBI_formatError($error_number, $error_message);}/** * returns the number of rows returned by last query * * @param   resource  $result * @return  string|int */function PMA_DBI_num_rows($result){    if (!is_bool($result)) {        return mysql_num_rows($result);    } else {        return 0;    }}/** * returns last inserted auto_increment id for given $link or $GLOBALS['userlink'] * * @param   resource  $link  the mysql object * @return  string|int */function PMA_DBI_insert_id($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    // If the primary key is BIGINT we get an incorrect result    // (sometimes negative, sometimes positive)    // and in the present function we don't know if the PK is BIGINT    // so better play safe and use LAST_INSERT_ID()    //    return PMA_DBI_fetch_value('SELECT LAST_INSERT_ID();', 0, 0, $link);}/** * returns the number of rows affected by last query * * @param   resource  $link            the mysql object * @param   bool      $get_from_cache * @return  string|int */function PMA_DBI_affected_rows($link = null, $get_from_cache = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($get_from_cache) {        return $GLOBALS['cached_affected_rows'];    } else {        return mysql_affected_rows($link);    }}/** * returns metainfo for fields in $result * * @todo add missing keys like in mysqli_query (decimals) * @param   resource  $result * @return  array  meta info for fields in $result */function PMA_DBI_get_fields_meta($result){    $fields       = array();    $num_fields   = mysql_num_fields($result);    for ($i = 0; $i < $num_fields; $i++) {        $field = mysql_fetch_field($result, $i);        $field->flags = mysql_field_flags($result, $i);        $field->orgtable = mysql_field_table($result, $i);        $field->orgname = mysql_field_name($result, $i);        $fields[] = $field;    }    return $fields;}/** * return number of fields in given $result * * @param   resource  $result * @return  int  field count */function PMA_DBI_num_fields($result){    return mysql_num_fields($result);}/** * returns the length of the given field $i in $result * * @param   resource  $result * @param   int       $i       field * @return  int  length of field */function PMA_DBI_field_len($result, $i){    return mysql_field_len($result, $i);}/** * returns name of $i. field in $result * * @param   resource  $result * @param   int       $i       field * @return  string  name of $i. field in $result */function PMA_DBI_field_name($result, $i){    return mysql_field_name($result, $i);}/** * returns concatenated string of human readable field flags * * @param   resource  $result * @param   int       $i       field * @return  string  field flags */function PMA_DBI_field_flags($result, $i){    return mysql_field_flags($result, $i);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays the pma logo, links and db and server selection in left frame * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (empty($query_url)) {    // avoid putting here $db because it could display a db name    // to which the next user does not have access    $query_url = PMA_generate_common_url();}// display Logo, depending on $GLOBALS['cfg']['LeftDisplayLogo']if ($GLOBALS['cfg']['LeftDisplayLogo']) {    $logo = 'phpMyAdmin';    if (@file_exists($GLOBALS['pmaThemeImage'] . 'logo_left.png')) {        $logo = '<img src="' . $GLOBALS['pmaThemeImage'] . 'logo_left.png" '            .'alt="' . $logo . '" id="imgpmalogo" />';    } elseif (@file_exists($GLOBALS['pmaThemeImage'] . 'pma_logo2.png')) {        $logo = '<img src="' . $GLOBALS['pmaThemeImage'] . 'pma_logo2.png" '            .'alt="' . $logo . '" id="imgpmalogo" />';    }    echo '<div id="pmalogo">' . "\n";    if ($GLOBALS['cfg']['LeftLogoLink']) {        echo '<a href="' . htmlspecialchars($GLOBALS['cfg']['LeftLogoLink']);        switch ($GLOBALS['cfg']['LeftLogoLinkWindow']) {            case 'new':                echo '" target="_blank"';                break;            case 'main':                // do not add our parameters for an external link                if (substr(strtolower($GLOBALS['cfg']['LeftLogoLink']), 0, 4) !== '://') {                    echo '?' . $query_url . '" target="frame_content"';                } else {                    echo '" target="_blank"';                }        }        echo '>' . $logo . '</a>' . "\n";    } else {        echo $logo . "\n";    }    echo '</div>' . "\n";} // end of display logo?><div id="leftframelinks"><?php    echo '<a href="main.php?' . $query_url . '"'        .' title="' . __('Home') . '">'        .($GLOBALS['cfg']['MainPageIconic']            ? PMA_getImage('b_home.png', __('Home'))            : __('Home'))        .'</a>' . "\n";    // if we have chosen server    if ($server != 0) {        // Logout for advanced authentication        if ($GLOBALS['cfg']['Server']['auth_type'] != 'config') {            echo ($GLOBALS['cfg']['MainPageIconic'] ? '' : ' - ');            echo '<a href="index.php?' . $query_url . '&amp;old_usr='                .urlencode($PHP_AUTH_USER) . '" target="_parent"'                .' title="' . __('Log out') . '" >'                .($GLOBALS['cfg']['MainPageIconic']                    ? PMA_getImage('s_loggoff.png', __('Log out'))                    : __('Log out'))                .'</a>' . "\n";        } // end if ($GLOBALS['cfg']['Server']['auth_type'] != 'config'        $anchor = 'querywindow.php?' . PMA_generate_common_url($db, $table);        if ($GLOBALS['cfg']['MainPageIconic']) {            $query_frame_link_text = PMA_getImage('b_selboard.png', __('Query window'));        } else {            echo '<br />' . "\n";            $query_frame_link_text = __('Query window');        }        echo '<a href="' . $anchor . '&amp;no_js=true"'            .' title="' . __('Query window') . '"';        echo ' onclick="if (window.parent.open_querywindow()) return false;"';        echo '>' . $query_frame_link_text . '</a>' . "\n";    } // end if ($server != 0)    echo '    <a href="Documentation.html" target="documentation"'        .' title="' . __('phpMyAdmin documentation') . '" >';    if ($GLOBALS['cfg']['MainPageIconic']) {        echo PMA_getImage('b_docs.png', __('phpMyAdmin documentation'));    } else {        echo '<br />' . __('phpMyAdmin documentation');    }    echo '</a>';    $documentation_link = PMA_showMySQLDocu('', '', true);    if ($GLOBALS['cfg']['MainPageIconic']) {        echo $documentation_link . "\n";    } else {        preg_match('/<a[^>]*>/', $documentation_link, $matches);        $link = $matches[0];        echo substr($link, 0, strlen($link) - 1) . ' title="' . __('Documentation') . '" >'            . '<br />' . __('Documentation') . '</a>';    }    $params = array('uniqid' => uniqid());    if (!empty($GLOBALS['db'])) {        $params['db'] = $GLOBALS['db'];    }    echo '<a href="navigation.php?' . PMA_generate_common_url($params)        . '" title="' . __('Reload navigation frame') . '" target="frame_navigation">';    if ($GLOBALS['cfg']['MainPageIconic']) {        echo PMA_getImage('s_reload', __('Reload navigation frame'));    } else {        echo '<br />' . __('Reload navigation frame');    }    echo '</a>';echo '</div>' . "\n";/** * Displays the MySQL servers choice form */if ($GLOBALS['cfg']['LeftDisplayServers'] && (count($GLOBALS['cfg']['Servers']) > 1 || $server == 0 && count($GLOBALS['cfg']['Servers']) == 1)) {    echo '<div id="serverinfo">';    include './libraries/select_server.lib.php';    PMA_select_server(true, true);    echo '</div><br />';} // end if LeftDisplayServers?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * library for displaying table with results from all sort of select queries * * @package PhpMyAdmin *//** * */require_once './libraries/Index.class.php';/** * Defines the display mode to use for the results of a SQL query * * It uses a synthetic string that contains all the required informations. * In this string: *   - the first two characters stand for the action to do while *     clicking on the "edit" link (e.g. 'ur' for update a row, 'nn' for no *     edit link...); *   - the next two characters stand for the action to do while *     clicking on the "delete" link (e.g. 'kp' for kill a process, 'nn' for *     no delete link...); *   - the next characters are boolean values (1/0) and respectively stand *     for sorting links, navigation bar, "insert a new row" link, the *     bookmark feature, the expand/collapse text/blob fields button and *     the "display printable view" option. *     Of course '0'/'1' means the feature won't/will be enabled. * * @param string  &$the_disp_mode the synthetic value for display_mode (see a few *                                lines above for explanations) * @param integer &$the_total     the total number of rows returned by the SQL query *                                without any programmatically appended "LIMIT" clause *                                (just a copy of $unlim_num_rows if it exists, else *                                computed inside this function) * * @return  array    an array with explicit indexes for all the display *                   elements * * @global  string   the database name * @global  string   the table name * @global  integer  the total number of rows returned by the SQL query *                   without any programmatically appended "LIMIT" clause * @global  array    the properties of the fields returned by the query * @global  string   the URL to return to in case of error in a SQL *                   statement * * @access  private * * @see     PMA_displayTable() */function PMA_setDisplayMode(&$the_disp_mode, &$the_total){    global $db, $table;    global $unlim_num_rows, $fields_meta;    global $err_url;    // 1. Initializes the $do_display array    $do_display              = array();    $do_display['edit_lnk']  = $the_disp_mode[0] . $the_disp_mode[1];    $do_display['del_lnk']   = $the_disp_mode[2] . $the_disp_mode[3];    $do_display['sort_lnk']  = (string) $the_disp_mode[4];    $do_display['nav_bar']   = (string) $the_disp_mode[5];    $do_display['ins_row']   = (string) $the_disp_mode[6];    $do_display['bkm_form']  = (string) $the_disp_mode[7];    $do_display['text_btn']  = (string) $the_disp_mode[8];    $do_display['pview_lnk'] = (string) $the_disp_mode[9];    // 2. Display mode is not "false for all elements" -> updates the    // display mode    if ($the_disp_mode != 'nnnn000000') {        if (isset($GLOBALS['printview']) && $GLOBALS['printview'] == '1') {            // 2.0 Print view -> set all elements to false!            $do_display['edit_lnk']  = 'nn'; // no edit link            $do_display['del_lnk']   = 'nn'; // no delete link            $do_display['sort_lnk']  = (string) '0';            $do_display['nav_bar']   = (string) '0';            $do_display['ins_row']   = (string) '0';            $do_display['bkm_form']  = (string) '0';            $do_display['text_btn']  = (string) '0';            $do_display['pview_lnk'] = (string) '0';        } elseif ($GLOBALS['is_count'] || $GLOBALS['is_analyse']            || $GLOBALS['is_maint'] || $GLOBALS['is_explain']            ) {            // 2.1 Statement is a "SELECT COUNT", a            //     "CHECK/ANALYZE/REPAIR/OPTIMIZE", an "EXPLAIN" one or            //     contains a "PROC ANALYSE" part            $do_display['edit_lnk']  = 'nn'; // no edit link            $do_display['del_lnk']   = 'nn'; // no delete link            $do_display['sort_lnk']  = (string) '0';            $do_display['nav_bar']   = (string) '0';            $do_display['ins_row']   = (string) '0';            $do_display['bkm_form']  = (string) '1';            if ($GLOBALS['is_maint']) {                $do_display['text_btn']  = (string) '1';            } else {                $do_display['text_btn']  = (string) '0';            }            $do_display['pview_lnk'] = (string) '1';        } elseif ($GLOBALS['is_show']) {            // 2.2 Statement is a "SHOW..."            /**             * 2.2.1             * @todo defines edit/delete links depending on show statement             */            $tmp = preg_match('@^SHOW[[:space:]]+(VARIABLES|(FULL[[:space:]]+)?PROCESSLIST|STATUS|TABLE|GRANTS|CREATE|LOGS|DATABASES|FIELDS)@i', $GLOBALS['sql_query'], $which);            if (isset($which[1]) && strpos(' ' . strtoupper($which[1]), 'PROCESSLIST') > 0) {                $do_display['edit_lnk'] = 'nn'; // no edit link                $do_display['del_lnk']  = 'kp'; // "kill process" type edit link            } else {                // Default case -> no links                $do_display['edit_lnk'] = 'nn'; // no edit link                $do_display['del_lnk']  = 'nn'; // no delete link            }            // 2.2.2 Other settings            $do_display['sort_lnk']  = (string) '0';            $do_display['nav_bar']   = (string) '0';            $do_display['ins_row']   = (string) '0';            $do_display['bkm_form']  = (string) '1';            $do_display['text_btn']  = (string) '1';            $do_display['pview_lnk'] = (string) '1';        } else {            // 2.3 Other statements (ie "SELECT" ones) -> updates            //     $do_display['edit_lnk'], $do_display['del_lnk'] and            //     $do_display['text_btn'] (keeps other default values)            $prev_table = $fields_meta[0]->table;            $do_display['text_btn']  = (string) '1';            for ($i = 0; $i < $GLOBALS['fields_cnt']; $i++) {                $is_link = ($do_display['edit_lnk'] != 'nn'                            || $do_display['del_lnk'] != 'nn'                            || $do_display['sort_lnk'] != '0'                            || $do_display['ins_row'] != '0');                // 2.3.2 Displays edit/delete/sort/insert links?                if ($is_link                    && ($fields_meta[$i]->table == '' || $fields_meta[$i]->table != $prev_table)                ) {                    $do_display['edit_lnk'] = 'nn'; // don't display links                    $do_display['del_lnk']  = 'nn';                    /**                     * @todo May be problematic with same fields names in two joined table.                     */                    // $do_display['sort_lnk'] = (string) '0';                    $do_display['ins_row']  = (string) '0';                    if ($do_display['text_btn'] == '1') {                        break;                    }                } // end if (2.3.2)                // 2.3.3 Always display print view link                $do_display['pview_lnk']    = (string) '1';                $prev_table = $fields_meta[$i]->table;            } // end for        } // end if..elseif...else (2.1 -> 2.3)    } // end if (2)    // 3. Gets the total number of rows if it is unknown    if (isset($unlim_num_rows) && $unlim_num_rows != '') {        $the_total = $unlim_num_rows;    } elseif (($do_display['nav_bar'] == '1' || $do_display['sort_lnk'] == '1')             && (strlen($db) && !empty($table))) {        $the_total   = PMA_Table::countRecords($db, $table);    }    // 4. If navigation bar or sorting fields names URLs should be    //    displayed but there is only one row, change these settings to    //    false    if ($do_display['nav_bar'] == '1' || $do_display['sort_lnk'] == '1') {        // - Do not display sort links if less than 2 rows.        // - For a VIEW we (probably) did not count the number of rows        //   so don't test this number here, it would remove the possibility        //   of sorting VIEW results.        if (isset($unlim_num_rows) && $unlim_num_rows < 2 && ! PMA_Table::isView($db, $table)) {            // force display of navbar for vertical/horizontal display-choice.            // $do_display['nav_bar']  = (string) '0';            $do_display['sort_lnk'] = (string) '0';        }    } // end if (3)    // 5. Updates the synthetic var    $the_disp_mode = join('', $do_display);    return $do_display;} // end of the 'PMA_setDisplayMode()' function/** * Return true if we are executing a query in the form of * "SELECT * FROM <a table> ..." * * @return boolean */function PMA_isSelect(){    // global variables set from sql.php    global $is_count, $is_export, $is_func, $is_analyse;    global $analyzed_sql;    return ! ($is_count || $is_export || $is_func || $is_analyse)        && count($analyzed_sql[0]['select_expr']) == 0        && isset($analyzed_sql[0]['queryflags']['select_from'])        && count($analyzed_sql[0]['table_ref']) == 1;}/** * Displays a navigation button * * @param string  $caption            iconic caption for button * @param string  $title              text for button * @param integer $pos                position for next query * @param string  $html_sql_query     query ready for display * @param string  $onsubmit           optional onsubmit clause * @param string  $input_for_real_end optional hidden field for special treatment * @param string  $onclick            optional onclick clause * * @return nothing * * @global string   $db             the database name * @global string   $table          the table name * @global string   $goto           the URL to go back in case of errors * * @access private * * @see     PMA_displayTableNavigation() */function PMA_displayTableNavigationOneButton($caption, $title, $pos, $html_sql_query, $onsubmit = '', $input_for_real_end = '', $onclick = ''){    global $db, $table, $goto;    $caption_output = '';    // for true or 'both'    if ($GLOBALS['cfg']['NavigationBarIconic']) {        $caption_output .= $caption;    }    // for false or 'both'    if (false === $GLOBALS['cfg']['NavigationBarIconic'] || 'both' === $GLOBALS['cfg']['NavigationBarIconic']) {        $caption_output .= '&nbsp;' . $title;    }    $title_output = ' title="' . $title . '"';        ?><td>    <form action="sql.php" method="post" <?php echo $onsubmit; ?>>        <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>        <input type="hidden" name="sql_query" value="<?php echo $html_sql_query; ?>" />        <input type="hidden" name="pos" value="<?php echo $pos; ?>" />        <input type="hidden" name="goto" value="<?php echo $goto; ?>" />        <?php echo $input_for_real_end; ?>        <input type="submit" name="navig" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : '' ); ?> value="<?php echo $caption_output; ?>"<?php echo $title_output . $onclick; ?> />    </form></td><?php} // end function PMA_displayTableNavigationOneButton()/** * Displays a navigation bar to browse among the results of a SQL query * * @param integer $pos_next                  the offset for the "next" page * @param integer $pos_prev                  the offset for the "previous" page * @param string  $sql_query                 the URL-encoded query * @param string  $id_for_direction_dropdown the id for the direction dropdown * * @return nothing * * @global  string   $db             the database name * @global  string   $table          the table name * @global  string   $goto           the URL to go back in case of errors * @global  integer  $num_rows       the total number of rows returned by the *                                   SQL query * @global  integer  $unlim_num_rows the total number of rows returned by the *                                   SQL any programmatically appended "LIMIT" clause * @global  boolean  $is_innodb      whether its InnoDB or not * @global  array    $showtable      table definitions * * @access  private * * @see     PMA_displayTable() */function PMA_displayTableNavigation($pos_next, $pos_prev, $sql_query, $id_for_direction_dropdown){    global $db, $table, $goto;    global $num_rows, $unlim_num_rows;    global $is_innodb;    global $showtable;    // here, using htmlentities() would cause problems if the query    // contains accented characters    $html_sql_query = htmlspecialchars($sql_query);    /**     * @todo move this to a central place     * @todo for other future table types     */    $is_innodb = (isset($showtable['Type']) && $showtable['Type'] == 'InnoDB');    ?><!-- Navigation bar --><table border="0" cellpadding="0" cellspacing="0" class="navigation"><tr>    <td class="navigation_separator"></td>    <?php    // Move to the beginning or to the previous page    if ($_SESSION['tmp_user_values']['pos'] && $_SESSION['tmp_user_values']['max_rows'] != 'all') {        PMA_displayTableNavigationOneButton('&lt;&lt;', _pgettext('First page', 'Begin'), 0, $html_sql_query);        PMA_displayTableNavigationOneButton('&lt;', _pgettext('Previous page', 'Previous'), $pos_prev, $html_sql_query);    } // end move back    $nbTotalPage = 1;    //page redirection    // (unless we are showing all records)    if ('all' != $_SESSION['tmp_user_values']['max_rows']) { //if1        $pageNow = @floor($_SESSION['tmp_user_values']['pos'] / $_SESSION['tmp_user_values']['max_rows']) + 1;        $nbTotalPage = @ceil($unlim_num_rows / $_SESSION['tmp_user_values']['max_rows']);        if ($nbTotalPage > 1) { //if2       ?>   <td>        <?php            $_url_params = array(                'db'        => $db,                'table'     => $table,                'sql_query' => $sql_query,                'goto'      => $goto,            );            //<form> to keep the form alignment of button < and <<            // and also to know what to execute when the selector changes            echo '<form action="sql.php' . PMA_generate_common_url($_url_params). '" method="post">';            echo PMA_pageselector(                $_SESSION['tmp_user_values']['max_rows'],                $pageNow,                $nbTotalPage,                200,                5,                5,                20,                10            );        ?>        </form>    </td>        <?php        } //_if2    } //_if1    // Display the "Show all" button if allowed    if (($num_rows < $unlim_num_rows) && ($GLOBALS['cfg']['ShowAll'] || ($GLOBALS['cfg']['MaxRows'] * 5 >= $unlim_num_rows))) {        echo "\n";        ?>    <td>        <form action="sql.php" method="post">            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="sql_query" value="<?php echo $html_sql_query; ?>" />            <input type="hidden" name="pos" value="0" />            <input type="hidden" name="session_max_rows" value="all" />            <input type="hidden" name="goto" value="<?php echo $goto; ?>" />            <input type="submit" name="navig" value="<?php echo __('Show all'); ?>" />        </form>    </td>        <?php    } // end show all    // Move to the next page or to the last one    if (($_SESSION['tmp_user_values']['pos'] + $_SESSION['tmp_user_values']['max_rows'] < $unlim_num_rows)        && $num_rows >= $_SESSION['tmp_user_values']['max_rows']        && $_SESSION['tmp_user_values']['max_rows'] != 'all'    ) {        // display the Next button        PMA_displayTableNavigationOneButton(            '&gt;',            _pgettext('Next page', 'Next'),            $pos_next,            $html_sql_query        );        // prepare some options for the End button        if ($is_innodb && $unlim_num_rows > $GLOBALS['cfg']['MaxExactCount']) {            $input_for_real_end = '<input id="real_end_input" type="hidden" name="find_real_end" value="1" />';            // no backquote around this message            $onclick = '';        } else {            $input_for_real_end = $onclick = '';        }        // display the End button        PMA_displayTableNavigationOneButton(            '&gt;&gt;',            _pgettext('Last page', 'End'),            @((ceil($unlim_num_rows / $_SESSION['tmp_user_values']['max_rows'])- 1) * $_SESSION['tmp_user_values']['max_rows']),            $html_sql_query,            'onsubmit="return ' . (($_SESSION['tmp_user_values']['pos'] + $_SESSION['tmp_user_values']['max_rows'] < $unlim_num_rows && $num_rows >= $_SESSION['tmp_user_values']['max_rows']) ? 'true' : 'false') . '"',            $input_for_real_end,            $onclick        );    } // end move toward    // show separator if pagination happen    if ($nbTotalPage > 1) {        echo '<td><div class="navigation_separator">|</div></td>';    }    ?>    <td>        <div class="save_edited hide">            <input type="submit" value="<?php echo __('Save edited data'); ?>" />            <div class="navigation_separator">|</div>        </div>    </td>    <td>        <div class="restore_column hide">            <input type="submit" value="<?php echo __('Restore column order'); ?>" />            <div class="navigation_separator">|</div>        </div>    </td><?php // if displaying a VIEW, $unlim_num_rows could be zero because      // of $cfg['MaxExactCountViews']; in this case, avoid passing      // the 5th parameter to checkFormElementInRange()      // (this means we can't validate the upper limit ?>    <td class="navigation_goto">        <form action="sql.php" method="post"    onsubmit="return (checkFormElementInRange(this, 'session_max_rows', '<?php echo str_replace('\'', '\\\'', __('%d is not valid row number.')); ?>', 1) &amp;&amp; checkFormElementInRange(this, 'pos', '<?php echo str_replace('\'', '\\\'', __('%d is not valid row number.')); ?>', 0<?php echo $unlim_num_rows > 0 ? ',' . $unlim_num_rows - 1 : ''; ?>))">            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="sql_query" value="<?php echo $html_sql_query; ?>" />            <input type="hidden" name="goto" value="<?php echo $goto; ?>" />            <input type="submit" name="navig" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?> value="<?php echo __('Show'); ?> :" />            <?php echo __('Start row') . ': ' . "\n"; ?>            <input type="text" name="pos" size="3" value="<?php echo (($pos_next >= $unlim_num_rows) ? 0 : $pos_next); ?>" class="textfield" onfocus="this.select()" />            <?php echo __('Number of rows') . ': ' . "\n"; ?>            <input type="text" name="session_max_rows" size="3" value="<?php echo (($_SESSION['tmp_user_values']['max_rows'] != 'all') ? $_SESSION['tmp_user_values']['max_rows'] : $GLOBALS['cfg']['MaxRows']); ?>" class="textfield" onfocus="this.select()" />        <?php        if ($GLOBALS['cfg']['ShowDisplayDirection']) {            // Display mode (horizontal/vertical and repeat headers)            echo __('Mode') . ': ' . "\n";            $choices = array(                'horizontal'        => __('horizontal'),                'horizontalflipped' => __('horizontal (rotated headers)'),                'vertical'          => __('vertical'));            echo PMA_generate_html_dropdown('disp_direction', $choices, $_SESSION['tmp_user_values']['disp_direction'], $id_for_direction_dropdown);            unset($choices);        }        printf(            __('Headers every %s rows'),            '<input type="text" size="3" name="repeat_cells" value="' . $_SESSION['tmp_user_values']['repeat_cells'] . '" class="textfield" />'        );        echo "\n";        ?>        </form>    </td>    <td class="navigation_separator"></td></tr></table>    <?php} // end of the 'PMA_displayTableNavigation()' function/** * Displays the headers of the results table * * @param array   &$is_display                 which elements to display * @param array   &$fields_meta                the list of fields properties * @param integer $fields_cnt                  the total number of fields returned by the SQL query * @param array   $analyzed_sql                the analyzed query * @param string  $sort_expression             sort expression * @param string  $sort_expression_nodirection sort expression without direction * @param string  $sort_direction              sort direction * * @return  boolean  $clause_is_unique * * @global  string   $db               the database name * @global  string   $table            the table name * @global  string   $goto             the URL to go back in case of errors * @global  string   $sql_query        the SQL query * @global  integer  $num_rows         the total number of rows returned by the *                                     SQL query * @global  array    $vertical_display informations used with vertical display *                                     mode * * @access  private * * @see     PMA_displayTable() */function PMA_displayTableHeaders(&$is_display, &$fields_meta, $fields_cnt = 0, $analyzed_sql = '', $sort_expression, $sort_expression_nodirection, $sort_direction){    global $db, $table, $goto;    global $sql_query, $num_rows;    global $vertical_display, $highlight_columns;    // required to generate sort links that will remember whether the    // "Show all" button has been clicked    $sql_md5 = md5($GLOBALS['sql_query']);    $session_max_rows = $_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'];    if ($analyzed_sql == '') {        $analyzed_sql = array();    }    // can the result be sorted?    if ($is_display['sort_lnk'] == '1') {        // Just as fallback        $unsorted_sql_query     = $sql_query;        if (isset($analyzed_sql[0]['unsorted_query'])) {            $unsorted_sql_query = $analyzed_sql[0]['unsorted_query'];        }        // Handles the case of multiple clicks on a column's header        // which would add many spaces before "ORDER BY" in the        // generated query.        $unsorted_sql_query = trim($unsorted_sql_query);        // sorting by indexes, only if it makes sense (only one table ref)        if (isset($analyzed_sql)            && isset($analyzed_sql[0])            && isset($analyzed_sql[0]['querytype'])            && $analyzed_sql[0]['querytype'] == 'SELECT'            && isset($analyzed_sql[0]['table_ref'])            && count($analyzed_sql[0]['table_ref']) == 1        ) {            // grab indexes data:            $indexes = PMA_Index::getFromTable($table, $db);            // do we have any index?            if ($indexes) {                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                    || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'                ) {                    $span = $fields_cnt;                    if ($is_display['edit_lnk'] != 'nn') {                        $span++;                    }                    if ($is_display['del_lnk'] != 'nn') {                        $span++;                    }                    if ($is_display['del_lnk'] != 'kp' && $is_display['del_lnk'] != 'nn') {                        $span++;                    }                } else {                    $span = $num_rows + floor($num_rows/$_SESSION['tmp_user_values']['repeat_cells']) + 1;                }                echo '<form action="sql.php" method="post">' . "\n";                echo PMA_generate_common_hidden_inputs($db, $table);                echo __('Sort by key') . ': <select name="sql_query" class="autosubmit">' . "\n";                $used_index = false;                $local_order = (isset($sort_expression) ? $sort_expression : '');                foreach ($indexes as $index) {                    $asc_sort = '`' . implode('` ASC, `', array_keys($index->getColumns())) . '` ASC';                    $desc_sort = '`' . implode('` DESC, `', array_keys($index->getColumns())) . '` DESC';                    $used_index = $used_index || $local_order == $asc_sort || $local_order == $desc_sort;                    if (preg_match('@(.*)([[:space:]](LIMIT (.*)|PROCEDURE (.*)|FOR UPDATE|LOCK IN SHARE MODE))@is', $unsorted_sql_query, $my_reg)) {                        $unsorted_sql_query_first_part = $my_reg[1];                        $unsorted_sql_query_second_part = $my_reg[2];                    } else {                        $unsorted_sql_query_first_part = $unsorted_sql_query;                        $unsorted_sql_query_second_part = '';                    }                    echo '<option value="'                        . htmlspecialchars($unsorted_sql_query_first_part  . "\n" . ' ORDER BY ' . $asc_sort . $unsorted_sql_query_second_part)                        . '"' . ($local_order == $asc_sort ? ' selected="selected"' : '')                        . '>' . htmlspecialchars($index->getName()) . ' ('                        . __('Ascending') . ')</option>';                    echo '<option value="'                        . htmlspecialchars($unsorted_sql_query_first_part . "\n" . ' ORDER BY ' . $desc_sort . $unsorted_sql_query_second_part)                        . '"' . ($local_order == $desc_sort ? ' selected="selected"' : '')                        . '>' . htmlspecialchars($index->getName()) . ' ('                        . __('Descending') . ')</option>';                }                echo '<option value="' . htmlspecialchars($unsorted_sql_query) . '"' . ($used_index ? '' : ' selected="selected"') . '>' . __('None') . '</option>';                echo '</select>' . "\n";                echo '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>';                echo '</form>' . "\n";            }        }    }    // Output data needed for grid editing    echo '<input id="save_cells_at_once" type="hidden" value="' . $GLOBALS['cfg']['SaveCellsAtOnce'] . '" />';    echo '<div class="common_hidden_inputs">';    echo PMA_generate_common_hidden_inputs($db, $table);    echo '</div>';    // Output data needed for column reordering and show/hide column    if (PMA_isSelect()) {        // generate the column order, if it is set        $pmatable = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);        if ($col_order) {            echo '<input id="col_order" type="hidden" value="' . implode(',', $col_order) . '" />';        }        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);        if ($col_visib) {            echo '<input id="col_visib" type="hidden" value="' . implode(',', $col_visib) . '" />';        }        // generate table create time        if (! PMA_Table::isView($GLOBALS['table'], $GLOBALS['db'])) {            echo '<input id="table_create_time" type="hidden" value="' .                PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], 'Create_time') . '" />';        }    }    $vertical_display['emptypre']   = 0;    $vertical_display['emptyafter'] = 0;    $vertical_display['textbtn']    = '';    // Display options (if we are not in print view)    if (! (isset($GLOBALS['printview']) && $GLOBALS['printview'] == '1')) {        echo '<form method="post" action="sql.php" name="displayOptionsForm" id="displayOptionsForm"';        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax" ';        }        echo '>';        $url_params = array(            'db' => $db,            'table' => $table,            'sql_query' => $sql_query,            'goto' => $goto,            'display_options_form' => 1        );        echo PMA_generate_common_hidden_inputs($url_params);        echo '<br />';        PMA_generate_slider_effect('displayoptions', __('Options'));        echo '<fieldset>';        echo '<div class="formelement">';        $choices = array(            'P'   => __('Partial texts'),            'F'   => __('Full texts')        );        PMA_display_html_radio('display_text', $choices, $_SESSION['tmp_user_values']['display_text']);        echo '</div>';        // prepare full/partial text button or link        $url_params_full_text = array(            'db' => $db,            'table' => $table,            'sql_query' => $sql_query,            'goto' => $goto,            'full_text_button' => 1        );        if ($_SESSION['tmp_user_values']['display_text']=='F') {            // currently in fulltext mode so show the opposite link            $tmp_image_file = $GLOBALS['pmaThemeImage'] . 's_partialtext.png';            $tmp_txt = __('Partial texts');            $url_params_full_text['display_text'] = 'P';        } else {            $tmp_image_file = $GLOBALS['pmaThemeImage'] . 's_fulltext.png';            $tmp_txt = __('Full texts');            $url_params_full_text['display_text'] = 'F';        }        $tmp_image = '<img class="fulltext" src="' . $tmp_image_file . '" alt="' . $tmp_txt . '" title="' . $tmp_txt . '" />';        $tmp_url = 'sql.php' . PMA_generate_common_url($url_params_full_text);        $full_or_partial_text_link = PMA_linkOrButton($tmp_url, $tmp_image, array(), false);        unset($tmp_image_file, $tmp_txt, $tmp_url, $tmp_image);        if ($GLOBALS['cfgRelation']['relwork'] && $GLOBALS['cfgRelation']['displaywork']) {            echo '<div class="formelement">';            $choices = array(                'K'   => __('Relational key'),                'D'   => __('Relational display column')            );            PMA_display_html_radio('relational_display', $choices, $_SESSION['tmp_user_values']['relational_display']);            echo '</div>';        }        echo '<div class="formelement">';        PMA_display_html_checkbox('display_binary', __('Show binary contents'), ! empty($_SESSION['tmp_user_values']['display_binary']), false);        echo '<br />';        PMA_display_html_checkbox('display_blob', __('Show BLOB contents'), ! empty($_SESSION['tmp_user_values']['display_blob']), false);        echo '<br />';        PMA_display_html_checkbox('display_binary_as_hex', __('Show binary contents as HEX'), ! empty($_SESSION['tmp_user_values']['display_binary_as_hex']), false);        echo '</div>';        // I would have preferred to name this "display_transformation".        // This is the only way I found to be able to keep this setting sticky        // per SQL query, and at the same time have a default that displays        // the transformations.        echo '<div class="formelement">';        PMA_display_html_checkbox('hide_transformation', __('Hide browser transformation'), ! empty($_SESSION['tmp_user_values']['hide_transformation']), false);        echo '</div>';        if (! PMA_DRIZZLE) {            echo '<div class="formelement">';            $choices = array(                'GEOM'  => __('Geometry'),                'WKT'   => __('Well Known Text'),                'WKB'   => __('Well Known Binary')            );            PMA_display_html_radio('geometry_display', $choices, $_SESSION['tmp_user_values']['geometry_display']);            echo '</div>';        }        echo '<div class="clearfloat"></div>';        echo '</fieldset>';        echo '<fieldset class="tblFooters">';        echo '<input type="submit" value="' . __('Go') . '" />';        echo '</fieldset>';        echo '</div>';        echo '</form>';    }    // Start of form for multi-rows edit/delete/export    if ($is_display['del_lnk'] == 'dr' || $is_display['del_lnk'] == 'kp') {        echo '<form method="post" action="tbl_row_action.php" name="resultsForm" id="resultsForm"';        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax" ';        }        echo '>' . "\n";        echo PMA_generate_common_hidden_inputs($db, $table, 1);        echo '<input type="hidden" name="goto"             value="sql.php" />' . "\n";    }    echo '<table id="table_results" class="data';    if ($GLOBALS['cfg']['AjaxEnable']) {        echo ' ajax';    }    echo '">' . "\n";    if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'        || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'    ) {        echo '<thead><tr>' . "\n";    }    // 1. Displays the full/partial text button (part 1)...    if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'        || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'    ) {        $colspan  = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn')                  ? ' colspan="4"'                  : '';    } else {        $rowspan  = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn')                  ? ' rowspan="4"'                  : '';    }    //     ... before the result table    if (($is_display['edit_lnk'] == 'nn' && $is_display['del_lnk'] == 'nn')        && $is_display['text_btn'] == '1'    ) {        $vertical_display['emptypre'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 0;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            ?>    <th colspan="<?php echo $fields_cnt; ?>"></th></tr><tr>            <?php            // end horizontal/horizontalflipped mode        } else {            ?><tr>    <th colspan="<?php echo $num_rows + floor($num_rows/$_SESSION['tmp_user_values']['repeat_cells']) + 1; ?>"></th></tr>            <?php        } // end vertical mode    }    //     ... at the left column of the result table header if possible    //     and required    elseif (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && $is_display['text_btn'] == '1'    ) {        $vertical_display['emptypre'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 0;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            ?>                <th <?php echo $colspan; ?>><?php echo $full_or_partial_text_link;?></th>            <?php            // end horizontal/horizontalflipped mode        } else {            $vertical_display['textbtn'] = '    <th ' . $rowspan . ' valign="middle">' . "\n"                                         . '        ' . "\n"                                         . '    </th>' . "\n";        } // end vertical mode    }    //     ... elseif no button, displays empty(ies) col(s) if required    elseif (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')             && ($is_display['edit_lnk'] != 'nn' || $is_display['del_lnk'] != 'nn')) {        $vertical_display['emptypre'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 0;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            ?>    <td<?php echo $colspan; ?>></td>            <?php            // end horizontal/horizontalfipped mode        } else {            $vertical_display['textbtn'] = '    <td' . $rowspan . '></td>' . "\n";        } // end vertical mode    }    //     ... elseif display an empty column if the actions links are disabled to match the rest of the table    elseif ($GLOBALS['cfg']['RowActionLinks'] == 'none'        && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal' || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')    ) {        echo '<th></th>';    }    // 2. Displays the fields' name    // 2.0 If sorting links should be used, checks if the query is a "JOIN"    //     statement (see 2.1.3)    // 2.0.1 Prepare Display column comments if enabled ($GLOBALS['cfg']['ShowBrowseComments']).    //       Do not show comments, if using horizontalflipped mode, because of space usage    if ($GLOBALS['cfg']['ShowBrowseComments']        && $_SESSION['tmp_user_values']['disp_direction'] != 'horizontalflipped'    ) {        $comments_map = array();        if (isset($analyzed_sql[0]) && is_array($analyzed_sql[0])) {            foreach ($analyzed_sql[0]['table_ref'] as $tbl) {                $tb = $tbl['table_true_name'];                $comments_map[$tb] = PMA_getComments($db, $tb);                unset($tb);            }        }    }    if ($GLOBALS['cfgRelation']['commwork'] && $GLOBALS['cfgRelation']['mimework'] && $GLOBALS['cfg']['BrowseMIME'] && ! $_SESSION['tmp_user_values']['hide_transformation']) {        include_once './libraries/transformations.lib.php';        $GLOBALS['mime_map'] = PMA_getMIME($db, $table);    }    // See if we have to highlight any header fields of a WHERE query.    // Uses SQL-Parser results.    $highlight_columns = array();    if (isset($analyzed_sql) && isset($analyzed_sql[0])        && isset($analyzed_sql[0]['where_clause_identifiers'])    ) {        $wi = 0;        if (isset($analyzed_sql[0]['where_clause_identifiers']) && is_array($analyzed_sql[0]['where_clause_identifiers'])) {            foreach ($analyzed_sql[0]['where_clause_identifiers'] AS $wci_nr => $wci) {                $highlight_columns[$wci] = 'true';            }        }    }    if (PMA_isSelect()) {        // prepare to get the column order, if available        $pmatable = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);    } else {        $col_order = false;        $col_visib = false;    }    for ($j = 0; $j < $fields_cnt; $j++) {        // assign $i with appropriate column order        $i = $col_order ? $col_order[$j] : $j;        //  See if this column should get highlight because it's used in the        //  where-query.        if (isset($highlight_columns[$fields_meta[$i]->name]) || isset($highlight_columns[PMA_backquote($fields_meta[$i]->name)])) {            $condition_field = true;        } else {            $condition_field = false;        }        // 2.0 Prepare comment-HTML-wrappers for each row, if defined/enabled.        if (isset($comments_map)            && isset($comments_map[$fields_meta[$i]->table])            && isset($comments_map[$fields_meta[$i]->table][$fields_meta[$i]->name])        ) {            $comments = '<span class="tblcomment">' . htmlspecialchars($comments_map[$fields_meta[$i]->table][$fields_meta[$i]->name]) . '</span>';        } else {            $comments = '';        }        // 2.1 Results can be sorted        if ($is_display['sort_lnk'] == '1') {            // 2.1.1 Checks if the table name is required; it's the case            //       for a query with a "JOIN" statement and if the column            //       isn't aliased, or in queries like            //       SELECT `1`.`master_field` , `2`.`master_field`            //       FROM `PMA_relation` AS `1` , `PMA_relation` AS `2`            if (isset($fields_meta[$i]->table) && strlen($fields_meta[$i]->table)) {                $sort_tbl = PMA_backquote($fields_meta[$i]->table) . '.';            } else {                $sort_tbl = '';            }            // 2.1.2 Checks if the current column is used to sort the            //       results            // the orgname member does not exist for all MySQL versions            // but if found, it's the one on which to sort            $name_to_use_in_sort = $fields_meta[$i]->name;            $is_orgname = false;            if (isset($fields_meta[$i]->orgname) && strlen($fields_meta[$i]->orgname)) {                $name_to_use_in_sort = $fields_meta[$i]->orgname;                $is_orgname = true;            }            // $name_to_use_in_sort might contain a space due to            // formatting of function expressions like "COUNT(name )"            // so we remove the space in this situation            $name_to_use_in_sort = str_replace(' )', ')', $name_to_use_in_sort);            if (empty($sort_expression)) {                $is_in_sort = false;            } else {                // Field name may be preceded by a space, or any number                // of characters followed by a dot (tablename.fieldname)                // so do a direct comparison for the sort expression;                // this avoids problems with queries like                // "SELECT id, count(id)..." and clicking to sort                // on id or on count(id).                // Another query to test this:                // SELECT p.*, FROM_UNIXTIME(p.temps) FROM mytable AS p                // (and try clicking on each column's header twice)                if (! empty($sort_tbl)                    && strpos($sort_expression_nodirection, $sort_tbl) === false                    && strpos($sort_expression_nodirection, '(') === false                ) {                    $sort_expression_nodirection = $sort_tbl . $sort_expression_nodirection;                }                $is_in_sort = (str_replace('`', '', $sort_tbl) . $name_to_use_in_sort == str_replace('`', '', $sort_expression_nodirection) ? true : false);            }            // 2.1.3 Check the field name for a bracket.            //       If it contains one, it's probably a function column            //       like 'COUNT(`field`)'            //       It still might be a column name of a view. See bug #3383711            //       Check is_orgname.            if (strpos($name_to_use_in_sort, '(') !== false && ! $is_orgname) {                $sort_order = "\n" . 'ORDER BY ' . $name_to_use_in_sort . ' ';            } else {                $sort_order = "\n" . 'ORDER BY ' . $sort_tbl . PMA_backquote($name_to_use_in_sort) . ' ';            }            unset($name_to_use_in_sort);            unset($is_orgname);            // 2.1.4 Do define the sorting URL            if (! $is_in_sort) {                // patch #455484 ("Smart" order)                $GLOBALS['cfg']['Order'] = strtoupper($GLOBALS['cfg']['Order']);                if ($GLOBALS['cfg']['Order'] === 'SMART') {                    $sort_order .= (preg_match('@time|date@i', $fields_meta[$i]->type)) ? 'DESC' : 'ASC';                } else {                    $sort_order .= $GLOBALS['cfg']['Order'];                }                $order_img   = '';            } elseif ('DESC' == $sort_direction) {                $sort_order .= ' ASC';                $order_img   = ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => "soimg$i", 'title' => ''));                $order_img  .= ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => "soimg$i hide", 'title' => ''));            } else {                $sort_order .= ' DESC';                $order_img   = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => "soimg$i", 'title' => ''));                $order_img  .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => "soimg$i hide", 'title' => ''));            }            if (preg_match('@(.*)([[:space:]](LIMIT (.*)|PROCEDURE (.*)|FOR UPDATE|LOCK IN SHARE MODE))@is', $unsorted_sql_query, $regs3)) {                $sorted_sql_query = $regs3[1] . $sort_order . $regs3[2];            } else {                $sorted_sql_query = $unsorted_sql_query . $sort_order;            }            $_url_params = array(                'db'                => $db,                'table'             => $table,                'sql_query'         => $sorted_sql_query,                'session_max_rows'  => $session_max_rows            );            $order_url  = 'sql.php' . PMA_generate_common_url($_url_params);            // 2.1.5 Displays the sorting URL            // enable sort order swapping for image            $order_link_params = array();            if (isset($order_img) && $order_img!='') {                if (strstr($order_img, 'asc')) {                    $order_link_params['onmouseover'] = "$('.soimg$i').toggle()";                    $order_link_params['onmouseout']  = "$('.soimg$i').toggle()";                } elseif (strstr($order_img, 'desc')) {                    $order_link_params['onmouseover'] = "$('.soimg$i').toggle()";                    $order_link_params['onmouseout']  = "$('.soimg$i').toggle()";                }            }            if ($GLOBALS['cfg']['HeaderFlipType'] == 'auto') {                if (PMA_USR_BROWSER_AGENT == 'IE') {                    $GLOBALS['cfg']['HeaderFlipType'] = 'css';                } else {                    $GLOBALS['cfg']['HeaderFlipType'] = 'fake';                }            }            if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'                && $GLOBALS['cfg']['HeaderFlipType'] == 'css'            ) {                $order_link_params['style'] = 'direction: ltr; writing-mode: tb-rl;';            }            $order_link_params['title'] = __('Sort');            $order_link_content = ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped' && $GLOBALS['cfg']['HeaderFlipType'] == 'fake' ? PMA_flipstring(htmlspecialchars($fields_meta[$i]->name), "<br />\n") : htmlspecialchars($fields_meta[$i]->name));            $order_link = PMA_linkOrButton($order_url, $order_link_content . $order_img, $order_link_params, false, true);            if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'            ) {                echo '<th';                $th_class = array();                $th_class[] = 'draggable';                if ($col_visib && !$col_visib[$j]) {                    $th_class[] = 'hide';                }                if ($condition_field) {                    $th_class[] = 'condition';                }                $th_class[] = 'column_heading';                if ($GLOBALS['cfg']['BrowsePointerEnable'] == true) {                    $th_class[] = 'pointer';                }                if ($GLOBALS['cfg']['BrowseMarkerEnable'] == true) {                    $th_class[] = 'marker';                }                echo ' class="' . implode(' ', $th_class) . '"';                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped') {                    echo ' valign="bottom"';                }                echo '>' . $order_link . $comments . '</th>';            }            $vertical_display['desc'][] = '    <th '                . 'class="draggable'                . ($condition_field ? ' condition' : '')                . '">' . "\n"                . $order_link . $comments . '    </th>' . "\n";        } // end if (2.1)        // 2.2 Results can't be sorted        else {            if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'            ) {                echo '<th';                $th_class = array();                $th_class[] = 'draggable';                if ($col_visib && !$col_visib[$j]) {                    $th_class[] = 'hide';                }                if ($condition_field) {                    $th_class[] = 'condition';                }                echo ' class="' . implode(' ', $th_class) . '"';                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped') {                    echo ' valign="bottom"';                }                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'                    && $GLOBALS['cfg']['HeaderFlipType'] == 'css'                ) {                    echo ' style="direction: ltr; writing-mode: tb-rl;"';                }                echo '>';                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'                    && $GLOBALS['cfg']['HeaderFlipType'] == 'fake'                ) {                    echo PMA_flipstring(htmlspecialchars($fields_meta[$i]->name), '<br />');                } else {                    echo htmlspecialchars($fields_meta[$i]->name);                }                echo "\n" . $comments . '</th>';            }            $vertical_display['desc'][] = '    <th '                . 'class="draggable'                . ($condition_field ? ' condition"' : '')                . '">' . "\n"                . '        ' . htmlspecialchars($fields_meta[$i]->name) . "\n"                . $comments . '    </th>';        } // end else (2.2)    } // end for    // 3. Displays the needed checkboxes at the right    //    column of the result table header if possible and required...    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && ($is_display['edit_lnk'] != 'nn' || $is_display['del_lnk'] != 'nn')        && $is_display['text_btn'] == '1'    ) {        $vertical_display['emptyafter'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 1;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            echo "\n";            ?>        <th <?php echo $colspan; ?>><?php echo $full_or_partial_text_link;?></th>            <?php            // end horizontal/horizontalflipped mode        } else {            $vertical_display['textbtn'] = '    <th ' . $rowspan . ' valign="middle">' . "\n"                                         . '        ' . "\n"                                         . '    </th>' . "\n";        } // end vertical mode    }    //     ... elseif no button, displays empty columns if required    // (unless coming from Browse mode print view)    elseif (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && ($is_display['edit_lnk'] == 'nn' && $is_display['del_lnk'] == 'nn')        && (! $GLOBALS['is_header_sent'])    ) {        $vertical_display['emptyafter'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 1;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            echo "\n";            ?><td<?php echo $colspan; ?>></td>            <?php            // end horizontal/horizontalflipped mode        } else {            $vertical_display['textbtn'] = '    <td' . $rowspan . '></td>' . "\n";        } // end vertical mode    }    if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'        || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'    ) {        ?></tr></thead>        <?php    }    return true;} // end of the 'PMA_displayTableHeaders()' function/** * Prepares the display for a value * * @param string $class           class of table cell * @param bool   $condition_field whether to add CSS class condition * @param string $value           value to display * * @return  string  the td */function PMA_buildValueDisplay($class, $condition_field, $value){    return '<td align="left"' . ' class="' . $class . ($condition_field ? ' condition' : '') . '">' . $value . '</td>';}/** * Prepares the display for a null value * * @param string $class           class of table cell * @param bool   $condition_field whether to add CSS class condition * @param object $meta            the meta-information about this field * @param string $align           cell allignment * * @return  string  the td */function PMA_buildNullDisplay($class, $condition_field, $meta, $align = ''){    // the null class is needed for grid editing    return '<td ' . $align . ' class="' . PMA_addClass($class, $condition_field, $meta, '') . ' null"><i>NULL</i></td>';}/** * Prepares the display for an empty value * * @param string $class           class of table cell * @param bool   $condition_field whether to add CSS class condition * @param object $meta            the meta-information about this field * @param string $align           cell allignment * * @return  string  the td */function PMA_buildEmptyDisplay($class, $condition_field, $meta, $align = ''){    $nowrap = ' nowrap';    return '<td ' . $align . ' class="' . PMA_addClass($class, $condition_field, $meta, $nowrap)  . '"></td>';}/** * Adds the relavant classes. * * @param string $class              class of table cell * @param bool   $condition_field    whether to add CSS class condition * @param object $meta               the meta-information about this field * @param string $nowrap             avoid wrapping * @param bool   $is_field_truncated is field truncated (display ...) * @param string $transform_function transformation function * @param string $default_function   default transformation function * * @return string the list of classes */function PMA_addClass($class, $condition_field, $meta, $nowrap, $is_field_truncated = false, $transform_function = '', $default_function = ''){    // Define classes to be added to this data field based on the type of data    $enum_class = '';    if (strpos($meta->flags, 'enum') !== false) {        $enum_class = ' enum';    }    $set_class = '';    if (strpos($meta->flags, 'set') !== false) {        $set_class = ' set';    }    $bit_class = '';    if (strpos($meta->type, 'bit') !== false) {        $bit_class = ' bit';    }    $mime_type_class = '';    if (isset($meta->mimetype)) {        $mime_type_class = ' ' . preg_replace('/\//', '_', $meta->mimetype);    }    $result = $class . ($condition_field ? ' condition' : '') . $nowrap    . ' ' . ($is_field_truncated ? ' truncated' : '')    . ($transform_function != $default_function ? ' transformed' : '')    . $enum_class . $set_class . $bit_class . $mime_type_class;    return $result;}/** * Displays the body of the results table * * @param integer &$dt_result   the link id associated to the query which results have *                              to be displayed * @param array   &$is_display  which elements to display * @param array   $map          the list of relations * @param array   $analyzed_sql the analyzed query * * @return  boolean  always true * * @global string   $db                the database name * @global string   $table             the table name * @global string   $goto              the URL to go back in case of errors * @global string   $sql_query         the SQL query * @global array    $fields_meta       the list of fields properties * @global integer  $fields_cnt        the total number of fields returned by *                                      the SQL query * @global array    $vertical_display  informations used with vertical display *                                      mode * @global array    $highlight_columns column names to highlight * @global array    $row               current row data * * @access private * * @see     PMA_displayTable() */function PMA_displayTableBody(&$dt_result, &$is_display, $map, $analyzed_sql){    global $db, $table, $goto;    global $sql_query, $fields_meta, $fields_cnt;    global $vertical_display, $highlight_columns;    global $row; // mostly because of browser transformations, to make the row-data accessible in a plugin    $url_sql_query          = $sql_query;    // query without conditions to shorten URLs when needed, 200 is just    // guess, it should depend on remaining URL length    if (isset($analyzed_sql)        && isset($analyzed_sql[0])        && isset($analyzed_sql[0]['querytype'])        && $analyzed_sql[0]['querytype'] == 'SELECT'        && strlen($sql_query) > 200    ) {        $url_sql_query = 'SELECT ';        if (isset($analyzed_sql[0]['queryflags']['distinct'])) {            $url_sql_query .= ' DISTINCT ';        }        $url_sql_query .= $analyzed_sql[0]['select_expr_clause'];        if (!empty($analyzed_sql[0]['from_clause'])) {            $url_sql_query .= ' FROM ' . $analyzed_sql[0]['from_clause'];        }    }    if (! is_array($map)) {        $map = array();    }    $row_no                         = 0;    $vertical_display['edit']       = array();    $vertical_display['copy']       = array();    $vertical_display['delete']     = array();    $vertical_display['data']       = array();    $vertical_display['row_delete'] = array();    // name of the class added to all grid editable elements    $grid_edit_class = 'grid_edit';    // prepare to get the column order, if available    if (PMA_isSelect()) {        $pmatable = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);    } else {        $col_order = false;        $col_visib = false;    }    // Correction University of Virginia 19991216 in the while below    // Previous code assumed that all tables have keys, specifically that    // the phpMyAdmin GUI should support row delete/edit only for such    // tables.    // Although always using keys is arguably the prescribed way of    // defining a relational table, it is not required. This will in    // particular be violated by the novice.    // We want to encourage phpMyAdmin usage by such novices. So the code    // below has been changed to conditionally work as before when the    // table being displayed has one or more keys; but to display    // delete/edit options correctly for tables without keys.    $odd_row = true;    while ($row = PMA_DBI_fetch_row($dt_result)) {        // "vertical display" mode stuff        if ($row_no != 0 && $_SESSION['tmp_user_values']['repeat_cells'] != 0            && !($row_no % $_SESSION['tmp_user_values']['repeat_cells'])            && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')        ) {            echo '<tr>' . "\n";            if ($vertical_display['emptypre'] > 0) {                echo '    <th colspan="' . $vertical_display['emptypre'] . '">' . "\n"                    .'        &nbsp;</th>' . "\n";            } else if ($GLOBALS['cfg']['RowActionLinks'] == 'none') {                echo '    <th></th>' . "\n";            }            foreach ($vertical_display['desc'] as $val) {                echo $val;            }            if ($vertical_display['emptyafter'] > 0) {                echo '    <th colspan="' . $vertical_display['emptyafter'] . '">' . "\n"                    .'        &nbsp;</th>' . "\n";            }            echo '</tr>' . "\n";        } // end if        $alternating_color_class = ($odd_row ? 'odd' : 'even');        $odd_row = ! $odd_row;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            // pointer code part            echo '<tr class="' . $alternating_color_class . '">';        }        // 1. Prepares the row        // 1.1 Results from a "SELECT" statement -> builds the        //     WHERE clause to use in links (a unique key if possible)        /**         * @todo $where_clause could be empty, for example a table         *       with only one field and it's a BLOB; in this case,         *       avoid to display the delete and edit links         */        list($where_clause, $clause_is_unique, $condition_array) = PMA_getUniqueCondition($dt_result, $fields_cnt, $fields_meta, $row);        $where_clause_html = urlencode($where_clause);        // 1.2 Defines the URLs for the modify/delete link(s)        if ($is_display['edit_lnk'] != 'nn' || $is_display['del_lnk'] != 'nn') {            // We need to copy the value or else the == 'both' check will always return true            if ($GLOBALS['cfg']['PropertiesIconic'] === 'both') {                $iconic_spacer = '<div class="nowrap">';            } else {                $iconic_spacer = '';            }            // 1.2.1 Modify link(s)            if ($is_display['edit_lnk'] == 'ur') { // update row case                $_url_params = array(                    'db'               => $db,                    'table'            => $table,                    'where_clause'     => $where_clause,                    'clause_is_unique' => $clause_is_unique,                    'sql_query'        => $url_sql_query,                    'goto'             => 'sql.php',                );                $edit_url = 'tbl_change.php' . PMA_generate_common_url($_url_params + array('default_action' => 'update'));                $copy_url = 'tbl_change.php' . PMA_generate_common_url($_url_params + array('default_action' => 'insert'));                $edit_str = PMA_getIcon('b_edit.png', __('Edit'));                $copy_str = PMA_getIcon('b_insrow.png', __('Copy'));                // Class definitions required for grid editing jQuery scripts                $edit_anchor_class = "edit_row_anchor";                if ( $clause_is_unique == 0) {                    $edit_anchor_class .= ' nonunique';                }            } // end if (1.2.1)            // 1.2.2 Delete/Kill link(s)            if ($is_display['del_lnk'] == 'dr') { // delete row case                $_url_params = array(                    'db'        => $db,                    'table'     => $table,                    'sql_query' => $url_sql_query,                    'message_to_show' => __('The row has been deleted'),                    'goto'      => (empty($goto) ? 'tbl_sql.php' : $goto),                );                $lnk_goto = 'sql.php' . PMA_generate_common_url($_url_params, 'text');                $del_query = 'DELETE FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table)                    . ' WHERE ' . $where_clause . ($clause_is_unique ? '' : ' LIMIT 1');                $_url_params = array(                    'db'        => $db,                    'table'     => $table,                    'sql_query' => $del_query,                    'message_to_show' => __('The row has been deleted'),                    'goto'      => $lnk_goto,                );                $del_url  = 'sql.php' . PMA_generate_common_url($_url_params);                $js_conf  = 'DELETE FROM ' . PMA_jsFormat($db) . '.' . PMA_jsFormat($table)                          . ' WHERE ' . PMA_jsFormat($where_clause, false)                          . ($clause_is_unique ? '' : ' LIMIT 1');                $del_str = PMA_getIcon('b_drop.png', __('Delete'));            } elseif ($is_display['del_lnk'] == 'kp') { // kill process case                $_url_params = array(                    'db'        => $db,                    'table'     => $table,                    'sql_query' => $url_sql_query,                    'goto'      => 'main.php',                );                $lnk_goto = 'sql.php' . PMA_generate_common_url($_url_params, 'text');                $_url_params = array(                    'db'        => 'mysql',                    'sql_query' => 'KILL ' . $row[0],                    'goto'      => $lnk_goto,                );                $del_url  = 'sql.php' . PMA_generate_common_url($_url_params);                $del_query = 'KILL ' . $row[0];                $js_conf  = 'KILL ' . $row[0];                $del_str = PMA_getIcon('b_drop.png', __('Kill'));            } // end if (1.2.2)            // 1.3 Displays the links at left if required            if (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')                && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')            ) {                if (! isset($js_conf)) {                    $js_conf = '';                }                echo PMA_generateCheckboxAndLinks('left', $del_url, $is_display, $row_no, $where_clause, $where_clause_html, $condition_array, $del_query, 'l', $edit_url, $copy_url, $edit_anchor_class, $edit_str, $copy_str, $del_str, $js_conf);            } elseif (($GLOBALS['cfg']['RowActionLinks'] == 'none')                && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')            ) {                if (! isset($js_conf)) {                    $js_conf = '';                }                echo PMA_generateCheckboxAndLinks('none', $del_url, $is_display, $row_no, $where_clause, $where_clause_html, $condition_array, $del_query, 'l', $edit_url, $copy_url, $edit_anchor_class, $edit_str, $copy_str, $del_str, $js_conf);            } // end if (1.3)        } // end if (1)        // 2. Displays the rows' values        for ($j = 0; $j < $fields_cnt; ++$j) {            // assign $i with appropriate column order            $i = $col_order ? $col_order[$j] : $j;            $meta    = $fields_meta[$i];            $not_null_class = $meta->not_null ? 'not_null' : '';            $relation_class = isset($map[$meta->name]) ? 'relation' : '';            $hide_class = ($col_visib && !$col_visib[$j] &&                           // hide per <td> only if the display direction is not vertical                           $_SESSION['tmp_user_values']['disp_direction'] != 'vertical') ? 'hide' : '';            // handle datetime-related class, for grid editing            if (substr($meta->type, 0, 9) == 'timestamp' || $meta->type == 'datetime') {                $field_type_class = 'datetimefield';            } else if ($meta->type == 'date') {                $field_type_class = 'datefield';            } else {                $field_type_class = '';            }            $pointer = $i;            $is_field_truncated = false;            //If the previous column had blob data, we need to reset the class            // to $inline_edit_class            $class = 'data ' . $grid_edit_class . ' ' . $not_null_class . ' ' . $relation_class . ' ' . $hide_class . ' ' . $field_type_class; //' ' . $alternating_color_class .            //  See if this column should get highlight because it's used in the            //  where-query.            if (isset($highlight_columns) && (isset($highlight_columns[$meta->name]) || isset($highlight_columns[PMA_backquote($meta->name)]))) {                $condition_field = true;            } else {                $condition_field = false;            }            if ($_SESSION['tmp_user_values']['disp_direction'] == 'vertical' && (! isset($GLOBALS['printview']) || ($GLOBALS['printview'] != '1'))) {                // the row number corresponds to a data row, not HTML table row                $class .= ' row_' . $row_no;                if ($GLOBALS['cfg']['BrowsePointerEnable'] == true) {                    $class .= ' vpointer';                }                if ($GLOBALS['cfg']['BrowseMarkerEnable'] == true) {                    $class .= ' vmarker';                }            }// end if            // Wrap MIME-transformations. [MIME]            $default_function = 'default_function'; // default_function            $transform_function = $default_function;            $transform_options = array();            if ($GLOBALS['cfgRelation']['mimework'] && $GLOBALS['cfg']['BrowseMIME']) {                if (isset($GLOBALS['mime_map'][$meta->name]['mimetype']) && isset($GLOBALS['mime_map'][$meta->name]['transformation']) && !empty($GLOBALS['mime_map'][$meta->name]['transformation'])) {                    $include_file = PMA_securePath($GLOBALS['mime_map'][$meta->name]['transformation']);                    if (file_exists('./libraries/transformations/' . $include_file)) {                        $transformfunction_name = str_replace('.inc.php', '', $GLOBALS['mime_map'][$meta->name]['transformation']);                        include_once './libraries/transformations/' . $include_file;                        if (function_exists('PMA_transformation_' . $transformfunction_name)) {                            $transform_function = 'PMA_transformation_' . $transformfunction_name;                            $transform_options  = PMA_transformation_getOptions((isset($GLOBALS['mime_map'][$meta->name]['transformation_options']) ? $GLOBALS['mime_map'][$meta->name]['transformation_options'] : ''));                            $meta->mimetype     = str_replace('_', '/', $GLOBALS['mime_map'][$meta->name]['mimetype']);                        }                    } // end if file_exists                } // end if transformation is set            } // end if mime/transformation works.            $_url_params = array(                'db'            => $db,                'table'         => $table,                'where_clause'  => $where_clause,                'transform_key' => $meta->name,            );            if (! empty($sql_query)) {                $_url_params['sql_query'] = $url_sql_query;            }            $transform_options['wrapper_link'] = PMA_generate_common_url($_url_params);            // n u m e r i c            if ($meta->numeric == 1) {                // if two fields have the same name (this is possible                //       with self-join queries, for example), using $meta->name                //       will show both fields NULL even if only one is NULL,                //       so use the $pointer                if (! isset($row[$i]) || is_null($row[$i])) {                    $vertical_display['data'][$row_no][$i]     =  PMA_buildNullDisplay($class, $condition_field, $meta, 'align="right"');                } elseif ($row[$i] != '') {                    $nowrap = ' nowrap';                    $where_comparison = ' = ' . $row[$i];                    $vertical_display['data'][$row_no][$i]     = '<td align="right"' . PMA_prepare_row_data($class, $condition_field, $analyzed_sql, $meta, $map, $row[$i], $transform_function, $default_function, $nowrap, $where_comparison, $transform_options, $is_field_truncated);                } else {                    $vertical_display['data'][$row_no][$i]     = PMA_buildEmptyDisplay($class, $condition_field, $meta, 'align="right"');                }            //  b l o b            } elseif (stristr($meta->type, 'BLOB')) {                // PMA_mysql_fetch_fields returns BLOB in place of                // TEXT fields type so we have to ensure it's really a BLOB                $field_flags = PMA_DBI_field_flags($dt_result, $i);                if (stristr($field_flags, 'BINARY')) {                    // remove 'grid_edit' from $class as we can't edit binary data.                    $class = str_replace('grid_edit', '', $class);                    if (! isset($row[$i]) || is_null($row[$i])) {                        $vertical_display['data'][$row_no][$i]     =  PMA_buildNullDisplay($class, $condition_field, $meta);                    } else {                        // for blobstreaming                        // if valid BS reference exists                        if (PMA_BS_IsPBMSReference($row[$i], $db)) {                            $blobtext = PMA_BS_CreateReferenceLink($row[$i], $db);                        } else {                            $blobtext = PMA_handle_non_printable_contents('BLOB', (isset($row[$i]) ? $row[$i] : ''), $transform_function, $transform_options, $default_function, $meta, $_url_params);                        }                        $vertical_display['data'][$row_no][$i]     =  PMA_buildValueDisplay($class, $condition_field, $blobtext);                        unset($blobtext);                    }                // not binary:                } else {                    if (! isset($row[$i]) || is_null($row[$i])) {                        $vertical_display['data'][$row_no][$i]     =  PMA_buildNullDisplay($class, $condition_field, $meta);                    } elseif ($row[$i] != '') {                        // if a transform function for blob is set, none of these replacements will be made                        if (PMA_strlen($row[$i]) > $GLOBALS['cfg']['LimitChars'] && $_SESSION['tmp_user_values']['display_text'] == 'P') {                            $row[$i] = PMA_substr($row[$i], 0, $GLOBALS['cfg']['LimitChars']) . '...';                            $is_field_truncated = true;                        }                        // displays all space characters, 4 space                        // characters for tabulations and <cr>/<lf>                        $row[$i]     = ($default_function != $transform_function ? $transform_function($row[$i], $transform_options, $meta) : $default_function($row[$i], array(), $meta));                        if ($is_field_truncated) {                            $class .= ' truncated';                        }                        $vertical_display['data'][$row_no][$i]     = PMA_buildValueDisplay($class, $condition_field, $row[$i]);                    } else {                        $vertical_display['data'][$row_no][$i]     = PMA_buildEmptyDisplay($class, $condition_field, $meta);                    }                }            // g e o m e t r y            } elseif ($meta->type == 'geometry') {                // Remove 'grid_edit' from $class as we do not allow to inline-edit geometry data.                $class = str_replace('grid_edit', '', $class);                if (! isset($row[$i]) || is_null($row[$i])) {                    $vertical_display['data'][$row_no][$i] = PMA_buildNullDisplay($class, $condition_field, $meta);                } elseif ($row[$i] != '') {                    // Display as [GEOMETRY - (size)]                    if ('GEOM' == $_SESSION['tmp_user_values']['geometry_display']) {                        $geometry_text = PMA_handle_non_printable_contents(                            'GEOMETRY', (isset($row[$i]) ? $row[$i] : ''), $transform_function,                            $transform_options, $default_function, $meta                        );                        $vertical_display['data'][$row_no][$i] = PMA_buildValueDisplay(                            $class, $condition_field, $geometry_text                        );                    // Display in Well Known Text(WKT) format.                    } elseif ('WKT' == $_SESSION['tmp_user_values']['geometry_display']) {                        $where_comparison = ' = ' . $row[$i];                        // Convert to WKT format                        $wktval = PMA_asWKT($row[$i]);                        if (PMA_strlen($wktval) > $GLOBALS['cfg']['LimitChars']                            && $_SESSION['tmp_user_values']['display_text'] == 'P'                        ) {                            $wktval = PMA_substr($wktval, 0, $GLOBALS['cfg']['LimitChars']) . '...';                            $is_field_truncated = true;                        }                        $vertical_display['data'][$row_no][$i] = '<td ' . PMA_prepare_row_data(                            $class, $condition_field, $analyzed_sql, $meta, $map, $wktval, $transform_function,                            $default_function, '', $where_comparison, $transform_options, $is_field_truncated                        );                    // Display in  Well Known Binary(WKB) format.                    } else {                        if ($_SESSION['tmp_user_values']['display_binary']) {                            $where_comparison = ' = ' . $row[$i];                            if ($_SESSION['tmp_user_values']['display_binary_as_hex']                                && PMA_contains_nonprintable_ascii($row[$i])                            ) {                                $wkbval = PMA_substr(bin2hex($row[$i]), 8);                            } else {                                $wkbval = htmlspecialchars(PMA_replace_binary_contents($row[$i]));                            }                            if (PMA_strlen($wkbval) > $GLOBALS['cfg']['LimitChars']                                && $_SESSION['tmp_user_values']['display_text'] == 'P'                            ) {                                $wkbval = PMA_substr($wkbval, 0, $GLOBALS['cfg']['LimitChars']) . '...';                                $is_field_truncated = true;                            }                            $vertical_display['data'][$row_no][$i] = '<td ' . PMA_prepare_row_data(                                $class, $condition_field, $analyzed_sql, $meta, $map, $wkbval, $transform_function,                                $default_function, '', $where_comparison, $transform_options, $is_field_truncated                            );                        } else {                            $wkbval = PMA_handle_non_printable_contents(                                'BINARY', $row[$i], $transform_function, $transform_options, $default_function, $meta, $_url_params                            );                            $vertical_display['data'][$row_no][$i] = PMA_buildValueDisplay($class, $condition_field, $wkbval);                        }                    }                } else {                    $vertical_display['data'][$row_no][$i] = PMA_buildEmptyDisplay($class, $condition_field, $meta);                }            // n o t   n u m e r i c   a n d   n o t   B L O B            } else {                if (! isset($row[$i]) || is_null($row[$i])) {                    $vertical_display['data'][$row_no][$i]     =  PMA_buildNullDisplay($class, $condition_field, $meta);                } elseif ($row[$i] != '') {                    // support blanks in the key                    $relation_id = $row[$i];                    // Cut all fields to $GLOBALS['cfg']['LimitChars']                    // (unless it's a link-type transformation)                    if (PMA_strlen($row[$i]) > $GLOBALS['cfg']['LimitChars'] && $_SESSION['tmp_user_values']['display_text'] == 'P' && !strpos($transform_function, 'link') === true) {                        $row[$i] = PMA_substr($row[$i], 0, $GLOBALS['cfg']['LimitChars']) . '...';                        $is_field_truncated = true;                    }                    // displays special characters from binaries                    $field_flags = PMA_DBI_field_flags($dt_result, $i);                    $formatted = false;                    if (isset($meta->_type) && $meta->_type === MYSQLI_TYPE_BIT) {                        $row[$i]     = PMA_printable_bit_value($row[$i], $meta->length);                        // some results of PROCEDURE ANALYSE() are reported as                        // being BINARY but they are quite readable,                        // so don't treat them as BINARY                    } elseif (stristr($field_flags, 'BINARY') && $meta->type == 'string' && !(isset($GLOBALS['is_analyse']) && $GLOBALS['is_analyse'])) {                        if ($_SESSION['tmp_user_values']['display_binary']) {                            // user asked to see the real contents of BINARY                            // fields                            if ($_SESSION['tmp_user_values']['display_binary_as_hex'] && PMA_contains_nonprintable_ascii($row[$i])) {                                $row[$i] = bin2hex($row[$i]);                            } else {                                $row[$i] = htmlspecialchars(PMA_replace_binary_contents($row[$i]));                            }                        } else {                            // we show the BINARY message and field's size                            // (or maybe use a transformation)                            $row[$i] = PMA_handle_non_printable_contents('BINARY', $row[$i], $transform_function, $transform_options, $default_function, $meta, $_url_params);                            $formatted = true;                        }                    }                    if ($formatted) {                        $vertical_display['data'][$row_no][$i]     = PMA_buildValueDisplay($class, $condition_field, $row[$i]);                    } else {                        // transform functions may enable no-wrapping:                        $function_nowrap = $transform_function . '_nowrap';                        $bool_nowrap = (($default_function != $transform_function && function_exists($function_nowrap)) ? $function_nowrap($transform_options) : false);                        // do not wrap if date field type                        $nowrap = ((preg_match('@DATE|TIME@i', $meta->type) || $bool_nowrap) ? ' nowrap' : '');                        $where_comparison = ' = \'' . PMA_sqlAddSlashes($row[$i]) . '\'';                        $vertical_display['data'][$row_no][$i]     = '<td ' . PMA_prepare_row_data($class, $condition_field, $analyzed_sql, $meta, $map, $row[$i], $transform_function, $default_function, $nowrap, $where_comparison, $transform_options, $is_field_truncated);                    }                } else {                    $vertical_display['data'][$row_no][$i]     = PMA_buildEmptyDisplay($class, $condition_field, $meta);                }            }            // output stored cell            if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'            ) {                echo $vertical_display['data'][$row_no][$i];            }            if (isset($vertical_display['rowdata'][$i][$row_no])) {                $vertical_display['rowdata'][$i][$row_no] .= $vertical_display['data'][$row_no][$i];            } else {                $vertical_display['rowdata'][$i][$row_no] = $vertical_display['data'][$row_no][$i];            }        } // end for (2)        // 3. Displays the modify/delete links on the right if required        if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')            && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')        ) {            if (! isset($js_conf)) {                $js_conf = '';            }            echo PMA_generateCheckboxAndLinks('right', $del_url, $is_display, $row_no, $where_clause, $where_clause_html, $condition_array, $del_query, 'r', $edit_url, $copy_url, $edit_anchor_class, $edit_str, $copy_str, $del_str, $js_conf);        } // end if (3)        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            ?></tr>            <?php        } // end if        // 4. Gather links of del_urls and edit_urls in an array for later        //    output        if (! isset($vertical_display['edit'][$row_no])) {            $vertical_display['edit'][$row_no]       = '';            $vertical_display['copy'][$row_no]       = '';            $vertical_display['delete'][$row_no]     = '';            $vertical_display['row_delete'][$row_no] = '';        }        $vertical_class = ' row_' . $row_no;        if ($GLOBALS['cfg']['BrowsePointerEnable'] == true) {            $vertical_class .= ' vpointer';        }        if ($GLOBALS['cfg']['BrowseMarkerEnable'] == true) {            $vertical_class .= ' vmarker';        }        if (!empty($del_url) && $is_display['del_lnk'] != 'kp') {            $vertical_display['row_delete'][$row_no] .= PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, '[%_PMA_CHECKBOX_DIR_%]', $alternating_color_class . $vertical_class);        } else {            unset($vertical_display['row_delete'][$row_no]);        }        if (isset($edit_url)) {            $vertical_display['edit'][$row_no]   .= PMA_generateEditLink($edit_url, $alternating_color_class . ' ' . $edit_anchor_class . $vertical_class, $edit_str, $where_clause, $where_clause_html);        } else {            unset($vertical_display['edit'][$row_no]);        }        if (isset($copy_url)) {            $vertical_display['copy'][$row_no]   .= PMA_generateCopyLink($copy_url, $copy_str, $where_clause, $where_clause_html, $alternating_color_class . $vertical_class);        } else {            unset($vertical_display['copy'][$row_no]);        }        if (isset($del_url)) {            if (! isset($js_conf)) {                $js_conf = '';            }            $vertical_display['delete'][$row_no] .= PMA_generateDeleteLink($del_url, $del_str, $js_conf, $alternating_color_class . $vertical_class);        } else {            unset($vertical_display['delete'][$row_no]);        }        echo (($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal' || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped') ? "\n" : '');        $row_no++;    } // end while    // this is needed by PMA_displayTable() to generate the proper param    // in the multi-edit and multi-delete form    return $clause_is_unique;} // end of the 'PMA_displayTableBody()' function/** * Do display the result table with the vertical direction mode. * * @return  boolean  always true * * @global  array    $vertical_display the information to display * * @access  private * * @see     PMA_displayTable() */function PMA_displayVerticalTable(){    global $vertical_display;    // Displays "multi row delete" link at top if required    if ($GLOBALS['cfg']['RowActionLinks'] != 'right'        && is_array($vertical_display['row_delete'])        && (count($vertical_display['row_delete']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if ($GLOBALS['cfg']['RowActionLinks'] == 'none') {            // if we are not showing the RowActionLinks, then we need to show the Multi-Row-Action checkboxes            echo '<th></th>' . "\n";        }        echo $vertical_display['textbtn'];        $cell_displayed = 0;        foreach ($vertical_display['row_delete'] as $val) {            if (($cell_displayed != 0) && ($_SESSION['tmp_user_values']['repeat_cells'] != 0) && !($cell_displayed % $_SESSION['tmp_user_values']['repeat_cells'])) {                echo '<th' .                     (($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? ' rowspan="4"' : '') .                     '></th>' . "\n";            }            echo str_replace('[%_PMA_CHECKBOX_DIR_%]', '_left', $val);            $cell_displayed++;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "edit" link at top if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['edit'])        && (count($vertical_display['edit']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['edit'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "copy" link at top if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['copy'])        && (count($vertical_display['copy']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['copy'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "delete" link at top if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['delete'])        && (count($vertical_display['delete']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['edit']) && ! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['delete'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    if (PMA_isSelect()) {        // prepare to get the column order, if available        $pmatable = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);    } else {        $col_order = false;        $col_visib = false;    }    // Displays data    foreach ($vertical_display['desc'] AS $j => $val) {        // assign appropriate key with current column order        $key = $col_order ? $col_order[$j] : $j;        echo '<tr' . (($col_visib && !$col_visib[$j]) ? ' class="hide"' : '') . '>' . "\n";        echo $val;        $cell_displayed = 0;        foreach ($vertical_display['rowdata'][$key] as $subval) {            if (($cell_displayed != 0) && ($_SESSION['tmp_user_values']['repeat_cells'] != 0) and !($cell_displayed % $_SESSION['tmp_user_values']['repeat_cells'])) {                echo $val;            }            echo $subval;            $cell_displayed++;        } // end while        echo '</tr>' . "\n";    } // end while    // Displays "multi row delete" link at bottom if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['row_delete'])        && (count($vertical_display['row_delete']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        echo $vertical_display['textbtn'];        $cell_displayed = 0;        foreach ($vertical_display['row_delete'] as $val) {            if (($cell_displayed != 0) && ($_SESSION['tmp_user_values']['repeat_cells'] != 0) && !($cell_displayed % $_SESSION['tmp_user_values']['repeat_cells'])) {                echo '<th' .                     (($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? ' rowspan="4"' : '') .                     '></th>' . "\n";            }            echo str_replace('[%_PMA_CHECKBOX_DIR_%]', '_right', $val);            $cell_displayed++;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "edit" link at bottom if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['edit'])        && (count($vertical_display['edit']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['edit'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "copy" link at bottom if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['copy'])        && (count($vertical_display['copy']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['copy'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "delete" link at bottom if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['delete'])        && (count($vertical_display['delete']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['edit']) && ! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['delete'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    }    return true;} // end of the 'PMA_displayVerticalTable' function/** * Checks the posted options for viewing query resutls * and sets appropriate values in the session. * * @todo    make maximum remembered queries configurable * @todo    move/split into SQL class!? * @todo    currently this is called twice unnecessary * @todo    ignore LIMIT and ORDER in query!? * * @return nothing */function PMA_displayTable_checkConfigParams(){    $sql_md5 = md5($GLOBALS['sql_query']);    $_SESSION['tmp_user_values']['query'][$sql_md5]['sql'] = $GLOBALS['sql_query'];    if (PMA_isValid($_REQUEST['disp_direction'], array('horizontal', 'vertical', 'horizontalflipped'))) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['disp_direction'] = $_REQUEST['disp_direction'];        unset($_REQUEST['disp_direction']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['disp_direction'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['disp_direction'] = $GLOBALS['cfg']['DefaultDisplay'];    }    if (PMA_isValid($_REQUEST['repeat_cells'], 'numeric')) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['repeat_cells'] = $_REQUEST['repeat_cells'];        unset($_REQUEST['repeat_cells']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['repeat_cells'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['repeat_cells'] = $GLOBALS['cfg']['RepeatCells'];    }    // as this is a form value, the type is always string so we cannot    // use PMA_isValid($_REQUEST['session_max_rows'], 'integer')    if ((PMA_isValid($_REQUEST['session_max_rows'], 'numeric')        && (int) $_REQUEST['session_max_rows'] == $_REQUEST['session_max_rows'])        || $_REQUEST['session_max_rows'] == 'all'    ) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'] = $_REQUEST['session_max_rows'];        unset($_REQUEST['session_max_rows']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'] = $GLOBALS['cfg']['MaxRows'];    }    if (PMA_isValid($_REQUEST['pos'], 'numeric')) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['pos'] = $_REQUEST['pos'];        unset($_REQUEST['pos']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['pos'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['pos'] = 0;    }    if (PMA_isValid($_REQUEST['display_text'], array('P', 'F'))) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_text'] = $_REQUEST['display_text'];        unset($_REQUEST['display_text']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['display_text'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_text'] = 'P';    }    if (PMA_isValid($_REQUEST['relational_display'], array('K', 'D'))) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['relational_display'] = $_REQUEST['relational_display'];        unset($_REQUEST['relational_display']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['relational_display'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['relational_display'] = 'K';    }    if (PMA_isValid($_REQUEST['geometry_display'], array('WKT', 'WKB', 'GEOM'))) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['geometry_display'] = $_REQUEST['geometry_display'];        unset($_REQUEST['geometry_display']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['geometry_display'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['geometry_display'] = 'GEOM';    }    if (isset($_REQUEST['display_binary'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary'] = true;        unset($_REQUEST['display_binary']);    } elseif (isset($_REQUEST['display_options_form'])) {        // we know that the checkbox was unchecked        unset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary']);    } elseif (isset($_REQUEST['full_text_button'])) {        // do nothing to keep the value that is there in the session    } else {        // selected by default because some operations like OPTIMIZE TABLE        // and all queries involving functions return "binary" contents,        // according to low-level field flags        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary'] = true;    }    if (isset($_REQUEST['display_binary_as_hex'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary_as_hex'] = true;        unset($_REQUEST['display_binary_as_hex']);    } elseif (isset($_REQUEST['display_options_form'])) {        // we know that the checkbox was unchecked        unset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary_as_hex']);    } elseif (isset($_REQUEST['full_text_button'])) {        // do nothing to keep the value that is there in the session    } else {        // display_binary_as_hex config option        if (isset($GLOBALS['cfg']['DisplayBinaryAsHex']) && true === $GLOBALS['cfg']['DisplayBinaryAsHex']) {            $_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary_as_hex'] = true;        }    }    if (isset($_REQUEST['display_blob'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_blob'] = true;        unset($_REQUEST['display_blob']);    } elseif (isset($_REQUEST['display_options_form'])) {        // we know that the checkbox was unchecked        unset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_blob']);    }    if (isset($_REQUEST['hide_transformation'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['hide_transformation'] = true;        unset($_REQUEST['hide_transformation']);    } elseif (isset($_REQUEST['display_options_form'])) {        // we know that the checkbox was unchecked        unset($_SESSION['tmp_user_values']['query'][$sql_md5]['hide_transformation']);    }    // move current query to the last position, to be removed last    // so only least executed query will be removed if maximum remembered queries    // limit is reached    $tmp = $_SESSION['tmp_user_values']['query'][$sql_md5];    unset($_SESSION['tmp_user_values']['query'][$sql_md5]);    $_SESSION['tmp_user_values']['query'][$sql_md5] = $tmp;    // do not exceed a maximum number of queries to remember    if (count($_SESSION['tmp_user_values']['query']) > 10) {        array_shift($_SESSION['tmp_user_values']['query']);        //echo 'deleting one element ...';    }    // populate query configuration    $_SESSION['tmp_user_values']['display_text'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['display_text'];    $_SESSION['tmp_user_values']['relational_display'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['relational_display'];    $_SESSION['tmp_user_values']['geometry_display'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['geometry_display'];    $_SESSION['tmp_user_values']['display_binary'] = isset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary']) ? true : false;    $_SESSION['tmp_user_values']['display_binary_as_hex'] = isset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary_as_hex']) ? true : false;    $_SESSION['tmp_user_values']['display_blob'] = isset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_blob']) ? true : false;    $_SESSION['tmp_user_values']['hide_transformation'] = isset($_SESSION['tmp_user_values']['query'][$sql_md5]['hide_transformation']) ? true : false;    $_SESSION['tmp_user_values']['pos'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['pos'];    $_SESSION['tmp_user_values']['max_rows'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'];    $_SESSION['tmp_user_values']['repeat_cells'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['repeat_cells'];    $_SESSION['tmp_user_values']['disp_direction'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['disp_direction'];    /*     * debugging    echo '<pre>';    var_dump($_SESSION['tmp_user_values']);    echo '</pre>';     */}/** * Displays a table of results returned by a SQL query. * This function is called by the "sql.php" script. * * @param integer &$dt_result     the link id associated to the query which results have *                                to be displayed * @param array   &$the_disp_mode the display mode * @param array   $analyzed_sql   the analyzed query * * @global  string   $db                the database name * @global  string   $table             the table name * @global  string   $goto              the URL to go back in case of errors * @global  string   $sql_query         the current SQL query * @global  integer  $num_rows          the total number of rows returned by the *                                      SQL query * @global  integer  $unlim_num_rows    the total number of rows returned by the *                                      SQL query without any programmatically *                                      appended "LIMIT" clause * @global  array    $fields_meta       the list of fields properties * @global  integer  $fields_cnt        the total number of fields returned by *                                      the SQL query * @global  array    $vertical_display  informations used with vertical display *                                      mode * @global  array    $highlight_columns column names to highlight * @global  array    $cfgRelation       the relation settings * @global  array    $showtable         table definitions * * @access  private * * @see     PMA_showMessage(), PMA_setDisplayMode(), *          PMA_displayTableNavigation(), PMA_displayTableHeaders(), *          PMA_displayTableBody(), PMA_displayResultsOperations() * * @return nothing */function PMA_displayTable(&$dt_result, &$the_disp_mode, $analyzed_sql){    global $db, $table, $goto;    global $sql_query, $num_rows, $unlim_num_rows, $fields_meta, $fields_cnt;    global $vertical_display, $highlight_columns;    global $cfgRelation;    global $showtable;    // why was this called here? (already called from sql.php)    //PMA_displayTable_checkConfigParams();    /**     * @todo move this to a central place     * @todo for other future table types     */    $is_innodb = (isset($showtable['Type']) && $showtable['Type'] == 'InnoDB');    if ($is_innodb        && ! isset($analyzed_sql[0]['queryflags']['union'])        && ! isset($analyzed_sql[0]['table_ref'][1]['table_name'])        && (empty($analyzed_sql[0]['where_clause']) || $analyzed_sql[0]['where_clause'] == '1 ')    ) {        // "j u s t   b r o w s i n g"        $pre_count = '~';        $after_count = PMA_showHint(PMA_sanitize(__('May be approximate. See [a@./Documentation.html#faq3_11@Documentation]FAQ 3.11[/a]')));    } else {        $pre_count = '';        $after_count = '';    }    // 1. ----- Prepares the work -----    // 1.1 Gets the informations about which functionalities should be    //     displayed    $total      = '';    $is_display = PMA_setDisplayMode($the_disp_mode, $total);    // 1.2 Defines offsets for the next and previous pages    if ($is_display['nav_bar'] == '1') {        if ($_SESSION['tmp_user_values']['max_rows'] == 'all') {            $pos_next     = 0;            $pos_prev     = 0;        } else {            $pos_next     = $_SESSION['tmp_user_values']['pos'] + $_SESSION['tmp_user_values']['max_rows'];            $pos_prev     = $_SESSION['tmp_user_values']['pos'] - $_SESSION['tmp_user_values']['max_rows'];            if ($pos_prev < 0) {                $pos_prev = 0;            }        }    } // end if    // 1.3 Find the sort expression    // we need $sort_expression and $sort_expression_nodirection    // even if there are many table references    if (! empty($analyzed_sql[0]['order_by_clause'])) {        $sort_expression = trim(str_replace('  ', ' ', $analyzed_sql[0]['order_by_clause']));        /**         * Get rid of ASC|DESC         */        preg_match('@(.*)([[:space:]]*(ASC|DESC))@si', $sort_expression, $matches);        $sort_expression_nodirection = isset($matches[1]) ? trim($matches[1]) : $sort_expression;        $sort_direction = isset($matches[2]) ? trim($matches[2]) : '';        unset($matches);    } else {        $sort_expression = $sort_expression_nodirection = $sort_direction = '';    }    // 1.4 Prepares display of first and last value of the sorted column    if (! empty($sort_expression_nodirection)) {        if (strpos($sort_expression_nodirection, '.') === false) {            $sort_table = $table;            $sort_column = $sort_expression_nodirection;        } else {            list($sort_table, $sort_column) = explode('.', $sort_expression_nodirection);        }        $sort_table = PMA_unQuote($sort_table);        $sort_column = PMA_unQuote($sort_column);        // find the sorted column index in row result        // (this might be a multi-table query)        $sorted_column_index = false;        foreach ($fields_meta as $key => $meta) {            if ($meta->table == $sort_table && $meta->name == $sort_column) {                $sorted_column_index = $key;                break;            }        }        if ($sorted_column_index !== false) {            // fetch first row of the result set            $row = PMA_DBI_fetch_row($dt_result);            // initializing default arguments            $default_function = 'default_function';            $transform_function = $default_function;            $transform_options = array();            // check for non printable sorted row data            $meta = $fields_meta[$sorted_column_index];            if (stristr($meta->type, 'BLOB') || $meta->type == 'geometry') {                $column_for_first_row = PMA_handle_non_printable_contents($meta->type, $row[$sorted_column_index], $transform_function, $transform_options, $default_function, $meta, null);            } else {                $column_for_first_row = $row[$sorted_column_index];            }            $column_for_first_row = strtoupper(substr($column_for_first_row, 0, $GLOBALS['cfg']['LimitChars']));            // fetch last row of the result set            PMA_DBI_data_seek($dt_result, $num_rows - 1);            $row = PMA_DBI_fetch_row($dt_result);            // check for non printable sorted row data            $meta = $fields_meta[$sorted_column_index];            if (stristr($meta->type, 'BLOB') || $meta->type == 'geometry') {                $column_for_last_row = PMA_handle_non_printable_contents($meta->type, $row[$sorted_column_index], $transform_function, $transform_options, $default_function, $meta, null);            } else {                $column_for_last_row = $row[$sorted_column_index];            }            $column_for_last_row = strtoupper(substr($column_for_last_row, 0, $GLOBALS['cfg']['LimitChars']));            // reset to first row for the loop in PMA_displayTableBody()            PMA_DBI_data_seek($dt_result, 0);            // we could also use here $sort_expression_nodirection            $sorted_column_message = ' [' . htmlspecialchars($sort_column) . ': <strong>' . htmlspecialchars($column_for_first_row) . ' - ' . htmlspecialchars($column_for_last_row) . '</strong>]';            unset($row, $column_for_first_row, $column_for_last_row, $meta, $default_function, $transform_function, $transform_options);        }        unset($sorted_column_index, $sort_table, $sort_column);    }    // 2. ----- Displays the top of the page -----    // 2.1 Displays a messages with position informations    if ($is_display['nav_bar'] == '1' && isset($pos_next)) {        if (isset($unlim_num_rows) && $unlim_num_rows != $total) {            $selectstring = ', ' . $unlim_num_rows . ' ' . __('in query');        } else {            $selectstring = '';        }        if (! empty($analyzed_sql[0]['limit_clause'])) {            $limit_data = PMA_analyzeLimitClause($analyzed_sql[0]['limit_clause']);            $first_shown_rec = $limit_data['start'];            if ($limit_data['length'] < $total) {                $last_shown_rec = $limit_data['start'] + $limit_data['length'] - 1;            } else {                $last_shown_rec = $limit_data['start'] + $total - 1;            }        } elseif ($_SESSION['tmp_user_values']['max_rows'] == 'all' || $pos_next > $total) {            $first_shown_rec = $_SESSION['tmp_user_values']['pos'];            $last_shown_rec  = $total - 1;        } else {            $first_shown_rec = $_SESSION['tmp_user_values']['pos'];            $last_shown_rec  = $pos_next - 1;        }        if (PMA_Table::isView($db, $table)            && $total == $GLOBALS['cfg']['MaxExactCountViews']        ) {            $message = PMA_Message::notice(__('This view has at least this number of rows. Please refer to %sdocumentation%s.'));            $message->addParam('[a@./Documentation.html#cfg_MaxExactCount@_blank]');            $message->addParam('[/a]');            $message_view_warning = PMA_showHint($message);        } else {            $message_view_warning = false;        }        $message = PMA_Message::success(__('Showing rows'));        $message->addMessage($first_shown_rec);        if ($message_view_warning) {            $message->addMessage('...', ' - ');            $message->addMessage($message_view_warning);            $message->addMessage('(');        } else {            $message->addMessage($last_shown_rec, ' - ');            $message->addMessage(' (');            $message->addMessage($pre_count  . PMA_formatNumber($total, 0));            $message->addString(__('total'));            if (!empty($after_count)) {                $message->addMessage($after_count);            }            $message->addMessage($selectstring, '');            $message->addMessage(', ', '');        }        $messagge_qt = PMA_Message::notice(__('Query took %01.4f sec'));        $messagge_qt->addParam($GLOBALS['querytime']);        $message->addMessage($messagge_qt, '');        $message->addMessage(')', '');        $message->addMessage(isset($sorted_column_message) ? $sorted_column_message : '', '');        PMA_showMessage($message, $sql_query, 'success');    } elseif (! isset($GLOBALS['printview']) || $GLOBALS['printview'] != '1') {        PMA_showMessage(__('Your SQL query has been executed successfully'), $sql_query, 'success');    }    // 2.3 Displays the navigation bars    if (! strlen($table)) {        if (isset($analyzed_sql[0]['query_type'])            && $analyzed_sql[0]['query_type'] == 'SELECT'        ) {            // table does not always contain a real table name,            // for example in MySQL 5.0.x, the query SHOW STATUS            // returns STATUS as a table name            $table = $fields_meta[0]->table;        } else {            $table = '';        }    }    if ($is_display['nav_bar'] == '1' && empty($analyzed_sql[0]['limit_clause'])) {        PMA_displayTableNavigation($pos_next, $pos_prev, $sql_query, 'top_direction_dropdown');        echo "\n";    } elseif (! isset($GLOBALS['printview']) || $GLOBALS['printview'] != '1') {        echo "\n" . '<br /><br />' . "\n";    }    // 2b ----- Get field references from Database -----    // (see the 'relation' configuration variable)    // initialize map    $map = array();    // find tables    $target=array();    if (isset($analyzed_sql[0]['table_ref']) && is_array($analyzed_sql[0]['table_ref'])) {        foreach ($analyzed_sql[0]['table_ref'] AS $table_ref_position => $table_ref) {            $target[] = $analyzed_sql[0]['table_ref'][$table_ref_position]['table_true_name'];        }    }    $tabs    = '(\'' . join('\',\'', $target) . '\')';    if (! strlen($table)) {        $exist_rel = false;    } else {        // To be able to later display a link to the related table,        // we verify both types of relations: either those that are        // native foreign keys or those defined in the phpMyAdmin        // configuration storage. If no PMA storage, we won't be able        // to use the "column to display" notion (for example show        // the name related to a numeric id).        $exist_rel = PMA_getForeigners($db, $table, '', 'both');        if ($exist_rel) {            foreach ($exist_rel AS $master_field => $rel) {                $display_field = PMA_getDisplayField($rel['foreign_db'], $rel['foreign_table']);                $map[$master_field] = array($rel['foreign_table'],                                      $rel['foreign_field'],                                      $display_field,                                      $rel['foreign_db']);            } // end while        } // end if    } // end if    // end 2b    // 3. ----- Displays the results table -----    PMA_displayTableHeaders($is_display, $fields_meta, $fields_cnt, $analyzed_sql, $sort_expression, $sort_expression_nodirection, $sort_direction);    $url_query = '';    echo '<tbody>' . "\n";    $clause_is_unique = PMA_displayTableBody($dt_result, $is_display, $map, $analyzed_sql);    // vertical output case    if ($_SESSION['tmp_user_values']['disp_direction'] == 'vertical') {        PMA_displayVerticalTable();    } // end if    unset($vertical_display);    echo '</tbody>' . "\n";    ?></table>    <?php    // 4. ----- Displays the link for multi-fields edit and delete    if ($is_display['del_lnk'] == 'dr' && $is_display['del_lnk'] != 'kp') {        $delete_text = $is_display['del_lnk'] == 'dr' ? __('Delete') : __('Kill');        $_url_params = array(            'db'        => $db,            'table'     => $table,            'sql_query' => $sql_query,            'goto'      => $goto,        );        $uncheckall_url = 'sql.php' . PMA_generate_common_url($_url_params);        $_url_params['checkall'] = '1';        $checkall_url = 'sql.php' . PMA_generate_common_url($_url_params);        if ($_SESSION['tmp_user_values']['disp_direction'] == 'vertical') {            $checkall_params['onclick'] = 'if (setCheckboxes(\'resultsForm\', true)) return false;';            $uncheckall_params['onclick'] = 'if (setCheckboxes(\'resultsForm\', false)) return false;';        } else {            $checkall_params['onclick'] = 'if (markAllRows(\'resultsForm\')) return false;';            $uncheckall_params['onclick'] = 'if (unMarkAllRows(\'resultsForm\')) return false;';        }        $checkall_link = PMA_linkOrButton($checkall_url, __('Check All'), $checkall_params, false);        $uncheckall_link = PMA_linkOrButton($uncheckall_url, __('Uncheck All'), $uncheckall_params, false);        if ($_SESSION['tmp_user_values']['disp_direction'] != 'vertical') {            echo '<img class="selectallarrow" width="38" height="22"'                .' src="' . $GLOBALS['pmaThemeImage'] . 'arrow_' . $GLOBALS['text_dir'] . '.png' . '"'                .' alt="' . __('With selected:') . '" />';        }        echo $checkall_link . "\n"            .' / ' . "\n"            .$uncheckall_link . "\n"            .'<i>' . __('With selected:') . '</i>' . "\n";        PMA_buttonOrImage(            'submit_mult', 'mult_submit', 'submit_mult_change',            __('Change'), 'b_edit.png', 'edit'        );        PMA_buttonOrImage(            'submit_mult', 'mult_submit', 'submit_mult_delete',            $delete_text, 'b_drop.png', 'delete'        );        if (isset($analyzed_sql[0]) && $analyzed_sql[0]['querytype'] == 'SELECT') {            PMA_buttonOrImage(                'submit_mult', 'mult_submit', 'submit_mult_export',                __('Export'), 'b_tblexport.png', 'export'            );        }        echo "\n";        echo '<input type="hidden" name="sql_query"'            .' value="' . htmlspecialchars($sql_query) . '" />' . "\n";        if (! empty($GLOBALS['url_query'])) {            echo '<input type="hidden" name="url_query"'                .' value="' . $GLOBALS['url_query'] . '" />' . "\n";        }        echo '<input type="hidden" name="clause_is_unique"'            .' value="' . $clause_is_unique . '" />' . "\n";        echo '</form>' . "\n";    }    // 5. ----- Displays the navigation bar at the bottom if required -----    if ($is_display['nav_bar'] == '1' && empty($analyzed_sql[0]['limit_clause'])) {        echo '<br />' . "\n";        PMA_displayTableNavigation($pos_next, $pos_prev, $sql_query, 'bottom_direction_dropdown');    } elseif (! isset($GLOBALS['printview']) || $GLOBALS['printview'] != '1') {        echo "\n" . '<br /><br />' . "\n";    }    // 6. ----- Displays "Query results operations"    if (! isset($GLOBALS['printview']) || $GLOBALS['printview'] != '1') {        PMA_displayResultsOperations($the_disp_mode, $analyzed_sql);    }} // end of the 'PMA_displayTable()' functionfunction default_function($buffer){    $buffer = htmlspecialchars($buffer);    $buffer = str_replace("\011", ' &nbsp;&nbsp;&nbsp;', str_replace('  ', ' &nbsp;', $buffer));    $buffer = preg_replace("@((\015\012)|(\015)|(\012))@", '<br />', $buffer);    return $buffer;}/** * Displays operations that are available on results. * * @param array $the_disp_mode the display mode * @param array $analyzed_sql  the analyzed query * * @global  string   $db                the database name * @global  string   $table             the table name * @global  string   $sql_query         the current SQL query * @global  integer  $unlim_num_rows    the total number of rows returned by the *                                      SQL query without any programmatically *                                      appended "LIMIT" clause * * @access  private * * @see     PMA_showMessage(), PMA_setDisplayMode(), *          PMA_displayTableNavigation(), PMA_displayTableHeaders(), *          PMA_displayTableBody(), PMA_displayResultsOperations() * * @return nothing */function PMA_displayResultsOperations($the_disp_mode, $analyzed_sql){    global $db, $table, $sql_query, $unlim_num_rows, $fields_meta;    $header_shown = false;    $header = '<fieldset><legend>' . __('Query results operations') . '</legend>';    if ($the_disp_mode[6] == '1' || $the_disp_mode[9] == '1') {        // Displays "printable view" link if required        if ($the_disp_mode[9] == '1') {            if (!$header_shown) {                echo $header;                $header_shown = true;            }            $_url_params = array(                'db'        => $db,                'table'     => $table,                'printview' => '1',                'sql_query' => $sql_query,            );            $url_query = PMA_generate_common_url($_url_params);            echo PMA_linkOrButton(                'sql.php' . $url_query,                PMA_getIcon('b_print.png', __('Print view'), true),                '', true, true, 'print_view'            ) . "\n";            if ($_SESSION['tmp_user_values']['display_text']) {                $_url_params['display_text'] = 'F';                echo PMA_linkOrButton(                    'sql.php' . PMA_generate_common_url($_url_params),                    PMA_getIcon('b_print.png', __('Print view (with full texts)'), true),                    '', true, true, 'print_view'                ) . "\n";                unset($_url_params['display_text']);            }        } // end displays "printable view"    }    // Export link    // (the url_query has extra parameters that won't be used to export)    // (the single_table parameter is used in display_export.lib.php    //  to hide the SQL and the structure export dialogs)    // If the parser found a PROCEDURE clause    // (most probably PROCEDURE ANALYSE()) it makes no sense to    // display the Export link).    if (isset($analyzed_sql[0]) && $analyzed_sql[0]['querytype'] == 'SELECT' && ! isset($printview) && ! isset($analyzed_sql[0]['queryflags']['procedure'])) {        if (isset($analyzed_sql[0]['table_ref'][0]['table_true_name']) && ! isset($analyzed_sql[0]['table_ref'][1]['table_true_name'])) {            $_url_params['single_table'] = 'true';        }        if (!$header_shown) {            echo $header;            $header_shown = true;        }        $_url_params['unlim_num_rows'] = $unlim_num_rows;        /**         * At this point we don't know the table name; this can happen         * for example with a query like         * SELECT bike_code FROM (SELECT bike_code FROM bikes) tmp         * As a workaround we set in the table parameter the name of the         * first table of this database, so that tbl_export.php and         * the script it calls do not fail         */        if (empty($_url_params['table']) && !empty($_url_params['db'])) {            $_url_params['table'] = PMA_DBI_fetch_value("SHOW TABLES");            /* No result (probably no database selected) */            if ($_url_params['table'] === false) {                unset($_url_params['table']);            }        }        echo PMA_linkOrButton(            'tbl_export.php' . PMA_generate_common_url($_url_params),            PMA_getIcon('b_tblexport.png', __('Export'), true),            '', true, true, ''        ) . "\n";        // show chart        echo PMA_linkOrButton(            'tbl_chart.php' . PMA_generate_common_url($_url_params),            PMA_getIcon('b_chart.png', __('Display chart'), true),            '', true, true, ''        ) . "\n";        // show GIS chart        $geometry_found = false;        // If atleast one geometry field is found        foreach ($fields_meta as $meta) {            if ($meta->type == 'geometry') {                $geometry_found = true;                break;            }        }        if ($geometry_found) {            echo PMA_linkOrButton(                'tbl_gis_visualization.php' . PMA_generate_common_url($_url_params),                PMA_getIcon('b_globe.gif', __('Visualize GIS data'), true),                '', true, true, ''            ) . "\n";        }    }    // CREATE VIEW    /**     *     * @todo detect privileges to create a view     *       (but see 2006-01-19 note in display_create_table.lib.php,     *        I think we cannot detect db-specific privileges reliably)     * Note: we don't display a Create view link if we found a PROCEDURE clause     */    if (!$header_shown) {        echo $header;        $header_shown = true;    }    if (!PMA_DRIZZLE && !isset($analyzed_sql[0]['queryflags']['procedure'])) {        echo PMA_linkOrButton(            'view_create.php' . $url_query,            PMA_getIcon('b_views.png', __('Create view'), true),            '', true, true, ''        ) . "\n";    }    if ($header_shown) {        echo '</fieldset><br />';    }}/** * Verifies what to do with non-printable contents (binary or BLOB) * in Browse mode. * * @param string $category           BLOB|BINARY|GEOMETRY * @param string $content            the binary content * @param string $transform_function transformation function * @param string $transform_options  transformation parameters * @param string $default_function   default transformation function * @param object $meta               the meta-information about this field * @param array  $url_params         parameters that should go to the download link * * @return  mixed  string or float */function PMA_handle_non_printable_contents($category, $content, $transform_function, $transform_options, $default_function, $meta, $url_params = array()){    $result = '[' . $category;    if (is_null($content)) {        $result .= ' - NULL';        $size = 0;    } elseif (isset($content)) {        $size = strlen($content);        $display_size = PMA_formatByteDown($size, 3, 1);        $result .= ' - '. $display_size[0] . ' ' . $display_size[1];    }    $result .= ']';    if (strpos($transform_function, 'octetstream')) {        $result = $content;    }    if ($size > 0) {        if ($default_function != $transform_function) {            $result = $transform_function($result, $transform_options, $meta);        } else {            $result = $default_function($result, array(), $meta);            if (stristr($meta->type, 'BLOB') && $_SESSION['tmp_user_values']['display_blob']) {                // in this case, restart from the original $content                $result = htmlspecialchars(PMA_replace_binary_contents($content));            }            /* Create link to download */            if (count($url_params) > 0) {                $result = '<a href="tbl_get_field.php' . PMA_generate_common_url($url_params) . '">' . $result . '</a>';            }        }    }    return($result);}/** * Prepares the displayable content of a data cell in Browse mode, * taking into account foreign key description field and transformations * * @param string $class              css classes for the td element * @param bool   $condition_field    whether the column is a part of the where clause * @param string $analyzed_sql       the analyzed query * @param object $meta               the meta-information about this field * @param array  $map                the list of relations * @param string $data               data * @param string $transform_function transformation function * @param string $default_function   default function * @param string $nowrap             'nowrap' if the content should not be wrapped * @param string $where_comparison   data for the where cluase * @param array  $transform_options  array of options for transformation * @param bool   $is_field_truncated whether the field is truncated * * @return  string  formatted data */function PMA_prepare_row_data($class, $condition_field, $analyzed_sql, $meta, $map, $data, $transform_function, $default_function, $nowrap, $where_comparison, $transform_options, $is_field_truncated ){    $result = ' class="' . PMA_addClass($class, $condition_field, $meta, $nowrap, $is_field_truncated, $transform_function, $default_function) . '">';    if (isset($analyzed_sql[0]['select_expr']) && is_array($analyzed_sql[0]['select_expr'])) {        foreach ($analyzed_sql[0]['select_expr'] AS $select_expr_position => $select_expr) {            $alias = $analyzed_sql[0]['select_expr'][$select_expr_position]['alias'];            if (isset($alias) && strlen($alias)) {                $true_column = $analyzed_sql[0]['select_expr'][$select_expr_position]['column'];                if ($alias == $meta->name) {                    // this change in the parameter does not matter                    // outside of the function                    $meta->name = $true_column;                } // end if            } // end if        } // end foreach    } // end if    if (isset($map[$meta->name])) {        // Field to display from the foreign table?        if (isset($map[$meta->name][2]) && strlen($map[$meta->name][2])) {            $dispsql     = 'SELECT ' . PMA_backquote($map[$meta->name][2])                . ' FROM ' . PMA_backquote($map[$meta->name][3])                . '.' . PMA_backquote($map[$meta->name][0])                . ' WHERE ' . PMA_backquote($map[$meta->name][1])                . $where_comparison;            $dispresult  = PMA_DBI_try_query($dispsql, null, PMA_DBI_QUERY_STORE);            if ($dispresult && PMA_DBI_num_rows($dispresult) > 0) {                list($dispval) = PMA_DBI_fetch_row($dispresult, 0);            } else {                $dispval = __('Link not found');            }            @PMA_DBI_free_result($dispresult);        } else {            $dispval     = '';        } // end if... else...        if (isset($GLOBALS['printview']) && $GLOBALS['printview'] == '1') {            $result .= ($transform_function != $default_function ? $transform_function($data, $transform_options, $meta) : $transform_function($data, array(), $meta)) . ' <code>[-&gt;' . $dispval . ']</code>';        } else {            if ('K' == $_SESSION['tmp_user_values']['relational_display']) {                // user chose "relational key" in the display options, so                // the title contains the display field                $title = (! empty($dispval))? ' title="' . htmlspecialchars($dispval) . '"' : '';            } else {                $title = ' title="' . htmlspecialchars($data) . '"';            }            $_url_params = array(                'db'    => $map[$meta->name][3],                'table' => $map[$meta->name][0],                'pos'   => '0',                'sql_query' => 'SELECT * FROM '                                    . PMA_backquote($map[$meta->name][3]) . '.' . PMA_backquote($map[$meta->name][0])                                    . ' WHERE ' . PMA_backquote($map[$meta->name][1])                                    . $where_comparison,            );            $result .= '<a href="sql.php' . PMA_generate_common_url($_url_params)                 . '"' . $title . '>';            if ($transform_function != $default_function) {                // always apply a transformation on the real data,                // not on the display field                $result .= $transform_function($data, $transform_options, $meta);            } else {                if ('D' == $_SESSION['tmp_user_values']['relational_display']) {                    // user chose "relational display field" in the                    // display options, so show display field in the cell                    $result .= $transform_function($dispval, array(), $meta);                } else {                    // otherwise display data in the cell                    $result .= $transform_function($data, array(), $meta);                }            }            $result .= '</a>';        }    } else {        $result .= ($transform_function != $default_function ? $transform_function($data, $transform_options, $meta) : $transform_function($data, array(), $meta));    }    $result .= '</td>' . "\n";    return $result;}/** * Generates a checkbox for multi-row submits * * @param string $del_url           delete url * @param array  $is_display        array with explicit indexes for all the display elements * @param string $row_no            the row number * @param string $where_clause_html url encoded where cluase * @param array  $condition_array   array of conditions in the where cluase * @param string $del_query         delete query * @param string $id_suffix         suffix for the id * @param string $class             css classes for the td element * * @return  string  the generated HTML */function PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, $id_suffix, $class){    $ret = '';    if (! empty($del_url) && $is_display['del_lnk'] != 'kp') {        $ret .= '<td ';        if (! empty($class)) {            $ret .= 'class="' . $class . '"';        }        $ret .= ' align="center">'           . '<input type="checkbox" id="id_rows_to_delete' . $row_no . $id_suffix . '" name="rows_to_delete[' . $where_clause_html . ']"'           . ' class="multi_checkbox"'           . ' value="' . htmlspecialchars($del_query) . '" ' . (isset($GLOBALS['checkall']) ? 'checked="checked"' : '') . ' />'           . '<input type="hidden" class="condition_array" value="' . htmlspecialchars(json_encode($condition_array)) . '" />'           . '    </td>';    }    return $ret;}/** * Generates an Edit link * * @param string $edit_url          edit url * @param string $class             css classes for td element * @param string $edit_str          text for the edit link * @param string $where_clause      where cluase * @param string $where_clause_html url encoded where cluase * * @return  string  the generated HTML */function PMA_generateEditLink($edit_url, $class, $edit_str, $where_clause, $where_clause_html){    $ret = '';    if (! empty($edit_url)) {        $ret .= '<td class="' . $class . '" align="center" ' . ' ><span class="nowrap">'           . PMA_linkOrButton($edit_url, $edit_str, array(), false);        /*         * Where clause for selecting this row uniquely is provided as         * a hidden input. Used by jQuery scripts for handling grid editing         */        if (! empty($where_clause)) {            $ret .= '<input type="hidden" class="where_clause" value ="' . $where_clause_html . '" />';        }        $ret .= '</span></td>';    }    return $ret;}/** * Generates an Copy link * * @param string $copy_url          copy url * @param string $copy_str          text for the copy link * @param string $where_clause      where clause * @param string $where_clause_html url encoded where cluase * @param string $class             css classes for the td element * * @return  string  the generated HTML */function PMA_generateCopyLink($copy_url, $copy_str, $where_clause, $where_clause_html, $class){    $ret = '';    if (! empty($copy_url)) {        $ret .= '<td ';        if (! empty($class)) {            $ret .= 'class="' . $class . '" ';        }        $ret .= 'align="center" ' . ' ><span class="nowrap">'           . PMA_linkOrButton($copy_url, $copy_str, array(), false);        /*         * Where clause for selecting this row uniquely is provided as         * a hidden input. Used by jQuery scripts for handling grid editing         */        if (! empty($where_clause)) {            $ret .= '<input type="hidden" class="where_clause" value ="' . $where_clause_html . '" />';        }        $ret .= '</span></td>';    }    return $ret;}/** * Generates a Delete link * * @param string $del_url delete url * @param string $del_str text for the delete link * @param string $js_conf text for the JS confirmation * @param string $class   css classes for the td element * * @return  string  the generated HTML */function PMA_generateDeleteLink($del_url, $del_str, $js_conf, $class){    $ret = '';    if (! empty($del_url)) {        $ret .= '<td ';        if (! empty($class)) {            $ret .= 'class="' . $class . '" ';        }        $ret .= 'align="center" ' . ' >'           . PMA_linkOrButton($del_url, $del_str, $js_conf, false)           . '</td>';    }    return $ret;}/** * Generates checkbox and links at some position (left or right) * (only called for horizontal mode) * * @param string $position          the position of the checkbox and links * @param string $del_url           delete url * @param array  $is_display        array with explicit indexes for all the display elements * @param string $row_no            row number * @param string $where_clause      where clause * @param string $where_clause_html url encoded where cluase * @param array  $condition_array   array of conditions in the where cluase * @param string $del_query         delete query * @param string $id_suffix         suffix for the id * @param string $edit_url          edit url * @param string $copy_url          copy url * @param string $class             css classes for the td elements * @param string $edit_str          text for the edit link * @param string $copy_str          text for the copy link * @param string $del_str           text for the delete link * @param string $js_conf           text for the JS confirmation * * @return  string  the generated HTML */function PMA_generateCheckboxAndLinks($position, $del_url, $is_display, $row_no, $where_clause, $where_clause_html, $condition_array, $del_query, $id_suffix, $edit_url, $copy_url, $class, $edit_str, $copy_str, $del_str, $js_conf){    $ret = '';    if ($position == 'left') {        $ret .= PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, $id_suffix = '_left', '', '', '');        $ret .= PMA_generateEditLink($edit_url, $class, $edit_str, $where_clause, $where_clause_html, '');        $ret .= PMA_generateCopyLink($copy_url, $copy_str, $where_clause, $where_clause_html, '');        $ret .= PMA_generateDeleteLink($del_url, $del_str, $js_conf, '', '');    } elseif ($position == 'right') {        $ret .= PMA_generateDeleteLink($del_url, $del_str, $js_conf, '', '');        $ret .= PMA_generateCopyLink($copy_url, $copy_str, $where_clause, $where_clause_html, '');        $ret .= PMA_generateEditLink($edit_url, $class, $edit_str, $where_clause, $where_clause_html, '');        $ret .= PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, $id_suffix = '_right', '', '', '');    } else { // $position == 'none'        $ret .= PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, $id_suffix = '_left', '', '', '');    }    return $ret;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Check parameters */require_once './libraries/common.inc.php';require_once './libraries/server_common.inc.php';PMA_checkParameters(array('is_superuser', 'url_query'), true, false);// Don't print all these links if in an Ajax requestif (!$GLOBALS['is_ajax_request']) {    /**     * Counts amount of navigation tabs     */    $server_links_count_tabs = 0;    /**     * Put something in $sub_part     */    if (! isset($sub_part)) {        $sub_part = '';    }    /**     * Displays tab links     * Put the links we assume are used less, towards the end     */    $tabs = array();    $tabs['databases']['icon'] = 's_db.png';    $tabs['databases']['link'] = 'server_databases.php';    $tabs['databases']['text'] = __('Databases');    $tabs['sql']['icon'] = 'b_sql.png';    $tabs['sql']['link'] = 'server_sql.php';    $tabs['sql']['text'] = __('SQL');    $tabs['status']['icon'] = 's_status.png';    $tabs['status']['link'] = 'server_status.php';    $tabs['status']['text'] = __('Status');    /*$tabs['process']['icon'] = 's_process.png';    $tabs['process']['link'] = 'server_processlist.php';    $tabs['process']['text'] = __('Processes');*/    if ($is_superuser && !PMA_DRIZZLE) {        $tabs['rights']['icon'] = 's_rights.png';        $tabs['rights']['link'] = 'server_privileges.php';        $tabs['rights']['text'] = __('Users');    }    $tabs['export']['icon'] = 'b_export.png';    $tabs['export']['link'] = 'server_export.php';    $tabs['export']['text'] = __('Export');    $tabs['import']['icon'] = 'b_import.png';    $tabs['import']['link'] = 'server_import.php';    $tabs['import']['text'] = __('Import');    $tabs['settings']['icon'] = 'b_tblops.png';    $tabs['settings']['link'] = 'prefs_manage.php';    $tabs['settings']['text'] = __('Settings');    $tabs['settings']['active'] = in_array(basename($GLOBALS['PMA_PHP_SELF']),        array('prefs_forms.php', 'prefs_manage.php'));    $tabs['synchronize']['icon'] = 's_sync.png';    $tabs['synchronize']['link'] = 'server_synchronize.php';    $tabs['synchronize']['text'] = __('Synchronize');    if (! empty($binary_logs)) {        $tabs['binlog']['icon'] = 's_tbl.png';        $tabs['binlog']['link'] = 'server_binlog.php';        $tabs['binlog']['text'] = __('Binary log');    }    if ($is_superuser && !PMA_DRIZZLE) {        $tabs['replication']['icon'] = 's_replication.png';        $tabs['replication']['link'] = 'server_replication.php';        $tabs['replication']['text'] = __('Replication');    }    $tabs['vars']['icon'] = 's_vars.png';    $tabs['vars']['link'] = 'server_variables.php';    $tabs['vars']['text'] = __('Variables');    $tabs['charset']['icon'] = 's_asci.png';    $tabs['charset']['link'] = 'server_collations.php';    $tabs['charset']['text'] = __('Charsets');    if (PMA_DRIZZLE) {        $tabs['plugins']['icon'] = 'b_engine.png';        $tabs['plugins']['link'] = 'server_plugins.php';        $tabs['plugins']['text'] = __('Plugins');    } else {        $tabs['engine']['icon'] = 'b_engine.png';        $tabs['engine']['link'] = 'server_engines.php';        $tabs['engine']['text'] = __('Engines');    }    echo PMA_generate_html_tabs($tabs, array());    unset($tabs);    /**     * Displays a message     */    if (!empty($message)) {        PMA_showMessage($message);        unset($message);    }}// end if ($GLOBALS['is_ajax_request'] == true)?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (! PMA_cacheExists('mysql_charsets', true)) {    $sql = PMA_DRIZZLE        ? 'SELECT * FROM data_dictionary.CHARACTER_SETS'        : 'SELECT * FROM information_schema.CHARACTER_SETS';    $res = PMA_DBI_query($sql);    $mysql_charsets = array();    while ($row = PMA_DBI_fetch_assoc($res)) {        $mysql_charsets[] = $row['CHARACTER_SET_NAME'];        // never used        //$mysql_charsets_maxlen[$row['Charset']] = $row['Maxlen'];        $mysql_charsets_descriptions[$row['CHARACTER_SET_NAME']] = $row['DESCRIPTION'];    }    PMA_DBI_free_result($res);    sort($mysql_charsets, SORT_STRING);    $mysql_collations = array_flip($mysql_charsets);    $mysql_default_collations = $mysql_collations_flat = $mysql_charsets_available = $mysql_collations_available = array();    $sql = PMA_DRIZZLE        ? 'SELECT * FROM data_dictionary.COLLATIONS'        : 'SELECT * FROM information_schema.COLLATIONS';    $res = PMA_DBI_query($sql);    while ($row = PMA_DBI_fetch_assoc($res)) {        if (! is_array($mysql_collations[$row['CHARACTER_SET_NAME']])) {            $mysql_collations[$row['CHARACTER_SET_NAME']] = array($row['COLLATION_NAME']);        } else {            $mysql_collations[$row['CHARACTER_SET_NAME']][] = $row['COLLATION_NAME'];        }        $mysql_collations_flat[] = $row['COLLATION_NAME'];        if ($row['IS_DEFAULT'] == 'Yes' || $row['IS_DEFAULT'] == '1') {            $mysql_default_collations[$row['CHARACTER_SET_NAME']] = $row['COLLATION_NAME'];        }        //$mysql_collations_available[$row['Collation']] = ! isset($row['Compiled']) || $row['Compiled'] == 'Yes';        $mysql_collations_available[$row['COLLATION_NAME']] = true;        $mysql_charsets_available[$row['CHARACTER_SET_NAME']]            = !empty($mysql_charsets_available[$row['CHARACTER_SET_NAME']])            || !empty($mysql_collations_available[$row['COLLATION_NAME']]);    }    PMA_DBI_free_result($res);    unset($res, $row);    if (PMA_DRIZZLE && isset($mysql_collations['utf8_general_ci']) && isset($mysql_collations['utf8'])) {        $mysql_collations['utf8'] = $mysql_collations['utf8_general_ci'];        $mysql_default_collations['utf8'] = $mysql_default_collations['utf8_general_ci'];        $mysql_charsets_available['utf8'] = $mysql_charsets_available['utf8_general_ci'];        unset($mysql_collations['utf8_general_ci'], $mysql_default_collations['utf8_general_ci'],            $mysql_charsets_available['utf8_general_ci']);    }    sort($mysql_collations_flat, SORT_STRING);    foreach ($mysql_collations AS $key => $value) {        sort($mysql_collations[$key], SORT_STRING);        reset($mysql_collations[$key]);    }    unset($key, $value);    PMA_cacheSet('mysql_charsets', $GLOBALS['mysql_charsets'], true);    PMA_cacheSet('mysql_charsets_descriptions', $GLOBALS['mysql_charsets_descriptions'], true);    PMA_cacheSet('mysql_charsets_available', $GLOBALS['mysql_charsets_available'], true);    PMA_cacheSet('mysql_collations', $GLOBALS['mysql_collations'], true);    PMA_cacheSet('mysql_default_collations', $GLOBALS['mysql_default_collations'], true);    PMA_cacheSet('mysql_collations_flat', $GLOBALS['mysql_collations_flat'], true);    PMA_cacheSet('mysql_collations_available', $GLOBALS['mysql_collations_available'], true);} else {    $GLOBALS['mysql_charsets']                  = PMA_cacheGet('mysql_charsets', true);    $GLOBALS['mysql_charsets_descriptions']     = PMA_cacheGet('mysql_charsets_descriptions', true);    $GLOBALS['mysql_charsets_available']        = PMA_cacheGet('mysql_charsets_available', true);    $GLOBALS['mysql_collations']                = PMA_cacheGet('mysql_collations', true);    $GLOBALS['mysql_default_collations']        = PMA_cacheGet('mysql_default_collations', true);    $GLOBALS['mysql_collations_flat']           = PMA_cacheGet('mysql_collations_flat', true);    $GLOBALS['mysql_collations_available']      = PMA_cacheGet('mysql_collations_available', true);}define('PMA_CSDROPDOWN_COLLATION', 0);define('PMA_CSDROPDOWN_CHARSET',   1);function PMA_generateCharsetDropdownBox($type = PMA_CSDROPDOWN_COLLATION,    $name = null, $id = null, $default = null, $label = true, $indent = 0,    $submitOnChange = false, $displayUnavailable = false){    global $mysql_charsets, $mysql_charsets_descriptions,        $mysql_charsets_available, $mysql_collations, $mysql_collations_available;    if (empty($name)) {        if ($type == PMA_CSDROPDOWN_COLLATION) {            $name = 'collation';        } else {            $name = 'character_set';        }    }    $return_str  = '<select xml:lang="en" dir="ltr" name="'        . htmlspecialchars($name) . '"'        . (empty($id) ? '' : ' id="' . htmlspecialchars($id) . '"')        . ($submitOnChange ? ' class="autosubmit"' : '') . '>' . "\n";    if ($label) {        $return_str .= '<option value="">'            . ($type == PMA_CSDROPDOWN_COLLATION ? __('Collation') : __('Charset'))            . '</option>' . "\n";    }    $return_str .= '<option value=""></option>' . "\n";    foreach ($mysql_charsets as $current_charset) {        if (!$mysql_charsets_available[$current_charset]) {            continue;        }        $current_cs_descr            = empty($mysql_charsets_descriptions[$current_charset])            ? $current_charset            : $mysql_charsets_descriptions[$current_charset];        if ($type == PMA_CSDROPDOWN_COLLATION) {            $return_str .= '<optgroup label="' . $current_charset                . '" title="' . $current_cs_descr . '">' . "\n";            foreach ($mysql_collations[$current_charset] as $current_collation) {                if (!$mysql_collations_available[$current_collation]) {                    continue;                }                $return_str .= '<option value="' . $current_collation                    . '" title="' . PMA_getCollationDescr($current_collation) . '"'                    . ($default == $current_collation ? ' selected="selected"' : '') . '>'                    . $current_collation . '</option>' . "\n";            }            $return_str .= '</optgroup>' . "\n";        } else {            $return_str .= '<option value="' . $current_charset                . '" title="' . $current_cs_descr . '"'                . ($default == $current_charset ? ' selected="selected"' : '') . '>'                . $current_charset . '</option>' . "\n";        }    }    $return_str .= '</select>' . "\n";    return $return_str;}function PMA_generateCharsetQueryPart($collation){    if (!PMA_DRIZZLE) {        list($charset) = explode('_', $collation);        return ' CHARACTER SET ' . $charset . ($charset == $collation ? '' : ' COLLATE ' . $collation);    } else {        return ' COLLATE ' . $collation;    }}/** * returns collation of given db * * @param string  $db     name of db * @return  string  collation of $db */function PMA_getDbCollation($db){    if (PMA_is_system_schema($db)) {        // We don't have to check the collation of the virtual        // information_schema database: We know it!        return 'utf8_general_ci';    }    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        // this is slow with thousands of databases        $sql = PMA_DRIZZLE            ? 'SELECT DEFAULT_COLLATION_NAME FROM data_dictionary.SCHEMAS WHERE SCHEMA_NAME = \'' . PMA_sqlAddSlashes($db) . '\' LIMIT 1'            : 'SELECT DEFAULT_COLLATION_NAME FROM information_schema.SCHEMATA WHERE SCHEMA_NAME = \'' . PMA_sqlAddSlashes($db) . '\' LIMIT 1';        return PMA_DBI_fetch_value($sql);    } else {        PMA_DBI_select_db($db);        $return = PMA_DBI_fetch_value('SHOW VARIABLES LIKE \'collation_database\'', 0, 1);        if ($db !== $GLOBALS['db']) {            PMA_DBI_select_db($GLOBALS['db']);        }        return $return;    }}/** * returns default server collation from show variables * * @return  string  $server_collation */function PMA_getServerCollation(){    return PMA_DBI_fetch_value(        'SHOW VARIABLES LIKE \'collation_server\'', 0, 1);}/** * returns description for given collation * * * @param string  $collation  MySQL collation string * @return  string  collation description */function PMA_getCollationDescr($collation){    if ($collation == 'binary') {        return __('Binary');    }    $parts = explode('_', $collation);    if (count($parts) == 1) {        $parts[1] = 'general';    } elseif ($parts[1] == 'ci' || $parts[1] == 'cs') {        $parts[2] = $parts[1];        $parts[1] = 'general';    }    $descr = '';    switch ($parts[1]) {    case 'bulgarian':        $descr = __('Bulgarian');        break;    case 'chinese':        if ($parts[0] == 'gb2312' || $parts[0] == 'gbk') {            $descr = __('Simplified Chinese');        } elseif ($parts[0] == 'big5') {            $descr = __('Traditional Chinese');        }        break;    case 'ci':        $descr = __('case-insensitive');        break;    case 'cs':        $descr = __('case-sensitive');        break;    case 'croatian':        $descr = __('Croatian');        break;    case 'czech':        $descr = __('Czech');        break;    case 'danish':        $descr = __('Danish');        break;    case 'english':        $descr = __('English');        break;    case 'esperanto':        $descr = __('Esperanto');        break;    case 'estonian':        $descr = __('Estonian');        break;    case 'german1':        $descr = __('German') . ' (' . __('dictionary') . ')';        break;    case 'german2':        $descr = __('German') . ' (' . __('phone book') . ')';        break;    case 'hungarian':        $descr = __('Hungarian');        break;    case 'icelandic':        $descr = __('Icelandic');        break;    case 'japanese':        $descr = __('Japanese');        break;    case 'latvian':        $descr = __('Latvian');        break;    case 'lithuanian':        $descr = __('Lithuanian');        break;    case 'korean':        $descr = __('Korean');        break;    case 'persian':        $descr = __('Persian');        break;    case 'polish':        $descr = __('Polish');        break;    case 'roman':        $descr = __('West European');        break;    case 'romanian':        $descr = __('Romanian');        break;    case 'slovak':        $descr = __('Slovak');        break;    case 'slovenian':        $descr = __('Slovenian');        break;    case 'spanish':        $descr = __('Spanish');        break;    case 'spanish2':        $descr = __('Traditional Spanish');        break;    case 'swedish':        $descr = __('Swedish');        break;    case 'thai':        $descr = __('Thai');        break;    case 'turkish':        $descr = __('Turkish');        break;    case 'ukrainian':        $descr = __('Ukrainian');        break;    case 'unicode':        $descr = __('Unicode') . ' (' . __('multilingual') . ')';        break;    case 'bin':        $is_bin = true;    case 'general':        switch ($parts[0]) {        // Unicode charsets        case 'ucs2':        case 'utf8':            $descr = __('Unicode') . ' (' . __('multilingual') . ')';            break;        // West European charsets        case 'ascii':        case 'cp850':        case 'dec8':        case 'hp8':        case 'latin1':        case 'macroman':            $descr = __('West European') . ' (' . __('multilingual') . ')';            break;        // Central European charsets        case 'cp1250':        case 'cp852':        case 'latin2':        case 'macce':            $descr = __('Central European') . ' (' . __('multilingual') . ')';            break;        // Russian charsets        case 'cp866':        case 'koi8r':            $descr = __('Russian');            break;        // Simplified Chinese charsets        case 'gb2312':        case 'gbk':            $descr = __('Simplified Chinese');            break;        // Japanese charsets        case 'sjis':        case 'ujis':        case 'cp932':        case 'eucjpms':            $descr = __('Japanese');            break;        // Baltic charsets        case 'cp1257':        case 'latin7':            $descr = __('Baltic') . ' (' . __('multilingual') . ')';            break;        // Other        case 'armscii8':        case 'armscii':            $descr = __('Armenian');            break;        case 'big5':            $descr = __('Traditional Chinese');            break;        case 'cp1251':            $descr = __('Cyrillic') . ' (' . __('multilingual') . ')';            break;        case 'cp1256':            $descr = __('Arabic');            break;        case 'euckr':            $descr = __('Korean');            break;        case 'hebrew':            $descr = __('Hebrew');            break;        case 'geostd8':            $descr = __('Georgian');            break;        case 'greek':            $descr = __('Greek');            break;        case 'keybcs2':            $descr = __('Czech-Slovak');            break;        case 'koi8u':            $descr = __('Ukrainian');            break;        case 'latin5':            $descr = __('Turkish');            break;        case 'swe7':            $descr = __('Swedish');            break;        case 'tis620':            $descr = __('Thai');            break;        default:            $descr = __('unknown');            break;        }        if (!empty($is_bin)) {            $descr .= ', ' . __('Binary');        }        break;    default: $descr = __('unknown');    }    if (!empty($parts[2])) {        if ($parts[2] == 'ci') {            $descr .= ', ' . __('case-insensitive');        } elseif ($parts[2] == 'cs') {            $descr .= ', ' . __('case-sensitive');        }    }    return $descr;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * <code> * N   N  OOO  !!   DDDD   OOO    N   N  OOO  TTTTT   EEEE DDDD  I TTTTT !! * NN  N O   O !!   D   D O   O   NN  N O   O   T     E    D   D I   T   !! * N N N O   O !!   D   D O   O   N N N O   O   T     EEEE D   D I   T   !! * N  NN O   O      D   D O   O   N  NN O   O   T     E    D   D I   T * N   N  OOO  !!   DDDD   OOO    N   N  OOO    T     EEEE DDDD  I   T   !! * </code> * * DO NOT EDIT THIS FILE, EDIT config.inc.php INSTEAD !!! * * phpMyAdmin default configuration, you can copy values from here to your * config.inc.php * * All directives are explained in Documentation.html * * @package PhpMyAdmin *//** * Your phpMyAdmin URL. * * Complete the variable below with the full URL ie *    http://www.your_web.net/path_to_your_phpMyAdmin_directory/ * * It must contain characters that are valid for a URL, and the path is * case sensitive on some Web servers, for example Unix-based servers. * * In most cases you can leave this variable empty, as the correct value * will be detected automatically. However, we recommend that you do * test to see that the auto-detection code works in your system. A good * test is to browse a table, then edit a row and save it.  There will be * an error message if phpMyAdmin cannot auto-detect the correct value. * * @global string $cfg['PmaAbsoluteUri'] */$cfg['PmaAbsoluteUri'] = '';/** * Disable the default warning that is displayed on the DB Details Structure page if * any of the required Tables for the configuration storage could not be found * * @global boolean $cfg['PmaNoRelation_DisableWarning'] */$cfg['PmaNoRelation_DisableWarning'] = false;/** * Disable the default warning that is displayed if Suhosin is detected * * @global boolean $cfg['SuhosinDisableWarning'] */$cfg['SuhosinDisableWarning'] = false;/** * Disable the default warning that is displayed if mcrypt is missing for * cookie authentication. * * @global boolean $cfg['McryptDisableWarning'] */$cfg['McryptDisableWarning'] = false;/** * Show warning about incomplete translations on certain threshold. * * @global boolean $cfg['TranslationWarningThreshold'] */$cfg['TranslationWarningThreshold'] = 80;/** * Allows phpMyAdmin to be included from a document located on * another domain; setting this to true is a potential security hole * * @global boolean $cfg['AllowThirdPartyFraming'] */$cfg['AllowThirdPartyFraming'] = false;/** * The 'cookie' auth_type uses blowfish algorithm to encrypt the password. If * at least one server configuration uses 'cookie' auth_type, enter here a * pass phrase that will be used by blowfish. The maximum length seems to be 46 * characters. * * @global string $cfg['blowfish_secret'] */$cfg['blowfish_secret'] = '';/******************************************************************************* * Server(s) configuration * * The $cfg['Servers'] array starts with $cfg['Servers'][1].  Do not use * $cfg['Servers'][0]. You can disable a server configuration entry by setting host * to ''. If you want more than one server, just copy following section * (including $i incrementation) several times. There is no need to define * full server array, just define values you need to change. * * @global array $cfg['Servers'] */$cfg['Servers'] = array();$i = 1;/** * MySQL hostname or IP address * * @global string $cfg['Servers'][$i]['host'] */$cfg['Servers'][$i]['host'] = 'localhost';/** * MySQL port - leave blank for default port * * @global string $cfg['Servers'][$i]['port'] */$cfg['Servers'][$i]['port'] = '';/** * Path to the socket - leave blank for default socket * * @global string $cfg['Servers'][$i]['socket'] */$cfg['Servers'][$i]['socket'] = '';/** * Use SSL for connecting to MySQL server? * * @global boolean $cfg['Servers'][$i]['ssl'] */$cfg['Servers'][$i]['ssl'] = false;/** * How to connect to MySQL server ('tcp' or 'socket') * * @global string $cfg['Servers'][$i]['connect_type'] */$cfg['Servers'][$i]['connect_type'] = 'tcp';/** * The PHP MySQL extension to use ('mysql' or 'mysqli') * * @global string $cfg['Servers'][$i]['extension'] */$cfg['Servers'][$i]['extension'] = 'mysqli';/** * Use compressed protocol for the MySQL connection * * @global boolean $cfg['Servers'][$i]['compress'] */$cfg['Servers'][$i]['compress'] = false;/** * MySQL control host. This permits to use a host different than the * main host, for the phpMyAdmin configuration storage. If left empty, * $cfg['Servers'][$i]['host'] is used instead. * * @global string $cfg['Servers'][$i]['controlhost'] */$cfg['Servers'][$i]['controlhost'] = '';/** * MySQL control user settings (this user must have read-only * access to the "mysql/user" and "mysql/db" tables). The controluser is also * used for all relational features (pmadb) * * @global string $cfg['Servers'][$i]['controluser'] */$cfg['Servers'][$i]['controluser'] = '';/** * MySQL control user settings (this user must have read-only * access to the "mysql/user" and "mysql/db" tables). The controluser is also * used for all relational features (pmadb) * * @global string $cfg['Servers'][$i]['controlpass'] */$cfg['Servers'][$i]['controlpass'] = '';/** * Authentication method (valid choices: config, http, signon or cookie) * * @global string $cfg['Servers'][$i]['auth_type'] */$cfg['Servers'][$i]['auth_type'] = 'cookie';/** * HTTP Basic Auth Realm name to display (only used with 'HTTP' auth_type) * * @global string $cfg['Servers'][$i]['auth_http_realm'] */$cfg['Servers'][$i]['auth_http_realm'] = '';/** * File containing Swekey ids and login names (see /contrib); * leave empty to deactivate Swekey hardware authentication * * @global string $cfg['Servers'][$i]['auth_swekey_config'] */$cfg['Servers'][$i]['auth_swekey_config'] = '';/** * MySQL user * * @global string $cfg['Servers'][$i]['user'] */$cfg['Servers'][$i]['user'] = 'root';/** * MySQL password (only needed with 'config' auth_type) * * @global string $cfg['Servers'][$i]['password'] */$cfg['Servers'][$i]['password'] = '';/** * Session to use for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonSession'] */$cfg['Servers'][$i]['SignonSession'] = '';/** * PHP script to use for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonScript'] */$cfg['Servers'][$i]['SignonScript'] = '';/** * URL where to redirect user to login for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonURL'] */$cfg['Servers'][$i]['SignonURL'] = '';/** * URL where to redirect user after logout * * @global string $cfg['Servers'][$i]['LogoutURL'] */$cfg['Servers'][$i]['LogoutURL'] = '';/** * Whether to try to connect without password * * @global boolean $cfg['Servers'][$i]['nopassword'] */$cfg['Servers'][$i]['nopassword'] = false;/** * If set to a db-name, only this db is displayed in left frame * It may also be an array of db-names, where sorting order is relevant. * * @global string $cfg['Servers'][$i]['only_db'] */$cfg['Servers'][$i]['only_db'] = '';/** * Database name to be hidden from listings * * @global string $cfg['Servers'][$i]['hide_db'] */$cfg['Servers'][$i]['hide_db'] = '';/** * Verbose name for this host - leave blank to show the hostname * (for HTTP authentication, all non-US-ASCII characters will be stripped) * * @global string $cfg['Servers'][$i]['verbose'] */$cfg['Servers'][$i]['verbose'] = '';/** * Database used for Relation, Bookmark and PDF Features * (see examples/create_tables.sql) *   - leave blank for no support *     SUGGESTED: 'phpmyadmin' * * @global string $cfg['Servers'][$i]['pmadb'] */$cfg['Servers'][$i]['pmadb'] = '';/** * Bookmark table *   - leave blank for no bookmark support *     SUGGESTED: 'pma_bookmark' * * @global string $cfg['Servers'][$i]['bookmarktable'] */$cfg['Servers'][$i]['bookmarktable'] = '';/** * table to describe the relation between links (see doc) *   - leave blank for no relation-links support *     SUGGESTED: 'pma_relation' * * @global string $cfg['Servers'][$i]['relation'] */$cfg['Servers'][$i]['relation'] = '';/** * table to describe the display fields *   - leave blank for no display fields support *     SUGGESTED: 'pma_table_info' * * @global string $cfg['Servers'][$i]['table_info'] */$cfg['Servers'][$i]['table_info'] = '';/** * table to describe the tables position for the PDF schema *   - leave blank for no PDF schema support *     SUGGESTED: 'pma_table_coords' * * @global string $cfg['Servers'][$i]['table_coords'] */$cfg['Servers'][$i]['table_coords'] = '';/** * table to describe pages of relationpdf *   - leave blank if you don't want to use this *     SUGGESTED: 'pma_pdf_pages' * * @global string $cfg['Servers'][$i]['pdf_pages'] */$cfg['Servers'][$i]['pdf_pages'] = '';/** * table to store column information *   - leave blank for no column comments/mime types *     SUGGESTED: 'pma_column_info' * * @global string $cfg['Servers'][$i]['column_info'] */$cfg['Servers'][$i]['column_info'] = '';/** * table to store SQL history *   - leave blank for no SQL query history *     SUGGESTED: 'pma_history' * * @global string $cfg['Servers'][$i]['history'] */$cfg['Servers'][$i]['history'] = '';/** * table to store the coordinates for Designer *   - leave blank for no Designer feature *     SUGGESTED: 'pma_designer_coords' * * @global string $cfg['Servers'][$i]['designer_coords'] */$cfg['Servers'][$i]['designer_coords'] = '';/** * table to store recently used tables *   - leave blank for no "persistent" recently used tables *     SUGGESTED: 'pma_recent' */$cfg['Servers'][$i]['recent'] = '';/** * table to store UI preferences for tables *   - leave blank for no "persistent" UI preferences *     SUGGESTED: 'pma_table_uiprefs' */$cfg['Servers'][$i]['table_uiprefs'] = '';/** * table to store SQL tracking *   - leave blank for no SQL tracking *     SUGGESTED: 'pma_tracking' * * @global string $cfg['Servers'][$i]['tracking'] */$cfg['Servers'][$i]['tracking'] = '';/** * table to store user preferences *   - leave blank to disable server storage *     SUGGESTED: 'pma_userconfig' * * @global string $cfg['Servers'][$i]['userconfig'] */$cfg['Servers'][$i]['userconfig'] = '';/** * Maximum number of records saved in $cfg['Servers'][$i]['table_uiprefs'] table. * * In case where tables in databases is modified (e.g. dropped or renamed), * table_uiprefs may contains invalid data (referring to tables which are not * exist anymore). * This configuration make sure that we only keep N (N = MaxTableUiprefs) * newest record in table_uiprefs and automatically delete older records. * * @global integer $cfg['Servers'][$i]['userconfig'] = ''; */$cfg['Servers'][$i]['MaxTableUiprefs'] = 100;/** * set to false if you know that your pma_* tables are up to date. * This prevents compatibility checks and thereby increases performance. * * @global boolean $cfg['Servers'][$i]['verbose_check'] */$cfg['Servers'][$i]['verbose_check'] = true;/** * whether to allow root login * * @global boolean $cfg['Servers'][$i]['AllowRoot'] */$cfg['Servers'][$i]['AllowRoot'] = true;/** * whether to allow login of any user without a password * * @global boolean $cfg['Servers'][$i]['AllowNoPassword'] */$cfg['Servers'][$i]['AllowNoPassword'] = false;/** * Host authentication order, leave blank to not use * * @global string $cfg['Servers'][$i]['AllowDeny']['order'] */$cfg['Servers'][$i]['AllowDeny']['order'] = '';/** * Host authentication rules, leave blank for defaults * * @global array $cfg['Servers'][$i]['AllowDeny']['rules'] */$cfg['Servers'][$i]['AllowDeny']['rules'] = array();/** * Disable use of INFORMATION_SCHEMA. Is always 'true' for Drizzle. * * @see http://sf.net/support/tracker.php?aid=1849494 * @see http://bugs.mysql.com/19588 * @global boolean $cfg['Servers'][$i]['DisableIS'] */$cfg['Servers'][$i]['DisableIS'] = true;/** * SQL command to fetch available databases * * by default most user will be fine with SHOW DATABASES, * for servers with a huge amount of databases it is possible to * define a command which executes faster but with less information * * especially when accessing database servers from ISPs changing this command * can result in a great speed improvement * * false will disable fetching databases from the server, only databases in * $cfg['Servers'][$i]['only_db'] will be displayed * * #user# will be replaced by current user * * examples: * 'SHOW DATABASES' * "SHOW DATABASES LIKE '#user#\_%'" * 'SELECT DISTINCT TABLE_SCHEMA FROM information_schema.SCHEMA_PRIVILEGES' * 'SELECT SCHEMA_NAME FROM information_schema.SCHEMATA' * false * * @global array $cfg['Servers'][$i]['ShowDatabasesCommand'] */$cfg['Servers'][$i]['ShowDatabasesCommand'] = 'SHOW DATABASES';/** * Whether to count tables when showing database list * * @global array $cfg['Servers'][$i]['CountTables'] */$cfg['Servers'][$i]['CountTables'] = false;/** * Whether the tracking mechanism creates versions for tables and views automatically. * * @global bool $cfg['Servers'][$i]['tracking_version_auto_create'] */$cfg['Servers'][$i]['tracking_version_auto_create'] = false;/** * Defines the list of statements the auto-creation uses for new versions. * * @global string $cfg['Servers'][$i]['tracking_default_statements'] */$cfg['Servers'][$i]['tracking_default_statements'] = 'CREATE TABLE,ALTER TABLE,DROP TABLE,RENAME TABLE,' .                                          'CREATE INDEX,DROP INDEX,' .                                          'INSERT,UPDATE,DELETE,TRUNCATE,REPLACE,' .                                          'CREATE VIEW,ALTER VIEW,DROP VIEW,' .                                          'CREATE DATABASE,ALTER DATABASE,DROP DATABASE';/** * Whether a DROP VIEW IF EXISTS statement will be added as first line to the log when creating a view. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_view'] */$cfg['Servers'][$i]['tracking_add_drop_view'] = true;/** * Whether a DROP TABLE IF EXISTS statement will be added as first line to the log when creating a table. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_table'] */$cfg['Servers'][$i]['tracking_add_drop_table'] = true;/** * Whether a DROP DATABASE IF EXISTS statement will be added as first line to the log when creating a database. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_database'] */$cfg['Servers'][$i]['tracking_add_drop_database'] = true;/** * Default server (0 = no default server) * * If you have more than one server configured, you can set $cfg['ServerDefault'] * to any one of them to auto-connect to that server when phpMyAdmin is started, * or set it to 0 to be given a list of servers without logging in * If you have only one server configured, $cfg['ServerDefault'] *MUST* be * set to that server. * * @global integer $cfg['ServerDefault'] */$cfg['ServerDefault'] = 1;/* * Other core phpMyAdmin settings *//** * whether Ajax behavior is active * * @global boolean $cfg['AjaxEnable'] */$cfg['AjaxEnable'] = true;/** * whether version check is active * * @global boolean $cfg['VersionCheck'] */$cfg['VersionCheck'] = VERSION_CHECK_DEFAULT;/** * maximum number of db's displayed in left frame and database list * * @global integer $cfg['MaxDbList'] */$cfg['MaxDbList'] = 100;/** * maximum number of tables displayed in table list * * @global integer $cfg['MaxTableList'] */$cfg['MaxTableList'] = 250;/** * whether to show hint or not * * @global boolean $cfg['ShowHint'] */$cfg['ShowHint'] = true;/** * maximum number of characters when a SQL query is displayed * * @global integer $cfg['MaxCharactersInDisplayedSQL'] */$cfg['MaxCharactersInDisplayedSQL'] = 1000;/** * use GZIP output buffering if possible (true|false|'auto') * * @global string $cfg['OBGzip'] */$cfg['OBGzip'] = 'auto';/** * use persistent connections to MySQL database * * @global boolean $cfg['PersistentConnections'] */$cfg['PersistentConnections'] = false;/** * whether to force using HTTPS * * @global boolean $cfg['ForceSSL'] */$cfg['ForceSSL'] = false;/** * maximum execution time in seconds (0 for no limit) * * @global integer $cfg['ExecTimeLimit'] */$cfg['ExecTimeLimit'] = 300;/** * Path for storing session data (session_save_path PHP parameter). * * @global integer $cfg['SessionSavePath'] */$cfg['SessionSavePath'] = '';/** * maximum allocated bytes ('0' for no limit) * this is a string because '16M' is a valid value; we must put here * a string as the default value so that /setup accepts strings * * @global string $cfg['MemoryLimit'] */$cfg['MemoryLimit'] = '0';/** * mark used tables, make possible to show locked tables (since MySQL 3.23.30) * Is ignored for Drizzle. * * @global boolean $cfg['SkipLockedTables'] */$cfg['SkipLockedTables'] = false;/** * show SQL queries as run * * @global boolean $cfg['ShowSQL'] */$cfg['ShowSQL'] = true;/** * retain SQL input on Ajax execute * * @global boolean $cfg['RetainQueryEditor'] */$cfg['RetainQueryBox'] = false;/** * show a 'Drop database' link to normal users * * @global boolean $cfg['AllowUserDropDatabase'] */$cfg['AllowUserDropDatabase'] = false;/** * confirm some commands that can result in loss of data * (see "need_confirm" in the parser) * * @global boolean $cfg['Confirm'] */$cfg['Confirm'] = true;/** * recall previous login in cookie authentication mode or not * * @global boolean $cfg['LoginCookieRecall'] */$cfg['LoginCookieRecall'] = true;/** * validity of cookie login (in seconds; 1440 matches php.ini's * session.gc_maxlifetime) * * @global integer $cfg['LoginCookieValidity'] */$cfg['LoginCookieValidity'] = 1440;/** * how long login cookie should be stored (in seconds) * * @global integer $cfg['LoginCookieStore'] */$cfg['LoginCookieStore'] = 0;/** * whether to delete all login cookies on logout * * @global boolean $cfg['LoginCookieDeleteAll'] */$cfg['LoginCookieDeleteAll'] = true;/** * whether to enable the "database search" feature or not * * @global boolean $cfg['UseDbSearch'] */$cfg['UseDbSearch'] = true;/** * if set to true, PMA continues computing multiple-statement queries * even if one of the queries failed * * @global boolean $cfg['IgnoreMultiSubmitErrors'] */$cfg['IgnoreMultiSubmitErrors'] = false;/** * if set to true, PMA will show the affected rows of EACH statement on * multiple-statement queries. See the libraries/import.php file for * hard coded defaults on how many queries a statement may contain! * * @global boolean $cfg['VerboseMultiSubmit'] */$cfg['VerboseMultiSubmit'] = true;/** * allow login to any user entered server in cookie based authentication * * @global boolean $cfg['AllowArbitraryServer'] */$cfg['AllowArbitraryServer'] = false;/******************************************************************************* * Error handler configuration * * this configures phpMyAdmin's own error handler, it is used to avoid information * disclosure, gather errors for logging, reporting and displaying * * @global array $cfg['Error_Handler'] */$cfg['Error_Handler'] = array();/** * whether to display errors or not * * this does not affect errors of type  E_USER_* * * @global boolean $cfg['Error_Handler']['display'] */$cfg['Error_Handler']['display'] = false;/** * (NOT IMPLEMENTED YET) * where to log errors, false or empty to disable * * <code> * // EXAMPLE log to std PHP error log * $cfg['Error_Handler']['log'] = array(0); * // EXAMPLE mail errors * $cfg['Error_Handler']['log'] = array(1, 'admin@example.org'); * // EXAMPLE append to specific file * $cfg['Error_Handler']['log'] = array(3, '/var/log/phpmyadmin_error.log'); * </code> * * @see     http://php.net/error_log * @global  string $cfg['Error_Handler']['log'] *///$cfg['Error_Handler']['log'] = false;/** * gather all errors in session to be displayed on a error reporting page * for viewing and/or sending to phpMyAdmin developer team * * @global boolean $cfg['Error_Handler']['gather'] */$cfg['Error_Handler']['gather'] = false;/******************************************************************************* * Left frame setup *//** * use a select-based menu and display only the current tables in the left frame. * * @global boolean $cfg['LeftFrameLight'] */$cfg['LeftFrameLight'] = true;/** * turn the select-based light menu into a tree * * @global boolean $cfg['LeftFrameDBTree'] */$cfg['LeftFrameDBTree'] = true;/** * the separator to sub-tree the select-based light menu tree * * @global string $cfg['LeftFrameDBSeparator'] */$cfg['LeftFrameDBSeparator'] = '_';/** * Which string will be used to generate table prefixes * to split/nest tables into multiple categories * * @global string $cfg['LeftFrameTableSeparator'] */$cfg['LeftFrameTableSeparator']= '__';/** * How many sublevels should be displayed when splitting up tables by the above Separator * * @global integer $cfg['LeftFrameTableLevel'] */$cfg['LeftFrameTableLevel'] = 1;/** * display table comment as tooltip in left frame * * @global boolean $cfg['ShowTooltip'] */$cfg['ShowTooltip'] = true;/** * if ShowToolTip is enabled, this defines that table/db comments * * @global boolean $cfg['ShowTooltipAliasDB'] */$cfg['ShowTooltipAliasDB'] = false;/** * are shown (in the left menu and db_structure) instead of table/db names. * Setting ShowTooltipAliasTB to 'nested' will only use the Aliases for nested * descriptors, not the table itself. * * @global boolean $cfg['ShowTooltipAliasTB'] */$cfg['ShowTooltipAliasTB'] = false;/** * display logo at top of left frame * * @global boolean $cfg['LeftDisplayLogo'] */$cfg['LeftDisplayLogo'] = true;/** * where should logo link point to (can also contain an external URL) * * @global string $cfg['LeftLogoLink'] */$cfg['LeftLogoLink'] = 'main.php';/** * whether to open the linked page in the main window ('main') or * in a new window ('new') * * @global string $cfg['LeftLogoLinkWindow'] */$cfg['LeftLogoLinkWindow'] = 'main';/** * number of recently used tables displayed in the navigation frame * * @global integer $cfg['LeftRecentTable'] */$cfg['LeftRecentTable'] = 10;/** * display a JavaScript table filter in the left frame * when more then x tables are present * * @global boolean $cfg['LeftDisplayTableFilterMinimum'] */$cfg['LeftDisplayTableFilterMinimum'] = 30;/** * display server choice at top of left frame * * @global boolean $cfg['LeftDisplayServers'] */$cfg['LeftDisplayServers'] = false;/** * server choice as links * * @global boolean $cfg['DisplayServersList'] */$cfg['DisplayServersList'] = false;/** * database choice in light as links * * @global boolean $cfg['DisplayDatabasesList'] */$cfg['DisplayDatabasesList'] = 'auto';/** * target of the navigation panel quick access icon * * Possible values: * 'tbl_structure.php' = fields list * 'tbl_sql.php' = SQL form * 'tbl_select.php' = search page * 'tbl_change.php' = insert row page * 'sql.php' = browse page * * @global string $cfg['LeftDefaultTabTable'] */$cfg['LeftDefaultTabTable'] = 'tbl_structure.php';/******************************************************************************* * In the main frame, at startup... *//** * allow to display statistics and space usage in the pages about database * details and table properties * * @global boolean $cfg['ShowStats'] */$cfg['ShowStats'] = true;/** * show PHP info link * * @global boolean $cfg['ShowPhpInfo'] */$cfg['ShowPhpInfo'] = false;/** * show MySQL server and web server information * * @global boolean $cfg['ShowServerInfo'] */$cfg['ShowServerInfo'] = true;/** * show change password link * * @global boolean $cfg['ShowChgPassword'] */$cfg['ShowChgPassword'] = true;/** * show create database form * * @global boolean $cfg['ShowCreateDb'] */$cfg['ShowCreateDb'] = true;/** * suggest a new DB name if possible (false = keep empty) * * @global boolean $cfg['SuggestDBName'] */$cfg['SuggestDBName'] = true;/******************************************************************************* * In browse mode... *//** * Use icons instead of text for the navigation bar buttons * and on right panel top menu (server db table) (true|false|'both') * * @global string $cfg['NavigationBarIconic'] */$cfg['NavigationBarIconic'] = true;/** * Defines whether a user should be displayed a "show all (records)" * button in browse mode or not. * * @global boolean $cfg['ShowAll'] */$cfg['ShowAll'] = false;/** * Number of rows displayed when browsing a result set. If the result * set contains more rows, "Previous" and "Next". * * @global integer $cfg['MaxRows'] */$cfg['MaxRows'] = 30;/** * default for 'ORDER BY' clause (valid values are 'ASC', 'DESC' or 'SMART' -ie * descending order for fields of type TIME, DATE, DATETIME & TIMESTAMP, * ascending order else-) * * @global string $cfg['Order'] */$cfg['Order'] = 'SMART';/** * default for 'Show binary contents as HEX' * * @global string $cfg['DisplayBinaryAsHex'] */$cfg['DisplayBinaryAsHex'] = true;/******************************************************************************* * In edit mode... *//** * disallow editing of binary fields * valid values are: *   false  allow editing *   'blob' allow editing except for BLOB fields *   'all'  disallow editing * * @global string $cfg['ProtectBinary'] */$cfg['ProtectBinary'] = 'blob';/** * Display the function fields in edit/insert mode * * @global boolean $cfg['ShowFunctionFields'] */$cfg['ShowFunctionFields'] = true;/** * Display the type fields in edit/insert mode * * @global boolean $cfg['ShowFieldTypesInDataEditView'] */$cfg['ShowFieldTypesInDataEditView'] = true;/** * Which editor should be used for CHAR/VARCHAR fields: *  input - allows limiting of input length *  textarea - allows newlines in fields * * @global string $cfg['CharEditing'] */$cfg['CharEditing'] = 'input';/** * The minimum size for character input fields * * @global integer $cfg['MinSizeForInputField'] */$cfg['MinSizeForInputField'] = 4;/** * The maximum size for character input fields * * @global integer $cfg['MinSizeForInputField'] */$cfg['MaxSizeForInputField'] = 60;/** * How many rows can be inserted at one time * * @global integer $cfg['InsertRows'] */$cfg['InsertRows'] = 2;/** * Sort order for items in a foreign-key drop-down list. * 'content' is the referenced data, 'id' is the key value. * * @global array $cfg['ForeignKeyDropdownOrder'] */$cfg['ForeignKeyDropdownOrder'] = array('content-id', 'id-content');/** * A drop-down list will be used if fewer items are present * * @global integer $cfg['ForeignKeyMaxLimit'] */$cfg['ForeignKeyMaxLimit'] = 100;/******************************************************************************* * For the export features... *//** * Allow for the use of zip compression (requires zip support to be enabled) * * @global boolean $cfg['ZipDump'] */$cfg['ZipDump'] = true;/** * Allow for the use of gzip compression (requires zlib) * * @global boolean $cfg['GZipDump'] */$cfg['GZipDump'] = true;/** * Allow for the use of bzip2 compression (requires bz2 extension) * * @global boolean $cfg['BZipDump'] */$cfg['BZipDump'] = true;/** * Will compress gzip/bzip2 exports on the fly without the need for much memory. * If you encounter problems with created gzip/bzip2 files disable this feature. * * @global boolean $cfg['CompressOnFly'] */$cfg['CompressOnFly'] = true;/******************************************************************************* * Tabs display settings *//** * Use graphically less intense menu tabs * * @global boolean $cfg['LightTabs'] */$cfg['LightTabs'] = false;/** * Use icons instead of text for the table display of a database (true|false|'both') * * @global boolean $cfg['PropertiesIconic'] */$cfg['PropertiesIconic'] = 'both';/** * How many columns should be used for table display of a database? * (a value larger than 1 results in some information being hidden) * * @global integer $cfg['PropertiesNumColumns'] */$cfg['PropertiesNumColumns'] = 1;/** * Possible values: * 'main.php' = the welcome page * (recommended for multiuser setups) * 'server_databases.php' = list of databases * 'server_status.php' = runtime information * 'server_variables.php' = MySQL server variables * 'server_privileges.php' = user management * 'server_processlist.php' = process list * * @global string $cfg['DefaultTabServer'] */$cfg['DefaultTabServer'] = 'main.php';/** * Possible values: * 'db_structure.php' = tables list * 'db_sql.php' = SQL form * 'db_search.php' = search query * 'db_operations.php' = operations on database * * @global string $cfg['DefaultTabDatabase'] */$cfg['DefaultTabDatabase'] = 'db_structure.php';/** * Possible values: * 'tbl_structure.php' = fields list * 'tbl_sql.php' = SQL form * 'tbl_select.php' = search page * 'tbl_change.php' = insert row page * 'sql.php' = browse page * * @global string $cfg['DefaultTabTable'] */$cfg['DefaultTabTable'] = 'sql.php';/******************************************************************************* * Export defaults */$cfg['Export'] = array();/** * codegen/csv/excel/htmlexcel/htmlword/latex/ods/odt/pdf/sql/texytext/xls/xml/yaml * * @global string $cfg['Export']['format'] */$cfg['Export']['format'] = 'sql';/** * quick/custom/custom-no-form * * @global string $cfg['Export']['format'] */$cfg['Export']['method'] = 'quick';/** * none/zip/gzip/bzip2 * * @global string $cfg['Export']['compression'] */$cfg['Export']['compression'] = 'none';/** * * * @global boolean $cfg['Export']['asfile'] */$cfg['Export']['asfile'] = true;/** * * * @global string $cfg['Export']['charset'] */$cfg['Export']['charset'] = '';/** * * * @global boolean $cfg['Export']['onserver'] */$cfg['Export']['onserver'] = false;/** * * * @global boolean $cfg['Export']['onserver_overwrite'] */$cfg['Export']['onserver_overwrite'] = false;/** * * * @global boolean $cfg['Export']['quick_export_onserver'] */$cfg['Export']['quick_export_onserver'] = false;/** * * * @global boolean $cfg['Export']['quick_export_onserver_overwrite'] */$cfg['Export']['quick_export_onserver_overwrite'] = false;/** * * * @global boolean $cfg['Export']['remember_file_template'] */$cfg['Export']['remember_file_template'] = true;/** * * * @global string $cfg['Export']['file_template_table'] */$cfg['Export']['file_template_table'] = '@TABLE@';/** * * * @global string $cfg['Export']['file_template_database'] */$cfg['Export']['file_template_database'] = '@DATABASE@';/** * * * @global string $cfg['Export']['file_template_server'] */$cfg['Export']['file_template_server'] = '@SERVER@';/** * * * @global string $cfg['Export']['codegen_structure_or_data'] */$cfg['Export']['codegen_structure_or_data'] = 'data';/** * * * @global $cfg['Export']['codegen_format'] */$cfg['Export']['codegen_format'] = 0;/** * * * @global boolean $cfg['Export']['ods_columns'] */$cfg['Export']['ods_columns'] = false;/** * * * @global string $cfg['Export']['ods_null'] */$cfg['Export']['ods_null'] = 'NULL';/** * * * @global string $cfg['Export']['odt_structure_or_data'] */$cfg['Export']['odt_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['odt_columns'] */$cfg['Export']['odt_columns'] = true;/** * * * @global boolean $cfg['Export']['odt_relation'] */$cfg['Export']['odt_relation'] = true;/** * * * @global boolean $cfg['Export']['odt_comments'] */$cfg['Export']['odt_comments'] = true;/** * * * @global boolean $cfg['Export']['odt_mime'] */$cfg['Export']['odt_mime'] = true;/** * * * @global string $cfg['Export']['odt_null'] */$cfg['Export']['odt_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['htmlword_structure_or_data'] */$cfg['Export']['htmlword_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['htmlword_columns'] */$cfg['Export']['htmlword_columns'] = false;/** * * * @global string $cfg['Export']['htmlword_null'] */$cfg['Export']['htmlword_null'] = 'NULL';/** * * * @global string $cfg['Export']['texytext_structure_or_data'] */$cfg['Export']['texytext_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['texytext_columns'] */$cfg['Export']['texytext_columns'] = false;/** * * * @global string $cfg['Export']['texytext_null'] */$cfg['Export']['texytext_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['xls_columns'] */$cfg['Export']['xls_columns'] = false;/** * * * @global string $cfg['Export']['xls_structure_or_data'] */$cfg['Export']['xls_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['xls_null'] */$cfg['Export']['xls_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['xlsx_columns'] */$cfg['Export']['xlsx_columns'] = false;/** * * * @global string $cfg['Export']['xlsx_structure_or_data'] */$cfg['Export']['xlsx_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['xlsx_null'] */$cfg['Export']['xlsx_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['csv_columns'] */$cfg['Export']['csv_columns'] = false;/** * * * @global string $cfg['Export']['csv_structure_or_data'] */$cfg['Export']['csv_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['csv_null'] */$cfg['Export']['csv_null'] = 'NULL';/** * * * @global string $cfg['Export']['csv_separator'] */$cfg['Export']['csv_separator'] = ',';/** * * * @global string $cfg['Export']['csv_enclosed'] */$cfg['Export']['csv_enclosed'] = '"';/** * * * @global string $cfg['Export']['csv_escaped'] */$cfg['Export']['csv_escaped'] = '"';/** * * * @global string $cfg['Export']['csv_terminated'] */$cfg['Export']['csv_terminated'] = 'AUTO';/** * * * @global string $cfg['Export']['csv_removeCRLF'] */$cfg['Export']['csv_removeCRLF'] = false;/** * * * @global boolean $cfg['Export']['excel_columns'] */$cfg['Export']['excel_columns'] = false;/** * * * @global string $cfg['Export']['excel_null'] */$cfg['Export']['excel_null'] = 'NULL';/** * win/mac * * @global string $cfg['Export']['excel_edition'] */$cfg['Export']['excel_edition'] = 'win';/** * * * @global string $cfg['Export']['excel_removeCRLF'] */$cfg['Export']['excel_removeCRLF'] = false;/** * * * @global string $cfg['Export']['excel_structure_or_data'] */$cfg['Export']['excel_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['latex_structure_or_data'] */$cfg['Export']['latex_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['latex_columns'] */$cfg['Export']['latex_columns'] = true;/** * * * @global boolean $cfg['Export']['latex_relation'] */$cfg['Export']['latex_relation'] = true;/** * * * @global boolean $cfg['Export']['latex_comments'] */$cfg['Export']['latex_comments'] = true;/** * * * @global boolean $cfg['Export']['latex_mime'] */$cfg['Export']['latex_mime'] = true;/** * * * @global string $cfg['Export']['latex_null'] */$cfg['Export']['latex_null'] = '\textit{NULL}';/** * * * @global boolean $cfg['Export']['latex_caption'] */$cfg['Export']['latex_caption'] = true;/** * * * @global string $cfg['Export']['latex_structure_caption'] */$cfg['Export']['latex_structure_caption'] = 'strLatexStructure';/** * * * @global string $cfg['Export']['latex_structure_continued_caption'] */$cfg['Export']['latex_structure_continued_caption'] = 'strLatexStructure strLatexContinued';/** * * * @global string $cfg['Export']['latex_data_caption'] */$cfg['Export']['latex_data_caption'] = 'strLatexContent';/** * * * @global string $cfg['Export']['latex_data_continued_caption'] */$cfg['Export']['latex_data_continued_caption'] = 'strLatexContent strLatexContinued';/** * * * @global string $cfg['Export']['latex_data_label'] */$cfg['Export']['latex_data_label'] = 'tab:@TABLE@-data';/** * * * @global string $cfg['Export']['latex_structure_label'] */$cfg['Export']['latex_structure_label'] = 'tab:@TABLE@-structure';/** * * * @global string $cfg['Export']['mediawiki_structure_or_data'] */$cfg['Export']['mediawiki_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['ods_structure_or_data'] */$cfg['Export']['ods_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['pdf_structure_or_data'] */$cfg['Export']['pdf_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['php_array_structure_or_data'] */$cfg['Export']['php_array_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['json_structure_or_data'] */$cfg['Export']['json_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['sql_structure_or_data'] */$cfg['Export']['sql_structure_or_data'] = 'structure_and_data';/** * * * @global string $cfg['Export']['sql_compatibility'] */$cfg['Export']['sql_compatibility'] = 'NONE';/** * Whether to include comments in SQL export. * * @global string $cfg['Export']['sql_include_comments'] */$cfg['Export']['sql_include_comments'] = true;/** * * * @global boolean $cfg['Export']['sql_disable_fk'] */$cfg['Export']['sql_disable_fk'] = false;/** * * * @global boolean $cfg['Export']['sql_use_transaction'] */$cfg['Export']['sql_use_transaction'] = false;/** * * * @global boolean $cfg['Export']['sql_drop_database'] */$cfg['Export']['sql_drop_database'] = false;/** * * * @global boolean $cfg['Export']['sql_drop_table'] */$cfg['Export']['sql_drop_table'] = false;/** * * * true by default for correct behavior when dealing with exporting * of VIEWs and the stand-in table * @global boolean $cfg['Export']['sql_if_not_exists'] */$cfg['Export']['sql_if_not_exists'] = true;/** * * * @global boolean $cfg['Export']['sql_procedure_function'] */$cfg['Export']['sql_procedure_function'] = true;/** * * * @global boolean $cfg['Export']['sql_auto_increment'] */$cfg['Export']['sql_auto_increment'] = true;/** * * * @global boolean $cfg['Export']['sql_backquotes'] */$cfg['Export']['sql_backquotes'] = true;/** * * * @global boolean $cfg['Export']['sql_dates'] */$cfg['Export']['sql_dates'] = false;/** * * * @global boolean $cfg['Export']['sql_relation'] */$cfg['Export']['sql_relation'] = false;/** * * * @global boolean $cfg['Export']['sql_delayed'] */$cfg['Export']['sql_delayed'] = false;/** * * * @global boolean $cfg['Export']['sql_ignore'] */$cfg['Export']['sql_ignore'] = false;/** * Export time in UTC. * * @global boolean $cfg['Export']['sql_utc_time'] */$cfg['Export']['sql_utc_time'] = true;/** * * * @global boolean $cfg['Export']['sql_hex_for_blob'] */$cfg['Export']['sql_hex_for_blob'] = true;/** * insert/update/replace * * @global string $cfg['Export']['sql_type'] */$cfg['Export']['sql_type'] = 'INSERT';/** * * * @global integer $cfg['Export']['sql_max_query_size'] */$cfg['Export']['sql_max_query_size'] = 50000;/** * * * @global boolean $cfg['Export']['sql_comments'] */$cfg['Export']['sql_comments'] = false;/** * * * @global boolean $cfg['Export']['sql_mime'] */$cfg['Export']['sql_mime'] = false;/** * \n is replaced by new line * * @global string $cfg['Export']['sql_header_comment'] */$cfg['Export']['sql_header_comment'] = '';/** * * * @global boolean $cfg['Export']['sql_create_table_statements'] */$cfg['Export']['sql_create_table_statements'] = true;/** * Whether to use complete inserts, extended inserts, both, or neither * * @global string $cfg['Export']['sql_insert_syntax'] */$cfg['Export']['sql_insert_syntax'] = 'both';/** * * * @global string $cfg['Export']['pdf_report_title'] */$cfg['Export']['pdf_report_title'] = '';/** * * *@global string $cfg['Export']['xml_structure_or_data'] */$cfg['Export']['xml_structure_or_data'] = 'data';/** * Export schema for each structure * * @global string $cfg['Export']['xml_export_struc'] */$cfg['Export']['xml_export_struc'] = true;/** * Export functions * * @global string $cfg['Export']['xml_export_functions'] */$cfg['Export']['xml_export_functions'] = true;/** * Export procedures * * @global string $cfg['Export']['xml_export_procedures'] */$cfg['Export']['xml_export_procedures'] = true;/** * Export schema for each table * * @global string $cfg['Export']['xml_export_tables'] */$cfg['Export']['xml_export_tables'] = true;/** * Export triggers * * @global string $cfg['Export']['xml_export_triggers'] */$cfg['Export']['xml_export_triggers'] = true;/** * Export views * * @global string $cfg['Export']['xml_export_views'] */$cfg['Export']['xml_export_views'] = true;/** * Export contents data * * @global string $cfg['Export']['xml_export_contents'] */$cfg['Export']['xml_export_contents'] = true;/** * * * @global string $cfg['Export']['yaml_structure_or_data'] */$cfg['Export']['yaml_structure_or_data'] = 'data';/******************************************************************************* * Import defaults */$cfg['Import'] = array();/** * * * @global string $cfg['Import']['format'] */$cfg['Import']['format'] = 'sql';/** * Default charset for import. * * @global string $cfg['Import']['charset'] */$cfg['Import']['charset'] = '';/** * * * @global boolean $cfg['Import']['allow_interrupt'] */$cfg['Import']['allow_interrupt'] = true;/** * * * @global integer $cfg['Import']['skip_queries'] */$cfg['Import']['skip_queries'] = 0;/** * * * @global string $cfg['Import']['sql_compatibility'] */$cfg['Import']['sql_compatibility'] = 'NONE';/** * * * @global string $cfg['Import']['sql_no_auto_value_on_zero'] */$cfg['Import']['sql_no_auto_value_on_zero'] = true;/** * * * @global boolean $cfg['Import']['csv_replace'] */$cfg['Import']['csv_replace'] = false;/** * * * @global boolean $cfg['Import']['csv_ignore'] */$cfg['Import']['csv_ignore'] = false;/** * * * @global string $cfg['Import']['csv_terminated'] */$cfg['Import']['csv_terminated'] = ',';/** * * * @global string $cfg['Import']['csv_enclosed'] */$cfg['Import']['csv_enclosed'] = '"';/** * * * @global string $cfg['Import']['csv_escaped'] */$cfg['Import']['csv_escaped'] = '"';/** * * * @global string $cfg['Import']['csv_new_line'] */$cfg['Import']['csv_new_line'] = 'auto';/** * * * @global string $cfg['Import']['csv_columns'] */$cfg['Import']['csv_columns'] = '';/** * * * @global string $cfg['Import']['csv_col_names'] */$cfg['Import']['csv_col_names'] = false;/** * * * @global boolean $cfg['Import']['ldi_replace'] */$cfg['Import']['ldi_replace'] = false;/** * * * @global boolean $cfg['Import']['ldi_ignore'] */$cfg['Import']['ldi_ignore'] = false;/** * * * @global string $cfg['Import']['ldi_terminated'] */$cfg['Import']['ldi_terminated'] = ';';/** * * * @global string $cfg['Import']['ldi_enclosed'] */$cfg['Import']['ldi_enclosed'] = '"';/** * * * @global string $cfg['Import']['ldi_escaped'] */$cfg['Import']['ldi_escaped'] = '\\';/** * * * @global string $cfg['Import']['ldi_new_line'] */$cfg['Import']['ldi_new_line'] = 'auto';/** * * * @global string $cfg['Import']['ldi_columns'] */$cfg['Import']['ldi_columns'] = '';/** * 'auto' for auto-detection, true or false for forcing * * @global string $cfg['Import']['ldi_local_option'] */$cfg['Import']['ldi_local_option'] = 'auto';/** * * * @global string $cfg['Import']['ods_col_names'] */$cfg['Import']['ods_col_names'] = false;/** * * * @global string $cfg['Import']['ods_empty_rows'] */$cfg['Import']['ods_empty_rows'] = true;/** * * * @global string $cfg['Import']['ods_recognize_percentages'] */$cfg['Import']['ods_recognize_percentages'] = true;/** * * * @global string $cfg['Import']['ods_recognize_currency'] */$cfg['Import']['ods_recognize_currency'] = true;/** * * * @global string $cfg['Import']['xml_col_names'] */$cfg['Import']['xls_col_names'] = false;/** * * * @global string $cfg['Import']['xml_empty_rows'] */$cfg['Import']['xls_empty_rows'] = true;/** * * * @global string $cfg['Import']['xlsx_col_names'] */$cfg['Import']['xlsx_col_names'] = false;/** * Link to the official MySQL documentation. * Be sure to include no trailing slash on the path. * See http://dev.mysql.com/doc/ for more information * about MySQL manuals and their types. * * @global string $cfg['MySQLManualBase'] */$cfg['MySQLManualBase'] = 'http://dev.mysql.com/doc/refman';/** * Type of MySQL documentation: *   viewable   - "viewable online", current one used on MySQL website *   searchable - "Searchable, with user comments" *   chapters   - "HTML, one page per chapter" *   chapters_old - "HTML, one page per chapter", format used prior to MySQL 5.0 release *   big        - "HTML, all on one page" *   old        - old style used in phpMyAdmin 2.3.0 and sooner *   none       - do not show documentation links * * @global string $cfg['MySQLManualType'] */$cfg['MySQLManualType'] = 'viewable';/******************************************************************************* * PDF options *//** * * * @global array $cfg['PDFPageSizes'] */$cfg['PDFPageSizes'] = array('A3', 'A4', 'A5', 'letter', 'legal');/** * * * @global string $cfg['PDFDefaultPageSize'] */$cfg['PDFDefaultPageSize'] = 'A4';/******************************************************************************* * Language and character set conversion settings *//** * Default language to use, if not browser-defined or user-defined * * @global string $cfg['DefaultLang'] */$cfg['DefaultLang'] = 'en';/** * Default connection collation * * @global string $cfg['DefaultConnectionCollation'] */$cfg['DefaultConnectionCollation'] = 'utf8_general_ci';/** * Force: always use this language * $cfg['Lang'] = 'en'; * * Regular expression to limit listed languages, e.g. '^(cs|en)' for Czech and * English only * * @global string $cfg['FilterLanguages'] */$cfg['FilterLanguages'] = '';/** * You can select here which functions will be used for character set conversion. * Possible values are: *      auto   - automatically use available one (first is tested iconv, then *               recode) *      iconv  - use iconv or libiconv functions *      recode - use recode_string function *      none   - disable encoding conversion * * @global string $cfg['RecodingEngine'] */$cfg['RecodingEngine'] = 'auto';/** * Specify some parameters for iconv used in character set conversion. See iconv * documentation for details: * http://www.gnu.org/software/libiconv/documentation/libiconv/iconv_open.3.html * * @global string $cfg['IconvExtraParams'] */$cfg['IconvExtraParams'] = '//TRANSLIT';/** * Available character sets for MySQL conversion. currently contains all which could * be found in lang/* files and few more. * Character sets will be shown in same order as here listed, so if you frequently * use some of these move them to the top. * * @global array $cfg['AvailableCharsets'] */$cfg['AvailableCharsets'] = array(    'iso-8859-1',    'iso-8859-2',    'iso-8859-3',    'iso-8859-4',    'iso-8859-5',    'iso-8859-6',    'iso-8859-7',    'iso-8859-8',    'iso-8859-9',    'iso-8859-10',    'iso-8859-11',    'iso-8859-12',    'iso-8859-13',    'iso-8859-14',    'iso-8859-15',    'windows-1250',    'windows-1251',    'windows-1252',    'windows-1256',    'windows-1257',    'koi8-r',    'big5',    'gb2312',    'utf-16',    'utf-8',    'utf-7',    'x-user-defined',    'euc-jp',    'ks_c_5601-1987',    'tis-620',    'SHIFT_JIS');/******************************************************************************* * Customization & design * * The graphical settings are now located in themes/theme-name/layout.inc.php *//** * enable the left panel pointer * (used when LeftFrameLight is false) * see also LeftPointerColor * in layout.inc.php * * @global boolean $cfg['LeftPointerEnable'] */$cfg['LeftPointerEnable'] = true;/** * enable the browse pointer * see also BrowsePointerColor * in layout.inc.php * * @global boolean $cfg['BrowsePointerEnable'] */$cfg['BrowsePointerEnable'] = true;/** * enable the browse marker * see also BrowseMarkerColor * in layout.inc.php * * @global boolean $cfg['BrowseMarkerEnable'] */$cfg['BrowseMarkerEnable'] = true;/** * textarea size (columns) in edit mode * (this value will be emphasized (*2) for SQL * query textareas and (*1.25) for query window) * * @global integer $cfg['TextareaCols'] */$cfg['TextareaCols'] = 40;/** * textarea size (rows) in edit mode * * @global integer $cfg['TextareaRows'] */$cfg['TextareaRows'] = 15;/** * double size of textarea size for LONGTEXT columns * * @global boolean $cfg['LongtextDoubleTextarea'] */$cfg['LongtextDoubleTextarea'] = true;/** * auto-select when clicking in the textarea of the query-box * * @global boolean $cfg['TextareaAutoSelect'] */$cfg['TextareaAutoSelect'] = false;/** * textarea size (columns) for CHAR/VARCHAR * * @global integer $cfg['CharTextareaCols'] */$cfg['CharTextareaCols'] = 40;/** * textarea size (rows) for CHAR/VARCHAR * * @global integer $cfg['CharTextareaRows'] */$cfg['CharTextareaRows'] = 2;/** * Max field data length in browse mode for all non-numeric fields * * @global integer $cfg['LimitChars'] */$cfg['LimitChars'] = 50;/** * Where to show the edit/copy/delete links in browse mode * Possible values are 'left', 'right', 'both' and 'none'; * which will be interpreted as 'top', 'bottom', 'both' and 'none' * respectively for vertical display mode * * @global string $cfg['RowActionLinks'] */$cfg['RowActionLinks'] = 'left';/** * default display direction (horizontal|vertical|horizontalflipped) * * @global string $cfg['DefaultDisplay'] */$cfg['DefaultDisplay'] = 'horizontal';/** * remember the last way a table sorted * * @global string $cfg['RememberSorting'] */$cfg['RememberSorting'] = true;/** * table-header rotation via faking or CSS? (css|fake|auto) * NOTE: CSS only works in IE browsers! * * @global string $cfg['HeaderFlipType'] */$cfg['HeaderFlipType'] = 'auto';/** * shows stored relation-comments in 'browse' mode. * * @global boolean $cfg['ShowBrowseComments'] */$cfg['ShowBrowseComments'] = true;/** * shows stored relation-comments in 'table property' mode. * * @global boolean $cfg['ShowPropertyComments'] */$cfg['ShowPropertyComments']= true;/** * save edited cell(s) in browse-mode at once. */$cfg['SaveCellsAtOnce'] = false;/** * shows table display direction. */$cfg['ShowDisplayDirection'] = false;/** * repeat header names every X cells? (0 = deactivate) * * @global integer $cfg['RepeatCells'] */$cfg['RepeatCells'] = 100;/** * Set to true if Edit link should open the query to edit in the query window * (assuming JavaScript is enabled), and to false if we should edit in the right panel * * @global boolean $cfg['EditInWindow'] */$cfg['EditInWindow'] = true;/** * Width of Query window * * @global integer $cfg['QueryWindowWidth'] */$cfg['QueryWindowWidth'] = 550;/** * Height of Query window * * @global integer $cfg['QueryWindowHeight'] */$cfg['QueryWindowHeight'] = 310;/** * Set to true if you want DB-based query history.If false, this utilizes * JS-routines to display query history (lost by window close) * * @global boolean $cfg['QueryHistoryDB'] */$cfg['QueryHistoryDB'] = false;/** * which tab to display in the querywindow on startup * (sql|files|history|full) * * @global string $cfg['QueryWindowDefTab'] */$cfg['QueryWindowDefTab'] = 'sql';/** * When using DB-based query history, how many entries should be kept? * * @global integer $cfg['QueryHistoryMax'] */$cfg['QueryHistoryMax'] = 25;/** * Use MIME-Types (stored in column comments table) for * * @global boolean $cfg['BrowseMIME'] */$cfg['BrowseMIME'] = true;/** * When approximate count < this, PMA will get exact count for table rows. * * @global integer $cfg['MaxExactCount'] */$cfg['MaxExactCount'] = 20000;/** * Zero means that no row count is done for views; see the doc * * @global integer $cfg['MaxExactCountViews'] */$cfg['MaxExactCountViews'] = 100000;/** * Sort table and database in natural order * * @global boolean $cfg['NaturalOrder'] */$cfg['NaturalOrder'] = true;/** * Initial state for sliders * (open | closed | disabled) * * @global string $cfg['InitialSlidersState'] */$cfg['InitialSlidersState'] = 'closed';/** * User preferences: disallow these settings * For possible setting names look in libraries/config/user_preferences.forms.php * * @global array $cfg['UserprefsDisallow'] */$cfg['UserprefsDisallow'] = array();/** * User preferences: enable the Developer tab */$cfg['UserprefsDeveloperTab'] = false;/******************************************************************************* * Window title settings *//** * title of browser window when a table is selected * * @global string $cfg['TitleTable'] */$cfg['TitleTable'] = '@HTTP_HOST@ / @VSERVER@ / @DATABASE@ / @TABLE@ | @PHPMYADMIN@';/** * title of browser window when a database is selected * * @global string $cfg['TitleDatabase'] */$cfg['TitleDatabase'] = '@HTTP_HOST@ / @VSERVER@ / @DATABASE@ | @PHPMYADMIN@';/** * title of browser window when a server is selected * * @global string $cfg['TitleServer'] */$cfg['TitleServer'] = '@HTTP_HOST@ / @VSERVER@ | @PHPMYADMIN@';/** * title of browser window when nothing is selected * @global string $cfg['TitleDefault'] */$cfg['TitleDefault'] = '@HTTP_HOST@ | @PHPMYADMIN@';/** * show some icons for warning, error and information messages (true|false)? * * @global boolean $cfg['ErrorIconic'] */$cfg['ErrorIconic'] = true;/** * show icons in list on main page and on menu tabs (true|false)? * * @global boolean $cfg['MainPageIconic'] */$cfg['MainPageIconic'] = true;/** * show help button instead of Documentation text (true|false)? * * @global boolean $cfg['ReplaceHelpImg'] */$cfg['ReplaceHelpImg'] = true;/******************************************************************************* * theme manager *//** * using themes manager please set up here the path to 'themes' else leave empty * * @global string $cfg['ThemePath'] */$cfg['ThemePath'] = './themes';/** * if you want to use selectable themes and if ThemesPath not empty * set it to true, else set it to false (default is false); * * @global boolean $cfg['ThemeManager'] */$cfg['ThemeManager'] = true;/** * set up default theme, if ThemePath not empty you can set up here an valid * path to themes or 'original' for the original pma-theme * * @global string $cfg['ThemeDefault'] */$cfg['ThemeDefault'] = 'pmahomme';/** * allow different theme for each configured server * * @global boolean $cfg['ThemePerServer'] */$cfg['ThemePerServer'] = false;/******************************************************************************* * *//** * Default query for table * * @global string $cfg['DefaultQueryTable'] */$cfg['DefaultQueryTable'] = 'SELECT * FROM @TABLE@ WHERE 1';/** * Default query for database * * @global string $cfg['DefaultQueryDatabase'] */$cfg['DefaultQueryDatabase'] = '';/******************************************************************************* * SQL Query box settings * These are the links display in all of the SQL Query boxes * * @global array $cfg['SQLQuery'] */$cfg['SQLQuery'] = array();/** * Edit link to change a query * * @global boolean $cfg['SQLQuery']['Edit'] */$cfg['SQLQuery']['Edit'] = true;/** * EXPLAIN on SELECT queries * * @global boolean $cfg['SQLQuery']['Explain'] */$cfg['SQLQuery']['Explain'] = true;/** * Wrap a query in PHP * * @global boolean $cfg['SQLQuery']['ShowAsPHP'] */$cfg['SQLQuery']['ShowAsPHP'] = true;/** * Validate a query (see $cfg['SQLValidator'] as well) * * @global boolean $cfg['SQLQuery']['Validate'] */$cfg['SQLQuery']['Validate'] = false;/** * Refresh the results page * * @global boolean $cfg['SQLQuery']['Refresh'] */$cfg['SQLQuery']['Refresh'] = true;/******************************************************************************* * Web server upload/save/import directories *//** * Directory for uploaded files that can be executed by phpMyAdmin. * For example './upload'. Leave empty for no upload directory support. * Use %u for username inclusion. * * @global string $cfg['UploadDir'] */$cfg['UploadDir'] = '';/** * Directory where phpMyAdmin can save exported data on server. * For example './save'. Leave empty for no save directory support. * Use %u for username inclusion. * * @global string $cfg['SaveDir'] */$cfg['SaveDir'] = '';/** * Directory where phpMyAdmin can save temporary files. * This is needed for MS Excel export, see documentation how to enable that. * * @global string $cfg['TempDir'] */$cfg['TempDir'] = '';/** * Misc. settings *//** * Is GD >= 2 available? Set to yes/no/auto. 'auto' does auto-detection, * which is the only safe way to determine GD version. * * @global string $cfg['GD2Available'] */$cfg['GD2Available'] = 'auto';/** * Lists proxy IP and HTTP header combinations which are trusted for IP allow/deny * * @global array $cfg['TrustedProxies'] */$cfg['TrustedProxies'] = array();/** * We normally check the permissions on the configuration file to ensure * it's not world writable. However, phpMyAdmin could be installed on * a NTFS filesystem mounted on a non-Windows server, in which case the * permissions seems wrong but in fact cannot be detected. In this case * a sysadmin would set the following to false. */$cfg['CheckConfigurationPermissions'] = true;/** * Limit for length of URL in links. When length would be above this limit, it * is replaced by form with button. * This is required as some web servers (IIS) have problems with long URLs. * The recommended limit is 2000 * (see http://www.boutell.com/newfaq/misc/urllength.html) but we put * 1000 to accommodate Suhosin, see bug #3358750. */$cfg['LinkLengthLimit'] = 1000;/** * Disable the table maintenance mass operations, like optimizing or * repairing the selected tables of a database. An accidental execution * of such a maintenance task can enormously slow down a bigger database. */$cfg['DisableMultiTableMaintenance'] = false;/******************************************************************************* * SQL Parser Settings * * @global array $cfg['SQP'] */$cfg['SQP'] = array();/** * Pretty-printing style to use on queries (html, text, none) * * @global string $cfg['SQP']['fmtType'] */$cfg['SQP']['fmtType'] = 'html';/** * Amount to indent each level (floats are valid) * * @global integer $cfg['SQP']['fmtInd'] */$cfg['SQP']['fmtInd'] = '1';/** * Units for indenting each level (CSS Types - {em, px, pt}) * * @global string $cfg['SQP']['fmtIndUnit'] */$cfg['SQP']['fmtIndUnit'] = 'em';/******************************************************************************* * If you wish to use the SQL Validator service, you should be aware of the * following: * All SQL statements are stored anonymously for statistical purposes. * Mimer SQL Validator, Copyright 2002 Upright Database Technology. * All rights reserved. * * @global array $cfg['SQLValidator'] */$cfg['SQLValidator'] = array();/** * Make the SQL Validator available * * @global boolean $cfg['SQLValidator']['use'] */$cfg['SQLValidator']['use'] = false;/** * If you have a custom username, specify it here (defaults to anonymous) * * @global string $cfg['SQLValidator']['username'] */$cfg['SQLValidator']['username'] = '';/** * Password for username * * @global string $cfg['SQLValidator']['password'] */$cfg['SQLValidator']['password'] = '';/******************************************************************************* * Developers ONLY! * * @global array $cfg['DBG'] */$cfg['DBG'] = array();/** * Output executed queries and their execution times * * @global boolean $cfg['DBG']['sql'] */$cfg['DBG']['sql'] = false;/******************************************************************************* * MySQL settings *//** * Column types; * VARCHAR, TINYINT, TEXT and DATE are listed first, based on estimated popularity * * This variable is filled in data_*.inc.php * * @global array $cfg['ColumnTypes'] */$cfg['ColumnTypes'] = array();/** * Attributes * * This variable is filled in data_*.inc.php * * @global array $cfg['AttributeTypes'] */$cfg['AttributeTypes'] = array();if ($cfg['ShowFunctionFields']) {    /**     * Available functions     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['Functions']     */    $cfg['Functions'] = array();    /**     * Which column types will be mapped to which Group?     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['RestrictColumnTypes']     */    $cfg['RestrictColumnTypes'] = array();    /**     * Map above defined groups to any function     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['RestrictFunctions']     */    $cfg['RestrictFunctions'] = array();    /**     * Default functions for above defined groups     *     * @global array $cfg['DefaultFunctions']     */    $cfg['DefaultFunctions'] = array(        'FUNC_CHAR' => '',        'FUNC_DATE' => '',        'FUNC_NUMBER' => '',        'FUNC_SPATIAL' => 'GeomFromText',        'FUNC_UUID' => 'UUID',        'first_timestamp' => 'NOW',    );} // end if/** * Search operators * * @global array $cfg['NumOperators'] */$cfg['NumOperators'] = array(   '=',   '>',   '>=',   '<',   '<=',   '!=',   'LIKE',   'NOT LIKE',   'IN (...)',   'NOT IN (...)',   'BETWEEN',   'NOT BETWEEN',);/** * Search operators * * @global array $cfg['TextOperators'] */$cfg['TextOperators'] = array(   'LIKE',   'LIKE %...%',   'NOT LIKE',   '=',   '!=',   'REGEXP',   'REGEXP ^...$',   'NOT REGEXP',   "= ''",   "!= ''",   'IN (...)',   'NOT IN (...)',   'BETWEEN',   'NOT BETWEEN',);/** * Search operators * * @global array $cfg['EnumOperators'] */$cfg['EnumOperators'] = array(   '=',   '!=',);/** * Search operators * * @global array $cfg['SetOperators'] */$cfg['SetOperators'] = array(   'IN',   'NOT IN',);/** * Search operators * * @global array $cfg['NullOperators'] */$cfg['NullOperators'] = array(   'IS NULL',   'IS NOT NULL',);/** * Search operators * * @global array $cfg['UnaryOperators'] */$cfg['UnaryOperators'] = array(   'IS NULL' => 1,   'IS NOT NULL' => 1,   "= ''" => 1,   "!= ''" => 1);/** * Max rows retreived for zoom search */$cfg['maxRowPlotLimit'] = 500;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin *//** * Get some core libraries */require_once './libraries/common.inc.php';$action = 'tbl_create.php';require_once './libraries/header.inc.php';$titles = PMA_buildActionTitles();// Check parametersPMA_checkParameters(array('db'));/* Check if database name is empty */if (strlen($db) == 0) {    PMA_mysqlDie(__('The database name is empty!'), '', '', 'main.php');}/** * Defines the url to return to in case of error in a sql statement */if (PMA_DBI_get_columns($db, $table)) {    // table exists already    PMA_mysqlDie(        sprintf(__('Table %s already exists!'), htmlspecialchars($table)),        '',        '',        'db_structure.php?' . PMA_generate_common_url($db)    );}$err_url = 'tbl_create.php?' . PMA_generate_common_url($db, $table);// check number of fields to be createdif (isset($_REQUEST['submit_num_fields'])) {    $regenerate = true; // for libraries/tbl_properties.inc.php    $num_fields = $_REQUEST['orig_num_fields'] + $_REQUEST['added_fields'];} elseif (isset($_REQUEST['num_fields']) && intval($_REQUEST['num_fields']) > 0) {    $num_fields = (int) $_REQUEST['num_fields'];} else {    $num_fields = 4;}/** * Selects the database to work with */if (!PMA_DBI_select_db($db)) {    PMA_mysqlDie(        sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($db)),        '',        '',        'main.php'    );}/** * The form used to define the structure of the table has been submitted */if (isset($_REQUEST['do_save_data'])) {    $sql_query = '';    // Transforms the radio button field_key into 3 arrays    $field_cnt = count($_REQUEST['field_name']);    for ($i = 0; $i < $field_cnt; ++$i) {        if (isset($_REQUEST['field_key'][$i])) {            if ($_REQUEST['field_key'][$i] == 'primary_' . $i) {                $field_primary[] = $i;            }            if ($_REQUEST['field_key'][$i] == 'index_' . $i) {                $field_index[]   = $i;            }            if ($_REQUEST['field_key'][$i] == 'unique_' . $i) {                $field_unique[]  = $i;            }        } // end if    } // end for    // Builds the fields creation statements    for ($i = 0; $i < $field_cnt; $i++) {        // '0' is also empty for php :-(        if (empty($_REQUEST['field_name'][$i]) && $_REQUEST['field_name'][$i] != '0') {            continue;        }        $query = PMA_Table::generateFieldSpec(            $_REQUEST['field_name'][$i],            $_REQUEST['field_type'][$i],            $_REQUEST['field_length'][$i],            $_REQUEST['field_attribute'][$i],            isset($_REQUEST['field_collation'][$i])                ? $_REQUEST['field_collation'][$i]                : '',            isset($_REQUEST['field_null'][$i])                ? $_REQUEST['field_null'][$i]                : 'NOT NULL',            $_REQUEST['field_default_type'][$i],            $_REQUEST['field_default_value'][$i],            isset($_REQUEST['field_extra'][$i])                ? $_REQUEST['field_extra'][$i]                : false,            isset($_REQUEST['field_comments'][$i])                ? $_REQUEST['field_comments'][$i]                : '',            $field_primary,            $i        );        $query .= ', ';        $sql_query .= $query;    } // end for    unset($field_cnt, $query);    $sql_query = preg_replace('@, $@', '', $sql_query);    // Builds the primary keys statements    $primary     = '';    $primary_cnt = (isset($field_primary) ? count($field_primary) : 0);    for ($i = 0; $i < $primary_cnt; $i++) {        $j = $field_primary[$i];        if (isset($_REQUEST['field_name'][$j]) && strlen($_REQUEST['field_name'][$j])) {            $primary .= PMA_backquote($_REQUEST['field_name'][$j]) . ', ';        }    } // end for    unset($primary_cnt);    $primary = preg_replace('@, $@', '', $primary);    if (strlen($primary)) {        $sql_query .= ', PRIMARY KEY (' . $primary . ')';    }    unset($primary);    // Builds the indexes statements    $index     = '';    $index_cnt = (isset($field_index) ? count($field_index) : 0);    for ($i = 0;$i < $index_cnt; $i++) {        $j = $field_index[$i];        if (isset($_REQUEST['field_name'][$j]) && strlen($_REQUEST['field_name'][$j])) {            $index .= PMA_backquote($_REQUEST['field_name'][$j]) . ', ';        }    } // end for    unset($index_cnt);    $index = preg_replace('@, $@', '', $index);    if (strlen($index)) {        $sql_query .= ', INDEX (' . $index . ')';    }    unset($index);    // Builds the uniques statements    $unique     = '';    $unique_cnt = (isset($field_unique) ? count($field_unique) : 0);    for ($i = 0; $i < $unique_cnt; $i++) {        $j = $field_unique[$i];        if (isset($_REQUEST['field_name'][$j]) && strlen($_REQUEST['field_name'][$j])) {           $unique .= PMA_backquote($_REQUEST['field_name'][$j]) . ', ';        }    } // end for    unset($unique_cnt);    $unique = preg_replace('@, $@', '', $unique);    if (strlen($unique)) {        $sql_query .= ', UNIQUE (' . $unique . ')';    }    unset($unique);    // Builds the FULLTEXT statements    $fulltext     = '';    $fulltext_cnt = (isset($field_fulltext) ? count($field_fulltext) : 0);    for ($i = 0; $i < $fulltext_cnt; $i++) {        $j = $field_fulltext[$i];        if (isset($_REQUEST['field_name'][$j]) && strlen($_REQUEST['field_name'][$j])) {           $fulltext .= PMA_backquote($_REQUEST['field_name'][$j]) . ', ';        }    } // end for    $fulltext = preg_replace('@, $@', '', $fulltext);    if (strlen($fulltext)) {        $sql_query .= ', FULLTEXT (' . $fulltext . ')';    }    unset($fulltext);    // Builds the 'create table' statement    $sql_query = 'CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table)     . ' (' . $sql_query . ')';    // Adds table type, character set, comments and partition definition    if (!empty($_REQUEST['tbl_type']) && ($_REQUEST['tbl_type'] != 'Default')) {        $sql_query .= ' ENGINE = ' . $_REQUEST['tbl_type'];    }    if (!empty($_REQUEST['tbl_collation'])) {        $sql_query .= PMA_generateCharsetQueryPart($_REQUEST['tbl_collation']);    }    if (!empty($_REQUEST['comment'])) {        $sql_query .= ' COMMENT = \'' . PMA_sqlAddSlashes($_REQUEST['comment']) . '\'';    }    if (!empty($_REQUEST['partition_definition'])) {        $sql_query .= ' ' . PMA_sqlAddSlashes($_REQUEST['partition_definition']);    }    $sql_query .= ';';    // Executes the query    $result = PMA_DBI_try_query($sql_query);    if ($result) {        // If comments were sent, enable relation stuff        include_once './libraries/transformations.lib.php';        // Update comment table for mime types [MIME]        if (isset($_REQUEST['field_mimetype'])         && is_array($_REQUEST['field_mimetype'])         && $cfg['BrowseMIME']) {            foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {                if (isset($_REQUEST['field_name'][$fieldindex])                 && strlen($_REQUEST['field_name'][$fieldindex])) {                    PMA_setMIME(                        $db, $table, $_REQUEST['field_name'][$fieldindex], $mimetype,                        $_REQUEST['field_transformation'][$fieldindex],                        $_REQUEST['field_transformation_options'][$fieldindex]                    );                }            }        }        $message = PMA_Message::success(__('Table %1$s has been created.'));        $message->addParam(PMA_backquote($db) . '.' . PMA_backquote($table));        if ($GLOBALS['is_ajax_request'] == true) {            /**             * construct the html for the newly created table's row to be appended             * to the list of tables.             *             * Logic taken from db_structure.php             */            $tbl_url_params = array();            $tbl_url_params['db'] = $db;            $tbl_url_params['table'] = $table;            $is_show_stats = $cfg['ShowStats'];            $tbl_stats_result = PMA_DBI_query('SHOW TABLE STATUS FROM '                    . PMA_backquote($db) . ' LIKE \'' . PMA_sqlAddSlashes($table, true) . '\';');            $tbl_stats = PMA_DBI_fetch_assoc($tbl_stats_result);            PMA_DBI_free_result($tbl_stats_result);            unset($tbl_stats_result);            if ($is_show_stats) {                $sum_size       = (double) 0;                $overhead_size  = (double) 0;                $overhead_check = '';                $tblsize                    =  doubleval($tbl_stats['Data_length']) + doubleval($tbl_stats['Index_length']);                $sum_size                   += $tblsize;                list($formatted_size, $unit) =  PMA_formatByteDown($tblsize, 3, ($tblsize > 0) ? 1 : 0);                if (isset($tbl_stats['Data_free']) && $tbl_stats['Data_free'] > 0) {                    list($formatted_overhead, $overhead_unit)     = PMA_formatByteDown($tbl_stats['Data_free'], 3, ($tbl_stats['Data_free'] > 0) ? 1 : 0);                    $overhead_size           += $tbl_stats['Data_free'];                }                if (isset($formatted_overhead)) {                        $overhead = '<span>' . $formatted_overhead . '</span> <span class="unit">' . $overhead_unit . '</span>';                        unset($formatted_overhead);                    } else {                        $overhead = '-';                }           }            $new_table_string = '<tr>' . "\n";            $new_table_string .= '<td align="center"> <input type="checkbox" id="checkbox_tbl_" name="selected_tbl[]" value="'.htmlspecialchars($table).'" /> </td>' . "\n";            $new_table_string .= '<th>';            $new_table_string .= '<a href="sql.php' . PMA_generate_common_url($tbl_url_params) . '">'. $table . '</a>';            if (PMA_Tracker::isActive()) {                $truename = str_replace(' ', '&nbsp;', htmlspecialchars($table));                if (PMA_Tracker::isTracked($db, $truename)) {                    $new_table_string .= '<a href="tbl_tracking.php' . PMA_generate_common_url($tbl_url_params) . '">';                    $new_table_string .= PMA_getImage('eye.png', __('Tracking is active.'));                } elseif (PMA_Tracker::getVersion($db, $truename) > 0) {                    $new_table_string .= '<a href="tbl_tracking.php' . PMA_generate_common_url($tbl_url_params) . '">';                    $new_table_string .= PMA_getImage('eye_grey.png', __('Tracking is not active.'));                }                unset($truename);            }            $new_table_string .= '</th>' . "\n";            $new_table_string .= '<td>' . $titles['NoBrowse'] . '</td>' . "\n";            $new_table_string .= '<td><a href="tbl_structure.php' . PMA_generate_common_url($tbl_url_params) . '">' . $titles['Structure'] . '</a></td>' . "\n";            $new_table_string .= '<td>' . $titles['NoSearch'] . '</td>' . "\n";            $new_table_string .= '<td><a href="tbl_change.php' . PMA_generate_common_url($tbl_url_params) . '">' . $titles['Insert'] . '</a></td>' . "\n";            $new_table_string .= '<td>' . $titles['NoEmpty'] . '</td>' . "\n";            $new_table_string .= '<td><a class="drop_table_anchor" href="sql.php' . PMA_generate_common_url($tbl_url_params) . '&amp;sql_query=';            $new_table_string .= urlencode('DROP TABLE ' . PMA_backquote($table));            $new_table_string .= '">';            $new_table_string .= $titles['Drop'];            $new_table_string .= '</a></td>' . "\n";            $new_table_string .= '<td class="value">' . $tbl_stats['Rows'] . '</td>' . "\n";            $new_table_string .= '<td nowrap="nowrap">' . $tbl_stats['Engine'] . '</td>' . "\n";            $new_table_string .= '<td> <dfn title="' . PMA_getCollationDescr($tbl_stats['Collation']) . '">'. $tbl_stats['Collation'] .'</dfn></td>' . "\n";            if ($is_show_stats) {                $new_table_string .= '<td class="value tbl_size"> <a href="tbl_structure.php' . PMA_generate_common_url($tbl_url_params) . '#showusage" ><span>' . $formatted_size . '</span> <span class="unit">' . $unit . '</class></a> </td>' . "\n" ;                $new_table_string .= '<td class="value tbl_overhead">' . $overhead . '</td>' . "\n" ;            }            $new_table_string .= '</tr>' . "\n";            $extra_data['new_table_string'] = $new_table_string;            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $display_query = $sql_query;        $sql_query = '';        // read table info on this newly created table, in case        // the next page is Structure        $reread_info = true;        include './libraries/tbl_info.inc.php';        // do not switch to sql.php - as there is no row to be displayed on a new table        if ($cfg['DefaultTabTable'] === 'sql.php') {            include './tbl_structure.php';        } else {            include './' . $cfg['DefaultTabTable'];        }        exit;    } else {        if ($GLOBALS['is_ajax_request'] == true) {            PMA_ajaxResponse(PMA_DBI_getError(), false);        } else {            PMA_mysqlDie('', '', '', $err_url, false);            // An error happened while inserting/updating a table definition.            // to prevent total loss of that data, we embed the form once again.            // The variable $regenerate will be used to restore data in libraries/tbl_properties.inc.php            $num_fields = $_REQUEST['orig_num_fields'];            $regenerate = true;        }    }} // end do create table/** * Displays the form used to define the structure of the table */// This div is used to show the content(eg: create table form with more columns) fetched with AJAX subsequently.if ($GLOBALS['is_ajax_request'] != true) {    echo('<div id="create_table_div">');}require './libraries/tbl_properties.inc.php';// Displays the footerrequire './libraries/footer.inc.php';if ($GLOBALS['is_ajax_request'] != true) {    echo('</div>');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * display selection for relational field values * * @package PhpMyAdmin *//** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';PMA_checkParameters(array('db', 'table', 'field'));require_once './libraries/ob.lib.php';PMA_outBufferPre();require_once './libraries/header_http.inc.php';/** * Displays the frame */require_once './libraries/transformations.lib.php'; // Transformations$cfgRelation = PMA_getRelationsParam();$foreigners  = ($cfgRelation['relwork'] ? PMA_getForeigners($db, $table) : false);$override_total = true;if (! isset($pos)) {    $pos = 0;}$foreign_limit = 'LIMIT ' . $pos . ', ' . $GLOBALS['cfg']['MaxRows'] . ' ';if (isset($foreign_navig) && $foreign_navig == __('Show all')) {    unset($foreign_limit);}$foreignData = PMA_getForeignData($foreigners, $field, $override_total, isset($foreign_filter) ? $foreign_filter : '', $foreign_limit);if (isset($rownumber)) {    $rownumber_param = '&amp;rownumber=' . urlencode($rownumber);} else {    $rownumber_param = '';}$gotopage = '';$showall = '';if (is_array($foreignData['disp_row'])) {    if ($cfg['ShowAll'] && ($foreignData['the_total'] > $GLOBALS['cfg']['MaxRows'])) {        $showall = '<input type="submit" name="foreign_navig" value="' . __('Show all') . '" />';    }    $session_max_rows = $GLOBALS['cfg']['MaxRows'];    $pageNow = @floor($pos / $session_max_rows) + 1;    $nbTotalPage = @ceil($foreignData['the_total'] / $session_max_rows);    if ($foreignData['the_total'] > $GLOBALS['cfg']['MaxRows']) {        $gotopage = PMA_pageselector(            $session_max_rows,            $pageNow,            $nbTotalPage,            200,            5,            5,            20,            10,            __('Page number:')            );    }}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"    xml:lang="<?php echo $available_languages[$lang][1]; ?>"    lang="<?php echo $available_languages[$lang][1]; ?>"    dir="<?php echo $text_dir; ?>"><head>    <title>phpMyAdmin</title>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <link rel="stylesheet" type="text/css"        href="phpmyadmin.css.php?<?php echo PMA_generate_common_url('', ''); ?>&amp;js_frame=right&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" /><?php// includes everything asked for by libraries/common.inc.phprequire_once './libraries/header_scripts.inc.php';?>    <script type="text/javascript">    //<![CDATA[    self.focus();    function formupdate(fieldmd5, key) {        var $inline = window.opener.jQuery('.browse_foreign_clicked');        if ($inline.length != 0) {            $inline.removeClass('browse_foreign_clicked')                // for grid editing,                // puts new value in the previous element which is                // a span with class curr_value                .prev('.curr_value').text(key);            // for zoom-search editing, puts new value in the previous            // element which is an input field            $inline.prev('input[type=text]').val(key);            self.close();            return false;        }        if (opener && opener.document && opener.document.insertForm) {            var field = 'fields';            var field_null = 'fields_null';            <?php if (isset($rownumber)) { ?>            var element_name = field + '[multi_edit][<?php echo htmlspecialchars($rownumber); ?>][' + fieldmd5 + ']';            var null_name = field_null + '[multi_edit][<?php echo htmlspecialchars($rownumber); ?>][' + fieldmd5 + ']';            <?php } else { ?>            var element_name = field + '[]';            <?php } ?>            <?php if (isset($fieldkey) && is_numeric($fieldkey)) { ?>            var element_name_alt = field + '[<?php echo $fieldkey; ?>]';            <?php } else { ?>            var element_name_alt = field + '[0]';            <?php } ?>            if (opener.document.insertForm.elements[element_name]) {                // Edit/Insert form                opener.document.insertForm.elements[element_name].value = key;                if (opener.document.insertForm.elements[null_name]) {                    opener.document.insertForm.elements[null_name].checked = false;                }                self.close();                return false;            } else if (opener.document.insertForm.elements[element_name_alt]) {                // Search form                opener.document.insertForm.elements[element_name_alt].value = key;                self.close();                return false;            }        }        alert('<?php echo PMA_jsFormat(__('The target browser window could not be updated. Maybe you have closed the parent window, or your browser\'s security settings are configured to block cross-window updates.')); ?>');    }    //]]>    </script></head><body id="body_browse_foreigners"><form action="browse_foreigners.php" method="post"><fieldset><?php echo PMA_generate_common_hidden_inputs($db, $table); ?><input type="hidden" name="field" value="<?php echo htmlspecialchars($field); ?>" /><input type="hidden" name="fieldkey"    value="<?php echo isset($fieldkey) ? htmlspecialchars($fieldkey) : ''; ?>" /><?php if (isset($rownumber)) { ?><input type="hidden" name="rownumber" value="<?php echo htmlspecialchars($rownumber); ?>" /><?php } ?><span class="formelement">    <label for="input_foreign_filter"><?php echo __('Search') . ':'; ?></label>    <input type="text" name="foreign_filter" id="input_foreign_filter"        value="<?php echo isset($foreign_filter) ? htmlspecialchars($foreign_filter) : ''; ?>" />    <input type="submit" name="submit_foreign_filter" value="<?php echo __('Go');?>" /></span><span class="formelement">    <?php echo $gotopage; ?></span><span class="formelement">    <?php echo $showall; ?></span></fieldset></form><table width="100%"><?phpif (is_array($foreignData['disp_row'])) {    $header = '<tr>        <th>' . __('Keyname') . '</th>        <th>' . __('Description') . '</th>        <td width="20%"></td>        <th>' . __('Description') . '</th>        <th>' . __('Keyname') . '</th>    </tr>';    echo '<thead>' . $header . '</thead>' . "\n"        .'<tfoot>' . $header . '</tfoot>' . "\n"        .'<tbody>' . "\n";    $values = array();    $keys   = array();    foreach ($foreignData['disp_row'] as $relrow) {        if ($foreignData['foreign_display'] != false) {            $values[] = $relrow[$foreignData['foreign_display']];        } else {            $values[] = '';        }        $keys[] = $relrow[$foreignData['foreign_field']];    }    asort($keys);    $hcount = 0;    $odd_row = true;    $val_ordered_current_row = 0;    $val_ordered_current_equals_data = false;    $key_ordered_current_equals_data = false;    foreach ($keys as $key_ordered_current_row => $value) {    //for ($i = 0; $i < $count; $i++) {        $hcount++;        if ($cfg['RepeatCells'] > 0 && $hcount > $cfg['RepeatCells']) {            echo $header;            $hcount = 0;            $odd_row = true;        }        $key_ordered_current_key = $keys[$key_ordered_current_row];        $key_ordered_current_val = $values[$key_ordered_current_row];        $val_ordered_current_key = $keys[$val_ordered_current_row];        $val_ordered_current_val = $values[$val_ordered_current_row];        $val_ordered_current_row++;        if (PMA_strlen($val_ordered_current_val) <= $cfg['LimitChars']) {            $val_ordered_current_val = htmlspecialchars($val_ordered_current_val);            $val_ordered_current_val_title = '';        } else {            $val_ordered_current_val_title                = htmlspecialchars($val_ordered_current_val);            $val_ordered_current_val = htmlspecialchars(                PMA_substr($val_ordered_current_val, 0, $cfg['LimitChars'])                . '...'            );        }        if (PMA_strlen($key_ordered_current_val) <= $cfg['LimitChars']) {            $key_ordered_current_val = htmlspecialchars($key_ordered_current_val);            $key_ordered_current_val_title = '';        } else {            $key_ordered_current_val_title                = htmlspecialchars($key_ordered_current_val);            $key_ordered_current_val                = htmlspecialchars(                    PMA_substr($key_ordered_current_val, 0, $cfg['LimitChars']) . '...'                );        }        if (! empty($data)) {            $val_ordered_current_equals_data = $val_ordered_current_key == $data;            $key_ordered_current_equals_data = $key_ordered_current_key == $data;        }        ?>    <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">        <td nowrap="nowrap">        <?php        echo ($key_ordered_current_equals_data ? '<strong>' : '')            .'<a href="#" title="' . __('Use this value')            . ($key_ordered_current_val_title != '' ? ': ' . $key_ordered_current_val_title : '') . '"'            .' onclick="formupdate(\'' . md5($field) . '\', \''            . PMA_jsFormat($key_ordered_current_key, false) . '\'); return false;">'            .htmlspecialchars($key_ordered_current_key) . '</a>' . ($key_ordered_current_equals_data ? '</strong>' : '');        ?></td>        <td>        <?php        echo ($key_ordered_current_equals_data ? '<strong>' : '')            . '<a href="#" title="' . __('Use this value') . ($key_ordered_current_val_title != '' ? ': '            . $key_ordered_current_val_title : '') . '" onclick="formupdate(\''            . md5($field) . '\', \'' . PMA_jsFormat($key_ordered_current_key, false) . '\'); return false;">'            . $key_ordered_current_val . '</a>' . ($key_ordered_current_equals_data ? '</strong>' : '');        ?></td>        <td width="20%">            <img src="<?php echo $GLOBALS['pmaThemeImage'] . 'spacer.png'; ?>"                alt="" width="1" height="1" /></td>        <td>        <?php        echo ($val_ordered_current_equals_data ? '<strong>' : '')            . '<a href="#" title="' . __('Use this value') .  ($val_ordered_current_val_title != '' ? ': '            . $val_ordered_current_val_title : '') . '" onclick="formupdate(\'' . md5($field)            . '\', \'' . PMA_jsFormat($val_ordered_current_key, false) . '\'); return false;">'            . $val_ordered_current_val . '</a>' . ($val_ordered_current_equals_data ? '</strong>' : '');        ?></td>        <td nowrap="nowrap">        <?php        echo ($val_ordered_current_equals_data ? '<strong>' : '') . '<a href="#" title="'        . __('Use this value') .  ($val_ordered_current_val_title != '' ? ': ' . $val_ordered_current_val_title : '')        . '" onclick="formupdate(\'' . md5($field) . '\', \''        . PMA_jsFormat($val_ordered_current_key, false) . '\'); return false;">' . htmlspecialchars($val_ordered_current_key)        . '</a>' . ($val_ordered_current_equals_data ? '</strong>' : '');        ?></td>    </tr>        <?php    } // end while}?></tbody></table></body></html>
