<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Database with allowed values for configuration stored in the $cfg array, * used by setup script and user preferences to generate forms. * * @package PhpMyAdmin */if (!defined('PHPMYADMIN')) {    exit;}/** * Value meaning: * o array - select field, array contains allowed values * o string - type override * * Use normal array, paths won't be expanded */$cfg_db = array();$cfg_db['Servers'] = array(1 => array(    'port'         => 'integer',    'connect_type' => array('tcp', 'socket'),    'extension'    => array('mysql', 'mysqli'),    'auth_type'    => array('config', 'http', 'signon', 'cookie'),    'AllowDeny'    => array(        'order'    => array('', 'deny,allow', 'allow,deny', 'explicit')),    'only_db'      => 'array'));$cfg_db['RecodingEngine'] = array('auto', 'iconv', 'recode', 'none');$cfg_db['OBGzip'] = array('auto', true, false);$cfg_db['MemoryLimit'] = 'short_string';$cfg_db['ShowTooltipAliasTB'] = array('nested', true, false);$cfg_db['DisplayDatabasesList'] = array('auto', true, false);$cfg_db['LeftLogoLinkWindow'] = array('main', 'new');$cfg_db['LeftDefaultTabTable'] = array(    'tbl_structure.php', // fields list    'tbl_sql.php',       // SQL form    'tbl_select.php',    // search page    'tbl_change.php',    // insert row page    'sql.php');          // browse page$cfg_db['LeftFrameDBSeparator'] = 'short_string';$cfg_db['LeftFrameTableSeparator'] = 'short_string';$cfg_db['NavigationBarIconic'] = array(true => __('Yes'), false => __('No'), 'both' => __('Both'));$cfg_db['Order'] = array('ASC', 'DESC', 'SMART');$cfg_db['RowActionLinks'] = array('none' => __('Nowhere'), 'left' => __('Left'), 'right' => __('Right'), 'both' => __('Both'));$cfg_db['ProtectBinary'] = array(false, 'blob', 'all');$cfg_db['DefaultDisplay'] = array('horizontal', 'vertical', 'horizontalflipped');$cfg_db['CharEditing'] = array('input', 'textarea');$cfg_db['PropertiesIconic'] = array(true => __('Yes'), false => __('No'), 'both' => __('Both'));$cfg_db['DefaultTabServer'] = array(    'main.php',                // the welcome page (recommended for multiuser setups)    'server_databases.php',    // list of databases    'server_status.php',       // runtime information    'server_variables.php',    // MySQL server variables    'server_privileges.php',   // user management    'server_processlist.php'); // process list$cfg_db['DefaultTabDatabase'] = array(    'db_structure.php',   // tables list    'db_sql.php',         // SQL form    'db_search.php',      // search query    'db_operations.php'); // operations on database$cfg_db['DefaultTabTable'] = array(    'tbl_structure.php', // fields list    'tbl_sql.php',       // SQL form    'tbl_select.php',    // search page    'tbl_change.php',    // insert row page    'sql.php');          // browse page$cfg_db['QueryWindowDefTab'] = array(    'sql',     // SQL    'files',   // Import files    'history', // SQL history    'full');   // All (SQL and SQL history)$cfg_db['InitialSlidersState'] = array(    'open' => __('Open'),     'closed' => __('Closed'),    'disabled' => __('Disabled'));$cfg_db['Import']['format'] = array(    'csv',    // CSV    'docsql', // DocSQL    'ldi',    // CSV using LOAD DATA    'sql');   // SQL$cfg_db['Import']['charset'] = array_merge(array(''), $GLOBALS['cfg']['AvailableCharsets']);$cfg_db['Import']['sql_compatibility'] = $cfg_db['Export']['sql_compatibility'] = array(    'NONE', 'ANSI', 'DB2', 'MAXDB', 'MYSQL323', 'MYSQL40', 'MSSQL', 'ORACLE',    // removed; in MySQL 5.0.33, this produces exports that    // can't be read by POSTGRESQL (see our bug #1596328)    //'POSTGRESQL',    'TRADITIONAL');$cfg_db['Import']['csv_terminated'] = 'short_string';$cfg_db['Import']['csv_enclosed'] = 'short_string';$cfg_db['Import']['csv_escaped'] = 'short_string';$cfg_db['Import']['ldi_terminated'] = 'short_string';$cfg_db['Import']['ldi_enclosed'] = 'short_string';$cfg_db['Import']['ldi_escaped'] = 'short_string';$cfg_db['Import']['ldi_local_option'] = array('auto', true, false);$cfg_db['Export']['_sod_select'] = array(    'structure' => __('structure'),    'data' => __('data'),    'structure_and_data' => __('structure and data'));$cfg_db['Export']['method'] = array(    'quick' => __('Quick - display only the minimal options to configure'),    'custom' => __('Custom - display all possible options to configure'),    'custom-no-form' => __('Custom - like above, but without the quick/custom choice'));$cfg_db['Export']['format'] = array('codegen', 'csv', 'excel', 'htmlexcel',    'htmlword', 'latex', 'ods', 'odt', 'pdf', 'sql', 'texytext', 'xls', 'xml',    'yaml');$cfg_db['Export']['compression'] = array('none', 'zip', 'gzip', 'bzip2');$cfg_db['Export']['charset'] = array_merge(array(''), $GLOBALS['cfg']['AvailableCharsets']);$cfg_db['Export']['codegen_format'] = array('#', 'NHibernate C# DO', 'NHibernate XML');$cfg_db['Export']['csv_separator'] = 'short_string';$cfg_db['Export']['csv_terminated'] = 'short_string';$cfg_db['Export']['csv_enclosed'] = 'short_string';$cfg_db['Export']['csv_escaped'] = 'short_string';$cfg_db['Export']['csv_null'] = 'short_string';$cfg_db['Export']['excel_null'] = 'short_string';$cfg_db['Export']['excel_edition'] = array('win' => 'Windows',    'mac_excel2003' => 'Excel 2003 / Macintosh', 'mac_excel2008' => 'Excel 2008 / Macintosh');$cfg_db['Export']['sql_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['sql_type'] = array('INSERT', 'UPDATE', 'REPLACE');$cfg_db['Export']['sql_insert_syntax'] = array(    'complete' => __('complete inserts'),    'extended' => __('extended inserts'),    'both' => __('both of the above'),    'none' => __('neither of the above'));$cfg_db['Export']['xls_null'] = 'short_string';$cfg_db['Export']['xlsx_null'] = 'short_string';$cfg_db['Export']['htmlword_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['htmlword_null'] = 'short_string';$cfg_db['Export']['ods_null'] = 'short_string';$cfg_db['Export']['odt_null'] = 'short_string';$cfg_db['Export']['odt_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['texytext_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['texytext_null'] = 'short_string';/** * Default values overrides * Use only full paths */$cfg_db['_overrides'] = array();$cfg_db['_overrides']['Servers/1/extension'] = extension_loaded('mysqli')    ? 'mysqli' : 'mysql';/** * Basic validator assignments (functions from libraries/config/validate.lib.php and 'validators' * object in js/config.js) * Use only full paths and form ids */$cfg_db['_validators'] = array(    'CharTextareaCols' => 'validate_positive_number',    'CharTextareaRows' => 'validate_positive_number',    'ExecTimeLimit' => 'validate_non_negative_number',    'Export/sql_max_query_size' => 'validate_positive_number',    'ForeignKeyMaxLimit' => 'validate_positive_number',    'Import/csv_enclosed' => array(array('validate_by_regex', '/^.?$/')),    'Import/csv_escaped' => array(array('validate_by_regex', '/^.$/')),    'Import/csv_terminated' => array(array('validate_by_regex', '/^.$/')),    'Import/ldi_enclosed' => array(array('validate_by_regex', '/^.?$/')),    'Import/ldi_escaped' => array(array('validate_by_regex', '/^.$/')),    'Import/ldi_terminated' => array(array('validate_by_regex', '/^.$/')),    'Import/skip_queries' => 'validate_non_negative_number',    'InsertRows' => 'validate_positive_number',    'LeftFrameTableLevel' => 'validate_positive_number',    'LeftRecentTable' => 'validate_non_negative_number',    'LimitChars' => 'validate_positive_number',    'LoginCookieValidity' => 'validate_positive_number',    'LoginCookieStore' => 'validate_non_negative_number',    'MaxDbList' => 'validate_positive_number',    'MaxCharactersInDisplayedSQL' => 'validate_positive_number',    'MaxRows' => 'validate_positive_number',    'MaxTableList' => 'validate_positive_number',    'MemoryLimit' => array(array('validate_by_regex', '/^\d+(?:[kmg])?$/i')),    'QueryHistoryMax' => 'validate_positive_number',    'QueryWindowWidth' => 'validate_positive_number',    'QueryWindowHeight' => 'validate_positive_number',    'RepeatCells' => 'validate_non_negative_number',    'Server' => 'validate_server',    'Server_pmadb' => 'validate_pmadb',    'Servers/1/port' => 'validate_port_number',    'Servers/1/hide_db' => 'validate_regex',    'TextareaCols' => 'validate_positive_number',    'TextareaRows' => 'validate_positive_number',    'TrustedProxies' => 'validate_trusted_proxies');/** * Additional validators used for user preferences */$cfg_db['_userValidators'] = array(    'MaxDbList' => array(array('validate_upper_bound', 'value:MaxDbList')),    'MaxTableList' => array(array('validate_upper_bound', 'value:MaxTableList')),    'QueryHistoryMax' => array(array('validate_upper_bound', 'value:QueryHistoryMax')),);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'import.js';/** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';$import_type = 'server';require './libraries/display_import.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require_once './libraries/server_common.inc.php';require_once './libraries/sql_query_form.lib.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm();/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for password change * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * autocomplete feature of IE kills the "onchange" event handler and it *        must be replaced by the "onpropertychange" one in this case */$chg_evt_handler = (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 5)                 ? 'onpropertychange'                 : 'onchange';// Displays the form?>    <form method="post" id="change_password_form" action="<?php echo $GLOBALS['PMA_PHP_SELF']; ?>" name="chgPassword" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="ajax" ' : ''); ?> onsubmit="return checkPassword(this)">    <?php   echo PMA_generate_common_hidden_inputs();            if (strpos($GLOBALS['PMA_PHP_SELF'], 'server_privileges') !== false) {                echo '<input type="hidden" name="username" value="' . htmlspecialchars($username) . '" />' . "\n"                   . '<input type="hidden" name="hostname" value="' . htmlspecialchars($hostname) . '" />' . "\n";            }?>    <fieldset id="fieldset_change_password">        <legend><?php echo __('Change password'); ?></legend>        <table class="data noclick">        <tr class="odd">            <td colspan="2">                <input type="radio" name="nopass" value="1" id="nopass_1" onclick="pma_pw.value = ''; pma_pw2.value = ''; this.checked = true" />        <label for="nopass_1"><?php echo __('No Password') . "\n"; ?></label>            </td>        </tr>        <tr class="even">            <td>                <input type="radio" name="nopass" value="0" id="nopass_0" onclick="document.getElementById('text_pma_pw').focus();" checked="checked " />        <label for="nopass_0"><?php echo __('Password'); ?>:&nbsp;</label>            </td>            <td>                <input type="password" name="pma_pw" id="text_pma_pw" size="10" class="textfield" <?php echo $chg_evt_handler; ?>="nopass[1].checked = true" />        &nbsp;&nbsp;        <?php echo __('Re-type'); ?>:&nbsp;                <input type="password" name="pma_pw2" id="text_pma_pw2" size="10" class="textfield" <?php echo $chg_evt_handler; ?>="nopass[1].checked = true" />            </td>        </tr>        <tr>            <td>            <?php echo __('Password Hashing'); ?>:        </td>        <td>            <input type="radio" name="pw_hash" id="radio_pw_hash_new" value="new" checked="checked" />            <label for="radio_pw_hash_new">                MySQL&nbsp;4.1+            </label>        </td>        </tr>        <tr id="tr_element_before_generate_password">            <td>&nbsp;</td>        <td>            <input type="radio" name="pw_hash" id="radio_pw_hash_old" value="old" />            <label for="radio_pw_hash_old">                <?php echo __('MySQL 4.0 compatible'); ?>            </label>        </td>        </tr>        </table>    </fieldset>    <fieldset id="fieldset_change_password_footer" class="tblFooters">            <input type="submit" name="change_pw" value="<?php echo(__('Go')); ?>" />    </fieldset></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Get user's global privileges and some db-specific privileges * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */$GLOBALS['is_superuser']       = PMA_isSuperuser();/** * sets privilege information extracted from SHOW GRANTS result * * Detection for some CREATE privilege. * * Since MySQL 4.1.2, we can easily detect current user's grants using $userlink * (no control user needed) and we don't have to try any other method for * detection * * @todo fix to get really all privileges, not only explicitly defined for this user * from MySQL manual: (http://dev.mysql.com/doc/refman/5.0/en/show-grants.html) * SHOW GRANTS displays only the privileges granted explicitly to the named * account. Other privileges might be available to the account, but they are not * displayed. For example, if an anonymous account exists, the named account * might be able to use its privileges, but SHOW GRANTS will not display them. * */function PMA_analyseShowGrant(){    if (PMA_cacheExists('is_create_db_priv', true)) {        $GLOBALS['is_create_db_priv']  = PMA_cacheGet('is_create_db_priv', true);        $GLOBALS['is_process_priv']    = PMA_cacheGet('is_process_priv', true);        $GLOBALS['is_reload_priv']     = PMA_cacheGet('is_reload_priv', true);        $GLOBALS['db_to_create']       = PMA_cacheGet('db_to_create', true);        $GLOBALS['dbs_where_create_table_allowed']            = PMA_cacheGet('dbs_where_create_table_allowed', true);        return;    }    // defaults    $GLOBALS['is_create_db_priv']  = false;    $GLOBALS['is_process_priv']    = true;    $GLOBALS['is_reload_priv']     = false;    $GLOBALS['db_to_create']       = '';    $GLOBALS['dbs_where_create_table_allowed'] = array();    $rs_usr = PMA_DBI_try_query('SHOW GRANTS');    if (! $rs_usr) {        return;    }    $re0 = '(^|(\\\\\\\\)+|[^\\\\])'; // non-escaped wildcards    $re1 = '(^|[^\\\\])(\\\)+'; // escaped wildcards    while ($row = PMA_DBI_fetch_row($rs_usr)) {        // extract db from GRANT ... ON *.* or GRANT ... ON db.*        $db_name_offset = strpos($row[0], ' ON ') + 4;        $show_grants_dbname = substr($row[0],            $db_name_offset,            strpos($row[0], '.', $db_name_offset) - $db_name_offset);        $show_grants_dbname = PMA_unQuote($show_grants_dbname, '`');        $show_grants_str    = substr($row[0], 6, (strpos($row[0], ' ON ') - 6));        if ($show_grants_str == 'RELOAD') {            $GLOBALS['is_reload_priv'] = true;        }        /**         * @todo if we find CREATE VIEW but not CREATE, do not offer         * the create database dialog box         */        if ($show_grants_str == 'ALL'         || $show_grants_str == 'ALL PRIVILEGES'         || $show_grants_str == 'CREATE'         || strpos($show_grants_str, 'CREATE,') !== false) {            if ($show_grants_dbname == '*') {                // a global CREATE privilege                $GLOBALS['is_create_db_priv'] = true;                $GLOBALS['is_reload_priv'] = true;                $GLOBALS['db_to_create']   = '';                $GLOBALS['dbs_where_create_table_allowed'][] = '*';                // @todo we should not break here, cause GRANT ALL *.*                // could be revoked by a later rule like GRANT SELECT ON db.*                break;            } else {                // this array may contain wildcards                $GLOBALS['dbs_where_create_table_allowed'][] = $show_grants_dbname;                $dbname_to_test = PMA_backquote($show_grants_dbname);                if ($GLOBALS['is_create_db_priv']) {                    // no need for any more tests if we already know this                    continue;                }                if ((preg_match('/' . $re0 . '%|_/', $show_grants_dbname)                  && ! preg_match('/\\\\%|\\\\_/', $show_grants_dbname))                 // does this db exist?                 || (! PMA_DBI_try_query('USE ' .  preg_replace('/' . $re1 . '(%|_)/', '\\1\\3', $dbname_to_test))                  && substr(PMA_DBI_getError(), 1, 4) != 1044)                ) {                    if ($GLOBALS['cfg']['SuggestDBName']) {                        /**                         * Do not handle the underscore wildcard                          * (this case must be rare anyway)                         */                        $GLOBALS['db_to_create'] = preg_replace('/' . $re0 . '%/',     '\\1...', $show_grants_dbname);                        $GLOBALS['db_to_create'] = preg_replace('/' . $re1 . '(%|_)/', '\\1\\3', $GLOBALS['db_to_create']);                    }                    $GLOBALS['is_create_db_priv'] = true;                    /**                     * @todo collect $GLOBALS['db_to_create'] into an array, to display a                     * drop-down in the "Create database" dialog                     */                     // we don't break, we want all possible databases                     //break;                } // end if            } // end elseif        } // end if    } // end while    PMA_DBI_free_result($rs_usr);    // must also PMA_cacheUnset() them in libraries/auth/cookie.auth.lib.php    PMA_cacheSet('is_create_db_priv', $GLOBALS['is_create_db_priv'], true);    PMA_cacheSet('is_process_priv', $GLOBALS['is_process_priv'], true);    PMA_cacheSet('is_reload_priv', $GLOBALS['is_reload_priv'], true);    PMA_cacheSet('db_to_create', $GLOBALS['db_to_create'], true);    PMA_cacheSet('dbs_where_create_table_allowed', $GLOBALS['dbs_where_create_table_allowed'], true);} // end functionif (!PMA_DRIZZLE) {    PMA_analyseShowGrant();} else {    // todo: for simple_user_policy only database with user's login can be created (unless logged in as root)    $GLOBALS['is_create_db_priv'] = $GLOBALS['is_superuser'];    $GLOBALS['is_process_priv']   = false;    $GLOBALS['is_reload_priv']    = false;    $GLOBALS['db_to_create']      = '';    $GLOBALS['dbs_where_create_table_allowed'] = array('*');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays a form for editing ENUM and SET values with more * space (as an alternative to doing it in tbl_alter.php). * This form is only for users with JavaScript disabled, * users with JavaScript enabled will see a jQuery dialog. * * @package PhpMyAdmin */require_once './libraries/common.inc.php';require_once './libraries/header_http.inc.php';require_once './libraries/header_meta_style.inc.php';?></head><body>    <form action="enum_editor.php" method="get">        <?php echo PMA_generate_common_hidden_inputs(); ?>        <input type="hidden" name="field" value="<?php echo htmlspecialchars($_GET['field']); ?>" />        <fieldset class="enum_editor_no_js">        <legend><?php echo __('ENUM/SET editor'); ?></legend>        <div class="enum_editor_no_js">            <h3>            <?php                if (empty($_GET['field'])) {                    echo __('Values for a new column');                } else {                    printf(__('Values for column %s'), '"' . htmlspecialchars($_GET['field']) . '"');                }            ?>            </h3>            <p><?php echo PMA_getImage('s_info.png') . __('Enter each value in a separate field'); ?></p>            <table id="values">            <?php                // Get the enum values                $values = array();                // If the values are in an array                if (isset($_GET['values']) && is_array($_GET['values'])) {                     // then this page was called from itself via the "Add a value", "Drop" or "Go" buttons                    $values = $_GET['values'];                    foreach ($values as $key => $value) {                        $values[$key] = htmlentities($value);                    }                    // If the values are in a string                } elseif (isset($_GET['values']) && is_string($_GET['values'])) {                    // then this page was called via a link from some external page                    $values_string = htmlentities($_GET['values']);                    // There is a JS port of the below parser in functions.js                    // If you are fixing something here,                    // you need to also update the JS port.                    $values = array();                    $in_string = false;                    $buffer = '';                    for ($i=0; $i<strlen($values_string); $i++) {                        $curr = $values_string[$i];                        $next = $i == strlen($values_string)-1 ? '' : $values_string[$i+1];                        if (! $in_string && $curr == "'") {                            $in_string = true;                        } else if ($in_string && $curr == "\\" && $next == "\\") {                            $buffer .= "&#92;";                            $i++;                        } else if ($in_string && $next == "'" && ($curr == "'" || $curr == "\\")) {                            $buffer .= "&#39;";                            $i++;                        } else if ($in_string && $curr == "'") {                            $in_string = false;                            $values[] = $buffer;                            $buffer = '';                        } else if ($in_string) {                             $buffer .= $curr;                        }                    }                    if (strlen($buffer) > 0) {                        // The leftovers in the buffer are the last value (if any)                        $values[] = $buffer;                    }                }                // Escape double quotes                foreach ($values as $key => $value) {                    $values[$key] = str_replace('"', "&quote;", $value);                }                // If there are no values, maybe the user is about to make a                // new list so we add a few for him/her to get started with.                if (! count($values)                    || (count($values) == 1 && strlen($values[0]) == 0)                ) {                    array_push($values, '', '', '');                }                // Add an empty value, if there was a request to do so                if (! empty($_GET['add_field'])) {                    $values[] = '';                }                // Remove a value, given a valid index, from the list                // of values, if there was a request to do so.                if (isset($_GET['drop']) && is_array($_GET['drop'])) {                    foreach ($_GET['drop'] as $index => $value) {                        if ((int)$index == $index                            && $index > 0                            && $index <= count($values)                        ) {                            unset($values[$index]);                        }                    }                }                // Display the values in text fields                $field_counter = 0;                foreach ($values as $value) {                    $field_counter++;                    echo sprintf(                        '<tr><td><input class="text" type="text" size="30" value="%s" name="values[' . $field_counter . ']" />' . "\n",                        $value                    );                    echo '</td><td>';                    echo '<input class="drop" type="submit" value="' . __('Drop') . '" name="drop[' . $field_counter . ']" />' . "\n";                    echo '</td></tr>' . "\n";                }            ?>                <tr><td>                    <input type="submit" class="submit" value="<?php echo __('Go'); ?>" />                </td><td>                    <input type="submit" class="submit" name="add_field" value="<?php echo __('Add a value'); ?>" />                </td></tr>            </table>        </div>        <hr class='enum_editor_no_js' />        <div id="enum_editor_output">        <h3><?php echo __('Output'); ?></h3>        <p><?php echo PMA_getImage('s_info.png') . __('Copy and paste the joined values into the "Length/Values" field'); ?></p>            <?php                // Escape quotes and slashes for usage with MySQL                foreach ($values as $key => $value) {                    $values[$key]  = "'";                    $values[$key] .= str_replace(                        array("'", "\\", "&#39;", "&#92;"),                        array("''", '\\\\', "''", '\\\\'),                        $value                    );                    $values[$key] .= "'";                }                // Print out the values as a string            ?>            <textarea id="joined_values" cols="95" rows="5"><?php echo join(",", $values); ?></textarea>        </div>        </fieldset>    </form></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This library grabs the names and values of the variables sent or posted to a * script in $_GET, $_POST and $_FILES superglobals and sets simple globals * variables from them. It does the same work for $HTTP_ACCEPT_LANGUAGE and * $HTTP_AUTHORIZATION. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * copy values from one array to another, usually from a superglobal into $GLOBALS * * @param array   $array      values from * @param array   &$target    values to * @param bool    $sanitize   prevent importing key names in $_import_blacklist * @return bool */function PMA_recursive_extract($array, &$target, $sanitize = true){    if (! is_array($array)) {        return false;    }    if ($sanitize) {        $valid_variables = preg_replace($GLOBALS['_import_blacklist'], '',            array_keys($array));        $valid_variables = array_unique($valid_variables);    } else {        $valid_variables = array_keys($array);    }    foreach ($valid_variables as $key) {        if (strlen($key) === 0) {            continue;        }        if (is_array($array[$key])) {            // there could be a variable coming from a cookie of            // another application, with the same name as this array            unset($target[$key]);            PMA_recursive_extract($array[$key], $target[$key], false);        } else {            $target[$key] = $array[$key];        }    }    return true;}/** * @var array $_import_blacklist variable names that should NEVER be imported *                              from superglobals */$_import_blacklist = array(    '/^cfg$/i',         // PMA configuration    '/^server$/i',      // selected server    '/^db$/i',          // page to display    '/^table$/i',       // page to display    '/^goto$/i',        // page to display    '/^back$/i',        // the page go back    '/^lang$/i',        // selected language    '/^collation_connection$/i', //    '/^set_theme$/i',   //    '/^sql_query$/i',   // the query to be executed    '/^GLOBALS$/i',     // the global scope    '/^str.*$/i',       // PMA localized strings    '/^error_handler.*$/i',       // the error handler    '/^_.*$/i',         // PMA does not use variables starting with _ from extern    '/^.*\s+.*$/i',     // no whitespaces anywhere    '/^[0-9]+.*$/i',    // numeric variable names    //'/^PMA_.*$/i',      // other PMA variables);if (! empty($_GET)) {    PMA_recursive_extract($_GET, $GLOBALS);}if (! empty($_POST)) {    PMA_recursive_extract($_POST, $GLOBALS);}if (! empty($_FILES)) {    $_valid_variables = preg_replace($GLOBALS['_import_blacklist'], '', array_keys($_FILES));    foreach ($_valid_variables as $name) {        if (strlen($name) != 0) {            $$name = $_FILES[$name]['tmp_name'];            ${$name . '_name'} = $_FILES[$name]['name'];        }    }    unset($name, $value);}/** * globalize some environment variables */$server_vars = array('HTTP_ACCEPT_LANGUAGE', 'HTTP_AUTHORIZATION');foreach ($server_vars as $current) {    // it's not important HOW we detect html tags    // it's more important to prevent XSS    // so it's not important if we result in an invalid string,    // it's even better than a XSS capable string    if (PMA_getenv($current) && false === strpos(PMA_getenv($current), '<')) {        $$current = PMA_getenv($current);    // already imported by register_globals?    } elseif (! isset($$current) || false !== strpos($$current, '<')) {        $$current = '';    }}unset($server_vars, $current, $_import_blacklist);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'db_structure.js';$GLOBALS['js_include'][] = 'tbl_change.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'jquery/jquery.sprintf.js';/** * Prepares the tables list if the user where not redirected to this script * because there is no table in the database ($is_info is true) */if (empty($is_info)) {    // Drops/deletes/etc. multiple tables if required    if ((!empty($submit_mult) && isset($selected_tbl))        || isset($mult_btn)    ) {        $action = 'db_structure.php';        $err_url = 'db_structure.php?'. PMA_generate_common_url($db);        // see bug #2794840; in this case, code path is:        // db_structure.php -> libraries/mult_submits.inc.php -> sql.php        // -> db_structure.php and if we got an error on the multi submit,        // we must display it here and not call again mult_submits.inc.php        if (! isset($error) || false === $error) {            include './libraries/mult_submits.inc.php';        }        if (empty($message)) {            $message = PMA_Message::success();        }    }    include './libraries/db_common.inc.php';    $url_query .= '&amp;goto=db_structure.php';    // Gets the database structure    $sub_part = '_structure';    include './libraries/db_info.inc.php';    if (!PMA_DRIZZLE) {        include_once './libraries/replication.inc.php';    } else {        $server_slave_status = false;    }}require_once './libraries/bookmark.lib.php';require_once './libraries/mysql_charsets.lib.php';$db_collation = PMA_getDbCollation($db);// in a separate file to avoid redeclaration of functions in some code pathsrequire_once './libraries/db_structure.lib.php';$titles = PMA_buildActionTitles();// 1. No tablesif ($num_tables == 0) {    echo '<p>' . __('No tables found in database') . '</p>' . "\n";    if (empty($db_is_information_schema)) {        include './libraries/display_create_table.lib.php';    } // end if (Create Table dialog)    /**     * Displays the footer     */    include_once './libraries/footer.inc.php';    exit;}// else// 2. Shows table informations/** * Displays the tables list */echo '<div id="tableslistcontainer">';$_url_params = array(    'pos' => $pos,    'db'  => $db);// Add the sort options if they existsif (isset($_REQUEST['sort'])) {    $_url_params['sort'] = $_REQUEST['sort'];}if (isset($_REQUEST['sort_order'])) {    $_url_params['sort_order'] = $_REQUEST['sort_order'];}PMA_listNavigator(    $total_num_tables, $pos, $_url_params, 'db_structure.php',    'frame_content', $GLOBALS['cfg']['MaxTableList']);?><form method="post" action="db_structure.php" name="tablesForm" id="tablesForm"><?phpecho PMA_generate_common_hidden_inputs($db);PMA_TableHeader($db_is_information_schema, $server_slave_status);$i = $sum_entries = 0;$sum_size       = (double) 0;$overhead_size  = (double) 0;$overhead_check = '';$checked        = !empty($checkall) ? ' checked="checked"' : '';$num_columns    = $cfg['PropertiesNumColumns'] > 1    ? ceil($num_tables / $cfg['PropertiesNumColumns']) + 1    : 0;$row_count      = 0;$hidden_fields = array();$odd_row       = true;$sum_row_count_pre = '';$tableReductionCount = 0;   // the amount to reduce the table count byforeach ($tables as $keyname => $each_table) {    if (PMA_BS_IsHiddenTable($keyname)) {        $tableReductionCount++;        continue;    }    // Get valid statistics whatever is the table type    $table_is_view = false;    $table_encoded = urlencode($each_table['TABLE_NAME']);    // Sets parameters for links    $tbl_url_query = $url_query . '&amp;table=' . $table_encoded;    // do not list the previous table's size info for a view    $formatted_size = '-';    $unit = '';    switch ( $each_table['ENGINE']) {        // MyISAM, ISAM or Heap table: Row count, data size and index size        // are accurate; data size is accurate for ARCHIVE    case 'MyISAM' :    case 'ISAM' :    case 'HEAP' :    case 'MEMORY' :    case 'ARCHIVE' :    case 'Aria' :    case 'Maria' :        if ($db_is_information_schema) {            $each_table['Rows'] = PMA_Table::countRecords(                $db, $each_table['Name']            );        }        if ($is_show_stats) {            $tblsize                    =  doubleval($each_table['Data_length']) + doubleval($each_table['Index_length']);            $sum_size                   += $tblsize;            list($formatted_size, $unit) =  PMA_formatByteDown($tblsize, 3, ($tblsize > 0) ? 1 : 0);            if (isset($each_table['Data_free']) && $each_table['Data_free'] > 0) {                list($formatted_overhead, $overhead_unit)     = PMA_formatByteDown($each_table['Data_free'], 3, ($each_table['Data_free'] > 0) ? 1 : 0);                $overhead_size           += $each_table['Data_free'];            }        }        break;    case 'InnoDB' :    case 'PBMS' :        // InnoDB table: Row count is not accurate but data and index sizes are.        // PBMS table in Drizzle: TABLE_ROWS is taken from table cache, so it may be unavailable        if (($each_table['ENGINE'] == 'InnoDB'            && $each_table['TABLE_ROWS'] < $GLOBALS['cfg']['MaxExactCount'])            || !isset($each_table['TABLE_ROWS'])        ) {            $each_table['COUNTED'] = true;            $each_table['TABLE_ROWS'] = PMA_Table::countRecords(                $db, $each_table['TABLE_NAME'],                $force_exact = true, $is_view = false            );        } else {            $each_table['COUNTED'] = false;        }        // Drizzle doesn't provide data and index length, check for null        if ($is_show_stats && $each_table['Data_length'] !== null) {            $tblsize                    =  $each_table['Data_length'] + $each_table['Index_length'];            $sum_size                   += $tblsize;            list($formatted_size, $unit) =  PMA_formatByteDown($tblsize, 3, ($tblsize > 0) ? 1 : 0);        }        //$display_rows                   =  ' - ';        break;    // Mysql 5.0.x (and lower) uses MRG_MyISAM and MySQL 5.1.x (and higher) uses MRG_MYISAM    // Both are aliases for MERGE    case 'MRG_MyISAM' :    case 'MRG_MYISAM' :    case 'MERGE' :    case 'BerkeleyDB' :        // Merge or BerkleyDB table: Only row count is accurate.        if ($is_show_stats) {            $formatted_size =  ' - ';            $unit          =  '';        }        break;        // for a view, the ENGINE is sometimes reported as null,        // or on some servers it's reported as "SYSTEM VIEW"    case null :    case 'SYSTEM VIEW' :    case 'FunctionEngine' :        // if table is broken, Engine is reported as null, so one more test        if ($each_table['TABLE_TYPE'] == 'VIEW') {            // countRecords() takes care of $cfg['MaxExactCountViews']            $each_table['TABLE_ROWS'] = PMA_Table::countRecords(                $db, $each_table['TABLE_NAME'],                $force_exact = true, $is_view = true            );            $table_is_view = true;        }        break;    default :        // Unknown table type.        if ($is_show_stats) {            $formatted_size =  __('unknown');            $unit          =  '';        }    } // end switch    if (! PMA_Table::isMerge($db, $each_table['TABLE_NAME'])) {        $sum_entries += $each_table['TABLE_ROWS'];    }    if (isset($each_table['Collation'])) {        $collation = '<dfn title="'            . PMA_getCollationDescr($each_table['Collation']) . '">'            . $each_table['Collation'] . '</dfn>';    } else {        $collation = '---';    }    if ($is_show_stats) {        if (isset($formatted_overhead)) {            $overhead = '<a href="tbl_structure.php?'                . $tbl_url_query . '#showusage"><span>' . $formatted_overhead                . '</span> <span class="unit">' . $overhead_unit . '</span></a>' . "\n";            unset($formatted_overhead);            $overhead_check .=                "document.getElementById('checkbox_tbl_" . ($i + 1) . "').checked = true;";        } else {            $overhead = '-';        }    } // end if    $alias = (!empty($tooltip_aliasname) && isset($tooltip_aliasname[$each_table['TABLE_NAME']]))               ? str_replace(' ', '&nbsp;', htmlspecialchars($tooltip_truename[$each_table['TABLE_NAME']]))               : str_replace(' ', '&nbsp;', htmlspecialchars($each_table['TABLE_NAME']));    $truename = (!empty($tooltip_truename) && isset($tooltip_truename[$each_table['TABLE_NAME']]))               ? str_replace(' ', '&nbsp;', htmlspecialchars($tooltip_truename[$each_table['TABLE_NAME']]))               : str_replace(' ', '&nbsp;', htmlspecialchars($each_table['TABLE_NAME']));    $i++;    $row_count++;    if ($table_is_view) {        $hidden_fields[] = '<input type="hidden" name="views[]" value="'            .  htmlspecialchars($each_table['TABLE_NAME']) . '" />';    }    /*     * Always activate links for Browse, Search and Empty, even if     * the icons are greyed, because     * 1. for views, we don't know the number of rows at this point     * 2. for tables, another source could have populated them since the     *    page was generated     *     * I could have used the PHP ternary conditional operator but I find     * the code easier to read without this operator.     */    if ($each_table['TABLE_ROWS'] > 0 || $table_is_view) {        $may_have_rows = true;    } else {        $may_have_rows = false;    }    $browse_table = '<a href="sql.php?' . $tbl_url_query . '&amp;pos=0">';    if ($may_have_rows) {        $browse_table .= $titles['Browse'];    } else {        $browse_table .= $titles['NoBrowse'];    }    $browse_table .= '</a>';    $search_table = '<a href="tbl_select.php?' . $tbl_url_query . '">';    if ($may_have_rows) {        $search_table .= $titles['Search'];    } else {        $search_table .= $titles['NoSearch'];    }    $search_table .= '</a>';    $browse_table_label = '<a href="sql.php?' . $tbl_url_query . '&amp;pos=0">' . $truename . '</a>';    if (! $db_is_information_schema) {        $empty_table = '<a ';        if ($GLOBALS['cfg']['AjaxEnable']) {            $empty_table .= 'class="truncate_table_anchor"';        }        $empty_table .= ' href="sql.php?' . $tbl_url_query             . '&amp;sql_query=';        $empty_table .= urlencode('TRUNCATE ' . PMA_backquote($each_table['TABLE_NAME']))             . '&amp;message_to_show='             . urlencode(sprintf(__('Table %s has been emptied'), htmlspecialchars($each_table['TABLE_NAME'])))             .'">';        if ($may_have_rows) {            $empty_table .= $titles['Empty'];        } else {            $empty_table .= $titles['NoEmpty'];        }        $empty_table .= '</a>';        $drop_query = 'DROP '            . ($table_is_view ? 'VIEW' : 'TABLE')            . ' ' . PMA_backquote($each_table['TABLE_NAME']);        $drop_message = sprintf(            $table_is_view ? __('View %s has been dropped') : __('Table %s has been dropped'),            str_replace(' ', '&nbsp;', htmlspecialchars($each_table['TABLE_NAME']))        );    }    $tracking_icon = '';    if (PMA_Tracker::isActive()) {        if (PMA_Tracker::isTracked($GLOBALS["db"], $truename)) {            $tracking_icon = '<a href="tbl_tracking.php?' . $url_query                . '&amp;table=' . $truename . '">'                . PMA_getImage('eye.png', __('Tracking is active.'))                . '</a>';        } elseif (PMA_Tracker::getVersion($GLOBALS["db"], $truename) > 0) {            $tracking_icon = '<a href="tbl_tracking.php?' . $url_query                . '&amp;table=' . $truename . '">'                . PMA_getImage('eye.png', __('Tracking is not active.'))                . '</a>';        }    }    if ($num_columns > 0        && $num_tables > $num_columns        && ($row_count % $num_columns) == 0    ) {        $row_count = 1;        $odd_row = true;        ?>    </tr></tbody></table>        <?php        PMA_TableHeader(false, $server_slave_status);    }    $ignored = false;    $do = false;    if ($server_slave_status) {        ////////////////////////////////////////////////////////////////        if ((strlen(array_search($truename, $server_slave_Do_Table)) > 0)            || (strlen(array_search($db, $server_slave_Do_DB)) > 0)            || (count($server_slave_Do_DB) == 1 && count($server_slave_Ignore_DB) == 1)        ) {            $do = true;        }        foreach ($server_slave_Wild_Do_Table as $db_table) {            $table_part = PMA_extract_db_or_table($db_table, 'table');            if (($db == PMA_extract_db_or_table($db_table, 'db'))                && (preg_match("@^" . substr($table_part, 0, strlen($table_part) - 1) . "@", $truename))            ) {                $do = true;            }        }        ////////////////////////////////////////////////////////////////////        if ((strlen(array_search($truename, $server_slave_Ignore_Table)) > 0)            || (strlen(array_search($db, $server_slave_Ignore_DB)) > 0)        ) {            $ignored = true;        }        foreach ($server_slave_Wild_Ignore_Table as $db_table) {            $table_part = PMA_extract_db_or_table($db_table, 'table');            if (($db == PMA_extract_db_or_table($db_table))                && (preg_match("@^" . substr($table_part, 0, strlen($table_part) - 1) . "@", $truename))            ) {                $ignored = true;            }        }        unset($table_part);    }    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">    <td align="center">        <input type="checkbox" name="selected_tbl[]"            value="<?php echo htmlspecialchars($each_table['TABLE_NAME']); ?>"            id="checkbox_tbl_<?php echo $i; ?>"<?php echo $checked; ?> /></td>    <th><?php echo $browse_table_label; ?>        <?php echo (! empty($tracking_icon) ? $tracking_icon : ''); ?>    </th>   <?php if ($server_slave_status) { ?><td align="center"><?php        echo $ignored            ? PMA_getImage('s_cancel.png', 'NOT REPLICATED')            : ''.        $do            ? PMA_getImage('s_success.png', 'REPLICATED')            : ''; ?></td><?php } ?>    <td align="center"><?php echo $browse_table; ?></td>    <td align="center">        <a href="tbl_structure.php?<?php echo $tbl_url_query; ?>">            <?php echo $titles['Structure']; ?></a></td>    <td align="center"><?php echo $search_table; ?></td>    <?php if (! $db_is_information_schema) { ?>    <td align="center" class="insert_table">        <a <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="ajax"' : ''); ?> href="tbl_change.php?<?php echo $tbl_url_query; ?>">            <?php echo $titles['Insert']; ?></a></td>    <td align="center"><?php echo $empty_table; ?></td>    <td align="center">    <a <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="drop_table_anchor"' : ''); ?> href="sql.php?<?php echo $tbl_url_query;            ?>&amp;reload=1&amp;purge=1&amp;sql_query=<?php            echo urlencode($drop_query); ?>&amp;message_to_show=<?php            echo urlencode($drop_message); ?>" >            <?php echo $titles['Drop']; ?></a></td>    <?php } // end if (! $db_is_information_schema)    // there is a null value in the ENGINE    // - when the table needs to be repaired, or    // - when it's a view    //  so ensure that we'll display "in use" below for a table    //  that needs to be repaired    if (isset($each_table['TABLE_ROWS']) && ($each_table['ENGINE'] != null || $table_is_view)) {        $row_count_pre = '';        $show_superscript = '';        if ($table_is_view) {            // Drizzle views use FunctionEngine, and the only place where they are available are I_S and D_D            // schemas, where we do exact counting            if ($each_table['TABLE_ROWS'] >= $GLOBALS['cfg']['MaxExactCountViews']                && $each_table['ENGINE'] != 'FunctionEngine'            ) {                $row_count_pre = '~';                $sum_row_count_pre = '~';                $show_superscript = PMA_showHint(                    PMA_sanitize(                        sprintf(                            __('This view has at least this number of rows. Please refer to %sdocumentation%s.'),                            '[a@./Documentation.html#cfg_MaxExactCountViews@_blank]',                            '[/a]'                        )                    )                );            }        } elseif ($each_table['ENGINE'] == 'InnoDB' && (! $each_table['COUNTED'])) {            // InnoDB table: we did not get an accurate row count            $row_count_pre = '~';            $sum_row_count_pre = '~';            $show_superscript = '';        }    ?>    <td class="value tbl_rows"><?php echo $row_count_pre . PMA_formatNumber($each_table['TABLE_ROWS'], 0) . $show_superscript; ?></td>        <?php if (!($cfg['PropertiesNumColumns'] > 1)) { ?>    <td nowrap="nowrap"><?php echo ($table_is_view ? __('View') : $each_table['ENGINE']); ?></td>            <?php if (isset($collation)) { ?>    <td nowrap="nowrap"><?php echo $collation ?></td>            <?php } ?>        <?php } ?>        <?php if ($is_show_stats) { ?>    <td class="value tbl_size"><a        href="tbl_structure.php?<?php echo $tbl_url_query; ?>#showusage"        ><?php echo '<span>' . $formatted_size . '</span> <span class="unit">' . $unit . '</span>'; ?></a></td>    <td class="value tbl_overhead"><?php echo $overhead; ?></td>        <?php } // end if ?>    <?php } elseif ($table_is_view) { ?>    <td class="value">-</td>    <td><?php echo __('View'); ?></td>    <td>---</td>        <?php if ($is_show_stats) { ?>    <td class="value">-</td>    <td class="value">-</td>        <?php } ?>    <?php } else { ?>    <td colspan="<?php echo ($colspan_for_structure - ($db_is_information_schema ? 5 : 8)) ?>"        align="center">        <?php echo __('in use'); ?></td>    <?php } // end if (isset($each_table['TABLE_ROWS'])) else ?></tr>    <?php} // end foreach// Show Summaryif ($is_show_stats) {    list($sum_formatted, $unit) = PMA_formatByteDown($sum_size, 3, 1);    list($overhead_formatted, $overhead_unit)        = PMA_formatByteDown($overhead_size, 3, 1);}?></tbody><tbody id="tbl_summary_row"><tr><th></th>    <th align="center" nowrap="nowrap" class="tbl_num">        <?php            // for blobstreaming - if the number of tables is 0, set tableReductionCount to 0            // (we don't want negative numbers here)            if ($num_tables == 0) {                $tableReductionCount = 0;            }            echo sprintf(                _ngettext('%s table', '%s tables', $num_tables - $tableReductionCount),                PMA_formatNumber($num_tables - $tableReductionCount, 0)            );        ?>    </th>    <?php        if ($server_slave_status) {            echo '    <th>' . __('Replication') . '</th>' . "\n";        }    ?>    <th colspan="<?php echo ($db_is_information_schema ? 3 : 6) ?>" align="center">        <?php echo __('Sum'); ?></th>    <th class="value tbl_rows"><?php echo $sum_row_count_pre . PMA_formatNumber($sum_entries, 0); ?></th><?phpif (!($cfg['PropertiesNumColumns'] > 1)) {    $default_engine = PMA_DBI_fetch_value('SHOW VARIABLES LIKE \'storage_engine\';', 0, 1);    echo '    <th align="center">' . "\n"       . '        <dfn title="'       . sprintf(__('%s is the default storage engine on this MySQL server.'), $default_engine)       . '">' .$default_engine . '</dfn></th>' . "\n";    // we got a case where $db_collation was empty    echo '    <th align="center">' . "\n";    if (! empty($db_collation)) {        echo '        <dfn title="'            . PMA_getCollationDescr($db_collation) . ' (' . __('Default') . ')">' . $db_collation            . '</dfn>';    }    echo '</th>';}if ($is_show_stats) {    ?>    <th class="value tbl_size"><?php echo $sum_formatted . ' ' . $unit; ?></th>    <th class="value tbl_overhead"><?php echo $overhead_formatted . ' ' . $overhead_unit; ?></th>    <?php}?></tr></tbody></table><div class="clearfloat"><?php// Check all tables url$checkall_url = 'db_structure.php?' . PMA_generate_common_url($db);?><img class="selectallarrow" src="<?php echo $pmaThemeImage .'arrow_'.$text_dir.'.png'; ?>"    width="38" height="22" alt="<?php echo __('With selected:'); ?>" /><a href="<?php echo $checkall_url; ?>&amp;checkall=1"    onclick="if (markAllRows('tablesForm')) return false;">    <?php echo __('Check All'); ?></a>/<a href="<?php echo $checkall_url; ?>"    onclick="if (unMarkAllRows('tablesForm')) return false;">    <?php echo __('Uncheck All'); ?></a><?php if ($overhead_check != '') { ?>/<a href="#" onclick="unMarkAllRows('tablesForm');    <?php echo $overhead_check; ?> return false;">    <?php echo __('Check tables having overhead'); ?></a><?php } ?><select name="submit_mult" class="autosubmit" style="margin: 0 3em 0 3em;"><?phpecho '    <option value="' . __('With selected:') . '" selected="selected">'     . __('With selected:') . '</option>' . "\n";echo '    <option value="export" >'     . __('Export') . '</option>' . "\n";echo '    <option value="print" >'    . __('Print view') . '</option>' . "\n";if (!$db_is_information_schema && !$cfg['DisableMultiTableMaintenance']) {    echo '    <option value="empty_tbl" >'         . __('Empty') . '</option>' . "\n";    echo '    <option value="drop_tbl" >'         . __('Drop') . '</option>' . "\n";    echo '    <option value="check_tbl" >'         . __('Check table') . '</option>' . "\n";    if (!PMA_DRIZZLE) {        echo '    <option value="optimize_tbl" >'             . __('Optimize table') . '</option>' . "\n";        echo '    <option value="repair_tbl" >'             . __('Repair table') . '</option>' . "\n";    }    echo '    <option value="analyze_tbl" >'         . __('Analyze table') . '</option>' . "\n";    echo '    <option value="add_prefix_tbl" >'         . __('Add prefix to table') . '</option>' . "\n";    echo '    <option value="replace_prefix_tbl" >'         . __('Replace table prefix') . '</option>' . "\n";    echo '    <option value="copy_tbl_change_prefix" >'         . __('Copy table with prefix') . '</option>' . "\n";}?></select><script type="text/javascript"><!--// Fake js to allow the use of the <noscript> tag//--></script><noscript>    <input type="submit" value="<?php echo __('Go'); ?>" /></noscript><?php echo implode("\n", $hidden_fields) . "\n"; ?></div></form><?php// display again the table list navigatorPMA_listNavigator(    $total_num_tables, $pos, $_url_params, 'db_structure.php',    'frame_content', $GLOBALS['cfg']['MaxTableList']);?></div><hr /><?php/** * Work on the database *//* DATABASE WORK *//* Printable view of a table */echo '<p>';echo '<a href="db_printview.php?' . $url_query . '">';echo PMA_getIcon('b_print.png', __('Print view'), true) . '</a>';echo '<a href="./db_datadict.php?' . $url_query . '">';echo PMA_getIcon('b_tblanalyse.png', __('Data Dictionary'), true) . '</a>';echo '</p>';if (empty($db_is_information_schema)) {    include './libraries/display_create_table.lib.php';} // end if (Create Table dialog)/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Misc functions used all over the scripts. * * @package PhpMyAdmin *//** * Detects which function to use for PMA_pow. * * @return string Function name. */function PMA_detect_pow(){    if (function_exists('bcpow')) {        // BCMath Arbitrary Precision Mathematics Function        return 'bcpow';    } elseif (function_exists('gmp_pow')) {        // GMP Function        return 'gmp_pow';    } else {        // PHP function        return 'pow';    }}/** * Exponential expression / raise number into power * * @param string $base         base to raise * @param string $exp          exponent to use * @param mixed  $use_function pow function to use, or false for auto-detect * * @return mixed string or float */function PMA_pow($base, $exp, $use_function = false){    static $pow_function = null;    if (null == $pow_function) {        $pow_function = PMA_detect_pow();    }    if (! $use_function) {        $use_function = $pow_function;    }    if ($exp < 0 && 'pow' != $use_function) {        return false;    }    switch ($use_function) {    case 'bcpow' :        // bcscale() needed for testing PMA_pow() with base values < 1        bcscale(10);        $pow = bcpow($base, $exp);        break;    case 'gmp_pow' :         $pow = gmp_strval(gmp_pow($base, $exp));        break;    case 'pow' :        $base = (float) $base;        $exp = (int) $exp;        $pow = pow($base, $exp);        break;    default:        $pow = $use_function($base, $exp);    }    return $pow;}/** * Returns an HTML IMG tag for a particular icon from a theme, * which may be an actual file or an icon from a sprite. * This function takes into account the PropertiesIconic * configuration setting and wraps the image tag in a span tag. * * @param string  $icon       name of icon file * @param string  $alternate  alternate text * @param boolean $force_text whether to force alternate text to be displayed * * @return string an html snippet */function PMA_getIcon($icon, $alternate = '', $force_text = false){    // $cfg['PropertiesIconic'] is true or both    $include_icon = ($GLOBALS['cfg']['PropertiesIconic'] !== false);    // $cfg['PropertiesIconic'] is false or both    // OR we have no $include_icon    $include_text = ($force_text || true !== $GLOBALS['cfg']['PropertiesIconic']);    // Always use a span (we rely on this in js/sql.js)    $button = '<span class="nowrap">';    if ($include_icon) {        $button .= PMA_getImage($icon, $alternate);    }    if ($include_icon && $include_text) {        $button .= ' ';    }    if ($include_text) {        $button .= $alternate;    }    $button .= '</span>';    return $button;}/** * Returns an HTML IMG tag for a particular image from a theme, * which may be an actual file or an icon from a sprite * * @param string $image      The name of the file to get * @param string $alternate  Used to set 'alt' and 'title' attributes of the image * @param array  $attributes An associative array of other attributes * * @return string an html IMG tag */function PMA_getImage($image, $alternate = '', $attributes = array()){    static $sprites; // cached list of available sprites (if any)    $url       = '';    $is_sprite = false;    $alternate = htmlspecialchars($alternate);    // If it's the first time this function is called    if (! isset($sprites)) {        // Try to load the list of sprites        if (is_readable($_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php')) {            include_once $_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php';            $sprites = PMA_sprites();        } else {            // No sprites are available for this theme            $sprites = array();        }    }    // Check if we have the requested image as a sprite    //  and set $url accordingly    $class = str_replace(array('.gif','.png'), '', $image);    if (array_key_exists($class, $sprites)) {        $is_sprite = true;        $url = 'themes/dot.gif';    } else {        $url = $GLOBALS['pmaThemeImage'] . $image;    }    // set class attribute    if ($is_sprite) {        if (isset($attributes['class'])) {            $attributes['class'] = "icon ic_$class " . $attributes['class'];        } else {            $attributes['class'] = "icon ic_$class";        }    }    // set all other attributes    $attr_str = '';    foreach ($attributes as $key => $value) {        if (! in_array($key, array('alt', 'title'))) {            $attr_str .= " $key=\"$value\"";        }    }    // override the alt attribute    if (isset($attributes['alt'])) {        $alt = $attributes['alt'];    } else {        $alt = $alternate;    }    // override the title attribute    if (isset($attributes['title'])) {        $title = $attributes['title'];    } else {        $title = $alternate;    }    // generate the IMG tag    $template = '<img src="%s" title="%s" alt="%s"%s />';    $retval = sprintf($template, $url, $title, $alt, $attr_str);    return $retval;}/** * Displays the maximum size for an upload * * @param integer $max_upload_size the size * * @return string the message * * @access  public */function PMA_displayMaximumUploadSize($max_upload_size){    // I have to reduce the second parameter (sensitiveness) from 6 to 4    // to avoid weird results like 512 kKib    list($max_size, $max_unit) = PMA_formatByteDown($max_upload_size, 4);    return '(' . sprintf(__('Max: %s%s'), $max_size, $max_unit) . ')';}/** * Generates a hidden field which should indicate to the browser * the maximum size for upload * * @param integer $max_size the size * * @return string the INPUT field * * @access  public */function PMA_generateHiddenMaxFileSize($max_size){    return '<input type="hidden" name="MAX_FILE_SIZE" value="' .$max_size . '" />';}/** * Add slashes before "'" and "\" characters so a value containing them can * be used in a sql comparison. * * @param string $a_string the string to slash * @param bool   $is_like  whether the string will be used in a 'LIKE' clause *                         (it then requires two more escaped sequences) or not * @param bool   $crlf     whether to treat cr/lfs as escape-worthy entities *                         (converts \n to \\n, \r to \\r) * @param bool   $php_code whether this function is used as part of the *                         "Create PHP code" dialog * * @return  string   the slashed string * * @access  public */function PMA_sqlAddSlashes($a_string = '', $is_like = false, $crlf = false, $php_code = false){    if ($is_like) {        $a_string = str_replace('\\', '\\\\\\\\', $a_string);    } else {        $a_string = str_replace('\\', '\\\\', $a_string);    }    if ($crlf) {        $a_string = strtr(            $a_string,            array("\n" => '\n', "\r" => '\r', "\t" => '\t')        );    }    if ($php_code) {        $a_string = str_replace('\'', '\\\'', $a_string);    } else {        $a_string = str_replace('\'', '\'\'', $a_string);    }    return $a_string;} // end of the 'PMA_sqlAddSlashes()' function/** * Add slashes before "_" and "%" characters for using them in MySQL * database, table and field names. * Note: This function does not escape backslashes! * * @param string $name the string to escape * * @return string the escaped string * * @access  public */function PMA_escape_mysql_wildcards($name){    return strtr($name, array('_' => '\\_', '%' => '\\%'));} // end of the 'PMA_escape_mysql_wildcards()' function/** * removes slashes before "_" and "%" characters * Note: This function does not unescape backslashes! * * @param string $name the string to escape * * @return  string   the escaped string * * @access  public */function PMA_unescape_mysql_wildcards($name){    return strtr($name, array('\\_' => '_', '\\%' => '%'));} // end of the 'PMA_unescape_mysql_wildcards()' function/** * removes quotes (',",`) from a quoted string * * checks if the sting is quoted and removes this quotes * * @param string $quoted_string string to remove quotes from * @param string $quote         type of quote to remove * * @return string unqoted string */function PMA_unQuote($quoted_string, $quote = null){    $quotes = array();    if (null === $quote) {        $quotes[] = '`';        $quotes[] = '"';        $quotes[] = "'";    } else {        $quotes[] = $quote;    }    foreach ($quotes as $quote) {        if (substr($quoted_string, 0, 1) === $quote            && substr($quoted_string, -1, 1) === $quote        ) {            $unquoted_string = substr($quoted_string, 1, -1);            // replace escaped quotes            $unquoted_string = str_replace(                $quote . $quote,                $quote,                $unquoted_string            );            return $unquoted_string;        }    }    return $quoted_string;}/** * format sql strings * * @param mixed  $parsed_sql   pre-parsed SQL structure * @param string $unparsed_sql raw SQL string * * @return string  the formatted sql * * @global  array    the configuration array * @global  boolean  whether the current statement is a multiple one or not * * @access  public * @todo    move into PMA_Sql */function PMA_formatSql($parsed_sql, $unparsed_sql = ''){    global $cfg;    // Check that we actually have a valid set of parsed data    // well, not quite    // first check for the SQL parser having hit an error    if (PMA_SQP_isError()) {        return htmlspecialchars($parsed_sql['raw']);    }    // then check for an array    if (! is_array($parsed_sql)) {        // We don't so just return the input directly        // This is intended to be used for when the SQL Parser is turned off        $formatted_sql = "<pre>\n";        if ($cfg['SQP']['fmtType'] == 'none' && $unparsed_sql != '') {            $formatted_sql .= $unparsed_sql;        } else {            $formatted_sql .= $parsed_sql;        }        $formatted_sql .= "\n</pre>";        return $formatted_sql;    }    $formatted_sql        = '';    switch ($cfg['SQP']['fmtType']) {    case 'none':        if ($unparsed_sql != '') {            $formatted_sql = '<span class="inner_sql"><pre>' . "\n"                . PMA_SQP_formatNone(array('raw' => $unparsed_sql)) . "\n"                . '</pre></span>';        } else {            $formatted_sql = PMA_SQP_formatNone($parsed_sql);        }        break;    case 'html':        $formatted_sql = PMA_SQP_formatHtml($parsed_sql, 'color');        break;    case 'text':        $formatted_sql = PMA_SQP_formatHtml($parsed_sql, 'text');        break;    default:        break;    } // end switch    return $formatted_sql;} // end of the "PMA_formatSql()" function/** * Displays a link to the official MySQL documentation * * @param string $chapter   chapter of "HTML, one page per chapter" documentation * @param string $link      contains name of page/anchor that is being linked * @param bool   $big_icon  whether to use big icon (like in left frame) * @param string $anchor    anchor to page part * @param bool   $just_open whether only the opening <a> tag should be returned * * @return  string  the html link * * @access  public */function PMA_showMySQLDocu($chapter, $link, $big_icon = false, $anchor = '', $just_open = false){    global $cfg;    if ($cfg['MySQLManualType'] == 'none' || empty($cfg['MySQLManualBase'])) {        return '';    }    // Fixup for newly used names:    $chapter = str_replace('_', '-', strtolower($chapter));    $link = str_replace('_', '-', strtolower($link));    switch ($cfg['MySQLManualType']) {    case 'chapters':        if (empty($chapter)) {            $chapter = 'index';        }        if (empty($anchor)) {            $anchor = $link;        }        $url = $cfg['MySQLManualBase'] . '/' . $chapter . '.html#' . $anchor;        break;    case 'big':        if (empty($anchor)) {            $anchor = $link;        }        $url = $cfg['MySQLManualBase'] . '#' . $anchor;        break;    case 'searchable':        if (empty($link)) {            $link = 'index';        }        $url = $cfg['MySQLManualBase'] . '/' . $link . '.html';        if (!empty($anchor)) {            $url .= '#' . $anchor;        }        break;    case 'viewable':    default:        if (empty($link)) {            $link = 'index';        }        $mysql = '5.0';        $lang = 'en';        if (defined('PMA_MYSQL_INT_VERSION')) {            if (PMA_MYSQL_INT_VERSION >= 50500) {                $mysql = '5.5';                /* l10n: Please check that translation actually exists. */                $lang = _pgettext('MySQL 5.5 documentation language', 'en');            } else if (PMA_MYSQL_INT_VERSION >= 50100) {                $mysql = '5.1';                /* l10n: Please check that translation actually exists. */                $lang = _pgettext('MySQL 5.1 documentation language', 'en');            } else {                $mysql = '5.0';                /* l10n: Please check that translation actually exists. */                $lang = _pgettext('MySQL 5.0 documentation language', 'en');            }        }        $url = $cfg['MySQLManualBase'] . '/' . $mysql . '/' . $lang . '/' . $link . '.html';        if (!empty($anchor)) {            $url .= '#' . $anchor;        }        break;    }    $open_link = '<a href="' . PMA_linkURL($url) . '" target="mysql_doc">';    if ($just_open) {        return $open_link;    } elseif ($big_icon) {        return $open_link . PMA_getImage('b_sqlhelp.png', __('Documentation')) . '</a>';    } elseif ($GLOBALS['cfg']['ReplaceHelpImg']) {        return $open_link . PMA_getImage('b_help.png', __('Documentation')) . '</a>';    } else {        return '[' . $open_link . __('Documentation') . '</a>]';    }} // end of the 'PMA_showMySQLDocu()' function/** * Displays a link to the phpMyAdmin documentation * * @param string $anchor anchor in documentation * * @return  string  the html link * * @access  public */function PMA_showDocu($anchor){    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        return '<a href="Documentation.html#' . $anchor . '" target="documentation">'             . PMA_getImage('b_help.png', __('Documentation'))             . '</a>';    } else {        return '[<a href="Documentation.html#' . $anchor . '" target="documentation">'        . __('Documentation') . '</a>]';    }} // end of the 'PMA_showDocu()' function/** * Displays a link to the PHP documentation * * @param string $target anchor in documentation * * @return string  the html link * * @access  public */function PMA_showPHPDocu($target){    $url = PMA_getPHPDocLink($target);    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        return '<a href="' . $url . '" target="documentation">'             . PMA_getImage('b_help.png', __('Documentation'))             . '</a>';    } else {        return '[<a href="' . $url . '" target="documentation">' . __('Documentation') . '</a>]';    }} // end of the 'PMA_showPHPDocu()' function/** * returns HTML for a footnote marker and add the messsage to the footnotes * * @param string $message the error message * @param bool   $bbcode * @param string $type    message types * * @return  string html code for a footnote marker * * @access  public */function PMA_showHint($message, $bbcode = false, $type = 'notice'){    if ($message instanceof PMA_Message) {        $key = $message->getHash();        $type = $message->getLevel();    } else {        $key = md5($message);    }    if (! isset($GLOBALS['footnotes'][$key])) {        if (empty($GLOBALS['footnotes']) || ! is_array($GLOBALS['footnotes'])) {            $GLOBALS['footnotes'] = array();        }        $nr = count($GLOBALS['footnotes']) + 1;        $GLOBALS['footnotes'][$key] = array(            'note'      => $message,            'type'      => $type,            'nr'        => $nr,        );    } else {        $nr = $GLOBALS['footnotes'][$key]['nr'];    }    if ($bbcode) {        return '[sup]' . $nr . '[/sup]';    }    // footnotemarker used in js/tooltip.js    return '<sup class="footnotemarker">' . $nr . '</sup>' .           PMA_getImage('b_help.png', '', array('class' => 'footnotemarker footnote_' . $nr));}/** * Displays a MySQL error message in the right frame. * * @param string $error_message  the error message * @param string $the_query      the sql query that failed * @param bool   $is_modify_link whether to show a "modify" link or not * @param string $back_url       the "back" link url (full path is not required) * @param bool   $exit           EXIT the page? * * @global  string    the curent table * @global  string    the current db * * @access  public */function PMA_mysqlDie($error_message = '', $the_query = '',$is_modify_link = true, $back_url = '', $exit = true){    global $table, $db;    /**     * start http output, display html headers     */    include_once './libraries/header.inc.php';    $error_msg_output = '';    if (!$error_message) {        $error_message = PMA_DBI_getError();    }    if (!$the_query && !empty($GLOBALS['sql_query'])) {        $the_query = $GLOBALS['sql_query'];    }    // --- Added to solve bug #641765    if (!function_exists('PMA_SQP_isError') || PMA_SQP_isError()) {        $formatted_sql = htmlspecialchars($the_query);    } elseif (empty($the_query) || trim($the_query) == '') {        $formatted_sql = '';    } else {        if (strlen($the_query) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {            $formatted_sql = htmlspecialchars(substr($the_query, 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'])) . '[...]';        } else {            $formatted_sql = PMA_formatSql(PMA_SQP_parse($the_query), $the_query);        }    }    // ---    $error_msg_output .= "\n" . '<!-- PMA-SQL-ERROR -->' . "\n";    $error_msg_output .= '    <div class="error"><h1>' . __('Error') . '</h1>' . "\n";    // if the config password is wrong, or the MySQL server does not    // respond, do not show the query that would reveal the    // username/password    if (!empty($the_query) && !strstr($the_query, 'connect')) {        // --- Added to solve bug #641765        if (function_exists('PMA_SQP_isError') && PMA_SQP_isError()) {            $error_msg_output .= PMA_SQP_getErrorString() . "\n";            $error_msg_output .= '<br />' . "\n";        }        // ---        // modified to show the help on sql errors        $error_msg_output .= '    <p><strong>' . __('SQL query') . ':</strong>' . "\n";        if (strstr(strtolower($formatted_sql), 'select')) {            // please show me help to the error on select            $error_msg_output .= PMA_showMySQLDocu('SQL-Syntax', 'SELECT');        }        if ($is_modify_link) {            $_url_params = array(                'sql_query' => $the_query,                'show_query' => 1,            );            if (strlen($table)) {                $_url_params['db'] = $db;                $_url_params['table'] = $table;                $doedit_goto = '<a href="tbl_sql.php' . PMA_generate_common_url($_url_params) . '">';            } elseif (strlen($db)) {                $_url_params['db'] = $db;                $doedit_goto = '<a href="db_sql.php' . PMA_generate_common_url($_url_params) . '">';            } else {                $doedit_goto = '<a href="server_sql.php' . PMA_generate_common_url($_url_params) . '">';            }            $error_msg_output .= $doedit_goto               . PMA_getIcon('b_edit.png', __('Edit'))               . '</a>';        } // end if        $error_msg_output .= '    </p>' . "\n"            .'    <p>' . "\n"            .'        ' . $formatted_sql . "\n"            .'    </p>' . "\n";    } // end if    if (! empty($error_message)) {        $error_message = preg_replace(            "@((\015\012)|(\015)|(\012)){3,}@",            "\n\n",            $error_message        );    }    // modified to show the help on error-returns    // (now error-messages-server)    $error_msg_output .= '<p>' . "\n"            . '    <strong>' . __('MySQL said: ') . '</strong>'            . PMA_showMySQLDocu('Error-messages-server', 'Error-messages-server')            . "\n"            . '</p>' . "\n";    // The error message will be displayed within a CODE segment.    // To preserve original formatting, but allow wordwrapping,    // we do a couple of replacements    // Replace all non-single blanks with their HTML-counterpart    $error_message = str_replace('  ', '&nbsp;&nbsp;', $error_message);    // Replace TAB-characters with their HTML-counterpart    $error_message = str_replace("\t", '&nbsp;&nbsp;&nbsp;&nbsp;', $error_message);    // Replace linebreaks    $error_message = nl2br($error_message);    $error_msg_output .= '<code>' . "\n"        . $error_message . "\n"        . '</code><br />' . "\n";    $error_msg_output .= '</div>';    $_SESSION['Import_message']['message'] = $error_msg_output;    if ($exit) {        /**         * If in an Ajax request         * - avoid displaying a Back link         * - use PMA_ajaxResponse() to transmit the message and exit         */        if ($GLOBALS['is_ajax_request'] == true) {            PMA_ajaxResponse($error_msg_output, false);        }        if (! empty($back_url)) {            if (strstr($back_url, '?')) {                $back_url .= '&amp;no_history=true';            } else {                $back_url .= '?no_history=true';            }            $_SESSION['Import_message']['go_back_url'] = $back_url;            $error_msg_output .= '<fieldset class="tblFooters">';            $error_msg_output .= '[ <a href="' . $back_url . '">' . __('Back') . '</a> ]';            $error_msg_output .= '</fieldset>' . "\n\n";        }        echo $error_msg_output;        /**         * display footer and exit         */        include './libraries/footer.inc.php';    } else {        echo $error_msg_output;    }} // end of the 'PMA_mysqlDie()' function/** * returns array with tables of given db with extended information and grouped * * @param string   $db           name of db * @param string   $tables       name of tables * @param integer  $limit_offset list offset * @param int|bool $limit_count  max tables to return * * @return  array    (recursive) grouped table list */function PMA_getTableList($db, $tables = null, $limit_offset = 0, $limit_count = false){    $sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];    if (null === $tables) {        $tables = PMA_DBI_get_tables_full($db, false, false, null, $limit_offset, $limit_count);        if ($GLOBALS['cfg']['NaturalOrder']) {            uksort($tables, 'strnatcasecmp');        }    }    if (count($tables) < 1) {        return $tables;    }    $default = array(        'Name'      => '',        'Rows'      => 0,        'Comment'   => '',        'disp_name' => '',    );    $table_groups = array();    // for blobstreaming - list of blobstreaming tables    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    foreach ($tables as $table_name => $table) {        // if BS tables exist        if (PMA_BS_IsHiddenTable($table_name)) {            continue;        }        // check for correct row count        if (null === $table['Rows']) {            // Do not check exact row count here,            // if row count is invalid possibly the table is defect            // and this would break left frame;            // but we can check row count if this is a view or the            // information_schema database            // since PMA_Table::countRecords() returns a limited row count            // in this case.            // set this because PMA_Table::countRecords() can use it            $tbl_is_view = $table['TABLE_TYPE'] == 'VIEW';            if ($tbl_is_view || PMA_is_system_schema($db)) {                $table['Rows'] = PMA_Table::countRecords($db, $table['Name'], false, true);            }        }        // in $group we save the reference to the place in $table_groups        // where to store the table info        if ($GLOBALS['cfg']['LeftFrameDBTree']            && $sep && strstr($table_name, $sep)        ) {            $parts = explode($sep, $table_name);            $group =& $table_groups;            $i = 0;            $group_name_full = '';            $parts_cnt = count($parts) - 1;            while ($i < $parts_cnt                    && $i < $GLOBALS['cfg']['LeftFrameTableLevel']) {                $group_name = $parts[$i] . $sep;                $group_name_full .= $group_name;                if (! isset($group[$group_name])) {                    $group[$group_name] = array();                    $group[$group_name]['is' . $sep . 'group'] = true;                    $group[$group_name]['tab' . $sep . 'count'] = 1;                    $group[$group_name]['tab' . $sep . 'group'] = $group_name_full;                } elseif (! isset($group[$group_name]['is' . $sep . 'group'])) {                    $table = $group[$group_name];                    $group[$group_name] = array();                    $group[$group_name][$group_name] = $table;                    unset($table);                    $group[$group_name]['is' . $sep . 'group'] = true;                    $group[$group_name]['tab' . $sep . 'count'] = 1;                    $group[$group_name]['tab' . $sep . 'group'] = $group_name_full;                } else {                    $group[$group_name]['tab' . $sep . 'count']++;                }                $group =& $group[$group_name];                $i++;            }        } else {            if (! isset($table_groups[$table_name])) {                $table_groups[$table_name] = array();            }            $group =& $table_groups;        }        if ($GLOBALS['cfg']['ShowTooltipAliasTB']            && $GLOBALS['cfg']['ShowTooltipAliasTB'] !== 'nested'            && $table['Comment'] // do not switch if the comment is empty        ) {            // switch tooltip and name            $table['disp_name'] = $table['Comment'];            $table['Comment'] = $table['Name'];        } else {            $table['disp_name'] = $table['Name'];        }        $group[$table_name] = array_merge($default, $table);    }    return $table_groups;}/* ----------------------- Set of misc functions ----------------------- *//** * Adds backquotes on both sides of a database, table or field name. * and escapes backquotes inside the name with another backquote * * example: * <code> * echo PMA_backquote('owner`s db'); // `owner``s db` * * </code> * * @param mixed   $a_name the database, table or field name to "backquote" *                        or array of it * @param boolean $do_it  a flag to bypass this function (used by dump *                        functions) * * @return  mixed    the "backquoted" database, table or field name * * @access  public */function PMA_backquote($a_name, $do_it = true){    if (is_array($a_name)) {        foreach ($a_name as &$data) {            $data = PMA_backquote($data, $do_it);        }        return $a_name;    }    if (! $do_it) {        global $PMA_SQPdata_forbidden_word;        if (! in_array(strtoupper($a_name), $PMA_SQPdata_forbidden_word)) {            return $a_name;        }    }    // '0' is also empty for php :-(    if (strlen($a_name) && $a_name !== '*') {        return '`' . str_replace('`', '``', $a_name) . '`';    } else {        return $a_name;    }} // end of the 'PMA_backquote()' function/** * Defines the <CR><LF> value depending on the user OS. * * @return  string   the <CR><LF> value to use * * @access  public */function PMA_whichCrlf(){    // The 'PMA_USR_OS' constant is defined in "./libraries/Config.class.php"    // Win case    if (PMA_USR_OS == 'Win') {        $the_crlf = "\r\n";    } else {        // Others        $the_crlf = "\n";    }    return $the_crlf;} // end of the 'PMA_whichCrlf()' function/** * Reloads navigation if needed. * * @param bool $jsonly prints out pure JavaScript * * @access  public */function PMA_reloadNavigation($jsonly=false){    // Reloads the navigation frame via JavaScript if required    if (isset($GLOBALS['reload']) && $GLOBALS['reload']) {        // one of the reasons for a reload is when a table is dropped        // in this case, get rid of the table limit offset, otherwise        // we have a problem when dropping a table on the last page        // and the offset becomes greater than the total number of tables        unset($_SESSION['tmp_user_values']['table_limit_offset']);        echo "\n";        $reload_url = './navigation.php?' . PMA_generate_common_url($GLOBALS['db'], '', '&');        if (!$jsonly) {            echo '<script type="text/javascript">' . PHP_EOL;        }    ?>//<![CDATA[if (typeof(window.parent) != 'undefined'    && typeof(window.parent.frame_navigation) != 'undefined'    && window.parent.goTo) {    window.parent.goTo('<?php echo $reload_url; ?>');}//]]><?php        if (!$jsonly) {            echo '</script>' . PHP_EOL;        }        unset($GLOBALS['reload']);    }}/** * displays the message and the query * usually the message is the result of the query executed * * @param string  $message   the message to display * @param string  $sql_query the query to display * @param string  $type      the type (level) of the message * @param boolean $is_view   is this a message after a VIEW operation? * * @return  string * * @access  public */function PMA_showMessage($message, $sql_query = null, $type = 'notice', $is_view = false){    /*     * PMA_ajaxResponse uses this function to collect the string of HTML generated     * for showing the message.  Use output buffering to collect it and return it     * in a string.  In some special cases on sql.php, buffering has to be disabled     * and hence we check with $GLOBALS['buffer_message']     */    if ( $GLOBALS['is_ajax_request'] == true && ! isset($GLOBALS['buffer_message']) ) {        ob_start();    }    global $cfg;    if (null === $sql_query) {        if (! empty($GLOBALS['display_query'])) {            $sql_query = $GLOBALS['display_query'];        } elseif ($cfg['SQP']['fmtType'] == 'none' && ! empty($GLOBALS['unparsed_sql'])) {            $sql_query = $GLOBALS['unparsed_sql'];        } elseif (! empty($GLOBALS['sql_query'])) {            $sql_query = $GLOBALS['sql_query'];        } else {            $sql_query = '';        }    }    if (isset($GLOBALS['using_bookmark_message'])) {        $GLOBALS['using_bookmark_message']->display();        unset($GLOBALS['using_bookmark_message']);    }    // Corrects the tooltip text via JS if required    // @todo this is REALLY the wrong place to do this - very unexpected here    if (! $is_view && strlen($GLOBALS['table']) && $cfg['ShowTooltip']) {        $tooltip = PMA_Table::sGetToolTip($GLOBALS['db'], $GLOBALS['table']);        $uni_tbl = PMA_jsFormat($GLOBALS['db'] . '.' . $GLOBALS['table'], false);        echo "\n";        echo '<script type="text/javascript">' . "\n";        echo '//<![CDATA[' . "\n";        echo "if (window.parent.updateTableTitle) window.parent.updateTableTitle('"            . $uni_tbl . "', '" . PMA_jsFormat($tooltip, false) . "');" . "\n";        echo '//]]>' . "\n";        echo '</script>' . "\n";    } // end if ... elseif    // Checks if the table needs to be repaired after a TRUNCATE query.    // @todo what about $GLOBALS['display_query']???    // @todo this is REALLY the wrong place to do this - very unexpected here    if (strlen($GLOBALS['table'])        && $GLOBALS['sql_query'] == 'TRUNCATE TABLE ' . PMA_backquote($GLOBALS['table'])    ) {        if (PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], 'Index_length') > 1024 && !PMA_DRIZZLE) {            PMA_DBI_try_query('REPAIR TABLE ' . PMA_backquote($GLOBALS['table']));        }    }    unset($tbl_status);    // In an Ajax request, $GLOBALS['cell_align_left'] may not be defined. Hence,    // check for it's presence before using it    echo '<div id="result_query" align="'        . ( isset($GLOBALS['cell_align_left']) ? $GLOBALS['cell_align_left'] : '' )        . '">' . "\n";    if ($message instanceof PMA_Message) {        if (isset($GLOBALS['special_message'])) {            $message->addMessage($GLOBALS['special_message']);            unset($GLOBALS['special_message']);        }        $message->display();        $type = $message->getLevel();    } else {        echo '<div class="' . $type . '">';        echo PMA_sanitize($message);        if (isset($GLOBALS['special_message'])) {            echo PMA_sanitize($GLOBALS['special_message']);            unset($GLOBALS['special_message']);        }        echo '</div>';    }    if ($cfg['ShowSQL'] == true && ! empty($sql_query)) {        // Html format the query to be displayed        // If we want to show some sql code it is easiest to create it here        /* SQL-Parser-Analyzer */        if (! empty($GLOBALS['show_as_php'])) {            $new_line = '\\n"<br />' . "\n"                . '&nbsp;&nbsp;&nbsp;&nbsp;. "';            $query_base = htmlspecialchars(addslashes($sql_query));            $query_base = preg_replace('/((\015\012)|(\015)|(\012))/', $new_line, $query_base);        } else {            $query_base = $sql_query;        }        $query_too_big = false;        if (strlen($query_base) > $cfg['MaxCharactersInDisplayedSQL']) {            // when the query is large (for example an INSERT of binary            // data), the parser chokes; so avoid parsing the query            $query_too_big = true;            $shortened_query_base = nl2br(                htmlspecialchars(                    substr($sql_query, 0, $cfg['MaxCharactersInDisplayedSQL']) . '[...]'                )            );        } elseif (! empty($GLOBALS['parsed_sql'])         && $query_base == $GLOBALS['parsed_sql']['raw']) {            // (here, use "! empty" because when deleting a bookmark,            // $GLOBALS['parsed_sql'] is set but empty            $parsed_sql = $GLOBALS['parsed_sql'];        } else {            // Parse SQL if needed            $parsed_sql = PMA_SQP_parse($query_base);        }        // Analyze it        if (isset($parsed_sql) && ! PMA_SQP_isError()) {            $analyzed_display_query = PMA_SQP_analyze($parsed_sql);            // Same as below (append LIMIT), append the remembered ORDER BY            if ($GLOBALS['cfg']['RememberSorting']                && isset($analyzed_display_query[0]['queryflags']['select_from'])                && isset($GLOBALS['sql_order_to_append'])            ) {                $query_base = $analyzed_display_query[0]['section_before_limit']                    . "\n" . $GLOBALS['sql_order_to_append']                    . $analyzed_display_query[0]['section_after_limit'];                // Need to reparse query                $parsed_sql = PMA_SQP_parse($query_base);                // update the $analyzed_display_query                $analyzed_display_query[0]['section_before_limit'] .= $GLOBALS['sql_order_to_append'];                $analyzed_display_query[0]['order_by_clause'] = $GLOBALS['sorted_col'];            }            // Here we append the LIMIT added for navigation, to            // enable its display. Adding it higher in the code            // to $sql_query would create a problem when            // using the Refresh or Edit links.            // Only append it on SELECTs.            /**             * @todo what would be the best to do when someone hits Refresh:             * use the current LIMITs ?             */            if (isset($analyzed_display_query[0]['queryflags']['select_from'])                && isset($GLOBALS['sql_limit_to_append'])            ) {                $query_base = $analyzed_display_query[0]['section_before_limit']                    . "\n" . $GLOBALS['sql_limit_to_append']                    . $analyzed_display_query[0]['section_after_limit'];                // Need to reparse query                $parsed_sql = PMA_SQP_parse($query_base);            }        }        if (! empty($GLOBALS['show_as_php'])) {            $query_base = '$sql  = "' . $query_base;        } elseif (! empty($GLOBALS['validatequery'])) {            try {                $query_base = PMA_validateSQL($query_base);            } catch (Exception $e) {                PMA_Message::error(__('Failed to connect to SQL validator!'))->display();            }        } elseif (isset($parsed_sql)) {            $query_base = PMA_formatSql($parsed_sql, $query_base);        }        // Prepares links that may be displayed to edit/explain the query        // (don't go to default pages, we must go to the page        // where the query box is available)        // Basic url query part        $url_params = array();        if (! isset($GLOBALS['db'])) {            $GLOBALS['db'] = '';        }        if (strlen($GLOBALS['db'])) {            $url_params['db'] = $GLOBALS['db'];            if (strlen($GLOBALS['table'])) {                $url_params['table'] = $GLOBALS['table'];                $edit_link = 'tbl_sql.php';            } else {                $edit_link = 'db_sql.php';            }        } else {            $edit_link = 'server_sql.php';        }        // Want to have the query explained        // but only explain a SELECT (that has not been explained)        /* SQL-Parser-Analyzer */        $explain_link = '';        $is_select = false;        if (! empty($cfg['SQLQuery']['Explain']) && ! $query_too_big) {            $explain_params = $url_params;            // Detect if we are validating as well            // To preserve the validate uRL data            if (! empty($GLOBALS['validatequery'])) {                $explain_params['validatequery'] = 1;            }            if (preg_match('@^SELECT[[:space:]]+@i', $sql_query)) {                $explain_params['sql_query'] = 'EXPLAIN ' . $sql_query;                $_message = __('Explain SQL');                $is_select = true;            } elseif (preg_match('@^EXPLAIN[[:space:]]+SELECT[[:space:]]+@i', $sql_query)) {                $explain_params['sql_query'] = substr($sql_query, 8);                $_message = __('Skip Explain SQL');            }            if (isset($explain_params['sql_query'])) {                $explain_link = 'import.php' . PMA_generate_common_url($explain_params);                $explain_link = ' [' . PMA_linkOrButton($explain_link, $_message) . ']';            }        } //show explain        $url_params['sql_query']  = $sql_query;        $url_params['show_query'] = 1;        // even if the query is big and was truncated, offer the chance        // to edit it (unless it's enormous, see PMA_linkOrButton() )        if (! empty($cfg['SQLQuery']['Edit'])) {            if ($cfg['EditInWindow'] == true) {                $onclick = 'window.parent.focus_querywindow(\''                    . PMA_jsFormat($sql_query, false) . '\'); return false;';            } else {                $onclick = '';            }            $edit_link .= PMA_generate_common_url($url_params) . '#querybox';            $edit_link = ' [' . PMA_linkOrButton($edit_link, __('Edit'), array('onclick' => $onclick)) . ']';        } else {            $edit_link = '';        }        $url_qpart = PMA_generate_common_url($url_params);        // Also we would like to get the SQL formed in some nice        // php-code        if (! empty($cfg['SQLQuery']['ShowAsPHP']) && ! $query_too_big) {            $php_params = $url_params;            if (! empty($GLOBALS['show_as_php'])) {                $_message = __('Without PHP Code');            } else {                $php_params['show_as_php'] = 1;                $_message = __('Create PHP Code');            }            $php_link = 'import.php' . PMA_generate_common_url($php_params);            $php_link = ' [' . PMA_linkOrButton($php_link, $_message) . ']';            if (isset($GLOBALS['show_as_php'])) {                $runquery_link = 'import.php' . PMA_generate_common_url($url_params);                $php_link .= ' [' . PMA_linkOrButton($runquery_link, __('Submit Query')) . ']';            }        } else {            $php_link = '';        } //show as php        // Refresh query        if (! empty($cfg['SQLQuery']['Refresh'])            && ! isset($GLOBALS['show_as_php']) // 'Submit query' does the same            && preg_match('@^(SELECT|SHOW)[[:space:]]+@i', $sql_query)        ) {            $refresh_link = 'import.php' . PMA_generate_common_url($url_params);            $refresh_link = ' [' . PMA_linkOrButton($refresh_link, __('Refresh')) . ']';        } else {            $refresh_link = '';        } //refresh        if (! empty($cfg['SQLValidator']['use'])            && ! empty($cfg['SQLQuery']['Validate'])        ) {            $validate_params = $url_params;            if (!empty($GLOBALS['validatequery'])) {                $validate_message = __('Skip Validate SQL');            } else {                $validate_params['validatequery'] = 1;                $validate_message = __('Validate SQL');            }            $validate_link = 'import.php' . PMA_generate_common_url($validate_params);            $validate_link = ' [' . PMA_linkOrButton($validate_link, $validate_message) . ']';        } else {            $validate_link = '';        } //validator        if (!empty($GLOBALS['validatequery'])) {            echo '<div class="sqlvalidate">';        } else {            echo '<code class="sql">';        }        if ($query_too_big) {            echo $shortened_query_base;        } else {            echo $query_base;        }        //Clean up the end of the PHP        if (! empty($GLOBALS['show_as_php'])) {            echo '";';        }        if (!empty($GLOBALS['validatequery'])) {            echo '</div>';        } else {            echo '</code>';        }        echo '<div class="tools">';        // avoid displaying a Profiling checkbox that could        // be checked, which would reexecute an INSERT, for example        if (! empty($refresh_link)) {            PMA_profilingCheckbox($sql_query);        }        // if needed, generate an invisible form that contains controls for the        // Inline link; this way, the behavior of the Inline link does not        // depend on the profiling support or on the refresh link        if (empty($refresh_link) || ! PMA_profilingSupported()) {            echo '<form action="sql.php" method="post">';            echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']);            echo '<input type="hidden" name="sql_query" value="'                . htmlspecialchars($sql_query) . '" />';            echo '</form>';        }        // in the tools div, only display the Inline link when not in ajax        // mode because 1) it currently does not work and 2) we would        // have two similar mechanisms on the page for the same goal        if ($is_select            || $GLOBALS['is_ajax_request'] === false            && ! $query_too_big        ) {            // see in js/functions.js the jQuery code attached to id inline_edit            // document.write conflicts with jQuery, hence used $().append()            echo "<script type=\"text/javascript\">\n" .                "//<![CDATA[\n" .                "$('.tools form').last().after('[<a href=\"#\" title=\"" .                PMA_escapeJsString(__('Inline edit of this query')) .                "\" class=\"inline_edit_sql\">" .                PMA_escapeJsString(_pgettext('Inline edit query', 'Inline')) .                "</a>]');\n" .                "//]]>\n" .                "</script>";        }        echo $edit_link . $explain_link . $php_link . $refresh_link . $validate_link;        echo '</div>';    }    echo '</div>';    if ($GLOBALS['is_ajax_request'] === false) {        echo '<br class="clearfloat" />';    }    // If we are in an Ajax request, we have most probably been called in    // PMA_ajaxResponse().  Hence, collect the buffer contents and return it    // to PMA_ajaxResponse(), which will encode it for JSON.    if ($GLOBALS['is_ajax_request'] == true        && ! isset($GLOBALS['buffer_message'])    ) {        $buffer_contents =  ob_get_contents();        ob_end_clean();        return $buffer_contents;    }    return null;} // end of the 'PMA_showMessage()' function/** * Verifies if current MySQL server supports profiling * * @access  public * * @return  boolean whether profiling is supported */function PMA_profilingSupported(){    if (! PMA_cacheExists('profiling_supported', true)) {        // 5.0.37 has profiling but for example, 5.1.20 does not        // (avoid a trip to the server for MySQL before 5.0.37)        // and do not set a constant as we might be switching servers        if (defined('PMA_MYSQL_INT_VERSION')            && PMA_MYSQL_INT_VERSION >= 50037            && PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'profiling'")        ) {            PMA_cacheSet('profiling_supported', true, true);        } else {            PMA_cacheSet('profiling_supported', false, true);        }    }    return PMA_cacheGet('profiling_supported', true);}/** * Displays a form with the Profiling checkbox * * @param string $sql_query sql query * * @access  public */function PMA_profilingCheckbox($sql_query){    if (PMA_profilingSupported()) {        echo '<form action="sql.php" method="post">' . "\n";        echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']);        echo '<input type="hidden" name="sql_query" value="' . htmlspecialchars($sql_query) . '" />' . "\n";        echo '<input type="hidden" name="profiling_form" value="1" />' . "\n";        PMA_display_html_checkbox('profiling', __('Profiling'), isset($_SESSION['profiling']), true);        echo '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>' . "\n";        echo '</form>' . "\n";    }}/** * Formats $value to byte view * * @param double $value the value to format * @param int    $limes the sensitiveness * @param int    $comma the number of decimals to retain * * @return   array    the formatted value and its unit * * @access  public */function PMA_formatByteDown($value, $limes = 6, $comma = 0){    if ($value === null) {        return null;    }    $byteUnits = array(        /* l10n: shortcuts for Byte */        __('B'),        /* l10n: shortcuts for Kilobyte */        __('KiB'),        /* l10n: shortcuts for Megabyte */        __('MiB'),        /* l10n: shortcuts for Gigabyte */        __('GiB'),        /* l10n: shortcuts for Terabyte */        __('TiB'),        /* l10n: shortcuts for Petabyte */        __('PiB'),        /* l10n: shortcuts for Exabyte */        __('EiB')        );    $dh   = PMA_pow(10, $comma);    $li   = PMA_pow(10, $limes);    $unit = $byteUnits[0];    for ($d = 6, $ex = 15; $d >= 1; $d--, $ex-=3) {        if (isset($byteUnits[$d]) && $value >= $li * PMA_pow(10, $ex)) {            // use 1024.0 to avoid integer overflow on 64-bit machines            $value = round($value / (PMA_pow(1024, $d) / $dh)) /$dh;            $unit = $byteUnits[$d];            break 1;        } // end if    } // end for    if ($unit != $byteUnits[0]) {        // if the unit is not bytes (as represented in current language)        // reformat with max length of 5        // 4th parameter=true means do not reformat if value < 1        $return_value = PMA_formatNumber($value, 5, $comma, true);    } else {        // do not reformat, just handle the locale        $return_value = PMA_formatNumber($value, 0);    }    return array(trim($return_value), $unit);} // end of the 'PMA_formatByteDown' function/** * Changes thousands and decimal separators to locale specific values. * * @param string $value the value * * @return string */function PMA_localizeNumber($value){    return str_replace(        array(',', '.'),        array(            /* l10n: Thousands separator */            __(','),            /* l10n: Decimal separator */            __('.'),            ),        $value    );}/** * Formats $value to the given length and appends SI prefixes * with a $length of 0 no truncation occurs, number is only formated * to the current locale * * examples: * <code> * echo PMA_formatNumber(123456789, 6);     // 123,457 k * echo PMA_formatNumber(-123456789, 4, 2); //    -123.46 M * echo PMA_formatNumber(-0.003, 6);        //      -3 m * echo PMA_formatNumber(0.003, 3, 3);      //       0.003 * echo PMA_formatNumber(0.00003, 3, 2);    //       0.03 m * echo PMA_formatNumber(0, 6);             //       0 * </code> * * @param double  $value          the value to format * @param integer $digits_left    number of digits left of the comma * @param integer $digits_right   number of digits right of the comma * @param boolean $only_down      do not reformat numbers below 1 * @param boolean $noTrailingZero removes trailing zeros right of the comma *                                (default: true) * * @return  string   the formatted value and its unit * * @access  public */function PMA_formatNumber($value, $digits_left = 3, $digits_right = 0,$only_down = false, $noTrailingZero = true){    if ($value==0) {        return '0';    }    $originalValue = $value;    //number_format is not multibyte safe, str_replace is safe    if ($digits_left === 0) {        $value = number_format($value, $digits_right);        if ($originalValue != 0 && floatval($value) == 0) {            $value = ' <' . (1 / PMA_pow(10, $digits_right));        }        return PMA_localizeNumber($value);    }    // this units needs no translation, ISO    $units = array(        -8 => 'y',        -7 => 'z',        -6 => 'a',        -5 => 'f',        -4 => 'p',        -3 => 'n',        -2 => '&micro;',        -1 => 'm',        0 => ' ',        1 => 'k',        2 => 'M',        3 => 'G',        4 => 'T',        5 => 'P',        6 => 'E',        7 => 'Z',        8 => 'Y'    );    // check for negative value to retain sign    if ($value < 0) {        $sign = '-';        $value = abs($value);    } else {        $sign = '';    }    $dh = PMA_pow(10, $digits_right);    /*     * This gives us the right SI prefix already,     * but $digits_left parameter not incorporated     */    $d = floor(log10($value) / 3);    /*     * Lowering the SI prefix by 1 gives us an additional 3 zeros     * So if we have 3,6,9,12.. free digits ($digits_left - $cur_digits)     * to use, then lower the SI prefix     */    $cur_digits = floor(log10($value / PMA_pow(1000, $d, 'pow'))+1);    if ($digits_left > $cur_digits) {        $d-= floor(($digits_left - $cur_digits)/3);    }    if ($d<0 && $only_down) {        $d=0;    }    $value = round($value / (PMA_pow(1000, $d, 'pow') / $dh)) /$dh;    $unit = $units[$d];    // If we dont want any zeros after the comma just add the thousand seperator    if ($noTrailingZero) {        $value = PMA_localizeNumber(            preg_replace('/(?<=\d)(?=(\d{3})+(?!\d))/', ',', $value)        );    } else {        //number_format is not multibyte safe, str_replace is safe        $value = PMA_localizeNumber(number_format($value, $digits_right));    }    if ($originalValue!=0 && floatval($value) == 0) {        return ' <' . (1 / PMA_pow(10, $digits_right)) . ' ' . $unit;    }    return $sign . $value . ' ' . $unit;} // end of the 'PMA_formatNumber' function/** * Returns the number of bytes when a formatted size is given * * @param string $formatted_size the size expression (for example 8MB) * * @return  integer  The numerical part of the expression (for example 8) */function PMA_extractValueFromFormattedSize($formatted_size){    $return_value = -1;    if (preg_match('/^[0-9]+GB$/', $formatted_size)) {        $return_value = substr($formatted_size, 0, -2) * PMA_pow(1024, 3);    } elseif (preg_match('/^[0-9]+MB$/', $formatted_size)) {        $return_value = substr($formatted_size, 0, -2) * PMA_pow(1024, 2);    } elseif (preg_match('/^[0-9]+K$/', $formatted_size)) {        $return_value = substr($formatted_size, 0, -1) * PMA_pow(1024, 1);    }    return $return_value;}// end of the 'PMA_extractValueFromFormattedSize' function/** * Writes localised date * * @param string $timestamp the current timestamp * @param string $format    format * * @return  string   the formatted date * * @access  public */function PMA_localisedDate($timestamp = -1, $format = ''){    $month = array(        /* l10n: Short month name */        __('Jan'),        /* l10n: Short month name */        __('Feb'),        /* l10n: Short month name */        __('Mar'),        /* l10n: Short month name */        __('Apr'),        /* l10n: Short month name */        _pgettext('Short month name', 'May'),        /* l10n: Short month name */        __('Jun'),        /* l10n: Short month name */        __('Jul'),        /* l10n: Short month name */        __('Aug'),        /* l10n: Short month name */        __('Sep'),        /* l10n: Short month name */        __('Oct'),        /* l10n: Short month name */        __('Nov'),        /* l10n: Short month name */        __('Dec'));    $day_of_week = array(        /* l10n: Short week day name */        _pgettext('Short week day name', 'Sun'),        /* l10n: Short week day name */        __('Mon'),        /* l10n: Short week day name */        __('Tue'),        /* l10n: Short week day name */        __('Wed'),        /* l10n: Short week day name */        __('Thu'),        /* l10n: Short week day name */        __('Fri'),        /* l10n: Short week day name */        __('Sat'));    if ($format == '') {        /* l10n: See http://www.php.net/manual/en/function.strftime.php */        $format = __('%B %d, %Y at %I:%M %p');    }    if ($timestamp == -1) {        $timestamp = time();    }    $date = preg_replace(        '@%[aA]@',        $day_of_week[(int)strftime('%w', $timestamp)],        $format    );    $date = preg_replace(        '@%[bB]@',        $month[(int)strftime('%m', $timestamp)-1],        $date    );    return strftime($date, $timestamp);} // end of the 'PMA_localisedDate()' function/** * returns a tab for tabbed navigation. * If the variables $link and $args ar left empty, an inactive tab is created * * @param array $tab        array with all options * @param array $url_params * * @return  string  html code for one tab, a link if valid otherwise a span * * @access  public */function PMA_generate_html_tab($tab, $url_params = array(), $base_dir=''){    // default values    $defaults = array(        'text'      => '',        'class'     => '',        'active'    => null,        'link'      => '',        'sep'       => '?',        'attr'      => '',        'args'      => '',        'warning'   => '',        'fragment'  => '',        'id'        => '',    );    $tab = array_merge($defaults, $tab);    // determine additionnal style-class    if (empty($tab['class'])) {        if (! empty($tab['active'])            || PMA_isValid($GLOBALS['active_page'], 'identical', $tab['link'])        ) {            $tab['class'] = 'active';        } elseif (is_null($tab['active']) && empty($GLOBALS['active_page'])          && basename($GLOBALS['PMA_PHP_SELF']) == $tab['link']          && empty($tab['warning'])) {            $tab['class'] = 'active';        }    }    if (!empty($tab['warning'])) {        $tab['class'] .= ' error';        $tab['attr'] .= ' title="' . htmlspecialchars($tab['warning']) . '"';    }    // If there are any tab specific URL parameters, merge those with    // the general URL parameters    if (! empty($tab['url_params']) && is_array($tab['url_params'])) {        $url_params = array_merge($url_params, $tab['url_params']);    }    // build the link    if (!empty($tab['link'])) {        $tab['link'] = htmlentities($tab['link']);        $tab['link'] = $tab['link'] . PMA_generate_common_url($url_params);        if (! empty($tab['args'])) {            foreach ($tab['args'] as $param => $value) {                $tab['link'] .= PMA_get_arg_separator('html') . urlencode($param)                    . '=' . urlencode($value);            }        }    }    if (! empty($tab['fragment'])) {        $tab['link'] .= $tab['fragment'];    }    // display icon, even if iconic is disabled but the link-text is missing    if (($GLOBALS['cfg']['MainPageIconic'] || empty($tab['text']))        && isset($tab['icon'])    ) {        // avoid generating an alt tag, because it only illustrates        // the text that follows and if browser does not display        // images, the text is duplicated        $tab['text'] = PMA_getImage(htmlentities($tab['icon'])) . $tab['text'];    } elseif (empty($tab['text'])) {        // check to not display an empty link-text        $tab['text'] = '?';        trigger_error(            'empty linktext in function ' . __FUNCTION__ . '()',            E_USER_NOTICE        );    }    //Set the id for the tab, if set in the params    $id_string = ( empty($tab['id']) ? '' : ' id="'.$tab['id'].'" ' );    $out = '<li' . ($tab['class'] == 'active' ? ' class="active"' : '') . '>';    if (!empty($tab['link'])) {        $out .= '<a class="tab' . htmlentities($tab['class']) . '"'            .$id_string            .' href="' . $tab['link'] . '" ' . $tab['attr'] . '>'            . $tab['text'] . '</a>';    } else {        $out .= '<span class="tab' . htmlentities($tab['class']) . '"'.$id_string.'>'            . $tab['text'] . '</span>';    }    $out .= '</li>';    return $out;} // end of the 'PMA_generate_html_tab()' function/** * returns html-code for a tab navigation * * @param array  $tabs       one element per tab * @param string $url_params * @param string $base_dir * @param string $menu_id * * @return  string  html-code for tab-navigation */function PMA_generate_html_tabs($tabs, $url_params, $base_dir='', $menu_id='topmenu'){    $tab_navigation = '<div id="' . htmlentities($menu_id) . 'container" class="menucontainer">'        .'<ul id="' . htmlentities($menu_id) . '">';    foreach ($tabs as $tab) {        $tab_navigation .= PMA_generate_html_tab($tab, $url_params, $base_dir);    }    $tab_navigation .=         '</ul>' . "\n"        .'<div class="clearfloat"></div>'        .'</div>' . "\n";    return $tab_navigation;}/** * Displays a link, or a button if the link's URL is too large, to * accommodate some browsers' limitations * * @param string  $url        the URL * @param string  $message    the link message * @param mixed   $tag_params string: js confirmation *                            array: additional tag params (f.e. style="") * @param boolean $new_form   we set this to false when we are already in *                            a  form, to avoid generating nested forms * @param boolean $strip_img  whether to strip the image * @param string  $target     target * * @return string  the results to be echoed or saved in an array */function PMA_linkOrButton($url, $message, $tag_params = array(),    $new_form = true, $strip_img = false, $target = ''){    $url_length = strlen($url);    // with this we should be able to catch case of image upload    // into a (MEDIUM) BLOB; not worth generating even a form for these    if ($url_length > $GLOBALS['cfg']['LinkLengthLimit'] * 100) {        return '';    }    if (! is_array($tag_params)) {        $tmp = $tag_params;        $tag_params = array();        if (!empty($tmp)) {            $tag_params['onclick'] = 'return confirmLink(this, \'' . PMA_escapeJsString($tmp) . '\')';        }        unset($tmp);    }    if (! empty($target)) {        $tag_params['target'] = htmlentities($target);    }    $tag_params_strings = array();    foreach ($tag_params as $par_name => $par_value) {        // htmlspecialchars() only on non javascript        $par_value = substr($par_name, 0, 2) == 'on'            ? $par_value            : htmlspecialchars($par_value);        $tag_params_strings[] = $par_name . '="' . $par_value . '"';    }    $displayed_message = '';    // Add text if not already added    if (stristr($message, '<img')        && (!$strip_img || $GLOBALS['cfg']['PropertiesIconic'] === true)        && strip_tags($message)==$message    ) {        $displayed_message = '<span>'        . htmlspecialchars(            preg_replace('/^.*\salt="([^"]*)".*$/si', '\1', $message)        )        . '</span>';    }    // Suhosin: Check that each query parameter is not above maximum    $in_suhosin_limits = true;    if ($url_length <= $GLOBALS['cfg']['LinkLengthLimit']) {        if ($suhosin_get_MaxValueLength = ini_get('suhosin.get.max_value_length')) {            $query_parts = PMA_splitURLQuery($url);            foreach ($query_parts as $query_pair) {                list($eachvar, $eachval) = explode('=', $query_pair);                if (strlen($eachval) > $suhosin_get_MaxValueLength) {                    $in_suhosin_limits = false;                    break;                }            }        }    }    if ($url_length <= $GLOBALS['cfg']['LinkLengthLimit'] && $in_suhosin_limits) {        // no whitespace within an <a> else Safari will make it part of the link        $ret = "\n" . '<a href="' . $url . '" '            . implode(' ', $tag_params_strings) . '>'            . $message . $displayed_message . '</a>' . "\n";    } else {        // no spaces (linebreaks) at all        // or after the hidden fields        // IE will display them all        // add class=link to submit button        if (empty($tag_params['class'])) {            $tag_params['class'] = 'link';        }        if (! isset($query_parts)) {            $query_parts = PMA_splitURLQuery($url);        }        $url_parts   = parse_url($url);        if ($new_form) {            $ret = '<form action="' . $url_parts['path'] . '" class="link"'                 . ' method="post"' . $target . ' style="display: inline;">';            $subname_open   = '';            $subname_close  = '';            $submit_link    = '#';        } else {            $query_parts[] = 'redirect=' . $url_parts['path'];            if (empty($GLOBALS['subform_counter'])) {                $GLOBALS['subform_counter'] = 0;            }            $GLOBALS['subform_counter']++;            $ret            = '';            $subname_open   = 'subform[' . $GLOBALS['subform_counter'] . '][';            $subname_close  = ']';            $submit_link    = '#usesubform[' . $GLOBALS['subform_counter'] . ']=1';        }        foreach ($query_parts as $query_pair) {            list($eachvar, $eachval) = explode('=', $query_pair);            $ret .= '<input type="hidden" name="' . $subname_open . $eachvar                . $subname_close . '" value="'                . htmlspecialchars(urldecode($eachval)) . '" />';        } // end while        $ret .= "\n" . '<a href="' . $submit_link . '" class="formLinkSubmit" '        . implode(' ', $tag_params_strings) . '>'        . $message . ' ' . $displayed_message . '</a>' . "\n";        if ($new_form) {            $ret .= '</form>';        }    } // end if... else...    return $ret;} // end of the 'PMA_linkOrButton()' function/** * Splits a URL string by parameter * * @param string $url the URL * * @return array  the parameter/value pairs, for example [0] db=sakila */function PMA_splitURLQuery($url){    // decode encoded url separators    $separator   = PMA_get_arg_separator();    // on most places separator is still hard coded ...    if ($separator !== '&') {        // ... so always replace & with $separator        $url         = str_replace(htmlentities('&'), $separator, $url);        $url         = str_replace('&', $separator, $url);    }    $url         = str_replace(htmlentities($separator), $separator, $url);    // end decode    $url_parts   = parse_url($url);    return explode($separator, $url_parts['query']);}/** * Returns a given timespan value in a readable format. * * @param int $seconds the timespan * * @return string  the formatted value */function PMA_timespanFormat($seconds){    $days = floor($seconds / 86400);    if ($days > 0) {        $seconds -= $days * 86400;    }    $hours = floor($seconds / 3600);    if ($days > 0 || $hours > 0) {        $seconds -= $hours * 3600;    }    $minutes = floor($seconds / 60);    if ($days > 0 || $hours > 0 || $minutes > 0) {        $seconds -= $minutes * 60;    }    return sprintf(        __('%s days, %s hours, %s minutes and %s seconds'),        (string)$days, (string)$hours, (string)$minutes, (string)$seconds    );}/** * Takes a string and outputs each character on a line for itself. Used * mainly for horizontalflipped display mode. * Takes care of special html-characters. * Fulfills todo-item * http://sf.net/tracker/?func=detail&aid=544361&group_id=23067&atid=377411 * * @param string $string    The string * @param string $Separator The Separator (defaults to "<br />\n") * * @access  public * @todo    add a multibyte safe function PMA_STR_split() * * @return  string      The flipped string */function PMA_flipstring($string, $Separator = "<br />\n"){    $format_string = '';    $charbuff = false;    for ($i = 0, $str_len = strlen($string); $i < $str_len; $i++) {        $char = $string{$i};        $append = false;        if ($char == '&') {            $format_string .= $charbuff;            $charbuff = $char;        } elseif ($char == ';' && !empty($charbuff)) {            $format_string .= $charbuff . $char;            $charbuff = false;            $append = true;        } elseif (! empty($charbuff)) {            $charbuff .= $char;        } else {            $format_string .= $char;            $append = true;        }        // do not add separator after the last character        if ($append && ($i != $str_len - 1)) {            $format_string .= $Separator;        }    }    return $format_string;}/** * Function added to avoid path disclosures. * Called by each script that needs parameters, it displays * an error message and, by default, stops the execution. * * Not sure we could use a strMissingParameter message here, * would have to check if the error message file is always available * * @param array $params  The names of the parameters needed by the calling script. * @param bool  $die     Stop the execution? *                       (Set this manually to false in the calling script *                       until you know all needed parameters to check). * @param bool  $request Whether to include this list in checking for special params. * * @global  string  path to current script * @global  boolean flag whether any special variable was required * * @access  public * @todo    use PMA_fatalError() if $die === true? */function PMA_checkParameters($params, $die = true, $request = true){    global $checked_special;    if (! isset($checked_special)) {        $checked_special = false;    }    $reported_script_name = basename($GLOBALS['PMA_PHP_SELF']);    $found_error = false;    $error_message = '';    foreach ($params as $param) {        if ($request && $param != 'db' && $param != 'table') {            $checked_special = true;        }        if (! isset($GLOBALS[$param])) {            $error_message .= $reported_script_name                . ': ' . __('Missing parameter:') . ' '                . $param                . PMA_showDocu('faqmissingparameters')                . '<br />';            $found_error = true;        }    }    if ($found_error) {        /**         * display html meta tags         */        include_once './libraries/header_meta_style.inc.php';        echo '</head><body><p>' . $error_message . '</p></body></html>';        if ($die) {            exit();        }    }} // end function/** * Function to generate unique condition for specified row. * * @param resource $handle       current query result * @param integer  $fields_cnt   number of fields * @param array    $fields_meta  meta information about fields * @param array    $row          current row * @param boolean  $force_unique generate condition only on pk or unique * * @access  public * * @return  array     the calculated condition and whether condition is unique */function PMA_getUniqueCondition($handle, $fields_cnt, $fields_meta, $row, $force_unique = false){    $primary_key          = '';    $unique_key           = '';    $nonprimary_condition = '';    $preferred_condition = '';    $primary_key_array    = array();    $unique_key_array     = array();    $nonprimary_condition_array = array();    $condition_array = array();    for ($i = 0; $i < $fields_cnt; ++$i) {        $condition   = '';        $con_key     = '';        $con_val     = '';        $field_flags = PMA_DBI_field_flags($handle, $i);        $meta        = $fields_meta[$i];        // do not use a column alias in a condition        if (! isset($meta->orgname) || ! strlen($meta->orgname)) {            $meta->orgname = $meta->name;            if (isset($GLOBALS['analyzed_sql'][0]['select_expr'])                && is_array($GLOBALS['analyzed_sql'][0]['select_expr'])            ) {                foreach ($GLOBALS['analyzed_sql'][0]['select_expr'] as $select_expr) {                    // need (string) === (string)                    // '' !== 0 but '' == 0                    if ((string) $select_expr['alias'] === (string) $meta->name) {                        $meta->orgname = $select_expr['column'];                        break;                    } // end if                } // end foreach            }        }        // Do not use a table alias in a condition.        // Test case is:        // select * from galerie x WHERE        //(select count(*) from galerie y where y.datum=x.datum)>1        //        // But orgtable is present only with mysqli extension so the        // fix is only for mysqli.        // Also, do not use the original table name if we are dealing with        // a view because this view might be updatable.        // (The isView() verification should not be costly in most cases        // because there is some caching in the function).        if (isset($meta->orgtable)            && $meta->table != $meta->orgtable            && ! PMA_Table::isView($GLOBALS['db'], $meta->table)        ) {            $meta->table = $meta->orgtable;        }        // to fix the bug where float fields (primary or not)        // can't be matched because of the imprecision of        // floating comparison, use CONCAT        // (also, the syntax "CONCAT(field) IS NULL"        // that we need on the next "if" will work)        if ($meta->type == 'real') {            $con_key = 'CONCAT(' . PMA_backquote($meta->table) . '.'                . PMA_backquote($meta->orgname) . ')';        } else {            $con_key = PMA_backquote($meta->table) . '.'                . PMA_backquote($meta->orgname);        } // end if... else...        $condition = ' ' . $con_key . ' ';        if (! isset($row[$i]) || is_null($row[$i])) {            $con_val = 'IS NULL';        } else {            // timestamp is numeric on some MySQL 4.1            // for real we use CONCAT above and it should compare to string            if ($meta->numeric                && $meta->type != 'timestamp'                && $meta->type != 'real'            ) {                $con_val = '= ' . $row[$i];            } elseif (($meta->type == 'blob' || $meta->type == 'string')                // hexify only if this is a true not empty BLOB or a BINARY                    && stristr($field_flags, 'BINARY')                    && !empty($row[$i])) {                // do not waste memory building a too big condition                if (strlen($row[$i]) < 1000) {                    // use a CAST if possible, to avoid problems                    // if the field contains wildcard characters % or _                    $con_val = '= CAST(0x' . bin2hex($row[$i]) . ' AS BINARY)';                } else {                    // this blob won't be part of the final condition                    $con_val = null;                }            } elseif (in_array($meta->type, PMA_getGISDatatypes())                && ! empty($row[$i])            ) {                // do not build a too big condition                if (strlen($row[$i]) < 5000) {                    $condition .= '=0x' . bin2hex($row[$i]) . ' AND';                } else {                    $condition = '';                }            } elseif ($meta->type == 'bit') {                $con_val = "= b'" . PMA_printable_bit_value($row[$i], $meta->length) . "'";            } else {                $con_val = '= \'' . PMA_sqlAddSlashes($row[$i], false, true) . '\'';            }        }        if ($con_val != null) {            $condition .= $con_val . ' AND';            if ($meta->primary_key > 0) {                $primary_key .= $condition;                $primary_key_array[$con_key] = $con_val;            } elseif ($meta->unique_key > 0) {                $unique_key  .= $condition;                $unique_key_array[$con_key] = $con_val;            }            $nonprimary_condition .= $condition;            $nonprimary_condition_array[$con_key] = $con_val;        }    } // end for    // Correction University of Virginia 19991216:    // prefer primary or unique keys for condition,    // but use conjunction of all values if no primary key    $clause_is_unique = true;    if ($primary_key) {        $preferred_condition = $primary_key;        $condition_array = $primary_key_array;    } elseif ($unique_key) {        $preferred_condition = $unique_key;        $condition_array = $unique_key_array;    } elseif (! $force_unique) {        $preferred_condition = $nonprimary_condition;        $condition_array = $nonprimary_condition_array;        $clause_is_unique = false;    }    $where_clause = trim(preg_replace('|\s?AND$|', '', $preferred_condition));    return(array($where_clause, $clause_is_unique, $condition_array));} // end function/** * Generate a button or image tag * * @param string $button_name  name of button element * @param string $button_class class of button element * @param string $image_name   name of image element * @param string $text         text to display * @param string $image        image to display * @param string $value        value * * @access  public */function PMA_buttonOrImage($button_name, $button_class, $image_name, $text,    $image, $value = ''){    if ($value == '') {        $value = $text;    }    if (false === $GLOBALS['cfg']['PropertiesIconic']) {        echo ' <input type="submit" name="' . $button_name . '"'                .' value="' . htmlspecialchars($value) . '"'                .' title="' . htmlspecialchars($text) . '" />' . "\n";        return;    }    /* Opera has trouble with <input type="image"> */    /* IE has trouble with <button> */    if (PMA_USR_BROWSER_AGENT != 'IE') {        echo '<button class="' . $button_class . '" type="submit"'            .' name="' . $button_name . '" value="' . htmlspecialchars($value) . '"'            .' title="' . htmlspecialchars($text) . '">' . "\n"            . PMA_getIcon($image, $text)            .'</button>' . "\n";    } else {        echo '<input type="image" name="' . $image_name            . '" value="' . htmlspecialchars($value)            . '" title="' . htmlspecialchars($text)            . '" src="' . $GLOBALS['pmaThemeImage']. $image . '" />'            . ($GLOBALS['cfg']['PropertiesIconic'] === 'both'                ? '&nbsp;' . htmlspecialchars($text)                : '') . "\n";    }} // end function/** * Generate a pagination selector for browsing resultsets * * @param int    $rows        Number of rows in the pagination set * @param int    $pageNow     current page number * @param int    $nbTotalPage number of total pages * @param int    $showAll     If the number of pages is lower than this *                            variable, no pages will be omitted in pagination * @param int    $sliceStart  How many rows at the beginning should always be shown? * @param int    $sliceEnd    How many rows at the end should always be shown? * @param int    $percent     Percentage of calculation page offsets to hop to a *                            next page * @param int    $range       Near the current page, how many pages should *                            be considered "nearby" and displayed as well? * @param string $prompt      The prompt to display (sometimes empty) * * @return string * * @access  public */function PMA_pageselector($rows, $pageNow = 1, $nbTotalPage = 1,    $showAll = 200, $sliceStart = 5, $sliceEnd = 5, $percent = 20,    $range = 10, $prompt = ''){    $increment = floor($nbTotalPage / $percent);    $pageNowMinusRange = ($pageNow - $range);    $pageNowPlusRange = ($pageNow + $range);    $gotopage = $prompt . ' <select id="pageselector" ';    if ($GLOBALS['cfg']['AjaxEnable']) {        $gotopage .= ' class="ajax"';    }    $gotopage .= ' name="pos" >' . "\n";    if ($nbTotalPage < $showAll) {        $pages = range(1, $nbTotalPage);    } else {        $pages = array();        // Always show first X pages        for ($i = 1; $i <= $sliceStart; $i++) {            $pages[] = $i;        }        // Always show last X pages        for ($i = $nbTotalPage - $sliceEnd; $i <= $nbTotalPage; $i++) {            $pages[] = $i;        }        // Based on the number of results we add the specified        // $percent percentage to each page number,        // so that we have a representing page number every now and then to        // immediately jump to specific pages.        // As soon as we get near our currently chosen page ($pageNow -        // $range), every page number will be shown.        $i = $sliceStart;        $x = $nbTotalPage - $sliceEnd;        $met_boundary = false;        while ($i <= $x) {            if ($i >= $pageNowMinusRange && $i <= $pageNowPlusRange) {                // If our pageselector comes near the current page, we use 1                // counter increments                $i++;                $met_boundary = true;            } else {                // We add the percentage increment to our current page to                // hop to the next one in range                $i += $increment;                // Make sure that we do not cross our boundaries.                if ($i > $pageNowMinusRange && ! $met_boundary) {                    $i = $pageNowMinusRange;                }            }            if ($i > 0 && $i <= $x) {                $pages[] = $i;            }        }/*    Add page numbers with "geometrically increasing" distances.    This helps me a lot when navigating through giant tables.    Test case: table with 2.28 million sets, 76190 pages. Page of interest is    between 72376 and 76190.    Selecting page 72376.    Now, old version enumerated only +/- 10 pages around 72376 and the    percentage increment produced steps of about 3000.    The following code adds page numbers +/- 2,4,8,16,32,64,128,256 etc.    around the current page.*/        $i = $pageNow;        $dist = 1;        while ($i < $x) {            $dist = 2 * $dist;            $i = $pageNow + $dist;            if ($i > 0 && $i <= $x) {                $pages[] = $i;            }        }        $i = $pageNow;        $dist = 1;        while ($i >0) {            $dist = 2 * $dist;            $i = $pageNow - $dist;            if ($i > 0 && $i <= $x) {                $pages[] = $i;            }        }        // Since because of ellipsing of the current page some numbers may be double,        // we unify our array:        sort($pages);        $pages = array_unique($pages);    }    foreach ($pages as $i) {        if ($i == $pageNow) {            $selected = 'selected="selected" style="font-weight: bold"';        } else {            $selected = '';        }        $gotopage .= '                <option ' . $selected            . ' value="' . (($i - 1) * $rows) . '">' . $i . '</option>' . "\n";    }    $gotopage .= ' </select><noscript><input type="submit" value="'        . __('Go') . '" /></noscript>';    return $gotopage;} // end function/** * Generate navigation for a list * * @param int    $count       number of elements in the list * @param int    $pos         current position in the list * @param array  $_url_params url parameters * @param string $script      script name for form target * @param string $frame       target frame * @param int    $max_count   maximum number of elements to display from the list * * @access  public * * @todo    use $pos from $_url_params */function PMA_listNavigator($count, $pos, $_url_params, $script, $frame, $max_count){    if ($max_count < $count) {        echo 'frame_navigation' == $frame            ? '<div id="navidbpageselector">' . "\n"            : '';        echo __('Page number:');        echo 'frame_navigation' == $frame ? '<br />' : ' ';        // Move to the beginning or to the previous page        if ($pos > 0) {            // patch #474210 - part 1            if ($GLOBALS['cfg']['NavigationBarIconic']) {                $caption1 = '&lt;&lt;';                $caption2 = ' &lt; ';                $title1   = ' title="' . _pgettext('First page', 'Begin') . '"';                $title2   = ' title="' . _pgettext('Previous page', 'Previous') . '"';            } else {                $caption1 = _pgettext('First page', 'Begin') . ' &lt;&lt;';                $caption2 = _pgettext('Previous page', 'Previous') . ' &lt;';                $title1   = '';                $title2   = '';            } // end if... else...            $_url_params['pos'] = 0;            echo '<a' . $title1 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption1 . '</a>';            $_url_params['pos'] = $pos - $max_count;            echo '<a' . $title2 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption2 . '</a>';        }        echo "\n", '<form action="./', basename($script), '" method="post" target="', $frame, '">', "\n";        echo PMA_generate_common_hidden_inputs($_url_params);        echo PMA_pageselector(            $max_count,            floor(($pos + 1) / $max_count) + 1,            ceil($count / $max_count)        );        echo '</form>';        if ($pos + $max_count < $count) {            if ($GLOBALS['cfg']['NavigationBarIconic']) {                $caption3 = ' &gt; ';                $caption4 = '&gt;&gt;';                $title3   = ' title="' . _pgettext('Next page', 'Next') . '"';                $title4   = ' title="' . _pgettext('Last page', 'End') . '"';            } else {                $caption3 = '&gt; ' . _pgettext('Next page', 'Next');                $caption4 = '&gt;&gt; ' . _pgettext('Last page', 'End');                $title3   = '';                $title4   = '';            } // end if... else...            $_url_params['pos'] = $pos + $max_count;            echo '<a' . $title3 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption3 . '</a>';            $_url_params['pos'] = floor($count / $max_count) * $max_count;            if ($_url_params['pos'] == $count) {                $_url_params['pos'] = $count - $max_count;            }            echo '<a' . $title4 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption4 . '</a>';        }        echo "\n";        if ('frame_navigation' == $frame) {            echo '</div>' . "\n";        }    }}/** * replaces %u in given path with current user name * * example: * <code> * $user_dir = PMA_userDir('/var/pma_tmp/%u/'); // '/var/pma_tmp/root/' * * </code> * * @param string $dir with wildcard for user * * @return  string  per user directory */function PMA_userDir($dir){    // add trailing slash    if (substr($dir, -1) != '/') {        $dir .= '/';    }    return str_replace('%u', $GLOBALS['cfg']['Server']['user'], $dir);}/** * returns html code for db link to default db page * * @param string $database database * * @return  string  html link to default db page */function PMA_getDbLink($database = null){    if (! strlen($database)) {        if (! strlen($GLOBALS['db'])) {            return '';        }        $database = $GLOBALS['db'];    } else {        $database = PMA_unescape_mysql_wildcards($database);    }    return '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase'] . '?'        . PMA_generate_common_url($database) . '" title="'        . sprintf(            __('Jump to database &quot;%s&quot;.'),            htmlspecialchars($database)        )        . '">' . htmlspecialchars($database) . '</a>';}/** * Displays a lightbulb hint explaining a known external bug * that affects a functionality * * @param string $functionality   localized message explaining the func. * @param string $component       'mysql' (eventually, 'php') * @param string $minimum_version of this component * @param string $bugref          bug reference for this component */function PMA_externalBug($functionality, $component, $minimum_version, $bugref){    if ($component == 'mysql' && PMA_MYSQL_INT_VERSION < $minimum_version) {        echo PMA_showHint(            sprintf(                __('The %s functionality is affected by a known bug, see %s'),                $functionality,                PMA_linkURL('http://bugs.mysql.com/') . $bugref            )        );    }}/** * Generates and echoes an HTML checkbox * * @param string  $html_field_name the checkbox HTML field * @param string  $label           label for checkbox * @param boolean $checked         is it initially checked? * @param boolean $onclick         should it submit the form on click? * * @return the HTML for the checkbox */function PMA_display_html_checkbox($html_field_name, $label, $checked, $onclick){    echo '<input type="checkbox" name="' . $html_field_name . '" id="'        . $html_field_name . '"' . ($checked ? ' checked="checked"' : '')        . ($onclick ? ' class="autosubmit"' : '') . ' /><label for="'        . $html_field_name . '">' . $label . '</label>';}/** * Generates and echoes a set of radio HTML fields * * @param string  $html_field_name the radio HTML field * @param array   $choices         the choices values and labels * @param string  $checked_choice  the choice to check by default * @param boolean $line_break      whether to add an HTML line break after a choice * @param boolean $escape_label    whether to use htmlspecialchars() on label * @param string  $class           enclose each choice with a div of this class * * @return the HTML for the tadio buttons */function PMA_display_html_radio($html_field_name, $choices, $checked_choice = '',$line_break = true, $escape_label = true, $class=''){    foreach ($choices as $choice_value => $choice_label) {        if (! empty($class)) {            echo '<div class="' . $class . '">';        }        $html_field_id = $html_field_name . '_' . $choice_value;        echo '<input type="radio" name="' . $html_field_name . '" id="'            . $html_field_id . '" value="' . htmlspecialchars($choice_value) . '"';        if ($choice_value == $checked_choice) {            echo ' checked="checked"';        }        echo ' />' . "\n";        echo '<label for="' . $html_field_id . '">'            . ($escape_label ? htmlspecialchars($choice_label)  : $choice_label)            . '</label>';        if ($line_break) {            echo '<br />';        }        if (! empty($class)) {            echo '</div>';        }        echo "\n";    }}/** * Generates and returns an HTML dropdown * * @param string $select_name   name for the select element * @param array  $choices       choices values * @param string $active_choice the choice to select by default * @param string $id            id of the select element; can be different in case *                              the dropdown is present more than once on the page * * @return string * * @todo    support titles */function PMA_generate_html_dropdown($select_name, $choices, $active_choice, $id){    $result = '<select name="' . htmlspecialchars($select_name) . '" id="'        . htmlspecialchars($id) . '">';    foreach ($choices as $one_choice_value => $one_choice_label) {        $result .= '<option value="' . htmlspecialchars($one_choice_value) . '"';        if ($one_choice_value == $active_choice) {            $result .= ' selected="selected"';        }        $result .= '>' . htmlspecialchars($one_choice_label) . '</option>';    }    $result .= '</select>';    return $result;}/** * Generates a slider effect (jQjuery) * Takes care of generating the initial <div> and the link * controlling the slider; you have to generate the </div> yourself * after the sliding section. * * @param string $id      the id of the <div> on which to apply the effect * @param string $message the message to show as a link */function PMA_generate_slider_effect($id, $message){    if ($GLOBALS['cfg']['InitialSlidersState'] == 'disabled') {        echo '<div id="' . $id . '">';        return;    }    /**     * Bad hack on the next line. document.write() conflicts with jQuery, hence,     * opening the <div> with PHP itself instead of JavaScript.     *     * @todo find a better solution that uses $.append(), the recommended method     * maybe by using an additional param, the id of the div to append to     */    ?><div id="<?php echo $id; ?>" <?php echo $GLOBALS['cfg']['InitialSlidersState'] == 'closed' ? ' style="display: none; overflow:auto;"' : ''; ?> class="pma_auto_slider" title="<?php echo htmlspecialchars($message); ?>">    <?php}/** * Creates an AJAX sliding toggle button * (or and equivalent form when AJAX is disabled) * * @param string $action      The URL for the request to be executed * @param string $select_name The name for the dropdown box * @param array  $options     An array of options (see rte_footer.lib.php) * @param string $callback    A JS snippet to execute when the request is *                            successfully processed * * @return   string   HTML code for the toggle button */function PMA_toggleButton($action, $select_name, $options, $callback){    // Do the logic first    $link_on = "$action&amp;$select_name=" . urlencode($options[1]['value']);    $link_off = "$action&amp;$select_name=" . urlencode($options[0]['value']);    if ($options[1]['selected'] == true) {        $state = 'on';    } else if ($options[0]['selected'] == true) {        $state = 'off';    } else {        $state = 'on';    }    $selected1 = '';    $selected0 = '';    if ($options[1]['selected'] == true) {        $selected1 = " selected='selected'";    } else if ($options[0]['selected'] == true) {        $selected0 = " selected='selected'";    }    // Generate output    $retval  = "<!-- TOGGLE START -->\n";    if ($GLOBALS['cfg']['AjaxEnable'] && is_readable($_SESSION['PMA_Theme']->getImgPath() . 'toggle-ltr.png')) {        $retval .= "<noscript>\n";    }    $retval .= "<div class='wrapper'>\n";    $retval .= "    <form action='$action' method='post'>\n";    $retval .= "        <select name='$select_name'>\n";    $retval .= "            <option value='{$options[1]['value']}'$selected1>";    $retval .= "                {$options[1]['label']}\n";    $retval .= "            </option>\n";    $retval .= "            <option value='{$options[0]['value']}'$selected0>";    $retval .= "                {$options[0]['label']}\n";    $retval .= "            </option>\n";    $retval .= "        </select>\n";    $retval .= "        <input type='submit' value='" . __('Change') . "'/>\n";    $retval .= "    </form>\n";    $retval .= "</div>\n";    if ($GLOBALS['cfg']['AjaxEnable'] && is_readable($_SESSION['PMA_Theme']->getImgPath() . 'toggle-ltr.png')) {        $retval .= "</noscript>\n";        $retval .= "<div class='wrapper toggleAjax hide'>\n";        $retval .= "    <div class='toggleButton'>\n";        $retval .= "        <div title='" . __('Click to toggle') . "' class='container $state'>\n";        $retval .= "            <img src='{$GLOBALS['pmaThemeImage']}toggle-{$GLOBALS['text_dir']}.png'\n";        $retval .= "                 alt='' />\n";        $retval .= "            <table cellspacing='0' cellpadding='0'><tr>\n";        $retval .= "                <tbody>\n";        $retval .= "                <td class='toggleOn'>\n";        $retval .= "                    <span class='hide'>$link_on</span>\n";        $retval .= "                    <div>";        $retval .= str_replace(' ', '&nbsp;', $options[1]['label']) . "</div>\n";        $retval .= "                </td>\n";        $retval .= "                <td><div>&nbsp;</div></td>\n";        $retval .= "                <td class='toggleOff'>\n";        $retval .= "                    <span class='hide'>$link_off</span>\n";        $retval .= "                    <div>";        $retval .= str_replace(' ', '&nbsp;', $options[0]['label']) . "</div>\n";        $retval .= "                    </div>\n";        $retval .= "                </tbody>\n";        $retval .= "            </tr></table>\n";        $retval .= "            <span class='hide callback'>$callback</span>\n";        $retval .= "            <span class='hide text_direction'>{$GLOBALS['text_dir']}</span>\n";        $retval .= "        </div>\n";        $retval .= "    </div>\n";        $retval .= "</div>\n";    }    $retval .= "<!-- TOGGLE END -->";    return $retval;} // end PMA_toggleButton()/** * Clears cache content which needs to be refreshed on user change. * * @return nothing */function PMA_clearUserCache(){    PMA_cacheUnset('is_superuser', true);}/** * Verifies if something is cached in the session * * @param string   $var    variable name * @param int|true $server server * * @return boolean */function PMA_cacheExists($var, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    return isset($_SESSION['cache']['server_' . $server][$var]);}/** * Gets cached information from the session * * @param string   $var    varibale name * @param int|true $server server * * @return mixed */function PMA_cacheGet($var, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    if (isset($_SESSION['cache']['server_' . $server][$var])) {        return $_SESSION['cache']['server_' . $server][$var];    } else {        return null;    }}/** * Caches information in the session * * @param string   $var    variable name * @param mixed    $val    value * @param int|true $server server * * @return mixed */function PMA_cacheSet($var, $val = null, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    $_SESSION['cache']['server_' . $server][$var] = $val;}/** * Removes cached information from the session * * @param string   $var    variable name * @param int|true $server server * * @return nothing */function PMA_cacheUnset($var, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    unset($_SESSION['cache']['server_' . $server][$var]);}/** * Converts a bit value to printable format; * in MySQL a BIT field can be from 1 to 64 bits so we need this * function because in PHP, decbin() supports only 32 bits * * @param numeric $value  coming from a BIT field * @param integer $length length * * @return  string  the printable value */function PMA_printable_bit_value($value, $length){    $printable = '';    for ($i = 0, $len_ceiled = ceil($length / 8); $i < $len_ceiled; $i++) {        $printable .= sprintf('%08d', decbin(ord(substr($value, $i, 1))));    }    $printable = substr($printable, -$length);    return $printable;}/** * Verifies whether the value contains a non-printable character * * @param string $value value * * @return  boolean */function PMA_contains_nonprintable_ascii($value){    return preg_match('@[^[:print:]]@', $value);}/** * Converts a BIT type default value * for example, b'010' becomes 010 * * @param string $bit_default_value value * * @return  string the converted value */function PMA_convert_bit_default_value($bit_default_value){    return strtr($bit_default_value, array("b" => "", "'" => ""));}/** * Extracts the various parts from a field type spec * * @param string $fieldspec Field specification * * @return  array associative array containing type, spec_in_brackets *          and possibly enum_set_values (another array) */function PMA_extractFieldSpec($fieldspec){    $first_bracket_pos = strpos($fieldspec, '(');    if ($first_bracket_pos) {        $spec_in_brackets = chop(            substr(                $fieldspec,                $first_bracket_pos + 1,                (strrpos($fieldspec, ')') - $first_bracket_pos - 1)            )        );        // convert to lowercase just to be sure        $type = strtolower(chop(substr($fieldspec, 0, $first_bracket_pos)));    } else {        $type = strtolower($fieldspec);        $spec_in_brackets = '';    }    if ('enum' == $type || 'set' == $type) {        // Define our working vars        $enum_set_values = array();        $working = "";        $in_string = false;        $index = 0;        // While there is another character to process        while (isset($fieldspec[$index])) {            // Grab the char to look at            $char = $fieldspec[$index];            // If it is a single quote, needs to be handled specially            if ($char == "'") {                // If we are not currently in a string, begin one                if (! $in_string) {                    $in_string = true;                    $working = "";                } else {                    // Otherwise, it may be either an end of a string,                    // or a 'double quote' which can be handled as-is                    // Check out the next character (if possible)                    $has_next = isset($fieldspec[$index + 1]);                    $next = $has_next ? $fieldspec[$index + 1] : null;                    //If we have reached the end of our 'working' string (because                    //there are no more chars,or the next char is not another quote)                    if (! $has_next || $next != "'") {                        $enum_set_values[] = $working;                        $in_string = false;                    } elseif ($next == "'") {                        // Otherwise, this is a 'double quote',                        // and can be added to the working string                        $working .= "'";                        // Skip the next char; we already know what it is                        $index++;                    }                }            } elseif ('\\' == $char                && isset($fieldspec[$index + 1])                && "'" == $fieldspec[$index + 1]            ) {                // escaping of a quote?                $working .= "'";                $index++;            } else {                // Otherwise, add it to our working string like normal                $working .= $char;            }            // Increment character index            $index++;        } // end while        $printtype = $type . '(' .  str_replace("','", "', '", $spec_in_brackets) . ')';        $binary = false;        $unsigned = false;        $zerofill = false;    } else {        $enum_set_values = array();        /* Create printable type name */        $printtype = strtolower($fieldspec);        // Strip the "BINARY" attribute, except if we find "BINARY(" because        // this would be a BINARY or VARBINARY field type;        // by the way, a BLOB should not show the BINARY attribute        // because this is not accepted in MySQL syntax.        if (preg_match('@binary@', $printtype) && ! preg_match('@binary[\(]@', $printtype)) {            $printtype = preg_replace('@binary@', '', $printtype);            $binary = true;        } else {            $binary = false;        }        $printtype = preg_replace('@zerofill@', '', $printtype, -1, $zerofill_cnt);        $zerofill = ($zerofill_cnt > 0);        $printtype = preg_replace('@unsigned@', '', $printtype, -1, $unsigned_cnt);        $unsigned = ($unsigned_cnt > 0);        $printtype = trim($printtype);    }    $attribute     = ' ';    if ($binary) {        $attribute = 'BINARY';    }    if ($unsigned) {        $attribute = 'UNSIGNED';    }    if ($zerofill) {        $attribute = 'UNSIGNED ZEROFILL';    }    return array(        'type' => $type,        'spec_in_brackets' => $spec_in_brackets,        'enum_set_values'  => $enum_set_values,        'print_type' => $printtype,        'binary' => $binary,        'unsigned' => $unsigned,        'zerofill' => $zerofill,        'attribute' => $attribute,    );}/** * Verifies if this table's engine supports foreign keys * * @param string $engine engine * * @return  boolean */function PMA_foreignkey_supported($engine){    $engine = strtoupper($engine);    if ('INNODB' == $engine || 'PBXT' == $engine) {        return true;    } else {        return false;    }}/** * Replaces some characters by a displayable equivalent * * @param string $content content * * @return  string the content with characters replaced */function PMA_replace_binary_contents($content){    $result = str_replace("\x00", '\0', $content);    $result = str_replace("\x08", '\b', $result);    $result = str_replace("\x0a", '\n', $result);    $result = str_replace("\x0d", '\r', $result);    $result = str_replace("\x1a", '\Z', $result);    return $result;}/** * Converts GIS data to Well Known Text format * * @param binary $data        GIS data * @param bool   $includeSRID Add SRID to the WKT * * @return GIS data in Well Know Text format */function PMA_asWKT($data, $includeSRID = false){    // Convert to WKT format    $hex = bin2hex($data);    $wktsql     = "SELECT ASTEXT(x'" . $hex . "')";    if ($includeSRID) {        $wktsql .= ", SRID(x'" . $hex . "')";    }    $wktresult  = PMA_DBI_try_query($wktsql, null, PMA_DBI_QUERY_STORE);    $wktarr     = PMA_DBI_fetch_row($wktresult, 0);    $wktval     = $wktarr[0];    if ($includeSRID) {        $srid = $wktarr[1];        $wktval = "'" . $wktval . "'," . $srid;    }    @PMA_DBI_free_result($wktresult);    return $wktval;}/** * If the string starts with a \r\n pair (0x0d0a) add an extra \n * * @param string $string string * * @return  string with the chars replaced */function PMA_duplicateFirstNewline($string){    $first_occurence = strpos($string, "\r\n");    if ($first_occurence === 0) {        $string = "\n".$string;    }    return $string;}/** * Get the action word corresponding to a script name * in order to display it as a title in navigation panel * * @param string $target a valid value for $cfg['LeftDefaultTabTable'], *                       $cfg['DefaultTabTable'] or $cfg['DefaultTabDatabase'] * * @return array */function PMA_getTitleForTarget($target){    $mapping = array(        // Values for $cfg['DefaultTabTable']        'tbl_structure.php' =>  __('Structure'),        'tbl_sql.php' => __('SQL'),        'tbl_select.php' =>__('Search'),        'tbl_change.php' =>__('Insert'),        'sql.php' => __('Browse'),        // Values for $cfg['DefaultTabDatabase']        'db_structure.php' => __('Structure'),        'db_sql.php' => __('SQL'),        'db_search.php' => __('Search'),        'db_operations.php' => __('Operations'),    );    return $mapping[$target];}/** * Formats user string, expanding @VARIABLES@, accepting strftime format string. * * @param string   $string  Text where to do expansion. * @param function $escape  Function to call for escaping variable values. * @param array    $updates Array with overrides for default parameters *                 (obtained from GLOBALS). * * @return string */function PMA_expandUserString($string, $escape = null, $updates = array()){    /* Content */    $vars['http_host'] = PMA_getenv('HTTP_HOST') ? PMA_getenv('HTTP_HOST') : '';    $vars['server_name'] = $GLOBALS['cfg']['Server']['host'];    $vars['server_verbose'] = $GLOBALS['cfg']['Server']['verbose'];    $vars['server_verbose_or_name'] = ! empty($GLOBALS['cfg']['Server']['verbose'])        ? $GLOBALS['cfg']['Server']['verbose']        : $GLOBALS['cfg']['Server']['host'];    $vars['database'] = $GLOBALS['db'];    $vars['table'] = $GLOBALS['table'];    $vars['phpmyadmin_version'] = 'phpMyAdmin ' . PMA_VERSION;    /* Update forced variables */    foreach ($updates as $key => $val) {        $vars[$key] = $val;    }    /* Replacement mapping */    /*     * The __VAR__ ones are for backward compatibility, because user     * might still have it in cookies.     */    $replace = array(        '@HTTP_HOST@' => $vars['http_host'],        '@SERVER@' => $vars['server_name'],        '__SERVER__' => $vars['server_name'],        '@VERBOSE@' => $vars['server_verbose'],        '@VSERVER@' => $vars['server_verbose_or_name'],        '@DATABASE@' => $vars['database'],        '__DB__' => $vars['database'],        '@TABLE@' => $vars['table'],        '__TABLE__' => $vars['table'],        '@PHPMYADMIN@' => $vars['phpmyadmin_version'],        );    /* Optional escaping */    if (!is_null($escape)) {        foreach ($replace as $key => $val) {            $replace[$key] = $escape($val);        }    }    /* Backward compatibility in 3.5.x */    if (strpos($string, '@FIELDS@') !== false) {        $string = strtr($string, array('@FIELDS@' => '@COLUMNS@'));    }    /* Fetch columns list if required */    if (strpos($string, '@COLUMNS@') !== false) {        $columns_list = PMA_DBI_get_columns($GLOBALS['db'], $GLOBALS['table']);        $column_names = array();        foreach ($columns_list as $column) {            if (! is_null($escape)) {                $column_names[] = $escape($column['Field']);            } else {                $column_names[] = $field['Field'];            }        }        $replace['@COLUMNS@'] = implode(',', $column_names);    }    /* Do the replacement */    return strtr(strftime($string), $replace);}/** * function that generates a json output for an ajax request and ends script * execution * * @param PMA_Message|string $message    message string containing the *                                       html of the message * @param bool               $success    success whether the ajax request *                                       was successfull * @param array              $extra_data extra data  optional - *                                       any other data as part of the json request * * @return nothing */function PMA_ajaxResponse($message, $success = true, $extra_data = array()){    $response = array();    if ( $success == true ) {        $response['success'] = true;        if ($message instanceof PMA_Message) {            $response['message'] = $message->getDisplay();        } else {            $response['message'] = $message;        }    } else {        $response['success'] = false;        if ($message instanceof PMA_Message) {            $response['error'] = $message->getDisplay();        } else {            $response['error'] = $message;        }    }    // If extra_data has been provided, append it to the response array    if ( ! empty($extra_data) && count($extra_data) > 0 ) {        $response = array_merge($response, $extra_data);    }    // Set the Content-Type header to JSON so that jQuery parses the    // response correctly.    //    // At this point, other headers might have been sent;    // even if $GLOBALS['is_header_sent'] is true,    // we have to send these additional headers.    header('Cache-Control: no-cache');    header("Content-Type: application/json");    echo json_encode($response);    if (!defined('TESTSUITE'))        exit;}/** * Display the form used to browse anywhere on the local server for a file to import * * @param string $max_upload_size maximum upload size * * @return nothing */function PMA_browseUploadFile($max_upload_size){    echo '<label for="radio_import_file">' . __("Browse your computer:") . '</label>';    echo '<div id="upload_form_status" style="display: none;"></div>';    echo '<div id="upload_form_status_info" style="display: none;"></div>';    echo '<input type="file" name="import_file" id="input_import_file" />';    echo PMA_displayMaximumUploadSize($max_upload_size) . "\n";    // some browsers should respect this :)    echo PMA_generateHiddenMaxFileSize($max_upload_size) . "\n";}/** * Display the form used to select a file to import from the server upload directory * * @param array  $import_list array of import types * @param string $uploaddir   upload directory * * @return nothing */function PMA_selectUploadFile($import_list, $uploaddir){    echo '<label for="radio_local_import_file">' . sprintf(__("Select from the web server upload directory <b>%s</b>:"), htmlspecialchars(PMA_userDir($uploaddir))) . '</label>';    $extensions = '';    foreach ($import_list as $key => $val) {        if (!empty($extensions)) {            $extensions .= '|';        }        $extensions .= $val['extension'];    }    $matcher = '@\.(' . $extensions . ')(\.('        . PMA_supportedDecompressions() . '))?$@';    $active = (isset($timeout_passed) && $timeout_passed && isset($local_import_file))        ? $local_import_file        : '';    $files = PMA_getFileSelectOptions(        PMA_userDir($uploaddir),        $matcher,        $active    );    if ($files === false) {        PMA_Message::error(            __('The directory you set for upload work cannot be reached')        )->display();    } elseif (!empty($files)) {        echo "\n";        echo '    <select style="margin: 5px" size="1" name="local_import_file" id="select_local_import_file">' . "\n";        echo '        <option value="">&nbsp;</option>' . "\n";        echo $files;        echo '    </select>' . "\n";    } elseif (empty ($files)) {        echo '<i>' . __('There are no files to upload') . '</i>';    }}/** * Build titles and icons for action links * * @return   array   the action titles */function PMA_buildActionTitles(){    $titles = array();    $titles['Browse']     = PMA_getIcon('b_browse.png', __('Browse'));    $titles['NoBrowse']   = PMA_getIcon('bd_browse.png', __('Browse'));    $titles['Search']     = PMA_getIcon('b_select.png', __('Search'));    $titles['NoSearch']   = PMA_getIcon('bd_select.png', __('Search'));    $titles['Insert']     = PMA_getIcon('b_insrow.png', __('Insert'));    $titles['NoInsert']   = PMA_getIcon('bd_insrow.png', __('Insert'));    $titles['Structure']  = PMA_getIcon('b_props.png', __('Structure'));    $titles['Drop']       = PMA_getIcon('b_drop.png', __('Drop'));    $titles['NoDrop']     = PMA_getIcon('bd_drop.png', __('Drop'));    $titles['Empty']      = PMA_getIcon('b_empty.png', __('Empty'));    $titles['NoEmpty']    = PMA_getIcon('bd_empty.png', __('Empty'));    $titles['Edit']       = PMA_getIcon('b_edit.png', __('Edit'));    $titles['NoEdit']     = PMA_getIcon('bd_edit.png', __('Edit'));    $titles['Export']     = PMA_getIcon('b_export.png', __('Export'));    $titles['NoExport']   = PMA_getIcon('bd_export.png', __('Export'));    $titles['Execute']    = PMA_getIcon('b_nextpage.png', __('Execute'));    $titles['NoExecute']  = PMA_getIcon('bd_nextpage.png', __('Execute'));    return $titles;}/** * This function processes the datatypes supported by the DB, as specified in * $cfg['ColumnTypes'] and either returns an array (useful for quickly checking * if a datatype is supported) or an HTML snippet that creates a drop-down list. * * @param bool   $html     Whether to generate an html snippet or an array * @param string $selected The value to mark as selected in HTML mode * * @return  mixed   An HTML snippet or an array of datatypes. * */function PMA_getSupportedDatatypes($html = false, $selected = ''){    global $cfg;    if ($html) {        // NOTE: the SELECT tag in not included in this snippet.        $retval = '';        foreach ($cfg['ColumnTypes'] as $key => $value) {            if (is_array($value)) {                $retval .= "<optgroup label='" . htmlspecialchars($key) . "'>";                foreach ($value as $subvalue) {                    if ($subvalue == $selected) {                        $retval .= "<option selected='selected'>";                        $retval .= $subvalue;                        $retval .= "</option>";                    } else if ($subvalue === '-') {                        $retval .= "<option disabled='disabled'>";                        $retval .= $subvalue;                        $retval .= "</option>";                    } else {                        $retval .= "<option>$subvalue</option>";                    }                }                $retval .= '</optgroup>';            } else {                if ($selected == $value) {                    $retval .= "<option selected='selected'>$value</option>";                } else {                    $retval .= "<option>$value</option>";                }            }        }    } else {        $retval = array();        foreach ($cfg['ColumnTypes'] as $value) {            if (is_array($value)) {                foreach ($value as $subvalue) {                    if ($subvalue !== '-') {                        $retval[] = $subvalue;                    }                }            } else {                if ($value !== '-') {                    $retval[] = $value;                }            }        }    }    return $retval;} // end PMA_getSupportedDatatypes()/** * Returns a list of datatypes that are not (yet) handled by PMA. * Used by: tbl_change.php and libraries/db_routines.inc.php * * @return   array   list of datatypes */function PMA_unsupportedDatatypes(){    $no_support_types = array();    return $no_support_types;}/** * Return GIS data types * * @param bool $upper_case whether to return values in upper case * * @return array GIS data types */function PMA_getGISDatatypes($upper_case = false){    $gis_data_types = array(        'geometry',        'point',        'linestring',        'polygon',        'multipoint',        'multilinestring',        'multipolygon',        'geometrycollection'    );    if ($upper_case) {        for ($i = 0; $i < count($gis_data_types); $i++) {            $gis_data_types[$i] = strtoupper($gis_data_types[$i]);        }    }    return $gis_data_types;}/** * Generates GIS data based on the string passed. * * @param string $gis_string GIS string * * @return GIS data enclosed in 'GeomFromText' function */function PMA_createGISData($gis_string){    $gis_string =  trim($gis_string);    $geom_types = '(POINT|MULTIPOINT|LINESTRING|MULTILINESTRING|'        . 'POLYGON|MULTIPOLYGON|GEOMETRYCOLLECTION)';    if (preg_match("/^'" . $geom_types . "\(.*\)',[0-9]*$/i", $gis_string)) {        return 'GeomFromText(' . $gis_string . ')';    } elseif (preg_match("/^" . $geom_types . "\(.*\)$/i", $gis_string)) {        return "GeomFromText('" . $gis_string . "')";    } else {        return $gis_string;    }}/** * Returns the names and details of the functions * that can be applied on geometry data typess. * * @param string $geom_type if provided the output is limited to the functions *                          that are applicable to the provided geometry type. * @param bool   $binary    if set to false functions that take two geometries *                          as arguments will not be included. * @param bool   $display   if set to true seperators will be added to the *                          output array. * * @return array names and details of the functions that can be applied on *               geometry data typess. */function PMA_getGISFunctions($geom_type = null, $binary = true, $display = false){    $funcs = array();    if ($display) {        $funcs[] = array('display' => ' ');    }    // Unary functions common to all geomety types    $funcs['Dimension']    = array('params' => 1, 'type' => 'int');    $funcs['Envelope']     = array('params' => 1, 'type' => 'Polygon');    $funcs['GeometryType'] = array('params' => 1, 'type' => 'text');    $funcs['SRID']         = array('params' => 1, 'type' => 'int');    $funcs['IsEmpty']      = array('params' => 1, 'type' => 'int');    $funcs['IsSimple']     = array('params' => 1, 'type' => 'int');    $geom_type = trim(strtolower($geom_type));    if ($display && $geom_type != 'geometry' && $geom_type != 'multipoint') {        $funcs[] = array('display' => '--------');    }    // Unary functions that are specific to each geomety type    if ($geom_type == 'point') {        $funcs['X'] = array('params' => 1, 'type' => 'float');        $funcs['Y'] = array('params' => 1, 'type' => 'float');    } elseif ($geom_type == 'multipoint') {        // no fucntions here    } elseif ($geom_type == 'linestring') {        $funcs['EndPoint']   = array('params' => 1, 'type' => 'point');        $funcs['GLength']    = array('params' => 1, 'type' => 'float');        $funcs['NumPoints']  = array('params' => 1, 'type' => 'int');        $funcs['StartPoint'] = array('params' => 1, 'type' => 'point');        $funcs['IsRing']     = array('params' => 1, 'type' => 'int');    } elseif ($geom_type == 'multilinestring') {        $funcs['GLength']  = array('params' => 1, 'type' => 'float');        $funcs['IsClosed'] = array('params' => 1, 'type' => 'int');    } elseif ($geom_type == 'polygon') {        $funcs['Area']             = array('params' => 1, 'type' => 'float');        $funcs['ExteriorRing']     = array('params' => 1, 'type' => 'linestring');        $funcs['NumInteriorRings'] = array('params' => 1, 'type' => 'int');    } elseif ($geom_type == 'multipolygon') {        $funcs['Area']     = array('params' => 1, 'type' => 'float');        $funcs['Centroid'] = array('params' => 1, 'type' => 'point');        // Not yet implemented in MySQL        //$funcs['PointOnSurface'] = array('params' => 1, 'type' => 'point');    } elseif ($geom_type == 'geometrycollection') {        $funcs['NumGeometries'] = array('params' => 1, 'type' => 'int');    }    // If we are asked for binary functions as well    if ($binary) {        // section seperator        if ($display) {            $funcs[] = array('display' => '--------');        }        if (PMA_MYSQL_INT_VERSION < 50601) {            $funcs['Crosses']    = array('params' => 2, 'type' => 'int');            $funcs['Contains']   = array('params' => 2, 'type' => 'int');            $funcs['Disjoint']   = array('params' => 2, 'type' => 'int');            $funcs['Equals']     = array('params' => 2, 'type' => 'int');            $funcs['Intersects'] = array('params' => 2, 'type' => 'int');            $funcs['Overlaps']   = array('params' => 2, 'type' => 'int');            $funcs['Touches']    = array('params' => 2, 'type' => 'int');            $funcs['Within']     = array('params' => 2, 'type' => 'int');        } else {            // If MySQl version is greaeter than or equal 5.6.1, use the ST_ prefix.            $funcs['ST_Crosses']    = array('params' => 2, 'type' => 'int');            $funcs['ST_Contains']   = array('params' => 2, 'type' => 'int');            $funcs['ST_Disjoint']   = array('params' => 2, 'type' => 'int');            $funcs['ST_Equals']     = array('params' => 2, 'type' => 'int');            $funcs['ST_Intersects'] = array('params' => 2, 'type' => 'int');            $funcs['ST_Overlaps']   = array('params' => 2, 'type' => 'int');            $funcs['ST_Touches']    = array('params' => 2, 'type' => 'int');            $funcs['ST_Within']     = array('params' => 2, 'type' => 'int');        }        if ($display) {            $funcs[] = array('display' => '--------');        }        // Minimum bounding rectangle functions        $funcs['MBRContains']   = array('params' => 2, 'type' => 'int');        $funcs['MBRDisjoint']   = array('params' => 2, 'type' => 'int');        $funcs['MBREquals']     = array('params' => 2, 'type' => 'int');        $funcs['MBRIntersects'] = array('params' => 2, 'type' => 'int');        $funcs['MBROverlaps']   = array('params' => 2, 'type' => 'int');        $funcs['MBRTouches']    = array('params' => 2, 'type' => 'int');        $funcs['MBRWithin']     = array('params' => 2, 'type' => 'int');    }    return $funcs;}/** * Creates a dropdown box with MySQL functions for a particular column. * * @param array $field       Data about the column for which *                           to generate the dropdown * @param bool  $insert_mode Whether the operation is 'insert' * * @global   array    $cfg            PMA configuration * @global   array    $analyzed_sql   Analyzed SQL query * @global   mixed    $data           (null/string) FIXME: what is this for? * * @return   string   An HTML snippet of a dropdown list with function *                    names appropriate for the requested column. */function PMA_getFunctionsForField($field, $insert_mode){    global $cfg, $analyzed_sql, $data;    $selected = '';    // Find the current type in the RestrictColumnTypes. Will result in 'FUNC_CHAR'    // or something similar. Then directly look up the entry in the    // RestrictFunctions array, which'll then reveal the available dropdown options    if (isset($cfg['RestrictColumnTypes'][strtoupper($field['True_Type'])])        && isset($cfg['RestrictFunctions'][$cfg['RestrictColumnTypes'][strtoupper($field['True_Type'])]])    ) {        $current_func_type  = $cfg['RestrictColumnTypes'][strtoupper($field['True_Type'])];        $dropdown           = $cfg['RestrictFunctions'][$current_func_type];        $default_function   = $cfg['DefaultFunctions'][$current_func_type];    } else {        $dropdown = array();        $default_function   = '';    }    $dropdown_built = array();    $op_spacing_needed = false;    // what function defined as default?    // for the first timestamp we don't set the default function    // if there is a default value for the timestamp    // (not including CURRENT_TIMESTAMP)    // and the column does not have the    // ON UPDATE DEFAULT TIMESTAMP attribute.    if ($field['True_Type'] == 'timestamp'        && empty($field['Default'])        && empty($data)        && ! isset($analyzed_sql[0]['create_table_fields'][$field['Field']]['on_update_current_timestamp'])    ) {        $default_function = $cfg['DefaultFunctions']['first_timestamp'];    }    // For primary keys of type char(36) or varchar(36) UUID if the default function    // Only applies to insert mode, as it would silently trash data on updates.    if ($insert_mode        && $field['Key'] == 'PRI'        && ($field['Type'] == 'char(36)' || $field['Type'] == 'varchar(36)')    ) {         $default_function = $cfg['DefaultFunctions']['FUNC_UUID'];    }    // this is set only when appropriate and is always true    if (isset($field['display_binary_as_hex'])) {        $default_function = 'UNHEX';    }    // Create the output    $retval = '                <option></option>' . "\n";    // loop on the dropdown array and print all available options for that field.    foreach ($dropdown as $each_dropdown) {        $retval .= '                ';        $retval .= '<option';        if ($default_function === $each_dropdown) {            $retval .= ' selected="selected"';        }        $retval .= '>' . $each_dropdown . '</option>' . "\n";        $dropdown_built[$each_dropdown] = 'true';        $op_spacing_needed = true;    }    // For compatibility's sake, do not let out all other functions. Instead    // print a separator (blank) and then show ALL functions which weren't shown    // yet.    $cnt_functions = count($cfg['Functions']);    for ($j = 0; $j < $cnt_functions; $j++) {        if (! isset($dropdown_built[$cfg['Functions'][$j]])            || $dropdown_built[$cfg['Functions'][$j]] != 'true'        ) {            // Is current function defined as default?            $selected = ($field['first_timestamp'] && $cfg['Functions'][$j] == $cfg['DefaultFunctions']['first_timestamp'])                        || (! $field['first_timestamp'] && $cfg['Functions'][$j] == $default_function)                      ? ' selected="selected"'                      : '';            if ($op_spacing_needed == true) {                $retval .= '                ';                $retval .= '<option value="">--------</option>' . "\n";                $op_spacing_needed = false;            }            $retval .= '                ';            $retval .= '<option' . $selected . '>' . $cfg['Functions'][$j]                . '</option>' . "\n";        }    } // end for    return $retval;} // end PMA_getFunctionsForField()/** * Checks if the current user has a specific privilege and returns true if the * user indeed has that privilege or false if (s)he doesn't. This function must * only be used for features that are available since MySQL 5, because it * relies on the INFORMATION_SCHEMA database to be present. * * Example:   PMA_currentUserHasPrivilege('CREATE ROUTINE', 'mydb'); *            // Checks if the currently logged in user has the global *            // 'CREATE ROUTINE' privilege or, if not, checks if the *            // user has this privilege on database 'mydb'. * * @param string $priv The privilege to check * @param mixed  $db   null, to only check global privileges *                     string, db name where to also check for privileges * @param mixed  $tbl  null, to only check global privileges *                     string, db name where to also check for privileges * * @return bool */function PMA_currentUserHasPrivilege($priv, $db = null, $tbl = null){    // Get the username for the current user in the format    // required to use in the information schema database.    $user = PMA_DBI_fetch_value("SELECT CURRENT_USER();");    if ($user === false) {        return false;    }    $user = explode('@', $user);    $username  = "''";    $username .= str_replace("'", "''", $user[0]);    $username .= "''@''";    $username .= str_replace("'", "''", $user[1]);    $username .= "''";    // Prepage the query    $query = "SELECT `PRIVILEGE_TYPE` FROM `INFORMATION_SCHEMA`.`%s` "           . "WHERE GRANTEE='%s' AND PRIVILEGE_TYPE='%s'";    // Check global privileges first.    if (PMA_DBI_fetch_value(        sprintf(            $query,            'USER_PRIVILEGES',            $username,            $priv        )    )    ) {        return true;    }    // If a database name was provided and user does not have the    // required global privilege, try database-wise permissions.    if ($db !== null) {        $query .= " AND TABLE_SCHEMA='%s'";        if (PMA_DBI_fetch_value(            sprintf(                $query,                'SCHEMA_PRIVILEGES',                $username,                $priv,                PMA_sqlAddSlashes($db)            )        )        ) {            return true;        }    } else {        // There was no database name provided and the user        // does not have the correct global privilege.        return false;    }    // If a table name was also provided and we still didn't    // find any valid privileges, try table-wise privileges.    if ($tbl !== null) {        $query .= " AND TABLE_NAME='%s'";        if ($retval = PMA_DBI_fetch_value(            sprintf(                $query,                'TABLE_PRIVILEGES',                $username,                $priv,                PMA_sqlAddSlashes($db),                PMA_sqlAddSlashes($tbl)            )        )        ) {            return true;        }    }    // If we reached this point, the user does not    // have even valid table-wise privileges.    return false;}/** * Returns server type for current connection * * Known types are: Drizzle, MariaDB and MySQL (default) * * @return string */function PMA_getServerType(){    $server_type = 'MySQL';    if (PMA_DRIZZLE) {        $server_type = 'Drizzle';    } else if (strpos(PMA_MYSQL_STR_VERSION, 'mariadb') !== false) {        $server_type = 'MariaDB';    } else if (stripos(PMA_MYSQL_VERSION_COMMENT, 'percona') !== false) {        $server_type = 'Percona Server';    }    return $server_type;}/** * Analyzes the limit clause and return the start and length attributes of it. * * @param string $limit_clause limit clause * * @return array Start and length attributes of the limit clause */function PMA_analyzeLimitClause($limit_clause){    $start_and_length = explode(',', str_ireplace('LIMIT', '', $limit_clause));    return array(        'start'  => trim($start_and_length[0]),        'length' => trim($start_and_length[1])    );}/** * Outputs HTML code for print button. * * @return nothing */function PMA_printButton(){    echo '<p class="print_ignore">';    echo '<input type="button" id="print" value="' . __('Print') . '" />';    echo '</p>';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';require_once './libraries/ob.lib.php';PMA_outBufferPre();// Check parametersPMA_checkParameters(array('db', 'full_sql_query'));// For re-usability, moved http-headers// to a separate file. It can now be included by libraries/header.inc.php,// querywindow.php.require_once './libraries/header_http.inc.php';/** * Sends the beginning of the html page then returns to the calling script */// Defines the cell alignment values depending on text directionif ($text_dir == 'ltr') {    $cell_align_left  = 'left';    $cell_align_right = 'right';} else {    $cell_align_left  = 'right';    $cell_align_right = 'left';}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $available_languages[$lang][1]; ?>" lang="<?php echo $available_languages[$lang][1]; ?>" dir="<?php echo $text_dir; ?>"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><link rel="icon" href="./favicon.ico" type="image/x-icon" /><link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" /><title><?php echo __('SQL result'); ?> - phpMyAdmin <?php echo PMA_VERSION ?></title><link rel="stylesheet" type="text/css" href="phpmyadmin.css.php?<?php echo PMA_generate_common_url('', ''); ?>&amp;js_frame=print&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" /><?phprequire_once './libraries/header_scripts.inc.php';?></head><body bgcolor="#ffffff"><h1><?php echo __('SQL result'); ?></h1><p>    <strong><?php echo __('Host'); ?>:</strong> <?php echo $cfg['Server']['verbose'] ? $cfg['Server']['verbose'] : $cfg['Server']['host'] . ((!empty($cfg['Server']['port'])) ? ':' . $cfg['Server']['port'] : ''); ?><br />    <strong><?php echo __('Database'); ?>:</strong> <?php echo htmlspecialchars($db); ?><br />    <strong><?php echo __('Generation Time'); ?>:</strong> <?php echo PMA_localisedDate(); ?><br />    <strong><?php echo __('Generated by'); ?>:</strong> phpMyAdmin&nbsp;<?php echo PMA_VERSION; ?>&nbsp;/ MySQL&nbsp;<?php echo PMA_MYSQL_STR_VERSION; ?><br />    <strong><?php echo __('SQL query'); ?>:</strong> <?php echo htmlspecialchars($full_sql_query); ?>;    <?php if (isset($num_rows)) { ?><br />    <strong><?php echo __('Rows'); ?>:</strong> <?php echo $num_rows; ?>    <?php } ?></p><?php/** * Sets a variable to remember headers have been sent */$is_header_sent = true;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'import.js';/** * Gets tables informations and displays top links */require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_import.php&amp;back=tbl_import.php';require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';$import_type = 'table';require_once './libraries/display_import.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build OpenDocument Text dumps of tables * * @package PhpMyAdmin-Export * @subpackage ODT */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && !$plugin_param['single_table']) {        $hide_structure = true;    }    $plugin_list['odt'] = array(        'text' => __('Open Document Text'),        'extension' => 'odt',        'mime_type' => 'application/vnd.oasis.opendocument.text',        'force_file' => true,        'options' => array(), /* Filled later */        'options_text' => __('Options'),        );    /* what to dump (structure/data/both) */    $plugin_list['odt']['options'][]        = array('type' => 'begin_group', 'text' => __('Dump table') , 'name' => 'general_opts');    $plugin_list['odt']['options'][]        = array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data')));    $plugin_list['odt']['options'][] = array('type' => 'end_group');    /* Structure options */    if (!$hide_structure) {        $plugin_list['odt']['options'][]            = array('type' => 'begin_group', 'name' => 'structure', 'text' => __('Object creation options'), 'force' => 'data');        if (!empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['odt']['options'][]                = array('type' => 'bool', 'name' => 'relation', 'text' => __('Display foreign key relationships'));        }        $plugin_list['odt']['options'][]            = array('type' => 'bool', 'name' => 'comments', 'text' => __('Display comments'));        if (!empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['odt']['options'][]                = array('type' => 'bool', 'name' => 'mime', 'text' => __('Display MIME types'));        }        $plugin_list['odt']['options'][]            = array('type' => 'end_group');    }    /* Data */    $plugin_list['odt']['options'][]        = array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure');    $plugin_list['odt']['options'][]        = array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row'));    $plugin_list['odt']['options'][]        = array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:'));    $plugin_list['odt']['options'][]        = array('type' => 'end_group');} else {    $GLOBALS['odt_buffer'] = '';    include_once './libraries/opendocument.lib.php';    /**     * Outputs export footer     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportFooter()    {        $GLOBALS['odt_buffer'] .= '</office:text>'            . '</office:body>'            . '</office:document-content>';        if (! PMA_exportOutputHandler(PMA_createOpenDocument('application/vnd.oasis.opendocument.text', $GLOBALS['odt_buffer']))) {            return false;        }        return true;    }    /**     * Outputs export header     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportHeader()    {        $GLOBALS['odt_buffer'] .= '<?xml version="1.0" encoding="utf-8"?' . '>'            . '<office:document-content '. $GLOBALS['OpenDocumentNS'] . 'office:version="1.0">'            . '<office:body>'            . '<office:text>';        return true;    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="1" text:style-name="Heading_1" text:is-list-header="true">'            . __('Database') . ' ' . htmlspecialchars($db) . '</text:h>';        return true;    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in ODT format     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $what;        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        $fields_meta = PMA_DBI_get_fields_meta($result);        $field_flags = array();        for ($j = 0; $j < $fields_cnt; $j++) {            $field_flags[$j] = PMA_DBI_field_flags($result, $j);        }        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="2" text:style-name="Heading_2" text:is-list-header="true">'            . __('Dumping data for table') . ' ' . htmlspecialchars($table) . '</text:h>';        $GLOBALS['odt_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '_structure">';        $GLOBALS['odt_buffer'] .= '<table:table-column table:number-columns-repeated="' . $fields_cnt . '"/>';        // If required, get fields name at the first line        if (isset($GLOBALS[$what . '_columns'])) {            $GLOBALS['odt_buffer'] .= '<table:table-row>';            for ($i = 0; $i < $fields_cnt; $i++) {                $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                    . '<text:p>' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i))) . '</text:p>'                    . '</table:table-cell>';            } // end for            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $GLOBALS['odt_buffer'] .= '<table:table-row>';            for ($j = 0; $j < $fields_cnt; $j++) {                if (!isset($row[$j]) || is_null($row[$j])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($GLOBALS[$what . '_null']) . '</text:p>'                        . '</table:table-cell>';                // ignore BLOB                } elseif (stristr($field_flags[$j], 'BINARY')                        && $fields_meta[$j]->blob) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->numeric && $fields_meta[$j]->type != 'timestamp' && ! $fields_meta[$j]->blob) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="float" office:value="' . $row[$j] . '" >'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                }            } // end for            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end while        PMA_DBI_free_result($result);        $GLOBALS['odt_buffer'] .= '</table:table>';        return true;    }    /**     * Outputs table's structure     *     * @param string $db          database name     * @param string $table       table name     * @param string $crlf        the end of line sequence     * @param string $error_url   the url to go back in case of error     * @param bool   $do_relation whether to include relation comments     * @param bool   $do_comments whether to include the pmadb-style column comments     *                            as comments in the structure; this is deprecated     *                            but the parameter is left here because export.php     *                            calls PMA_exportStructure() also for other export     *                            types which use this parameter     * @param bool   $do_mime     whether to include mime comments     * @param bool   $dates       whether to include creation/update/check dates     * @param string $export_mode 'create_table', 'triggers', 'create_view', 'stand_in'     * @param string $export_type 'server', 'database', 'table'     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        /* Heading */        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="2" text:style-name="Heading_2" text:is-list-header="true">'            . __('Table structure for table') . ' ' . htmlspecialchars($table) . '</text:h>';        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && !empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $GLOBALS['odt_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '_data">';        $columns_cnt = 4;        if ($do_relation && $have_rel) {            $columns_cnt++;        }        if ($do_comments) {            $columns_cnt++;        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;        }        $GLOBALS['odt_buffer'] .= '<table:table-column table:number-columns-repeated="' . $columns_cnt . '"/>';        /* Header */        $GLOBALS['odt_buffer'] .= '<table:table-row>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Column') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Type') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Null') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Default') . '</text:p>'            . '</table:table-cell>';        if ($do_relation && $have_rel) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('Links to') . '</text:p>'                . '</table:table-cell>';        }        if ($do_comments) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('Comments') . '</text:p>'                . '</table:table-cell>';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('MIME type') . '</text:p>'                . '</table:table-cell>';            $mime_map = PMA_getMIME($db, $table, true);        }        $GLOBALS['odt_buffer'] .= '</table:table-row>';        $columns = PMA_DBI_get_columns($db, $table);        foreach ($columns as $column) {            $field_name = $column['Field'];            $GLOBALS['odt_buffer'] .= '<table:table-row>';            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($field_name) . '</text:p>'                . '</table:table-cell>';            $extracted_fieldspec = PMA_extractFieldSpec($column['Type']);            $type = htmlspecialchars($extracted_fieldspec['print_type']);            if (empty($type)) {                $type     = '&nbsp;';            }            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($type) . '</text:p>'                . '</table:table-cell>';            if (!isset($column['Default'])) {                if ($column['Null'] != 'NO') {                    $column['Default'] = 'NULL';                } else {                    $column['Default'] = '';                }            } else {                $column['Default'] = $column['Default'];            }            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . (($column['Null'] == '' || $column['Null'] == 'NO') ? __('No') : __('Yes')) . '</text:p>'                . '</table:table-cell>';            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($column['Default']) . '</text:p>'                . '</table:table-cell>';            if ($do_relation && $have_rel) {                if (isset($res_rel[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' (' . $res_rel[$field_name]['foreign_field'] . ')') . '</text:p>'                        . '</table:table-cell>';                }            }            if ($do_comments) {                if (isset($comments[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($comments[$field_name]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                }            }            if ($do_mime && $cfgRelation['mimework']) {                if (isset($mime_map[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype'])) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                }            }            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end while        $GLOBALS['odt_buffer'] .= '</table:table>';        return true;    } // end of the 'PMA_exportStructure' function} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * <code> * N   N  OOO  !!   DDDD   OOO    N   N  OOO  TTTTT   EEEE DDDD  I TTTTT !! * NN  N O   O !!   D   D O   O   NN  N O   O   T     E    D   D I   T   !! * N N N O   O !!   D   D O   O   N N N O   O   T     EEEE D   D I   T   !! * N  NN O   O      D   D O   O   N  NN O   O   T     E    D   D I   T * N   N  OOO  !!   DDDD   OOO    N   N  OOO    T     EEEE DDDD  I   T   !! * </code> * * DO NOT EDIT THIS FILE, EDIT config.inc.php INSTEAD !!! * * phpMyAdmin default configuration, you can copy values from here to your * config.inc.php * * All directives are explained in Documentation.html * * @package PhpMyAdmin *//** * Your phpMyAdmin URL. * * Complete the variable below with the full URL ie *    http://www.your_web.net/path_to_your_phpMyAdmin_directory/ * * It must contain characters that are valid for a URL, and the path is * case sensitive on some Web servers, for example Unix-based servers. * * In most cases you can leave this variable empty, as the correct value * will be detected automatically. However, we recommend that you do * test to see that the auto-detection code works in your system. A good * test is to browse a table, then edit a row and save it.  There will be * an error message if phpMyAdmin cannot auto-detect the correct value. * * @global string $cfg['PmaAbsoluteUri'] */$cfg['PmaAbsoluteUri'] = '';/** * Disable the default warning that is displayed on the DB Details Structure page if * any of the required Tables for the configuration storage could not be found * * @global boolean $cfg['PmaNoRelation_DisableWarning'] */$cfg['PmaNoRelation_DisableWarning'] = false;/** * Disable the default warning that is displayed if Suhosin is detected * * @global boolean $cfg['SuhosinDisableWarning'] */$cfg['SuhosinDisableWarning'] = false;/** * Disable the default warning that is displayed if mcrypt is missing for * cookie authentication. * * @global boolean $cfg['McryptDisableWarning'] */$cfg['McryptDisableWarning'] = false;/** * Show warning about incomplete translations on certain threshold. * * @global boolean $cfg['TranslationWarningThreshold'] */$cfg['TranslationWarningThreshold'] = 80;/** * Allows phpMyAdmin to be included from a document located on * another domain; setting this to true is a potential security hole * * @global boolean $cfg['AllowThirdPartyFraming'] */$cfg['AllowThirdPartyFraming'] = false;/** * The 'cookie' auth_type uses blowfish algorithm to encrypt the password. If * at least one server configuration uses 'cookie' auth_type, enter here a * pass phrase that will be used by blowfish. The maximum length seems to be 46 * characters. * * @global string $cfg['blowfish_secret'] */$cfg['blowfish_secret'] = '';/******************************************************************************* * Server(s) configuration * * The $cfg['Servers'] array starts with $cfg['Servers'][1].  Do not use * $cfg['Servers'][0]. You can disable a server configuration entry by setting host * to ''. If you want more than one server, just copy following section * (including $i incrementation) several times. There is no need to define * full server array, just define values you need to change. * * @global array $cfg['Servers'] */$cfg['Servers'] = array();$i = 1;/** * MySQL hostname or IP address * * @global string $cfg['Servers'][$i]['host'] */$cfg['Servers'][$i]['host'] = 'localhost';/** * MySQL port - leave blank for default port * * @global string $cfg['Servers'][$i]['port'] */$cfg['Servers'][$i]['port'] = '';/** * Path to the socket - leave blank for default socket * * @global string $cfg['Servers'][$i]['socket'] */$cfg['Servers'][$i]['socket'] = '';/** * Use SSL for connecting to MySQL server? * * @global boolean $cfg['Servers'][$i]['ssl'] */$cfg['Servers'][$i]['ssl'] = false;/** * How to connect to MySQL server ('tcp' or 'socket') * * @global string $cfg['Servers'][$i]['connect_type'] */$cfg['Servers'][$i]['connect_type'] = 'tcp';/** * The PHP MySQL extension to use ('mysql' or 'mysqli') * * @global string $cfg['Servers'][$i]['extension'] */$cfg['Servers'][$i]['extension'] = 'mysqli';/** * Use compressed protocol for the MySQL connection * * @global boolean $cfg['Servers'][$i]['compress'] */$cfg['Servers'][$i]['compress'] = false;/** * MySQL control host. This permits to use a host different than the * main host, for the phpMyAdmin configuration storage. If left empty, * $cfg['Servers'][$i]['host'] is used instead. * * @global string $cfg['Servers'][$i]['controlhost'] */$cfg['Servers'][$i]['controlhost'] = '';/** * MySQL control user settings (this user must have read-only * access to the "mysql/user" and "mysql/db" tables). The controluser is also * used for all relational features (pmadb) * * @global string $cfg['Servers'][$i]['controluser'] */$cfg['Servers'][$i]['controluser'] = '';/** * MySQL control user settings (this user must have read-only * access to the "mysql/user" and "mysql/db" tables). The controluser is also * used for all relational features (pmadb) * * @global string $cfg['Servers'][$i]['controlpass'] */$cfg['Servers'][$i]['controlpass'] = '';/** * Authentication method (valid choices: config, http, signon or cookie) * * @global string $cfg['Servers'][$i]['auth_type'] */$cfg['Servers'][$i]['auth_type'] = 'cookie';/** * HTTP Basic Auth Realm name to display (only used with 'HTTP' auth_type) * * @global string $cfg['Servers'][$i]['auth_http_realm'] */$cfg['Servers'][$i]['auth_http_realm'] = '';/** * File containing Swekey ids and login names (see /contrib); * leave empty to deactivate Swekey hardware authentication * * @global string $cfg['Servers'][$i]['auth_swekey_config'] */$cfg['Servers'][$i]['auth_swekey_config'] = '';/** * MySQL user * * @global string $cfg['Servers'][$i]['user'] */$cfg['Servers'][$i]['user'] = 'root';/** * MySQL password (only needed with 'config' auth_type) * * @global string $cfg['Servers'][$i]['password'] */$cfg['Servers'][$i]['password'] = '';/** * Session to use for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonSession'] */$cfg['Servers'][$i]['SignonSession'] = '';/** * PHP script to use for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonScript'] */$cfg['Servers'][$i]['SignonScript'] = '';/** * URL where to redirect user to login for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonURL'] */$cfg['Servers'][$i]['SignonURL'] = '';/** * URL where to redirect user after logout * * @global string $cfg['Servers'][$i]['LogoutURL'] */$cfg['Servers'][$i]['LogoutURL'] = '';/** * Whether to try to connect without password * * @global boolean $cfg['Servers'][$i]['nopassword'] */$cfg['Servers'][$i]['nopassword'] = false;/** * If set to a db-name, only this db is displayed in left frame * It may also be an array of db-names, where sorting order is relevant. * * @global string $cfg['Servers'][$i]['only_db'] */$cfg['Servers'][$i]['only_db'] = '';/** * Database name to be hidden from listings * * @global string $cfg['Servers'][$i]['hide_db'] */$cfg['Servers'][$i]['hide_db'] = '';/** * Verbose name for this host - leave blank to show the hostname * (for HTTP authentication, all non-US-ASCII characters will be stripped) * * @global string $cfg['Servers'][$i]['verbose'] */$cfg['Servers'][$i]['verbose'] = '';/** * Database used for Relation, Bookmark and PDF Features * (see examples/create_tables.sql) *   - leave blank for no support *     SUGGESTED: 'phpmyadmin' * * @global string $cfg['Servers'][$i]['pmadb'] */$cfg['Servers'][$i]['pmadb'] = '';/** * Bookmark table *   - leave blank for no bookmark support *     SUGGESTED: 'pma_bookmark' * * @global string $cfg['Servers'][$i]['bookmarktable'] */$cfg['Servers'][$i]['bookmarktable'] = '';/** * table to describe the relation between links (see doc) *   - leave blank for no relation-links support *     SUGGESTED: 'pma_relation' * * @global string $cfg['Servers'][$i]['relation'] */$cfg['Servers'][$i]['relation'] = '';/** * table to describe the display fields *   - leave blank for no display fields support *     SUGGESTED: 'pma_table_info' * * @global string $cfg['Servers'][$i]['table_info'] */$cfg['Servers'][$i]['table_info'] = '';/** * table to describe the tables position for the PDF schema *   - leave blank for no PDF schema support *     SUGGESTED: 'pma_table_coords' * * @global string $cfg['Servers'][$i]['table_coords'] */$cfg['Servers'][$i]['table_coords'] = '';/** * table to describe pages of relationpdf *   - leave blank if you don't want to use this *     SUGGESTED: 'pma_pdf_pages' * * @global string $cfg['Servers'][$i]['pdf_pages'] */$cfg['Servers'][$i]['pdf_pages'] = '';/** * table to store column information *   - leave blank for no column comments/mime types *     SUGGESTED: 'pma_column_info' * * @global string $cfg['Servers'][$i]['column_info'] */$cfg['Servers'][$i]['column_info'] = '';/** * table to store SQL history *   - leave blank for no SQL query history *     SUGGESTED: 'pma_history' * * @global string $cfg['Servers'][$i]['history'] */$cfg['Servers'][$i]['history'] = '';/** * table to store the coordinates for Designer *   - leave blank for no Designer feature *     SUGGESTED: 'pma_designer_coords' * * @global string $cfg['Servers'][$i]['designer_coords'] */$cfg['Servers'][$i]['designer_coords'] = '';/** * table to store recently used tables *   - leave blank for no "persistent" recently used tables *     SUGGESTED: 'pma_recent' */$cfg['Servers'][$i]['recent'] = '';/** * table to store UI preferences for tables *   - leave blank for no "persistent" UI preferences *     SUGGESTED: 'pma_table_uiprefs' */$cfg['Servers'][$i]['table_uiprefs'] = '';/** * table to store SQL tracking *   - leave blank for no SQL tracking *     SUGGESTED: 'pma_tracking' * * @global string $cfg['Servers'][$i]['tracking'] */$cfg['Servers'][$i]['tracking'] = '';/** * table to store user preferences *   - leave blank to disable server storage *     SUGGESTED: 'pma_userconfig' * * @global string $cfg['Servers'][$i]['userconfig'] */$cfg['Servers'][$i]['userconfig'] = '';/** * Maximum number of records saved in $cfg['Servers'][$i]['table_uiprefs'] table. * * In case where tables in databases is modified (e.g. dropped or renamed), * table_uiprefs may contains invalid data (referring to tables which are not * exist anymore). * This configuration make sure that we only keep N (N = MaxTableUiprefs) * newest record in table_uiprefs and automatically delete older records. * * @global integer $cfg['Servers'][$i]['userconfig'] = ''; */$cfg['Servers'][$i]['MaxTableUiprefs'] = 100;/** * set to false if you know that your pma_* tables are up to date. * This prevents compatibility checks and thereby increases performance. * * @global boolean $cfg['Servers'][$i]['verbose_check'] */$cfg['Servers'][$i]['verbose_check'] = true;/** * whether to allow root login * * @global boolean $cfg['Servers'][$i]['AllowRoot'] */$cfg['Servers'][$i]['AllowRoot'] = true;/** * whether to allow login of any user without a password * * @global boolean $cfg['Servers'][$i]['AllowNoPassword'] */$cfg['Servers'][$i]['AllowNoPassword'] = false;/** * Host authentication order, leave blank to not use * * @global string $cfg['Servers'][$i]['AllowDeny']['order'] */$cfg['Servers'][$i]['AllowDeny']['order'] = '';/** * Host authentication rules, leave blank for defaults * * @global array $cfg['Servers'][$i]['AllowDeny']['rules'] */$cfg['Servers'][$i]['AllowDeny']['rules'] = array();/** * Disable use of INFORMATION_SCHEMA. Is always 'true' for Drizzle. * * @see http://sf.net/support/tracker.php?aid=1849494 * @see http://bugs.mysql.com/19588 * @global boolean $cfg['Servers'][$i]['DisableIS'] */$cfg['Servers'][$i]['DisableIS'] = true;/** * SQL command to fetch available databases * * by default most user will be fine with SHOW DATABASES, * for servers with a huge amount of databases it is possible to * define a command which executes faster but with less information * * especially when accessing database servers from ISPs changing this command * can result in a great speed improvement * * false will disable fetching databases from the server, only databases in * $cfg['Servers'][$i]['only_db'] will be displayed * * #user# will be replaced by current user * * examples: * 'SHOW DATABASES' * "SHOW DATABASES LIKE '#user#\_%'" * 'SELECT DISTINCT TABLE_SCHEMA FROM information_schema.SCHEMA_PRIVILEGES' * 'SELECT SCHEMA_NAME FROM information_schema.SCHEMATA' * false * * @global array $cfg['Servers'][$i]['ShowDatabasesCommand'] */$cfg['Servers'][$i]['ShowDatabasesCommand'] = 'SHOW DATABASES';/** * Whether to count tables when showing database list * * @global array $cfg['Servers'][$i]['CountTables'] */$cfg['Servers'][$i]['CountTables'] = false;/** * Whether the tracking mechanism creates versions for tables and views automatically. * * @global bool $cfg['Servers'][$i]['tracking_version_auto_create'] */$cfg['Servers'][$i]['tracking_version_auto_create'] = false;/** * Defines the list of statements the auto-creation uses for new versions. * * @global string $cfg['Servers'][$i]['tracking_default_statements'] */$cfg['Servers'][$i]['tracking_default_statements'] = 'CREATE TABLE,ALTER TABLE,DROP TABLE,RENAME TABLE,' .                                          'CREATE INDEX,DROP INDEX,' .                                          'INSERT,UPDATE,DELETE,TRUNCATE,REPLACE,' .                                          'CREATE VIEW,ALTER VIEW,DROP VIEW,' .                                          'CREATE DATABASE,ALTER DATABASE,DROP DATABASE';/** * Whether a DROP VIEW IF EXISTS statement will be added as first line to the log when creating a view. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_view'] */$cfg['Servers'][$i]['tracking_add_drop_view'] = true;/** * Whether a DROP TABLE IF EXISTS statement will be added as first line to the log when creating a table. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_table'] */$cfg['Servers'][$i]['tracking_add_drop_table'] = true;/** * Whether a DROP DATABASE IF EXISTS statement will be added as first line to the log when creating a database. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_database'] */$cfg['Servers'][$i]['tracking_add_drop_database'] = true;/** * Default server (0 = no default server) * * If you have more than one server configured, you can set $cfg['ServerDefault'] * to any one of them to auto-connect to that server when phpMyAdmin is started, * or set it to 0 to be given a list of servers without logging in * If you have only one server configured, $cfg['ServerDefault'] *MUST* be * set to that server. * * @global integer $cfg['ServerDefault'] */$cfg['ServerDefault'] = 1;/* * Other core phpMyAdmin settings *//** * whether Ajax behavior is active * * @global boolean $cfg['AjaxEnable'] */$cfg['AjaxEnable'] = true;/** * whether version check is active * * @global boolean $cfg['VersionCheck'] */$cfg['VersionCheck'] = VERSION_CHECK_DEFAULT;/** * maximum number of db's displayed in left frame and database list * * @global integer $cfg['MaxDbList'] */$cfg['MaxDbList'] = 100;/** * maximum number of tables displayed in table list * * @global integer $cfg['MaxTableList'] */$cfg['MaxTableList'] = 250;/** * whether to show hint or not * * @global boolean $cfg['ShowHint'] */$cfg['ShowHint'] = true;/** * maximum number of characters when a SQL query is displayed * * @global integer $cfg['MaxCharactersInDisplayedSQL'] */$cfg['MaxCharactersInDisplayedSQL'] = 1000;/** * use GZIP output buffering if possible (true|false|'auto') * * @global string $cfg['OBGzip'] */$cfg['OBGzip'] = 'auto';/** * use persistent connections to MySQL database * * @global boolean $cfg['PersistentConnections'] */$cfg['PersistentConnections'] = false;/** * whether to force using HTTPS * * @global boolean $cfg['ForceSSL'] */$cfg['ForceSSL'] = false;/** * maximum execution time in seconds (0 for no limit) * * @global integer $cfg['ExecTimeLimit'] */$cfg['ExecTimeLimit'] = 300;/** * Path for storing session data (session_save_path PHP parameter). * * @global integer $cfg['SessionSavePath'] */$cfg['SessionSavePath'] = '';/** * maximum allocated bytes ('0' for no limit) * this is a string because '16M' is a valid value; we must put here * a string as the default value so that /setup accepts strings * * @global string $cfg['MemoryLimit'] */$cfg['MemoryLimit'] = '0';/** * mark used tables, make possible to show locked tables (since MySQL 3.23.30) * Is ignored for Drizzle. * * @global boolean $cfg['SkipLockedTables'] */$cfg['SkipLockedTables'] = false;/** * show SQL queries as run * * @global boolean $cfg['ShowSQL'] */$cfg['ShowSQL'] = true;/** * retain SQL input on Ajax execute * * @global boolean $cfg['RetainQueryEditor'] */$cfg['RetainQueryBox'] = false;/** * show a 'Drop database' link to normal users * * @global boolean $cfg['AllowUserDropDatabase'] */$cfg['AllowUserDropDatabase'] = false;/** * confirm some commands that can result in loss of data * (see "need_confirm" in the parser) * * @global boolean $cfg['Confirm'] */$cfg['Confirm'] = true;/** * recall previous login in cookie authentication mode or not * * @global boolean $cfg['LoginCookieRecall'] */$cfg['LoginCookieRecall'] = true;/** * validity of cookie login (in seconds; 1440 matches php.ini's * session.gc_maxlifetime) * * @global integer $cfg['LoginCookieValidity'] */$cfg['LoginCookieValidity'] = 1440;/** * how long login cookie should be stored (in seconds) * * @global integer $cfg['LoginCookieStore'] */$cfg['LoginCookieStore'] = 0;/** * whether to delete all login cookies on logout * * @global boolean $cfg['LoginCookieDeleteAll'] */$cfg['LoginCookieDeleteAll'] = true;/** * whether to enable the "database search" feature or not * * @global boolean $cfg['UseDbSearch'] */$cfg['UseDbSearch'] = true;/** * if set to true, PMA continues computing multiple-statement queries * even if one of the queries failed * * @global boolean $cfg['IgnoreMultiSubmitErrors'] */$cfg['IgnoreMultiSubmitErrors'] = false;/** * if set to true, PMA will show the affected rows of EACH statement on * multiple-statement queries. See the libraries/import.php file for * hard coded defaults on how many queries a statement may contain! * * @global boolean $cfg['VerboseMultiSubmit'] */$cfg['VerboseMultiSubmit'] = true;/** * allow login to any user entered server in cookie based authentication * * @global boolean $cfg['AllowArbitraryServer'] */$cfg['AllowArbitraryServer'] = false;/******************************************************************************* * Error handler configuration * * this configures phpMyAdmin's own error handler, it is used to avoid information * disclosure, gather errors for logging, reporting and displaying * * @global array $cfg['Error_Handler'] */$cfg['Error_Handler'] = array();/** * whether to display errors or not * * this does not affect errors of type  E_USER_* * * @global boolean $cfg['Error_Handler']['display'] */$cfg['Error_Handler']['display'] = false;/** * (NOT IMPLEMENTED YET) * where to log errors, false or empty to disable * * <code> * // EXAMPLE log to std PHP error log * $cfg['Error_Handler']['log'] = array(0); * // EXAMPLE mail errors * $cfg['Error_Handler']['log'] = array(1, 'admin@example.org'); * // EXAMPLE append to specific file * $cfg['Error_Handler']['log'] = array(3, '/var/log/phpmyadmin_error.log'); * </code> * * @see     http://php.net/error_log * @global  string $cfg['Error_Handler']['log'] *///$cfg['Error_Handler']['log'] = false;/** * gather all errors in session to be displayed on a error reporting page * for viewing and/or sending to phpMyAdmin developer team * * @global boolean $cfg['Error_Handler']['gather'] */$cfg['Error_Handler']['gather'] = false;/******************************************************************************* * Left frame setup *//** * use a select-based menu and display only the current tables in the left frame. * * @global boolean $cfg['LeftFrameLight'] */$cfg['LeftFrameLight'] = true;/** * turn the select-based light menu into a tree * * @global boolean $cfg['LeftFrameDBTree'] */$cfg['LeftFrameDBTree'] = true;/** * the separator to sub-tree the select-based light menu tree * * @global string $cfg['LeftFrameDBSeparator'] */$cfg['LeftFrameDBSeparator'] = '_';/** * Which string will be used to generate table prefixes * to split/nest tables into multiple categories * * @global string $cfg['LeftFrameTableSeparator'] */$cfg['LeftFrameTableSeparator']= '__';/** * How many sublevels should be displayed when splitting up tables by the above Separator * * @global integer $cfg['LeftFrameTableLevel'] */$cfg['LeftFrameTableLevel'] = 1;/** * display table comment as tooltip in left frame * * @global boolean $cfg['ShowTooltip'] */$cfg['ShowTooltip'] = true;/** * if ShowToolTip is enabled, this defines that table/db comments * * @global boolean $cfg['ShowTooltipAliasDB'] */$cfg['ShowTooltipAliasDB'] = false;/** * are shown (in the left menu and db_structure) instead of table/db names. * Setting ShowTooltipAliasTB to 'nested' will only use the Aliases for nested * descriptors, not the table itself. * * @global boolean $cfg['ShowTooltipAliasTB'] */$cfg['ShowTooltipAliasTB'] = false;/** * display logo at top of left frame * * @global boolean $cfg['LeftDisplayLogo'] */$cfg['LeftDisplayLogo'] = true;/** * where should logo link point to (can also contain an external URL) * * @global string $cfg['LeftLogoLink'] */$cfg['LeftLogoLink'] = 'main.php';/** * whether to open the linked page in the main window ('main') or * in a new window ('new') * * @global string $cfg['LeftLogoLinkWindow'] */$cfg['LeftLogoLinkWindow'] = 'main';/** * number of recently used tables displayed in the navigation frame * * @global integer $cfg['LeftRecentTable'] */$cfg['LeftRecentTable'] = 10;/** * display a JavaScript table filter in the left frame * when more then x tables are present * * @global boolean $cfg['LeftDisplayTableFilterMinimum'] */$cfg['LeftDisplayTableFilterMinimum'] = 30;/** * display server choice at top of left frame * * @global boolean $cfg['LeftDisplayServers'] */$cfg['LeftDisplayServers'] = false;/** * server choice as links * * @global boolean $cfg['DisplayServersList'] */$cfg['DisplayServersList'] = false;/** * database choice in light as links * * @global boolean $cfg['DisplayDatabasesList'] */$cfg['DisplayDatabasesList'] = 'auto';/** * target of the navigation panel quick access icon * * Possible values: * 'tbl_structure.php' = fields list * 'tbl_sql.php' = SQL form * 'tbl_select.php' = search page * 'tbl_change.php' = insert row page * 'sql.php' = browse page * * @global string $cfg['LeftDefaultTabTable'] */$cfg['LeftDefaultTabTable'] = 'tbl_structure.php';/******************************************************************************* * In the main frame, at startup... *//** * allow to display statistics and space usage in the pages about database * details and table properties * * @global boolean $cfg['ShowStats'] */$cfg['ShowStats'] = true;/** * show PHP info link * * @global boolean $cfg['ShowPhpInfo'] */$cfg['ShowPhpInfo'] = false;/** * show MySQL server and web server information * * @global boolean $cfg['ShowServerInfo'] */$cfg['ShowServerInfo'] = true;/** * show change password link * * @global boolean $cfg['ShowChgPassword'] */$cfg['ShowChgPassword'] = true;/** * show create database form * * @global boolean $cfg['ShowCreateDb'] */$cfg['ShowCreateDb'] = true;/** * suggest a new DB name if possible (false = keep empty) * * @global boolean $cfg['SuggestDBName'] */$cfg['SuggestDBName'] = true;/******************************************************************************* * In browse mode... *//** * Use icons instead of text for the navigation bar buttons * and on right panel top menu (server db table) (true|false|'both') * * @global string $cfg['NavigationBarIconic'] */$cfg['NavigationBarIconic'] = true;/** * Defines whether a user should be displayed a "show all (records)" * button in browse mode or not. * * @global boolean $cfg['ShowAll'] */$cfg['ShowAll'] = false;/** * Number of rows displayed when browsing a result set. If the result * set contains more rows, "Previous" and "Next". * * @global integer $cfg['MaxRows'] */$cfg['MaxRows'] = 30;/** * default for 'ORDER BY' clause (valid values are 'ASC', 'DESC' or 'SMART' -ie * descending order for fields of type TIME, DATE, DATETIME & TIMESTAMP, * ascending order else-) * * @global string $cfg['Order'] */$cfg['Order'] = 'SMART';/** * default for 'Show binary contents as HEX' * * @global string $cfg['DisplayBinaryAsHex'] */$cfg['DisplayBinaryAsHex'] = true;/******************************************************************************* * In edit mode... *//** * disallow editing of binary fields * valid values are: *   false  allow editing *   'blob' allow editing except for BLOB fields *   'all'  disallow editing * * @global string $cfg['ProtectBinary'] */$cfg['ProtectBinary'] = 'blob';/** * Display the function fields in edit/insert mode * * @global boolean $cfg['ShowFunctionFields'] */$cfg['ShowFunctionFields'] = true;/** * Display the type fields in edit/insert mode * * @global boolean $cfg['ShowFieldTypesInDataEditView'] */$cfg['ShowFieldTypesInDataEditView'] = true;/** * Which editor should be used for CHAR/VARCHAR fields: *  input - allows limiting of input length *  textarea - allows newlines in fields * * @global string $cfg['CharEditing'] */$cfg['CharEditing'] = 'input';/** * The minimum size for character input fields * * @global integer $cfg['MinSizeForInputField'] */$cfg['MinSizeForInputField'] = 4;/** * The maximum size for character input fields * * @global integer $cfg['MinSizeForInputField'] */$cfg['MaxSizeForInputField'] = 60;/** * How many rows can be inserted at one time * * @global integer $cfg['InsertRows'] */$cfg['InsertRows'] = 2;/** * Sort order for items in a foreign-key drop-down list. * 'content' is the referenced data, 'id' is the key value. * * @global array $cfg['ForeignKeyDropdownOrder'] */$cfg['ForeignKeyDropdownOrder'] = array('content-id', 'id-content');/** * A drop-down list will be used if fewer items are present * * @global integer $cfg['ForeignKeyMaxLimit'] */$cfg['ForeignKeyMaxLimit'] = 100;/******************************************************************************* * For the export features... *//** * Allow for the use of zip compression (requires zip support to be enabled) * * @global boolean $cfg['ZipDump'] */$cfg['ZipDump'] = true;/** * Allow for the use of gzip compression (requires zlib) * * @global boolean $cfg['GZipDump'] */$cfg['GZipDump'] = true;/** * Allow for the use of bzip2 compression (requires bz2 extension) * * @global boolean $cfg['BZipDump'] */$cfg['BZipDump'] = true;/** * Will compress gzip/bzip2 exports on the fly without the need for much memory. * If you encounter problems with created gzip/bzip2 files disable this feature. * * @global boolean $cfg['CompressOnFly'] */$cfg['CompressOnFly'] = true;/******************************************************************************* * Tabs display settings *//** * Use graphically less intense menu tabs * * @global boolean $cfg['LightTabs'] */$cfg['LightTabs'] = false;/** * Use icons instead of text for the table display of a database (true|false|'both') * * @global boolean $cfg['PropertiesIconic'] */$cfg['PropertiesIconic'] = 'both';/** * How many columns should be used for table display of a database? * (a value larger than 1 results in some information being hidden) * * @global integer $cfg['PropertiesNumColumns'] */$cfg['PropertiesNumColumns'] = 1;/** * Possible values: * 'main.php' = the welcome page * (recommended for multiuser setups) * 'server_databases.php' = list of databases * 'server_status.php' = runtime information * 'server_variables.php' = MySQL server variables * 'server_privileges.php' = user management * 'server_processlist.php' = process list * * @global string $cfg['DefaultTabServer'] */$cfg['DefaultTabServer'] = 'main.php';/** * Possible values: * 'db_structure.php' = tables list * 'db_sql.php' = SQL form * 'db_search.php' = search query * 'db_operations.php' = operations on database * * @global string $cfg['DefaultTabDatabase'] */$cfg['DefaultTabDatabase'] = 'db_structure.php';/** * Possible values: * 'tbl_structure.php' = fields list * 'tbl_sql.php' = SQL form * 'tbl_select.php' = search page * 'tbl_change.php' = insert row page * 'sql.php' = browse page * * @global string $cfg['DefaultTabTable'] */$cfg['DefaultTabTable'] = 'sql.php';/******************************************************************************* * Export defaults */$cfg['Export'] = array();/** * codegen/csv/excel/htmlexcel/htmlword/latex/ods/odt/pdf/sql/texytext/xls/xml/yaml * * @global string $cfg['Export']['format'] */$cfg['Export']['format'] = 'sql';/** * quick/custom/custom-no-form * * @global string $cfg['Export']['format'] */$cfg['Export']['method'] = 'quick';/** * none/zip/gzip/bzip2 * * @global string $cfg['Export']['compression'] */$cfg['Export']['compression'] = 'none';/** * * * @global boolean $cfg['Export']['asfile'] */$cfg['Export']['asfile'] = true;/** * * * @global string $cfg['Export']['charset'] */$cfg['Export']['charset'] = '';/** * * * @global boolean $cfg['Export']['onserver'] */$cfg['Export']['onserver'] = false;/** * * * @global boolean $cfg['Export']['onserver_overwrite'] */$cfg['Export']['onserver_overwrite'] = false;/** * * * @global boolean $cfg['Export']['quick_export_onserver'] */$cfg['Export']['quick_export_onserver'] = false;/** * * * @global boolean $cfg['Export']['quick_export_onserver_overwrite'] */$cfg['Export']['quick_export_onserver_overwrite'] = false;/** * * * @global boolean $cfg['Export']['remember_file_template'] */$cfg['Export']['remember_file_template'] = true;/** * * * @global string $cfg['Export']['file_template_table'] */$cfg['Export']['file_template_table'] = '@TABLE@';/** * * * @global string $cfg['Export']['file_template_database'] */$cfg['Export']['file_template_database'] = '@DATABASE@';/** * * * @global string $cfg['Export']['file_template_server'] */$cfg['Export']['file_template_server'] = '@SERVER@';/** * * * @global string $cfg['Export']['codegen_structure_or_data'] */$cfg['Export']['codegen_structure_or_data'] = 'data';/** * * * @global $cfg['Export']['codegen_format'] */$cfg['Export']['codegen_format'] = 0;/** * * * @global boolean $cfg['Export']['ods_columns'] */$cfg['Export']['ods_columns'] = false;/** * * * @global string $cfg['Export']['ods_null'] */$cfg['Export']['ods_null'] = 'NULL';/** * * * @global string $cfg['Export']['odt_structure_or_data'] */$cfg['Export']['odt_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['odt_columns'] */$cfg['Export']['odt_columns'] = true;/** * * * @global boolean $cfg['Export']['odt_relation'] */$cfg['Export']['odt_relation'] = true;/** * * * @global boolean $cfg['Export']['odt_comments'] */$cfg['Export']['odt_comments'] = true;/** * * * @global boolean $cfg['Export']['odt_mime'] */$cfg['Export']['odt_mime'] = true;/** * * * @global string $cfg['Export']['odt_null'] */$cfg['Export']['odt_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['htmlword_structure_or_data'] */$cfg['Export']['htmlword_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['htmlword_columns'] */$cfg['Export']['htmlword_columns'] = false;/** * * * @global string $cfg['Export']['htmlword_null'] */$cfg['Export']['htmlword_null'] = 'NULL';/** * * * @global string $cfg['Export']['texytext_structure_or_data'] */$cfg['Export']['texytext_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['texytext_columns'] */$cfg['Export']['texytext_columns'] = false;/** * * * @global string $cfg['Export']['texytext_null'] */$cfg['Export']['texytext_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['xls_columns'] */$cfg['Export']['xls_columns'] = false;/** * * * @global string $cfg['Export']['xls_structure_or_data'] */$cfg['Export']['xls_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['xls_null'] */$cfg['Export']['xls_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['xlsx_columns'] */$cfg['Export']['xlsx_columns'] = false;/** * * * @global string $cfg['Export']['xlsx_structure_or_data'] */$cfg['Export']['xlsx_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['xlsx_null'] */$cfg['Export']['xlsx_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['csv_columns'] */$cfg['Export']['csv_columns'] = false;/** * * * @global string $cfg['Export']['csv_structure_or_data'] */$cfg['Export']['csv_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['csv_null'] */$cfg['Export']['csv_null'] = 'NULL';/** * * * @global string $cfg['Export']['csv_separator'] */$cfg['Export']['csv_separator'] = ',';/** * * * @global string $cfg['Export']['csv_enclosed'] */$cfg['Export']['csv_enclosed'] = '"';/** * * * @global string $cfg['Export']['csv_escaped'] */$cfg['Export']['csv_escaped'] = '"';/** * * * @global string $cfg['Export']['csv_terminated'] */$cfg['Export']['csv_terminated'] = 'AUTO';/** * * * @global string $cfg['Export']['csv_removeCRLF'] */$cfg['Export']['csv_removeCRLF'] = false;/** * * * @global boolean $cfg['Export']['excel_columns'] */$cfg['Export']['excel_columns'] = false;/** * * * @global string $cfg['Export']['excel_null'] */$cfg['Export']['excel_null'] = 'NULL';/** * win/mac * * @global string $cfg['Export']['excel_edition'] */$cfg['Export']['excel_edition'] = 'win';/** * * * @global string $cfg['Export']['excel_removeCRLF'] */$cfg['Export']['excel_removeCRLF'] = false;/** * * * @global string $cfg['Export']['excel_structure_or_data'] */$cfg['Export']['excel_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['latex_structure_or_data'] */$cfg['Export']['latex_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['latex_columns'] */$cfg['Export']['latex_columns'] = true;/** * * * @global boolean $cfg['Export']['latex_relation'] */$cfg['Export']['latex_relation'] = true;/** * * * @global boolean $cfg['Export']['latex_comments'] */$cfg['Export']['latex_comments'] = true;/** * * * @global boolean $cfg['Export']['latex_mime'] */$cfg['Export']['latex_mime'] = true;/** * * * @global string $cfg['Export']['latex_null'] */$cfg['Export']['latex_null'] = '\textit{NULL}';/** * * * @global boolean $cfg['Export']['latex_caption'] */$cfg['Export']['latex_caption'] = true;/** * * * @global string $cfg['Export']['latex_structure_caption'] */$cfg['Export']['latex_structure_caption'] = 'strLatexStructure';/** * * * @global string $cfg['Export']['latex_structure_continued_caption'] */$cfg['Export']['latex_structure_continued_caption'] = 'strLatexStructure strLatexContinued';/** * * * @global string $cfg['Export']['latex_data_caption'] */$cfg['Export']['latex_data_caption'] = 'strLatexContent';/** * * * @global string $cfg['Export']['latex_data_continued_caption'] */$cfg['Export']['latex_data_continued_caption'] = 'strLatexContent strLatexContinued';/** * * * @global string $cfg['Export']['latex_data_label'] */$cfg['Export']['latex_data_label'] = 'tab:@TABLE@-data';/** * * * @global string $cfg['Export']['latex_structure_label'] */$cfg['Export']['latex_structure_label'] = 'tab:@TABLE@-structure';/** * * * @global string $cfg['Export']['mediawiki_structure_or_data'] */$cfg['Export']['mediawiki_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['ods_structure_or_data'] */$cfg['Export']['ods_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['pdf_structure_or_data'] */$cfg['Export']['pdf_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['php_array_structure_or_data'] */$cfg['Export']['php_array_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['json_structure_or_data'] */$cfg['Export']['json_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['sql_structure_or_data'] */$cfg['Export']['sql_structure_or_data'] = 'structure_and_data';/** * * * @global string $cfg['Export']['sql_compatibility'] */$cfg['Export']['sql_compatibility'] = 'NONE';/** * Whether to include comments in SQL export. * * @global string $cfg['Export']['sql_include_comments'] */$cfg['Export']['sql_include_comments'] = true;/** * * * @global boolean $cfg['Export']['sql_disable_fk'] */$cfg['Export']['sql_disable_fk'] = false;/** * * * @global boolean $cfg['Export']['sql_use_transaction'] */$cfg['Export']['sql_use_transaction'] = false;/** * * * @global boolean $cfg['Export']['sql_drop_database'] */$cfg['Export']['sql_drop_database'] = false;/** * * * @global boolean $cfg['Export']['sql_drop_table'] */$cfg['Export']['sql_drop_table'] = false;/** * * * true by default for correct behavior when dealing with exporting * of VIEWs and the stand-in table * @global boolean $cfg['Export']['sql_if_not_exists'] */$cfg['Export']['sql_if_not_exists'] = true;/** * * * @global boolean $cfg['Export']['sql_procedure_function'] */$cfg['Export']['sql_procedure_function'] = true;/** * * * @global boolean $cfg['Export']['sql_auto_increment'] */$cfg['Export']['sql_auto_increment'] = true;/** * * * @global boolean $cfg['Export']['sql_backquotes'] */$cfg['Export']['sql_backquotes'] = true;/** * * * @global boolean $cfg['Export']['sql_dates'] */$cfg['Export']['sql_dates'] = false;/** * * * @global boolean $cfg['Export']['sql_relation'] */$cfg['Export']['sql_relation'] = false;/** * * * @global boolean $cfg['Export']['sql_delayed'] */$cfg['Export']['sql_delayed'] = false;/** * * * @global boolean $cfg['Export']['sql_ignore'] */$cfg['Export']['sql_ignore'] = false;/** * Export time in UTC. * * @global boolean $cfg['Export']['sql_utc_time'] */$cfg['Export']['sql_utc_time'] = true;/** * * * @global boolean $cfg['Export']['sql_hex_for_blob'] */$cfg['Export']['sql_hex_for_blob'] = true;/** * insert/update/replace * * @global string $cfg['Export']['sql_type'] */$cfg['Export']['sql_type'] = 'INSERT';/** * * * @global integer $cfg['Export']['sql_max_query_size'] */$cfg['Export']['sql_max_query_size'] = 50000;/** * * * @global boolean $cfg['Export']['sql_comments'] */$cfg['Export']['sql_comments'] = false;/** * * * @global boolean $cfg['Export']['sql_mime'] */$cfg['Export']['sql_mime'] = false;/** * \n is replaced by new line * * @global string $cfg['Export']['sql_header_comment'] */$cfg['Export']['sql_header_comment'] = '';/** * * * @global boolean $cfg['Export']['sql_create_table_statements'] */$cfg['Export']['sql_create_table_statements'] = true;/** * Whether to use complete inserts, extended inserts, both, or neither * * @global string $cfg['Export']['sql_insert_syntax'] */$cfg['Export']['sql_insert_syntax'] = 'both';/** * * * @global string $cfg['Export']['pdf_report_title'] */$cfg['Export']['pdf_report_title'] = '';/** * * *@global string $cfg['Export']['xml_structure_or_data'] */$cfg['Export']['xml_structure_or_data'] = 'data';/** * Export schema for each structure * * @global string $cfg['Export']['xml_export_struc'] */$cfg['Export']['xml_export_struc'] = true;/** * Export functions * * @global string $cfg['Export']['xml_export_functions'] */$cfg['Export']['xml_export_functions'] = true;/** * Export procedures * * @global string $cfg['Export']['xml_export_procedures'] */$cfg['Export']['xml_export_procedures'] = true;/** * Export schema for each table * * @global string $cfg['Export']['xml_export_tables'] */$cfg['Export']['xml_export_tables'] = true;/** * Export triggers * * @global string $cfg['Export']['xml_export_triggers'] */$cfg['Export']['xml_export_triggers'] = true;/** * Export views * * @global string $cfg['Export']['xml_export_views'] */$cfg['Export']['xml_export_views'] = true;/** * Export contents data * * @global string $cfg['Export']['xml_export_contents'] */$cfg['Export']['xml_export_contents'] = true;/** * * * @global string $cfg['Export']['yaml_structure_or_data'] */$cfg['Export']['yaml_structure_or_data'] = 'data';/******************************************************************************* * Import defaults */$cfg['Import'] = array();/** * * * @global string $cfg['Import']['format'] */$cfg['Import']['format'] = 'sql';/** * Default charset for import. * * @global string $cfg['Import']['charset'] */$cfg['Import']['charset'] = '';/** * * * @global boolean $cfg['Import']['allow_interrupt'] */$cfg['Import']['allow_interrupt'] = true;/** * * * @global integer $cfg['Import']['skip_queries'] */$cfg['Import']['skip_queries'] = 0;/** * * * @global string $cfg['Import']['sql_compatibility'] */$cfg['Import']['sql_compatibility'] = 'NONE';/** * * * @global string $cfg['Import']['sql_no_auto_value_on_zero'] */$cfg['Import']['sql_no_auto_value_on_zero'] = true;/** * * * @global boolean $cfg['Import']['csv_replace'] */$cfg['Import']['csv_replace'] = false;/** * * * @global boolean $cfg['Import']['csv_ignore'] */$cfg['Import']['csv_ignore'] = false;/** * * * @global string $cfg['Import']['csv_terminated'] */$cfg['Import']['csv_terminated'] = ',';/** * * * @global string $cfg['Import']['csv_enclosed'] */$cfg['Import']['csv_enclosed'] = '"';/** * * * @global string $cfg['Import']['csv_escaped'] */$cfg['Import']['csv_escaped'] = '"';/** * * * @global string $cfg['Import']['csv_new_line'] */$cfg['Import']['csv_new_line'] = 'auto';/** * * * @global string $cfg['Import']['csv_columns'] */$cfg['Import']['csv_columns'] = '';/** * * * @global string $cfg['Import']['csv_col_names'] */$cfg['Import']['csv_col_names'] = false;/** * * * @global boolean $cfg['Import']['ldi_replace'] */$cfg['Import']['ldi_replace'] = false;/** * * * @global boolean $cfg['Import']['ldi_ignore'] */$cfg['Import']['ldi_ignore'] = false;/** * * * @global string $cfg['Import']['ldi_terminated'] */$cfg['Import']['ldi_terminated'] = ';';/** * * * @global string $cfg['Import']['ldi_enclosed'] */$cfg['Import']['ldi_enclosed'] = '"';/** * * * @global string $cfg['Import']['ldi_escaped'] */$cfg['Import']['ldi_escaped'] = '\\';/** * * * @global string $cfg['Import']['ldi_new_line'] */$cfg['Import']['ldi_new_line'] = 'auto';/** * * * @global string $cfg['Import']['ldi_columns'] */$cfg['Import']['ldi_columns'] = '';/** * 'auto' for auto-detection, true or false for forcing * * @global string $cfg['Import']['ldi_local_option'] */$cfg['Import']['ldi_local_option'] = 'auto';/** * * * @global string $cfg['Import']['ods_col_names'] */$cfg['Import']['ods_col_names'] = false;/** * * * @global string $cfg['Import']['ods_empty_rows'] */$cfg['Import']['ods_empty_rows'] = true;/** * * * @global string $cfg['Import']['ods_recognize_percentages'] */$cfg['Import']['ods_recognize_percentages'] = true;/** * * * @global string $cfg['Import']['ods_recognize_currency'] */$cfg['Import']['ods_recognize_currency'] = true;/** * * * @global string $cfg['Import']['xml_col_names'] */$cfg['Import']['xls_col_names'] = false;/** * * * @global string $cfg['Import']['xml_empty_rows'] */$cfg['Import']['xls_empty_rows'] = true;/** * * * @global string $cfg['Import']['xlsx_col_names'] */$cfg['Import']['xlsx_col_names'] = false;/** * Link to the official MySQL documentation. * Be sure to include no trailing slash on the path. * See http://dev.mysql.com/doc/ for more information * about MySQL manuals and their types. * * @global string $cfg['MySQLManualBase'] */$cfg['MySQLManualBase'] = 'http://dev.mysql.com/doc/refman';/** * Type of MySQL documentation: *   viewable   - "viewable online", current one used on MySQL website *   searchable - "Searchable, with user comments" *   chapters   - "HTML, one page per chapter" *   chapters_old - "HTML, one page per chapter", format used prior to MySQL 5.0 release *   big        - "HTML, all on one page" *   old        - old style used in phpMyAdmin 2.3.0 and sooner *   none       - do not show documentation links * * @global string $cfg['MySQLManualType'] */$cfg['MySQLManualType'] = 'viewable';/******************************************************************************* * PDF options *//** * * * @global array $cfg['PDFPageSizes'] */$cfg['PDFPageSizes'] = array('A3', 'A4', 'A5', 'letter', 'legal');/** * * * @global string $cfg['PDFDefaultPageSize'] */$cfg['PDFDefaultPageSize'] = 'A4';/******************************************************************************* * Language and character set conversion settings *//** * Default language to use, if not browser-defined or user-defined * * @global string $cfg['DefaultLang'] */$cfg['DefaultLang'] = 'en';/** * Default connection collation * * @global string $cfg['DefaultConnectionCollation'] */$cfg['DefaultConnectionCollation'] = 'utf8_general_ci';/** * Force: always use this language * $cfg['Lang'] = 'en'; * * Regular expression to limit listed languages, e.g. '^(cs|en)' for Czech and * English only * * @global string $cfg['FilterLanguages'] */$cfg['FilterLanguages'] = '';/** * You can select here which functions will be used for character set conversion. * Possible values are: *      auto   - automatically use available one (first is tested iconv, then *               recode) *      iconv  - use iconv or libiconv functions *      recode - use recode_string function *      none   - disable encoding conversion * * @global string $cfg['RecodingEngine'] */$cfg['RecodingEngine'] = 'auto';/** * Specify some parameters for iconv used in character set conversion. See iconv * documentation for details: * http://www.gnu.org/software/libiconv/documentation/libiconv/iconv_open.3.html * * @global string $cfg['IconvExtraParams'] */$cfg['IconvExtraParams'] = '//TRANSLIT';/** * Available character sets for MySQL conversion. currently contains all which could * be found in lang/* files and few more. * Character sets will be shown in same order as here listed, so if you frequently * use some of these move them to the top. * * @global array $cfg['AvailableCharsets'] */$cfg['AvailableCharsets'] = array(    'iso-8859-1',    'iso-8859-2',    'iso-8859-3',    'iso-8859-4',    'iso-8859-5',    'iso-8859-6',    'iso-8859-7',    'iso-8859-8',    'iso-8859-9',    'iso-8859-10',    'iso-8859-11',    'iso-8859-12',    'iso-8859-13',    'iso-8859-14',    'iso-8859-15',    'windows-1250',    'windows-1251',    'windows-1252',    'windows-1256',    'windows-1257',    'koi8-r',    'big5',    'gb2312',    'utf-16',    'utf-8',    'utf-7',    'x-user-defined',    'euc-jp',    'ks_c_5601-1987',    'tis-620',    'SHIFT_JIS');/******************************************************************************* * Customization & design * * The graphical settings are now located in themes/theme-name/layout.inc.php *//** * enable the left panel pointer * (used when LeftFrameLight is false) * see also LeftPointerColor * in layout.inc.php * * @global boolean $cfg['LeftPointerEnable'] */$cfg['LeftPointerEnable'] = true;/** * enable the browse pointer * see also BrowsePointerColor * in layout.inc.php * * @global boolean $cfg['BrowsePointerEnable'] */$cfg['BrowsePointerEnable'] = true;/** * enable the browse marker * see also BrowseMarkerColor * in layout.inc.php * * @global boolean $cfg['BrowseMarkerEnable'] */$cfg['BrowseMarkerEnable'] = true;/** * textarea size (columns) in edit mode * (this value will be emphasized (*2) for SQL * query textareas and (*1.25) for query window) * * @global integer $cfg['TextareaCols'] */$cfg['TextareaCols'] = 40;/** * textarea size (rows) in edit mode * * @global integer $cfg['TextareaRows'] */$cfg['TextareaRows'] = 15;/** * double size of textarea size for LONGTEXT columns * * @global boolean $cfg['LongtextDoubleTextarea'] */$cfg['LongtextDoubleTextarea'] = true;/** * auto-select when clicking in the textarea of the query-box * * @global boolean $cfg['TextareaAutoSelect'] */$cfg['TextareaAutoSelect'] = false;/** * textarea size (columns) for CHAR/VARCHAR * * @global integer $cfg['CharTextareaCols'] */$cfg['CharTextareaCols'] = 40;/** * textarea size (rows) for CHAR/VARCHAR * * @global integer $cfg['CharTextareaRows'] */$cfg['CharTextareaRows'] = 2;/** * Max field data length in browse mode for all non-numeric fields * * @global integer $cfg['LimitChars'] */$cfg['LimitChars'] = 50;/** * Where to show the edit/copy/delete links in browse mode * Possible values are 'left', 'right', 'both' and 'none'; * which will be interpreted as 'top', 'bottom', 'both' and 'none' * respectively for vertical display mode * * @global string $cfg['RowActionLinks'] */$cfg['RowActionLinks'] = 'left';/** * default display direction (horizontal|vertical|horizontalflipped) * * @global string $cfg['DefaultDisplay'] */$cfg['DefaultDisplay'] = 'horizontal';/** * remember the last way a table sorted * * @global string $cfg['RememberSorting'] */$cfg['RememberSorting'] = true;/** * table-header rotation via faking or CSS? (css|fake|auto) * NOTE: CSS only works in IE browsers! * * @global string $cfg['HeaderFlipType'] */$cfg['HeaderFlipType'] = 'auto';/** * shows stored relation-comments in 'browse' mode. * * @global boolean $cfg['ShowBrowseComments'] */$cfg['ShowBrowseComments'] = true;/** * shows stored relation-comments in 'table property' mode. * * @global boolean $cfg['ShowPropertyComments'] */$cfg['ShowPropertyComments']= true;/** * save edited cell(s) in browse-mode at once. */$cfg['SaveCellsAtOnce'] = false;/** * shows table display direction. */$cfg['ShowDisplayDirection'] = false;/** * repeat header names every X cells? (0 = deactivate) * * @global integer $cfg['RepeatCells'] */$cfg['RepeatCells'] = 100;/** * Set to true if Edit link should open the query to edit in the query window * (assuming JavaScript is enabled), and to false if we should edit in the right panel * * @global boolean $cfg['EditInWindow'] */$cfg['EditInWindow'] = true;/** * Width of Query window * * @global integer $cfg['QueryWindowWidth'] */$cfg['QueryWindowWidth'] = 550;/** * Height of Query window * * @global integer $cfg['QueryWindowHeight'] */$cfg['QueryWindowHeight'] = 310;/** * Set to true if you want DB-based query history.If false, this utilizes * JS-routines to display query history (lost by window close) * * @global boolean $cfg['QueryHistoryDB'] */$cfg['QueryHistoryDB'] = false;/** * which tab to display in the querywindow on startup * (sql|files|history|full) * * @global string $cfg['QueryWindowDefTab'] */$cfg['QueryWindowDefTab'] = 'sql';/** * When using DB-based query history, how many entries should be kept? * * @global integer $cfg['QueryHistoryMax'] */$cfg['QueryHistoryMax'] = 25;/** * Use MIME-Types (stored in column comments table) for * * @global boolean $cfg['BrowseMIME'] */$cfg['BrowseMIME'] = true;/** * When approximate count < this, PMA will get exact count for table rows. * * @global integer $cfg['MaxExactCount'] */$cfg['MaxExactCount'] = 20000;/** * Zero means that no row count is done for views; see the doc * * @global integer $cfg['MaxExactCountViews'] */$cfg['MaxExactCountViews'] = 100000;/** * Sort table and database in natural order * * @global boolean $cfg['NaturalOrder'] */$cfg['NaturalOrder'] = true;/** * Initial state for sliders * (open | closed | disabled) * * @global string $cfg['InitialSlidersState'] */$cfg['InitialSlidersState'] = 'closed';/** * User preferences: disallow these settings * For possible setting names look in libraries/config/user_preferences.forms.php * * @global array $cfg['UserprefsDisallow'] */$cfg['UserprefsDisallow'] = array();/** * User preferences: enable the Developer tab */$cfg['UserprefsDeveloperTab'] = false;/******************************************************************************* * Window title settings *//** * title of browser window when a table is selected * * @global string $cfg['TitleTable'] */$cfg['TitleTable'] = '@HTTP_HOST@ / @VSERVER@ / @DATABASE@ / @TABLE@ | @PHPMYADMIN@';/** * title of browser window when a database is selected * * @global string $cfg['TitleDatabase'] */$cfg['TitleDatabase'] = '@HTTP_HOST@ / @VSERVER@ / @DATABASE@ | @PHPMYADMIN@';/** * title of browser window when a server is selected * * @global string $cfg['TitleServer'] */$cfg['TitleServer'] = '@HTTP_HOST@ / @VSERVER@ | @PHPMYADMIN@';/** * title of browser window when nothing is selected * @global string $cfg['TitleDefault'] */$cfg['TitleDefault'] = '@HTTP_HOST@ | @PHPMYADMIN@';/** * show some icons for warning, error and information messages (true|false)? * * @global boolean $cfg['ErrorIconic'] */$cfg['ErrorIconic'] = true;/** * show icons in list on main page and on menu tabs (true|false)? * * @global boolean $cfg['MainPageIconic'] */$cfg['MainPageIconic'] = true;/** * show help button instead of Documentation text (true|false)? * * @global boolean $cfg['ReplaceHelpImg'] */$cfg['ReplaceHelpImg'] = true;/******************************************************************************* * theme manager *//** * using themes manager please set up here the path to 'themes' else leave empty * * @global string $cfg['ThemePath'] */$cfg['ThemePath'] = './themes';/** * if you want to use selectable themes and if ThemesPath not empty * set it to true, else set it to false (default is false); * * @global boolean $cfg['ThemeManager'] */$cfg['ThemeManager'] = true;/** * set up default theme, if ThemePath not empty you can set up here an valid * path to themes or 'original' for the original pma-theme * * @global string $cfg['ThemeDefault'] */$cfg['ThemeDefault'] = 'pmahomme';/** * allow different theme for each configured server * * @global boolean $cfg['ThemePerServer'] */$cfg['ThemePerServer'] = false;/******************************************************************************* * *//** * Default query for table * * @global string $cfg['DefaultQueryTable'] */$cfg['DefaultQueryTable'] = 'SELECT * FROM @TABLE@ WHERE 1';/** * Default query for database * * @global string $cfg['DefaultQueryDatabase'] */$cfg['DefaultQueryDatabase'] = '';/******************************************************************************* * SQL Query box settings * These are the links display in all of the SQL Query boxes * * @global array $cfg['SQLQuery'] */$cfg['SQLQuery'] = array();/** * Edit link to change a query * * @global boolean $cfg['SQLQuery']['Edit'] */$cfg['SQLQuery']['Edit'] = true;/** * EXPLAIN on SELECT queries * * @global boolean $cfg['SQLQuery']['Explain'] */$cfg['SQLQuery']['Explain'] = true;/** * Wrap a query in PHP * * @global boolean $cfg['SQLQuery']['ShowAsPHP'] */$cfg['SQLQuery']['ShowAsPHP'] = true;/** * Validate a query (see $cfg['SQLValidator'] as well) * * @global boolean $cfg['SQLQuery']['Validate'] */$cfg['SQLQuery']['Validate'] = false;/** * Refresh the results page * * @global boolean $cfg['SQLQuery']['Refresh'] */$cfg['SQLQuery']['Refresh'] = true;/******************************************************************************* * Web server upload/save/import directories *//** * Directory for uploaded files that can be executed by phpMyAdmin. * For example './upload'. Leave empty for no upload directory support. * Use %u for username inclusion. * * @global string $cfg['UploadDir'] */$cfg['UploadDir'] = '';/** * Directory where phpMyAdmin can save exported data on server. * For example './save'. Leave empty for no save directory support. * Use %u for username inclusion. * * @global string $cfg['SaveDir'] */$cfg['SaveDir'] = '';/** * Directory where phpMyAdmin can save temporary files. * This is needed for MS Excel export, see documentation how to enable that. * * @global string $cfg['TempDir'] */$cfg['TempDir'] = '';/** * Misc. settings *//** * Is GD >= 2 available? Set to yes/no/auto. 'auto' does auto-detection, * which is the only safe way to determine GD version. * * @global string $cfg['GD2Available'] */$cfg['GD2Available'] = 'auto';/** * Lists proxy IP and HTTP header combinations which are trusted for IP allow/deny * * @global array $cfg['TrustedProxies'] */$cfg['TrustedProxies'] = array();/** * We normally check the permissions on the configuration file to ensure * it's not world writable. However, phpMyAdmin could be installed on * a NTFS filesystem mounted on a non-Windows server, in which case the * permissions seems wrong but in fact cannot be detected. In this case * a sysadmin would set the following to false. */$cfg['CheckConfigurationPermissions'] = true;/** * Limit for length of URL in links. When length would be above this limit, it * is replaced by form with button. * This is required as some web servers (IIS) have problems with long URLs. * The recommended limit is 2000 * (see http://www.boutell.com/newfaq/misc/urllength.html) but we put * 1000 to accommodate Suhosin, see bug #3358750. */$cfg['LinkLengthLimit'] = 1000;/** * Disable the table maintenance mass operations, like optimizing or * repairing the selected tables of a database. An accidental execution * of such a maintenance task can enormously slow down a bigger database. */$cfg['DisableMultiTableMaintenance'] = false;/******************************************************************************* * SQL Parser Settings * * @global array $cfg['SQP'] */$cfg['SQP'] = array();/** * Pretty-printing style to use on queries (html, text, none) * * @global string $cfg['SQP']['fmtType'] */$cfg['SQP']['fmtType'] = 'html';/** * Amount to indent each level (floats are valid) * * @global integer $cfg['SQP']['fmtInd'] */$cfg['SQP']['fmtInd'] = '1';/** * Units for indenting each level (CSS Types - {em, px, pt}) * * @global string $cfg['SQP']['fmtIndUnit'] */$cfg['SQP']['fmtIndUnit'] = 'em';/******************************************************************************* * If you wish to use the SQL Validator service, you should be aware of the * following: * All SQL statements are stored anonymously for statistical purposes. * Mimer SQL Validator, Copyright 2002 Upright Database Technology. * All rights reserved. * * @global array $cfg['SQLValidator'] */$cfg['SQLValidator'] = array();/** * Make the SQL Validator available * * @global boolean $cfg['SQLValidator']['use'] */$cfg['SQLValidator']['use'] = false;/** * If you have a custom username, specify it here (defaults to anonymous) * * @global string $cfg['SQLValidator']['username'] */$cfg['SQLValidator']['username'] = '';/** * Password for username * * @global string $cfg['SQLValidator']['password'] */$cfg['SQLValidator']['password'] = '';/******************************************************************************* * Developers ONLY! * * @global array $cfg['DBG'] */$cfg['DBG'] = array();/** * Output executed queries and their execution times * * @global boolean $cfg['DBG']['sql'] */$cfg['DBG']['sql'] = false;/******************************************************************************* * MySQL settings *//** * Column types; * VARCHAR, TINYINT, TEXT and DATE are listed first, based on estimated popularity * * This variable is filled in data_*.inc.php * * @global array $cfg['ColumnTypes'] */$cfg['ColumnTypes'] = array();/** * Attributes * * This variable is filled in data_*.inc.php * * @global array $cfg['AttributeTypes'] */$cfg['AttributeTypes'] = array();if ($cfg['ShowFunctionFields']) {    /**     * Available functions     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['Functions']     */    $cfg['Functions'] = array();    /**     * Which column types will be mapped to which Group?     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['RestrictColumnTypes']     */    $cfg['RestrictColumnTypes'] = array();    /**     * Map above defined groups to any function     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['RestrictFunctions']     */    $cfg['RestrictFunctions'] = array();    /**     * Default functions for above defined groups     *     * @global array $cfg['DefaultFunctions']     */    $cfg['DefaultFunctions'] = array(        'FUNC_CHAR' => '',        'FUNC_DATE' => '',        'FUNC_NUMBER' => '',        'FUNC_SPATIAL' => 'GeomFromText',        'FUNC_UUID' => 'UUID',        'first_timestamp' => 'NOW',    );} // end if/** * Search operators * * @global array $cfg['NumOperators'] */$cfg['NumOperators'] = array(   '=',   '>',   '>=',   '<',   '<=',   '!=',   'LIKE',   'NOT LIKE',   'IN (...)',   'NOT IN (...)',   'BETWEEN',   'NOT BETWEEN',);/** * Search operators * * @global array $cfg['TextOperators'] */$cfg['TextOperators'] = array(   'LIKE',   'LIKE %...%',   'NOT LIKE',   '=',   '!=',   'REGEXP',   'REGEXP ^...$',   'NOT REGEXP',   "= ''",   "!= ''",   'IN (...)',   'NOT IN (...)',   'BETWEEN',   'NOT BETWEEN',);/** * Search operators * * @global array $cfg['EnumOperators'] */$cfg['EnumOperators'] = array(   '=',   '!=',);/** * Search operators * * @global array $cfg['SetOperators'] */$cfg['SetOperators'] = array(   'IN',   'NOT IN',);/** * Search operators * * @global array $cfg['NullOperators'] */$cfg['NullOperators'] = array(   'IS NULL',   'IS NOT NULL',);/** * Search operators * * @global array $cfg['UnaryOperators'] */$cfg['UnaryOperators'] = array(   'IS NULL' => 1,   'IS NOT NULL' => 1,   "= ''" => 1,   "!= ''" => 1);/** * Max rows retreived for zoom search */$cfg['maxRowPlotLimit'] = 500;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Display form for changing/adding table fields/columns * * included by tbl_addfield.php, -_alter.php, -_create.php * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Check parameters */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';PMA_checkParameters(array('db', 'table', 'action', 'num_fields'));// Get available character sets and storage enginesrequire_once './libraries/mysql_charsets.lib.php';require_once './libraries/StorageEngine.class.php';/** * Class for partition management */require_once './libraries/Partition.class.php';// load additional configuration variablesif (PMA_DRIZZLE) {    include_once './libraries/data_drizzle.inc.php';} else {    include_once './libraries/data_mysql.inc.php';}$length_values_input_size = 8;$_form_params = array(    'db' => $db,);if ($action == 'tbl_create.php') {    $_form_params['reload'] = 1;} elseif ($action == 'tbl_addfield.php') {    $_form_params['field_where'] = $_REQUEST['field_where'];    $_form_params['after_field'] = $_REQUEST['after_field'];    $_form_params['table'] = $table;} else {    $_form_params['table'] = $table;}if (isset($num_fields)) {    $_form_params['orig_num_fields'] = $num_fields;}if (isset($_REQUEST['field_where'])) {    $_form_params['orig_field_where'] = $_REQUEST['field_where'];}if (isset($_REQUEST['after_field'])) {    $_form_params['orig_after_field'] = $_REQUEST['after_field'];}if (isset($selected) && is_array($selected)) {    foreach ($selected as $o_fld_nr => $o_fld_val) {        $_form_params['selected[' . $o_fld_nr . ']'] = $o_fld_val;        if (! isset($true_selected)) {            $_form_params['true_selected[' . $o_fld_nr . ']'] = $o_fld_val;        }    }    if (isset($true_selected) && is_array($true_selected)) {        foreach ($true_selected as $o_fld_nr => $o_fld_val) {            $_form_params['true_selected[' . $o_fld_nr . ']'] = $o_fld_val;        }    }} elseif (isset($_REQUEST['field'])) {    $_form_params['orig_field'] = $_REQUEST['field'];    if (isset($orig_field)) {        $_form_params['true_selected[]'] = $orig_field;    } else {        $_form_params['true_selected[]'] = $_REQUEST['field'];    }}$is_backup = ($action != 'tbl_create.php' && $action != 'tbl_addfield.php');$header_cells = array();$content_cells = array();$header_cells[] = __('Name');$header_cells[] = __('Type')     . ($GLOBALS['cfg']['ReplaceHelpImg']        ? PMA_showMySQLDocu('SQL-Syntax', 'data-types')        : '<br /><span style="font-weight: normal">' . PMA_showMySQLDocu('SQL-Syntax', 'data-types')     . '</span>');$header_cells[] = __('Length/Values') . PMA_showHint(__('If column type is "enum" or "set", please enter the values using this format: \'a\',\'b\',\'c\'...<br />If you ever need to put a backslash ("\") or a single quote ("\'") amongst those values, precede it with a backslash (for example \'\\\\xyz\' or \'a\\\'b\').'));$header_cells[] = __('Default') . PMA_showHint(__('For default values, please enter just a single value, without backslash escaping or quotes, using this format: a'));$header_cells[] = __('Collation');$header_cells[] = __('Attributes');$header_cells[] = __('Null');// We could remove this 'if' and let the key information be shown and// editable. However, for this to work, tbl_alter must be modified to use the// key fields, as tbl_addfield does.if (!$is_backup) {    $header_cells[] = __('Index');}$header_cells[] = '<abbr title="AUTO_INCREMENT">A_I</abbr>';require_once './libraries/transformations.lib.php';$cfgRelation = PMA_getRelationsParam();$comments_map = array();$mime_map = array();$available_mime = array();$comments_map = PMA_getComments($db, $table);$header_cells[] = __('Comments');if ($cfgRelation['mimework'] && $cfg['BrowseMIME']) {    $mime_map = PMA_getMIME($db, $table);    $available_mime = PMA_getAvailableMIMEtypes();    $hint = '<br />' .        sprintf(__('For a list of available transformation options and their MIME type transformations, click on %stransformation descriptions%s'),            '<a href="transformation_overview.php?'            . PMA_generate_common_url($db, $table) . '" target="_blank">',            '</a>');    $header_cells[] = __('MIME type');    $header_cells[] = __('Browser transformation');    $header_cells[] = __('Transformation options')        . PMA_showHint(__('Please enter the values for transformation options using this format: \'a\', 100, b,\'c\'...<br />If you ever need to put a backslash ("\") or a single quote ("\'") amongst those values, precede it with a backslash (for example \'\\\\xyz\' or \'a\\\'b\').') . $hint);}//  workaround for field_fulltext, because its submitted indizes contain//  the index as a value, not a key. Inserted here for easier maintaineance//  and less code to change in existing files.if (isset($field_fulltext) && is_array($field_fulltext)) {    foreach ($field_fulltext as $fulltext_nr => $fulltext_indexkey) {        $submit_fulltext[$fulltext_indexkey] = $fulltext_indexkey;    }}for ($i = 0; $i < $num_fields; $i++) {    if (! empty($regenerate)) {        // An error happened with previous inputs, so we will restore the data        // to embed it once again in this form.        $row['Field']     = (isset($_REQUEST['field_name'][$i]) ? $_REQUEST['field_name'][$i] : false);        $row['Type']      = (isset($_REQUEST['field_type'][$i]) ? $_REQUEST['field_type'][$i] : false);        $row['Collation'] = (isset($_REQUEST['field_collation'][$i]) ? $_REQUEST['field_collation'][$i] : '');        $row['Null']      = (isset($_REQUEST['field_null'][$i]) ? $_REQUEST['field_null'][$i] : '');        if (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'primary_' . $i) {            $row['Key'] = 'PRI';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'index_' . $i) {            $row['Key'] = 'MUL';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'unique_' . $i) {            $row['Key'] = 'UNI';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'fulltext_' . $i) {            $row['Key'] = 'FULLTEXT';        } else {            $row['Key'] = '';        }        // put None in the drop-down for Default, when someone adds a field        $row['DefaultType']  = (isset($_REQUEST['field_default_type'][$i]) ? $_REQUEST['field_default_type'][$i] : 'NONE');        $row['DefaultValue'] = (isset($_REQUEST['field_default_value'][$i]) ? $_REQUEST['field_default_value'][$i] : '');        switch ($row['DefaultType']) {            case 'NONE' :                $row['Default'] = null;                break;            case 'USER_DEFINED' :                $row['Default'] = $row['DefaultValue'];                break;            case 'NULL' :            case 'CURRENT_TIMESTAMP' :                $row['Default'] = $row['DefaultType'];                break;        }        $row['Extra']     = (isset($_REQUEST['field_extra'][$i]) ? $_REQUEST['field_extra'][$i] : false);        $row['Comment']   = (isset($submit_fulltext[$i]) && ($submit_fulltext[$i] == $i) ? 'FULLTEXT' : false);        $submit_length    = (isset($_REQUEST['field_length'][$i]) ? $_REQUEST['field_length'][$i] : false);        $submit_attribute = (isset($_REQUEST['field_attribute'][$i]) ? $_REQUEST['field_attribute'][$i] : false);        $submit_default_current_timestamp = (isset($_REQUEST['field_default_current_timestamp'][$i]) ? true : false);        if (isset($_REQUEST['field_comments'][$i])) {            $comments_map[$row['Field']] = $_REQUEST['field_comments'][$i];        }        if (isset($_REQUEST['field_mimetype'][$i])) {            $mime_map[$row['Field']]['mimetype'] = $_REQUEST['field_mimetype'][$i];        }        if (isset($_REQUEST['field_transformation'][$i])) {            $mime_map[$row['Field']]['transformation'] = $_REQUEST['field_transformation'][$i];        }        if (isset($_REQUEST['field_transformation_options'][$i])) {            $mime_map[$row['Field']]['transformation_options'] = $_REQUEST['field_transformation_options'][$i];        }    } elseif (isset($fields_meta[$i])) {        $row = $fields_meta[$i];        switch ($row['Default']) {            case null:                if ($row['Null'] == 'YES') {                    $row['DefaultType']  = 'NULL';                    $row['DefaultValue'] = '';    // SHOW FULL COLUMNS does not report the case when there is a DEFAULT value    // which is empty so we need to use the results of SHOW CREATE TABLE                } elseif (isset($row) && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['default_value'])) {                    $row['DefaultType']  = 'USER_DEFINED';                    $row['DefaultValue'] = $row['Default'];                } else {                    $row['DefaultType']  = 'NONE';                    $row['DefaultValue'] = '';                }                break;            case 'CURRENT_TIMESTAMP':                $row['DefaultType']  = 'CURRENT_TIMESTAMP';                $row['DefaultValue'] = '';                break;            default:                $row['DefaultType']  = 'USER_DEFINED';                $row['DefaultValue'] = $row['Default'];                break;        }    }    if (isset($row['Type'])) {        $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);        if ($extracted_fieldspec['type'] == 'bit') {            $row['Default'] = PMA_convert_bit_default_value($row['Default']);        }    }    // Cell index: If certain fields get left out, the counter shouldn't change.    $ci = 0;    // Everytime a cell shall be left out the STRG-jumping feature, $ci_offset    // has to be incremented ($ci_offset++)    $ci_offset = -1;    // old column name    if ($is_backup) {        if (! empty($true_selected[$i])) {            $_form_params['field_orig[' . $i . ']'] = $true_selected[$i];        } elseif (isset($row['Field'])) {            $_form_params['field_orig[' . $i . ']'] = $row['Field'];        } else {            $_form_params['field_orig[' . $i . ']'] = '';        }    }    // column name    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_name[' . $i . ']"'        . ' maxlength="64" class="textfield" title="' . __('Column') . '"'        . ' size="10"'        . ' value="' . (isset($row['Field']) ? htmlspecialchars($row['Field']) : '') . '"'        . ' />';    $ci++;    // column type    $select_id = 'field_' . $i . '_' . ($ci - $ci_offset);    $content_cells[$i][$ci] = '<select class="column_type" name="field_type[' . $i . ']"'        .' id="' . $select_id . '">';    if (empty($row['Type'])) {        // creating a column        $row['Type'] = '';        $type        = '';        $length = '';    } else {        $type = $extracted_fieldspec['type'];        $length = $extracted_fieldspec['spec_in_brackets'];    }    // some types, for example longtext, are reported as    // "longtext character set latin7" when their charset and / or collation    // differs from the ones of the corresponding database.    $tmp = strpos($type, 'character set');    if ($tmp) {        $type = substr($type, 0, $tmp - 1);    }    if (isset($submit_length) && $submit_length != false) {        $length = $submit_length;    }    // rtrim the type, for cases like "float unsigned"    $type = rtrim($type);    $type_upper = strtoupper($type);    $content_cells[$i][$ci] .= PMA_getSupportedDatatypes(true, $type_upper);    $content_cells[$i][$ci] .= '    </select>';    $ci++;    // old column length    if ($is_backup) {        $_form_params['field_length_orig[' . $i . ']'] = $length;    }    // column length    $length_to_display = $length;    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_length[' . $i . ']" size="' . $length_values_input_size . '"'        . ' value="' . htmlspecialchars($length_to_display) . '"'        . ' class="textfield" />'        . '<p class="enum_notice" id="enum_notice_' . $i . '_' . ($ci - $ci_offset) . '">';    $content_cells[$i][$ci] .= __('ENUM or SET data too long?')        . '<a onclick="return false;" href="enum_editor.php?'        . PMA_generate_common_url()        . '&amp;values=' . urlencode($length_to_display)        . '&amp;field=' .  (isset($row['Field']) ? urlencode($row['Field']) : "")        . '" class="open_enum_editor" target="_blank"> '        . __('Get more editing space') . '</a>'        . '</p>';    $ci++;    // column default    /**     * having NULL enabled does not implicit having Default with NULL     *    if (isset($row)      && ! isset($row['Default']) && isset($row['Null']) && $row['Null'] == 'YES') {        $row['Default'] = 'NULL';    }     */    // old column default    if ($is_backup) {        $_form_params['field_default_orig[' . $i . ']']            = (isset($row['Default']) ? $row['Default'] : '');    }    // here we put 'NONE' as the default value of drop-down; otherwise    // users would have problems if they forget to enter the default    // value (example, for an INT)    $default_options = array(        'NONE'              =>  _pgettext('for default', 'None'),        'USER_DEFINED'      =>  __('As defined:'),        'NULL'              => 'NULL',        'CURRENT_TIMESTAMP' => 'CURRENT_TIMESTAMP',    );    // for a TIMESTAMP, do not show the string "CURRENT_TIMESTAMP" as a default value    if ($type_upper == 'TIMESTAMP'     && ! empty($default_current_timestamp)     && isset($row['Default'])) {        $row['Default'] = '';    }    if ($type_upper == 'BIT') {        $row['DefaultValue'] = PMA_convert_bit_default_value($row['DefaultValue']);    }    $content_cells[$i][$ci] = '<select name="field_default_type[' . $i . ']" class="default_type">';    foreach ($default_options as $key => $value) {        $content_cells[$i][$ci] .= '<option value="' . $key . '"';        // is only set when we go back to edit a field's structure        if (isset($row['DefaultType']) && $row['DefaultType'] == $key) {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= ' >' . $value . '</option>';    }    $content_cells[$i][$ci] .= '</select>';    $content_cells[$i][$ci] .= '<br />';    $content_cells[$i][$ci] .= '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_default_value[' . $i . ']" size="12"'        . ' value="' . (isset($row['DefaultValue']) ? htmlspecialchars($row['DefaultValue']) : '') . '"'        . ' class="textfield default_value" />';    $ci++;    // column collation    $tmp_collation          = empty($row['Collation']) ? null : $row['Collation'];    $content_cells[$i][$ci] = PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_COLLATION, 'field_collation[' . $i . ']',        'field_' . $i . '_' . ($ci - $ci_offset), $tmp_collation, false);    unset($tmp_collation);    $ci++;    // column attribute    $content_cells[$i][$ci] = '<select style="font-size: 70%;"'        . ' name="field_attribute[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '">';    $attribute     = '';    if (isset($extracted_fieldspec)) {        $attribute = $extracted_fieldspec['attribute'];    }    if (isset($row['Extra']) && $row['Extra'] == 'on update CURRENT_TIMESTAMP') {        $attribute = 'on update CURRENT_TIMESTAMP';    }    if (isset($submit_attribute) && $submit_attribute != false) {        $attribute = $submit_attribute;    }    // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the    // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe    // the latter.    if (PMA_MYSQL_INT_VERSION < 50025     && isset($row['Field'])     && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['type'])     && $analyzed_sql[0]['create_table_fields'][$row['Field']]['type'] == 'TIMESTAMP'     && $analyzed_sql[0]['create_table_fields'][$row['Field']]['timestamp_not_null'] == true) {        $row['Null'] = '';    }    // MySQL 4.1.2+ TIMESTAMP options    // (if on_update_current_timestamp is set, then it's TRUE)    if (isset($row['Field'])     && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['on_update_current_timestamp'])) {        $attribute = 'on update CURRENT_TIMESTAMP';    }    if ((isset($row['Field'])      && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['default_current_timestamp']))     || (isset($submit_default_current_timestamp) && $submit_default_current_timestamp)) {        $default_current_timestamp = true;    } else {        $default_current_timestamp = false;    }    $cnt_attribute_types = count($cfg['AttributeTypes']);    for ($j = 0; $j < $cnt_attribute_types; $j++) {        $content_cells[$i][$ci] .= '                <option value="'. $cfg['AttributeTypes'][$j] . '"';        if (strtoupper($attribute) == strtoupper($cfg['AttributeTypes'][$j])) {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>' . $cfg['AttributeTypes'][$j] . '</option>';    }    $content_cells[$i][$ci] .= '</select>';    $ci++;    // column NULL    $content_cells[$i][$ci] = '<input name="field_null[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '"';    if (! empty($row['Null']) && $row['Null'] != 'NO' && $row['Null'] != 'NOT NULL') {        $content_cells[$i][$ci] .= ' checked="checked"';    }    $content_cells[$i][$ci] .= ' type="checkbox" value="NULL" />';    $ci++;    // column indexes    // See my other comment about removing this 'if'.    if (!$is_backup) {        $content_cells[$i][$ci] = '<select name="field_key[' . $i . ']"'            . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '">';        $content_cells[$i][$ci] .= '<option value="none_' . $i . '">---</option>';        $content_cells[$i][$ci] .= '<option value="primary_' . $i . '" title="' . __('Primary') . '"';        if (isset($row['Key']) && $row['Key'] == 'PRI') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>PRIMARY</option>';        $content_cells[$i][$ci] .= '<option value="unique_' . $i . '" title="' . __('Unique') . '"';        if (isset($row['Key']) && $row['Key'] == 'UNI') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>UNIQUE</option>';        $content_cells[$i][$ci] .= '<option value="index_' . $i . '" title="' . __('Index') . '"';        if (isset($row['Key']) && $row['Key'] == 'MUL') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>INDEX</option>';        if (!PMA_DRIZZLE) {            $content_cells[$i][$ci] .= '<option value="fulltext_' . $i . '" title="' . __('Fulltext') . '"';            if (isset($row['Key']) && $row['Key'] == 'FULLTEXT') {                $content_cells[$i][$ci] .= ' selected="selected"';            }            $content_cells[$i][$ci] .= '>FULLTEXT</option>';        }        $content_cells[$i][$ci] .= '</select>';        $ci++;    } // end if ($action ==...)    // column auto_increment    $content_cells[$i][$ci] = '<input name="field_extra[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '"';    if (isset($row['Extra']) && strtolower($row['Extra']) == 'auto_increment') {        $content_cells[$i][$ci] .= ' checked="checked"';    }    $content_cells[$i][$ci] .= ' type="checkbox" value="AUTO_INCREMENT" />';    $ci++;    // column comments    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_comments[' . $i . ']" size="12"'        . ' value="' . (isset($row['Field']) && is_array($comments_map) && isset($comments_map[$row['Field']]) ?  htmlspecialchars($comments_map[$row['Field']]) : '') . '"'        . ' class="textfield" />';    $ci++;    // column MIME-types    if ($cfgRelation['mimework'] && $cfg['BrowseMIME'] && $cfgRelation['commwork']) {        $content_cells[$i][$ci] = '<select id="field_' . $i . '_' . ($ci - $ci_offset) . '" size="1" name="field_mimetype[' . $i . ']">';        $content_cells[$i][$ci] .= '    <option value="">&nbsp;</option>';        if (is_array($available_mime['mimetype'])) {            foreach ($available_mime['mimetype'] AS $mimekey => $mimetype) {                $checked = (isset($row['Field']) && isset($mime_map[$row['Field']]['mimetype']) && ($mime_map[$row['Field']]['mimetype'] == str_replace('/', '_', $mimetype)) ? 'selected ' : '');                $content_cells[$i][$ci] .= '    <option value="' . str_replace('/', '_', $mimetype) . '" ' . $checked . '>' . htmlspecialchars($mimetype) . '</option>';            }        }        $content_cells[$i][$ci] .= '</select>';        $ci++;        $content_cells[$i][$ci] = '<select id="field_' . $i . '_' . ($ci - $ci_offset) . '" size="1" name="field_transformation[' . $i . ']">';        $content_cells[$i][$ci] .= '    <option value="" title="' . __('None') . '"></option>';        if (is_array($available_mime['transformation'])) {            foreach ($available_mime['transformation'] AS $mimekey => $transform) {                $checked = (isset($row['Field']) && isset($mime_map[$row['Field']]['transformation']) && (preg_match('@' . preg_quote($available_mime['transformation_file'][$mimekey]) . '3?@i', $mime_map[$row['Field']]['transformation'])) ? 'selected ' : '');                $tooltip = PMA_getTransformationDescription($available_mime['transformation_file'][$mimekey], false);                $content_cells[$i][$ci] .= '<option value="' . $available_mime['transformation_file'][$mimekey] . '" ' . $checked . ' title="' . htmlspecialchars($tooltip) . '">' . htmlspecialchars($transform) . '</option>';            }        }        $content_cells[$i][$ci] .= '</select>';        $ci++;        $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'            . ' type="text" name="field_transformation_options[' . $i . ']"'            . ' size="16" class="textfield"'            . ' value="' . (isset($row['Field']) && isset($mime_map[$row['Field']]['transformation_options']) ?  htmlspecialchars($mime_map[$row['Field']]['transformation_options']) : '') . '"'            . ' />';        //$ci++;    }} // end for    ?><script src="./js/keyhandler.js" type="text/javascript"></script><script type="text/javascript">// <![CDATA[var switch_movement = 0;document.onkeydown = onKeyDownArrowsHandler;// ]]></script>    <form id="<?php echo ($action == 'tbl_create.php' ? 'create_table' : 'append_fields'); ?>_form" method="post" action="<?php echo $action; ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?phpecho PMA_generate_common_hidden_inputs($_form_params);unset($_form_params);if ($action == 'tbl_create.php') {    ?>    <table>        <tr><td><?php echo __('Table name'); ?>:&nbsp;<input type="text" name="table" size="40" maxlength="80"                value="<?php echo (isset($_REQUEST['table']) ? htmlspecialchars($_REQUEST['table']) : ''); ?>"                class="textfield" />            </td>            <td>                <?php if ($action == 'tbl_create.php' || $action == 'tbl_addfield.php') { ?>                <?php echo sprintf(__('Add %s column(s)'), '<input type="text" id="added_fields" name="added_fields" size="2" value="1" onfocus="this.select()" />'); ?>                <input type="submit" name="submit_num_fields" value="<?php echo __('Go'); ?>"                    onclick="return checkFormElementInRange(this.form, 'added_fields', '<?php echo str_replace('\'', '\\\'', __('You have to add at least one column.')); ?>', 1)"                />                <?php } ?>            </td>        </tr>    </table>    <?php}if (is_array($content_cells) && is_array($header_cells)) {    // last row is for javascript insert    //$empty_row = array_pop($content_cells);    echo '<table id="table_columns" class="noclick">';    echo '<caption class="tblHeaders">' . __('Structure') . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_TABLE') . '</caption>';        ?><tr>    <?php foreach ($header_cells as $header_val) { ?>    <th><?php echo $header_val; ?></th>    <?php } ?></tr>    <?php    $odd_row = true;    foreach ($content_cells as $content_row) {        echo '<tr class="' . ($odd_row ? 'odd' : 'even') . '">';        $odd_row = ! $odd_row;        if (is_array($content_row)) {            foreach ($content_row as $content_row_val) {                ?>    <td align="center"><?php echo $content_row_val; ?></td>                <?php            }        }        echo '</tr>';    }    ?></table><br />    <?php}/** * needs to be finished * *if ($display_type == 'horizontal') {    $new_field = '';    foreach ($empty_row as $content_row_val) {        $new_field .= '<td align="center">' . $content_row_val . '</td>';    }    ?><script type="text/javascript">// <![CDATA[var odd_row = <?php echo $odd_row; ?>;function addField(){    var new_fields = document.getElementById('added_fields').value;    var new_field_container = document.getElementById('table_columns');    var new_field = '<?php echo preg_replace('|\s+|', ' ', preg_replace('|\'|', '\\\'', $new_field)); ?>';    var i = 0;    for (i = 0; i < new_fields; i++) {        if (odd_row) {            new_field_container.innerHTML += '<tr class="odd">' + new_field + '</tr>';        } else {            new_field_container.innerHTML += '<tr class="even">' + new_field + '</tr>';        }        odd_row = ! odd_row;    }    return true;}// ]]></script>    <?php} */if ($action == 'tbl_create.php') {    ?>    <table>    <tr valign="top">        <th><?php echo __('Table comments'); ?>:&nbsp;</th>        <td width="25">&nbsp;</td>        <th><?php echo __('Storage Engine'); ?>:            <?php echo PMA_showMySQLDocu('Storage_engines', 'Storage_engines'); ?>        </th>        <td width="25">&nbsp;</td>        <th><?php echo __('Collation') ;?>:&nbsp;</th>    </tr>    <tr><td><input type="text" name="comment" size="40" maxlength="80"                value="<?php echo (isset($_REQUEST['comment']) ? htmlspecialchars($_REQUEST['comment']) : ''); ?>"                class="textfield" />        </td>        <td width="25">&nbsp;</td>        <td>    <?php    echo PMA_StorageEngine::getHtmlSelect('tbl_type', null,        (isset($_REQUEST['tbl_type']) ? $_REQUEST['tbl_type'] : null));    ?>        </td>        <td width="25">&nbsp;</td>        <td>    <?php    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION, 'tbl_collation',        null, (isset($_REQUEST['tbl_collation']) ? $_REQUEST['tbl_collation'] : null), false, 3);    ?>        </td>    </tr>    <?php    if (PMA_Partition::havePartitioning()) {        ?>    <tr valign="top">        <th><?php echo __('PARTITION definition'); ?>:&nbsp;<?php echo PMA_showMySQLDocu('Partitioning', 'Partitioning'); ?>        </th>    </tr>    <tr>        <td>            <textarea name="partition_definition" id="partitiondefinition"                cols="<?php echo $GLOBALS['cfg']['TextareaCols'];?>"                rows="<?php echo $GLOBALS['cfg']['TextareaRows'];?>"                dir="<?php echo $GLOBALS['text_dir'];?>"><?php echo (isset($_REQUEST['partition_definition']) ? htmlspecialchars($_REQUEST['partition_definition']) : ''); ?></textarea>        </td>    </tr>        <?php    }    ?>    </table>    <br />    <?php} // end if ($action == 'tbl_create.php')?><fieldset class="tblFooters">    <input type="submit" name="do_save_data" value="<?php echo __('Save'); ?>" /></fieldset><div id="properties_message"></div></form><div id="popup_background"></div>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @todo    we must handle the case if sql.php is called directly with a query *          that returns 0 rows - to prevent cyclic redirects or includes * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/Table.class.php';require_once './libraries/check_user_privileges.lib.php';require_once './libraries/bookmark.lib.php';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'tbl_change.js';// the next one needed because sql.php may do a "goto" to tbl_structure.php$GLOBALS['js_include'][] = 'tbl_structure.js';$GLOBALS['js_include'][] = 'gis_data_editor.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';if (isset($_SESSION['profiling'])) {    $GLOBALS['js_include'][] = 'highcharts/highcharts.js';    /* Files required for chart exporting */    $GLOBALS['js_include'][] = 'highcharts/exporting.js';    /* < IE 9 doesn't support canvas natively */    if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {        $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';    }    $GLOBALS['js_include'][] = 'canvg/canvg.js';}/** * Defines the url to return to in case of error in a sql statement */// Security checkingsif (! empty($goto)) {    $is_gotofile     = preg_replace('@^([^?]+).*$@s', '\\1', $goto);    if (! @file_exists('./' . $is_gotofile)) {        unset($goto);    } else {        $is_gotofile = ($is_gotofile == $goto);    }} else {    $goto = (! strlen($table)) ? $cfg['DefaultTabDatabase'] : $cfg['DefaultTabTable'];    $is_gotofile  = true;} // end ifif (! isset($err_url)) {    $err_url = (! empty($back) ? $back : $goto)             . '?' . PMA_generate_common_url($db)             . ((strpos(' ' . $goto, 'db_') != 1 && strlen($table)) ? '&amp;table=' . urlencode($table) : '');} // end if// Coming from a bookmark dialogif (isset($fields['query'])) {    $sql_query = $fields['query'];}// This one is just to fill $dbif (isset($fields['dbase'])) {    $db = $fields['dbase'];}/** * During grid edit, if we have a relational field, show the dropdown for it * * Logic taken from libraries/display_tbl_lib.php * * This doesn't seem to be the right place to do this, but I can't think of any * better place either. */if (isset($_REQUEST['get_relational_values']) && $_REQUEST['get_relational_values'] == true) {    include_once 'libraries/relation.lib.php';    $column = $_REQUEST['column'];    $foreigners = PMA_getForeigners($db, $table, $column);    $display_field = PMA_getDisplayField($foreigners[$column]['foreign_db'], $foreigners[$column]['foreign_table']);    $foreignData = PMA_getForeignData($foreigners, $column, false, '', '');    if ($_SESSION['tmp_user_values']['relational_display'] == 'D'        && isset($display_field)        && strlen($display_field)        && isset($_REQUEST['relation_key_or_display_column'])        && $_REQUEST['relation_key_or_display_column']    ) {            $curr_value = $_REQUEST['relation_key_or_display_column'];    } else {        $curr_value = $_REQUEST['curr_value'];    }    if ($foreignData['disp_row'] == null) {        //Handle the case when number of values is more than $cfg['ForeignKeyMaxLimit']        $_url_params = array(                'db' => $db,                'table' => $table,                'field' => $column        );        $dropdown = '<span class="curr_value">' . htmlspecialchars($_REQUEST['curr_value']) . '</span> <a href="browse_foreigners.php' . PMA_generate_common_url($_url_params) . '"'                    . ' target="_blank" class="browse_foreign" '                    .'>' . __('Browse foreign values') . '</a>';    } else {        $dropdown = PMA_foreignDropdown($foreignData['disp_row'], $foreignData['foreign_field'], $foreignData['foreign_display'], $curr_value, $cfg['ForeignKeyMaxLimit']);        $dropdown = '<select>' . $dropdown . '</select>';    }    $extra_data['dropdown'] = $dropdown;    PMA_ajaxResponse(null, true, $extra_data);}/** * Just like above, find possible values for enum fields during grid edit. * * Logic taken from libraries/display_tbl_lib.php */if (isset($_REQUEST['get_enum_values']) && $_REQUEST['get_enum_values'] == true) {    $field_info_query = PMA_DBI_get_columns_sql($db, $table, $_REQUEST['column']);    $field_info_result = PMA_DBI_fetch_result($field_info_query, null, null, null, PMA_DBI_QUERY_STORE);    $search = array('enum', '(', ')', "'");    $values = explode(',', str_replace($search, '', $field_info_result[0]['Type']));    $dropdown = '<option value="">&nbsp;</option>';    foreach ($values as $value) {        $dropdown .= '<option value="' . htmlspecialchars($value) . '"';        if ($value == $_REQUEST['curr_value']) {            $dropdown .= ' selected="selected"';        }        $dropdown .= '>' . $value . '</option>';    }    $dropdown = '<select>' . $dropdown . '</select>';    $extra_data['dropdown'] = $dropdown;    PMA_ajaxResponse(null, true, $extra_data);}/** * Find possible values for set fields during grid edit. */if (isset($_REQUEST['get_set_values']) && $_REQUEST['get_set_values'] == true) {    $field_info_query = PMA_DBI_get_columns_sql($db, $table, $_REQUEST['column']);    $field_info_result = PMA_DBI_fetch_result($field_info_query, null, null, null, PMA_DBI_QUERY_STORE);    $selected_values = explode(',', $_REQUEST['curr_value']);    $search = array('set', '(', ')', "'");    $values = explode(',', str_replace($search, '', $field_info_result[0]['Type']));    $select = '';    foreach ($values as $value) {        $select .= '<option value="' . htmlspecialchars($value) . '"';        if (in_array($value, $selected_values, true)) {            $select .= ' selected="selected"';        }        $select .= '>' . $value . '</option>';    }    $select_size = (sizeof($values) > 10) ? 10 : sizeof($values);    $select = '<select multiple="multiple" size="' . $select_size . '">' . $select . '</select>';    $extra_data['select'] = $select;    PMA_ajaxResponse(null, true, $extra_data);}/** * Check ajax request to set the column order */if (isset($_REQUEST['set_col_prefs']) && $_REQUEST['set_col_prefs'] == true) {    $pmatable = new PMA_Table($table, $db);    $retval = false;    // set column order    if (isset($_REQUEST['col_order'])) {        $col_order = explode(',', $_REQUEST['col_order']);        $retval = $pmatable->setUiProp(PMA_Table::PROP_COLUMN_ORDER, $col_order, $_REQUEST['table_create_time']);        if (gettype($retval) != 'boolean') {            PMA_ajaxResponse($retval->getString(), false);        }    }    // set column visibility    if ($retval === true && isset($_REQUEST['col_visib'])) {        $col_visib = explode(',', $_REQUEST['col_visib']);        $retval = $pmatable->setUiProp(PMA_Table::PROP_COLUMN_VISIB, $col_visib, $_REQUEST['table_create_time']);        if (gettype($retval) != 'boolean') {            PMA_ajaxResponse($retval->getString(), false);        }    }    PMA_ajaxResponse(null, ($retval == true));}// Default to browse if no query set and we have table// (needed for browsing from DefaultTabTable)if (empty($sql_query) && strlen($table) && strlen($db)) {    include_once './libraries/bookmark.lib.php';    $book_sql_query = PMA_Bookmark_get(        $db,        '\'' . PMA_sqlAddSlashes($table) . '\'',        'label',        false,        true    );    if (! empty($book_sql_query)) {        $GLOBALS['using_bookmark_message'] = PMA_message::notice(__('Using bookmark "%s" as default browse query.'));        $GLOBALS['using_bookmark_message']->addParam($table);        $GLOBALS['using_bookmark_message']->addMessage(PMA_showDocu('faq6_22'));        $sql_query = $book_sql_query;    } else {        $sql_query = 'SELECT * FROM ' . PMA_backquote($table);    }    unset($book_sql_query);    // set $goto to what will be displayed if query returns 0 rows    $goto = 'tbl_structure.php';} else {    // Now we can check the parameters    PMA_checkParameters(array('sql_query'));}// instead of doing the test twice$is_drop_database = preg_match(    '/DROP[[:space:]]+(DATABASE|SCHEMA)[[:space:]]+/i',    $sql_query);/** * Check rights in case of DROP DATABASE * * This test may be bypassed if $is_js_confirmed = 1 (already checked with js) * but since a malicious user may pass this variable by url/form, we don't take * into account this case. */if (! defined('PMA_CHK_DROP')    && ! $cfg['AllowUserDropDatabase']    && $is_drop_database    && ! $is_superuser) {    include_once './libraries/header.inc.php';    PMA_mysqlDie(__('"DROP DATABASE" statements are disabled.'), '', '', $err_url);} // end ifrequire_once './libraries/display_tbl.lib.php';PMA_displayTable_checkConfigParams();/** * Need to find the real end of rows? */if (isset($find_real_end) && $find_real_end) {    $unlim_num_rows = PMA_Table::countRecords($db, $table, $force_exact = true);    $_SESSION['tmp_user_values']['pos'] = @((ceil($unlim_num_rows / $_SESSION['tmp_user_values']['max_rows']) - 1) * $_SESSION['tmp_user_values']['max_rows']);}/** * Bookmark add */if (isset($store_bkm)) {    PMA_Bookmark_save($fields, (isset($bkm_all_users) && $bkm_all_users == 'true' ? true : false));    // go back to sql.php to redisplay query; do not use &amp; in this case:    PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . $goto . '&label=' . $fields['label']);} // end if/** * Parse and analyze the query */require_once './libraries/parse_analyze.lib.php';/** * Sets or modifies the $goto variable if required */if ($goto == 'sql.php') {    $is_gotofile = false;    $goto = 'sql.php?'          . PMA_generate_common_url($db, $table)          . '&amp;sql_query=' . urlencode($sql_query);} // end if/** * Go back to further page if table should not be dropped */if (isset($btnDrop) && $btnDrop == __('No')) {    if (! empty($back)) {        $goto = $back;    }    if ($is_gotofile) {        if (strpos($goto, 'db_') === 0 && strlen($table)) {            $table = '';        }        $active_page = $goto;        include './' . PMA_securePath($goto);    } else {        PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . str_replace('&amp;', '&', $goto));    }    exit();} // end if/** * Displays the confirm page if required * * This part of the script is bypassed if $is_js_confirmed = 1 (already checked * with js) because possible security issue is not so important here: at most, * the confirm message isn't displayed. * * Also bypassed if only showing php code.or validating a SQL query */if (! $cfg['Confirm']    || isset($_REQUEST['is_js_confirmed'])    || isset($btnDrop)    // if we are coming from a "Create PHP code" or a "Without PHP Code"    // dialog, we won't execute the query anyway, so don't confirm    || isset($GLOBALS['show_as_php'])    || ! empty($GLOBALS['validatequery'])) {    $do_confirm = false;} else {    $do_confirm = isset($analyzed_sql[0]['queryflags']['need_confirm']);}if ($do_confirm) {    $stripped_sql_query = $sql_query;    include_once './libraries/header.inc.php';    if ($is_drop_database) {        echo '<h1 class="error">' . __('You are about to DESTROY a complete database!') . '</h1>';    }    echo '<form action="sql.php" method="post">' . "\n"        .PMA_generate_common_hidden_inputs($db, $table);    ?>    <input type="hidden" name="sql_query" value="<?php echo htmlspecialchars($sql_query); ?>" />    <input type="hidden" name="message_to_show" value="<?php echo isset($message_to_show) ? PMA_sanitize($message_to_show, true) : ''; ?>" />    <input type="hidden" name="goto" value="<?php echo $goto; ?>" />    <input type="hidden" name="back" value="<?php echo isset($back) ? PMA_sanitize($back, true) : ''; ?>" />    <input type="hidden" name="reload" value="<?php echo isset($reload) ? PMA_sanitize($reload, true) : 0; ?>" />    <input type="hidden" name="purge" value="<?php echo isset($purge) ? PMA_sanitize($purge, true) : ''; ?>" />    <input type="hidden" name="dropped_column" value="<?php echo isset($dropped_column) ? PMA_sanitize($dropped_column, true) : ''; ?>" />    <input type="hidden" name="show_query" value="<?php echo isset($show_query) ? PMA_sanitize($show_query, true) : ''; ?>" />    <?php    echo '<fieldset class="confirmation">' . "\n"        .'    <legend>' . __('Do you really want to ') . '</legend>'        .'    <tt>' . htmlspecialchars($stripped_sql_query) . '</tt>' . "\n"        .'</fieldset>' . "\n"        .'<fieldset class="tblFooters">' . "\n";    ?>    <input type="submit" name="btnDrop" value="<?php echo __('Yes'); ?>" id="buttonYes" />    <input type="submit" name="btnDrop" value="<?php echo __('No'); ?>" id="buttonNo" />    <?php    echo '</fieldset>' . "\n"       . '</form>' . "\n";    /**     * Displays the footer and exit     */    include './libraries/footer.inc.php';} // end if $do_confirm// Defines some variables// A table has to be created, renamed, dropped -> navi frame should be reloaded/** * @todo use the parser/analyzer */if (empty($reload)    && preg_match('/^(CREATE|ALTER|DROP)\s+(VIEW|TABLE|DATABASE|SCHEMA)\s+/i', $sql_query)) {    $reload = 1;}// SK -- Patch: $is_group added for use in calculation of total number of//              rows.//              $is_count is changed for more correct "LIMIT" clause//              appending in queries like//                "SELECT COUNT(...) FROM ... GROUP BY ..."/** * @todo detect all this with the parser, to avoid problems finding * those strings in comments or backquoted identifiers */$is_explain = $is_count = $is_export = $is_delete = $is_insert = $is_affected = $is_show = $is_maint = $is_analyse = $is_group = $is_func = $is_replace = false;if ($is_select) { // see line 141    $is_group = preg_match('@(GROUP[[:space:]]+BY|HAVING|SELECT[[:space:]]+DISTINCT)[[:space:]]+@i', $sql_query);    $is_func =  ! $is_group && (preg_match('@[[:space:]]+(SUM|AVG|STD|STDDEV|MIN|MAX|BIT_OR|BIT_AND)\s*\(@i', $sql_query));    $is_count = ! $is_group && (preg_match('@^SELECT[[:space:]]+COUNT\((.*\.+)?.*\)@i', $sql_query));    $is_export   = (preg_match('@[[:space:]]+INTO[[:space:]]+OUTFILE[[:space:]]+@i', $sql_query));    $is_analyse  = (preg_match('@[[:space:]]+PROCEDURE[[:space:]]+ANALYSE@i', $sql_query));} elseif (preg_match('@^EXPLAIN[[:space:]]+@i', $sql_query)) {    $is_explain  = true;} elseif (preg_match('@^DELETE[[:space:]]+@i', $sql_query)) {    $is_delete   = true;    $is_affected = true;} elseif (preg_match('@^(INSERT|LOAD[[:space:]]+DATA|REPLACE)[[:space:]]+@i', $sql_query)) {    $is_insert   = true;    $is_affected = true;    if (preg_match('@^(REPLACE)[[:space:]]+@i', $sql_query)) {        $is_replace = true;    }} elseif (preg_match('@^UPDATE[[:space:]]+@i', $sql_query)) {    $is_affected = true;} elseif (preg_match('@^[[:space:]]*SHOW[[:space:]]+@i', $sql_query)) {    $is_show     = true;} elseif (preg_match('@^(CHECK|ANALYZE|REPAIR|OPTIMIZE)[[:space:]]+TABLE[[:space:]]+@i', $sql_query)) {    $is_maint    = true;}// assign default full_sql_query$full_sql_query = $sql_query;// Handle remembered sorting order, only for single table queryif ($GLOBALS['cfg']['RememberSorting']    && ! ($is_count || $is_export || $is_func || $is_analyse)    && count($analyzed_sql[0]['select_expr']) == 0    && isset($analyzed_sql[0]['queryflags']['select_from'])    && count($analyzed_sql[0]['table_ref']) == 1) {    $pmatable = new PMA_Table($table, $db);    if (empty($analyzed_sql[0]['order_by_clause'])) {        $sorted_col = $pmatable->getUiProp(PMA_Table::PROP_SORTED_COLUMN);        if ($sorted_col) {            // retrieve the remembered sorting order for current table            $sql_order_to_append = ' ORDER BY ' . $sorted_col . ' ';            $full_sql_query = $analyzed_sql[0]['section_before_limit'] . $sql_order_to_append                . $analyzed_sql[0]['section_after_limit'];            // update the $analyzed_sql            $analyzed_sql[0]['section_before_limit'] .= $sql_order_to_append;            $analyzed_sql[0]['order_by_clause'] = $sorted_col;        }    } else {        // store the remembered table into session        $pmatable->setUiProp(PMA_Table::PROP_SORTED_COLUMN, $analyzed_sql[0]['order_by_clause']);    }}// Do append a "LIMIT" clause?if (($_SESSION['tmp_user_values']['max_rows'] != 'all')    && ! ($is_count || $is_export || $is_func || $is_analyse)    && isset($analyzed_sql[0]['queryflags']['select_from'])    && ! isset($analyzed_sql[0]['queryflags']['offset'])    && empty($analyzed_sql[0]['limit_clause'])) {    $sql_limit_to_append = ' LIMIT ' . $_SESSION['tmp_user_values']['pos']        . ', ' . $_SESSION['tmp_user_values']['max_rows'] . " ";    $full_sql_query  = $analyzed_sql[0]['section_before_limit'] . "\n"        . $sql_limit_to_append . $analyzed_sql[0]['section_after_limit'];    /**     * @todo pretty printing of this modified query     */    if (isset($display_query)) {        // if the analysis of the original query revealed that we found        // a section_after_limit, we now have to analyze $display_query        // to display it correctly        if (! empty($analyzed_sql[0]['section_after_limit'])            && trim($analyzed_sql[0]['section_after_limit']) != ';'        ) {            $analyzed_display_query = PMA_SQP_analyze(PMA_SQP_parse($display_query));            $display_query  = $analyzed_display_query[0]['section_before_limit']                . "\n" . $sql_limit_to_append . $analyzed_display_query[0]['section_after_limit'];        }    }}if (strlen($db)) {    PMA_DBI_select_db($db);}//  E x e c u t e    t h e    q u e r y// Only if we didn't ask to see the php code (mikebeck)if (isset($GLOBALS['show_as_php']) || ! empty($GLOBALS['validatequery'])) {    unset($result);    $num_rows = 0;    $unlim_num_rows = 0;} else {    if (isset($_SESSION['profiling']) && PMA_profilingSupported()) {        PMA_DBI_query('SET PROFILING=1;');    }    // Measure query time.    $querytime_before = array_sum(explode(' ', microtime()));    $result   = @PMA_DBI_try_query($full_sql_query, null, PMA_DBI_QUERY_STORE);    // If a stored procedure was called, there may be more results that are    // queued up and waiting to be flushed from the buffer. So let's do that.    while (true) {        if (! PMA_DBI_more_results()) {            break;        }        PMA_DBI_next_result();    }    $querytime_after = array_sum(explode(' ', microtime()));    $GLOBALS['querytime'] = $querytime_after - $querytime_before;    // Displays an error message if required and stop parsing the script    if ($error        = PMA_DBI_getError()) {        if ($is_gotofile) {            if (strpos($goto, 'db_') === 0 && strlen($table)) {                $table = '';            }            $active_page = $goto;            $message = PMA_Message::rawError($error);            if ($GLOBALS['is_ajax_request'] == true) {                PMA_ajaxResponse($message, false);            }            /**             * Go to target path.             */            include './' . PMA_securePath($goto);        } else {            $full_err_url = (preg_match('@^(db|tbl)_@', $err_url))                          ? $err_url . '&amp;show_query=1&amp;sql_query=' . urlencode($sql_query)                          : $err_url;            PMA_mysqlDie($error, $full_sql_query, '', $full_err_url);        }        exit;    }    unset($error);    // Gets the number of rows affected/returned    // (This must be done immediately after the query because    // mysql_affected_rows() reports about the last query done)    if (! $is_affected) {        $num_rows = ($result) ? @PMA_DBI_num_rows($result) : 0;    } elseif (! isset($num_rows)) {        $num_rows = @PMA_DBI_affected_rows();    }    // Grabs the profiling results    if (isset($_SESSION['profiling']) && PMA_profilingSupported()) {        $profiling_results = PMA_DBI_fetch_result('SHOW PROFILE;');    }    // Checks if the current database has changed    // This could happen if the user sends a query like "USE `database`;"    /**     * commented out auto-switching to active database - really required?     * bug #1814718 win: table list disappears (mixed case db names)     * https://sourceforge.net/support/tracker.php?aid=1814718     * @todo RELEASE test and comit or rollback before release    $current_db = PMA_DBI_fetch_value('SELECT DATABASE()');    if ($db !== $current_db) {        $db     = $current_db;        $reload = 1;    }    unset($current_db);     */    // tmpfile remove after convert encoding appended by Y.Kawada    if (function_exists('PMA_kanji_file_conv')        && (isset($textfile) && file_exists($textfile))    ) {        unlink($textfile);    }    // Counts the total number of rows for the same 'SELECT' query without the    // 'LIMIT' clause that may have been programatically added    if (empty($sql_limit_to_append)) {        $unlim_num_rows         = $num_rows;        // if we did not append a limit, set this to get a correct        // "Showing rows..." message        //$_SESSION['tmp_user_values']['max_rows'] = 'all';    } elseif ($is_select) {        //    c o u n t    q u e r y        // If we are "just browsing", there is only one table,        // and no WHERE clause (or just 'WHERE 1 '),        // we do a quick count (which uses MaxExactCount) because        // SQL_CALC_FOUND_ROWS is not quick on large InnoDB tables        // However, do not count again if we did it previously        // due to $find_real_end == true        if (! $is_group            && ! isset($analyzed_sql[0]['queryflags']['union'])            && ! isset($analyzed_sql[0]['queryflags']['distinct'])            && ! isset($analyzed_sql[0]['table_ref'][1]['table_name'])            && (empty($analyzed_sql[0]['where_clause']) || $analyzed_sql[0]['where_clause'] == '1 ')            && ! isset($find_real_end)        ) {            // "j u s t   b r o w s i n g"            $unlim_num_rows = PMA_Table::countRecords($db, $table);        } else { // n o t   " j u s t   b r o w s i n g "            // add select expression after the SQL_CALC_FOUND_ROWS            // for UNION, just adding SQL_CALC_FOUND_ROWS            // after the first SELECT works.            // take the left part, could be:            // SELECT            // (SELECT            $count_query = PMA_SQP_formatHtml($parsed_sql, 'query_only', 0, $analyzed_sql[0]['position_of_first_select'] + 1);            $count_query .= ' SQL_CALC_FOUND_ROWS ';            // add everything that was after the first SELECT            $count_query .= PMA_SQP_formatHtml($parsed_sql, 'query_only', $analyzed_sql[0]['position_of_first_select'] + 1);            // ensure there is no semicolon at the end of the            // count query because we'll probably add            // a LIMIT 1 clause after it            $count_query = rtrim($count_query);            $count_query = rtrim($count_query, ';');            // if using SQL_CALC_FOUND_ROWS, add a LIMIT to avoid            // long delays. Returned count will be complete anyway.            // (but a LIMIT would disrupt results in an UNION)            if (! isset($analyzed_sql[0]['queryflags']['union'])) {                $count_query .= ' LIMIT 1';            }            // run the count query            PMA_DBI_try_query($count_query);            // if (mysql_error()) {            // void.            // I tried the case            // (SELECT `User`, `Host`, `Db`, `Select_priv` FROM `db`)            // UNION (SELECT `User`, `Host`, "%" AS "Db",            // `Select_priv`            // FROM `user`) ORDER BY `User`, `Host`, `Db`;            // and although the generated count_query is wrong            // the SELECT FOUND_ROWS() work! (maybe it gets the            // count from the latest query that worked)            //            // another case where the count_query is wrong:            // SELECT COUNT(*), f1 from t1 group by f1            // and you click to sort on count(*)            // }            $unlim_num_rows = PMA_DBI_fetch_value('SELECT FOUND_ROWS()');        } // end else "just browsing"    } else { // not $is_select         $unlim_num_rows         = 0;    } // end rows total count    // if a table or database gets dropped, check column comments.    if (isset($purge) && $purge == '1') {        /**         * Cleanup relations.         */        include_once './libraries/relation_cleanup.lib.php';        if (strlen($table) && strlen($db)) {            PMA_relationsCleanupTable($db, $table);        } elseif (strlen($db)) {            PMA_relationsCleanupDatabase($db);        } else {            // VOID. No DB/Table gets deleted.        } // end if relation-stuff    } // end if ($purge)    // If a column gets dropped, do relation magic.    if (isset($dropped_column) && strlen($db) && strlen($table) && ! empty($dropped_column)) {        include_once './libraries/relation_cleanup.lib.php';        PMA_relationsCleanupColumn($db, $table, $dropped_column);        // to refresh the list of indexes (Ajax mode)        $extra_data['indexes_list'] = PMA_Index::getView($table, $db);    } // end if column was dropped} // end else "didn't ask to see php code"// No rows returned -> move back to the calling pageif ((0 == $num_rows && 0 == $unlim_num_rows) || $is_affected) {    if ($is_delete) {        $message = PMA_Message::deleted_rows($num_rows);    } elseif ($is_insert) {        if ($is_replace) {            /* For replace we get DELETED + INSERTED row count, so we have to call it affected */            $message = PMA_Message::affected_rows($num_rows);        } else {            $message = PMA_Message::inserted_rows($num_rows);        }        $insert_id = PMA_DBI_insert_id();        if ($insert_id != 0) {            // insert_id is id of FIRST record inserted in one insert, so if we inserted multiple rows, we had to increment this            $message->addMessage('[br]');            // need to use a temporary because the Message class            // currently supports adding parameters only to the first            // message            $_inserted = PMA_Message::notice(__('Inserted row id: %1$d'));            $_inserted->addParam($insert_id + $num_rows - 1);            $message->addMessage($_inserted);        }    } elseif ($is_affected) {        $message = PMA_Message::affected_rows($num_rows);        // Ok, here is an explanation for the !$is_select.        // The form generated by sql_query_form.lib.php        // and db_sql.php has many submit buttons        // on the same form, and some confusion arises from the        // fact that $message_to_show is sent for every case.        // The $message_to_show containing a success message and sent with        // the form should not have priority over errors    } elseif (! empty($message_to_show) && ! $is_select) {        $message = PMA_Message::rawSuccess(htmlspecialchars($message_to_show));    } elseif (! empty($GLOBALS['show_as_php'])) {        $message = PMA_Message::success(__('Showing as PHP code'));    } elseif (isset($GLOBALS['show_as_php'])) {        /* User disable showing as PHP, query is only displayed */        $message = PMA_Message::notice(__('Showing SQL query'));    } elseif (! empty($GLOBALS['validatequery'])) {        $message = PMA_Message::notice(__('Validated SQL'));    } else {        $message = PMA_Message::success(__('MySQL returned an empty result set (i.e. zero rows).'));    }    if (isset($GLOBALS['querytime'])) {        $_querytime = PMA_Message::notice(__('Query took %01.4f sec'));        $_querytime->addParam($GLOBALS['querytime']);        $message->addMessage('(');        $message->addMessage($_querytime);        $message->addMessage(')');    }    if ($GLOBALS['is_ajax_request'] == true) {        if ($cfg['ShowSQL']) {            $extra_data['sql_query'] = PMA_showMessage($message, $GLOBALS['sql_query'], 'success');        }        if (isset($GLOBALS['reload']) && $GLOBALS['reload'] == 1) {            $extra_data['reload'] = 1;            $extra_data['db'] = $GLOBALS['db'];        }        PMA_ajaxResponse($message, $message->isSuccess(), (isset($extra_data) ? $extra_data : ''));    }    if ($is_gotofile) {        $goto = PMA_securePath($goto);        // Checks for a valid target script        $is_db = $is_table = false;        if (isset($_REQUEST['purge']) && $_REQUEST['purge'] == '1') {            $table = '';            unset($url_params['table']);        }        include 'libraries/db_table_exists.lib.php';        if (strpos($goto, 'tbl_') === 0 && ! $is_table) {            if (strlen($table)) {                $table = '';            }            $goto = 'db_sql.php';        }        if (strpos($goto, 'db_') === 0 && ! $is_db) {            if (strlen($db)) {                $db = '';            }            $goto = 'main.php';        }        // Loads to target script        if ($goto != 'main.php') {            include_once './libraries/header.inc.php';        }        $active_page = $goto;        include './' . $goto;    } else {        // avoid a redirect loop when last record was deleted        if (0 == $num_rows && 'sql.php' == $cfg['DefaultTabTable']) {            $goto = str_replace('sql.php', 'tbl_structure.php', $goto);        }        PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . str_replace('&amp;', '&', $goto) . '&message=' . urlencode($message));    } // end else    exit();// end no rows returned} else {    // At least one row is returned -> displays a table with results    //If we are retrieving the full value of a truncated field or the original    // value of a transformed field, show it here and exit    if ($GLOBALS['grid_edit'] == true && $GLOBALS['cfg']['AjaxEnable']) {        $row = PMA_DBI_fetch_row($result);        $extra_data = array();        $extra_data['value'] = $row[0];        PMA_ajaxResponse(null, true, $extra_data);    }    if (isset($_REQUEST['ajax_request']) && isset($_REQUEST['table_maintenance'])) {        $GLOBALS['js_include'][] = 'functions.js';        $GLOBALS['js_include'][] = 'makegrid.js';        $GLOBALS['js_include'][] = 'sql.js';        // Gets the list of fields properties        if (isset($result) && $result) {            $fields_meta = PMA_DBI_get_fields_meta($result);            $fields_cnt  = count($fields_meta);        }        if (empty($disp_mode)) {            // see the "PMA_setDisplayMode()" function in            // libraries/display_tbl.lib.php            $disp_mode = 'urdr111101';        }        // hide edit and delete links for information_schema        if (PMA_is_system_schema($db)) {            $disp_mode = 'nnnn110111';        }        $message = PMA_Message::success($message);        echo PMA_showMessage($message, $GLOBALS['sql_query'], 'success');        PMA_displayTable($result, $disp_mode, $analyzed_sql);        exit();    }    // Displays the headers    if (isset($show_query)) {        unset($show_query);    }    if (isset($printview) && $printview == '1') {        include_once './libraries/header_printview.inc.php';    } else {        $GLOBALS['js_include'][] = 'functions.js';        $GLOBALS['js_include'][] = 'makegrid.js';        $GLOBALS['js_include'][] = 'sql.js';        unset($message);        if (! $GLOBALS['is_ajax_request'] || ! $GLOBALS['cfg']['AjaxEnable']) {            if (strlen($table)) {                include './libraries/tbl_common.php';                $url_query .= '&amp;goto=tbl_sql.php&amp;back=tbl_sql.php';                include './libraries/tbl_info.inc.php';                include './libraries/tbl_links.inc.php';            } elseif (strlen($db)) {                include './libraries/db_common.inc.php';                include './libraries/db_info.inc.php';            } else {                include './libraries/server_common.inc.php';                include './libraries/server_links.inc.php';            }        } else {            include_once './libraries/header.inc.php';            //we don't need to buffer the output in PMA_showMessage here.            //set a global variable and check against it in the function            $GLOBALS['buffer_message'] = false;        }    }    if (strlen($db)) {        $cfgRelation = PMA_getRelationsParam();    }    // Gets the list of fields properties    if (isset($result) && $result) {        $fields_meta = PMA_DBI_get_fields_meta($result);        $fields_cnt  = count($fields_meta);    }    if (! $GLOBALS['is_ajax_request']) {        //begin the sqlqueryresults div here. container div        echo '<div id="sqlqueryresults"';        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax"';        }        echo '>';    }    // Display previous update query (from tbl_replace)    if (isset($disp_query) && $cfg['ShowSQL'] == true) {        PMA_showMessage($disp_message, $disp_query, 'success');    }    if (isset($profiling_results)) {        // pma_token/url_query needed for chart export?><script type="text/javascript">pma_token = '<?php echo $_SESSION[' PMA_token ']; ?>';url_query = '<?php echo isset($url_query)?$url_query:PMA_generate_common_url($db);?>';$(document).ready(makeProfilingChart);</script><?php        echo '<fieldset><legend>' . __('Profiling') . '</legend>' . "\n";        echo '<div style="float: left;">';        echo '<table>' . "\n";        echo ' <tr>' .  "\n";        echo '  <th>' . __('Status') . PMA_showMySQLDocu('general-thread-states', 'general-thread-states') .  '</th>' . "\n";        echo '  <th>' . __('Time') . '</th>' . "\n";        echo ' </tr>' .  "\n";        $chart_json = Array();        foreach ($profiling_results as $one_result) {            echo ' <tr>' .  "\n";            echo '<td>' . ucwords($one_result['Status']) . '</td>' .  "\n";            echo '<td align="right">' . (PMA_formatNumber($one_result['Duration'], 3, 1)) . 's</td>' .  "\n";            $chart_json[ucwords($one_result['Status'])] = $one_result['Duration'];        }        echo '</table>' . "\n";        echo '</div>';        //require_once './libraries/chart.lib.php';        echo '<div id="profilingchart" style="display:none;">';        //PMA_chart_profiling($profiling_results);        echo json_encode($chart_json);        echo '</div>';        echo '</fieldset>' . "\n";    }    // Displays the results in a table    if (empty($disp_mode)) {        // see the "PMA_setDisplayMode()" function in        // libraries/display_tbl.lib.php        $disp_mode = 'urdr111101';    }    // hide edit and delete links for information_schema    if (PMA_is_system_schema($db)) {        $disp_mode = 'nnnn110111';    }    if (isset($label)) {        $message = PMA_message::success(__('Bookmark %s created'));        $message->addParam($label);        $message->display();    }    PMA_displayTable($result, $disp_mode, $analyzed_sql);    PMA_DBI_free_result($result);    // BEGIN INDEX CHECK See if indexes should be checked.    if (isset($query_type) && $query_type == 'check_tbl' && isset($selected) && is_array($selected)) {        foreach ($selected as $idx => $tbl_name) {            $check = PMA_Index::findDuplicates($tbl_name, $db);            if (! empty($check)) {                printf(__('Problems with indexes of table `%s`'), $tbl_name);                echo $check;            }        }    } // End INDEX CHECK    // Bookmark support if required    if ($disp_mode[7] == '1'        && (! empty($cfg['Bookmark']) && empty($id_bookmark))        && ! empty($sql_query)    ) {        echo "\n";        $goto = 'sql.php?'              . PMA_generate_common_url($db, $table)              . '&amp;sql_query=' . urlencode($sql_query)              . '&amp;id_bookmark=1';        ?><form action="sql.php" method="post" onsubmit="return emptyFormElements(this, 'fields[label]');"><?php echo PMA_generate_common_hidden_inputs(); ?><input type="hidden" name="goto" value="<?php echo $goto; ?>" /><input type="hidden" name="fields[dbase]" value="<?php echo htmlspecialchars($db); ?>" /><input type="hidden" name="fields[user]" value="<?php echo $cfg['Bookmark']['user']; ?>" /><input type="hidden" name="fields[query]" value="<?php echo urlencode(isset($complete_query) ? $complete_query : $sql_query); ?>" /><fieldset>    <legend><?php    echo PMA_getIcon('b_bookmark.png', __('Bookmark this SQL query'), true);?>    </legend>    <div class="formelement">        <label for="fields_label_"><?php echo __('Label'); ?>:</label>        <input type="text" id="fields_label_" name="fields[label]" value="" />    </div>    <div class="formelement">        <input type="checkbox" name="bkm_all_users" id="bkm_all_users" value="true" />        <label for="bkm_all_users"><?php echo __('Let every user access this bookmark'); ?></label>    </div>    <div class="clearfloat"></div></fieldset><fieldset class="tblFooters">    <input type="submit" name="store_bkm" value="<?php echo __('Bookmark this SQL query'); ?>" /></fieldset></form>        <?php    } // end bookmark support    // Do print the page if required    if (isset($printview) && $printview == '1') {        PMA_printButton();    } // end print case    if ($GLOBALS['is_ajax_request'] != true) {        echo '</div>'; // end sqlqueryresults div    }} // end rows returned/** * Displays the footer */if (! isset($_REQUEST['table_maintenance'])) {    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build SQL dumps of tables * * @package PhpMyAdmin-Export * @subpackage SQL */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $hide_sql       = false;    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && !$plugin_param['single_table']) {        $hide_structure = true;        $hide_sql       = true;    }    if (!$hide_sql) {        $plugin_list['sql'] = array(            'text' => __('SQL'),            'extension' => 'sql',            'mime_type' => 'text/x-sql',            'options' => array());        $plugin_list['sql']['options'][] = array(            'type' => 'begin_group',            'name' => 'general_opts');        /* comments */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'bool',                'name' => 'include_comments',                'text' => __('Display comments <i>(includes info such as export timestamp, PHP version, and server version)</i>')            ));        $plugin_list['sql']['options'][] = array(            'type' => 'text',            'name' => 'header_comment',            'text' => __('Additional custom header comment (\n splits lines):')            );        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'dates',            'text' => __('Include a timestamp of when databases were created, last updated, and last checked')            );        if (!empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'relation',                'text' => __('Display foreign key relationships')                );        }        if (!empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'mime',                'text' => __('Display MIME types')                );        }        $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        /* end comments */        /* enclose in a transaction */        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'use_transaction',            'text' => __('Enclose export in a transaction'),            'doc' => array('programs', 'mysqldump', 'option_mysqldump_single-transaction')            );        /* disable foreign key checks */        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'disable_fk',            'text' => __('Disable foreign key checks'),            'doc' => array(                'manual_MySQL_Database_Administration',                'server-system-variables',                'sysvar_foreign_key_checks')            );        $plugin_list['sql']['options_text'] = __('Options');        /* compatibility maximization */        $compats = PMA_DBI_getCompatibilities();        if (count($compats) > 0) {            $values = array();            foreach ($compats as $val) {                $values[$val] = $val;            }            $plugin_list['sql']['options'][] = array(                'type' => 'select',                'name' => 'compatibility',                'text' => __('Database system or older MySQL server to maximize output compatibility with:'),                'values' => $values,                'doc' => array(                    'manual_MySQL_Database_Administration',                    'Server_SQL_mode')                );            unset($values);        }        /* server export options */        if ($plugin_param['export_type'] == 'server') {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'drop_database',                'text' => sprintf(__('Add %s statement'), '<code>DROP DATABASE</code>')                );         }        /* what to dump (structure/data/both) */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'message_only',                'text' => __('Dump table')            ));        $plugin_list['sql']['options'][] = array(            'type' => 'radio',            'name' => 'structure_or_data',            'values' => array(                'structure' => __('structure'),                'data' => __('data'),                'structure_and_data' => __('structure and data')            ));        $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        $plugin_list['sql']['options'][] = array('type' => 'end_group');        /* begin Structure options */        if (!$hide_structure) {            $plugin_list['sql']['options'][] = array(                'type' => 'begin_group',                'name' => 'structure',                'text' => __('Object creation options'),                'force' => 'data'                );            /* begin SQL Statements */            $plugin_list['sql']['options'][] = array(                'type' => 'begin_subgroup',                'subgroup_header' => array(                    'type' => 'message_only',                    'name' => 'add_statements',                    'text' => __('Add statements:')                ));            if ($plugin_param['export_type'] == 'table') {                if (PMA_Table::isView($GLOBALS['db'], $GLOBALS['table'])) {                    $drop_clause = '<code>DROP VIEW</code>';                } else {                    $drop_clause = '<code>DROP TABLE</code>';                }            } else {                if (PMA_DRIZZLE) {                    $drop_clause = '<code>DROP TABLE</code>';                } else {                    $drop_clause = '<code>DROP TABLE / VIEW / PROCEDURE / FUNCTION</code>';                    if (PMA_MYSQL_INT_VERSION > 50100) {                        $drop_clause .= '<code> / EVENT</code>';                    }                }            }            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'drop_table',                'text' => sprintf(__('Add %s statement'), $drop_clause)                );            // Drizzle doesn't support procedures and functions            if (!PMA_DRIZZLE) {                $plugin_list['sql']['options'][] = array(                    'type' => 'bool',                    'name' => 'procedure_function',                    'text' => sprintf(__('Add %s statement'), '<code>CREATE PROCEDURE / FUNCTION' . (PMA_MYSQL_INT_VERSION > 50100 ? ' / EVENT</code>' : '</code>'))                    );            }            /* begin CREATE TABLE statements*/            $plugin_list['sql']['options'][] = array(                'type' => 'begin_subgroup',                'subgroup_header' => array(                    'type' => 'bool',                    'name' => 'create_table_statements',                    'text' => __('<code>CREATE TABLE</code> options:')                ));            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'if_not_exists',                'text' => '<code>IF NOT EXISTS</code>'                );            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'auto_increment',                'text' => '<code>AUTO_INCREMENT</code>'                );            $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');            /* end CREATE TABLE statements */            $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');            /* end SQL statements */            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'backquotes',                'text' => __('Enclose table and column names with backquotes <i>(Protects column and table names formed with special characters or keywords)</i>')                );            $plugin_list['sql']['options'][] = array('type' => 'end_group');        }        /* end Structure options */        /* begin Data options */         $plugin_list['sql']['options'][] = array(            'type' => 'begin_group',            'name' => 'data',            'text' => __('Data dump options'),            'force' => 'structure'            );        /* begin SQL statements */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'message_only',                'text' => __('Instead of <code>INSERT</code> statements, use:')            ));        // Not supported in Drizzle        if (!PMA_DRIZZLE) {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'delayed',                'text' => __('<code>INSERT DELAYED</code> statements'),                'doc' => array('manual_MySQL_Database_Administration', 'insert_delayed')                );        }        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'ignore',            'text' => __('<code>INSERT IGNORE</code> statements'),            'doc' => array('manual_MySQL_Database_Administration', 'insert')            );        $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        /* end SQL statements */        /* Function to use when dumping data */        $plugin_list['sql']['options'][] = array(            'type' => 'select',            'name' => 'type',            'text' => __('Function to use when dumping data:'),            'values' => array(                'INSERT' => 'INSERT',                'UPDATE' => 'UPDATE',                'REPLACE' => 'REPLACE'                )            );        /* Syntax to use when inserting data */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'message_only',                'text' => __('Syntax to use when inserting data:')            ));        $plugin_list['sql']['options'][] = array(            'type' => 'radio',            'name' => 'insert_syntax',            'values' => array(                'complete' => __('include column names in every <code>INSERT</code> statement <br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name (col_A,col_B,col_C) VALUES (1,2,3)</code>'),                'extended' => __('insert multiple rows in every <code>INSERT</code> statement<br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name VALUES (1,2,3), (4,5,6), (7,8,9)</code>'),                'both' => __('both of the above<br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name (col_A,col_B) VALUES (1,2,3), (4,5,6), (7,8,9)</code>'),                'none' => __('neither of the above<br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name VALUES (1,2,3)</code>')            ));          $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        /* Max length of query */        $plugin_list['sql']['options'][] = array(            'type' => 'text',            'name' => 'max_query_size',            'text' => __('Maximal length of created query')            );        /* Dump binary columns in hexadecimal */        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'hex_for_blob',            'text' => __('Dump binary columns in hexadecimal notation <i>(for example, "abc" becomes 0x616263)</i>')            );        // Drizzle works only with UTC timezone        if (!PMA_DRIZZLE) {            /* Dump time in UTC */            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'utc_time',                'text' => __('Dump TIMESTAMP columns in UTC <i>(enables TIMESTAMP columns to be dumped and reloaded between servers in different time zones)</i>')                );        }        $plugin_list['sql']['options'][] = array('type' => 'end_group');         /* end Data options */    }} else {    /**     * Avoids undefined variables, use NULL so isset() returns false     */    if (! isset($GLOBALS['sql_backquotes'])) {        $GLOBALS['sql_backquotes'] = null;    }    /**     * Exports routines (procedures and functions)     *     * @param string  $db     * @return  bool  Whether it succeeded     *     * @access  public     */    function PMA_exportRoutines($db) {        global $crlf;        $text = '';        $delimiter = '$$';        $procedure_names = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');        $function_names = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');        if ($procedure_names || $function_names) {            $text .= $crlf                . 'DELIMITER ' . $delimiter . $crlf;        }        if ($procedure_names) {            $text .=                PMA_exportComment()              . PMA_exportComment(__('Procedures'))              . PMA_exportComment();            foreach ($procedure_names as $procedure_name) {                if (! empty($GLOBALS['sql_drop_table'])) {                    $text .= 'DROP PROCEDURE IF EXISTS '                        . PMA_backquote($procedure_name)                        . $delimiter . $crlf;                }                $text .= PMA_DBI_get_definition($db, 'PROCEDURE', $procedure_name)                    . $delimiter . $crlf . $crlf;            }        }        if ($function_names) {            $text .=                PMA_exportComment()              . PMA_exportComment(__('Functions'))              . PMA_exportComment();            foreach ($function_names as $function_name) {                if (! empty($GLOBALS['sql_drop_table'])) {                    $text .= 'DROP FUNCTION IF EXISTS '                        . PMA_backquote($function_name)                        . $delimiter . $crlf;                }                $text .= PMA_DBI_get_definition($db, 'FUNCTION', $function_name)                    . $delimiter . $crlf . $crlf;            }        }        if ($procedure_names || $function_names) {            $text .= 'DELIMITER ;' . $crlf;        }        if (! empty($text)) {            return PMA_exportOutputHandler($text);        } else {            return false;        }    }    /**     * Possibly outputs comment     *     * @param string  $text  Text of comment     * @return  string      The formatted comment     *     * @access  private     */    function PMA_exportComment($text = '')    {        if (isset($GLOBALS['sql_include_comments']) && $GLOBALS['sql_include_comments']) {            // see http://dev.mysql.com/doc/refman/5.0/en/ansi-diff-comments.html            return '--' . (empty($text) ? '' : ' ') . $text . $GLOBALS['crlf'];        } else {            return '';        }    }    /**     * Possibly outputs CRLF     *     * @return  string  $crlf or nothing     *     * @access private     */    function PMA_possibleCRLF()    {        if (isset($GLOBALS['sql_include_comments']) && $GLOBALS['sql_include_comments']) {            return $GLOBALS['crlf'];        } else {            return '';        }    }    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        global $crlf;        global $mysql_charset_map;        $foot = '';        if (isset($GLOBALS['sql_disable_fk'])) {            $foot .=  'SET FOREIGN_KEY_CHECKS=1;' . $crlf;        }        if (isset($GLOBALS['sql_use_transaction'])) {            $foot .=  'COMMIT;' . $crlf;        }        // restore connection settings        $charset_of_file = isset($GLOBALS['charset_of_file']) ? $GLOBALS['charset_of_file'] : '';        if (!empty($GLOBALS['asfile']) && isset($mysql_charset_map[$charset_of_file]) && !PMA_DRIZZLE) {            $foot .=  $crlf                    . '/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;' . $crlf                    . '/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;' . $crlf                    . '/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;' . $crlf;        }        /* Restore timezone */        if (isset($GLOBALS['sql_utc_time']) && $GLOBALS['sql_utc_time']) {            PMA_DBI_query('SET time_zone = "' . $GLOBALS['old_tz'] . '"');        }        return PMA_exportOutputHandler($foot);    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        global $crlf;        global $cfg;        global $mysql_charset_map;        if (isset($GLOBALS['sql_compatibility'])) {            $tmp_compat = $GLOBALS['sql_compatibility'];            if ($tmp_compat == 'NONE') {                $tmp_compat = '';            }            PMA_DBI_try_query('SET SQL_MODE="' . $tmp_compat . '"');            unset($tmp_compat);        }        $head  =  PMA_exportComment('phpMyAdmin SQL Dump')               .  PMA_exportComment('version ' . PMA_VERSION)               .  PMA_exportComment('http://www.phpmyadmin.net')               .  PMA_exportComment();        $host_string = __('Host') . ': ' .  $cfg['Server']['host'];        if (!empty($cfg['Server']['port'])) {            $host_string .= ':' . $cfg['Server']['port'];        }        $head .= PMA_exportComment($host_string);        $head .= PMA_exportComment(__('Generation Time')              . ': ' .  PMA_localisedDate())              .  PMA_exportComment(__('Server version') . ': ' . PMA_MYSQL_STR_VERSION)              .  PMA_exportComment(__('PHP Version') . ': ' . phpversion())              .  PMA_possibleCRLF();        if (isset($GLOBALS['sql_header_comment']) && !empty($GLOBALS['sql_header_comment'])) {            // '\n' is not a newline (like "\n" would be), it's the characters            // backslash and n, as explained on the export interface            $lines = explode('\n', $GLOBALS['sql_header_comment']);            $head .= PMA_exportComment();            foreach ($lines as $one_line) {                $head .= PMA_exportComment($one_line);            }            $head .= PMA_exportComment();        }        if (isset($GLOBALS['sql_disable_fk'])) {            $head .= 'SET FOREIGN_KEY_CHECKS=0;' . $crlf;        }        /* We want exported AUTO_INCREMENT columns to have still same value, do this only for recent MySQL exports */        if ((!isset($GLOBALS['sql_compatibility']) || $GLOBALS['sql_compatibility'] == 'NONE')                && !PMA_DRIZZLE) {            $head .= 'SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";' . $crlf;        }        if (isset($GLOBALS['sql_use_transaction'])) {            $head .= 'SET AUTOCOMMIT=0;' . $crlf                   . 'START TRANSACTION;' . $crlf;        }        /* Change timezone if we should export timestamps in UTC */        if (isset($GLOBALS['sql_utc_time']) && $GLOBALS['sql_utc_time']) {            $head .= 'SET time_zone = "+00:00";' . $crlf;            $GLOBALS['old_tz'] = PMA_DBI_fetch_value('SELECT @@session.time_zone');            PMA_DBI_query('SET time_zone = "+00:00"');        }        $head .= PMA_possibleCRLF();        if (! empty($GLOBALS['asfile']) && !PMA_DRIZZLE) {            // we are saving as file, therefore we provide charset information            // so that a utility like the mysql client can interpret            // the file correctly            if (isset($GLOBALS['charset_of_file']) && isset($mysql_charset_map[$GLOBALS['charset_of_file']])) {                // we got a charset from the export dialog                $set_names = $mysql_charset_map[$GLOBALS['charset_of_file']];            } else {                // by default we use the connection charset                $set_names = $mysql_charset_map['utf-8'];            }            $head .=  $crlf                   . '/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;' . $crlf                   . '/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;' . $crlf                   . '/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;' . $crlf                   . '/*!40101 SET NAMES ' . $set_names . ' */;' . $crlf . $crlf;        }        return PMA_exportOutputHandler($head);    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        global $crlf;        if (isset($GLOBALS['sql_drop_database'])) {            if (!PMA_exportOutputHandler('DROP DATABASE ' . (isset($GLOBALS['sql_backquotes']) ? PMA_backquote($db) : $db) . ';' . $crlf)) {                return false;            }        }        $create_query = 'CREATE DATABASE ' . (isset($GLOBALS['sql_backquotes']) ? PMA_backquote($db) : $db);        $collation = PMA_getDbCollation($db);        if (PMA_DRIZZLE) {            $create_query .= ' COLLATE ' . $collation;        } else {            if (strpos($collation, '_')) {                $create_query .= ' DEFAULT CHARACTER SET ' . substr($collation, 0, strpos($collation, '_')) . ' COLLATE ' . $collation;            } else {                $create_query .= ' DEFAULT CHARACTER SET ' . $collation;            }        }        $create_query .= ';' . $crlf;        if (!PMA_exportOutputHandler($create_query)) {            return false;        }        if (isset($GLOBALS['sql_backquotes'])                && ((isset($GLOBALS['sql_compatibility']) && $GLOBALS['sql_compatibility'] == 'NONE') || PMA_DRIZZLE)) {            $result = PMA_exportOutputHandler('USE ' . PMA_backquote($db) . ';' . $crlf);        } else {            $result = PMA_exportOutputHandler('USE ' . $db . ';' . $crlf);        }        return $result;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        $head = PMA_exportComment()              . PMA_exportComment(__('Database') . ': ' . (isset($GLOBALS['sql_backquotes']) ? PMA_backquote($db) : '\'' . $db . '\''))              . PMA_exportComment();        return PMA_exportOutputHandler($head);    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        global $crlf;        $result = true;        if (isset($GLOBALS['sql_constraints'])) {            $result = PMA_exportOutputHandler($GLOBALS['sql_constraints']);            unset($GLOBALS['sql_constraints']);        }        if (($GLOBALS['sql_structure_or_data'] == 'structure' || $GLOBALS['sql_structure_or_data'] == 'structure_and_data') && isset($GLOBALS['sql_procedure_function'])) {            $text = '';            $delimiter = '$$';            if (PMA_MYSQL_INT_VERSION > 50100) {                $event_names = PMA_DBI_fetch_result('SELECT EVENT_NAME FROM information_schema.EVENTS WHERE EVENT_SCHEMA= \'' . PMA_sqlAddSlashes($db, true) . '\';');            } else {                $event_names = array();            }            if ($event_names) {                $text .= $crlf                  . 'DELIMITER ' . $delimiter . $crlf;                $text .=                    PMA_exportComment()                  . PMA_exportComment(__('Events'))                  . PMA_exportComment();                foreach ($event_names as $event_name) {                    if (! empty($GLOBALS['sql_drop_table'])) {                $text .= 'DROP EVENT ' . PMA_backquote($event_name) . $delimiter . $crlf;                    }                    $text .= PMA_DBI_get_definition($db, 'EVENT', $event_name) . $delimiter . $crlf . $crlf;                }                $text .= 'DELIMITER ;' . $crlf;            }            if (! empty($text)) {                $result = PMA_exportOutputHandler($text);            }        }        return $result;    }    /**     * Returns a stand-in CREATE definition to resolve view dependencies     *     * @param string  $db    the database name     * @param string  $view  the view name     * @param string  $crlf  the end of line sequence     * @return  string         resulting definition     *     * @access  public     */    function PMA_getTableDefStandIn($db, $view, $crlf) {        $create_query = '';        if (! empty($GLOBALS['sql_drop_table'])) {            $create_query .= 'DROP VIEW IF EXISTS ' . PMA_backquote($view) . ';' . $crlf;        }        $create_query .= 'CREATE TABLE ';        if (isset($GLOBALS['sql_if_not_exists']) && $GLOBALS['sql_if_not_exists']) {            $create_query .= 'IF NOT EXISTS ';        }        $create_query .= PMA_backquote($view) . ' (' . $crlf;        $tmp = array();        $columns = PMA_DBI_get_columns_full($db, $view);        foreach ($columns as $column_name => $definition) {            $tmp[] = PMA_backquote($column_name) . ' ' . $definition['Type'] . $crlf;        }        $create_query .= implode(',', $tmp) . ');';        return($create_query);    }    /**     * Returns $table's CREATE definition     *     * @param string  $db             the database name     * @param string  $table          the table name     * @param string  $crlf           the end of line sequence     * @param string  $error_url      the url to go back in case of error     * @param bool    $show_dates     whether to include creation/update/check dates     * @param bool    $add_semicolon  whether to add semicolon and end-of-line at the end     * @param bool    $view           whether we're handling a view     * @return  string   resulting schema     *     * @access  public     */    function PMA_getTableDef($db, $table, $crlf, $error_url, $show_dates = false, $add_semicolon = true, $view = false)    {        global $sql_drop_table;        global $sql_backquotes;        global $sql_constraints;        global $sql_constraints_query; // just the text of the query        global $sql_drop_foreign_keys;        $schema_create = '';        $auto_increment = '';        $new_crlf = $crlf;        // need to use PMA_DBI_QUERY_STORE with PMA_DBI_num_rows() in mysqli        $result = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ' LIKE \'' . PMA_sqlAddSlashes($table, true) . '\'', null, PMA_DBI_QUERY_STORE);        if ($result != false) {            if (PMA_DBI_num_rows($result) > 0) {                $tmpres        = PMA_DBI_fetch_assoc($result);                if (PMA_DRIZZLE && $show_dates) {                    // Drizzle doesn't give Create_time and Update_time in SHOW TABLE STATUS, add it                    $sql ="SELECT                            TABLE_CREATION_TIME AS Create_time,                            TABLE_UPDATE_TIME AS Update_time                        FROM data_dictionary.TABLES                        WHERE TABLE_SCHEMA = '" . PMA_sqlAddSlashes($db) . "'                          AND TABLE_NAME = '" . PMA_sqlAddSlashes($table) . "'";                    $tmpres = array_merge(PMA_DBI_fetch_single_row($sql), $tmpres);                }                // Here we optionally add the AUTO_INCREMENT next value,                // but starting with MySQL 5.0.24, the clause is already included                // in SHOW CREATE TABLE so we'll remove it below                // It's required for Drizzle because SHOW CREATE TABLE uses                // the value from table's creation time                if (isset($GLOBALS['sql_auto_increment']) && !empty($tmpres['Auto_increment'])) {                    $auto_increment .= ' AUTO_INCREMENT=' . $tmpres['Auto_increment'] . ' ';                }                if ($show_dates && isset($tmpres['Create_time']) && !empty($tmpres['Create_time'])) {                    $schema_create .= PMA_exportComment(__('Creation') . ': ' . PMA_localisedDate(strtotime($tmpres['Create_time'])));                    $new_crlf = PMA_exportComment() . $crlf;                }                if ($show_dates && isset($tmpres['Update_time']) && !empty($tmpres['Update_time'])) {                    $schema_create .= PMA_exportComment(__('Last update') . ': ' . PMA_localisedDate(strtotime($tmpres['Update_time'])));                    $new_crlf = PMA_exportComment() . $crlf;                }                if ($show_dates && isset($tmpres['Check_time']) && !empty($tmpres['Check_time'])) {                    $schema_create .= PMA_exportComment(__('Last check') . ': ' . PMA_localisedDate(strtotime($tmpres['Check_time'])));                    $new_crlf = PMA_exportComment() . $crlf;                }            }            PMA_DBI_free_result($result);        }        $schema_create .= $new_crlf;        // no need to generate a DROP VIEW here, it was done earlier        if (! empty($sql_drop_table) && ! PMA_Table::isView($db, $table)) {            $schema_create .= 'DROP TABLE IF EXISTS ' . PMA_backquote($table, $sql_backquotes) . ';' . $crlf;        }        // Complete table dump,        // Whether to quote table and column names or not        // Drizzle always quotes names        if (!PMA_DRIZZLE) {            if ($sql_backquotes) {                PMA_DBI_query('SET SQL_QUOTE_SHOW_CREATE = 1');            } else {                PMA_DBI_query('SET SQL_QUOTE_SHOW_CREATE = 0');            }        }        // I don't see the reason why this unbuffered query could cause problems,        // because SHOW CREATE TABLE returns only one row, and we free the        // results below. Nonetheless, we got 2 user reports about this        // (see bug 1562533) so I remove the unbuffered mode.        //$result = PMA_DBI_query('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table), null, PMA_DBI_QUERY_UNBUFFERED);        //        // Note: SHOW CREATE TABLE, at least in MySQL 5.1.23, does not        // produce a displayable result for the default value of a BIT        // column, nor does the mysqldump command. See MySQL bug 35796        $result = PMA_DBI_try_query('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table));        // an error can happen, for example the table is crashed        $tmp_error = PMA_DBI_getError();        if ($tmp_error) {            return PMA_exportComment(__('in use') . '(' . $tmp_error . ')');        }        if ($result != false && ($row = PMA_DBI_fetch_row($result))) {            $create_query = $row[1];            unset($row);            // Convert end of line chars to one that we want (note that MySQL doesn't return query it will accept in all cases)            if (strpos($create_query, "(\r\n ")) {                $create_query = str_replace("\r\n", $crlf, $create_query);            } elseif (strpos($create_query, "(\n ")) {                $create_query = str_replace("\n", $crlf, $create_query);            } elseif (strpos($create_query, "(\r ")) {                $create_query = str_replace("\r", $crlf, $create_query);            }            /*             * Drop database name from VIEW creation.             *             * This is a bit tricky, but we need to issue SHOW CREATE TABLE with             * database name, but we don't want name to show up in CREATE VIEW             * statement.             */            if ($view) {                $create_query = preg_replace('/' . PMA_backquote($db) . '\./', '', $create_query);            }            // Should we use IF NOT EXISTS?            if (isset($GLOBALS['sql_if_not_exists'])) {                $create_query     = preg_replace('/^CREATE TABLE/', 'CREATE TABLE IF NOT EXISTS', $create_query);            }            // Drizzle (checked on 2011.03.13) returns ROW_FORMAT surrounded with quotes, which is not accepted by parser            if (PMA_DRIZZLE) {                $create_query = preg_replace('/ROW_FORMAT=\'(\S+)\'/', 'ROW_FORMAT=$1', $create_query);            }            // are there any constraints to cut out?            if (preg_match('@CONSTRAINT|FOREIGN[\s]+KEY@', $create_query)) {                // Split the query into lines, so we can easily handle it. We know lines are separated by $crlf (done few lines above).                $sql_lines = explode($crlf, $create_query);                $sql_count = count($sql_lines);                // lets find first line with constraints                for ($i = 0; $i < $sql_count; $i++) {                    if (preg_match('@^[\s]*(CONSTRAINT|FOREIGN[\s]+KEY)@', $sql_lines[$i])) {                        break;                    }                }                // If we really found a constraint                if ($i != $sql_count) {                    // remove , from the end of create statement                    $sql_lines[$i - 1] = preg_replace('@,$@', '', $sql_lines[$i - 1]);                    // prepare variable for constraints                    if (!isset($sql_constraints)) {                        if (isset($GLOBALS['no_constraints_comments'])) {                            $sql_constraints = '';                        } else {                            $sql_constraints = $crlf                                             . PMA_exportComment()                                             . PMA_exportComment(__('Constraints for dumped tables'))                                             . PMA_exportComment();                        }                    }                    // comments for current table                    if (!isset($GLOBALS['no_constraints_comments'])) {                        $sql_constraints .= $crlf                                          . PMA_exportComment()                                          . PMA_exportComment(__('Constraints for table') . ' ' . PMA_backquote($table))                                          . PMA_exportComment();                    }                    // let's do the work                    $sql_constraints_query .= 'ALTER TABLE ' . PMA_backquote($table) . $crlf;                    $sql_constraints .= 'ALTER TABLE ' . PMA_backquote($table) . $crlf;                    $sql_drop_foreign_keys .= 'ALTER TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table) . $crlf;                    $first = true;                    for ($j = $i; $j < $sql_count; $j++) {                        if (preg_match('@CONSTRAINT|FOREIGN[\s]+KEY@', $sql_lines[$j])) {                            if (!$first) {                                $sql_constraints .= $crlf;                            }                            if (strpos($sql_lines[$j], 'CONSTRAINT') === false) {                                $tmp_str = preg_replace('/(FOREIGN[\s]+KEY)/', 'ADD \1', $sql_lines[$j]);                                $sql_constraints_query .= $tmp_str;                                $sql_constraints .= $tmp_str;                            } else {                                $tmp_str = preg_replace('/(CONSTRAINT)/', 'ADD \1', $sql_lines[$j]);                                $sql_constraints_query .= $tmp_str;                                $sql_constraints .= $tmp_str;                                preg_match('/(CONSTRAINT)([\s])([\S]*)([\s])/', $sql_lines[$j], $matches);                                if (! $first) {                                    $sql_drop_foreign_keys .= ', ';                                }                                $sql_drop_foreign_keys .= 'DROP FOREIGN KEY ' . $matches[3];                            }                            $first = false;                        } else {                            break;                        }                    }                    $sql_constraints .= ';' . $crlf;                    $sql_constraints_query .= ';';                    $create_query = implode($crlf, array_slice($sql_lines, 0, $i)) . $crlf . implode($crlf, array_slice($sql_lines, $j, $sql_count - 1));                    unset($sql_lines);                }            }            $schema_create .= $create_query;        }        // remove a possible "AUTO_INCREMENT = value" clause        // that could be there starting with MySQL 5.0.24        // in Drizzle it's useless as it contains the value given at table creation time        $schema_create = preg_replace('/AUTO_INCREMENT\s*=\s*([0-9])+/', '', $schema_create);        $schema_create .= $auto_increment;        PMA_DBI_free_result($result);        return $schema_create . ($add_semicolon ? ';' . $crlf : '');    } // end of the 'PMA_getTableDef()' function    /**     * Returns $table's comments, relations etc.     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         end of line sequence     * @param bool    $do_relation  whether to include relation comments     * @param bool    $do_mime      whether to include mime comments     * @return  string   resulting comments     *     * @access  private     */    function PMA_getTableComments($db, $table, $crlf, $do_relation = false, $do_mime = false)    {        global $cfgRelation;        global $sql_backquotes;        global $sql_constraints;        $schema_create = '';        // Check if we can use Relations        if ($do_relation && !empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        if ($do_mime && $cfgRelation['mimework']) {            if (!($mime_map = PMA_getMIME($db, $table, true))) {                unset($mime_map);            }        }        if (isset($mime_map) && count($mime_map) > 0) {            $schema_create .= PMA_possibleCRLF()                           . PMA_exportComment()                           . PMA_exportComment(__('MIME TYPES FOR TABLE'). ' ' . PMA_backquote($table, $sql_backquotes) . ':');            @reset($mime_map);            foreach ($mime_map AS $mime_field => $mime) {                $schema_create .= PMA_exportComment('  ' . PMA_backquote($mime_field, $sql_backquotes))                                . PMA_exportComment('      ' . PMA_backquote($mime['mimetype'], $sql_backquotes));            }            $schema_create .= PMA_exportComment();        }        if ($have_rel) {            $schema_create .= PMA_possibleCRLF()                           . PMA_exportComment()                           . PMA_exportComment(__('RELATIONS FOR TABLE'). ' ' . PMA_backquote($table, $sql_backquotes) . ':');            foreach ($res_rel AS $rel_field => $rel) {                $schema_create .= PMA_exportComment('  ' . PMA_backquote($rel_field, $sql_backquotes))                                . PMA_exportComment('      ' . PMA_backquote($rel['foreign_table'], $sql_backquotes)                                . ' -> ' . PMA_backquote($rel['foreign_field'], $sql_backquotes));            }            $schema_create .= PMA_exportComment();        }        return $schema_create;    } // end of the 'PMA_getTableComments()' function    /**     * Outputs table's structure     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         the end of line sequence     * @param string  $error_url    the url to go back in case of error     * @param bool    $relation     whether to include relation comments     * @param bool    $comments     whether to include the pmadb-style column comments     *                                as comments in the structure; this is deprecated     *                                but the parameter is left here because export.php     *                                calls PMA_exportStructure() also for other export     *                                types which use this parameter     * @param bool    $mime         whether to include mime comments     * @param bool    $dates        whether to include creation/update/check dates     * @param string  $export_mode  'create_table', 'triggers', 'create_view', 'stand_in'     * @param string  $export_type  'server', 'database', 'table'     * @return  bool      Whether it succeeded     *     * @access  public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $relation = false, $comments = false, $mime = false, $dates = false, $export_mode, $export_type)    {        $formatted_table_name = (isset($GLOBALS['sql_backquotes']))                              ? PMA_backquote($table)                              : '\'' . $table . '\'';        $dump = PMA_possibleCRLF()              . PMA_exportComment(str_repeat('-', 56))              . PMA_possibleCRLF()              . PMA_exportComment();        switch($export_mode) {            case 'create_table':                $dump .= PMA_exportComment(__('Table structure for table') . ' ' . $formatted_table_name);                $dump .= PMA_exportComment();                $dump .= PMA_getTableDef($db, $table, $crlf, $error_url, $dates);                $dump .= PMA_getTableComments($db, $table, $crlf, $relation, $mime);                break;            case 'triggers':                $dump = '';                $triggers = PMA_DBI_get_triggers($db, $table);                if ($triggers) {                    $dump .=  PMA_possibleCRLF()                            . PMA_exportComment()                            . PMA_exportComment(__('Triggers') . ' ' . $formatted_table_name)                            . PMA_exportComment();                    $delimiter = '//';                    foreach ($triggers as $trigger) {                        $dump .= $trigger['drop'] . ';' . $crlf;                        $dump .= 'DELIMITER ' . $delimiter . $crlf;                        $dump .= $trigger['create'];                        $dump .= 'DELIMITER ;' . $crlf;                    }                }                break;            case 'create_view':                $dump .= PMA_exportComment(__('Structure for view') . ' ' . $formatted_table_name)                       . PMA_exportComment();                // delete the stand-in table previously created (if any)                if ($export_type != 'table') {                    $dump .= 'DROP TABLE IF EXISTS ' . PMA_backquote($table) . ';' . $crlf;                }                $dump .= PMA_getTableDef($db, $table, $crlf, $error_url, $dates, true, true);                break;            case 'stand_in':                $dump .=  PMA_exportComment(__('Stand-in structure for view') . ' ' . $formatted_table_name)                        . PMA_exportComment();                // export a stand-in definition to resolve view dependencies                $dump .= PMA_getTableDefStandIn($db, $table, $crlf);        } // end switch        // this one is built by PMA_getTableDef() to use in table copy/move        // but not in the case of export        unset($GLOBALS['sql_constraints_query']);        return PMA_exportOutputHandler($dump);    }    /**     * Outputs the content of a table in SQL format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $sql_backquotes;        global $current_row;        $formatted_table_name = (isset($GLOBALS['sql_backquotes']))                              ? PMA_backquote($table)                              : '\'' . $table . '\'';        // Do not export data for a VIEW        // (For a VIEW, this is called only when exporting a single VIEW)        if (PMA_Table::isView($db, $table)) {            $head = PMA_possibleCRLF()              . PMA_exportComment()              . PMA_exportComment('VIEW ' . ' ' . $formatted_table_name)              . PMA_exportComment(__('Data') . ': ' . __('None'))              . PMA_exportComment()              . PMA_possibleCRLF();            if (! PMA_exportOutputHandler($head)) {                return false;            }            return true;        }        // analyze the query to get the true column names, not the aliases        // (this fixes an undefined index, also if Complete inserts        //  are used, we did not get the true column name in case of aliases)        $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($sql_query));        $result = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        // a possible error: the table has crashed        $tmp_error = PMA_DBI_getError();        if ($tmp_error) {            return PMA_exportOutputHandler(PMA_exportComment(__('Error reading data:') . ' (' . $tmp_error . ')'));        }        if ($result != false) {            $fields_cnt = PMA_DBI_num_fields($result);            // Get field information            $fields_meta = PMA_DBI_get_fields_meta($result);            $field_flags = array();            for ($j = 0; $j < $fields_cnt; $j++) {                $field_flags[$j] = PMA_DBI_field_flags($result, $j);            }            for ($j = 0; $j < $fields_cnt; $j++) {                if (isset($analyzed_sql[0]['select_expr'][$j]['column'])) {                    $field_set[$j] = PMA_backquote($analyzed_sql[0]['select_expr'][$j]['column'], $sql_backquotes);                } else {                    $field_set[$j] = PMA_backquote($fields_meta[$j]->name, $sql_backquotes);                }            }            if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'UPDATE') {                // update                $schema_insert  = 'UPDATE ';                if (isset($GLOBALS['sql_ignore'])) {                    $schema_insert .= 'IGNORE ';                }                // avoid EOL blank                $schema_insert .= PMA_backquote($table, $sql_backquotes) . ' SET';            } else {                // insert or replace                if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'REPLACE') {                    $sql_command = 'REPLACE';                } else {                    $sql_command = 'INSERT';                }                // delayed inserts?                if (isset($GLOBALS['sql_delayed'])) {                    $insert_delayed = ' DELAYED';                } else {                    $insert_delayed = '';                }                // insert ignore?                if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'INSERT' && isset($GLOBALS['sql_ignore'])) {                    $insert_delayed .= ' IGNORE';                }                // scheme for inserting fields                if ($GLOBALS['sql_insert_syntax'] == 'complete' || $GLOBALS['sql_insert_syntax'] == 'both') {                    $fields        = implode(', ', $field_set);                    $schema_insert = $sql_command . $insert_delayed .' INTO ' . PMA_backquote($table, $sql_backquotes)                // avoid EOL blank                                   . ' (' . $fields . ') VALUES';                } else {                    $schema_insert = $sql_command . $insert_delayed .' INTO ' . PMA_backquote($table, $sql_backquotes)                                   . ' VALUES';                }            }            $search      = array("\x00", "\x0a", "\x0d", "\x1a"); //\x08\\x09, not required            $replace     = array('\0', '\n', '\r', '\Z');            $current_row = 0;            $query_size  = 0;            if (($GLOBALS['sql_insert_syntax'] == 'extended' || $GLOBALS['sql_insert_syntax'] == 'both') && (!isset($GLOBALS['sql_type']) || $GLOBALS['sql_type'] != 'UPDATE')) {                $separator    = ',';                $schema_insert .= $crlf;            } else {                $separator    = ';';            }            while ($row = PMA_DBI_fetch_row($result)) {                if ($current_row == 0) {                    $head = PMA_possibleCRLF()                          . PMA_exportComment()                          . PMA_exportComment(__('Dumping data for table') . ' ' . $formatted_table_name)                          . PMA_exportComment()                          . $crlf;                    if (! PMA_exportOutputHandler($head)) {                        return false;                    }                }                $current_row++;                for ($j = 0; $j < $fields_cnt; $j++) {                    // NULL                    if (!isset($row[$j]) || is_null($row[$j])) {                        $values[] = 'NULL';                    // a number                    // timestamp is numeric on some MySQL 4.1, BLOBs are sometimes numeric                    } elseif ($fields_meta[$j]->numeric && $fields_meta[$j]->type != 'timestamp'                            && ! $fields_meta[$j]->blob) {                        $values[] = $row[$j];                    // a true BLOB                    // - mysqldump only generates hex data when the --hex-blob                    //   option is used, for fields having the binary attribute                    //   no hex is generated                    // - a TEXT field returns type blob but a real blob                    //   returns also the 'binary' flag                    } elseif (stristr($field_flags[$j], 'BINARY')                            && $fields_meta[$j]->blob                            && isset($GLOBALS['sql_hex_for_blob'])) {                        // empty blobs need to be different, but '0' is also empty :-(                        if (empty($row[$j]) && $row[$j] != '0') {                            $values[] = '\'\'';                        } else {                            $values[] = '0x' . bin2hex($row[$j]);                        }                    // detection of 'bit' works only on mysqli extension                    } elseif ($fields_meta[$j]->type == 'bit') {                        $values[] = "b'" . PMA_sqlAddSlashes(PMA_printable_bit_value($row[$j], $fields_meta[$j]->length)) . "'";                    // something else -> treat as a string                    } else {                        $values[] = '\'' . str_replace($search, $replace, PMA_sqlAddSlashes($row[$j])) . '\'';                    } // end if                } // end for                // should we make update?                if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'UPDATE') {                    $insert_line = $schema_insert;                    for ($i = 0; $i < $fields_cnt; $i++) {                        if (0 == $i) {                            $insert_line .= ' ';                        }                        if ($i > 0) {                            // avoid EOL blank                            $insert_line .= ',';                        }                        $insert_line .= $field_set[$i] . ' = ' . $values[$i];                    }                    list($tmp_unique_condition, $tmp_clause_is_unique) = PMA_getUniqueCondition($result, $fields_cnt, $fields_meta, $row);                    $insert_line .= ' WHERE ' . $tmp_unique_condition;                    unset($tmp_unique_condition, $tmp_clause_is_unique);                } else {                    // Extended inserts case                    if ($GLOBALS['sql_insert_syntax'] == 'extended' || $GLOBALS['sql_insert_syntax'] == 'both') {                        if ($current_row == 1) {                            $insert_line  = $schema_insert . '(' . implode(', ', $values) . ')';                        } else {                            $insert_line  = '(' . implode(', ', $values) . ')';                            if (isset($GLOBALS['sql_max_query_size']) && $GLOBALS['sql_max_query_size'] > 0 && $query_size + strlen($insert_line) > $GLOBALS['sql_max_query_size']) {                                if (!PMA_exportOutputHandler(';' . $crlf)) {                                    return false;                                }                                $query_size = 0;                                $current_row = 1;                                $insert_line = $schema_insert . $insert_line;                            }                        }                        $query_size += strlen($insert_line);                    }                    // Other inserts case                    else {                        $insert_line = $schema_insert . '(' . implode(', ', $values) . ')';                    }                }                unset($values);                if (!PMA_exportOutputHandler(($current_row == 1 ? '' : $separator . $crlf) . $insert_line)) {                    return false;                }            } // end while            if ($current_row > 0) {                if (!PMA_exportOutputHandler(';' . $crlf)) {                    return false;                }            }        } // end if ($result != false)        PMA_DBI_free_result($result);        return true;    } // end of the 'PMA_exportData()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * library for displaying table with results from all sort of select queries * * @package PhpMyAdmin *//** * */require_once './libraries/Index.class.php';/** * Defines the display mode to use for the results of a SQL query * * It uses a synthetic string that contains all the required informations. * In this string: *   - the first two characters stand for the action to do while *     clicking on the "edit" link (e.g. 'ur' for update a row, 'nn' for no *     edit link...); *   - the next two characters stand for the action to do while *     clicking on the "delete" link (e.g. 'kp' for kill a process, 'nn' for *     no delete link...); *   - the next characters are boolean values (1/0) and respectively stand *     for sorting links, navigation bar, "insert a new row" link, the *     bookmark feature, the expand/collapse text/blob fields button and *     the "display printable view" option. *     Of course '0'/'1' means the feature won't/will be enabled. * * @param string  &$the_disp_mode the synthetic value for display_mode (see a few *                                lines above for explanations) * @param integer &$the_total     the total number of rows returned by the SQL query *                                without any programmatically appended "LIMIT" clause *                                (just a copy of $unlim_num_rows if it exists, else *                                computed inside this function) * * @return  array    an array with explicit indexes for all the display *                   elements * * @global  string   the database name * @global  string   the table name * @global  integer  the total number of rows returned by the SQL query *                   without any programmatically appended "LIMIT" clause * @global  array    the properties of the fields returned by the query * @global  string   the URL to return to in case of error in a SQL *                   statement * * @access  private * * @see     PMA_displayTable() */function PMA_setDisplayMode(&$the_disp_mode, &$the_total){    global $db, $table;    global $unlim_num_rows, $fields_meta;    global $err_url;    // 1. Initializes the $do_display array    $do_display              = array();    $do_display['edit_lnk']  = $the_disp_mode[0] . $the_disp_mode[1];    $do_display['del_lnk']   = $the_disp_mode[2] . $the_disp_mode[3];    $do_display['sort_lnk']  = (string) $the_disp_mode[4];    $do_display['nav_bar']   = (string) $the_disp_mode[5];    $do_display['ins_row']   = (string) $the_disp_mode[6];    $do_display['bkm_form']  = (string) $the_disp_mode[7];    $do_display['text_btn']  = (string) $the_disp_mode[8];    $do_display['pview_lnk'] = (string) $the_disp_mode[9];    // 2. Display mode is not "false for all elements" -> updates the    // display mode    if ($the_disp_mode != 'nnnn000000') {        if (isset($GLOBALS['printview']) && $GLOBALS['printview'] == '1') {            // 2.0 Print view -> set all elements to false!            $do_display['edit_lnk']  = 'nn'; // no edit link            $do_display['del_lnk']   = 'nn'; // no delete link            $do_display['sort_lnk']  = (string) '0';            $do_display['nav_bar']   = (string) '0';            $do_display['ins_row']   = (string) '0';            $do_display['bkm_form']  = (string) '0';            $do_display['text_btn']  = (string) '0';            $do_display['pview_lnk'] = (string) '0';        } elseif ($GLOBALS['is_count'] || $GLOBALS['is_analyse']            || $GLOBALS['is_maint'] || $GLOBALS['is_explain']            ) {            // 2.1 Statement is a "SELECT COUNT", a            //     "CHECK/ANALYZE/REPAIR/OPTIMIZE", an "EXPLAIN" one or            //     contains a "PROC ANALYSE" part            $do_display['edit_lnk']  = 'nn'; // no edit link            $do_display['del_lnk']   = 'nn'; // no delete link            $do_display['sort_lnk']  = (string) '0';            $do_display['nav_bar']   = (string) '0';            $do_display['ins_row']   = (string) '0';            $do_display['bkm_form']  = (string) '1';            if ($GLOBALS['is_maint']) {                $do_display['text_btn']  = (string) '1';            } else {                $do_display['text_btn']  = (string) '0';            }            $do_display['pview_lnk'] = (string) '1';        } elseif ($GLOBALS['is_show']) {            // 2.2 Statement is a "SHOW..."            /**             * 2.2.1             * @todo defines edit/delete links depending on show statement             */            $tmp = preg_match('@^SHOW[[:space:]]+(VARIABLES|(FULL[[:space:]]+)?PROCESSLIST|STATUS|TABLE|GRANTS|CREATE|LOGS|DATABASES|FIELDS)@i', $GLOBALS['sql_query'], $which);            if (isset($which[1]) && strpos(' ' . strtoupper($which[1]), 'PROCESSLIST') > 0) {                $do_display['edit_lnk'] = 'nn'; // no edit link                $do_display['del_lnk']  = 'kp'; // "kill process" type edit link            } else {                // Default case -> no links                $do_display['edit_lnk'] = 'nn'; // no edit link                $do_display['del_lnk']  = 'nn'; // no delete link            }            // 2.2.2 Other settings            $do_display['sort_lnk']  = (string) '0';            $do_display['nav_bar']   = (string) '0';            $do_display['ins_row']   = (string) '0';            $do_display['bkm_form']  = (string) '1';            $do_display['text_btn']  = (string) '1';            $do_display['pview_lnk'] = (string) '1';        } else {            // 2.3 Other statements (ie "SELECT" ones) -> updates            //     $do_display['edit_lnk'], $do_display['del_lnk'] and            //     $do_display['text_btn'] (keeps other default values)            $prev_table = $fields_meta[0]->table;            $do_display['text_btn']  = (string) '1';            for ($i = 0; $i < $GLOBALS['fields_cnt']; $i++) {                $is_link = ($do_display['edit_lnk'] != 'nn'                            || $do_display['del_lnk'] != 'nn'                            || $do_display['sort_lnk'] != '0'                            || $do_display['ins_row'] != '0');                // 2.3.2 Displays edit/delete/sort/insert links?                if ($is_link                    && ($fields_meta[$i]->table == '' || $fields_meta[$i]->table != $prev_table)                ) {                    $do_display['edit_lnk'] = 'nn'; // don't display links                    $do_display['del_lnk']  = 'nn';                    /**                     * @todo May be problematic with same fields names in two joined table.                     */                    // $do_display['sort_lnk'] = (string) '0';                    $do_display['ins_row']  = (string) '0';                    if ($do_display['text_btn'] == '1') {                        break;                    }                } // end if (2.3.2)                // 2.3.3 Always display print view link                $do_display['pview_lnk']    = (string) '1';                $prev_table = $fields_meta[$i]->table;            } // end for        } // end if..elseif...else (2.1 -> 2.3)    } // end if (2)    // 3. Gets the total number of rows if it is unknown    if (isset($unlim_num_rows) && $unlim_num_rows != '') {        $the_total = $unlim_num_rows;    } elseif (($do_display['nav_bar'] == '1' || $do_display['sort_lnk'] == '1')             && (strlen($db) && !empty($table))) {        $the_total   = PMA_Table::countRecords($db, $table);    }    // 4. If navigation bar or sorting fields names URLs should be    //    displayed but there is only one row, change these settings to    //    false    if ($do_display['nav_bar'] == '1' || $do_display['sort_lnk'] == '1') {        // - Do not display sort links if less than 2 rows.        // - For a VIEW we (probably) did not count the number of rows        //   so don't test this number here, it would remove the possibility        //   of sorting VIEW results.        if (isset($unlim_num_rows) && $unlim_num_rows < 2 && ! PMA_Table::isView($db, $table)) {            // force display of navbar for vertical/horizontal display-choice.            // $do_display['nav_bar']  = (string) '0';            $do_display['sort_lnk'] = (string) '0';        }    } // end if (3)    // 5. Updates the synthetic var    $the_disp_mode = join('', $do_display);    return $do_display;} // end of the 'PMA_setDisplayMode()' function/** * Return true if we are executing a query in the form of * "SELECT * FROM <a table> ..." * * @return boolean */function PMA_isSelect(){    // global variables set from sql.php    global $is_count, $is_export, $is_func, $is_analyse;    global $analyzed_sql;    return ! ($is_count || $is_export || $is_func || $is_analyse)        && count($analyzed_sql[0]['select_expr']) == 0        && isset($analyzed_sql[0]['queryflags']['select_from'])        && count($analyzed_sql[0]['table_ref']) == 1;}/** * Displays a navigation button * * @param string  $caption            iconic caption for button * @param string  $title              text for button * @param integer $pos                position for next query * @param string  $html_sql_query     query ready for display * @param string  $onsubmit           optional onsubmit clause * @param string  $input_for_real_end optional hidden field for special treatment * @param string  $onclick            optional onclick clause * * @return nothing * * @global string   $db             the database name * @global string   $table          the table name * @global string   $goto           the URL to go back in case of errors * * @access private * * @see     PMA_displayTableNavigation() */function PMA_displayTableNavigationOneButton($caption, $title, $pos, $html_sql_query, $onsubmit = '', $input_for_real_end = '', $onclick = ''){    global $db, $table, $goto;    $caption_output = '';    // for true or 'both'    if ($GLOBALS['cfg']['NavigationBarIconic']) {        $caption_output .= $caption;    }    // for false or 'both'    if (false === $GLOBALS['cfg']['NavigationBarIconic'] || 'both' === $GLOBALS['cfg']['NavigationBarIconic']) {        $caption_output .= '&nbsp;' . $title;    }    $title_output = ' title="' . $title . '"';        ?><td>    <form action="sql.php" method="post" <?php echo $onsubmit; ?>>        <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>        <input type="hidden" name="sql_query" value="<?php echo $html_sql_query; ?>" />        <input type="hidden" name="pos" value="<?php echo $pos; ?>" />        <input type="hidden" name="goto" value="<?php echo $goto; ?>" />        <?php echo $input_for_real_end; ?>        <input type="submit" name="navig" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : '' ); ?> value="<?php echo $caption_output; ?>"<?php echo $title_output . $onclick; ?> />    </form></td><?php} // end function PMA_displayTableNavigationOneButton()/** * Displays a navigation bar to browse among the results of a SQL query * * @param integer $pos_next                  the offset for the "next" page * @param integer $pos_prev                  the offset for the "previous" page * @param string  $sql_query                 the URL-encoded query * @param string  $id_for_direction_dropdown the id for the direction dropdown * * @return nothing * * @global  string   $db             the database name * @global  string   $table          the table name * @global  string   $goto           the URL to go back in case of errors * @global  integer  $num_rows       the total number of rows returned by the *                                   SQL query * @global  integer  $unlim_num_rows the total number of rows returned by the *                                   SQL any programmatically appended "LIMIT" clause * @global  boolean  $is_innodb      whether its InnoDB or not * @global  array    $showtable      table definitions * * @access  private * * @see     PMA_displayTable() */function PMA_displayTableNavigation($pos_next, $pos_prev, $sql_query, $id_for_direction_dropdown){    global $db, $table, $goto;    global $num_rows, $unlim_num_rows;    global $is_innodb;    global $showtable;    // here, using htmlentities() would cause problems if the query    // contains accented characters    $html_sql_query = htmlspecialchars($sql_query);    /**     * @todo move this to a central place     * @todo for other future table types     */    $is_innodb = (isset($showtable['Type']) && $showtable['Type'] == 'InnoDB');    ?><!-- Navigation bar --><table border="0" cellpadding="0" cellspacing="0" class="navigation"><tr>    <td class="navigation_separator"></td>    <?php    // Move to the beginning or to the previous page    if ($_SESSION['tmp_user_values']['pos'] && $_SESSION['tmp_user_values']['max_rows'] != 'all') {        PMA_displayTableNavigationOneButton('&lt;&lt;', _pgettext('First page', 'Begin'), 0, $html_sql_query);        PMA_displayTableNavigationOneButton('&lt;', _pgettext('Previous page', 'Previous'), $pos_prev, $html_sql_query);    } // end move back    $nbTotalPage = 1;    //page redirection    // (unless we are showing all records)    if ('all' != $_SESSION['tmp_user_values']['max_rows']) { //if1        $pageNow = @floor($_SESSION['tmp_user_values']['pos'] / $_SESSION['tmp_user_values']['max_rows']) + 1;        $nbTotalPage = @ceil($unlim_num_rows / $_SESSION['tmp_user_values']['max_rows']);        if ($nbTotalPage > 1) { //if2       ?>   <td>        <?php            $_url_params = array(                'db'        => $db,                'table'     => $table,                'sql_query' => $sql_query,                'goto'      => $goto,            );            //<form> to keep the form alignment of button < and <<            // and also to know what to execute when the selector changes            echo '<form action="sql.php' . PMA_generate_common_url($_url_params). '" method="post">';            echo PMA_pageselector(                $_SESSION['tmp_user_values']['max_rows'],                $pageNow,                $nbTotalPage,                200,                5,                5,                20,                10            );        ?>        </form>    </td>        <?php        } //_if2    } //_if1    // Display the "Show all" button if allowed    if (($num_rows < $unlim_num_rows) && ($GLOBALS['cfg']['ShowAll'] || ($GLOBALS['cfg']['MaxRows'] * 5 >= $unlim_num_rows))) {        echo "\n";        ?>    <td>        <form action="sql.php" method="post">            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="sql_query" value="<?php echo $html_sql_query; ?>" />            <input type="hidden" name="pos" value="0" />            <input type="hidden" name="session_max_rows" value="all" />            <input type="hidden" name="goto" value="<?php echo $goto; ?>" />            <input type="submit" name="navig" value="<?php echo __('Show all'); ?>" />        </form>    </td>        <?php    } // end show all    // Move to the next page or to the last one    if (($_SESSION['tmp_user_values']['pos'] + $_SESSION['tmp_user_values']['max_rows'] < $unlim_num_rows)        && $num_rows >= $_SESSION['tmp_user_values']['max_rows']        && $_SESSION['tmp_user_values']['max_rows'] != 'all'    ) {        // display the Next button        PMA_displayTableNavigationOneButton(            '&gt;',            _pgettext('Next page', 'Next'),            $pos_next,            $html_sql_query        );        // prepare some options for the End button        if ($is_innodb && $unlim_num_rows > $GLOBALS['cfg']['MaxExactCount']) {            $input_for_real_end = '<input id="real_end_input" type="hidden" name="find_real_end" value="1" />';            // no backquote around this message            $onclick = '';        } else {            $input_for_real_end = $onclick = '';        }        // display the End button        PMA_displayTableNavigationOneButton(            '&gt;&gt;',            _pgettext('Last page', 'End'),            @((ceil($unlim_num_rows / $_SESSION['tmp_user_values']['max_rows'])- 1) * $_SESSION['tmp_user_values']['max_rows']),            $html_sql_query,            'onsubmit="return ' . (($_SESSION['tmp_user_values']['pos'] + $_SESSION['tmp_user_values']['max_rows'] < $unlim_num_rows && $num_rows >= $_SESSION['tmp_user_values']['max_rows']) ? 'true' : 'false') . '"',            $input_for_real_end,            $onclick        );    } // end move toward    // show separator if pagination happen    if ($nbTotalPage > 1) {        echo '<td><div class="navigation_separator">|</div></td>';    }    ?>    <td>        <div class="save_edited hide">            <input type="submit" value="<?php echo __('Save edited data'); ?>" />            <div class="navigation_separator">|</div>        </div>    </td>    <td>        <div class="restore_column hide">            <input type="submit" value="<?php echo __('Restore column order'); ?>" />            <div class="navigation_separator">|</div>        </div>    </td><?php // if displaying a VIEW, $unlim_num_rows could be zero because      // of $cfg['MaxExactCountViews']; in this case, avoid passing      // the 5th parameter to checkFormElementInRange()      // (this means we can't validate the upper limit ?>    <td class="navigation_goto">        <form action="sql.php" method="post"    onsubmit="return (checkFormElementInRange(this, 'session_max_rows', '<?php echo str_replace('\'', '\\\'', __('%d is not valid row number.')); ?>', 1) &amp;&amp; checkFormElementInRange(this, 'pos', '<?php echo str_replace('\'', '\\\'', __('%d is not valid row number.')); ?>', 0<?php echo $unlim_num_rows > 0 ? ',' . $unlim_num_rows - 1 : ''; ?>))">            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="sql_query" value="<?php echo $html_sql_query; ?>" />            <input type="hidden" name="goto" value="<?php echo $goto; ?>" />            <input type="submit" name="navig" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?> value="<?php echo __('Show'); ?> :" />            <?php echo __('Start row') . ': ' . "\n"; ?>            <input type="text" name="pos" size="3" value="<?php echo (($pos_next >= $unlim_num_rows) ? 0 : $pos_next); ?>" class="textfield" onfocus="this.select()" />            <?php echo __('Number of rows') . ': ' . "\n"; ?>            <input type="text" name="session_max_rows" size="3" value="<?php echo (($_SESSION['tmp_user_values']['max_rows'] != 'all') ? $_SESSION['tmp_user_values']['max_rows'] : $GLOBALS['cfg']['MaxRows']); ?>" class="textfield" onfocus="this.select()" />        <?php        if ($GLOBALS['cfg']['ShowDisplayDirection']) {            // Display mode (horizontal/vertical and repeat headers)            echo __('Mode') . ': ' . "\n";            $choices = array(                'horizontal'        => __('horizontal'),                'horizontalflipped' => __('horizontal (rotated headers)'),                'vertical'          => __('vertical'));            echo PMA_generate_html_dropdown('disp_direction', $choices, $_SESSION['tmp_user_values']['disp_direction'], $id_for_direction_dropdown);            unset($choices);        }        printf(            __('Headers every %s rows'),            '<input type="text" size="3" name="repeat_cells" value="' . $_SESSION['tmp_user_values']['repeat_cells'] . '" class="textfield" />'        );        echo "\n";        ?>        </form>    </td>    <td class="navigation_separator"></td></tr></table>    <?php} // end of the 'PMA_displayTableNavigation()' function/** * Displays the headers of the results table * * @param array   &$is_display                 which elements to display * @param array   &$fields_meta                the list of fields properties * @param integer $fields_cnt                  the total number of fields returned by the SQL query * @param array   $analyzed_sql                the analyzed query * @param string  $sort_expression             sort expression * @param string  $sort_expression_nodirection sort expression without direction * @param string  $sort_direction              sort direction * * @return  boolean  $clause_is_unique * * @global  string   $db               the database name * @global  string   $table            the table name * @global  string   $goto             the URL to go back in case of errors * @global  string   $sql_query        the SQL query * @global  integer  $num_rows         the total number of rows returned by the *                                     SQL query * @global  array    $vertical_display informations used with vertical display *                                     mode * * @access  private * * @see     PMA_displayTable() */function PMA_displayTableHeaders(&$is_display, &$fields_meta, $fields_cnt = 0, $analyzed_sql = '', $sort_expression, $sort_expression_nodirection, $sort_direction){    global $db, $table, $goto;    global $sql_query, $num_rows;    global $vertical_display, $highlight_columns;    // required to generate sort links that will remember whether the    // "Show all" button has been clicked    $sql_md5 = md5($GLOBALS['sql_query']);    $session_max_rows = $_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'];    if ($analyzed_sql == '') {        $analyzed_sql = array();    }    // can the result be sorted?    if ($is_display['sort_lnk'] == '1') {        // Just as fallback        $unsorted_sql_query     = $sql_query;        if (isset($analyzed_sql[0]['unsorted_query'])) {            $unsorted_sql_query = $analyzed_sql[0]['unsorted_query'];        }        // Handles the case of multiple clicks on a column's header        // which would add many spaces before "ORDER BY" in the        // generated query.        $unsorted_sql_query = trim($unsorted_sql_query);        // sorting by indexes, only if it makes sense (only one table ref)        if (isset($analyzed_sql)            && isset($analyzed_sql[0])            && isset($analyzed_sql[0]['querytype'])            && $analyzed_sql[0]['querytype'] == 'SELECT'            && isset($analyzed_sql[0]['table_ref'])            && count($analyzed_sql[0]['table_ref']) == 1        ) {            // grab indexes data:            $indexes = PMA_Index::getFromTable($table, $db);            // do we have any index?            if ($indexes) {                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                    || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'                ) {                    $span = $fields_cnt;                    if ($is_display['edit_lnk'] != 'nn') {                        $span++;                    }                    if ($is_display['del_lnk'] != 'nn') {                        $span++;                    }                    if ($is_display['del_lnk'] != 'kp' && $is_display['del_lnk'] != 'nn') {                        $span++;                    }                } else {                    $span = $num_rows + floor($num_rows/$_SESSION['tmp_user_values']['repeat_cells']) + 1;                }                echo '<form action="sql.php" method="post">' . "\n";                echo PMA_generate_common_hidden_inputs($db, $table);                echo __('Sort by key') . ': <select name="sql_query" class="autosubmit">' . "\n";                $used_index = false;                $local_order = (isset($sort_expression) ? $sort_expression : '');                foreach ($indexes as $index) {                    $asc_sort = '`' . implode('` ASC, `', array_keys($index->getColumns())) . '` ASC';                    $desc_sort = '`' . implode('` DESC, `', array_keys($index->getColumns())) . '` DESC';                    $used_index = $used_index || $local_order == $asc_sort || $local_order == $desc_sort;                    if (preg_match('@(.*)([[:space:]](LIMIT (.*)|PROCEDURE (.*)|FOR UPDATE|LOCK IN SHARE MODE))@is', $unsorted_sql_query, $my_reg)) {                        $unsorted_sql_query_first_part = $my_reg[1];                        $unsorted_sql_query_second_part = $my_reg[2];                    } else {                        $unsorted_sql_query_first_part = $unsorted_sql_query;                        $unsorted_sql_query_second_part = '';                    }                    echo '<option value="'                        . htmlspecialchars($unsorted_sql_query_first_part  . "\n" . ' ORDER BY ' . $asc_sort . $unsorted_sql_query_second_part)                        . '"' . ($local_order == $asc_sort ? ' selected="selected"' : '')                        . '>' . htmlspecialchars($index->getName()) . ' ('                        . __('Ascending') . ')</option>';                    echo '<option value="'                        . htmlspecialchars($unsorted_sql_query_first_part . "\n" . ' ORDER BY ' . $desc_sort . $unsorted_sql_query_second_part)                        . '"' . ($local_order == $desc_sort ? ' selected="selected"' : '')                        . '>' . htmlspecialchars($index->getName()) . ' ('                        . __('Descending') . ')</option>';                }                echo '<option value="' . htmlspecialchars($unsorted_sql_query) . '"' . ($used_index ? '' : ' selected="selected"') . '>' . __('None') . '</option>';                echo '</select>' . "\n";                echo '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>';                echo '</form>' . "\n";            }        }    }    // Output data needed for grid editing    echo '<input id="save_cells_at_once" type="hidden" value="' . $GLOBALS['cfg']['SaveCellsAtOnce'] . '" />';    echo '<div class="common_hidden_inputs">';    echo PMA_generate_common_hidden_inputs($db, $table);    echo '</div>';    // Output data needed for column reordering and show/hide column    if (PMA_isSelect()) {        // generate the column order, if it is set        $pmatable = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);        if ($col_order) {            echo '<input id="col_order" type="hidden" value="' . implode(',', $col_order) . '" />';        }        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);        if ($col_visib) {            echo '<input id="col_visib" type="hidden" value="' . implode(',', $col_visib) . '" />';        }        // generate table create time        if (! PMA_Table::isView($GLOBALS['table'], $GLOBALS['db'])) {            echo '<input id="table_create_time" type="hidden" value="' .                PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], 'Create_time') . '" />';        }    }    $vertical_display['emptypre']   = 0;    $vertical_display['emptyafter'] = 0;    $vertical_display['textbtn']    = '';    // Display options (if we are not in print view)    if (! (isset($GLOBALS['printview']) && $GLOBALS['printview'] == '1')) {        echo '<form method="post" action="sql.php" name="displayOptionsForm" id="displayOptionsForm"';        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax" ';        }        echo '>';        $url_params = array(            'db' => $db,            'table' => $table,            'sql_query' => $sql_query,            'goto' => $goto,            'display_options_form' => 1        );        echo PMA_generate_common_hidden_inputs($url_params);        echo '<br />';        PMA_generate_slider_effect('displayoptions', __('Options'));        echo '<fieldset>';        echo '<div class="formelement">';        $choices = array(            'P'   => __('Partial texts'),            'F'   => __('Full texts')        );        PMA_display_html_radio('display_text', $choices, $_SESSION['tmp_user_values']['display_text']);        echo '</div>';        // prepare full/partial text button or link        $url_params_full_text = array(            'db' => $db,            'table' => $table,            'sql_query' => $sql_query,            'goto' => $goto,            'full_text_button' => 1        );        if ($_SESSION['tmp_user_values']['display_text']=='F') {            // currently in fulltext mode so show the opposite link            $tmp_image_file = $GLOBALS['pmaThemeImage'] . 's_partialtext.png';            $tmp_txt = __('Partial texts');            $url_params_full_text['display_text'] = 'P';        } else {            $tmp_image_file = $GLOBALS['pmaThemeImage'] . 's_fulltext.png';            $tmp_txt = __('Full texts');            $url_params_full_text['display_text'] = 'F';        }        $tmp_image = '<img class="fulltext" src="' . $tmp_image_file . '" alt="' . $tmp_txt . '" title="' . $tmp_txt . '" />';        $tmp_url = 'sql.php' . PMA_generate_common_url($url_params_full_text);        $full_or_partial_text_link = PMA_linkOrButton($tmp_url, $tmp_image, array(), false);        unset($tmp_image_file, $tmp_txt, $tmp_url, $tmp_image);        if ($GLOBALS['cfgRelation']['relwork'] && $GLOBALS['cfgRelation']['displaywork']) {            echo '<div class="formelement">';            $choices = array(                'K'   => __('Relational key'),                'D'   => __('Relational display column')            );            PMA_display_html_radio('relational_display', $choices, $_SESSION['tmp_user_values']['relational_display']);            echo '</div>';        }        echo '<div class="formelement">';        PMA_display_html_checkbox('display_binary', __('Show binary contents'), ! empty($_SESSION['tmp_user_values']['display_binary']), false);        echo '<br />';        PMA_display_html_checkbox('display_blob', __('Show BLOB contents'), ! empty($_SESSION['tmp_user_values']['display_blob']), false);        echo '<br />';        PMA_display_html_checkbox('display_binary_as_hex', __('Show binary contents as HEX'), ! empty($_SESSION['tmp_user_values']['display_binary_as_hex']), false);        echo '</div>';        // I would have preferred to name this "display_transformation".        // This is the only way I found to be able to keep this setting sticky        // per SQL query, and at the same time have a default that displays        // the transformations.        echo '<div class="formelement">';        PMA_display_html_checkbox('hide_transformation', __('Hide browser transformation'), ! empty($_SESSION['tmp_user_values']['hide_transformation']), false);        echo '</div>';        if (! PMA_DRIZZLE) {            echo '<div class="formelement">';            $choices = array(                'GEOM'  => __('Geometry'),                'WKT'   => __('Well Known Text'),                'WKB'   => __('Well Known Binary')            );            PMA_display_html_radio('geometry_display', $choices, $_SESSION['tmp_user_values']['geometry_display']);            echo '</div>';        }        echo '<div class="clearfloat"></div>';        echo '</fieldset>';        echo '<fieldset class="tblFooters">';        echo '<input type="submit" value="' . __('Go') . '" />';        echo '</fieldset>';        echo '</div>';        echo '</form>';    }    // Start of form for multi-rows edit/delete/export    if ($is_display['del_lnk'] == 'dr' || $is_display['del_lnk'] == 'kp') {        echo '<form method="post" action="tbl_row_action.php" name="resultsForm" id="resultsForm"';        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax" ';        }        echo '>' . "\n";        echo PMA_generate_common_hidden_inputs($db, $table, 1);        echo '<input type="hidden" name="goto"             value="sql.php" />' . "\n";    }    echo '<table id="table_results" class="data';    if ($GLOBALS['cfg']['AjaxEnable']) {        echo ' ajax';    }    echo '">' . "\n";    if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'        || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'    ) {        echo '<thead><tr>' . "\n";    }    // 1. Displays the full/partial text button (part 1)...    if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'        || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'    ) {        $colspan  = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn')                  ? ' colspan="4"'                  : '';    } else {        $rowspan  = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn')                  ? ' rowspan="4"'                  : '';    }    //     ... before the result table    if (($is_display['edit_lnk'] == 'nn' && $is_display['del_lnk'] == 'nn')        && $is_display['text_btn'] == '1'    ) {        $vertical_display['emptypre'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 0;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            ?>    <th colspan="<?php echo $fields_cnt; ?>"></th></tr><tr>            <?php            // end horizontal/horizontalflipped mode        } else {            ?><tr>    <th colspan="<?php echo $num_rows + floor($num_rows/$_SESSION['tmp_user_values']['repeat_cells']) + 1; ?>"></th></tr>            <?php        } // end vertical mode    }    //     ... at the left column of the result table header if possible    //     and required    elseif (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && $is_display['text_btn'] == '1'    ) {        $vertical_display['emptypre'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 0;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            ?>                <th <?php echo $colspan; ?>><?php echo $full_or_partial_text_link;?></th>            <?php            // end horizontal/horizontalflipped mode        } else {            $vertical_display['textbtn'] = '    <th ' . $rowspan . ' valign="middle">' . "\n"                                         . '        ' . "\n"                                         . '    </th>' . "\n";        } // end vertical mode    }    //     ... elseif no button, displays empty(ies) col(s) if required    elseif (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')             && ($is_display['edit_lnk'] != 'nn' || $is_display['del_lnk'] != 'nn')) {        $vertical_display['emptypre'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 0;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            ?>    <td<?php echo $colspan; ?>></td>            <?php            // end horizontal/horizontalfipped mode        } else {            $vertical_display['textbtn'] = '    <td' . $rowspan . '></td>' . "\n";        } // end vertical mode    }    //     ... elseif display an empty column if the actions links are disabled to match the rest of the table    elseif ($GLOBALS['cfg']['RowActionLinks'] == 'none'        && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal' || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')    ) {        echo '<th></th>';    }    // 2. Displays the fields' name    // 2.0 If sorting links should be used, checks if the query is a "JOIN"    //     statement (see 2.1.3)    // 2.0.1 Prepare Display column comments if enabled ($GLOBALS['cfg']['ShowBrowseComments']).    //       Do not show comments, if using horizontalflipped mode, because of space usage    if ($GLOBALS['cfg']['ShowBrowseComments']        && $_SESSION['tmp_user_values']['disp_direction'] != 'horizontalflipped'    ) {        $comments_map = array();        if (isset($analyzed_sql[0]) && is_array($analyzed_sql[0])) {            foreach ($analyzed_sql[0]['table_ref'] as $tbl) {                $tb = $tbl['table_true_name'];                $comments_map[$tb] = PMA_getComments($db, $tb);                unset($tb);            }        }    }    if ($GLOBALS['cfgRelation']['commwork'] && $GLOBALS['cfgRelation']['mimework'] && $GLOBALS['cfg']['BrowseMIME'] && ! $_SESSION['tmp_user_values']['hide_transformation']) {        include_once './libraries/transformations.lib.php';        $GLOBALS['mime_map'] = PMA_getMIME($db, $table);    }    // See if we have to highlight any header fields of a WHERE query.    // Uses SQL-Parser results.    $highlight_columns = array();    if (isset($analyzed_sql) && isset($analyzed_sql[0])        && isset($analyzed_sql[0]['where_clause_identifiers'])    ) {        $wi = 0;        if (isset($analyzed_sql[0]['where_clause_identifiers']) && is_array($analyzed_sql[0]['where_clause_identifiers'])) {            foreach ($analyzed_sql[0]['where_clause_identifiers'] AS $wci_nr => $wci) {                $highlight_columns[$wci] = 'true';            }        }    }    if (PMA_isSelect()) {        // prepare to get the column order, if available        $pmatable = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);    } else {        $col_order = false;        $col_visib = false;    }    for ($j = 0; $j < $fields_cnt; $j++) {        // assign $i with appropriate column order        $i = $col_order ? $col_order[$j] : $j;        //  See if this column should get highlight because it's used in the        //  where-query.        if (isset($highlight_columns[$fields_meta[$i]->name]) || isset($highlight_columns[PMA_backquote($fields_meta[$i]->name)])) {            $condition_field = true;        } else {            $condition_field = false;        }        // 2.0 Prepare comment-HTML-wrappers for each row, if defined/enabled.        if (isset($comments_map)            && isset($comments_map[$fields_meta[$i]->table])            && isset($comments_map[$fields_meta[$i]->table][$fields_meta[$i]->name])        ) {            $comments = '<span class="tblcomment">' . htmlspecialchars($comments_map[$fields_meta[$i]->table][$fields_meta[$i]->name]) . '</span>';        } else {            $comments = '';        }        // 2.1 Results can be sorted        if ($is_display['sort_lnk'] == '1') {            // 2.1.1 Checks if the table name is required; it's the case            //       for a query with a "JOIN" statement and if the column            //       isn't aliased, or in queries like            //       SELECT `1`.`master_field` , `2`.`master_field`            //       FROM `PMA_relation` AS `1` , `PMA_relation` AS `2`            if (isset($fields_meta[$i]->table) && strlen($fields_meta[$i]->table)) {                $sort_tbl = PMA_backquote($fields_meta[$i]->table) . '.';            } else {                $sort_tbl = '';            }            // 2.1.2 Checks if the current column is used to sort the            //       results            // the orgname member does not exist for all MySQL versions            // but if found, it's the one on which to sort            $name_to_use_in_sort = $fields_meta[$i]->name;            $is_orgname = false;            if (isset($fields_meta[$i]->orgname) && strlen($fields_meta[$i]->orgname)) {                $name_to_use_in_sort = $fields_meta[$i]->orgname;                $is_orgname = true;            }            // $name_to_use_in_sort might contain a space due to            // formatting of function expressions like "COUNT(name )"            // so we remove the space in this situation            $name_to_use_in_sort = str_replace(' )', ')', $name_to_use_in_sort);            if (empty($sort_expression)) {                $is_in_sort = false;            } else {                // Field name may be preceded by a space, or any number                // of characters followed by a dot (tablename.fieldname)                // so do a direct comparison for the sort expression;                // this avoids problems with queries like                // "SELECT id, count(id)..." and clicking to sort                // on id or on count(id).                // Another query to test this:                // SELECT p.*, FROM_UNIXTIME(p.temps) FROM mytable AS p                // (and try clicking on each column's header twice)                if (! empty($sort_tbl)                    && strpos($sort_expression_nodirection, $sort_tbl) === false                    && strpos($sort_expression_nodirection, '(') === false                ) {                    $sort_expression_nodirection = $sort_tbl . $sort_expression_nodirection;                }                $is_in_sort = (str_replace('`', '', $sort_tbl) . $name_to_use_in_sort == str_replace('`', '', $sort_expression_nodirection) ? true : false);            }            // 2.1.3 Check the field name for a bracket.            //       If it contains one, it's probably a function column            //       like 'COUNT(`field`)'            //       It still might be a column name of a view. See bug #3383711            //       Check is_orgname.            if (strpos($name_to_use_in_sort, '(') !== false && ! $is_orgname) {                $sort_order = "\n" . 'ORDER BY ' . $name_to_use_in_sort . ' ';            } else {                $sort_order = "\n" . 'ORDER BY ' . $sort_tbl . PMA_backquote($name_to_use_in_sort) . ' ';            }            unset($name_to_use_in_sort);            unset($is_orgname);            // 2.1.4 Do define the sorting URL            if (! $is_in_sort) {                // patch #455484 ("Smart" order)                $GLOBALS['cfg']['Order'] = strtoupper($GLOBALS['cfg']['Order']);                if ($GLOBALS['cfg']['Order'] === 'SMART') {                    $sort_order .= (preg_match('@time|date@i', $fields_meta[$i]->type)) ? 'DESC' : 'ASC';                } else {                    $sort_order .= $GLOBALS['cfg']['Order'];                }                $order_img   = '';            } elseif ('DESC' == $sort_direction) {                $sort_order .= ' ASC';                $order_img   = ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => "soimg$i", 'title' => ''));                $order_img  .= ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => "soimg$i hide", 'title' => ''));            } else {                $sort_order .= ' DESC';                $order_img   = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => "soimg$i", 'title' => ''));                $order_img  .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => "soimg$i hide", 'title' => ''));            }            if (preg_match('@(.*)([[:space:]](LIMIT (.*)|PROCEDURE (.*)|FOR UPDATE|LOCK IN SHARE MODE))@is', $unsorted_sql_query, $regs3)) {                $sorted_sql_query = $regs3[1] . $sort_order . $regs3[2];            } else {                $sorted_sql_query = $unsorted_sql_query . $sort_order;            }            $_url_params = array(                'db'                => $db,                'table'             => $table,                'sql_query'         => $sorted_sql_query,                'session_max_rows'  => $session_max_rows            );            $order_url  = 'sql.php' . PMA_generate_common_url($_url_params);            // 2.1.5 Displays the sorting URL            // enable sort order swapping for image            $order_link_params = array();            if (isset($order_img) && $order_img!='') {                if (strstr($order_img, 'asc')) {                    $order_link_params['onmouseover'] = "$('.soimg$i').toggle()";                    $order_link_params['onmouseout']  = "$('.soimg$i').toggle()";                } elseif (strstr($order_img, 'desc')) {                    $order_link_params['onmouseover'] = "$('.soimg$i').toggle()";                    $order_link_params['onmouseout']  = "$('.soimg$i').toggle()";                }            }            if ($GLOBALS['cfg']['HeaderFlipType'] == 'auto') {                if (PMA_USR_BROWSER_AGENT == 'IE') {                    $GLOBALS['cfg']['HeaderFlipType'] = 'css';                } else {                    $GLOBALS['cfg']['HeaderFlipType'] = 'fake';                }            }            if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'                && $GLOBALS['cfg']['HeaderFlipType'] == 'css'            ) {                $order_link_params['style'] = 'direction: ltr; writing-mode: tb-rl;';            }            $order_link_params['title'] = __('Sort');            $order_link_content = ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped' && $GLOBALS['cfg']['HeaderFlipType'] == 'fake' ? PMA_flipstring(htmlspecialchars($fields_meta[$i]->name), "<br />\n") : htmlspecialchars($fields_meta[$i]->name));            $order_link = PMA_linkOrButton($order_url, $order_link_content . $order_img, $order_link_params, false, true);            if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'            ) {                echo '<th';                $th_class = array();                $th_class[] = 'draggable';                if ($col_visib && !$col_visib[$j]) {                    $th_class[] = 'hide';                }                if ($condition_field) {                    $th_class[] = 'condition';                }                $th_class[] = 'column_heading';                if ($GLOBALS['cfg']['BrowsePointerEnable'] == true) {                    $th_class[] = 'pointer';                }                if ($GLOBALS['cfg']['BrowseMarkerEnable'] == true) {                    $th_class[] = 'marker';                }                echo ' class="' . implode(' ', $th_class) . '"';                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped') {                    echo ' valign="bottom"';                }                echo '>' . $order_link . $comments . '</th>';            }            $vertical_display['desc'][] = '    <th '                . 'class="draggable'                . ($condition_field ? ' condition' : '')                . '">' . "\n"                . $order_link . $comments . '    </th>' . "\n";        } // end if (2.1)        // 2.2 Results can't be sorted        else {            if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'            ) {                echo '<th';                $th_class = array();                $th_class[] = 'draggable';                if ($col_visib && !$col_visib[$j]) {                    $th_class[] = 'hide';                }                if ($condition_field) {                    $th_class[] = 'condition';                }                echo ' class="' . implode(' ', $th_class) . '"';                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped') {                    echo ' valign="bottom"';                }                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'                    && $GLOBALS['cfg']['HeaderFlipType'] == 'css'                ) {                    echo ' style="direction: ltr; writing-mode: tb-rl;"';                }                echo '>';                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'                    && $GLOBALS['cfg']['HeaderFlipType'] == 'fake'                ) {                    echo PMA_flipstring(htmlspecialchars($fields_meta[$i]->name), '<br />');                } else {                    echo htmlspecialchars($fields_meta[$i]->name);                }                echo "\n" . $comments . '</th>';            }            $vertical_display['desc'][] = '    <th '                . 'class="draggable'                . ($condition_field ? ' condition"' : '')                . '">' . "\n"                . '        ' . htmlspecialchars($fields_meta[$i]->name) . "\n"                . $comments . '    </th>';        } // end else (2.2)    } // end for    // 3. Displays the needed checkboxes at the right    //    column of the result table header if possible and required...    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && ($is_display['edit_lnk'] != 'nn' || $is_display['del_lnk'] != 'nn')        && $is_display['text_btn'] == '1'    ) {        $vertical_display['emptyafter'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 1;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            echo "\n";            ?>        <th <?php echo $colspan; ?>><?php echo $full_or_partial_text_link;?></th>            <?php            // end horizontal/horizontalflipped mode        } else {            $vertical_display['textbtn'] = '    <th ' . $rowspan . ' valign="middle">' . "\n"                                         . '        ' . "\n"                                         . '    </th>' . "\n";        } // end vertical mode    }    //     ... elseif no button, displays empty columns if required    // (unless coming from Browse mode print view)    elseif (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && ($is_display['edit_lnk'] == 'nn' && $is_display['del_lnk'] == 'nn')        && (! $GLOBALS['is_header_sent'])    ) {        $vertical_display['emptyafter'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 1;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            echo "\n";            ?><td<?php echo $colspan; ?>></td>            <?php            // end horizontal/horizontalflipped mode        } else {            $vertical_display['textbtn'] = '    <td' . $rowspan . '></td>' . "\n";        } // end vertical mode    }    if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'        || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'    ) {        ?></tr></thead>        <?php    }    return true;} // end of the 'PMA_displayTableHeaders()' function/** * Prepares the display for a value * * @param string $class           class of table cell * @param bool   $condition_field whether to add CSS class condition * @param string $value           value to display * * @return  string  the td */function PMA_buildValueDisplay($class, $condition_field, $value){    return '<td align="left"' . ' class="' . $class . ($condition_field ? ' condition' : '') . '">' . $value . '</td>';}/** * Prepares the display for a null value * * @param string $class           class of table cell * @param bool   $condition_field whether to add CSS class condition * @param object $meta            the meta-information about this field * @param string $align           cell allignment * * @return  string  the td */function PMA_buildNullDisplay($class, $condition_field, $meta, $align = ''){    // the null class is needed for grid editing    return '<td ' . $align . ' class="' . PMA_addClass($class, $condition_field, $meta, '') . ' null"><i>NULL</i></td>';}/** * Prepares the display for an empty value * * @param string $class           class of table cell * @param bool   $condition_field whether to add CSS class condition * @param object $meta            the meta-information about this field * @param string $align           cell allignment * * @return  string  the td */function PMA_buildEmptyDisplay($class, $condition_field, $meta, $align = ''){    $nowrap = ' nowrap';    return '<td ' . $align . ' class="' . PMA_addClass($class, $condition_field, $meta, $nowrap)  . '"></td>';}/** * Adds the relavant classes. * * @param string $class              class of table cell * @param bool   $condition_field    whether to add CSS class condition * @param object $meta               the meta-information about this field * @param string $nowrap             avoid wrapping * @param bool   $is_field_truncated is field truncated (display ...) * @param string $transform_function transformation function * @param string $default_function   default transformation function * * @return string the list of classes */function PMA_addClass($class, $condition_field, $meta, $nowrap, $is_field_truncated = false, $transform_function = '', $default_function = ''){    // Define classes to be added to this data field based on the type of data    $enum_class = '';    if (strpos($meta->flags, 'enum') !== false) {        $enum_class = ' enum';    }    $set_class = '';    if (strpos($meta->flags, 'set') !== false) {        $set_class = ' set';    }    $bit_class = '';    if (strpos($meta->type, 'bit') !== false) {        $bit_class = ' bit';    }    $mime_type_class = '';    if (isset($meta->mimetype)) {        $mime_type_class = ' ' . preg_replace('/\//', '_', $meta->mimetype);    }    $result = $class . ($condition_field ? ' condition' : '') . $nowrap    . ' ' . ($is_field_truncated ? ' truncated' : '')    . ($transform_function != $default_function ? ' transformed' : '')    . $enum_class . $set_class . $bit_class . $mime_type_class;    return $result;}/** * Displays the body of the results table * * @param integer &$dt_result   the link id associated to the query which results have *                              to be displayed * @param array   &$is_display  which elements to display * @param array   $map          the list of relations * @param array   $analyzed_sql the analyzed query * * @return  boolean  always true * * @global string   $db                the database name * @global string   $table             the table name * @global string   $goto              the URL to go back in case of errors * @global string   $sql_query         the SQL query * @global array    $fields_meta       the list of fields properties * @global integer  $fields_cnt        the total number of fields returned by *                                      the SQL query * @global array    $vertical_display  informations used with vertical display *                                      mode * @global array    $highlight_columns column names to highlight * @global array    $row               current row data * * @access private * * @see     PMA_displayTable() */function PMA_displayTableBody(&$dt_result, &$is_display, $map, $analyzed_sql){    global $db, $table, $goto;    global $sql_query, $fields_meta, $fields_cnt;    global $vertical_display, $highlight_columns;    global $row; // mostly because of browser transformations, to make the row-data accessible in a plugin    $url_sql_query          = $sql_query;    // query without conditions to shorten URLs when needed, 200 is just    // guess, it should depend on remaining URL length    if (isset($analyzed_sql)        && isset($analyzed_sql[0])        && isset($analyzed_sql[0]['querytype'])        && $analyzed_sql[0]['querytype'] == 'SELECT'        && strlen($sql_query) > 200    ) {        $url_sql_query = 'SELECT ';        if (isset($analyzed_sql[0]['queryflags']['distinct'])) {            $url_sql_query .= ' DISTINCT ';        }        $url_sql_query .= $analyzed_sql[0]['select_expr_clause'];        if (!empty($analyzed_sql[0]['from_clause'])) {            $url_sql_query .= ' FROM ' . $analyzed_sql[0]['from_clause'];        }    }    if (! is_array($map)) {        $map = array();    }    $row_no                         = 0;    $vertical_display['edit']       = array();    $vertical_display['copy']       = array();    $vertical_display['delete']     = array();    $vertical_display['data']       = array();    $vertical_display['row_delete'] = array();    // name of the class added to all grid editable elements    $grid_edit_class = 'grid_edit';    // prepare to get the column order, if available    if (PMA_isSelect()) {        $pmatable = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);    } else {        $col_order = false;        $col_visib = false;    }    // Correction University of Virginia 19991216 in the while below    // Previous code assumed that all tables have keys, specifically that    // the phpMyAdmin GUI should support row delete/edit only for such    // tables.    // Although always using keys is arguably the prescribed way of    // defining a relational table, it is not required. This will in    // particular be violated by the novice.    // We want to encourage phpMyAdmin usage by such novices. So the code    // below has been changed to conditionally work as before when the    // table being displayed has one or more keys; but to display    // delete/edit options correctly for tables without keys.    $odd_row = true;    while ($row = PMA_DBI_fetch_row($dt_result)) {        // "vertical display" mode stuff        if ($row_no != 0 && $_SESSION['tmp_user_values']['repeat_cells'] != 0            && !($row_no % $_SESSION['tmp_user_values']['repeat_cells'])            && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')        ) {            echo '<tr>' . "\n";            if ($vertical_display['emptypre'] > 0) {                echo '    <th colspan="' . $vertical_display['emptypre'] . '">' . "\n"                    .'        &nbsp;</th>' . "\n";            } else if ($GLOBALS['cfg']['RowActionLinks'] == 'none') {                echo '    <th></th>' . "\n";            }            foreach ($vertical_display['desc'] as $val) {                echo $val;            }            if ($vertical_display['emptyafter'] > 0) {                echo '    <th colspan="' . $vertical_display['emptyafter'] . '">' . "\n"                    .'        &nbsp;</th>' . "\n";            }            echo '</tr>' . "\n";        } // end if        $alternating_color_class = ($odd_row ? 'odd' : 'even');        $odd_row = ! $odd_row;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            // pointer code part            echo '<tr class="' . $alternating_color_class . '">';        }        // 1. Prepares the row        // 1.1 Results from a "SELECT" statement -> builds the        //     WHERE clause to use in links (a unique key if possible)        /**         * @todo $where_clause could be empty, for example a table         *       with only one field and it's a BLOB; in this case,         *       avoid to display the delete and edit links         */        list($where_clause, $clause_is_unique, $condition_array) = PMA_getUniqueCondition($dt_result, $fields_cnt, $fields_meta, $row);        $where_clause_html = urlencode($where_clause);        // 1.2 Defines the URLs for the modify/delete link(s)        if ($is_display['edit_lnk'] != 'nn' || $is_display['del_lnk'] != 'nn') {            // We need to copy the value or else the == 'both' check will always return true            if ($GLOBALS['cfg']['PropertiesIconic'] === 'both') {                $iconic_spacer = '<div class="nowrap">';            } else {                $iconic_spacer = '';            }            // 1.2.1 Modify link(s)            if ($is_display['edit_lnk'] == 'ur') { // update row case                $_url_params = array(                    'db'               => $db,                    'table'            => $table,                    'where_clause'     => $where_clause,                    'clause_is_unique' => $clause_is_unique,                    'sql_query'        => $url_sql_query,                    'goto'             => 'sql.php',                );                $edit_url = 'tbl_change.php' . PMA_generate_common_url($_url_params + array('default_action' => 'update'));                $copy_url = 'tbl_change.php' . PMA_generate_common_url($_url_params + array('default_action' => 'insert'));                $edit_str = PMA_getIcon('b_edit.png', __('Edit'));                $copy_str = PMA_getIcon('b_insrow.png', __('Copy'));                // Class definitions required for grid editing jQuery scripts                $edit_anchor_class = "edit_row_anchor";                if ( $clause_is_unique == 0) {                    $edit_anchor_class .= ' nonunique';                }            } // end if (1.2.1)            // 1.2.2 Delete/Kill link(s)            if ($is_display['del_lnk'] == 'dr') { // delete row case                $_url_params = array(                    'db'        => $db,                    'table'     => $table,                    'sql_query' => $url_sql_query,                    'message_to_show' => __('The row has been deleted'),                    'goto'      => (empty($goto) ? 'tbl_sql.php' : $goto),                );                $lnk_goto = 'sql.php' . PMA_generate_common_url($_url_params, 'text');                $del_query = 'DELETE FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table)                    . ' WHERE ' . $where_clause . ($clause_is_unique ? '' : ' LIMIT 1');                $_url_params = array(                    'db'        => $db,                    'table'     => $table,                    'sql_query' => $del_query,                    'message_to_show' => __('The row has been deleted'),                    'goto'      => $lnk_goto,                );                $del_url  = 'sql.php' . PMA_generate_common_url($_url_params);                $js_conf  = 'DELETE FROM ' . PMA_jsFormat($db) . '.' . PMA_jsFormat($table)                          . ' WHERE ' . PMA_jsFormat($where_clause, false)                          . ($clause_is_unique ? '' : ' LIMIT 1');                $del_str = PMA_getIcon('b_drop.png', __('Delete'));            } elseif ($is_display['del_lnk'] == 'kp') { // kill process case                $_url_params = array(                    'db'        => $db,                    'table'     => $table,                    'sql_query' => $url_sql_query,                    'goto'      => 'main.php',                );                $lnk_goto = 'sql.php' . PMA_generate_common_url($_url_params, 'text');                $_url_params = array(                    'db'        => 'mysql',                    'sql_query' => 'KILL ' . $row[0],                    'goto'      => $lnk_goto,                );                $del_url  = 'sql.php' . PMA_generate_common_url($_url_params);                $del_query = 'KILL ' . $row[0];                $js_conf  = 'KILL ' . $row[0];                $del_str = PMA_getIcon('b_drop.png', __('Kill'));            } // end if (1.2.2)            // 1.3 Displays the links at left if required            if (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')                && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')            ) {                if (! isset($js_conf)) {                    $js_conf = '';                }                echo PMA_generateCheckboxAndLinks('left', $del_url, $is_display, $row_no, $where_clause, $where_clause_html, $condition_array, $del_query, 'l', $edit_url, $copy_url, $edit_anchor_class, $edit_str, $copy_str, $del_str, $js_conf);            } elseif (($GLOBALS['cfg']['RowActionLinks'] == 'none')                && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')            ) {                if (! isset($js_conf)) {                    $js_conf = '';                }                echo PMA_generateCheckboxAndLinks('none', $del_url, $is_display, $row_no, $where_clause, $where_clause_html, $condition_array, $del_query, 'l', $edit_url, $copy_url, $edit_anchor_class, $edit_str, $copy_str, $del_str, $js_conf);            } // end if (1.3)        } // end if (1)        // 2. Displays the rows' values        for ($j = 0; $j < $fields_cnt; ++$j) {            // assign $i with appropriate column order            $i = $col_order ? $col_order[$j] : $j;            $meta    = $fields_meta[$i];            $not_null_class = $meta->not_null ? 'not_null' : '';            $relation_class = isset($map[$meta->name]) ? 'relation' : '';            $hide_class = ($col_visib && !$col_visib[$j] &&                           // hide per <td> only if the display direction is not vertical                           $_SESSION['tmp_user_values']['disp_direction'] != 'vertical') ? 'hide' : '';            // handle datetime-related class, for grid editing            if (substr($meta->type, 0, 9) == 'timestamp' || $meta->type == 'datetime') {                $field_type_class = 'datetimefield';            } else if ($meta->type == 'date') {                $field_type_class = 'datefield';            } else {                $field_type_class = '';            }            $pointer = $i;            $is_field_truncated = false;            //If the previous column had blob data, we need to reset the class            // to $inline_edit_class            $class = 'data ' . $grid_edit_class . ' ' . $not_null_class . ' ' . $relation_class . ' ' . $hide_class . ' ' . $field_type_class; //' ' . $alternating_color_class .            //  See if this column should get highlight because it's used in the            //  where-query.            if (isset($highlight_columns) && (isset($highlight_columns[$meta->name]) || isset($highlight_columns[PMA_backquote($meta->name)]))) {                $condition_field = true;            } else {                $condition_field = false;            }            if ($_SESSION['tmp_user_values']['disp_direction'] == 'vertical' && (! isset($GLOBALS['printview']) || ($GLOBALS['printview'] != '1'))) {                // the row number corresponds to a data row, not HTML table row                $class .= ' row_' . $row_no;                if ($GLOBALS['cfg']['BrowsePointerEnable'] == true) {                    $class .= ' vpointer';                }                if ($GLOBALS['cfg']['BrowseMarkerEnable'] == true) {                    $class .= ' vmarker';                }            }// end if            // Wrap MIME-transformations. [MIME]            $default_function = 'default_function'; // default_function            $transform_function = $default_function;            $transform_options = array();            if ($GLOBALS['cfgRelation']['mimework'] && $GLOBALS['cfg']['BrowseMIME']) {                if (isset($GLOBALS['mime_map'][$meta->name]['mimetype']) && isset($GLOBALS['mime_map'][$meta->name]['transformation']) && !empty($GLOBALS['mime_map'][$meta->name]['transformation'])) {                    $include_file = PMA_securePath($GLOBALS['mime_map'][$meta->name]['transformation']);                    if (file_exists('./libraries/transformations/' . $include_file)) {                        $transformfunction_name = str_replace('.inc.php', '', $GLOBALS['mime_map'][$meta->name]['transformation']);                        include_once './libraries/transformations/' . $include_file;                        if (function_exists('PMA_transformation_' . $transformfunction_name)) {                            $transform_function = 'PMA_transformation_' . $transformfunction_name;                            $transform_options  = PMA_transformation_getOptions((isset($GLOBALS['mime_map'][$meta->name]['transformation_options']) ? $GLOBALS['mime_map'][$meta->name]['transformation_options'] : ''));                            $meta->mimetype     = str_replace('_', '/', $GLOBALS['mime_map'][$meta->name]['mimetype']);                        }                    } // end if file_exists                } // end if transformation is set            } // end if mime/transformation works.            $_url_params = array(                'db'            => $db,                'table'         => $table,                'where_clause'  => $where_clause,                'transform_key' => $meta->name,            );            if (! empty($sql_query)) {                $_url_params['sql_query'] = $url_sql_query;            }            $transform_options['wrapper_link'] = PMA_generate_common_url($_url_params);            // n u m e r i c            if ($meta->numeric == 1) {                // if two fields have the same name (this is possible                //       with self-join queries, for example), using $meta->name                //       will show both fields NULL even if only one is NULL,                //       so use the $pointer                if (! isset($row[$i]) || is_null($row[$i])) {                    $vertical_display['data'][$row_no][$i]     =  PMA_buildNullDisplay($class, $condition_field, $meta, 'align="right"');                } elseif ($row[$i] != '') {                    $nowrap = ' nowrap';                    $where_comparison = ' = ' . $row[$i];                    $vertical_display['data'][$row_no][$i]     = '<td align="right"' . PMA_prepare_row_data($class, $condition_field, $analyzed_sql, $meta, $map, $row[$i], $transform_function, $default_function, $nowrap, $where_comparison, $transform_options, $is_field_truncated);                } else {                    $vertical_display['data'][$row_no][$i]     = PMA_buildEmptyDisplay($class, $condition_field, $meta, 'align="right"');                }            //  b l o b            } elseif (stristr($meta->type, 'BLOB')) {                // PMA_mysql_fetch_fields returns BLOB in place of                // TEXT fields type so we have to ensure it's really a BLOB                $field_flags = PMA_DBI_field_flags($dt_result, $i);                if (stristr($field_flags, 'BINARY')) {                    // remove 'grid_edit' from $class as we can't edit binary data.                    $class = str_replace('grid_edit', '', $class);                    if (! isset($row[$i]) || is_null($row[$i])) {                        $vertical_display['data'][$row_no][$i]     =  PMA_buildNullDisplay($class, $condition_field, $meta);                    } else {                        // for blobstreaming                        // if valid BS reference exists                        if (PMA_BS_IsPBMSReference($row[$i], $db)) {                            $blobtext = PMA_BS_CreateReferenceLink($row[$i], $db);                        } else {                            $blobtext = PMA_handle_non_printable_contents('BLOB', (isset($row[$i]) ? $row[$i] : ''), $transform_function, $transform_options, $default_function, $meta, $_url_params);                        }                        $vertical_display['data'][$row_no][$i]     =  PMA_buildValueDisplay($class, $condition_field, $blobtext);                        unset($blobtext);                    }                // not binary:                } else {                    if (! isset($row[$i]) || is_null($row[$i])) {                        $vertical_display['data'][$row_no][$i]     =  PMA_buildNullDisplay($class, $condition_field, $meta);                    } elseif ($row[$i] != '') {                        // if a transform function for blob is set, none of these replacements will be made                        if (PMA_strlen($row[$i]) > $GLOBALS['cfg']['LimitChars'] && $_SESSION['tmp_user_values']['display_text'] == 'P') {                            $row[$i] = PMA_substr($row[$i], 0, $GLOBALS['cfg']['LimitChars']) . '...';                            $is_field_truncated = true;                        }                        // displays all space characters, 4 space                        // characters for tabulations and <cr>/<lf>                        $row[$i]     = ($default_function != $transform_function ? $transform_function($row[$i], $transform_options, $meta) : $default_function($row[$i], array(), $meta));                        if ($is_field_truncated) {                            $class .= ' truncated';                        }                        $vertical_display['data'][$row_no][$i]     = PMA_buildValueDisplay($class, $condition_field, $row[$i]);                    } else {                        $vertical_display['data'][$row_no][$i]     = PMA_buildEmptyDisplay($class, $condition_field, $meta);                    }                }            // g e o m e t r y            } elseif ($meta->type == 'geometry') {                // Remove 'grid_edit' from $class as we do not allow to inline-edit geometry data.                $class = str_replace('grid_edit', '', $class);                if (! isset($row[$i]) || is_null($row[$i])) {                    $vertical_display['data'][$row_no][$i] = PMA_buildNullDisplay($class, $condition_field, $meta);                } elseif ($row[$i] != '') {                    // Display as [GEOMETRY - (size)]                    if ('GEOM' == $_SESSION['tmp_user_values']['geometry_display']) {                        $geometry_text = PMA_handle_non_printable_contents(                            'GEOMETRY', (isset($row[$i]) ? $row[$i] : ''), $transform_function,                            $transform_options, $default_function, $meta                        );                        $vertical_display['data'][$row_no][$i] = PMA_buildValueDisplay(                            $class, $condition_field, $geometry_text                        );                    // Display in Well Known Text(WKT) format.                    } elseif ('WKT' == $_SESSION['tmp_user_values']['geometry_display']) {                        $where_comparison = ' = ' . $row[$i];                        // Convert to WKT format                        $wktval = PMA_asWKT($row[$i]);                        if (PMA_strlen($wktval) > $GLOBALS['cfg']['LimitChars']                            && $_SESSION['tmp_user_values']['display_text'] == 'P'                        ) {                            $wktval = PMA_substr($wktval, 0, $GLOBALS['cfg']['LimitChars']) . '...';                            $is_field_truncated = true;                        }                        $vertical_display['data'][$row_no][$i] = '<td ' . PMA_prepare_row_data(                            $class, $condition_field, $analyzed_sql, $meta, $map, $wktval, $transform_function,                            $default_function, '', $where_comparison, $transform_options, $is_field_truncated                        );                    // Display in  Well Known Binary(WKB) format.                    } else {                        if ($_SESSION['tmp_user_values']['display_binary']) {                            $where_comparison = ' = ' . $row[$i];                            if ($_SESSION['tmp_user_values']['display_binary_as_hex']                                && PMA_contains_nonprintable_ascii($row[$i])                            ) {                                $wkbval = PMA_substr(bin2hex($row[$i]), 8);                            } else {                                $wkbval = htmlspecialchars(PMA_replace_binary_contents($row[$i]));                            }                            if (PMA_strlen($wkbval) > $GLOBALS['cfg']['LimitChars']                                && $_SESSION['tmp_user_values']['display_text'] == 'P'                            ) {                                $wkbval = PMA_substr($wkbval, 0, $GLOBALS['cfg']['LimitChars']) . '...';                                $is_field_truncated = true;                            }                            $vertical_display['data'][$row_no][$i] = '<td ' . PMA_prepare_row_data(                                $class, $condition_field, $analyzed_sql, $meta, $map, $wkbval, $transform_function,                                $default_function, '', $where_comparison, $transform_options, $is_field_truncated                            );                        } else {                            $wkbval = PMA_handle_non_printable_contents(                                'BINARY', $row[$i], $transform_function, $transform_options, $default_function, $meta, $_url_params                            );                            $vertical_display['data'][$row_no][$i] = PMA_buildValueDisplay($class, $condition_field, $wkbval);                        }                    }                } else {                    $vertical_display['data'][$row_no][$i] = PMA_buildEmptyDisplay($class, $condition_field, $meta);                }            // n o t   n u m e r i c   a n d   n o t   B L O B            } else {                if (! isset($row[$i]) || is_null($row[$i])) {                    $vertical_display['data'][$row_no][$i]     =  PMA_buildNullDisplay($class, $condition_field, $meta);                } elseif ($row[$i] != '') {                    // support blanks in the key                    $relation_id = $row[$i];                    // Cut all fields to $GLOBALS['cfg']['LimitChars']                    // (unless it's a link-type transformation)                    if (PMA_strlen($row[$i]) > $GLOBALS['cfg']['LimitChars'] && $_SESSION['tmp_user_values']['display_text'] == 'P' && !strpos($transform_function, 'link') === true) {                        $row[$i] = PMA_substr($row[$i], 0, $GLOBALS['cfg']['LimitChars']) . '...';                        $is_field_truncated = true;                    }                    // displays special characters from binaries                    $field_flags = PMA_DBI_field_flags($dt_result, $i);                    $formatted = false;                    if (isset($meta->_type) && $meta->_type === MYSQLI_TYPE_BIT) {                        $row[$i]     = PMA_printable_bit_value($row[$i], $meta->length);                        // some results of PROCEDURE ANALYSE() are reported as                        // being BINARY but they are quite readable,                        // so don't treat them as BINARY                    } elseif (stristr($field_flags, 'BINARY') && $meta->type == 'string' && !(isset($GLOBALS['is_analyse']) && $GLOBALS['is_analyse'])) {                        if ($_SESSION['tmp_user_values']['display_binary']) {                            // user asked to see the real contents of BINARY                            // fields                            if ($_SESSION['tmp_user_values']['display_binary_as_hex'] && PMA_contains_nonprintable_ascii($row[$i])) {                                $row[$i] = bin2hex($row[$i]);                            } else {                                $row[$i] = htmlspecialchars(PMA_replace_binary_contents($row[$i]));                            }                        } else {                            // we show the BINARY message and field's size                            // (or maybe use a transformation)                            $row[$i] = PMA_handle_non_printable_contents('BINARY', $row[$i], $transform_function, $transform_options, $default_function, $meta, $_url_params);                            $formatted = true;                        }                    }                    if ($formatted) {                        $vertical_display['data'][$row_no][$i]     = PMA_buildValueDisplay($class, $condition_field, $row[$i]);                    } else {                        // transform functions may enable no-wrapping:                        $function_nowrap = $transform_function . '_nowrap';                        $bool_nowrap = (($default_function != $transform_function && function_exists($function_nowrap)) ? $function_nowrap($transform_options) : false);                        // do not wrap if date field type                        $nowrap = ((preg_match('@DATE|TIME@i', $meta->type) || $bool_nowrap) ? ' nowrap' : '');                        $where_comparison = ' = \'' . PMA_sqlAddSlashes($row[$i]) . '\'';                        $vertical_display['data'][$row_no][$i]     = '<td ' . PMA_prepare_row_data($class, $condition_field, $analyzed_sql, $meta, $map, $row[$i], $transform_function, $default_function, $nowrap, $where_comparison, $transform_options, $is_field_truncated);                    }                } else {                    $vertical_display['data'][$row_no][$i]     = PMA_buildEmptyDisplay($class, $condition_field, $meta);                }            }            // output stored cell            if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'            ) {                echo $vertical_display['data'][$row_no][$i];            }            if (isset($vertical_display['rowdata'][$i][$row_no])) {                $vertical_display['rowdata'][$i][$row_no] .= $vertical_display['data'][$row_no][$i];            } else {                $vertical_display['rowdata'][$i][$row_no] = $vertical_display['data'][$row_no][$i];            }        } // end for (2)        // 3. Displays the modify/delete links on the right if required        if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')            && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')        ) {            if (! isset($js_conf)) {                $js_conf = '';            }            echo PMA_generateCheckboxAndLinks('right', $del_url, $is_display, $row_no, $where_clause, $where_clause_html, $condition_array, $del_query, 'r', $edit_url, $copy_url, $edit_anchor_class, $edit_str, $copy_str, $del_str, $js_conf);        } // end if (3)        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            ?></tr>            <?php        } // end if        // 4. Gather links of del_urls and edit_urls in an array for later        //    output        if (! isset($vertical_display['edit'][$row_no])) {            $vertical_display['edit'][$row_no]       = '';            $vertical_display['copy'][$row_no]       = '';            $vertical_display['delete'][$row_no]     = '';            $vertical_display['row_delete'][$row_no] = '';        }        $vertical_class = ' row_' . $row_no;        if ($GLOBALS['cfg']['BrowsePointerEnable'] == true) {            $vertical_class .= ' vpointer';        }        if ($GLOBALS['cfg']['BrowseMarkerEnable'] == true) {            $vertical_class .= ' vmarker';        }        if (!empty($del_url) && $is_display['del_lnk'] != 'kp') {            $vertical_display['row_delete'][$row_no] .= PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, '[%_PMA_CHECKBOX_DIR_%]', $alternating_color_class . $vertical_class);        } else {            unset($vertical_display['row_delete'][$row_no]);        }        if (isset($edit_url)) {            $vertical_display['edit'][$row_no]   .= PMA_generateEditLink($edit_url, $alternating_color_class . ' ' . $edit_anchor_class . $vertical_class, $edit_str, $where_clause, $where_clause_html);        } else {            unset($vertical_display['edit'][$row_no]);        }        if (isset($copy_url)) {            $vertical_display['copy'][$row_no]   .= PMA_generateCopyLink($copy_url, $copy_str, $where_clause, $where_clause_html, $alternating_color_class . $vertical_class);        } else {            unset($vertical_display['copy'][$row_no]);        }        if (isset($del_url)) {            if (! isset($js_conf)) {                $js_conf = '';            }            $vertical_display['delete'][$row_no] .= PMA_generateDeleteLink($del_url, $del_str, $js_conf, $alternating_color_class . $vertical_class);        } else {            unset($vertical_display['delete'][$row_no]);        }        echo (($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal' || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped') ? "\n" : '');        $row_no++;    } // end while    // this is needed by PMA_displayTable() to generate the proper param    // in the multi-edit and multi-delete form    return $clause_is_unique;} // end of the 'PMA_displayTableBody()' function/** * Do display the result table with the vertical direction mode. * * @return  boolean  always true * * @global  array    $vertical_display the information to display * * @access  private * * @see     PMA_displayTable() */function PMA_displayVerticalTable(){    global $vertical_display;    // Displays "multi row delete" link at top if required    if ($GLOBALS['cfg']['RowActionLinks'] != 'right'        && is_array($vertical_display['row_delete'])        && (count($vertical_display['row_delete']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if ($GLOBALS['cfg']['RowActionLinks'] == 'none') {            // if we are not showing the RowActionLinks, then we need to show the Multi-Row-Action checkboxes            echo '<th></th>' . "\n";        }        echo $vertical_display['textbtn'];        $cell_displayed = 0;        foreach ($vertical_display['row_delete'] as $val) {            if (($cell_displayed != 0) && ($_SESSION['tmp_user_values']['repeat_cells'] != 0) && !($cell_displayed % $_SESSION['tmp_user_values']['repeat_cells'])) {                echo '<th' .                     (($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? ' rowspan="4"' : '') .                     '></th>' . "\n";            }            echo str_replace('[%_PMA_CHECKBOX_DIR_%]', '_left', $val);            $cell_displayed++;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "edit" link at top if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['edit'])        && (count($vertical_display['edit']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['edit'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "copy" link at top if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['copy'])        && (count($vertical_display['copy']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['copy'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "delete" link at top if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['delete'])        && (count($vertical_display['delete']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['edit']) && ! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['delete'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    if (PMA_isSelect()) {        // prepare to get the column order, if available        $pmatable = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);    } else {        $col_order = false;        $col_visib = false;    }    // Displays data    foreach ($vertical_display['desc'] AS $j => $val) {        // assign appropriate key with current column order        $key = $col_order ? $col_order[$j] : $j;        echo '<tr' . (($col_visib && !$col_visib[$j]) ? ' class="hide"' : '') . '>' . "\n";        echo $val;        $cell_displayed = 0;        foreach ($vertical_display['rowdata'][$key] as $subval) {            if (($cell_displayed != 0) && ($_SESSION['tmp_user_values']['repeat_cells'] != 0) and !($cell_displayed % $_SESSION['tmp_user_values']['repeat_cells'])) {                echo $val;            }            echo $subval;            $cell_displayed++;        } // end while        echo '</tr>' . "\n";    } // end while    // Displays "multi row delete" link at bottom if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['row_delete'])        && (count($vertical_display['row_delete']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        echo $vertical_display['textbtn'];        $cell_displayed = 0;        foreach ($vertical_display['row_delete'] as $val) {            if (($cell_displayed != 0) && ($_SESSION['tmp_user_values']['repeat_cells'] != 0) && !($cell_displayed % $_SESSION['tmp_user_values']['repeat_cells'])) {                echo '<th' .                     (($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? ' rowspan="4"' : '') .                     '></th>' . "\n";            }            echo str_replace('[%_PMA_CHECKBOX_DIR_%]', '_right', $val);            $cell_displayed++;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "edit" link at bottom if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['edit'])        && (count($vertical_display['edit']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['edit'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "copy" link at bottom if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['copy'])        && (count($vertical_display['copy']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['copy'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "delete" link at bottom if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['delete'])        && (count($vertical_display['delete']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['edit']) && ! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['delete'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    }    return true;} // end of the 'PMA_displayVerticalTable' function/** * Checks the posted options for viewing query resutls * and sets appropriate values in the session. * * @todo    make maximum remembered queries configurable * @todo    move/split into SQL class!? * @todo    currently this is called twice unnecessary * @todo    ignore LIMIT and ORDER in query!? * * @return nothing */function PMA_displayTable_checkConfigParams(){    $sql_md5 = md5($GLOBALS['sql_query']);    $_SESSION['tmp_user_values']['query'][$sql_md5]['sql'] = $GLOBALS['sql_query'];    if (PMA_isValid($_REQUEST['disp_direction'], array('horizontal', 'vertical', 'horizontalflipped'))) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['disp_direction'] = $_REQUEST['disp_direction'];        unset($_REQUEST['disp_direction']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['disp_direction'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['disp_direction'] = $GLOBALS['cfg']['DefaultDisplay'];    }    if (PMA_isValid($_REQUEST['repeat_cells'], 'numeric')) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['repeat_cells'] = $_REQUEST['repeat_cells'];        unset($_REQUEST['repeat_cells']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['repeat_cells'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['repeat_cells'] = $GLOBALS['cfg']['RepeatCells'];    }    // as this is a form value, the type is always string so we cannot    // use PMA_isValid($_REQUEST['session_max_rows'], 'integer')    if ((PMA_isValid($_REQUEST['session_max_rows'], 'numeric')        && (int) $_REQUEST['session_max_rows'] == $_REQUEST['session_max_rows'])        || $_REQUEST['session_max_rows'] == 'all'    ) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'] = $_REQUEST['session_max_rows'];        unset($_REQUEST['session_max_rows']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'] = $GLOBALS['cfg']['MaxRows'];    }    if (PMA_isValid($_REQUEST['pos'], 'numeric')) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['pos'] = $_REQUEST['pos'];        unset($_REQUEST['pos']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['pos'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['pos'] = 0;    }    if (PMA_isValid($_REQUEST['display_text'], array('P', 'F'))) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_text'] = $_REQUEST['display_text'];        unset($_REQUEST['display_text']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['display_text'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_text'] = 'P';    }    if (PMA_isValid($_REQUEST['relational_display'], array('K', 'D'))) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['relational_display'] = $_REQUEST['relational_display'];        unset($_REQUEST['relational_display']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['relational_display'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['relational_display'] = 'K';    }    if (PMA_isValid($_REQUEST['geometry_display'], array('WKT', 'WKB', 'GEOM'))) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['geometry_display'] = $_REQUEST['geometry_display'];        unset($_REQUEST['geometry_display']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['geometry_display'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['geometry_display'] = 'GEOM';    }    if (isset($_REQUEST['display_binary'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary'] = true;        unset($_REQUEST['display_binary']);    } elseif (isset($_REQUEST['display_options_form'])) {        // we know that the checkbox was unchecked        unset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary']);    } elseif (isset($_REQUEST['full_text_button'])) {        // do nothing to keep the value that is there in the session    } else {        // selected by default because some operations like OPTIMIZE TABLE        // and all queries involving functions return "binary" contents,        // according to low-level field flags        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary'] = true;    }    if (isset($_REQUEST['display_binary_as_hex'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary_as_hex'] = true;        unset($_REQUEST['display_binary_as_hex']);    } elseif (isset($_REQUEST['display_options_form'])) {        // we know that the checkbox was unchecked        unset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary_as_hex']);    } elseif (isset($_REQUEST['full_text_button'])) {        // do nothing to keep the value that is there in the session    } else {        // display_binary_as_hex config option        if (isset($GLOBALS['cfg']['DisplayBinaryAsHex']) && true === $GLOBALS['cfg']['DisplayBinaryAsHex']) {            $_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary_as_hex'] = true;        }    }    if (isset($_REQUEST['display_blob'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_blob'] = true;        unset($_REQUEST['display_blob']);    } elseif (isset($_REQUEST['display_options_form'])) {        // we know that the checkbox was unchecked        unset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_blob']);    }    if (isset($_REQUEST['hide_transformation'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['hide_transformation'] = true;        unset($_REQUEST['hide_transformation']);    } elseif (isset($_REQUEST['display_options_form'])) {        // we know that the checkbox was unchecked        unset($_SESSION['tmp_user_values']['query'][$sql_md5]['hide_transformation']);    }    // move current query to the last position, to be removed last    // so only least executed query will be removed if maximum remembered queries    // limit is reached    $tmp = $_SESSION['tmp_user_values']['query'][$sql_md5];    unset($_SESSION['tmp_user_values']['query'][$sql_md5]);    $_SESSION['tmp_user_values']['query'][$sql_md5] = $tmp;    // do not exceed a maximum number of queries to remember    if (count($_SESSION['tmp_user_values']['query']) > 10) {        array_shift($_SESSION['tmp_user_values']['query']);        //echo 'deleting one element ...';    }    // populate query configuration    $_SESSION['tmp_user_values']['display_text'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['display_text'];    $_SESSION['tmp_user_values']['relational_display'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['relational_display'];    $_SESSION['tmp_user_values']['geometry_display'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['geometry_display'];    $_SESSION['tmp_user_values']['display_binary'] = isset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary']) ? true : false;    $_SESSION['tmp_user_values']['display_binary_as_hex'] = isset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary_as_hex']) ? true : false;    $_SESSION['tmp_user_values']['display_blob'] = isset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_blob']) ? true : false;    $_SESSION['tmp_user_values']['hide_transformation'] = isset($_SESSION['tmp_user_values']['query'][$sql_md5]['hide_transformation']) ? true : false;    $_SESSION['tmp_user_values']['pos'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['pos'];    $_SESSION['tmp_user_values']['max_rows'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'];    $_SESSION['tmp_user_values']['repeat_cells'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['repeat_cells'];    $_SESSION['tmp_user_values']['disp_direction'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['disp_direction'];    /*     * debugging    echo '<pre>';    var_dump($_SESSION['tmp_user_values']);    echo '</pre>';     */}/** * Displays a table of results returned by a SQL query. * This function is called by the "sql.php" script. * * @param integer &$dt_result     the link id associated to the query which results have *                                to be displayed * @param array   &$the_disp_mode the display mode * @param array   $analyzed_sql   the analyzed query * * @global  string   $db                the database name * @global  string   $table             the table name * @global  string   $goto              the URL to go back in case of errors * @global  string   $sql_query         the current SQL query * @global  integer  $num_rows          the total number of rows returned by the *                                      SQL query * @global  integer  $unlim_num_rows    the total number of rows returned by the *                                      SQL query without any programmatically *                                      appended "LIMIT" clause * @global  array    $fields_meta       the list of fields properties * @global  integer  $fields_cnt        the total number of fields returned by *                                      the SQL query * @global  array    $vertical_display  informations used with vertical display *                                      mode * @global  array    $highlight_columns column names to highlight * @global  array    $cfgRelation       the relation settings * @global  array    $showtable         table definitions * * @access  private * * @see     PMA_showMessage(), PMA_setDisplayMode(), *          PMA_displayTableNavigation(), PMA_displayTableHeaders(), *          PMA_displayTableBody(), PMA_displayResultsOperations() * * @return nothing */function PMA_displayTable(&$dt_result, &$the_disp_mode, $analyzed_sql){    global $db, $table, $goto;    global $sql_query, $num_rows, $unlim_num_rows, $fields_meta, $fields_cnt;    global $vertical_display, $highlight_columns;    global $cfgRelation;    global $showtable;    // why was this called here? (already called from sql.php)    //PMA_displayTable_checkConfigParams();    /**     * @todo move this to a central place     * @todo for other future table types     */    $is_innodb = (isset($showtable['Type']) && $showtable['Type'] == 'InnoDB');    if ($is_innodb        && ! isset($analyzed_sql[0]['queryflags']['union'])        && ! isset($analyzed_sql[0]['table_ref'][1]['table_name'])        && (empty($analyzed_sql[0]['where_clause']) || $analyzed_sql[0]['where_clause'] == '1 ')    ) {        // "j u s t   b r o w s i n g"        $pre_count = '~';        $after_count = PMA_showHint(PMA_sanitize(__('May be approximate. See [a@./Documentation.html#faq3_11@Documentation]FAQ 3.11[/a]')));    } else {        $pre_count = '';        $after_count = '';    }    // 1. ----- Prepares the work -----    // 1.1 Gets the informations about which functionalities should be    //     displayed    $total      = '';    $is_display = PMA_setDisplayMode($the_disp_mode, $total);    // 1.2 Defines offsets for the next and previous pages    if ($is_display['nav_bar'] == '1') {        if ($_SESSION['tmp_user_values']['max_rows'] == 'all') {            $pos_next     = 0;            $pos_prev     = 0;        } else {            $pos_next     = $_SESSION['tmp_user_values']['pos'] + $_SESSION['tmp_user_values']['max_rows'];            $pos_prev     = $_SESSION['tmp_user_values']['pos'] - $_SESSION['tmp_user_values']['max_rows'];            if ($pos_prev < 0) {                $pos_prev = 0;            }        }    } // end if    // 1.3 Find the sort expression    // we need $sort_expression and $sort_expression_nodirection    // even if there are many table references    if (! empty($analyzed_sql[0]['order_by_clause'])) {        $sort_expression = trim(str_replace('  ', ' ', $analyzed_sql[0]['order_by_clause']));        /**         * Get rid of ASC|DESC         */        preg_match('@(.*)([[:space:]]*(ASC|DESC))@si', $sort_expression, $matches);        $sort_expression_nodirection = isset($matches[1]) ? trim($matches[1]) : $sort_expression;        $sort_direction = isset($matches[2]) ? trim($matches[2]) : '';        unset($matches);    } else {        $sort_expression = $sort_expression_nodirection = $sort_direction = '';    }    // 1.4 Prepares display of first and last value of the sorted column    if (! empty($sort_expression_nodirection)) {        if (strpos($sort_expression_nodirection, '.') === false) {            $sort_table = $table;            $sort_column = $sort_expression_nodirection;        } else {            list($sort_table, $sort_column) = explode('.', $sort_expression_nodirection);        }        $sort_table = PMA_unQuote($sort_table);        $sort_column = PMA_unQuote($sort_column);        // find the sorted column index in row result        // (this might be a multi-table query)        $sorted_column_index = false;        foreach ($fields_meta as $key => $meta) {            if ($meta->table == $sort_table && $meta->name == $sort_column) {                $sorted_column_index = $key;                break;            }        }        if ($sorted_column_index !== false) {            // fetch first row of the result set            $row = PMA_DBI_fetch_row($dt_result);            // initializing default arguments            $default_function = 'default_function';            $transform_function = $default_function;            $transform_options = array();            // check for non printable sorted row data            $meta = $fields_meta[$sorted_column_index];            if (stristr($meta->type, 'BLOB') || $meta->type == 'geometry') {                $column_for_first_row = PMA_handle_non_printable_contents($meta->type, $row[$sorted_column_index], $transform_function, $transform_options, $default_function, $meta, null);            } else {                $column_for_first_row = $row[$sorted_column_index];            }            $column_for_first_row = strtoupper(substr($column_for_first_row, 0, $GLOBALS['cfg']['LimitChars']));            // fetch last row of the result set            PMA_DBI_data_seek($dt_result, $num_rows - 1);            $row = PMA_DBI_fetch_row($dt_result);            // check for non printable sorted row data            $meta = $fields_meta[$sorted_column_index];            if (stristr($meta->type, 'BLOB') || $meta->type == 'geometry') {                $column_for_last_row = PMA_handle_non_printable_contents($meta->type, $row[$sorted_column_index], $transform_function, $transform_options, $default_function, $meta, null);            } else {                $column_for_last_row = $row[$sorted_column_index];            }            $column_for_last_row = strtoupper(substr($column_for_last_row, 0, $GLOBALS['cfg']['LimitChars']));            // reset to first row for the loop in PMA_displayTableBody()            PMA_DBI_data_seek($dt_result, 0);            // we could also use here $sort_expression_nodirection            $sorted_column_message = ' [' . htmlspecialchars($sort_column) . ': <strong>' . htmlspecialchars($column_for_first_row) . ' - ' . htmlspecialchars($column_for_last_row) . '</strong>]';            unset($row, $column_for_first_row, $column_for_last_row, $meta, $default_function, $transform_function, $transform_options);        }        unset($sorted_column_index, $sort_table, $sort_column);    }    // 2. ----- Displays the top of the page -----    // 2.1 Displays a messages with position informations    if ($is_display['nav_bar'] == '1' && isset($pos_next)) {        if (isset($unlim_num_rows) && $unlim_num_rows != $total) {            $selectstring = ', ' . $unlim_num_rows . ' ' . __('in query');        } else {            $selectstring = '';        }        if (! empty($analyzed_sql[0]['limit_clause'])) {            $limit_data = PMA_analyzeLimitClause($analyzed_sql[0]['limit_clause']);            $first_shown_rec = $limit_data['start'];            if ($limit_data['length'] < $total) {                $last_shown_rec = $limit_data['start'] + $limit_data['length'] - 1;            } else {                $last_shown_rec = $limit_data['start'] + $total - 1;            }        } elseif ($_SESSION['tmp_user_values']['max_rows'] == 'all' || $pos_next > $total) {            $first_shown_rec = $_SESSION['tmp_user_values']['pos'];            $last_shown_rec  = $total - 1;        } else {            $first_shown_rec = $_SESSION['tmp_user_values']['pos'];            $last_shown_rec  = $pos_next - 1;        }        if (PMA_Table::isView($db, $table)            && $total == $GLOBALS['cfg']['MaxExactCountViews']        ) {            $message = PMA_Message::notice(__('This view has at least this number of rows. Please refer to %sdocumentation%s.'));            $message->addParam('[a@./Documentation.html#cfg_MaxExactCount@_blank]');            $message->addParam('[/a]');            $message_view_warning = PMA_showHint($message);        } else {            $message_view_warning = false;        }        $message = PMA_Message::success(__('Showing rows'));        $message->addMessage($first_shown_rec);        if ($message_view_warning) {            $message->addMessage('...', ' - ');            $message->addMessage($message_view_warning);            $message->addMessage('(');        } else {            $message->addMessage($last_shown_rec, ' - ');            $message->addMessage(' (');            $message->addMessage($pre_count  . PMA_formatNumber($total, 0));            $message->addString(__('total'));            if (!empty($after_count)) {                $message->addMessage($after_count);            }            $message->addMessage($selectstring, '');            $message->addMessage(', ', '');        }        $messagge_qt = PMA_Message::notice(__('Query took %01.4f sec'));        $messagge_qt->addParam($GLOBALS['querytime']);        $message->addMessage($messagge_qt, '');        $message->addMessage(')', '');        $message->addMessage(isset($sorted_column_message) ? $sorted_column_message : '', '');        PMA_showMessage($message, $sql_query, 'success');    } elseif (! isset($GLOBALS['printview']) || $GLOBALS['printview'] != '1') {        PMA_showMessage(__('Your SQL query has been executed successfully'), $sql_query, 'success');    }    // 2.3 Displays the navigation bars    if (! strlen($table)) {        if (isset($analyzed_sql[0]['query_type'])            && $analyzed_sql[0]['query_type'] == 'SELECT'        ) {            // table does not always contain a real table name,            // for example in MySQL 5.0.x, the query SHOW STATUS            // returns STATUS as a table name            $table = $fields_meta[0]->table;        } else {            $table = '';        }    }    if ($is_display['nav_bar'] == '1' && empty($analyzed_sql[0]['limit_clause'])) {        PMA_displayTableNavigation($pos_next, $pos_prev, $sql_query, 'top_direction_dropdown');        echo "\n";    } elseif (! isset($GLOBALS['printview']) || $GLOBALS['printview'] != '1') {        echo "\n" . '<br /><br />' . "\n";    }    // 2b ----- Get field references from Database -----    // (see the 'relation' configuration variable)    // initialize map    $map = array();    // find tables    $target=array();    if (isset($analyzed_sql[0]['table_ref']) && is_array($analyzed_sql[0]['table_ref'])) {        foreach ($analyzed_sql[0]['table_ref'] AS $table_ref_position => $table_ref) {            $target[] = $analyzed_sql[0]['table_ref'][$table_ref_position]['table_true_name'];        }    }    $tabs    = '(\'' . join('\',\'', $target) . '\')';    if (! strlen($table)) {        $exist_rel = false;    } else {        // To be able to later display a link to the related table,        // we verify both types of relations: either those that are        // native foreign keys or those defined in the phpMyAdmin        // configuration storage. If no PMA storage, we won't be able        // to use the "column to display" notion (for example show        // the name related to a numeric id).        $exist_rel = PMA_getForeigners($db, $table, '', 'both');        if ($exist_rel) {            foreach ($exist_rel AS $master_field => $rel) {                $display_field = PMA_getDisplayField($rel['foreign_db'], $rel['foreign_table']);                $map[$master_field] = array($rel['foreign_table'],                                      $rel['foreign_field'],                                      $display_field,                                      $rel['foreign_db']);            } // end while        } // end if    } // end if    // end 2b    // 3. ----- Displays the results table -----    PMA_displayTableHeaders($is_display, $fields_meta, $fields_cnt, $analyzed_sql, $sort_expression, $sort_expression_nodirection, $sort_direction);    $url_query = '';    echo '<tbody>' . "\n";    $clause_is_unique = PMA_displayTableBody($dt_result, $is_display, $map, $analyzed_sql);    // vertical output case    if ($_SESSION['tmp_user_values']['disp_direction'] == 'vertical') {        PMA_displayVerticalTable();    } // end if    unset($vertical_display);    echo '</tbody>' . "\n";    ?></table>    <?php    // 4. ----- Displays the link for multi-fields edit and delete    if ($is_display['del_lnk'] == 'dr' && $is_display['del_lnk'] != 'kp') {        $delete_text = $is_display['del_lnk'] == 'dr' ? __('Delete') : __('Kill');        $_url_params = array(            'db'        => $db,            'table'     => $table,            'sql_query' => $sql_query,            'goto'      => $goto,        );        $uncheckall_url = 'sql.php' . PMA_generate_common_url($_url_params);        $_url_params['checkall'] = '1';        $checkall_url = 'sql.php' . PMA_generate_common_url($_url_params);        if ($_SESSION['tmp_user_values']['disp_direction'] == 'vertical') {            $checkall_params['onclick'] = 'if (setCheckboxes(\'resultsForm\', true)) return false;';            $uncheckall_params['onclick'] = 'if (setCheckboxes(\'resultsForm\', false)) return false;';        } else {            $checkall_params['onclick'] = 'if (markAllRows(\'resultsForm\')) return false;';            $uncheckall_params['onclick'] = 'if (unMarkAllRows(\'resultsForm\')) return false;';        }        $checkall_link = PMA_linkOrButton($checkall_url, __('Check All'), $checkall_params, false);        $uncheckall_link = PMA_linkOrButton($uncheckall_url, __('Uncheck All'), $uncheckall_params, false);        if ($_SESSION['tmp_user_values']['disp_direction'] != 'vertical') {            echo '<img class="selectallarrow" width="38" height="22"'                .' src="' . $GLOBALS['pmaThemeImage'] . 'arrow_' . $GLOBALS['text_dir'] . '.png' . '"'                .' alt="' . __('With selected:') . '" />';        }        echo $checkall_link . "\n"            .' / ' . "\n"            .$uncheckall_link . "\n"            .'<i>' . __('With selected:') . '</i>' . "\n";        PMA_buttonOrImage(            'submit_mult', 'mult_submit', 'submit_mult_change',            __('Change'), 'b_edit.png', 'edit'        );        PMA_buttonOrImage(            'submit_mult', 'mult_submit', 'submit_mult_delete',            $delete_text, 'b_drop.png', 'delete'        );        if (isset($analyzed_sql[0]) && $analyzed_sql[0]['querytype'] == 'SELECT') {            PMA_buttonOrImage(                'submit_mult', 'mult_submit', 'submit_mult_export',                __('Export'), 'b_tblexport.png', 'export'            );        }        echo "\n";        echo '<input type="hidden" name="sql_query"'            .' value="' . htmlspecialchars($sql_query) . '" />' . "\n";        if (! empty($GLOBALS['url_query'])) {            echo '<input type="hidden" name="url_query"'                .' value="' . $GLOBALS['url_query'] . '" />' . "\n";        }        echo '<input type="hidden" name="clause_is_unique"'            .' value="' . $clause_is_unique . '" />' . "\n";        echo '</form>' . "\n";    }    // 5. ----- Displays the navigation bar at the bottom if required -----    if ($is_display['nav_bar'] == '1' && empty($analyzed_sql[0]['limit_clause'])) {        echo '<br />' . "\n";        PMA_displayTableNavigation($pos_next, $pos_prev, $sql_query, 'bottom_direction_dropdown');    } elseif (! isset($GLOBALS['printview']) || $GLOBALS['printview'] != '1') {        echo "\n" . '<br /><br />' . "\n";    }    // 6. ----- Displays "Query results operations"    if (! isset($GLOBALS['printview']) || $GLOBALS['printview'] != '1') {        PMA_displayResultsOperations($the_disp_mode, $analyzed_sql);    }} // end of the 'PMA_displayTable()' functionfunction default_function($buffer){    $buffer = htmlspecialchars($buffer);    $buffer = str_replace("\011", ' &nbsp;&nbsp;&nbsp;', str_replace('  ', ' &nbsp;', $buffer));    $buffer = preg_replace("@((\015\012)|(\015)|(\012))@", '<br />', $buffer);    return $buffer;}/** * Displays operations that are available on results. * * @param array $the_disp_mode the display mode * @param array $analyzed_sql  the analyzed query * * @global  string   $db                the database name * @global  string   $table             the table name * @global  string   $sql_query         the current SQL query * @global  integer  $unlim_num_rows    the total number of rows returned by the *                                      SQL query without any programmatically *                                      appended "LIMIT" clause * * @access  private * * @see     PMA_showMessage(), PMA_setDisplayMode(), *          PMA_displayTableNavigation(), PMA_displayTableHeaders(), *          PMA_displayTableBody(), PMA_displayResultsOperations() * * @return nothing */function PMA_displayResultsOperations($the_disp_mode, $analyzed_sql){    global $db, $table, $sql_query, $unlim_num_rows, $fields_meta;    $header_shown = false;    $header = '<fieldset><legend>' . __('Query results operations') . '</legend>';    if ($the_disp_mode[6] == '1' || $the_disp_mode[9] == '1') {        // Displays "printable view" link if required        if ($the_disp_mode[9] == '1') {            if (!$header_shown) {                echo $header;                $header_shown = true;            }            $_url_params = array(                'db'        => $db,                'table'     => $table,                'printview' => '1',                'sql_query' => $sql_query,            );            $url_query = PMA_generate_common_url($_url_params);            echo PMA_linkOrButton(                'sql.php' . $url_query,                PMA_getIcon('b_print.png', __('Print view'), true),                '', true, true, 'print_view'            ) . "\n";            if ($_SESSION['tmp_user_values']['display_text']) {                $_url_params['display_text'] = 'F';                echo PMA_linkOrButton(                    'sql.php' . PMA_generate_common_url($_url_params),                    PMA_getIcon('b_print.png', __('Print view (with full texts)'), true),                    '', true, true, 'print_view'                ) . "\n";                unset($_url_params['display_text']);            }        } // end displays "printable view"    }    // Export link    // (the url_query has extra parameters that won't be used to export)    // (the single_table parameter is used in display_export.lib.php    //  to hide the SQL and the structure export dialogs)    // If the parser found a PROCEDURE clause    // (most probably PROCEDURE ANALYSE()) it makes no sense to    // display the Export link).    if (isset($analyzed_sql[0]) && $analyzed_sql[0]['querytype'] == 'SELECT' && ! isset($printview) && ! isset($analyzed_sql[0]['queryflags']['procedure'])) {        if (isset($analyzed_sql[0]['table_ref'][0]['table_true_name']) && ! isset($analyzed_sql[0]['table_ref'][1]['table_true_name'])) {            $_url_params['single_table'] = 'true';        }        if (!$header_shown) {            echo $header;            $header_shown = true;        }        $_url_params['unlim_num_rows'] = $unlim_num_rows;        /**         * At this point we don't know the table name; this can happen         * for example with a query like         * SELECT bike_code FROM (SELECT bike_code FROM bikes) tmp         * As a workaround we set in the table parameter the name of the         * first table of this database, so that tbl_export.php and         * the script it calls do not fail         */        if (empty($_url_params['table']) && !empty($_url_params['db'])) {            $_url_params['table'] = PMA_DBI_fetch_value("SHOW TABLES");            /* No result (probably no database selected) */            if ($_url_params['table'] === false) {                unset($_url_params['table']);            }        }        echo PMA_linkOrButton(            'tbl_export.php' . PMA_generate_common_url($_url_params),            PMA_getIcon('b_tblexport.png', __('Export'), true),            '', true, true, ''        ) . "\n";        // show chart        echo PMA_linkOrButton(            'tbl_chart.php' . PMA_generate_common_url($_url_params),            PMA_getIcon('b_chart.png', __('Display chart'), true),            '', true, true, ''        ) . "\n";        // show GIS chart        $geometry_found = false;        // If atleast one geometry field is found        foreach ($fields_meta as $meta) {            if ($meta->type == 'geometry') {                $geometry_found = true;                break;            }        }        if ($geometry_found) {            echo PMA_linkOrButton(                'tbl_gis_visualization.php' . PMA_generate_common_url($_url_params),                PMA_getIcon('b_globe.gif', __('Visualize GIS data'), true),                '', true, true, ''            ) . "\n";        }    }    // CREATE VIEW    /**     *     * @todo detect privileges to create a view     *       (but see 2006-01-19 note in display_create_table.lib.php,     *        I think we cannot detect db-specific privileges reliably)     * Note: we don't display a Create view link if we found a PROCEDURE clause     */    if (!$header_shown) {        echo $header;        $header_shown = true;    }    if (!PMA_DRIZZLE && !isset($analyzed_sql[0]['queryflags']['procedure'])) {        echo PMA_linkOrButton(            'view_create.php' . $url_query,            PMA_getIcon('b_views.png', __('Create view'), true),            '', true, true, ''        ) . "\n";    }    if ($header_shown) {        echo '</fieldset><br />';    }}/** * Verifies what to do with non-printable contents (binary or BLOB) * in Browse mode. * * @param string $category           BLOB|BINARY|GEOMETRY * @param string $content            the binary content * @param string $transform_function transformation function * @param string $transform_options  transformation parameters * @param string $default_function   default transformation function * @param object $meta               the meta-information about this field * @param array  $url_params         parameters that should go to the download link * * @return  mixed  string or float */function PMA_handle_non_printable_contents($category, $content, $transform_function, $transform_options, $default_function, $meta, $url_params = array()){    $result = '[' . $category;    if (is_null($content)) {        $result .= ' - NULL';        $size = 0;    } elseif (isset($content)) {        $size = strlen($content);        $display_size = PMA_formatByteDown($size, 3, 1);        $result .= ' - '. $display_size[0] . ' ' . $display_size[1];    }    $result .= ']';    if (strpos($transform_function, 'octetstream')) {        $result = $content;    }    if ($size > 0) {        if ($default_function != $transform_function) {            $result = $transform_function($result, $transform_options, $meta);        } else {            $result = $default_function($result, array(), $meta);            if (stristr($meta->type, 'BLOB') && $_SESSION['tmp_user_values']['display_blob']) {                // in this case, restart from the original $content                $result = htmlspecialchars(PMA_replace_binary_contents($content));            }            /* Create link to download */            if (count($url_params) > 0) {                $result = '<a href="tbl_get_field.php' . PMA_generate_common_url($url_params) . '">' . $result . '</a>';            }        }    }    return($result);}/** * Prepares the displayable content of a data cell in Browse mode, * taking into account foreign key description field and transformations * * @param string $class              css classes for the td element * @param bool   $condition_field    whether the column is a part of the where clause * @param string $analyzed_sql       the analyzed query * @param object $meta               the meta-information about this field * @param array  $map                the list of relations * @param string $data               data * @param string $transform_function transformation function * @param string $default_function   default function * @param string $nowrap             'nowrap' if the content should not be wrapped * @param string $where_comparison   data for the where cluase * @param array  $transform_options  array of options for transformation * @param bool   $is_field_truncated whether the field is truncated * * @return  string  formatted data */function PMA_prepare_row_data($class, $condition_field, $analyzed_sql, $meta, $map, $data, $transform_function, $default_function, $nowrap, $where_comparison, $transform_options, $is_field_truncated ){    $result = ' class="' . PMA_addClass($class, $condition_field, $meta, $nowrap, $is_field_truncated, $transform_function, $default_function) . '">';    if (isset($analyzed_sql[0]['select_expr']) && is_array($analyzed_sql[0]['select_expr'])) {        foreach ($analyzed_sql[0]['select_expr'] AS $select_expr_position => $select_expr) {            $alias = $analyzed_sql[0]['select_expr'][$select_expr_position]['alias'];            if (isset($alias) && strlen($alias)) {                $true_column = $analyzed_sql[0]['select_expr'][$select_expr_position]['column'];                if ($alias == $meta->name) {                    // this change in the parameter does not matter                    // outside of the function                    $meta->name = $true_column;                } // end if            } // end if        } // end foreach    } // end if    if (isset($map[$meta->name])) {        // Field to display from the foreign table?        if (isset($map[$meta->name][2]) && strlen($map[$meta->name][2])) {            $dispsql     = 'SELECT ' . PMA_backquote($map[$meta->name][2])                . ' FROM ' . PMA_backquote($map[$meta->name][3])                . '.' . PMA_backquote($map[$meta->name][0])                . ' WHERE ' . PMA_backquote($map[$meta->name][1])                . $where_comparison;            $dispresult  = PMA_DBI_try_query($dispsql, null, PMA_DBI_QUERY_STORE);            if ($dispresult && PMA_DBI_num_rows($dispresult) > 0) {                list($dispval) = PMA_DBI_fetch_row($dispresult, 0);            } else {                $dispval = __('Link not found');            }            @PMA_DBI_free_result($dispresult);        } else {            $dispval     = '';        } // end if... else...        if (isset($GLOBALS['printview']) && $GLOBALS['printview'] == '1') {            $result .= ($transform_function != $default_function ? $transform_function($data, $transform_options, $meta) : $transform_function($data, array(), $meta)) . ' <code>[-&gt;' . $dispval . ']</code>';        } else {            if ('K' == $_SESSION['tmp_user_values']['relational_display']) {                // user chose "relational key" in the display options, so                // the title contains the display field                $title = (! empty($dispval))? ' title="' . htmlspecialchars($dispval) . '"' : '';            } else {                $title = ' title="' . htmlspecialchars($data) . '"';            }            $_url_params = array(                'db'    => $map[$meta->name][3],                'table' => $map[$meta->name][0],                'pos'   => '0',                'sql_query' => 'SELECT * FROM '                                    . PMA_backquote($map[$meta->name][3]) . '.' . PMA_backquote($map[$meta->name][0])                                    . ' WHERE ' . PMA_backquote($map[$meta->name][1])                                    . $where_comparison,            );            $result .= '<a href="sql.php' . PMA_generate_common_url($_url_params)                 . '"' . $title . '>';            if ($transform_function != $default_function) {                // always apply a transformation on the real data,                // not on the display field                $result .= $transform_function($data, $transform_options, $meta);            } else {                if ('D' == $_SESSION['tmp_user_values']['relational_display']) {                    // user chose "relational display field" in the                    // display options, so show display field in the cell                    $result .= $transform_function($dispval, array(), $meta);                } else {                    // otherwise display data in the cell                    $result .= $transform_function($data, array(), $meta);                }            }            $result .= '</a>';        }    } else {        $result .= ($transform_function != $default_function ? $transform_function($data, $transform_options, $meta) : $transform_function($data, array(), $meta));    }    $result .= '</td>' . "\n";    return $result;}/** * Generates a checkbox for multi-row submits * * @param string $del_url           delete url * @param array  $is_display        array with explicit indexes for all the display elements * @param string $row_no            the row number * @param string $where_clause_html url encoded where cluase * @param array  $condition_array   array of conditions in the where cluase * @param string $del_query         delete query * @param string $id_suffix         suffix for the id * @param string $class             css classes for the td element * * @return  string  the generated HTML */function PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, $id_suffix, $class){    $ret = '';    if (! empty($del_url) && $is_display['del_lnk'] != 'kp') {        $ret .= '<td ';        if (! empty($class)) {            $ret .= 'class="' . $class . '"';        }        $ret .= ' align="center">'           . '<input type="checkbox" id="id_rows_to_delete' . $row_no . $id_suffix . '" name="rows_to_delete[' . $where_clause_html . ']"'           . ' class="multi_checkbox"'           . ' value="' . htmlspecialchars($del_query) . '" ' . (isset($GLOBALS['checkall']) ? 'checked="checked"' : '') . ' />'           . '<input type="hidden" class="condition_array" value="' . htmlspecialchars(json_encode($condition_array)) . '" />'           . '    </td>';    }    return $ret;}/** * Generates an Edit link * * @param string $edit_url          edit url * @param string $class             css classes for td element * @param string $edit_str          text for the edit link * @param string $where_clause      where cluase * @param string $where_clause_html url encoded where cluase * * @return  string  the generated HTML */function PMA_generateEditLink($edit_url, $class, $edit_str, $where_clause, $where_clause_html){    $ret = '';    if (! empty($edit_url)) {        $ret .= '<td class="' . $class . '" align="center" ' . ' ><span class="nowrap">'           . PMA_linkOrButton($edit_url, $edit_str, array(), false);        /*         * Where clause for selecting this row uniquely is provided as         * a hidden input. Used by jQuery scripts for handling grid editing         */        if (! empty($where_clause)) {            $ret .= '<input type="hidden" class="where_clause" value ="' . $where_clause_html . '" />';        }        $ret .= '</span></td>';    }    return $ret;}/** * Generates an Copy link * * @param string $copy_url          copy url * @param string $copy_str          text for the copy link * @param string $where_clause      where clause * @param string $where_clause_html url encoded where cluase * @param string $class             css classes for the td element * * @return  string  the generated HTML */function PMA_generateCopyLink($copy_url, $copy_str, $where_clause, $where_clause_html, $class){    $ret = '';    if (! empty($copy_url)) {        $ret .= '<td ';        if (! empty($class)) {            $ret .= 'class="' . $class . '" ';        }        $ret .= 'align="center" ' . ' ><span class="nowrap">'           . PMA_linkOrButton($copy_url, $copy_str, array(), false);        /*         * Where clause for selecting this row uniquely is provided as         * a hidden input. Used by jQuery scripts for handling grid editing         */        if (! empty($where_clause)) {            $ret .= '<input type="hidden" class="where_clause" value ="' . $where_clause_html . '" />';        }        $ret .= '</span></td>';    }    return $ret;}/** * Generates a Delete link * * @param string $del_url delete url * @param string $del_str text for the delete link * @param string $js_conf text for the JS confirmation * @param string $class   css classes for the td element * * @return  string  the generated HTML */function PMA_generateDeleteLink($del_url, $del_str, $js_conf, $class){    $ret = '';    if (! empty($del_url)) {        $ret .= '<td ';        if (! empty($class)) {            $ret .= 'class="' . $class . '" ';        }        $ret .= 'align="center" ' . ' >'           . PMA_linkOrButton($del_url, $del_str, $js_conf, false)           . '</td>';    }    return $ret;}/** * Generates checkbox and links at some position (left or right) * (only called for horizontal mode) * * @param string $position          the position of the checkbox and links * @param string $del_url           delete url * @param array  $is_display        array with explicit indexes for all the display elements * @param string $row_no            row number * @param string $where_clause      where clause * @param string $where_clause_html url encoded where cluase * @param array  $condition_array   array of conditions in the where cluase * @param string $del_query         delete query * @param string $id_suffix         suffix for the id * @param string $edit_url          edit url * @param string $copy_url          copy url * @param string $class             css classes for the td elements * @param string $edit_str          text for the edit link * @param string $copy_str          text for the copy link * @param string $del_str           text for the delete link * @param string $js_conf           text for the JS confirmation * * @return  string  the generated HTML */function PMA_generateCheckboxAndLinks($position, $del_url, $is_display, $row_no, $where_clause, $where_clause_html, $condition_array, $del_query, $id_suffix, $edit_url, $copy_url, $class, $edit_str, $copy_str, $del_str, $js_conf){    $ret = '';    if ($position == 'left') {        $ret .= PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, $id_suffix = '_left', '', '', '');        $ret .= PMA_generateEditLink($edit_url, $class, $edit_str, $where_clause, $where_clause_html, '');        $ret .= PMA_generateCopyLink($copy_url, $copy_str, $where_clause, $where_clause_html, '');        $ret .= PMA_generateDeleteLink($del_url, $del_str, $js_conf, '', '');    } elseif ($position == 'right') {        $ret .= PMA_generateDeleteLink($del_url, $del_str, $js_conf, '', '');        $ret .= PMA_generateCopyLink($copy_url, $copy_str, $where_clause, $where_clause_html, '');        $ret .= PMA_generateEditLink($edit_url, $class, $edit_str, $where_clause, $where_clause_html, '');        $ret .= PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, $id_suffix = '_right', '', '', '');    } else { // $position == 'none'        $ret .= PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, $id_suffix = '_left', '', '', '');    }    return $ret;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * DocSQL import plugin for phpMyAdmin * * @package PhpMyAdmin-Import * @subpackage DocSQL */if (! defined('PHPMYADMIN')) {    exit;}/** * Load relations. */$cfgRelation = PMA_getRelationsParam();/** * We need relations enabled and we work only on database */if ($plugin_param !== 'database' || $GLOBALS['num_tables'] < 1 || ! $cfgRelation['relwork'] || ! $cfgRelation['commwork']) {    return;}if (isset($plugin_list)) {    $plugin_list['docsql'] = array(           // set name of your plugin        'text' => __('DocSQL'),                // text to be displayed as choice        'extension' => '',                  // extension this plugin can handle        'options' => array(                 // array of options for your plugin (optional)            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'text', 'name' => 'table', 'text' => __('Table name')),            array('type' => 'end_group')        ),        'options_text' => __('Options'), // text to describe plugin options (must be set if options are used)        );    /* We do not define function when plugin is just queried for information above */    return;}$tab = $_POST['docsql_table'];$buffer = '';/* Read whole buffer, we except it is small enough */while (!$finished && !$error && !$timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        // subtract data we didn't handle yet and stop processing        break;    } elseif ($data === true) {        // nothing to read        break;    } else {        // Append new data to buffer        $buffer .= $data;    }} // End of import loop/* Process the data */if ($data === true && !$error && !$timeout_passed) {    $buffer = str_replace("\r\n", "\n", $buffer);    $buffer = str_replace("\r", "\n", $buffer);    $lines = explode("\n", $buffer);    foreach ($lines AS $lkey => $line) {        //echo '<p>' . $line . '</p>';        $inf     = explode('|', $line);        if (!empty($inf[1]) && strlen(trim($inf[1])) > 0) {            $qry = '                 INSERT INTO                        ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '                      (db_name, table_name, column_name, comment)                 VALUES (                        \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\',                        \'' . PMA_sqlAddSlashes(trim($tab)) . '\',                        \'' . PMA_sqlAddSlashes(trim($inf[0])) . '\',                        \'' . PMA_sqlAddSlashes(trim($inf[1])) . '\')';            PMA_importRunQuery($qry, $qry . '-- ' . htmlspecialchars($tab) . '.' . htmlspecialchars($inf[0]), true);        } // end inf[1] exists        if (!empty($inf[2]) && strlen(trim($inf[2])) > 0) {            $for = explode('->', $inf[2]);            $qry = '                 INSERT INTO                        ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation']) . '                      (master_db, master_table, master_field, foreign_db, foreign_table, foreign_field)                 VALUES (                        \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\',                        \'' . PMA_sqlAddSlashes(trim($tab)) . '\',                        \'' . PMA_sqlAddSlashes(trim($inf[0])) . '\',                        \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\',                        \'' . PMA_sqlAddSlashes(trim($for[0])) . '\',                        \'' . PMA_sqlAddSlashes(trim($for[1])) . '\')';            PMA_importRunQuery($qry, $qry . '-- ' . htmlspecialchars($tab) . '.' . htmlspecialchars($inf[0]) . '(' . htmlspecialchars($inf[2]) . ')', true);        } // end inf[2] exists    } // End lines loop} // End import// Commit any possible data in buffersPMA_importRunQuery();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple script to set correct charset for the license * * Note: please do not fold this script into a general script * that would read any file using a GET parameter, it would open a hole * * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require './libraries/common.inc.php';/** * */header('Content-type: text/plain; charset=utf-8');$filename = LICENSE_FILE;// Check if the file is available, some distributions remove these.if (is_readable($filename)) {    readfile($filename);} else {    printf(__('The %s file is not available on this system, please visit www.phpmyadmin.net for more information.'), $filename);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * main css file from theme Original * * @package PhpMyAdmin-theme * @subpackage Original */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON') && !defined('TESTSUITE')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : (        isset($_COOKIE['pma_fontsize']) ? $_COOKIE['pma_fontsize'] : '82%'));?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    padding:            0;    margin:             0 0.5em 0 0;    color:              <?php echo $GLOBALS['cfg']['MainColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['MainBackground']; ?>;}<?php if (! empty($GLOBALS['cfg']['FontFamilyFixed'])) { ?>textarea, tt, pre, code {    font-family:        <?php echo $GLOBALS['cfg']['FontFamilyFixed']; ?>;}<?php } ?>h1 {    font-size:          140%;    font-weight:        bold;}h2 {    font-size:          120%;    font-weight:        bold;}h3 {    font-weight:        bold;}a, a:link,a:visited,a:active {    text-decoration:    none;    color:              #0000FF;    cursor:             pointer;}a:hover {    text-decoration:    underline;    color:              #FF0000;}dfn {    font-style:         normal;}dfn:hover {    font-style:         normal;    cursor:             help;}th {    font-weight:        bold;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;}a img {    border:             0;}hr {    color:              <?php echo $GLOBALS['cfg']['MainColor']; ?>;    background-color:   <?php echo $GLOBALS['cfg']['MainColor']; ?>;    border:             0;    height:             1px;}form {    padding:            0;    margin:             0;    display:            inline;}textarea {    overflow:           visible;    height:             <?php echo ceil($GLOBALS['cfg']['TextareaRows'] * 1.2); ?>em;}textarea.char {    height:             <?php echo ceil($GLOBALS['cfg']['CharTextareaRows'] * 1.2); ?>em;}fieldset {    margin-top:         1em;    border:             <?php echo $GLOBALS['cfg']['MainColor']; ?> solid 1px;    padding:            0.5em;    background:         <?php echo $GLOBALS['cfg']['BgOne']; ?>;}fieldset fieldset {    margin:             0.8em;}fieldset legend {    font-weight:        bold;    color:              #444444;    background-color:   <?php echo 'OPERA' != PMA_USR_BROWSER_AGENT ? 'transparent' : $GLOBALS['cfg']['BgOne']; ?>;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}table caption,table th,table td {    padding:            0.1em 0.5em 0.1em 0.5em;    margin:             0.1em;    vertical-align:     top;}img,input,select,button {    vertical-align:     middle;}/******************************************************************************//* classes */.clearfloat {    clear: both;}.floatleft {    float: <?php echo $left; ?>;    margin-<?php echo $right; ?>: 1em;}.paddingtop {    padding-top: 1em;}div.tools {    border: 1px solid #000000;    padding: 0.2em;}div.tools,fieldset.tblFooters {    margin-top:         0;    margin-bottom:      0.5em;    /* avoid a thick line since this should be used under another fieldset */    border-top:         0;    text-align:         <?php echo $right; ?>;    float:              none;    clear:              both;}div.null_div {    height: 20px;    text-align: center;    font-style:normal;    min-width:50px;}fieldset .formelement {    float:              <?php echo $left; ?>;    margin-<?php echo $right; ?>:       0.5em;    /* IE */    white-space:        nowrap;}/* revert for Gecko */fieldset div[class=formelement] {    white-space:        normal;}button.mult_submit {    border:             none;    background-color:   transparent;}/* odd items 1,3,5,7,... */table tr.odd th,.odd {    background: <?php echo $GLOBALS['cfg']['BgOne']; ?>;}/* even items 2,4,6,8,... */table tr.even th,.even {    background: <?php echo $GLOBALS['cfg']['BgTwo']; ?>;}/* odd table rows 1,3,5,7,... */table tr.odd th,table tr.odd,table tr.even th,table tr.even {    text-align:         <?php echo $left; ?>;}<?php if ($GLOBALS['cfg']['BrowseMarkerEnable']) { ?>/* marked table rows */td.marked,table tr.marked td,table tr.marked th,table tr.marked {    background:   <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color:   <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['BrowsePointerEnable']) { ?>/* hovered items */.odd:hover,.even:hover,.hover,.structure_actions_dropdown {    background: <?php echo $GLOBALS['cfg']['BrowsePointerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowsePointerColor']; ?>;}/* hovered table rows */table tr.odd:hover th,table tr.even:hover th,table tr.hover th {    background:   <?php echo $GLOBALS['cfg']['BrowsePointerBackground']; ?>;    color:   <?php echo $GLOBALS['cfg']['BrowsePointerColor']; ?>;}<?php } ?>/** * marks table rows/cells if the db field is in a where condition */td.condition,th.condition {    border: 1px solid <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;}/** * cells with the value NULL */td.null {    font-style: italic;    text-align: <?php echo $right; ?>;}table .valueHeader {    text-align:         <?php echo $right; ?>;    white-space:        normal;}table .value {    text-align:         <?php echo $right; ?>;    white-space:        normal;}/* IE doesnt handles 'pre' right */table [class=value] {    white-space:        normal;}<?php if (! empty($GLOBALS['cfg']['FontFamilyFixed'])) { ?>.value {    font-family:        <?php echo $GLOBALS['cfg']['FontFamilyFixed']; ?>;}<?php } ?>.attention {    color:              red;    font-weight:        bold;}.allfine {    color:              green;}img.lightbulb {    cursor:             pointer;}.pdflayout {    overflow:           hidden;    clip:               inherit;    background-color:   #FFFFFF;    display:            none;    border:             1px solid #000000;    position:           relative;}.pdflayout_table {    background:         #D3DCE3;    color:              #000000;    overflow:           hidden;    clip:               inherit;    z-index:            2;    display:            inline;    visibility:         inherit;    cursor:             move;    position:           absolute;    font-size:          80%;    border:             1px dashed #000000;}/* MySQL Parser */.syntax {    font-size:          80%;}.syntax a {    text-decoration: none;    border-bottom:1px dotted black;}.syntax_comment {    padding-left:       4pt;    padding-right:      4pt;}.syntax_digit {}.syntax_digit_hex {}.syntax_digit_integer {}.syntax_digit_float {}.syntax_punct {}.syntax_alpha {}.syntax_alpha_columnType {    text-transform:     uppercase;}.syntax_alpha_columnAttrib {    text-transform:     uppercase;}.syntax_alpha_reservedWord {    text-transform:     uppercase;    font-weight:        bold;}.syntax_alpha_functionName {    text-transform:     uppercase;}.syntax_alpha_identifier {}.syntax_alpha_charset {}.syntax_alpha_variable {}.syntax_quote {    white-space:        pre;}.syntax_quote_backtick {}/* leave some space between icons and text */.icon, img.footnotemarker {    vertical-align:     middle;    margin-right:       0.3em;    margin-left:        0.3em;}img.footnotemarker {    display: none;}/* no extra space in table cells */td .icon {    margin: 0;}.selectallarrow {    margin-<?php echo $right; ?>: 0.3em;    margin-<?php echo $left; ?>: 0.6em;}/* message boxes: error, confirmation */.success h1,.notice h1,div.error h1 {    border-bottom:      2px solid;    font-weight:        bold;    text-align:         <?php echo $left; ?>;    margin:             0 0 0.2em 0;}div.success,div.notice,div.error,div.footnotes {    margin:             0.3em 0 0 0;    border:             2px solid;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 10px 50%;    padding:            0.1em 0.1em 0.1em 36px;        <?php } else { ?>    background-position: 99% 50%;    padding:            10px 5% 10px 10px;        <?php } ?>    <?php } else { ?>    padding:            0.3em;    <?php } ?>}.success {    color:              #000000;    background-color:   #f0fff0;}h1.success,div.success {    border-color:       #00FF00;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_success.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;    padding:            0.2em 0.2em 0.2em 25px;        <?php } else { ?>    background-position: 97% 50%;    padding:            0.2em 25px 0.2em 0.2em;        <?php } ?>    <?php } ?>}.success h1 {    border-color:       #00FF00;}.notice, .footnotes {    color:              #000000;    background-color:   #FFFFDD;}h1.notice,div.notice,div.footnotes {    border-color:       #FFD700;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_notice.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;    padding:            0.2em 0.2em 0.2em 25px;        <?php } else { ?>    background-position: 97% 50%;    padding:            0.2em 25px 0.2em 0.2em;        <?php } ?>    <?php } ?>}.notice h1 {    border-color:       #FFD700;}.error {    background-color:   #FFFFCC;    color:              #ff0000;}h1.error,div.error {    border-color:       #ff0000;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_error.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;    padding:            0.2em 0.2em 0.2em 25px;        <?php } else { ?>    background-position: 97% 50%;    padding:            0.2em 25px 0.2em 0.2em;        <?php } ?>    <?php } ?>}div.error h1 {    border-color:       #ff0000;}.confirmation {    background-color:   #FFFFCC;}fieldset.confirmation {    border:             0.1em solid #FF0000;}fieldset.confirmation legend {    border-left:        0.1em solid #FF0000;    border-right:       0.1em solid #FF0000;    font-weight:        bold;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_really.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;    padding:            0.2em 0.2em 0.2em 25px;        <?php } else { ?>    background-position: 97% 50%;    padding:            0.2em 25px 0.2em 0.2em;        <?php } ?>    <?php } ?>}/* end messageboxes */.tblcomment {    font-size:          70%;    font-weight:        normal;    color:              #000099;}.tblHeaders {    font-weight:        bold;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;}div.tools,.tblFooters {    font-weight:        normal;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;}.tblHeaders a:link,.tblHeaders a:active,.tblHeaders a:visited,div.tools a:link,div.tools a:visited,div.tools a:active,.tblFooters a:link,.tblFooters a:active,.tblFooters a:visited {    color:              #0000FF;}.tblHeaders a:hover,div.tools a:hover,.tblFooters a:hover {    color:              #FF0000;}/* forbidden, no privilegs */.noPrivileges {    color:              #FF0000;    font-weight:        bold;}/* disabled text */.disabled,.disabled a:link,.disabled a:active,.disabled a:visited {    color:              #666666;}.disabled a:hover {    color:              #666666;    text-decoration:    none;}tr.disabled td,td.disabled {    background-color:   #cccccc;}.nowrap {    white-space:        nowrap;}/** * login form */body.loginform h1,body.loginform a.logo {    display: block;    text-align: center;}body.loginform {    text-align: center;}body.loginform div.container {    text-align: <?php echo $left; ?>;    width: 30em;    margin: 0 auto;}form.login label {    float: <?php echo $left; ?>;    width: 10em;    font-weight: bolder;}.commented_column {    border-bottom: 1px dashed black;}.column_attribute {    font-size: 70%;}/******************************************************************************//* specific elements *//* topmenu */ul#topmenu, ul#topmenu2, ul.tabs {    font-weight:        bold;    list-style-type:    none;    margin:             0;    padding:            0;}ul#topmenu2 {    margin: 0.25em 0.5em 0;    height: 2em;    clear: both;}ul#topmenu li, ul#topmenu2 li {    float:              <?php echo $left; ?>;    margin:             0;    padding:            0;    vertical-align:     middle;}#topmenu img, #topmenu2 img {    vertical-align:     middle;    margin-<?php echo $right; ?>:       0.1em;}/* default tab styles */ul#topmenu a, ul#topmenu span {    display:            block;    margin:             2px 2px 0;    padding:            2px 2px 0;    white-space:        nowrap;}ul#topmenu ul a {    margin:             0;    padding-bottom:     2px;}ul#topmenu .submenu {    position:           relative;    display:            none;}ul#topmenu .shown {    display:            block;}ul#topmenu ul {    margin:             0;    padding:            0;    position:           absolute;    list-style-type:    none;    display:            none;    border:             1px #666 solid;    z-index:            2;}ul#topmenu ul.only {    left: 0;}ul#topmenu ul.notonly {    right: 0;}ul#topmenu li:hover ul, ul#topmenu .submenuhover ul {    display:            block;}ul#topmenu ul li {    width:              100%;}ul#topmenu2 a {    display:            block;    margin:             0.1em;    padding:            0.2em;    white-space:        nowrap;}/* disabled tabs */ul#topmenu span.tab {    color:              #666666;}fieldset.caution a {    color:              #FF0000;}fieldset.caution a:hover {    color:              #ffffff;    background-color:   #FF0000;}<?php if ($GLOBALS['cfg']['LightTabs']) { ?>/* active tab */ul#topmenu a.tabactive, ul#topmenu2 a.tabactive {    color:              black;}ul#topmenu ul {    background:         <?php echo $GLOBALS['cfg']['MainBackground']; ?>;}<?php } else { ?>#topmenu {    margin-top:         0.5em;    padding:            0.1em 0.3em 0.1em 0.3em;}ul#topmenu ul {    -moz-box-shadow:    2px 2px 3px #666;    -webkit-box-shadow: 2px 2px 3px #666;    box-shadow:         2px 2px 3px #666;}ul#topmenu > li {    border-bottom:      1pt solid black;}/* default tab styles */ul#topmenu a, ul#topmenu span {    background-color:   <?php echo $GLOBALS['cfg']['BgOne']; ?>;    border:             0 solid <?php echo $GLOBALS['cfg']['BgTwo']; ?>;    border-width:       1pt 1pt 0 1pt;    -moz-border-radius: 0.4em 0.4em 0 0;    border-radius:      0.4em 0.4em 0 0;}ul#topmenu ul a {    border-width:       1pt 0 0 0;    -moz-border-radius: 0;    border-radius:      0;}ul#topmenu ul li:first-child a {    border-width:       0;}/* enabled hover/active tabs */ul#topmenu > li > a:hover,ul#topmenu > li > .tabactive {    margin:             0;    padding:            2px 4px;    text-decoration:    none;}ul#topmenu ul a:hover,ul#topmenu ul .tabactive {    text-decoration:    none;}ul#topmenu a.tab:hover,ul#topmenu .tabactive {    background-color:   <?php echo $GLOBALS['cfg']['MainBackground']; ?>;}ul#topmenu2 a.tab:hover,ul#topmenu2 a.tabactive {    background-color:   <?php echo $GLOBALS['cfg']['BgOne']; ?>;    -moz-border-radius: 0.3em;    border-radius:      0.3em;    text-decoration:    none;}/* to be able to cancel the bottom border, use <li class="active"> */ul#topmenu > li.active {     border-bottom:      1pt solid <?php echo $GLOBALS['cfg']['MainBackground']; ?>;}/* disabled tabs */ul#topmenu span.tab,a.error {    cursor:             url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>error.ico), default;}<?php } ?>/* end topmenu *//* zoom search */div#dataDisplay input, div#dataDisplay select {    margin: 0;    margin-<?php echo $right; ?>: 0.5em;}div#dataDisplay th {    line-height: 2em;}/* Calendar */table.calendar {    width:              100%;}table.calendar td {    text-align:         center;}table.calendar td a {    display:            block;}table.calendar td a:hover {    background-color:   #CCFFCC;}table.calendar th {    background-color:   #D3DCE3;}table.calendar td.selected {    background-color:   #FFCC99;}img.calendar {    border:             none;}form.clock {    text-align:         center;}/* end Calendar *//* table stats */div#tablestatistics table {    float: <?php echo $left; ?>;    margin-top: 0.5em;    margin-bottom: 0.5em;    margin-<?php echo $right; ?>: 0.5em;}/* END table stats *//* server privileges */#tableuserrights td,#tablespecificuserrights td,#tabledatabases td {    vertical-align: middle;}/* END server privileges *//* Heading */#topmenucontainer {    background: white;    padding-right: 1em;    width: 100%;}#serverinfo {    background: white;    font-weight:        bold;    padding-bottom: 0.5em;    width: 10000px;    overflow: hidden;}#serverinfo .item {    white-space:        nowrap;    float: <?php echo $left; ?>}#span_table_comment {    font-weight:        normal;    font-style:         italic;    white-space:        nowrap;}#serverinfo img {    margin:             0 0.1em 0 0.2em;}#textSQLDUMP {    width:              95%;    height:             95%;    font-family:        "Courier New", Courier, mono;    font-size:          110%;}#TooltipContainer {    position:           absolute;    z-index:            99;    width:              20em;    height:             auto;    overflow:           visible;    visibility:         hidden;    background-color:   #ffffcc;    color:              #006600;    border:             0.1em solid #000000;    padding:            0.5em;}/* user privileges */#fieldset_add_user_login div.item {    border-bottom:      1px solid silver;    padding-bottom:     0.3em;    margin-bottom:      0.3em;}#fieldset_add_user_login label {    float:              <?php echo $left; ?>;    display:            block;    width:              10em;    max-width:          100%;    text-align:         <?php echo $right; ?>;    padding-<?php echo $right; ?>:      0.5em;}#fieldset_add_user_login span.options #select_pred_username,#fieldset_add_user_login span.options #select_pred_hostname,#fieldset_add_user_login span.options #select_pred_password {    width:              100%;    max-width:          100%;}#fieldset_add_user_login span.options {    float: <?php echo $left; ?>;    display: block;    width: 12em;    max-width: 100%;    padding-<?php echo $right; ?>: 0.5em;}#fieldset_add_user_login input {    width: 12em;    clear: <?php echo $right; ?>;    max-width: 100%;}#fieldset_add_user_login span.options input {    width: auto;}#fieldset_user_priv div.item {    float: <?php echo $left; ?>;    width: 9em;    max-width: 100%;}#fieldset_user_priv div.item div.item {    float: none;}#fieldset_user_priv div.item label {    white-space: nowrap;}#fieldset_user_priv div.item select {    width: 100%;}#fieldset_user_global_rights fieldset {    float: <?php echo $left; ?>;}/* END user privileges *//* serverstatus */.linkElem:hover {    text-decoration:    underline;    color:              #235a81;    cursor: pointer;}h3#serverstatusqueries span {    font-size:60%;    display:inline;}img.sortableIcon {    float:right;    background-repeat:no-repeat;    margin:0;}.buttonlinks {    float: <?php echo $right; ?>;    white-space: nowrap;}.jsfeature {    display: none; /* Made visible with js */}/* Also used for the variables page */fieldset#tableFilter {    margin-bottom:1em;}div#serverStatusTabs {    margin-top:1em;}caption a.top {    float: <?php echo $right; ?>;}div#serverstatusquerieschart {    float:<?php echo $left; ?>;    width:500px;    height:350px;    padding-<?php echo $left; ?>: 30px;}div#serverstatus table#serverstatusqueriesdetails {    float: <?php echo $left; ?>;}table#serverstatustraffic {    float: <?php echo $left; ?>;}table#serverstatusconnections {    float: <?php echo $left; ?>;    margin-<?php echo $left; ?>: 30px;}table#serverstatusvariables {    width: 100%;    margin-bottom: 1em;}table#serverstatusvariables .name {    width: 18em;    white-space:nowrap;}table#serverstatusvariables .value {    width: 6em;}table#serverstatusconnections {    float: <?php echo $left; ?>;    margin-<?php echo $left; ?>: 30px;}div#serverstatus table tbody td.descr a,div#serverstatus table .tblFooters a {    white-space: nowrap;}div.liveChart {    clear:both;    min-width:500px;    height:400px;    padding-bottom:80px;}#addChartDialog input[type="text"] {    margin: 0;    padding:3px;}div#chartVariableSettings {    border:1px solid #ddd;    background-color:#E6E6E6;    margin-left:10px;}table#chartGrid div.monitorChart {    background: #EBEBEB;}div#serverstatus div.tabLinks {    float:<?php echo $left; ?>;    padding-bottom: 10px;}.popupContent {    display: none;    position: absolute;    border: 1px solid #CCC;    margin:0;    padding:3px;    -moz-box-shadow:    1px 1px 6px #ddd;    -webkit-box-shadow: 2px 2px 3px #666;    box-shadow:         2px 2px 3px #666;    background-color:white;    z-index: 2;}div#logTable {    padding-top: 10px;    clear: both;}div#logTable table {    width:100%;}.smallIndent {    padding-left: 7px;}/* end serverstatus *//* server variables */a.editLink {    float: <?php echo $left; ?>;    font-family:sans-serif;}table.serverVariableEditTable {    border:0;    margin:0;    padding:0;    width:100%;}table.serverVariableEditTable td {    border:0;    margin:0;    padding:0;}table.serverVariableEditTable td:first-child {    white-space:nowrap;    vertical-align:middle;}table.serverVariableEditTable input {    width:95%;}table#serverVariables td {    height:18px;}/* end server variables *//* querywindow */body#bodyquerywindow {    margin: 0;    padding: 0;    background-image: none;    background-color: #F5F5F5;}div#querywindowcontainer {    margin: 0;    padding: 0;    width: 100%;}div#querywindowcontainer fieldset {    margin-top: 0;}/* END querywindow *//* profiling */div#profilingchart {    width:550px;    height:370px;    float:left;}/* END profiling *//* querybox */div#sqlquerycontainer {    float: <?php echo $left; ?>;    width: 69%;    /* height: 15em; */}div#tablefieldscontainer {    float: <?php echo $right; ?>;    width: 29%;    /* height: 15em; */}div#tablefieldscontainer select {    width: 100%;    /* height: 12em; */}textarea#sqlquery {    width: 100%;    /* height: 100%; */}textarea#sql_query_edit{    height:7em;    width: 95%;    display:block;}div#queryboxcontainer div#bookmarkoptions {    margin-top: 0.5em;}/* end querybox *//* main page */#maincontainer {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>logo_right.png);    background-position: <?php echo $right; ?> bottom;    background-repeat: no-repeat;}#mysqlmaininformation,#pmamaininformation {    float: <?php echo $left; ?>;    width: 49%;}#maincontainer ul {    list-style-type: disc;    vertical-align: middle;}#maincontainer li {    margin:  0.2em 0em;}/* END main page */<?php if ($GLOBALS['cfg']['MainPageIconic']) { ?>/* iconic view for ul items */li#li_create_database {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_newdb.png);}li#li_select_lang {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_lang.png);}li#li_select_mysql_collation {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_asci.png);}li#li_select_theme{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_theme.png);}li#li_user_info{    /* list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_rights.png); */}li#li_mysql_status{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_status.png);}li#li_mysql_variables{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_vars.png);}li#li_mysql_processes{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_process.png);}li#li_mysql_collations{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_asci.png);}li#li_mysql_engines{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_engine.png);}li#li_mysql_binlogs {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_tbl.png);}li#li_mysql_databases {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_db.png);}li#li_export {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_export.png);}li#li_import {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_import.png);}li#li_change_password {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_passwd.png);}li#li_log_out {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_loggoff.png);}li#li_mysql_privilegs{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_rights.png);}li#li_switch_dbstats {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_dbstatistics.png);}li#li_flush_privileges {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_reload.png);}li#li_user_preferences {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_tblops.png);}/* END iconic view for ul items */<?php } /* end if $GLOBALS['cfg']['MainPageIconic'] */ ?>#body_browse_foreigners {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    margin:             0.5em 0.5em 0 0.5em;}#bodyquerywindow {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;}#bodythemes {    width: 500px;    margin: auto;    text-align: center;}#bodythemes img {    border: 0.1em solid black;}#bodythemes a:hover img {    border: 0.1em solid red;}#fieldset_select_fields {    float: <?php echo $left; ?>;}#selflink {    clear: both;    display: block;    margin-top: 1em;    margin-bottom: 1em;    width: 100%;    border-top: 0.1em solid silver;    text-align: <?php echo $right; ?>;}#table_innodb_bufferpool_usage,#table_innodb_bufferpool_activity {    float: <?php echo $left; ?>;}#div_mysql_charset_collations table {    float: <?php echo $left; ?>;}.operations_half_width {    width: 48%;    float: <?php echo $left; ?>;}.operations_full_width {    width: 100%;    clear: both;}#qbe_div_table_list {    float: <?php echo $left; ?>;}#qbe_div_sql_query {    float: <?php echo $left; ?>;}label.desc {    width: 30em;    float: <?php echo $left; ?>;}label.desc sup {    position: absolute;}code.sql, div.sqlvalidate {    display:            block;    padding:            0.3em;    margin-top:         0;    margin-bottom:      0;    border:             <?php echo $GLOBALS['cfg']['MainColor']; ?> solid 1px;    border-top:         0;    border-bottom:      0;    max-height:         10em;    overflow:           auto;    background:         <?php echo $GLOBALS['cfg']['BgOne']; ?>;}#main_pane_left {    width:              60%;    float:              <?php echo $left; ?>;    padding-top:        1em;}#main_pane_right {    margin-<?php echo $left; ?>: 60%;    padding-top: 1em;    padding-<?php echo $left; ?>: 1em;}.group {    border-<?php echo $left; ?>: 0.3em solid <?php echo $GLOBALS['cfg']['ThBackground']; ?>;    margin-bottom:      1em;}.group h2 {    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;    padding:            0.1em 0.3em;    margin-top:         0;}.group-cnt {    padding: 0 0 0 0.5em;    display: inline-block;    width: 98%;}textarea#partitiondefinition {    height:3em;}/* for elements that should be revealed only via js */.hide {    display:            none;}#li_select_server {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_host.png);}#list_server {    list-style-image: none;}/**  *  Progress bar styles  */div.upload_progress_bar_outer{    border: 1px solid black;    width: 202px;}div.upload_progress_bar_inner{    background-color: <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    width: 0;    height: 12px;    margin: 1px;}table#serverconnection_src_remote,table#serverconnection_trg_remote,table#serverconnection_src_local,table#serverconnection_trg_local  {  float:left;}/**  *  Validation error message styles  */.invalid_value{background:#F00;}/**  *  Ajax notification styling  */ .ajax_notification {    top: 0;           /** The notification needs to be shown on the top of the page */    position: fixed;    margin-top: 0;    margin-right: auto;    margin-bottom: 0;    margin-left: auto;    padding: 3px 5px;   /** Keep a little space on the sides of the text */    width: 350px;    background-color: #FFD700;    z-index: 1100;      /** If this is not kept at a high z-index, the jQueryUI modal dialogs (z-index:1000) might hide this */    text-align: center;    display: block;    left: 0;    right: 0;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif);    background-repeat: no-repeat;    background-position: 2%; } #loading_parent {    /** Need this parent to properly center the notification division */    position: relative;    width: 100%; }/**  * Export and Import styles  */.exportoptions h3, .importoptions h3 {    border-bottom: 1px #999999 solid;    font-size: 110%;}.exportoptions ul, .importoptions ul, .format_specific_options ul {    list-style-type: none;    margin-bottom: 15px;}.exportoptions li, .importoptions li {    margin: 7px;}.exportoptions label, .importoptions label, .exportoptions p, .importoptions p {    margin: 5px;    float: none;}#csv_options label.desc, #ldi_options label.desc, #latex_options label.desc, #output label.desc{    float: left;    width: 15em;}.exportoptions, .importoptions {    margin: 20px 30px 30px 10px}.format_specific_options h3 {    margin: 10px 0 0 10px;    border: 0;}.format_specific_options {    border: 1px solid #999999;    margin: 7px 0;    padding: 3px;}p.desc {    margin: 5px;}/**  * Export styles only  */select#db_select, select#table_select {    width: 400px;}.export_sub_options {    margin: 20px 0 0 30px;}.export_sub_options h4 {    border-bottom: 1px #999999 solid;}.export_sub_options li.subgroup {    display: inline-block;    margin-top: 0;}.export_sub_options li {    margin-bottom: 0;}#quick_or_custom, #output_quick_export {    display: none;}/** * Import styles only */.importoptions #import_notification {    margin: 10px 0;    font-style: italic;}input#input_import_file {    margin: 5px;}.formelementrow {    margin: 5px 0 5px 0;}/** * GIS data editor styles */a.close_gis_editor {    float: right;}#gis_editor {    display: none;    position: fixed;    _position: absolute; /* hack for IE */    z-index: 1001;    overflow-y: auto;    overflow-x: hidden;}#gis_data {    min-height: 230px;}#gis_data_textarea {    height: 6em;}#gis_data_editor {    background: #D0DCE0;    padding: 15px;    min-height: 500px;}#gis_data_editor .choice {    display: none;}#gis_data_editor input[type="text"] {    width: 75px;}#popup_background {    display: none;    position: fixed;    _position: absolute; /* hack for IE6 */    width: 100%;    height: 100%;    top: 0;    left: 0;    background: #000;    z-index: 1000;    overflow: hidden;}/** * ENUM/SET editor styles */p.enum_notice {    margin: 5px 2px;    font-size: 80%;}fieldset.enum_editor_no_js {    width: 40em;    padding: 1em;}hr.enum_editor_no_js {    background-color: #aaa;}#enum_editor p {    font-style:italic;}#enum_editor .values, #enum_editor .add, .enum_editor_no_js #values {    width: 100%;}#enum_editor .add td {    vertical-align: middle;    width: 50%;    padding: 0 1em;}#enum_editor .values td.drop {    width: 2em;    cursor: pointer;    vertical-align: middle;}#enum_editor .values input {    margin: 0.1em 0;    padding-right: 2.5em;    width: 100%;}#enum_editor .values img {    width: 2em;    vertical-align: middle;}#enum_editor input.add_value {    margin: 1em 0;}#enum_editor_output textarea,.enum_editor_no_js input {    width: 100%;    float: right;    margin: 1em 0 0 0;}#enum_editor_no_js {    width: 100%;}.enum_editor_no_js input.submit {    margin: 1em 0;}/** * ENUM/SET editor integration for the routines editor */.enum_hint {    position: relative;}.enum_hint a {    position: absolute;    left: 81%;    bottom: 0.35em;}/** * Table structure styles */.structure_actions_dropdown {    position: absolute;    padding: 3px;    display: none;    z-index: 100;}.structure_actions_dropdown a {    display: block;}td.more_opts {    display: none;    white-space: nowrap;}/** * Indexes */#index_frm .index_info input,#index_frm .index_info select {    width: 100%;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}#index_frm .slider {    width: 10em;    margin: 0.6em;    float: <?php echo $left; ?>;}#index_frm .add_fields {    float: <?php echo $left; ?>;}#index_frm .add_fields input {    margin-<?php echo $left; ?>: 1em;}#index_frm input {    margin: 0;}#index_frm td {    vertical-align: middle;}table#index_columns {    width: 100%;}table#index_columns select {    width: 100%;}iframe.IE_hack {    z-index: 1;    position: absolute;    display: none;    border: 0;    filter: alpha(opacity=0);}/* config forms */.config-form ul.tabs {    margin:      1.1em 0.2em 0;    padding:     0 0 0.3em 0;    list-style:  none;    font-weight: bold;}.config-form ul.tabs li {    float: <?php echo $left; ?>;}.config-form ul.tabs li a {    display:          block;    margin:           0.1em 0.2em 0;    padding:          0.1em 0.4em;    white-space:      nowrap;    text-decoration:  none;    border:           1px solid <?php echo $GLOBALS['cfg']['BgTwo']; ?>;    border-bottom:    none;}.config-form ul.tabs li a:hover,.config-form ul.tabs li a:active,.config-form ul.tabs li a.active {    margin:           0;    padding:          0.1em 0.6em 0.2em;}.config-form ul.tabs li.active a {    background-color: <?php echo $GLOBALS['cfg']['BgOne']; ?>;}.config-form fieldset {    margin-top:   0;    padding:      0;    clear:        both;    /*border-color: <?php echo $GLOBALS['cfg']['BgTwo']; ?>;*/}.config-form legend {    display: none;}.config-form fieldset p {    margin:    0;    padding:   0.5em;    background: <?php echo $GLOBALS['cfg']['BgTwo']; ?>;}.config-form fieldset .errors { /* form error list */    margin:       0 -2px 1em -2px;    padding:      0.5em 1.5em;    background:   #FBEAD9;    border:       0 #C83838 solid;    border-width: 1px 0;    list-style:   none;    font-family:  sans-serif;    font-size:    small;}.config-form fieldset .inline_errors { /* field error list */    margin:     0.3em 0.3em 0.3em 0;    padding:    0;    list-style: none;    color:      #9A0000;    font-size:  small;}.config-form fieldset th {    padding:        0.3em 0.3em 0.3em 0.5em;    text-align:     left;    vertical-align: top;    width:          40%;    background:     transparent;}.config-form fieldset .doc, .config-form fieldset .disabled-notice {    margin-left: 1em;}.config-form fieldset .disabled-notice {    font-size: 80%;    text-transform: uppercase;    color: #E00;    cursor: help;}.config-form fieldset td {    padding-top:    0.3em;    padding-bottom: 0.3em;    vertical-align: top;}.config-form fieldset th small {    display:     block;    font-weight: normal;    font-family: sans-serif;    font-size:   x-small;    color:       #444;}.config-form fieldset th, .config-form fieldset td {    border-top: 1px <?php echo $GLOBALS['cfg']['BgTwo']; ?> solid;}fieldset .group-header th {    background: <?php echo $GLOBALS['cfg']['BgTwo']; ?>;}fieldset .group-header + tr th {    padding-top: 0.6em;}fieldset .group-field-1 th, fieldset .group-header-2 th {    padding-left: 1.5em;}fieldset .group-field-2 th, fieldset .group-header-3 th {    padding-left: 3em;}fieldset .group-field-3 th {    padding-left: 4.5em;}fieldset .disabled-field th,fieldset .disabled-field th small,fieldset .disabled-field td {    color: #666;    background-color: #ddd;}.config-form .lastrow {    border-top: 1px #000 solid;}.config-form .lastrow {    background: <?php echo $GLOBALS['cfg']['ThBackground']; ?>;;    padding:    0.5em;    text-align: center;}.config-form .lastrow input {    font-weight: bold;}/* form elements */.config-form span.checkbox {    padding: 2px;    display: inline-block;}.config-form .custom { /* customized field */    background: #FFC;}.config-form span.checkbox.custom {    padding:    1px;    border:     1px #EDEC90 solid;    background: #FFC;}.config-form .field-error {    border-color: #A11 !important;}.config-form input[type="text"],.config-form select,.config-form textarea {    border: 1px #A7A6AA solid;    height: auto;}.config-form input[type="text"]:focus,.config-form select:focus,.config-form textarea:focus {    border:     1px #6676FF solid;    background: #F7FBFF;}.config-form .field-comment-mark {    font-family: serif;    color: #007;    cursor: help;    padding: 0 0.2em;    font-weight: bold;    font-style: italic;}.config-form .field-comment-warning {    color: #A00;}/* error list */.config-form dd {    margin-left: 0.5em;}.config-form dd:before {    content: "\25B8  ";}.click-hide-message {    cursor: pointer;}.prefsmanage_opts {    margin-<?php echo $left; ?>: 2em;}#prefs_autoload {    margin-bottom: 0.5em;}.rte_table {    table-layout: fixed;}.rte_table td {    vertical-align:     middle;}.rte_table tr td:nth-child(1) {    font-weight:        bold;}.rte_table input, .rte_table select, .rte_table textarea {    width:              100%;    margin:             0;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}.rte_table .routine_params_table {    width:              100%;}#placeholder .button {    position: absolute;    cursor: pointer;}#placeholder div.button {    font-size: smaller;    color: #999;    background-color: #eee;    padding: 2px;}.wrapper {    float: <?php echo $left; ?>;    margin-bottom: 0.5em;}.toggleButton {    position: relative;    cursor: pointer;    font-size: 0.8em;    text-align: center;    line-height: 1.55em;    height: 1.55em;    overflow: hidden;    border-right: 0.1em solid #888;    border-left: 0.1em solid #888;}.toggleButton table,.toggleButton td,.toggleButton img {    padding: 0;    position: relative;}.toggleButton .container {    position: absolute;}.toggleButton .toggleOn {    color: white;    padding: 0 1em;}.toggleButton .toggleOff {    padding: 0 1em;}.doubleFieldset fieldset {    width: 48%;    float: <?php echo $left; ?>;    padding: 0;}.doubleFieldset fieldset.left {    margin-<?php echo $right; ?>: 1%;}.doubleFieldset fieldset.right {    margin-<?php echo $left; ?>: 1%;}.doubleFieldset legend {    margin-<?php echo $left; ?>: 0.5em;}.doubleFieldset div.wrap {    padding: 0.5em;}#table_columns input[type="text"], #table_columns select {    width:              10em;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}#placeholder {    position: relative;    border: 1px solid #aaa;    float: right;    overflow: hidden;}.placeholderDrag {    cursor: move;}#placeholder .button {    position: absolute;}#left_arrow {    left:8px;    top:26px;}#right_arrow {    left:26px;    top:26px;}#up_arrow {    left:17px;    top:8px;}#down_arrow {    left:17px;    top:44px;}#zoom_in {    left:17px;    top:67px;}#zoom_world {    left:17px;    top:85px;}#zoom_out {    left:17px;    top:103px;}.gis_table td {    vertical-align: middle;}.gis_table select {    min-width: 151px;}.gis_table .save {    font-weight: bold;    vertical-align: bottom;    height: 100px;}.gis_table .button {   text-align: <?php echo $right; ?>;}.gis_table .choice {    display:none;}.CodeMirror {  font-size: 140%;  font-family: monospace;  background: white;  border: 1px solid black;}.CodeMirror-scroll {  overflow: auto;  height:             <?php echo ceil($GLOBALS['cfg']['TextareaRows'] * 1.2); ?>em;  /* This is needed to prevent an IE[67] bug where the scrolled content     is visible outside of the scrolling box. */  position: relative;}.CodeMirror-gutter {  position: absolute; left: 0; top: 0;  z-index: 10;  background-color: #f7f7f7;  border-right: 1px solid #eee;  min-width: 2em;  height: 100%;}.CodeMirror-gutter-text {  color: #aaa;  text-align: right;  padding: .4em .2em .4em .4em;  white-space: pre !important;}.CodeMirror-lines {  padding: .4em;}.CodeMirror pre {  -moz-border-radius: 0;  -webkit-border-radius: 0;  -o-border-radius: 0;  border-radius: 0;  border-width: 0; margin: 0; padding: 0; background: transparent;  font-family: inherit;  font-size: inherit;  padding: 0; margin: 0;  white-space: pre;  word-wrap: normal;}.CodeMirror-wrap pre {  word-wrap: break-word;  white-space: pre-wrap;}.CodeMirror-wrap .CodeMirror-scroll {  overflow-x: hidden;}.CodeMirror textarea {  font-family: inherit !important;  font-size: inherit !important;}.CodeMirror-cursor {  z-index: 10;  position: absolute;  visibility: hidden;  border-left: 1px solid black !important;}.CodeMirror-focused .CodeMirror-cursor {  visibility: visible;}span.CodeMirror-selected {  background: #ccc !important;  color: HighlightText !important;}.CodeMirror-focused span.CodeMirror-selected {  background: Highlight !important;}.CodeMirror-matchingbracket {color: #0f0 !important;}.CodeMirror-nonmatchingbracket {color: #f22 !important;}<?php echo $_SESSION['PMA_Theme']->getCssCodeMirror(); ?>.colborder {    cursor: col-resize;    height: 100%;    margin-left: -5px;    position: absolute;    width: 5px;}.colborder_active {    border-right: 2px solid #a44;}.pma_table td {    position: static;}.pma_table th.draggable span, .pma_table tbody td span {    display: block;    overflow: hidden;}.cRsz {    position: absolute;}.draggable {    cursor: move;}.cCpy {    background: #000;    color: #FFF;    font-weight: bold;    margin: 0.1em;    padding: 0.3em;    position: absolute;}.cPointer {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_pointer.png);    height: 20px;    margin-left: -5px;  /* must be minus half of its width */    margin-top: -10px;    position: absolute;    width: 10px;}.normalqTip {    background: #333 !important;    opacity: 0.8 !important;    border:1px solid #000 !important;    -moz-border-radius: 0.3em !important;    -webkit-border-radius: 0.3em !important;    border-radius: 0.3em !important;    text-shadow: -1px -1px #000 !important;    font-size: 0.8em !important;    font-weight: bold !important;}.normalqTip * {    background: none !important;    color: #FFF !important;}.normalqTipContent {    padding: 1px 3px !important;}.data_full_width {    width: 100%;}.cHide {    background: #D3DCE3 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_hide.png);    color: #CCC;    cursor: pointer;    height: 16px;    margin-left: -5px;    margin-top: 0.3em;    position: absolute;    width: 16px;}.cHide:hover {    background-color: #AAA;}.cDrop {    left: 0;    position: absolute;    top: 0;}.coldrop {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_drop.png);    cursor: pointer;    height: 16px;    margin-left: 0.5em;    margin-top: 0.3em;    position: absolute;    width: 16px;}.coldrop:hover, .coldrop-hover {    background-color: #999;}.cList {    background: #EEE;    border: solid 1px #999;    position: absolute;}.cList .lDiv div {    padding: 0.2em 0.5em 0.2em 0.2em;}.cList .lDiv div:hover {    background: #DDD;    cursor: pointer;}.cList .lDiv div input {    cursor: pointer;}.showAllColBtn {    border-bottom: solid 1px #999;    border-top: solid 1px #999;    cursor: pointer;    font-size: 0.9em;    font-weight: bold;    padding: 0.35em 1em;    text-align: center;}.showAllColBtn:hover {    background: #DDD;}.navigation {    background: #E5E5E5;    border: 1px solid black;    margin: 0.8em 0;}.navigation td {    margin: 0;    padding: 0;    vertical-align: middle;    white-space: nowrap;}.navigation_separator {    color: #555;    display: inline-block;    text-align: center;    width: 1.2em;    text-shadow: 1px 0 #FFF;}.navigation input[type=submit] {    background: none;    border: 0;    margin: 0;    padding: 0.3em 0.5em;    min-width: 1.5em;    font-weight: bold;}.navigation input[type=submit]:hover, .navigation input.edit_mode_active {    background: #333;    color: white;    cursor: pointer;}.navigation select {    margin: 0 0.8em;}.cEdit {    margin: 0;    padding: 0;    position: absolute;}.cEdit input[type=text] {    background: #FFF;    height: 100%;    margin: 0;    padding: 0;}.cEdit .edit_area {    background: #FFF;    border: 1px solid #999;    min-width: 10em;    padding: 0.3em 0.5em;}.cEdit .edit_area select, .cEdit .edit_area textarea {    width: 97%;}.cEdit .cell_edit_hint {    color: #555;    font-size: 0.8em;    margin: 0.3em 0.2em;}.cEdit .edit_box {    overflow: hidden;    padding: 0;}.cEdit .edit_box_posting {    background: #FFF url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat right center;    padding-right: 1.5em;}.cEdit .edit_area_loading {    background: #FFF url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat center;    height: 10em;}.cEdit .goto_link {    background: #EEE;    color: #555;    padding: 0.2em 0.3em;}.saving_edited_data {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat left;    padding-left: 20px;}/* css for timepicker */.ui-timepicker-div .ui-widget-header { margin-bottom: 8px; }.ui-timepicker-div dl { text-align: left; }.ui-timepicker-div dl dt { height: 25px; }.ui-timepicker-div dl dd { margin: -25px 0 10px 65px; }.ui-timepicker-div td { font-size: 90%; }/* Designer */.input_tab {    background-color: #A6C7E1;    color: #000000;}#canvas {    background-color: #FFFFFF;    color: #000000;}canvas.pmd {    display: inline-block;    overflow: hidden;    text-align: left;}canvas.pmd * {    behavior: url(#default#VML);}.pmd_tab {    background-color: #FFFFFF;    color: #000000;    border-collapse: collapse;    border: 1px solid #AAAAAA;    z-index: 1;    -moz-user-select: none;}.tab_zag {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    text-align: center;    cursor: move;    padding: 1px;    font-weight: bold;}.tab_zag_2 {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header_Linked.png);    background-repeat: repeat-x;    text-align: center;    cursor: move;    padding: 1px;    font-weight: bold;}.tab_field {    background: #FFFFFF;    color: #000000;    cursor: default;}.tab_field_2 {    background-color: #CCFFCC;    color: #000000;    background-repeat: repeat-x;    cursor: default;}.tab_field_3 {    background-color: #FFE6E6; /*#DDEEFF*/    color: #000000;    cursor: default;}#pmd_hint {    white-space: nowrap;    position: absolute;    background-color: #99FF99;    color: #000000;    left: 200px;    top: 50px;    z-index: 3;    border: #00CC66 solid 1px;    display: none;}.scroll_tab {    overflow: auto;    width: 100%;    height: 500px;}.pmd_Tabs {    cursor: default;    color: #0055bb;    white-space: nowrap;    text-decoration: none;    text-indent: 3px;    font-weight: bold;    margin-left: 2px;    text-align: left;    background-color: #FFFFFF;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/left_panel_butt.png);    border: #CCCCCC solid 1px;}.pmd_Tabs2 {    cursor: default;    color: #0055bb;    background: #FFEE99;    text-indent: 3px;    font-weight: bold;    white-space: nowrap;    text-decoration: none;    border: #9999FF solid 1px;    text-align: left;}.owner {    font-weight: normal;    color: #888888;}.option_tab {    padding-left: 2px;    padding-right: 2px;    width: 5px;}.select_all {    vertical-align: top;    padding-left: 2px;    padding-right: 2px;    cursor: default;    width: 1px;    color: #000000;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;}.small_tab {    vertical-align: top;    background-color: #0064ea;    color: #FFFFFF;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/small_tab.png);    cursor: default;    text-align: center;    font-weight: bold;    padding-left: 2px;    padding-right: 2px;    width: 1px;    text-decoration: none;}.small_tab2 {    vertical-align: top;    color: #FFFFFF;    background-color: #FF9966;    cursor: default;    padding-left: 2px;    padding-right: 2px;    text-align: center;    font-weight: bold;    width: 1px;    text-decoration: none;}.small_tab_pref {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    text-align: center;    width: 1px;}.small_tab_pref2 {    vertical-align: top;    color: #FFFFFF;    background-color: #FF9966;    cursor: default;    text-align: center;    font-weight: bold;    width: 1px;    text-decoration: none;}.butt {    border: #4477aa solid 1px;    font-weight: bold;    height: 19px;    width: 70px;    background-color: #FFFFFF;    color: #000000;    vertical-align: baseline;}.L_butt2_1 {    padding: 1px;    text-decoration: none;    background-color: #ffffff;    color: #000000;    vertical-align: middle;    cursor: default;}.L_butt2_2 {    padding: 0;    border: #0099CC solid 1px;    background: #FFEE99;    text-decoration: none;    color: #000000;    cursor: default;}/* ---------------------------------------------------------------------------*/.bor {    width: 10px;    height: 10px;}.frams1 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/1.png) no-repeat right bottom;}.frams2 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/2.png) no-repeat left bottom;}.frams3 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/3.png) no-repeat left top;}.frams4 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/4.png) no-repeat right top;}.frams5 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/5.png) repeat-x center bottom;}.frams6 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/6.png) repeat-y left;}.frams7 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/7.png) repeat-x top;}.frams8 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/8.png) repeat-y right;}#osn_tab {    background-color: #FFFFFF;    color: #000000;    border: #A9A9A9 solid 1px;}.pmd_header {    background-color: #EAEEF0;    color: #000000;    text-align: center;    font-weight: bold;    margin: 0;    padding: 0;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/top_panel.png);    background-position: top;    background-repeat: repeat-x;    border-right: #999999 solid 1px;    border-left: #999999 solid 1px;    height: 28px;}.pmd_header a {    display: block;    float: left;    margin: 3px 1px 4px 1px;    height: 20px;    border: 1px dotted #ffffff;}.pmd_header .M_bord {    display: block;    float: left;    margin: 4px;    height: 20px;    width: 2px;}.pmd_header a.first {    margin-right: 1em;}.pmd_header a.last {    margin-left: 1em;}a.M_butt_Selected_down_IE,a.M_butt_Selected_down {    border: 1px solid #C0C0BB;    background-color: #99FF99;    color: #000000;}a.M_butt_Selected_down_IE:hover,a.M_butt_Selected_down:hover,a.M_butt:hover {    border: 1px solid #0099CC;    background-color: #FFEE99;    color: #000000;}#layer_menu {    z-index: 1000;    position: absolute;    left: 0;    background-color: #EAEEF0;    border: #999999 solid 1px;}#layer_action {    position: absolute;    left: 638px;    top: 52px;    z-index: 1000;    background-color: #CCFF99;    padding: 3px;    border: #009933 solid 1px;    white-space: nowrap;    font-weight: bold;}#layer_upd_relation {    position: absolute;    left: 637px;    top: 224px;    z-index: 1000;}#layer_new_relation {    position: absolute;    left: 636px;    top: 85px;    z-index: 1000;    width: 153px;}#pmd_optionse {    position: absolute;    left: 636px;    top: 85px;    z-index: 1000;    width: 153px;}#layer_menu_sizer {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/resize.png);    cursor: nw-resize;    width: 16px;    height: 16px;}.panel {    position: fixed;    top: 50px;    right: 0;    display: none;    background: #FFF;    border:1px solid #F5F5F5;    width: 350 px;    height: auto;    padding: 30px 170px 30px 30px;    color:#FFF;    z-index:99;}a.trigger{    position: fixed;    text-decoration: none;    top: 60px; right: 0;    color:#fff;    padding: 10px 40px 10px 15px;    background:#333333 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/plus.png) 85% 55% no-repeat;    border:1px solid #444444;    display: block;}a.trigger:hover{    position: fixed;    text-decoration: none;    top: 60px; right: 0;    color:#080808;    padding: 10px 40px 10px 15px;    background:#fff696 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/plus.png) 85% 55% no-repeat;    border:1px solid #999;    display: block;}a.active.trigger {    background:#222222 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/minus.png) 85% 55% no-repeat;    z-index:999;}a.active.trigger:hover {    background:#fff696 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/minus.png) 85% 55% no-repeat;    z-index:999;}h2.tiger{    background-repeat: repeat-x;    padding: 1px;    font-weight: bold;    padding: 50 20 50 20px;    margin: 0 0 5px 0;    width: 250px;    float: left;    color : #333;    text-align: center;}h2.tiger a {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    text-align: center;    text-decoration: none;    color : #333;    display: block;}h2.tiger a:hover {    color: #000;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header_Linked.png);}h2.active {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    padding: 1px;    background-position: left bottom;}.toggle_container {    margin: 0 0 5px;    padding: 0;    border-top: 1px solid #d6d6d6;    background: #FFF ;    width: 250px;    overflow: hidden;    font-size: 1.2em;    clear: both;}.toggle_container .block {    background-color: #DBE4E8;    padding:40 15 40 15px; /*--Padding of Container--*/    border:1px solid #999;    color:#000;}.history_table {    text-align: center;    background-color: #9999CC;}.history_table2 {    text-align: center;    background-color: #DBE4E8;}#filter {    display: none;    position: absolute;    top: 0%;    left: 0%;    width: 100%;    height: 100%;    background-color: #CCA;    z-index:10;    opacity:0.5;    filter: alpha(opacity=50);}#box {    display: none;    position: absolute;    top: 20%;    left: 30%;    width: 500px;    height: 220px;    padding: 48px;    margin:0;    border: 1px solid black;    background-color: white;    z-index:101;    overflow: visible;}#boxtitle {    position:absolute;    float:center;    top:0;    left:0;    width:593px;    height:20px;    padding:0;    padding-top:4px;    left-padding:8px;    margin:0;    border-bottom:4px solid #3CF;    background-color: #D0DCE0;    color:black;    font-weight:bold;    padding-left: 2px;    text-align:left;}#tblfooter {    background-color: #D3DCE3;    float: right;    padding-top:10px;    color: black;    font-weight: normal;}input.btn {    color:#333;    background-color: #D0DCE0;}body .ui-widget {    font-size: 1em;}.ui-dialog fieldset legend a {    color: #0000FF;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/common.inc.php';/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam();/** * If coming from a Show MySQL link on the home page, * put something in $sub_part */if (empty($sub_part)) {    $sub_part = '_structure';}/** * Checks for superuser privileges */$is_superuser = PMA_isSuperuser();/** * Prepares links *//** * export, search and qbe links if there is at least one table */if ($num_tables == 0) {    $tab_qbe['warning'] = __('Database seems to be empty!');    $tab_search['warning'] = __('Database seems to be empty!');    $tab_export['warning'] = __('Database seems to be empty!');}$tab_structure['link']  = 'db_structure.php';$tab_structure['text']  = __('Structure');$tab_structure['icon']  = 'b_props.png';$tab_sql['link']        = 'db_sql.php';$tab_sql['args']['db_query_force'] = 1;$tab_sql['text']        = __('SQL');$tab_sql['icon']        = 'b_sql.png';$tab_export['text']     = __('Export');$tab_export['icon']     = 'b_export.png';$tab_export['link']     = 'db_export.php';$tab_search['text']     = __('Search');$tab_search['icon']     = 'b_search.png';$tab_search['link']     = 'db_search.php';if (PMA_Tracker::isActive()) {    $tab_tracking['text'] = __('Tracking');    $tab_tracking['icon'] = 'eye.png';    $tab_tracking['link'] = 'db_tracking.php';}$tab_qbe['text']        = __('Query');$tab_qbe['icon']        = 's_db.png';$tab_qbe['link']        = 'db_qbe.php';if ($cfgRelation['designerwork']) {    $tab_designer['text']   = __('Designer');    $tab_designer['icon']   = 'b_relations.png';    $tab_designer['link']   = 'pmd_general.php';}if (! $db_is_information_schema) {    $tab_import['link']     = 'db_import.php';    $tab_import['text']     = __('Import');    $tab_import['icon']     = 'b_import.png';    $tab_operation['link']  = 'db_operations.php';    $tab_operation['text']  = __('Operations');    $tab_operation['icon']  = 'b_tblops.png';    if ($is_superuser && !PMA_DRIZZLE) {        $tab_privileges['link'] = 'server_privileges.php';        $tab_privileges['args']['checkprivs']       = $db;        // stay on database view        $tab_privileges['args']['viewing_mode'] = 'db';        $tab_privileges['text'] = __('Privileges');        $tab_privileges['icon'] = 's_rights.png';    }    $tab_routines['link']   = 'db_routines.php';    $tab_routines['text']   = __('Routines');    $tab_routines['icon']   = 'b_routines.png';    $tab_events['link']     = 'db_events.php';    $tab_events['text']     = __('Events');    $tab_events['icon']     = 'b_events.png';    $tab_triggers['link']   = 'db_triggers.php';    $tab_triggers['text']   = __('Triggers');    $tab_triggers['icon']   = 'b_triggers.png';}/** * Displays tab links */$tabs = array();$tabs[] =& $tab_structure;$tabs[] =& $tab_sql;$tabs[] =& $tab_search;$tabs[] =& $tab_qbe;$tabs[] =& $tab_export;if (! $db_is_information_schema) {    $tabs[] =& $tab_import;    $tabs[] =& $tab_operation;    if ($is_superuser && !PMA_DRIZZLE) {        $tabs[] =& $tab_privileges;    }    if (!PMA_DRIZZLE) {        $tabs[] =& $tab_routines;    }    if (PMA_MYSQL_INT_VERSION >= 50106 && ! PMA_DRIZZLE) {        if (PMA_currentUserHasPrivilege('EVENT', $db)) {            $tabs[] =& $tab_events;        }    }    if (!PMA_DRIZZLE) {        if (PMA_currentUserHasPrivilege('TRIGGER', $db)) {            $tabs[] =& $tab_triggers;        }    }}if (PMA_Tracker::isActive()) {    $tabs[] =& $tab_tracking;}if (! $db_is_information_schema) {    if ($cfgRelation['designerwork']) {        $tabs[] =& $tab_designer;    }}$url_params['db'] = $db;echo PMA_generate_html_tabs($tabs, $url_params);unset($tabs);/** * Displays a message */if (!empty($message)) {    PMA_showMessage($message);    unset($message);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);/** * Selects the database to work with */PMA_DBI_select_db($db);$goto = $cfg['DefaultTabTable'];/** * $_REQUEST['target_db'] could be empty in case we came from an input field * (when there are many databases, no drop-down) */if (empty($_REQUEST['target_db'])) {    $_REQUEST['target_db'] = $db;}/** * A target table name has been sent to this script -> do the work */if (PMA_isValid($_REQUEST['new_name'])) {    if ($db == $_REQUEST['target_db'] && $table == $_REQUEST['new_name']) {        if (isset($_REQUEST['submit_move'])) {            $message = PMA_Message::error(__('Can\'t move table to same one!'));        } else {            $message = PMA_Message::error(__('Can\'t copy table to same one!'));        }        $result = false;    } else {        $result = PMA_Table::moveCopy($db, $table, $_REQUEST['target_db'], $_REQUEST['new_name'],            $_REQUEST['what'], isset($_REQUEST['submit_move']), 'one_table');        if (isset($_REQUEST['submit_move'])) {            $message = PMA_Message::success(__('Table %s has been moved to %s.'));        } else {            $message = PMA_Message::success(__('Table %s has been copied to %s.'));        }        $old = PMA_backquote($db) . '.' . PMA_backquote($table);        $message->addParam($old);        $new = PMA_backquote($_REQUEST['target_db']) . '.' . PMA_backquote($_REQUEST['new_name']);        $message->addParam($new);        /* Check: Work on new table or on old table? */        if (isset($_REQUEST['submit_move']) || PMA_isValid($_REQUEST['switch_to_new'])) {            $db        = $_REQUEST['target_db'];            $table     = $_REQUEST['new_name'];        }        if ( $_REQUEST['ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            $extra_data['db'] = $GLOBALS['db'];            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $reload = 1;    }} else {    /**     * No new name for the table!     */    $message = PMA_Message::error(__('The table name is empty!'));    $result = false;}/** * Back to the calling script */$_message = $message;unset($message);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Core script for import, this is just the glue around all other stuff * * @package PhpMyAdmin *//** * Get the variables sent or posted to this script and a core script */require_once './libraries/common.inc.php';//require_once './libraries/display_import_functions.lib.php';// reset import messages for ajax request$_SESSION['Import_message']['message'] = null;$_SESSION['Import_message']['go_back_url'] = null;// default values$GLOBALS['reload'] = false;// Are we just executing plain query or sql file? (eg. non import, but query box/window run)if (!empty($sql_query)) {    // run SQL query    $import_text = $sql_query;    $import_type = 'query';    $format = 'sql';    // refresh left frame on changes in table or db structure    if (preg_match('/^(CREATE|ALTER|DROP)\s+(VIEW|TABLE|DATABASE|SCHEMA)\s+/i', $sql_query)) {        $GLOBALS['reload'] = true;    }    $sql_query = '';} elseif (!empty($sql_localfile)) {    // run SQL file on server    $local_import_file = $sql_localfile;    $import_type = 'queryfile';    $format = 'sql';    unset($sql_localfile);} elseif (!empty($sql_file)) {    // run uploaded SQL file    $import_file = $sql_file;    $import_type = 'queryfile';    $format = 'sql';    unset($sql_file);} elseif (!empty($id_bookmark)) {    // run bookmark    $import_type = 'query';    $format = 'sql';}// If we didn't get any parameters, either user called this directly, or// upload limit has been reached, let's assume the second possibility.;if ($_POST == array() && $_GET == array()) {    include_once './libraries/header.inc.php';    $message = PMA_Message::error(__('You probably tried to upload too large file. Please refer to %sdocumentation%s for ways to workaround this limit.'));    $message->addParam('[a@./Documentation.html#faq1_16@_blank]');    $message->addParam('[/a]');    // so we can obtain the message    $_SESSION['Import_message']['message'] = $message->getDisplay();    $_SESSION['Import_message']['go_back_url'] = $goto;    $message->display();    include './libraries/footer.inc.php';}// Check needed parametersPMA_checkParameters(array('import_type', 'format'));// We don't want anything special in format$format = PMA_securePath($format);// Import functionsrequire_once './libraries/import.lib.php';// Create error and goto urlif ($import_type == 'table') {    $err_url = 'tbl_import.php?' . PMA_generate_common_url($db, $table);    $_SESSION['Import_message']['go_back_url'] = $err_url;    $goto = 'tbl_import.php';} elseif ($import_type == 'database') {    $err_url = 'db_import.php?' . PMA_generate_common_url($db);    $_SESSION['Import_message']['go_back_url'] = $err_url;    $goto = 'db_import.php';} elseif ($import_type == 'server') {    $err_url = 'server_import.php?' . PMA_generate_common_url();    $_SESSION['Import_message']['go_back_url'] = $err_url;    $goto = 'server_import.php';} else {    if (empty($goto) || !preg_match('@^(server|db|tbl)(_[a-z]*)*\.php$@i', $goto)) {        if (strlen($table) && strlen($db)) {            $goto = 'tbl_structure.php';        } elseif (strlen($db)) {            $goto = 'db_structure.php';        } else {            $goto = 'server_sql.php';        }    }    if (strlen($table) && strlen($db)) {        $common = PMA_generate_common_url($db, $table);    } elseif (strlen($db)) {        $common = PMA_generate_common_url($db);    } else {        $common = PMA_generate_common_url();    }    $err_url  = $goto              . '?' . $common              . (preg_match('@^tbl_[a-z]*\.php$@', $goto) ? '&amp;table=' . htmlspecialchars($table) : '');    $_SESSION['Import_message']['go_back_url'] = $err_url;}if (strlen($db)) {    PMA_DBI_select_db($db);}@set_time_limit($cfg['ExecTimeLimit']);if (!empty($cfg['MemoryLimit'])) {    @ini_set('memory_limit', $cfg['MemoryLimit']);}$timestamp = time();if (isset($allow_interrupt)) {    $maximum_time = ini_get('max_execution_time');} else {    $maximum_time = 0;}// set default values$timeout_passed = false;$error = false;$read_multiply = 1;$finished = false;$offset = 0;$max_sql_len = 0;$file_to_unlink = '';$sql_query = '';$sql_query_disabled = false;$go_sql = false;$executed_queries = 0;$run_query = true;$charset_conversion = false;$reset_charset = false;$bookmark_created = false;// Bookmark Support: get a query back from bookmark if requiredif (!empty($id_bookmark)) {    $id_bookmark = (int)$id_bookmark;    include_once './libraries/bookmark.lib.php';    switch ($action_bookmark) {        case 0: // bookmarked query that have to be run            $import_text = PMA_Bookmark_get($db, $id_bookmark, 'id', isset($action_bookmark_all));            if (isset($bookmark_variable) && !empty($bookmark_variable)) {                $import_text = preg_replace('|/\*(.*)\[VARIABLE\](.*)\*/|imsU', '${1}' . PMA_sqlAddSlashes($bookmark_variable) . '${2}', $import_text);            }            // refresh left frame on changes in table or db structure            if (preg_match('/^(CREATE|ALTER|DROP)\s+(VIEW|TABLE|DATABASE|SCHEMA)\s+/i', $import_text)) {                $GLOBALS['reload'] = true;            }            break;        case 1: // bookmarked query that have to be displayed            $import_text = PMA_Bookmark_get($db, $id_bookmark);            if ($GLOBALS['is_ajax_request'] == true) {                $extra_data['sql_query'] = $import_text;                $extra_data['action_bookmark'] = $action_bookmark;                $message = PMA_Message::success(__('Showing bookmark'));                PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);            } else {                $run_query = false;            }            break;        case 2: // bookmarked query that have to be deleted            $import_text = PMA_Bookmark_get($db, $id_bookmark);            PMA_Bookmark_delete($db, $id_bookmark);            if ($GLOBALS['is_ajax_request'] == true) {                $message = PMA_Message::success(__('The bookmark has been deleted.'));                $extra_data['action_bookmark'] = $action_bookmark;                $extra_data['id_bookmark'] = $id_bookmark;                PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);            } else {                $run_query = false;                $error = true; // this is kind of hack to skip processing the query            }            break;    }} // end bookmarks reading// Do no run query if we show PHP codeif (isset($GLOBALS['show_as_php'])) {    $run_query = false;    $go_sql = true;}// Store the query as a bookmark before executing it if bookmarklabel was givenif (!empty($bkm_label) && !empty($import_text)) {    include_once './libraries/bookmark.lib.php';    $bfields = array(                 'dbase' => $db,                 'user'  => $cfg['Bookmark']['user'],                 'query' => urlencode($import_text),                 'label' => $bkm_label    );    // Should we replace bookmark?    if (isset($bkm_replace)) {        $bookmarks = PMA_Bookmark_getList($db);        foreach ($bookmarks as $key => $val) {            if ($val == $bkm_label) {                PMA_Bookmark_delete($db, $key);            }        }    }    PMA_Bookmark_save($bfields, isset($bkm_all_users));    $bookmark_created = true;} // end store bookmarks// We can not read all at once, otherwise we can run out of memory$memory_limit = trim(@ini_get('memory_limit'));// 2 MB as defaultif (empty($memory_limit)) {    $memory_limit = 2 * 1024 * 1024;}// In case no memory limit we work on 10MB chunksif ($memory_limit == -1) {    $memory_limit = 10 * 1024 * 1024;}// Calculate value of the limitif (strtolower(substr($memory_limit, -1)) == 'm') {    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024;} elseif (strtolower(substr($memory_limit, -1)) == 'k') {    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024;} elseif (strtolower(substr($memory_limit, -1)) == 'g') {    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024 * 1024;} else {    $memory_limit = (int)$memory_limit;}$read_limit = $memory_limit / 8; // Just to be sure, there might be lot of memory needed for uncompression// handle filenamesif (!empty($local_import_file) && !empty($cfg['UploadDir'])) {    // sanitize $local_import_file as it comes from a POST    $local_import_file = PMA_securePath($local_import_file);    $import_file  = PMA_userDir($cfg['UploadDir']) . $local_import_file;} elseif (empty($import_file) || !is_uploaded_file($import_file)) {    $import_file  = 'none';}// Do we have file to import?if ($import_file != 'none' && !$error) {    // work around open_basedir and other limitations    $open_basedir = @ini_get('open_basedir');    // If we are on a server with open_basedir, we must move the file    // before opening it. The doc explains how to create the "./tmp"    // directory    if (!empty($open_basedir)) {        $tmp_subdir = (PMA_IS_WINDOWS ? '.\\tmp\\' : './tmp/');        if (is_writable($tmp_subdir)) {            $import_file_new = $tmp_subdir . basename($import_file) . uniqid();            if (move_uploaded_file($import_file, $import_file_new)) {                $import_file = $import_file_new;                $file_to_unlink = $import_file_new;            }            $size = filesize($import_file);        }    }    /**     *  Handle file compression     *  @todo duplicate code exists in File.class.php     */    $compression = PMA_detectCompression($import_file);    if ($compression === false) {        $message = PMA_Message::error(__('File could not be read'));        $error = true;    } else {        switch ($compression) {            case 'application/bzip2':                if ($cfg['BZipDump'] && @function_exists('bzopen')) {                    $import_handle = @bzopen($import_file, 'r');                } else {                    $message = PMA_Message::error(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'));                    $message->addParam($compression);                    $error = true;                }                break;            case 'application/gzip':                if ($cfg['GZipDump'] && @function_exists('gzopen')) {                    $import_handle = @gzopen($import_file, 'r');                } else {                    $message = PMA_Message::error(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'));                    $message->addParam($compression);                    $error = true;                }                break;            case 'application/zip':                if ($cfg['ZipDump'] && @function_exists('zip_open')) {                    /**                     * Load interface for zip extension.                     */                    include_once './libraries/zip_extension.lib.php';                    $result = PMA_getZipContents($import_file);                    if (! empty($result['error'])) {                        $message = PMA_Message::rawError($result['error']);                        $error = true;                    } else {                        $import_text = $result['data'];                    }                } else {                    $message = PMA_Message::error(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'));                    $message->addParam($compression);                    $error = true;                }                break;            case 'none':                $import_handle = @fopen($import_file, 'r');                break;            default:                $message = PMA_Message::error(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'));                $message->addParam($compression);                $error = true;                break;        }    }    // use isset() because zip compression type does not use a handle    if (!$error && isset($import_handle) && $import_handle === false) {        $message = PMA_Message::error(__('File could not be read'));        $error = true;    }} elseif (!$error) {    if (! isset($import_text) || empty($import_text)) {        $message = PMA_Message::error(__('No data was received to import. Either no file name was submitted, or the file size exceeded the maximum size permitted by your PHP configuration. See [a@./Documentation.html#faq1_16@Documentation]FAQ 1.16[/a].'));        $error = true;    }}// so we can obtain the message//$_SESSION['Import_message'] = $message->getDisplay();// Convert the file's charset if necessaryif ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE && isset($charset_of_file)) {    if ($charset_of_file != 'utf-8') {        $charset_conversion = true;    }} elseif (isset($charset_of_file) && $charset_of_file != 'utf8') {    if (PMA_DRIZZLE) {        // Drizzle doesn't support other character sets, so we can't fallback to SET NAMES - throw an error        $error = true;        $message = PMA_Message::error(__('Cannot convert file\'s character set without character set conversion library'));    } else {        PMA_DBI_query('SET NAMES \'' . $charset_of_file . '\'');        // We can not show query in this case, it is in different charset        $sql_query_disabled = true;        $reset_charset = true;    }}// Something to skip?if (!$error && isset($skip)) {    $original_skip = $skip;    while ($skip > 0) {        PMA_importGetNextChunk($skip < $read_limit ? $skip : $read_limit);        $read_multiply = 1; // Disable read progresivity, otherwise we eat all memory!        $skip -= $read_limit;    }    unset($skip);}if (!$error) {    // Check for file existance    if (!file_exists('./libraries/import/' . $format . '.php')) {        $error = true;        $message = PMA_Message::error(__('Could not load import plugins, please check your installation!'));    } else {        // Do the real import        $plugin_param = $import_type;        include './libraries/import/' . $format . '.php';    }}if (! $error && false !== $import_handle && null !== $import_handle) {    fclose($import_handle);}// Cleanup temporary fileif ($file_to_unlink != '') {    unlink($file_to_unlink);}// Reset charset back, if we did some changesif ($reset_charset) {    PMA_DBI_query('SET CHARACTER SET utf8');    PMA_DBI_query('SET SESSION collation_connection =\'' . $collation_connection . '\'');}// Show correct messageif (!empty($id_bookmark) && $action_bookmark == 2) {    $message = PMA_Message::success(__('The bookmark has been deleted.'));    $display_query = $import_text;    $error = false; // unset error marker, it was used just to skip processing} elseif (!empty($id_bookmark) && $action_bookmark == 1) {    $message = PMA_Message::notice(__('Showing bookmark'));} elseif ($bookmark_created) {    $special_message = '[br]' . sprintf(__('Bookmark %s created'), htmlspecialchars($bkm_label));} elseif ($finished && !$error) {    if ($import_type == 'query') {        $message = PMA_Message::success();    } else {        if ($import_notice) {            $message = PMA_Message::success('<em>'.__('Import has been successfully finished, %d queries executed.').'</em>');            $message->addParam($executed_queries);            $message->addString($import_notice);            $message->addString('(' . $_FILES['import_file']['name'] . ')');        } else {            $message = PMA_Message::success(__('Import has been successfully finished, %d queries executed.'));            $message->addParam($executed_queries);            $message->addString('(' . $_FILES['import_file']['name'] . ')');        }    }}// Did we hit timeout? Tell it user.if ($timeout_passed) {    $message = PMA_Message::error(__('Script timeout passed, if you want to finish import, please resubmit same file and import will resume.'));    if ($offset == 0 || (isset($original_skip) && $original_skip == $offset)) {        $message->addString(__('However on last run no data has been parsed, this usually means phpMyAdmin won\'t be able to finish this import unless you increase php time limits.'));    }}// if there is any message, copy it into $_SESSION as well, so we can obtain it by AJAX callif (isset($message)) {    $_SESSION['Import_message']['message'] = $message->getDisplay();//  $_SESSION['Import_message']['go_back_url'] = $goto.'?'.  PMA_generate_common_url();}// Parse and analyze the query, for correct db and table name// in case of a query typed in the query window// (but if the query is too large, in case of an imported file, the parser//  can choke on it so avoid parsing)if (strlen($sql_query) <= $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {    include_once './libraries/parse_analyze.lib.php';}// There was an error?if (isset($my_die)) {    foreach ($my_die AS $key => $die) {        PMA_mysqlDie($die['error'], $die['sql'], '', $err_url, $error);    }}// we want to see the results of the last query that returned at least a rowif (! empty($last_query_with_results)) {    // but we want to show intermediate results too    $disp_query = $sql_query;    $disp_message = __('Your SQL query has been executed successfully');    $sql_query = $last_query_with_results;    $go_sql = true;}if ($go_sql) {    include './sql.php';} else {    $active_page = $goto;    include './' . $goto;}exit();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles miscellaneous db operations: *  - move/rename *  - copy *  - changing collation *  - changing comment *  - adding tables *  - viewing PDF schemas * * @package PhpMyAdmin *//** * requirements */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';// add blobstreaming library functionsrequire_once "./libraries/blobstreaming.lib.php";// add a javascript file for jQuery functions to handle Ajax actions// also add jQueryUI$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'db_operations.js';/** * Rename/move or copy database */if (strlen($db) && (! empty($db_rename) || ! empty($db_copy))) {    if (! empty($db_rename)) {        $move = true;    } else {        $move = false;    }    if (! isset($newname) || ! strlen($newname)) {        $message = PMA_Message::error(__('The database name is empty!'));    } else {        $sql_query = ''; // in case target db exists        $_error = false;        if ($move || (isset($create_database_before_copying) && $create_database_before_copying)) {            // lower_case_table_names=1 `DB` becomes `db`            if (!PMA_DRIZZLE) {                $lower_case_table_names = PMA_DBI_fetch_value('SHOW VARIABLES LIKE "lower_case_table_names"', 0, 1);                if ($lower_case_table_names === '1') {                    $newname = PMA_strtolower($newname);                }            }            $local_query = 'CREATE DATABASE ' . PMA_backquote($newname);            if (isset($db_collation)) {                $local_query .= ' DEFAULT' . PMA_generateCharsetQueryPart($db_collation);            }            $local_query .= ';';            $sql_query = $local_query;            // save the original db name because Tracker.class.php which            // may be called under PMA_DBI_query() changes $GLOBALS['db']            // for some statements, one of which being CREATE DATABASE            $original_db = $db;            PMA_DBI_query($local_query);            $db = $original_db;            unset($original_db);            // rebuild the database list because PMA_Table::moveCopy            // checks in this list if the target db exists            $GLOBALS['pma']->databases->build();        }        // here I don't use DELIMITER because it's not part of the        // language; I have to send each statement one by one        // to avoid selecting alternatively the current and new db        // we would need to modify the CREATE definitions to qualify        // the db name        $procedure_names = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');        if ($procedure_names) {            foreach ($procedure_names as $procedure_name) {                PMA_DBI_select_db($db);                $tmp_query = PMA_DBI_get_definition($db, 'PROCEDURE', $procedure_name);                // collect for later display                $GLOBALS['sql_query'] .= "\n" . $tmp_query;                PMA_DBI_select_db($newname);                PMA_DBI_query($tmp_query);            }        }        $function_names = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');        if ($function_names) {            foreach ($function_names as $function_name) {                PMA_DBI_select_db($db);                $tmp_query = PMA_DBI_get_definition($db, 'FUNCTION', $function_name);                // collect for later display                $GLOBALS['sql_query'] .= "\n" . $tmp_query;                PMA_DBI_select_db($newname);                PMA_DBI_query($tmp_query);            }        }        // go back to current db, just in case        PMA_DBI_select_db($db);        $GLOBALS['sql_constraints_query_full_db'] = array();        $tables_full = PMA_DBI_get_tables_full($db);        $views = array();        // remove all foreign key constraints, otherwise we can get errors        include_once './libraries/export/sql.php';        foreach ($tables_full as $each_table => $tmp) {            $sql_constraints = '';            $sql_drop_foreign_keys = '';            $sql_structure = PMA_getTableDef($db, $each_table, "\n", '', false, false);            if ($move && ! empty($sql_drop_foreign_keys)) {                PMA_DBI_query($sql_drop_foreign_keys);            }            // keep the constraint we just dropped            if (! empty($sql_constraints)) {                $GLOBALS['sql_constraints_query_full_db'][] = $sql_constraints;            }        }        unset($sql_constraints, $sql_drop_foreign_keys, $sql_structure);        foreach ($tables_full as $each_table => $tmp) {            // to be able to rename a db containing views,            // first all the views are collected and a stand-in is created            // the real views are created after the tables            if (PMA_Table::isView($db, $each_table)) {                $views[] = $each_table;                // Create stand-in definition to resolve view dependencies                $sql_view_standin = PMA_getTableDefStandIn($db, $each_table, "\n");                PMA_DBI_select_db($newname);                PMA_DBI_query($sql_view_standin);                $GLOBALS['sql_query'] .= "\n" . $sql_view_standin;            }        }        foreach ($tables_full as $each_table => $tmp) {            // skip the views; we have creted stand-in definitions            if (PMA_Table::isView($db, $each_table)) {                continue;            }            $back = $sql_query;            $sql_query = '';            // value of $what for this table only            $this_what = $what;            // do not copy the data from a Merge table            // note: on the calling FORM, 'data' means 'structure and data'            if (PMA_Table::isMerge($db, $each_table)) {                if ($this_what == 'data') {                    $this_what = 'structure';                }                if ($this_what == 'dataonly') {                    $this_what = 'nocopy';                }            }            if ($this_what != 'nocopy') {                // keep the triggers from the original db+table                // (third param is empty because delimiters are only intended                //  for importing via the mysql client or our Import feature)                $triggers = PMA_DBI_get_triggers($db, $each_table, '');                if (! PMA_Table::moveCopy(                    $db, $each_table, $newname, $each_table,                    isset($this_what) ? $this_what : 'data', $move, 'db_copy')                ) {                    $_error = true;                    // $sql_query is filled by PMA_Table::moveCopy()                    $sql_query = $back . $sql_query;                    break;                }                // apply the triggers to the destination db+table                if ($triggers) {                    PMA_DBI_select_db($newname);                    foreach ($triggers as $trigger) {                        PMA_DBI_query($trigger['create']);                        $GLOBALS['sql_query'] .= "\n" . $trigger['create'] . ';';                    }                    unset($trigger);                }                unset($triggers);                // this does not apply to a rename operation                if (isset($GLOBALS['add_constraints']) && !empty($GLOBALS['sql_constraints_query'])) {                    $GLOBALS['sql_constraints_query_full_db'][] = $GLOBALS['sql_constraints_query'];                    unset($GLOBALS['sql_constraints_query']);                }            }            // $sql_query is filled by PMA_Table::moveCopy()            $sql_query = $back . $sql_query;        } // end (foreach)        unset($each_table);        // handle the views        if (! $_error) {            // temporarily force to add DROP IF EXIST to CREATE VIEW query,            // to remove stand-in VIEW that was created earlier            if (isset($GLOBALS['drop_if_exists'])) {                $temp_drop_if_exists = $GLOBALS['drop_if_exists'];            }            $GLOBALS['drop_if_exists'] = 'true';            foreach ($views as $view) {                if (! PMA_Table::moveCopy($db, $view, $newname, $view, 'structure', $move, 'db_copy')) {                    $_error = true;                    break;                }            }            unset($GLOBALS['drop_if_exists']);            if (isset($temp_drop_if_exists)) {                // restore previous value                $GLOBALS['drop_if_exists'] = $temp_drop_if_exists;                unset($temp_drop_if_exists);            }        }        unset($view, $views);        // now that all tables exist, create all the accumulated constraints        if (! $_error && count($GLOBALS['sql_constraints_query_full_db']) > 0) {            PMA_DBI_select_db($newname);            foreach ($GLOBALS['sql_constraints_query_full_db'] as $one_query) {                PMA_DBI_query($one_query);            // and prepare to display them                $GLOBALS['sql_query'] .= "\n" . $one_query;            }            unset($GLOBALS['sql_constraints_query_full_db'], $one_query);        }        if (!PMA_DRIZZLE && PMA_MYSQL_INT_VERSION >= 50100) {            // here DELIMITER is not used because it's not part of the            // language; each statement is sent one by one            // to avoid selecting alternatively the current and new db            // we would need to modify the CREATE definitions to qualify            // the db name            $event_names = PMA_DBI_fetch_result('SELECT EVENT_NAME FROM information_schema.EVENTS WHERE EVENT_SCHEMA= \'' . PMA_sqlAddSlashes($db, true) . '\';');            if ($event_names) {                foreach ($event_names as $event_name) {                    PMA_DBI_select_db($db);                    $tmp_query = PMA_DBI_get_definition($db, 'EVENT', $event_name);                    // collect for later display                    $GLOBALS['sql_query'] .= "\n" . $tmp_query;                    PMA_DBI_select_db($newname);                    PMA_DBI_query($tmp_query);                }            }        }        // go back to current db, just in case        PMA_DBI_select_db($db);        // Duplicate the bookmarks for this db (done once for each db)        if (! $_error && $db != $newname) {            $get_fields = array('user', 'label', 'query');            $where_fields = array('dbase' => $db);            $new_fields = array('dbase' => $newname);            PMA_Table::duplicateInfo('bookmarkwork', 'bookmark', $get_fields,                $where_fields, $new_fields);        }        if (! $_error && $move) {            /**             * cleanup pmadb stuff for this db             */            include_once './libraries/relation_cleanup.lib.php';            PMA_relationsCleanupDatabase($db);            // if someday the RENAME DATABASE reappears, do not DROP            $local_query = 'DROP DATABASE ' . PMA_backquote($db) . ';';            $sql_query .= "\n" . $local_query;            PMA_DBI_query($local_query);            $message = PMA_Message::success(__('Database %s has been renamed to %s'));            $message->addParam($db);            $message->addParam($newname);        } elseif (! $_error) {            $message = PMA_Message::success(__('Database %s has been copied to %s'));            $message->addParam($db);            $message->addParam($newname);        }        $reload     = true;        /* Change database to be used */        if (! $_error && $move) {            $db = $newname;        } elseif (! $_error) {            if (isset($switch_to_new) && $switch_to_new == 'true') {                $GLOBALS['PMA_Config']->setCookie('pma_switch_to_new', 'true');                $db = $newname;            } else {                $GLOBALS['PMA_Config']->setCookie('pma_switch_to_new', '');            }        }        if ($_error && ! isset($message)) {            $message = PMA_Message::error();        }    }    /**     * Database has been successfully renamed/moved.  If in an Ajax request,     * generate the output with {@link PMA_ajaxResponse} and exit     */    if ( $GLOBALS['is_ajax_request'] == true) {        $extra_data['newname'] = $newname;        $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);        PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);    };}/** * Settings for relations stuff */$cfgRelation = PMA_getRelationsParam();/** * Check if comments were updated * (must be done before displaying the menu tabs) */if (isset($_REQUEST['comment'])) {    PMA_setDbComment($db, $comment);}/** * Prepares the tables list if the user where not redirected to this script * because there is no table in the database ($is_info is true) */if (empty($is_info)) {    include './libraries/db_common.inc.php';    $url_query .= '&amp;goto=db_operations.php';    // Gets the database structure    $sub_part = '_structure';    include './libraries/db_info.inc.php';    echo "\n";    if (isset($message)) {        PMA_showMessage($message, $sql_query);        unset($message);    }}$db_collation = PMA_getDbCollation($db);$is_information_schema = PMA_is_system_schema($db);if (!$is_information_schema) {    if ($cfgRelation['commwork']) {        /**         * database comment         */        ?>    <div class="operations_half_width">    <form method="post" action="db_operations.php">    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <fieldset>        <legend>        <?php        if ($cfg['PropertiesIconic']) {            echo '<img class="icon ic_b_comment" src="themes/dot.gif" alt="" />';        }        echo __('Database comment: ');        ?>        </legend>        <input type="text" name="comment" class="textfield" size="30"            value="<?php            echo htmlspecialchars(PMA_getDBComment($db)); ?>" />    </fieldset>    <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div>        <?php    }    ?>    <div class="operations_half_width">    <?php include './libraries/display_create_table.lib.php'; ?>    </div>    <?php    /**     * rename database     */if ($db != 'mysql') {    ?>        <div class="operations_half_width">        <form id="rename_db_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : ''); ?>method="post" action="db_operations.php"        onsubmit="return emptyFormElements(this, 'newname')">        <?php    if (isset($db_collation)) {        echo '<input type="hidden" name="db_collation" value="' . $db_collation            .'" />' . "\n";    }        ?>    <input type="hidden" name="what" value="data" />    <input type="hidden" name="db_rename" value="true" />    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <fieldset>        <legend>    <?php    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Rename database to') . ':';    ?>        </legend>        <input id="new_db_name" type="text" name="newname" size="30" class="textfield" value="" />    </fieldset>    <fieldset class="tblFooters">        <input id="rename_db_input" type="submit" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div><?php} // end if// Drop link if allowed// Don't even try to drop information_schema. You won't be able to. Believe me. You won't.// Don't allow to easily drop mysql database, RFE #1327514.if (($is_superuser || $GLOBALS['cfg']['AllowUserDropDatabase'])        && !$db_is_information_schema        && (PMA_DRIZZLE || $db != 'mysql')) {?><div class="operations_half_width"><fieldset class="caution"> <legend><?phpif ($cfg['PropertiesIconic']) {    echo PMA_getImage('b_deltbl.png');}echo __('Remove database');?></legend><ul><?php    $this_sql_query = 'DROP DATABASE ' . PMA_backquote($GLOBALS['db']);    $this_url_params = array(            'sql_query' => $this_sql_query,            'back' => 'db_operations.php',            'goto' => 'main.php',            'reload' => '1',            'purge' => '1',            'message_to_show' => sprintf(__('Database %s has been dropped.'), htmlspecialchars(PMA_backquote($db))),            'db' => null,        );    ?>        <li><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'id="drop_db_anchor"' : ''); ?>>            <?php echo __('Drop the database (DROP)'); ?></a>        <?php echo PMA_showMySQLDocu('SQL-Syntax', 'DROP_DATABASE'); ?>    </li></ul></fieldset></div><?php } ?>    <?php    /**     * Copy database     */    ?>        <div class="operations_half_width clearfloat">        <form id="copy_db_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : ''); ?>method="post" action="db_operations.php"        onsubmit="return emptyFormElements(this, 'newname')">    <?php    if (isset($db_collation)) {        echo '<input type="hidden" name="db_collation" value="' . $db_collation            .'" />' . "\n";    }    echo '<input type="hidden" name="db_copy" value="true" />' . "\n";    echo PMA_generate_common_hidden_inputs($db);    ?>    <fieldset>        <legend>    <?php    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Copy database to') . ':';    $drop_clause = 'DROP TABLE / DROP VIEW';    ?>        </legend>        <input type="text" name="newname" size="30" class="textfield" value="" /><br /><?php        $choices = array(            'structure' => __('Structure only'),            'data'      => __('Structure and data'),            'dataonly'  => __('Data only'));        PMA_display_html_radio('what', $choices, 'data', true);        unset($choices);?>        <input type="checkbox" name="create_database_before_copying" value="1"            id="checkbox_create_database_before_copying"            checked="checked" />        <label for="checkbox_create_database_before_copying">            <?php echo __('CREATE DATABASE before copying'); ?></label><br />        <input type="checkbox" name="drop_if_exists" value="true"            id="checkbox_drop" />        <label for="checkbox_drop"><?php echo sprintf(__('Add %s'), $drop_clause); ?></label><br />        <input type="checkbox" name="sql_auto_increment" value="1" checked="checked"            id="checkbox_auto_increment" />        <label for="checkbox_auto_increment">            <?php echo __('Add AUTO_INCREMENT value'); ?></label><br />        <input type="checkbox" name="add_constraints" value="1"            id="checkbox_constraints" />        <label for="checkbox_constraints">            <?php echo __('Add constraints'); ?></label><br />    <?php    unset($drop_clause);    if (isset($_COOKIE) && isset($_COOKIE['pma_switch_to_new'])      && $_COOKIE['pma_switch_to_new'] == 'true') {        $pma_switch_to_new = 'true';    }    ?>        <input type="checkbox" name="switch_to_new" value="true"            id="checkbox_switch"            <?php echo ((isset($pma_switch_to_new) && $pma_switch_to_new == 'true') ? ' checked="checked"' : ''); ?>            />        <label for="checkbox_switch"><?php echo __('Switch to copied database'); ?></label>    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="submit_copy" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div>    <?php    /**     * Change database charset     */    echo '<div class="operations_half_width"><form id="change_db_charset_form" ';    if ($GLOBALS['cfg']['AjaxEnable']) {        echo ' class="ajax" ';    }    echo 'method="post" action="./db_operations.php">'       . PMA_generate_common_hidden_inputs($db, $table)       . '<fieldset>' . "\n"       . '    <legend>';    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('s_asci.png');    }    echo '    <label for="select_db_collation">' . __('Collation') . ':</label>' . "\n"       . '    </legend>' . "\n"       . PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION,            'db_collation', 'select_db_collation', $db_collation, false, 3)       . '</fieldset>'       . '<fieldset class="tblFooters">'       . '    <input type="submit" name="submitcollation"'       . ' value="' . __('Go') . '" />' . "\n"       . '</fieldset>' . "\n"       . '</form></div>' . "\n";    if ($num_tables > 0      && ! $cfgRelation['allworks'] && $cfg['PmaNoRelation_DisableWarning'] == false) {        $message = PMA_Message::notice(__('The phpMyAdmin configuration storage has been deactivated. To find out why click %shere%s.'));        $message->addParam('<a href="' . $cfg['PmaAbsoluteUri'] . 'chk_rel.php?' . $url_query . '">', false);        $message->addParam('</a>', false);        /* Show error if user has configured something, notice elsewhere */        if (!empty($cfg['Servers'][$server]['pmadb'])) {            $message->isError(true);        }        echo '<div class="operations_full_width">';        $message->display();        echo '</div>';    } // end if} // end if (!$is_information_schema)// not sure about displaying the PDF dialog in case db is information_schemaif ($cfgRelation['pdfwork'] && $num_tables > 0) { ?>    <!-- Work on PDF Pages -->    <?php    // We only show this if we find something in the new pdf_pages table    $test_query = '         SELECT *           FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages']) . '          WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'';    $test_rs    = PMA_query_as_controluser($test_query, null, PMA_DBI_QUERY_STORE);    /*     * Export Relational Schema View     */    echo '<div class="operations_full_width"><fieldset><a href="schema_edit.php?' . $url_query . '">';    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Edit or export relational schema') . '</a></fieldset></div>';} // end if/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * navigation css file from theme Original * * @package PhpMyAdmin-theme * @subpackage Original */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON') && !defined('TESTSUITE')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : $_COOKIE['pma_fontsize']); ?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    margin:             0;    padding:            0.2em 0.2em 0.2em 0.2em;}a img {    border: 0;}a:link,a:visited,a:active {    text-decoration:    none;    color:              #0000FF;}ul {    margin:0;}form {    margin:             0;    padding:            0;    display:            inline;}select#select_server,select#lightm_db {    width:              100%;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}/******************************************************************************//* classes *//******************************************************************************//* specific elements */div#pmalogo {    <?php //better echo $GLOBALS['cfg']['logoBGC']; ?>    background-color: <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    padding:.3em;}div#recentTableList {    text-align: center;    margin-bottom: 0.5em;}div#recentTableList select {    width: 100%;}div#pmalogo,div#leftframelinks,div#databaseList {    text-align:         center;    margin-bottom:      0.5em;    padding-bottom:     0.5em;}ul#databaseList {    margin-bottom:      0.5em;    padding-bottom:     0.5em;    padding-<?php echo $left; ?>:     1.5em;    font-style: italic;}ul#databaseList a {    display: block;    font-style: normal;}div#navidbpageselector a,ul#databaseList a {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}ul#databaseList ul {    padding-left: 1em;    padding-right: 0;}ul#databaseList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}ul#databaseList li.selected a {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}div#leftframelinks .icon {    padding:            0;    margin:             0;}div#leftframelinks a img.icon {    margin:             2px;    border:             0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding:            0;}div#leftframelinks a:hover img {    background-color:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}/* serverlist */#body_leftFrame #list_server {    list-style-image: url(<?php echo $GLOBALS['cfg']['ThemePath']; ?>/original/img/s_host.png);    list-style-position: inside;    list-style-type: none;    margin: 0;    padding: 0;}#body_leftFrame #list_server li {    margin: 0;    padding: 0;    font-size:          80%;}div#left_tableList ul {    list-style-type:    none;    list-style-position: outside;    margin:             0;    padding:            0;    font-size:          80%;    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;}div#left_tableList ul ul {    font-size:          100%;}div#left_tableList a {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    none;}div#left_tableList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    underline;}div#left_tableList li {    margin:             0;    padding:            0;    white-space:        nowrap;}<?php if ($GLOBALS['cfg']['BrowseMarkerColor']) { ?>/* marked items */div#left_tableList > ul li.marked > a,div#left_tableList > ul li.marked {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['LeftPointerEnable']) { ?>div#left_tableList > ul li:hover > a,div#left_tableList > ul li:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}<?php } ?>div#left_tableList img {    padding:            0;    vertical-align:     middle;}div#left_tableList ul ul {    margin-<?php echo $left; ?>:        0;    padding-<?php echo $left; ?>:       0.1em;    border-<?php echo $left; ?>:        0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding-bottom:     0.1em;    border-bottom:      0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}/* for the servers list in navi panel */#serverinfo .item {    white-space:        nowrap;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}#serverinfo a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}#NavFilter {    display: none;}#clear_fast_filter {    background: white;    color: black;    cursor: pointer;    padding: 0;    margin: 3px 5px 0 -23px;    position: relative;    float: right;}#fast_filter {    width: 100%;    padding: 2px 0;    margin: 0;    border: 0;}#fast_filter.gray {    color: gray;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Main export hanling code * @package PhpMyAdmin *//** * Get the variables sent or posted to this script and a core script */require_once './libraries/common.inc.php';require_once './libraries/zip.lib.php';require_once './libraries/plugin_interface.lib.php';PMA_checkParameters(array('what', 'export_type'));// Scan plugins$export_list = PMA_getPlugins(    './libraries/export/',    array(        'export_type' => $export_type,        'single_table' => isset($single_table)));// Backward compatbility$type = $what;// Check export typeif (! isset($export_list[$type])) {    die(__('Bad type!'));}/** * valid compression methods */$compression_methods = array(    'zip',    'gzip',    'bzip2',);/** * init and variable checking */$compression = false;$onserver = false;$save_on_server = false;$buffer_needed = false;// Is it a quick or custom export?if ($_REQUEST['quick_or_custom'] == 'quick') {    $quick_export = true;} else {    $quick_export = false;}if ($_REQUEST['output_format'] == 'astext') {    $asfile = false;} else {    $asfile = true;    if (in_array($_REQUEST['compression'], $compression_methods)) {        $compression = $_REQUEST['compression'];        $buffer_needed = true;    }    if (($quick_export && !empty($_REQUEST['quick_export_onserver'])) || (!$quick_export && !empty($_REQUEST['onserver']))) {        if ($quick_export) {            $onserver = $_REQUEST['quick_export_onserver'];        } else {            $onserver = $_REQUEST['onserver'];        }        // Will we save dump on server?        $save_on_server = ! empty($cfg['SaveDir']) && $onserver;    }}// Does export require to be into file?if (isset($export_list[$type]['force_file']) && ! $asfile) {    $message = PMA_Message::error(__('Selected export type has to be saved in file!'));    include_once './libraries/header.inc.php';    if ($export_type == 'server') {        $active_page = 'server_export.php';        include './server_export.php';    } elseif ($export_type == 'database') {        $active_page = 'db_export.php';        include './db_export.php';    } else {        $active_page = 'tbl_export.php';        include './tbl_export.php';    }    exit();}// Generate error url and check for needed variablesif ($export_type == 'server') {    $err_url = 'server_export.php?' . PMA_generate_common_url();} elseif ($export_type == 'database' && strlen($db)) {    $err_url = 'db_export.php?' . PMA_generate_common_url($db);    // Check if we have something to export    if (isset($table_select)) {        $tables = $table_select;    } else {        $tables = array();    }} elseif ($export_type == 'table' && strlen($db) && strlen($table)) {    $err_url = 'tbl_export.php?' . PMA_generate_common_url($db, $table);} else {    die(__('Bad parameters!'));}// Get the functions specific to the export typerequire './libraries/export/' . PMA_securePath($type) . '.php';/** * Increase time limit for script execution and initializes some variables */@set_time_limit($cfg['ExecTimeLimit']);if (!empty($cfg['MemoryLimit'])) {    @ini_set('memory_limit', $cfg['MemoryLimit']);}// Start with empty buffer$dump_buffer = '';$dump_buffer_len = 0;// We send fake headers to avoid browser timeout when buffering$time_start = time();/** * Output handler for all exports, if needed buffering, it stores data into * $dump_buffer, otherwise it prints thems out. * * @param string  $line  the insert statement * @return  bool    Whether output succeeded */function PMA_exportOutputHandler($line){    global $time_start, $dump_buffer, $dump_buffer_len, $save_filename;    // Kanji encoding convert feature    if ($GLOBALS['output_kanji_conversion']) {        $line = PMA_kanji_str_conv($line, $GLOBALS['knjenc'], isset($GLOBALS['xkana']) ? $GLOBALS['xkana'] : '');    }    // If we have to buffer data, we will perform everything at once at the end    if ($GLOBALS['buffer_needed']) {        $dump_buffer .= $line;        if ($GLOBALS['onfly_compression']) {            $dump_buffer_len += strlen($line);            if ($dump_buffer_len > $GLOBALS['memory_limit']) {                if ($GLOBALS['output_charset_conversion']) {                    $dump_buffer = PMA_convert_string('utf-8', $GLOBALS['charset_of_file'], $dump_buffer);                }                // as bzipped                if ($GLOBALS['compression'] == 'bzip2'  && @function_exists('bzcompress')) {                    $dump_buffer = bzcompress($dump_buffer);                } elseif ($GLOBALS['compression'] == 'gzip' && @function_exists('gzencode')) {                    // as a gzipped file                    // without the optional parameter level because it bug                    $dump_buffer = gzencode($dump_buffer);                }                if ($GLOBALS['save_on_server']) {                    $write_result = @fwrite($GLOBALS['file_handle'], $dump_buffer);                    if (!$write_result || ($write_result != strlen($dump_buffer))) {                        $GLOBALS['message'] = PMA_Message::error(__('Insufficient space to save the file %s.'));                        $GLOBALS['message']->addParam($save_filename);                        return false;                    }                } else {                    echo $dump_buffer;                }                $dump_buffer = '';                $dump_buffer_len = 0;            }        } else {            $time_now = time();            if ($time_start >= $time_now + 30) {                $time_start = $time_now;                header('X-pmaPing: Pong');            } // end if        }    } else {        if ($GLOBALS['asfile']) {            if ($GLOBALS['output_charset_conversion']) {                $line = PMA_convert_string('utf-8', $GLOBALS['charset_of_file'], $line);            }            if ($GLOBALS['save_on_server'] && strlen($line) > 0) {                $write_result = @fwrite($GLOBALS['file_handle'], $line);                if (!$write_result || ($write_result != strlen($line))) {                    $GLOBALS['message'] = PMA_Message::error(__('Insufficient space to save the file %s.'));                    $GLOBALS['message']->addParam($save_filename);                    return false;                }                $time_now = time();                if ($time_start >= $time_now + 30) {                    $time_start = $time_now;                    header('X-pmaPing: Pong');                } // end if            } else {                // We export as file - output normally                echo $line;            }        } else {            // We export as html - replace special chars            echo htmlspecialchars($line);        }    }    return true;} // end of the 'PMA_exportOutputHandler()' function// Defines the default <CR><LF> format. For SQL always use \n as MySQL wants this on all platforms.if ($what == 'sql') {    $crlf = "\n";} else {    $crlf = PMA_whichCrlf();}$output_kanji_conversion = function_exists('PMA_kanji_str_conv') && $type != 'xls';// Do we need to convert charset?$output_charset_conversion = $asfile && $GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE    && isset($charset_of_file) && $charset_of_file != 'utf-8'    && $type != 'xls';// Use on the fly compression?$onfly_compression = $GLOBALS['cfg']['CompressOnFly'] && ($compression == 'gzip' || $compression == 'bzip2');if ($onfly_compression) {    $memory_limit = trim(@ini_get('memory_limit'));    // 2 MB as default    if (empty($memory_limit)) {        $memory_limit = 2 * 1024 * 1024;    }    if (strtolower(substr($memory_limit, -1)) == 'm') {        $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024;    } elseif (strtolower(substr($memory_limit, -1)) == 'k') {        $memory_limit = (int)substr($memory_limit, 0, -1) * 1024;    } elseif (strtolower(substr($memory_limit, -1)) == 'g') {        $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024 * 1024;    } else {        $memory_limit = (int)$memory_limit;    }    // Some of memory is needed for other thins and as treshold.    // Nijel: During export I had allocated (see memory_get_usage function)    //        approx 1.2MB so this comes from that.    if ($memory_limit > 1500000) {        $memory_limit -= 1500000;    }    // Some memory is needed for compression, assume 1/3    $memory_limit /= 8;}// Generate filename and mime type if neededif ($asfile) {    $pma_uri_parts = parse_url($cfg['PmaAbsoluteUri']);    if ($export_type == 'server') {        if (isset($remember_template)) {            $GLOBALS['PMA_Config']->setUserValue('pma_server_filename_template',                'Export/file_template_server', $filename_template);        }    } elseif ($export_type == 'database') {        if (isset($remember_template)) {            $GLOBALS['PMA_Config']->setUserValue('pma_db_filename_template',                'Export/file_template_database', $filename_template);        }    } else {        if (isset($remember_template)) {            $GLOBALS['PMA_Config']->setUserValue('pma_table_filename_template',                'Export/file_template_table', $filename_template);        }    }    $filename = PMA_expandUserString($filename_template);    $filename = PMA_sanitize_filename($filename);    // Grab basic dump extension and mime type    // Check if the user already added extension; get the substring where the extension would be if it was included    $extension_start_pos = strlen($filename) - strlen($export_list[$type]['extension']) - 1;    $user_extension = substr($filename, $extension_start_pos, strlen($filename));    $required_extension = "." . $export_list[$type]['extension'];    if (strtolower($user_extension) != $required_extension) {        $filename  .= $required_extension;    }    $mime_type  = $export_list[$type]['mime_type'];    // If dump is going to be compressed, set correct mime_type and add    // compression to extension    if ($compression == 'bzip2') {        $filename  .= '.bz2';        $mime_type = 'application/x-bzip2';    } elseif ($compression == 'gzip') {        $filename  .= '.gz';        $mime_type = 'application/x-gzip';    } elseif ($compression == 'zip') {        $filename  .= '.zip';        $mime_type = 'application/zip';    }}// Open file on server if neededif ($save_on_server) {    $save_filename = PMA_userDir($cfg['SaveDir']) . preg_replace('@[/\\\\]@', '_', $filename);    unset($message);    if (file_exists($save_filename) && ((!$quick_export && empty($onserverover)) || ($quick_export && $_REQUEST['quick_export_onserverover'] != 'saveitover'))) {        $message = PMA_Message::error(__('File %s already exists on server, change filename or check overwrite option.'));        $message->addParam($save_filename);    } else {        if (is_file($save_filename) && !is_writable($save_filename)) {            $message = PMA_Message::error(__('The web server does not have permission to save the file %s.'));            $message->addParam($save_filename);        } else {            if (!$file_handle = @fopen($save_filename, 'w')) {                $message = PMA_Message::error(__('The web server does not have permission to save the file %s.'));                $message->addParam($save_filename);            }        }    }    if (isset($message)) {        include_once './libraries/header.inc.php';        if ($export_type == 'server') {            $active_page = 'server_export.php';            include './server_export.php';        } elseif ($export_type == 'database') {            $active_page = 'db_export.php';            include './db_export.php';        } else {            $active_page = 'tbl_export.php';            include './tbl_export.php';        }        exit();    }}/** * Send headers depending on whether the user chose to download a dump file * or not */if (!$save_on_server) {    if ($asfile) {        // Download        // (avoid rewriting data containing HTML with anchors and forms;        // this was reported to happen under Plesk)        @ini_set('url_rewriter.tags', '');        $filename = PMA_sanitize_filename($filename);        PMA_download_header($filename, $mime_type);    } else {        // HTML        if ($export_type == 'database') {            $num_tables = count($tables);            if ($num_tables == 0) {                $message = PMA_Message::error(__('No tables found in database.'));                include_once './libraries/header.inc.php';                $active_page = 'db_export.php';                include './db_export.php';                exit();            }        }        $backup_cfgServer = $cfg['Server'];        include_once './libraries/header.inc.php';        $cfg['Server'] = $backup_cfgServer;        unset($backup_cfgServer);        echo "\n" . '<div align="' . $cell_align_left . '">' . "\n";        //echo '    <pre>' . "\n";        /**         * Displays a back button with all the $_REQUEST data in the URL (store in a variable to also display after the textarea)         */         $back_button = '<p>[ <a href="';        if ($export_type == 'server') {           $back_button .= 'server_export.php?' . PMA_generate_common_url();         } elseif ($export_type == 'database') {            $back_button .= 'db_export.php?' . PMA_generate_common_url($db);        } else {            $back_button .= 'tbl_export.php?' . PMA_generate_common_url($db, $table);        }        // Convert the multiple select elements from an array to a string        if ($export_type == 'server' && isset($_REQUEST['db_select'])) {            $_REQUEST['db_select'] = implode(",", $_REQUEST['db_select']);        } elseif ($export_type == 'database' && isset($_REQUEST['table_select'])) {            $_REQUEST['table_select'] = implode(",", $_REQUEST['table_select']);        }        foreach ($_REQUEST as $name => $value) {            $back_button .= '&' . urlencode($name) . '=' . urlencode($value);        }        $back_button .= '&repopulate=1">Back</a> ]</p>';        echo $back_button;        echo '    <form name="nofunction">' . "\n"           // remove auto-select for now: there is no way to select           // only a part of the text; anyway, it should obey           // $cfg['TextareaAutoSelect']           //. '        <textarea name="sqldump" cols="50" rows="30" onclick="this.select();" id="textSQLDUMP" wrap="OFF">' . "\n";           . '        <textarea name="sqldump" cols="50" rows="30" id="textSQLDUMP" wrap="OFF">' . "\n";    } // end download}// Fake loop just to allow skip of remain of this code by break, I'd really// need exceptions here :-)do {    // Add possibly some comments to export    if (!PMA_exportHeader()) {        break;    }    // Will we need relation & co. setup?    $do_relation = isset($GLOBALS[$what . '_relation']);    $do_comments = isset($GLOBALS[$what . '_include_comments']);    $do_mime     = isset($GLOBALS[$what . '_mime']);    if ($do_relation || $do_comments || $do_mime) {        $cfgRelation = PMA_getRelationsParam();    }    if ($do_mime) {        include_once './libraries/transformations.lib.php';    }    // Include dates in export?    $do_dates   = isset($GLOBALS[$what . '_dates']);    /**     * Builds the dump     */    // Gets the number of tables if a dump of a database has been required    if ($export_type == 'server') {        if (isset($db_select)) {            $tmp_select = implode($db_select, '|');            $tmp_select = '|' . $tmp_select . '|';        }        // Walk over databases        foreach ($GLOBALS['pma']->databases as $current_db) {            if ((isset($tmp_select) && strpos(' ' . $tmp_select, '|' . $current_db . '|'))                || ! isset($tmp_select)) {                if (!PMA_exportDBHeader($current_db)) {                    break 2;                }                if (!PMA_exportDBCreate($current_db)) {                    break 2;                }                if (function_exists('PMA_exportRoutines') && strpos($GLOBALS['sql_structure_or_data'], 'structure') !== false && isset($GLOBALS['sql_procedure_function'])) {                    PMA_exportRoutines($current_db);                }                $tables = PMA_DBI_get_tables($current_db);                $views = array();                foreach ($tables as $table) {                    // if this is a view, collect it for later; views must be exported                    // after the tables                    $is_view = PMA_Table::isView($current_db, $table);                    if ($is_view) {                        $views[] = $table;                    }                    if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                        // for a view, export a stand-in definition of the table                        // to resolve view dependencies                        if (!PMA_exportStructure($current_db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, $is_view ? 'stand_in' : 'create_table', $export_type)) {                            break 3;                        }                    }                    // if this is a view or a merge table, don't export data                    if (($GLOBALS[$what . '_structure_or_data'] == 'data' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') && !($is_view || PMA_Table::isMerge($current_db, $table))) {                        $local_query  = 'SELECT * FROM ' . PMA_backquote($current_db) . '.' . PMA_backquote($table);                        if (!PMA_exportData($current_db, $table, $crlf, $err_url, $local_query)) {                            break 3;                        }                    }                    // now export the triggers (needs to be done after the data because                    // triggers can modify already imported tables)                    if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                        if (!PMA_exportStructure($current_db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'triggers', $export_type)) {                            break 2;                        }                    }                }                foreach ($views as $view) {                    // no data export for a view                    if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                        if (!PMA_exportStructure($current_db, $view, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'create_view', $export_type)) {                            break 3;                        }                    }                }                if (!PMA_exportDBFooter($current_db)) {                    break 2;                }            }        }    } elseif ($export_type == 'database') {        if (!PMA_exportDBHeader($db)) {            break;        }        if (function_exists('PMA_exportRoutines') && strpos($GLOBALS['sql_structure_or_data'], 'structure') !== false && isset($GLOBALS['sql_procedure_function'])) {            PMA_exportRoutines($db);        }        $i = 0;        $views = array();        // $tables contains the choices from the user (via $table_select)        foreach ($tables as $table) {            // if this is a view, collect it for later; views must be exported after            // the tables            $is_view = PMA_Table::isView($db, $table);            if ($is_view) {                $views[] = $table;            }            if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                // for a view, export a stand-in definition of the table                // to resolve view dependencies                if (!PMA_exportStructure($db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, $is_view ? 'stand_in' : 'create_table', $export_type)) {                    break 2;                }            }            // if this is a view or a merge table, don't export data            if (($GLOBALS[$what . '_structure_or_data'] == 'data' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') && !($is_view || PMA_Table::isMerge($db, $table))) {                $local_query  = 'SELECT * FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table);                if (!PMA_exportData($db, $table, $crlf, $err_url, $local_query)) {                    break 2;                }            }            // now export the triggers (needs to be done after the data because            // triggers can modify already imported tables)            if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                if (!PMA_exportStructure($db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'triggers', $export_type)) {                    break 2;                }            }        }        foreach ($views as $view) {            // no data export for a view            if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {                if (!PMA_exportStructure($db, $view, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'create_view', $export_type)) {                    break 2;                }            }        }        if (!PMA_exportDBFooter($db)) {            break;        }    } else {        if (!PMA_exportDBHeader($db)) {            break;        }        // We export just one table        // $allrows comes from the form when "Dump all rows" has been selected        if ($allrows == '0' && $limit_to > 0 && $limit_from >= 0) {            $add_query  = ' LIMIT '                        . (($limit_from > 0) ? $limit_from . ', ' : '')                        . $limit_to;        } else {            $add_query  = '';        }        $is_view = PMA_Table::isView($db, $table);        if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {            if (!PMA_exportStructure($db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, $is_view ? 'create_view' : 'create_table', $export_type)) {                break;            }        }        // If this is an export of a single view, we have to export data;        // for example, a PDF report        // if it is a merge table, no data is exported        if (($GLOBALS[$what . '_structure_or_data'] == 'data' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') && ! PMA_Table::isMerge($db, $table)) {            if (!empty($sql_query)) {                // only preg_replace if needed                if (!empty($add_query)) {                    // remove trailing semicolon before adding a LIMIT                    $sql_query = preg_replace('%;\s*$%', '', $sql_query);                }                $local_query = $sql_query . $add_query;                PMA_DBI_select_db($db);            } else {                $local_query  = 'SELECT * FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table) . $add_query;            }            if (!PMA_exportData($db, $table, $crlf, $err_url, $local_query)) {                break;            }        }        // now export the triggers (needs to be done after the data because        // triggers can modify already imported tables)        if ($GLOBALS[$what . '_structure_or_data'] == 'structure' || $GLOBALS[$what . '_structure_or_data'] == 'structure_and_data') {            if (!PMA_exportStructure($db, $table, $crlf, $err_url, $do_relation, $do_comments, $do_mime, $do_dates, 'triggers', $export_type)) {                break 2;            }        }        if (!PMA_exportDBFooter($db)) {            break;        }    }    if (!PMA_exportFooter()) {        break;    }} while (false);// End of fake loopif ($save_on_server && isset($message)) {    include_once './libraries/header.inc.php';    if ($export_type == 'server') {        $active_page = 'server_export.php';        include './server_export.php';    } elseif ($export_type == 'database') {        $active_page = 'db_export.php';        include './db_export.php';    } else {        $active_page = 'tbl_export.php';        include './tbl_export.php';    }    exit();}/** * Send the dump as a file... */if (!empty($asfile)) {    // Convert the charset if required.    if ($output_charset_conversion) {        $dump_buffer = PMA_convert_string('utf-8', $GLOBALS['charset_of_file'], $dump_buffer);    }    // Do the compression    // 1. as a zipped file    if ($compression == 'zip') {        if (@function_exists('gzcompress')) {            $zipfile = new zipfile();            $zipfile -> addFile($dump_buffer, substr($filename, 0, -4));            $dump_buffer = $zipfile -> file();        }    } elseif ($compression == 'bzip2') {        // 2. as a bzipped file        if (@function_exists('bzcompress')) {            $dump_buffer = bzcompress($dump_buffer);        }    } elseif ($compression == 'gzip') {        // 3. as a gzipped file        if (@function_exists('gzencode') && !@ini_get('zlib.output_compression')) {            // without the optional parameter level because it bug            $dump_buffer = gzencode($dump_buffer);        }    }    /* If ve saved on server, we have to close file now */    if ($save_on_server) {        $write_result = @fwrite($file_handle, $dump_buffer);        fclose($file_handle);        if (strlen($dump_buffer) !=0 && (!$write_result || ($write_result != strlen($dump_buffer)))) {            $message = new PMA_Message(__('Insufficient space to save the file %s.'), PMA_Message::ERROR, $save_filename);        } else {            $message = new PMA_Message(__('Dump has been saved to file %s.'), PMA_Message::SUCCESS, $save_filename);        }        include_once './libraries/header.inc.php';        if ($export_type == 'server') {            $active_page = 'server_export.php';            include_once './server_export.php';        } elseif ($export_type == 'database') {            $active_page = 'db_export.php';            include_once './db_export.php';        } else {            $active_page = 'tbl_export.php';            include_once './tbl_export.php';        }        exit();    } else {        echo $dump_buffer;    }} else {    /**     * Displays the dump...     *     * Close the html tags and add the footers if dump is displayed on screen     */    echo '</textarea>' . "\n"       . '    </form>' . "\n";    echo $back_button;    echo "\n";    echo '</div>' . "\n";    echo "\n";?><script type="text/javascript">//<![CDATA[    var bodyWidth=null; var bodyHeight=null;    if (document.getElementById('textSQLDUMP')) {        bodyWidth  = self.innerWidth;        bodyHeight = self.innerHeight;        if (!bodyWidth && !bodyHeight) {            if (document.compatMode && document.compatMode == "BackCompat") {                bodyWidth  = document.body.clientWidth;                bodyHeight = document.body.clientHeight;            } else if (document.compatMode && document.compatMode == "CSS1Compat") {                bodyWidth  = document.documentElement.clientWidth;                bodyHeight = document.documentElement.clientHeight;            }        }        document.getElementById('textSQLDUMP').style.width=(bodyWidth-50) + 'px';        document.getElementById('textSQLDUMP').style.height=(bodyHeight-100) + 'px';    }//]]></script><?php    include './libraries/footer.inc.php';} // end if?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (! PMA_cacheExists('mysql_charsets', true)) {    $sql = PMA_DRIZZLE        ? 'SELECT * FROM data_dictionary.CHARACTER_SETS'        : 'SELECT * FROM information_schema.CHARACTER_SETS';    $res = PMA_DBI_query($sql);    $mysql_charsets = array();    while ($row = PMA_DBI_fetch_assoc($res)) {        $mysql_charsets[] = $row['CHARACTER_SET_NAME'];        // never used        //$mysql_charsets_maxlen[$row['Charset']] = $row['Maxlen'];        $mysql_charsets_descriptions[$row['CHARACTER_SET_NAME']] = $row['DESCRIPTION'];    }    PMA_DBI_free_result($res);    sort($mysql_charsets, SORT_STRING);    $mysql_collations = array_flip($mysql_charsets);    $mysql_default_collations = $mysql_collations_flat = $mysql_charsets_available = $mysql_collations_available = array();    $sql = PMA_DRIZZLE        ? 'SELECT * FROM data_dictionary.COLLATIONS'        : 'SELECT * FROM information_schema.COLLATIONS';    $res = PMA_DBI_query($sql);    while ($row = PMA_DBI_fetch_assoc($res)) {        if (! is_array($mysql_collations[$row['CHARACTER_SET_NAME']])) {            $mysql_collations[$row['CHARACTER_SET_NAME']] = array($row['COLLATION_NAME']);        } else {            $mysql_collations[$row['CHARACTER_SET_NAME']][] = $row['COLLATION_NAME'];        }        $mysql_collations_flat[] = $row['COLLATION_NAME'];        if ($row['IS_DEFAULT'] == 'Yes' || $row['IS_DEFAULT'] == '1') {            $mysql_default_collations[$row['CHARACTER_SET_NAME']] = $row['COLLATION_NAME'];        }        //$mysql_collations_available[$row['Collation']] = ! isset($row['Compiled']) || $row['Compiled'] == 'Yes';        $mysql_collations_available[$row['COLLATION_NAME']] = true;        $mysql_charsets_available[$row['CHARACTER_SET_NAME']]            = !empty($mysql_charsets_available[$row['CHARACTER_SET_NAME']])            || !empty($mysql_collations_available[$row['COLLATION_NAME']]);    }    PMA_DBI_free_result($res);    unset($res, $row);    if (PMA_DRIZZLE && isset($mysql_collations['utf8_general_ci']) && isset($mysql_collations['utf8'])) {        $mysql_collations['utf8'] = $mysql_collations['utf8_general_ci'];        $mysql_default_collations['utf8'] = $mysql_default_collations['utf8_general_ci'];        $mysql_charsets_available['utf8'] = $mysql_charsets_available['utf8_general_ci'];        unset($mysql_collations['utf8_general_ci'], $mysql_default_collations['utf8_general_ci'],            $mysql_charsets_available['utf8_general_ci']);    }    sort($mysql_collations_flat, SORT_STRING);    foreach ($mysql_collations AS $key => $value) {        sort($mysql_collations[$key], SORT_STRING);        reset($mysql_collations[$key]);    }    unset($key, $value);    PMA_cacheSet('mysql_charsets', $GLOBALS['mysql_charsets'], true);    PMA_cacheSet('mysql_charsets_descriptions', $GLOBALS['mysql_charsets_descriptions'], true);    PMA_cacheSet('mysql_charsets_available', $GLOBALS['mysql_charsets_available'], true);    PMA_cacheSet('mysql_collations', $GLOBALS['mysql_collations'], true);    PMA_cacheSet('mysql_default_collations', $GLOBALS['mysql_default_collations'], true);    PMA_cacheSet('mysql_collations_flat', $GLOBALS['mysql_collations_flat'], true);    PMA_cacheSet('mysql_collations_available', $GLOBALS['mysql_collations_available'], true);} else {    $GLOBALS['mysql_charsets']                  = PMA_cacheGet('mysql_charsets', true);    $GLOBALS['mysql_charsets_descriptions']     = PMA_cacheGet('mysql_charsets_descriptions', true);    $GLOBALS['mysql_charsets_available']        = PMA_cacheGet('mysql_charsets_available', true);    $GLOBALS['mysql_collations']                = PMA_cacheGet('mysql_collations', true);    $GLOBALS['mysql_default_collations']        = PMA_cacheGet('mysql_default_collations', true);    $GLOBALS['mysql_collations_flat']           = PMA_cacheGet('mysql_collations_flat', true);    $GLOBALS['mysql_collations_available']      = PMA_cacheGet('mysql_collations_available', true);}define('PMA_CSDROPDOWN_COLLATION', 0);define('PMA_CSDROPDOWN_CHARSET',   1);function PMA_generateCharsetDropdownBox($type = PMA_CSDROPDOWN_COLLATION,    $name = null, $id = null, $default = null, $label = true, $indent = 0,    $submitOnChange = false, $displayUnavailable = false){    global $mysql_charsets, $mysql_charsets_descriptions,        $mysql_charsets_available, $mysql_collations, $mysql_collations_available;    if (empty($name)) {        if ($type == PMA_CSDROPDOWN_COLLATION) {            $name = 'collation';        } else {            $name = 'character_set';        }    }    $return_str  = '<select xml:lang="en" dir="ltr" name="'        . htmlspecialchars($name) . '"'        . (empty($id) ? '' : ' id="' . htmlspecialchars($id) . '"')        . ($submitOnChange ? ' class="autosubmit"' : '') . '>' . "\n";    if ($label) {        $return_str .= '<option value="">'            . ($type == PMA_CSDROPDOWN_COLLATION ? __('Collation') : __('Charset'))            . '</option>' . "\n";    }    $return_str .= '<option value=""></option>' . "\n";    foreach ($mysql_charsets as $current_charset) {        if (!$mysql_charsets_available[$current_charset]) {            continue;        }        $current_cs_descr            = empty($mysql_charsets_descriptions[$current_charset])            ? $current_charset            : $mysql_charsets_descriptions[$current_charset];        if ($type == PMA_CSDROPDOWN_COLLATION) {            $return_str .= '<optgroup label="' . $current_charset                . '" title="' . $current_cs_descr . '">' . "\n";            foreach ($mysql_collations[$current_charset] as $current_collation) {                if (!$mysql_collations_available[$current_collation]) {                    continue;                }                $return_str .= '<option value="' . $current_collation                    . '" title="' . PMA_getCollationDescr($current_collation) . '"'                    . ($default == $current_collation ? ' selected="selected"' : '') . '>'                    . $current_collation . '</option>' . "\n";            }            $return_str .= '</optgroup>' . "\n";        } else {            $return_str .= '<option value="' . $current_charset                . '" title="' . $current_cs_descr . '"'                . ($default == $current_charset ? ' selected="selected"' : '') . '>'                . $current_charset . '</option>' . "\n";        }    }    $return_str .= '</select>' . "\n";    return $return_str;}function PMA_generateCharsetQueryPart($collation){    if (!PMA_DRIZZLE) {        list($charset) = explode('_', $collation);        return ' CHARACTER SET ' . $charset . ($charset == $collation ? '' : ' COLLATE ' . $collation);    } else {        return ' COLLATE ' . $collation;    }}/** * returns collation of given db * * @param string  $db     name of db * @return  string  collation of $db */function PMA_getDbCollation($db){    if (PMA_is_system_schema($db)) {        // We don't have to check the collation of the virtual        // information_schema database: We know it!        return 'utf8_general_ci';    }    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        // this is slow with thousands of databases        $sql = PMA_DRIZZLE            ? 'SELECT DEFAULT_COLLATION_NAME FROM data_dictionary.SCHEMAS WHERE SCHEMA_NAME = \'' . PMA_sqlAddSlashes($db) . '\' LIMIT 1'            : 'SELECT DEFAULT_COLLATION_NAME FROM information_schema.SCHEMATA WHERE SCHEMA_NAME = \'' . PMA_sqlAddSlashes($db) . '\' LIMIT 1';        return PMA_DBI_fetch_value($sql);    } else {        PMA_DBI_select_db($db);        $return = PMA_DBI_fetch_value('SHOW VARIABLES LIKE \'collation_database\'', 0, 1);        if ($db !== $GLOBALS['db']) {            PMA_DBI_select_db($GLOBALS['db']);        }        return $return;    }}/** * returns default server collation from show variables * * @return  string  $server_collation */function PMA_getServerCollation(){    return PMA_DBI_fetch_value(        'SHOW VARIABLES LIKE \'collation_server\'', 0, 1);}/** * returns description for given collation * * * @param string  $collation  MySQL collation string * @return  string  collation description */function PMA_getCollationDescr($collation){    if ($collation == 'binary') {        return __('Binary');    }    $parts = explode('_', $collation);    if (count($parts) == 1) {        $parts[1] = 'general';    } elseif ($parts[1] == 'ci' || $parts[1] == 'cs') {        $parts[2] = $parts[1];        $parts[1] = 'general';    }    $descr = '';    switch ($parts[1]) {    case 'bulgarian':        $descr = __('Bulgarian');        break;    case 'chinese':        if ($parts[0] == 'gb2312' || $parts[0] == 'gbk') {            $descr = __('Simplified Chinese');        } elseif ($parts[0] == 'big5') {            $descr = __('Traditional Chinese');        }        break;    case 'ci':        $descr = __('case-insensitive');        break;    case 'cs':        $descr = __('case-sensitive');        break;    case 'croatian':        $descr = __('Croatian');        break;    case 'czech':        $descr = __('Czech');        break;    case 'danish':        $descr = __('Danish');        break;    case 'english':        $descr = __('English');        break;    case 'esperanto':        $descr = __('Esperanto');        break;    case 'estonian':        $descr = __('Estonian');        break;    case 'german1':        $descr = __('German') . ' (' . __('dictionary') . ')';        break;    case 'german2':        $descr = __('German') . ' (' . __('phone book') . ')';        break;    case 'hungarian':        $descr = __('Hungarian');        break;    case 'icelandic':        $descr = __('Icelandic');        break;    case 'japanese':        $descr = __('Japanese');        break;    case 'latvian':        $descr = __('Latvian');        break;    case 'lithuanian':        $descr = __('Lithuanian');        break;    case 'korean':        $descr = __('Korean');        break;    case 'persian':        $descr = __('Persian');        break;    case 'polish':        $descr = __('Polish');        break;    case 'roman':        $descr = __('West European');        break;    case 'romanian':        $descr = __('Romanian');        break;    case 'slovak':        $descr = __('Slovak');        break;    case 'slovenian':        $descr = __('Slovenian');        break;    case 'spanish':        $descr = __('Spanish');        break;    case 'spanish2':        $descr = __('Traditional Spanish');        break;    case 'swedish':        $descr = __('Swedish');        break;    case 'thai':        $descr = __('Thai');        break;    case 'turkish':        $descr = __('Turkish');        break;    case 'ukrainian':        $descr = __('Ukrainian');        break;    case 'unicode':        $descr = __('Unicode') . ' (' . __('multilingual') . ')';        break;    case 'bin':        $is_bin = true;    case 'general':        switch ($parts[0]) {        // Unicode charsets        case 'ucs2':        case 'utf8':            $descr = __('Unicode') . ' (' . __('multilingual') . ')';            break;        // West European charsets        case 'ascii':        case 'cp850':        case 'dec8':        case 'hp8':        case 'latin1':        case 'macroman':            $descr = __('West European') . ' (' . __('multilingual') . ')';            break;        // Central European charsets        case 'cp1250':        case 'cp852':        case 'latin2':        case 'macce':            $descr = __('Central European') . ' (' . __('multilingual') . ')';            break;        // Russian charsets        case 'cp866':        case 'koi8r':            $descr = __('Russian');            break;        // Simplified Chinese charsets        case 'gb2312':        case 'gbk':            $descr = __('Simplified Chinese');            break;        // Japanese charsets        case 'sjis':        case 'ujis':        case 'cp932':        case 'eucjpms':            $descr = __('Japanese');            break;        // Baltic charsets        case 'cp1257':        case 'latin7':            $descr = __('Baltic') . ' (' . __('multilingual') . ')';            break;        // Other        case 'armscii8':        case 'armscii':            $descr = __('Armenian');            break;        case 'big5':            $descr = __('Traditional Chinese');            break;        case 'cp1251':            $descr = __('Cyrillic') . ' (' . __('multilingual') . ')';            break;        case 'cp1256':            $descr = __('Arabic');            break;        case 'euckr':            $descr = __('Korean');            break;        case 'hebrew':            $descr = __('Hebrew');            break;        case 'geostd8':            $descr = __('Georgian');            break;        case 'greek':            $descr = __('Greek');            break;        case 'keybcs2':            $descr = __('Czech-Slovak');            break;        case 'koi8u':            $descr = __('Ukrainian');            break;        case 'latin5':            $descr = __('Turkish');            break;        case 'swe7':            $descr = __('Swedish');            break;        case 'tis620':            $descr = __('Thai');            break;        default:            $descr = __('unknown');            break;        }        if (!empty($is_bin)) {            $descr .= ', ' . __('Binary');        }        break;    default: $descr = __('unknown');    }    if (!empty($parts[2])) {        if ($parts[2] == 'ci') {            $descr .= ', ' . __('case-insensitive');        } elseif ($parts[2] == 'cs') {            $descr .= ', ' . __('case-sensitive');        }    }    return $descr;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * the navigation frame - displays server, db and table selection tree * * @package PhpMyAdmin *//** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';/** * finish and cleanup navigation.php script execution, only to be used in navigation.php * * @access private */function PMA_exitNavigationFrame(){    echo '</body></html>';    exit;}require_once './libraries/common.lib.php';require_once './libraries/RecentTable.class.php';/** * Check if it is an ajax request to reload the recent tables list. */if ($GLOBALS['is_ajax_request'] && $_REQUEST['recent_table']) {    PMA_ajaxResponse('', true, array('options' => PMA_RecentTable::getInstance()->getHtmlSelectOption()) );}// keep the offset of the db list in session before closing itif (! isset($_SESSION['tmp_user_values']['navi_limit_offset'])) {    $_SESSION['tmp_user_values']['navi_limit_offset'] = 0;}if (! isset($_SESSION['tmp_user_values']['table_limit_offset']) || $_SESSION['tmp_user_values']['table_limit_offset_db'] != $db) {    $_SESSION['tmp_user_values']['table_limit_offset'] = 0;    $_SESSION['tmp_user_values']['table_limit_offset_db'] = $db;}if (isset($_REQUEST['pos'])) {    if (isset($_REQUEST['tpos'])) {        $_SESSION['tmp_user_values']['table_limit_offset'] = (int) $_REQUEST['pos'];    } else {        $_SESSION['tmp_user_values']['navi_limit_offset'] = (int) $_REQUEST['pos'];    }}$pos = $_SESSION['tmp_user_values']['navi_limit_offset'];$tpos = $_SESSION['tmp_user_values']['table_limit_offset'];// free the session file, for the other frames to be loaded// but only if debugging is not enabledif (empty($_SESSION['debug'])) {    session_write_close();}/** * the output compression library */require_once './libraries/ob.lib.php';PMA_outBufferPre();/* * selects the database if there is only one on current server */if ($GLOBALS['server'] && ! strlen($GLOBALS['db'])) {    $GLOBALS['db'] = $GLOBALS['pma']->databases->getSingleItem();}$db_start = $GLOBALS['db'];/** * the relation settings */$cfgRelation = PMA_getRelationsParam();/** * For re-usability, moved http-headers to a seperate file. * It can now be included by libraries/header.inc.php, querywindow.php. */require_once './libraries/header_http.inc.php';/* * Displays the frame */// xml declaration moves IE into quirks mode, making much trouble with CSS/* echo '<?xml version="1.0" encoding="utf-8"?>'; */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"    xml:lang="<?php echo $available_languages[$lang][1]; ?>"    lang="<?php echo $available_languages[$lang][1]; ?>"    dir="<?php echo $GLOBALS['text_dir']; ?>"><head>    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <title>phpMyAdmin</title>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <base target="frame_content" />    <link rel="stylesheet" type="text/css"        href="phpmyadmin.css.php?<?php echo PMA_generate_common_url('', ''); ?>&amp;js_frame=left&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" />    <?php    echo PMA_includeJS('jquery/jquery-1.6.2.js');    echo PMA_includeJS('jquery/jquery-ui-1.8.16.custom.js');    echo PMA_includeJS('jquery/jquery.qtip-1.0.0-rc3.js');    echo PMA_includeJS('navigation.js');    echo PMA_includeJS('functions.js');    echo PMA_includeJS('messages.php');    // Append the theme id to this url to invalidate the cache on a theme change    echo PMA_includeJS('get_image.js.php?theme=' . urlencode($_SESSION['PMA_Theme']->getId()));    ?>    <script type="text/javascript">    // <![CDATA[    // INIT PMA_setFrameSize    var onloadCnt = 0;    var onLoadHandler = window.onload;    var resizeHandler = window.onresize;    window.document.onresize  = resizeHandler;    window.onload = function() {        if (onloadCnt == 0) {            if (typeof(onLoadHandler) == "function") {                onLoadHandler();            }            if (typeof(PMA_setFrameSize) != 'undefined' && typeof(PMA_setFrameSize) == 'function') {                PMA_setFrameSize();            }            onloadCnt++;        }    };    window.onresize = function() {        if (typeof(resizeHandler) == "function") {            resizeHandler();        }        if (typeof(PMA_saveFrameSize) != 'undefined' && typeof(PMA_saveFrameSize) == 'function') {            PMA_saveFrameSize();        }    };    // ]]>    </script>    <?php    /*     * remove horizontal scroll bar bug in IE 6 by forcing a vertical scroll bar     */    ?>    <!--[if IE 6]>    <style type="text/css">    /* <![CDATA[ */    html {        overflow-y: scroll;    }    /* ]]> */    </style>    <![endif]--></head><body id="body_leftFrame"><?phprequire './libraries/navigation_header.inc.php';// display recently used tablesif ($GLOBALS['cfg']['LeftRecentTable'] > 0) {    echo '<div id="recentTableList">' . "\n"        .'<form method="post" action="index.php" target="_parent">' . "\n"        .PMA_generate_common_hidden_inputs() . "\n"        .PMA_RecentTable::getInstance()->getHtmlSelect()        .'<noscript>' . "\n"        .'<input type="submit" name="Go" value="' . __('Go') . '" />' . "\n"        .'</noscript>' . "\n"        .'</form>' . "\n"        .'</div>' . "\n";}if (! $GLOBALS['server']) {    // no server selected    PMA_exitNavigationFrame();} elseif (! count($GLOBALS['pma']->databases)) {    // no database available, so we break here    echo '<p>' . __('No databases') . '</p>';    PMA_exitNavigationFrame();} elseif ($GLOBALS['cfg']['LeftFrameLight'] && count($GLOBALS['pma']->databases) > 1) {    $list = $cfg['DisplayDatabasesList'];    if ($list === 'auto') {        if (empty($GLOBALS['db'])) {            $list = true;        } else {            $list = false;        }    }    if (!$list) {        // more than one database available and LeftFrameLight is true        // display db selectbox        //        // Light mode -> beginning of the select combo for databases        // Note: When javascript is active, the frameset will be changed from        // within navigation.php. With no JS (<noscript>) the whole frameset will        // be rebuilt with the new target frame.    ?>    <div id="databaseList">    <form method="post" action="index.php" target="_parent" id="left">    <?php        echo PMA_generate_common_hidden_inputs() . "\n";        echo $GLOBALS['pma']->databases->getHtmlSelectGrouped(true, $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']) . "\n";        echo '<noscript>' . "\n"            .'<input type="submit" name="Go" value="' . __('Go') . '" />' . "\n"            .'</noscript>' . "\n"            .'</form>' . "\n"            . '</div>' . "\n";    } else {        echo $GLOBALS['pma']->databases->getHtmlListGrouped(true, $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']) . "\n";    }    $_url_params = array('pos' => $pos);    PMA_listNavigator(count($GLOBALS['pma']->databases), $pos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxDbList']);}?><div id="left_tableList"><?php// Don't display expansible/collapsible database info if:// 1. $GLOBALS['server'] == 0 (no server selected)//    This is the case when there are multiple servers and//    '$GLOBALS['cfg']['ServerDefault'] = 0' is set. In that case, we want the welcome//    screen to appear with no database info displayed.// 2. there is only one database available (ie either only one database exists//    or $GLOBALS['cfg']['Servers']['only_db'] is defined and is not an array)//    In this case, the database should not be collapsible/expandable$img_plus = PMA_getImage('b_plus.png', '+', array('id' => 'el%dImg'));$img_minus = PMA_getImage('b_minus.png', '-', array('id' => 'el%dImg'));$href_left = '<a onclick="if (toggle(\'%d\')) return false;"'    .' href="navigation.php?%s" target="_self">';$element_counter = 0;if ($GLOBALS['cfg']['LeftFrameLight'] && strlen($GLOBALS['db'])) {    $table_list = PMA_getTableList($GLOBALS['db'], null, $tpos, $cfg['MaxTableList']);    $table_count = PMA_getTableCount($GLOBALS['db']);    // show selected databasename as link to DefaultTabDatabase-page    // with table count in ()    $common_url_query = PMA_generate_common_url($GLOBALS['db']);    $db_tooltip = '';    if ($GLOBALS['cfg']['ShowTooltip']      && $GLOBALS['cfgRelation']['commwork']) {        $_db_tooltip = PMA_getDbComment($GLOBALS['db']);        if ($_db_tooltip) {            $db_tooltip = $_db_tooltip;        }    }    $disp_name  = $GLOBALS['db'];    if ($db_tooltip && $GLOBALS['cfg']['ShowTooltipAliasDB']) {        $disp_name      = $db_tooltip;        $disp_name_cut  = $db_tooltip;        $db_tooltip     = $GLOBALS['db'];    }    if ($table_count >= $GLOBALS['cfg']['LeftDisplayTableFilterMinimum']) {        ?>        <span id="NavFilter">        <span id="clear_fast_filter" title="<?php echo __('Clear'); ?>">X</span>            <input type="text" class="gray" name="fast_filter" id="fast_filter" title="<?php echo __('Filter tables by name'); ?>" value="<?php echo __('Filter tables by name'); ?>" />        </span>        <?php    }    /**     * This helps reducing the navi panel size; in the right panel,     * user can find a navigator to page thru all tables.     *     */    if (! empty($table_list)) {        // upper table list paginator        if (count($table_list) <= $GLOBALS['cfg']['MaxTableList'] && $table_count > $GLOBALS['cfg']['MaxTableList']) {            $_url_params = array(              'tpos' => 'true',              'pos' => $tpos,              'db' => $GLOBALS['db']            );            PMA_listNavigator($table_count, $tpos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxTableList']);        }        PMA_displayTableList($table_list, true, '', $GLOBALS['db']);        // lower table list paginator        if (count($table_list) <= $GLOBALS['cfg']['MaxTableList'] && $table_count > $GLOBALS['cfg']['MaxTableList']) {            PMA_listNavigator($table_count, $tpos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxTableList']);        }    } else {        echo __('No tables found in database.');    }    unset($table_list);    if (!PMA_is_system_schema($db)) {        $class = '';        $GLOBALS['cfg']['AjaxEnable'] ? $class="ajax" : '';        echo '<ul id="newtable"><li><a target="frame_content" href="tbl_create.php' . PMA_generate_common_url(array('db' => $GLOBALS['db'])) . '"  class="'.$class .'" >'            . PMA_getImage('b_snewtbl.png', _pgettext('short form', 'Create table'), array('id' => "icon_newtable"))            . _pgettext('short form', 'Create table') . '</a></li></ul>';    }} elseif ($GLOBALS['cfg']['LeftFrameLight']) {    /* No need to tell user to select database if we're showing complete list */    if (!$list) {        echo '<p>' . __('Please select a database') . '</p>';    }} else {    echo '<div id="databaseList">' . "\n";    $_url_params = array('pos' => $pos);    PMA_listNavigator(count($GLOBALS['pma']->databases), $pos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxDbList']);    echo '</div>' . "\n";    $common_url_query = PMA_generate_common_url();    PMA_displayDbList($GLOBALS['pma']->databases->getGroupedDetails($_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']), $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']);}/** * displays collapsable db list * * @global  integer $element_counter * @global  string $img_minus * @global  string $img_plus * @global  string $href_left * @global  string $db_start * @global  string $common_url_query * @param array   $ext_dblist extended db list * @param integer $offset * @param integer $count */function PMA_displayDbList($ext_dblist, $offset, $count){    global $element_counter, $img_minus, $img_plus, $href_left,        $db_start, $common_url_query;    // get table list, for all databases    // doing this in one step takes advantage of a single query with information_schema!    $tables_full = PMA_DBI_get_tables_full($GLOBALS['pma']->databases->getLimitedItems($offset, $count));    $url_dbgroup = '';    echo '<ul id="leftdatabaselist">';    $close_db_group = false;    foreach ($ext_dblist as $group => $db_group) {        if (count($GLOBALS['pma']->databases) > 1) {            if ($close_db_group) {                $url_dbgroup = '';                echo '</ul>';                echo '</li>';                $close_db_group = false;            }            if (count($db_group) > 1) {                $close_db_group = true;                $url_dbgroup = '&amp;dbgroup=' . urlencode($group);                $common_url_query = PMA_generate_common_url() . $url_dbgroup;                $element_counter++;                echo '<li class="dbgroup">';                if ((! empty($_REQUEST['dbgroup']) && $_REQUEST['dbgroup'] == $group)                  || $db_start == $group || strpos($db_start, $group) === 0) {                    // display + only if this db(group) is not preselected                    printf($href_left, $element_counter, PMA_generate_common_url());                    printf($img_minus, $element_counter);                } else {                    printf($href_left, $element_counter, $common_url_query);                    printf($img_plus, $element_counter);                }                echo '</a> ' . $group . "\n";                if ((! empty($_REQUEST['dbgroup']) && $_REQUEST['dbgroup'] == $group)                  || $db_start == $group || strpos($db_start, $group) === 0) {                    echo '<ul id="subel' . $element_counter . '">' . "\n";                } else {                    echo '<ul id="subel' . $element_counter . '"'                        .' style="display: none">' . "\n";                }            }        }        foreach ($db_group as $db) {            $common_url_query = PMA_generate_common_url($db['name']) . $url_dbgroup;            $element_counter++;            // Displays the database name            echo '<li>' . "\n";            if (count($GLOBALS['pma']->databases) > 1) {                // only with more than one db we need collapse ...                if ($db_start != $db['name'] || $db['num_tables'] < 1) {                    // display + only if this db is not preselected                    // or table count is 0                    printf($href_left, $element_counter, $common_url_query);                    printf($img_plus, $element_counter);                } else {                    printf($href_left, $element_counter,                        PMA_generate_common_url() . $url_dbgroup);                    printf($img_minus, $element_counter);                }                echo '</a>';                // ... and we need to refresh both frames on db selection                ?>                <a class="item"                    id="<?php echo htmlspecialchars($db['name']); ?>"                    href="index.php?<?php echo $common_url_query; ?>"                    target="_parent"                    title="<?php echo htmlspecialchars($db['comment']); ?>"                    onclick="                        if (! toggle('<?php echo $element_counter; ?>', true))                            window.parent.goTo('./navigation.php?<?php echo $common_url_query; ?>');                        window.parent.goTo('./<?php echo $GLOBALS['cfg']['DefaultTabDatabase']                            . '?' . $common_url_query; ?>', 'main');                        return false;">                    <?php                    // Might be unset if CountTables directive is false                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'rtl') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    echo htmlspecialchars($db['disp_name']);                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'ltr') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    ?>                </a>                <?php            } else {                // with only 1 db available we dont need to refresh navi frame                // on db selection, only phpmain                ?>                <a href="<?php echo $GLOBALS['cfg']['DefaultTabDatabase']                    . '?' . $common_url_query; ?>"                    id="<?php echo htmlspecialchars($db['name']); ?>"                    title="<?php echo htmlspecialchars($db['comment']); ?>">                    <?php                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'rtl') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    echo htmlspecialchars($db['disp_name']);                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'ltr') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    ?>                </a>                <?php            }            if (($GLOBALS['cfg']['Server']['CountTables'] === false) || $db['num_tables']) {                if (isset($tables_full[$db['name']])) {                    $tables = PMA_getTableList($db['name'], $tables_full[$db['name']]);                } elseif (isset($tables_full[strtolower($db['name'])])) {                    // on windows with lower_case_table_names = 1                    // MySQL returns                    // with SHOW DATABASES or information_schema.SCHEMATA: `Test`                    // but information_schema.TABLES gives `test`                    // bug #1436171                    // sf.net/tracker/?func=detail&aid=1436171&group_id=23067&atid=377408                    $tables = PMA_getTableList($db['name'], $tables_full[strtolower($db['name'])]);                } else {                    $tables = PMA_getTableList($db['name']);                }                $child_visible                    = (bool) (count($GLOBALS['pma']->databases) === 1 || $db_start == $db['name']);                PMA_displayTableList($tables, $child_visible, '', $db['name']);            } elseif ($GLOBALS['cfg']['LeftFrameLight']) {                // no tables and LeftFrameLight:                // display message no tables in selected db                echo '<p>' . __('Please select a database') . '</p>' . "\n";            }            echo '</li>' . "\n";        } // end foreach db    } // end foreach group    if ($close_db_group) {        $url_dbgroup = '';        echo '</ul>';        echo '</li>';        $close_db_group = false;    }    echo '</ul>' . "\n";}/** * display unordered list of tables * calls itself recursively if table in given list * is a list itself * * @global  integer the element counter * @global  string  html code for '-' image * @global  string  html code for '+' image * @global  string  html code for self link * @param array   $tables         array of tables/tablegroups * @param boolean $visible        whether the list is visible or not * @param string  $tab_group_full full tab group name * @param string  $table_db       db of this table */function PMA_displayTableList($tables, $visible = false,    $tab_group_full = '', $table_db = ''){    if (! is_array($tables) || count($tables) === 0) {        return;    }    global $element_counter, $img_minus, $img_plus, $href_left;    $sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];    if ($visible) {        echo '<ul id="subel' . $element_counter . '">';    } else {        echo '<ul id="subel' . $element_counter . '" style="display: none">';    }    foreach ($tables as $group => $table) {        // only allow grouping if the group has more than 1 table        if (isset($table['is' . $sep . 'group']) && $table['tab' . $sep . 'count'] > 1) {            $common_url_query = $GLOBALS['common_url_query']                . '&amp;tbl_group=' . urlencode($tab_group_full . $group);            $element_counter++;            echo '<li>' . "\n";            if ($visible             && ((isset($_REQUEST['tbl_group'])               && (strpos($_REQUEST['tbl_group'], $group) === 0                || strpos($_REQUEST['tbl_group'], $sep . $group) !== false))              || strpos($GLOBALS['table'], $group) === 0)) {                printf($href_left, $element_counter,                    $GLOBALS['common_url_query'] . '&amp;tbl_group=' . $tab_group_full);                printf($img_minus, $element_counter);            } else {                printf($href_left, $element_counter, $common_url_query);                printf($img_plus, $element_counter);            }            echo '</a>';            ?>            <a href="index.php?<?php echo $common_url_query; ?>"                target="_parent"                onclick="                    if (! toggle('<?php echo $element_counter; ?>', true))                        window.parent.goTo('./navigation.php?<?php echo $common_url_query; ?>');                    window.parent.goTo('./<?php echo $GLOBALS['cfg']['DefaultTabDatabase']                        . '?' . $common_url_query; ?>', 'main');                    return false;">                <?php                if ($GLOBALS['text_dir'] === 'rtl') {                    echo ' <bdo dir="ltr">(' . $table['tab' . $sep . 'count'] . ')</bdo> ';                }                echo htmlspecialchars(substr($group, 0, strlen($group) - strlen($sep)));                if ($GLOBALS['text_dir'] === 'ltr') {                    echo ' <bdo dir="ltr">(' . $table['tab' . $sep . 'count'] . ')</bdo> ';                }                ?>            </a>            <?php            unset($table['is' . $sep . 'group']);            unset($table['tab' . $sep . 'group']);            unset($table['tab' . $sep . 'count']);            if ($visible &&              ((isset($_REQUEST['tbl_group'])                && (strpos($_REQUEST['tbl_group'], $group) === 0                || strpos($_REQUEST['tbl_group'], $sep . $group) !== false))              || strpos($GLOBALS['table'], $group) === 0)) {                PMA_displayTableList($table, true,                    $tab_group_full . $group, $table_db);            } else {                PMA_displayTableList($table, false, '', $table_db);            }            echo '</li>' . "\n";        } elseif (is_array($table)) {            // the table was not grouped because it is the only one with its prefix            while (isset($table['is' . $sep . 'group'])) {                // get the array with the actual table information                foreach ($table as $value) {                    if (is_array($value)) {                        $table = $value;                    }                }            }            $link_title = PMA_getTitleForTarget($GLOBALS['cfg']['LeftDefaultTabTable']);            // quick access icon next to each table name            echo '<li>' . "\n";            echo '<a class="tableicon" title="'                . htmlspecialchars($link_title)                . ': ' . htmlspecialchars($table['Comment'])                .' (' . PMA_formatNumber($table['Rows'], 0) . ' ' . __('Rows') . ')"'                .' id="quick_' . htmlspecialchars($table_db . '.' . $table['Name']) . '"'                .' href="' . $GLOBALS['cfg']['LeftDefaultTabTable'] . '?'                . $GLOBALS['common_url_query']                .'&amp;table=' . urlencode($table['Name'])                .'&amp;goto=' . $GLOBALS['cfg']['LeftDefaultTabTable']                . '" >';            $attr = array('id' => 'icon_' . htmlspecialchars($table_db . '.' . $table['Name']));            if (PMA_Table::isView($table_db, $table['Name'])) {                echo PMA_getImage('s_views.png', htmlspecialchars($link_title), $attr);            } else {                echo PMA_getImage('b_browse.png', htmlspecialchars($link_title), $attr);            }            echo '</a>';            // link for the table name itself            $href = $GLOBALS['cfg']['DefaultTabTable'] . '?'                .$GLOBALS['common_url_query'] . '&amp;table='                .urlencode($table['Name']) . '&amp;pos=0';            echo '<a href="' . $href            . '" title="' . htmlspecialchars(PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabTable']) . ': ' . $table['Comment']                .' (' . PMA_formatNumber($table['Rows'], 0) . ' ' . __('Rows')) . ')"'                .' id="' . htmlspecialchars($table_db . '.' . $table['Name']) . '">'                // preserve spaces in table name                . str_replace(' ', '&nbsp;', htmlspecialchars($table['disp_name'])) . '</a>';            echo '</li>' . "\n";        }    }    echo '</ul>';}echo '</div>' . "\n";PMA_exitNavigationFrame();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * forms frameset * *                                              or common.inc.php * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require_once './libraries/common.inc.php';// free the session file, for the other frames to be loadedsession_write_close();// Gets the host nameif (empty($HTTP_HOST)) {    if (PMA_getenv('HTTP_HOST')) {        $HTTP_HOST = PMA_getenv('HTTP_HOST');    } else {        $HTTP_HOST = '';    }}// purge querywindow history$cfgRelation = PMA_getRelationsParam();if ($GLOBALS['cfg']['QueryHistoryDB'] && $cfgRelation['historywork']) {    PMA_purgeHistory($GLOBALS['cfg']['Server']['user']);}unset($cfgRelation);/** * pass variables to child pages */$drops = array('lang', 'server', 'collation_connection',    'db', 'table');foreach ($drops as $each_drop) {    if (array_key_exists($each_drop, $_GET)) {        unset($_GET[$each_drop]);    }}unset($drops, $each_drop);if (! strlen($GLOBALS['db'])) {    $main_target = $GLOBALS['cfg']['DefaultTabServer'];} elseif (! strlen($GLOBALS['table'])) {    $_GET['db'] = $GLOBALS['db'];    $main_target = $GLOBALS['cfg']['DefaultTabDatabase'];} else {    $_GET['db'] = $GLOBALS['db'];    $_GET['table'] = $GLOBALS['table'];    $main_target = isset($GLOBALS['goto']) ? $GLOBALS['goto'] : $GLOBALS['cfg']['DefaultTabTable'];}$url_query = PMA_generate_common_url($_GET);if (isset($GLOBALS['target']) && is_string($GLOBALS['target']) && !empty($GLOBALS['target']) && in_array($GLOBALS['target'], $goto_whitelist)) {    $main_target = $GLOBALS['target'];}$main_target .= $url_query;$lang_iso_code = $GLOBALS['available_languages'][$GLOBALS['lang']][1];// start outputrequire './libraries/header_http.inc.php';?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"><html xmlns="http://www.w3.org/1999/xhtml"    xml:lang="<?php echo $lang_iso_code; ?>"    lang="<?php echo $lang_iso_code; ?>"    dir="<?php echo $GLOBALS['text_dir']; ?>"><head><link rel="icon" href="./favicon.ico" type="image/x-icon" /><link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" /><title>phpMyAdmin <?php echo PMA_VERSION; ?> -    <?php echo htmlspecialchars($HTTP_HOST); ?></title><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><meta name="robots" content="noindex,nofollow" /><script type="text/javascript">// <![CDATA[    // definitions used in common.js    var common_query = '<?php echo PMA_escapeJsString(PMA_generate_common_url('', '', '&'));?>';    var opendb_url = '<?php echo PMA_escapeJsString($GLOBALS['cfg']['DefaultTabDatabase']); ?>';    var safari_browser = <?php echo PMA_USR_BROWSER_AGENT == 'SAFARI' ? 'true' : 'false' ?>;    var querywindow_height = <?php echo PMA_escapeJsString($GLOBALS['cfg']['QueryWindowHeight']); ?>;    var querywindow_width = <?php echo PMA_escapeJsString($GLOBALS['cfg']['QueryWindowWidth']); ?>;    var collation_connection = '<?php echo PMA_escapeJsString($GLOBALS['collation_connection']); ?>';    var lang = '<?php echo PMA_escapeJsString($GLOBALS['lang']); ?>';    var server = '<?php echo PMA_escapeJsString($GLOBALS['server']); ?>';    var table = '<?php echo PMA_escapeJsString($GLOBALS['table']); ?>';    var db    = '<?php echo PMA_escapeJsString($GLOBALS['db']); ?>';    var token = '<?php echo PMA_escapeJsString($_SESSION[' PMA_token ']); ?>';    var text_dir = '<?php echo PMA_escapeJsString($GLOBALS['text_dir']); ?>';    var pma_absolute_uri = '<?php echo PMA_escapeJsString($GLOBALS['cfg']['PmaAbsoluteUri']); ?>';    var pma_text_default_tab = '<?php echo PMA_escapeJsString(PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabTable'])); ?>';    var pma_text_left_default_tab = '<?php echo PMA_escapeJsString(PMA_getTitleForTarget($GLOBALS['cfg']['LeftDefaultTabTable'])); ?>';    // for content and navigation frames    var frame_content = 0;    var frame_navigation = 0;    function getFrames() {<?php if ($GLOBALS['text_dir'] === 'ltr') { ?>        frame_content = window.frames[1];        frame_navigation = window.frames[0];<?php } else { ?>        frame_content = window.frames[0];        frame_navigation = window.frames[1];<?php } ?>    }    var onloadCnt = 0;    var onLoadHandler = window.onload;    window.onload = function() {        if (onloadCnt == 0) {            if (typeof(onLoadHandler) == "function") {                onLoadHandler();            }            if (typeof(getFrames) != 'undefined' && typeof(getFrames) == 'function') {                getFrames();            }            onloadCnt++;        }    };// ]]></script><?phpecho PMA_includeJS('jquery/jquery-1.6.2.js');echo PMA_includeJS('update-location.js');echo PMA_includeJS('common.js');?></head><frameset cols="<?phpif ($GLOBALS['text_dir'] === 'rtl') {    echo '*,';}echo $GLOBALS['cfg']['NaviWidth'];if ($GLOBALS['text_dir'] === 'ltr') {    echo ',*';}?>" rows="*" id="mainFrameset">    <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    <frame frameborder="0" id="frame_navigation"        src="navigation.php<?php echo $url_query; ?>"        name="frame_navigation" />    <?php } ?>    <frame frameborder="0" id="frame_content"        src="<?php echo $main_target; ?>"        name="frame_content" />    <?php if ($GLOBALS['text_dir'] === 'rtl') { ?>    <frame frameborder="0" id="frame_navigation"        src="navigation.php<?php echo $url_query; ?>"        name="frame_navigation" />    <?php } ?>    <noframes>        <body>            <p><?php echo __('phpMyAdmin is more friendly with a <b>frames-capable</b> browser.'); ?></p>        </body>    </noframes></frameset></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface to the classic MySQL extension * * @package PhpMyAdmin-DBI-MySQL */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/logging.lib.php';/** * MySQL client API */if (! defined('PMA_MYSQL_CLIENT_API')) {    $client_api = explode('.', mysql_get_client_info());    define('PMA_MYSQL_CLIENT_API', (int)sprintf('%d%02d%02d', $client_api[0], $client_api[1], intval($client_api[2])));    unset($client_api);}/** * Helper function for connecting to the database server * * @param   string  $server * @param   string  $user * @param   string  $password * @param   int     $client_flags * @param   bool    $persistent * @return  mixed   false on error or a mysql connection resource on success */function PMA_DBI_real_connect($server, $user, $password, $client_flags, $persistent = false){    global $cfg;    if (empty($client_flags)) {        if ($cfg['PersistentConnections'] || $persistent) {            $link = @mysql_pconnect($server, $user, $password);        } else {            $link = @mysql_connect($server, $user, $password);        }    } else {        if ($cfg['PersistentConnections'] || $persistent) {            $link = @mysql_pconnect($server, $user, $password, $client_flags);        } else {            $link = @mysql_connect($server, $user, $password, false, $client_flags);        }    }    return $link;}/** * connects to the database server * * @param   string  $user           mysql user name * @param   string  $password       mysql user password * @param   bool    $is_controluser * @param   array   $server host/port/socket/persistent * @param   bool    $auxiliary_connection (when true, don't go back to login if connection fails) * @return  mixed   false on error or a mysqli object on success */function PMA_DBI_connect($user, $password, $is_controluser = false, $server = null, $auxiliary_connection = false){    global $cfg;    if ($server) {        $server_port = (empty($server['port']))            ? ''            : ':' . (int)$server['port'];        $server_socket = (empty($server['socket']))            ? ''            : ':' . $server['socket'];    } else {        $server_port   = (empty($cfg['Server']['port']))            ? ''            : ':' . (int)$cfg['Server']['port'];        $server_socket = (empty($cfg['Server']['socket']))            ? ''            : ':' . $cfg['Server']['socket'];    }    $client_flags = 0;    // always use CLIENT_LOCAL_FILES as defined in mysql_com.h    // for the case where the client library was not compiled    // with --enable-local-infile    $client_flags |= 128;    /* Optionally compress connection */    if (defined('MYSQL_CLIENT_COMPRESS') && $cfg['Server']['compress']) {        $client_flags |= MYSQL_CLIENT_COMPRESS;    }    /* Optionally enable SSL */    if (defined('MYSQL_CLIENT_SSL') && $cfg['Server']['ssl']) {        $client_flags |= MYSQL_CLIENT_SSL;    }    if (!$server) {        $link = PMA_DBI_real_connect($cfg['Server']['host'] . $server_port . $server_socket, $user, $password, empty($client_flags) ? null : $client_flags);      // Retry with empty password if we're allowed to        if (empty($link) && $cfg['Server']['nopassword'] && !$is_controluser) {            $link = PMA_DBI_real_connect($cfg['Server']['host'] . $server_port . $server_socket, $user, '', empty($client_flags) ? null : $client_flags);        }    } else {        if (!isset($server['host'])) {            $link = PMA_DBI_real_connect($server_socket, $user, $password, null);        } else {            $link = PMA_DBI_real_connect($server['host'] . $server_port . $server_socket, $user, $password, null);        }    }    if (empty($link)) {        if ($is_controluser) {            trigger_error(__('Connection for controluser as defined in your configuration failed.'), E_USER_WARNING);            return false;        }        // we could be calling PMA_DBI_connect() to connect to another        // server, for example in the Synchronize feature, so do not        // go back to main login if it fails        if (! $auxiliary_connection) {            PMA_log_user($user, 'mysql-denied');            PMA_auth_fails();        } else {            return false;        }    } // end if    if (! $server) {        PMA_DBI_postConnect($link, $is_controluser);    }    return $link;}/** * selects given database * * @param string    $dbname  name of db to select * @param resource  $link    mysql link resource * @return bool */function PMA_DBI_select_db($dbname, $link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_select_db($dbname, $link);}/** * runs a query and returns the result * * @param string    $query    query to run * @param resource  $link     mysql link resource * @param int       $options * @return mixed */function PMA_DBI_real_query($query, $link, $options){    if ($options == ($options | PMA_DBI_QUERY_STORE)) {        return mysql_query($query, $link);    } elseif ($options == ($options | PMA_DBI_QUERY_UNBUFFERED)) {        return mysql_unbuffered_query($query, $link);    } else {        return mysql_query($query, $link);    }}/** * returns array of rows with associative and numeric keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_array($result){    return mysql_fetch_array($result, MYSQL_BOTH);}/** * returns array of rows with associative keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_assoc($result){    return mysql_fetch_array($result, MYSQL_ASSOC);}/** * returns array of rows with numeric keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_row($result){    return mysql_fetch_array($result, MYSQL_NUM);}/** * Adjusts the result pointer to an arbitrary row in the result * * @param   $result * @param   $offset * @return  bool true on success, false on failure */function PMA_DBI_data_seek($result, $offset){    return mysql_data_seek($result, $offset);}/** * Frees memory associated with the result * * @param  resource  $result */function PMA_DBI_free_result($result){    if (is_resource($result) && get_resource_type($result) === 'mysql result') {        mysql_free_result($result);    }}/** * Check if there are any more query results from a multi query * * @return  bool         false */function PMA_DBI_more_results(){    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Prepare next result from multi_query * * @return  boo         false */function PMA_DBI_next_result(){    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Returns a string representing the type of connection used * * @param   resource  $link  mysql link * @return  string          type of connection used */function PMA_DBI_get_host_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_get_host_info($link);}/** * Returns the version of the MySQL protocol used * * @param   resource  $link  mysql link * @return  int         version of the MySQL protocol used */function PMA_DBI_get_proto_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_get_proto_info($link);}/** * returns a string that represents the client library version * * @return  string          MySQL client library version */function PMA_DBI_get_client_info(){    return mysql_get_client_info();}/** * returns last error message or false if no errors occured * * @param   resource  $link  mysql link * @return  string|bool  $error or false */function PMA_DBI_getError($link = null){    $GLOBALS['errno'] = 0;    /* Treat false same as null because of controllink */    if ($link === false) {        $link = null;    }    if (null === $link && isset($GLOBALS['userlink'])) {        $link =& $GLOBALS['userlink'];// Do not stop now. On the initial connection, we don't have a $link,// we don't have a $GLOBALS['userlink'], but we can catch the error code//    } else {//            return false;    }    if (null !== $link && false !== $link) {        $error_number = mysql_errno($link);        $error_message = mysql_error($link);    } else {        $error_number = mysql_errno();        $error_message = mysql_error();    }    if (0 == $error_number) {        return false;    }    // keep the error number for further check after the call to PMA_DBI_getError()    $GLOBALS['errno'] = $error_number;    return PMA_DBI_formatError($error_number, $error_message);}/** * returns the number of rows returned by last query * * @param   resource  $result * @return  string|int */function PMA_DBI_num_rows($result){    if (!is_bool($result)) {        return mysql_num_rows($result);    } else {        return 0;    }}/** * returns last inserted auto_increment id for given $link or $GLOBALS['userlink'] * * @param   resource  $link  the mysql object * @return  string|int */function PMA_DBI_insert_id($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    // If the primary key is BIGINT we get an incorrect result    // (sometimes negative, sometimes positive)    // and in the present function we don't know if the PK is BIGINT    // so better play safe and use LAST_INSERT_ID()    //    return PMA_DBI_fetch_value('SELECT LAST_INSERT_ID();', 0, 0, $link);}/** * returns the number of rows affected by last query * * @param   resource  $link            the mysql object * @param   bool      $get_from_cache * @return  string|int */function PMA_DBI_affected_rows($link = null, $get_from_cache = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($get_from_cache) {        return $GLOBALS['cached_affected_rows'];    } else {        return mysql_affected_rows($link);    }}/** * returns metainfo for fields in $result * * @todo add missing keys like in mysqli_query (decimals) * @param   resource  $result * @return  array  meta info for fields in $result */function PMA_DBI_get_fields_meta($result){    $fields       = array();    $num_fields   = mysql_num_fields($result);    for ($i = 0; $i < $num_fields; $i++) {        $field = mysql_fetch_field($result, $i);        $field->flags = mysql_field_flags($result, $i);        $field->orgtable = mysql_field_table($result, $i);        $field->orgname = mysql_field_name($result, $i);        $fields[] = $field;    }    return $fields;}/** * return number of fields in given $result * * @param   resource  $result * @return  int  field count */function PMA_DBI_num_fields($result){    return mysql_num_fields($result);}/** * returns the length of the given field $i in $result * * @param   resource  $result * @param   int       $i       field * @return  int  length of field */function PMA_DBI_field_len($result, $i){    return mysql_field_len($result, $i);}/** * returns name of $i. field in $result * * @param   resource  $result * @param   int       $i       field * @return  string  name of $i. field in $result */function PMA_DBI_field_name($result, $i){    return mysql_field_name($result, $i);}/** * returns concatenated string of human readable field flags * * @param   resource  $result * @param   int       $i       field * @return  string  field flags */function PMA_DBI_field_flags($result, $i){    return mysql_field_flags($result, $i);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common Option Constants For DBI Functions * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Force STORE_RESULT method, ignored by classic MySQL. */define('PMA_DBI_QUERY_STORE',       1);/** * Do not read whole query. */define('PMA_DBI_QUERY_UNBUFFERED',  2);/** * Get session variable. */define('PMA_DBI_GETVAR_SESSION',    1);/** * Get global variable. */define('PMA_DBI_GETVAR_GLOBAL',     2);/** * Checks whether database extension is loaded * * @param string $extension mysql extension to check * * @return bool */function PMA_DBI_checkDbExtension($extension = 'mysql'){    if ($extension == 'drizzle' && function_exists('drizzle_create')) {        return true;    } else if (function_exists($extension . '_connect')) {        return true;    }    return false;}/** * check for requested extension */if (! PMA_DBI_checkDbExtension($GLOBALS['cfg']['Server']['extension'])) {    // if it fails try alternative extension ...    // and display an error ...    /**     * @todo add different messages for alternative extension     * and complete fail (no alternative extension too)     */    PMA_warnMissingExtension(        $GLOBALS['cfg']['Server']['extension'],        false,        PMA_showDocu('faqmysql')    );    if ($GLOBALS['cfg']['Server']['extension'] === 'mysql') {        $alternativ_extension = 'mysqli';    } else {        $alternativ_extension = 'mysql';    }    if (! PMA_DBI_checkDbExtension($alternativ_extension)) {        // if alternative fails too ...        PMA_warnMissingExtension(            $GLOBALS['cfg']['Server']['extension'],            true,            PMA_showDocu('faqmysql')        );    }    $GLOBALS['cfg']['Server']['extension'] = $alternativ_extension;    unset($alternativ_extension);}/** * Including The DBI Plugin */require_once './libraries/dbi/'    . $GLOBALS['cfg']['Server']['extension'] . '.dbi.lib.php';/** * runs a query * * @param string $query               SQL query to execte * @param mixed  $link                optional database link to use * @param int    $options             optional query options * @param bool   $cache_affected_rows whether to cache affected rows * * @return mixed */function PMA_DBI_query($query, $link = null, $options = 0, $cache_affected_rows = true){    $res = PMA_DBI_try_query($query, $link, $options, $cache_affected_rows)        or PMA_mysqlDie(PMA_DBI_getError($link), $query);    return $res;}/** * runs a query and returns the result * * @param string   $query               query to run * @param resource $link                mysql link resource * @param integer  $options             query options * @param bool     $cache_affected_rows whether to cache affected row * * @return mixed */function PMA_DBI_try_query($query, $link = null, $options = 0, $cache_affected_rows = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($GLOBALS['cfg']['DBG']['sql']) {        $time = microtime(true);    }    $r = PMA_DBI_real_query($query, $link, $options);    if ($cache_affected_rows) {        $GLOBALS['cached_affected_rows'] = PMA_DBI_affected_rows($link, $get_from_cache = false);    }    if ($GLOBALS['cfg']['DBG']['sql']) {        $time = microtime(true) - $time;        $hash = md5($query);        if (isset($_SESSION['debug']['queries'][$hash])) {            $_SESSION['debug']['queries'][$hash]['count']++;        } else {            $_SESSION['debug']['queries'][$hash] = array();            if ($r == false) {                $_SESSION['debug']['queries'][$hash]['error'] = '<b style="color:red">'.mysqli_error($link).'</b>';            }            $_SESSION['debug']['queries'][$hash]['count'] = 1;            $_SESSION['debug']['queries'][$hash]['query'] = $query;            $_SESSION['debug']['queries'][$hash]['time'] = $time;        }        $trace = array();        foreach (debug_backtrace() as $trace_step) {            $trace[] = PMA_Error::relPath($trace_step['file']) . '#'                . $trace_step['line'] . ': '                . (isset($trace_step['class']) ? $trace_step['class'] : '')                //. (isset($trace_step['object']) ? get_class($trace_step['object']) : '')                . (isset($trace_step['type']) ? $trace_step['type'] : '')                . (isset($trace_step['function']) ? $trace_step['function'] : '')                . '('                . (isset($trace_step['params']) ? implode(', ', $trace_step['params']) : '')                . ')'                ;        }        $_SESSION['debug']['queries'][$hash]['trace'][] = $trace;    }    if ($r != false && PMA_Tracker::isActive() == true ) {        PMA_Tracker::handleQuery($query);    }    return $r;}/** * converts charset of a mysql message, usually coming from mysql_error(), * into PMA charset, usally UTF-8 * uses language to charset mapping from mysql/share/errmsg.txt * and charset names to ISO charset from information_schema.CHARACTER_SETS * * @param string $message the message * * @return  string  $message */function PMA_DBI_convert_message($message){    // latin always last!    $encodings = array(        'japanese'      => 'EUC-JP', //'ujis',        'japanese-sjis' => 'Shift-JIS', //'sjis',        'korean'        => 'EUC-KR', //'euckr',        'russian'       => 'KOI8-R', //'koi8r',        'ukrainian'     => 'KOI8-U', //'koi8u',        'greek'         => 'ISO-8859-7', //'greek',        'serbian'       => 'CP1250', //'cp1250',        'estonian'      => 'ISO-8859-13', //'latin7',        'slovak'        => 'ISO-8859-2', //'latin2',        'czech'         => 'ISO-8859-2', //'latin2',        'hungarian'     => 'ISO-8859-2', //'latin2',        'polish'        => 'ISO-8859-2', //'latin2',        'romanian'      => 'ISO-8859-2', //'latin2',        'spanish'       => 'CP1252', //'latin1',        'swedish'       => 'CP1252', //'latin1',        'italian'       => 'CP1252', //'latin1',        'norwegian-ny'  => 'CP1252', //'latin1',        'norwegian'     => 'CP1252', //'latin1',        'portuguese'    => 'CP1252', //'latin1',        'danish'        => 'CP1252', //'latin1',        'dutch'         => 'CP1252', //'latin1',        'english'       => 'CP1252', //'latin1',        'french'        => 'CP1252', //'latin1',        'german'        => 'CP1252', //'latin1',    );    if ($server_language = PMA_DBI_fetch_value('SHOW VARIABLES LIKE \'language\';', 0, 1)) {        $found = array();        if (preg_match('&(?:\\\|\\/)([^\\\\\/]*)(?:\\\|\\/)$&i', $server_language, $found)) {            $server_language = $found[1];        }    }    if (! empty($server_language) && isset($encodings[$server_language])) {        if (function_exists('iconv')) {            if ((@stristr(PHP_OS, 'AIX'))                && (@strcasecmp(ICONV_IMPL, 'unknown') == 0)                && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)            ) {                include_once './libraries/iconv_wrapper.lib.php';                $message = PMA_aix_iconv_wrapper(                    $encodings[$server_language],                    'utf-8' . $GLOBALS['cfg']['IconvExtraParams'],                    $message                );            } else {                $message = iconv(                    $encodings[$server_language],                    'utf-8' . $GLOBALS['cfg']['IconvExtraParams'],                    $message                );            }        } elseif (function_exists('recode_string')) {            $message = recode_string(                $encodings[$server_language] . '..'  . 'utf-8',                $message            );        } elseif (function_exists('libiconv')) {            $message = libiconv($encodings[$server_language], 'utf-8', $message);        } elseif (function_exists('mb_convert_encoding')) {            // do not try unsupported charsets            if (! in_array($server_language, array('ukrainian', 'greek', 'serbian'))) {                $message = mb_convert_encoding(                    $message,                    'utf-8',                    $encodings[$server_language]                );            }        }    } else {        /**         * @todo lang not found, try all, what TODO ?         */    }    return $message;}/** * returns array with table names for given db * * @param string $database name of database * @param mixed  $link     mysql link resource|object * * @return  array   tables names */function PMA_DBI_get_tables($database, $link = null){    return PMA_DBI_fetch_result(        'SHOW TABLES FROM ' . PMA_backquote($database) . ';',        null,        0,        $link,        PMA_DBI_QUERY_STORE    );}/** * usort comparison callback * * @param string $a first argument to sort * @param string $b second argument to sort * * @return  integer  a value representing whether $a should be before $b in the *                   sorted array or not * * @access  private */function PMA_usort_comparison_callback($a, $b){    if ($GLOBALS['cfg']['NaturalOrder']) {        $sorter = 'strnatcasecmp';    } else {        $sorter = 'strcasecmp';    }    /* No sorting when key is not present */    if (! isset($a[$GLOBALS['callback_sort_by']]) || ! isset($b[$GLOBALS['callback_sort_by']])) {        return 0;    }    // produces f.e.:    // return -1 * strnatcasecmp($a["SCHEMA_TABLES"], $b["SCHEMA_TABLES"])    return ($GLOBALS['callback_sort_order'] == 'ASC' ? 1 : -1) * $sorter($a[$GLOBALS['callback_sort_by']], $b[$GLOBALS['callback_sort_by']]);} // end of the 'PMA_usort_comparison_callback()' function/** * returns array of all tables in given db or dbs * this function expects unquoted names: * RIGHT: my_database * WRONG: `my_database` * WRONG: my\_database * if $tbl_is_group is true, $table is used as filter for table names * if $tbl_is_group is 'comment, $table is used as filter for table comments * * <code> * PMA_DBI_get_tables_full('my_database'); * PMA_DBI_get_tables_full('my_database', 'my_table')); * PMA_DBI_get_tables_full('my_database', 'my_tables_', true)); * PMA_DBI_get_tables_full('my_database', 'my_tables_', 'comment')); * </code> * * @param string          $database     database * @param string|bool     $table        table or false * @param boolean|string  $tbl_is_group $table is a table group * @param mixed           $link         mysql link * @param integer         $limit_offset zero-based offset for the count * @param boolean|integer $limit_count  number of tables to return * @param string          $sort_by      table attribute to sort by * @param string          $sort_order   direction to sort (ASC or DESC) * * @todo    move into PMA_Table * * @return  array           list of tables in given db(s) */function PMA_DBI_get_tables_full($database, $table = false, $tbl_is_group = false, $link = null,     $limit_offset = 0, $limit_count = false, $sort_by = 'Name', $sort_order = 'ASC'){    if (true === $limit_count) {        $limit_count = $GLOBALS['cfg']['MaxTableList'];    }    // prepare and check parameters    if (! is_array($database)) {        $databases = array($database);    } else {        $databases = $database;    }    $tables = array();    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        // get table information from information_schema        if ($table) {            if (true === $tbl_is_group) {                $sql_where_table = 'AND t.`TABLE_NAME` LIKE \''                  . PMA_escape_mysql_wildcards(PMA_sqlAddSlashes($table)) . '%\'';            } elseif ('comment' === $tbl_is_group) {                $sql_where_table = 'AND t.`TABLE_COMMENT` LIKE \''                  . PMA_escape_mysql_wildcards(PMA_sqlAddSlashes($table)) . '%\'';            } else {                $sql_where_table = 'AND t.`TABLE_NAME` = \'' . PMA_sqlAddSlashes($table) . '\'';            }        } else {            $sql_where_table = '';        }        // for PMA bc:        // `SCHEMA_FIELD_NAME` AS `SHOW_TABLE_STATUS_FIELD_NAME`        //        // on non-Windows servers,        // added BINARY in the WHERE clause to force a case sensitive        // comparison (if we are looking for the db Aa we don't want        // to find the db aa)        $this_databases = array_map('PMA_sqlAddSlashes', $databases);        if (PMA_DRIZZLE) {            $engine_info = PMA_cacheGet('drizzle_engines', true);            $stats_join = "LEFT JOIN (SELECT 0 NUM_ROWS) AS stat ON false";            if (isset($engine_info['InnoDB'])                && $engine_info['InnoDB']['module_library'] == 'innobase'            ) {                $stats_join = "LEFT JOIN data_dictionary.INNODB_SYS_TABLESTATS stat ON (t.ENGINE = 'InnoDB' AND stat.NAME = (t.TABLE_SCHEMA || '/') || t.TABLE_NAME)";            }            // data_dictionary.table_cache may not contain any data for some tables, it's just a table cache            // auto_increment == 0 is cast to NULL because currently (2011.03.13 GA) Drizzle doesn't provide correct value            $sql = "                SELECT t.*,                    t.TABLE_SCHEMA        AS `Db`,                    t.TABLE_NAME          AS `Name`,                    t.TABLE_TYPE          AS `TABLE_TYPE`,                    t.ENGINE              AS `Engine`,                    t.ENGINE              AS `Type`,                    t.TABLE_VERSION       AS `Version`,-- VERSION                    t.ROW_FORMAT          AS `Row_format`,                    coalesce(tc.ROWS, stat.NUM_ROWS)                                          AS `Rows`,-- TABLE_ROWS,                    coalesce(tc.ROWS, stat.NUM_ROWS)                                          AS `TABLE_ROWS`,                    tc.AVG_ROW_LENGTH     AS `Avg_row_length`, -- AVG_ROW_LENGTH                    tc.TABLE_SIZE         AS `Data_length`, -- DATA_LENGTH                    NULL                  AS `Max_data_length`, -- MAX_DATA_LENGTH                    NULL                  AS `Index_length`, -- INDEX_LENGTH                    NULL                  AS `Data_free`, -- DATA_FREE                    nullif(t.AUTO_INCREMENT, 0)                                          AS `Auto_increment`,                    t.TABLE_CREATION_TIME AS `Create_time`, -- CREATE_TIME                    t.TABLE_UPDATE_TIME   AS `Update_time`, -- UPDATE_TIME                    NULL                  AS `Check_time`, -- CHECK_TIME                    t.TABLE_COLLATION     AS `Collation`,                    NULL                  AS `Checksum`, -- CHECKSUM                    NULL                  AS `Create_options`, -- CREATE_OPTIONS                    t.TABLE_COMMENT       AS `Comment`                FROM data_dictionary.TABLES t                    LEFT JOIN data_dictionary.TABLE_CACHE tc ON tc.TABLE_SCHEMA = t.TABLE_SCHEMA AND tc.TABLE_NAME = t.TABLE_NAME                    $stats_join                WHERE t.TABLE_SCHEMA IN ('" . implode("', '", $this_databases) . "')                    " . $sql_where_table;        } else {            $sql = '                SELECT *,                    `TABLE_SCHEMA`       AS `Db`,                    `TABLE_NAME`         AS `Name`,                    `TABLE_TYPE`         AS `TABLE_TYPE`,                    `ENGINE`             AS `Engine`,                    `ENGINE`             AS `Type`,                    `VERSION`            AS `Version`,                    `ROW_FORMAT`         AS `Row_format`,                    `TABLE_ROWS`         AS `Rows`,                    `AVG_ROW_LENGTH`     AS `Avg_row_length`,                    `DATA_LENGTH`        AS `Data_length`,                    `MAX_DATA_LENGTH`    AS `Max_data_length`,                    `INDEX_LENGTH`       AS `Index_length`,                    `DATA_FREE`          AS `Data_free`,                    `AUTO_INCREMENT`     AS `Auto_increment`,                    `CREATE_TIME`        AS `Create_time`,                    `UPDATE_TIME`        AS `Update_time`,                    `CHECK_TIME`         AS `Check_time`,                    `TABLE_COLLATION`    AS `Collation`,                    `CHECKSUM`           AS `Checksum`,                    `CREATE_OPTIONS`     AS `Create_options`,                    `TABLE_COMMENT`      AS `Comment`                FROM `information_schema`.`TABLES` t                WHERE ' . (PMA_IS_WINDOWS ? '' : 'BINARY') . ' `TABLE_SCHEMA` IN (\'' . implode("', '", $this_databases) . '\')                    ' . $sql_where_table;        }        // Sort the tables        $sql .= " ORDER BY $sort_by $sort_order";        if ($limit_count) {            $sql .= ' LIMIT ' . $limit_count . ' OFFSET ' . $limit_offset;        }        $tables = PMA_DBI_fetch_result(            $sql, array('TABLE_SCHEMA', 'TABLE_NAME'), null, $link        );        unset($sql_where_table, $sql);        if (PMA_DRIZZLE) {            // correct I_S and D_D names returned by D_D.TABLES - Drizzle generally uses lower case for them,            // but TABLES returns uppercase            foreach ((array)$database as $db) {                $db_upper = strtoupper($db);                if (!isset($tables[$db]) && isset($tables[$db_upper])) {                    $tables[$db] = $tables[$db_upper];                    unset($tables[$db_upper]);                }            }        }        if ($sort_by == 'Name' && $GLOBALS['cfg']['NaturalOrder']) {            // here, the array's first key is by schema name            foreach ($tables as $one_database_name => $one_database_tables) {                uksort($one_database_tables, 'strnatcasecmp');                if ($sort_order == 'DESC') {                    $one_database_tables = array_reverse($one_database_tables);                }                $tables[$one_database_name] = $one_database_tables;            }        }    } // end (get information from table schema)    // If permissions are wrong on even one database directory,    // information_schema does not return any table info for any database    // this is why we fall back to SHOW TABLE STATUS even for MySQL >= 50002    if (empty($tables) && !PMA_DRIZZLE) {        foreach ($databases as $each_database) {            if ($table || (true === $tbl_is_group)) {                $sql = 'SHOW TABLE STATUS FROM '                    . PMA_backquote($each_database)                    .' LIKE \'' . PMA_escape_mysql_wildcards(PMA_sqlAddSlashes($table, true)) . '%\'';            } else {                $sql = 'SHOW TABLE STATUS FROM '                    . PMA_backquote($each_database);            }            $each_tables = PMA_DBI_fetch_result($sql, 'Name', null, $link);            // Sort naturally if the config allows it and we're sorting            // the Name column.            if ($sort_by == 'Name' && $GLOBALS['cfg']['NaturalOrder']) {                uksort($each_tables, 'strnatcasecmp');                if ($sort_order == 'DESC') {                    $each_tables = array_reverse($each_tables);                }            } else {                // Prepare to sort by creating array of the selected sort                // value to pass to array_multisort                // Size = Data_length + Index_length                if ($sort_by == 'Data_length') {                    foreach ($each_tables as $table_name => $table_data) {                        ${$sort_by}[$table_name] = strtolower($table_data['Data_length'] + $table_data['Index_length']);                    }                } else {                    foreach ($each_tables as $table_name => $table_data) {                        ${$sort_by}[$table_name] = strtolower($table_data[$sort_by]);                    }                }                if ($sort_order == 'DESC') {                    array_multisort($$sort_by, SORT_DESC, $each_tables);                } else {                    array_multisort($$sort_by, SORT_ASC, $each_tables);                }                // cleanup the temporary sort array                unset($$sort_by);            }            if ($limit_count) {                $each_tables = array_slice($each_tables, $limit_offset, $limit_count);            }            foreach ($each_tables as $table_name => $each_table) {                if ('comment' === $tbl_is_group                    && 0 === strpos($each_table['Comment'], $table)                ) {                    // remove table from list                    unset($each_tables[$table_name]);                    continue;                }                if (! isset($each_tables[$table_name]['Type'])                    && isset($each_tables[$table_name]['Engine'])                ) {                    // pma BC, same parts of PMA still uses 'Type'                    $each_tables[$table_name]['Type']                        =& $each_tables[$table_name]['Engine'];                } elseif (! isset($each_tables[$table_name]['Engine'])                        && isset($each_tables[$table_name]['Type'])) {                    // old MySQL reports Type, newer MySQL reports Engine                    $each_tables[$table_name]['Engine']                        =& $each_tables[$table_name]['Type'];                }                // MySQL forward compatibility                // so pma could use this array as if every server is of version >5.0                $each_tables[$table_name]['TABLE_SCHEMA']      = $each_database;                $each_tables[$table_name]['TABLE_NAME']        =& $each_tables[$table_name]['Name'];                $each_tables[$table_name]['ENGINE']            =& $each_tables[$table_name]['Engine'];                $each_tables[$table_name]['VERSION']           =& $each_tables[$table_name]['Version'];                $each_tables[$table_name]['ROW_FORMAT']        =& $each_tables[$table_name]['Row_format'];                $each_tables[$table_name]['TABLE_ROWS']        =& $each_tables[$table_name]['Rows'];                $each_tables[$table_name]['AVG_ROW_LENGTH']    =& $each_tables[$table_name]['Avg_row_length'];                $each_tables[$table_name]['DATA_LENGTH']       =& $each_tables[$table_name]['Data_length'];                $each_tables[$table_name]['MAX_DATA_LENGTH']   =& $each_tables[$table_name]['Max_data_length'];                $each_tables[$table_name]['INDEX_LENGTH']      =& $each_tables[$table_name]['Index_length'];                $each_tables[$table_name]['DATA_FREE']         =& $each_tables[$table_name]['Data_free'];                $each_tables[$table_name]['AUTO_INCREMENT']    =& $each_tables[$table_name]['Auto_increment'];                $each_tables[$table_name]['CREATE_TIME']       =& $each_tables[$table_name]['Create_time'];                $each_tables[$table_name]['UPDATE_TIME']       =& $each_tables[$table_name]['Update_time'];                $each_tables[$table_name]['CHECK_TIME']        =& $each_tables[$table_name]['Check_time'];                $each_tables[$table_name]['TABLE_COLLATION']   =& $each_tables[$table_name]['Collation'];                $each_tables[$table_name]['CHECKSUM']          =& $each_tables[$table_name]['Checksum'];                $each_tables[$table_name]['CREATE_OPTIONS']    =& $each_tables[$table_name]['Create_options'];                $each_tables[$table_name]['TABLE_COMMENT']     =& $each_tables[$table_name]['Comment'];                if (strtoupper($each_tables[$table_name]['Comment']) === 'VIEW'                    && $each_tables[$table_name]['Engine'] == null                ) {                    $each_tables[$table_name]['TABLE_TYPE'] = 'VIEW';                } else {                    /**                     * @todo difference between 'TEMPORARY' and 'BASE TABLE' but how to detect?                     */                    $each_tables[$table_name]['TABLE_TYPE'] = 'BASE TABLE';                }            }            $tables[$each_database] = $each_tables;        }    }    // cache table data    // so PMA_Table does not require to issue SHOW TABLE STATUS again    // Note: I don't see why we would need array_merge_recursive() here,    // as it creates double entries for the same table (for example a double    // entry for Comment when changing the storage engine in Operations)    // Note 2: Instead of array_merge(), simply use the + operator because    //  array_merge() renumbers numeric keys starting with 0, therefore    //  we would lose a db name thats consists only of numbers    foreach ($tables as $one_database => $its_tables) {        if (isset(PMA_Table::$cache[$one_database])) {            PMA_Table::$cache[$one_database] = PMA_Table::$cache[$one_database] + $tables[$one_database];        } else {            PMA_Table::$cache[$one_database] = $tables[$one_database];        }    }    unset($one_database, $its_tables);    if (! is_array($database)) {        if (isset($tables[$database])) {            return $tables[$database];        } elseif (isset($tables[strtolower($database)])) {            // on windows with lower_case_table_names = 1            // MySQL returns            // with SHOW DATABASES or information_schema.SCHEMATA: `Test`            // but information_schema.TABLES gives `test`            // bug #1436171            // http://sf.net/support/tracker.php?aid=1436171            return $tables[strtolower($database)];        } else {            // one database but inexact letter case match            // as Drizzle is always case insensitive, we can safely return the only result            if (PMA_DRIZZLE && count($tables) == 1) {                $keys = array_keys($tables);                if (strlen(array_pop($keys)) == strlen($database)) {                    return array_pop($tables);                }            }            return $tables;        }    } else {        return $tables;    }}/** * returns array with databases containing extended infos about them * * @param string   $database     database * @param boolean  $force_stats  retrieve stats also for MySQL < 5 * @param resource $link         mysql link * @param string   $sort_by      column to order by * @param string   $sort_order   ASC or DESC * @param integer  $limit_offset starting offset for LIMIT * @param bool|int $limit_count  row count for LIMIT or true for $GLOBALS['cfg']['MaxDbList'] * * @todo    move into PMA_List_Database? * * @return array $databases */function PMA_DBI_get_databases_full($database = null, $force_stats = false,    $link = null, $sort_by = 'SCHEMA_NAME', $sort_order = 'ASC',    $limit_offset = 0, $limit_count = false){    $sort_order = strtoupper($sort_order);    if (true === $limit_count) {        $limit_count = $GLOBALS['cfg']['MaxDbList'];    }    // initialize to avoid errors when there are no databases    $databases = array();    $apply_limit_and_order_manual = true;    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        /**         * if $GLOBALS['cfg']['NaturalOrder'] is enabled, we cannot use LIMIT         * cause MySQL does not support natural ordering, we have to do it afterward         */        $limit = '';        if (!$GLOBALS['cfg']['NaturalOrder']) {            if ($limit_count) {                $limit = ' LIMIT ' . $limit_count . ' OFFSET ' . $limit_offset;            }            $apply_limit_and_order_manual = false;        }        // get table information from information_schema        if ($database) {            $sql_where_schema = 'WHERE `SCHEMA_NAME` LIKE \''                . PMA_sqlAddSlashes($database) . '\'';        } else {            $sql_where_schema = '';        }        if (PMA_DRIZZLE) {            // data_dictionary.table_cache may not contain any data for some            // tables, it's just a table cache            $sql = 'SELECT                s.SCHEMA_NAME,                s.DEFAULT_COLLATION_NAME';            if ($force_stats) {                // no TABLE_CACHE data, stable results are better than                // constantly changing                $sql .= ',                    COUNT(t.TABLE_SCHEMA) AS SCHEMA_TABLES,                    SUM(stat.NUM_ROWS)    AS SCHEMA_TABLE_ROWS';            }            $sql .= '                   FROM data_dictionary.SCHEMAS s';            if ($force_stats) {                $engine_info = PMA_cacheGet('drizzle_engines', true);                $stats_join = "LEFT JOIN (SELECT 0 NUM_ROWS) AS stat ON false";                if (isset($engine_info['InnoDB']) && $engine_info['InnoDB']['module_library'] == 'innobase') {                    $stats_join = "LEFT JOIN data_dictionary.INNODB_SYS_TABLESTATS stat ON (t.ENGINE = 'InnoDB' AND stat.NAME = (t.TABLE_SCHEMA || '/') || t.TABLE_NAME)";                }                $sql .= "                    LEFT JOIN data_dictionary.TABLES t                        ON t.TABLE_SCHEMA = s.SCHEMA_NAME                    $stats_join";            }            $sql .= $sql_where_schema . '                    GROUP BY s.SCHEMA_NAME                    ORDER BY ' . PMA_backquote($sort_by) . ' ' . $sort_order                . $limit;        } else {            $sql = 'SELECT                s.SCHEMA_NAME,                s.DEFAULT_COLLATION_NAME';            if ($force_stats) {                $sql .= ',                    COUNT(t.TABLE_SCHEMA)  AS SCHEMA_TABLES,                    SUM(t.TABLE_ROWS)      AS SCHEMA_TABLE_ROWS,                    SUM(t.DATA_LENGTH)     AS SCHEMA_DATA_LENGTH,                    SUM(t.MAX_DATA_LENGTH) AS SCHEMA_MAX_DATA_LENGTH,                    SUM(t.INDEX_LENGTH)    AS SCHEMA_INDEX_LENGTH,                    SUM(t.DATA_LENGTH + t.INDEX_LENGTH)                                           AS SCHEMA_LENGTH,                    SUM(t.DATA_FREE)       AS SCHEMA_DATA_FREE';            }            $sql .= '                   FROM `information_schema`.SCHEMATA s';            if ($force_stats) {                $sql .= '                    LEFT JOIN `information_schema`.TABLES t                        ON BINARY t.TABLE_SCHEMA = BINARY s.SCHEMA_NAME';            }            $sql .= $sql_where_schema . '                    GROUP BY BINARY s.SCHEMA_NAME                    ORDER BY BINARY ' . PMA_backquote($sort_by) . ' ' . $sort_order                . $limit;        }        $databases = PMA_DBI_fetch_result($sql, 'SCHEMA_NAME', null, $link);        $mysql_error = PMA_DBI_getError($link);        if (! count($databases) && $GLOBALS['errno']) {            PMA_mysqlDie($mysql_error, $sql);        }        // display only databases also in official database list        // f.e. to apply hide_db and only_db        $drops = array_diff(array_keys($databases), (array) $GLOBALS['pma']->databases);        if (count($drops)) {            foreach ($drops as $drop) {                unset($databases[$drop]);            }            unset($drop);        }        unset($sql_where_schema, $sql, $drops);    } else {        foreach ($GLOBALS['pma']->databases as $database_name) {            // MySQL forward compatibility            // so pma could use this array as if every server is of version >5.0            $databases[$database_name]['SCHEMA_NAME']      = $database_name;            if ($force_stats) {                include_once './libraries/mysql_charsets.lib.php';                $databases[$database_name]['DEFAULT_COLLATION_NAME']                    = PMA_getDbCollation($database_name);                // get additional info about tables                $databases[$database_name]['SCHEMA_TABLES']          = 0;                $databases[$database_name]['SCHEMA_TABLE_ROWS']      = 0;                $databases[$database_name]['SCHEMA_DATA_LENGTH']     = 0;                $databases[$database_name]['SCHEMA_MAX_DATA_LENGTH'] = 0;                $databases[$database_name]['SCHEMA_INDEX_LENGTH']    = 0;                $databases[$database_name]['SCHEMA_LENGTH']          = 0;                $databases[$database_name]['SCHEMA_DATA_FREE']       = 0;                $res = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($database_name) . ';');                while ($row = PMA_DBI_fetch_assoc($res)) {                    $databases[$database_name]['SCHEMA_TABLES']++;                    $databases[$database_name]['SCHEMA_TABLE_ROWS']                        += $row['Rows'];                    $databases[$database_name]['SCHEMA_DATA_LENGTH']                        += $row['Data_length'];                    $databases[$database_name]['SCHEMA_MAX_DATA_LENGTH']                        += $row['Max_data_length'];                    $databases[$database_name]['SCHEMA_INDEX_LENGTH']                        += $row['Index_length'];                    // for InnoDB, this does not contain the number of                    // overhead bytes but the total free space                    if ('InnoDB' != $row['Engine']) {                        $databases[$database_name]['SCHEMA_DATA_FREE']                            += $row['Data_free'];                    }                    $databases[$database_name]['SCHEMA_LENGTH']                        += $row['Data_length'] + $row['Index_length'];                }                PMA_DBI_free_result($res);                unset($res);            }        }    }    /**     * apply limit and order manually now     * (caused by older MySQL < 5 or $GLOBALS['cfg']['NaturalOrder'])     */    if ($apply_limit_and_order_manual) {        $GLOBALS['callback_sort_order'] = $sort_order;        $GLOBALS['callback_sort_by'] = $sort_by;        usort($databases, 'PMA_usort_comparison_callback');        unset($GLOBALS['callback_sort_order'], $GLOBALS['callback_sort_by']);        /**         * now apply limit         */        if ($limit_count) {            $databases = array_slice($databases, $limit_offset, $limit_count);        }    }    return $databases;}/** * returns detailed array with all columns for given table in database, * or all tables/databases * * @param string $database name of database * @param string $table    name of table to retrieve columns from * @param string $column   name of specific column * @param mixed  $link     mysql link resource * * @return array */function PMA_DBI_get_columns_full($database = null, $table = null,    $column = null, $link = null){    $columns = array();    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        $sql_wheres = array();        $array_keys = array();        // get columns information from information_schema        if (null !== $database) {            $sql_wheres[] = '`TABLE_SCHEMA` = \'' . PMA_sqlAddSlashes($database) . '\' ';        } else {            $array_keys[] = 'TABLE_SCHEMA';        }        if (null !== $table) {            $sql_wheres[] = '`TABLE_NAME` = \'' . PMA_sqlAddSlashes($table) . '\' ';        } else {            $array_keys[] = 'TABLE_NAME';        }        if (null !== $column) {            $sql_wheres[] = '`COLUMN_NAME` = \'' . PMA_sqlAddSlashes($column) . '\' ';        } else {            $array_keys[] = 'COLUMN_NAME';        }        // for PMA bc:        // `[SCHEMA_FIELD_NAME]` AS `[SHOW_FULL_COLUMNS_FIELD_NAME]`        if (PMA_DRIZZLE) {            $sql = "SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME,                column_name        AS `Field`,                (CASE                    WHEN character_maximum_length > 0                        THEN concat(lower(data_type), '(', character_maximum_length, ')')                    WHEN numeric_precision > 0 OR numeric_scale > 0                        THEN concat(lower(data_type), '(', numeric_precision, ',', numeric_scale, ')')                    WHEN enum_values IS NOT NULL                        THEN concat(lower(data_type), '(', enum_values, ')')                    ELSE lower(data_type) END)                                   AS `Type`,                collation_name     AS `Collation`,                (CASE is_nullable                    WHEN 1 THEN 'YES'                    ELSE 'NO' END) AS `Null`,                (CASE                    WHEN is_used_in_primary THEN 'PRI'                    ELSE '' END)   AS `Key`,                column_default     AS `Default`,                (CASE                    WHEN is_auto_increment THEN 'auto_increment'                    WHEN column_default_update THEN 'on update ' || column_default_update                    ELSE '' END)   AS `Extra`,                NULL               AS `Privileges`,                column_comment     AS `Comment`            FROM data_dictionary.columns";        } else {            $sql = '                 SELECT *,                        `COLUMN_NAME`       AS `Field`,                        `COLUMN_TYPE`       AS `Type`,                        `COLLATION_NAME`    AS `Collation`,                        `IS_NULLABLE`       AS `Null`,                        `COLUMN_KEY`        AS `Key`,                        `COLUMN_DEFAULT`    AS `Default`,                        `EXTRA`             AS `Extra`,                        `PRIVILEGES`        AS `Privileges`,                        `COLUMN_COMMENT`    AS `Comment`                   FROM `information_schema`.`COLUMNS`';        }        if (count($sql_wheres)) {            $sql .= "\n" . ' WHERE ' . implode(' AND ', $sql_wheres);        }        $columns = PMA_DBI_fetch_result($sql, $array_keys, null, $link);        unset($sql_wheres, $sql);    } else {        if (null === $database) {            foreach ($GLOBALS['pma']->databases as $database) {                $columns[$database] = PMA_DBI_get_columns_full(                    $database, null, null, $link                );            }            return $columns;        } elseif (null === $table) {            $tables = PMA_DBI_get_tables($database);            foreach ($tables as $table) {                $columns[$table] = PMA_DBI_get_columns_full(                    $database, $table, null, $link                );            }            return $columns;        }        $sql = 'SHOW FULL COLUMNS FROM '            . PMA_backquote($database) . '.' . PMA_backquote($table);        if (null !== $column) {            $sql .= " LIKE '" . PMA_sqlAddSlashes($column, true) . "'";        }        $columns = PMA_DBI_fetch_result($sql, 'Field', null, $link);    }    $ordinal_position = 1;    foreach ($columns as $column_name => $each_column) {        // MySQL forward compatibility        // so pma could use this array as if every server is of version >5.0        $columns[$column_name]['COLUMN_NAME'] =& $columns[$column_name]['Field'];        $columns[$column_name]['COLUMN_TYPE'] =& $columns[$column_name]['Type'];        $columns[$column_name]['COLLATION_NAME'] =& $columns[$column_name]['Collation'];        $columns[$column_name]['IS_NULLABLE'] =& $columns[$column_name]['Null'];        $columns[$column_name]['COLUMN_KEY'] =& $columns[$column_name]['Key'];        $columns[$column_name]['COLUMN_DEFAULT'] =& $columns[$column_name]['Default'];        $columns[$column_name]['EXTRA'] =& $columns[$column_name]['Extra'];        $columns[$column_name]['PRIVILEGES'] =& $columns[$column_name]['Privileges'];        $columns[$column_name]['COLUMN_COMMENT'] =& $columns[$column_name]['Comment'];        $columns[$column_name]['TABLE_CATALOG'] = null;        $columns[$column_name]['TABLE_SCHEMA'] = $database;        $columns[$column_name]['TABLE_NAME'] = $table;        $columns[$column_name]['ORDINAL_POSITION'] = $ordinal_position;        $columns[$column_name]['DATA_TYPE']            = substr(                $columns[$column_name]['COLUMN_TYPE'],                0,                strpos($columns[$column_name]['COLUMN_TYPE'], '(')            );        /**         * @todo guess CHARACTER_MAXIMUM_LENGTH from COLUMN_TYPE         */        $columns[$column_name]['CHARACTER_MAXIMUM_LENGTH'] = null;        /**         * @todo guess CHARACTER_OCTET_LENGTH from CHARACTER_MAXIMUM_LENGTH         */        $columns[$column_name]['CHARACTER_OCTET_LENGTH'] = null;        $columns[$column_name]['NUMERIC_PRECISION'] = null;        $columns[$column_name]['NUMERIC_SCALE'] = null;        $columns[$column_name]['CHARACTER_SET_NAME']            = substr(                $columns[$column_name]['COLLATION_NAME'],                0,                strpos($columns[$column_name]['COLLATION_NAME'], '_')            );        $ordinal_position++;    }    if (null !== $column) {        reset($columns);        $columns = current($columns);    }    return $columns;}/** * Returns SQL query for fetching columns for a table * * The 'Key' column is not calculated properly, use PMA_DBI_get_columns() to get * correct values. * * @param string  $database name of database * @param string  $table    name of table to retrieve columns from * @param string  $column   name of column, null to show all columns * @param boolean $full     whether to return full info or only column names * * @see PMA_DBI_get_columns() * * @return  string */function PMA_DBI_get_columns_sql($database, $table, $column = null, $full = false){    if (PMA_DRIZZLE) {        // `Key` column:        // * used in primary key => PRI        // * unique one-column => UNI        // * indexed, one-column or first in multi-column => MUL        // Promotion of UNI to PRI in case no promary index exists is done after query is executed        $sql = "SELECT                column_name        AS `Field`,                (CASE                    WHEN character_maximum_length > 0                        THEN concat(lower(data_type), '(', character_maximum_length, ')')                    WHEN numeric_precision > 0 OR numeric_scale > 0                        THEN concat(lower(data_type), '(', numeric_precision, ',', numeric_scale, ')')                    WHEN enum_values IS NOT NULL                        THEN concat(lower(data_type), '(', enum_values, ')')                    ELSE lower(data_type) END)                                   AS `Type`,                " . ($full ? "                collation_name     AS `Collation`," : '') . "                (CASE is_nullable                    WHEN 1 THEN 'YES'                    ELSE 'NO' END) AS `Null`,                (CASE                    WHEN is_used_in_primary THEN 'PRI'                    WHEN is_unique AND NOT is_multi THEN 'UNI'                    WHEN is_indexed AND (NOT is_multi OR is_first_in_multi) THEN 'MUL'                    ELSE '' END)   AS `Key`,                column_default     AS `Default`,                (CASE                    WHEN is_auto_increment THEN 'auto_increment'                    WHEN column_default_update <> '' THEN 'on update ' || column_default_update                    ELSE '' END)   AS `Extra`                " . ($full ? " ,                NULL               AS `Privileges`,                column_comment     AS `Comment`" : '') . "            FROM data_dictionary.columns            WHERE table_schema = '" . PMA_sqlAddSlashes($database) . "'                AND table_name = '" . PMA_sqlAddSlashes($table) . "'                " . (($column != null) ? "                AND column_name = '" . PMA_sqlAddSlashes($column) . "'" : '');        // ORDER BY ordinal_position    } else {        $sql = 'SHOW ' . ($full ? 'FULL' : '') . ' COLUMNS            FROM ' . PMA_backquote($database) . '.' . PMA_backquote($table)            . (($column != null) ? "LIKE '" . PMA_sqlAddSlashes($column, true) . "'" : '');    }    return $sql;}/** * Returns descriptions of columns in given table (all or given by $column) * * @param string  $database name of database * @param string  $table    name of table to retrieve columns from * @param string  $column   name of column, null to show all columns * @param boolean $full     whether to return full info or only column names * @param mixed   $link     mysql link resource * * @return  false|array   array indexed by column names or, *                        if $column is given, flat array description */function PMA_DBI_get_columns($database, $table, $column = null, $full = false, $link = null){    $sql = PMA_DBI_get_columns_sql($database, $table, $column, $full);    $fields = PMA_DBI_fetch_result($sql, 'Field', null, $link);    if (! is_array($fields) || count($fields) == 0) {        return null;    }    if (PMA_DRIZZLE) {        // fix Key column, it's much simpler in PHP than in SQL        $has_pk = false;        $has_pk_candidates = false;        foreach ($fields as $f) {            if ($f['Key'] == 'PRI') {                $has_pk = true;                break;            } else if ($f['Null'] == 'NO' && ($f['Key'] == 'MUL' || $f['Key'] == 'UNI')) {                $has_pk_candidates = true;            }        }        if (!$has_pk && $has_pk_candidates) {            // check whether we can promote some unique index to PRI            $sql = "                SELECT i.index_name, p.column_name                FROM data_dictionary.indexes i                    JOIN data_dictionary.index_parts p USING (table_schema, table_name)                WHERE i.table_schema = '" . PMA_sqlAddSlashes($database) . "'                    AND i.table_name = '" . PMA_sqlAddSlashes($table) . "'                    AND i.is_unique                        AND NOT i.is_nullable";            $fs = PMA_DBI_fetch_result($sql, 'index_name', null, $link);            $fs = $fs ? array_shift($fs) : array();            foreach ($fs as $f) {                $fields[$f]['Key'] = 'PRI';            }        }    }    return ($column != null) ? array_shift($fields) : $fields;}/*** Returns SQL for fetching information on table indexes (SHOW INDEXES)** @param string $database name of database* @param string $table    name of the table whose indexes are to be retreived* @param string $where    additional conditions for WHERE** @return   array   $indexes*/function PMA_DBI_get_table_indexes_sql($database, $table, $where = null){    if (PMA_DRIZZLE) {        $sql = "SELECT                ip.table_name          AS `Table`,                (NOT ip.is_unique)     AS Non_unique,                ip.index_name          AS Key_name,                ip.sequence_in_index+1 AS Seq_in_index,                ip.column_name         AS Column_name,                (CASE                    WHEN i.index_type = 'BTREE' THEN 'A'                    ELSE NULL END)     AS Collation,                NULL                   AS Cardinality,                compare_length         AS Sub_part,                NULL                   AS Packed,                ip.is_nullable         AS `Null`,                i.index_type           AS Index_type,                NULL                   AS Comment,                i.index_comment        AS Index_comment            FROM data_dictionary.index_parts ip                LEFT JOIN data_dictionary.indexes i USING (table_schema, table_name, index_name)            WHERE table_schema = '" . PMA_sqlAddSlashes($database) . "'                AND table_name = '" . PMA_sqlAddSlashes($table) . "'        ";    } else {        $sql = 'SHOW INDEXES FROM ' . PMA_backquote($database) . '.' . PMA_backquote($table);    }    if ($where) {        $sql .= (PMA_DRIZZLE ? ' AND (' : ' WHERE (') . $where . ')';    }    return $sql;}/*** Returns indexes of a table** @param string $database name of database* @param string $table    name of the table whose indexes are to be retrieved* @param mixed  $link     mysql link resource** @return   array   $indexes*/function PMA_DBI_get_table_indexes($database, $table, $link = null){    $sql = PMA_DBI_get_table_indexes_sql($database, $table);    $indexes = PMA_DBI_fetch_result($sql, null, null, $link);    if (! is_array($indexes) || count($indexes) < 1) {        return array();    }    return $indexes;}/** * returns value of given mysql server variable * * @param string $var  mysql server variable name * @param int    $type PMA_DBI_GETVAR_SESSION|PMA_DBI_GETVAR_GLOBAL * @param mixed  $link mysql link resource|object * * @return  mixed   value for mysql server variable */function PMA_DBI_get_variable($var, $type = PMA_DBI_GETVAR_SESSION, $link = null){    if ($link === null) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    switch ($type) {    case PMA_DBI_GETVAR_SESSION:        $modifier = ' SESSION';        break;    case PMA_DBI_GETVAR_GLOBAL:        $modifier = ' GLOBAL';        break;    default:        $modifier = '';    }    return PMA_DBI_fetch_value(        'SHOW' . $modifier . ' VARIABLES LIKE \'' . $var . '\';', 0, 1, $link    );}/** * Function called just after a connection to the MySQL database server has * been established. It sets the connection collation, and determins the * version of MySQL which is running. * * @param mixed   $link           mysql link resource|object * @param boolean $is_controluser whether link is for control user */function PMA_DBI_postConnect($link, $is_controluser = false){    if (! defined('PMA_MYSQL_INT_VERSION')) {        if (PMA_cacheExists('PMA_MYSQL_INT_VERSION', true)) {            define(                'PMA_MYSQL_INT_VERSION',                PMA_cacheGet('PMA_MYSQL_INT_VERSION', true)            );            define(                'PMA_MYSQL_MAJOR_VERSION',                PMA_cacheGet('PMA_MYSQL_MAJOR_VERSION', true)            );            define(                'PMA_MYSQL_STR_VERSION',                PMA_cacheGet('PMA_MYSQL_STR_VERSION', true)            );            define(                'PMA_MYSQL_VERSION_COMMENT',                PMA_cacheGet('PMA_MYSQL_VERSION_COMMENT', true)            );        } else {            $version = PMA_DBI_fetch_single_row(                'SELECT @@version, @@version_comment',                'ASSOC',                $link            );            if ($version) {                $match = explode('.', $version['@@version']);                define('PMA_MYSQL_MAJOR_VERSION', (int)$match[0]);                define(                    'PMA_MYSQL_INT_VERSION',                    (int) sprintf('%d%02d%02d', $match[0], $match[1], intval($match[2]))                );                define('PMA_MYSQL_STR_VERSION', $version['@@version']);                define('PMA_MYSQL_VERSION_COMMENT', $version['@@version_comment']);            } else {                define('PMA_MYSQL_INT_VERSION', 50015);                define('PMA_MYSQL_MAJOR_VERSION', 5);                define('PMA_MYSQL_STR_VERSION', '5.00.15');                define('PMA_MYSQL_VERSION_COMMENT', '');            }            PMA_cacheSet(                'PMA_MYSQL_INT_VERSION',                PMA_MYSQL_INT_VERSION,                true            );            PMA_cacheSet(                'PMA_MYSQL_MAJOR_VERSION',                PMA_MYSQL_MAJOR_VERSION,                true            );            PMA_cacheSet(                'PMA_MYSQL_STR_VERSION',                PMA_MYSQL_STR_VERSION,                true            );            PMA_cacheSet(                'PMA_MYSQL_VERSION_COMMENT',                PMA_MYSQL_VERSION_COMMENT,                true            );        }        // detect Drizzle by version number:        // <year>.<month>.<build number>(.<patch rev)        define('PMA_DRIZZLE', PMA_MYSQL_MAJOR_VERSION >= 2009);    }    // Skip charsets for Drizzle    if (!PMA_DRIZZLE) {        if (! empty($GLOBALS['collation_connection'])) {            PMA_DBI_query("SET CHARACTER SET 'utf8';", $link, PMA_DBI_QUERY_STORE);            PMA_DBI_query(                "SET collation_connection = '" . PMA_sqlAddSlashes($GLOBALS['collation_connection']) . "';",                $link,                PMA_DBI_QUERY_STORE            );        } else {            PMA_DBI_query(                "SET NAMES 'utf8' COLLATE 'utf8_general_ci';",                $link,                PMA_DBI_QUERY_STORE            );        }    }    // Cache plugin list for Drizzle    if (PMA_DRIZZLE && !PMA_cacheExists('drizzle_engines', true)) {        $sql = "SELECT p.plugin_name, m.module_library            FROM data_dictionary.plugins p                JOIN data_dictionary.modules m USING (module_name)            WHERE p.plugin_type = 'StorageEngine'                AND p.plugin_name NOT IN ('FunctionEngine', 'schema')                AND p.is_active = 'YES'";        $engines = PMA_DBI_fetch_result($sql, 'plugin_name', null, $link);        PMA_cacheSet('drizzle_engines', $engines, true);    }}/** * returns a single value from the given result or query, * if the query or the result has more than one row or field * the first field of the first row is returned * * <code> * $sql = 'SELECT `name` FROM `user` WHERE `id` = 123'; * $user_name = PMA_DBI_fetch_value($sql); * // produces * // $user_name = 'John Doe' * </code> * * @param string|mysql_result $result     query or mysql result * @param integer             $row_number row to fetch the value from, *                                        starting at 0, with 0 beeing default * @param integer|string      $field      field to fetch the value from, *                                        starting at 0, with 0 beeing default * @param resource            $link       mysql link * * @return mixed value of first field in first row from result *               or false if not found */function PMA_DBI_fetch_value($result, $row_number = 0, $field = 0, $link = null){    $value = false;    if (is_string($result)) {        $result = PMA_DBI_try_query($result, $link, PMA_DBI_QUERY_STORE, false);    }    // return false if result is empty or false    // or requested row is larger than rows in result    if (PMA_DBI_num_rows($result) < ($row_number + 1)) {        return $value;    }    // if $field is an integer use non associative mysql fetch function    if (is_int($field)) {        $fetch_function = 'PMA_DBI_fetch_row';    } else {        $fetch_function = 'PMA_DBI_fetch_assoc';    }    // get requested row    for ($i = 0; $i <= $row_number; $i++) {        $row = $fetch_function($result);    }    PMA_DBI_free_result($result);    // return requested field    if (isset($row[$field])) {        $value = $row[$field];    }    unset($row);    return $value;}/** * returns only the first row from the result * * <code> * $sql = 'SELECT * FROM `user` WHERE `id` = 123'; * $user = PMA_DBI_fetch_single_row($sql); * // produces * // $user = array('id' => 123, 'name' => 'John Doe') * </code> * * @param string|mysql_result $result query or mysql result * @param string              $type   NUM|ASSOC|BOTH *                                    returned array should either numeric *                                    associativ or booth * @param resource            $link   mysql link * * @return array|boolean first row from result *                       or false if result is empty */function PMA_DBI_fetch_single_row($result, $type = 'ASSOC', $link = null){    if (is_string($result)) {        $result = PMA_DBI_try_query($result, $link, PMA_DBI_QUERY_STORE, false);    }    // return null if result is empty or false    if (! PMA_DBI_num_rows($result)) {        return false;    }    switch ($type) {    case 'NUM' :        $fetch_function = 'PMA_DBI_fetch_row';        break;    case 'ASSOC' :        $fetch_function = 'PMA_DBI_fetch_assoc';        break;    case 'BOTH' :    default :        $fetch_function = 'PMA_DBI_fetch_array';        break;    }    $row = $fetch_function($result);    PMA_DBI_free_result($result);    return $row;}/** * returns all rows in the resultset in one array * * <code> * $sql = 'SELECT * FROM `user`'; * $users = PMA_DBI_fetch_result($sql); * // produces * // $users[] = array('id' => 123, 'name' => 'John Doe') * * $sql = 'SELECT `id`, `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql, 'id'); * // produces * // $users['123'] = array('id' => 123, 'name' => 'John Doe') * * $sql = 'SELECT `id`, `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql, 0); * // produces * // $users['123'] = array(0 => 123, 1 => 'John Doe') * * $sql = 'SELECT `id`, `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql, 'id', 'name'); * // or * $users = PMA_DBI_fetch_result($sql, 0, 1); * // produces * // $users['123'] = 'John Doe' * * $sql = 'SELECT `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql); * // produces * // $users[] = 'John Doe' * * $sql = 'SELECT `group`, `name` FROM `user`' * $users = PMA_DBI_fetch_result($sql, array('group', null), 'name'); * // produces * // $users['admin'][] = 'John Doe' * * $sql = 'SELECT `group`, `name` FROM `user`' * $users = PMA_DBI_fetch_result($sql, array('group', 'name'), 'id'); * // produces * // $users['admin']['John Doe'] = '123' * </code> * * @param string|mysql_result $result query or mysql result * @param string|integer      $key    field-name or offset *                                    used as key for array * @param string|integer      $value  value-name or offset *                                    used as value for array * @param resource            $link   mysql link * @param mixed               $options * * @return array resultrows or values indexed by $key */function PMA_DBI_fetch_result($result, $key = null, $value = null,    $link = null, $options = 0){    $resultrows = array();    if (is_string($result)) {        $result = PMA_DBI_try_query($result, $link, $options, false);    }    // return empty array if result is empty or false    if (! $result) {        return $resultrows;    }    $fetch_function = 'PMA_DBI_fetch_assoc';    // no nested array if only one field is in result    if (null === $key && 1 === PMA_DBI_num_fields($result)) {        $value = 0;        $fetch_function = 'PMA_DBI_fetch_row';    }    // if $key is an integer use non associative mysql fetch function    if (is_int($key)) {        $fetch_function = 'PMA_DBI_fetch_row';    }    if (null === $key && null === $value) {        while ($row = $fetch_function($result)) {            $resultrows[] = $row;        }    } elseif (null === $key) {        while ($row = $fetch_function($result)) {            $resultrows[] = $row[$value];        }    } elseif (null === $value) {        if (is_array($key)) {            while ($row = $fetch_function($result)) {                $result_target =& $resultrows;                foreach ($key as $key_index) {                    if (null === $key_index) {                        $result_target =& $result_target[];                        continue;                    }                    if (! isset($result_target[$row[$key_index]])) {                        $result_target[$row[$key_index]] = array();                    }                    $result_target =& $result_target[$row[$key_index]];                }                $result_target = $row;            }        } else {            while ($row = $fetch_function($result)) {                $resultrows[$row[$key]] = $row;            }        }    } else {        if (is_array($key)) {            while ($row = $fetch_function($result)) {                $result_target =& $resultrows;                foreach ($key as $key_index) {                    if (null === $key_index) {                        $result_target =& $result_target[];                        continue;                    }                    if (! isset($result_target[$row[$key_index]])) {                        $result_target[$row[$key_index]] = array();                    }                    $result_target =& $result_target[$row[$key_index]];                }                $result_target = $row[$value];            }        } else {            while ($row = $fetch_function($result)) {                $resultrows[$row[$key]] = $row[$value];            }        }    }    PMA_DBI_free_result($result);    return $resultrows;}/** * Get supported SQL compatibility modes * * @return array supported SQL compatibility modes */function PMA_DBI_getCompatibilities(){    // Drizzle doesn't support compatibility modes    if (PMA_DRIZZLE) {        return array();    }    $compats = array('NONE');    $compats[] = 'ANSI';    $compats[] = 'DB2';    $compats[] = 'MAXDB';    $compats[] = 'MYSQL323';    $compats[] = 'MYSQL40';    $compats[] = 'MSSQL';    $compats[] = 'ORACLE';    // removed; in MySQL 5.0.33, this produces exports that    // can't be read by POSTGRESQL (see our bug #1596328)    //$compats[] = 'POSTGRESQL';    $compats[] = 'TRADITIONAL';    return $compats;}/** * returns warnings for last query * * @param resource $link mysql link resource * * @return array warnings */function PMA_DBI_get_warnings($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return array();        }    }    return PMA_DBI_fetch_result('SHOW WARNINGS', null, null, $link);}/** * returns true (int > 0) if current user is superuser * otherwise 0 * * @return bool Whether use is a superuser */function PMA_isSuperuser(){    if (PMA_cacheExists('is_superuser', true)) {        return PMA_cacheGet('is_superuser', true);    }    // when connection failed we don't have a $userlink    if (isset($GLOBALS['userlink'])) {        if (PMA_DRIZZLE) {            // Drizzle has no authorization by default, so when no plugin is            // enabled everyone is a superuser            // Known authorization libraries: regex_policy, simple_user_policy            // Plugins limit object visibility (dbs, tables, processes), we can            // safely assume we always deal with superuser            $r = true;        } else {            // check access to mysql.user table            $r = (bool) PMA_DBI_try_query(                'SELECT COUNT(*) FROM mysql.user',                $GLOBALS['userlink'],                PMA_DBI_QUERY_STORE            );        }        PMA_cacheSet('is_superuser', $r, true);    } else {        PMA_cacheSet('is_superuser', false, true);    }    return PMA_cacheGet('is_superuser', true);}/** * returns an array of PROCEDURE or FUNCTION names for a db * * @param string   $db    db name * @param string   $which PROCEDURE | FUNCTION * @param resource $link  mysql link * * @returnarray the procedure names or function names */function PMA_DBI_get_procedures_or_functions($db, $which, $link = null){    if (PMA_DRIZZLE) {        // Drizzle doesn't support functions and procedures        return array();    }    $shows = PMA_DBI_fetch_result('SHOW ' . $which . ' STATUS;', null, null, $link);    $result = array();    foreach ($shows as $one_show) {        if ($one_show['Db'] == $db && $one_show['Type'] == $which) {            $result[] = $one_show['Name'];        }    }    return($result);}/** * returns the definition of a specific PROCEDURE, FUNCTION, EVENT or VIEW * * @param string   $db    db name * @param string   $which PROCEDURE | FUNCTION | EVENT | VIEW * @param string   $name  the procedure|function|event|view name * @param resource $link  mysql link * * @return string the definition */function PMA_DBI_get_definition($db, $which, $name, $link = null){    $returned_field = array(        'PROCEDURE' => 'Create Procedure',        'FUNCTION'  => 'Create Function',        'EVENT'     => 'Create Event',        'VIEW'      => 'Create View'    );    $query = 'SHOW CREATE ' . $which . ' '        . PMA_backquote($db) . '.' . PMA_backquote($name);    return(PMA_DBI_fetch_value($query, 0, $returned_field[$which]));}/** * returns details about the TRIGGERs for a specific table or database * * @param string $db        db name * @param string $table     table name * @param string $delimiter the delimiter to use (may be empty) * * @return array information about triggers (may be empty) */function PMA_DBI_get_triggers($db, $table = '', $delimiter = '//'){    if (PMA_DRIZZLE) {        // Drizzle doesn't support triggers        return array();    }    $result = array();    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        // Note: in http://dev.mysql.com/doc/refman/5.0/en/faqs-triggers.html        // their example uses WHERE TRIGGER_SCHEMA='dbname' so let's use this        // instead of WHERE EVENT_OBJECT_SCHEMA='dbname'        $query = 'SELECT TRIGGER_SCHEMA, TRIGGER_NAME, EVENT_MANIPULATION'            . ', EVENT_OBJECT_TABLE, ACTION_TIMING, ACTION_STATEMENT'            . ', EVENT_OBJECT_SCHEMA, EVENT_OBJECT_TABLE, DEFINER'            . ' FROM information_schema.TRIGGERS'            . ' WHERE TRIGGER_SCHEMA= \'' . PMA_sqlAddSlashes($db) . '\'';        if (! empty($table)) {            $query .= " AND EVENT_OBJECT_TABLE = '" . PMA_sqlAddSlashes($table) . "';";        }    } else {        $query = "SHOW TRIGGERS FROM " . PMA_backquote($db);        if (! empty($table)) {            $query .= " LIKE '" . PMA_sqlAddSlashes($table, true) . "';";        }    }    if ($triggers = PMA_DBI_fetch_result($query)) {        foreach ($triggers as $trigger) {            if ($GLOBALS['cfg']['Server']['DisableIS']) {                $trigger['TRIGGER_NAME'] = $trigger['Trigger'];                $trigger['ACTION_TIMING'] = $trigger['Timing'];                $trigger['EVENT_MANIPULATION'] = $trigger['Event'];                $trigger['EVENT_OBJECT_TABLE'] = $trigger['Table'];                $trigger['ACTION_STATEMENT'] = $trigger['Statement'];                $trigger['DEFINER'] = $trigger['Definer'];            }            $one_result = array();            $one_result['name'] = $trigger['TRIGGER_NAME'];            $one_result['table'] = $trigger['EVENT_OBJECT_TABLE'];            $one_result['action_timing'] = $trigger['ACTION_TIMING'];            $one_result['event_manipulation'] = $trigger['EVENT_MANIPULATION'];            $one_result['definition'] = $trigger['ACTION_STATEMENT'];            $one_result['definer'] = $trigger['DEFINER'];            // do not prepend the schema name; this way, importing the            // definition into another schema will work            $one_result['full_trigger_name'] = PMA_backquote($trigger['TRIGGER_NAME']);            $one_result['drop'] = 'DROP TRIGGER IF EXISTS '                . $one_result['full_trigger_name'];            $one_result['create'] = 'CREATE TRIGGER '                . $one_result['full_trigger_name'] . ' '                . $trigger['ACTION_TIMING']. ' '                . $trigger['EVENT_MANIPULATION']                . ' ON ' . PMA_backquote($trigger['EVENT_OBJECT_TABLE'])                . "\n" . ' FOR EACH ROW '                . $trigger['ACTION_STATEMENT'] . "\n" . $delimiter . "\n";            $result[] = $one_result;        }    }    // Sort results by name    $name = array();    foreach ($result as $key => $value) {        $name[] = $value['name'];    }    array_multisort($name, SORT_ASC, $result);    return($result);}/** * Formats database error message in a friendly way. * This is needed because some errors messages cannot * be obtained by mysql_error(). * * @param int    $error_number  Error code * @param string $error_message Error message as returned by server * * @return string HML text with error details */function PMA_DBI_formatError($error_number, $error_message){    if (! empty($error_message)) {        $error_message = PMA_DBI_convert_message($error_message);    }    $error_message = htmlspecialchars($error_message);    $error = '#' . ((string) $error_number);    if ($error_number == 2002) {        $error .= ' - ' . $error_message;        $error .= '<br />' . __('The server is not responding (or the local server\'s socket is not correctly configured).');    } elseif ($error_number == 2003) {        $error .= ' - ' . $error_message;        $error .= '<br />' . __('The server is not responding.');    } elseif ($error_number == 1005) {        if (strpos($error_message, 'errno: 13') !== false) {            $error .= ' - ' . $error_message;            $error .= '<br />' . __('Please check privileges of directory containing database.');        } else {            /* InnoDB contraints, see             * http://dev.mysql.com/doc/refman/5.0/en/innodb-foreign-key-constraints.html             */            $error .= ' - ' . $error_message .                ' (<a href="server_engines.php' .                PMA_generate_common_url(array('engine' => 'InnoDB', 'page' => 'Status')) .                '">' . __('Details...') . '</a>)';        }    } else {        $error .= ' - ' . $error_message;    }    return $error;}/** * Checks whether given schema is a system schema: information_schema * (MySQL and Drizzle) or data_dictionary (Drizzle) * * @param string $schema_name           Name of schema (database) to test * @param bool   $test_for_mysql_schema Whether 'mysql' schema should *                                      be treated the same as IS and DD * * @return bool */function PMA_is_system_schema($schema_name, $test_for_mysql_schema = false){    return strtolower($schema_name) == 'information_schema'            || (!PMA_DRIZZLE && strtolower($schema_name) == 'performance_schema')            || (PMA_DRIZZLE && strtolower($schema_name) == 'data_dictionary')            || ($test_for_mysql_schema && !PMA_DRIZZLE && $schema_name == 'mysql');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * session handling * * @todo    add failover or warn if sessions are not configured properly * @todo    add an option to use mm-module for session handler * @see     http://www.php.net/session * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// verify if PHP supports session, die if it does notif (!@function_exists('session_name')) {    PMA_warnMissingExtension('session', true);} elseif (ini_get('session.auto_start') == true && session_name() != 'phpMyAdmin') {    // Do not delete the existing session, it might be used by other    // applications; instead just close it.    session_write_close();}// disable starting of sessions before all settings are done// does not work, besides how it is written in php manual//ini_set('session.auto_start', 0);// session cookie settingssession_set_cookie_params(0, $GLOBALS['PMA_Config']->getCookiePath(),    '', $GLOBALS['PMA_Config']->isHttps(), true);// cookies are safer (use @ini_set() in case this function is disabled)@ini_set('session.use_cookies', true);// optionally set session_save_path$path = $GLOBALS['PMA_Config']->get('SessionSavePath');if (!empty($path)) {    session_save_path($path);}// but not all user allow cookies@ini_set('session.use_only_cookies', false);// do not force transparent session ids, see bug #3398788//@ini_set('session.use_trans_sid', true);@ini_set('url_rewriter.tags',    'a=href,frame=src,input=src,form=fakeentry,fieldset=');//ini_set('arg_separator.output', '&amp;');// delete session/cookies when browser is closed@ini_set('session.cookie_lifetime', 0);// warn but dont work with bug@ini_set('session.bug_compat_42', false);@ini_set('session.bug_compat_warn', true);// use more secure session ids@ini_set('session.hash_function', 1);// some pages (e.g. stylesheet) may be cached on clients, but not in shared// proxy serverssession_cache_limiter('private');// start the session// on some servers (for example, sourceforge.net), we get a permission error// on the session data directory, so I add some "@"// See bug #1538132. This would block normal behavior on a cluster//ini_set('session.save_handler', 'files');$session_name = 'phpMyAdmin';@session_name($session_name);if (! isset($_COOKIE[$session_name])) {    // on first start of session we check for errors    // f.e. session dir cannot be accessed - session file not created    $orig_error_count = $GLOBALS['error_handler']->countErrors();    $r = session_start();    if ($r !== true || $orig_error_count != $GLOBALS['error_handler']->countErrors()) {        setcookie($session_name, '', 1);        /*         * Session initialization is done before selecting language, so we         * can not use translations here.         */        PMA_fatalError('Cannot start session without errors, please check errors given in your PHP and/or webserver log file and configure your PHP installation properly.');    }    unset($orig_error_count);} else {    session_start();}/** * Token which is used for authenticating access queries. * (we use "space PMA_token space" to prevent overwriting) */if (! isset($_SESSION[' PMA_token '])) {    $_SESSION[' PMA_token '] = md5(uniqid(rand(), true));}/** * tries to secure session from hijacking and fixation * should be called before login and after successfull login * (only required if sensitive information stored in session) * */function PMA_secureSession(){    // prevent session fixation and XSS    session_regenerate_id(true);    $_SESSION[' PMA_token '] = md5(uniqid(rand(), true));}?>
