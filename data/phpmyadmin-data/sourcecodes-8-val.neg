<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * User preferences management page * * @package PhpMyAdmin *//** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';require_once './libraries/user_preferences.lib.php';require_once './libraries/config/config_functions.lib.php';require_once './libraries/config/messages.inc.php';require_once './libraries/config/ConfigFile.class.php';require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require './libraries/config/user_preferences.forms.php';PMA_userprefs_pageinit();$error = '';if (isset($_POST['submit_export']) && filter_input(INPUT_POST, 'export_type') == 'text_file') {    // export to JSON file    $filename = 'phpMyAdmin-config-' . urlencode(PMA_getenv('HTTP_HOST')) . '.json';    PMA_download_header($filename, 'application/json');    $settings = PMA_load_userprefs();    echo json_encode($settings['config_data']);    return;} else if (isset($_POST['submit_get_json'])) {    $settings = PMA_load_userprefs();    header('Content-Type: application/json');    echo json_encode(array(        'prefs' => json_encode($settings['config_data']),        'mtime' => $settings['mtime']));    return;} else if (isset($_POST['submit_import'])) {    // load from JSON file    $json = '';    if (filter_input(INPUT_POST, 'import_type') == 'text_file'            && isset($_FILES['import_file'])            && $_FILES['import_file']['error'] == UPLOAD_ERR_OK            && is_uploaded_file($_FILES['import_file']['tmp_name'])) {        // read JSON from uploaded file        $open_basedir = @ini_get('open_basedir');        $file_to_unlink = '';        $import_file = $_FILES['import_file']['tmp_name'];        // If we are on a server with open_basedir, we must move the file        // before opening it. The doc explains how to create the "./tmp"        // directory        if (!empty($open_basedir)) {            $tmp_subdir = (PMA_IS_WINDOWS ? '.\\tmp\\' : './tmp/');            if (is_writable($tmp_subdir)) {                $import_file_new = tempnam($tmp_subdir, 'prefs');                if (move_uploaded_file($import_file, $import_file_new)) {                    $import_file = $import_file_new;                    $file_to_unlink = $import_file_new;                }            }        }        $json = file_get_contents($import_file);        if ($file_to_unlink) {            unlink($file_to_unlink);        }    } else {        // read from POST value (json)        $json = filter_input(INPUT_POST, 'json');    }    // hide header message    $_SESSION['userprefs_autoload'] = true;    $config = json_decode($json, true);    $return_url = filter_input(INPUT_POST, 'return_url');    if (! is_array($config)) {        $error = __('Could not import configuration');    } else {        // sanitize input values: treat them as though they came from HTTP POST request        $form_display = new FormDisplay();        foreach ($forms as $formset_id => $formset) {            foreach ($formset as $form_name => $form) {                $form_display->registerForm($formset_id . ': ' . $form_name, $form);            }        }        $cf = ConfigFile::getInstance();        $new_config = $cf->getFlatDefaultConfig();        if (!empty($_POST['import_merge'])) {            $new_config = array_merge($new_config, $cf->getConfigArray());        }        $new_config = array_merge($new_config, $config);        $_POST_bak = $_POST;        foreach ($new_config as $k => $v) {            $_POST[str_replace('/', '-', $k)] = $v;        }        $cf->resetConfigData();        $all_ok = $form_display->process(true, false);        $all_ok = $all_ok && !$form_display->hasErrors();        $_POST = $_POST_bak;        if (!$all_ok && isset($_POST['fix_errors'])) {            $form_display->fixErrors();            $all_ok = true;        }        if (!$all_ok) {            // mimic original form and post json in a hidden field            include './libraries/header.inc.php';            include './libraries/user_preferences.inc.php';            $msg = PMA_Message::error(__('Configuration contains incorrect data for some fields.'));            $msg->display();            echo '<div class="config-form">';            $form_display->displayErrors();            echo '</div>';            ?>            <form action="prefs_manage.php" method="post">                <?php echo PMA_generate_common_hidden_inputs() . "\n"; ?>                <input type="hidden" name="json" value="<?php echo htmlspecialchars($json) ?>" />                <input type="hidden" name="fix_errors" value="1" />                <?php if (!empty($_POST['import_merge'])): ?>                <input type="hidden" name="import_merge" value="1" />                <?php endif; ?>                <?php if ($return_url): ?>                <input type="hidden" name="return_url" value="<?php echo htmlspecialchars($return_url) ?>" />                <?php endif; ?>                <p><?php echo __('Do you want to import remaining settings?') ?></p>                <input type="submit" name="submit_import" value="<?php echo __('Yes') ?>" />                <input type="submit" name="submit_ignore" value="<?php echo __('No') ?>" />            </form>            <?php            include './libraries/footer.inc.php';            return;        }        // check for ThemeDefault and fontsize        $params = array();        if (isset($config['ThemeDefault'])                && $_SESSION['PMA_Theme_Manager']->theme->getId() != $config['ThemeDefault']                && $_SESSION['PMA_Theme_Manager']->checkTheme($config['ThemeDefault'])) {            $_SESSION['PMA_Theme_Manager']->setActiveTheme($config['ThemeDefault']);            $_SESSION['PMA_Theme_Manager']->setThemeCookie();            $params['reload_left_frame'] = true;        }        if (isset($config['fontsize'])                && $config['fontsize'] != $GLOBALS['PMA_Config']->get('fontsize')) {            $params['set_fontsize'] = $config['fontsize'];            $params['reload_left_frame'] = true;        }        if (isset($config['lang'])                && $config['lang'] != $GLOBALS['lang']) {            $params['lang'] = $config['lang'];            $params['reload_left_frame'] = true;        }        if (isset($config['collation_connection'])                && $config['collation_connection'] != $GLOBALS['collation_connection']) {            $params['collation_connection'] = $config['collation_connection'];            $params['reload_left_frame'] = true;        }        // save settings        $old_settings = PMA_load_userprefs();        $result = PMA_save_userprefs($cf->getConfigArray());        if ($result === true) {            if ($return_url) {                $query = explode('&', parse_url($return_url, PHP_URL_QUERY));                $return_url = parse_url($return_url, PHP_URL_PATH);                foreach ($query as $q) {                    $pos = strpos($q, '=');                    $k = substr($q, 0, $pos);                    if ($k == 'token') {                        continue;                    }                    $params[$k] = substr($q, $pos+1);                }            } else {                $return_url = 'prefs_manage.php';            }            // reload config            $GLOBALS['PMA_Config']->loadUserPreferences();            PMA_userprefs_redirect($forms, $old_settings, $return_url, $params);            exit;        } else {            $error = $result;        }    }} else if (isset($_POST['submit_clear'])) {    $old_settings = PMA_load_userprefs();    $result = PMA_save_userprefs(array());    if ($result === true) {        $params = array();        if ($_SESSION['PMA_Theme_Manager']->theme->getId() != 'original') {            $GLOBALS['PMA_Config']->removeCookie($_SESSION['PMA_Theme_Manager']->getThemeCookieName());            unset($_SESSION['PMA_Theme_Manager']);            unset($_SESSION['PMA_Theme']);            $params['reload_left_frame'] = true;        }        if ($GLOBALS['PMA_Config']->get('fontsize') != '82%') {            $GLOBALS['PMA_Config']->removeCookie('pma_fontsize');            $params['reload_left_frame'] = true;        }        $GLOBALS['PMA_Config']->removeCookie('pma_collaction_connection');        $GLOBALS['PMA_Config']->removeCookie('pma_lang');        PMA_userprefs_redirect($forms, $old_settings, 'prefs_manage.php', $params);        exit;    } else {        $error = $result;    }    exit;}$GLOBALS['js_include'][] = 'config.js';require './libraries/header.inc.php';require './libraries/user_preferences.inc.php';if ($error) {    if (!$error instanceof PMA_Message) {        $error = PMA_Message::error($error);    }    $error->display();}?><script type="text/javascript"><?phpPMA_printJsValue("PMA_messages['strSavedOn']", __('Saved on: @DATE@'));?></script><div id="maincontainer">    <div id="main_pane_left">        <div class="group">            <h2><?php echo __('Import') ?></h2>            <form class="group-cnt prefs-form" name="prefs_import" action="prefs_manage.php" method="post" enctype="multipart/form-data">                <?php                echo PMA_generateHiddenMaxFileSize($max_upload_size) . "\n";                echo PMA_generate_common_hidden_inputs() . "\n";                ?>                <input type="hidden" name="json" value="" />                <input type="radio" id="import_text_file" name="import_type" value="text_file" checked="checked" />                <label for="import_text_file"><?php echo __('Import from file') ?></label>                <div id="opts_import_text_file" class="prefsmanage_opts">                    <label for="input_import_file"><?php echo __('Browse your computer:'); ?></label>                    <input type="file" name="import_file" id="input_import_file" />                </div>                <input type="radio" id="import_local_storage" name="import_type" value="local_storage" disabled="disabled" />                <label for="import_local_storage"><?php echo __('Import from browser\'s storage') ?></label>                <div id="opts_import_local_storage" class="prefsmanage_opts disabled">                    <div class="localStorage-supported">                        <?php echo __('Settings will be imported from your browser\'s local storage.') ?>                        <br />                        <span class="localStorage-exists">                            <?php echo __('Saved on: @DATE@') ?>                        </span>                        <span class="localStorage-empty">                            <?php  PMA_Message::notice(__('You have no saved settings!'))->display() ?>                        </span>                    </div>                    <span class="localStorage-unsupported">                        <?php PMA_Message::notice(__('This feature is not supported by your web browser'))->display() ?>                    </span>                </div>                <input type="checkbox" id="import_merge" name="import_merge" />                <label for="import_merge"><?php echo __('Merge with current configuration') ?></label>                <br /><br />                <input type="submit" name="submit_import" value="<?php echo __('Go'); ?>" />            </form>        </div>        <?php        if (file_exists('./setup/index.php')) {            // show only if setup script is available, allows to disable this message            // by simply removing setup directory        ?>        <div class="group">            <h2><?php echo __('More settings') ?></h2>            <div class="group-cnt">                <?php                echo sprintf(__('You can set more settings by modifying config.inc.php, eg. by using %sSetup script%s.'), '<a href="setup/index.php">', '</a>');                echo PMA_showDocu('setup_script');                ?>            </div>        </div>        <?php        }        ?>    </div>    <div id="main_pane_right">        <div class="group">            <h2><?php echo __('Export') ?></h2>            <div class="click-hide-message group-cnt" style="display:none">                <?php                $message = PMA_Message::rawSuccess(__('Configuration has been saved'));                $message->display();                ?>            </div>            <form class="group-cnt prefs-form" name="prefs_export" action="prefs_manage.php" method="post">            <?php echo PMA_generate_common_hidden_inputs() . "\n" ?>                <div style="padding-bottom:0.5em">                    <input type="radio" id="export_text_file" name="export_type" value="text_file" checked="checked" />                    <label for="export_text_file"><?php echo __('Save as file') ?></label>                    <br />                    <input type="radio" id="export_local_storage" name="export_type" value="local_storage" disabled="disabled" />                    <label for="export_local_storage"><?php echo __('Save to browser\'s storage') ?></label>                </div>                <div id="opts_export_local_storage" class="prefsmanage_opts disabled">                    <span class="localStorage-supported">                        <?php echo __('Settings will be saved in your browser\'s local storage.') ?>                        <span class="localStorage-exists">                            <br /><b><?php echo __('Existing settings will be overwritten!') ?></b>                        </span>                    </span>                    <span class="localStorage-unsupported">                        <?php PMA_Message::notice(__('This feature is not supported by your web browser'))->display() ?>                    </span>                </div>                <br />                <input type="submit" name="submit_export" value="<?php echo __('Go'); ?>" />            </form>        </div>        <div class="group">            <h2><?php echo __('Reset') ?></h2>            <form class="group-cnt prefs-form" name="prefs_reset" action="prefs_manage.php" method="post">            <?php echo PMA_generate_common_hidden_inputs() . "\n" ?>                <?php echo __('You can reset all your settings and restore them to default values.') ?>                <br /><br />                <input type="submit" name="submit_clear" value="<?php echo __('Reset') ?>" />            </form>        </div>    </div>    <br class="clearfloat" /></div><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build MediaWiki dumps of tables * * @package PhpMyAdmin-Export * @subpackage MediaWiki */if (! defined('PHPMYADMIN')) {    exit;}if (isset($plugin_list)) {    $plugin_list['mediawiki'] = array(        'text' => __('MediaWiki Table'),        'extension' => 'txt',        'mime_type' => 'text/plain',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in MediaWiki format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query) {        $columns = PMA_DBI_get_columns($db, $table);        $columns = array_values($columns);        $row_cnt = count($columns);        $output = "{| cellpadding=\"10\" cellspacing=\"0\" border=\"1\" style=\"text-align:center;\"\n";        $output .= "|+'''" . $table . "'''\n";        $output .= "|- style=\"background:#ffdead;\"\n";        $output .= "! style=\"background:#ffffff\" | \n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Field'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Type\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Type'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Null\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Null'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Default\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Default'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Extra\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Extra'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|}\n\n\n\n";        return PMA_exportOutputHandler($output);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * Load BDB class. */require_once './libraries/engines/bdb.lib.php';/** * This is same as BDB. * @package PhpMyAdmin-Engines */class PMA_StorageEngine_berkeleydb extends PMA_StorageEngine_bdb{}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Prepares the $column_order array * * @return array */function PMA_getColumnOrder(){    $column_order['DEFAULT_COLLATION_NAME'] = array(            'disp_name' => __('Collation'),            'description_function' => 'PMA_getCollationDescr',            'format'    => 'string',            'footer'    => PMA_getServerCollation(),        );    $column_order['SCHEMA_TABLES'] = array(        'disp_name' => __('Tables'),        'format'    => 'number',        'footer'    => 0,    );    $column_order['SCHEMA_TABLE_ROWS'] = array(        'disp_name' => __('Rows'),        'format'    => 'number',        'footer'    => 0,    );    $column_order['SCHEMA_DATA_LENGTH'] = array(        'disp_name' => __('Data'),        'format'    => 'byte',        'footer'    => 0,    );    $column_order['SCHEMA_INDEX_LENGTH'] = array(        'disp_name' => __('Indexes'),        'format'    => 'byte',        'footer'    => 0,    );    $column_order['SCHEMA_LENGTH'] = array(        'disp_name' => __('Total'),        'format'    => 'byte',        'footer'    => 0,    );    $column_order['SCHEMA_DATA_FREE'] = array(        'disp_name' => __('Overhead'),        'format'    => 'byte',        'footer'    => 0,    );    return $column_order;}/* * Builds the HTML td elements for one database to display in the list * of databases from server_databases.php (which can be modified by * db_create.php) * * @param array $current * @param boolean $is_superuser * @param string $checkall * @param string $url_query * @param array $column_order * @param array $replication_types * @param array $replication_info * * @return array $column_order, $out */function PMA_buildHtmlForDb($current, $is_superuser, $checkall, $url_query, $column_order, $replication_types, $replication_info){    $out = '';    if ($is_superuser || $GLOBALS['cfg']['AllowUserDropDatabase']) {        $out .= '<td class="tool">';        $out .= '<input type="checkbox" name="selected_dbs[]" title="' . htmlspecialchars($current['SCHEMA_NAME']) . '" value="' . htmlspecialchars($current['SCHEMA_NAME']) . '" ';        if (!PMA_is_system_schema($current['SCHEMA_NAME'], true)) {            $out .= (empty($checkall) ? '' : 'checked="checked" ') . '/>';        } else {            $out .= ' disabled="disabled" />';        }        $out .= '</td>';    }    $out .= '<td class="name">'           . '        <a onclick="'           . 'if (window.parent.openDb &amp;&amp; window.parent.openDb(\'' . PMA_jsFormat($current['SCHEMA_NAME'], false) . '\')) return false;'           . '" href="index.php?' . $url_query . '&amp;db='           . urlencode($current['SCHEMA_NAME']) . '" title="'           . sprintf(__('Jump to database'), htmlspecialchars($current['SCHEMA_NAME']))           . '" target="_parent">'           . ' ' . htmlspecialchars($current['SCHEMA_NAME'])           . '</a>'           . '</td>';    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $current)) {            if (is_numeric($stat['footer'])) {                $column_order[$stat_name]['footer'] += $current[$stat_name];            }            if ($stat['format'] === 'byte') {                list($value, $unit) = PMA_formatByteDown($current[$stat_name], 3, 1);            } elseif ($stat['format'] === 'number') {                $value = PMA_formatNumber($current[$stat_name], 0);            } else {                $value = htmlentities($current[$stat_name], 0);            }            $out .= '<td class="value">';            if (isset($stat['description_function'])) {                $out .= '<dfn title="' . $stat['description_function']($current[$stat_name]) . '">';            }            $out .= $value;            if (isset($stat['description_function'])) {                $out .= '</dfn>';            }            $out .= '</td>';            if ($stat['format'] === 'byte') {                $out .= '<td class="unit">' . $unit . '</td>';            }        }    }    foreach ($replication_types as $type) {        if ($replication_info[$type]['status']) {            $out .= '<td class="tool" style="text-align: center;">';            if (strlen(array_search($current["SCHEMA_NAME"], $replication_info[$type]['Ignore_DB'])) > 0) {                $out .= PMA_getIcon('s_cancel.png',  __('Not replicated'));            } else {                $key = array_search($current["SCHEMA_NAME"], $replication_info[$type]['Do_DB']);                if (strlen($key) > 0 || ($replication_info[$type]['Do_DB'][0] == "" && count($replication_info[$type]['Do_DB']) == 1)) {                    // if ($key != null) did not work for index "0"                    $out .= PMA_getIcon('s_success.png', __('Replicated'));                }            }            $out .= '</td>';        }    }    if ($is_superuser && !PMA_DRIZZLE) {        $out .= '<td class="tool">'               . '<a onclick="'               . 'if (window.parent.setDb) window.parent.setDb(\'' . PMA_jsFormat($current['SCHEMA_NAME']) . '\');'               . '" href="./server_privileges.php?' . $url_query               . '&amp;checkprivs=' . urlencode($current['SCHEMA_NAME'])               . '" title="' . sprintf(__('Check privileges for database &quot;%s&quot;.'), htmlspecialchars($current['SCHEMA_NAME']))               . '">'               . ' '               . PMA_getIcon('s_rights.png', __('Check Privileges'))               . '</a></td>';    }    return array($column_order, $out);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Provides download to a given field defined in parameters. * @package PhpMyAdmin *//** * Common functions. */require_once './libraries/common.inc.php';require_once './libraries/mime.lib.php';/* Check parameters */PMA_checkParameters(array('db', 'table', 'where_clause', 'transform_key'));/* Select database */if (!PMA_DBI_select_db($db)) {    PMA_mysqlDie(sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($db)),        '', '');}/* Check if table exists */if (!PMA_DBI_get_columns($db, $table)) {    PMA_mysqlDie(__('Invalid table name'));}/* Grab data */$sql = 'SELECT ' . PMA_backquote($transform_key) . ' FROM ' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';';$result = PMA_DBI_fetch_value($sql);/* Check return code */if ($result === false) {    PMA_mysqlDie(__('MySQL returned an empty result set (i.e. zero rows).'), $sql);}/* Avoid corrupting data */@ini_set('url_rewriter.tags', '');PMA_download_header(    $table . '-' .  $transform_key . '.bin',    PMA_detectMIME($result),    strlen($result)    );echo $result;?>
<?php/** * Handles the visualization of GIS POLYGON objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Polygon extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesn't have an inner ring, use polygon itself        if (strpos($polygon, "),(") === false) {            $ring = $polygon;        } else {            // Seperate outer ring and use it to determin min-max            $parts = explode("),(", $polygon);            $ring = $parts[0];        }        return $this->setMinMax($ring, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $fill_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, $scale_data, true);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $points_arr = $this->extractPoints($outer, $scale_data, true);            foreach ($inner as $inner_poly) {                $points_arr = array_merge(                    $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                );            }        }        // draw polygon        imagefilledpolygon($image, $points_arr, sizeof($points_arr) / 2, $color);        // print label if applicable        if (isset($label) && trim($label) != '') {            imagestring($image, 1, $points_arr[2], $points_arr[3], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $fill_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = array($red, $green, $blue);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, $scale_data, true);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $points_arr = $this->extractPoints($outer, $scale_data, true);            foreach ($inner as $inner_poly) {                $points_arr = array_merge(                    $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                );            }        }        // draw polygon        $pdf->Polygon($points_arr, 'F*', array(), $color, true);        // print label if applicable        if (isset($label) && trim($label) != '') {            $pdf->SetXY($points_arr[2], $points_arr[3]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $fill_color, $scale_data)    {        $polygon_options = array(            'name'        => $label,            'id'          => $label . rand(),            'class'       => 'polygon vector',            'stroke'      => 'black',            'stroke-width'=> 0.5,            'fill'        => $fill_color,            'fill-rule'   => 'evenodd',            'fill-opacity'=> 0.8,        );        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        $row = '<path d="';        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $row .= $this->_drawPath($polygon, $scale_data);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $row .= $this->_drawPath($outer, $scale_data);            foreach ($inner as $inner_poly) {                $row .= $this->_drawPath($inner_poly, $scale_data);            }        }        $row .= '"';        foreach ($polygon_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS POLYGON object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $fill_color, $scale_data)    {        $style_options = array(            'strokeColor' => '#000000',            'strokeWidth' => 0.5,            'fillColor'   => $fill_color,            'fillOpacity' => 0.8,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $row = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        $row .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector(';        $row .= $this->addPointsForOpenLayersPolygon($polygon, $srid);        $row .= 'null, ' . json_encode($style_options) . '));';        return $row;    }    /**     * Draws a ring of the polygon using SVG path element.     *     * @param string $polygon    The ring     * @param array  $scale_data Array containing data related to scaling     *     * @return the code to draw the ring     */    private function _drawPath($polygon, $scale_data)    {        $points_arr = $this->extractPoints($polygon, $scale_data);        $row = ' M ' . $points_arr[0][0] . ', ' . $points_arr[0][1];        $other_points = array_slice($points_arr, 1, count($points_arr) - 2);        foreach ($other_points as $point) {            $row .= ' L ' . $point[0] . ', ' . $point[1];        }        $row .= ' Z ';        return $row;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_lines = isset($gis_data[$index]['POLYGON']['no_of_lines'])            ? $gis_data[$index]['POLYGON']['no_of_lines'] : 1;        if ($no_of_lines < 1) {            $no_of_lines = 1;        }        $wkt = 'POLYGON(';        for ($i = 0; $i < $no_of_lines; $i++) {            $no_of_points = isset($gis_data[$index]['POLYGON'][$i]['no_of_points'])                ? $gis_data[$index]['POLYGON'][$i]['no_of_points'] : 4;            if ($no_of_points < 4) {                $no_of_points = 4;            }            $wkt .= '(';            for ($j = 0; $j < $no_of_points; $j++) {                $wkt .= ((isset($gis_data[$index]['POLYGON'][$i][$j]['x'])                    && trim($gis_data[$index]['POLYGON'][$i][$j]['x']) != '')                    ? $gis_data[$index]['POLYGON'][$i][$j]['x'] : $empty)                    . ' ' . ((isset($gis_data[$index]['POLYGON'][$i][$j]['y'])                    && trim($gis_data[$index]['POLYGON'][$i][$j]['y']) != '')                    ? $gis_data[$index]['POLYGON'][$i][$j]['y'] : $empty) .',';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Calculates the area of a closed simple polygon.     *     * @param array $ring array of points forming the ring     *     * @return the area of a closed simple polygon.     */    public static function area($ring)    {        $no_of_points = count($ring);        // If the last point is same as the first point ignore it        $last = count($ring) - 1;        if (($ring[0]['x'] == $ring[$last]['x'])            && ($ring[0]['y'] == $ring[$last]['y'])        ) {            $no_of_points--;        }        //         _n-1        // A = _1_ \    (X(i) * Y(i+1)) - (Y(i) * X(i+1))        //      2  /__        //         i=0        $area = 0;        for ($i = 0; $i < $no_of_points; $i++) {            $j = ($i + 1) % $no_of_points;            $area += $ring[$i]['x'] * $ring[$j]['y'];            $area -= $ring[$i]['y'] * $ring[$j]['x'];        }        $area /= 2.0;        return $area;    }    /**     * Determines whether a set of points represents an outer ring.     * If points are in clockwise orientation then, they form an outer ring.     *     * @param array $ring array of points forming the ring     *     * @return whether a set of points represents an outer ring.     */    public static function isOuterRing($ring)    {        // If area is negative then it's in clockwise orientation,        // i.e. it's an outer ring        if (PMA_GIS_Polygon::area($ring) < 0) {            return true;        }        return false;    }    /**     * Determines whether a given point is inside a given polygon.     *     * @param array $point   x, y coordinates of the point     * @param array $polygon array of points forming the ring     *     * @return whether a given point is inside a given polygon     */    public static function isPointInsidePolygon($point, $polygon)    {        // If first point is repeated at the end remove it        $last = count($polygon) - 1;        if (($polygon[0]['x'] == $polygon[$last]['x'])            && ($polygon[0]['y'] == $polygon[$last]['y'])        ) {            $polygon = array_slice($polygon, 0, $last);        }        $no_of_points = count($polygon);        $counter = 0;        // Use ray casting algorithm        $p1 = $polygon[0];        for ($i = 1; $i <= $no_of_points; $i++) {            $p2 = $polygon[$i % $no_of_points];            if ($point['y'] > min(array($p1['y'], $p2['y']))) {                if ($point['y'] <= max(array($p1['y'], $p2['y']))) {                    if ($point['x'] <= max(array($p1['x'], $p2['x']))) {                        if ($p1['y'] != $p2['y']) {                            $xinters = ($point['y'] - $p1['y'])                                * ($p2['x'] - $p1['x'])                                / ($p2['y'] - $p1['y']) + $p1['x'];                            if ($p1['x'] == $p2['x'] || $point['x'] <= $xinters) {                                $counter++;                            }                        }                    }                }            }            $p1 = $p2;        }        if ($counter % 2 == 0) {            return  false;        } else {            return true;        }    }    /**     * Returns a point that is guaranteed to be on the surface of the ring.     * (for simple closed rings)     *     * @param array $ring array of points forming the ring     *     * @return a point on the surface of the ring     */    public static function getPointOnSurface($ring)    {        // Find two consecutive distinct points.        for ($i = 0; $i < count($ring) - 1; $i++) {            if ($ring[$i]['y'] != $ring[$i + 1]['y']) {                $x0 = $ring[$i]['x'];                $x1 = $ring[$i + 1]['x'];                $y0 = $ring[$i]['y'];                $y1 = $ring[$i + 1]['y'];                break;            }        }        if (! isset($x0)) {            return false;        }        // Find the mid point        $x2 = ($x0 + $x1) / 2;        $y2 = ($y0 + $y1) / 2;        // Always keep $epsilon < 1 to go with the reduction logic down here        $epsilon = 0.1;        $denominator = sqrt(pow(($y1 - $y0), 2) + pow(($x0 - $x1), 2));        $pointA = array(); $pointB = array();        while (true) {            // Get the points on either sides of the line            // with a distance of epsilon to the mid point            $pointA['x'] = $x2 + ($epsilon * ($y1 - $y0)) / $denominator;            $pointA['y'] = $y2 + ($pointA['x'] - $x2) * ($x0 - $x1) / ($y1 - $y0);            $pointB['x'] = $x2 + ($epsilon * ($y1 - $y0)) / (0 - $denominator);            $pointB['y'] = $y2 + ($pointB['x'] - $x2) * ($x0 - $x1) / ($y1 - $y0);            // One of the points should be inside the polygon,            // unless epcilon chosen is too large            if (PMA_GIS_Polygon::isPointInsidePolygon($pointA, $ring)) {                return $pointA;            } elseif (PMA_GIS_Polygon::isPointInsidePolygon($pointB, $ring)) {                return $pointB;            } else {                //If both are outside the polygon reduce the epsilon and                //recalculate the points(reduce exponentially for faster convergance)                $epsilon = pow($epsilon, 2);                if ($epsilon == 0) {                    return false;                }            }        }    }    /** Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'POLYGON';            $wkt = $value;        }        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($wkt, 9, (strlen($wkt) - 11));        // Seperate each linestring        $linerings = explode("),(", $polygon);        $params[$index]['POLYGON']['no_of_lines'] = count($linerings);        $j = 0;        foreach ($linerings as $linering) {            $points_arr = $this->extractPoints($linering, null);            $no_of_points = count($points_arr);            $params[$index]['POLYGON'][$j]['no_of_points'] = $no_of_points;            for ($i = 0; $i < $no_of_points; $i++) {                $params[$index]['POLYGON'][$j][$i]['x'] = $points_arr[$i][0];                $params[$index]['POLYGON'][$j][$i]['y'] = $points_arr[$i][1];            }            $j++;        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used with the relation and pdf feature * * @package PhpMyAdmin *//** * returns array of options from string with options separated by comma, removes quotes * * <code> * PMA_transformation_getOptions("'option ,, quoted',abd,'2,3',"); * // array { * //     'option ,, quoted', * //     'abc', * //     '2,3', * //     '', * // } * </code> * * @param string $option_string comma separated options * * @return array options */function PMA_transformation_getOptions($option_string){    $result = array();    if (! strlen($option_string)        || ! $transform_options = preg_split('/,/', $option_string)    ) {        return $result;    }    while (($option = array_shift($transform_options)) !== null) {        $trimmed = trim($option);        if (strlen($trimmed) > 1            && $trimmed[0] == "'"            && $trimmed[strlen($trimmed) - 1] == "'"        ) {            // '...'            $option = substr($trimmed, 1, -1);        } elseif (isset($trimmed[0]) && $trimmed[0] == "'") {            // '...,            $trimmed = ltrim($option);            while (($option = array_shift($transform_options)) !== null) {                // ...,                $trimmed .= ',' . $option;                $rtrimmed = rtrim($trimmed);                if ($rtrimmed[strlen($rtrimmed) - 1] == "'") {                    // ,...'                    break;                }            }            $option = substr($rtrimmed, 1, -1);        }        $result[] = stripslashes($option);    }    return $result;}/** * Gets all available MIME-types * * @access  public * @staticvar   array   mimetypes * @return  array    array[mimetype], array[transformation] */function PMA_getAvailableMIMEtypes(){    static $stack = null;    if (null !== $stack) {        return $stack;    }    $stack = array();    $filestack = array();    $handle = opendir('./libraries/transformations');    if (! $handle) {        return $stack;    }    while ($file = readdir($handle)) {        $filestack[] = $file;    }    closedir($handle);    sort($filestack);    foreach ($filestack as $file) {        if (preg_match('|^.*__.*\.inc\.php$|', $file)) {            // File contains transformation functions.            $base = explode('__', str_replace('.inc.php', '', $file));            $mimetype = str_replace('_', '/', $base[0]);            $stack['mimetype'][$mimetype] = $mimetype;            $stack['transformation'][] = $mimetype . ': ' . $base[1];            $stack['transformation_file'][] = $file;        } elseif (preg_match('|^.*\.inc\.php$|', $file)) {            // File is a plain mimetype, no functions.            $base = str_replace('.inc.php', '', $file);            if ($base != 'global') {                $mimetype = str_replace('_', '/', $base);                $stack['mimetype'][$mimetype] = $mimetype;                $stack['empty_mimetype'][$mimetype] = $mimetype;            }        }    }    return $stack;}/** * Returns the description of the transformation * * @param string $file           transformation file * @param string $html_formatted whether the description should be formatted as HTML * * @return the description of the transformation */function PMA_getTransformationDescription($file, $html_formatted = true){    include_once './libraries/transformations/' . $file;    $func = strtolower(str_replace('.inc.php', '', $file));    $funcname = 'PMA_transformation_' . $func . '_info';    $desc = sprintf(__('No description is available for this transformation.<br />Please ask the author what %s does.'), 'PMA_transformation_' . $func . '()');    if ($html_formatted) {        $desc = '<i>' . $desc . '</i>';    } else {        $desc = str_replace('<br />', ' ', $desc);    }    if (function_exists($funcname)) {        $desc_arr = $funcname();        if (isset($desc_arr['info'])) {            $desc = $desc_arr['info'];        }    }    return $desc;}/** * Gets the mimetypes for all columns of a table * * @param string $db     the name of the db to check for * @param string $table  the name of the table to check for * @param string $strict whether to include only results having a mimetype set * * @access  public * * @return array [field_name][field_key] = field_value */function PMA_getMIME($db, $table, $strict = false){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['commwork']) {        return false;    }    $com_qry  = '         SELECT `column_name`,                `mimetype`,                `transformation`,                `transformation_options`         FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '         WHERE `db_name`    = \'' . PMA_sqlAddSlashes($db) . '\'           AND `table_name` = \'' . PMA_sqlAddSlashes($table) . '\'           AND ( `mimetype` != \'\'' . (!$strict ? '              OR `transformation` != \'\'              OR `transformation_options` != \'\'' : '') . ')';    return PMA_DBI_fetch_result($com_qry, 'column_name', null, $GLOBALS['controllink']);} // end of the 'PMA_getMIME()' function/** * Set a single mimetype to a certain value. * * @param string $db                     the name of the db * @param string $table                  the name of the table * @param string $key                    the name of the column * @param string $mimetype               the mimetype of the column * @param string $transformation         the transformation of the column * @param string $transformation_options the transformation options of the column * @param string $forcedelete            force delete, will erase any existing *                                       comments for this column * * @access  public * * @return  boolean  true, if comment-query was made. */function PMA_setMIME($db, $table, $key, $mimetype, $transformation,    $transformation_options, $forcedelete = false){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['commwork']) {        return false;    }    $test_qry  = '         SELECT `mimetype`,                `comment`           FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '          WHERE `db_name`     = \'' . PMA_sqlAddSlashes($db) . '\'            AND `table_name`  = \'' . PMA_sqlAddSlashes($table) . '\'            AND `column_name` = \'' . PMA_sqlAddSlashes($key) . '\'';    $test_rs   = PMA_query_as_controluser($test_qry, true, PMA_DBI_QUERY_STORE);    if ($test_rs && PMA_DBI_num_rows($test_rs) > 0) {        $row = @PMA_DBI_fetch_assoc($test_rs);        PMA_DBI_free_result($test_rs);        if (! $forcedelete            && (strlen($mimetype) || strlen($transformation)            || strlen($transformation_options) || strlen($row['comment']))        ) {            $upd_query = '                UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '                   SET `mimetype`               = \'' . PMA_sqlAddSlashes($mimetype) . '\',                       `transformation`         = \'' . PMA_sqlAddSlashes($transformation) . '\',                       `transformation_options` = \'' . PMA_sqlAddSlashes($transformation_options) . '\'';        } else {            $upd_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']);        }        $upd_query .= '            WHERE `db_name`     = \'' . PMA_sqlAddSlashes($db) . '\'              AND `table_name`  = \'' . PMA_sqlAddSlashes($table) . '\'              AND `column_name` = \'' . PMA_sqlAddSlashes($key) . '\'';    } elseif (strlen($mimetype) || strlen($transformation)     || strlen($transformation_options)) {        $upd_query = 'INSERT INTO ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                   . ' (db_name, table_name, column_name, mimetype, transformation, transformation_options) '                   . ' VALUES('                   . '\'' . PMA_sqlAddSlashes($db) . '\','                   . '\'' . PMA_sqlAddSlashes($table) . '\','                   . '\'' . PMA_sqlAddSlashes($key) . '\','                   . '\'' . PMA_sqlAddSlashes($mimetype) . '\','                   . '\'' . PMA_sqlAddSlashes($transformation) . '\','                   . '\'' . PMA_sqlAddSlashes($transformation_options) . '\')';    }    if (isset($upd_query)) {        return PMA_query_as_controluser($upd_query);    } else {        return false;    }} // end of 'PMA_setMIME()' function?>
<?php/** * Handles the visualization of GIS LINESTRING objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Linestring extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        return $this->setMinMax($linesrting, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS LINESTRING object     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $line_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($line_color, 1, 2));        $green = hexdec(substr($line_color, 3, 2));        $blue  = hexdec(substr($line_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, $scale_data);        foreach ($points_arr as $point) {            if (! isset($temp_point)) {                $temp_point = $point;            } else {                // draw line section                imageline($image, $temp_point[0], $temp_point[1], $point[0], $point[1], $color);                $temp_point = $point;            }        }        // print label if applicable        if (isset($label) && trim($label) != '') {            imagestring($image, 1, $points_arr[1][0], $points_arr[1][1], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS LINESTRING object     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $line_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($line_color, 1, 2));        $green = hexdec(substr($line_color, 3, 2));        $blue  = hexdec(substr($line_color, 4, 2));        $line  = array('width' => 1.5, 'color' => array($red, $green, $blue));        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, $scale_data);        foreach ($points_arr as $point) {            if (! isset($temp_point)) {                $temp_point = $point;            } else {                // draw line section                $pdf->Line($temp_point[0], $temp_point[1], $point[0], $point[1], $line);                $temp_point = $point;            }        }        // print label        if (isset($label) && trim($label) != '') {            $pdf->SetXY($points_arr[1][0], $points_arr[1][1]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS LINESTRING object     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $line_color, $scale_data)    {        $line_options = array(            'name'        => $label,            'id'          => $label . rand(),            'class'       => 'linestring vector',            'fill'        => 'none',            'stroke'      => $line_color,            'stroke-width'=> 2,        );        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, $scale_data);        $row = '<polyline points="';        foreach ($points_arr as $point) {            $row .= $point[0] . ',' . $point[1] . ' ';        }        $row .= '"';        foreach ($line_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS LINESTRING object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $line_color, $scale_data)    {        $style_options = array(            'strokeColor' => $line_color,            'strokeWidth' => 2,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $result = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, null);        $row = 'new Array(';        foreach ($points_arr as $point) {            $row .= '(new OpenLayers.Geometry.Point(' . $point[0] . ', '                . $point[1] . ')).transform(new OpenLayers.Projection("EPSG:'                . $srid . '"), map.getProjectionObject()), ';        }        $row = substr($row, 0, strlen($row) - 2);        $row .= ')';        $result .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector('            . 'new OpenLayers.Geometry.LineString(' . $row . '), null, '            . json_encode($style_options) . '));';        return $result;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_points = isset($gis_data[$index]['LINESTRING']['no_of_points'])            ? $gis_data[$index]['LINESTRING']['no_of_points'] : 2;        if ($no_of_points < 2) {            $no_of_points = 2;        }        $wkt = 'LINESTRING(';        for ($i = 0; $i < $no_of_points; $i++) {            $wkt .= ((isset($gis_data[$index]['LINESTRING'][$i]['x'])                && trim($gis_data[$index]['LINESTRING'][$i]['x']) != '')                ? $gis_data[$index]['LINESTRING'][$i]['x'] : $empty)                . ' ' . ((isset($gis_data[$index]['LINESTRING'][$i]['y'])                && trim($gis_data[$index]['LINESTRING'][$i]['y']) != '')                ? $gis_data[$index]['LINESTRING'][$i]['y'] : $empty) .',';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'LINESTRING';            $wkt = $value;        }        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linestring = substr($wkt, 11, (strlen($wkt) - 12));        $points_arr = $this->extractPoints($linestring, null);        $no_of_points = count($points_arr);        $params[$index]['LINESTRING']['no_of_points'] = $no_of_points;        for ($i = 0; $i < $no_of_points; $i++) {            $params[$index]['LINESTRING'][$i]['x'] = $points_arr[$i][0];            $params[$index]['LINESTRING'][$i]['y'] = $points_arr[$i][1];        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * get master replication from server */$server_master_replication = PMA_DBI_fetch_result('SHOW MASTER STATUS');/** * get slave replication from server */$server_slave_replication = PMA_DBI_fetch_result('SHOW SLAVE STATUS');/** * replication types */$replication_types = array('master', 'slave');/** * define variables for master status */$master_variables = array(    'File',    'Position',    'Binlog_Do_DB',    'Binlog_Ignore_DB',);/** * Define variables for slave status */$slave_variables  = array(    'Slave_IO_State',    'Master_Host',    'Master_User',    'Master_Port',    'Connect_Retry',    'Master_Log_File',    'Read_Master_Log_Pos',    'Relay_Log_File',    'Relay_Log_Pos',    'Relay_Master_Log_File',    'Slave_IO_Running',    'Slave_SQL_Running',    'Replicate_Do_DB',    'Replicate_Ignore_DB',    'Replicate_Do_Table',    'Replicate_Ignore_Table',    'Replicate_Wild_Do_Table',    'Replicate_Wild_Ignore_Table',    'Last_Errno',    'Last_Error',    'Skip_Counter',    'Exec_Master_Log_Pos',    'Relay_Log_Space',    'Until_Condition',    'Until_Log_File',    'Until_Log_Pos',    'Master_SSL_Allowed',    'Master_SSL_CA_File',    'Master_SSL_CA_Path',    'Master_SSL_Cert',    'Master_SSL_Cipher',    'Master_SSL_Key',    'Seconds_Behind_Master',);/** * define important variables, which need to be watched for correct running of replication in slave mode * * @usedby PMA_replication_print_status_table() */// TODO change to regexp or something, to allow for negative match. To e.g. highlight 'Last_Error'//$slave_variables_alerts = array(    'Slave_IO_Running' => 'No',    'Slave_SQL_Running' => 'No',);$slave_variables_oks = array(    'Slave_IO_Running' => 'Yes',    'Slave_SQL_Running' => 'Yes',);// check which replication is available and set $server_{master/slave}_status and assign values// replication info is more easily passed to functions/* * @todo use $replication_info everywhere instead of the generated variable names */$replication_info = array();foreach ($replication_types as $type) {    if (count(${"server_{$type}_replication"}) > 0) {        ${"server_{$type}_status"} = true;        $replication_info[$type]['status'] = true;    } else {        ${"server_{$type}_status"} = false;        $replication_info[$type]['status'] = false;    }    if (${"server_{$type}_status"}) {        if ($type == "master") {            ${"server_{$type}_Do_DB"} = explode(",", $server_master_replication[0]["Binlog_Do_DB"]);            $replication_info[$type]['Do_DB'] = ${"server_{$type}_Do_DB"};            ${"server_{$type}_Ignore_DB"} = explode(",", $server_master_replication[0]["Binlog_Ignore_DB"]);            $replication_info[$type]['Ignore_DB'] = ${"server_{$type}_Ignore_DB"};        } elseif ($type == "slave") {            ${"server_{$type}_Do_DB"} = explode(",", $server_slave_replication[0]["Replicate_Do_DB"]);            $replication_info[$type]['Do_DB'] = ${"server_{$type}_Do_DB"};            ${"server_{$type}_Ignore_DB"} = explode(",", $server_slave_replication[0]["Replicate_Ignore_DB"]);            $replication_info[$type]['Ignore_DB'] = ${"server_{$type}_Ignore_DB"};            ${"server_{$type}_Do_Table"} = explode(",", $server_slave_replication[0]["Replicate_Do_Table"]);            $replication_info[$type]['Do_Table'] = ${"server_{$type}_Do_Table"};            ${"server_{$type}_Ignore_Table"} = explode(",", $server_slave_replication[0]["Replicate_Ignore_Table"]);            $replication_info[$type]['Ignore_Table'] = ${"server_{$type}_Ignore_Table"};            ${"server_{$type}_Wild_Do_Table"} = explode(",", $server_slave_replication[0]["Replicate_Wild_Do_Table"]);            $replication_info[$type]['Wild_Do_Table'] = ${"server_{$type}_Wild_Do_Table"};            ${"server_{$type}_Wild_Ignore_Table"} = explode(",", $server_slave_replication[0]["Replicate_Wild_Ignore_Table"]);            $replication_info[$type]['Wild_Ignore_Table'] = ${"server_{$type}_Wild_Ignore_Table"};        }    }}/** * @param $string contains "dbname.tablename" * @param $what   what to extract (db|table) * @return $string the extracted part */function PMA_extract_db_or_table($string, $what = 'db'){    $list = explode(".", $string);    if ('db' == $what) {        return $list[0];    } else {        return $list[1];    }}/** * @param string $action  possible values: START or STOP * @param string $control default: null, possible values: SQL_THREAD or IO_THREAD or null. If it is set to null, it controls both SQL_THREAD and IO_THREAD * @param mixed  $link    mysql link * * @return mixed output of PMA_DBI_try_query */function PMA_replication_slave_control($action, $control = null, $link = null){    $action = strtoupper($action);    $control = strtoupper($control);    if ($action != "START" && $action != "STOP") {        return -1;    }    if ($control != "SQL_THREAD" && $control != "IO_THREAD" && $control != null) {        return -1;    }    return PMA_DBI_try_query($action . " SLAVE " . $control . ";", $link);}/** * @param string $user     replication user on master * @param string $password password for the user * @param string $host     master's hostname or IP * @param int    $port     port, where mysql is running * @param array  $pos      position of mysql replication, array should contain fields File and Position * @param bool   $stop     shall we stop slave? * @param bool   $start    shall we start slave? * @param mixed  $link     mysql link * * @return output of CHANGE MASTER mysql command */function PMA_replication_slave_change_master($user, $password, $host, $port, $pos, $stop = true, $start = true, $link = null){    if ($stop) {        PMA_replication_slave_control("STOP", null, $link);    }    $out = PMA_DBI_try_query('CHANGE MASTER TO ' .        'MASTER_HOST=\'' . $host . '\',' .        'MASTER_PORT=' . ($port * 1) . ',' .        'MASTER_USER=\'' . $user . '\',' .        'MASTER_PASSWORD=\'' . $password . '\',' .        'MASTER_LOG_FILE=\'' . $pos["File"] . '\',' .        'MASTER_LOG_POS=' . $pos["Position"] . ';', $link);    if ($start) {        PMA_replication_slave_control("START", null, $link);    }    return $out;}/** * This function provides connection to remote mysql server * * @param string $user     mysql username * @param string $password password for the user * @param string $host     mysql server's hostname or IP * @param int    $port     mysql remote port * @param string $socket   path to unix socket * * @return mixed $link mysql link on success */function PMA_replication_connect_to_master($user, $password, $host = null, $port = null, $socket = null){    $server = array();    $server["host"] = $host;    $server["port"] = $port;    $server["socket"] = $socket;    // 5th parameter set to true means that it's an auxiliary connection    // and we must not go back to login page if it fails    return PMA_DBI_connect($user, $password, false, $server, true);}/** * @param mixed $link mysql link * * @return array - containing File and Position in MySQL replication on master server, useful for PMA_replication_slave_change_master */function PMA_replication_slave_bin_log_master($link = null){    $data = PMA_DBI_fetch_result('SHOW MASTER STATUS', null, null, $link);    $output = array();    if (! empty($data)) {        $output["File"] = $data[0]["File"];        $output["Position"] = $data[0]["Position"];    }    return $output;}/** * Get list of replicated databases on master server * * @param mixed $link mysql link * * @return array array of replicated databases */function PMA_replication_master_replicated_dbs($link = null){    $data = PMA_DBI_fetch_result('SHOW MASTER STATUS', null, null, $link); // let's find out, which databases are replicated    $do_db     = array();    $ignore_db = array();    if (! empty($data[0]['Binlog_Do_DB'])) {        $do_db     = explode(',', $data[0]['Binlog_Do_DB']);    }    if (! empty($data[0]['Binlog_Ignore_DB'])) {        $ignore_db = explode(',', $data[0]['Binlog_Ignore_DB']);    }    $tmp_alldbs = PMA_DBI_query('SHOW DATABASES;', $link);    while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {        if (PMA_is_system_schema($tmp_row[0]))            continue;        if (count($do_db) == 0) {            if (array_search($tmp_row[0], $ignore_db) !== false) {                continue;            }            $dblist[] = $tmp_row[0];        } else {            if (array_search($tmp_row[0], $do_db) !== false) {                $dblist[] = $tmp_row[0];            }        }    } // end while    return $link;}/** * This function provides synchronization of structure and data between two mysql servers. * * @todo improve code sharing between the function and synchronization * * @param string $db       name of database, which should be synchronized * @param mixed  $src_link link of source server, note: if the server is current PMA server, use null * @param mixed  $trg_link link of target server, note: if the server is current PMA server, use null * @param bool   $data     if true, then data will be copied as well */function PMA_replication_synchronize_db($db, $src_link, $trg_link, $data = true){    $src_db = $trg_db = $db;    $src_tables = PMA_DBI_get_tables($src_db, $src_link);    $trg_tables = PMA_DBI_get_tables($trg_db, $trg_link);    /**     * initializing arrays to save table names     */    $source_tables_uncommon = array();    $target_tables_uncommon = array();    $matching_tables = array();    $matching_tables_num = 0;    /**     * Criterion for matching tables is just their names.     * Finding the uncommon tables for the source database     * BY comparing the matching tables with all the tables in the source database     */    PMA_getMatchingTables($trg_tables, $src_tables, $matching_tables, $source_tables_uncommon);    /**     * Finding the uncommon tables for the target database     * BY comparing the matching tables with all the tables in the target database     */    PMA_getNonMatchingTargetTables($trg_tables, $matching_tables, $target_tables_uncommon);    /**     *     * Comparing Data In the Matching Tables     * It is assumed that the matching tables are structurally     * and typely exactly the same     */    $fields_num = array();    $matching_tables_fields = array();    $matching_tables_keys   = array();    $insert_array = array(array(array()));    $update_array = array(array(array()));    $delete_array = array();    $row_count = array();    $uncommon_tables_fields = array();    $matching_tables_num = sizeof($matching_tables);    for ($i = 0; $i < sizeof($matching_tables); $i++) {        PMA_dataDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, $matching_tables_fields, $update_array, $insert_array,            $delete_array, $fields_num, $i, $matching_tables_keys);    }    for ($j = 0; $j < sizeof($source_tables_uncommon); $j++) {        PMA_dataDiffInUncommonTables($source_tables_uncommon, $src_db, $src_link, $j, $row_count);    }    /**     * INTEGRATION OF STRUCTURE DIFFERENCE CODE     *     */    $source_columns = array();    $target_columns = array();    $alter_str_array = array(array());    $add_column_array = array(array());    $uncommon_columns = array();    $target_tables_keys = array();    $source_indexes = array();    $target_indexes = array();    $add_indexes_array = array();    $alter_indexes_array = array();    $remove_indexes_array = array();    $criteria = array('Field', 'Type', 'Null', 'Collation', 'Key', 'Default', 'Comment');    for ($counter = 0; $counter < $matching_tables_num; $counter++) {        PMA_structureDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, $source_columns,            $target_columns, $alter_str_array, $add_column_array, $uncommon_columns, $criteria, $target_tables_keys, $counter);        PMA_indexesDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, $source_indexes, $target_indexes,            $add_indexes_array, $alter_indexes_array, $remove_indexes_array, $counter);    }    /**     * Generating Create Table query for all the non-matching tables present in Source but not in Target and populating tables.     */    for ($q = 0; $q < sizeof($source_tables_uncommon); $q++) {        if (isset($source_tables_uncommon[$q])) {            PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link, $source_tables_uncommon, $q, $uncommon_tables_fields, false);        }        if (isset($row_count[$q]) && $data) {            PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link, $source_tables_uncommon, $q, $uncommon_tables_fields, false);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common functions for the export functionality for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * This function is called from one of the other functions in this file * and it completes the handling of the export functionality. * * @param  string  $item_name    The name of the item that we are exporting * @param  string  $export_data  The SQL query to create the requested item */function PMA_RTE_handleExport($item_name, $export_data){    global $db;    $item_name = htmlspecialchars(PMA_backquote($_GET['item_name']));    if ($export_data !== false) {        $export_data = '<textarea cols="40" rows="15" style="width: 100%;">'                     . htmlspecialchars(trim($export_data)) . '</textarea>';        $title = sprintf(PMA_RTE_getWord('export'), $item_name);        if ($GLOBALS['is_ajax_request'] == true) {            $extra_data = array('title' => $title);            PMA_ajaxResponse($export_data, true, $extra_data);        } else {            echo "<fieldset>\n"               . "<legend>$title</legend>\n"               . $export_data               . "</fieldset>\n";        }    } else {        $_db = htmlspecialchars(PMA_backquote($db));        $response = __('Error in Processing Request') . ' : '                  . sprintf(PMA_RTE_getWord('not_found'), $item_name, $_db);        $response = PMA_message::error($response);        if ($GLOBALS['is_ajax_request'] == true) {            PMA_ajaxResponse($response, false);        } else {            $response->display();        }    }} // end PMA_RTE_handleExport()/** * If necessary, prepares event information and passes * it to PMA_RTE_handleExport() for the actual export. */function PMA_EVN_handleExport(){    global $_GET, $db;    if (! empty($_GET['export_item']) && ! empty($_GET['item_name'])) {        $item_name = $_GET['item_name'];        $export_data = PMA_DBI_get_definition($db, 'EVENT', $item_name);        PMA_RTE_handleExport($item_name, $export_data);    }} // end PMA_EVN_handleExport()/** * If necessary, prepares routine information and passes * it to PMA_RTE_handleExport() for the actual export. */function PMA_RTN_handleExport(){    global $_GET, $db;    if (   ! empty($_GET['export_item'])        && ! empty($_GET['item_name'])        && ! empty($_GET['item_type'])    ) {        if ($_GET['item_type'] == 'FUNCTION' || $_GET['item_type'] == 'PROCEDURE') {            $export_data = PMA_DBI_get_definition(                $db,                $_GET['item_type'],                $_GET['item_name']);            PMA_RTE_handleExport($_GET['item_name'], $export_data);        }    }} // end PMA_RTN_handleExport()/** * If necessary, prepares trigger information and passes * it to PMA_RTE_handleExport() for the actual export. */function PMA_TRI_handleExport(){    global $_GET, $db, $table;    if (! empty($_GET['export_item']) && ! empty($_GET['item_name'])) {        $item_name = $_GET['item_name'];        $triggers = PMA_DBI_get_triggers($db, $table, '');        $export_data = false;        foreach ($triggers as $trigger) {            if ($trigger['name'] === $item_name) {                $export_data = $trigger['create'];                break;            }        }        PMA_RTE_handleExport($item_name, $export_data);    }} // end PMA_TRI_handleExport()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Various checks and message functions used on index page. * * Security checks are the idea of Aung Khant <aungkhant[at]yehg.net>, http://yehg.net/lab * Version check taken from the old setup script by Michal iha <michal@cihar.com> * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Initializes message list */function messages_begin(){    if (! isset($_SESSION['messages']) || !is_array($_SESSION['messages'])) {        $_SESSION['messages'] = array('error' => array(), 'notice' => array());    } else {        // reset message states        foreach ($_SESSION['messages'] as &$messages) {            foreach ($messages as &$msg) {                $msg['fresh'] = false;                $msg['active'] = false;            }        }    }}/** * Adds a new message to message list * * @param string $type one of: notice, error * @param string $id unique message identifier * @param string $title language string id (in $str array) * @param string $message message text */function messages_set($type, $id, $title, $message){    $fresh = ! isset($_SESSION['messages'][$type][$id]);    $_SESSION['messages'][$type][$id] = array(        'fresh' => $fresh,        'active' => true,        'title' => $title,        'message' => $message);}/** * Cleans up message list */function messages_end(){    foreach ($_SESSION['messages'] as &$messages) {        $remove_ids = array();        foreach ($messages as $id => &$msg) {            if ($msg['active'] == false) {                $remove_ids[] = $id;            }        }        foreach ($remove_ids as $id) {            unset($messages[$id]);        }    }}/** * Prints message list, must be called after messages_end() */function messages_show_html(){    $old_ids = array();    foreach ($_SESSION['messages'] as $type => $messages) {        foreach ($messages as $id => $msg) {            echo '<div class="' . $type . '" id="' . $id . '">' . '<h4>' . $msg['title'] . '</h4>' . $msg['message'] . '</div>';            if (!$msg['fresh'] && $type != 'error') {                $old_ids[] = $id;            }        }    }    echo "\n" . '<script type="text/javascript">';    foreach ($old_ids as $id) {        echo "\nhiddenMessages.push('$id');";    }    echo "\n</script>\n";}/** * Checks for newest phpMyAdmin version and sets result as a new notice */function PMA_version_check(){    // version check messages should always be visible so let's make    // a unique message id each time we run it    $message_id = uniqid('version_check');    // wait 3s at most for server response, it's enough to get information    // from a working server    $connection_timeout = 3;    $url = 'http://phpmyadmin.net/home_page/version.php';    $context = stream_context_create(array(        'http' => array(            'timeout' => $connection_timeout)));    $data = @file_get_contents($url, null, $context);    if ($data === false) {        if (function_exists('curl_init')) {            $ch = curl_init($url);            curl_setopt($ch, CURLOPT_HEADER, false);            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);            curl_setopt($ch, CURLOPT_TIMEOUT, $connection_timeout);            $data = curl_exec($ch);            curl_close($ch);        } else {            messages_set(                'error',                $message_id,                __('Version check'),                __('Neither URL wrapper nor CURL is available. Version check is not possible.'));            return;        }    }    if (empty($data)) {        messages_set(            'error',            $message_id,            __('Version check'),            __('Reading of version failed. Maybe you\'re offline or the upgrade server does not respond.'));        return;    }    /* Format: version\ndate\n(download\n)* */    $data_list = explode("\n", $data);    if (count($data_list) > 1) {        $version = $data_list[0];        $date = $data_list[1];    } else {        $version = $date = '';    }    $version_upstream = version_to_int($version);    if ($version_upstream === false) {        messages_set(            'error',            $message_id,            __('Version check'),            __('Got invalid version string from server'));        return;    }    $version_local = version_to_int($GLOBALS['PMA_Config']->get('PMA_VERSION'));    if ($version_local === false) {        messages_set(            'error',            $message_id,            __('Version check'),            __('Unparsable version string'));        return;    }    if ($version_upstream > $version_local) {        $version = htmlspecialchars($version);        $date = htmlspecialchars($date);        messages_set(            'notice',            $message_id,            __('Version check'),            sprintf(__('A newer version of phpMyAdmin is available and you should consider upgrading. The newest version is %s, released on %s.'), $version, $date));    } else {        if ($version_local % 100 == 0) {            messages_set(                'notice',                $message_id,                __('Version check'),                PMA_sanitize(sprintf(__('You are using Git version, run [kbd]git pull[/kbd] :-)[br]The latest stable version is %s, released on %s.'), $version, $date)));        } else {            messages_set(                'notice',                $message_id,                __('Version check'),                __('No newer stable version is available'));        }    }}/** * Calculates numerical equivalent of phpMyAdmin version string * * @param string  $version * @return mixed  false on failure, integer on success */function version_to_int($version){    $matches = array();    if (!preg_match('/^(\d+)\.(\d+)\.(\d+)((\.|-(pl|rc|dev|beta|alpha))(\d+)?(-dev)?)?$/', $version, $matches)) {        return false;    }    if (!empty($matches[6])) {        switch ($matches[6]) {            case 'pl':                $added = 60;                break;            case 'rc':                $added = 30;                break;            case 'beta':                $added = 20;                break;            case 'alpha':                $added = 10;                break;            case 'dev':                $added = 0;                break;            default:                messages_set(                    'notice',                    'version_match',                    __('Version check'),                    'Unknown version part: ' . htmlspecialchars($matches[6]));                $added = 0;                break;        }    } else {        $added = 50; // for final    }    if (!empty($matches[7])) {        $added = $added + $matches[7];    }    return $matches[1] * 1000000 + $matches[2] * 10000 + $matches[3] * 100 + $added;}/** * Checks whether config file is readable/writable * * @param bool &$is_readable * @param bool &$is_writable * @param bool &$file_exists */function check_config_rw(&$is_readable, &$is_writable, &$file_exists){    $file_path = ConfigFile::getInstance()->getFilePath();    $file_dir = dirname($file_path);    $is_readable = true;    $is_writable = is_dir($file_dir);    if (SETUP_DIR_WRITABLE) {        $is_writable = $is_writable && is_writable($file_dir);    }    $file_exists = file_exists($file_path);    if ($file_exists) {        $is_readable = is_readable($file_path);        $is_writable = $is_writable && is_writable($file_path);    }}/** * Performs various compatibility, security and consistency checks on current config * * Outputs results to message list, must be called between messages_begin() * and messages_end() */function perform_config_checks(){    $cf = ConfigFile::getInstance();    $blowfish_secret = $cf->get('blowfish_secret');    $blowfish_secret_set = false;    $cookie_auth_used = false;    $strAllowArbitraryServerWarning = __('This %soption%s should be disabled as it allows attackers to bruteforce login to any MySQL server. If you feel this is necessary, use %strusted proxies list%s. However, IP-based protection may not be reliable if your IP belongs to an ISP where thousands of users, including you, are connected to.');    $strAllowArbitraryServerWarning = sprintf($strAllowArbitraryServerWarning, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]', '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strBlowfishSecretMsg = __('You didn\'t have blowfish secret set and have enabled cookie authentication, so a key was automatically generated for you. It is used to encrypt cookies; you don\'t need to remember it.');    $strBZipDumpWarning = __('%sBzip2 compression and decompression%s requires functions (%s) which are unavailable on this system.');    $strBZipDumpWarning = sprintf($strBZipDumpWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    $strDirectoryNotice = __('This value should be double checked to ensure that this directory is neither world accessible nor readable or writable by other users on your server.');    $strForceSSLNotice = __('This %soption%s should be enabled if your web server supports it.');    $strForceSSLNotice = sprintf($strForceSSLNotice, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strGZipDumpWarning = __('%sGZip compression and decompression%s requires functions (%s) which are unavailable on this system.');    $strGZipDumpWarning = sprintf($strGZipDumpWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    $strLoginCookieValidityWarning = __('%sLogin cookie validity%s greater than 1440 seconds may cause random session invalidation if %ssession.gc_maxlifetime%s is lower than its value (currently %d).');    $strLoginCookieValidityWarning = sprintf($strLoginCookieValidityWarning, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]', '[a@' . PMA_getPHPDocLink('session.configuration.php#ini.session.gc-maxlifetime') . ']', '[/a]', ini_get('session.gc_maxlifetime'));    $strLoginCookieValidityWarning2 = __('%sLogin cookie validity%s should be set to 1800 seconds (30 minutes) at most. Values larger than 1800 may pose a security risk such as impersonation.');    $strLoginCookieValidityWarning2 = sprintf($strLoginCookieValidityWarning2, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strLoginCookieValidityWarning3 = __('If using cookie authentication and %sLogin cookie store%s is not 0, %sLogin cookie validity%s must be set to a value less or equal to it.');    $strLoginCookieValidityWarning3 = sprintf($strLoginCookieValidityWarning3, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]', '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strSecurityInfoMsg = __('If you feel this is necessary, use additional protection settings - %shost authentication%s settings and %strusted proxies list%s. However, IP-based protection may not be reliable if your IP belongs to an ISP where thousands of users, including you, are connected to.');    $strSecurityInfoMsg = sprintf($strSecurityInfoMsg, '[a@?page=servers&amp;mode=edit&amp;id=%1$d#tab_Server_config]', '[/a]', '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strServerAuthConfigMsg = __('You set the [kbd]config[/kbd] authentication type and included username and password for auto-login, which is not a desirable option for live hosts. Anyone who knows or guesses your phpMyAdmin URL can directly access your phpMyAdmin panel. Set %sauthentication type%s to [kbd]cookie[/kbd] or [kbd]http[/kbd].');    $strServerAuthConfigMsg = sprintf($strServerAuthConfigMsg, '[a@?page=servers&amp;mode=edit&amp;id=%1$d#tab_Server]', '[/a]');    $strZipDumpExportWarning = __('%sZip compression%s requires functions (%s) which are unavailable on this system.');    $strZipDumpExportWarning = sprintf($strZipDumpExportWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    $strZipDumpImportWarning = __('%sZip decompression%s requires functions (%s) which are unavailable on this system.');    $strZipDumpImportWarning = sprintf($strZipDumpImportWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    for ($i = 1, $server_cnt = $cf->getServerCount(); $i <= $server_cnt; $i++) {        $cookie_auth_server = ($cf->getValue("Servers/$i/auth_type") == 'cookie');        $cookie_auth_used |= $cookie_auth_server;        $server_name = $cf->getServerName($i);        if ($server_name == 'localhost') {            $server_name .=  " [$i]";        }        $server_name = htmlspecialchars($server_name);        if ($cookie_auth_server && $blowfish_secret === null) {            $blowfish_secret = uniqid('', true);            $blowfish_secret_set = true;            $cf->set('blowfish_secret', $blowfish_secret);        }        //        // $cfg['Servers'][$i]['ssl']        // should be enabled if possible        //        if (!$cf->getValue("Servers/$i/ssl")) {            $title = PMA_lang(PMA_lang_name('Servers/1/ssl')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/ssl",                $title,                __('You should use SSL connections if your database server supports it.'));        }        //        // $cfg['Servers'][$i]['extension']        // warn about using 'mysql'        //        if ($cf->getValue("Servers/$i/extension") == 'mysql') {            $title = PMA_lang(PMA_lang_name('Servers/1/extension')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/extension",                $title,                __('You should use mysqli for performance reasons.'));        }        //        // $cfg['Servers'][$i]['auth_type']        // warn about full user credentials if 'auth_type' is 'config'        //        if ($cf->getValue("Servers/$i/auth_type") == 'config'                && $cf->getValue("Servers/$i/user") != ''                && $cf->getValue("Servers/$i/password") != '') {            $title = PMA_lang(PMA_lang_name('Servers/1/auth_type')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/auth_type",                $title,                PMA_lang($strServerAuthConfigMsg, $i) . ' ' .                    PMA_lang($strSecurityInfoMsg, $i));        }        //        // $cfg['Servers'][$i]['AllowRoot']        // $cfg['Servers'][$i]['AllowNoPassword']        // serious security flaw        //        if ($cf->getValue("Servers/$i/AllowRoot")                && $cf->getValue("Servers/$i/AllowNoPassword")) {            $title = PMA_lang(PMA_lang_name('Servers/1/AllowNoPassword')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/AllowNoPassword",                $title,                __('You allow for connecting to the server without a password.') . ' ' .                    PMA_lang($strSecurityInfoMsg, $i));        }    }    //    // $cfg['blowfish_secret']    // it's required for 'cookie' authentication    //    if ($cookie_auth_used) {        if ($blowfish_secret_set) {            // 'cookie' auth used, blowfish_secret was generated            messages_set(                'notice',                'blowfish_secret_created',                PMA_lang(PMA_lang_name('blowfish_secret')),                $strBlowfishSecretMsg);        } else {            $blowfish_warnings = array();            // check length            if (strlen($blowfish_secret) < 8) {                // too short key                $blowfish_warnings[] = __('Key is too short, it should have at least 8 characters.');            }            // check used characters            $has_digits = (bool) preg_match('/\d/', $blowfish_secret);            $has_chars = (bool) preg_match('/\S/', $blowfish_secret);            $has_nonword = (bool) preg_match('/\W/', $blowfish_secret);            if (!$has_digits || !$has_chars || !$has_nonword) {                $blowfish_warnings[] = PMA_lang(__('Key should contain letters, numbers [em]and[/em] special characters.'));            }            if (!empty($blowfish_warnings)) {                messages_set(                    'error',                    'blowfish_warnings' . count($blowfish_warnings),                    PMA_lang(PMA_lang_name('blowfish_secret')),                    implode('<br />', $blowfish_warnings));            }        }    }    //    // $cfg['ForceSSL']    // should be enabled if possible    //    if (!$cf->getValue('ForceSSL')) {        messages_set(            'notice',            'ForceSSL',            PMA_lang(PMA_lang_name('ForceSSL')),            PMA_lang($strForceSSLNotice));    }    //    // $cfg['AllowArbitraryServer']    // should be disabled    //    if ($cf->getValue('AllowArbitraryServer')) {        messages_set(            'notice',            'AllowArbitraryServer',            PMA_lang(PMA_lang_name('AllowArbitraryServer')),            PMA_lang($strAllowArbitraryServerWarning));    }    //    // $cfg['LoginCookieValidity']    // value greater than session.gc_maxlifetime will cause random session invalidation after that time    //    if ($cf->getValue('LoginCookieValidity') > 1440            || $cf->getValue('LoginCookieValidity') > ini_get('session.gc_maxlifetime')) {        $message_type = $cf->getValue('LoginCookieValidity') > ini_get('session.gc_maxlifetime')            ? 'error'            : 'notice';        messages_set(            $message_type,            'LoginCookieValidity',            PMA_lang(PMA_lang_name('LoginCookieValidity')),            PMA_lang($strLoginCookieValidityWarning));    }    //    // $cfg['LoginCookieValidity']    // should be at most 1800 (30 min)    //    if ($cf->getValue('LoginCookieValidity') > 1800) {        messages_set(            'notice',            'LoginCookieValidity',            PMA_lang(PMA_lang_name('LoginCookieValidity')),            PMA_lang($strLoginCookieValidityWarning2));    }    //    // $cfg['LoginCookieValidity']    // $cfg['LoginCookieStore']    // LoginCookieValidity must be less or equal to LoginCookieStore    //    if ($cf->getValue('LoginCookieStore') != 0 && $cf->getValue('LoginCookieValidity') > $cf->getValue('LoginCookieStore')) {        messages_set(            'error',            'LoginCookieValidity',            PMA_lang(PMA_lang_name('LoginCookieValidity')),            PMA_lang($strLoginCookieValidityWarning3));    }    //    // $cfg['SaveDir']    // should not be world-accessible    //    if ($cf->getValue('SaveDir') != '') {        messages_set(            'notice',            'SaveDir',            PMA_lang(PMA_lang_name('SaveDir')),            PMA_lang($strDirectoryNotice));    }    //    // $cfg['TempDir']    // should not be world-accessible    //    if ($cf->getValue('TempDir') != '') {        messages_set(            'notice',            'TempDir',            PMA_lang(PMA_lang_name('TempDir')),            PMA_lang($strDirectoryNotice));    }    //    // $cfg['GZipDump']    // requires zlib functions    //    if ($cf->getValue('GZipDump')            && (@!function_exists('gzopen') || @!function_exists('gzencode'))) {        messages_set(            'error',            'GZipDump',            PMA_lang(PMA_lang_name('GZipDump')),            PMA_lang($strGZipDumpWarning, 'gzencode'));    }    //    // $cfg['BZipDump']    // requires bzip2 functions    //    if ($cf->getValue('BZipDump')            && (!@function_exists('bzopen') || !@function_exists('bzcompress'))) {        $functions = @function_exists('bzopen')                ? '' :                'bzopen';        $functions .= @function_exists('bzcompress')                ? ''                : ($functions ? ', ' : '') . 'bzcompress';        messages_set(            'error',            'BZipDump',            PMA_lang(PMA_lang_name('BZipDump')),            PMA_lang($strBZipDumpWarning, $functions));    }    //    // $cfg['ZipDump']    // requires zip_open in import    //    if ($cf->getValue('ZipDump') && !@function_exists('zip_open')) {        messages_set(            'error',            'ZipDump_import',            PMA_lang(PMA_lang_name('ZipDump')),            PMA_lang($strZipDumpImportWarning, 'zip_open'));    }    //    // $cfg['ZipDump']    // requires gzcompress in export    //    if ($cf->getValue('ZipDump') && !@function_exists('gzcompress')) {        messages_set(            'error',            'ZipDump_export',            PMA_lang(PMA_lang_name('ZipDump')),            PMA_lang($strZipDumpExportWarning, 'gzcompress'));    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$table = $T;$display_field = $F;if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);    if ($disp) {        if ($display_field != $disp) {            $upd_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' SET display_field = \'' . PMA_sqlAddSlashes($display_field) . '\''                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        } else {            $upd_query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        }    } elseif ($display_field != '') {        $upd_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                   . '(db_name, table_name, display_field) '                   . ' VALUES('                   . '\'' . PMA_sqlAddSlashes($db) . '\','                   . '\'' . PMA_sqlAddSlashes($table) . '\','                   . '\'' . PMA_sqlAddSlashes($display_field) . '\')';    }    if (isset($upd_query)) {        $upd_rs    = PMA_query_as_controluser($upd_query);    }} // end ifheader("Content-Type: text/xml; charset=utf-8");header("Cache-Control: no-cache");die("<root act='save_pos' return=__('Modifications have been saved')></root>");?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-String-MB *//** * Returns length of string depending on current charset. * * @param string   string to count * @return  int      string length */function PMA_strlen($string){    return mb_strlen($string);}/** * Returns substring from string, works depending on current charset. * * @param string $string  string to count * @param int    $start   start of substring * @param int    $length  length of substring * @return  string */function PMA_substr($string, $start, $length = 2147483647){    return mb_substr($string, $start, $length);}/** * Returns postion of $needle in $haystack or false if not found * * @param string  $haystack * @param string  $needle * @param int     $offset * @return  integer position of $needle in $haystack or false */function PMA_strpos($haystack, $needle, $offset = 0){    return mb_strpos($haystack, $needle, $offset);}/** * Make a string lowercase * * @param string  $string * @return  string */function PMA_strtolower($string){    return mb_strtolower($string);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (! defined('PHPMYADMIN')) {    exit;}$ID_KEY = "UPLOAD_IDENTIFIER";/** * Returns upload status. * * This is implementation for uploadprogress extension. * * @param string $id * @return array|null */function PMA_getUploadStatus($id){    global $SESSION_KEY;    global $ID_KEY;    if (trim($id) == "") {        return null;    }    if (! array_key_exists($id, $_SESSION[$SESSION_KEY])) {        $_SESSION[$SESSION_KEY][$id] = array(                    'id'       => $id,                    'finished' => false,                    'percent'  => 0,                    'total'    => 0,                    'complete' => 0,                    'plugin'   => $ID_KEY        );    }    $ret = $_SESSION[$SESSION_KEY][$id];    if (! PMA_import_uploadprogressCheck() || $ret['finished']) {        return $ret;    }    $status = uploadprogress_get_info($id);    if ($status) {        if ($status['bytes_uploaded'] == $status['bytes_total']) {            $ret['finished'] = true;        } else {            $ret['finished'] = false;        }        $ret['total']    = $status['bytes_total'];        $ret['complete'] = $status['bytes_uploaded'];        if ($ret['total'] > 0) {            $ret['percent'] = $ret['complete'] / $ret['total'] * 100;        }    } else {       $ret = array(                    'id'       => $id,                    'finished' => true,                    'percent'  => 100,                    'total'    => $ret['total'],                    'complete' => $ret['total'],                    'plugin'   => $ID_KEY                );    }    $_SESSION[$SESSION_KEY][$id] = $ret;    return $ret;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Handles table zoom search tab * * display table zoom search form, create SQL queries from form data * *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';require_once './libraries/tbl_select.lib.php';require_once './libraries/relation.lib.php';require_once './libraries/tbl_info.inc.php';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'tbl_zoom_plot.js';$GLOBALS['js_include'][] = 'date.js';$GLOBALS['js_include'][] = 'jquery/jquery.mousewheel.js';$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';$GLOBALS['js_include'][] = 'canvg/canvg.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';/** * Handle AJAX request for data row on point select * @var post_params Object containing parameters for the POST request */if (isset($_REQUEST['get_data_row']) && $_REQUEST['get_data_row'] == true) {    $extra_data = array();    $row_info_query = 'SELECT * FROM `' . $_REQUEST['db'] . '`.`'        . $_REQUEST['table'] . '` WHERE ' .  $_REQUEST['where_clause'];    $result = PMA_DBI_query($row_info_query . ";", null, PMA_DBI_QUERY_STORE);    $fields_meta = PMA_DBI_get_fields_meta($result);    while ($row = PMA_DBI_fetch_assoc($result)) {        // for bit fields we need to convert them to printable form        $i = 0;        foreach ($row as $col => $val) {            if ($fields_meta[$i]->type == 'bit') {                $row[$col] = PMA_printable_bit_value($val, $fields_meta[$i]->length);            }            $i++;        }        $extra_data['row_info'] = $row;    }    PMA_ajaxResponse(null, true, $extra_data);}$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));/** * Not selection yet required -> displays the selection form */// Gets some core librariesrequire_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_select.php&amp;back=tbl_select.php';/** * Gets tables informations */require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';if (! isset($goto)) {    $goto = $GLOBALS['cfg']['DefaultTabTable'];}// Defines the url to return to in case of error in the next sql statement$err_url   = $goto . '?' . PMA_generate_common_url($db, $table);// Gets the list and number of fieldslist($fields_list, $fields_type, $fields_collation, $fields_null) = PMA_tbl_getFields($db, $table);$fields_cnt = count($fields_list);// retrieve keys into foreign fields, if any// check also foreigners even if relwork is FALSE (to get// foreign keys from innodb)$foreigners = PMA_getForeigners($db, $table);$flag = 1;$tbl_fields_type = $tbl_fields_collation = $tbl_fields_null = array();if (! isset($zoom_submit) && ! isset($inputs)) {    $dataLabel = PMA_getDisplayField($db, $table);}?><div id="sqlqueryresults"></div><fieldset id="fieldset_subtab"><?php$url_params = array();$url_params['db']    = $db;$url_params['table'] = $table;echo PMA_generate_html_tabs(PMA_tbl_getSubTabs(), $url_params, '', 'topmenu2');/** *  Set the field name,type,collation and whether null on select of a coulmn */if (isset($inputs) && ($inputs[0] != 'pma_null' || $inputs[1] != 'pma_null')) {    $flag = 2;    for ($i = 0 ; $i < 4 ; $i++) {        if ($inputs[$i] != 'pma_null') {            $key = array_search($inputs[$i], $fields_list);            $tbl_fields_type[$i] = $fields_type[$key];            $tbl_fields_collation[$i] = $fields_collation[$key];            $tbl_fields_null[$i] = $fields_null[$key];        }    }}/* * Form for input criteria */?><form method="post" action="tbl_zoom_select.php" name="insertForm" id="zoom_search_form"    <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?php echo PMA_generate_common_hidden_inputs($db, $table); ?><input type="hidden" name="goto" value="<?php echo $goto; ?>" /><input type="hidden" name="back" value="tbl_zoom_select.php" /><input type="hidden" name="flag" id="id_flag" value="<?php echo $flag; ?>" /><fieldset id="inputSection"><legend><?php echo __('Do a "query by example" (wildcard: "%") for two different columns') ?></legend><table class="data"><?php echo PMA_tbl_setTableHeader();?><tbody><?php    $odd_row = true;for ($i = 0; $i < 4; $i++) {    if ($i == 2) {        echo "<tr><td>";        echo __("Additional search criteria");        echo "</td></tr>";    }    ?>    <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">        <th><select name="inputs[]" id="<?php echo 'tableid_' . $i; ?>" >        <option value="<?php echo 'pma_null'; ?>"><?php echo __('None');  ?></option>    <?php    for ($j = 0 ; $j < $fields_cnt ; $j++) {        if (isset($inputs[$i]) && $inputs[$i] == htmlspecialchars($fields_list[$j])) {?>            <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" selected="selected">                <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php        } else { ?>            <option value="<?php echo htmlspecialchars($fields_list[$j]);?>">                <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php        }    } ?>        </select></th>        <td><?php if (isset($tbl_fields_type[$i])) echo $tbl_fields_type[$i]; ?></td>        <td><?php if (isset($tbl_fields_collation[$i])) echo $tbl_fields_collation[$i]; ?></td>        <td>    <?php    if (isset($inputs) && $inputs[$i] != 'pma_null') { ?>        <select name="zoomFunc[]">        <?php        if (strncasecmp($tbl_fields_type[$i], 'enum', 4) == 0) {            foreach ($GLOBALS['cfg']['EnumOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == htmlspecialchars($fc)) {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } elseif (preg_match('@char|blob|text|set@i', $tbl_fields_type[$i])) {            foreach ($GLOBALS['cfg']['TextOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } else {            foreach ($GLOBALS['cfg']['NumOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } // end if... else...        if ($tbl_fields_null[$i]) {            foreach ($GLOBALS['cfg']['NullOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        }        ?>        </select>        </td>        <td>        <?php        $field = $inputs[$i];        $foreignData = PMA_getForeignData($foreigners, $field, false, '', '');        if (isset($fields)) {            echo PMA_getForeignFields_Values(                $foreigners, $foreignData, $field, $tbl_fields_type, $i, $db,                $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], $fields            );        } else {            echo PMA_getForeignFields_Values(                $foreigners, $foreignData, $field, $tbl_fields_type, $i, $db,                $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], ''            );        }    } else { ?>        </td><td></td>        <?php    } ?>    </tr>    <tr><td>      <input type="hidden" name="types[<?php echo $i; ?>]" id="types_<?php echo $i; ?>"        value="<?php if(isset($tbl_fields_type[$i]))echo $tbl_fields_type[$i]; ?>" />      <input type="hidden" name="collations[<?php echo $i; ?>]"        value="<?php if(isset($tbl_fields_collation[$i]))echo $tbl_fields_collation[$i]; ?>" />    </td></tr>    <?php}//end for?>    </tbody>    </table><?php/* * Other inputs like data label and mode go after selection of column criteria *///Set default datalabel if not selectedif (isset($zoom_submit) && $inputs[0] != 'pma_null' && $inputs[1] != 'pma_null') {    if ($dataLabel == '') {        $dataLabel = PMA_getDisplayField($db, $table);    }}?>    <table class="data">    <tr><td><label for="dataLabel"><?php echo __("Use this column to label each point"); ?></label></td>    <td><select name="dataLabel" id='dataLabel' >        <option value = ''> <?php echo __('None');  ?> </option><?phpfor ($j = 0; $j < $fields_cnt; $j++) {    if (isset($dataLabel) && $dataLabel == htmlspecialchars($fields_list[$j])) {        ?>        <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" selected="selected">            <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php    } else {        ?>        <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" >            <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php    }}?>    </select>    </td></tr>    <tr><td><label for="maxRowPlotLimit"><?php echo __("Maximum rows to plot"); ?></label></td>    <td><?phpecho '<input type="text" name="maxPlotLimit" id="maxRowPlotLimit" value="';if (! empty($maxPlotLimit)) {    echo htmlspecialchars($maxPlotLimit);} else {    echo $GLOBALS['cfg']['maxRowPlotLimit'];}echo '" /></td></tr>';?>    </table></fieldset><fieldset class="tblFooters">    <input type="hidden" name="max_number_of_fields"        value="<?php echo $fields_cnt; ?>" />    <input type="submit" name="zoom_submit" id="inputFormSubmitId" value="<?php echo __('Go'); ?>" /></fieldset></form></fieldset><?php/* * Handle the input criteria and generate the query result * Form for displaying query results */if (isset($zoom_submit) && $inputs[0] != 'pma_null' && $inputs[1] != 'pma_null' && $inputs[0] != $inputs[1]) {    /*     * Query generation part     */    $w = $data = array();    $sql_query = 'SELECT *';    //Add the table    $sql_query .= ' FROM ' . PMA_backquote($table);    for ($i = 0; $i < 4; $i++) {        if ($inputs[$i] == 'pma_null') {            continue;        }        $tmp = array();        // The where clause        $charsets = array();        $cnt_func = count($zoomFunc[$i]);        $func_type = $zoomFunc[$i];        list($charsets[$i]) = explode('_', $collations[$i]);        $unaryFlag = (isset($GLOBALS['cfg']['UnaryOperators'][$func_type])                      && $GLOBALS['cfg']['UnaryOperators'][$func_type] == 1)                      ? true                      : false;        $whereClause = PMA_tbl_search_getWhereClause(            $fields[$i], $inputs[$i], $types[$i],            $collations[$i], $func_type, $unaryFlag        );        if ($whereClause) {            $w[] = $whereClause;        }    } // end for    if ($w) {        $sql_query .= ' WHERE ' . implode(' AND ', $w);    }    $sql_query .= ' LIMIT ' . $maxPlotLimit;    /*     * Query execution part     */    $result = PMA_DBI_query($sql_query . ";", null, PMA_DBI_QUERY_STORE);    $fields_meta = PMA_DBI_get_fields_meta($result);    while ($row = PMA_DBI_fetch_assoc($result)) {        //Need a row with indexes as 0,1,2 for the PMA_getUniqueCondition hence using a temporary array        $tmpRow = array();        foreach ($row as $val) {            $tmpRow[] = $val;        }        //Get unique conditon on each row (will be needed for row update)        $uniqueCondition = PMA_getUniqueCondition($result, $fields_cnt, $fields_meta, $tmpRow, true);        //Append it to row array as where_clause        $row['where_clause'] = $uniqueCondition[0];        if ($dataLabel == $inputs[0] || $dataLabel == $inputs[1]) {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                'where_clause' => $uniqueCondition[0]            );        } elseif ($dataLabel) {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                $dataLabel     => $row[$dataLabel],                'where_clause' => $uniqueCondition[0]            );        } else {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                $dataLabel     => '',                'where_clause' => $uniqueCondition[0]            );        }    }    /*     * Form for displaying point data and also the scatter plot     */    ?>    <form method="post" action="tbl_zoom_select.php" name="displayResultForm" id="zoom_display_form"        <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>>    <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>    <input type="hidden" name="goto" value="<?php echo $goto; ?>" />    <input type="hidden" name="back" value="tbl_zoom_select.php" />    <fieldset id="displaySection">      <legend><?php echo __('Browse/Edit the points') ?></legend>      <center>    <?php    //JSON encode the data(query result)    if (isset($zoom_submit) && ! empty($data)) {        ?>        <div id='resizer' style="width:600px;height:400px">          <center><a href="#" onclick="displayHelp();"><?php echo __('How to use'); ?></a></center>          <div id="querydata" style="display:none">        <?php        echo json_encode($data);        ?>          </div>          <div id="querychart" style="float:right"></div>        </div>        <?php    }    ?>      </center>      <div id='dataDisplay' style="display:none">        <table>          <thead>            <tr>              <th> <?php echo __('Column'); ?> </th>              <th> <?php echo __('Null'); ?> </th>              <th> <?php echo __('Value'); ?> </th>            </tr>          </thead>          <tbody>    <?php    $odd_row = true;    for ($i = 4; $i < $fields_cnt + 4; $i++) {        $tbl_fields_type[$i] = $fields_type[$i - 4];        $fieldpopup = $fields_list[$i - 4];        $foreignData = PMA_getForeignData($foreigners, $fieldpopup, false, '', '');        ?>            <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">              <th><?php echo htmlspecialchars($fields_list[$i - 4]); ?></th>              <th><?php echo ($fields_null[$i - 4] == 'YES')                  ? '<input type="checkbox" class="checkbox_null" name="fields_null[ '                      . $i . ' ]" id="fields_null_id_' . $i . '" />'                  : ''; ?>              </th>              <th> <?php              echo PMA_getForeignFields_Values(                  $foreigners, $foreignData, $fieldpopup, $tbl_fields_type,                  $i, $db, $table, $titles,                  $GLOBALS['cfg']['ForeignKeyMaxLimit'], '', false, true              ); ?>              </th>            </tr>        <?php    }    ?>          </tbody>        </table>    </div>    <input type="hidden" id="queryID" name="sql_query" />    </form>    <?php}require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * requirements */require_once './libraries/common.inc.php';/** * JS includes */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/jquery.cookie.js';$GLOBALS['js_include'][] = 'jquery/jquery.tablesorter.js';$GLOBALS['js_include'][] = 'server_plugins.js';/** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($GLOBALS['cfg']['MainPageIconic']        ? '<img class="icon" src="' . $pmaThemeImage . 'b_engine.png"'            .' width="16" height="16" alt="" />' : '')   . "\n" . __('Plugins') . "\n"   . '</h2>' . "\n";/** * Prepare plugin list */$sql = "SELECT p.plugin_name, p.plugin_type, p.is_active, m.module_name, m.module_library,        m.module_version, m.module_author, m.module_description, m.module_license    FROM data_dictionary.plugins p        JOIN data_dictionary.modules m USING (module_name)    ORDER BY m.module_name, p.plugin_type, p.plugin_name";$res = PMA_DBI_query($sql);$plugins = array();$modules = array();while ($row = PMA_DBI_fetch_assoc($res)) {    $plugins[$row['plugin_type']][] = $row;    $modules[$row['module_name']]['info'] = $row;    $modules[$row['module_name']]['plugins'][$row['plugin_type']][] = $row;}PMA_DBI_free_result($res);// sort plugin list (modules are already sorted)ksort($plugins);/** * Displays the page */?><script type="text/javascript">pma_theme_image = '<?php echo $GLOBALS['pmaThemeImage']; ?>';</script><div id="pluginsTabs">    <ul>        <li><a href="#plugins_plugins"><?php echo __('Plugins'); ?></a></li>        <li><a href="#plugins_modules"><?php echo __('Modules'); ?></a></li>    </ul>    <div id="plugins_plugins">        <div id="sectionlinks">        <?php        foreach ($plugins as $plugin_type => $plugin_list) {            $key = 'plugins-' . preg_replace('/[^a-z]/', '', strtolower($plugin_type));            echo '<a href="#' . $key . '">' . htmlspecialchars($plugin_type) . '</a>' . "\n";        }        ?>        </div>        <br />        <?php        foreach ($plugins as $plugin_type => $plugin_list) {            $key = 'plugins-' . preg_replace('/[^a-z]/', '', strtolower($plugin_type));            sort($plugin_list);            ?>            <table class="data_full_width" id="<?php echo $key; ?>">            <caption class="tblHeaders">                <a class="top" href="#serverinfo"><?php                    echo __('Begin');                    echo $GLOBALS['cfg']['MainPageIconic']                        ? '<img src="' . $GLOBALS['pmaThemeImage'] .                            's_asc.png" width="11" height="9" align="middle" alt="" />'                        : ''; ?></a>                <?php echo htmlspecialchars($plugin_type); ?>            </caption>            <thead>                <tr>                    <th><?php echo __('Plugin'); ?></th>                    <th><?php echo __('Module'); ?></th>                    <th><?php echo __('Library'); ?></th>                    <th><?php echo __('Version'); ?></th>                    <th><?php echo __('Author'); ?></th>                    <th><?php echo __('License'); ?></th>                </tr>            </thead>            <tbody>            <?php            $odd_row = false;            foreach ($plugin_list as $plugin) {                $odd_row = !$odd_row;            ?>            <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">                <th><?php echo htmlspecialchars($plugin['plugin_name']); ?></th>                <td><?php echo htmlspecialchars($plugin['module_name']); ?></td>                <td><?php echo htmlspecialchars($plugin['module_library']); ?></td>                <td><?php echo htmlspecialchars($plugin['module_version']); ?></td>                <td><?php echo htmlspecialchars($plugin['module_author']); ?></td>                <td><?php echo htmlspecialchars($plugin['module_license']); ?></td>            </tr>            <?php            }            ?>            </tbody>            </table>            <?php        }        ?>    </div>    <div id="plugins_modules">        <table class="data_full_width">        <thead>            <tr>                <th><?php echo __('Module'); ?></th>                <th><?php echo __('Description'); ?></th>                <th><?php echo __('Library'); ?></th>                <th><?php echo __('Version'); ?></th>                <th><?php echo __('Author'); ?></th>                <th><?php echo __('License'); ?></th>            </tr>        </thead>        <tbody>        <?php        $odd_row = false;        foreach ($modules as $module_name => $module) {            $odd_row = !$odd_row;        ?>            <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">                <th rowspan="2"><?php echo htmlspecialchars($module_name); ?></th>                <td><?php echo htmlspecialchars($module['info']['module_description']); ?></td>                <td><?php echo htmlspecialchars($module['info']['module_library']); ?></td>                <td><?php echo htmlspecialchars($module['info']['module_version']); ?></td>                <td><?php echo htmlspecialchars($module['info']['module_author']); ?></td>                <td><?php echo htmlspecialchars($module['info']['module_license']); ?></td>            </tr>            <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">                <td colspan="5">                    <table>                        <tbody>                        <?php                        foreach ($module['plugins'] as $plugin_type => $plugin_list) {                        ?>                            <tr class="noclick">                                <td><b class="plugin-type"><?php echo htmlspecialchars($plugin_type); ?></b></td>                                <td>                                <?php                                for ($i = 0; $i < count($plugin_list); $i++) {                                    echo ($i != 0 ? '<br />' : '') . htmlspecialchars($plugin_list[$i]['plugin_name']);                                    if (!$plugin_list[$i]['is_active']) {                                        echo ' <small class="attention">' . __('disabled') . '</small>';                                    }                                }                                ?>                                </td>                            </tr>                        <?php                        }                        ?>                        </tbody>                    </table>                </td>            </tr>        <?php        }        ?>        </tbody>        </table>    </div></div><?php/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer */require_once './libraries/pmd_common.php';/** * If called directly from the designer, first save the positions */if (! isset($scale)) {    $no_die_save_pos = 1;    include_once 'pmd_save_pos.php';}if (isset($mode)) {    if ('create_export' != $mode && empty($pdf_page_number)) {        die("<script>alert('Pages not found!');history.go(-2);</script>");    }    $pmd_table = PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']);    $pma_table = PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_coords']);    $scale_q = PMA_sqlAddSlashes($scale);    if ('create_export' == $mode) {        $pdf_page_number = PMA_REL_create_page($newpage, $cfgRelation, $db);        if ($pdf_page_number > 0) {            $message = PMA_Message::success(__('Page has been created'));            $mode = 'export';        } else {            $message = PMA_Message::error(__('Page creation failed'));        }    }    $pdf_page_number_q = PMA_sqlAddSlashes($pdf_page_number);    if ('export' == $mode) {        $sql = "REPLACE INTO " . $pma_table . " (db_name, table_name, pdf_page_number, x, y) SELECT db_name, table_name, " . $pdf_page_number_q . ", ROUND(x/" . $scale_q . ") , ROUND(y/" . $scale_q . ") y FROM " . $pmd_table . " WHERE db_name = '" . PMA_sqlAddSlashes($db) . "'";        PMA_query_as_controluser($sql, true, PMA_DBI_QUERY_STORE);    }    if ('import' == $mode) {        PMA_query_as_controluser(        'UPDATE ' . $pma_table . ',' . $pmd_table .        ' SET ' . $pmd_table . '.`x`= ' . $pma_table . '.`x` * '. $scale_q . ',        ' . $pmd_table . '.`y`= ' . $pma_table . '.`y` * '. $scale_q .'        WHERE        ' . $pmd_table . '.`db_name`=' . $pma_table . '.`db_name`        AND        ' . $pmd_table . '.`table_name` = ' . $pma_table . '.`table_name`        AND        ' . $pmd_table . '.`db_name`=\''. PMA_sqlAddSlashes($db) .'\'        AND pdf_page_number = ' . $pdf_page_number_q . ';', true, PMA_DBI_QUERY_STORE);    }}// no need to use pmd/stylesrequire_once './libraries/header_meta_style.inc.php';?></head><body><br><div><?php    if (!empty($message)) {        $message->display();    }?>  <form name="form1" method="post" action="pmd_pdf.php"><?phpecho PMA_generate_common_hidden_inputs($db);echo '<div>';echo '<fieldset><legend>' . __('Import/Export coordinates for PDF schema') . '</legend>';$choices = array();$table_info_result = PMA_query_as_controluser('SELECT * FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'');if (PMA_DBI_num_rows($table_info_result) > 0) {    echo '<p>' . __('Page') . ':';    echo '<select name="pdf_page_number">';    while ($page = PMA_DBI_fetch_assoc($table_info_result)) {        echo '<option value="' . $page['page_nr'] . '">';        echo htmlspecialchars($page['page_descr']);        echo '</option>';    }    echo '</select>';    echo '</p>';    $choices['import'] = __('Import from selected page');    $choices['export'] = __('Export to selected page');}$choices['create_export'] = __('Create a page and export to it');if (1 == count($choices)) {    echo $choices['create_export'];    echo '<input type="hidden" name="mode" value="create_export" />';} else {    PMA_display_html_radio('mode', $choices, $checked_choice = '', $line_break = true, $escape_label = false, $class = '');}echo '<br />';echo '<label for="newpage">' . __('New page name: ') . '</label>';echo '<input id="newpage" type="text" name="newpage" />';echo '<p>' . __('Export/Import to scale') . ':';?>      <select name="scale">        <option value="1">1:1</option>        <option value="2">1:2</option>        <option value="3" selected>1:3 (<?php echo __('recommended'); ?>)</option>        <option value="4">1:4</option>        <option value="5">1:5</option>        </select>      </p>      <input type="submit" value="<?php echo __('Go'); ?>">    </fieldset>    </div>  </form></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * MIME detection code. * * @package PhpMyAdmin * @todo Maybe we could try to use fileinfo module if loaded *//** * Tries to detect MIME type of content. * * @param string &$test * @return string */function PMA_detectMIME(&$test){    $len = strlen($test);    if ($len >= 2 && $test[0] == chr(0xff) && $test[1] == chr(0xd8)) {        return 'image/jpeg';    }    if ($len >= 3 && substr($test, 0, 3) == 'GIF') {        return 'image/gif';    }    if ($len >= 4 && substr($test, 0, 4) == "\x89PNG") {        return 'image/png';    }    return 'application/octet-stream';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * PHP interface to MimerSQL Validator * * Copyright 2002, 2003 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * All data is transported over HTTP-SOAP * And uses either the PEAR SOAP Module or PHP SOAP extension * * Install instructions for PEAR SOAP: * Make sure you have a really recent PHP with PEAR support * run this: "pear install Mail_Mime Net_DIME SOAP" * * @access   public * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Load SOAP client. */if (class_exists('SOAPClient')) {    $GLOBALS['sqlvalidator_error'] = false;    $GLOBALS['sqlvalidator_soap'] = 'PHP';} else {    @include_once 'SOAP/Client.php';    if (class_exists('SOAP_Client')) {        $GLOBALS['sqlvalidator_soap'] = 'PEAR';        $GLOBALS['sqlvalidator_error'] = false;    } else {        $GLOBALS['sqlvalidator_soap'] = 'NONE';        $GLOBALS['sqlvalidator_error'] = true;        PMA_warnMissingExtension('soap');    }}if (!$GLOBALS['sqlvalidator_error']) {    // Ok, we have SOAP Support, so let's use it!/** * @package PhpMyAdmin */    class PMA_SQLValidator    {        var $url;        var $service_name;        var $wsdl;        var $output_type;        var $username;        var $password;        var $calling_program;        var $calling_program_version;        var $target_dbms;        var $target_dbms_version;        var $connectionTechnology;        var $connection_technology_version;        var $interactive;        var $service_link = null;        var $session_data = null;        /**         * Private functions - You don't need to mess with these         */        /**         * Service opening         *         * @param string  URL of Mimer SQL Validator WSDL file         *         * @return object  Object to use         *         * @access private         */        function _openService($url)        {            if ($GLOBALS['sqlvalidator_soap'] == 'PHP') {                $obj = new SOAPClient($url);            } else {                $obj = new SOAP_Client($url, true);            }            return $obj;        } // end of the "openService()" function        /**         * Service initializer to connect to server         *         * @param object   Service object         * @param string   Username         * @param string   Password         * @param string   Name of calling program         * @param string   Version of calling program         * @param string   Target DBMS         * @param string   Version of target DBMS         * @param string   Connection Technology         * @param string   version of Connection Technology         * @param integer  boolean of 1/0 to specify if we are an interactive system         *         * @return object   stdClass return object with data         *         * @access private         */        function _openSession($obj, $username, $password,                                      $calling_program, $calling_program_version,                                      $target_dbms, $target_dbms_version,                                      $connection_technology, $connection_technology_version,                                      $interactive)        {            $use_array = array(                "a_userName" => $username,                "a_password" => $password,                "a_callingProgram" => $calling_program,                "a_callingProgramVersion" => $calling_program_version,                "a_targetDbms" => $target_dbms,                "a_targetDbmsVersion" => $target_dbms_version,                "a_connectionTechnology" => $connection_technology,                "a_connectionTechnologyVersion" => $connection_technology_version,                "a_interactive" => $interactive,            );            if ($GLOBALS['sqlvalidator_soap'] == 'PHP') {                $ret = $obj->__soapCall("openSession", $use_array);            } else {                $ret = $obj->call("openSession", $use_array);            }            return $ret;        } // end of the "_openSession()" function        /**         * Validator sytem call         *         * @param object  Service object         * @param object  Session object         * @param string  SQL Query to validate         * @param string  Data return type         *         * @return object  stClass return with data         *         * @access private         */        function _validateSQL($obj, $session, $sql, $method)        {            $use_array = array(                "a_sessionId" => $session->sessionId,                "a_sessionKey" => $session->sessionKey,                "a_SQL" => $sql,                "a_resultType" => $this->output_type,            );            if ($GLOBALS['sqlvalidator_soap'] == 'PHP') {                $res = $obj->__soapCall("validateSQL", $use_array);            } else {                $res = $obj->call("validateSQL", $use_array);            }            return $res;        } // end of the "validateSQL()" function        /**         * Validator sytem call         *         * @param string  SQL Query to validate         *         * @return object  stdClass return with data         *         * @access private         *         * @see    validateSQL()         */        function _validate($sql)        {            $ret = $this->_validateSQL($this->service_link, $this->session_data,                                               $sql, $this->output_type);            return $ret;        } // end of the "validate()" function        /**         * Public functions         */        /**         * Constructor         *         * @access public         */        function __construct()        {            $this->url                           = 'http://sqlvalidator.mimer.com/v1/services';            $this->service_name                  = 'SQL99Validator';            $this->wsdl                          = '?wsdl';            $this->output_type                   = 'html';            $this->username                      = 'anonymous';            $this->password                      = '';            $this->calling_program               = 'PHP_SQLValidator';            $this->calling_program_version       = PMA_VERSION;            $this->target_dbms                   = 'N/A';            $this->target_dbms_version           = 'N/A';            $this->connection_technology         = 'PHP';            $this->connection_technology_version = phpversion();            $this->interactive = 1;            $this->service_link = null;            $this->session_data = null;        } // end of the "PMA_SQLValidator()" function        /**         * Sets credentials         *         * @param string  the username         * @param string  the password         *         * @access public         */        function setCredentials($username, $password)        {            $this->username = $username;            $this->password = $password;        } // end of the "setCredentials()" function        /**         * Sets the calling program         *         * @param string  the calling program name         * @param string  the calling program revision         *         * @access public         */        function setCallingProgram($calling_program, $calling_program_version)        {            $this->calling_program         = $calling_program;            $this->calling_program_version = $calling_program_version;        } // end of the "setCallingProgram()" function        /**         * Appends the calling program         *         * @param string  the calling program name         * @param string  the calling program revision         *         * @access public         */        function appendCallingProgram($calling_program, $calling_program_version)        {            $this->calling_program         .= ' - ' . $calling_program;            $this->calling_program_version .= ' - ' . $calling_program_version;        } // end of the "appendCallingProgram()" function        /**         * Sets the target DBMS         *         * @param string  the target DBMS name         * @param string  the target DBMS revision         *         * @access public         */        function setTargetDbms($target_dbms, $target_dbms_version)        {            $this->target_dbms         = $target_dbms;            $this->target_dbms_version = $target_dbms_version;        } // end of the "setTargetDbms()" function        /**         * Appends the target DBMS         *         * @param string  the target DBMS name         * @param string  the target DBMS revision         *         * @access public         */        function appendTargetDbms($target_dbms, $target_dbms_version)        {            $this->target_dbms         .= ' - ' . $target_dbms;            $this->target_dbms_version .= ' - ' . $target_dbms_version;        } // end of the "appendTargetDbms()" function        /**         * Sets the connection technology used         *         * @param string  the connection technology name         * @param string  the connection technology revision         *         * @access public         */        function setConnectionTechnology($connection_technology, $connection_technology_version)        {            $this->connection_technology         = $connection_technology;            $this->connection_technology_version = $connection_technology_version;        } // end of the "setConnectionTechnology()" function        /**         * Appends the connection technology used         *         * @param string  the connection technology name         * @param string  the connection technology revision         *         * @access public         */        function appendConnectionTechnology($connection_technology, $connection_technology_version)        {            $this->connection_technology         .= ' - ' . $connection_technology;            $this->connection_technology_version .= ' - ' . $connection_technology_version;        } // end of the "appendConnectionTechnology()" function        /**         * Sets whether interactive mode should be used or not         *         * @param integer  whether interactive mode should be used or not         *         * @access public         */        function setInteractive($interactive)        {            $this->interactive = $interactive;        } // end of the "setInteractive()" function        /**         * Sets the output type to use         *         * @param string  the output type to use         *         * @access public         */        function setOutputType($output_type)        {            $this->output_type = $output_type;        } // end of the "setOutputType()" function        /**         * Starts service         *         * @access public         */        function startService()        {            $this->service_link = $this->_openService($this->url . '/' . $this->service_name . $this->wsdl);        } // end of the "startService()" function        /**         * Starts session         *         * @access public         */        function startSession()        {            $this->session_data = $this->_openSession($this->service_link, $this->username, $this->password,                                                              $this->calling_program, $this->calling_program_version,                                                              $this->target_dbms, $this->target_dbms_version,                                                              $this->connection_technology, $this->connection_technology_version,                                                              $this->interactive);            if (isset($this->session_data) && ($this->session_data != null)                && ($this->session_data->target != $this->url)) {                // Reopens the service on the new URL that was provided                $url = $this->session_data->target;                $this->startService();            }        } // end of the "startSession()" function        /**         * Do start service and session         *         * @access public         */        function start()        {            $this->startService();            $this->startSession();        } // end of the "start()" function        /**         * Call to determine just if a query is valid or not.         *         * @param string SQL statement to validate         *         * @return string Validator string from Mimer         *         * @see _validate         */        function isValid($sql)        {            $res = $this->_validate($sql);            return $res->standard;        } // end of the "isValid()" function        /**         * Call for complete validator response         *         * @param string SQL statement to validate         *         * @return string Validator string from Mimer         *         * @see _validate         */        function validationString($sql)        {            $res = $this->_validate($sql);            return $res->data;        } // end of the "validationString()" function    } // end class PMA_SQLValidator    //add an extra check to ensure that the class was defined without errors    if (!class_exists('PMA_SQLValidator')) {        $GLOBALS['sqlvalidator_error'] = true;    }} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Javascript escaping functions. * * @package PhpMyAdmin * *//** * Format a string so it can be a string inside JavaScript code inside an * eventhandler (onclick, onchange, on..., ). * This function is used to displays a javascript confirmation box for * "DROP/DELETE/ALTER" queries. * * @param string   $a_string          the string to format * @param boolean  $add_backquotes    whether to add backquotes to the string or not * * @return  string   the formatted string * * @access  public */function PMA_jsFormat($a_string = '', $add_backquotes = true){    if (is_string($a_string)) {        $a_string = htmlspecialchars($a_string);        $a_string = PMA_escapeJsString($a_string);        // Needed for inline javascript to prevent some browsers        // treating it as a anchor        $a_string = str_replace('#', '\\#', $a_string);    }    return (($add_backquotes) ? PMA_backquote($a_string) : $a_string);} // end of the 'PMA_jsFormat()' function/** * escapes a string to be inserted as string a JavaScript block * enclosed by <![CDATA[ ... ]]> * this requires only to escape ' with \' and end of script block * * We also remove NUL byte as some browsers (namely MSIE) ignore it and * inserting it anywhere inside </script would allow to bypass this check. * * @param string  $string the string to be escaped * @return  string  the escaped string */function PMA_escapeJsString($string){    return preg_replace('@</script@i', '</\' + \'script',                        strtr($string, array(                                "\000" => '',                                '\\' => '\\\\',                                '\'' => '\\\'',                                '"' => '\"',                                "\n" => '\n',                                "\r" => '\r')));}/** * Formats a value for javascript code. * * @param string $value String to be formatted. * * @retrun string formatted value. */function PMA_formatJsVal($value){    if (is_bool($value)) {        if ($value) {            return 'true';        } else {            return 'false';        }    } elseif (is_int($value)) {        return (int)$value;    } else {        return '"' . PMA_escapeJsString($value) . '"';    }}/** * Formats an javascript assignment with proper escaping of a value * and support for assigning array of strings. * * @param string $key    Name of value to set * @param mixed  $value  Value to set, can be either string or array of strings * @param bool   $escape Whether to escape value or keep it as it is (for inclusion of js code) * * @return string Javascript code. */function PMA_getJsValue($key, $value, $escape = true){    $result = $key . ' = ';    if (!$escape) {        $result .= $value;    } elseif (is_array($value)) {        $result .= '[';        foreach ($value as $id => $val) {            $result .= PMA_formatJsVal($val) . ",";        }        $result .= "];\n";    } else {        $result .= PMA_formatJsVal($value) . ";\n";    }    return $result;}/** * Prints an javascript assignment with proper escaping of a value * and support for assigning array of strings. * * @param string $key Name of value to set * @param mixed $value Value to set, can be either string or array of strings * * @return nothing */function PMA_printJsValue($key, $value){    echo PMA_getJsValue($key, $value);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This function is used to retreive some language strings that are used * in functionalities that are common to routines, triggers and events. * * @param   string  $index   The index of the string to get * * @return  string  The requested string or an empty string, if not available */function PMA_RTE_getWord($index){    global $_PMA_RTE;    switch ($_PMA_RTE) {    case 'RTN':        $words = array(            'add'       => __('Add routine'),            'docu'      => 'STORED_ROUTINES',            'export'    => __('Export of routine %s'),            'human'     => __('routine'),            'no_create' => __('You do not have the necessary privileges to create a routine'),            'not_found' => __('No routine with name %1$s found in database %2$s'),            'nothing'   => __('There are no routines to display.'),            'title'     => __('Routines'),        );        break;    case 'TRI':        $words = array(            'add'       => __('Add trigger'),            'docu'      => 'TRIGGERS',            'export'    => __('Export of trigger %s'),            'human'     => __('trigger'),            'no_create' => __('You do not have the necessary privileges to create a trigger'),            'not_found' => __('No trigger with name %1$s found in database %2$s'),            'nothing'   => __('There are no triggers to display.'),            'title'     => __('Triggers'),        );        break;    case 'EVN':        $words = array(            'add'       => __('Add event'),            'docu'      => 'EVENTS',            'export'    => __('Export of event %s'),            'human'     => __('event'),            'no_create' => __('You do not have the necessary privileges to create an event'),            'not_found' => __('No event with name %1$s found in database %2$s'),            'nothing'   => __('There are no events to display.'),            'title'     => __('Events'),        );        break;    default:        $words = array();        break;    }    return isset($words[$index]) ? $words[$index] : '';} // end PMA_RTE_getWord()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Ensure the database and the table exist (else move to the "parent" script) * and display headers * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}if (empty($is_db)) {    if (strlen($db)) {        $is_db = @PMA_DBI_select_db($db);    } else {        $is_db = false;    }    if (! $is_db) {        // not a valid db name -> back to the welcome page        if (! defined('IS_TRANSFORMATION_WRAPPER')) {            $url_params = array('reload' => 1);            if (isset($message)) {                $url_params['message'] = $message;            }            if (! empty($sql_query)) {                $url_params['sql_query'] = $sql_query;            }            if (isset($show_as_php)) {                $url_params['show_as_php'] = $show_as_php;            }            PMA_sendHeaderLocation(                $cfg['PmaAbsoluteUri'] . 'main.php'                    . PMA_generate_common_url($url_params, '&'));        }        exit;    }} // end if (ensures db exists)if (empty($is_table) && !defined('PMA_SUBMIT_MULT') && ! defined('TABLE_MAY_BE_ABSENT')) {    // Not a valid table name -> back to the db_sql.php    if (strlen($table)) {        $is_table = isset(PMA_Table::$cache[$db][$table]);        if (! $is_table) {            $_result = PMA_DBI_try_query(                'SHOW TABLES LIKE \'' . PMA_sqlAddSlashes($table, true) . '\';',                null, PMA_DBI_QUERY_STORE);            $is_table = @PMA_DBI_num_rows($_result);            PMA_DBI_free_result($_result);        }    } else {        $is_table = false;    }    if (! $is_table) {        if (! defined('IS_TRANSFORMATION_WRAPPER')) {            if (strlen($table)) {                // SHOW TABLES doesn't show temporary tables, so try select                // (as it can happen just in case temporary table, it should be                // fast):                /**                 * @todo should this check really only happen if IS_TRANSFORMATION_WRAPPER?                 */                $_result = PMA_DBI_try_query(                    'SELECT COUNT(*) FROM ' . PMA_backquote($table) . ';',                    null, PMA_DBI_QUERY_STORE);                $is_table = ($_result && @PMA_DBI_num_rows($_result));                PMA_DBI_free_result($_result);            }            if (! $is_table) {                include './db_sql.php';                exit;            }        }        if (! $is_table) {            exit;        }    }} // end if (ensures table exists)?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * User preferences page * * @package PhpMyAdmin *//** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';require_once './libraries/user_preferences.lib.php';require_once './libraries/config/config_functions.lib.php';require_once './libraries/config/messages.inc.php';require_once './libraries/config/ConfigFile.class.php';require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require './libraries/config/user_preferences.forms.php';PMA_userprefs_pageinit();// handle form processing$form_param = filter_input(INPUT_GET, 'form');if (! isset($forms[$form_param])) {    $forms_keys = array_keys($forms);    $form_param = array_shift($forms_keys);}$form_display = new FormDisplay();foreach ($forms[$form_param] as $form_name => $form) {    // skip Developer form if no setting is available    if ($form_name == 'Developer' && !$GLOBALS['cfg']['UserprefsDeveloperTab']) {        continue;    }    $form_display->registerForm($form_name, $form, 1);}if (isset($_POST['revert'])) {    // revert erroneous fields to their default values    $form_display->fixErrors();    // redirect    $url_params = array('form' => $form_param);    PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . 'prefs_forms.php'            . PMA_generate_common_url($url_params, '&'));    exit;}$error = null;if ($form_display->process(false) && !$form_display->hasErrors()) {    // save settings    $old_settings = PMA_load_userprefs();    $result = PMA_save_userprefs(ConfigFile::getInstance()->getConfigArray());    if ($result === true) {        // reload config        $GLOBALS['PMA_Config']->loadUserPreferences();        $hash = ltrim(filter_input(INPUT_POST, 'tab_hash'), '#');        PMA_userprefs_redirect($forms, $old_settings, 'prefs_forms.php', array(            'form' => $form_param), $hash);        exit;    } else {        $error = $result;    }}// display forms$GLOBALS['js_include'][] = 'config.js';require './libraries/header.inc.php';require './libraries/user_preferences.inc.php';if ($error) {    $error->display();}if ($form_display->hasErrors()) {    // form has errors    ?>    <div class="error config-form">        <b><?php echo __('Cannot save settings, submitted form contains errors') ?></b>        <?php $form_display->displayErrors(); ?>    </div>    <?php}$form_display->display(true, true);/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {    die(__("GLOBALS overwrite attempt"));}/** * Sends http headers */$GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';/* Prevent against ClickJacking by allowing frames only from same origin */if (!$GLOBALS['cfg']['AllowThirdPartyFraming']) {    header('X-Frame-Options: SAMEORIGIN');    header('X-Content-Security-Policy: allow \'self\'; options inline-script eval-script; frame-ancestors \'self\'; img-src \'self\' data:; script-src \'self\' www.phpmyadmin.net');}PMA_no_cache_header();if (!defined('IS_TRANSFORMATION_WRAPPER')) {    // Define the charset to be used    header('Content-Type: text/html; charset=utf-8');}?>
<?php  function loadData($type, $data) {    if (!$data) return $data;    $tmp = unpack($type, $data);    return current($tmp);  }  function swap($binValue) {    $result = $binValue{strlen($binValue) - 1};    for($i = strlen($binValue) - 2; $i >= 0 ; $i--) {      $result .= $binValue{$i};    }    return $result;  }  function packDouble($value, $mode = 'LE') {    $value = (double)$value;    $bin = pack("d", $value);    //We test if the conversion of an integer (1) is done as LE or BE by default    switch (pack ('L', 1)) {      case pack ('V', 1): //Little Endian        $result = ($mode == 'LE') ? $bin : swap($bin);      break;      case pack ('N', 1): //Big Endian        $result = ($mode == 'BE') ? $bin : swap($bin);      break;      default: //Some other thing, we just return false        $result = FALSE;    }    return $result;  }  class ShapeFile {    var $FileName;    var $SHPFile;    var $SHXFile;    var $DBFFile;    var $DBFHeader;    var $lastError = "";    var $boundingBox = array("xmin" => 0.0, "ymin" => 0.0, "xmax" => 0.0, "ymax" => 0.0);    var $fileLength = 0;    var $shapeType = 0;    var $records;    function ShapeFile($shapeType, $boundingBox = array("xmin" => 0.0, "ymin" => 0.0, "xmax" => 0.0, "ymax" => 0.0), $FileName = NULL) {      $this->shapeType = $shapeType;      $this->boundingBox = $boundingBox;      $this->FileName = $FileName;      $this->fileLength = 50;    }    function loadFromFile($FileName) {      $this->FileName = $FileName;      if (($this->_openSHPFile()) && ($this->_openDBFFile())) {        $this->_loadHeaders();        $this->_loadRecords();        $this->_closeSHPFile();        $this->_closeDBFFile();      } else {        return false;      }    }    function saveToFile($FileName = NULL) {      if ($FileName != NULL) $this->FileName = $FileName;      if (($this->_openSHPFile(TRUE)) && ($this->_openSHXFile(TRUE)) && ($this->_openDBFFile(TRUE))) {        $this->_saveHeaders();        $this->_saveRecords();        $this->_closeSHPFile();        $this->_closeSHXFile();        $this->_closeDBFFile();      } else {        return false;      }    }    function addRecord($record) {      if ((isset($this->DBFHeader)) && (is_array($this->DBFHeader))) {        $record->updateDBFInfo($this->DBFHeader);      }      $this->fileLength += ($record->getContentLength() + 4);      $this->records[] = $record;      $this->records[count($this->records) - 1]->recordNumber = count($this->records);      return (count($this->records) - 1);    }    function deleteRecord($index) {      if (isset($this->records[$index])) {        $this->fileLength -= ($this->records[$index]->getContentLength() + 4);        for ($i = $index; $i < (count($this->records) - 1); $i++) {          $this->records[$i] = $this->records[$i + 1];        }        unset($this->records[count($this->records) - 1]);        $this->_deleteRecordFromDBF($index);      }    }    function getDBFHeader() {      return $this->DBFHeader;    }    function setDBFHeader($header) {      $this->DBFHeader = $header;      for ($i = 0; $i < count($this->records); $i++) {        $this->records[$i]->updateDBFInfo($header);      }    }    function getIndexFromDBFData($field, $value) {      $result = -1;      for ($i = 0; $i < (count($this->records) - 1); $i++) {        if (isset($this->records[$i]->DBFData[$field]) && (strtoupper($this->records[$i]->DBFData[$field]) == strtoupper($value))) {          $result = $i;        }      }      return $result;    }    function _loadDBFHeader() {      $DBFFile = fopen(str_replace('.*', '.dbf', $this->FileName), 'r');      $result = array();      $buff32 = array();      $i = 1;      $inHeader = true;      while ($inHeader) {        if (!feof($DBFFile)) {          $buff32 = fread($DBFFile, 32);          if ($i > 1) {            if (substr($buff32, 0, 1) == chr(13)) {              $inHeader = false;            } else {              $pos = strpos(substr($buff32, 0, 10), chr(0));              $pos = ($pos == 0 ? 10 : $pos);              $fieldName = substr($buff32, 0, $pos);              $fieldType = substr($buff32, 11, 1);              $fieldLen = ord(substr($buff32, 16, 1));              $fieldDec = ord(substr($buff32, 17, 1));              array_push($result, array($fieldName, $fieldType, $fieldLen, $fieldDec));            }          }          $i++;        } else {          $inHeader = false;        }      }      fclose($DBFFile);      return($result);    }    function _deleteRecordFromDBF($index) {      if (@dbase_delete_record($this->DBFFile, $index)) {        @dbase_pack($this->DBFFile);      }    }    function _loadHeaders() {      fseek($this->SHPFile, 24, SEEK_SET);      $this->fileLength = loadData("N", fread($this->SHPFile, 4));      fseek($this->SHPFile, 32, SEEK_SET);      $this->shapeType = loadData("V", fread($this->SHPFile, 4));      $this->boundingBox = array();      $this->boundingBox["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->DBFHeader = $this->_loadDBFHeader();    }    function _saveHeaders() {      fwrite($this->SHPFile, pack("NNNNNN", 9994, 0, 0, 0, 0, 0));      fwrite($this->SHPFile, pack("N", $this->fileLength));      fwrite($this->SHPFile, pack("V", 1000));      fwrite($this->SHPFile, pack("V", $this->shapeType));      fwrite($this->SHPFile, packDouble($this->boundingBox['xmin']));      fwrite($this->SHPFile, packDouble($this->boundingBox['ymin']));      fwrite($this->SHPFile, packDouble($this->boundingBox['xmax']));      fwrite($this->SHPFile, packDouble($this->boundingBox['ymax']));      fwrite($this->SHPFile, pack("dddd", 0, 0, 0, 0));      fwrite($this->SHXFile, pack("NNNNNN", 9994, 0, 0, 0, 0, 0));      fwrite($this->SHXFile, pack("N", 50 + 4*count($this->records)));      fwrite($this->SHXFile, pack("V", 1000));      fwrite($this->SHXFile, pack("V", $this->shapeType));      fwrite($this->SHXFile, packDouble($this->boundingBox['xmin']));      fwrite($this->SHXFile, packDouble($this->boundingBox['ymin']));      fwrite($this->SHXFile, packDouble($this->boundingBox['xmax']));      fwrite($this->SHXFile, packDouble($this->boundingBox['ymax']));      fwrite($this->SHXFile, pack("dddd", 0, 0, 0, 0));    }    function _loadRecords() {      fseek($this->SHPFile, 100);      while (!feof($this->SHPFile)) {        $bByte = ftell($this->SHPFile);        $record = new ShapeRecord(-1);        $record->loadFromFile($this->SHPFile, $this->DBFFile);        $eByte = ftell($this->SHPFile);        if (($eByte <= $bByte) || ($record->lastError != "")) {          return false;        }        $this->records[] = $record;      }    }    function _saveRecords() {      if (file_exists(str_replace('.*', '.dbf', $this->FileName))) {        @unlink(str_replace('.*', '.dbf', $this->FileName));      }      if (!($this->DBFFile = @dbase_create(str_replace('.*', '.dbf', $this->FileName), $this->DBFHeader))) {        return $this->setError(sprintf("It wasn't possible to create the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));      }      $offset = 50;      if (is_array($this->records) && (count($this->records) > 0)) {        reset($this->records);        while (list($index, $record) = each($this->records)) {          //Save the record to the .shp file          $record->saveToFile($this->SHPFile, $this->DBFFile, $index + 1);          //Save the record to the .shx file          fwrite($this->SHXFile, pack("N", $offset));          fwrite($this->SHXFile, pack("N", $record->getContentLength()));          $offset += (4 + $record->getContentLength());        }      }      @dbase_pack($this->DBFFile);    }    function _openSHPFile($toWrite = false) {      $this->SHPFile = @fopen(str_replace('.*', '.shp', $this->FileName), ($toWrite ? "wb+" : "rb"));      if (!$this->SHPFile) {        return $this->setError(sprintf("It wasn't possible to open the Shape file '%s'", str_replace('.*', '.shp', $this->FileName)));      }      return TRUE;    }    function _closeSHPFile() {      if ($this->SHPFile) {        fclose($this->SHPFile);        $this->SHPFile = NULL;      }    }    function _openSHXFile($toWrite = false) {      $this->SHXFile = @fopen(str_replace('.*', '.shx', $this->FileName), ($toWrite ? "wb+" : "rb"));      if (!$this->SHXFile) {        return $this->setError(sprintf("It wasn't possible to open the Index file '%s'", str_replace('.*', '.shx', $this->FileName)));      }      return TRUE;    }    function _closeSHXFile() {      if ($this->SHXFile) {        fclose($this->SHXFile);        $this->SHXFile = NULL;      }    }    function _openDBFFile($toWrite = false) {      $checkFunction = $toWrite ? "is_writable" : "is_readable";      if (($toWrite) && (!file_exists(str_replace('.*', '.dbf', $this->FileName)))) {        if (!@dbase_create(str_replace('.*', '.dbf', $this->FileName), $this->DBFHeader)) {          return $this->setError(sprintf("It wasn't possible to create the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));        }      }      if ($checkFunction(str_replace('.*', '.dbf', $this->FileName))) {        $this->DBFFile = dbase_open(str_replace('.*', '.dbf', $this->FileName), ($toWrite ? 2 : 0));        if (!$this->DBFFile) {          return $this->setError(sprintf("It wasn't possible to open the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));        }      } else {        return $this->setError(sprintf("It wasn't possible to find the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));      }      return TRUE;    }    function _closeDBFFile() {      if ($this->DBFFile) {        dbase_close($this->DBFFile);        $this->DBFFile = NULL;      }    }    function setError($error) {      $this->lastError = $error;      return false;    }  }  class ShapeRecord {    var $SHPFile = NULL;    var $DBFFile = NULL;    var $recordNumber = NULL;    var $shapeType = NULL;    var $lastError = "";    var $SHPData = array();    var $DBFData = array();    function ShapeRecord($shapeType) {      $this->shapeType = $shapeType;    }    function loadFromFile(&$SHPFile, &$DBFFile) {      $this->SHPFile = $SHPFile;      $this->DBFFile = $DBFFile;      $this->_loadHeaders();      switch ($this->shapeType) {        case 0:          $this->_loadNullRecord();        break;        case 1:          $this->_loadPointRecord();        break;        case 3:          $this->_loadPolyLineRecord();        break;        case 5:          $this->_loadPolygonRecord();        break;        case 8:          $this->_loadMultiPointRecord();        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      $this->_loadDBFData();    }    function saveToFile(&$SHPFile, &$DBFFile, $recordNumber) {      $this->SHPFile = $SHPFile;      $this->DBFFile = $DBFFile;      $this->recordNumber = $recordNumber;      $this->_saveHeaders();      switch ($this->shapeType) {        case 0:          $this->_saveNullRecord();        break;        case 1:          $this->_savePointRecord();        break;        case 3:          $this->_savePolyLineRecord();        break;        case 5:          $this->_savePolygonRecord();        break;        case 8:          $this->_saveMultiPointRecord();        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      $this->_saveDBFData();    }    function updateDBFInfo($header) {      $tmp = $this->DBFData;      unset($this->DBFData);      $this->DBFData = array();      reset($header);      while (list($key, $value) = each($header)) {        $this->DBFData[$value[0]] = (isset($tmp[$value[0]])) ? $tmp[$value[0]] : "";      }    }    function _loadHeaders() {      $this->recordNumber = loadData("N", fread($this->SHPFile, 4));      $tmp = loadData("N", fread($this->SHPFile, 4)); //We read the length of the record      $this->shapeType = loadData("V", fread($this->SHPFile, 4));    }    function _saveHeaders() {      fwrite($this->SHPFile, pack("N", $this->recordNumber));      fwrite($this->SHPFile, pack("N", $this->getContentLength()));      fwrite($this->SHPFile, pack("V", $this->shapeType));    }    function _loadPoint() {      $data = array();      $data["x"] = loadData("d", fread($this->SHPFile, 8));      $data["y"] = loadData("d", fread($this->SHPFile, 8));      return $data;    }    function _savePoint($data) {      fwrite($this->SHPFile, packDouble($data["x"]));      fwrite($this->SHPFile, packDouble($data["y"]));    }    function _loadNullRecord() {      $this->SHPData = array();    }    function _saveNullRecord() {      //Don't save anything    }    function _loadPointRecord() {      $this->SHPData = $this->_loadPoint();    }    function _savePointRecord() {      $this->_savePoint($this->SHPData);    }    function _loadMultiPointRecord() {      $this->SHPData = array();      $this->SHPData["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["numpoints"] = loadData("V", fread($this->SHPFile, 4));      for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {        $this->SHPData["points"][] = $this->_loadPoint();      }    }    function _saveMultiPointRecord() {      fwrite($this->SHPFile, pack("dddd", $this->SHPData["xmin"], $this->SHPData["ymin"], $this->SHPData["xmax"], $this->SHPData["ymax"]));      fwrite($this->SHPFile, pack("V", $this->SHPData["numpoints"]));      for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {        $this->_savePoint($this->SHPData["points"][$i]);      }    }    function _loadPolyLineRecord() {      $this->SHPData = array();      $this->SHPData["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["numparts"]  = loadData("V", fread($this->SHPFile, 4));      $this->SHPData["numpoints"] = loadData("V", fread($this->SHPFile, 4));      for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {        $this->SHPData["parts"][$i] = loadData("V", fread($this->SHPFile, 4));      }      $firstIndex = ftell($this->SHPFile);      $readPoints = 0;      reset($this->SHPData["parts"]);      while (list($partIndex, $partData) = each($this->SHPData["parts"])) {        if (!isset($this->SHPData["parts"][$partIndex]["points"]) || !is_array($this->SHPData["parts"][$partIndex]["points"])) {          $this->SHPData["parts"][$partIndex] = array();          $this->SHPData["parts"][$partIndex]["points"] = array();        }        while (!in_array($readPoints, $this->SHPData["parts"]) && ($readPoints < ($this->SHPData["numpoints"])) && !feof($this->SHPFile)) {          $this->SHPData["parts"][$partIndex]["points"][] = $this->_loadPoint();          $readPoints++;        }      }      fseek($this->SHPFile, $firstIndex + ($readPoints*16));    }    function _savePolyLineRecord() {      fwrite($this->SHPFile, pack("dddd", $this->SHPData["xmin"], $this->SHPData["ymin"], $this->SHPData["xmax"], $this->SHPData["ymax"]));      fwrite($this->SHPFile, pack("VV", $this->SHPData["numparts"], $this->SHPData["numpoints"]));      for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {        fwrite($this->SHPFile, pack("V", count($this->SHPData["parts"][$i])));      }      reset($this->SHPData["parts"]);      foreach ($this->SHPData["parts"] as $partData){        reset($partData["points"]);        while (list($pointIndex, $pointData) = each($partData["points"])) {          $this->_savePoint($pointData);        }      }    }    function _loadPolygonRecord() {      $this->_loadPolyLineRecord();    }    function _savePolygonRecord() {      $this->_savePolyLineRecord();    }    function addPoint($point, $partIndex = 0) {      switch ($this->shapeType) {        case 0:          //Don't add anything        break;        case 1:          //Substitutes the value of the current point          $this->SHPData = $point;        break;        case 3:        case 5:          //Adds a new point to the selected part          if (!isset($this->SHPData["xmin"]) || ($this->SHPData["xmin"] > $point["x"])) $this->SHPData["xmin"] = $point["x"];          if (!isset($this->SHPData["ymin"]) || ($this->SHPData["ymin"] > $point["y"])) $this->SHPData["ymin"] = $point["y"];          if (!isset($this->SHPData["xmax"]) || ($this->SHPData["xmax"] < $point["x"])) $this->SHPData["xmax"] = $point["x"];          if (!isset($this->SHPData["ymax"]) || ($this->SHPData["ymax"] < $point["y"])) $this->SHPData["ymax"] = $point["y"];          $this->SHPData["parts"][$partIndex]["points"][] = $point;          $this->SHPData["numparts"] = count($this->SHPData["parts"]);          $this->SHPData["numpoints"]++;        break;        case 8:          //Adds a new point          if (!isset($this->SHPData["xmin"]) || ($this->SHPData["xmin"] > $point["x"])) $this->SHPData["xmin"] = $point["x"];          if (!isset($this->SHPData["ymin"]) || ($this->SHPData["ymin"] > $point["y"])) $this->SHPData["ymin"] = $point["y"];          if (!isset($this->SHPData["xmax"]) || ($this->SHPData["xmax"] < $point["x"])) $this->SHPData["xmax"] = $point["x"];          if (!isset($this->SHPData["ymax"]) || ($this->SHPData["ymax"] < $point["y"])) $this->SHPData["ymax"] = $point["y"];          $this->SHPData["points"][] = $point;          $this->SHPData["numpoints"]++;        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }    }    function deletePoint($pointIndex = 0, $partIndex = 0) {      switch ($this->shapeType) {        case 0:          //Don't delete anything        break;        case 1:          //Sets the value of the point to zero          $this->SHPData["x"] = 0.0;          $this->SHPData["y"] = 0.0;        break;        case 3:        case 5:          //Deletes the point from the selected part, if exists          if (isset($this->SHPData["parts"][$partIndex]) && isset($this->SHPData["parts"][$partIndex]["points"][$pointIndex])) {            for ($i = $pointIndex; $i < (count($this->SHPData["parts"][$partIndex]["points"]) - 1); $i++) {              $this->SHPData["parts"][$partIndex]["points"][$i] = $this->SHPData["parts"][$partIndex]["points"][$i + 1];            }            unset($this->SHPData["parts"][$partIndex]["points"][count($this->SHPData["parts"][$partIndex]["points"]) - 1]);            $this->SHPData["numparts"] = count($this->SHPData["parts"]);            $this->SHPData["numpoints"]--;          }        break;        case 8:          //Deletes the point, if exists          if (isset($this->SHPData["points"][$pointIndex])) {            for ($i = $pointIndex; $i < (count($this->SHPData["points"]) - 1); $i++) {              $this->SHPData["points"][$i] = $this->SHPData["points"][$i + 1];            }            unset($this->SHPData["points"][count($this->SHPData["points"]) - 1]);            $this->SHPData["numpoints"]--;          }        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }    }    function getContentLength() {      switch ($this->shapeType) {        case 0:          $result = 0;        break;        case 1:          $result = 10;        break;        case 3:        case 5:          $result = 22 + 2*count($this->SHPData["parts"]);          for ($i = 0; $i < count($this->SHPData["parts"]); $i++) {            $result += 8*count($this->SHPData["parts"][$i]["points"]);          }        break;        case 8:          $result = 20 + 8*count($this->SHPData["points"]);        break;        default:          $result = false;          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      return $result;    }    function _loadDBFData() {      $this->DBFData = @dbase_get_record_with_names($this->DBFFile, $this->recordNumber);      unset($this->DBFData["deleted"]);    }    function _saveDBFData() {      unset($this->DBFData["deleted"]);      if ($this->recordNumber <= dbase_numrecords($this->DBFFile)) {        if (!dbase_replace_record($this->DBFFile, array_values($this->DBFData), $this->recordNumber)) {          $this->setError("I wasn't possible to update the information in the DBF file.");        }      } else {        if (!dbase_add_record($this->DBFFile, array_values($this->DBFData))) {          $this->setError("I wasn't possible to add the information to the DBF file.");        }      }    }    function setError($error) {      $this->lastError = $error;      return false;    }  }?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */$GLOBALS['information_schema_relations'] = array(    'CHARACTER_SETS' => array(        'DEFAULT_COLLATE_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLLATIONS' => array(        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        )    ),    'COLLATION_CHARACTER_SET_APPLICABILITY' => array(        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        ),        'COLLATION_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLUMNS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        ),        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        ),        'COLLATION_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLUMN_PRIVILEGES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'KEY_COLUMN_USAGE' => array(        'CONSTRAINT_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'ROUTINES' => array(        'ROUTINE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'SCHEMATA' => array(        'DEFAULT_CHARACTER_SET_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        )    ),    'SCHEMA_PRIVILEGES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_COLLATION' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'TABLE_CONSTRAINTS' => array(        'CONSTRAINT_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLE_PRIVILEGES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'VIEWS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ));?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Export to Texy! text. * * @package PhpMyAdmin-Export * @subpackage Texy */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['texytext'] = array(        'text' => __('Texy! text'),        'extension' => 'txt',        'mime_type' => 'text/plain',        'options' => array(        /* what to dump (structure/data/both) */        array('type' => 'begin_group', 'text' => __('Dump table'), 'name' => 'general_opts'),        array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data'))),        array('type' => 'end_group'),        array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure'),        array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL by')),        array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),        array('type' => 'end_group'),        ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return PMA_exportOutputHandler('===' . __('Database') . ' ' . $db . "\n\n");    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in Texy format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $what;        if (! PMA_exportOutputHandler('== ' . __('Dumping data for table') . ' ' . $table . "\n\n")) {            return false;        }        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        // If required, get fields name at the first line        if (isset($GLOBALS[$what . '_columns'])) {            $text_output = "|------\n";            for ($i = 0; $i < $fields_cnt; $i++) {                $text_output .= '|' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i)));            } // end for            $text_output .= "\n|------\n";            if (! PMA_exportOutputHandler($text_output)) {                return false;            }        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $text_output = '';            for ($j = 0; $j < $fields_cnt; $j++) {                if (! isset($row[$j]) || is_null($row[$j])) {                    $value = $GLOBALS[$what . '_null'];                } elseif ($row[$j] == '0' || $row[$j] != '') {                    $value = $row[$j];                } else {                    $value = ' ';                }                $text_output .= '|' . htmlspecialchars($value);            } // end for            $text_output .= "\n";            if (! PMA_exportOutputHandler($text_output)) {                return false;            }        } // end while        PMA_DBI_free_result($result);        return true;    }    /**     * Outputs table's structure     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         the end of line sequence     * @param string  $error_url    the url to go back in case of error     * @param bool    $do_relation  whether to include relation comments     * @param bool    $do_comments  whether to include the pmadb-style column comments     *                                as comments in the structure; this is deprecated     *                                but the parameter is left here because export.php     *                                calls PMA_exportStructure() also for other export     *                                types which use this parameter     * @param bool    $do_mime      whether to include mime comments     * @param bool    $dates        whether to include creation/update/check dates     * @param string  $export_mode  'create_table', 'triggers', 'create_view', 'stand_in'     * @param string  $export_type  'server', 'database', 'table'     * @return  bool      Whether it succeeded     *     * @access  public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        if (! PMA_exportOutputHandler('== ' . __('Table structure for table') . ' ' .$table . "\n\n")) {            return false;        }        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $columns_cnt = 4;        if ($do_relation && $have_rel) {            $columns_cnt++;        }        if ($do_comments && $cfgRelation['commwork']) {            $columns_cnt++;        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;        }        $text_output = "|------\n";        $text_output .= '|' . __('Column');        $text_output .= '|' . __('Type');        $text_output .= '|' . __('Null');        $text_output .= '|' . __('Default');        if ($do_relation && $have_rel) {            $text_output .= '|' . __('Links to');        }        if ($do_comments) {            $text_output .= '|' . __('Comments');            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $text_output .= '|' . htmlspecialchars('MIME');            $mime_map = PMA_getMIME($db, $table, true);        }        $text_output .= "\n|------\n";        if (! PMA_exportOutputHandler($text_output)) {            return false;        }        $columns = PMA_DBI_get_columns($db, $table);        foreach ($columns as $column) {            $text_output = '';            $extracted_fieldspec = PMA_extractFieldSpec($column['Type']);            $type = $extracted_fieldspec['print_type'];            if (empty($type)) {                $type     = '&nbsp;';            }            if (! isset($column['Default'])) {                if ($column['Null'] != 'NO') {                    $column['Default'] = 'NULL';                }            }            $fmt_pre = '';            $fmt_post = '';            if (in_array($column['Field'], $unique_keys)) {                $fmt_pre = '**' . $fmt_pre;                $fmt_post = $fmt_post . '**';            }            if ($column['Key']=='PRI') {                $fmt_pre = '//' . $fmt_pre;                $fmt_post = $fmt_post . '//';            }            $text_output .= '|' . $fmt_pre . htmlspecialchars($column['Field']) . $fmt_post;            $text_output .= '|' . htmlspecialchars($type);            $text_output .= '|' . (($column['Null'] == '' || $column['Null'] == 'NO') ? __('No') : __('Yes'));            $text_output .= '|' . htmlspecialchars(isset($column['Default']) ? $column['Default'] : '');            $field_name = $column['Field'];            if ($do_relation && $have_rel) {                $text_output .= '|' . (isset($res_rel[$field_name]) ? htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' (' . $res_rel[$field_name]['foreign_field'] . ')') : '');            }            if ($do_comments && $cfgRelation['commwork']) {                $text_output .= '|' . (isset($comments[$field_name]) ? htmlspecialchars($comments[$field_name]) : '');            }            if ($do_mime && $cfgRelation['mimework']) {                $text_output .= '|' . (isset($mime_map[$field_name]) ? htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype'])) : '');            }            $text_output .= "\n";            if (! PMA_exportOutputHandler($text_output)) {                return false;            }        } // end while        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_binlog extends PMA_StorageEngine{    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'binary-log';    }}?>
<?php/** * Menu items * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}$separator = PMA_get_arg_separator('html');?><ul>    <li><a href="index.php"><?php echo __('Overview') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Features"><?php echo __('Features') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Sql_queries"><?php echo __('SQL queries') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Left_frame"><?php echo __('Navigation frame') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Main_frame"><?php echo __('Main frame') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Import"><?php echo __('Import') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Export"><?php echo __('Export') ?></a></li></ul>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_image_jpeg__inline_info(){    return array(        'info' => __('Displays a clickable thumbnail. The options are the maximum width and height in pixels. The original aspect ratio is preserved.'),        );}/** * */function PMA_transformation_image_jpeg__inline($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    if (PMA_IS_GD2) {        $transform_options = array ('string' => '<a href="transformation_wrapper.php' . $options['wrapper_link'] . '" target="_blank"><img src="transformation_wrapper.php' . $options['wrapper_link'] . '&amp;resize=jpeg&amp;newWidth=' . (isset($options[0]) ? $options[0] : '100') . '&amp;newHeight=' . (isset($options[1]) ? $options[1] : 100) . '" alt="[__BUFFER__]" border="0" /></a>');    } else {        $transform_options = array ('string' => '<img src="transformation_wrapper.php' . $options['wrapper_link'] . '" alt="[__BUFFER__]" width="320" height="240" />');    }    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * phpinfo() wrapper to allow displaying only when configured to do so. * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require_once './libraries/common.inc.php';/** * Displays PHP information */if ($GLOBALS['cfg']['ShowPhpInfo']) {    phpinfo();}?>
<?php/** * Used to create server variables documentation links * $VARIABLE_DOC_LINKS[string $name] = array( *    string $anchor, *    string $chapter, *    string $type); * string $name: name of the system variable * string $anchor: anchor to the documentation page * string $chapter: chapter of "HTML, one page per chapter" documentation * string $type: type of system variable * string $format: if set to 'byte' it will format the variable * with PMA_formatByteDown() */$VARIABLE_DOC_LINKS = array();$VARIABLE_DOC_LINKS['auto_increment_increment'] = array(    'auto_increment_increment',    'replication-options-master',    'sysvar');$VARIABLE_DOC_LINKS['auto_increment_offset'] = array(    'auto_increment_offset',    'replication-options-master',    'sysvar');$VARIABLE_DOC_LINKS['autocommit'] = array(    'autocommit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['automatic_sp_privileges'] = array(    'automatic_sp_privileges',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['back_log'] = array(    'back_log',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['basedir'] = array(    'basedir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['big_tables'] = array(    'big-tables',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['bind_address'] = array(    'bind-address',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['binlog_cache_size'] = array(    'binlog_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['binlog_direct_non_transactional_updates'] = array(    'binlog_direct_non_transactional_updates',    'replication-options-binary-log',    'sysvar');$VARIABLE_DOC_LINKS['binlog_format'] = array(    'binlog-format',    'server-options',    'sysvar');$VARIABLE_DOC_LINKS['binlog_stmt_cache_size'] = array(    'binlog_stmt_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['bulk_insert_buffer_size'] = array(    'bulk_insert_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['character_set_client'] = array(    'character_set_client',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_connection'] = array(    'character_set_connection',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_database'] = array(    'character_set_database',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_filesystem'] = array(    'character-set-filesystem',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['character_set_results'] = array(    'character_set_results',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_server'] = array(    'character-set-server',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['character_set_system'] = array(    'character_set_system',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_sets_dir'] = array(    'character-sets-dir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['collation_connection'] = array(    'collation_connection',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['collation_database'] = array(    'collation_database',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['collation_server'] = array(    'collation-server',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['completion_type'] = array(    'completion_type',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['concurrent_insert'] = array(    'concurrent_insert',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['connect_timeout'] = array(    'connect_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['datadir'] = array(    'datadir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['date_format'] = array(    'date_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['datetime_format'] = array(    'datetime_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['debug'] = array(    'debug',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['debug_sync'] = array(    'debug_sync',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['default_storage_engine'] = array(    'default-storage-engine',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['default_week_format'] = array(    'default_week_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['delay_key_write'] = array(    'delay-key-write',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['delayed_insert_limit'] = array(    'delayed_insert_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['delayed_insert_timeout'] = array(    'delayed_insert_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['delayed_queue_size'] = array(    'delayed_queue_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['div_precision_increment'] = array(    'div_precision_increment',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['engine_condition_pushdown'] = array(    'engine-condition-pushdown',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['error_count'] = array(    'error_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['event_scheduler'] = array(    'event-scheduler',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['expire_logs_days'] = array(    'expire_logs_days',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['external_user'] = array(    'external_user',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['flush'] = array(    'flush',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['flush_time'] = array(    'flush_time',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['foreign_key_checks'] = array(    'foreign_key_checks',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_boolean_syntax'] = array(    'ft_boolean_syntax',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_max_word_len'] = array(    'ft_max_word_len',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_min_word_len'] = array(    'ft_min_word_len',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_query_expansion_limit'] = array(    'ft_query_expansion_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_stopword_file'] = array(    'ft_stopword_file',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['general_log'] = array(    'general-log',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['general_log_file'] = array(    'general_log_file',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['group_concat_max_len'] = array(    'group_concat_max_len',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_compress'] = array(    'have_compress',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_crypt'] = array(    'have_crypt',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_csv'] = array(    'have_csv',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_dynamic_loading'] = array(    'have_dynamic_loading',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_geometry'] = array(    'have_geometry',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_innodb'] = array(    'have_innodb',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_openssl'] = array(    'have_openssl',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_partitioning'] = array(    'have_partitioning',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_profiling'] = array(    'have_profiling',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_query_cache'] = array(    'have_query_cache',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_rtree_keys'] = array(    'have_rtree_keys',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_ssl'] = array(    'have_ssl',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_symlink'] = array(    'have_symlink',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['hostname'] = array(    'hostname',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['identity'] = array(    'identity',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ignore_builtin_innodb'] = array(    'ignore-builtin-innodb',    'innodb-parameters',    'option_mysqld');$VARIABLE_DOC_LINKS['init_connect'] = array(    'init_connect',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['init_file'] = array(    'init-file',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['init_slave'] = array(    'init_slave',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['innodb_adaptive_flushing'] = array(    'innodb_adaptive_flushing',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_adaptive_hash_index'] = array(    'innodb_adaptive_hash_index',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_additional_mem_pool_size'] = array(    'innodb_additional_mem_pool_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_autoextend_increment'] = array(    'innodb_autoextend_increment',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_autoinc_lock_mode'] = array(    'innodb_autoinc_lock_mode',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_buffer_pool_instances'] = array(    'innodb_buffer_pool_instances',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_buffer_pool_size'] = array(    'innodb_buffer_pool_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_change_buffering'] = array(    'innodb_change_buffering',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_checksums'] = array(    'innodb_checksums',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_commit_concurrency'] = array(    'innodb_commit_concurrency',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_concurrency_tickets'] = array(    'innodb_concurrency_tickets',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_data_file_path'] = array(    'innodb_data_file_path',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_data_home_dir'] = array(    'innodb_data_home_dir',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_doublewrite'] = array(    'innodb_doublewrite',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_fast_shutdown'] = array(    'innodb_fast_shutdown',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_format'] = array(    'innodb_file_format',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_format_check'] = array(    'innodb_file_format_check',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_format_max'] = array(    'innodb_file_format_max',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_per_table'] = array(    'innodb_file_per_table',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_flush_log_at_trx_commit'] = array(    'innodb_flush_log_at_trx_commit',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_flush_method'] = array(    'innodb_flush_method',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_force_recovery'] = array(    'innodb_force_recovery',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_io_capacity'] = array(    'innodb_io_capacity',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_lock_wait_timeout'] = array(    'innodb_lock_wait_timeout',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_locks_unsafe_for_binlog'] = array(    'innodb_locks_unsafe_for_binlog',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_log_buffer_size'] = array(    'innodb_log_buffer_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_log_file_size'] = array(    'innodb_log_file_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_log_files_in_group'] = array(    'innodb_log_files_in_group',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_log_group_home_dir'] = array(    'innodb_log_group_home_dir',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_max_dirty_pages_pct'] = array(    'innodb_max_dirty_pages_pct',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_max_purge_lag'] = array(    'innodb_max_purge_lag',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_mirrored_log_groups'] = array(    'innodb_mirrored_log_groups',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_old_blocks_pct'] = array(    'innodb_old_blocks_pct',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_old_blocks_time'] = array(    'innodb_old_blocks_time',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_open_files'] = array(    'innodb_open_files',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_purge_batch_size'] = array(    'innodb_purge_batch_size',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_purge_threads'] = array(    'innodb_purge_threads',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_read_ahead_threshold'] = array(    'innodb_read_ahead_threshold',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_read_io_threads'] = array(    'innodb_read_io_threads',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_replication_delay'] = array(    'innodb_replication_delay',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_rollback_on_timeout'] = array(    'innodb_rollback_on_timeout',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_spin_wait_delay'] = array(    'innodb_spin_wait_delay',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_stats_on_metadata'] = array(    'innodb_stats_on_metadata',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_stats_sample_pages'] = array(    'innodb_stats_sample_pages',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_strict_mode'] = array(    'innodb_strict_mode',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_support_xa'] = array(    'innodb_support_xa',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_sync_spin_loops'] = array(    'innodb_sync_spin_loops',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_table_locks'] = array(    'innodb_table_locks',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_thread_concurrency'] = array(    'innodb_thread_concurrency',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_thread_sleep_delay'] = array(    'innodb_thread_sleep_delay',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_use_native_aio'] = array(    'innodb_use_native_aio',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_use_sys_malloc'] = array(    'innodb_use_sys_malloc',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_version'] = array(    'innodb_version',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_write_io_threads'] = array(    'innodb_write_io_threads',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['insert_id'] = array(    'insert_id',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['interactive_timeout'] = array(    'interactive_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['join_buffer_size'] = array(    'join_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['keep_files_on_create'] = array(    'keep_files_on_create',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['key_buffer_size'] = array(    'key_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['key_cache_age_threshold'] = array(    'key_cache_age_threshold',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['key_cache_block_size'] = array(    'key_cache_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['key_cache_division_limit'] = array(    'key_cache_division_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['language'] = array(    'language',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['large_files_support'] = array(    'large_files_support',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['large_page_size'] = array(    'large_page_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['large_pages'] = array(    'large-pages',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['last_insert_id'] = array(    'last_insert_id',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['lc_messages'] = array(    'lc-messages',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['lc_messages_dir'] = array(    'lc-messages-dir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['lc_time_names'] = array(    'lc_time_names',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['license'] = array(    'license',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['local_infile'] = array(    'local_infile',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['lock_wait_timeout'] = array(    'lock_wait_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['locked_in_memory'] = array(    'locked_in_memory',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['log'] = array(    'log',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_bin'] = array(    'log_bin',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['log-bin'] = array(    'log-bin',    'replication-options-binary-log',    'option_mysqld');$VARIABLE_DOC_LINKS['log_bin_trust_function_creators'] = array(    'log-bin-trust-function-creators',    'replication-options-binary-log',    'option_mysqld');$VARIABLE_DOC_LINKS['log_error'] = array(    'log-error',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_output'] = array(    'log-output',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_queries_not_using_indexes'] = array(    'log-queries-not-using-indexes',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_slave_updates'] = array(    'log-slave-updates',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['log_slow_queries'] = array(    'log-slow-queries',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_warnings'] = array(    'log-warnings',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['long_query_time'] = array(    'long_query_time',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['low_priority_updates'] = array(    'low-priority-updates',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['lower_case_file_system'] = array(    'lower_case_file_system',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['lower_case_table_names'] = array(    'lower_case_table_names',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['master-bind'] = array(    '',    'replication-options',    0);$VARIABLE_DOC_LINKS['max_allowed_packet'] = array(    'max_allowed_packet',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_binlog_cache_size'] = array(    'max_binlog_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_binlog_size'] = array(    'max_binlog_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_binlog_stmt_cache_size'] = array(    'max_binlog_stmt_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_connect_errors'] = array(    'max_connect_errors',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_connections'] = array(    'max_connections',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_delayed_threads'] = array(    'max_delayed_threads',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_error_count'] = array(    'max_error_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_heap_table_size'] = array(    'max_heap_table_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_insert_delayed_threads'] = array(    'max_insert_delayed_threads',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_join_size'] = array(    'max_join_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_length_for_sort_data'] = array(    'max_length_for_sort_data',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_prepared_stmt_count'] = array(    'max_prepared_stmt_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_relay_log_size'] = array(    'max_relay_log_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_seeks_for_key'] = array(    'max_seeks_for_key',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_sort_length'] = array(    'max_sort_length',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_sp_recursion_depth'] = array(    'max_sp_recursion_depth',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_tmp_tables'] = array(    'max_tmp_tables',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_user_connections'] = array(    'max_user_connections',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_write_lock_count'] = array(    'max_write_lock_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['memlock'] = array(    'memlock',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['min_examined_row_limit'] = array(    'min-examined-row-limit',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['myisam_data_pointer_size'] = array(    'myisam_data_pointer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_max_sort_file_size'] = array(    'myisam_max_sort_file_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_mmap_size'] = array(    'myisam_mmap_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_recover_options'] = array(    'myisam_recover_options',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['myisam_repair_threads'] = array(    'myisam_repair_threads',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['myisam_sort_buffer_size'] = array(    'myisam_sort_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_stats_method'] = array(    'myisam_stats_method',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['myisam_use_mmap'] = array(    'myisam_use_mmap',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['named_pipe'] = array(    'named_pipe',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_buffer_length'] = array(    'net_buffer_length',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_read_timeout'] = array(    'net_read_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_retry_count'] = array(    'net_retry_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_write_timeout'] = array(    'net_write_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['new'] = array(    'new',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['old'] = array(    'old',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['old_alter_table'] = array(    'old-alter-table',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['old_passwords'] = array(    'old-passwords',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['open_files_limit'] = array(    'open-files-limit',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['optimizer_prune_level'] = array(    'optimizer_prune_level',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['optimizer_search_depth'] = array(    'optimizer_search_depth',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['optimizer_switch'] = array(    'optimizer_switch',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['partition'] = array(    'partition',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['performance_schema'] = array(    'performance_schema',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_events_waits_history_long_size'] = array(    'performance_schema_events_waits_history_long_size',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_events_waits_history_size'] = array(    'performance_schema_events_waits_history_size',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_cond_classes'] = array(    'performance_schema_max_cond_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_cond_instances'] = array(    'performance_schema_max_cond_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_file_classes'] = array(    'performance_schema_max_file_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_file_handles'] = array(    'performance_schema_max_file_handles',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_file_instances'] = array(    'performance_schema_max_file_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_mutex_classes'] = array(    'performance_schema_max_mutex_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_mutex_instances'] = array(    'performance_schema_max_mutex_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_rwlock_classes'] = array(    'performance_schema_max_rwlock_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_rwlock_instances'] = array(    'performance_schema_max_rwlock_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_table_handles'] = array(    'performance_schema_max_table_handles',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_table_instances'] = array(    'performance_schema_max_table_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_thread_classes'] = array(    'performance_schema_max_thread_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_thread_instances'] = array(    'performance_schema_max_thread_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['pid_file'] = array(    'pid-file',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['plugin_dir'] = array(    'plugin_dir',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['port'] = array(    'port',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['preload_buffer_size'] = array(    'preload_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['profiling'] = array(    'profiling',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['profiling_history_size'] = array(    'profiling_history_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['protocol_version'] = array(    'protocol_version',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['proxy_user'] = array(    'proxy_user',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['pseudo_thread_id'] = array(    'pseudo_thread_id',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_alloc_block_size'] = array(    'query_alloc_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['query_cache_limit'] = array(    'query_cache_limit',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['query_cache_min_res_unit'] = array(    'query_cache_min_res_unit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_cache_size'] = array(    'query_cache_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['query_cache_type'] = array(    'query_cache_type',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_cache_wlock_invalidate'] = array(    'query_cache_wlock_invalidate',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_prealloc_size'] = array(    'query_prealloc_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['rand_seed1'] = array(    'rand_seed1',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rand_seed2'] = array(    'rand_seed2',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['range_alloc_block_size'] = array(    'range_alloc_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['read_buffer_size'] = array(    'read_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['read_only'] = array(    'read_only',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['read_rnd_buffer_size'] = array(    'read_rnd_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['relay-log-index'] = array(    'relay-log-index',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['relay_log_index'] = array(    'relay_log_index',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_info_file'] = array(    'relay_log_info_file',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_purge'] = array(    'relay_log_purge',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_recovery'] = array(    'relay_log_recovery',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_space_limit'] = array(    'relay_log_space_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['report_host'] = array(    'report-host',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['report_password'] = array(    'report-password',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['report_port'] = array(    'report-port',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['report_user'] = array(    'report-user',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['rpl_recovery_rank'] = array(    'rpl_recovery_rank',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_enabled'] = array(    'rpl_semi_sync_master_enabled',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_timeout'] = array(    'rpl_semi_sync_master_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_trace_level'] = array(    'rpl_semi_sync_master_trace_level',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_wait_no_slave'] = array(    'rpl_semi_sync_master_wait_no_slave',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_slave_enabled'] = array(    'rpl_semi_sync_slave_enabled',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_slave_trace_level'] = array(    'rpl_semi_sync_slave_trace_level',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['safe_show_database'] = array(    'safe-show-database',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['secure_auth'] = array(    'secure-auth',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['secure_file_priv'] = array(    'secure-file-priv',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['server_id'] = array(    'server-id',    'replication-options',    'option_mysqld');$VARIABLE_DOC_LINKS['shared_memory'] = array(    'shared_memory',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['shared_memory_base_name'] = array(    'shared_memory_base_name',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['skip_external_locking'] = array(    'skip-external-locking',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['skip_name_resolve'] = array(    'skip-name-resolve',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['skip_networking'] = array(    'skip-networking',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['skip_show_database'] = array(    'skip-show-database',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_compressed_protocol'] = array(    'slave_compressed_protocol',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slave_exec_mode'] = array(    'slave_exec_mode',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slave_load_tmpdir'] = array(    'slave-load-tmpdir',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_net_timeout'] = array(    'slave-net-timeout',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_skip_errors'] = array(    'slave-skip-errors',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_transaction_retries'] = array(    'slave_transaction_retries',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slave_type_conversions'] = array(    'slave_type_conversions',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slow_launch_time'] = array(    'slow_launch_time',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['slow_query_log'] = array(    'slow-query-log',    'server-options',    'server-system-variables');$VARIABLE_DOC_LINKS['slow_query_log_file'] = array(    'slow_query_log_file',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['socket'] = array(    'socket',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['sort_buffer_size'] = array(    'sort_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['sql_auto_is_null'] = array(    'sql_auto_is_null',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_big_selects'] = array(    'sql_big_selects',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_big_tables'] = array(    'big-tables',    'server-options',    'server-system-variables');$VARIABLE_DOC_LINKS['sql_buffer_result'] = array(    'sql_buffer_result',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_log_bin'] = array(    'sql_log_bin',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_log_off'] = array(    'sql_log_off',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_log_update'] = array(    'sql_log_update',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_low_priority_updates'] = array(    'sql_low_priority_updates',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_max_join_size'] = array(    'sql_max_join_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_mode'] = array(    'sql-mode',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['sql_notes'] = array(    'sql_notes',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_quote_show_create'] = array(    'sql_quote_show_create',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_safe_updates'] = array(    'sql_safe_updates',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_select_limit'] = array(    'sql_select_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_slave_skip_counter'] = array(    'sql_slave_skip_counter',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['sql_warnings'] = array(    'sql_warnings',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ssl_ca'] = array(    'ssl-ca',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_capath'] = array(    'ssl-capath',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_cert'] = array(    'ssl-cert',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_cipher'] = array(    'ssl-cipher',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_key'] = array(    'ssl-key',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['storage_engine'] = array(    'storage_engine',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sync_binlog'] = array(    'sync_binlog',    'replication-options-binary-log',    'sysvar');$VARIABLE_DOC_LINKS['sync_frm'] = array(    'sync_frm',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sync_master_info'] = array(    'sync_master_info',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['sync_relay_log'] = array(    'sync_relay_log',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['sync_relay_log_info'] = array(    'sync_relay_log_info',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['system_time_zone'] = array(    'system_time_zone',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_definition_cache'] = array(    'table_definition_cache',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_lock_wait_timeout'] = array(    'table_lock_wait_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_open_cache'] = array(    'table_open_cache',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_type'] = array(    'table_type',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_cache_size'] = array(    'thread_cache_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_concurrency'] = array(    'thread_concurrency',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_handling'] = array(    'thread_handling',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_stack'] = array(    'thread_stack',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['time_format'] = array(    'time_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['time_zone'] = array(    'time_zone',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['timed_mutexes'] = array(    'timed_mutexes',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['timestamp'] = array(    'timestamp',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['tmp_table_size'] = array(    'tmp_table_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['tmpdir'] = array(    'tmpdir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['transaction_alloc_block_size'] = array(    'transaction_alloc_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['transaction_prealloc_size'] = array(    'transaction_prealloc_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['tx_isolation'] = array(    'tx_isolation',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['unique_checks'] = array(    'unique_checks',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['updatable_views_with_limit'] = array(    'updatable_views_with_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version'] = array(    'version',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version_comment'] = array(    'version_comment',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version_compile_machine'] = array(    'version_compile_machine',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version_compile_os'] = array(    'version_compile_os',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['wait_timeout'] = array(    'wait_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['warning_count'] = array(    'warning_count',    'server-system-variables',    'sysvar');?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Single signon for phpMyAdmin * * This is just example how to use script based single signon with * phpMyAdmin, it is not intended to be perfect code and look, only * shows how you can integrate this functionality in your application. * * @package PhpMyAdmin * @subpackage Example *//** * This function returns username and password. * * It can optionally use configured username as parameter. * * @param string $user * @return array */function get_login_credentials($user){    return array('root', '');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Output buffer functions for phpMyAdmin * * Copyright 2001 Jeremy Brand <jeremy@nirvani.net> * http://www.jeremybrand.com/Jeremy/Brand/Jeremy_Brand.html * * Check for all the needed functions for output buffering * Make some wrappers for the top and bottoms of our files. * * @package PhpMyAdmin *//** * This function be used eventually to support more modes.  It is needed * because both header and footer functions must know what each other is * doing. * * @staticvar integer remember last calculated value * @return  integer  the output buffer mode */function PMA_outBufferModeGet(){    static $mode = null;    if (null !== $mode) {        return $mode;    }    $mode = 0;    if ($GLOBALS['cfg']['OBGzip'] && function_exists('ob_start')) {        if (ini_get('output_handler') == 'ob_gzhandler') {            // If a user sets the output_handler in php.ini to ob_gzhandler, then            // any right frame file in phpMyAdmin will not be handled properly by            // the browser. My fix was to check the ini file within the            // PMA_outBufferModeGet() function.            $mode = 0;        } elseif (function_exists('ob_get_level') && ob_get_level() > 0) {            // If output buffering is enabled in php.ini it's not possible to            // add the ob_gzhandler without a warning message from php 4.3.0.            // Being better safe than sorry, check for any existing output handler            // instead of just checking the 'output_buffering' setting.            $mode = 0;        } else {            $mode = 1;        }    }    // Zero (0) is no mode or in other words output buffering is OFF.    // Follow 2^0, 2^1, 2^2, 2^3 type values for the modes.    // Usefull if we ever decide to combine modes.  Then a bitmask field of    // the sum of all modes will be the natural choice.    return $mode;} // end of the 'PMA_outBufferModeGet()' function/** * This function will need to run at the top of all pages if output * output buffering is turned on.  It also needs to be passed $mode from * the PMA_outBufferModeGet() function or it will be useless. * */function PMA_outBufferPre(){    if ($mode = PMA_outBufferModeGet()) {        ob_start('ob_gzhandler');    }    header('X-ob_mode: ' . $mode);    register_shutdown_function('PMA_outBufferPost');} // end of the 'PMA_outBufferPre()' function/** * This function will need to run at the bottom of all pages if output * buffering is turned on.  It also needs to be passed $mode from the * PMA_outBufferModeGet() function or it will be useless. * */function PMA_outBufferPost(){    if (ob_get_status() && PMA_outBufferModeGet()) {        ob_flush();    }    /**     * previously we had here an "else flush()" but some PHP versions     * (at least PHP 5.2.11) have a bug (49816) that produces garbled     * data     */} // end of the 'PMA_outBufferPost()' function?>
<?php/** * Handles the visualization of Data Point objects. * * @package PhpMyAdmin */require_once 'pma_svg_data_element.php';class PMA_SVG_Data_Point extends PMA_SVG_Data_Element{    /*     * X-Coordinate of the point     */    private $cx;    /*     * Y-Coordinate of the point     */    private $cy;    /*     * A private constructor; prevents direct creation of object.     */    public function __construct($cx, $cy, $label, $dataRow)    {        parent::__construct($label, $dataRow);        $this->cx = $cx;        $this->cy = $cy;    }    public function prepareRowAsSVG($options)    {         return $this->prepareSvg($options);    }    /**     * Prepares and returns the code related to a row in the query result as SVG.     *     * @param array  $options  Array containing options related to properties of the point     * @return the code related to a row in the query result.     */    protected function prepareSvg($options)    {        $point_options = array(            'name'        => $this->label . '_' .$options['id'],            'id'          => $this->label . 'id' . '_' . $options['id'],            'class'       => 'point',            'fill'        => 'white',            'stroke'      => $options['color'],            'stroke-width'=> 2,        );        $row = '<circle cx="' . $this->cx . '" cy="' . $this->cy . '" r=".1"';        foreach ($point_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    public function getCx()    {        return $this->cx;    }    public function setCx($cx)    {        $this->cx = $cx;    }    public function getCy()    {        return $this->cy;    }    public function setCy($cy)    {        $this->cy = $cy;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * This Class interacts with the user to gather the information * about their tables for which they want to export the relational schema * export options are shown to user from they can choose */class PMA_User_Schema{    public $chosenPage;    public $autoLayoutForeign;    public $autoLayoutInternal;    public $pageNumber;    public $c_table_rows;    public $action;    public function setAction($value)    {        $this->action = $value;    }    /**     * This function will process the user defined pages     * and tables which will be exported as Relational schema     * you can set the table positions on the paper via scratchboard     * for table positions, put the x,y co-ordinates     *     * $this->action tells what the Schema is supposed to do     * create and select a page, generate schema etc     *     * @access public     * @return void     */    public function processUserChoice()    {        global $action_choose, $db, $cfgRelation;        if (isset($this->action)) {            switch ($this->action) {            case 'selectpage':                $this->chosenPage = $_REQUEST['chpage'];                if ($action_choose=="1") {                    $this->deleteCoordinates(                        $db,                        $cfgRelation,                        $this->chosenPage                    );                    $this->deletePages(                        $db,                        $cfgRelation,                        $this->chosenPage                    );                    $this->chosenPage = 0;                }                break;            case 'createpage':                $this->pageNumber = PMA_REL_create_page(                    $_POST['newpage'],                    $cfgRelation,                    $db                );                $this->autoLayoutForeign = isset($_POST['auto_layout_foreign'])                    ? "1"                    : null;                $this->autoLayoutInternal = isset($_POST['auto_layout_internal'])                    ? "1"                    : null;                $this->processRelations(                    $db,                    $this->pageNumber,                    $cfgRelation                );                break;            case 'edcoord':                $this->chosenPage = $_POST['chpage'];                $this->c_table_rows = $_POST['c_table_rows'];                $this->_editCoordinates($db, $cfgRelation);                break;            case 'delete_old_references':                $this->_deleteTableRows(                    $_POST['delrow'],                    $cfgRelation,                    $db,                    $_POST['chpage']                );                break;            case 'process_export':                $this->_processExportSchema();                break;            } // end switch        } // end if (isset($do))    }    /**     * shows/displays the HTML FORM to create the page     *     * @param string $db name of the selected database     *     * @return void     * @access public     */    public function showCreatePageDialog($db)    {        ?>        <form method="post" action="schema_edit.php" name="frm_create_page">        <fieldset>        <legend>        <?php echo __('Create a page') . "\n"; ?>        </legend>        <?php echo PMA_generate_common_hidden_inputs($db); ?>        <input type="hidden" name="do" value="createpage" />        <table>        <tr>        <td><label for="id_newpage"><?php echo __('Page name'); ?></label></td>        <td><input type="text" name="newpage" id="id_newpage" size="20" maxlength="50" /></td>        </tr>        <tr>        <td><?php echo __('Automatic layout based on'); ?></td>        <td>        <input type="checkbox" name="auto_layout_internal" id="id_auto_layout_internal" /><label for="id_auto_layout_internal">        <?php echo __('Internal relations'); ?></label><br />        <?php        /*         * Check to see whether INNODB and PBXT storage engines are Available in MYSQL PACKAGE         * If available, then provide AutoLayout for Foreign Keys in Schema View         */        if (PMA_StorageEngine::isValid('InnoDB') || PMA_StorageEngine::isValid('PBXT')) {            ?>            <input type="checkbox" name="auto_layout_foreign" id="id_auto_layout_foreign" /><label for="id_auto_layout_foreign">            <?php echo __('FOREIGN KEY'); ?></label><br />            <?php        }        ?>        </td></tr>        </table>        </fieldset>        <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Go'); ?>" />        </fieldset>        </form>        <?php    }    /**     * shows/displays the created page names in a drop down list     * User can select any page number and edit it using dashboard etc     *     * @return void     * @access public     */    public function selectPage()    {        global $db,$table,$cfgRelation;        $page_query = 'SELECT * FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'';        $page_rs    = PMA_query_as_controluser($page_query, false, PMA_DBI_QUERY_STORE);        if ($page_rs && PMA_DBI_num_rows($page_rs) > 0) {            ?>            <form method="get" action="schema_edit.php" name="frm_select_page">            <fieldset>            <legend>            <?php echo __('Please choose a page to edit') . "\n"; ?>            </legend>            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="do" value="selectpage" />            <select name="chpage" id="chpage" class="autosubmit">            <option value="0"><?php echo __('Select page'); ?></option>            <?php            while ($curr_page = PMA_DBI_fetch_assoc($page_rs)) {                echo "\n" . '        '                    . '<option value="' . $curr_page['page_nr'] . '"';                if (isset($this->chosenPage)                    && $this->chosenPage == $curr_page['page_nr']                ) {                    echo ' selected="selected"';                }                echo '>' . $curr_page['page_nr'] . ': '                    . htmlspecialchars($curr_page['page_descr']) . '</option>';            } // end while            echo "\n";            ?>            </select>            <?php            $choices = array(                 '0' => __('Edit'),                 '1' => __('Delete')            );            PMA_display_html_radio('action_choose', $choices, '0', false);            unset($choices);            ?>            </fieldset>            <fieldset class="tblFooters">            <input type="submit" value="<?php echo __('Go'); ?>" /><br />            </fieldset>            </form>            <?php        } // end IF        echo "\n";    } // end function    /**     * A dashboard is displayed to AutoLayout the position of tables     * users can drag n drop the tables and change their positions     *     * @return void     * @access public     */    public function showTableDashBoard()    {        global $db, $cfgRelation, $table, $with_field_names;        /*         * We will need an array of all tables in this db         */        $selectboxall = array('--');        $alltab_rs    = PMA_DBI_query(            'SHOW TABLES FROM ' . PMA_backquote($db) . ';',            null,            PMA_DBI_QUERY_STORE        );        while ($val = @PMA_DBI_fetch_row($alltab_rs)) {               $selectboxall[] = $val[0];        }        $tabExist = array();        /*         * Now if we already have chosen a page number then we should         * show the tables involved         */        if (isset($this->chosenPage) && $this->chosenPage > 0) {            echo "\n";            ?>            <h2><?php echo __('Select Tables'); ?></h2>            <?php            $page_query = 'SELECT * FROM '                . PMA_backquote($GLOBALS['cfgRelation']['db'])                . '.' . PMA_backquote($cfgRelation['table_coords'])                . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                . ' AND pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';            $page_rs    = PMA_query_as_controluser($page_query, false);            $array_sh_page = array();            while ($temp_sh_page = @PMA_DBI_fetch_assoc($page_rs)) {                   $array_sh_page[] = $temp_sh_page;            }            /*             * Display WYSIWYG parts             */            if (! isset($_POST['with_field_names']) && ! isset($_POST['showwysiwyg'])) {                $with_field_names = true;            }            $this->_displayScratchboardTables($array_sh_page);            ?>            <form method="post" action="schema_edit.php" name="edcoord">            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="chpage" value="<?php echo htmlspecialchars($this->chosenPage); ?>" />            <input type="hidden" name="do" value="edcoord" />            <table border="0">            <tr>                <th><?php echo __('Table'); ?></th>                <th><?php echo __('Delete'); ?></th>                <th>X</th>                <th>Y</th>            </tr>            <?php            if (isset($ctable)) {                unset($ctable);            }            $i = 0;            $odd_row = true;            foreach ($array_sh_page as $dummy_sh_page => $sh_page) {                $_mtab            =  $sh_page['table_name'];                $tabExist[$_mtab] =  false;                echo "\n" . '    <tr class="noclick ';                if ($odd_row) {                    echo 'odd';                } else {                    echo 'even';                }                echo '">';                $odd_row != $odd_row;                echo "\n" . '        <td>'                     . "\n" . '            <select name="c_table_' . $i . '[name]">';                foreach ($selectboxall as $key => $value) {                    echo "\n" . '                <option value="' . htmlspecialchars($value) . '"';                    if ($value == $sh_page['table_name']) {                        echo ' selected="selected"';                        $tabExist[$_mtab] = true;                    }                    echo '>' . htmlspecialchars($value) . '</option>';                }                echo "\n" . '            </select>'                     . "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="checkbox" id="id_c_table_' . $i .'" name="c_table_' . $i . '[delete]" value="y" /><label for="id_c_table_' . $i .'">' . __('Delete') . '</label>';                echo "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="text" onchange="dragPlace(' . $i . ', \'x\', this.value)" name="c_table_' . $i . '[x]" value="' . $sh_page['x'] . '" />';                echo "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="text" onchange="dragPlace(' . $i . ', \'y\', this.value)" name="c_table_' . $i . '[y]" value="' . $sh_page['y'] . '" />';                echo "\n" . '        </td>';                echo "\n" . '    </tr>';                $i++;            }            /*             * Add one more empty row             */            echo "\n" . '    <tr class="noclick ';            if ($odd_row) {                echo 'odd';            } else {                echo 'even';            }            $odd_row != $odd_row;            echo '">';            echo "\n" . '        <td>'                 . "\n" . '            <select name="c_table_' . $i . '[name]">';            foreach ($selectboxall as $key => $value) {                echo "\n" . '                <option value="' . htmlspecialchars($value) . '">' . htmlspecialchars($value) . '</option>';            }            echo "\n" . '            </select>'                 . "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="checkbox" id="id_c_table_' . $i .'" name="c_table_' . $i . '[delete]" value="y" /><label for="id_c_table_' . $i .'">' . __('Delete') . '</label>';            echo "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="text" name="c_table_' . $i . '[x]" value="' . (isset($sh_page['x'])?$sh_page['x']:'') . '" />';            echo "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="text" name="c_table_' . $i . '[y]" value="' . (isset($sh_page['y'])?$sh_page['y']:'') . '" />';            echo "\n" . '        </td>';            echo "\n" . '    </tr>';            echo "\n" . '    </table>' . "\n";            echo "\n" . '    <input type="hidden" name="c_table_rows" value="' . ($i + 1) . '" />';            echo "\n" . '    <input type="hidden" id="showwysiwyg" name="showwysiwyg" value="' . ((isset($showwysiwyg) && $showwysiwyg == '1') ? '1' : '0') . '" />';            echo "\n" . '    <input type="checkbox" name="with_field_names" ' . (isset($with_field_names) ? 'checked="checked"' : ''). ' />' . __('Column names') . '<br />';            echo "\n" . '    <input type="submit" value="' . __('Save') . '" />';            echo "\n" . '</form>' . "\n\n";        } // end if        if (isset($tabExist)) {            $this->_deleteTables($db, $this->chosenPage, $tabExist);        }    }    /**     * show Export relational schema generation options     * user can select export type of his own choice     * and the attributes related to it     *     * @return void     * @access public     */    public function displaySchemaGenerationOptions()    {        global $cfg,$pmaThemeImage,$db,$test_rs,$chpage;        ?>        <form method="post" action="schema_export.php">            <fieldset>            <legend>            <?php            echo PMA_generate_common_hidden_inputs($db);            if ($cfg['PropertiesIconic']) {                echo PMA_getImage('b_views.png');            }            echo __('Display relational schema');            ?>:            </legend>            <select name="export_type" id="export_type">                <option value="pdf" selected="selected">PDF</option>                <option value="svg">SVG</option>                <option value="dia">DIA</option>                <option value="visio">Visio</option>                <option value="eps">EPS</option>            </select>            <label><?php echo __('Select Export Relational Type');?></label><br />            <?php            if (isset($test_rs)) {            ?>            <label for="pdf_page_number_opt"><?php echo __('Page number:'); ?></label>            <select name="pdf_page_number" id="pdf_page_number_opt">                <?php                while ($pages = @PMA_DBI_fetch_assoc($test_rs)) {                    echo '                <option value="' . $pages['page_nr'] . '">'                        . $pages['page_nr'] . ': ' . htmlspecialchars($pages['page_descr']) . '</option>' . "\n";                } // end while                PMA_DBI_free_result($test_rs);                unset($test_rs);                ?>            </select><br />            <?php } else { ?>            <input type="hidden" name="pdf_page_number" value="<?php echo htmlspecialchars($this->chosenPage); ?>" />            <?php } ?>            <input type="hidden" name="do" value="process_export" />            <input type="hidden" name="chpage" value="<?php echo $chpage; ?>" />            <input type="checkbox" name="show_grid" id="show_grid_opt" />            <label for="show_grid_opt"><?php echo __('Show grid'); ?></label><br />            <input type="checkbox" name="show_color" id="show_color_opt" checked="checked" />            <label for="show_color_opt"><?php echo __('Show color'); ?></label><br />            <input type="checkbox" name="show_table_dimension" id="show_table_dim_opt" />            <label for="show_table_dim_opt"><?php echo __('Show dimension of tables'); ?>            </label><br />            <input type="checkbox" name="all_table_same_wide" id="all_table_same_wide" />            <label for="all_table_same_wide"><?php echo __('Display all tables with the same width'); ?>            </label><br />            <input type="checkbox" name="with_doc" id="with_doc" checked="checked" />            <label for="with_doc"><?php echo __('Data Dictionary'); ?></label><br />            <input type="checkbox" name="show_keys" id="show_keys" />            <label for="show_keys"><?php echo __('Only show keys'); ?></label><br />            <select name="orientation" id="orientation_opt" onchange="refreshDragOption('pdflayout');" >                <option value="L"><?php echo __('Landscape');?></option>                <option value="P"><?php echo __('Portrait');?></option>            </select>            <label for="orientation_opt"><?php echo __('Orientation'); ?></label>            <br />            <select name="paper" id="paper_opt" onchange="refreshDragOption('pdflayout');">                <?php                foreach ($cfg['PDFPageSizes'] as $key => $val) {                        echo '<option value="' . $val . '"';                        if ($val == $cfg['PDFDefaultPageSize']) {                            echo ' selected="selected"';                        }                        echo ' >' . $val . '</option>' . "\n";                }                ?>            </select>            <label for="paper_opt"><?php echo __('Paper size'); ?></label>            </fieldset>            <fieldset class="tblFooters">            <input type="submit" value="<?php echo __('Go'); ?>" />            </fieldset>        </form>        <?php    }    /**    * Check if there are tables that need to be deleted in dashboard,    * if there are, ask the user for allowance    *    * @param string  $db       name of database selected    * @param integer $chpage   selected page    * @param array   $tabExist    *    * @return void    * @access private    */    private function _deleteTables($db, $chpage, $tabExist)    {        global $table;        $_strtrans  = '';        $_strname   = '';        $shoot      = false;        if (! empty($tabExist) && is_array($tabExist)) {            foreach ($tabExist as $key => $value) {                if (! $value) {                    $_strtrans  .= '<input type="hidden" name="delrow[]" value="' . htmlspecialchars($key) . '" />' . "\n";                    $_strname   .= '<li>' . htmlspecialchars($key) . '</li>' . "\n";                    $shoot       = true;                }            }            if ($shoot) {                echo '<form action="schema_edit.php" method="post">' . "\n"                    . PMA_generate_common_hidden_inputs($db)                    . '<input type="hidden" name="do" value="delete_old_references" />' . "\n"                    . '<input type="hidden" name="chpage" value="' . htmlspecialchars($chpage) . '" />' . "\n"                    . __('The current page has references to tables that no longer exist. Would you like to delete those references?')                    . '<ul>' . "\n"                    . $_strname                    . '</ul>' . "\n"                    . $_strtrans                    . '<input type="submit" value="' . __('Go') . '" />' . "\n"                    . '</form>';            }        }    }    /**     * Check if there are tables that need to be deleted in dashboard,     * if there are, ask the user for allowance     *     * @return void     * @access private     */    private function _displayScratchboardTables($array_sh_page)    {        global $with_field_names, $db;        ?>        <script type="text/javascript" src="./js/dom-drag.js"></script>        <form method="post" action="schema_edit.php" name="dragdrop">        <input type="button" name="dragdrop" value="<?php echo __('Toggle scratchboard'); ?>" onclick="ToggleDragDrop('pdflayout');" />        <input type="button" name="dragdropreset" value="<?php echo __('Reset'); ?>" onclick="resetDrag();" />        </form>        <div id="pdflayout" class="pdflayout" style="visibility: hidden;">        <?php        $draginit = '';        $draginit2 = '';        $reset_draginit = '';        $i = 0;        foreach ($array_sh_page as $key => $temp_sh_page) {            $drag_x = $temp_sh_page['x'];            $drag_y = $temp_sh_page['y'];            $draginit2      .= ' Drag.init($("#table_' . $i . '")[0], null, 0, parseInt(myid.style.width)-2, 0, parseInt(myid.style.height)-5);' . "\n";            $draginit2      .= '    $("#table_' . $i . '")[0].onDrag = function (x, y) { document.edcoord.elements["c_table_' . $i . '[x]"].value = parseInt(x); document.edcoord.elements["c_table_' . $i . '[y]"].value = parseInt(y) }' . "\n";            $draginit       .= '    $("#table_' . $i . '")[0].style.left = "' . $drag_x . 'px";' . "\n";            $draginit       .= '    $("#table_' . $i . '")[0].style.top  = "' . $drag_y . 'px";' . "\n";            $reset_draginit .= '    $("#table_' . $i . '")[0].style.left = "2px";' . "\n";            $reset_draginit .= '    $("#table_' . $i . '")[0].style.top  = "' . (15 * $i) . 'px";' . "\n";            $reset_draginit .= '    document.edcoord.elements["c_table_' . $i . '[x]"].value = "2"' . "\n";            $reset_draginit .= '    document.edcoord.elements["c_table_' . $i . '[y]"].value = "' . (15 * $i) . '"' . "\n";            echo '<div id="table_' . $i . '" class="pdflayout_table"><u>' . $temp_sh_page['table_name'] . '</u>';            if (isset($with_field_names)) {                $fields = PMA_DBI_get_columns($db, $temp_sh_page['table_name']);                // if the table has been dropped from outside phpMyAdmin,                // we can no longer obtain its columns list                if ($fields) {                    foreach ($fields as $row) {                        echo '<br />' . htmlspecialchars($row['Field']) . "\n";                    }                }            }            echo '</div>' . "\n";            $i++;        }        ?>        </div>        <script type="text/javascript">        //<![CDATA[        function PDFinit() {            refreshLayout();            myid = $('#pdflayout')[0];            <?php echo $draginit; ?>            TableDragInit();        }        function TableDragInit() {            myid = $('#pdflayout')[0];            <?php echo $draginit2; ?>        }        function resetDrag() {            <?php echo $reset_draginit; ?>        }        //]]>        </script>        <?php    }    /**     * delete the table rows with table co-ordinates     *     * @param int     $delrow      delete selected table from list of tables     * @param array   $cfgRelation relation settings     * @param string  $db          database name     * @param integer $chpage      selected page for adding relations etc     *     * @return void     * @access private     */    private function _deleteTableRows($delrow,$cfgRelation,$db,$chpage)    {        foreach ($delrow as $current_row) {            $del_query = 'DELETE FROM '                . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['table_coords']) . ' ' . "\n"                .   ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'' . "\n"                .   ' AND table_name = \'' . PMA_sqlAddSlashes($current_row) . '\'' . "\n"                .   ' AND pdf_page_number = \'' . PMA_sqlAddSlashes($chpage) . '\'';                echo $del_query;            PMA_query_as_controluser($del_query, false);        }    }    /**     * get all the export options and verify     * call and include the appropriate Schema Class depending on $export_type     *     * @return void     * @access private     */    private function _processExportSchema()    {        /**        * Settings for relation stuff        */        include_once './libraries/transformations.lib.php';        include_once './libraries/Index.class.php';        /**         * default is PDF, otherwise validate it's only letters a-z         */        global  $db,$export_type;        if (!isset($export_type) || !preg_match('/^[a-zA-Z]+$/', $export_type)) {            $export_type = 'pdf';        }        PMA_DBI_select_db($db);        include "./libraries/schema/" . ucfirst($export_type) . "_Relation_Schema.class.php";        $obj_schema = eval("new PMA_" . ucfirst($export_type) . "_Relation_Schema();");    }    /**     * delete X and Y coordinates     *     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     * @param integer $choosePage  selected page for adding relations etc     *     * @return void     * @access private     */    public function deleteCoordinates($db, $cfgRelation, $choosePage)    {        $query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['table_coords'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($choosePage) . '\'';        PMA_query_as_controluser($query, false);    }    /**     * delete pages     *     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     * @param integer $choosePage  selected page for adding relations etc     *     * @return void     * @access private     */    public function deletePages($db, $cfgRelation, $choosePage)    {        $query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND   page_nr = \'' . PMA_sqlAddSlashes($choosePage) . '\'';        PMA_query_as_controluser($query, false);    }    /**     * process internal and foreign key relations     *     * @param string  $db          The database name     * @param integer $pageNumber  document number/Id     * @param array   $cfgRelation relation settings     *     * @return void     * @access private     */    public function processRelations($db, $pageNumber, $cfgRelation)    {        /*         * A u t o m a t i c    l a y o u t         *         * There are 2 kinds of relations in PMA         * 1) Internal Relations 2) Foreign Key Relations         */        if (isset($this->autoLayoutInternal) || isset($this->autoLayoutForeign)) {            $all_tables = array();        }        if (isset($this->autoLayoutForeign)) {            /*             * get the tables list             * who support FOREIGN KEY, it's not             * important that we group together InnoDB tables             * and PBXT tables, as this logic is just to put             * the tables on the layout, not to determine relations             */            $tables = PMA_DBI_get_tables_full($db);            $foreignkey_tables = array();            foreach ($tables as $table_name => $table_properties) {                if (PMA_foreignkey_supported($table_properties['ENGINE'])) {                    $foreignkey_tables[] = $table_name;                }            }            $all_tables = $foreignkey_tables;            /*             * could be improved by finding the tables which have the             * most references keys and placing them at the beginning             * of the array (so that they are all center of schema)             */            unset($tables, $foreignkey_tables);        }        if (isset($this->autoLayoutInternal)) {            /*             * get the tables list who support Internal Relations;             * This type of relations will be created when             * you setup the PMA tables correctly             */            $master_tables = 'SELECT COUNT(master_table), master_table'                . ' FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['relation'])                . ' WHERE master_db = \'' . PMA_sqlAddSlashes($db) . '\''                . ' GROUP BY master_table'                . ' ORDER BY COUNT(master_table) DESC';            $master_tables_rs = PMA_query_as_controluser(                $master_tables, false, PMA_DBI_QUERY_STORE            );            if ($master_tables_rs && PMA_DBI_num_rows($master_tables_rs) > 0) {                /* first put all the master tables at beginning                 * of the list, so they are near the center of                 * the schema                 */                while (list(, $master_table) = PMA_DBI_fetch_row($master_tables_rs)) {                       $all_tables[] = $master_table;                }                /* Now for each master, add its foreigns into an array                 * of foreign tables, if not already there                 * (a foreign might be foreign for more than                 * one table, and might be a master itself)                 */                $foreign_tables = array();                foreach ($all_tables as $master_table) {                    $foreigners = PMA_getForeigners($db, $master_table);                    foreach ($foreigners as $foreigner) {                        if (! in_array($foreigner['foreign_table'], $foreign_tables)) {                            $foreign_tables[] = $foreigner['foreign_table'];                        }                    }                }                /*                 * Now merge the master and foreign arrays/tables                 */                foreach ($foreign_tables as $foreign_table) {                    if (! in_array($foreign_table, $all_tables)) {                        $all_tables[] = $foreign_table;                    }                }            }        }        if (isset($this->autoLayoutInternal) || isset($this->autoLayoutForeign)) {            $this->addRelationCoordinates(                $all_tables, $pageNumber, $db, $cfgRelation            );        }        $this->chosenPage = $pageNumber;    }    /**     * Add X and Y coordinates for a table     *     * @param array   $all_tables  A list of all tables involved     * @param integer $pageNumber  document number/Id     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     *     * @return void     * @access private     */    public function addRelationCoordinates($all_tables, $pageNumber, $db, $cfgRelation)    {        /*         * Now generate the coordinates for the schema         * in a clockwise spiral and add to co-ordinates table         */        $pos_x = 300;        $pos_y = 300;        $delta = 110;        $delta_mult = 1.10;        $direction = "right";        foreach ($all_tables as $current_table) {            /*            * save current table's coordinates            */            $insert_query = 'INSERT INTO '                . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['table_coords']) . ' '                . '(db_name, table_name, pdf_page_number, x, y) '                . 'VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \''                . PMA_sqlAddSlashes($current_table) . '\',' . $pageNumber                . ',' . $pos_x . ',' . $pos_y . ')';            PMA_query_as_controluser($insert_query, false);            /*             * compute for the next table             */            switch ($direction) {            case 'right':                $pos_x    += $delta;                $direction = "down";                $delta    *= $delta_mult;                break;            case 'down':                $pos_y    += $delta;                $direction = "left";                $delta    *= $delta_mult;                break;            case 'left':                $pos_x    -= $delta;                $direction = "up";                $delta    *= $delta_mult;                break;            case 'up':                $pos_y    -= $delta;                $direction = "right";                $delta    *= $delta_mult;                break;            }        }    }    /**     * update X and Y coordinates for a table     *     * @param string $db          The database name     * @param array  $cfgRelation relation settings     *     * @return void     * @access private     */    private function _editCoordinates($db, $cfgRelation)    {        for ($i = 0; $i < $this->c_table_rows; $i++) {            $arrvalue = 'c_table_' . $i;            global $$arrvalue;            $arrvalue = $$arrvalue;            if (! isset($arrvalue['x']) || $arrvalue['x'] == '') {                $arrvalue['x'] = 0;            }            if (! isset($arrvalue['y']) || $arrvalue['y'] == '') {                $arrvalue['y'] = 0;            }            if (isset($arrvalue['name']) && $arrvalue['name'] != '--') {                $test_query = 'SELECT * FROM '                    . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($cfgRelation['table_coords'])                    . ' WHERE db_name = \'' .  PMA_sqlAddSlashes($db) . '\''                    . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                    . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                $test_rs = PMA_query_as_controluser($test_query, false, PMA_DBI_QUERY_STORE);                //echo $test_query;                if ($test_rs && PMA_DBI_num_rows($test_rs) > 0) {                    if (isset($arrvalue['delete']) && $arrvalue['delete'] == 'y') {                        $ch_query = 'DELETE FROM '                            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                            . PMA_backquote($cfgRelation['table_coords'])                            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                    } else {                        $ch_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db'])                            . '.' . PMA_backquote($cfgRelation['table_coords']) . ' '                            . 'SET x = ' . $arrvalue['x'] . ', y= ' . $arrvalue['y']                            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                    }                } else {                    $ch_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db'])                        . '.' . PMA_backquote($cfgRelation['table_coords']) . ' '                        . '(db_name, table_name, pdf_page_number, x, y) '                        . 'VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \''                        . PMA_sqlAddSlashes($arrvalue['name']) . '\', \''                        . PMA_sqlAddSlashes($this->chosenPage) . '\','                        . $arrvalue['x'] . ',' . $arrvalue['y'] . ')';                }                //echo $ch_query;                PMA_query_as_controluser($ch_query, false);            } // end if        } // end for    }}?>
<?php/** * Theme based generator for SVG gradient. * * @package PhpMyAdmin-theme */header('Content-Type: image/svg+xml');header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');function get_color($get_name, $default){    // get color from GET args, only alphanumeric chcracters    $opts = array('options' => array('regexp' => '/^[a-z0-9]+$/i'));    $color = filter_input(INPUT_GET, $get_name, FILTER_VALIDATE_REGEXP, $opts);    if (preg_match('/^[a-f0-9]{6}$/', $color)) {        return '#' . $color;    }    return $color ? $color : $default;}?><?php echo '<?xml version="1.0" ?>' ?><svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none" version="1.0" width="100%" height="100%">    <defs>        <linearGradient id="linear-gradient" x1="0%" y1="0%" x2="0%" y2="100%">            <stop offset="0%" stop-color="<?php echo get_color('from', 'white') ?>" stop-opacity="1" />            <stop offset="100%" stop-color="<?php echo get_color('to', 'black') ?>" stop-opacity="1" />        </linearGradient>    </defs>    <rect width="100%" height="100%" style="fill:url(#linear-gradient);" /></svg>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * */require_once './libraries/engines/merge.lib.php';/** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_mrg_myisam extends PMA_StorageEngine_merge{    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'merge';    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for cleanup of user input. * * @package PhpMyAdmin *//** * Removes all variables from request except whitelisted ones. * * @param string list of variables to allow * @return nothing * @access public */function PMA_remove_request_vars(&$whitelist){    // do not check only $_REQUEST because it could have been overwritten    // and use type casting because the variables could have become    // strings    $keys = array_keys(array_merge((array)$_REQUEST, (array)$_GET, (array)$_POST, (array)$_COOKIE));    foreach ($keys as $key) {        if (! in_array($key, $whitelist)) {            unset($_REQUEST[$key], $_GET[$key], $_POST[$key], $GLOBALS[$key]);        } else {            // allowed stuff could be compromised so escape it            // we require it to be a string            if (isset($_REQUEST[$key]) && ! is_string($_REQUEST[$key])) {                unset($_REQUEST[$key]);            }            if (isset($_POST[$key]) && ! is_string($_POST[$key])) {                unset($_POST[$key]);            }            if (isset($_COOKIE[$key]) && ! is_string($_COOKIE[$key])) {                unset($_COOKIE[$key]);            }            if (isset($_GET[$key]) && ! is_string($_GET[$key])) {                unset($_GET[$key]);            }        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */# GNU iconv code set to IBM AIX libiconv code set table# Keys of this table should be in lowercase, and searches should be performed using lowercase!$gnu_iconv_to_aix_iconv_codepage_map = array (    // "iso-8859-[1-9]" --> "ISO8859-[1-9]" according to http://publibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/libs/basetrf2/setlocale.htm    'iso-8859-1' => 'ISO8859-1',    'iso-8859-2' => 'ISO8859-2',    'iso-8859-3' => 'ISO8859-3',    'iso-8859-4' => 'ISO8859-4',    'iso-8859-5' => 'ISO8859-5',    'iso-8859-6' => 'ISO8859-6',    'iso-8859-7' => 'ISO8859-7',    'iso-8859-8' => 'ISO8859-8',    'iso-8859-9' => 'ISO8859-9',    // "big5" --> "IBM-eucTW" according to http://kadesh.cepba.upc.es/mancpp/classref/ref/ITranscoder_DSC.htm    'big5' => 'IBM-eucTW',    // Other mappings corresponding to the phpMyAdmin dropdown box when using the charset conversion feature    'euc-jp' => 'IBM-eucJP',    'koi8-r' => 'IBM-eucKR',    'ks_c_5601-1987' => 'KSC5601.1987-0',    'tis-620' => 'TIS-620',    'utf-8' => 'UTF-8');/** * Wrapper around IBM AIX iconv(), whose character set naming differs * from the GNU version of iconv(). * * @param string   input character set * @param string   output character set * @param string   the string to convert * * @return  mixed    converted string or false on failure * * @access  public * */function PMA_aix_iconv_wrapper($in_charset, $out_charset, $str){    global $gnu_iconv_to_aix_iconv_codepage_map;    // Check for transliteration argument at the end of output character set name    $translit_search = strpos(strtolower($out_charset), '//translit');    $using_translit = (!($translit_search === false));    // Extract "plain" output character set name (without any transliteration argument)    $out_charset_plain = ($using_translit ? substr($out_charset, 0, $translit_search) : $out_charset);    // Transform name of input character set (if found)    if (array_key_exists(strtolower($in_charset), $gnu_iconv_to_aix_iconv_codepage_map)) {        $in_charset = $gnu_iconv_to_aix_iconv_codepage_map[strtolower($in_charset)];    }    // Transform name of "plain" output character set (if found)    if (array_key_exists(strtolower($out_charset_plain), $gnu_iconv_to_aix_iconv_codepage_map)) {        $out_charset_plain = $gnu_iconv_to_aix_iconv_codepage_map[strtolower($out_charset_plain)];    }    // Add transliteration argument again (exactly as specified by user) if used    // Build the output character set name that we will use    $out_charset = ($using_translit ? $out_charset_plain . substr($out_charset, $translit_search) : $out_charset_plain);    // NOTE: Transliteration not supported; we will use the "plain" output character set name    $out_charset = $out_charset_plain;    // Call iconv() with the possibly modified parameters    $result = iconv($in_charset, $out_charset, $str);    return $result;} //  end of the "PMA_aix_iconv_wrapper()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run single signon authentication. * * @package PhpMyAdmin-Auth-Signon *//** * Displays authentication form * * @global  string    the font face to use in case of failure * @global  string    the default font size to use in case of failure * @global  string    the big font size to use in case of failure * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth(){    unset($_SESSION['LAST_SIGNON_URL']);    if (empty($GLOBALS['cfg']['Server']['SignonURL'])) {        PMA_fatalError('You must set SignonURL!');    } elseif (!empty($_REQUEST['old_usr']) && !empty($GLOBALS['cfg']['Server']['LogoutURL'])) {        /* Perform logout to custom URL */        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);    } else {        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['SignonURL']);    }    exit();} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * @global  string    the username if register_globals is on * @global  string    the password if register_globals is on * @global  array     the array of server variables if register_globals is *                    off * @global  array     the array of environment variables if register_globals *                    is off * @global  string    the username for the ? server * @global  string    the password for the ? server * @global  string    the username for the WebSite Professional server * @global  string    the password for the WebSite Professional server * @global  string    the username of the user who logs out * * @return  boolean   whether we get authentication settings or not * * @access  public */function PMA_auth_check(){    global $PHP_AUTH_USER, $PHP_AUTH_PW;    /* Check if we're using same sigon server */    if (isset($_SESSION['LAST_SIGNON_URL']) && $_SESSION['LAST_SIGNON_URL'] != $GLOBALS['cfg']['Server']['SignonURL']) {        return false;    }    /* Script name */    $script_name = $GLOBALS['cfg']['Server']['SignonScript'];    /* Session name */    $session_name = $GLOBALS['cfg']['Server']['SignonSession'];    /* Login URL */    $signon_url = $GLOBALS['cfg']['Server']['SignonURL'];    /* Current host */    $single_signon_host = $GLOBALS['cfg']['Server']['host'];    /* Current port */    $single_signon_port = $GLOBALS['cfg']['Server']['port'];    /* No configuration updates */    $single_signon_cfgupdate = array();    /* Are we requested to do logout? */    $do_logout = !empty($_REQUEST['old_usr']);    /* Handle script based auth */    if (!empty($script_name)) {        if (! file_exists($script_name)) {            PMA_fatalError(__('Can not find signon authentication script:') . ' ' . $script_name);        }        include $script_name;        list ($PHP_AUTH_USER, $PHP_AUTH_PW) = get_login_credentials($cfg['Server']['user']);    /* Does session exist? */    } elseif (isset($_COOKIE[$session_name])) {        /* End current session */        $old_session = session_name();        $old_id = session_id();        session_write_close();        /* Load single signon session */        session_name($session_name);        session_id($_COOKIE[$session_name]);        session_start();        /* Clear error message */        unset($_SESSION['PMA_single_signon_error_message']);        /* Grab credentials if they exist */        if (isset($_SESSION['PMA_single_signon_user'])) {            if ($do_logout) {                $PHP_AUTH_USER = '';            } else {                $PHP_AUTH_USER = $_SESSION['PMA_single_signon_user'];            }        }        if (isset($_SESSION['PMA_single_signon_password'])) {            if ($do_logout) {                $PHP_AUTH_PW = '';            } else {                $PHP_AUTH_PW = $_SESSION['PMA_single_signon_password'];            }        }        if (isset($_SESSION['PMA_single_signon_host'])) {            $single_signon_host = $_SESSION['PMA_single_signon_host'];        }        if (isset($_SESSION['PMA_single_signon_port'])) {            $single_signon_port = $_SESSION['PMA_single_signon_port'];        }        if (isset($_SESSION['PMA_single_signon_cfgupdate'])) {            $single_signon_cfgupdate = $_SESSION['PMA_single_signon_cfgupdate'];        }        /* Also get token as it is needed to access subpages */        if (isset($_SESSION['PMA_single_signon_token'])) {            /* No need to care about token on logout */            $pma_token = $_SESSION['PMA_single_signon_token'];        }        /* End single signon session */        session_write_close();        /* Restart phpMyAdmin session */        session_name($old_session);        if (!empty($old_id)) {            session_id($old_id);        }        session_start();        /* Set the single signon host */        $GLOBALS['cfg']['Server']['host'] = $single_signon_host;        /* Set the single signon port */        $GLOBALS['cfg']['Server']['port'] = $single_signon_port;        /* Configuration update */        $GLOBALS['cfg']['Server'] = array_merge($GLOBALS['cfg']['Server'], $single_signon_cfgupdate);        /* Restore our token */        if (!empty($pma_token)) {            $_SESSION[' PMA_token '] = $pma_token;        }        /**         * Clear user cache.         */        PMA_clearUserCache();    }    // Returns whether we get authentication settings or not    if (empty($PHP_AUTH_USER)) {        unset($_SESSION['LAST_SIGNON_URL']);        return false;    } else {        $_SESSION['LAST_SIGNON_URL'] = $GLOBALS['cfg']['Server']['SignonURL'];        return true;    }} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @global  array     the valid servers settings * @global  integer   the id of the current server * @global  array     the current server settings * @global  string    the current username * @global  string    the current password * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    global $cfg;    global $PHP_AUTH_USER, $PHP_AUTH_PW;    $cfg['Server']['user']     = $PHP_AUTH_USER;    $cfg['Server']['password'] = $PHP_AUTH_PW;    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth_fails(){    /* Session name */    $session_name = $GLOBALS['cfg']['Server']['SignonSession'];    /* Does session exist? */    if (isset($_COOKIE[$session_name])) {        /* End current session */        $old_session = session_name();        $old_id = session_id();        session_write_close();        /* Load single signon session */        session_name($session_name);        session_id($_COOKIE[$session_name]);        session_start();        /* Set error message */        if (! empty($GLOBALS['login_without_password_is_forbidden'])) {            $_SESSION['PMA_single_signon_error_message'] = __('Login without a password is forbidden by configuration (see AllowNoPassword)');        } elseif (! empty($GLOBALS['allowDeny_forbidden'])) {            $_SESSION['PMA_single_signon_error_message'] = __('Access denied');        } elseif (! empty($GLOBALS['no_activity'])) {            $_SESSION['PMA_single_signon_error_message'] = sprintf(__('No activity within %s seconds; please log in again'), $GLOBALS['cfg']['LoginCookieValidity']);        } elseif (PMA_DBI_getError()) {            $_SESSION['PMA_single_signon_error_message'] = PMA_sanitize(PMA_DBI_getError());        } else {            $_SESSION['PMA_single_signon_error_message'] = __('Cannot log in to the MySQL server');        }    }    PMA_auth();} // end of the 'PMA_auth_fails()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * configures general layout * for detailed layout configuration please refer to the css files * * @package PhpMyAdmin-theme * @subpackage Original *//** * navi frame */// navi frame width$GLOBALS['cfg']['NaviWidth']                = 200;// foreground (text) color for the navi frame$GLOBALS['cfg']['NaviColor']                = '#000000';// background for the navi frame$GLOBALS['cfg']['NaviBackground']           = '#D0DCE0';// foreground (text) color of the pointer in navi frame$GLOBALS['cfg']['NaviPointerColor']         = '#000000';// background of the pointer in navi frame$GLOBALS['cfg']['NaviPointerBackground']    = '#9999CC';/** * main frame */// foreground (text) color for the main frame$GLOBALS['cfg']['MainColor']                = '#000000';// background for the main frame$GLOBALS['cfg']['MainBackground']           = '#F5F5F5';// foreground (text) color of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerColor']       = '#000000';// background of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerBackground']  = '#CCFFCC';// foreground (text) color of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerColor']        = '#000000';// background of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerBackground']   = '#FFCC99';/** * fonts *//** * the font family as a valid css font family value, * if not set the browser default will be used * (depending on browser, DTD and system settings) */$GLOBALS['cfg']['FontFamily']           = 'sans-serif';/** * fixed width font family, used in textarea */$GLOBALS['cfg']['FontFamilyFixed']      = 'monospace';/** * tables */// border$GLOBALS['cfg']['Border']               = 0;// table header and footer color$GLOBALS['cfg']['ThBackground']         = '#D3DCE3';// table header and footer background$GLOBALS['cfg']['ThColor']              = '#000000';// table data row background$GLOBALS['cfg']['BgOne']                = '#E5E5E5';// table data row background, alternate$GLOBALS['cfg']['BgTwo']                = '#D5D5D5';/** * query window */// Width of Query window$GLOBALS['cfg']['QueryWindowWidth']     = 600;// Height of Query window$GLOBALS['cfg']['QueryWindowHeight']    = 400;/** * SQL Parser Settings * Syntax colouring data */$GLOBALS['cfg']['SQP']['fmtColor']      = array(    'comment'            => '#808000',    'comment_mysql'      => '',    'comment_ansi'       => '',    'comment_c'          => '',    'digit'              => '',    'digit_hex'          => 'teal',    'digit_integer'      => 'teal',    'digit_float'        => 'aqua',    'punct'              => 'fuchsia',    'alpha'              => '',    'alpha_columnType'   => '#FF9900',    'alpha_columnAttrib' => '#0000FF',    'alpha_reservedWord' => '#990099',    'alpha_functionName' => '#FF0000',    'alpha_identifier'   => 'black',    'alpha_charset'      => '#6495ed',    'alpha_variable'     => '#800000',    'quote'              => '#008000',    'quote_double'       => '',    'quote_single'       => '',    'quote_backtick'     => '');/** * Chart colors */ $GLOBALS['cfg']['chartColor'] = array(    'gradientIntensity'       => 0,    // The style of the chart title.    'titleColor'              => '#000000',    'titleBgColor'            => $GLOBALS['cfg']['ThBackground'],    // Chart border (0 for no border)    'border'                  => '#CCCCCC',    // Chart background color.    'bgColor'                 => $GLOBALS['cfg']['BgTwo'],    // when graph area gradient is used, this is the color of the graph    // area border    'graphAreaColor'          =>  '#D5D9DD',    // the background color of the inner graph area    'graphAreaGradientColor'  => $GLOBALS['cfg']['BgOne'],    // the color of the grid lines in the graph area    'gridColor'               => '#E6E6E6',    // the color of the scale and the labels    'scaleColor'              => '#D5D9DD', );?>
<?php//============================================================+// File name   : encodings_maps.php// Version     : 1.0.001// Begin       : 2011-10-01// Last Update : 2011-11-15// Author      : Nicola Asuni - Tecnick.com LTD - Manor Coach House, Church Hill, Aldershot, Hants, GU12 4RQ, UK - www.tecnick.com - info@tecnick.com// License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)// -------------------------------------------------------------------// Copyright (C) 2008-2012  Nicola Asuni - Tecnick.com LTD//// This file is part of TCPDF software library.//// TCPDF is free software: you can redistribute it and/or modify it// under the terms of the GNU Lesser General Public License as// published by the Free Software Foundation, either version 3 of the// License, or (at your option) any later version.//// TCPDF is distributed in the hope that it will be useful, but// WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.// See the GNU Lesser General Public License for more details.//// You should have received a copy of the GNU Lesser General Public License// along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.//// See LICENSE.TXT file for more information.// -------------------------------------------------------------------//// Description : Unicode data for TCPDF library.////============================================================+/** * @file * Font encodings maps class for TCPDF library. * @author Nicola Asuni * @package com.tecnick.tcpdf * @since 5.9.123 (2011-10-01) *//** * @class TCPDF_ENCODING_MAPS * This is a PHP class containing Font encodings maps class for TCPDF library. * @package com.tecnick.tcpdf * @version 1.0.000 * @author Nicola Asuni - info@tecnick.com */class TCPDF_ENCODING_MAPS {/** * Array of Encoding Maps. * @public */public $encmap = array(// encoding map for: cp1251'cp1251' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'afii10051',129=>'afii10052',130=>'quotesinglbase',131=>'afii10100',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'Euro',137=>'perthousand',138=>'afii10058',139=>'guilsinglleft',140=>'afii10059',141=>'afii10061',142=>'afii10060',143=>'afii10145',144=>'afii10099',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'trademark',154=>'afii10106',155=>'guilsinglright',156=>'afii10107',157=>'afii10109',158=>'afii10108',159=>'afii10193',160=>'space',161=>'afii10062',162=>'afii10110',163=>'afii10057',164=>'currency',165=>'afii10050',166=>'brokenbar',167=>'section',168=>'afii10023',169=>'copyright',170=>'afii10053',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'afii10056',176=>'degree',177=>'plusminus',178=>'afii10055',179=>'afii10103',180=>'afii10098',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'afii10071',185=>'afii61352',186=>'afii10101',187=>'guillemotright',188=>'afii10105',189=>'afii10054',190=>'afii10102',191=>'afii10104',192=>'afii10017',193=>'afii10018',194=>'afii10019',195=>'afii10020',196=>'afii10021',197=>'afii10022',198=>'afii10024',199=>'afii10025',200=>'afii10026',201=>'afii10027',202=>'afii10028',203=>'afii10029',204=>'afii10030',205=>'afii10031',206=>'afii10032',207=>'afii10033',208=>'afii10034',209=>'afii10035',210=>'afii10036',211=>'afii10037',212=>'afii10038',213=>'afii10039',214=>'afii10040',215=>'afii10041',216=>'afii10042',217=>'afii10043',218=>'afii10044',219=>'afii10045',220=>'afii10046',221=>'afii10047',222=>'afii10048',223=>'afii10049',224=>'afii10065',225=>'afii10066',226=>'afii10067',227=>'afii10068',228=>'afii10069',229=>'afii10070',230=>'afii10072',231=>'afii10073',232=>'afii10074',233=>'afii10075',234=>'afii10076',235=>'afii10077',236=>'afii10078',237=>'afii10079',238=>'afii10080',239=>'afii10081',240=>'afii10082',241=>'afii10083',242=>'afii10084',243=>'afii10085',244=>'afii10086',245=>'afii10087',246=>'afii10088',247=>'afii10089',248=>'afii10090',249=>'afii10091',250=>'afii10092',251=>'afii10093',252=>'afii10094',253=>'afii10095',254=>'afii10096',255=>'afii10097'),// encoding map for: iso-8859-4'iso-8859-4' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'Aogonek',162=>'kgreenlandic',163=>'Rcommaaccent',164=>'currency',165=>'Itilde',166=>'Lcommaaccent',167=>'section',168=>'dieresis',169=>'Scaron',170=>'Emacron',171=>'Gcommaaccent',172=>'Tbar',173=>'hyphen',174=>'Zcaron',175=>'macron',176=>'degree',177=>'aogonek',178=>'ogonek',179=>'rcommaaccent',180=>'acute',181=>'itilde',182=>'lcommaaccent',183=>'caron',184=>'cedilla',185=>'scaron',186=>'emacron',187=>'gcommaaccent',188=>'tbar',189=>'Eng',190=>'zcaron',191=>'eng',192=>'Amacron',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Iogonek',200=>'Ccaron',201=>'Eacute',202=>'Eogonek',203=>'Edieresis',204=>'Edotaccent',205=>'Iacute',206=>'Icircumflex',207=>'Imacron',208=>'Dcroat',209=>'Ncommaaccent',210=>'Omacron',211=>'Kcommaaccent',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Uogonek',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Utilde',222=>'Umacron',223=>'germandbls',224=>'amacron',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'iogonek',232=>'ccaron',233=>'eacute',234=>'eogonek',235=>'edieresis',236=>'edotaccent',237=>'iacute',238=>'icircumflex',239=>'imacron',240=>'dcroat',241=>'ncommaaccent',242=>'omacron',243=>'kcommaaccent',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'uogonek',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'utilde',254=>'umacron',255=>'dotaccent'),// encoding map for: cp1255'cp1255' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'circumflex',137=>'perthousand',138=>'.notdef',139=>'guilsinglleft',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'tilde',153=>'trademark',154=>'.notdef',155=>'guilsinglright',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'afii57636',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'multiply',171=>'guillemotleft',172=>'logicalnot',173=>'sfthyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'middot',184=>'cedilla',185=>'onesuperior',186=>'divide',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'afii57799',193=>'afii57801',194=>'afii57800',195=>'afii57802',196=>'afii57793',197=>'afii57794',198=>'afii57795',199=>'afii57798',200=>'afii57797',201=>'afii57806',202=>'.notdef',203=>'afii57796',204=>'afii57807',205=>'afii57839',206=>'afii57645',207=>'afii57841',208=>'afii57842',209=>'afii57804',210=>'afii57803',211=>'afii57658',212=>'afii57716',213=>'afii57717',214=>'afii57718',215=>'gereshhebrew',216=>'gershayimhebrew',217=>'.notdef',218=>'.notdef',219=>'.notdef',220=>'.notdef',221=>'.notdef',222=>'.notdef',223=>'.notdef',224=>'afii57664',225=>'afii57665',226=>'afii57666',227=>'afii57667',228=>'afii57668',229=>'afii57669',230=>'afii57670',231=>'afii57671',232=>'afii57672',233=>'afii57673',234=>'afii57674',235=>'afii57675',236=>'afii57676',237=>'afii57677',238=>'afii57678',239=>'afii57679',240=>'afii57680',241=>'afii57681',242=>'afii57682',243=>'afii57683',244=>'afii57684',245=>'afii57685',246=>'afii57686',247=>'afii57687',248=>'afii57688',249=>'afii57689',250=>'afii57690',251=>'.notdef',252=>'.notdef',253=>'afii299',254=>'afii300',255=>'.notdef'),// encoding map for: iso-8859-11'iso-8859-11' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'kokaithai',162=>'khokhaithai',163=>'khokhuatthai',164=>'khokhwaithai',165=>'khokhonthai',166=>'khorakhangthai',167=>'ngonguthai',168=>'chochanthai',169=>'chochingthai',170=>'chochangthai',171=>'sosothai',172=>'chochoethai',173=>'yoyingthai',174=>'dochadathai',175=>'topatakthai',176=>'thothanthai',177=>'thonangmonthothai',178=>'thophuthaothai',179=>'nonenthai',180=>'dodekthai',181=>'totaothai',182=>'thothungthai',183=>'thothahanthai',184=>'thothongthai',185=>'nonuthai',186=>'bobaimaithai',187=>'poplathai',188=>'phophungthai',189=>'fofathai',190=>'phophanthai',191=>'fofanthai',192=>'phosamphaothai',193=>'momathai',194=>'yoyakthai',195=>'roruathai',196=>'ruthai',197=>'lolingthai',198=>'luthai',199=>'wowaenthai',200=>'sosalathai',201=>'sorusithai',202=>'sosuathai',203=>'hohipthai',204=>'lochulathai',205=>'oangthai',206=>'honokhukthai',207=>'paiyannoithai',208=>'saraathai',209=>'maihanakatthai',210=>'saraaathai',211=>'saraamthai',212=>'saraithai',213=>'saraiithai',214=>'sarauethai',215=>'saraueethai',216=>'sarauthai',217=>'sarauuthai',218=>'phinthuthai',219=>'.notdef',220=>'.notdef',221=>'.notdef',222=>'.notdef',223=>'bahtthai',224=>'saraethai',225=>'saraaethai',226=>'saraothai',227=>'saraaimaimuanthai',228=>'saraaimaimalaithai',229=>'lakkhangyaothai',230=>'maiyamokthai',231=>'maitaikhuthai',232=>'maiekthai',233=>'maithothai',234=>'maitrithai',235=>'maichattawathai',236=>'thanthakhatthai',237=>'nikhahitthai',238=>'yamakkanthai',239=>'fongmanthai',240=>'zerothai',241=>'onethai',242=>'twothai',243=>'threethai',244=>'fourthai',245=>'fivethai',246=>'sixthai',247=>'seventhai',248=>'eightthai',249=>'ninethai',250=>'angkhankhuthai',251=>'khomutthai',252=>'.notdef',253=>'.notdef',254=>'.notdef',255=>'.notdef'),// encoding map for: cp1257'cp1257' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'.notdef',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'.notdef',137=>'perthousand',138=>'.notdef',139=>'guilsinglleft',140=>'.notdef',141=>'dieresis',142=>'caron',143=>'cedilla',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'trademark',154=>'.notdef',155=>'guilsinglright',156=>'.notdef',157=>'macron',158=>'ogonek',159=>'.notdef',160=>'space',161=>'.notdef',162=>'cent',163=>'sterling',164=>'currency',165=>'.notdef',166=>'brokenbar',167=>'section',168=>'Oslash',169=>'copyright',170=>'Rcommaaccent',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'AE',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'oslash',185=>'onesuperior',186=>'rcommaaccent',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'ae',192=>'Aogonek',193=>'Iogonek',194=>'Amacron',195=>'Cacute',196=>'Adieresis',197=>'Aring',198=>'Eogonek',199=>'Emacron',200=>'Ccaron',201=>'Eacute',202=>'Zacute',203=>'Edotaccent',204=>'Gcommaaccent',205=>'Kcommaaccent',206=>'Imacron',207=>'Lcommaaccent',208=>'Scaron',209=>'Nacute',210=>'Ncommaaccent',211=>'Oacute',212=>'Omacron',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Uogonek',217=>'Lslash',218=>'Sacute',219=>'Umacron',220=>'Udieresis',221=>'Zdotaccent',222=>'Zcaron',223=>'germandbls',224=>'aogonek',225=>'iogonek',226=>'amacron',227=>'cacute',228=>'adieresis',229=>'aring',230=>'eogonek',231=>'emacron',232=>'ccaron',233=>'eacute',234=>'zacute',235=>'edotaccent',236=>'gcommaaccent',237=>'kcommaaccent',238=>'imacron',239=>'lcommaaccent',240=>'scaron',241=>'nacute',242=>'ncommaaccent',243=>'oacute',244=>'omacron',245=>'otilde',246=>'odieresis',247=>'divide',248=>'uogonek',249=>'lslash',250=>'sacute',251=>'umacron',252=>'udieresis',253=>'zdotaccent',254=>'zcaron',255=>'dotaccent'),// encoding map for: cp1258'cp1258' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'circumflex',137=>'perthousand',138=>'.notdef',139=>'guilsinglleft',140=>'OE',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'tilde',153=>'trademark',154=>'.notdef',155=>'guilsinglright',156=>'oe',157=>'.notdef',158=>'.notdef',159=>'Ydieresis',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Abreve',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'gravecomb',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Dcroat',209=>'Ntilde',210=>'hookabovecomb',211=>'Oacute',212=>'Ocircumflex',213=>'Ohorn',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Uhorn',222=>'tildecomb',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'abreve',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'acutecomb',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'dcroat',241=>'ntilde',242=>'dotbelowcomb',243=>'oacute',244=>'ocircumflex',245=>'ohorn',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'uhorn',254=>'dong',255=>'ydieresis'),// encoding map for: cp1253'cp1253' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'.notdef',137=>'perthousand',138=>'.notdef',139=>'guilsinglleft',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'trademark',154=>'.notdef',155=>'guilsinglright',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'dieresistonos',162=>'Alphatonos',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'.notdef',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'afii00208',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'tonos',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'Epsilontonos',185=>'Etatonos',186=>'Iotatonos',187=>'guillemotright',188=>'Omicrontonos',189=>'onehalf',190=>'Upsilontonos',191=>'Omegatonos',192=>'iotadieresistonos',193=>'Alpha',194=>'Beta',195=>'Gamma',196=>'Delta',197=>'Epsilon',198=>'Zeta',199=>'Eta',200=>'Theta',201=>'Iota',202=>'Kappa',203=>'Lambda',204=>'Mu',205=>'Nu',206=>'Xi',207=>'Omicron',208=>'Pi',209=>'Rho',210=>'.notdef',211=>'Sigma',212=>'Tau',213=>'Upsilon',214=>'Phi',215=>'Chi',216=>'Psi',217=>'Omega',218=>'Iotadieresis',219=>'Upsilondieresis',220=>'alphatonos',221=>'epsilontonos',222=>'etatonos',223=>'iotatonos',224=>'upsilondieresistonos',225=>'alpha',226=>'beta',227=>'gamma',228=>'delta',229=>'epsilon',230=>'zeta',231=>'eta',232=>'theta',233=>'iota',234=>'kappa',235=>'lambda',236=>'mu',237=>'nu',238=>'xi',239=>'omicron',240=>'pi',241=>'rho',242=>'sigma1',243=>'sigma',244=>'tau',245=>'upsilon',246=>'phi',247=>'chi',248=>'psi',249=>'omega',250=>'iotadieresis',251=>'upsilondieresis',252=>'omicrontonos',253=>'upsilontonos',254=>'omegatonos',255=>'.notdef'),// encoding map for: cp874'cp874' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'ellipsis',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'kokaithai',162=>'khokhaithai',163=>'khokhuatthai',164=>'khokhwaithai',165=>'khokhonthai',166=>'khorakhangthai',167=>'ngonguthai',168=>'chochanthai',169=>'chochingthai',170=>'chochangthai',171=>'sosothai',172=>'chochoethai',173=>'yoyingthai',174=>'dochadathai',175=>'topatakthai',176=>'thothanthai',177=>'thonangmonthothai',178=>'thophuthaothai',179=>'nonenthai',180=>'dodekthai',181=>'totaothai',182=>'thothungthai',183=>'thothahanthai',184=>'thothongthai',185=>'nonuthai',186=>'bobaimaithai',187=>'poplathai',188=>'phophungthai',189=>'fofathai',190=>'phophanthai',191=>'fofanthai',192=>'phosamphaothai',193=>'momathai',194=>'yoyakthai',195=>'roruathai',196=>'ruthai',197=>'lolingthai',198=>'luthai',199=>'wowaenthai',200=>'sosalathai',201=>'sorusithai',202=>'sosuathai',203=>'hohipthai',204=>'lochulathai',205=>'oangthai',206=>'honokhukthai',207=>'paiyannoithai',208=>'saraathai',209=>'maihanakatthai',210=>'saraaathai',211=>'saraamthai',212=>'saraithai',213=>'saraiithai',214=>'sarauethai',215=>'saraueethai',216=>'sarauthai',217=>'sarauuthai',218=>'phinthuthai',219=>'.notdef',220=>'.notdef',221=>'.notdef',222=>'.notdef',223=>'bahtthai',224=>'saraethai',225=>'saraaethai',226=>'saraothai',227=>'saraaimaimuanthai',228=>'saraaimaimalaithai',229=>'lakkhangyaothai',230=>'maiyamokthai',231=>'maitaikhuthai',232=>'maiekthai',233=>'maithothai',234=>'maitrithai',235=>'maichattawathai',236=>'thanthakhatthai',237=>'nikhahitthai',238=>'yamakkanthai',239=>'fongmanthai',240=>'zerothai',241=>'onethai',242=>'twothai',243=>'threethai',244=>'fourthai',245=>'fivethai',246=>'sixthai',247=>'seventhai',248=>'eightthai',249=>'ninethai',250=>'angkhankhuthai',251=>'khomutthai',252=>'.notdef',253=>'.notdef',254=>'.notdef',255=>'.notdef'),// encoding map for: iso-8859-2'iso-8859-2' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'Aogonek',162=>'breve',163=>'Lslash',164=>'currency',165=>'Lcaron',166=>'Sacute',167=>'section',168=>'dieresis',169=>'Scaron',170=>'Scedilla',171=>'Tcaron',172=>'Zacute',173=>'hyphen',174=>'Zcaron',175=>'Zdotaccent',176=>'degree',177=>'aogonek',178=>'ogonek',179=>'lslash',180=>'acute',181=>'lcaron',182=>'sacute',183=>'caron',184=>'cedilla',185=>'scaron',186=>'scedilla',187=>'tcaron',188=>'zacute',189=>'hungarumlaut',190=>'zcaron',191=>'zdotaccent',192=>'Racute',193=>'Aacute',194=>'Acircumflex',195=>'Abreve',196=>'Adieresis',197=>'Lacute',198=>'Cacute',199=>'Ccedilla',200=>'Ccaron',201=>'Eacute',202=>'Eogonek',203=>'Edieresis',204=>'Ecaron',205=>'Iacute',206=>'Icircumflex',207=>'Dcaron',208=>'Dcroat',209=>'Nacute',210=>'Ncaron',211=>'Oacute',212=>'Ocircumflex',213=>'Ohungarumlaut',214=>'Odieresis',215=>'multiply',216=>'Rcaron',217=>'Uring',218=>'Uacute',219=>'Uhungarumlaut',220=>'Udieresis',221=>'Yacute',222=>'Tcommaaccent',223=>'germandbls',224=>'racute',225=>'aacute',226=>'acircumflex',227=>'abreve',228=>'adieresis',229=>'lacute',230=>'cacute',231=>'ccedilla',232=>'ccaron',233=>'eacute',234=>'eogonek',235=>'edieresis',236=>'ecaron',237=>'iacute',238=>'icircumflex',239=>'dcaron',240=>'dcroat',241=>'nacute',242=>'ncaron',243=>'oacute',244=>'ocircumflex',245=>'ohungarumlaut',246=>'odieresis',247=>'divide',248=>'rcaron',249=>'uring',250=>'uacute',251=>'uhungarumlaut',252=>'udieresis',253=>'yacute',254=>'tcommaaccent',255=>'dotaccent'),// encoding map for: cp1250'cp1250' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'.notdef',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'.notdef',137=>'perthousand',138=>'Scaron',139=>'guilsinglleft',140=>'Sacute',141=>'Tcaron',142=>'Zcaron',143=>'Zacute',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'trademark',154=>'scaron',155=>'guilsinglright',156=>'sacute',157=>'tcaron',158=>'zcaron',159=>'zacute',160=>'space',161=>'caron',162=>'breve',163=>'Lslash',164=>'currency',165=>'Aogonek',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'Scedilla',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'Zdotaccent',176=>'degree',177=>'plusminus',178=>'ogonek',179=>'lslash',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'aogonek',186=>'scedilla',187=>'guillemotright',188=>'Lcaron',189=>'hungarumlaut',190=>'lcaron',191=>'zdotaccent',192=>'Racute',193=>'Aacute',194=>'Acircumflex',195=>'Abreve',196=>'Adieresis',197=>'Lacute',198=>'Cacute',199=>'Ccedilla',200=>'Ccaron',201=>'Eacute',202=>'Eogonek',203=>'Edieresis',204=>'Ecaron',205=>'Iacute',206=>'Icircumflex',207=>'Dcaron',208=>'Dcroat',209=>'Nacute',210=>'Ncaron',211=>'Oacute',212=>'Ocircumflex',213=>'Ohungarumlaut',214=>'Odieresis',215=>'multiply',216=>'Rcaron',217=>'Uring',218=>'Uacute',219=>'Uhungarumlaut',220=>'Udieresis',221=>'Yacute',222=>'Tcommaaccent',223=>'germandbls',224=>'racute',225=>'aacute',226=>'acircumflex',227=>'abreve',228=>'adieresis',229=>'lacute',230=>'cacute',231=>'ccedilla',232=>'ccaron',233=>'eacute',234=>'eogonek',235=>'edieresis',236=>'ecaron',237=>'iacute',238=>'icircumflex',239=>'dcaron',240=>'dcroat',241=>'nacute',242=>'ncaron',243=>'oacute',244=>'ocircumflex',245=>'ohungarumlaut',246=>'odieresis',247=>'divide',248=>'rcaron',249=>'uring',250=>'uacute',251=>'uhungarumlaut',252=>'udieresis',253=>'yacute',254=>'tcommaaccent',255=>'dotaccent'),// encoding map for: iso-8859-7'iso-8859-7' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'quoteleft',162=>'quoteright',163=>'sterling',164=>'.notdef',165=>'.notdef',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'.notdef',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'.notdef',175=>'afii00208',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'tonos',181=>'dieresistonos',182=>'Alphatonos',183=>'periodcentered',184=>'Epsilontonos',185=>'Etatonos',186=>'Iotatonos',187=>'guillemotright',188=>'Omicrontonos',189=>'onehalf',190=>'Upsilontonos',191=>'Omegatonos',192=>'iotadieresistonos',193=>'Alpha',194=>'Beta',195=>'Gamma',196=>'Delta',197=>'Epsilon',198=>'Zeta',199=>'Eta',200=>'Theta',201=>'Iota',202=>'Kappa',203=>'Lambda',204=>'Mu',205=>'Nu',206=>'Xi',207=>'Omicron',208=>'Pi',209=>'Rho',210=>'.notdef',211=>'Sigma',212=>'Tau',213=>'Upsilon',214=>'Phi',215=>'Chi',216=>'Psi',217=>'Omega',218=>'Iotadieresis',219=>'Upsilondieresis',220=>'alphatonos',221=>'epsilontonos',222=>'etatonos',223=>'iotatonos',224=>'upsilondieresistonos',225=>'alpha',226=>'beta',227=>'gamma',228=>'delta',229=>'epsilon',230=>'zeta',231=>'eta',232=>'theta',233=>'iota',234=>'kappa',235=>'lambda',236=>'mu',237=>'nu',238=>'xi',239=>'omicron',240=>'pi',241=>'rho',242=>'sigma1',243=>'sigma',244=>'tau',245=>'upsilon',246=>'phi',247=>'chi',248=>'psi',249=>'omega',250=>'iotadieresis',251=>'upsilondieresis',252=>'omicrontonos',253=>'upsilontonos',254=>'omegatonos',255=>'.notdef'),// encoding map for: iso-8859-9'iso-8859-9' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Gbreve',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Idotaccent',222=>'Scedilla',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'gbreve',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'dotlessi',254=>'scedilla',255=>'ydieresis'),// encoding map for: cp1252'cp1252' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'circumflex',137=>'perthousand',138=>'Scaron',139=>'guilsinglleft',140=>'OE',141=>'.notdef',142=>'Zcaron',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'tilde',153=>'trademark',154=>'scaron',155=>'guilsinglright',156=>'oe',157=>'.notdef',158=>'zcaron',159=>'Ydieresis',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Eth',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Yacute',222=>'Thorn',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'eth',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'yacute',254=>'thorn',255=>'ydieresis'),// encoding map for: cp1254'cp1254' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'circumflex',137=>'perthousand',138=>'Scaron',139=>'guilsinglleft',140=>'OE',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'tilde',153=>'trademark',154=>'scaron',155=>'guilsinglright',156=>'oe',157=>'.notdef',158=>'.notdef',159=>'Ydieresis',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Gbreve',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Idotaccent',222=>'Scedilla',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'gbreve',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'dotlessi',254=>'scedilla',255=>'ydieresis'),// encoding map for: iso-8859-1'iso-8859-1' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Eth',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Yacute',222=>'Thorn',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'eth',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'yacute',254=>'thorn',255=>'ydieresis'),// encoding map for: iso-8859-15'iso-8859-15' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'Euro',165=>'yen',166=>'Scaron',167=>'section',168=>'scaron',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'Zcaron',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'zcaron',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'OE',189=>'oe',190=>'Ydieresis',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Eth',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Yacute',222=>'Thorn',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'eth',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'yacute',254=>'thorn',255=>'ydieresis'),// encoding map for: iso-8859-5'iso-8859-5' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'afii10023',162=>'afii10051',163=>'afii10052',164=>'afii10053',165=>'afii10054',166=>'afii10055',167=>'afii10056',168=>'afii10057',169=>'afii10058',170=>'afii10059',171=>'afii10060',172=>'afii10061',173=>'hyphen',174=>'afii10062',175=>'afii10145',176=>'afii10017',177=>'afii10018',178=>'afii10019',179=>'afii10020',180=>'afii10021',181=>'afii10022',182=>'afii10024',183=>'afii10025',184=>'afii10026',185=>'afii10027',186=>'afii10028',187=>'afii10029',188=>'afii10030',189=>'afii10031',190=>'afii10032',191=>'afii10033',192=>'afii10034',193=>'afii10035',194=>'afii10036',195=>'afii10037',196=>'afii10038',197=>'afii10039',198=>'afii10040',199=>'afii10041',200=>'afii10042',201=>'afii10043',202=>'afii10044',203=>'afii10045',204=>'afii10046',205=>'afii10047',206=>'afii10048',207=>'afii10049',208=>'afii10065',209=>'afii10066',210=>'afii10067',211=>'afii10068',212=>'afii10069',213=>'afii10070',214=>'afii10072',215=>'afii10073',216=>'afii10074',217=>'afii10075',218=>'afii10076',219=>'afii10077',220=>'afii10078',221=>'afii10079',222=>'afii10080',223=>'afii10081',224=>'afii10082',225=>'afii10083',226=>'afii10084',227=>'afii10085',228=>'afii10086',229=>'afii10087',230=>'afii10088',231=>'afii10089',232=>'afii10090',233=>'afii10091',234=>'afii10092',235=>'afii10093',236=>'afii10094',237=>'afii10095',238=>'afii10096',239=>'afii10097',240=>'afii61352',241=>'afii10071',242=>'afii10099',243=>'afii10100',244=>'afii10101',245=>'afii10102',246=>'afii10103',247=>'afii10104',248=>'afii10105',249=>'afii10106',250=>'afii10107',251=>'afii10108',252=>'afii10109',253=>'section',254=>'afii10110',255=>'afii10193'),// encoding map for: iso-8859-5'iso-8859-5' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'afii10023',162=>'afii10051',163=>'afii10052',164=>'afii10053',165=>'afii10054',166=>'afii10055',167=>'afii10056',168=>'afii10057',169=>'afii10058',170=>'afii10059',171=>'afii10060',172=>'afii10061',173=>'hyphen',174=>'afii10062',175=>'afii10145',176=>'afii10017',177=>'afii10018',178=>'afii10019',179=>'afii10020',180=>'afii10021',181=>'afii10022',182=>'afii10024',183=>'afii10025',184=>'afii10026',185=>'afii10027',186=>'afii10028',187=>'afii10029',188=>'afii10030',189=>'afii10031',190=>'afii10032',191=>'afii10033',192=>'afii10034',193=>'afii10035',194=>'afii10036',195=>'afii10037',196=>'afii10038',197=>'afii10039',198=>'afii10040',199=>'afii10041',200=>'afii10042',201=>'afii10043',202=>'afii10044',203=>'afii10045',204=>'afii10046',205=>'afii10047',206=>'afii10048',207=>'afii10049',208=>'afii10065',209=>'afii10066',210=>'afii10067',211=>'afii10068',212=>'afii10069',213=>'afii10070',214=>'afii10072',215=>'afii10073',216=>'afii10074',217=>'afii10075',218=>'afii10076',219=>'afii10077',220=>'afii10078',221=>'afii10079',222=>'afii10080',223=>'afii10081',224=>'afii10082',225=>'afii10083',226=>'afii10084',227=>'afii10085',228=>'afii10086',229=>'afii10087',230=>'afii10088',231=>'afii10089',232=>'afii10090',233=>'afii10091',234=>'afii10092',235=>'afii10093',236=>'afii10094',237=>'afii10095',238=>'afii10096',239=>'afii10097',240=>'afii61352',241=>'afii10071',242=>'afii10099',243=>'afii10100',244=>'afii10101',245=>'afii10102',246=>'afii10103',247=>'afii10104',248=>'afii10105',249=>'afii10106',250=>'afii10107',251=>'afii10108',252=>'afii10109',253=>'section',254=>'afii10110',255=>'afii10193'),// encoding map for: koi8-r'koi8-r' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'SF100000',129=>'SF110000',130=>'SF010000',131=>'SF030000',132=>'SF020000',133=>'SF040000',134=>'SF080000',135=>'SF090000',136=>'SF060000',137=>'SF070000',138=>'SF050000',139=>'upblock',140=>'dnblock',141=>'block',142=>'lfblock',143=>'rtblock',144=>'ltshade',145=>'shade',146=>'dkshade',147=>'integraltp',148=>'filledbox',149=>'periodcentered',150=>'radical',151=>'approxequal',152=>'lessequal',153=>'greaterequal',154=>'space',155=>'integralbt',156=>'degree',157=>'twosuperior',158=>'periodcentered',159=>'divide',160=>'SF430000',161=>'SF240000',162=>'SF510000',163=>'afii10071',164=>'SF520000',165=>'SF390000',166=>'SF220000',167=>'SF210000',168=>'SF250000',169=>'SF500000',170=>'SF490000',171=>'SF380000',172=>'SF280000',173=>'SF270000',174=>'SF260000',175=>'SF360000',176=>'SF370000',177=>'SF420000',178=>'SF190000',179=>'afii10023',180=>'SF200000',181=>'SF230000',182=>'SF470000',183=>'SF480000',184=>'SF410000',185=>'SF450000',186=>'SF460000',187=>'SF400000',188=>'SF540000',189=>'SF530000',190=>'SF440000',191=>'copyright',192=>'afii10096',193=>'afii10065',194=>'afii10066',195=>'afii10088',196=>'afii10069',197=>'afii10070',198=>'afii10086',199=>'afii10068',200=>'afii10087',201=>'afii10074',202=>'afii10075',203=>'afii10076',204=>'afii10077',205=>'afii10078',206=>'afii10079',207=>'afii10080',208=>'afii10081',209=>'afii10097',210=>'afii10082',211=>'afii10083',212=>'afii10084',213=>'afii10085',214=>'afii10072',215=>'afii10067',216=>'afii10094',217=>'afii10093',218=>'afii10073',219=>'afii10090',220=>'afii10095',221=>'afii10091',222=>'afii10089',223=>'afii10092',224=>'afii10048',225=>'afii10017',226=>'afii10018',227=>'afii10040',228=>'afii10021',229=>'afii10022',230=>'afii10038',231=>'afii10020',232=>'afii10039',233=>'afii10026',234=>'afii10027',235=>'afii10028',236=>'afii10029',237=>'afii10030',238=>'afii10031',239=>'afii10032',240=>'afii10033',241=>'afii10049',242=>'afii10034',243=>'afii10035',244=>'afii10036',245=>'afii10037',246=>'afii10024',247=>'afii10019',248=>'afii10046',249=>'afii10045',250=>'afii10025',251=>'afii10042',252=>'afii10047',253=>'afii10043',254=>'afii10041',255=>'afii10044'),// encoding map for: koi8-r'koi8-r' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'SF100000',129=>'SF110000',130=>'SF010000',131=>'SF030000',132=>'SF020000',133=>'SF040000',134=>'SF080000',135=>'SF090000',136=>'SF060000',137=>'SF070000',138=>'SF050000',139=>'upblock',140=>'dnblock',141=>'block',142=>'lfblock',143=>'rtblock',144=>'ltshade',145=>'shade',146=>'dkshade',147=>'integraltp',148=>'filledbox',149=>'periodcentered',150=>'radical',151=>'approxequal',152=>'lessequal',153=>'greaterequal',154=>'space',155=>'integralbt',156=>'degree',157=>'twosuperior',158=>'periodcentered',159=>'divide',160=>'SF430000',161=>'SF240000',162=>'SF510000',163=>'afii10071',164=>'SF520000',165=>'SF390000',166=>'SF220000',167=>'SF210000',168=>'SF250000',169=>'SF500000',170=>'SF490000',171=>'SF380000',172=>'SF280000',173=>'SF270000',174=>'SF260000',175=>'SF360000',176=>'SF370000',177=>'SF420000',178=>'SF190000',179=>'afii10023',180=>'SF200000',181=>'SF230000',182=>'SF470000',183=>'SF480000',184=>'SF410000',185=>'SF450000',186=>'SF460000',187=>'SF400000',188=>'SF540000',189=>'SF530000',190=>'SF440000',191=>'copyright',192=>'afii10096',193=>'afii10065',194=>'afii10066',195=>'afii10088',196=>'afii10069',197=>'afii10070',198=>'afii10086',199=>'afii10068',200=>'afii10087',201=>'afii10074',202=>'afii10075',203=>'afii10076',204=>'afii10077',205=>'afii10078',206=>'afii10079',207=>'afii10080',208=>'afii10081',209=>'afii10097',210=>'afii10082',211=>'afii10083',212=>'afii10084',213=>'afii10085',214=>'afii10072',215=>'afii10067',216=>'afii10094',217=>'afii10093',218=>'afii10073',219=>'afii10090',220=>'afii10095',221=>'afii10091',222=>'afii10089',223=>'afii10092',224=>'afii10048',225=>'afii10017',226=>'afii10018',227=>'afii10040',228=>'afii10021',229=>'afii10022',230=>'afii10038',231=>'afii10020',232=>'afii10039',233=>'afii10026',234=>'afii10027',235=>'afii10028',236=>'afii10029',237=>'afii10030',238=>'afii10031',239=>'afii10032',240=>'afii10033',241=>'afii10049',242=>'afii10034',243=>'afii10035',244=>'afii10036',245=>'afii10037',246=>'afii10024',247=>'afii10019',248=>'afii10046',249=>'afii10045',250=>'afii10025',251=>'afii10042',252=>'afii10047',253=>'afii10043',254=>'afii10041',255=>'afii10044'),// encoding map for: iso-8859-16'iso-8859-16' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'Aogonek',162=>'aogonek',163=>'Lslash',164=>'Euro',165=>'quotedblbase',166=>'Scaron',167=>'section',168=>'scaron',169=>'copyright',170=>'Scommaaccent',171=>'guillemotleft',172=>'Zacute',173=>'hyphen',174=>'zacute',175=>'Zdotaccent',176=>'degree',177=>'plusminus',178=>'Ccaron',179=>'lslash',180=>'Zcaron',181=>'quotedblright',182=>'paragraph',183=>'periodcentered',184=>'zcaron',185=>'ccaron',186=>'scommaaccent',187=>'guillemotright',188=>'OE',189=>'oe',190=>'Ydieresis',191=>'zdotaccent',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Abreve',196=>'Adieresis',197=>'Cacute',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Dcroat',209=>'Nacute',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Ohungarumlaut',214=>'Odieresis',215=>'Sacute',216=>'Uhungarumlaut',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Eogonek',222=>'Tcommaaccent',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'abreve',228=>'adieresis',229=>'cacute',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'dcroat',241=>'nacute',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'ohungarumlaut',246=>'odieresis',247=>'sacute',248=>'uhungarumlaut',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'eogonek',254=>'tcommaaccent',255=>'ydieresis'),// encoding map for: koi8-u'koi8-u' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'SF100000',129=>'SF110000',130=>'SF010000',131=>'SF030000',132=>'SF020000',133=>'SF040000',134=>'SF080000',135=>'SF090000',136=>'SF060000',137=>'SF070000',138=>'SF050000',139=>'upblock',140=>'dnblock',141=>'block',142=>'lfblock',143=>'rtblock',144=>'ltshade',145=>'shade',146=>'dkshade',147=>'integraltp',148=>'filledbox',149=>'bullet',150=>'radical',151=>'approxequal',152=>'lessequal',153=>'greaterequal',154=>'space',155=>'integralbt',156=>'degree',157=>'twosuperior',158=>'periodcentered',159=>'divide',160=>'SF430000',161=>'SF240000',162=>'SF510000',163=>'afii10071',164=>'afii10101',165=>'SF390000',166=>'afii10103',167=>'afii10104',168=>'SF250000',169=>'SF500000',170=>'SF490000',171=>'SF380000',172=>'SF280000',173=>'afii10098',174=>'SF260000',175=>'SF360000',176=>'SF370000',177=>'SF420000',178=>'SF190000',179=>'afii10023',180=>'afii10053',181=>'SF230000',182=>'afii10055',183=>'afii10056',184=>'SF410000',185=>'SF450000',186=>'SF460000',187=>'SF400000',188=>'SF540000',189=>'afii10050',190=>'SF440000',191=>'copyright',192=>'afii10096',193=>'afii10065',194=>'afii10066',195=>'afii10088',196=>'afii10069',197=>'afii10070',198=>'afii10086',199=>'afii10068',200=>'afii10087',201=>'afii10074',202=>'afii10075',203=>'afii10076',204=>'afii10077',205=>'afii10078',206=>'afii10079',207=>'afii10080',208=>'afii10081',209=>'afii10097',210=>'afii10082',211=>'afii10083',212=>'afii10084',213=>'afii10085',214=>'afii10072',215=>'afii10067',216=>'afii10094',217=>'afii10093',218=>'afii10073',219=>'afii10090',220=>'afii10095',221=>'afii10091',222=>'afii10089',223=>'afii10092',224=>'afii10048',225=>'afii10017',226=>'afii10018',227=>'afii10040',228=>'afii10021',229=>'afii10022',230=>'afii10038',231=>'afii10020',232=>'afii10039',233=>'afii10026',234=>'afii10027',235=>'afii10028',236=>'afii10029',237=>'afii10030',238=>'afii10031',239=>'afii10032',240=>'afii10033',241=>'afii10049',242=>'afii10034',243=>'afii10035',244=>'afii10036',245=>'afii10037',246=>'afii10024',247=>'afii10019',248=>'afii10046',249=>'afii10045',250=>'afii10025',251=>'afii10042',252=>'afii10047',253=>'afii10043',254=>'afii10041',255=>'afii10044'),// encoding map for: symbol'symbol' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'universal',35=>'numbersign',36=>'existential',37=>'percent',38=>'ampersand',39=>'suchthat',40=>'parenleft',41=>'parenright',42=>'asteriskmath',43=>'plus',44=>'comma',45=>'minus',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'congruent',65=>'Alpha',66=>'Beta',67=>'Chi',68=>'Delta',69=>'Epsilon',70=>'Phi',71=>'Gamma',72=>'Eta',73=>'Iota',74=>'theta1',75=>'Kappa',76=>'Lambda',77=>'Mu',78=>'Nu',79=>'Omicron',80=>'Pi',81=>'Theta',82=>'Rho',83=>'Sigma',84=>'Tau',85=>'Upsilon',86=>'sigma1',87=>'Omega',88=>'Xi',89=>'Psi',90=>'Zeta',91=>'bracketleft',92=>'therefore',93=>'bracketright',94=>'perpendicular',95=>'underscore',96=>'radicalex',97=>'alpha',98=>'beta',99=>'chi',100=>'delta',101=>'epsilon',102=>'phi',103=>'gamma',104=>'eta',105=>'iota',106=>'phi1',107=>'kappa',108=>'lambda',109=>'mu',110=>'nu',111=>'omicron',112=>'pi',113=>'theta',114=>'rho',115=>'sigma',116=>'tau',117=>'upsilon',118=>'omega1',119=>'omega',120=>'xi',121=>'psi',122=>'zeta',123=>'braceleft',124=>'bar',125=>'braceright',126=>'similar',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'Euro',161=>'Upsilon1',162=>'minute',163=>'lessequal',164=>'fraction',165=>'infinity',166=>'florin',167=>'club',168=>'diamond',169=>'heart',170=>'spade',171=>'arrowboth',172=>'arrowleft',173=>'arrowup',174=>'arrowright',175=>'arrowdown',176=>'degree',177=>'plusminus',178=>'second',179=>'greaterequal',180=>'multiply',181=>'proportional',182=>'partialdiff',183=>'bullet',184=>'divide',185=>'notequal',186=>'equivalence',187=>'approxequal',188=>'ellipsis',189=>'arrowvertex',190=>'arrowhorizex',191=>'carriagereturn',192=>'aleph',193=>'Ifraktur',194=>'Rfraktur',195=>'weierstrass',196=>'circlemultiply',197=>'circleplus',198=>'emptyset',199=>'intersection',200=>'union',201=>'propersuperset',202=>'reflexsuperset',203=>'notsubset',204=>'propersubset',205=>'reflexsubset',206=>'element',207=>'notelement',208=>'angle',209=>'gradient',210=>'registerserif',211=>'copyrightserif',212=>'trademarkserif',213=>'product',214=>'radical',215=>'dotmath',216=>'logicalnot',217=>'logicaland',218=>'logicalor',219=>'arrowdblboth',220=>'arrowdblleft',221=>'arrowdblup',222=>'arrowdblright',223=>'arrowdbldown',224=>'lozenge',225=>'angleleft',226=>'registersans',227=>'copyrightsans',228=>'trademarksans',229=>'summation',230=>'parenlefttp',231=>'parenleftex',232=>'parenleftbt',233=>'bracketlefttp',234=>'bracketleftex',235=>'bracketleftbt',236=>'bracelefttp',237=>'braceleftmid',238=>'braceleftbt',239=>'braceex',240=>'.notdef',241=>'angleright',242=>'integral',243=>'integraltp',244=>'integralex',245=>'integralbt',246=>'parenrighttp',247=>'parenrightex',248=>'parenrightbt',249=>'bracketrighttp',250=>'bracketrightex',251=>'bracketrightbt',252=>'bracerighttp',253=>'bracerightmid',254=>'bracerightbt',255=>'.notdef',1226=>'registered',1227=>'copyright',1228=>'trademark')); // end of encoding maps} // --- END OF CLASS ---//============================================================+// END OF FILE//============================================================+
<?php/** * handles creation of the GIS visualizations. * * @package PhpMyAdmin *//** * do not import request variable into global scope * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'openlayers/OpenLayers.js';$GLOBALS['js_include'][] = 'jquery/jquery.svg.js';$GLOBALS['js_include'][] = 'jquery/jquery.mousewheel.js';$GLOBALS['js_include'][] = 'jquery/jquery.event.drag-2.0.min.js';$GLOBALS['js_include'][] = 'tbl_gis_visualization.js';$GLOBALS['js_include'][] = 'OpenStreetMap.js';// Allows for resending headers even after sending some dataob_start();// Runs common workrequire_once './libraries/db_common.inc.php';$url_params['goto'] = $cfg['DefaultTabDatabase'];$url_params['back'] = 'sql.php';// Import visualization functionsrequire_once './libraries/gis_visualization.lib.php';// Execute the query and return the result$result = PMA_DBI_try_query($sql_query);// Get the meta data of results$meta = PMA_DBI_get_fields_meta($result);// Find the candidate fields for label column and spatial column$labelCandidates = array(); $spatialCandidates = array();foreach ($meta as $column_meta) {    if ($column_meta->type == 'geometry') {        $spatialCandidates[] = $column_meta->name;    } else {        $labelCandidates[] = $column_meta->name;    }}// Get settings if any posted$visualizationSettings = array();if (PMA_isValid($_REQUEST['visualizationSettings'], 'array')) {    $visualizationSettings = $_REQUEST['visualizationSettings'];}if (! isset($visualizationSettings['labelColumn']) && isset($labelCandidates[0])) {    $visualizationSettings['labelColumn'] = '';}// If spatial column is not set, use first geometric colum as spatial columnif (! isset($visualizationSettings['spatialColumn'])) {    $visualizationSettings['spatialColumn'] = $spatialCandidates[0];}// Convert geometric columns from bytes to text.$modified_query = PMA_GIS_modifyQuery($sql_query, $visualizationSettings);$modified_result = PMA_DBI_try_query($modified_query);$data = array();while ($row = PMA_DBI_fetch_assoc($modified_result)) {    $data[] = $row;}// If all the rows contain SRID, use OpenStreetMaps on the initial loading.if (! isset($_REQUEST['displayVisualization'])) {    $visualizationSettings['choice'] = 'useBaseLayer';    foreach ($data as $row) {        if ($row['srid'] == 0) {            unset($visualizationSettings['choice']);            break;        }    }}if (isset($_REQUEST['saveToFile'])) {    $file_name = $_REQUEST['fileName'];    if ($file_name == '') {        $file_name = $visualizationSettings['spatialColumn'];    }    $save_format = $_REQUEST['fileFormat'];    PMA_GIS_saveToFile($data, $visualizationSettings, $save_format, $file_name);    exit();}$svg_support = (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER <= 8) ? false : true;$format = $svg_support ? 'svg' : 'png';// get the chart and settings after chart generation$visualization = PMA_GIS_visualizationResults($data, $visualizationSettings, $format);/** * Displays the page */?><!-- Display visulalization options --><div id="div_view_options"><form method="post" action="tbl_gis_visualization.php"><?php echo PMA_generate_common_hidden_inputs($url_params); ?><fieldset>    <legend><?php echo __('Display GIS Visualization'); ?></legend>    <div id="placeholder" style="width:<?php echo($visualizationSettings['width']); ?>px;height:<?php echo($visualizationSettings['height']); ?>px;">        <?php echo $visualization; ?>    </div>    <div id="openlayersmap"></div>    <input type="hidden" id="pmaThemeImage" value="<?php echo($GLOBALS['pmaThemeImage']); ?>" />    <script language="javascript" type="text/javascript">        function drawOpenLayers() {            <?php echo (PMA_GIS_visualizationResults($data, $visualizationSettings, 'ol')); ?>        }    </script>    <input type="hidden" name="sql_query" id="sql_query" value="<?php echo htmlspecialchars($sql_query); ?>" />    <table class="gis_table">    <tr><td><label for="width"><?php echo __("Width"); ?></label></td>        <td><input type="text" name="visualizationSettings[width]" id="width" value="<?php echo (isset($visualizationSettings['width']) ? htmlspecialchars($visualizationSettings['width']) : ''); ?>" /></td>    </tr>    <tr><td><label for="height"><?php echo __("Height"); ?></label></td>        <td><input type="text" name="visualizationSettings[height]" id="height" value="<?php echo (isset($visualizationSettings['height']) ? htmlspecialchars($visualizationSettings['height']) : ''); ?>" /></td>    </tr>    <tr><td><label for="labelColumn"><?php echo __("Label column"); ?></label></td>        <td><select name="visualizationSettings[labelColumn]" id="labelColumn">            <option value=""><?php echo __("-- None --"); ?></option>        <?php            foreach ($labelCandidates as $labelCandidate) {                echo('<option value="' . htmlspecialchars($labelCandidate) . '"');                if ($labelCandidate == $visualizationSettings['labelColumn']) {                    echo(' selected="selected"');                }                echo('>' . htmlspecialchars($labelCandidate) . '</option>');            }        ?>        </select></td>    </tr>    <tr><td><label for="spatial Column"><?php echo __("Spatial column"); ?></label></td>        <td><select name="visualizationSettings[spatialColumn]" id="spatialColumn">        <?php            foreach ($spatialCandidates as $spatialCandidate) {                echo('<option value="' . htmlspecialchars($spatialCandidate) . '"');                if ($spatialCandidate == $visualizationSettings['spatialColumn']) {                    echo(' selected="selected"');                }                echo('>' . htmlspecialchars($spatialCandidate) . '</option>');            }        ?>        </select></td>    </tr>    <tr><td class="choice" colspan="2">        <input type="checkbox" name="visualizationSettings[choice]" id="choice" value="useBaseLayer"        <?php            if (isset($visualizationSettings['choice'])) {                echo(' checked="checked"');            }        ?>        />        <label for="choice"><?php echo __("Use OpenStreetMaps as Base Layer"); ?></label>    </td></tr>    <tr><td></td>        <td class="button"><input type="submit" name="displayVisualization" value="<?php echo __('Redraw'); ?>" /></td>    </tr>    <tr><td class="save"><?php echo __("Save to file"); ?></td></tr>    <tr><td><label for="fileName"><?php echo __("File name"); ?></label></td>        <td><input type="text" name="fileName" id="fileName" /></td>    </tr>    <tr><td><label for="fileFormat"><?php echo __("Format"); ?></label></td>        <td><select name="fileFormat" id="fileFormat">            <option value="png">PNG</option>            <option value="pdf">PDF</option>            <?php            if ($svg_support) {                echo ('<option value="svg" selected="selected">SVG</option>');            }            ?>        </select></td>    </tr>    <tr><td></td>        <td class="button"><input type="submit" name="saveToFile" value="<?php echo __('Save'); ?>" /></td>    </tr>    </table></fieldset></form></div><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This file generates the CSS code for the sprites of a theme * * @package PhpMyAdmin-theme */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON')) {    exit();}$bg = $_SESSION['PMA_Theme']->getImgPath() . 'sprites.png';?>/* Icon sprites */.icon, .footnotemarker {    margin:              0 0.3em;    padding:             0 !important;    width:               16px;    height:              16px;    background-image:    url('<?php echo $bg; ?>') !important;    background-repeat:   no-repeat !important;    background-position: top left !important;}<?php    /* Check if there is a valid data file for sprites */    if (is_readable($_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php')) {        include_once $_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php';        $sprites = array();        if (function_exists('PMA_sprites')) {            $sprites = PMA_sprites();        }        $template = ".ic_%s { background-position: 0 -%upx !important;%s%s }\n";        foreach ($sprites as $name => $data) {            // generate the CSS code for each icon            $width = '';            $height = '';            // if either the height or width of an icon is 16px,            // then it's pointless to set this as a parameter,            //since it will be inherited from the "icon" class            if ($data['width'] != 16) {                $width = " width: " . $data['width'] . "px;";            }            if ($data['height'] != 16) {                $height = " height: " . $data['height'] . "px;";            }            printf(                $template,                $name,                ($data['position'] * 16),                $width,                $height            );        }        // Here we map some of the classes that we        // defined above to other CSS selectors.        // The indexes of the array correspond to        // already defined classes and the values        // are the selectors that we want to map to.        $elements = array(            's_sortable' => 'img.sortableIcon',            's_asc'      => 'th.headerSortUp img.sortableIcon',            's_desc'     => 'th.headerSortDown img.sortableIcon'        );        $template = "%s { background-position: 0 -%upx; "                  . "height: %upx; width: %upx; }\n";        foreach ($elements as $key => $value) {            if (isset($sprites[$key])) { // If the CSS class has been defined                printf(                    $template,                    $value,                    ($sprites[$key]['position'] * 16),                    $sprites[$key]['height'],                    $sprites[$key]['width']                );            }        }    }?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles creation of the chart * * @package PhpMyAdmin *//** * do not import request variable into global scope * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'tbl_chart.js';$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';/* < IE 9 doesn't support canvas natively */if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {    $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';}$GLOBALS['js_include'][] = 'canvg/canvg.js';/** * Runs common work */if (strlen($GLOBALS['table'])) {    $url_params['goto'] = $cfg['DefaultTabTable'];    $url_params['back'] = 'tbl_sql.php';    include './libraries/tbl_common.php';    include './libraries/tbl_info.inc.php';    include './libraries/tbl_links.inc.php';} elseif (strlen($GLOBALS['db'])) {    $url_params['goto'] = $cfg['DefaultTabDatabase'];    $url_params['back'] = 'sql.php';    include './libraries/db_common.inc.php';    include './libraries/db_info.inc.php';} else {    $url_params['goto'] = $cfg['DefaultTabServer'];    $url_params['back'] = 'sql.php';    include './libraries/server_common.inc.php';    include './libraries/server_links.inc.php';}/* * Execute the query and return the result */$data = array();$result = PMA_DBI_try_query($sql_query);while ($row = PMA_DBI_fetch_assoc($result)) {    $data[] = $row;}// get settings if any posted$chartSettings = array();if (PMA_isValid($_REQUEST['chartSettings'], 'array')) {    $chartSettings = $_REQUEST['chartSettings'];}$url_params['db'] = $GLOBALS['db'];$url_params['reload'] = 1;/** * Displays the page */// pma_token/url_query needed for chart export?><script type="text/javascript">pma_token = '<?php echo $_SESSION[' PMA_token ']; ?>';url_query = '<?php echo $url_query;?>';</script><!-- Display Chart options --><div id="div_view_options"><form method="post" action="tbl_chart.php"><?php echo PMA_generate_common_hidden_inputs($url_params); ?><fieldset>    <legend><?php echo __('Display chart'); ?></legend>    <div style="float:left;">        <input type="radio" name="chartType" value="bar" id="radio_bar" />        <label for ="radio_bar"><?php echo _pgettext('Chart type', 'Bar'); ?></label>        <input type="radio" name="chartType" value="column" id="radio_column" />        <label for ="radio_column"><?php echo _pgettext('Chart type', 'Column'); ?></label>        <input type="radio" name="chartType" value="line" id="radio_line" checked="checked" />        <label for ="radio_line"><?php echo _pgettext('Chart type', 'Line'); ?></label>        <input type="radio" name="chartType" value="spline" id="radio_spline" />        <label for ="radio_spline"><?php echo _pgettext('Chart type', 'Spline'); ?></label>        <input type="radio" name="chartType" value="pie" id="radio_pie" />        <label for ="radio_pie"><?php echo _pgettext('Chart type', 'Pie'); ?></label>        <span class="barStacked" style="display:none;">        <input type="checkbox" name="barStacked" value="1" id="checkbox_barStacked" />        <label for ="checkbox_barStacked"><?php echo __('Stacked'); ?></label>        </span>        <br>        <input type="text" name="chartTitle" value="<?php echo __('Chart title'); ?>">        <?php        $keys = array_keys($data[0]);        $yaxis = -1;        if (count($keys) > 1) { ?>            <br />            <label for="select_chartXAxis"><?php echo __('X-Axis:'); ?></label>            <select name="chartXAxis" id="select_chartXAxis">            <?php                        foreach ($keys as $idx => $key) {                if ($yaxis == -1 && (($idx == count($data[0]) - 1) || preg_match("/(date|time)/i", $key))) {                    echo '<option value="' . htmlspecialchars($idx) . '" selected>' . htmlspecialchars($key) . '</option>';                    $yaxis=$idx;                } else {                    echo '<option value="' . htmlspecialchars($idx) . '">' . htmlspecialchars($key) . '</option>';                }            }                        ?>        </select><br />        <label for="select_chartSeries"><?php echo __('Series:'); ?></label>        <select name="chartSeries" id="select_chartSeries">            <option value="columns"><?php echo __('The remaining columns'); ?></option>            <?php            foreach ($keys as $idx => $key) {                echo '<option>' . htmlspecialchars($key) . '</option>';            }        ?>        </select>        <?php        }        ?>            </div>    <div style="float:left; padding-left:40px;">        <label for="xaxis_label"><?php echo __('X-Axis label:'); ?></label>        <input style="margin-top:0;" type="text" name="xaxis_label" id="xaxis_label"            value="<?php echo ($yaxis == -1) ? __('X Values') : htmlspecialchars($keys[$yaxis]); ?>" /><br />        <label for="yaxis_label"><?php echo __('Y-Axis label:'); ?></label>        <input type="text" name="yaxis_label" id="yaxis_label" value="<?php echo __('Y Values'); ?>" />    </div>    <p style="clear:both;">&nbsp;</p>    <div id="resizer" style="width:600px; height:400px;">        <div id="inner-resizer">            <div id="querychart" style="display:none;"><?php$sanitized_data = array();foreach ($data as $data_row_number => $data_row) {    $tmp_row = array();    foreach ($data_row as $data_column => $data_value) {        $tmp_row[htmlspecialchars($data_column)] = htmlspecialchars($data_value);    }    $sanitized_data[] = $tmp_row;} echo json_encode($sanitized_data); unset($sanitized_data);?>            </div>        </div>    </div></fieldset></form></div><?php/** * Displays the footer */require_once './libraries/footer.inc.php';?>
<?php/** * Server create and edit view * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/form_processing.lib.php';require './libraries/config/setup.forms.php';$mode = filter_input(INPUT_GET, 'mode');$id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);$cf = ConfigFile::getInstance();$server_exists = !empty($id) && $cf->get("Servers/$id") !== null;if ($mode == 'edit' && $server_exists) {    $page_title = __('Edit server')        . ' ' . $id . ' <small>(' . htmlspecialchars($cf->getServerDSN($id)) . ')</small>';} elseif ($mode == 'remove' && $server_exists) {    $cf->removeServer($id);    header('Location: index.php');    exit;} elseif ($mode == 'revert' && $server_exists) {    // handled by process_formset()} else {    $page_title = __('Add a new server');    $id = 0;}if (isset($page_title)) {    echo '<h2>' . $page_title . '</h2>';}$form_display = new FormDisplay();foreach ($forms['Servers'] as $form_name => $form) {    $form_display->registerForm($form_name, $form, $id);}process_formset($form_display);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Generic plugin interface. * * @package PhpMyAdmin *//** * array PMA_getPlugins(string $plugins_dir, mixed $plugin_param) * * Reads all plugin information from directory $plugins_dir. * * @param string  $plugins_dir    directrory with plugins * @param mixed   $plugin_param   parameter to plugin by which they can decide whether they can work * @return  array                   list of plugins */function PMA_getPlugins($plugins_dir, $plugin_param){    /* Scan for plugins */    $plugin_list = array();    if ($handle = @opendir($plugins_dir)) {        while ($file = @readdir($handle)) {            // In some situations, Mac OS creates a new file for each file            // (for example ._csv.php) so the following regexp            // matches a file which does not start with a dot but ends            // with ".php"            if (is_file($plugins_dir . $file) && preg_match('@^[^\.](.)*\.php$@i', $file)) {                include $plugins_dir . $file;            }        }    }    ksort($plugin_list);    return $plugin_list;}/** * string PMA_getString(string $name) * * returns locale string for $name or $name if no locale is found * * @param string  $name   for local string * @return  string          locale string for $name */function PMA_getString($name){    return isset($GLOBALS[$name]) ? $GLOBALS[$name] : $name;}/** * string PMA_pluginCheckboxCheck(string $section, string $opt) * * returns html input tag option 'checked' if plugin $opt should be set by config or request * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @return  string              hmtl input tag option 'checked' */function PMA_pluginCheckboxCheck($section, $opt){    // If the form is being repopulated using $_GET data, that is priority    if (isset($_GET[$opt]) || ! isset($_GET['repopulate']) && ((isset($GLOBALS['timeout_passed']) && $GLOBALS['timeout_passed'] && isset($_REQUEST[$opt])) ||        (isset($GLOBALS['cfg'][$section][$opt]) && $GLOBALS['cfg'][$section][$opt]))) {        return ' checked="checked"';    }    return '';}/** * string PMA_pluginGetDefault(string $section, string $opt) * * returns default value for option $opt * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @return  string              default value for option $opt */function PMA_pluginGetDefault($section, $opt){    if (isset($_GET[$opt])) { // If the form is being repopulated using $_GET data, that is priority        return htmlspecialchars($_GET[$opt]);    } elseif (isset($GLOBALS['timeout_passed']) && $GLOBALS['timeout_passed'] && isset($_REQUEST[$opt])) {        return htmlspecialchars($_REQUEST[$opt]);    } elseif (isset($GLOBALS['cfg'][$section][$opt])) {        $matches = array();        /* Possibly replace localised texts */        if (preg_match_all('/(str[A-Z][A-Za-z0-9]*)/', $GLOBALS['cfg'][$section][$opt], $matches)) {            $val = $GLOBALS['cfg'][$section][$opt];            foreach ($matches[0] as $match) {                if (isset($GLOBALS[$match])) {                    $val = str_replace($match, $GLOBALS[$match], $val);                }            }            return htmlspecialchars($val);        } else {            return htmlspecialchars($GLOBALS['cfg'][$section][$opt]);        }    }    return '';}/** * string PMA_pluginIsActive(string $section, string $opt, string $val) * * returns html input tag option 'checked' if option $opt should be set by config or request * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @param string  $val        value of option to check against * @return  string              html input tag option 'checked' */function PMA_pluginIsActive($section, $opt, $val){    if (! empty($GLOBALS['timeout_passed']) && isset($_REQUEST[$opt])) {        if ($_REQUEST[$opt] == $val) {            return ' checked="checked"';        }    } elseif (isset($GLOBALS['cfg'][$section][$opt]) &&  $GLOBALS['cfg'][$section][$opt] == $val) {        return ' checked="checked"';    }    return '';}/** * string PMA_pluginGetChoice(string $section, string $name, array &$list, string $cfgname) * * returns html select form element for plugin choice * and hidden fields denoting whether each plugin must be exported as a file * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $name       name of select element * @param array   &$list      array with plugin configuration defined in plugin file * @param string  $cfgname    name of config value, if none same as $name * @return  string              html select tag */function PMA_pluginGetChoice($section, $name, &$list, $cfgname = null){    if (! isset($cfgname)) {        $cfgname = $name;    }    $ret = '<select id="plugins" name="' . $name . '">';    $default = PMA_pluginGetDefault($section, $cfgname);    foreach ($list as $plugin_name => $val) {        $ret .= '<option';         // If the form is being repopulated using $_GET data, that is priority        if (isset($_GET[$name]) && $plugin_name == $_GET[$name] || ! isset($_GET[$name]) && $plugin_name == $default) {            $ret .= ' selected="selected"';        }         $ret .= ' value="' . $plugin_name . '">' . PMA_getString($val['text']) . '</option>' . "\n";    }    $ret .= '</select>' . "\n";    // Whether each plugin has to be saved as a file    foreach ($list as $plugin_name => $val) {        $ret .= '<input type="hidden" id="force_file_' . $plugin_name . '" value="';        if (isset($val['force_file'])) {            $ret .= 'true';        } else {            $ret .= 'false';        }        $ret .= '" />'. "\n";    }    return $ret;}/** * string PMA_pluginGetOneOption(string $section, string $plugin_name, string $id, array &$opt) * * returns single option in a list element * * @param string  $section        name of config section in *                                  $GLOBALS['cfg'][$section] for plugin * @param string  $plugin_name    unique plugin name * @param string  $id             option id * @param array   &$opt           plugin option details * @return  string                  table row with option */function PMA_pluginGetOneOption($section, $plugin_name, $id, &$opt){    $ret = "\n";    if ($opt['type'] == 'bool') {        $ret .= '<li>' . "\n";        $ret .= '<input type="checkbox" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="something" id="checkbox_' . $plugin_name . '_' . $opt['name'] . '"'            . ' ' . PMA_pluginCheckboxCheck($section, $plugin_name . '_' . $opt['name']);        if (isset($opt['force'])) {            /* Same code is also few lines lower, update both if needed */            $ret .= ' onclick="if (!this.checked &amp;&amp; '                . '(!document.getElementById(\'checkbox_' . $plugin_name . '_' .$opt['force'] . '\') '                . '|| !document.getElementById(\'checkbox_' . $plugin_name . '_' .$opt['force'] . '\').checked)) '                . 'return false; else return true;"';        }        $ret .= ' />';        $ret .= '<label for="checkbox_' . $plugin_name . '_' . $opt['name'] . '">'            . PMA_getString($opt['text']) . '</label>';    } elseif ($opt['type'] == 'text') {        $ret .= '<li>' . "\n";        $ret .= '<label for="text_' . $plugin_name . '_' . $opt['name'] . '" class="desc">'            . PMA_getString($opt['text']) . '</label>';        $ret .= '<input type="text" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="' . PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']) . '"'            . ' id="text_' . $plugin_name . '_' . $opt['name'] . '"'            . (isset($opt['size']) ? ' size="' . $opt['size'] . '"' : '')            . (isset($opt['len']) ? ' maxlength="' . $opt['len'] . '"' : '') . ' />';    } elseif ($opt['type'] == 'message_only') {        $ret .= '<li>' . "\n";        $ret .= '<p>' . PMA_getString($opt['text']) . '</p>';    } elseif ($opt['type'] == 'select') {        $ret .= '<li>' . "\n";        $ret .= '<label for="select_' . $plugin_name . '_' . $opt['name'] . '" class="desc">'            . PMA_getString($opt['text']) . '</label>';        $ret .= '<select name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' id="select_' . $plugin_name . '_' . $opt['name'] . '">';        $default = PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']);        foreach ($opt['values'] as $key => $val) {            $ret .= '<option value="' . $key . '"';            if ($key == $default) {                $ret .= ' selected="selected"';            }            $ret .= '>' . PMA_getString($val) . '</option>';        }        $ret .= '</select>';    } elseif ($opt['type'] == 'radio') {        $default = PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']);        foreach ($opt['values'] as $key => $val) {            $ret .= '<li><input type="radio" name="' . $plugin_name . '_' . $opt['name'] . '" value="' . $key            . '" id="radio_' . $plugin_name . '_' . $opt['name'] . '_' . $key . '"';            if ($key == $default) {                $ret .= 'checked="checked"';            }            $ret .= ' />' . '<label for="radio_' . $plugin_name . '_' . $opt['name'] . '_' . $key . '">'            . PMA_getString($val) . '</label></li>';        }    } elseif ($opt['type'] == 'hidden') {        $ret .= '<li><input type="hidden" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="' . PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']) . '"' . ' /></li>';    } elseif ($opt['type'] == 'begin_group') {        $ret .= '<div class="export_sub_options" id="' . $plugin_name . '_' . $opt['name'] . '">';        if (isset($opt['text'])) {            $ret .= '<h4>' . PMA_getString($opt['text']) . '</h4>';        }        $ret .= '<ul>';    } elseif ($opt['type'] == 'end_group') {        $ret .= '</ul></div>';    } elseif ($opt['type'] == 'begin_subgroup') {        /* each subgroup can have a header, which may also be a form element */        $ret .=  PMA_pluginGetOneOption($section, $plugin_name, $id, $opt['subgroup_header']) . '<li class="subgroup"><ul';        if (isset($opt['subgroup_header']['name'])) {            $ret .= ' id="ul_' . $opt['subgroup_header']['name'] . '">';        } else {            $ret .= '>';        }    } elseif ($opt['type'] == 'end_subgroup') {        $ret .= '</ul></li>';    } else {        /* This should be seen only by plugin writers, so I do not thing this         * needs translation. */        $ret .= 'UNKNOWN OPTION ' . $opt['type'] . ' IN IMPORT PLUGIN ' . $plugin_name . '!';    }    if (isset($opt['doc'])) {        if (count($opt['doc']) == 3) {            $ret .= PMA_showMySQLDocu($opt['doc'][0], $opt['doc'][1], false, $opt['doc'][2]);        } elseif (count($opt['doc']) == 1) {            $ret .= PMA_showDocu($opt['doc'][0]);        } else {            $ret .= PMA_showMySQLDocu($opt['doc'][0], $opt['doc'][1]);        }    }    // Close the list element after $opt['doc'] link is displayed    if ($opt['type'] == 'bool' || $opt['type'] == 'text' || $opt['type'] == 'message_only' || $opt['type'] == 'select') {        $ret .= '</li>';    }    $ret .= "\n";    return $ret;}/** * string PMA_pluginGetOptions(string $section, array &$list) * * return html div with editable options for plugin * * @param string  $section    name of config section in $GLOBALS['cfg'][$section] * @param array   &$list      array with plugin configuration defined in plugin file * @return  string              html fieldset with plugin options */function PMA_pluginGetOptions($section, &$list){    $ret = '';    $default = PMA_pluginGetDefault('Export', 'format');    // Options for plugins that support them    foreach ($list as $plugin_name => $val) {        $ret .= '<div id="' . $plugin_name . '_options" class="format_specific_options">';        $count = 0;            $ret .= '<h3>' . PMA_getString($val['text']) . '</h3>';        if (isset($val['options']) && count($val['options']) > 0) {            foreach ($val['options'] as $id => $opt) {                if ($opt['type'] != 'hidden' && $opt['type'] != 'begin_group' && $opt['type'] != 'end_group' && $opt['type'] != 'begin_subgroup' && $opt['type'] != 'end_subgroup') {                    $count++;                }                $ret .= PMA_pluginGetOneOption($section, $plugin_name, $id, $opt);            }        }        if ($count == 0) {            $ret .= '<p>' . __('This format has no options') . '</p>';        }        $ret .= '</div>';    }    return $ret;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * returns code for selecting databases * * @return String HTML code */function PMA_replication_db_multibox(){    $multi_values = '';    $multi_values .= '<select name="db_select[]" size="6" multiple="multiple" id="db_select">';    foreach ($GLOBALS['pma']->databases as $current_db) {        if (PMA_is_system_schema($current_db)) {            continue;        }        if (! empty($selectall) || (isset($tmp_select) && strpos(' ' . $tmp_select, '|' . $current_db . '|'))) {            $is_selected = ' selected="selected"';        } else {            $is_selected = '';        }        $current_db = htmlspecialchars($current_db);        $multi_values .= '                <option value="' . $current_db . '" ' . $is_selected . '>' . $current_db . '</option>';    } // end while    $multi_values .= '</select>';    $multi_values .= '<br /><a href="#" id="db_reset_href">' . __('Uncheck All') . '</a>';    return $multi_values;}/** * prints out code for changing master * * @param String $submitname - submit button name */function PMA_replication_gui_changemaster($submitname){    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();    echo '<form method="post" action="server_replication.php">';    echo PMA_generate_common_hidden_inputs('', '');    echo ' <fieldset id="fieldset_add_user_login">';    echo '  <legend>' . __('Slave configuration') . ' - ' . __('Change or reconfigure master server') . '</legend>';    echo __('Make sure, you have unique server-id in your configuration file (my.cnf). If not, please add the following line into [mysqld] section:') . '<br />';    echo '<pre>server-id=' . time() . '</pre>';    echo '  <div class="item">';    echo '    <label for="text_username">' . __('User name') . ':</label>';    echo '    <input type="text" name="username" id="text_username" maxlength="'. $username_length . '" title="' . __('User name') . '" />';    echo '  </div>';    echo '  <div class="item">';    echo '    <label for="text_pma_pw">' . __('Password') .' :</label>';    echo '    <input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" />';    echo '  </div>';    echo '  <div class="item">';    echo '    <label for="text_hostname">' . __('Host') . ' :</label>';    echo '    <input type="text" id="text_hostname" name="hostname" maxlength="' . $hostname_length . '" value="" />';    echo '  </div>';    echo '  <div class="item">';    echo '     <label for="text_port">' . __('Port') . ':</label>';    echo '     <input type="text" id="text_port" name="port" maxlength="6" value="3306"  />';    echo '  </div>';    echo ' </fieldset>';    echo ' <fieldset id="fieldset_user_privtable_footer" class="tblFooters">';    echo '    <input type="hidden" name="sr_take_action" value="true" />';    echo '     <input type="submit" name="' . $submitname . '" id="confslave_submit" value="' . __('Go') . '" />';    echo ' </fieldset>';    echo '</form>';}/** * This function prints out table with replication status. * * @param string  $type   either master or slave * @param boolean $hidden if true, then default style is set to hidden, default value false * @param boolen  $title  if true, then title is displayed, default true */function PMA_replication_print_status_table($type, $hidden = false, $title = true){    global ${"{$type}_variables"};    global ${"{$type}_variables_alerts"};    global ${"{$type}_variables_oks"};    global ${"server_{$type}_replication"};    global ${"strReplicationStatus_{$type}"};    // TODO check the Masters server id?    // seems to default to '1' when queried via SHOW VARIABLES , but resulted in error on the master when slave connects    // [ERROR] Error reading packet from server: Misconfigured master - server id was not set ( server_errno=1236)    // [ERROR] Got fatal error 1236: 'Misconfigured master - server id was not set' from master when reading data from binary log    //    //$server_id = PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'server_id'", 0, 1);    echo '<div id="replication_' . $type . '_section" style="' . ($hidden ? 'display: none;' : '') . '"> ';    if ($title) {        if ($type == 'master') {            echo '<h4><a name="replication_' . $type . '"></a>' . __('Master status') . '</h4>';        } else {            echo '<h4><a name="replication_' . $type . '"></a>' . __('Slave status') . '</h4>';        }    } else {        echo '<br />';    }    echo '   <table id="server' . $type . 'replicationsummary" class="data"> ';    echo '   <thead>';    echo '    <tr>';    echo '     <th>' . __('Variable') . '</th>';    echo '        <th>' . __('Value') . '</th>';    echo '    </tr>';    echo '   </thead>';    echo '   <tbody>';    $odd_row = true;    foreach (${"{$type}_variables"} as $variable) {        echo '   <tr class="' . ($odd_row ? 'odd' : 'even') . '">';        echo '     <td class="name">';        echo        $variable;        echo '     </td>';        echo '     <td class="value">';        // TODO change to regexp or something, to allow for negative match        if (isset(${"{$type}_variables_alerts"}[$variable])            && ${"{$type}_variables_alerts"}[$variable] == ${"server_{$type}_replication"}[0][$variable]        ) {            echo '<span class="attention">';        } elseif (isset(${"{$type}_variables_oks"}[$variable])            && ${"{$type}_variables_oks"}[$variable] == ${"server_{$type}_replication"}[0][$variable]        ) {            echo '<span class="allfine">';        } else {            echo '<span>';        }        echo ${"server_{$type}_replication"}[0][$variable];        echo '</span>';        echo '  </td>';        echo ' </tr>';        $odd_row = ! $odd_row;    }    echo '   </tbody>';    echo ' </table>';    echo ' <br />';    echo '</div>';}/** * Prints table with slave users connected to this master * * @param boolean $hidden - if true, then default style is set to hidden, default value false */function PMA_replication_print_slaves_table($hidden = false){    // Fetch data    $data = PMA_DBI_fetch_result('SHOW SLAVE HOSTS', null, null);    echo '  <br />';    echo '  <div id="replication_slaves_section" style="' . ($hidden ? 'display: none;' : '') . '"> ';    echo '    <table class="data">';    echo '    <thead>';    echo '      <tr>';    echo '        <th>' . __('Server ID') . '</th>';    echo '        <th>' . __('Host') . '</th>';    echo '      </tr>';    echo '    </thead>';    echo '    <tbody>';    $odd_row = true;    foreach ($data as $slave) {        echo '    <tr class="' . ($odd_row ? 'odd' : 'even') . '">';        echo '      <td class="value">' . $slave['Server_id'] . '</td>';        echo '      <td class="value">' . $slave['Host'] . '</td>';        echo '    </tr>';        $odd_row = ! $odd_row;    }    echo '    </tbody>';    echo '    </table>';    echo '    <br />';    PMA_Message::notice(__('Only slaves started with the --report-host=host_name option are visible in this list.'))->display();    echo '    <br />';    echo '  </div>';}/** * get the correct username and hostname lengths for this MySQL server * * @return  array   username length, hostname length */function PMA_replication_get_username_hostname_length(){    $fields_info = PMA_DBI_get_columns('mysql', 'user');    $username_length = 16;    $hostname_length = 41;    foreach ($fields_info as $val) {        if ($val['Field'] == 'User') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $username_length = $v;            }        } elseif ($val['Field'] == 'Host') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $hostname_length = $v;            }        }    }    return array($username_length, $hostname_length);}/** * Print code to add a replication slave user to the master */function PMA_replication_gui_master_addslaveuser(){    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();    if (isset($GLOBALS['username']) && strlen($GLOBALS['username']) === 0) {        $GLOBALS['pred_username'] = 'any';    }    echo '<div id="master_addslaveuser_gui">';    echo '<form autocomplete="off" method="post" action="server_privileges.php" onsubmit="return checkAddUser(this);">';    echo PMA_generate_common_hidden_inputs('', '');    echo '<fieldset id="fieldset_add_user_login">'        . '<legend>'.__('Add slave replication user').'</legend>'    . '<input type="hidden" name="grant_count" value="25" />'    . '<input type="hidden" name="createdb" id="createdb_0" value="0" />'        . '<input id="checkbox_Repl_slave_priv" type="hidden" title="Needed for the replication slaves." value="Y" name="Repl_slave_priv"/>'        . '<input id="checkbox_Repl_client_priv" type="hidden" title="Needed for the replication slaves." value="Y" name="Repl_client_priv"/>'    . ''        . '<input type="hidden" name="sr_take_action" value="true" />'        . '<div class="item">'        . '<label for="select_pred_username">'        . '    ' . __('User name') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_username" id="select_pred_username" title="' . __('User name') . '"'        . '        onchange="if (this.value == \'any\') { username.value = \'\'; } else if (this.value == \'userdefined\') { username.focus(); username.select(); }">'        . '        <option value="any"' . ((isset($GLOBALS['pred_username']) && $GLOBALS['pred_username'] == 'any') ? ' selected="selected"' : '') . '>' . __('Any user') . '</option>'        . '        <option value="userdefined"' . ((! isset($GLOBALS['pred_username']) || $GLOBALS['pred_username'] == 'userdefined') ? ' selected="selected"' : '') . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="text" name="username" maxlength="'        . $username_length . '" title="' . __('User name') . '"'        . (empty($GLOBALS['username'])        ? ''        : ' value="' . (isset($GLOBALS['new_username'])        ? $GLOBALS['new_username']        : $GLOBALS['username']) . '"')        . ' onchange="pred_username.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="select_pred_hostname">'        . '    ' . __('Host') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_hostname" id="select_pred_hostname" title="' . __('Host') . '"';    $_current_user = PMA_DBI_fetch_value('SELECT USER();');    if (! empty($_current_user)) {        $thishost = str_replace("'", '', substr($_current_user, (strrpos($_current_user, '@') + 1)));        if ($thishost == 'localhost' || $thishost == '127.0.0.1') {            unset($thishost);        }    }    echo '    onchange="if (this.value == \'any\') { hostname.value = \'%\'; } else if (this.value == \'localhost\') { hostname.value = \'localhost\'; } '        . (empty($thishost) ? '' : 'else if (this.value == \'thishost\') { hostname.value = \'' . addslashes(htmlspecialchars($thishost)) . '\'; } ')        . 'else if (this.value == \'hosttable\') { hostname.value = \'\'; } else if (this.value == \'userdefined\') { hostname.focus(); hostname.select(); }">' . "\n";    unset($_current_user);    // when we start editing a user, $GLOBALS['pred_hostname'] is not defined    if (! isset($GLOBALS['pred_hostname']) && isset($GLOBALS['hostname'])) {        switch (strtolower($GLOBALS['hostname'])) {        case 'localhost':        case '127.0.0.1':            $GLOBALS['pred_hostname'] = 'localhost';            break;        case '%':            $GLOBALS['pred_hostname'] = 'any';            break;        default:            $GLOBALS['pred_hostname'] = 'userdefined';            break;        }    }    echo '        <option value="any"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'any')        ? ' selected="selected"' : '') . '>' . __('Any host')        . '</option>'        . '        <option value="localhost"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'localhost')        ? ' selected="selected"' : '') . '>' . __('Local')        . '</option>';    if (!empty($thishost)) {        echo '        <option value="thishost"'            . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'thishost')            ? ' selected="selected"' : '') . '>' . __('This Host')            . '</option>';    }    unset($thishost);    echo '        <option value="hosttable"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'hosttable')        ? ' selected="selected"' : '') . '>' . __('Use Host Table')        . '</option>'        . '        <option value="userdefined"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'userdefined')        ? ' selected="selected"' : '')        . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="text" name="hostname" maxlength="'        . $hostname_length . '" value="'        . (isset($GLOBALS['hostname']) ? $GLOBALS['hostname'] : '')        . '" title="' . __('Host')        . '" onchange="pred_hostname.value = \'userdefined\';" />'        . PMA_showHint(__('When Host table is used, this field is ignored and values stored in Host table are used instead.'))        . '</div>'        . '<div class="item">'        . '<label for="select_pred_password">'        . '    ' . __('Password') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_password" id="select_pred_password" title="'        . __('Password') . '"'        . '            onchange="if (this.value == \'none\') { pma_pw.value = \'\'; pma_pw2.value = \'\'; } else if (this.value == \'userdefined\') { pma_pw.focus(); pma_pw.select(); }">'        . '        <option value="none"';    if (isset($GLOBALS['username']) && $mode != 'change') {        echo '  selected="selected"';    }    echo '>' . __('No Password') . '</option>'        . '        <option value="userdefined"' . (isset($GLOBALS['username']) ? '' : ' selected="selected"') . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" onchange="pred_password.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="text_pma_pw2">'        . '    ' . __('Re-type') . ':'        . '</label>'        . '<span class="options">&nbsp;</span>'        . '<input type="password" name="pma_pw2" id="text_pma_pw2" title="' . __('Re-type') . '" onchange="pred_password.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="button_generate_password">'        . '    ' . __('Generate Password') . ':'        . '</label>'        . '<span class="options">'        . '    <input type="button" id="button_generate_password" value="' . __('Generate') . '" onclick="suggestPassword(this.form)" />'        . '</span>'        . '<input type="text" name="generated_pw" id="generated_pw" />'        . '</div>'        . '</fieldset>';    echo '<fieldset id="fieldset_user_privtable_footer" class="tblFooters">'        . '    <input type="submit" name="adduser_submit" id="adduser_submit" value="' . __('Go') . '" />'        . '</fieldset>';    echo '</form>';    echo '</div>';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Events management. * * @package PhpMyAdmin *//** * Include required files */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';/** * Include JavaScript libraries */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'rte/common.js';$GLOBALS['js_include'][] = 'rte/events.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';/** * Include all other files */require_once './libraries/rte/rte_events.lib.php';/** * Do the magic */$_PMA_RTE = 'EVN';require_once './libraries/rte/rte_main.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * searchs the entire database * * @todo    make use of UNION when searching multiple tables * @todo    display executed query, optional? * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'db_search.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';/** * Gets some core libraries and send headers */require './libraries/db_common.inc.php';/** * init */// If config variable $GLOBALS['cfg']['Usedbsearch'] is on false : exit.if (! $GLOBALS['cfg']['UseDbSearch']) {    PMA_mysqlDie(__('Access denied'), '', false, $err_url);} // end if$url_query .= '&amp;goto=db_search.php';$url_params['goto'] = 'db_search.php';/** * @global array list of tables from the current database * but do not clash with $tables coming from db_info.inc.php */$tables_names_only = PMA_DBI_get_tables($GLOBALS['db']);$search_options = array(    '1' => __('at least one of the words'),    '2' => __('all words'),    '3' => __('the exact phrase'),    '4' => __('as regular expression'),);if (empty($_REQUEST['search_option']) || ! is_string($_REQUEST['search_option']) || ! array_key_exists($_REQUEST['search_option'], $search_options)) {    $search_option = 1;    unset($_REQUEST['submit_search']);} else {    $search_option = (int) $_REQUEST['search_option'];    $option_str = $search_options[$_REQUEST['search_option']];}if (empty($_REQUEST['search_str']) || ! is_string($_REQUEST['search_str'])) {    unset($_REQUEST['submit_search']);    $searched = '';} else {    $searched = htmlspecialchars($_REQUEST['search_str']);    // For "as regular expression" (search option 4), we should not treat    // this as an expression that contains a LIKE (second parameter of    // PMA_sqlAddSlashes()).    //    // Usage example: If user is seaching for a literal $ in a regexp search,    // he should enter \$ as the value.    $search_str = PMA_sqlAddSlashes($_REQUEST['search_str'], ($search_option == 4 ? false : true));}$tables_selected = array();if (empty($_REQUEST['table_select']) || ! is_array($_REQUEST['table_select'])) {    unset($_REQUEST['submit_search']);} elseif (! isset($_REQUEST['selectall']) && ! isset($_REQUEST['unselectall'])) {    $tables_selected = array_intersect($_REQUEST['table_select'], $tables_names_only);}if (isset($_REQUEST['selectall'])) {    $tables_selected = $tables_names_only;} elseif (isset($_REQUEST['unselectall'])) {    $tables_selected = array();}if (empty($_REQUEST['field_str']) || ! is_string($_REQUEST['field_str'])) {    unset($field_str);} else {    $field_str = PMA_sqlAddSlashes($_REQUEST['field_str'], true);}/** * Displays top links if we are not in an Ajax request */$sub_part = '';if ( $GLOBALS['is_ajax_request'] != true) {    include './libraries/db_info.inc.php';    echo '<div id="searchresults">';}/** * 1. Main search form has been submitted */if (isset($_REQUEST['submit_search'])) {    /**     * Builds the SQL search query     *     * @todo    can we make use of fulltextsearch IN BOOLEAN MODE for this?     * PMA_backquote     * PMA_DBI_free_result     * PMA_DBI_fetch_assoc     * $GLOBALS['db']     * explode     * count     * strlen     * @param string   the table name     * @param string   restrict the search to this field     * @param string   the string to search     * @param integer  type of search (1 -> 1 word at least, 2 -> all words,     *                                   3 -> exact string, 4 -> regexp)     *     * @return  array    3 SQL querys (for count, display and delete results)     */    function PMA_getSearchSqls($table, $field, $search_str, $search_option)    {        // Statement types        $sqlstr_select = 'SELECT';        $sqlstr_delete = 'DELETE';        // Fields to select        $tblfields = PMA_DBI_get_columns($GLOBALS['db'], $table);        // Table to use        $sqlstr_from = ' FROM ' . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($table);        $search_words    = (($search_option > 2) ? array($search_str) : explode(' ', $search_str));        $like_or_regex   = (($search_option == 4) ? 'REGEXP' : 'LIKE');        $automatic_wildcard   = (($search_option < 3) ? '%' : '');        $fieldslikevalues = array();        foreach ($search_words as $search_word) {            // Eliminates empty values            if (strlen($search_word) === 0) {                continue;            }            $thefieldlikevalue = array();            foreach ($tblfields as $tblfield) {                if (! isset($field) || strlen($field) == 0 || $tblfield['Field'] == $field) {                    // Drizzle has no CONVERT and all text columns are UTF-8                    if (PMA_DRIZZLE) {                        $thefieldlikevalue[] = PMA_backquote($tblfield['Field'])                                            . ' ' . $like_or_regex . ' '                                            . "'" . $automatic_wildcard                                            . $search_word                                            . $automatic_wildcard . "'";                    } else {                        $thefieldlikevalue[] = 'CONVERT(' . PMA_backquote($tblfield['Field']) . ' USING utf8)'                                            . ' ' . $like_or_regex . ' '                                            . "'" . $automatic_wildcard                                            . $search_word                                            . $automatic_wildcard . "'";                    }                }            } // end for            if (count($thefieldlikevalue) > 0) {                $fieldslikevalues[]      = implode(' OR ', $thefieldlikevalue);            }        } // end for        $implode_str  = ($search_option == 1 ? ' OR ' : ' AND ');        if ( empty($fieldslikevalues)) {            // this could happen when the "inside field" does not exist            // in any selected tables            $sqlstr_where = ' WHERE FALSE';        } else {            $sqlstr_where = ' WHERE (' . implode(') ' . $implode_str . ' (', $fieldslikevalues) . ')';        }        unset($fieldslikevalues);        // Builds complete queries        $sql['select_fields'] = $sqlstr_select . ' * ' . $sqlstr_from . $sqlstr_where;        // here, I think we need to still use the COUNT clause, even for        // VIEWs, anyway we have a WHERE clause that should limit results        $sql['select_count']  = $sqlstr_select . ' COUNT(*) AS `count`' . $sqlstr_from . $sqlstr_where;        $sql['delete']        = $sqlstr_delete . $sqlstr_from . $sqlstr_where;        return $sql;    } // end of the "PMA_getSearchSqls()" function    /**     * Displays the results     */    $this_url_params = array(        'db'    => $GLOBALS['db'],        'goto'  => 'db_sql.php',        'pos'   => 0,        'is_js_confirmed' => 0,    );    // Displays search string    echo '<br />' . "\n"        .'<table class="data">' . "\n"        .'<caption class="tblHeaders">' . "\n"        .sprintf(__('Search results for "<i>%s</i>" %s:'),            $searched, $option_str) . "\n"        .'</caption>' . "\n";    $num_search_result_total = 0;    $odd_row = true;    foreach ($tables_selected as $each_table) {        // Gets the SQL statements        $newsearchsqls = PMA_getSearchSqls($each_table, (! empty($field_str) ? $field_str : ''), $search_str, $search_option);        // Executes the "COUNT" statement        $res_cnt = PMA_DBI_fetch_value($newsearchsqls['select_count']);        $num_search_result_total += $res_cnt;        $sql_query .= $newsearchsqls['select_count'];        echo '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">'            .'<td>' . sprintf(_ngettext('%s match inside table <i>%s</i>', '%s matches inside table <i>%s</i>', $res_cnt), $res_cnt,                htmlspecialchars($each_table)) . "</td>\n";        if ($res_cnt > 0) {            $this_url_params['sql_query'] = $newsearchsqls['select_fields'];             $browse_result_path = 'sql.php' . PMA_generate_common_url($this_url_params);             ?>            <td> <a name="browse_search" href="<?php echo $browse_result_path; ?>" onclick="loadResult('<?php echo $browse_result_path ?> ',' <?php echo  $each_table?> ' , '<?php echo PMA_generate_common_url($GLOBALS['db'], $each_table)?>','<?php echo ($GLOBALS['cfg']['AjaxEnable']); ?>');return false;" ><?php echo __('Browse') ?></a>   </td>            <?php            $this_url_params['sql_query'] = $newsearchsqls['delete'];            $delete_result_path = 'sql.php' . PMA_generate_common_url($this_url_params);            ?>            <td> <a name="delete_search" href="<?php echo $delete_result_path; ?>" onclick="deleteResult('<?php echo $delete_result_path ?>' , ' <?php printf(__('Delete the matches for the %s table?'), htmlspecialchars($each_table)); ?>','<?php echo ($GLOBALS['cfg']['AjaxEnable']); ?>');return false;" ><?php echo __('Delete') ?></a>   </td>            <?php         } else {            echo '<td>&nbsp;</td>' . "\n"                .'<td>&nbsp;</td>' . "\n";        }// end if else        $odd_row = ! $odd_row;        echo '</tr>' . "\n";    } // end for    echo '</table>' . "\n";    if (count($tables_selected) > 1) {        echo '<p>' . sprintf(_ngettext('<b>Total:</b> <i>%s</i> match', '<b>Total:</b> <i>%s</i> matches', $num_search_result_total),            $num_search_result_total) . '</p>' . "\n";    }} // end 1./** * If we are in an Ajax request, we need to exit after displaying all the HTML */if ($GLOBALS['is_ajax_request'] == true) {    exit;} else {    echo '</div>';//end searchresults div}/** * 2. Displays the main search form */?><a name="db_search"></a><form id="db_search_form"<?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?> method="post" action="db_search.php" name="db_search"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db']); ?><fieldset>    <legend><?php echo __('Search in database'); ?></legend>    <table class="formlayout">    <tr><td><?php echo __('Words or values to search for (wildcard: "%"):'); ?></td>        <td><input type="text" name="search_str" size="60"                value="<?php echo $searched; ?>" /></td>    </tr>    <tr><td align="right" valign="top">            <?php echo __('Find:'); ?></td>            <td><?php$choices = array(    '1' => __('at least one of the words') . PMA_showHint(__('Words are separated by a space character (" ").')),    '2' => __('all words') . PMA_showHint(__('Words are separated by a space character (" ").')),    '3' => __('the exact phrase'),    '4' => __('as regular expression') . ' ' . PMA_showMySQLDocu('Regexp', 'Regexp'));// 4th parameter set to true to add line breaks// 5th parameter set to false to avoid htmlspecialchars() escaping in the label//  since we have some HTML in some labelsPMA_display_html_radio('search_option', $choices, $search_option, true, false);unset($choices);            ?>            </td>    </tr>    <tr><td align="right" valign="top">            <?php echo __('Inside tables:'); ?></td>        <td rowspan="2"><?phpecho '            <select name="table_select[]" size="6" multiple="multiple">' . "\n";foreach ($tables_names_only as $each_table) {    if (in_array($each_table, $tables_selected)) {        $is_selected = ' selected="selected"';    } else {        $is_selected = '';    }    echo '                <option value="' . htmlspecialchars($each_table) . '"'        . $is_selected . '>'        . str_replace(' ', '&nbsp;', htmlspecialchars($each_table)) . '</option>' . "\n";} // end whileecho '            </select>' . "\n";$alter_select    = '<a href="db_search.php' . PMA_generate_common_url(array_merge($url_params, array('selectall' => 1))) . '#db_search"'    . ' onclick="setSelectOptions(\'db_search\', \'table_select[]\', true); return false;">' . __('Select All') . '</a>'    . '&nbsp;/&nbsp;'    . '<a href="db_search.php' . PMA_generate_common_url(array_merge($url_params, array('unselectall' => 1))) . '#db_search"'    . ' onclick="setSelectOptions(\'db_search\', \'table_select[]\', false); return false;">' . __('Unselect All') . '</a>';?>        </td>    </tr>    <tr><td align="right" valign="bottom">            <?php echo $alter_select; ?></td>    </tr>    <tr><td align="right">            <?php echo __('Inside column:'); ?></td>        <td><input type="text" name="field_str" size="60"                value="<?php echo ! empty($field_str) ? htmlspecialchars($field_str) : ''; ?>" /></td>    </tr>    </table></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_search" value="<?php echo __('Go'); ?>"        id="buttonGo" /></fieldset></form><!-- These two table-image and table-link elements display the table name in browse search results  --><div id='table-info'><a class="item" id="table-link" ></a></div><div id="browse-results"><!-- this browse-results div is used to load the browse and delete results in the db search --></div><br class="clearfloat" /><div id="sqlqueryform"><!-- this sqlqueryform div is used to load the delete form in the db search --></div><!--  toggle query box link--><a id="togglequerybox"></a><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/** * Handles the visualization of GIS POINT objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Point extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        return $this->setMinMax($point, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial     GIS POINT object     * @param string $label       Label for the GIS POINT object     * @param string $point_color Color for the GIS POINT object     * @param array  $scale_data  Array containing data related to scaling     * @param image  $image       Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $point_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($point_color, 1, 2));        $green = hexdec(substr($point_color, 3, 2));        $blue  = hexdec(substr($point_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        $points_arr = $this->extractPoints($point, $scale_data);        // draw a small circle to mark the point        if ($points_arr[0][0] != '' && $points_arr[0][1] != '') {            imagearc($image, $points_arr[0][0], $points_arr[0][1], 7, 7, 0, 360, $color);            // print label if applicable            if (isset($label) && trim($label) != '') {                imagestring($image, 1, $points_arr[0][0], $points_arr[0][1], trim($label), $black);            }        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial     GIS POINT object     * @param string $label       Label for the GIS POINT object     * @param string $point_color Color for the GIS POINT object     * @param array  $scale_data  Array containing data related to scaling     * @param image  $pdf         TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $point_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($point_color, 1, 2));        $green = hexdec(substr($point_color, 3, 2));        $blue  = hexdec(substr($point_color, 4, 2));        $line  = array('width' => 1.25, 'color' => array($red, $green, $blue));        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        $points_arr = $this->extractPoints($point, $scale_data);        // draw a small circle to mark the point        if ($points_arr[0][0] != '' && $points_arr[0][1] != '') {            $pdf->Circle($points_arr[0][0], $points_arr[0][1], 2, 0, 360, 'D', $line);            // print label if applicable            if (isset($label) && trim($label) != '') {                $pdf->SetXY($points_arr[0][0], $points_arr[0][1]);                $pdf->SetFontSize(5);                $pdf->Cell(0, 0, trim($label));            }        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial     GIS POINT object     * @param string $label       Label for the GIS POINT object     * @param string $point_color Color for the GIS POINT object     * @param array  $scale_data  Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $point_color, $scale_data)    {        $point_options = array(            'name'        => $label,            'id'          => $label . rand(),            'class'       => 'point vector',            'fill'        => 'white',            'stroke'      => $point_color,            'stroke-width'=> 2,        );        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        $points_arr = $this->extractPoints($point, $scale_data);        $row = '';        if ($points_arr[0][0] != '' && $points_arr[0][1] != '') {            $row .= '<circle cx="' . $points_arr[0][0] . '" cy="' . $points_arr[0][1] . '" r="3"';            foreach ($point_options as $option => $val) {                $row .= ' ' . $option . '="' . trim($val) . '"';            }            $row .= '/>';        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial     GIS POINT object     * @param int    $srid        Spatial reference ID     * @param string $label       Label for the GIS POINT object     * @param string $point_color Color for the GIS POINT object     * @param array  $scale_data  Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $point_color, $scale_data)    {        $style_options = array(            'pointRadius'  => 3,            'fillColor'    => '#ffffff',            'strokeColor'  => $point_color,            'strokeWidth'  => 2,            'label'        => $label,            'labelYOffset' => -8,            'fontSize'     => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $result = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        $points_arr = $this->extractPoints($point, null);        if ($points_arr[0][0] != '' && $points_arr[0][1] != '') {            $result .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector(('                . 'new OpenLayers.Geometry.Point(' . $points_arr[0][0] . ', '                . $points_arr[0][1] . ').transform(new OpenLayers.Projection("EPSG:'                . $srid . '"), map.getProjectionObject())), null, '                . json_encode($style_options) . '));';        }        return $result;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Point deos not adhere to this parameter     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {         return 'POINT('             . ((isset($gis_data[$index]['POINT']['x']) && trim($gis_data[$index]['POINT']['x']) != '')             ? $gis_data[$index]['POINT']['x'] : '') . ' '             . ((isset($gis_data[$index]['POINT']['y']) && trim($gis_data[$index]['POINT']['y']) != '')             ? $gis_data[$index]['POINT']['y'] : '') . ')';    }    /**     * Generate the WKT for the data from ESRI shape files.     *     * @param array $row_data GIS data     *     * @return the WKT for the data from ESRI shape files     */    public function getShape($row_data)    {        return 'POINT(' . (isset($row_data['x']) ? $row_data['x'] : '')             . ' ' . (isset($row_data['y']) ? $row_data['y'] : '') . ')';    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'POINT';            $wkt = $value;        }        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($wkt, 6, (strlen($wkt) - 7));        $points_arr = $this->extractPoints($point, null);        $params[$index]['POINT']['x'] = $points_arr[0][0];        $params[$index]['POINT']['y'] = $points_arr[0][1];        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run config authentication (ie no authentication). * * @package PhpMyAdmin-Auth-Config *//** * Displays authentication form * * @return  boolean   always true * * @access  public */function PMA_auth(){    return true;} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * @return  boolean   always true * * @access  public */function PMA_auth_check(){    return true;} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * @global  string    the MySQL error message PHP returns * @global  string    the connection type (persistent or not) * @global  string    the MySQL server port to use * @global  string    the MySQL socket port to use * @global  array     the current server settings * @global  string    the font face to use in case of failure * @global  string    the default font size to use in case of failure * @global  string    the big font size to use in case of failure * @global  boolean   tell the "PMA_mysqlDie()" function headers have been *                    sent * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth_fails(){    $conn_error = PMA_DBI_getError();    if (!$conn_error) {        $conn_error = __('Cannot connect: invalid settings.');    }    // Defines the charset to be used    header('Content-Type: text/html; charset=utf-8');    /* HTML header */    $page_title = __('Access denied');    include './libraries/header_meta_style.inc.php';    ?></head><body><br /><br /><center>    <h1><?php echo sprintf(__('Welcome to %s'), ' phpMyAdmin '); ?></h1></center><br /><table border="0" cellpadding="0" cellspacing="3" align="center" width="80%">    <tr>        <td>    <?php    $GLOBALS['is_header_sent'] = true;    if (isset($GLOBALS['allowDeny_forbidden']) && $GLOBALS['allowDeny_forbidden']) {        trigger_error(__('Access denied'), E_USER_NOTICE);    } else {        // Check whether user has configured something        if ($GLOBALS['PMA_Config']->source_mtime == 0) {            echo '<p>' . sprintf(__('You probably did not create a configuration file. You might want to use the %1$ssetup script%2$s to create one.'), '<a href="setup/">', '</a>') . '</p>' . "\n";        } elseif (!isset($GLOBALS['errno']) || (isset($GLOBALS['errno']) && $GLOBALS['errno'] != 2002) && $GLOBALS['errno'] != 2003) {        // if we display the "Server not responding" error, do not confuse users        // by telling them they have a settings problem        // (note: it's true that they could have a badly typed host name, but        //  anyway the current message tells that the server        //  rejected the connection, which is not really what happened)        // 2002 is the error given by mysqli        // 2003 is the error given by mysql            trigger_error(__('phpMyAdmin tried to connect to the MySQL server, and the server rejected the connection. You should check the host, username and password in your configuration and make sure that they correspond to the information given by the administrator of the MySQL server.'), E_USER_WARNING);        }        PMA_mysqlDie($conn_error, '', true, '', false);    }    $GLOBALS['error_handler']->dispUserErrors();?>        </td>    </tr><?php    if (count($GLOBALS['cfg']['Servers']) > 1) {        // offer a chance to login to other servers if the current one failed        include_once './libraries/select_server.lib.php';        echo '<tr>' . "\n";        echo ' <td>' . "\n";        PMA_select_server(true, true);        echo ' </td>' . "\n";        echo '</tr>' . "\n";    }    echo '</table>' . "\n";    include './libraries/footer.inc.php';    return true;} // end of the 'PMA_auth_fails()' function?>
<?php/** * Generates the SVG needed for the plot * * @package PhpMyAdmin */require_once 'pma_svg_data_point.php';class PMA_Scatter_Plot{    /**     * @var array   Raw data for the plot     */    private $_data;    /**     * @var array   Data points of the plot     */    private $_dataPoints;    /**     * @var array   Set of default settigs values are here.     */    private $_settings = array(        // Array of colors to be used for plot.        'colors' => array(            '#BCE02E',            '#E0642E',            '#E0D62E',            '#2E97E0',            '#B02EE0',            '#E02E75',            '#5CE02E',            '#E0B02E',            '#000000',            '#0022E0',            '#726CB1',            '#481A36',            '#BAC658',            '#127224',            '#825119',            '#238C74',            '#4C489B',            '#87C9BF',        ),        // Plot background color.        'bgColor' => '#84AD83',        // The width of the plot.        'width' => 520,         // The height of the plot.        'height' => 325,        // Default X Axis label. If empty, label will be taken from the data.        'xLabel' => '',        // Default Y Axis label. If empty, label will be taken from the data.        'yLabel' => '',        // Data point label. If empty, label will be taken from the data.        'dataLabel' => '',    );    /**     * @var array   Options that the user has specified.     */    private $_userSpecifiedSettings = null;    /**     * Returns the settings array     *     * @return the settings array.     */    public function getSettings()    {        return $this->_settings;    }    /**     * Returns the data array     *     * @return the data array.     */    public function getData()    {        return $this->_data;    }    /**     * Constructor. Stores user specified options.     *     * @param array $data    Data for the visualization     * @param array $options Users specified options     */    public function __construct($data, $options)    {        $this->_userSpecifiedSettings = $options;        $this->_data = $data;    }    /**     * All the variable initialization, options handling has to be done here.     */    protected function init()    {        $this->_handleOptions();    }    /**     * A function which handles passed parameters. Useful if desired     * chart needs to be a little bit different from the default one.     */    private function _handleOptions()    {        $this->_dataPoints = array();        if (! is_null($this->_userSpecifiedSettings)) {            foreach (array_keys($this->_userSpecifiedSettings) as $key) {                $this->_settings[$key] = $this->_userSpecifiedSettings[$key];            }        }        if ($this->_settings['dataLabel'] == '') {            $labels = array_keys($this->_data[0]);            $this->_settings['dataLabel'] = $labels[0];        }    }    /**     * Generate the visualization in SVG format.     *     * @return the generated image resource     */    private function _svg()    {        $this->init();        $output   = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>' . "\n";        $output  .= '<svg version="1.1" xmlns:svg="http://www.w3.org/2000/svg"'            . ' xmlns="http://www.w3.org/2000/svg" width="' . $this->_settings['width'] . '"'            . ' height="' . $this->_settings['height'] . '">';        $output .= '<g id="groupPanel">';        $output .= '<defs>            <path id="myTextPath1"                    d="M10,190 L10,50"/>                    <path id="myTextPath2"                    d="M250,10 L370,10"/>                    </defs>';        $output .= '<text x="6" y="190"  style="font-family: Arial; font-size  : 54; stroke:none; fill:#000000;" >                    <textPath xlink:href="#myTextPath1" >';        $output .= $this->_settings['yLabel'];        $output .= '</textPath>                   </text>';        $output .= '<text x="250" y="10"  style="font-family: Arial; font-size  : 54; stroke:none; fill:#000000;" >                    <textPath xlink:href="#myTextPath2" >';        $output .= $this->_settings['xLabel'];        $output .= '</textPath>                   </text>';        $scale_data = $this->_scaleDataSet($this->_data, $this->_settings['xLabel'], $this->_settings['yLabel']);        $output .= $this->_prepareDataSet($this->_data, 0, $scale_data, $this->_settings['dataLabel']);        $output .= '</g>';        $output .= '</svg>';        return $output;    }    /**     * Get the visualization as a SVG.     *     * @return the visualization as a SVG     */    public function asSVG()    {        $output = $this->_svg();        return $output;    }    /**     * Calculates the scale, horizontal and vertical offset that should be used.     *     * @param array $data Row data     *     * @return an array containing the scale, x and y offsets     */    private function _scaleDataSet($data, $xField, $yField)    {        // Currently assuming only numeric fields are selected        $coordinates = array();        foreach ($data as $row) {            $coordinates[0][] = $row[$xField];            $coordinates[1][] = $row[$yField];        }        for ($i = 0 ; $i < 2 ; $i++) {            $maxC = ($i == 0) ? 500 : 320;            if ( !is_numeric($coordinates[$i][0])) {                $uniqueC = array_unique($coordinates[$i]);                $countC = count(array_unique($coordinates[$i]));                $map = $tmp = array();                foreach ($uniqueC as $uc) {                    $tmp[] = $uc;                }                for ($j = 0 ; $j < $countC ; $j++) {                    $map[$tmp[$j]] = 20 + $j * $maxC / $countC;                }                for ($j = 0 ; $j < count($coordinates[$i]) ; $j++) {                     $coordinates[$i][$j] = $map[$coordinates[$i][$j]];                }            } else if (is_numeric($coordinates[$i][0])) {                $maxC = max($coordinates[$i]);                for ($j = 0 ; $j < count($coordinates[$i]) ; $j++) {                    if ($i == 0) {                         $coordinates[$i][$j] = 20 + 500 * $coordinates[$i][$j] / $maxC;                    } else {                         $coordinates[$i][$j] = 20 + 320 * (1 - $coordinates[$i][$j] / $maxC);                    }                }            }        }        return $coordinates;    }    /**     * Prepares and return the dataset as needed by the visualization.     *     * @param array  $data         Raw data     * @param int    $color_number Start index to the color array     * @param array  $scale_data   Data related to scaling     * @param string $label        Label for the data points     * @return string the formatted array of data.     */    private function _prepareDataSet($data, $color_number, $scale_data, $label)    {        $result = '';        // loop through the rows        for ($i = 0 ; $i < count($data) ; $i++) {            $index = $color_number % sizeof($this->_settings['colors']);            $data_element = new PMA_SVG_Data_Point($scale_data[0][$i], $scale_data[1][$i], $data[$i][$label], $data[$i]);            $options = array('color' => $this->_settings['colors'][$index], 'id' => $i);            $this->_dataPoints[] = $data_element;            $result .= $data_element->prepareRowAsSVG($options);            $color_number++;        }        return $result;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Validation callback. * * @package PhpMyAdmin-setup *//** * Core libraries. */require './lib/common.inc.php';$validators = array();require './libraries/config/validate.lib.php';header('Content-type: application/json');$vids = explode(',', filter_input(INPUT_POST, 'id'));$values = json_decode(filter_input(INPUT_POST, 'values'));if (!($values instanceof stdClass)) {    die(__('Wrong data'));}$values = (array)$values;$result = PMA_config_validate($vids, $values, true);if ($result === false) {    $result = 'Wrong data or no validation for ' . $vids;}echo $result !== true ? json_encode($result) : '';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/common.inc.php';// Cross-framing protectionif ( false === $GLOBALS['cfg']['AllowThirdPartyFraming']) {    echo PMA_includeJS('cross_framing_protection.js');}// generate title (unless we already have $page_title, from cookie auth)if (! isset($page_title)) {    if ($GLOBALS['server'] > 0) {        $title = PMA_expandUserString(            ! empty($GLOBALS['table']) ? $GLOBALS['cfg']['TitleTable'] :            (! empty($GLOBALS['db']) ? $GLOBALS['cfg']['TitleDatabase'] :            (! empty($GLOBALS['cfg']['Server']['host']) ? $GLOBALS['cfg']['TitleServer'] :            $GLOBALS['cfg']['TitleDefault']))        );    }} else {    $title = $page_title;}// here, the function does not exist with this configuration: $cfg['ServerDefault'] = 0;$is_superuser    = function_exists('PMA_isSuperuser') && PMA_isSuperuser();$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'jquery/jquery.qtip-1.0.0-rc3.js';$params = array('lang' => $GLOBALS['lang']);if (isset($GLOBALS['db'])) {    $params['db'] = $GLOBALS['db'];}$GLOBALS['js_include'][] = 'messages.php' . PMA_generate_common_url($params);// Append the theme id to this url to invalidate the cache on a theme change$GLOBALS['js_include'][] = 'get_image.js.php?theme=' . urlencode($_SESSION['PMA_Theme']->getId());/** * Here we add a timestamp when loading the file, so that users who * upgrade phpMyAdmin are not stuck with older .js files in their * browser cache. This produces an HTTP 304 request for each file. */// avoid loading twice a js file$GLOBALS['js_include'] = array_unique($GLOBALS['js_include']);foreach ($GLOBALS['js_include'] as $js_script_file) {    echo PMA_includeJS($js_script_file);}// Below javascript Updates the title of the frameset if possible?><script type="text/javascript">// <![CDATA[if (typeof(parent.document) != 'undefined' && typeof(parent.document) != 'unknown'    && typeof(parent.document.title) == 'string') {    parent.document.title = '<?php echo (isset($title) ? PMA_sanitize(PMA_escapeJsString(htmlspecialchars($title))) : ''); ?>';}<?phpif (count($GLOBALS['js_script']) > 0) {    echo implode("\n", $GLOBALS['js_script'])."\n";}foreach ($GLOBALS['js_events'] as $js_event) {    echo "$(window.parent).bind('" . $js_event['event'] . "', "        . $js_event['function'] . ");\n";}?>// ]]></script><?php// Reloads the navigation frame via JavaScript if requiredPMA_reloadNavigation();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common code for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Include all other files that are common * to routines, triggers and events. */require_once './libraries/rte/rte_words.lib.php';require_once './libraries/rte/rte_export.lib.php';require_once './libraries/rte/rte_list.lib.php';require_once './libraries/rte/rte_footer.lib.php';if ($GLOBALS['is_ajax_request'] != true) {    /**     * Displays the header and tabs     */    if (! empty($table) && in_array($table, PMA_DBI_get_tables($db))) {        include_once './libraries/tbl_common.php';        include_once './libraries/tbl_links.inc.php';    } else {        $table = '';        include_once './libraries/db_common.inc.php';        include_once './libraries/db_info.inc.php';    }} else {    /**     * Since we did not include some libraries, we need     * to manually select the required database and     * create the missing $url_query variable     */    if (strlen($db)) {        PMA_DBI_select_db($db);        if (! isset($url_query)) {            $url_query = PMA_generate_common_url($db, $table);        }    }}/** * Generate the conditional classes that will * be used to attach jQuery events to links */$ajax_class = array('add'    => '',                    'edit'   => '',                    'exec'   => '',                    'drop'   => '',                    'export' => '');if ($GLOBALS['cfg']['AjaxEnable']) {    $ajax_class = array('add'    => 'class="ajax_add_anchor"',                        'edit'   => 'class="ajax_edit_anchor"',                        'exec'   => 'class="ajax_exec_anchor"',                        'drop'   => 'class="ajax_drop_anchor"',                        'export' => 'class="ajax_export_anchor"');}/** * Create labels for the list */$titles = PMA_buildActionTitles();/** * Keep a list of errors that occured while * processing an 'Add' or 'Edit' operation. */$errors = array();/** * Call the appropriate main function */switch ($_PMA_RTE) {case 'RTN':    PMA_RTN_main();    break;case 'TRI':    PMA_TRI_main();    break;case 'EVN':    PMA_EVN_main();    break;}/** * Display the footer, if necessary */if ($GLOBALS['is_ajax_request'] != true) {    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__formatted_info(){    return array(        'info' => __('Displays the contents of the column as-is, without running it through htmlspecialchars(). That is, the column is assumed to contain valid HTML.'),        );}/** * */function PMA_transformation_text_plain__formatted($buffer, $options = array(), $meta = ''){    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * holds the PMA_List_Database class * * @package PhpMyAdmin *//** * the list base class */require_once './libraries/List.class.php';/** * handles database lists * * <code> * $PMA_List_Database = new PMA_List_Database($userlink, $controllink); * </code> * * @todo this object should be attached to the PMA_Server object * @todo ? make use of INFORMATION_SCHEMA * @todo ? support --skip-showdatabases and user has only global rights * @access public * @since phpMyAdmin 2.9.10 * @package PhpMyAdmin *//*public*/ class PMA_List_Database extends PMA_List{    /**     * @var mixed   database link resource|object to be used     */    protected $_db_link = null;    /**     * @var mixed   user database link resource|object     */    protected $_db_link_user = null;    /**     * @var mixed   controluser database link resource|object     */    protected $_db_link_control = null;    /**     * @var boolean whether SHOW DATABASES is disabled or not     * @access protected     */    protected $_show_databases_disabled = false;    /**     * @var string command to retrieve databases from server     */    protected $_command = null;    /**     * Constructor     *     * @param mixed   $db_link_user       user database link resource|object     * @param mixed   $db_link_control    control database link resource|object     */    public function __construct($db_link_user = null, $db_link_control = null)    {        $this->_db_link = $db_link_user;        $this->_db_link_user = $db_link_user;        $this->_db_link_control = $db_link_control;        parent::__construct();        $this->build();    }    /**     * checks if the configuration wants to hide some databases     */    protected function _checkHideDatabase()    {        if (empty($GLOBALS['cfg']['Server']['hide_db'])) {            return;        }        foreach ($this->getArrayCopy() as $key => $db) {            if (preg_match('/' . $GLOBALS['cfg']['Server']['hide_db'] . '/', $db)) {                $this->offsetUnset($key);            }        }    }    /**     * retrieves database list from server     *     * @todo    we could also search mysql tables if all fail?     * @param string  $like_db_name   usally a db_name containing wildcards     * @return array     */    protected function _retrieve($like_db_name = null)    {        if ($this->_show_databases_disabled) {            return array();        }        if (null !== $like_db_name) {            $command = "SHOW DATABASES LIKE '" . $like_db_name . "'";        } elseif (null === $this->_command) {            $command = str_replace('#user#', $GLOBALS['cfg']['Server']['user'],                $GLOBALS['cfg']['Server']['ShowDatabasesCommand']);            $this->_command = $command;        } else {            $command = $this->_command;        }        $database_list = PMA_DBI_fetch_result($command, null, null, $this->_db_link);        PMA_DBI_getError();        if ($GLOBALS['errno'] !== 0) {            // failed to get database list, try the control user            // (hopefully there is one and he has SHOW DATABASES right)            $this->_db_link = $this->_db_link_control;            $database_list = PMA_DBI_fetch_result($command, null, null, $this->_db_link);            PMA_DBI_getError();            if ($GLOBALS['errno'] !== 0) {                // failed! we will display a warning that phpMyAdmin could not safely                // retrieve database list, the admin has to setup a control user or                // allow SHOW DATABASES                $GLOBALS['error_showdatabases'] = true;                $this->_show_databases_disabled = true;            }        }        if ($GLOBALS['cfg']['NaturalOrder']) {            natsort($database_list);        } else {            // need to sort anyway, otherwise information_schema            // goes at the top            sort($database_list);        }        return $database_list;    }    /**     * builds up the list     *     */    public function build()    {        if (! $this->_checkOnlyDatabase()) {            $items = $this->_retrieve();            $this->exchangeArray($items);        }        $this->_checkHideDatabase();    }    /**     * checks the only_db configuration     *     * @return  boolean false if there is no only_db, otherwise true     */    protected function _checkOnlyDatabase()    {        if (is_string($GLOBALS['cfg']['Server']['only_db'])         && strlen($GLOBALS['cfg']['Server']['only_db'])) {            $GLOBALS['cfg']['Server']['only_db'] = array(                $GLOBALS['cfg']['Server']['only_db']            );        }        if (! is_array($GLOBALS['cfg']['Server']['only_db'])) {            return false;        }        $items = array();        foreach ($GLOBALS['cfg']['Server']['only_db'] as $each_only_db) {            if ($each_only_db === '*' && ! $this->_show_databases_disabled) {                // append all not already listed dbs to the list                $items = array_merge($items,                    array_diff($this->_retrieve(), $items));                // there can only be one '*', and this can only be last                break;            }            // check if the db name contains wildcard,            // thus containing not escaped _ or %            if (! preg_match('/(^|[^\\\\])(_|%)/', $each_only_db)) {                // ... not contains wildcard                $items[] = PMA_unescape_mysql_wildcards($each_only_db);                continue;            }            if (! $this->_show_databases_disabled) {                $items = array_merge($items, $this->_retrieve($each_only_db));                continue;            }            // @todo induce error, about not using wildcards with SHOW DATABASE disabled?        }        $this->exchangeArray($items);        return true;    }    /**     * returns default item     *     * @return  string  default item     */    public function getDefault()    {        if (strlen($GLOBALS['db'])) {            return $GLOBALS['db'];        }        return $this->getEmpty();    }    /**     * returns array with dbs grouped with extended infos     *     * @param integer $offset     * @param integer $count     * @return  array   db list     */    public function getGroupedDetails($offset, $count)    {        $dbgroups   = array();        if ($GLOBALS['cfg']['ShowTooltip']          && $GLOBALS['cfgRelation']['commwork']) {            $db_tooltips = PMA_getDbComments();        }        if (!$GLOBALS['cfg']['LeftFrameDBTree']) {            $separators = array();        } elseif (is_array($GLOBALS['cfg']['LeftFrameDBSeparator'])) {            $separators = $GLOBALS['cfg']['LeftFrameDBSeparator'];        } elseif (!empty($GLOBALS['cfg']['LeftFrameDBSeparator'])) {            $separators = array($GLOBALS['cfg']['LeftFrameDBSeparator']);        } else {            $separators = array();        }        foreach ($this->getLimitedItems($offset, $count) as $db) {            // Get comments from PMA comments table            $db_tooltip = '';            if (isset($db_tooltips[$db])) {                $db_tooltip = $db_tooltips[$db];            }            $pos = false;            foreach ($separators as $separator) {                // use strpos instead of strrpos; it seems more common to                // have the db name, the separator, then the rest which                // might contain a separator                // like dbname_the_rest                $pos = strpos($db, $separator, 1);                if ($pos !== false) {                    break;                }            }            if ($pos !== false) {                $group          = substr($db, 0, $pos);                $disp_name_cut  = substr($db, $pos);            } else {                $group          = $db;                $disp_name_cut  = $db;            }            $disp_name  = $db;            if ($db_tooltip && $GLOBALS['cfg']['ShowTooltipAliasDB']) {                $disp_name      = $db_tooltip;                $disp_name_cut  = $db_tooltip;                $db_tooltip     = $db;            }            $dbgroups[$group][$db] = array(                'name'          => $db,                'disp_name_cut' => $disp_name_cut,                'disp_name'     => $disp_name,                'comment'       => $db_tooltip,            );            if ($GLOBALS['cfg']['Server']['CountTables']) {                $dbgroups[$group][$db]['num_tables'] = PMA_getTableCount($db);            }        } // end foreach ($GLOBALS['PMA_List_Database']->items as $db)        return $dbgroups;    }    /**     * returns a part of the items     *     * @param integer $offset     * @param integer $count     * @return  array  some items     */    public function getLimitedItems($offset, $count)    {        return array_slice($this->getArrayCopy(), $offset, $count);    }    /**     * returns html code for list with dbs     *     * @return  string  html code list     */    public function getHtmlListGrouped($selected = '', $offset, $count)    {        if (true === $selected) {            $selected = $this->getDefault();        }        $return = '<ul id="databaseList" xml:lang="en" dir="ltr">' . "\n";        foreach ($this->getGroupedDetails($offset, $count) as $group => $dbs) {            if (count($dbs) > 1) {                $return .= '<li class="group"><span>' . htmlspecialchars($group) . '</span><ul>' . "\n";                // whether display db_name cut by the group part                $cut = true;            } else {                // .. or full                $cut = false;            }            foreach ($dbs as $db) {                $return .= '<li';                if ($db['name'] == $selected) {                    $return .= ' class="selected"';                }                $return .= '><a';                if (! empty($db['comment'])) {                    $return .= ' title="' . htmlspecialchars($db['comment']) . '"';                }                $return .= ' href="index.php?' . PMA_generate_common_url($db['name'])                    . '" target="_parent">';                if ($cut) {                    $return .= htmlspecialchars($db['disp_name_cut']);                } else {                    $return .= htmlspecialchars($db['disp_name']);                }                if (! empty($db['num_tables'])) {                    $return .= ' (' . $db['num_tables'] . ')';                }                $return .= '</a></li>' . "\n";            }            if (count($dbs) > 1) {                $return .= '</ul></li>' . "\n";            }        }        $return .= '</ul>';        return $return;    }    /**     * returns html code for select form element with dbs     *     * @todo IE can not handle different text directions in select boxes so,     * as mostly names will be in english, we set the whole selectbox to LTR     * and EN     *     * @return  string  html code select     */    public function getHtmlSelectGrouped($selected = '', $offset, $count)    {        if (true === $selected) {            $selected = $this->getDefault();        }        $return = '<select name="db" id="lightm_db" xml:lang="en" dir="ltr"'            . ' onchange="if (this.value != \'\') window.parent.openDb(this.value);">' . "\n"            . '<option value="" dir="' . $GLOBALS['text_dir'] . '">'            . '(' . __('Databases') . ') ...</option>' . "\n";        foreach ($this->getGroupedDetails($offset, $count) as $group => $dbs) {            if (count($dbs) > 1) {                $return .= '<optgroup label="' . htmlspecialchars($group)                    . '">' . "\n";                // whether display db_name cuted by the group part                $cut = true;            } else {                // .. or full                $cut = false;            }            foreach ($dbs as $db) {                $return .= '<option value="' . htmlspecialchars($db['name']) . '"'                    .' title="' . htmlspecialchars($db['comment']) . '"';                if ($db['name'] == $selected || (PMA_DRIZZLE && strtolower($db['name']) == strtolower($selected))) {                    $return .= ' selected="selected"';                }                $return .= '>' . htmlspecialchars($cut ? $db['disp_name_cut'] : $db['disp_name']);                if (! empty($db['num_tables'])) {                    $return .= ' (' . $db['num_tables'] . ')';                }                $return .= '</option>' . "\n";            }            if (count($dbs) > 1) {                $return .= '</optgroup>' . "\n";            }        }        $return .= '</select>';        return $return;    }    /**     * this is just a backup, if all is fine this can be deleted later     *     * @deprecated     */    protected function _checkAgainstPrivTables()    {        // 1. get allowed dbs from the "mysql.db" table        // User can be blank (anonymous user)        $local_query = "            SELECT DISTINCT `Db` FROM `mysql`.`db`            WHERE `Select_priv` = 'Y'            AND `User`            IN ('" . PMA_sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . "', '')";        $tmp_mydbs = PMA_DBI_fetch_result($local_query, null, null,            $GLOBALS['controllink']);        if ($tmp_mydbs) {            // Will use as associative array of the following 2 code            // lines:            //   the 1st is the only line intact from before            //     correction,            //   the 2nd replaces $dblist[] = $row['Db'];            // Code following those 2 lines in correction continues            // populating $dblist[], as previous code did. But it is            // now populated with actual database names instead of            // with regular expressions.            $tmp_alldbs = PMA_DBI_query('SHOW DATABASES;', $GLOBALS['controllink']);            // all databases cases - part 2            if (isset($tmp_mydbs['%'])) {                while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {                    $dblist[] = $tmp_row[0];                } // end while            } else {                while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {                    $tmp_db = $tmp_row[0];                    if (isset($tmp_mydbs[$tmp_db]) && $tmp_mydbs[$tmp_db] == 1) {                        $dblist[]           = $tmp_db;                        $tmp_mydbs[$tmp_db] = 0;                    } elseif (! isset($dblist[$tmp_db])) {                        foreach ($tmp_mydbs as $tmp_matchpattern => $tmp_value) {                            // fixed bad regexp                            // TODO: db names may contain characters                            //       that are regexp instructions                            $re        = '(^|(\\\\\\\\)+|[^\])';                            $tmp_regex = preg_replace('/' . addcslashes($re, '/') . '%/', '\\1.*', preg_replace('/' . addcslashes($re, '/') . '_/', '\\1.{1}', $tmp_matchpattern));                            // Fixed db name matching                            // 2000-08-28 -- Benjamin Gandon                            if (preg_match('/^' . addcslashes($tmp_regex, '/') . '$/', $tmp_db)) {                                $dblist[] = $tmp_db;                                break;                            }                        } // end while                    } // end if ... elseif ...                } // end while            } // end else            PMA_DBI_free_result($tmp_alldbs);            unset($tmp_mydbs);        } // end if        // 2. get allowed dbs from the "mysql.tables_priv" table        $local_query = 'SELECT DISTINCT Db FROM mysql.tables_priv WHERE Table_priv LIKE \'%Select%\' AND User = \'' . PMA_sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . '\'';        $rs          = PMA_DBI_try_query($local_query, $GLOBALS['controllink']);        if ($rs && @PMA_DBI_num_rows($rs)) {            while ($row = PMA_DBI_fetch_assoc($rs)) {                if (!in_array($row['Db'], $dblist)) {                    $dblist[] = $row['Db'];                }            } // end while            PMA_DBI_free_result($rs);        } // end if    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// Display function/** * void PMA_TableHeader([bool $db_is_information_schema = false]) * display table header (<table><thead>...</thead><tbody>) * * @param boolean $db_is_information_schema * @param boolean $replication */function PMA_TableHeader($db_is_information_schema = false, $replication = false){    $cnt = 0; // Let's count the columns...    if ($db_is_information_schema) {        $action_colspan = 3;    } else {        $action_colspan = 6;    }    echo '<table class="data">' . "\n"        .'<thead>' . "\n"        .'<tr><th></th>' . "\n"        .'    <th>' . PMA_SortableTableHeader(__('Table'), 'table') . '</th>' . "\n";    if ($replication) {     echo '    <th>' . "\n"         .'        ' . __('Replication') . "\n"         .'    </th>';    }    echo '    <th colspan="' . $action_colspan . '">' . "\n"        .'        ' . __('Action') . "\n"        .'    </th>'        // larger values are more interesting so default sort order is DESC        .'    <th>' . PMA_SortableTableHeader(__('Rows'), 'records', 'DESC')        .PMA_showHint(PMA_sanitize(__('May be approximate. See [a@./Documentation.html#faq3_11@Documentation]FAQ 3.11[/a]'))) . "\n"        .'    </th>' . "\n";    if (!($GLOBALS['cfg']['PropertiesNumColumns'] > 1)) {        echo '    <th>' . PMA_SortableTableHeader(__('Type'), 'type') . '</th>' . "\n";        $cnt++;        echo '    <th>' . PMA_SortableTableHeader(__('Collation'), 'collation') . '</th>' . "\n";        $cnt++;    }    if ($GLOBALS['is_show_stats']) {        // larger values are more interesting so default sort order is DESC        echo '    <th>' . PMA_SortableTableHeader(__('Size'), 'size', 'DESC') . '</th>' . "\n"        // larger values are more interesting so default sort order is DESC           . '    <th>' . PMA_SortableTableHeader(__('Overhead'), 'overhead', 'DESC') . '</th>' . "\n";        $cnt += 2;    }    echo '</tr>' . "\n";    echo '</thead>' . "\n";    echo '<tbody>' . "\n";    $GLOBALS['colspan_for_structure'] = $cnt + $action_colspan + 3;} // end function PMA_TableHeader()/** * Creates a clickable column header for table information * * @param string  $title title to use for the link * @param string  $sort  corresponds to sortable data name mapped in libraries/db_info.inc.php * @param string  $initial_sort_order * @return string  link to be displayed in the table header */function PMA_SortableTableHeader($title, $sort, $initial_sort_order = 'ASC'){    // Set some defaults    $requested_sort = 'table';    $requested_sort_order = $future_sort_order = $initial_sort_order;        // If the user requested a sort    if (isset($_REQUEST['sort'])) {        $requested_sort = $_REQUEST['sort'];        if (isset($_REQUEST['sort_order'])) {            $requested_sort_order = $_REQUEST['sort_order'];        }    }    $order_img = '';    $order_link_params = array();    $order_link_params['title'] = __('Sort');    // If this column was requested to be sorted.    if ($requested_sort == $sort) {        if ($requested_sort_order == 'ASC') {            $future_sort_order = 'DESC';            // current sort order is ASC            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow', 'title' => ''));            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow hide', 'title' => ''));            // but on mouse over, show the reverse order (DESC)            $order_link_params['onmouseover'] = "$('.sort_arrow').toggle();";            // on mouse out, show current sort order (ASC)            $order_link_params['onmouseout'] = "$('.sort_arrow').toggle();";        } else {            $future_sort_order = 'ASC';            // current sort order is DESC            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow hide', 'title' => ''));            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow', 'title' => ''));            // but on mouse over, show the reverse order (ASC)            $order_link_params['onmouseover'] = "$('.sort_arrow').toggle();";            // on mouse out, show current sort order (DESC)            $order_link_params['onmouseout'] = "$('.sort_arrow').toggle();";        }    }    $_url_params = array(        'db' => $_REQUEST['db'],    );    $url = 'db_structure.php'.PMA_generate_common_url($_url_params);    // We set the position back to 0 every time they sort.    $url .= "&amp;pos=0&amp;sort=$sort&amp;sort_order=$future_sort_order";    return PMA_linkOrButton($url, $title . $order_img, $order_link_params);} // end function PMA_SortableTableHeader()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once "Export_Relation_Schema.class.php";/** * This Class inherits the XMLwriter class and * helps in developing structure of DIA Schema Export * * @access public * @see http://php.net/manual/en/book.xmlwriter.php */class PMA_DIA extends XMLWriter{    public $title;    public $author;    public $font;    public $fontSize;    /**     * The "PMA_DIA" constructor     *     * Upon instantiation This starts writing the Dia XML document     *     * @return void     * @see XMLWriter::openMemory(),XMLWriter::setIndent(),XMLWriter::startDocument()     */    function __construct()    {        $this->openMemory();        /*         * Set indenting using three spaces,         * so output is formatted         */        $this->setIndent(true);        $this->setIndentString('   ');        /*         * Create the XML document         */        $this->startDocument('1.0', 'UTF-8');    }    /**     * Starts Dia Document     *     * dia document starts by first initializing dia:diagram tag     * then dia:diagramdata contains all the attributes that needed     * to define the document, then finally a Layer starts which     * holds all the objects.     *     * @param string $paper        the size of the paper/document     * @param float  $topMargin    top margin of the paper/document in cm     * @param float  $bottomMargin bottom margin of the paper/document in cm     * @param float  $leftMargin   left margin of the paper/document in cm     * @param float  $rightMargin  right margin of the paper/document in cm     * @param string $portrait     document will be portrait or landscape     *     * @return void     *     * @access public     * @see XMLWriter::startElement(),XMLWriter::writeAttribute(),XMLWriter::writeRaw()     */    function startDiaDoc($paper,$topMargin,$bottomMargin,$leftMargin,$rightMargin,$portrait)    {        if ($portrait == 'P') {            $isPortrait='true';        } else {            $isPortrait='false';        }        $this->startElement('dia:diagram');        $this->writeAttribute('xmlns:dia', 'http://www.lysator.liu.se/~alla/dia/');        $this->startElement('dia:diagramdata');        $this->writeRaw(        '<dia:attribute name="background">          <dia:color val="#ffffff"/>        </dia:attribute>        <dia:attribute name="pagebreak">          <dia:color val="#000099"/>        </dia:attribute>        <dia:attribute name="paper">          <dia:composite type="paper">            <dia:attribute name="name">              <dia:string>#' . $paper . '#</dia:string>            </dia:attribute>            <dia:attribute name="tmargin">              <dia:real val="' . $topMargin . '"/>            </dia:attribute>            <dia:attribute name="bmargin">              <dia:real val="' . $bottomMargin . '"/>            </dia:attribute>            <dia:attribute name="lmargin">              <dia:real val="' . $leftMargin . '"/>            </dia:attribute>            <dia:attribute name="rmargin">              <dia:real val="' . $rightMargin . '"/>            </dia:attribute>            <dia:attribute name="is_portrait">              <dia:boolean val="' . $isPortrait . '"/>            </dia:attribute>            <dia:attribute name="scaling">              <dia:real val="1"/>            </dia:attribute>            <dia:attribute name="fitto">              <dia:boolean val="false"/>            </dia:attribute>          </dia:composite>        </dia:attribute>        <dia:attribute name="grid">          <dia:composite type="grid">            <dia:attribute name="width_x">              <dia:real val="1"/>            </dia:attribute>            <dia:attribute name="width_y">              <dia:real val="1"/>            </dia:attribute>            <dia:attribute name="visible_x">              <dia:int val="1"/>            </dia:attribute>            <dia:attribute name="visible_y">              <dia:int val="1"/>            </dia:attribute>            <dia:composite type="color"/>          </dia:composite>        </dia:attribute>        <dia:attribute name="color">          <dia:color val="#d8e5e5"/>        </dia:attribute>        <dia:attribute name="guides">          <dia:composite type="guides">            <dia:attribute name="hguides"/>            <dia:attribute name="vguides"/>          </dia:composite>        </dia:attribute>');         $this->endElement();         $this->startElement('dia:layer');         $this->writeAttribute('name', 'Background');         $this->writeAttribute('visible', 'true');         $this->writeAttribute('active', 'true');    }    /**     * Ends Dia Document     *     * @return void     * @access public     * @see XMLWriter::endElement(),XMLWriter::endDocument()     */    function endDiaDoc()    {        $this->endElement();        $this->endDocument();    }    /**     * Output Dia Document for download     *     * @param string $fileName name of the dia document     *     * @return void     * @access public     * @see XMLWriter::flush()     */    function showOutput($fileName)    {        if (ob_get_clean()) {            ob_end_clean();        }        $output = $this->flush();        PMA_download_header(            $fileName . '.dia', 'application/x-dia-diagram', strlen($output)        );        print $output;    }}/** * Table preferences/statistics * * This class preserves the table co-ordinates,fields * and helps in drawing/generating the Tables in dia XML document. * * @name Table_Stats * @see PMA_DIA */class Table_Stats{    /**     * Defines properties     */    public $tableName;    public $fields = array();    public $x, $y;    public $primary = array();    public $tableId;    public $tableColor;    /**     * The "Table_Stats" constructor     *     * @param string  $tableName  The table name     * @param integer $pageNumber The current page number (from the     *                            $cfg['Servers'][$i]['table_coords'] table)     * @param boolean $showKeys   Whether to display ONLY keys or not     *     * @return void     *     * @global object    The current dia document     * @global array     The relations settings     * @global string    The current db name     *     * @see PMA_DIA     */    function __construct($tableName, $pageNumber, $showKeys = false)    {        global $dia, $cfgRelation, $db;        $this->tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $dia->dieSchema(                $pageNumber, "DIA",                sprintf(__('The %s table doesn\'t exist!'), $tableName)            );        }        /*         * load fields         * check to see if it will load all fields or only the foreign keys         */        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $sql = 'SELECT x, y FROM '             . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'             . PMA_backquote($cfgRelation['table_coords'])             . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''             . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''             . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $dia->dieSchema(                $pageNumber,                "DIA",                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        /*         * displayfield         */        $this->displayfield = PMA_getDisplayField($db, $tableName);        /*         * index         */        $result = PMA_DBI_query(            'SHOW INDEX FROM ' . PMA_backquote($tableName) . ';',            null,            PMA_DBI_QUERY_STORE        );        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }        /**         * Every object in Dia document needs an ID to identify         * so, we used a static variable to keep the things unique         */        PMA_Dia_Relation_Schema::$objectId += 1;        $this->tableId = PMA_Dia_Relation_Schema::$objectId;    }    /**     * Do draw the table     *     * Tables are generated using object type Database - Table     * primary fields are underlined in tables. Dia object     * is used to generate the XML of Dia Document. Database Table     * Object and their attributes are involved in the combination     * of displaing Database - Table on Dia Document.     *     * @param boolean $changeColor Whether to show color for tables text or not     * if changeColor is true then an array of $listOfColors will be used to choose     * the random colors for tables text we can change/add more colors to this array     *     * @return void     *     * @global object The current Dia document     *     * @access public     * @see PMA_DIA     */    public function tableDraw($changeColor)    {        global $dia;        if ($changeColor) {            $listOfColors = array(                'FF0000',                '000099',                '00FF00'            );            shuffle($listOfColors);            $this->tableColor =  '#' . $listOfColors[0] . '';        } else {            $this->tableColor = '#000000';        }        $factor = 0.1;        $dia->startElement('dia:object');        $dia->writeAttribute('type', 'Database - Table');        $dia->writeAttribute('version', '0');        $dia->writeAttribute('id', '' . $this->tableId . '');        $dia->writeRaw(            '<dia:attribute name="obj_pos">                <dia:point val="'            . ($this->x * $factor) . ',' . ($this->y * $factor) . '"/>            </dia:attribute>            <dia:attribute name="obj_bb">                <dia:rectangle val="'            .($this->x * $factor) . ',' . ($this->y * $factor) . ';9.97,9.2"/>            </dia:attribute>            <dia:attribute name="meta">                <dia:composite type="dict"/>            </dia:attribute>            <dia:attribute name="elem_corner">                <dia:point val="'            . ($this->x * $factor) . ',' . ($this->y * $factor) . '"/>            </dia:attribute>            <dia:attribute name="elem_width">                <dia:real val="5.9199999999999999"/>            </dia:attribute>            <dia:attribute name="elem_height">                <dia:real val="3.5"/>            </dia:attribute>            <dia:attribute name="text_colour">                <dia:color val="' . $this->tableColor . '"/>            </dia:attribute>            <dia:attribute name="line_colour">                <dia:color val="#000000"/>            </dia:attribute>            <dia:attribute name="fill_colour">                <dia:color val="#ffffff"/>            </dia:attribute>            <dia:attribute name="line_width">                <dia:real val="0.10000000000000001"/>            </dia:attribute>            <dia:attribute name="name">                <dia:string>#' . $this->tableName . '#</dia:string>            </dia:attribute>            <dia:attribute name="comment">                <dia:string>##</dia:string>            </dia:attribute>            <dia:attribute name="visible_comment">                <dia:boolean val="false"/>            </dia:attribute>            <dia:attribute name="tagging_comment">                <dia:boolean val="false"/>            </dia:attribute>            <dia:attribute name="underline_primary_key">                <dia:boolean val="true"/>            </dia:attribute>            <dia:attribute name="bold_primary_keys">                <dia:boolean val="true"/>            </dia:attribute>            <dia:attribute name="normal_font">                <dia:font family="monospace" style="0" name="Courier"/>            </dia:attribute>            <dia:attribute name="name_font">                <dia:font family="sans" style="80" name="Helvetica-Bold"/>            </dia:attribute>            <dia:attribute name="comment_font">                <dia:font family="sans" style="0" name="Helvetica"/>            </dia:attribute>            <dia:attribute name="normal_font_height">                <dia:real val="0.80000000000000004"/>            </dia:attribute>            <dia:attribute name="name_font_height">                <dia:real val="0.69999999999999996"/>            </dia:attribute>            <dia:attribute name="comment_font_height">                <dia:real val="0.69999999999999996"/>            </dia:attribute>'        );        $dia->startElement('dia:attribute');        $dia->writeAttribute('name', 'attributes');        foreach ($this->fields as $field) {            $dia->writeRaw(                '<dia:composite type="table_attribute">                    <dia:attribute name="name">                <dia:string>#' . $field . '#</dia:string>                </dia:attribute>                <dia:attribute name="type">                    <dia:string>##</dia:string>                </dia:attribute>                    <dia:attribute name="comment">                <dia:string>##</dia:string>                </dia:attribute>'            );            unset($pm);            $pm = 'false';            if (in_array($field, $this->primary)) {                $pm = 'true';            }            if ($field == $this->displayfield) {                $pm = 'false';            }            $dia->writeRaw(                '<dia:attribute name="primary_key">                    <dia:boolean val="' . $pm . '"/>                </dia:attribute>                <dia:attribute name="nullable">                    <dia:boolean val="false"/>                </dia:attribute>                <dia:attribute name="unique">                    <dia:boolean val="' . $pm . '"/>                </dia:attribute>                </dia:composite>'            );        }        $dia->endElement();        $dia->endElement();    }}/** * Relation preferences/statistics * * This class fetches the table master and foreign fields positions * and helps in generating the Table references and then connects * master table's master field to foreign table's foreign key * in dia XML document. * * @name Relation_Stats * @see PMA_DIA */class Relation_Stats{    /**     * Defines properties     */    public $srcConnPointsRight;    public $srcConnPointsLeft;    public $destConnPointsRight;    public $destConnPointsLeft;    public $masterTableId;    public $foreignTableId;    public $masterTablePos;    public $foreignTablePos;    public $referenceColor;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @return void     *     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        $this->srcConnPointsLeft = $src_pos[0];        $this->srcConnPointsRight = $src_pos[1];        $this->destConnPointsLeft = $dest_pos[0];        $this->destConnPointsRight = $dest_pos[1];        $this->masterTablePos = $src_pos[2];        $this->foreignTablePos = $dest_pos[2];        $this->masterTableId = $master_table->tableId;        $this->foreignTableId = $foreign_table->tableId;    }    /**     * Each Table object have connection points     * which is used to connect to other objects in Dia     * we detect the position of key in fields and     * then determines its left and right connection     * points.     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Table right,left connection points and key position     *     * @access private     */    private function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // left, right, position        $value = 12;        if ($pos != 0) {            return array($pos + $value + $pos, $pos + $value + $pos + 1, $pos);        }        return array($pos + $value , $pos + $value + 1, $pos);    }    /**     * Draws relation references     *     * connects master table's master field to foreign table's     * forein field using Dia object type Database - Reference     * Dia object is used to generate the XML of Dia Document.     * Database reference Object and their attributes are involved     * in the combination of displaing Database - reference on Dia Document.     *     * @param boolean $changeColor Whether to use one color per relation or not     * if changeColor is true then an array of $listOfColors will be used to choose     * the random colors for references lines. we can change/add more colors to this     *     * @return void     *     * @global object The current Dia document     *     * @access public     * @see PMA_PDF     */    public function relationDraw($changeColor)    {        global $dia;        PMA_Dia_Relation_Schema::$objectId += 1;        /*         * if source connection points and destination connection         * points are same then return it false and don't draw that         * relation         */        if ( $this->srcConnPointsRight == $this->destConnPointsRight) {            if ( $this->srcConnPointsLeft == $this->destConnPointsLeft) {                return false;            }        }        if ($changeColor) {            $listOfColors = array(                'FF0000',                '000099',                '00FF00'            );            shuffle($listOfColors);            $this->referenceColor =  '#' . $listOfColors[0] . '';        } else {            $this->referenceColor = '#000000';        }        $dia->writeRaw(            '<dia:object type="Database - Reference" version="0" id="'            . PMA_Dia_Relation_Schema::$objectId . '">            <dia:attribute name="obj_pos">                <dia:point val="3.27,18.9198"/>            </dia:attribute>            <dia:attribute name="obj_bb">                <dia:rectangle val="2.27,8.7175;17.7679,18.9198"/>            </dia:attribute>            <dia:attribute name="meta">                <dia:composite type="dict"/>            </dia:attribute>            <dia:attribute name="orth_points">                <dia:point val="3.27,18.9198"/>                <dia:point val="2.27,18.9198"/>                <dia:point val="2.27,14.1286"/>                <dia:point val="17.7679,14.1286"/>                <dia:point val="17.7679,9.3375"/>                <dia:point val="16.7679,9.3375"/>            </dia:attribute>            <dia:attribute name="orth_orient">                <dia:enum val="0"/>                <dia:enum val="1"/>                <dia:enum val="0"/>                <dia:enum val="1"/>                <dia:enum val="0"/>            </dia:attribute>            <dia:attribute name="orth_autoroute">                <dia:boolean val="true"/>            </dia:attribute>            <dia:attribute name="text_colour">                <dia:color val="#000000"/>            </dia:attribute>            <dia:attribute name="line_colour">                <dia:color val="' . $this->referenceColor . '"/>            </dia:attribute>            <dia:attribute name="line_width">                <dia:real val="0.10000000000000001"/>            </dia:attribute>            <dia:attribute name="line_style">                <dia:enum val="0"/>                <dia:real val="1"/>            </dia:attribute>            <dia:attribute name="corner_radius">                <dia:real val="0"/>            </dia:attribute>            <dia:attribute name="end_arrow">                <dia:enum val="22"/>            </dia:attribute>            <dia:attribute name="end_arrow_length">                <dia:real val="0.5"/>            </dia:attribute>            <dia:attribute name="end_arrow_width">                <dia:real val="0.5"/>            </dia:attribute>            <dia:attribute name="start_point_desc">                <dia:string>#1#</dia:string>            </dia:attribute>            <dia:attribute name="end_point_desc">                <dia:string>#n#</dia:string>            </dia:attribute>            <dia:attribute name="normal_font">                <dia:font family="monospace" style="0" name="Courier"/>            </dia:attribute>            <dia:attribute name="normal_font_height">                <dia:real val="0.59999999999999998"/>            </dia:attribute>            <dia:connections>                <dia:connection handle="0" to="'            . $this->masterTableId . '" connection="'            . $this->srcConnPointsRight . '"/>                <dia:connection handle="1" to="'            . $this->foreignTableId . '" connection="'            . $this->destConnPointsRight . '"/>            </dia:connections>            </dia:object>'        );    }}/** * Dia Relation Schema Class * * Purpose of this class is to generate the Dia XML Document * which is used for representing the database diagrams in Dia IDE * This class uses Database Table and Reference Objects of Dia and with * the combination of these objects actually helps in preparing Dia XML. * * Dia XML is generated by using XMLWriter php extension and this class * inherits Export_Relation_Schema class has common functionality added * to this class * * @name Dia_Relation_Schema */class PMA_Dia_Relation_Schema extends PMA_Export_Relation_Schema{    /**     * Defines properties     */    private $_tables = array();    private $_relations = array();    private $_topMargin = 2.8222000598907471;    private $_bottomMargin = 2.8222000598907471;    private $_leftMargin = 2.8222000598907471;    private $_rightMargin = 2.8222000598907471;    public static $objectId = 0;    /**     * The "PMA_Dia_Relation_Schema" constructor     *     * Upon instantiation This outputs the Dia XML document     * that user can download     *     * @return void     * @see PMA_DIA,Table_Stats,Relation_Stats     */    function __construct()    {        global $dia,$db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowGrid(isset($_POST['show_grid']));        $this->setShowColor($_POST['show_color']);        $this->setShowKeys(isset($_POST['show_keys']));        $this->setOrientation(isset($_POST['orientation']));        $this->setPaper($_POST['paper']);        $this->setExportType($_POST['export_type']);        $dia = new PMA_DIA();        $dia->startDiaDoc(            $this->paper, $this->_topMargin, $this->_bottomMargin,            $this->_leftMargin, $this->_rightMargin, $this->orientation        );        $alltables = $this->getAllTables($db, $this->pageNumber);        foreach ($alltables as $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats(                    $table, $this->pageNumber, $this->showKeys                );            }        }        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    /* put the foreign table on the schema only if selected                     * by the user                     * (do not use array_search() because we would have to                     * to do a === false and this is not PHP3 compatible)                     */                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table, $master_field, $rel['foreign_table'],                            $rel['foreign_field'], $this->showKeys                        );                    }                }            }        }        $this->_drawTables($this->showColor);        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $dia->endDiaDoc();        $dia->showOutput($db . '-' . $this->pageNumber);        exit();    }    /**     * Defines relation objects     *     * @param string $masterTable  The master table name     * @param string $masterField  The relation field in the master table     * @param string $foreignTable The foreign table name     * @param string $foreignField The relation field in the foreign table     * @param bool   $showKeys     Whether to display ONLY keys or not     *     * @return void     *     * @access private     * @see Table_Stats::__construct(),Relation_Stats::__construct()     */    private function _addRelation($masterTable, $masterField, $foreignTable, $foreignField, $showKeys)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $this->pageNumber, $showKeys            );        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $this->pageNumber, $showKeys            );        }        $this->_relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws relation references     *     * connects master table's master field to     * foreign table's forein field using Dia object     * type Database - Reference     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @return void     *     * @access private     * @see Relation_Stats::relationDraw()     */    private function _drawRelations($changeColor)    {        foreach ($this->_relations as $relation) {            $relation->relationDraw($changeColor);        }    }    /**     * Draws tables     *     * Tables are generated using Dia object type Database - Table     * primary fields are underlined and bold in tables     *     * @param boolean $changeColor Whether to show color for tables text or not     *     * @return void     *     * @access private     * @see Table_Stats::tableDraw()     */    private function _drawTables($changeColor)    {        foreach ($this->tables as $table) {            $table->tableDraw($changeColor);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build dumps of tables as JSON * * @package PhpMyAdmin-Export * @subpackage JSON */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['json'] = array(        'text'          => 'JSON',        'extension'     => 'json',        'mime_type'     => 'text/plain',        'options'       => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array(                'type' => 'hidden',                'name' => 'structure_or_data',            ),            array('type' => 'end_group')        ),        'options_text'  => __('Options'),    );} else {    /**     * Set of functions used to build exports of tables     */    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        PMA_exportOutputHandler(            '/**' . $GLOBALS['crlf']            . ' Export to JSON plugin for PHPMyAdmin' . $GLOBALS['crlf']            . ' @version 0.1' . $GLOBALS['crlf']            . ' */' . $GLOBALS['crlf'] . $GLOBALS['crlf']        );        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        PMA_exportOutputHandler('// Database \'' . $db . '\'' . $GLOBALS['crlf'] );        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in JSON format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = stripslashes(PMA_DBI_field_name($result, $i));        }        unset($i);        $buffer = '';        $record_cnt = 0;        while ($record = PMA_DBI_fetch_row($result)) {            $record_cnt++;            // Output table name as comment if this is the first record of the table            if ($record_cnt == 1) {                $buffer .= '// ' . $db . '.' . $table . $crlf . $crlf;                $buffer .= '[{';            } else {                $buffer .= ', {';            }            for ($i = 0; $i < $columns_cnt; $i++) {                $isLastLine = ($i + 1 >= $columns_cnt);                $column = $columns[$i];                if (is_null($record[$i])) {                    $buffer .= '"' . addslashes($column) . '": null' . (! $isLastLine ? ',' : '');                } elseif (is_numeric($record[$i])) {                    $buffer .= '"' . addslashes($column) . '": ' . $record[$i] . (! $isLastLine ? ',' : '');                } else {                    $buffer .= '"' . addslashes($column) . '": "' . addslashes($record[$i]) . '"' . (! $isLastLine ? ',' : '');                }            }            $buffer .= '}';        }        if ($record_cnt) {            $buffer .=  ']';        }        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        PMA_DBI_free_result($result);        return true;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * The Horde_Cipher_Blowfish:: class implements the Horde_Cipher interface * encryption data using the Blowfish algorithm. * * Copyright 2002-2009 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you * did not receive this file, see http://www.fsf.org/copyleft/lgpl.html. * * @author  Mike Cochrane <mike@graftonhall.co.nz> * @package Horde_Cipher */class Horde_Cipher_blowfish{    /**     * Pi Array     *     * @var array     */    protected $p = array(            0x243F6A88, 0x85A308D3, 0x13198A2E, 0x03707344,            0xA4093822, 0x299F31D0, 0x082EFA98, 0xEC4E6C89,            0x452821E6, 0x38D01377, 0xBE5466CF, 0x34E90C6C,            0xC0AC29B7, 0xC97C50DD, 0x3F84D5B5, 0xB5470917,            0x9216D5D9, 0x8979FB1B);    /**     * S Box (s1)     *     * @var array     */    protected $s1 = array(            0xD1310BA6, 0x98DFB5AC, 0x2FFD72DB, 0xD01ADFB7,            0xB8E1AFED, 0x6A267E96, 0xBA7C9045, 0xF12C7F99,            0x24A19947, 0xB3916CF7, 0x0801F2E2, 0x858EFC16,            0x636920D8, 0x71574E69, 0xA458FEA3, 0xF4933D7E,            0x0D95748F, 0x728EB658, 0x718BCD58, 0x82154AEE,            0x7B54A41D, 0xC25A59B5, 0x9C30D539, 0x2AF26013,            0xC5D1B023, 0x286085F0, 0xCA417918, 0xB8DB38EF,            0x8E79DCB0, 0x603A180E, 0x6C9E0E8B, 0xB01E8A3E,            0xD71577C1, 0xBD314B27, 0x78AF2FDA, 0x55605C60,            0xE65525F3, 0xAA55AB94, 0x57489862, 0x63E81440,            0x55CA396A, 0x2AAB10B6, 0xB4CC5C34, 0x1141E8CE,            0xA15486AF, 0x7C72E993, 0xB3EE1411, 0x636FBC2A,            0x2BA9C55D, 0x741831F6, 0xCE5C3E16, 0x9B87931E,            0xAFD6BA33, 0x6C24CF5C, 0x7A325381, 0x28958677,            0x3B8F4898, 0x6B4BB9AF, 0xC4BFE81B, 0x66282193,            0x61D809CC, 0xFB21A991, 0x487CAC60, 0x5DEC8032,            0xEF845D5D, 0xE98575B1, 0xDC262302, 0xEB651B88,            0x23893E81, 0xD396ACC5, 0x0F6D6FF3, 0x83F44239,            0x2E0B4482, 0xA4842004, 0x69C8F04A, 0x9E1F9B5E,            0x21C66842, 0xF6E96C9A, 0x670C9C61, 0xABD388F0,            0x6A51A0D2, 0xD8542F68, 0x960FA728, 0xAB5133A3,            0x6EEF0B6C, 0x137A3BE4, 0xBA3BF050, 0x7EFB2A98,            0xA1F1651D, 0x39AF0176, 0x66CA593E, 0x82430E88,            0x8CEE8619, 0x456F9FB4, 0x7D84A5C3, 0x3B8B5EBE,            0xE06F75D8, 0x85C12073, 0x401A449F, 0x56C16AA6,            0x4ED3AA62, 0x363F7706, 0x1BFEDF72, 0x429B023D,            0x37D0D724, 0xD00A1248, 0xDB0FEAD3, 0x49F1C09B,            0x075372C9, 0x80991B7B, 0x25D479D8, 0xF6E8DEF7,            0xE3FE501A, 0xB6794C3B, 0x976CE0BD, 0x04C006BA,            0xC1A94FB6, 0x409F60C4, 0x5E5C9EC2, 0x196A2463,            0x68FB6FAF, 0x3E6C53B5, 0x1339B2EB, 0x3B52EC6F,            0x6DFC511F, 0x9B30952C, 0xCC814544, 0xAF5EBD09,            0xBEE3D004, 0xDE334AFD, 0x660F2807, 0x192E4BB3,            0xC0CBA857, 0x45C8740F, 0xD20B5F39, 0xB9D3FBDB,            0x5579C0BD, 0x1A60320A, 0xD6A100C6, 0x402C7279,            0x679F25FE, 0xFB1FA3CC, 0x8EA5E9F8, 0xDB3222F8,            0x3C7516DF, 0xFD616B15, 0x2F501EC8, 0xAD0552AB,            0x323DB5FA, 0xFD238760, 0x53317B48, 0x3E00DF82,            0x9E5C57BB, 0xCA6F8CA0, 0x1A87562E, 0xDF1769DB,            0xD542A8F6, 0x287EFFC3, 0xAC6732C6, 0x8C4F5573,            0x695B27B0, 0xBBCA58C8, 0xE1FFA35D, 0xB8F011A0,            0x10FA3D98, 0xFD2183B8, 0x4AFCB56C, 0x2DD1D35B,            0x9A53E479, 0xB6F84565, 0xD28E49BC, 0x4BFB9790,            0xE1DDF2DA, 0xA4CB7E33, 0x62FB1341, 0xCEE4C6E8,            0xEF20CADA, 0x36774C01, 0xD07E9EFE, 0x2BF11FB4,            0x95DBDA4D, 0xAE909198, 0xEAAD8E71, 0x6B93D5A0,            0xD08ED1D0, 0xAFC725E0, 0x8E3C5B2F, 0x8E7594B7,            0x8FF6E2FB, 0xF2122B64, 0x8888B812, 0x900DF01C,            0x4FAD5EA0, 0x688FC31C, 0xD1CFF191, 0xB3A8C1AD,            0x2F2F2218, 0xBE0E1777, 0xEA752DFE, 0x8B021FA1,            0xE5A0CC0F, 0xB56F74E8, 0x18ACF3D6, 0xCE89E299,            0xB4A84FE0, 0xFD13E0B7, 0x7CC43B81, 0xD2ADA8D9,            0x165FA266, 0x80957705, 0x93CC7314, 0x211A1477,            0xE6AD2065, 0x77B5FA86, 0xC75442F5, 0xFB9D35CF,            0xEBCDAF0C, 0x7B3E89A0, 0xD6411BD3, 0xAE1E7E49,            0x00250E2D, 0x2071B35E, 0x226800BB, 0x57B8E0AF,            0x2464369B, 0xF009B91E, 0x5563911D, 0x59DFA6AA,            0x78C14389, 0xD95A537F, 0x207D5BA2, 0x02E5B9C5,            0x83260376, 0x6295CFA9, 0x11C81968, 0x4E734A41,            0xB3472DCA, 0x7B14A94A, 0x1B510052, 0x9A532915,            0xD60F573F, 0xBC9BC6E4, 0x2B60A476, 0x81E67400,            0x08BA6FB5, 0x571BE91F, 0xF296EC6B, 0x2A0DD915,            0xB6636521, 0xE7B9F9B6, 0xFF34052E, 0xC5855664,            0x53B02D5D, 0xA99F8FA1, 0x08BA4799, 0x6E85076A);    /**     * S Box (s2)     *     * @var array     */    protected $s2 = array(            0x4B7A70E9, 0xB5B32944, 0xDB75092E, 0xC4192623,            0xAD6EA6B0, 0x49A7DF7D, 0x9CEE60B8, 0x8FEDB266,            0xECAA8C71, 0x699A17FF, 0x5664526C, 0xC2B19EE1,            0x193602A5, 0x75094C29, 0xA0591340, 0xE4183A3E,            0x3F54989A, 0x5B429D65, 0x6B8FE4D6, 0x99F73FD6,            0xA1D29C07, 0xEFE830F5, 0x4D2D38E6, 0xF0255DC1,            0x4CDD2086, 0x8470EB26, 0x6382E9C6, 0x021ECC5E,            0x09686B3F, 0x3EBAEFC9, 0x3C971814, 0x6B6A70A1,            0x687F3584, 0x52A0E286, 0xB79C5305, 0xAA500737,            0x3E07841C, 0x7FDEAE5C, 0x8E7D44EC, 0x5716F2B8,            0xB03ADA37, 0xF0500C0D, 0xF01C1F04, 0x0200B3FF,            0xAE0CF51A, 0x3CB574B2, 0x25837A58, 0xDC0921BD,            0xD19113F9, 0x7CA92FF6, 0x94324773, 0x22F54701,            0x3AE5E581, 0x37C2DADC, 0xC8B57634, 0x9AF3DDA7,            0xA9446146, 0x0FD0030E, 0xECC8C73E, 0xA4751E41,            0xE238CD99, 0x3BEA0E2F, 0x3280BBA1, 0x183EB331,            0x4E548B38, 0x4F6DB908, 0x6F420D03, 0xF60A04BF,            0x2CB81290, 0x24977C79, 0x5679B072, 0xBCAF89AF,            0xDE9A771F, 0xD9930810, 0xB38BAE12, 0xDCCF3F2E,            0x5512721F, 0x2E6B7124, 0x501ADDE6, 0x9F84CD87,            0x7A584718, 0x7408DA17, 0xBC9F9ABC, 0xE94B7D8C,            0xEC7AEC3A, 0xDB851DFA, 0x63094366, 0xC464C3D2,            0xEF1C1847, 0x3215D908, 0xDD433B37, 0x24C2BA16,            0x12A14D43, 0x2A65C451, 0x50940002, 0x133AE4DD,            0x71DFF89E, 0x10314E55, 0x81AC77D6, 0x5F11199B,            0x043556F1, 0xD7A3C76B, 0x3C11183B, 0x5924A509,            0xF28FE6ED, 0x97F1FBFA, 0x9EBABF2C, 0x1E153C6E,            0x86E34570, 0xEAE96FB1, 0x860E5E0A, 0x5A3E2AB3,            0x771FE71C, 0x4E3D06FA, 0x2965DCB9, 0x99E71D0F,            0x803E89D6, 0x5266C825, 0x2E4CC978, 0x9C10B36A,            0xC6150EBA, 0x94E2EA78, 0xA5FC3C53, 0x1E0A2DF4,            0xF2F74EA7, 0x361D2B3D, 0x1939260F, 0x19C27960,            0x5223A708, 0xF71312B6, 0xEBADFE6E, 0xEAC31F66,            0xE3BC4595, 0xA67BC883, 0xB17F37D1, 0x018CFF28,            0xC332DDEF, 0xBE6C5AA5, 0x65582185, 0x68AB9802,            0xEECEA50F, 0xDB2F953B, 0x2AEF7DAD, 0x5B6E2F84,            0x1521B628, 0x29076170, 0xECDD4775, 0x619F1510,            0x13CCA830, 0xEB61BD96, 0x0334FE1E, 0xAA0363CF,            0xB5735C90, 0x4C70A239, 0xD59E9E0B, 0xCBAADE14,            0xEECC86BC, 0x60622CA7, 0x9CAB5CAB, 0xB2F3846E,            0x648B1EAF, 0x19BDF0CA, 0xA02369B9, 0x655ABB50,            0x40685A32, 0x3C2AB4B3, 0x319EE9D5, 0xC021B8F7,            0x9B540B19, 0x875FA099, 0x95F7997E, 0x623D7DA8,            0xF837889A, 0x97E32D77, 0x11ED935F, 0x16681281,            0x0E358829, 0xC7E61FD6, 0x96DEDFA1, 0x7858BA99,            0x57F584A5, 0x1B227263, 0x9B83C3FF, 0x1AC24696,            0xCDB30AEB, 0x532E3054, 0x8FD948E4, 0x6DBC3128,            0x58EBF2EF, 0x34C6FFEA, 0xFE28ED61, 0xEE7C3C73,            0x5D4A14D9, 0xE864B7E3, 0x42105D14, 0x203E13E0,            0x45EEE2B6, 0xA3AAABEA, 0xDB6C4F15, 0xFACB4FD0,            0xC742F442, 0xEF6ABBB5, 0x654F3B1D, 0x41CD2105,            0xD81E799E, 0x86854DC7, 0xE44B476A, 0x3D816250,            0xCF62A1F2, 0x5B8D2646, 0xFC8883A0, 0xC1C7B6A3,            0x7F1524C3, 0x69CB7492, 0x47848A0B, 0x5692B285,            0x095BBF00, 0xAD19489D, 0x1462B174, 0x23820E00,            0x58428D2A, 0x0C55F5EA, 0x1DADF43E, 0x233F7061,            0x3372F092, 0x8D937E41, 0xD65FECF1, 0x6C223BDB,            0x7CDE3759, 0xCBEE7460, 0x4085F2A7, 0xCE77326E,            0xA6078084, 0x19F8509E, 0xE8EFD855, 0x61D99735,            0xA969A7AA, 0xC50C06C2, 0x5A04ABFC, 0x800BCADC,            0x9E447A2E, 0xC3453484, 0xFDD56705, 0x0E1E9EC9,            0xDB73DBD3, 0x105588CD, 0x675FDA79, 0xE3674340,            0xC5C43465, 0x713E38D8, 0x3D28F89E, 0xF16DFF20,            0x153E21E7, 0x8FB03D4A, 0xE6E39F2B, 0xDB83ADF7);    /**     * S Box (s3)     *     * @var array     */    protected $s3 = array(            0xE93D5A68, 0x948140F7, 0xF64C261C, 0x94692934,            0x411520F7, 0x7602D4F7, 0xBCF46B2E, 0xD4A20068,            0xD4082471, 0x3320F46A, 0x43B7D4B7, 0x500061AF,            0x1E39F62E, 0x97244546, 0x14214F74, 0xBF8B8840,            0x4D95FC1D, 0x96B591AF, 0x70F4DDD3, 0x66A02F45,            0xBFBC09EC, 0x03BD9785, 0x7FAC6DD0, 0x31CB8504,            0x96EB27B3, 0x55FD3941, 0xDA2547E6, 0xABCA0A9A,            0x28507825, 0x530429F4, 0x0A2C86DA, 0xE9B66DFB,            0x68DC1462, 0xD7486900, 0x680EC0A4, 0x27A18DEE,            0x4F3FFEA2, 0xE887AD8C, 0xB58CE006, 0x7AF4D6B6,            0xAACE1E7C, 0xD3375FEC, 0xCE78A399, 0x406B2A42,            0x20FE9E35, 0xD9F385B9, 0xEE39D7AB, 0x3B124E8B,            0x1DC9FAF7, 0x4B6D1856, 0x26A36631, 0xEAE397B2,            0x3A6EFA74, 0xDD5B4332, 0x6841E7F7, 0xCA7820FB,            0xFB0AF54E, 0xD8FEB397, 0x454056AC, 0xBA489527,            0x55533A3A, 0x20838D87, 0xFE6BA9B7, 0xD096954B,            0x55A867BC, 0xA1159A58, 0xCCA92963, 0x99E1DB33,            0xA62A4A56, 0x3F3125F9, 0x5EF47E1C, 0x9029317C,            0xFDF8E802, 0x04272F70, 0x80BB155C, 0x05282CE3,            0x95C11548, 0xE4C66D22, 0x48C1133F, 0xC70F86DC,            0x07F9C9EE, 0x41041F0F, 0x404779A4, 0x5D886E17,            0x325F51EB, 0xD59BC0D1, 0xF2BCC18F, 0x41113564,            0x257B7834, 0x602A9C60, 0xDFF8E8A3, 0x1F636C1B,            0x0E12B4C2, 0x02E1329E, 0xAF664FD1, 0xCAD18115,            0x6B2395E0, 0x333E92E1, 0x3B240B62, 0xEEBEB922,            0x85B2A20E, 0xE6BA0D99, 0xDE720C8C, 0x2DA2F728,            0xD0127845, 0x95B794FD, 0x647D0862, 0xE7CCF5F0,            0x5449A36F, 0x877D48FA, 0xC39DFD27, 0xF33E8D1E,            0x0A476341, 0x992EFF74, 0x3A6F6EAB, 0xF4F8FD37,            0xA812DC60, 0xA1EBDDF8, 0x991BE14C, 0xDB6E6B0D,            0xC67B5510, 0x6D672C37, 0x2765D43B, 0xDCD0E804,            0xF1290DC7, 0xCC00FFA3, 0xB5390F92, 0x690FED0B,            0x667B9FFB, 0xCEDB7D9C, 0xA091CF0B, 0xD9155EA3,            0xBB132F88, 0x515BAD24, 0x7B9479BF, 0x763BD6EB,            0x37392EB3, 0xCC115979, 0x8026E297, 0xF42E312D,            0x6842ADA7, 0xC66A2B3B, 0x12754CCC, 0x782EF11C,            0x6A124237, 0xB79251E7, 0x06A1BBE6, 0x4BFB6350,            0x1A6B1018, 0x11CAEDFA, 0x3D25BDD8, 0xE2E1C3C9,            0x44421659, 0x0A121386, 0xD90CEC6E, 0xD5ABEA2A,            0x64AF674E, 0xDA86A85F, 0xBEBFE988, 0x64E4C3FE,            0x9DBC8057, 0xF0F7C086, 0x60787BF8, 0x6003604D,            0xD1FD8346, 0xF6381FB0, 0x7745AE04, 0xD736FCCC,            0x83426B33, 0xF01EAB71, 0xB0804187, 0x3C005E5F,            0x77A057BE, 0xBDE8AE24, 0x55464299, 0xBF582E61,            0x4E58F48F, 0xF2DDFDA2, 0xF474EF38, 0x8789BDC2,            0x5366F9C3, 0xC8B38E74, 0xB475F255, 0x46FCD9B9,            0x7AEB2661, 0x8B1DDF84, 0x846A0E79, 0x915F95E2,            0x466E598E, 0x20B45770, 0x8CD55591, 0xC902DE4C,            0xB90BACE1, 0xBB8205D0, 0x11A86248, 0x7574A99E,            0xB77F19B6, 0xE0A9DC09, 0x662D09A1, 0xC4324633,            0xE85A1F02, 0x09F0BE8C, 0x4A99A025, 0x1D6EFE10,            0x1AB93D1D, 0x0BA5A4DF, 0xA186F20F, 0x2868F169,            0xDCB7DA83, 0x573906FE, 0xA1E2CE9B, 0x4FCD7F52,            0x50115E01, 0xA70683FA, 0xA002B5C4, 0x0DE6D027,            0x9AF88C27, 0x773F8641, 0xC3604C06, 0x61A806B5,            0xF0177A28, 0xC0F586E0, 0x006058AA, 0x30DC7D62,            0x11E69ED7, 0x2338EA63, 0x53C2DD94, 0xC2C21634,            0xBBCBEE56, 0x90BCB6DE, 0xEBFC7DA1, 0xCE591D76,            0x6F05E409, 0x4B7C0188, 0x39720A3D, 0x7C927C24,            0x86E3725F, 0x724D9DB9, 0x1AC15BB4, 0xD39EB8FC,            0xED545578, 0x08FCA5B5, 0xD83D7CD3, 0x4DAD0FC4,            0x1E50EF5E, 0xB161E6F8, 0xA28514D9, 0x6C51133C,            0x6FD5C7E7, 0x56E14EC4, 0x362ABFCE, 0xDDC6C837,            0xD79A3234, 0x92638212, 0x670EFA8E, 0x406000E0);    /**     * S Box (s4)     *     * @var array     */    protected $s4 = array(            0x3A39CE37, 0xD3FAF5CF, 0xABC27737, 0x5AC52D1B,            0x5CB0679E, 0x4FA33742, 0xD3822740, 0x99BC9BBE,            0xD5118E9D, 0xBF0F7315, 0xD62D1C7E, 0xC700C47B,            0xB78C1B6B, 0x21A19045, 0xB26EB1BE, 0x6A366EB4,            0x5748AB2F, 0xBC946E79, 0xC6A376D2, 0x6549C2C8,            0x530FF8EE, 0x468DDE7D, 0xD5730A1D, 0x4CD04DC6,            0x2939BBDB, 0xA9BA4650, 0xAC9526E8, 0xBE5EE304,            0xA1FAD5F0, 0x6A2D519A, 0x63EF8CE2, 0x9A86EE22,            0xC089C2B8, 0x43242EF6, 0xA51E03AA, 0x9CF2D0A4,            0x83C061BA, 0x9BE96A4D, 0x8FE51550, 0xBA645BD6,            0x2826A2F9, 0xA73A3AE1, 0x4BA99586, 0xEF5562E9,            0xC72FEFD3, 0xF752F7DA, 0x3F046F69, 0x77FA0A59,            0x80E4A915, 0x87B08601, 0x9B09E6AD, 0x3B3EE593,            0xE990FD5A, 0x9E34D797, 0x2CF0B7D9, 0x022B8B51,            0x96D5AC3A, 0x017DA67D, 0xD1CF3ED6, 0x7C7D2D28,            0x1F9F25CF, 0xADF2B89B, 0x5AD6B472, 0x5A88F54C,            0xE029AC71, 0xE019A5E6, 0x47B0ACFD, 0xED93FA9B,            0xE8D3C48D, 0x283B57CC, 0xF8D56629, 0x79132E28,            0x785F0191, 0xED756055, 0xF7960E44, 0xE3D35E8C,            0x15056DD4, 0x88F46DBA, 0x03A16125, 0x0564F0BD,            0xC3EB9E15, 0x3C9057A2, 0x97271AEC, 0xA93A072A,            0x1B3F6D9B, 0x1E6321F5, 0xF59C66FB, 0x26DCF319,            0x7533D928, 0xB155FDF5, 0x03563482, 0x8ABA3CBB,            0x28517711, 0xC20AD9F8, 0xABCC5167, 0xCCAD925F,            0x4DE81751, 0x3830DC8E, 0x379D5862, 0x9320F991,            0xEA7A90C2, 0xFB3E7BCE, 0x5121CE64, 0x774FBE32,            0xA8B6E37E, 0xC3293D46, 0x48DE5369, 0x6413E680,            0xA2AE0810, 0xDD6DB224, 0x69852DFD, 0x09072166,            0xB39A460A, 0x6445C0DD, 0x586CDECF, 0x1C20C8AE,            0x5BBEF7DD, 0x1B588D40, 0xCCD2017F, 0x6BB4E3BB,            0xDDA26A7E, 0x3A59FF45, 0x3E350A44, 0xBCB4CDD5,            0x72EACEA8, 0xFA6484BB, 0x8D6612AE, 0xBF3C6F47,            0xD29BE463, 0x542F5D9E, 0xAEC2771B, 0xF64E6370,            0x740E0D8D, 0xE75B1357, 0xF8721671, 0xAF537D5D,            0x4040CB08, 0x4EB4E2CC, 0x34D2466A, 0x0115AF84,            0xE1B00428, 0x95983A1D, 0x06B89FB4, 0xCE6EA048,            0x6F3F3B82, 0x3520AB82, 0x011A1D4B, 0x277227F8,            0x611560B1, 0xE7933FDC, 0xBB3A792B, 0x344525BD,            0xA08839E1, 0x51CE794B, 0x2F32C9B7, 0xA01FBAC9,            0xE01CC87E, 0xBCC7D1F6, 0xCF0111C3, 0xA1E8AAC7,            0x1A908749, 0xD44FBD9A, 0xD0DADECB, 0xD50ADA38,            0x0339C32A, 0xC6913667, 0x8DF9317C, 0xE0B12B4F,            0xF79E59B7, 0x43F5BB3A, 0xF2D519FF, 0x27D9459C,            0xBF97222C, 0x15E6FC2A, 0x0F91FC71, 0x9B941525,            0xFAE59361, 0xCEB69CEB, 0xC2A86459, 0x12BAA8D1,            0xB6C1075E, 0xE3056A0C, 0x10D25065, 0xCB03A442,            0xE0EC6E0E, 0x1698DB3B, 0x4C98A0BE, 0x3278E964,            0x9F1F9532, 0xE0D392DF, 0xD3A0342B, 0x8971F21E,            0x1B0A7441, 0x4BA3348C, 0xC5BE7120, 0xC37632D8,            0xDF359F8D, 0x9B992F2E, 0xE60B6F47, 0x0FE3F11D,            0xE54CDA54, 0x1EDAD891, 0xCE6279CF, 0xCD3E7E6F,            0x1618B166, 0xFD2C1D05, 0x848FD2C5, 0xF6FB2299,            0xF523F357, 0xA6327623, 0x93A83531, 0x56CCCD02,            0xACF08162, 0x5A75EBB5, 0x6E163697, 0x88D273CC,            0xDE966292, 0x81B949D0, 0x4C50901B, 0x71C65614,            0xE6C6C7BD, 0x327A140A, 0x45E1D006, 0xC3F27B9A,            0xC9AA53FD, 0x62A80F00, 0xBB25BFE2, 0x35BDD2F6,            0x71126905, 0xB2040222, 0xB6CBCF7C, 0xCD769C2B,            0x53113EC0, 0x1640E3D3, 0x38ABBD60, 0x2547ADF0,            0xBA38209C, 0xF746CE76, 0x77AFA1C5, 0x20756060,            0x85CBFE4E, 0x8AE88DD8, 0x7AAAF9B0, 0x4CF9AA7E,            0x1948C25C, 0x02FB8A8C, 0x01C36AE4, 0xD6EBE1F9,            0x90D4F869, 0xA65CDEA0, 0x3F09252D, 0xC208E69F,            0xB74E6132, 0xCE77E25B, 0x578FDFE3, 0x3AC372E6);    /**     * The number of rounds to do     *     * @var integer     */    protected $_rounds = 16;    /**     * Set the key to be used for en/decryption.     *     * @param string $key  The key to use.     * @return bool     */    public function setKey($key)    {        $key = array_values(unpack('C*', $key));        $keyLen = count($key);        if ($keyLen == 0) {            return false;        }        $keyPos = $keyXor = 0;        for ($i = 0, $iMax = count($this->p); $i < $iMax; ++$i) {            for ($t = 0; $t < 4; $t++) {                $keyXor = ($keyXor << 8) | (($key[$keyPos]) & 0x0ff);                if (++$keyPos == $keyLen) {                    $keyPos = 0;                }            }            $this->p[$i] = $this->p[$i] ^ $keyXor;        }        $encZero = array('L' => 0, 'R' => 0);        for ($i = 0; $i + 1 < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->p[$i] = $encZero['L'];          $this->p[$i + 1] = $encZero['R'];        }        $iMax = count($this->s1);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s1[$i] = $encZero['L'];          $this->s1[$i + 1] = $encZero['R'];        }        $iMax = count($this->s2);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s2[$i] = $encZero['L'];          $this->s2[$i + 1] = $encZero['R'];        }        $iMax = count($this->s3);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s3[$i] = $encZero['L'];          $this->s3[$i + 1] = $encZero['R'];        }        $iMax = count($this->s4);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s4[$i] = $encZero['L'];          $this->s4[$i + 1] = $encZero['R'];        }    }    /**     * Encrypt a block of data.     *     * @param string $block      The data to encrypt.     * @param string $key        The key to use.     *     * @return string  The encrypted output.     */    public function encryptBlock($block, $key = null)    {        if (!is_null($key)) {            $this->setKey($key);        }        list($L, $R) = array_values(unpack('N*', $block));        $parts = $this->_encryptBlock($L, $R);        return pack('NN', $parts['L'], $parts['R']);    }    /**     * Encrypt left and right halves of a block of data.     *     * @param integer $L  Left half of the data.     * @param integer $R  Right half of the data.     *     * @return array  A hash, with keys 'L' and 'R', and the encrypted data as     *                the values.     */    protected function _encryptBlock($L, $R)    {        $L ^= $this->p[0];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[1];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[2];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[3];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[4];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[5];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[6];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[7];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[8];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[9];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[10];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[11];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[12];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[13];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[14];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[15];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[16];        $R ^= $this->p[17];        return array('L' => $R, 'R' => $L);    }    /**     * Decrypt a block of data.     *     * @param string $block  The data to decrypt.     * @param string $key    The key to use.     *     * @return string  The decrypted output.     */    public function decryptBlock($block, $key = null)    {        if (!is_null($key)) {            $this->setKey($key);        }// change for phpMyAdmin        $L = null;        $R = null;        $retarray = array_values(unpack('N*', $block));        if (isset($retarray[0])) {            $L = $retarray[0];        }        if (isset($retarray[1])) {            $R = $retarray[1];        }// end change for phpMyAdmin        $L ^= $this->p[17];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[16];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[15];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[14];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[13];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[12];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[11];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[10];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[9];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[8];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[7];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[6];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[5];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[4];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[3];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[2];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[1];        return pack("NN", $R ^ $this->p[0], $L);    }}// higher-level functions:/** * Encryption using blowfish algorithm * * @param string  original data * @param string  the secret * * @return  string  the encrypted result * * @access  public * */function PMA_blowfish_encrypt($data, $secret){    $pma_cipher = new Horde_Cipher_blowfish;    $encrypt = '';    $mod = strlen($data) % 8;    if ($mod > 0) {        $data .= str_repeat("\0", 8 - $mod);    }    foreach (str_split($data, 8) as $chunk) {        $encrypt .= $pma_cipher->encryptBlock($chunk, $secret);    }    return base64_encode($encrypt);}/** * Decryption using blowfish algorithm * * @param string  encrypted data * @param string  the secret * * @return  string  original data * * @access  public * */function PMA_blowfish_decrypt($encdata, $secret){    $pma_cipher = new Horde_Cipher_blowfish;    $decrypt = '';    $data = base64_decode($encdata);    foreach (str_split($data, 8) as $chunk) {        $decrypt .= $pma_cipher->decryptBlock($chunk, $secret);    }    return trim($decrypt);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays index edit/creation form and handles it * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/Index.class.php';require_once './libraries/tbl_common.php';// Get fields and stores their name/type$fields = array();foreach (PMA_DBI_get_columns_full($db, $table) as $row) {    if (preg_match('@^(set|enum)\((.+)\)$@i', $row['Type'], $tmp)) {        $tmp[2]         = substr(preg_replace('@([^,])\'\'@', '\\1\\\'',            ',' . $tmp[2]), 1);        $fields[$row['Field']] = $tmp[1] . '(' . str_replace(',', ', ', $tmp[2]) . ')';    } else {        $fields[$row['Field']] = $row['Type'];    }} // end while// Prepares the form valuesif (isset($_REQUEST['index'])) {    if (is_array($_REQUEST['index'])) {        // coming already from form        $index = new PMA_Index($_REQUEST['index']);    } else {        $index = PMA_Index::singleton($db, $table, $_REQUEST['index']);    }} else {    $index = new PMA_Index;}/** * Process the data from the edit/create index form, * run the query to build the new index * and moves back to "tbl_sql.php" */if (isset($_REQUEST['do_save_data'])) {    $error = false;    // $sql_query is the one displayed in the query box    $sql_query = 'ALTER TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table);    // Drops the old index    if (! empty($_REQUEST['old_index'])) {        if ($_REQUEST['old_index'] == 'PRIMARY') {            $sql_query .= ' DROP PRIMARY KEY,';        } else {            $sql_query .= ' DROP INDEX ' . PMA_backquote($_REQUEST['old_index']) . ',';        }    } // end if    // Builds the new one    switch ($index->getType()) {        case 'PRIMARY':            if ($index->getName() == '') {                $index->setName('PRIMARY');            } elseif ($index->getName() != 'PRIMARY') {                $error = PMA_Message::error(__('The name of the primary key must be "PRIMARY"!'));            }            $sql_query .= ' ADD PRIMARY KEY';            break;        case 'FULLTEXT':        case 'UNIQUE':        case 'INDEX':        case 'SPATIAL':            if ($index->getName() == 'PRIMARY') {                $error = PMA_Message::error(__('Can\'t rename index to PRIMARY!'));            }            $sql_query .= ' ADD ' . $index->getType() . ' '                . ($index->getName() ? PMA_backquote($index->getName()) : '');            break;    } // end switch    $index_fields = array();    foreach ($index->getColumns() as $key => $column) {        $index_fields[$key] = PMA_backquote($column->getName());        if ($column->getSubPart()) {            $index_fields[$key] .= '(' . $column->getSubPart() . ')';        }    } // end while    if (empty($index_fields)) {        $error = PMA_Message::error(__('No index parts defined!'));    } else {        $sql_query .= ' (' . implode(', ', $index_fields) . ')';    }    if (! $error) {        PMA_DBI_query($sql_query);        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['index_table'] = PMA_Index::getView($table, $db);            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';        exit;    } else {        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['error'] = $error;            PMA_ajaxResponse($error, false);        }        $error->display();    }} // end builds the new index/** * Display the form to edit/create an index */// Displays headers (if needed)$GLOBALS['js_include'][] = 'indexes.js';require_once './libraries/tbl_info.inc.php';if ($GLOBALS['is_ajax_request'] != true) {    include_once './libraries/tbl_links.inc.php';}if (isset($_REQUEST['index']) && is_array($_REQUEST['index'])) {    // coming already from form    $add_fields        = count($_REQUEST['index']['columns']['names']) - $index->getColumnCount();    if (isset($_REQUEST['add_fields'])) {        $add_fields += $_REQUEST['added_fields'];    }} elseif (isset($_REQUEST['create_index'])) {    $add_fields = $_REQUEST['added_fields'];} else {    $add_fields = 1;}// end preparing form values?><form action="./tbl_indexes.php" method="post" name="index_frm" id="index_frm" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>    onsubmit="if (typeof(this.elements['index[Key_name]'].disabled) != 'undefined') {        this.elements['index[Key_name]'].disabled = false}"><?php$form_params = array(    'db'    => $db,    'table' => $table,);if (isset($_REQUEST['create_index'])) {    $form_params['create_index'] = 1;} elseif (isset($_REQUEST['old_index'])) {    $form_params['old_index'] = $_REQUEST['old_index'];} elseif (isset($_REQUEST['index'])) {    $form_params['old_index'] = $_REQUEST['index'];}echo PMA_generate_common_hidden_inputs($form_params);?><fieldset id="index_edit_fields"><?phpif ($GLOBALS['is_ajax_request'] != true) {?>    <legend><?php    if (isset($_REQUEST['create_index'])) {        echo __('Add index');    } else {        echo __('Edit index');    }?>    </legend><?php}?><div class='index_info'>    <div>        <div class="label">            <strong>                <label for="input_index_name">                    <?php echo __('Index name:'); ?>                    <?php echo PMA_showhint(PMA_Message::notice(__('("PRIMARY" <b>must</b> be the name of and <b>only of</b> a primary key!)'))); ?>                </label>            </strong>        </div>        <input type="text" name="index[Key_name]" id="input_index_name" size="25"            value="<?php echo htmlspecialchars($index->getName()); ?>" onfocus="this.select()" />    </div>    <div>        <div class="label">            <strong>                <label for="select_index_type">                    <?php echo __('Index type:'); ?>                    <?php echo PMA_showMySQLDocu('SQL-Syntax', 'ALTER_TABLE'); ?>                </label>            </strong>        </div>        <select name="index[Index_type]" id="select_index_type" >            <?php echo $index->generateIndexSelector(); ?>        </select>    </div>    <div class="clearfloat"></div></div><table id="index_columns"><thead><tr><th><?php echo __('Column'); ?></th>    <th><?php echo __('Size'); ?></th></tr></thead><tbody><?php$odd_row = true;$spatial_types = array(    'geometry', 'point', 'linestring', 'polygon', 'multipoint',    'multilinestring', 'multipolygon', 'geomtrycollection');foreach ($index->getColumns() as $column) {    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td><select name="index[columns][names][]">            <option value="">-- <?php echo __('Ignore'); ?> --</option>    <?php    foreach ($fields as $field_name => $field_type) {        if (($index->getType() != 'FULLTEXT' || preg_match('/(char|text)/i', $field_type))            && ($index->getType() != 'SPATIAL' || in_array($field_type, $spatial_types))        ) {            echo '<option value="' . htmlspecialchars($field_name) . '"'                 . (($field_name == $column->getName()) ? ' selected="selected"' : '') . '>'                 . htmlspecialchars($field_name) . ' [' . htmlspecialchars($field_type) . ']'                 . '</option>' . "\n";        }    } // end foreach $fields    ?>        </select>    </td>    <td><input type="text" size="5" onfocus="this.select()"            name="index[columns][sub_parts][]"            value="<?php if ($index->getType() != 'SPATIAL') { echo $column->getSubPart(); } ?>" />    </td></tr>    <?php    $odd_row = !$odd_row;} // end foreach $edited_index_info['Sequences']for ($i = 0; $i < $add_fields; $i++) {    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td><select name="index[columns][names][]">            <option value="">-- <?php echo __('Ignore'); ?> --</option>    <?php    foreach ($fields as $field_name => $field_type) {        echo '<option value="' . htmlspecialchars($field_name) . '">'             . htmlspecialchars($field_name) . ' [' . htmlspecialchars($field_type) . ']'             . '</option>' . "\n";    } // end foreach $fields    ?>        </select>    </td>    <td><input type="text" size="5" onfocus="this.select()"            name="index[columns][sub_parts][]" value="" />    </td></tr>    <?php    $odd_row = !$odd_row;} // end foreach $edited_index_info['Sequences']?></tbody></table></fieldset><fieldset class="tblFooters"><?php    if ($GLOBALS['is_ajax_request'] != true) {?>    <input type="submit" name="do_save_data" value="<?php echo __('Save'); ?>" />    <span id="addMoreColumns"><?phpecho __('Or') . ' ';printf(    __('Add to index &nbsp;%s&nbsp;column(s)') . "\n",    '<input type="text" name="added_fields" size="2" value="1" />');echo '<input type="submit" name="add_fields" value="' . __('Go') . '" />' . "\n";?>    </span><?php    } else {        $btn_value = sprintf(__('Add %d column(s) to index'), 1);        echo '<div class="slider"></div>';        echo '<div class="add_fields">';        echo '<input type="submit" value="' . $btn_value . '" />';        echo '</div>';    }?></fieldset></form><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * print css file from theme Original * * @package PhpMyAdmin-theme * @subpackage pmahomme */?>/* For printview */body, table, th, td {    color:             #000000;    background-color:  #ffffff;}img {    border: 0;}table, th, td {    border-width:      0.1em;    border-color:      #000000;    border-style:      solid;}table {    border-collapse:   collapse;    border-spacing:    0;}th, td {    padding:           0.2em;}th {    font-weight:       bold;    background-color:  #e5e5e5;}.hide {    display: none;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_application_octetstream__download_info(){    return array(        'info' =>  __('Displays a link to download the binary data of the column. You can use the first option to specify the filename, or use the second option as the name of a column which contains the filename. If you use the second option, you need to set the first option to the empty string.'),        );}/** * */function PMA_transformation_application_octetstream__download(&$buffer, $options = array(), $meta = ''){    global $row, $fields_meta;    if (isset($options[0]) && !empty($options[0])) {        $cn = $options[0]; // filename    } else {        if (isset($options[1]) && !empty($options[1])) {            foreach ($fields_meta as $key => $val) {                if ($val->name == $options[1]) {                    $pos = $key;                    break;                }            }            if (isset($pos)) {                $cn = $row[$pos];            }        }        if (empty($cn)) {            $cn = 'binary_file.dat';        }    }    return      sprintf(        '<a href="transformation_wrapper.php%s&amp;ct=application/octet-stream&amp;cn=%s" title="%s">%s</a>',        $options['wrapper_link'],        urlencode($cn),        htmlspecialchars($cn),        htmlspecialchars($cn)      );}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * File for vendor customisation, you can change here paths or some behaviour, * which vendors such as Linux distibutions might want to change. * * For changing this file you should know what you are doing. For this reason * options here are not part of normal configuration. * * @package PhpMyAdmin *//** * Path to changelog file, can be gzip compressed. Useful when you want to * have documentation somewhere else, eg. /usr/share/doc. */define('CHANGELOG_FILE', './ChangeLog');/** * Path to license file. Useful when you want to have documentation somewhere * else, eg. /usr/share/doc. */define('LICENSE_FILE', './LICENSE');/** * Path to config file generated using setup script. */define('SETUP_CONFIG_FILE', './config/config.inc.php');/** * Whether setup requires writable directory where config * file will be generated. */define('SETUP_DIR_WRITABLE', true);/** * Directory where configuration files are stored. * It is not used directly in code, just a convenient * define used further in this file. */define('CONFIG_DIR', './');/** * Filename of a configuration file. */define('CONFIG_FILE', CONFIG_DIR . 'config.inc.php');/** * Filename of custom header file. */define('CUSTOM_HEADER_FILE', CONFIG_DIR . 'config.header.inc.php');/** * Filename of custom footer file. */define('CUSTOM_FOOTER_FILE', CONFIG_DIR . 'config.footer.inc.php');/** * Default value for check for version upgrades. */define('VERSION_CHECK_DEFAULT', true);/** * Path to gettext.inc file. Useful when you want php-gettext somewhere else, * eg. /usr/share/php/gettext/gettext.inc. */define('GETTEXT_INC', './libraries/php-gettext/gettext.inc');?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Engines *//** * */require_once './libraries/engines/innodb.lib.php';/** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_innobase extends PMA_StorageEngine_innodb{}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_application_octetstream__hex_info(){    return array(        'info' =>  __('Displays hexadecimal representation of data. Optional first parameter specifies how often space will be added (defaults to 2 nibbles).'),        );}/** * */function PMA_transformation_application_octetstream__hex($buffer, $options = array(), $meta = ''){    // possibly use a global transform and feed it with special options:    // include './libraries/transformations/global.inc.php';    if (!isset($options[0])) {        $options[0] = 2;    } else {        $options[0] = (int)$options[0];    }    if ($options[0] < 1) {        return bin2hex($buffer);    } else {        return chunk_split(bin2hex($buffer), $options[0], ' ');    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface for the zip extension * @package    phpMyAdmin *//** * Gets zip file contents * * @param string $file           zip file * @param string $specific_entry regular expression to match a file * * @return array ($error_message, $file_data); $error_message *                  is empty if no error */function PMA_getZipContents($file, $specific_entry = null){    $error_message = '';    $file_data = '';    $zip_handle = zip_open($file);    if (is_resource($zip_handle)) {        $first_zip_entry = zip_read($zip_handle);        if (false === $first_zip_entry) {            $error_message = __('No files found inside ZIP archive!');        } else {            /* Is the the zip really an ODS file? */            $read = zip_entry_read($first_zip_entry);            $ods_mime = 'application/vnd.oasis.opendocument.spreadsheet';            if (!strcmp($ods_mime, $read)) {                $specific_entry = '/^content\.xml$/';            }            if (isset($specific_entry)) {                /* Return the correct contents, not just the first entry */                for ( ; ; ) {                    $entry = zip_read($zip_handle);                    if (is_resource($entry)) {                        if (preg_match($specific_entry, zip_entry_name($entry))) {                            zip_entry_open($zip_handle, $entry, 'r');                            $file_data = zip_entry_read($entry, zip_entry_filesize($entry));                            zip_entry_close($entry);                            break;                        }                    } else {                        /**                         * Either we have reached the end of the zip and still                         * haven't found $specific_entry or there was a parsing                         * error that we must display                         */                        if ($entry === false) {                            $error_message = __('Error in ZIP archive:') . ' Could not find "' . $specific_entry . '"';                        } else {                            $error_message = __('Error in ZIP archive:') . ' ' . PMA_getZipError($zip_handle);                        }                        break;                    }                }            } else {                zip_entry_open($zip_handle, $first_zip_entry, 'r');                /* File pointer has already been moved, so include what was read above */                $file_data = $read;                $file_data .= zip_entry_read($first_zip_entry, zip_entry_filesize($first_zip_entry));                zip_entry_close($first_zip_entry);            }        }    } else {        $error_message = __('Error in ZIP archive:') . ' ' . PMA_getZipError($zip_handle);    }    zip_close($zip_handle);    return (array('error' => $error_message, 'data' => $file_data));}/** * Returns the file name of the first file that matches the given $file_regexp. * * @param string $file_regexp regular expression for the file name to match * @param string $file        zip archive * * @return string the file name of the first file that matches the given regexp */function PMA_findFileFromZipArchive ($file_regexp, $file){    $zip_handle = zip_open($file);    $found = false;    if (is_resource($zip_handle)) {        $entry = zip_read($zip_handle);        while (is_resource($entry)) {            if (preg_match($file_regexp, zip_entry_name($entry))) {                $file_name = zip_entry_name($entry);                zip_close($zip_handle);                return $file_name;            }            $entry = zip_read($zip_handle);        }    }    zip_close($zip_handle);    return false;}/** * Returns the number of files in the zip archive. * * @param string $file zip archive * * @return int the number of files in the zip archive */function PMA_getNoOfFilesInZip($file){    $count = 0;    $zip_handle = zip_open($file);    $found = false;    if (is_resource($zip_handle)) {        $entry = zip_read($zip_handle);        while (is_resource($entry)) {            $count++;            $entry = zip_read($zip_handle);        }    }    zip_close($zip_handle);    return $count;}/** * Extracts a set of files from the given zip archive to a given destinations. * * @param string $zip_path    path to the zip archive * @param string $destination destination to extract files * @param array  $entries     files in archive that should be extracted * * @return bool true on sucess, false otherwise */function PMA_zipExtract($zip_path, $destination, $entries){    $zip = new ZipArchive;    if ($zip->open($zip_path) === true) {        $zip->extractTo($destination, $entries);        $zip->close();        return true;    }    return false;}/**  * Gets zip error message  *  * @param integer $code error code  *  * @return string error message */function PMA_getZipError($code){    // I don't think this needs translation    switch ($code) {    case ZIPARCHIVE::ER_MULTIDISK:        $message = 'Multi-disk zip archives not supported';        break;    case ZIPARCHIVE::ER_READ:        $message = 'Read error';        break;    case ZIPARCHIVE::ER_CRC:        $message = 'CRC error';        break;    case ZIPARCHIVE::ER_NOZIP:        $message = 'Not a zip archive';        break;    case ZIPARCHIVE::ER_INCONS:        $message = 'Zip archive inconsistent';        break;    default:        $message = $code;    }    return $message;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form edit view * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/form_processing.lib.php';require './libraries/config/setup.forms.php';$formset_id = filter_input(INPUT_GET, 'formset');$mode = filter_input(INPUT_GET, 'mode');if (! isset($forms[$formset_id])) {    die(__('Incorrect formset, check $formsets array in setup/frames/form.inc.php'));}if (isset($GLOBALS['strConfigFormset_' . $formset_id])) {    echo '<h2>' . $GLOBALS['strConfigFormset_' . $formset_id] . '</h2>';}$form_display = new FormDisplay();foreach ($forms[$formset_id] as $form_name => $form) {    $form_display->registerForm($form_name, $form);}process_formset($form_display);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';require './libraries/db_common.inc.php';require './libraries/db_info.inc.php';$tab_column       = get_tab_info();$script_tabs      = get_script_tabs();$script_contr     = get_script_contr();$tab_pos          = get_tab_pos();$tables_pk_or_unique_keys = get_pk_or_unique_keys();$tables_all_keys  = get_all_keys();$params = array('lang' => $GLOBALS['lang']);if (isset($GLOBALS['db'])) {    $params['db'] = $GLOBALS['db'];}require_once './libraries/header_scripts.inc.php';?>    <script type="text/javascript">    // <![CDATA[<?phpecho '    var server = "' . PMA_escapeJsString($server) . '";    var db = "' . PMA_escapeJsString($db) . '";    var token = "' . PMA_escapeJsString($token) . '";';    echo "\n";    if (isset($_REQUEST['query'])) {    echo '     $(document).ready(function() {        $(".trigger").click(function() {        $(".panel").toggle("fast");        $(this).toggleClass("active");        return false;        });    });';    }?>    // ]]>    </script>    <script src="js/pmd/ajax.js" type="text/javascript"></script>    <script src="js/pmd/history.js" type="text/javascript"></script>    <script src="js/pmd/move.js" type="text/javascript"></script>    <!--[if IE]>    <script src="js/pmd/iecanvas.js" type="text/javascript"></script>    <![endif]--><?phpecho $script_tabs . $script_contr . $script_display_field;?></head><body onload="Main()" class="general_body" id="pmd_body"><div class="pmd_header" id="top_menu">        <a href="#"            onclick="Show_left_menu(document.getElementById('key_Show_left_menu')); return false" class="M_butt first" target="_self">            <img id='key_Show_left_menu' title="<?php echo __('Show/Hide left menu'); ?>"                alt="v" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/downarrow2_m.png" /></a>        <a href="#" onclick="Save2(); return false"            class="M_butt" target="_self"        ><img title="<?php echo __('Save position') ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/save.png" alt=""        /></a><a href="#" onclick="Start_table_new(); return false"            class="M_butt" target="_self"        ><img title="<?php echo __('Create table')?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/table.png" alt=""        /></a><a href="#" onclick="Start_relation(); return false"            class="M_butt" id="rel_button" target="_self"        ><img title="<?php echo __('Create relation') ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/relation.png" alt=""        /></a><a href="#" onclick="Start_display_field(); return false"            class="M_butt" id="display_field_button" target="_self"        ><img title="<?php echo __('Choose column to display') ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/display_field.png" alt=""        /></a><a href="#" onclick="location.reload(); return false"            class="M_butt" target="_self"        ><img title="<?php echo __('Reload'); ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/reload.png" alt=""        /></a><a href="Documentation.html#faq6_31" target="documentation"            class="M_butt" target="_self"        ><img title="<?php echo __('Help'); ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/help.png" alt=""        /></a><img class="M_bord" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bord.png" alt=""        /><a href="#" onclick="Angular_direct(); return false"            class="M_butt" id="angular_direct_button" target="_self"        ><img title="<?php echo __('Angular links') . ' / ' . __('Direct links'); ?>"                src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/ang_direct.png" alt=""        /></a><a href="#" onclick="Grid(); return false"            class="M_butt" id="grid_button" target="_self"        ><img title="<?php echo __('Snap to grid') ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/grid.png" alt=""        /></a><img class="M_bord" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bord.png" alt=""        /><a href="#"            onclick="Small_tab_all(document.getElementById('key_SB_all')); return false" class="M_butt" target="_self"        ><img id='key_SB_all' title="<?php echo __('Small/Big All'); ?>" alt="v"                src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/downarrow1.png"        /></a><a href="#" onclick="Small_tab_invert(); return false" class="M_butt" target="_self" ><img title="<?php echo __('Toggle small/big'); ?>" alt="key" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bottom.png" /></a><a href="#" onclick="Relation_lines_invert(); return false" class="M_butt" target="_self" ><img title="<?php echo __('Toggle relation lines'); ?>" alt="key" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/toggle_lines.png" /></a><img class="M_bord" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bord.png" alt="" /><a href="#" onclick="PDF_save(); return false"            class="M_butt" target="_self"        ><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/pdf.png" alt="key" width="20" height="20"                title="<?php echo __('Import/Export coordinates for PDF schema'); ?>" /></a         >        <?php if (isset($_REQUEST['query'])) {            echo '<a href="#" onclick="build_query(\'SQL Query on Database\', 0)" onmousedown="return false;"            class="M_butt" target="_self">';            echo '<img src="'. $GLOBALS['pmaThemeImage'] . 'pmd/query_builder.png" alt="key" width="20" height="20" title="';            echo __('Build Query');            echo '"/></a>'; }?>         <a href="#"            onclick="Top_menu_right(document.getElementById('key_Left_Right')); return false" class="M_butt last" target="_self">            <img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/2rightarrow_m.png" id="key_Left_Right" alt=">"                title="<?php echo __('Move Menu'); ?>" /></a></div><form action="" method="post" name="form1"><div id="osn_tab">  <canvas class="pmd" id="canvas" width="100" height="100" onclick="Canvas_click(this)"></canvas></div><div id="layer_menu" style="display:none;"><div align="center" style="padding-top:5px;">    <a href="#"        onclick="Hide_tab_all(document.getElementById('key_HS_all')); return false" class="M_butt" target="_self">    <img title="<?php echo __('Hide/Show all'); ?>" alt="v"        src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/downarrow1.png" id='key_HS_all' /></a>    <a href="#"        onclick="No_have_constr(document.getElementById('key_HS')); return false" class="M_butt" target="_self">    <img title="<?php echo __('Hide/Show Tables with no relation'); ?>" alt="v"        src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/downarrow2.png" id='key_HS' /></a></div><div id="id_scroll_tab" class="scroll_tab">    <table width="100%" style="padding-left: 3px;"><?php$name_cnt = count($GLOBALS['PMD']['TABLE_NAME']);for ($i = 0; $i < $name_cnt; $i++) {    ?>    <tr><td title="<?php echo __('Structure'); ?>" width="1px"            onmouseover="this.className='L_butt2_2'"            onmouseout="this.className='L_butt2_1'">            <img onclick="Start_tab_upd('<?php echo $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i]; ?>');"                src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/exec.png" alt="" /></td>        <td width="1px">            <input onclick="VisibleTab(this,'<?php echo $GLOBALS['PMD_URL']["TABLE_NAME"][$i]; ?>')"                title="<?php echo __('Hide'); ?>"                id="check_vis_<?php echo $GLOBALS['PMD_URL']["TABLE_NAME"][$i]; ?>"                style="margin:0px;" type="checkbox"                value="<?php echo $GLOBALS['PMD_URL']["TABLE_NAME"][$i]; ?>"                <?php                if (isset($tab_pos[$GLOBALS['PMD']["TABLE_NAME"][$i]])) {                    echo $tab_pos[$GLOBALS['PMD']["TABLE_NAME"][$i]]["H"] ? 'checked="checked"' : '';                } else {                    echo 'checked="checked"';                }                ?> /></td>        <td class="pmd_Tabs" onmouseover="this.className='pmd_Tabs2'"            onmouseout="this.className='pmd_Tabs'"            onclick="Select_tab('<?php echo $GLOBALS['PMD_URL']["TABLE_NAME"][$i]; ?>');">            <?php echo $GLOBALS['PMD_OUT']["TABLE_NAME"][$i]; ?></td>    </tr>    <?php}?>    </table></div><div align="center">    <?php echo __('Number of tables') . ': ' . $name_cnt; ?></div><div align="right">    <div id="layer_menu_sizer" onmousedown="layer_menu_cur_click=1">    </div></div></div><?phpfor ($i = 0; $i < count($GLOBALS['PMD']["TABLE_NAME"]); $i++) {    $t_n = $GLOBALS['PMD']["TABLE_NAME"][$i];    $t_n_url = $GLOBALS['PMD_URL']["TABLE_NAME"][$i];    ?><input name="t_x[<?php echo $t_n_url ?>]" type="hidden" id="t_x_<?php echo $t_n_url ?>_" /><input name="t_y[<?php echo $t_n_url ?>]" type="hidden" id="t_y_<?php echo $t_n_url ?>_" /><input name="t_v[<?php echo $t_n_url ?>]" type="hidden" id="t_v_<?php echo $t_n_url ?>_" /><input name="t_h[<?php echo $t_n_url ?>]" type="hidden" id="t_h_<?php echo $t_n_url ?>_" /><table id="<?php echo $t_n_url ?>" cellpadding="0" cellspacing="0" class="pmd_tab"   style="position: absolute;          left: <?php if (isset($tab_pos[$t_n])) echo $tab_pos[$t_n]["X"]; else echo rand(180, 800); ?>px;          top: <?php if (isset($tab_pos[$t_n])) echo $tab_pos[$t_n]["Y"]; else echo rand(30, 500); ?>px;          visibility: <?php if (isset($tab_pos[$t_n])) echo $tab_pos[$t_n]["H"] ? "visible" : "hidden"; ?>;         "><thead><tr>    <?php    if (isset($_REQUEST['query'])) {        echo '<td class="select_all">';        echo '<input type="checkbox" value="select_all_'.htmlspecialchars($t_n_url).'" style="margin: 0px;" ';        echo 'id="select_all_'.htmlspecialchars($t_n_url).'" title="select all" ';        echo 'onclick="Select_all(\''. htmlspecialchars($t_n_url) .'\',\''.htmlspecialchars($GLOBALS['PMD_OUT']["OWNER"][$i]).'\')"></td>';    }?>    <td class="small_tab" onmouseover="this.className='small_tab2';"        onmouseout="this.className='small_tab';"        id="id_hide_tbody_<?php echo $t_n_url ?>"        onclick="Small_tab('<?php echo $t_n_url ?>', 1)"><?php        // no space alloawd here, between tags and content !!!        // JavaScript function does require this        if (! isset($tab_pos[$t_n]) || ! empty($tab_pos[$t_n]["V"])) {            echo 'v';        } else {            echo '&gt;';        }        ?></td>    <td class="small_tab_pref" onmouseover="this.className='small_tab_pref2';"        onmouseout="this.className='small_tab_pref';"        onclick="Start_tab_upd('<?php echo $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i]; ?>');">        <img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/exec_small.png" alt="" /></td>    <td nowrap="nowrap" id="id_zag_<?php echo $t_n_url ?>" class="tab_zag"        onmousedown="cur_click=document.getElementById('<?php echo $t_n_url ?>');"/        onmouseover="Table_onover('<?php echo $t_n_url ?>',0,<?php echo (isset($_REQUEST['query'])? 1 : 0 )?> )"        onmouseout="Table_onover('<?php echo $t_n_url ?>',1,<?php echo (isset($_REQUEST['query']) ? 1 : 0 )?>)">        <span class='owner'>        <?php        echo $GLOBALS['PMD_OUT']["OWNER"][$i];        echo '.</span>';        echo $GLOBALS['PMD_OUT']["TABLE_NAME_SMALL"][$i];        ?></td>    <?php    if (isset($_REQUEST['query'])) {        echo '<td class="tab_zag"  onmouseover="Table_onover(\''.htmlspecialchars($t_n_url).'\',0,1)"  id="id_zag_'.htmlspecialchars($t_n_url).'_2"';        echo 'onmousedown="cur_click=document.getElementById(\''.htmlspecialchars($t_n_url).'\');"';        echo 'onmouseout="Table_onover(\''.htmlspecialchars($t_n_url).'\',1,1)">';    }?></tr></thead><tbody id="id_tbody_<?php echo $t_n_url ?>"    <?php    if (isset($tab_pos[$t_n]) && empty($tab_pos[$t_n]["V"])) {        echo 'style="display: none;"';    }?>>    <?php    $display_field = PMA_getDisplayField($db, $GLOBALS['PMD']["TABLE_NAME_SMALL"][$i]);    for ($j = 0, $id_cnt = count($tab_column[$t_n]["COLUMN_ID"]); $j < $id_cnt; $j++) {        ?><tr id="id_tr_<?php        echo $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i] . '.'            . urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]) ?>"        <?php        if ($display_field == $tab_column[$t_n]["COLUMN_NAME"][$j]) {            echo ' class="tab_field_3" ';        } else {            echo ' class="tab_field" ';        }        ?>    onmouseover="old_class = this.className; this.className = 'tab_field_2';"    onmouseout="this.className = old_class;"    onmousedown="Click_field('<?php        echo $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i]."','".urlencode($tab_column[$t_n]["COLUMN_NAME"][$j])."',";        if (! PMA_foreignkey_supported($GLOBALS['PMD']['TABLE_TYPE'][$i])) {            echo (isset($tables_pk_or_unique_keys[$t_n . "." . $tab_column[$t_n]["COLUMN_NAME"][$j]]) ? 1 : 0);        } else {            // if foreign keys are supported, it's not necessary that the            // index is a primary key            echo (isset($tables_all_keys[$t_n.".".$tab_column[$t_n]["COLUMN_NAME"][$j]]) ? 1 : 0);        }        ?>)">    <?php    if (isset($_REQUEST['query'])) {        echo '<td class="select_all">';        echo '<input value="'.htmlspecialchars($t_n_url).urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'"';        echo 'type="checkbox" id="select_'.htmlspecialchars($t_n_url).'._'.urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'" ';        echo 'style="margin: 0px;" title="select_'.urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'" ';        echo 'onclick="store_column(\''.urlencode($GLOBALS['PMD_OUT']["TABLE_NAME_SMALL"][$i]).'\',\''.htmlspecialchars($GLOBALS['PMD_OUT']["OWNER"][$i]).'\',\''.urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'\')"></td>';    }?>    <td width="10px" colspan="3"        id="<?php echo $t_n_url.".".urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]) ?>">        <div style="white-space:nowrap">        <?php        if (isset($tables_pk_or_unique_keys[$t_n.".".$tab_column[$t_n]["COLUMN_NAME"][$j]])) {            ?>                <img src="<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/FieldKey_small.png"                    alt="*" />            <?php        } else {            ?>                    <img src="<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Field_small<?php            if (strstr($tab_column[$t_n]["TYPE"][$j], 'char')             || strstr($tab_column[$t_n]["TYPE"][$j], 'text')) {                echo '_char';            } elseif (strstr($tab_column[$t_n]["TYPE"][$j], 'int')             || strstr($tab_column[$t_n]["TYPE"][$j], 'float')             || strstr($tab_column[$t_n]["TYPE"][$j], 'double')             || strstr($tab_column[$t_n]["TYPE"][$j], 'decimal')) {                echo '_int';            } elseif (strstr($tab_column[$t_n]["TYPE"][$j], 'date')             || strstr($tab_column[$t_n]["TYPE"][$j], 'time')             || strstr($tab_column[$t_n]["TYPE"][$j], 'year')) {                echo '_date';            }            ?>.png" alt="*" />            <?php        }        echo htmlspecialchars($tab_column[$t_n]["COLUMN_NAME"][$j]            . " : " . $tab_column[$t_n]["TYPE"][$j], ENT_QUOTES);        ?>        </div>   </td>   <?php   if (isset($_REQUEST['query'])) {       //$temp = $GLOBALS['PMD_OUT']["OWNER"][$i].'.'.$GLOBALS['PMD_OUT']["TABLE_NAME_SMALL"][$i];       echo '<td class="small_tab_pref" onmouseover="this.className=\'small_tab_pref2\';"';       echo 'onmouseout="this.className=\'small_tab_pref\';"';       echo 'onclick="Click_option(\'pmd_optionse\',\''.urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'\',\''.$GLOBALS['PMD_OUT']["TABLE_NAME_SMALL"][$i].'\')" >';       echo  '<img src="' . $GLOBALS['pmaThemeImage'] . 'pmd/exec_small.png" title="options" alt="" /></td> ';    } ?></tr>        <?php    }    ?></tbody></table>    <?php}?></form><div id="pmd_hint"></div><div id='layer_action' style="display:none;">Load...</div><table id="layer_new_relation" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%" ></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">        <thead>        <tr>            <td colspan="2" align="center" nowrap="nowrap"><strong><?php echo __('Create relation'); ?></strong></td>        </tr>        </thead>        <tbody id="foreign_relation">        <tr>        <td colspan="2" align="center" nowrap="nowrap"><strong>FOREIGN KEY</strong></td>        </tr>        <tr>            <td width="58" nowrap="nowrap">on delete</td>            <td width="102"><select name="on_delete" id="on_delete">                    <option value="nix" selected="selected">--</option>                    <option value="CASCADE">CASCADE</option>                    <option value="SET NULL">SET NULL</option>                    <option value="NO ACTION">NO ACTION</option>                    <option value="RESTRICT">RESTRICT</option>                </select>            </td>        </tr>        <tr>            <td nowrap="nowrap">on update</td>            <td><select name="on_update" id="on_update">                    <option value="nix" selected="selected">--</option>                    <option value="CASCADE">CASCADE</option>                    <option value="SET NULL">SET NULL</option>                    <option value="NO ACTION">NO ACTION</option>                    <option value="RESTRICT">RESTRICT</option>                </select>            </td>        </tr>        </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="New_relation()" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('layer_new_relation').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="layer_upd_relation" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%"></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="100%" border="0" align="center" cellpadding="2" cellspacing="0">        <tr>            <td colspan="3" align="center" nowrap="nowrap"><strong><?php echo __('Delete relation'); ?></strong></td>        </tr>        <tr>            <td colspan="3" align="center" nowrap="nowrap">                <input name="Button" type="button" class="butt"                    onclick="Upd_relation()" value="<?php echo __('Delete'); ?>" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('layer_upd_relation').style.display = 'none'; Re_load();" />            </td>        </tr>    </table></td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="pmd_optionse" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%" ></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">       <thead>        <tr>            <td colspan="2" rowspan="2" id="option_col_name" nowrap="nowrap" align="center"></td>        </tr>        </thead>        <tbody id="where">        <tr><td align="center" nowrap="nowrap"><b>WHERE</b></td></tr>        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Relation operator'); ?></td>            <td width="102"><select name="rel_opt" id="rel_opt">                    <option value="--" selected="selected"> -- </option>                    <option value="=" > = </option>                    <option value=">"> > </option>                    <option value="<"> < </option>                    <option value=">="> >= </option>                    <option value="<="> <= </option>                    <option value="NOT"> NOT </option>                    <option value="IN"> IN </option>                    <option value="EXCEPT"> <?php echo __('Except'); ?> </option>                    <option value="NOT IN"> NOT IN </option>                </select>            </td>        </tr>        <tr>        <td nowrap="nowrap"><?php echo __('Value'); ?>/<br /><?php echo __('subquery'); ?></td>            <td><textarea id="Query" value="" cols="18"></textarea>            </td>        </tr>        <tr><td align="center" nowrap="nowrap"><b><?php echo __('Rename to'); ?></b></td></tr>        <tr>        <td width="58" nowrap="nowrap"><?php echo __('New name'); ?></td>            <td width="102"><input type="text" value="" id="new_name"/></td>        </tr>        <tr><td align="center" nowrap="nowrap"><b><?php echo __('Aggregate'); ?></b></td></tr>         <tr>         <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="operator" id="operator">                    <option value="---" selected="selected">---</option>                    <option value="sum" > SUM </option>                    <option value="min"> MIN </option>                    <option value="max"> MAX </option>                    <option value="avg"> AVG </option>                    <option value="count"> COUNT </option>                    </select>           </td></tr>           <tr>                <td nowrap="nowrap" width="58" align="center"><b>GROUP BY</b></td>                <td><input type="checkbox" value="groupby" id="groupby"/></td>           </tr>           <tr>                <td nowrap="nowrap" width="58" align="center"><b>ORDER BY</b></td>                <td><input type="checkbox" value="orderby" id="orderby"/></td>           </tr>          <tr><td align="center" nowrap="nowrap"><b>HAVING</b></td></tr>          <tr>          <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="h_operator" id="h_operator">                    <option value="---" selected="selected">---</option>                    <option value="None" > <?php echo __('None'); ?> </option>                    <option value="sum" > SUM </option>                    <option value="min"> MIN </option>                    <option value="max"> MAX </option>                    <option value="avg"> AVG </option>                    <option value="count"> COUNT </option>                    </select>               </td></tr>            <tr>            <td width="58" nowrap="nowrap"><?php echo __('Relation operator'); ?></td>            <td width="102"><select name="h_rel_opt" id="h_rel_opt">                    <option value="--" selected="selected"> -- </option>                    <option value="=" > = </option>                    <option value=">"> > </option>                    <option value="<"> < </option>                    <option value=">="> >= </option>                    <option value="<="> <= </option>                    <option value="NOT"> NOT </option>                    <option value="IN"> IN </option>                    <option value="EXCEPT"> <?php echo __('Except'); ?> </option>                    <option value="NOT IN"> NOT IN </option>                </select>            </td>            </tr>            <tr>            <td width="58" nowrap="nowrap"><?php echo __('Value'); ?>/<br/><?php echo __('subquery'); ?></td>                <td width="102"><textarea id="having" value="" cols="18"></textarea></td>            </tr>        </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="add_object()" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="Close_option()" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="query_rename_to" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%" ></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">        <thead>        <tr>        <td colspan="2" align="center" nowrap="nowrap"><strong><?php echo __('Rename to'); ?></strong></td>        </tr>        </thead>        <tbody id="rename_to">        <tr>        <td width="58" nowrap="nowrap"><?php echo __('New name'); ?></td>            <td width="102">                <input type="text" value="" id="e_rename"/>            </td>        </tr>        </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="edit('Rename')" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('query_rename_to').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="query_having" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody>    <tr>        <td class="frams1" width="10px"></td>        <td class="frams5" width="99%" ></td>        <td class="frams2" width="10px"><div class="bor"></div></td>    </tr><tr>    <td class="frams8"></td>    <td class="input_tab">    <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">       <thead>        <tr>          <td colspan="2" align="center" nowrap="nowrap"><strong>HAVING</strong></td>        </tr>        </thead>        <tbody id="rename_to">        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="hoperator" id="hoperator">                    <option value="---" selected="selected">---</option>                    <option value="None" > None </option>                    <option value="sum" > SUM </option>                    <option value="min"> MIN </option>                    <option value="max"> MAX </option>                    <option value="avg"> AVG </option>                    <option value="count"> COUNT </option>                    </select>           </td></tr>        <tr>        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="hrel_opt" id="hrel_opt">                <option value="--" selected="selected"> -- </option>                    <option value="=" > = </option>                    <option value=">"> > </option>                    <option value="<"> < </option>                    <option value=">="> >= </option>                    <option value="<="> <= </option>                    <option value="NOT"> NOT </option>                    <option value="IN"> IN </option>                    <option value="EXCEPT"> <?php echo __('Except'); ?> </option>                    <option value="NOT IN"> NOT IN </option>                </select>            </td>        </tr>        <tr>        <td nowrap="nowrap"><?php echo __('Value'); ?>/<br /><?php echo __('subquery'); ?></td>            <td><textarea id="hQuery" value="" cols="18"></textarea>            </td>            </tr>         </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="edit('Having')" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('query_having').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="query_Aggregate" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%" ></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">        <thead>        <tr>        <td colspan="2" align="center" nowrap="nowrap"><strong><?php echo __('Aggregate'); ?></strong></td>        </tr>        </thead>        <tbody>        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102">                <select name="operator" id="e_operator">                    <option value="---" selected="selected">---</option>                    <option value="sum" > SUM </option>                    <option value="min"> MIN </option>                    <option value="max"> MAX </option>                       <option value="avg"> AVG </option>                    <option value="avg"> COUNT </option>                </select>           </td></tr>        </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="edit('Aggregate')" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('query_Aggregate').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="query_where" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody>    <tr>        <td class="frams1" width="10px"></td>        <td class="frams5" width="99%" ></td>        <td class="frams2" width="10px"><div class="bor"></div></td>    </tr><tr>    <td class="frams8"></td>    <td class="input_tab">    <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">       <thead>        <tr>          <td colspan="2" align="center" nowrap="nowrap"><strong>WHERE</strong></td>        </tr>        </thead>        <tbody id="rename_to">        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="erel_opt" id="erel_opt">                <option value="--" selected="selected"> -- </option>                    <option value="=" > = </option>                    <option value=">"> > </option>                    <option value="<"> < </option>                    <option value=">="> >= </option>                    <option value="<="> <= </option>                    <option value="NOT"> NOT </option>                    <option value="IN"> IN </option>                    <option value="EXCEPT"> <?php echo __('Except'); ?> </option>                    <option value="NOT IN"> NOT IN </option>                </select>            </td>        </tr>        <tr>        <td nowrap="nowrap"><?php echo __('Value'); ?>/<br /><?php echo __('subquery'); ?></td>            <td><textarea id="eQuery" value="" cols="18"></textarea>            </td>            </tr>         </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="edit('Where')" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('query_where').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><?phpif (! empty($_REQUEST['query'])) {    echo '<div class="panel">';    echo '<div style="clear:both;"></div>';    echo '<div id="ab"></div>';    echo '<div style="clear:both;"></div>';    echo '</div>';    echo '<a class="trigger" href="#">' . __('Active options') . '</a>';    echo '<div id="filter"></div>';    echo '<div id="box">';    echo '<span id="boxtitle"></span>';    echo '<form method="post" action="db_qbe.php" >';    echo '<textarea cols="80" name="sql_query" id="textSqlquery" rows="15"></textarea><div id="tblfooter">';    echo '  <input type="submit" name="submit_sql" class="btn">';    echo '  <input type="button" name="cancel" value="' . __('Cancel') . '" onclick="closebox()" class="btn">';    echo PMA_generate_common_hidden_inputs($GLOBALS['db']);    echo '</div></p>';    echo '</form></div>';} ?><!-- cache images --><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/2leftarrow_m.png" width="0" height="0" alt="" /><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/rightarrow1.png" width="0" height="0" alt="" /><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/rightarrow2.png" width="0" height="0" alt="" /><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/uparrow2_m.png" width="0" height="0" alt="" /><div id="PMA_disable_floating_menubar"></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Triggers management. * * @package PhpMyAdmin *//** * Include required files */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';/** * Include JavaScript libraries */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'rte/common.js';$GLOBALS['js_include'][] = 'rte/triggers.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';/** * Include all other files */require_once './libraries/rte/rte_triggers.lib.php';/** * Do the magic */$_PMA_RTE = 'TRI';require_once './libraries/rte/rte_main.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * display list of server engines and additonal information about them * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * requirements */require_once './libraries/common.inc.php';/** * Does the common work */require './libraries/server_common.inc.php';require './libraries/StorageEngine.class.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Did the user request information about a certain storage engine? */if (empty($_REQUEST['engine']) || ! PMA_StorageEngine::isValid($_REQUEST['engine'])) {    /**     * Displays the sub-page heading     */    echo '<h2>' . "\n"       . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('b_engine.png') : '')       . "\n" . __('Storage Engines') . "\n"       . '</h2>' . "\n";    /**     * Displays the table header     */    echo '<table class="noclick">' . "\n"       . '<thead>' . "\n"       . '<tr><th>' . __('Storage Engine') . '</th>' . "\n"       . '    <th>' . __('Description') . '</th>' . "\n"       . '</tr>' . "\n"       . '</thead>' . "\n"       . '<tbody>' . "\n";    /**     * Listing the storage engines     */    $odd_row = true;    foreach (PMA_StorageEngine::getStorageEngines() as $engine => $details) {        echo '<tr class="'           . ($odd_row ? 'odd' : 'even')           . ($details['Support'] == 'NO' || $details['Support'] == 'DISABLED'                ? ' disabled'                : '')           . '">' . "\n"           . '    <td><a href="./server_engines.php'           . PMA_generate_common_url(array('engine' => $engine)) . '">' . "\n"           . '            ' . htmlspecialchars($details['Engine']) . "\n"           . '        </a></td>' . "\n"           . '    <td>' . htmlspecialchars($details['Comment']) . '</td>' . "\n"           . '</tr>' . "\n";        $odd_row = !$odd_row;    }    $PMA_Config = $GLOBALS['PMA_Config'];    if ($PMA_Config->get('BLOBSTREAMING_PLUGINS_EXIST')) {        // Special case for PBMS daemon which is not listed as an engine        echo '<tr class="'            . ($odd_row ? 'odd' : 'even')            .  '">' . "\n"            . '    <td><a href="./server_engines.php'            . PMA_generate_common_url(array('engine' => "PBMS")) . '">' . "\n"            . '            '  . "PBMS\n"            . '        </a></td>' . "\n"            . '    <td>' . htmlspecialchars("PrimeBase MediaStream (PBMS) daemon") . '</td>' . "\n"            . '</tr>' . "\n";    }   unset($odd_row, $engine, $details);    echo '</tbody>' . "\n"       . '</table>' . "\n";} else {    /**     * Displays details about a given Storage Engine     */    $engine_plugin = PMA_StorageEngine::getEngine($_REQUEST['engine']);    echo '<h2>' . "\n"       . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('b_engine.png') : '')       . '    ' . htmlspecialchars($engine_plugin->getTitle()) . "\n"       . '    ' . PMA_showMySQLDocu('', $engine_plugin->getMysqlHelpPage()) . "\n"       . '</h2>' . "\n\n";    echo '<p>' . "\n"       . '    <em>' . "\n"       . '        ' . htmlspecialchars($engine_plugin->getComment()) . "\n"       . '    </em>' . "\n"       . '</p>' . "\n\n";    $infoPages = $engine_plugin->getInfoPages();    if (!empty($infoPages) && is_array($infoPages)) {        echo '<p>' . "\n"           . '    <strong>[</strong>' . "\n";        if (empty($_REQUEST['page'])) {            echo '    <strong>' . __('Variables') . '</strong>' . "\n";        } else {            echo '    <a href="./server_engines.php'                . PMA_generate_common_url(array('engine' => $_REQUEST['engine'])) . '">'                . __('Variables') . '</a>' . "\n";        }        foreach ($infoPages as $current => $label) {            echo '    <strong>|</strong>' . "\n";            if (isset($_REQUEST['page']) && $_REQUEST['page'] == $current) {                echo '    <strong>' . $label . '</strong>' . "\n";            } else {                echo '    <a href="./server_engines.php'                    . PMA_generate_common_url(                        array('engine' => $_REQUEST['engine'], 'page' => $current))                    . '">' . htmlspecialchars($label) . '</a>' . "\n";            }        }        unset($current, $label);        echo '    <strong>]</strong>' . "\n"           . '</p>' . "\n\n";    }    unset($infoPages, $page_output);    if (!empty($_REQUEST['page'])) {        $page_output = $engine_plugin->getPage($_REQUEST['page']);    }    if (!empty($page_output)) {        echo $page_output;    } else {        echo '<p> ' . $engine_plugin->getSupportInformationMessage() . "\n"           . '</p>' . "\n"           . $engine_plugin->getHtmlVariables();    }}/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Config file management * * @package PhpMyAdmin *//** * Config file management class. * Stores its data in $_SESSION * * @package    phpMyAdmin */class ConfigFile{    /**     * Stores default PMA config from config.default.php     * @var array     */    private $cfg;    /**     * Stores original PMA_Config object, not modified by user preferences     * @var PMA_Config     */    private $orgCfgObject;    /**     * Stores allowed values for non-standard fields     * @var array     */    private $cfgDb;    /**     * Keys which will be always written to config file     * @var array     */    private $persistKeys = array();    /**     * Changes keys while updating config in {@link updateWithGlobalConfig()} or reading     * by {@link getConfig()} or {@link getConfigArray()}     * @var array     */    private $cfgUpdateReadMapping = array();    /**     * Key filter for {@link set()}     * @var array|null     */    private $setFilter;    /**     * Instance id (key in $_SESSION array, separate for each server - ConfigFile{server id})     * @var string     */    private $id;    /**     * Result for {@link _flattenArray()}     * @var array     */    private $_flattenArrayResult;    /**     * ConfigFile instance     * @var ConfigFile     */    private static $_instance;    /**     * Private constructor, use {@link getInstance()}     *     */    private function __construct()    {        // load default config values        $cfg = &$this->cfg;        include './libraries/config.default.php';        $cfg['fontsize'] = '82%';        // create PMA_Config to read config.inc.php values        $this->orgCfgObject = new PMA_Config(CONFIG_FILE);        // load additional config information        $cfg_db = &$this->cfgDb;        include './libraries/config.values.php';        // apply default values overrides        if (count($cfg_db['_overrides'])) {            foreach ($cfg_db['_overrides'] as $path => $value) {                PMA_array_write($path, $cfg, $value);            }        }        $this->id = 'ConfigFile' . $GLOBALS['server'];        if (!isset($_SESSION[$this->id])) {            $_SESSION[$this->id] = array();        }    }    /**     * Returns class instance     *     * @return ConfigFile     */    public static function getInstance()    {        if (is_null(self::$_instance)) {            self::$_instance = new ConfigFile();        }        return self::$_instance;    }    /**     * Returns PMA_Config without user preferences applied     *     * @return PMA_Config     */    public function getOrgConfigObj()    {        return $this->orgCfgObject;    }    /**     * Sets names of config options which will be placed in config file even if they are set     * to their default values (use only full paths)     *     * @param array $keys     */    public function setPersistKeys($keys)    {        // checking key presence is much faster than searching so move values to keys        $this->persistKeys = array_flip($keys);    }    /**     * Returns flipped array set by {@link setPersistKeys()}     *     * @return array     */    public function getPersistKeysMap()    {        return $this->persistKeys;    }    /**     * By default ConfigFile allows setting of all configuration keys, use this method     * to set up a filter on {@link set()} method     *     * @param array|null $keys array of allowed keys or null to remove filter     */    public function setAllowedKeys($keys)    {        if ($keys === null) {            $this->setFilter = null;            return;        }        // checking key presence is much faster than searching so move values to keys        $this->setFilter = array_flip($keys);    }    /**     * Sets path mapping for updating config in {@link updateWithGlobalConfig()} or reading     * by {@link getConfig()} or {@link getConfigArray()}     * @var array     */    public function setCfgUpdateReadMapping(array $mapping)    {        $this->cfgUpdateReadMapping = $mapping;    }    /**     * Resets configuration data     */    public function resetConfigData()    {        $_SESSION[$this->id] = array();    }    /**     * Sets configuration data (overrides old data)     *     * @param array $cfg     */    public function setConfigData(array $cfg)    {        $_SESSION[$this->id] = $cfg;    }    /**     * Sets config value     *     * @param string $path     * @param mixed  $value     * @param string $canonical_path     */    public function set($path, $value, $canonical_path = null)    {        if ($canonical_path === null) {            $canonical_path = $this->getCanonicalPath($path);        }        // apply key whitelist        if ($this->setFilter !== null && !isset($this->setFilter[$canonical_path])) {            return;        }        // remove if the path isn't protected and it's empty or has a default value        if (!isset($this->persistKeys[$canonical_path])) {            $default_value = $this->getDefault($canonical_path);            // we need oryginal config values not overwritten by user preferences            // to allow for overwriting options set in config.inc.php with default values            $instance_default_value = PMA_array_read($canonical_path, $this->orgCfgObject->settings);            if (($value === $default_value && (defined('PMA_SETUP') || $instance_default_value === $default_value))                    || (empty($value) && empty($default_value) && (defined('PMA_SETUP') || empty($current_global)))) {                PMA_array_remove($path, $_SESSION[$this->id]);                return;            }        }        PMA_array_write($path, $_SESSION[$this->id], $value);    }    /**     * Flattens multidimensional array, changes indices to paths (eg. 'key/subkey').     * Used as array_walk() callback.     *     * @param mixed $value     * @param mixed $key     * @param mixed $prefix     */    private function _flattenArray($value, $key, $prefix)    {        // no recursion for numeric arrays        if (is_array($value) && !isset($value[0])) {            $prefix .= $key . '/';            array_walk($value, array($this, '_flattenArray'), $prefix);        } else {            $this->_flattenArrayResult[$prefix . $key] = $value;        }    }    /**     * Returns default config in a flattened array     *     * @return array     */    public function getFlatDefaultConfig()    {        $this->_flattenArrayResult = array();        array_walk($this->cfg, array($this, '_flattenArray'), '');        $flat_cfg = $this->_flattenArrayResult;        $this->_flattenArrayResult = null;        return $flat_cfg;    }    /**     * Updates config with values read from given array     * (config will contain differences to defaults from config.defaults.php).     *     * @param array $cfg     */    public function updateWithGlobalConfig(array $cfg)    {        // load config array and flatten it        $this->_flattenArrayResult = array();        array_walk($cfg, array($this, '_flattenArray'), '');        $flat_cfg = $this->_flattenArrayResult;        $this->_flattenArrayResult = null;        // save values        // map for translating a few user preferences paths, should be complemented        // by code reading from generated config to perform inverse mapping        foreach ($flat_cfg as $path => $value) {            if (isset($this->cfgUpdateReadMapping[$path])) {                $path = $this->cfgUpdateReadMapping[$path];            }            $this->set($path, $value, $path);        }    }    /**     * Returns config value or $default if it's not set     *     * @param  string $path     * @param  mixed  $default     * @return mixed     */    public function get($path, $default = null)    {        return PMA_array_read($path, $_SESSION[$this->id], $default);    }    /**     * Returns default config value or $default it it's not set ie. it doesn't     * exist in config.default.php ($cfg) and config.values.php     * ($_cfg_db['_overrides'])     *     * @param  string $canonical_path     * @param  mixed  $default     * @return mixed     */    public function getDefault($canonical_path, $default = null)    {        return PMA_array_read($canonical_path, $this->cfg, $default);    }    /**     * Returns config value, if it's not set uses the default one; returns     * $default if the path isn't set and doesn't contain a default value     *     * @param  string $path     * @param  mixed  $default     * @return mixed     */    public function getValue($path, $default = null)    {        $v = PMA_array_read($path, $_SESSION[$this->id], null);        if ($v !== null) {            return $v;        }        $path = $this->getCanonicalPath($path);        return $this->getDefault($path, $default);    }    /**     * Returns canonical path     *     * @param string $path     * @return string     */    public function getCanonicalPath($path) {        return preg_replace('#^Servers/([\d]+)/#', 'Servers/1/', $path);    }    /**     * Returns config database entry for $path ($cfg_db in config_info.php)     *     * @param  string $path     * @param  mixed  $default     * @return mixed     */    public function getDbEntry($path, $default = null)    {        return PMA_array_read($path, $this->cfgDb, $default);    }    /**     * Returns server count     *     * @return int     */    public function getServerCount()    {        return isset($_SESSION[$this->id]['Servers'])            ? count($_SESSION[$this->id]['Servers'])            : 0;    }    /**     * Returns server list     *     * @return array|null     */    public function getServers()    {      return isset($_SESSION[$this->id]['Servers'])          ? $_SESSION[$this->id]['Servers']          : null;    }    /**     * Returns DSN of given server     *     * @param integer $server     * @return string     */    function getServerDSN($server)    {        if (!isset($_SESSION[$this->id]['Servers'][$server])) {            return '';        }        $path = 'Servers/' . $server;        $dsn = $this->getValue("$path/extension") . '://';        if ($this->getValue("$path/auth_type") == 'config') {            $dsn .= $this->getValue("$path/user");            if (!$this->getValue("$path/nopassword")) {                $dsn .= ':***';            }            $dsn .= '@';        }        if ($this->getValue("$path/connect_type") == 'tcp') {            $dsn .= $this->getValue("$path/host");            $port = $this->getValue("$path/port");            if ($port) {                $dsn .= ':' . $port;            }        } else {            $dsn .= $this->getValue("$path/socket");        }        return $dsn;    }    /**     * Returns server name     *     * @param int $id     * @return string     */    public function getServerName($id)    {        if (!isset($_SESSION[$this->id]['Servers'][$id])) {            return '';        }        $verbose = $this->get("Servers/$id/verbose");        if (!empty($verbose)) {            return $verbose;        }        $host = $this->get("Servers/$id/host");        return empty($host) ? 'localhost' : $host;    }    /**     * Removes server     *     * @param int $server     */    public function removeServer($server)    {        if (!isset($_SESSION[$this->id]['Servers'][$server])) {            return;        }        $last_server = $this->getServerCount();        for ($i = $server; $i < $last_server; $i++) {            $_SESSION[$this->id]['Servers'][$i] = $_SESSION[$this->id]['Servers'][$i+1];        }        unset($_SESSION[$this->id]['Servers'][$last_server]);        if (isset($_SESSION[$this->id]['ServerDefault'])            && $_SESSION[$this->id]['ServerDefault'] >= 0) {            unset($_SESSION[$this->id]['ServerDefault']);        }    }    /**     * Returns config file path, relative to phpMyAdmin's root path     *     * @return string     */    public function getFilePath()    {        // Load paths        if (!defined('SETUP_CONFIG_FILE')) {            include_once './libraries/vendor_config.php';        }        return SETUP_CONFIG_FILE;    }    /**     * Returns configuration array (full, multidimensional format)     *     * @return array     */    public function getConfig()    {        $c = $_SESSION[$this->id];        foreach ($this->cfgUpdateReadMapping as $map_to => $map_from) {            PMA_array_write($map_to, $c, PMA_array_read($map_from, $c));            PMA_array_remove($map_from, $c);        }        return $c;    }    /**     * Returns configuration array (flat format)     *     * @return array     */    public function getConfigArray()    {        $this->_flattenArrayResult = array();        array_walk($_SESSION[$this->id], array($this, '_flattenArray'), '');        $c = $this->_flattenArrayResult;        $this->_flattenArrayResult = null;        $persistKeys = array_diff(array_keys($this->persistKeys), array_keys($c));        foreach ($persistKeys as $k) {            $c[$k] = $this->getDefault($k);        }        foreach ($this->cfgUpdateReadMapping as $map_to => $map_from) {            if (!isset($c[$map_from])) {                continue;            }            $c[$map_to] = $c[$map_from];            unset($c[$map_from]);        }        return $c;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * "Echo" service to allow force downloading of exported charts (png or svg) * and server status monitor settings * * @package PhpMyAdmin */require_once './libraries/common.inc.php';/* For chart exporting */if (isset($_REQUEST['filename']) && isset($_REQUEST['image'])) {    $allowed = array(        'image/png'     => 'png',        'image/svg+xml' => 'svg',    );    /* Check whether MIME type is allowed */    if (! isset($allowed[$_REQUEST['type']])) {        die(__('Invalid export type'));    }    /*     * Check file name to match mime type and not contain new lines     * to prevent response splitting.     */    $extension = $allowed[$_REQUEST['type']];    $valid_match = '/^[^\n\r]*\.' . $extension . '$/';    if (! preg_match($valid_match, $_REQUEST['filename'])) {        if (! preg_match('/^[^\n\r]*$/', $_REQUEST['filename'])) {            /* Filename is unsafe, discard it */            $filename = 'download.' . $extension;        } else {            /* Add extension */            $filename = $_REQUEST['filename'] . '.' . $extension;        }    } else {        /* Filename from request should be safe here */        $filename = $_REQUEST['filename'];    }    /* Decode data */    if ($extension != 'svg') {        $data = substr($_REQUEST['image'], strpos($_REQUEST['image'], ',') + 1);        $data = base64_decode($data);    } else {        $data = $_REQUEST['image'];    }    /* Send download header */    PMA_download_header($filename, $_REQUEST['type'], strlen($data));    /* Send data */    echo $data;/* For monitor chart config export */} else if (isset($_REQUEST['monitorconfig'])) {    PMA_download_header('monitor.cfg', 'application/force-download');    echo urldecode($_REQUEST['monitorconfig']);/* For monitor chart config import */} else if (isset($_REQUEST['import'])) {    header('Content-type: text/plain');    if(!file_exists($_FILES['file']['tmp_name'])) exit();    echo file_get_contents($_FILES['file']['tmp_name']);}?>
<?php// TCPDF FONT FILE DESCRIPTION$type='core';$name='Helvetica';$up=-100;$ut=50;$dw=513;$diff='';$enc='';$desc=array('Flags'=>32,'FontBBox'=>'[-166 -225 1000 931]','ItalicAngle'=>0,'Ascent'=>931,'Descent'=>-225,'Leading'=>0,'CapHeight'=>718,'XHeight'=>523,'StemV'=>88,'StemH'=>76,'AvgWidth'=>513,'MaxWidth'=>1015,'MissingWidth'=>513);$cw=array(0=>500,1=>500,2=>500,3=>500,4=>500,5=>500,6=>500,7=>500,8=>500,9=>500,10=>500,11=>500,12=>500,13=>500,14=>500,15=>500,16=>500,17=>500,18=>500,19=>500,20=>500,21=>500,22=>500,23=>500,24=>500,25=>500,26=>500,27=>500,28=>500,29=>500,30=>500,31=>500,32=>278,33=>278,34=>355,35=>556,36=>556,37=>889,38=>667,39=>191,40=>333,41=>333,42=>389,43=>584,44=>278,45=>333,46=>278,47=>278,48=>556,49=>556,50=>556,51=>556,52=>556,53=>556,54=>556,55=>556,56=>556,57=>556,58=>278,59=>278,60=>584,61=>584,62=>584,63=>556,64=>1015,65=>667,66=>667,67=>722,68=>722,69=>667,70=>611,71=>778,72=>722,73=>278,74=>500,75=>667,76=>556,77=>833,78=>722,79=>778,80=>667,81=>778,82=>722,83=>667,84=>611,85=>722,86=>667,87=>944,88=>667,89=>667,90=>611,91=>278,92=>278,93=>277,94=>469,95=>556,96=>333,97=>556,98=>556,99=>500,100=>556,101=>556,102=>278,103=>556,104=>556,105=>222,106=>222,107=>500,108=>222,109=>833,110=>556,111=>556,112=>556,113=>556,114=>333,115=>500,116=>278,117=>556,118=>500,119=>722,120=>500,121=>500,122=>500,123=>334,124=>260,125=>334,126=>584,127=>500,128=>655,129=>500,130=>222,131=>278,132=>333,133=>1000,134=>556,135=>556,136=>333,137=>1000,138=>667,139=>250,140=>1000,141=>500,142=>611,143=>500,144=>500,145=>222,146=>221,147=>333,148=>333,149=>350,150=>556,151=>1000,152=>333,153=>1000,154=>500,155=>250,156=>938,157=>500,158=>500,159=>667,160=>278,161=>278,162=>556,163=>556,164=>556,165=>556,166=>260,167=>556,168=>333,169=>737,170=>370,171=>448,172=>584,173=>333,174=>737,175=>333,176=>606,177=>584,178=>350,179=>350,180=>333,181=>556,182=>537,183=>278,184=>333,185=>350,186=>365,187=>448,188=>869,189=>869,190=>879,191=>556,192=>667,193=>667,194=>667,195=>667,196=>667,197=>667,198=>1000,199=>722,200=>667,201=>667,202=>667,203=>667,204=>278,205=>278,206=>278,207=>278,208=>722,209=>722,210=>778,211=>778,212=>778,213=>778,214=>778,215=>584,216=>778,217=>722,218=>722,219=>722,220=>722,221=>667,222=>666,223=>611,224=>556,225=>556,226=>556,227=>556,228=>556,229=>556,230=>896,231=>500,232=>556,233=>556,234=>556,235=>556,236=>251,237=>251,238=>251,239=>251,240=>556,241=>556,242=>556,243=>556,244=>556,245=>556,246=>556,247=>584,248=>611,249=>556,250=>556,251=>556,252=>556,253=>500,254=>555,255=>500);// --- EOF ---
