<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used with the relation and pdf feature * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Executes a query as controluser if possible, otherwise as normal user * * @param string  $sql        the query to execute * @param boolean $show_error whether to display SQL error messages or not * @param int     $options    query options * * @return  integer   the result set, or false if no result set * * @access  public * */function PMA_query_as_controluser($sql, $show_error = true, $options = 0){    // Avoid caching of the number of rows affected; for example, this function    // is called for tracking purposes but we want to display the correct number    // of rows affected by the original query, not by the query generated for    // tracking.    $cache_affected_rows = false;    if ($show_error) {        $result = PMA_DBI_query($sql, $GLOBALS['controllink'], $options, $cache_affected_rows);    } else {        $result = @PMA_DBI_try_query($sql, $GLOBALS['controllink'], $options, $cache_affected_rows);    } // end if... else...    if ($result) {        return $result;    } else {        return false;    }} // end of the "PMA_query_as_controluser()" function/** * @param bool $verbose whether to print diagnostic info * * @return  array   $cfgRelation */function PMA_getRelationsParam($verbose = false){    if (empty($_SESSION['relation'][$GLOBALS['server']])) {        $_SESSION['relation'][$GLOBALS['server']] = PMA__getRelationsParam();    }    // just for BC but needs to be before PMA_printRelationsParamDiagnostic()    // which uses it    $GLOBALS['cfgRelation'] = $_SESSION['relation'][$GLOBALS['server']];    if ($verbose) {        PMA_printRelationsParamDiagnostic($_SESSION['relation'][$GLOBALS['server']]);    }    return $_SESSION['relation'][$GLOBALS['server']];}/** * prints out diagnostic info for pma relation feature * * @param array $cfgRelation * * @return nothing */function PMA_printRelationsParamDiagnostic($cfgRelation){    $messages['error'] = '<font color="red"><strong>' . __('not OK')                   . '</strong></font> [ <a href="Documentation.html#%s" target="documentation">'                   . __('Documentation') . '</a> ]';    $messages['ok'] = '<font color="green"><strong>' . __('OK') . '</strong></font>';    $messages['enabled']  = '<font color="green">' . __('Enabled') . '</font>';    $messages['disabled'] = '<font color="red">'   . __('Disabled') . '</font>';    if (false === $GLOBALS['cfg']['Server']['pmadb']) {        echo 'PMA Database ... '             . sprintf($messages['error'], 'pmadb')             . '<br />' . "\n"             . __('General relation features')             . ' <font color="green">' . __('Disabled')             . '</font>' . "\n";        return;    }    echo '<table>' . "\n";    PMA_printDiagMessageForParameter('pmadb', $GLOBALS['cfg']['Server']['pmadb'], $messages, 'pmadb');    PMA_printDiagMessageForParameter('relation', isset($cfgRelation['relation']), $messages, 'relation');    PMA_printDiagMessageForFeature(__('General relation features'), 'relwork', $messages);    PMA_printDiagMessageForParameter('table_info', isset($cfgRelation['table_info']), $messages, 'table_info');    PMA_printDiagMessageForFeature(__('Display Features'), 'displaywork', $messages);    PMA_printDiagMessageForParameter('table_coords', isset($cfgRelation['table_coords']), $messages, 'table_coords');    PMA_printDiagMessageForParameter('pdf_pages', isset($cfgRelation['pdf_pages']), $messages, 'table_coords');    PMA_printDiagMessageForFeature(__('Creation of PDFs'), 'pdfwork', $messages);    PMA_printDiagMessageForParameter('column_info', isset($cfgRelation['column_info']), $messages, 'col_com');    PMA_printDiagMessageForFeature(__('Displaying Column Comments'), 'commwork', $messages, false);    PMA_printDiagMessageForFeature(__('Browser transformation'), 'mimework', $messages);    if ($cfgRelation['commwork'] && ! $cfgRelation['mimework']) {        echo '<tr><td colspan=2 align="left">' . __('Please see the documentation on how to update your column_comments table') . '</td></tr>' . "\n";    }    PMA_printDiagMessageForParameter('bookmarktable', isset($cfgRelation['bookmark']), $messages, 'bookmark');    PMA_printDiagMessageForFeature(__('Bookmarked SQL query'), 'bookmarkwork', $messages);    PMA_printDiagMessageForParameter('history', isset($cfgRelation['history']), $messages, 'history');    PMA_printDiagMessageForFeature(__('SQL history'), 'historywork', $messages);    PMA_printDiagMessageForParameter('designer_coords', isset($cfgRelation['designer_coords']), $messages, 'designer_coords');    PMA_printDiagMessageForFeature(__('Designer'), 'designerwork', $messages);    PMA_printDiagMessageForParameter('recent', isset($cfgRelation['recent']), $messages, 'recent');    PMA_printDiagMessageForFeature(__('Persistent recently used tables'), 'recentwork', $messages);    PMA_printDiagMessageForParameter('table_uiprefs', isset($cfgRelation['table_uiprefs']), $messages, 'table_uiprefs');    PMA_printDiagMessageForFeature(__('Persistent tables\' UI preferences'), 'uiprefswork', $messages);    PMA_printDiagMessageForParameter('tracking', isset($cfgRelation['tracking']), $messages, 'tracking');    PMA_printDiagMessageForFeature(__('Tracking'), 'trackingwork', $messages);    PMA_printDiagMessageForParameter('userconfig', isset($cfgRelation['userconfig']), $messages, 'userconfig');    PMA_printDiagMessageForFeature(__('User preferences'), 'userconfigwork', $messages);    echo '</table>' . "\n";    echo '<p>' . __('Quick steps to setup advanced features:') . '</p>';    echo '<ul>';    echo '<li>' . __('Create the needed tables with the <code>examples/create_tables.sql</code>.') . ' ' . PMA_showDocu('linked-tables') . '</li>';    echo '<li>' . __('Create a pma user and give access to these tables.') . ' ' . PMA_showDocu('pmausr') . '</li>';    echo '<li>' . __('Enable advanced features in configuration file (<code>config.inc.php</code>), for example by starting from <code>config.sample.inc.php</code>.') . ' ' . PMA_showDocu('quick_install') . '</li>';    echo '<li>' . __('Re-login to phpMyAdmin to load the updated configuration file.') . '</li>';    echo '</ul>';}/** * prints out one diagnostic message for a feature * * @param string  $feature_name       feature name in a message string * @param string  $relation_parameter the $GLOBALS['cfgRelation'] parameter to check * @param array   $messages           utility messages * @param boolean $skip_line          whether to skip a line after the message * * @return nothing */function PMA_printDiagMessageForFeature($feature_name, $relation_parameter, $messages, $skip_line=true){    echo '    <tr><td colspan=2 align="right">' . $feature_name . ': '         . ($GLOBALS['cfgRelation'][$relation_parameter] ? $messages['enabled'] : $messages['disabled'])         . '</td></tr>' . "\n";    if ($skip_line) {        echo '    <tr><td>&nbsp;</td></tr>' . "\n";    }}/** * prints out one diagnostic message for a configuration parameter * * @param string  $parameter              config parameter name to display * @param boolean $relation_parameter_set whether this parameter is set * @param array   $messages               utility messages * @param string  $doc_anchor             anchor in Documentation.html * * @return nothing */function PMA_printDiagMessageForParameter($parameter, $relation_parameter_set, $messages, $doc_anchor){    echo '    <tr><th align="left">';    echo '$cfg[\'Servers\'][$i][\'' . $parameter . '\']  ... </th><td align="right">';    echo ($relation_parameter_set ? $messages['ok'] : sprintf($messages['error'], $doc_anchor)) . '</td></tr>' . "\n";}/** * Defines the relation parameters for the current user * just a copy of the functions used for relations ;-) * but added some stuff to check what will work * * @access  protected * @return  array    the relation parameters for the current user */function PMA__getRelationsParam(){    $cfgRelation                = array();    $cfgRelation['relwork']     = false;    $cfgRelation['displaywork'] = false;    $cfgRelation['bookmarkwork']= false;    $cfgRelation['pdfwork']     = false;    $cfgRelation['commwork']    = false;    $cfgRelation['mimework']    = false;    $cfgRelation['historywork'] = false;    $cfgRelation['recentwork']  = false;    $cfgRelation['uiprefswork'] = false;    $cfgRelation['trackingwork'] = false;    $cfgRelation['designerwork'] = false;    $cfgRelation['userconfigwork'] = false;    $cfgRelation['allworks']    = false;    $cfgRelation['user']        = null;    $cfgRelation['db']          = null;    if ($GLOBALS['server'] == 0 || empty($GLOBALS['cfg']['Server']['pmadb'])        || ! PMA_DBI_select_db($GLOBALS['cfg']['Server']['pmadb'], $GLOBALS['controllink'])    ) {        // No server selected -> no bookmark table        // we return the array with the falses in it,        // to avoid some 'Unitialized string offset' errors later        $GLOBALS['cfg']['Server']['pmadb'] = false;        return $cfgRelation;    }    $cfgRelation['user']  = $GLOBALS['cfg']['Server']['user'];    $cfgRelation['db']    = $GLOBALS['cfg']['Server']['pmadb'];    //  Now I just check if all tables that i need are present so I can for    //  example enable relations but not pdf...    //  I was thinking of checking if they have all required columns but I    //  fear it might be too slow    $tab_query = 'SHOW TABLES FROM ' . PMA_backquote($GLOBALS['cfg']['Server']['pmadb']);    $tab_rs    = PMA_query_as_controluser($tab_query, false, PMA_DBI_QUERY_STORE);    if (! $tab_rs) {        // query failed ... ?        //$GLOBALS['cfg']['Server']['pmadb'] = false;        return $cfgRelation;    }    while ($curr_table = @PMA_DBI_fetch_row($tab_rs)) {        if ($curr_table[0] == $GLOBALS['cfg']['Server']['bookmarktable']) {            $cfgRelation['bookmark']        = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['relation']) {            $cfgRelation['relation']        = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['table_info']) {            $cfgRelation['table_info']      = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['table_coords']) {            $cfgRelation['table_coords']    = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['designer_coords']) {            $cfgRelation['designer_coords']    = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['column_info']) {            $cfgRelation['column_info'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['pdf_pages']) {            $cfgRelation['pdf_pages']       = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['history']) {            $cfgRelation['history'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['recent']) {            $cfgRelation['recent'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['table_uiprefs']) {            $cfgRelation['table_uiprefs'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['tracking']) {            $cfgRelation['tracking'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['userconfig']) {            $cfgRelation['userconfig'] = $curr_table[0];        }    } // end while    PMA_DBI_free_result($tab_rs);    if (isset($cfgRelation['relation'])) {        $cfgRelation['relwork']         = true;        if (isset($cfgRelation['table_info'])) {                $cfgRelation['displaywork'] = true;        }    }    if (isset($cfgRelation['table_coords']) && isset($cfgRelation['pdf_pages'])) {        $cfgRelation['pdfwork']     = true;    }    if (isset($cfgRelation['column_info'])) {        $cfgRelation['commwork']    = true;        if ($GLOBALS['cfg']['Server']['verbose_check']) {            $mime_query  = PMA_DBI_get_columns_sql($cfgRelation['db'], $cfgRelation['column_info']);            $mime_rs     = PMA_query_as_controluser($mime_query, false);            $mime_field_mimetype                = false;            $mime_field_transformation          = false;            $mime_field_transformation_options  = false;            while ($curr_mime_field = @PMA_DBI_fetch_row($mime_rs)) {                if ($curr_mime_field[0] == 'mimetype') {                    $mime_field_mimetype               = true;                } elseif ($curr_mime_field[0] == 'transformation') {                    $mime_field_transformation         = true;                } elseif ($curr_mime_field[0] == 'transformation_options') {                    $mime_field_transformation_options = true;                }            }            PMA_DBI_free_result($mime_rs);            if ($mime_field_mimetype                && $mime_field_transformation                && $mime_field_transformation_options            ) {                $cfgRelation['mimework'] = true;            }        } else {            $cfgRelation['mimework'] = true;        }    }    if (isset($cfgRelation['history'])) {        $cfgRelation['historywork']     = true;    }    if (isset($cfgRelation['recent'])) {        $cfgRelation['recentwork']      = true;    }    if (isset($cfgRelation['table_uiprefs'])) {        $cfgRelation['uiprefswork']     = true;    }    if (isset($cfgRelation['tracking'])) {        $cfgRelation['trackingwork']     = true;    }    if (isset($cfgRelation['userconfig'])) {        $cfgRelation['userconfigwork']   = true;    }    // we do not absolutely need that the internal relations or the PDF    // schema feature be activated    if (isset($cfgRelation['designer_coords'])) {        $cfgRelation['designerwork']     = true;    }    if (isset($cfgRelation['bookmark'])) {        $cfgRelation['bookmarkwork']     = true;    }    if ($cfgRelation['relwork'] && $cfgRelation['displaywork']        && $cfgRelation['pdfwork'] && $cfgRelation['commwork']        && $cfgRelation['mimework'] && $cfgRelation['historywork']        && $cfgRelation['recentwork'] && $cfgRelation['uiprefswork']        && $cfgRelation['trackingwork'] && $cfgRelation['userconfigwork']        && $cfgRelation['bookmarkwork'] && $cfgRelation['designerwork']    ) {        $cfgRelation['allworks'] = true;    }    return $cfgRelation;} // end of the 'PMA_getRelationsParam()' function/** * Gets all Relations to foreign tables for a given table or * optionally a given column in a table * * @param string $db     the name of the db to check for * @param string $table  the name of the table to check for * @param string $column the name of the column to check for * @param string $source the source for foreign key information * * @return  array    db,table,column * * @access  public */function PMA_getForeigners($db, $table, $column = '', $source = 'both'){    $cfgRelation = PMA_getRelationsParam();    $foreign = array();    if ($cfgRelation['relwork'] && ($source == 'both' || $source == 'internal')) {        $rel_query = '             SELECT `master_field`,                    `foreign_db`,                    `foreign_table`,                    `foreign_field`               FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation']) . '              WHERE `master_db`    = \'' . PMA_sqlAddSlashes($db) . '\'                AND `master_table` = \'' . PMA_sqlAddSlashes($table) . '\' ';        if (strlen($column)) {            $rel_query .= ' AND `master_field` = \'' . PMA_sqlAddSlashes($column) . '\'';        }        $foreign = PMA_DBI_fetch_result($rel_query, 'master_field', null, $GLOBALS['controllink']);    }    if (($source == 'both' || $source == 'foreign') && strlen($table)) {        $show_create_table_query = 'SHOW CREATE TABLE '            . PMA_backquote($db) . '.' . PMA_backquote($table);        $show_create_table = PMA_DBI_fetch_value($show_create_table_query, 0, 1);        $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));        foreach ($analyzed_sql[0]['foreign_keys'] as $one_key) {            // The analyzer may return more than one column name in the            // index list or the ref_index_list; if this happens,            // the current logic just discards the whole index; having            // more than one index field is currently unsupported (see FAQ 3.6)            if (count($one_key['index_list']) == 1) {                foreach ($one_key['index_list'] as $i => $field) {                    // If a foreign key is defined in the 'internal' source (pmadb)                    // and as a native foreign key, we won't get it twice                    // if $source='both' because we use $field as key                    // The parser looks for a CONSTRAINT clause just before                    // the FOREIGN KEY clause. It finds it (as output from                    // SHOW CREATE TABLE) in MySQL 4.0.13, but not in older                    // versions like 3.23.58.                    // In those cases, the FOREIGN KEY parsing will put numbers                    // like -1, 0, 1... instead of the constraint number.                    if (isset($one_key['constraint'])) {                        $foreign[$field]['constraint'] = $one_key['constraint'];                    }                    if (isset($one_key['ref_db_name'])) {                        $foreign[$field]['foreign_db'] = $one_key['ref_db_name'];                    } else {                        $foreign[$field]['foreign_db'] = $db;                    }                    $foreign[$field]['foreign_table'] = $one_key['ref_table_name'];                    $foreign[$field]['foreign_field'] = $one_key['ref_index_list'][$i];                    if (isset($one_key['on_delete'])) {                        $foreign[$field]['on_delete'] = $one_key['on_delete'];                    }                    if (isset($one_key['on_update'])) {                        $foreign[$field]['on_update'] = $one_key['on_update'];                    }                }            }        }    }    /**     * Emulating relations for some information_schema and data_dictionary tables     */    $is_information_schema = strtolower($db) == 'information_schema';    $is_data_dictionary = PMA_DRIZZLE && strtolower($db) == 'data_dictionary';    if (($is_information_schema || $is_data_dictionary) && ($source == 'internal' || $source == 'both')) {        if ($is_information_schema) {            $relations_key = 'information_schema_relations';            include_once './libraries/information_schema_relations.lib.php';        } else {            $relations_key = 'data_dictionary_relations';            include_once './libraries/data_dictionary_relations.lib.php';        }        if (isset($GLOBALS[$relations_key][$table])) {            foreach ($GLOBALS[$relations_key][$table] as $field => $relations) {                if ((! strlen($column) || $column == $field)                    && (! isset($foreign[$field]) || ! strlen($foreign[$field]))                ) {                    $foreign[$field] = $relations;                }            }        }    }    return $foreign;} // end of the 'PMA_getForeigners()' function/** * Gets the display field of a table * * @param string $db    the name of the db to check for * @param string $table the name of the table to check for * * @return  string   field name * * @access  public */function PMA_getDisplayField($db, $table){    $cfgRelation = PMA_getRelationsParam();    /**     * Try to fetch the display field from DB.     */    if ($cfgRelation['displaywork']) {        $disp_query = '             SELECT `display_field`               FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info']) . '              WHERE `db_name`    = \'' . PMA_sqlAddSlashes($db) . '\'                AND `table_name` = \'' . PMA_sqlAddSlashes($table) . '\'';        $row = PMA_DBI_fetch_single_row($disp_query, 'ASSOC', $GLOBALS['controllink']);        if (isset($row['display_field'])) {            return $row['display_field'];        }    }    /**     * Emulating the display field for some information_schema tables.     */    if ($db == 'information_schema') {        switch ($table) {        case 'CHARACTER_SETS':            return 'DESCRIPTION';        case 'TABLES':            return 'TABLE_COMMENT';        }    }    /**     * No Luck...     */    return false;} // end of the 'PMA_getDisplayField()' function/** * Gets the comments for all rows of a table or the db itself * * @param string $db    the name of the db to check for * @param string $table the name of the table to check for * * @return  array    [field_name] = comment * * @access  public */function PMA_getComments($db, $table = ''){    $comments = array();    if ($table != '') {        // MySQL native column comments        $fields = PMA_DBI_get_columns($db, $table, null, true);        if ($fields) {            foreach ($fields as $field) {                if (! empty($field['Comment'])) {                    $comments[$field['Field']] = $field['Comment'];                }            }        }    } else {        $comments[] = PMA_getDbComment($db);    }    return $comments;} // end of the 'PMA_getComments()' function/** * Gets the comment for a db * * @param string $db the name of the db to check for * * @return  string   comment * * @access  public */function PMA_getDbComment($db){    $cfgRelation = PMA_getRelationsParam();    $comment = '';    if ($cfgRelation['commwork']) {        // pmadb internal db comment        $com_qry = "             SELECT `comment`               FROM " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['column_info']) . "              WHERE db_name     = '" . PMA_sqlAddSlashes($db) . "'                AND table_name  = ''                AND column_name = '(db_comment)'";        $com_rs = PMA_query_as_controluser($com_qry, true, PMA_DBI_QUERY_STORE);        if ($com_rs && PMA_DBI_num_rows($com_rs) > 0) {            $row = PMA_DBI_fetch_assoc($com_rs);            $comment = $row['comment'];        }        PMA_DBI_free_result($com_rs);    }    return $comment;} // end of the 'PMA_getDbComment()' function/** * Gets the comment for a db * * @access  public * * @return  string   comment */function PMA_getDbComments(){    $cfgRelation = PMA_getRelationsParam();    $comments = array();    if ($cfgRelation['commwork']) {        // pmadb internal db comment        $com_qry = "             SELECT `db_name`, `comment`               FROM " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['column_info']) . "              WHERE `column_name` = '(db_comment)'";        $com_rs = PMA_query_as_controluser($com_qry, true, PMA_DBI_QUERY_STORE);        if ($com_rs && PMA_DBI_num_rows($com_rs) > 0) {            while ($row = PMA_DBI_fetch_assoc($com_rs)) {                $comments[$row['db_name']] = $row['comment'];            }        }        PMA_DBI_free_result($com_rs);    }    return $comments;} // end of the 'PMA_getDbComments()' function/** * Set a database comment to a certain value. * * @param string $db      the name of the db * @param string $comment the value of the column * * @return  boolean  true, if comment-query was made. * * @access  public */function PMA_setDbComment($db, $comment = ''){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['commwork']) {        return false;    }    if (strlen($comment)) {        $upd_query = "             INSERT INTO                    " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['column_info']) . "                    (`db_name`, `table_name`, `column_name`, `comment`)             VALUES (                   '" . PMA_sqlAddSlashes($db) . "',                   '',                   '(db_comment)',                   '" . PMA_sqlAddSlashes($comment) . "')             ON DUPLICATE KEY UPDATE                `comment` = '" . PMA_sqlAddSlashes($comment) . "'";    } else {        $upd_query = '             DELETE FROM                    ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '              WHERE `db_name`     = \'' . PMA_sqlAddSlashes($db) . '\'                AND `table_name`  = \'\'                AND `column_name` = \'(db_comment)\'';    }    if (isset($upd_query)) {        return PMA_query_as_controluser($upd_query);    }    return false;} // end of 'PMA_setDbComment()' function/** * Set a SQL history entry * * @param string $db       the name of the db * @param string $table    the name of the table * @param string $username the username * @param string $sqlquery the sql query * * @return nothing * * @access  public */function PMA_setHistory($db, $table, $username, $sqlquery){    if (strlen($sqlquery) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {        return;    }    $cfgRelation = PMA_getRelationsParam();    if (! isset($_SESSION['sql_history'])) {        $_SESSION['sql_history'] = array();    }    $key = md5($sqlquery . $db . $table);    if (isset($_SESSION['sql_history'][$key])) {        unset($_SESSION['sql_history'][$key]);    }    $_SESSION['sql_history'][$key] = array(        'db' => $db,        'table' => $table,        'sqlquery' => $sqlquery,    );    if (count($_SESSION['sql_history']) > $GLOBALS['cfg']['QueryHistoryMax']) {        // history should not exceed a maximum count        array_shift($_SESSION['sql_history']);    }    if (! $cfgRelation['historywork'] || ! $GLOBALS['cfg']['QueryHistoryDB']) {        return;    }    PMA_query_as_controluser(        'INSERT INTO                ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '              (`username`,                `db`,                `table`,                `timevalue`,                `sqlquery`)        VALUES              (\'' . PMA_sqlAddSlashes($username) . '\',               \'' . PMA_sqlAddSlashes($db) . '\',               \'' . PMA_sqlAddSlashes($table) . '\',               NOW(),               \'' . PMA_sqlAddSlashes($sqlquery) . '\')'    );} // end of 'PMA_setHistory()' function/** * Gets a SQL history entry * * @param string $username the username * * @return  array    list of history items * * @access  public */function PMA_getHistory($username){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['historywork']) {        return false;    }    $hist_query = '         SELECT `db`,                `table`,                `sqlquery`           FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '          WHERE `username` = \'' . PMA_sqlAddSlashes($username) . '\'       ORDER BY `id` DESC';    return PMA_DBI_fetch_result($hist_query, null, null, $GLOBALS['controllink']);} // end of 'PMA_getHistory()' function/** * purges SQL history * * deletes entries that exceeds $cfg['QueryHistoryMax'], oldest first, for the * given user * * @param string $username the username * * @return nothing * * @access  public */function PMA_purgeHistory($username){    $cfgRelation = PMA_getRelationsParam();    if (! $GLOBALS['cfg']['QueryHistoryDB'] || ! $cfgRelation['historywork']) {        return;    }    if (! $cfgRelation['historywork']) {        return;    }    $search_query = '         SELECT `timevalue`           FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '          WHERE `username` = \'' . PMA_sqlAddSlashes($username) . '\'       ORDER BY `timevalue` DESC          LIMIT ' . $GLOBALS['cfg']['QueryHistoryMax'] . ', 1';    if ($max_time = PMA_DBI_fetch_value($search_query, 0, 0, $GLOBALS['controllink'])) {        PMA_query_as_controluser(            'DELETE FROM                    ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '              WHERE `username` = \'' . PMA_sqlAddSlashes($username) . '\'                AND `timevalue` <= \'' . $max_time . '\''        );    }} // end of 'PMA_purgeHistory()' function/** * Prepares the dropdown for one mode * * @param array  $foreign the keys and values for foreigns * @param string $data    the current data of the dropdown * @param string $mode    the needed mode * * @return  array   the <option value=""><option>s * * @access  protected */function PMA__foreignDropdownBuild($foreign, $data, $mode){    $reloptions = array();    // id-only is a special mode used when no foreign display column    // is available    if ($mode == 'id-content' || $mode == 'id-only') {        // sort for id-content        if ($GLOBALS['cfg']['NaturalOrder']) {            uksort($foreign, 'strnatcasecmp');        } else {            ksort($foreign);        }    } elseif ($mode == 'content-id') {        // sort for content-id        if ($GLOBALS['cfg']['NaturalOrder']) {            natcasesort($foreign);        } else {            asort($foreign);        }    }    foreach ($foreign as $key => $value) {        if (PMA_strlen($value) <= $GLOBALS['cfg']['LimitChars']) {            $vtitle = '';            $value  = htmlspecialchars($value);        } else {            $vtitle  = htmlspecialchars($value);            $value  = htmlspecialchars(substr($value, 0, $GLOBALS['cfg']['LimitChars']) . '...');        }        $reloption = '<option value="' . htmlspecialchars($key) . '"';        if ($vtitle != '') {            $reloption .= ' title="' . $vtitle . '"';        }        if ((string) $key == (string) $data) {            $reloption .= ' selected="selected"';        }        if ($mode == 'content-id') {            $reloptions[] = $reloption . '>' . $value . '&nbsp;-&nbsp;' . htmlspecialchars($key) .  '</option>';        } elseif ($mode == 'id-content') {            $reloptions[] = $reloption . '>' . htmlspecialchars($key) .  '&nbsp;-&nbsp;' . $value . '</option>';        } elseif ($mode == 'id-only') {            $reloptions[] = $reloption . '>' . htmlspecialchars($key) . '</option>';        }    } // end foreach    return $reloptions;} // end of 'PMA__foreignDropdownBuild' function/** * Outputs dropdown with values of foreign fields * * @param array  $disp_row        array of the displayed row * @param string $foreign_field   the foreign field * @param string $foreign_display the foreign field to display * @param string $data            the current data of the dropdown (field in row) * @param int    $max             maximum number of items in the dropdown * * @return  string   the <option value=""><option>s * * @access  public */function PMA_foreignDropdown($disp_row, $foreign_field, $foreign_display, $data,    $max = null){    if (null === $max) {        $max = $GLOBALS['cfg']['ForeignKeyMaxLimit'];    }    $foreign = array();    // collect the data    foreach ($disp_row as $relrow) {        $key   = $relrow[$foreign_field];        // if the display field has been defined for this foreign table        if ($foreign_display) {            $value  = $relrow[$foreign_display];        } else {            $value = '';        } // end if ($foreign_display)        $foreign[$key] = $value;    } // end foreach    // put the dropdown sections in correct order    $top = array();    $bottom = array();    if ($foreign_display) {        if (PMA_isValid($GLOBALS['cfg']['ForeignKeyDropdownOrder'], 'array')) {            if (PMA_isValid($GLOBALS['cfg']['ForeignKeyDropdownOrder'][0])) {                $top = PMA__foreignDropdownBuild(                    $foreign,                    $data,                    $GLOBALS['cfg']['ForeignKeyDropdownOrder'][0]                );            }            if (PMA_isValid($GLOBALS['cfg']['ForeignKeyDropdownOrder'][1])) {                $bottom = PMA__foreignDropdownBuild(                    $foreign,                    $data,                    $GLOBALS['cfg']['ForeignKeyDropdownOrder'][1]                );            }        } else {            $top = PMA__foreignDropdownBuild($foreign, $data, 'id-content');            $bottom = PMA__foreignDropdownBuild($foreign, $data, 'content-id');        }    } else {        $top = PMA__foreignDropdownBuild($foreign, $data, 'id-only');    }    // beginning of dropdown    $ret = '<option value="">&nbsp;</option>';    $top_count = count($top);    if ($max == -1 || $top_count < $max) {        $ret .= implode('', $top);        if ($foreign_display && $top_count > 0) {            // this empty option is to visually mark the beginning of the            // second series of values (bottom)            $ret .= '<option value="">&nbsp;</option>';        }    }    if ($foreign_display) {        $ret .= implode('', $bottom);    }    return $ret;} // end of 'PMA_foreignDropdown()' function/** * Gets foreign keys in preparation for a drop-down selector * * @param array  $foreigners     array of the foreign keys * @param string $field          the foreign field name * @param bool   $override_total whether to override the total * @param string $foreign_filter a possible filter * @param string $foreign_limit  a possible LIMIT clause * * @return  array    data about the foreign keys * * @access  public */function PMA_getForeignData($foreigners, $field, $override_total, $foreign_filter, $foreign_limit){    // we always show the foreign field in the drop-down; if a display    // field is defined, we show it besides the foreign field    $foreign_link = false;    if ($foreigners && isset($foreigners[$field])) {        $foreigner       = $foreigners[$field];        $foreign_db      = $foreigner['foreign_db'];        $foreign_table   = $foreigner['foreign_table'];        $foreign_field   = $foreigner['foreign_field'];        // Count number of rows in the foreign table. Currently we do        // not use a drop-down if more than 200 rows in the foreign table,        // for speed reasons and because we need a better interface for this.        //        // We could also do the SELECT anyway, with a LIMIT, and ensure that        // the current value of the field is one of the choices.        $the_total   = PMA_Table::countRecords($foreign_db, $foreign_table);        if ($override_total == true || $the_total < $GLOBALS['cfg']['ForeignKeyMaxLimit']) {            // foreign_display can be false if no display field defined:            $foreign_display = PMA_getDisplayField($foreign_db, $foreign_table);            $f_query_main = 'SELECT ' . PMA_backquote($foreign_field)                        . (($foreign_display == false) ? '' : ', ' . PMA_backquote($foreign_display));            $f_query_from = ' FROM ' . PMA_backquote($foreign_db) . '.' . PMA_backquote($foreign_table);            $f_query_filter = empty($foreign_filter) ? '' : ' WHERE ' . PMA_backquote($foreign_field)                            . ' LIKE "%' . PMA_sqlAddSlashes($foreign_filter, true) . '%"'                            . (($foreign_display == false) ? '' : ' OR ' . PMA_backquote($foreign_display)                                . ' LIKE "%' . PMA_sqlAddSlashes($foreign_filter, true) . '%"'                                );            $f_query_order = ($foreign_display == false) ? '' :' ORDER BY ' . PMA_backquote($foreign_table) . '.' . PMA_backquote($foreign_display);            $f_query_limit = isset($foreign_limit) ? $foreign_limit : '';            if (!empty($foreign_filter)) {                $res = PMA_DBI_query('SELECT COUNT(*)' . $f_query_from . $f_query_filter);                if ($res) {                    $the_total = PMA_DBI_fetch_value($res);                    @PMA_DBI_free_result($res);                } else {                    $the_total = 0;                }            }            $disp  = PMA_DBI_query($f_query_main . $f_query_from . $f_query_filter . $f_query_order . $f_query_limit);            if ($disp && PMA_DBI_num_rows($disp) > 0) {                // If a resultset has been created, pre-cache it in the $disp_row array                // This helps us from not needing to use mysql_data_seek by accessing a pre-cached                // PHP array. Usually those resultsets are not that big, so a performance hit should                // not be expected.                $disp_row = array();                while ($single_disp_row = @PMA_DBI_fetch_assoc($disp)) {                    $disp_row[] = $single_disp_row;                }                @PMA_DBI_free_result($disp);            }        } else {            $disp_row = null;            $foreign_link = true;        }    }  // end if $foreigners    $foreignData['foreign_link'] = $foreign_link;    $foreignData['the_total'] = isset($the_total) ? $the_total : null;    $foreignData['foreign_display'] = isset($foreign_display) ? $foreign_display : null;    $foreignData['disp_row'] = isset($disp_row) ? $disp_row : null;    $foreignData['foreign_field'] = isset($foreign_field) ? $foreign_field : null;    return $foreignData;} // end of 'PMA_getForeignData()' function/** * Finds all related tables * * @param string $from whether to go from master to foreign or vice versa * * @return  boolean  always true * * @global  array    $tab_left the list of tables that we still couldn't connect * @global  array    $tab_know the list of allready connected tables * @global  string   $fromclause * * @access  private */function PMA_getRelatives($from){    global $tab_left, $tab_know, $fromclause;    if ($from == 'master') {        $to    = 'foreign';    } else {        $to    = 'master';    }    $in_know = '(\'' . implode('\', \'', $tab_know) . '\')';    $in_left = '(\'' . implode('\', \'', $tab_left) . '\')';    $rel_query = 'SELECT *'               . '  FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db'])               .       '.' . PMA_backquote($GLOBALS['cfgRelation']['relation'])               . ' WHERE ' . $from . '_db = \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\''               . '   AND ' . $to   . '_db = \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\''               . '   AND ' . $from . '_table IN ' . $in_know               . '   AND ' . $to   . '_table IN ' . $in_left;    $relations = @PMA_DBI_query($rel_query, $GLOBALS['controllink']);    while ($row = PMA_DBI_fetch_assoc($relations)) {        $found_table                = $row[$to . '_table'];        if (isset($tab_left[$found_table])) {            $fromclause                .= "\n" . ' LEFT JOIN '                . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($row[$to . '_table']) . ' ON '                . PMA_backquote($row[$from . '_table']) . '.'                . PMA_backquote($row[$from . '_field']) . ' = '                . PMA_backquote($row[$to . '_table']) . '.'                . PMA_backquote($row[$to . '_field']) . ' ';            $tab_know[$found_table] = $found_table;            unset($tab_left[$found_table]);        }    } // end while    return true;} // end of the "PMA_getRelatives()" function/** * Rename a field in relation tables * * usually called after a field in a table was renamed in tbl_alter.php * * @param string $db       databse name * @param string $table    table name * @param string $field    old field name * @param string $new_name new field name * * @return nothing */function PMA_REL_renameField($db, $table, $field, $new_name){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['displaywork']) {        $table_query = 'UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                      . '   SET display_field = \'' . PMA_sqlAddSlashes($new_name) . '\''                      . ' WHERE db_name       = \'' . PMA_sqlAddSlashes($db) . '\''                      . '   AND table_name    = \'' . PMA_sqlAddSlashes($table) . '\''                      . '   AND display_field = \'' . PMA_sqlAddSlashes($field) . '\'';        PMA_query_as_controluser($table_query);    }    if ($cfgRelation['relwork']) {        $table_query = 'UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                      . '   SET master_field = \'' . PMA_sqlAddSlashes($new_name) . '\''                      . ' WHERE master_db    = \'' . PMA_sqlAddSlashes($db) . '\''                      . '   AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                      . '   AND master_field = \'' . PMA_sqlAddSlashes($field) . '\'';        PMA_query_as_controluser($table_query);        $table_query = 'UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                      . '   SET foreign_field = \'' . PMA_sqlAddSlashes($new_name) . '\''                      . ' WHERE foreign_db    = \'' . PMA_sqlAddSlashes($db) . '\''                      . '   AND foreign_table = \'' . PMA_sqlAddSlashes($table) . '\''                      . '   AND foreign_field = \'' . PMA_sqlAddSlashes($field) . '\'';        PMA_query_as_controluser($table_query);    } // end if relwork}/** * Create a PDF page * * @param string $newpage     name of the new PDF page * @param array  $cfgRelation * @param string $db          database name * * @return string   $pdf_page_number */function PMA_REL_create_page($newpage, $cfgRelation, $db){    if (! isset($newpage) || $newpage == '') {        $newpage = __('no description');    }    $ins_query   = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages'])                 . ' (db_name, page_descr)'                 . ' VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \'' . PMA_sqlAddSlashes($newpage) . '\')';    PMA_query_as_controluser($ins_query, false);    return PMA_DBI_insert_id(isset($GLOBALS['controllink']) ? $GLOBALS['controllink'] : '');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for creating database (if user has privileges for that) * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/check_user_privileges.lib.php';if ($is_create_db_priv) {    // The user is allowed to create a db    ?>        <form method="post" action="db_create.php" id="create_database_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="ajax" ' : ''); ?>><strong>            <?php echo '<label for="text_create_db">' . __('Create database') . '</label>&nbsp;' . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_DATABASE'); ?></strong><br />            <?php echo PMA_generate_common_hidden_inputs('', '', 5); ?>            <input type="hidden" name="reload" value="1" />            <input type="text" name="new_db" value="<?php echo $db_to_create; ?>" maxlength="64" class="textfield" id="text_create_db"/>    <?php    include_once './libraries/mysql_charsets.lib.php';    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION, 'db_collation', null, null, true, 5);    if (! empty($dbstats)) {        echo '<input type="hidden" name="dbstats" value="1" />';    }    ?>            <input type="submit" value="<?php echo __('Create'); ?>" id="buttonGo" />        </form>    <?php} else {    ?>    <!-- db creation no privileges message -->        <strong><?php echo __('Create database') . ':&nbsp;' . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_DATABASE'); ?></strong><br />        <?php              echo '<span class="noPrivileges">'                 . ($cfg['ErrorIconic'] ? PMA_getImage('s_error2.png', '', array('hspace' => 2, 'border' => 0, 'align' => 'middle')) : '')                 . '' . __('No Privileges') .'</span>';} // end create db form or message?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple script to set correct charset for the license * * Note: please do not fold this script into a general script * that would read any file using a GET parameter, it would open a hole * * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require './libraries/common.inc.php';/** * */header('Content-type: text/plain; charset=utf-8');$filename = LICENSE_FILE;// Check if the file is available, some distributions remove these.if (is_readable($filename)) {    readfile($filename);} else {    printf(__('The %s file is not available on this system, please visit www.phpmyadmin.net for more information.'), $filename);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */// sometimes, we lose $_REQUEST['js_frame']define('PMA_FRAME', (! empty($_REQUEST['js_frame']) && is_string($_REQUEST['js_frame'])) ? $_REQUEST['js_frame'] : 'right');define('PMA_MINIMUM_COMMON', true);require_once './libraries/common.inc.php';require_once './libraries/sqlparser.lib.php';// MSIE 6 (at least some unpatched versions) has problems loading CSS// when zlib_compression is onif (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER == '6' && (ini_get('zlib.output_compression'))) {    @ini_set('zlib.output_compression', 'Off');}if ($GLOBALS['text_dir'] === 'ltr') {    $right = 'right';    $left = 'left';} else {    $right = 'left';    $left = 'right';}// Send correct type:header('Content-Type: text/css; charset=UTF-8');// Cache output in client - the nocache query parameter makes sure that this// file is reloaded when config changesheader('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');$_SESSION['PMA_Theme_Manager']->printCss(PMA_FRAME);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * @todo make use of PMA_Message and PMA_Error * @package PhpMyAdmin */class PMA_Table{    /**     * UI preferences properties     */    const PROP_SORTED_COLUMN = 'sorted_col';    const PROP_COLUMN_ORDER = 'col_order';    const PROP_COLUMN_VISIB = 'col_visib';    static $cache = array();    /**     * @var string  table name     */    var $name = '';    /**     * @var string  database name     */    var $db_name = '';    /**     * @var string  engine (innodb, myisam, bdb, ...)     */    var $engine = '';    /**     * @var string  type (view, base table, system view)     */    var $type = '';    /**     * @var array   settings     */    var $settings = array();    /**     * @var array UI preferences     */    var $uiprefs;    /**     * @var array errors occured     */    var $errors = array();    /**     * @var array messages     */    var $messages = array();    /**     * Constructor     *     * @param string $table_name table name     * @param string $db_name    database name     */    function __construct($table_name, $db_name)    {        $this->setName($table_name);        $this->setDbName($db_name);    }    /**     * returns table name     *     * @see PMA_Table::getName()     * @return  string  table name     */    function __toString()    {        return $this->getName();    }    /**     * return the last error     *     * @return the last error     */    function getLastError()    {        return end($this->errors);    }    /**     * return the last message     *     * @return the last message     */    function getLastMessage()    {        return end($this->messages);    }    /**     * sets table name     *     * @param string $table_name new table name     *     * @return nothing     */    function setName($table_name)    {        $this->name = $table_name;    }    /**     * returns table name     *     * @param boolean $backquoted whether to quote name with backticks ``     *     * @return  string  table name     */    function getName($backquoted = false)    {        if ($backquoted) {            return PMA_backquote($this->name);        }        return $this->name;    }    /**     * sets database name for this table     *     * @param string $db_name database name     *     * @return nothing     */    function setDbName($db_name)    {        $this->db_name = $db_name;    }    /**     * returns database name for this table     *     * @param boolean $backquoted whether to quote name with backticks ``     *     * @return  string  database name for this table     */    function getDbName($backquoted = false)    {        if ($backquoted) {            return PMA_backquote($this->db_name);        }        return $this->db_name;    }    /**     * returns full name for table, including database name     *     * @param boolean $backquoted whether to quote name with backticks ``     *     * @return string     */    function getFullName($backquoted = false)    {        return $this->getDbName($backquoted) . '.' . $this->getName($backquoted);    }    /**     * returns whether the table is actually a view     *     * @param string $db    database     * @param string $table table     *     * @return whether the given is a view     */    static public function isView($db = null, $table = null)    {        if (empty($db) || empty($table)) {            return false;        }        // use cached data or load information with SHOW command        if (isset(PMA_Table::$cache[$db][$table]) || $GLOBALS['cfg']['Server']['DisableIS']) {            $type = PMA_Table::sGetStatusInfo($db, $table, 'TABLE_TYPE');            return $type == 'VIEW';        }        // query information_schema        $result = PMA_DBI_fetch_result(            "SELECT TABLE_NAME            FROM information_schema.VIEWS            WHERE TABLE_SCHEMA = '" . PMA_sqlAddSlashes($db) . "'                AND TABLE_NAME = '" . PMA_sqlAddSlashes($table) . "'");        return $result ? true : false;    }    /**     * sets given $value for given $param     *     * @param string $param name     * @param mixed  $value value     *     * @return nothing     */    function set($param, $value)    {        $this->settings[$param] = $value;    }    /**     * returns value for given setting/param     *     * @param string $param name for value to return     *     * @return  mixed   value for $param     */    function get($param)    {        if (isset($this->settings[$param])) {            return $this->settings[$param];        }        return null;    }    /**     * loads structure data     * (this function is work in progress? not yet used)     *     * @return boolean     */    function loadStructure()    {        $table_info = PMA_DBI_get_tables_full($this->getDbName(), $this->getName());        if (false === $table_info) {            return false;        }        $this->settings = $table_info;        if ($this->get('TABLE_ROWS') === null) {            $this->set(                'TABLE_ROWS',                PMA_Table::countRecords($this->getDbName(), $this->getName(), true)            );        }        $create_options = explode(' ', $this->get('TABLE_ROWS'));        // export create options by its name as variables into gloabel namespace        // f.e. pack_keys=1 becomes available as $pack_keys with value of '1'        foreach ($create_options as $each_create_option) {            $each_create_option = explode('=', $each_create_option);            if (isset($each_create_option[1])) {                $this->set($$each_create_option[0], $each_create_option[1]);            }        }        return true;    }    /**     * Checks if this is a merge table     *     * If the ENGINE of the table is MERGE or MRG_MYISAM (alias),     * this is a merge table.     *     * @param string $db    the database name     * @param string $table the table name     *     * @return  boolean  true if it is a merge table     */    static public function isMerge($db = null, $table = null)    {        $engine = null;        // if called static, with parameters        if (! empty($db) && ! empty($table)) {            $engine = PMA_Table::sGetStatusInfo($db, $table, 'ENGINE', null, true);        }        return (! empty($engine) && ((strtoupper($engine) == 'MERGE') || (strtoupper($engine) == 'MRG_MYISAM')));    }    static public function sGetToolTip($db, $table)    {        return PMA_Table::sGetStatusInfo($db, $table, 'Comment')            . ' (' . PMA_Table::countRecords($db, $table) . ')';    }    /**     * Returns full table status info, or specific if $info provided     * this info is collected from information_schema     *     * @param string  $db            database name     * @param string  $table         table name     * @param string  $info     * @param boolean $force_read    read new rather than serving from cache     * @param boolean $disable_error if true, disables error message     *     * @todo PMA_DBI_get_tables_full needs to be merged somehow into this class     * or at least better documented     *     * @return mixed     */    static public function sGetStatusInfo($db, $table, $info = null, $force_read = false, $disable_error = false)    {        if (! isset(PMA_Table::$cache[$db][$table]) || $force_read) {            PMA_DBI_get_tables_full($db, $table);        }        if (! isset(PMA_Table::$cache[$db][$table])) {            // happens when we enter the table creation dialog            // or when we really did not get any status info, for example            // when $table == 'TABLE_NAMES' after the user tried SHOW TABLES            return '';        }        if (null === $info) {            return PMA_Table::$cache[$db][$table];        }        // array_key_exists allows for null values        if (!array_key_exists($info, PMA_Table::$cache[$db][$table])) {            if (! $disable_error) {                trigger_error(__('unknown table status: ') . $info, E_USER_WARNING);            }            return false;        }        return PMA_Table::$cache[$db][$table][$info];    }    /**     * generates column specification for ALTER or CREATE TABLE syntax     *     * @param string      $name           name     * @param string      $type           type ('INT', 'VARCHAR', 'BIT', ...)     * @param string      $length         length ('2', '5,2', '', ...)     * @param string      $attribute      attribute     * @param string      $collation      collation     * @param bool|string $null           with 'NULL' or 'NOT NULL'     * @param string      $default_type   whether default is CURRENT_TIMESTAMP,     *                                    NULL, NONE, USER_DEFINED     * @param string      $default_value  default value for USER_DEFINED default type     * @param string      $extra          'AUTO_INCREMENT'     * @param string      $comment        field comment     * @param array       &$field_primary list of fields for PRIMARY KEY     * @param string      $index     *     * @todo    move into class PMA_Column     * @todo on the interface, some js to clear the default value when the default     * current_timestamp is checked     *     * @return  string  field specification     */    static function generateFieldSpec($name, $type, $length = '', $attribute = '',        $collation = '', $null = false, $default_type = 'USER_DEFINED',        $default_value = '', $extra = '', $comment = '',        &$field_primary, $index)    {        $is_timestamp = strpos(strtoupper($type), 'TIMESTAMP') !== false;        $query = PMA_backquote($name) . ' ' . $type;        if ($length != ''            && !preg_match('@^(DATE|DATETIME|TIME|TINYBLOB|TINYTEXT|BLOB|TEXT|'                . 'MEDIUMBLOB|MEDIUMTEXT|LONGBLOB|LONGTEXT|SERIAL|BOOLEAN|UUID)$@i', $type)) {            $query .= '(' . $length . ')';        }        if ($attribute != '') {            $query .= ' ' . $attribute;        }        if (! empty($collation) && $collation != 'NULL'            && preg_match('@^(TINYTEXT|TEXT|MEDIUMTEXT|LONGTEXT|VARCHAR|CHAR|ENUM|SET)$@i', $type)        ) {            $query .= PMA_generateCharsetQueryPart($collation);        }        if ($null !== false) {            if ($null == 'NULL') {                $query .= ' NULL';            } else {                $query .= ' NOT NULL';            }        }        switch ($default_type) {        case 'USER_DEFINED' :            if ($is_timestamp && $default_value === '0') {                // a TIMESTAMP does not accept DEFAULT '0'                // but DEFAULT 0 works                $query .= ' DEFAULT 0';            } elseif ($type == 'BIT') {                $query .= ' DEFAULT b\''                        . preg_replace('/[^01]/', '0', $default_value)                        . '\'';            } elseif ($type == 'BOOLEAN') {                if (preg_match('/^1|T|TRUE|YES$/i', $default_value)) {                    $query .= ' DEFAULT TRUE';                } elseif (preg_match('/^0|F|FALSE|NO$/i', $default_value)) {                    $query .= ' DEFAULT FALSE';                } else {                    // Invalid BOOLEAN value                    $query .= ' DEFAULT \'' . PMA_sqlAddSlashes($default_value) . '\'';                }            } else {                $query .= ' DEFAULT \'' . PMA_sqlAddSlashes($default_value) . '\'';            }            break;        case 'NULL' :        case 'CURRENT_TIMESTAMP' :            $query .= ' DEFAULT ' . $default_type;            break;        case 'NONE' :        default :            break;        }        if (!empty($extra)) {            $query .= ' ' . $extra;            // Force an auto_increment field to be part of the primary key            // even if user did not tick the PK box;            if ($extra == 'AUTO_INCREMENT') {                $primary_cnt = count($field_primary);                if (1 == $primary_cnt) {                    for ($j = 0; $j < $primary_cnt; $j++) {                        if ($field_primary[$j] == $index) {                            break;                        }                    }                    if (isset($field_primary[$j]) && $field_primary[$j] == $index) {                        $query .= ' PRIMARY KEY';                        unset($field_primary[$j]);                    }                } else {                    // but the PK could contain other columns so do not append                    // a PRIMARY KEY clause, just add a member to $field_primary                    $found_in_pk = false;                    for ($j = 0; $j < $primary_cnt; $j++) {                        if ($field_primary[$j] == $index) {                            $found_in_pk = true;                            break;                        }                    } // end for                    if (! $found_in_pk) {                        $field_primary[] = $index;                    }                }            } // end if (auto_increment)        }        if (!empty($comment)) {            $query .= " COMMENT '" . PMA_sqlAddSlashes($comment) . "'";        }        return $query;    } // end function    /**     * Counts and returns (or displays) the number of records in a table     *     * Revision 13 July 2001: Patch for limiting dump size from     * vinay@sanisoft.com & girish@sanisoft.com     *     * @param string $db          the current database name     * @param string $table       the current table name     * @param bool   $force_exact whether to force an exact count     * @param bool   $is_view     whether the table is a view     *     * @return mixed the number of records if "retain" param is true,     *               otherwise true     */    static public function countRecords($db, $table, $force_exact = false, $is_view = null)    {        if (isset(PMA_Table::$cache[$db][$table]['ExactRows'])) {            $row_count = PMA_Table::$cache[$db][$table]['ExactRows'];        } else {            $row_count = false;            if (null === $is_view) {                $is_view = PMA_Table::isView($db, $table);            }            if (! $force_exact) {                if (! isset(PMA_Table::$cache[$db][$table]['Rows']) && ! $is_view) {                    $tmp_tables = PMA_DBI_get_tables_full($db, $table);                    if (isset($tmp_tables[$table])) {                        PMA_Table::$cache[$db][$table] = $tmp_tables[$table];                    }                }                if (isset(PMA_Table::$cache[$db][$table]['Rows'])) {                    $row_count = PMA_Table::$cache[$db][$table]['Rows'];                } else {                    $row_count = false;                }            }            // for a VIEW, $row_count is always false at this point            if (false === $row_count || $row_count < $GLOBALS['cfg']['MaxExactCount']) {                // Make an exception for views in I_S and D_D schema in Drizzle, as these map to                // in-memory data and should execute fast enough                if (! $is_view || (PMA_DRIZZLE && PMA_is_system_schema($db))) {                    $row_count = PMA_DBI_fetch_value(                        'SELECT COUNT(*) FROM ' . PMA_backquote($db) . '.'                        . PMA_backquote($table)                    );                } else {                    // For complex views, even trying to get a partial record                    // count could bring down a server, so we offer an                    // alternative: setting MaxExactCountViews to 0 will bypass                    // completely the record counting for views                    if ($GLOBALS['cfg']['MaxExactCountViews'] == 0) {                        $row_count = 0;                    } else {                        // Counting all rows of a VIEW could be too long, so use                        // a LIMIT clause.                        // Use try_query because it can fail (when a VIEW is                        // based on a table that no longer exists)                        $result = PMA_DBI_try_query(                            'SELECT 1 FROM ' . PMA_backquote($db) . '.'                            . PMA_backquote($table) . ' LIMIT '                            . $GLOBALS['cfg']['MaxExactCountViews'],                            null,                            PMA_DBI_QUERY_STORE                        );                        if (!PMA_DBI_getError()) {                            $row_count = PMA_DBI_num_rows($result);                            PMA_DBI_free_result($result);                        }                    }                }                PMA_Table::$cache[$db][$table]['ExactRows'] = $row_count;            }        }        return $row_count;    } // end of the 'PMA_Table::countRecords()' function    /**     * Generates column specification for ALTER syntax     *     * @param string      $oldcol         old column name     * @param string      $newcol         new column name     * @param string      $type           type ('INT', 'VARCHAR', 'BIT', ...)     * @param string      $length         length ('2', '5,2', '', ...)     * @param string      $attribute      attribute     * @param string      $collation      collation     * @param bool|string $null           with 'NULL' or 'NOT NULL'     * @param string      $default_type   whether default is CURRENT_TIMESTAMP,     *                                    NULL, NONE, USER_DEFINED     * @param string      $default_value  default value for USER_DEFINED default type     * @param string      $extra          'AUTO_INCREMENT'     * @param string      $comment        field comment     * @param array       &$field_primary list of fields for PRIMARY KEY     * @param string      $index     * @param mixed       $default_orig     *     * @see PMA_Table::generateFieldSpec()     *     * @return  string  field specification     */    static public function generateAlter($oldcol, $newcol, $type, $length,        $attribute, $collation, $null, $default_type, $default_value,        $extra, $comment = '', &$field_primary, $index, $default_orig)    {        return PMA_backquote($oldcol) . ' '            . PMA_Table::generateFieldSpec(                $newcol, $type, $length, $attribute,                $collation, $null, $default_type, $default_value, $extra,                $comment, $field_primary, $index, $default_orig            );    } // end function    /**     * Inserts existing entries in a PMA_* table by reading a value from an old entry     *     * @param string $work         The array index, which Relation feature to check     *                             ('relwork', 'commwork', ...)     * @param string $pma_table    The array index, which PMA-table to update     *                             ('bookmark', 'relation', ...)     * @param array  $get_fields   Which fields will be SELECT'ed from the old entry     * @param array  $where_fields Which fields will be used for the WHERE query     *                             (array('FIELDNAME' => 'FIELDVALUE'))     * @param array  $new_fields   Which fields will be used as new VALUES. These are     *                             the important keys which differ from the old entry     *                             (array('FIELDNAME' => 'NEW FIELDVALUE'))     *     * @global relation variable     *     * @return int|true     */    static public function duplicateInfo($work, $pma_table, $get_fields, $where_fields, $new_fields)    {        $last_id = -1;        if (isset($GLOBALS['cfgRelation']) && $GLOBALS['cfgRelation'][$work]) {            $select_parts = array();            $row_fields = array();            foreach ($get_fields as $get_field) {                $select_parts[] = PMA_backquote($get_field);                $row_fields[$get_field] = 'cc';            }            $where_parts = array();            foreach ($where_fields as $_where => $_value) {                $where_parts[] = PMA_backquote($_where) . ' = \''                    . PMA_sqlAddSlashes($_value) . '\'';            }            $new_parts = array();            $new_value_parts = array();            foreach ($new_fields as $_where => $_value) {                $new_parts[] = PMA_backquote($_where);                $new_value_parts[] = PMA_sqlAddSlashes($_value);            }            $table_copy_query = '                SELECT ' . implode(', ', $select_parts) . '                  FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                  . PMA_backquote($GLOBALS['cfgRelation'][$pma_table]) . '                 WHERE ' . implode(' AND ', $where_parts);            // must use PMA_DBI_QUERY_STORE here, since we execute another            // query inside the loop            $table_copy_rs = PMA_query_as_controluser(                $table_copy_query, true, PMA_DBI_QUERY_STORE            );            while ($table_copy_row = @PMA_DBI_fetch_assoc($table_copy_rs)) {                $value_parts = array();                foreach ($table_copy_row as $_key => $_val) {                    if (isset($row_fields[$_key]) && $row_fields[$_key] == 'cc') {                        $value_parts[] = PMA_sqlAddSlashes($_val);                    }                }                $new_table_query = 'INSERT IGNORE INTO '                    . PMA_backquote($GLOBALS['cfgRelation']['db'])                    . '.' . PMA_backquote($GLOBALS['cfgRelation'][$pma_table]) . '                    (' . implode(', ', $select_parts) . ',                     ' . implode(', ', $new_parts) . ')                    VALUES                    (\'' . implode('\', \'', $value_parts) . '\',                     \'' . implode('\', \'', $new_value_parts) . '\')';                PMA_query_as_controluser($new_table_query);                $last_id = PMA_DBI_insert_id();            } // end while            PMA_DBI_free_result($table_copy_rs);            return $last_id;        }        return true;    } // end of 'PMA_Table::duplicateInfo()' function    /**     * Copies or renames table     *     * @param string $source_db    source database     * @param string $source_table source table     * @param string $target_db    target database     * @param string $target_table target table     * @param string $what         what to be moved or copied (data, dataonly)     * @param bool   $move         whether to move     * @param string $mode         mode     *     * @return bool true if success, false otherwise     */    static public function moveCopy($source_db, $source_table, $target_db, $target_table, $what, $move, $mode)    {        global $err_url;        /* Try moving table directly */        if ($move && $what == 'data') {            $tbl = new PMA_Table($source_table, $source_db);            $result = $tbl->rename(                $target_table, $target_db,                PMA_Table::isView($source_db, $source_table)            );            if ($result) {                $GLOBALS['message'] = $tbl->getLastMessage();                return true;            }        }        // set export settings we need        $GLOBALS['sql_backquotes'] = 1;        $GLOBALS['asfile']         = 1;        // Ensure the target is valid        if (! $GLOBALS['pma']->databases->exists($source_db, $target_db)) {            if (! $GLOBALS['pma']->databases->exists($source_db)) {                $GLOBALS['message'] = PMA_Message::rawError(                    'source database `' . htmlspecialchars($source_db) . '` not found'                );            }            if (! $GLOBALS['pma']->databases->exists($target_db)) {                $GLOBALS['message'] = PMA_Message::rawError(                    'target database `' . htmlspecialchars($target_db) . '` not found'                );            }            return false;        }        $source = PMA_backquote($source_db) . '.' . PMA_backquote($source_table);        if (! isset($target_db) || ! strlen($target_db)) {            $target_db = $source_db;        }        // Doing a select_db could avoid some problems with replicated databases,        // when moving table from replicated one to not replicated one        PMA_DBI_select_db($target_db);        $target = PMA_backquote($target_db) . '.' . PMA_backquote($target_table);        // do not create the table if dataonly        if ($what != 'dataonly') {            include_once './libraries/export/sql.php';            $no_constraints_comments = true;            $GLOBALS['sql_constraints_query'] = '';            $sql_structure = PMA_getTableDef(                $source_db, $source_table, "\n", $err_url, false, false            );            unset($no_constraints_comments);            $parsed_sql =  PMA_SQP_parse($sql_structure);            $analyzed_sql = PMA_SQP_analyze($parsed_sql);            $i = 0;            if (empty($analyzed_sql[0]['create_table_fields'])) {                // this is not a CREATE TABLE, so find the first VIEW                $target_for_view = PMA_backquote($target_db);                while (true) {                    if ($parsed_sql[$i]['type'] == 'alpha_reservedWord'                        && $parsed_sql[$i]['data'] == 'VIEW'                    ) {                        break;                    }                    $i++;                }            }            unset($analyzed_sql);            if (PMA_DRIZZLE) {                $table_delimiter = 'quote_backtick';            } else {                $server_sql_mode = PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'sql_mode'", 0, 1);                // ANSI_QUOTES might be a subset of sql_mode, for example                // REAL_AS_FLOAT,PIPES_AS_CONCAT,ANSI_QUOTES,IGNORE_SPACE,ANSI                if (false !== strpos($server_sql_mode, 'ANSI_QUOTES')) {                    $table_delimiter = 'quote_double';                } else {                    $table_delimiter = 'quote_backtick';                }                unset($server_sql_mode);            }            /* Find table name in query and replace it */            while ($parsed_sql[$i]['type'] != $table_delimiter) {                $i++;            }            /* no need to PMA_backquote() */            if (isset($target_for_view)) {                // this a view definition; we just found the first db name                // that follows DEFINER VIEW                // so change it for the new db name                        $parsed_sql[$i]['data'] = $target_for_view;                // then we have to find all references to the source db                // and change them to the target db, ensuring we stay into                // the $parsed_sql limits                $last = $parsed_sql['len'] - 1;                $backquoted_source_db = PMA_backquote($source_db);                for (++$i; $i <= $last; $i++) {                    if ($parsed_sql[$i]['type'] == $table_delimiter                        && $parsed_sql[$i]['data'] == $backquoted_source_db                    ) {                        $parsed_sql[$i]['data'] = $target_for_view;                    }                }                unset($last,$backquoted_source_db);            } else {                $parsed_sql[$i]['data'] = $target;            }            /* Generate query back */            $sql_structure = PMA_SQP_formatHtml($parsed_sql, 'query_only');            // If table exists, and 'add drop table' is selected: Drop it!            $drop_query = '';            if (isset($GLOBALS['drop_if_exists'])                && $GLOBALS['drop_if_exists'] == 'true'            ) {                if (PMA_Table::isView($target_db, $target_table)) {                    $drop_query = 'DROP VIEW';                } else {                    $drop_query = 'DROP TABLE';                }                $drop_query .= ' IF EXISTS '                    . PMA_backquote($target_db) . '.'                    . PMA_backquote($target_table);                PMA_DBI_query($drop_query);                $GLOBALS['sql_query'] .= "\n" . $drop_query . ';';                // If an existing table gets deleted, maintain any                // entries for the PMA_* tables                $maintain_relations = true;            }            @PMA_DBI_query($sql_structure);            $GLOBALS['sql_query'] .= "\n" . $sql_structure . ';';            if (($move || isset($GLOBALS['add_constraints']))                && !empty($GLOBALS['sql_constraints_query'])            ) {                $parsed_sql =  PMA_SQP_parse($GLOBALS['sql_constraints_query']);                $i = 0;                // find the first $table_delimiter, it must be the source table name                while ($parsed_sql[$i]['type'] != $table_delimiter) {                    $i++;                    // maybe someday we should guard against going over limit                    //if ($i == $parsed_sql['len']) {                    //    break;                    //}                }                // replace it by the target table name, no need to PMA_backquote()                $parsed_sql[$i]['data'] = $target;                // now we must remove all $table_delimiter that follow a CONSTRAINT                // keyword, because a constraint name must be unique in a db                $cnt = $parsed_sql['len'] - 1;                for ($j = $i; $j < $cnt; $j++) {                    if ($parsed_sql[$j]['type'] == 'alpha_reservedWord'                        && strtoupper($parsed_sql[$j]['data']) == 'CONSTRAINT'                    ) {                        if ($parsed_sql[$j+1]['type'] == $table_delimiter) {                            $parsed_sql[$j+1]['data'] = '';                        }                    }                }                // Generate query back                $GLOBALS['sql_constraints_query'] = PMA_SQP_formatHtml(                    $parsed_sql, 'query_only'                );                if ($mode == 'one_table') {                    PMA_DBI_query($GLOBALS['sql_constraints_query']);                }                $GLOBALS['sql_query'] .= "\n" . $GLOBALS['sql_constraints_query'];                if ($mode == 'one_table') {                    unset($GLOBALS['sql_constraints_query']);                }            }        } else {            $GLOBALS['sql_query'] = '';        }        // Copy the data unless this is a VIEW        if (($what == 'data' || $what == 'dataonly')            && ! PMA_Table::isView($target_db, $target_table)        ) {            $sql_set_mode = "SET SQL_MODE='NO_AUTO_VALUE_ON_ZERO'";            PMA_DBI_query($sql_set_mode);            $GLOBALS['sql_query'] .= "\n\n" . $sql_set_mode . ';';            $sql_insert_data = 'INSERT INTO ' . $target . ' SELECT * FROM ' . $source;            PMA_DBI_query($sql_insert_data);            $GLOBALS['sql_query']      .= "\n\n" . $sql_insert_data . ';';        }        $GLOBALS['cfgRelation'] = PMA_getRelationsParam();        // Drops old table if the user has requested to move it        if ($move) {            // This could avoid some problems with replicated databases, when            // moving table from replicated one to not replicated one            PMA_DBI_select_db($source_db);            if (PMA_Table::isView($source_db, $source_table)) {                $sql_drop_query = 'DROP VIEW';            } else {                $sql_drop_query = 'DROP TABLE';            }            $sql_drop_query .= ' ' . $source;            PMA_DBI_query($sql_drop_query);            // Move old entries from PMA-DBs to new table            if ($GLOBALS['cfgRelation']['commwork']) {                $remove_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['column_info'])                              . ' SET     table_name = \'' . PMA_sqlAddSlashes($target_table) . '\', '                              . '        db_name    = \'' . PMA_sqlAddSlashes($target_db) . '\''                              . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                              . ' AND table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($remove_query);                unset($remove_query);            }            // updating bookmarks is not possible since only a single table is moved,            // and not the whole DB.            if ($GLOBALS['cfgRelation']['displaywork']) {                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['table_info'])                                . ' SET     db_name = \'' . PMA_sqlAddSlashes($target_db) . '\', '                                . '         table_name = \'' . PMA_sqlAddSlashes($target_table) . '\''                                . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);            }            if ($GLOBALS['cfgRelation']['relwork']) {                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['relation'])                                . ' SET     foreign_table = \'' . PMA_sqlAddSlashes($target_table) . '\','                                . '         foreign_db = \'' . PMA_sqlAddSlashes($target_db) . '\''                                . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND foreign_table = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['relation'])                                . ' SET     master_table = \'' . PMA_sqlAddSlashes($target_table) . '\','                                . '         master_db = \'' . PMA_sqlAddSlashes($target_db) . '\''                                . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND master_table = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);            }            /**             * @todo Can't get moving PDFs the right way. The page numbers             * always get screwed up independently from duplication because the             * numbers do not seem to be stored on a per-database basis. Would             * the author of pdf support please have a look at it?             */            if ($GLOBALS['cfgRelation']['pdfwork']) {                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['table_coords'])                                . ' SET     table_name = \'' . PMA_sqlAddSlashes($target_table) . '\','                                . '         db_name = \'' . PMA_sqlAddSlashes($target_db) . '\''                                . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);                /*                $pdf_query = 'SELECT pdf_page_number '                           . ' FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['table_coords'])                           . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($target_db) . '\''                           . ' AND table_name = \'' . PMA_sqlAddSlashes($target_table) . '\'';                $pdf_rs = PMA_query_as_controluser($pdf_query);                while ($pdf_copy_row = PMA_DBI_fetch_assoc($pdf_rs)) {                    $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['pdf_pages'])                                    . ' SET     db_name = \'' . PMA_sqlAddSlashes($target_db) . '\''                                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                    . ' AND page_nr = \'' . PMA_sqlAddSlashes($pdf_copy_row['pdf_page_number']) . '\'';                    $tb_rs    = PMA_query_as_controluser($table_query);                    unset($table_query);                    unset($tb_rs);                }                */            }            if ($GLOBALS['cfgRelation']['designerwork']) {                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords'])                                . ' SET     table_name = \'' . PMA_sqlAddSlashes($target_table) . '\','                                . '         db_name = \'' . PMA_sqlAddSlashes($target_db) . '\''                                . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);            }            $GLOBALS['sql_query']      .= "\n\n" . $sql_drop_query . ';';            // end if ($move)        } else {            // we are copying            // Create new entries as duplicates from old PMA DBs            if ($what != 'dataonly' && ! isset($maintain_relations)) {                if ($GLOBALS['cfgRelation']['commwork']) {                    // Get all comments and MIME-Types for current table                    $comments_copy_query = 'SELECT                                                column_name, comment' . ($GLOBALS['cfgRelation']['mimework'] ? ', mimetype, transformation, transformation_options' : '') . '                                            FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['column_info']) . '                                            WHERE                                                db_name = \'' . PMA_sqlAddSlashes($source_db) . '\' AND                                                table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                    $comments_copy_rs    = PMA_query_as_controluser($comments_copy_query);                    // Write every comment as new copied entry. [MIME]                    while ($comments_copy_row = PMA_DBI_fetch_assoc($comments_copy_rs)) {                        $new_comment_query = 'REPLACE INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['column_info'])                                    . ' (db_name, table_name, column_name, comment' . ($GLOBALS['cfgRelation']['mimework'] ? ', mimetype, transformation, transformation_options' : '') . ') '                                    . ' VALUES('                                    . '\'' . PMA_sqlAddSlashes($target_db) . '\','                                    . '\'' . PMA_sqlAddSlashes($target_table) . '\','                                    . '\'' . PMA_sqlAddSlashes($comments_copy_row['column_name']) . '\''                                    . ($GLOBALS['cfgRelation']['mimework'] ? ',\'' . PMA_sqlAddSlashes($comments_copy_row['comment']) . '\','                                            . '\'' . PMA_sqlAddSlashes($comments_copy_row['mimetype']) . '\','                                            . '\'' . PMA_sqlAddSlashes($comments_copy_row['transformation']) . '\','                                            . '\'' . PMA_sqlAddSlashes($comments_copy_row['transformation_options']) . '\'' : '')                                    . ')';                        PMA_query_as_controluser($new_comment_query);                    } // end while                    PMA_DBI_free_result($comments_copy_rs);                    unset($comments_copy_rs);                }                // duplicating the bookmarks must not be done here, but                // just once per db                $get_fields = array('display_field');                $where_fields = array('db_name' => $source_db, 'table_name' => $source_table);                $new_fields = array('db_name' => $target_db, 'table_name' => $target_table);                PMA_Table::duplicateInfo('displaywork', 'table_info', $get_fields, $where_fields, $new_fields);                /**                 * @todo revise this code when we support cross-db relations                 */                $get_fields = array('master_field', 'foreign_table', 'foreign_field');                $where_fields = array('master_db' => $source_db, 'master_table' => $source_table);                $new_fields = array('master_db' => $target_db, 'foreign_db' => $target_db, 'master_table' => $target_table);                PMA_Table::duplicateInfo('relwork', 'relation', $get_fields, $where_fields, $new_fields);                $get_fields = array('foreign_field', 'master_table', 'master_field');                $where_fields = array('foreign_db' => $source_db, 'foreign_table' => $source_table);                $new_fields = array('master_db' => $target_db, 'foreign_db' => $target_db, 'foreign_table' => $target_table);                PMA_Table::duplicateInfo('relwork', 'relation', $get_fields, $where_fields, $new_fields);                $get_fields = array('x', 'y', 'v', 'h');                $where_fields = array('db_name' => $source_db, 'table_name' => $source_table);                $new_fields = array('db_name' => $target_db, 'table_name' => $target_table);                PMA_Table::duplicateInfo('designerwork', 'designer_coords', $get_fields, $where_fields, $new_fields);                /**                 * @todo Can't get duplicating PDFs the right way. The                 * page numbers always get screwed up independently from                 * duplication because the numbers do not seem to be stored on a                 * per-database basis. Would the author of pdf support please                 * have a look at it?                 *                $get_fields = array('page_descr');                $where_fields = array('db_name' => $source_db);                $new_fields = array('db_name' => $target_db);                $last_id = PMA_Table::duplicateInfo('pdfwork', 'pdf_pages', $get_fields, $where_fields, $new_fields);                if (isset($last_id) && $last_id >= 0) {                    $get_fields = array('x', 'y');                    $where_fields = array('db_name' => $source_db, 'table_name' => $source_table);                    $new_fields = array('db_name' => $target_db, 'table_name' => $target_table, 'pdf_page_number' => $last_id);                    PMA_Table::duplicateInfo('pdfwork', 'table_coords', $get_fields, $where_fields, $new_fields);                }                 */            }        }        return true;    }    /**     * checks if given name is a valid table name,     * currently if not empty, trailing spaces, '.', '/' and '\'     *     * @param string $table_name name to check     *     * @todo add check for valid chars in filename on current system/os     * @see  http://dev.mysql.com/doc/refman/5.0/en/legal-names.html     *     * @return  boolean whether the string is valid or not     */    function isValidName($table_name)    {        if ($table_name !== trim($table_name)) {            // trailing spaces            return false;        }        if (! strlen($table_name)) {            // zero length            return false;        }        if (preg_match('/[.\/\\\\]+/i', $table_name)) {            // illegal char . / \            return false;        }        return true;    }    /**     * renames table     *     * @param string $new_name new table name     * @param string $new_db   new database name     * @param bool   $is_view  is this for a VIEW rename?     * @todo    remove the $is_view parameter (also in callers)     *     * @return bool success     */    function rename($new_name, $new_db = null, $is_view = false)    {        if (null !== $new_db && $new_db !== $this->getDbName()) {            // Ensure the target is valid            if (! $GLOBALS['pma']->databases->exists($new_db)) {                $this->errors[] = __('Invalid database') . ': ' . $new_db;                return false;            }        } else {            $new_db = $this->getDbName();        }        $new_table = new PMA_Table($new_name, $new_db);        if ($this->getFullName() === $new_table->getFullName()) {            return true;        }        if (! PMA_Table::isValidName($new_name)) {            $this->errors[] = __('Invalid table name') . ': ' . $new_table->getFullName();            return false;        }        // If the table is moved to a different database drop its triggers first        $triggers = PMA_DBI_get_triggers($this->getDbName(), $this->getName(), '');        $handle_triggers = $this->getDbName() != $new_db && $triggers;        if ($handle_triggers) {            foreach ($triggers as $trigger) {                $sql = 'DROP TRIGGER IF EXISTS ' . PMA_backquote($this->getDbName()) . '.'                    . PMA_backquote($trigger['name']) . ';';                PMA_DBI_query($sql);            }        }        /*         * tested also for a view, in MySQL 5.0.92, 5.1.55 and 5.5.13         */        $GLOBALS['sql_query'] = '            RENAME TABLE ' . $this->getFullName(true) . '                  TO ' . $new_table->getFullName(true) . ';';        // I don't think a specific error message for views is necessary        if (! PMA_DBI_query($GLOBALS['sql_query'])) {            // Restore triggers in the old database            if ($handle_triggers) {                PMA_DBI_select_db($this->getDbName());                foreach ($triggers as $trigger) {                    PMA_DBI_query($trigger['create']);                }            }            $this->errors[] = sprintf(                __('Error renaming table %1$s to %2$s'),                $this->getFullName(),                $new_table->getFullName()            );            return false;        }        $old_name = $this->getName();        $old_db = $this->getDbName();        $this->setName($new_name);        $this->setDbName($new_db);        /**         * @todo move into extra function PMA_Relation::renameTable($new_name, $old_name, $new_db, $old_db)         */        // Move old entries from comments to new table        $GLOBALS['cfgRelation'] = PMA_getRelationsParam();        if ($GLOBALS['cfgRelation']['commwork']) {            $remove_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['column_info']) . '                   SET `db_name`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `table_name` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `db_name`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `table_name` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($remove_query);            unset($remove_query);        }        if ($GLOBALS['cfgRelation']['displaywork']) {            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['table_info']) . '                   SET `db_name`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `table_name` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `db_name`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `table_name` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            unset($table_query);        }        if ($GLOBALS['cfgRelation']['relwork']) {            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['relation']) . '                   SET `foreign_db`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `foreign_table` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `foreign_db`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `foreign_table` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['relation']) . '                   SET `master_db`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `master_table` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `master_db`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `master_table` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            unset($table_query);        }        if ($GLOBALS['cfgRelation']['pdfwork']) {            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['table_coords']) . '                   SET `db_name`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `table_name` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `db_name`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `table_name` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            unset($table_query);        }        if ($GLOBALS['cfgRelation']['designerwork']) {            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']) . '                   SET `db_name`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `table_name` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `db_name`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `table_name` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            unset($table_query);        }        $this->messages[] = sprintf(            __('Table %s has been renamed to %s'),            htmlspecialchars($old_name),            htmlspecialchars($new_name)        );        return true;    }    /**     * Get all unique columns     *     * returns an array with all columns with unqiue content, in fact these are     * all columns being single indexed in PRIMARY or UNIQUE     *     * e.g.     *  - PRIMARY(id) // id     *  - UNIQUE(name) // name     *  - PRIMARY(fk_id1, fk_id2) // NONE     *  - UNIQUE(x,y) // NONE     *     * @param bool $backquoted whether to quote name with backticks ``     *     * @return array     */    public function getUniqueColumns($backquoted = true)    {        $sql = PMA_DBI_get_table_indexes_sql($this->getDbName(), $this->getName(), 'Non_unique = 0');        $uniques = PMA_DBI_fetch_result($sql, array('Key_name', null), 'Column_name');        $return = array();        foreach ($uniques as $index) {            if (count($index) > 1) {                continue;            }            $return[] = $this->getFullName($backquoted) . '.'                . ($backquoted ? PMA_backquote($index[0]) : $index[0]);        }        return $return;    }    /**     * Get all indexed columns     *     * returns an array with all columns make use of an index, in fact only     * first columns in an index     *     * e.g. index(col1, col2) would only return col1     *     * @param bool $backquoted whether to quote name with backticks ``     *     * @return array     */    public function getIndexedColumns($backquoted = true)    {        $sql = PMA_DBI_get_table_indexes_sql($this->getDbName(), $this->getName(), 'Seq_in_index = 1');        $indexed = PMA_DBI_fetch_result($sql, 'Column_name', 'Column_name');        $return = array();        foreach ($indexed as $column) {            $return[] = $this->getFullName($backquoted) . '.'                . ($backquoted ? PMA_backquote($column) : $column);        }        return $return;    }    /**     * Get all columns     *     * returns an array with all columns     *     * @param bool $backquoted whether to quote name with backticks ``     *     * @return array     */    public function getColumns($backquoted = true)    {        $sql = 'SHOW COLUMNS FROM ' . $this->getFullName(true);        $indexed = PMA_DBI_fetch_result($sql, 'Field', 'Field');        $return = array();        foreach ($indexed as $column) {            $return[] = $this->getFullName($backquoted) . '.'                . ($backquoted ? PMA_backquote($column) : $column);        }        return $return;    }    /**     * Return UI preferences for this table from phpMyAdmin database.     *     * @return array     */    protected function getUiPrefsFromDb()    {        $pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) .".".                     PMA_backquote($GLOBALS['cfg']['Server']['table_uiprefs']);        // Read from phpMyAdmin database        $sql_query = " SELECT `prefs` FROM " . $pma_table            . " WHERE `username` = '" . $GLOBALS['cfg']['Server']['user'] . "'"            . " AND `db_name` = '" . PMA_sqlAddSlashes($this->db_name) . "'"            . " AND `table_name` = '" . PMA_sqlAddSlashes($this->name) . "'";        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        if (isset($row[0])) {            return json_decode($row[0], true);        } else {            return array();        }    }    /**     * Save this table's UI preferences into phpMyAdmin database.     *     * @return true|PMA_Message     */    protected function saveUiPrefsToDb()    {        $pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . "."            . PMA_backquote($GLOBALS['cfg']['Server']['table_uiprefs']);        $username = $GLOBALS['cfg']['Server']['user'];        $sql_query = " REPLACE INTO " . $pma_table            . " VALUES ('" . $username . "', '" . PMA_sqlAddSlashes($this->db_name)            . "', '" . PMA_sqlAddSlashes($this->name) . "', '"            . PMA_sqlAddSlashes(json_encode($this->uiprefs)) . "', NULL)";        $success = PMA_DBI_try_query($sql_query, $GLOBALS['controllink']);        if (!$success) {            $message = PMA_Message::error(__('Could not save table UI preferences'));            $message->addMessage('<br /><br />');            $message->addMessage(                PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink']))            );            return $message;        }        // Remove some old rows in table_uiprefs if it exceeds the configured maximum rows        $sql_query = 'SELECT COUNT(*) FROM ' . $pma_table;        $rows_count = PMA_DBI_fetch_value($sql_query);        $max_rows = $GLOBALS['cfg']['Server']['MaxTableUiprefs'];        if ($rows_count > $max_rows) {            $num_rows_to_delete = $rows_count - $max_rows;            $sql_query                = ' DELETE FROM ' . $pma_table .                ' ORDER BY last_update ASC' .                ' LIMIT ' . $num_rows_to_delete;            $success = PMA_DBI_try_query($sql_query, $GLOBALS['controllink']);            if (!$success) {                $message = PMA_Message::error(                    sprintf(                        __('Failed to cleanup table UI preferences (see $cfg[\'Servers\'][$i][\'MaxTableUiprefs\'] %s)'),                        PMA_showDocu('cfg_Servers_MaxTableUiprefs')                    )                );                $message->addMessage('<br /><br />');                $message->addMessage(PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink'])));                print_r($message);                return $message;            }        }        return true;    }    /**     * Loads the UI preferences for this table.     * If pmadb and table_uiprefs is set, it will load the UI preferences from     * phpMyAdmin database.     *     * @return nothing     */    protected function loadUiPrefs()    {        $server_id = $GLOBALS['server'];        // set session variable if it's still undefined        if (! isset($_SESSION['tmp_user_values']['table_uiprefs'][$server_id][$this->db_name][$this->name])) {            $_SESSION['tmp_user_values']['table_uiprefs'][$server_id][$this->db_name][$this->name] =                // check whether we can get from pmadb                (strlen($GLOBALS['cfg']['Server']['pmadb'])                && strlen($GLOBALS['cfg']['Server']['table_uiprefs']))                    ?  $this->getUiPrefsFromDb()                    : array();        }        $this->uiprefs =& $_SESSION['tmp_user_values']['table_uiprefs'][$server_id][$this->db_name][$this->name];    }    /**     * Get a property from UI preferences.     * Return false if the property is not found.     * Available property:     * - PROP_SORTED_COLUMN     * - PROP_COLUMN_ORDER     * - PROP_COLUMN_VISIB     *     * @param string $property property     *     * @return mixed     */    public function getUiProp($property)    {        if (! isset($this->uiprefs)) {            $this->loadUiPrefs();        }        // do checking based on property        if ($property == self::PROP_SORTED_COLUMN) {            if (isset($this->uiprefs[$property])) {                // check if the column name is exist in this table                $tmp = explode(' ', $this->uiprefs[$property]);                $colname = $tmp[0];                $avail_columns = $this->getColumns();                foreach ($avail_columns as $each_col) {                    // check if $each_col ends with $colname                    if (substr_compare($each_col, $colname, strlen($each_col) - strlen($colname)) === 0) {                        return $this->uiprefs[$property];                    }                }                // remove the property, since it is not exist anymore in database                $this->removeUiProp(self::PROP_SORTED_COLUMN);                return false;            } else {                return false;            }        } elseif ($property == self::PROP_COLUMN_ORDER            || $property == self::PROP_COLUMN_VISIB        ) {            if (! PMA_Table::isView($this->db_name, $this->name) && isset($this->uiprefs[$property])) {                // check if the table has not been modified                if (self::sGetStatusInfo($this->db_name, $this->name, 'Create_time') == $this->uiprefs['CREATE_TIME']) {                    return $this->uiprefs[$property];                } else {                    // remove the property, since the table has been modified                    $this->removeUiProp(self::PROP_COLUMN_ORDER);                    return false;                }            } else {                return false;            }        }        // default behaviour for other property:        return isset($this->uiprefs[$property]) ? $this->uiprefs[$property] : false;    }    /**     * Set a property from UI preferences.     * If pmadb and table_uiprefs is set, it will save the UI preferences to     * phpMyAdmin database.     * Available property:     * - PROP_SORTED_COLUMN     * - PROP_COLUMN_ORDER     * - PROP_COLUMN_VISIB     *     * @param string $property          Property     * @param mixed  $value             Value for the property     * @param string $table_create_time Needed for PROP_COLUMN_ORDER and PROP_COLUMN_VISIB     *     * @return boolean|PMA_Message     */    public function setUiProp($property, $value, $table_create_time = null)    {        if (! isset($this->uiprefs)) {            $this->loadUiPrefs();        }        // we want to save the create time if the property is PROP_COLUMN_ORDER        if (! PMA_Table::isView($this->db_name, $this->name)            && ($property == self::PROP_COLUMN_ORDER || $property == self::PROP_COLUMN_VISIB)        ) {            $curr_create_time = self::sGetStatusInfo($this->db_name, $this->name, 'CREATE_TIME');            if (isset($table_create_time)                && $table_create_time == $curr_create_time            ) {                $this->uiprefs['CREATE_TIME'] = $curr_create_time;            } else {                // there is no $table_create_time, or                // supplied $table_create_time is older than current create time,                // so don't save                return PMA_Message::error(sprintf(                    __('Cannot save UI property "%s". The changes made will not be persistent after you refresh this page. Please check if the table structure has been changed.'), $property));            }        }        // save the value        $this->uiprefs[$property] = $value;        // check if pmadb is set        if (strlen($GLOBALS['cfg']['Server']['pmadb'])            && strlen($GLOBALS['cfg']['Server']['table_uiprefs'])        ) {            return $this->saveUiprefsToDb();        }        return true;    }    /**     * Remove a property from UI preferences.     *     * @param string $property the property     *     * @return true|PMA_Message     */    public function removeUiProp($property)    {        if (! isset($this->uiprefs)) {            $this->loadUiPrefs();        }        if (isset($this->uiprefs[$property])) {            unset($this->uiprefs[$property]);            // check if pmadb is set            if (strlen($GLOBALS['cfg']['Server']['pmadb'])                && strlen($GLOBALS['cfg']['Server']['table_uiprefs'])            ) {                return $this->saveUiprefsToDb();            }        }        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * hold PMA_Theme class * * @package PhpMyAdmin *//** * handles theme * * @todo add the possibility to make a theme depend on another theme and by default on original * @todo make all components optional - get missing components from 'parent' theme * @todo make css optionally replacing 'parent' css or extending it (by appending at the end) * @todo add an optional global css file - which will be used for both frames * * @package PhpMyAdmin */class PMA_Theme{    /**     * @var string theme version     * @access  protected     */    var $version = '0.0.0.0';    /**     * @var string theme name     * @access  protected     */    var $name = '';    /**     * @var string theme id     * @access  protected     */    var $id = '';    /**     * @var string theme path     * @access  protected     */    var $path = '';    /**     * @var string image path     * @access  protected     */    var $img_path = '';    /**     * @var array   valid css types     * @access  protected     */    var $types = array('left', 'right', 'print');    /**     * @var integer last modification time for info file     * @access  protected     */    var $mtime_info = 0;    /**     * needed because sometimes, the mtime for different themes     * is identical     * @var integer filesize for info file     * @access  protected     */    var $filesize_info = 0;    /**     * @access  public     * @return  boolean     whether loading them info was successful or not     */    function loadInfo()    {        if (! file_exists($this->getPath() . '/info.inc.php')) {            return false;        }        if ($this->mtime_info === filemtime($this->getPath() . '/info.inc.php')) {            return true;        }        @include $this->getPath() . '/info.inc.php';        // was it set correctly?        if (! isset($theme_name)) {            return false;        }        $this->mtime_info = filemtime($this->getPath() . '/info.inc.php');        $this->filesize_info = filesize($this->getPath() . '/info.inc.php');        if (isset($theme_full_version)) {            $this->setVersion($theme_full_version);        } elseif (isset($theme_generation, $theme_version)) {            $this->setVersion($theme_generation . '.' . $theme_version);        }        $this->setName($theme_name);        return true;    }    /**     * returns theme object loaded from given folder     * or false if theme is invalid     *     * @static     * @access  public     * @param string  $folder path to theme     * @return  object  PMA_Theme     */    static public function load($folder)    {        $theme = new PMA_Theme();        $theme->setPath($folder);        if (! $theme->loadInfo()) {            return false;        }        $theme->checkImgPath();        return $theme;    }    /**     * checks image path for existance - if not found use img from original theme     *     * @access  public     * @return bool     */    function checkImgPath()    {        if (is_dir($this->getPath() . '/img/')) {            $this->setImgPath($this->getPath() . '/img/');            return true;        } elseif (is_dir($GLOBALS['cfg']['ThemePath'] . '/original/img/')) {            $this->setImgPath($GLOBALS['cfg']['ThemePath'] . '/original/img/');            return true;        } else {            trigger_error(                sprintf(__('No valid image path for theme %s found!'), $this->getName()),                E_USER_ERROR);            return false;        }    }    /**     * returns path to theme     *     * @access  public     * @return  string  $path   path to theme     */    function getPath()    {        return $this->path;    }    /**     * returns layout file     *     * @access  public     * @return  string  layout file     */    function getLayoutFile()    {        return $this->getPath() . '/layout.inc.php';    }    /**     * set path to theme     *     * @access  public     * @param string  $path   path to theme     */    function setPath($path)    {        $this->path = trim($path);    }    /**     * sets version     *     * @access  public     * @param string new version     */    function setVersion($version)    {        $this->version = trim($version);    }    /**     * returns version     *     * @access  public     * @return  string  version     */    function getVersion()    {        return $this->version;    }    /**     * checks theme version agaisnt $version     * returns true if theme version is equal or higher to $version     *     * @access  public     * @param string  $version    version to compare to     * @return  boolean     */    function checkVersion($version)    {        return version_compare($this->getVersion(), $version, 'lt');    }    /**     * sets name     *     * @access  public     * @param string  $name   new name     */    function setName($name)    {        $this->name = trim($name);    }    /**     * returns name     *     * @access  public     * @return  string name     */    function getName()    {        return $this->name;    }    /**     * sets id     *     * @access  public     * @param string  $id   new id     */    function setId($id)    {        $this->id = trim($id);    }    /**     * returns id     *     * @access  public     * @return  string  id     */    function getId()    {        return $this->id;    }    /**     * @access  public     * @param string  path to images for this theme     */    function setImgPath($path)    {        $this->img_path = $path;    }    /**     * @access  public     * @return  string image path for this theme     */    function getImgPath()    {        return $this->img_path;    }    /**     * load css (send to stdout, normally the browser)     *     * @access  public     * @param string  $type   left, right or print     * @return bool     */    function loadCss(&$type)    {        if (empty($type) || ! in_array($type, $this->types)) {            $type = 'left';        }        if ($type == 'right') {            echo PMA_SQP_buildCssData();        }        $_css_file = $this->getPath()                   . '/css/theme_' . $type . '.css.php';        if (! file_exists($_css_file)) {            return false;        }        if ($GLOBALS['text_dir'] === 'ltr') {            $right = 'right';            $left = 'left';        } else {            $right = 'left';            $left = 'right';        }        include $_css_file;        if ($type != 'print') {            $_sprites_data_file = $this->getPath() . '/sprites.lib.php';            $_sprites_css_file = './themes/sprites.css.php';            if (   (file_exists($_sprites_data_file)  && is_readable($_sprites_data_file))                && (file_exists($_sprites_css_file) && is_readable($_sprites_css_file))            ) {                include $_sprites_data_file;                include $_sprites_css_file;            }        }        return true;    }    /**     * prints out the preview for this theme     *     * @access  public     */    function printPreview()    {        echo '<div class="theme_preview">';        echo '<h2>' . htmlspecialchars($this->getName())            .' (' . htmlspecialchars($this->getVersion()) . ')</h2>';        echo '<p>';        echo '<a target="_top" class="take_theme" '            .'name="' . htmlspecialchars($this->getId()) . '" '            . 'href="index.php'.PMA_generate_common_url(array(                'set_theme' => $this->getId()                )) . '">';        if (@file_exists($this->getPath() . '/screen.png')) {            // if screen exists then output            echo '<img src="' . $this->getPath() . '/screen.png" border="1"'                .' alt="' . htmlspecialchars($this->getName()) . '"'                .' title="' . htmlspecialchars($this->getName()) . '" /><br />';        } else {            echo __('No preview available.');        }        echo '[ <strong>' . __('take it') . '</strong> ]</a>'            .'</p>'            .'</div>';    }    /**     * Remove filter for IE.     *     * @return string CSS code.     */    function getCssIEClearFilter() {        return PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 6 && PMA_USR_BROWSER_VER <= 8            ? 'filter: none'            : '';    }    /**     * Generates code for CSS gradient using various browser extensions.     *     * @param string $start_color Color of gradient start, hex value without #     * @param string $end_color   Color of gradient end, hex value without #     *     * @return string CSS code.     */    function getCssGradient($start_color, $end_color)    {        $result = array();        // Opera 9.5+, IE 9        $result[] = 'background-image: url(./themes/svg_gradient.php?from=' . $start_color . '&to=' . $end_color . ');';        $result[] = 'background-size: 100% 100%;';        // Safari 4-5, Chrome 1-9        $result[] = 'background: -webkit-gradient(linear, left top, left bottom, from(#' . $start_color . '), to(#' . $end_color . '));';        // Safari 5.1, Chrome 10+        $result[] = 'background: -webkit-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // Firefox 3.6+        $result[] = 'background: -moz-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // IE 10        $result[] = 'background: -ms-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // Opera 11.10        $result[] = 'background: -o-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // IE 6-8        if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 6 && PMA_USR_BROWSER_VER <= 8) {            $result[] = 'filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#' . $start_color . '", endColorstr="#' . $end_color . '");';        }        return implode("\n", $result);    }    /**     * Returns CSS styles for CodeMirror editor based on query formatter colors.     *     * @return string CSS code.     */    function getCssCodeMirror()    {        $result[] = 'span.cm-keyword, span.cm-statement-verb {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_reservedWord'] . ';';        $result[] = '}';        $result[] = 'span.cm-variable {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_identifier'] . ';';        $result[] = '}';        $result[] = 'span.cm-comment {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['comment'] . ';';        $result[] = '}';        $result[] = 'span.cm-mysql-string {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['quote'] . ';';        $result[] = '}';        $result[] = 'span.cm-operator {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['punct'] . ';';        $result[] = '}';        $result[] = 'span.cm-mysql-word {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_identifier'] . ';';        $result[] = '}';        $result[] = 'span.cm-builtin {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_functionName'] . ';';        $result[] = '}';        $result[] = 'span.cm-variable-2 {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_columnType'] . ';';        $result[] = '}';        $result[] = 'span.cm-variable-3 {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_columnAttrib'] . ';';        $result[] = '}';        $result[] = 'span.cm-separator {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['punct'] . ';';        $result[] = '}';        $result[] = 'span.cm-number {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['digit_integer'] . ';';        $result[] = '}';        return implode("\n", $result);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple script to set correct charset for changelog * * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require './libraries/common.inc.php';$filename = CHANGELOG_FILE;/** * Read changelog. */// Check if the file is available, some distributions remove these.if (is_readable($filename)) {    // Test if the if is in a compressed format    if (substr($filename, -3) == '.gz') {        ob_start();        readgzfile($filename);        $changelog = ob_get_contents();        ob_end_clean();    } else {        $changelog = file_get_contents($filename);    }} else {    printf(__('The %s file is not available on this system, please visit www.phpmyadmin.net for more information.'), $filename);    exit;}/** * Whole changelog in variable. */$changelog = htmlspecialchars($changelog);$replaces = array(    '@(http://[./a-zA-Z0-9.-_-]*[/a-zA-Z0-9_])@'    => '<a href="\\1">\\1</a>',    // sourceforge users    '/([0-9]{4}-[0-9]{2}-[0-9]{2}) (.+[^ ]) +&lt;(.*)@users.sourceforge.net&gt;/i'    => '\\1 <a href="https://sourceforge.net/users/\\3/">\\2</a>',    '/thanks to ([^\(\r\n]+) \(([-\w]+)\)/i'    => 'thanks to <a href="https://sourceforge.net/users/\\2/">\\1</a>',    '/thanks to ([^\(\r\n]+) -\s+([-\w]+)/i'    => 'thanks to <a href="https://sourceforge.net/users/\\2/">\\1</a>',    // mail adresse    '/([0-9]{4}-[0-9]{2}-[0-9]{2}) (.+[^ ]) +&lt;(.*@.*)&gt;/i'    => '\\1 <a href="mailto:\\3">\\2</a>',    // linking patches    '/patch\s*#?([0-9]{6,})/i'    => '<a href="https://sourceforge.net/support/tracker.php?aid=\\1">patch #\\1</a>',    // linking RFE    '/(?:rfe|feature)\s*#?([0-9]{6,})/i'    => '<a href="https://sourceforge.net/support/tracker.php?aid=\\1">RFE #\\1</a>',    // linking files    '/(\s+)([\\/a-z_0-9\.]+\.(?:php3?|html|pl|js|sh))/i'    => '\\1<a href="https://github.com/phpmyadmin/phpmyadmin/commits/HEAD/\\2">\\2</a>',    // FAQ entries    '/FAQ ([0-9]+)\.([0-9a-z]+)/i'    => '<a href="http://localhost/phpMyAdmin/Documentation.html#faq\\1_\\2">FAQ \\1.\\2</a>',    // linking bugs    '/bug\s*#?([0-9]{6,})/i'    => '<a href="https://sourceforge.net/support/tracker.php?aid=\\1">bug #\\1</a>',    // all other 6+ digit numbers are treated as bugs    '/(?<!bug|RFE|patch) #?([0-9]{6,})/i'    => ' <a href="https://sourceforge.net/support/tracker.php?aid=\\1">bug #\\1</a>',    // CVE/CAN entries    '/((CAN|CVE)-[0-9]+-[0-9]+)/'    => '<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=\\1">\\1</a>',    // PMASAentries    '/(PMASA-[0-9]+-[0-9]+)/'    => '<a href="http://www.phpmyadmin.net/home_page/security/\\1.php">\\1</a>',    // Highlight releases (with links)    '/([0-9]+)\.([0-9]+)\.([0-9]+)\.0 (\([0-9-]+\))/'    => '<a name="\\1_\\2_\\3"></a><a href="https://github.com/phpmyadmin/phpmyadmin/commits/RELEASE_\\1_\\2_\\3">\\1.\\2.\\3.0 \\4</a>',    '/([0-9]+)\.([0-9]+)\.([0-9]+)\.([1-9][0-9]*) (\([0-9-]+\))/'    => '<a name="\\1_\\2_\\3_\\4"></a><a href="https://github.com/phpmyadmin/phpmyadmin/commits/RELEASE_\\1_\\2_\\3_\\4">\\1.\\2.\\3.\\4 \\5</a>',    // Highlight releases (not linkable)    '/(    ### )(.*)/'    => '\\1<b>\\2</b>',);header('Content-type: text/html; charset=utf-8');echo '<?xml version="1.0" encoding="utf-8"?'.'>';?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr"><head><link rel="icon" href="./favicon.ico" type="image/x-icon" /><link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" /><title>phpMyAdmin - ChangeLog</title><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /></head><body><h1>phpMyAdmin - ChangeLog</h1><?phpecho '<pre>';echo preg_replace(array_keys($replaces), $replaces, $changelog);echo '</pre>';?></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require_once './libraries/server_common.inc.php';require_once './libraries/sql_query_form.lib.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm();/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Configuration handling. * * @package PhpMyAdmin *//** * Load vendor configuration. */require './libraries/vendor_config.php';/** * Configuration class * * @package PhpMyAdmin */class PMA_Config{    /**     * @var string  default config source     */    var $default_source = './libraries/config.default.php';    /**     * @var array   default configuration settings     */    var $default = array();    /**     * @var array   configuration settings     */    var $settings = array();    /**     * @var string  config source     */    var $source = '';    /**     * @var int     source modification time     */    var $source_mtime = 0;    var $default_source_mtime = 0;    var $set_mtime = 0;    /**     * @var boolean     */    var $error_config_file = false;    /**     * @var boolean     */    var $error_config_default_file = false;    /**     * @var boolean     */    var $error_pma_uri = false;    /**     * @var array     */    var $default_server = array();    /**     * @var boolean whether init is done or not     * set this to false to force some initial checks     * like checking for required functions     */    var $done = false;    /**     * constructor     *     * @param string $source source to read config from     */    function __construct($source = null)    {        $this->settings = array();        // functions need to refresh in case of config file changed goes in        // PMA_Config::load()        $this->load($source);        // other settings, independent from config file, comes in        $this->checkSystem();        $this->checkIsHttps();    }    /**     * sets system and application settings     *     * @return nothing     */    function checkSystem()    {        $this->set('PMA_VERSION', '3.5.0');        /**         * @deprecated         */        $this->set('PMA_THEME_VERSION', 2);        /**         * @deprecated         */        $this->set('PMA_THEME_GENERATION', 2);        $this->checkPhpVersion();        $this->checkWebServerOs();        $this->checkWebServer();        $this->checkGd2();        $this->checkClient();        $this->checkUpload();        $this->checkUploadSize();        $this->checkOutputCompression();    }    /**     * whether to use gzip output compression or not     *     * @return nothing     */    function checkOutputCompression()    {        // If zlib output compression is set in the php configuration file, no        // output buffering should be run        if (@ini_get('zlib.output_compression')) {            $this->set('OBGzip', false);        }        // disable output-buffering (if set to 'auto') for IE6, else enable it.        if (strtolower($this->get('OBGzip')) == 'auto') {            if ($this->get('PMA_USR_BROWSER_AGENT') == 'IE'                && $this->get('PMA_USR_BROWSER_VER') >= 6                && $this->get('PMA_USR_BROWSER_VER') < 7            ) {                $this->set('OBGzip', false);            } else {                $this->set('OBGzip', true);            }        }    }    /**     * Determines platform (OS), browser and version of the user     * Based on a phpBuilder article:     *     * @see http://www.phpbuilder.net/columns/tim20000821.php     *     * @return nothing     */    function checkClient()    {        if (PMA_getenv('HTTP_USER_AGENT')) {            $HTTP_USER_AGENT = PMA_getenv('HTTP_USER_AGENT');        } elseif (! isset($HTTP_USER_AGENT)) {            $HTTP_USER_AGENT = '';        }        // 1. Platform        if (strstr($HTTP_USER_AGENT, 'Win')) {            $this->set('PMA_USR_OS', 'Win');        } elseif (strstr($HTTP_USER_AGENT, 'Mac')) {            $this->set('PMA_USR_OS', 'Mac');        } elseif (strstr($HTTP_USER_AGENT, 'Linux')) {            $this->set('PMA_USR_OS', 'Linux');        } elseif (strstr($HTTP_USER_AGENT, 'Unix')) {            $this->set('PMA_USR_OS', 'Unix');        } elseif (strstr($HTTP_USER_AGENT, 'OS/2')) {            $this->set('PMA_USR_OS', 'OS/2');        } else {            $this->set('PMA_USR_OS', 'Other');        }        // 2. browser and version        // (must check everything else before Mozilla)        if (preg_match(            '@Opera(/| )([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[2]);            $this->set('PMA_USR_BROWSER_AGENT', 'OPERA');        } elseif (preg_match(            '@MSIE ([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'IE');        } elseif (preg_match(            '@OmniWeb/([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'OMNIWEB');        // Konqueror 2.2.2 says Konqueror/2.2.2        // Konqueror 3.0.3 says Konqueror/3        } elseif (preg_match(            '@(Konqueror/)(.*)(;)@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[2]);            $this->set('PMA_USR_BROWSER_AGENT', 'KONQUEROR');        } elseif (preg_match(            '@Mozilla/([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version)            && preg_match('@Safari/([0-9]*)@', $HTTP_USER_AGENT, $log_version2)        ) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1] . '.' . $log_version2[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'SAFARI');        } elseif (preg_match('@rv:1.9(.*)Gecko@', $HTTP_USER_AGENT)) {            $this->set('PMA_USR_BROWSER_VER', '1.9');            $this->set('PMA_USR_BROWSER_AGENT', 'GECKO');        } elseif (            preg_match('@Mozilla/([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'MOZILLA');        } else {            $this->set('PMA_USR_BROWSER_VER', 0);            $this->set('PMA_USR_BROWSER_AGENT', 'OTHER');        }    }    /**     * Whether GD2 is present     *     * @return nothing     */    function checkGd2()    {        if ($this->get('GD2Available') == 'yes') {            $this->set('PMA_IS_GD2', 1);        } elseif ($this->get('GD2Available') == 'no') {            $this->set('PMA_IS_GD2', 0);        } else {            if (!@function_exists('imagecreatetruecolor')) {                $this->set('PMA_IS_GD2', 0);            } else {                if (@function_exists('gd_info')) {                    $gd_nfo = gd_info();                    if (strstr($gd_nfo["GD Version"], '2.')) {                        $this->set('PMA_IS_GD2', 1);                    } else {                        $this->set('PMA_IS_GD2', 0);                    }                } else {                    /* We must do hard way... but almost no chance to execute this */                    ob_start();                    phpinfo(INFO_MODULES); /* Only modules */                    $a = strip_tags(ob_get_contents());                    ob_end_clean();                    /* Get GD version string from phpinfo output */                    if (preg_match('@GD Version[[:space:]]*\(.*\)@', $a, $v)) {                        if (strstr($v, '2.')) {                            $this->set('PMA_IS_GD2', 1);                        } else {                            $this->set('PMA_IS_GD2', 0);                        }                    } else {                        $this->set('PMA_IS_GD2', 0);                    }                }            }        }    }    /**     * Whether the Web server php is running on is IIS     *     * @return nothing     */    function checkWebServer()    {        if (PMA_getenv('SERVER_SOFTWARE')            // some versions return Microsoft-IIS, some Microsoft/IIS            // we could use a preg_match() but it's slower            && stristr(PMA_getenv('SERVER_SOFTWARE'), 'Microsoft')            && stristr(PMA_getenv('SERVER_SOFTWARE'), 'IIS')        ) {            $this->set('PMA_IS_IIS', 1);        } else {            $this->set('PMA_IS_IIS', 0);        }    }    /**     * Whether the os php is running on is windows or not     *     * @return nothing     */    function checkWebServerOs()    {        // Default to Unix or Equiv        $this->set('PMA_IS_WINDOWS', 0);        // If PHP_OS is defined then continue        if (defined('PHP_OS')) {            if (stristr(PHP_OS, 'win')) {                // Is it some version of Windows                $this->set('PMA_IS_WINDOWS', 1);            } elseif (stristr(PHP_OS, 'OS/2')) {                // Is it OS/2 (No file permissions like Windows)                $this->set('PMA_IS_WINDOWS', 1);            }        }    }    /**     * detects PHP version     *     * @return nothing     */    function checkPhpVersion()    {        $match = array();        if (! preg_match(            '@([0-9]{1,2}).([0-9]{1,2}).([0-9]{1,2})@',            phpversion(),            $match        )) {            preg_match(                '@([0-9]{1,2}).([0-9]{1,2})@',                phpversion(),                $match            );        }        if (isset($match) && ! empty($match[1])) {            if (! isset($match[2])) {                $match[2] = 0;            }            if (! isset($match[3])) {                $match[3] = 0;            }            $this->set(                'PMA_PHP_INT_VERSION',                (int) sprintf('%d%02d%02d', $match[1], $match[2], $match[3])            );        } else {            $this->set('PMA_PHP_INT_VERSION', 0);        }        $this->set('PMA_PHP_STR_VERSION', phpversion());    }    /**     * loads default values from default source     *     * @return  boolean     success     */    function loadDefaults()    {        $cfg = array();        if (! file_exists($this->default_source)) {            $this->error_config_default_file = true;            return false;        }        include $this->default_source;        $this->default_source_mtime = filemtime($this->default_source);        $this->default_server = $cfg['Servers'][1];        unset($cfg['Servers']);        $this->default = $cfg;        $this->settings = PMA_array_merge_recursive($this->settings, $cfg);        $this->error_config_default_file = false;        return true;    }    /**     * loads configuration from $source, usally the config file     * should be called on object creation     *     * @param string $source config file     *     * @return bool     */    function load($source = null)    {        $this->loadDefaults();        if (null !== $source) {            $this->setSource($source);        }        if (! $this->checkConfigSource()) {            return false;        }        $cfg = array();        /**         * Parses the configuration file, the eval is used here to avoid         * problems with trailing whitespace, what is often a problem.         */        $old_error_reporting = error_reporting(0);        $eval_result = eval('?' . '>' . trim(file_get_contents($this->getSource())));        error_reporting($old_error_reporting);        if ($eval_result === false) {            $this->error_config_file = true;        } else {            $this->error_config_file = false;            $this->source_mtime = filemtime($this->getSource());        }        /**         * Backward compatibility code         */        if (!empty($cfg['DefaultTabTable'])) {            $cfg['DefaultTabTable'] = str_replace(                '_properties',                '',                str_replace(                    'tbl_properties.php',                    'tbl_sql.php',                    $cfg['DefaultTabTable']                )            );        }        if (!empty($cfg['DefaultTabDatabase'])) {            $cfg['DefaultTabDatabase'] = str_replace(                '_details',                '',                str_replace(                    'db_details.php',                    'db_sql.php',                    $cfg['DefaultTabDatabase']                )            );        }        $this->settings = PMA_array_merge_recursive($this->settings, $cfg);        $this->checkPmaAbsoluteUri();        $this->checkFontsize();        $this->checkPermissions();        // Handling of the collation must be done after merging of $cfg        // (from config.inc.php) so that $cfg['DefaultConnectionCollation']        // can have an effect. Note that the presence of collation        // information in a cookie has priority over what is defined        // in the default or user's config files.        /**         * @todo check validity of $_COOKIE['pma_collation_connection']         */        if (! empty($_COOKIE['pma_collation_connection'])) {            $this->set(                'collation_connection',                strip_tags($_COOKIE['pma_collation_connection'])            );        } else {            $this->set(                'collation_connection',                $this->get('DefaultConnectionCollation')            );        }        // Now, a collation information could come from REQUEST        // (an example of this: the collation selector in main.php)        // so the following handles the setting of collation_connection        // and later, in common.inc.php, the cookie will be set        // according to this.        $this->checkCollationConnection();        return true;    }    /**     * Loads user preferences and merges them with current config     * must be called after control connection has been estabilished     *     * @return boolean     */    function loadUserPreferences()    {        // index.php should load these settings, so that phpmyadmin.css.php        // will have everything avaiable in session cache        $server = isset($GLOBALS['server'])            ? $GLOBALS['server']            : (!empty($GLOBALS['cfg']['ServerDefault'])                ? $GLOBALS['cfg']['ServerDefault']                : 0);        $cache_key = 'server_' . $server;        if ($server > 0 && !defined('PMA_MINIMUM_COMMON')) {            $config_mtime = max($this->default_source_mtime, $this->source_mtime);            // cache user preferences, use database only when needed            if (! isset($_SESSION['cache'][$cache_key]['userprefs'])                || $_SESSION['cache'][$cache_key]['config_mtime'] < $config_mtime            ) {                // load required libraries                include_once './libraries/user_preferences.lib.php';                $prefs = PMA_load_userprefs();                $_SESSION['cache'][$cache_key]['userprefs']                    = PMA_apply_userprefs($prefs['config_data']);                $_SESSION['cache'][$cache_key]['userprefs_mtime'] = $prefs['mtime'];                $_SESSION['cache'][$cache_key]['userprefs_type'] = $prefs['type'];                $_SESSION['cache'][$cache_key]['config_mtime'] = $config_mtime;            }        } elseif ($server == 0            || ! isset($_SESSION['cache'][$cache_key]['userprefs'])        ) {            $this->set('user_preferences', false);            return;        }        $config_data = $_SESSION['cache'][$cache_key]['userprefs'];        // type is 'db' or 'session'        $this->set(            'user_preferences',            $_SESSION['cache'][$cache_key]['userprefs_type']        );        $this->set(            'user_preferences_mtime',            $_SESSION['cache'][$cache_key]['userprefs_mtime']        );        // backup some settings        $org_fontsize = $this->settings['fontsize'];        // load config array        $this->settings = PMA_array_merge_recursive($this->settings, $config_data);        $GLOBALS['cfg'] = PMA_array_merge_recursive($GLOBALS['cfg'], $config_data);        if (defined('PMA_MINIMUM_COMMON')) {            return;        }        // settings below start really working on next page load, but        // changes are made only in index.php so everything is set when        // in frames        // save theme        $tmanager = $_SESSION['PMA_Theme_Manager'];        if ($tmanager->getThemeCookie() || isset($_REQUEST['set_theme'])) {            if ((! isset($config_data['ThemeDefault'])                && $tmanager->theme->getId() != 'original')                || isset($config_data['ThemeDefault'])                && $config_data['ThemeDefault'] != $tmanager->theme->getId()            ) {                // new theme was set in common.inc.php                $this->setUserValue(                    null,                    'ThemeDefault',                    $tmanager->theme->getId(),                    'original'                );            }        } else {            // no cookie - read default from settings            if ($this->settings['ThemeDefault'] != $tmanager->theme->getId()                && $tmanager->checkTheme($this->settings['ThemeDefault'])            ) {                $tmanager->setActiveTheme($this->settings['ThemeDefault']);                $tmanager->setThemeCookie();            }        }        // save font size        if ((! isset($config_data['fontsize'])            && $org_fontsize != '82%')            || isset($config_data['fontsize'])            && $org_fontsize != $config_data['fontsize']        ) {            $this->setUserValue(null, 'fontsize', $org_fontsize, '82%');        }        // save language        if (isset($_COOKIE['pma_lang']) || isset($_POST['lang'])) {            if ((! isset($config_data['lang'])                && $GLOBALS['lang'] != 'en')                || isset($config_data['lang'])                && $GLOBALS['lang'] != $config_data['lang']            ) {                $this->setUserValue(null, 'lang', $GLOBALS['lang'], 'en');            }        } else {            // read language from settings            if (isset($config_data['lang']) && PMA_langSet($config_data['lang'])) {                $this->setCookie('pma_lang', $GLOBALS['lang']);            }        }        // save connection collation        if (isset($_COOKIE['pma_collation_connection'])            || isset($_POST['collation_connection'])        ) {            if ((! isset($config_data['collation_connection'])                && $GLOBALS['collation_connection'] != 'utf8_general_ci')                || isset($config_data['collation_connection'])                && $GLOBALS['collation_connection']                    != $config_data['collation_connection']            ) {                $this->setUserValue(                    null,                    'collation_connection',                    $GLOBALS['collation_connection'],                    'utf8_general_ci'                );            }        } else {            // read collation from settings            if (isset($config_data['collation_connection'])) {                $GLOBALS['collation_connection']                    = $config_data['collation_connection'];                $this->setCookie(                    'pma_collation_connection',                    $GLOBALS['collation_connection']                );            }        }    }    /**     * Sets config value which is stored in user preferences (if available)     * or in a cookie.     *     * If user preferences are not yet initialized, option is applied to     * global config and added to a update queue, which is processed     * by {@link loadUserPreferences()}     *     * @param string $cookie_name   can be null     * @param string $cfg_path     * @param mixed  $new_cfg_value new value     * @param mixed  $default_value default value     *     * @return nothing     */    function setUserValue($cookie_name, $cfg_path, $new_cfg_value, $default_value = null)    {        // use permanent user preferences if possible        $prefs_type = $this->get('user_preferences');        if ($prefs_type) {            include_once './libraries/user_preferences.lib.php';            if ($default_value === null) {                $default_value = PMA_array_read($cfg_path, $this->default);            }            PMA_persist_option($cfg_path, $new_cfg_value, $default_value);        }        if ($prefs_type != 'db' && $cookie_name) {            // fall back to cookies            if ($default_value === null) {                $default_value = PMA_array_read($cfg_path, $this->settings);            }            $this->setCookie($cookie_name, $new_cfg_value, $default_value);        }        PMA_array_write($cfg_path, $GLOBALS['cfg'], $new_cfg_value);        PMA_array_write($cfg_path, $this->settings, $new_cfg_value);    }    /**     * Reads value stored by {@link setUserValue()}     *     * @param string $cookie_name cookie name     * @param mixed  $cfg_value   config value     *     * @return mixed     */    function getUserValue($cookie_name, $cfg_value)    {        $cookie_exists = isset($_COOKIE) && !empty($_COOKIE[$cookie_name]);        $prefs_type = $this->get('user_preferences');        if ($prefs_type == 'db') {            // permanent user preferences value exists, remove cookie            if ($cookie_exists) {                $this->removeCookie($cookie_name);            }        } else if ($cookie_exists) {            return $_COOKIE[$cookie_name];        }        // return value from $cfg array        return $cfg_value;    }    /**     * set source     *     * @param string  $source     *     * @return nothing     */    function setSource($source)    {        $this->source = trim($source);    }    /**     * checks if the config folder still exists and terminates app if true     *     * @return nothing     */    function checkConfigFolder()    {        // Refuse to work while there still might be some world writable dir:        if (is_dir('./config')) {            die(__('Remove "./config" directory before using phpMyAdmin!'));        }    }    /**     * check config source     *     * @return  boolean whether source is valid or not     */    function checkConfigSource()    {        if (! $this->getSource()) {            // no configuration file set at all            return false;        }        if (! file_exists($this->getSource())) {            $this->source_mtime = 0;            return false;        }        if (! is_readable($this->getSource())) {            $this->source_mtime = 0;            die(                sprintf(__('Existing configuration file (%s) is not readable.'),                    $this->getSource()                )            );        }        return true;    }    /**     * verifies the permissions on config file (if asked by configuration)     * (must be called after config.inc.php has been merged)     *     * @return nothing     */    function checkPermissions()    {        // Check for permissions (on platforms that support it):        if ($this->get('CheckConfigurationPermissions')) {            $perms = @fileperms($this->getSource());            if (!($perms === false) && ($perms & 2)) {                // This check is normally done after loading configuration                $this->checkWebServerOs();                if ($this->get('PMA_IS_WINDOWS') == 0) {                    $this->source_mtime = 0;                    die(__('Wrong permissions on configuration file, should not be world writable!'));                }            }        }    }    /**     * returns specific config setting     *     * @param string $setting config setting     *     * @return mixed value     */    function get($setting)    {        if (isset($this->settings[$setting])) {            return $this->settings[$setting];        }        return null;    }    /**     * sets configuration variable     *     * @param string $setting configuration option     * @param string $value   new value for configuration option     *     * @return nothing     */    function set($setting, $value)    {        if (! isset($this->settings[$setting])            || $this->settings[$setting] != $value        ) {            $this->settings[$setting] = $value;            $this->set_mtime = time();        }    }    /**     * returns source for current config     *     * @return  string  config source     */    function getSource()    {        return $this->source;    }    /**     * returns a unique value to force a CSS reload if either the config     * or the theme changes     * must also check the pma_fontsize cookie in case there is no     * config file     *     * @return int Summary of unix timestamps and fontsize,     * to be unique on theme parameters change     */    function getThemeUniqueValue()    {        if (null !== $this->get('fontsize')) {            $fontsize = intval($this->get('fontsize'));        } elseif (isset($_COOKIE['pma_fontsize'])) {            $fontsize = intval($_COOKIE['pma_fontsize']);        } else {            $fontsize = 0;        }        return (            $fontsize +            $this->source_mtime +            $this->default_source_mtime +            $this->get('user_preferences_mtime') +            $_SESSION['PMA_Theme']->mtime_info +            $_SESSION['PMA_Theme']->filesize_info);    }    /**     * $cfg['PmaAbsoluteUri'] is a required directive else cookies won't be     * set properly and, depending on browsers, inserting or updating a     * record might fail     *     * @return bool     */    function checkPmaAbsoluteUri()    {        // Setup a default value to let the people and lazy sysadmins work anyway,        // they'll get an error if the autodetect code doesn't work        $pma_absolute_uri = $this->get('PmaAbsoluteUri');        $is_https = $this->detectHttps();        if (strlen($pma_absolute_uri) < 5) {            $url = array();            // If we don't have scheme, we didn't have full URL so we need to            // dig deeper            if (empty($url['scheme'])) {                // Scheme                if ($is_https) {                    $url['scheme'] = 'https';                } else {                    $url['scheme'] = 'http';                }                // Host and port                if (PMA_getenv('HTTP_HOST')) {                    // Prepend the scheme before using parse_url() since this                    // is not part of the RFC2616 Host request-header                    $parsed_url = parse_url(                        $url['scheme'] . '://' . PMA_getenv('HTTP_HOST')                    );                    if (!empty($parsed_url['host'])) {                        $url = $parsed_url;                    } else {                        $url['host'] = PMA_getenv('HTTP_HOST');                    }                } elseif (PMA_getenv('SERVER_NAME')) {                    $url['host'] = PMA_getenv('SERVER_NAME');                } else {                    $this->error_pma_uri = true;                    return false;                }                // If we didn't set port yet...                if (empty($url['port']) && PMA_getenv('SERVER_PORT')) {                    $url['port'] = PMA_getenv('SERVER_PORT');                }                // And finally the path could be already set from REQUEST_URI                if (empty($url['path'])) {                    $path = parse_url($GLOBALS['PMA_PHP_SELF']);                    $url['path'] = $path['path'];                }            }            // Make url from parts we have            $pma_absolute_uri = $url['scheme'] . '://';            // Was there user information?            if (!empty($url['user'])) {                $pma_absolute_uri .= $url['user'];                if (!empty($url['pass'])) {                    $pma_absolute_uri .= ':' . $url['pass'];                }                $pma_absolute_uri .= '@';            }            // Add hostname            $pma_absolute_uri .= $url['host'];            // Add port, if it not the default one            if (! empty($url['port'])                && (($url['scheme'] == 'http' && $url['port'] != 80)                || ($url['scheme'] == 'https' && $url['port'] != 443))            ) {                $pma_absolute_uri .= ':' . $url['port'];            }            // And finally path, without script name, the 'a' is there not to            // strip our directory, when path is only /pmadir/ without filename.            // Backslashes returned by Windows have to be changed.            // Only replace backslashes by forward slashes if on Windows,            // as the backslash could be valid on a non-Windows system.            $this->checkWebServerOs();            if ($this->get('PMA_IS_WINDOWS') == 1) {                $path = str_replace("\\", "/", dirname($url['path'] . 'a'));            } else {                $path = dirname($url['path'] . 'a');            }            // To work correctly within transformations overview:            if (defined('PMA_PATH_TO_BASEDIR') && PMA_PATH_TO_BASEDIR == '../../') {                if ($this->get('PMA_IS_WINDOWS') == 1) {                    $path = str_replace("\\", "/", dirname(dirname($path)));                } else {                    $path = dirname(dirname($path));                }            }            // PHP's dirname function would have returned a dot            // when $path contains no slash            if ($path == '.') {                $path = '';            }            // in vhost situations, there could be already an ending slash            if (substr($path, -1) != '/') {                $path .= '/';            }            $pma_absolute_uri .= $path;            // We used to display a warning if PmaAbsoluteUri wasn't set, but now            // the autodetect code works well enough that we don't display the            // warning at all. The user can still set PmaAbsoluteUri manually.            // See            // http://sf.net/tracker/?func=detail&aid=1257134&group_id=23067&atid=377411        } else {            // The URI is specified, however users do often specify this            // wrongly, so we try to fix this.            // Adds a trailing slash et the end of the phpMyAdmin uri if it            // does not exist.            if (substr($pma_absolute_uri, -1) != '/') {                $pma_absolute_uri .= '/';            }            // If URI doesn't start with http:// or https://, we will add            // this.            if (substr($pma_absolute_uri, 0, 7) != 'http://'                && substr($pma_absolute_uri, 0, 8) != 'https://'            ) {                $pma_absolute_uri                    = ($is_https ? 'https' : 'http')                    . ':' . (substr($pma_absolute_uri, 0, 2) == '//' ? '' : '//')                    . $pma_absolute_uri;            }        }        $this->set('PmaAbsoluteUri', $pma_absolute_uri);    }    /**     * check selected collation_connection     *     * @todo check validity of $_REQUEST['collation_connection']     *     * @return nothing     */    function checkCollationConnection()    {        if (! empty($_REQUEST['collation_connection'])) {            $this->set(                'collation_connection',                strip_tags($_REQUEST['collation_connection'])            );        }    }    /**     * checks for font size configuration, and sets font size as requested by user     *     * @return nothing     */    function checkFontsize()    {        $new_fontsize = '';        if (isset($_GET['set_fontsize'])) {            $new_fontsize = $_GET['set_fontsize'];        } elseif (isset($_POST['set_fontsize'])) {            $new_fontsize = $_POST['set_fontsize'];        } elseif (isset($_COOKIE['pma_fontsize'])) {            $new_fontsize = $_COOKIE['pma_fontsize'];        }        if (preg_match('/^[0-9.]+(px|em|pt|\%)$/', $new_fontsize)) {            $this->set('fontsize', $new_fontsize);        } elseif (! $this->get('fontsize')) {            // 80% would correspond to the default browser font size            // of 16, but use 82% to help read the monoface font            $this->set('fontsize', '82%');        }        $this->setCookie('pma_fontsize', $this->get('fontsize'), '82%');    }    /**     * checks if upload is enabled     *     * @return nothing     */    function checkUpload()    {        if (ini_get('file_uploads')) {            $this->set('enable_upload', true);            // if set "php_admin_value file_uploads Off" in httpd.conf            // ini_get() also returns the string "Off" in this case:            if ('off' == strtolower(ini_get('file_uploads'))) {                $this->set('enable_upload', false);            }        } else {            $this->set('enable_upload', false);        }    }    /**     * Maximum upload size as limited by PHP     * Used with permission from Moodle (http://moodle.org) by Martin Dougiamas     *     * this section generates $max_upload_size in bytes     *     * @return nothing     */    function checkUploadSize()    {        if (! $filesize = ini_get('upload_max_filesize')) {            $filesize = "5M";        }        if ($postsize = ini_get('post_max_size')) {            $this->set(                'max_upload_size',                min(PMA_get_real_size($filesize), PMA_get_real_size($postsize))            );        } else {            $this->set('max_upload_size', PMA_get_real_size($filesize));        }    }    /**     * check for https     *     * @return nothing     */    function checkIsHttps()    {        $this->set('is_https', $this->isHttps());    }    /**     * Checks if protocol is https     *     * This function checks if the https protocol is used in the PmaAbsoluteUri     * configuration setting, as opposed to detectHttps() which checks if the     * https protocol is used on the active connection.     *     * @return bool     */    public function isHttps()    {        static $is_https = null;        if (null !== $is_https) {            return $is_https;        }        $url = parse_url($this->get('PmaAbsoluteUri'));        if (isset($url['scheme']) && $url['scheme'] == 'https') {            $is_https = true;        } else {            $is_https = false;        }        return $is_https;    }    /**     * Detects whether https appears to be used.     *     * This function checks if the https protocol is used in the current connection     * with the webserver, based on environment variables.     * Please note that this just detects what we see, so     * it completely ignores things like reverse proxies.     *     * @return bool     */    function detectHttps()    {        $is_https = false;        $url = array();        // At first we try to parse REQUEST_URI, it might contain full URL,        if (PMA_getenv('REQUEST_URI')) {            // produces E_WARNING if it cannot get parsed, e.g. '/foobar:/'            $url = @parse_url(PMA_getenv('REQUEST_URI'));            if ($url === false) {                $url = array();            }        }        // If we don't have scheme, we didn't have full URL so we need to        // dig deeper        if (empty($url['scheme'])) {            // Scheme            if (PMA_getenv('HTTP_SCHEME')) {                $url['scheme'] = PMA_getenv('HTTP_SCHEME');            } elseif (PMA_getenv('HTTPS') && strtolower(PMA_getenv('HTTPS')) == 'on') {                $url['scheme'] = 'https';            } elseif (PMA_getenv('HTTP_X_FORWARDED_PROTO')) {                $url['scheme'] = strtolower(PMA_getenv('HTTP_X_FORWARDED_PROTO'));            } elseif (PMA_getenv('HTTP_FRONT_END_HTTPS') && strtolower(PMA_getenv('HTTP_FRONT_END_HTTPS')) == 'on') {                $url['scheme'] = 'https';            } else {                $url['scheme'] = 'http';            }        }        if (isset($url['scheme']) && $url['scheme'] == 'https') {            $is_https = true;        } else {            $is_https = false;        }        return $is_https;    }    /**     * detect correct cookie path     *     * @return nothing     */    function checkCookiePath()    {        $this->set('cookie_path', $this->getCookiePath());    }    /**     * Get cookie path     *     * @return string     */    public function getCookiePath()    {        static $cookie_path = null;        if (null !== $cookie_path) {            return $cookie_path;        }        $parsed_url = parse_url($this->get('PmaAbsoluteUri'));        $cookie_path   = $parsed_url['path'];        return $cookie_path;    }    /**     * enables backward compatibility     *     * @return nothing     */    function enableBc()    {        $GLOBALS['cfg']             = $this->settings;        $GLOBALS['default_server']  = $this->default_server;        unset($this->default_server);        $GLOBALS['collation_connection'] = $this->get('collation_connection');        $GLOBALS['is_upload']       = $this->get('enable_upload');        $GLOBALS['max_upload_size'] = $this->get('max_upload_size');        $GLOBALS['cookie_path']     = $this->get('cookie_path');        $GLOBALS['is_https']        = $this->get('is_https');        $defines = array(            'PMA_VERSION',            'PMA_THEME_VERSION',            'PMA_THEME_GENERATION',            'PMA_PHP_STR_VERSION',            'PMA_PHP_INT_VERSION',            'PMA_IS_WINDOWS',            'PMA_IS_IIS',            'PMA_IS_GD2',            'PMA_USR_OS',            'PMA_USR_BROWSER_VER',            'PMA_USR_BROWSER_AGENT'            );        foreach ($defines as $define) {            if (! defined($define)) {                define($define, $this->get($define));            }        }    }    /**     * @todo finish     *     * @return nothing     */    function save()    {    }    /**     * returns options for font size selection     *     * @static     * @param string $current_size current selected font size with unit     *     * @return array selectable font sizes     */    static protected function _getFontsizeOptions($current_size = '82%')    {        $unit = preg_replace('/[0-9.]*/', '', $current_size);        $value = preg_replace('/[^0-9.]*/', '', $current_size);        $factors = array();        $options = array();        $options["$value"] = $value . $unit;        if ($unit === '%') {            $factors[] = 1;            $factors[] = 5;            $factors[] = 10;        } elseif ($unit === 'em') {            $factors[] = 0.05;            $factors[] = 0.2;            $factors[] = 1;        } elseif ($unit === 'pt') {            $factors[] = 0.5;            $factors[] = 2;        } elseif ($unit === 'px') {            $factors[] = 1;            $factors[] = 5;            $factors[] = 10;        } else {            //unknown font size unit            $factors[] = 0.05;            $factors[] = 0.2;            $factors[] = 1;            $factors[] = 5;            $factors[] = 10;        }        foreach ($factors as $key => $factor) {            $option_inc = $value + $factor;            $option_dec = $value - $factor;            while (count($options) < 21) {                $options["$option_inc"] = $option_inc . $unit;                if ($option_dec > $factors[0]) {                    $options["$option_dec"] = $option_dec . $unit;                }                $option_inc += $factor;                $option_dec -= $factor;                if (isset($factors[$key + 1])                    && $option_inc >= $value + $factors[$key + 1]                ) {                    break;                }            }        }        ksort($options);        return $options;    }    /**     * returns html selectbox for font sizes     *     * @static     * @param string $current_size currently slected font size with unit     *     * @return string html selectbox     */    static protected function _getFontsizeSelection()    {        $current_size = $GLOBALS['PMA_Config']->get('fontsize');        // for the case when there is no config file (this is supported)        if (empty($current_size)) {            if (isset($_COOKIE['pma_fontsize'])) {                $current_size = $_COOKIE['pma_fontsize'];            } else {                $current_size = '82%';            }        }        $options = PMA_Config::_getFontsizeOptions($current_size);        $return = '<label for="select_fontsize">' . __('Font size') . ':</label>' . "\n";        $return .= '<select name="set_fontsize" id="select_fontsize" class="autosubmit">' . "\n";        foreach ($options as $option) {            $return .= '<option value="' . $option . '"';            if ($option == $current_size) {                $return .= ' selected="selected"';            }            $return .= '>' . $option . '</option>' . "\n";        }        $return .= '</select>';        return $return;    }    /**     * return complete font size selection form     *     * @static     * @param string $current_size currently slected font size with unit     *     * @return string html selectbox     */    static public function getFontsizeForm()    {        return '<form name="form_fontsize_selection" id="form_fontsize_selection"'            . ' method="post" action="index.php" target="_parent">' . "\n"            . PMA_generate_common_hidden_inputs() . "\n"            . PMA_Config::_getFontsizeSelection() . "\n"            . '<noscript>' . "\n"            . '<input type="submit" value="' . __('Go') . '" />' . "\n"            . '</noscript>' . "\n"            . '</form>';    }    /**     * removes cookie     *     * @param string $cookie name of cookie to remove     *     * @return boolean result of setcookie()     */    function removeCookie($cookie)    {        return setcookie(            $cookie,            '',            time() - 3600,            $this->getCookiePath(),            '',            $this->isHttps()        );    }    /**     * sets cookie if value is different from current cokkie value,     * or removes if value is equal to default     *     * @param string  $cookie   name of cookie to remove     * @param mixed   $value    new cookie value     * @param string  $default  default value     * @param int     $validity validity of cookie in seconds (default is one month)     * @param bool    $httponly whether cookie is only for HTTP (and not for scripts)     *     * @return boolean result of setcookie()     */    function setCookie($cookie, $value, $default = null, $validity = null, $httponly = true)    {        if ($validity == null) {            $validity = 2592000;        }        if (strlen($value) && null !== $default && $value === $default) {            // default value is used            if (isset($_COOKIE[$cookie])) {                // remove cookie                return $this->removeCookie($cookie);            }            return false;        }        if (! strlen($value) && isset($_COOKIE[$cookie])) {            // remove cookie, value is empty            return $this->removeCookie($cookie);        }        if (! isset($_COOKIE[$cookie]) || $_COOKIE[$cookie] !== $value) {            // set cookie with new value            /* Calculate cookie validity */            if ($validity == 0) {                $v = 0;            } else {                $v = time() + $validity;            }            return setcookie(                $cookie,                $value,                $v,                $this->getCookiePath(),                '',                $this->isHttps(),                $httponly            );        }        // cookie has already $value as value        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Get user's global privileges and some db-specific privileges * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */$GLOBALS['is_superuser']       = PMA_isSuperuser();/** * sets privilege information extracted from SHOW GRANTS result * * Detection for some CREATE privilege. * * Since MySQL 4.1.2, we can easily detect current user's grants using $userlink * (no control user needed) and we don't have to try any other method for * detection * * @todo fix to get really all privileges, not only explicitly defined for this user * from MySQL manual: (http://dev.mysql.com/doc/refman/5.0/en/show-grants.html) * SHOW GRANTS displays only the privileges granted explicitly to the named * account. Other privileges might be available to the account, but they are not * displayed. For example, if an anonymous account exists, the named account * might be able to use its privileges, but SHOW GRANTS will not display them. * */function PMA_analyseShowGrant(){    if (PMA_cacheExists('is_create_db_priv', true)) {        $GLOBALS['is_create_db_priv']  = PMA_cacheGet('is_create_db_priv', true);        $GLOBALS['is_process_priv']    = PMA_cacheGet('is_process_priv', true);        $GLOBALS['is_reload_priv']     = PMA_cacheGet('is_reload_priv', true);        $GLOBALS['db_to_create']       = PMA_cacheGet('db_to_create', true);        $GLOBALS['dbs_where_create_table_allowed']            = PMA_cacheGet('dbs_where_create_table_allowed', true);        return;    }    // defaults    $GLOBALS['is_create_db_priv']  = false;    $GLOBALS['is_process_priv']    = true;    $GLOBALS['is_reload_priv']     = false;    $GLOBALS['db_to_create']       = '';    $GLOBALS['dbs_where_create_table_allowed'] = array();    $rs_usr = PMA_DBI_try_query('SHOW GRANTS');    if (! $rs_usr) {        return;    }    $re0 = '(^|(\\\\\\\\)+|[^\\\\])'; // non-escaped wildcards    $re1 = '(^|[^\\\\])(\\\)+'; // escaped wildcards    while ($row = PMA_DBI_fetch_row($rs_usr)) {        // extract db from GRANT ... ON *.* or GRANT ... ON db.*        $db_name_offset = strpos($row[0], ' ON ') + 4;        $show_grants_dbname = substr($row[0],            $db_name_offset,            strpos($row[0], '.', $db_name_offset) - $db_name_offset);        $show_grants_dbname = PMA_unQuote($show_grants_dbname, '`');        $show_grants_str    = substr($row[0], 6, (strpos($row[0], ' ON ') - 6));        if ($show_grants_str == 'RELOAD') {            $GLOBALS['is_reload_priv'] = true;        }        /**         * @todo if we find CREATE VIEW but not CREATE, do not offer         * the create database dialog box         */        if ($show_grants_str == 'ALL'         || $show_grants_str == 'ALL PRIVILEGES'         || $show_grants_str == 'CREATE'         || strpos($show_grants_str, 'CREATE,') !== false) {            if ($show_grants_dbname == '*') {                // a global CREATE privilege                $GLOBALS['is_create_db_priv'] = true;                $GLOBALS['is_reload_priv'] = true;                $GLOBALS['db_to_create']   = '';                $GLOBALS['dbs_where_create_table_allowed'][] = '*';                // @todo we should not break here, cause GRANT ALL *.*                // could be revoked by a later rule like GRANT SELECT ON db.*                break;            } else {                // this array may contain wildcards                $GLOBALS['dbs_where_create_table_allowed'][] = $show_grants_dbname;                $dbname_to_test = PMA_backquote($show_grants_dbname);                if ($GLOBALS['is_create_db_priv']) {                    // no need for any more tests if we already know this                    continue;                }                if ((preg_match('/' . $re0 . '%|_/', $show_grants_dbname)                  && ! preg_match('/\\\\%|\\\\_/', $show_grants_dbname))                 // does this db exist?                 || (! PMA_DBI_try_query('USE ' .  preg_replace('/' . $re1 . '(%|_)/', '\\1\\3', $dbname_to_test))                  && substr(PMA_DBI_getError(), 1, 4) != 1044)                ) {                    if ($GLOBALS['cfg']['SuggestDBName']) {                        /**                         * Do not handle the underscore wildcard                          * (this case must be rare anyway)                         */                        $GLOBALS['db_to_create'] = preg_replace('/' . $re0 . '%/',     '\\1...', $show_grants_dbname);                        $GLOBALS['db_to_create'] = preg_replace('/' . $re1 . '(%|_)/', '\\1\\3', $GLOBALS['db_to_create']);                    }                    $GLOBALS['is_create_db_priv'] = true;                    /**                     * @todo collect $GLOBALS['db_to_create'] into an array, to display a                     * drop-down in the "Create database" dialog                     */                     // we don't break, we want all possible databases                     //break;                } // end if            } // end elseif        } // end if    } // end while    PMA_DBI_free_result($rs_usr);    // must also PMA_cacheUnset() them in libraries/auth/cookie.auth.lib.php    PMA_cacheSet('is_create_db_priv', $GLOBALS['is_create_db_priv'], true);    PMA_cacheSet('is_process_priv', $GLOBALS['is_process_priv'], true);    PMA_cacheSet('is_reload_priv', $GLOBALS['is_reload_priv'], true);    PMA_cacheSet('db_to_create', $GLOBALS['db_to_create'], true);    PMA_cacheSet('dbs_where_create_table_allowed', $GLOBALS['dbs_where_create_table_allowed'], true);} // end functionif (!PMA_DRIZZLE) {    PMA_analyseShowGrant();} else {    // todo: for simple_user_policy only database with user's login can be created (unless logged in as root)    $GLOBALS['is_create_db_priv'] = $GLOBALS['is_superuser'];    $GLOBALS['is_process_priv']   = false;    $GLOBALS['is_reload_priv']    = false;    $GLOBALS['db_to_create']      = '';    $GLOBALS['dbs_where_create_table_allowed'] = array('*');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * functions for displaying the sql query form * * @usedby  server_sql.php * @usedby  db_sql.php * @usedby  tbl_sql.php * @usedby  tbl_structure.php * @usedby  tbl_tracking.php * @usedby  querywindow.php * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/file_listing.php'; // used for file listingrequire_once './libraries/bookmark.lib.php'; // used for file listing/** * prints the sql query boxes * * @usedby  server_sql.php * @usedby  db_sql.php * @usedby  tbl_sql.php * @usedby  tbl_structure.php * @usedby  tbl_tracking.php * @usedby  querywindow.php * @param boolean|string  $query          query to display in the textarea *                                          or true to display last executed * @param boolean|string  $display_tab    sql|files|history|full|false *                                          what part to display *                                          false if not inside querywindow * @param string          $delimiter */function PMA_sqlQueryForm($query = true, $display_tab = false, $delimiter = ';'){    // check tab to display if inside querywindow    if (! $display_tab) {        $display_tab = 'full';        $is_querywindow = false;    } else {        $is_querywindow = true;    }    // query to show    if (true === $query) {        $query = $GLOBALS['sql_query'];    }    // set enctype to multipart for file uploads    if ($GLOBALS['is_upload']) {        $enctype = ' enctype="multipart/form-data"';    } else {        $enctype = '';    }    $table  = '';    $db     = '';    if (! strlen($GLOBALS['db'])) {        // prepare for server related        $goto   = empty($GLOBALS['goto']) ?                    'server_sql.php' : $GLOBALS['goto'];    } elseif (! strlen($GLOBALS['table'])) {        // prepare for db related        $db     = $GLOBALS['db'];        $goto   = empty($GLOBALS['goto']) ?                    'db_sql.php' : $GLOBALS['goto'];    } else {        $table  = $GLOBALS['table'];        $db     = $GLOBALS['db'];        $goto   = empty($GLOBALS['goto']) ?                    'tbl_sql.php' : $GLOBALS['goto'];    }    // start output    if ($is_querywindow) {        ?>        <form method="post" id="sqlqueryform" target="frame_content"              action="import.php"<?php echo $enctype; ?> name="sqlform"              onsubmit="var save_name = window.opener.parent.frame_content.name;              window.opener.parent.frame_content.name = save_name + '<?php echo time(); ?>';              this.target = window.opener.parent.frame_content.name;              return checkSqlQuery(this)">        <?php    } else {        echo '<form method="post" action="import.php" ' . $enctype;        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax"';        }        echo ' id="sqlqueryform" name="sqlform">' . "\n";    }    if ($is_querywindow) {        echo '<input type="hidden" name="focus_querywindow" value="true" />'            ."\n";        if ($display_tab != 'sql' && $display_tab != 'full') {            echo '<input type="hidden" name="sql_query" value="" />' . "\n";            echo '<input type="hidden" name="show_query" value="1" />' . "\n";        }    }    echo '<input type="hidden" name="is_js_confirmed" value="0" />' . "\n"        .PMA_generate_common_hidden_inputs($db, $table) . "\n"        .'<input type="hidden" name="pos" value="0" />' . "\n"        .'<input type="hidden" name="goto" value="'        .htmlspecialchars($goto) . '" />' . "\n"        .'<input type="hidden" name="message_to_show" value="'        . __('Your SQL query has been executed successfully') . '" />' . "\n"        .'<input type="hidden" name="prev_sql_query" value="'        . htmlspecialchars($query) . '" />' . "\n";    // display querybox    if ($display_tab === 'full' || $display_tab === 'sql') {        PMA_sqlQueryFormInsert($query, $is_querywindow, $delimiter);    }    // display uploads    if ($display_tab === 'files' && $GLOBALS['is_upload']) {        PMA_sqlQueryFormUpload();    }    // Bookmark Support    if ($display_tab === 'full' || $display_tab === 'history') {        if (! empty($GLOBALS['cfg']['Bookmark'])) {            PMA_sqlQueryFormBookmark();        }    }    // Encoding setting form appended by Y.Kawada    if (function_exists('PMA_set_enc_form')) {        echo PMA_set_enc_form('    ');    }    echo '</form>' . "\n";    if ($is_querywindow) {        ?>        <script type="text/javascript">        //<![CDATA[            if (window.opener) {                window.opener.parent.insertQuery();            }        //]]>        </script>        <?php    }    // print an empty div, which will be later filled with the sql query results by ajax    echo '<div id="sqlqueryresults"></div>';}/** * prints querybox fieldset * * @usedby  PMA_sqlQueryForm() * @param string      $query          query to display in the textarea * @param boolean     $is_querywindow if inside querywindow or not * @param string      $delimiter      default delimiter to use */function PMA_sqlQueryFormInsert($query = '', $is_querywindow = false, $delimiter = ';'){    // enable auto select text in textarea    if ($GLOBALS['cfg']['TextareaAutoSelect']) {        $auto_sel = ' onclick="selectContent(this, sql_box_locked, true)"';    } else {        $auto_sel = '';    }    // enable locking if inside query window    if ($is_querywindow) {        $locking = ' onkeypress="document.sqlform.elements[\'LockFromUpdate\'].'            .'checked = true;"';        $height = $GLOBALS['cfg']['TextareaRows'] * 1.25;    } else {        $locking = '';        $height = $GLOBALS['cfg']['TextareaRows'] * 2;    }    $table          = '';    $db             = '';    $fields_list    = array();    if (! strlen($GLOBALS['db'])) {        // prepare for server related        $legend = sprintf(__('Run SQL query/queries on server %s'),            '&quot;' . htmlspecialchars(                ! empty($GLOBALS['cfg']['Servers'][$GLOBALS['server']]['verbose']) ? $GLOBALS['cfg']['Servers'][$GLOBALS['server']]['verbose'] : $GLOBALS['cfg']['Servers'][$GLOBALS['server']]['host']) . '&quot;');    } elseif (! strlen($GLOBALS['table'])) {        // prepare for db related        $db     = $GLOBALS['db'];        // if you want navigation:        $tmp_db_link = '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase']            . '?' . PMA_generate_common_url($db) . '"';        if ($is_querywindow) {            $tmp_db_link .= ' target="_self"'                . ' onclick="this.target=window.opener.frame_content.name"';        }        $tmp_db_link .= '>'            . htmlspecialchars($db) . '</a>';        // else use        // $tmp_db_link = htmlspecialchars($db);        $legend = sprintf(__('Run SQL query/queries on database %s'), $tmp_db_link);        if (empty($query)) {            $query = PMA_expandUserString($GLOBALS['cfg']['DefaultQueryDatabase'], 'PMA_backquote');        }    } else {        $table  = $GLOBALS['table'];        $db     = $GLOBALS['db'];        // Get the list and number of fields        // we do a try_query here, because we could be in the query window,        // trying to synchonize and the table has not yet been created        $fields_list = PMA_DBI_get_columns($db, $GLOBALS['table'], null, true);        $tmp_db_link = '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase']            . '?' . PMA_generate_common_url($db) . '"';        if ($is_querywindow) {            $tmp_db_link .= ' target="_self"'                . ' onclick="this.target=window.opener.frame_content.name"';        }        $tmp_db_link .= '>'            . htmlspecialchars($db) . '</a>';        // else use        // $tmp_db_link = htmlspecialchars($db);        $legend = sprintf(__('Run SQL query/queries on database %s'), $tmp_db_link);        if (empty($query)) {            $query = PMA_expandUserString($GLOBALS['cfg']['DefaultQueryTable'], 'PMA_backquote');        }    }    $legend .= ': ' . PMA_showMySQLDocu('SQL-Syntax', 'SELECT');    if (count($fields_list)) {        $sqlquerycontainer_id = 'sqlquerycontainer';    } else {        $sqlquerycontainer_id = 'sqlquerycontainerfull';    }    echo '<a name="querybox"></a>' . "\n"        .'<div id="queryboxcontainer">' . "\n"        .'<fieldset id="querybox">' . "\n";    echo '<legend>' . $legend . '</legend>' . "\n";    echo '<div id="queryfieldscontainer">' . "\n";    echo '<div id="' . $sqlquerycontainer_id . '">' . "\n"        .'<textarea tabindex="100" name="sql_query" id="sqlquery"'        .'  cols="' . $GLOBALS['cfg']['TextareaCols'] . '"'        .'  rows="' . $height . '"'        .'  dir="' . $GLOBALS['text_dir'] . '"'        .$auto_sel . $locking . '>' . htmlspecialchars($query) . '</textarea>' . "\n";    // Add buttons to generate query easily for select all,single select,insert,update and delete    if (count($fields_list)) {        echo '<input type="button" value="SELECT *" id="selectall" class="sqlbutton" />';        echo '<input type="button" value="SELECT" id="select" class="sqlbutton" />';        echo '<input type="button" value="INSERT" id="insert" class="sqlbutton" />';        echo '<input type="button" value="UPDATE" id="update" class="sqlbutton" />';        echo '<input type="button" value="DELETE" id="delete" class="sqlbutton" />';    }    echo '<input type="button" value="' . __('Clear') . '" id="clear" class="sqlbutton" />';    echo '</div>' . "\n";    if (count($fields_list)) {        echo '<div id="tablefieldscontainer">' . "\n"            .'<label>' . __('Columns') . '</label>' . "\n"            .'<select id="tablefields" name="dummy" '            .'size="' . ($GLOBALS['cfg']['TextareaRows'] - 2) . '" '            .'multiple="multiple" ondblclick="insertValueQuery()">' . "\n";        foreach ($fields_list as $field) {            echo '<option value="'                .PMA_backquote(htmlspecialchars($field['Field'])) . '"';            if (isset($field['Field']) && strlen($field['Field']) && isset($field['Comment'])) {                echo ' title="' . htmlspecialchars($field['Comment']) . '"';            }            echo '>' . htmlspecialchars($field['Field']) . '</option>' . "\n";        }        echo '</select>' . "\n"            .'<div id="tablefieldinsertbuttoncontainer">' . "\n";        if ($GLOBALS['cfg']['PropertiesIconic']) {            echo '<input type="button" name="insert" value="&lt;&lt;"'                .' onclick="insertValueQuery()"'                .' title="' . __('Insert') . '" />' . "\n";        } else {            echo '<input type="button" name="insert"'                .' value="' . __('Insert') . '"'                .' onclick="insertValueQuery()" />' . "\n";        }        echo '</div>' . "\n"            .'</div>' . "\n";    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</div>' . "\n";    if (! empty($GLOBALS['cfg']['Bookmark'])) {        ?>        <div id="bookmarkoptions">        <div class="formelement">        <label for="bkm_label">            <?php echo __('Bookmark this SQL query'); ?>:</label>        <input type="text" name="bkm_label" id="bkm_label" tabindex="110" value="" />        </div>        <div class="formelement">        <input type="checkbox" name="bkm_all_users" tabindex="111" id="id_bkm_all_users"            value="true" />        <label for="id_bkm_all_users">            <?php echo __('Let every user access this bookmark'); ?></label>        </div>        <div class="formelement">        <input type="checkbox" name="bkm_replace" tabindex="112" id="id_bkm_replace"            value="true" />        <label for="id_bkm_replace">            <?php echo __('Replace existing bookmark of same name'); ?></label>        </div>        </div>        <?php    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n"        .'</div>' . "\n";    echo '<fieldset id="queryboxfooter" class="tblFooters">' . "\n";    echo '<div class="formelement">' . "\n";    if ($is_querywindow) {        ?>        <script type="text/javascript">        //<![CDATA[            document.writeln(' <input type="checkbox" name="LockFromUpdate" checked="checked" tabindex="120" id="checkbox_lock" /> <label for="checkbox_lock"><?php echo __('Do not overwrite this query from outside the window'); ?></label> ');        //]]>        </script>        <?php    }    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo '<label for="id_sql_delimiter">[ ' . __('Delimiter')        .'</label>' . "\n";    echo '<input type="text" name="sql_delimiter" tabindex="131" size="3" '        .'value="' . $delimiter . '" '        .'id="id_sql_delimiter" /> ]' . "\n";    echo '<input type="checkbox" name="show_query" value="1" '        .'id="checkbox_show_query" tabindex="132" checked="checked" />' . "\n"        .'<label for="checkbox_show_query">' . __('Show this query here again')        .'</label>' . "\n";    if (! $is_querywindow) {        echo '<input type="checkbox" name="retain_query_box" value="1" '            . 'id="retain_query_box" tabindex="133" '            . ($GLOBALS['cfg']['RetainQueryBox'] === false ? '' : ' checked="checked"')            . ' />'            . '<label for="retain_query_box">' . __('Retain query box')            . '</label>';    }    echo '</div>' . "\n";    echo '<input type="submit" id="button_submit_query" name="SQL" tabindex="200" value="' . __('Go') . '" />'        ."\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";}/** * prints bookmark fieldset * * @usedby  PMA_sqlQueryForm() */function PMA_sqlQueryFormBookmark(){    $bookmark_list = PMA_Bookmark_getList($GLOBALS['db']);    if (! $bookmark_list || count($bookmark_list) < 1) {        return;    }    echo '<fieldset id="bookmarkoptions">';    echo '<legend>';    echo __('Bookmarked SQL query') . '</legend>' . "\n";    echo '<div class="formelement">';    echo '<select name="id_bookmark" id="id_bookmark">' . "\n";    echo '<option value="">&nbsp;</option>' . "\n";    foreach ($bookmark_list as $key => $value) {        echo '<option value="' . htmlspecialchars($key) . '">'            .htmlspecialchars($value) . '</option>' . "\n";    }    // &nbsp; is required for correct display with styles/line height    echo '</select>&nbsp;' . "\n";    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo __('Variable');    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        echo ' <a href="./Documentation.html#faqbookmark"'            .' target="documentation">'            . PMA_getImage('b_help.png', __('Documentation')) . '</a>';    } else {        echo ' (<a href="./Documentation.html#faqbookmark"'            .' target="documentation">' . __('Documentation') . '</a>): ';    }    echo '<input type="text" name="bookmark_variable" class="textfield"'        .' size="10" />' . "\n";    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo '<input type="radio" name="action_bookmark" value="0"'        .' id="radio_bookmark_exe" checked="checked" />'        .'<label for="radio_bookmark_exe">' . __('Submit')        .'</label>' . "\n";    echo '<input type="radio" name="action_bookmark" value="1"'        .' id="radio_bookmark_view" />'        .'<label for="radio_bookmark_view">' . __('View only')        .'</label>' . "\n";    echo '<input type="radio" name="action_bookmark" value="2"'        .' id="radio_bookmark_del" />'        .'<label for="radio_bookmark_del">' . __('Delete')        .'</label>' . "\n";    echo '</div>' . "\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";    echo '<fieldset id="bookmarkoptionsfooter" class="tblFooters">' . "\n";    echo '<input type="submit" name="SQL" id="button_submit_bookmark" value="' . __('Go') . '" />';    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";}/** * prints bookmark fieldset * * @usedby  PMA_sqlQueryForm() */function PMA_sqlQueryFormUpload(){    $errors = array ();    $matcher = '@\.sql(\.(' . PMA_supportedDecompressions() . '))?$@'; // we allow only SQL here    if (!empty($GLOBALS['cfg']['UploadDir'])) {        $files = PMA_getFileSelectOptions(PMA_userDir($GLOBALS['cfg']['UploadDir']), $matcher, (isset($timeout_passed) && $timeout_passed && isset($local_import_file)) ? $local_import_file : '');    } else {        $files = '';    }    // start output    echo '<fieldset id="">';    echo '<legend>';    echo __('Browse your computer:') . '</legend>';    echo '<div class="formelement">';    echo '<input type="file" name="sql_file" class="textfield" /> ';    echo PMA_displayMaximumUploadSize($GLOBALS['max_upload_size']);    // some browsers should respect this :)    echo PMA_generateHiddenMaxFileSize($GLOBALS['max_upload_size']) . "\n";    echo '</div>';    if ($files === false) {        $errors[] = PMA_Message::error( __('The directory you set for upload work cannot be reached'));    } elseif (!empty($files)) {        echo '<div class="formelement">';        echo '<strong>' . __('web server upload directory') .':</strong>' . "\n";        echo '<select size="1" name="sql_localfile">' . "\n";        echo '<option value="" selected="selected"></option>' . "\n";        echo $files;        echo '</select>' . "\n";        echo '</div>';    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>';    echo '<fieldset id="" class="tblFooters">';    echo __('Character set of the file:') . "\n";    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_CHARSET,            'charset_of_file', null, 'utf8', false);    echo '<input type="submit" name="SQL" value="' . __('Go')        .'" />' . "\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>';    foreach ($errors as $error) {        $error->display();    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for editing and inserting new table rows * * register_globals_save (mark this file save for disabling register globals) * * @package PhpMyAdmin *//** * Gets the variables sent or posted to this script and displays the header */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';/** * Ensures db and table are valid, else moves to the "parent" script */require_once './libraries/db_table_exists.lib.php';// load additional configuration variablesif (PMA_DRIZZLE) {    include_once './libraries/data_drizzle.inc.php';} else {    include_once './libraries/data_mysql.inc.php';}/** * Sets global variables. * Here it's better to use a if, instead of the '?' operator * to avoid setting a variable to '' when it's not present in $_REQUEST */if (isset($_REQUEST['where_clause'])) {    $where_clause = $_REQUEST['where_clause'];}if (isset($_REQUEST['clause_is_unique'])) {    $clause_is_unique = $_REQUEST['clause_is_unique'];}if (isset($_SESSION['edit_next'])) {    $where_clause = $_SESSION['edit_next'];    unset($_SESSION['edit_next']);    $after_insert = 'edit_next';}if (isset($_REQUEST['sql_query'])) {    $sql_query = $_REQUEST['sql_query'];}if (isset($_REQUEST['ShowFunctionFields'])) {    $cfg['ShowFunctionFields'] = $_REQUEST['ShowFunctionFields'];}if (isset($_REQUEST['ShowFieldTypesInDataEditView'])) {    $cfg['ShowFieldTypesInDataEditView'] = $_REQUEST['ShowFieldTypesInDataEditView'];}if (isset($_REQUEST['default_action'])) {    $default_action = $_REQUEST['default_action'];}/** * file listing */require_once './libraries/file_listing.php';/** * Defines the url to return to in case of error in a sql statement * (at this point, $GLOBALS['goto'] will be set but could be empty) */if (empty($GLOBALS['goto'])) {    if (strlen($table)) {        // avoid a problem (see bug #2202709)        $GLOBALS['goto'] = 'tbl_sql.php';    } else {        $GLOBALS['goto'] = 'db_sql.php';    }}/** * @todo check if we could replace by "db_|tbl_" - please clarify!? */$_url_params = array(    'db'        => $db,    'sql_query' => $sql_query);if (preg_match('@^tbl_@', $GLOBALS['goto'])) {    $_url_params['table'] = $table;}$err_url = $GLOBALS['goto'] . PMA_generate_common_url($_url_params);unset($_url_params);/** * Sets parameters for links * where is this variable used? * replace by PMA_generate_common_url($url_params); */$url_query = PMA_generate_common_url($url_params, 'html', '');/** * get table information * @todo should be done by a Table object */require_once './libraries/tbl_info.inc.php';/** * Get comments for table fileds/columns */$comments_map = array();if ($GLOBALS['cfg']['ShowPropertyComments']) {    $comments_map = PMA_getComments($db, $table);}/** * START REGULAR OUTPUT *//** * used in ./libraries/header.inc.php to load JavaScript library file */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'tbl_change.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'gis_data_editor.js';/** * HTTP and HTML headers */require_once './libraries/header.inc.php';/** * Displays the query submitted and its result * * @todo where does $disp_message and $disp_query come from??? */if (! empty($disp_message)) {    if (! isset($disp_query)) {        $disp_query     = null;    }    PMA_showMessage($disp_message, $disp_query);}/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';/** * Get the analysis of SHOW CREATE TABLE for this table * @todo should be handled by class Table */$show_create_table = PMA_DBI_fetch_value(        'SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table),        0, 1);$analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));unset($show_create_table);/** * Get the list of the fields of the current table */PMA_DBI_select_db($db);$table_fields = array_values(PMA_DBI_get_columns($db, $table));$rows               = array();if (isset($where_clause)) {    // when in edit mode load all selected rows from table    $insert_mode = false;    if (is_array($where_clause)) {        $where_clause_array = $where_clause;    } else {        $where_clause_array = array(0 => $where_clause);    }    $result             = array();    $found_unique_key   = false;    $where_clauses      = array();    foreach ($where_clause_array as $key_id => $where_clause) {        $local_query           = 'SELECT * FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';';        $result[$key_id]       = PMA_DBI_query($local_query, null, PMA_DBI_QUERY_STORE);        $rows[$key_id]         = PMA_DBI_fetch_assoc($result[$key_id]);        $where_clauses[$key_id] = str_replace('\\', '\\\\', $where_clause);        // No row returned        if (! $rows[$key_id]) {            unset($rows[$key_id], $where_clause_array[$key_id]);            PMA_showMessage(__('MySQL returned an empty result set (i.e. zero rows).'), $local_query);            echo "\n";            include './libraries/footer.inc.php';        } else { // end if (no row returned)            $meta = PMA_DBI_get_fields_meta($result[$key_id]);            list($unique_condition, $tmp_clause_is_unique) = PMA_getUniqueCondition($result[$key_id], count($meta), $meta, $rows[$key_id], true);            if (! empty($unique_condition)) {                $found_unique_key = true;            }            unset($unique_condition, $tmp_clause_is_unique);        }    }} else {    // no primary key given, just load first row - but what happens if table is empty?    $insert_mode = true;    $result = PMA_DBI_query('SELECT * FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table) . ' LIMIT 1;', null, PMA_DBI_QUERY_STORE);    $rows = array_fill(0, $cfg['InsertRows'], false);}// Copying a row - fetched data will be inserted as a new row, therefore the where clause is needless.if (isset($default_action) && $default_action === 'insert') {    unset($where_clause, $where_clauses);}// retrieve keys into foreign fields, if any$foreigners  = PMA_getForeigners($db, $table);/** * Displays the form */// autocomplete feature of IE kills the "onchange" event handler and it//        must be replaced by the "onpropertychange" one in this case$chg_evt_handler = (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 5 && PMA_USR_BROWSER_VER < 7)                 ? 'onpropertychange'                 : 'onchange';// Had to put the URI because when hosted on an https server,// some browsers send wrongly this form to the http server.    ?><!-- Set on key handler for moving using by Ctrl+arrows --><script src="./js/keyhandler.js" type="text/javascript"></script><script type="text/javascript">//<![CDATA[var switch_movement = 0;document.onkeydown = onKeyDownArrowsHandler;//]]></script>    <?php$_form_params = array(    'db'        => $db,    'table'     => $table,    'goto'      => $GLOBALS['goto'],    'err_url'   => $err_url,    'sql_query' => $sql_query,);if (isset($where_clauses)) {    foreach ($where_clause_array as $key_id => $where_clause) {        $_form_params['where_clause[' . $key_id . ']'] = trim($where_clause);    }}if (isset($clause_is_unique)) {    $_form_params['clause_is_unique'] = $clause_is_unique;}?><!-- Insert/Edit form --><form id="insertForm" method="post" action="tbl_replace.php" name="insertForm" <?php if ($is_upload) { echo ' enctype="multipart/form-data"'; } ?>><?phpecho PMA_generate_common_hidden_inputs($_form_params);$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));// Set if we passed the first timestamp field$timestamp_seen = 0;$fields_cnt     = count($table_fields);$tabindex = 0;$tabindex_for_function = +3000;$tabindex_for_null     = +6000;$tabindex_for_value    = 0;$o_rows   = 0;$biggest_max_file_size = 0;// user can toggle the display of Function column// (currently does not work for multi-edits)$url_params['db'] = $db;$url_params['table'] = $table;if (isset($where_clause)) {    $url_params['where_clause'] = trim($where_clause);}if (! empty($sql_query)) {    $url_params['sql_query'] = $sql_query;}if (! $cfg['ShowFunctionFields'] || ! $cfg['ShowFieldTypesInDataEditView']) {    echo __('Show');}if (! $cfg['ShowFunctionFields']) {    $this_url_params = array_merge($url_params,        array('ShowFunctionFields' => 1, 'ShowFieldTypesInDataEditView' => $cfg['ShowFieldTypesInDataEditView'], 'goto' => 'sql.php'));    echo ' : <a href="tbl_change.php' . PMA_generate_common_url($this_url_params) . '">' . __('Function') . '</a>' . "\n";}if (! $cfg['ShowFieldTypesInDataEditView']) {    $this_other_url_params = array_merge($url_params,        array('ShowFieldTypesInDataEditView' => 1, 'ShowFunctionFields' => $cfg['ShowFunctionFields'], 'goto' => 'sql.php'));    echo ' : <a href="tbl_change.php' . PMA_generate_common_url($this_other_url_params) . '">' . __('Type') . '</a>' . "\n";}foreach ($rows as $row_id => $vrow) {    if ($vrow === false) {        unset($vrow);    }    $jsvkey = $row_id;    $rownumber_param = '&amp;rownumber=' . $row_id;    $vkey = '[multi_edit][' . $jsvkey . ']';    $vresult = (isset($result) && is_array($result) && isset($result[$row_id]) ? $result[$row_id] : $result);    if ($insert_mode && $row_id > 0) {        echo '<input type="checkbox" checked="checked" name="insert_ignore_' . $row_id . '" id="insert_ignore_' . $row_id . '" />';        echo '<label for="insert_ignore_' . $row_id . '">' . __('Ignore') . '</label><br />' . "\n";    }?>    <table class="insertRowTable">    <thead>        <tr>            <th><?php echo __('Column'); ?></th> <?php     if ($cfg['ShowFieldTypesInDataEditView']) {        $this_url_params = array_merge($url_params,            array('ShowFieldTypesInDataEditView' => 0, 'ShowFunctionFields' => $cfg['ShowFunctionFields'], 'goto' => 'sql.php'));        echo '          <th><a href="tbl_change.php' . PMA_generate_common_url($this_url_params) . '" title="' . __('Hide') . '">' . __('Type') . '</a></th>' . "\n";    }    if ($cfg['ShowFunctionFields']) {        $this_url_params = array_merge($url_params,            array('ShowFunctionFields' => 0, 'ShowFieldTypesInDataEditView' => $cfg['ShowFieldTypesInDataEditView'], 'goto' => 'sql.php'));        echo '          <th><a href="tbl_change.php' . PMA_generate_common_url($this_url_params) . '" title="' . __('Hide') . '">' . __('Function') . '</a></th>' . "\n";    }?>            <th><?php echo __('Null'); ?></th>            <th><?php echo __('Value'); ?></th>        </tr>    </thead>    <tfoot>        <tr>            <th colspan="5" align="right" class="tblFooters">                <input type="submit" value="<?php echo __('Go'); ?>" />            </th>        </tr>    </tfoot>    <tbody><?php    // Sets a multiplier used for input-field counts (as zero cannot be used, advance the counter plus one)    $m_rows = $o_rows + 1;    $odd_row = true;    for ($i = 0; $i < $fields_cnt; $i++) {        if (! isset($table_fields[$i]['processed'])) {            $table_fields[$i]['Field_html'] = htmlspecialchars($table_fields[$i]['Field']);            $table_fields[$i]['Field_md5']  = md5($table_fields[$i]['Field']);            // True_Type contains only the type (stops at first bracket)            $table_fields[$i]['True_Type']  = preg_replace('@\(.*@s', '', $table_fields[$i]['Type']);            // d a t e t i m e            //            // Current date should not be set as default if the field is NULL            // for the current row, but do not put here the current datetime            // if there is a default value (the real default value will be set            // in the Default value logic below)            // Note: (tested in MySQL 4.0.16): when lang is some UTF-8,            // $field['Default'] is not set if it contains NULL:            // Array ([Field] => d [Type] => datetime [Null] => YES [Key] => [Extra] => [True_Type] => datetime)            // but, look what we get if we switch to iso: (Default is NULL)            // Array ([Field] => d [Type] => datetime [Null] => YES [Key] => [Default] => [Extra] => [True_Type] => datetime)            // so I force a NULL into it (I don't think it's possible            // to have an empty default value for DATETIME)            // then, the "if" after this one will work            if ($table_fields[$i]['Type'] == 'datetime'             && ! isset($table_fields[$i]['Default'])             && isset($table_fields[$i]['Null'])             && $table_fields[$i]['Null'] == 'YES') {                $table_fields[$i]['Default'] = null;            }            $table_fields[$i]['len']                = preg_match('@float|double@', $table_fields[$i]['Type']) ? 100 : -1;            if (isset($comments_map[$table_fields[$i]['Field']])) {                $table_fields[$i]['Field_title'] = '<span style="border-bottom: 1px dashed black;" title="'                    . htmlspecialchars($comments_map[$table_fields[$i]['Field']]) . '">'                    . $table_fields[$i]['Field_html'] . '</span>';            } else {                $table_fields[$i]['Field_title'] = $table_fields[$i]['Field_html'];            }            // The type column.            // Fix for bug #3152931 'ENUM and SET cannot have "Binary" option'            // If check to ensure types such as "enum('one','two','binary',..)" or            // "enum('one','two','varbinary',..)" are not categorized as binary.            if (stripos($table_fields[$i]['Type'], 'binary') === 0            || stripos($table_fields[$i]['Type'], 'varbinary') === 0) {                $table_fields[$i]['is_binary'] = stristr($table_fields[$i]['Type'], 'binary');            } else {                $table_fields[$i]['is_binary'] = false;            }            // If check to ensure types such as "enum('one','two','blob',..)" or            // "enum('one','two','tinyblob',..)" etc. are not categorized as blob.            if (stripos($table_fields[$i]['Type'], 'blob') === 0            || stripos($table_fields[$i]['Type'], 'tinyblob') === 0            || stripos($table_fields[$i]['Type'], 'mediumblob') === 0            || stripos($table_fields[$i]['Type'], 'longblob') === 0) {                $table_fields[$i]['is_blob']   = stristr($table_fields[$i]['Type'], 'blob');            } else {                $table_fields[$i]['is_blob'] = false;            }            // If check to ensure types such as "enum('one','two','char',..)" or            // "enum('one','two','varchar',..)" are not categorized as char.            if (stripos($table_fields[$i]['Type'], 'char') === 0            || stripos($table_fields[$i]['Type'], 'varchar') === 0) {                $table_fields[$i]['is_char']   = stristr($table_fields[$i]['Type'], 'char');            } else {                $table_fields[$i]['is_char'] = false;            }            $table_fields[$i]['first_timestamp'] = false;            switch ($table_fields[$i]['True_Type']) {                case 'set':                    $table_fields[$i]['pma_type'] = 'set';                    $table_fields[$i]['wrap']  = '';                    break;                case 'enum':                    $table_fields[$i]['pma_type'] = 'enum';                    $table_fields[$i]['wrap']  = '';                    break;                case 'timestamp':                    if (!$timestamp_seen) {   // can only occur once per table                        $timestamp_seen  = 1;                        $table_fields[$i]['first_timestamp'] = true;                    }                    $table_fields[$i]['pma_type'] = $table_fields[$i]['Type'];                    $table_fields[$i]['wrap']  = ' nowrap="nowrap"';                    break;                default:                    $table_fields[$i]['pma_type'] = $table_fields[$i]['Type'];                    $table_fields[$i]['wrap']  = ' nowrap="nowrap"';                    break;            }        }        $field = $table_fields[$i];        $extracted_fieldspec = PMA_extractFieldSpec($field['Type']);        if (-1 === $field['len']) {            $field['len'] = PMA_DBI_field_len($vresult, $i);            // length is unknown for geometry fields, make enough space to edit very simple WKTs            if (-1 === $field['len']) {                $field['len'] = 30;            }        }        //Call validation when the form submited...        $unnullify_trigger = $chg_evt_handler . "=\"return verificationsAfterFieldChange('". PMA_escapeJsString($field['Field_md5']) . "', '"            . PMA_escapeJsString($jsvkey) . "','".$field['pma_type']."')\"";        // Use an MD5 as an array index to avoid having special characters in the name atttibute (see bug #1746964 )        $field_name_appendix =  $vkey . '[' . $field['Field_md5'] . ']';        if ($field['Type'] == 'datetime'         && ! isset($field['Default'])         && ! is_null($field['Default'])         && ($insert_mode || ! isset($vrow[$field['Field']]))) {            // INSERT case or            // UPDATE case with an NULL value            $vrow[$field['Field']] = date('Y-m-d H:i:s', time());        }        ?>        <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">            <td <?php echo ($cfg['LongtextDoubleTextarea'] && strstr($field['True_Type'], 'longtext') ? 'rowspan="2"' : ''); ?> align="center">                <?php echo $field['Field_title']; ?>                <input type="hidden" name="fields_name<?php echo $field_name_appendix; ?>" value="<?php echo $field['Field_html']; ?>"/>            </td><?php if ($cfg['ShowFieldTypesInDataEditView']) { ?>             <td align="center"<?php echo $field['wrap']; ?>><span class="column_type"><?php echo $field['pma_type']; ?></span>             </td>         <?php } //End if        // Get a list of GIS data types.        $gis_data_types = PMA_getGISDatatypes();        // Prepares the field value        $real_null_value = false;        $special_chars_encoded = '';        if (isset($vrow)) {            // (we are editing)            if (is_null($vrow[$field['Field']])) {                $real_null_value = true;                $vrow[$field['Field']]    = '';                $special_chars   = '';                $data            = $vrow[$field['Field']];            } elseif ($field['True_Type'] == 'bit') {                $special_chars = PMA_printable_bit_value($vrow[$field['Field']], $extracted_fieldspec['spec_in_brackets']);            } elseif (in_array($field['True_Type'], $gis_data_types)) {                // Convert gis data to Well Know Text format                $vrow[$field['Field']] = PMA_asWKT($vrow[$field['Field']], true);                $special_chars = htmlspecialchars($vrow[$field['Field']]);            } else {                // special binary "characters"                if ($field['is_binary'] || ($field['is_blob'] && ! $cfg['ProtectBinary'])) {                    if ($_SESSION['tmp_user_values']['display_binary_as_hex'] && $cfg['ShowFunctionFields']) {                        $vrow[$field['Field']] = bin2hex($vrow[$field['Field']]);                        $field['display_binary_as_hex'] = true;                    } else {                        $vrow[$field['Field']] = PMA_replace_binary_contents($vrow[$field['Field']]);                    }                } // end if                $special_chars   = htmlspecialchars($vrow[$field['Field']]);            //We need to duplicate the first \n or otherwise we will lose the first newline entered in a VARCHAR or TEXT column                $special_chars_encoded = PMA_duplicateFirstNewline($special_chars);                $data            = $vrow[$field['Field']];            } // end if... else...            //when copying row, it is useful to empty auto-increment column to prevent duplicate key error            if (isset($default_action) && $default_action === 'insert') {                if ($field['Key'] === 'PRI' && strpos($field['Extra'], 'auto_increment') !== false) {                    $data = $special_chars_encoded = $special_chars = null;                }            }            // If a timestamp field value is not included in an update            // statement MySQL auto-update it to the current timestamp;            // however, things have changed since MySQL 4.1, so            // it's better to set a fields_prev in this situation            $backup_field  = '<input type="hidden" name="fields_prev'                . $field_name_appendix . '" value="'                . htmlspecialchars($vrow[$field['Field']]) . '" />';        } else {            // (we are inserting)            // display default values            if (! isset($field['Default'])) {                $field['Default'] = '';                $real_null_value          = true;                $data                     = '';            } else {                $data                     = $field['Default'];            }            if ($field['True_Type'] == 'bit') {                $special_chars = PMA_convert_bit_default_value($field['Default']);            } else {                $special_chars = htmlspecialchars($field['Default']);            }            $backup_field  = '';            $special_chars_encoded = PMA_duplicateFirstNewline($special_chars);            // this will select the UNHEX function while inserting            if (($field['is_binary'] || ($field['is_blob'] && ! $cfg['ProtectBinary'])) && $_SESSION['tmp_user_values']['display_binary_as_hex'] && $cfg['ShowFunctionFields']) {                $field['display_binary_as_hex'] = true;            }        }        $idindex  = ($o_rows * $fields_cnt) + $i + 1;        $tabindex = $idindex;        // Get a list of data types that are not yet supported.        $no_support_types = PMA_unsupportedDatatypes();        // The function column        // -------------------        // We don't want binary data to be destroyed        // Note: from the MySQL manual: "BINARY doesn't affect how the column is        //       stored or retrieved" so it does not mean that the contents is        //       binary        if ($cfg['ShowFunctionFields']) {            if (($cfg['ProtectBinary'] && $field['is_blob'] && !$is_upload)             || ($cfg['ProtectBinary'] == 'all' && $field['is_binary'])) {                echo '        <td align="center">' . __('Binary') . '</td>' . "\n";            } elseif (strstr($field['True_Type'], 'enum') || strstr($field['True_Type'], 'set') || in_array($field['pma_type'], $no_support_types)) {                echo '        <td align="center">--</td>' . "\n";            } else {                ?>            <td>                <select name="funcs<?php echo $field_name_appendix; ?>" <?php echo $unnullify_trigger; ?> tabindex="<?php echo ($tabindex + $tabindex_for_function); ?>" id="field_<?php echo $idindex; ?>_1"><?php    echo PMA_getFunctionsForField($field, $insert_mode);?>                </select>            </td>                <?php            }        } // end if ($cfg['ShowFunctionFields'])        // The null column        // ---------------        $foreignData = PMA_getForeignData($foreigners, $field['Field'], false, '', '');        echo '        <td>' . "\n";        if ($field['Null'] == 'YES') {            echo '            <input type="hidden" name="fields_null_prev' . $field_name_appendix . '"';            if ($real_null_value && !$field['first_timestamp']) {                echo ' value="on"';            }            echo ' />' . "\n";            echo '            <input type="checkbox" class="checkbox_null" tabindex="' . ($tabindex + $tabindex_for_null) . '"'                 . ' name="fields_null' . $field_name_appendix . '"';            if ($real_null_value && !$field['first_timestamp']) {                echo ' checked="checked"';            }            echo ' id="field_' . ($idindex) . '_2" />';            // nullify_code is needed by the js nullify() function            if (strstr($field['True_Type'], 'enum')) {                if (strlen($field['Type']) > 20) {                    $nullify_code = '1';                } else {                    $nullify_code = '2';                }            } elseif (strstr($field['True_Type'], 'set')) {                $nullify_code = '3';            } elseif ($foreigners && isset($foreigners[$field['Field']]) && $foreignData['foreign_link'] == false) {                // foreign key in a drop-down                $nullify_code = '4';            } elseif ($foreigners && isset($foreigners[$field['Field']]) && $foreignData['foreign_link'] == true) {                // foreign key with a browsing icon                $nullify_code = '6';            } else {                $nullify_code = '5';            }            // to be able to generate calls to nullify() in jQuery            echo '<input type="hidden" class="nullify_code" name="nullify_code' . $field_name_appendix . '" value="' . $nullify_code . '" />';            echo '<input type="hidden" class="hashed_field" name="hashed_field' . $field_name_appendix . '" value="' .  $field['Field_md5'] . '" />';            echo '<input type="hidden" class="multi_edit" name="multi_edit' . $field_name_appendix . '" value="' . PMA_escapeJsString($vkey) . '" />';        }        echo '        </td>' . "\n";        // The value column (depends on type)        // ----------------        // See bug #1667887 for the reason why we don't use the maxlength        // HTML attribute        echo '        <td>' . "\n";        // Will be used by js/tbl_change.js to set the default value        // for the "Continue insertion" feature        echo '<span class="default_value hide">' . $special_chars . '</span>';        if ($foreignData['foreign_link'] == true) {            echo $backup_field . "\n";            ?>            <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>"                value="foreign" />            <input type="text" name="fields<?php echo $field_name_appendix; ?>"                class="textfield" <?php echo $unnullify_trigger; ?>                tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                id="field_<?php echo ($idindex); ?>_3"                value="<?php echo htmlspecialchars($data); ?>" />                <a class="hide foreign_values_anchor" target="_blank" onclick="window.open(this.href, 'foreigners', 'width=640,height=240,scrollbars=yes,resizable=yes'); return false;" href="browse_foreigners.php?<?php echo PMA_generate_common_url($db, $table); ?>&amp;field=<?php echo PMA_escapeJsString(urlencode($field['Field']) . $rownumber_param); ?>"><?php echo str_replace("'", "\'", $titles['Browse']); ?></a>            <?php        } elseif (is_array($foreignData['disp_row'])) {            echo $backup_field . "\n";            ?>            <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>"                value="foreign" />            <select name="fields<?php echo $field_name_appendix; ?>"                <?php echo $unnullify_trigger; ?>                class="textfield"                tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                id="field_<?php echo ($idindex); ?>_3">                <?php echo PMA_foreignDropdown($foreignData['disp_row'], $foreignData['foreign_field'], $foreignData['foreign_display'], $data, $cfg['ForeignKeyMaxLimit']); ?>            </select>            <?php                // still needed? :            unset($foreignData['disp_row']);        } elseif ($cfg['LongtextDoubleTextarea'] && strstr($field['pma_type'], 'longtext')) {            ?>            &nbsp;</td>        </tr>        <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">            <td colspan="5" align="right">                <?php echo $backup_field . "\n"; ?>                <textarea name="fields<?php echo $field_name_appendix; ?>"                    rows="<?php echo ($cfg['TextareaRows']*2); ?>"                    cols="<?php echo ($cfg['TextareaCols']*2); ?>"                    dir="<?php echo $text_dir; ?>"                    id="field_<?php echo ($idindex); ?>_3"                    <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    ><?php echo $special_chars_encoded; ?></textarea>          <?php        } elseif (strstr($field['pma_type'], 'text')) {            echo $backup_field . "\n";            ?>                <textarea name="fields<?php echo $field_name_appendix; ?>"                    rows="<?php echo $cfg['TextareaRows']; ?>"                    cols="<?php echo $cfg['TextareaCols']; ?>"                    dir="<?php echo $text_dir; ?>"                    id="field_<?php echo ($idindex); ?>_3"                    <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    ><?php echo $special_chars_encoded; ?></textarea>            <?php            echo "\n";            if (strlen($special_chars) > 32000) {                echo "        </td>\n";                echo '        <td>' . __('Because of its length,<br /> this column might not be editable');            }        } elseif ($field['pma_type'] == 'enum') {            if (! isset($table_fields[$i]['values'])) {                $table_fields[$i]['values'] = array();                foreach ($extracted_fieldspec['enum_set_values'] as $val) {                    // Removes automatic MySQL escape format                    $val = str_replace('\'\'', '\'', str_replace('\\\\', '\\', $val));                    $table_fields[$i]['values'][] = array(                        'plain' => $val,                        'html'  => htmlspecialchars($val),                    );                }            }            $field_enum_values = $table_fields[$i]['values'];            ?>                <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="enum" />                <input type="hidden" name="fields<?php echo $field_name_appendix; ?>" value="" />            <?php            echo "\n" . '            ' . $backup_field . "\n";            // show dropdown or radio depend on length            if (strlen($field['Type']) > 20) {                ?>                <select name="fields<?php echo $field_name_appendix; ?>"                    <?php echo $unnullify_trigger; ?>                    class="textfield"                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    id="field_<?php echo ($idindex); ?>_3">                    <option value="">&nbsp;</option>                <?php                echo "\n";                foreach ($field_enum_values as $enum_value) {                    echo '                ';                    echo '<option value="' . $enum_value['html'] . '"';                    if ($data == $enum_value['plain']                     || ($data == ''                      && (! isset($where_clause) || $field['Null'] != 'YES')                      && isset($field['Default'])                      && $enum_value['plain'] == $field['Default'])) {                        echo ' selected="selected"';                    }                    echo '>' . $enum_value['html'] . '</option>' . "\n";                } // end for                ?>                </select>                <?php            } else {                $j = 0;                foreach ($field_enum_values as $enum_value) {                    echo '            ';                    echo '<input type="radio" name="fields' . $field_name_appendix . '"';                    echo ' class="textfield"';                    echo ' value="' . $enum_value['html'] . '"';                    echo ' id="field_' . ($idindex) . '_3_'  . $j . '"';                    echo $unnullify_trigger;                    if ($data == $enum_value['plain']                     || ($data == ''                      && (! isset($where_clause) || $field['Null'] != 'YES')                      && isset($field['Default'])                      && $enum_value['plain'] == $field['Default'])) {                        echo ' checked="checked"';                    }                    echo ' tabindex="' . ($tabindex + $tabindex_for_value) . '" />';                    echo '<label for="field_' . $idindex . '_3_' . $j . '">'                        . $enum_value['html'] . '</label>' . "\n";                    $j++;                } // end for            } // end else        } elseif ($field['pma_type'] == 'set') {            if (! isset($table_fields[$i]['values'])) {                $table_fields[$i]['values'] = array();                foreach ($extracted_fieldspec['enum_set_values'] as $val) {                    $table_fields[$i]['values'][] = array(                        'plain' => $val,                        'html'  => htmlspecialchars($val),                    );                }                $table_fields[$i]['select_size'] = min(4, count($table_fields[$i]['values']));            }            $field_set_values = $table_fields[$i]['values'];            $select_size = $table_fields[$i]['select_size'];            $vset = array_flip(explode(',', $data));            echo $backup_field . "\n";            ?>                <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="set" />                <select name="fields<?php echo $field_name_appendix . '[]'; ?>"                    class="textfield"                    size="<?php echo $select_size; ?>"                    multiple="multiple" <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    id="field_<?php echo ($idindex); ?>_3">            <?php            foreach ($field_set_values as $field_set_value) {                echo '                ';                echo '<option value="' . $field_set_value['html'] . '"';                if (isset($vset[$field_set_value['plain']])) {                    echo ' selected="selected"';                }                echo '>' . $field_set_value['html'] . '</option>' . "\n";            } // end for            ?>                </select>            <?php        // We don't want binary data destroyed        } elseif ($field['is_binary'] || $field['is_blob']) {            if (($cfg['ProtectBinary'] && $field['is_blob'])                || ($cfg['ProtectBinary'] == 'all' && $field['is_binary'])            ) {                echo "\n";                    // for blobstreaming                if (PMA_BS_IsTablePBMSEnabled($db, $table, $tbl_type)                    && PMA_BS_IsPBMSReference($data, $db)                ) {                    echo '<input type="hidden" name="remove_blob_ref_' . $field['Field_md5'] . $vkey . '" value="' . $data . '" />';                    echo '<input type="checkbox" name="remove_blob_repo_' . $field['Field_md5'] . $vkey . '" /> ' . __('Remove BLOB Repository Reference') . "<br />";                    echo PMA_BS_CreateReferenceLink($data, $db);                    echo "<br />";                } else {                    echo __('Binary - do not edit');                    if (isset($data)) {                        $data_size = PMA_formatByteDown(strlen(stripslashes($data)), 3, 1);                        echo ' ('. $data_size [0] . ' ' . $data_size[1] . ')';                        unset($data_size);                    }                    echo "\n";                }   // end if (PMA_BS_IsTablePBMSEnabled($db, $table, $tbl_type) && PMA_BS_IsPBMSReference($data, $db))                ?>                <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="protected" />                <input type="hidden" name="fields<?php echo $field_name_appendix; ?>" value="" />                <?php            } elseif ($field['is_blob']) {                echo "\n";                echo $backup_field . "\n";                ?>                <textarea name="fields<?php echo $field_name_appendix; ?>"                    rows="<?php echo $cfg['TextareaRows']; ?>"                    cols="<?php echo $cfg['TextareaCols']; ?>"                    dir="<?php echo $text_dir; ?>"                    id="field_<?php echo ($idindex); ?>_3"                    <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    ><?php echo $special_chars_encoded; ?></textarea>                <?php            } else {                // field size should be at least 4 and max $cfg['LimitChars']                $fieldsize = min(max($field['len'], 4), $cfg['LimitChars']);                echo "\n";                echo $backup_field . "\n";                ?>                <input type="text" name="fields<?php echo $field_name_appendix; ?>"                    value="<?php echo $special_chars; ?>" size="<?php echo $fieldsize; ?>"                    class="textfield" <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    id="field_<?php echo ($idindex); ?>_3" />                <?php            } // end if...elseif...else            // Upload choice (only for BLOBs because the binary            // attribute does not imply binary contents)            // (displayed whatever value the ProtectBinary has)            if ($is_upload && $field['is_blob']) {                // check if field type is of longblob and  if the table is PBMS enabled.                if (($field['pma_type'] == "longblob")                    && PMA_BS_IsTablePBMSEnabled($db, $table, $tbl_type)                ) {                    echo '<br />';                    echo '<input type="checkbox" name="upload_blob_repo' . $vkey . '[' . $field['Field_md5'] . ']" /> ' .  __('Upload to BLOB repository');                }                echo '<br />';                echo '<input type="file" name="fields_upload' . $vkey . '[' . $field['Field_md5'] . ']" class="textfield" id="field_' . $idindex . '_3" size="10" ' . $unnullify_trigger . '/>&nbsp;';                // find maximum upload size, based on field type                /**                 * @todo with functions this is not so easy, as you can basically                 * process any data with function like MD5                 */                $max_field_sizes = array(                    'tinyblob'   =>        '256',                    'blob'       =>      '65536',                    'mediumblob' =>   '16777216',                    'longblob'   => '4294967296'); // yeah, really                $this_field_max_size = $max_upload_size; // from PHP max                if ($this_field_max_size > $max_field_sizes[$field['pma_type']]) {                   $this_field_max_size = $max_field_sizes[$field['pma_type']];                }                echo PMA_displayMaximumUploadSize($this_field_max_size) . "\n";                // do not generate here the MAX_FILE_SIZE, because we should                // put only one in the form to accommodate the biggest field                if ($this_field_max_size > $biggest_max_file_size) {                    $biggest_max_file_size = $this_field_max_size;                }            }            if (!empty($cfg['UploadDir'])) {                $files = PMA_getFileSelectOptions(PMA_userDir($cfg['UploadDir']));                if ($files === false) {                    echo '        <font color="red">' . __('Error') . '</font><br />' . "\n";                    echo '        ' . __('The directory you set for upload work cannot be reached') . "\n";                } elseif (!empty($files)) {                    echo "<br />\n";                    echo '    <i>' . __('Or') . '</i>' . ' ' . __('web server upload directory') . ':<br />' . "\n";                    echo '        <select size="1" name="fields_uploadlocal' . $vkey . '[' . $field['Field_md5'] . ']">' . "\n";                    echo '            <option value="" selected="selected"></option>' . "\n";                    echo $files;                    echo '        </select>' . "\n";                }            } // end if (web-server upload directory)        // end elseif (binary or blob)        } elseif (! in_array($field['pma_type'], $no_support_types)) {            // ignore this column to avoid changing it            if ($field['is_char']) {                $fieldsize = $extracted_fieldspec['spec_in_brackets'];            } else {            /**             * This case happens for example for INT or DATE columns;             * in these situations, the value returned in $field['len']             * seems appropriate.             */                $fieldsize = $field['len'];            }            $fieldsize = min(max($fieldsize, $cfg['MinSizeForInputField']), $cfg['MaxSizeForInputField']);            echo $backup_field . "\n";            if ($field['is_char']                && ($cfg['CharEditing'] == 'textarea'                || strpos($data, "\n") !== false)            ) {                echo "\n";                ?>                <textarea class="char" name="fields<?php echo $field_name_appendix; ?>"                    rows="<?php echo $cfg['CharTextareaRows']; ?>"                    cols="<?php echo $cfg['CharTextareaCols']; ?>"                    dir="<?php echo $text_dir; ?>"                    id="field_<?php echo ($idindex); ?>_3"                    <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    ><?php echo $special_chars_encoded; ?></textarea>                <?php            } else {                $the_class = 'textfield';                if ($field['pma_type'] == 'date') {                    $the_class .= ' datefield';                } elseif ($field['pma_type'] == 'datetime'                    || substr($field['pma_type'], 0, 9) == 'timestamp'                ) {                    $the_class .= ' datetimefield';                }                ?>                <input type="text" name="fields<?php echo $field_name_appendix; ?>"                    value="<?php echo $special_chars; ?>" size="<?php echo $fieldsize; ?>"                    class="<?php echo $the_class; ?>" <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    id="field_<?php echo ($idindex); ?>_3" />                <?php                if ($field['Extra'] == 'auto_increment') {                    ?>                    <input type="hidden" name="auto_increment<?php echo $field_name_appendix; ?>" value="1" />                    <?php                } // end if                if (substr($field['pma_type'], 0, 9) == 'timestamp') {                    ?>                    <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="timestamp" />                    <?php                }                if (substr($field['pma_type'], 0, 8) == 'datetime') {                    ?>                    <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="datetime" />                    <?php                }                if ($field['True_Type'] == 'bit') {                    ?>                    <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="bit" />                    <?php                }                if ($field['pma_type'] == 'date'                    || $field['pma_type'] == 'datetime'                    || substr($field['pma_type'], 0, 9) == 'timestamp'                ) {                    // the _3 suffix points to the date field                    // the _2 suffix points to the corresponding NULL checkbox                    // in dateFormat, 'yy' means the year with 4 digits                }            }        }        if (in_array($field['pma_type'], $gis_data_types)) {            $data_val = isset($vrow[$field['Field']]) ? $vrow[$field['Field']] : '';            $_url_params = array(                'field' => $field['Field_title'],                'value' => $data_val,             );            if ($field['pma_type'] != 'geometry') {                $_url_params = $_url_params + array('gis_data[gis_type]' => strtoupper($field['pma_type']));            }            $edit_url = 'gis_data_editor.php' . PMA_generate_common_url($_url_params);            $edit_str = PMA_getIcon('b_edit.png', __('Edit/Insert'));            echo('<span class="open_gis_editor">');            echo(PMA_linkOrButton($edit_url, $edit_str, array(), false, false, '_blank'));            echo('</span>');        }        ?>            </td>        </tr>        <?php        $odd_row = !$odd_row;    } // end for    $o_rows++;    echo '  </tbody></table><br />';} // end foreach on multi-edit?>    <div id="gis_editor"></div><div id="popup_background"></div>    <br />    <fieldset id="actions_panel">    <table border="0" cellpadding="5" cellspacing="0">    <tr>        <td valign="middle" nowrap="nowrap">            <select name="submit_type" class="control_at_footer" tabindex="<?php echo ($tabindex + $tabindex_for_value + 1); ?>"><?phpif (isset($where_clause)) {    ?>                <option value="save"><?php echo __('Save'); ?></option>    <?php}    ?>                <option value="insert"><?php echo __('Insert as new row'); ?></option>                <option value="insertignore"><?php echo __('Insert as new row and ignore errors'); ?></option>                <option value="showinsert"><?php echo __('Show insert query'); ?></option>            </select>    <?phpecho "\n";if (! isset($after_insert)) {    $after_insert = 'back';}?>        </td>        <td valign="middle">            &nbsp;&nbsp;&nbsp;<strong><?php echo __('and then'); ?></strong>&nbsp;&nbsp;&nbsp;        </td>        <td valign="middle" nowrap="nowrap">            <select name="after_insert">                <option value="back" <?php echo ($after_insert == 'back' ? 'selected="selected"' : ''); ?>><?php echo __('Go back to previous page'); ?></option>                <option value="new_insert" <?php echo ($after_insert == 'new_insert' ? 'selected="selected"' : ''); ?>><?php echo __('Insert another new row'); ?></option><?phpif (isset($where_clause)) {    ?>                <option value="same_insert" <?php echo ($after_insert == 'same_insert' ? 'selected="selected"' : ''); ?>><?php echo __('Go back to this page'); ?></option>    <?php    // If we have just numeric primary key, we can also edit next    // in 2.8.2, we were looking for `field_name` = numeric_value    //if (preg_match('@^[\s]*`[^`]*` = [0-9]+@', $where_clause)) {    // in 2.9.0, we are looking for `table_name`.`field_name` = numeric_value    if ($found_unique_key && preg_match('@^[\s]*`[^`]*`[\.]`[^`]*` = [0-9]+@', $where_clause)) {        ?>    <option value="edit_next" <?php echo ($after_insert == 'edit_next' ? 'selected="selected"' : ''); ?>><?php echo __('Edit next row'); ?></option>        <?php    }}?>            </select>        </td>    </tr>    <tr>        <td><?php echo PMA_showHint(__('Use TAB key to move from value to value, or CTRL+arrows to move anywhere')); ?>        </td>        <td colspan="3" align="right" valign="middle">            <input type="submit" class="control_at_footer" value="<?php echo __('Go'); ?>" tabindex="<?php echo ($tabindex + $tabindex_for_value + 6); ?>" id="buttonYes" />            <input type="reset" class="control_at_footer" value="<?php echo __('Reset'); ?>" tabindex="<?php echo ($tabindex + $tabindex_for_value + 7); ?>" />        </td>    </tr>    </table>    </fieldset>    <?php if ($biggest_max_file_size > 0) {            echo '        ' . PMA_generateHiddenMaxFileSize($biggest_max_file_size) . "\n";          } ?></form><?phpif ($insert_mode) {?><!-- Continue insertion form --><form id="continueForm" method="post" action="tbl_replace.php" name="continueForm" >    <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>    <input type="hidden" name="goto" value="<?php echo htmlspecialchars($GLOBALS['goto']); ?>" />    <input type="hidden" name="err_url" value="<?php echo htmlspecialchars($err_url); ?>" />    <input type="hidden" name="sql_query" value="<?php echo htmlspecialchars($sql_query); ?>" /><?php    if (isset($where_clauses)) {        foreach ($where_clause_array as $key_id => $where_clause) {            echo '<input type="hidden" name="where_clause[' . $key_id . ']" value="' . htmlspecialchars(trim($where_clause)) . '" />'. "\n";        }    }    $tmp = '<select name="insert_rows" id="insert_rows">' . "\n";    $option_values = array(1,2,5,10,15,20,30,40);    foreach ($option_values as $value) {        $tmp .= '<option value="' . $value . '"';        if ($value == $cfg['InsertRows']) {            $tmp .= ' selected="selected"';        }        $tmp .= '>' . $value . '</option>' . "\n";    }    $tmp .= '</select>' . "\n";    echo "\n" . sprintf(__('Continue insertion with %s rows'), $tmp);    unset($tmp);    echo '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>' . "\n";    echo '</form>' . "\n";}/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/file_listing.php';require_once './libraries/plugin_interface.lib.php';require_once './libraries/display_import_ajax.lib.php';/* Scan for plugins */$import_list = PMA_getPlugins('./libraries/import/', $import_type);/* Fail if we didn't find any plugin */if (empty($import_list)) {    PMA_Message::error(__('Could not load import plugins, please check your installation!'))->display();    include './libraries/footer.inc.php';}?><iframe id="import_upload_iframe" name="import_upload_iframe" width="1" height="1" style="display: none;"></iframe><div id="import_form_status" style="display: none;"></div><div id="importmain">    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />    <script type="text/javascript">        //<![CDATA[        $(document).ready( function() {            // add event when user click on "Go" button            $('#buttonGo').bind('click', function() {                $('#upload_form_form').css("display", "none"); // hide form                $('#upload_form_status').css("display", "inline"); // show progress bar                $('#upload_form_status_info').css("display", "inline"); // - || -<?phpif ($_SESSION[$SESSION_KEY]["handler"]!="noplugin") {    ?>                $('#upload_form_status').html('<div class="upload_progress_bar_outer"><div id="status" class="upload_progress_bar_inner"></div></div>'); // add the progress bar                var finished = false;                var percent  = 0.0;                var total    = 0;                var complete = 0;                var perform_upload;                var periodical_upload;                var request_upload = [];                perform_upload = function () {                    new $.getJSON(                    'import_status.php?id=<?php echo $upload_id ; ?>&<?php echo PMA_generate_common_url(); ?>',                    {},                    function(response) {                        finished = response.finished;                        percent = response.percent;                        total = response.total;                        complete = response.complete;                          if (total==0 && complete==0 && percent==0) {                              $('#upload_form_status_info').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('The file being uploaded is probably larger than the maximum allowed size or this is a known bug in webkit based (Safari, Google Chrome, Arora etc.) browsers.'), false); ?>');                              $('#upload_form_status').css("display", "none");                          } else {                              $('#upload_form_status_info').html(' '+Math.round(percent)+'%, '+complete+'/'+total);                              $('#status').animate({width: Math.round(percent)*2+'px'},150);                          } // else                          if (finished==true) {                                    $('#importmain').css('display', 'none');                                    $('#import_form_status').css('display', 'inline');                                    $('#import_form_status').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('The file is being processed, please be patient.'), false); ?> ');                                    $('#import_form_status').load('import_status.php?message=true&<?php echo PMA_generate_common_url(); ?>'); // loads the message, either success or mysql error                                    <?php                                    // reload the left sidebar when the import is finished                                    $GLOBALS['reload']=true;                                    PMA_reloadNavigation(true);                                    ?>                          } // if finished                          else {                                window.setTimeout(perform_upload, 1000);                          }                      }                  );              }                window.setTimeout(perform_upload, 1000);    <?php} else { // no plugin available    ?>                        $('#upload_form_status_info').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('Please be patient, the file is being uploaded. Details about the upload are not available.'), false) . PMA_showDocu('faq2_9'); ?>');                        $('#upload_form_status').css("display", "none");    <?php} // else?>                    }); // onclick                }); // domready                document.write('<form action="import.php" method="post" enctype="multipart/form-data" name="import"<?php if ($_SESSION[$SESSION_KEY]["handler"]!="noplugin") echo ' target="import_upload_iframe"'; ?>>');                //]]>    </script>    <noscript>        <form action="import.php" method="post" enctype="multipart/form-data" name="import">    </noscript>    <input type="hidden" name="<?php echo $ID_KEY; ?>" value="<?php echo $upload_id ; ?>" />    <?php    if ($import_type == 'server') {        echo PMA_generate_common_hidden_inputs('', '', 1);    } elseif ($import_type == 'database') {        echo PMA_generate_common_hidden_inputs($db, '', 1);    } else {        echo PMA_generate_common_hidden_inputs($db, $table, 1);    }    echo '    <input type="hidden" name="import_type" value="' . $import_type . '" />'."\n";    ?>    <div class="exportoptions" id="header">        <h2>            <?php echo PMA_getImage('b_import.png', __('Import')); ?>            <?php            if ($import_type == 'server') {                echo __('Importing into the current server');            } elseif ($import_type == 'database') {                printf(__('Importing into the database "%s"'), htmlspecialchars($db));            } else {                printf(__('Importing into the table "%s"'), htmlspecialchars($table));            }?>        </h2>    </div>    <div class="importoptions">        <h3><?php echo __('File to Import:'); ?></h3>        <?php        // zip, gzip and bzip2 encode features        $compressions = array();        if ($cfg['GZipDump'] && @function_exists('gzopen')) {            $compressions[] = 'gzip';        }        if ($cfg['BZipDump'] && @function_exists('bzopen')) {            $compressions[] = 'bzip2';        }        if ($cfg['ZipDump'] && @function_exists('zip_open')) {            $compressions[] = 'zip';        }        // We don't have show anything about compression, when no supported        if ($compressions != array()) {            echo '<div class="formelementrow" id="compression_info">';            printf(__('File may be compressed (%s) or uncompressed.'), implode(", ", $compressions));            echo '<br />';            echo __('A compressed file\'s name must end in <b>.[format].[compression]</b>. Example: <b>.sql.zip</b>');            echo '</div>';        }?>        <div class="formelementrow" id="upload_form">        <?php if ($GLOBALS['is_upload'] && !empty($cfg['UploadDir'])) { ?>            <ul>            <li>                <input type="radio" name="file_location" id="radio_import_file" />                <?php PMA_browseUploadFile($max_upload_size); ?>            </li>            <li>                <input type="radio" name="file_location" id="radio_local_import_file" />                <?php PMA_selectUploadFile($import_list, $cfg['UploadDir']); ?>            </li>            </ul>        <?php } else if ($GLOBALS['is_upload']) {            $uid = uniqid("");            PMA_browseUploadFile($max_upload_size);        } else if (!$GLOBALS['is_upload']) {            PMA_Message::notice(__('File uploads are not allowed on this server.'))->display();        } else if (!empty($cfg['UploadDir'])) {            PMA_selectUploadFile($import_list, $cfg['UploadDir']);        } // end if (web-server upload directory)        ?>        </div>       <div class="formelementrow" id="charaset_of_file">        <?php // charset of file        if ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE) {            echo '<label for="charset_of_file">' . __('Character set of the file:') . '</label>';            reset($cfg['AvailableCharsets']);            echo '<select id="charset_of_file" name="charset_of_file" size="1">';            foreach ($cfg['AvailableCharsets'] as $temp_charset) {                echo '<option value="' . htmlentities($temp_charset) .  '"';                if ((empty($cfg['Import']['charset']) && $temp_charset == 'utf-8')                        || $temp_charset == $cfg['Import']['charset']) {                    echo ' selected="selected"';                }                echo '>' . htmlentities($temp_charset) . '</option>';            }            echo ' </select><br />';        } else {            echo '<label for="charset_of_file">' . __('Character set of the file:') . '</label>' . "\n";            echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_CHARSET, 'charset_of_file', 'charset_of_file', 'utf8', false);        } // end if (recoding)        ?>        </div>    </div>    <div class="importoptions">        <h3><?php echo __('Partial Import:'); ?></h3>        <?php        if (isset($timeout_passed) && $timeout_passed) {            echo '<div class="formelementrow">' . "\n";            echo '<input type="hidden" name="skip" value="' . $offset . '" />';            echo sprintf(__('Previous import timed out, after resubmitting will continue from position %d.'), $offset) . '';            echo '</div>' . "\n";        }        ?>        <div class="formelementrow">            <input type="checkbox" name="allow_interrupt" value="yes"                   id="checkbox_allow_interrupt" <?php echo PMA_pluginCheckboxCheck('Import', 'allow_interrupt'); ?>/>            <label for="checkbox_allow_interrupt"><?php echo __('Allow the interruption of an import in case the script detects it is close to the PHP timeout limit. <i>(This might be good way to import large files, however it can break transactions.)</i>'); ?></label><br />        </div>        <?php        if (! (isset($timeout_passed) && $timeout_passed)) {            ?>        <div class="formelementrow">            <label for="text_skip_queries"><?php echo __('Number of rows to skip, starting from the first row:'); ?></label>            <input type="text" name="skip_queries" value="<?php echo PMA_pluginGetDefault('Import', 'skip_queries');?>" id="text_skip_queries" />        </div>            <?php        } else {            // If timeout has passed,            // do not show the Skip dialog to avoid the risk of someone            // entering a value here that would interfere with "skip"            ?>        <input type="hidden" name="skip_queries" value="<?php echo PMA_pluginGetDefault('Import', 'skip_queries');?>" id="text_skip_queries" />            <?php        }        ?>    </div>    <div class="importoptions">        <h3><?php echo __('Format:'); ?></h3>        <?php echo PMA_pluginGetChoice('Import', 'format', $import_list); ?>        <div id="import_notification"></div>    </div>    <div class="importoptions" id="format_specific_opts">        <h3><?php echo __('Format-Specific Options:'); ?></h3>        <p class="no_js_msg" id="scroll_to_options_msg">Scroll down to fill in the options for the selected format and ignore the options for other formats.</p>        <?php echo PMA_pluginGetOptions('Import', $import_list); ?>    </div>        <div class="clearfloat"></div>    </div>    <?php    // Encoding setting form appended by Y.Kawada    if (function_exists('PMA_set_enc_form')) { ?>        <div class="importoptions" id="kanji_encoding">            <h3><?php echo __('Encoding Conversion:'); ?></h3>            <?php echo PMA_set_enc_form('            '); ?>        </div>    <?php }    echo "\n";    ?>    <div class="importoptions" id="submit">        <input type="submit" value="<?php echo __('Go'); ?>" id="buttonGo" />    </div></form>
