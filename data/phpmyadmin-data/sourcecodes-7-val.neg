<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Single signon for phpMyAdmin using OpenID * * This is just example how to use single signon with phpMyAdmin, it is * not intended to be perfect code and look, only shows how you can * integrate this functionality in your application. * * It uses OpenID pear package, see http://pear.php.net/package/OpenID * * User first authenticates using OpenID and based on content of $AUTH_MAP * the login information is passed to phpMyAdmin in session data. * * @package PhpMyAdmin * @subpackage Example */if (false === @include_once 'OpenID/RelyingParty.php') {    exit;}/** * Map of authenticated users to MySQL user/password pairs. */$AUTH_MAP = array(    'http://launchpad.net/~username' => array(        'user' => 'root',        'password' => '',        ),    );/** * Simple function to show HTML page with given content. */function show_page($contents){    header('Content-Type: text/html; charset=utf-8');    echo '<?xml version="1.0" encoding="utf-8"?>' . "\n";    ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr"><head>    <link rel="icon" href="../favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="../favicon.ico" type="image/x-icon" />    <title>phpMyAdmin OpenID signon example</title></head><body><?phpif (isset($_SESSION) && isset($_SESSION['PMA_single_signon_error_message'])) {    echo '<p class="error">' . $_SESSION['PMA_single_signon_message'] . '</p>';    unset($_SESSION['PMA_single_signon_message']);}echo $contents;?></body></html><?php}/* Need to have cookie visible from parent directory */session_set_cookie_params(0, '/', '', 0);/* Create signon session */$session_name = 'SignonSession';session_name($session_name);session_start();// Determine realm and return_to$base = 'http';if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') {    $base .= 's';}$base .= '://' . $_SERVER['SERVER_NAME'] . ':' . $_SERVER['SERVER_PORT'];$realm = $base . '/';$returnTo = $base . dirname($_SERVER['PHP_SELF']);if ($returnTo[strlen($returnTo) - 1] != '/') {    $returnTo .= '/';}$returnTo .= 'openid.php';/* Display form */if (!count($_GET) && !count($_POST) || isset($_GET['phpMyAdmin'])) {    /* Show simple form */    $content = '<form action="openid.php" method="post">OpenID: <input type="text" name="identifier" /><br /><input type="submit" name="start" /></form></body></html>';    show_page($content);    exit;}/* Grab identifier */if (isset($_POST['identifier'])) {    $identifier = $_POST['identifier'];} else if (isset($_SESSION['identifier'])) {    $identifier = $_SESSION['identifier'];} else {    $identifier = null;}/* Create OpenID object */try {    $o = new OpenID_RelyingParty($returnTo, $realm, $identifier);} catch (OpenID_Exception $e) {    $contents = "<div class='relyingparty_results'>\n";    $contents .= "<pre>" . $e->getMessage() . "</pre>\n";    $contents .= "</div class='relyingparty_results'>";    show_page($contents);    exit;}/* Redirect to OpenID provider */if (isset($_POST['start'])) {    try {        $authRequest = $o->prepare();    } catch (OpenID_Exception $e) {        $contents = "<div class='relyingparty_results'>\n";        $contents .= "<pre>" . $e->getMessage() . "</pre>\n";        $contents .= "</div class='relyingparty_results'>";        show_page($contents);        exit;    }    $url = $authRequest->getAuthorizeURL();    header("Location: $url");    exit;} else {    /* Grab query string */    if (!count($_POST)) {        list(, $queryString) = explode('?', $_SERVER['REQUEST_URI']);    } else {        // I hate php sometimes        $queryString = file_get_contents('php://input');    }    /* Check reply */    $message = new OpenID_Message($queryString, OpenID_Message::FORMAT_HTTP);    $id = $message->get('openid.claimed_id');    if (!empty($id) && isset($AUTH_MAP[$id])) {        $_SESSION['PMA_single_signon_user'] = $AUTH_MAP[$id]['user'];        $_SESSION['PMA_single_signon_password'] = $AUTH_MAP[$id]['password'];        session_write_close();        /* Redirect to phpMyAdmin (should use absolute URL here!) */        header('Location: ../index.php');    } else {        show_page('<p>User not allowed!</p>');        exit;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common config manipulation functions * * @package PhpMyAdmin *//** * Returns sanitized language string, taking into account our special codes * for formatting. Takes variable number of arguments. * Based on PMA_sanitize from sanitize.lib.php. * * @param  string  $lang_key  key in $GLOBALS WITHOUT 'strSetup' prefix * @param  mixed   $args,...  arguments for sprintf * @return string */function PMA_lang($lang_key, $args = null){    $message = isset($GLOBALS["strConfig$lang_key"]) ? $GLOBALS["strConfig$lang_key"] : $lang_key;    $message = PMA_sanitize($message);    if (func_num_args() == 1) {        return $message;    } else {        $args = func_get_args();        array_shift($args);        return vsprintf($message, $args);    }}/** * Returns translated field name/description or comment * * @param string $canonical_path * @param string $type  'name', 'desc' or 'cmt' * @param mixed  $default * @return string */function PMA_lang_name($canonical_path, $type = 'name', $default = 'key'){    $lang_key = str_replace(        array('Servers/1/', '/'),        array('Servers/', '_'),        $canonical_path) . '_' . $type;    return isset($GLOBALS["strConfig$lang_key"])        ? ($type == 'desc' ? PMA_lang($lang_key) : $GLOBALS["strConfig$lang_key"])        : ($default == 'key' ? $lang_key : $default);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * PHP interface to MimerSQL Validator * * Copyright 2002, 2003 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * All data is transported over HTTP-SOAP * And uses either the PEAR SOAP Module or PHP SOAP extension * * Install instructions for PEAR SOAP: * Make sure you have a really recent PHP with PEAR support * run this: "pear install Mail_Mime Net_DIME SOAP" * * @access   public * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Load SOAP client. */if (class_exists('SOAPClient')) {    $GLOBALS['sqlvalidator_error'] = false;    $GLOBALS['sqlvalidator_soap'] = 'PHP';} else {    @include_once 'SOAP/Client.php';    if (class_exists('SOAP_Client')) {        $GLOBALS['sqlvalidator_soap'] = 'PEAR';        $GLOBALS['sqlvalidator_error'] = false;    } else {        $GLOBALS['sqlvalidator_soap'] = 'NONE';        $GLOBALS['sqlvalidator_error'] = true;        PMA_warnMissingExtension('soap');    }}if (!$GLOBALS['sqlvalidator_error']) {    // Ok, we have SOAP Support, so let's use it!/** * @package PhpMyAdmin */    class PMA_SQLValidator    {        var $url;        var $service_name;        var $wsdl;        var $output_type;        var $username;        var $password;        var $calling_program;        var $calling_program_version;        var $target_dbms;        var $target_dbms_version;        var $connectionTechnology;        var $connection_technology_version;        var $interactive;        var $service_link = null;        var $session_data = null;        /**         * Private functions - You don't need to mess with these         */        /**         * Service opening         *         * @param string  URL of Mimer SQL Validator WSDL file         *         * @return object  Object to use         *         * @access private         */        function _openService($url)        {            if ($GLOBALS['sqlvalidator_soap'] == 'PHP') {                $obj = new SOAPClient($url);            } else {                $obj = new SOAP_Client($url, true);            }            return $obj;        } // end of the "openService()" function        /**         * Service initializer to connect to server         *         * @param object   Service object         * @param string   Username         * @param string   Password         * @param string   Name of calling program         * @param string   Version of calling program         * @param string   Target DBMS         * @param string   Version of target DBMS         * @param string   Connection Technology         * @param string   version of Connection Technology         * @param integer  boolean of 1/0 to specify if we are an interactive system         *         * @return object   stdClass return object with data         *         * @access private         */        function _openSession($obj, $username, $password,                                      $calling_program, $calling_program_version,                                      $target_dbms, $target_dbms_version,                                      $connection_technology, $connection_technology_version,                                      $interactive)        {            $use_array = array(                "a_userName" => $username,                "a_password" => $password,                "a_callingProgram" => $calling_program,                "a_callingProgramVersion" => $calling_program_version,                "a_targetDbms" => $target_dbms,                "a_targetDbmsVersion" => $target_dbms_version,                "a_connectionTechnology" => $connection_technology,                "a_connectionTechnologyVersion" => $connection_technology_version,                "a_interactive" => $interactive,            );            if ($GLOBALS['sqlvalidator_soap'] == 'PHP') {                $ret = $obj->__soapCall("openSession", $use_array);            } else {                $ret = $obj->call("openSession", $use_array);            }            return $ret;        } // end of the "_openSession()" function        /**         * Validator sytem call         *         * @param object  Service object         * @param object  Session object         * @param string  SQL Query to validate         * @param string  Data return type         *         * @return object  stClass return with data         *         * @access private         */        function _validateSQL($obj, $session, $sql, $method)        {            $use_array = array(                "a_sessionId" => $session->sessionId,                "a_sessionKey" => $session->sessionKey,                "a_SQL" => $sql,                "a_resultType" => $this->output_type,            );            if ($GLOBALS['sqlvalidator_soap'] == 'PHP') {                $res = $obj->__soapCall("validateSQL", $use_array);            } else {                $res = $obj->call("validateSQL", $use_array);            }            return $res;        } // end of the "validateSQL()" function        /**         * Validator sytem call         *         * @param string  SQL Query to validate         *         * @return object  stdClass return with data         *         * @access private         *         * @see    validateSQL()         */        function _validate($sql)        {            $ret = $this->_validateSQL($this->service_link, $this->session_data,                                               $sql, $this->output_type);            return $ret;        } // end of the "validate()" function        /**         * Public functions         */        /**         * Constructor         *         * @access public         */        function __construct()        {            $this->url                           = 'http://sqlvalidator.mimer.com/v1/services';            $this->service_name                  = 'SQL99Validator';            $this->wsdl                          = '?wsdl';            $this->output_type                   = 'html';            $this->username                      = 'anonymous';            $this->password                      = '';            $this->calling_program               = 'PHP_SQLValidator';            $this->calling_program_version       = PMA_VERSION;            $this->target_dbms                   = 'N/A';            $this->target_dbms_version           = 'N/A';            $this->connection_technology         = 'PHP';            $this->connection_technology_version = phpversion();            $this->interactive = 1;            $this->service_link = null;            $this->session_data = null;        } // end of the "PMA_SQLValidator()" function        /**         * Sets credentials         *         * @param string  the username         * @param string  the password         *         * @access public         */        function setCredentials($username, $password)        {            $this->username = $username;            $this->password = $password;        } // end of the "setCredentials()" function        /**         * Sets the calling program         *         * @param string  the calling program name         * @param string  the calling program revision         *         * @access public         */        function setCallingProgram($calling_program, $calling_program_version)        {            $this->calling_program         = $calling_program;            $this->calling_program_version = $calling_program_version;        } // end of the "setCallingProgram()" function        /**         * Appends the calling program         *         * @param string  the calling program name         * @param string  the calling program revision         *         * @access public         */        function appendCallingProgram($calling_program, $calling_program_version)        {            $this->calling_program         .= ' - ' . $calling_program;            $this->calling_program_version .= ' - ' . $calling_program_version;        } // end of the "appendCallingProgram()" function        /**         * Sets the target DBMS         *         * @param string  the target DBMS name         * @param string  the target DBMS revision         *         * @access public         */        function setTargetDbms($target_dbms, $target_dbms_version)        {            $this->target_dbms         = $target_dbms;            $this->target_dbms_version = $target_dbms_version;        } // end of the "setTargetDbms()" function        /**         * Appends the target DBMS         *         * @param string  the target DBMS name         * @param string  the target DBMS revision         *         * @access public         */        function appendTargetDbms($target_dbms, $target_dbms_version)        {            $this->target_dbms         .= ' - ' . $target_dbms;            $this->target_dbms_version .= ' - ' . $target_dbms_version;        } // end of the "appendTargetDbms()" function        /**         * Sets the connection technology used         *         * @param string  the connection technology name         * @param string  the connection technology revision         *         * @access public         */        function setConnectionTechnology($connection_technology, $connection_technology_version)        {            $this->connection_technology         = $connection_technology;            $this->connection_technology_version = $connection_technology_version;        } // end of the "setConnectionTechnology()" function        /**         * Appends the connection technology used         *         * @param string  the connection technology name         * @param string  the connection technology revision         *         * @access public         */        function appendConnectionTechnology($connection_technology, $connection_technology_version)        {            $this->connection_technology         .= ' - ' . $connection_technology;            $this->connection_technology_version .= ' - ' . $connection_technology_version;        } // end of the "appendConnectionTechnology()" function        /**         * Sets whether interactive mode should be used or not         *         * @param integer  whether interactive mode should be used or not         *         * @access public         */        function setInteractive($interactive)        {            $this->interactive = $interactive;        } // end of the "setInteractive()" function        /**         * Sets the output type to use         *         * @param string  the output type to use         *         * @access public         */        function setOutputType($output_type)        {            $this->output_type = $output_type;        } // end of the "setOutputType()" function        /**         * Starts service         *         * @access public         */        function startService()        {            $this->service_link = $this->_openService($this->url . '/' . $this->service_name . $this->wsdl);        } // end of the "startService()" function        /**         * Starts session         *         * @access public         */        function startSession()        {            $this->session_data = $this->_openSession($this->service_link, $this->username, $this->password,                                                              $this->calling_program, $this->calling_program_version,                                                              $this->target_dbms, $this->target_dbms_version,                                                              $this->connection_technology, $this->connection_technology_version,                                                              $this->interactive);            if (isset($this->session_data) && ($this->session_data != null)                && ($this->session_data->target != $this->url)) {                // Reopens the service on the new URL that was provided                $url = $this->session_data->target;                $this->startService();            }        } // end of the "startSession()" function        /**         * Do start service and session         *         * @access public         */        function start()        {            $this->startService();            $this->startSession();        } // end of the "start()" function        /**         * Call to determine just if a query is valid or not.         *         * @param string SQL statement to validate         *         * @return string Validator string from Mimer         *         * @see _validate         */        function isValid($sql)        {            $res = $this->_validate($sql);            return $res->standard;        } // end of the "isValid()" function        /**         * Call for complete validator response         *         * @param string SQL statement to validate         *         * @return string Validator string from Mimer         *         * @see _validate         */        function validationString($sql)        {            $res = $this->_validate($sql);            return $res->data;        } // end of the "validationString()" function    } // end class PMA_SQLValidator    //add an extra check to ensure that the class was defined without errors    if (!class_exists('PMA_SQLValidator')) {        $GLOBALS['sqlvalidator_error'] = true;    }} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * Load BDB class. */require_once './libraries/engines/bdb.lib.php';/** * This is same as BDB. * @package PhpMyAdmin-Engines */class PMA_StorageEngine_berkeleydb extends PMA_StorageEngine_bdb{}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * finishes HTML output * * updates javascript variables in index.php for correct working with querywindow * and navigation frame refreshing * * send buffered data if buffered * * WARNING: This script has to be included at the very end of your code because *          it will stop the script execution! * * always use $GLOBALS, as this script is also included by functions * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * for PMA_setHistory() */if (! PMA_isValid($_REQUEST['no_history']) && empty($GLOBALS['error_message']) && ! empty($GLOBALS['sql_query'])) {    PMA_setHistory(PMA_ifSetOr($GLOBALS['db'], ''),        PMA_ifSetOr($GLOBALS['table'], ''),        $GLOBALS['cfg']['Server']['user'],        $GLOBALS['sql_query']);}if ($GLOBALS['error_handler']->hasDisplayErrors()) {    echo '<div class="clearfloat">';    $GLOBALS['error_handler']->dispErrors();    echo '</div>';}if (count($GLOBALS['footnotes'])) {    echo '<div class="footnotes">';    foreach ($GLOBALS['footnotes'] as $footnote) {        echo '<span id="footnote_' . $footnote['nr'] . '"><sup>'            . $footnote['nr'] . '</sup> ' . $footnote['note'] . '</span><br />';    }    echo '</div>';}if (! empty($_SESSION['debug'])) {    $sum_time = 0;    $sum_exec = 0;    foreach ($_SESSION['debug']['queries'] as $query) {        $sum_time += $query['count'] * $query['time'];        $sum_exec += $query['count'];    }    echo '<div>';    echo count($_SESSION['debug']['queries']) . ' queries executed '        . $sum_exec . ' times in ' . $sum_time . ' seconds';    echo '<pre>';    print_r($_SESSION['debug']);    echo '</pre>';    echo '</div>';    $_SESSION['debug'] = array();}if (!$GLOBALS['is_ajax_request']) {?><script type="text/javascript">//<![CDATA[<?phpif (empty($GLOBALS['error_message'])) {    ?>$(document).ready(function() {// updates current settingsif (window.parent.setAll) {    window.parent.setAll('<?php        echo PMA_escapeJsString($GLOBALS['lang']) . "', '";        echo PMA_escapeJsString($GLOBALS['collation_connection']) . "', '";        echo PMA_escapeJsString($GLOBALS['server']) . "', '";        echo PMA_escapeJsString(PMA_ifSetOr($GLOBALS['db'], '')) . "', '";        echo PMA_escapeJsString(PMA_ifSetOr($GLOBALS['table'], '')) . "', '";        echo PMA_escapeJsString($_SESSION[' PMA_token ']);?>');}    <?php    if (! empty($GLOBALS['reload'])) {        ?>// refresh navigation frame contentif (window.parent.refreshNavigation) {    window.parent.refreshNavigation();}        <?php    } else if (isset($_GET['reload_left_frame']) && $_GET['reload_left_frame'] == '1') {        // reload left frame (used by user preferences)        ?>        if (window.parent && window.parent.frame_navigation) {            window.parent.frame_navigation.location.reload();        }        <?php    }    ?>// set current db, table and sql query in the querywindowif (window.parent.reload_querywindow) {    window.parent.reload_querywindow(        '<?php echo PMA_escapeJsString(PMA_ifSetOr($GLOBALS['db'], '')) ?>',        '<?php echo PMA_escapeJsString(PMA_ifSetOr($GLOBALS['table'], '')) ?>',        '<?php echo strlen($GLOBALS['sql_query']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'] ? PMA_escapeJsString($GLOBALS['sql_query']) : ''; ?>');}    <?php}if (! empty($GLOBALS['focus_querywindow'])) {    ?>// set focus to the querywindowif (parent.querywindow && !parent.querywindow.closed && parent.querywindow.location) {    self.focus();}    <?php}?>if (window.parent.frame_content) {    // reset content frame name, as querywindow needs to set a unique name    // before submitting form data, and navigation frame needs the original name    if (typeof(window.parent.frame_content.name) != 'undefined'     && window.parent.frame_content.name != 'frame_content') {        window.parent.frame_content.name = 'frame_content';    }    if (typeof(window.parent.frame_content.id) != 'undefined'     && window.parent.frame_content.id != 'frame_content') {        window.parent.frame_content.id = 'frame_content';    }    //window.parent.frame_content.setAttribute('name', 'frame_content');    //window.parent.frame_content.setAttribute('id', 'frame_content');}});//]]></script><?php}// Link to itself to replicate windows including framesetif (! isset($GLOBALS['checked_special'])) {    $GLOBALS['checked_special'] = false;}if (PMA_getenv('SCRIPT_NAME') && empty($_POST) && !$GLOBALS['checked_special'] && ! $GLOBALS['is_ajax_request']) {    echo '<div id="selflink" class="print_ignore">' . "\n";    $url_params['target'] = basename(PMA_getenv('SCRIPT_NAME'));    ?><script type="text/javascript">//<![CDATA[/* Store current location in hash part of URL to allow direct bookmarking */setURLHash("<?php echo PMA_generate_common_url($url_params, 'text', ''); ?>");//]]></script><?php    echo '<a href="index.php' . PMA_generate_common_url($url_params) . '"'        . ' title="' . __('Open new phpMyAdmin window') . '" target="_blank">';    if ($GLOBALS['cfg']['NavigationBarIconic']) {        echo PMA_getImage('window-new.png', __('Open new phpMyAdmin window'));    }    if ($GLOBALS['cfg']['NavigationBarIconic'] !== true) {        echo __('Open new phpMyAdmin window');    }    echo '</a>' . "\n";    echo '</div>' . "\n";}// Include possible custom footersif (! $GLOBALS['is_ajax_request'] && file_exists(CUSTOM_FOOTER_FILE)) {    include CUSTOM_FOOTER_FILE;}/** * If we are in an AJAX request, we do not need to generate the closing tags for * body and html. */if (! $GLOBALS['is_ajax_request']) {?></body></html><?php}/** * Stops the script execution */exit;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * SQL Parser Matching Data * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * This data is used by the SQL Parser to recognize keywords * * It has been extracted from the lex.h file in the MySQL BK tree * (around 4.0.2) as well as the MySQL documentation. * * It's easier to use only uppercase for proper sorting. In case of * doubt, use the test case to verify. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}if (! isset($GLOBALS['sql_delimiter'])) {        $GLOBALS['sql_delimiter'] = ';';}/** * @global array MySQL function names */$PMA_SQPdata_function_name = array (    'ABS',    'ACOS',    'ADDDATE',    'ADDTIME',    'AES_DECRYPT',    'AES_ENCRYPT',    'AREA',                     // Area() polygon-property-functions.html    'ASBINARY',                 // AsBinary()    'ASCII',    'ASIN',    'ASTEXT',                   // AsText()    'ATAN',    'ATAN2',    'AVG',    'BDMPOLYFROMTEXT',          // BdMPolyFromText()    'BDMPOLYFROMWKB',           // BdMPolyFromWKB()    'BDPOLYFROMTEXT',           // BdPolyFromText()    'BDPOLYFROMWKB',            // BdPolyFromWKB()    'BENCHMARK',    'BIN',    'BIT_AND',    'BIT_COUNT',    'BIT_LENGTH',    'BIT_OR',    'BIT_XOR',                  // group-by-functions.html    'BOUNDARY',                 // Boundary() general-geometry-property-functions.html    'BUFFER',                   // Buffer()    'CAST',    'CEIL',    'CEILING',    'CENTROID',                 // Centroid() multipolygon-property-functions.html    'CHAR',                     // string-functions.html    'CHARACTER_LENGTH',    'CHARSET',                  // information-functions.html    'CHAR_LENGTH',    'COALESCE',    'COERCIBILITY',             // information-functions.html    'COLLATION',                // information-functions.html    'COMPRESS',                 // string-functions.html    'CONCAT',    'CONCAT_WS',    'CONNECTION_ID',    'CONTAINS',                 // Contains()    'CONV',    'CONVERT',    'CONVERT_TZ',    'CONVEXHULL',               // ConvexHull()    'COS',    'COT',    'COUNT',    'CRC32',                    // mathematical-functions.html    'CROSSES',                  // Crosses()    'CURDATE',    'CURRENT_DATE',    'CURRENT_TIME',    'CURRENT_TIMESTAMP',    'CURRENT_USER',    'CURTIME',    'DATABASE',    'DATE',                     // date-and-time-functions.html    'DATEDIFF',                 // date-and-time-functions.html    'DATE_ADD',    'DATE_DIFF',    'DATE_FORMAT',    'DATE_SUB',    'DAY',    'DAYNAME',    'DAYOFMONTH',    'DAYOFWEEK',    'DAYOFYEAR',    'DECODE',    'DEFAULT',                  // miscellaneous-functions.html    'DEGREES',    'DES_DECRYPT',    'DES_ENCRYPT',    'DIFFERENCE',               // Difference()    'DIMENSION',                // Dimension() general-geometry-property-functions.html    'DISJOINT',                 // Disjoint()    'DISTANCE',                 // Distance()    'ELT',    'ENCODE',    'ENCRYPT',    'ENDPOINT',                 // EndPoint() linestring-property-functions.html    'ENVELOPE',                 // Envelope() general-geometry-property-functions.html    'EQUALS',                   // Equals()    'EXP',    'EXPORT_SET',    'EXTERIORRING',             // ExteriorRing() polygon-property-functions.html    'EXTRACT',    'EXTRACTVALUE',             // ExtractValue() xml-functions.html    'FIELD',    'FIND_IN_SET',    'FLOOR',    'FORMAT',    'FOUND_ROWS',    'FROM_DAYS',    'FROM_UNIXTIME',    'GEOMCOLLFROMTEXT',         // GeomCollFromText()    'GEOMCOLLFROMWKB',          // GeomCollFromWKB()    'GEOMETRYCOLLECTION',       // GeometryCollection()    'GEOMETRYCOLLECTIONFROMTEXT',   // GeometryCollectionFromText()    'GEOMETRYCOLLECTIONFROMWKB',    // GeometryCollectionFromWKB()    'GEOMETRYFROMTEXT',         // GeometryFromText()    'GEOMETRYFROMWKB',          // GeometryFromWKB()    'GEOMETRYN',                // GeometryN() geometrycollection-property-functions.html    'GEOMETRYTYPE',             // GeometryType() general-geometry-property-functions.html    'GEOMFROMTEXT',             // GeomFromText()    'GEOMFROMWKB',              // GeomFromWKB()    'GET_FORMAT',    'GET_LOCK',    'GLENGTH',                  // GLength() linestring-property-functions.html    'GREATEST',    'GROUP_CONCAT',    'GROUP_UNIQUE_USERS',    'HEX',    'HOUR',    'IF',                       //control-flow-functions.html    'IFNULL',    'INET_ATON',    'INET_NTOA',    'INSERT',                   // string-functions.html    'INSTR',    'INTERIORRINGN',            // InteriorRingN() polygon-property-functions.html    'INTERSECTION',             // Intersection()    'INTERSECTS',               // Intersects()    'INTERVAL',    'ISCLOSED',                 // IsClosed() multilinestring-property-functions.html    'ISEMPTY',                  // IsEmpty() general-geometry-property-functions.html    'ISNULL',    'ISRING',                   // IsRing() linestring-property-functions.html    'ISSIMPLE',                 // IsSimple() general-geometry-property-functions.html    'IS_FREE_LOCK',    'IS_USED_LOCK',             // miscellaneous-functions.html    'LAST_DAY',    'LAST_INSERT_ID',    'LCASE',    'LEAST',    'LEFT',    'LENGTH',    'LINEFROMTEXT',             // LineFromText()    'LINEFROMWKB',              // LineFromWKB()    'LINESTRING',               // LineString()    'LINESTRINGFROMTEXT',       // LineStringFromText()    'LINESTRINGFROMWKB',        // LineStringFromWKB()    'LN',    'LOAD_FILE',    'LOCALTIME',    'LOCALTIMESTAMP',    'LOCATE',    'LOG',    'LOG10',    'LOG2',    'LOWER',    'LPAD',    'LTRIM',    'MAKEDATE',    'MAKETIME',    'MAKE_SET',    'MASTER_POS_WAIT',    'MAX',    'MBRCONTAINS',              // MBRContains()    'MBRDISJOINT',              // MBRDisjoint()    'MBREQUAL',                 // MBREqual()    'MBRINTERSECTS',            // MBRIntersects()    'MBROVERLAPS',              // MBROverlaps()    'MBRTOUCHES',               // MBRTouches()    'MBRWITHIN',                // MBRWithin()    'MD5',    'MICROSECOND',    'MID',    'MIN',    'MINUTE',    'MLINEFROMTEXT',            // MLineFromText()    'MLINEFROMWKB',             // MLineFromWKB()    'MOD',    'MONTH',    'MONTHNAME',    'MPOINTFROMTEXT',           // MPointFromText()    'MPOINTFROMWKB',            // MPointFromWKB()    'MPOLYFROMTEXT',            // MPolyFromText()    'MPOLYFROMWKB',             // MPolyFromWKB()    'MULTILINESTRING',          // MultiLineString()    'MULTILINESTRINGFROMTEXT',  // MultiLineStringFromText()    'MULTILINESTRINGFROMWKB',   // MultiLineStringFromWKB()    'MULTIPOINT',               // MultiPoint()    'MULTIPOINTFROMTEXT',       // MultiPointFromText()    'MULTIPOINTFROMWKB',        // MultiPointFromWKB()    'MULTIPOLYGON',             // MultiPolygon()    'MULTIPOLYGONFROMTEXT',     // MultiPolygonFromText()    'MULTIPOLYGONFROMWKB',      // MultiPolygonFromWKB()    'NAME_CONST',               // NAME_CONST()    'NOW',                      // NOW()    'NULLIF',    'NUMGEOMETRIES',            // NumGeometries() geometrycollection-property-functions.html    'NUMINTERIORRINGS',         // NumInteriorRings() polygon-property-functions.html    'NUMPOINTS',                // NumPoints() linestring-property-functions.html    'OCT',    'OCTET_LENGTH',    'OLD_PASSWORD',    'ORD',    'OVERLAPS',                 // Overlaps()    'PASSWORD',    'PERIOD_ADD',    'PERIOD_DIFF',    'PI',    'POINT',                    // Point()    'POINTFROMTEXT',            // PointFromText()    'POINTFROMWKB',             // PointFromWKB()    'POINTN',                   // PointN() inestring-property-functions.html    'POINTONSURFACE',           // PointOnSurface() multipolygon-property-functions.html    'POLYFROMTEXT',             // PolyFromText()    'POLYFROMWKB',              // PolyFromWKB()    'POLYGON',                  // Polygon()    'POLYGONFROMTEXT',          // PolygonFromText()    'POLYGONFROMWKB',           // PolygonFromWKB()    'POSITION',    'POW',    'POWER',    'QUARTER',    'QUOTE',    'RADIANS',    'RAND',    'RELATED',                  // Related()    'RELEASE_LOCK',    'REPEAT',    'REPLACE',                  // string-functions.html    'REVERSE',    'RIGHT',    'ROUND',    'ROW_COUNT',                // information-functions.html    'RPAD',    'RTRIM',    'SCHEMA',                   // information-functions.html    'SECOND',    'SEC_TO_TIME',    'SESSION_USER',    'SHA',    'SHA1',    'SIGN',    'SIN',    'SLEEP',                    // miscellaneous-functions.html    'SOUNDEX',    'SPACE',    'SQRT',    'SRID',                     // general-geometry-property-functions.html    'STARTPOINT',               // StartPoint() linestring-property-functions.html    'STD',    'STDDEV',    'STDDEV_POP',               // group-by-functions.html    'STDDEV_SAMP',              // group-by-functions.html    'STRCMP',    'STR_TO_DATE',    'SUBDATE',    'SUBSTR',    'SUBSTRING',    'SUBSTRING_INDEX',    'SUBTIME',    'SUM',    'SYMDIFFERENCE',            // SymDifference()    'SYSDATE',    'SYSTEM_USER',    'TAN',    'TIME',    'TIMEDIFF',    'TIMESTAMP',    'TIMESTAMPADD',    'TIMESTAMPDIFF',    'TIME_FORMAT',    'TIME_TO_SEC',    'TOUCHES',                  // Touches()    'TO_DAYS',    'TRIM',    'TRUNCATE',                 // mathematical-functions.html    'UCASE',    'UNCOMPRESS',               // string-functions.html    'UNCOMPRESSED_LENGTH',      // string-functions.html    'UNHEX',                    // string-functions.html    'UNIQUE_USERS',    'UNIX_TIMESTAMP',    'UPDATEXML',                // UpdateXML() xml-functions.html    'UPPER',    'USER',    'UTC_DATE',    'UTC_TIME',    'UTC_TIMESTAMP',    'UUID',                     // miscellaneous-functions.html    'VARIANCE',                 // group-by-functions.html    'VAR_POP',                  // group-by-functions.html    'VAR_SAMP',                 // group-by-functions.html    'VERSION',    'WEEK',    'WEEKDAY',    'WEEKOFYEAR',    'WITHIN',                   // Within()    'X',                        // point-property-functions.html    'Y',                        // point-property-functions.html    'YEAR',    'YEARWEEK');/** * @global array MySQL attributes */$PMA_SQPdata_column_attrib = array (    'ARCHIVE',          // Engine    'ASCII',    'AUTO_INCREMENT',    'BDB',              // Engine    'BERKELEYDB',       // Engine alias BDB    'BINARY',    'BLACKHOLE',        // Engine    'CSV',              // Engine    'DEFAULT',    'EXAMPLE',          // Engine    'FEDERATED',        // Engine    'HEAP',             // Engine    'INNOBASE',         // Engine alias InnoDB    'INNODB',           // Engine InnoDB    'ISAM',             // Engine    'MARIA',            // Engine    'MEMORY',           // Engine alias HEAP, but preferred    'MERGE',            // Engine    'MRG_ISAM',         // Engine    'MRG_MYISAM',       // Engine alias MERGE    'MYISAM',           // Engine MyISAM    'NATIONAL',    'NDB',              // Engine alias NDBCLUSTER    'NDBCLUSTER',       // Engine    'PRECISION',    'UNDEFINED',    'UNICODE',    'UNSIGNED',    'VARYING',    'ZEROFILL');/** * words that are reserved by MySQL and may not be used as identifiers without quotes * * @see http://dev.mysql.com/doc/refman/5.5/en/reserved-words.html * * @global array MySQL reserved words */$PMA_SQPdata_reserved_word = array (    'ACCESSIBLE',       // 5.1    'ACTION',    'ADD',    'AFTER',    'AGAINST',    'AGGREGATE',    'ALGORITHM',    'ALL',    'ALTER',    'ANALYSE',    'ANALYZE',    'AND',    'AS',    'ASC',    'AUTOCOMMIT',    'AUTO_INCREMENT',    'AVG_ROW_LENGTH',    'BACKUP',    'BEGIN',    'BETWEEN',    'BINLOG',    'BOTH',    'BY',    'CASCADE',    'CASE',    'CHANGE',    'CHANGED',    'CHARSET',    'CHECK',    'CHECKSUM',    'COLLATE',    'COLLATION',    'COLUMN',    'COLUMNS',    'COMMENT',    'COMMIT',    'COMMITTED',    'COMPRESSED',    'CONCURRENT',    'CONSTRAINT',    'CONTAINS',    'CONVERT',    'CREATE',    'CROSS',    'CURRENT_TIMESTAMP',    'DATABASE',    'DATABASES',    'DAY',    'DAY_HOUR',    'DAY_MINUTE',    'DAY_SECOND',    'DECLARE',    'DEFINER',    'DELAYED',    'DELAY_KEY_WRITE',    'DELETE',    'DESC',    'DESCRIBE',    'DETERMINISTIC',    'DISTINCT',    'DISTINCTROW',    'DIV',    'DO',    'DROP',    'DUMPFILE',    'DUPLICATE',    'DYNAMIC',    'ELSE',    'ENCLOSED',    'END',    'ENGINE',    'ENGINES',    'ESCAPE',    'ESCAPED',    'EVENTS',    'EXECUTE',    'EXISTS',    'EXPLAIN',    'EXTENDED',    'FALSE',    'FAST',    'FIELDS',    'FILE',    'FIRST',    'FIXED',    'FLUSH',    'FOR',    'FORCE',    'FOREIGN',    'FROM',    'FULL',    'FULLTEXT',    'FUNCTION',    'GEMINI',    'GEMINI_SPIN_RETRIES',    'GENERAL',    'GLOBAL',    'GRANT',    'GRANTS',    'GROUP',    'HAVING',    'HEAP',    'HIGH_PRIORITY',    'HOSTS',    'HOUR',    'HOUR_MINUTE',    'HOUR_SECOND',    'IDENTIFIED',    'IF',    'IGNORE',    'IGNORE_SERVER_IDS',    'IN',    'INDEX',    'INDEXES',    'INFILE',    'INNER',    'INSERT',    'INSERT_ID',    'INSERT_METHOD',    'INTERVAL',    'INTO',    'INVOKER',    'IS',    'ISOLATION',    'JOIN',    'KEY',    'KEYS',    'KILL',    'LAST_INSERT_ID',    'LEADING',    'LEFT',    'LIKE',    'LIMIT',    'LINEAR',               // 5.1    'LINES',    'LOAD',    'LOCAL',    'LOCK',    'LOCKS',    'LOGS',    'LOW_PRIORITY',    'MARIA',                // 5.1 ?    'MASTER_CONNECT_RETRY',    'MASTER_HEARTBEAT_PERIOD',    'MASTER_HOST',    'MASTER_LOG_FILE',    'MASTER_LOG_POS',    'MASTER_PASSWORD',    'MASTER_PORT',    'MASTER_USER',    'MATCH',    'MAXVALUE',    'MAX_CONNECTIONS_PER_HOUR',    'MAX_QUERIES_PER_HOUR',    'MAX_ROWS',    'MAX_UPDATES_PER_HOUR',    'MAX_USER_CONNECTIONS',    'MEDIUM',    'MERGE',    'MINUTE',    'MINUTE_SECOND',    'MIN_ROWS',    'MODE',    'MODIFY',    'MONTH',    'MRG_MYISAM',    'MYISAM',    'NAMES',    'NATURAL',    // 'NO' is not allowed in SQL-99 but is allowed in MySQL    //'NO',    'NOT',    'NULL',    'OFFSET',    'ON',    'OPEN',    'OPTIMIZE',    'OPTION',    'OPTIONALLY',    'OR',    'ORDER',    'OUTER',    'OUTFILE',    'PACK_KEYS',    'PAGE',                 // 5.1-maria ?    'PAGE_CHECKSUM',        // 5.1    'PARTIAL',    'PARTITION',            // 5.1    'PARTITIONS',           // 5.1    'PASSWORD',    'PRIMARY',    'PRIVILEGES',    'PROCEDURE',    'PROCESS',    'PROCESSLIST',    'PURGE',    'QUICK',    'RAID0',    'RAID_CHUNKS',    'RAID_CHUNKSIZE',    'RAID_TYPE',    'RANGE',                // 5.1    'READ',    'READ_ONLY',            // 5.1    'READ_WRITE',           // 5.1    'REFERENCES',    'REGEXP',    'RELOAD',    'RENAME',    'REPAIR',    'REPEATABLE',    'REPLACE',    'REPLICATION',    'RESET',    'RESIGNAL',    'RESTORE',    'RESTRICT',    'RETURN',    'RETURNS',    'REVOKE',    'RIGHT',    'RLIKE',    'ROLLBACK',    'ROW',    'ROWS',    'ROW_FORMAT',    'SECOND',    'SECURITY',    'SELECT',    'SEPARATOR',    'SERIALIZABLE',    'SESSION',    'SHARE',    'SHOW',    'SHUTDOWN',    'SIGNAL',    'SLAVE',    'SLOW',    'SONAME',    'SOUNDS',                   // string-functions.html    'SQL',    'SQL_AUTO_IS_NULL',    'SQL_BIG_RESULT',    'SQL_BIG_SELECTS',    'SQL_BIG_TABLES',    'SQL_BUFFER_RESULT',    'SQL_CACHE',    'SQL_CALC_FOUND_ROWS',    'SQL_LOG_BIN',    'SQL_LOG_OFF',    'SQL_LOG_UPDATE',    'SQL_LOW_PRIORITY_UPDATES',    'SQL_MAX_JOIN_SIZE',    'SQL_NO_CACHE',    'SQL_QUOTE_SHOW_CREATE',    'SQL_SAFE_UPDATES',    'SQL_SELECT_LIMIT',    'SQL_SLAVE_SKIP_COUNTER',    'SQL_SMALL_RESULT',    'SQL_WARNINGS',    'START',    'STARTING',    'STATUS',    'STOP',    'STORAGE',    'STRAIGHT_JOIN',    'STRING',    'STRIPED',    'SUPER',    'TABLE',    'TABLES',    'TEMPORARY',    'TERMINATED',    'THEN',    'TO',    'TRAILING',    'TRANSACTIONAL',    // 5.1 ?    'TRUE',    'TRUNCATE',    'TYPE',    'TYPES',    'UNCOMMITTED',    'UNION',    'UNIQUE',    'UNLOCK',    'UPDATE',    'USAGE',    'USE',    'USING',    'VALUES',    'VARIABLES',    'VIEW',    'WHEN',    'WHERE',    'WITH',    'WORK',    'WRITE',    'XOR',    'YEAR_MONTH');/** * words forbidden to be used as column or table name wihtout quotes * as seen in http://dev.mysql.com/doc/mysql/en/reserved-words.html * * @global array MySQL forbidden words */$PMA_SQPdata_forbidden_word = array (    'ACCESSIBLE',       // 5.1    'ACTION',    'ADD',    'AFTER',    'AGAINST',    'AGGREGATE',    'ALGORITHM',    'ALL',    'ALTER',    'ANALYZE',    'AND',    'ANY',    'AS',    'ASC',    'ASCII',    'ASENSITIVE',    'AUTO_INCREMENT',    'AVG',    'AVG_ROW_LENGTH',    'BACKUP',    'BDB',    'BEFORE',    'BEGIN',    'BERKELEYDB',    'BETWEEN',    'BIGINT',    'BINARY',    'BINLOG',    'BIT',    'BLOB',    'BOOL',    'BOOLEAN',    'BOTH',    'BTREE',    'BY',    'BYTE',    'CACHE',    'CALL',    'CASCADE',    'CASCADED',    'CASE',    'CHAIN',    'CHANGE',    'CHANGED',    'CHAR',    'CHARACTER',    'CHARSET',    'CHECK',    'CHECKSUM',    'CIPHER',    'CLOSE',    'COLLATE',    'COLLATION',    'COLUMN',    'COLUMNS',    'COMMENT',    'COMMIT',    'COMMITTED',    'COMPACT',    'COMPRESSED',    'CONCURRENT',    'CONDITION',    'CONNECTION',    'CONSISTENT',    'CONSTRAINT',    'CONTAINS',    'CONTINUE',    'CONVERT',    'CREATE',    'CROSS',    'CUBE',    'CURRENT_DATE',    'CURRENT_TIME',    'CURRENT_TIMESTAMP',    'CURRENT_USER',    'CURSOR',    'DATA',    'DATABASE',    'DATABASES',    'DATE',    'DATETIME',    'DAY',    'DAY_HOUR',    'DAY_MICROSECOND',    'DAY_MINUTE',    'DAY_SECOND',    'DEALLOCATE',    'DEC',    'DECIMAL',    'DECLARE',    'DEFAULT',    'DEFINER',    'DELAYED',    'DELAY_KEY_WRITE',    'DELETE',    'DESC',    'DESCRIBE',    'DES_KEY_FILE',    'DETERMINISTIC',    'DIRECTORY',    'DISABLE',    'DISCARD',    'DISTINCT',    'DISTINCTROW',    'DIV',    'DO',    'DOUBLE',    'DROP',    'DUAL',    'DUMPFILE',    'DUPLICATE',    'DYNAMIC',    'EACH',    'ELSE',    'ELSEIF',    'ENABLE',    'ENCLOSED',    'END',    'ENGINE',    'ENGINES',    'ENUM',    'ERRORS',    'ESCAPE',    'ESCAPED',    'EVENTS',    'EXECUTE',    'EXISTS',    'EXIT',    'EXPANSION',    'EXPLAIN',    'EXTENDED',    'FALSE',    'FAST',    'FETCH',    'FIELDS',    'FILE',    'FIRST',    'FIXED',    'FLOAT',    'FLOAT4',    'FLOAT8',    'FLUSH',    'FOR',    'FORCE',    'FOREIGN',    'FOUND',    'FRAC_SECOND',    'FROM',    'FULL',    'FULLTEXT',    'FUNCTION',    'GEOMETRY',    'GEOMETRYCOLLECTION',    'GET_FORMAT',    'GLOBAL',    'GOTO',    'GRANT',    'GRANTS',    'GROUP',    'HANDLER',    'HASH',    'HAVING',    'HELP',    'HIGH_PRIORITY',    'HOSTS',    'HOUR',    'HOUR_MICROSECOND',    'HOUR_MINUTE',    'HOUR_SECOND',    'IDENTIFIED',    'IF',    'IGNORE',    'IMPORT',    'IN',    'INDEX',    'INDEXES',    'INFILE',    'INNER',    'INNOBASE',    'INNODB',    'INOUT',    'INSENSITIVE',    'INSERT',    'INSERT_METHOD',    'INT',    'INT1',    'INT2',    'INT3',    'INT4',    'INT8',    'INTEGER',    'INTERVAL',    'INTO',    'INVOKER',    'IO_THREAD',    'IS',    'ISOLATION',    'ISSUER',    'ITERATE',    'JOIN',    'KEY',    'KEYS',    'KILL',    'LABEL',    'LANGUAGE',    'LAST',    'LEADING',    'LEAVE',    'LEAVES',    'LEFT',    'LIKE',    'LIMIT',    'LINEAR',               // 5.1    'LINES',    'LINESTRING',    'LOAD',    'LOCAL',    'LOCALTIME',    'LOCALTIMESTAMP',    'LOCK',    'LOCKS',    'LOGS',    'LONG',    'LONGBLOB',    'LONGTEXT',    'LOOP',    'LOW_PRIORITY',    'MASTER',    'MASTER_CONNECT_RETRY',    'MASTER_HOST',    'MASTER_LOG_FILE',    'MASTER_LOG_POS',    'MASTER_PASSWORD',    'MASTER_PORT',    'MASTER_SERVER_ID',    'MASTER_SSL',    'MASTER_SSL_CA',    'MASTER_SSL_CAPATH',    'MASTER_SSL_CERT',    'MASTER_SSL_CIPHER',    'MASTER_SSL_KEY',    'MASTER_USER',    'MATCH',    'MAX_CONNECTIONS_PER_HOUR',    'MAX_QUERIES_PER_HOUR',    'MAX_ROWS',    'MAX_UPDATES_PER_HOUR',    'MAX_USER_CONNECTIONS',    'MEDIUM',    'MEDIUMBLOB',    'MEDIUMINT',    'MEDIUMTEXT',    'MERGE',    'MICROSECOND',    'MIDDLEINT',    'MIGRATE',    'MINUTE',    'MINUTE_MICROSECOND',    'MINUTE_SECOND',    'MIN_ROWS',    'MOD',    'MODE',    'MODIFIES',    'MODIFY',    'MONTH',    'MULTILINESTRING',    'MULTIPOINT',    'MULTIPOLYGON',    'MUTEX',    'NAME',    'NAMES',    'NATIONAL',    'NATURAL',    'NCHAR',    'NDB',    'NDBCLUSTER',    'NEW',    'NEXT',    'NO',    'NONE',    'NOT',    'NO_WRITE_TO_BINLOG',    'NULL',    'NUMERIC',    'NVARCHAR',    'OFFSET',    'OLD_PASSWORD',    'ON',    'ONE',    'ONE_SHOT',    'OPEN',    'OPTIMIZE',    'OPTION',    'OPTIONALLY',    'OR',    'ORDER',    'OUT',    'OUTER',    'OUTFILE',    'PACK_KEYS',    'PARTIAL',    'PASSWORD',    'PHASE',    'POINT',    'POLYGON',    'PRECISION',    'PREPARE',    'PREV',    'PRIMARY',    'PRIVILEGES',    'PROCEDURE',    'PROCESSLIST',    'PURGE',    'QUARTER',    'QUERY',    'QUICK',    'RAID0',    'RAID_CHUNKS',    'RAID_CHUNKSIZE',    'RAID_TYPE',    'RANGE',                // 5.1    'READ',    'READS',    'READ_ONLY',            // 5.1    'READ_WRITE',           // 5.1    'REAL',    'RECOVER',    'REDUNDANT',    'REFERENCES',    'REGEXP',    'RELAY_LOG_FILE',    'RELAY_LOG_POS',    'RELAY_THREAD',    'RELEASE',    'RELOAD',    'RENAME',    'REPAIR',    'REPEAT',    'REPEATABLE',    'REPLACE',    'REPLICATION',    'REQUIRE',    'RESET',    'RESTORE',    'RESTRICT',    'RESUME',    'RETURN',    'RETURNS',    'REVOKE',    'RIGHT',    'RLIKE',    'ROLLBACK',    'ROLLUP',    'ROUTINE',    'ROW',    'ROWS',    'ROW_FORMAT',    'RTREE',    'SAVEPOINT',    'SCHEMA',    'SCHEMAS',    'SECOND',    'SECOND_MICROSECOND',    'SECURITY',    'SELECT',    'SENSITIVE',    'SEPARATOR',    'SERIAL',    'SERIALIZABLE',    'SESSION',    'SET',    'SHARE',    'SHOW',    'SHUTDOWN',    'SIGNED',    'SIMPLE',    'SLAVE',    'SMALLINT',    'SNAPSHOT',    'SOME',    'SONAME',    'SOUNDS',    'SPATIAL',    'SPECIFIC',    'SQL',    'SQLEXCEPTION',    'SQLSTATE',    'SQLWARNING',    'SQL_BIG_RESULT',    'SQL_BUFFER_RESULT',    'SQL_CACHE',    'SQL_CALC_FOUND_ROWS',    'SQL_NO_CACHE',    'SQL_SMALL_RESULT',    'SQL_THREAD',    'SQL_TSI_DAY',    'SQL_TSI_FRAC_SECOND',    'SQL_TSI_HOUR',    'SQL_TSI_MINUTE',    'SQL_TSI_MONTH',    'SQL_TSI_QUARTER',    'SQL_TSI_SECOND',    'SQL_TSI_WEEK',    'SQL_TSI_YEAR',    'SSL',    'START',    'STARTING',    'STATUS',    'STOP',    'STORAGE',    'STRAIGHT_JOIN',    'STRING',    'STRIPED',    'SUBJECT',    'SUPER',    'SUSPEND',    'TABLE',    'TABLES',    'TABLESPACE',    'TEMPORARY',    'TEMPTABLE',    'TERMINATED',    'TEXT',    'THEN',    'TIME',    'TIMESTAMP',    'TIMESTAMPADD',    'TIMESTAMPDIFF',    'TINYBLOB',    'TINYINT',    'TINYTEXT',    'TO',    'TRAILING',    'TRANSACTION',    'TRIGGER',    'TRIGGERS',    'TRUE',    'TRUNCATE',    'TYPE',    'TYPES',    'UNCOMMITTED',    'UNDEFINED',    'UNDO',    'UNICODE',    'UNION',    'UNIQUE',    'UNKNOWN',    'UNLOCK',    'UNSIGNED',    'UNTIL',    'UPDATE',    'USAGE',    'USE',    'USER',    'USER_RESOURCES',    'USE_FRM',    'USING',    'UTC_DATE',    'UTC_TIME',    'UTC_TIMESTAMP',    'VALUE',    'VALUES',    'VARBINARY',    'VARCHAR',    'VARCHARACTER',    'VARIABLES',    'VARYING',    'VIEW',    'WARNINGS',    'WEEK',    'WHEN',    'WHERE',    'WHILE',    'WITH',    'WORK',    'WRITE',    'X509',    'XA',    'XOR',    'YEAR',    'YEAR_MONTH',    'ZEROFILL');/** * the MySQL column/data types * * @see http://dev.mysql.com/doc/refman/5.1/en/data-types.html * @see http://dev.mysql.com/doc/refman/5.1/en/mysql-spatial-datatypes.html * * @global array MySQL column types */$PMA_SQPdata_column_type = array (    'BIGINT',    'BINARY',    'BIT',    'BLOB',    'BOOL',    'BOOLEAN',              // numeric-type-overview.html    'CHAR',    'CHARACTER',    'DATE',    'DATETIME',    'DEC',    'DECIMAL',    'DOUBLE',    'ENUM',    'FLOAT',    'FLOAT4',    'FLOAT8',    'GEOMETRY',             // spatial    'GEOMETRYCOLLECTION',   // spatial    'INT',    'INT1',    'INT2',    'INT3',    'INT4',    'INT8',    'INTEGER',    'LINESTRING',           // spatial    'LONG',    'LONGBLOB',    'LONGTEXT',    'MEDIUMBLOB',    'MEDIUMINT',    'MEDIUMTEXT',    'MIDDLEINT',    'MULTILINESTRING',      // spatial    'MULTIPOINT',           // spatial    'MULTIPOLYGON',         // spatial    'NCHAR',    'NUMERIC',    'POINT',                // spatial    'POLYGON',              // spatial    'REAL',    'SERIAL',               // alias for BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY    'SET',    'SMALLINT',    'TEXT',    'TIME',    'TIMESTAMP',    'TINYBLOB',    'TINYINT',    'TINYTEXT',    'VARBINARY',    'VARCHAR',    'YEAR');/** * Documentation links for operators. */$PMA_SQPdata_operators_docs = array(   '!=' => array('link' => 'comparison-operators','anchor' => 'operator_not-equal'),   '<>' => array('link' => 'comparison-operators','anchor' => 'operator_not-equal'),   '!' => array('link' => 'logical-operators','anchor' => 'operator_not'),   '||' => array('link' => 'logical-operators','anchor' => 'operator_or'),   '+' => array('link' => 'arithmetic-functions','anchor' => 'operator_plus'),   '>>' => array('link' => 'bit-functions','anchor' => 'operator_right-shift'),   '-' => array('link' => 'arithmetic-functions','anchor' => 'operator_minus'),   '*' => array('link' => 'arithmetic-functions','anchor' => 'operator_times'),   '&&' => array('link' => 'logical-operators','anchor' => 'operator_and'),   '&' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-and'),   '~' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-invert'),   '|' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-or'),   '^' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-xor'),   '=' => array('link' => 'assignment-operators','anchor' => 'operator_assign-equal'),   ':=' => array('link' => 'assignment-operators','anchor' => 'operator_assign-value'),   '/' => array('link' => 'arithmetic-functions','anchor' => 'operator_divide'),   '<=>' => array('link' => 'comparison-operators','anchor' => 'operator_equal-to'),   '=' => array('link' => 'comparison-operators','anchor' => 'operator_equal'),   '>=' => array('link' => 'comparison-operators','anchor' => 'operator_greater-than-or-equal'),   '>' => array('link' => 'comparison-operators','anchor' => 'operator_greater-than'),   '<<' => array('link' => 'bit-functions','anchor' => 'operator_left-shift'),   '<=' => array('link' => 'comparison-operators','anchor' => 'operator_less-than-or-equal'),   '<' => array('link' => 'comparison-operators','anchor' => 'operator_less-than'),   '%' => array('link' => 'arithmetic-functions','anchor' => 'operator_mod'));/** * Documentation links for functions. */$PMA_SQPdata_functions_docs = array(   'ABS' => array('link' => 'mathematical-functions','anchor' => 'function_abs'),   'ACOS' => array('link' => 'mathematical-functions','anchor' => 'function_acos'),   'ADDDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_adddate'),   'ADDTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_addtime'),   'AES_DECRYPT' => array('link' => 'encryption-functions','anchor' => 'function_aes_decrypt'),   'AES_ENCRYPT' => array('link' => 'encryption-functions','anchor' => 'function_aes_encrypt'),   'AND' => array('link' => 'logical-operators','anchor' => 'operator_and'),   'ASCII' => array('link' => 'string-functions','anchor' => 'function_ascii'),   'ASIN' => array('link' => 'mathematical-functions','anchor' => 'function_asin'),   'ATAN2' => array('link' => 'mathematical-functions','anchor' => 'function_atan2'),   'ATAN' => array('link' => 'mathematical-functions','anchor' => 'function_atan2'),   'ATAN' => array('link' => 'mathematical-functions','anchor' => 'function_atan'),   'AVG' => array('link' => 'group-by-functions','anchor' => 'function_avg'),   'BENCHMARK' => array('link' => 'information-functions','anchor' => 'function_benchmark'),   'BIN' => array('link' => 'string-functions','anchor' => 'function_bin'),   'BINARY' => array('link' => 'cast-functions','anchor' => 'operator_binary'),   'BIT_AND' => array('link' => 'group-by-functions','anchor' => 'function_bit_and'),   'BIT_COUNT' => array('link' => 'bit-functions','anchor' => 'function_bit_count'),   'BIT_LENGTH' => array('link' => 'string-functions','anchor' => 'function_bit_length'),   'BIT_OR' => array('link' => 'group-by-functions','anchor' => 'function_bit_or'),   'BIT_XOR' => array('link' => 'group-by-functions','anchor' => 'function_bit_xor'),   'CASE' => array('link' => 'control-flow-functions','anchor' => 'operator_case'),   'CAST' => array('link' => 'cast-functions','anchor' => 'function_cast'),   'CEIL' => array('link' => 'mathematical-functions','anchor' => 'function_ceil'),   'CEILING' => array('link' => 'mathematical-functions','anchor' => 'function_ceiling'),   'CHAR_LENGTH' => array('link' => 'string-functions','anchor' => 'function_char_length'),   'CHAR' => array('link' => 'string-functions','anchor' => 'function_char'),   'CHARACTER_LENGTH' => array('link' => 'string-functions','anchor' => 'function_character_length'),   'CHARSET' => array('link' => 'information-functions','anchor' => 'function_charset'),   'COALESCE' => array('link' => 'comparison-operators','anchor' => 'function_coalesce'),   'COERCIBILITY' => array('link' => 'information-functions','anchor' => 'function_coercibility'),   'COLLATION' => array('link' => 'information-functions','anchor' => 'function_collation'),   'COMPRESS' => array('link' => 'encryption-functions','anchor' => 'function_compress'),   'CONCAT_WS' => array('link' => 'string-functions','anchor' => 'function_concat_ws'),   'CONCAT' => array('link' => 'string-functions','anchor' => 'function_concat'),   'CONNECTION_ID' => array('link' => 'information-functions','anchor' => 'function_connection_id'),   'CONV' => array('link' => 'mathematical-functions','anchor' => 'function_conv'),   'CONVERT_TZ' => array('link' => 'date-and-time-functions','anchor' => 'function_convert_tz'),   'Convert' => array('link' => 'cast-functions','anchor' => 'function_convert'),   'COS' => array('link' => 'mathematical-functions','anchor' => 'function_cos'),   'COT' => array('link' => 'mathematical-functions','anchor' => 'function_cot'),   'COUNT' => array('link' => 'group-by-functions','anchor' => 'function_count'),   'CRC32' => array('link' => 'mathematical-functions','anchor' => 'function_crc32'),   'CURDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_curdate'),   'CURRENT_DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_current_date'),   'CURRENT_TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_current_time'),   'CURRENT_TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_current_timestamp'),   'CURRENT_USER' => array('link' => 'information-functions','anchor' => 'function_current_user'),   'CURTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_curtime'),   'DATABASE' => array('link' => 'information-functions','anchor' => 'function_database'),   'DATE_ADD' => array('link' => 'date-and-time-functions','anchor' => 'function_date_add'),   'DATE_FORMAT' => array('link' => 'date-and-time-functions','anchor' => 'function_date_format'),   'DATE_SUB' => array('link' => 'date-and-time-functions','anchor' => 'function_date_sub'),   'DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_date'),   'DATEDIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_datediff'),   'DAY' => array('link' => 'date-and-time-functions','anchor' => 'function_day'),   'DAYNAME' => array('link' => 'date-and-time-functions','anchor' => 'function_dayname'),   'DAYOFMONTH' => array('link' => 'date-and-time-functions','anchor' => 'function_dayofmonth'),   'DAYOFWEEK' => array('link' => 'date-and-time-functions','anchor' => 'function_dayofweek'),   'DAYOFYEAR' => array('link' => 'date-and-time-functions','anchor' => 'function_dayofyear'),   'DECLARE' => array('link' => 'declare', 'anchor' => 'declare'),   'DECODE' => array('link' => 'encryption-functions','anchor' => 'function_decode'),   'DEFAULT' => array('link' => 'miscellaneous-functions','anchor' => 'function_default'),   'DEGREES' => array('link' => 'mathematical-functions','anchor' => 'function_degrees'),   'DES_DECRYPT' => array('link' => 'encryption-functions','anchor' => 'function_des_decrypt'),   'DES_ENCRYPT' => array('link' => 'encryption-functions','anchor' => 'function_des_encrypt'),   'DIV' => array('link' => 'arithmetic-functions','anchor' => 'operator_div'),   'ELT' => array('link' => 'string-functions','anchor' => 'function_elt'),   'ENCODE' => array('link' => 'encryption-functions','anchor' => 'function_encode'),   'ENCRYPT' => array('link' => 'encryption-functions','anchor' => 'function_encrypt'),   'EXP' => array('link' => 'mathematical-functions','anchor' => 'function_exp'),   'EXPORT_SET' => array('link' => 'string-functions','anchor' => 'function_export_set'),   'EXTRACT' => array('link' => 'date-and-time-functions','anchor' => 'function_extract'),   'ExtractValue' => array('link' => 'xml-functions','anchor' => 'function_extractvalue'),   'FIELD' => array('link' => 'string-functions','anchor' => 'function_field'),   'FIND_IN_SET' => array('link' => 'string-functions','anchor' => 'function_find_in_set'),   'FLOOR' => array('link' => 'mathematical-functions','anchor' => 'function_floor'),   'FORMAT' => array('link' => 'string-functions','anchor' => 'function_format'),   'FOUND_ROWS' => array('link' => 'information-functions','anchor' => 'function_found_rows'),   'FROM_DAYS' => array('link' => 'date-and-time-functions','anchor' => 'function_from_days'),   'FROM_UNIXTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_from_unixtime'),   'GET_FORMAT' => array('link' => 'date-and-time-functions','anchor' => 'function_get_format'),   'GET_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_get_lock'),   'GREATEST' => array('link' => 'comparison-operators','anchor' => 'function_greatest'),   'GROUP_CONCAT' => array('link' => 'group-by-functions','anchor' => 'function_group_concat'),   'HEX' => array('link' => 'string-functions','anchor' => 'function_hex'),   'HOUR' => array('link' => 'date-and-time-functions','anchor' => 'function_hour'),   'IF' => array('link' => 'control-flow-functions','anchor' => 'function_if'),   'IFNULL' => array('link' => 'control-flow-functions','anchor' => 'function_ifnull'),   'IN' => array('link' => 'comparison-operators','anchor' => 'function_in'),   'INET_ATON' => array('link' => 'miscellaneous-functions','anchor' => 'function_inet_aton'),   'INET_NTOA' => array('link' => 'miscellaneous-functions','anchor' => 'function_inet_ntoa'),   'INSERT' => array('link' => 'string-functions','anchor' => 'function_insert'),   'INSTR' => array('link' => 'string-functions','anchor' => 'function_instr'),   'INTERVAL' => array('link' => 'comparison-operators','anchor' => 'function_interval'),   'IS_FREE_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_is_free_lock'),   'IS_USED_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_is_used_lock'),   'IS' => array('link' => 'comparison-operators','anchor' => 'operator_is'),   'ISNULL' => array('link' => 'comparison-operators','anchor' => 'function_isnull'),   'LAST_DAY' => array('link' => 'date-and-time-functions','anchor' => 'function_last_day'),   'LAST_INSERT_ID' => array('link' => 'information-functions','anchor' => 'function_last_insert_id'),   'LCASE' => array('link' => 'string-functions','anchor' => 'function_lcase'),   'LEAST' => array('link' => 'comparison-operators','anchor' => 'function_least'),   'LEFT' => array('link' => 'string-functions','anchor' => 'function_left'),   'LENGTH' => array('link' => 'string-functions','anchor' => 'function_length'),   'LIKE' => array('link' => 'string-comparison-functions','anchor' => 'operator_like'),   'LN' => array('link' => 'mathematical-functions','anchor' => 'function_ln'),   'LOAD_FILE' => array('link' => 'string-functions','anchor' => 'function_load_file'),   'LOCALTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_localtime'),   'LOCALTIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_localtimestamp'),   'LOCATE' => array('link' => 'string-functions','anchor' => 'function_locate'),   'LOG10' => array('link' => 'mathematical-functions','anchor' => 'function_log10'),   'LOG2' => array('link' => 'mathematical-functions','anchor' => 'function_log2'),   'LOG' => array('link' => 'mathematical-functions','anchor' => 'function_log'),   'LOWER' => array('link' => 'string-functions','anchor' => 'function_lower'),   'LPAD' => array('link' => 'string-functions','anchor' => 'function_lpad'),   'LTRIM' => array('link' => 'string-functions','anchor' => 'function_ltrim'),   'MAKE_SET' => array('link' => 'string-functions','anchor' => 'function_make_set'),   'MAKEDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_makedate'),   'MAKETIME' => array('link' => 'date-and-time-functions','anchor' => 'function_maketime'),   'MASTER_POS_WAIT' => array('link' => 'miscellaneous-functions','anchor' => 'function_master_pos_wait'),   'MATCH' => array('link' => 'fulltext-search','anchor' => 'function_match'),   'MAX' => array('link' => 'group-by-functions','anchor' => 'function_max'),   'MD5' => array('link' => 'encryption-functions','anchor' => 'function_md5'),   'MICROSECOND' => array('link' => 'date-and-time-functions','anchor' => 'function_microsecond'),   'MID' => array('link' => 'string-functions','anchor' => 'function_mid'),   'MIN' => array('link' => 'group-by-functions','anchor' => 'function_min'),   'MINUTE' => array('link' => 'date-and-time-functions','anchor' => 'function_minute'),   'MOD' => array('link' => 'mathematical-functions','anchor' => 'function_mod'),   'MONTH' => array('link' => 'date-and-time-functions','anchor' => 'function_month'),   'MONTHNAME' => array('link' => 'date-and-time-functions','anchor' => 'function_monthname'),   'NAME_CONST' => array('link' => 'miscellaneous-functions','anchor' => 'function_name_const'),   'NOT' => array('link' => 'logical-operators','anchor' => 'operator_not'),   'NOW' => array('link' => 'date-and-time-functions','anchor' => 'function_now'),   'NULLIF' => array('link' => 'control-flow-functions','anchor' => 'function_nullif'),   'OCT' => array('link' => 'mathematical-functions','anchor' => 'function_oct'),   'OCTET_LENGTH' => array('link' => 'string-functions','anchor' => 'function_octet_length'),   'OLD_PASSWORD' => array('link' => 'encryption-functions','anchor' => 'function_old_password'),   'OR' => array('link' => 'logical-operators','anchor' => 'operator_or'),   'ORD' => array('link' => 'string-functions','anchor' => 'function_ord'),   'PASSWORD' => array('link' => 'encryption-functions','anchor' => 'function_password'),   'PERIOD_ADD' => array('link' => 'date-and-time-functions','anchor' => 'function_period_add'),   'PERIOD_DIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_period_diff'),   'PI' => array('link' => 'mathematical-functions','anchor' => 'function_pi'),   'POSITION' => array('link' => 'string-functions','anchor' => 'function_position'),   'POW' => array('link' => 'mathematical-functions','anchor' => 'function_pow'),   'POWER' => array('link' => 'mathematical-functions','anchor' => 'function_power'),   'QUARTER' => array('link' => 'date-and-time-functions','anchor' => 'function_quarter'),   'QUOTE' => array('link' => 'string-functions','anchor' => 'function_quote'),   'RADIANS' => array('link' => 'mathematical-functions','anchor' => 'function_radians'),   'RAND' => array('link' => 'mathematical-functions','anchor' => 'function_rand'),   'REGEXP' => array('link' => 'regexp','anchor' => 'operator_regexp'),   'RELEASE_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_release_lock'),   'REPEAT' => array('link' => 'string-functions','anchor' => 'function_repeat'),   'REPLACE' => array('link' => 'string-functions','anchor' => 'function_replace'),   'REVERSE' => array('link' => 'string-functions','anchor' => 'function_reverse'),   'RIGHT' => array('link' => 'string-functions','anchor' => 'function_right'),   'RLIKE' => array('link' => 'regexp','anchor' => 'operator_rlike'),   'ROUND' => array('link' => 'mathematical-functions','anchor' => 'function_round'),   'ROW_COUNT' => array('link' => 'information-functions','anchor' => 'function_row_count'),   'RPAD' => array('link' => 'string-functions','anchor' => 'function_rpad'),   'RTRIM' => array('link' => 'string-functions','anchor' => 'function_rtrim'),   'SCHEMA' => array('link' => 'information-functions','anchor' => 'function_schema'),   'SEC_TO_TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_sec_to_time'),   'SECOND' => array('link' => 'date-and-time-functions','anchor' => 'function_second'),   'SESSION_USER' => array('link' => 'information-functions','anchor' => 'function_session_user'),   'SHA' => array('link' => 'encryption-functions','anchor' => 'function_sha1'),   'SHA1' => array('link' => 'encryption-functions','anchor' => 'function_sha1'),   'SIGN' => array('link' => 'mathematical-functions','anchor' => 'function_sign'),   'SIN' => array('link' => 'mathematical-functions','anchor' => 'function_sin'),   'SLEEP' => array('link' => 'miscellaneous-functions','anchor' => 'function_sleep'),   'SOUNDEX' => array('link' => 'string-functions','anchor' => 'function_soundex'),   'SPACE' => array('link' => 'string-functions','anchor' => 'function_space'),   'SQRT' => array('link' => 'mathematical-functions','anchor' => 'function_sqrt'),   'STD' => array('link' => 'group-by-functions','anchor' => 'function_std'),   'STDDEV_POP' => array('link' => 'group-by-functions','anchor' => 'function_stddev_pop'),   'STDDEV_SAMP' => array('link' => 'group-by-functions','anchor' => 'function_stddev_samp'),   'STDDEV' => array('link' => 'group-by-functions','anchor' => 'function_stddev'),   'STR_TO_DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_str_to_date'),   'STRCMP' => array('link' => 'string-comparison-functions','anchor' => 'function_strcmp'),   'SUBDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_subdate'),   'SUBSTR' => array('link' => 'string-functions','anchor' => 'function_substr'),   'SUBSTRING_INDEX' => array('link' => 'string-functions','anchor' => 'function_substring_index'),   'SUBSTRING' => array('link' => 'string-functions','anchor' => 'function_substring'),   'SUBTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_subtime'),   'SUM' => array('link' => 'group-by-functions','anchor' => 'function_sum'),   'SYSDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_sysdate'),   'SYSTEM_USER' => array('link' => 'information-functions','anchor' => 'function_system_user'),   'TAN' => array('link' => 'mathematical-functions','anchor' => 'function_tan'),   'TIME_FORMAT' => array('link' => 'date-and-time-functions','anchor' => 'function_time_format'),   'TIME_TO_SEC' => array('link' => 'date-and-time-functions','anchor' => 'function_time_to_sec'),   'TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_time'),   'TIMEDIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_timediff'),   'TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_timestamp'),   'TIMESTAMPADD' => array('link' => 'date-and-time-functions','anchor' => 'function_timestampadd'),   'TIMESTAMPDIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_timestampdiff'),   'TO_DAYS' => array('link' => 'date-and-time-functions','anchor' => 'function_to_days'),   'TRIM' => array('link' => 'string-functions','anchor' => 'function_trim'),   'TRUNCATE' => array('link' => 'mathematical-functions','anchor' => 'function_truncate'),   'UCASE' => array('link' => 'string-functions','anchor' => 'function_ucase'),   'UNCOMPRESS' => array('link' => 'encryption-functions','anchor' => 'function_uncompress'),   'UNCOMPRESSED_LENGTH' => array('link' => 'encryption-functions','anchor' => 'function_uncompressed_length'),   'UNHEX' => array('link' => 'string-functions','anchor' => 'function_unhex'),   'UNIX_TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_unix_timestamp'),   'UpdateXML' => array('link' => 'xml-functions','anchor' => 'function_updatexml'),   'UPPER' => array('link' => 'string-functions','anchor' => 'function_upper'),   'USER' => array('link' => 'information-functions','anchor' => 'function_user'),   'UTC_DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_utc_date'),   'UTC_TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_utc_time'),   'UTC_TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_utc_timestamp'),   'UUID_SHORT' => array('link' => 'miscellaneous-functions','anchor' => 'function_uuid_short'),   'UUID' => array('link' => 'miscellaneous-functions','anchor' => 'function_uuid'),   'VALUES' => array('link' => 'miscellaneous-functions','anchor' => 'function_values'),   'VAR_POP' => array('link' => 'group-by-functions','anchor' => 'function_var_pop'),   'VAR_SAMP' => array('link' => 'group-by-functions','anchor' => 'function_var_samp'),   'VARIANCE' => array('link' => 'group-by-functions','anchor' => 'function_variance'),   'VERSION' => array('link' => 'information-functions','anchor' => 'function_version'),   'WEEK' => array('link' => 'date-and-time-functions','anchor' => 'function_week'),   'WEEKDAY' => array('link' => 'date-and-time-functions','anchor' => 'function_weekday'),   'WEEKOFYEAR' => array('link' => 'date-and-time-functions','anchor' => 'function_weekofyear'),   'XOR' => array('link' => 'logical-operators','anchor' => 'operator_xor'),   'YEAR' => array('link' => 'date-and-time-functions','anchor' => 'function_year'),   'YEARWEEK' => array('link' => 'date-and-time-functions','anchor' => 'function_yearweek'),   'SOUNDS_LIKE' => array('link' => 'string-functions','anchor' => 'operator_sounds-like'),   'IS_NOT_NULL' => array('link' => 'comparison-operators','anchor' => 'operator_is-not-null'),   'IS_NOT' => array('link' => 'comparison-operators','anchor' => 'operator_is-not'),   'IS_NULL' => array('link' => 'comparison-operators','anchor' => 'operator_is-null'),   'NOT_LIKE' => array('link' => 'string-comparison-functions','anchor' => 'operator_not-like'),   'NOT_REGEXP' => array('link' => 'regexp','anchor' => 'operator_not-regexp'),   'COUNT_DISTINCT' => array('link' => 'group-by-functions','anchor' => 'function_count-distinct'),   'NOT_IN' => array('link' => 'comparison-operators','anchor' => 'function_not-in'));?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * the PBMS daemon * @package PhpMyAdmin-Engines */class PMA_StorageEngine_pbms extends PMA_StorageEngine{    /**     * returns array with variable names dedicated to PBMS daemon     *     * @return  array   variable names     */    function engine_init()    {        $this->engine  = "PBMS";        $this->title   = "PrimeBase Media Streaming Daemon";        $this->comment = "Provides BLOB streaming service for storage engines,";        $this->support = PMA_ENGINE_SUPPORT_YES;    }    function getVariables()    {        return array(            'pbms_garbage_threshold' => array(                'title' => __('Garbage Threshold'),                'desc'  => __('The percentage of garbage in a repository file before it is compacted.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_port' => array(                'title' => __('Port'),                'desc'  => __('The port for the PBMS stream-based communications. Setting this value to 0 will disable HTTP communication with the daemon.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_repository_threshold' => array(                'title' => __('Repository Threshold'),                'desc'  => __('The maximum size of a BLOB repository file. You may use Kb, MB or GB to indicate the unit of the value. A value in bytes is assumed when no unit is specified.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_temp_blob_timeout' => array(                'title' => __('Temp Blob Timeout'),                'desc'  => __('The timeout, in seconds, for temporary BLOBs. Uploaded BLOB data is removed after this time, unless they are referenced by a record in the database.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_temp_log_threshold' => array(                'title' => __('Temp Log Threshold'),                'desc'  => __('The maximum size of a temporary BLOB log file. You may use Kb, MB or GB to indicate the unit of the value. A value in bytes is assumed when no unit is specified.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_max_keep_alive' => array(                'title' => __('Max Keep Alive'),                'desc'  => __('The timeout for inactive connection with the keep-alive flag set. After this time the connection will be closed. The time-out is in milliseconds (1/1000).'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),            'pbms_http_metadata_headers' => array(                'title' => __('Metadata Headers'),                'desc'  => __('A ":" delimited list of metadata headers to be used to initialize the pbms_metadata_header table when a database is created.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_PLAINTEXT            ),        );    }    //--------------------    function getInfoPages()    {        $pages = array();        $pages['Documentation'] = __('Documentation');        return $pages;    }    //--------------------    function getPage($id)    {        if (! array_key_exists($id, $this->getInfoPages())) {            return false;        }        $id = 'getPage' . $id;        return $this->$id();    }    function getPageConfigure()    {    }    function getPageDocumentation()    {        $output = '<p>'        . sprintf(__('Documentation and further information about PBMS can be found on %sThe PrimeBase Media Streaming home page%s.'), '<a href="' . PMA_linkURL('http://www.blobstreaming.org/') . '" target="_blank">', '</a>')        . '</p>' . "\n"        . '<h3>' . __('Related Links') . '</h3>' . "\n"        . '<ul>' . "\n"        . '<li><a href="' . PMA_linkURL('http://bpbdev.blogspot.com/') . '" target="_blank">' . __('The PrimeBase Media Streaming Blog by Barry Leslie') . '</a></li>' . "\n"        . '<li><a href="' . PMA_linkURL('http://www.primebase.com/xt') . '" target="_blank">' . __('PrimeBase XT Home Page') . '</a></li>' . "\n"        . '</ul>' . "\n";        return $output;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Designer *//** * */require_once './libraries/common.inc.php';// not understandrequire_once './libraries/header_http.inc.php';$GLOBALS['PMD']['STYLE']          = 'default';$cfgRelation = PMA_getRelationsParam();$GLOBALS['script_display_field']    = '<script type="text/javascript">' . "\n" .    '// <![CDATA[' . "\n" .    'var display_field = new Array();' . "\n";/** * retrieves table info and stores it in $GLOBALS['PMD'] * */function get_tabs(){    $GLOBALS['PMD']['TABLE_NAME'] = array();// that foreach no error    $GLOBALS['PMD']['OWNER'] = array();    $GLOBALS['PMD']['TABLE_NAME_SMALL'] = array();    $tables = PMA_DBI_get_tables_full($GLOBALS['db']);    // seems to be needed later    PMA_DBI_select_db($GLOBALS['db']);    $i = 0;    foreach ($tables as $one_table) {        $GLOBALS['PMD']['TABLE_NAME'][$i] = $GLOBALS['db'] . "." . $one_table['TABLE_NAME'];        $GLOBALS['PMD']['OWNER'][$i] = $GLOBALS['db'];        $GLOBALS['PMD']['TABLE_NAME_SMALL'][$i] = $one_table['TABLE_NAME'];        $GLOBALS['PMD_URL']['TABLE_NAME'][$i] = urlencode($GLOBALS['db'] . "." . $one_table['TABLE_NAME']);        $GLOBALS['PMD_URL']['OWNER'][$i] = urlencode($GLOBALS['db']);        $GLOBALS['PMD_URL']['TABLE_NAME_SMALL'][$i] = urlencode($one_table['TABLE_NAME']);        $GLOBALS['PMD_OUT']['TABLE_NAME'][$i] = htmlspecialchars($GLOBALS['db'] . "." . $one_table['TABLE_NAME'], ENT_QUOTES);        $GLOBALS['PMD_OUT']['OWNER'][$i] = htmlspecialchars($GLOBALS['db'], ENT_QUOTES);        $GLOBALS['PMD_OUT']['TABLE_NAME_SMALL'][$i] = htmlspecialchars($one_table['TABLE_NAME'], ENT_QUOTES);        $GLOBALS['PMD']['TABLE_TYPE'][$i] = strtoupper($one_table['ENGINE']);        $DF = PMA_getDisplayField($GLOBALS['db'], $one_table['TABLE_NAME']);        if ($DF != '') {            $GLOBALS['script_display_field'] .= "  display_field['"                . $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i] . "'] = '"                . urlencode($DF) . "';\n";        }        $i++;    }    $GLOBALS['script_display_field'] .=        '// ]]>' . "\n" .        '</script>' . "\n";    //  return $GLOBALS['PMD'];       // many bases // not use ??????}/** * retrieves table column info * * @return  array   table column nfo */function get_tab_info(){    PMA_DBI_select_db($GLOBALS['db']);    $tab_column = array();    for ($i = 0, $cnt = count($GLOBALS['PMD']["TABLE_NAME"]); $i < $cnt; $i++) {        $fields_rs   = PMA_DBI_query(PMA_DBI_get_columns_sql($GLOBALS['db'], $GLOBALS['PMD']["TABLE_NAME_SMALL"][$i], null, true), null, PMA_DBI_QUERY_STORE);        $j = 0;        while ($row = PMA_DBI_fetch_assoc($fields_rs)) {            $tab_column[$GLOBALS['PMD']['TABLE_NAME'][$i]]['COLUMN_ID'][$j]   = $j;            $tab_column[$GLOBALS['PMD']['TABLE_NAME'][$i]]['COLUMN_NAME'][$j] = $row['Field'];            $tab_column[$GLOBALS['PMD']['TABLE_NAME'][$i]]['TYPE'][$j]        = $row['Type'];            $tab_column[$GLOBALS['PMD']['TABLE_NAME'][$i]]['NULLABLE'][$j]    = $row['Null'];            $j++;        }    }    return $tab_column;}/** * returns JavaScript code for intializing vars * * @return string   JavaScript code */function get_script_contr(){    PMA_DBI_select_db($GLOBALS['db']);    $con["C_NAME"] = array();    $i = 0;    $alltab_rs  = PMA_DBI_query('SHOW TABLES FROM ' . PMA_backquote($GLOBALS['db']), null, PMA_DBI_QUERY_STORE);    while ($val = @PMA_DBI_fetch_row($alltab_rs)) {        $row = PMA_getForeigners($GLOBALS['db'], $val[0], '', 'internal');        //echo "<br> internal ".$GLOBALS['db']." - ".$val[0]." - ";        //print_r($row);        if ($row !== false) {            foreach ($row as $field => $value) {                $con['C_NAME'][$i] = '';                $con['DTN'][$i]    = urlencode($GLOBALS['db'] . "." . $val[0]);                $con['DCN'][$i]    = urlencode($field);                $con['STN'][$i]    = urlencode($value['foreign_db'] . "." . $value['foreign_table']);                $con['SCN'][$i]    = urlencode($value['foreign_field']);                $i++;            }        }        $row = PMA_getForeigners($GLOBALS['db'], $val[0], '', 'foreign');        //echo "<br> INNO ";        //print_r($row);        if ($row !== false) {            foreach ($row as $field => $value) {                $con['C_NAME'][$i] = '';                $con['DTN'][$i]    = urlencode($GLOBALS['db'].".".$val[0]);                $con['DCN'][$i]    = urlencode($field);                $con['STN'][$i]    = urlencode($value['foreign_db'].".".$value['foreign_table']);                $con['SCN'][$i]    = urlencode($value['foreign_field']);                $i++;            }        }    }    $ti = 0;    $script_contr        = '<script type="text/javascript">' . "\n" .        '// <![CDATA[' . "\n" .        'var contr = new Array();' . "\n";    for ($i = 0, $cnt = count($con["C_NAME"]); $i < $cnt; $i++) {        $js_var = ' contr[' . $ti . ']';        $script_contr .= $js_var . " = new Array();\n";        $js_var .= "['" . $con['C_NAME'][$i] . "']";        $script_contr .= $js_var . " = new Array();\n";        if (in_array($con['DTN'][$i], $GLOBALS['PMD_URL']["TABLE_NAME"])         && in_array($con['STN'][$i], $GLOBALS['PMD_URL']["TABLE_NAME"])) {            $js_var .= "['" . $con['DTN'][$i] . "']";            $script_contr .= $js_var . " = new Array();\n";            $m_col = array();//}            $js_var .= "['" . $con['DCN'][$i] . "']";            $script_contr .= $js_var . " = new Array();\n";//}            $script_contr .= $js_var . "[0] = '" . $con['STN'][$i] . "';\n"; //            $script_contr .= $js_var . "[1] = '" . $con['SCN'][$i] . "';\n"; //        }        $ti++;    }    $script_contr .=        '// ]]>' . "\n" .        '</script>' . "\n";    return $script_contr;}/** * @return  array unique or primary indizes */function get_pk_or_unique_keys(){    return get_all_keys(true);}/** * returns all indizes * * @param boolean whether to include ony unique ones * @return  array indizes */function get_all_keys($unique_only = false){    include_once './libraries/Index.class.php';    $keys = array();    foreach ($GLOBALS['PMD']['TABLE_NAME_SMALL'] as $I => $table) {        $schema = $GLOBALS['PMD']['OWNER'][$I];        // for now, take into account only the first index segment        foreach (PMA_Index::getFromTable($table, $schema) as $index) {            if ($unique_only && ! $index->isUnique()) {                continue;            }            $columns = $index->getColumns();            foreach ($columns as $column_name => $dummy) {                $keys[$schema . '.' .$table . '.' . $column_name] = 1;            }        }    }    return $keys;}/** * * * @return  array   ??? */function get_script_tabs(){    $script_tabs        = '<script type="text/javascript">' . "\n" .        '// <![CDATA[' . "\n" .        'var j_tabs = new Array();' . "\n" .        'var h_tabs = new Array();' . "\n" ;    for ($i = 0, $cnt = count($GLOBALS['PMD']['TABLE_NAME']); $i < $cnt; $i++) {        $script_tabs .= "j_tabs['" . $GLOBALS['PMD_URL']['TABLE_NAME'][$i] . "'] = '"            . (PMA_foreignkey_supported($GLOBALS['PMD']['TABLE_TYPE'][$i]) ? '1' : '0') . "';\n";        $script_tabs .="h_tabs['" . $GLOBALS['PMD_URL']['TABLE_NAME'][$i] . "'] = 1;"."\n" ;    }    $script_tabs .=        '// ]]>' . "\n" .        '</script>' . "\n";    return $script_tabs;}/** * @return  array   table positions and sizes */function get_tab_pos(){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['designerwork']) {        return null;    }    $query = "         SELECT CONCAT_WS('.', `db_name`, `table_name`) AS `name`,                `x` AS `X`,                `y` AS `Y`,                `v` AS `V`,                `h` AS `H`           FROM " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['designer_coords']);    $tab_pos = PMA_DBI_fetch_result($query, 'name', null, $GLOBALS['controllink'], PMA_DBI_QUERY_STORE);    return count($tab_pos) ? $tab_pos : null;}/** * returns  distinct values from $GLOBALS['PMD']['OWNER'] * * @return  array   owner */function get_owners(){    return array_values(array_unique($GLOBALS['PMD']['OWNER']));}get_tabs();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (! defined('PHPMYADMIN')) {  exit;}$ID_KEY      = 'APC_UPLOAD_PROGRESS';/** * Returns upload status. * * This is implementation for APC extension. * * @param string $id * @return array|null */function PMA_getUploadStatus($id){    global $SESSION_KEY;    global $ID_KEY;    if (trim($id) == "") {        return null;    }    if (! array_key_exists($id, $_SESSION[$SESSION_KEY])) {        $_SESSION[$SESSION_KEY][$id] = array(                    'id'       => $id,                    'finished' => false,                    'percent'  => 0,                    'total'    => 0,                    'complete' => 0,                    'plugin'   => $ID_KEY         );    }    $ret = $_SESSION[$SESSION_KEY][$id];    if (! PMA_import_apcCheck() || $ret['finished']) {        return $ret;    }    $status = apc_fetch('upload_' . $id);    if ($status) {        $ret['finished'] = (bool)$status['done'];        $ret['total']    = $status['total'];        $ret['complete'] = $status['current'];        if ($ret['total'] > 0) {            $ret['percent'] = $ret['complete'] / $ret['total'] * 100;        }        if ($ret['percent'] == 100) {            $ret['finished'] = (bool)true;        }        $_SESSION[$SESSION_KEY][$id] = $ret;    }    return $ret;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__external_info(){    return array(        'info' => __('LINUX ONLY: Launches an external application and feeds it the column data via standard input. Returns the standard output of the application. The default is Tidy, to pretty-print HTML code. For security reasons, you have to manually edit the file libraries/transformations/text_plain__external.inc.php and list the tools you want to make available. The first option is then the number of the program you want to use and the second option is the parameters for the program. The third option, if set to 1, will convert the output using htmlspecialchars() (Default 1). The fourth option, if set to 1, will prevent wrapping and ensure that the output appears all on one line (Default 1).'),        );}/** * */function PMA_transformation_text_plain__external_nowrap($options = array()){    if (!isset($options[3]) || $options[3] == '') {        $nowrap = true;    } elseif ($options[3] == '1' || $options[3] == 1) {        $nowrap = true;    } else {        $nowrap = false;    }    return $nowrap;}function PMA_transformation_text_plain__external($buffer, $options = array(), $meta = ''){    // possibly use a global transform and feed it with special options:    // include './libraries/transformations/global.inc.php';    // further operations on $buffer using the $options[] array.    $allowed_programs = array();    //    // WARNING:    //    // It's up to administrator to allow anything here. Note that users may    // specify any parameters, so when programs allow output redirection or    // any other possibly dangerous operations, you should write wrapper    // script that will publish only functions you really want.    //    // Add here program definitions like (note that these are NOT safe    // programs):    //    //$allowed_programs[0] = '/usr/local/bin/tidy';    //$allowed_programs[1] = '/usr/local/bin/validate';    // no-op when no allowed programs    if (count($allowed_programs) == 0) {        return $buffer;    }    if (!isset($options[0]) ||  $options[0] == '' || !isset($allowed_programs[$options[0]])) {        $program = $allowed_programs[0];    } else {        $program = $allowed_programs[$options[0]];    }    if (!isset($options[1]) || $options[1] == '') {        $poptions = '-f /dev/null -i -wrap -q';    } else {        $poptions = $options[1];    }    if (!isset($options[2]) || $options[2] == '') {        $options[2] = 1;    }    if (!isset($options[3]) || $options[3] == '') {        $options[3] = 1;    }    // needs PHP >= 4.3.0    $newstring = '';    $descriptorspec = array(        0 => array("pipe", "r"),        1 => array("pipe", "w")    );    $process = proc_open($program . ' ' . $poptions, $descriptorspec, $pipes);    if (is_resource($process)) {        fwrite($pipes[0], $buffer);        fclose($pipes[0]);        while (!feof($pipes[1])) {            $newstring .= fgets($pipes[1], 1024);        }        fclose($pipes[1]);        // we don't currently use the return value        $return_value = proc_close($process);    }    if ($options[2] == 1 || $options[2] == '2') {        $retstring = htmlspecialchars($newstring);    } else {        $retstring = $newstring;    }    return $retstring;}?>
<?php//============================================================+// File name   : unicode_data.php// Version     : 1.0.009// Begin       : 2008-01-01// Last Update : 2011-10-01// Author      : Nicola Asuni - Tecnick.com LTD - Manor Coach House, Church Hill, Aldershot, Hants, GU12 4RQ, UK - www.tecnick.com - info@tecnick.com// License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)// -------------------------------------------------------------------// Copyright (C) 2008-2012  Nicola Asuni - Tecnick.com LTD//// This file is part of TCPDF software library.//// TCPDF is free software: you can redistribute it and/or modify it// under the terms of the GNU Lesser General Public License as// published by the Free Software Foundation, either version 3 of the// License, or (at your option) any later version.//// TCPDF is distributed in the hope that it will be useful, but// WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.// See the GNU Lesser General Public License for more details.//// You should have received a copy of the GNU Lesser General Public License// along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.//// See LICENSE.TXT file for more information.// -------------------------------------------------------------------//// Description : Unicode data for TCPDF library.////============================================================+// THANKS TO// Efthimios Mavrogeorgiadis// Saleh AlMatrafe/** * @file * Unicode data class for TCPDF library. * @author Nicola Asuni * @package com.tecnick.tcpdf * @since 2.1.000 (2008-01-08) *//** * @class TCPDF_UNICODE_DATA * This is a PHP class containing UnicOde data for TCPDF library. * @package com.tecnick.tcpdf * @version 1.0.009 * @author Nicola Asuni - info@tecnick.com */class TCPDF_UNICODE_DATA {/** * Unicode code for Left-to-Right Mark. * @public */public $uni_LRM = 8206;/** * Unicode code for Right-to-Left Mark. * @public */public $uni_RLM = 8207;/** * Unicode code for Left-to-Right Embedding. * @public */public $uni_LRE = 8234;/** * Unicode code for Right-to-Left Embedding. * @public */public $uni_RLE = 8235;/** * Unicode code for Pop Directional Format. * @public */public $uni_PDF = 8236;/** * Unicode code for Left-to-Right Override. * @public */public $uni_LRO = 8237;/** * Unicode code for Right-to-Left Override. * @public */public $uni_RLO = 8238;/** * Pattern to test RTL (Righ-To-Left) strings using regular expressions. * @public */public $uni_RE_PATTERN_RTL = "/(	  \xD6\xBE                                             # R	| \xD7[\x80\x83\x86\x90-\xAA\xB0-\xB4]                 # R	| \xDF[\x80-\xAA\xB4\xB5\xBA]                          # R	| \xE2\x80\x8F                                         # R	| \xEF\xAC[\x9D\x9F\xA0-\xA8\xAA-\xB6\xB8-\xBC\xBE]    # R	| \xEF\xAD[\x80\x81\x83\x84\x86-\x8F]                  # R	| \xF0\x90\xA0[\x80-\x85\x88\x8A-\xB5\xB7\xB8\xBC\xBF] # R	| \xF0\x90\xA4[\x80-\x99]                              # R	| \xF0\x90\xA8[\x80\x90-\x93\x95-\x97\x99-\xB3]        # R	| \xF0\x90\xA9[\x80-\x87\x90-\x98]                     # R	| \xE2\x80[\xAB\xAE]                                   # RLE & RLO	)/x";/** * Pattern to test Arabic strings using regular expressions. Source: http://www.w3.org/International/questions/qa-forms-utf-8 * @public */public $uni_RE_PATTERN_ARABIC = "/(		  \xD8[\x80-\x83\x8B\x8D\x9B\x9E\x9F\xA1-\xBA]  # AL		| \xD9[\x80-\x8A\xAD-\xAF\xB1-\xBF]             # AL		| \xDA[\x80-\xBF]                               # AL		| \xDB[\x80-\x95\x9D\xA5\xA6\xAE\xAF\xBA-\xBF]  # AL		| \xDC[\x80-\x8D\x90\x92-\xAF]                  # AL		| \xDD[\x8D-\xAD]                               # AL		| \xDE[\x80-\xA5\xB1]                           # AL		| \xEF\xAD[\x90-\xBF]                           # AL		| \xEF\xAE[\x80-\xB1]                           # AL		| \xEF\xAF[\x93-\xBF]                           # AL		| \xEF[\xB0-\xB3][\x80-\xBF]                    # AL		| \xEF\xB4[\x80-\xBD]                           # AL		| \xEF\xB5[\x90-\xBF]                           # AL		| \xEF\xB6[\x80-\x8F\x92-\xBF]                  # AL		| \xEF\xB7[\x80-\x87\xB0-\xBC]                  # AL		| \xEF\xB9[\xB0-\xB4\xB6-\xBF]                  # AL		| \xEF\xBA[\x80-\xBF]                           # AL		| \xEF\xBB[\x80-\xBC]                           # AL		| \xD9[\xA0-\xA9\xAB\xAC]                       # AN		)/x";/** * Array of Unicode types. * @public */public $uni_type = array(0=>'BN',1=>'BN',2=>'BN',3=>'BN',4=>'BN',5=>'BN',6=>'BN',7=>'BN',8=>'BN',9=>'S',10=>'B',11=>'S',12=>'WS',13=>'B',14=>'BN',15=>'BN',16=>'BN',17=>'BN',18=>'BN',19=>'BN',20=>'BN',21=>'BN',22=>'BN',23=>'BN',24=>'BN',25=>'BN',26=>'BN',27=>'BN',28=>'B',29=>'B',30=>'B',31=>'S',32=>'WS',33=>'ON',34=>'ON',35=>'ET',36=>'ET',37=>'ET',38=>'ON',39=>'ON',40=>'ON',41=>'ON',42=>'ON',43=>'ES',44=>'CS',45=>'ES',46=>'CS',47=>'CS',48=>'EN',49=>'EN',50=>'EN',51=>'EN',52=>'EN',53=>'EN',54=>'EN',55=>'EN',56=>'EN',57=>'EN',58=>'CS',59=>'ON',60=>'ON',61=>'ON',62=>'ON',63=>'ON',64=>'ON',65=>'L',66=>'L',67=>'L',68=>'L',69=>'L',70=>'L',71=>'L',72=>'L',73=>'L',74=>'L',75=>'L',76=>'L',77=>'L',78=>'L',79=>'L',80=>'L',81=>'L',82=>'L',83=>'L',84=>'L',85=>'L',86=>'L',87=>'L',88=>'L',89=>'L',90=>'L',91=>'ON',92=>'ON',93=>'ON',94=>'ON',95=>'ON',96=>'ON',97=>'L',98=>'L',99=>'L',100=>'L',101=>'L',102=>'L',103=>'L',104=>'L',105=>'L',106=>'L',107=>'L',108=>'L',109=>'L',110=>'L',111=>'L',112=>'L',113=>'L',114=>'L',115=>'L',116=>'L',117=>'L',118=>'L',119=>'L',120=>'L',121=>'L',122=>'L',123=>'ON',124=>'ON',125=>'ON',126=>'ON',127=>'BN',128=>'BN',129=>'BN',130=>'BN',131=>'BN',132=>'BN',133=>'B',134=>'BN',135=>'BN',136=>'BN',137=>'BN',138=>'BN',139=>'BN',140=>'BN',141=>'BN',142=>'BN',143=>'BN',144=>'BN',145=>'BN',146=>'BN',147=>'BN',148=>'BN',149=>'BN',150=>'BN',151=>'BN',152=>'BN',153=>'BN',154=>'BN',155=>'BN',156=>'BN',157=>'BN',158=>'BN',159=>'BN',160=>'CS',161=>'ON',162=>'ET',163=>'ET',164=>'ET',165=>'ET',166=>'ON',167=>'ON',168=>'ON',169=>'ON',170=>'L',171=>'ON',172=>'ON',173=>'BN',174=>'ON',175=>'ON',176=>'ET',177=>'ET',178=>'EN',179=>'EN',180=>'ON',181=>'L',182=>'ON',183=>'ON',184=>'ON',185=>'EN',186=>'L',187=>'ON',188=>'ON',189=>'ON',190=>'ON',191=>'ON',192=>'L',193=>'L',194=>'L',195=>'L',196=>'L',197=>'L',198=>'L',199=>'L',200=>'L',201=>'L',202=>'L',203=>'L',204=>'L',205=>'L',206=>'L',207=>'L',208=>'L',209=>'L',210=>'L',211=>'L',212=>'L',213=>'L',214=>'L',215=>'ON',216=>'L',217=>'L',218=>'L',219=>'L',220=>'L',221=>'L',222=>'L',223=>'L',224=>'L',225=>'L',226=>'L',227=>'L',228=>'L',229=>'L',230=>'L',231=>'L',232=>'L',233=>'L',234=>'L',235=>'L',236=>'L',237=>'L',238=>'L',239=>'L',240=>'L',241=>'L',242=>'L',243=>'L',244=>'L',245=>'L',246=>'L',247=>'ON',248=>'L',249=>'L',250=>'L',251=>'L',252=>'L',253=>'L',254=>'L',255=>'L',256=>'L',257=>'L',258=>'L',259=>'L',260=>'L',261=>'L',262=>'L',263=>'L',264=>'L',265=>'L',266=>'L',267=>'L',268=>'L',269=>'L',270=>'L',271=>'L',272=>'L',273=>'L',274=>'L',275=>'L',276=>'L',277=>'L',278=>'L',279=>'L',280=>'L',281=>'L',282=>'L',283=>'L',284=>'L',285=>'L',286=>'L',287=>'L',288=>'L',289=>'L',290=>'L',291=>'L',292=>'L',293=>'L',294=>'L',295=>'L',296=>'L',297=>'L',298=>'L',299=>'L',300=>'L',301=>'L',302=>'L',303=>'L',304=>'L',305=>'L',306=>'L',307=>'L',308=>'L',309=>'L',310=>'L',311=>'L',312=>'L',313=>'L',314=>'L',315=>'L',316=>'L',317=>'L',318=>'L',319=>'L',320=>'L',321=>'L',322=>'L',323=>'L',324=>'L',325=>'L',326=>'L',327=>'L',328=>'L',329=>'L',330=>'L',331=>'L',332=>'L',333=>'L',334=>'L',335=>'L',336=>'L',337=>'L',338=>'L',339=>'L',340=>'L',341=>'L',342=>'L',343=>'L',344=>'L',345=>'L',346=>'L',347=>'L',348=>'L',349=>'L',350=>'L',351=>'L',352=>'L',353=>'L',354=>'L',355=>'L',356=>'L',357=>'L',358=>'L',359=>'L',360=>'L',361=>'L',362=>'L',363=>'L',364=>'L',365=>'L',366=>'L',367=>'L',368=>'L',369=>'L',370=>'L',371=>'L',372=>'L',373=>'L',374=>'L',375=>'L',376=>'L',377=>'L',378=>'L',379=>'L',380=>'L',381=>'L',382=>'L',383=>'L',384=>'L',385=>'L',386=>'L',387=>'L',388=>'L',389=>'L',390=>'L',391=>'L',392=>'L',393=>'L',394=>'L',395=>'L',396=>'L',397=>'L',398=>'L',399=>'L',400=>'L',401=>'L',402=>'L',403=>'L',404=>'L',405=>'L',406=>'L',407=>'L',408=>'L',409=>'L',410=>'L',411=>'L',412=>'L',413=>'L',414=>'L',415=>'L',416=>'L',417=>'L',418=>'L',419=>'L',420=>'L',421=>'L',422=>'L',423=>'L',424=>'L',425=>'L',426=>'L',427=>'L',428=>'L',429=>'L',430=>'L',431=>'L',432=>'L',433=>'L',434=>'L',435=>'L',436=>'L',437=>'L',438=>'L',439=>'L',440=>'L',441=>'L',442=>'L',443=>'L',444=>'L',445=>'L',446=>'L',447=>'L',448=>'L',449=>'L',450=>'L',451=>'L',452=>'L',453=>'L',454=>'L',455=>'L',456=>'L',457=>'L',458=>'L',459=>'L',460=>'L',461=>'L',462=>'L',463=>'L',464=>'L',465=>'L',466=>'L',467=>'L',468=>'L',469=>'L',470=>'L',471=>'L',472=>'L',473=>'L',474=>'L',475=>'L',476=>'L',477=>'L',478=>'L',479=>'L',480=>'L',481=>'L',482=>'L',483=>'L',484=>'L',485=>'L',486=>'L',487=>'L',488=>'L',489=>'L',490=>'L',491=>'L',492=>'L',493=>'L',494=>'L',495=>'L',496=>'L',497=>'L',498=>'L',499=>'L',500=>'L',501=>'L',502=>'L',503=>'L',504=>'L',505=>'L',506=>'L',507=>'L',508=>'L',509=>'L',510=>'L',511=>'L',512=>'L',513=>'L',514=>'L',515=>'L',516=>'L',517=>'L',518=>'L',519=>'L',520=>'L',521=>'L',522=>'L',523=>'L',524=>'L',525=>'L',526=>'L',527=>'L',528=>'L',529=>'L',530=>'L',531=>'L',532=>'L',533=>'L',534=>'L',535=>'L',536=>'L',537=>'L',538=>'L',539=>'L',540=>'L',541=>'L',542=>'L',543=>'L',544=>'L',545=>'L',546=>'L',547=>'L',548=>'L',549=>'L',550=>'L',551=>'L',552=>'L',553=>'L',554=>'L',555=>'L',556=>'L',557=>'L',558=>'L',559=>'L',560=>'L',561=>'L',562=>'L',563=>'L',564=>'L',565=>'L',566=>'L',567=>'L',568=>'L',569=>'L',570=>'L',571=>'L',572=>'L',573=>'L',574=>'L',575=>'L',576=>'L',577=>'L',578=>'L',579=>'L',580=>'L',581=>'L',582=>'L',583=>'L',584=>'L',585=>'L',586=>'L',587=>'L',588=>'L',589=>'L',590=>'L',591=>'L',592=>'L',593=>'L',594=>'L',595=>'L',596=>'L',597=>'L',598=>'L',599=>'L',600=>'L',601=>'L',602=>'L',603=>'L',604=>'L',605=>'L',606=>'L',607=>'L',608=>'L',609=>'L',610=>'L',611=>'L',612=>'L',613=>'L',614=>'L',615=>'L',616=>'L',617=>'L',618=>'L',619=>'L',620=>'L',621=>'L',622=>'L',623=>'L',624=>'L',625=>'L',626=>'L',627=>'L',628=>'L',629=>'L',630=>'L',631=>'L',632=>'L',633=>'L',634=>'L',635=>'L',636=>'L',637=>'L',638=>'L',639=>'L',640=>'L',641=>'L',642=>'L',643=>'L',644=>'L',645=>'L',646=>'L',647=>'L',648=>'L',649=>'L',650=>'L',651=>'L',652=>'L',653=>'L',654=>'L',655=>'L',656=>'L',657=>'L',658=>'L',659=>'L',660=>'L',661=>'L',662=>'L',663=>'L',664=>'L',665=>'L',666=>'L',667=>'L',668=>'L',669=>'L',670=>'L',671=>'L',672=>'L',673=>'L',674=>'L',675=>'L',676=>'L',677=>'L',678=>'L',679=>'L',680=>'L',681=>'L',682=>'L',683=>'L',684=>'L',685=>'L',686=>'L',687=>'L',688=>'L',689=>'L',690=>'L',691=>'L',692=>'L',693=>'L',694=>'L',695=>'L',696=>'L',697=>'ON',698=>'ON',699=>'L',700=>'L',701=>'L',702=>'L',703=>'L',704=>'L',705=>'L',706=>'ON',707=>'ON',708=>'ON',709=>'ON',710=>'ON',711=>'ON',712=>'ON',713=>'ON',714=>'ON',715=>'ON',716=>'ON',717=>'ON',718=>'ON',719=>'ON',720=>'L',721=>'L',722=>'ON',723=>'ON',724=>'ON',725=>'ON',726=>'ON',727=>'ON',728=>'ON',729=>'ON',730=>'ON',731=>'ON',732=>'ON',733=>'ON',734=>'ON',735=>'ON',736=>'L',737=>'L',738=>'L',739=>'L',740=>'L',741=>'ON',742=>'ON',743=>'ON',744=>'ON',745=>'ON',746=>'ON',747=>'ON',748=>'ON',749=>'ON',750=>'L',751=>'ON',752=>'ON',753=>'ON',754=>'ON',755=>'ON',756=>'ON',757=>'ON',758=>'ON',759=>'ON',760=>'ON',761=>'ON',762=>'ON',763=>'ON',764=>'ON',765=>'ON',766=>'ON',767=>'ON',768=>'NSM',769=>'NSM',770=>'NSM',771=>'NSM',772=>'NSM',773=>'NSM',774=>'NSM',775=>'NSM',776=>'NSM',777=>'NSM',778=>'NSM',779=>'NSM',780=>'NSM',781=>'NSM',782=>'NSM',783=>'NSM',784=>'NSM',785=>'NSM',786=>'NSM',787=>'NSM',788=>'NSM',789=>'NSM',790=>'NSM',791=>'NSM',792=>'NSM',793=>'NSM',794=>'NSM',795=>'NSM',796=>'NSM',797=>'NSM',798=>'NSM',799=>'NSM',800=>'NSM',801=>'NSM',802=>'NSM',803=>'NSM',804=>'NSM',805=>'NSM',806=>'NSM',807=>'NSM',808=>'NSM',809=>'NSM',810=>'NSM',811=>'NSM',812=>'NSM',813=>'NSM',814=>'NSM',815=>'NSM',816=>'NSM',817=>'NSM',818=>'NSM',819=>'NSM',820=>'NSM',821=>'NSM',822=>'NSM',823=>'NSM',824=>'NSM',825=>'NSM',826=>'NSM',827=>'NSM',828=>'NSM',829=>'NSM',830=>'NSM',831=>'NSM',832=>'NSM',833=>'NSM',834=>'NSM',835=>'NSM',836=>'NSM',837=>'NSM',838=>'NSM',839=>'NSM',840=>'NSM',841=>'NSM',842=>'NSM',843=>'NSM',844=>'NSM',845=>'NSM',846=>'NSM',847=>'NSM',848=>'NSM',849=>'NSM',850=>'NSM',851=>'NSM',852=>'NSM',853=>'NSM',854=>'NSM',855=>'NSM',856=>'NSM',857=>'NSM',858=>'NSM',859=>'NSM',860=>'NSM',861=>'NSM',862=>'NSM',863=>'NSM',864=>'NSM',865=>'NSM',866=>'NSM',867=>'NSM',868=>'NSM',869=>'NSM',870=>'NSM',871=>'NSM',872=>'NSM',873=>'NSM',874=>'NSM',875=>'NSM',876=>'NSM',877=>'NSM',878=>'NSM',879=>'NSM',884=>'ON',885=>'ON',890=>'L',891=>'L',892=>'L',893=>'L',894=>'ON',900=>'ON',901=>'ON',902=>'L',903=>'ON',904=>'L',905=>'L',906=>'L',908=>'L',910=>'L',911=>'L',912=>'L',913=>'L',914=>'L',915=>'L',916=>'L',917=>'L',918=>'L',919=>'L',920=>'L',921=>'L',922=>'L',923=>'L',924=>'L',925=>'L',926=>'L',927=>'L',928=>'L',929=>'L',931=>'L',932=>'L',933=>'L',934=>'L',935=>'L',936=>'L',937=>'L',938=>'L',939=>'L',940=>'L',941=>'L',942=>'L',943=>'L',944=>'L',945=>'L',946=>'L',947=>'L',948=>'L',949=>'L',950=>'L',951=>'L',952=>'L',953=>'L',954=>'L',955=>'L',956=>'L',957=>'L',958=>'L',959=>'L',960=>'L',961=>'L',962=>'L',963=>'L',964=>'L',965=>'L',966=>'L',967=>'L',968=>'L',969=>'L',970=>'L',971=>'L',972=>'L',973=>'L',974=>'L',976=>'L',977=>'L',978=>'L',979=>'L',980=>'L',981=>'L',982=>'L',983=>'L',984=>'L',985=>'L',986=>'L',987=>'L',988=>'L',989=>'L',990=>'L',991=>'L',992=>'L',993=>'L',994=>'L',995=>'L',996=>'L',997=>'L',998=>'L',999=>'L',1000=>'L',1001=>'L',1002=>'L',1003=>'L',1004=>'L',1005=>'L',1006=>'L',1007=>'L',1008=>'L',1009=>'L',1010=>'L',1011=>'L',1012=>'L',1013=>'L',1014=>'ON',1015=>'L',1016=>'L',1017=>'L',1018=>'L',1019=>'L',1020=>'L',1021=>'L',1022=>'L',1023=>'L',1024=>'L',1025=>'L',1026=>'L',1027=>'L',1028=>'L',1029=>'L',1030=>'L',1031=>'L',1032=>'L',1033=>'L',1034=>'L',1035=>'L',1036=>'L',1037=>'L',1038=>'L',1039=>'L',1040=>'L',1041=>'L',1042=>'L',1043=>'L',1044=>'L',1045=>'L',1046=>'L',1047=>'L',1048=>'L',1049=>'L',1050=>'L',1051=>'L',1052=>'L',1053=>'L',1054=>'L',1055=>'L',1056=>'L',1057=>'L',1058=>'L',1059=>'L',1060=>'L',1061=>'L',1062=>'L',1063=>'L',1064=>'L',1065=>'L',1066=>'L',1067=>'L',1068=>'L',1069=>'L',1070=>'L',1071=>'L',1072=>'L',1073=>'L',1074=>'L',1075=>'L',1076=>'L',1077=>'L',1078=>'L',1079=>'L',1080=>'L',1081=>'L',1082=>'L',1083=>'L',1084=>'L',1085=>'L',1086=>'L',1087=>'L',1088=>'L',1089=>'L',1090=>'L',1091=>'L',1092=>'L',1093=>'L',1094=>'L',1095=>'L',1096=>'L',1097=>'L',1098=>'L',1099=>'L',1100=>'L',1101=>'L',1102=>'L',1103=>'L',1104=>'L',1105=>'L',1106=>'L',1107=>'L',1108=>'L',1109=>'L',1110=>'L',1111=>'L',1112=>'L',1113=>'L',1114=>'L',1115=>'L',1116=>'L',1117=>'L',1118=>'L',1119=>'L',1120=>'L',1121=>'L',1122=>'L',1123=>'L',1124=>'L',1125=>'L',1126=>'L',1127=>'L',1128=>'L',1129=>'L',1130=>'L',1131=>'L',1132=>'L',1133=>'L',1134=>'L',1135=>'L',1136=>'L',1137=>'L',1138=>'L',1139=>'L',1140=>'L',1141=>'L',1142=>'L',1143=>'L',1144=>'L',1145=>'L',1146=>'L',1147=>'L',1148=>'L',1149=>'L',1150=>'L',1151=>'L',1152=>'L',1153=>'L',1154=>'L',1155=>'NSM',1156=>'NSM',1157=>'NSM',1158=>'NSM',1160=>'NSM',1161=>'NSM',1162=>'L',1163=>'L',1164=>'L',1165=>'L',1166=>'L',1167=>'L',1168=>'L',1169=>'L',1170=>'L',1171=>'L',1172=>'L',1173=>'L',1174=>'L',1175=>'L',1176=>'L',1177=>'L',1178=>'L',1179=>'L',1180=>'L',1181=>'L',1182=>'L',1183=>'L',1184=>'L',1185=>'L',1186=>'L',1187=>'L',1188=>'L',1189=>'L',1190=>'L',1191=>'L',1192=>'L',1193=>'L',1194=>'L',1195=>'L',1196=>'L',1197=>'L',1198=>'L',1199=>'L',1200=>'L',1201=>'L',1202=>'L',1203=>'L',1204=>'L',1205=>'L',1206=>'L',1207=>'L',1208=>'L',1209=>'L',1210=>'L',1211=>'L',1212=>'L',1213=>'L',1214=>'L',1215=>'L',1216=>'L',1217=>'L',1218=>'L',1219=>'L',1220=>'L',1221=>'L',1222=>'L',1223=>'L',1224=>'L',1225=>'L',1226=>'L',1227=>'L',1228=>'L',1229=>'L',1230=>'L',1231=>'L',1232=>'L',1233=>'L',1234=>'L',1235=>'L',1236=>'L',1237=>'L',1238=>'L',1239=>'L',1240=>'L',1241=>'L',1242=>'L',1243=>'L',1244=>'L',1245=>'L',1246=>'L',1247=>'L',1248=>'L',1249=>'L',1250=>'L',1251=>'L',1252=>'L',1253=>'L',1254=>'L',1255=>'L',1256=>'L',1257=>'L',1258=>'L',1259=>'L',1260=>'L',1261=>'L',1262=>'L',1263=>'L',1264=>'L',1265=>'L',1266=>'L',1267=>'L',1268=>'L',1269=>'L',1270=>'L',1271=>'L',1272=>'L',1273=>'L',1274=>'L',1275=>'L',1276=>'L',1277=>'L',1278=>'L',1279=>'L',1280=>'L',1281=>'L',1282=>'L',1283=>'L',1284=>'L',1285=>'L',1286=>'L',1287=>'L',1288=>'L',1289=>'L',1290=>'L',1291=>'L',1292=>'L',1293=>'L',1294=>'L',1295=>'L',1296=>'L',1297=>'L',1298=>'L',1299=>'L',1329=>'L',1330=>'L',1331=>'L',1332=>'L',1333=>'L',1334=>'L',1335=>'L',1336=>'L',1337=>'L',1338=>'L',1339=>'L',1340=>'L',1341=>'L',1342=>'L',1343=>'L',1344=>'L',1345=>'L',1346=>'L',1347=>'L',1348=>'L',1349=>'L',1350=>'L',1351=>'L',1352=>'L',1353=>'L',1354=>'L',1355=>'L',1356=>'L',1357=>'L',1358=>'L',1359=>'L',1360=>'L',1361=>'L',1362=>'L',1363=>'L',1364=>'L',1365=>'L',1366=>'L',1369=>'L',1370=>'L',1371=>'L',1372=>'L',1373=>'L',1374=>'L',1375=>'L',1377=>'L',1378=>'L',1379=>'L',1380=>'L',1381=>'L',1382=>'L',1383=>'L',1384=>'L',1385=>'L',1386=>'L',1387=>'L',1388=>'L',1389=>'L',1390=>'L',1391=>'L',1392=>'L',1393=>'L',1394=>'L',1395=>'L',1396=>'L',1397=>'L',1398=>'L',1399=>'L',1400=>'L',1401=>'L',1402=>'L',1403=>'L',1404=>'L',1405=>'L',1406=>'L',1407=>'L',1408=>'L',1409=>'L',1410=>'L',1411=>'L',1412=>'L',1413=>'L',1414=>'L',1415=>'L',1417=>'L',1418=>'ON',1425=>'NSM',1426=>'NSM',1427=>'NSM',1428=>'NSM',1429=>'NSM',1430=>'NSM',1431=>'NSM',1432=>'NSM',1433=>'NSM',1434=>'NSM',1435=>'NSM',1436=>'NSM',1437=>'NSM',1438=>'NSM',1439=>'NSM',1440=>'NSM',1441=>'NSM',1442=>'NSM',1443=>'NSM',1444=>'NSM',1445=>'NSM',1446=>'NSM',1447=>'NSM',1448=>'NSM',1449=>'NSM',1450=>'NSM',1451=>'NSM',1452=>'NSM',1453=>'NSM',1454=>'NSM',1455=>'NSM',1456=>'NSM',1457=>'NSM',1458=>'NSM',1459=>'NSM',1460=>'NSM',1461=>'NSM',1462=>'NSM',1463=>'NSM',1464=>'NSM',1465=>'NSM',1466=>'NSM',1467=>'NSM',1468=>'NSM',1469=>'NSM',1470=>'R',1471=>'NSM',1472=>'R',1473=>'NSM',1474=>'NSM',1475=>'R',1476=>'NSM',1477=>'NSM',1478=>'R',1479=>'NSM',1488=>'R',1489=>'R',1490=>'R',1491=>'R',1492=>'R',1493=>'R',1494=>'R',1495=>'R',1496=>'R',1497=>'R',1498=>'R',1499=>'R',1500=>'R',1501=>'R',1502=>'R',1503=>'R',1504=>'R',1505=>'R',1506=>'R',1507=>'R',1508=>'R',1509=>'R',1510=>'R',1511=>'R',1512=>'R',1513=>'R',1514=>'R',1520=>'R',1521=>'R',1522=>'R',1523=>'R',1524=>'R',1536=>'AL',1537=>'AL',1538=>'AL',1539=>'AL',1547=>'AL',1548=>'CS',1549=>'AL',1550=>'ON',1551=>'ON',1552=>'NSM',1553=>'NSM',1554=>'NSM',1555=>'NSM',1556=>'NSM',1557=>'NSM',1563=>'AL',1566=>'AL',1567=>'AL',1569=>'AL',1570=>'AL',1571=>'AL',1572=>'AL',1573=>'AL',1574=>'AL',1575=>'AL',1576=>'AL',1577=>'AL',1578=>'AL',1579=>'AL',1580=>'AL',1581=>'AL',1582=>'AL',1583=>'AL',1584=>'AL',1585=>'AL',1586=>'AL',1587=>'AL',1588=>'AL',1589=>'AL',1590=>'AL',1591=>'AL',1592=>'AL',1593=>'AL',1594=>'AL',1600=>'AL',1601=>'AL',1602=>'AL',1603=>'AL',1604=>'AL',1605=>'AL',1606=>'AL',1607=>'AL',1608=>'AL',1609=>'AL',1610=>'AL',1611=>'NSM',1612=>'NSM',1613=>'NSM',1614=>'NSM',1615=>'NSM',1616=>'NSM',1617=>'NSM',1618=>'NSM',1619=>'NSM',1620=>'NSM',1621=>'NSM',1622=>'NSM',1623=>'NSM',1624=>'NSM',1625=>'NSM',1626=>'NSM',1627=>'NSM',1628=>'NSM',1629=>'NSM',1630=>'NSM',1632=>'AN',1633=>'AN',1634=>'AN',1635=>'AN',1636=>'AN',1637=>'AN',1638=>'AN',1639=>'AN',1640=>'AN',1641=>'AN',1642=>'ET',1643=>'AN',1644=>'AN',1645=>'AL',1646=>'AL',1647=>'AL',1648=>'NSM',1649=>'AL',1650=>'AL',1651=>'AL',1652=>'AL',1653=>'AL',1654=>'AL',1655=>'AL',1656=>'AL',1657=>'AL',1658=>'AL',1659=>'AL',1660=>'AL',1661=>'AL',1662=>'AL',1663=>'AL',1664=>'AL',1665=>'AL',1666=>'AL',1667=>'AL',1668=>'AL',1669=>'AL',1670=>'AL',1671=>'AL',1672=>'AL',1673=>'AL',1674=>'AL',1675=>'AL',1676=>'AL',1677=>'AL',1678=>'AL',1679=>'AL',1680=>'AL',1681=>'AL',1682=>'AL',1683=>'AL',1684=>'AL',1685=>'AL',1686=>'AL',1687=>'AL',1688=>'AL',1689=>'AL',1690=>'AL',1691=>'AL',1692=>'AL',1693=>'AL',1694=>'AL',1695=>'AL',1696=>'AL',1697=>'AL',1698=>'AL',1699=>'AL',1700=>'AL',1701=>'AL',1702=>'AL',1703=>'AL',1704=>'AL',1705=>'AL',1706=>'AL',1707=>'AL',1708=>'AL',1709=>'AL',1710=>'AL',1711=>'AL',1712=>'AL',1713=>'AL',1714=>'AL',1715=>'AL',1716=>'AL',1717=>'AL',1718=>'AL',1719=>'AL',1720=>'AL',1721=>'AL',1722=>'AL',1723=>'AL',1724=>'AL',1725=>'AL',1726=>'AL',1727=>'AL',1728=>'AL',1729=>'AL',1730=>'AL',1731=>'AL',1732=>'AL',1733=>'AL',1734=>'AL',1735=>'AL',1736=>'AL',1737=>'AL',1738=>'AL',1739=>'AL',1740=>'AL',1741=>'AL',1742=>'AL',1743=>'AL',1744=>'AL',1745=>'AL',1746=>'AL',1747=>'AL',1748=>'AL',1749=>'AL',1750=>'NSM',1751=>'NSM',1752=>'NSM',1753=>'NSM',1754=>'NSM',1755=>'NSM',1756=>'NSM',1757=>'AL',1758=>'NSM',1759=>'NSM',1760=>'NSM',1761=>'NSM',1762=>'NSM',1763=>'NSM',1764=>'NSM',1765=>'AL',1766=>'AL',1767=>'NSM',1768=>'NSM',1769=>'ON',1770=>'NSM',1771=>'NSM',1772=>'NSM',1773=>'NSM',1774=>'AL',1775=>'AL',1776=>'EN',1777=>'EN',1778=>'EN',1779=>'EN',1780=>'EN',1781=>'EN',1782=>'EN',1783=>'EN',1784=>'EN',1785=>'EN',1786=>'AL',1787=>'AL',1788=>'AL',1789=>'AL',1790=>'AL',1791=>'AL',1792=>'AL',1793=>'AL',1794=>'AL',1795=>'AL',1796=>'AL',1797=>'AL',1798=>'AL',1799=>'AL',1800=>'AL',1801=>'AL',1802=>'AL',1803=>'AL',1804=>'AL',1805=>'AL',1807=>'BN',1808=>'AL',1809=>'NSM',1810=>'AL',1811=>'AL',1812=>'AL',1813=>'AL',1814=>'AL',1815=>'AL',1816=>'AL',1817=>'AL',1818=>'AL',1819=>'AL',1820=>'AL',1821=>'AL',1822=>'AL',1823=>'AL',1824=>'AL',1825=>'AL',1826=>'AL',1827=>'AL',1828=>'AL',1829=>'AL',1830=>'AL',1831=>'AL',1832=>'AL',1833=>'AL',1834=>'AL',1835=>'AL',1836=>'AL',1837=>'AL',1838=>'AL',1839=>'AL',1840=>'NSM',1841=>'NSM',1842=>'NSM',1843=>'NSM',1844=>'NSM',1845=>'NSM',1846=>'NSM',1847=>'NSM',1848=>'NSM',1849=>'NSM',1850=>'NSM',1851=>'NSM',1852=>'NSM',1853=>'NSM',1854=>'NSM',1855=>'NSM',1856=>'NSM',1857=>'NSM',1858=>'NSM',1859=>'NSM',1860=>'NSM',1861=>'NSM',1862=>'NSM',1863=>'NSM',1864=>'NSM',1865=>'NSM',1866=>'NSM',1869=>'AL',1870=>'AL',1871=>'AL',1872=>'AL',1873=>'AL',1874=>'AL',1875=>'AL',1876=>'AL',1877=>'AL',1878=>'AL',1879=>'AL',1880=>'AL',1881=>'AL',1882=>'AL',1883=>'AL',1884=>'AL',1885=>'AL',1886=>'AL',1887=>'AL',1888=>'AL',1889=>'AL',1890=>'AL',1891=>'AL',1892=>'AL',1893=>'AL',1894=>'AL',1895=>'AL',1896=>'AL',1897=>'AL',1898=>'AL',1899=>'AL',1900=>'AL',1901=>'AL',1920=>'AL',1921=>'AL',1922=>'AL',1923=>'AL',1924=>'AL',1925=>'AL',1926=>'AL',1927=>'AL',1928=>'AL',1929=>'AL',1930=>'AL',1931=>'AL',1932=>'AL',1933=>'AL',1934=>'AL',1935=>'AL',1936=>'AL',1937=>'AL',1938=>'AL',1939=>'AL',1940=>'AL',1941=>'AL',1942=>'AL',1943=>'AL',1944=>'AL',1945=>'AL',1946=>'AL',1947=>'AL',1948=>'AL',1949=>'AL',1950=>'AL',1951=>'AL',1952=>'AL',1953=>'AL',1954=>'AL',1955=>'AL',1956=>'AL',1957=>'AL',1958=>'NSM',1959=>'NSM',1960=>'NSM',1961=>'NSM',1962=>'NSM',1963=>'NSM',1964=>'NSM',1965=>'NSM',1966=>'NSM',1967=>'NSM',1968=>'NSM',1969=>'AL',1984=>'R',1985=>'R',1986=>'R',1987=>'R',1988=>'R',1989=>'R',1990=>'R',1991=>'R',1992=>'R',1993=>'R',1994=>'R',1995=>'R',1996=>'R',1997=>'R',1998=>'R',1999=>'R',2000=>'R',2001=>'R',2002=>'R',2003=>'R',2004=>'R',2005=>'R',2006=>'R',2007=>'R',2008=>'R',2009=>'R',2010=>'R',2011=>'R',2012=>'R',2013=>'R',2014=>'R',2015=>'R',2016=>'R',2017=>'R',2018=>'R',2019=>'R',2020=>'R',2021=>'R',2022=>'R',2023=>'R',2024=>'R',2025=>'R',2026=>'R',2027=>'NSM',2028=>'NSM',2029=>'NSM',2030=>'NSM',2031=>'NSM',2032=>'NSM',2033=>'NSM',2034=>'NSM',2035=>'NSM',2036=>'R',2037=>'R',2038=>'ON',2039=>'ON',2040=>'ON',2041=>'ON',2042=>'R',2305=>'NSM',2306=>'NSM',2307=>'L',2308=>'L',2309=>'L',2310=>'L',2311=>'L',2312=>'L',2313=>'L',2314=>'L',2315=>'L',2316=>'L',2317=>'L',2318=>'L',2319=>'L',2320=>'L',2321=>'L',2322=>'L',2323=>'L',2324=>'L',2325=>'L',2326=>'L',2327=>'L',2328=>'L',2329=>'L',2330=>'L',2331=>'L',2332=>'L',2333=>'L',2334=>'L',2335=>'L',2336=>'L',2337=>'L',2338=>'L',2339=>'L',2340=>'L',2341=>'L',2342=>'L',2343=>'L',2344=>'L',2345=>'L',2346=>'L',2347=>'L',2348=>'L',2349=>'L',2350=>'L',2351=>'L',2352=>'L',2353=>'L',2354=>'L',2355=>'L',2356=>'L',2357=>'L',2358=>'L',2359=>'L',2360=>'L',2361=>'L',2364=>'NSM',2365=>'L',2366=>'L',2367=>'L',2368=>'L',2369=>'NSM',2370=>'NSM',2371=>'NSM',2372=>'NSM',2373=>'NSM',2374=>'NSM',2375=>'NSM',2376=>'NSM',2377=>'L',2378=>'L',2379=>'L',2380=>'L',2381=>'NSM',2384=>'L',2385=>'NSM',2386=>'NSM',2387=>'NSM',2388=>'NSM',2392=>'L',2393=>'L',2394=>'L',2395=>'L',2396=>'L',2397=>'L',2398=>'L',2399=>'L',2400=>'L',2401=>'L',2402=>'NSM',2403=>'NSM',2404=>'L',2405=>'L',2406=>'L',2407=>'L',2408=>'L',2409=>'L',2410=>'L',2411=>'L',2412=>'L',2413=>'L',2414=>'L',2415=>'L',2416=>'L',2427=>'L',2428=>'L',2429=>'L',2430=>'L',2431=>'L',2433=>'NSM',2434=>'L',2435=>'L',2437=>'L',2438=>'L',2439=>'L',2440=>'L',2441=>'L',2442=>'L',2443=>'L',2444=>'L',2447=>'L',2448=>'L',2451=>'L',2452=>'L',2453=>'L',2454=>'L',2455=>'L',2456=>'L',2457=>'L',2458=>'L',2459=>'L',2460=>'L',2461=>'L',2462=>'L',2463=>'L',2464=>'L',2465=>'L',2466=>'L',2467=>'L',2468=>'L',2469=>'L',2470=>'L',2471=>'L',2472=>'L',2474=>'L',2475=>'L',2476=>'L',2477=>'L',2478=>'L',2479=>'L',2480=>'L',2482=>'L',2486=>'L',2487=>'L',2488=>'L',2489=>'L',2492=>'NSM',2493=>'L',2494=>'L',2495=>'L',2496=>'L',2497=>'NSM',2498=>'NSM',2499=>'NSM',2500=>'NSM',2503=>'L',2504=>'L',2507=>'L',2508=>'L',2509=>'NSM',2510=>'L',2519=>'L',2524=>'L',2525=>'L',2527=>'L',2528=>'L',2529=>'L',2530=>'NSM',2531=>'NSM',2534=>'L',2535=>'L',2536=>'L',2537=>'L',2538=>'L',2539=>'L',2540=>'L',2541=>'L',2542=>'L',2543=>'L',2544=>'L',2545=>'L',2546=>'ET',2547=>'ET',2548=>'L',2549=>'L',2550=>'L',2551=>'L',2552=>'L',2553=>'L',2554=>'L',2561=>'NSM',2562=>'NSM',2563=>'L',2565=>'L',2566=>'L',2567=>'L',2568=>'L',2569=>'L',2570=>'L',2575=>'L',2576=>'L',2579=>'L',2580=>'L',2581=>'L',2582=>'L',2583=>'L',2584=>'L',2585=>'L',2586=>'L',2587=>'L',2588=>'L',2589=>'L',2590=>'L',2591=>'L',2592=>'L',2593=>'L',2594=>'L',2595=>'L',2596=>'L',2597=>'L',2598=>'L',2599=>'L',2600=>'L',2602=>'L',2603=>'L',2604=>'L',2605=>'L',2606=>'L',2607=>'L',2608=>'L',2610=>'L',2611=>'L',2613=>'L',2614=>'L',2616=>'L',2617=>'L',2620=>'NSM',2622=>'L',2623=>'L',2624=>'L',2625=>'NSM',2626=>'NSM',2631=>'NSM',2632=>'NSM',2635=>'NSM',2636=>'NSM',2637=>'NSM',2649=>'L',2650=>'L',2651=>'L',2652=>'L',2654=>'L',2662=>'L',2663=>'L',2664=>'L',2665=>'L',2666=>'L',2667=>'L',2668=>'L',2669=>'L',2670=>'L',2671=>'L',2672=>'NSM',2673=>'NSM',2674=>'L',2675=>'L',2676=>'L',2689=>'NSM',2690=>'NSM',2691=>'L',2693=>'L',2694=>'L',2695=>'L',2696=>'L',2697=>'L',2698=>'L',2699=>'L',2700=>'L',2701=>'L',2703=>'L',2704=>'L',2705=>'L',2707=>'L',2708=>'L',2709=>'L',2710=>'L',2711=>'L',2712=>'L',2713=>'L',2714=>'L',2715=>'L',2716=>'L',2717=>'L',2718=>'L',2719=>'L',2720=>'L',2721=>'L',2722=>'L',2723=>'L',2724=>'L',2725=>'L',2726=>'L',2727=>'L',2728=>'L',2730=>'L',2731=>'L',2732=>'L',2733=>'L',2734=>'L',2735=>'L',2736=>'L',2738=>'L',2739=>'L',2741=>'L',2742=>'L',2743=>'L',2744=>'L',2745=>'L',2748=>'NSM',2749=>'L',2750=>'L',2751=>'L',2752=>'L',2753=>'NSM',2754=>'NSM',2755=>'NSM',2756=>'NSM',2757=>'NSM',2759=>'NSM',2760=>'NSM',2761=>'L',2763=>'L',2764=>'L',2765=>'NSM',2768=>'L',2784=>'L',2785=>'L',2786=>'NSM',2787=>'NSM',2790=>'L',2791=>'L',2792=>'L',2793=>'L',2794=>'L',2795=>'L',2796=>'L',2797=>'L',2798=>'L',2799=>'L',2801=>'ET',2817=>'NSM',2818=>'L',2819=>'L',2821=>'L',2822=>'L',2823=>'L',2824=>'L',2825=>'L',2826=>'L',2827=>'L',2828=>'L',2831=>'L',2832=>'L',2835=>'L',2836=>'L',2837=>'L',2838=>'L',2839=>'L',2840=>'L',2841=>'L',2842=>'L',2843=>'L',2844=>'L',2845=>'L',2846=>'L',2847=>'L',2848=>'L',2849=>'L',2850=>'L',2851=>'L',2852=>'L',2853=>'L',2854=>'L',2855=>'L',2856=>'L',2858=>'L',2859=>'L',2860=>'L',2861=>'L',2862=>'L',2863=>'L',2864=>'L',2866=>'L',2867=>'L',2869=>'L',2870=>'L',2871=>'L',2872=>'L',2873=>'L',2876=>'NSM',2877=>'L',2878=>'L',2879=>'NSM',2880=>'L',2881=>'NSM',2882=>'NSM',2883=>'NSM',2887=>'L',2888=>'L',2891=>'L',2892=>'L',2893=>'NSM',2902=>'NSM',2903=>'L',2908=>'L',2909=>'L',2911=>'L',2912=>'L',2913=>'L',2918=>'L',2919=>'L',2920=>'L',2921=>'L',2922=>'L',2923=>'L',2924=>'L',2925=>'L',2926=>'L',2927=>'L',2928=>'L',2929=>'L',2946=>'NSM',2947=>'L',2949=>'L',2950=>'L',2951=>'L',2952=>'L',2953=>'L',2954=>'L',2958=>'L',2959=>'L',2960=>'L',2962=>'L',2963=>'L',2964=>'L',2965=>'L',2969=>'L',2970=>'L',2972=>'L',2974=>'L',2975=>'L',2979=>'L',2980=>'L',2984=>'L',2985=>'L',2986=>'L',2990=>'L',2991=>'L',2992=>'L',2993=>'L',2994=>'L',2995=>'L',2996=>'L',2997=>'L',2998=>'L',2999=>'L',3000=>'L',3001=>'L',3006=>'L',3007=>'L',3008=>'NSM',3009=>'L',3010=>'L',3014=>'L',3015=>'L',3016=>'L',3018=>'L',3019=>'L',3020=>'L',3021=>'NSM',3031=>'L',3046=>'L',3047=>'L',3048=>'L',3049=>'L',3050=>'L',3051=>'L',3052=>'L',3053=>'L',3054=>'L',3055=>'L',3056=>'L',3057=>'L',3058=>'L',3059=>'ON',3060=>'ON',3061=>'ON',3062=>'ON',3063=>'ON',3064=>'ON',3065=>'ET',3066=>'ON',3073=>'L',3074=>'L',3075=>'L',3077=>'L',3078=>'L',3079=>'L',3080=>'L',3081=>'L',3082=>'L',3083=>'L',3084=>'L',3086=>'L',3087=>'L',3088=>'L',3090=>'L',3091=>'L',3092=>'L',3093=>'L',3094=>'L',3095=>'L',3096=>'L',3097=>'L',3098=>'L',3099=>'L',3100=>'L',3101=>'L',3102=>'L',3103=>'L',3104=>'L',3105=>'L',3106=>'L',3107=>'L',3108=>'L',3109=>'L',3110=>'L',3111=>'L',3112=>'L',3114=>'L',3115=>'L',3116=>'L',3117=>'L',3118=>'L',3119=>'L',3120=>'L',3121=>'L',3122=>'L',3123=>'L',3125=>'L',3126=>'L',3127=>'L',3128=>'L',3129=>'L',3134=>'NSM',3135=>'NSM',3136=>'NSM',3137=>'L',3138=>'L',3139=>'L',3140=>'L',3142=>'NSM',3143=>'NSM',3144=>'NSM',3146=>'NSM',3147=>'NSM',3148=>'NSM',3149=>'NSM',3157=>'NSM',3158=>'NSM',3168=>'L',3169=>'L',3174=>'L',3175=>'L',3176=>'L',3177=>'L',3178=>'L',3179=>'L',3180=>'L',3181=>'L',3182=>'L',3183=>'L',3202=>'L',3203=>'L',3205=>'L',3206=>'L',3207=>'L',3208=>'L',3209=>'L',3210=>'L',3211=>'L',3212=>'L',3214=>'L',3215=>'L',3216=>'L',3218=>'L',3219=>'L',3220=>'L',3221=>'L',3222=>'L',3223=>'L',3224=>'L',3225=>'L',3226=>'L',3227=>'L',3228=>'L',3229=>'L',3230=>'L',3231=>'L',3232=>'L',3233=>'L',3234=>'L',3235=>'L',3236=>'L',3237=>'L',3238=>'L',3239=>'L',3240=>'L',3242=>'L',3243=>'L',3244=>'L',3245=>'L',3246=>'L',3247=>'L',3248=>'L',3249=>'L',3250=>'L',3251=>'L',3253=>'L',3254=>'L',3255=>'L',3256=>'L',3257=>'L',3260=>'NSM',3261=>'L',3262=>'L',3263=>'L',3264=>'L',3265=>'L',3266=>'L',3267=>'L',3268=>'L',3270=>'L',3271=>'L',3272=>'L',3274=>'L',3275=>'L',3276=>'NSM',3277=>'NSM',3285=>'L',3286=>'L',3294=>'L',3296=>'L',3297=>'L',3298=>'NSM',3299=>'NSM',3302=>'L',3303=>'L',3304=>'L',3305=>'L',3306=>'L',3307=>'L',3308=>'L',3309=>'L',3310=>'L',3311=>'L',3313=>'ON',3314=>'ON',3330=>'L',3331=>'L',3333=>'L',3334=>'L',3335=>'L',3336=>'L',3337=>'L',3338=>'L',3339=>'L',3340=>'L',3342=>'L',3343=>'L',3344=>'L',3346=>'L',3347=>'L',3348=>'L',3349=>'L',3350=>'L',3351=>'L',3352=>'L',3353=>'L',3354=>'L',3355=>'L',3356=>'L',3357=>'L',3358=>'L',3359=>'L',3360=>'L',3361=>'L',3362=>'L',3363=>'L',3364=>'L',3365=>'L',3366=>'L',3367=>'L',3368=>'L',3370=>'L',3371=>'L',3372=>'L',3373=>'L',3374=>'L',3375=>'L',3376=>'L',3377=>'L',3378=>'L',3379=>'L',3380=>'L',3381=>'L',3382=>'L',3383=>'L',3384=>'L',3385=>'L',3390=>'L',3391=>'L',3392=>'L',3393=>'NSM',3394=>'NSM',3395=>'NSM',3398=>'L',3399=>'L',3400=>'L',3402=>'L',3403=>'L',3404=>'L',3405=>'NSM',3415=>'L',3424=>'L',3425=>'L',3430=>'L',3431=>'L',3432=>'L',3433=>'L',3434=>'L',3435=>'L',3436=>'L',3437=>'L',3438=>'L',3439=>'L',3458=>'L',3459=>'L',3461=>'L',3462=>'L',3463=>'L',3464=>'L',3465=>'L',3466=>'L',3467=>'L',3468=>'L',3469=>'L',3470=>'L',3471=>'L',3472=>'L',3473=>'L',3474=>'L',3475=>'L',3476=>'L',3477=>'L',3478=>'L',3482=>'L',3483=>'L',3484=>'L',3485=>'L',3486=>'L',3487=>'L',3488=>'L',3489=>'L',3490=>'L',3491=>'L',3492=>'L',3493=>'L',3494=>'L',3495=>'L',3496=>'L',3497=>'L',3498=>'L',3499=>'L',3500=>'L',3501=>'L',3502=>'L',3503=>'L',3504=>'L',3505=>'L',3507=>'L',3508=>'L',3509=>'L',3510=>'L',3511=>'L',3512=>'L',3513=>'L',3514=>'L',3515=>'L',3517=>'L',3520=>'L',3521=>'L',3522=>'L',3523=>'L',3524=>'L',3525=>'L',3526=>'L',3530=>'NSM',3535=>'L',3536=>'L',3537=>'L',3538=>'NSM',3539=>'NSM',3540=>'NSM',3542=>'NSM',3544=>'L',3545=>'L',3546=>'L',3547=>'L',3548=>'L',3549=>'L',3550=>'L',3551=>'L',3570=>'L',3571=>'L',3572=>'L',3585=>'L',3586=>'L',3587=>'L',3588=>'L',3589=>'L',3590=>'L',3591=>'L',3592=>'L',3593=>'L',3594=>'L',3595=>'L',3596=>'L',3597=>'L',3598=>'L',3599=>'L',3600=>'L',3601=>'L',3602=>'L',3603=>'L',3604=>'L',3605=>'L',3606=>'L',3607=>'L',3608=>'L',3609=>'L',3610=>'L',3611=>'L',3612=>'L',3613=>'L',3614=>'L',3615=>'L',3616=>'L',3617=>'L',3618=>'L',3619=>'L',3620=>'L',3621=>'L',3622=>'L',3623=>'L',3624=>'L',3625=>'L',3626=>'L',3627=>'L',3628=>'L',3629=>'L',3630=>'L',3631=>'L',3632=>'L',3633=>'NSM',3634=>'L',3635=>'L',3636=>'NSM',3637=>'NSM',3638=>'NSM',3639=>'NSM',3640=>'NSM',3641=>'NSM',3642=>'NSM',3647=>'ET',3648=>'L',3649=>'L',3650=>'L',3651=>'L',3652=>'L',3653=>'L',3654=>'L',3655=>'NSM',3656=>'NSM',3657=>'NSM',3658=>'NSM',3659=>'NSM',3660=>'NSM',3661=>'NSM',3662=>'NSM',3663=>'L',3664=>'L',3665=>'L',3666=>'L',3667=>'L',3668=>'L',3669=>'L',3670=>'L',3671=>'L',3672=>'L',3673=>'L',3674=>'L',3675=>'L',3713=>'L',3714=>'L',3716=>'L',3719=>'L',3720=>'L',3722=>'L',3725=>'L',3732=>'L',3733=>'L',3734=>'L',3735=>'L',3737=>'L',3738=>'L',3739=>'L',3740=>'L',3741=>'L',3742=>'L',3743=>'L',3745=>'L',3746=>'L',3747=>'L',3749=>'L',3751=>'L',3754=>'L',3755=>'L',3757=>'L',3758=>'L',3759=>'L',3760=>'L',3761=>'NSM',3762=>'L',3763=>'L',3764=>'NSM',3765=>'NSM',3766=>'NSM',3767=>'NSM',3768=>'NSM',3769=>'NSM',3771=>'NSM',3772=>'NSM',3773=>'L',3776=>'L',3777=>'L',3778=>'L',3779=>'L',3780=>'L',3782=>'L',3784=>'NSM',3785=>'NSM',3786=>'NSM',3787=>'NSM',3788=>'NSM',3789=>'NSM',3792=>'L',3793=>'L',3794=>'L',3795=>'L',3796=>'L',3797=>'L',3798=>'L',3799=>'L',3800=>'L',3801=>'L',3804=>'L',3805=>'L',3840=>'L',3841=>'L',3842=>'L',3843=>'L',3844=>'L',3845=>'L',3846=>'L',3847=>'L',3848=>'L',3849=>'L',3850=>'L',3851=>'L',3852=>'L',3853=>'L',3854=>'L',3855=>'L',3856=>'L',3857=>'L',3858=>'L',3859=>'L',3860=>'L',3861=>'L',3862=>'L',3863=>'L',3864=>'NSM',3865=>'NSM',3866=>'L',3867=>'L',3868=>'L',3869=>'L',3870=>'L',3871=>'L',3872=>'L',3873=>'L',3874=>'L',3875=>'L',3876=>'L',3877=>'L',3878=>'L',3879=>'L',3880=>'L',3881=>'L',3882=>'L',3883=>'L',3884=>'L',3885=>'L',3886=>'L',3887=>'L',3888=>'L',3889=>'L',3890=>'L',3891=>'L',3892=>'L',3893=>'NSM',3894=>'L',3895=>'NSM',3896=>'L',3897=>'NSM',3898=>'ON',3899=>'ON',3900=>'ON',3901=>'ON',3902=>'L',3903=>'L',3904=>'L',3905=>'L',3906=>'L',3907=>'L',3908=>'L',3909=>'L',3910=>'L',3911=>'L',3913=>'L',3914=>'L',3915=>'L',3916=>'L',3917=>'L',3918=>'L',3919=>'L',3920=>'L',3921=>'L',3922=>'L',3923=>'L',3924=>'L',3925=>'L',3926=>'L',3927=>'L',3928=>'L',3929=>'L',3930=>'L',3931=>'L',3932=>'L',3933=>'L',3934=>'L',3935=>'L',3936=>'L',3937=>'L',3938=>'L',3939=>'L',3940=>'L',3941=>'L',3942=>'L',3943=>'L',3944=>'L',3945=>'L',3946=>'L',3953=>'NSM',3954=>'NSM',3955=>'NSM',3956=>'NSM',3957=>'NSM',3958=>'NSM',3959=>'NSM',3960=>'NSM',3961=>'NSM',3962=>'NSM',3963=>'NSM',3964=>'NSM',3965=>'NSM',3966=>'NSM',3967=>'L',3968=>'NSM',3969=>'NSM',3970=>'NSM',3971=>'NSM',3972=>'NSM',3973=>'L',3974=>'NSM',3975=>'NSM',3976=>'L',3977=>'L',3978=>'L',3979=>'L',3984=>'NSM',3985=>'NSM',3986=>'NSM',3987=>'NSM',3988=>'NSM',3989=>'NSM',3990=>'NSM',3991=>'NSM',3993=>'NSM',3994=>'NSM',3995=>'NSM',3996=>'NSM',3997=>'NSM',3998=>'NSM',3999=>'NSM',4000=>'NSM',4001=>'NSM',4002=>'NSM',4003=>'NSM',4004=>'NSM',4005=>'NSM',4006=>'NSM',4007=>'NSM',4008=>'NSM',4009=>'NSM',4010=>'NSM',4011=>'NSM',4012=>'NSM',4013=>'NSM',4014=>'NSM',4015=>'NSM',4016=>'NSM',4017=>'NSM',4018=>'NSM',4019=>'NSM',4020=>'NSM',4021=>'NSM',4022=>'NSM',4023=>'NSM',4024=>'NSM',4025=>'NSM',4026=>'NSM',4027=>'NSM',4028=>'NSM',4030=>'L',4031=>'L',4032=>'L',4033=>'L',4034=>'L',4035=>'L',4036=>'L',4037=>'L',4038=>'NSM',4039=>'L',4040=>'L',4041=>'L',4042=>'L',4043=>'L',4044=>'L',4047=>'L',4048=>'L',4049=>'L',4096=>'L',4097=>'L',4098=>'L',4099=>'L',4100=>'L',4101=>'L',4102=>'L',4103=>'L',4104=>'L',4105=>'L',4106=>'L',4107=>'L',4108=>'L',4109=>'L',4110=>'L',4111=>'L',4112=>'L',4113=>'L',4114=>'L',4115=>'L',4116=>'L',4117=>'L',4118=>'L',4119=>'L',4120=>'L',4121=>'L',4122=>'L',4123=>'L',4124=>'L',4125=>'L',4126=>'L',4127=>'L',4128=>'L',4129=>'L',4131=>'L',4132=>'L',4133=>'L',4134=>'L',4135=>'L',4137=>'L',4138=>'L',4140=>'L',4141=>'NSM',4142=>'NSM',4143=>'NSM',4144=>'NSM',4145=>'L',4146=>'NSM',4150=>'NSM',4151=>'NSM',4152=>'L',4153=>'NSM',4160=>'L',4161=>'L',4162=>'L',4163=>'L',4164=>'L',4165=>'L',4166=>'L',4167=>'L',4168=>'L',4169=>'L',4170=>'L',4171=>'L',4172=>'L',4173=>'L',4174=>'L',4175=>'L',4176=>'L',4177=>'L',4178=>'L',4179=>'L',4180=>'L',4181=>'L',4182=>'L',4183=>'L',4184=>'NSM',4185=>'NSM',4256=>'L',4257=>'L',4258=>'L',4259=>'L',4260=>'L',4261=>'L',4262=>'L',4263=>'L',4264=>'L',4265=>'L',4266=>'L',4267=>'L',4268=>'L',4269=>'L',4270=>'L',4271=>'L',4272=>'L',4273=>'L',4274=>'L',4275=>'L',4276=>'L',4277=>'L',4278=>'L',4279=>'L',4280=>'L',4281=>'L',4282=>'L',4283=>'L',4284=>'L',4285=>'L',4286=>'L',4287=>'L',4288=>'L',4289=>'L',4290=>'L',4291=>'L',4292=>'L',4293=>'L',4304=>'L',4305=>'L',4306=>'L',4307=>'L',4308=>'L',4309=>'L',4310=>'L',4311=>'L',4312=>'L',4313=>'L',4314=>'L',4315=>'L',4316=>'L',4317=>'L',4318=>'L',4319=>'L',4320=>'L',4321=>'L',4322=>'L',4323=>'L',4324=>'L',4325=>'L',4326=>'L',4327=>'L',4328=>'L',4329=>'L',4330=>'L',4331=>'L',4332=>'L',4333=>'L',4334=>'L',4335=>'L',4336=>'L',4337=>'L',4338=>'L',4339=>'L',4340=>'L',4341=>'L',4342=>'L',4343=>'L',4344=>'L',4345=>'L',4346=>'L',4347=>'L',4348=>'L',4352=>'L',4353=>'L',4354=>'L',4355=>'L',4356=>'L',4357=>'L',4358=>'L',4359=>'L',4360=>'L',4361=>'L',4362=>'L',4363=>'L',4364=>'L',4365=>'L',4366=>'L',4367=>'L',4368=>'L',4369=>'L',4370=>'L',4371=>'L',4372=>'L',4373=>'L',4374=>'L',4375=>'L',4376=>'L',4377=>'L',4378=>'L',4379=>'L',4380=>'L',4381=>'L',4382=>'L',4383=>'L',4384=>'L',4385=>'L',4386=>'L',4387=>'L',4388=>'L',4389=>'L',4390=>'L',4391=>'L',4392=>'L',4393=>'L',4394=>'L',4395=>'L',4396=>'L',4397=>'L',4398=>'L',4399=>'L',4400=>'L',4401=>'L',4402=>'L',4403=>'L',4404=>'L',4405=>'L',4406=>'L',4407=>'L',4408=>'L',4409=>'L',4410=>'L',4411=>'L',4412=>'L',4413=>'L',4414=>'L',4415=>'L',4416=>'L',4417=>'L',4418=>'L',4419=>'L',4420=>'L',4421=>'L',4422=>'L',4423=>'L',4424=>'L',4425=>'L',4426=>'L',4427=>'L',4428=>'L',4429=>'L',4430=>'L',4431=>'L',4432=>'L',4433=>'L',4434=>'L',4435=>'L',4436=>'L',4437=>'L',4438=>'L',4439=>'L',4440=>'L',4441=>'L',4447=>'L',4448=>'L',4449=>'L',4450=>'L',4451=>'L',4452=>'L',4453=>'L',4454=>'L',4455=>'L',4456=>'L',4457=>'L',4458=>'L',4459=>'L',4460=>'L',4461=>'L',4462=>'L',4463=>'L',4464=>'L',4465=>'L',4466=>'L',4467=>'L',4468=>'L',4469=>'L',4470=>'L',4471=>'L',4472=>'L',4473=>'L',4474=>'L',4475=>'L',4476=>'L',4477=>'L',4478=>'L',4479=>'L',4480=>'L',4481=>'L',4482=>'L',4483=>'L',4484=>'L',4485=>'L',4486=>'L',4487=>'L',4488=>'L',4489=>'L',4490=>'L',4491=>'L',4492=>'L',4493=>'L',4494=>'L',4495=>'L',4496=>'L',4497=>'L',4498=>'L',4499=>'L',4500=>'L',4501=>'L',4502=>'L',4503=>'L',4504=>'L',4505=>'L',4506=>'L',4507=>'L',4508=>'L',4509=>'L',4510=>'L',4511=>'L',4512=>'L',4513=>'L',4514=>'L',4520=>'L',4521=>'L',4522=>'L',4523=>'L',4524=>'L',4525=>'L',4526=>'L',4527=>'L',4528=>'L',4529=>'L',4530=>'L',4531=>'L',4532=>'L',4533=>'L',4534=>'L',4535=>'L',4536=>'L',4537=>'L',4538=>'L',4539=>'L',4540=>'L',4541=>'L',4542=>'L',4543=>'L',4544=>'L',4545=>'L',4546=>'L',4547=>'L',4548=>'L',4549=>'L',4550=>'L',4551=>'L',4552=>'L',4553=>'L',4554=>'L',4555=>'L',4556=>'L',4557=>'L',4558=>'L',4559=>'L',4560=>'L',4561=>'L',4562=>'L',4563=>'L',4564=>'L',4565=>'L',4566=>'L',4567=>'L',4568=>'L',4569=>'L',4570=>'L',4571=>'L',4572=>'L',4573=>'L',4574=>'L',4575=>'L',4576=>'L',4577=>'L',4578=>'L',4579=>'L',4580=>'L',4581=>'L',4582=>'L',4583=>'L',4584=>'L',4585=>'L',4586=>'L',4587=>'L',4588=>'L',4589=>'L',4590=>'L',4591=>'L',4592=>'L',4593=>'L',4594=>'L',4595=>'L',4596=>'L',4597=>'L',4598=>'L',4599=>'L',4600=>'L',4601=>'L',4608=>'L',4609=>'L',4610=>'L',4611=>'L',4612=>'L',4613=>'L',4614=>'L',4615=>'L',4616=>'L',4617=>'L',4618=>'L',4619=>'L',4620=>'L',4621=>'L',4622=>'L',4623=>'L',4624=>'L',4625=>'L',4626=>'L',4627=>'L',4628=>'L',4629=>'L',4630=>'L',4631=>'L',4632=>'L',4633=>'L',4634=>'L',4635=>'L',4636=>'L',4637=>'L',4638=>'L',4639=>'L',4640=>'L',4641=>'L',4642=>'L',4643=>'L',4644=>'L',4645=>'L',4646=>'L',4647=>'L',4648=>'L',4649=>'L',4650=>'L',4651=>'L',4652=>'L',4653=>'L',4654=>'L',4655=>'L',4656=>'L',4657=>'L',4658=>'L',4659=>'L',4660=>'L',4661=>'L',4662=>'L',4663=>'L',4664=>'L',4665=>'L',4666=>'L',4667=>'L',4668=>'L',4669=>'L',4670=>'L',4671=>'L',4672=>'L',4673=>'L',4674=>'L',4675=>'L',4676=>'L',4677=>'L',4678=>'L',4679=>'L',4680=>'L',4682=>'L',4683=>'L',4684=>'L',4685=>'L',4688=>'L',4689=>'L',4690=>'L',4691=>'L',4692=>'L',4693=>'L',4694=>'L',4696=>'L',4698=>'L',4699=>'L',4700=>'L',4701=>'L',4704=>'L',4705=>'L',4706=>'L',4707=>'L',4708=>'L',4709=>'L',4710=>'L',4711=>'L',4712=>'L',4713=>'L',4714=>'L',4715=>'L',4716=>'L',4717=>'L',4718=>'L',4719=>'L',4720=>'L',4721=>'L',4722=>'L',4723=>'L',4724=>'L',4725=>'L',4726=>'L',4727=>'L',4728=>'L',4729=>'L',4730=>'L',4731=>'L',4732=>'L',4733=>'L',4734=>'L',4735=>'L',4736=>'L',4737=>'L',4738=>'L',4739=>'L',4740=>'L',4741=>'L',4742=>'L',4743=>'L',4744=>'L',4746=>'L',4747=>'L',4748=>'L',4749=>'L',4752=>'L',4753=>'L',4754=>'L',4755=>'L',4756=>'L',4757=>'L',4758=>'L',4759=>'L',4760=>'L',4761=>'L',4762=>'L',4763=>'L',4764=>'L',4765=>'L',4766=>'L',4767=>'L',4768=>'L',4769=>'L',4770=>'L',4771=>'L',4772=>'L',4773=>'L',4774=>'L',4775=>'L',4776=>'L',4777=>'L',4778=>'L',4779=>'L',4780=>'L',4781=>'L',4782=>'L',4783=>'L',4784=>'L',4786=>'L',4787=>'L',4788=>'L',4789=>'L',4792=>'L',4793=>'L',4794=>'L',4795=>'L',4796=>'L',4797=>'L',4798=>'L',4800=>'L',4802=>'L',4803=>'L',4804=>'L',4805=>'L',4808=>'L',4809=>'L',4810=>'L',4811=>'L',4812=>'L',4813=>'L',4814=>'L',4815=>'L',4816=>'L',4817=>'L',4818=>'L',4819=>'L',4820=>'L',4821=>'L',4822=>'L',4824=>'L',4825=>'L',4826=>'L',4827=>'L',4828=>'L',4829=>'L',4830=>'L',4831=>'L',4832=>'L',4833=>'L',4834=>'L',4835=>'L',4836=>'L',4837=>'L',4838=>'L',4839=>'L',4840=>'L',4841=>'L',4842=>'L',4843=>'L',4844=>'L',4845=>'L',4846=>'L',4847=>'L',4848=>'L',4849=>'L',4850=>'L',4851=>'L',4852=>'L',4853=>'L',4854=>'L',4855=>'L',4856=>'L',4857=>'L',4858=>'L',4859=>'L',4860=>'L',4861=>'L',4862=>'L',4863=>'L',4864=>'L',4865=>'L',4866=>'L',4867=>'L',4868=>'L',4869=>'L',4870=>'L',4871=>'L',4872=>'L',4873=>'L',4874=>'L',4875=>'L',4876=>'L',4877=>'L',4878=>'L',4879=>'L',4880=>'L',4882=>'L',4883=>'L',4884=>'L',4885=>'L',4888=>'L',4889=>'L',4890=>'L',4891=>'L',4892=>'L',4893=>'L',4894=>'L',4895=>'L',4896=>'L',4897=>'L',4898=>'L',4899=>'L',4900=>'L',4901=>'L',4902=>'L',4903=>'L',4904=>'L',4905=>'L',4906=>'L',4907=>'L',4908=>'L',4909=>'L',4910=>'L',4911=>'L',4912=>'L',4913=>'L',4914=>'L',4915=>'L',4916=>'L',4917=>'L',4918=>'L',4919=>'L',4920=>'L',4921=>'L',4922=>'L',4923=>'L',4924=>'L',4925=>'L',4926=>'L',4927=>'L',4928=>'L',4929=>'L',4930=>'L',4931=>'L',4932=>'L',4933=>'L',4934=>'L',4935=>'L',4936=>'L',4937=>'L',4938=>'L',4939=>'L',4940=>'L',4941=>'L',4942=>'L',4943=>'L',4944=>'L',4945=>'L',4946=>'L',4947=>'L',4948=>'L',4949=>'L',4950=>'L',4951=>'L',4952=>'L',4953=>'L',4954=>'L',4959=>'NSM',4960=>'L',4961=>'L',4962=>'L',4963=>'L',4964=>'L',4965=>'L',4966=>'L',4967=>'L',4968=>'L',4969=>'L',4970=>'L',4971=>'L',4972=>'L',4973=>'L',4974=>'L',4975=>'L',4976=>'L',4977=>'L',4978=>'L',4979=>'L',4980=>'L',4981=>'L',4982=>'L',4983=>'L',4984=>'L',4985=>'L',4986=>'L',4987=>'L',4988=>'L',4992=>'L',4993=>'L',4994=>'L',4995=>'L',4996=>'L',4997=>'L',4998=>'L',4999=>'L',5000=>'L',5001=>'L',5002=>'L',5003=>'L',5004=>'L',5005=>'L',5006=>'L',5007=>'L',5008=>'ON',5009=>'ON',5010=>'ON',5011=>'ON',5012=>'ON',5013=>'ON',5014=>'ON',5015=>'ON',5016=>'ON',5017=>'ON',5024=>'L',5025=>'L',5026=>'L',5027=>'L',5028=>'L',5029=>'L',5030=>'L',5031=>'L',5032=>'L',5033=>'L',5034=>'L',5035=>'L',5036=>'L',5037=>'L',5038=>'L',5039=>'L',5040=>'L',5041=>'L',5042=>'L',5043=>'L',5044=>'L',5045=>'L',5046=>'L',5047=>'L',5048=>'L',5049=>'L',5050=>'L',5051=>'L',5052=>'L',5053=>'L',5054=>'L',5055=>'L',5056=>'L',5057=>'L',5058=>'L',5059=>'L',5060=>'L',5061=>'L',5062=>'L',5063=>'L',5064=>'L',5065=>'L',5066=>'L',5067=>'L',5068=>'L',5069=>'L',5070=>'L',5071=>'L',5072=>'L',5073=>'L',5074=>'L',5075=>'L',5076=>'L',5077=>'L',5078=>'L',5079=>'L',5080=>'L',5081=>'L',5082=>'L',5083=>'L',5084=>'L',5085=>'L',5086=>'L',5087=>'L',5088=>'L',5089=>'L',5090=>'L',5091=>'L',5092=>'L',5093=>'L',5094=>'L',5095=>'L',5096=>'L',5097=>'L',5098=>'L',5099=>'L',5100=>'L',5101=>'L',5102=>'L',5103=>'L',5104=>'L',5105=>'L',5106=>'L',5107=>'L',5108=>'L',5121=>'L',5122=>'L',5123=>'L',5124=>'L',5125=>'L',5126=>'L',5127=>'L',5128=>'L',5129=>'L',5130=>'L',5131=>'L',5132=>'L',5133=>'L',5134=>'L',5135=>'L',5136=>'L',5137=>'L',5138=>'L',5139=>'L',5140=>'L',5141=>'L',5142=>'L',5143=>'L',5144=>'L',5145=>'L',5146=>'L',5147=>'L',5148=>'L',5149=>'L',5150=>'L',5151=>'L',5152=>'L',5153=>'L',5154=>'L',5155=>'L',5156=>'L',5157=>'L',5158=>'L',5159=>'L',5160=>'L',5161=>'L',5162=>'L',5163=>'L',5164=>'L',5165=>'L',5166=>'L',5167=>'L',5168=>'L',5169=>'L',5170=>'L',5171=>'L',5172=>'L',5173=>'L',5174=>'L',5175=>'L',5176=>'L',5177=>'L',5178=>'L',5179=>'L',5180=>'L',5181=>'L',5182=>'L',5183=>'L',5184=>'L',5185=>'L',5186=>'L',5187=>'L',5188=>'L',5189=>'L',5190=>'L',5191=>'L',5192=>'L',5193=>'L',5194=>'L',5195=>'L',5196=>'L',5197=>'L',5198=>'L',5199=>'L',5200=>'L',5201=>'L',5202=>'L',5203=>'L',5204=>'L',5205=>'L',5206=>'L',5207=>'L',5208=>'L',5209=>'L',5210=>'L',5211=>'L',5212=>'L',5213=>'L',5214=>'L',5215=>'L',5216=>'L',5217=>'L',5218=>'L',5219=>'L',5220=>'L',5221=>'L',5222=>'L',5223=>'L',5224=>'L',5225=>'L',5226=>'L',5227=>'L',5228=>'L',5229=>'L',5230=>'L',5231=>'L',5232=>'L',5233=>'L',5234=>'L',5235=>'L',5236=>'L',5237=>'L',5238=>'L',5239=>'L',5240=>'L',5241=>'L',5242=>'L',5243=>'L',5244=>'L',5245=>'L',5246=>'L',5247=>'L',5248=>'L',5249=>'L',5250=>'L',5251=>'L',5252=>'L',5253=>'L',5254=>'L',5255=>'L',5256=>'L',5257=>'L',5258=>'L',5259=>'L',5260=>'L',5261=>'L',5262=>'L',5263=>'L',5264=>'L',5265=>'L',5266=>'L',5267=>'L',5268=>'L',5269=>'L',5270=>'L',5271=>'L',5272=>'L',5273=>'L',5274=>'L',5275=>'L',5276=>'L',5277=>'L',5278=>'L',5279=>'L',5280=>'L',5281=>'L',5282=>'L',5283=>'L',5284=>'L',5285=>'L',5286=>'L',5287=>'L',5288=>'L',5289=>'L',5290=>'L',5291=>'L',5292=>'L',5293=>'L',5294=>'L',5295=>'L',5296=>'L',5297=>'L',5298=>'L',5299=>'L',5300=>'L',5301=>'L',5302=>'L',5303=>'L',5304=>'L',5305=>'L',5306=>'L',5307=>'L',5308=>'L',5309=>'L',5310=>'L',5311=>'L',5312=>'L',5313=>'L',5314=>'L',5315=>'L',5316=>'L',5317=>'L',5318=>'L',5319=>'L',5320=>'L',5321=>'L',5322=>'L',5323=>'L',5324=>'L',5325=>'L',5326=>'L',5327=>'L',5328=>'L',5329=>'L',5330=>'L',5331=>'L',5332=>'L',5333=>'L',5334=>'L',5335=>'L',5336=>'L',5337=>'L',5338=>'L',5339=>'L',5340=>'L',5341=>'L',5342=>'L',5343=>'L',5344=>'L',5345=>'L',5346=>'L',5347=>'L',5348=>'L',5349=>'L',5350=>'L',5351=>'L',5352=>'L',5353=>'L',5354=>'L',5355=>'L',5356=>'L',5357=>'L',5358=>'L',5359=>'L',5360=>'L',5361=>'L',5362=>'L',5363=>'L',5364=>'L',5365=>'L',5366=>'L',5367=>'L',5368=>'L',5369=>'L',5370=>'L',5371=>'L',5372=>'L',5373=>'L',5374=>'L',5375=>'L',5376=>'L',5377=>'L',5378=>'L',5379=>'L',5380=>'L',5381=>'L',5382=>'L',5383=>'L',5384=>'L',5385=>'L',5386=>'L',5387=>'L',5388=>'L',5389=>'L',5390=>'L',5391=>'L',5392=>'L',5393=>'L',5394=>'L',5395=>'L',5396=>'L',5397=>'L',5398=>'L',5399=>'L',5400=>'L',5401=>'L',5402=>'L',5403=>'L',5404=>'L',5405=>'L',5406=>'L',5407=>'L',5408=>'L',5409=>'L',5410=>'L',5411=>'L',5412=>'L',5413=>'L',5414=>'L',5415=>'L',5416=>'L',5417=>'L',5418=>'L',5419=>'L',5420=>'L',5421=>'L',5422=>'L',5423=>'L',5424=>'L',5425=>'L',5426=>'L',5427=>'L',5428=>'L',5429=>'L',5430=>'L',5431=>'L',5432=>'L',5433=>'L',5434=>'L',5435=>'L',5436=>'L',5437=>'L',5438=>'L',5439=>'L',5440=>'L',5441=>'L',5442=>'L',5443=>'L',5444=>'L',5445=>'L',5446=>'L',5447=>'L',5448=>'L',5449=>'L',5450=>'L',5451=>'L',5452=>'L',5453=>'L',5454=>'L',5455=>'L',5456=>'L',5457=>'L',5458=>'L',5459=>'L',5460=>'L',5461=>'L',5462=>'L',5463=>'L',5464=>'L',5465=>'L',5466=>'L',5467=>'L',5468=>'L',5469=>'L',5470=>'L',5471=>'L',5472=>'L',5473=>'L',5474=>'L',5475=>'L',5476=>'L',5477=>'L',5478=>'L',5479=>'L',5480=>'L',5481=>'L',5482=>'L',5483=>'L',5484=>'L',5485=>'L',5486=>'L',5487=>'L',5488=>'L',5489=>'L',5490=>'L',5491=>'L',5492=>'L',5493=>'L',5494=>'L',5495=>'L',5496=>'L',5497=>'L',5498=>'L',5499=>'L',5500=>'L',5501=>'L',5502=>'L',5503=>'L',5504=>'L',5505=>'L',5506=>'L',5507=>'L',5508=>'L',5509=>'L',5510=>'L',5511=>'L',5512=>'L',5513=>'L',5514=>'L',5515=>'L',5516=>'L',5517=>'L',5518=>'L',5519=>'L',5520=>'L',5521=>'L',5522=>'L',5523=>'L',5524=>'L',5525=>'L',5526=>'L',5527=>'L',5528=>'L',5529=>'L',5530=>'L',5531=>'L',5532=>'L',5533=>'L',5534=>'L',5535=>'L',5536=>'L',5537=>'L',5538=>'L',5539=>'L',5540=>'L',5541=>'L',5542=>'L',5543=>'L',5544=>'L',5545=>'L',5546=>'L',5547=>'L',5548=>'L',5549=>'L',5550=>'L',5551=>'L',5552=>'L',5553=>'L',5554=>'L',5555=>'L',5556=>'L',5557=>'L',5558=>'L',5559=>'L',5560=>'L',5561=>'L',5562=>'L',5563=>'L',5564=>'L',5565=>'L',5566=>'L',5567=>'L',5568=>'L',5569=>'L',5570=>'L',5571=>'L',5572=>'L',5573=>'L',5574=>'L',5575=>'L',5576=>'L',5577=>'L',5578=>'L',5579=>'L',5580=>'L',5581=>'L',5582=>'L',5583=>'L',5584=>'L',5585=>'L',5586=>'L',5587=>'L',5588=>'L',5589=>'L',5590=>'L',5591=>'L',5592=>'L',5593=>'L',5594=>'L',5595=>'L',5596=>'L',5597=>'L',5598=>'L',5599=>'L',5600=>'L',5601=>'L',5602=>'L',5603=>'L',5604=>'L',5605=>'L',5606=>'L',5607=>'L',5608=>'L',5609=>'L',5610=>'L',5611=>'L',5612=>'L',5613=>'L',5614=>'L',5615=>'L',5616=>'L',5617=>'L',5618=>'L',5619=>'L',5620=>'L',5621=>'L',5622=>'L',5623=>'L',5624=>'L',5625=>'L',5626=>'L',5627=>'L',5628=>'L',5629=>'L',5630=>'L',5631=>'L',5632=>'L',5633=>'L',5634=>'L',5635=>'L',5636=>'L',5637=>'L',5638=>'L',5639=>'L',5640=>'L',5641=>'L',5642=>'L',5643=>'L',5644=>'L',5645=>'L',5646=>'L',5647=>'L',5648=>'L',5649=>'L',5650=>'L',5651=>'L',5652=>'L',5653=>'L',5654=>'L',5655=>'L',5656=>'L',5657=>'L',5658=>'L',5659=>'L',5660=>'L',5661=>'L',5662=>'L',5663=>'L',5664=>'L',5665=>'L',5666=>'L',5667=>'L',5668=>'L',5669=>'L',5670=>'L',5671=>'L',5672=>'L',5673=>'L',5674=>'L',5675=>'L',5676=>'L',5677=>'L',5678=>'L',5679=>'L',5680=>'L',5681=>'L',5682=>'L',5683=>'L',5684=>'L',5685=>'L',5686=>'L',5687=>'L',5688=>'L',5689=>'L',5690=>'L',5691=>'L',5692=>'L',5693=>'L',5694=>'L',5695=>'L',5696=>'L',5697=>'L',5698=>'L',5699=>'L',5700=>'L',5701=>'L',5702=>'L',5703=>'L',5704=>'L',5705=>'L',5706=>'L',5707=>'L',5708=>'L',5709=>'L',5710=>'L',5711=>'L',5712=>'L',5713=>'L',5714=>'L',5715=>'L',5716=>'L',5717=>'L',5718=>'L',5719=>'L',5720=>'L',5721=>'L',5722=>'L',5723=>'L',5724=>'L',5725=>'L',5726=>'L',5727=>'L',5728=>'L',5729=>'L',5730=>'L',5731=>'L',5732=>'L',5733=>'L',5734=>'L',5735=>'L',5736=>'L',5737=>'L',5738=>'L',5739=>'L',5740=>'L',5741=>'L',5742=>'L',5743=>'L',5744=>'L',5745=>'L',5746=>'L',5747=>'L',5748=>'L',5749=>'L',5750=>'L',5760=>'WS',5761=>'L',5762=>'L',5763=>'L',5764=>'L',5765=>'L',5766=>'L',5767=>'L',5768=>'L',5769=>'L',5770=>'L',5771=>'L',5772=>'L',5773=>'L',5774=>'L',5775=>'L',5776=>'L',5777=>'L',5778=>'L',5779=>'L',5780=>'L',5781=>'L',5782=>'L',5783=>'L',5784=>'L',5785=>'L',5786=>'L',5787=>'ON',5788=>'ON',5792=>'L',5793=>'L',5794=>'L',5795=>'L',5796=>'L',5797=>'L',5798=>'L',5799=>'L',5800=>'L',5801=>'L',5802=>'L',5803=>'L',5804=>'L',5805=>'L',5806=>'L',5807=>'L',5808=>'L',5809=>'L',5810=>'L',5811=>'L',5812=>'L',5813=>'L',5814=>'L',5815=>'L',5816=>'L',5817=>'L',5818=>'L',5819=>'L',5820=>'L',5821=>'L',5822=>'L',5823=>'L',5824=>'L',5825=>'L',5826=>'L',5827=>'L',5828=>'L',5829=>'L',5830=>'L',5831=>'L',5832=>'L',5833=>'L',5834=>'L',5835=>'L',5836=>'L',5837=>'L',5838=>'L',5839=>'L',5840=>'L',5841=>'L',5842=>'L',5843=>'L',5844=>'L',5845=>'L',5846=>'L',5847=>'L',5848=>'L',5849=>'L',5850=>'L',5851=>'L',5852=>'L',5853=>'L',5854=>'L',5855=>'L',5856=>'L',5857=>'L',5858=>'L',5859=>'L',5860=>'L',5861=>'L',5862=>'L',5863=>'L',5864=>'L',5865=>'L',5866=>'L',5867=>'L',5868=>'L',5869=>'L',5870=>'L',5871=>'L',5872=>'L',5888=>'L',5889=>'L',5890=>'L',5891=>'L',5892=>'L',5893=>'L',5894=>'L',5895=>'L',5896=>'L',5897=>'L',5898=>'L',5899=>'L',5900=>'L',5902=>'L',5903=>'L',5904=>'L',5905=>'L',5906=>'NSM',5907=>'NSM',5908=>'NSM',5920=>'L',5921=>'L',5922=>'L',5923=>'L',5924=>'L',5925=>'L',5926=>'L',5927=>'L',5928=>'L',5929=>'L',5930=>'L',5931=>'L',5932=>'L',5933=>'L',5934=>'L',5935=>'L',5936=>'L',5937=>'L',5938=>'NSM',5939=>'NSM',5940=>'NSM',5941=>'L',5942=>'L',5952=>'L',5953=>'L',5954=>'L',5955=>'L',5956=>'L',5957=>'L',5958=>'L',5959=>'L',5960=>'L',5961=>'L',5962=>'L',5963=>'L',5964=>'L',5965=>'L',5966=>'L',5967=>'L',5968=>'L',5969=>'L',5970=>'NSM',5971=>'NSM',5984=>'L',5985=>'L',5986=>'L',5987=>'L',5988=>'L',5989=>'L',5990=>'L',5991=>'L',5992=>'L',5993=>'L',5994=>'L',5995=>'L',5996=>'L',5998=>'L',5999=>'L',6000=>'L',6002=>'NSM',6003=>'NSM',6016=>'L',6017=>'L',6018=>'L',6019=>'L',6020=>'L',6021=>'L',6022=>'L',6023=>'L',6024=>'L',6025=>'L',6026=>'L',6027=>'L',6028=>'L',6029=>'L',6030=>'L',6031=>'L',6032=>'L',6033=>'L',6034=>'L',6035=>'L',6036=>'L',6037=>'L',6038=>'L',6039=>'L',6040=>'L',6041=>'L',6042=>'L',6043=>'L',6044=>'L',6045=>'L',6046=>'L',6047=>'L',6048=>'L',6049=>'L',6050=>'L',6051=>'L',6052=>'L',6053=>'L',6054=>'L',6055=>'L',6056=>'L',6057=>'L',6058=>'L',6059=>'L',6060=>'L',6061=>'L',6062=>'L',6063=>'L',6064=>'L',6065=>'L',6066=>'L',6067=>'L',6068=>'L',6069=>'L',6070=>'L',6071=>'NSM',6072=>'NSM',6073=>'NSM',6074=>'NSM',6075=>'NSM',6076=>'NSM',6077=>'NSM',6078=>'L',6079=>'L',6080=>'L',6081=>'L',6082=>'L',6083=>'L',6084=>'L',6085=>'L',6086=>'NSM',6087=>'L',6088=>'L',6089=>'NSM',6090=>'NSM',6091=>'NSM',6092=>'NSM',6093=>'NSM',6094=>'NSM',6095=>'NSM',6096=>'NSM',6097=>'NSM',6098=>'NSM',6099=>'NSM',6100=>'L',6101=>'L',6102=>'L',6103=>'L',6104=>'L',6105=>'L',6106=>'L',6107=>'ET',6108=>'L',6109=>'NSM',6112=>'L',6113=>'L',6114=>'L',6115=>'L',6116=>'L',6117=>'L',6118=>'L',6119=>'L',6120=>'L',6121=>'L',6128=>'ON',6129=>'ON',6130=>'ON',6131=>'ON',6132=>'ON',6133=>'ON',6134=>'ON',6135=>'ON',6136=>'ON',6137=>'ON',6144=>'ON',6145=>'ON',6146=>'ON',6147=>'ON',6148=>'ON',6149=>'ON',6150=>'ON',6151=>'ON',6152=>'ON',6153=>'ON',6154=>'ON',6155=>'NSM',6156=>'NSM',6157=>'NSM',6158=>'WS',6160=>'L',6161=>'L',6162=>'L',6163=>'L',6164=>'L',6165=>'L',6166=>'L',6167=>'L',6168=>'L',6169=>'L',6176=>'L',6177=>'L',6178=>'L',6179=>'L',6180=>'L',6181=>'L',6182=>'L',6183=>'L',6184=>'L',6185=>'L',6186=>'L',6187=>'L',6188=>'L',6189=>'L',6190=>'L',6191=>'L',6192=>'L',6193=>'L',6194=>'L',6195=>'L',6196=>'L',6197=>'L',6198=>'L',6199=>'L',6200=>'L',6201=>'L',6202=>'L',6203=>'L',6204=>'L',6205=>'L',6206=>'L',6207=>'L',6208=>'L',6209=>'L',6210=>'L',6211=>'L',6212=>'L',6213=>'L',6214=>'L',6215=>'L',6216=>'L',6217=>'L',6218=>'L',6219=>'L',6220=>'L',6221=>'L',6222=>'L',6223=>'L',6224=>'L',6225=>'L',6226=>'L',6227=>'L',6228=>'L',6229=>'L',6230=>'L',6231=>'L',6232=>'L',6233=>'L',6234=>'L',6235=>'L',6236=>'L',6237=>'L',6238=>'L',6239=>'L',6240=>'L',6241=>'L',6242=>'L',6243=>'L',6244=>'L',6245=>'L',6246=>'L',6247=>'L',6248=>'L',6249=>'L',6250=>'L',6251=>'L',6252=>'L',6253=>'L',6254=>'L',6255=>'L',6256=>'L',6257=>'L',6258=>'L',6259=>'L',6260=>'L',6261=>'L',6262=>'L',6263=>'L',6272=>'L',6273=>'L',6274=>'L',6275=>'L',6276=>'L',6277=>'L',6278=>'L',6279=>'L',6280=>'L',6281=>'L',6282=>'L',6283=>'L',6284=>'L',6285=>'L',6286=>'L',6287=>'L',6288=>'L',6289=>'L',6290=>'L',6291=>'L',6292=>'L',6293=>'L',6294=>'L',6295=>'L',6296=>'L',6297=>'L',6298=>'L',6299=>'L',6300=>'L',6301=>'L',6302=>'L',6303=>'L',6304=>'L',6305=>'L',6306=>'L',6307=>'L',6308=>'L',6309=>'L',6310=>'L',6311=>'L',6312=>'L',6313=>'NSM',6400=>'L',6401=>'L',6402=>'L',6403=>'L',6404=>'L',6405=>'L',6406=>'L',6407=>'L',6408=>'L',6409=>'L',6410=>'L',6411=>'L',6412=>'L',6413=>'L',6414=>'L',6415=>'L',6416=>'L',6417=>'L',6418=>'L',6419=>'L',6420=>'L',6421=>'L',6422=>'L',6423=>'L',6424=>'L',6425=>'L',6426=>'L',6427=>'L',6428=>'L',6432=>'NSM',6433=>'NSM',6434=>'NSM',6435=>'L',6436=>'L',6437=>'L',6438=>'L',6439=>'NSM',6440=>'NSM',6441=>'NSM',6442=>'NSM',6443=>'NSM',6448=>'L',6449=>'L',6450=>'NSM',6451=>'L',6452=>'L',6453=>'L',6454=>'L',6455=>'L',6456=>'L',6457=>'NSM',6458=>'NSM',6459=>'NSM',6464=>'ON',6468=>'ON',6469=>'ON',6470=>'L',6471=>'L',6472=>'L',6473=>'L',6474=>'L',6475=>'L',6476=>'L',6477=>'L',6478=>'L',6479=>'L',6480=>'L',6481=>'L',6482=>'L',6483=>'L',6484=>'L',6485=>'L',6486=>'L',6487=>'L',6488=>'L',6489=>'L',6490=>'L',6491=>'L',6492=>'L',6493=>'L',6494=>'L',6495=>'L',6496=>'L',6497=>'L',6498=>'L',6499=>'L',6500=>'L',6501=>'L',6502=>'L',6503=>'L',6504=>'L',6505=>'L',6506=>'L',6507=>'L',6508=>'L',6509=>'L',6512=>'L',6513=>'L',6514=>'L',6515=>'L',6516=>'L',6528=>'L',6529=>'L',6530=>'L',6531=>'L',6532=>'L',6533=>'L',6534=>'L',6535=>'L',6536=>'L',6537=>'L',6538=>'L',6539=>'L',6540=>'L',6541=>'L',6542=>'L',6543=>'L',6544=>'L',6545=>'L',6546=>'L',6547=>'L',6548=>'L',6549=>'L',6550=>'L',6551=>'L',6552=>'L',6553=>'L',6554=>'L',6555=>'L',6556=>'L',6557=>'L',6558=>'L',6559=>'L',6560=>'L',6561=>'L',6562=>'L',6563=>'L',6564=>'L',6565=>'L',6566=>'L',6567=>'L',6568=>'L',6569=>'L',6576=>'L',6577=>'L',6578=>'L',6579=>'L',6580=>'L',6581=>'L',6582=>'L',6583=>'L',6584=>'L',6585=>'L',6586=>'L',6587=>'L',6588=>'L',6589=>'L',6590=>'L',6591=>'L',6592=>'L',6593=>'L',6594=>'L',6595=>'L',6596=>'L',6597=>'L',6598=>'L',6599=>'L',6600=>'L',6601=>'L',6608=>'L',6609=>'L',6610=>'L',6611=>'L',6612=>'L',6613=>'L',6614=>'L',6615=>'L',6616=>'L',6617=>'L',6622=>'ON',6623=>'ON',6624=>'ON',6625=>'ON',6626=>'ON',6627=>'ON',6628=>'ON',6629=>'ON',6630=>'ON',6631=>'ON',6632=>'ON',6633=>'ON',6634=>'ON',6635=>'ON',6636=>'ON',6637=>'ON',6638=>'ON',6639=>'ON',6640=>'ON',6641=>'ON',6642=>'ON',6643=>'ON',6644=>'ON',6645=>'ON',6646=>'ON',6647=>'ON',6648=>'ON',6649=>'ON',6650=>'ON',6651=>'ON',6652=>'ON',6653=>'ON',6654=>'ON',6655=>'ON',6656=>'L',6657=>'L',6658=>'L',6659=>'L',6660=>'L',6661=>'L',6662=>'L',6663=>'L',6664=>'L',6665=>'L',6666=>'L',6667=>'L',6668=>'L',6669=>'L',6670=>'L',6671=>'L',6672=>'L',6673=>'L',6674=>'L',6675=>'L',6676=>'L',6677=>'L',6678=>'L',6679=>'NSM',6680=>'NSM',6681=>'L',6682=>'L',6683=>'L',6686=>'L',6687=>'L',6912=>'NSM',6913=>'NSM',6914=>'NSM',6915=>'NSM',6916=>'L',6917=>'L',6918=>'L',6919=>'L',6920=>'L',6921=>'L',6922=>'L',6923=>'L',6924=>'L',6925=>'L',6926=>'L',6927=>'L',6928=>'L',6929=>'L',6930=>'L',6931=>'L',6932=>'L',6933=>'L',6934=>'L',6935=>'L',6936=>'L',6937=>'L',6938=>'L',6939=>'L',6940=>'L',6941=>'L',6942=>'L',6943=>'L',6944=>'L',6945=>'L',6946=>'L',6947=>'L',6948=>'L',6949=>'L',6950=>'L',6951=>'L',6952=>'L',6953=>'L',6954=>'L',6955=>'L',6956=>'L',6957=>'L',6958=>'L',6959=>'L',6960=>'L',6961=>'L',6962=>'L',6963=>'L',6964=>'NSM',6965=>'L',6966=>'NSM',6967=>'NSM',6968=>'NSM',6969=>'NSM',6970=>'NSM',6971=>'L',6972=>'NSM',6973=>'L',6974=>'L',6975=>'L',6976=>'L',6977=>'L',6978=>'NSM',6979=>'L',6980=>'L',6981=>'L',6982=>'L',6983=>'L',6984=>'L',6985=>'L',6986=>'L',6987=>'L',6992=>'L',6993=>'L',6994=>'L',6995=>'L',6996=>'L',6997=>'L',6998=>'L',6999=>'L',7000=>'L',7001=>'L',7002=>'L',7003=>'L',7004=>'L',7005=>'L',7006=>'L',7007=>'L',7008=>'L',7009=>'L',7010=>'L',7011=>'L',7012=>'L',7013=>'L',7014=>'L',7015=>'L',7016=>'L',7017=>'L',7018=>'L',7019=>'NSM',7020=>'NSM',7021=>'NSM',7022=>'NSM',7023=>'NSM',7024=>'NSM',7025=>'NSM',7026=>'NSM',7027=>'NSM',7028=>'L',7029=>'L',7030=>'L',7031=>'L',7032=>'L',7033=>'L',7034=>'L',7035=>'L',7036=>'L',7424=>'L',7425=>'L',7426=>'L',7427=>'L',7428=>'L',7429=>'L',7430=>'L',7431=>'L',7432=>'L',7433=>'L',7434=>'L',7435=>'L',7436=>'L',7437=>'L',7438=>'L',7439=>'L',7440=>'L',7441=>'L',7442=>'L',7443=>'L',7444=>'L',7445=>'L',7446=>'L',7447=>'L',7448=>'L',7449=>'L',7450=>'L',7451=>'L',7452=>'L',7453=>'L',7454=>'L',7455=>'L',7456=>'L',7457=>'L',7458=>'L',7459=>'L',7460=>'L',7461=>'L',7462=>'L',7463=>'L',7464=>'L',7465=>'L',7466=>'L',7467=>'L',7468=>'L',7469=>'L',7470=>'L',7471=>'L',7472=>'L',7473=>'L',7474=>'L',7475=>'L',7476=>'L',7477=>'L',7478=>'L',7479=>'L',7480=>'L',7481=>'L',7482=>'L',7483=>'L',7484=>'L',7485=>'L',7486=>'L',7487=>'L',7488=>'L',7489=>'L',7490=>'L',7491=>'L',7492=>'L',7493=>'L',7494=>'L',7495=>'L',7496=>'L',7497=>'L',7498=>'L',7499=>'L',7500=>'L',7501=>'L',7502=>'L',7503=>'L',7504=>'L',7505=>'L',7506=>'L',7507=>'L',7508=>'L',7509=>'L',7510=>'L',7511=>'L',7512=>'L',7513=>'L',7514=>'L',7515=>'L',7516=>'L',7517=>'L',7518=>'L',7519=>'L',7520=>'L',7521=>'L',7522=>'L',7523=>'L',7524=>'L',7525=>'L',7526=>'L',7527=>'L',7528=>'L',7529=>'L',7530=>'L',7531=>'L',7532=>'L',7533=>'L',7534=>'L',7535=>'L',7536=>'L',7537=>'L',7538=>'L',7539=>'L',7540=>'L',7541=>'L',7542=>'L',7543=>'L',7544=>'L',7545=>'L',7546=>'L',7547=>'L',7548=>'L',7549=>'L',7550=>'L',7551=>'L',7552=>'L',7553=>'L',7554=>'L',7555=>'L',7556=>'L',7557=>'L',7558=>'L',7559=>'L',7560=>'L',7561=>'L',7562=>'L',7563=>'L',7564=>'L',7565=>'L',7566=>'L',7567=>'L',7568=>'L',7569=>'L',7570=>'L',7571=>'L',7572=>'L',7573=>'L',7574=>'L',7575=>'L',7576=>'L',7577=>'L',7578=>'L',7579=>'L',7580=>'L',7581=>'L',7582=>'L',7583=>'L',7584=>'L',7585=>'L',7586=>'L',7587=>'L',7588=>'L',7589=>'L',7590=>'L',7591=>'L',7592=>'L',7593=>'L',7594=>'L',7595=>'L',7596=>'L',7597=>'L',7598=>'L',7599=>'L',7600=>'L',7601=>'L',7602=>'L',7603=>'L',7604=>'L',7605=>'L',7606=>'L',7607=>'L',7608=>'L',7609=>'L',7610=>'L',7611=>'L',7612=>'L',7613=>'L',7614=>'L',7615=>'L',7616=>'NSM',7617=>'NSM',7618=>'NSM',7619=>'NSM',7620=>'NSM',7621=>'NSM',7622=>'NSM',7623=>'NSM',7624=>'NSM',7625=>'NSM',7626=>'NSM',7678=>'NSM',7679=>'NSM',7680=>'L',7681=>'L',7682=>'L',7683=>'L',7684=>'L',7685=>'L',7686=>'L',7687=>'L',7688=>'L',7689=>'L',7690=>'L',7691=>'L',7692=>'L',7693=>'L',7694=>'L',7695=>'L',7696=>'L',7697=>'L',7698=>'L',7699=>'L',7700=>'L',7701=>'L',7702=>'L',7703=>'L',7704=>'L',7705=>'L',7706=>'L',7707=>'L',7708=>'L',7709=>'L',7710=>'L',7711=>'L',7712=>'L',7713=>'L',7714=>'L',7715=>'L',7716=>'L',7717=>'L',7718=>'L',7719=>'L',7720=>'L',7721=>'L',7722=>'L',7723=>'L',7724=>'L',7725=>'L',7726=>'L',7727=>'L',7728=>'L',7729=>'L',7730=>'L',7731=>'L',7732=>'L',7733=>'L',7734=>'L',7735=>'L',7736=>'L',7737=>'L',7738=>'L',7739=>'L',7740=>'L',7741=>'L',7742=>'L',7743=>'L',7744=>'L',7745=>'L',7746=>'L',7747=>'L',7748=>'L',7749=>'L',7750=>'L',7751=>'L',7752=>'L',7753=>'L',7754=>'L',7755=>'L',7756=>'L',7757=>'L',7758=>'L',7759=>'L',7760=>'L',7761=>'L',7762=>'L',7763=>'L',7764=>'L',7765=>'L',7766=>'L',7767=>'L',7768=>'L',7769=>'L',7770=>'L',7771=>'L',7772=>'L',7773=>'L',7774=>'L',7775=>'L',7776=>'L',7777=>'L',7778=>'L',7779=>'L',7780=>'L',7781=>'L',7782=>'L',7783=>'L',7784=>'L',7785=>'L',7786=>'L',7787=>'L',7788=>'L',7789=>'L',7790=>'L',7791=>'L',7792=>'L',7793=>'L',7794=>'L',7795=>'L',7796=>'L',7797=>'L',7798=>'L',7799=>'L',7800=>'L',7801=>'L',7802=>'L',7803=>'L',7804=>'L',7805=>'L',7806=>'L',7807=>'L',7808=>'L',7809=>'L',7810=>'L',7811=>'L',7812=>'L',7813=>'L',7814=>'L',7815=>'L',7816=>'L',7817=>'L',7818=>'L',7819=>'L',7820=>'L',7821=>'L',7822=>'L',7823=>'L',7824=>'L',7825=>'L',7826=>'L',7827=>'L',7828=>'L',7829=>'L',7830=>'L',7831=>'L',7832=>'L',7833=>'L',7834=>'L',7835=>'L',7840=>'L',7841=>'L',7842=>'L',7843=>'L',7844=>'L',7845=>'L',7846=>'L',7847=>'L',7848=>'L',7849=>'L',7850=>'L',7851=>'L',7852=>'L',7853=>'L',7854=>'L',7855=>'L',7856=>'L',7857=>'L',7858=>'L',7859=>'L',7860=>'L',7861=>'L',7862=>'L',7863=>'L',7864=>'L',7865=>'L',7866=>'L',7867=>'L',7868=>'L',7869=>'L',7870=>'L',7871=>'L',7872=>'L',7873=>'L',7874=>'L',7875=>'L',7876=>'L',7877=>'L',7878=>'L',7879=>'L',7880=>'L',7881=>'L',7882=>'L',7883=>'L',7884=>'L',7885=>'L',7886=>'L',7887=>'L',7888=>'L',7889=>'L',7890=>'L',7891=>'L',7892=>'L',7893=>'L',7894=>'L',7895=>'L',7896=>'L',7897=>'L',7898=>'L',7899=>'L',7900=>'L',7901=>'L',7902=>'L',7903=>'L',7904=>'L',7905=>'L',7906=>'L',7907=>'L',7908=>'L',7909=>'L',7910=>'L',7911=>'L',7912=>'L',7913=>'L',7914=>'L',7915=>'L',7916=>'L',7917=>'L',7918=>'L',7919=>'L',7920=>'L',7921=>'L',7922=>'L',7923=>'L',7924=>'L',7925=>'L',7926=>'L',7927=>'L',7928=>'L',7929=>'L',7936=>'L',7937=>'L',7938=>'L',7939=>'L',7940=>'L',7941=>'L',7942=>'L',7943=>'L',7944=>'L',7945=>'L',7946=>'L',7947=>'L',7948=>'L',7949=>'L',7950=>'L',7951=>'L',7952=>'L',7953=>'L',7954=>'L',7955=>'L',7956=>'L',7957=>'L',7960=>'L',7961=>'L',7962=>'L',7963=>'L',7964=>'L',7965=>'L',7968=>'L',7969=>'L',7970=>'L',7971=>'L',7972=>'L',7973=>'L',7974=>'L',7975=>'L',7976=>'L',7977=>'L',7978=>'L',7979=>'L',7980=>'L',7981=>'L',7982=>'L',7983=>'L',7984=>'L',7985=>'L',7986=>'L',7987=>'L',7988=>'L',7989=>'L',7990=>'L',7991=>'L',7992=>'L',7993=>'L',7994=>'L',7995=>'L',7996=>'L',7997=>'L',7998=>'L',7999=>'L',8000=>'L',8001=>'L',8002=>'L',8003=>'L',8004=>'L',8005=>'L',8008=>'L',8009=>'L',8010=>'L',8011=>'L',8012=>'L',8013=>'L',8016=>'L',8017=>'L',8018=>'L',8019=>'L',8020=>'L',8021=>'L',8022=>'L',8023=>'L',8025=>'L',8027=>'L',8029=>'L',8031=>'L',8032=>'L',8033=>'L',8034=>'L',8035=>'L',8036=>'L',8037=>'L',8038=>'L',8039=>'L',8040=>'L',8041=>'L',8042=>'L',8043=>'L',8044=>'L',8045=>'L',8046=>'L',8047=>'L',8048=>'L',8049=>'L',8050=>'L',8051=>'L',8052=>'L',8053=>'L',8054=>'L',8055=>'L',8056=>'L',8057=>'L',8058=>'L',8059=>'L',8060=>'L',8061=>'L',8064=>'L',8065=>'L',8066=>'L',8067=>'L',8068=>'L',8069=>'L',8070=>'L',8071=>'L',8072=>'L',8073=>'L',8074=>'L',8075=>'L',8076=>'L',8077=>'L',8078=>'L',8079=>'L',8080=>'L',8081=>'L',8082=>'L',8083=>'L',8084=>'L',8085=>'L',8086=>'L',8087=>'L',8088=>'L',8089=>'L',8090=>'L',8091=>'L',8092=>'L',8093=>'L',8094=>'L',8095=>'L',8096=>'L',8097=>'L',8098=>'L',8099=>'L',8100=>'L',8101=>'L',8102=>'L',8103=>'L',8104=>'L',8105=>'L',8106=>'L',8107=>'L',8108=>'L',8109=>'L',8110=>'L',8111=>'L',8112=>'L',8113=>'L',8114=>'L',8115=>'L',8116=>'L',8118=>'L',8119=>'L',8120=>'L',8121=>'L',8122=>'L',8123=>'L',8124=>'L',8125=>'ON',8126=>'L',8127=>'ON',8128=>'ON',8129=>'ON',8130=>'L',8131=>'L',8132=>'L',8134=>'L',8135=>'L',8136=>'L',8137=>'L',8138=>'L',8139=>'L',8140=>'L',8141=>'ON',8142=>'ON',8143=>'ON',8144=>'L',8145=>'L',8146=>'L',8147=>'L',8150=>'L',8151=>'L',8152=>'L',8153=>'L',8154=>'L',8155=>'L',8157=>'ON',8158=>'ON',8159=>'ON',8160=>'L',8161=>'L',8162=>'L',8163=>'L',8164=>'L',8165=>'L',8166=>'L',8167=>'L',8168=>'L',8169=>'L',8170=>'L',8171=>'L',8172=>'L',8173=>'ON',8174=>'ON',8175=>'ON',8178=>'L',8179=>'L',8180=>'L',8182=>'L',8183=>'L',8184=>'L',8185=>'L',8186=>'L',8187=>'L',8188=>'L',8189=>'ON',8190=>'ON',8192=>'WS',8193=>'WS',8194=>'WS',8195=>'WS',8196=>'WS',8197=>'WS',8198=>'WS',8199=>'WS',8200=>'WS',8201=>'WS',8202=>'WS',8203=>'BN',8204=>'BN',8205=>'BN',8206=>'L',8207=>'R',8208=>'ON',8209=>'ON',8210=>'ON',8211=>'ON',8212=>'ON',8213=>'ON',8214=>'ON',8215=>'ON',8216=>'ON',8217=>'ON',8218=>'ON',8219=>'ON',8220=>'ON',8221=>'ON',8222=>'ON',8223=>'ON',8224=>'ON',8225=>'ON',8226=>'ON',8227=>'ON',8228=>'ON',8229=>'ON',8230=>'ON',8231=>'ON',8232=>'WS',8233=>'B',8234=>'LRE',8235=>'RLE',8236=>'PDF',8237=>'LRO',8238=>'RLO',8239=>'CS',8240=>'ET',8241=>'ET',8242=>'ET',8243=>'ET',8244=>'ET',8245=>'ON',8246=>'ON',8247=>'ON',8248=>'ON',8249=>'ON',8250=>'ON',8251=>'ON',8252=>'ON',8253=>'ON',8254=>'ON',8255=>'ON',8256=>'ON',8257=>'ON',8258=>'ON',8259=>'ON',8260=>'CS',8261=>'ON',8262=>'ON',8263=>'ON',8264=>'ON',8265=>'ON',8266=>'ON',8267=>'ON',8268=>'ON',8269=>'ON',8270=>'ON',8271=>'ON',8272=>'ON',8273=>'ON',8274=>'ON',8275=>'ON',8276=>'ON',8277=>'ON',8278=>'ON',8279=>'ON',8280=>'ON',8281=>'ON',8282=>'ON',8283=>'ON',8284=>'ON',8285=>'ON',8286=>'ON',8287=>'WS',8288=>'BN',8289=>'BN',8290=>'BN',8291=>'BN',8298=>'BN',8299=>'BN',8300=>'BN',8301=>'BN',8302=>'BN',8303=>'BN',8304=>'EN',8305=>'L',8308=>'EN',8309=>'EN',8310=>'EN',8311=>'EN',8312=>'EN',8313=>'EN',8314=>'ES',8315=>'ES',8316=>'ON',8317=>'ON',8318=>'ON',8319=>'L',8320=>'EN',8321=>'EN',8322=>'EN',8323=>'EN',8324=>'EN',8325=>'EN',8326=>'EN',8327=>'EN',8328=>'EN',8329=>'EN',8330=>'ES',8331=>'ES',8332=>'ON',8333=>'ON',8334=>'ON',8336=>'L',8337=>'L',8338=>'L',8339=>'L',8340=>'L',8352=>'ET',8353=>'ET',8354=>'ET',8355=>'ET',8356=>'ET',8357=>'ET',8358=>'ET',8359=>'ET',8360=>'ET',8361=>'ET',8362=>'ET',8363=>'ET',8364=>'ET',8365=>'ET',8366=>'ET',8367=>'ET',8368=>'ET',8369=>'ET',8370=>'ET',8371=>'ET',8372=>'ET',8373=>'ET',8400=>'NSM',8401=>'NSM',8402=>'NSM',8403=>'NSM',8404=>'NSM',8405=>'NSM',8406=>'NSM',8407=>'NSM',8408=>'NSM',8409=>'NSM',8410=>'NSM',8411=>'NSM',8412=>'NSM',8413=>'NSM',8414=>'NSM',8415=>'NSM',8416=>'NSM',8417=>'NSM',8418=>'NSM',8419=>'NSM',8420=>'NSM',8421=>'NSM',8422=>'NSM',8423=>'NSM',8424=>'NSM',8425=>'NSM',8426=>'NSM',8427=>'NSM',8428=>'NSM',8429=>'NSM',8430=>'NSM',8431=>'NSM',8448=>'ON',8449=>'ON',8450=>'L',8451=>'ON',8452=>'ON',8453=>'ON',8454=>'ON',8455=>'L',8456=>'ON',8457=>'ON',8458=>'L',8459=>'L',8460=>'L',8461=>'L',8462=>'L',8463=>'L',8464=>'L',8465=>'L',8466=>'L',8467=>'L',8468=>'ON',8469=>'L',8470=>'ON',8471=>'ON',8472=>'ON',8473=>'L',8474=>'L',8475=>'L',8476=>'L',8477=>'L',8478=>'ON',8479=>'ON',8480=>'ON',8481=>'ON',8482=>'ON',8483=>'ON',8484=>'L',8485=>'ON',8486=>'L',8487=>'ON',8488=>'L',8489=>'ON',8490=>'L',8491=>'L',8492=>'L',8493=>'L',8494=>'ET',8495=>'L',8496=>'L',8497=>'L',8498=>'L',8499=>'L',8500=>'L',8501=>'L',8502=>'L',8503=>'L',8504=>'L',8505=>'L',8506=>'ON',8507=>'ON',8508=>'L',8509=>'L',8510=>'L',8511=>'L',8512=>'ON',8513=>'ON',8514=>'ON',8515=>'ON',8516=>'ON',8517=>'L',8518=>'L',8519=>'L',8520=>'L',8521=>'L',8522=>'ON',8523=>'ON',8524=>'ON',8525=>'ON',8526=>'L',8531=>'ON',8532=>'ON',8533=>'ON',8534=>'ON',8535=>'ON',8536=>'ON',8537=>'ON',8538=>'ON',8539=>'ON',8540=>'ON',8541=>'ON',8542=>'ON',8543=>'ON',8544=>'L',8545=>'L',8546=>'L',8547=>'L',8548=>'L',8549=>'L',8550=>'L',8551=>'L',8552=>'L',8553=>'L',8554=>'L',8555=>'L',8556=>'L',8557=>'L',8558=>'L',8559=>'L',8560=>'L',8561=>'L',8562=>'L',8563=>'L',8564=>'L',8565=>'L',8566=>'L',8567=>'L',8568=>'L',8569=>'L',8570=>'L',8571=>'L',8572=>'L',8573=>'L',8574=>'L',8575=>'L',8576=>'L',8577=>'L',8578=>'L',8579=>'L',8580=>'L',8592=>'ON',8593=>'ON',8594=>'ON',8595=>'ON',8596=>'ON',8597=>'ON',8598=>'ON',8599=>'ON',8600=>'ON',8601=>'ON',8602=>'ON',8603=>'ON',8604=>'ON',8605=>'ON',8606=>'ON',8607=>'ON',8608=>'ON',8609=>'ON',8610=>'ON',8611=>'ON',8612=>'ON',8613=>'ON',8614=>'ON',8615=>'ON',8616=>'ON',8617=>'ON',8618=>'ON',8619=>'ON',8620=>'ON',8621=>'ON',8622=>'ON',8623=>'ON',8624=>'ON',8625=>'ON',8626=>'ON',8627=>'ON',8628=>'ON',8629=>'ON',8630=>'ON',8631=>'ON',8632=>'ON',8633=>'ON',8634=>'ON',8635=>'ON',8636=>'ON',8637=>'ON',8638=>'ON',8639=>'ON',8640=>'ON',8641=>'ON',8642=>'ON',8643=>'ON',8644=>'ON',8645=>'ON',8646=>'ON',8647=>'ON',8648=>'ON',8649=>'ON',8650=>'ON',8651=>'ON',8652=>'ON',8653=>'ON',8654=>'ON',8655=>'ON',8656=>'ON',8657=>'ON',8658=>'ON',8659=>'ON',8660=>'ON',8661=>'ON',8662=>'ON',8663=>'ON',8664=>'ON',8665=>'ON',8666=>'ON',8667=>'ON',8668=>'ON',8669=>'ON',8670=>'ON',8671=>'ON',8672=>'ON',8673=>'ON',8674=>'ON',8675=>'ON',8676=>'ON',8677=>'ON',8678=>'ON',8679=>'ON',8680=>'ON',8681=>'ON',8682=>'ON',8683=>'ON',8684=>'ON',8685=>'ON',8686=>'ON',8687=>'ON',8688=>'ON',8689=>'ON',8690=>'ON',8691=>'ON',8692=>'ON',8693=>'ON',8694=>'ON',8695=>'ON',8696=>'ON',8697=>'ON',8698=>'ON',8699=>'ON',8700=>'ON',8701=>'ON',8702=>'ON',8703=>'ON',8704=>'ON',8705=>'ON',8706=>'ON',8707=>'ON',8708=>'ON',8709=>'ON',8710=>'ON',8711=>'ON',8712=>'ON',8713=>'ON',8714=>'ON',8715=>'ON',8716=>'ON',8717=>'ON',8718=>'ON',8719=>'ON',8720=>'ON',8721=>'ON',8722=>'ES',8723=>'ET',8724=>'ON',8725=>'ON',8726=>'ON',8727=>'ON',8728=>'ON',8729=>'ON',8730=>'ON',8731=>'ON',8732=>'ON',8733=>'ON',8734=>'ON',8735=>'ON',8736=>'ON',8737=>'ON',8738=>'ON',8739=>'ON',8740=>'ON',8741=>'ON',8742=>'ON',8743=>'ON',8744=>'ON',8745=>'ON',8746=>'ON',8747=>'ON',8748=>'ON',8749=>'ON',8750=>'ON',8751=>'ON',8752=>'ON',8753=>'ON',8754=>'ON',8755=>'ON',8756=>'ON',8757=>'ON',8758=>'ON',8759=>'ON',8760=>'ON',8761=>'ON',8762=>'ON',8763=>'ON',8764=>'ON',8765=>'ON',8766=>'ON',8767=>'ON',8768=>'ON',8769=>'ON',8770=>'ON',8771=>'ON',8772=>'ON',8773=>'ON',8774=>'ON',8775=>'ON',8776=>'ON',8777=>'ON',8778=>'ON',8779=>'ON',8780=>'ON',8781=>'ON',8782=>'ON',8783=>'ON',8784=>'ON',8785=>'ON',8786=>'ON',8787=>'ON',8788=>'ON',8789=>'ON',8790=>'ON',8791=>'ON',8792=>'ON',8793=>'ON',8794=>'ON',8795=>'ON',8796=>'ON',8797=>'ON',8798=>'ON',8799=>'ON',8800=>'ON',8801=>'ON',8802=>'ON',8803=>'ON',8804=>'ON',8805=>'ON',8806=>'ON',8807=>'ON',8808=>'ON',8809=>'ON',8810=>'ON',8811=>'ON',8812=>'ON',8813=>'ON',8814=>'ON',8815=>'ON',8816=>'ON',8817=>'ON',8818=>'ON',8819=>'ON',8820=>'ON',8821=>'ON',8822=>'ON',8823=>'ON',8824=>'ON',8825=>'ON',8826=>'ON',8827=>'ON',8828=>'ON',8829=>'ON',8830=>'ON',8831=>'ON',8832=>'ON',8833=>'ON',8834=>'ON',8835=>'ON',8836=>'ON',8837=>'ON',8838=>'ON',8839=>'ON',8840=>'ON',8841=>'ON',8842=>'ON',8843=>'ON',8844=>'ON',8845=>'ON',8846=>'ON',8847=>'ON',8848=>'ON',8849=>'ON',8850=>'ON',8851=>'ON',8852=>'ON',8853=>'ON',8854=>'ON',8855=>'ON',8856=>'ON',8857=>'ON',8858=>'ON',8859=>'ON',8860=>'ON',8861=>'ON',8862=>'ON',8863=>'ON',8864=>'ON',8865=>'ON',8866=>'ON',8867=>'ON',8868=>'ON',8869=>'ON',8870=>'ON',8871=>'ON',8872=>'ON',8873=>'ON',8874=>'ON',8875=>'ON',8876=>'ON',8877=>'ON',8878=>'ON',8879=>'ON',8880=>'ON',8881=>'ON',8882=>'ON',8883=>'ON',8884=>'ON',8885=>'ON',8886=>'ON',8887=>'ON',8888=>'ON',8889=>'ON',8890=>'ON',8891=>'ON',8892=>'ON',8893=>'ON',8894=>'ON',8895=>'ON',8896=>'ON',8897=>'ON',8898=>'ON',8899=>'ON',8900=>'ON',8901=>'ON',8902=>'ON',8903=>'ON',8904=>'ON',8905=>'ON',8906=>'ON',8907=>'ON',8908=>'ON',8909=>'ON',8910=>'ON',8911=>'ON',8912=>'ON',8913=>'ON',8914=>'ON',8915=>'ON',8916=>'ON',8917=>'ON',8918=>'ON',8919=>'ON',8920=>'ON',8921=>'ON',8922=>'ON',8923=>'ON',8924=>'ON',8925=>'ON',8926=>'ON',8927=>'ON',8928=>'ON',8929=>'ON',8930=>'ON',8931=>'ON',8932=>'ON',8933=>'ON',8934=>'ON',8935=>'ON',8936=>'ON',8937=>'ON',8938=>'ON',8939=>'ON',8940=>'ON',8941=>'ON',8942=>'ON',8943=>'ON',8944=>'ON',8945=>'ON',8946=>'ON',8947=>'ON',8948=>'ON',8949=>'ON',8950=>'ON',8951=>'ON',8952=>'ON',8953=>'ON',8954=>'ON',8955=>'ON',8956=>'ON',8957=>'ON',8958=>'ON',8959=>'ON',8960=>'ON',8961=>'ON',8962=>'ON',8963=>'ON',8964=>'ON',8965=>'ON',8966=>'ON',8967=>'ON',8968=>'ON',8969=>'ON',8970=>'ON',8971=>'ON',8972=>'ON',8973=>'ON',8974=>'ON',8975=>'ON',8976=>'ON',8977=>'ON',8978=>'ON',8979=>'ON',8980=>'ON',8981=>'ON',8982=>'ON',8983=>'ON',8984=>'ON',8985=>'ON',8986=>'ON',8987=>'ON',8988=>'ON',8989=>'ON',8990=>'ON',8991=>'ON',8992=>'ON',8993=>'ON',8994=>'ON',8995=>'ON',8996=>'ON',8997=>'ON',8998=>'ON',8999=>'ON',9000=>'ON',9001=>'ON',9002=>'ON',9003=>'ON',9004=>'ON',9005=>'ON',9006=>'ON',9007=>'ON',9008=>'ON',9009=>'ON',9010=>'ON',9011=>'ON',9012=>'ON',9013=>'ON',9014=>'L',9015=>'L',9016=>'L',9017=>'L',9018=>'L',9019=>'L',9020=>'L',9021=>'L',9022=>'L',9023=>'L',9024=>'L',9025=>'L',9026=>'L',9027=>'L',9028=>'L',9029=>'L',9030=>'L',9031=>'L',9032=>'L',9033=>'L',9034=>'L',9035=>'L',9036=>'L',9037=>'L',9038=>'L',9039=>'L',9040=>'L',9041=>'L',9042=>'L',9043=>'L',9044=>'L',9045=>'L',9046=>'L',9047=>'L',9048=>'L',9049=>'L',9050=>'L',9051=>'L',9052=>'L',9053=>'L',9054=>'L',9055=>'L',9056=>'L',9057=>'L',9058=>'L',9059=>'L',9060=>'L',9061=>'L',9062=>'L',9063=>'L',9064=>'L',9065=>'L',9066=>'L',9067=>'L',9068=>'L',9069=>'L',9070=>'L',9071=>'L',9072=>'L',9073=>'L',9074=>'L',9075=>'L',9076=>'L',9077=>'L',9078=>'L',9079=>'L',9080=>'L',9081=>'L',9082=>'L',9083=>'ON',9084=>'ON',9085=>'ON',9086=>'ON',9087=>'ON',9088=>'ON',9089=>'ON',9090=>'ON',9091=>'ON',9092=>'ON',9093=>'ON',9094=>'ON',9095=>'ON',9096=>'ON',9097=>'ON',9098=>'ON',9099=>'ON',9100=>'ON',9101=>'ON',9102=>'ON',9103=>'ON',9104=>'ON',9105=>'ON',9106=>'ON',9107=>'ON',9108=>'ON',9109=>'L',9110=>'ON',9111=>'ON',9112=>'ON',9113=>'ON',9114=>'ON',9115=>'ON',9116=>'ON',9117=>'ON',9118=>'ON',9119=>'ON',9120=>'ON',9121=>'ON',9122=>'ON',9123=>'ON',9124=>'ON',9125=>'ON',9126=>'ON',9127=>'ON',9128=>'ON',9129=>'ON',9130=>'ON',9131=>'ON',9132=>'ON',9133=>'ON',9134=>'ON',9135=>'ON',9136=>'ON',9137=>'ON',9138=>'ON',9139=>'ON',9140=>'ON',9141=>'ON',9142=>'ON',9143=>'ON',9144=>'ON',9145=>'ON',9146=>'ON',9147=>'ON',9148=>'ON',9149=>'ON',9150=>'ON',9151=>'ON',9152=>'ON',9153=>'ON',9154=>'ON',9155=>'ON',9156=>'ON',9157=>'ON',9158=>'ON',9159=>'ON',9160=>'ON',9161=>'ON',9162=>'ON',9163=>'ON',9164=>'ON',9165=>'ON',9166=>'ON',9167=>'ON',9168=>'ON',9169=>'ON',9170=>'ON',9171=>'ON',9172=>'ON',9173=>'ON',9174=>'ON',9175=>'ON',9176=>'ON',9177=>'ON',9178=>'ON',9179=>'ON',9180=>'ON',9181=>'ON',9182=>'ON',9183=>'ON',9184=>'ON',9185=>'ON',9186=>'ON',9187=>'ON',9188=>'ON',9189=>'ON',9190=>'ON',9191=>'ON',9216=>'ON',9217=>'ON',9218=>'ON',9219=>'ON',9220=>'ON',9221=>'ON',9222=>'ON',9223=>'ON',9224=>'ON',9225=>'ON',9226=>'ON',9227=>'ON',9228=>'ON',9229=>'ON',9230=>'ON',9231=>'ON',9232=>'ON',9233=>'ON',9234=>'ON',9235=>'ON',9236=>'ON',9237=>'ON',9238=>'ON',9239=>'ON',9240=>'ON',9241=>'ON',9242=>'ON',9243=>'ON',9244=>'ON',9245=>'ON',9246=>'ON',9247=>'ON',9248=>'ON',9249=>'ON',9250=>'ON',9251=>'ON',9252=>'ON',9253=>'ON',9254=>'ON',9280=>'ON',9281=>'ON',9282=>'ON',9283=>'ON',9284=>'ON',9285=>'ON',9286=>'ON',9287=>'ON',9288=>'ON',9289=>'ON',9290=>'ON',9312=>'ON',9313=>'ON',9314=>'ON',9315=>'ON',9316=>'ON',9317=>'ON',9318=>'ON',9319=>'ON',9320=>'ON',9321=>'ON',9322=>'ON',9323=>'ON',9324=>'ON',9325=>'ON',9326=>'ON',9327=>'ON',9328=>'ON',9329=>'ON',9330=>'ON',9331=>'ON',9332=>'ON',9333=>'ON',9334=>'ON',9335=>'ON',9336=>'ON',9337=>'ON',9338=>'ON',9339=>'ON',9340=>'ON',9341=>'ON',9342=>'ON',9343=>'ON',9344=>'ON',9345=>'ON',9346=>'ON',9347=>'ON',9348=>'ON',9349=>'ON',9350=>'ON',9351=>'ON',9352=>'EN',9353=>'EN',9354=>'EN',9355=>'EN',9356=>'EN',9357=>'EN',9358=>'EN',9359=>'EN',9360=>'EN',9361=>'EN',9362=>'EN',9363=>'EN',9364=>'EN',9365=>'EN',9366=>'EN',9367=>'EN',9368=>'EN',9369=>'EN',9370=>'EN',9371=>'EN',9372=>'L',9373=>'L',9374=>'L',9375=>'L',9376=>'L',9377=>'L',9378=>'L',9379=>'L',9380=>'L',9381=>'L',9382=>'L',9383=>'L',9384=>'L',9385=>'L',9386=>'L',9387=>'L',9388=>'L',9389=>'L',9390=>'L',9391=>'L',9392=>'L',9393=>'L',9394=>'L',9395=>'L',9396=>'L',9397=>'L',9398=>'L',9399=>'L',9400=>'L',9401=>'L',9402=>'L',9403=>'L',9404=>'L',9405=>'L',9406=>'L',9407=>'L',9408=>'L',9409=>'L',9410=>'L',9411=>'L',9412=>'L',9413=>'L',9414=>'L',9415=>'L',9416=>'L',9417=>'L',9418=>'L',9419=>'L',9420=>'L',9421=>'L',9422=>'L',9423=>'L',9424=>'L',9425=>'L',9426=>'L',9427=>'L',9428=>'L',9429=>'L',9430=>'L',9431=>'L',9432=>'L',9433=>'L',9434=>'L',9435=>'L',9436=>'L',9437=>'L',9438=>'L',9439=>'L',9440=>'L',9441=>'L',9442=>'L',9443=>'L',9444=>'L',9445=>'L',9446=>'L',9447=>'L',9448=>'L',9449=>'L',9450=>'ON',9451=>'ON',9452=>'ON',9453=>'ON',9454=>'ON',9455=>'ON',9456=>'ON',9457=>'ON',9458=>'ON',9459=>'ON',9460=>'ON',9461=>'ON',9462=>'ON',9463=>'ON',9464=>'ON',9465=>'ON',9466=>'ON',9467=>'ON',9468=>'ON',9469=>'ON',9470=>'ON',9471=>'ON',9472=>'ON',9473=>'ON',9474=>'ON',9475=>'ON',9476=>'ON',9477=>'ON',9478=>'ON',9479=>'ON',9480=>'ON',9481=>'ON',9482=>'ON',9483=>'ON',9484=>'ON',9485=>'ON',9486=>'ON',9487=>'ON',9488=>'ON',9489=>'ON',9490=>'ON',9491=>'ON',9492=>'ON',9493=>'ON',9494=>'ON',9495=>'ON',9496=>'ON',9497=>'ON',9498=>'ON',9499=>'ON',9500=>'ON',9501=>'ON',9502=>'ON',9503=>'ON',9504=>'ON',9505=>'ON',9506=>'ON',9507=>'ON',9508=>'ON',9509=>'ON',9510=>'ON',9511=>'ON',9512=>'ON',9513=>'ON',9514=>'ON',9515=>'ON',9516=>'ON',9517=>'ON',9518=>'ON',9519=>'ON',9520=>'ON',9521=>'ON',9522=>'ON',9523=>'ON',9524=>'ON',9525=>'ON',9526=>'ON',9527=>'ON',9528=>'ON',9529=>'ON',9530=>'ON',9531=>'ON',9532=>'ON',9533=>'ON',9534=>'ON',9535=>'ON',9536=>'ON',9537=>'ON',9538=>'ON',9539=>'ON',9540=>'ON',9541=>'ON',9542=>'ON',9543=>'ON',9544=>'ON',9545=>'ON',9546=>'ON',9547=>'ON',9548=>'ON',9549=>'ON',9550=>'ON',9551=>'ON',9552=>'ON',9553=>'ON',9554=>'ON',9555=>'ON',9556=>'ON',9557=>'ON',9558=>'ON',9559=>'ON',9560=>'ON',9561=>'ON',9562=>'ON',9563=>'ON',9564=>'ON',9565=>'ON',9566=>'ON',9567=>'ON',9568=>'ON',9569=>'ON',9570=>'ON',9571=>'ON',9572=>'ON',9573=>'ON',9574=>'ON',9575=>'ON',9576=>'ON',9577=>'ON',9578=>'ON',9579=>'ON',9580=>'ON',9581=>'ON',9582=>'ON',9583=>'ON',9584=>'ON',9585=>'ON',9586=>'ON',9587=>'ON',9588=>'ON',9589=>'ON',9590=>'ON',9591=>'ON',9592=>'ON',9593=>'ON',9594=>'ON',9595=>'ON',9596=>'ON',9597=>'ON',9598=>'ON',9599=>'ON',9600=>'ON',9601=>'ON',9602=>'ON',9603=>'ON',9604=>'ON',9605=>'ON',9606=>'ON',9607=>'ON',9608=>'ON',9609=>'ON',9610=>'ON',9611=>'ON',9612=>'ON',9613=>'ON',9614=>'ON',9615=>'ON',9616=>'ON',9617=>'ON',9618=>'ON',9619=>'ON',9620=>'ON',9621=>'ON',9622=>'ON',9623=>'ON',9624=>'ON',9625=>'ON',9626=>'ON',9627=>'ON',9628=>'ON',9629=>'ON',9630=>'ON',9631=>'ON',9632=>'ON',9633=>'ON',9634=>'ON',9635=>'ON',9636=>'ON',9637=>'ON',9638=>'ON',9639=>'ON',9640=>'ON',9641=>'ON',9642=>'ON',9643=>'ON',9644=>'ON',9645=>'ON',9646=>'ON',9647=>'ON',9648=>'ON',9649=>'ON',9650=>'ON',9651=>'ON',9652=>'ON',9653=>'ON',9654=>'ON',9655=>'ON',9656=>'ON',9657=>'ON',9658=>'ON',9659=>'ON',9660=>'ON',9661=>'ON',9662=>'ON',9663=>'ON',9664=>'ON',9665=>'ON',9666=>'ON',9667=>'ON',9668=>'ON',9669=>'ON',9670=>'ON',9671=>'ON',9672=>'ON',9673=>'ON',9674=>'ON',9675=>'ON',9676=>'ON',9677=>'ON',9678=>'ON',9679=>'ON',9680=>'ON',9681=>'ON',9682=>'ON',9683=>'ON',9684=>'ON',9685=>'ON',9686=>'ON',9687=>'ON',9688=>'ON',9689=>'ON',9690=>'ON',9691=>'ON',9692=>'ON',9693=>'ON',9694=>'ON',9695=>'ON',9696=>'ON',9697=>'ON',9698=>'ON',9699=>'ON',9700=>'ON',9701=>'ON',9702=>'ON',9703=>'ON',9704=>'ON',9705=>'ON',9706=>'ON',9707=>'ON',9708=>'ON',9709=>'ON',9710=>'ON',9711=>'ON',9712=>'ON',9713=>'ON',9714=>'ON',9715=>'ON',9716=>'ON',9717=>'ON',9718=>'ON',9719=>'ON',9720=>'ON',9721=>'ON',9722=>'ON',9723=>'ON',9724=>'ON',9725=>'ON',9726=>'ON',9727=>'ON',9728=>'ON',9729=>'ON',9730=>'ON',9731=>'ON',9732=>'ON',9733=>'ON',9734=>'ON',9735=>'ON',9736=>'ON',9737=>'ON',9738=>'ON',9739=>'ON',9740=>'ON',9741=>'ON',9742=>'ON',9743=>'ON',9744=>'ON',9745=>'ON',9746=>'ON',9747=>'ON',9748=>'ON',9749=>'ON',9750=>'ON',9751=>'ON',9752=>'ON',9753=>'ON',9754=>'ON',9755=>'ON',9756=>'ON',9757=>'ON',9758=>'ON',9759=>'ON',9760=>'ON',9761=>'ON',9762=>'ON',9763=>'ON',9764=>'ON',9765=>'ON',9766=>'ON',9767=>'ON',9768=>'ON',9769=>'ON',9770=>'ON',9771=>'ON',9772=>'ON',9773=>'ON',9774=>'ON',9775=>'ON',9776=>'ON',9777=>'ON',9778=>'ON',9779=>'ON',9780=>'ON',9781=>'ON',9782=>'ON',9783=>'ON',9784=>'ON',9785=>'ON',9786=>'ON',9787=>'ON',9788=>'ON',9789=>'ON',9790=>'ON',9791=>'ON',9792=>'ON',9793=>'ON',9794=>'ON',9795=>'ON',9796=>'ON',9797=>'ON',9798=>'ON',9799=>'ON',9800=>'ON',9801=>'ON',9802=>'ON',9803=>'ON',9804=>'ON',9805=>'ON',9806=>'ON',9807=>'ON',9808=>'ON',9809=>'ON',9810=>'ON',9811=>'ON',9812=>'ON',9813=>'ON',9814=>'ON',9815=>'ON',9816=>'ON',9817=>'ON',9818=>'ON',9819=>'ON',9820=>'ON',9821=>'ON',9822=>'ON',9823=>'ON',9824=>'ON',9825=>'ON',9826=>'ON',9827=>'ON',9828=>'ON',9829=>'ON',9830=>'ON',9831=>'ON',9832=>'ON',9833=>'ON',9834=>'ON',9835=>'ON',9836=>'ON',9837=>'ON',9838=>'ON',9839=>'ON',9840=>'ON',9841=>'ON',9842=>'ON',9843=>'ON',9844=>'ON',9845=>'ON',9846=>'ON',9847=>'ON',9848=>'ON',9849=>'ON',9850=>'ON',9851=>'ON',9852=>'ON',9853=>'ON',9854=>'ON',9855=>'ON',9856=>'ON',9857=>'ON',9858=>'ON',9859=>'ON',9860=>'ON',9861=>'ON',9862=>'ON',9863=>'ON',9864=>'ON',9865=>'ON',9866=>'ON',9867=>'ON',9868=>'ON',9869=>'ON',9870=>'ON',9871=>'ON',9872=>'ON',9873=>'ON',9874=>'ON',9875=>'ON',9876=>'ON',9877=>'ON',9878=>'ON',9879=>'ON',9880=>'ON',9881=>'ON',9882=>'ON',9883=>'ON',9884=>'ON',9888=>'ON',9889=>'ON',9890=>'ON',9891=>'ON',9892=>'ON',9893=>'ON',9894=>'ON',9895=>'ON',9896=>'ON',9897=>'ON',9898=>'ON',9899=>'ON',9900=>'L',9901=>'ON',9902=>'ON',9903=>'ON',9904=>'ON',9905=>'ON',9906=>'ON',9985=>'ON',9986=>'ON',9987=>'ON',9988=>'ON',9990=>'ON',9991=>'ON',9992=>'ON',9993=>'ON',9996=>'ON',9997=>'ON',9998=>'ON',9999=>'ON',10000=>'ON',10001=>'ON',10002=>'ON',10003=>'ON',10004=>'ON',10005=>'ON',10006=>'ON',10007=>'ON',10008=>'ON',10009=>'ON',10010=>'ON',10011=>'ON',10012=>'ON',10013=>'ON',10014=>'ON',10015=>'ON',10016=>'ON',10017=>'ON',10018=>'ON',10019=>'ON',10020=>'ON',10021=>'ON',10022=>'ON',10023=>'ON',10025=>'ON',10026=>'ON',10027=>'ON',10028=>'ON',10029=>'ON',10030=>'ON',10031=>'ON',10032=>'ON',10033=>'ON',10034=>'ON',10035=>'ON',10036=>'ON',10037=>'ON',10038=>'ON',10039=>'ON',10040=>'ON',10041=>'ON',10042=>'ON',10043=>'ON',10044=>'ON',10045=>'ON',10046=>'ON',10047=>'ON',10048=>'ON',10049=>'ON',10050=>'ON',10051=>'ON',10052=>'ON',10053=>'ON',10054=>'ON',10055=>'ON',10056=>'ON',10057=>'ON',10058=>'ON',10059=>'ON',10061=>'ON',10063=>'ON',10064=>'ON',10065=>'ON',10066=>'ON',10070=>'ON',10072=>'ON',10073=>'ON',10074=>'ON',10075=>'ON',10076=>'ON',10077=>'ON',10078=>'ON',10081=>'ON',10082=>'ON',10083=>'ON',10084=>'ON',10085=>'ON',10086=>'ON',10087=>'ON',10088=>'ON',10089=>'ON',10090=>'ON',10091=>'ON',10092=>'ON',10093=>'ON',10094=>'ON',10095=>'ON',10096=>'ON',10097=>'ON',10098=>'ON',10099=>'ON',10100=>'ON',10101=>'ON',10102=>'ON',10103=>'ON',10104=>'ON',10105=>'ON',10106=>'ON',10107=>'ON',10108=>'ON',10109=>'ON',10110=>'ON',10111=>'ON',10112=>'ON',10113=>'ON',10114=>'ON',10115=>'ON',10116=>'ON',10117=>'ON',10118=>'ON',10119=>'ON',10120=>'ON',10121=>'ON',10122=>'ON',10123=>'ON',10124=>'ON',10125=>'ON',10126=>'ON',10127=>'ON',10128=>'ON',10129=>'ON',10130=>'ON',10131=>'ON',10132=>'ON',10136=>'ON',10137=>'ON',10138=>'ON',10139=>'ON',10140=>'ON',10141=>'ON',10142=>'ON',10143=>'ON',10144=>'ON',10145=>'ON',10146=>'ON',10147=>'ON',10148=>'ON',10149=>'ON',10150=>'ON',10151=>'ON',10152=>'ON',10153=>'ON',10154=>'ON',10155=>'ON',10156=>'ON',10157=>'ON',10158=>'ON',10159=>'ON',10161=>'ON',10162=>'ON',10163=>'ON',10164=>'ON',10165=>'ON',10166=>'ON',10167=>'ON',10168=>'ON',10169=>'ON',10170=>'ON',10171=>'ON',10172=>'ON',10173=>'ON',10174=>'ON',10176=>'ON',10177=>'ON',10178=>'ON',10179=>'ON',10180=>'ON',10181=>'ON',10182=>'ON',10183=>'ON',10184=>'ON',10185=>'ON',10186=>'ON',10192=>'ON',10193=>'ON',10194=>'ON',10195=>'ON',10196=>'ON',10197=>'ON',10198=>'ON',10199=>'ON',10200=>'ON',10201=>'ON',10202=>'ON',10203=>'ON',10204=>'ON',10205=>'ON',10206=>'ON',10207=>'ON',10208=>'ON',10209=>'ON',10210=>'ON',10211=>'ON',10212=>'ON',10213=>'ON',10214=>'ON',10215=>'ON',10216=>'ON',10217=>'ON',10218=>'ON',10219=>'ON',10224=>'ON',10225=>'ON',10226=>'ON',10227=>'ON',10228=>'ON',10229=>'ON',10230=>'ON',10231=>'ON',10232=>'ON',10233=>'ON',10234=>'ON',10235=>'ON',10236=>'ON',10237=>'ON',10238=>'ON',10239=>'ON',10240=>'L',10241=>'L',10242=>'L',10243=>'L',10244=>'L',10245=>'L',10246=>'L',10247=>'L',10248=>'L',10249=>'L',10250=>'L',10251=>'L',10252=>'L',10253=>'L',10254=>'L',10255=>'L',10256=>'L',10257=>'L',10258=>'L',10259=>'L',10260=>'L',10261=>'L',10262=>'L',10263=>'L',10264=>'L',10265=>'L',10266=>'L',10267=>'L',10268=>'L',10269=>'L',10270=>'L',10271=>'L',10272=>'L',10273=>'L',10274=>'L',10275=>'L',10276=>'L',10277=>'L',10278=>'L',10279=>'L',10280=>'L',10281=>'L',10282=>'L',10283=>'L',10284=>'L',10285=>'L',10286=>'L',10287=>'L',10288=>'L',10289=>'L',10290=>'L',10291=>'L',10292=>'L',10293=>'L',10294=>'L',10295=>'L',10296=>'L',10297=>'L',10298=>'L',10299=>'L',10300=>'L',10301=>'L',10302=>'L',10303=>'L',10304=>'L',10305=>'L',10306=>'L',10307=>'L',10308=>'L',10309=>'L',10310=>'L',10311=>'L',10312=>'L',10313=>'L',10314=>'L',10315=>'L',10316=>'L',10317=>'L',10318=>'L',10319=>'L',10320=>'L',10321=>'L',10322=>'L',10323=>'L',10324=>'L',10325=>'L',10326=>'L',10327=>'L',10328=>'L',10329=>'L',10330=>'L',10331=>'L',10332=>'L',10333=>'L',10334=>'L',10335=>'L',10336=>'L',10337=>'L',10338=>'L',10339=>'L',10340=>'L',10341=>'L',10342=>'L',10343=>'L',10344=>'L',10345=>'L',10346=>'L',10347=>'L',10348=>'L',10349=>'L',10350=>'L',10351=>'L',10352=>'L',10353=>'L',10354=>'L',10355=>'L',10356=>'L',10357=>'L',10358=>'L',10359=>'L',10360=>'L',10361=>'L',10362=>'L',10363=>'L',10364=>'L',10365=>'L',10366=>'L',10367=>'L',10368=>'L',10369=>'L',10370=>'L',10371=>'L',10372=>'L',10373=>'L',10374=>'L',10375=>'L',10376=>'L',10377=>'L',10378=>'L',10379=>'L',10380=>'L',10381=>'L',10382=>'L',10383=>'L',10384=>'L',10385=>'L',10386=>'L',10387=>'L',10388=>'L',10389=>'L',10390=>'L',10391=>'L',10392=>'L',10393=>'L',10394=>'L',10395=>'L',10396=>'L',10397=>'L',10398=>'L',10399=>'L',10400=>'L',10401=>'L',10402=>'L',10403=>'L',10404=>'L',10405=>'L',10406=>'L',10407=>'L',10408=>'L',10409=>'L',10410=>'L',10411=>'L',10412=>'L',10413=>'L',10414=>'L',10415=>'L',10416=>'L',10417=>'L',10418=>'L',10419=>'L',10420=>'L',10421=>'L',10422=>'L',10423=>'L',10424=>'L',10425=>'L',10426=>'L',10427=>'L',10428=>'L',10429=>'L',10430=>'L',10431=>'L',10432=>'L',10433=>'L',10434=>'L',10435=>'L',10436=>'L',10437=>'L',10438=>'L',10439=>'L',10440=>'L',10441=>'L',10442=>'L',10443=>'L',10444=>'L',10445=>'L',10446=>'L',10447=>'L',10448=>'L',10449=>'L',10450=>'L',10451=>'L',10452=>'L',10453=>'L',10454=>'L',10455=>'L',10456=>'L',10457=>'L',10458=>'L',10459=>'L',10460=>'L',10461=>'L',10462=>'L',10463=>'L',10464=>'L',10465=>'L',10466=>'L',10467=>'L',10468=>'L',10469=>'L',10470=>'L',10471=>'L',10472=>'L',10473=>'L',10474=>'L',10475=>'L',10476=>'L',10477=>'L',10478=>'L',10479=>'L',10480=>'L',10481=>'L',10482=>'L',10483=>'L',10484=>'L',10485=>'L',10486=>'L',10487=>'L',10488=>'L',10489=>'L',10490=>'L',10491=>'L',10492=>'L',10493=>'L',10494=>'L',10495=>'L',10496=>'ON',10497=>'ON',10498=>'ON',10499=>'ON',10500=>'ON',10501=>'ON',10502=>'ON',10503=>'ON',10504=>'ON',10505=>'ON',10506=>'ON',10507=>'ON',10508=>'ON',10509=>'ON',10510=>'ON',10511=>'ON',10512=>'ON',10513=>'ON',10514=>'ON',10515=>'ON',10516=>'ON',10517=>'ON',10518=>'ON',10519=>'ON',10520=>'ON',10521=>'ON',10522=>'ON',10523=>'ON',10524=>'ON',10525=>'ON',10526=>'ON',10527=>'ON',10528=>'ON',10529=>'ON',10530=>'ON',10531=>'ON',10532=>'ON',10533=>'ON',10534=>'ON',10535=>'ON',10536=>'ON',10537=>'ON',10538=>'ON',10539=>'ON',10540=>'ON',10541=>'ON',10542=>'ON',10543=>'ON',10544=>'ON',10545=>'ON',10546=>'ON',10547=>'ON',10548=>'ON',10549=>'ON',10550=>'ON',10551=>'ON',10552=>'ON',10553=>'ON',10554=>'ON',10555=>'ON',10556=>'ON',10557=>'ON',10558=>'ON',10559=>'ON',10560=>'ON',10561=>'ON',10562=>'ON',10563=>'ON',10564=>'ON',10565=>'ON',10566=>'ON',10567=>'ON',10568=>'ON',10569=>'ON',10570=>'ON',10571=>'ON',10572=>'ON',10573=>'ON',10574=>'ON',10575=>'ON',10576=>'ON',10577=>'ON',10578=>'ON',10579=>'ON',10580=>'ON',10581=>'ON',10582=>'ON',10583=>'ON',10584=>'ON',10585=>'ON',10586=>'ON',10587=>'ON',10588=>'ON',10589=>'ON',10590=>'ON',10591=>'ON',10592=>'ON',10593=>'ON',10594=>'ON',10595=>'ON',10596=>'ON',10597=>'ON',10598=>'ON',10599=>'ON',10600=>'ON',10601=>'ON',10602=>'ON',10603=>'ON',10604=>'ON',10605=>'ON',10606=>'ON',10607=>'ON',10608=>'ON',10609=>'ON',10610=>'ON',10611=>'ON',10612=>'ON',10613=>'ON',10614=>'ON',10615=>'ON',10616=>'ON',10617=>'ON',10618=>'ON',10619=>'ON',10620=>'ON',10621=>'ON',10622=>'ON',10623=>'ON',10624=>'ON',10625=>'ON',10626=>'ON',10627=>'ON',10628=>'ON',10629=>'ON',10630=>'ON',10631=>'ON',10632=>'ON',10633=>'ON',10634=>'ON',10635=>'ON',10636=>'ON',10637=>'ON',10638=>'ON',10639=>'ON',10640=>'ON',10641=>'ON',10642=>'ON',10643=>'ON',10644=>'ON',10645=>'ON',10646=>'ON',10647=>'ON',10648=>'ON',10649=>'ON',10650=>'ON',10651=>'ON',10652=>'ON',10653=>'ON',10654=>'ON',10655=>'ON',10656=>'ON',10657=>'ON',10658=>'ON',10659=>'ON',10660=>'ON',10661=>'ON',10662=>'ON',10663=>'ON',10664=>'ON',10665=>'ON',10666=>'ON',10667=>'ON',10668=>'ON',10669=>'ON',10670=>'ON',10671=>'ON',10672=>'ON',10673=>'ON',10674=>'ON',10675=>'ON',10676=>'ON',10677=>'ON',10678=>'ON',10679=>'ON',10680=>'ON',10681=>'ON',10682=>'ON',10683=>'ON',10684=>'ON',10685=>'ON',10686=>'ON',10687=>'ON',10688=>'ON',10689=>'ON',10690=>'ON',10691=>'ON',10692=>'ON',10693=>'ON',10694=>'ON',10695=>'ON',10696=>'ON',10697=>'ON',10698=>'ON',10699=>'ON',10700=>'ON',10701=>'ON',10702=>'ON',10703=>'ON',10704=>'ON',10705=>'ON',10706=>'ON',10707=>'ON',10708=>'ON',10709=>'ON',10710=>'ON',10711=>'ON',10712=>'ON',10713=>'ON',10714=>'ON',10715=>'ON',10716=>'ON',10717=>'ON',10718=>'ON',10719=>'ON',10720=>'ON',10721=>'ON',10722=>'ON',10723=>'ON',10724=>'ON',10725=>'ON',10726=>'ON',10727=>'ON',10728=>'ON',10729=>'ON',10730=>'ON',10731=>'ON',10732=>'ON',10733=>'ON',10734=>'ON',10735=>'ON',10736=>'ON',10737=>'ON',10738=>'ON',10739=>'ON',10740=>'ON',10741=>'ON',10742=>'ON',10743=>'ON',10744=>'ON',10745=>'ON',10746=>'ON',10747=>'ON',10748=>'ON',10749=>'ON',10750=>'ON',10751=>'ON',10752=>'ON',10753=>'ON',10754=>'ON',10755=>'ON',10756=>'ON',10757=>'ON',10758=>'ON',10759=>'ON',10760=>'ON',10761=>'ON',10762=>'ON',10763=>'ON',10764=>'ON',10765=>'ON',10766=>'ON',10767=>'ON',10768=>'ON',10769=>'ON',10770=>'ON',10771=>'ON',10772=>'ON',10773=>'ON',10774=>'ON',10775=>'ON',10776=>'ON',10777=>'ON',10778=>'ON',10779=>'ON',10780=>'ON',10781=>'ON',10782=>'ON',10783=>'ON',10784=>'ON',10785=>'ON',10786=>'ON',10787=>'ON',10788=>'ON',10789=>'ON',10790=>'ON',10791=>'ON',10792=>'ON',10793=>'ON',10794=>'ON',10795=>'ON',10796=>'ON',10797=>'ON',10798=>'ON',10799=>'ON',10800=>'ON',10801=>'ON',10802=>'ON',10803=>'ON',10804=>'ON',10805=>'ON',10806=>'ON',10807=>'ON',10808=>'ON',10809=>'ON',10810=>'ON',10811=>'ON',10812=>'ON',10813=>'ON',10814=>'ON',10815=>'ON',10816=>'ON',10817=>'ON',10818=>'ON',10819=>'ON',10820=>'ON',10821=>'ON',10822=>'ON',10823=>'ON',10824=>'ON',10825=>'ON',10826=>'ON',10827=>'ON',10828=>'ON',10829=>'ON',10830=>'ON',10831=>'ON',10832=>'ON',10833=>'ON',10834=>'ON',10835=>'ON',10836=>'ON',10837=>'ON',10838=>'ON',10839=>'ON',10840=>'ON',10841=>'ON',10842=>'ON',10843=>'ON',10844=>'ON',10845=>'ON',10846=>'ON',10847=>'ON',10848=>'ON',10849=>'ON',10850=>'ON',10851=>'ON',10852=>'ON',10853=>'ON',10854=>'ON',10855=>'ON',10856=>'ON',10857=>'ON',10858=>'ON',10859=>'ON',10860=>'ON',10861=>'ON',10862=>'ON',10863=>'ON',10864=>'ON',10865=>'ON',10866=>'ON',10867=>'ON',10868=>'ON',10869=>'ON',10870=>'ON',10871=>'ON',10872=>'ON',10873=>'ON',10874=>'ON',10875=>'ON',10876=>'ON',10877=>'ON',10878=>'ON',10879=>'ON',10880=>'ON',10881=>'ON',10882=>'ON',10883=>'ON',10884=>'ON',10885=>'ON',10886=>'ON',10887=>'ON',10888=>'ON',10889=>'ON',10890=>'ON',10891=>'ON',10892=>'ON',10893=>'ON',10894=>'ON',10895=>'ON',10896=>'ON',10897=>'ON',10898=>'ON',10899=>'ON',10900=>'ON',10901=>'ON',10902=>'ON',10903=>'ON',10904=>'ON',10905=>'ON',10906=>'ON',10907=>'ON',10908=>'ON',10909=>'ON',10910=>'ON',10911=>'ON',10912=>'ON',10913=>'ON',10914=>'ON',10915=>'ON',10916=>'ON',10917=>'ON',10918=>'ON',10919=>'ON',10920=>'ON',10921=>'ON',10922=>'ON',10923=>'ON',10924=>'ON',10925=>'ON',10926=>'ON',10927=>'ON',10928=>'ON',10929=>'ON',10930=>'ON',10931=>'ON',10932=>'ON',10933=>'ON',10934=>'ON',10935=>'ON',10936=>'ON',10937=>'ON',10938=>'ON',10939=>'ON',10940=>'ON',10941=>'ON',10942=>'ON',10943=>'ON',10944=>'ON',10945=>'ON',10946=>'ON',10947=>'ON',10948=>'ON',10949=>'ON',10950=>'ON',10951=>'ON',10952=>'ON',10953=>'ON',10954=>'ON',10955=>'ON',10956=>'ON',10957=>'ON',10958=>'ON',10959=>'ON',10960=>'ON',10961=>'ON',10962=>'ON',10963=>'ON',10964=>'ON',10965=>'ON',10966=>'ON',10967=>'ON',10968=>'ON',10969=>'ON',10970=>'ON',10971=>'ON',10972=>'ON',10973=>'ON',10974=>'ON',10975=>'ON',10976=>'ON',10977=>'ON',10978=>'ON',10979=>'ON',10980=>'ON',10981=>'ON',10982=>'ON',10983=>'ON',10984=>'ON',10985=>'ON',10986=>'ON',10987=>'ON',10988=>'ON',10989=>'ON',10990=>'ON',10991=>'ON',10992=>'ON',10993=>'ON',10994=>'ON',10995=>'ON',10996=>'ON',10997=>'ON',10998=>'ON',10999=>'ON',11000=>'ON',11001=>'ON',11002=>'ON',11003=>'ON',11004=>'ON',11005=>'ON',11006=>'ON',11007=>'ON',11008=>'ON',11009=>'ON',11010=>'ON',11011=>'ON',11012=>'ON',11013=>'ON',11014=>'ON',11015=>'ON',11016=>'ON',11017=>'ON',11018=>'ON',11019=>'ON',11020=>'ON',11021=>'ON',11022=>'ON',11023=>'ON',11024=>'ON',11025=>'ON',11026=>'ON',11027=>'ON',11028=>'ON',11029=>'ON',11030=>'ON',11031=>'ON',11032=>'ON',11033=>'ON',11034=>'ON',11040=>'ON',11041=>'ON',11042=>'ON',11043=>'ON',11264=>'L',11265=>'L',11266=>'L',11267=>'L',11268=>'L',11269=>'L',11270=>'L',11271=>'L',11272=>'L',11273=>'L',11274=>'L',11275=>'L',11276=>'L',11277=>'L',11278=>'L',11279=>'L',11280=>'L',11281=>'L',11282=>'L',11283=>'L',11284=>'L',11285=>'L',11286=>'L',11287=>'L',11288=>'L',11289=>'L',11290=>'L',11291=>'L',11292=>'L',11293=>'L',11294=>'L',11295=>'L',11296=>'L',11297=>'L',11298=>'L',11299=>'L',11300=>'L',11301=>'L',11302=>'L',11303=>'L',11304=>'L',11305=>'L',11306=>'L',11307=>'L',11308=>'L',11309=>'L',11310=>'L',11312=>'L',11313=>'L',11314=>'L',11315=>'L',11316=>'L',11317=>'L',11318=>'L',11319=>'L',11320=>'L',11321=>'L',11322=>'L',11323=>'L',11324=>'L',11325=>'L',11326=>'L',11327=>'L',11328=>'L',11329=>'L',11330=>'L',11331=>'L',11332=>'L',11333=>'L',11334=>'L',11335=>'L',11336=>'L',11337=>'L',11338=>'L',11339=>'L',11340=>'L',11341=>'L',11342=>'L',11343=>'L',11344=>'L',11345=>'L',11346=>'L',11347=>'L',11348=>'L',11349=>'L',11350=>'L',11351=>'L',11352=>'L',11353=>'L',11354=>'L',11355=>'L',11356=>'L',11357=>'L',11358=>'L',11360=>'L',11361=>'L',11362=>'L',11363=>'L',11364=>'L',11365=>'L',11366=>'L',11367=>'L',11368=>'L',11369=>'L',11370=>'L',11371=>'L',11372=>'L',11380=>'L',11381=>'L',11382=>'L',11383=>'L',11392=>'L',11393=>'L',11394=>'L',11395=>'L',11396=>'L',11397=>'L',11398=>'L',11399=>'L',11400=>'L',11401=>'L',11402=>'L',11403=>'L',11404=>'L',11405=>'L',11406=>'L',11407=>'L',11408=>'L',11409=>'L',11410=>'L',11411=>'L',11412=>'L',11413=>'L',11414=>'L',11415=>'L',11416=>'L',11417=>'L',11418=>'L',11419=>'L',11420=>'L',11421=>'L',11422=>'L',11423=>'L',11424=>'L',11425=>'L',11426=>'L',11427=>'L',11428=>'L',11429=>'L',11430=>'L',11431=>'L',11432=>'L',11433=>'L',11434=>'L',11435=>'L',11436=>'L',11437=>'L',11438=>'L',11439=>'L',11440=>'L',11441=>'L',11442=>'L',11443=>'L',11444=>'L',11445=>'L',11446=>'L',11447=>'L',11448=>'L',11449=>'L',11450=>'L',11451=>'L',11452=>'L',11453=>'L',11454=>'L',11455=>'L',11456=>'L',11457=>'L',11458=>'L',11459=>'L',11460=>'L',11461=>'L',11462=>'L',11463=>'L',11464=>'L',11465=>'L',11466=>'L',11467=>'L',11468=>'L',11469=>'L',11470=>'L',11471=>'L',11472=>'L',11473=>'L',11474=>'L',11475=>'L',11476=>'L',11477=>'L',11478=>'L',11479=>'L',11480=>'L',11481=>'L',11482=>'L',11483=>'L',11484=>'L',11485=>'L',11486=>'L',11487=>'L',11488=>'L',11489=>'L',11490=>'L',11491=>'L',11492=>'L',11493=>'ON',11494=>'ON',11495=>'ON',11496=>'ON',11497=>'ON',11498=>'ON',11513=>'ON',11514=>'ON',11515=>'ON',11516=>'ON',11517=>'ON',11518=>'ON',11519=>'ON',11520=>'L',11521=>'L',11522=>'L',11523=>'L',11524=>'L',11525=>'L',11526=>'L',11527=>'L',11528=>'L',11529=>'L',11530=>'L',11531=>'L',11532=>'L',11533=>'L',11534=>'L',11535=>'L',11536=>'L',11537=>'L',11538=>'L',11539=>'L',11540=>'L',11541=>'L',11542=>'L',11543=>'L',11544=>'L',11545=>'L',11546=>'L',11547=>'L',11548=>'L',11549=>'L',11550=>'L',11551=>'L',11552=>'L',11553=>'L',11554=>'L',11555=>'L',11556=>'L',11557=>'L',11568=>'L',11569=>'L',11570=>'L',11571=>'L',11572=>'L',11573=>'L',11574=>'L',11575=>'L',11576=>'L',11577=>'L',11578=>'L',11579=>'L',11580=>'L',11581=>'L',11582=>'L',11583=>'L',11584=>'L',11585=>'L',11586=>'L',11587=>'L',11588=>'L',11589=>'L',11590=>'L',11591=>'L',11592=>'L',11593=>'L',11594=>'L',11595=>'L',11596=>'L',11597=>'L',11598=>'L',11599=>'L',11600=>'L',11601=>'L',11602=>'L',11603=>'L',11604=>'L',11605=>'L',11606=>'L',11607=>'L',11608=>'L',11609=>'L',11610=>'L',11611=>'L',11612=>'L',11613=>'L',11614=>'L',11615=>'L',11616=>'L',11617=>'L',11618=>'L',11619=>'L',11620=>'L',11621=>'L',11631=>'L',11648=>'L',11649=>'L',11650=>'L',11651=>'L',11652=>'L',11653=>'L',11654=>'L',11655=>'L',11656=>'L',11657=>'L',11658=>'L',11659=>'L',11660=>'L',11661=>'L',11662=>'L',11663=>'L',11664=>'L',11665=>'L',11666=>'L',11667=>'L',11668=>'L',11669=>'L',11670=>'L',11680=>'L',11681=>'L',11682=>'L',11683=>'L',11684=>'L',11685=>'L',11686=>'L',11688=>'L',11689=>'L',11690=>'L',11691=>'L',11692=>'L',11693=>'L',11694=>'L',11696=>'L',11697=>'L',11698=>'L',11699=>'L',11700=>'L',11701=>'L',11702=>'L',11704=>'L',11705=>'L',11706=>'L',11707=>'L',11708=>'L',11709=>'L',11710=>'L',11712=>'L',11713=>'L',11714=>'L',11715=>'L',11716=>'L',11717=>'L',11718=>'L',11720=>'L',11721=>'L',11722=>'L',11723=>'L',11724=>'L',11725=>'L',11726=>'L',11728=>'L',11729=>'L',11730=>'L',11731=>'L',11732=>'L',11733=>'L',11734=>'L',11736=>'L',11737=>'L',11738=>'L',11739=>'L',11740=>'L',11741=>'L',11742=>'L',11776=>'ON',11777=>'ON',11778=>'ON',11779=>'ON',11780=>'ON',11781=>'ON',11782=>'ON',11783=>'ON',11784=>'ON',11785=>'ON',11786=>'ON',11787=>'ON',11788=>'ON',11789=>'ON',11790=>'ON',11791=>'ON',11792=>'ON',11793=>'ON',11794=>'ON',11795=>'ON',11796=>'ON',11797=>'ON',11798=>'ON',11799=>'ON',11804=>'ON',11805=>'ON',11904=>'ON',11905=>'ON',11906=>'ON',11907=>'ON',11908=>'ON',11909=>'ON',11910=>'ON',11911=>'ON',11912=>'ON',11913=>'ON',11914=>'ON',11915=>'ON',11916=>'ON',11917=>'ON',11918=>'ON',11919=>'ON',11920=>'ON',11921=>'ON',11922=>'ON',11923=>'ON',11924=>'ON',11925=>'ON',11926=>'ON',11927=>'ON',11928=>'ON',11929=>'ON',11931=>'ON',11932=>'ON',11933=>'ON',11934=>'ON',11935=>'ON',11936=>'ON',11937=>'ON',11938=>'ON',11939=>'ON',11940=>'ON',11941=>'ON',11942=>'ON',11943=>'ON',11944=>'ON',11945=>'ON',11946=>'ON',11947=>'ON',11948=>'ON',11949=>'ON',11950=>'ON',11951=>'ON',11952=>'ON',11953=>'ON',11954=>'ON',11955=>'ON',11956=>'ON',11957=>'ON',11958=>'ON',11959=>'ON',11960=>'ON',11961=>'ON',11962=>'ON',11963=>'ON',11964=>'ON',11965=>'ON',11966=>'ON',11967=>'ON',11968=>'ON',11969=>'ON',11970=>'ON',11971=>'ON',11972=>'ON',11973=>'ON',11974=>'ON',11975=>'ON',11976=>'ON',11977=>'ON',11978=>'ON',11979=>'ON',11980=>'ON',11981=>'ON',11982=>'ON',11983=>'ON',11984=>'ON',11985=>'ON',11986=>'ON',11987=>'ON',11988=>'ON',11989=>'ON',11990=>'ON',11991=>'ON',11992=>'ON',11993=>'ON',11994=>'ON',11995=>'ON',11996=>'ON',11997=>'ON',11998=>'ON',11999=>'ON',12000=>'ON',12001=>'ON',12002=>'ON',12003=>'ON',12004=>'ON',12005=>'ON',12006=>'ON',12007=>'ON',12008=>'ON',12009=>'ON',12010=>'ON',12011=>'ON',12012=>'ON',12013=>'ON',12014=>'ON',12015=>'ON',12016=>'ON',12017=>'ON',12018=>'ON',12019=>'ON',12032=>'ON',12033=>'ON',12034=>'ON',12035=>'ON',12036=>'ON',12037=>'ON',12038=>'ON',12039=>'ON',12040=>'ON',12041=>'ON',12042=>'ON',12043=>'ON',12044=>'ON',12045=>'ON',12046=>'ON',12047=>'ON',12048=>'ON',12049=>'ON',12050=>'ON',12051=>'ON',12052=>'ON',12053=>'ON',12054=>'ON',12055=>'ON',12056=>'ON',12057=>'ON',12058=>'ON',12059=>'ON',12060=>'ON',12061=>'ON',12062=>'ON',12063=>'ON',12064=>'ON',12065=>'ON',12066=>'ON',12067=>'ON',12068=>'ON',12069=>'ON',12070=>'ON',12071=>'ON',12072=>'ON',12073=>'ON',12074=>'ON',12075=>'ON',12076=>'ON',12077=>'ON',12078=>'ON',12079=>'ON',12080=>'ON',12081=>'ON',12082=>'ON',12083=>'ON',12084=>'ON',12085=>'ON',12086=>'ON',12087=>'ON',12088=>'ON',12089=>'ON',12090=>'ON',12091=>'ON',12092=>'ON',12093=>'ON',12094=>'ON',12095=>'ON',12096=>'ON',12097=>'ON',12098=>'ON',12099=>'ON',12100=>'ON',12101=>'ON',12102=>'ON',12103=>'ON',12104=>'ON',12105=>'ON',12106=>'ON',12107=>'ON',12108=>'ON',12109=>'ON',12110=>'ON',12111=>'ON',12112=>'ON',12113=>'ON',12114=>'ON',12115=>'ON',12116=>'ON',12117=>'ON',12118=>'ON',12119=>'ON',12120=>'ON',12121=>'ON',12122=>'ON',12123=>'ON',12124=>'ON',12125=>'ON',12126=>'ON',12127=>'ON',12128=>'ON',12129=>'ON',12130=>'ON',12131=>'ON',12132=>'ON',12133=>'ON',12134=>'ON',12135=>'ON',12136=>'ON',12137=>'ON',12138=>'ON',12139=>'ON',12140=>'ON',12141=>'ON',12142=>'ON',12143=>'ON',12144=>'ON',12145=>'ON',12146=>'ON',12147=>'ON',12148=>'ON',12149=>'ON',12150=>'ON',12151=>'ON',12152=>'ON',12153=>'ON',12154=>'ON',12155=>'ON',12156=>'ON',12157=>'ON',12158=>'ON',12159=>'ON',12160=>'ON',12161=>'ON',12162=>'ON',12163=>'ON',12164=>'ON',12165=>'ON',12166=>'ON',12167=>'ON',12168=>'ON',12169=>'ON',12170=>'ON',12171=>'ON',12172=>'ON',12173=>'ON',12174=>'ON',12175=>'ON',12176=>'ON',12177=>'ON',12178=>'ON',12179=>'ON',12180=>'ON',12181=>'ON',12182=>'ON',12183=>'ON',12184=>'ON',12185=>'ON',12186=>'ON',12187=>'ON',12188=>'ON',12189=>'ON',12190=>'ON',12191=>'ON',12192=>'ON',12193=>'ON',12194=>'ON',12195=>'ON',12196=>'ON',12197=>'ON',12198=>'ON',12199=>'ON',12200=>'ON',12201=>'ON',12202=>'ON',12203=>'ON',12204=>'ON',12205=>'ON',12206=>'ON',12207=>'ON',12208=>'ON',12209=>'ON',12210=>'ON',12211=>'ON',12212=>'ON',12213=>'ON',12214=>'ON',12215=>'ON',12216=>'ON',12217=>'ON',12218=>'ON',12219=>'ON',12220=>'ON',12221=>'ON',12222=>'ON',12223=>'ON',12224=>'ON',12225=>'ON',12226=>'ON',12227=>'ON',12228=>'ON',12229=>'ON',12230=>'ON',12231=>'ON',12232=>'ON',12233=>'ON',12234=>'ON',12235=>'ON',12236=>'ON',12237=>'ON',12238=>'ON',12239=>'ON',12240=>'ON',12241=>'ON',12242=>'ON',12243=>'ON',12244=>'ON',12245=>'ON',12272=>'ON',12273=>'ON',12274=>'ON',12275=>'ON',12276=>'ON',12277=>'ON',12278=>'ON',12279=>'ON',12280=>'ON',12281=>'ON',12282=>'ON',12283=>'ON',12288=>'WS',12289=>'ON',12290=>'ON',12291=>'ON',12292=>'ON',12293=>'L',12294=>'L',12295=>'L',12296=>'ON',12297=>'ON',12298=>'ON',12299=>'ON',12300=>'ON',12301=>'ON',12302=>'ON',12303=>'ON',12304=>'ON',12305=>'ON',12306=>'ON',12307=>'ON',12308=>'ON',12309=>'ON',12310=>'ON',12311=>'ON',12312=>'ON',12313=>'ON',12314=>'ON',12315=>'ON',12316=>'ON',12317=>'ON',12318=>'ON',12319=>'ON',12320=>'ON',12321=>'L',12322=>'L',12323=>'L',12324=>'L',12325=>'L',12326=>'L',12327=>'L',12328=>'L',12329=>'L',12330=>'NSM',12331=>'NSM',12332=>'NSM',12333=>'NSM',12334=>'NSM',12335=>'NSM',12336=>'ON',12337=>'L',12338=>'L',12339=>'L',12340=>'L',12341=>'L',12342=>'ON',12343=>'ON',12344=>'L',12345=>'L',12346=>'L',12347=>'L',12348=>'L',12349=>'ON',12350=>'ON',12351=>'ON',12353=>'L',12354=>'L',12355=>'L',12356=>'L',12357=>'L',12358=>'L',12359=>'L',12360=>'L',12361=>'L',12362=>'L',12363=>'L',12364=>'L',12365=>'L',12366=>'L',12367=>'L',12368=>'L',12369=>'L',12370=>'L',12371=>'L',12372=>'L',12373=>'L',12374=>'L',12375=>'L',12376=>'L',12377=>'L',12378=>'L',12379=>'L',12380=>'L',12381=>'L',12382=>'L',12383=>'L',12384=>'L',12385=>'L',12386=>'L',12387=>'L',12388=>'L',12389=>'L',12390=>'L',12391=>'L',12392=>'L',12393=>'L',12394=>'L',12395=>'L',12396=>'L',12397=>'L',12398=>'L',12399=>'L',12400=>'L',12401=>'L',12402=>'L',12403=>'L',12404=>'L',12405=>'L',12406=>'L',12407=>'L',12408=>'L',12409=>'L',12410=>'L',12411=>'L',12412=>'L',12413=>'L',12414=>'L',12415=>'L',12416=>'L',12417=>'L',12418=>'L',12419=>'L',12420=>'L',12421=>'L',12422=>'L',12423=>'L',12424=>'L',12425=>'L',12426=>'L',12427=>'L',12428=>'L',12429=>'L',12430=>'L',12431=>'L',12432=>'L',12433=>'L',12434=>'L',12435=>'L',12436=>'L',12437=>'L',12438=>'L',12441=>'NSM',12442=>'NSM',12443=>'ON',12444=>'ON',12445=>'L',12446=>'L',12447=>'L',12448=>'ON',12449=>'L',12450=>'L',12451=>'L',12452=>'L',12453=>'L',12454=>'L',12455=>'L',12456=>'L',12457=>'L',12458=>'L',12459=>'L',12460=>'L',12461=>'L',12462=>'L',12463=>'L',12464=>'L',12465=>'L',12466=>'L',12467=>'L',12468=>'L',12469=>'L',12470=>'L',12471=>'L',12472=>'L',12473=>'L',12474=>'L',12475=>'L',12476=>'L',12477=>'L',12478=>'L',12479=>'L',12480=>'L',12481=>'L',12482=>'L',12483=>'L',12484=>'L',12485=>'L',12486=>'L',12487=>'L',12488=>'L',12489=>'L',12490=>'L',12491=>'L',12492=>'L',12493=>'L',12494=>'L',12495=>'L',12496=>'L',12497=>'L',12498=>'L',12499=>'L',12500=>'L',12501=>'L',12502=>'L',12503=>'L',12504=>'L',12505=>'L',12506=>'L',12507=>'L',12508=>'L',12509=>'L',12510=>'L',12511=>'L',12512=>'L',12513=>'L',12514=>'L',12515=>'L',12516=>'L',12517=>'L',12518=>'L',12519=>'L',12520=>'L',12521=>'L',12522=>'L',12523=>'L',12524=>'L',12525=>'L',12526=>'L',12527=>'L',12528=>'L',12529=>'L',12530=>'L',12531=>'L',12532=>'L',12533=>'L',12534=>'L',12535=>'L',12536=>'L',12537=>'L',12538=>'L',12539=>'ON',12540=>'L',12541=>'L',12542=>'L',12543=>'L',12549=>'L',12550=>'L',12551=>'L',12552=>'L',12553=>'L',12554=>'L',12555=>'L',12556=>'L',12557=>'L',12558=>'L',12559=>'L',12560=>'L',12561=>'L',12562=>'L',12563=>'L',12564=>'L',12565=>'L',12566=>'L',12567=>'L',12568=>'L',12569=>'L',12570=>'L',12571=>'L',12572=>'L',12573=>'L',12574=>'L',12575=>'L',12576=>'L',12577=>'L',12578=>'L',12579=>'L',12580=>'L',12581=>'L',12582=>'L',12583=>'L',12584=>'L',12585=>'L',12586=>'L',12587=>'L',12588=>'L',12593=>'L',12594=>'L',12595=>'L',12596=>'L',12597=>'L',12598=>'L',12599=>'L',12600=>'L',12601=>'L',12602=>'L',12603=>'L',12604=>'L',12605=>'L',12606=>'L',12607=>'L',12608=>'L',12609=>'L',12610=>'L',12611=>'L',12612=>'L',12613=>'L',12614=>'L',12615=>'L',12616=>'L',12617=>'L',12618=>'L',12619=>'L',12620=>'L',12621=>'L',12622=>'L',12623=>'L',12624=>'L',12625=>'L',12626=>'L',12627=>'L',12628=>'L',12629=>'L',12630=>'L',12631=>'L',12632=>'L',12633=>'L',12634=>'L',12635=>'L',12636=>'L',12637=>'L',12638=>'L',12639=>'L',12640=>'L',12641=>'L',12642=>'L',12643=>'L',12644=>'L',12645=>'L',12646=>'L',12647=>'L',12648=>'L',12649=>'L',12650=>'L',12651=>'L',12652=>'L',12653=>'L',12654=>'L',12655=>'L',12656=>'L',12657=>'L',12658=>'L',12659=>'L',12660=>'L',12661=>'L',12662=>'L',12663=>'L',12664=>'L',12665=>'L',12666=>'L',12667=>'L',12668=>'L',12669=>'L',12670=>'L',12671=>'L',12672=>'L',12673=>'L',12674=>'L',12675=>'L',12676=>'L',12677=>'L',12678=>'L',12679=>'L',12680=>'L',12681=>'L',12682=>'L',12683=>'L',12684=>'L',12685=>'L',12686=>'L',12688=>'L',12689=>'L',12690=>'L',12691=>'L',12692=>'L',12693=>'L',12694=>'L',12695=>'L',12696=>'L',12697=>'L',12698=>'L',12699=>'L',12700=>'L',12701=>'L',12702=>'L',12703=>'L',12704=>'L',12705=>'L',12706=>'L',12707=>'L',12708=>'L',12709=>'L',12710=>'L',12711=>'L',12712=>'L',12713=>'L',12714=>'L',12715=>'L',12716=>'L',12717=>'L',12718=>'L',12719=>'L',12720=>'L',12721=>'L',12722=>'L',12723=>'L',12724=>'L',12725=>'L',12726=>'L',12727=>'L',12736=>'ON',12737=>'ON',12738=>'ON',12739=>'ON',12740=>'ON',12741=>'ON',12742=>'ON',12743=>'ON',12744=>'ON',12745=>'ON',12746=>'ON',12747=>'ON',12748=>'ON',12749=>'ON',12750=>'ON',12751=>'ON',12784=>'L',12785=>'L',12786=>'L',12787=>'L',12788=>'L',12789=>'L',12790=>'L',12791=>'L',12792=>'L',12793=>'L',12794=>'L',12795=>'L',12796=>'L',12797=>'L',12798=>'L',12799=>'L',12800=>'L',12801=>'L',12802=>'L',12803=>'L',12804=>'L',12805=>'L',12806=>'L',12807=>'L',12808=>'L',12809=>'L',12810=>'L',12811=>'L',12812=>'L',12813=>'L',12814=>'L',12815=>'L',12816=>'L',12817=>'L',12818=>'L',12819=>'L',12820=>'L',12821=>'L',12822=>'L',12823=>'L',12824=>'L',12825=>'L',12826=>'L',12827=>'L',12828=>'L',12829=>'ON',12830=>'ON',12832=>'L',12833=>'L',12834=>'L',12835=>'L',12836=>'L',12837=>'L',12838=>'L',12839=>'L',12840=>'L',12841=>'L',12842=>'L',12843=>'L',12844=>'L',12845=>'L',12846=>'L',12847=>'L',12848=>'L',12849=>'L',12850=>'L',12851=>'L',12852=>'L',12853=>'L',12854=>'L',12855=>'L',12856=>'L',12857=>'L',12858=>'L',12859=>'L',12860=>'L',12861=>'L',12862=>'L',12863=>'L',12864=>'L',12865=>'L',12866=>'L',12867=>'L',12880=>'ON',12881=>'ON',12882=>'ON',12883=>'ON',12884=>'ON',12885=>'ON',12886=>'ON',12887=>'ON',12888=>'ON',12889=>'ON',12890=>'ON',12891=>'ON',12892=>'ON',12893=>'ON',12894=>'ON',12895=>'ON',12896=>'L',12897=>'L',12898=>'L',12899=>'L',12900=>'L',12901=>'L',12902=>'L',12903=>'L',12904=>'L',12905=>'L',12906=>'L',12907=>'L',12908=>'L',12909=>'L',12910=>'L',12911=>'L',12912=>'L',12913=>'L',12914=>'L',12915=>'L',12916=>'L',12917=>'L',12918=>'L',12919=>'L',12920=>'L',12921=>'L',12922=>'L',12923=>'L',12924=>'ON',12925=>'ON',12926=>'ON',12927=>'L',12928=>'L',12929=>'L',12930=>'L',12931=>'L',12932=>'L',12933=>'L',12934=>'L',12935=>'L',12936=>'L',12937=>'L',12938=>'L',12939=>'L',12940=>'L',12941=>'L',12942=>'L',12943=>'L',12944=>'L',12945=>'L',12946=>'L',12947=>'L',12948=>'L',12949=>'L',12950=>'L',12951=>'L',12952=>'L',12953=>'L',12954=>'L',12955=>'L',12956=>'L',12957=>'L',12958=>'L',12959=>'L',12960=>'L',12961=>'L',12962=>'L',12963=>'L',12964=>'L',12965=>'L',12966=>'L',12967=>'L',12968=>'L',12969=>'L',12970=>'L',12971=>'L',12972=>'L',12973=>'L',12974=>'L',12975=>'L',12976=>'L',12977=>'ON',12978=>'ON',12979=>'ON',12980=>'ON',12981=>'ON',12982=>'ON',12983=>'ON',12984=>'ON',12985=>'ON',12986=>'ON',12987=>'ON',12988=>'ON',12989=>'ON',12990=>'ON',12991=>'ON',12992=>'L',12993=>'L',12994=>'L',12995=>'L',12996=>'L',12997=>'L',12998=>'L',12999=>'L',13000=>'L',13001=>'L',13002=>'L',13003=>'L',13004=>'ON',13005=>'ON',13006=>'ON',13007=>'ON',13008=>'L',13009=>'L',13010=>'L',13011=>'L',13012=>'L',13013=>'L',13014=>'L',13015=>'L',13016=>'L',13017=>'L',13018=>'L',13019=>'L',13020=>'L',13021=>'L',13022=>'L',13023=>'L',13024=>'L',13025=>'L',13026=>'L',13027=>'L',13028=>'L',13029=>'L',13030=>'L',13031=>'L',13032=>'L',13033=>'L',13034=>'L',13035=>'L',13036=>'L',13037=>'L',13038=>'L',13039=>'L',13040=>'L',13041=>'L',13042=>'L',13043=>'L',13044=>'L',13045=>'L',13046=>'L',13047=>'L',13048=>'L',13049=>'L',13050=>'L',13051=>'L',13052=>'L',13053=>'L',13054=>'L',13056=>'L',13057=>'L',13058=>'L',13059=>'L',13060=>'L',13061=>'L',13062=>'L',13063=>'L',13064=>'L',13065=>'L',13066=>'L',13067=>'L',13068=>'L',13069=>'L',13070=>'L',13071=>'L',13072=>'L',13073=>'L',13074=>'L',13075=>'L',13076=>'L',13077=>'L',13078=>'L',13079=>'L',13080=>'L',13081=>'L',13082=>'L',13083=>'L',13084=>'L',13085=>'L',13086=>'L',13087=>'L',13088=>'L',13089=>'L',13090=>'L',13091=>'L',13092=>'L',13093=>'L',13094=>'L',13095=>'L',13096=>'L',13097=>'L',13098=>'L',13099=>'L',13100=>'L',13101=>'L',13102=>'L',13103=>'L',13104=>'L',13105=>'L',13106=>'L',13107=>'L',13108=>'L',13109=>'L',13110=>'L',13111=>'L',13112=>'L',13113=>'L',13114=>'L',13115=>'L',13116=>'L',13117=>'L',13118=>'L',13119=>'L',13120=>'L',13121=>'L',13122=>'L',13123=>'L',13124=>'L',13125=>'L',13126=>'L',13127=>'L',13128=>'L',13129=>'L',13130=>'L',13131=>'L',13132=>'L',13133=>'L',13134=>'L',13135=>'L',13136=>'L',13137=>'L',13138=>'L',13139=>'L',13140=>'L',13141=>'L',13142=>'L',13143=>'L',13144=>'L',13145=>'L',13146=>'L',13147=>'L',13148=>'L',13149=>'L',13150=>'L',13151=>'L',13152=>'L',13153=>'L',13154=>'L',13155=>'L',13156=>'L',13157=>'L',13158=>'L',13159=>'L',13160=>'L',13161=>'L',13162=>'L',13163=>'L',13164=>'L',13165=>'L',13166=>'L',13167=>'L',13168=>'L',13169=>'L',13170=>'L',13171=>'L',13172=>'L',13173=>'L',13174=>'L',13175=>'ON',13176=>'ON',13177=>'ON',13178=>'ON',13179=>'L',13180=>'L',13181=>'L',13182=>'L',13183=>'L',13184=>'L',13185=>'L',13186=>'L',13187=>'L',13188=>'L',13189=>'L',13190=>'L',13191=>'L',13192=>'L',13193=>'L',13194=>'L',13195=>'L',13196=>'L',13197=>'L',13198=>'L',13199=>'L',13200=>'L',13201=>'L',13202=>'L',13203=>'L',13204=>'L',13205=>'L',13206=>'L',13207=>'L',13208=>'L',13209=>'L',13210=>'L',13211=>'L',13212=>'L',13213=>'L',13214=>'L',13215=>'L',13216=>'L',13217=>'L',13218=>'L',13219=>'L',13220=>'L',13221=>'L',13222=>'L',13223=>'L',13224=>'L',13225=>'L',13226=>'L',13227=>'L',13228=>'L',13229=>'L',13230=>'L',13231=>'L',13232=>'L',13233=>'L',13234=>'L',13235=>'L',13236=>'L',13237=>'L',13238=>'L',13239=>'L',13240=>'L',13241=>'L',13242=>'L',13243=>'L',13244=>'L',13245=>'L',13246=>'L',13247=>'L',13248=>'L',13249=>'L',13250=>'L',13251=>'L',13252=>'L',13253=>'L',13254=>'L',13255=>'L',13256=>'L',13257=>'L',13258=>'L',13259=>'L',13260=>'L',13261=>'L',13262=>'L',13263=>'L',13264=>'L',13265=>'L',13266=>'L',13267=>'L',13268=>'L',13269=>'L',13270=>'L',13271=>'L',13272=>'L',13273=>'L',13274=>'L',13275=>'L',13276=>'L',13277=>'L',13278=>'ON',13279=>'ON',13280=>'L',13281=>'L',13282=>'L',13283=>'L',13284=>'L',13285=>'L',13286=>'L',13287=>'L',13288=>'L',13289=>'L',13290=>'L',13291=>'L',13292=>'L',13293=>'L',13294=>'L',13295=>'L',13296=>'L',13297=>'L',13298=>'L',13299=>'L',13300=>'L',13301=>'L',13302=>'L',13303=>'L',13304=>'L',13305=>'L',13306=>'L',13307=>'L',13308=>'L',13309=>'L',13310=>'L',13311=>'ON',13312=>'L',19893=>'L',19904=>'ON',19905=>'ON',19906=>'ON',19907=>'ON',19908=>'ON',19909=>'ON',19910=>'ON',19911=>'ON',19912=>'ON',19913=>'ON',19914=>'ON',19915=>'ON',19916=>'ON',19917=>'ON',19918=>'ON',19919=>'ON',19920=>'ON',19921=>'ON',19922=>'ON',19923=>'ON',19924=>'ON',19925=>'ON',19926=>'ON',19927=>'ON',19928=>'ON',19929=>'ON',19930=>'ON',19931=>'ON',19932=>'ON',19933=>'ON',19934=>'ON',19935=>'ON',19936=>'ON',19937=>'ON',19938=>'ON',19939=>'ON',19940=>'ON',19941=>'ON',19942=>'ON',19943=>'ON',19944=>'ON',19945=>'ON',19946=>'ON',19947=>'ON',19948=>'ON',19949=>'ON',19950=>'ON',19951=>'ON',19952=>'ON',19953=>'ON',19954=>'ON',19955=>'ON',19956=>'ON',19957=>'ON',19958=>'ON',19959=>'ON',19960=>'ON',19961=>'ON',19962=>'ON',19963=>'ON',19964=>'ON',19965=>'ON',19966=>'ON',19967=>'ON',19968=>'L',40891=>'L',40960=>'L',40961=>'L',40962=>'L',40963=>'L',40964=>'L',40965=>'L',40966=>'L',40967=>'L',40968=>'L',40969=>'L',40970=>'L',40971=>'L',40972=>'L',40973=>'L',40974=>'L',40975=>'L',40976=>'L',40977=>'L',40978=>'L',40979=>'L',40980=>'L',40981=>'L',40982=>'L',40983=>'L',40984=>'L',40985=>'L',40986=>'L',40987=>'L',40988=>'L',40989=>'L',40990=>'L',40991=>'L',40992=>'L',40993=>'L',40994=>'L',40995=>'L',40996=>'L',40997=>'L',40998=>'L',40999=>'L',41000=>'L',41001=>'L',41002=>'L',41003=>'L',41004=>'L',41005=>'L',41006=>'L',41007=>'L',41008=>'L',41009=>'L',41010=>'L',41011=>'L',41012=>'L',41013=>'L',41014=>'L',41015=>'L',41016=>'L',41017=>'L',41018=>'L',41019=>'L',41020=>'L',41021=>'L',41022=>'L',41023=>'L',41024=>'L',41025=>'L',41026=>'L',41027=>'L',41028=>'L',41029=>'L',41030=>'L',41031=>'L',41032=>'L',41033=>'L',41034=>'L',41035=>'L',41036=>'L',41037=>'L',41038=>'L',41039=>'L',41040=>'L',41041=>'L',41042=>'L',41043=>'L',41044=>'L',41045=>'L',41046=>'L',41047=>'L',41048=>'L',41049=>'L',41050=>'L',41051=>'L',41052=>'L',41053=>'L',41054=>'L',41055=>'L',41056=>'L',41057=>'L',41058=>'L',41059=>'L',41060=>'L',41061=>'L',41062=>'L',41063=>'L',41064=>'L',41065=>'L',41066=>'L',41067=>'L',41068=>'L',41069=>'L',41070=>'L',41071=>'L',41072=>'L',41073=>'L',41074=>'L',41075=>'L',41076=>'L',41077=>'L',41078=>'L',41079=>'L',41080=>'L',41081=>'L',41082=>'L',41083=>'L',41084=>'L',41085=>'L',41086=>'L',41087=>'L',41088=>'L',41089=>'L',41090=>'L',41091=>'L',41092=>'L',41093=>'L',41094=>'L',41095=>'L',41096=>'L',41097=>'L',41098=>'L',41099=>'L',41100=>'L',41101=>'L',41102=>'L',41103=>'L',41104=>'L',41105=>'L',41106=>'L',41107=>'L',41108=>'L',41109=>'L',41110=>'L',41111=>'L',41112=>'L',41113=>'L',41114=>'L',41115=>'L',41116=>'L',41117=>'L',41118=>'L',41119=>'L',41120=>'L',41121=>'L',41122=>'L',41123=>'L',41124=>'L',41125=>'L',41126=>'L',41127=>'L',41128=>'L',41129=>'L',41130=>'L',41131=>'L',41132=>'L',41133=>'L',41134=>'L',41135=>'L',41136=>'L',41137=>'L',41138=>'L',41139=>'L',41140=>'L',41141=>'L',41142=>'L',41143=>'L',41144=>'L',41145=>'L',41146=>'L',41147=>'L',41148=>'L',41149=>'L',41150=>'L',41151=>'L',41152=>'L',41153=>'L',41154=>'L',41155=>'L',41156=>'L',41157=>'L',41158=>'L',41159=>'L',41160=>'L',41161=>'L',41162=>'L',41163=>'L',41164=>'L',41165=>'L',41166=>'L',41167=>'L',41168=>'L',41169=>'L',41170=>'L',41171=>'L',41172=>'L',41173=>'L',41174=>'L',41175=>'L',41176=>'L',41177=>'L',41178=>'L',41179=>'L',41180=>'L',41181=>'L',41182=>'L',41183=>'L',41184=>'L',41185=>'L',41186=>'L',41187=>'L',41188=>'L',41189=>'L',41190=>'L',41191=>'L',41192=>'L',41193=>'L',41194=>'L',41195=>'L',41196=>'L',41197=>'L',41198=>'L',41199=>'L',41200=>'L',41201=>'L',41202=>'L',41203=>'L',41204=>'L',41205=>'L',41206=>'L',41207=>'L',41208=>'L',41209=>'L',41210=>'L',41211=>'L',41212=>'L',41213=>'L',41214=>'L',41215=>'L',41216=>'L',41217=>'L',41218=>'L',41219=>'L',41220=>'L',41221=>'L',41222=>'L',41223=>'L',41224=>'L',41225=>'L',41226=>'L',41227=>'L',41228=>'L',41229=>'L',41230=>'L',41231=>'L',41232=>'L',41233=>'L',41234=>'L',41235=>'L',41236=>'L',41237=>'L',41238=>'L',41239=>'L',41240=>'L',41241=>'L',41242=>'L',41243=>'L',41244=>'L',41245=>'L',41246=>'L',41247=>'L',41248=>'L',41249=>'L',41250=>'L',41251=>'L',41252=>'L',41253=>'L',41254=>'L',41255=>'L',41256=>'L',41257=>'L',41258=>'L',41259=>'L',41260=>'L',41261=>'L',41262=>'L',41263=>'L',41264=>'L',41265=>'L',41266=>'L',41267=>'L',41268=>'L',41269=>'L',41270=>'L',41271=>'L',41272=>'L',41273=>'L',41274=>'L',41275=>'L',41276=>'L',41277=>'L',41278=>'L',41279=>'L',41280=>'L',41281=>'L',41282=>'L',41283=>'L',41284=>'L',41285=>'L',41286=>'L',41287=>'L',41288=>'L',41289=>'L',41290=>'L',41291=>'L',41292=>'L',41293=>'L',41294=>'L',41295=>'L',41296=>'L',41297=>'L',41298=>'L',41299=>'L',41300=>'L',41301=>'L',41302=>'L',41303=>'L',41304=>'L',41305=>'L',41306=>'L',41307=>'L',41308=>'L',41309=>'L',41310=>'L',41311=>'L',41312=>'L',41313=>'L',41314=>'L',41315=>'L',41316=>'L',41317=>'L',41318=>'L',41319=>'L',41320=>'L',41321=>'L',41322=>'L',41323=>'L',41324=>'L',41325=>'L',41326=>'L',41327=>'L',41328=>'L',41329=>'L',41330=>'L',41331=>'L',41332=>'L',41333=>'L',41334=>'L',41335=>'L',41336=>'L',41337=>'L',41338=>'L',41339=>'L',41340=>'L',41341=>'L',41342=>'L',41343=>'L',41344=>'L',41345=>'L',41346=>'L',41347=>'L',41348=>'L',41349=>'L',41350=>'L',41351=>'L',41352=>'L',41353=>'L',41354=>'L',41355=>'L',41356=>'L',41357=>'L',41358=>'L',41359=>'L',41360=>'L',41361=>'L',41362=>'L',41363=>'L',41364=>'L',41365=>'L',41366=>'L',41367=>'L',41368=>'L',41369=>'L',41370=>'L',41371=>'L',41372=>'L',41373=>'L',41374=>'L',41375=>'L',41376=>'L',41377=>'L',41378=>'L',41379=>'L',41380=>'L',41381=>'L',41382=>'L',41383=>'L',41384=>'L',41385=>'L',41386=>'L',41387=>'L',41388=>'L',41389=>'L',41390=>'L',41391=>'L',41392=>'L',41393=>'L',41394=>'L',41395=>'L',41396=>'L',41397=>'L',41398=>'L',41399=>'L',41400=>'L',41401=>'L',41402=>'L',41403=>'L',41404=>'L',41405=>'L',41406=>'L',41407=>'L',41408=>'L',41409=>'L',41410=>'L',41411=>'L',41412=>'L',41413=>'L',41414=>'L',41415=>'L',41416=>'L',41417=>'L',41418=>'L',41419=>'L',41420=>'L',41421=>'L',41422=>'L',41423=>'L',41424=>'L',41425=>'L',41426=>'L',41427=>'L',41428=>'L',41429=>'L',41430=>'L',41431=>'L',41432=>'L',41433=>'L',41434=>'L',41435=>'L',41436=>'L',41437=>'L',41438=>'L',41439=>'L',41440=>'L',41441=>'L',41442=>'L',41443=>'L',41444=>'L',41445=>'L',41446=>'L',41447=>'L',41448=>'L',41449=>'L',41450=>'L',41451=>'L',41452=>'L',41453=>'L',41454=>'L',41455=>'L',41456=>'L',41457=>'L',41458=>'L',41459=>'L',41460=>'L',41461=>'L',41462=>'L',41463=>'L',41464=>'L',41465=>'L',41466=>'L',41467=>'L',41468=>'L',41469=>'L',41470=>'L',41471=>'L',41472=>'L',41473=>'L',41474=>'L',41475=>'L',41476=>'L',41477=>'L',41478=>'L',41479=>'L',41480=>'L',41481=>'L',41482=>'L',41483=>'L',41484=>'L',41485=>'L',41486=>'L',41487=>'L',41488=>'L',41489=>'L',41490=>'L',41491=>'L',41492=>'L',41493=>'L',41494=>'L',41495=>'L',41496=>'L',41497=>'L',41498=>'L',41499=>'L',41500=>'L',41501=>'L',41502=>'L',41503=>'L',41504=>'L',41505=>'L',41506=>'L',41507=>'L',41508=>'L',41509=>'L',41510=>'L',41511=>'L',41512=>'L',41513=>'L',41514=>'L',41515=>'L',41516=>'L',41517=>'L',41518=>'L',41519=>'L',41520=>'L',41521=>'L',41522=>'L',41523=>'L',41524=>'L',41525=>'L',41526=>'L',41527=>'L',41528=>'L',41529=>'L',41530=>'L',41531=>'L',41532=>'L',41533=>'L',41534=>'L',41535=>'L',41536=>'L',41537=>'L',41538=>'L',41539=>'L',41540=>'L',41541=>'L',41542=>'L',41543=>'L',41544=>'L',41545=>'L',41546=>'L',41547=>'L',41548=>'L',41549=>'L',41550=>'L',41551=>'L',41552=>'L',41553=>'L',41554=>'L',41555=>'L',41556=>'L',41557=>'L',41558=>'L',41559=>'L',41560=>'L',41561=>'L',41562=>'L',41563=>'L',41564=>'L',41565=>'L',41566=>'L',41567=>'L',41568=>'L',41569=>'L',41570=>'L',41571=>'L',41572=>'L',41573=>'L',41574=>'L',41575=>'L',41576=>'L',41577=>'L',41578=>'L',41579=>'L',41580=>'L',41581=>'L',41582=>'L',41583=>'L',41584=>'L',41585=>'L',41586=>'L',41587=>'L',41588=>'L',41589=>'L',41590=>'L',41591=>'L',41592=>'L',41593=>'L',41594=>'L',41595=>'L',41596=>'L',41597=>'L',41598=>'L',41599=>'L',41600=>'L',41601=>'L',41602=>'L',41603=>'L',41604=>'L',41605=>'L',41606=>'L',41607=>'L',41608=>'L',41609=>'L',41610=>'L',41611=>'L',41612=>'L',41613=>'L',41614=>'L',41615=>'L',41616=>'L',41617=>'L',41618=>'L',41619=>'L',41620=>'L',41621=>'L',41622=>'L',41623=>'L',41624=>'L',41625=>'L',41626=>'L',41627=>'L',41628=>'L',41629=>'L',41630=>'L',41631=>'L',41632=>'L',41633=>'L',41634=>'L',41635=>'L',41636=>'L',41637=>'L',41638=>'L',41639=>'L',41640=>'L',41641=>'L',41642=>'L',41643=>'L',41644=>'L',41645=>'L',41646=>'L',41647=>'L',41648=>'L',41649=>'L',41650=>'L',41651=>'L',41652=>'L',41653=>'L',41654=>'L',41655=>'L',41656=>'L',41657=>'L',41658=>'L',41659=>'L',41660=>'L',41661=>'L',41662=>'L',41663=>'L',41664=>'L',41665=>'L',41666=>'L',41667=>'L',41668=>'L',41669=>'L',41670=>'L',41671=>'L',41672=>'L',41673=>'L',41674=>'L',41675=>'L',41676=>'L',41677=>'L',41678=>'L',41679=>'L',41680=>'L',41681=>'L',41682=>'L',41683=>'L',41684=>'L',41685=>'L',41686=>'L',41687=>'L',41688=>'L',41689=>'L',41690=>'L',41691=>'L',41692=>'L',41693=>'L',41694=>'L',41695=>'L',41696=>'L',41697=>'L',41698=>'L',41699=>'L',41700=>'L',41701=>'L',41702=>'L',41703=>'L',41704=>'L',41705=>'L',41706=>'L',41707=>'L',41708=>'L',41709=>'L',41710=>'L',41711=>'L',41712=>'L',41713=>'L',41714=>'L',41715=>'L',41716=>'L',41717=>'L',41718=>'L',41719=>'L',41720=>'L',41721=>'L',41722=>'L',41723=>'L',41724=>'L',41725=>'L',41726=>'L',41727=>'L',41728=>'L',41729=>'L',41730=>'L',41731=>'L',41732=>'L',41733=>'L',41734=>'L',41735=>'L',41736=>'L',41737=>'L',41738=>'L',41739=>'L',41740=>'L',41741=>'L',41742=>'L',41743=>'L',41744=>'L',41745=>'L',41746=>'L',41747=>'L',41748=>'L',41749=>'L',41750=>'L',41751=>'L',41752=>'L',41753=>'L',41754=>'L',41755=>'L',41756=>'L',41757=>'L',41758=>'L',41759=>'L',41760=>'L',41761=>'L',41762=>'L',41763=>'L',41764=>'L',41765=>'L',41766=>'L',41767=>'L',41768=>'L',41769=>'L',41770=>'L',41771=>'L',41772=>'L',41773=>'L',41774=>'L',41775=>'L',41776=>'L',41777=>'L',41778=>'L',41779=>'L',41780=>'L',41781=>'L',41782=>'L',41783=>'L',41784=>'L',41785=>'L',41786=>'L',41787=>'L',41788=>'L',41789=>'L',41790=>'L',41791=>'L',41792=>'L',41793=>'L',41794=>'L',41795=>'L',41796=>'L',41797=>'L',41798=>'L',41799=>'L',41800=>'L',41801=>'L',41802=>'L',41803=>'L',41804=>'L',41805=>'L',41806=>'L',41807=>'L',41808=>'L',41809=>'L',41810=>'L',41811=>'L',41812=>'L',41813=>'L',41814=>'L',41815=>'L',41816=>'L',41817=>'L',41818=>'L',41819=>'L',41820=>'L',41821=>'L',41822=>'L',41823=>'L',41824=>'L',41825=>'L',41826=>'L',41827=>'L',41828=>'L',41829=>'L',41830=>'L',41831=>'L',41832=>'L',41833=>'L',41834=>'L',41835=>'L',41836=>'L',41837=>'L',41838=>'L',41839=>'L',41840=>'L',41841=>'L',41842=>'L',41843=>'L',41844=>'L',41845=>'L',41846=>'L',41847=>'L',41848=>'L',41849=>'L',41850=>'L',41851=>'L',41852=>'L',41853=>'L',41854=>'L',41855=>'L',41856=>'L',41857=>'L',41858=>'L',41859=>'L',41860=>'L',41861=>'L',41862=>'L',41863=>'L',41864=>'L',41865=>'L',41866=>'L',41867=>'L',41868=>'L',41869=>'L',41870=>'L',41871=>'L',41872=>'L',41873=>'L',41874=>'L',41875=>'L',41876=>'L',41877=>'L',41878=>'L',41879=>'L',41880=>'L',41881=>'L',41882=>'L',41883=>'L',41884=>'L',41885=>'L',41886=>'L',41887=>'L',41888=>'L',41889=>'L',41890=>'L',41891=>'L',41892=>'L',41893=>'L',41894=>'L',41895=>'L',41896=>'L',41897=>'L',41898=>'L',41899=>'L',41900=>'L',41901=>'L',41902=>'L',41903=>'L',41904=>'L',41905=>'L',41906=>'L',41907=>'L',41908=>'L',41909=>'L',41910=>'L',41911=>'L',41912=>'L',41913=>'L',41914=>'L',41915=>'L',41916=>'L',41917=>'L',41918=>'L',41919=>'L',41920=>'L',41921=>'L',41922=>'L',41923=>'L',41924=>'L',41925=>'L',41926=>'L',41927=>'L',41928=>'L',41929=>'L',41930=>'L',41931=>'L',41932=>'L',41933=>'L',41934=>'L',41935=>'L',41936=>'L',41937=>'L',41938=>'L',41939=>'L',41940=>'L',41941=>'L',41942=>'L',41943=>'L',41944=>'L',41945=>'L',41946=>'L',41947=>'L',41948=>'L',41949=>'L',41950=>'L',41951=>'L',41952=>'L',41953=>'L',41954=>'L',41955=>'L',41956=>'L',41957=>'L',41958=>'L',41959=>'L',41960=>'L',41961=>'L',41962=>'L',41963=>'L',41964=>'L',41965=>'L',41966=>'L',41967=>'L',41968=>'L',41969=>'L',41970=>'L',41971=>'L',41972=>'L',41973=>'L',41974=>'L',41975=>'L',41976=>'L',41977=>'L',41978=>'L',41979=>'L',41980=>'L',41981=>'L',41982=>'L',41983=>'L',41984=>'L',41985=>'L',41986=>'L',41987=>'L',41988=>'L',41989=>'L',41990=>'L',41991=>'L',41992=>'L',41993=>'L',41994=>'L',41995=>'L',41996=>'L',41997=>'L',41998=>'L',41999=>'L',42000=>'L',42001=>'L',42002=>'L',42003=>'L',42004=>'L',42005=>'L',42006=>'L',42007=>'L',42008=>'L',42009=>'L',42010=>'L',42011=>'L',42012=>'L',42013=>'L',42014=>'L',42015=>'L',42016=>'L',42017=>'L',42018=>'L',42019=>'L',42020=>'L',42021=>'L',42022=>'L',42023=>'L',42024=>'L',42025=>'L',42026=>'L',42027=>'L',42028=>'L',42029=>'L',42030=>'L',42031=>'L',42032=>'L',42033=>'L',42034=>'L',42035=>'L',42036=>'L',42037=>'L',42038=>'L',42039=>'L',42040=>'L',42041=>'L',42042=>'L',42043=>'L',42044=>'L',42045=>'L',42046=>'L',42047=>'L',42048=>'L',42049=>'L',42050=>'L',42051=>'L',42052=>'L',42053=>'L',42054=>'L',42055=>'L',42056=>'L',42057=>'L',42058=>'L',42059=>'L',42060=>'L',42061=>'L',42062=>'L',42063=>'L',42064=>'L',42065=>'L',42066=>'L',42067=>'L',42068=>'L',42069=>'L',42070=>'L',42071=>'L',42072=>'L',42073=>'L',42074=>'L',42075=>'L',42076=>'L',42077=>'L',42078=>'L',42079=>'L',42080=>'L',42081=>'L',42082=>'L',42083=>'L',42084=>'L',42085=>'L',42086=>'L',42087=>'L',42088=>'L',42089=>'L',42090=>'L',42091=>'L',42092=>'L',42093=>'L',42094=>'L',42095=>'L',42096=>'L',42097=>'L',42098=>'L',42099=>'L',42100=>'L',42101=>'L',42102=>'L',42103=>'L',42104=>'L',42105=>'L',42106=>'L',42107=>'L',42108=>'L',42109=>'L',42110=>'L',42111=>'L',42112=>'L',42113=>'L',42114=>'L',42115=>'L',42116=>'L',42117=>'L',42118=>'L',42119=>'L',42120=>'L',42121=>'L',42122=>'L',42123=>'L',42124=>'L',42128=>'ON',42129=>'ON',42130=>'ON',42131=>'ON',42132=>'ON',42133=>'ON',42134=>'ON',42135=>'ON',42136=>'ON',42137=>'ON',42138=>'ON',42139=>'ON',42140=>'ON',42141=>'ON',42142=>'ON',42143=>'ON',42144=>'ON',42145=>'ON',42146=>'ON',42147=>'ON',42148=>'ON',42149=>'ON',42150=>'ON',42151=>'ON',42152=>'ON',42153=>'ON',42154=>'ON',42155=>'ON',42156=>'ON',42157=>'ON',42158=>'ON',42159=>'ON',42160=>'ON',42161=>'ON',42162=>'ON',42163=>'ON',42164=>'ON',42165=>'ON',42166=>'ON',42167=>'ON',42168=>'ON',42169=>'ON',42170=>'ON',42171=>'ON',42172=>'ON',42173=>'ON',42174=>'ON',42175=>'ON',42176=>'ON',42177=>'ON',42178=>'ON',42179=>'ON',42180=>'ON',42181=>'ON',42182=>'ON',42752=>'ON',42753=>'ON',42754=>'ON',42755=>'ON',42756=>'ON',42757=>'ON',42758=>'ON',42759=>'ON',42760=>'ON',42761=>'ON',42762=>'ON',42763=>'ON',42764=>'ON',42765=>'ON',42766=>'ON',42767=>'ON',42768=>'ON',42769=>'ON',42770=>'ON',42771=>'ON',42772=>'ON',42773=>'ON',42774=>'ON',42775=>'ON',42776=>'ON',42777=>'ON',42778=>'ON',42784=>'ON',42785=>'ON',43008=>'L',43009=>'L',43010=>'NSM',43011=>'L',43012=>'L',43013=>'L',43014=>'NSM',43015=>'L',43016=>'L',43017=>'L',43018=>'L',43019=>'NSM',43020=>'L',43021=>'L',43022=>'L',43023=>'L',43024=>'L',43025=>'L',43026=>'L',43027=>'L',43028=>'L',43029=>'L',43030=>'L',43031=>'L',43032=>'L',43033=>'L',43034=>'L',43035=>'L',43036=>'L',43037=>'L',43038=>'L',43039=>'L',43040=>'L',43041=>'L',43042=>'L',43043=>'L',43044=>'L',43045=>'NSM',43046=>'NSM',43047=>'L',43048=>'ON',43049=>'ON',43050=>'ON',43051=>'ON',43072=>'L',43073=>'L',43074=>'L',43075=>'L',43076=>'L',43077=>'L',43078=>'L',43079=>'L',43080=>'L',43081=>'L',43082=>'L',43083=>'L',43084=>'L',43085=>'L',43086=>'L',43087=>'L',43088=>'L',43089=>'L',43090=>'L',43091=>'L',43092=>'L',43093=>'L',43094=>'L',43095=>'L',43096=>'L',43097=>'L',43098=>'L',43099=>'L',43100=>'L',43101=>'L',43102=>'L',43103=>'L',43104=>'L',43105=>'L',43106=>'L',43107=>'L',43108=>'L',43109=>'L',43110=>'L',43111=>'L',43112=>'L',43113=>'L',43114=>'L',43115=>'L',43116=>'L',43117=>'L',43118=>'L',43119=>'L',43120=>'L',43121=>'L',43122=>'L',43123=>'L',43124=>'ON',43125=>'ON',43126=>'ON',43127=>'ON',44032=>'L',55203=>'L',55296=>'L',56191=>'L',56192=>'L',56319=>'L',56320=>'L',57343=>'L',57344=>'L',63743=>'L',63744=>'L',63745=>'L',63746=>'L',63747=>'L',63748=>'L',63749=>'L',63750=>'L',63751=>'L',63752=>'L',63753=>'L',63754=>'L',63755=>'L',63756=>'L',63757=>'L',63758=>'L',63759=>'L',63760=>'L',63761=>'L',63762=>'L',63763=>'L',63764=>'L',63765=>'L',63766=>'L',63767=>'L',63768=>'L',63769=>'L',63770=>'L',63771=>'L',63772=>'L',63773=>'L',63774=>'L',63775=>'L',63776=>'L',63777=>'L',63778=>'L',63779=>'L',63780=>'L',63781=>'L',63782=>'L',63783=>'L',63784=>'L',63785=>'L',63786=>'L',63787=>'L',63788=>'L',63789=>'L',63790=>'L',63791=>'L',63792=>'L',63793=>'L',63794=>'L',63795=>'L',63796=>'L',63797=>'L',63798=>'L',63799=>'L',63800=>'L',63801=>'L',63802=>'L',63803=>'L',63804=>'L',63805=>'L',63806=>'L',63807=>'L',63808=>'L',63809=>'L',63810=>'L',63811=>'L',63812=>'L',63813=>'L',63814=>'L',63815=>'L',63816=>'L',63817=>'L',63818=>'L',63819=>'L',63820=>'L',63821=>'L',63822=>'L',63823=>'L',63824=>'L',63825=>'L',63826=>'L',63827=>'L',63828=>'L',63829=>'L',63830=>'L',63831=>'L',63832=>'L',63833=>'L',63834=>'L',63835=>'L',63836=>'L',63837=>'L',63838=>'L',63839=>'L',63840=>'L',63841=>'L',63842=>'L',63843=>'L',63844=>'L',63845=>'L',63846=>'L',63847=>'L',63848=>'L',63849=>'L',63850=>'L',63851=>'L',63852=>'L',63853=>'L',63854=>'L',63855=>'L',63856=>'L',63857=>'L',63858=>'L',63859=>'L',63860=>'L',63861=>'L',63862=>'L',63863=>'L',63864=>'L',63865=>'L',63866=>'L',63867=>'L',63868=>'L',63869=>'L',63870=>'L',63871=>'L',63872=>'L',63873=>'L',63874=>'L',63875=>'L',63876=>'L',63877=>'L',63878=>'L',63879=>'L',63880=>'L',63881=>'L',63882=>'L',63883=>'L',63884=>'L',63885=>'L',63886=>'L',63887=>'L',63888=>'L',63889=>'L',63890=>'L',63891=>'L',63892=>'L',63893=>'L',63894=>'L',63895=>'L',63896=>'L',63897=>'L',63898=>'L',63899=>'L',63900=>'L',63901=>'L',63902=>'L',63903=>'L',63904=>'L',63905=>'L',63906=>'L',63907=>'L',63908=>'L',63909=>'L',63910=>'L',63911=>'L',63912=>'L',63913=>'L',63914=>'L',63915=>'L',63916=>'L',63917=>'L',63918=>'L',63919=>'L',63920=>'L',63921=>'L',63922=>'L',63923=>'L',63924=>'L',63925=>'L',63926=>'L',63927=>'L',63928=>'L',63929=>'L',63930=>'L',63931=>'L',63932=>'L',63933=>'L',63934=>'L',63935=>'L',63936=>'L',63937=>'L',63938=>'L',63939=>'L',63940=>'L',63941=>'L',63942=>'L',63943=>'L',63944=>'L',63945=>'L',63946=>'L',63947=>'L',63948=>'L',63949=>'L',63950=>'L',63951=>'L',63952=>'L',63953=>'L',63954=>'L',63955=>'L',63956=>'L',63957=>'L',63958=>'L',63959=>'L',63960=>'L',63961=>'L',63962=>'L',63963=>'L',63964=>'L',63965=>'L',63966=>'L',63967=>'L',63968=>'L',63969=>'L',63970=>'L',63971=>'L',63972=>'L',63973=>'L',63974=>'L',63975=>'L',63976=>'L',63977=>'L',63978=>'L',63979=>'L',63980=>'L',63981=>'L',63982=>'L',63983=>'L',63984=>'L',63985=>'L',63986=>'L',63987=>'L',63988=>'L',63989=>'L',63990=>'L',63991=>'L',63992=>'L',63993=>'L',63994=>'L',63995=>'L',63996=>'L',63997=>'L',63998=>'L',63999=>'L',64000=>'L',64001=>'L',64002=>'L',64003=>'L',64004=>'L',64005=>'L',64006=>'L',64007=>'L',64008=>'L',64009=>'L',64010=>'L',64011=>'L',64012=>'L',64013=>'L',64014=>'L',64015=>'L',64016=>'L',64017=>'L',64018=>'L',64019=>'L',64020=>'L',64021=>'L',64022=>'L',64023=>'L',64024=>'L',64025=>'L',64026=>'L',64027=>'L',64028=>'L',64029=>'L',64030=>'L',64031=>'L',64032=>'L',64033=>'L',64034=>'L',64035=>'L',64036=>'L',64037=>'L',64038=>'L',64039=>'L',64040=>'L',64041=>'L',64042=>'L',64043=>'L',64044=>'L',64045=>'L',64048=>'L',64049=>'L',64050=>'L',64051=>'L',64052=>'L',64053=>'L',64054=>'L',64055=>'L',64056=>'L',64057=>'L',64058=>'L',64059=>'L',64060=>'L',64061=>'L',64062=>'L',64063=>'L',64064=>'L',64065=>'L',64066=>'L',64067=>'L',64068=>'L',64069=>'L',64070=>'L',64071=>'L',64072=>'L',64073=>'L',64074=>'L',64075=>'L',64076=>'L',64077=>'L',64078=>'L',64079=>'L',64080=>'L',64081=>'L',64082=>'L',64083=>'L',64084=>'L',64085=>'L',64086=>'L',64087=>'L',64088=>'L',64089=>'L',64090=>'L',64091=>'L',64092=>'L',64093=>'L',64094=>'L',64095=>'L',64096=>'L',64097=>'L',64098=>'L',64099=>'L',64100=>'L',64101=>'L',64102=>'L',64103=>'L',64104=>'L',64105=>'L',64106=>'L',64112=>'L',64113=>'L',64114=>'L',64115=>'L',64116=>'L',64117=>'L',64118=>'L',64119=>'L',64120=>'L',64121=>'L',64122=>'L',64123=>'L',64124=>'L',64125=>'L',64126=>'L',64127=>'L',64128=>'L',64129=>'L',64130=>'L',64131=>'L',64132=>'L',64133=>'L',64134=>'L',64135=>'L',64136=>'L',64137=>'L',64138=>'L',64139=>'L',64140=>'L',64141=>'L',64142=>'L',64143=>'L',64144=>'L',64145=>'L',64146=>'L',64147=>'L',64148=>'L',64149=>'L',64150=>'L',64151=>'L',64152=>'L',64153=>'L',64154=>'L',64155=>'L',64156=>'L',64157=>'L',64158=>'L',64159=>'L',64160=>'L',64161=>'L',64162=>'L',64163=>'L',64164=>'L',64165=>'L',64166=>'L',64167=>'L',64168=>'L',64169=>'L',64170=>'L',64171=>'L',64172=>'L',64173=>'L',64174=>'L',64175=>'L',64176=>'L',64177=>'L',64178=>'L',64179=>'L',64180=>'L',64181=>'L',64182=>'L',64183=>'L',64184=>'L',64185=>'L',64186=>'L',64187=>'L',64188=>'L',64189=>'L',64190=>'L',64191=>'L',64192=>'L',64193=>'L',64194=>'L',64195=>'L',64196=>'L',64197=>'L',64198=>'L',64199=>'L',64200=>'L',64201=>'L',64202=>'L',64203=>'L',64204=>'L',64205=>'L',64206=>'L',64207=>'L',64208=>'L',64209=>'L',64210=>'L',64211=>'L',64212=>'L',64213=>'L',64214=>'L',64215=>'L',64216=>'L',64217=>'L',64256=>'L',64257=>'L',64258=>'L',64259=>'L',64260=>'L',64261=>'L',64262=>'L',64275=>'L',64276=>'L',64277=>'L',64278=>'L',64279=>'L',64285=>'R',64286=>'NSM',64287=>'R',64288=>'R',64289=>'R',64290=>'R',64291=>'R',64292=>'R',64293=>'R',64294=>'R',64295=>'R',64296=>'R',64297=>'ES',64298=>'R',64299=>'R',64300=>'R',64301=>'R',64302=>'R',64303=>'R',64304=>'R',64305=>'R',64306=>'R',64307=>'R',64308=>'R',64309=>'R',64310=>'R',64312=>'R',64313=>'R',64314=>'R',64315=>'R',64316=>'R',64318=>'R',64320=>'R',64321=>'R',64323=>'R',64324=>'R',64326=>'R',64327=>'R',64328=>'R',64329=>'R',64330=>'R',64331=>'R',64332=>'R',64333=>'R',64334=>'R',64335=>'R',64336=>'AL',64337=>'AL',64338=>'AL',64339=>'AL',64340=>'AL',64341=>'AL',64342=>'AL',64343=>'AL',64344=>'AL',64345=>'AL',64346=>'AL',64347=>'AL',64348=>'AL',64349=>'AL',64350=>'AL',64351=>'AL',64352=>'AL',64353=>'AL',64354=>'AL',64355=>'AL',64356=>'AL',64357=>'AL',64358=>'AL',64359=>'AL',64360=>'AL',64361=>'AL',64362=>'AL',64363=>'AL',64364=>'AL',64365=>'AL',64366=>'AL',64367=>'AL',64368=>'AL',64369=>'AL',64370=>'AL',64371=>'AL',64372=>'AL',64373=>'AL',64374=>'AL',64375=>'AL',64376=>'AL',64377=>'AL',64378=>'AL',64379=>'AL',64380=>'AL',64381=>'AL',64382=>'AL',64383=>'AL',64384=>'AL',64385=>'AL',64386=>'AL',64387=>'AL',64388=>'AL',64389=>'AL',64390=>'AL',64391=>'AL',64392=>'AL',64393=>'AL',64394=>'AL',64395=>'AL',64396=>'AL',64397=>'AL',64398=>'AL',64399=>'AL',64400=>'AL',64401=>'AL',64402=>'AL',64403=>'AL',64404=>'AL',64405=>'AL',64406=>'AL',64407=>'AL',64408=>'AL',64409=>'AL',64410=>'AL',64411=>'AL',64412=>'AL',64413=>'AL',64414=>'AL',64415=>'AL',64416=>'AL',64417=>'AL',64418=>'AL',64419=>'AL',64420=>'AL',64421=>'AL',64422=>'AL',64423=>'AL',64424=>'AL',64425=>'AL',64426=>'AL',64427=>'AL',64428=>'AL',64429=>'AL',64430=>'AL',64431=>'AL',64432=>'AL',64433=>'AL',64467=>'AL',64468=>'AL',64469=>'AL',64470=>'AL',64471=>'AL',64472=>'AL',64473=>'AL',64474=>'AL',64475=>'AL',64476=>'AL',64477=>'AL',64478=>'AL',64479=>'AL',64480=>'AL',64481=>'AL',64482=>'AL',64483=>'AL',64484=>'AL',64485=>'AL',64486=>'AL',64487=>'AL',64488=>'AL',64489=>'AL',64490=>'AL',64491=>'AL',64492=>'AL',64493=>'AL',64494=>'AL',64495=>'AL',64496=>'AL',64497=>'AL',64498=>'AL',64499=>'AL',64500=>'AL',64501=>'AL',64502=>'AL',64503=>'AL',64504=>'AL',64505=>'AL',64506=>'AL',64507=>'AL',64508=>'AL',64509=>'AL',64510=>'AL',64511=>'AL',64512=>'AL',64513=>'AL',64514=>'AL',64515=>'AL',64516=>'AL',64517=>'AL',64518=>'AL',64519=>'AL',64520=>'AL',64521=>'AL',64522=>'AL',64523=>'AL',64524=>'AL',64525=>'AL',64526=>'AL',64527=>'AL',64528=>'AL',64529=>'AL',64530=>'AL',64531=>'AL',64532=>'AL',64533=>'AL',64534=>'AL',64535=>'AL',64536=>'AL',64537=>'AL',64538=>'AL',64539=>'AL',64540=>'AL',64541=>'AL',64542=>'AL',64543=>'AL',64544=>'AL',64545=>'AL',64546=>'AL',64547=>'AL',64548=>'AL',64549=>'AL',64550=>'AL',64551=>'AL',64552=>'AL',64553=>'AL',64554=>'AL',64555=>'AL',64556=>'AL',64557=>'AL',64558=>'AL',64559=>'AL',64560=>'AL',64561=>'AL',64562=>'AL',64563=>'AL',64564=>'AL',64565=>'AL',64566=>'AL',64567=>'AL',64568=>'AL',64569=>'AL',64570=>'AL',64571=>'AL',64572=>'AL',64573=>'AL',64574=>'AL',64575=>'AL',64576=>'AL',64577=>'AL',64578=>'AL',64579=>'AL',64580=>'AL',64581=>'AL',64582=>'AL',64583=>'AL',64584=>'AL',64585=>'AL',64586=>'AL',64587=>'AL',64588=>'AL',64589=>'AL',64590=>'AL',64591=>'AL',64592=>'AL',64593=>'AL',64594=>'AL',64595=>'AL',64596=>'AL',64597=>'AL',64598=>'AL',64599=>'AL',64600=>'AL',64601=>'AL',64602=>'AL',64603=>'AL',64604=>'AL',64605=>'AL',64606=>'AL',64607=>'AL',64608=>'AL',64609=>'AL',64610=>'AL',64611=>'AL',64612=>'AL',64613=>'AL',64614=>'AL',64615=>'AL',64616=>'AL',64617=>'AL',64618=>'AL',64619=>'AL',64620=>'AL',64621=>'AL',64622=>'AL',64623=>'AL',64624=>'AL',64625=>'AL',64626=>'AL',64627=>'AL',64628=>'AL',64629=>'AL',64630=>'AL',64631=>'AL',64632=>'AL',64633=>'AL',64634=>'AL',64635=>'AL',64636=>'AL',64637=>'AL',64638=>'AL',64639=>'AL',64640=>'AL',64641=>'AL',64642=>'AL',64643=>'AL',64644=>'AL',64645=>'AL',64646=>'AL',64647=>'AL',64648=>'AL',64649=>'AL',64650=>'AL',64651=>'AL',64652=>'AL',64653=>'AL',64654=>'AL',64655=>'AL',64656=>'AL',64657=>'AL',64658=>'AL',64659=>'AL',64660=>'AL',64661=>'AL',64662=>'AL',64663=>'AL',64664=>'AL',64665=>'AL',64666=>'AL',64667=>'AL',64668=>'AL',64669=>'AL',64670=>'AL',64671=>'AL',64672=>'AL',64673=>'AL',64674=>'AL',64675=>'AL',64676=>'AL',64677=>'AL',64678=>'AL',64679=>'AL',64680=>'AL',64681=>'AL',64682=>'AL',64683=>'AL',64684=>'AL',64685=>'AL',64686=>'AL',64687=>'AL',64688=>'AL',64689=>'AL',64690=>'AL',64691=>'AL',64692=>'AL',64693=>'AL',64694=>'AL',64695=>'AL',64696=>'AL',64697=>'AL',64698=>'AL',64699=>'AL',64700=>'AL',64701=>'AL',64702=>'AL',64703=>'AL',64704=>'AL',64705=>'AL',64706=>'AL',64707=>'AL',64708=>'AL',64709=>'AL',64710=>'AL',64711=>'AL',64712=>'AL',64713=>'AL',64714=>'AL',64715=>'AL',64716=>'AL',64717=>'AL',64718=>'AL',64719=>'AL',64720=>'AL',64721=>'AL',64722=>'AL',64723=>'AL',64724=>'AL',64725=>'AL',64726=>'AL',64727=>'AL',64728=>'AL',64729=>'AL',64730=>'AL',64731=>'AL',64732=>'AL',64733=>'AL',64734=>'AL',64735=>'AL',64736=>'AL',64737=>'AL',64738=>'AL',64739=>'AL',64740=>'AL',64741=>'AL',64742=>'AL',64743=>'AL',64744=>'AL',64745=>'AL',64746=>'AL',64747=>'AL',64748=>'AL',64749=>'AL',64750=>'AL',64751=>'AL',64752=>'AL',64753=>'AL',64754=>'AL',64755=>'AL',64756=>'AL',64757=>'AL',64758=>'AL',64759=>'AL',64760=>'AL',64761=>'AL',64762=>'AL',64763=>'AL',64764=>'AL',64765=>'AL',64766=>'AL',64767=>'AL',64768=>'AL',64769=>'AL',64770=>'AL',64771=>'AL',64772=>'AL',64773=>'AL',64774=>'AL',64775=>'AL',64776=>'AL',64777=>'AL',64778=>'AL',64779=>'AL',64780=>'AL',64781=>'AL',64782=>'AL',64783=>'AL',64784=>'AL',64785=>'AL',64786=>'AL',64787=>'AL',64788=>'AL',64789=>'AL',64790=>'AL',64791=>'AL',64792=>'AL',64793=>'AL',64794=>'AL',64795=>'AL',64796=>'AL',64797=>'AL',64798=>'AL',64799=>'AL',64800=>'AL',64801=>'AL',64802=>'AL',64803=>'AL',64804=>'AL',64805=>'AL',64806=>'AL',64807=>'AL',64808=>'AL',64809=>'AL',64810=>'AL',64811=>'AL',64812=>'AL',64813=>'AL',64814=>'AL',64815=>'AL',64816=>'AL',64817=>'AL',64818=>'AL',64819=>'AL',64820=>'AL',64821=>'AL',64822=>'AL',64823=>'AL',64824=>'AL',64825=>'AL',64826=>'AL',64827=>'AL',64828=>'AL',64829=>'AL',64830=>'ON',64831=>'ON',64848=>'AL',64849=>'AL',64850=>'AL',64851=>'AL',64852=>'AL',64853=>'AL',64854=>'AL',64855=>'AL',64856=>'AL',64857=>'AL',64858=>'AL',64859=>'AL',64860=>'AL',64861=>'AL',64862=>'AL',64863=>'AL',64864=>'AL',64865=>'AL',64866=>'AL',64867=>'AL',64868=>'AL',64869=>'AL',64870=>'AL',64871=>'AL',64872=>'AL',64873=>'AL',64874=>'AL',64875=>'AL',64876=>'AL',64877=>'AL',64878=>'AL',64879=>'AL',64880=>'AL',64881=>'AL',64882=>'AL',64883=>'AL',64884=>'AL',64885=>'AL',64886=>'AL',64887=>'AL',64888=>'AL',64889=>'AL',64890=>'AL',64891=>'AL',64892=>'AL',64893=>'AL',64894=>'AL',64895=>'AL',64896=>'AL',64897=>'AL',64898=>'AL',64899=>'AL',64900=>'AL',64901=>'AL',64902=>'AL',64903=>'AL',64904=>'AL',64905=>'AL',64906=>'AL',64907=>'AL',64908=>'AL',64909=>'AL',64910=>'AL',64911=>'AL',64914=>'AL',64915=>'AL',64916=>'AL',64917=>'AL',64918=>'AL',64919=>'AL',64920=>'AL',64921=>'AL',64922=>'AL',64923=>'AL',64924=>'AL',64925=>'AL',64926=>'AL',64927=>'AL',64928=>'AL',64929=>'AL',64930=>'AL',64931=>'AL',64932=>'AL',64933=>'AL',64934=>'AL',64935=>'AL',64936=>'AL',64937=>'AL',64938=>'AL',64939=>'AL',64940=>'AL',64941=>'AL',64942=>'AL',64943=>'AL',64944=>'AL',64945=>'AL',64946=>'AL',64947=>'AL',64948=>'AL',64949=>'AL',64950=>'AL',64951=>'AL',64952=>'AL',64953=>'AL',64954=>'AL',64955=>'AL',64956=>'AL',64957=>'AL',64958=>'AL',64959=>'AL',64960=>'AL',64961=>'AL',64962=>'AL',64963=>'AL',64964=>'AL',64965=>'AL',64966=>'AL',64967=>'AL',65008=>'AL',65009=>'AL',65010=>'AL',65011=>'AL',65012=>'AL',65013=>'AL',65014=>'AL',65015=>'AL',65016=>'AL',65017=>'AL',65018=>'AL',65019=>'AL',65020=>'AL',65021=>'ON',65024=>'NSM',65025=>'NSM',65026=>'NSM',65027=>'NSM',65028=>'NSM',65029=>'NSM',65030=>'NSM',65031=>'NSM',65032=>'NSM',65033=>'NSM',65034=>'NSM',65035=>'NSM',65036=>'NSM',65037=>'NSM',65038=>'NSM',65039=>'NSM',65040=>'ON',65041=>'ON',65042=>'ON',65043=>'ON',65044=>'ON',65045=>'ON',65046=>'ON',65047=>'ON',65048=>'ON',65049=>'ON',65056=>'NSM',65057=>'NSM',65058=>'NSM',65059=>'NSM',65072=>'ON',65073=>'ON',65074=>'ON',65075=>'ON',65076=>'ON',65077=>'ON',65078=>'ON',65079=>'ON',65080=>'ON',65081=>'ON',65082=>'ON',65083=>'ON',65084=>'ON',65085=>'ON',65086=>'ON',65087=>'ON',65088=>'ON',65089=>'ON',65090=>'ON',65091=>'ON',65092=>'ON',65093=>'ON',65094=>'ON',65095=>'ON',65096=>'ON',65097=>'ON',65098=>'ON',65099=>'ON',65100=>'ON',65101=>'ON',65102=>'ON',65103=>'ON',65104=>'CS',65105=>'ON',65106=>'CS',65108=>'ON',65109=>'CS',65110=>'ON',65111=>'ON',65112=>'ON',65113=>'ON',65114=>'ON',65115=>'ON',65116=>'ON',65117=>'ON',65118=>'ON',65119=>'ET',65120=>'ON',65121=>'ON',65122=>'ES',65123=>'ES',65124=>'ON',65125=>'ON',65126=>'ON',65128=>'ON',65129=>'ET',65130=>'ET',65131=>'ON',65136=>'AL',65137=>'AL',65138=>'AL',65139=>'AL',65140=>'AL',65142=>'AL',65143=>'AL',65144=>'AL',65145=>'AL',65146=>'AL',65147=>'AL',65148=>'AL',65149=>'AL',65150=>'AL',65151=>'AL',65152=>'AL',65153=>'AL',65154=>'AL',65155=>'AL',65156=>'AL',65157=>'AL',65158=>'AL',65159=>'AL',65160=>'AL',65161=>'AL',65162=>'AL',65163=>'AL',65164=>'AL',65165=>'AL',65166=>'AL',65167=>'AL',65168=>'AL',65169=>'AL',65170=>'AL',65171=>'AL',65172=>'AL',65173=>'AL',65174=>'AL',65175=>'AL',65176=>'AL',65177=>'AL',65178=>'AL',65179=>'AL',65180=>'AL',65181=>'AL',65182=>'AL',65183=>'AL',65184=>'AL',65185=>'AL',65186=>'AL',65187=>'AL',65188=>'AL',65189=>'AL',65190=>'AL',65191=>'AL',65192=>'AL',65193=>'AL',65194=>'AL',65195=>'AL',65196=>'AL',65197=>'AL',65198=>'AL',65199=>'AL',65200=>'AL',65201=>'AL',65202=>'AL',65203=>'AL',65204=>'AL',65205=>'AL',65206=>'AL',65207=>'AL',65208=>'AL',65209=>'AL',65210=>'AL',65211=>'AL',65212=>'AL',65213=>'AL',65214=>'AL',65215=>'AL',65216=>'AL',65217=>'AL',65218=>'AL',65219=>'AL',65220=>'AL',65221=>'AL',65222=>'AL',65223=>'AL',65224=>'AL',65225=>'AL',65226=>'AL',65227=>'AL',65228=>'AL',65229=>'AL',65230=>'AL',65231=>'AL',65232=>'AL',65233=>'AL',65234=>'AL',65235=>'AL',65236=>'AL',65237=>'AL',65238=>'AL',65239=>'AL',65240=>'AL',65241=>'AL',65242=>'AL',65243=>'AL',65244=>'AL',65245=>'AL',65246=>'AL',65247=>'AL',65248=>'AL',65249=>'AL',65250=>'AL',65251=>'AL',65252=>'AL',65253=>'AL',65254=>'AL',65255=>'AL',65256=>'AL',65257=>'AL',65258=>'AL',65259=>'AL',65260=>'AL',65261=>'AL',65262=>'AL',65263=>'AL',65264=>'AL',65265=>'AL',65266=>'AL',65267=>'AL',65268=>'AL',65269=>'AL',65270=>'AL',65271=>'AL',65272=>'AL',65273=>'AL',65274=>'AL',65275=>'AL',65276=>'AL',65279=>'BN',65281=>'ON',65282=>'ON',65283=>'ET',65284=>'ET',65285=>'ET',65286=>'ON',65287=>'ON',65288=>'ON',65289=>'ON',65290=>'ON',65291=>'ES',65292=>'CS',65293=>'ES',65294=>'CS',65295=>'CS',65296=>'EN',65297=>'EN',65298=>'EN',65299=>'EN',65300=>'EN',65301=>'EN',65302=>'EN',65303=>'EN',65304=>'EN',65305=>'EN',65306=>'CS',65307=>'ON',65308=>'ON',65309=>'ON',65310=>'ON',65311=>'ON',65312=>'ON',65313=>'L',65314=>'L',65315=>'L',65316=>'L',65317=>'L',65318=>'L',65319=>'L',65320=>'L',65321=>'L',65322=>'L',65323=>'L',65324=>'L',65325=>'L',65326=>'L',65327=>'L',65328=>'L',65329=>'L',65330=>'L',65331=>'L',65332=>'L',65333=>'L',65334=>'L',65335=>'L',65336=>'L',65337=>'L',65338=>'L',65339=>'ON',65340=>'ON',65341=>'ON',65342=>'ON',65343=>'ON',65344=>'ON',65345=>'L',65346=>'L',65347=>'L',65348=>'L',65349=>'L',65350=>'L',65351=>'L',65352=>'L',65353=>'L',65354=>'L',65355=>'L',65356=>'L',65357=>'L',65358=>'L',65359=>'L',65360=>'L',65361=>'L',65362=>'L',65363=>'L',65364=>'L',65365=>'L',65366=>'L',65367=>'L',65368=>'L',65369=>'L',65370=>'L',65371=>'ON',65372=>'ON',65373=>'ON',65374=>'ON',65375=>'ON',65376=>'ON',65377=>'ON',65378=>'ON',65379=>'ON',65380=>'ON',65381=>'ON',65382=>'L',65383=>'L',65384=>'L',65385=>'L',65386=>'L',65387=>'L',65388=>'L',65389=>'L',65390=>'L',65391=>'L',65392=>'L',65393=>'L',65394=>'L',65395=>'L',65396=>'L',65397=>'L',65398=>'L',65399=>'L',65400=>'L',65401=>'L',65402=>'L',65403=>'L',65404=>'L',65405=>'L',65406=>'L',65407=>'L',65408=>'L',65409=>'L',65410=>'L',65411=>'L',65412=>'L',65413=>'L',65414=>'L',65415=>'L',65416=>'L',65417=>'L',65418=>'L',65419=>'L',65420=>'L',65421=>'L',65422=>'L',65423=>'L',65424=>'L',65425=>'L',65426=>'L',65427=>'L',65428=>'L',65429=>'L',65430=>'L',65431=>'L',65432=>'L',65433=>'L',65434=>'L',65435=>'L',65436=>'L',65437=>'L',65438=>'L',65439=>'L',65440=>'L',65441=>'L',65442=>'L',65443=>'L',65444=>'L',65445=>'L',65446=>'L',65447=>'L',65448=>'L',65449=>'L',65450=>'L',65451=>'L',65452=>'L',65453=>'L',65454=>'L',65455=>'L',65456=>'L',65457=>'L',65458=>'L',65459=>'L',65460=>'L',65461=>'L',65462=>'L',65463=>'L',65464=>'L',65465=>'L',65466=>'L',65467=>'L',65468=>'L',65469=>'L',65470=>'L',65474=>'L',65475=>'L',65476=>'L',65477=>'L',65478=>'L',65479=>'L',65482=>'L',65483=>'L',65484=>'L',65485=>'L',65486=>'L',65487=>'L',65490=>'L',65491=>'L',65492=>'L',65493=>'L',65494=>'L',65495=>'L',65498=>'L',65499=>'L',65500=>'L',65504=>'ET',65505=>'ET',65506=>'ON',65507=>'ON',65508=>'ON',65509=>'ET',65510=>'ET',65512=>'ON',65513=>'ON',65514=>'ON',65515=>'ON',65516=>'ON',65517=>'ON',65518=>'ON',65529=>'ON',65530=>'ON',65531=>'ON',65532=>'ON',65533=>'ON',65536=>'L',65537=>'L',65538=>'L',65539=>'L',65540=>'L',65541=>'L',65542=>'L',65543=>'L',65544=>'L',65545=>'L',65546=>'L',65547=>'L',65549=>'L',65550=>'L',65551=>'L',65552=>'L',65553=>'L',65554=>'L',65555=>'L',65556=>'L',65557=>'L',65558=>'L',65559=>'L',65560=>'L',65561=>'L',65562=>'L',65563=>'L',65564=>'L',65565=>'L',65566=>'L',65567=>'L',65568=>'L',65569=>'L',65570=>'L',65571=>'L',65572=>'L',65573=>'L',65574=>'L',65576=>'L',65577=>'L',65578=>'L',65579=>'L',65580=>'L',65581=>'L',65582=>'L',65583=>'L',65584=>'L',65585=>'L',65586=>'L',65587=>'L',65588=>'L',65589=>'L',65590=>'L',65591=>'L',65592=>'L',65593=>'L',65594=>'L',65596=>'L',65597=>'L',65599=>'L',65600=>'L',65601=>'L',65602=>'L',65603=>'L',65604=>'L',65605=>'L',65606=>'L',65607=>'L',65608=>'L',65609=>'L',65610=>'L',65611=>'L',65612=>'L',65613=>'L',65616=>'L',65617=>'L',65618=>'L',65619=>'L',65620=>'L',65621=>'L',65622=>'L',65623=>'L',65624=>'L',65625=>'L',65626=>'L',65627=>'L',65628=>'L',65629=>'L',65664=>'L',65665=>'L',65666=>'L',65667=>'L',65668=>'L',65669=>'L',65670=>'L',65671=>'L',65672=>'L',65673=>'L',65674=>'L',65675=>'L',65676=>'L',65677=>'L',65678=>'L',65679=>'L',65680=>'L',65681=>'L',65682=>'L',65683=>'L',65684=>'L',65685=>'L',65686=>'L',65687=>'L',65688=>'L',65689=>'L',65690=>'L',65691=>'L',65692=>'L',65693=>'L',65694=>'L',65695=>'L',65696=>'L',65697=>'L',65698=>'L',65699=>'L',65700=>'L',65701=>'L',65702=>'L',65703=>'L',65704=>'L',65705=>'L',65706=>'L',65707=>'L',65708=>'L',65709=>'L',65710=>'L',65711=>'L',65712=>'L',65713=>'L',65714=>'L',65715=>'L',65716=>'L',65717=>'L',65718=>'L',65719=>'L',65720=>'L',65721=>'L',65722=>'L',65723=>'L',65724=>'L',65725=>'L',65726=>'L',65727=>'L',65728=>'L',65729=>'L',65730=>'L',65731=>'L',65732=>'L',65733=>'L',65734=>'L',65735=>'L',65736=>'L',65737=>'L',65738=>'L',65739=>'L',65740=>'L',65741=>'L',65742=>'L',65743=>'L',65744=>'L',65745=>'L',65746=>'L',65747=>'L',65748=>'L',65749=>'L',65750=>'L',65751=>'L',65752=>'L',65753=>'L',65754=>'L',65755=>'L',65756=>'L',65757=>'L',65758=>'L',65759=>'L',65760=>'L',65761=>'L',65762=>'L',65763=>'L',65764=>'L',65765=>'L',65766=>'L',65767=>'L',65768=>'L',65769=>'L',65770=>'L',65771=>'L',65772=>'L',65773=>'L',65774=>'L',65775=>'L',65776=>'L',65777=>'L',65778=>'L',65779=>'L',65780=>'L',65781=>'L',65782=>'L',65783=>'L',65784=>'L',65785=>'L',65786=>'L',65792=>'L',65793=>'ON',65794=>'L',65799=>'L',65800=>'L',65801=>'L',65802=>'L',65803=>'L',65804=>'L',65805=>'L',65806=>'L',65807=>'L',65808=>'L',65809=>'L',65810=>'L',65811=>'L',65812=>'L',65813=>'L',65814=>'L',65815=>'L',65816=>'L',65817=>'L',65818=>'L',65819=>'L',65820=>'L',65821=>'L',65822=>'L',65823=>'L',65824=>'L',65825=>'L',65826=>'L',65827=>'L',65828=>'L',65829=>'L',65830=>'L',65831=>'L',65832=>'L',65833=>'L',65834=>'L',65835=>'L',65836=>'L',65837=>'L',65838=>'L',65839=>'L',65840=>'L',65841=>'L',65842=>'L',65843=>'L',65847=>'L',65848=>'L',65849=>'L',65850=>'L',65851=>'L',65852=>'L',65853=>'L',65854=>'L',65855=>'L',65856=>'ON',65857=>'ON',65858=>'ON',65859=>'ON',65860=>'ON',65861=>'ON',65862=>'ON',65863=>'ON',65864=>'ON',65865=>'ON',65866=>'ON',65867=>'ON',65868=>'ON',65869=>'ON',65870=>'ON',65871=>'ON',65872=>'ON',65873=>'ON',65874=>'ON',65875=>'ON',65876=>'ON',65877=>'ON',65878=>'ON',65879=>'ON',65880=>'ON',65881=>'ON',65882=>'ON',65883=>'ON',65884=>'ON',65885=>'ON',65886=>'ON',65887=>'ON',65888=>'ON',65889=>'ON',65890=>'ON',65891=>'ON',65892=>'ON',65893=>'ON',65894=>'ON',65895=>'ON',65896=>'ON',65897=>'ON',65898=>'ON',65899=>'ON',65900=>'ON',65901=>'ON',65902=>'ON',65903=>'ON',65904=>'ON',65905=>'ON',65906=>'ON',65907=>'ON',65908=>'ON',65909=>'ON',65910=>'ON',65911=>'ON',65912=>'ON',65913=>'ON',65914=>'ON',65915=>'ON',65916=>'ON',65917=>'ON',65918=>'ON',65919=>'ON',65920=>'ON',65921=>'ON',65922=>'ON',65923=>'ON',65924=>'ON',65925=>'ON',65926=>'ON',65927=>'ON',65928=>'ON',65929=>'ON',65930=>'ON',66304=>'L',66305=>'L',66306=>'L',66307=>'L',66308=>'L',66309=>'L',66310=>'L',66311=>'L',66312=>'L',66313=>'L',66314=>'L',66315=>'L',66316=>'L',66317=>'L',66318=>'L',66319=>'L',66320=>'L',66321=>'L',66322=>'L',66323=>'L',66324=>'L',66325=>'L',66326=>'L',66327=>'L',66328=>'L',66329=>'L',66330=>'L',66331=>'L',66332=>'L',66333=>'L',66334=>'L',66336=>'L',66337=>'L',66338=>'L',66339=>'L',66352=>'L',66353=>'L',66354=>'L',66355=>'L',66356=>'L',66357=>'L',66358=>'L',66359=>'L',66360=>'L',66361=>'L',66362=>'L',66363=>'L',66364=>'L',66365=>'L',66366=>'L',66367=>'L',66368=>'L',66369=>'L',66370=>'L',66371=>'L',66372=>'L',66373=>'L',66374=>'L',66375=>'L',66376=>'L',66377=>'L',66378=>'L',66432=>'L',66433=>'L',66434=>'L',66435=>'L',66436=>'L',66437=>'L',66438=>'L',66439=>'L',66440=>'L',66441=>'L',66442=>'L',66443=>'L',66444=>'L',66445=>'L',66446=>'L',66447=>'L',66448=>'L',66449=>'L',66450=>'L',66451=>'L',66452=>'L',66453=>'L',66454=>'L',66455=>'L',66456=>'L',66457=>'L',66458=>'L',66459=>'L',66460=>'L',66461=>'L',66463=>'L',66464=>'L',66465=>'L',66466=>'L',66467=>'L',66468=>'L',66469=>'L',66470=>'L',66471=>'L',66472=>'L',66473=>'L',66474=>'L',66475=>'L',66476=>'L',66477=>'L',66478=>'L',66479=>'L',66480=>'L',66481=>'L',66482=>'L',66483=>'L',66484=>'L',66485=>'L',66486=>'L',66487=>'L',66488=>'L',66489=>'L',66490=>'L',66491=>'L',66492=>'L',66493=>'L',66494=>'L',66495=>'L',66496=>'L',66497=>'L',66498=>'L',66499=>'L',66504=>'L',66505=>'L',66506=>'L',66507=>'L',66508=>'L',66509=>'L',66510=>'L',66511=>'L',66512=>'L',66513=>'L',66514=>'L',66515=>'L',66516=>'L',66517=>'L',66560=>'L',66561=>'L',66562=>'L',66563=>'L',66564=>'L',66565=>'L',66566=>'L',66567=>'L',66568=>'L',66569=>'L',66570=>'L',66571=>'L',66572=>'L',66573=>'L',66574=>'L',66575=>'L',66576=>'L',66577=>'L',66578=>'L',66579=>'L',66580=>'L',66581=>'L',66582=>'L',66583=>'L',66584=>'L',66585=>'L',66586=>'L',66587=>'L',66588=>'L',66589=>'L',66590=>'L',66591=>'L',66592=>'L',66593=>'L',66594=>'L',66595=>'L',66596=>'L',66597=>'L',66598=>'L',66599=>'L',66600=>'L',66601=>'L',66602=>'L',66603=>'L',66604=>'L',66605=>'L',66606=>'L',66607=>'L',66608=>'L',66609=>'L',66610=>'L',66611=>'L',66612=>'L',66613=>'L',66614=>'L',66615=>'L',66616=>'L',66617=>'L',66618=>'L',66619=>'L',66620=>'L',66621=>'L',66622=>'L',66623=>'L',66624=>'L',66625=>'L',66626=>'L',66627=>'L',66628=>'L',66629=>'L',66630=>'L',66631=>'L',66632=>'L',66633=>'L',66634=>'L',66635=>'L',66636=>'L',66637=>'L',66638=>'L',66639=>'L',66640=>'L',66641=>'L',66642=>'L',66643=>'L',66644=>'L',66645=>'L',66646=>'L',66647=>'L',66648=>'L',66649=>'L',66650=>'L',66651=>'L',66652=>'L',66653=>'L',66654=>'L',66655=>'L',66656=>'L',66657=>'L',66658=>'L',66659=>'L',66660=>'L',66661=>'L',66662=>'L',66663=>'L',66664=>'L',66665=>'L',66666=>'L',66667=>'L',66668=>'L',66669=>'L',66670=>'L',66671=>'L',66672=>'L',66673=>'L',66674=>'L',66675=>'L',66676=>'L',66677=>'L',66678=>'L',66679=>'L',66680=>'L',66681=>'L',66682=>'L',66683=>'L',66684=>'L',66685=>'L',66686=>'L',66687=>'L',66688=>'L',66689=>'L',66690=>'L',66691=>'L',66692=>'L',66693=>'L',66694=>'L',66695=>'L',66696=>'L',66697=>'L',66698=>'L',66699=>'L',66700=>'L',66701=>'L',66702=>'L',66703=>'L',66704=>'L',66705=>'L',66706=>'L',66707=>'L',66708=>'L',66709=>'L',66710=>'L',66711=>'L',66712=>'L',66713=>'L',66714=>'L',66715=>'L',66716=>'L',66717=>'L',66720=>'L',66721=>'L',66722=>'L',66723=>'L',66724=>'L',66725=>'L',66726=>'L',66727=>'L',66728=>'L',66729=>'L',67584=>'R',67585=>'R',67586=>'R',67587=>'R',67588=>'R',67589=>'R',67592=>'R',67594=>'R',67595=>'R',67596=>'R',67597=>'R',67598=>'R',67599=>'R',67600=>'R',67601=>'R',67602=>'R',67603=>'R',67604=>'R',67605=>'R',67606=>'R',67607=>'R',67608=>'R',67609=>'R',67610=>'R',67611=>'R',67612=>'R',67613=>'R',67614=>'R',67615=>'R',67616=>'R',67617=>'R',67618=>'R',67619=>'R',67620=>'R',67621=>'R',67622=>'R',67623=>'R',67624=>'R',67625=>'R',67626=>'R',67627=>'R',67628=>'R',67629=>'R',67630=>'R',67631=>'R',67632=>'R',67633=>'R',67634=>'R',67635=>'R',67636=>'R',67637=>'R',67639=>'R',67640=>'R',67644=>'R',67647=>'R',67840=>'R',67841=>'R',67842=>'R',67843=>'R',67844=>'R',67845=>'R',67846=>'R',67847=>'R',67848=>'R',67849=>'R',67850=>'R',67851=>'R',67852=>'R',67853=>'R',67854=>'R',67855=>'R',67856=>'R',67857=>'R',67858=>'R',67859=>'R',67860=>'R',67861=>'R',67862=>'R',67863=>'R',67864=>'R',67865=>'R',67871=>'ON',68096=>'R',68097=>'NSM',68098=>'NSM',68099=>'NSM',68101=>'NSM',68102=>'NSM',68108=>'NSM',68109=>'NSM',68110=>'NSM',68111=>'NSM',68112=>'R',68113=>'R',68114=>'R',68115=>'R',68117=>'R',68118=>'R',68119=>'R',68121=>'R',68122=>'R',68123=>'R',68124=>'R',68125=>'R',68126=>'R',68127=>'R',68128=>'R',68129=>'R',68130=>'R',68131=>'R',68132=>'R',68133=>'R',68134=>'R',68135=>'R',68136=>'R',68137=>'R',68138=>'R',68139=>'R',68140=>'R',68141=>'R',68142=>'R',68143=>'R',68144=>'R',68145=>'R',68146=>'R',68147=>'R',68152=>'NSM',68153=>'NSM',68154=>'NSM',68159=>'NSM',68160=>'R',68161=>'R',68162=>'R',68163=>'R',68164=>'R',68165=>'R',68166=>'R',68167=>'R',68176=>'R',68177=>'R',68178=>'R',68179=>'R',68180=>'R',68181=>'R',68182=>'R',68183=>'R',68184=>'R',73728=>'L',73729=>'L',73730=>'L',73731=>'L',73732=>'L',73733=>'L',73734=>'L',73735=>'L',73736=>'L',73737=>'L',73738=>'L',73739=>'L',73740=>'L',73741=>'L',73742=>'L',73743=>'L',73744=>'L',73745=>'L',73746=>'L',73747=>'L',73748=>'L',73749=>'L',73750=>'L',73751=>'L',73752=>'L',73753=>'L',73754=>'L',73755=>'L',73756=>'L',73757=>'L',73758=>'L',73759=>'L',73760=>'L',73761=>'L',73762=>'L',73763=>'L',73764=>'L',73765=>'L',73766=>'L',73767=>'L',73768=>'L',73769=>'L',73770=>'L',73771=>'L',73772=>'L',73773=>'L',73774=>'L',73775=>'L',73776=>'L',73777=>'L',73778=>'L',73779=>'L',73780=>'L',73781=>'L',73782=>'L',73783=>'L',73784=>'L',73785=>'L',73786=>'L',73787=>'L',73788=>'L',73789=>'L',73790=>'L',73791=>'L',73792=>'L',73793=>'L',73794=>'L',73795=>'L',73796=>'L',73797=>'L',73798=>'L',73799=>'L',73800=>'L',73801=>'L',73802=>'L',73803=>'L',73804=>'L',73805=>'L',73806=>'L',73807=>'L',73808=>'L',73809=>'L',73810=>'L',73811=>'L',73812=>'L',73813=>'L',73814=>'L',73815=>'L',73816=>'L',73817=>'L',73818=>'L',73819=>'L',73820=>'L',73821=>'L',73822=>'L',73823=>'L',73824=>'L',73825=>'L',73826=>'L',73827=>'L',73828=>'L',73829=>'L',73830=>'L',73831=>'L',73832=>'L',73833=>'L',73834=>'L',73835=>'L',73836=>'L',73837=>'L',73838=>'L',73839=>'L',73840=>'L',73841=>'L',73842=>'L',73843=>'L',73844=>'L',73845=>'L',73846=>'L',73847=>'L',73848=>'L',73849=>'L',73850=>'L',73851=>'L',73852=>'L',73853=>'L',73854=>'L',73855=>'L',73856=>'L',73857=>'L',73858=>'L',73859=>'L',73860=>'L',73861=>'L',73862=>'L',73863=>'L',73864=>'L',73865=>'L',73866=>'L',73867=>'L',73868=>'L',73869=>'L',73870=>'L',73871=>'L',73872=>'L',73873=>'L',73874=>'L',73875=>'L',73876=>'L',73877=>'L',73878=>'L',73879=>'L',73880=>'L',73881=>'L',73882=>'L',73883=>'L',73884=>'L',73885=>'L',73886=>'L',73887=>'L',73888=>'L',73889=>'L',73890=>'L',73891=>'L',73892=>'L',73893=>'L',73894=>'L',73895=>'L',73896=>'L',73897=>'L',73898=>'L',73899=>'L',73900=>'L',73901=>'L',73902=>'L',73903=>'L',73904=>'L',73905=>'L',73906=>'L',73907=>'L',73908=>'L',73909=>'L',73910=>'L',73911=>'L',73912=>'L',73913=>'L',73914=>'L',73915=>'L',73916=>'L',73917=>'L',73918=>'L',73919=>'L',73920=>'L',73921=>'L',73922=>'L',73923=>'L',73924=>'L',73925=>'L',73926=>'L',73927=>'L',73928=>'L',73929=>'L',73930=>'L',73931=>'L',73932=>'L',73933=>'L',73934=>'L',73935=>'L',73936=>'L',73937=>'L',73938=>'L',73939=>'L',73940=>'L',73941=>'L',73942=>'L',73943=>'L',73944=>'L',73945=>'L',73946=>'L',73947=>'L',73948=>'L',73949=>'L',73950=>'L',73951=>'L',73952=>'L',73953=>'L',73954=>'L',73955=>'L',73956=>'L',73957=>'L',73958=>'L',73959=>'L',73960=>'L',73961=>'L',73962=>'L',73963=>'L',73964=>'L',73965=>'L',73966=>'L',73967=>'L',73968=>'L',73969=>'L',73970=>'L',73971=>'L',73972=>'L',73973=>'L',73974=>'L',73975=>'L',73976=>'L',73977=>'L',73978=>'L',73979=>'L',73980=>'L',73981=>'L',73982=>'L',73983=>'L',73984=>'L',73985=>'L',73986=>'L',73987=>'L',73988=>'L',73989=>'L',73990=>'L',73991=>'L',73992=>'L',73993=>'L',73994=>'L',73995=>'L',73996=>'L',73997=>'L',73998=>'L',73999=>'L',74000=>'L',74001=>'L',74002=>'L',74003=>'L',74004=>'L',74005=>'L',74006=>'L',74007=>'L',74008=>'L',74009=>'L',74010=>'L',74011=>'L',74012=>'L',74013=>'L',74014=>'L',74015=>'L',74016=>'L',74017=>'L',74018=>'L',74019=>'L',74020=>'L',74021=>'L',74022=>'L',74023=>'L',74024=>'L',74025=>'L',74026=>'L',74027=>'L',74028=>'L',74029=>'L',74030=>'L',74031=>'L',74032=>'L',74033=>'L',74034=>'L',74035=>'L',74036=>'L',74037=>'L',74038=>'L',74039=>'L',74040=>'L',74041=>'L',74042=>'L',74043=>'L',74044=>'L',74045=>'L',74046=>'L',74047=>'L',74048=>'L',74049=>'L',74050=>'L',74051=>'L',74052=>'L',74053=>'L',74054=>'L',74055=>'L',74056=>'L',74057=>'L',74058=>'L',74059=>'L',74060=>'L',74061=>'L',74062=>'L',74063=>'L',74064=>'L',74065=>'L',74066=>'L',74067=>'L',74068=>'L',74069=>'L',74070=>'L',74071=>'L',74072=>'L',74073=>'L',74074=>'L',74075=>'L',74076=>'L',74077=>'L',74078=>'L',74079=>'L',74080=>'L',74081=>'L',74082=>'L',74083=>'L',74084=>'L',74085=>'L',74086=>'L',74087=>'L',74088=>'L',74089=>'L',74090=>'L',74091=>'L',74092=>'L',74093=>'L',74094=>'L',74095=>'L',74096=>'L',74097=>'L',74098=>'L',74099=>'L',74100=>'L',74101=>'L',74102=>'L',74103=>'L',74104=>'L',74105=>'L',74106=>'L',74107=>'L',74108=>'L',74109=>'L',74110=>'L',74111=>'L',74112=>'L',74113=>'L',74114=>'L',74115=>'L',74116=>'L',74117=>'L',74118=>'L',74119=>'L',74120=>'L',74121=>'L',74122=>'L',74123=>'L',74124=>'L',74125=>'L',74126=>'L',74127=>'L',74128=>'L',74129=>'L',74130=>'L',74131=>'L',74132=>'L',74133=>'L',74134=>'L',74135=>'L',74136=>'L',74137=>'L',74138=>'L',74139=>'L',74140=>'L',74141=>'L',74142=>'L',74143=>'L',74144=>'L',74145=>'L',74146=>'L',74147=>'L',74148=>'L',74149=>'L',74150=>'L',74151=>'L',74152=>'L',74153=>'L',74154=>'L',74155=>'L',74156=>'L',74157=>'L',74158=>'L',74159=>'L',74160=>'L',74161=>'L',74162=>'L',74163=>'L',74164=>'L',74165=>'L',74166=>'L',74167=>'L',74168=>'L',74169=>'L',74170=>'L',74171=>'L',74172=>'L',74173=>'L',74174=>'L',74175=>'L',74176=>'L',74177=>'L',74178=>'L',74179=>'L',74180=>'L',74181=>'L',74182=>'L',74183=>'L',74184=>'L',74185=>'L',74186=>'L',74187=>'L',74188=>'L',74189=>'L',74190=>'L',74191=>'L',74192=>'L',74193=>'L',74194=>'L',74195=>'L',74196=>'L',74197=>'L',74198=>'L',74199=>'L',74200=>'L',74201=>'L',74202=>'L',74203=>'L',74204=>'L',74205=>'L',74206=>'L',74207=>'L',74208=>'L',74209=>'L',74210=>'L',74211=>'L',74212=>'L',74213=>'L',74214=>'L',74215=>'L',74216=>'L',74217=>'L',74218=>'L',74219=>'L',74220=>'L',74221=>'L',74222=>'L',74223=>'L',74224=>'L',74225=>'L',74226=>'L',74227=>'L',74228=>'L',74229=>'L',74230=>'L',74231=>'L',74232=>'L',74233=>'L',74234=>'L',74235=>'L',74236=>'L',74237=>'L',74238=>'L',74239=>'L',74240=>'L',74241=>'L',74242=>'L',74243=>'L',74244=>'L',74245=>'L',74246=>'L',74247=>'L',74248=>'L',74249=>'L',74250=>'L',74251=>'L',74252=>'L',74253=>'L',74254=>'L',74255=>'L',74256=>'L',74257=>'L',74258=>'L',74259=>'L',74260=>'L',74261=>'L',74262=>'L',74263=>'L',74264=>'L',74265=>'L',74266=>'L',74267=>'L',74268=>'L',74269=>'L',74270=>'L',74271=>'L',74272=>'L',74273=>'L',74274=>'L',74275=>'L',74276=>'L',74277=>'L',74278=>'L',74279=>'L',74280=>'L',74281=>'L',74282=>'L',74283=>'L',74284=>'L',74285=>'L',74286=>'L',74287=>'L',74288=>'L',74289=>'L',74290=>'L',74291=>'L',74292=>'L',74293=>'L',74294=>'L',74295=>'L',74296=>'L',74297=>'L',74298=>'L',74299=>'L',74300=>'L',74301=>'L',74302=>'L',74303=>'L',74304=>'L',74305=>'L',74306=>'L',74307=>'L',74308=>'L',74309=>'L',74310=>'L',74311=>'L',74312=>'L',74313=>'L',74314=>'L',74315=>'L',74316=>'L',74317=>'L',74318=>'L',74319=>'L',74320=>'L',74321=>'L',74322=>'L',74323=>'L',74324=>'L',74325=>'L',74326=>'L',74327=>'L',74328=>'L',74329=>'L',74330=>'L',74331=>'L',74332=>'L',74333=>'L',74334=>'L',74335=>'L',74336=>'L',74337=>'L',74338=>'L',74339=>'L',74340=>'L',74341=>'L',74342=>'L',74343=>'L',74344=>'L',74345=>'L',74346=>'L',74347=>'L',74348=>'L',74349=>'L',74350=>'L',74351=>'L',74352=>'L',74353=>'L',74354=>'L',74355=>'L',74356=>'L',74357=>'L',74358=>'L',74359=>'L',74360=>'L',74361=>'L',74362=>'L',74363=>'L',74364=>'L',74365=>'L',74366=>'L',74367=>'L',74368=>'L',74369=>'L',74370=>'L',74371=>'L',74372=>'L',74373=>'L',74374=>'L',74375=>'L',74376=>'L',74377=>'L',74378=>'L',74379=>'L',74380=>'L',74381=>'L',74382=>'L',74383=>'L',74384=>'L',74385=>'L',74386=>'L',74387=>'L',74388=>'L',74389=>'L',74390=>'L',74391=>'L',74392=>'L',74393=>'L',74394=>'L',74395=>'L',74396=>'L',74397=>'L',74398=>'L',74399=>'L',74400=>'L',74401=>'L',74402=>'L',74403=>'L',74404=>'L',74405=>'L',74406=>'L',74407=>'L',74408=>'L',74409=>'L',74410=>'L',74411=>'L',74412=>'L',74413=>'L',74414=>'L',74415=>'L',74416=>'L',74417=>'L',74418=>'L',74419=>'L',74420=>'L',74421=>'L',74422=>'L',74423=>'L',74424=>'L',74425=>'L',74426=>'L',74427=>'L',74428=>'L',74429=>'L',74430=>'L',74431=>'L',74432=>'L',74433=>'L',74434=>'L',74435=>'L',74436=>'L',74437=>'L',74438=>'L',74439=>'L',74440=>'L',74441=>'L',74442=>'L',74443=>'L',74444=>'L',74445=>'L',74446=>'L',74447=>'L',74448=>'L',74449=>'L',74450=>'L',74451=>'L',74452=>'L',74453=>'L',74454=>'L',74455=>'L',74456=>'L',74457=>'L',74458=>'L',74459=>'L',74460=>'L',74461=>'L',74462=>'L',74463=>'L',74464=>'L',74465=>'L',74466=>'L',74467=>'L',74468=>'L',74469=>'L',74470=>'L',74471=>'L',74472=>'L',74473=>'L',74474=>'L',74475=>'L',74476=>'L',74477=>'L',74478=>'L',74479=>'L',74480=>'L',74481=>'L',74482=>'L',74483=>'L',74484=>'L',74485=>'L',74486=>'L',74487=>'L',74488=>'L',74489=>'L',74490=>'L',74491=>'L',74492=>'L',74493=>'L',74494=>'L',74495=>'L',74496=>'L',74497=>'L',74498=>'L',74499=>'L',74500=>'L',74501=>'L',74502=>'L',74503=>'L',74504=>'L',74505=>'L',74506=>'L',74507=>'L',74508=>'L',74509=>'L',74510=>'L',74511=>'L',74512=>'L',74513=>'L',74514=>'L',74515=>'L',74516=>'L',74517=>'L',74518=>'L',74519=>'L',74520=>'L',74521=>'L',74522=>'L',74523=>'L',74524=>'L',74525=>'L',74526=>'L',74527=>'L',74528=>'L',74529=>'L',74530=>'L',74531=>'L',74532=>'L',74533=>'L',74534=>'L',74535=>'L',74536=>'L',74537=>'L',74538=>'L',74539=>'L',74540=>'L',74541=>'L',74542=>'L',74543=>'L',74544=>'L',74545=>'L',74546=>'L',74547=>'L',74548=>'L',74549=>'L',74550=>'L',74551=>'L',74552=>'L',74553=>'L',74554=>'L',74555=>'L',74556=>'L',74557=>'L',74558=>'L',74559=>'L',74560=>'L',74561=>'L',74562=>'L',74563=>'L',74564=>'L',74565=>'L',74566=>'L',74567=>'L',74568=>'L',74569=>'L',74570=>'L',74571=>'L',74572=>'L',74573=>'L',74574=>'L',74575=>'L',74576=>'L',74577=>'L',74578=>'L',74579=>'L',74580=>'L',74581=>'L',74582=>'L',74583=>'L',74584=>'L',74585=>'L',74586=>'L',74587=>'L',74588=>'L',74589=>'L',74590=>'L',74591=>'L',74592=>'L',74593=>'L',74594=>'L',74595=>'L',74596=>'L',74597=>'L',74598=>'L',74599=>'L',74600=>'L',74601=>'L',74602=>'L',74603=>'L',74604=>'L',74605=>'L',74606=>'L',74752=>'L',74753=>'L',74754=>'L',74755=>'L',74756=>'L',74757=>'L',74758=>'L',74759=>'L',74760=>'L',74761=>'L',74762=>'L',74763=>'L',74764=>'L',74765=>'L',74766=>'L',74767=>'L',74768=>'L',74769=>'L',74770=>'L',74771=>'L',74772=>'L',74773=>'L',74774=>'L',74775=>'L',74776=>'L',74777=>'L',74778=>'L',74779=>'L',74780=>'L',74781=>'L',74782=>'L',74783=>'L',74784=>'L',74785=>'L',74786=>'L',74787=>'L',74788=>'L',74789=>'L',74790=>'L',74791=>'L',74792=>'L',74793=>'L',74794=>'L',74795=>'L',74796=>'L',74797=>'L',74798=>'L',74799=>'L',74800=>'L',74801=>'L',74802=>'L',74803=>'L',74804=>'L',74805=>'L',74806=>'L',74807=>'L',74808=>'L',74809=>'L',74810=>'L',74811=>'L',74812=>'L',74813=>'L',74814=>'L',74815=>'L',74816=>'L',74817=>'L',74818=>'L',74819=>'L',74820=>'L',74821=>'L',74822=>'L',74823=>'L',74824=>'L',74825=>'L',74826=>'L',74827=>'L',74828=>'L',74829=>'L',74830=>'L',74831=>'L',74832=>'L',74833=>'L',74834=>'L',74835=>'L',74836=>'L',74837=>'L',74838=>'L',74839=>'L',74840=>'L',74841=>'L',74842=>'L',74843=>'L',74844=>'L',74845=>'L',74846=>'L',74847=>'L',74848=>'L',74849=>'L',74850=>'L',74864=>'L',74865=>'L',74866=>'L',74867=>'L',118784=>'L',118785=>'L',118786=>'L',118787=>'L',118788=>'L',118789=>'L',118790=>'L',118791=>'L',118792=>'L',118793=>'L',118794=>'L',118795=>'L',118796=>'L',118797=>'L',118798=>'L',118799=>'L',118800=>'L',118801=>'L',118802=>'L',118803=>'L',118804=>'L',118805=>'L',118806=>'L',118807=>'L',118808=>'L',118809=>'L',118810=>'L',118811=>'L',118812=>'L',118813=>'L',118814=>'L',118815=>'L',118816=>'L',118817=>'L',118818=>'L',118819=>'L',118820=>'L',118821=>'L',118822=>'L',118823=>'L',118824=>'L',118825=>'L',118826=>'L',118827=>'L',118828=>'L',118829=>'L',118830=>'L',118831=>'L',118832=>'L',118833=>'L',118834=>'L',118835=>'L',118836=>'L',118837=>'L',118838=>'L',118839=>'L',118840=>'L',118841=>'L',118842=>'L',118843=>'L',118844=>'L',118845=>'L',118846=>'L',118847=>'L',118848=>'L',118849=>'L',118850=>'L',118851=>'L',118852=>'L',118853=>'L',118854=>'L',118855=>'L',118856=>'L',118857=>'L',118858=>'L',118859=>'L',118860=>'L',118861=>'L',118862=>'L',118863=>'L',118864=>'L',118865=>'L',118866=>'L',118867=>'L',118868=>'L',118869=>'L',118870=>'L',118871=>'L',118872=>'L',118873=>'L',118874=>'L',118875=>'L',118876=>'L',118877=>'L',118878=>'L',118879=>'L',118880=>'L',118881=>'L',118882=>'L',118883=>'L',118884=>'L',118885=>'L',118886=>'L',118887=>'L',118888=>'L',118889=>'L',118890=>'L',118891=>'L',118892=>'L',118893=>'L',118894=>'L',118895=>'L',118896=>'L',118897=>'L',118898=>'L',118899=>'L',118900=>'L',118901=>'L',118902=>'L',118903=>'L',118904=>'L',118905=>'L',118906=>'L',118907=>'L',118908=>'L',118909=>'L',118910=>'L',118911=>'L',118912=>'L',118913=>'L',118914=>'L',118915=>'L',118916=>'L',118917=>'L',118918=>'L',118919=>'L',118920=>'L',118921=>'L',118922=>'L',118923=>'L',118924=>'L',118925=>'L',118926=>'L',118927=>'L',118928=>'L',118929=>'L',118930=>'L',118931=>'L',118932=>'L',118933=>'L',118934=>'L',118935=>'L',118936=>'L',118937=>'L',118938=>'L',118939=>'L',118940=>'L',118941=>'L',118942=>'L',118943=>'L',118944=>'L',118945=>'L',118946=>'L',118947=>'L',118948=>'L',118949=>'L',118950=>'L',118951=>'L',118952=>'L',118953=>'L',118954=>'L',118955=>'L',118956=>'L',118957=>'L',118958=>'L',118959=>'L',118960=>'L',118961=>'L',118962=>'L',118963=>'L',118964=>'L',118965=>'L',118966=>'L',118967=>'L',118968=>'L',118969=>'L',118970=>'L',118971=>'L',118972=>'L',118973=>'L',118974=>'L',118975=>'L',118976=>'L',118977=>'L',118978=>'L',118979=>'L',118980=>'L',118981=>'L',118982=>'L',118983=>'L',118984=>'L',118985=>'L',118986=>'L',118987=>'L',118988=>'L',118989=>'L',118990=>'L',118991=>'L',118992=>'L',118993=>'L',118994=>'L',118995=>'L',118996=>'L',118997=>'L',118998=>'L',118999=>'L',119000=>'L',119001=>'L',119002=>'L',119003=>'L',119004=>'L',119005=>'L',119006=>'L',119007=>'L',119008=>'L',119009=>'L',119010=>'L',119011=>'L',119012=>'L',119013=>'L',119014=>'L',119015=>'L',119016=>'L',119017=>'L',119018=>'L',119019=>'L',119020=>'L',119021=>'L',119022=>'L',119023=>'L',119024=>'L',119025=>'L',119026=>'L',119027=>'L',119028=>'L',119029=>'L',119040=>'L',119041=>'L',119042=>'L',119043=>'L',119044=>'L',119045=>'L',119046=>'L',119047=>'L',119048=>'L',119049=>'L',119050=>'L',119051=>'L',119052=>'L',119053=>'L',119054=>'L',119055=>'L',119056=>'L',119057=>'L',119058=>'L',119059=>'L',119060=>'L',119061=>'L',119062=>'L',119063=>'L',119064=>'L',119065=>'L',119066=>'L',119067=>'L',119068=>'L',119069=>'L',119070=>'L',119071=>'L',119072=>'L',119073=>'L',119074=>'L',119075=>'L',119076=>'L',119077=>'L',119078=>'L',119082=>'L',119083=>'L',119084=>'L',119085=>'L',119086=>'L',119087=>'L',119088=>'L',119089=>'L',119090=>'L',119091=>'L',119092=>'L',119093=>'L',119094=>'L',119095=>'L',119096=>'L',119097=>'L',119098=>'L',119099=>'L',119100=>'L',119101=>'L',119102=>'L',119103=>'L',119104=>'L',119105=>'L',119106=>'L',119107=>'L',119108=>'L',119109=>'L',119110=>'L',119111=>'L',119112=>'L',119113=>'L',119114=>'L',119115=>'L',119116=>'L',119117=>'L',119118=>'L',119119=>'L',119120=>'L',119121=>'L',119122=>'L',119123=>'L',119124=>'L',119125=>'L',119126=>'L',119127=>'L',119128=>'L',119129=>'L',119130=>'L',119131=>'L',119132=>'L',119133=>'L',119134=>'L',119135=>'L',119136=>'L',119137=>'L',119138=>'L',119139=>'L',119140=>'L',119141=>'L',119142=>'L',119143=>'NSM',119144=>'NSM',119145=>'NSM',119146=>'L',119147=>'L',119148=>'L',119149=>'L',119150=>'L',119151=>'L',119152=>'L',119153=>'L',119154=>'L',119155=>'BN',119156=>'BN',119157=>'BN',119158=>'BN',119159=>'BN',119160=>'BN',119161=>'BN',119162=>'BN',119163=>'NSM',119164=>'NSM',119165=>'NSM',119166=>'NSM',119167=>'NSM',119168=>'NSM',119169=>'NSM',119170=>'NSM',119171=>'L',119172=>'L',119173=>'NSM',119174=>'NSM',119175=>'NSM',119176=>'NSM',119177=>'NSM',119178=>'NSM',119179=>'NSM',119180=>'L',119181=>'L',119182=>'L',119183=>'L',119184=>'L',119185=>'L',119186=>'L',119187=>'L',119188=>'L',119189=>'L',119190=>'L',119191=>'L',119192=>'L',119193=>'L',119194=>'L',119195=>'L',119196=>'L',119197=>'L',119198=>'L',119199=>'L',119200=>'L',119201=>'L',119202=>'L',119203=>'L',119204=>'L',119205=>'L',119206=>'L',119207=>'L',119208=>'L',119209=>'L',119210=>'NSM',119211=>'NSM',119212=>'NSM',119213=>'NSM',119214=>'L',119215=>'L',119216=>'L',119217=>'L',119218=>'L',119219=>'L',119220=>'L',119221=>'L',119222=>'L',119223=>'L',119224=>'L',119225=>'L',119226=>'L',119227=>'L',119228=>'L',119229=>'L',119230=>'L',119231=>'L',119232=>'L',119233=>'L',119234=>'L',119235=>'L',119236=>'L',119237=>'L',119238=>'L',119239=>'L',119240=>'L',119241=>'L',119242=>'L',119243=>'L',119244=>'L',119245=>'L',119246=>'L',119247=>'L',119248=>'L',119249=>'L',119250=>'L',119251=>'L',119252=>'L',119253=>'L',119254=>'L',119255=>'L',119256=>'L',119257=>'L',119258=>'L',119259=>'L',119260=>'L',119261=>'L',119296=>'ON',119297=>'ON',119298=>'ON',119299=>'ON',119300=>'ON',119301=>'ON',119302=>'ON',119303=>'ON',119304=>'ON',119305=>'ON',119306=>'ON',119307=>'ON',119308=>'ON',119309=>'ON',119310=>'ON',119311=>'ON',119312=>'ON',119313=>'ON',119314=>'ON',119315=>'ON',119316=>'ON',119317=>'ON',119318=>'ON',119319=>'ON',119320=>'ON',119321=>'ON',119322=>'ON',119323=>'ON',119324=>'ON',119325=>'ON',119326=>'ON',119327=>'ON',119328=>'ON',119329=>'ON',119330=>'ON',119331=>'ON',119332=>'ON',119333=>'ON',119334=>'ON',119335=>'ON',119336=>'ON',119337=>'ON',119338=>'ON',119339=>'ON',119340=>'ON',119341=>'ON',119342=>'ON',119343=>'ON',119344=>'ON',119345=>'ON',119346=>'ON',119347=>'ON',119348=>'ON',119349=>'ON',119350=>'ON',119351=>'ON',119352=>'ON',119353=>'ON',119354=>'ON',119355=>'ON',119356=>'ON',119357=>'ON',119358=>'ON',119359=>'ON',119360=>'ON',119361=>'ON',119362=>'NSM',119363=>'NSM',119364=>'NSM',119365=>'ON',119552=>'ON',119553=>'ON',119554=>'ON',119555=>'ON',119556=>'ON',119557=>'ON',119558=>'ON',119559=>'ON',119560=>'ON',119561=>'ON',119562=>'ON',119563=>'ON',119564=>'ON',119565=>'ON',119566=>'ON',119567=>'ON',119568=>'ON',119569=>'ON',119570=>'ON',119571=>'ON',119572=>'ON',119573=>'ON',119574=>'ON',119575=>'ON',119576=>'ON',119577=>'ON',119578=>'ON',119579=>'ON',119580=>'ON',119581=>'ON',119582=>'ON',119583=>'ON',119584=>'ON',119585=>'ON',119586=>'ON',119587=>'ON',119588=>'ON',119589=>'ON',119590=>'ON',119591=>'ON',119592=>'ON',119593=>'ON',119594=>'ON',119595=>'ON',119596=>'ON',119597=>'ON',119598=>'ON',119599=>'ON',119600=>'ON',119601=>'ON',119602=>'ON',119603=>'ON',119604=>'ON',119605=>'ON',119606=>'ON',119607=>'ON',119608=>'ON',119609=>'ON',119610=>'ON',119611=>'ON',119612=>'ON',119613=>'ON',119614=>'ON',119615=>'ON',119616=>'ON',119617=>'ON',119618=>'ON',119619=>'ON',119620=>'ON',119621=>'ON',119622=>'ON',119623=>'ON',119624=>'ON',119625=>'ON',119626=>'ON',119627=>'ON',119628=>'ON',119629=>'ON',119630=>'ON',119631=>'ON',119632=>'ON',119633=>'ON',119634=>'ON',119635=>'ON',119636=>'ON',119637=>'ON',119638=>'ON',119648=>'L',119649=>'L',119650=>'L',119651=>'L',119652=>'L',119653=>'L',119654=>'L',119655=>'L',119656=>'L',119657=>'L',119658=>'L',119659=>'L',119660=>'L',119661=>'L',119662=>'L',119663=>'L',119664=>'L',119665=>'L',119808=>'L',119809=>'L',119810=>'L',119811=>'L',119812=>'L',119813=>'L',119814=>'L',119815=>'L',119816=>'L',119817=>'L',119818=>'L',119819=>'L',119820=>'L',119821=>'L',119822=>'L',119823=>'L',119824=>'L',119825=>'L',119826=>'L',119827=>'L',119828=>'L',119829=>'L',119830=>'L',119831=>'L',119832=>'L',119833=>'L',119834=>'L',119835=>'L',119836=>'L',119837=>'L',119838=>'L',119839=>'L',119840=>'L',119841=>'L',119842=>'L',119843=>'L',119844=>'L',119845=>'L',119846=>'L',119847=>'L',119848=>'L',119849=>'L',119850=>'L',119851=>'L',119852=>'L',119853=>'L',119854=>'L',119855=>'L',119856=>'L',119857=>'L',119858=>'L',119859=>'L',119860=>'L',119861=>'L',119862=>'L',119863=>'L',119864=>'L',119865=>'L',119866=>'L',119867=>'L',119868=>'L',119869=>'L',119870=>'L',119871=>'L',119872=>'L',119873=>'L',119874=>'L',119875=>'L',119876=>'L',119877=>'L',119878=>'L',119879=>'L',119880=>'L',119881=>'L',119882=>'L',119883=>'L',119884=>'L',119885=>'L',119886=>'L',119887=>'L',119888=>'L',119889=>'L',119890=>'L',119891=>'L',119892=>'L',119894=>'L',119895=>'L',119896=>'L',119897=>'L',119898=>'L',119899=>'L',119900=>'L',119901=>'L',119902=>'L',119903=>'L',119904=>'L',119905=>'L',119906=>'L',119907=>'L',119908=>'L',119909=>'L',119910=>'L',119911=>'L',119912=>'L',119913=>'L',119914=>'L',119915=>'L',119916=>'L',119917=>'L',119918=>'L',119919=>'L',119920=>'L',119921=>'L',119922=>'L',119923=>'L',119924=>'L',119925=>'L',119926=>'L',119927=>'L',119928=>'L',119929=>'L',119930=>'L',119931=>'L',119932=>'L',119933=>'L',119934=>'L',119935=>'L',119936=>'L',119937=>'L',119938=>'L',119939=>'L',119940=>'L',119941=>'L',119942=>'L',119943=>'L',119944=>'L',119945=>'L',119946=>'L',119947=>'L',119948=>'L',119949=>'L',119950=>'L',119951=>'L',119952=>'L',119953=>'L',119954=>'L',119955=>'L',119956=>'L',119957=>'L',119958=>'L',119959=>'L',119960=>'L',119961=>'L',119962=>'L',119963=>'L',119964=>'L',119966=>'L',119967=>'L',119970=>'L',119973=>'L',119974=>'L',119977=>'L',119978=>'L',119979=>'L',119980=>'L',119982=>'L',119983=>'L',119984=>'L',119985=>'L',119986=>'L',119987=>'L',119988=>'L',119989=>'L',119990=>'L',119991=>'L',119992=>'L',119993=>'L',119995=>'L',119997=>'L',119998=>'L',119999=>'L',120000=>'L',120001=>'L',120002=>'L',120003=>'L',120005=>'L',120006=>'L',120007=>'L',120008=>'L',120009=>'L',120010=>'L',120011=>'L',120012=>'L',120013=>'L',120014=>'L',120015=>'L',120016=>'L',120017=>'L',120018=>'L',120019=>'L',120020=>'L',120021=>'L',120022=>'L',120023=>'L',120024=>'L',120025=>'L',120026=>'L',120027=>'L',120028=>'L',120029=>'L',120030=>'L',120031=>'L',120032=>'L',120033=>'L',120034=>'L',120035=>'L',120036=>'L',120037=>'L',120038=>'L',120039=>'L',120040=>'L',120041=>'L',120042=>'L',120043=>'L',120044=>'L',120045=>'L',120046=>'L',120047=>'L',120048=>'L',120049=>'L',120050=>'L',120051=>'L',120052=>'L',120053=>'L',120054=>'L',120055=>'L',120056=>'L',120057=>'L',120058=>'L',120059=>'L',120060=>'L',120061=>'L',120062=>'L',120063=>'L',120064=>'L',120065=>'L',120066=>'L',120067=>'L',120068=>'L',120069=>'L',120071=>'L',120072=>'L',120073=>'L',120074=>'L',120077=>'L',120078=>'L',120079=>'L',120080=>'L',120081=>'L',120082=>'L',120083=>'L',120084=>'L',120086=>'L',120087=>'L',120088=>'L',120089=>'L',120090=>'L',120091=>'L',120092=>'L',120094=>'L',120095=>'L',120096=>'L',120097=>'L',120098=>'L',120099=>'L',120100=>'L',120101=>'L',120102=>'L',120103=>'L',120104=>'L',120105=>'L',120106=>'L',120107=>'L',120108=>'L',120109=>'L',120110=>'L',120111=>'L',120112=>'L',120113=>'L',120114=>'L',120115=>'L',120116=>'L',120117=>'L',120118=>'L',120119=>'L',120120=>'L',120121=>'L',120123=>'L',120124=>'L',120125=>'L',120126=>'L',120128=>'L',120129=>'L',120130=>'L',120131=>'L',120132=>'L',120134=>'L',120138=>'L',120139=>'L',120140=>'L',120141=>'L',120142=>'L',120143=>'L',120144=>'L',120146=>'L',120147=>'L',120148=>'L',120149=>'L',120150=>'L',120151=>'L',120152=>'L',120153=>'L',120154=>'L',120155=>'L',120156=>'L',120157=>'L',120158=>'L',120159=>'L',120160=>'L',120161=>'L',120162=>'L',120163=>'L',120164=>'L',120165=>'L',120166=>'L',120167=>'L',120168=>'L',120169=>'L',120170=>'L',120171=>'L',120172=>'L',120173=>'L',120174=>'L',120175=>'L',120176=>'L',120177=>'L',120178=>'L',120179=>'L',120180=>'L',120181=>'L',120182=>'L',120183=>'L',120184=>'L',120185=>'L',120186=>'L',120187=>'L',120188=>'L',120189=>'L',120190=>'L',120191=>'L',120192=>'L',120193=>'L',120194=>'L',120195=>'L',120196=>'L',120197=>'L',120198=>'L',120199=>'L',120200=>'L',120201=>'L',120202=>'L',120203=>'L',120204=>'L',120205=>'L',120206=>'L',120207=>'L',120208=>'L',120209=>'L',120210=>'L',120211=>'L',120212=>'L',120213=>'L',120214=>'L',120215=>'L',120216=>'L',120217=>'L',120218=>'L',120219=>'L',120220=>'L',120221=>'L',120222=>'L',120223=>'L',120224=>'L',120225=>'L',120226=>'L',120227=>'L',120228=>'L',120229=>'L',120230=>'L',120231=>'L',120232=>'L',120233=>'L',120234=>'L',120235=>'L',120236=>'L',120237=>'L',120238=>'L',120239=>'L',120240=>'L',120241=>'L',120242=>'L',120243=>'L',120244=>'L',120245=>'L',120246=>'L',120247=>'L',120248=>'L',120249=>'L',120250=>'L',120251=>'L',120252=>'L',120253=>'L',120254=>'L',120255=>'L',120256=>'L',120257=>'L',120258=>'L',120259=>'L',120260=>'L',120261=>'L',120262=>'L',120263=>'L',120264=>'L',120265=>'L',120266=>'L',120267=>'L',120268=>'L',120269=>'L',120270=>'L',120271=>'L',120272=>'L',120273=>'L',120274=>'L',120275=>'L',120276=>'L',120277=>'L',120278=>'L',120279=>'L',120280=>'L',120281=>'L',120282=>'L',120283=>'L',120284=>'L',120285=>'L',120286=>'L',120287=>'L',120288=>'L',120289=>'L',120290=>'L',120291=>'L',120292=>'L',120293=>'L',120294=>'L',120295=>'L',120296=>'L',120297=>'L',120298=>'L',120299=>'L',120300=>'L',120301=>'L',120302=>'L',120303=>'L',120304=>'L',120305=>'L',120306=>'L',120307=>'L',120308=>'L',120309=>'L',120310=>'L',120311=>'L',120312=>'L',120313=>'L',120314=>'L',120315=>'L',120316=>'L',120317=>'L',120318=>'L',120319=>'L',120320=>'L',120321=>'L',120322=>'L',120323=>'L',120324=>'L',120325=>'L',120326=>'L',120327=>'L',120328=>'L',120329=>'L',120330=>'L',120331=>'L',120332=>'L',120333=>'L',120334=>'L',120335=>'L',120336=>'L',120337=>'L',120338=>'L',120339=>'L',120340=>'L',120341=>'L',120342=>'L',120343=>'L',120344=>'L',120345=>'L',120346=>'L',120347=>'L',120348=>'L',120349=>'L',120350=>'L',120351=>'L',120352=>'L',120353=>'L',120354=>'L',120355=>'L',120356=>'L',120357=>'L',120358=>'L',120359=>'L',120360=>'L',120361=>'L',120362=>'L',120363=>'L',120364=>'L',120365=>'L',120366=>'L',120367=>'L',120368=>'L',120369=>'L',120370=>'L',120371=>'L',120372=>'L',120373=>'L',120374=>'L',120375=>'L',120376=>'L',120377=>'L',120378=>'L',120379=>'L',120380=>'L',120381=>'L',120382=>'L',120383=>'L',120384=>'L',120385=>'L',120386=>'L',120387=>'L',120388=>'L',120389=>'L',120390=>'L',120391=>'L',120392=>'L',120393=>'L',120394=>'L',120395=>'L',120396=>'L',120397=>'L',120398=>'L',120399=>'L',120400=>'L',120401=>'L',120402=>'L',120403=>'L',120404=>'L',120405=>'L',120406=>'L',120407=>'L',120408=>'L',120409=>'L',120410=>'L',120411=>'L',120412=>'L',120413=>'L',120414=>'L',120415=>'L',120416=>'L',120417=>'L',120418=>'L',120419=>'L',120420=>'L',120421=>'L',120422=>'L',120423=>'L',120424=>'L',120425=>'L',120426=>'L',120427=>'L',120428=>'L',120429=>'L',120430=>'L',120431=>'L',120432=>'L',120433=>'L',120434=>'L',120435=>'L',120436=>'L',120437=>'L',120438=>'L',120439=>'L',120440=>'L',120441=>'L',120442=>'L',120443=>'L',120444=>'L',120445=>'L',120446=>'L',120447=>'L',120448=>'L',120449=>'L',120450=>'L',120451=>'L',120452=>'L',120453=>'L',120454=>'L',120455=>'L',120456=>'L',120457=>'L',120458=>'L',120459=>'L',120460=>'L',120461=>'L',120462=>'L',120463=>'L',120464=>'L',120465=>'L',120466=>'L',120467=>'L',120468=>'L',120469=>'L',120470=>'L',120471=>'L',120472=>'L',120473=>'L',120474=>'L',120475=>'L',120476=>'L',120477=>'L',120478=>'L',120479=>'L',120480=>'L',120481=>'L',120482=>'L',120483=>'L',120484=>'L',120485=>'L',120488=>'L',120489=>'L',120490=>'L',120491=>'L',120492=>'L',120493=>'L',120494=>'L',120495=>'L',120496=>'L',120497=>'L',120498=>'L',120499=>'L',120500=>'L',120501=>'L',120502=>'L',120503=>'L',120504=>'L',120505=>'L',120506=>'L',120507=>'L',120508=>'L',120509=>'L',120510=>'L',120511=>'L',120512=>'L',120513=>'L',120514=>'L',120515=>'L',120516=>'L',120517=>'L',120518=>'L',120519=>'L',120520=>'L',120521=>'L',120522=>'L',120523=>'L',120524=>'L',120525=>'L',120526=>'L',120527=>'L',120528=>'L',120529=>'L',120530=>'L',120531=>'L',120532=>'L',120533=>'L',120534=>'L',120535=>'L',120536=>'L',120537=>'L',120538=>'L',120539=>'L',120540=>'L',120541=>'L',120542=>'L',120543=>'L',120544=>'L',120545=>'L',120546=>'L',120547=>'L',120548=>'L',120549=>'L',120550=>'L',120551=>'L',120552=>'L',120553=>'L',120554=>'L',120555=>'L',120556=>'L',120557=>'L',120558=>'L',120559=>'L',120560=>'L',120561=>'L',120562=>'L',120563=>'L',120564=>'L',120565=>'L',120566=>'L',120567=>'L',120568=>'L',120569=>'L',120570=>'L',120571=>'L',120572=>'L',120573=>'L',120574=>'L',120575=>'L',120576=>'L',120577=>'L',120578=>'L',120579=>'L',120580=>'L',120581=>'L',120582=>'L',120583=>'L',120584=>'L',120585=>'L',120586=>'L',120587=>'L',120588=>'L',120589=>'L',120590=>'L',120591=>'L',120592=>'L',120593=>'L',120594=>'L',120595=>'L',120596=>'L',120597=>'L',120598=>'L',120599=>'L',120600=>'L',120601=>'L',120602=>'L',120603=>'L',120604=>'L',120605=>'L',120606=>'L',120607=>'L',120608=>'L',120609=>'L',120610=>'L',120611=>'L',120612=>'L',120613=>'L',120614=>'L',120615=>'L',120616=>'L',120617=>'L',120618=>'L',120619=>'L',120620=>'L',120621=>'L',120622=>'L',120623=>'L',120624=>'L',120625=>'L',120626=>'L',120627=>'L',120628=>'L',120629=>'L',120630=>'L',120631=>'L',120632=>'L',120633=>'L',120634=>'L',120635=>'L',120636=>'L',120637=>'L',120638=>'L',120639=>'L',120640=>'L',120641=>'L',120642=>'L',120643=>'L',120644=>'L',120645=>'L',120646=>'L',120647=>'L',120648=>'L',120649=>'L',120650=>'L',120651=>'L',120652=>'L',120653=>'L',120654=>'L',120655=>'L',120656=>'L',120657=>'L',120658=>'L',120659=>'L',120660=>'L',120661=>'L',120662=>'L',120663=>'L',120664=>'L',120665=>'L',120666=>'L',120667=>'L',120668=>'L',120669=>'L',120670=>'L',120671=>'L',120672=>'L',120673=>'L',120674=>'L',120675=>'L',120676=>'L',120677=>'L',120678=>'L',120679=>'L',120680=>'L',120681=>'L',120682=>'L',120683=>'L',120684=>'L',120685=>'L',120686=>'L',120687=>'L',120688=>'L',120689=>'L',120690=>'L',120691=>'L',120692=>'L',120693=>'L',120694=>'L',120695=>'L',120696=>'L',120697=>'L',120698=>'L',120699=>'L',120700=>'L',120701=>'L',120702=>'L',120703=>'L',120704=>'L',120705=>'L',120706=>'L',120707=>'L',120708=>'L',120709=>'L',120710=>'L',120711=>'L',120712=>'L',120713=>'L',120714=>'L',120715=>'L',120716=>'L',120717=>'L',120718=>'L',120719=>'L',120720=>'L',120721=>'L',120722=>'L',120723=>'L',120724=>'L',120725=>'L',120726=>'L',120727=>'L',120728=>'L',120729=>'L',120730=>'L',120731=>'L',120732=>'L',120733=>'L',120734=>'L',120735=>'L',120736=>'L',120737=>'L',120738=>'L',120739=>'L',120740=>'L',120741=>'L',120742=>'L',120743=>'L',120744=>'L',120745=>'L',120746=>'L',120747=>'L',120748=>'L',120749=>'L',120750=>'L',120751=>'L',120752=>'L',120753=>'L',120754=>'L',120755=>'L',120756=>'L',120757=>'L',120758=>'L',120759=>'L',120760=>'L',120761=>'L',120762=>'L',120763=>'L',120764=>'L',120765=>'L',120766=>'L',120767=>'L',120768=>'L',120769=>'L',120770=>'L',120771=>'L',120772=>'L',120773=>'L',120774=>'L',120775=>'L',120776=>'L',120777=>'L',120778=>'L',120779=>'L',120782=>'EN',120783=>'EN',120784=>'EN',120785=>'EN',120786=>'EN',120787=>'EN',120788=>'EN',120789=>'EN',120790=>'EN',120791=>'EN',120792=>'EN',120793=>'EN',120794=>'EN',120795=>'EN',120796=>'EN',120797=>'EN',120798=>'EN',120799=>'EN',120800=>'EN',120801=>'EN',120802=>'EN',120803=>'EN',120804=>'EN',120805=>'EN',120806=>'EN',120807=>'EN',120808=>'EN',120809=>'EN',120810=>'EN',120811=>'EN',120812=>'EN',120813=>'EN',120814=>'EN',120815=>'EN',120816=>'EN',120817=>'EN',120818=>'EN',120819=>'EN',120820=>'EN',120821=>'EN',120822=>'EN',120823=>'EN',120824=>'EN',120825=>'EN',120826=>'EN',120827=>'EN',120828=>'EN',120829=>'EN',120830=>'EN',120831=>'EN',131072=>'L',173782=>'L',194560=>'L',194561=>'L',194562=>'L',194563=>'L',194564=>'L',194565=>'L',194566=>'L',194567=>'L',194568=>'L',194569=>'L',194570=>'L',194571=>'L',194572=>'L',194573=>'L',194574=>'L',194575=>'L',194576=>'L',194577=>'L',194578=>'L',194579=>'L',194580=>'L',194581=>'L',194582=>'L',194583=>'L',194584=>'L',194585=>'L',194586=>'L',194587=>'L',194588=>'L',194589=>'L',194590=>'L',194591=>'L',194592=>'L',194593=>'L',194594=>'L',194595=>'L',194596=>'L',194597=>'L',194598=>'L',194599=>'L',194600=>'L',194601=>'L',194602=>'L',194603=>'L',194604=>'L',194605=>'L',194606=>'L',194607=>'L',194608=>'L',194609=>'L',194610=>'L',194611=>'L',194612=>'L',194613=>'L',194614=>'L',194615=>'L',194616=>'L',194617=>'L',194618=>'L',194619=>'L',194620=>'L',194621=>'L',194622=>'L',194623=>'L',194624=>'L',194625=>'L',194626=>'L',194627=>'L',194628=>'L',194629=>'L',194630=>'L',194631=>'L',194632=>'L',194633=>'L',194634=>'L',194635=>'L',194636=>'L',194637=>'L',194638=>'L',194639=>'L',194640=>'L',194641=>'L',194642=>'L',194643=>'L',194644=>'L',194645=>'L',194646=>'L',194647=>'L',194648=>'L',194649=>'L',194650=>'L',194651=>'L',194652=>'L',194653=>'L',194654=>'L',194655=>'L',194656=>'L',194657=>'L',194658=>'L',194659=>'L',194660=>'L',194661=>'L',194662=>'L',194663=>'L',194664=>'L',194665=>'L',194666=>'L',194667=>'L',194668=>'L',194669=>'L',194670=>'L',194671=>'L',194672=>'L',194673=>'L',194674=>'L',194675=>'L',194676=>'L',194677=>'L',194678=>'L',194679=>'L',194680=>'L',194681=>'L',194682=>'L',194683=>'L',194684=>'L',194685=>'L',194686=>'L',194687=>'L',194688=>'L',194689=>'L',194690=>'L',194691=>'L',194692=>'L',194693=>'L',194694=>'L',194695=>'L',194696=>'L',194697=>'L',194698=>'L',194699=>'L',194700=>'L',194701=>'L',194702=>'L',194703=>'L',194704=>'L',194705=>'L',194706=>'L',194707=>'L',194708=>'L',194709=>'L',194710=>'L',194711=>'L',194712=>'L',194713=>'L',194714=>'L',194715=>'L',194716=>'L',194717=>'L',194718=>'L',194719=>'L',194720=>'L',194721=>'L',194722=>'L',194723=>'L',194724=>'L',194725=>'L',194726=>'L',194727=>'L',194728=>'L',194729=>'L',194730=>'L',194731=>'L',194732=>'L',194733=>'L',194734=>'L',194735=>'L',194736=>'L',194737=>'L',194738=>'L',194739=>'L',194740=>'L',194741=>'L',194742=>'L',194743=>'L',194744=>'L',194745=>'L',194746=>'L',194747=>'L',194748=>'L',194749=>'L',194750=>'L',194751=>'L',194752=>'L',194753=>'L',194754=>'L',194755=>'L',194756=>'L',194757=>'L',194758=>'L',194759=>'L',194760=>'L',194761=>'L',194762=>'L',194763=>'L',194764=>'L',194765=>'L',194766=>'L',194767=>'L',194768=>'L',194769=>'L',194770=>'L',194771=>'L',194772=>'L',194773=>'L',194774=>'L',194775=>'L',194776=>'L',194777=>'L',194778=>'L',194779=>'L',194780=>'L',194781=>'L',194782=>'L',194783=>'L',194784=>'L',194785=>'L',194786=>'L',194787=>'L',194788=>'L',194789=>'L',194790=>'L',194791=>'L',194792=>'L',194793=>'L',194794=>'L',194795=>'L',194796=>'L',194797=>'L',194798=>'L',194799=>'L',194800=>'L',194801=>'L',194802=>'L',194803=>'L',194804=>'L',194805=>'L',194806=>'L',194807=>'L',194808=>'L',194809=>'L',194810=>'L',194811=>'L',194812=>'L',194813=>'L',194814=>'L',194815=>'L',194816=>'L',194817=>'L',194818=>'L',194819=>'L',194820=>'L',194821=>'L',194822=>'L',194823=>'L',194824=>'L',194825=>'L',194826=>'L',194827=>'L',194828=>'L',194829=>'L',194830=>'L',194831=>'L',194832=>'L',194833=>'L',194834=>'L',194835=>'L',194836=>'L',194837=>'L',194838=>'L',194839=>'L',194840=>'L',194841=>'L',194842=>'L',194843=>'L',194844=>'L',194845=>'L',194846=>'L',194847=>'L',194848=>'L',194849=>'L',194850=>'L',194851=>'L',194852=>'L',194853=>'L',194854=>'L',194855=>'L',194856=>'L',194857=>'L',194858=>'L',194859=>'L',194860=>'L',194861=>'L',194862=>'L',194863=>'L',194864=>'L',194865=>'L',194866=>'L',194867=>'L',194868=>'L',194869=>'L',194870=>'L',194871=>'L',194872=>'L',194873=>'L',194874=>'L',194875=>'L',194876=>'L',194877=>'L',194878=>'L',194879=>'L',194880=>'L',194881=>'L',194882=>'L',194883=>'L',194884=>'L',194885=>'L',194886=>'L',194887=>'L',194888=>'L',194889=>'L',194890=>'L',194891=>'L',194892=>'L',194893=>'L',194894=>'L',194895=>'L',194896=>'L',194897=>'L',194898=>'L',194899=>'L',194900=>'L',194901=>'L',194902=>'L',194903=>'L',194904=>'L',194905=>'L',194906=>'L',194907=>'L',194908=>'L',194909=>'L',194910=>'L',194911=>'L',194912=>'L',194913=>'L',194914=>'L',194915=>'L',194916=>'L',194917=>'L',194918=>'L',194919=>'L',194920=>'L',194921=>'L',194922=>'L',194923=>'L',194924=>'L',194925=>'L',194926=>'L',194927=>'L',194928=>'L',194929=>'L',194930=>'L',194931=>'L',194932=>'L',194933=>'L',194934=>'L',194935=>'L',194936=>'L',194937=>'L',194938=>'L',194939=>'L',194940=>'L',194941=>'L',194942=>'L',194943=>'L',194944=>'L',194945=>'L',194946=>'L',194947=>'L',194948=>'L',194949=>'L',194950=>'L',194951=>'L',194952=>'L',194953=>'L',194954=>'L',194955=>'L',194956=>'L',194957=>'L',194958=>'L',194959=>'L',194960=>'L',194961=>'L',194962=>'L',194963=>'L',194964=>'L',194965=>'L',194966=>'L',194967=>'L',194968=>'L',194969=>'L',194970=>'L',194971=>'L',194972=>'L',194973=>'L',194974=>'L',194975=>'L',194976=>'L',194977=>'L',194978=>'L',194979=>'L',194980=>'L',194981=>'L',194982=>'L',194983=>'L',194984=>'L',194985=>'L',194986=>'L',194987=>'L',194988=>'L',194989=>'L',194990=>'L',194991=>'L',194992=>'L',194993=>'L',194994=>'L',194995=>'L',194996=>'L',194997=>'L',194998=>'L',194999=>'L',195000=>'L',195001=>'L',195002=>'L',195003=>'L',195004=>'L',195005=>'L',195006=>'L',195007=>'L',195008=>'L',195009=>'L',195010=>'L',195011=>'L',195012=>'L',195013=>'L',195014=>'L',195015=>'L',195016=>'L',195017=>'L',195018=>'L',195019=>'L',195020=>'L',195021=>'L',195022=>'L',195023=>'L',195024=>'L',195025=>'L',195026=>'L',195027=>'L',195028=>'L',195029=>'L',195030=>'L',195031=>'L',195032=>'L',195033=>'L',195034=>'L',195035=>'L',195036=>'L',195037=>'L',195038=>'L',195039=>'L',195040=>'L',195041=>'L',195042=>'L',195043=>'L',195044=>'L',195045=>'L',195046=>'L',195047=>'L',195048=>'L',195049=>'L',195050=>'L',195051=>'L',195052=>'L',195053=>'L',195054=>'L',195055=>'L',195056=>'L',195057=>'L',195058=>'L',195059=>'L',195060=>'L',195061=>'L',195062=>'L',195063=>'L',195064=>'L',195065=>'L',195066=>'L',195067=>'L',195068=>'L',195069=>'L',195070=>'L',195071=>'L',195072=>'L',195073=>'L',195074=>'L',195075=>'L',195076=>'L',195077=>'L',195078=>'L',195079=>'L',195080=>'L',195081=>'L',195082=>'L',195083=>'L',195084=>'L',195085=>'L',195086=>'L',195087=>'L',195088=>'L',195089=>'L',195090=>'L',195091=>'L',195092=>'L',195093=>'L',195094=>'L',195095=>'L',195096=>'L',195097=>'L',195098=>'L',195099=>'L',195100=>'L',195101=>'L',917505=>'BN',917536=>'BN',917537=>'BN',917538=>'BN',917539=>'BN',917540=>'BN',917541=>'BN',917542=>'BN',917543=>'BN',917544=>'BN',917545=>'BN',917546=>'BN',917547=>'BN',917548=>'BN',917549=>'BN',917550=>'BN',917551=>'BN',917552=>'BN',917553=>'BN',917554=>'BN',917555=>'BN',917556=>'BN',917557=>'BN',917558=>'BN',917559=>'BN',917560=>'BN',917561=>'BN',917562=>'BN',917563=>'BN',917564=>'BN',917565=>'BN',917566=>'BN',917567=>'BN',917568=>'BN',917569=>'BN',917570=>'BN',917571=>'BN',917572=>'BN',917573=>'BN',917574=>'BN',917575=>'BN',917576=>'BN',917577=>'BN',917578=>'BN',917579=>'BN',917580=>'BN',917581=>'BN',917582=>'BN',917583=>'BN',917584=>'BN',917585=>'BN',917586=>'BN',917587=>'BN',917588=>'BN',917589=>'BN',917590=>'BN',917591=>'BN',917592=>'BN',917593=>'BN',917594=>'BN',917595=>'BN',917596=>'BN',917597=>'BN',917598=>'BN',917599=>'BN',917600=>'BN',917601=>'BN',917602=>'BN',917603=>'BN',917604=>'BN',917605=>'BN',917606=>'BN',917607=>'BN',917608=>'BN',917609=>'BN',917610=>'BN',917611=>'BN',917612=>'BN',917613=>'BN',917614=>'BN',917615=>'BN',917616=>'BN',917617=>'BN',917618=>'BN',917619=>'BN',917620=>'BN',917621=>'BN',917622=>'BN',917623=>'BN',917624=>'BN',917625=>'BN',917626=>'BN',917627=>'BN',917628=>'BN',917629=>'BN',917630=>'BN',917631=>'BN',917760=>'NSM',917761=>'NSM',917762=>'NSM',917763=>'NSM',917764=>'NSM',917765=>'NSM',917766=>'NSM',917767=>'NSM',917768=>'NSM',917769=>'NSM',917770=>'NSM',917771=>'NSM',917772=>'NSM',917773=>'NSM',917774=>'NSM',917775=>'NSM',917776=>'NSM',917777=>'NSM',917778=>'NSM',917779=>'NSM',917780=>'NSM',917781=>'NSM',917782=>'NSM',917783=>'NSM',917784=>'NSM',917785=>'NSM',917786=>'NSM',917787=>'NSM',917788=>'NSM',917789=>'NSM',917790=>'NSM',917791=>'NSM',917792=>'NSM',917793=>'NSM',917794=>'NSM',917795=>'NSM',917796=>'NSM',917797=>'NSM',917798=>'NSM',917799=>'NSM',917800=>'NSM',917801=>'NSM',917802=>'NSM',917803=>'NSM',917804=>'NSM',917805=>'NSM',917806=>'NSM',917807=>'NSM',917808=>'NSM',917809=>'NSM',917810=>'NSM',917811=>'NSM',917812=>'NSM',917813=>'NSM',917814=>'NSM',917815=>'NSM',917816=>'NSM',917817=>'NSM',917818=>'NSM',917819=>'NSM',917820=>'NSM',917821=>'NSM',917822=>'NSM',917823=>'NSM',917824=>'NSM',917825=>'NSM',917826=>'NSM',917827=>'NSM',917828=>'NSM',917829=>'NSM',917830=>'NSM',917831=>'NSM',917832=>'NSM',917833=>'NSM',917834=>'NSM',917835=>'NSM',917836=>'NSM',917837=>'NSM',917838=>'NSM',917839=>'NSM',917840=>'NSM',917841=>'NSM',917842=>'NSM',917843=>'NSM',917844=>'NSM',917845=>'NSM',917846=>'NSM',917847=>'NSM',917848=>'NSM',917849=>'NSM',917850=>'NSM',917851=>'NSM',917852=>'NSM',917853=>'NSM',917854=>'NSM',917855=>'NSM',917856=>'NSM',917857=>'NSM',917858=>'NSM',917859=>'NSM',917860=>'NSM',917861=>'NSM',917862=>'NSM',917863=>'NSM',917864=>'NSM',917865=>'NSM',917866=>'NSM',917867=>'NSM',917868=>'NSM',917869=>'NSM',917870=>'NSM',917871=>'NSM',917872=>'NSM',917873=>'NSM',917874=>'NSM',917875=>'NSM',917876=>'NSM',917877=>'NSM',917878=>'NSM',917879=>'NSM',917880=>'NSM',917881=>'NSM',917882=>'NSM',917883=>'NSM',917884=>'NSM',917885=>'NSM',917886=>'NSM',917887=>'NSM',917888=>'NSM',917889=>'NSM',917890=>'NSM',917891=>'NSM',917892=>'NSM',917893=>'NSM',917894=>'NSM',917895=>'NSM',917896=>'NSM',917897=>'NSM',917898=>'NSM',917899=>'NSM',917900=>'NSM',917901=>'NSM',917902=>'NSM',917903=>'NSM',917904=>'NSM',917905=>'NSM',917906=>'NSM',917907=>'NSM',917908=>'NSM',917909=>'NSM',917910=>'NSM',917911=>'NSM',917912=>'NSM',917913=>'NSM',917914=>'NSM',917915=>'NSM',917916=>'NSM',917917=>'NSM',917918=>'NSM',917919=>'NSM',917920=>'NSM',917921=>'NSM',917922=>'NSM',917923=>'NSM',917924=>'NSM',917925=>'NSM',917926=>'NSM',917927=>'NSM',917928=>'NSM',917929=>'NSM',917930=>'NSM',917931=>'NSM',917932=>'NSM',917933=>'NSM',917934=>'NSM',917935=>'NSM',917936=>'NSM',917937=>'NSM',917938=>'NSM',917939=>'NSM',917940=>'NSM',917941=>'NSM',917942=>'NSM',917943=>'NSM',917944=>'NSM',917945=>'NSM',917946=>'NSM',917947=>'NSM',917948=>'NSM',917949=>'NSM',917950=>'NSM',917951=>'NSM',917952=>'NSM',917953=>'NSM',917954=>'NSM',917955=>'NSM',917956=>'NSM',917957=>'NSM',917958=>'NSM',917959=>'NSM',917960=>'NSM',917961=>'NSM',917962=>'NSM',917963=>'NSM',917964=>'NSM',917965=>'NSM',917966=>'NSM',917967=>'NSM',917968=>'NSM',917969=>'NSM',917970=>'NSM',917971=>'NSM',917972=>'NSM',917973=>'NSM',917974=>'NSM',917975=>'NSM',917976=>'NSM',917977=>'NSM',917978=>'NSM',917979=>'NSM',917980=>'NSM',917981=>'NSM',917982=>'NSM',917983=>'NSM',917984=>'NSM',917985=>'NSM',917986=>'NSM',917987=>'NSM',917988=>'NSM',917989=>'NSM',917990=>'NSM',917991=>'NSM',917992=>'NSM',917993=>'NSM',917994=>'NSM',917995=>'NSM',917996=>'NSM',917997=>'NSM',917998=>'NSM',917999=>'NSM',983040=>'L',1048573=>'L',1048576=>'L',1114109=>'L');/** * Mirror unicode characters. For information on bidi mirroring, see UAX #9: Bidirectional Algorithm, at http://www.unicode.org/unicode/reports/tr9/ * @public */public $uni_mirror = array (0x0028=>0x0029,0x0029=>0x0028,0x003C=>0x003E,0x003E=>0x003C,0x005B=>0x005D,0x005D=>0x005B,0x007B=>0x007D,0x007D=>0x007B,0x00AB=>0x00BB,0x00BB=>0x00AB,0x0F3A=>0x0F3B,0x0F3B=>0x0F3A,0x0F3C=>0x0F3D,0x0F3D=>0x0F3C,0x169B=>0x169C,0x169C=>0x169B,0x2018=>0x2019,0x2019=>0x2018,0x201C=>0x201D,0x201D=>0x201C,0x2039=>0x203A,0x203A=>0x2039,0x2045=>0x2046,0x2046=>0x2045,0x207D=>0x207E,0x207E=>0x207D,0x208D=>0x208E,0x208E=>0x208D,0x2208=>0x220B,0x2209=>0x220C,0x220A=>0x220D,0x220B=>0x2208,0x220C=>0x2209,0x220D=>0x220A,0x2215=>0x29F5,0x223C=>0x223D,0x223D=>0x223C,0x2243=>0x22CD,0x2252=>0x2253,0x2253=>0x2252,0x2254=>0x2255,0x2255=>0x2254,0x2264=>0x2265,0x2265=>0x2264,0x2266=>0x2267,0x2267=>0x2266,0x2268=>0x2269,0x2269=>0x2268,0x226A=>0x226B,0x226B=>0x226A,0x226E=>0x226F,0x226F=>0x226E,0x2270=>0x2271,0x2271=>0x2270,0x2272=>0x2273,0x2273=>0x2272,0x2274=>0x2275,0x2275=>0x2274,0x2276=>0x2277,0x2277=>0x2276,0x2278=>0x2279,0x2279=>0x2278,0x227A=>0x227B,0x227B=>0x227A,0x227C=>0x227D,0x227D=>0x227C,0x227E=>0x227F,0x227F=>0x227E,0x2280=>0x2281,0x2281=>0x2280,0x2282=>0x2283,0x2283=>0x2282,0x2284=>0x2285,0x2285=>0x2284,0x2286=>0x2287,0x2287=>0x2286,0x2288=>0x2289,0x2289=>0x2288,0x228A=>0x228B,0x228B=>0x228A,0x228F=>0x2290,0x2290=>0x228F,0x2291=>0x2292,0x2292=>0x2291,0x2298=>0x29B8,0x22A2=>0x22A3,0x22A3=>0x22A2,0x22A6=>0x2ADE,0x22A8=>0x2AE4,0x22A9=>0x2AE3,0x22AB=>0x2AE5,0x22B0=>0x22B1,0x22B1=>0x22B0,0x22B2=>0x22B3,0x22B3=>0x22B2,0x22B4=>0x22B5,0x22B5=>0x22B4,0x22B6=>0x22B7,0x22B7=>0x22B6,0x22C9=>0x22CA,0x22CA=>0x22C9,0x22CB=>0x22CC,0x22CC=>0x22CB,0x22CD=>0x2243,0x22D0=>0x22D1,0x22D1=>0x22D0,0x22D6=>0x22D7,0x22D7=>0x22D6,0x22D8=>0x22D9,0x22D9=>0x22D8,0x22DA=>0x22DB,0x22DB=>0x22DA,0x22DC=>0x22DD,0x22DD=>0x22DC,0x22DE=>0x22DF,0x22DF=>0x22DE,0x22E0=>0x22E1,0x22E1=>0x22E0,0x22E2=>0x22E3,0x22E3=>0x22E2,0x22E4=>0x22E5,0x22E5=>0x22E4,0x22E6=>0x22E7,0x22E7=>0x22E6,0x22E8=>0x22E9,0x22E9=>0x22E8,0x22EA=>0x22EB,0x22EB=>0x22EA,0x22EC=>0x22ED,0x22ED=>0x22EC,0x22F0=>0x22F1,0x22F1=>0x22F0,0x22F2=>0x22FA,0x22F3=>0x22FB,0x22F4=>0x22FC,0x22F6=>0x22FD,0x22F7=>0x22FE,0x22FA=>0x22F2,0x22FB=>0x22F3,0x22FC=>0x22F4,0x22FD=>0x22F6,0x22FE=>0x22F7,0x2308=>0x2309,0x2309=>0x2308,0x230A=>0x230B,0x230B=>0x230A,0x2329=>0x232A,0x232A=>0x2329,0x2768=>0x2769,0x2769=>0x2768,0x276A=>0x276B,0x276B=>0x276A,0x276C=>0x276D,0x276D=>0x276C,0x276E=>0x276F,0x276F=>0x276E,0x2770=>0x2771,0x2771=>0x2770,0x2772=>0x2773,0x2773=>0x2772,0x2774=>0x2775,0x2775=>0x2774,0x27C3=>0x27C4,0x27C4=>0x27C3,0x27C5=>0x27C6,0x27C6=>0x27C5,0x27D5=>0x27D6,0x27D6=>0x27D5,0x27DD=>0x27DE,0x27DE=>0x27DD,0x27E2=>0x27E3,0x27E3=>0x27E2,0x27E4=>0x27E5,0x27E5=>0x27E4,0x27E6=>0x27E7,0x27E7=>0x27E6,0x27E8=>0x27E9,0x27E9=>0x27E8,0x27EA=>0x27EB,0x27EB=>0x27EA,0x2983=>0x2984,0x2984=>0x2983,0x2985=>0x2986,0x2986=>0x2985,0x2987=>0x2988,0x2988=>0x2987,0x2989=>0x298A,0x298A=>0x2989,0x298B=>0x298C,0x298C=>0x298B,0x298D=>0x2990,0x298E=>0x298F,0x298F=>0x298E,0x2990=>0x298D,0x2991=>0x2992,0x2992=>0x2991,0x2993=>0x2994,0x2994=>0x2993,0x2995=>0x2996,0x2996=>0x2995,0x2997=>0x2998,0x2998=>0x2997,0x29B8=>0x2298,0x29C0=>0x29C1,0x29C1=>0x29C0,0x29C4=>0x29C5,0x29C5=>0x29C4,0x29CF=>0x29D0,0x29D0=>0x29CF,0x29D1=>0x29D2,0x29D2=>0x29D1,0x29D4=>0x29D5,0x29D5=>0x29D4,0x29D8=>0x29D9,0x29D9=>0x29D8,0x29DA=>0x29DB,0x29DB=>0x29DA,0x29F5=>0x2215,0x29F8=>0x29F9,0x29F9=>0x29F8,0x29FC=>0x29FD,0x29FD=>0x29FC,0x2A2B=>0x2A2C,0x2A2C=>0x2A2B,0x2A2D=>0x2A2E,0x2A2E=>0x2A2D,0x2A34=>0x2A35,0x2A35=>0x2A34,0x2A3C=>0x2A3D,0x2A3D=>0x2A3C,0x2A64=>0x2A65,0x2A65=>0x2A64,0x2A79=>0x2A7A,0x2A7A=>0x2A79,0x2A7D=>0x2A7E,0x2A7E=>0x2A7D,0x2A7F=>0x2A80,0x2A80=>0x2A7F,0x2A81=>0x2A82,0x2A82=>0x2A81,0x2A83=>0x2A84,0x2A84=>0x2A83,0x2A8B=>0x2A8C,0x2A8C=>0x2A8B,0x2A91=>0x2A92,0x2A92=>0x2A91,0x2A93=>0x2A94,0x2A94=>0x2A93,0x2A95=>0x2A96,0x2A96=>0x2A95,0x2A97=>0x2A98,0x2A98=>0x2A97,0x2A99=>0x2A9A,0x2A9A=>0x2A99,0x2A9B=>0x2A9C,0x2A9C=>0x2A9B,0x2AA1=>0x2AA2,0x2AA2=>0x2AA1,0x2AA6=>0x2AA7,0x2AA7=>0x2AA6,0x2AA8=>0x2AA9,0x2AA9=>0x2AA8,0x2AAA=>0x2AAB,0x2AAB=>0x2AAA,0x2AAC=>0x2AAD,0x2AAD=>0x2AAC,0x2AAF=>0x2AB0,0x2AB0=>0x2AAF,0x2AB3=>0x2AB4,0x2AB4=>0x2AB3,0x2ABB=>0x2ABC,0x2ABC=>0x2ABB,0x2ABD=>0x2ABE,0x2ABE=>0x2ABD,0x2ABF=>0x2AC0,0x2AC0=>0x2ABF,0x2AC1=>0x2AC2,0x2AC2=>0x2AC1,0x2AC3=>0x2AC4,0x2AC4=>0x2AC3,0x2AC5=>0x2AC6,0x2AC6=>0x2AC5,0x2ACD=>0x2ACE,0x2ACE=>0x2ACD,0x2ACF=>0x2AD0,0x2AD0=>0x2ACF,0x2AD1=>0x2AD2,0x2AD2=>0x2AD1,0x2AD3=>0x2AD4,0x2AD4=>0x2AD3,0x2AD5=>0x2AD6,0x2AD6=>0x2AD5,0x2ADE=>0x22A6,0x2AE3=>0x22A9,0x2AE4=>0x22A8,0x2AE5=>0x22AB,0x2AEC=>0x2AED,0x2AED=>0x2AEC,0x2AF7=>0x2AF8,0x2AF8=>0x2AF7,0x2AF9=>0x2AFA,0x2AFA=>0x2AF9,0x2E02=>0x2E03,0x2E03=>0x2E02,0x2E04=>0x2E05,0x2E05=>0x2E04,0x2E09=>0x2E0A,0x2E0A=>0x2E09,0x2E0C=>0x2E0D,0x2E0D=>0x2E0C,0x2E1C=>0x2E1D,0x2E1D=>0x2E1C,0x3008=>0x3009,0x3009=>0x3008,0x300A=>0x300B,0x300B=>0x300A,0x300C=>0x300D,0x300D=>0x300C,0x300E=>0x300F,0x300F=>0x300E,0x3010=>0x3011,0x3011=>0x3010,0x3014=>0x3015,0x3015=>0x3014,0x3016=>0x3017,0x3017=>0x3016,0x3018=>0x3019,0x3019=>0x3018,0x301A=>0x301B,0x301B=>0x301A,0x301D=>0x301E,0x301E=>0x301D,0xFE59=>0xFE5A,0xFE5A=>0xFE59,0xFE5B=>0xFE5C,0xFE5C=>0xFE5B,0xFE5D=>0xFE5E,0xFE5E=>0xFE5D,0xFE64=>0xFE65,0xFE65=>0xFE64,0xFF08=>0xFF09,0xFF09=>0xFF08,0xFF1C=>0xFF1E,0xFF1E=>0xFF1C,0xFF3B=>0xFF3D,0xFF3D=>0xFF3B,0xFF5B=>0xFF5D,0xFF5D=>0xFF5B,0xFF5F=>0xFF60,0xFF60=>0xFF5F,0xFF62=>0xFF63,0xFF63=>0xFF62);/** * Arabic shape substitutions: char code => (isolated, final, initial, medial). * @public */public $uni_arabicsubst = array(1569=>array(65152),1570=>array(65153, 65154, 65153, 65154),1571=>array(65155, 65156, 65155, 65156),1572=>array(65157, 65158),1573=>array(65159, 65160, 65159, 65160),1574=>array(65161, 65162, 65163, 65164),1575=>array(65165, 65166, 65165, 65166),1576=>array(65167, 65168, 65169, 65170),1577=>array(65171, 65172),1578=>array(65173, 65174, 65175, 65176),1579=>array(65177, 65178, 65179, 65180),1580=>array(65181, 65182, 65183, 65184),1581=>array(65185, 65186, 65187, 65188),1582=>array(65189, 65190, 65191, 65192),1583=>array(65193, 65194, 65193, 65194),1584=>array(65195, 65196, 65195, 65196),1585=>array(65197, 65198, 65197, 65198),1586=>array(65199, 65200, 65199, 65200),1587=>array(65201, 65202, 65203, 65204),1588=>array(65205, 65206, 65207, 65208),1589=>array(65209, 65210, 65211, 65212),1590=>array(65213, 65214, 65215, 65216),1591=>array(65217, 65218, 65219, 65220),1592=>array(65221, 65222, 65223, 65224),1593=>array(65225, 65226, 65227, 65228),1594=>array(65229, 65230, 65231, 65232),1601=>array(65233, 65234, 65235, 65236),1602=>array(65237, 65238, 65239, 65240),1603=>array(65241, 65242, 65243, 65244),1604=>array(65245, 65246, 65247, 65248),1605=>array(65249, 65250, 65251, 65252),1606=>array(65253, 65254, 65255, 65256),1607=>array(65257, 65258, 65259, 65260),1608=>array(65261, 65262, 65261, 65262),1609=>array(65263, 65264, 64488, 64489),1610=>array(65265, 65266, 65267, 65268),1649=>array(64336, 64337),1655=>array(64477),1657=>array(64358, 64359, 64360, 64361),1658=>array(64350, 64351, 64352, 64353),1659=>array(64338, 64339, 64340, 64341),1662=>array(64342, 64343, 64344, 64345),1663=>array(64354, 64355, 64356, 64357),1664=>array(64346, 64347, 64348, 64349),1667=>array(64374, 64375, 64376, 64377),1668=>array(64370, 64371, 64372, 64373),1670=>array(64378, 64379, 64380, 64381),1671=>array(64382, 64383, 64384, 64385),1672=>array(64392, 64393),1676=>array(64388, 64389),1677=>array(64386, 64387),1678=>array(64390, 64391),1681=>array(64396, 64397),1688=>array(64394, 64395, 64394, 64395),1700=>array(64362, 64363, 64364, 64365),1702=>array(64366, 64367, 64368, 64369),1705=>array(64398, 64399, 64400, 64401),1709=>array(64467, 64468, 64469, 64470),1711=>array(64402, 64403, 64404, 64405),1713=>array(64410, 64411, 64412, 64413),1715=>array(64406, 64407, 64408, 64409),1722=>array(64414, 64415),1723=>array(64416, 64417, 64418, 64419),1726=>array(64426, 64427, 64428, 64429),1728=>array(64420, 64421),1729=>array(64422, 64423, 64424, 64425),1733=>array(64480, 64481),1734=>array(64473, 64474),1735=>array(64471, 64472),1736=>array(64475, 64476),1737=>array(64482, 64483),1739=>array(64478, 64479),1740=>array(64508, 64509, 64510, 64511),1744=>array(64484, 64485, 64486, 64487),1746=>array(64430, 64431),1747=>array(64432, 64433));/** * Arabic laa letter: (char code => isolated, final, initial, medial). * @public */public $uni_laa_array = array (1570 =>array(65269, 65270, 65269, 65270),1571 =>array(65271, 65272, 65271, 65272),1573 =>array(65273, 65274, 65273, 65274),1575 =>array(65275, 65276, 65275, 65276));/** * Array of character substitutions for sequences of two diacritics symbols. * Putting the combining mark and character in the same glyph allows us to avoid the two marks overlapping each other in an illegible manner. * second NSM char code => substitution char * @public */public $uni_diacritics = array (1612=>64606, # Shadda + Dammatan1613=>64607, # Shadda + Kasratan1614=>64608, # Shadda + Fatha1615=>64609, # Shadda + Damma1616=>64610  # Shadda + Kasra);/** * Array of character substitutions from UTF-8 Unicode to Latin1. * @public */public $uni_utf8tolatin = array (8364=>128, # Euro1338=>140,  # OE352=>138,  # Scaron376=>159,  # Ydieresis381=>142,  # Zcaron28226=>149, # bullet3710=>136,  # circumflex8224=>134, # dagger8225=>135, # daggerdbl8230=>133, # ellipsis8212=>151, # emdash8211=>150, # endash402=>131,  # florin8249=>139, # guilsinglleft8250=>155, # guilsinglright339=>156,  # oe8240=>137, # perthousand8222=>132, # quotedblbase8220=>147, # quotedblleft8221=>148, # quotedblright8216=>145, # quoteleft8217=>146, # quoteright8218=>130, # quotesinglbase353=>154,  # scaron732=>152,  # tilde8482=>153, # trademark382=>158   # zcaron2);} // --- END OF CLASS ---//============================================================+// END OF FILE//============================================================+
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple interface for creating OASIS OpenDocument files. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Load ZIP handler. */require_once './libraries/zip.lib.php';$GLOBALS['OpenDocumentNS'] = 'xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" '                . 'xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" '                . 'xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" '                . 'xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" '                . 'xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" ';/** * Minimalistic creator of OASIS OpenDocument * * @param string      desired MIME type * @param string      document content * * @return  string      OASIS OpenDocument data * * @access  public */function PMA_createOpenDocument($mime, $data){    $zipfile = new zipfile();    $zipfile -> addFile($mime, 'mimetype');    $zipfile -> addFile($data, 'content.xml');    $zipfile -> addFile('<?xml version="1.0" encoding="UTF-8"?'. '>'        . '<office:document-meta '            . 'xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" '            . 'xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" '            . 'office:version="1.0">'            . '<office:meta>'                . '<meta:generator>phpMyAdmin ' . PMA_VERSION . '</meta:generator>'                . '<meta:initial-creator>phpMyAdmin ' . PMA_VERSION . '</meta:initial-creator>'                . '<meta:creation-date>' . strftime('%Y-%m-%dT%H:%M:%S') . '</meta:creation-date>'            . '</office:meta>'        . '</office:document-meta>',        'meta.xml');    $zipfile -> addFile('<?xml version="1.0" encoding="UTF-8"?' . '>'        . '<office:document-styles '. $GLOBALS['OpenDocumentNS'] . 'office:version="1.0">'            . '<office:font-face-decls>'                . '<style:font-face style:name="Arial Unicode MS" svg:font-family="\'Arial Unicode MS\'" style:font-pitch="variable"/>'                . '<style:font-face style:name="DejaVu Sans1" svg:font-family="\'DejaVu Sans\'" style:font-pitch="variable"/>'                . '<style:font-face style:name="HG Mincho Light J" svg:font-family="\'HG Mincho Light J\'" style:font-pitch="variable"/>'                . '<style:font-face style:name="DejaVu Serif" svg:font-family="\'DejaVu Serif\'" style:font-family-generic="roman" style:font-pitch="variable"/>'                . '<style:font-face style:name="Thorndale" svg:font-family="Thorndale" style:font-family-generic="roman" style:font-pitch="variable"/>'                . '<style:font-face style:name="DejaVu Sans" svg:font-family="\'DejaVu Sans\'" style:font-family-generic="swiss" style:font-pitch="variable"/>'            . '</office:font-face-decls>'            . '<office:styles>'                . '<style:default-style style:family="paragraph">'                    . '<style:paragraph-properties fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="0.4925in" style:writing-mode="page"/>'                    . '<style:text-properties style:use-window-font-color="true" style:font-name="DejaVu Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:font-name-asian="DejaVu Sans1" style:font-size-asian="12pt" style:language-asian="none" style:country-asian="none" style:font-name-complex="DejaVu Sans1" style:font-size-complex="12pt" style:language-complex="none" style:country-complex="none" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>'                . '</style:default-style>'                . '<style:style style:name="Standard" style:family="paragraph" style:class="text"/>'                . '<style:style style:name="Text_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">'                    . '<style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0.0835in"/>'                . '</style:style>'                . '<style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_body" style:class="text">'                    . '<style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in" fo:keep-with-next="always"/>'                    . '<style:text-properties style:font-name="DejaVu Sans" fo:font-size="14pt" style:font-name-asian="DejaVu Sans1" style:font-size-asian="14pt" style:font-name-complex="DejaVu Sans1" style:font-size-complex="14pt"/>'                    . '</style:style>'                . '<style:style style:name="Heading_1" style:display-name="Heading 1" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_body" style:class="text" style:default-outline-level="1">'                    . '<style:text-properties style:font-name="Thorndale" fo:font-size="24pt" fo:font-weight="bold" style:font-name-asian="HG Mincho Light J" style:font-size-asian="24pt" style:font-weight-asian="bold" style:font-name-complex="Arial Unicode MS" style:font-size-complex="24pt" style:font-weight-complex="bold"/>'                . '</style:style>'                . '<style:style style:name="Heading_2" style:display-name="Heading 2" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_body" style:class="text" style:default-outline-level="2">'                    . '<style:text-properties style:font-name="DejaVu Serif" fo:font-size="18pt" fo:font-weight="bold" style:font-name-asian="DejaVu Sans1" style:font-size-asian="18pt" style:font-weight-asian="bold" style:font-name-complex="DejaVu Sans1" style:font-size-complex="18pt" style:font-weight-complex="bold"/>'                . '</style:style>'            . '</office:styles>'            . '<office:automatic-styles>'                . '<style:page-layout style:name="pm1">'                    . '<style:page-layout-properties fo:page-width="8.2673in" fo:page-height="11.6925in" style:num-format="1" style:print-orientation="portrait" fo:margin-top="1in" fo:margin-bottom="1in" fo:margin-left="1.25in" fo:margin-right="1.25in" style:writing-mode="lr-tb" style:footnote-max-height="0in">'                        . '<style:footnote-sep style:width="0.0071in" style:distance-before-sep="0.0398in" style:distance-after-sep="0.0398in" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>'                    . '</style:page-layout-properties>'                    . '<style:header-style/>'                    . '<style:footer-style/>'                . '</style:page-layout>'            . '</office:automatic-styles>'            . '<office:master-styles>'                . '<style:master-page style:name="Standard" style:page-layout-name="pm1"/>'            . '</office:master-styles>'        . '</office:document-styles>',        'styles.xml');    $zipfile -> addFile('<?xml version="1.0" encoding="UTF-8"?' . '>'        . '<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0">'        . '<manifest:file-entry manifest:media-type="' . $mime . '" manifest:full-path="/"/>'        . '<manifest:file-entry manifest:media-type="text/xml" manifest:full-path="content.xml"/>'        . '<manifest:file-entry manifest:media-type="text/xml" manifest:full-path="meta.xml"/>'        . '<manifest:file-entry manifest:media-type="text/xml" manifest:full-path="styles.xml"/>'        . '</manifest:manifest>',        'META-INF/manifest.xml');    return $zipfile -> file();}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Don't display the page heading * @ignore */define('PMA_DISPLAY_HEADING', 0);/** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';require_once './libraries/transformations.lib.php';$types = PMA_getAvailableMIMEtypes();?><h2><?php echo __('Available MIME types'); ?></h2><?phpforeach ($types['mimetype'] as $key => $mimetype) {    if (isset($types['empty_mimetype'][$mimetype])) {        echo '<i>' . $mimetype . '</i><br />';    } else {        echo $mimetype . '<br />';    }}?><br /><i>(<?php echo __('MIME types printed in italics do not have a separate transformation function'); ?>)</i><br /><br /><br /><h2><?php echo __('Available transformations'); ?></h2><table border="0" width="90%"><thead><tr>    <th><?php echo __('Browser transformation'); ?></th>    <th><?php echo _pgettext('for MIME transformation', 'Description'); ?></th></tr></thead><tbody><?php$odd_row = true;foreach ($types['transformation'] as $key => $transform) {    $desc = PMA_getTransformationDescription($types['transformation_file'][$key]);    ?>    <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">        <td><?php echo $transform; ?></td>        <td><?php echo $desc; ?></td>    </tr>    <?php    $odd_row = !$odd_row;}?></tbody></table><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$pma_table = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);/** * Runs common work */require './libraries/tbl_common.php';$url_query .= '&amp;goto=view_operations.php&amp;back=view_operations.php';$url_params['goto'] = $url_params['back'] = 'view_operations.php';/** * Gets tables informations */require './libraries/tbl_info.inc.php';$reread_info = false;/** * Updates if required */if (isset($_REQUEST['submitoptions'])) {    $_message = '';    $warning_messages = array();    if (isset($_REQUEST['new_name'])) {        if ($pma_table->rename($_REQUEST['new_name'], null, $is_view = true)) {            $_message .= $pma_table->getLastMessage();            $result = true;            $GLOBALS['table'] = $pma_table->getName();            $reread_info = true;            $reload = true;        } else {            $_message .= $pma_table->getLastError();            $result = false;        }    }}/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';if (isset($result)) {    // set to success by default, because result set could be empty    // (for example, a table rename)    $_type = 'success';    if (empty($_message)) {        $_message = $result ? __('Your SQL query has been executed successfully') : __('Error');        // $result should exist, regardless of $_message        $_type = $result ? 'success' : 'error';    }    if (! empty($warning_messages)) {        $_message = new PMA_Message;        $_message->addMessages($warning_messages);        $_message->isError(true);        unset($warning_messages);    }    PMA_showMessage($_message, $sql_query, $_type, $is_view = true);    unset($_message, $_type);}$url_params['goto'] = 'view_operations.php';$url_params['back'] = 'view_operations.php';/** * Displays the page */?><!-- Table operations --><div class="operations_half_width"><form method="post" action="view_operations.php"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><input type="hidden" name="reload" value="1" /><fieldset>    <legend><?php echo __('Operations'); ?></legend>    <table>    <!-- Change view name -->    <tr><td><?php echo __('Rename view to'); ?></td>        <td><input type="text" size="20" name="new_name" onfocus="this.select()"                value="<?php echo htmlspecialchars($GLOBALS['table']); ?>" />        </td>    </tr>    </table></fieldset><fieldset class="tblFooters">        <input type="submit" name="submitoptions" value="<?php echo __('Go'); ?>" /></fieldset></form></div><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common header for user preferences pages * * @package PhpMyAdmin */if (!defined('PHPMYADMIN')) {    exit;}// show server tabsrequire './libraries/server_links.inc.php';// build user preferences menu$form_param = filter_input(INPUT_GET, 'form');if (! isset($forms[$form_param])) {    $forms_keys = array_keys($forms);    $form_param = array_shift($forms_keys);}$tabs_icons = array(    'Features'    => 'b_tblops.png',    'Sql_queries' => 'b_sql.png',    'Left_frame'  => 'b_select.png',    'Main_frame'  => 'b_props.png',    'Import'      => 'b_import.png',    'Export'      => 'b_export.png');echo '<ul id="topmenu2">';echo PMA_generate_html_tab(    array(        'link' => 'prefs_manage.php',        'text' => __('Manage your settings')    )) . "\n";echo '<li>&nbsp; &nbsp;</li>' . "\n";$script_name = basename($GLOBALS['PMA_PHP_SELF']);foreach (array_keys($forms) as $formset) {    $tab = array(        'link' => 'prefs_forms.php',        'text' => PMA_lang('Form_' . $formset),        'icon' => $tabs_icons[$formset],        'active' => ($script_name == 'prefs_forms.php' && $formset == $form_param));    echo PMA_generate_html_tab($tab, array('form' => $formset)) . "\n";}echo '</ul><div class="clearfloat"></div>';// show "configuration saved" message and reload navigation frame if neededif (!empty($_GET['saved'])) {    $message = PMA_Message::rawSuccess(__('Configuration has been saved'));    $message->display();}/* debug code$arr = ConfigFile::getInstance()->getConfigArray();$arr2 = array();foreach ($arr as $k => $v) {    $arr2[] = "<b>$k</b> " . var_export($v, true);}$arr2 = implode(', ', $arr2);$arr2 .= '<br />Blacklist: ' . (empty($cfg['UserprefsDisallow'])        ? '<i>empty</i>'        : implode(', ', $cfg['UserprefsDisallow']));$msg = PMA_Message::notice('Settings: ' . $arr2);$msg->display();//*/// warn about using session storage for settings$cfgRelation = PMA_getRelationsParam();if (! $cfgRelation['userconfigwork']) {    $msg = __('Your preferences will be saved for current session only. Storing them permanently requires %sphpMyAdmin configuration storage%s.');    $msg = PMA_sanitize(sprintf($msg, '[a@./Documentation.html#linked-tables@_blank]', '[/a]'));    PMA_Message::notice($msg)->display();}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: */    /**     * @package     BLOBStreaming     */    /**     * Core library.     */    require_once './libraries/common.inc.php';    /*     * @var     string  contains media type of BLOB reference     */    $mediaType = isset($_REQUEST['media_type']) ? $_REQUEST['media_type'] : null;    /*     * @var     string  indicates whether media type is of custom type     */    $customType = isset($_REQUEST['custom_type']) ? $_REQUEST['custom_type'] : false;    /*     * @var     string  contains BLOB reference     */    $bsReference = isset($_REQUEST['bs_reference']) ? $_REQUEST['bs_reference'] : null;    // if media type and BS reference are specified    if (isset($mediaType) && isset($bsReference)) {        if (isset($customType) && $customType) {            $bs_file_path = 'bs_disp_as_mime_type.php' . PMA_generate_common_url(array('reference' => $bsReference, 'c_type' => $mediaType));        } else {            // Get the BLOB streaming URL            $bs_file_path = PMA_BS_getURL($bsReference);            if (empty($bs_file_path)) {                die(__('No blob streaming server configured!'));            }        }            ?><html>    <head>    </head>    <body>            <?php            // supported media types            switch ($mediaType)            {                // audio content                case 'audio/mpeg':                    ?><embed width=620 height=100 src="<?php echo htmlspecialchars($bs_file_path); ?>" autostart=true></embed><?php                    break;                // video content                case 'application/x-flash-video':                case 'video/mpeg':                    ?><embed width=620 height=460 src="<?php echo htmlspecialchars($bs_file_path); ?>" autostart=true></embed><?php                    break;                default:                    // do nothing            }            ?>    </body></html>            <?php    } // end if (isset($mediaType) && isset($bsReference))?>
<?php/** * @package Swekey *//** * Checks Swekey authentication. */function Swekey_auth_check(){    global $cfg;    $confFile = $cfg['Server']['auth_swekey_config'];    if (! isset($_SESSION['SWEKEY'])) {        $_SESSION['SWEKEY'] = array();    }    $_SESSION['SWEKEY']['ENABLED'] = (! empty($confFile) && file_exists($confFile));    // Load the swekey.conf file the first time    if ($_SESSION['SWEKEY']['ENABLED'] && empty($_SESSION['SWEKEY']['CONF_LOADED'])) {        $_SESSION['SWEKEY']['CONF_LOADED'] = true;        $_SESSION['SWEKEY']['VALID_SWEKEYS'] = array();        $valid_swekeys = explode("\n", @file_get_contents($confFile));        foreach ($valid_swekeys as $line) {            if (preg_match("/^[0-9A-F]{32}:.+$/", $line) != false) {                $items = explode(":", $line);                if (count($items) == 2)                    $_SESSION['SWEKEY']['VALID_SWEKEYS'][$items[0]] = trim($items[1]);            } elseif (preg_match("/^[A-Z_]+=.*$/", $line) != false) {                $items = explode("=", $line);                $_SESSION['SWEKEY']['CONF_'.trim($items[0])] = trim($items[1]);            }        }        // Set default values for settings        if (! isset($_SESSION['SWEKEY']['CONF_SERVER_CHECK']))            $_SESSION['SWEKEY']['CONF_SERVER_CHECK'] = "";        if (! isset($_SESSION['SWEKEY']['CONF_SERVER_RNDTOKEN']))            $_SESSION['SWEKEY']['CONF_SERVER_RNDTOKEN'] = "";        if (! isset($_SESSION['SWEKEY']['CONF_SERVER_STATUS']))             $_SESSION['SWEKEY']['CONF_SERVER_STATUS'] = "";        if (! isset($_SESSION['SWEKEY']['CONF_CA_FILE']))            $_SESSION['SWEKEY']['CONF_CA_FILE'] = "";        if (! isset($_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE']))            $_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE'] = true;        if (! isset($_SESSION['SWEKEY']['CONF_DEBUG']))               $_SESSION['SWEKEY']['CONF_DEBUG'] = false;     }    // check if a web key has been authenticated    if ($_SESSION['SWEKEY']['ENABLED']) {        if (empty($_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY']))           return false;    }    return true;}/** * Handle Swekey authentication error. */function Swekey_auth_error(){    if (! isset($_SESSION['SWEKEY']))        return null;    if (! $_SESSION['SWEKEY']['ENABLED'])        return null;    include_once './libraries/auth/swekey/authentication.inc.php';    ?>    <script>    function Swekey_GetValidKey()    {        var valids = "<?php            foreach ($_SESSION['SWEKEY']['VALID_SWEKEYS'] as $key => $value)                echo $key.',';        ?>";        var connected_keys = Swekey_ListKeyIds().split(",");         for (i in connected_keys)               if (connected_keys[i] != null && connected_keys[i].length == 32)                if (valids.indexOf(connected_keys[i]) >= 0)                   return connected_keys[i];        if (connected_keys.length > 0)               if (connected_keys[0].length == 32)                  return "unknown_key_" + connected_keys[0];        return "none";    }    var key = Swekey_GetValidKey();    function timedCheck()    {        if (key != Swekey_GetValidKey())        {            window.location.search = "?swekey_reset";        }        else            setTimeout("timedCheck()",1000);    }    setTimeout("timedCheck()",1000);    </script>     <?php    if (! empty($_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY']))        return null;    if (count($_SESSION['SWEKEY']['VALID_SWEKEYS']) == 0)        return sprintf(__('File %s does not contain any key id'), $GLOBALS['cfg']['Server']['auth_swekey_config']);    include_once "./libraries/auth/swekey/swekey.php";    Swekey_SetCheckServer($_SESSION['SWEKEY']['CONF_SERVER_CHECK']);    Swekey_SetRndTokenServer($_SESSION['SWEKEY']['CONF_SERVER_RNDTOKEN']);    Swekey_SetStatusServer($_SESSION['SWEKEY']['CONF_SERVER_STATUS']);    Swekey_EnableTokenCache($_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE']);    $caFile = $_SESSION['SWEKEY']['CONF_CA_FILE'];    if (empty($caFile)) {        $caFile = __FILE__;        $pos = strrpos($caFile, '/');        if ($pos === false)            $pos = strrpos($caFile, '\\'); // windows        $caFile = substr($caFile, 0, $pos + 1).'musbe-ca.crt';//        echo "\n<!-- $caFile -->\n";//        if (file_exists($caFile))//            echo "<!-- exists -->\n";    }    if (file_exists($caFile)) {        Swekey_SetCAFile($caFile);    } elseif (! empty($caFile) && (substr($_SESSION['SWEKEY']['CONF_SERVER_CHECK'], 0, 8) == "https://")) {        return "Internal Error: CA File $caFile not found";    }    $result = null;    $swekey_id = $_GET['swekey_id'];    $swekey_otp = $_GET['swekey_otp'];    if (isset($swekey_id)) {        unset($_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY']);        if (! isset($_SESSION['SWEKEY']['RND_TOKEN'])) {            unset($swekey_id);        } else {            if (strlen($swekey_id) == 32) {                $res = Swekey_CheckOtp($swekey_id, $_SESSION['SWEKEY']['RND_TOKEN'], $swekey_otp);                unset($_SESSION['SWEKEY']['RND_TOKEN']);                if (! $res) {                    $result = __('Hardware authentication failed') . ' (' . Swekey_GetLastError() . ')';                } else {                    $_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY'] = $swekey_id;                    $_SESSION['SWEKEY']['FORCE_USER'] = $_SESSION['SWEKEY']['VALID_SWEKEYS'][$swekey_id];                    return null;                }            } else {                $result = __('No valid authentication key plugged');                if ($_SESSION['SWEKEY']['CONF_DEBUG']) {                    $result .= "<br>" . htmlspecialchars($swekey_id);                }                unset($_SESSION['SWEKEY']['CONF_LOADED']); // reload the conf file            }        }    } else {        unset($_SESSION['SWEKEY']);    }    $_SESSION['SWEKEY']['RND_TOKEN'] = Swekey_GetFastRndToken();    if (strlen($_SESSION['SWEKEY']['RND_TOKEN']) != 64) {        $result = __('Hardware authentication failed') . ' (' . Swekey_GetLastError() . ')';        unset($_SESSION['SWEKEY']['CONF_LOADED']); // reload the conf file    }    if (! isset($swekey_id)) {        ?>        <script>    if (key.length != 32) {        window.location.search="?swekey_id=" + key + "&token=<?php echo $_SESSION[' PMA_token ']; ?>";    } else {        var url = "" + window.location;        if (url.indexOf("?") > 0)            url = url.substr(0, url.indexOf("?"));        Swekey_SetUnplugUrl(key, "pma_login", url + "?session_to_unset=<?php echo session_id();?>&token=<?php echo $_SESSION[' PMA_token ']; ?>");        var otp = Swekey_GetOtp(key, <?php echo '"'.$_SESSION['SWEKEY']['RND_TOKEN'].'"';?>);        window.location.search="?swekey_id=" + key + "&swekey_otp=" + otp + "&token=<?php echo $_SESSION[' PMA_token ']; ?>";    }        </script>        <?php        return __('Authenticating...');    }    return $result;}/** * Perform login using Swekey. */function Swekey_login($input_name, $input_go){    $swekeyErr = Swekey_auth_error();    if ($swekeyErr != null) {        PMA_Message::error($swekeyErr)->display();        if ($GLOBALS['error_handler']->hasDisplayErrors()) {            echo '<div>';            $GLOBALS['error_handler']->dispErrors();            echo '</div>';        }    }    if (isset($_SESSION['SWEKEY']) && $_SESSION['SWEKEY']['ENABLED']) {        echo '<script type="text/javascript">';        if (empty($_SESSION['SWEKEY']['FORCE_USER'])) {            echo 'var user = null;';        } else {           echo 'var user = "'.$_SESSION['SWEKEY']['FORCE_USER'].'";';        }        ?>            function open_swekey_site()            {                window.open("<?php echo PMA_linkURL('http://phpmyadmin.net/auth_key'); ?>");            }            var input_username = document.getElementById("<?php echo $input_name; ?>");            var input_go = document.getElementById("<?php echo $input_go; ?>");            var swekey_status = document.createElement('img');            swekey_status.setAttribute('onclick', 'open_swekey_site()');            swekey_status.setAttribute('style', 'width:8px; height:16px; border:0px; vspace:0px; hspace:0px; frameborder:no');            if (user == null)            {                swekey_status.setAttribute('src', 'http://artwork.swekey.com/unplugged-8x16.png');                //swekey_status.setAttribute('title', 'No swekey plugged');                input_go.disabled = true;            }            else            {                swekey_status.setAttribute('src', 'http://artwork.swekey.com/plugged-8x16.png');                //swekey_status.setAttribute('title', 'swekey plugged');                input_username.value = user;            }             input_username.readOnly = true;            if (input_username.nextSibling == null)                input_username.parentNode.appendChild(swekey_status);            else                input_username.parentNode.insertBefore(swekey_status, input_username.nextSibling);        <?php        echo '</script>';    }}if (!empty($_GET['session_to_unset'])) {    session_write_close();    session_id($_GET['session_to_unset']);    session_start();    $_SESSION = array();    session_write_close();    session_destroy();    exit;}if (isset($_GET['swekey_reset'])) {    unset($_SESSION['SWEKEY']);}?>
<?php//============================================================+// File name   : tcpdf_config.php// Begin       : 2004-06-11// Last Update : 2011-04-15//// Description : Configuration file for TCPDF.// Author      : Nicola Asuni - Tecnick.com LTD - Manor Coach House, Church Hill, Aldershot, Hants, GU12 4RQ, UK - www.tecnick.com - info@tecnick.com// License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)// -------------------------------------------------------------------// Copyright (C) 2004-2012  Nicola Asuni - Tecnick.com LTD//// This file is part of TCPDF software library.//// TCPDF is free software: you can redistribute it and/or modify it// under the terms of the GNU Lesser General Public License as// published by the Free Software Foundation, either version 3 of the// License, or (at your option) any later version.//// TCPDF is distributed in the hope that it will be useful, but// WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.// See the GNU Lesser General Public License for more details.//// You should have received a copy of the GNU Lesser General Public License// along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.//// See LICENSE.TXT file for more information.//============================================================+/** * Configuration file for TCPDF. * @author Nicola Asuni * @package com.tecnick.tcpdf * @version 4.9.005 * @since 2004-10-27 */// If you define the constant K_TCPDF_EXTERNAL_CONFIG, the following settings will be ignored.if (!defined('K_TCPDF_EXTERNAL_CONFIG')) {	// DOCUMENT_ROOT fix for IIS Webserver	if ((!isset($_SERVER['DOCUMENT_ROOT'])) OR (empty($_SERVER['DOCUMENT_ROOT']))) {		if(isset($_SERVER['SCRIPT_FILENAME'])) {			$_SERVER['DOCUMENT_ROOT'] = str_replace( '\\', '/', substr($_SERVER['SCRIPT_FILENAME'], 0, 0-strlen($_SERVER['PHP_SELF'])));		} elseif(isset($_SERVER['PATH_TRANSLATED'])) {			$_SERVER['DOCUMENT_ROOT'] = str_replace( '\\', '/', substr(str_replace('\\\\', '\\', $_SERVER['PATH_TRANSLATED']), 0, 0-strlen($_SERVER['PHP_SELF'])));		} else {			// define here your DOCUMENT_ROOT path if the previous fails (e.g. '/var/www')			$_SERVER['DOCUMENT_ROOT'] = '/';		}	}	// Automatic calculation for the following K_PATH_MAIN constant	$k_path_main = str_replace( '\\', '/', realpath(substr(dirname(__FILE__), 0, 0-strlen('config'))));	if (substr($k_path_main, -1) != '/') {		$k_path_main .= '/';	}	/**	 * Installation path (/var/www/tcpdf/).	 * By default it is automatically calculated but you can also set it as a fixed string to improve performances.	 */	define ('K_PATH_MAIN', $k_path_main);	// Automatic calculation for the following K_PATH_URL constant	$k_path_url = $k_path_main; // default value for console mode	if (isset($_SERVER['HTTP_HOST']) AND (!empty($_SERVER['HTTP_HOST']))) {		if(isset($_SERVER['HTTPS']) AND (!empty($_SERVER['HTTPS'])) AND strtolower($_SERVER['HTTPS'])!='off') {			$k_path_url = 'https://';		} else {			$k_path_url = 'http://';		}		$k_path_url .= $_SERVER['HTTP_HOST'];		$k_path_url .= str_replace( '\\', '/', substr(K_PATH_MAIN, (strlen($_SERVER['DOCUMENT_ROOT']) - 1)));	}	/**	 * URL path to tcpdf installation folder (http://localhost/tcpdf/).	 * By default it is automatically calculated but you can also set it as a fixed string to improve performances.	 */	define ('K_PATH_URL', $k_path_url);	/**	 * path for PDF fonts	 * use K_PATH_MAIN.'fonts/old/' for old non-UTF8 fonts	 */	define ('K_PATH_FONTS', K_PATH_MAIN.'fonts/');	/**	 * cache directory for temporary files (full path)	 */	define ('K_PATH_CACHE', K_PATH_MAIN.'cache/');	/**	 * cache directory for temporary files (url path)	 */	define ('K_PATH_URL_CACHE', K_PATH_URL.'cache/');	/**	 *images directory	 */	define ('K_PATH_IMAGES', K_PATH_MAIN.'images/');	/**	 * blank image	 */	define ('K_BLANK_IMAGE', K_PATH_IMAGES.'_blank.png');	/**	 * page format	 */	define ('PDF_PAGE_FORMAT', 'A4');	/**	 * page orientation (P=portrait, L=landscape)	 */	define ('PDF_PAGE_ORIENTATION', 'P');	/**	 * document creator	 */	define ('PDF_CREATOR', 'TCPDF');	/**	 * document author	 */	define ('PDF_AUTHOR', 'TCPDF');	/**	 * header title	 */	define ('PDF_HEADER_TITLE', 'TCPDF Example');	/**	 * header description string	 */	define ('PDF_HEADER_STRING', "by Nicola Asuni - Tecnick.com\nwww.tcpdf.org");	/**	 * image logo	 */	define ('PDF_HEADER_LOGO', 'tcpdf_logo.jpg');	/**	 * header logo image width [mm]	 */	define ('PDF_HEADER_LOGO_WIDTH', 30);	/**	 *  document unit of measure [pt=point, mm=millimeter, cm=centimeter, in=inch]	 */	define ('PDF_UNIT', 'mm');	/**	 * header margin	 */	define ('PDF_MARGIN_HEADER', 5);	/**	 * footer margin	 */	define ('PDF_MARGIN_FOOTER', 10);	/**	 * top margin	 */	define ('PDF_MARGIN_TOP', 27);	/**	 * bottom margin	 */	define ('PDF_MARGIN_BOTTOM', 25);	/**	 * left margin	 */	define ('PDF_MARGIN_LEFT', 15);	/**	 * right margin	 */	define ('PDF_MARGIN_RIGHT', 15);	/**	 * default main font name	 */	define ('PDF_FONT_NAME_MAIN', 'helvetica');	/**	 * default main font size	 */	define ('PDF_FONT_SIZE_MAIN', 10);	/**	 * default data font name	 */	define ('PDF_FONT_NAME_DATA', 'helvetica');	/**	 * default data font size	 */	define ('PDF_FONT_SIZE_DATA', 8);	/**	 * default monospaced font name	 */	define ('PDF_FONT_MONOSPACED', 'courier');	/**	 * ratio used to adjust the conversion of pixels to user units	 */	define ('PDF_IMAGE_SCALE_RATIO', 1.25);	/**	 * magnification factor for titles	 */	define('HEAD_MAGNIFICATION', 1.1);	/**	 * height of cell repect font height	 */	define('K_CELL_HEIGHT_RATIO', 1.25);	/**	 * title magnification respect main font size	 */	define('K_TITLE_MAGNIFICATION', 1.3);	/**	 * reduction factor for small font	 */	define('K_SMALL_RATIO', 2/3);	/**	 * set to true to enable the special procedure used to avoid the overlappind of symbols on Thai language	 */	define('K_THAI_TOPCHARS', true);	/**	 * if true allows to call TCPDF methods using HTML syntax	 * IMPORTANT: For security reason, disable this feature if you are printing user HTML content.	 */	define('K_TCPDF_CALLS_IN_HTML', true);}//============================================================+// END OF FILE//============================================================+
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * navigation css file from theme Original * * @package PhpMyAdmin-theme * @subpackage pmahomme */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : $_COOKIE['pma_fontsize']); ?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    background:         url(./themes/pmahomme/img/left_nav_bg.png) repeat-y right 0% #f3f3f3;    border-right:       1px solid #aaa;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    margin:             0;    padding:            0;}a img {    border: 0;}a:link,a:visited,a:active {    text-decoration:    none;    color:              #0000FF;}ul {    margin:0;}form {    margin:             0;    padding:            0;    display:            inline;}select#select_server,select#lightm_db {    width:              100%;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}/******************************************************************************//* classes */.navi_dbName {    font-weight:    bold;    color:          <?php echo $GLOBALS['cfg']['NaviDatabaseNameColor']; ?>;}/******************************************************************************//* specific elements */div#pmalogo {    <?php //better echo $GLOBALS['cfg']['logoBGC']; ?>}div#recentTableList {    text-align: center;    margin: 20px 10px 0px 10px;}div#recentTableList select {    width: 100%;}div#pmalogo,div#leftframelinks,div#databaseList {    text-align:         center;    margin:             5px 10px 0px 10px;}ul#databaseList {    margin: 0.8em 0px;    padding-bottom:     0.5em;    padding-<?php echo $left; ?>:     0.3em;    font-style: italic;}ul#databaseList span {    padding: 5px;}ul#databaseList a {    color: #333;    background: url(./themes/pmahomme/img/database.png) no-repeat 0 5px transparent;    display: block;    text-indent: 0;    padding: 5px 5px 5px 25px;    font-style: normal;}div#navidbpageselector {    margin: 0.1em;    text-align: center;}div#navidbpageselector a,div#navidbpageselector select{    color: #333;    margin: 0.2em;}ul#databaseList ul {    margin: 0;    padding: 0;}ul#databaseList li {    list-style: none;    text-indent: 20px;    margin: 0;    padding: 0;}ul#databaseList a:hover {    background-color: #e4e4e4;}ul#databaseList li.selected a {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}div#leftframelinks .icon {    padding:            0;    margin:             0;}div#reloadlink a img,div#leftframelinks a img.icon {    margin:        0.3em;    margin-top:    0.7em;    border:        0;}div#leftframelinks a:hover img {}/* serverlist */#body_leftFrame #list_server {    list-style-image: url(<?php echo $GLOBALS['cfg']['ThemePath']; ?>/original/img/s_host.png);    list-style-position: inside;    list-style-type: none;    margin: 0;    padding: 0;}#body_leftFrame #list_server li {    margin: 0;    padding: 0;}div#left_tableList {margin:10px 10px 0 10px;}div#left_tableList ul {    list-style-type:    none;    list-style-position: outside;    margin:             0;    padding:            0;}div#left_tableList ul ul {    font-size:          100%;}div#left_tableList a {    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    none;}div#left_tableList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    underline;}div#left_tableList li {    margin:             0;    padding:            2px 0;    white-space:        nowrap;}#newtable {    margin-top: 15px !important;}#newtable a {    display: block;    padding: 1px;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>    border: 1px solid #aaa;    -moz-border-radius: 20px;    -webkit-border-radius: 20px;    border-radius: 20px;}#newtable li:hover {    background: transparent !important;}#newtable a:hover {    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>}#newtable li a:hover {    text-decoration: none;}select{    -moz-border-radius:2px 2px 2px 2px;    -moz-box-shadow:0 1px 2px #DDDDDD;    border:1px solid #aaa;    color:#333333;    padding:3px;    background:url(./themes/pmahomme/img/input_bg.gif);}<?php if ($GLOBALS['cfg']['BrowseMarkerColor']) { ?>/* marked items */div#left_tableList > ul li.marked > a,div#left_tableList > ul li.marked {    background: #e4e4e4;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['LeftPointerEnable']) { ?>div#left_tableList > ul li:hover > a,div#left_tableList > ul li:hover {    background:         #e4e4e4;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}<?php } ?>div#left_tableList img {    padding:            0;    vertical-align:     middle;}div#left_tableList ul ul {    margin-<?php echo $left; ?>:        0;    padding-<?php echo $left; ?>:       0.1em;    border-<?php echo $left; ?>:        0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding-bottom:     0.1em;    border-bottom:      0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}/* for the servers list in navi panel */#serverinfo .item {    white-space:        nowrap;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}#serverinfo a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}#reloadlink {    clear: both;    float: <?php echo $right; ?>;    display: block;    padding: 1em;}#NavFilter {    display: none;}#clear_fast_filter {    background: white;    color: black;    cursor: pointer;    padding: 0;    margin: 0;    position: relative;    right: 3ex;}#fast_filter {    width: 85%;    padding: 0.1em;}#fast_filter.gray {    color: gray;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * phpMyAdmin sample configuration, you can use it as base for * manual configuration. For easier setup you can use setup/ * * All directives are explained in Documentation.html and on phpMyAdmin * wiki <http://wiki.phpmyadmin.net>. * * @package PhpMyAdmin *//* * This is needed for cookie based authentication to encrypt password in * cookie */$cfg['blowfish_secret'] = 'a8b7c6d'; /* YOU MUST FILL IN THIS FOR COOKIE AUTH! *//* * Servers configuration */$i = 0;/* * First server */$i++;/* Authentication type */$cfg['Servers'][$i]['auth_type'] = 'cookie';/* Server parameters */$cfg['Servers'][$i]['host'] = 'localhost';$cfg['Servers'][$i]['connect_type'] = 'tcp';$cfg['Servers'][$i]['compress'] = false;/* Select mysql if your server does not have mysqli */$cfg['Servers'][$i]['extension'] = 'mysqli';$cfg['Servers'][$i]['AllowNoPassword'] = false;/* * phpMyAdmin configuration storage settings. *//* User used to manipulate with storage */// $cfg['Servers'][$i]['controlhost'] = '';// $cfg['Servers'][$i]['controluser'] = 'pma';// $cfg['Servers'][$i]['controlpass'] = 'pmapass';/* Storage database and tables */// $cfg['Servers'][$i]['pmadb'] = 'phpmyadmin';// $cfg['Servers'][$i]['bookmarktable'] = 'pma_bookmark';// $cfg['Servers'][$i]['relation'] = 'pma_relation';// $cfg['Servers'][$i]['table_info'] = 'pma_table_info';// $cfg['Servers'][$i]['table_coords'] = 'pma_table_coords';// $cfg['Servers'][$i]['pdf_pages'] = 'pma_pdf_pages';// $cfg['Servers'][$i]['column_info'] = 'pma_column_info';// $cfg['Servers'][$i]['history'] = 'pma_history';// $cfg['Servers'][$i]['table_uiprefs'] = 'pma_table_uiprefs';// $cfg['Servers'][$i]['tracking'] = 'pma_tracking';// $cfg['Servers'][$i]['designer_coords'] = 'pma_designer_coords';// $cfg['Servers'][$i]['userconfig'] = 'pma_userconfig';// $cfg['Servers'][$i]['recent'] = 'pma_recent';// $cfg['Servers'][$i]['table_uiprefs'] = 'pma_table_uiprefs';/* Contrib / Swekey authentication */// $cfg['Servers'][$i]['auth_swekey_config'] = '/etc/swekey-pma.conf';/* * End of servers configuration *//* * Directories for saving/loading files from server */$cfg['UploadDir'] = '';$cfg['SaveDir'] = '';/** * Defines whether a user should be displayed a "show all (records)" * button in browse mode or not. * default = false *///$cfg['ShowAll'] = true;/** * Number of rows displayed when browsing a result set. If the result * set contains more rows, "Previous" and "Next". * default = 30 *///$cfg['MaxRows'] = 50;/** * Use graphically less intense menu tabs * default = false *///$cfg['LightTabs'] = true;/** * disallow editing of binary fields * valid values are: *   false  allow editing *   'blob' allow editing except for BLOB fields *   'all'  disallow editing * default = blob *///$cfg['ProtectBinary'] = 'false';/** * Default language to use, if not browser-defined or user-defined * (you find all languages in the locale folder) * uncomment the desired line: * default = 'en' *///$cfg['DefaultLang'] = 'en';//$cfg['DefaultLang'] = 'de';/** * default display direction (horizontal|vertical|horizontalflipped) *///$cfg['DefaultDisplay'] = 'vertical';/** * How many columns should be used for table display of a database? * (a value larger than 1 results in some information being hidden) * default = 1 *///$cfg['PropertiesNumColumns'] = 2;/** * Set to true if you want DB-based query history.If false, this utilizes * JS-routines to display query history (lost by window close) * * This requires configuration storage enabled, see above. * default = false *///$cfg['QueryHistoryDB'] = true;/** * When using DB-based query history, how many entries should be kept? * * default = 25 *///$cfg['QueryHistoryMax'] = 100;/* * You can find more configuration options in Documentation.html * or here: http://wiki.phpmyadmin.net/pma/Config */?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_image_png__inline_info(){    return array(        'info' => __('Displays a clickable thumbnail. The options are the maximum width and height in pixels. The original aspect ratio is preserved.'),        );}/** * */function PMA_transformation_image_png__inline($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    if (PMA_IS_GD2) {        $transform_options = array ('string' => '<a href="transformation_wrapper.php' . $options['wrapper_link'] . '" target="_blank"><img src="transformation_wrapper.php' . $options['wrapper_link'] . '&amp;resize=png&amp;newWidth=' . (isset($options[0]) ? $options[0] : '100') . '&amp;newHeight=' . (isset($options[1]) ? $options[1] : 100) . '" alt="[__BUFFER__]" border="0" /></a>');    } else {        $transform_options = array ('string' => '<img src="transformation_wrapper.php' . $options['wrapper_link'] . '" alt="[__BUFFER__]" width="320" height="240" />');    }    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/db_common.inc.php';require './libraries/StorageEngine.class.php';$active_page = 'db_operations.php';require_once './libraries/db_common.inc.php';$url_query .= '&amp;goto=schema_edit.php';require_once './libraries/db_info.inc.php';/** * Includ settings for relation stuff * get all variables needed for exporting relational schema * in $cfgRelation */require_once './libraries/relation.lib.php';$cfgRelation = PMA_getRelationsParam();/** * Now in ./libraries/relation.lib.php we check for all tables * that we need, but if we don't find them we are quiet about it * so people can't work without relational variables. * This page is absolutely useless if you didn't set up your tables * correctly, so it is a good place to see which tables we can and * complain ;-) */if (! $cfgRelation['relwork']) {    echo sprintf(__('<b>%s</b> table not found or not set in %s'), 'relation', 'config.inc.php') . '<br />' . "\n"         . PMA_showDocu('relation') . "\n";    include_once './libraries/footer.inc.php';}if (! $cfgRelation['displaywork']) {    echo sprintf(__('<b>%s</b> table not found or not set in %s'), 'table_info', 'config.inc.php') . '<br />' . "\n"         . PMA_showDocu('table_info') . "\n";    include_once './libraries/footer.inc.php';}if (! isset($cfgRelation['table_coords'])) {    echo sprintf(__('<b>%s</b> table not found or not set in %s'), 'table_coords', 'config.inc.php') . '<br />' . "\n"         . PMA_showDocu('table_coords') . "\n";    include_once './libraries/footer.inc.php';}if (! isset($cfgRelation['pdf_pages'])) {    echo sprintf(__('<b>%s</b> table not found or not set in %s'), 'pdf_page', 'config.inc.php') . '<br />' . "\n"         . PMA_showDocu('pdf_pages') . "\n";    include_once './libraries/footer.inc.php';}if ($cfgRelation['pdfwork']) {   /**    * User object created for presenting the HTML options    * so, user can interact with it and perform export of relations schema    */    include_once './libraries/schema/User_Schema.class.php';    $user_schema = new PMA_User_Schema();    /**     * This function will process the user defined pages     * and tables which will be exported as Relational schema     * you can set the table positions on the paper via scratchboard     * for table positions, put the x,y co-ordinates     *     * @param string $do It tells what the Schema is supposed to do     *                  create and select a page, generate schema etc     */    if (isset($_REQUEST['do'])) {        $user_schema->setAction($_REQUEST['do']);        $user_schema->processUserChoice();    }    /**     * Show some possibility to select a page for the export of relation schema     * Lists all pages created before and can select and edit from them     */    $user_schema->selectPage();    /**     * Create a new page where relations will be drawn     */    $user_schema->showCreatePageDialog($db);    /**     * After selection of page or creating a page     * It will show you the list of tables     * A dashboard will also be shown where you can position the tables     */    $user_schema->showTableDashBoard();    if (isset($_REQUEST['do'])    && ($_REQUEST['do'] == 'edcoord'       || ($_REQUEST['do']== 'selectpage' && isset($user_schema->chosenPage) && $user_schema->chosenPage != 0)       || ($_REQUEST['do'] == 'createpage' && isset($user_schema->chosenPage) && $user_schema->chosenPage != 0))) {      /**       * show Export schema generation options       */       $user_schema->displaySchemaGenerationOptions();        if ((isset($showwysiwyg) && $showwysiwyg == '1')) {            ?>            <script type="text/javascript">            //<![CDATA[            ToggleDragDrop('pdflayout');            //]]>            </script>            <?php      }    } // end if} // end if ($cfgRelation['pdfwork'])/** * Displays the footer */echo "\n";require_once './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run http authentication. * NOTE: Requires PHP loaded as a Apache module. * * @package PhpMyAdmin-Auth-HTTP *//** * Displays authentication form * * @global  string    the font face to use in case of failure * @global  string    the default font size to use in case of failure * @global  string    the big font size to use in case of failure * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth(){    /* Perform logout to custom URL */    if (!empty($_REQUEST['old_usr']) && !empty($GLOBALS['cfg']['Server']['LogoutURL'])) {        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);        exit;    }    if (empty($GLOBALS['cfg']['Server']['auth_http_realm'])) {        if (empty($GLOBALS['cfg']['Server']['verbose'])) {            $server_message = $GLOBALS['cfg']['Server']['host'];        } else {            $server_message = $GLOBALS['cfg']['Server']['verbose'];        }        $realm_message = 'phpMyAdmin ' . $server_message;    } else {        $realm_message = $GLOBALS['cfg']['Server']['auth_http_realm'];    }    // remove non US-ASCII to respect RFC2616    $realm_message = preg_replace('/[^\x20-\x7e]/i', '', $realm_message);    header('WWW-Authenticate: Basic realm="' . $realm_message .  '"');    header('HTTP/1.0 401 Unauthorized');    if (php_sapi_name() !== 'cgi-fcgi') {        header('status: 401 Unauthorized');    }    // Defines the charset to be used    header('Content-Type: text/html; charset=utf-8');    /* HTML header */    $page_title = __('Access denied');    include './libraries/header_meta_style.inc.php';    ?></head><body>    <?php    if (file_exists(CUSTOM_HEADER_FILE)) {        include CUSTOM_HEADER_FILE;    }    ?><br /><br /><center>    <h1><?php echo sprintf(__('Welcome to %s'), ' phpMyAdmin'); ?></h1></center><br />    <?php    PMA_Message::error(__('Wrong username/password. Access denied.'))->display();    if (file_exists(CUSTOM_FOOTER_FILE)) {        include CUSTOM_FOOTER_FILE;    }    ?></body></html>    <?php    exit();} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * @global  string    the username if register_globals is on * @global  string    the password if register_globals is on * @global  array     the array of server variables if register_globals is *                    off * @global  array     the array of environment variables if register_globals *                    is off * @global  string    the username for the ? server * @global  string    the password for the ? server * @global  string    the username for the WebSite Professional server * @global  string    the password for the WebSite Professional server * @global  string    the username of the user who logs out * * @return  boolean   whether we get authentication settings or not * * @access  public */function PMA_auth_check(){    global $PHP_AUTH_USER, $PHP_AUTH_PW;    global $old_usr;    // Grabs the $PHP_AUTH_USER variable whatever are the values of the    // 'register_globals' and the 'variables_order' directives    if (empty($PHP_AUTH_USER)) {        if (PMA_getenv('PHP_AUTH_USER')) {            $PHP_AUTH_USER = PMA_getenv('PHP_AUTH_USER');        } elseif (PMA_getenv('REMOTE_USER')) {            // CGI, might be encoded, see below            $PHP_AUTH_USER = PMA_getenv('REMOTE_USER');        } elseif (PMA_getenv('REDIRECT_REMOTE_USER')) {            // CGI, might be encoded, see below            $PHP_AUTH_USER = PMA_getenv('REDIRECT_REMOTE_USER');        } elseif (PMA_getenv('AUTH_USER')) {            // WebSite Professional            $PHP_AUTH_USER = PMA_getenv('AUTH_USER');        } elseif (PMA_getenv('HTTP_AUTHORIZATION')) {            // IIS, might be encoded, see below            $PHP_AUTH_USER = PMA_getenv('HTTP_AUTHORIZATION');        } elseif (PMA_getenv('Authorization')) {            // FastCGI, might be encoded, see below            $PHP_AUTH_USER = PMA_getenv('Authorization');        }    }    // Grabs the $PHP_AUTH_PW variable whatever are the values of the    // 'register_globals' and the 'variables_order' directives    if (empty($PHP_AUTH_PW)) {        if (PMA_getenv('PHP_AUTH_PW')) {            $PHP_AUTH_PW = PMA_getenv('PHP_AUTH_PW');        } elseif (PMA_getenv('REMOTE_PASSWORD')) {            // Apache/CGI            $PHP_AUTH_PW = PMA_getenv('REMOTE_PASSWORD');        } elseif (PMA_getenv('AUTH_PASSWORD')) {            // WebSite Professional            $PHP_AUTH_PW = PMA_getenv('AUTH_PASSWORD');        }    }    // Decode possibly encoded information (used by IIS/CGI/FastCGI)    // (do not use explode() because a user might have a colon in his password    if (strcmp(substr($PHP_AUTH_USER, 0, 6), 'Basic ') == 0) {        $usr_pass = base64_decode(substr($PHP_AUTH_USER, 6));        if (! empty($usr_pass)) {            $colon = strpos($usr_pass, ':');            if ($colon) {                $PHP_AUTH_USER = substr($usr_pass, 0, $colon);                $PHP_AUTH_PW = substr($usr_pass, $colon + 1);            }            unset($colon);        }        unset($usr_pass);    }    // User logged out -> ensure the new username is not the same    if (!empty($old_usr)        && (isset($PHP_AUTH_USER) && $old_usr == $PHP_AUTH_USER)) {        $PHP_AUTH_USER = '';        // -> delete user's choices that were stored in session        session_destroy();    }    // Returns whether we get authentication settings or not    if (empty($PHP_AUTH_USER)) {        return false;    } else {        return true;    }} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @global  array     the valid servers settings * @global  integer   the id of the current server * @global  array     the current server settings * @global  string    the current username * @global  string    the current password * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    global $cfg, $server;    global $PHP_AUTH_USER, $PHP_AUTH_PW;    // Ensures valid authentication mode, 'only_db', bookmark database and    // table names and relation table name are used    if ($cfg['Server']['user'] != $PHP_AUTH_USER) {        $servers_cnt = count($cfg['Servers']);        for ($i = 1; $i <= $servers_cnt; $i++) {            if (isset($cfg['Servers'][$i])                && ($cfg['Servers'][$i]['host'] == $cfg['Server']['host'] && $cfg['Servers'][$i]['user'] == $PHP_AUTH_USER)) {                $server        = $i;                $cfg['Server'] = $cfg['Servers'][$i];                break;            }        } // end for    } // end if    $cfg['Server']['user']     = $PHP_AUTH_USER;    $cfg['Server']['password'] = $PHP_AUTH_PW;    // Avoid showing the password in phpinfo()'s output    unset($GLOBALS['PHP_AUTH_PW']);    unset($_SERVER['PHP_AUTH_PW']);    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth_fails(){    $error = PMA_DBI_getError();    if ($error && $GLOBALS['errno'] != 1045) {        PMA_fatalError($error);    } else {        PMA_auth();        return true;    }} // end of the 'PMA_auth_fails()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Triggers management. * * @package PhpMyAdmin */require_once './db_triggers.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once 'Export_Relation_Schema.class.php';require_once './libraries/PDF.class.php';/** * Extends the "TCPDF" class and helps * in developing the structure of PDF Schema Export * * @access public * @see TCPDF */class PMA_Schema_PDF extends PMA_PDF{    /**     * Defines properties     */    var $_xMin;    var $_yMin;    var $leftMargin = 10;    var $topMargin = 10;    var $scale;    var $PMA_links;    var $Outlines = array();    var $def_outlines;    var $widths;    private $_ff = PMA_PDF_FONT;    /**     * Sets the value for margins     *     * @param float $c_margin margin     *     * @return nothing     */    public function setCMargin($c_margin)    {        $this->cMargin = $c_margin;    }    /**     * Sets the scaling factor, defines minimum coordinates and margins     *     * @param float $scale      The scaling factor     * @param float $xMin       The minimum X coordinate     * @param float $yMin       The minimum Y coordinate     * @param float $leftMargin The left margin     * @param float $topMargin  The top margin     *     * @access public     *     * @return nothing     */    function PMA_PDF_setScale($scale = 1, $xMin = 0, $yMin = 0, $leftMargin = -1, $topMargin = -1)    {        $this->scale = $scale;        $this->_xMin = $xMin;        $this->_yMin = $yMin;        if ($this->leftMargin != -1) {            $this->leftMargin = $leftMargin;        }        if ($this->topMargin != -1) {            $this->topMargin = $topMargin;        }    }    /**     * Outputs a scaled cell     *     * @param float   $w      The cell width     * @param float   $h      The cell height     * @param string  $txt    The text to output     * @param mixed   $border Whether to add borders or not     * @param integer $ln     Where to put the cursor once the output is done     * @param string  $align  Align mode     * @param integer $fill   Whether to fill the cell with a color or not     * @param string  $link   Link     *     * @access public     *     * @return nothing     *     * @see TCPDF::Cell()     */    function PMA_PDF_cellScale($w, $h = 0, $txt = '', $border = 0, $ln = 0, $align = '', $fill = 0, $link = '')    {        $h = $h / $this->scale;        $w = $w / $this->scale;        $this->Cell($w, $h, $txt, $border, $ln, $align, $fill, $link);    }    /**     * Draws a scaled line     *     * @param float $x1 The horizontal position of the starting point     * @param float $y1 The vertical position of the starting point     * @param float $x2 The horizontal position of the ending point     * @param float $y2 The vertical position of the ending point     *     * @access public     *     * @return nothing     *     * @see TCPDF::Line()     */    function PMA_PDF_lineScale($x1, $y1, $x2, $y2)    {        $x1 = ($x1 - $this->_xMin) / $this->scale + $this->leftMargin;        $y1 = ($y1 - $this->_yMin) / $this->scale + $this->topMargin;        $x2 = ($x2 - $this->_xMin) / $this->scale + $this->leftMargin;        $y2 = ($y2 - $this->_yMin) / $this->scale + $this->topMargin;        $this->Line($x1, $y1, $x2, $y2);    }    /**     * Sets x and y scaled positions     *     * @param float $x The x position     * @param float $y The y position     *     * @access public     *     * @return nothing     *     * @see TCPDF::SetXY()     */    function PMA_PDF_setXyScale($x, $y)    {        $x = ($x - $this->_xMin) / $this->scale + $this->leftMargin;        $y = ($y - $this->_yMin) / $this->scale + $this->topMargin;        $this->SetXY($x, $y);    }    /**     * Sets the X scaled positions     *     * @param float $x The x position     *     * @access public     *     * @return nothing     *     * @see TCPDF::SetX()     */    function PMA_PDF_setXScale($x)    {        $x = ($x - $this->_xMin) / $this->scale + $this->leftMargin;        $this->SetX($x);    }    /**     * Sets the scaled font size     *     * @param float $size The font size (in points)     *     * @access public     *     * @return nothing     *     * @see TCPDF::SetFontSize()     */    function PMA_PDF_setFontSizeScale($size)    {        // Set font size in points        $size = $size / $this->scale;        $this->SetFontSize($size);    }    /**     * Sets the scaled line width     *     * @param float $width The line width     *     * @access public     *     * @return nothing     *     * @see TCPDF::SetLineWidth()     */    function PMA_PDF_setLineWidthScale($width)    {        $width = $width / $this->scale;        $this->SetLineWidth($width);    }    /**     * This method is used to render the page header.     *     * @return nothing     *     * @see TCPDF::Header()     */    function Header()    {        // We only show this if we find something in the new pdf_pages table        // This function must be named "Header" to work with the TCPDF library        global $cfgRelation, $db, $pdf_page_number, $with_doc;        if ($with_doc) {            $test_query = 'SELECT * FROM '                . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['pdf_pages'])                . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                . ' AND page_nr = \'' . $pdf_page_number . '\'';            $test_rs = PMA_query_as_controluser($test_query);            $pages = @PMA_DBI_fetch_assoc($test_rs);            $this->SetFont($this->_ff, 'B', 14);            $this->Cell(0, 6, ucfirst($pages['page_descr']), 'B', 1, 'C');            $this->SetFont($this->_ff, '');            $this->Ln();        }    }    /**     * This function must be named "Footer" to work with the TCPDF library     *     * @return nothing     *     * @see PMA_PDF::Footer()     */    function Footer()    {        global $with_doc;        if ($with_doc) {            parent::Footer();        }    }    /**     * Sets widths     *     * @param array $w array of widths     *     * @return nothing     */    function SetWidths($w)    {        // column widths        $this->widths = $w;    }    function Row($data, $links)    {        // line height        $nb = 0;        $data_cnt = count($data);        for ($i = 0;$i < $data_cnt;$i++) {            $nb = max($nb, $this->NbLines($this->widths[$i], $data[$i]));        }        $il = $this->FontSize;        $h = ($il + 1) * $nb;        // page break if necessary        $this->CheckPageBreak($h);        // draw the cells        $data_cnt = count($data);        for ($i = 0;$i < $data_cnt;$i++) {            $w = $this->widths[$i];            // save current position            $x = $this->GetX();            $y = $this->GetY();            // draw the border            $this->Rect($x, $y, $w, $h);            if (isset($links[$i])) {                $this->Link($x, $y, $w, $h, $links[$i]);            }            // print text            $this->MultiCell($w, $il + 1, $data[$i], 0, 'L');            // go to right side            $this->SetXY($x + $w, $y);        }        // go to line        $this->Ln($h);    }    /**     * Compute number of lines used by a multicell of width w     *     * @param int    $w   width     * @param string $txt text     *     * @return int     */    function NbLines($w, $txt)    {        $cw = &$this->CurrentFont['cw'];        if ($w == 0) {            $w = $this->w - $this->rMargin - $this->x;        }        $wmax = ($w-2 * $this->cMargin) * 1000 / $this->FontSize;        $s = str_replace("\r", '', $txt);        $nb = strlen($s);        if ($nb > 0 and $s[$nb-1] == "\n") {            $nb--;        }        $sep = -1;        $i = 0;        $j = 0;        $l = 0;        $nl = 1;        while ($i < $nb) {            $c = $s[$i];            if ($c == "\n") {                $i++;                $sep = -1;                $j = $i;                $l = 0;                $nl++;                continue;            }            if ($c == ' ') {                $sep = $i;            }            $l += isset($cw[ord($c)])?$cw[ord($c)]:0 ;            if ($l > $wmax) {                if ($sep == -1) {                    if ($i == $j) {                        $i++;                    }                } else {                    $i = $sep + 1;                }                $sep = -1;                $j = $i;                $l = 0;                $nl++;            } else {                $i++;            }        }        return $nl;    }}/** * Table preferences/statistics * * This class preserves the table co-ordinates,fields * and helps in drawing/generating the Tables in PDF document. * * @name Table_Stats * @see PMA_Schema_PDF */class Table_Stats{    /**     * Defines properties     */    private $_tableName;    private $_showInfo = false;    public $nb_fiels;    public $width = 0;    public $height;    public $fields = array();    public $heightCell = 6;    public $x, $y;    public $primary = array();    private $_ff = PMA_PDF_FONT;    /**     * The "Table_Stats" constructor     *     * @param string  $tableName      The table name     * @param integer $fontSize       The font size     * @param integer $pageNumber     The current page number (from the     *                                $cfg['Servers'][$i]['table_coords'] table)     * @param integer &$sameWideWidth The max. with among tables     * @param boolean $showKeys       Whether to display keys or not     * @param boolean $showInfo       Whether to display table position or not     *     * @global object    The current PDF document     * @global array     The relations settings     * @global string    The current db name     *     * @return nothing     *     * @see PMA_Schema_PDF, Table_Stats::Table_Stats_setWidth,     *     Table_Stats::Table_Stats_setHeight     */    function __construct($tableName, $fontSize, $pageNumber, &$sameWideWidth, $showKeys = false, $showInfo = false)    {        global $pdf, $cfgRelation, $db;        $this->_tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $pdf->Error(sprintf(__('The %s table doesn\'t exist!'), $tableName));        }        // load fields        //check to see if it will load all fields or only the foreign keys        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->_tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $this->_showInfo = $showInfo;        $this->_setHeight();        /*         * setWidth must me after setHeight, because title         * can include table height which changes table width         */        $this->_setWidth($fontSize);        if ($sameWideWidth < $this->width) {            $sameWideWidth = $this->width;        }        $sql = 'SELECT x, y FROM '             . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'             . PMA_backquote($cfgRelation['table_coords'])             . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''             . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''             . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $pdf->Error(                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        /*         * displayfield         */        $this->displayfield = PMA_getDisplayField($db, $tableName);        /*         * index         */        $result = PMA_DBI_query(            'SHOW INDEX FROM ' . PMA_backquote($tableName) . ';',            null, PMA_DBI_QUERY_STORE        );        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }    }    /**     * Returns title of the current table,     * title can have the dimensions of the table     *     * @return string     */    private function _getTitle()    {        return ($this->_showInfo ? sprintf('%.0f', $this->width) . 'x' . sprintf('%.0f', $this->height) : '') . ' ' . $this->_tableName;    }    /**     * Sets the width of the table     *     * @param integer $fontSize The font size     *     * @global object    The current PDF document     *     * @access private     *     * @return nothing     *     * @see PMA_Schema_PDF     */    private function _setWidth($fontSize)    {        global $pdf;        foreach ($this->fields as $field) {            $this->width = max($this->width, $pdf->GetStringWidth($field));        }        $this->width += $pdf->GetStringWidth('      ');        $pdf->SetFont($this->_ff, 'B', $fontSize);        /*         * it is unknown what value must be added, because         * table title is affected by the tabe width value         */        while ($this->width < $pdf->GetStringWidth($this->_getTitle())) {            $this->width += 5;        }        $pdf->SetFont($this->_ff, '', $fontSize);    }    /**     * Sets the height of the table     *     * @return nothing     *     * @access private     */    private function _setHeight()    {        $this->height = (count($this->fields) + 1) * $this->heightCell;    }    /**     * Do draw the table     *     * @param integer $fontSize The font size     * @param boolean $withDoc     * @param boolean $setColor Whether to display color     *     * @global object The current PDF document     *     * @access public     *     * @return nothing     *     * @see PMA_Schema_PDF     */    public function tableDraw($fontSize, $withDoc, $setColor = 0)    {        global $pdf, $withDoc;        $pdf->PMA_PDF_setXyScale($this->x, $this->y);        $pdf->SetFont($this->_ff, 'B', $fontSize);        if ($setColor) {            $pdf->SetTextColor(200);            $pdf->SetFillColor(0, 0, 128);        }        if ($withDoc) {            $pdf->SetLink($pdf->PMA_links['RT'][$this->_tableName]['-'], -1);        } else {            $pdf->PMA_links['doc'][$this->_tableName]['-'] = '';        }        $pdf->PMA_PDF_cellScale(            $this->width,            $this->heightCell,            $this->_getTitle(),            1,            1,            'C',            $setColor,            $pdf->PMA_links['doc'][$this->_tableName]['-']        );        $pdf->PMA_PDF_setXScale($this->x);        $pdf->SetFont($this->_ff, '', $fontSize);        $pdf->SetTextColor(0);        $pdf->SetFillColor(255);        foreach ($this->fields as $field) {            if ($setColor) {                if (in_array($field, $this->primary)) {                    $pdf->SetFillColor(215, 121, 123);                }                if ($field == $this->displayfield) {                    $pdf->SetFillColor(142, 159, 224);                }            }            if ($withDoc) {                $pdf->SetLink($pdf->PMA_links['RT'][$this->_tableName][$field], -1);            } else {                $pdf->PMA_links['doc'][$this->_tableName][$field] = '';            }            $pdf->PMA_PDF_cellScale(                $this->width,                $this->heightCell,                ' ' . $field,                1,                1,                'L',                $setColor,                $pdf->PMA_links['doc'][$this->_tableName][$field]            );            $pdf->PMA_PDF_setXScale($this->x);            $pdf->SetFillColor(255);        }    }}/** * Relation preferences/statistics * * This class fetches the table master and foreign fields positions * and helps in generating the Table references and then connects * master table's master field to foreign table's foreign key * in PDF document. * * @name Relation_Stats * @see PMA_Schema_PDF::SetDrawColor, PMA_Schema_PDF::PMA_PDF_setLineWidthScale, * PMA_Schema_PDF::PMA_PDF_lineScale */class Relation_Stats{    /**     * Defines properties     */    public $xSrc, $ySrc;    public $srcDir;    public $destDir;    public $xDest, $yDest;    public $wTick = 5;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @return nothing     *     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        /*        * [0] is x-left        * [1] is x-right        * [2] is y        */        $src_left   = $src_pos[0] - $this->wTick;        $src_right  = $src_pos[1] + $this->wTick;        $dest_left  = $dest_pos[0] - $this->wTick;        $dest_right = $dest_pos[1] + $this->wTick;        $d1 = abs($src_left - $dest_left);        $d2 = abs($src_right - $dest_left);        $d3 = abs($src_left - $dest_right);        $d4 = abs($src_right - $dest_right);        $d  = min($d1, $d2, $d3, $d4);        if ($d == $d1) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d2) {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d3) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        } else {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        }        $this->ySrc   = $src_pos[2];        $this->yDest = $dest_pos[2];    }    /**     * Gets arrows coordinates     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Arrows coordinates     *     * @access private     */    private function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // x_left, x_right, y        return array($table->x, $table->x + + $table->width, $table->y + ($pos + 1.5) * $table->heightCell);    }    /**     * draws relation links and arrows shows foreign key relations     *     * @param boolean $changeColor Whether to use one color per relation or not     * @param integer $i           The id of the link to draw     *     * @global object    The current PDF document     *     * @access public     *     * @return nothing     *     * @see PMA_Schema_PDF     */    public function relationDraw($changeColor, $i)    {        global $pdf;        if ($changeColor) {            $d = $i % 6;            $j = ($i - $d) / 6;            $j = $j % 4;            $j++;            $case = array(                array(1, 0, 0),                array(0, 1, 0),                array(0, 0, 1),                array(1, 1, 0),                array(1, 0, 1),                array(0, 1, 1)            );            list ($a, $b, $c) = $case[$d];            $e = (1 - ($j - 1) / 6);            $pdf->SetDrawColor($a * 255 * $e, $b * 255 * $e, $c * 255 * $e);        } else {            $pdf->SetDrawColor(0);        }        $pdf->PMA_PDF_setLineWidthScale(0.2);        $pdf->PMA_PDF_lineScale(            $this->xSrc,            $this->ySrc,            $this->xSrc + $this->srcDir * $this->wTick,            $this->ySrc        );        $pdf->PMA_PDF_lineScale(            $this->xDest + $this->destDir * $this->wTick,            $this->yDest,            $this->xDest,            $this->yDest        );        $pdf->PMA_PDF_setLineWidthScale(0.1);        $pdf->PMA_PDF_lineScale(            $this->xSrc + $this->srcDir * $this->wTick,            $this->ySrc,            $this->xDest + $this->destDir * $this->wTick,            $this->yDest        );        /*         * Draws arrows ->         */        $root2 = 2 * sqrt(2);        $pdf->PMA_PDF_lineScale(            $this->xSrc + $this->srcDir * $this->wTick * 0.75,            $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc + $this->wTick / $root2        );        $pdf->PMA_PDF_lineScale(            $this->xSrc + $this->srcDir * $this->wTick * 0.75,            $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc - $this->wTick / $root2        );        $pdf->PMA_PDF_lineScale(            $this->xDest + $this->destDir * $this->wTick / 2,            $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest + $this->wTick / $root2        );        $pdf->PMA_PDF_lineScale(            $this->xDest + $this->destDir * $this->wTick / 2,            $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest - $this->wTick / $root2        );        $pdf->SetDrawColor(0);    }}/** * Pdf Relation Schema Class * * Purpose of this class is to generate the PDF Document. PDF is widely * used format for documenting text,fonts,images and 3d vector graphics. * * This class inherits Export_Relation_Schema class has common functionality added * to this class * * @name Pdf_Relation_Schema */class PMA_Pdf_Relation_Schema extends PMA_Export_Relation_Schema{    /**     * Defines properties     */    private $_ff = PMA_PDF_FONT;    private $_xMax = 0;    private $_yMax = 0;    private $scale;    private $_xMin = 100000;    private $_yMin = 100000;    private $topMargin = 10;    private $bottomMargin = 10;    private $leftMargin = 10;    private $rightMargin = 10;    private $_tablewidth;    /**     * The "PMA_Pdf_Relation_Schema" constructor     *     * @global object   The current PDF Schema document     * @global string   The current db name     * @global array    The relations settings     * @access private     * @see PMA_Schema_PDF     */    function __construct()    {        global $pdf, $db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowGrid(isset($_POST['show_grid']));        $this->setShowColor(isset($_POST['show_color']));        $this->setShowKeys(isset($_POST['show_keys']));        $this->setTableDimension(isset($_POST['show_table_dimension']));        $this->setAllTableSameWidth(isset($_POST['all_table_same_wide']));        $this->setWithDataDictionary($_POST['with_doc']);        $this->setOrientation($_POST['orientation']);        $this->setPaper($_POST['paper']);        $this->setExportType($_POST['export_type']);         // Initializes a new document        $pdf = new PMA_Schema_PDF($this->orientation, 'mm', $this->paper);        $pdf->SetTitle(            sprintf(                __('Schema of the %s database - Page %s'),                $GLOBALS['db'],                $this->pageNumber            )        );        $pdf->setCMargin(0);        $pdf->Open();        $pdf->SetAutoPageBreak('auto');        $alltables = $this->getAllTables($db, $this->pageNumber);        if ($this->withDoc) {            $pdf->SetAutoPageBreak('auto', 15);            $pdf->setCMargin(1);            $this->dataDictionaryDoc($alltables);            $pdf->SetAutoPageBreak('auto');            $pdf->setCMargin(0);        }        $pdf->Addpage();        if ($this->withDoc) {            $pdf->SetLink($pdf->PMA_links['RT']['-'], -1);            $pdf->Bookmark(__('Relational schema'));            $pdf->SetAlias('{00}', $pdf->PageNo());            $this->topMargin = 28;            $this->bottomMargin = 28;        }        /* snip */        foreach ($alltables as $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats(                    $table, $this->_ff,                    $this->pageNumber,                    $this->_tablewidth,                    $this->showKeys,                    $this->tableDimension                );            }            if ($this->sameWide) {                $this->tables[$table]->width = $this->_tablewidth;            }            $this->_setMinMax($this->tables[$table]);        }        // Defines the scale factor        $this->scale = ceil(            max(                ($this->_xMax - $this->_xMin) / ($pdf->getPageWidth() - $this->rightMargin - $this->leftMargin),                ($this->_yMax - $this->_yMin) / ($pdf->getPageHeight() - $this->topMargin - $this->bottomMargin)            ) * 100        ) / 100;        $pdf->PMA_PDF_setScale(            $this->scale,            $this->_xMin,            $this->_yMin,            $this->leftMargin,            $this->topMargin        );        // Builds and save the PDF document        $pdf->PMA_PDF_setLineWidthScale(0.1);        if ($this->showGrid) {            $pdf->SetFontSize(10);            $this->_strokeGrid();        }        $pdf->PMA_PDF_setFontSizeScale(14);        // previous logic was checking master tables and foreign tables        // but I think that looping on every table of the pdf page as a master        // and finding its foreigns is OK (then we can support innodb)        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    // put the foreign table on the schema only if selected                    // by the user                    // (do not use array_search() because we would have to                    // to do a === false and this is not PHP3 compatible)                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table,                            $master_field,                            $rel['foreign_table'],                            $rel['foreign_field'],                            $this->tableDimension                        );                    }                } // end while            } // end if        } // end while        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $this->_drawTables($this->showColor);        $this->_showOutput($this->pageNumber);        exit();    }    /**     * Sets X and Y minimum and maximum for a table cell     *     * @param string $table The table name of which sets XY co-ordinates     *     * @return nothing     *     * @access private     */    private function _setMinMax($table)    {        $this->_xMax = max($this->_xMax, $table->x + $table->width);        $this->_yMax = max($this->_yMax, $table->y + $table->height);        $this->_xMin = min($this->_xMin, $table->x);        $this->_yMin = min($this->_yMin, $table->y);    }    /**     * Defines relation objects     *     * @param string  $masterTable  The master table name     * @param string  $masterField  The relation field in the master table     * @param string  $foreignTable The foreign table name     * @param string  $foreignField The relation field in the foreign table     * @param boolean $showInfo     Whether to display table position or not     *     * @access private     *     * @return nothing     *     * @see _setMinMax     */    private function _addRelation($masterTable, $masterField, $foreignTable, $foreignField, $showInfo)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $this->_ff, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );            $this->_setMinMax($this->tables[$masterTable]);        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $this->_ff, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );            $this->_setMinMax($this->tables[$foreignTable]);        }        $this->relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws the grid     *     * @global object  the current PMA_Schema_PDF instance     *     * @access private     *     * @return nothing     *     * @see PMA_Schema_PDF     */    private function _strokeGrid()    {        global $pdf;        $gridSize = 10;        $labelHeight = 4;        $labelWidth = 5;        if ($this->withDoc) {            $topSpace = 6;            $bottomSpace = 15;        } else {            $topSpace = 0;            $bottomSpace = 0;        }        $pdf->SetMargins(0, 0);        $pdf->SetDrawColor(200, 200, 200);        // Draws horizontal lines        for ($l = 0; $l <= intval(($pdf->getPageHeight() - $topSpace - $bottomSpace) / $gridSize); $l++) {            $pdf->line(                0, $l * $gridSize + $topSpace,                $pdf->getPageWidth(), $l * $gridSize + $topSpace            );            // Avoid duplicates            if ($l > 0                && $l <= intval(($pdf->getPageHeight() - $topSpace - $bottomSpace - $labelHeight) / $gridSize)            ) {                $pdf->SetXY(0, $l * $gridSize + $topSpace);                $label = (string) sprintf(                    '%.0f',                    ($l * $gridSize + $topSpace - $this->topMargin) * $this->scale + $this->_yMin                );                $pdf->Cell($labelWidth, $labelHeight, ' ' . $label);            } // end if        } // end for        // Draws vertical lines        for ($j = 0; $j <= intval($pdf->getPageWidth() / $gridSize); $j++) {            $pdf->line(                $j * $gridSize,                $topSpace,                $j * $gridSize,                $pdf->getPageHeight() - $bottomSpace            );            $pdf->SetXY($j * $gridSize, $topSpace);            $label = (string) sprintf(                '%.0f',                ($j * $gridSize - $this->leftMargin) * $this->scale + $this->_xMin            );            $pdf->Cell($labelWidth, $labelHeight, $label);        }    }    /**     * Draws relation arrows     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @access private     *     * @return nothing     *     * @see Relation_Stats::relationdraw()     */    private function _drawRelations($changeColor)    {        $i = 0;        foreach ($this->relations as $relation) {            $relation->relationDraw($changeColor, $i);            $i++;        }    }    /**     * Draws tables     *     * @param boolean $changeColor Whether to display table position or not     *     * @access private     *     * @return nothing     *     * @see Table_Stats::tableDraw()     */    private function _drawTables($changeColor = 0)    {        foreach ($this->tables as $table) {            $table->tableDraw($this->_ff, $this->withDoc, $changeColor);        }    }    /**     * Ouputs the PDF document to a file     * or sends the output to browser     *     * @param integer $pageNumber page number     *     * @global object   The current PDF document     * @global string   The current database name     * @global integer  The current page number (from the     *                  $cfg['Servers'][$i]['table_coords'] table)     * @access private     *     * @return nothing     *     * @see PMA_Schema_PDF     */    private function _showOutput($pageNumber)    {        global $pdf, $cfgRelation;        // Get the name of this pdfpage to use as filename        $_name_sql = 'SELECT page_descr FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE page_nr = ' . $pageNumber;        $_name_rs = PMA_query_as_controluser($_name_sql);        if ($_name_rs) {            $_name_row = PMA_DBI_fetch_row($_name_rs);            $filename = $_name_row[0] . '.pdf';        }        if (empty($filename)) {            $filename = $pageNumber . '.pdf';        }        $pdf->Download($filename);    }    public function dataDictionaryDoc($alltables)    {        global $db, $pdf, $orientation, $paper;        // TOC        $pdf->addpage($GLOBALS['orientation']);        $pdf->Cell(0, 9, __('Table of contents'), 1, 0, 'C');        $pdf->Ln(15);        $i = 1;        foreach ($alltables as $table) {            $pdf->PMA_links['doc'][$table]['-'] = $pdf->AddLink();            $pdf->SetX(10);            // $pdf->Ln(1);            $pdf->Cell(                0, 6, __('Page number:') . ' {' . sprintf("%02d", $i) . '}', 0, 0,                'R', 0, $pdf->PMA_links['doc'][$table]['-']            );            $pdf->SetX(10);            $pdf->Cell(                0, 6, $i . ' ' . $table, 0, 1,                'L', 0, $pdf->PMA_links['doc'][$table]['-']            );            // $pdf->Ln(1);            $fields = PMA_DBI_get_columns($GLOBALS['db'], $table);            foreach ($fields as $row) {                $pdf->SetX(20);                $field_name = $row['Field'];                $pdf->PMA_links['doc'][$table][$field_name] = $pdf->AddLink();                //$pdf->Cell(                //    0, 6, $field_name, 0, 1,                //    'L', 0, $pdf->PMA_links['doc'][$table][$field_name]                //);            }            $i++;        }        $pdf->PMA_links['RT']['-'] = $pdf->AddLink();        $pdf->SetX(10);        $pdf->Cell(            0, 6, __('Page number:') . ' {00}', 0, 0,            'R', 0, $pdf->PMA_links['RT']['-']        );        $pdf->SetX(10);        $pdf->Cell(            0, 6, $i . ' ' . __('Relational schema'), 0, 1,            'L', 0, $pdf->PMA_links['RT']['-']        );        $z = 0;        foreach ($alltables as $table) {            $z++;            $pdf->SetAutoPageBreak(true, 15);            $pdf->addpage($GLOBALS['orientation']);            $pdf->Bookmark($table);            $pdf->SetAlias('{' . sprintf("%02d", $z) . '}', $pdf->PageNo());            $pdf->PMA_links['RT'][$table]['-'] = $pdf->AddLink();            $pdf->SetLink($pdf->PMA_links['doc'][$table]['-'], -1);            $pdf->SetFont($this->_ff, 'B', 18);            $pdf->Cell(                0, 8, $z . ' ' . $table, 1, 1,                'C', 0, $pdf->PMA_links['RT'][$table]['-']            );            $pdf->SetFont($this->_ff, '', 8);            $pdf->ln();            $cfgRelation = PMA_getRelationsParam();            $comments = PMA_getComments($db, $table);            if ($cfgRelation['mimework']) {                $mime_map = PMA_getMIME($db, $table, true);            }            /**             * Gets table informations             */            $showtable    = PMA_Table::sGetStatusInfo($db, $table);            $show_comment = isset($showtable['Comment'])                ? $showtable['Comment']                : '';            $create_time  = isset($showtable['Create_time'])                ? PMA_localisedDate(strtotime($showtable['Create_time']))                : '';            $update_time  = isset($showtable['Update_time'])                ? PMA_localisedDate(strtotime($showtable['Update_time']))                : '';            $check_time   = isset($showtable['Check_time'])                ? PMA_localisedDate(strtotime($showtable['Check_time']))                : '';            /**             * Gets table keys and retains them             */            $result = PMA_DBI_query('SHOW KEYS FROM ' . PMA_backquote($table) . ';');            $primary = '';            $indexes = array();            $lastIndex = '';            $indexes_info = array();            $indexes_data = array();            $pk_array = array(); // will be use to emphasis prim. keys in the table            // view            while ($row = PMA_DBI_fetch_assoc($result)) {                // Backups the list of primary keys                if ($row['Key_name'] == 'PRIMARY') {                    $primary .= $row['Column_name'] . ', ';                    $pk_array[$row['Column_name']] = 1;                }                // Retains keys informations                if ($row['Key_name'] != $lastIndex) {                    $indexes[] = $row['Key_name'];                    $lastIndex = $row['Key_name'];                }                $indexes_info[$row['Key_name']]['Sequences'][] = $row['Seq_in_index'];                $indexes_info[$row['Key_name']]['Non_unique'] = $row['Non_unique'];                if (isset($row['Cardinality'])) {                    $indexes_info[$row['Key_name']]['Cardinality'] = $row['Cardinality'];                }                // I don't know what does following column mean....                // $indexes_info[$row['Key_name']]['Packed'] = $row['Packed'];                $indexes_info[$row['Key_name']]['Comment'] = $row['Comment'];                $indexes_data[$row['Key_name']][$row['Seq_in_index']]['Column_name'] = $row['Column_name'];                if (isset($row['Sub_part'])) {                    $indexes_data[$row['Key_name']][$row['Seq_in_index']]['Sub_part'] = $row['Sub_part'];                }            } // end while            if ($result) {                PMA_DBI_free_result($result);            }            /**             * Gets fields properties             */            $columns = PMA_DBI_get_columns($db, $table);            // Check if we can use Relations            if (!empty($cfgRelation['relation'])) {                // Find which tables are related with the current one and write it in                // an array                $res_rel = PMA_getForeigners($db, $table);                if (count($res_rel) > 0) {                    $have_rel = true;                } else {                    $have_rel = false;                }            } else {                $have_rel = false;            } // end if            /**             * Displays the comments of the table if MySQL >= 3.23             */            $break = false;            if (! empty($show_comment)) {                $pdf->Cell(0, 3, __('Table comments') . ' : ' . $show_comment, 0, 1);                $break = true;            }            if (! empty($create_time)) {                $pdf->Cell(0, 3, __('Creation') . ': ' . $create_time, 0, 1);                $break = true;            }            if (! empty($update_time)) {                $pdf->Cell(0, 3, __('Last update') . ': ' . $update_time, 0, 1);                $break = true;            }            if (! empty($check_time)) {                $pdf->Cell(0, 3, __('Last check') . ': ' . $check_time, 0, 1);                $break = true;            }            if ($break == true) {                $pdf->Cell(0, 3, '', 0, 1);                $pdf->Ln();            }            $pdf->SetFont($this->_ff, 'B');            if (isset($orientation) && $orientation == 'L') {                $pdf->Cell(25, 8, __('Column'), 1, 0, 'C');                $pdf->Cell(20, 8, __('Type'), 1, 0, 'C');                $pdf->Cell(20, 8, __('Attributes'), 1, 0, 'C');                $pdf->Cell(10, 8, __('Null'), 1, 0, 'C');                $pdf->Cell(20, 8, __('Default'), 1, 0, 'C');                $pdf->Cell(25, 8, __('Extra'), 1, 0, 'C');                $pdf->Cell(45, 8, __('Links to'), 1, 0, 'C');                if ($paper == 'A4') {                    $comments_width = 67;                } else {                    // this is really intended for 'letter'                    /**                     * @todo find optimal width for all formats                     */                    $comments_width = 50;                }                $pdf->Cell($comments_width, 8, __('Comments'), 1, 0, 'C');                $pdf->Cell(45, 8, 'MIME', 1, 1, 'C');                $pdf->SetWidths(array(25, 20, 20, 10, 20, 25, 45, $comments_width, 45));            } else {                $pdf->Cell(20, 8, __('Column'), 1, 0, 'C');                $pdf->Cell(20, 8, __('Type'), 1, 0, 'C');                $pdf->Cell(20, 8, __('Attributes'), 1, 0, 'C');                $pdf->Cell(10, 8, __('Null'), 1, 0, 'C');                $pdf->Cell(15, 8, __('Default'), 1, 0, 'C');                $pdf->Cell(15, 8, __('Extra'), 1, 0, 'C');                $pdf->Cell(30, 8, __('Links to'), 1, 0, 'C');                $pdf->Cell(30, 8, __('Comments'), 1, 0, 'C');                $pdf->Cell(30, 8, 'MIME', 1, 1, 'C');                $pdf->SetWidths(array(20, 20, 20, 10, 15, 15, 30, 30, 30));            }            $pdf->SetFont($this->_ff, '');            foreach ($columns as $row) {                $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);                $type                = $extracted_fieldspec['print_type'];                $attribute           = $extracted_fieldspec['attribute'];                if (! isset($row['Default'])) {                    if ($row['Null'] != '' && $row['Null'] != 'NO') {                        $row['Default'] = 'NULL';                    }                }                $field_name = $row['Field'];                // $pdf->Ln();                $pdf->PMA_links['RT'][$table][$field_name] = $pdf->AddLink();                $pdf->Bookmark($field_name, 1, -1);                $pdf->SetLink($pdf->PMA_links['doc'][$table][$field_name], -1);                $pdf_row = array(                    $field_name,                    $type,                    $attribute,                    ($row['Null'] == '' || $row['Null'] == 'NO') ? __('No') : __('Yes'),                    (isset($row['Default']) ? $row['Default'] : ''),                    $row['Extra'],                    (isset($res_rel[$field_name])                        ? $res_rel[$field_name]['foreign_table'] . ' -> ' . $res_rel[$field_name]['foreign_field']                        : ''),                    (isset($comments[$field_name])                        ? $comments[$field_name]                        : ''),                    (isset($mime_map) && isset($mime_map[$field_name])                        ? str_replace('_', '/', $mime_map[$field_name]['mimetype'])                        : '')                );                $links[0] = $pdf->PMA_links['RT'][$table][$field_name];                if (isset($res_rel[$field_name]['foreign_table'])                    AND isset($res_rel[$field_name]['foreign_field'])                    AND isset($pdf->PMA_links['doc'][$res_rel[$field_name]['foreign_table']][$res_rel[$field_name]['foreign_field']])                ) {                    $links[6] = $pdf->PMA_links['doc'][$res_rel[$field_name]['foreign_table']][$res_rel[$field_name]['foreign_field']];                } else {                    unset($links[6]);                }                $pdf->Row($pdf_row, $links);            } // end foreach            $pdf->SetFont($this->_ff, '', 14);        } //end each    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * The Horde_Cipher_Blowfish:: class implements the Horde_Cipher interface * encryption data using the Blowfish algorithm. * * Copyright 2002-2009 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you * did not receive this file, see http://www.fsf.org/copyleft/lgpl.html. * * @author  Mike Cochrane <mike@graftonhall.co.nz> * @package Horde_Cipher */class Horde_Cipher_blowfish{    /**     * Pi Array     *     * @var array     */    protected $p = array(            0x243F6A88, 0x85A308D3, 0x13198A2E, 0x03707344,            0xA4093822, 0x299F31D0, 0x082EFA98, 0xEC4E6C89,            0x452821E6, 0x38D01377, 0xBE5466CF, 0x34E90C6C,            0xC0AC29B7, 0xC97C50DD, 0x3F84D5B5, 0xB5470917,            0x9216D5D9, 0x8979FB1B);    /**     * S Box (s1)     *     * @var array     */    protected $s1 = array(            0xD1310BA6, 0x98DFB5AC, 0x2FFD72DB, 0xD01ADFB7,            0xB8E1AFED, 0x6A267E96, 0xBA7C9045, 0xF12C7F99,            0x24A19947, 0xB3916CF7, 0x0801F2E2, 0x858EFC16,            0x636920D8, 0x71574E69, 0xA458FEA3, 0xF4933D7E,            0x0D95748F, 0x728EB658, 0x718BCD58, 0x82154AEE,            0x7B54A41D, 0xC25A59B5, 0x9C30D539, 0x2AF26013,            0xC5D1B023, 0x286085F0, 0xCA417918, 0xB8DB38EF,            0x8E79DCB0, 0x603A180E, 0x6C9E0E8B, 0xB01E8A3E,            0xD71577C1, 0xBD314B27, 0x78AF2FDA, 0x55605C60,            0xE65525F3, 0xAA55AB94, 0x57489862, 0x63E81440,            0x55CA396A, 0x2AAB10B6, 0xB4CC5C34, 0x1141E8CE,            0xA15486AF, 0x7C72E993, 0xB3EE1411, 0x636FBC2A,            0x2BA9C55D, 0x741831F6, 0xCE5C3E16, 0x9B87931E,            0xAFD6BA33, 0x6C24CF5C, 0x7A325381, 0x28958677,            0x3B8F4898, 0x6B4BB9AF, 0xC4BFE81B, 0x66282193,            0x61D809CC, 0xFB21A991, 0x487CAC60, 0x5DEC8032,            0xEF845D5D, 0xE98575B1, 0xDC262302, 0xEB651B88,            0x23893E81, 0xD396ACC5, 0x0F6D6FF3, 0x83F44239,            0x2E0B4482, 0xA4842004, 0x69C8F04A, 0x9E1F9B5E,            0x21C66842, 0xF6E96C9A, 0x670C9C61, 0xABD388F0,            0x6A51A0D2, 0xD8542F68, 0x960FA728, 0xAB5133A3,            0x6EEF0B6C, 0x137A3BE4, 0xBA3BF050, 0x7EFB2A98,            0xA1F1651D, 0x39AF0176, 0x66CA593E, 0x82430E88,            0x8CEE8619, 0x456F9FB4, 0x7D84A5C3, 0x3B8B5EBE,            0xE06F75D8, 0x85C12073, 0x401A449F, 0x56C16AA6,            0x4ED3AA62, 0x363F7706, 0x1BFEDF72, 0x429B023D,            0x37D0D724, 0xD00A1248, 0xDB0FEAD3, 0x49F1C09B,            0x075372C9, 0x80991B7B, 0x25D479D8, 0xF6E8DEF7,            0xE3FE501A, 0xB6794C3B, 0x976CE0BD, 0x04C006BA,            0xC1A94FB6, 0x409F60C4, 0x5E5C9EC2, 0x196A2463,            0x68FB6FAF, 0x3E6C53B5, 0x1339B2EB, 0x3B52EC6F,            0x6DFC511F, 0x9B30952C, 0xCC814544, 0xAF5EBD09,            0xBEE3D004, 0xDE334AFD, 0x660F2807, 0x192E4BB3,            0xC0CBA857, 0x45C8740F, 0xD20B5F39, 0xB9D3FBDB,            0x5579C0BD, 0x1A60320A, 0xD6A100C6, 0x402C7279,            0x679F25FE, 0xFB1FA3CC, 0x8EA5E9F8, 0xDB3222F8,            0x3C7516DF, 0xFD616B15, 0x2F501EC8, 0xAD0552AB,            0x323DB5FA, 0xFD238760, 0x53317B48, 0x3E00DF82,            0x9E5C57BB, 0xCA6F8CA0, 0x1A87562E, 0xDF1769DB,            0xD542A8F6, 0x287EFFC3, 0xAC6732C6, 0x8C4F5573,            0x695B27B0, 0xBBCA58C8, 0xE1FFA35D, 0xB8F011A0,            0x10FA3D98, 0xFD2183B8, 0x4AFCB56C, 0x2DD1D35B,            0x9A53E479, 0xB6F84565, 0xD28E49BC, 0x4BFB9790,            0xE1DDF2DA, 0xA4CB7E33, 0x62FB1341, 0xCEE4C6E8,            0xEF20CADA, 0x36774C01, 0xD07E9EFE, 0x2BF11FB4,            0x95DBDA4D, 0xAE909198, 0xEAAD8E71, 0x6B93D5A0,            0xD08ED1D0, 0xAFC725E0, 0x8E3C5B2F, 0x8E7594B7,            0x8FF6E2FB, 0xF2122B64, 0x8888B812, 0x900DF01C,            0x4FAD5EA0, 0x688FC31C, 0xD1CFF191, 0xB3A8C1AD,            0x2F2F2218, 0xBE0E1777, 0xEA752DFE, 0x8B021FA1,            0xE5A0CC0F, 0xB56F74E8, 0x18ACF3D6, 0xCE89E299,            0xB4A84FE0, 0xFD13E0B7, 0x7CC43B81, 0xD2ADA8D9,            0x165FA266, 0x80957705, 0x93CC7314, 0x211A1477,            0xE6AD2065, 0x77B5FA86, 0xC75442F5, 0xFB9D35CF,            0xEBCDAF0C, 0x7B3E89A0, 0xD6411BD3, 0xAE1E7E49,            0x00250E2D, 0x2071B35E, 0x226800BB, 0x57B8E0AF,            0x2464369B, 0xF009B91E, 0x5563911D, 0x59DFA6AA,            0x78C14389, 0xD95A537F, 0x207D5BA2, 0x02E5B9C5,            0x83260376, 0x6295CFA9, 0x11C81968, 0x4E734A41,            0xB3472DCA, 0x7B14A94A, 0x1B510052, 0x9A532915,            0xD60F573F, 0xBC9BC6E4, 0x2B60A476, 0x81E67400,            0x08BA6FB5, 0x571BE91F, 0xF296EC6B, 0x2A0DD915,            0xB6636521, 0xE7B9F9B6, 0xFF34052E, 0xC5855664,            0x53B02D5D, 0xA99F8FA1, 0x08BA4799, 0x6E85076A);    /**     * S Box (s2)     *     * @var array     */    protected $s2 = array(            0x4B7A70E9, 0xB5B32944, 0xDB75092E, 0xC4192623,            0xAD6EA6B0, 0x49A7DF7D, 0x9CEE60B8, 0x8FEDB266,            0xECAA8C71, 0x699A17FF, 0x5664526C, 0xC2B19EE1,            0x193602A5, 0x75094C29, 0xA0591340, 0xE4183A3E,            0x3F54989A, 0x5B429D65, 0x6B8FE4D6, 0x99F73FD6,            0xA1D29C07, 0xEFE830F5, 0x4D2D38E6, 0xF0255DC1,            0x4CDD2086, 0x8470EB26, 0x6382E9C6, 0x021ECC5E,            0x09686B3F, 0x3EBAEFC9, 0x3C971814, 0x6B6A70A1,            0x687F3584, 0x52A0E286, 0xB79C5305, 0xAA500737,            0x3E07841C, 0x7FDEAE5C, 0x8E7D44EC, 0x5716F2B8,            0xB03ADA37, 0xF0500C0D, 0xF01C1F04, 0x0200B3FF,            0xAE0CF51A, 0x3CB574B2, 0x25837A58, 0xDC0921BD,            0xD19113F9, 0x7CA92FF6, 0x94324773, 0x22F54701,            0x3AE5E581, 0x37C2DADC, 0xC8B57634, 0x9AF3DDA7,            0xA9446146, 0x0FD0030E, 0xECC8C73E, 0xA4751E41,            0xE238CD99, 0x3BEA0E2F, 0x3280BBA1, 0x183EB331,            0x4E548B38, 0x4F6DB908, 0x6F420D03, 0xF60A04BF,            0x2CB81290, 0x24977C79, 0x5679B072, 0xBCAF89AF,            0xDE9A771F, 0xD9930810, 0xB38BAE12, 0xDCCF3F2E,            0x5512721F, 0x2E6B7124, 0x501ADDE6, 0x9F84CD87,            0x7A584718, 0x7408DA17, 0xBC9F9ABC, 0xE94B7D8C,            0xEC7AEC3A, 0xDB851DFA, 0x63094366, 0xC464C3D2,            0xEF1C1847, 0x3215D908, 0xDD433B37, 0x24C2BA16,            0x12A14D43, 0x2A65C451, 0x50940002, 0x133AE4DD,            0x71DFF89E, 0x10314E55, 0x81AC77D6, 0x5F11199B,            0x043556F1, 0xD7A3C76B, 0x3C11183B, 0x5924A509,            0xF28FE6ED, 0x97F1FBFA, 0x9EBABF2C, 0x1E153C6E,            0x86E34570, 0xEAE96FB1, 0x860E5E0A, 0x5A3E2AB3,            0x771FE71C, 0x4E3D06FA, 0x2965DCB9, 0x99E71D0F,            0x803E89D6, 0x5266C825, 0x2E4CC978, 0x9C10B36A,            0xC6150EBA, 0x94E2EA78, 0xA5FC3C53, 0x1E0A2DF4,            0xF2F74EA7, 0x361D2B3D, 0x1939260F, 0x19C27960,            0x5223A708, 0xF71312B6, 0xEBADFE6E, 0xEAC31F66,            0xE3BC4595, 0xA67BC883, 0xB17F37D1, 0x018CFF28,            0xC332DDEF, 0xBE6C5AA5, 0x65582185, 0x68AB9802,            0xEECEA50F, 0xDB2F953B, 0x2AEF7DAD, 0x5B6E2F84,            0x1521B628, 0x29076170, 0xECDD4775, 0x619F1510,            0x13CCA830, 0xEB61BD96, 0x0334FE1E, 0xAA0363CF,            0xB5735C90, 0x4C70A239, 0xD59E9E0B, 0xCBAADE14,            0xEECC86BC, 0x60622CA7, 0x9CAB5CAB, 0xB2F3846E,            0x648B1EAF, 0x19BDF0CA, 0xA02369B9, 0x655ABB50,            0x40685A32, 0x3C2AB4B3, 0x319EE9D5, 0xC021B8F7,            0x9B540B19, 0x875FA099, 0x95F7997E, 0x623D7DA8,            0xF837889A, 0x97E32D77, 0x11ED935F, 0x16681281,            0x0E358829, 0xC7E61FD6, 0x96DEDFA1, 0x7858BA99,            0x57F584A5, 0x1B227263, 0x9B83C3FF, 0x1AC24696,            0xCDB30AEB, 0x532E3054, 0x8FD948E4, 0x6DBC3128,            0x58EBF2EF, 0x34C6FFEA, 0xFE28ED61, 0xEE7C3C73,            0x5D4A14D9, 0xE864B7E3, 0x42105D14, 0x203E13E0,            0x45EEE2B6, 0xA3AAABEA, 0xDB6C4F15, 0xFACB4FD0,            0xC742F442, 0xEF6ABBB5, 0x654F3B1D, 0x41CD2105,            0xD81E799E, 0x86854DC7, 0xE44B476A, 0x3D816250,            0xCF62A1F2, 0x5B8D2646, 0xFC8883A0, 0xC1C7B6A3,            0x7F1524C3, 0x69CB7492, 0x47848A0B, 0x5692B285,            0x095BBF00, 0xAD19489D, 0x1462B174, 0x23820E00,            0x58428D2A, 0x0C55F5EA, 0x1DADF43E, 0x233F7061,            0x3372F092, 0x8D937E41, 0xD65FECF1, 0x6C223BDB,            0x7CDE3759, 0xCBEE7460, 0x4085F2A7, 0xCE77326E,            0xA6078084, 0x19F8509E, 0xE8EFD855, 0x61D99735,            0xA969A7AA, 0xC50C06C2, 0x5A04ABFC, 0x800BCADC,            0x9E447A2E, 0xC3453484, 0xFDD56705, 0x0E1E9EC9,            0xDB73DBD3, 0x105588CD, 0x675FDA79, 0xE3674340,            0xC5C43465, 0x713E38D8, 0x3D28F89E, 0xF16DFF20,            0x153E21E7, 0x8FB03D4A, 0xE6E39F2B, 0xDB83ADF7);    /**     * S Box (s3)     *     * @var array     */    protected $s3 = array(            0xE93D5A68, 0x948140F7, 0xF64C261C, 0x94692934,            0x411520F7, 0x7602D4F7, 0xBCF46B2E, 0xD4A20068,            0xD4082471, 0x3320F46A, 0x43B7D4B7, 0x500061AF,            0x1E39F62E, 0x97244546, 0x14214F74, 0xBF8B8840,            0x4D95FC1D, 0x96B591AF, 0x70F4DDD3, 0x66A02F45,            0xBFBC09EC, 0x03BD9785, 0x7FAC6DD0, 0x31CB8504,            0x96EB27B3, 0x55FD3941, 0xDA2547E6, 0xABCA0A9A,            0x28507825, 0x530429F4, 0x0A2C86DA, 0xE9B66DFB,            0x68DC1462, 0xD7486900, 0x680EC0A4, 0x27A18DEE,            0x4F3FFEA2, 0xE887AD8C, 0xB58CE006, 0x7AF4D6B6,            0xAACE1E7C, 0xD3375FEC, 0xCE78A399, 0x406B2A42,            0x20FE9E35, 0xD9F385B9, 0xEE39D7AB, 0x3B124E8B,            0x1DC9FAF7, 0x4B6D1856, 0x26A36631, 0xEAE397B2,            0x3A6EFA74, 0xDD5B4332, 0x6841E7F7, 0xCA7820FB,            0xFB0AF54E, 0xD8FEB397, 0x454056AC, 0xBA489527,            0x55533A3A, 0x20838D87, 0xFE6BA9B7, 0xD096954B,            0x55A867BC, 0xA1159A58, 0xCCA92963, 0x99E1DB33,            0xA62A4A56, 0x3F3125F9, 0x5EF47E1C, 0x9029317C,            0xFDF8E802, 0x04272F70, 0x80BB155C, 0x05282CE3,            0x95C11548, 0xE4C66D22, 0x48C1133F, 0xC70F86DC,            0x07F9C9EE, 0x41041F0F, 0x404779A4, 0x5D886E17,            0x325F51EB, 0xD59BC0D1, 0xF2BCC18F, 0x41113564,            0x257B7834, 0x602A9C60, 0xDFF8E8A3, 0x1F636C1B,            0x0E12B4C2, 0x02E1329E, 0xAF664FD1, 0xCAD18115,            0x6B2395E0, 0x333E92E1, 0x3B240B62, 0xEEBEB922,            0x85B2A20E, 0xE6BA0D99, 0xDE720C8C, 0x2DA2F728,            0xD0127845, 0x95B794FD, 0x647D0862, 0xE7CCF5F0,            0x5449A36F, 0x877D48FA, 0xC39DFD27, 0xF33E8D1E,            0x0A476341, 0x992EFF74, 0x3A6F6EAB, 0xF4F8FD37,            0xA812DC60, 0xA1EBDDF8, 0x991BE14C, 0xDB6E6B0D,            0xC67B5510, 0x6D672C37, 0x2765D43B, 0xDCD0E804,            0xF1290DC7, 0xCC00FFA3, 0xB5390F92, 0x690FED0B,            0x667B9FFB, 0xCEDB7D9C, 0xA091CF0B, 0xD9155EA3,            0xBB132F88, 0x515BAD24, 0x7B9479BF, 0x763BD6EB,            0x37392EB3, 0xCC115979, 0x8026E297, 0xF42E312D,            0x6842ADA7, 0xC66A2B3B, 0x12754CCC, 0x782EF11C,            0x6A124237, 0xB79251E7, 0x06A1BBE6, 0x4BFB6350,            0x1A6B1018, 0x11CAEDFA, 0x3D25BDD8, 0xE2E1C3C9,            0x44421659, 0x0A121386, 0xD90CEC6E, 0xD5ABEA2A,            0x64AF674E, 0xDA86A85F, 0xBEBFE988, 0x64E4C3FE,            0x9DBC8057, 0xF0F7C086, 0x60787BF8, 0x6003604D,            0xD1FD8346, 0xF6381FB0, 0x7745AE04, 0xD736FCCC,            0x83426B33, 0xF01EAB71, 0xB0804187, 0x3C005E5F,            0x77A057BE, 0xBDE8AE24, 0x55464299, 0xBF582E61,            0x4E58F48F, 0xF2DDFDA2, 0xF474EF38, 0x8789BDC2,            0x5366F9C3, 0xC8B38E74, 0xB475F255, 0x46FCD9B9,            0x7AEB2661, 0x8B1DDF84, 0x846A0E79, 0x915F95E2,            0x466E598E, 0x20B45770, 0x8CD55591, 0xC902DE4C,            0xB90BACE1, 0xBB8205D0, 0x11A86248, 0x7574A99E,            0xB77F19B6, 0xE0A9DC09, 0x662D09A1, 0xC4324633,            0xE85A1F02, 0x09F0BE8C, 0x4A99A025, 0x1D6EFE10,            0x1AB93D1D, 0x0BA5A4DF, 0xA186F20F, 0x2868F169,            0xDCB7DA83, 0x573906FE, 0xA1E2CE9B, 0x4FCD7F52,            0x50115E01, 0xA70683FA, 0xA002B5C4, 0x0DE6D027,            0x9AF88C27, 0x773F8641, 0xC3604C06, 0x61A806B5,            0xF0177A28, 0xC0F586E0, 0x006058AA, 0x30DC7D62,            0x11E69ED7, 0x2338EA63, 0x53C2DD94, 0xC2C21634,            0xBBCBEE56, 0x90BCB6DE, 0xEBFC7DA1, 0xCE591D76,            0x6F05E409, 0x4B7C0188, 0x39720A3D, 0x7C927C24,            0x86E3725F, 0x724D9DB9, 0x1AC15BB4, 0xD39EB8FC,            0xED545578, 0x08FCA5B5, 0xD83D7CD3, 0x4DAD0FC4,            0x1E50EF5E, 0xB161E6F8, 0xA28514D9, 0x6C51133C,            0x6FD5C7E7, 0x56E14EC4, 0x362ABFCE, 0xDDC6C837,            0xD79A3234, 0x92638212, 0x670EFA8E, 0x406000E0);    /**     * S Box (s4)     *     * @var array     */    protected $s4 = array(            0x3A39CE37, 0xD3FAF5CF, 0xABC27737, 0x5AC52D1B,            0x5CB0679E, 0x4FA33742, 0xD3822740, 0x99BC9BBE,            0xD5118E9D, 0xBF0F7315, 0xD62D1C7E, 0xC700C47B,            0xB78C1B6B, 0x21A19045, 0xB26EB1BE, 0x6A366EB4,            0x5748AB2F, 0xBC946E79, 0xC6A376D2, 0x6549C2C8,            0x530FF8EE, 0x468DDE7D, 0xD5730A1D, 0x4CD04DC6,            0x2939BBDB, 0xA9BA4650, 0xAC9526E8, 0xBE5EE304,            0xA1FAD5F0, 0x6A2D519A, 0x63EF8CE2, 0x9A86EE22,            0xC089C2B8, 0x43242EF6, 0xA51E03AA, 0x9CF2D0A4,            0x83C061BA, 0x9BE96A4D, 0x8FE51550, 0xBA645BD6,            0x2826A2F9, 0xA73A3AE1, 0x4BA99586, 0xEF5562E9,            0xC72FEFD3, 0xF752F7DA, 0x3F046F69, 0x77FA0A59,            0x80E4A915, 0x87B08601, 0x9B09E6AD, 0x3B3EE593,            0xE990FD5A, 0x9E34D797, 0x2CF0B7D9, 0x022B8B51,            0x96D5AC3A, 0x017DA67D, 0xD1CF3ED6, 0x7C7D2D28,            0x1F9F25CF, 0xADF2B89B, 0x5AD6B472, 0x5A88F54C,            0xE029AC71, 0xE019A5E6, 0x47B0ACFD, 0xED93FA9B,            0xE8D3C48D, 0x283B57CC, 0xF8D56629, 0x79132E28,            0x785F0191, 0xED756055, 0xF7960E44, 0xE3D35E8C,            0x15056DD4, 0x88F46DBA, 0x03A16125, 0x0564F0BD,            0xC3EB9E15, 0x3C9057A2, 0x97271AEC, 0xA93A072A,            0x1B3F6D9B, 0x1E6321F5, 0xF59C66FB, 0x26DCF319,            0x7533D928, 0xB155FDF5, 0x03563482, 0x8ABA3CBB,            0x28517711, 0xC20AD9F8, 0xABCC5167, 0xCCAD925F,            0x4DE81751, 0x3830DC8E, 0x379D5862, 0x9320F991,            0xEA7A90C2, 0xFB3E7BCE, 0x5121CE64, 0x774FBE32,            0xA8B6E37E, 0xC3293D46, 0x48DE5369, 0x6413E680,            0xA2AE0810, 0xDD6DB224, 0x69852DFD, 0x09072166,            0xB39A460A, 0x6445C0DD, 0x586CDECF, 0x1C20C8AE,            0x5BBEF7DD, 0x1B588D40, 0xCCD2017F, 0x6BB4E3BB,            0xDDA26A7E, 0x3A59FF45, 0x3E350A44, 0xBCB4CDD5,            0x72EACEA8, 0xFA6484BB, 0x8D6612AE, 0xBF3C6F47,            0xD29BE463, 0x542F5D9E, 0xAEC2771B, 0xF64E6370,            0x740E0D8D, 0xE75B1357, 0xF8721671, 0xAF537D5D,            0x4040CB08, 0x4EB4E2CC, 0x34D2466A, 0x0115AF84,            0xE1B00428, 0x95983A1D, 0x06B89FB4, 0xCE6EA048,            0x6F3F3B82, 0x3520AB82, 0x011A1D4B, 0x277227F8,            0x611560B1, 0xE7933FDC, 0xBB3A792B, 0x344525BD,            0xA08839E1, 0x51CE794B, 0x2F32C9B7, 0xA01FBAC9,            0xE01CC87E, 0xBCC7D1F6, 0xCF0111C3, 0xA1E8AAC7,            0x1A908749, 0xD44FBD9A, 0xD0DADECB, 0xD50ADA38,            0x0339C32A, 0xC6913667, 0x8DF9317C, 0xE0B12B4F,            0xF79E59B7, 0x43F5BB3A, 0xF2D519FF, 0x27D9459C,            0xBF97222C, 0x15E6FC2A, 0x0F91FC71, 0x9B941525,            0xFAE59361, 0xCEB69CEB, 0xC2A86459, 0x12BAA8D1,            0xB6C1075E, 0xE3056A0C, 0x10D25065, 0xCB03A442,            0xE0EC6E0E, 0x1698DB3B, 0x4C98A0BE, 0x3278E964,            0x9F1F9532, 0xE0D392DF, 0xD3A0342B, 0x8971F21E,            0x1B0A7441, 0x4BA3348C, 0xC5BE7120, 0xC37632D8,            0xDF359F8D, 0x9B992F2E, 0xE60B6F47, 0x0FE3F11D,            0xE54CDA54, 0x1EDAD891, 0xCE6279CF, 0xCD3E7E6F,            0x1618B166, 0xFD2C1D05, 0x848FD2C5, 0xF6FB2299,            0xF523F357, 0xA6327623, 0x93A83531, 0x56CCCD02,            0xACF08162, 0x5A75EBB5, 0x6E163697, 0x88D273CC,            0xDE966292, 0x81B949D0, 0x4C50901B, 0x71C65614,            0xE6C6C7BD, 0x327A140A, 0x45E1D006, 0xC3F27B9A,            0xC9AA53FD, 0x62A80F00, 0xBB25BFE2, 0x35BDD2F6,            0x71126905, 0xB2040222, 0xB6CBCF7C, 0xCD769C2B,            0x53113EC0, 0x1640E3D3, 0x38ABBD60, 0x2547ADF0,            0xBA38209C, 0xF746CE76, 0x77AFA1C5, 0x20756060,            0x85CBFE4E, 0x8AE88DD8, 0x7AAAF9B0, 0x4CF9AA7E,            0x1948C25C, 0x02FB8A8C, 0x01C36AE4, 0xD6EBE1F9,            0x90D4F869, 0xA65CDEA0, 0x3F09252D, 0xC208E69F,            0xB74E6132, 0xCE77E25B, 0x578FDFE3, 0x3AC372E6);    /**     * The number of rounds to do     *     * @var integer     */    protected $_rounds = 16;    /**     * Set the key to be used for en/decryption.     *     * @param string $key  The key to use.     * @return bool     */    public function setKey($key)    {        $key = array_values(unpack('C*', $key));        $keyLen = count($key);        if ($keyLen == 0) {            return false;        }        $keyPos = $keyXor = 0;        for ($i = 0, $iMax = count($this->p); $i < $iMax; ++$i) {            for ($t = 0; $t < 4; $t++) {                $keyXor = ($keyXor << 8) | (($key[$keyPos]) & 0x0ff);                if (++$keyPos == $keyLen) {                    $keyPos = 0;                }            }            $this->p[$i] = $this->p[$i] ^ $keyXor;        }        $encZero = array('L' => 0, 'R' => 0);        for ($i = 0; $i + 1 < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->p[$i] = $encZero['L'];          $this->p[$i + 1] = $encZero['R'];        }        $iMax = count($this->s1);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s1[$i] = $encZero['L'];          $this->s1[$i + 1] = $encZero['R'];        }        $iMax = count($this->s2);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s2[$i] = $encZero['L'];          $this->s2[$i + 1] = $encZero['R'];        }        $iMax = count($this->s3);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s3[$i] = $encZero['L'];          $this->s3[$i + 1] = $encZero['R'];        }        $iMax = count($this->s4);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s4[$i] = $encZero['L'];          $this->s4[$i + 1] = $encZero['R'];        }    }    /**     * Encrypt a block of data.     *     * @param string $block      The data to encrypt.     * @param string $key        The key to use.     *     * @return string  The encrypted output.     */    public function encryptBlock($block, $key = null)    {        if (!is_null($key)) {            $this->setKey($key);        }        list($L, $R) = array_values(unpack('N*', $block));        $parts = $this->_encryptBlock($L, $R);        return pack('NN', $parts['L'], $parts['R']);    }    /**     * Encrypt left and right halves of a block of data.     *     * @param integer $L  Left half of the data.     * @param integer $R  Right half of the data.     *     * @return array  A hash, with keys 'L' and 'R', and the encrypted data as     *                the values.     */    protected function _encryptBlock($L, $R)    {        $L ^= $this->p[0];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[1];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[2];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[3];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[4];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[5];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[6];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[7];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[8];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[9];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[10];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[11];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[12];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[13];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[14];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[15];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[16];        $R ^= $this->p[17];        return array('L' => $R, 'R' => $L);    }    /**     * Decrypt a block of data.     *     * @param string $block  The data to decrypt.     * @param string $key    The key to use.     *     * @return string  The decrypted output.     */    public function decryptBlock($block, $key = null)    {        if (!is_null($key)) {            $this->setKey($key);        }// change for phpMyAdmin        $L = null;        $R = null;        $retarray = array_values(unpack('N*', $block));        if (isset($retarray[0])) {            $L = $retarray[0];        }        if (isset($retarray[1])) {            $R = $retarray[1];        }// end change for phpMyAdmin        $L ^= $this->p[17];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[16];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[15];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[14];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[13];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[12];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[11];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[10];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[9];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[8];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[7];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[6];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[5];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[4];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[3];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[2];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[1];        return pack("NN", $R ^ $this->p[0], $L);    }}// higher-level functions:/** * Encryption using blowfish algorithm * * @param string  original data * @param string  the secret * * @return  string  the encrypted result * * @access  public * */function PMA_blowfish_encrypt($data, $secret){    $pma_cipher = new Horde_Cipher_blowfish;    $encrypt = '';    $mod = strlen($data) % 8;    if ($mod > 0) {        $data .= str_repeat("\0", 8 - $mod);    }    foreach (str_split($data, 8) as $chunk) {        $encrypt .= $pma_cipher->encryptBlock($chunk, $secret);    }    return base64_encode($encrypt);}/** * Decryption using blowfish algorithm * * @param string  encrypted data * @param string  the secret * * @return  string  original data * * @access  public * */function PMA_blowfish_decrypt($encdata, $secret){    $pma_cipher = new Horde_Cipher_blowfish;    $decrypt = '';    $data = base64_decode($encdata);    foreach (str_split($data, 8) as $chunk) {        $decrypt .= $pma_cipher->decryptBlock($chunk, $secret);    }    return trim($decrypt);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build MediaWiki dumps of tables * * @package PhpMyAdmin-Export * @subpackage MediaWiki */if (! defined('PHPMYADMIN')) {    exit;}if (isset($plugin_list)) {    $plugin_list['mediawiki'] = array(        'text' => __('MediaWiki Table'),        'extension' => 'txt',        'mime_type' => 'text/plain',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in MediaWiki format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query) {        $columns = PMA_DBI_get_columns($db, $table);        $columns = array_values($columns);        $row_cnt = count($columns);        $output = "{| cellpadding=\"10\" cellspacing=\"0\" border=\"1\" style=\"text-align:center;\"\n";        $output .= "|+'''" . $table . "'''\n";        $output .= "|- style=\"background:#ffdead;\"\n";        $output .= "! style=\"background:#ffffff\" | \n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Field'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Type\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Type'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Null\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Null'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Default\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Default'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Extra\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Extra'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|}\n\n\n\n";        return PMA_exportOutputHandler($output);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets the variables sent or posted to this script, then displays headers */require_once './libraries/common.inc.php';if (! isset($selected_tbl)) {    include './libraries/db_common.inc.php';    include './libraries/db_info.inc.php';}/** * Gets the relations settings */$cfgRelation  = PMA_getRelationsParam();require_once './libraries/transformations.lib.php';/** * Check parameters */PMA_checkParameters(array('db'));/** * Defines the url to return to in case of error in a sql statement */if (strlen($table)) {    $err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);} else {    $err_url = 'db_sql.php?' . PMA_generate_common_url($db);}if ($cfgRelation['commwork']) {    $comment = PMA_getDbComment($db);    /**     * Displays DB comment     */    if ($comment) {        ?>    <p> <?php echo __('Database comment: '); ?>        <i><?php echo htmlspecialchars($comment); ?></i></p>        <?php    } // end if}/** * Selects the database and gets tables names */PMA_DBI_select_db($db);$tables = PMA_DBI_get_tables($db);$count  = 0;foreach ($tables as $table) {    $comments = PMA_getComments($db, $table);    echo '<div>' . "\n";    echo '<h2>' . htmlspecialchars($table) . '</h2>' . "\n";    /**     * Gets table informations     */    $show_comment = PMA_Table::sGetStatusInfo($db, $table, 'TABLE_COMMENT');    /**     * Gets table keys and retains them     */    PMA_DBI_select_db($db);    $indexes      = PMA_DBI_get_table_indexes($db, $table);    $primary      = '';    $indexes      = array();    $lastIndex    = '';    $indexes_info = array();    $indexes_data = array();    $pk_array     = array(); // will be use to emphasis prim. keys in the table                             // view    foreach ($indexes as $row) {        // Backups the list of primary keys        if ($row['Key_name'] == 'PRIMARY') {            $primary   .= $row['Column_name'] . ', ';            $pk_array[$row['Column_name']] = 1;        }        // Retains keys informations        if ($row['Key_name'] != $lastIndex) {            $indexes[] = $row['Key_name'];            $lastIndex = $row['Key_name'];        }        $indexes_info[$row['Key_name']]['Sequences'][]     = $row['Seq_in_index'];        $indexes_info[$row['Key_name']]['Non_unique']      = $row['Non_unique'];        if (isset($row['Cardinality'])) {            $indexes_info[$row['Key_name']]['Cardinality'] = $row['Cardinality'];        }        // I don't know what does following column mean....        // $indexes_info[$row['Key_name']]['Packed']          = $row['Packed'];        $indexes_info[$row['Key_name']]['Comment']     = $row['Comment'];        $indexes_data[$row['Key_name']][$row['Seq_in_index']]['Column_name']  = $row['Column_name'];        if (isset($row['Sub_part'])) {            $indexes_data[$row['Key_name']][$row['Seq_in_index']]['Sub_part'] = $row['Sub_part'];        }    } // end while    /**     * Gets columns properties     */    $columns = PMA_DBI_get_columns($db, $table);    $fields_cnt  = count($columns);    if (PMA_MYSQL_INT_VERSION < 50025) {        // We need this to correctly learn if a TIMESTAMP is NOT NULL, since        // SHOW FULL COLUMNS or INFORMATION_SCHEMA incorrectly says NULL        // and SHOW CREATE TABLE says NOT NULL        // http://bugs.mysql.com/20910.        $show_create_table = PMA_DBI_fetch_value(            'SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table),            0, 1);        $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));    }    // Check if we can use Relations    if (!empty($cfgRelation['relation'])) {        // Find which tables are related with the current one and write it in        // an array        $res_rel = PMA_getForeigners($db, $table);        if (count($res_rel) > 0) {            $have_rel = true;        } else {            $have_rel = false;        }    } else {        $have_rel = false;    } // end if    /**     * Displays the comments of the table if MySQL >= 3.23     */    if (!empty($show_comment)) {        echo __('Table comments') . ': ' . htmlspecialchars($show_comment) . '<br /><br />';    }    /**     * Displays the table structure     */    ?><table width="100%" class="print"><tr><th width="50"><?php echo __('Column'); ?></th>    <th width="80"><?php echo __('Type'); ?></th><?php /*    <th width="50"><?php echo __('Attributes'); ?></th>*/ ?>    <th width="40"><?php echo __('Null'); ?></th>    <th width="70"><?php echo __('Default'); ?></th><?php /*    <th width="50"><?php echo __('Extra'); ?></th>*/ ?>    <?php    if ($have_rel) {        echo '    <th>' . __('Links to') . '</th>' . "\n";    }    echo '    <th>' . __('Comments') . '</th>' . "\n";    if ($cfgRelation['mimework']) {        echo '    <th>MIME</th>' . "\n";    }    ?></tr>    <?php    $odd_row = true;    foreach ($columns as $row) {        if ($row['Null'] == '') {            $row['Null'] = 'NO';        }        $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);        // reformat mysql query output        // set or enum types: slashes single quotes inside options        if ('set' == $extracted_fieldspec['type'] || 'enum' == $extracted_fieldspec['type']) {            $type_nowrap  = '';        } else {            $type_nowrap  = ' nowrap="nowrap"';        }        $type = htmlspecialchars($extracted_fieldspec['print_type']);        $attribute     = $extracted_fieldspec['attribute'];        if (! isset($row['Default'])) {            if ($row['Null'] != 'NO') {                $row['Default'] = '<i>NULL</i>';            }        } else {            $row['Default'] = htmlspecialchars($row['Default']);        }        $field_name = $row['Field'];        if (PMA_MYSQL_INT_VERSION < 50025         && ! empty($analyzed_sql[0]['create_table_fields'][$field_name]['type'])         && $analyzed_sql[0]['create_table_fields'][$field_name]['type'] == 'TIMESTAMP'         && $analyzed_sql[0]['create_table_fields'][$field_name]['timestamp_not_null']) {            // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the            // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe            // the latter.            /**             * @todo merge this logic with the one in tbl_structure.php             * or move it in a function similar to PMA_DBI_get_columns_full()             * but based on SHOW CREATE TABLE because information_schema             * cannot be trusted in this case (MySQL bug)             */             $row['Null'] = 'NO';        }        ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">    <td nowrap="nowrap">        <?php        if (isset($pk_array[$row['Field']])) {            echo '<u>' . htmlspecialchars($field_name) . '</u>';        } else {            echo htmlspecialchars($field_name);        }        ?>    </td>    <td<?php echo $type_nowrap; ?> xml:lang="en" dir="ltr"><?php echo $type; ?></td><?php /*    <td<?php echo $type_nowrap; ?>><?php echo $attribute; ?></td>*/ ?>    <td><?php echo (($row['Null'] == 'NO') ? __('No') : __('Yes')); ?></td>    <td nowrap="nowrap"><?php if (isset($row['Default'])) { echo $row['Default']; } ?></td><?php /*    <td<?php echo $type_nowrap; ?>><?php echo $row['Extra']; ?></td>*/ ?>        <?php        if ($have_rel) {            echo '    <td>';            if (isset($res_rel[$field_name])) {                echo htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' -> ' . $res_rel[$field_name]['foreign_field']);            }            echo '</td>' . "\n";        }        echo '    <td>';        if (isset($comments[$field_name])) {            echo htmlspecialchars($comments[$field_name]);        }        echo '</td>' . "\n";        if ($cfgRelation['mimework']) {            $mime_map = PMA_getMIME($db, $table, true);            echo '    <td>';            if (isset($mime_map[$field_name])) {                echo htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype']));            }            echo '</td>' . "\n";        }        ?></tr>        <?php    } // end foreach    $count++;    ?></table></div>    <?php} //ends main while/** * Displays the footer */PMA_printButton();require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Engines *//** * */require_once './libraries/engines/innodb.lib.php';/** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_innobase extends PMA_StorageEngine_innodb{}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer */require_once './libraries/pmd_common.php';/** * If called directly from the designer, first save the positions */if (! isset($scale)) {    $no_die_save_pos = 1;    include_once 'pmd_save_pos.php';}if (isset($mode)) {    if ('create_export' != $mode && empty($pdf_page_number)) {        die("<script>alert('Pages not found!');history.go(-2);</script>");    }    $pmd_table = PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']);    $pma_table = PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_coords']);    $scale_q = PMA_sqlAddSlashes($scale);    if ('create_export' == $mode) {        $pdf_page_number = PMA_REL_create_page($newpage, $cfgRelation, $db);        if ($pdf_page_number > 0) {            $message = PMA_Message::success(__('Page has been created'));            $mode = 'export';        } else {            $message = PMA_Message::error(__('Page creation failed'));        }    }    $pdf_page_number_q = PMA_sqlAddSlashes($pdf_page_number);    if ('export' == $mode) {        $sql = "REPLACE INTO " . $pma_table . " (db_name, table_name, pdf_page_number, x, y) SELECT db_name, table_name, " . $pdf_page_number_q . ", ROUND(x/" . $scale_q . ") , ROUND(y/" . $scale_q . ") y FROM " . $pmd_table . " WHERE db_name = '" . PMA_sqlAddSlashes($db) . "'";        PMA_query_as_controluser($sql, true, PMA_DBI_QUERY_STORE);    }    if ('import' == $mode) {        PMA_query_as_controluser(        'UPDATE ' . $pma_table . ',' . $pmd_table .        ' SET ' . $pmd_table . '.`x`= ' . $pma_table . '.`x` * '. $scale_q . ',        ' . $pmd_table . '.`y`= ' . $pma_table . '.`y` * '. $scale_q .'        WHERE        ' . $pmd_table . '.`db_name`=' . $pma_table . '.`db_name`        AND        ' . $pmd_table . '.`table_name` = ' . $pma_table . '.`table_name`        AND        ' . $pmd_table . '.`db_name`=\''. PMA_sqlAddSlashes($db) .'\'        AND pdf_page_number = ' . $pdf_page_number_q . ';', true, PMA_DBI_QUERY_STORE);    }}// no need to use pmd/stylesrequire_once './libraries/header_meta_style.inc.php';?></head><body><br><div><?php    if (!empty($message)) {        $message->display();    }?>  <form name="form1" method="post" action="pmd_pdf.php"><?phpecho PMA_generate_common_hidden_inputs($db);echo '<div>';echo '<fieldset><legend>' . __('Import/Export coordinates for PDF schema') . '</legend>';$choices = array();$table_info_result = PMA_query_as_controluser('SELECT * FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'');if (PMA_DBI_num_rows($table_info_result) > 0) {    echo '<p>' . __('Page') . ':';    echo '<select name="pdf_page_number">';    while ($page = PMA_DBI_fetch_assoc($table_info_result)) {        echo '<option value="' . $page['page_nr'] . '">';        echo htmlspecialchars($page['page_descr']);        echo '</option>';    }    echo '</select>';    echo '</p>';    $choices['import'] = __('Import from selected page');    $choices['export'] = __('Export to selected page');}$choices['create_export'] = __('Create a page and export to it');if (1 == count($choices)) {    echo $choices['create_export'];    echo '<input type="hidden" name="mode" value="create_export" />';} else {    PMA_display_html_radio('mode', $choices, $checked_choice = '', $line_break = true, $escape_label = false, $class = '');}echo '<br />';echo '<label for="newpage">' . __('New page name: ') . '</label>';echo '<input id="newpage" type="text" name="newpage" />';echo '<p>' . __('Export/Import to scale') . ':';?>      <select name="scale">        <option value="1">1:1</option>        <option value="2">1:2</option>        <option value="3" selected>1:3 (<?php echo __('recommended'); ?>)</option>        <option value="4">1:4</option>        <option value="5">1:5</option>        </select>      </p>      <input type="submit" value="<?php echo __('Go'); ?>">    </fieldset>    </div>  </form></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * GLOBAL Plugin function. * --------------- * * THIS FILE PROVIDES BASIC FUNCTIONS TO USE IN OTHER PLUGINS! * * The basic filename usage for any plugin, residing in the libraries/transformations directory is: * * -- <mime_type>_<mime_subtype>__<transformation_name>.inc.php * * The function name has to be the like above filename: * * -- function PMA_transformation_<mime_type>_<mime_subtype>__<transformation_name>.inc.php * * Please use short and expressive names. For now, special characters which aren't allowed in * filenames or functions should not be used. * * Please provide a comment for your function, what it does and what parameters are available. * * @package PhpMyAdmin-Transformation *//** * */function PMA_transformation_global_plain($buffer, $options = array(), $meta = ''){    return htmlspecialchars($buffer);}function PMA_transformation_global_html($buffer, $options = array(), $meta = ''){    return $buffer;}function PMA_transformation_global_html_replace($buffer, $options = array(), $meta = ''){    if (!isset($options['string'])) {        $options['string'] = '';    }    if (isset($options['regex']) && isset($options['regex_replace'])) {        $buffer = preg_replace('@' . str_replace('@', '\@', $options['regex']) . '@si', $options['regex_replace'], $buffer);    }    // Replace occurences of [__BUFFER__] with actual text    $return = str_replace("[__BUFFER__]", $buffer, $options['string']);    return $return;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays index edit/creation form and handles it * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/Index.class.php';require_once './libraries/tbl_common.php';// Get fields and stores their name/type$fields = array();foreach (PMA_DBI_get_columns_full($db, $table) as $row) {    if (preg_match('@^(set|enum)\((.+)\)$@i', $row['Type'], $tmp)) {        $tmp[2]         = substr(preg_replace('@([^,])\'\'@', '\\1\\\'',            ',' . $tmp[2]), 1);        $fields[$row['Field']] = $tmp[1] . '(' . str_replace(',', ', ', $tmp[2]) . ')';    } else {        $fields[$row['Field']] = $row['Type'];    }} // end while// Prepares the form valuesif (isset($_REQUEST['index'])) {    if (is_array($_REQUEST['index'])) {        // coming already from form        $index = new PMA_Index($_REQUEST['index']);    } else {        $index = PMA_Index::singleton($db, $table, $_REQUEST['index']);    }} else {    $index = new PMA_Index;}/** * Process the data from the edit/create index form, * run the query to build the new index * and moves back to "tbl_sql.php" */if (isset($_REQUEST['do_save_data'])) {    $error = false;    // $sql_query is the one displayed in the query box    $sql_query = 'ALTER TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table);    // Drops the old index    if (! empty($_REQUEST['old_index'])) {        if ($_REQUEST['old_index'] == 'PRIMARY') {            $sql_query .= ' DROP PRIMARY KEY,';        } else {            $sql_query .= ' DROP INDEX ' . PMA_backquote($_REQUEST['old_index']) . ',';        }    } // end if    // Builds the new one    switch ($index->getType()) {        case 'PRIMARY':            if ($index->getName() == '') {                $index->setName('PRIMARY');            } elseif ($index->getName() != 'PRIMARY') {                $error = PMA_Message::error(__('The name of the primary key must be "PRIMARY"!'));            }            $sql_query .= ' ADD PRIMARY KEY';            break;        case 'FULLTEXT':        case 'UNIQUE':        case 'INDEX':        case 'SPATIAL':            if ($index->getName() == 'PRIMARY') {                $error = PMA_Message::error(__('Can\'t rename index to PRIMARY!'));            }            $sql_query .= ' ADD ' . $index->getType() . ' '                . ($index->getName() ? PMA_backquote($index->getName()) : '');            break;    } // end switch    $index_fields = array();    foreach ($index->getColumns() as $key => $column) {        $index_fields[$key] = PMA_backquote($column->getName());        if ($column->getSubPart()) {            $index_fields[$key] .= '(' . $column->getSubPart() . ')';        }    } // end while    if (empty($index_fields)) {        $error = PMA_Message::error(__('No index parts defined!'));    } else {        $sql_query .= ' (' . implode(', ', $index_fields) . ')';    }    if (! $error) {        PMA_DBI_query($sql_query);        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['index_table'] = PMA_Index::getView($table, $db);            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';        exit;    } else {        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['error'] = $error;            PMA_ajaxResponse($error, false);        }        $error->display();    }} // end builds the new index/** * Display the form to edit/create an index */// Displays headers (if needed)$GLOBALS['js_include'][] = 'indexes.js';require_once './libraries/tbl_info.inc.php';if ($GLOBALS['is_ajax_request'] != true) {    include_once './libraries/tbl_links.inc.php';}if (isset($_REQUEST['index']) && is_array($_REQUEST['index'])) {    // coming already from form    $add_fields        = count($_REQUEST['index']['columns']['names']) - $index->getColumnCount();    if (isset($_REQUEST['add_fields'])) {        $add_fields += $_REQUEST['added_fields'];    }} elseif (isset($_REQUEST['create_index'])) {    $add_fields = $_REQUEST['added_fields'];} else {    $add_fields = 1;}// end preparing form values?><form action="./tbl_indexes.php" method="post" name="index_frm" id="index_frm" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>    onsubmit="if (typeof(this.elements['index[Key_name]'].disabled) != 'undefined') {        this.elements['index[Key_name]'].disabled = false}"><?php$form_params = array(    'db'    => $db,    'table' => $table,);if (isset($_REQUEST['create_index'])) {    $form_params['create_index'] = 1;} elseif (isset($_REQUEST['old_index'])) {    $form_params['old_index'] = $_REQUEST['old_index'];} elseif (isset($_REQUEST['index'])) {    $form_params['old_index'] = $_REQUEST['index'];}echo PMA_generate_common_hidden_inputs($form_params);?><fieldset id="index_edit_fields"><?phpif ($GLOBALS['is_ajax_request'] != true) {?>    <legend><?php    if (isset($_REQUEST['create_index'])) {        echo __('Add index');    } else {        echo __('Edit index');    }?>    </legend><?php}?><div class='index_info'>    <div>        <div class="label">            <strong>                <label for="input_index_name">                    <?php echo __('Index name:'); ?>                    <?php echo PMA_showhint(PMA_Message::notice(__('("PRIMARY" <b>must</b> be the name of and <b>only of</b> a primary key!)'))); ?>                </label>            </strong>        </div>        <input type="text" name="index[Key_name]" id="input_index_name" size="25"            value="<?php echo htmlspecialchars($index->getName()); ?>" onfocus="this.select()" />    </div>    <div>        <div class="label">            <strong>                <label for="select_index_type">                    <?php echo __('Index type:'); ?>                    <?php echo PMA_showMySQLDocu('SQL-Syntax', 'ALTER_TABLE'); ?>                </label>            </strong>        </div>        <select name="index[Index_type]" id="select_index_type" >            <?php echo $index->generateIndexSelector(); ?>        </select>    </div>    <div class="clearfloat"></div></div><table id="index_columns"><thead><tr><th><?php echo __('Column'); ?></th>    <th><?php echo __('Size'); ?></th></tr></thead><tbody><?php$odd_row = true;$spatial_types = array(    'geometry', 'point', 'linestring', 'polygon', 'multipoint',    'multilinestring', 'multipolygon', 'geomtrycollection');foreach ($index->getColumns() as $column) {    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td><select name="index[columns][names][]">            <option value="">-- <?php echo __('Ignore'); ?> --</option>    <?php    foreach ($fields as $field_name => $field_type) {        if (($index->getType() != 'FULLTEXT' || preg_match('/(char|text)/i', $field_type))            && ($index->getType() != 'SPATIAL' || in_array($field_type, $spatial_types))        ) {            echo '<option value="' . htmlspecialchars($field_name) . '"'                 . (($field_name == $column->getName()) ? ' selected="selected"' : '') . '>'                 . htmlspecialchars($field_name) . ' [' . htmlspecialchars($field_type) . ']'                 . '</option>' . "\n";        }    } // end foreach $fields    ?>        </select>    </td>    <td><input type="text" size="5" onfocus="this.select()"            name="index[columns][sub_parts][]"            value="<?php if ($index->getType() != 'SPATIAL') { echo $column->getSubPart(); } ?>" />    </td></tr>    <?php    $odd_row = !$odd_row;} // end foreach $edited_index_info['Sequences']for ($i = 0; $i < $add_fields; $i++) {    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td><select name="index[columns][names][]">            <option value="">-- <?php echo __('Ignore'); ?> --</option>    <?php    foreach ($fields as $field_name => $field_type) {        echo '<option value="' . htmlspecialchars($field_name) . '">'             . htmlspecialchars($field_name) . ' [' . htmlspecialchars($field_type) . ']'             . '</option>' . "\n";    } // end foreach $fields    ?>        </select>    </td>    <td><input type="text" size="5" onfocus="this.select()"            name="index[columns][sub_parts][]" value="" />    </td></tr>    <?php    $odd_row = !$odd_row;} // end foreach $edited_index_info['Sequences']?></tbody></table></fieldset><fieldset class="tblFooters"><?php    if ($GLOBALS['is_ajax_request'] != true) {?>    <input type="submit" name="do_save_data" value="<?php echo __('Save'); ?>" />    <span id="addMoreColumns"><?phpecho __('Or') . ' ';printf(    __('Add to index &nbsp;%s&nbsp;column(s)') . "\n",    '<input type="text" name="added_fields" size="2" value="1" />');echo '<input type="submit" name="add_fields" value="' . __('Go') . '" />' . "\n";?>    </span><?php    } else {        $btn_value = sprintf(__('Add %d column(s) to index'), 1);        echo '<div class="slider"></div>';        echo '<div class="add_fields">';        echo '<input type="submit" value="' . $btn_value . '" />';        echo '</div>';    }?></fieldset></form><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__substr_info(){    return array(        'info' => __('Displays a part of a string. The first option is the number of characters to skip from the beginning of the string (Default 0). The second option is the number of characters to return (Default: until end of string). The third option is the string to append and/or prepend when truncation occurs (Default: "...").'),        );}/** * */function PMA_transformation_text_plain__substr($buffer, $options = array(), $meta = ''){    // possibly use a global transform and feed it with special options:    // include './libraries/transformations/global.inc.php';    // further operations on $buffer using the $options[] array.    if (!isset($options[0]) ||  $options[0] == '') {        $options[0] = 0;    }    if (!isset($options[1]) ||  $options[1] == '') {        $options[1] = 'all';    }    if (!isset($options[2]) || $options[2] == '') {        $options[2] = '...';    }    $newtext = '';    if ($options[1] != 'all') {        $newtext = PMA_substr($buffer, $options[0], $options[1]);    } else {        $newtext = PMA_substr($buffer, $options[0]);    }    $length = strlen($newtext);    $baselength = strlen($buffer);    if ($length != $baselength) {        if ($options[0] != 0) {            $newtext = $options[2] . $newtext;        }        if (($length + $options[0]) != $baselength) {            $newtext .= $options[2];        }    }    return $newtext;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package     BLOBStreaming *//** * Initializes PBMS database * * @return bool */function initPBMSDatabase(){    // If no other choice then try this.    $query = "create database IF NOT EXISTS pbms;";    /*     * The user may not have privileges to create the 'pbms' database     * so if it doesn't exist then we perform a select on a pbms system     * table in an already existing database which will cause the PBMS     * daemon to create the 'pbms' database.     */    $db_array = PMA_DBI_fetch_result('SHOW DATABASES;');    if (! empty($db_array)) {        $target = "";        foreach ($db_array as $current_db) {            if ($current_db == 'pbms') {                return true;            }            if ($target == "") {                if ($current_db != 'pbxt'                    && ! PMA_is_system_schema($current_db, true)                ) {                    $target = $current_db;                }            }        }        if ($target != "") {            // If it exists this table will not contain much            $query = "select * from $target.pbms_metadata_header";        }    }    $result = PMA_DBI_query($query);    if (! $result) {        return false;    }    return true;}/** * checks whether the necessary plugins for BLOBStreaming exist * * @access  public * @return  boolean*/function checkBLOBStreamingPlugins(){    if (PMA_cacheGet('skip_blobstreaming', true) === true) {        return false;    }    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    // return if unable to load PMA configuration    if (empty($PMA_Config)) {        return false;    }    // If we don't know that we can skip blobstreaming, we continue    // verifications; anyway, in case we won't skip blobstreaming,    // we still need to set some variables in non-persistent settings,    // which is done via $PMA_Config->set().    /** Retrieve current server configuration;     *  at this point, $PMA_Config->get('Servers') contains the server parameters     *  as explicitely defined in config.inc.php, so it cannot be used; it's     *  better to use $GLOBALS['cfg']['Server'] which contains the explicit     *  parameters merged with the default ones     *     */    $serverCfg = $GLOBALS['cfg']['Server'];    // return if unable to retrieve current server configuration    if (! $serverCfg) {        return false;    }    // if PHP extension in use is 'mysql', specify element 'PersistentConnections'    if ($serverCfg['extension'] == "mysql") {        $serverCfg['PersistentConnections'] = $PMA_Config->settings['PersistentConnections'];    }    // if connection type is TCP, unload socket variable    if (strtolower($serverCfg['connect_type']) == "tcp") {        $serverCfg['socket'] = "";    }    $has_blobstreaming = PMA_cacheGet('has_blobstreaming', true);    if ($has_blobstreaming === null) {        if (! PMA_DRIZZLE && PMA_MYSQL_INT_VERSION >= 50109) {            // Retrieve MySQL plugins            $existing_plugins = PMA_DBI_fetch_result('SHOW PLUGINS');            foreach ($existing_plugins as $one_existing_plugin) {                // check if required plugins exist                if ( strtolower($one_existing_plugin['Library']) == 'libpbms.so'                    && $one_existing_plugin['Status'] == "ACTIVE"                ) {                    $has_blobstreaming = true;                    break;                }            }            unset($existing_plugins, $one_existing_plugin);        } else if (PMA_DRIZZLE) {            $has_blobstreaming = (bool) PMA_DBI_fetch_result(                "SELECT 1                FROM data_dictionary.plugins                WHERE module_name = 'PBMS'                    AND is_active = true                LIMIT 1"            );        }        PMA_cacheSet('has_blobstreaming', $has_blobstreaming, true);    }    // set variable indicating BS plugin existence    $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', $has_blobstreaming);    if (! $has_blobstreaming) {        PMA_cacheSet('skip_blobstreaming', true, true);        return false;    }    if ($has_blobstreaming) {        $bs_variables = PMA_BS_GetVariables();        // if no BS variables exist, set plugin existence to false and return        if (count($bs_variables) == 0) {            $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', false);            PMA_cacheSet('skip_blobstreaming', true, true);            PMA_cacheSet('has_blobstreaming', false, true);            return false;        } // end if (count($bs_variables) <= 0)        // Check that the required pbms functions exist:        if (function_exists("pbms_connect") == false            || function_exists("pbms_error") == false            || function_exists("pbms_close") == false            || function_exists("pbms_is_blob_reference") == false            || function_exists("pbms_get_info") == false            || function_exists("pbms_get_metadata_value") == false            || function_exists("pbms_add_metadata") == false            || function_exists("pbms_read_stream") == false        ) {            // We should probably notify the user that they need to install            // the pbms client lib and PHP extension to make use of blob streaming.            $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', false);            PMA_cacheSet('skip_blobstreaming', true, true);            PMA_cacheSet('has_blobstreaming', false, true);            return false;        }        if (function_exists("pbms_connection_pool_size")) {            if ( isset($PMA_Config->settings['pbms_connection_pool_size'])) {                $pool_size = $PMA_Config->settings['pbms_connection_pool_size'];                if ($pool_size == "") {                    $pool_size = 1;                }            } else {                $pool_size = 1;            }            pbms_connection_pool_size($pool_size);        }         // get BS server port        $BS_PORT = $bs_variables['pbms_port'];        // if no BS server port or 'pbms' database exists,        // set plugin existance to false and return        if ((! $BS_PORT) || (! initPBMSDatabase())) {            $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', false);            PMA_cacheSet('skip_blobstreaming', true, true);            return false;        } // end if (!$BS_PORT)        // Ping PBMS: the database doesn't need to exist for this to work.        if (pbms_connect($serverCfg['host'], $BS_PORT, "anydb") == false) {            $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', false);            PMA_cacheSet('skip_blobstreaming', true, true);            return false;        }        pbms_close();        if (function_exists("pbms_pconnect")) {            $PMA_Config->set('PBMS_PCONNECT_EXISTS', true);        } else {            $PMA_Config->set('PBMS_PCONNECT_EXISTS', false);        }        // add selected BS, CURL and fileinfo library variables to PMA configuration        $PMA_Config->set('BLOBSTREAMING_PORT', $BS_PORT);        $PMA_Config->set('BLOBSTREAMING_HOST', $serverCfg['host']);        $PMA_Config->set('BLOBSTREAMING_SERVER', $serverCfg['host'] . ':' . $BS_PORT);        $PMA_Config->set('PHP_PBMS_EXISTS', false);        $PMA_Config->set('FILEINFO_EXISTS', false);        // check if PECL's fileinfo library exist        $finfo = null;        if (function_exists("finfo_open")) {            $finfo = finfo_open(FILEINFO_MIME);        }        // fileinfo library exists, set necessary variable and close resource        if (! empty($finfo)) {            $PMA_Config->set('FILEINFO_EXISTS', true);            finfo_close($finfo);        } // end if (!empty($finfo))    } else {        PMA_cacheSet('skip_blobstreaming', true, true);        return false;    } // end if ($has_blobstreaming)    return true;}/** * returns a list of BLOBStreaming variables used by MySQL * * @access  public * @return  array - list of BLOBStreaming variables */function PMA_BS_GetVariables(){    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    // return if unable to load PMA configuration    if (empty($PMA_Config)) {        return null;    }    // run query to retrieve BS variables    $query = "SHOW VARIABLES LIKE '%pbms%'";    $result = PMA_DBI_query($query);    $BS_Variables = array();    // while there are records to retrieve    while ($data = @PMA_DBI_fetch_assoc($result)) {        $BS_Variables[$data['Variable_name']] = $data['Value'];    }    // return BS variables    return $BS_Variables;}/** * Retrieves and shows PBMS error. * * @param sting $msg error message * * @return nothing */function PMA_BS_ReportPBMSError($msg){    $tmp_err = pbms_error();    PMA_showMessage(__('PBMS error') . " $msg $tmp_err");}/** * Tries to connect to PBMS server. * * @param string $db_name Database name * @param bool   $quiet   Whether to report errors * * @return bool Connection status. */function PMA_do_connect($db_name, $quiet){    $PMA_Config = $GLOBALS['PMA_Config'];    // return if unable to load PMA configuration    if (empty($PMA_Config)) {        return false;    }    // generate bs reference link    $pbms_host = $PMA_Config->get('BLOBSTREAMING_HOST');    $pbms_port = $PMA_Config->get('BLOBSTREAMING_PORT');    if ($PMA_Config->get('PBMS_PCONNECT_EXISTS')) {        // Open a persistent connection.        $ok = pbms_pconnect($pbms_host, $pbms_port, $db_name);    } else {        $ok = pbms_connect($pbms_host, $pbms_port, $db_name);    }    if ($ok == false) {        if ($quiet == false) {            PMA_BS_ReportPBMSError(                __('PBMS connection failed:')                . " pbms_connect($pbms_host, $pbms_port, $db_name)"            );        }        return false;    }    return true;}/** * Disconnects from PBMS server. * * @return nothing */function PMA_do_disconnect(){    pbms_close();}/** * Checks whether the BLOB reference looks valid * * @param string $bs_reference BLOB reference * @param string $db_name      Database name * * @return bool True on success. */function PMA_BS_IsPBMSReference($bs_reference, $db_name){    if (PMA_cacheGet('skip_blobstreaming', true)) {        return false;    }    // You do not really need a connection to the PBMS Daemon    // to check if a reference looks valid but unfortunalty the API    // requires one at this point so until the API is updated    // we need to epen one here. If you use pool connections this    // will not be a performance problem.    if (PMA_do_connect($db_name, false) == false) {        return false;    }    $ok = pbms_is_blob_reference($bs_reference);    return $ok ;}//------------function PMA_BS_CreateReferenceLink($bs_reference, $db_name){    if (PMA_do_connect($db_name, false) == false) {        return __('Error');    }    if (pbms_get_info(trim($bs_reference)) == false) {        PMA_BS_ReportPBMSError(            __('PBMS get BLOB info failed:')            . " pbms_get_info($bs_reference)"        );        PMA_do_disconnect();        return __('Error');    }    $content_type = pbms_get_metadata_value("Content-Type");    if ($content_type == false) {        $br = trim($bs_reference);        PMA_BS_ReportPBMSError(            "PMA_BS_CreateReferenceLink('$br', '$db_name'): "            . __('PBMS get BLOB Content-Type failed')        );    }    PMA_do_disconnect();    if (! $content_type) {        $content_type = "image/jpeg";    }    $bs_url = PMA_BS_getURL($bs_reference);    if (empty($bs_url)) {        PMA_BS_ReportPBMSError(__('No blob streaming server configured!'));        return 'Error';    }    $output = $content_type;    // specify custom HTML for various content types    switch ($content_type) {    // no content specified    case null:        $output = "NULL";        break;    // image content    case 'image/jpeg':    case 'image/png':        $output .= ' (<a href="' . $bs_url . '" target="new">'            . __('View image') . '</a>)';        break;    // audio content    case 'audio/mpeg':        $output .= ' (<a href="#" onclick="popupBSMedia(\''            . PMA_generate_common_url() . '\',\'' . urlencode($bs_reference)            . '\', \'' . urlencode($content_type) . '\','            . ($is_custom_type ? 1 : 0) . ', 640, 120)">' . __('Play audio')            . '</a>)';        break;    // video content    case 'application/x-flash-video':    case 'video/mpeg':        $output .= ' (<a href="#" onclick="popupBSMedia(\''            . PMA_generate_common_url() . '\',\'' . urlencode($bs_reference)            . '\', \'' . urlencode($content_type) . '\','            . ($is_custom_type ? 1 : 0) . ', 640, 480)">' . __('View video')            . '</a>)';        break;    // unsupported content. specify download    default:        $output .= ' (<a href="' . $bs_url . '" target="new">'            . __('Download file') . '</a>)';    }    return $output;}/** * In the future there may be server variables to turn on/off PBMS * BLOB streaming on a per table or database basis. So in anticipation of this * PMA_BS_IsTablePBMSEnabled() passes in the table and database name even though * they are not currently needed. * * @param string $db_name  database name * @param string $tbl_name table name * @param string $tbl_type table type * * @return bool */function PMA_BS_IsTablePBMSEnabled($db_name, $tbl_name, $tbl_type){    if (PMA_cacheGet('skip_blobstreaming', true)) {        return false;    }    if ((isset($tbl_type) == false) || (strlen($tbl_type) == 0)) {        return false;    }    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    // return if unable to load PMA configuration    if (empty($PMA_Config)) {        return false;    }    if (! $PMA_Config->get('BLOBSTREAMING_PLUGINS_EXIST')) {        return false;    }    // This information should be cached rather than selecting it each time.    // $query = "SELECT count(*)  FROM information_schema.TABLES T,    // pbms.pbms_enabled E where T.table_schema = ". PMA_backquote($db_name) . "    // and T.table_name = ". PMA_backquote($tbl_name) . " and T.engine = E.name";    $query = "SELECT count(*)  FROM pbms.pbms_enabled E where E.name = '"        . PMA_sqlAddSlashes($tbl_type) . "'";    $result = PMA_DBI_query($query);    $data = PMA_DBI_fetch_row($result);    if ($data[0] == 1) {        return true;    }    return false;}//------------function PMA_BS_UpLoadFile($db_name, $tbl_name, $file_type, $file_name){    if (PMA_cacheGet('skip_blobstreaming', true)) {        return false;    }    if (PMA_do_connect($db_name, false) == false) {        return false;    }    $fh = fopen($file_name, 'r');    if (! $fh) {        PMA_do_disconnect();        PMA_showMessage(sprintf(__('Could not open file: %s'), $file_name));        return false;    }    pbms_add_metadata("Content-Type", $file_type);    $pbms_blob_url = pbms_read_stream($fh, filesize($file_name), $tbl_name);    if (! $pbms_blob_url) {        PMA_BS_ReportPBMSError("pbms_read_stream()");    }    fclose($fh);    PMA_do_disconnect();    return $pbms_blob_url;}//------------function PMA_BS_SetContentType($db_name, $bsTable, $blobReference, $contentType){    if (PMA_cacheGet('skip_blobstreaming', true)) {        return false;    }    // This is a really ugly way to do this but currently there is nothing better.    // In a future version of PBMS the system tables will be redesigned to make this    // more efficient.    $query = "SELECT Repository_id, Repo_blob_offset FROM pbms_reference"        . " WHERE Blob_url='" . PMA_sqlAddSlashes($blobReference) . "'";    //error_log(" PMA_BS_SetContentType: $query\n", 3, "/tmp/mylog");    $result = PMA_DBI_query($query);    //error_log(" $query\n", 3, "/tmp/mylog");    // if record exists    if ($data = PMA_DBI_fetch_assoc($result)) {        $where = "WHERE Repository_id=" . $data['Repository_id']           . " AND Repo_blob_offset=" . $data['Repo_blob_offset'] ;        $query = "SELECT name from  pbms_metadata $where";        $result = PMA_DBI_query($query);        if (PMA_DBI_num_rows($result) == 0) {            $query = "INSERT into pbms_metadata Values( ". $data['Repository_id']                . ", " . $data['Repo_blob_offset']  . ", 'Content_type', '"                . PMA_sqlAddSlashes($contentType)  . "')";        } else {            $query = "UPDATE pbms_metadata SET name = 'Content_type', Value = '"                . PMA_sqlAddSlashes($contentType) . "' $where";        }        //error_log("$query\n", 3, "/tmp/mylog");        PMA_DBI_query($query);    } else {        return false;    }    return true;}//------------function PMA_BS_IsHiddenTable($table){    if ($table === 'pbms_repository'        || $table === 'pbms_reference'        || $table === 'pbms_metadata'        || $table === 'pbms_metadata_header'        || $table === 'pbms_dump'    ) {        return true;    }    return false;}//------------function PMA_BS_getURL($reference){    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    if (empty($PMA_Config)) {        return false;    }    // retrieve BS server variables from PMA configuration    $bs_server = $PMA_Config->get('BLOBSTREAMING_SERVER');    if (empty($bs_server)) {        return false;    }    $bs_url = PMA_linkURL('http://' . $bs_server . '/' . rtrim($reference));    return $bs_url;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * "Echo" service to allow force downloading of exported charts (png or svg) * and server status monitor settings * * @package PhpMyAdmin */require_once './libraries/common.inc.php';/* For chart exporting */if (isset($_REQUEST['filename']) && isset($_REQUEST['image'])) {    $allowed = array(        'image/png'     => 'png',        'image/svg+xml' => 'svg',    );    /* Check whether MIME type is allowed */    if (! isset($allowed[$_REQUEST['type']])) {        die(__('Invalid export type'));    }    /*     * Check file name to match mime type and not contain new lines     * to prevent response splitting.     */    $extension = $allowed[$_REQUEST['type']];    $valid_match = '/^[^\n\r]*\.' . $extension . '$/';    if (! preg_match($valid_match, $_REQUEST['filename'])) {        if (! preg_match('/^[^\n\r]*$/', $_REQUEST['filename'])) {            /* Filename is unsafe, discard it */            $filename = 'download.' . $extension;        } else {            /* Add extension */            $filename = $_REQUEST['filename'] . '.' . $extension;        }    } else {        /* Filename from request should be safe here */        $filename = $_REQUEST['filename'];    }    /* Decode data */    if ($extension != 'svg') {        $data = substr($_REQUEST['image'], strpos($_REQUEST['image'], ',') + 1);        $data = base64_decode($data);    } else {        $data = $_REQUEST['image'];    }    /* Send download header */    PMA_download_header($filename, $_REQUEST['type'], strlen($data));    /* Send data */    echo $data;/* For monitor chart config export */} else if (isset($_REQUEST['monitorconfig'])) {    PMA_download_header('monitor.cfg', 'application/force-download');    echo urldecode($_REQUEST['monitorconfig']);/* For monitor chart config import */} else if (isset($_REQUEST['import'])) {    header('Content-type: text/plain');    if(!file_exists($_FILES['file']['tmp_name'])) exit();    echo file_get_contents($_FILES['file']['tmp_name']);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * requirements */require_once './libraries/common.inc.php';/** * JS includes */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/jquery.cookie.js';$GLOBALS['js_include'][] = 'jquery/jquery.tablesorter.js';$GLOBALS['js_include'][] = 'server_plugins.js';/** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($GLOBALS['cfg']['MainPageIconic']        ? '<img class="icon" src="' . $pmaThemeImage . 'b_engine.png"'            .' width="16" height="16" alt="" />' : '')   . "\n" . __('Plugins') . "\n"   . '</h2>' . "\n";/** * Prepare plugin list */$sql = "SELECT p.plugin_name, p.plugin_type, p.is_active, m.module_name, m.module_library,        m.module_version, m.module_author, m.module_description, m.module_license    FROM data_dictionary.plugins p        JOIN data_dictionary.modules m USING (module_name)    ORDER BY m.module_name, p.plugin_type, p.plugin_name";$res = PMA_DBI_query($sql);$plugins = array();$modules = array();while ($row = PMA_DBI_fetch_assoc($res)) {    $plugins[$row['plugin_type']][] = $row;    $modules[$row['module_name']]['info'] = $row;    $modules[$row['module_name']]['plugins'][$row['plugin_type']][] = $row;}PMA_DBI_free_result($res);// sort plugin list (modules are already sorted)ksort($plugins);/** * Displays the page */?><script type="text/javascript">pma_theme_image = '<?php echo $GLOBALS['pmaThemeImage']; ?>';</script><div id="pluginsTabs">    <ul>        <li><a href="#plugins_plugins"><?php echo __('Plugins'); ?></a></li>        <li><a href="#plugins_modules"><?php echo __('Modules'); ?></a></li>    </ul>    <div id="plugins_plugins">        <div id="sectionlinks">        <?php        foreach ($plugins as $plugin_type => $plugin_list) {            $key = 'plugins-' . preg_replace('/[^a-z]/', '', strtolower($plugin_type));            echo '<a href="#' . $key . '">' . htmlspecialchars($plugin_type) . '</a>' . "\n";        }        ?>        </div>        <br />        <?php        foreach ($plugins as $plugin_type => $plugin_list) {            $key = 'plugins-' . preg_replace('/[^a-z]/', '', strtolower($plugin_type));            sort($plugin_list);            ?>            <table class="data_full_width" id="<?php echo $key; ?>">            <caption class="tblHeaders">                <a class="top" href="#serverinfo"><?php                    echo __('Begin');                    echo $GLOBALS['cfg']['MainPageIconic']                        ? '<img src="' . $GLOBALS['pmaThemeImage'] .                            's_asc.png" width="11" height="9" align="middle" alt="" />'                        : ''; ?></a>                <?php echo htmlspecialchars($plugin_type); ?>            </caption>            <thead>                <tr>                    <th><?php echo __('Plugin'); ?></th>                    <th><?php echo __('Module'); ?></th>                    <th><?php echo __('Library'); ?></th>                    <th><?php echo __('Version'); ?></th>                    <th><?php echo __('Author'); ?></th>                    <th><?php echo __('License'); ?></th>                </tr>            </thead>            <tbody>            <?php            $odd_row = false;            foreach ($plugin_list as $plugin) {                $odd_row = !$odd_row;            ?>            <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">                <th><?php echo htmlspecialchars($plugin['plugin_name']); ?></th>                <td><?php echo htmlspecialchars($plugin['module_name']); ?></td>                <td><?php echo htmlspecialchars($plugin['module_library']); ?></td>                <td><?php echo htmlspecialchars($plugin['module_version']); ?></td>                <td><?php echo htmlspecialchars($plugin['module_author']); ?></td>                <td><?php echo htmlspecialchars($plugin['module_license']); ?></td>            </tr>            <?php            }            ?>            </tbody>            </table>            <?php        }        ?>    </div>    <div id="plugins_modules">        <table class="data_full_width">        <thead>            <tr>                <th><?php echo __('Module'); ?></th>                <th><?php echo __('Description'); ?></th>                <th><?php echo __('Library'); ?></th>                <th><?php echo __('Version'); ?></th>                <th><?php echo __('Author'); ?></th>                <th><?php echo __('License'); ?></th>            </tr>        </thead>        <tbody>        <?php        $odd_row = false;        foreach ($modules as $module_name => $module) {            $odd_row = !$odd_row;        ?>            <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">                <th rowspan="2"><?php echo htmlspecialchars($module_name); ?></th>                <td><?php echo htmlspecialchars($module['info']['module_description']); ?></td>                <td><?php echo htmlspecialchars($module['info']['module_library']); ?></td>                <td><?php echo htmlspecialchars($module['info']['module_version']); ?></td>                <td><?php echo htmlspecialchars($module['info']['module_author']); ?></td>                <td><?php echo htmlspecialchars($module['info']['module_license']); ?></td>            </tr>            <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">                <td colspan="5">                    <table>                        <tbody>                        <?php                        foreach ($module['plugins'] as $plugin_type => $plugin_list) {                        ?>                            <tr class="noclick">                                <td><b class="plugin-type"><?php echo htmlspecialchars($plugin_type); ?></b></td>                                <td>                                <?php                                for ($i = 0; $i < count($plugin_list); $i++) {                                    echo ($i != 0 ? '<br />' : '') . htmlspecialchars($plugin_list[$i]['plugin_name']);                                    if (!$plugin_list[$i]['is_active']) {                                        echo ' <small class="attention">' . __('disabled') . '</small>';                                    }                                }                                ?>                                </td>                            </tr>                        <?php                        }                        ?>                        </tbody>                    </table>                </td>            </tr>        <?php        }        ?>        </tbody>        </table>    </div></div><?php/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for listing directories * * @todo rename to file_listing.lib.php * @package PhpMyAdmin *//** * Returns array of filtered file names * * @param string $dir        directory to list * @param string $expression regular expression to match files * @return array   sorted file list on success, false on failure */function PMA_getDirContent($dir, $expression = ''){    if (file_exists($dir) && $handle = @opendir($dir)) {        $result = array();        if (substr($dir, -1) != '/') {            $dir .= '/';        }        while ($file = @readdir($handle)) {        // for PHP < 5.2.4, is_file() gives a warning when using open_basedir        // and verifying '..' or '.'            if ('.' != $file && '..' != $file && is_file($dir . $file) && ($expression == '' || preg_match($expression, $file))) {                $result[] = $file;            }        }        @closedir($handle);        asort($result);        return $result;    } else {        return false;    }}/** * Returns options of filtered file names * * @param string $dir        directory to list * @param string $extensions regullar expression to match files * @param string $active     currently active choice * @return array   sorted file list on success, false on failure */function PMA_getFileSelectOptions($dir, $extensions = '', $active = ''){    $list = PMA_getDirContent($dir, $extensions);    if ($list === false) {        return false;    }    $result = '';    foreach ($list as $key => $val) {        $result .= '<option value="'. htmlspecialchars($val) . '"';        if ($val == $active) {            $result .= ' selected="selected"';        }        $result .= '>' . htmlspecialchars($val) . '</option>' . "\n";    }    return $result;}/** * Get currently supported decompressions. * * @return string | separated list of extensions usable in PMA_getDirContent */function PMA_supportedDecompressions(){    global $cfg;    $compressions = '';    if ($cfg['GZipDump'] && @function_exists('gzopen')) {        if (!empty($compressions)) {            $compressions .= '|';        }        $compressions .= 'gz';    }    if ($cfg['BZipDump'] && @function_exists('bzopen')) {        if (!empty($compressions)) {            $compressions .= '|';        }        $compressions .= 'bz2';    }    if ($cfg['ZipDump'] && @function_exists('gzinflate')) {        if (!empty($compressions)) {            $compressions .= '|';        }        $compressions .= 'zip';    }    return $compressions;}
<?php/** * Factory class that handles the creation of geometric objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Factory{    /**     * Returns the singleton instance of geometric class of the given type.     *     * @param string $type type of the geometric object     *     * @throws Exception     *     * @return the singleton instance of geometric class of the given type     */    public static function factory($type)    {        include_once './libraries/gis/pma_gis_geometry.php';        $type_lower = strtolower($type);        if (! file_exists('./libraries/gis/pma_gis_' . $type_lower . '.php')) {            return false;        }        if (include_once './libraries/gis/pma_gis_' . $type_lower . '.php') {            switch($type) {            case 'MULTIPOLYGON' :                return PMA_GIS_Multipolygon::singleton();            case 'POLYGON' :                return PMA_GIS_Polygon::singleton();            case 'MULTIPOINT' :                return PMA_GIS_Multipoint::singleton();            case 'POINT' :                return PMA_GIS_Point::singleton();            case 'MULTILINESTRING' :                return PMA_GIS_Multilinestring::singleton();            case 'LINESTRING' :                return PMA_GIS_Linestring::singleton();            case 'GEOMETRYCOLLECTION' :                return PMA_GIS_Geometrycollection::singleton();            default :                return false;            }        } else {            return false;        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//****/require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'server_synchronize.js';require_once './libraries/server_common.inc.php';/*** Contains all the functions specific to synchronization*/require './libraries/server_synchronize.lib.php';/** * Increases the time limit up to the configured maximum */@set_time_limit($cfg['ExecTimeLimit']);/** * Displays the links */require './libraries/server_links.inc.php';/*** Enables warnings on the page*///$cfg['Error_Handler']['display'] = true;//$cfg['Error_Handler']['gather'] = true;/*** Save the value of token generated for this page*/if (isset($_REQUEST['token'])) {    $_SESSION['token'] = $_REQUEST['token'];}// variable for code saving$cons = array ("src", "trg");/** * Displays the page when 'Go' is pressed */if ((isset($_REQUEST['submit_connect']))) {    foreach ($cons as $con) {        ${"{$con}_host"}     = $_REQUEST[$con . '_host'];        ${"{$con}_username"} = $_REQUEST[$con . '_username'];        ${"{$con}_password"} = $_REQUEST[$con . '_pass'];        ${"{$con}_port"}     = $_REQUEST[$con . '_port'];        ${"{$con}_socket"}   = $_REQUEST[$con . '_socket'];        ${"{$con}_db"}       = $_REQUEST[$con . '_db'];        ${"{$con}_type"}     = $_REQUEST[$con . '_type'];        if (${"{$con}_type"} == 'cur') {            ${"{$con}_connection"} = null;            ${"{$con}_server"} = null;            ${"{$con}_db"}       = $_REQUEST[$con . '_db_sel'];            continue;        }        if (isset(${"{$con}_socket"}) && ! empty(${"{$con}_socket"})) {            ${"{$con}_server"}['socket'] = ${"{$con}_socket"};        } else {            ${"{$con}_server"}['host'] = ${"{$con}_host"};            if (isset(${"{$con}_port"})                && ! empty(${"{$con}_port"})                && ((int)${"{$con}_port"} * 1) > 0            ) {                ${"{$con}_server"}['port'] = (int)${"{$con}_port"};            }        }        ${"{$con}_connection"} = PMA_DBI_connect(${"{$con}_username"},            ${"{$con}_password"}, $is_controluser = false,            ${"{$con}_server"}, $auxiliary_connection = true);    } // end foreach ($cons as $con)    if ((! $src_connection && $src_type != 'cur')        || (! $trg_connection && $trg_type != 'cur')    ) {        /**        * Displays the connection error string if        * connections are not established        */        echo '<div class="error">';        if (! $src_connection && $src_type != 'cur') {            echo __('Could not connect to the source') . '<br />';        }        if (! $trg_connection && $trg_type != 'cur') {            echo __('Could not connect to the target');        }        echo '</div>';        unset($_REQUEST['submit_connect']);    } else {        /**        * Creating the link object for both source and target databases and        * selecting the source and target databases using these links        */        foreach ($cons as $con) {            if (${"{$con}_connection"} != null) {                ${"{$con}_link"} = PMA_DBI_connect(${"{$con}_username"},                    ${"{$con}_password"}, $is_controluser = false, ${"{$con}_server"});            } else {                ${"{$con}_link"} = null;            }            ${"{$con}_db_selected"} = PMA_DBI_select_db(${"{$con}_db"}, ${"{$con}_link"});            ${"{$con}_version"} = PMA_DBI_fetch_value('SELECT VERSION()', 0, 0, ${"{$con}_link"});            ${"{$con}_is_drizzle"} = (bool)preg_match('/\d{4}\./', ${"{$con}_version"});        } // end foreach ($cons as $con)        if (($src_db_selected != 1) || ($trg_db_selected != 1)) {            /**            * Displays error string if the database(s) did not exist            */            echo '<div class="error">';            if ($src_db_selected != 1) {                echo sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($src_db));            }            if ($trg_db_selected != 1) {                echo sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($trg_db));            }            echo '</div>';            unset($_REQUEST['submit_connect']);        } else if (($src_db_selected == 1) && ($trg_db_selected == 1)) {            /**            * Using PMA_DBI_get_tables() to get all the tables            * from target and source databases.            */            $src_tables = PMA_DBI_get_tables($src_db, $src_link);            $source_tables_num = sizeof($src_tables);            $trg_tables = PMA_DBI_get_tables($trg_db, $trg_link);            $target_tables_num = sizeof($trg_tables);            /**            * initializing arrays to save matching and non-matching            * table names from target and source databases.            */            $unmatched_num_src = 0;            $source_tables_uncommon = array();            $unmatched_num_trg = 0;            $target_tables_uncommon = array();            $matching_tables = array();            $matching_tables_num = 0;            /**            * Using PMA_getMatchingTables to find which of the tables' names match            * in target and source database.            */            PMA_getMatchingTables($trg_tables, $src_tables, $matching_tables, $source_tables_uncommon);            /**            * Finding the uncommon tables for the target database            * using function PMA_getNonMatchingTargetTables()            */            PMA_getNonMatchingTargetTables($trg_tables, $matching_tables, $target_tables_uncommon);            /**            * Initializing several arrays to save the data and structure            * difference between the source and target databases.            */            $row_count = array();   //number of rows in source table that needs to be created in target database            $fields_num = array();  //number of fields in each matching table            $delete_array = array(); //stores the primary key values for target tables that have excessive rows than corresponding source tables.            $insert_array = array(array(array()));// stores the primary key values for the rows in each source table that are not present in target tables.            $update_array = array(array(array())); //stores the primary key values, name of field to be updated, value of the field to be updated for                                                    // each row of matching table.            $matching_tables_fields = array(); //contains the fields' names for each matching table            $matching_tables_keys   = array(); //contains the primary keys' names for each matching table            $uncommon_tables_fields = array(); //coantains the fields for all the source tables that are not present in target            $matching_tables_num = sizeof($matching_tables);            $source_columns = array();  //contains the full columns' information for all the source tables' columns            $target_columns = array();  //contains the full columns' information for all the target tables' columns            $uncommon_columns = array(); //contains names of columns present in source table but absent from the corresponding target table            $source_indexes = array();   //contains indexes on all the source tables            $target_indexes = array();   //contains indexes on all the target tables            $add_indexes_array = array(); //contains the indexes name present in source but absent from target tables            $target_tables_keys = array(); //contains the keys of all the target tables            $alter_indexes_array = array();  //contains the names of all the indexes for each table that need to be altered in target database            $remove_indexes_array = array();  //contains the names of indexes that are excessive in target tables            $alter_str_array = array(array());  //contains the criteria for each column that needs to be altered in target tables            $add_column_array = array(array()); //contains the name of columns that need to be added in target tables            /**            * The criteria array contains all the criteria against which columns are compared for differences.            */            $criteria = array('Field', 'Type', 'Null', 'Collation', 'Key', 'Default', 'Comment');            for ($i = 0; $i < sizeof($matching_tables); $i++) {                /**                * Finding out all the differences structure, data and index diff                * for all the matching tables only                */                PMA_dataDiffInTables($src_db, $trg_db, $src_link, $trg_link,                    $matching_tables, $matching_tables_fields, $update_array,                    $insert_array, $delete_array, $fields_num, $i,                    $matching_tables_keys);                PMA_structureDiffInTables($src_db, $trg_db, $src_link, $trg_link,                    $matching_tables, $source_columns, $target_columns,                    $alter_str_array, $add_column_array, $uncommon_columns,                    $criteria, $target_tables_keys, $i);                PMA_indexesDiffInTables($src_db, $trg_db, $src_link, $trg_link,                    $matching_tables, $source_indexes, $target_indexes,                    $add_indexes_array, $alter_indexes_array, $remove_indexes_array, $i);            }            for ($j = 0; $j < sizeof($source_tables_uncommon); $j++) {                /**                * Finding out the number of rows to be added in tables                * that need to be added in target database                */                PMA_dataDiffInUncommonTables($source_tables_uncommon, $src_db,                    $src_link, $j, $row_count);            }            /**            * Storing all arrays in session for use when page is reloaded            * for each button press            */            $_SESSION['matching_tables'] = $matching_tables;            $_SESSION['update_array'] = $update_array;            $_SESSION['insert_array'] = $insert_array;            $_SESSION['src_db'] = $src_db;            $_SESSION['trg_db'] =  $trg_db;            $_SESSION['matching_fields'] = $matching_tables_fields;            $_SESSION['src_uncommon_tables'] = $source_tables_uncommon;            $_SESSION['src_username'] = $src_username ;            $_SESSION['trg_username'] = $trg_username;            $_SESSION['src_password'] = $src_password;            $_SESSION['trg_password'] = $trg_password;            $_SESSION['trg_password'] = $trg_password;            $_SESSION['src_server']   = $src_server;            $_SESSION['trg_server']   = $trg_server;            $_SESSION['src_type']     = $src_type;            $_SESSION['trg_type']     = $trg_type;            $_SESSION['matching_tables_keys'] = $matching_tables_keys;            $_SESSION['uncommon_tables_fields'] = $uncommon_tables_fields;            $_SESSION['uncommon_tables_row_count'] = $row_count;            $_SESSION['target_tables_uncommon'] = $target_tables_uncommon;            $_SESSION['uncommon_tables'] = $source_tables_uncommon;            $_SESSION['delete_array'] = $delete_array;            $_SESSION['uncommon_columns'] = $uncommon_columns;            $_SESSION['source_columns'] = $source_columns;            $_SESSION['alter_str_array'] = $alter_str_array;            $_SESSION['target_tables_keys'] = $target_tables_keys;            $_SESSION['add_column_array'] = $add_column_array;            $_SESSION['criteria'] = $criteria;            $_SESSION['target_tables'] = $trg_tables;            $_SESSION['add_indexes_array'] = $add_indexes_array;            $_SESSION['alter_indexes_array'] = $alter_indexes_array;            $_SESSION['remove_indexes_array'] = $remove_indexes_array;            $_SESSION['source_indexes'] = $source_indexes;            $_SESSION['target_indexes'] = $target_indexes;            /**            * Displays the sub-heading and icons showing Structure Synchronization            * and Data Synchronization            */            ?>            <form name="synchronize_form" id="synchronize_form" method="post" action="server_synchronize.php">                <?php echo PMA_generate_common_hidden_inputs('', ''); ?>            <table width="40%">            <tr>                <td>                    <img class="icon" src="<?php echo $pmaThemeImage; ?>new_struct.png" width="16" height="16" alt="" />                    <?php echo __('Structure Synchronization'); ?>                </td>                <td>                    <img class="icon" src="<?php echo $pmaThemeImage; ?>new_data.png" width="16" height="16" alt="" />                    <?php echo __('Data Synchronization'); ?>                </td>            </tr>            </table>            <?php            /**            * Displays the tables containing the source tables names,            * their difference with the target tables and target tables names.            */            PMA_syncDisplayHeaderCompare($src_db, $trg_db);            $rows = array();            /**            * Display the matching tables' names and difference, first            */            for ($i = 0; $i < count($matching_tables); $i++) {                /**                * Calculating the number of updates for each matching table                */                if (isset($update_array[$i]) && isset($update_array[$i][0])                        && !empty($matching_tables_keys[$i][0])                        && isset($update_array[$i][0][$matching_tables_keys[$i][0]])) {                    $num_of_updates = sizeof($update_array[$i]);                } else {                    $num_of_updates = 0;                }                /**                * Calculating the number of insertions for each matching table                */                if (isset($insert_array[$i]) && isset($insert_array[$i][0])                        && !empty($matching_tables_keys[$i])                        && isset($insert_array[$i][0][$matching_tables_keys[$i][0]])) {                    $num_of_insertions = sizeof($insert_array[$i]);                } else {                    $num_of_insertions = 0;                }                /**                * Calculating the number of alter columns, number of columns to be                * added, number of columns to be removed,                * number of index to be added and removed.                */                $num_alter_cols  = 0;                $num_insert_cols = 0;                $num_remove_cols = 0;                $num_add_index   = 0;                $num_remove_index = 0;                if (isset($alter_str_array[$i])) {                    $num_alter_cols = sizeof($alter_str_array[$i]);                }                if (isset($add_column_array[$i])) {                    $num_insert_cols = sizeof($add_column_array[$i]);                }                if (isset($uncommon_columns[$i])) {                    $num_remove_cols = sizeof($uncommon_columns[$i]);                }                if (isset($add_indexes_array[$i])) {                    $num_add_index = sizeof($add_indexes_array[$i]);                }                if (isset($remove_indexes_array[$i])) {                    $num_remove_index = sizeof($remove_indexes_array[$i]);                }                if (isset($alter_indexes_array[$i])) {                    $num_add_index += sizeof($alter_indexes_array[$i]);                    $num_remove_index += sizeof($alter_indexes_array[$i]);                }                $btn_structure_params = null;                $btn_data_params = null;                /**                * Display the red button of structure synchronization if there                * exists any structure difference or index difference.                */                if (($num_alter_cols > 0)                    || ($num_insert_cols > 0)                    || ($num_remove_cols > 0)                    || ($num_add_index > 0)                    || ($num_remove_index > 0)                ) {                    $btn_structure_params = array($i, $num_alter_cols, $num_insert_cols,                        $num_remove_cols, $num_add_index, $num_remove_index);                }                /**                * Display the green button of data synchronization if there exists                * any data difference.                */                if ((isset($update_array[$i])                    || isset($insert_array[$i]))                    && !empty($matching_tables_keys[$i])                ) {                    if (isset($update_array[$i][0][$matching_tables_keys[$i][0]])                        || isset($insert_array[$i][0][$matching_tables_keys[$i][0]])                    ) {                        $btn_data_params = array($i, $num_of_updates,                            $num_of_insertions, null, null, null);                    }                }                $rows[] = array(                    'src_table_name' => $matching_tables[$i],                    'dst_table_name' => $matching_tables[$i],                    'btn_type' => 'M',                    'btn_structure' => $btn_structure_params,                    'btn_data' => $btn_data_params                );            }            /**            * Displays the tables' names present in source but missing from target            */            for ($j = 0; $j < count($source_tables_uncommon); $j++) {                $row = array(                    'src_table_name' => '+ ' . $source_tables_uncommon[$j],                    'dst_table_name' => $source_tables_uncommon[$j] . ' (' . __('not present') . ')',                    'btn_type' => 'U',                    'btn_structure' => array($j, null, null, null, null, null),                    'btn_data' => null                );                if ($row_count[$j] > 0) {                    $row['btn_data'] = array($j, null, $row_count[$j], null, null, null);                }                $rows[] = $row;            }            foreach ($target_tables_uncommon as $tbl_nc_name) {                $rows[] = array(                    'src_table_name' => '',                    'dst_table_name' => $tbl_nc_name);            }            /**            * Displays the target tables names            */            PMA_syncDisplayDataCompare($rows);            echo '</table>                </div>                </fieldset>';            /**            * This "list" div will contain a table and each row will depict            * information about structure/data difference in tables.            * Rows will be generated dynamically as soon as the colored            * buttons "D" or "S"  are clicked.            */            echo '<fieldset style="padding:0"><div id="list" style="overflow:auto; height:140px; padding:1em">            <table>                <thead>                <tr style="width: 100%;">                    <th id="table_name" style="width: 10%;" colspan="1">' . __('Table') . ' </th>                    <th id="str_diff"   style="width: 65%;" colspan="6">' . __('Structure Difference') . ' </th>                    <th id="data_diff"  style="width: 20%;" colspan="2">' . __('Data Difference') . '</th>                </tr>                <tr style="width: 100%;">                    <th style="width: 10%;">' . __('Table name') . '</th>                    <th style="width: 10%;">' . __('Create table'). '</th>                    <th style="width: 11%;">' . __('Add column(s)') . '</th>                    <th style="width: 13%;">' . __('Remove column(s)') . '</th>                    <th style="width: 11%;">' . __('Alter column(s)') . '</th>                    <th style="width: 12%;">' . __('Remove index(s)') . '</th>                    <th style="width: 11%;">' . __('Apply index(s)') . '</th>                    <th style="width: 10%;">'.  __('Update row(s)') . '</th>                    <th style="width: 10%;">' . __('Insert row(s)') . '</th>                </tr>                </thead>                <tbody></tbody>            </table>            </div></fieldset>';            /**            *  This fieldset displays the checkbox to confirm deletion of previous rows from target tables            */            echo '<fieldset>            <p><input type= "checkbox" name="delete_rows" id ="delete_rows" /><label for="delete_rows">'                . __('Would you like to delete all the previous rows from target tables?')                . '</label> </p>            </fieldset>            <fieldset class="tblFooters">';            echo '<input type="button" name="apply_changes" value="'                . __('Apply Selected Changes')                . '" onclick ="ApplySelectedChanges('                . "'" . htmlspecialchars($_SESSION['token']) . "'" . ')" />';            echo '<input type="submit" name="synchronize_db" value="'                . __('Synchronize Databases') . '" />' . '</fieldset>';            echo '</form>';        }    }} // end if ((isset($_REQUEST['submit_connect']))) /** * Display the page when 'Apply Selected Changes' is pressed */if (isset($_REQUEST['Table_ids'])) {    /**    * Displays success message    */    echo '<div class="success">'        . __('Selected target tables have been synchronized with source tables.')        . '</div>';    $src_db = $_SESSION['src_db'];    $trg_db = $_SESSION['trg_db'];    $update_array = $_SESSION['update_array'];    $insert_array = $_SESSION['insert_array'];    $src_username = $_SESSION['src_username'];    $trg_username = $_SESSION['trg_username'];    $src_password = $_SESSION['src_password'];    $trg_password = $_SESSION['trg_password'];    $src_server   = $_SESSION['src_server'];    $trg_server   = $_SESSION['trg_server'];    $src_type     = $_SESSION['src_type'];    $trg_type     = $_SESSION['trg_type'];    $uncommon_tables = $_SESSION['uncommon_tables'];    $matching_tables = $_SESSION['matching_tables'];    $matching_tables_keys = $_SESSION['matching_tables_keys'];    $matching_tables_fields = $_SESSION['matching_fields'];    $source_tables_uncommon = $_SESSION['src_uncommon_tables'];    $uncommon_tables_fields = $_SESSION['uncommon_tables_fields'];    $target_tables_uncommon = $_SESSION['target_tables_uncommon'];    $row_count = $_SESSION['uncommon_tables_row_count'];    $target_tables = $_SESSION['target_tables'];    $delete_array = $_SESSION['delete_array'];    $uncommon_columns = $_SESSION['uncommon_columns'];    $source_columns = $_SESSION['source_columns'];    $alter_str_array = $_SESSION['alter_str_array'];    $criteria = $_SESSION['criteria'];    $target_tables_keys = $_SESSION['target_tables_keys'];    $add_column_array = $_SESSION['add_column_array'];    $add_indexes_array = $_SESSION['add_indexes_array'];    $alter_indexes_array = $_SESSION['alter_indexes_array'];    $remove_indexes_array = $_SESSION['remove_indexes_array'];    $source_indexes = $_SESSION['source_indexes'];    $target_indexes = $_SESSION['target_indexes'];    $uncommon_cols = $uncommon_columns;    /**    * Creating link object for source and target databases    */    foreach ($cons as $con) {        if (${"{$con}_type"} != "cur") {            ${"{$con}_link"} = PMA_DBI_connect(${"{$con}_username"},                ${"{$con}_password"}, $is_controluser = false, ${"{$con}_server"});        } else {            ${"{$con}_link"} = null;            // working on current server, so initialize this for tracking            // (does not work if user defined current server as a remote one)            $GLOBALS['db'] = ${"{$con}_db"};        }    } // end foreach ($cons as $con)    /**    * Initializing arrays to save the table ids whose data and structure difference is to be applied    */    $matching_table_data_diff = array();  //stores id of matching table having data difference    $matching_table_structure_diff = array(); //stores id of matching tables having structure difference    $uncommon_table_structure_diff = array(); //stores id of uncommon tables having structure difference    $uncommon_table_data_diff = array();     //stores id of uncommon tables having data difference    for ($i = 0; isset($_REQUEST[$i]); $i++ ) {        if (isset($_REQUEST[$i])) {            $table_id = explode("US", $_REQUEST[$i]);            if (isset($table_id[1])) {                $uncommon_table_structure_diff[] = $table_id[1];            }            $table_id = explode("UD", $_REQUEST[$i]);            if (isset($table_id[1])) {                $uncommon_table_data_diff[] = $table_id[1];            }            $table_id = explode("MS", $_REQUEST[$i]);            if (isset($table_id[1])) {                $matching_table_structure_diff[] = $table_id[1];            }            $table_id = explode("MD", $_REQUEST[$i]);            if (isset($table_id[1])) {                 $matching_table_data_diff[] = $table_id[1];            }        }    } // end for    /**    * Applying the structure difference on selected matching tables    */    for ($q = 0; $q < sizeof($matching_table_structure_diff); $q++) {        if (isset($alter_str_array[$matching_table_structure_diff[$q]])) {            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,                $source_columns, $alter_str_array, $matching_tables_fields,                $criteria, $matching_tables_keys, $target_tables_keys,                $matching_table_structure_diff[$q], false);            unset($alter_str_array[$matching_table_structure_diff[$q]]);        }        if (isset($add_column_array[$matching_table_structure_diff[$q]])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,                $matching_table_structure_diff[$q], $target_tables_keys,                $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$matching_table_structure_diff[$q]])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,                    $matching_table_structure_diff[$q], $target_tables_keys,                    $delete_array, false);                unset($delete_array[$matching_table_structure_diff[$q]]);            }            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,                $matching_tables, $source_columns, $add_column_array,                $matching_tables_fields, $criteria, $matching_tables_keys,                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,                $matching_table_structure_diff[$q], $uncommon_cols, false);            unset($add_column_array[$matching_table_structure_diff[$q]]);        }        if (isset($uncommon_columns[$matching_table_structure_diff[$q]])) {            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,                $uncommon_columns, $matching_table_structure_diff[$q], false);            unset($uncommon_columns[$matching_table_structure_diff[$q]]);        }        if (isset($add_indexes_array[$matching_table_structure_diff[$q]])            || isset($remove_indexes_array[$matching_table_structure_diff[$q]])            || isset($alter_indexes_array[$matching_table_structure_diff[$q]])        ) {            PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables,                $source_indexes, $target_indexes, $add_indexes_array,                $alter_indexes_array, $remove_indexes_array,                $matching_table_structure_diff[$q], false);            unset($add_indexes_array[$matching_table_structure_diff[$q]]);            unset($alter_indexes_array[$matching_table_structure_diff[$q]]);            unset($remove_indexes_array[$matching_table_structure_diff[$q]]);        }    }    /**    * Applying the data difference. First checks if structure diff is applied or not.    * If not, then apply structure difference first then apply data difference.    */    for ($p = 0; $p < sizeof($matching_table_data_diff); $p++) {        if ($_REQUEST['checked'] == 'true') {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,                $matching_table_data_diff[$p], $target_tables_keys,                $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$matching_table_data_diff[$p]])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,                    $matching_table_data_diff[$p], $target_tables_keys,                    $delete_array, false);                unset($delete_array[$matching_table_data_diff[$p]]);            }        }        if (isset($alter_str_array[$matching_table_data_diff[$p]])) {            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,                $source_columns, $alter_str_array, $matching_tables_fields,                $criteria, $matching_tables_keys, $target_tables_keys,                $matching_table_data_diff[$p], false);            unset($alter_str_array[$matching_table_data_diff[$p]]);        }        if (isset($add_column_array[$matching_table_data_diff[$p]])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,                $matching_table_data_diff[$p], $target_tables_keys,                $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$matching_table_data_diff[$p]])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,                    $matching_table_data_diff[$p], $target_tables_keys,                    $delete_array, false);                unset($delete_array[$matching_table_data_diff[$p]]);            }            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,                $matching_tables, $source_columns, $add_column_array,                $matching_tables_fields, $criteria, $matching_tables_keys,                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,                $matching_table_data_diff[$p], $uncommon_cols, false);            unset($add_column_array[$matching_table_data_diff[$p]]);        }        if (isset($uncommon_columns[$matching_table_data_diff[$p]])) {            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,                $uncommon_columns, $matching_table_data_diff[$p], false);            unset($uncommon_columns[$matching_table_data_diff[$p]]);        }        if ((isset($matching_table_structure_diff[$q])            && isset($add_indexes_array[$matching_table_structure_diff[$q]]))            || (isset($matching_table_structure_diff[$q])            && isset($remove_indexes_array[$matching_table_structure_diff[$q]]))            || (isset($matching_table_structure_diff[$q])            && isset($alter_indexes_array[$matching_table_structure_diff[$q]]))        ) {            PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables,                $source_indexes, $target_indexes, $add_indexes_array,                $alter_indexes_array, $remove_indexes_array,                $matching_table_structure_diff[$q], false);            unset($add_indexes_array[$matching_table_structure_diff[$q]]);            unset($alter_indexes_array[$matching_table_structure_diff[$q]]);            unset($remove_indexes_array[$matching_table_structure_diff[$q]]);        }        /**        * Applying the data difference.        */        PMA_updateTargetTables($matching_tables, $update_array, $src_db, $trg_db,            $trg_link, $matching_table_data_diff[$p], $matching_tables_keys, false);        PMA_insertIntoTargetTable($matching_tables, $src_db, $trg_db, $src_link,            $trg_link, $matching_tables_fields, $insert_array,            $matching_table_data_diff[$p], $matching_tables_keys, $source_columns,            $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,            $uncommon_tables_fields, $uncommon_cols, $alter_str_array,            $source_indexes, $target_indexes, $add_indexes_array,            $alter_indexes_array, $delete_array, $update_array, false);    }    /**    * Updating the session variables to the latest values of the arrays.    */    $_SESSION['delete_array'] = $delete_array;    $_SESSION['uncommon_columns'] = $uncommon_columns;    $_SESSION['alter_str_array']  = $alter_str_array;    $_SESSION['add_column_array'] = $add_column_array;    $_SESSION['add_indexes_array'] = $add_indexes_array;    $_SESSION['remove_indexes_array'] = $remove_indexes_array;    $_SESSION['insert_array'] = $insert_array;    $_SESSION['update_array'] = $update_array;    /**    * Applying structure difference to selected non-matching tables    * (present in Source but absent from Target).    */    for ($s = 0; $s < sizeof($uncommon_table_structure_diff); $s++) {        PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,            $uncommon_tables, $uncommon_table_structure_diff[$s],            $uncommon_tables_fields, false);        $_SESSION['uncommon_tables_fields'] = $uncommon_tables_fields;        unset($uncommon_tables[$uncommon_table_structure_diff[$s]]);    }    /**    * Applying data difference to selected non-matching tables    * (present in Source but absent from Target).    * Before data synchronization, structure synchronization is confirmed.    */    for ($r = 0; $r < sizeof($uncommon_table_data_diff); $r++) {        if (!(in_array($uncommon_table_data_diff[$r], $uncommon_table_structure_diff))) {            if (isset($uncommon_tables[$uncommon_table_data_diff[$r]])) {                PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,                    $uncommon_tables, $uncommon_table_data_diff[$r],                    $uncommon_tables_fields, false);                $_SESSION['uncommon_tables_fields'] = $uncommon_tables_fields;                unset($uncommon_tables[$uncommon_table_data_diff[$r]]);            }        }        PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link,            $source_tables_uncommon, $uncommon_table_data_diff[$r],            $_SESSION['uncommon_tables_fields'], false);        unset($row_count[$uncommon_table_data_diff[$r]]);    }    /**    * Again all the tables from source and target database are displayed with their differences.    * The differences have been removed from tables that have been synchronized    */    echo '<form name="applied_difference" id="synchronize_form" method="post" action="server_synchronize.php">'        . PMA_generate_common_hidden_inputs('', '');    PMA_syncDisplayHeaderCompare($src_db, $trg_db);    $rows = array();    for ($i = 0; $i < count($matching_tables); $i++) {        $num_alter_cols  = 0;        $num_insert_cols = 0;        $num_remove_cols = 0;        $num_add_index = 0;        $num_remove_index = 0;        if (isset($alter_str_array[$i])) {            $num_alter_cols = sizeof($alter_str_array[$i]);        }        if (isset($add_column_array[$i])) {            $num_insert_cols = sizeof($add_column_array[$i]);        }        if (isset($uncommon_columns[$i])) {            $num_remove_cols = sizeof($uncommon_columns[$i]);        }        if (isset($add_indexes_array[$i])) {            $num_add_index = sizeof($add_indexes_array[$i]);        }        if (isset($remove_indexes_array[$i])) {            $num_remove_index = sizeof($remove_indexes_array[$i]);        }        $btn_structure_params = null;        $btn_data_params = null;        if (($num_alter_cols > 0)            || ($num_insert_cols > 0)            || ($num_remove_cols > 0)            || ($num_add_index > 0)            || ($num_remove_index > 0)        ) {            $btn_structure_params = array($i, $num_alter_cols, $num_insert_cols,                $num_remove_cols, $num_add_index, $num_remove_index);        }        if (!(in_array($i, $matching_table_data_diff))) {            if (isset($matching_tables_keys[$i][0])                && isset($update_array[$i][0][$matching_tables_keys[$i][0]])            ) {                if (isset($update_array[$i])) {                    $num_of_updates = sizeof($update_array[$i]);                } else {                    $num_of_updates = 0;                }            } else {                $num_of_updates = 0;            }            if (isset($matching_tables_keys[$i][0])                && isset($insert_array[$i][0][$matching_tables_keys[$i][0]])            ) {                if (isset($insert_array[$i])) {                    $num_of_insertions = sizeof($insert_array[$i]);                } else {                    $num_of_insertions = 0;                }            } else {                $num_of_insertions = 0;            }            if ((isset($matching_tables_keys[$i][0])                && isset($update_array[$i][0][$matching_tables_keys[$i][0]]))                || (isset($matching_tables_keys[$i][0])                && isset($insert_array[$i][0][$matching_tables_keys[$i][0]]))            ) {                $btn_data_params = array($i, $num_of_updates, $num_of_insertions,                    null, null, null);            }        } else {            unset($update_array[$i]);            unset($insert_array[$i]);        }        $rows[] = array(            'src_table_name' => $matching_tables[$i],            'dst_table_name' => $matching_tables[$i],            'btn_type' => 'M',            'btn_structure' => $btn_structure_params,            'btn_data' => $btn_data_params        );    }    /**    * placing updated value of arrays in session    *    */    $_SESSION['update_array'] = $update_array;    $_SESSION['insert_array'] = $insert_array;    for ($j = 0; $j < count($source_tables_uncommon); $j++) {        $btn_structure_params = null;        $btn_data_params = null;        /**        * Display the difference only when it has not been applied        */        if (!(in_array($j, $uncommon_table_structure_diff))) {            if (isset($uncommon_tables[$j])) {                $btn_structure_params = array($j, null, null, null, null, null);            }            $dst_table_name = $source_tables_uncommon[$j] . ' (' .  __('not present') . ')';        } else {            unset($uncommon_tables[$j]);            $dst_table_name = $source_tables_uncommon[$j];        }        /**        * Display the difference only when it has not been applied        */        if (!(in_array($j, $uncommon_table_data_diff))) {            if (isset($row_count[$j]) && ($row_count[$j] > 0)) {                $btn_data_params = array($j, null, $row_count[$j], null, null, null);            }        } else {            unset($row_count[$j]);        }        $rows[] = array(            'src_table_name' => $source_tables_uncommon[$j],            'dst_table_name' => $dst_table_name,            'btn_type' => 'U',            'btn_structure' => $btn_structure_params,            'btn_data' => $btn_data_params        );    }    /**    * placing the latest values of arrays in session    */    $_SESSION['uncommon_tables'] = $uncommon_tables;    $_SESSION['uncommon_tables_row_count'] = $row_count;    /**    * Displaying the target database tables    */    foreach ($target_tables_uncommon as $tbl_nc_name) {        $rows[] = array(            'src_table_name' => '',            'dst_table_name' => $tbl_nc_name);    }    PMA_syncDisplayDataCompare($rows);    echo '</table>        </div>        </fieldset>';    /**    * This "list" div will contain a table and each row will depict information about    * structure/data difference in tables.    * Rows will be generated dynamically as soon as the colored buttons "D" or "S"    * are clicked.    */    echo '<fieldset style="padding:0"><div id="list" style = "overflow:auto; height:140px; padding:1em">';    echo '<table>          <thead>            <tr style="width: 100%;">                <th id="table_name" style="width: 10%;" colspan="1">' . __('Table') . ' </th>                <th id="str_diff"   style="width: 65%;" colspan="6">' . __('Structure Difference') . ' </th>                <th id="data_diff"  style="width: 20%;" colspan="2">' . __('Data Difference') . '</th>            </tr>            <tr style="width: 100%;">                <th style="width: 10%;">' . __('Table name') . '</th>                <th style="width: 10%;">' . __('Create table'). '</th>                <th style="width: 11%;">' . __('Add column(s)') . '</th>                <th style="width: 13%;">' . __('Remove column(s)') . '</th>                <th style="width: 11%;">' . __('Alter column(s)') . '</th>                <th style="width: 12%;">' . __('Remove index(s)') . '</th>                <th style="width: 11%;">' . __('Apply index(s)') . '</th>                <th style="width: 10%;">' . __('Update row(s)') . '</th>                <th style="width: 10%;">' . __('Insert row(s)') . '</th>            </tr>            </thead>            <tbody></tbody>         </table>        </div></fieldset>';    /**    *  This fieldset displays the checkbox to confirm deletion of previous rows from target tables    */    echo '<fieldset>        <p><input type="checkbox" name="delete_rows" id ="delete_rows" /><label for="delete_rows">'        . __('Would you like to delete all the previous rows from target tables?') . '</label> </p>        </fieldset>';    echo '<fieldset class="tblFooters">';    echo '<input type="button" name="apply_changes" value="'        . __('Apply Selected Changes') . '" onclick ="ApplySelectedChanges('        . "'" . htmlspecialchars($_SESSION['token']) . "'" .')" />';    echo '<input type="submit" name="synchronize_db" value="'        . __('Synchronize Databases') . '" />'        . '</fieldset>';    echo '</form>';}/*** Displays the page when 'Synchronize Databases' is pressed.*/if (isset($_REQUEST['synchronize_db'])) {    $src_db = $_SESSION['src_db'];    $trg_db = $_SESSION['trg_db'];    $update_array = $_SESSION['update_array'];    $insert_array = $_SESSION['insert_array'];    $src_username = $_SESSION['src_username'];    $trg_username = $_SESSION['trg_username'];    $src_password = $_SESSION['src_password'];    $trg_password = $_SESSION['trg_password'];    $matching_tables = $_SESSION['matching_tables'];    $matching_tables_keys = $_SESSION['matching_tables_keys'];    $matching_tables_fields = $_SESSION['matching_fields'];    $source_tables_uncommon = $_SESSION['src_uncommon_tables'];    $uncommon_tables_fields = $_SESSION['uncommon_tables_fields'];    $target_tables_uncommon = $_SESSION['target_tables_uncommon'];    $row_count = $_SESSION['uncommon_tables_row_count'];    $uncommon_tables = $_SESSION['uncommon_tables'];    $target_tables = $_SESSION['target_tables'];    $delete_array = $_SESSION['delete_array'];    $uncommon_columns = $_SESSION['uncommon_columns'];    $source_columns = $_SESSION['source_columns'];    $alter_str_array = $_SESSION['alter_str_array'];    $criteria = $_SESSION['criteria'];    $target_tables_keys = $_SESSION['target_tables_keys'];    $add_column_array = $_SESSION['add_column_array'];    $add_indexes_array = $_SESSION['add_indexes_array'];    $alter_indexes_array = $_SESSION['alter_indexes_array'];    $remove_indexes_array = $_SESSION['remove_indexes_array'];    $source_indexes = $_SESSION['source_indexes'];    $target_indexes = $_SESSION['target_indexes'];    $uncommon_cols = $uncommon_columns;   /**   * Display success message.   */    echo '<div class="success">'        . __('Target database has been synchronized with source database')        . '</div>';    /**    * Displaying all the tables of source and target database    * and now no difference is there.    */    PMA_syncDisplayHeaderCompare($src_db, $trg_db);    $rows = array();    for ($i = 0; $i < count($matching_tables); $i++) {        $rows[] = array(            'src_table_name' => $matching_tables[$i],            'dst_table_name' => $matching_tables[$i]);    }    foreach ($source_tables_uncommon as $tbl_nc_name) {        $rows[] = array(            'src_table_name' => '+ ' . $tbl_nc_name,            'dst_table_name' => $tbl_nc_name);    }    foreach ($target_tables_uncommon as $tbl_nc_name) {        $rows[] = array(            'src_table_name' => '',            'dst_table_name' => $tbl_nc_name);    }    PMA_syncDisplayDataCompare($rows);    echo '</table>        </div>        </fieldset>';    /**    * connecting the source and target servers    */    if ('cur' != $_SESSION['src_type']) {        $src_link = PMA_DBI_connect($src_username, $src_password, $is_controluser = false, $_SESSION['src_server']);        $src_version = PMA_DBI_fetch_value('SELECT VERSION()', 0, 0, $src_link);        $src_is_drizzle = (bool)preg_match('/\d{4}\./', $src_version);    } else {        $src_link = $GLOBALS['userlink'];        $src_version = PMA_MYSQL_STR_VERSION;        $src_is_drizzle = PMA_DRIZZLE;        // working on current server, so initialize this for tracking        // (does not work if user defined current server as a remote one)        $GLOBALS['db'] = $_SESSION['src_db'];    }    if ('cur' != $_SESSION['trg_type']) {        $trg_link = PMA_DBI_connect($trg_username, $trg_password, $is_controluser = false, $_SESSION['trg_server']);        $trg_version = PMA_DBI_fetch_value('SELECT VERSION()', 0, 0, $trg_link);        $trg_is_drizzle = (bool)preg_match('/\d{4}\./', $trg_version);    } else {        $trg_link = $GLOBALS['userlink'];        $trg_version = PMA_MYSQL_STR_VERSION;        $trg_is_drizzle = PMA_DRIZZLE;        // working on current server, so initialize this for tracking        $GLOBALS['db'] = $_SESSION['trg_db'];    }    /**    * Displaying the queries.    */    echo '<fieldset><legend>' . __('Executed queries') . '</legend>';    /**    * Applying all sorts of differences for each matching table    */    for ($p = 0; $p < sizeof($matching_tables); $p++) {        /**        *  If the check box is checked for deleting previous rows from the target database tables then        *  first find out rows to be deleted and then delete the rows.        */        if (isset($_REQUEST['delete_rows'])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables, $p,                $target_tables_keys, $matching_tables_keys,                $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$p])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $p,                    $target_tables_keys, $delete_array, true);                unset($delete_array[$p]);            }        }        if (isset($alter_str_array[$p])) {            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,                $source_columns, $alter_str_array, $matching_tables_fields,                $criteria, $matching_tables_keys, $target_tables_keys, $p, true);            unset($alter_str_array[$p]);        }        if (! empty($add_column_array[$p])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables, $p,                $target_tables_keys, $matching_tables_keys,                $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$p])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $p,                    $target_tables_keys, $delete_array, true);                unset($delete_array[$p]);            }            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,                $matching_tables, $source_columns, $add_column_array,                $matching_tables_fields, $criteria, $matching_tables_keys,                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,                $p, $uncommon_cols, true);            unset($add_column_array[$p]);        }        if (isset($uncommon_columns[$p])) {            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,                $uncommon_columns, $p, true);            unset($uncommon_columns[$p]);        }        if (isset($matching_table_structure_diff)            && (isset($add_indexes_array[$matching_table_structure_diff[$p]])            || isset($remove_indexes_array[$matching_table_structure_diff[$p]])            || isset($alter_indexes_array[$matching_table_structure_diff[$p]]))        ) {            PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables,                $source_indexes, $target_indexes, $add_indexes_array,                $alter_indexes_array, $remove_indexes_array,                $matching_table_structure_diff[$p], true);            unset($add_indexes_array[$matching_table_structure_diff[$p]]);            unset($alter_indexes_array[$matching_table_structure_diff[$p]]);            unset($remove_indexes_array[$matching_table_structure_diff[$p]]);        }        PMA_updateTargetTables($matching_tables, $update_array, $src_db, $trg_db,            $trg_link, $p, $matching_tables_keys, true);        PMA_insertIntoTargetTable(            $matching_tables, $src_db, $trg_db, $src_link,            $trg_link, $matching_tables_fields, $insert_array, $p,            $matching_tables_keys, $matching_tables_keys, $source_columns,            $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,            $uncommon_tables_fields, $uncommon_cols, $alter_str_array, $source_indexes,            $target_indexes, $add_indexes_array,            $alter_indexes_array, $delete_array, $update_array, true        );    }    /**    *  Creating and populating tables present in source but absent    *  from target database.    */    for ($q = 0; $q < sizeof($source_tables_uncommon); $q++) {        if (isset($uncommon_tables[$q])) {            PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,                $source_tables_uncommon, $q, $uncommon_tables_fields, true);        }        if (isset($row_count[$q])) {            PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link,                $source_tables_uncommon, $q, $uncommon_tables_fields, true);        }    }    echo "</fieldset>";}/** * Displays the main page when none of the following buttons is pressed */if (! isset($_REQUEST['submit_connect'])    && ! isset($_REQUEST['synchronize_db'])    && ! isset($_REQUEST['Table_ids'])) {/*** Displays the sub-page heading*/    echo '<h2>' . ($GLOBALS['cfg']['MainPageIconic']    ? PMA_getImage('s_sync.png')    : '')    . __('Synchronize')    .'</h2>';    echo  '<div id="serverstatus">    <form name="connection_form" id="connection_form" method="post" action="server_synchronize.php"   >' // TODO: add check if all var. are filled in    . PMA_generate_common_hidden_inputs('', '');    echo '<fieldset>';    echo '<legend>' . __('Synchronize') . '</legend>';    /**     * Displays the forms     */    $databases = PMA_DBI_get_databases_full(null, false, null, 'SCHEMA_NAME',        'ASC', 0, true);    $databases_to_hide = array(        'information_schema',        'mysql'    );    if (PMA_DRIZZLE) {        $databases_to_hide[] = 'data_dictionary';    }    if ($GLOBALS['cfg']['AllowArbitraryServer'] === false) {        $possibly_readonly = ' readonly="readonly"';    } else {        $possibly_readonly = '';    }    foreach ($cons as $type) {        if ('src' == $type) {            $database_header = __('Source database');        } else {            $database_header = __('Target database');        }        $database_header .= PMA_showHint(PMA_sanitize(sprintf('%sAllowArbitraryServer%s',            '[a@./Documentation.html#AllowArbitraryServer@_blank]', '[/a]')));?>      <table id="serverconnection_<?php echo $type; ?>_remote" class="data noclick">      <caption class="tblHeaders"><?php echo $database_header; ?></caption>      <tr class="odd">      <td colspan="2" style="text-align: center">         <select name="<?php echo $type; ?>_type" id="<?php echo $type; ?>_type" class="server_selector"><?php        if ($GLOBALS['cfg']['AllowArbitraryServer']) {            $preselected_option = 'rmt';            echo '<option value="rmt" selected="selected">' . __('Enter manually') . '</option>';        } else {            $preselected_option = 'cur';        }        echo '<option value="cur"';        if ('cur' == $preselected_option) {            echo ' selected="selected"';        }        echo '>' .  __('Current connection') . '</option>';        $loaded_dbi = $GLOBALS['cfg']['Server']['extension'];        foreach ($GLOBALS['cfg']['Servers'] as $key => $tmp_server) {            if (empty($tmp_server['host']) && empty($tmp_server['socket'])) {                continue;            }            if (!empty($tmp_server['verbose'])) {                $label = $tmp_server['verbose'];            } else {                $label = $tmp_server['host'];                if (!empty($tmp_server['port'])) {                    $label .= ':' . $tmp_server['port'];                }            }            if ($loaded_dbi == 'drizzle' && $tmp_server['extension'] != 'drizzle'                    || $loaded_dbi != 'drizzle' && $tmp_server['extension'] == 'drizzle') {                // incompatible connection protocols                $disabled = ' disabled="disabled"';                $value = '';            } else {                $disabled = '';                $value = $tmp_server['host'];                $value .= '||||';                if (empty($tmp_server['port']) && empty($tmp_server['socket'])) {                    $value .= '3306';                } else {                    $value .= $tmp_server['port'];                }                $value .= '||||';                $value .= $tmp_server['socket'];                $value .= '||||';                $value .= $tmp_server['user'];                $value .= '||||';                $value .= $tmp_server['only_db'];            }            echo '<option value="' . $value . '"' . $disabled . '>'                . sprintf(__('Configuration: %s'), htmlspecialchars($label)) . '</option>';        } // end foreach?>         </select>      </td>      </tr>    <tr class="even toggler remote-server">        <td><?php echo __('Server'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_host" class="server-host" <?php echo $possibly_readonly; ?>/></td>    </tr>    <tr class="odd toggler remote-server">        <td><?php echo __('Port'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_port" class="server-port" <?php echo $possibly_readonly; ?> value="3306" maxlength="5" size="5" /></td>    </tr>    <tr class="even toggler remote-server">        <td><?php echo __('Socket'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_socket" class="server-socket" <?php echo $possibly_readonly; ?>/></td>    </tr>    <tr class="odd toggler remote-server">        <td><?php echo __('User name'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_username" class="server-user" /></td>    </tr>    <tr class="even toggler remote-server">        <td><?php echo __('Password'); ?></td>        <td><input type="password" name="<?php echo $type; ?>_pass" class="server-pass" /> </td>    </tr>    <tr class="odd toggler remote-server">        <td><?php echo __('Database'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_db" class="server-db" /></td>    </tr>    <tr class="even toggler current-server" style="display: none;">        <td><?php echo __('Database'); ?></td>        <td><?php    $options_list = '';    foreach ($databases as $array_key => $db) {        if (in_array($db['SCHEMA_NAME'], $databases_to_hide)) {            unset($databases[$array_key]);        } else {            $options_list .= '<option>' . htmlspecialchars($db['SCHEMA_NAME']) . '</option>';        }    }    if (count($databases) == 0) {        echo __('No databases');    } else {        echo '<select name="' . $type . '_db_sel">'         . $options_list         . '</select>';        unset($options_list);    }    echo '</td> </tr>      </table>';   }   unset ($types, $type);    echo '    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="submit_connect" value="' . __('Go') .'" id="buttonGo" />    </fieldset>    </form>    </div>    <div class="notice">' . __('Target database will be completely synchronized with source database. Source database will remain unchanged.') . '</div>';} /** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Logging functionality for webserver. * * This includes web server specific code to log some information. * * @package PhpMyAdmin *//** * Logs user information to webserver logs. */function PMA_log_user($user, $status = 'ok'){    if (function_exists('apache_note')) {        apache_note('userID', $user);        apache_note('userStatus', $status);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (!defined('PHPMYADMIN')) {    exit;}/**  * constant for differenciating array in $_SESSION variable  */$SESSION_KEY = '__upload_status';/**  * sets default plugin for handling the import process  */$_SESSION[$SESSION_KEY]["handler"] = "";/**  * unique ID for each upload  */$upload_id = uniqid("");/**  * list of available plugins  */$plugins = array(       "uploadprogress",       "apc",       "noplugin"       ); // available plugins. Each plugin has own checkfunction in display_import_ajax.lib.php and own file with functions in upload_#KEY#.php// select available pluginforeach ($plugins as $plugin) {    $check = "PMA_import_" . $plugin . "Check";    if ($check()) {        $_SESSION[$SESSION_KEY]["handler"] = $plugin;        include_once "import/upload/" . $plugin . ".php";        break;    }}/**  * Checks if APC bar extension is available and configured correctly.  *  * @return true if APC extension is available and if rfc1867 is enabled, false if it is not  */function PMA_import_apcCheck(){    if (! extension_loaded('apc') || ! function_exists('apc_fetch') || ! function_exists('getallheaders')) {        return false;    }    return (ini_get('apc.enabled') && ini_get('apc.rfc1867'));}/**  * Checks if UploadProgress bar extension is available.  *  * @return true if UploadProgress extension is available, false if it is not  */function PMA_import_uploadprogressCheck(){    if (! function_exists("uploadprogress_get_info") || ! function_exists('getallheaders')) {        return false;    }    return true;}/**  * Default plugin for handling import. If no other plugin is available, noplugin is used.  *  * @return true  */function PMA_import_nopluginCheck(){    return true;}/**  * The function outputs json encoded status of uploaded. It uses PMA_getUploadStatus, which is defined in plugin's file.  *  * @param $id - ID of transfer, usually $upload_id from display_import_ajax.lib.php  */function PMA_importAjaxStatus($id){    header('Content-type: application/json');    echo json_encode(PMA_getUploadStatus($id));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Produce a PDF report (export) from a query * * @package PhpMyAdmin-Export * @subpackage PDF */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['pdf'] = array(        'text' => __('PDF'),        'extension' => 'pdf',        'mime_type' => 'application/pdf',        'force_file' => true,        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'message_only', 'name' => 'explanation', 'text' => __('(Generates a report containing the data of a single table)')),            array('type' => 'text', 'name' => 'report_title', 'text' => __('Report title:')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );} else {    include_once './libraries/PDF.class.php';    /**     * Adapted from a LGPL script by Philip Clarke     * @package PhpMyAdmin-Export     * @subpackage PDF     */    class PMA_Export_PDF extends PMA_PDF    {        var $tablewidths;        var $headerset;        function checkPageBreak($h = 0, $y = '', $addpage = true)        {            if ($this->empty_string($y)) {                $y = $this->y;            }            $current_page = $this->page;            if ((($y + $h) > $this->PageBreakTrigger) AND (! $this->InFooter) AND ($this->AcceptPageBreak())) {                if ($addpage) {                    //Automatic page break                    $x = $this->x;                    $this->AddPage($this->CurOrientation);                    $this->y = $this->dataY;                    $oldpage = $this->page - 1;                    if ($this->rtl) {                        if ($this->pagedim[$this->page]['orm'] != $this->pagedim[$oldpage]['orm']) {                            $this->x = $x - ($this->pagedim[$this->page]['orm'] - $this->pagedim[$oldpage]['orm']);                        } else {                            $this->x = $x;                        }                    } else {                        if ($this->pagedim[$this->page]['olm'] != $this->pagedim[$oldpage]['olm']) {                            $this->x = $x + ($this->pagedim[$this->page]['olm'] - $this->pagedim[$oldpage]['olm']);                        } else {                            $this->x = $x;                        }                    }                }                return true;            }            if ($current_page != $this->page) {                // account for columns mode                return true;            }            return false;        }        function Header()        {            global $maxY;            // Check if header for this page already exists            if (! isset($this->headerset[$this->page])) {                $fullwidth = 0;                foreach ($this->tablewidths as $width) {                    $fullwidth += $width;                }                $this->SetY(($this->tMargin) - ($this->FontSizePt / $this->k) * 5);                $this->cellFontSize = $this->FontSizePt ;                $this->SetFont(PMA_PDF_FONT, '', ($this->titleFontSize ? $this->titleFontSize : $this->FontSizePt));                $this->Cell(0, $this->FontSizePt, $this->titleText, 0, 1, 'C');                $this->SetFont(PMA_PDF_FONT, '', $this->cellFontSize);                $this->SetY(($this->tMargin) - ($this->FontSizePt / $this->k) * 2.5);                $this->Cell(                    0, $this->FontSizePt,                    __('Database') . ': ' . $this->currentDb . ',  ' . __('Table') . ': ' . $this->currentTable,                    0, 1, 'L'                );                $l = ($this->lMargin);                foreach ($this->colTitles as $col => $txt) {                    $this->SetXY($l, ($this->tMargin));                    $this->MultiCell($this->tablewidths[$col], $this->FontSizePt, $txt);                    $l += $this->tablewidths[$col] ;                    $maxY = ($maxY < $this->getY()) ? $this->getY() : $maxY ;                }                $this->SetXY($this->lMargin, $this->tMargin);                $this->setFillColor(200, 200, 200);                $l = ($this->lMargin);                foreach ($this->colTitles as $col => $txt) {                    $this->SetXY($l, $this->tMargin);                    $this->cell($this->tablewidths[$col], $maxY-($this->tMargin), '', 1, 0, 'L', 1);                    $this->SetXY($l, $this->tMargin);                    $this->MultiCell($this->tablewidths[$col], $this->FontSizePt, $txt, 0, 'C');                    $l += $this->tablewidths[$col];                }                $this->setFillColor(255, 255, 255);                // set headerset                $this->headerset[$this->page] = 1;            }            $this->dataY = $maxY;        }        function morepagestable($lineheight=8)        {            // some things to set and 'remember'            $l = $this->lMargin;            $startheight = $h = $this->dataY;            $startpage = $currpage = $this->page;            // calculate the whole width            $fullwidth = 0;            foreach ($this->tablewidths as $width) {                $fullwidth += $width;            }            // Now let's start to write the table            $row = 0;            $tmpheight = array();            $maxpage = $this->page;            while ($data = PMA_DBI_fetch_row($this->results)) {                $this->page = $currpage;                // write the horizontal borders                $this->Line($l, $h, $fullwidth+$l, $h);                // write the content and remember the height of the highest col                foreach ($data as $col => $txt) {                    $this->page = $currpage;                    $this->SetXY($l, $h);                    if ($this->tablewidths[$col] > 0) {                        $this->MultiCell($this->tablewidths[$col], $lineheight, $txt, 0, $this->colAlign[$col]);                        $l += $this->tablewidths[$col];                    }                    if (!isset($tmpheight[$row.'-'.$this->page])) {                        $tmpheight[$row.'-'.$this->page] = 0;                    }                    if ($tmpheight[$row.'-'.$this->page] < $this->GetY()) {                        $tmpheight[$row.'-'.$this->page] = $this->GetY();                    }                    if ($this->page > $maxpage) {                        $maxpage = $this->page;                    }                    unset($data[$col]);                }                // get the height we were in the last used page                $h = $tmpheight[$row.'-'.$maxpage];                // set the "pointer" to the left margin                $l = $this->lMargin;                // set the $currpage to the last page                $currpage = $maxpage;                unset($data[$row]);                $row++;            }            // draw the borders            // we start adding a horizontal line on the last page            $this->page = $maxpage;            $this->Line($l, $h, $fullwidth+$l, $h);            // now we start at the top of the document and walk down            for ($i = $startpage; $i <= $maxpage; $i++) {                $this->page = $i;                $l = $this->lMargin;                $t = ($i == $startpage) ? $startheight : $this->tMargin;                $lh = ($i == $maxpage) ? $h : $this->h-$this->bMargin;                $this->Line($l, $t, $l, $lh);                foreach ($this->tablewidths as $width) {                    $l += $width;                    $this->Line($l, $t, $l, $lh);                }            }            // set it to the last page, if not it'll cause some problems            $this->page = $maxpage;        }        function setAttributes($attr = array())        {            foreach ($attr as $key => $val) {                $this->$key = $val ;            }        }        function setTopMargin($topMargin)        {            $this->tMargin = $topMargin;        }        function mysql_report($query)        {            unset($this->tablewidths);            unset($this->colTitles);            unset($this->titleWidth);            unset($this->colFits);            unset($this->display_column);            unset($this->colAlign);            /**             * Pass 1 for column widths             */            $this->results = PMA_DBI_query($query, null, PMA_DBI_QUERY_UNBUFFERED);            $this->numFields  = PMA_DBI_num_fields($this->results);            $this->fields = PMA_DBI_get_fields_meta($this->results);            // sColWidth = starting col width (an average size width)            $availableWidth = $this->w - $this->lMargin - $this->rMargin;            $this->sColWidth = $availableWidth / $this->numFields;            $totalTitleWidth = 0;            // loop through results header and set initial col widths/ titles/ alignment            // if a col title is less than the starting col width, reduce that column size            $colFits = array();            for ($i = 0; $i < $this->numFields; $i++) {                $stringWidth = $this->getstringwidth($this->fields[$i]->name) + 6 ;                // save the real title's width                $titleWidth[$i] = $stringWidth;                $totalTitleWidth += $stringWidth;                // set any column titles less than the start width to the column title width                if ($stringWidth < $this->sColWidth) {                    $colFits[$i] = $stringWidth ;                }                $this->colTitles[$i] = $this->fields[$i]->name;                $this->display_column[$i] = true;                switch ($this->fields[$i]->type) {                case 'int':                    $this->colAlign[$i] = 'R';                    break;                case 'blob':                case 'tinyblob':                case 'mediumblob':                case 'longblob':                    /**                     * @todo do not deactivate completely the display                     * but show the field's name and [BLOB]                     */                    if (stristr($this->fields[$i]->flags, 'BINARY')) {                        $this->display_column[$i] = false;                        unset($this->colTitles[$i]);                    }                    $this->colAlign[$i] = 'L';                    break;                default:                    $this->colAlign[$i] = 'L';                }            }            // title width verification            if ($totalTitleWidth > $availableWidth) {                $adjustingMode = true;            } else {                $adjustingMode = false;                // we have enough space for all the titles at their                // original width so use the true title's width                foreach ($titleWidth as $key => $val) {                    $colFits[$key] = $val;                }            }            // loop through the data; any column whose contents            // is greater than the column size is resized            /**              * @todo force here a LIMIT to avoid reading all rows              */            while ($row = PMA_DBI_fetch_row($this->results)) {                foreach ($colFits as $key => $val) {                    $stringWidth = $this->getstringwidth($row[$key]) + 6 ;                    if ($adjustingMode && ($stringWidth > $this->sColWidth)) {                        // any column whose data's width is bigger than                        // the start width is now discarded                        unset($colFits[$key]);                    } else {                        // if data's width is bigger than the current column width,                        // enlarge the column (but avoid enlarging it if the                        // data's width is very big)                        if ($stringWidth > $val && $stringWidth < ($this->sColWidth * 3)) {                            $colFits[$key] = $stringWidth ;                        }                    }                }            }            $totAlreadyFitted = 0;            foreach ($colFits as $key => $val) {                // set fitted columns to smallest size                $this->tablewidths[$key] = $val;                // to work out how much (if any) space has been freed up                $totAlreadyFitted += $val;            }            if ($adjustingMode) {                $surplus = (sizeof($colFits) * $this->sColWidth) - $totAlreadyFitted;                $surplusToAdd = $surplus / ($this->numFields - sizeof($colFits));            } else {                $surplusToAdd = 0;            }            for ($i=0; $i < $this->numFields; $i++) {                if (!in_array($i, array_keys($colFits))) {                    $this->tablewidths[$i] = $this->sColWidth + $surplusToAdd;                }                if ($this->display_column[$i] == false) {                    $this->tablewidths[$i] = 0;                }            }            ksort($this->tablewidths);            PMA_DBI_free_result($this->results);            // Pass 2            $this->results = PMA_DBI_query($query, null, PMA_DBI_QUERY_UNBUFFERED);            $this->setY($this->tMargin);            $this->AddPage();            $this->SetFont(PMA_PDF_FONT, '', 9);            $this->morepagestable($this->FontSizePt);            PMA_DBI_free_result($this->results);        } // end of mysql_report function    } // end of PMA_Export_PDF class    $pdf = new PMA_Export_PDF('L', 'pt', 'A3');    /**     * Finalize the pdf.     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        global $pdf;        // instead of $pdf->Output():        if (!PMA_exportOutputHandler($pdf->getPDFData())) {            return false;        }        return true;    }    /**     * Initialize the pdf to export data.     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        global $pdf_report_title;        global $pdf;        $pdf->Open();        $attr = array('titleFontSize' => 18, 'titleText' => $pdf_report_title);        $pdf->setAttributes($attr);        $pdf->setTopMargin(30);        return true;    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        return true;    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in PDF format     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $pdf;        $attr=array('currentDb' => $db, 'currentTable' => $table);        $pdf->setAttributes($attr);        $pdf->mysql_report($sql_query);        return true;    } // end of the 'PMA_exportData()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';require './libraries/tbl_common.php';/** * Gets the variables sent or posted to this script, then displays headers */$print_view = true;if (! isset($selected_tbl)) {    include_once './libraries/header.inc.php';}// Check parametersif (! isset($the_tables) || ! is_array($the_tables)) {    $the_tables = array();}/** * Gets the relations settings */require_once './libraries/transformations.lib.php';require_once './libraries/Index.class.php';$cfgRelation = PMA_getRelationsParam();/** * Defines the url to return to in case of error in a sql statement */if (strlen($table)) {    $err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);} else {    $err_url = 'db_sql.php?' . PMA_generate_common_url($db);}/** * Selects the database */PMA_DBI_select_db($db);/** * Multi-tables printview */if (isset($selected_tbl) && is_array($selected_tbl)) {    $the_tables   = $selected_tbl;} elseif (strlen($table)) {    $the_tables[] = $table;}$multi_tables     = (count($the_tables) > 1);if ($multi_tables) {    if (empty($GLOBALS['is_header_sent'])) {        include_once './libraries/header.inc.php';    }    $tbl_list     = '';    foreach ($the_tables as $key => $table) {        $tbl_list .= (empty($tbl_list) ? '' : ', ')                  . PMA_backquote($table);    }    echo '<strong>'.  __('Showing tables') . ': ' . htmlspecialchars($tbl_list) . '</strong>' . "\n";    echo '<hr />' . "\n";} // end if$tables_cnt = count($the_tables);$counter    = 0;foreach ($the_tables as $key => $table) {    if ($counter + 1 >= $tables_cnt) {        $breakstyle = '';    } else {        $breakstyle = ' style="page-break-after: always;"';    }    $counter++;    echo '<div' . $breakstyle . '>' . "\n";    echo '<h1>' . htmlspecialchars($table) . '</h1>' . "\n";    /**     * Gets table informations     */    $showtable    = PMA_Table::sGetStatusInfo($db, $table);    $num_rows     = (isset($showtable['Rows']) ? $showtable['Rows'] : 0);    $show_comment = (isset($showtable['Comment']) ? $showtable['Comment'] : '');    $tbl_is_view = PMA_Table::isView($db, $table);    /**     * Gets fields properties     */    $columns = PMA_DBI_get_columns($db, $table);    // We need this to correctly learn if a TIMESTAMP is NOT NULL, since    // SHOW FULL FIELDS or INFORMATION_SCHEMA incorrectly says NULL    // and SHOW CREATE TABLE says NOT NULL (tested    // in MySQL 4.0.25 and 5.0.21, http://bugs.mysql.com/20910).    $show_create_table = PMA_DBI_fetch_value(        'SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table),        0, 1);    $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));    // Check if we can use Relations    // Find which tables are related with the current one and write it in    // an array    $res_rel  = PMA_getForeigners($db, $table);    $have_rel = (bool) count($res_rel);    /**     * Displays the comments of the table if MySQL >= 3.23     */    if (!empty($show_comment)) {        echo __('Table comments') . ': ' . htmlspecialchars($show_comment) . '<br /><br />';    }    /**     * Displays the table structure     */    ?><!-- TABLE INFORMATIONS --><table style="width: 100%;"><thead><tr>    <th><?php echo __('Column'); ?></th>    <th><?php echo __('Type'); ?></th>    <th><?php echo __('Null'); ?></th>    <th><?php echo __('Default'); ?></th>    <?php    if ($have_rel) {        echo '<th>' . __('Links to') . '</th>' . "\n";    }    echo '    <th>' . __('Comments') . '</th>' . "\n";    if ($cfgRelation['mimework']) {        echo '    <th>MIME</th>' . "\n";    }    ?></tr></thead><tbody>    <?php    foreach ($columns as $row) {        $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);        $type             = $extracted_fieldspec['print_type'];        $attribute     = $extracted_fieldspec['attribute'];        if (! isset($row['Default'])) {            if ($row['Null'] != ''  && $row['Null'] != 'NO') {                $row['Default'] = '<i>NULL</i>';            }        } else {            $row['Default'] = htmlspecialchars($row['Default']);        }        $field_name = htmlspecialchars($row['Field']);        // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the        // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe        // the latter.        /**         * @todo merge this logic with the one in tbl_structure.php         * or move it in a function similar to PMA_DBI_get_columns_full()         * but based on SHOW CREATE TABLE because information_schema         * cannot be trusted in this case (MySQL bug)         */        if (!empty($analyzed_sql[0]['create_table_fields'][$field_name]['type']) && $analyzed_sql[0]['create_table_fields'][$field_name]['type'] == 'TIMESTAMP' && $analyzed_sql[0]['create_table_fields'][$field_name]['timestamp_not_null']) {            $row['Null'] = '';        }        echo '<tr><td>';        if (isset($pk_array[$row['Field']])) {            echo '    <u>' . $field_name . '</u>' . "\n";        } else {            echo '    ' . $field_name . "\n";        }    ?>    </td>    <td><?php echo $type; ?><bdo dir="ltr"></bdo></td>    <td><?php echo (($row['Null'] == '' || $row['Null'] == 'NO') ? __('No') : __('Yes')); ?>&nbsp;</td>    <td><?php if (isset($row['Default'])) { echo $row['Default']; } ?>&nbsp;</td>    <?php        if ($have_rel) {            echo '    <td>';            if (isset($res_rel[$field_name])) {                echo htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' -> ' . $res_rel[$field_name]['foreign_field']);            }            echo '&nbsp;</td>' . "\n";        }        echo '    <td>';        $comments = PMA_getComments($db, $table);        if (isset($comments[$field_name])) {            echo htmlspecialchars($comments[$field_name]);        }        echo '&nbsp;</td>' . "\n";        if ($cfgRelation['mimework']) {            $mime_map = PMA_getMIME($db, $table, true);            echo '    <td>';            if (isset($mime_map[$field_name])) {                echo htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype']));            }            echo '&nbsp;</td>' . "\n";        }    ?></tr>        <?php    } // end foreach    ?></tbody></table>    <?php    if (! $tbl_is_view && !PMA_is_system_schema($db)) {        /**         * Displays indexes         */        echo PMA_Index::getView($table, $db, true);        /**         * Displays Space usage and row statistics         *         */        if ($cfg['ShowStats']) {            $nonisam     = false;            if (isset($showtable['Type']) && !preg_match('@ISAM|HEAP@i', $showtable['Type'])) {                $nonisam = true;            }            if ($nonisam == false) {                // Gets some sizes                $mergetable = PMA_Table::isMerge($db, $table);                list($data_size, $data_unit)         = PMA_formatByteDown($showtable['Data_length']);                if ($mergetable == false) {                    list($index_size, $index_unit)   = PMA_formatByteDown($showtable['Index_length']);                }                if (isset($showtable['Data_free']) && $showtable['Data_free'] > 0) {                    list($free_size, $free_unit)     = PMA_formatByteDown($showtable['Data_free']);                    list($effect_size, $effect_unit) = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length'] - $showtable['Data_free']);                } else {                    unset($free_size);                    unset($free_unit);                    list($effect_size, $effect_unit) = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length']);                }                list($tot_size, $tot_unit)           = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length']);                if ($num_rows > 0) {                    list($avg_size, $avg_unit)       = PMA_formatByteDown(($showtable['Data_length'] + $showtable['Index_length']) / $showtable['Rows'], 6, 1);                }                // Displays them                ?>    <br /><br />    <table border="0" cellspacing="0" cellpadding="0" class="noborder">    <tr>        <!-- Space usage -->        <td valign="top">            <big><?php echo __('Space usage') . ':'; ?></big>            <table width="100%">            <tr>                <th><?php echo __('Type'); ?></th>                <th colspan="2" align="center"><?php echo __('Usage'); ?></th>            </tr>            <tr>                <td style="padding-right: 10px"><?php echo __('Data'); ?></td>                <td align="right"><?php echo $data_size; ?></td>                <td><?php echo $data_unit; ?></td>            </tr>                <?php                if (isset($index_size)) {                    echo "\n";                    ?>            <tr>                <td style="padding-right: 10px"><?php echo __('Index'); ?></td>                <td align="right"><?php echo $index_size; ?></td>                <td><?php echo $index_unit; ?></td>            </tr>                    <?php                }                if (isset($free_size)) {                    echo "\n";                    ?>            <tr style="color: #bb0000">                <td style="padding-right: 10px"><?php echo __('Overhead'); ?></td>                <td align="right"><?php echo $free_size; ?></td>                <td><?php echo $free_unit; ?></td>            </tr>            <tr>                <td style="padding-right: 10px"><?php echo __('Effective'); ?></td>                <td align="right"><?php echo $effect_size; ?></td>                <td><?php echo $effect_unit; ?></td>            </tr>                    <?php                }                if (isset($tot_size) && $mergetable == false) {                    echo "\n";                    ?>            <tr>                <td style="padding-right: 10px"><?php echo __('Total'); ?></td>                <td align="right"><?php echo $tot_size; ?></td>                <td><?php echo $tot_unit; ?></td>            </tr>                    <?php                }                echo "\n";                ?>            </table>        </td>        <td width="20">&nbsp;</td>        <!-- Rows Statistic -->        <td valign="top">            <big><?php echo __('Row Statistics') . ':'; ?></big>            <table width="100%">            <tr>                <th><?php echo __('Statements'); ?></th>                <th align="center"><?php echo __('Value'); ?></th>            </tr>                <?php                if (isset($showtable['Row_format'])) {                    ?>            <tr>                <td><?php echo __('Format'); ?></td>                <td align="<?php echo $cell_align_left; ?>">                    <?php                    if ($showtable['Row_format'] == 'Fixed') {                        echo __('static');                    } elseif ($showtable['Row_format'] == 'Dynamic') {                        echo __('dynamic');                    } else {                        echo $showtable['Row_format'];                    }                    ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Rows'])) {                    ?>            <tr>                <td><?php echo __('Rows'); ?></td>                <td align="right">                    <?php echo PMA_formatNumber($showtable['Rows'], 0) . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Avg_row_length']) && $showtable['Avg_row_length'] > 0) {                    ?>            <tr>                <td><?php echo __('Row length'); ?>&nbsp;&oslash;</td>                <td>                    <?php echo PMA_formatNumber($showtable['Avg_row_length'], 0) . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Data_length']) && $showtable['Rows'] > 0 && $mergetable == false) {                    ?>            <tr>                <td><?php echo __('Row size'); ?>&nbsp;&oslash;</td>                <td align="right">                    <?php echo $avg_size . ' ' . $avg_unit . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Auto_increment'])) {                    ?>            <tr>                <td><?php echo __('Next autoindex'); ?></td>                <td align="right">                    <?php echo PMA_formatNumber($showtable['Auto_increment'], 0) . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Create_time'])) {                    ?>            <tr>                <td><?php echo __('Creation'); ?></td>                <td align="right">                    <?php echo PMA_localisedDate(strtotime($showtable['Create_time'])) . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Update_time'])) {                    ?>            <tr>                <td><?php echo __('Last update'); ?></td>                <td align="right">                    <?php echo PMA_localisedDate(strtotime($showtable['Update_time'])) . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Check_time'])) {                    ?>            <tr>                <td><?php echo __('Last check'); ?></td>                <td align="right">                    <?php echo PMA_localisedDate(strtotime($showtable['Check_time'])) . "\n"; ?>                </td>            </tr>                    <?php                }                ?>            </table>        </td>    </tr>    </table>                <?php            } // end if ($nonisam == false)        } // end if ($cfg['ShowStats'])    }    if ($multi_tables) {        unset($num_rows, $show_comment);        echo '<hr />' . "\n";    } // end if    echo '</div>' . "\n";} // end while/** * Displays the footer */PMA_printButton();echo "<div id='PMA_disable_floating_menubar'></div>\n";require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for creating a table (if user has privileges for that) * * for MySQL >= 4.1.0, we should be able to detect if user has a CREATE * privilege by looking at SHOW GRANTS output; * for < 4.1.0, it could be more difficult because the logic tries to * detect the current host and it might be expressed in many ways; also * on a shared server, the user might be unable to define a controluser * that has the proper rights to the "mysql" db; * so we give up and assume that user has the right to create a table * * Note: in this case we could even skip the following "foreach" logic * * Addendum, 2006-01-19: ok, I give up. We got some reports about servers * where the hostname field in mysql.user is not the same as the one * in mysql.db for a user. In this case, SHOW GRANTS does not return * the db-specific privileges. And probably, those users are on a shared * server, so can't set up a control user with rights to the "mysql" db. * We cannot reliably detect the db-specific privileges, so no more * warnings about the lack of privileges for CREATE TABLE. Tested * on MySQL 5.0.18. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/check_user_privileges.lib.php';$is_create_table_priv = true;?>    <form id="create_table_form_minimal" method="post" action="tbl_create.php"<?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><fieldset>    <legend><?phpif ($GLOBALS['cfg']['PropertiesIconic']) {    echo PMA_getImage('b_newtbl.png');}echo __('Create table');?>    </legend>    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <div class="formelement">        <?php echo __('Name'); ?>:        <input type="text" name="table" maxlength="64" size="30" />    </div>    <div class="formelement">        <?php echo __('Number of columns'); ?>:        <input type="text" name="num_fields" size="2" />    </div>    <div class="clearfloat"></div></fieldset><fieldset class="tblFooters">    <input type="submit" value="<?php echo __('Go'); ?>" /></fieldset></form>
<?php/** * Enter description here... * @package PhpMyAdmin * *//** * Database listing. */require_once './libraries/List_Database.class.php';/** * phpMyAdmin main Controller * * * * @package PhpMyAdmin */class PMA{    /**     * Holds database list     *     * @var PMA_List_Database     */    protected $databases = null;    /**     * DBMS user link     *     * @var resource     */    protected $userlink = null;    /**     * DBMS control link     *     * @var resource     */    protected $controllink = null;    /**     * magic access to protected/inaccessible members/properties     *     * @see http://php.net/language.oop5.overloading     *     * @param string $param     * @return mixed     */    public function __get($param)    {        switch ($param) {            case 'databases' :                return $this->getDatabaseList();                break;            case 'userlink' :                return $this->userlink;                break;            case 'controllink' :                return $this->controllink;                break;        }        return null;    }    /**     * magic access to protected/inaccessible members/properties     *     * @see http://php.net/language.oop5.overloading     *     * @param string $param     * @param mixed  $value     */    public function __set($param, $value)    {        switch ($param) {            case 'userlink' :                $this->userlink = $value;                break;            case 'controllink' :                $this->controllink = $value;                break;        }    }    /**     * Accessor to PMA::$databases     *     * @return PMA_List_Databases     */    public function getDatabaseList()    {        if (null === $this->databases) {            $this->databases = new PMA_List_Database($this->userlink, $this->controllink);        }        return $this->databases;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Triggers management. * * @package PhpMyAdmin *//** * Include required files */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';/** * Include JavaScript libraries */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'rte/common.js';$GLOBALS['js_include'][] = 'rte/triggers.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';/** * Include all other files */require_once './libraries/rte/rte_triggers.lib.php';/** * Do the magic */$_PMA_RTE = 'TRI';require_once './libraries/rte/rte_main.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Config file view and save screen * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/index.lib.php';require_once './setup/lib/ConfigGenerator.class.php';$config_readable = false;$config_writable = false;$config_exists = false;check_config_rw($config_readable, $config_writable, $config_exists);?><h2><?php echo __('Configuration file') ?></h2><?php display_form_top('config.php'); ?><input type="hidden" name="eol" value="<?php echo htmlspecialchars(PMA_ifSetOr($_GET['eol'], 'unix')) ?>" /><?php display_fieldset_top('', '', null, array('class' => 'simple')); ?><tr>    <td>        <textarea cols="50" rows="20" name="textconfig" id="textconfig" spellcheck="false"><?php            echo htmlspecialchars(ConfigGenerator::getConfigFile())        ?></textarea>    </td></tr><tr>    <td class="lastrow" style="text-align: left">        <input type="submit" name="submit_download" value="<?php echo __('Download') ?>" class="green" />        <input type="submit" name="submit_save" value="<?php echo __('Save') ?>"<?php if (!$config_writable) echo ' disabled="disabled"' ?> />    </td></tr><?phpdisplay_fieldset_bottom_simple();display_form_bottom();?>
<?php/** * Used to create server variables documentation links * $VARIABLE_DOC_LINKS[string $name] = array( *    string $anchor, *    string $chapter, *    string $type); * string $name: name of the system variable * string $anchor: anchor to the documentation page * string $chapter: chapter of "HTML, one page per chapter" documentation * string $type: type of system variable * string $format: if set to 'byte' it will format the variable * with PMA_formatByteDown() */$VARIABLE_DOC_LINKS = array();$VARIABLE_DOC_LINKS['auto_increment_increment'] = array(    'auto_increment_increment',    'replication-options-master',    'sysvar');$VARIABLE_DOC_LINKS['auto_increment_offset'] = array(    'auto_increment_offset',    'replication-options-master',    'sysvar');$VARIABLE_DOC_LINKS['autocommit'] = array(    'autocommit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['automatic_sp_privileges'] = array(    'automatic_sp_privileges',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['back_log'] = array(    'back_log',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['basedir'] = array(    'basedir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['big_tables'] = array(    'big-tables',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['bind_address'] = array(    'bind-address',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['binlog_cache_size'] = array(    'binlog_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['binlog_direct_non_transactional_updates'] = array(    'binlog_direct_non_transactional_updates',    'replication-options-binary-log',    'sysvar');$VARIABLE_DOC_LINKS['binlog_format'] = array(    'binlog-format',    'server-options',    'sysvar');$VARIABLE_DOC_LINKS['binlog_stmt_cache_size'] = array(    'binlog_stmt_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['bulk_insert_buffer_size'] = array(    'bulk_insert_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['character_set_client'] = array(    'character_set_client',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_connection'] = array(    'character_set_connection',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_database'] = array(    'character_set_database',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_filesystem'] = array(    'character-set-filesystem',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['character_set_results'] = array(    'character_set_results',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_server'] = array(    'character-set-server',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['character_set_system'] = array(    'character_set_system',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_sets_dir'] = array(    'character-sets-dir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['collation_connection'] = array(    'collation_connection',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['collation_database'] = array(    'collation_database',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['collation_server'] = array(    'collation-server',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['completion_type'] = array(    'completion_type',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['concurrent_insert'] = array(    'concurrent_insert',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['connect_timeout'] = array(    'connect_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['datadir'] = array(    'datadir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['date_format'] = array(    'date_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['datetime_format'] = array(    'datetime_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['debug'] = array(    'debug',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['debug_sync'] = array(    'debug_sync',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['default_storage_engine'] = array(    'default-storage-engine',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['default_week_format'] = array(    'default_week_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['delay_key_write'] = array(    'delay-key-write',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['delayed_insert_limit'] = array(    'delayed_insert_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['delayed_insert_timeout'] = array(    'delayed_insert_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['delayed_queue_size'] = array(    'delayed_queue_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['div_precision_increment'] = array(    'div_precision_increment',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['engine_condition_pushdown'] = array(    'engine-condition-pushdown',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['error_count'] = array(    'error_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['event_scheduler'] = array(    'event-scheduler',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['expire_logs_days'] = array(    'expire_logs_days',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['external_user'] = array(    'external_user',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['flush'] = array(    'flush',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['flush_time'] = array(    'flush_time',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['foreign_key_checks'] = array(    'foreign_key_checks',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_boolean_syntax'] = array(    'ft_boolean_syntax',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_max_word_len'] = array(    'ft_max_word_len',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_min_word_len'] = array(    'ft_min_word_len',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_query_expansion_limit'] = array(    'ft_query_expansion_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_stopword_file'] = array(    'ft_stopword_file',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['general_log'] = array(    'general-log',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['general_log_file'] = array(    'general_log_file',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['group_concat_max_len'] = array(    'group_concat_max_len',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_compress'] = array(    'have_compress',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_crypt'] = array(    'have_crypt',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_csv'] = array(    'have_csv',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_dynamic_loading'] = array(    'have_dynamic_loading',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_geometry'] = array(    'have_geometry',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_innodb'] = array(    'have_innodb',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_openssl'] = array(    'have_openssl',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_partitioning'] = array(    'have_partitioning',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_profiling'] = array(    'have_profiling',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_query_cache'] = array(    'have_query_cache',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_rtree_keys'] = array(    'have_rtree_keys',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_ssl'] = array(    'have_ssl',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_symlink'] = array(    'have_symlink',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['hostname'] = array(    'hostname',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['identity'] = array(    'identity',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ignore_builtin_innodb'] = array(    'ignore-builtin-innodb',    'innodb-parameters',    'option_mysqld');$VARIABLE_DOC_LINKS['init_connect'] = array(    'init_connect',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['init_file'] = array(    'init-file',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['init_slave'] = array(    'init_slave',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['innodb_adaptive_flushing'] = array(    'innodb_adaptive_flushing',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_adaptive_hash_index'] = array(    'innodb_adaptive_hash_index',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_additional_mem_pool_size'] = array(    'innodb_additional_mem_pool_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_autoextend_increment'] = array(    'innodb_autoextend_increment',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_autoinc_lock_mode'] = array(    'innodb_autoinc_lock_mode',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_buffer_pool_instances'] = array(    'innodb_buffer_pool_instances',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_buffer_pool_size'] = array(    'innodb_buffer_pool_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_change_buffering'] = array(    'innodb_change_buffering',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_checksums'] = array(    'innodb_checksums',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_commit_concurrency'] = array(    'innodb_commit_concurrency',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_concurrency_tickets'] = array(    'innodb_concurrency_tickets',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_data_file_path'] = array(    'innodb_data_file_path',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_data_home_dir'] = array(    'innodb_data_home_dir',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_doublewrite'] = array(    'innodb_doublewrite',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_fast_shutdown'] = array(    'innodb_fast_shutdown',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_format'] = array(    'innodb_file_format',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_format_check'] = array(    'innodb_file_format_check',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_format_max'] = array(    'innodb_file_format_max',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_per_table'] = array(    'innodb_file_per_table',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_flush_log_at_trx_commit'] = array(    'innodb_flush_log_at_trx_commit',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_flush_method'] = array(    'innodb_flush_method',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_force_recovery'] = array(    'innodb_force_recovery',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_io_capacity'] = array(    'innodb_io_capacity',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_lock_wait_timeout'] = array(    'innodb_lock_wait_timeout',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_locks_unsafe_for_binlog'] = array(    'innodb_locks_unsafe_for_binlog',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_log_buffer_size'] = array(    'innodb_log_buffer_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_log_file_size'] = array(    'innodb_log_file_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_log_files_in_group'] = array(    'innodb_log_files_in_group',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_log_group_home_dir'] = array(    'innodb_log_group_home_dir',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_max_dirty_pages_pct'] = array(    'innodb_max_dirty_pages_pct',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_max_purge_lag'] = array(    'innodb_max_purge_lag',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_mirrored_log_groups'] = array(    'innodb_mirrored_log_groups',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_old_blocks_pct'] = array(    'innodb_old_blocks_pct',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_old_blocks_time'] = array(    'innodb_old_blocks_time',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_open_files'] = array(    'innodb_open_files',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_purge_batch_size'] = array(    'innodb_purge_batch_size',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_purge_threads'] = array(    'innodb_purge_threads',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_read_ahead_threshold'] = array(    'innodb_read_ahead_threshold',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_read_io_threads'] = array(    'innodb_read_io_threads',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_replication_delay'] = array(    'innodb_replication_delay',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_rollback_on_timeout'] = array(    'innodb_rollback_on_timeout',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_spin_wait_delay'] = array(    'innodb_spin_wait_delay',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_stats_on_metadata'] = array(    'innodb_stats_on_metadata',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_stats_sample_pages'] = array(    'innodb_stats_sample_pages',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_strict_mode'] = array(    'innodb_strict_mode',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_support_xa'] = array(    'innodb_support_xa',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_sync_spin_loops'] = array(    'innodb_sync_spin_loops',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_table_locks'] = array(    'innodb_table_locks',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_thread_concurrency'] = array(    'innodb_thread_concurrency',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_thread_sleep_delay'] = array(    'innodb_thread_sleep_delay',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_use_native_aio'] = array(    'innodb_use_native_aio',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_use_sys_malloc'] = array(    'innodb_use_sys_malloc',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_version'] = array(    'innodb_version',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_write_io_threads'] = array(    'innodb_write_io_threads',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['insert_id'] = array(    'insert_id',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['interactive_timeout'] = array(    'interactive_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['join_buffer_size'] = array(    'join_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['keep_files_on_create'] = array(    'keep_files_on_create',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['key_buffer_size'] = array(    'key_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['key_cache_age_threshold'] = array(    'key_cache_age_threshold',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['key_cache_block_size'] = array(    'key_cache_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['key_cache_division_limit'] = array(    'key_cache_division_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['language'] = array(    'language',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['large_files_support'] = array(    'large_files_support',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['large_page_size'] = array(    'large_page_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['large_pages'] = array(    'large-pages',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['last_insert_id'] = array(    'last_insert_id',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['lc_messages'] = array(    'lc-messages',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['lc_messages_dir'] = array(    'lc-messages-dir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['lc_time_names'] = array(    'lc_time_names',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['license'] = array(    'license',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['local_infile'] = array(    'local_infile',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['lock_wait_timeout'] = array(    'lock_wait_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['locked_in_memory'] = array(    'locked_in_memory',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['log'] = array(    'log',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_bin'] = array(    'log_bin',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['log-bin'] = array(    'log-bin',    'replication-options-binary-log',    'option_mysqld');$VARIABLE_DOC_LINKS['log_bin_trust_function_creators'] = array(    'log-bin-trust-function-creators',    'replication-options-binary-log',    'option_mysqld');$VARIABLE_DOC_LINKS['log_error'] = array(    'log-error',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_output'] = array(    'log-output',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_queries_not_using_indexes'] = array(    'log-queries-not-using-indexes',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_slave_updates'] = array(    'log-slave-updates',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['log_slow_queries'] = array(    'log-slow-queries',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_warnings'] = array(    'log-warnings',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['long_query_time'] = array(    'long_query_time',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['low_priority_updates'] = array(    'low-priority-updates',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['lower_case_file_system'] = array(    'lower_case_file_system',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['lower_case_table_names'] = array(    'lower_case_table_names',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['master-bind'] = array(    '',    'replication-options',    0);$VARIABLE_DOC_LINKS['max_allowed_packet'] = array(    'max_allowed_packet',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_binlog_cache_size'] = array(    'max_binlog_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_binlog_size'] = array(    'max_binlog_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_binlog_stmt_cache_size'] = array(    'max_binlog_stmt_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_connect_errors'] = array(    'max_connect_errors',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_connections'] = array(    'max_connections',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_delayed_threads'] = array(    'max_delayed_threads',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_error_count'] = array(    'max_error_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_heap_table_size'] = array(    'max_heap_table_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_insert_delayed_threads'] = array(    'max_insert_delayed_threads',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_join_size'] = array(    'max_join_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_length_for_sort_data'] = array(    'max_length_for_sort_data',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_prepared_stmt_count'] = array(    'max_prepared_stmt_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_relay_log_size'] = array(    'max_relay_log_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_seeks_for_key'] = array(    'max_seeks_for_key',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_sort_length'] = array(    'max_sort_length',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_sp_recursion_depth'] = array(    'max_sp_recursion_depth',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_tmp_tables'] = array(    'max_tmp_tables',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_user_connections'] = array(    'max_user_connections',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_write_lock_count'] = array(    'max_write_lock_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['memlock'] = array(    'memlock',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['min_examined_row_limit'] = array(    'min-examined-row-limit',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['myisam_data_pointer_size'] = array(    'myisam_data_pointer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_max_sort_file_size'] = array(    'myisam_max_sort_file_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_mmap_size'] = array(    'myisam_mmap_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_recover_options'] = array(    'myisam_recover_options',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['myisam_repair_threads'] = array(    'myisam_repair_threads',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['myisam_sort_buffer_size'] = array(    'myisam_sort_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_stats_method'] = array(    'myisam_stats_method',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['myisam_use_mmap'] = array(    'myisam_use_mmap',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['named_pipe'] = array(    'named_pipe',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_buffer_length'] = array(    'net_buffer_length',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_read_timeout'] = array(    'net_read_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_retry_count'] = array(    'net_retry_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_write_timeout'] = array(    'net_write_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['new'] = array(    'new',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['old'] = array(    'old',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['old_alter_table'] = array(    'old-alter-table',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['old_passwords'] = array(    'old-passwords',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['open_files_limit'] = array(    'open-files-limit',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['optimizer_prune_level'] = array(    'optimizer_prune_level',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['optimizer_search_depth'] = array(    'optimizer_search_depth',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['optimizer_switch'] = array(    'optimizer_switch',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['partition'] = array(    'partition',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['performance_schema'] = array(    'performance_schema',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_events_waits_history_long_size'] = array(    'performance_schema_events_waits_history_long_size',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_events_waits_history_size'] = array(    'performance_schema_events_waits_history_size',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_cond_classes'] = array(    'performance_schema_max_cond_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_cond_instances'] = array(    'performance_schema_max_cond_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_file_classes'] = array(    'performance_schema_max_file_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_file_handles'] = array(    'performance_schema_max_file_handles',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_file_instances'] = array(    'performance_schema_max_file_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_mutex_classes'] = array(    'performance_schema_max_mutex_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_mutex_instances'] = array(    'performance_schema_max_mutex_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_rwlock_classes'] = array(    'performance_schema_max_rwlock_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_rwlock_instances'] = array(    'performance_schema_max_rwlock_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_table_handles'] = array(    'performance_schema_max_table_handles',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_table_instances'] = array(    'performance_schema_max_table_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_thread_classes'] = array(    'performance_schema_max_thread_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_thread_instances'] = array(    'performance_schema_max_thread_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['pid_file'] = array(    'pid-file',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['plugin_dir'] = array(    'plugin_dir',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['port'] = array(    'port',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['preload_buffer_size'] = array(    'preload_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['profiling'] = array(    'profiling',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['profiling_history_size'] = array(    'profiling_history_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['protocol_version'] = array(    'protocol_version',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['proxy_user'] = array(    'proxy_user',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['pseudo_thread_id'] = array(    'pseudo_thread_id',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_alloc_block_size'] = array(    'query_alloc_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['query_cache_limit'] = array(    'query_cache_limit',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['query_cache_min_res_unit'] = array(    'query_cache_min_res_unit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_cache_size'] = array(    'query_cache_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['query_cache_type'] = array(    'query_cache_type',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_cache_wlock_invalidate'] = array(    'query_cache_wlock_invalidate',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_prealloc_size'] = array(    'query_prealloc_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['rand_seed1'] = array(    'rand_seed1',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rand_seed2'] = array(    'rand_seed2',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['range_alloc_block_size'] = array(    'range_alloc_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['read_buffer_size'] = array(    'read_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['read_only'] = array(    'read_only',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['read_rnd_buffer_size'] = array(    'read_rnd_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['relay-log-index'] = array(    'relay-log-index',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['relay_log_index'] = array(    'relay_log_index',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_info_file'] = array(    'relay_log_info_file',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_purge'] = array(    'relay_log_purge',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_recovery'] = array(    'relay_log_recovery',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_space_limit'] = array(    'relay_log_space_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['report_host'] = array(    'report-host',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['report_password'] = array(    'report-password',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['report_port'] = array(    'report-port',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['report_user'] = array(    'report-user',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['rpl_recovery_rank'] = array(    'rpl_recovery_rank',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_enabled'] = array(    'rpl_semi_sync_master_enabled',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_timeout'] = array(    'rpl_semi_sync_master_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_trace_level'] = array(    'rpl_semi_sync_master_trace_level',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_wait_no_slave'] = array(    'rpl_semi_sync_master_wait_no_slave',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_slave_enabled'] = array(    'rpl_semi_sync_slave_enabled',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_slave_trace_level'] = array(    'rpl_semi_sync_slave_trace_level',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['safe_show_database'] = array(    'safe-show-database',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['secure_auth'] = array(    'secure-auth',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['secure_file_priv'] = array(    'secure-file-priv',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['server_id'] = array(    'server-id',    'replication-options',    'option_mysqld');$VARIABLE_DOC_LINKS['shared_memory'] = array(    'shared_memory',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['shared_memory_base_name'] = array(    'shared_memory_base_name',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['skip_external_locking'] = array(    'skip-external-locking',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['skip_name_resolve'] = array(    'skip-name-resolve',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['skip_networking'] = array(    'skip-networking',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['skip_show_database'] = array(    'skip-show-database',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_compressed_protocol'] = array(    'slave_compressed_protocol',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slave_exec_mode'] = array(    'slave_exec_mode',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slave_load_tmpdir'] = array(    'slave-load-tmpdir',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_net_timeout'] = array(    'slave-net-timeout',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_skip_errors'] = array(    'slave-skip-errors',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_transaction_retries'] = array(    'slave_transaction_retries',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slave_type_conversions'] = array(    'slave_type_conversions',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slow_launch_time'] = array(    'slow_launch_time',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['slow_query_log'] = array(    'slow-query-log',    'server-options',    'server-system-variables');$VARIABLE_DOC_LINKS['slow_query_log_file'] = array(    'slow_query_log_file',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['socket'] = array(    'socket',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['sort_buffer_size'] = array(    'sort_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['sql_auto_is_null'] = array(    'sql_auto_is_null',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_big_selects'] = array(    'sql_big_selects',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_big_tables'] = array(    'big-tables',    'server-options',    'server-system-variables');$VARIABLE_DOC_LINKS['sql_buffer_result'] = array(    'sql_buffer_result',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_log_bin'] = array(    'sql_log_bin',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_log_off'] = array(    'sql_log_off',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_log_update'] = array(    'sql_log_update',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_low_priority_updates'] = array(    'sql_low_priority_updates',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_max_join_size'] = array(    'sql_max_join_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_mode'] = array(    'sql-mode',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['sql_notes'] = array(    'sql_notes',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_quote_show_create'] = array(    'sql_quote_show_create',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_safe_updates'] = array(    'sql_safe_updates',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_select_limit'] = array(    'sql_select_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_slave_skip_counter'] = array(    'sql_slave_skip_counter',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['sql_warnings'] = array(    'sql_warnings',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ssl_ca'] = array(    'ssl-ca',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_capath'] = array(    'ssl-capath',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_cert'] = array(    'ssl-cert',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_cipher'] = array(    'ssl-cipher',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_key'] = array(    'ssl-key',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['storage_engine'] = array(    'storage_engine',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sync_binlog'] = array(    'sync_binlog',    'replication-options-binary-log',    'sysvar');$VARIABLE_DOC_LINKS['sync_frm'] = array(    'sync_frm',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sync_master_info'] = array(    'sync_master_info',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['sync_relay_log'] = array(    'sync_relay_log',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['sync_relay_log_info'] = array(    'sync_relay_log_info',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['system_time_zone'] = array(    'system_time_zone',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_definition_cache'] = array(    'table_definition_cache',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_lock_wait_timeout'] = array(    'table_lock_wait_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_open_cache'] = array(    'table_open_cache',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_type'] = array(    'table_type',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_cache_size'] = array(    'thread_cache_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_concurrency'] = array(    'thread_concurrency',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_handling'] = array(    'thread_handling',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_stack'] = array(    'thread_stack',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['time_format'] = array(    'time_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['time_zone'] = array(    'time_zone',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['timed_mutexes'] = array(    'timed_mutexes',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['timestamp'] = array(    'timestamp',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['tmp_table_size'] = array(    'tmp_table_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['tmpdir'] = array(    'tmpdir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['transaction_alloc_block_size'] = array(    'transaction_alloc_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['transaction_prealloc_size'] = array(    'transaction_prealloc_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['tx_isolation'] = array(    'tx_isolation',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['unique_checks'] = array(    'unique_checks',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['updatable_views_with_limit'] = array(    'updatable_views_with_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version'] = array(    'version',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version_comment'] = array(    'version_comment',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version_compile_machine'] = array(    'version_compile_machine',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version_compile_os'] = array(    'version_compile_os',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['wait_timeout'] = array(    'wait_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['warning_count'] = array(    'warning_count',    'server-system-variables',    'sysvar');?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * This class tracks changes on databases, tables and views. * For more information please see phpMyAdmin/Documentation.html * * @package PhpMyAdmin * * @todo use stristr instead of strstr */class PMA_Tracker{    /**     * Whether tracking is ready.     */    static protected $enabled = false;    /**     * Defines the internal PMA table which contains tracking data.     *     * @access  protected     * @var string     */    static protected $pma_table;    /**     * Defines the usage of DROP TABLE statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_table;    /**     * Defines the usage of DROP VIEW statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_view;    /**     * Defines the usage of DROP DATABASE statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_database;    /**     * Defines auto-creation of tracking versions.     *     * @var boolean     */    static protected $version_auto_create;    /**     * Defines the default set of tracked statements.     *     * @var string     */    static protected $default_tracking_set;    /**     * Flags copied from `tracking` column definition in `pma_tracking` table.     * Used for column type conversion in Drizzle.     *     * @var array     */    static private $tracking_set_flags = array('UPDATE','REPLACE','INSERT','DELETE','TRUNCATE','CREATE DATABASE',            'ALTER DATABASE','DROP DATABASE','CREATE TABLE','ALTER TABLE','RENAME TABLE','DROP TABLE','CREATE INDEX',            'DROP INDEX','CREATE VIEW','ALTER VIEW','DROP VIEW');    /**     * Initializes settings. See phpMyAdmin/Documentation.html.     *     * @static     *     * @return nothing     */    static protected function init()    {        self::$pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) .".".                           PMA_backquote($GLOBALS['cfg']['Server']['tracking']);        self::$add_drop_table = $GLOBALS['cfg']['Server']['tracking_add_drop_table'];        self::$add_drop_view = $GLOBALS['cfg']['Server']['tracking_add_drop_view'];        self::$add_drop_database = $GLOBALS['cfg']['Server']['tracking_add_drop_database'];        self::$default_tracking_set = $GLOBALS['cfg']['Server']['tracking_default_statements'];        self::$version_auto_create = $GLOBALS['cfg']['Server']['tracking_version_auto_create'];    }    /**     * Actually enables tracking. This needs to be done after all     * underlaying code is initialized.     *     * @static     *     * @return nothing     */    static public function enable()    {        self::$enabled = true;    }    /**     * Gets the on/off value of the Tracker module, starts initialization.     *     * @static     *     * @return boolean (true=on|false=off)     */    static public function isActive()    {        if (! self::$enabled) {            return false;        }        /* We need to avoid attempt to track any queries from PMA_getRelationsParam */        self::$enabled = false;        $cfgRelation = PMA_getRelationsParam();        /* Restore original state */        self::$enabled = true;        if (! $cfgRelation['trackingwork']) {            return false;        }        self::init();        if (isset(self::$pma_table)) {            return true;        } else {            return false;        }    }    /**     * Parses the name of a table from a SQL statement substring.     *     * @param string $string part of SQL statement     *     * @static     *     * @return string the name of table     */    static protected function getTableName($string)    {        if (strstr($string, '.')) {            $temp = explode('.', $string);            $tablename = $temp[1];        } else {            $tablename = $string;        }        $str = explode("\n", $tablename);        $tablename = $str[0];        $tablename = str_replace(';', '', $tablename);        $tablename = str_replace('`', '', $tablename);        $tablename = trim($tablename);        return $tablename;    }    /**     * Gets the tracking status of a table, is it active or deactive ?     *     * @param string $dbname    name of database     * @param string $tablename name of table     *     * @static     *     * @return boolean true or false     */    static public function isTracked($dbname, $tablename)    {        if (! self::$enabled) {            return false;        }        /* We need to avoid attempt to track any queries from PMA_getRelationsParam */        self::$enabled = false;        $cfgRelation = PMA_getRelationsParam();        /* Restore original state */        self::$enabled = true;        if (! $cfgRelation['trackingwork']) {            return false;        }        $sql_query = " SELECT tracking_active FROM " . self::$pma_table .        " WHERE db_name = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND table_name = '" . PMA_sqlAddSlashes($tablename) . "' " .        " ORDER BY version DESC";        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        if (isset($row['tracking_active']) && $row['tracking_active'] == 1) {            return true;        } else {            return false;        }    }    /**     * Returns the comment line for the log.     *     * @return string Comment, contains date and username     */    static public function getLogComment()    {        $date = date('Y-m-d H:i:s');        return "# log " . $date . " " . $GLOBALS['cfg']['Server']['user'] . "\n";    }    /**     * Creates tracking version of a table / view     * (in other words: create a job to track future changes on the table).     *     * @param string $dbname       name of database     * @param string $tablename    name of table     * @param string $version      version     * @param string $tracking_set set of tracking statements     * @param bool   $is_view      if table is a view     *     * @static     *     * @return int result of version insertion     */    static public function createVersion($dbname, $tablename, $version, $tracking_set = '', $is_view = false)    {        global $sql_backquotes;        if ($tracking_set == '') {            $tracking_set = self::$default_tracking_set;        }        include_once './libraries/export/sql.php';        $sql_backquotes = true;        $date = date('Y-m-d H:i:s');        // Get data definition snapshot of table        $columns = PMA_DBI_get_columns($dbname, $tablename, null, true);        // int indices to reduce size        $columns = array_values($columns);        // remove Privileges to reduce size        for ($i = 0; $i < count($columns); $i++) {            unset($columns[$i]['Privileges']);        }        $indexes = PMA_DBI_get_table_indexes($dbname, $tablename);        $snapshot = array('COLUMNS' => $columns, 'INDEXES' => $indexes);        $snapshot = serialize($snapshot);        // Get DROP TABLE / DROP VIEW and CREATE TABLE SQL statements        $sql_backquotes = true;        $create_sql  = "";        if (self::$add_drop_table == true && $is_view == false) {            $create_sql .= self::getLogComment() .                           'DROP TABLE IF EXISTS ' . PMA_backquote($tablename) . ";\n";        }        if (self::$add_drop_view == true && $is_view == true) {            $create_sql .= self::getLogComment() .                           'DROP VIEW IF EXISTS ' . PMA_backquote($tablename) . ";\n";        }        $create_sql .= self::getLogComment() .                       PMA_getTableDef($dbname, $tablename, "\n", "");        // Save version        $sql_query = "/*NOTRACK*/\n" .        "INSERT INTO" . self::$pma_table . " (" .        "db_name, " .        "table_name, " .        "version, " .        "date_created, " .        "date_updated, " .        "schema_snapshot, " .        "schema_sql, " .        "data_sql, " .        "tracking " .        ") " .        "values (        '" . PMA_sqlAddSlashes($dbname) . "',        '" . PMA_sqlAddSlashes($tablename) . "',        '" . PMA_sqlAddSlashes($version) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($snapshot) . "',        '" . PMA_sqlAddSlashes($create_sql) . "',        '" . PMA_sqlAddSlashes("\n") . "',        '" . PMA_sqlAddSlashes(self::transformTrackingSet($tracking_set)) . "' )";        $result = PMA_query_as_controluser($sql_query);        if ($result) {            // Deactivate previous version            self::deactivateTracking($dbname, $tablename, ($version - 1));        }        return $result;    }    /**     * Removes all tracking data for a table     *     * @param string $dbname    name of database     * @param string $tablename name of table     *     * @static     *     * @return int result of version insertion     */    static public function deleteTracking($dbname, $tablename)    {        $sql_query = "/*NOTRACK*/\n" .        "DELETE FROM " . self::$pma_table . " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "'";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Creates tracking version of a database     * (in other words: create a job to track future changes on the database).     *     * @param string $dbname       name of database     * @param string $version      version     * @param string $query        query     * @param string $tracking_set set of tracking statements     *     * @static     *     * @return int result of version insertion     */    static public function createDatabaseVersion($dbname, $version, $query, $tracking_set = 'CREATE DATABASE,ALTER DATABASE,DROP DATABASE')    {        $date = date('Y-m-d H:i:s');        if ($tracking_set == '') {            $tracking_set = self::$default_tracking_set;        }        include_once './libraries/export/sql.php';        $create_sql  = "";        if (self::$add_drop_database == true) {            $create_sql .= self::getLogComment() .                           'DROP DATABASE IF EXISTS ' . PMA_backquote($dbname) . ";\n";        }        $create_sql .= self::getLogComment() . $query;        // Save version        $sql_query = "/*NOTRACK*/\n" .        "INSERT INTO" . self::$pma_table . " (" .        "db_name, " .        "table_name, " .        "version, " .        "date_created, " .        "date_updated, " .        "schema_snapshot, " .        "schema_sql, " .        "data_sql, " .        "tracking " .        ") " .        "values (        '" . PMA_sqlAddSlashes($dbname) . "',        '" . PMA_sqlAddSlashes('') . "',        '" . PMA_sqlAddSlashes($version) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes('') . "',        '" . PMA_sqlAddSlashes($create_sql) . "',        '" . PMA_sqlAddSlashes("\n") . "',        '" . PMA_sqlAddSlashes(self::transformTrackingSet($tracking_set)) . "' )";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Changes tracking of a table.     *     * @param string  $dbname    name of database     * @param string  $tablename name of table     * @param string  $version   version     * @param integer $new_state the new state of tracking     *     * @static     *     * @return int result of SQL query     */    static private function _changeTracking($dbname, $tablename, $version, $new_state)    {        $sql_query = " UPDATE " . self::$pma_table .        " SET `tracking_active` = '" . $new_state . "' " .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' " .        " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Changes tracking data of a table.     *     * @param string       $dbname    name of database     * @param string       $tablename name of table     * @param string       $version   version     * @param string       $type      type of data(DDL || DML)     * @param string|array $new_data  the new tracking data     *     * @static     *     * @return bool result of change     */    static public function changeTrackingData($dbname, $tablename, $version, $type, $new_data)    {        if ($type == 'DDL') {            $save_to = 'schema_sql';        } elseif ($type == 'DML') {            $save_to = 'data_sql';        } else {            return false;        }        $date  = date('Y-m-d H:i:s');        $new_data_processed = '';        if (is_array($new_data)) {            foreach ($new_data as $data) {                $new_data_processed .= '# log ' . $date . ' ' . $data['username']                    . PMA_sqlAddSlashes($data['statement']) . "\n";            }        } else {            $new_data_processed = $new_data;        }        $sql_query = " UPDATE " . self::$pma_table .        " SET `" . $save_to . "` = '" . $new_data_processed . "' " .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' " .        " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Activates tracking of a table.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version     *     * @static     *     * @return int result of SQL query     */    static public function activateTracking($dbname, $tablename, $version)    {        return self::_changeTracking($dbname, $tablename, $version, 1);    }    /**     * Deactivates tracking of a table.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version     *     * @static     *     * @return int result of SQL query     */    static public function deactivateTracking($dbname, $tablename, $version)    {        return self::_changeTracking($dbname, $tablename, $version, 0);    }    /**     * Gets the newest version of a tracking job     * (in other words: gets the HEAD version).     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $statement tracked statement     *     * @static     *     * @return int (-1 if no version exists | >  0 if a version exists)     */    static public function getVersion($dbname, $tablename, $statement = null)    {        $sql_query = " SELECT MAX(version) FROM " . self::$pma_table .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' ";        if ($statement != "") {            $sql_query .= PMA_DRIZZLE                ? ' AND tracking & ' . self::transformTrackingSet($statement) . ' <> 0'                : " AND FIND_IN_SET('" . $statement . "',tracking) > 0" ;        }        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        return isset($row[0])            ? $row[0]            : -1;    }    /**     * Gets the record of a tracking job.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version number     *     * @static     *     * @return mixed record DDM log, DDL log, structure snapshot, tracked statements.     */    static public function getTrackedData($dbname, $tablename, $version)    {        if (! isset(self::$pma_table)) {            self::init();        }        $sql_query = " SELECT * FROM " . self::$pma_table .            " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' ";        if (! empty($tablename)) {            $sql_query .= " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) ."' ";        }        $sql_query .= " AND `version` = '" . PMA_sqlAddSlashes($version) ."' ".                     " ORDER BY `version` DESC LIMIT 1";        $mixed = PMA_DBI_fetch_assoc(PMA_query_as_controluser($sql_query));        // Parse log        $log_schema_entries = explode('# log ',  $mixed['schema_sql']);        $log_data_entries   = explode('# log ',  $mixed['data_sql']);        $ddl_date_from = $date = date('Y-m-d H:i:s');        $ddlog = array();        $i = 0;        // Iterate tracked data definition statements        // For each log entry we want to get date, username and statement        foreach ($log_schema_entries as $log_entry) {            if (trim($log_entry) != '') {                $date      = substr($log_entry, 0, 19);                $username  = substr($log_entry, 20, strpos($log_entry, "\n") - 20);                if ($i == 0) {                    $ddl_date_from = $date;                }                $statement = rtrim(strstr($log_entry, "\n"));                $ddlog[] = array( 'date' => $date,                                  'username'=> $username,                                  'statement' => $statement );                $i++;            }        }        $date_from = $ddl_date_from;        $date_to   = $ddl_date_to = $date;        $dml_date_from = $date_from;        $dmlog = array();        $i = 0;        // Iterate tracked data manipulation statements        // For each log entry we want to get date, username and statement        foreach ($log_data_entries as $log_entry) {            if (trim($log_entry) != '') {                $date      = substr($log_entry, 0, 19);                $username  = substr($log_entry, 20, strpos($log_entry, "\n") - 20);                if ($i == 0) {                    $dml_date_from = $date;                }                $statement = rtrim(strstr($log_entry, "\n"));                $dmlog[] = array( 'date' => $date,                                  'username' => $username,                                  'statement' => $statement );                $i++;            }        }        $dml_date_to = $date;        // Define begin and end of date range for both logs        if (strtotime($ddl_date_from) <= strtotime($dml_date_from)) {            $data['date_from'] = $ddl_date_from;        } else {            $data['date_from'] = $dml_date_from;        }        if (strtotime($ddl_date_to) >= strtotime($dml_date_to)) {            $data['date_to'] = $ddl_date_to;        } else {            $data['date_to'] = $dml_date_to;        }        $data['ddlog']           = $ddlog;        $data['dmlog']           = $dmlog;        $data['tracking']        = self::transformTrackingSet($mixed['tracking']);        $data['schema_snapshot'] = $mixed['schema_snapshot'];        return $data;    }    /**     * Parses a query. Gets     *  - statement identifier (UPDATE, ALTER TABLE, ...)     *  - type of statement, is it part of DDL or DML ?     *  - tablename     *     * @param string $query query     *     * @static     * @todo: using PMA SQL Parser when possible     * @todo: support multi-table/view drops     *     * @return mixed Array containing identifier, type and tablename.     *     */    static public function parseQuery($query)    {        // Usage of PMA_SQP does not work here        //        // require_once("libraries/sqlparser.lib.php");        // $parsed_sql = PMA_SQP_parse($query);        // $sql_info = PMA_SQP_analyze($parsed_sql);        $query = str_replace("\n", " ", $query);        $query = str_replace("\r", " ", $query);        $query = trim($query);        $query = trim($query, ' -');        $tokens = explode(" ", $query);        foreach ($tokens as $key => $value) {            $tokens[$key] = strtoupper($value);        }        // Parse USE statement, need it for SQL dump imports        if (substr($query, 0, 4) == 'USE ') {            $prefix = explode('USE ', $query);            $GLOBALS['db'] = self::getTableName($prefix[1]);        }        /*         * DDL statements         */        $result['type']         = 'DDL';        // Parse CREATE VIEW statement        if (in_array('CREATE', $tokens) == true            && in_array('VIEW', $tokens) == true            && in_array('AS', $tokens) == true        ) {            $result['identifier'] = 'CREATE VIEW';            $index = array_search('VIEW', $tokens);            $result['tablename'] = strtolower(self::getTableName($tokens[$index + 1]));        }        // Parse ALTER VIEW statement        if (in_array('ALTER', $tokens) == true            && in_array('VIEW', $tokens) == true            && in_array('AS', $tokens) == true            && ! isset($result['identifier'])        ) {            $result['identifier'] = 'ALTER VIEW';            $index = array_search('VIEW', $tokens);            $result['tablename'] = strtolower(self::getTableName($tokens[$index + 1]));        }        // Parse DROP VIEW statement        if (! isset($result['identifier']) && substr($query, 0, 10) == 'DROP VIEW ') {            $result['identifier'] = 'DROP VIEW';            $prefix  = explode('DROP VIEW ', $query);            $str = strstr($prefix[1], 'IF EXISTS');            if ($str == false ) {                $str = $prefix[1];            }            $result['tablename'] = self::getTableName($str);        }        // Parse CREATE DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 15) == 'CREATE DATABASE') {            $result['identifier'] = 'CREATE DATABASE';            $str = str_replace('CREATE DATABASE', '', $query);            $str = str_replace('IF NOT EXISTS', '', $str);            $prefix = explode('DEFAULT ', $str);            $result['tablename'] = '';            $GLOBALS['db'] = self::getTableName($prefix[0]);        }        // Parse ALTER DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 14) == 'ALTER DATABASE') {            $result['identifier'] = 'ALTER DATABASE';            $result['tablename'] = '';        }        // Parse DROP DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 13) == 'DROP DATABASE') {            $result['identifier'] = 'DROP DATABASE';            $str = str_replace('DROP DATABASE', '', $query);            $str = str_replace('IF EXISTS', '', $str);            $GLOBALS['db'] = self::getTableName($str);            $result['tablename'] = '';        }        // Parse CREATE TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 12) == 'CREATE TABLE' ) {            $result['identifier'] = 'CREATE TABLE';            $query   = str_replace('IF NOT EXISTS', '', $query);            $prefix  = explode('CREATE TABLE ', $query);            $suffix  = explode('(', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse ALTER TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 12) == 'ALTER TABLE ') {            $result['identifier'] = 'ALTER TABLE';            $prefix  = explode('ALTER TABLE ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename']  = self::getTableName($suffix[0]);        }        // Parse DROP TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 11) == 'DROP TABLE ') {            $result['identifier'] = 'DROP TABLE';            $prefix  = explode('DROP TABLE ', $query);            $str = strstr($prefix[1], 'IF EXISTS');            if ($str == false ) {                $str = $prefix[1];            }            $result['tablename'] = self::getTableName($str);        }        // Parse CREATE INDEX statement        if (! isset($result['identifier'])            && (substr($query, 0, 12) == 'CREATE INDEX'            || substr($query, 0, 19) == 'CREATE UNIQUE INDEX'            || substr($query, 0, 20) == 'CREATE SPATIAL INDEX')        ) {             $result['identifier'] = 'CREATE INDEX';             $prefix = explode('ON ', $query);             $suffix = explode('(', $prefix[1]);             $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse DROP INDEX statement        if (! isset($result['identifier']) && substr($query, 0, 10) == 'DROP INDEX') {             $result['identifier'] = 'DROP INDEX';             $prefix = explode('ON ', $query);             $result['tablename'] = self::getTableName($prefix[1]);        }        // Parse RENAME TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 13) == 'RENAME TABLE ') {            $result['identifier'] = 'RENAME TABLE';            $prefix = explode('RENAME TABLE ', $query);            $names  = explode(' TO ', $prefix[1]);            $result['tablename']      = self::getTableName($names[0]);            $result["tablename_after_rename"]  = self::getTableName($names[1]);        }        /*         * DML statements         */        if (! isset($result['identifier'])) {            $result["type"]       = 'DML';        }        // Parse UPDATE statement        if (! isset($result['identifier']) && substr($query, 0, 6) == 'UPDATE') {            $result['identifier'] = 'UPDATE';            $prefix  = explode('UPDATE ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse INSERT INTO statement        if (! isset($result['identifier']) && substr($query, 0, 11) == 'INSERT INTO') {            $result['identifier'] = 'INSERT';            $prefix  = explode('INSERT INTO', $query);            $suffix  = explode('(', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse DELETE statement        if (! isset($result['identifier']) && substr($query, 0, 6) == 'DELETE') {            $result['identifier'] = 'DELETE';            $prefix  = explode('FROM ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse TRUNCATE statement        if (! isset($result['identifier']) && substr($query, 0, 8) == 'TRUNCATE') {            $result['identifier'] = 'TRUNCATE';            $prefix  = explode('TRUNCATE', $query);            $result['tablename'] = self::getTableName($prefix[1]);        }        return $result;    }    /**     * Analyzes a given SQL statement and saves tracking data.     *     * @param string $query a SQL query     *     * @static     *     * @return nothing     */    static public function handleQuery($query)    {        // If query is marked as untouchable, leave        if (strstr($query, "/*NOTRACK*/")) {            return;        }        if (! (substr($query, -1) == ';')) {            $query = $query . ";\n";        }        // Get some information about query        $result = self::parseQuery($query);        // Get database name        $dbname = trim($GLOBALS['db'], '`');        // $dbname can be empty, for example when coming from Synchronize        // and this is a query for the remote server        if (empty($dbname)) {            return;        }        // If we found a valid statement        if (isset($result['identifier'])) {            $version = self::getVersion($dbname, $result['tablename'], $result['identifier']);            // If version not exists and auto-creation is enabled            if (self::$version_auto_create == true                && self::isTracked($dbname, $result['tablename']) == false                && $version == -1            ) {                // Create the version                switch ($result['identifier']) {                case 'CREATE TABLE':                    self::createVersion($dbname, $result['tablename'], '1');                    break;                case 'CREATE VIEW':                    self::createVersion($dbname, $result['tablename'], '1', '', true);                    break;                case 'CREATE DATABASE':                    self::createDatabaseVersion($dbname, '1', $query);                    break;                } // end switch            }            // If version exists            if (self::isTracked($dbname, $result['tablename']) && $version != -1) {                if ($result['type'] == 'DDL') {                    $save_to = 'schema_sql';                } elseif ($result['type'] == 'DML') {                    $save_to = 'data_sql';                } else {                    $save_to = '';                }                $date  = date('Y-m-d H:i:s');                // Cut off `dbname`. from query                $query = preg_replace('/`' . $dbname . '`\s?\./', '', $query);                // Add log information                $query = self::getLogComment() . $query ;                // Mark it as untouchable                $sql_query = " /*NOTRACK*/\n" .                " UPDATE " . self::$pma_table .                " SET " . PMA_backquote($save_to) ." = CONCAT( " . PMA_backquote($save_to) . ",'\n"                . PMA_sqlAddSlashes($query) . "') ," . " `date_updated` = '" . $date . "' ";                // If table was renamed we have to change the tablename attribute in pma_tracking too                if ($result['identifier'] == 'RENAME TABLE') {                    $sql_query .= ', `table_name` = \'' . PMA_sqlAddSlashes($result['tablename_after_rename']) . '\' ';                }                // Save the tracking information only for                //     1. the database                //     2. the table / view                //     3. the statements                // we want to track                $sql_query .=                " WHERE FIND_IN_SET('" . $result['identifier'] . "',tracking) > 0" .                " AND `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .                " AND `table_name` = '" . PMA_sqlAddSlashes($result['tablename']) . "' " .                " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";                $result = PMA_query_as_controluser($sql_query);            }        }    }    /**     * Transforms tracking set for Drizzle, which has no SET type     *     * Converts int<>string for Drizzle, does nothing for MySQL     *     * @param int|string $tracking_set     * @return int|string     */    static private function transformTrackingSet($tracking_set)    {        if (!PMA_DRIZZLE) {            return $tracking_set;        }        // init conversion array (key 3 doesn't exist in calculated array)        if (isset(self::$tracking_set_flags[3])) {            // initialize flags            $set = self::$tracking_set_flags;            $array = array();            for ($i = 0; $i < count($set); $i++) {                $flag = 1 << $i;                $array[$flag] = $set[$i];                $array[$set[$i]] = $flag;            }            self::$tracking_set_flags = $array;        }        if (is_numeric($tracking_set)) {            // int > string conversion            $aflags = array();            // count/2 - conversion table has both int > string and string > int values            for ($i = 0; $i < count(self::$tracking_set_flags)/2; $i++) {                $flag = 1 << $i;                if ($tracking_set & $flag) {                    $aflags[] = self::$tracking_set_flags[$flag];                }            }            $flags = implode(',', $aflags);        } else {            // string > int conversion            $flags = 0;            foreach (explode(',', $tracking_set) as $strflag) {                if ($strflag == '') {                    continue;                }                $flags |= self::$tracking_set_flags[$strflag];            }        }        return $flags;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__dateformat_info(){    return array(        'info' => __('Displays a TIME, TIMESTAMP, DATETIME or numeric unix timestamp column as formatted date. The first option is the offset (in hours) which will be added to the timestamp (Default: 0). Use second option to specify a different date/time format string. Third option determines whether you want to see local date or UTC one (use "local" or "utc" strings) for that. According to that, date format has different value - for "local" see the documentation for PHP\'s strftime() function and for "utc" it is done using gmdate() function.'),        );}/** * */function PMA_transformation_text_plain__dateformat($buffer, $options = array(), $meta = ''){    // possibly use a global transform and feed it with special options:    // include './libraries/transformations/global.inc.php';    // further operations on $buffer using the $options[] array.    if (empty($options[0])) {        $options[0] = 0;    }    if (empty($options[2])) {        $options[2] = 'local';    } else {        $options[2] = strtolower($options[2]);    }    if (empty($options[1])) {        if ($options[2] == 'local') {            $options[1] = __('%B %d, %Y at %I:%M %p');        } else {            $options[1] = 'Y-m-d  H:i:s';        }    }    $timestamp = -1;    // INT columns will be treated as UNIX timestamps    // and need to be detected before the verification for    // MySQL TIMESTAMP    if ($meta->type == 'int') {        $timestamp = $buffer;    // Detect TIMESTAMP(6 | 8 | 10 | 12 | 14)    // TIMESTAMP (2 | 4) not supported here.    // (Note: prior to MySQL 4.1, TIMESTAMP has a display size, for example    // TIMESTAMP(8) means YYYYMMDD)    } else if (preg_match('/^(\d{2}){3,7}$/', $buffer)) {        if (strlen($buffer) == 14 || strlen($buffer) == 8) {            $offset = 4;        } else {            $offset = 2;        }        $d = array();        $d['year']   = substr($buffer, 0, $offset);        $d['month']  = substr($buffer, $offset, 2);        $d['day']    = substr($buffer, $offset + 2, 2);        $d['hour']   = substr($buffer, $offset + 4, 2);        $d['minute'] = substr($buffer, $offset + 6, 2);        $d['second'] = substr($buffer, $offset + 8, 2);        if (checkdate($d['month'], $d['day'], $d['year'])) {            $timestamp = mktime($d['hour'], $d['minute'], $d['second'], $d['month'], $d['day'], $d['year']);        }    // If all fails, assume one of the dozens of valid strtime() syntaxes (http://www.gnu.org/manual/tar-1.12/html_chapter/tar_7.html)    } else {        if (preg_match('/^[0-9]\d{1,9}$/', $buffer)) {            $timestamp = (int)$buffer;        } else {            $timestamp = strtotime($buffer);        }    }    // If all above failed, maybe it's a Unix timestamp already?    if ($timestamp < 0 && preg_match('/^[1-9]\d{1,9}$/', $buffer)) {        $timestamp = $buffer;    }    // Reformat a valid timestamp    if ($timestamp >= 0) {        $timestamp -= $options[0] * 60 * 60;        $source = $buffer;        if ($options[2] == 'local') {            $text = PMA_localisedDate($timestamp, $options[1]);        } elseif ($options[2] == 'utc') {            $text = gmdate($options[1], $timestamp);        } else {            $text = 'INVALID DATE TYPE';        }        $buffer = '<dfn onclick="alert(\'' . $source . '\');" title="' . $source . '">' . $text . '</dfn>';    }    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Export to Texy! text. * * @package PhpMyAdmin-Export * @subpackage Texy */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['texytext'] = array(        'text' => __('Texy! text'),        'extension' => 'txt',        'mime_type' => 'text/plain',        'options' => array(        /* what to dump (structure/data/both) */        array('type' => 'begin_group', 'text' => __('Dump table'), 'name' => 'general_opts'),        array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data'))),        array('type' => 'end_group'),        array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure'),        array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL by')),        array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),        array('type' => 'end_group'),        ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return PMA_exportOutputHandler('===' . __('Database') . ' ' . $db . "\n\n");    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in Texy format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $what;        if (! PMA_exportOutputHandler('== ' . __('Dumping data for table') . ' ' . $table . "\n\n")) {            return false;        }        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        // If required, get fields name at the first line        if (isset($GLOBALS[$what . '_columns'])) {            $text_output = "|------\n";            for ($i = 0; $i < $fields_cnt; $i++) {                $text_output .= '|' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i)));            } // end for            $text_output .= "\n|------\n";            if (! PMA_exportOutputHandler($text_output)) {                return false;            }        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $text_output = '';            for ($j = 0; $j < $fields_cnt; $j++) {                if (! isset($row[$j]) || is_null($row[$j])) {                    $value = $GLOBALS[$what . '_null'];                } elseif ($row[$j] == '0' || $row[$j] != '') {                    $value = $row[$j];                } else {                    $value = ' ';                }                $text_output .= '|' . htmlspecialchars($value);            } // end for            $text_output .= "\n";            if (! PMA_exportOutputHandler($text_output)) {                return false;            }        } // end while        PMA_DBI_free_result($result);        return true;    }    /**     * Outputs table's structure     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         the end of line sequence     * @param string  $error_url    the url to go back in case of error     * @param bool    $do_relation  whether to include relation comments     * @param bool    $do_comments  whether to include the pmadb-style column comments     *                                as comments in the structure; this is deprecated     *                                but the parameter is left here because export.php     *                                calls PMA_exportStructure() also for other export     *                                types which use this parameter     * @param bool    $do_mime      whether to include mime comments     * @param bool    $dates        whether to include creation/update/check dates     * @param string  $export_mode  'create_table', 'triggers', 'create_view', 'stand_in'     * @param string  $export_type  'server', 'database', 'table'     * @return  bool      Whether it succeeded     *     * @access  public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        if (! PMA_exportOutputHandler('== ' . __('Table structure for table') . ' ' .$table . "\n\n")) {            return false;        }        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $columns_cnt = 4;        if ($do_relation && $have_rel) {            $columns_cnt++;        }        if ($do_comments && $cfgRelation['commwork']) {            $columns_cnt++;        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;        }        $text_output = "|------\n";        $text_output .= '|' . __('Column');        $text_output .= '|' . __('Type');        $text_output .= '|' . __('Null');        $text_output .= '|' . __('Default');        if ($do_relation && $have_rel) {            $text_output .= '|' . __('Links to');        }        if ($do_comments) {            $text_output .= '|' . __('Comments');            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $text_output .= '|' . htmlspecialchars('MIME');            $mime_map = PMA_getMIME($db, $table, true);        }        $text_output .= "\n|------\n";        if (! PMA_exportOutputHandler($text_output)) {            return false;        }        $columns = PMA_DBI_get_columns($db, $table);        foreach ($columns as $column) {            $text_output = '';            $extracted_fieldspec = PMA_extractFieldSpec($column['Type']);            $type = $extracted_fieldspec['print_type'];            if (empty($type)) {                $type     = '&nbsp;';            }            if (! isset($column['Default'])) {                if ($column['Null'] != 'NO') {                    $column['Default'] = 'NULL';                }            }            $fmt_pre = '';            $fmt_post = '';            if (in_array($column['Field'], $unique_keys)) {                $fmt_pre = '**' . $fmt_pre;                $fmt_post = $fmt_post . '**';            }            if ($column['Key']=='PRI') {                $fmt_pre = '//' . $fmt_pre;                $fmt_post = $fmt_post . '//';            }            $text_output .= '|' . $fmt_pre . htmlspecialchars($column['Field']) . $fmt_post;            $text_output .= '|' . htmlspecialchars($type);            $text_output .= '|' . (($column['Null'] == '' || $column['Null'] == 'NO') ? __('No') : __('Yes'));            $text_output .= '|' . htmlspecialchars(isset($column['Default']) ? $column['Default'] : '');            $field_name = $column['Field'];            if ($do_relation && $have_rel) {                $text_output .= '|' . (isset($res_rel[$field_name]) ? htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' (' . $res_rel[$field_name]['foreign_field'] . ')') : '');            }            if ($do_comments && $cfgRelation['commwork']) {                $text_output .= '|' . (isset($comments[$field_name]) ? htmlspecialchars($comments[$field_name]) : '');            }            if ($do_mime && $cfgRelation['mimework']) {                $text_output .= '|' . (isset($mime_map[$field_name]) ? htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype'])) : '');            }            $text_output .= "\n";            if (! PMA_exportOutputHandler($text_output)) {                return false;            }        } // end while        return true;    }}?>
<?php// TCPDF FONT FILE DESCRIPTION$type='core';$name='Helvetica';$up=-100;$ut=50;$dw=513;$diff='';$enc='';$desc=array('Flags'=>32,'FontBBox'=>'[-166 -225 1000 931]','ItalicAngle'=>0,'Ascent'=>931,'Descent'=>-225,'Leading'=>0,'CapHeight'=>718,'XHeight'=>523,'StemV'=>88,'StemH'=>76,'AvgWidth'=>513,'MaxWidth'=>1015,'MissingWidth'=>513);$cw=array(0=>500,1=>500,2=>500,3=>500,4=>500,5=>500,6=>500,7=>500,8=>500,9=>500,10=>500,11=>500,12=>500,13=>500,14=>500,15=>500,16=>500,17=>500,18=>500,19=>500,20=>500,21=>500,22=>500,23=>500,24=>500,25=>500,26=>500,27=>500,28=>500,29=>500,30=>500,31=>500,32=>278,33=>278,34=>355,35=>556,36=>556,37=>889,38=>667,39=>191,40=>333,41=>333,42=>389,43=>584,44=>278,45=>333,46=>278,47=>278,48=>556,49=>556,50=>556,51=>556,52=>556,53=>556,54=>556,55=>556,56=>556,57=>556,58=>278,59=>278,60=>584,61=>584,62=>584,63=>556,64=>1015,65=>667,66=>667,67=>722,68=>722,69=>667,70=>611,71=>778,72=>722,73=>278,74=>500,75=>667,76=>556,77=>833,78=>722,79=>778,80=>667,81=>778,82=>722,83=>667,84=>611,85=>722,86=>667,87=>944,88=>667,89=>667,90=>611,91=>278,92=>278,93=>277,94=>469,95=>556,96=>333,97=>556,98=>556,99=>500,100=>556,101=>556,102=>278,103=>556,104=>556,105=>222,106=>222,107=>500,108=>222,109=>833,110=>556,111=>556,112=>556,113=>556,114=>333,115=>500,116=>278,117=>556,118=>500,119=>722,120=>500,121=>500,122=>500,123=>334,124=>260,125=>334,126=>584,127=>500,128=>655,129=>500,130=>222,131=>278,132=>333,133=>1000,134=>556,135=>556,136=>333,137=>1000,138=>667,139=>250,140=>1000,141=>500,142=>611,143=>500,144=>500,145=>222,146=>221,147=>333,148=>333,149=>350,150=>556,151=>1000,152=>333,153=>1000,154=>500,155=>250,156=>938,157=>500,158=>500,159=>667,160=>278,161=>278,162=>556,163=>556,164=>556,165=>556,166=>260,167=>556,168=>333,169=>737,170=>370,171=>448,172=>584,173=>333,174=>737,175=>333,176=>606,177=>584,178=>350,179=>350,180=>333,181=>556,182=>537,183=>278,184=>333,185=>350,186=>365,187=>448,188=>869,189=>869,190=>879,191=>556,192=>667,193=>667,194=>667,195=>667,196=>667,197=>667,198=>1000,199=>722,200=>667,201=>667,202=>667,203=>667,204=>278,205=>278,206=>278,207=>278,208=>722,209=>722,210=>778,211=>778,212=>778,213=>778,214=>778,215=>584,216=>778,217=>722,218=>722,219=>722,220=>722,221=>667,222=>666,223=>611,224=>556,225=>556,226=>556,227=>556,228=>556,229=>556,230=>896,231=>500,232=>556,233=>556,234=>556,235=>556,236=>251,237=>251,238=>251,239=>251,240=>556,241=>556,242=>556,243=>556,244=>556,245=>556,246=>556,247=>584,248=>611,249=>556,250=>556,251=>556,252=>556,253=>500,254=>555,255=>500);// --- EOF ---
<?php/** * Handles the visualization of GIS MULTIPOINT objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Multipoint extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'MULTIPOINT(' and trailing ')'        $multipoint = substr($spatial, 11, (strlen($spatial) - 12));        return $this->setMinMax($multipoint, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial     GIS MULTIPOINT object     * @param string $label       Label for the GIS MULTIPOINT object     * @param string $point_color Color for the GIS MULTIPOINT object     * @param array  $scale_data  Array containing data related to scaling     * @param image  $image       Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $point_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($point_color, 1, 2));        $green = hexdec(substr($point_color, 3, 2));        $blue  = hexdec(substr($point_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'MULTIPOINT(' and trailing ')'        $multipoint = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($multipoint, $scale_data);        foreach ($points_arr as $point) {            // draw a small circle to mark the point            if ($point[0] != '' && $point[1] != '') {                imagearc($image, $point[0], $point[1], 7, 7, 0, 360, $color);            }        }        // print label for each point        if ((isset($label) && trim($label) != '')            && ($points_arr[0][0] != '' && $points_arr[0][1] != '')        ) {            imagestring($image, 1, $points_arr[0][0], $points_arr[0][1], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial     GIS MULTIPOINT object     * @param string $label       Label for the GIS MULTIPOINT object     * @param string $point_color Color for the GIS MULTIPOINT object     * @param array  $scale_data  Array containing data related to scaling     * @param image  $pdf         TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $point_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($point_color, 1, 2));        $green = hexdec(substr($point_color, 3, 2));        $blue  = hexdec(substr($point_color, 4, 2));        $line  = array('width' => 1.25, 'color' => array($red, $green, $blue));        // Trim to remove leading 'MULTIPOINT(' and trailing ')'        $multipoint = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($multipoint, $scale_data);        foreach ($points_arr as $point) {            // draw a small circle to mark the point            if ($point[0] != '' && $point[1] != '') {                $pdf->Circle($point[0], $point[1], 2, 0, 360, 'D', $line);            }        }        // print label for each point        if ((isset($label) && trim($label) != '')            && ($points_arr[0][0] != '' && $points_arr[0][1] != '')        ) {            $pdf->SetXY($points_arr[0][0], $points_arr[0][1]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial     GIS MULTIPOINT object     * @param string $label       Label for the GIS MULTIPOINT object     * @param string $point_color Color for the GIS MULTIPOINT object     * @param array  $scale_data  Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $point_color, $scale_data)    {        $point_options = array(            'name'        => $label,            'class'       => 'multipoint vector',            'fill'        => 'white',            'stroke'      => $point_color,            'stroke-width'=> 2,        );        // Trim to remove leading 'MULTIPOINT(' and trailing ')'        $multipoint = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($multipoint, $scale_data);        $row = '';        foreach ($points_arr as $point) {            if ($point[0] != '' && $point[1] != '') {                $row .= '<circle cx="' . $point[0] . '" cy="' . $point[1] . '" r="3"';                $point_options['id'] = $label . rand();                foreach ($point_options as $option => $val) {                    $row .= ' ' . $option . '="' . trim($val) . '"';                }                $row .= '/>';            }        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial     GIS MULTIPOINT object     * @param int    $srid        Spatial reference ID     * @param string $label       Label for the GIS MULTIPOINT object     * @param string $point_color Color for the GIS MULTIPOINT object     * @param array  $scale_data  Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $point_color, $scale_data)    {        $style_options = array(            'pointRadius'  => 3,            'fillColor'    => '#ffffff',            'strokeColor'  => $point_color,            'strokeWidth'  => 2,            'label'        => $label,            'labelYOffset' => -8,            'fontSize'     => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $result = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'MULTIPOINT(' and trailing ')'        $multipoint = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($multipoint, null);        $row = 'new Array(';        foreach ($points_arr as $point) {            if ($point[0] != '' && $point[1] != '') {                $row .= '(new OpenLayers.Geometry.Point(' . $point[0] . ', ' . $point[1]                    . ')).transform(new OpenLayers.Projection("EPSG:' . $srid                    . '"), map.getProjectionObject()), ';            }        }        if (substr($row, strlen($row) - 2) == ', ') {            $row = substr($row, 0, strlen($row) - 2);        }        $row .= ')';        $result .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector('            . 'new OpenLayers.Geometry.MultiPoint(' . $row . '), null, '            . json_encode($style_options) . '));';        return $result;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Multipoint does not adhere to this     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_points = isset($gis_data[$index]['MULTIPOINT']['no_of_points'])            ? $gis_data[$index]['MULTIPOINT']['no_of_points'] : 1;        if ($no_of_points < 1) {            $no_of_points = 1;        }        $wkt = 'MULTIPOINT(';        for ($i = 0; $i < $no_of_points; $i++) {            $wkt .= ((isset($gis_data[$index]['MULTIPOINT'][$i]['x'])                && trim($gis_data[$index]['MULTIPOINT'][$i]['x']) != '')                ? $gis_data[$index]['MULTIPOINT'][$i]['x'] : '')                . ' ' . ((isset($gis_data[$index]['MULTIPOINT'][$i]['y'])                && trim($gis_data[$index]['MULTIPOINT'][$i]['y']) != '')                ? $gis_data[$index]['MULTIPOINT'][$i]['y'] : '') . ',';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate the WKT for the data from ESRI shape files.     *     * @param array $row_data GIS data     *     * @return the WKT for the data from ESRI shape files     */    public function getShape($row_data)    {        $wkt = 'MULTIPOINT(';        for ($i = 0; $i < $row_data['numpoints']; $i++) {            $wkt .= $row_data['points'][$i]['x'] . ' ' . $row_data['points'][$i]['y'] . ',';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'MULTIPOINT';            $wkt = $value;        }        // Trim to remove leading 'MULTIPOINT(' and trailing ')'        $points = substr($wkt, 11, (strlen($wkt) - 12));        $points_arr = $this->extractPoints($points, null);        $no_of_points = count($points_arr);        $params[$index]['MULTIPOINT']['no_of_points'] = $no_of_points;        for ($i = 0; $i < $no_of_points; $i++) {            $params[$index]['MULTIPOINT'][$i]['x'] = $points_arr[$i][0];            $params[$index]['MULTIPOINT'][$i]['y'] = $points_arr[$i][1];        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__formatted_info(){    return array(        'info' => __('Displays the contents of the column as-is, without running it through htmlspecialchars(). That is, the column is assumed to contain valid HTML.'),        );}/** * */function PMA_transformation_text_plain__formatted($buffer, $options = array(), $meta = ''){    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used with the relation and pdf feature * * @package PhpMyAdmin *//** * returns array of options from string with options separated by comma, removes quotes * * <code> * PMA_transformation_getOptions("'option ,, quoted',abd,'2,3',"); * // array { * //     'option ,, quoted', * //     'abc', * //     '2,3', * //     '', * // } * </code> * * @param string $option_string comma separated options * * @return array options */function PMA_transformation_getOptions($option_string){    $result = array();    if (! strlen($option_string)        || ! $transform_options = preg_split('/,/', $option_string)    ) {        return $result;    }    while (($option = array_shift($transform_options)) !== null) {        $trimmed = trim($option);        if (strlen($trimmed) > 1            && $trimmed[0] == "'"            && $trimmed[strlen($trimmed) - 1] == "'"        ) {            // '...'            $option = substr($trimmed, 1, -1);        } elseif (isset($trimmed[0]) && $trimmed[0] == "'") {            // '...,            $trimmed = ltrim($option);            while (($option = array_shift($transform_options)) !== null) {                // ...,                $trimmed .= ',' . $option;                $rtrimmed = rtrim($trimmed);                if ($rtrimmed[strlen($rtrimmed) - 1] == "'") {                    // ,...'                    break;                }            }            $option = substr($rtrimmed, 1, -1);        }        $result[] = stripslashes($option);    }    return $result;}/** * Gets all available MIME-types * * @access  public * @staticvar   array   mimetypes * @return  array    array[mimetype], array[transformation] */function PMA_getAvailableMIMEtypes(){    static $stack = null;    if (null !== $stack) {        return $stack;    }    $stack = array();    $filestack = array();    $handle = opendir('./libraries/transformations');    if (! $handle) {        return $stack;    }    while ($file = readdir($handle)) {        $filestack[] = $file;    }    closedir($handle);    sort($filestack);    foreach ($filestack as $file) {        if (preg_match('|^.*__.*\.inc\.php$|', $file)) {            // File contains transformation functions.            $base = explode('__', str_replace('.inc.php', '', $file));            $mimetype = str_replace('_', '/', $base[0]);            $stack['mimetype'][$mimetype] = $mimetype;            $stack['transformation'][] = $mimetype . ': ' . $base[1];            $stack['transformation_file'][] = $file;        } elseif (preg_match('|^.*\.inc\.php$|', $file)) {            // File is a plain mimetype, no functions.            $base = str_replace('.inc.php', '', $file);            if ($base != 'global') {                $mimetype = str_replace('_', '/', $base);                $stack['mimetype'][$mimetype] = $mimetype;                $stack['empty_mimetype'][$mimetype] = $mimetype;            }        }    }    return $stack;}/** * Returns the description of the transformation * * @param string $file           transformation file * @param string $html_formatted whether the description should be formatted as HTML * * @return the description of the transformation */function PMA_getTransformationDescription($file, $html_formatted = true){    include_once './libraries/transformations/' . $file;    $func = strtolower(str_replace('.inc.php', '', $file));    $funcname = 'PMA_transformation_' . $func . '_info';    $desc = sprintf(__('No description is available for this transformation.<br />Please ask the author what %s does.'), 'PMA_transformation_' . $func . '()');    if ($html_formatted) {        $desc = '<i>' . $desc . '</i>';    } else {        $desc = str_replace('<br />', ' ', $desc);    }    if (function_exists($funcname)) {        $desc_arr = $funcname();        if (isset($desc_arr['info'])) {            $desc = $desc_arr['info'];        }    }    return $desc;}/** * Gets the mimetypes for all columns of a table * * @param string $db     the name of the db to check for * @param string $table  the name of the table to check for * @param string $strict whether to include only results having a mimetype set * * @access  public * * @return array [field_name][field_key] = field_value */function PMA_getMIME($db, $table, $strict = false){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['commwork']) {        return false;    }    $com_qry  = '         SELECT `column_name`,                `mimetype`,                `transformation`,                `transformation_options`         FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '         WHERE `db_name`    = \'' . PMA_sqlAddSlashes($db) . '\'           AND `table_name` = \'' . PMA_sqlAddSlashes($table) . '\'           AND ( `mimetype` != \'\'' . (!$strict ? '              OR `transformation` != \'\'              OR `transformation_options` != \'\'' : '') . ')';    return PMA_DBI_fetch_result($com_qry, 'column_name', null, $GLOBALS['controllink']);} // end of the 'PMA_getMIME()' function/** * Set a single mimetype to a certain value. * * @param string $db                     the name of the db * @param string $table                  the name of the table * @param string $key                    the name of the column * @param string $mimetype               the mimetype of the column * @param string $transformation         the transformation of the column * @param string $transformation_options the transformation options of the column * @param string $forcedelete            force delete, will erase any existing *                                       comments for this column * * @access  public * * @return  boolean  true, if comment-query was made. */function PMA_setMIME($db, $table, $key, $mimetype, $transformation,    $transformation_options, $forcedelete = false){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['commwork']) {        return false;    }    $test_qry  = '         SELECT `mimetype`,                `comment`           FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '          WHERE `db_name`     = \'' . PMA_sqlAddSlashes($db) . '\'            AND `table_name`  = \'' . PMA_sqlAddSlashes($table) . '\'            AND `column_name` = \'' . PMA_sqlAddSlashes($key) . '\'';    $test_rs   = PMA_query_as_controluser($test_qry, true, PMA_DBI_QUERY_STORE);    if ($test_rs && PMA_DBI_num_rows($test_rs) > 0) {        $row = @PMA_DBI_fetch_assoc($test_rs);        PMA_DBI_free_result($test_rs);        if (! $forcedelete            && (strlen($mimetype) || strlen($transformation)            || strlen($transformation_options) || strlen($row['comment']))        ) {            $upd_query = '                UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '                   SET `mimetype`               = \'' . PMA_sqlAddSlashes($mimetype) . '\',                       `transformation`         = \'' . PMA_sqlAddSlashes($transformation) . '\',                       `transformation_options` = \'' . PMA_sqlAddSlashes($transformation_options) . '\'';        } else {            $upd_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']);        }        $upd_query .= '            WHERE `db_name`     = \'' . PMA_sqlAddSlashes($db) . '\'              AND `table_name`  = \'' . PMA_sqlAddSlashes($table) . '\'              AND `column_name` = \'' . PMA_sqlAddSlashes($key) . '\'';    } elseif (strlen($mimetype) || strlen($transformation)     || strlen($transformation_options)) {        $upd_query = 'INSERT INTO ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                   . ' (db_name, table_name, column_name, mimetype, transformation, transformation_options) '                   . ' VALUES('                   . '\'' . PMA_sqlAddSlashes($db) . '\','                   . '\'' . PMA_sqlAddSlashes($table) . '\','                   . '\'' . PMA_sqlAddSlashes($key) . '\','                   . '\'' . PMA_sqlAddSlashes($mimetype) . '\','                   . '\'' . PMA_sqlAddSlashes($transformation) . '\','                   . '\'' . PMA_sqlAddSlashes($transformation_options) . '\')';    }    if (isset($upd_query)) {        return PMA_query_as_controluser($upd_query);    } else {        return false;    }} // end of 'PMA_setMIME()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$cfgRelation = PMA_getRelationsParam();if (! $cfgRelation['designerwork']) {    PMD_err_sav();}foreach ($t_x as $key => $value) {    $KEY = empty($IS_AJAX) ? urldecode($key) : $key; // table name decode (post PDF exp/imp)    list($DB,$TAB) = explode(".", $KEY);    PMA_query_as_controluser('DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']) . '                      WHERE `db_name` = \'' . PMA_sqlAddSlashes($DB) . '\'                        AND `table_name` = \'' . PMA_sqlAddSlashes($TAB) . '\'', true, PMA_DBI_QUERY_STORE);    PMA_query_as_controluser('INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']) . '                         (db_name, table_name, x, y, v, h)                  VALUES ('                  . '\'' . PMA_sqlAddSlashes($DB) . '\', '                  . '\'' . PMA_sqlAddSlashes($TAB) . '\', '                  . '\'' . PMA_sqlAddSlashes($t_x[$key]) . '\', '                  . '\'' . PMA_sqlAddSlashes($t_y[$key]) . '\', '                  . '\'' . PMA_sqlAddSlashes($t_v[$key]) . '\', '                  . '\'' . PMA_sqlAddSlashes($t_h[$key]) . '\''                  . ')', true, PMA_DBI_QUERY_STORE);}//----------------------------------------------------------------------------function PMD_err_sav(){    global $die_save_pos; // if this file included    if (! empty($die_save_pos)) {        header("Content-Type: text/xml; charset=utf-8");        header("Cache-Control: no-cache");        die('<root act="save_pos" return="' . __('Error saving coordinates for Designer.') . '"></root>');    }}if (! empty($die_save_pos)) {  header("Content-Type: text/xml; charset=utf-8");  header("Cache-Control: no-cache");?><root act='save_pos' return='<?php echo __('Modifications have been saved'); ?>'></root><?php}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface for the zip extension * @package    phpMyAdmin *//** * Gets zip file contents * * @param string $file           zip file * @param string $specific_entry regular expression to match a file * * @return array ($error_message, $file_data); $error_message *                  is empty if no error */function PMA_getZipContents($file, $specific_entry = null){    $error_message = '';    $file_data = '';    $zip_handle = zip_open($file);    if (is_resource($zip_handle)) {        $first_zip_entry = zip_read($zip_handle);        if (false === $first_zip_entry) {            $error_message = __('No files found inside ZIP archive!');        } else {            /* Is the the zip really an ODS file? */            $read = zip_entry_read($first_zip_entry);            $ods_mime = 'application/vnd.oasis.opendocument.spreadsheet';            if (!strcmp($ods_mime, $read)) {                $specific_entry = '/^content\.xml$/';            }            if (isset($specific_entry)) {                /* Return the correct contents, not just the first entry */                for ( ; ; ) {                    $entry = zip_read($zip_handle);                    if (is_resource($entry)) {                        if (preg_match($specific_entry, zip_entry_name($entry))) {                            zip_entry_open($zip_handle, $entry, 'r');                            $file_data = zip_entry_read($entry, zip_entry_filesize($entry));                            zip_entry_close($entry);                            break;                        }                    } else {                        /**                         * Either we have reached the end of the zip and still                         * haven't found $specific_entry or there was a parsing                         * error that we must display                         */                        if ($entry === false) {                            $error_message = __('Error in ZIP archive:') . ' Could not find "' . $specific_entry . '"';                        } else {                            $error_message = __('Error in ZIP archive:') . ' ' . PMA_getZipError($zip_handle);                        }                        break;                    }                }            } else {                zip_entry_open($zip_handle, $first_zip_entry, 'r');                /* File pointer has already been moved, so include what was read above */                $file_data = $read;                $file_data .= zip_entry_read($first_zip_entry, zip_entry_filesize($first_zip_entry));                zip_entry_close($first_zip_entry);            }        }    } else {        $error_message = __('Error in ZIP archive:') . ' ' . PMA_getZipError($zip_handle);    }    zip_close($zip_handle);    return (array('error' => $error_message, 'data' => $file_data));}/** * Returns the file name of the first file that matches the given $file_regexp. * * @param string $file_regexp regular expression for the file name to match * @param string $file        zip archive * * @return string the file name of the first file that matches the given regexp */function PMA_findFileFromZipArchive ($file_regexp, $file){    $zip_handle = zip_open($file);    $found = false;    if (is_resource($zip_handle)) {        $entry = zip_read($zip_handle);        while (is_resource($entry)) {            if (preg_match($file_regexp, zip_entry_name($entry))) {                $file_name = zip_entry_name($entry);                zip_close($zip_handle);                return $file_name;            }            $entry = zip_read($zip_handle);        }    }    zip_close($zip_handle);    return false;}/** * Returns the number of files in the zip archive. * * @param string $file zip archive * * @return int the number of files in the zip archive */function PMA_getNoOfFilesInZip($file){    $count = 0;    $zip_handle = zip_open($file);    $found = false;    if (is_resource($zip_handle)) {        $entry = zip_read($zip_handle);        while (is_resource($entry)) {            $count++;            $entry = zip_read($zip_handle);        }    }    zip_close($zip_handle);    return $count;}/** * Extracts a set of files from the given zip archive to a given destinations. * * @param string $zip_path    path to the zip archive * @param string $destination destination to extract files * @param array  $entries     files in archive that should be extracted * * @return bool true on sucess, false otherwise */function PMA_zipExtract($zip_path, $destination, $entries){    $zip = new ZipArchive;    if ($zip->open($zip_path) === true) {        $zip->extractTo($destination, $entries);        $zip->close();        return true;    }    return false;}/**  * Gets zip error message  *  * @param integer $code error code  *  * @return string error message */function PMA_getZipError($code){    // I don't think this needs translation    switch ($code) {    case ZIPARCHIVE::ER_MULTIDISK:        $message = 'Multi-disk zip archives not supported';        break;    case ZIPARCHIVE::ER_READ:        $message = 'Read error';        break;    case ZIPARCHIVE::ER_CRC:        $message = 'CRC error';        break;    case ZIPARCHIVE::ER_NOZIP:        $message = 'Not a zip archive';        break;    case ZIPARCHIVE::ER_INCONS:        $message = 'Zip archive inconsistent';        break;    default:        $message = $code;    }    return $message;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */$GLOBALS['information_schema_relations'] = array(    'CHARACTER_SETS' => array(        'DEFAULT_COLLATE_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLLATIONS' => array(        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        )    ),    'COLLATION_CHARACTER_SET_APPLICABILITY' => array(        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        ),        'COLLATION_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLUMNS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        ),        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        ),        'COLLATION_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLUMN_PRIVILEGES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'KEY_COLUMN_USAGE' => array(        'CONSTRAINT_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'ROUTINES' => array(        'ROUTINE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'SCHEMATA' => array(        'DEFAULT_CHARACTER_SET_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        )    ),    'SCHEMA_PRIVILEGES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_COLLATION' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'TABLE_CONSTRAINTS' => array(        'CONSTRAINT_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLE_PRIVILEGES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'VIEWS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ));?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_application_octetstream__hex_info(){    return array(        'info' =>  __('Displays hexadecimal representation of data. Optional first parameter specifies how often space will be added (defaults to 2 nibbles).'),        );}/** * */function PMA_transformation_application_octetstream__hex($buffer, $options = array(), $meta = ''){    // possibly use a global transform and feed it with special options:    // include './libraries/transformations/global.inc.php';    if (!isset($options[0])) {        $options[0] = 2;    } else {        $options[0] = (int)$options[0];    }    if ($options[0] < 1) {        return bin2hex($buffer);    } else {        return chunk_split(bin2hex($buffer), $options[0], ' ');    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form handling code. * * @package PhpMyAdmin *//** * Base class for forms, loads default configuration options, checks allowed * values etc. * * @package    phpMyAdmin */class Form{    /**     * Form name     * @var string     */    public $name;    /**     * Arbitrary index, doesn't affect class' behavior     * @var int     */    public $index;    /**     * Form fields (paths), filled by {@link readFormPaths()}, indexed by field name     * @var array     */    public $fields;    /**     * Stores default values for some fields (eg. pmadb tables)     * @var array     */    public $default;    /**     * Caches field types, indexed by field names     * @var array     */    private $fieldsTypes;    /**     * Constructor, reads default config values     *     * @param string  $form_name     * @param array   $form     * @param int     $index      arbitrary index, stored in Form::$index     */    public function __construct($form_name, array $form, $index = null)    {        $this->index = $index;        $this->loadForm($form_name, $form);    }    /**     * Returns type of given option     *     * @param   string  $option_name path or field name     * @return  string|null  one of: boolean, integer, double, string, select, array     */    public function getOptionType($option_name)    {        $key = ltrim(substr($option_name, strrpos($option_name, '/')), '/');        return isset($this->fieldsTypes[$key])            ? $this->fieldsTypes[$key]            : null;    }    /**     * Returns allowed values for select fields     *     * @param   string  $option_path     * @return  array     */    public function getOptionValueList($option_path)    {        $value = ConfigFile::getInstance()->getDbEntry($option_path);        if ($value === null) {            trigger_error("$option_path - select options not defined", E_USER_ERROR);            return array();        }        if (!is_array($value)) {            trigger_error("$option_path - not a static value list", E_USER_ERROR);            return array();        }        // convert array('#', 'a', 'b') to array('a', 'b')        if (isset($value[0]) && $value[0] === '#') {            // remove first element ('#')            array_shift($value);        } else {            // convert value list array('a', 'b') to array('a' => 'a', 'b' => 'b')            $has_string_keys = false;            $keys = array();            for ($i = 0; $i < count($value); $i++) {                if (!isset($value[$i])) {                    $has_string_keys = true;                    break;                }                $keys[] = is_bool($value[$i]) ? (int)$value[$i] : $value[$i];            }            if (!$has_string_keys) {                $value = array_combine($keys, $value);            }        }        // $value has keys and value names, return it        return $value;    }    /**     * array_walk callback function, reads path of form fields from     * array (see file comment in setup.forms.php or user_preferences.forms.inc)     *     * @param   mixed   $value     * @param   mixed   $key     * @param   mixed   $prefix     */    private function _readFormPathsCallback($value, $key, $prefix)    {        static $group_counter = 0;        if (is_array($value)) {            $prefix .= $key . '/';            array_walk($value, array($this, '_readFormPathsCallback'), $prefix);        } else {            if (!is_int($key)) {                $this->default[$prefix . $key] = $value;                $value = $key;            }            // add unique id to group ends            if ($value == ':group:end') {                $value .= ':' . $group_counter++;            }            $this->fields[] = $prefix . $value;        }    }    /**     * Reads form paths to {@link $fields}     *     * @param array $form     */    protected function readFormPaths($form)    {        // flatten form fields' paths and save them to $fields        $this->fields = array();        array_walk($form, array($this, '_readFormPathsCallback'), '');        // $this->fields is an array of the form: [0..n] => 'field path'        // change numeric indexes to contain field names (last part of the path)        $paths = $this->fields;        $this->fields = array();        foreach ($paths as $path) {            $key = ltrim(substr($path, strrpos($path, '/')), '/');            $this->fields[$key] = $path;        }        // now $this->fields is an array of the form: 'field name' => 'field path'    }    /**     * Reads fields' types to $this->fieldsTypes     *     */    protected function readTypes()    {        $cf = ConfigFile::getInstance();        foreach ($this->fields as $name => $path) {            if (strpos($name, ':group:') === 0) {                $this->fieldsTypes[$name] = 'group';                continue;            }            $v = $cf->getDbEntry($path);            if ($v !== null) {                $type = is_array($v) ? 'select' : $v;            } else {                $type = gettype($cf->getDefault($path));            }            $this->fieldsTypes[$name] = $type;        }    }    /**     * Reads form settings and prepares class to work with given subset of     * config file     *     * @param string $form_name     * @param array  $form     */    public function loadForm($form_name, $form)    {        $this->name = $form_name;        $this->readFormPaths($form);        $this->readTypes();    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library for extracting information about system memory and cpu. Currently supports all * Windows and Linux plattforms * * This code is based on the OS Classes from the phpsysinfo project (http://phpsysinfo.sourceforge.net/) * * @package PhpMyAdmin *//** * @return array */function getSysInfo(){    $supported = array('Linux', 'WINNT');    $sysinfo = array();    if (in_array(PHP_OS, $supported)) {        return eval("return new ".PHP_OS."();");    }    return $sysinfo;}class WINNT{    private $_wmi;    public $os = 'WINNT';    public function __construct() {        // initialize the wmi object        $objLocator = new COM('WbemScripting.SWbemLocator');        $this->_wmi = $objLocator->ConnectServer();    }    function loadavg() {        $loadavg = "";        $sum = 0;        $buffer = $this->_getWMI('Win32_Processor', array('LoadPercentage'));        foreach ($buffer as $load) {            $value = $load['LoadPercentage'];            $loadavg .= $value.' ';            $sum += $value;        }        return array('loadavg' => $sum / count($buffer));    }    private function _getWMI($strClass, $strValue = array()) {        $arrData = array();        $value = "";        $objWEBM = $this->_wmi->Get($strClass);        $arrProp = $objWEBM->Properties_;        $arrWEBMCol = $objWEBM->Instances_();        foreach ($arrWEBMCol as $objItem) {            if (is_array($arrProp)) {                reset($arrProp);            }            $arrInstance = array();            foreach ($arrProp as $propItem) {                if ( empty($strValue)) {                    eval("\$value = \$objItem->".$propItem->Name.";");                    $arrInstance[$propItem->Name] = trim($value);                } else {                    if (in_array($propItem->Name, $strValue)) {                        eval("\$value = \$objItem->".$propItem->Name.";");                        $arrInstance[$propItem->Name] = trim($value);                    }                }            }            $arrData[] = $arrInstance;        }        return $arrData;    }    function memory() {        $buffer = $this->_getWMI("Win32_OperatingSystem", array('TotalVisibleMemorySize', 'FreePhysicalMemory'));        $mem = Array();        $mem['MemTotal'] = $buffer[0]['TotalVisibleMemorySize'];        $mem['MemFree'] = $buffer[0]['FreePhysicalMemory'];        $mem['MemUsed'] = $mem['MemTotal'] - $mem['MemFree'];        $buffer = $this->_getWMI('Win32_PageFileUsage');        $mem['SwapTotal'] = 0;        $mem['SwapUsed'] = 0;        $mem['SwapPeak'] = 0;        foreach ($buffer as $swapdevice) {            $mem['SwapTotal'] += $swapdevice['AllocatedBaseSize'] * 1024;            $mem['SwapUsed'] += $swapdevice['CurrentUsage'] * 1024;            $mem['SwapPeak'] += $swapdevice['PeakUsage'] * 1024;        }        return $mem;    }}class Linux{    public $os = 'Linux';    function loadavg() {        $buf = file_get_contents('/proc/stat');        $nums=preg_split("/\s+/", substr($buf, 0, strpos($buf, "\n")));        return Array('busy' => $nums[1]+$nums[2]+$nums[3], 'idle' => intval($nums[4]));    }    function memory() {        preg_match_all('/^(MemTotal|MemFree|Cached|Buffers|SwapCached|SwapTotal|SwapFree):\s+(.*)\s*kB/im', file_get_contents('/proc/meminfo'), $matches);        $mem = array_combine( $matches[1], $matches[2] );        $mem['MemUsed'] = $mem['MemTotal'] - $mem['MemFree'] - $mem['Cached'] - $mem['Buffers'];        $mem['SwapUsed'] = $mem['SwapTotal'] - $mem['SwapFree'] - $mem['SwapCached'];        foreach ($mem as $idx=>$value)            $mem[$idx] = intval($value);        return $mem;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */// Run common workrequire_once './libraries/common.inc.php';define('TABLE_MAY_BE_ABSENT', true);require './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_tracking.php&amp;back=tbl_tracking.php';$url_params['goto'] = 'tbl_tracking.php';;$url_params['back'] = 'tbl_tracking.php';// Init vars for tracking reportif (isset($_REQUEST['report']) || isset($_REQUEST['report_export'])) {    $data = PMA_Tracker::getTrackedData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version']);    $selection_schema = false;    $selection_data   = false;    $selection_both  = false;    if (! isset($_REQUEST['logtype'])) {        $_REQUEST['logtype'] = 'schema_and_data';    }    if ($_REQUEST['logtype'] == 'schema') {        $selection_schema = true;    } elseif ($_REQUEST['logtype'] == 'data') {        $selection_data   = true;    } else {        $selection_both   = true;    }    if (! isset($_REQUEST['date_from'])) {        $_REQUEST['date_from'] = $data['date_from'];    }    if (! isset($_REQUEST['date_to'])) {        $_REQUEST['date_to'] = $data['date_to'];    }    if (! isset($_REQUEST['users'])) {        $_REQUEST['users'] = '*';    }    $filter_ts_from = strtotime($_REQUEST['date_from']);    $filter_ts_to   = strtotime($_REQUEST['date_to']);    $filter_users   = array_map('trim', explode(',', $_REQUEST['users']));}// Prepare exportif (isset($_REQUEST['report_export'])) {/** * Filters tracking entries * * @param array   the entries to filter * @param string  "from" date * @param string  "to" date * @param string  users * * @return  array   filtered entries * */    function PMA_filter_tracking($data, $filter_ts_from, $filter_ts_to, $filter_users) {        $tmp_entries = array();        $id = 0;        foreach ( $data as $entry ) {            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {                $tmp_entries[] = array( 'id' => $id,                                    'timestamp' => $timestamp,                                    'username'  => $entry['username'],                                    'statement' => $entry['statement']                             );            }            $id++;        }        return($tmp_entries);    }    $entries = array();    // Filtering data definition statements    if ($_REQUEST['logtype'] == 'schema' || $_REQUEST['logtype'] == 'schema_and_data') {        $entries = array_merge($entries, PMA_filter_tracking($data['ddlog'], $filter_ts_from, $filter_ts_to, $filter_users));    }    // Filtering data manipulation statements    if ($_REQUEST['logtype'] == 'data' || $_REQUEST['logtype'] == 'schema_and_data') {        $entries = array_merge($entries, PMA_filter_tracking($data['dmlog'], $filter_ts_from, $filter_ts_to, $filter_users));    }    // Sort it    foreach ($entries as $key => $row) {        $ids[$key]        = $row['id'];        $timestamps[$key] = $row['timestamp'];        $usernames[$key]  = $row['username'];        $statements[$key] = $row['statement'];    }    array_multisort($timestamps, SORT_ASC, $ids, SORT_ASC, $usernames, SORT_ASC, $statements, SORT_ASC, $entries);}// Export as file downloadif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'sqldumpfile') {    @ini_set('url_rewriter.tags', '');    $dump = "# " . sprintf(__('Tracking report for table `%s`'), htmlspecialchars($_REQUEST['table'])) . "\n" .            "# " . date('Y-m-d H:i:s') . "\n";    foreach ($entries as $entry) {        $dump .= $entry['statement'];    }    $filename = 'log_' . htmlspecialchars($_REQUEST['table']) . '.sql';    PMA_download_header($filename, 'text/x-sql', strlen($dump));    echo $dump;    exit();}/** * Gets tables informations *//** * Displays top menu links */require_once './libraries/tbl_links.inc.php';echo '<br />';/** * Actions */// Create tracking versionif (isset($_REQUEST['submit_create_version'])) {    $tracking_set = '';    if ($_REQUEST['alter_table'] == true) {        $tracking_set .= 'ALTER TABLE,';    }    if ($_REQUEST['rename_table'] == true) {        $tracking_set .= 'RENAME TABLE,';    }    if ($_REQUEST['create_table'] == true) {        $tracking_set .= 'CREATE TABLE,';    }    if ($_REQUEST['drop_table'] == true) {        $tracking_set .= 'DROP TABLE,';    }    if ($_REQUEST['create_index'] == true) {        $tracking_set .= 'CREATE INDEX,';    }    if ($_REQUEST['drop_index'] == true) {        $tracking_set .= 'DROP INDEX,';    }    if ($_REQUEST['insert'] == true) {        $tracking_set .= 'INSERT,';    }    if ($_REQUEST['update'] == true) {        $tracking_set .= 'UPDATE,';    }    if ($_REQUEST['delete'] == true) {        $tracking_set .= 'DELETE,';    }    if ($_REQUEST['truncate'] == true) {        $tracking_set .= 'TRUNCATE,';    }    $tracking_set = rtrim($tracking_set, ',');    if (PMA_Tracker::createVersion($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'], $tracking_set )) {        $msg = PMA_Message::success(sprintf(__('Version %s is created, tracking for %s.%s is activated.'), htmlspecialchars($_REQUEST['version']), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])));        $msg->display();    }}// Deactivate trackingif (isset($_REQUEST['submit_deactivate_now'])) {    if (PMA_Tracker::deactivateTracking($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'])) {        $msg = PMA_Message::success(sprintf(__('Tracking for %s.%s , version %s is deactivated.'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table']), htmlspecialchars($_REQUEST['version'])));        $msg->display();    }}// Activate trackingif (isset($_REQUEST['submit_activate_now'])) {    if (PMA_Tracker::activateTracking($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'])) {        $msg = PMA_Message::success(sprintf(__('Tracking for %s.%s , version %s is activated.'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table']), htmlspecialchars($_REQUEST['version'])));        $msg->display();    }}// Export as SQL executionif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'execution') {    foreach ($entries as $entry) {        $sql_result = PMA_DBI_query( "/*NOTRACK*/\n" . $entry['statement'] );    }    $msg = PMA_Message::success(__('SQL statements executed.'));    $msg->display();}// Export as SQL dumpif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'sqldump') {    $new_query =    "# " . __('You can execute the dump by creating and using a temporary database. Please ensure that you have the privileges to do so.') . "\n" .                    "# " . __('Comment out these two lines if you do not need them.') . "\n" .                    "\n" .                    "CREATE database IF NOT EXISTS pma_temp_db; \n" .                    "USE pma_temp_db; \n" .                    "\n";    foreach ($entries as $entry) {        $new_query .= $entry['statement'];    }    $msg = PMA_Message::success(__('SQL statements exported. Please copy the dump or execute it.'));    $msg->display();    $db_temp = $db;    $table_temp = $table;    $db = $table = '';    include_once './libraries/sql_query_form.lib.php';    PMA_sqlQueryForm($new_query, 'sql');    $db = $db_temp;    $table = $table_temp;}/* * Schema snapshot */if (isset($_REQUEST['snapshot'])) {?>    <h3><?php echo __('Structure snapshot');?>  [<a href="tbl_tracking.php?<?php echo $url_query;?>"><?php echo __('Close');?></a>]</h3><?php    $data = PMA_Tracker::getTrackedData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version']);    // Get first DROP TABLE and CREATE TABLE statements    $drop_create_statements = $data['ddlog'][0]['statement'];    if (strstr($data['ddlog'][0]['statement'], 'DROP TABLE')) {        $drop_create_statements .= $data['ddlog'][1]['statement'];    }    // Print SQL code    PMA_showMessage(sprintf(__('Version %s snapshot (SQL code)'), htmlspecialchars($_REQUEST['version'])), $drop_create_statements);    // Unserialize snapshot    $temp = unserialize($data['schema_snapshot']);    $columns = $temp['COLUMNS'];    $indexes = $temp['INDEXES'];?>    <h3><?php echo __('Structure');?></h3>    <table id="tablestructure" class="data">    <thead>    <tr>        <th><?php echo __('Column'); ?></th>        <th><?php echo __('Type'); ?></th>        <th><?php echo __('Collation'); ?></th>        <th><?php echo __('Null'); ?></th>        <th><?php echo __('Default'); ?></th>        <th><?php echo __('Extra'); ?></th>        <th><?php echo __('Comment'); ?></th>    </tr>    </thead>    <tbody><?php    $style = 'odd';    foreach ($columns as $field_index => $field) {?>        <tr class="noclick <?php echo $style; ?>">            <?php            if ($field['Key'] == 'PRI') {                echo '<td><b><u>' . htmlspecialchars($field['Field']) . '</u></b></td>' . "\n";            } else {                echo '<td><b>' . htmlspecialchars($field['Field']) . '</b></td>' . "\n";            }            ?>            <td><?php echo htmlspecialchars($field['Type']);?></td>            <td><?php echo htmlspecialchars($field['Collation']);?></td>            <td><?php echo (($field['Null'] == 'YES') ? __('Yes') : __('No')); ?></td>            <td><?php            if (isset($field['Default'])) {                $extracted_fieldspec = PMA_extractFieldSpec($field['Type']);                if ($extracted_fieldspec['type'] == 'bit') {                    // here, $field['Default'] contains something like b'010'                    echo PMA_convert_bit_default_value($field['Default']);                } else {                    echo htmlspecialchars($field['Default']);                }            } else {                if ($field['Null'] == 'YES') {                    echo '<i>NULL</i>';                } else {                    echo '<i>' . _pgettext('None for default', 'None') . '</i>';                }            } ?></td>            <td><?php echo htmlspecialchars($field['Extra']);?></td>            <td><?php echo htmlspecialchars($field['Comment']);?></td>        </tr><?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }    }?>    </tbody>    </table><?php    if (count($indexes) > 0) {?>        <h3><?php echo __('Indexes');?></h3>        <table id="tablestructure_indexes" class="data">        <thead>        <tr>            <th><?php echo __('Keyname');?></th>            <th><?php echo __('Type');?></th>            <th><?php echo __('Unique');?></th>            <th><?php echo __('Packed');?></th>            <th><?php echo __('Column');?></th>            <th><?php echo __('Cardinality');?></th>            <th><?php echo __('Collation');?></th>            <th><?php echo __('Null');?></th>            <th><?php echo __('Comment');?></th>        </tr>        <tbody><?php        $style = 'odd';        foreach ($indexes as $indexes_index => $index) {            if ($index['Non_unique'] == 0) {                $str_unique = __('Yes');            } else {                $str_unique = __('No');            }            if ($index['Packed'] != '') {                $str_packed = __('Yes');            } else {                $str_packed = __('No');            }?>            <tr class="noclick <?php echo $style; ?>">                <td><b><?php echo htmlspecialchars($index['Key_name']);?></b></td>                <td><?php echo htmlspecialchars($index['Index_type']);?></td>                <td><?php echo $str_unique;?></td>                <td><?php echo $str_packed;?></td>                <td><?php echo htmlspecialchars($index['Column_name']);?></td>                <td><?php echo htmlspecialchars($index['Cardinality']);?></td>                <td><?php echo htmlspecialchars($index['Collation']);?></td>                <td><?php echo htmlspecialchars($index['Null']);?></td>                <td><?php echo htmlspecialchars($index['Comment']);?></td>            </tr><?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }        }?>    </tbody>    </table><?php    } // endif?>    <br /><hr /><br /><?php}// end of snapshot report/* *  Tracking report */if (isset($_REQUEST['report']) && (isset($_REQUEST['delete_ddlog']) || isset($_REQUEST['delete_dmlog']))) {    if (isset($_REQUEST['delete_ddlog'])) {        // Delete ddlog row data        $delete_id = $_REQUEST['delete_ddlog'];        // Only in case of valable id        if ($delete_id == (int)$delete_id) {            unset($data['ddlog'][$delete_id]);            if (PMA_Tracker::changeTrackingData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version'], 'DDL', $data['ddlog']))                $msg = PMA_Message::success(__('Tracking data definition successfully deleted'));            else                $msg = PMA_Message::rawError(__('Query error'));            $msg->display();        }    }    if (isset($_REQUEST['delete_dmlog'])) {        // Delete dmlog row data        $delete_id = $_REQUEST['delete_dmlog'];        // Only in case of valable id        if ($delete_id == (int)$delete_id) {            unset($data['dmlog'][$delete_id]);            if (PMA_Tracker::changeTrackingData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version'], 'DML', $data['dmlog']))                $msg = PMA_Message::success(__('Tracking data manipulation successfully deleted'));            else                $msg = PMA_Message::rawError(__('Query error'));            $msg->display();        }    }}if (isset($_REQUEST['report']) || isset($_REQUEST['report_export'])) {    ?>    <h3><?php echo __('Tracking report');?>  [<a href="tbl_tracking.php?<?php echo $url_query;?>"><?php echo __('Close');?></a>]</h3>    <small><?php echo __('Tracking statements') . ' ' . htmlspecialchars($data['tracking']); ?></small><br/>    <br/>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <?php    $str1 = '<select name="logtype">' .            '<option value="schema"' . ($selection_schema ? ' selected="selected"' : '') . '>' . __('Structure only') . '</option>' .            '<option value="data"' . ($selection_data ? ' selected="selected"' : ''). '>' . __('Data only') . '</option>' .            '<option value="schema_and_data"' . ($selection_both ? ' selected="selected"' : '') . '>' . __('Structure and data') . '</option>' .            '</select>';    $str2 = '<input type="text" name="date_from" value="' . htmlspecialchars($_REQUEST['date_from']) . '" size="19" />';    $str3 = '<input type="text" name="date_to" value="' . htmlspecialchars($_REQUEST['date_to']) . '" size="19" />';    $str4 = '<input type="text" name="users" value="' . htmlspecialchars($_REQUEST['users']) . '" />';    $str5 = '<input type="submit" name="list_report" value="' . __('Go') . '" />';    printf(__('Show %s with dates from %s to %s by user %s %s'), $str1, $str2, $str3, $str4, $str5);    // Prepare delete link content here    $drop_image_or_text = '';    if (true == $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= PMA_getImage('b_drop.png', __('Delete tracking data row from report'));    }    if ('both' === $GLOBALS['cfg']['PropertiesIconic'] || false === $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= __('Delete');    }    /*     *  First, list tracked data definition statements     */    $i = 1;    if (count($data['ddlog']) == 0 && count($data['dmlog']) == 0) {        $msg = PMA_Message::notice(__('No data'));        $msg->display();    }    if ($selection_schema || $selection_both  && count($data['ddlog']) > 0) {    ?>        <table id="ddl_versions" class="data" width="100%">        <thead>        <tr>            <th width="18">#</th>            <th width="100"><?php echo __('Date');?></th>            <th width="60"><?php echo __('Username');?></th>            <th><?php echo __('Data definition statement');?></th>            <th><?php echo __('Delete');?></th>        </tr>        </thead>        <tbody>        <?php        $style = 'odd';        foreach ($data['ddlog'] as $entry) {            if (strlen($entry['statement']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                $statement = substr($entry['statement'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';            } else {                $statement  = PMA_formatSql(PMA_SQP_parse($entry['statement']));            }            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {        ?>                <tr class="noclick <?php echo $style; ?>">                    <td><small><?php echo $i;?></small></td>                    <td><small><?php echo htmlspecialchars($entry['date']);?></small></td>                    <td><small><?php echo htmlspecialchars($entry['username']); ?></small></td>                    <td><?php echo $statement; ?></td>                    <td nowrap="nowrap"><a href="tbl_tracking.php?<?php echo $url_query;?>&amp;report=true&amp;version=<?php echo $version['version'];?>&amp;delete_ddlog=<?php echo $i-1; ?>"><?php echo $drop_image_or_text; ?></a></td>                </tr>        <?php                if ($style == 'even') {                    $style = 'odd';                } else {                    $style = 'even';                }                $i++;            }        }        ?>        </tbody>        </table>    <?php    } //endif    // Memorize data definition amount    $ddlog_count = $i;    /*     *  Secondly, list tracked data manipulation statements     */    if (($selection_data || $selection_both) && count($data['dmlog']) > 0) {    ?>        <table id="dml_versions" class="data" width="100%">        <thead>        <tr>            <th width="18">#</th>            <th width="100"><?php echo __('Date');?></th>            <th width="60"><?php echo __('Username');?></th>            <th><?php echo __('Data manipulation statement');?></th>            <th><?php echo __('Delete');?></th>        </tr>        </thead>        <tbody>        <?php        $style = 'odd';        foreach ($data['dmlog'] as $entry) {            if (strlen($entry['statement']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                $statement = substr($entry['statement'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';            } else {                $statement  = PMA_formatSql(PMA_SQP_parse($entry['statement']));            }            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {        ?>                <tr class="noclick <?php echo $style; ?>">                    <td><small><?php echo $i; ?></small></td>                    <td><small><?php echo htmlspecialchars($entry['date']); ?></small></td>                    <td><small><?php echo htmlspecialchars($entry['username']); ?></small></td>                    <td><?php echo $statement; ?></td>                    <td nowrap="nowrap"><a href="tbl_tracking.php?<?php echo $url_query;?>&amp;report=true&amp;version=<?php echo $version['version'];?>&amp;delete_dmlog=<?php echo $i-$ddlog_count; ?>"><?php echo $drop_image_or_text; ?></a></td>                </tr>        <?php                if ($style == 'even') {                    $style = 'odd';                } else {                    $style = 'even';                }                $i++;            }        }    ?>        </tbody>        </table>    <?php    }    ?>    </form>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <?php    printf(__('Show %s with dates from %s to %s by user %s %s'), $str1, $str2, $str3, $str4, $str5);    $str_export1 =  '<select name="export_type">' .                    '<option value="sqldumpfile">' . __('SQL dump (file download)') . '</option>' .                    '<option value="sqldump">' . __('SQL dump') . '</option>' .                    '<option value="execution" onclick="alert(\'' . PMA_escapeJsString(__('This option will replace your table and contained data.')) .'\')">' . __('SQL execution') . '</option>' .                    '</select>';    $str_export2 = '<input type="submit" name="report_export" value="' . __('Go') .'" />';    ?>    </form>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <input type="hidden" name="logtype" value="<?php echo htmlspecialchars($_REQUEST['logtype']);?>" />    <input type="hidden" name="date_from" value="<?php echo htmlspecialchars($_REQUEST['date_from']);?>" />    <input type="hidden" name="date_to" value="<?php echo htmlspecialchars($_REQUEST['date_to']);?>" />    <input type="hidden" name="users" value="<?php echo htmlspecialchars($_REQUEST['users']);?>" />    <?php    echo "<br/>" . sprintf(__('Export as %s'), $str_export1) . $str_export2 . "<br/>";    ?>    </form>    <?php    echo "<br/><br/><hr/><br/>\n";} // end of report/* * List selectable tables */$sql_query = " SELECT DISTINCT db_name, table_name FROM " .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . "." .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             " WHERE db_name = '" . PMA_sqlAddSlashes($GLOBALS['db']) . "' " .             " ORDER BY db_name, table_name";$sql_result = PMA_query_as_controluser($sql_query);if (PMA_DBI_num_rows($sql_result) > 0) {?>    <form method="post" action="tbl_tracking.php?<?php echo $url_query;?>">    <select name="table">    <?php    while ($entries = PMA_DBI_fetch_array($sql_result)) {        if (PMA_Tracker::isTracked($entries['db_name'], $entries['table_name'])) {            $status = ' (' . __('active') . ')';        } else {            $status = ' (' . __('not active') . ')';        }        if ($entries['table_name'] == $_REQUEST['table']) {            $s = ' selected="selected"';        } else {            $s = '';        }        echo '<option value="' . htmlspecialchars($entries['table_name']) . '"' . $s . '>' . htmlspecialchars($entries['db_name']) . ' . ' . htmlspecialchars($entries['table_name']) . $status . '</option>' . "\n";    }    ?>    </select>    <input type="submit" name="show_versions_submit" value="<?php echo __('Show versions');?>" />    </form><?php}?><br /><?php/* * List versions of current table */$sql_query = " SELECT * FROM " .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . "." .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             " WHERE db_name = '" . PMA_sqlAddSlashes($_REQUEST['db']) . "' ".             " AND table_name = '" . PMA_sqlAddSlashes($_REQUEST['table']) ."' ".             " ORDER BY version DESC ";$sql_result = PMA_query_as_controluser($sql_query);$last_version = 0;$maxversion = PMA_DBI_fetch_array($sql_result);$last_version = $maxversion['version'];if ($last_version > 0) {?>    <table id="versions" class="data">    <thead>    <tr>        <th><?php echo __('Database');?></th>        <th><?php echo __('Table');?></th>        <th><?php echo __('Version');?></th>        <th><?php echo __('Created');?></th>        <th><?php echo __('Updated');?></th>        <th><?php echo __('Status');?></th>        <th><?php echo __('Show');?></th>    </tr>    </thead>    <tbody>    <?php    $style = 'odd';    PMA_DBI_data_seek($sql_result, 0);    while ($version = PMA_DBI_fetch_array($sql_result)) {        if ($version['tracking_active'] == 1) {            $version_status = __('active');        } else {            $version_status = __('not active');        }        if ($version['version'] == $last_version) {            if ($version['tracking_active'] == 1) {                $tracking_active = true;            } else {                $tracking_active = false;            }        }    ?>        <tr class="noclick <?php echo $style;?>">            <td><?php echo htmlspecialchars($version['db_name']);?></td>            <td><?php echo htmlspecialchars($version['table_name']);?></td>            <td><?php echo htmlspecialchars($version['version']);?></td>            <td><?php echo htmlspecialchars($version['date_created']);?></td>            <td><?php echo htmlspecialchars($version['date_updated']);?></td>            <td><?php echo $version_status;?></td>            <td> <a href="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $version['version']));?>"><?php echo __('Tracking report');?></a>                | <a href="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('snapshot' => 'true', 'version' => $version['version']));?>"><?php echo __('Structure snapshot');?></a>            </td>        </tr>    <?php        if ($style == 'even') {            $style = 'odd';        } else {            $style = 'even';        }    }    ?>    </tbody>    </table>    <?php if ($tracking_active == true) {?>        <div id="div_deactivate_tracking">        <form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>">        <fieldset>            <legend><?php printf(__('Deactivate tracking for %s.%s'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>            <input type="hidden" name="version" value="<?php echo $last_version; ?>" />            <input type="submit" name="submit_deactivate_now" value="<?php echo __('Deactivate now'); ?>" />        </fieldset>        </form>        </div>    <?php    }    ?>    <?php if ($tracking_active == false) {?>        <div id="div_activate_tracking">        <form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>">        <fieldset>            <legend><?php printf(__('Activate tracking for %s.%s'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>            <input type="hidden" name="version" value="<?php echo $last_version; ?>" />            <input type="submit" name="submit_activate_now" value="<?php echo __('Activate now'); ?>" />        </fieldset>        </form>        </div>    <?php    }}?><div id="div_create_version"><form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><fieldset>    <legend><?php printf(__('Create version %s of %s.%s'), ($last_version + 1), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>    <input type="hidden" name="version" value="<?php echo ($last_version + 1); ?>" />    <p><?php echo __('Track these data definition statements:');?></p>    <input type="checkbox" name="alter_table" value="true" checked="checked" /> ALTER TABLE<br/>    <input type="checkbox" name="rename_table" value="true" checked="checked" /> RENAME TABLE<br/>    <input type="checkbox" name="create_table" value="true" checked="checked" /> CREATE TABLE<br/>    <input type="checkbox" name="drop_table" value="true" checked="checked" /> DROP TABLE<br/>    <br/>    <input type="checkbox" name="create_index" value="true" checked="checked" /> CREATE INDEX<br/>    <input type="checkbox" name="drop_index" value="true" checked="checked" /> DROP INDEX<br/>    <p><?php echo __('Track these data manipulation statements:');?></p>    <input type="checkbox" name="insert" value="true" checked="checked" /> INSERT<br/>    <input type="checkbox" name="update" value="true" checked="checked" /> UPDATE<br/>    <input type="checkbox" name="delete" value="true" checked="checked" /> DELETE<br/>    <input type="checkbox" name="truncate" value="true" checked="checked" /> TRUNCATE<br/></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_create_version" value="<?php echo __('Create version'); ?>" /></fieldset></form></div><br class="clearfloat"/><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/common.inc.php';// Cross-framing protectionif ( false === $GLOBALS['cfg']['AllowThirdPartyFraming']) {    echo PMA_includeJS('cross_framing_protection.js');}// generate title (unless we already have $page_title, from cookie auth)if (! isset($page_title)) {    if ($GLOBALS['server'] > 0) {        $title = PMA_expandUserString(            ! empty($GLOBALS['table']) ? $GLOBALS['cfg']['TitleTable'] :            (! empty($GLOBALS['db']) ? $GLOBALS['cfg']['TitleDatabase'] :            (! empty($GLOBALS['cfg']['Server']['host']) ? $GLOBALS['cfg']['TitleServer'] :            $GLOBALS['cfg']['TitleDefault']))        );    }} else {    $title = $page_title;}// here, the function does not exist with this configuration: $cfg['ServerDefault'] = 0;$is_superuser    = function_exists('PMA_isSuperuser') && PMA_isSuperuser();$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'jquery/jquery.qtip-1.0.0-rc3.js';$params = array('lang' => $GLOBALS['lang']);if (isset($GLOBALS['db'])) {    $params['db'] = $GLOBALS['db'];}$GLOBALS['js_include'][] = 'messages.php' . PMA_generate_common_url($params);// Append the theme id to this url to invalidate the cache on a theme change$GLOBALS['js_include'][] = 'get_image.js.php?theme=' . urlencode($_SESSION['PMA_Theme']->getId());/** * Here we add a timestamp when loading the file, so that users who * upgrade phpMyAdmin are not stuck with older .js files in their * browser cache. This produces an HTTP 304 request for each file. */// avoid loading twice a js file$GLOBALS['js_include'] = array_unique($GLOBALS['js_include']);foreach ($GLOBALS['js_include'] as $js_script_file) {    echo PMA_includeJS($js_script_file);}// Below javascript Updates the title of the frameset if possible?><script type="text/javascript">// <![CDATA[if (typeof(parent.document) != 'undefined' && typeof(parent.document) != 'unknown'    && typeof(parent.document.title) == 'string') {    parent.document.title = '<?php echo (isset($title) ? PMA_sanitize(PMA_escapeJsString(htmlspecialchars($title))) : ''); ?>';}<?phpif (count($GLOBALS['js_script']) > 0) {    echo implode("\n", $GLOBALS['js_script'])."\n";}foreach ($GLOBALS['js_events'] as $js_event) {    echo "$(window.parent).bind('" . $js_event['event'] . "', "        . $js_event['function'] . ");\n";}?>// ]]></script><?php// Reloads the navigation frame via JavaScript if requiredPMA_reloadNavigation();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * CSV import plugin for phpMyAdmin using LOAD DATA * * @package PhpMyAdmin-Import * @subpackage LDI */if (! defined('PHPMYADMIN')) {    exit;}/** * */if ($plugin_param !== 'table') {    return;}if (isset($plugin_list)) {    if ($GLOBALS['cfg']['Import']['ldi_local_option'] == 'auto') {        $GLOBALS['cfg']['Import']['ldi_local_option'] = false;        $result = PMA_DBI_try_query('SHOW VARIABLES LIKE \'local\\_infile\';');        if ($result != false && PMA_DBI_num_rows($result) > 0) {            $tmp = PMA_DBI_fetch_row($result);            if ($tmp[1] == 'ON') {                $GLOBALS['cfg']['Import']['ldi_local_option'] = true;            }        }        PMA_DBI_free_result($result);        unset($result);    }    $plugin_list['ldi'] = array(        'text' => __('CSV using LOAD DATA'),        'extension' => 'ldi', // This is nonsense, however we want to default to our parser for csv        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'replace', 'text' => __('Replace table data with file')),            array('type' => 'bool', 'name' => 'ignore', 'text' => __('Do not abort on INSERT error')),            array('type' => 'text', 'name' => 'terminated', 'text' => __('Columns terminated by'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'enclosed', 'text' => __('Columns enclosed by'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'escaped', 'text' => __('Columns escaped by'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'new_line', 'text' => __('Lines terminated by'), 'size' => 2),            array('type' => 'text', 'name' => 'columns', 'text' => __('Column names')),            array('type' => 'bool', 'name' => 'local_option', 'text' => __('Use LOCAL keyword')),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );    /* We do not define function when plugin is just queried for information above */    return;}if ($import_file == 'none' || $compression != 'none' || $charset_conversion) {    // We handle only some kind of data!    $message = PMA_Message::error(__('This plugin does not support compressed imports!'));    $error = true;    return;}$sql = 'LOAD DATA';if (isset($ldi_local_option)) {    $sql .= ' LOCAL';}$sql .= ' INFILE \'' . PMA_sqlAddSlashes($import_file) . '\'';if (isset($ldi_replace)) {    $sql .= ' REPLACE';} elseif (isset($ldi_ignore)) {    $sql .= ' IGNORE';}$sql .= ' INTO TABLE ' . PMA_backquote($table);if (strlen($ldi_terminated) > 0) {    $sql .= ' FIELDS TERMINATED BY \'' . $ldi_terminated . '\'';}if (strlen($ldi_enclosed) > 0) {    $sql .= ' ENCLOSED BY \'' . PMA_sqlAddSlashes($ldi_enclosed) . '\'';}if (strlen($ldi_escaped) > 0) {    $sql .= ' ESCAPED BY \'' . PMA_sqlAddSlashes($ldi_escaped) . '\'';}if (strlen($ldi_new_line) > 0) {    if ($ldi_new_line == 'auto') {        $ldi_new_line = PMA_whichCrlf() == "\n" ? '\n' : '\r\n';    }    $sql .= ' LINES TERMINATED BY \'' . $ldi_new_line . '\'';}if ($skip_queries > 0) {    $sql .= ' IGNORE ' . $skip_queries . ' LINES';    $skip_queries = 0;}if (strlen($ldi_columns) > 0) {    $sql .= ' (';    $tmp   = preg_split('/,( ?)/', $ldi_columns);    $cnt_tmp = count($tmp);    for ($i = 0; $i < $cnt_tmp; $i++) {        if ($i > 0) {            $sql .= ', ';        }        /* Trim also `, if user already included backquoted fields */        $sql     .= PMA_backquote(trim($tmp[$i], " \t\r\n\0\x0B`"));    } // end for    $sql .= ')';}PMA_importRunQuery($sql, $sql);PMA_importRunQuery();$finished = true;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * the MyISAM storage engine * @package PhpMyAdmin-Engines */class PMA_StorageEngine_myisam extends PMA_StorageEngine{    /**     * returns array with variable names dedicated to MyISAM storage engine     *     * @return  array   variable names     */    function getVariables()    {        return array(            'myisam_data_pointer_size' => array(                'title' => __('Data pointer size'),                'desc'  => __('The default pointer size in bytes, to be used by CREATE TABLE for MyISAM tables when no MAX_ROWS option is specified.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'myisam_recover_options' => array(                'title' => __('Automatic recovery mode'),                'desc'  => __('The mode for automatic recovery of crashed MyISAM tables, as set via the --myisam-recover server startup option.'),            ),            'myisam_max_sort_file_size' => array(                'title' => __('Maximum size for temporary sort files'),                'desc'  => __('The maximum size of the temporary file MySQL is allowed to use while re-creating a MyISAM index (during REPAIR TABLE, ALTER TABLE, or LOAD DATA INFILE).'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'myisam_max_extra_sort_file_size' => array(                'title' => __('Maximum size for temporary files on index creation'),                'desc'  => __('If the temporary file used for fast MyISAM index creation would be larger than using the key cache by the amount specified here, prefer the key cache method.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'myisam_repair_threads' => array(                'title' => __('Repair threads'),                'desc'  => __('If this value is greater than 1, MyISAM table indexes are created in parallel (each index in its own thread) during the repair by sorting process.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'myisam_sort_buffer_size' => array(                'title' => __('Sort buffer size'),                'desc'  => __('The buffer that is allocated when sorting MyISAM indexes during a REPAIR TABLE or when creating indexes with CREATE INDEX or ALTER TABLE.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'myisam_stats_method' => array(            ),            'delay_key_write' => array(            ),            'bulk_insert_buffer_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'skip_external_locking' => array(            ),        );    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once './libraries/common.inc.php';require_once './libraries/display_import_ajax.lib.php';// AJAX requests can't be cached!PMA_no_cache_header();// $GLOBALS["message"] is used for asking for an import messageif (isset($GLOBALS["message"]) && $GLOBALS["message"]) {    header('Content-type: text/html');    // wait 0.3 sec before we check for $_SESSION variable, which is set inside import.php    usleep(300000);    // wait until message is available    while ($_SESSION['Import_message']['message'] == null) {        usleep(250000); // 0.25 sec    }    echo $_SESSION['Import_message']['message'];    echo '<fieldset class="tblFooters">' . "\n";    echo '    [ <a href="' . $_SESSION['Import_message']['go_back_url'] . '">' . __('Back') . '</a> ]' . "\n";    echo '</fieldset>'."\n";} else {    PMA_importAjaxStatus($GLOBALS["id"]);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * the MyISAM storage engine * @package PhpMyAdmin-Engines */class PMA_StorageEngine_pbxt extends PMA_StorageEngine{    /**     * returns array with variable names dedicated to PBXT storage engine     *     * @return  array   variable names     */    function getVariables()    {        return array(            'pbxt_index_cache_size' => array(                'title' => __('Index cache size'),                'desc'  => __('This is the amount of memory allocated to the index cache. Default value is 32MB. The memory allocated here is used only for caching index pages.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_record_cache_size' => array(                'title' => __('Record cache size'),                'desc'  => __('This is the amount of memory allocated to the record cache used to cache table data. The default value is 32MB. This memory is used to cache changes to the handle data (.xtd) and row pointer (.xtr) files.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_log_cache_size' => array(                'title' => __('Log cache size'),                'desc'  => __('The amount of memory allocated to the transaction log cache used to cache on transaction log data. The default is 16MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_log_file_threshold' => array(                'title' => __('Log file threshold'),                'desc'  => __('The size of a transaction log before rollover, and a new log is created. The default value is 16MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_transaction_buffer_size' => array(                'title' => __('Transaction buffer size'),                'desc'  => __('The size of the global transaction log buffer (the engine allocates 2 buffers of this size). The default is 1MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_checkpoint_frequency' => array(                'title' => __('Checkpoint frequency'),                'desc'  => __('The amount of data written to the transaction log before a checkpoint is performed. The default value is 24MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_data_log_threshold' => array(                'title' => __('Data log threshold'),                'desc'  => __('The maximum size of a data log file. The default value is 64MB. PBXT can create a maximum of 32000 data logs, which are used by all tables. So the value of this variable can be increased to increase the total amount of data that can be stored in the database.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_garbage_threshold' => array(                'title' => __('Garbage threshold'),                'desc'  => __('The percentage of garbage in a data log file before it is compacted. This is a value between 1 and 99. The default is 50.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC            ),            'pbxt_log_buffer_size' => array(                'title' => __('Log buffer size'),                'desc'  => __('The size of the buffer used when writing a data log. The default is 256MB. The engine allocates one buffer per thread, but only if the thread is required to write a data log.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_data_file_grow_size' => array(                'title' => __('Data file grow size'),                'desc'  => __('The grow size of the handle data (.xtd) files.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_row_file_grow_size' => array(                'title' => __('Row file grow size'),                'desc'  => __('The grow size of the row pointer (.xtr) files.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_log_file_count' => array(                'title' => __('Log file count'),                'desc'  => __('This is the number of transaction log files (pbxt/system/xlog*.xt) the system will maintain. If the number of logs exceeds this value then old logs will be deleted, otherwise they are renamed and given the next highest number.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC            ),        );    }    /**     * returns the pbxt engine specific handling for     * PMA_ENGINE_DETAILS_TYPE_SIZE variables.     *     * @param   string   $formatted_size   the size expression (for example 8MB)     *     * @return string the formatted value and its unit     */    function resolveTypeSize($formatted_size)    {        if (preg_match('/^[0-9]+[a-zA-Z]+$/', $formatted_size)) {            $value = PMA_extractValueFromFormattedSize($formatted_size);        } else {            $value = $formatted_size;        }        return PMA_formatByteDown($value);    }    //--------------------    function getInfoPages()    {        $pages = array();        $pages['Documentation'] = __('Documentation');        return $pages;    }    //--------------------    function getPage($id)    {        if (! array_key_exists($id, $this->getInfoPages())) {            return false;        }        $id = 'getPage' . $id;        return $this->$id();    }    function getPageDocumentation()    {        $output = '<p>'        . sprintf(__('Documentation and further information about PBXT can be found on the %sPrimeBase XT Home Page%s.'), '<a href="' . PMA_linkURL('http://www.primebase.com/xt/') . '" target="_blank">', '</a>')        . '</p>' . "\n"        . '<h3>' . __('Related Links') . '</h3>' . "\n"        . '<ul>' . "\n"        . '<li><a href="' . PMA_linkURL('http://pbxt.blogspot.com/') . '" target="_blank">' . __('The PrimeBase XT Blog by Paul McCullagh') . '</a></li>' . "\n"        . '<li><a href="' . PMA_linkURL('http://www.blobstreaming.org/') . '" target="_blank">' . __('The PrimeBase Media Streaming (PBMS) home page') . '</a></li>' . "\n"        . '</ul>' . "\n";        return $output;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Messages for phpMyAdmin. * * This file defines variables in a special format suited for the * configuration subsystem, with $strConfig as a prefix, _desc or _name * as a suffix, and the directive name in between. * * @package PhpMyAdmin */if (!function_exists('__')) {    die('Bad invocation!');}$strConfigAjaxEnable_desc = __('Improves efficiency of screen refresh');$strConfigAjaxEnable_name = __('Enable Ajax');$strConfigAllowArbitraryServer_desc = __('If enabled user can enter any MySQL server in login form for cookie auth');$strConfigAllowArbitraryServer_name = __('Allow login to any MySQL server');$strConfigAllowThirdPartyFraming_desc = __('Enabling this allows a page located on a different domain to call phpMyAdmin inside a frame, and is a potential [strong]security hole[/strong] allowing cross-frame scripting attacks');$strConfigAllowThirdPartyFraming_name = __('Allow third party framing');$strConfigAllowUserDropDatabase_name = __('Show &quot;Drop database&quot; link to normal users');$strConfigblowfish_secret_desc = __('Secret passphrase used for encrypting cookies in [kbd]cookie[/kbd] authentication');$strConfigblowfish_secret_name = __('Blowfish secret');$strConfigBrowseMarkerEnable_desc = __('Highlight selected rows');$strConfigBrowseMarkerEnable_name = __('Row marker');$strConfigBrowsePointerEnable_desc = __('Highlight row pointed by the mouse cursor');$strConfigBrowsePointerEnable_name = __('Highlight pointer');$strConfigBZipDump_desc = __('Enable [a@http://en.wikipedia.org/wiki/Bzip2]bzip2[/a] compression for import and export operations');$strConfigBZipDump_name = __('Bzip2');$strConfigCharEditing_desc = __('Defines which type of editing controls should be used for CHAR and VARCHAR columns; [kbd]input[/kbd] - allows limiting of input length, [kbd]textarea[/kbd] - allows newlines in columns');$strConfigCharEditing_name = __('CHAR columns editing');$strConfigMinSizeForInputField_desc = __('Defines the minimum size for input fields generated for CHAR and VARCHAR columns');$strConfigMinSizeForInputField_name = __('Minimum size for input field');$strConfigMaxSizeForInputField_desc = __('Defines the maximum size for input fields generated for CHAR and VARCHAR columns');$strConfigMaxSizeForInputField_name = __('Maximum size for input field');$strConfigCharTextareaCols_desc = __('Number of columns for CHAR/VARCHAR textareas');$strConfigCharTextareaCols_name = __('CHAR textarea columns');$strConfigCharTextareaRows_desc = __('Number of rows for CHAR/VARCHAR textareas');$strConfigCharTextareaRows_name = __('CHAR textarea rows');$strConfigCheckConfigurationPermissions_name = __('Check config file permissions');$strConfigCompressOnFly_desc = __('Compress gzip/bzip2 exports on the fly without the need for much memory; if you encounter problems with created gzip/bzip2 files disable this feature');$strConfigCompressOnFly_name = __('Compress on the fly');$strConfigConfigurationFile = __('Configuration file');$strConfigConfirm_desc = __('Whether a warning (&quot;Are your really sure...&quot;) should be displayed when you\'re about to lose data');$strConfigConfirm_name = __('Confirm DROP queries');$strConfigDBG_sql_name = __('Debug SQL');$strConfigDefaultDisplay_name = __('Default display direction');$strConfigDefaultTabDatabase_desc = __('Tab that is displayed when entering a database');$strConfigDefaultTabDatabase_name = __('Default database tab');$strConfigDefaultTabServer_desc = __('Tab that is displayed when entering a server');$strConfigDefaultTabServer_name = __('Default server tab');$strConfigDefaultTabTable_desc = __('Tab that is displayed when entering a table');$strConfigDefaultTabTable_name = __('Default table tab');$strConfigDisplayBinaryAsHex_desc = __('Show binary contents as HEX by default');$strConfigDisplayBinaryAsHex_name = __('Show binary contents as HEX');$strConfigDisplayDatabasesList_desc = __('Show database listing as a list instead of a drop down');$strConfigDisplayDatabasesList_name = __('Display databases as a list');$strConfigDisplayServersList_desc = __('Show server listing as a list instead of a drop down');$strConfigDisplayServersList_name = __('Display servers as a list');$strConfigDisableMultiTableMaintenance_desc = __('Disable the table maintenance mass operations, like optimizing or repairing the selected tables of a database.');$strConfigDisableMultiTableMaintenance_name = __('Disable multi table maintenance');$strConfigEditInWindow_desc = __('Edit SQL queries in popup window');$strConfigEditInWindow_name = __('Edit in window');$strConfigError_Handler_display_name = __('Display errors');$strConfigError_Handler_gather_name = __('Gather errors');$strConfigErrorIconic_desc = __('Show icons for warning, error and information messages');$strConfigErrorIconic_name = __('Iconic errors');$strConfigExecTimeLimit_desc = __('Set the number of seconds a script is allowed to run ([kbd]0[/kbd] for no limit)');$strConfigExecTimeLimit_name = __('Maximum execution time');$strConfigExport_asfile_name = __('Save as file');$strConfigExport_charset_name = __('Character set of the file');$strConfigExport_codegen_format_name = __('Format');$strConfigExport_compression_name = __('Compression');$strConfigExport_csv_columns_name = __('Put columns names in the first row');$strConfigExport_csv_enclosed_name = __('Columns enclosed by');$strConfigExport_csv_escaped_name = __('Columns escaped by');$strConfigExport_csv_null_name = __('Replace NULL by');$strConfigExport_csv_removeCRLF_name = __('Remove CRLF characters within columns');$strConfigExport_csv_separator_name = __('Columns terminated by');$strConfigExport_csv_terminated_name = __('Lines terminated by');$strConfigExport_excel_columns_name = __('Put columns names in the first row');$strConfigExport_excel_edition_name = __('Excel edition');$strConfigExport_excel_null_name = __('Replace NULL by');$strConfigExport_excel_removeCRLF_name = __('Remove CRLF characters within columns');$strConfigExport_file_template_database_name = __('Database name template');$strConfigExport_file_template_server_name = __('Server name template');$strConfigExport_file_template_table_name = __('Table name template');$strConfigExport_format_name = __('Format');$strConfigExport_htmlword_columns_name = __('Put columns names in the first row');$strConfigExport_htmlword_null_name = __('Replace NULL by');$strConfigExport_htmlword_structure_or_data_name = __('Dump table');$strConfigExport_latex_caption_name = __('Include table caption');$strConfigExport_latex_columns_name = __('Put columns names in the first row');$strConfigExport_latex_comments_name = __('Comments');$strConfigExport_latex_data_caption_name = __('Table caption');$strConfigExport_latex_data_continued_caption_name = __('Continued table caption');$strConfigExport_latex_data_label_name = __('Label key');$strConfigExport_latex_mime_name = __('MIME type');$strConfigExport_latex_null_name  = __('Replace NULL by');$strConfigExport_latex_relation_name = __('Relations');$strConfigExport_latex_structure_caption_name = __('Table caption');$strConfigExport_latex_structure_continued_caption_name = __('Continued table caption');$strConfigExport_latex_structure_label_name = __('Label key');$strConfigExport_latex_structure_or_data_name = __('Dump table');$strConfigExport_method_name = __('Export method');$strConfigExport_ods_columns_name = __('Put columns names in the first row');$strConfigExport_ods_null_name = __('Replace NULL by');$strConfigExport_odt_columns_name = __('Put columns names in the first row');$strConfigExport_odt_comments_name = __('Comments');$strConfigExport_odt_mime_name = __('MIME type');$strConfigExport_odt_null_name = __('Replace NULL by');$strConfigExport_odt_relation_name = __('Relations');$strConfigExport_odt_structure_or_data_name = __('Dump table');$strConfigExport_onserver_name = __('Save on server');$strConfigExport_onserver_overwrite_name = __('Overwrite existing file(s)');$strConfigExport_quick_export_onserver_name = __('Save on server');$strConfigExport_quick_export_onserver_overwrite_name = __('Overwrite existing file(s)');$strConfigExport_remember_file_template_name = __('Remember file name template');$strConfigExport_sql_auto_increment_name = __('Add AUTO_INCREMENT value');$strConfigExport_sql_backquotes_name = __('Enclose table and column names with backquotes');$strConfigExport_sql_compatibility_name = __('SQL compatibility mode');$strConfigExport_sql_create_table_statements_name = __('<code>CREATE TABLE</code> options:');$strConfigExport_sql_dates_name = __('Creation/Update/Check dates');$strConfigExport_sql_delayed_name = __('Use delayed inserts');$strConfigExport_sql_disable_fk_name = __('Disable foreign key checks');$strConfigExport_sql_drop_database_name = sprintf(__('Add %s'), 'DROP DATABASE');$strConfigExport_sql_drop_table_name = sprintf(__('Add %s'), 'DROP TABLE / VIEW / PROCEDURE / FUNCTION / EVENT');$strConfigExport_sql_hex_for_blob_name = __('Use hexadecimal for BLOB');$strConfigExport_sql_if_not_exists_name = sprintf(__('Add %s'), 'IF NOT EXISTS');$strConfigExport_sql_ignore_name = __('Use ignore inserts');$strConfigExport_sql_include_comments_name = __('Comments');$strConfigExport_sql_insert_syntax_name = __('Syntax to use when inserting data');$strConfigExport_sql_max_query_size_name = __('Maximal length of created query');$strConfigExport_sql_mime_name = __('MIME type');$strConfigExport_sql_procedure_function_name = sprintf(__('Add %s'), 'CREATE PROCEDURE / FUNCTION / EVENT');$strConfigExport_sql_relation_name = __('Relations');$strConfigExport_sql_structure_or_data_name = __('Dump table');$strConfigExport_sql_type_name = __('Export type');$strConfigExport_sql_use_transaction_name = __('Enclose export in a transaction');$strConfigExport_sql_utc_time_name = __('Export time in UTC');$strConfigExport_texytext_columns_name = __('Put columns names in the first row');$strConfigExport_texytext_null_name = __('Replace NULL by');$strConfigExport_texytext_structure_or_data_name = __('Dump table');$strConfigExport_xls_columns_name = __('Put columns names in the first row');$strConfigExport_xls_null_name = __('Replace NULL by');$strConfigExport_xlsx_columns_name = __('Put columns names in the first row');$strConfigExport_xlsx_null_name = __('Replace NULL by');$strConfigForceSSL_desc = __('Force secured connection while using phpMyAdmin');$strConfigForceSSL_name = __('Force SSL connection');$strConfigForeignKeyDropdownOrder_desc = __('Sort order for items in a foreign-key dropdown box; [kbd]content[/kbd] is the referenced data, [kbd]id[/kbd] is the key value');$strConfigForeignKeyDropdownOrder_name = __('Foreign key dropdown order');$strConfigForeignKeyMaxLimit_desc = __('A dropdown will be used if fewer items are present');$strConfigForeignKeyMaxLimit_name = __('Foreign key limit');$strConfigForm_Browse = __('Browse mode');$strConfigForm_Browse_desc = __('Customize browse mode');$strConfigForm_CodeGen = 'CodeGen';$strConfigForm_CodeGen_desc = __('Customize default options');$strConfigForm_Csv = __('CSV');$strConfigForm_Csv_desc = __('Customize default options');$strConfigForm_Developer = __('Developer');$strConfigForm_Developer_desc = __('Settings for phpMyAdmin developers');$strConfigForm_Edit = __('Edit mode');$strConfigForm_Edit_desc = __('Customize edit mode');$strConfigForm_Export = __('Export');$strConfigForm_Export_defaults = __('Export defaults');$strConfigForm_Export_defaults_desc = __('Customize default export options');$strConfigForm_Features = __('Features');$strConfigForm_General = __('General');$strConfigForm_General_desc = __('Set some commonly used options');$strConfigForm_Import = __('Import');$strConfigForm_Import_defaults = __('Import defaults');$strConfigForm_Import_defaults_desc = __('Customize default common import options');$strConfigForm_Import_export = __('Import / export');$strConfigForm_Import_export_desc = __('Set import and export directories and compression options');$strConfigForm_Latex = __('LaTeX');$strConfigForm_Latex_desc = __('Customize default options');$strConfigForm_Left_databases = __('Databases');$strConfigForm_Left_databases_desc = __('Databases display options');$strConfigForm_Left_frame = __('Navigation frame');$strConfigForm_Left_frame_desc = __('Customize appearance of the navigation frame');$strConfigForm_Left_servers = __('Servers');$strConfigForm_Left_servers_desc = __('Servers display options');$strConfigForm_Left_tables = __('Tables');$strConfigForm_Left_tables_desc = __('Tables display options');$strConfigForm_Main_frame = __('Main frame');$strConfigForm_Microsoft_Office = __('Microsoft Office');$strConfigForm_Microsoft_Office_desc = __('Customize default options');$strConfigForm_Open_Document = __('Open Document');$strConfigForm_Open_Document_desc = __('Customize default options');$strConfigForm_Other_core_settings = __('Other core settings');$strConfigForm_Other_core_settings_desc = __('Settings that didn\'t fit enywhere else');$strConfigForm_Page_titles = __('Page titles');$strConfigForm_Page_titles_desc = __('Specify browser\'s title bar text. Refer to [a@Documentation.html#cfg_TitleTable]documentation[/a] for magic strings that can be used to get special values.');$strConfigForm_Query_window = __('Query window');$strConfigForm_Query_window_desc = __('Customize query window options');$strConfigForm_Security = __('Security');$strConfigForm_Security_desc = __('Please note that phpMyAdmin is just a user interface and its features do not limit MySQL');$strConfigForm_Server = __('Basic settings');$strConfigForm_Server_auth = __('Authentication');$strConfigForm_Server_auth_desc = __('Authentication settings');$strConfigForm_Server_config = __('Server configuration');$strConfigForm_Server_config_desc = __('Advanced server configuration, do not change these options unless you know what they are for');$strConfigForm_Server_desc = __('Enter server connection parameters');$strConfigForm_Server_pmadb = __('Configuration storage');$strConfigForm_Server_pmadb_desc = __('Configure phpMyAdmin configuration storage to gain access to additional features, see [a@Documentation.html#linked-tables]phpMyAdmin configuration storage[/a] in documentation');$strConfigForm_Server_tracking = __('Changes tracking');$strConfigForm_Server_tracking_desc = __('Tracking of changes made in database. Requires the phpMyAdmin configuration storage.');$strConfigFormset_Export = __('Customize export options');$strConfigFormset_Features = __('Features');$strConfigFormset_Import = __('Customize import defaults');$strConfigFormset_Left_frame = __('Customize navigation frame');$strConfigFormset_Main_frame = __('Customize main frame');$strConfigFormset_Sql_queries = __('SQL queries');$strConfigForm_Sql = __('SQL');$strConfigForm_Sql_box = __('SQL Query box');$strConfigForm_Sql_box_desc = __('Customize links shown in SQL Query boxes');$strConfigForm_Sql_desc = __('Customize default options');$strConfigForm_Sql_queries = __('SQL queries');$strConfigForm_Sql_queries_desc = __('SQL queries settings');$strConfigForm_Sql_validator = __('SQL Validator');$strConfigForm_Sql_validator_desc = __('If you wish to use the SQL Validator service, you should be aware that [strong]all SQL statements are stored anonymously for statistical purposes[/strong].[br][em][a@http://sqlvalidator.mimer.com/]Mimer SQL Validator[/a], Copyright 2002 Upright Database Technology. All rights reserved.[/em]');$strConfigForm_Startup = __('Startup');$strConfigForm_Startup_desc = __('Customize startup page');$strConfigForm_Tabs = __('Tabs');$strConfigForm_Tabs_desc = __('Choose how you want tabs to work');$strConfigForm_Text_fields = __('Text fields');$strConfigForm_Text_fields_desc = __('Customize text input fields');$strConfigForm_Texy = __('Texy! text');$strConfigForm_Texy_desc = __('Customize default options');$strConfigForm_Warnings = __('Warnings');$strConfigForm_Warnings_desc = __('Disable some of the warnings shown by phpMyAdmin');$strConfigGZipDump_desc = __('Enable [a@http://en.wikipedia.org/wiki/Gzip]gzip[/a] compression for import and export operations');$strConfigGZipDump_name = __('GZip');$strConfigIconvExtraParams_name = __('Extra parameters for iconv');$strConfigIgnoreMultiSubmitErrors_desc = __('If enabled, phpMyAdmin continues computing multiple-statement queries even if one of the queries failed');$strConfigIgnoreMultiSubmitErrors_name = __('Ignore multiple statement errors');$strConfigImport_allow_interrupt_desc = __('Allow interrupt of import in case script detects it is close to time limit. This might be good way to import large files, however it can break transactions.');$strConfigImport_allow_interrupt_name = __('Partial import: allow interrupt');$strConfigImport_charset_name = __('Character set of the file');$strConfigImport_csv_col_names_name = __('Lines terminated by');$strConfigImport_csv_enclosed_name = __('Columns enclosed by');$strConfigImport_csv_escaped_name = __('Columns escaped by');$strConfigImport_csv_ignore_name = __('Do not abort on INSERT error');$strConfigImport_csv_replace_name = __('Replace table data with file');$strConfigImport_csv_terminated_name = __('Columns terminated by');$strConfigImport_format_desc = __('Default format; be aware that this list depends on location (database, table) and only SQL is always available');$strConfigImport_format_name = __('Format of imported file');$strConfigImport_ldi_enclosed_name = __('Columns enclosed by');$strConfigImport_ldi_escaped_name = __('Columns escaped by');$strConfigImport_ldi_ignore_name = __('Do not abort on INSERT error');$strConfigImport_ldi_local_option_name = __('Use LOCAL keyword');$strConfigImport_ldi_replace_name = __('Replace table data with file');$strConfigImport_ldi_terminated_name = __('Columns terminated by');$strConfigImport_ods_col_names_name = __('Column names in first row');$strConfigImport_ods_empty_rows_name = __('Do not import empty rows');$strConfigImport_ods_recognize_currency_name = __('Import currencies ($5.00 to 5.00)');$strConfigImport_ods_recognize_percentages_name = __('Import percentages as proper decimals (12.00% to .12)');$strConfigImport_skip_queries_desc = __('Number of queries to skip from start');$strConfigImport_skip_queries_name = __('Partial import: skip queries');$strConfigImport_sql_compatibility_name = __('SQL compatibility mode');$strConfigImport_sql_no_auto_value_on_zero_name = __('Do not use AUTO_INCREMENT for zero values');$strConfigImport_xls_col_names_name = __('Column names in first row');$strConfigImport_xlsx_col_names_name = __('Column names in first row');$strConfigInitialSlidersState_name = __('Initial state for sliders');$strConfigInsertRows_desc = __('How many rows can be inserted at one time');$strConfigInsertRows_name = __('Number of inserted rows');$strConfigLeftDefaultTabTable_name = __('Target for quick access icon');$strConfigLeftDisplayLogo_desc = __('Show logo in left frame');$strConfigLeftDisplayLogo_name = __('Display logo');$strConfigLeftDisplayServers_desc = __('Display server choice at the top of the left frame');$strConfigLeftDisplayServers_name = __('Display servers selection');$strConfigLeftDisplayTableFilterMinimum_name = __('Minimum number of tables to display the table filter box');$strConfigLeftFrameDBSeparator_desc = __('String that separates databases into different tree levels');$strConfigLeftFrameDBSeparator_name = __('Database tree separator');$strConfigLeftFrameDBTree_desc = __('Only light version; display databases in a tree (determined by the separator defined below)');$strConfigLeftFrameDBTree_name = __('Display databases in a tree');$strConfigLeftFrameLight_desc = __('Disable this if you want to see all databases at once');$strConfigLeftFrameLight_name = __('Use light version');$strConfigLeftFrameTableLevel_name = __('Maximum table tree depth');$strConfigLeftFrameTableSeparator_desc = __('String that separates tables into different tree levels');$strConfigLeftFrameTableSeparator_name = __('Table tree separator');$strConfigLeftLogoLink_desc = __('URL where logo in the navigation frame will point to');$strConfigLeftLogoLink_name = __('Logo link URL');$strConfigLeftLogoLinkWindow_desc = __('Open the linked page in the main window ([kbd]main[/kbd]) or in a new one ([kbd]new[/kbd])');$strConfigLeftLogoLinkWindow_name = __('Logo link target');$strConfigLeftPointerEnable_desc = __('Highlight server under the mouse cursor');$strConfigLeftPointerEnable_name = __('Enable highlighting');$strConfigLeftRecentTable_desc = __('Maximum number of recently used tables; set 0 to disable');$strConfigLeftRecentTable_name = __('Recently used tables');$strConfigLightTabs_desc = __('Use less graphically intense tabs');$strConfigLightTabs_name = __('Light tabs');$strConfigLimitChars_desc = __('Maximum number of characters shown in any non-numeric column on browse view');$strConfigLimitChars_name = __('Limit column characters');$strConfigLoginCookieDeleteAll_desc = __('If TRUE, logout deletes cookies for all servers; when set to FALSE, logout only occurs for the current server. Setting this to FALSE makes it easy to forget to log out from other servers when connected to multiple servers.');$strConfigLoginCookieDeleteAll_name = __('Delete all cookies on logout');$strConfigLoginCookieRecall_desc = __('Define whether the previous login should be recalled or not in cookie authentication mode');$strConfigLoginCookieRecall_name = __('Recall user name');$strConfigLoginCookieStore_desc = __('Defines how long (in seconds) a login cookie should be stored in browser. The default of 0 means that it will be kept for the existing session only, and will be deleted as soon as you close the browser window. This is recommended for non-trusted environments.');$strConfigLoginCookieStore_name = __('Login cookie store');$strConfigLoginCookieValidity_desc = __('Define how long (in seconds) a login cookie is valid');$strConfigLoginCookieValidity_name = __('Login cookie validity');$strConfigLongtextDoubleTextarea_desc = __('Double size of textarea for LONGTEXT columns');$strConfigLongtextDoubleTextarea_name = __('Bigger textarea for LONGTEXT');$strConfigMainPageIconic_name = __('Use icons on main page');$strConfigMaxCharactersInDisplayedSQL_desc = __('Maximum number of characters used when a SQL query is displayed');$strConfigMaxCharactersInDisplayedSQL_name = __('Maximum displayed SQL length');$strConfigMaxDbList_cmt = __('Users cannot set a higher value');$strConfigMaxDbList_desc = __('Maximum number of databases displayed in left frame and database list');$strConfigMaxDbList_name = __('Maximum databases');$strConfigMaxRows_desc = __('Number of rows displayed when browsing a result set. If the result set contains more rows, &quot;Previous&quot; and &quot;Next&quot; links will be shown.');$strConfigMaxRows_name = __('Maximum number of rows to display');$strConfigMaxTableList_cmt = __('Users cannot set a higher value');$strConfigMaxTableList_desc = __('Maximum number of tables displayed in table list');$strConfigMaxTableList_name = __('Maximum tables');$strConfigMcryptDisableWarning_desc = __('Disable the default warning that is displayed if mcrypt is missing for cookie authentication');$strConfigMcryptDisableWarning_name = __('mcrypt warning');$strConfigMemoryLimit_desc = __('The number of bytes a script is allowed to allocate, eg. [kbd]32M[/kbd] ([kbd]0[/kbd] for no limit)');$strConfigMemoryLimit_name = __('Memory limit');$strConfigRowActionLinks_desc = __('These are Edit, Copy and Delete links');$strConfigRowActionLinks_name = __('Where to show the table row links');$strConfigNaturalOrder_desc = __('Use natural order for sorting table and database names');$strConfigNaturalOrder_name = __('Natural order');$strConfigNavigationBarIconic_desc = __('Use only icons, only text or both');$strConfigNavigationBarIconic_name = __('Iconic navigation bar');$strConfigOBGzip_desc = __('use GZip output buffering for increased speed in HTTP transfers');$strConfigOBGzip_name = __('GZip output buffering');$strConfigOrder_desc = __('[kbd]SMART[/kbd] - i.e. descending order for columns of type TIME, DATE, DATETIME and TIMESTAMP, ascending order otherwise');$strConfigOrder_name = __('Default sorting order');$strConfigPersistentConnections_desc = __('Use persistent connections to MySQL databases');$strConfigPersistentConnections_name = __('Persistent connections');$strConfigPmaNoRelation_DisableWarning_desc = __('Disable the default warning that is displayed on the database details Structure page if any of the required tables for the phpMyAdmin configuration storage could not be found');$strConfigPmaNoRelation_DisableWarning_name = __('Missing phpMyAdmin configuration storage tables');$strConfigPropertiesIconic_desc = __('Use only icons, only text or both');$strConfigPropertiesIconic_name = __('Iconic table operations');$strConfigProtectBinary_desc = __('Disallow BLOB and BINARY columns from editing');$strConfigProtectBinary_name = __('Protect binary columns');$strConfigQueryHistoryDB_desc = __('Enable if you want DB-based query history (requires phpMyAdmin configuration storage). If disabled, this utilizes JS-routines to display query history (lost by window close).');$strConfigQueryHistoryDB_name = __('Permanent query history');$strConfigQueryHistoryMax_cmt = __('Users cannot set a higher value');$strConfigQueryHistoryMax_desc = __('How many queries are kept in history');$strConfigQueryHistoryMax_name = __('Query history length');$strConfigQueryWindowDefTab_desc = __('Tab displayed when opening a new query window');$strConfigQueryWindowDefTab_name = __('Default query window tab');$strConfigQueryWindowHeight_desc = __('Query window height (in pixels)');$strConfigQueryWindowHeight_name = __('Query window height');$strConfigQueryWindowWidth_desc = __('Query window width (in pixels)');$strConfigQueryWindowWidth_name = __('Query window width');$strConfigRecodingEngine_desc = __('Select which functions will be used for character set conversion');$strConfigRecodingEngine_name = __('Recoding engine');$strConfigRememberSorting_desc = __('When browsing tables, the sorting of each table is remembered');$strConfigRememberSorting_name = __('Remember table\'s sorting');$strConfigRepeatCells_desc = __('Repeat the headers every X cells, [kbd]0[/kbd] deactivates this feature');$strConfigRepeatCells_name = __('Repeat headers');$strConfigReplaceHelpImg_desc = __('Show help button instead of Documentation text');$strConfigReplaceHelpImg_name = __('Show help button');$strConfigRestoreDefaultValue = __('Restore default value');$strConfigSaveCellsAtOnce_name = __('Save all edited cells at once');$strConfigSaveDir_desc = __('Directory where exports can be saved on server');$strConfigSaveDir_name = __('Save directory');$strConfigServers_AllowDeny_order_desc = __('Leave blank if not used');$strConfigServers_AllowDeny_order_name = __('Host authorization order');$strConfigServers_AllowDeny_rules_desc = __('Leave blank for defaults');$strConfigServers_AllowDeny_rules_name = __('Host authorization rules');$strConfigServers_AllowNoPassword_name = __('Allow logins without a password');$strConfigServers_AllowRoot_name = __('Allow root login');$strConfigServers_auth_http_realm_desc = __('HTTP Basic Auth Realm name to display when doing HTTP Auth');$strConfigServers_auth_http_realm_name = __('HTTP Realm');$strConfigServers_auth_swekey_config_desc = __('The path for the config file for [a@http://swekey.com]SweKey hardware authentication[/a] (not located in your document root; suggested: /etc/swekey.conf)');$strConfigServers_auth_swekey_config_name = __('SweKey config file');$strConfigServers_auth_type_desc = __('Authentication method to use');$strConfigServers_auth_type_name = __('Authentication type');$strConfigServers_bookmarktable_desc = __('Leave blank for no [a@http://wiki.phpmyadmin.net/pma/bookmark]bookmark[/a] support, suggested: [kbd]pma_bookmark[/kbd]');$strConfigServers_bookmarktable_name = __('Bookmark table');$strConfigServers_column_info_desc = __('Leave blank for no column comments/mime types, suggested: [kbd]pma_column_info[/kbd]');$strConfigServers_column_info_name = __('Column information table');$strConfigServers_compress_desc = __('Compress connection to MySQL server');$strConfigServers_compress_name = __('Compress connection');$strConfigServers_connect_type_desc = __('How to connect to server, keep [kbd]tcp[/kbd] if unsure');$strConfigServers_connect_type_name = __('Connection type');$strConfigServers_controlpass_name = __('Control user password');$strConfigServers_controluser_desc = __('A special MySQL user configured with limited permissions, more information available on [a@http://wiki.phpmyadmin.net/pma/controluser]wiki[/a]');$strConfigServers_controluser_name = __('Control user');$strConfigServers_controlhost_desc = __('An alternate host to hold the configuration storage; leave blank to use the already defined host');$strConfigServers_controlhost_name = __('Control host');$strConfigServers_CountTables_desc = __('Count tables when showing database list');$strConfigServers_CountTables_name = __('Count tables');$strConfigServers_designer_coords_desc = __('Leave blank for no Designer support, suggested: [kbd]pma_designer_coords[/kbd]');$strConfigServers_designer_coords_name = __('Designer table');$strConfigServers_DisableIS_desc = __('More information on [a@http://sf.net/support/tracker.php?aid=1849494]PMA bug tracker[/a] and [a@http://bugs.mysql.com/19588]MySQL Bugs[/a]');$strConfigServers_DisableIS_name = __('Disable use of INFORMATION_SCHEMA');$strConfigServers_extension_desc = __('What PHP extension to use; you should use mysqli if supported');$strConfigServers_extension_name = __('PHP extension to use');$strConfigServers_hide_db_desc = __('Hide databases matching regular expression (PCRE)');$strConfigServers_hide_db_name = __('Hide databases');$strConfigServers_history_desc = __('Leave blank for no SQL query history support, suggested: [kbd]pma_history[/kbd]');$strConfigServers_history_name = __('SQL query history table');$strConfigServers_host_desc = __('Hostname where MySQL server is running');$strConfigServers_host_name = __('Server hostname');$strConfigServers_LogoutURL_name = __('Logout URL');$strConfigServers_MaxTableUiprefs_desc = __('Limits number of table preferences which are stored in database, the oldest records are automatically removed');$strConfigServers_MaxTableUiprefs_name = __('Maximal number of table preferences to store');$strConfigServers_nopassword_desc = __('Try to connect without password');$strConfigServers_nopassword_name = __('Connect without password');$strConfigServers_only_db_desc = __('You can use MySQL wildcard characters (% and _), escape them if you want to use their literal instances, i.e. use [kbd]\'my\_db\'[/kbd] and not [kbd]\'my_db\'[/kbd]. Using this option you can sort database list, just enter their names in order and use [kbd]*[/kbd] at the end to show the rest in alphabetical order.');$strConfigServers_only_db_name = __('Show only listed databases');$strConfigServers_password_desc = __('Leave empty if not using config auth');$strConfigServers_password_name = __('Password for config auth');$strConfigServers_pdf_pages_desc = __('Leave blank for no PDF schema support, suggested: [kbd]pma_pdf_pages[/kbd]');$strConfigServers_pdf_pages_name = __('PDF schema: pages table');$strConfigServers_pmadb_desc = __('Database used for relations, bookmarks, and PDF features. See [a@http://wiki.phpmyadmin.net/pma/pmadb]pmadb[/a] for complete information. Leave blank for no support. Suggested: [kbd]phpmyadmin[/kbd]');$strConfigServers_pmadb_name = __('Database name');$strConfigServers_port_desc = __('Port on which MySQL server is listening, leave empty for default');$strConfigServers_port_name = __('Server port');$strConfigServers_recent_desc = __('Leave blank for no "persistent" recently used tables across sessions, suggested: [kbd]pma_recent[/kbd]');$strConfigServers_recent_name = __('Recently used table');$strConfigServers_relation_desc = __('Leave blank for no [a@http://wiki.phpmyadmin.net/pma/relation]relation-links[/a] support, suggested: [kbd]pma_relation[/kbd]');$strConfigServers_relation_name = __('Relation table');$strConfigServers_ShowDatabasesCommand_desc = __('SQL command to fetch available databases');$strConfigServers_ShowDatabasesCommand_name = __('SHOW DATABASES command');$strConfigServers_SignonSession_desc = __('See [a@http://wiki.phpmyadmin.net/pma/auth_types#signon]authentication types[/a] for an example');$strConfigServers_SignonSession_name = __('Signon session name');$strConfigServers_SignonURL_name = __('Signon URL');$strConfigServers_socket_desc = __('Socket on which MySQL server is listening, leave empty for default');$strConfigServers_socket_name = __('Server socket');$strConfigServers_ssl_desc = __('Enable SSL for connection to MySQL server');$strConfigServers_ssl_name = __('Use SSL');$strConfigServers_table_coords_desc = __('Leave blank for no PDF schema support, suggested: [kbd]pma_table_coords[/kbd]');$strConfigServers_table_coords_name = __('PDF schema: table coordinates');$strConfigServers_table_info_desc = __('Table to describe the display columns, leave blank for no support; suggested: [kbd]pma_table_info[/kbd]');$strConfigServers_table_info_name = __('Display columns table');$strConfigServers_table_uiprefs_desc = __('Leave blank for no "persistent" tables\'UI preferences across sessions, suggested: [kbd]pma_table_uiprefs[/kbd]');$strConfigServers_table_uiprefs_name = __('UI preferences table');$strConfigServers_tracking_add_drop_database_desc = __('Whether a DROP DATABASE IF EXISTS statement will be added as first line to the log when creating a database.');$strConfigServers_tracking_add_drop_database_name = __('Add DROP DATABASE');$strConfigServers_tracking_add_drop_table_desc = __('Whether a DROP TABLE IF EXISTS statement will be added as first line to the log when creating a table.');$strConfigServers_tracking_add_drop_table_name = __('Add DROP TABLE');$strConfigServers_tracking_add_drop_view_desc = __('Whether a DROP VIEW IF EXISTS statement will be added as first line to the log when creating a view.');$strConfigServers_tracking_add_drop_view_name = __('Add DROP VIEW');$strConfigServers_tracking_default_statements_desc = __('Defines the list of statements the auto-creation uses for new versions.');$strConfigServers_tracking_default_statements_name = __('Statements to track');$strConfigServers_tracking_desc = __('Leave blank for no SQL query tracking support, suggested: [kbd]pma_tracking[/kbd]');$strConfigServers_tracking_name = __('SQL query tracking table');$strConfigServers_tracking_version_auto_create_desc = __('Whether the tracking mechanism creates versions for tables and views automatically.');$strConfigServers_tracking_version_auto_create_name = __('Automatically create versions');$strConfigServers_userconfig_desc = __('Leave blank for no user preferences storage in database, suggested: [kbd]pma_userconfig[/kbd]');$strConfigServers_userconfig_name = __('User preferences storage table');$strConfigServers_user_desc = __('Leave empty if not using config auth');$strConfigServers_user_name = __('User for config auth');$strConfigServers_verbose_check_desc = __('Disable if you know that your pma_* tables are up to date. This prevents compatibility checks and thereby increases performance');$strConfigServers_verbose_check_name = __('Verbose check');$strConfigServers_verbose_desc = __('A user-friendly description of this server. Leave blank to display the hostname instead.');$strConfigServers_verbose_name = __('Verbose name of this server');$strConfigShowAll_desc = __('Whether a user should be displayed a &quot;show all (rows)&quot; button');$strConfigShowAll_name = __('Allow to display all the rows');$strConfigShowChgPassword_desc = __('Please note that enabling this has no effect with [kbd]config[/kbd] authentication mode because the password is hard coded in the configuration file; this does not limit the ability to execute the same command directly');$strConfigShowChgPassword_name = __('Show password change form');$strConfigShowCreateDb_name = __('Show create database form');$strConfigShowDisplayDirection_desc = __('Defines whether or not type display direction option is shown when browsing a table');$strConfigShowDisplayDirection_name = __('Show display direction');$strConfigShowFieldTypesInDataEditView_desc = __('Defines whether or not type fields should be initially displayed in edit/insert mode');$strConfigShowFieldTypesInDataEditView_name = __('Show field types');$strConfigShowFunctionFields_desc = __('Display the function fields in edit/insert mode');$strConfigShowFunctionFields_name = __('Show function fields');$strConfigShowHint_desc = __('Whether to show hint or not');$strConfigShowHint_name = __('Show hint');$strConfigShowPhpInfo_desc = __('Shows link to [a@http://php.net/manual/function.phpinfo.php]phpinfo()[/a] output');$strConfigShowPhpInfo_name = __('Show phpinfo() link');$strConfigShowServerInfo_name = __('Show detailed MySQL server information');$strConfigShowSQL_desc = __('Defines whether SQL queries generated by phpMyAdmin should be displayed');$strConfigShowSQL_name = __('Show SQL queries');$strConfigRetainQueryBox_desc = __('Defines whether the query box should stay on-screen after its submission');$strConfigRetainQueryBox_name = __('Retain query box');$strConfigShowStats_desc = __('Allow to display database and table statistics (eg. space usage)');$strConfigShowStats_name = __('Show statistics');$strConfigShowTooltipAliasDB_desc = __('If tooltips are enabled and a database comment is set, this will flip the comment and the real name');$strConfigShowTooltipAliasDB_name = __('Display database comment instead of its name');$strConfigShowTooltipAliasTB_desc = __('When setting this to [kbd]nested[/kbd], the alias of the table name is only used to split/nest the tables according to the $cfg[\'LeftFrameTableSeparator\'] directive, so only the folder is called like the alias, the table name itself stays unchanged');$strConfigShowTooltipAliasTB_name = __('Display table comment instead of its name');$strConfigShowTooltip_name = __('Display table comments in tooltips');$strConfigSkipLockedTables_desc = __('Mark used tables and make it possible to show databases with locked tables');$strConfigSkipLockedTables_name = __('Skip locked tables');$strConfigSQLQuery_Edit_name = __('Edit');$strConfigSQLQuery_Explain_name = __('Explain SQL');$strConfigSQLQuery_Refresh_name = __('Refresh');$strConfigSQLQuery_ShowAsPHP_name = __('Create PHP Code');$strConfigSQLQuery_Validate_desc = __('Requires SQL Validator to be enabled');$strConfigSQLQuery_Validate_name = __('Validate SQL');$strConfigSQLValidator_password_name = __('Password');$strConfigSQLValidator_use_desc = __('[strong]Warning:[/strong] requires PHP SOAP extension or PEAR SOAP to be installed');$strConfigSQLValidator_use_name = __('Enable SQL Validator');$strConfigSQLValidator_username_desc = __('If you have a custom username, specify it here (defaults to [kbd]anonymous[/kbd])');$strConfigSQLValidator_username_name = __('Username');$strConfigSuggestDBName_desc = __('Suggest a database name on the &quot;Create Database&quot; form (if possible) or keep the text field empty');$strConfigSuggestDBName_name = __('Suggest new database name');$strConfigSuhosinDisableWarning_desc = __('A warning is displayed on the main page if Suhosin is detected');$strConfigSuhosinDisableWarning_name = __('Suhosin warning');$strConfigTextareaCols_desc = __('Textarea size (columns) in edit mode, this value will be emphasized for SQL query textareas (*2) and for query window (*1.25)');$strConfigTextareaCols_name = __('Textarea columns');$strConfigTextareaRows_desc = __('Textarea size (rows) in edit mode, this value will be emphasized for SQL query textareas (*2) and for query window (*1.25)');$strConfigTextareaRows_name = __('Textarea rows');$strConfigTitleDatabase_desc = __('Title of browser window when a database is selected');$strConfigTitleDatabase_name = __('Database');$strConfigTitleDefault_desc = __('Title of browser window when nothing is selected');$strConfigTitleDefault_name = __('Default title');$strConfigTitleServer_desc = __('Title of browser window when a server is selected');$strConfigTitleServer_name = __('Server');$strConfigTitleTable_desc = __('Title of browser window when a table is selected');$strConfigTitleTable_name = __('Table');$strConfigTrustedProxies_desc = __('Input proxies as [kbd]IP: trusted HTTP header[/kbd]. The following example specifies that phpMyAdmin should trust a HTTP_X_FORWARDED_FOR (X-Forwarded-For) header coming from the proxy 1.2.3.4:[br][kbd]1.2.3.4: HTTP_X_FORWARDED_FOR[/kbd]');$strConfigTrustedProxies_name = __('List of trusted proxies for IP allow/deny');$strConfigUploadDir_desc = __('Directory on server where you can upload files for import');$strConfigUploadDir_name = __('Upload directory');$strConfigUseDbSearch_desc = __('Allow for searching inside the entire database');$strConfigUseDbSearch_name = __('Use database search');$strConfigUserprefsDeveloperTab_desc = __('When disabled, users cannot set any of the options below, regardless of the checkbox on the right');$strConfigUserprefsDeveloperTab_name = __('Enable the Developer tab in settings');$strConfigVerboseMultiSubmit_desc = __('Show affected rows of each statement on multiple-statement queries. See libraries/import.lib.php for defaults on how many queries a statement may contain.');$strConfigVerboseMultiSubmit_name = __('Verbose multiple statements');$strConfigVersionCheckLink = __('Check for latest version');$strConfigVersionCheck_desc = __('Enables check for latest version on main phpMyAdmin page');$strConfigVersionCheck_name = __('Version check');$strConfigZipDump_desc = __('Enable [a@http://en.wikipedia.org/wiki/ZIP_(file_format)]ZIP[/a] compression for import and export operations');$strConfigZipDump_name = __('ZIP');?>
<?php/** * @package Swekey */?><script>	var g_SwekeyPlugin = null;	// -------------------------------------------------------------------	// Create the swekey plugin if it does not exists	function Swekey_Plugin()	{		try		{			if (g_SwekeyPlugin != null)				return g_SwekeyPlugin;			if (window.ActiveXObject)			{    			g_SwekeyPlugin = document.getElementById("swekey_activex");    			if (g_SwekeyPlugin == null)    			{                    // we must create the activex that way instead of new ActiveXObject("FbAuthAx.FbAuthCtl");                    // ortherwise SetClientSite is not called and we can not get the url  			  		var div = document.createElement('div');	   				div.innerHTML='<object id="swekey_activex" style="display:none" CLASSID="CLSID:8E02E3F9-57AA-4EE1-AA68-A42DD7B0FADE"></object>';    				// Never append to the body because it may still loading and it breaks IE	   				document.body.insertBefore(div, document.body.firstChild);    				g_SwekeyPlugin = document.getElementById("swekey_activex");                }				return g_SwekeyPlugin;			}			g_SwekeyPlugin = document.getElementById("swekey_plugin");			if (g_SwekeyPlugin != null)				return g_SwekeyPlugin;			for (i = 0; i < navigator.plugins.length; i ++)			{				try				{				    if (navigator.plugins[i] == null)				    {				        navigator.plugins.refresh();                    }                    else if (navigator.plugins[i][0] != null && navigator.plugins[i][0].type == "application/fbauth-plugin")					{						var x = document.createElement('embed');						x.setAttribute('type', 'application/fbauth-plugin');						x.setAttribute('id', 'swekey_plugin');						x.setAttribute('width', '0');						x.setAttribute('height', '0');						x.style.dislay='none';						//document.body.appendChild(x);						document.body.insertBefore(x, document.body.firstChild);						g_SwekeyPlugin = document.getElementById("swekey_plugin");						return g_SwekeyPlugin;					}				}				catch (e)				{				    navigator.plugins.refresh();					//alert ('Failed to create plugin: ' + e);				}			}		}		catch (e)		{			//alert("Swekey_Plugin " + e);			g_SwekeyPlugin = null;		}		return null;	}	// -------------------------------------------------------------------	// Returns true if the swekey plugin is installed	function Swekey_Installed()	{		return (Swekey_Plugin() != null);	}	// -------------------------------------------------------------------	// List the id of the Swekey connected to the PC	// Returns a string containing comma separated Swekey Ids    // A Swekey is a 32 char hexadecimal value.	function Swekey_ListKeyIds()	{		try		{			return Swekey_Plugin().list();		}		catch (e)		{//			alert("Swekey_ListKeyIds " + e);		}		return "";	}	// -------------------------------------------------------------------	// Ask the Connected Swekey to generate an OTP	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// rt: A random token	// return: The calculated OTP encoded in a 64 chars hexadecimal value.	function Swekey_GetOtp(id, rt)	{		try		{			return Swekey_Plugin().getotp(id, rt);		}		catch (e)		{//			alert("Swekey_GetOtp " + e);		}		return "";	}	// -------------------------------------------------------------------	// Ask the Connected Swekey to generate a OTP linked to the current https host	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// rt: A random token	// return: The calculated OTP encoded in a 64 chars hexadecimal value.	// or "" if the current url does not start with https	function Swekey_GetLinkedOtp(id, rt)	{		try		{			return Swekey_Plugin().getlinkedotp(id, rt);		}		catch (e)		{//			alert("Swekey_GetSOtp " + e);		}		return "";	}	// -------------------------------------------------------------------    // Calls Swekey_GetOtp or Swekey_GetLinkedOtp depending if we are in    // an https page or not.	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// rt: A random token	// return: The calculated OTP encoded in a 64 chars hexadecimal value.	function Swekey_GetSmartOtp(id, rt)	{        var res = Swekey_GetLinkedOtp(id, rt);        if (res == "")            res = Swekey_GetOtp(id, rt);		return res;	}	// -------------------------------------------------------------------	// Set a unplug handler (url) to the specified connected feebee	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// key: The key that index that url, (aplhanumeric values only)	// url: The url that will be launched ("" deletes the url)	function Swekey_SetUnplugUrl(id, key, url)	{		try		{			return Swekey_Plugin().setunplugurl(id, key, url);		}		catch (e)		{//			alert("Swekey_SetUnplugUrl " + e);		}	}</script>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * searchs the entire database * * @todo    make use of UNION when searching multiple tables * @todo    display executed query, optional? * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'db_search.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';/** * Gets some core libraries and send headers */require './libraries/db_common.inc.php';/** * init */// If config variable $GLOBALS['cfg']['Usedbsearch'] is on false : exit.if (! $GLOBALS['cfg']['UseDbSearch']) {    PMA_mysqlDie(__('Access denied'), '', false, $err_url);} // end if$url_query .= '&amp;goto=db_search.php';$url_params['goto'] = 'db_search.php';/** * @global array list of tables from the current database * but do not clash with $tables coming from db_info.inc.php */$tables_names_only = PMA_DBI_get_tables($GLOBALS['db']);$search_options = array(    '1' => __('at least one of the words'),    '2' => __('all words'),    '3' => __('the exact phrase'),    '4' => __('as regular expression'),);if (empty($_REQUEST['search_option']) || ! is_string($_REQUEST['search_option']) || ! array_key_exists($_REQUEST['search_option'], $search_options)) {    $search_option = 1;    unset($_REQUEST['submit_search']);} else {    $search_option = (int) $_REQUEST['search_option'];    $option_str = $search_options[$_REQUEST['search_option']];}if (empty($_REQUEST['search_str']) || ! is_string($_REQUEST['search_str'])) {    unset($_REQUEST['submit_search']);    $searched = '';} else {    $searched = htmlspecialchars($_REQUEST['search_str']);    // For "as regular expression" (search option 4), we should not treat    // this as an expression that contains a LIKE (second parameter of    // PMA_sqlAddSlashes()).    //    // Usage example: If user is seaching for a literal $ in a regexp search,    // he should enter \$ as the value.    $search_str = PMA_sqlAddSlashes($_REQUEST['search_str'], ($search_option == 4 ? false : true));}$tables_selected = array();if (empty($_REQUEST['table_select']) || ! is_array($_REQUEST['table_select'])) {    unset($_REQUEST['submit_search']);} elseif (! isset($_REQUEST['selectall']) && ! isset($_REQUEST['unselectall'])) {    $tables_selected = array_intersect($_REQUEST['table_select'], $tables_names_only);}if (isset($_REQUEST['selectall'])) {    $tables_selected = $tables_names_only;} elseif (isset($_REQUEST['unselectall'])) {    $tables_selected = array();}if (empty($_REQUEST['field_str']) || ! is_string($_REQUEST['field_str'])) {    unset($field_str);} else {    $field_str = PMA_sqlAddSlashes($_REQUEST['field_str'], true);}/** * Displays top links if we are not in an Ajax request */$sub_part = '';if ( $GLOBALS['is_ajax_request'] != true) {    include './libraries/db_info.inc.php';    echo '<div id="searchresults">';}/** * 1. Main search form has been submitted */if (isset($_REQUEST['submit_search'])) {    /**     * Builds the SQL search query     *     * @todo    can we make use of fulltextsearch IN BOOLEAN MODE for this?     * PMA_backquote     * PMA_DBI_free_result     * PMA_DBI_fetch_assoc     * $GLOBALS['db']     * explode     * count     * strlen     * @param string   the table name     * @param string   restrict the search to this field     * @param string   the string to search     * @param integer  type of search (1 -> 1 word at least, 2 -> all words,     *                                   3 -> exact string, 4 -> regexp)     *     * @return  array    3 SQL querys (for count, display and delete results)     */    function PMA_getSearchSqls($table, $field, $search_str, $search_option)    {        // Statement types        $sqlstr_select = 'SELECT';        $sqlstr_delete = 'DELETE';        // Fields to select        $tblfields = PMA_DBI_get_columns($GLOBALS['db'], $table);        // Table to use        $sqlstr_from = ' FROM ' . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($table);        $search_words    = (($search_option > 2) ? array($search_str) : explode(' ', $search_str));        $like_or_regex   = (($search_option == 4) ? 'REGEXP' : 'LIKE');        $automatic_wildcard   = (($search_option < 3) ? '%' : '');        $fieldslikevalues = array();        foreach ($search_words as $search_word) {            // Eliminates empty values            if (strlen($search_word) === 0) {                continue;            }            $thefieldlikevalue = array();            foreach ($tblfields as $tblfield) {                if (! isset($field) || strlen($field) == 0 || $tblfield['Field'] == $field) {                    // Drizzle has no CONVERT and all text columns are UTF-8                    if (PMA_DRIZZLE) {                        $thefieldlikevalue[] = PMA_backquote($tblfield['Field'])                                            . ' ' . $like_or_regex . ' '                                            . "'" . $automatic_wildcard                                            . $search_word                                            . $automatic_wildcard . "'";                    } else {                        $thefieldlikevalue[] = 'CONVERT(' . PMA_backquote($tblfield['Field']) . ' USING utf8)'                                            . ' ' . $like_or_regex . ' '                                            . "'" . $automatic_wildcard                                            . $search_word                                            . $automatic_wildcard . "'";                    }                }            } // end for            if (count($thefieldlikevalue) > 0) {                $fieldslikevalues[]      = implode(' OR ', $thefieldlikevalue);            }        } // end for        $implode_str  = ($search_option == 1 ? ' OR ' : ' AND ');        if ( empty($fieldslikevalues)) {            // this could happen when the "inside field" does not exist            // in any selected tables            $sqlstr_where = ' WHERE FALSE';        } else {            $sqlstr_where = ' WHERE (' . implode(') ' . $implode_str . ' (', $fieldslikevalues) . ')';        }        unset($fieldslikevalues);        // Builds complete queries        $sql['select_fields'] = $sqlstr_select . ' * ' . $sqlstr_from . $sqlstr_where;        // here, I think we need to still use the COUNT clause, even for        // VIEWs, anyway we have a WHERE clause that should limit results        $sql['select_count']  = $sqlstr_select . ' COUNT(*) AS `count`' . $sqlstr_from . $sqlstr_where;        $sql['delete']        = $sqlstr_delete . $sqlstr_from . $sqlstr_where;        return $sql;    } // end of the "PMA_getSearchSqls()" function    /**     * Displays the results     */    $this_url_params = array(        'db'    => $GLOBALS['db'],        'goto'  => 'db_sql.php',        'pos'   => 0,        'is_js_confirmed' => 0,    );    // Displays search string    echo '<br />' . "\n"        .'<table class="data">' . "\n"        .'<caption class="tblHeaders">' . "\n"        .sprintf(__('Search results for "<i>%s</i>" %s:'),            $searched, $option_str) . "\n"        .'</caption>' . "\n";    $num_search_result_total = 0;    $odd_row = true;    foreach ($tables_selected as $each_table) {        // Gets the SQL statements        $newsearchsqls = PMA_getSearchSqls($each_table, (! empty($field_str) ? $field_str : ''), $search_str, $search_option);        // Executes the "COUNT" statement        $res_cnt = PMA_DBI_fetch_value($newsearchsqls['select_count']);        $num_search_result_total += $res_cnt;        $sql_query .= $newsearchsqls['select_count'];        echo '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">'            .'<td>' . sprintf(_ngettext('%s match inside table <i>%s</i>', '%s matches inside table <i>%s</i>', $res_cnt), $res_cnt,                htmlspecialchars($each_table)) . "</td>\n";        if ($res_cnt > 0) {            $this_url_params['sql_query'] = $newsearchsqls['select_fields'];             $browse_result_path = 'sql.php' . PMA_generate_common_url($this_url_params);             ?>            <td> <a name="browse_search" href="<?php echo $browse_result_path; ?>" onclick="loadResult('<?php echo $browse_result_path ?> ',' <?php echo  $each_table?> ' , '<?php echo PMA_generate_common_url($GLOBALS['db'], $each_table)?>','<?php echo ($GLOBALS['cfg']['AjaxEnable']); ?>');return false;" ><?php echo __('Browse') ?></a>   </td>            <?php            $this_url_params['sql_query'] = $newsearchsqls['delete'];            $delete_result_path = 'sql.php' . PMA_generate_common_url($this_url_params);            ?>            <td> <a name="delete_search" href="<?php echo $delete_result_path; ?>" onclick="deleteResult('<?php echo $delete_result_path ?>' , ' <?php printf(__('Delete the matches for the %s table?'), htmlspecialchars($each_table)); ?>','<?php echo ($GLOBALS['cfg']['AjaxEnable']); ?>');return false;" ><?php echo __('Delete') ?></a>   </td>            <?php         } else {            echo '<td>&nbsp;</td>' . "\n"                .'<td>&nbsp;</td>' . "\n";        }// end if else        $odd_row = ! $odd_row;        echo '</tr>' . "\n";    } // end for    echo '</table>' . "\n";    if (count($tables_selected) > 1) {        echo '<p>' . sprintf(_ngettext('<b>Total:</b> <i>%s</i> match', '<b>Total:</b> <i>%s</i> matches', $num_search_result_total),            $num_search_result_total) . '</p>' . "\n";    }} // end 1./** * If we are in an Ajax request, we need to exit after displaying all the HTML */if ($GLOBALS['is_ajax_request'] == true) {    exit;} else {    echo '</div>';//end searchresults div}/** * 2. Displays the main search form */?><a name="db_search"></a><form id="db_search_form"<?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?> method="post" action="db_search.php" name="db_search"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db']); ?><fieldset>    <legend><?php echo __('Search in database'); ?></legend>    <table class="formlayout">    <tr><td><?php echo __('Words or values to search for (wildcard: "%"):'); ?></td>        <td><input type="text" name="search_str" size="60"                value="<?php echo $searched; ?>" /></td>    </tr>    <tr><td align="right" valign="top">            <?php echo __('Find:'); ?></td>            <td><?php$choices = array(    '1' => __('at least one of the words') . PMA_showHint(__('Words are separated by a space character (" ").')),    '2' => __('all words') . PMA_showHint(__('Words are separated by a space character (" ").')),    '3' => __('the exact phrase'),    '4' => __('as regular expression') . ' ' . PMA_showMySQLDocu('Regexp', 'Regexp'));// 4th parameter set to true to add line breaks// 5th parameter set to false to avoid htmlspecialchars() escaping in the label//  since we have some HTML in some labelsPMA_display_html_radio('search_option', $choices, $search_option, true, false);unset($choices);            ?>            </td>    </tr>    <tr><td align="right" valign="top">            <?php echo __('Inside tables:'); ?></td>        <td rowspan="2"><?phpecho '            <select name="table_select[]" size="6" multiple="multiple">' . "\n";foreach ($tables_names_only as $each_table) {    if (in_array($each_table, $tables_selected)) {        $is_selected = ' selected="selected"';    } else {        $is_selected = '';    }    echo '                <option value="' . htmlspecialchars($each_table) . '"'        . $is_selected . '>'        . str_replace(' ', '&nbsp;', htmlspecialchars($each_table)) . '</option>' . "\n";} // end whileecho '            </select>' . "\n";$alter_select    = '<a href="db_search.php' . PMA_generate_common_url(array_merge($url_params, array('selectall' => 1))) . '#db_search"'    . ' onclick="setSelectOptions(\'db_search\', \'table_select[]\', true); return false;">' . __('Select All') . '</a>'    . '&nbsp;/&nbsp;'    . '<a href="db_search.php' . PMA_generate_common_url(array_merge($url_params, array('unselectall' => 1))) . '#db_search"'    . ' onclick="setSelectOptions(\'db_search\', \'table_select[]\', false); return false;">' . __('Unselect All') . '</a>';?>        </td>    </tr>    <tr><td align="right" valign="bottom">            <?php echo $alter_select; ?></td>    </tr>    <tr><td align="right">            <?php echo __('Inside column:'); ?></td>        <td><input type="text" name="field_str" size="60"                value="<?php echo ! empty($field_str) ? htmlspecialchars($field_str) : ''; ?>" /></td>    </tr>    </table></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_search" value="<?php echo __('Go'); ?>"        id="buttonGo" /></fieldset></form><!-- These two table-image and table-link elements display the table name in browse search results  --><div id='table-info'><a class="item" id="table-link" ></a></div><div id="browse-results"><!-- this browse-results div is used to load the browse and delete results in the db search --></div><br class="clearfloat" /><div id="sqlqueryform"><!-- this sqlqueryform div is used to load the delete form in the db search --></div><!--  toggle query box link--><a id="togglequerybox"></a><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';extract($_POST, EXTR_SKIP);extract($_GET, EXTR_SKIP);$die_save_pos = 0;require_once 'pmd_save_pos.php';list($DB1, $T1) = explode(".", $T1);list($DB2, $T2) = explode(".", $T2);$tables = PMA_DBI_get_tables_full($db, $T1);$type_T1 = strtoupper($tables[$T1]['ENGINE']);$tables = PMA_DBI_get_tables_full($db, $T2);$type_T2 = strtoupper($tables[$T2]['ENGINE']);$try_to_delete_internal_relation = false;if (PMA_foreignkey_supported($type_T1) && PMA_foreignkey_supported($type_T2) && $type_T1 == $type_T2) {    // InnoDB    $existrel_foreign = PMA_getForeigners($DB2, $T2, '', 'foreign');    if (isset($existrel_foreign[$F2]['constraint'])) {        $upd_query  = 'ALTER TABLE ' . PMA_backquote($T2)                  . ' DROP FOREIGN KEY '                  . PMA_backquote($existrel_foreign[$F2]['constraint']);        $upd_rs     = PMA_DBI_query($upd_query);    } else {        // there can be an internal relation even if InnoDB        $try_to_delete_internal_relation = true;    }} else {    $try_to_delete_internal_relation = true;}if ($try_to_delete_internal_relation) {    // internal relations    PMA_query_as_controluser(        'DELETE FROM '        . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'        . $cfg['Server']['relation'].' WHERE '        . 'master_db = \'' . PMA_sqlAddSlashes($DB2) . '\''        . ' AND master_table = \'' . PMA_sqlAddSlashes($T2) . '\''        . ' AND master_field = \'' . PMA_sqlAddSlashes($F2) . '\''        . ' AND foreign_db = \'' . PMA_sqlAddSlashes($DB1) . '\''        . ' AND foreign_table = \'' . PMA_sqlAddSlashes($T1) . '\''        . ' AND foreign_field = \'' . PMA_sqlAddSlashes($F1) . '\'',        false,        PMA_DBI_QUERY_STORE    );}PMD_return_upd(1, __('Relation deleted'));function PMD_return_upd($b, $ret){    global $K;    header("Content-Type: text/xml; charset=utf-8");    header("Cache-Control: no-cache");    die('<root act="relation_upd" return="'.$ret.'" b="'.$b.'" K="'.$K.'"></root>');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * List of avaible forms, each form is described as an array of fields to display. * Fields MUST have their counterparts in the $cfg array. * * There are two possible notations: * $forms['Form group']['Form name'] = array('Servers' => array(1 => array('host'))); * can be written as * $forms['Form group']['Form name'] = array('Servers/1/host'); * * You can assign default values set by special button ("set value: ..."), eg.: * 'Servers/1/pmadb' => 'phpmyadmin' * * To group options, use: * ':group:' . __('group name') // just define a group * or * 'option' => ':group' // group starting from this option * End group blocks with: * ':group:end' * * @package PhpMyAdmin-setup */$forms = array();$forms['_config.php'] = array(    'DefaultLang',    'ServerDefault');$forms['Servers']['Server'] = array('Servers' => array(1 => array(    'verbose',    'host',    'port',    'socket',    'ssl',    'connect_type',    'extension',    'compress',    'nopassword')));$forms['Servers']['Server_auth'] = array('Servers' => array(1 => array(    'auth_type',    ':group:' . __('Config authentication'),        'user',        'password',        ':group:end',    ':group:' . __('Cookie authentication'),        'auth_swekey_config' => './swekey.conf',        ':group:end',    ':group:' . __('HTTP authentication'),        'auth_http_realm',        ':group:end',    ':group:' . __('Signon authentication'),        'SignonSession',        'SignonURL',        'LogoutURL')));$forms['Servers']['Server_config'] = array('Servers' => array(1 => array(    'only_db',    'hide_db',    'AllowRoot',    'AllowNoPassword',    'DisableIS',    'AllowDeny/order',    'AllowDeny/rules',    'ShowDatabasesCommand',    'CountTables')));$forms['Servers']['Server_pmadb'] = array('Servers' => array(1 => array(    'pmadb' => 'phpmyadmin',    'controlhost',    'controluser',    'controlpass',    'verbose_check',    'bookmarktable' => 'pma_bookmark',    'relation' => 'pma_relation',    'userconfig' => 'pma_userconfig',    'table_info' => 'pma_table_info',    'column_info' => 'pma_column_info',    'history' => 'pma_history',    'recent' => 'pma_recent',    'table_uiprefs' => 'pma_table_uiprefs',    'tracking' => 'pma_tracking',    'table_coords' => 'pma_table_coords',    'pdf_pages' => 'pma_pdf_pages',    'designer_coords' => 'pma_designer_coords',    'MaxTableUiprefs' => 100)));$forms['Servers']['Server_tracking'] = array('Servers' => array(1 => array(    'tracking_version_auto_create',    'tracking_default_statements',    'tracking_add_drop_view',    'tracking_add_drop_table',    'tracking_add_drop_database',)));$forms['Features']['Import_export'] = array(    'UploadDir',    'SaveDir',    'RecodingEngine' => ':group',        'IconvExtraParams',        ':group:end',    'ZipDump',    'GZipDump',    'BZipDump',    'CompressOnFly');$forms['Features']['Security'] = array(    'blowfish_secret',    'ForceSSL',    'CheckConfigurationPermissions',    'TrustedProxies',    'AllowUserDropDatabase',    'AllowArbitraryServer',    'LoginCookieRecall',    'LoginCookieValidity',    'LoginCookieStore',    'LoginCookieDeleteAll');$forms['Features']['Page_titles'] = array(    'TitleDefault',    'TitleTable',    'TitleDatabase',    'TitleServer');$forms['Features']['Warnings'] = array(    'PmaNoRelation_DisableWarning',    'SuhosinDisableWarning',    'McryptDisableWarning');$forms['Features']['Developer'] = array(    'UserprefsDeveloperTab',    'Error_Handler/display',    'Error_Handler/gather',    'DBG/sql');$forms['Features']['Other_core_settings'] = array(    'AjaxEnable',    'VersionCheck',    'NaturalOrder',    'InitialSlidersState',    'ErrorIconic',    'ReplaceHelpImg',    'MaxDbList',    'MaxTableList',    'ShowHint',    'OBGzip',    'PersistentConnections',    'ExecTimeLimit',    'MemoryLimit',    'SkipLockedTables',    'DisableMultiTableMaintenance',    'UseDbSearch',    'AllowThirdPartyFraming');$forms['Sql_queries']['Sql_queries'] = array(    'ShowSQL',    'Confirm',    'QueryHistoryDB',    'QueryHistoryMax',    'IgnoreMultiSubmitErrors',    'VerboseMultiSubmit',    'MaxCharactersInDisplayedSQL',    'EditInWindow',    //'QueryWindowWidth', // overridden in theme    //'QueryWindowHeight',    'QueryWindowDefTab',    'RetainQueryBox');$forms['Sql_queries']['Sql_box'] = array('SQLQuery' => array(    'Edit',    'Explain',    'ShowAsPHP',    'Validate',    'Refresh'));$forms['Sql_queries']['Sql_validator'] = array('SQLValidator' => array(    'use',    'username',    'password'));$forms['Left_frame']['Left_frame'] = array(    'LeftFrameLight',    'LeftDisplayLogo',    'LeftLogoLink',    'LeftLogoLinkWindow',    'LeftPointerEnable',    'LeftRecentTable');$forms['Left_frame']['Left_servers'] = array(    'LeftDisplayServers',    'DisplayServersList');$forms['Left_frame']['Left_databases'] = array(    'DisplayDatabasesList',    'LeftFrameDBTree',    'LeftFrameDBSeparator',    'ShowTooltipAliasDB');$forms['Left_frame']['Left_tables'] = array(    'LeftDisplayTableFilterMinimum',    'LeftDefaultTabTable',    'LeftFrameTableSeparator',    'LeftFrameTableLevel',    'ShowTooltip',    'ShowTooltipAliasTB');$forms['Main_frame']['Startup'] = array(    'MainPageIconic',    'ShowCreateDb' => ':group',        'SuggestDBName',        ':group:end',    'ShowStats',    'ShowServerInfo',    'ShowPhpInfo',    'ShowChgPassword');$forms['Main_frame']['Browse'] = array(    'NavigationBarIconic',    'ShowAll',    'MaxRows',    'Order',    'BrowsePointerEnable',    'BrowseMarkerEnable',    'SaveCellsAtOnce',    'ShowDisplayDirection',    'RepeatCells',    'LimitChars',    'RowActionLinks',    'DefaultDisplay',    'RememberSorting');$forms['Main_frame']['Edit'] = array(    'ProtectBinary',    'ShowFunctionFields',    'ShowFieldTypesInDataEditView',    'CharEditing',    'MinSizeForInputField',    'MaxSizeForInputField',    'CharTextareaCols',    'CharTextareaRows',    'TextareaCols',    'TextareaRows',    'LongtextDoubleTextarea',    'InsertRows',    'ForeignKeyDropdownOrder',    'ForeignKeyMaxLimit');$forms['Main_frame']['Tabs'] = array(    'LightTabs',    'PropertiesIconic',    'DefaultTabServer',    'DefaultTabDatabase',    'DefaultTabTable',    'QueryWindowDefTab');$forms['Import']['Import_defaults'] = array('Import' => array(    'format',    'charset',    'allow_interrupt',    'skip_queries'));$forms['Import']['Sql'] = array('Import' => array(    'sql_compatibility',    'sql_no_auto_value_on_zero'));$forms['Import']['Csv'] = array('Import' => array(    ':group:' . __('CSV'),        'csv_replace',        'csv_ignore',        'csv_terminated',        'csv_enclosed',        'csv_escaped',        'csv_col_names',        ':group:end',    ':group:' . __('CSV using LOAD DATA'),        'ldi_replace',        'ldi_ignore',        'ldi_terminated',        'ldi_enclosed',        'ldi_escaped',        'ldi_local_option',        ':group:end'));$forms['Import']['Open_Document'] = array('Import' => array(    ':group:' . __('Open Document Spreadsheet'),        'ods_col_names',        'ods_empty_rows',        'ods_recognize_percentages',        'ods_recognize_currency'));$forms['Export']['Export_defaults'] = array('Export' => array(    'method',    ':group:' . __('Quick'),        'quick_export_onserver',        'quick_export_onserver_overwrite',        ':group:end',    ':group:' . __('Custom'),        'format',        'compression',        'charset',        'asfile' => ':group',            'onserver',            'onserver_overwrite',            ':group:end',        'remember_file_template',        'file_template_table',        'file_template_database',        'file_template_server'));$forms['Export']['Sql'] = array('Export' => array(    'sql_include_comments' => ':group',        'sql_dates',        'sql_relation',        'sql_mime',        ':group:end',    'sql_use_transaction',    'sql_disable_fk',    'sql_compatibility',    ':group:' . __('Database export options'),        'sql_drop_database',        'sql_structure_or_data',        ':group:end',    ':group:' . __('Structure'),        'sql_drop_table',        'sql_procedure_function',        'sql_create_table_statements' => ':group',            'sql_if_not_exists',            'sql_auto_increment',            ':group:end',        'sql_backquotes',        ':group:end',    ':group:' . __('Data'),        'sql_delayed',        'sql_ignore',        'sql_type',        'sql_insert_syntax',        'sql_max_query_size',        'sql_hex_for_blob',        'sql_utc_time'));$forms['Export']['CodeGen'] = array('Export' => array(    'codegen_format'));$forms['Export']['Csv'] = array('Export' => array(    ':group:' . __('CSV'),        'csv_separator',        'csv_enclosed',        'csv_escaped',        'csv_terminated',        'csv_null',        'csv_removeCRLF',        'csv_columns',        ':group:end',    ':group:' . __('CSV for MS Excel'),        'excel_null',        'excel_removeCRLF',        'excel_columns',        'excel_edition'));$forms['Export']['Latex'] = array('Export' => array(    'latex_caption',    'latex_structure_or_data',    ':group:' . __('Structure'),        'latex_structure_caption',        'latex_structure_continued_caption',        'latex_structure_label',        'latex_relation',        'latex_comments',        'latex_mime',        ':group:end',    ':group:' . __('Data'),        'latex_columns',        'latex_data_caption',        'latex_data_continued_caption',        'latex_data_label',        'latex_null'));$forms['Export']['Microsoft_Office'] = array('Export' => array(    ':group:' . __('Microsoft Word 2000'),        'htmlword_structure_or_data',        'htmlword_null',        'htmlword_columns'));$forms['Export']['Open_Document'] = array('Export' => array(    ':group:' . __('Open Document Spreadsheet'),        'ods_columns',        'ods_null',        ':group:end',    ':group:' . __('Open Document Text'),        'odt_structure_or_data',        ':group:' . __('Structure'),            'odt_relation',            'odt_comments',            'odt_mime',            ':group:end',        ':group:' . __('Data'),            'odt_columns',            'odt_null'));$forms['Export']['Texy'] = array('Export' => array(    'texytext_structure_or_data',    ':group:' . __('Data'),        'texytext_null',        'texytext_columns'));?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for the table-search page and zoom-search page * * @package PhpMyAdmin */require_once 'url_generating.lib.php';/** * Gets all the fields of a table along with their types, collations * and whether null or not. * * @param string $db    Selected database * @param string $table Selected table * * @return array Array containing the field list, field types, collations * and null constraint */function PMA_tbl_getFields($db, $table){    // Gets the list and number of fields    $fields = PMA_DBI_get_columns($db, $table, null, true);    $fields_list = $fields_null = $fields_type = $fields_collation = array();    $geom_column_present = false;    $geom_types = PMA_getGISDatatypes();    foreach ($fields as $key => $row) {        $fields_list[] = $row['Field'];        $type          = $row['Type'];        // check whether table contains geometric columns        if (in_array($type, $geom_types)) {            $geom_column_present = true;        }        // reformat mysql query output        if (strncasecmp($type, 'set', 3) == 0            || strncasecmp($type, 'enum', 4) == 0        ) {            $type = str_replace(',', ', ', $type);        } else {            // strip the "BINARY" attribute, except if we find "BINARY(" because            // this would be a BINARY or VARBINARY field type            if (!preg_match('@BINARY[\(]@i', $type)) {                $type = preg_replace('@BINARY@i', '', $type);            }            $type = preg_replace('@ZEROFILL@i', '', $type);            $type = preg_replace('@UNSIGNED@i', '', $type);            $type = strtolower($type);        }        if (empty($type)) {            $type = '&nbsp;';        }        $fields_null[] = $row['Null'];        $fields_type[] = $type;        $fields_collation[] = ! empty($row['Collation']) && $row['Collation'] != 'NULL'            ? $row['Collation']            : '';    } // end while    return array($fields_list, $fields_type, $fields_collation, $fields_null, $geom_column_present);}/** * Sets the table header for displaying a table in query-by-example format. * * @param bool $geom_column_present whether a geometry column is present * * @return HTML content, the tags and content for table header */function PMA_tbl_setTableHeader($geom_column_present = false){    // Display the Function column only if there is alteast one geomety colum    $func = '';    if ($geom_column_present) {        $func = '<th>' . __('Function') . '</th>';    }    return '<thead>        <tr>' . $func . '<th>' .  __('Column') . '</th>        <th>' .  __('Type') . '</th>        <th>' .  __('Collation') . '</th>        <th>' .  __('Operator') . '</th>        <th>' .  __('Value') . '</th>        </tr>        </thead>';}/** * Returns an array with necessary configrations to create * sub-tabs(Table Search and Zoom Search) in the table_select page. * * @return array Array containing configuration (icon, text, link, id, args) * of sub-tabs for Table Search and Zoom search */function PMA_tbl_getSubTabs(){    $subtabs = array();    $subtabs['search']['icon'] = 'b_search.png';    $subtabs['search']['text'] = __('Table Search');    $subtabs['search']['link'] = 'tbl_select.php';    $subtabs['search']['id'] = 'tbl_search_id';    $subtabs['search']['args']['pos'] = 0;    $subtabs['zoom']['icon'] = 'b_props.png';    $subtabs['zoom']['link'] = 'tbl_zoom_select.php';    $subtabs['zoom']['text'] = __('Zoom Search');    $subtabs['zoom']['id'] = 'zoom_search_id';    return $subtabs;}/** * Creates the HTML content for: * 1) Browsing foreign data for a field. * 2) Creating elements for search criteria input on fields. * * @param array  $foreigners      Array of foreign keys * @param array  $foreignData     Foreign keys data * @param string $field           Column name * @param string $tbl_fields_type Column type * @param int    $i               Column index * @param string $db              Selected database * @param string $table           Selected table * @param array  $titles          Selected title * @param int    $foreignMaxLimit Max limit of displaying foreign elements * @param array  $fields          Array of search criteria inputs * @param bool   $in_fbs          Whether we are in 'function based search' * @param bool   $in_zoom_search_edit  Whether we are in zoom search edit  * * @return string HTML content for viewing foreing data and elements * for search criteria input. */function PMA_getForeignFields_Values($foreigners, $foreignData, $field, $tbl_fields_type, $i, $db, $table, $titles, $foreignMaxLimit, $fields, $in_fbs = false, $in_zoom_search_edit = false){    $str = '';    if ($foreigners && isset($foreigners[$field]) && is_array($foreignData['disp_row'])) {        // f o r e i g n    k e y s        $str .=  '<select name="fields[' . $i . ']" id="fieldID_' . $i .'">' . "\n";        // go back to first row        // here, the 4th parameter is empty because there is no current        // value of data for the dropdown (the search page initial values        // are displayed empty)        $str .= PMA_foreignDropdown(            $foreignData['disp_row'], $foreignData['foreign_field'],            $foreignData['foreign_display'], '', $foreignMaxLimit        );        $str .= '</select>' . "\n";    } elseif ($foreignData['foreign_link'] == true) {        if (isset($fields[$i]) && is_string($fields[$i])) {            $str .= '<input type="text" id="fieldID_' . $i . '" name="fields[' . $i . ']" value="' . $fields[$i] . '" id="field_' . md5($field) . '[' . $i .']" class="textfield" />' ;        } else {            $str .= '<input type="text" id="fieldID_' . $i . '" name="fields[' . $i . ']" id="field_' . md5($field) . '[' . $i .']" class="textfield" />' ;        }        $str .=  <<<EOT<a target="_blank" onclick="window.open(this.href, 'foreigners', 'width=640,height=240,scrollbars=yes'); return false" href="browse_foreigners.php?EOT;        $str .= '' . PMA_generate_common_url($db, $table) .  '&amp;field=' . urlencode($field) . '&amp;fieldkey=' . $i . '"';        if ($in_zoom_search_edit) {            $str .= ' class="browse_foreign"';        }        $str .= '>' . str_replace("'", "\'", $titles['Browse']) . '</a>';    } elseif (in_array($tbl_fields_type[$i], PMA_getGISDatatypes())) {        // g e o m e t r y        $str .= '<input type="text" name="fields[' . $i . ']"'        .' size="40" class="textfield" id="field_' . $i . '" />' .  "\n";        if ($in_fbs) {            $edit_url = 'gis_data_editor.php?' . PMA_generate_common_url();            $edit_str = PMA_getIcon('b_edit.png', __('Edit/Insert'));            $str .= '<span class="open_search_gis_editor">';            $str .= PMA_linkOrButton($edit_url, $edit_str, array(), false, false, '_blank');            $str .= '</span>';        }    } elseif (strncasecmp($tbl_fields_type[$i], 'enum', 4) == 0        || (strncasecmp($tbl_fields_type[$i], 'set', 3) == 0 && $in_zoom_search_edit)    ) {        // e n u m s   a n d   s e t s        // Enum in edit mode   --> dropdown        // Enum in search mode --> multiselect        // Set in edit mode    --> multiselect        // Set in search mode  --> input (skipped here, so the 'else'        //                                 section would handle it)        $value = explode(', ', str_replace("'", '', substr($tbl_fields_type[$i], 5, -1)));        $cnt_value = count($value);        if ((strncasecmp($tbl_fields_type[$i], 'enum', 4) && ! $in_zoom_search_edit)            || (strncasecmp($tbl_fields_type[$i], 'set', 3) && $in_zoom_search_edit)        ) {            $str .= '<select name="fields[' . ($i) . '][]" id="fieldID_' . $i .'">' . "\n";        } else {            $str .= '<select name="fields[' . ($i) . '][]" id="fieldID_' . $i .'"'                . ' multiple="multiple" size="' . min(3, $cnt_value) . '">' . "\n";        }        for ($j = 0; $j < $cnt_value; $j++) {            if (isset($fields[$i])                && is_array($fields[$i])                && in_array($value[$j], $fields[$i])            ) {                $str .= '<option value="' . $value[$j] . '" Selected>'                    . $value[$j] . '</option>';            } else {                $str .= '<option value="' . $value[$j] . '">'                    . $value[$j] . '</option>';            }        } // end for        $str .= '</select>' . "\n";    } else {        // o t h e r   c a s e s        $the_class = 'textfield';        $type = $tbl_fields_type[$i];        if ($type == 'date') {            $the_class .= ' datefield';        } elseif ($type == 'datetime' || substr($type, 0, 9) == 'timestamp') {            $the_class .= ' datetimefield';        } elseif (substr($type, 0, 3) == 'bit') {            $the_class .= ' bit';        }        if (isset($fields[$i]) && is_string($fields[$i])) {            $str .= '<input type="text" name="fields[' . $i . ']"'                .' size="40" class="' . $the_class . '" id="fieldID_'                . $i .'" value = "' . $fields[$i] . '"/>' .  "\n";        } else {            $str .= '<input type="text" name="fields[' . $i . ']"'                .' size="40" class="' . $the_class . '" id="fieldID_'                . $i .'" />' .  "\n";        }    }    return $str;}/** * Return the where clause for query generation based on the inputs provided. * * @param mixed  $fields     Search criteria input * @param string $names      Name of the column on which search is submitted * @param string $types      Type of the field * @param string $collations Field collation * @param string $func_type  Search fucntion/operator * @param bool   $unaryFlag  Whether operator unary or not * @param bool   $geom_func  Whether geometry functions should be applied * * @return string HTML content for viewing foreing data and elements * for search criteria input. */function PMA_tbl_search_getWhereClause($fields, $names, $types, $collations, $func_type, $unaryFlag, $geom_func = null){    /**     * @todo move this to a more apropriate place     */    $geom_unary_functions = array(        'IsEmpty' => 1,        'IsSimple' => 1,        'IsRing' => 1,        'IsClosed' => 1,    );    $w = '';    // If geometry function is set apply it to the field name    if ($geom_func != null && trim($geom_func) != '') {        // Get details about the geometry fucntions        $geom_funcs = PMA_getGISFunctions($types, true, false);        // If the function takes a single parameter        if ($geom_funcs[$geom_func]['params'] == 1) {            $backquoted_name = $geom_func . '(' . PMA_backquote($names) . ')';        } else {            // If the function takes two parameters            // create gis data from the string            $gis_data = PMA_createGISData($fields);            $w = $geom_func . '(' . PMA_backquote($names) . ',' . $gis_data . ')';            return $w;        }        // New output type is the output type of the function being applied        $types = $geom_funcs[$geom_func]['type'];        // If the where clause is something like 'IsEmpty(`spatial_col_name`)'        if (isset($geom_unary_functions[$geom_func]) && trim($fields) == '') {            $w = $backquoted_name;            return $w;        }    } else {        $backquoted_name = PMA_backquote($names);    }    if ($unaryFlag) {        $fields = '';        $w = $backquoted_name . ' ' . $func_type;    } elseif (in_array($types, PMA_getGISDatatypes()) && ! empty($fields)) {        // create gis data from the string        $gis_data = PMA_createGISData($fields);        $w = $backquoted_name . ' ' . $func_type . ' ' . $gis_data;    } elseif (strncasecmp($types, 'enum', 4) == 0) {        if (!empty($fields)) {            if (! is_array($fields)) {                $fields = explode(',', $fields);            }            $enum_selected_count = count($fields);            if ($func_type == '=' && $enum_selected_count > 1) {                $func_type    = 'IN';                $parens_open  = '(';                $parens_close = ')';            } elseif ($func_type == '!=' && $enum_selected_count > 1) {                $func_type    = 'NOT IN';                $parens_open  = '(';                $parens_close = ')';            } else {                $parens_open  = '';                $parens_close = '';            }            $enum_where = '\'' . PMA_sqlAddslashes($fields[0]) . '\'';            for ($e = 1; $e < $enum_selected_count; $e++) {                $enum_where .= ', \'' . PMA_sqlAddslashes($fields[$e]) . '\'';            }            $w = $backquoted_name . ' ' . $func_type . ' ' . $parens_open . $enum_where . $parens_close;        }    } elseif ($fields != '') {        // For these types we quote the value. Even if it's another type (like INT),        // for a LIKE we always quote the value. MySQL converts strings to numbers        // and numbers to strings as necessary during the comparison        if (preg_match('@char|binary|blob|text|set|date|time|year@i', $types)            || strpos(' ' . $func_type, 'LIKE')        ) {            $quot = '\'';        } else {            $quot = '';        }        // LIKE %...%        if ($func_type == 'LIKE %...%') {            $func_type = 'LIKE';            $fields = '%' . $fields . '%';        }        if ($func_type == 'REGEXP ^...$') {            $func_type = 'REGEXP';            $fields = '^' . $fields . '$';        }        if ($func_type == 'IN (...)'            || $func_type == 'NOT IN (...)'            || $func_type == 'BETWEEN'            || $func_type == 'NOT BETWEEN'        ) {            $func_type = str_replace(' (...)', '', $func_type);            // quote values one by one            $values = explode(',', $fields);            foreach ($values as &$value) {                $value = $quot . PMA_sqlAddslashes(trim($value)) . $quot;            }            if ($func_type == 'BETWEEN' || $func_type == 'NOT BETWEEN') {                $w = $backquoted_name . ' ' . $func_type . ' ' . (isset($values[0]) ? $values[0] : '')                    . ' AND ' . (isset($values[1]) ? $values[1] : '');            } else {                $w = $backquoted_name . ' ' . $func_type . ' (' . implode(',', $values) . ')';            }        } else {            $w = $backquoted_name . ' ' . $func_type . ' ' . $quot . PMA_sqlAddslashes($fields) . $quot;;        }    } // end if    return $w;}/** * Formats a SVG plot for the query results. * * @param array $data      Data for the status chart * @param array &$settings Settings used to generate the chart * * @return string HTML and JS code for the SVG plot */function PMA_SVG_scatter_plot($data, &$settings){    include_once './libraries/svg_plot/pma_scatter_plot.php';    if (empty($data)) {        // empty data        return '';    } else {        $scatter_plot = new PMA_Scatter_Plot($data, $settings);        if ($settings != null) {            foreach ($scatter_plot->getSettings() as $setting => $val) {                if (! isset($settings[$setting])) {                    $settings[$setting] = $val;                }            }        }        return $scatter_plot->asSVG();    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Config file management * * @package PhpMyAdmin *//** * Config file management class. * Stores its data in $_SESSION * * @package    phpMyAdmin */class ConfigFile{    /**     * Stores default PMA config from config.default.php     * @var array     */    private $cfg;    /**     * Stores original PMA_Config object, not modified by user preferences     * @var PMA_Config     */    private $orgCfgObject;    /**     * Stores allowed values for non-standard fields     * @var array     */    private $cfgDb;    /**     * Keys which will be always written to config file     * @var array     */    private $persistKeys = array();    /**     * Changes keys while updating config in {@link updateWithGlobalConfig()} or reading     * by {@link getConfig()} or {@link getConfigArray()}     * @var array     */    private $cfgUpdateReadMapping = array();    /**     * Key filter for {@link set()}     * @var array|null     */    private $setFilter;    /**     * Instance id (key in $_SESSION array, separate for each server - ConfigFile{server id})     * @var string     */    private $id;    /**     * Result for {@link _flattenArray()}     * @var array     */    private $_flattenArrayResult;    /**     * ConfigFile instance     * @var ConfigFile     */    private static $_instance;    /**     * Private constructor, use {@link getInstance()}     *     */    private function __construct()    {        // load default config values        $cfg = &$this->cfg;        include './libraries/config.default.php';        $cfg['fontsize'] = '82%';        // create PMA_Config to read config.inc.php values        $this->orgCfgObject = new PMA_Config(CONFIG_FILE);        // load additional config information        $cfg_db = &$this->cfgDb;        include './libraries/config.values.php';        // apply default values overrides        if (count($cfg_db['_overrides'])) {            foreach ($cfg_db['_overrides'] as $path => $value) {                PMA_array_write($path, $cfg, $value);            }        }        $this->id = 'ConfigFile' . $GLOBALS['server'];        if (!isset($_SESSION[$this->id])) {            $_SESSION[$this->id] = array();        }    }    /**     * Returns class instance     *     * @return ConfigFile     */    public static function getInstance()    {        if (is_null(self::$_instance)) {            self::$_instance = new ConfigFile();        }        return self::$_instance;    }    /**     * Returns PMA_Config without user preferences applied     *     * @return PMA_Config     */    public function getOrgConfigObj()    {        return $this->orgCfgObject;    }    /**     * Sets names of config options which will be placed in config file even if they are set     * to their default values (use only full paths)     *     * @param array $keys     */    public function setPersistKeys($keys)    {        // checking key presence is much faster than searching so move values to keys        $this->persistKeys = array_flip($keys);    }    /**     * Returns flipped array set by {@link setPersistKeys()}     *     * @return array     */    public function getPersistKeysMap()    {        return $this->persistKeys;    }    /**     * By default ConfigFile allows setting of all configuration keys, use this method     * to set up a filter on {@link set()} method     *     * @param array|null $keys array of allowed keys or null to remove filter     */    public function setAllowedKeys($keys)    {        if ($keys === null) {            $this->setFilter = null;            return;        }        // checking key presence is much faster than searching so move values to keys        $this->setFilter = array_flip($keys);    }    /**     * Sets path mapping for updating config in {@link updateWithGlobalConfig()} or reading     * by {@link getConfig()} or {@link getConfigArray()}     * @var array     */    public function setCfgUpdateReadMapping(array $mapping)    {        $this->cfgUpdateReadMapping = $mapping;    }    /**     * Resets configuration data     */    public function resetConfigData()    {        $_SESSION[$this->id] = array();    }    /**     * Sets configuration data (overrides old data)     *     * @param array $cfg     */    public function setConfigData(array $cfg)    {        $_SESSION[$this->id] = $cfg;    }    /**     * Sets config value     *     * @param string $path     * @param mixed  $value     * @param string $canonical_path     */    public function set($path, $value, $canonical_path = null)    {        if ($canonical_path === null) {            $canonical_path = $this->getCanonicalPath($path);        }        // apply key whitelist        if ($this->setFilter !== null && !isset($this->setFilter[$canonical_path])) {            return;        }        // remove if the path isn't protected and it's empty or has a default value        if (!isset($this->persistKeys[$canonical_path])) {            $default_value = $this->getDefault($canonical_path);            // we need oryginal config values not overwritten by user preferences            // to allow for overwriting options set in config.inc.php with default values            $instance_default_value = PMA_array_read($canonical_path, $this->orgCfgObject->settings);            if (($value === $default_value && (defined('PMA_SETUP') || $instance_default_value === $default_value))                    || (empty($value) && empty($default_value) && (defined('PMA_SETUP') || empty($current_global)))) {                PMA_array_remove($path, $_SESSION[$this->id]);                return;            }        }        PMA_array_write($path, $_SESSION[$this->id], $value);    }    /**     * Flattens multidimensional array, changes indices to paths (eg. 'key/subkey').     * Used as array_walk() callback.     *     * @param mixed $value     * @param mixed $key     * @param mixed $prefix     */    private function _flattenArray($value, $key, $prefix)    {        // no recursion for numeric arrays        if (is_array($value) && !isset($value[0])) {            $prefix .= $key . '/';            array_walk($value, array($this, '_flattenArray'), $prefix);        } else {            $this->_flattenArrayResult[$prefix . $key] = $value;        }    }    /**     * Returns default config in a flattened array     *     * @return array     */    public function getFlatDefaultConfig()    {        $this->_flattenArrayResult = array();        array_walk($this->cfg, array($this, '_flattenArray'), '');        $flat_cfg = $this->_flattenArrayResult;        $this->_flattenArrayResult = null;        return $flat_cfg;    }    /**     * Updates config with values read from given array     * (config will contain differences to defaults from config.defaults.php).     *     * @param array $cfg     */    public function updateWithGlobalConfig(array $cfg)    {        // load config array and flatten it        $this->_flattenArrayResult = array();        array_walk($cfg, array($this, '_flattenArray'), '');        $flat_cfg = $this->_flattenArrayResult;        $this->_flattenArrayResult = null;        // save values        // map for translating a few user preferences paths, should be complemented        // by code reading from generated config to perform inverse mapping        foreach ($flat_cfg as $path => $value) {            if (isset($this->cfgUpdateReadMapping[$path])) {                $path = $this->cfgUpdateReadMapping[$path];            }            $this->set($path, $value, $path);        }    }    /**     * Returns config value or $default if it's not set     *     * @param  string $path     * @param  mixed  $default     * @return mixed     */    public function get($path, $default = null)    {        return PMA_array_read($path, $_SESSION[$this->id], $default);    }    /**     * Returns default config value or $default it it's not set ie. it doesn't     * exist in config.default.php ($cfg) and config.values.php     * ($_cfg_db['_overrides'])     *     * @param  string $canonical_path     * @param  mixed  $default     * @return mixed     */    public function getDefault($canonical_path, $default = null)    {        return PMA_array_read($canonical_path, $this->cfg, $default);    }    /**     * Returns config value, if it's not set uses the default one; returns     * $default if the path isn't set and doesn't contain a default value     *     * @param  string $path     * @param  mixed  $default     * @return mixed     */    public function getValue($path, $default = null)    {        $v = PMA_array_read($path, $_SESSION[$this->id], null);        if ($v !== null) {            return $v;        }        $path = $this->getCanonicalPath($path);        return $this->getDefault($path, $default);    }    /**     * Returns canonical path     *     * @param string $path     * @return string     */    public function getCanonicalPath($path) {        return preg_replace('#^Servers/([\d]+)/#', 'Servers/1/', $path);    }    /**     * Returns config database entry for $path ($cfg_db in config_info.php)     *     * @param  string $path     * @param  mixed  $default     * @return mixed     */    public function getDbEntry($path, $default = null)    {        return PMA_array_read($path, $this->cfgDb, $default);    }    /**     * Returns server count     *     * @return int     */    public function getServerCount()    {        return isset($_SESSION[$this->id]['Servers'])            ? count($_SESSION[$this->id]['Servers'])            : 0;    }    /**     * Returns server list     *     * @return array|null     */    public function getServers()    {      return isset($_SESSION[$this->id]['Servers'])          ? $_SESSION[$this->id]['Servers']          : null;    }    /**     * Returns DSN of given server     *     * @param integer $server     * @return string     */    function getServerDSN($server)    {        if (!isset($_SESSION[$this->id]['Servers'][$server])) {            return '';        }        $path = 'Servers/' . $server;        $dsn = $this->getValue("$path/extension") . '://';        if ($this->getValue("$path/auth_type") == 'config') {            $dsn .= $this->getValue("$path/user");            if (!$this->getValue("$path/nopassword")) {                $dsn .= ':***';            }            $dsn .= '@';        }        if ($this->getValue("$path/connect_type") == 'tcp') {            $dsn .= $this->getValue("$path/host");            $port = $this->getValue("$path/port");            if ($port) {                $dsn .= ':' . $port;            }        } else {            $dsn .= $this->getValue("$path/socket");        }        return $dsn;    }    /**     * Returns server name     *     * @param int $id     * @return string     */    public function getServerName($id)    {        if (!isset($_SESSION[$this->id]['Servers'][$id])) {            return '';        }        $verbose = $this->get("Servers/$id/verbose");        if (!empty($verbose)) {            return $verbose;        }        $host = $this->get("Servers/$id/host");        return empty($host) ? 'localhost' : $host;    }    /**     * Removes server     *     * @param int $server     */    public function removeServer($server)    {        if (!isset($_SESSION[$this->id]['Servers'][$server])) {            return;        }        $last_server = $this->getServerCount();        for ($i = $server; $i < $last_server; $i++) {            $_SESSION[$this->id]['Servers'][$i] = $_SESSION[$this->id]['Servers'][$i+1];        }        unset($_SESSION[$this->id]['Servers'][$last_server]);        if (isset($_SESSION[$this->id]['ServerDefault'])            && $_SESSION[$this->id]['ServerDefault'] >= 0) {            unset($_SESSION[$this->id]['ServerDefault']);        }    }    /**     * Returns config file path, relative to phpMyAdmin's root path     *     * @return string     */    public function getFilePath()    {        // Load paths        if (!defined('SETUP_CONFIG_FILE')) {            include_once './libraries/vendor_config.php';        }        return SETUP_CONFIG_FILE;    }    /**     * Returns configuration array (full, multidimensional format)     *     * @return array     */    public function getConfig()    {        $c = $_SESSION[$this->id];        foreach ($this->cfgUpdateReadMapping as $map_to => $map_from) {            PMA_array_write($map_to, $c, PMA_array_read($map_from, $c));            PMA_array_remove($map_from, $c);        }        return $c;    }    /**     * Returns configuration array (flat format)     *     * @return array     */    public function getConfigArray()    {        $this->_flattenArrayResult = array();        array_walk($_SESSION[$this->id], array($this, '_flattenArray'), '');        $c = $this->_flattenArrayResult;        $this->_flattenArrayResult = null;        $persistKeys = array_diff(array_keys($this->persistKeys), array_keys($c));        foreach ($persistKeys as $k) {            $c[$k] = $this->getDefault($k);        }        foreach ($this->cfgUpdateReadMapping as $map_to => $map_from) {            if (!isset($c[$map_from])) {                continue;            }            $c[$map_to] = $c[$map_from];            unset($c[$map_from]);        }        return $c;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build CSV dumps of tables for excel * * @package PhpMyAdmin-Export * @subpackage CSV-Excel */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['excel'] = array(        'text' => __('CSV for MS Excel'),        'extension' => 'csv',        'mime_type' => 'text/comma-separated-values',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:')),            array('type' => 'bool', 'name' => 'removeCRLF', 'text' => __('Remove carriage return/line feed characters within columns')),            array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),            array(                'type' => 'select',                'name' => 'edition',                'values' => array(                    'win' => 'Windows',                    'mac_excel2003' => 'Excel 2003 / Macintosh',                    'mac_excel2008' => 'Excel 2008 / Macintosh'),                'text' => __('Excel edition:')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group'),            ),        'options_text' => __('Options'),        );} else {    /* Everything rest is coded in csv plugin */    include './libraries/export/csv.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once 'Export_Relation_Schema.class.php';/** * This Class inherits the XMLwriter class and * helps in developing structure of MS Visio Schema Export * * @access public * @see http://php.net/manual/en/book.xmlwriter.php */class PMA_VISIO extends XMLWriter{    public $title;    public $author;    public $font;    public $fontSize;    /**     * The "PMA_VISIO" constructor     *     * Upon instantiation This starts writing the Visio XML .VDX document     *     * @return void     * @see XMLWriter::openMemory(),XMLWriter::setIndent(),XMLWriter::startDocument()     */    function __construct()    {        $this->openMemory();        /*         * Set indenting using three spaces,         * so output is formatted         */        $this->setIndent(true);        $this->setIndentString('   ');        /*         * Create the XML document         */        $this->startDocument('1.0', 'UTF-8');    }    /**     * Starts Visio XML .VDX Document     *     * Visio XML document starts by first initializing VisioDocument tag     * then DocumentProperties & DocumentSettings contains all the     * attributes that needed to define the document. Order of elements     * should be maintained while generating XML of Visio.     *     * @return void     * @access public     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),     * _documentProperties, _documentSettings     */    function startVisioDoc()    {        $this->startElement('VisioDocument');        $this->writeAttribute('xmlns', 'http://schemas.microsoft.com/visio/2003/core');        $this->writeAttribute('xmlns:vx', 'http://schemas.microsoft.com/visio/2006/extension');        $this->writeAttribute('xml:space', 'preserve');        $this->_documentProperties();        $this->_documentSettings();    }    /**     * Set document title     *     * @param string $value title text     *     * @return void     * @access public     */    function setTitle($value)    {        $this->title = $value;    }    /**     * Set document author     *     * @param string $value the author     *     * @return void     * @access public     */    function setAuthor($value)    {        $this->author = $value;    }    /**     * Sets Visio XML .VDX Document Properties     *     * DocumentProperties tag contains document property elements such as       the document's Title,Subject,Creator and templates tags     *     * @return void     * @access private     * @see XMLWriter::startElement(),XMLWriter::endElement(),XMLWriter::writeRaw()     */    private function _documentProperties()    {        $this->startElement('DocumentProperties');        $this->writeRaw('<Title>'.$this->title.'</Title>');        $this->writeRaw('<Subject>'.$this->title.'</Subject>');        $this->writeRaw('<Creator>'.$this->author.'</Creator>');        $this->writeRaw('<Company>phpMyAdmin</Company>');        $this->writeRaw('<Template>c:\program files\microsoft office\office12\1033\DBMODL_U.VST</Template>');        $this->endElement();    }    /**     * Sets Visio XML .VDX Document Settings     *     * DocumentSettings  tag contains elements that specify document settings.     *     * @return void     * @access private     * @see XMLWriter::startElement(),XMLWriter::endElement()     */    private function _documentSettings()    {        $this->startElement('DocumentSettings');        $this->endElement();    }    /**     * Ends Visio XML Document     *     * @return void     * @access public     * @see XMLWriter::endElement(),XMLWriter::endDocument()     */    function endVisioDoc()    {        $this->endElement();        $this->endDocument();    }    /**     * Output Visio XML .VDX Document for download     *     * @param string $fileName name of the Visio XML document     *     * @return void     * @access public     * @see XMLWriter::flush()     */    function showOutput($fileName)    {         //if(ob_get_clean()){            //ob_end_clean();        //}        $output = $this->flush();        PMA_download_header($fileName . '.vdx', 'application/visio', strlen($output));        print $output;    }}/** * Draws tables schema */class Table_Stats{    /**     * Defines properties     */    private $_tableName;    private $_showInfo = false;    public $width = 0;    public $height;    public $fields = array();    public $heightCell = 0;    public $currentCell = 0;    public $x, $y;    public $primary = array();    /**     * The "Table_Stats" constructor     *     * @param string  $tableName        The table name     * @param integer $pageNumber       Page number     * @param integer &$same_wide_width The max. with among tables     * @param boolean $showKeys         Whether to display keys or not     * @param boolean $showInfo         Whether to display table position or not     *     * @global object    The current Visio XML document     * @global integer   The current page number (from the     *                     $cfg['Servers'][$i]['table_coords'] table)     * @global array     The relations settings     * @global string    The current db name     *     * @return void     * @access private     * @see PMA_VISIO, Table_Stats::Table_Stats_setWidth,     *      Table_Stats::Table_Stats_setHeight     */    function __construct($tableName, $pageNumber, &$same_wide_width, $showKeys = false, $showInfo = false)    {        global $visio, $cfgRelation, $db;        $this->_tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $visio->dieSchema(                $pageNumber,                "VISIO",                sprintf(__('The %s table doesn\'t exist!'), $tableName)            );        }        /*        * load fields        * check to see if it will load all fields or only the foreign keys        */        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->_tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $this->_showInfo = $showInfo;        // height and width        $this->_setHeightTable($fontSize);        // setWidth must me after setHeight, because title        // can include table height which changes table width        $this->_setWidthTable($font, $fontSize);        if ($same_wide_width < $this->width) {            $same_wide_width = $this->width;        }        // x and y        $sql = 'SELECT x, y FROM '         . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'         . PMA_backquote($cfgRelation['table_coords'])         . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''         . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''         . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $visio->dieSchema(                $pageNumber,                "VISIO",                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        // displayfield        $this->displayfield = PMA_getDisplayField($db, $tableName);        // index        $result = PMA_DBI_query('SHOW INDEX FROM ' . PMA_backquote($tableName) . ';', null, PMA_DBI_QUERY_STORE);        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }    }    /**     * Returns title of the current table,     * title can have the dimensions/co-ordinates of the table     *     * @return the title     * @access private     */    private function _getTitle()    {        return ($this->_showInfo            ? sprintf('%.0f', $this->width) . 'x' . sprintf('%.0f', $this->heightCell)            : '') . ' ' . $this->_tableName;    }    /**     * Sets the width of the table     *     * @param string  $font     font name     * @param integer $fontSize font size     *     * @global object The current Visio XML document     *     * @return void     * @see PMA_VISIO     */    private function _setWidthTable($font,$fontSize)    {        global $visio;    }    /**     * Sets the height of the table     *     * @param integer $fontSize font size     *     * @return void     * @access private     */    function _setHeightTable($fontSize)    {        $this->heightCell = $fontSize + 4;        $this->height = (count($this->fields) + 1) * $this->heightCell;    }    /**     * draw the table     *     * @param boolean $showColor Whether to display color     *     * @global object The current Visio XML document     *     * @return void     * @access public     * @see PMA_VISIO     */    public function tableDraw($showColor)    {        global $visio;        //echo $this->_tableName.'<br />';        foreach ($this->fields as $field) {            $this->currentCell += $this->heightCell;            $showColor    = 'none';            if ($showColor) {                if (in_array($field, $this->primary)) {                    $showColor = '#0c0';                }                if ($field == $this->displayfield) {                    $showColor = 'none';                }            }            // code here for drawing table diagrams        }    }}/** * Draws relation links * * @access public * @see PMA_VISIO */class Relation_Stats{    /**     * Defines properties     */    public $xSrc, $ySrc;    public $srcDir ;    public $destDir;    public $xDest, $yDest;    public $wTick = 10;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @return void     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        /*        * [0] is x-left        * [1] is x-right        * [2] is y        */        $src_left   = $src_pos[0] - $this->wTick;        $src_right  = $src_pos[1] + $this->wTick;        $dest_left  = $dest_pos[0] - $this->wTick;        $dest_right = $dest_pos[1] + $this->wTick;        $d1 = abs($src_left - $dest_left);        $d2 = abs($src_right - $dest_left);        $d3 = abs($src_left - $dest_right);        $d4 = abs($src_right - $dest_right);        $d  = min($d1, $d2, $d3, $d4);        if ($d == $d1) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d2) {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d3) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        } else {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        }        $this->ySrc   = $src_pos[2];        $this->yDest = $dest_pos[2];    }    /**     * Gets arrows coordinates     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Arrows coordinates     * @access private     */    function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // x_left, x_right, y        return array(            $table->x,            $table->x + $table->width,            $table->y + ($pos + 1.5) * $table->heightCell        );    }    /**     * draws relation links and arrows shows foreign key relations     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @global object The current Visio XML document     *     * @return void     * @access public     * @see PMA_VISIO     */    public function relationDraw($changeColor)    {        global $visio;        if ($changeColor) {            $listOfColors = array(                'red',                'grey',                'black',                'yellow',                'green',                'cyan',                'orange'            );            shuffle($listOfColors);            $color =  $listOfColors[0];        } else {            $color = 'black';        }        // code here for making connections b/w relation objects    }}/** end of the "Relation_Stats" class*//** * Visio Relation Schema Class * * Purpose of this class is to generate the Visio XML .VDX Document which is used * for representing the database diagrams in any version of MS Visio IDE. * This class uses Software and Database Template and Database model diagram of * Visio and with the combination of these objects actually helps in preparing * Visio XML .VDX document. * * Visio XML is generated by using XMLWriter php extension and this class * inherits Export_Relation_Schema class has common functionality added * to this class * * @name Visio_Relation_Schema */class PMA_Visio_Relation_Schema extends PMA_Export_Relation_Schema{    /**     * The "PMA_Visio_Relation_Schema" constructor     *     * Upon instantiation This outputs the Visio XML document     * that user can download     *     * @return void     * @see PMA_VISIO,Table_Stats,Relation_Stats     */    function __construct()    {        global $visio,$db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowGrid(isset($_POST['show_grid']));        $this->setShowColor($_POST['show_color']);        $this->setShowKeys(isset($_POST['show_keys']));        $this->setOrientation(isset($_POST['orientation']));        $this->setPaper($_POST['paper']);        $this->setExportType($_POST['export_type']);        $visio = new PMA_VISIO();        $visio->setTitle(sprintf(__('Schema of the %s database - Page %s'), $db, $this->pageNumber));        $visio->SetAuthor('phpMyAdmin ' . PMA_VERSION);        $visio->startVisioDoc();        $alltables = $this->getAllTables($db, $this->pageNumber);        foreach ($alltables as $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats($table, $this->pageNumber, $this->showKeys);            }        }        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    /* put the foreign table on the schema only if selected                    * by the user                    * (do not use array_search() because we would have to                    * to do a === false and this is not PHP3 compatible)                    */                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table,                            $master_field,                            $rel['foreign_table'],                            $rel['foreign_field'],                            $this->showKeys                        );                    }                }            }        }        $this->_drawTables($this->showColor);        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $visio->endVisioDoc();        $visio->showOutput($db.'-'.$this->pageNumber);        exit();    }    /**     * Defines relation objects     *     * @param string  $masterTable  The master table name     * @param string  $masterField  The relation field in the master table     * @param string  $foreignTable The foreign table name     * @param string  $foreignField The relation field in the foreign table     * @param boolean $showKeys     Whether to display keys or not     *     * @return void     * @access private     * @see Table_Stats::__construct(), Relation_Stats::__construct()     */    private function _addRelation($masterTable, $masterField, $foreignTable, $foreignField, $showKeys)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $this->pageNumber, $showKeys            );        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $this->pageNumber, $showKeys            );        }        $this->_relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws relation references     * connects master table's master field to foreign table's forein field.     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @return void     * @access private     * @see Relation_Stats::relationDraw()     */    private function _drawRelations($changeColor)    {        foreach ($this->_relations as $relation) {            $relation->relationDraw($changeColor);        }    }    /**     * Draws tables     *     * @param boolean $changeColor Whether to show color for tables text or not     *     * @return void     * @access private     * @see Table_Stats::tableDraw()     */    private function _drawTables($changeColor)    {        foreach ($this->tables as $table) {            $table->tableDraw($changeColor);        }    }}?>
<?php/** * URL redirector to avoid leaking Referer with some sensitive information. *//** * Gets core libraries and defines some variables */require_once './libraries/common.inc.php';if (! PMA_isValid($_GET['url']) || ! preg_match('/^https?:\/\/[^\n\r]*$/', $_GET['url'])) {    header('Location: ' . $cfg['PmaAbsoluteUri']);} else {    header('Location: ' . $_GET['url']);}?>
