<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build LaTeX dumps of tables * * @package PhpMyAdmin-Export * @subpackage Latex */if (! defined('PHPMYADMIN')) {    exit;}/* Messages used in default captions */$GLOBALS['strLatexContent'] = __('Content of table @TABLE@');$GLOBALS['strLatexContinued'] = __('(continued)');$GLOBALS['strLatexStructure'] = __('Structure of table @TABLE@');/** * */if (isset($plugin_list)) {    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && ! $plugin_param['single_table']) {        $hide_structure = true;    }    $plugin_list['latex'] = array(        'text' => __('LaTeX'),        'extension' => 'tex',        'mime_type' => 'application/x-tex',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'caption', 'text' => __('Include table caption')),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );    /* what to dump (structure/data/both) */    $plugin_list['latex']['options'][]        = array('type' => 'begin_group', 'name' => 'dump_what', 'text' => __('Dump table'));    $plugin_list['latex']['options'][]        = array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data')));    $plugin_list['latex']['options'][] = array('type' => 'end_group');    /* Structure options */    if (! $hide_structure) {        $plugin_list['latex']['options'][]            = array('type' => 'begin_group', 'name' => 'structure', 'text' => __('Object creation options'), 'force' => 'data');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_caption', 'text' => __('Table caption'), 'doc' => 'faq6_27');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_continued_caption', 'text' => __('Table caption (continued)'), 'doc' => 'faq6_27');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_label', 'text' => __('Label key'), 'doc' => 'faq6_27');        if (! empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['latex']['options'][]                = array('type' => 'bool', 'name' => 'relation', 'text' => __('Display foreign key relationships'));        }        $plugin_list['latex']['options'][]            = array('type' => 'bool', 'name' => 'comments', 'text' => __('Display comments'));        if (! empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['latex']['options'][]                = array('type' => 'bool', 'name' => 'mime', 'text' => __('Display MIME types'));        }        $plugin_list['latex']['options'][]            = array('type' => 'end_group');    }    /* Data */    $plugin_list['latex']['options'][]        = array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure');    $plugin_list['latex']['options'][]        = array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row'));    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_caption', 'text' => __('Table caption'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_continued_caption', 'text' => __('Table caption (continued)'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_label', 'text' => __('Label key'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:'));    $plugin_list['latex']['options'][]        = array('type' => 'end_group');} else {    /**     * Escapes some special characters for use in TeX/LaTeX     *     * @param string $string the string to convert     *     * @return  string      the converted string with escape codes     *     * @access  private     */    function PMA_texEscape($string)    {        $escape = array('$', '%', '{', '}',  '&',  '#', '_', '^');        $cnt_escape = count($escape);        for ($k=0; $k < $cnt_escape; $k++) {            $string = str_replace($escape[$k], '\\' . $escape[$k], $string);        }        return $string;    }    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportHeader()    {        global $crlf;        global $cfg;        $head  =  '% phpMyAdmin LaTeX Dump' . $crlf               .  '% version ' . PMA_VERSION . $crlf               .  '% http://www.phpmyadmin.net' . $crlf               .  '%' . $crlf               .  '% ' . __('Host') . ': ' . $cfg['Server']['host'];        if (! empty($cfg['Server']['port'])) {             $head .= ':' . $cfg['Server']['port'];        }        $head .= $crlf               .  '% ' . __('Generation Time') . ': ' . PMA_localisedDate() . $crlf               .  '% ' . __('Server version') . ': ' . PMA_MYSQL_STR_VERSION . $crlf               .  '% ' . __('PHP Version') . ': ' . phpversion() . $crlf;        return PMA_exportOutputHandler($head);    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        global $crlf;        $head = '% ' . $crlf              . '% ' . __('Database') . ': ' . '\'' . $db . '\'' . $crlf              . '% ' . $crlf;        return PMA_exportOutputHandler($head);    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in LaTeX table/sideways table environment     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = PMA_DBI_field_name($result, $i);        }        unset($i);        $buffer      = $crlf . '%' . $crlf . '% ' . __('Data') . ': ' . $table            . $crlf . '%' . $crlf . ' \\begin{longtable}{|';        for ($index = 0; $index < $columns_cnt; $index++) {            $buffer .= 'l|';        }        $buffer .= '} ' . $crlf ;        $buffer .= ' \\hline \\endhead \\hline \\endfoot \\hline ' . $crlf;        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_data_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\label{'                . PMA_expandUserString(                    $GLOBALS['latex_data_label'],                    null,                    array('table' => $table, 'database' => $db)                )                . '} \\\\';        }        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        // show column names        if (isset($GLOBALS['latex_columns'])) {            $buffer = '\\hline ';            for ($i = 0; $i < $columns_cnt; $i++) {                $buffer .= '\\multicolumn{1}{|c|}{\\textbf{'                    . PMA_texEscape(stripslashes($columns[$i])) . '}} & ';            }            $buffer = substr($buffer, 0, -2) . '\\\\ \\hline \hline ';            if (! PMA_exportOutputHandler($buffer . ' \\endfirsthead ' . $crlf)) {                return false;            }            if (isset($GLOBALS['latex_caption'])) {                if (! PMA_exportOutputHandler(                    '\\caption{'                    . PMA_expandUserString(                        $GLOBALS['latex_data_continued_caption'],                        'PMA_texEscape',                        array('table' => $table, 'database' => $db)                    )                    . '} \\\\ '                )) {                    return false;                }            }            if (! PMA_exportOutputHandler($buffer . '\\endhead \\endfoot' . $crlf)) {                return false;            }        } else {            if (! PMA_exportOutputHandler('\\\\ \hline')) {                return false;            }        }        // print the whole table        while ($record = PMA_DBI_fetch_assoc($result)) {            $buffer = '';            // print each row            for ($i = 0; $i < $columns_cnt; $i++) {                if (isset($record[$columns[$i]])                    && (! function_exists('is_null') || ! is_null($record[$columns[$i]]))                ) {                    $column_value = PMA_texEscape(stripslashes($record[$columns[$i]]));                } else {                    $column_value = $GLOBALS['latex_null'];                }                // last column ... no need for & character                if ($i == ($columns_cnt - 1)) {                    $buffer .= $column_value;                } else {                    $buffer .= $column_value . " & ";                }            }            $buffer .= ' \\\\ \\hline ' . $crlf;            if (! PMA_exportOutputHandler($buffer)) {                return false;            }        }        $buffer = ' \\end{longtable}' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        PMA_DBI_free_result($result);        return true;    } // end getTableLaTeX    /**     * Outputs table's structure     *     * @param string $db          database name     * @param string $table       table name     * @param string $crlf        the end of line sequence     * @param string $error_url   the url to go back in case of error     * @param bool   $do_relation whether to include relation comments     * @param bool   $do_comments whether to include the pmadb-style column comments     *                            as comments in the structure; this is deprecated     *                            but the parameter is left here because export.php     *                            calls PMA_exportStructure() also for other export     *                            types which use this parameter     * @param bool   $do_mime     whether to include mime comments     * @param bool   $dates       whether to include creation/update/check dates     * @param string $export_mode 'create_table', 'triggers', 'create_view', 'stand_in'     * @param string $export_type 'server', 'database', 'table'     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $buffer      = $crlf . '%' . $crlf . '% ' . __('Structure') . ': ' . $table            . $crlf . '%' . $crlf . ' \\begin{longtable}{';        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        $columns_cnt = 4;        $alignment = '|l|c|c|c|';        if ($do_relation && $have_rel) {            $columns_cnt++;            $alignment .= 'l|';        }        if ($do_comments) {            $columns_cnt++;            $alignment .= 'l|';        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;            $alignment .='l|';        }        $buffer = $alignment . '} ' . $crlf ;        $header = ' \\hline ';        $header .= '\\multicolumn{1}{|c|}{\\textbf{' . __('Column')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Type')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Null')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Default') . '}}';        if ($do_relation && $have_rel) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{' . __('Links to') . '}}';        }        if ($do_comments) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{' . __('Comments') . '}}';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{MIME}}';            $mime_map = PMA_getMIME($db, $table, true);        }        // Table caption for first page and label        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\label{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_label'],                    null,                    array('table' => $table, 'database' => $db)                )                . '} \\\\' . $crlf;        }        $buffer .= $header . ' \\\\ \\hline \\hline' . $crlf . '\\endfirsthead' . $crlf;        // Table caption on next pages        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_continued_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\\\ ' . $crlf;        }        $buffer .= $header . ' \\\\ \\hline \\hline \\endhead \\endfoot ' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        $fields = PMA_DBI_get_columns($db, $table);        foreach ($fields as $row) {            $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);            $type = $extracted_fieldspec['print_type'];            if (empty($type)) {                $type     = ' ';            }            if (! isset($row['Default'])) {                if ($row['Null'] != 'NO') {                    $row['Default'] = 'NULL';                }            }            $field_name = $row['Field'];            $local_buffer = $field_name . "\000" . $type . "\000"                . (($row['Null'] == '' || $row['Null'] == 'NO') ? __('No') : __('Yes'))                . "\000" . (isset($row['Default']) ? $row['Default'] : '');            if ($do_relation && $have_rel) {                $local_buffer .= "\000";                if (isset($res_rel[$field_name])) {                    $local_buffer .= $res_rel[$field_name]['foreign_table'] . ' ('                        . $res_rel[$field_name]['foreign_field'] . ')';                }            }            if ($do_comments && $cfgRelation['commwork']) {                $local_buffer .= "\000";                if (isset($comments[$field_name])) {                    $local_buffer .= $comments[$field_name];                }            }            if ($do_mime && $cfgRelation['mimework']) {                $local_buffer .= "\000";                if (isset($mime_map[$field_name])) {                    $local_buffer .= str_replace('_', '/', $mime_map[$field_name]['mimetype']);                }            }            $local_buffer = PMA_texEscape($local_buffer);            if ($row['Key']=='PRI') {                $pos=strpos($local_buffer, "\000");                $local_buffer = '\\textit{' . substr($local_buffer, 0, $pos) . '}' . substr($local_buffer, $pos);            }            if (in_array($field_name, $unique_keys)) {                $pos=strpos($local_buffer, "\000");                $local_buffer = '\\textbf{' . substr($local_buffer, 0, $pos) . '}' . substr($local_buffer, $pos);            }            $buffer = str_replace("\000", ' & ', $local_buffer);            $buffer .= ' \\\\ \\hline ' . $crlf;            if (! PMA_exportOutputHandler($buffer)) {                return false;            }        } // end while        $buffer = ' \\end{longtable}' . $crlf;        return PMA_exportOutputHandler($buffer);    } // end of the 'PMA_exportStructure' function} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * forms frameset * *                                              or common.inc.php * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require_once './libraries/common.inc.php';// free the session file, for the other frames to be loadedsession_write_close();// Gets the host nameif (empty($HTTP_HOST)) {    if (PMA_getenv('HTTP_HOST')) {        $HTTP_HOST = PMA_getenv('HTTP_HOST');    } else {        $HTTP_HOST = '';    }}// purge querywindow history$cfgRelation = PMA_getRelationsParam();if ($GLOBALS['cfg']['QueryHistoryDB'] && $cfgRelation['historywork']) {    PMA_purgeHistory($GLOBALS['cfg']['Server']['user']);}unset($cfgRelation);/** * pass variables to child pages */$drops = array('lang', 'server', 'collation_connection',    'db', 'table');foreach ($drops as $each_drop) {    if (array_key_exists($each_drop, $_GET)) {        unset($_GET[$each_drop]);    }}unset($drops, $each_drop);if (! strlen($GLOBALS['db'])) {    $main_target = $GLOBALS['cfg']['DefaultTabServer'];} elseif (! strlen($GLOBALS['table'])) {    $_GET['db'] = $GLOBALS['db'];    $main_target = $GLOBALS['cfg']['DefaultTabDatabase'];} else {    $_GET['db'] = $GLOBALS['db'];    $_GET['table'] = $GLOBALS['table'];    $main_target = isset($GLOBALS['goto']) ? $GLOBALS['goto'] : $GLOBALS['cfg']['DefaultTabTable'];}$url_query = PMA_generate_common_url($_GET);if (isset($GLOBALS['target']) && is_string($GLOBALS['target']) && !empty($GLOBALS['target']) && in_array($GLOBALS['target'], $goto_whitelist)) {    $main_target = $GLOBALS['target'];}$main_target .= $url_query;$lang_iso_code = $GLOBALS['available_languages'][$GLOBALS['lang']][1];// start outputrequire './libraries/header_http.inc.php';?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"><html xmlns="http://www.w3.org/1999/xhtml"    xml:lang="<?php echo $lang_iso_code; ?>"    lang="<?php echo $lang_iso_code; ?>"    dir="<?php echo $GLOBALS['text_dir']; ?>"><head><link rel="icon" href="./favicon.ico" type="image/x-icon" /><link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" /><title>phpMyAdmin <?php echo PMA_VERSION; ?> -    <?php echo htmlspecialchars($HTTP_HOST); ?></title><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><meta name="robots" content="noindex,nofollow" /><script type="text/javascript">// <![CDATA[    // definitions used in common.js    var common_query = '<?php echo PMA_escapeJsString(PMA_generate_common_url('', '', '&'));?>';    var opendb_url = '<?php echo PMA_escapeJsString($GLOBALS['cfg']['DefaultTabDatabase']); ?>';    var safari_browser = <?php echo PMA_USR_BROWSER_AGENT == 'SAFARI' ? 'true' : 'false' ?>;    var querywindow_height = <?php echo PMA_escapeJsString($GLOBALS['cfg']['QueryWindowHeight']); ?>;    var querywindow_width = <?php echo PMA_escapeJsString($GLOBALS['cfg']['QueryWindowWidth']); ?>;    var collation_connection = '<?php echo PMA_escapeJsString($GLOBALS['collation_connection']); ?>';    var lang = '<?php echo PMA_escapeJsString($GLOBALS['lang']); ?>';    var server = '<?php echo PMA_escapeJsString($GLOBALS['server']); ?>';    var table = '<?php echo PMA_escapeJsString($GLOBALS['table']); ?>';    var db    = '<?php echo PMA_escapeJsString($GLOBALS['db']); ?>';    var token = '<?php echo PMA_escapeJsString($_SESSION[' PMA_token ']); ?>';    var text_dir = '<?php echo PMA_escapeJsString($GLOBALS['text_dir']); ?>';    var pma_absolute_uri = '<?php echo PMA_escapeJsString($GLOBALS['cfg']['PmaAbsoluteUri']); ?>';    var pma_text_default_tab = '<?php echo PMA_escapeJsString(PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabTable'])); ?>';    var pma_text_left_default_tab = '<?php echo PMA_escapeJsString(PMA_getTitleForTarget($GLOBALS['cfg']['LeftDefaultTabTable'])); ?>';    // for content and navigation frames    var frame_content = 0;    var frame_navigation = 0;    function getFrames() {<?php if ($GLOBALS['text_dir'] === 'ltr') { ?>        frame_content = window.frames[1];        frame_navigation = window.frames[0];<?php } else { ?>        frame_content = window.frames[0];        frame_navigation = window.frames[1];<?php } ?>    }    var onloadCnt = 0;    var onLoadHandler = window.onload;    window.onload = function() {        if (onloadCnt == 0) {            if (typeof(onLoadHandler) == "function") {                onLoadHandler();            }            if (typeof(getFrames) != 'undefined' && typeof(getFrames) == 'function') {                getFrames();            }            onloadCnt++;        }    };// ]]></script><?phpecho PMA_includeJS('jquery/jquery-1.6.2.js');echo PMA_includeJS('update-location.js');echo PMA_includeJS('common.js');?></head><frameset cols="<?phpif ($GLOBALS['text_dir'] === 'rtl') {    echo '*,';}echo $GLOBALS['cfg']['NaviWidth'];if ($GLOBALS['text_dir'] === 'ltr') {    echo ',*';}?>" rows="*" id="mainFrameset">    <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    <frame frameborder="0" id="frame_navigation"        src="navigation.php<?php echo $url_query; ?>"        name="frame_navigation" />    <?php } ?>    <frame frameborder="0" id="frame_content"        src="<?php echo $main_target; ?>"        name="frame_content" />    <?php if ($GLOBALS['text_dir'] === 'rtl') { ?>    <frame frameborder="0" id="frame_navigation"        src="navigation.php<?php echo $url_query; ?>"        name="frame_navigation" />    <?php } ?>    <noframes>        <body>            <p><?php echo __('phpMyAdmin is more friendly with a <b>frames-capable</b> browser.'); ?></p>        </body>    </noframes></frameset></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Configuration handling. * * @package PhpMyAdmin *//** * Load vendor configuration. */require './libraries/vendor_config.php';/** * Configuration class * * @package PhpMyAdmin */class PMA_Config{    /**     * @var string  default config source     */    var $default_source = './libraries/config.default.php';    /**     * @var array   default configuration settings     */    var $default = array();    /**     * @var array   configuration settings     */    var $settings = array();    /**     * @var string  config source     */    var $source = '';    /**     * @var int     source modification time     */    var $source_mtime = 0;    var $default_source_mtime = 0;    var $set_mtime = 0;    /**     * @var boolean     */    var $error_config_file = false;    /**     * @var boolean     */    var $error_config_default_file = false;    /**     * @var boolean     */    var $error_pma_uri = false;    /**     * @var array     */    var $default_server = array();    /**     * @var boolean whether init is done or not     * set this to false to force some initial checks     * like checking for required functions     */    var $done = false;    /**     * constructor     *     * @param string $source source to read config from     */    function __construct($source = null)    {        $this->settings = array();        // functions need to refresh in case of config file changed goes in        // PMA_Config::load()        $this->load($source);        // other settings, independent from config file, comes in        $this->checkSystem();        $this->checkIsHttps();    }    /**     * sets system and application settings     *     * @return nothing     */    function checkSystem()    {        $this->set('PMA_VERSION', '3.5.0');        /**         * @deprecated         */        $this->set('PMA_THEME_VERSION', 2);        /**         * @deprecated         */        $this->set('PMA_THEME_GENERATION', 2);        $this->checkPhpVersion();        $this->checkWebServerOs();        $this->checkWebServer();        $this->checkGd2();        $this->checkClient();        $this->checkUpload();        $this->checkUploadSize();        $this->checkOutputCompression();    }    /**     * whether to use gzip output compression or not     *     * @return nothing     */    function checkOutputCompression()    {        // If zlib output compression is set in the php configuration file, no        // output buffering should be run        if (@ini_get('zlib.output_compression')) {            $this->set('OBGzip', false);        }        // disable output-buffering (if set to 'auto') for IE6, else enable it.        if (strtolower($this->get('OBGzip')) == 'auto') {            if ($this->get('PMA_USR_BROWSER_AGENT') == 'IE'                && $this->get('PMA_USR_BROWSER_VER') >= 6                && $this->get('PMA_USR_BROWSER_VER') < 7            ) {                $this->set('OBGzip', false);            } else {                $this->set('OBGzip', true);            }        }    }    /**     * Determines platform (OS), browser and version of the user     * Based on a phpBuilder article:     *     * @see http://www.phpbuilder.net/columns/tim20000821.php     *     * @return nothing     */    function checkClient()    {        if (PMA_getenv('HTTP_USER_AGENT')) {            $HTTP_USER_AGENT = PMA_getenv('HTTP_USER_AGENT');        } elseif (! isset($HTTP_USER_AGENT)) {            $HTTP_USER_AGENT = '';        }        // 1. Platform        if (strstr($HTTP_USER_AGENT, 'Win')) {            $this->set('PMA_USR_OS', 'Win');        } elseif (strstr($HTTP_USER_AGENT, 'Mac')) {            $this->set('PMA_USR_OS', 'Mac');        } elseif (strstr($HTTP_USER_AGENT, 'Linux')) {            $this->set('PMA_USR_OS', 'Linux');        } elseif (strstr($HTTP_USER_AGENT, 'Unix')) {            $this->set('PMA_USR_OS', 'Unix');        } elseif (strstr($HTTP_USER_AGENT, 'OS/2')) {            $this->set('PMA_USR_OS', 'OS/2');        } else {            $this->set('PMA_USR_OS', 'Other');        }        // 2. browser and version        // (must check everything else before Mozilla)        if (preg_match(            '@Opera(/| )([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[2]);            $this->set('PMA_USR_BROWSER_AGENT', 'OPERA');        } elseif (preg_match(            '@MSIE ([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'IE');        } elseif (preg_match(            '@OmniWeb/([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'OMNIWEB');        // Konqueror 2.2.2 says Konqueror/2.2.2        // Konqueror 3.0.3 says Konqueror/3        } elseif (preg_match(            '@(Konqueror/)(.*)(;)@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[2]);            $this->set('PMA_USR_BROWSER_AGENT', 'KONQUEROR');        } elseif (preg_match(            '@Mozilla/([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version)            && preg_match('@Safari/([0-9]*)@', $HTTP_USER_AGENT, $log_version2)        ) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1] . '.' . $log_version2[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'SAFARI');        } elseif (preg_match('@rv:1.9(.*)Gecko@', $HTTP_USER_AGENT)) {            $this->set('PMA_USR_BROWSER_VER', '1.9');            $this->set('PMA_USR_BROWSER_AGENT', 'GECKO');        } elseif (            preg_match('@Mozilla/([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'MOZILLA');        } else {            $this->set('PMA_USR_BROWSER_VER', 0);            $this->set('PMA_USR_BROWSER_AGENT', 'OTHER');        }    }    /**     * Whether GD2 is present     *     * @return nothing     */    function checkGd2()    {        if ($this->get('GD2Available') == 'yes') {            $this->set('PMA_IS_GD2', 1);        } elseif ($this->get('GD2Available') == 'no') {            $this->set('PMA_IS_GD2', 0);        } else {            if (!@function_exists('imagecreatetruecolor')) {                $this->set('PMA_IS_GD2', 0);            } else {                if (@function_exists('gd_info')) {                    $gd_nfo = gd_info();                    if (strstr($gd_nfo["GD Version"], '2.')) {                        $this->set('PMA_IS_GD2', 1);                    } else {                        $this->set('PMA_IS_GD2', 0);                    }                } else {                    /* We must do hard way... but almost no chance to execute this */                    ob_start();                    phpinfo(INFO_MODULES); /* Only modules */                    $a = strip_tags(ob_get_contents());                    ob_end_clean();                    /* Get GD version string from phpinfo output */                    if (preg_match('@GD Version[[:space:]]*\(.*\)@', $a, $v)) {                        if (strstr($v, '2.')) {                            $this->set('PMA_IS_GD2', 1);                        } else {                            $this->set('PMA_IS_GD2', 0);                        }                    } else {                        $this->set('PMA_IS_GD2', 0);                    }                }            }        }    }    /**     * Whether the Web server php is running on is IIS     *     * @return nothing     */    function checkWebServer()    {        if (PMA_getenv('SERVER_SOFTWARE')            // some versions return Microsoft-IIS, some Microsoft/IIS            // we could use a preg_match() but it's slower            && stristr(PMA_getenv('SERVER_SOFTWARE'), 'Microsoft')            && stristr(PMA_getenv('SERVER_SOFTWARE'), 'IIS')        ) {            $this->set('PMA_IS_IIS', 1);        } else {            $this->set('PMA_IS_IIS', 0);        }    }    /**     * Whether the os php is running on is windows or not     *     * @return nothing     */    function checkWebServerOs()    {        // Default to Unix or Equiv        $this->set('PMA_IS_WINDOWS', 0);        // If PHP_OS is defined then continue        if (defined('PHP_OS')) {            if (stristr(PHP_OS, 'win')) {                // Is it some version of Windows                $this->set('PMA_IS_WINDOWS', 1);            } elseif (stristr(PHP_OS, 'OS/2')) {                // Is it OS/2 (No file permissions like Windows)                $this->set('PMA_IS_WINDOWS', 1);            }        }    }    /**     * detects PHP version     *     * @return nothing     */    function checkPhpVersion()    {        $match = array();        if (! preg_match(            '@([0-9]{1,2}).([0-9]{1,2}).([0-9]{1,2})@',            phpversion(),            $match        )) {            preg_match(                '@([0-9]{1,2}).([0-9]{1,2})@',                phpversion(),                $match            );        }        if (isset($match) && ! empty($match[1])) {            if (! isset($match[2])) {                $match[2] = 0;            }            if (! isset($match[3])) {                $match[3] = 0;            }            $this->set(                'PMA_PHP_INT_VERSION',                (int) sprintf('%d%02d%02d', $match[1], $match[2], $match[3])            );        } else {            $this->set('PMA_PHP_INT_VERSION', 0);        }        $this->set('PMA_PHP_STR_VERSION', phpversion());    }    /**     * loads default values from default source     *     * @return  boolean     success     */    function loadDefaults()    {        $cfg = array();        if (! file_exists($this->default_source)) {            $this->error_config_default_file = true;            return false;        }        include $this->default_source;        $this->default_source_mtime = filemtime($this->default_source);        $this->default_server = $cfg['Servers'][1];        unset($cfg['Servers']);        $this->default = $cfg;        $this->settings = PMA_array_merge_recursive($this->settings, $cfg);        $this->error_config_default_file = false;        return true;    }    /**     * loads configuration from $source, usally the config file     * should be called on object creation     *     * @param string $source config file     *     * @return bool     */    function load($source = null)    {        $this->loadDefaults();        if (null !== $source) {            $this->setSource($source);        }        if (! $this->checkConfigSource()) {            return false;        }        $cfg = array();        /**         * Parses the configuration file, the eval is used here to avoid         * problems with trailing whitespace, what is often a problem.         */        $old_error_reporting = error_reporting(0);        $eval_result = eval('?' . '>' . trim(file_get_contents($this->getSource())));        error_reporting($old_error_reporting);        if ($eval_result === false) {            $this->error_config_file = true;        } else {            $this->error_config_file = false;            $this->source_mtime = filemtime($this->getSource());        }        /**         * Backward compatibility code         */        if (!empty($cfg['DefaultTabTable'])) {            $cfg['DefaultTabTable'] = str_replace(                '_properties',                '',                str_replace(                    'tbl_properties.php',                    'tbl_sql.php',                    $cfg['DefaultTabTable']                )            );        }        if (!empty($cfg['DefaultTabDatabase'])) {            $cfg['DefaultTabDatabase'] = str_replace(                '_details',                '',                str_replace(                    'db_details.php',                    'db_sql.php',                    $cfg['DefaultTabDatabase']                )            );        }        $this->settings = PMA_array_merge_recursive($this->settings, $cfg);        $this->checkPmaAbsoluteUri();        $this->checkFontsize();        $this->checkPermissions();        // Handling of the collation must be done after merging of $cfg        // (from config.inc.php) so that $cfg['DefaultConnectionCollation']        // can have an effect. Note that the presence of collation        // information in a cookie has priority over what is defined        // in the default or user's config files.        /**         * @todo check validity of $_COOKIE['pma_collation_connection']         */        if (! empty($_COOKIE['pma_collation_connection'])) {            $this->set(                'collation_connection',                strip_tags($_COOKIE['pma_collation_connection'])            );        } else {            $this->set(                'collation_connection',                $this->get('DefaultConnectionCollation')            );        }        // Now, a collation information could come from REQUEST        // (an example of this: the collation selector in main.php)        // so the following handles the setting of collation_connection        // and later, in common.inc.php, the cookie will be set        // according to this.        $this->checkCollationConnection();        return true;    }    /**     * Loads user preferences and merges them with current config     * must be called after control connection has been estabilished     *     * @return boolean     */    function loadUserPreferences()    {        // index.php should load these settings, so that phpmyadmin.css.php        // will have everything avaiable in session cache        $server = isset($GLOBALS['server'])            ? $GLOBALS['server']            : (!empty($GLOBALS['cfg']['ServerDefault'])                ? $GLOBALS['cfg']['ServerDefault']                : 0);        $cache_key = 'server_' . $server;        if ($server > 0 && !defined('PMA_MINIMUM_COMMON')) {            $config_mtime = max($this->default_source_mtime, $this->source_mtime);            // cache user preferences, use database only when needed            if (! isset($_SESSION['cache'][$cache_key]['userprefs'])                || $_SESSION['cache'][$cache_key]['config_mtime'] < $config_mtime            ) {                // load required libraries                include_once './libraries/user_preferences.lib.php';                $prefs = PMA_load_userprefs();                $_SESSION['cache'][$cache_key]['userprefs']                    = PMA_apply_userprefs($prefs['config_data']);                $_SESSION['cache'][$cache_key]['userprefs_mtime'] = $prefs['mtime'];                $_SESSION['cache'][$cache_key]['userprefs_type'] = $prefs['type'];                $_SESSION['cache'][$cache_key]['config_mtime'] = $config_mtime;            }        } elseif ($server == 0            || ! isset($_SESSION['cache'][$cache_key]['userprefs'])        ) {            $this->set('user_preferences', false);            return;        }        $config_data = $_SESSION['cache'][$cache_key]['userprefs'];        // type is 'db' or 'session'        $this->set(            'user_preferences',            $_SESSION['cache'][$cache_key]['userprefs_type']        );        $this->set(            'user_preferences_mtime',            $_SESSION['cache'][$cache_key]['userprefs_mtime']        );        // backup some settings        $org_fontsize = $this->settings['fontsize'];        // load config array        $this->settings = PMA_array_merge_recursive($this->settings, $config_data);        $GLOBALS['cfg'] = PMA_array_merge_recursive($GLOBALS['cfg'], $config_data);        if (defined('PMA_MINIMUM_COMMON')) {            return;        }        // settings below start really working on next page load, but        // changes are made only in index.php so everything is set when        // in frames        // save theme        $tmanager = $_SESSION['PMA_Theme_Manager'];        if ($tmanager->getThemeCookie() || isset($_REQUEST['set_theme'])) {            if ((! isset($config_data['ThemeDefault'])                && $tmanager->theme->getId() != 'original')                || isset($config_data['ThemeDefault'])                && $config_data['ThemeDefault'] != $tmanager->theme->getId()            ) {                // new theme was set in common.inc.php                $this->setUserValue(                    null,                    'ThemeDefault',                    $tmanager->theme->getId(),                    'original'                );            }        } else {            // no cookie - read default from settings            if ($this->settings['ThemeDefault'] != $tmanager->theme->getId()                && $tmanager->checkTheme($this->settings['ThemeDefault'])            ) {                $tmanager->setActiveTheme($this->settings['ThemeDefault']);                $tmanager->setThemeCookie();            }        }        // save font size        if ((! isset($config_data['fontsize'])            && $org_fontsize != '82%')            || isset($config_data['fontsize'])            && $org_fontsize != $config_data['fontsize']        ) {            $this->setUserValue(null, 'fontsize', $org_fontsize, '82%');        }        // save language        if (isset($_COOKIE['pma_lang']) || isset($_POST['lang'])) {            if ((! isset($config_data['lang'])                && $GLOBALS['lang'] != 'en')                || isset($config_data['lang'])                && $GLOBALS['lang'] != $config_data['lang']            ) {                $this->setUserValue(null, 'lang', $GLOBALS['lang'], 'en');            }        } else {            // read language from settings            if (isset($config_data['lang']) && PMA_langSet($config_data['lang'])) {                $this->setCookie('pma_lang', $GLOBALS['lang']);            }        }        // save connection collation        if (isset($_COOKIE['pma_collation_connection'])            || isset($_POST['collation_connection'])        ) {            if ((! isset($config_data['collation_connection'])                && $GLOBALS['collation_connection'] != 'utf8_general_ci')                || isset($config_data['collation_connection'])                && $GLOBALS['collation_connection']                    != $config_data['collation_connection']            ) {                $this->setUserValue(                    null,                    'collation_connection',                    $GLOBALS['collation_connection'],                    'utf8_general_ci'                );            }        } else {            // read collation from settings            if (isset($config_data['collation_connection'])) {                $GLOBALS['collation_connection']                    = $config_data['collation_connection'];                $this->setCookie(                    'pma_collation_connection',                    $GLOBALS['collation_connection']                );            }        }    }    /**     * Sets config value which is stored in user preferences (if available)     * or in a cookie.     *     * If user preferences are not yet initialized, option is applied to     * global config and added to a update queue, which is processed     * by {@link loadUserPreferences()}     *     * @param string $cookie_name   can be null     * @param string $cfg_path     * @param mixed  $new_cfg_value new value     * @param mixed  $default_value default value     *     * @return nothing     */    function setUserValue($cookie_name, $cfg_path, $new_cfg_value, $default_value = null)    {        // use permanent user preferences if possible        $prefs_type = $this->get('user_preferences');        if ($prefs_type) {            include_once './libraries/user_preferences.lib.php';            if ($default_value === null) {                $default_value = PMA_array_read($cfg_path, $this->default);            }            PMA_persist_option($cfg_path, $new_cfg_value, $default_value);        }        if ($prefs_type != 'db' && $cookie_name) {            // fall back to cookies            if ($default_value === null) {                $default_value = PMA_array_read($cfg_path, $this->settings);            }            $this->setCookie($cookie_name, $new_cfg_value, $default_value);        }        PMA_array_write($cfg_path, $GLOBALS['cfg'], $new_cfg_value);        PMA_array_write($cfg_path, $this->settings, $new_cfg_value);    }    /**     * Reads value stored by {@link setUserValue()}     *     * @param string $cookie_name cookie name     * @param mixed  $cfg_value   config value     *     * @return mixed     */    function getUserValue($cookie_name, $cfg_value)    {        $cookie_exists = isset($_COOKIE) && !empty($_COOKIE[$cookie_name]);        $prefs_type = $this->get('user_preferences');        if ($prefs_type == 'db') {            // permanent user preferences value exists, remove cookie            if ($cookie_exists) {                $this->removeCookie($cookie_name);            }        } else if ($cookie_exists) {            return $_COOKIE[$cookie_name];        }        // return value from $cfg array        return $cfg_value;    }    /**     * set source     *     * @param string  $source     *     * @return nothing     */    function setSource($source)    {        $this->source = trim($source);    }    /**     * checks if the config folder still exists and terminates app if true     *     * @return nothing     */    function checkConfigFolder()    {        // Refuse to work while there still might be some world writable dir:        if (is_dir('./config')) {            die(__('Remove "./config" directory before using phpMyAdmin!'));        }    }    /**     * check config source     *     * @return  boolean whether source is valid or not     */    function checkConfigSource()    {        if (! $this->getSource()) {            // no configuration file set at all            return false;        }        if (! file_exists($this->getSource())) {            $this->source_mtime = 0;            return false;        }        if (! is_readable($this->getSource())) {            $this->source_mtime = 0;            die(                sprintf(__('Existing configuration file (%s) is not readable.'),                    $this->getSource()                )            );        }        return true;    }    /**     * verifies the permissions on config file (if asked by configuration)     * (must be called after config.inc.php has been merged)     *     * @return nothing     */    function checkPermissions()    {        // Check for permissions (on platforms that support it):        if ($this->get('CheckConfigurationPermissions')) {            $perms = @fileperms($this->getSource());            if (!($perms === false) && ($perms & 2)) {                // This check is normally done after loading configuration                $this->checkWebServerOs();                if ($this->get('PMA_IS_WINDOWS') == 0) {                    $this->source_mtime = 0;                    die(__('Wrong permissions on configuration file, should not be world writable!'));                }            }        }    }    /**     * returns specific config setting     *     * @param string $setting config setting     *     * @return mixed value     */    function get($setting)    {        if (isset($this->settings[$setting])) {            return $this->settings[$setting];        }        return null;    }    /**     * sets configuration variable     *     * @param string $setting configuration option     * @param string $value   new value for configuration option     *     * @return nothing     */    function set($setting, $value)    {        if (! isset($this->settings[$setting])            || $this->settings[$setting] != $value        ) {            $this->settings[$setting] = $value;            $this->set_mtime = time();        }    }    /**     * returns source for current config     *     * @return  string  config source     */    function getSource()    {        return $this->source;    }    /**     * returns a unique value to force a CSS reload if either the config     * or the theme changes     * must also check the pma_fontsize cookie in case there is no     * config file     *     * @return int Summary of unix timestamps and fontsize,     * to be unique on theme parameters change     */    function getThemeUniqueValue()    {        if (null !== $this->get('fontsize')) {            $fontsize = intval($this->get('fontsize'));        } elseif (isset($_COOKIE['pma_fontsize'])) {            $fontsize = intval($_COOKIE['pma_fontsize']);        } else {            $fontsize = 0;        }        return (            $fontsize +            $this->source_mtime +            $this->default_source_mtime +            $this->get('user_preferences_mtime') +            $_SESSION['PMA_Theme']->mtime_info +            $_SESSION['PMA_Theme']->filesize_info);    }    /**     * $cfg['PmaAbsoluteUri'] is a required directive else cookies won't be     * set properly and, depending on browsers, inserting or updating a     * record might fail     *     * @return bool     */    function checkPmaAbsoluteUri()    {        // Setup a default value to let the people and lazy sysadmins work anyway,        // they'll get an error if the autodetect code doesn't work        $pma_absolute_uri = $this->get('PmaAbsoluteUri');        $is_https = $this->detectHttps();        if (strlen($pma_absolute_uri) < 5) {            $url = array();            // If we don't have scheme, we didn't have full URL so we need to            // dig deeper            if (empty($url['scheme'])) {                // Scheme                if ($is_https) {                    $url['scheme'] = 'https';                } else {                    $url['scheme'] = 'http';                }                // Host and port                if (PMA_getenv('HTTP_HOST')) {                    // Prepend the scheme before using parse_url() since this                    // is not part of the RFC2616 Host request-header                    $parsed_url = parse_url(                        $url['scheme'] . '://' . PMA_getenv('HTTP_HOST')                    );                    if (!empty($parsed_url['host'])) {                        $url = $parsed_url;                    } else {                        $url['host'] = PMA_getenv('HTTP_HOST');                    }                } elseif (PMA_getenv('SERVER_NAME')) {                    $url['host'] = PMA_getenv('SERVER_NAME');                } else {                    $this->error_pma_uri = true;                    return false;                }                // If we didn't set port yet...                if (empty($url['port']) && PMA_getenv('SERVER_PORT')) {                    $url['port'] = PMA_getenv('SERVER_PORT');                }                // And finally the path could be already set from REQUEST_URI                if (empty($url['path'])) {                    $path = parse_url($GLOBALS['PMA_PHP_SELF']);                    $url['path'] = $path['path'];                }            }            // Make url from parts we have            $pma_absolute_uri = $url['scheme'] . '://';            // Was there user information?            if (!empty($url['user'])) {                $pma_absolute_uri .= $url['user'];                if (!empty($url['pass'])) {                    $pma_absolute_uri .= ':' . $url['pass'];                }                $pma_absolute_uri .= '@';            }            // Add hostname            $pma_absolute_uri .= $url['host'];            // Add port, if it not the default one            if (! empty($url['port'])                && (($url['scheme'] == 'http' && $url['port'] != 80)                || ($url['scheme'] == 'https' && $url['port'] != 443))            ) {                $pma_absolute_uri .= ':' . $url['port'];            }            // And finally path, without script name, the 'a' is there not to            // strip our directory, when path is only /pmadir/ without filename.            // Backslashes returned by Windows have to be changed.            // Only replace backslashes by forward slashes if on Windows,            // as the backslash could be valid on a non-Windows system.            $this->checkWebServerOs();            if ($this->get('PMA_IS_WINDOWS') == 1) {                $path = str_replace("\\", "/", dirname($url['path'] . 'a'));            } else {                $path = dirname($url['path'] . 'a');            }            // To work correctly within transformations overview:            if (defined('PMA_PATH_TO_BASEDIR') && PMA_PATH_TO_BASEDIR == '../../') {                if ($this->get('PMA_IS_WINDOWS') == 1) {                    $path = str_replace("\\", "/", dirname(dirname($path)));                } else {                    $path = dirname(dirname($path));                }            }            // PHP's dirname function would have returned a dot            // when $path contains no slash            if ($path == '.') {                $path = '';            }            // in vhost situations, there could be already an ending slash            if (substr($path, -1) != '/') {                $path .= '/';            }            $pma_absolute_uri .= $path;            // We used to display a warning if PmaAbsoluteUri wasn't set, but now            // the autodetect code works well enough that we don't display the            // warning at all. The user can still set PmaAbsoluteUri manually.            // See            // http://sf.net/tracker/?func=detail&aid=1257134&group_id=23067&atid=377411        } else {            // The URI is specified, however users do often specify this            // wrongly, so we try to fix this.            // Adds a trailing slash et the end of the phpMyAdmin uri if it            // does not exist.            if (substr($pma_absolute_uri, -1) != '/') {                $pma_absolute_uri .= '/';            }            // If URI doesn't start with http:// or https://, we will add            // this.            if (substr($pma_absolute_uri, 0, 7) != 'http://'                && substr($pma_absolute_uri, 0, 8) != 'https://'            ) {                $pma_absolute_uri                    = ($is_https ? 'https' : 'http')                    . ':' . (substr($pma_absolute_uri, 0, 2) == '//' ? '' : '//')                    . $pma_absolute_uri;            }        }        $this->set('PmaAbsoluteUri', $pma_absolute_uri);    }    /**     * check selected collation_connection     *     * @todo check validity of $_REQUEST['collation_connection']     *     * @return nothing     */    function checkCollationConnection()    {        if (! empty($_REQUEST['collation_connection'])) {            $this->set(                'collation_connection',                strip_tags($_REQUEST['collation_connection'])            );        }    }    /**     * checks for font size configuration, and sets font size as requested by user     *     * @return nothing     */    function checkFontsize()    {        $new_fontsize = '';        if (isset($_GET['set_fontsize'])) {            $new_fontsize = $_GET['set_fontsize'];        } elseif (isset($_POST['set_fontsize'])) {            $new_fontsize = $_POST['set_fontsize'];        } elseif (isset($_COOKIE['pma_fontsize'])) {            $new_fontsize = $_COOKIE['pma_fontsize'];        }        if (preg_match('/^[0-9.]+(px|em|pt|\%)$/', $new_fontsize)) {            $this->set('fontsize', $new_fontsize);        } elseif (! $this->get('fontsize')) {            // 80% would correspond to the default browser font size            // of 16, but use 82% to help read the monoface font            $this->set('fontsize', '82%');        }        $this->setCookie('pma_fontsize', $this->get('fontsize'), '82%');    }    /**     * checks if upload is enabled     *     * @return nothing     */    function checkUpload()    {        if (ini_get('file_uploads')) {            $this->set('enable_upload', true);            // if set "php_admin_value file_uploads Off" in httpd.conf            // ini_get() also returns the string "Off" in this case:            if ('off' == strtolower(ini_get('file_uploads'))) {                $this->set('enable_upload', false);            }        } else {            $this->set('enable_upload', false);        }    }    /**     * Maximum upload size as limited by PHP     * Used with permission from Moodle (http://moodle.org) by Martin Dougiamas     *     * this section generates $max_upload_size in bytes     *     * @return nothing     */    function checkUploadSize()    {        if (! $filesize = ini_get('upload_max_filesize')) {            $filesize = "5M";        }        if ($postsize = ini_get('post_max_size')) {            $this->set(                'max_upload_size',                min(PMA_get_real_size($filesize), PMA_get_real_size($postsize))            );        } else {            $this->set('max_upload_size', PMA_get_real_size($filesize));        }    }    /**     * check for https     *     * @return nothing     */    function checkIsHttps()    {        $this->set('is_https', $this->isHttps());    }    /**     * Checks if protocol is https     *     * This function checks if the https protocol is used in the PmaAbsoluteUri     * configuration setting, as opposed to detectHttps() which checks if the     * https protocol is used on the active connection.     *     * @return bool     */    public function isHttps()    {        static $is_https = null;        if (null !== $is_https) {            return $is_https;        }        $url = parse_url($this->get('PmaAbsoluteUri'));        if (isset($url['scheme']) && $url['scheme'] == 'https') {            $is_https = true;        } else {            $is_https = false;        }        return $is_https;    }    /**     * Detects whether https appears to be used.     *     * This function checks if the https protocol is used in the current connection     * with the webserver, based on environment variables.     * Please note that this just detects what we see, so     * it completely ignores things like reverse proxies.     *     * @return bool     */    function detectHttps()    {        $is_https = false;        $url = array();        // At first we try to parse REQUEST_URI, it might contain full URL,        if (PMA_getenv('REQUEST_URI')) {            // produces E_WARNING if it cannot get parsed, e.g. '/foobar:/'            $url = @parse_url(PMA_getenv('REQUEST_URI'));            if ($url === false) {                $url = array();            }        }        // If we don't have scheme, we didn't have full URL so we need to        // dig deeper        if (empty($url['scheme'])) {            // Scheme            if (PMA_getenv('HTTP_SCHEME')) {                $url['scheme'] = PMA_getenv('HTTP_SCHEME');            } elseif (PMA_getenv('HTTPS') && strtolower(PMA_getenv('HTTPS')) == 'on') {                $url['scheme'] = 'https';            } elseif (PMA_getenv('HTTP_X_FORWARDED_PROTO')) {                $url['scheme'] = strtolower(PMA_getenv('HTTP_X_FORWARDED_PROTO'));            } elseif (PMA_getenv('HTTP_FRONT_END_HTTPS') && strtolower(PMA_getenv('HTTP_FRONT_END_HTTPS')) == 'on') {                $url['scheme'] = 'https';            } else {                $url['scheme'] = 'http';            }        }        if (isset($url['scheme']) && $url['scheme'] == 'https') {            $is_https = true;        } else {            $is_https = false;        }        return $is_https;    }    /**     * detect correct cookie path     *     * @return nothing     */    function checkCookiePath()    {        $this->set('cookie_path', $this->getCookiePath());    }    /**     * Get cookie path     *     * @return string     */    public function getCookiePath()    {        static $cookie_path = null;        if (null !== $cookie_path) {            return $cookie_path;        }        $parsed_url = parse_url($this->get('PmaAbsoluteUri'));        $cookie_path   = $parsed_url['path'];        return $cookie_path;    }    /**     * enables backward compatibility     *     * @return nothing     */    function enableBc()    {        $GLOBALS['cfg']             = $this->settings;        $GLOBALS['default_server']  = $this->default_server;        unset($this->default_server);        $GLOBALS['collation_connection'] = $this->get('collation_connection');        $GLOBALS['is_upload']       = $this->get('enable_upload');        $GLOBALS['max_upload_size'] = $this->get('max_upload_size');        $GLOBALS['cookie_path']     = $this->get('cookie_path');        $GLOBALS['is_https']        = $this->get('is_https');        $defines = array(            'PMA_VERSION',            'PMA_THEME_VERSION',            'PMA_THEME_GENERATION',            'PMA_PHP_STR_VERSION',            'PMA_PHP_INT_VERSION',            'PMA_IS_WINDOWS',            'PMA_IS_IIS',            'PMA_IS_GD2',            'PMA_USR_OS',            'PMA_USR_BROWSER_VER',            'PMA_USR_BROWSER_AGENT'            );        foreach ($defines as $define) {            if (! defined($define)) {                define($define, $this->get($define));            }        }    }    /**     * @todo finish     *     * @return nothing     */    function save()    {    }    /**     * returns options for font size selection     *     * @static     * @param string $current_size current selected font size with unit     *     * @return array selectable font sizes     */    static protected function _getFontsizeOptions($current_size = '82%')    {        $unit = preg_replace('/[0-9.]*/', '', $current_size);        $value = preg_replace('/[^0-9.]*/', '', $current_size);        $factors = array();        $options = array();        $options["$value"] = $value . $unit;        if ($unit === '%') {            $factors[] = 1;            $factors[] = 5;            $factors[] = 10;        } elseif ($unit === 'em') {            $factors[] = 0.05;            $factors[] = 0.2;            $factors[] = 1;        } elseif ($unit === 'pt') {            $factors[] = 0.5;            $factors[] = 2;        } elseif ($unit === 'px') {            $factors[] = 1;            $factors[] = 5;            $factors[] = 10;        } else {            //unknown font size unit            $factors[] = 0.05;            $factors[] = 0.2;            $factors[] = 1;            $factors[] = 5;            $factors[] = 10;        }        foreach ($factors as $key => $factor) {            $option_inc = $value + $factor;            $option_dec = $value - $factor;            while (count($options) < 21) {                $options["$option_inc"] = $option_inc . $unit;                if ($option_dec > $factors[0]) {                    $options["$option_dec"] = $option_dec . $unit;                }                $option_inc += $factor;                $option_dec -= $factor;                if (isset($factors[$key + 1])                    && $option_inc >= $value + $factors[$key + 1]                ) {                    break;                }            }        }        ksort($options);        return $options;    }    /**     * returns html selectbox for font sizes     *     * @static     * @param string $current_size currently slected font size with unit     *     * @return string html selectbox     */    static protected function _getFontsizeSelection()    {        $current_size = $GLOBALS['PMA_Config']->get('fontsize');        // for the case when there is no config file (this is supported)        if (empty($current_size)) {            if (isset($_COOKIE['pma_fontsize'])) {                $current_size = $_COOKIE['pma_fontsize'];            } else {                $current_size = '82%';            }        }        $options = PMA_Config::_getFontsizeOptions($current_size);        $return = '<label for="select_fontsize">' . __('Font size') . ':</label>' . "\n";        $return .= '<select name="set_fontsize" id="select_fontsize" class="autosubmit">' . "\n";        foreach ($options as $option) {            $return .= '<option value="' . $option . '"';            if ($option == $current_size) {                $return .= ' selected="selected"';            }            $return .= '>' . $option . '</option>' . "\n";        }        $return .= '</select>';        return $return;    }    /**     * return complete font size selection form     *     * @static     * @param string $current_size currently slected font size with unit     *     * @return string html selectbox     */    static public function getFontsizeForm()    {        return '<form name="form_fontsize_selection" id="form_fontsize_selection"'            . ' method="post" action="index.php" target="_parent">' . "\n"            . PMA_generate_common_hidden_inputs() . "\n"            . PMA_Config::_getFontsizeSelection() . "\n"            . '<noscript>' . "\n"            . '<input type="submit" value="' . __('Go') . '" />' . "\n"            . '</noscript>' . "\n"            . '</form>';    }    /**     * removes cookie     *     * @param string $cookie name of cookie to remove     *     * @return boolean result of setcookie()     */    function removeCookie($cookie)    {        return setcookie(            $cookie,            '',            time() - 3600,            $this->getCookiePath(),            '',            $this->isHttps()        );    }    /**     * sets cookie if value is different from current cokkie value,     * or removes if value is equal to default     *     * @param string  $cookie   name of cookie to remove     * @param mixed   $value    new cookie value     * @param string  $default  default value     * @param int     $validity validity of cookie in seconds (default is one month)     * @param bool    $httponly whether cookie is only for HTTP (and not for scripts)     *     * @return boolean result of setcookie()     */    function setCookie($cookie, $value, $default = null, $validity = null, $httponly = true)    {        if ($validity == null) {            $validity = 2592000;        }        if (strlen($value) && null !== $default && $value === $default) {            // default value is used            if (isset($_COOKIE[$cookie])) {                // remove cookie                return $this->removeCookie($cookie);            }            return false;        }        if (! strlen($value) && isset($_COOKIE[$cookie])) {            // remove cookie, value is empty            return $this->removeCookie($cookie);        }        if (! isset($_COOKIE[$cookie]) || $_COOKIE[$cookie] !== $value) {            // set cookie with new value            /* Calculate cookie validity */            if ($validity == 0) {                $v = 0;            } else {                $v = time() + $validity;            }            return setcookie(                $cookie,                $value,                $v,                $this->getCookiePath(),                '',                $this->isHttps(),                $httponly            );        }        // cookie has already $value as value        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays table structure infos like fields/columns, indexes, size, rows * and allows manipulation of indexes and columns/fields * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'tbl_structure.js';$GLOBALS['js_include'][] = 'indexes.js';/** * handle multiple field commands if required * * submit_mult_*_x comes from IE if <input type="img" ...> is used */if (isset($_REQUEST['submit_mult_change_x'])) {    $submit_mult = 'change';} elseif (isset($_REQUEST['submit_mult_drop_x'])) {    $submit_mult = 'drop';} elseif (isset($_REQUEST['submit_mult_primary_x'])) {    $submit_mult = 'primary';} elseif (isset($_REQUEST['submit_mult_index_x'])) {    $submit_mult = 'index';} elseif (isset($_REQUEST['submit_mult_unique_x'])) {    $submit_mult = 'unique';} elseif (isset($_REQUEST['submit_mult_spatial_x'])) {    $submit_mult = 'spatial';} elseif (isset($_REQUEST['submit_mult_fulltext_x'])) {    $submit_mult = 'ftext';} elseif (isset($_REQUEST['submit_mult_browse_x'])) {    $submit_mult = 'browse';} elseif (isset($_REQUEST['submit_mult'])) {    $submit_mult = $_REQUEST['submit_mult'];} elseif (isset($_REQUEST['mult_btn']) && $_REQUEST['mult_btn'] == __('Yes')) {    $submit_mult = 'row_delete';    if (isset($_REQUEST['selected'])) {        $_REQUEST['selected_fld'] = $_REQUEST['selected'];    }}if (! empty($submit_mult) && isset($_REQUEST['selected_fld'])) {    $err_url = 'tbl_structure.php?' . PMA_generate_common_url($db, $table);    if ($submit_mult == 'browse') {        // browsing the table displaying only selected fields/columns        $GLOBALS['active_page'] = 'sql.php';        $sql_query = '';        foreach ($_REQUEST['selected_fld'] as $idx => $sval) {            if ($sql_query == '') {                $sql_query .= 'SELECT ' . PMA_backquote($sval);            } else {                $sql_query .=  ', ' . PMA_backquote($sval);            }        }        // what is this htmlspecialchars() for??        //$sql_query .= ' FROM ' . PMA_backquote(htmlspecialchars($table));        $sql_query .= ' FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table);        include './sql.php';        exit;    } else {        // handle multiple field commands        // handle confirmation of deleting multiple fields/columns        $action = 'tbl_structure.php';        include './libraries/mult_submits.inc.php';        //require_once './libraries/header.inc.php';        //require_once './libraries/tbl_links.inc.php';        if (empty($message)) {            $message = PMA_Message::success();        }    }}/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam();/** * Runs common work */require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_structure.php&amp;back=tbl_structure.php';$url_params['goto'] = 'tbl_structure.php';$url_params['back'] = 'tbl_structure.php';/** * Prepares the table structure display *//** * Gets tables informations */require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';require_once './libraries/Index.class.php';// 2. Gets table keys and retains them// @todo should be: $server->db($db)->table($table)->primary()$primary = PMA_Index::getPrimary($table, $db);$columns_with_unique_index = array();foreach (PMA_Index::getFromTable($table, $db) as $index) {    if ($index->isUnique() && $index->getChoice() == 'UNIQUE') {        $columns = $index->getColumns();        foreach ($columns as $column_name => $dummy) {            $columns_with_unique_index[$column_name] = 1;        }    }}unset($index, $columns, $column_name, $dummy);// 3. Get fields$fields = (array) PMA_DBI_get_columns($db, $table, null, true);// Get more complete field information// For now, this is done just for MySQL 4.1.2+ new TIMESTAMP options// but later, if the analyser returns more information, it// could be executed for any MySQL version and replace// the info given by SHOW FULL COLUMNS FROM.//// We also need this to correctly learn if a TIMESTAMP is NOT NULL, since// SHOW FULL COLUMNS or INFORMATION_SCHEMA incorrectly says NULL// and SHOW CREATE TABLE says NOT NULL (tested// in MySQL 4.0.25 and 5.0.21, http://bugs.mysql.com/20910).$show_create_table = PMA_DBI_fetch_value(        'SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table),        0, 1);$analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));/** * prepare table infos */// action titles (image or string)$titles = array();$titles['Change']               = PMA_getIcon('b_edit.png', __('Change'));$titles['Drop']                 = PMA_getIcon('b_drop.png', __('Drop'));$titles['NoDrop']               = PMA_getIcon('b_drop.png', __('Drop'));$titles['Primary']              = PMA_getIcon('b_primary.png', __('Primary'));$titles['Index']                = PMA_getIcon('b_index.png', __('Index'));$titles['Unique']               = PMA_getIcon('b_unique.png', __('Unique'));$titles['Spatial']              = PMA_getIcon('b_spatial.png', __('Spatial'));$titles['IdxFulltext']          = PMA_getIcon('b_ftext.png', __('Fulltext'));$titles['NoPrimary']            = PMA_getIcon('bd_primary.png', __('Primary'));$titles['NoIndex']              = PMA_getIcon('bd_index.png', __('Index'));$titles['NoUnique']             = PMA_getIcon('bd_unique.png', __('Unique'));$titles['NoSpatial']            = PMA_getIcon('bd_spatial.png', __('Spatial'));$titles['NoIdxFulltext']        = PMA_getIcon('bd_ftext.png', __('Fulltext'));$titles['BrowseDistinctValues'] = PMA_getIcon('b_browse.png', __('Browse distinct values'));// hidden action titles (image and string)$hidden_titles = array();$hidden_titles['BrowseDistinctValues'] = PMA_getIcon('b_browse.png', __('Browse distinct values'), true);$hidden_titles['Primary']              = PMA_getIcon('b_primary.png', __('Add primary key'), true);$hidden_titles['NoPrimary']            = PMA_getIcon('bd_primary.png', __('Add primary key'), true);$hidden_titles['Index']                = PMA_getIcon('b_index.png', __('Add index'), true);$hidden_titles['NoIndex']              = PMA_getIcon('bd_index.png', __('Add index'), true);$hidden_titles['Unique']               = PMA_getIcon('b_unique.png', __('Add unique index'), true);$hidden_titles['NoUnique']             = PMA_getIcon('bd_unique.png', __('Add unique index'), true);$hidden_titles['Spatial']              = PMA_getIcon('b_spatial.png', __('Add SPATIAL index'), true);$hidden_titles['NoSpatial']            = PMA_getIcon('bd_spatial.png', __('Add SPATIAL index'), true);$hidden_titles['IdxFulltext']          = PMA_getIcon('b_ftext.png', __('Add FULLTEXT index'), true);$hidden_titles['NoIdxFulltext']        = PMA_getIcon('bd_ftext.png', __('Add FULLTEXT index'), true);/** * Displays the table structure ('show table' works correct since 3.23.03) *//* TABLE INFORMATION */// table header$i = 0;?><form method="post" action="tbl_structure.php" name="fieldsForm" id="fieldsForm" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>>    <?php echo PMA_generate_common_hidden_inputs($db, $table);    echo '<input type="hidden" name="table_type" value=';    if ($db_is_information_schema) {         echo '"information_schema" />';    } else if ($tbl_is_view) {         echo '"view" />';    } else {         echo '"table" />';    } ?><table id="tablestructure" class="data"><thead><tr>    <th id="th<?php echo ++$i; ?>"></th>    <th id="th<?php echo ++$i; ?>">#</th>    <th id="th<?php echo ++$i; ?>" class="column"><?php echo __('Name'); ?></th>    <th id="th<?php echo ++$i; ?>" class="type"><?php echo __('Type'); ?></th>    <th id="th<?php echo ++$i; ?>" class="collation"><?php echo __('Collation'); ?></th>    <th id="th<?php echo ++$i; ?>" class="attributes"><?php echo __('Attributes'); ?></th>    <th id="th<?php echo ++$i; ?>" class="null"><?php echo __('Null'); ?></th>    <th id="th<?php echo ++$i; ?>" class="default"><?php echo __('Default'); ?></th>    <th id="th<?php echo ++$i; ?>" class="extra"><?php echo __('Extra'); ?></th><?php if ($db_is_information_schema || $tbl_is_view) { ?>    <th id="th<?php echo ++$i; ?>" class="view"><?php echo __('View'); ?></th><?php } else { ?>    <th colspan="7" id="th<?php echo ++$i; ?>" class="action"><?php echo __('Action'); ?></th><?php } ?></tr></thead><tbody><?phpunset($i);// table body// prepare comments$comments_map = array();$mime_map = array();if ($GLOBALS['cfg']['ShowPropertyComments']) {    include_once './libraries/transformations.lib.php';    //$cfgRelation = PMA_getRelationsParam();    $comments_map = PMA_getComments($db, $table);    if ($cfgRelation['mimework'] && $cfg['BrowseMIME']) {        $mime_map = PMA_getMIME($db, $table, true);    }}$rownum    = 0;$aryFields = array();$checked   = (!empty($checkall) ? ' checked="checked"' : '');$save_row  = array();$odd_row   = true;foreach ($fields as $row) {    $save_row[] = $row;    $rownum++;    $aryFields[]      = $row['Field'];    $type             = $row['Type'];    $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);    if ('set' == $extracted_fieldspec['type'] || 'enum' == $extracted_fieldspec['type']) {        $type_nowrap  = '';    } else {        $type_nowrap  = ' nowrap="nowrap"';    }    $type         = $extracted_fieldspec['print_type'];    if (empty($type)) {        $type     = ' ';    }    // for the case ENUM('&#8211;','&ldquo;')    $type         = htmlspecialchars($type);    // in case it is too long    $start = 0;    if (strlen($type) > $GLOBALS['cfg']['LimitChars']) {        $start = 13;        $type = '<abbr title="' . $type . '">' . substr($type, 0, $GLOBALS['cfg']['LimitChars']) . '</abbr>';    }    unset($field_charset);    if ((substr($type, $start, 4) == 'char'        || substr($type, $start, 7) == 'varchar'        || substr($type, $start, 4) == 'text'        || substr($type, $start, 8) == 'tinytext'        || substr($type, $start, 10) == 'mediumtext'        || substr($type, $start, 8) == 'longtext'        || substr($type, $start, 3) == 'set'        || substr($type, $start, 4) == 'enum')        && !$extracted_fieldspec['binary']    ) {        if (strpos($type, ' character set ')) {            $type = substr($type, 0, strpos($type, ' character set '));        }        if (!empty($row['Collation'])) {            $field_charset = $row['Collation'];        } else {            $field_charset = '';        }    } else {        $field_charset = '';    }    // Display basic mimetype [MIME]    if ($cfgRelation['commwork'] && $cfgRelation['mimework'] && $cfg['BrowseMIME'] && isset($mime_map[$row['Field']]['mimetype'])) {        $type_mime = '<br />MIME: ' . str_replace('_', '/', $mime_map[$row['Field']]['mimetype']);    } else {        $type_mime = '';    }    $attribute     = $extracted_fieldspec['attribute'];    // MySQL 4.1.2+ TIMESTAMP options    // (if on_update_current_timestamp is set, then it's TRUE)    if (isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['on_update_current_timestamp'])) {        $attribute = 'on update CURRENT_TIMESTAMP';    }    // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the    // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe    // the latter.    if (!empty($analyzed_sql[0]['create_table_fields'][$row['Field']]['type']) && $analyzed_sql[0]['create_table_fields'][$row['Field']]['type'] == 'TIMESTAMP' && $analyzed_sql[0]['create_table_fields'][$row['Field']]['timestamp_not_null']) {        $row['Null'] = '';    }    if (! isset($row['Default'])) {        if ($row['Null'] == 'YES') {            $row['Default'] = '<i>NULL</i>';        }    } else {        $row['Default'] = htmlspecialchars($row['Default']);    }    $field_encoded = urlencode($row['Field']);    $field_name    = htmlspecialchars($row['Field']);    $displayed_field_name = $field_name;    // underline commented fields and display a hover-title (CSS only)    if (isset($comments_map[$row['Field']])) {        $displayed_field_name = '<span class="commented_column" title="' . htmlspecialchars($comments_map[$row['Field']]) . '">' . $field_name . '</span>';    }    if ($primary && $primary->hasColumn($field_name)) {        $displayed_field_name = '<u>' . $field_name . '</u>';    }    echo "\n";    ?><tr class="<?php echo $odd_row ? 'odd': 'even'; $odd_row = !$odd_row; ?>">    <td align="center">        <input type="checkbox" name="selected_fld[]" value="<?php echo htmlspecialchars($row['Field']); ?>" id="checkbox_row_<?php echo $rownum; ?>" <?php echo $checked; ?> />    </td>    <td align="right">        <?php echo $rownum; ?>    </td>    <th nowrap="nowrap"><label for="checkbox_row_<?php echo $rownum; ?>"><?php echo $displayed_field_name; ?></label></th>    <td<?php echo $type_nowrap; ?>><bdo dir="ltr" xml:lang="en"><?php echo $type; echo $type_mime; ?></bdo></td>    <td><?php echo (empty($field_charset) ? '' : '<dfn title="' . PMA_getCollationDescr($field_charset) . '">' . $field_charset . '</dfn>'); ?></td>    <td nowrap="nowrap" class="column_attribute"><?php echo $attribute; ?></td>    <td><?php echo (($row['Null'] == 'YES') ? __('Yes') : __('No')); ?></td>    <td nowrap="nowrap"><?php    if (isset($row['Default'])) {        if ($extracted_fieldspec['type'] == 'bit') {            // here, $row['Default'] contains something like b'010'            echo PMA_convert_bit_default_value($row['Default']);        } else {            echo $row['Default'];        }    } else {        echo '<i>' . _pgettext('None for default', 'None') . '</i>';    } ?></td>    <td nowrap="nowrap"><?php echo strtoupper($row['Extra']); ?></td>    <td align="center" class="browse">        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('SELECT COUNT(*) AS ' . PMA_backquote(__('Rows')) . ', ' . PMA_backquote($row['Field']) . ' FROM ' . PMA_backquote($table) . ' GROUP BY ' . PMA_backquote($row['Field']) . ' ORDER BY ' . PMA_backquote($row['Field'])); ?>">            <?php echo $titles['BrowseDistinctValues']; ?></a>    </td>    <?php if (! $tbl_is_view && ! $db_is_information_schema) { ?>    <td align="center" class="edit">        <a href="tbl_alter.php?<?php echo $url_query; ?>&amp;field=<?php echo $field_encoded; ?>">            <?php echo $titles['Change']; ?></a>    </td>    <td align="center" class="drop">        <a <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="drop_column_anchor"' : ''); ?> href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' DROP ' . PMA_backquote($row['Field'])); ?>&amp;dropped_column=<?php echo urlencode($row['Field']); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('Column %s has been dropped'), htmlspecialchars($row['Field']))); ?>" >            <?php echo $titles['Drop']; ?></a>    </td>    <td align="center" class="primary">        <?php        if ($type == 'text' || $type == 'blob' || 'ARCHIVE' == $tbl_type || ($primary && $primary->hasColumn($field_name))) {            echo $titles['NoPrimary'] . "\n";            $primary_enabled = false;        } else {            echo "\n";            ?>        <a class="add_primary_key_anchor" href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ($primary ? ' DROP PRIMARY KEY,' : '') . ' ADD PRIMARY KEY(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('A primary key has been added on %s'), htmlspecialchars($row['Field']))); ?>" >            <?php echo $titles['Primary']; ?></a>            <?php $primary_enabled = true;        }        echo "\n";        ?>    </td>    <td align="center" class="unique">        <?php        if ($type == 'text' || $type == 'blob' || 'ARCHIVE' == $tbl_type || isset($columns_with_unique_index[$field_name])) {            echo $titles['NoUnique'] . "\n";            $unique_enabled = false;        } else {            echo "\n";            ?>        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD UNIQUE(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">            <?php echo $titles['Unique']; ?></a>            <?php $unique_enabled = true;        }        echo "\n";        ?>    </td>    <td align="center" class="index">        <?php        if ($type == 'text' || $type == 'blob' || 'ARCHIVE' == $tbl_type) {            echo $titles['NoIndex'] . "\n";            $index_enabled = false;        } else {            echo "\n";            ?>        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD INDEX(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">            <?php echo $titles['Index']; ?></a>            <?php            $index_enabled = true;        }        echo "\n";        ?>    </td>    <td align="center" class="spatial">        <?php        $spatial_types = array(            'geometry', 'point', 'linestring', 'polygon', 'multipoint',            'multilinestring', 'multipolygon', 'geomtrycollection'        );        if (! in_array($type, $spatial_types) || 'MYISAM' != $tbl_type) {            echo $titles['NoSpatial'] . "\n";            $spatial_enabled = false;        } else {            echo "\n";            ?>        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD SPATIAL(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">            <?php echo $titles['Spatial']; ?></a>            <?php            $spatial_enabled = true;        }        echo "\n";        ?>    </td>    <?php        if (! empty($tbl_type) && ($tbl_type == 'MYISAM' || $tbl_type == 'ARIA' || $tbl_type == 'MARIA' || ($tbl_type == 'INNODB' && PMA_MYSQL_INT_VERSION >= 50604))            // FULLTEXT is possible on TEXT, CHAR and VARCHAR            && (strpos(' ' . $type, 'text') || strpos(' ' . $type, 'char'))) {            echo "\n";            ?>    <td align="center" nowrap="nowrap" class="fulltext">        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD FULLTEXT(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">            <?php echo $titles['IdxFulltext']; ?></a>            <?php $fulltext_enabled = true; ?>    </td>            <?php        } else {            echo "\n";        ?>    <td align="center" nowrap="nowrap" class="fulltext">        <?php echo $titles['NoIdxFulltext'] . "\n"; ?>        <?php $fulltext_enabled = false; ?>    </td>        <?php        } // end if... else...        echo "\n";        ?>    <td class="more_opts" id="more_opts<?php echo $rownum; ?>">        <?php echo PMA_getImage('more.png', __('Show more actions')); ?> <?php echo __('More'); ?>        <div class="structure_actions_dropdown" id="row_<?php echo $rownum; ?>">            <div class="action_browse">                <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('SELECT COUNT(*) AS ' . PMA_backquote(__('Rows')) . ', ' . PMA_backquote($row['Field']) . ' FROM ' . PMA_backquote($table) . ' GROUP BY ' . PMA_backquote($row['Field']) . ' ORDER BY ' . PMA_backquote($row['Field'])); ?>">                    <?php echo $hidden_titles['BrowseDistinctValues']; ?>                </a>            </div>            <div <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="action_primary"' : ''); ?>>                <?php                if (isset($primary_enabled)) {                     if ($primary_enabled) { ?>                          <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ($primary ? ' DROP PRIMARY KEY,' : '') . ' ADD PRIMARY KEY(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('A primary key has been added on %s'), htmlspecialchars($row['Field']))); ?>">                             <?php echo $hidden_titles['Primary']; ?>                         </a>                     <?php                     } else {                         echo $hidden_titles['NoPrimary'];                     }                } ?>            </div>            <div class="action_unique">                <?php                if (isset($unique_enabled)) {                     if ($unique_enabled) { ?>                         <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD UNIQUE(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">                             <?php echo $hidden_titles['Unique']; ?>                         </a>                     <?php                     } else {                         echo $hidden_titles['NoUnique'];                     }                } ?>            </div>            <div class="action_index">               <?php                if (isset($index_enabled)) {                     if ($index_enabled) { ?>                         <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD INDEX(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">                             <?php echo $hidden_titles['Index']; ?>                         </a>                     <?php                     } else {                         echo $hidden_titles['NoIndex'];                     }                  } ?>            </div>            <?php if (!PMA_DRIZZLE) { ?>            <div class="action_spatial">                <?php                if (isset($spatial_enabled)) {                    if ($spatial_enabled) { ?>                        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD SPATIAL(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">                            <?php echo $hidden_titles['Spatial']; ?>                        </a>                    <?php                    } else {                        echo $hidden_titles['NoSpatial'];                    }                } ?>            </div>            <div class="action_fulltext">                <?php                if (isset($fulltext_enabled)) {                     if ($fulltext_enabled) { ?>                         <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD FULLTEXT(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">                             <?php echo $hidden_titles['IdxFulltext']; ?>                         </a>                     <?php                     } else {                         echo $hidden_titles['NoIdxFulltext'];                     }                } ?>            </div>            <?php } ?>        </div>    </td>    <?php    } // end if (! $tbl_is_view && ! $db_is_information_schema)    ?></tr>    <?php    unset($field_charset);} // end foreachecho '</tbody>' . "\n"    .'</table>' . "\n";$checkall_url = 'tbl_structure.php?' . PMA_generate_common_url($db, $table);?><img class="selectallarrow" src="<?php echo $pmaThemeImage . 'arrow_' . $text_dir . '.png'; ?>"    width="38" height="22" alt="<?php echo __('With selected:'); ?>" /><a href="<?php echo $checkall_url; ?>&amp;checkall=1"    onclick="if (markAllRows('fieldsForm')) return false;">    <?php echo __('Check All'); ?></a>/<a href="<?php echo $checkall_url; ?>"    onclick="if (unMarkAllRows('fieldsForm')) return false;">    <?php echo __('Uncheck All'); ?></a><i><?php echo __('With selected:'); ?></i><?phpPMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_browse', __('Browse'), 'b_browse.png', 'browse');if (! $tbl_is_view && ! $db_is_information_schema) {    PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_change', __('Change'), 'b_edit.png', 'change');    PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_drop', __('Drop'), 'b_drop.png', 'drop');    if ('ARCHIVE' != $tbl_type) {        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_primary', __('Primary'), 'b_primary.png', 'primary');        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_unique', __('Unique'), 'b_unique.png', 'unique');        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_index', __('Index'), 'b_index.png', 'index');    }    if (! empty($tbl_type) && $tbl_type == 'MYISAM') {        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_spatial', __('Spatial'), 'b_spatial.png', 'spatial');    }    if (! empty($tbl_type) && ($tbl_type == 'MYISAM' || $tbl_type == 'ARIA' || $tbl_type == 'MARIA')) {        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_fulltext', __('Fulltext'), 'b_ftext.png', 'ftext');    }}?></form><hr /><?php/** * Work on the table */if ($tbl_is_view) {    $create_view = PMA_DBI_get_definition($db, 'VIEW', $table);    $create_view = preg_replace('@^CREATE@', 'ALTER', $create_view);    echo PMA_linkOrButton(        'tbl_sql.php' . PMA_generate_common_url(            $url_params +            array(                'sql_query' => $create_view,                'show_query' => '1',            )        ),        PMA_getIcon('b_edit.png', __('Edit view'), true)        );}?><a href="tbl_printview.php?<?php echo $url_query; ?>"><?phpecho PMA_getIcon('b_print.png', __('Print view'), true);?></a><?phpif (! $tbl_is_view && ! $db_is_information_schema) {    // if internal relations are available, or foreign keys are supported    // ($tbl_type comes from libraries/tbl_info.inc.php)    if ($cfgRelation['relwork'] || PMA_foreignkey_supported($tbl_type)) {        ?><a href="tbl_relation.php?<?php echo $url_query; ?>"><?php        echo PMA_getIcon('b_relations.png', __('Relation view'), true);        ?></a>        <?php    }    if (!PMA_DRIZZLE) {        ?><a href="sql.php?<?php echo $url_query; ?>&amp;session_max_rows=all&amp;sql_query=<?php echo urlencode('SELECT * FROM ' . PMA_backquote($table) . ' PROCEDURE ANALYSE()'); ?>"><?php        echo PMA_getIcon('b_tblanalyse.png', __('Propose table structure'), true);        ?></a><?php        echo PMA_showMySQLDocu('Extending_MySQL', 'procedure_analyse') . "\n";    }    if (PMA_Tracker::isActive()) {        echo '<a href="tbl_tracking.php?' . $url_query . '">';        echo PMA_getIcon('eye.png', __('Track table'), true);        echo '</a>';    }    ?>    <br /><form method="post" action="tbl_addfield.php" id="addColumns" name="addColumns" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>    onsubmit="return checkFormElementInRange(this, 'num_fields', '<?php echo str_replace('\'', '\\\'', __('You have to add at least one column.')); ?>', 1)">    <?php    echo PMA_generate_common_hidden_inputs($db, $table);    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_insrow.png', __('Add column'));    }    echo sprintf(__('Add %s column(s)'), '<input type="text" name="num_fields" size="2" maxlength="2" value="1" onfocus="this.select()" />');    // I tried displaying the drop-down inside the label but with Firefox    // the drop-down was blinking    $fieldOptions = '<select name="after_field" onclick="this.form.field_where[2].checked=true" onchange="this.form.field_where[2].checked=true">';    foreach ($aryFields as $fieldname) {        $fieldOptions .= '<option value="' . htmlspecialchars($fieldname) . '">' . htmlspecialchars($fieldname) . '</option>' . "\n";    }    unset($aryFields);    $fieldOptions .= '</select>';    $choices = array(        'last'  => __('At End of Table'),        'first' => __('At Beginning of Table'),        'after' => sprintf(__('After %s'), '')    );    PMA_display_html_radio('field_where', $choices, 'last', false);    echo $fieldOptions;    unset($fieldOptions, $choices);    ?><input type="submit" value="<?php echo __('Go'); ?>" /></form><iframe class="IE_hack" scrolling="no"></iframe><hr /><div id="index_div" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?> >    <?php}/** * If there are more than 20 rows, displays browse/select/insert/empty/drop * links again */if (count($fields) > 20) {    include './libraries/tbl_links.inc.php';} // end if (count($fields) > 20)/** * Displays indexes */if (! $tbl_is_view && ! $db_is_information_schema && 'ARCHIVE' !=  $tbl_type) {    PMA_generate_slider_effect('indexes', __('Indexes'));    /**     * Display indexes     */    echo PMA_Index::getView($table, $db);    ?>        <fieldset class="tblFooters" style="text-align: left;">            <form action="./tbl_indexes.php" method="post">                <?php                echo PMA_generate_common_hidden_inputs($db, $table);                echo sprintf(__('Create an index on &nbsp;%s&nbsp;columns'),                    '<input type="text" size="2" name="added_fields" value="1" />');                ?>                <input type="hidden" name="create_index" value="1" />                <input class="add_index<?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' ajax' : '');?>" type="submit" value="<?php echo __('Go'); ?>" />            </form>        </fieldset>    </div></div>    <?php}/** * Displays Space usage and row statistics */// BEGIN - Calc Table Space// Get valid statistics whatever is the table typeif ($cfg['ShowStats']) {    echo '<div id="tablestatistics">';    if (empty($showtable)) {        $showtable = PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], null, true);    }    $nonisam     = false;    $is_innodb = (isset($showtable['Type']) && $showtable['Type'] == 'InnoDB');    if (isset($showtable['Type']) && !preg_match('@ISAM|HEAP@i', $showtable['Type'])) {        $nonisam = true;    }    // Gets some sizes    $mergetable = PMA_Table::isMerge($GLOBALS['db'], $GLOBALS['table']);    // this is to display for example 261.2 MiB instead of 268k KiB    $max_digits = 3;    $decimals = 1;    list($data_size, $data_unit)         = PMA_formatByteDown($showtable['Data_length'], $max_digits, $decimals);    if ($mergetable == false) {        list($index_size, $index_unit)   = PMA_formatByteDown($showtable['Index_length'], $max_digits, $decimals);    }    // InnoDB returns a huge value in Data_free, do not use it    if (! $is_innodb && isset($showtable['Data_free']) && $showtable['Data_free'] > 0) {        list($free_size, $free_unit)     = PMA_formatByteDown($showtable['Data_free'], $max_digits, $decimals);        list($effect_size, $effect_unit) = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length'] - $showtable['Data_free'], $max_digits, $decimals);    } else {        list($effect_size, $effect_unit) = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length'], $max_digits, $decimals);    }    list($tot_size, $tot_unit)           = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length'], $max_digits, $decimals);    if ($table_info_num_rows > 0) {        list($avg_size, $avg_unit)       = PMA_formatByteDown(($showtable['Data_length'] + $showtable['Index_length']) / $showtable['Rows'], 6, 1);    }    // Displays them    $odd_row = false;    ?>    <fieldset>    <legend><?php echo __('Information'); ?></legend>    <a name="showusage"></a>    <?php if (! $tbl_is_view && ! $db_is_information_schema) { ?>    <table id="tablespaceusage" class="data">    <caption class="tblHeaders"><?php echo __('Space usage'); ?></caption>    <thead>    <tr>        <th><?php echo __('Type'); ?></th>        <th colspan="2"><?php echo __('Usage'); ?></th>    </tr>    </thead>    <tbody>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Data'); ?></th>        <td class="value"><?php echo $data_size; ?></td>        <td class="unit"><?php echo $data_unit; ?></td>    </tr>        <?php        if (isset($index_size)) {            ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Index'); ?></th>        <td class="value"><?php echo $index_size; ?></td>        <td class="unit"><?php echo $index_unit; ?></td>    </tr>            <?php        }        if (isset($free_size)) {            ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?> error">        <th class="name"><?php echo __('Overhead'); ?></th>        <td class="value"><?php echo $free_size; ?></td>        <td class="unit"><?php echo $free_unit; ?></td>    </tr>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Effective'); ?></th>        <td class="value"><?php echo $effect_size; ?></td>        <td class="unit"><?php echo $effect_unit; ?></td>    </tr>            <?php        }        if (isset($tot_size) && $mergetable == false) {            ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Total'); ?></th>        <td class="value"><?php echo $tot_size; ?></td>        <td class="unit"><?php echo $tot_unit; ?></td>    </tr>            <?php        }        // Optimize link if overhead        if (isset($free_size) && !PMA_DRIZZLE && ($tbl_type == 'MYISAM' || $tbl_type == 'ARIA' || $tbl_type == 'MARIA' || $tbl_type == 'BDB')) {            ?>    <tr class="tblFooters">        <td colspan="3" align="center">            <a href="sql.php?<?php echo $url_query; ?>&pos=0&amp;sql_query=<?php echo urlencode('OPTIMIZE TABLE ' . PMA_backquote($table)); ?>"><?php            echo PMA_getIcon('b_tbloptimize.png', __('Optimize table'));            ?></a>        </td>    </tr>            <?php        }        ?>    </tbody>    </table>        <?php    }    $odd_row = false;    ?>    <table id="tablerowstats" class="data">    <caption class="tblHeaders"><?php echo __('Row Statistics'); ?></caption>    <thead>    <tr>        <th><?php echo __('Statements'); ?></th>        <th><?php echo __('Value'); ?></th>    </tr>    </thead>    <tbody>    <?php    if (isset($showtable['Row_format'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Format'); ?></th>        <td class="value"><?php        if ($showtable['Row_format'] == 'Fixed') {            echo __('static');        } elseif ($showtable['Row_format'] == 'Dynamic') {            echo __('dynamic');        } else {            echo $showtable['Row_format'];        }        ?></td>    </tr>        <?php    }    if (! empty($showtable['Create_options'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Options'); ?></th>        <td class="value"><?php        if ($showtable['Create_options'] == 'partitioned') {            echo __('partitioned');        } else {            echo $showtable['Create_options'];        }        ?></td>    </tr>        <?php    }    if (!empty($tbl_collation)) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Collation'); ?></th>        <td class="value"><?php            echo '<dfn title="' . PMA_getCollationDescr($tbl_collation) . '">' . $tbl_collation . '</dfn>';            ?></td>    </tr>        <?php    }    if (!$is_innodb && isset($showtable['Rows'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Rows'); ?></th>        <td class="value"><?php echo PMA_formatNumber($showtable['Rows'], 0); ?></td>    </tr>        <?php    }    if (!$is_innodb && isset($showtable['Avg_row_length']) && $showtable['Avg_row_length'] > 0) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Row length'); ?> &oslash;</th>        <td class="value"><?php echo PMA_formatNumber($showtable['Avg_row_length'], 0); ?></td>    </tr>        <?php    }    if (!$is_innodb && isset($showtable['Data_length']) && $showtable['Rows'] > 0 && $mergetable == false) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Row size'); ?> &oslash;</th>        <td class="value"><?php echo $avg_size . ' ' . $avg_unit; ?></td>    </tr>        <?php    }    if (isset($showtable['Auto_increment'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Next autoindex'); ?></th>        <td class="value"><?php echo PMA_formatNumber($showtable['Auto_increment'], 0); ?></td>    </tr>        <?php    }    if (isset($showtable['Create_time'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Creation'); ?></th>        <td class="value"><?php echo PMA_localisedDate(strtotime($showtable['Create_time'])); ?></td>    </tr>        <?php    }    if (isset($showtable['Update_time'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Last update'); ?></th>        <td class="value"><?php echo PMA_localisedDate(strtotime($showtable['Update_time'])); ?></td>    </tr>        <?php    }    if (isset($showtable['Check_time'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Last check'); ?></th>        <td class="value"><?php echo PMA_localisedDate(strtotime($showtable['Check_time'])); ?></td>    </tr>        <?php    }    ?>    </tbody>    </table>    </fieldset>    <!-- close tablestatistics div -->    </div>    <?php}// END - Calc Table Spaceecho '<div class="clearfloat"></div>' . "\n";/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require './libraries/StorageEngine.class.php';/** * Include settings for relation stuff * get all variables needed for exporting relational schema * in $cfgRelation */require_once './libraries/relation.lib.php';$cfgRelation = PMA_getRelationsParam();require_once './libraries/transformations.lib.php';require_once './libraries/Index.class.php';require_once "./libraries/schema/Export_Relation_Schema.class.php";/** * get all the export options and verify * call and include the appropriate Schema Class depending on $export_type * default is PDF */global  $db, $export_type;if (!isset($export_type) || !preg_match('/^[a-zA-Z]+$/', $export_type)) {    $export_type = 'pdf';}PMA_DBI_select_db($db);$path = PMA_securePath(ucfirst($export_type));if (!file_exists('./libraries/schema/' . $path . '_Relation_Schema.class.php')) {    PMA_Export_Relation_Schema::dieSchema($_POST['chpage'], $export_type, __('File doesn\'t exist'));}require "./libraries/schema/".$path."_Relation_Schema.class.php";$obj_schema = eval("new PMA_".$path."_Relation_Schema();");
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * OpenDocument Spreadsheet import plugin for phpMyAdmin * * @todo    Pretty much everything * @todo    Importing of accented characters seems to fail * @package PhpMyAdmin-Import * @subpackage ODS */if (! defined('PHPMYADMIN')) {    exit;}/** * We need way to disable external XML entities processing. */if (!function_exists('libxml_disable_entity_loader')) {    return;}/** * The possible scopes for $plugin_param are: 'table', 'database', and 'server' */if (isset($plugin_list)) {    $plugin_list['ods'] = array(        'text' => __('Open Document Spreadsheet'),        'extension' => 'ods',        'options' => array(                array('type' => 'begin_group', 'name' => 'general_opts'),                array('type' => 'bool', 'name' => 'col_names', 'text' => __('The first line of the file contains the table column names <i>(if this is unchecked, the first line will become part of the data)</i>')),                array('type' => 'bool', 'name' => 'empty_rows', 'text' => __('Do not import empty rows')),                array('type' => 'bool', 'name' => 'recognize_percentages', 'text' => __('Import percentages as proper decimals <i>(ex. 12.00% to .12)</i>')),                array('type' => 'bool', 'name' => 'recognize_currency', 'text' => __('Import currencies <i>(ex. $5.00 to 5.00)</i>')),                array('type' => 'end_group')            ),        'options_text' => __('Options'),        );    /* We do not define function when plugin is just queried for information above */    return;}$i = 0;$len = 0;$buffer = "";/** * Read in the file via PMA_importGetNextChunk so that * it can process compressed files */while (! ($finished && $i >= $len) && ! $error && ! $timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        /* subtract data we didn't handle yet and stop processing */        $offset -= strlen($buffer);        break;    } elseif ($data === true) {        /* Handle rest of buffer */    } else {        /* Append new data to buffer */        $buffer .= $data;        unset($data);    }}unset($data);/** * Disable loading of external XML entities. */libxml_disable_entity_loader();/** * Load the XML string * * The option LIBXML_COMPACT is specified because it can * result in increased performance without the need to * alter the code in any way. It's basically a freebee. */$xml = simplexml_load_string($buffer, "SimpleXMLElement", LIBXML_COMPACT);unset($buffer);if ($xml === false) {    $sheets = array();    $message = PMA_Message::error(__('The XML file specified was either malformed or incomplete. Please correct the issue and try again.'));    $error = true;} else {    $sheets = $xml->children('office', true)->{'body'}->{'spreadsheet'}->children('table', true);}$tables = array();$max_cols = 0;$row_count = 0;$col_count = 0;$col_names = array();$tempRow = array();$tempRows = array();$rows = array();/* Iterate over tables */foreach ($sheets as $sheet) {    $col_names_in_first_row = isset($_REQUEST['ods_col_names']);    /* Iterate over rows */    foreach ($sheet as $row) {        $type = $row->getName();        if (! strcmp('table-row', $type)) {            /* Iterate over columns */            foreach ($row as $cell) {                $text = $cell->children('text', true);                $cell_attrs = $cell->attributes('office', true);                if (count($text) != 0) {                    $attr = $cell->attributes('table', true);                    $num_repeat = (int) $attr['number-columns-repeated'];                    $num_iterations = $num_repeat ? $num_repeat : 1;                    for ($k = 0; $k < $num_iterations; $k++) {                        if (! $col_names_in_first_row) {                            if ($_REQUEST['ods_recognize_percentages'] && !strcmp('percentage', $cell_attrs['value-type'])) {                                $tempRow[] = (double)$cell_attrs['value'];                            } elseif ($_REQUEST['ods_recognize_currency'] && !strcmp('currency', $cell_attrs['value-type'])) {                                $tempRow[] = (double)$cell_attrs['value'];                            } else {                                $tempRow[] = (string)$text;                            }                        } else {                            if ($_REQUEST['ods_recognize_percentages'] && !strcmp('percentage', $cell_attrs['value-type'])) {                                $col_names[] = (double)$cell_attrs['value'];                            } else if ($_REQUEST['ods_recognize_currency'] && !strcmp('currency', $cell_attrs['value-type'])) {                                $col_names[] = (double)$cell_attrs['value'];                            } else {                                $col_names[] = (string)$text;                            }                        }                        ++$col_count;                    }                } else {                    /* Number of blank columns repeated */                    if ($col_count < count($row->children('table', true)) - 1) {                        $attr = $cell->attributes('table', true);                        $num_null = (int)$attr['number-columns-repeated'];                        if ($num_null) {                            if (! $col_names_in_first_row) {                                for ($i = 0; $i < $num_null; ++$i) {                                    $tempRow[] = 'NULL';                                    ++$col_count;                                }                            } else {                                for ($i = 0; $i < $num_null; ++$i) {                                    $col_names[] = PMA_getColumnAlphaName($col_count + 1);                                    ++$col_count;                                }                            }                        } else {                            if (! $col_names_in_first_row) {                                $tempRow[] = 'NULL';                            } else {                                $col_names[] = PMA_getColumnAlphaName($col_count + 1);                            }                            ++$col_count;                        }                    }                }            }            /* Find the widest row */            if ($col_count > $max_cols) {                $max_cols = $col_count;            }            /* Don't include a row that is full of NULL values */            if (! $col_names_in_first_row) {                if ($_REQUEST['ods_empty_rows']) {                    foreach ($tempRow as $cell) {                        if (strcmp('NULL', $cell)) {                            $tempRows[] = $tempRow;                            break;                        }                    }                } else {                    $tempRows[] = $tempRow;                }            }            $col_count = 0;            $col_names_in_first_row = false;            $tempRow = array();        }    }    /* Skip over empty sheets */    if (count($tempRows) == 0 || count($tempRows[0]) == 0) {        $col_names = array();        $tempRow = array();        $tempRows = array();        continue;    }    /**     * Fill out each row as necessary to make     * every one exactly as wide as the widest     * row. This included column names.     */    /* Fill out column names */    for ($i = count($col_names); $i < $max_cols; ++$i) {        $col_names[] = PMA_getColumnAlphaName($i + 1);    }    /* Fill out all rows */    $num_rows = count($tempRows);    for ($i = 0; $i < $num_rows; ++$i) {        for ($j = count($tempRows[$i]); $j < $max_cols; ++$j) {            $tempRows[$i][] = 'NULL';        }    }    /* Store the table name so we know where to place the row set */    $tbl_attr = $sheet->attributes('table', true);    $tables[] = array((string)$tbl_attr['name']);    /* Store the current sheet in the accumulator */    $rows[] = array((string)$tbl_attr['name'], $col_names, $tempRows);    $tempRows = array();    $col_names = array();    $max_cols = 0;}unset($tempRow);unset($tempRows);unset($col_names);unset($sheets);unset($xml);/** * Bring accumulated rows into the corresponding table */$num_tbls = count($tables);for ($i = 0; $i < $num_tbls; ++$i) {    for ($j = 0; $j < count($rows); ++$j) {        if (! strcmp($tables[$i][TBL_NAME], $rows[$j][TBL_NAME])) {            if (! isset($tables[$i][COL_NAMES])) {                $tables[$i][] = $rows[$j][COL_NAMES];            }            $tables[$i][ROWS] = $rows[$j][ROWS];        }    }}/* No longer needed */unset($rows);/* Obtain the best-fit MySQL types for each column */$analyses = array();$len = count($tables);for ($i = 0; $i < $len; ++$i) {    $analyses[] = PMA_analyzeTable($tables[$i]);}/** * string $db_name (no backquotes) * * array $table = array(table_name, array() column_names, array()() rows) * array $tables = array of "$table"s * * array $analysis = array(array() column_types, array() column_sizes) * array $analyses = array of "$analysis"s * * array $create = array of SQL strings * * array $options = an associative array of options *//* Set database name to the currently selected one, if applicable */if (strlen($db)) {    $db_name = $db;    $options = array('create_db' => false);} else {    $db_name = 'ODS_DB';    $options = null;}/* Non-applicable parameters */$create = null;/* Created and execute necessary SQL statements from data */PMA_buildSQL($db_name, $tables, $analyses, $create, $options);unset($tables);unset($analyses);/* Commit any possible data in buffers */PMA_importRunQuery();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// Get relations & co. status$cfgRelation = PMA_getRelationsParam();require_once './libraries/file_listing.php';require_once './libraries/plugin_interface.lib.php';function PMA_exportCheckboxCheck($str){    if (isset($GLOBALS['cfg']['Export'][$str]) && $GLOBALS['cfg']['Export'][$str]) {        echo ' checked="checked"';    }}function PMA_exportIsActive($what, $val){    if (isset($GLOBALS['cfg']['Export'][$what]) &&  $GLOBALS['cfg']['Export'][$what] == $val) {        echo ' checked="checked"';    }}/* Scan for plugins */$export_list = PMA_getPlugins('./libraries/export/', array('export_type' => $export_type, 'single_table' => isset($single_table)));/* Fail if we didn't find any plugin */if (empty($export_list)) {    PMA_Message::error( __('Could not load export plugins, please check your installation!'))->display();    include './libraries/footer.inc.php';}?><form method="post" action="export.php" name="dump"><?phpif ($export_type == 'server') {    echo PMA_generate_common_hidden_inputs('', '', 1);} elseif ($export_type == 'database') {    echo PMA_generate_common_hidden_inputs($db, '', 1);} else {    echo PMA_generate_common_hidden_inputs($db, $table, 1);}// just to keep this value for possible next display of this form after saving on serverif (isset($single_table)) {    echo '<input type="hidden" name="single_table" value="TRUE" />' . "\n";}echo '<input type="hidden" name="export_type" value="' . $export_type . '" />' . "\n";// If the export method was not set, the default is quickif (isset($_GET['export_method'])) {    $cfg['Export']['method'] = $_GET['export_method'];} elseif (! isset($cfg['Export']['method'])) {    $cfg['Export']['method'] = 'quick';}// The export method (quick, custom or custom-no-form)echo '<input type="hidden" name="export_method" value="' . htmlspecialchars($cfg['Export']['method']) . '" />';if (isset($_GET['sql_query'])) {    echo '<input type="hidden" name="sql_query" value="' . htmlspecialchars($_GET['sql_query']) . '" />' . "\n";} elseif (! empty($sql_query)) {    echo '<input type="hidden" name="sql_query" value="' . htmlspecialchars($sql_query) . '" />' . "\n";}?><div class="exportoptions" id="header">    <h2>        <?php echo PMA_getImage('b_export.png', __('Export')); ?>        <?php        if ($export_type == 'server') {            echo __('Exporting databases from the current server');        } elseif ($export_type == 'database') {            printf(__('Exporting tables from "%s" database'), htmlspecialchars($db));        } else {            printf(__('Exporting rows from "%s" table'), htmlspecialchars($table));        }?>    </h2></div><div class="exportoptions" id="quick_or_custom">    <h3><?php echo __('Export Method:'); ?></h3>    <ul>        <li>            <?php echo '<input type="radio" name="quick_or_custom" value="quick" id="radio_quick_export"';            if (isset($_GET['quick_or_custom'])) {                $export_method = $_GET['quick_or_custom'];                if ($export_method == 'custom' || $export_method == 'custom_no_form') {                    echo ' />';                } else {                    echo ' checked="checked" />';                }            } elseif ($cfg['Export']['method'] == 'custom' || $cfg['Export']['method'] == 'custom-no-form') {                echo ' />';            } else {                echo ' checked="checked" />';            }            echo '<label for ="radio_quick_export">' . __('Quick - display only the minimal options') . '</label>'; ?>        </li>        <li>            <?php echo '<input type="radio" name="quick_or_custom" value="custom" id="radio_custom_export"';            if (isset($_GET['quick_or_custom'])) {                $export_method = $_GET['quick_or_custom'];                if ($export_method == 'custom' || $export_method == 'custom_no_form') {                    echo ' checked="checked" />';                } else {                    echo ' />';                }            } elseif ($cfg['Export']['method'] == 'custom' || $cfg['Export']['method'] == 'custom-no-form') {                echo ' checked="checked" />';            } else {                echo ' />';            }            echo '<label for="radio_custom_export">' . __('Custom - display all possible options') . '</label>';?>        </li>    </ul></div><div class="exportoptions" id="databases_and_tables">    <?php        if ($export_type == 'server') {            echo '<h3>' . __('Database(s):') . '</h3>';        } else if ($export_type == 'database') {            echo '<h3>' . __('Table(s):') . '</h3>';        }        if (! empty($multi_values)) {            echo $multi_values;        }    ?></div><?php if (strlen($table) && ! isset($num_tables) && ! PMA_Table::isMerge($db, $table)) { ?>    <div class="exportoptions" id="rows">        <h3><?php echo __('Rows:'); ?></h3>        <ul>            <li>                <?php if (isset($_GET['allrows']) && $_GET['allrows'] == 1) {                        echo '<input type="radio" name="allrows" value="0" id="radio_allrows_0" />';                    } else {                        echo '<input type="radio" name="allrows" value="0" id="radio_allrows_0" checked="checked" />';                    }                    echo '<label for ="radio_allrows_0">' . __('Dump some row(s)') . '</label>'; ?>                <ul>                    <li><label for="limit_to"><?php echo __('Number of rows:') . '</label> <input type="text" id="limit_to" name="limit_to" size="5" value="'                . ((isset($_GET['limit_to'])) ? htmlspecialchars($_GET['limit_to']) : ((isset($unlim_num_rows) ? $unlim_num_rows : PMA_Table::countRecords($db, $table))))                . '" onfocus="this.select()" />' ?></li>                    <li><label for="limit_from"><?php echo __('Row to begin at:') . '</label> <input type="text" id="limit_from" name="limit_from" value="'                 . ((isset($_GET['limit_from'])) ? htmlspecialchars($_GET['limit_from']) : '0')                 . '" size="5" onfocus="this.select()" />'; ?></li>                </ul>            </li>            <li>                <?php if (isset($_GET['allrows']) && $_GET['allrows'] == 0) {                    echo '<input type="radio" name="allrows" value="1" id="radio_allrows_1" />';                } else {                    echo '<input type="radio" name="allrows" value="1" id="radio_allrows_1" checked="checked" />';                }                echo ' <label for="radio_allrows_1">' . __('Dump all rows') . '</label>';?>            </li>        </ul>     </div><?php } ?><?php if (isset($cfg['SaveDir']) && !empty($cfg['SaveDir'])) { ?>    <div class="exportoptions" id="output_quick_export">        <h3><?php echo __('Output:'); ?></h3>        <ul>            <li>                <input type="checkbox" name="quick_export_onserver" value="saveit"                    id="checkbox_quick_dump_onserver"                    <?php PMA_exportCheckboxCheck('quick_export_onserver'); ?> />                <label for="checkbox_quick_dump_onserver">                    <?php echo sprintf(__('Save on server in the directory <b>%s</b>'), htmlspecialchars(PMA_userDir($cfg['SaveDir']))); ?>                </label>            </li>            <li>                <input type="checkbox" name="quick_export_onserverover" value="saveitover"                id="checkbox_quick_dump_onserverover"                <?php PMA_exportCheckboxCheck('quick_export_onserver_overwrite'); ?> />                <label for="checkbox_quick_dump_onserverover"><?php echo __('Overwrite existing file(s)'); ?></label>            </li>        </ul>    </div><?php } ?><div class="exportoptions" id="output">    <h3><?php echo __('Output:'); ?></h3>    <ul id="ul_output">        <li>            <input type="radio" name="output_format" value="sendit" id="radio_dump_asfile" <?php isset($_GET['repopulate']) ? '' : PMA_exportCheckboxCheck('asfile'); ?> />            <label for="radio_dump_asfile"><?php echo __('Save output to a file'); ?></label>            <ul id="ul_save_asfile">                <?php if (isset($cfg['SaveDir']) && !empty($cfg['SaveDir'])) { ?>                <li>                    <input type="checkbox" name="onserver" value="saveit"                        id="checkbox_dump_onserver"                        <?php PMA_exportCheckboxCheck('onserver'); ?> />                    <label for="checkbox_dump_onserver">                        <?php echo sprintf(__('Save on server in the directory <b>%s</b>'), htmlspecialchars(PMA_userDir($cfg['SaveDir']))); ?>                    </label>                </li>                <li>                    <input type="checkbox" name="onserverover" value="saveitover"                    id="checkbox_dump_onserverover"                    <?php PMA_exportCheckboxCheck('onserver_overwrite'); ?> />                    <label for="checkbox_dump_onserverover"><?php echo __('Overwrite existing file(s)'); ?></label>                </li>                <?php } ?>                <li>                    <label for="filename_template" class="desc">                    <?php                    echo __('File name template:');                    $trans = new PMA_Message;                    $trans->addMessage(__('@SERVER@ will become the server name'));                    if ($export_type == 'database' || $export_type == 'table') {                        $trans->addMessage(__(', @DATABASE@ will become the database name'));                        if ($export_type == 'table') {                            $trans->addMessage(__(', @TABLE@ will become the table name'));                        }                    }                    $message = new PMA_Message(__('This value is interpreted using %1$sstrftime%2$s, so you can use time formatting strings. Additionally the following transformations will happen: %3$s. Other text will be kept as is. See the %4$sFAQ%5$s for details.'));                    $message->addParam('<a href="' . PMA_linkURL(PMA_getPHPDocLink('function.strftime.php')). '" target="documentation" title="'                        . __('Documentation') . '">', false);                    $message->addParam('</a>', false);                    $message->addParam($trans);                    $message->addParam('<a href="Documentation.html#faq6_27" target="documentation">', false);                    $message->addParam('</a>', false);                    echo PMA_showHint($message);                    ?>                    </label>                    <input type="text" name="filename_template" id="filename_template"                    <?php                        echo ' value="';                        if (isset($_GET['filename_template'])) {                            echo htmlspecialchars($_GET['filename_template']);                        } else {                            if ($export_type == 'database') {                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(                                    'pma_db_filename_template',                                    $GLOBALS['cfg']['Export']['file_template_database']));                            } elseif ($export_type == 'table') {                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(                                    'pma_table_filename_template',                                    $GLOBALS['cfg']['Export']['file_template_table']));                            } else {                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(                                    'pma_server_filename_template',                                    $GLOBALS['cfg']['Export']['file_template_server']));                            }                    }                        echo '"';                    ?>                    />                    <input type="checkbox" name="remember_template"                        id="checkbox_remember_template"                        <?php PMA_exportCheckboxCheck('remember_file_template'); ?> />                    <label for="checkbox_remember_template">                        <?php echo __('use this for future exports'); ?></label>                </li>                <?php                // charset of file                if ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE) {                    echo '        <li><label for="select_charset_of_file" class="desc">'                        . __('Character set of the file:') . '</label>' . "\n";                    reset($cfg['AvailableCharsets']);                    echo '<select id="select_charset_of_file" name="charset_of_file" size="1">';                    foreach ($cfg['AvailableCharsets'] as $temp_charset) {                        echo '<option value="' . $temp_charset . '"';                        if (isset($_GET['charset_of_file']) && ($_GET['charset_of_file'] != $temp_charset)) {                            echo '';                        } elseif ((empty($cfg['Export']['charset']) && $temp_charset == 'utf-8')                          || $temp_charset == $cfg['Export']['charset']) {                            echo ' selected="selected"';                        }                        echo '>' . $temp_charset . '</option>';                    } // end foreach                    echo '</select></li>';                } // end if                ?>                 <?php                if (isset($_GET['compression'])) {                    $selected_compression = $_GET['compression'];                } elseif (isset($cfg['Export']['compression'])) {                    $selected_compression = $cfg['Export']['compression'];                } else {                    $selected_compression = "none";                }                // zip, gzip and bzip2 encode features                $is_zip  = ($cfg['ZipDump']  && @function_exists('gzcompress'));                $is_gzip = ($cfg['GZipDump'] && @function_exists('gzencode'));                $is_bzip2 = ($cfg['BZipDump'] && @function_exists('bzcompress'));                if ($is_zip || $is_gzip || $is_bzip2) { ?>                    <li>                    <label for="compression" class="desc"><?php echo __('Compression:'); ?></label>                    <select id="compression" name="compression">                        <option value="none"><?php echo __('None'); ?></option>                        <?php if ($is_zip) { ?>                            <option value="zip" <?php echo ($selected_compression == "zip") ? 'selected="selected"' : ''; ?>><?php echo __('zipped'); ?></option>                        <?php } if ($is_gzip) { ?>                            <option value="gzip" <?php echo ($selected_compression == "gzip") ? 'selected="selected"' : ''; ?>><?php echo __('gzipped'); ?></option>                        <?php } if ($is_bzip2) { ?>                            <option value="bzip2" <?php echo ($selected_compression == "bzip2") ? 'selected="selected"' : ''; ?>><?php echo __('bzipped'); ?></option>                        <?php } ?>                    </select>                    </li>                <?php } else { ?>                    <input type="hidden" name="compression" value="<?php echo $selected_compression; ?>" />                <?php } ?>             </ul>        </li>        <li><input type="radio" id="radio_view_as_text" name="output_format" value="astext" <?php echo (isset($_GET['repopulate']) || $GLOBALS['cfg']['Export']['asfile'] == false) ? 'checked="checked"' : '' ?>/><label for="radio_view_as_text"><?php echo __('View output as text'); ?></label></li>    </ul> </div><div class="exportoptions" id="format">    <h3><?php echo __('Format:'); ?></h3>    <?php echo PMA_pluginGetChoice('Export', 'what', $export_list, 'format'); ?></div><div class="exportoptions" id="format_specific_opts">    <h3><?php echo __('Format-specific options:'); ?></h3>    <p class="no_js_msg" id="scroll_to_options_msg"><?php echo __('Scroll down to fill in the options for the selected format and ignore the options for other formats.'); ?></p>    <?php echo PMA_pluginGetOptions('Export', $export_list); ?></div><?php if (function_exists('PMA_set_enc_form')) { ?><!-- Encoding setting form appended by Y.Kawada --><!-- Japanese encoding setting -->    <div class="exportoptions" id="kanji_encoding">        <h3><?php echo __('Encoding Conversion:'); ?></h3>        <?php echo PMA_set_enc_form('            '); ?>    </div><?php } ?><div class="exportoptions" id="submit"><?php PMA_externalBug(__('SQL compatibility mode'), 'mysql', '50027', '14515'); ?>    <input type="submit" value="<?php echo __('Go'); ?>" id="buttonGo" /></div></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Gets the list of the table in the current db and informations about these * tables if possible * * fills tooltip arrays and provides $tables, $num_tables, $is_show_stats * and $db_is_information_schema * * speedup view on locked tables * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * requirements */require_once './libraries/common.inc.php';/** * limits for table list */if (! isset($_SESSION['tmp_user_values']['table_limit_offset']) || $_SESSION['tmp_user_values']['table_limit_offset_db'] != $db) {    $_SESSION['tmp_user_values']['table_limit_offset'] = 0;    $_SESSION['tmp_user_values']['table_limit_offset_db'] = $db;}if (isset($_REQUEST['pos'])) {    $_SESSION['tmp_user_values']['table_limit_offset'] = (int) $_REQUEST['pos'];}$pos = $_SESSION['tmp_user_values']['table_limit_offset'];/** * fills given tooltip arrays * * @param array   $tooltip_truename   tooltip data * @param array   $tooltip_aliasname  tooltip data * @param array   $table              tabledata */function PMA_fillTooltip(&$tooltip_truename, &$tooltip_aliasname, $table){    if (strstr($table['Comment'], '; InnoDB free') === false) {        if (!strstr($table['Comment'], 'InnoDB free') === false) {            // here we have just InnoDB generated part            $table['Comment'] = '';        }    } else {        // remove InnoDB comment from end, just the minimal part (*? is non greedy)        $table['Comment'] = preg_replace('@; InnoDB free:.*?$@', '', $table['Comment']);    }    // views have VIEW as comment so it's not a real comment put by a user    if ('VIEW' == $table['Comment']) {        $table['Comment'] = '';    }    if (empty($table['Comment'])) {        $table['Comment'] = $table['Name'];    } else {        // why?        $table['Comment'] .= ' ';    }    if ($GLOBALS['cfg']['ShowTooltipAliasTB']     && $GLOBALS['cfg']['ShowTooltipAliasTB'] !== 'nested') {        $tooltip_truename[$table['Name']] = $table['Comment'];        $tooltip_aliasname[$table['Name']] = $table['Name'];    } else {        $tooltip_truename[$table['Name']] = $table['Name'];        $tooltip_aliasname[$table['Name']] = $table['Comment'];    }    if (isset($table['Create_time']) && !empty($table['Create_time'])) {        $tooltip_aliasname[$table['Name']] .= ', ' . __('Creation')             . ': ' . PMA_localisedDate(strtotime($table['Create_time']));    }    if (! empty($table['Update_time'])) {        $tooltip_aliasname[$table['Name']] .= ', ' . __('Last update')             . ': ' . PMA_localisedDate(strtotime($table['Update_time']));    }    if (! empty($table['Check_time'])) {        $tooltip_aliasname[$table['Name']] .= ', ' . __('Last check')             . ': ' . PMA_localisedDate(strtotime($table['Check_time']));    }}PMA_checkParameters(array('db'));/** * @global bool whether to display extended stats */$is_show_stats = $cfg['ShowStats'];/** * @global bool whether selected db is information_schema */$db_is_information_schema = false;if (PMA_is_system_schema($db)) {    $is_show_stats = false;    $db_is_information_schema = true;}/** * @global array information about tables in db */$tables = array();// When used in Nested table group mode, only show tables matching the given groupnameif (PMA_isValid($tbl_group) && !$cfg['ShowTooltipAliasTB']) {    $tbl_group_sql = ' LIKE "' . PMA_escape_mysql_wildcards($tbl_group) . '%"';} else {    $tbl_group_sql = '';}if ($cfg['ShowTooltip']) {    $tooltip_truename = array();    $tooltip_aliasname = array();}// Special speedup for newer MySQL Versions (in 4.0 format changed)if (true === $cfg['SkipLockedTables']) {    $db_info_result = PMA_DBI_query('SHOW OPEN TABLES FROM ' . PMA_backquote($db) . ';');    // Blending out tables in use    if ($db_info_result && PMA_DBI_num_rows($db_info_result) > 0) {        while ($tmp = PMA_DBI_fetch_row($db_info_result)) {            // if in use memorize tablename            if (preg_match('@in_use=[1-9]+@i', $tmp[1])) {                $sot_cache[$tmp[0]] = true;            }        }        PMA_DBI_free_result($db_info_result);        if (isset($sot_cache)) {            $db_info_result = PMA_DBI_query(                'SHOW TABLES FROM ' . PMA_backquote($db) . $tbl_group_sql . ';',                null, PMA_DBI_QUERY_STORE);            if ($db_info_result && PMA_DBI_num_rows($db_info_result) > 0) {                while ($tmp = PMA_DBI_fetch_row($db_info_result)) {                    if (! isset($sot_cache[$tmp[0]])) {                        $sts_result  = PMA_DBI_query(                            'SHOW TABLE STATUS FROM ' . PMA_backquote($db)                             . ' LIKE \'' . PMA_sqlAddSlashes($tmp[0], true) . '\';');                        $sts_tmp     = PMA_DBI_fetch_assoc($sts_result);                        PMA_DBI_free_result($sts_result);                        unset($sts_result);                        if (! isset($sts_tmp['Type']) && isset($sts_tmp['Engine'])) {                            $sts_tmp['Type'] =& $sts_tmp['Engine'];                        }                        if (!empty($tbl_group) && $cfg['ShowTooltipAliasTB']                         && !preg_match('@' . preg_quote($tbl_group, '@') . '@i', $sts_tmp['Comment'])) {                            continue;                        }                        if ($cfg['ShowTooltip']) {                            PMA_fillTooltip($tooltip_truename, $tooltip_aliasname, $sts_tmp);                        }                        $tables[$sts_tmp['Name']]    = $sts_tmp;                    } else { // table in use                        $tables[$tmp[0]]    = array('Name' => $tmp[0]);                    }                }                if ($GLOBALS['cfg']['NaturalOrder']) {                    uksort($tables, 'strnatcasecmp');                }                $sot_ready = true;            } elseif ($db_info_result) {                PMA_DBI_free_result($db_info_result);            }            unset($sot_cache);        }        unset($tmp);    } elseif ($db_info_result) {        PMA_DBI_free_result($db_info_result);    }}if (! isset($sot_ready)) {    // Set some sorting defaults    $sort = 'Name';    $sort_order = 'ASC';    if (isset($_REQUEST['sort'])) {        $sortable_name_mappings = array(            'table'     => 'Name',            'records'   => 'Rows',            'type'      => 'Engine',            'collation' => 'Collation',            'size'      => 'Data_length',            'overhead'  => 'Data_free'        );        // Make sure the sort type is implemented        if (isset($sortable_name_mappings[$_REQUEST['sort']])) {            $sort = $sortable_name_mappings[$_REQUEST['sort']];            if ($_REQUEST['sort_order'] == 'DESC') {                $sort_order = 'DESC';            }        }    }    if (! empty($tbl_group) && ! $cfg['ShowTooltipAliasTB']) {        // only tables for selected group        $tables = PMA_DBI_get_tables_full($db, $tbl_group, true, null, 0, false, $sort, $sort_order);    } elseif (! empty($tbl_group) && $cfg['ShowTooltipAliasTB']) {        // only tables for selected group,        // but grouping is done on comment ...        $tables = PMA_DBI_get_tables_full($db, $tbl_group, 'comment', null, 0, false, $sort, $sort_order);    } else {        // all tables in db        // - get the total number of tables        //  (needed for proper working of the MaxTableList feature)        $tables = PMA_DBI_get_tables($db);        $total_num_tables = count($tables);        if (isset($sub_part) && $sub_part == '_export') {            // (don't fetch only a subset if we are coming from db_export.php,            // because I think it's too risky to display only a subset of the            // table names when exporting a db)            /**             *             * @todo Page selector for table names?             */            $tables = PMA_DBI_get_tables_full($db, false, false, null, 0, false, $sort, $sort_order);        } else {            // fetch the details for a possible limited subset            $tables = PMA_DBI_get_tables_full($db, false, false, null, $pos, true, $sort, $sort_order);        }    }    if ($cfg['ShowTooltip']) {        foreach ($tables as $each_table) {            PMA_fillTooltip($tooltip_truename, $tooltip_aliasname, $each_table);        }    }}/** * @global int count of tables in db */$num_tables = count($tables);//  (needed for proper working of the MaxTableList feature)if (! isset($total_num_tables)) {    $total_num_tables = $num_tables;}/** * cleanup */unset($each_table, $tbl_group_sql, $db_info_result);/** * Displays top menu links * If in an Ajax request, we do not need to show this */if ($GLOBALS['is_ajax_request'] != true) {    include './libraries/db_links.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build OpenDocument Text dumps of tables * * @package PhpMyAdmin-Export * @subpackage ODT */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && !$plugin_param['single_table']) {        $hide_structure = true;    }    $plugin_list['odt'] = array(        'text' => __('Open Document Text'),        'extension' => 'odt',        'mime_type' => 'application/vnd.oasis.opendocument.text',        'force_file' => true,        'options' => array(), /* Filled later */        'options_text' => __('Options'),        );    /* what to dump (structure/data/both) */    $plugin_list['odt']['options'][]        = array('type' => 'begin_group', 'text' => __('Dump table') , 'name' => 'general_opts');    $plugin_list['odt']['options'][]        = array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data')));    $plugin_list['odt']['options'][] = array('type' => 'end_group');    /* Structure options */    if (!$hide_structure) {        $plugin_list['odt']['options'][]            = array('type' => 'begin_group', 'name' => 'structure', 'text' => __('Object creation options'), 'force' => 'data');        if (!empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['odt']['options'][]                = array('type' => 'bool', 'name' => 'relation', 'text' => __('Display foreign key relationships'));        }        $plugin_list['odt']['options'][]            = array('type' => 'bool', 'name' => 'comments', 'text' => __('Display comments'));        if (!empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['odt']['options'][]                = array('type' => 'bool', 'name' => 'mime', 'text' => __('Display MIME types'));        }        $plugin_list['odt']['options'][]            = array('type' => 'end_group');    }    /* Data */    $plugin_list['odt']['options'][]        = array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure');    $plugin_list['odt']['options'][]        = array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row'));    $plugin_list['odt']['options'][]        = array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:'));    $plugin_list['odt']['options'][]        = array('type' => 'end_group');} else {    $GLOBALS['odt_buffer'] = '';    include_once './libraries/opendocument.lib.php';    /**     * Outputs export footer     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportFooter()    {        $GLOBALS['odt_buffer'] .= '</office:text>'            . '</office:body>'            . '</office:document-content>';        if (! PMA_exportOutputHandler(PMA_createOpenDocument('application/vnd.oasis.opendocument.text', $GLOBALS['odt_buffer']))) {            return false;        }        return true;    }    /**     * Outputs export header     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportHeader()    {        $GLOBALS['odt_buffer'] .= '<?xml version="1.0" encoding="utf-8"?' . '>'            . '<office:document-content '. $GLOBALS['OpenDocumentNS'] . 'office:version="1.0">'            . '<office:body>'            . '<office:text>';        return true;    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="1" text:style-name="Heading_1" text:is-list-header="true">'            . __('Database') . ' ' . htmlspecialchars($db) . '</text:h>';        return true;    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in ODT format     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $what;        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        $fields_meta = PMA_DBI_get_fields_meta($result);        $field_flags = array();        for ($j = 0; $j < $fields_cnt; $j++) {            $field_flags[$j] = PMA_DBI_field_flags($result, $j);        }        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="2" text:style-name="Heading_2" text:is-list-header="true">'            . __('Dumping data for table') . ' ' . htmlspecialchars($table) . '</text:h>';        $GLOBALS['odt_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '_structure">';        $GLOBALS['odt_buffer'] .= '<table:table-column table:number-columns-repeated="' . $fields_cnt . '"/>';        // If required, get fields name at the first line        if (isset($GLOBALS[$what . '_columns'])) {            $GLOBALS['odt_buffer'] .= '<table:table-row>';            for ($i = 0; $i < $fields_cnt; $i++) {                $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                    . '<text:p>' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i))) . '</text:p>'                    . '</table:table-cell>';            } // end for            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $GLOBALS['odt_buffer'] .= '<table:table-row>';            for ($j = 0; $j < $fields_cnt; $j++) {                if (!isset($row[$j]) || is_null($row[$j])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($GLOBALS[$what . '_null']) . '</text:p>'                        . '</table:table-cell>';                // ignore BLOB                } elseif (stristr($field_flags[$j], 'BINARY')                        && $fields_meta[$j]->blob) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->numeric && $fields_meta[$j]->type != 'timestamp' && ! $fields_meta[$j]->blob) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="float" office:value="' . $row[$j] . '" >'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                }            } // end for            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end while        PMA_DBI_free_result($result);        $GLOBALS['odt_buffer'] .= '</table:table>';        return true;    }    /**     * Outputs table's structure     *     * @param string $db          database name     * @param string $table       table name     * @param string $crlf        the end of line sequence     * @param string $error_url   the url to go back in case of error     * @param bool   $do_relation whether to include relation comments     * @param bool   $do_comments whether to include the pmadb-style column comments     *                            as comments in the structure; this is deprecated     *                            but the parameter is left here because export.php     *                            calls PMA_exportStructure() also for other export     *                            types which use this parameter     * @param bool   $do_mime     whether to include mime comments     * @param bool   $dates       whether to include creation/update/check dates     * @param string $export_mode 'create_table', 'triggers', 'create_view', 'stand_in'     * @param string $export_type 'server', 'database', 'table'     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        /* Heading */        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="2" text:style-name="Heading_2" text:is-list-header="true">'            . __('Table structure for table') . ' ' . htmlspecialchars($table) . '</text:h>';        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && !empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $GLOBALS['odt_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '_data">';        $columns_cnt = 4;        if ($do_relation && $have_rel) {            $columns_cnt++;        }        if ($do_comments) {            $columns_cnt++;        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;        }        $GLOBALS['odt_buffer'] .= '<table:table-column table:number-columns-repeated="' . $columns_cnt . '"/>';        /* Header */        $GLOBALS['odt_buffer'] .= '<table:table-row>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Column') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Type') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Null') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Default') . '</text:p>'            . '</table:table-cell>';        if ($do_relation && $have_rel) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('Links to') . '</text:p>'                . '</table:table-cell>';        }        if ($do_comments) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('Comments') . '</text:p>'                . '</table:table-cell>';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('MIME type') . '</text:p>'                . '</table:table-cell>';            $mime_map = PMA_getMIME($db, $table, true);        }        $GLOBALS['odt_buffer'] .= '</table:table-row>';        $columns = PMA_DBI_get_columns($db, $table);        foreach ($columns as $column) {            $field_name = $column['Field'];            $GLOBALS['odt_buffer'] .= '<table:table-row>';            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($field_name) . '</text:p>'                . '</table:table-cell>';            $extracted_fieldspec = PMA_extractFieldSpec($column['Type']);            $type = htmlspecialchars($extracted_fieldspec['print_type']);            if (empty($type)) {                $type     = '&nbsp;';            }            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($type) . '</text:p>'                . '</table:table-cell>';            if (!isset($column['Default'])) {                if ($column['Null'] != 'NO') {                    $column['Default'] = 'NULL';                } else {                    $column['Default'] = '';                }            } else {                $column['Default'] = $column['Default'];            }            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . (($column['Null'] == '' || $column['Null'] == 'NO') ? __('No') : __('Yes')) . '</text:p>'                . '</table:table-cell>';            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($column['Default']) . '</text:p>'                . '</table:table-cell>';            if ($do_relation && $have_rel) {                if (isset($res_rel[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' (' . $res_rel[$field_name]['foreign_field'] . ')') . '</text:p>'                        . '</table:table-cell>';                }            }            if ($do_comments) {                if (isset($comments[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($comments[$field_name]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                }            }            if ($do_mime && $cfgRelation['mimework']) {                if (isset($mime_map[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype'])) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                }            }            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end while        $GLOBALS['odt_buffer'] .= '</table:table>';        return true;    } // end of the 'PMA_exportStructure' function} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);/** * Selects the database to work with */PMA_DBI_select_db($db);$goto = $cfg['DefaultTabTable'];/** * $_REQUEST['target_db'] could be empty in case we came from an input field * (when there are many databases, no drop-down) */if (empty($_REQUEST['target_db'])) {    $_REQUEST['target_db'] = $db;}/** * A target table name has been sent to this script -> do the work */if (PMA_isValid($_REQUEST['new_name'])) {    if ($db == $_REQUEST['target_db'] && $table == $_REQUEST['new_name']) {        if (isset($_REQUEST['submit_move'])) {            $message = PMA_Message::error(__('Can\'t move table to same one!'));        } else {            $message = PMA_Message::error(__('Can\'t copy table to same one!'));        }        $result = false;    } else {        $result = PMA_Table::moveCopy($db, $table, $_REQUEST['target_db'], $_REQUEST['new_name'],            $_REQUEST['what'], isset($_REQUEST['submit_move']), 'one_table');        if (isset($_REQUEST['submit_move'])) {            $message = PMA_Message::success(__('Table %s has been moved to %s.'));        } else {            $message = PMA_Message::success(__('Table %s has been copied to %s.'));        }        $old = PMA_backquote($db) . '.' . PMA_backquote($table);        $message->addParam($old);        $new = PMA_backquote($_REQUEST['target_db']) . '.' . PMA_backquote($_REQUEST['new_name']);        $message->addParam($new);        /* Check: Work on new table or on old table? */        if (isset($_REQUEST['submit_move']) || PMA_isValid($_REQUEST['switch_to_new'])) {            $db        = $_REQUEST['target_db'];            $table     = $_REQUEST['new_name'];        }        if ( $_REQUEST['ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            $extra_data['db'] = $GLOBALS['db'];            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $reload = 1;    }} else {    /**     * No new name for the table!     */    $message = PMA_Message::error(__('The table name is empty!'));    $result = false;}/** * Back to the calling script */$_message = $message;unset($message);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */// sometimes, we lose $_REQUEST['js_frame']define('PMA_FRAME', (! empty($_REQUEST['js_frame']) && is_string($_REQUEST['js_frame'])) ? $_REQUEST['js_frame'] : 'right');define('PMA_MINIMUM_COMMON', true);require_once './libraries/common.inc.php';require_once './libraries/sqlparser.lib.php';// MSIE 6 (at least some unpatched versions) has problems loading CSS// when zlib_compression is onif (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER == '6' && (ini_get('zlib.output_compression'))) {    @ini_set('zlib.output_compression', 'Off');}if ($GLOBALS['text_dir'] === 'ltr') {    $right = 'right';    $left = 'left';} else {    $right = 'left';    $left = 'right';}// Send correct type:header('Content-Type: text/css; charset=UTF-8');// Cache output in client - the nocache query parameter makes sure that this// file is reloaded when config changesheader('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');$_SESSION['PMA_Theme_Manager']->printCss(PMA_FRAME);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Database with allowed values for configuration stored in the $cfg array, * used by setup script and user preferences to generate forms. * * @package PhpMyAdmin */if (!defined('PHPMYADMIN')) {    exit;}/** * Value meaning: * o array - select field, array contains allowed values * o string - type override * * Use normal array, paths won't be expanded */$cfg_db = array();$cfg_db['Servers'] = array(1 => array(    'port'         => 'integer',    'connect_type' => array('tcp', 'socket'),    'extension'    => array('mysql', 'mysqli'),    'auth_type'    => array('config', 'http', 'signon', 'cookie'),    'AllowDeny'    => array(        'order'    => array('', 'deny,allow', 'allow,deny', 'explicit')),    'only_db'      => 'array'));$cfg_db['RecodingEngine'] = array('auto', 'iconv', 'recode', 'none');$cfg_db['OBGzip'] = array('auto', true, false);$cfg_db['MemoryLimit'] = 'short_string';$cfg_db['ShowTooltipAliasTB'] = array('nested', true, false);$cfg_db['DisplayDatabasesList'] = array('auto', true, false);$cfg_db['LeftLogoLinkWindow'] = array('main', 'new');$cfg_db['LeftDefaultTabTable'] = array(    'tbl_structure.php', // fields list    'tbl_sql.php',       // SQL form    'tbl_select.php',    // search page    'tbl_change.php',    // insert row page    'sql.php');          // browse page$cfg_db['LeftFrameDBSeparator'] = 'short_string';$cfg_db['LeftFrameTableSeparator'] = 'short_string';$cfg_db['NavigationBarIconic'] = array(true => __('Yes'), false => __('No'), 'both' => __('Both'));$cfg_db['Order'] = array('ASC', 'DESC', 'SMART');$cfg_db['RowActionLinks'] = array('none' => __('Nowhere'), 'left' => __('Left'), 'right' => __('Right'), 'both' => __('Both'));$cfg_db['ProtectBinary'] = array(false, 'blob', 'all');$cfg_db['DefaultDisplay'] = array('horizontal', 'vertical', 'horizontalflipped');$cfg_db['CharEditing'] = array('input', 'textarea');$cfg_db['PropertiesIconic'] = array(true => __('Yes'), false => __('No'), 'both' => __('Both'));$cfg_db['DefaultTabServer'] = array(    'main.php',                // the welcome page (recommended for multiuser setups)    'server_databases.php',    // list of databases    'server_status.php',       // runtime information    'server_variables.php',    // MySQL server variables    'server_privileges.php',   // user management    'server_processlist.php'); // process list$cfg_db['DefaultTabDatabase'] = array(    'db_structure.php',   // tables list    'db_sql.php',         // SQL form    'db_search.php',      // search query    'db_operations.php'); // operations on database$cfg_db['DefaultTabTable'] = array(    'tbl_structure.php', // fields list    'tbl_sql.php',       // SQL form    'tbl_select.php',    // search page    'tbl_change.php',    // insert row page    'sql.php');          // browse page$cfg_db['QueryWindowDefTab'] = array(    'sql',     // SQL    'files',   // Import files    'history', // SQL history    'full');   // All (SQL and SQL history)$cfg_db['InitialSlidersState'] = array(    'open' => __('Open'),     'closed' => __('Closed'),    'disabled' => __('Disabled'));$cfg_db['Import']['format'] = array(    'csv',    // CSV    'docsql', // DocSQL    'ldi',    // CSV using LOAD DATA    'sql');   // SQL$cfg_db['Import']['charset'] = array_merge(array(''), $GLOBALS['cfg']['AvailableCharsets']);$cfg_db['Import']['sql_compatibility'] = $cfg_db['Export']['sql_compatibility'] = array(    'NONE', 'ANSI', 'DB2', 'MAXDB', 'MYSQL323', 'MYSQL40', 'MSSQL', 'ORACLE',    // removed; in MySQL 5.0.33, this produces exports that    // can't be read by POSTGRESQL (see our bug #1596328)    //'POSTGRESQL',    'TRADITIONAL');$cfg_db['Import']['csv_terminated'] = 'short_string';$cfg_db['Import']['csv_enclosed'] = 'short_string';$cfg_db['Import']['csv_escaped'] = 'short_string';$cfg_db['Import']['ldi_terminated'] = 'short_string';$cfg_db['Import']['ldi_enclosed'] = 'short_string';$cfg_db['Import']['ldi_escaped'] = 'short_string';$cfg_db['Import']['ldi_local_option'] = array('auto', true, false);$cfg_db['Export']['_sod_select'] = array(    'structure' => __('structure'),    'data' => __('data'),    'structure_and_data' => __('structure and data'));$cfg_db['Export']['method'] = array(    'quick' => __('Quick - display only the minimal options to configure'),    'custom' => __('Custom - display all possible options to configure'),    'custom-no-form' => __('Custom - like above, but without the quick/custom choice'));$cfg_db['Export']['format'] = array('codegen', 'csv', 'excel', 'htmlexcel',    'htmlword', 'latex', 'ods', 'odt', 'pdf', 'sql', 'texytext', 'xls', 'xml',    'yaml');$cfg_db['Export']['compression'] = array('none', 'zip', 'gzip', 'bzip2');$cfg_db['Export']['charset'] = array_merge(array(''), $GLOBALS['cfg']['AvailableCharsets']);$cfg_db['Export']['codegen_format'] = array('#', 'NHibernate C# DO', 'NHibernate XML');$cfg_db['Export']['csv_separator'] = 'short_string';$cfg_db['Export']['csv_terminated'] = 'short_string';$cfg_db['Export']['csv_enclosed'] = 'short_string';$cfg_db['Export']['csv_escaped'] = 'short_string';$cfg_db['Export']['csv_null'] = 'short_string';$cfg_db['Export']['excel_null'] = 'short_string';$cfg_db['Export']['excel_edition'] = array('win' => 'Windows',    'mac_excel2003' => 'Excel 2003 / Macintosh', 'mac_excel2008' => 'Excel 2008 / Macintosh');$cfg_db['Export']['sql_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['sql_type'] = array('INSERT', 'UPDATE', 'REPLACE');$cfg_db['Export']['sql_insert_syntax'] = array(    'complete' => __('complete inserts'),    'extended' => __('extended inserts'),    'both' => __('both of the above'),    'none' => __('neither of the above'));$cfg_db['Export']['xls_null'] = 'short_string';$cfg_db['Export']['xlsx_null'] = 'short_string';$cfg_db['Export']['htmlword_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['htmlword_null'] = 'short_string';$cfg_db['Export']['ods_null'] = 'short_string';$cfg_db['Export']['odt_null'] = 'short_string';$cfg_db['Export']['odt_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['texytext_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['texytext_null'] = 'short_string';/** * Default values overrides * Use only full paths */$cfg_db['_overrides'] = array();$cfg_db['_overrides']['Servers/1/extension'] = extension_loaded('mysqli')    ? 'mysqli' : 'mysql';/** * Basic validator assignments (functions from libraries/config/validate.lib.php and 'validators' * object in js/config.js) * Use only full paths and form ids */$cfg_db['_validators'] = array(    'CharTextareaCols' => 'validate_positive_number',    'CharTextareaRows' => 'validate_positive_number',    'ExecTimeLimit' => 'validate_non_negative_number',    'Export/sql_max_query_size' => 'validate_positive_number',    'ForeignKeyMaxLimit' => 'validate_positive_number',    'Import/csv_enclosed' => array(array('validate_by_regex', '/^.?$/')),    'Import/csv_escaped' => array(array('validate_by_regex', '/^.$/')),    'Import/csv_terminated' => array(array('validate_by_regex', '/^.$/')),    'Import/ldi_enclosed' => array(array('validate_by_regex', '/^.?$/')),    'Import/ldi_escaped' => array(array('validate_by_regex', '/^.$/')),    'Import/ldi_terminated' => array(array('validate_by_regex', '/^.$/')),    'Import/skip_queries' => 'validate_non_negative_number',    'InsertRows' => 'validate_positive_number',    'LeftFrameTableLevel' => 'validate_positive_number',    'LeftRecentTable' => 'validate_non_negative_number',    'LimitChars' => 'validate_positive_number',    'LoginCookieValidity' => 'validate_positive_number',    'LoginCookieStore' => 'validate_non_negative_number',    'MaxDbList' => 'validate_positive_number',    'MaxCharactersInDisplayedSQL' => 'validate_positive_number',    'MaxRows' => 'validate_positive_number',    'MaxTableList' => 'validate_positive_number',    'MemoryLimit' => array(array('validate_by_regex', '/^\d+(?:[kmg])?$/i')),    'QueryHistoryMax' => 'validate_positive_number',    'QueryWindowWidth' => 'validate_positive_number',    'QueryWindowHeight' => 'validate_positive_number',    'RepeatCells' => 'validate_non_negative_number',    'Server' => 'validate_server',    'Server_pmadb' => 'validate_pmadb',    'Servers/1/port' => 'validate_port_number',    'Servers/1/hide_db' => 'validate_regex',    'TextareaCols' => 'validate_positive_number',    'TextareaRows' => 'validate_positive_number',    'TrustedProxies' => 'validate_trusted_proxies');/** * Additional validators used for user preferences */$cfg_db['_userValidators'] = array(    'MaxDbList' => array(array('validate_upper_bound', 'value:MaxDbList')),    'MaxTableList' => array(array('validate_upper_bound', 'value:MaxTableList')),    'QueryHistoryMax' => array(array('validate_upper_bound', 'value:QueryHistoryMax')),);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple script to set correct charset for the license * * Note: please do not fold this script into a general script * that would read any file using a GET parameter, it would open a hole * * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require './libraries/common.inc.php';/** * */header('Content-type: text/plain; charset=utf-8');$filename = LICENSE_FILE;// Check if the file is available, some distributions remove these.if (is_readable($filename)) {    readfile($filename);} else {    printf(__('The %s file is not available on this system, please visit www.phpmyadmin.net for more information.'), $filename);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Runs common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require './libraries/db_common.inc.php';require_once './libraries/sql_query_form.lib.php';// After a syntax error, we return to this script// with the typed query in the textarea.$goto = 'db_sql.php';$back = 'db_sql.php';/** * Gets informations about the database and, if it is empty, move to the * "db_structure.php" script where table can be created */require './libraries/db_info.inc.php';if ($num_tables == 0 && empty($db_query_force)) {    $sub_part   = '';    $is_info    = true;    include './db_structure.php';    exit();}/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm(true, false, isset($_REQUEST['delimiter']) ? htmlspecialchars($_REQUEST['delimiter']) : ';');/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Runs common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_sql.php&amp;back=tbl_sql.php';require_once './libraries/sql_query_form.lib.php';$err_url   = 'tbl_sql.php' . $err_url;// After a syntax error, we return to this script// with the typed query in the textarea.$goto = 'tbl_sql.php';$back = 'tbl_sql.php';/** * Get table information */require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm(true, false, isset($_REQUEST['delimiter']) ? htmlspecialchars($_REQUEST['delimiter']) : ';');/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * file upload functions * * @package PhpMyAdmin *//** * * @todo when uploading a file into a blob field, should we also consider using *       chunks like in import? UPDATE `table` SET `field` = `field` + [chunk] * @package PhpMyAdmin */class PMA_File{    /**     * @var string the temporary file name     * @access protected     */    var $_name = null;    /**     * @var string the content     * @access protected     */    var $_content = null;    /**     * @var string the error message     * @access protected     */    var $_error_message = '';    /**     * @var bool whether the file is temporary or not     * @access protected     */    var $_is_temp = false;    /**     * @var string type of compression     * @access protected     */    var $_compression = null;    /**     * @var integer     */    var $_offset = 0;    /**     * @var integer size of chunk to read with every step     */    var $_chunk_size = 32768;    /**     * @var resource file handle     */    var $_handle = null;    /**     * @var boolean whether to decompress content before returning     */    var $_decompress = false;    /**     * @var string charset of file     */    var $_charset = null;    /**     * @staticvar string most recent BLOB repository reference    */    static $_recent_bs_reference = null;    /**     * constructor     *     * @access  public     * @param string  $name   file name     */    function __construct($name = false)    {        if ($name) {            $this->setName($name);        }    }    /**     * destructor     *     * @see     PMA_File::cleanUp()     * @access  public     */    function __destruct()    {        $this->cleanUp();    }    /**     * deletes file if it is temporary, usally from a moved upload file     *     * @access  public     * @return  boolean success     */    function cleanUp()    {        if ($this->isTemp()) {            return $this->delete();        }        return true;    }    /**     * deletes the file     *     * @access  public     * @return  boolean success     */    function delete()    {        return unlink($this->getName());    }    /**     * checks or sets the temp flag for this file     * file objects with temp flags are deleted with object destruction     *     * @access  public     * @param boolean sets the temp flag     * @return  boolean PMA_File::$_is_temp     */    function isTemp($is_temp = null)    {        if (null !== $is_temp) {            $this->_is_temp = (bool) $is_temp;        }        return $this->_is_temp;    }    /**     * accessor     *     * @access  public     * @param string  $name   file name     */    function setName($name)    {        $this->_name = trim($name);    }    /**     * @access  public     * @return  string  binary file content     */    function getContent($as_binary = true, $offset = 0, $length = null)    {        if (null === $this->_content) {            if ($this->isUploaded() && ! $this->checkUploadedFile()) {                return false;            }            if (! $this->isReadable()) {                return false;            }            if (function_exists('file_get_contents')) {                $this->_content = file_get_contents($this->getName());            } elseif ($size = filesize($this->getName())) {                $this->_content = fread(fopen($this->getName(), 'rb'), $size);            }        }        if (! empty($this->_content) && $as_binary) {            return '0x' . bin2hex($this->_content);        }        if (null !== $length) {            return substr($this->_content, $offset, $length);        } elseif ($offset > 0) {            return substr($this->_content, $offset);        }        return $this->_content;    }    /**     * @access  public     * @return bool     */    function isUploaded()    {        return is_uploaded_file($this->getName());    }    /**     * accessor     *     * @access  public     * @return  string  PMA_File::$_name     */    function getName()    {        return $this->_name;    }    /**     * @access  public     * @param string  name of file uploaded     * @return  boolean success     */    function setUploadedFile($name)    {        $this->setName($name);        if (! $this->isUploaded()) {            $this->setName(null);            $this->_error_message = __('File was not an uploaded file.');            return false;        }        return true;    }    /**     * @access  public     * @param string  $key the md5 hash of the column name     * @param string  $rownumber     * @return  boolean success     */    function setUploadedFromTblChangeRequest($key, $rownumber)    {        if (! isset($_FILES['fields_upload'])  || empty($_FILES['fields_upload']['name']['multi_edit'][$rownumber][$key])) {            return false;        }        $file = PMA_File::fetchUploadedFromTblChangeRequestMultiple($_FILES['fields_upload'], $rownumber, $key);        // for blobstreaming        $is_bs_upload = false;        // check if this field requires a repository upload        if (isset($_REQUEST['upload_blob_repo']['multi_edit'][$rownumber][$key])) {            $is_bs_upload = ($_REQUEST['upload_blob_repo']['multi_edit'][$rownumber][$key] == "on") ? true : false;        }        // if request is an upload to the BLOB repository        if ($is_bs_upload) {            $bs_db = $_REQUEST['db'];            $bs_table = $_REQUEST['table'];            $tmp_filename = $file['tmp_name'];            $tmp_file_type = $file['type'];            if (! $tmp_file_type) {                $tmp_file_type = null;            }            if (! $bs_db || ! $bs_table) {                $this->_error_message = __('Unknown error while uploading.');                return false;            }            $blob_url =  PMA_BS_UpLoadFile($bs_db, $bs_table, $tmp_file_type, $tmp_filename);            PMA_File::setRecentBLOBReference($blob_url);         }   // end if ($is_bs_upload)        // check for file upload errors        switch ($file['error']) {            // we do not use the PHP constants here cause not all constants            // are defined in all versions of PHP - but the correct constants names            // are given as comment            case 0: //UPLOAD_ERR_OK:                return $this->setUploadedFile($file['tmp_name']);                break;            case 4: //UPLOAD_ERR_NO_FILE:                break;            case 1: //UPLOAD_ERR_INI_SIZE:                $this->_error_message = __('The uploaded file exceeds the upload_max_filesize directive in php.ini.');                break;            case 2: //UPLOAD_ERR_FORM_SIZE:                $this->_error_message = __('The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.');                break;            case 3: //UPLOAD_ERR_PARTIAL:                $this->_error_message = __('The uploaded file was only partially uploaded.');                break;            case 6: //UPLOAD_ERR_NO_TMP_DIR:                $this->_error_message = __('Missing a temporary folder.');                break;            case 7: //UPLOAD_ERR_CANT_WRITE:                $this->_error_message = __('Failed to write file to disk.');                break;            case 8: //UPLOAD_ERR_EXTENSION:                $this->_error_message = __('File upload stopped by extension.');                break;            default:                $this->_error_message = __('Unknown error in file upload.');        } // end switch        return false;    }    /**     * strips some dimension from the multi-dimensional array from $_FILES     *     * <code>     * $file['name']['multi_edit'][$rownumber][$key] = [value]     * $file['type']['multi_edit'][$rownumber][$key] = [value]     * $file['size']['multi_edit'][$rownumber][$key] = [value]     * $file['tmp_name']['multi_edit'][$rownumber][$key] = [value]     * $file['error']['multi_edit'][$rownumber][$key] = [value]     *     * // becomes:     *     * $file['name'] = [value]     * $file['type'] = [value]     * $file['size'] = [value]     * $file['tmp_name'] = [value]     * $file['error'] = [value]     * </code>     *     * @access  public     * @static     * @param array   $file       the array     * @param string  $rownumber     * @param string  $key     * @return  array     */    function fetchUploadedFromTblChangeRequestMultiple($file, $rownumber, $key)    {        $new_file = array(            'name' => $file['name']['multi_edit'][$rownumber][$key],            'type' => $file['type']['multi_edit'][$rownumber][$key],            'size' => $file['size']['multi_edit'][$rownumber][$key],            'tmp_name' => $file['tmp_name']['multi_edit'][$rownumber][$key],            'error' => $file['error']['multi_edit'][$rownumber][$key],        );        return $new_file;    }    /**     * sets the name if the file to the one selected in the tbl_change form     *     * @access  public     * @param string  $key the md5 hash of the column name     * @param string  $rownumber     * @return  boolean success     */    function setSelectedFromTblChangeRequest($key, $rownumber = null)    {        if (! empty($_REQUEST['fields_uploadlocal']['multi_edit'][$rownumber][$key])         && is_string($_REQUEST['fields_uploadlocal']['multi_edit'][$rownumber][$key])) {            // ... whether with multiple rows ...            // for blobstreaming            $is_bs_upload = false;            // check if this field requires a repository upload            if (isset($_REQUEST['upload_blob_repo']['multi_edit'][$rownumber][$key])) {                $is_bs_upload = ($_REQUEST['upload_blob_repo']['multi_edit'][$rownumber][$key] == "on") ? true : false;            }            // is a request to upload file to BLOB repository using uploadDir mechanism            if ($is_bs_upload) {                $bs_db = $_REQUEST['db'];                $bs_table = $_REQUEST['table'];                $tmp_filename = $GLOBALS['cfg']['UploadDir'] . '/' . $_REQUEST['fields_uploadlocal_' . $key]['multi_edit'][$rownumber];                // check if fileinfo library exists                if ($PMA_Config->get('FILEINFO_EXISTS')) {                // attempt to init fileinfo                    $finfo = finfo_open(FILEINFO_MIME);                    // fileinfo exists                    if ($finfo) {                        // pass in filename to fileinfo and close fileinfo handle after                        $tmp_file_type = finfo_file($finfo, $tmp_filename);                        finfo_close($finfo);                    }                } else {                    // no fileinfo library exists, use file command                    $tmp_file_type = exec("file -bi " . escapeshellarg($tmp_filename));                }                if (! $tmp_file_type) {                    $tmp_file_type = null;                }                if (! $bs_db || !$bs_table) {                    $this->_error_message = __('Unknown error while uploading.');                    return false;                }                $blob_url = PMA_BS_UpLoadFile($bs_db, $bs_table, $tmp_file_type, $tmp_filename);                PMA_File::setRecentBLOBReference($blob_url);            }   // end if ($is_bs_upload)            return $this->setLocalSelectedFile($_REQUEST['fields_uploadlocal']['multi_edit'][$rownumber][$key]);        } else {            return false;        }    }    /**     * @access  public     * @return  string  error message     */    function getError()    {        return $this->_error_message;    }    /**     * @access  public     * @return  boolean whether an error occured or not     */    function isError()    {        return ! empty($this->_error_message);    }    /**     * checks the superglobals provided if the tbl_change form is submitted     * and uses the submitted/selected file     *     * @access  public     * @param string  $key the md5 hash of the column name     * @param string  $rownumber     * @return  boolean success     */    function checkTblChangeForm($key, $rownumber)    {        if ($this->setUploadedFromTblChangeRequest($key, $rownumber)) {            // well done ...            $this->_error_message = '';            return true;        } elseif ($this->setSelectedFromTblChangeRequest($key, $rownumber)) {            // well done ...            $this->_error_message = '';            return true;        }        // all failed, whether just no file uploaded/selected or an error        return false;    }    /**     *     * @access  public     * @param string  $name     * @return  boolean success     */    function setLocalSelectedFile($name)    {        if (empty($GLOBALS['cfg']['UploadDir'])) return false;        $this->setName(PMA_userDir($GLOBALS['cfg']['UploadDir']) . PMA_securePath($name));        if (! $this->isReadable()) {            $this->_error_message = __('File could not be read');            $this->setName(null);            return false;        }        return true;    }    /**     * @access  public     * @return  boolean whether the file is readable or not     */    function isReadable()    {        // suppress warnings from being displayed, but not from being logged        // any file access outside of open_basedir will issue a warning        ob_start();        $is_readable = is_readable($this->getName());        ob_end_clean();        return $is_readable;    }    /**     * If we are on a server with open_basedir, we must move the file     * before opening it. The FAQ 1.11 explains how to create the "./tmp"     * directory - if needed     *     * @todo move check of $cfg['TempDir'] into PMA_Config?     * @access  public     * @return  boolean whether uploaded fiel is fine or not     */    function checkUploadedFile()    {        if ($this->isReadable()) {            return true;        }        if (empty($GLOBALS['cfg']['TempDir']) || ! is_writable($GLOBALS['cfg']['TempDir'])) {            // cannot create directory or access, point user to FAQ 1.11            $this->_error_message = __('Error moving the uploaded file, see [a@./Documentation.html#faq1_11@Documentation]FAQ 1.11[/a]');            return false;        }        $new_file_to_upload = tempnam(realpath($GLOBALS['cfg']['TempDir']), basename($this->getName()));        // suppress warnings from being displayed, but not from being logged        // any file access outside of open_basedir will issue a warning        ob_start();        $move_uploaded_file_result = move_uploaded_file($this->getName(), $new_file_to_upload);        ob_end_clean();        if (! $move_uploaded_file_result) {            $this->_error_message = __('Error while moving uploaded file.');            return false;        }        $this->setName($new_file_to_upload);        $this->isTemp(true);        if (! $this->isReadable()) {            $this->_error_message = __('Cannot read (moved) upload file.');            return false;        }        return true;    }    /**     * Detects what compression filse uses     *     * @todo    move file read part into readChunk() or getChunk()     * @todo    add support for compression plugins     * @access  protected     * @return  string MIME type of compression, none for none     */    function _detectCompression()    {        // suppress warnings from being displayed, but not from being logged        // f.e. any file access outside of open_basedir will issue a warning        ob_start();        $file = fopen($this->getName(), 'rb');        ob_end_clean();        if (! $file) {            $this->_error_message = __('File could not be read');            return false;        }        /**         * @todo         * get registered plugins for file compression        foreach (PMA_getPlugins($type = 'compression') as $plugin) {            if (call_user_func_array(array($plugin['classname'], 'canHandle'), array($this->getName()))) {                $this->setCompressionPlugin($plugin);                break;            }        }         */        $test = fread($file, 4);        $len = strlen($test);        fclose($file);        if ($len >= 2 && $test[0] == chr(31) && $test[1] == chr(139)) {            $this->_compression = 'application/gzip';        } elseif ($len >= 3 && substr($test, 0, 3) == 'BZh') {            $this->_compression = 'application/bzip2';        } elseif ($len >= 4 && $test == "PK\003\004") {            $this->_compression = 'application/zip';        } else {            $this->_compression = 'none';        }        return $this->_compression;    }    /**     * whether the content should be decompressed before returned     */    function setDecompressContent($decompress)    {        $this->_decompress = (bool) $decompress;    }    function getHandle()    {        if (null === $this->_handle) {            $this->open();        }        return $this->_handle;    }    function setHandle($handle)    {        $this->_handle = $handle;    }    /**     * @return bool     */    function open()    {        if (! $this->_decompress) {            $this->_handle = @fopen($this->getName(), 'r');        }        switch ($this->getCompression()) {            case false:                return false;            case 'application/bzip2':                if ($GLOBALS['cfg']['BZipDump'] && @function_exists('bzopen')) {                    $this->_handle = @bzopen($this->getName(), 'r');                } else {                    $this->_error_message = sprintf(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'), $this->getCompression());                    return false;                }                break;            case 'application/gzip':                if ($GLOBALS['cfg']['GZipDump'] && @function_exists('gzopen')) {                    $this->_handle = @gzopen($this->getName(), 'r');                } else {                    $this->_error_message = sprintf(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'), $this->getCompression());                    return false;                }                break;            case 'application/zip':                if ($GLOBALS['cfg']['ZipDump'] && @function_exists('zip_open')) {                    include_once './libraries/zip_extension.lib.php';                    $result = PMA_getZipContents($this->getName());                    if (! empty($result['error'])) {                        $this->_error_message = PMA_Message::rawError($result['error']);                        return false;                    } else {                        $this->content_uncompressed = $result['data'];                    }                    unset($result);                } else {                    $this->_error_message = sprintf(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'), $this->getCompression());                    return false;                }                break;            case 'none':                $this->_handle = @fopen($this->getName(), 'r');                break;            default:                $this->_error_message = sprintf(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'), $this->getCompression());                return false;                break;        }        return true;    }    function getCharset()    {        return $this->_charset;    }    function setCharset($charset)    {        $this->_charset = $charset;    }    /**     * @return  string MIME type of compression, none for none     * @access  public     */    function getCompression()    {        if (null === $this->_compression) {            return $this->_detectCompression();        }        return $this->_compression;    }    /**     * advances the file pointer in the file handle by $length bytes/chars     *     * @param integer $length numbers of chars/bytes to skip     * @return  boolean     * @todo this function is unused     */    function advanceFilePointer($length)    {        while ($length > 0) {            $this->getNextChunk($length);            $length -= $this->getChunkSize();        }    }    /**     * http://bugs.php.net/bug.php?id=29532     * bzip reads a maximum of 8192 bytes on windows systems     * @todo this function is unused     * @param int $max_size     * @return bool|string     */    function getNextChunk($max_size = null)    {        if (null !== $max_size) {            $size = min($max_size, $this->getChunkSize());        } else {            $size = $this->getChunkSize();        }        // $result = $this->handler->getNextChunk($size);        $result = '';        switch ($this->getCompression()) {            case 'application/bzip2':                $result = '';                while (strlen($result) < $size - 8192 && ! feof($this->getHandle())) {                    $result .= bzread($this->getHandle(), $size);                }                break;            case 'application/gzip':                $result = gzread($this->getHandle(), $size);                break;            case 'application/zip':                /*                 * if getNextChunk() is used some day,                 * replace this code by code similar to the one                 * in open()                 *                include_once './libraries/unzip.lib.php';                $import_handle = new SimpleUnzip();                $import_handle->ReadFile($this->getName());                if ($import_handle->Count() == 0) {                    $this->_error_message = __('No files found inside ZIP archive!');                    return false;                } elseif ($import_handle->GetError(0) != 0) {                    $this->_error_message = __('Error in ZIP archive:')                        . ' ' . $import_handle->GetErrorMsg(0);                    return false;                } else {                    $result = $import_handle->GetData(0);                }                 */                break;            case 'none':                $result = fread($this->getHandle(), $size);                break;            default:                return false;        }        if ($GLOBALS['charset_conversion']) {            $result = PMA_convert_string($this->getCharset(), 'utf-8', $result);        } else {            /**             * Skip possible byte order marks (I do not think we need more             * charsets, but feel free to add more, you can use wikipedia for             * reference: <http://en.wikipedia.org/wiki/Byte_Order_Mark>)             *             * @todo BOM could be used for charset autodetection             */            if ($this->getOffset() === 0) {                // UTF-8                if (strncmp($result, "\xEF\xBB\xBF", 3) == 0) {                    $result = substr($result, 3);                // UTF-16 BE, LE                } elseif (strncmp($result, "\xFE\xFF", 2) == 0                 || strncmp($result, "\xFF\xFE", 2) == 0) {                    $result = substr($result, 2);                }            }        }        $this->_offset += $size;        if (0 === $result) {            return true;        }        return $result;    }    function getOffset()    {        return $this->_offset;    }    function getChunkSize()    {        return $this->_chunk_size;    }    function setChunkSize($chunk_size)    {        $this->_chunk_size = (int) $chunk_size;    }    function getContentLength()    {        return strlen($this->_content);    }    function eof()    {        if ($this->getHandle()) {            return feof($this->getHandle());        } else {            return ($this->getOffset() >= $this->getContentLength());        }    }    /**     * sets reference to most recent BLOB repository reference     *     * @access  public     * @param string - BLOB repository reference    */    static function setRecentBLOBReference($ref)    {        PMA_File::$_recent_bs_reference = $ref;    }    /**     * retrieves reference to most recent BLOB repository reference     *     * @access  public     * @return  string - most recent BLOB repository reference    */    static function getRecentBLOBReference()    {        $ref = PMA_File::$_recent_bs_reference;        PMA_File::$_recent_bs_reference = null;        return $ref;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * dumps a database * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'export.js';// $sub_part is also used in db_info.inc.php to see if we are coming from// db_export.php, in which case we don't obey $cfg['MaxTableList']$sub_part  = '_export';require_once './libraries/db_common.inc.php';$url_query .= '&amp;goto=db_export.php';require_once './libraries/db_info.inc.php';/** * Displays the form */$export_page_title = __('View dump (schema) of database');// exit if no tables in db foundif ($num_tables < 1) {    PMA_Message::error(__('No tables found in database.'))->display();    include './libraries/footer.inc.php';    exit;} // end if$checkall_url = 'db_export.php?'              . PMA_generate_common_url($db)              . '&amp;goto=db_export.php';$multi_values = '<div>';$multi_values .= '<a href="' . $checkall_url . '" onclick="setSelectOptions(\'dump\', \'table_select[]\', true); return false;">' . __('Select All') . '</a>        /        <a href="' . $checkall_url . '&amp;unselectall=1" onclick="setSelectOptions(\'dump\', \'table_select[]\', false); return false;">' . __('Unselect All') . '</a><br />';$multi_values .= '<select name="table_select[]" id="table_select" size="10" multiple="multiple">';$multi_values .= "\n";if (!empty($selected_tbl) && empty($table_select)) {    $table_select = $selected_tbl;}// Check if the selected tables are defined in $_GET (from clicking Back button on export.php)if (isset($_GET['table_select'])) {    $_GET['table_select'] = urldecode($_GET['table_select']);    $_GET['table_select'] = explode(",", $_GET['table_select']);}foreach ($tables as $each_table) {    if (isset($_GET['table_select'])) {        if (in_array($each_table['Name'], $_GET['table_select'])) {            $is_selected = ' selected="selected"';        } else {            $is_selected = '';        }    } elseif (! empty($unselectall)            || (! empty($table_select) && !in_array($each_table['Name'], $table_select))) {        $is_selected = '';    } else {        $is_selected = ' selected="selected"';    }    $table_html   = htmlspecialchars($each_table['Name']);    $multi_values .= '                <option value="' . $table_html . '"'        . $is_selected . '>'        . str_replace(' ', '&nbsp;', $table_html) . '</option>' . "\n";} // end for$multi_values .= "\n";$multi_values .= '</select></div>';$export_type = 'database';require_once './libraries/display_export.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * functions for displaying the sql query form * * @usedby  server_sql.php * @usedby  db_sql.php * @usedby  tbl_sql.php * @usedby  tbl_structure.php * @usedby  tbl_tracking.php * @usedby  querywindow.php * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/file_listing.php'; // used for file listingrequire_once './libraries/bookmark.lib.php'; // used for file listing/** * prints the sql query boxes * * @usedby  server_sql.php * @usedby  db_sql.php * @usedby  tbl_sql.php * @usedby  tbl_structure.php * @usedby  tbl_tracking.php * @usedby  querywindow.php * @param boolean|string  $query          query to display in the textarea *                                          or true to display last executed * @param boolean|string  $display_tab    sql|files|history|full|false *                                          what part to display *                                          false if not inside querywindow * @param string          $delimiter */function PMA_sqlQueryForm($query = true, $display_tab = false, $delimiter = ';'){    // check tab to display if inside querywindow    if (! $display_tab) {        $display_tab = 'full';        $is_querywindow = false;    } else {        $is_querywindow = true;    }    // query to show    if (true === $query) {        $query = $GLOBALS['sql_query'];    }    // set enctype to multipart for file uploads    if ($GLOBALS['is_upload']) {        $enctype = ' enctype="multipart/form-data"';    } else {        $enctype = '';    }    $table  = '';    $db     = '';    if (! strlen($GLOBALS['db'])) {        // prepare for server related        $goto   = empty($GLOBALS['goto']) ?                    'server_sql.php' : $GLOBALS['goto'];    } elseif (! strlen($GLOBALS['table'])) {        // prepare for db related        $db     = $GLOBALS['db'];        $goto   = empty($GLOBALS['goto']) ?                    'db_sql.php' : $GLOBALS['goto'];    } else {        $table  = $GLOBALS['table'];        $db     = $GLOBALS['db'];        $goto   = empty($GLOBALS['goto']) ?                    'tbl_sql.php' : $GLOBALS['goto'];    }    // start output    if ($is_querywindow) {        ?>        <form method="post" id="sqlqueryform" target="frame_content"              action="import.php"<?php echo $enctype; ?> name="sqlform"              onsubmit="var save_name = window.opener.parent.frame_content.name;              window.opener.parent.frame_content.name = save_name + '<?php echo time(); ?>';              this.target = window.opener.parent.frame_content.name;              return checkSqlQuery(this)">        <?php    } else {        echo '<form method="post" action="import.php" ' . $enctype;        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax"';        }        echo ' id="sqlqueryform" name="sqlform">' . "\n";    }    if ($is_querywindow) {        echo '<input type="hidden" name="focus_querywindow" value="true" />'            ."\n";        if ($display_tab != 'sql' && $display_tab != 'full') {            echo '<input type="hidden" name="sql_query" value="" />' . "\n";            echo '<input type="hidden" name="show_query" value="1" />' . "\n";        }    }    echo '<input type="hidden" name="is_js_confirmed" value="0" />' . "\n"        .PMA_generate_common_hidden_inputs($db, $table) . "\n"        .'<input type="hidden" name="pos" value="0" />' . "\n"        .'<input type="hidden" name="goto" value="'        .htmlspecialchars($goto) . '" />' . "\n"        .'<input type="hidden" name="message_to_show" value="'        . __('Your SQL query has been executed successfully') . '" />' . "\n"        .'<input type="hidden" name="prev_sql_query" value="'        . htmlspecialchars($query) . '" />' . "\n";    // display querybox    if ($display_tab === 'full' || $display_tab === 'sql') {        PMA_sqlQueryFormInsert($query, $is_querywindow, $delimiter);    }    // display uploads    if ($display_tab === 'files' && $GLOBALS['is_upload']) {        PMA_sqlQueryFormUpload();    }    // Bookmark Support    if ($display_tab === 'full' || $display_tab === 'history') {        if (! empty($GLOBALS['cfg']['Bookmark'])) {            PMA_sqlQueryFormBookmark();        }    }    // Encoding setting form appended by Y.Kawada    if (function_exists('PMA_set_enc_form')) {        echo PMA_set_enc_form('    ');    }    echo '</form>' . "\n";    if ($is_querywindow) {        ?>        <script type="text/javascript">        //<![CDATA[            if (window.opener) {                window.opener.parent.insertQuery();            }        //]]>        </script>        <?php    }    // print an empty div, which will be later filled with the sql query results by ajax    echo '<div id="sqlqueryresults"></div>';}/** * prints querybox fieldset * * @usedby  PMA_sqlQueryForm() * @param string      $query          query to display in the textarea * @param boolean     $is_querywindow if inside querywindow or not * @param string      $delimiter      default delimiter to use */function PMA_sqlQueryFormInsert($query = '', $is_querywindow = false, $delimiter = ';'){    // enable auto select text in textarea    if ($GLOBALS['cfg']['TextareaAutoSelect']) {        $auto_sel = ' onclick="selectContent(this, sql_box_locked, true)"';    } else {        $auto_sel = '';    }    // enable locking if inside query window    if ($is_querywindow) {        $locking = ' onkeypress="document.sqlform.elements[\'LockFromUpdate\'].'            .'checked = true;"';        $height = $GLOBALS['cfg']['TextareaRows'] * 1.25;    } else {        $locking = '';        $height = $GLOBALS['cfg']['TextareaRows'] * 2;    }    $table          = '';    $db             = '';    $fields_list    = array();    if (! strlen($GLOBALS['db'])) {        // prepare for server related        $legend = sprintf(__('Run SQL query/queries on server %s'),            '&quot;' . htmlspecialchars(                ! empty($GLOBALS['cfg']['Servers'][$GLOBALS['server']]['verbose']) ? $GLOBALS['cfg']['Servers'][$GLOBALS['server']]['verbose'] : $GLOBALS['cfg']['Servers'][$GLOBALS['server']]['host']) . '&quot;');    } elseif (! strlen($GLOBALS['table'])) {        // prepare for db related        $db     = $GLOBALS['db'];        // if you want navigation:        $tmp_db_link = '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase']            . '?' . PMA_generate_common_url($db) . '"';        if ($is_querywindow) {            $tmp_db_link .= ' target="_self"'                . ' onclick="this.target=window.opener.frame_content.name"';        }        $tmp_db_link .= '>'            . htmlspecialchars($db) . '</a>';        // else use        // $tmp_db_link = htmlspecialchars($db);        $legend = sprintf(__('Run SQL query/queries on database %s'), $tmp_db_link);        if (empty($query)) {            $query = PMA_expandUserString($GLOBALS['cfg']['DefaultQueryDatabase'], 'PMA_backquote');        }    } else {        $table  = $GLOBALS['table'];        $db     = $GLOBALS['db'];        // Get the list and number of fields        // we do a try_query here, because we could be in the query window,        // trying to synchonize and the table has not yet been created        $fields_list = PMA_DBI_get_columns($db, $GLOBALS['table'], null, true);        $tmp_db_link = '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase']            . '?' . PMA_generate_common_url($db) . '"';        if ($is_querywindow) {            $tmp_db_link .= ' target="_self"'                . ' onclick="this.target=window.opener.frame_content.name"';        }        $tmp_db_link .= '>'            . htmlspecialchars($db) . '</a>';        // else use        // $tmp_db_link = htmlspecialchars($db);        $legend = sprintf(__('Run SQL query/queries on database %s'), $tmp_db_link);        if (empty($query)) {            $query = PMA_expandUserString($GLOBALS['cfg']['DefaultQueryTable'], 'PMA_backquote');        }    }    $legend .= ': ' . PMA_showMySQLDocu('SQL-Syntax', 'SELECT');    if (count($fields_list)) {        $sqlquerycontainer_id = 'sqlquerycontainer';    } else {        $sqlquerycontainer_id = 'sqlquerycontainerfull';    }    echo '<a name="querybox"></a>' . "\n"        .'<div id="queryboxcontainer">' . "\n"        .'<fieldset id="querybox">' . "\n";    echo '<legend>' . $legend . '</legend>' . "\n";    echo '<div id="queryfieldscontainer">' . "\n";    echo '<div id="' . $sqlquerycontainer_id . '">' . "\n"        .'<textarea tabindex="100" name="sql_query" id="sqlquery"'        .'  cols="' . $GLOBALS['cfg']['TextareaCols'] . '"'        .'  rows="' . $height . '"'        .'  dir="' . $GLOBALS['text_dir'] . '"'        .$auto_sel . $locking . '>' . htmlspecialchars($query) . '</textarea>' . "\n";    // Add buttons to generate query easily for select all,single select,insert,update and delete    if (count($fields_list)) {        echo '<input type="button" value="SELECT *" id="selectall" class="sqlbutton" />';        echo '<input type="button" value="SELECT" id="select" class="sqlbutton" />';        echo '<input type="button" value="INSERT" id="insert" class="sqlbutton" />';        echo '<input type="button" value="UPDATE" id="update" class="sqlbutton" />';        echo '<input type="button" value="DELETE" id="delete" class="sqlbutton" />';    }    echo '<input type="button" value="' . __('Clear') . '" id="clear" class="sqlbutton" />';    echo '</div>' . "\n";    if (count($fields_list)) {        echo '<div id="tablefieldscontainer">' . "\n"            .'<label>' . __('Columns') . '</label>' . "\n"            .'<select id="tablefields" name="dummy" '            .'size="' . ($GLOBALS['cfg']['TextareaRows'] - 2) . '" '            .'multiple="multiple" ondblclick="insertValueQuery()">' . "\n";        foreach ($fields_list as $field) {            echo '<option value="'                .PMA_backquote(htmlspecialchars($field['Field'])) . '"';            if (isset($field['Field']) && strlen($field['Field']) && isset($field['Comment'])) {                echo ' title="' . htmlspecialchars($field['Comment']) . '"';            }            echo '>' . htmlspecialchars($field['Field']) . '</option>' . "\n";        }        echo '</select>' . "\n"            .'<div id="tablefieldinsertbuttoncontainer">' . "\n";        if ($GLOBALS['cfg']['PropertiesIconic']) {            echo '<input type="button" name="insert" value="&lt;&lt;"'                .' onclick="insertValueQuery()"'                .' title="' . __('Insert') . '" />' . "\n";        } else {            echo '<input type="button" name="insert"'                .' value="' . __('Insert') . '"'                .' onclick="insertValueQuery()" />' . "\n";        }        echo '</div>' . "\n"            .'</div>' . "\n";    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</div>' . "\n";    if (! empty($GLOBALS['cfg']['Bookmark'])) {        ?>        <div id="bookmarkoptions">        <div class="formelement">        <label for="bkm_label">            <?php echo __('Bookmark this SQL query'); ?>:</label>        <input type="text" name="bkm_label" id="bkm_label" tabindex="110" value="" />        </div>        <div class="formelement">        <input type="checkbox" name="bkm_all_users" tabindex="111" id="id_bkm_all_users"            value="true" />        <label for="id_bkm_all_users">            <?php echo __('Let every user access this bookmark'); ?></label>        </div>        <div class="formelement">        <input type="checkbox" name="bkm_replace" tabindex="112" id="id_bkm_replace"            value="true" />        <label for="id_bkm_replace">            <?php echo __('Replace existing bookmark of same name'); ?></label>        </div>        </div>        <?php    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n"        .'</div>' . "\n";    echo '<fieldset id="queryboxfooter" class="tblFooters">' . "\n";    echo '<div class="formelement">' . "\n";    if ($is_querywindow) {        ?>        <script type="text/javascript">        //<![CDATA[            document.writeln(' <input type="checkbox" name="LockFromUpdate" checked="checked" tabindex="120" id="checkbox_lock" /> <label for="checkbox_lock"><?php echo __('Do not overwrite this query from outside the window'); ?></label> ');        //]]>        </script>        <?php    }    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo '<label for="id_sql_delimiter">[ ' . __('Delimiter')        .'</label>' . "\n";    echo '<input type="text" name="sql_delimiter" tabindex="131" size="3" '        .'value="' . $delimiter . '" '        .'id="id_sql_delimiter" /> ]' . "\n";    echo '<input type="checkbox" name="show_query" value="1" '        .'id="checkbox_show_query" tabindex="132" checked="checked" />' . "\n"        .'<label for="checkbox_show_query">' . __('Show this query here again')        .'</label>' . "\n";    if (! $is_querywindow) {        echo '<input type="checkbox" name="retain_query_box" value="1" '            . 'id="retain_query_box" tabindex="133" '            . ($GLOBALS['cfg']['RetainQueryBox'] === false ? '' : ' checked="checked"')            . ' />'            . '<label for="retain_query_box">' . __('Retain query box')            . '</label>';    }    echo '</div>' . "\n";    echo '<input type="submit" id="button_submit_query" name="SQL" tabindex="200" value="' . __('Go') . '" />'        ."\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";}/** * prints bookmark fieldset * * @usedby  PMA_sqlQueryForm() */function PMA_sqlQueryFormBookmark(){    $bookmark_list = PMA_Bookmark_getList($GLOBALS['db']);    if (! $bookmark_list || count($bookmark_list) < 1) {        return;    }    echo '<fieldset id="bookmarkoptions">';    echo '<legend>';    echo __('Bookmarked SQL query') . '</legend>' . "\n";    echo '<div class="formelement">';    echo '<select name="id_bookmark" id="id_bookmark">' . "\n";    echo '<option value="">&nbsp;</option>' . "\n";    foreach ($bookmark_list as $key => $value) {        echo '<option value="' . htmlspecialchars($key) . '">'            .htmlspecialchars($value) . '</option>' . "\n";    }    // &nbsp; is required for correct display with styles/line height    echo '</select>&nbsp;' . "\n";    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo __('Variable');    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        echo ' <a href="./Documentation.html#faqbookmark"'            .' target="documentation">'            . PMA_getImage('b_help.png', __('Documentation')) . '</a>';    } else {        echo ' (<a href="./Documentation.html#faqbookmark"'            .' target="documentation">' . __('Documentation') . '</a>): ';    }    echo '<input type="text" name="bookmark_variable" class="textfield"'        .' size="10" />' . "\n";    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo '<input type="radio" name="action_bookmark" value="0"'        .' id="radio_bookmark_exe" checked="checked" />'        .'<label for="radio_bookmark_exe">' . __('Submit')        .'</label>' . "\n";    echo '<input type="radio" name="action_bookmark" value="1"'        .' id="radio_bookmark_view" />'        .'<label for="radio_bookmark_view">' . __('View only')        .'</label>' . "\n";    echo '<input type="radio" name="action_bookmark" value="2"'        .' id="radio_bookmark_del" />'        .'<label for="radio_bookmark_del">' . __('Delete')        .'</label>' . "\n";    echo '</div>' . "\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";    echo '<fieldset id="bookmarkoptionsfooter" class="tblFooters">' . "\n";    echo '<input type="submit" name="SQL" id="button_submit_bookmark" value="' . __('Go') . '" />';    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";}/** * prints bookmark fieldset * * @usedby  PMA_sqlQueryForm() */function PMA_sqlQueryFormUpload(){    $errors = array ();    $matcher = '@\.sql(\.(' . PMA_supportedDecompressions() . '))?$@'; // we allow only SQL here    if (!empty($GLOBALS['cfg']['UploadDir'])) {        $files = PMA_getFileSelectOptions(PMA_userDir($GLOBALS['cfg']['UploadDir']), $matcher, (isset($timeout_passed) && $timeout_passed && isset($local_import_file)) ? $local_import_file : '');    } else {        $files = '';    }    // start output    echo '<fieldset id="">';    echo '<legend>';    echo __('Browse your computer:') . '</legend>';    echo '<div class="formelement">';    echo '<input type="file" name="sql_file" class="textfield" /> ';    echo PMA_displayMaximumUploadSize($GLOBALS['max_upload_size']);    // some browsers should respect this :)    echo PMA_generateHiddenMaxFileSize($GLOBALS['max_upload_size']) . "\n";    echo '</div>';    if ($files === false) {        $errors[] = PMA_Message::error( __('The directory you set for upload work cannot be reached'));    } elseif (!empty($files)) {        echo '<div class="formelement">';        echo '<strong>' . __('web server upload directory') .':</strong>' . "\n";        echo '<select size="1" name="sql_localfile">' . "\n";        echo '<option value="" selected="selected"></option>' . "\n";        echo $files;        echo '</select>' . "\n";        echo '</div>';    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>';    echo '<fieldset id="" class="tblFooters">';    echo __('Character set of the file:') . "\n";    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_CHARSET,            'charset_of_file', null, 'utf8', false);    echo '<input type="submit" name="SQL" value="' . __('Go')        .'" />' . "\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>';    foreach ($errors as $error) {        $error->display();    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/jquery.sprintf.js';// Handles some variables that may have been sent by the calling script$GLOBALS['db'] = '';$GLOBALS['table'] = '';$show_query = '1';require_once './libraries/header.inc.php';// Any message to display?if (! empty($message)) {    PMA_showMessage($message);    unset($message);}$common_url_query =  PMA_generate_common_url('', '');// when $server > 0, a server has been chosen so we can display// all MySQL-related informationif ($server > 0) {    include './libraries/server_common.inc.php';    include './libraries/StorageEngine.class.php';    include './libraries/server_links.inc.php';    // Use the verbose name of the server instead of the hostname    // if a value is set    $server_info = '';    if (! empty($cfg['Server']['verbose'])) {        $server_info .= htmlspecialchars($cfg['Server']['verbose']);        if ($GLOBALS['cfg']['ShowServerInfo']) {            $server_info .= ' (';        }    }    if ($GLOBALS['cfg']['ShowServerInfo'] || empty($cfg['Server']['verbose'])) {        $server_info .= PMA_DBI_get_host_info();    }    if (! empty($cfg['Server']['verbose']) && $GLOBALS['cfg']['ShowServerInfo']) {    $server_info .= ')';    }    $mysql_cur_user_and_host = PMA_DBI_fetch_value('SELECT USER();');    // should we add the port info here?    $short_server_info = (!empty($GLOBALS['cfg']['Server']['verbose'])                ? $GLOBALS['cfg']['Server']['verbose']                : $GLOBALS['cfg']['Server']['host']);}echo '<div id="maincontainer">' . "\n";echo '<div id="main_pane_left">';if ($server > 0 || (! $cfg['LeftDisplayServers'] && count($cfg['Servers']) > 1)) {    echo '<div class="group">';    echo '<h2>' . __('General Settings') . '</h2>';    echo '<ul>';    /**     * Displays the MySQL servers choice form     */    if (! $cfg['LeftDisplayServers']     && (count($cfg['Servers']) > 1 || $server == 0 && count($cfg['Servers']) == 1)) {        echo '<li id="li_select_server">';        include_once './libraries/select_server.lib.php';        PMA_select_server(true, true);        echo '</li>';    }    /**     * Displays the mysql server related links     */    if ($server > 0 && !PMA_DRIZZLE) {        include_once './libraries/check_user_privileges.lib.php';        // Logout for advanced authentication        if ($cfg['Server']['auth_type'] != 'config') {            if ($cfg['ShowChgPassword']) {                if ($GLOBALS['cfg']['AjaxEnable']) {                    $conditional_class = 'ajax';                } else {                    $conditional_class = null;                }                PMA_printListItem(                    __('Change password'),                    'li_change_password',                    './user_password.php?' . $common_url_query,                    null,                    null,                    'change_password_anchor',                    null,                    $conditional_class                );            }        } // end if        echo '    <li id="li_select_mysql_collation">';        echo '        <form method="post" action="index.php" target="_parent">' . "\n"           . PMA_generate_common_hidden_inputs(null, null, 4, 'collation_connection')           . '            <label for="select_collation_connection">' . "\n"           . '                ' . __('Server connection collation') . "\n"           // put the doc link in the form so that it appears on the same line           . PMA_showMySQLDocu('MySQL_Database_Administration', 'Charset-connection') . ': ' .  "\n"           . '            </label>' . "\n"           . PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION, 'collation_connection', 'select_collation_connection', $collation_connection, true, 4, true)           . '            <noscript><input type="submit" value="' . __('Go') . '" /></noscript>' . "\n"           . '        </form>' . "\n"           . '    </li>' . "\n";    } // end of if ($server > 0 && !PMA_DRIZZLE)    echo '</ul>';    echo '</div>';}echo '<div class="group">';echo '<h2>' . __('Appearance Settings') . '</h2>';echo '  <ul>';// Displays language selection comboif (empty($cfg['Lang'])) {    echo '<li id="li_select_lang">';    include_once './libraries/display_select_lang.lib.php';    PMA_select_language();    echo '</li>';}// ThemeManager if availableif ($GLOBALS['cfg']['ThemeManager']) {    echo '<li id="li_select_theme">';    echo $_SESSION['PMA_Theme_Manager']->getHtmlSelectBox();    echo '</li>';}echo '<li id="li_select_fontsize">';echo PMA_Config::getFontsizeForm();echo '</li>';echo '</ul>';// User preferencesif ($server > 0) {    echo '<ul>';    echo PMA_printListItem(        __('More settings'),        'li_user_preferences',        './prefs_manage.php?' . $common_url_query    );    echo '</ul>';}echo '</div>';echo '</div>';echo '<div id="main_pane_right">';if ($server > 0 && $GLOBALS['cfg']['ShowServerInfo']) {    echo '<div class="group">';    echo '<h2>' . __('Database server') . '</h2>';    echo '<ul>' . "\n";    PMA_printListItem(__('Server') . ': ' . $server_info, 'li_server_info');    PMA_printListItem(__('Software') . ': ' . PMA_getServerType(), 'li_server_type');    PMA_printListItem(__('Software version') . ': ' . PMA_MYSQL_STR_VERSION . ' - ' . PMA_MYSQL_VERSION_COMMENT, 'li_server_version');    PMA_printListItem(        __('Protocol version') . ': ' . PMA_DBI_get_proto_info(),        'li_mysql_proto'    );    PMA_printListItem(        __('User') . ': ' . htmlspecialchars($mysql_cur_user_and_host),        'li_user_info'    );    echo '    <li id="li_select_mysql_charset">';    echo '        ' . __('Server charset') . ': '       . '        <span xml:lang="en" dir="ltr">'       . '           ' . $mysql_charsets_descriptions[$mysql_charset_map['utf-8']] . "\n"       . '           (' . $mysql_charset_map['utf-8'] . ')' . "\n"       . '        </span>' . "\n"       . '    </li>' . "\n";    echo '  </ul>';    echo ' </div>';}if ($GLOBALS['cfg']['ShowServerInfo'] || $GLOBALS['cfg']['ShowPhpInfo']) {    echo '<div class="group">';    echo '<h2>' . __('Web server') . '</h2>';    echo '<ul>';    if ($GLOBALS['cfg']['ShowServerInfo']) {        PMA_printListItem($_SERVER['SERVER_SOFTWARE'], 'li_web_server_software');        if ($server > 0) {            $client_version_str = PMA_DBI_get_client_info();            if (preg_match('#\d+\.\d+\.\d+#', $client_version_str)                && in_array($GLOBALS['cfg']['Server']['extension'], array('mysql', 'mysqli'))            ) {                $client_version_str = 'libmysql - ' . $client_version_str;            }            PMA_printListItem(                __('Database client version') . ': ' . $client_version_str,                'li_mysql_client_version'            );            PMA_printListItem(                __('PHP extension') . ': ' . $GLOBALS['cfg']['Server']['extension']. ' '                    . PMA_showPHPDocu('book.' . $GLOBALS['cfg']['Server']['extension'] . '.php'),                'li_used_php_extension'            );        }    }    if ($cfg['ShowPhpInfo']) {        PMA_printListItem(__('Show PHP information'), 'li_phpinfo', './phpinfo.php?' . $common_url_query);    }    echo '  </ul>';    echo ' </div>';}echo '<div class="group pmagroup">';echo '<h2>phpMyAdmin</h2>';echo '<ul>';$class = null;// workaround for bug 3302733; some browsers don't like the situation// where phpMyAdmin is called on a secure page but a part of the page// (the version check) refers to a non-secure pageif ($GLOBALS['cfg']['VersionCheck'] && ! $GLOBALS['PMA_Config']->get('is_https')) {    $class = 'jsversioncheck';}PMA_printListItem(__('Version information') . ': ' . PMA_VERSION, 'li_pma_version', null, null, null, null, $class);PMA_printListItem(__('Documentation'), 'li_pma_docs', 'Documentation.html', null, '_blank');PMA_printListItem(__('Wiki'), 'li_pma_wiki', PMA_linkURL('http://wiki.phpmyadmin.net/'), null, '_blank');// does not work if no target specified, don't know whyPMA_printListItem(__('Official Homepage'), 'li_pma_homepage', PMA_linkURL('http://www.phpMyAdmin.net/'), null, '_blank');PMA_printListItem(__('Contribute'), 'li_pma_contribute', PMA_linkURL('http://www.phpmyadmin.net/home_page/improve.php'), null, '_blank');PMA_printListItem(__('Get support'), 'li_pma_support', PMA_linkURL('http://www.phpmyadmin.net/home_page/support.php'), null, '_blank');PMA_printListItem(__('List of changes'), 'li_pma_changes', PMA_linkURL('changelog.php'), null, '_blank');?>    </ul> </div></div><?php/** * BUG: MSIE needs two <br /> here, otherwise it will not extend the outer div to the * full height of the inner divs */?><br class="clearfloat" /><br class="clearfloat" /></div><?php/** * Warning if using the default MySQL privileged account */if ($server != 0 && $cfg['Server']['user'] == 'root' && $cfg['Server']['password'] == '') {    trigger_error(__('Your configuration file contains settings (root with no password) that correspond to the default MySQL privileged account. Your MySQL server is running with this default, is open to intrusion, and you really should fix this security hole by setting a password for user \'root\'.'), E_USER_WARNING);}/** * Nijel: As we try to handle charsets by ourself, mbstring overloads just * break it, see bug 1063821. */if (@extension_loaded('mbstring') && @ini_get('mbstring.func_overload') > 1) {    trigger_error(__('You have enabled mbstring.func_overload in your PHP configuration. This option is incompatible with phpMyAdmin and might cause some data to be corrupted!'), E_USER_WARNING);}/** * Nijel: mbstring is used for handling multibyte inside parser, so it is good * to tell user something might be broken without it, see bug #1063149. */if (! @extension_loaded('mbstring')) {    trigger_error(__('The mbstring PHP extension was not found and you seem to be using a multibyte charset. Without the mbstring extension phpMyAdmin is unable to split strings correctly and it may result in unexpected results.'), E_USER_WARNING);}/** * Check whether session.gc_maxlifetime limits session validity. */$gc_time = (int)@ini_get('session.gc_maxlifetime');if ($gc_time < $GLOBALS['cfg']['LoginCookieValidity'] ) {    trigger_error(PMA_Message::decodeBB(__('Your PHP parameter [a@http://php.net/manual/en/session.configuration.php#ini.session.gc-maxlifetime@]session.gc_maxlifetime[/a] is lower that cookie validity configured in phpMyAdmin, because of this, your login will expire sooner than configured in phpMyAdmin.')), E_USER_WARNING);}/** * Check whether LoginCookieValidity is limited by LoginCookieStore. */if ($GLOBALS['cfg']['LoginCookieStore'] != 0 && $GLOBALS['cfg']['LoginCookieStore'] < $GLOBALS['cfg']['LoginCookieValidity']) {    trigger_error(PMA_Message::decodeBB(__('Login cookie store is lower than cookie validity configured in phpMyAdmin, because of this, your login will expire sooner than configured in phpMyAdmin.')), E_USER_WARNING);}/** * Check if user does not have defined blowfish secret and it is being used. */if (!empty($_SESSION['auto_blowfish_secret']) &&        empty($GLOBALS['cfg']['blowfish_secret'])) {    trigger_error(__('The configuration file now needs a secret passphrase (blowfish_secret).'), E_USER_WARNING);}/** * Check for existence of config directory which should not exist in * production environment. */if (file_exists('./config')) {    trigger_error(__('Directory [code]config[/code], which is used by the setup script, still exists in your phpMyAdmin directory. You should remove it once phpMyAdmin has been configured.'), E_USER_WARNING);}if ($server > 0) {    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['allworks'] && $cfg['PmaNoRelation_DisableWarning'] == false) {        $message = PMA_Message::notice(__('The phpMyAdmin configuration storage is not completely configured, some extended features have been deactivated. To find out why click %shere%s.'));        $message->addParam('<a href="' . $cfg['PmaAbsoluteUri'] . 'chk_rel.php?' . $common_url_query . '">', false);        $message->addParam('</a>', false);        /* Show error if user has configured something, notice elsewhere */        if (!empty($cfg['Servers'][$server]['pmadb'])) {            $message->isError(true);        }        $message->display();    } // end if}/** * Show notice when javascript support is missing. */echo '<noscript>';$message = PMA_Message::notice(__('Javascript support is missing or disabled in your browser, some phpMyAdmin functionality will be missing. For example navigation frame will not refresh automatically.'));$message->isError(true);$message->display();echo '</noscript>';/** * Warning about different MySQL library and server version * (a difference on the third digit does not count). * If someday there is a constant that we can check about mysqlnd, we can use it instead * of strpos(). * If no default server is set, PMA_DBI_get_client_info() is not defined yet. * Drizzle can speak MySQL protocol, so don't warn about version mismatch for Drizzle servers. */if (function_exists('PMA_DBI_get_client_info') && !PMA_DRIZZLE) {    $_client_info = PMA_DBI_get_client_info();    if ($server > 0 && strpos($_client_info, 'mysqlnd') === false && substr(PMA_MYSQL_CLIENT_API, 0, 3) != substr(PMA_MYSQL_INT_VERSION, 0, 3)) {        trigger_error(            PMA_sanitize(                sprintf(                    __('Your PHP MySQL library version %s differs from your MySQL server version %s. This may cause unpredictable behavior.'),                    $_client_info,                    substr(                        PMA_MYSQL_STR_VERSION,                        0,                        strpos(PMA_MYSQL_STR_VERSION . '-', '-')                    )                )            ),            E_USER_NOTICE        );    }    unset($_client_info);}/** * Warning about Suhosin */if ($cfg['SuhosinDisableWarning'] == false    && @ini_get('suhosin.request.max_value_length')) {    trigger_error(        PMA_sanitize(            sprintf(                __('Server running with Suhosin. Please refer to %sdocumentation%s for possible issues.'),                '[a@./Documentation.html#faq1_38@_blank]',                '[/a]'            )        ),        E_USER_WARNING    );}/** * Warning about mcrypt. */if (!function_exists('mcrypt_encrypt') && !$GLOBALS['cfg']['McryptDisableWarning']) {    PMA_warnMissingExtension('mcrypt');}/** * Warning about incomplete translations. * * The data file is created while creating release by ./scripts/remove-incomplete-mo */if (file_exists('./libraries/language_stats.inc.php')) {    include './libraries/language_stats.inc.php';    /*     * This message is intentionally not translated, because we're     * handling incomplete translations here and focus on english     * speaking users.     */    if (isset($GLOBALS['language_stats'][$lang]) && $GLOBALS['language_stats'][$lang] < $cfg['TranslationWarningThreshold']) {        trigger_error('You are using an incomplete translation, please help to make it better by <a href="http://www.phpmyadmin.net/home_page/improve.php#translate" target="_blank">contributing</a>.', E_USER_NOTICE);    }}/** * prints list item for main page * * @param string  $name   displayed text * @param string  $id     id, used for css styles * @param string  $url    make item as link with $url as target * @param string  $mysql_help_page  display a link to MySQL's manual * @param string  $target special target for $url * @param string  $a_id   id for the anchor, used for jQuery to hook in functions * @param string  $class  class for the li element * @param string  $a_class  class for the anchor element */function PMA_printListItem($name, $id = null, $url = null, $mysql_help_page = null, $target = null, $a_id = null, $class = null, $a_class = null){    echo '<li id="' . $id . '"';    if (null !== $class) {        echo ' class="' . $class . '"';    }    echo '>';    if (null !== $url) {        echo '<a href="' . $url . '"';        if (null !== $target) {           echo ' target="' . $target . '"';        }        if (null != $a_id) {            echo ' id="' . $a_id .'"';        }        if (null != $a_class) {            echo ' class="' . $a_class .'"';        }        echo '>';    }    echo $name;    if (null !== $url) {        echo '</a>' . "\n";    }    if (null !== $mysql_help_page) {        echo PMA_showMySQLDocu('', $mysql_help_page);    }    echo '</li>';}/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Misc functions used all over the scripts. * * @package PhpMyAdmin *//** * Detects which function to use for PMA_pow. * * @return string Function name. */function PMA_detect_pow(){    if (function_exists('bcpow')) {        // BCMath Arbitrary Precision Mathematics Function        return 'bcpow';    } elseif (function_exists('gmp_pow')) {        // GMP Function        return 'gmp_pow';    } else {        // PHP function        return 'pow';    }}/** * Exponential expression / raise number into power * * @param string $base         base to raise * @param string $exp          exponent to use * @param mixed  $use_function pow function to use, or false for auto-detect * * @return mixed string or float */function PMA_pow($base, $exp, $use_function = false){    static $pow_function = null;    if (null == $pow_function) {        $pow_function = PMA_detect_pow();    }    if (! $use_function) {        $use_function = $pow_function;    }    if ($exp < 0 && 'pow' != $use_function) {        return false;    }    switch ($use_function) {    case 'bcpow' :        // bcscale() needed for testing PMA_pow() with base values < 1        bcscale(10);        $pow = bcpow($base, $exp);        break;    case 'gmp_pow' :         $pow = gmp_strval(gmp_pow($base, $exp));        break;    case 'pow' :        $base = (float) $base;        $exp = (int) $exp;        $pow = pow($base, $exp);        break;    default:        $pow = $use_function($base, $exp);    }    return $pow;}/** * Returns an HTML IMG tag for a particular icon from a theme, * which may be an actual file or an icon from a sprite. * This function takes into account the PropertiesIconic * configuration setting and wraps the image tag in a span tag. * * @param string  $icon       name of icon file * @param string  $alternate  alternate text * @param boolean $force_text whether to force alternate text to be displayed * * @return string an html snippet */function PMA_getIcon($icon, $alternate = '', $force_text = false){    // $cfg['PropertiesIconic'] is true or both    $include_icon = ($GLOBALS['cfg']['PropertiesIconic'] !== false);    // $cfg['PropertiesIconic'] is false or both    // OR we have no $include_icon    $include_text = ($force_text || true !== $GLOBALS['cfg']['PropertiesIconic']);    // Always use a span (we rely on this in js/sql.js)    $button = '<span class="nowrap">';    if ($include_icon) {        $button .= PMA_getImage($icon, $alternate);    }    if ($include_icon && $include_text) {        $button .= ' ';    }    if ($include_text) {        $button .= $alternate;    }    $button .= '</span>';    return $button;}/** * Returns an HTML IMG tag for a particular image from a theme, * which may be an actual file or an icon from a sprite * * @param string $image      The name of the file to get * @param string $alternate  Used to set 'alt' and 'title' attributes of the image * @param array  $attributes An associative array of other attributes * * @return string an html IMG tag */function PMA_getImage($image, $alternate = '', $attributes = array()){    static $sprites; // cached list of available sprites (if any)    $url       = '';    $is_sprite = false;    $alternate = htmlspecialchars($alternate);    // If it's the first time this function is called    if (! isset($sprites)) {        // Try to load the list of sprites        if (is_readable($_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php')) {            include_once $_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php';            $sprites = PMA_sprites();        } else {            // No sprites are available for this theme            $sprites = array();        }    }    // Check if we have the requested image as a sprite    //  and set $url accordingly    $class = str_replace(array('.gif','.png'), '', $image);    if (array_key_exists($class, $sprites)) {        $is_sprite = true;        $url = 'themes/dot.gif';    } else {        $url = $GLOBALS['pmaThemeImage'] . $image;    }    // set class attribute    if ($is_sprite) {        if (isset($attributes['class'])) {            $attributes['class'] = "icon ic_$class " . $attributes['class'];        } else {            $attributes['class'] = "icon ic_$class";        }    }    // set all other attributes    $attr_str = '';    foreach ($attributes as $key => $value) {        if (! in_array($key, array('alt', 'title'))) {            $attr_str .= " $key=\"$value\"";        }    }    // override the alt attribute    if (isset($attributes['alt'])) {        $alt = $attributes['alt'];    } else {        $alt = $alternate;    }    // override the title attribute    if (isset($attributes['title'])) {        $title = $attributes['title'];    } else {        $title = $alternate;    }    // generate the IMG tag    $template = '<img src="%s" title="%s" alt="%s"%s />';    $retval = sprintf($template, $url, $title, $alt, $attr_str);    return $retval;}/** * Displays the maximum size for an upload * * @param integer $max_upload_size the size * * @return string the message * * @access  public */function PMA_displayMaximumUploadSize($max_upload_size){    // I have to reduce the second parameter (sensitiveness) from 6 to 4    // to avoid weird results like 512 kKib    list($max_size, $max_unit) = PMA_formatByteDown($max_upload_size, 4);    return '(' . sprintf(__('Max: %s%s'), $max_size, $max_unit) . ')';}/** * Generates a hidden field which should indicate to the browser * the maximum size for upload * * @param integer $max_size the size * * @return string the INPUT field * * @access  public */function PMA_generateHiddenMaxFileSize($max_size){    return '<input type="hidden" name="MAX_FILE_SIZE" value="' .$max_size . '" />';}/** * Add slashes before "'" and "\" characters so a value containing them can * be used in a sql comparison. * * @param string $a_string the string to slash * @param bool   $is_like  whether the string will be used in a 'LIKE' clause *                         (it then requires two more escaped sequences) or not * @param bool   $crlf     whether to treat cr/lfs as escape-worthy entities *                         (converts \n to \\n, \r to \\r) * @param bool   $php_code whether this function is used as part of the *                         "Create PHP code" dialog * * @return  string   the slashed string * * @access  public */function PMA_sqlAddSlashes($a_string = '', $is_like = false, $crlf = false, $php_code = false){    if ($is_like) {        $a_string = str_replace('\\', '\\\\\\\\', $a_string);    } else {        $a_string = str_replace('\\', '\\\\', $a_string);    }    if ($crlf) {        $a_string = strtr(            $a_string,            array("\n" => '\n', "\r" => '\r', "\t" => '\t')        );    }    if ($php_code) {        $a_string = str_replace('\'', '\\\'', $a_string);    } else {        $a_string = str_replace('\'', '\'\'', $a_string);    }    return $a_string;} // end of the 'PMA_sqlAddSlashes()' function/** * Add slashes before "_" and "%" characters for using them in MySQL * database, table and field names. * Note: This function does not escape backslashes! * * @param string $name the string to escape * * @return string the escaped string * * @access  public */function PMA_escape_mysql_wildcards($name){    return strtr($name, array('_' => '\\_', '%' => '\\%'));} // end of the 'PMA_escape_mysql_wildcards()' function/** * removes slashes before "_" and "%" characters * Note: This function does not unescape backslashes! * * @param string $name the string to escape * * @return  string   the escaped string * * @access  public */function PMA_unescape_mysql_wildcards($name){    return strtr($name, array('\\_' => '_', '\\%' => '%'));} // end of the 'PMA_unescape_mysql_wildcards()' function/** * removes quotes (',",`) from a quoted string * * checks if the sting is quoted and removes this quotes * * @param string $quoted_string string to remove quotes from * @param string $quote         type of quote to remove * * @return string unqoted string */function PMA_unQuote($quoted_string, $quote = null){    $quotes = array();    if (null === $quote) {        $quotes[] = '`';        $quotes[] = '"';        $quotes[] = "'";    } else {        $quotes[] = $quote;    }    foreach ($quotes as $quote) {        if (substr($quoted_string, 0, 1) === $quote            && substr($quoted_string, -1, 1) === $quote        ) {            $unquoted_string = substr($quoted_string, 1, -1);            // replace escaped quotes            $unquoted_string = str_replace(                $quote . $quote,                $quote,                $unquoted_string            );            return $unquoted_string;        }    }    return $quoted_string;}/** * format sql strings * * @param mixed  $parsed_sql   pre-parsed SQL structure * @param string $unparsed_sql raw SQL string * * @return string  the formatted sql * * @global  array    the configuration array * @global  boolean  whether the current statement is a multiple one or not * * @access  public * @todo    move into PMA_Sql */function PMA_formatSql($parsed_sql, $unparsed_sql = ''){    global $cfg;    // Check that we actually have a valid set of parsed data    // well, not quite    // first check for the SQL parser having hit an error    if (PMA_SQP_isError()) {        return htmlspecialchars($parsed_sql['raw']);    }    // then check for an array    if (! is_array($parsed_sql)) {        // We don't so just return the input directly        // This is intended to be used for when the SQL Parser is turned off        $formatted_sql = "<pre>\n";        if ($cfg['SQP']['fmtType'] == 'none' && $unparsed_sql != '') {            $formatted_sql .= $unparsed_sql;        } else {            $formatted_sql .= $parsed_sql;        }        $formatted_sql .= "\n</pre>";        return $formatted_sql;    }    $formatted_sql        = '';    switch ($cfg['SQP']['fmtType']) {    case 'none':        if ($unparsed_sql != '') {            $formatted_sql = '<span class="inner_sql"><pre>' . "\n"                . PMA_SQP_formatNone(array('raw' => $unparsed_sql)) . "\n"                . '</pre></span>';        } else {            $formatted_sql = PMA_SQP_formatNone($parsed_sql);        }        break;    case 'html':        $formatted_sql = PMA_SQP_formatHtml($parsed_sql, 'color');        break;    case 'text':        $formatted_sql = PMA_SQP_formatHtml($parsed_sql, 'text');        break;    default:        break;    } // end switch    return $formatted_sql;} // end of the "PMA_formatSql()" function/** * Displays a link to the official MySQL documentation * * @param string $chapter   chapter of "HTML, one page per chapter" documentation * @param string $link      contains name of page/anchor that is being linked * @param bool   $big_icon  whether to use big icon (like in left frame) * @param string $anchor    anchor to page part * @param bool   $just_open whether only the opening <a> tag should be returned * * @return  string  the html link * * @access  public */function PMA_showMySQLDocu($chapter, $link, $big_icon = false, $anchor = '', $just_open = false){    global $cfg;    if ($cfg['MySQLManualType'] == 'none' || empty($cfg['MySQLManualBase'])) {        return '';    }    // Fixup for newly used names:    $chapter = str_replace('_', '-', strtolower($chapter));    $link = str_replace('_', '-', strtolower($link));    switch ($cfg['MySQLManualType']) {    case 'chapters':        if (empty($chapter)) {            $chapter = 'index';        }        if (empty($anchor)) {            $anchor = $link;        }        $url = $cfg['MySQLManualBase'] . '/' . $chapter . '.html#' . $anchor;        break;    case 'big':        if (empty($anchor)) {            $anchor = $link;        }        $url = $cfg['MySQLManualBase'] . '#' . $anchor;        break;    case 'searchable':        if (empty($link)) {            $link = 'index';        }        $url = $cfg['MySQLManualBase'] . '/' . $link . '.html';        if (!empty($anchor)) {            $url .= '#' . $anchor;        }        break;    case 'viewable':    default:        if (empty($link)) {            $link = 'index';        }        $mysql = '5.0';        $lang = 'en';        if (defined('PMA_MYSQL_INT_VERSION')) {            if (PMA_MYSQL_INT_VERSION >= 50500) {                $mysql = '5.5';                /* l10n: Please check that translation actually exists. */                $lang = _pgettext('MySQL 5.5 documentation language', 'en');            } else if (PMA_MYSQL_INT_VERSION >= 50100) {                $mysql = '5.1';                /* l10n: Please check that translation actually exists. */                $lang = _pgettext('MySQL 5.1 documentation language', 'en');            } else {                $mysql = '5.0';                /* l10n: Please check that translation actually exists. */                $lang = _pgettext('MySQL 5.0 documentation language', 'en');            }        }        $url = $cfg['MySQLManualBase'] . '/' . $mysql . '/' . $lang . '/' . $link . '.html';        if (!empty($anchor)) {            $url .= '#' . $anchor;        }        break;    }    $open_link = '<a href="' . PMA_linkURL($url) . '" target="mysql_doc">';    if ($just_open) {        return $open_link;    } elseif ($big_icon) {        return $open_link . PMA_getImage('b_sqlhelp.png', __('Documentation')) . '</a>';    } elseif ($GLOBALS['cfg']['ReplaceHelpImg']) {        return $open_link . PMA_getImage('b_help.png', __('Documentation')) . '</a>';    } else {        return '[' . $open_link . __('Documentation') . '</a>]';    }} // end of the 'PMA_showMySQLDocu()' function/** * Displays a link to the phpMyAdmin documentation * * @param string $anchor anchor in documentation * * @return  string  the html link * * @access  public */function PMA_showDocu($anchor){    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        return '<a href="Documentation.html#' . $anchor . '" target="documentation">'             . PMA_getImage('b_help.png', __('Documentation'))             . '</a>';    } else {        return '[<a href="Documentation.html#' . $anchor . '" target="documentation">'        . __('Documentation') . '</a>]';    }} // end of the 'PMA_showDocu()' function/** * Displays a link to the PHP documentation * * @param string $target anchor in documentation * * @return string  the html link * * @access  public */function PMA_showPHPDocu($target){    $url = PMA_getPHPDocLink($target);    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        return '<a href="' . $url . '" target="documentation">'             . PMA_getImage('b_help.png', __('Documentation'))             . '</a>';    } else {        return '[<a href="' . $url . '" target="documentation">' . __('Documentation') . '</a>]';    }} // end of the 'PMA_showPHPDocu()' function/** * returns HTML for a footnote marker and add the messsage to the footnotes * * @param string $message the error message * @param bool   $bbcode * @param string $type    message types * * @return  string html code for a footnote marker * * @access  public */function PMA_showHint($message, $bbcode = false, $type = 'notice'){    if ($message instanceof PMA_Message) {        $key = $message->getHash();        $type = $message->getLevel();    } else {        $key = md5($message);    }    if (! isset($GLOBALS['footnotes'][$key])) {        if (empty($GLOBALS['footnotes']) || ! is_array($GLOBALS['footnotes'])) {            $GLOBALS['footnotes'] = array();        }        $nr = count($GLOBALS['footnotes']) + 1;        $GLOBALS['footnotes'][$key] = array(            'note'      => $message,            'type'      => $type,            'nr'        => $nr,        );    } else {        $nr = $GLOBALS['footnotes'][$key]['nr'];    }    if ($bbcode) {        return '[sup]' . $nr . '[/sup]';    }    // footnotemarker used in js/tooltip.js    return '<sup class="footnotemarker">' . $nr . '</sup>' .           PMA_getImage('b_help.png', '', array('class' => 'footnotemarker footnote_' . $nr));}/** * Displays a MySQL error message in the right frame. * * @param string $error_message  the error message * @param string $the_query      the sql query that failed * @param bool   $is_modify_link whether to show a "modify" link or not * @param string $back_url       the "back" link url (full path is not required) * @param bool   $exit           EXIT the page? * * @global  string    the curent table * @global  string    the current db * * @access  public */function PMA_mysqlDie($error_message = '', $the_query = '',$is_modify_link = true, $back_url = '', $exit = true){    global $table, $db;    /**     * start http output, display html headers     */    include_once './libraries/header.inc.php';    $error_msg_output = '';    if (!$error_message) {        $error_message = PMA_DBI_getError();    }    if (!$the_query && !empty($GLOBALS['sql_query'])) {        $the_query = $GLOBALS['sql_query'];    }    // --- Added to solve bug #641765    if (!function_exists('PMA_SQP_isError') || PMA_SQP_isError()) {        $formatted_sql = htmlspecialchars($the_query);    } elseif (empty($the_query) || trim($the_query) == '') {        $formatted_sql = '';    } else {        if (strlen($the_query) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {            $formatted_sql = htmlspecialchars(substr($the_query, 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'])) . '[...]';        } else {            $formatted_sql = PMA_formatSql(PMA_SQP_parse($the_query), $the_query);        }    }    // ---    $error_msg_output .= "\n" . '<!-- PMA-SQL-ERROR -->' . "\n";    $error_msg_output .= '    <div class="error"><h1>' . __('Error') . '</h1>' . "\n";    // if the config password is wrong, or the MySQL server does not    // respond, do not show the query that would reveal the    // username/password    if (!empty($the_query) && !strstr($the_query, 'connect')) {        // --- Added to solve bug #641765        if (function_exists('PMA_SQP_isError') && PMA_SQP_isError()) {            $error_msg_output .= PMA_SQP_getErrorString() . "\n";            $error_msg_output .= '<br />' . "\n";        }        // ---        // modified to show the help on sql errors        $error_msg_output .= '    <p><strong>' . __('SQL query') . ':</strong>' . "\n";        if (strstr(strtolower($formatted_sql), 'select')) {            // please show me help to the error on select            $error_msg_output .= PMA_showMySQLDocu('SQL-Syntax', 'SELECT');        }        if ($is_modify_link) {            $_url_params = array(                'sql_query' => $the_query,                'show_query' => 1,            );            if (strlen($table)) {                $_url_params['db'] = $db;                $_url_params['table'] = $table;                $doedit_goto = '<a href="tbl_sql.php' . PMA_generate_common_url($_url_params) . '">';            } elseif (strlen($db)) {                $_url_params['db'] = $db;                $doedit_goto = '<a href="db_sql.php' . PMA_generate_common_url($_url_params) . '">';            } else {                $doedit_goto = '<a href="server_sql.php' . PMA_generate_common_url($_url_params) . '">';            }            $error_msg_output .= $doedit_goto               . PMA_getIcon('b_edit.png', __('Edit'))               . '</a>';        } // end if        $error_msg_output .= '    </p>' . "\n"            .'    <p>' . "\n"            .'        ' . $formatted_sql . "\n"            .'    </p>' . "\n";    } // end if    if (! empty($error_message)) {        $error_message = preg_replace(            "@((\015\012)|(\015)|(\012)){3,}@",            "\n\n",            $error_message        );    }    // modified to show the help on error-returns    // (now error-messages-server)    $error_msg_output .= '<p>' . "\n"            . '    <strong>' . __('MySQL said: ') . '</strong>'            . PMA_showMySQLDocu('Error-messages-server', 'Error-messages-server')            . "\n"            . '</p>' . "\n";    // The error message will be displayed within a CODE segment.    // To preserve original formatting, but allow wordwrapping,    // we do a couple of replacements    // Replace all non-single blanks with their HTML-counterpart    $error_message = str_replace('  ', '&nbsp;&nbsp;', $error_message);    // Replace TAB-characters with their HTML-counterpart    $error_message = str_replace("\t", '&nbsp;&nbsp;&nbsp;&nbsp;', $error_message);    // Replace linebreaks    $error_message = nl2br($error_message);    $error_msg_output .= '<code>' . "\n"        . $error_message . "\n"        . '</code><br />' . "\n";    $error_msg_output .= '</div>';    $_SESSION['Import_message']['message'] = $error_msg_output;    if ($exit) {        /**         * If in an Ajax request         * - avoid displaying a Back link         * - use PMA_ajaxResponse() to transmit the message and exit         */        if ($GLOBALS['is_ajax_request'] == true) {            PMA_ajaxResponse($error_msg_output, false);        }        if (! empty($back_url)) {            if (strstr($back_url, '?')) {                $back_url .= '&amp;no_history=true';            } else {                $back_url .= '?no_history=true';            }            $_SESSION['Import_message']['go_back_url'] = $back_url;            $error_msg_output .= '<fieldset class="tblFooters">';            $error_msg_output .= '[ <a href="' . $back_url . '">' . __('Back') . '</a> ]';            $error_msg_output .= '</fieldset>' . "\n\n";        }        echo $error_msg_output;        /**         * display footer and exit         */        include './libraries/footer.inc.php';    } else {        echo $error_msg_output;    }} // end of the 'PMA_mysqlDie()' function/** * returns array with tables of given db with extended information and grouped * * @param string   $db           name of db * @param string   $tables       name of tables * @param integer  $limit_offset list offset * @param int|bool $limit_count  max tables to return * * @return  array    (recursive) grouped table list */function PMA_getTableList($db, $tables = null, $limit_offset = 0, $limit_count = false){    $sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];    if (null === $tables) {        $tables = PMA_DBI_get_tables_full($db, false, false, null, $limit_offset, $limit_count);        if ($GLOBALS['cfg']['NaturalOrder']) {            uksort($tables, 'strnatcasecmp');        }    }    if (count($tables) < 1) {        return $tables;    }    $default = array(        'Name'      => '',        'Rows'      => 0,        'Comment'   => '',        'disp_name' => '',    );    $table_groups = array();    // for blobstreaming - list of blobstreaming tables    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    foreach ($tables as $table_name => $table) {        // if BS tables exist        if (PMA_BS_IsHiddenTable($table_name)) {            continue;        }        // check for correct row count        if (null === $table['Rows']) {            // Do not check exact row count here,            // if row count is invalid possibly the table is defect            // and this would break left frame;            // but we can check row count if this is a view or the            // information_schema database            // since PMA_Table::countRecords() returns a limited row count            // in this case.            // set this because PMA_Table::countRecords() can use it            $tbl_is_view = $table['TABLE_TYPE'] == 'VIEW';            if ($tbl_is_view || PMA_is_system_schema($db)) {                $table['Rows'] = PMA_Table::countRecords($db, $table['Name'], false, true);            }        }        // in $group we save the reference to the place in $table_groups        // where to store the table info        if ($GLOBALS['cfg']['LeftFrameDBTree']            && $sep && strstr($table_name, $sep)        ) {            $parts = explode($sep, $table_name);            $group =& $table_groups;            $i = 0;            $group_name_full = '';            $parts_cnt = count($parts) - 1;            while ($i < $parts_cnt                    && $i < $GLOBALS['cfg']['LeftFrameTableLevel']) {                $group_name = $parts[$i] . $sep;                $group_name_full .= $group_name;                if (! isset($group[$group_name])) {                    $group[$group_name] = array();                    $group[$group_name]['is' . $sep . 'group'] = true;                    $group[$group_name]['tab' . $sep . 'count'] = 1;                    $group[$group_name]['tab' . $sep . 'group'] = $group_name_full;                } elseif (! isset($group[$group_name]['is' . $sep . 'group'])) {                    $table = $group[$group_name];                    $group[$group_name] = array();                    $group[$group_name][$group_name] = $table;                    unset($table);                    $group[$group_name]['is' . $sep . 'group'] = true;                    $group[$group_name]['tab' . $sep . 'count'] = 1;                    $group[$group_name]['tab' . $sep . 'group'] = $group_name_full;                } else {                    $group[$group_name]['tab' . $sep . 'count']++;                }                $group =& $group[$group_name];                $i++;            }        } else {            if (! isset($table_groups[$table_name])) {                $table_groups[$table_name] = array();            }            $group =& $table_groups;        }        if ($GLOBALS['cfg']['ShowTooltipAliasTB']            && $GLOBALS['cfg']['ShowTooltipAliasTB'] !== 'nested'            && $table['Comment'] // do not switch if the comment is empty        ) {            // switch tooltip and name            $table['disp_name'] = $table['Comment'];            $table['Comment'] = $table['Name'];        } else {            $table['disp_name'] = $table['Name'];        }        $group[$table_name] = array_merge($default, $table);    }    return $table_groups;}/* ----------------------- Set of misc functions ----------------------- *//** * Adds backquotes on both sides of a database, table or field name. * and escapes backquotes inside the name with another backquote * * example: * <code> * echo PMA_backquote('owner`s db'); // `owner``s db` * * </code> * * @param mixed   $a_name the database, table or field name to "backquote" *                        or array of it * @param boolean $do_it  a flag to bypass this function (used by dump *                        functions) * * @return  mixed    the "backquoted" database, table or field name * * @access  public */function PMA_backquote($a_name, $do_it = true){    if (is_array($a_name)) {        foreach ($a_name as &$data) {            $data = PMA_backquote($data, $do_it);        }        return $a_name;    }    if (! $do_it) {        global $PMA_SQPdata_forbidden_word;        if (! in_array(strtoupper($a_name), $PMA_SQPdata_forbidden_word)) {            return $a_name;        }    }    // '0' is also empty for php :-(    if (strlen($a_name) && $a_name !== '*') {        return '`' . str_replace('`', '``', $a_name) . '`';    } else {        return $a_name;    }} // end of the 'PMA_backquote()' function/** * Defines the <CR><LF> value depending on the user OS. * * @return  string   the <CR><LF> value to use * * @access  public */function PMA_whichCrlf(){    // The 'PMA_USR_OS' constant is defined in "./libraries/Config.class.php"    // Win case    if (PMA_USR_OS == 'Win') {        $the_crlf = "\r\n";    } else {        // Others        $the_crlf = "\n";    }    return $the_crlf;} // end of the 'PMA_whichCrlf()' function/** * Reloads navigation if needed. * * @param bool $jsonly prints out pure JavaScript * * @access  public */function PMA_reloadNavigation($jsonly=false){    // Reloads the navigation frame via JavaScript if required    if (isset($GLOBALS['reload']) && $GLOBALS['reload']) {        // one of the reasons for a reload is when a table is dropped        // in this case, get rid of the table limit offset, otherwise        // we have a problem when dropping a table on the last page        // and the offset becomes greater than the total number of tables        unset($_SESSION['tmp_user_values']['table_limit_offset']);        echo "\n";        $reload_url = './navigation.php?' . PMA_generate_common_url($GLOBALS['db'], '', '&');        if (!$jsonly) {            echo '<script type="text/javascript">' . PHP_EOL;        }    ?>//<![CDATA[if (typeof(window.parent) != 'undefined'    && typeof(window.parent.frame_navigation) != 'undefined'    && window.parent.goTo) {    window.parent.goTo('<?php echo $reload_url; ?>');}//]]><?php        if (!$jsonly) {            echo '</script>' . PHP_EOL;        }        unset($GLOBALS['reload']);    }}/** * displays the message and the query * usually the message is the result of the query executed * * @param string  $message   the message to display * @param string  $sql_query the query to display * @param string  $type      the type (level) of the message * @param boolean $is_view   is this a message after a VIEW operation? * * @return  string * * @access  public */function PMA_showMessage($message, $sql_query = null, $type = 'notice', $is_view = false){    /*     * PMA_ajaxResponse uses this function to collect the string of HTML generated     * for showing the message.  Use output buffering to collect it and return it     * in a string.  In some special cases on sql.php, buffering has to be disabled     * and hence we check with $GLOBALS['buffer_message']     */    if ( $GLOBALS['is_ajax_request'] == true && ! isset($GLOBALS['buffer_message']) ) {        ob_start();    }    global $cfg;    if (null === $sql_query) {        if (! empty($GLOBALS['display_query'])) {            $sql_query = $GLOBALS['display_query'];        } elseif ($cfg['SQP']['fmtType'] == 'none' && ! empty($GLOBALS['unparsed_sql'])) {            $sql_query = $GLOBALS['unparsed_sql'];        } elseif (! empty($GLOBALS['sql_query'])) {            $sql_query = $GLOBALS['sql_query'];        } else {            $sql_query = '';        }    }    if (isset($GLOBALS['using_bookmark_message'])) {        $GLOBALS['using_bookmark_message']->display();        unset($GLOBALS['using_bookmark_message']);    }    // Corrects the tooltip text via JS if required    // @todo this is REALLY the wrong place to do this - very unexpected here    if (! $is_view && strlen($GLOBALS['table']) && $cfg['ShowTooltip']) {        $tooltip = PMA_Table::sGetToolTip($GLOBALS['db'], $GLOBALS['table']);        $uni_tbl = PMA_jsFormat($GLOBALS['db'] . '.' . $GLOBALS['table'], false);        echo "\n";        echo '<script type="text/javascript">' . "\n";        echo '//<![CDATA[' . "\n";        echo "if (window.parent.updateTableTitle) window.parent.updateTableTitle('"            . $uni_tbl . "', '" . PMA_jsFormat($tooltip, false) . "');" . "\n";        echo '//]]>' . "\n";        echo '</script>' . "\n";    } // end if ... elseif    // Checks if the table needs to be repaired after a TRUNCATE query.    // @todo what about $GLOBALS['display_query']???    // @todo this is REALLY the wrong place to do this - very unexpected here    if (strlen($GLOBALS['table'])        && $GLOBALS['sql_query'] == 'TRUNCATE TABLE ' . PMA_backquote($GLOBALS['table'])    ) {        if (PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], 'Index_length') > 1024 && !PMA_DRIZZLE) {            PMA_DBI_try_query('REPAIR TABLE ' . PMA_backquote($GLOBALS['table']));        }    }    unset($tbl_status);    // In an Ajax request, $GLOBALS['cell_align_left'] may not be defined. Hence,    // check for it's presence before using it    echo '<div id="result_query" align="'        . ( isset($GLOBALS['cell_align_left']) ? $GLOBALS['cell_align_left'] : '' )        . '">' . "\n";    if ($message instanceof PMA_Message) {        if (isset($GLOBALS['special_message'])) {            $message->addMessage($GLOBALS['special_message']);            unset($GLOBALS['special_message']);        }        $message->display();        $type = $message->getLevel();    } else {        echo '<div class="' . $type . '">';        echo PMA_sanitize($message);        if (isset($GLOBALS['special_message'])) {            echo PMA_sanitize($GLOBALS['special_message']);            unset($GLOBALS['special_message']);        }        echo '</div>';    }    if ($cfg['ShowSQL'] == true && ! empty($sql_query)) {        // Html format the query to be displayed        // If we want to show some sql code it is easiest to create it here        /* SQL-Parser-Analyzer */        if (! empty($GLOBALS['show_as_php'])) {            $new_line = '\\n"<br />' . "\n"                . '&nbsp;&nbsp;&nbsp;&nbsp;. "';            $query_base = htmlspecialchars(addslashes($sql_query));            $query_base = preg_replace('/((\015\012)|(\015)|(\012))/', $new_line, $query_base);        } else {            $query_base = $sql_query;        }        $query_too_big = false;        if (strlen($query_base) > $cfg['MaxCharactersInDisplayedSQL']) {            // when the query is large (for example an INSERT of binary            // data), the parser chokes; so avoid parsing the query            $query_too_big = true;            $shortened_query_base = nl2br(                htmlspecialchars(                    substr($sql_query, 0, $cfg['MaxCharactersInDisplayedSQL']) . '[...]'                )            );        } elseif (! empty($GLOBALS['parsed_sql'])         && $query_base == $GLOBALS['parsed_sql']['raw']) {            // (here, use "! empty" because when deleting a bookmark,            // $GLOBALS['parsed_sql'] is set but empty            $parsed_sql = $GLOBALS['parsed_sql'];        } else {            // Parse SQL if needed            $parsed_sql = PMA_SQP_parse($query_base);        }        // Analyze it        if (isset($parsed_sql) && ! PMA_SQP_isError()) {            $analyzed_display_query = PMA_SQP_analyze($parsed_sql);            // Same as below (append LIMIT), append the remembered ORDER BY            if ($GLOBALS['cfg']['RememberSorting']                && isset($analyzed_display_query[0]['queryflags']['select_from'])                && isset($GLOBALS['sql_order_to_append'])            ) {                $query_base = $analyzed_display_query[0]['section_before_limit']                    . "\n" . $GLOBALS['sql_order_to_append']                    . $analyzed_display_query[0]['section_after_limit'];                // Need to reparse query                $parsed_sql = PMA_SQP_parse($query_base);                // update the $analyzed_display_query                $analyzed_display_query[0]['section_before_limit'] .= $GLOBALS['sql_order_to_append'];                $analyzed_display_query[0]['order_by_clause'] = $GLOBALS['sorted_col'];            }            // Here we append the LIMIT added for navigation, to            // enable its display. Adding it higher in the code            // to $sql_query would create a problem when            // using the Refresh or Edit links.            // Only append it on SELECTs.            /**             * @todo what would be the best to do when someone hits Refresh:             * use the current LIMITs ?             */            if (isset($analyzed_display_query[0]['queryflags']['select_from'])                && isset($GLOBALS['sql_limit_to_append'])            ) {                $query_base = $analyzed_display_query[0]['section_before_limit']                    . "\n" . $GLOBALS['sql_limit_to_append']                    . $analyzed_display_query[0]['section_after_limit'];                // Need to reparse query                $parsed_sql = PMA_SQP_parse($query_base);            }        }        if (! empty($GLOBALS['show_as_php'])) {            $query_base = '$sql  = "' . $query_base;        } elseif (! empty($GLOBALS['validatequery'])) {            try {                $query_base = PMA_validateSQL($query_base);            } catch (Exception $e) {                PMA_Message::error(__('Failed to connect to SQL validator!'))->display();            }        } elseif (isset($parsed_sql)) {            $query_base = PMA_formatSql($parsed_sql, $query_base);        }        // Prepares links that may be displayed to edit/explain the query        // (don't go to default pages, we must go to the page        // where the query box is available)        // Basic url query part        $url_params = array();        if (! isset($GLOBALS['db'])) {            $GLOBALS['db'] = '';        }        if (strlen($GLOBALS['db'])) {            $url_params['db'] = $GLOBALS['db'];            if (strlen($GLOBALS['table'])) {                $url_params['table'] = $GLOBALS['table'];                $edit_link = 'tbl_sql.php';            } else {                $edit_link = 'db_sql.php';            }        } else {            $edit_link = 'server_sql.php';        }        // Want to have the query explained        // but only explain a SELECT (that has not been explained)        /* SQL-Parser-Analyzer */        $explain_link = '';        $is_select = false;        if (! empty($cfg['SQLQuery']['Explain']) && ! $query_too_big) {            $explain_params = $url_params;            // Detect if we are validating as well            // To preserve the validate uRL data            if (! empty($GLOBALS['validatequery'])) {                $explain_params['validatequery'] = 1;            }            if (preg_match('@^SELECT[[:space:]]+@i', $sql_query)) {                $explain_params['sql_query'] = 'EXPLAIN ' . $sql_query;                $_message = __('Explain SQL');                $is_select = true;            } elseif (preg_match('@^EXPLAIN[[:space:]]+SELECT[[:space:]]+@i', $sql_query)) {                $explain_params['sql_query'] = substr($sql_query, 8);                $_message = __('Skip Explain SQL');            }            if (isset($explain_params['sql_query'])) {                $explain_link = 'import.php' . PMA_generate_common_url($explain_params);                $explain_link = ' [' . PMA_linkOrButton($explain_link, $_message) . ']';            }        } //show explain        $url_params['sql_query']  = $sql_query;        $url_params['show_query'] = 1;        // even if the query is big and was truncated, offer the chance        // to edit it (unless it's enormous, see PMA_linkOrButton() )        if (! empty($cfg['SQLQuery']['Edit'])) {            if ($cfg['EditInWindow'] == true) {                $onclick = 'window.parent.focus_querywindow(\''                    . PMA_jsFormat($sql_query, false) . '\'); return false;';            } else {                $onclick = '';            }            $edit_link .= PMA_generate_common_url($url_params) . '#querybox';            $edit_link = ' [' . PMA_linkOrButton($edit_link, __('Edit'), array('onclick' => $onclick)) . ']';        } else {            $edit_link = '';        }        $url_qpart = PMA_generate_common_url($url_params);        // Also we would like to get the SQL formed in some nice        // php-code        if (! empty($cfg['SQLQuery']['ShowAsPHP']) && ! $query_too_big) {            $php_params = $url_params;            if (! empty($GLOBALS['show_as_php'])) {                $_message = __('Without PHP Code');            } else {                $php_params['show_as_php'] = 1;                $_message = __('Create PHP Code');            }            $php_link = 'import.php' . PMA_generate_common_url($php_params);            $php_link = ' [' . PMA_linkOrButton($php_link, $_message) . ']';            if (isset($GLOBALS['show_as_php'])) {                $runquery_link = 'import.php' . PMA_generate_common_url($url_params);                $php_link .= ' [' . PMA_linkOrButton($runquery_link, __('Submit Query')) . ']';            }        } else {            $php_link = '';        } //show as php        // Refresh query        if (! empty($cfg['SQLQuery']['Refresh'])            && ! isset($GLOBALS['show_as_php']) // 'Submit query' does the same            && preg_match('@^(SELECT|SHOW)[[:space:]]+@i', $sql_query)        ) {            $refresh_link = 'import.php' . PMA_generate_common_url($url_params);            $refresh_link = ' [' . PMA_linkOrButton($refresh_link, __('Refresh')) . ']';        } else {            $refresh_link = '';        } //refresh        if (! empty($cfg['SQLValidator']['use'])            && ! empty($cfg['SQLQuery']['Validate'])        ) {            $validate_params = $url_params;            if (!empty($GLOBALS['validatequery'])) {                $validate_message = __('Skip Validate SQL');            } else {                $validate_params['validatequery'] = 1;                $validate_message = __('Validate SQL');            }            $validate_link = 'import.php' . PMA_generate_common_url($validate_params);            $validate_link = ' [' . PMA_linkOrButton($validate_link, $validate_message) . ']';        } else {            $validate_link = '';        } //validator        if (!empty($GLOBALS['validatequery'])) {            echo '<div class="sqlvalidate">';        } else {            echo '<code class="sql">';        }        if ($query_too_big) {            echo $shortened_query_base;        } else {            echo $query_base;        }        //Clean up the end of the PHP        if (! empty($GLOBALS['show_as_php'])) {            echo '";';        }        if (!empty($GLOBALS['validatequery'])) {            echo '</div>';        } else {            echo '</code>';        }        echo '<div class="tools">';        // avoid displaying a Profiling checkbox that could        // be checked, which would reexecute an INSERT, for example        if (! empty($refresh_link)) {            PMA_profilingCheckbox($sql_query);        }        // if needed, generate an invisible form that contains controls for the        // Inline link; this way, the behavior of the Inline link does not        // depend on the profiling support or on the refresh link        if (empty($refresh_link) || ! PMA_profilingSupported()) {            echo '<form action="sql.php" method="post">';            echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']);            echo '<input type="hidden" name="sql_query" value="'                . htmlspecialchars($sql_query) . '" />';            echo '</form>';        }        // in the tools div, only display the Inline link when not in ajax        // mode because 1) it currently does not work and 2) we would        // have two similar mechanisms on the page for the same goal        if ($is_select            || $GLOBALS['is_ajax_request'] === false            && ! $query_too_big        ) {            // see in js/functions.js the jQuery code attached to id inline_edit            // document.write conflicts with jQuery, hence used $().append()            echo "<script type=\"text/javascript\">\n" .                "//<![CDATA[\n" .                "$('.tools form').last().after('[<a href=\"#\" title=\"" .                PMA_escapeJsString(__('Inline edit of this query')) .                "\" class=\"inline_edit_sql\">" .                PMA_escapeJsString(_pgettext('Inline edit query', 'Inline')) .                "</a>]');\n" .                "//]]>\n" .                "</script>";        }        echo $edit_link . $explain_link . $php_link . $refresh_link . $validate_link;        echo '</div>';    }    echo '</div>';    if ($GLOBALS['is_ajax_request'] === false) {        echo '<br class="clearfloat" />';    }    // If we are in an Ajax request, we have most probably been called in    // PMA_ajaxResponse().  Hence, collect the buffer contents and return it    // to PMA_ajaxResponse(), which will encode it for JSON.    if ($GLOBALS['is_ajax_request'] == true        && ! isset($GLOBALS['buffer_message'])    ) {        $buffer_contents =  ob_get_contents();        ob_end_clean();        return $buffer_contents;    }    return null;} // end of the 'PMA_showMessage()' function/** * Verifies if current MySQL server supports profiling * * @access  public * * @return  boolean whether profiling is supported */function PMA_profilingSupported(){    if (! PMA_cacheExists('profiling_supported', true)) {        // 5.0.37 has profiling but for example, 5.1.20 does not        // (avoid a trip to the server for MySQL before 5.0.37)        // and do not set a constant as we might be switching servers        if (defined('PMA_MYSQL_INT_VERSION')            && PMA_MYSQL_INT_VERSION >= 50037            && PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'profiling'")        ) {            PMA_cacheSet('profiling_supported', true, true);        } else {            PMA_cacheSet('profiling_supported', false, true);        }    }    return PMA_cacheGet('profiling_supported', true);}/** * Displays a form with the Profiling checkbox * * @param string $sql_query sql query * * @access  public */function PMA_profilingCheckbox($sql_query){    if (PMA_profilingSupported()) {        echo '<form action="sql.php" method="post">' . "\n";        echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']);        echo '<input type="hidden" name="sql_query" value="' . htmlspecialchars($sql_query) . '" />' . "\n";        echo '<input type="hidden" name="profiling_form" value="1" />' . "\n";        PMA_display_html_checkbox('profiling', __('Profiling'), isset($_SESSION['profiling']), true);        echo '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>' . "\n";        echo '</form>' . "\n";    }}/** * Formats $value to byte view * * @param double $value the value to format * @param int    $limes the sensitiveness * @param int    $comma the number of decimals to retain * * @return   array    the formatted value and its unit * * @access  public */function PMA_formatByteDown($value, $limes = 6, $comma = 0){    if ($value === null) {        return null;    }    $byteUnits = array(        /* l10n: shortcuts for Byte */        __('B'),        /* l10n: shortcuts for Kilobyte */        __('KiB'),        /* l10n: shortcuts for Megabyte */        __('MiB'),        /* l10n: shortcuts for Gigabyte */        __('GiB'),        /* l10n: shortcuts for Terabyte */        __('TiB'),        /* l10n: shortcuts for Petabyte */        __('PiB'),        /* l10n: shortcuts for Exabyte */        __('EiB')        );    $dh   = PMA_pow(10, $comma);    $li   = PMA_pow(10, $limes);    $unit = $byteUnits[0];    for ($d = 6, $ex = 15; $d >= 1; $d--, $ex-=3) {        if (isset($byteUnits[$d]) && $value >= $li * PMA_pow(10, $ex)) {            // use 1024.0 to avoid integer overflow on 64-bit machines            $value = round($value / (PMA_pow(1024, $d) / $dh)) /$dh;            $unit = $byteUnits[$d];            break 1;        } // end if    } // end for    if ($unit != $byteUnits[0]) {        // if the unit is not bytes (as represented in current language)        // reformat with max length of 5        // 4th parameter=true means do not reformat if value < 1        $return_value = PMA_formatNumber($value, 5, $comma, true);    } else {        // do not reformat, just handle the locale        $return_value = PMA_formatNumber($value, 0);    }    return array(trim($return_value), $unit);} // end of the 'PMA_formatByteDown' function/** * Changes thousands and decimal separators to locale specific values. * * @param string $value the value * * @return string */function PMA_localizeNumber($value){    return str_replace(        array(',', '.'),        array(            /* l10n: Thousands separator */            __(','),            /* l10n: Decimal separator */            __('.'),            ),        $value    );}/** * Formats $value to the given length and appends SI prefixes * with a $length of 0 no truncation occurs, number is only formated * to the current locale * * examples: * <code> * echo PMA_formatNumber(123456789, 6);     // 123,457 k * echo PMA_formatNumber(-123456789, 4, 2); //    -123.46 M * echo PMA_formatNumber(-0.003, 6);        //      -3 m * echo PMA_formatNumber(0.003, 3, 3);      //       0.003 * echo PMA_formatNumber(0.00003, 3, 2);    //       0.03 m * echo PMA_formatNumber(0, 6);             //       0 * </code> * * @param double  $value          the value to format * @param integer $digits_left    number of digits left of the comma * @param integer $digits_right   number of digits right of the comma * @param boolean $only_down      do not reformat numbers below 1 * @param boolean $noTrailingZero removes trailing zeros right of the comma *                                (default: true) * * @return  string   the formatted value and its unit * * @access  public */function PMA_formatNumber($value, $digits_left = 3, $digits_right = 0,$only_down = false, $noTrailingZero = true){    if ($value==0) {        return '0';    }    $originalValue = $value;    //number_format is not multibyte safe, str_replace is safe    if ($digits_left === 0) {        $value = number_format($value, $digits_right);        if ($originalValue != 0 && floatval($value) == 0) {            $value = ' <' . (1 / PMA_pow(10, $digits_right));        }        return PMA_localizeNumber($value);    }    // this units needs no translation, ISO    $units = array(        -8 => 'y',        -7 => 'z',        -6 => 'a',        -5 => 'f',        -4 => 'p',        -3 => 'n',        -2 => '&micro;',        -1 => 'm',        0 => ' ',        1 => 'k',        2 => 'M',        3 => 'G',        4 => 'T',        5 => 'P',        6 => 'E',        7 => 'Z',        8 => 'Y'    );    // check for negative value to retain sign    if ($value < 0) {        $sign = '-';        $value = abs($value);    } else {        $sign = '';    }    $dh = PMA_pow(10, $digits_right);    /*     * This gives us the right SI prefix already,     * but $digits_left parameter not incorporated     */    $d = floor(log10($value) / 3);    /*     * Lowering the SI prefix by 1 gives us an additional 3 zeros     * So if we have 3,6,9,12.. free digits ($digits_left - $cur_digits)     * to use, then lower the SI prefix     */    $cur_digits = floor(log10($value / PMA_pow(1000, $d, 'pow'))+1);    if ($digits_left > $cur_digits) {        $d-= floor(($digits_left - $cur_digits)/3);    }    if ($d<0 && $only_down) {        $d=0;    }    $value = round($value / (PMA_pow(1000, $d, 'pow') / $dh)) /$dh;    $unit = $units[$d];    // If we dont want any zeros after the comma just add the thousand seperator    if ($noTrailingZero) {        $value = PMA_localizeNumber(            preg_replace('/(?<=\d)(?=(\d{3})+(?!\d))/', ',', $value)        );    } else {        //number_format is not multibyte safe, str_replace is safe        $value = PMA_localizeNumber(number_format($value, $digits_right));    }    if ($originalValue!=0 && floatval($value) == 0) {        return ' <' . (1 / PMA_pow(10, $digits_right)) . ' ' . $unit;    }    return $sign . $value . ' ' . $unit;} // end of the 'PMA_formatNumber' function/** * Returns the number of bytes when a formatted size is given * * @param string $formatted_size the size expression (for example 8MB) * * @return  integer  The numerical part of the expression (for example 8) */function PMA_extractValueFromFormattedSize($formatted_size){    $return_value = -1;    if (preg_match('/^[0-9]+GB$/', $formatted_size)) {        $return_value = substr($formatted_size, 0, -2) * PMA_pow(1024, 3);    } elseif (preg_match('/^[0-9]+MB$/', $formatted_size)) {        $return_value = substr($formatted_size, 0, -2) * PMA_pow(1024, 2);    } elseif (preg_match('/^[0-9]+K$/', $formatted_size)) {        $return_value = substr($formatted_size, 0, -1) * PMA_pow(1024, 1);    }    return $return_value;}// end of the 'PMA_extractValueFromFormattedSize' function/** * Writes localised date * * @param string $timestamp the current timestamp * @param string $format    format * * @return  string   the formatted date * * @access  public */function PMA_localisedDate($timestamp = -1, $format = ''){    $month = array(        /* l10n: Short month name */        __('Jan'),        /* l10n: Short month name */        __('Feb'),        /* l10n: Short month name */        __('Mar'),        /* l10n: Short month name */        __('Apr'),        /* l10n: Short month name */        _pgettext('Short month name', 'May'),        /* l10n: Short month name */        __('Jun'),        /* l10n: Short month name */        __('Jul'),        /* l10n: Short month name */        __('Aug'),        /* l10n: Short month name */        __('Sep'),        /* l10n: Short month name */        __('Oct'),        /* l10n: Short month name */        __('Nov'),        /* l10n: Short month name */        __('Dec'));    $day_of_week = array(        /* l10n: Short week day name */        _pgettext('Short week day name', 'Sun'),        /* l10n: Short week day name */        __('Mon'),        /* l10n: Short week day name */        __('Tue'),        /* l10n: Short week day name */        __('Wed'),        /* l10n: Short week day name */        __('Thu'),        /* l10n: Short week day name */        __('Fri'),        /* l10n: Short week day name */        __('Sat'));    if ($format == '') {        /* l10n: See http://www.php.net/manual/en/function.strftime.php */        $format = __('%B %d, %Y at %I:%M %p');    }    if ($timestamp == -1) {        $timestamp = time();    }    $date = preg_replace(        '@%[aA]@',        $day_of_week[(int)strftime('%w', $timestamp)],        $format    );    $date = preg_replace(        '@%[bB]@',        $month[(int)strftime('%m', $timestamp)-1],        $date    );    return strftime($date, $timestamp);} // end of the 'PMA_localisedDate()' function/** * returns a tab for tabbed navigation. * If the variables $link and $args ar left empty, an inactive tab is created * * @param array $tab        array with all options * @param array $url_params * * @return  string  html code for one tab, a link if valid otherwise a span * * @access  public */function PMA_generate_html_tab($tab, $url_params = array(), $base_dir=''){    // default values    $defaults = array(        'text'      => '',        'class'     => '',        'active'    => null,        'link'      => '',        'sep'       => '?',        'attr'      => '',        'args'      => '',        'warning'   => '',        'fragment'  => '',        'id'        => '',    );    $tab = array_merge($defaults, $tab);    // determine additionnal style-class    if (empty($tab['class'])) {        if (! empty($tab['active'])            || PMA_isValid($GLOBALS['active_page'], 'identical', $tab['link'])        ) {            $tab['class'] = 'active';        } elseif (is_null($tab['active']) && empty($GLOBALS['active_page'])          && basename($GLOBALS['PMA_PHP_SELF']) == $tab['link']          && empty($tab['warning'])) {            $tab['class'] = 'active';        }    }    if (!empty($tab['warning'])) {        $tab['class'] .= ' error';        $tab['attr'] .= ' title="' . htmlspecialchars($tab['warning']) . '"';    }    // If there are any tab specific URL parameters, merge those with    // the general URL parameters    if (! empty($tab['url_params']) && is_array($tab['url_params'])) {        $url_params = array_merge($url_params, $tab['url_params']);    }    // build the link    if (!empty($tab['link'])) {        $tab['link'] = htmlentities($tab['link']);        $tab['link'] = $tab['link'] . PMA_generate_common_url($url_params);        if (! empty($tab['args'])) {            foreach ($tab['args'] as $param => $value) {                $tab['link'] .= PMA_get_arg_separator('html') . urlencode($param)                    . '=' . urlencode($value);            }        }    }    if (! empty($tab['fragment'])) {        $tab['link'] .= $tab['fragment'];    }    // display icon, even if iconic is disabled but the link-text is missing    if (($GLOBALS['cfg']['MainPageIconic'] || empty($tab['text']))        && isset($tab['icon'])    ) {        // avoid generating an alt tag, because it only illustrates        // the text that follows and if browser does not display        // images, the text is duplicated        $tab['text'] = PMA_getImage(htmlentities($tab['icon'])) . $tab['text'];    } elseif (empty($tab['text'])) {        // check to not display an empty link-text        $tab['text'] = '?';        trigger_error(            'empty linktext in function ' . __FUNCTION__ . '()',            E_USER_NOTICE        );    }    //Set the id for the tab, if set in the params    $id_string = ( empty($tab['id']) ? '' : ' id="'.$tab['id'].'" ' );    $out = '<li' . ($tab['class'] == 'active' ? ' class="active"' : '') . '>';    if (!empty($tab['link'])) {        $out .= '<a class="tab' . htmlentities($tab['class']) . '"'            .$id_string            .' href="' . $tab['link'] . '" ' . $tab['attr'] . '>'            . $tab['text'] . '</a>';    } else {        $out .= '<span class="tab' . htmlentities($tab['class']) . '"'.$id_string.'>'            . $tab['text'] . '</span>';    }    $out .= '</li>';    return $out;} // end of the 'PMA_generate_html_tab()' function/** * returns html-code for a tab navigation * * @param array  $tabs       one element per tab * @param string $url_params * @param string $base_dir * @param string $menu_id * * @return  string  html-code for tab-navigation */function PMA_generate_html_tabs($tabs, $url_params, $base_dir='', $menu_id='topmenu'){    $tab_navigation = '<div id="' . htmlentities($menu_id) . 'container" class="menucontainer">'        .'<ul id="' . htmlentities($menu_id) . '">';    foreach ($tabs as $tab) {        $tab_navigation .= PMA_generate_html_tab($tab, $url_params, $base_dir);    }    $tab_navigation .=         '</ul>' . "\n"        .'<div class="clearfloat"></div>'        .'</div>' . "\n";    return $tab_navigation;}/** * Displays a link, or a button if the link's URL is too large, to * accommodate some browsers' limitations * * @param string  $url        the URL * @param string  $message    the link message * @param mixed   $tag_params string: js confirmation *                            array: additional tag params (f.e. style="") * @param boolean $new_form   we set this to false when we are already in *                            a  form, to avoid generating nested forms * @param boolean $strip_img  whether to strip the image * @param string  $target     target * * @return string  the results to be echoed or saved in an array */function PMA_linkOrButton($url, $message, $tag_params = array(),    $new_form = true, $strip_img = false, $target = ''){    $url_length = strlen($url);    // with this we should be able to catch case of image upload    // into a (MEDIUM) BLOB; not worth generating even a form for these    if ($url_length > $GLOBALS['cfg']['LinkLengthLimit'] * 100) {        return '';    }    if (! is_array($tag_params)) {        $tmp = $tag_params;        $tag_params = array();        if (!empty($tmp)) {            $tag_params['onclick'] = 'return confirmLink(this, \'' . PMA_escapeJsString($tmp) . '\')';        }        unset($tmp);    }    if (! empty($target)) {        $tag_params['target'] = htmlentities($target);    }    $tag_params_strings = array();    foreach ($tag_params as $par_name => $par_value) {        // htmlspecialchars() only on non javascript        $par_value = substr($par_name, 0, 2) == 'on'            ? $par_value            : htmlspecialchars($par_value);        $tag_params_strings[] = $par_name . '="' . $par_value . '"';    }    $displayed_message = '';    // Add text if not already added    if (stristr($message, '<img')        && (!$strip_img || $GLOBALS['cfg']['PropertiesIconic'] === true)        && strip_tags($message)==$message    ) {        $displayed_message = '<span>'        . htmlspecialchars(            preg_replace('/^.*\salt="([^"]*)".*$/si', '\1', $message)        )        . '</span>';    }    // Suhosin: Check that each query parameter is not above maximum    $in_suhosin_limits = true;    if ($url_length <= $GLOBALS['cfg']['LinkLengthLimit']) {        if ($suhosin_get_MaxValueLength = ini_get('suhosin.get.max_value_length')) {            $query_parts = PMA_splitURLQuery($url);            foreach ($query_parts as $query_pair) {                list($eachvar, $eachval) = explode('=', $query_pair);                if (strlen($eachval) > $suhosin_get_MaxValueLength) {                    $in_suhosin_limits = false;                    break;                }            }        }    }    if ($url_length <= $GLOBALS['cfg']['LinkLengthLimit'] && $in_suhosin_limits) {        // no whitespace within an <a> else Safari will make it part of the link        $ret = "\n" . '<a href="' . $url . '" '            . implode(' ', $tag_params_strings) . '>'            . $message . $displayed_message . '</a>' . "\n";    } else {        // no spaces (linebreaks) at all        // or after the hidden fields        // IE will display them all        // add class=link to submit button        if (empty($tag_params['class'])) {            $tag_params['class'] = 'link';        }        if (! isset($query_parts)) {            $query_parts = PMA_splitURLQuery($url);        }        $url_parts   = parse_url($url);        if ($new_form) {            $ret = '<form action="' . $url_parts['path'] . '" class="link"'                 . ' method="post"' . $target . ' style="display: inline;">';            $subname_open   = '';            $subname_close  = '';            $submit_link    = '#';        } else {            $query_parts[] = 'redirect=' . $url_parts['path'];            if (empty($GLOBALS['subform_counter'])) {                $GLOBALS['subform_counter'] = 0;            }            $GLOBALS['subform_counter']++;            $ret            = '';            $subname_open   = 'subform[' . $GLOBALS['subform_counter'] . '][';            $subname_close  = ']';            $submit_link    = '#usesubform[' . $GLOBALS['subform_counter'] . ']=1';        }        foreach ($query_parts as $query_pair) {            list($eachvar, $eachval) = explode('=', $query_pair);            $ret .= '<input type="hidden" name="' . $subname_open . $eachvar                . $subname_close . '" value="'                . htmlspecialchars(urldecode($eachval)) . '" />';        } // end while        $ret .= "\n" . '<a href="' . $submit_link . '" class="formLinkSubmit" '        . implode(' ', $tag_params_strings) . '>'        . $message . ' ' . $displayed_message . '</a>' . "\n";        if ($new_form) {            $ret .= '</form>';        }    } // end if... else...    return $ret;} // end of the 'PMA_linkOrButton()' function/** * Splits a URL string by parameter * * @param string $url the URL * * @return array  the parameter/value pairs, for example [0] db=sakila */function PMA_splitURLQuery($url){    // decode encoded url separators    $separator   = PMA_get_arg_separator();    // on most places separator is still hard coded ...    if ($separator !== '&') {        // ... so always replace & with $separator        $url         = str_replace(htmlentities('&'), $separator, $url);        $url         = str_replace('&', $separator, $url);    }    $url         = str_replace(htmlentities($separator), $separator, $url);    // end decode    $url_parts   = parse_url($url);    return explode($separator, $url_parts['query']);}/** * Returns a given timespan value in a readable format. * * @param int $seconds the timespan * * @return string  the formatted value */function PMA_timespanFormat($seconds){    $days = floor($seconds / 86400);    if ($days > 0) {        $seconds -= $days * 86400;    }    $hours = floor($seconds / 3600);    if ($days > 0 || $hours > 0) {        $seconds -= $hours * 3600;    }    $minutes = floor($seconds / 60);    if ($days > 0 || $hours > 0 || $minutes > 0) {        $seconds -= $minutes * 60;    }    return sprintf(        __('%s days, %s hours, %s minutes and %s seconds'),        (string)$days, (string)$hours, (string)$minutes, (string)$seconds    );}/** * Takes a string and outputs each character on a line for itself. Used * mainly for horizontalflipped display mode. * Takes care of special html-characters. * Fulfills todo-item * http://sf.net/tracker/?func=detail&aid=544361&group_id=23067&atid=377411 * * @param string $string    The string * @param string $Separator The Separator (defaults to "<br />\n") * * @access  public * @todo    add a multibyte safe function PMA_STR_split() * * @return  string      The flipped string */function PMA_flipstring($string, $Separator = "<br />\n"){    $format_string = '';    $charbuff = false;    for ($i = 0, $str_len = strlen($string); $i < $str_len; $i++) {        $char = $string{$i};        $append = false;        if ($char == '&') {            $format_string .= $charbuff;            $charbuff = $char;        } elseif ($char == ';' && !empty($charbuff)) {            $format_string .= $charbuff . $char;            $charbuff = false;            $append = true;        } elseif (! empty($charbuff)) {            $charbuff .= $char;        } else {            $format_string .= $char;            $append = true;        }        // do not add separator after the last character        if ($append && ($i != $str_len - 1)) {            $format_string .= $Separator;        }    }    return $format_string;}/** * Function added to avoid path disclosures. * Called by each script that needs parameters, it displays * an error message and, by default, stops the execution. * * Not sure we could use a strMissingParameter message here, * would have to check if the error message file is always available * * @param array $params  The names of the parameters needed by the calling script. * @param bool  $die     Stop the execution? *                       (Set this manually to false in the calling script *                       until you know all needed parameters to check). * @param bool  $request Whether to include this list in checking for special params. * * @global  string  path to current script * @global  boolean flag whether any special variable was required * * @access  public * @todo    use PMA_fatalError() if $die === true? */function PMA_checkParameters($params, $die = true, $request = true){    global $checked_special;    if (! isset($checked_special)) {        $checked_special = false;    }    $reported_script_name = basename($GLOBALS['PMA_PHP_SELF']);    $found_error = false;    $error_message = '';    foreach ($params as $param) {        if ($request && $param != 'db' && $param != 'table') {            $checked_special = true;        }        if (! isset($GLOBALS[$param])) {            $error_message .= $reported_script_name                . ': ' . __('Missing parameter:') . ' '                . $param                . PMA_showDocu('faqmissingparameters')                . '<br />';            $found_error = true;        }    }    if ($found_error) {        /**         * display html meta tags         */        include_once './libraries/header_meta_style.inc.php';        echo '</head><body><p>' . $error_message . '</p></body></html>';        if ($die) {            exit();        }    }} // end function/** * Function to generate unique condition for specified row. * * @param resource $handle       current query result * @param integer  $fields_cnt   number of fields * @param array    $fields_meta  meta information about fields * @param array    $row          current row * @param boolean  $force_unique generate condition only on pk or unique * * @access  public * * @return  array     the calculated condition and whether condition is unique */function PMA_getUniqueCondition($handle, $fields_cnt, $fields_meta, $row, $force_unique = false){    $primary_key          = '';    $unique_key           = '';    $nonprimary_condition = '';    $preferred_condition = '';    $primary_key_array    = array();    $unique_key_array     = array();    $nonprimary_condition_array = array();    $condition_array = array();    for ($i = 0; $i < $fields_cnt; ++$i) {        $condition   = '';        $con_key     = '';        $con_val     = '';        $field_flags = PMA_DBI_field_flags($handle, $i);        $meta        = $fields_meta[$i];        // do not use a column alias in a condition        if (! isset($meta->orgname) || ! strlen($meta->orgname)) {            $meta->orgname = $meta->name;            if (isset($GLOBALS['analyzed_sql'][0]['select_expr'])                && is_array($GLOBALS['analyzed_sql'][0]['select_expr'])            ) {                foreach ($GLOBALS['analyzed_sql'][0]['select_expr'] as $select_expr) {                    // need (string) === (string)                    // '' !== 0 but '' == 0                    if ((string) $select_expr['alias'] === (string) $meta->name) {                        $meta->orgname = $select_expr['column'];                        break;                    } // end if                } // end foreach            }        }        // Do not use a table alias in a condition.        // Test case is:        // select * from galerie x WHERE        //(select count(*) from galerie y where y.datum=x.datum)>1        //        // But orgtable is present only with mysqli extension so the        // fix is only for mysqli.        // Also, do not use the original table name if we are dealing with        // a view because this view might be updatable.        // (The isView() verification should not be costly in most cases        // because there is some caching in the function).        if (isset($meta->orgtable)            && $meta->table != $meta->orgtable            && ! PMA_Table::isView($GLOBALS['db'], $meta->table)        ) {            $meta->table = $meta->orgtable;        }        // to fix the bug where float fields (primary or not)        // can't be matched because of the imprecision of        // floating comparison, use CONCAT        // (also, the syntax "CONCAT(field) IS NULL"        // that we need on the next "if" will work)        if ($meta->type == 'real') {            $con_key = 'CONCAT(' . PMA_backquote($meta->table) . '.'                . PMA_backquote($meta->orgname) . ')';        } else {            $con_key = PMA_backquote($meta->table) . '.'                . PMA_backquote($meta->orgname);        } // end if... else...        $condition = ' ' . $con_key . ' ';        if (! isset($row[$i]) || is_null($row[$i])) {            $con_val = 'IS NULL';        } else {            // timestamp is numeric on some MySQL 4.1            // for real we use CONCAT above and it should compare to string            if ($meta->numeric                && $meta->type != 'timestamp'                && $meta->type != 'real'            ) {                $con_val = '= ' . $row[$i];            } elseif (($meta->type == 'blob' || $meta->type == 'string')                // hexify only if this is a true not empty BLOB or a BINARY                    && stristr($field_flags, 'BINARY')                    && !empty($row[$i])) {                // do not waste memory building a too big condition                if (strlen($row[$i]) < 1000) {                    // use a CAST if possible, to avoid problems                    // if the field contains wildcard characters % or _                    $con_val = '= CAST(0x' . bin2hex($row[$i]) . ' AS BINARY)';                } else {                    // this blob won't be part of the final condition                    $con_val = null;                }            } elseif (in_array($meta->type, PMA_getGISDatatypes())                && ! empty($row[$i])            ) {                // do not build a too big condition                if (strlen($row[$i]) < 5000) {                    $condition .= '=0x' . bin2hex($row[$i]) . ' AND';                } else {                    $condition = '';                }            } elseif ($meta->type == 'bit') {                $con_val = "= b'" . PMA_printable_bit_value($row[$i], $meta->length) . "'";            } else {                $con_val = '= \'' . PMA_sqlAddSlashes($row[$i], false, true) . '\'';            }        }        if ($con_val != null) {            $condition .= $con_val . ' AND';            if ($meta->primary_key > 0) {                $primary_key .= $condition;                $primary_key_array[$con_key] = $con_val;            } elseif ($meta->unique_key > 0) {                $unique_key  .= $condition;                $unique_key_array[$con_key] = $con_val;            }            $nonprimary_condition .= $condition;            $nonprimary_condition_array[$con_key] = $con_val;        }    } // end for    // Correction University of Virginia 19991216:    // prefer primary or unique keys for condition,    // but use conjunction of all values if no primary key    $clause_is_unique = true;    if ($primary_key) {        $preferred_condition = $primary_key;        $condition_array = $primary_key_array;    } elseif ($unique_key) {        $preferred_condition = $unique_key;        $condition_array = $unique_key_array;    } elseif (! $force_unique) {        $preferred_condition = $nonprimary_condition;        $condition_array = $nonprimary_condition_array;        $clause_is_unique = false;    }    $where_clause = trim(preg_replace('|\s?AND$|', '', $preferred_condition));    return(array($where_clause, $clause_is_unique, $condition_array));} // end function/** * Generate a button or image tag * * @param string $button_name  name of button element * @param string $button_class class of button element * @param string $image_name   name of image element * @param string $text         text to display * @param string $image        image to display * @param string $value        value * * @access  public */function PMA_buttonOrImage($button_name, $button_class, $image_name, $text,    $image, $value = ''){    if ($value == '') {        $value = $text;    }    if (false === $GLOBALS['cfg']['PropertiesIconic']) {        echo ' <input type="submit" name="' . $button_name . '"'                .' value="' . htmlspecialchars($value) . '"'                .' title="' . htmlspecialchars($text) . '" />' . "\n";        return;    }    /* Opera has trouble with <input type="image"> */    /* IE has trouble with <button> */    if (PMA_USR_BROWSER_AGENT != 'IE') {        echo '<button class="' . $button_class . '" type="submit"'            .' name="' . $button_name . '" value="' . htmlspecialchars($value) . '"'            .' title="' . htmlspecialchars($text) . '">' . "\n"            . PMA_getIcon($image, $text)            .'</button>' . "\n";    } else {        echo '<input type="image" name="' . $image_name            . '" value="' . htmlspecialchars($value)            . '" title="' . htmlspecialchars($text)            . '" src="' . $GLOBALS['pmaThemeImage']. $image . '" />'            . ($GLOBALS['cfg']['PropertiesIconic'] === 'both'                ? '&nbsp;' . htmlspecialchars($text)                : '') . "\n";    }} // end function/** * Generate a pagination selector for browsing resultsets * * @param int    $rows        Number of rows in the pagination set * @param int    $pageNow     current page number * @param int    $nbTotalPage number of total pages * @param int    $showAll     If the number of pages is lower than this *                            variable, no pages will be omitted in pagination * @param int    $sliceStart  How many rows at the beginning should always be shown? * @param int    $sliceEnd    How many rows at the end should always be shown? * @param int    $percent     Percentage of calculation page offsets to hop to a *                            next page * @param int    $range       Near the current page, how many pages should *                            be considered "nearby" and displayed as well? * @param string $prompt      The prompt to display (sometimes empty) * * @return string * * @access  public */function PMA_pageselector($rows, $pageNow = 1, $nbTotalPage = 1,    $showAll = 200, $sliceStart = 5, $sliceEnd = 5, $percent = 20,    $range = 10, $prompt = ''){    $increment = floor($nbTotalPage / $percent);    $pageNowMinusRange = ($pageNow - $range);    $pageNowPlusRange = ($pageNow + $range);    $gotopage = $prompt . ' <select id="pageselector" ';    if ($GLOBALS['cfg']['AjaxEnable']) {        $gotopage .= ' class="ajax"';    }    $gotopage .= ' name="pos" >' . "\n";    if ($nbTotalPage < $showAll) {        $pages = range(1, $nbTotalPage);    } else {        $pages = array();        // Always show first X pages        for ($i = 1; $i <= $sliceStart; $i++) {            $pages[] = $i;        }        // Always show last X pages        for ($i = $nbTotalPage - $sliceEnd; $i <= $nbTotalPage; $i++) {            $pages[] = $i;        }        // Based on the number of results we add the specified        // $percent percentage to each page number,        // so that we have a representing page number every now and then to        // immediately jump to specific pages.        // As soon as we get near our currently chosen page ($pageNow -        // $range), every page number will be shown.        $i = $sliceStart;        $x = $nbTotalPage - $sliceEnd;        $met_boundary = false;        while ($i <= $x) {            if ($i >= $pageNowMinusRange && $i <= $pageNowPlusRange) {                // If our pageselector comes near the current page, we use 1                // counter increments                $i++;                $met_boundary = true;            } else {                // We add the percentage increment to our current page to                // hop to the next one in range                $i += $increment;                // Make sure that we do not cross our boundaries.                if ($i > $pageNowMinusRange && ! $met_boundary) {                    $i = $pageNowMinusRange;                }            }            if ($i > 0 && $i <= $x) {                $pages[] = $i;            }        }/*    Add page numbers with "geometrically increasing" distances.    This helps me a lot when navigating through giant tables.    Test case: table with 2.28 million sets, 76190 pages. Page of interest is    between 72376 and 76190.    Selecting page 72376.    Now, old version enumerated only +/- 10 pages around 72376 and the    percentage increment produced steps of about 3000.    The following code adds page numbers +/- 2,4,8,16,32,64,128,256 etc.    around the current page.*/        $i = $pageNow;        $dist = 1;        while ($i < $x) {            $dist = 2 * $dist;            $i = $pageNow + $dist;            if ($i > 0 && $i <= $x) {                $pages[] = $i;            }        }        $i = $pageNow;        $dist = 1;        while ($i >0) {            $dist = 2 * $dist;            $i = $pageNow - $dist;            if ($i > 0 && $i <= $x) {                $pages[] = $i;            }        }        // Since because of ellipsing of the current page some numbers may be double,        // we unify our array:        sort($pages);        $pages = array_unique($pages);    }    foreach ($pages as $i) {        if ($i == $pageNow) {            $selected = 'selected="selected" style="font-weight: bold"';        } else {            $selected = '';        }        $gotopage .= '                <option ' . $selected            . ' value="' . (($i - 1) * $rows) . '">' . $i . '</option>' . "\n";    }    $gotopage .= ' </select><noscript><input type="submit" value="'        . __('Go') . '" /></noscript>';    return $gotopage;} // end function/** * Generate navigation for a list * * @param int    $count       number of elements in the list * @param int    $pos         current position in the list * @param array  $_url_params url parameters * @param string $script      script name for form target * @param string $frame       target frame * @param int    $max_count   maximum number of elements to display from the list * * @access  public * * @todo    use $pos from $_url_params */function PMA_listNavigator($count, $pos, $_url_params, $script, $frame, $max_count){    if ($max_count < $count) {        echo 'frame_navigation' == $frame            ? '<div id="navidbpageselector">' . "\n"            : '';        echo __('Page number:');        echo 'frame_navigation' == $frame ? '<br />' : ' ';        // Move to the beginning or to the previous page        if ($pos > 0) {            // patch #474210 - part 1            if ($GLOBALS['cfg']['NavigationBarIconic']) {                $caption1 = '&lt;&lt;';                $caption2 = ' &lt; ';                $title1   = ' title="' . _pgettext('First page', 'Begin') . '"';                $title2   = ' title="' . _pgettext('Previous page', 'Previous') . '"';            } else {                $caption1 = _pgettext('First page', 'Begin') . ' &lt;&lt;';                $caption2 = _pgettext('Previous page', 'Previous') . ' &lt;';                $title1   = '';                $title2   = '';            } // end if... else...            $_url_params['pos'] = 0;            echo '<a' . $title1 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption1 . '</a>';            $_url_params['pos'] = $pos - $max_count;            echo '<a' . $title2 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption2 . '</a>';        }        echo "\n", '<form action="./', basename($script), '" method="post" target="', $frame, '">', "\n";        echo PMA_generate_common_hidden_inputs($_url_params);        echo PMA_pageselector(            $max_count,            floor(($pos + 1) / $max_count) + 1,            ceil($count / $max_count)        );        echo '</form>';        if ($pos + $max_count < $count) {            if ($GLOBALS['cfg']['NavigationBarIconic']) {                $caption3 = ' &gt; ';                $caption4 = '&gt;&gt;';                $title3   = ' title="' . _pgettext('Next page', 'Next') . '"';                $title4   = ' title="' . _pgettext('Last page', 'End') . '"';            } else {                $caption3 = '&gt; ' . _pgettext('Next page', 'Next');                $caption4 = '&gt;&gt; ' . _pgettext('Last page', 'End');                $title3   = '';                $title4   = '';            } // end if... else...            $_url_params['pos'] = $pos + $max_count;            echo '<a' . $title3 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption3 . '</a>';            $_url_params['pos'] = floor($count / $max_count) * $max_count;            if ($_url_params['pos'] == $count) {                $_url_params['pos'] = $count - $max_count;            }            echo '<a' . $title4 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption4 . '</a>';        }        echo "\n";        if ('frame_navigation' == $frame) {            echo '</div>' . "\n";        }    }}/** * replaces %u in given path with current user name * * example: * <code> * $user_dir = PMA_userDir('/var/pma_tmp/%u/'); // '/var/pma_tmp/root/' * * </code> * * @param string $dir with wildcard for user * * @return  string  per user directory */function PMA_userDir($dir){    // add trailing slash    if (substr($dir, -1) != '/') {        $dir .= '/';    }    return str_replace('%u', $GLOBALS['cfg']['Server']['user'], $dir);}/** * returns html code for db link to default db page * * @param string $database database * * @return  string  html link to default db page */function PMA_getDbLink($database = null){    if (! strlen($database)) {        if (! strlen($GLOBALS['db'])) {            return '';        }        $database = $GLOBALS['db'];    } else {        $database = PMA_unescape_mysql_wildcards($database);    }    return '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase'] . '?'        . PMA_generate_common_url($database) . '" title="'        . sprintf(            __('Jump to database &quot;%s&quot;.'),            htmlspecialchars($database)        )        . '">' . htmlspecialchars($database) . '</a>';}/** * Displays a lightbulb hint explaining a known external bug * that affects a functionality * * @param string $functionality   localized message explaining the func. * @param string $component       'mysql' (eventually, 'php') * @param string $minimum_version of this component * @param string $bugref          bug reference for this component */function PMA_externalBug($functionality, $component, $minimum_version, $bugref){    if ($component == 'mysql' && PMA_MYSQL_INT_VERSION < $minimum_version) {        echo PMA_showHint(            sprintf(                __('The %s functionality is affected by a known bug, see %s'),                $functionality,                PMA_linkURL('http://bugs.mysql.com/') . $bugref            )        );    }}/** * Generates and echoes an HTML checkbox * * @param string  $html_field_name the checkbox HTML field * @param string  $label           label for checkbox * @param boolean $checked         is it initially checked? * @param boolean $onclick         should it submit the form on click? * * @return the HTML for the checkbox */function PMA_display_html_checkbox($html_field_name, $label, $checked, $onclick){    echo '<input type="checkbox" name="' . $html_field_name . '" id="'        . $html_field_name . '"' . ($checked ? ' checked="checked"' : '')        . ($onclick ? ' class="autosubmit"' : '') . ' /><label for="'        . $html_field_name . '">' . $label . '</label>';}/** * Generates and echoes a set of radio HTML fields * * @param string  $html_field_name the radio HTML field * @param array   $choices         the choices values and labels * @param string  $checked_choice  the choice to check by default * @param boolean $line_break      whether to add an HTML line break after a choice * @param boolean $escape_label    whether to use htmlspecialchars() on label * @param string  $class           enclose each choice with a div of this class * * @return the HTML for the tadio buttons */function PMA_display_html_radio($html_field_name, $choices, $checked_choice = '',$line_break = true, $escape_label = true, $class=''){    foreach ($choices as $choice_value => $choice_label) {        if (! empty($class)) {            echo '<div class="' . $class . '">';        }        $html_field_id = $html_field_name . '_' . $choice_value;        echo '<input type="radio" name="' . $html_field_name . '" id="'            . $html_field_id . '" value="' . htmlspecialchars($choice_value) . '"';        if ($choice_value == $checked_choice) {            echo ' checked="checked"';        }        echo ' />' . "\n";        echo '<label for="' . $html_field_id . '">'            . ($escape_label ? htmlspecialchars($choice_label)  : $choice_label)            . '</label>';        if ($line_break) {            echo '<br />';        }        if (! empty($class)) {            echo '</div>';        }        echo "\n";    }}/** * Generates and returns an HTML dropdown * * @param string $select_name   name for the select element * @param array  $choices       choices values * @param string $active_choice the choice to select by default * @param string $id            id of the select element; can be different in case *                              the dropdown is present more than once on the page * * @return string * * @todo    support titles */function PMA_generate_html_dropdown($select_name, $choices, $active_choice, $id){    $result = '<select name="' . htmlspecialchars($select_name) . '" id="'        . htmlspecialchars($id) . '">';    foreach ($choices as $one_choice_value => $one_choice_label) {        $result .= '<option value="' . htmlspecialchars($one_choice_value) . '"';        if ($one_choice_value == $active_choice) {            $result .= ' selected="selected"';        }        $result .= '>' . htmlspecialchars($one_choice_label) . '</option>';    }    $result .= '</select>';    return $result;}/** * Generates a slider effect (jQjuery) * Takes care of generating the initial <div> and the link * controlling the slider; you have to generate the </div> yourself * after the sliding section. * * @param string $id      the id of the <div> on which to apply the effect * @param string $message the message to show as a link */function PMA_generate_slider_effect($id, $message){    if ($GLOBALS['cfg']['InitialSlidersState'] == 'disabled') {        echo '<div id="' . $id . '">';        return;    }    /**     * Bad hack on the next line. document.write() conflicts with jQuery, hence,     * opening the <div> with PHP itself instead of JavaScript.     *     * @todo find a better solution that uses $.append(), the recommended method     * maybe by using an additional param, the id of the div to append to     */    ?><div id="<?php echo $id; ?>" <?php echo $GLOBALS['cfg']['InitialSlidersState'] == 'closed' ? ' style="display: none; overflow:auto;"' : ''; ?> class="pma_auto_slider" title="<?php echo htmlspecialchars($message); ?>">    <?php}/** * Creates an AJAX sliding toggle button * (or and equivalent form when AJAX is disabled) * * @param string $action      The URL for the request to be executed * @param string $select_name The name for the dropdown box * @param array  $options     An array of options (see rte_footer.lib.php) * @param string $callback    A JS snippet to execute when the request is *                            successfully processed * * @return   string   HTML code for the toggle button */function PMA_toggleButton($action, $select_name, $options, $callback){    // Do the logic first    $link_on = "$action&amp;$select_name=" . urlencode($options[1]['value']);    $link_off = "$action&amp;$select_name=" . urlencode($options[0]['value']);    if ($options[1]['selected'] == true) {        $state = 'on';    } else if ($options[0]['selected'] == true) {        $state = 'off';    } else {        $state = 'on';    }    $selected1 = '';    $selected0 = '';    if ($options[1]['selected'] == true) {        $selected1 = " selected='selected'";    } else if ($options[0]['selected'] == true) {        $selected0 = " selected='selected'";    }    // Generate output    $retval  = "<!-- TOGGLE START -->\n";    if ($GLOBALS['cfg']['AjaxEnable'] && is_readable($_SESSION['PMA_Theme']->getImgPath() . 'toggle-ltr.png')) {        $retval .= "<noscript>\n";    }    $retval .= "<div class='wrapper'>\n";    $retval .= "    <form action='$action' method='post'>\n";    $retval .= "        <select name='$select_name'>\n";    $retval .= "            <option value='{$options[1]['value']}'$selected1>";    $retval .= "                {$options[1]['label']}\n";    $retval .= "            </option>\n";    $retval .= "            <option value='{$options[0]['value']}'$selected0>";    $retval .= "                {$options[0]['label']}\n";    $retval .= "            </option>\n";    $retval .= "        </select>\n";    $retval .= "        <input type='submit' value='" . __('Change') . "'/>\n";    $retval .= "    </form>\n";    $retval .= "</div>\n";    if ($GLOBALS['cfg']['AjaxEnable'] && is_readable($_SESSION['PMA_Theme']->getImgPath() . 'toggle-ltr.png')) {        $retval .= "</noscript>\n";        $retval .= "<div class='wrapper toggleAjax hide'>\n";        $retval .= "    <div class='toggleButton'>\n";        $retval .= "        <div title='" . __('Click to toggle') . "' class='container $state'>\n";        $retval .= "            <img src='{$GLOBALS['pmaThemeImage']}toggle-{$GLOBALS['text_dir']}.png'\n";        $retval .= "                 alt='' />\n";        $retval .= "            <table cellspacing='0' cellpadding='0'><tr>\n";        $retval .= "                <tbody>\n";        $retval .= "                <td class='toggleOn'>\n";        $retval .= "                    <span class='hide'>$link_on</span>\n";        $retval .= "                    <div>";        $retval .= str_replace(' ', '&nbsp;', $options[1]['label']) . "</div>\n";        $retval .= "                </td>\n";        $retval .= "                <td><div>&nbsp;</div></td>\n";        $retval .= "                <td class='toggleOff'>\n";        $retval .= "                    <span class='hide'>$link_off</span>\n";        $retval .= "                    <div>";        $retval .= str_replace(' ', '&nbsp;', $options[0]['label']) . "</div>\n";        $retval .= "                    </div>\n";        $retval .= "                </tbody>\n";        $retval .= "            </tr></table>\n";        $retval .= "            <span class='hide callback'>$callback</span>\n";        $retval .= "            <span class='hide text_direction'>{$GLOBALS['text_dir']}</span>\n";        $retval .= "        </div>\n";        $retval .= "    </div>\n";        $retval .= "</div>\n";    }    $retval .= "<!-- TOGGLE END -->";    return $retval;} // end PMA_toggleButton()/** * Clears cache content which needs to be refreshed on user change. * * @return nothing */function PMA_clearUserCache(){    PMA_cacheUnset('is_superuser', true);}/** * Verifies if something is cached in the session * * @param string   $var    variable name * @param int|true $server server * * @return boolean */function PMA_cacheExists($var, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    return isset($_SESSION['cache']['server_' . $server][$var]);}/** * Gets cached information from the session * * @param string   $var    varibale name * @param int|true $server server * * @return mixed */function PMA_cacheGet($var, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    if (isset($_SESSION['cache']['server_' . $server][$var])) {        return $_SESSION['cache']['server_' . $server][$var];    } else {        return null;    }}/** * Caches information in the session * * @param string   $var    variable name * @param mixed    $val    value * @param int|true $server server * * @return mixed */function PMA_cacheSet($var, $val = null, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    $_SESSION['cache']['server_' . $server][$var] = $val;}/** * Removes cached information from the session * * @param string   $var    variable name * @param int|true $server server * * @return nothing */function PMA_cacheUnset($var, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    unset($_SESSION['cache']['server_' . $server][$var]);}/** * Converts a bit value to printable format; * in MySQL a BIT field can be from 1 to 64 bits so we need this * function because in PHP, decbin() supports only 32 bits * * @param numeric $value  coming from a BIT field * @param integer $length length * * @return  string  the printable value */function PMA_printable_bit_value($value, $length){    $printable = '';    for ($i = 0, $len_ceiled = ceil($length / 8); $i < $len_ceiled; $i++) {        $printable .= sprintf('%08d', decbin(ord(substr($value, $i, 1))));    }    $printable = substr($printable, -$length);    return $printable;}/** * Verifies whether the value contains a non-printable character * * @param string $value value * * @return  boolean */function PMA_contains_nonprintable_ascii($value){    return preg_match('@[^[:print:]]@', $value);}/** * Converts a BIT type default value * for example, b'010' becomes 010 * * @param string $bit_default_value value * * @return  string the converted value */function PMA_convert_bit_default_value($bit_default_value){    return strtr($bit_default_value, array("b" => "", "'" => ""));}/** * Extracts the various parts from a field type spec * * @param string $fieldspec Field specification * * @return  array associative array containing type, spec_in_brackets *          and possibly enum_set_values (another array) */function PMA_extractFieldSpec($fieldspec){    $first_bracket_pos = strpos($fieldspec, '(');    if ($first_bracket_pos) {        $spec_in_brackets = chop(            substr(                $fieldspec,                $first_bracket_pos + 1,                (strrpos($fieldspec, ')') - $first_bracket_pos - 1)            )        );        // convert to lowercase just to be sure        $type = strtolower(chop(substr($fieldspec, 0, $first_bracket_pos)));    } else {        $type = strtolower($fieldspec);        $spec_in_brackets = '';    }    if ('enum' == $type || 'set' == $type) {        // Define our working vars        $enum_set_values = array();        $working = "";        $in_string = false;        $index = 0;        // While there is another character to process        while (isset($fieldspec[$index])) {            // Grab the char to look at            $char = $fieldspec[$index];            // If it is a single quote, needs to be handled specially            if ($char == "'") {                // If we are not currently in a string, begin one                if (! $in_string) {                    $in_string = true;                    $working = "";                } else {                    // Otherwise, it may be either an end of a string,                    // or a 'double quote' which can be handled as-is                    // Check out the next character (if possible)                    $has_next = isset($fieldspec[$index + 1]);                    $next = $has_next ? $fieldspec[$index + 1] : null;                    //If we have reached the end of our 'working' string (because                    //there are no more chars,or the next char is not another quote)                    if (! $has_next || $next != "'") {                        $enum_set_values[] = $working;                        $in_string = false;                    } elseif ($next == "'") {                        // Otherwise, this is a 'double quote',                        // and can be added to the working string                        $working .= "'";                        // Skip the next char; we already know what it is                        $index++;                    }                }            } elseif ('\\' == $char                && isset($fieldspec[$index + 1])                && "'" == $fieldspec[$index + 1]            ) {                // escaping of a quote?                $working .= "'";                $index++;            } else {                // Otherwise, add it to our working string like normal                $working .= $char;            }            // Increment character index            $index++;        } // end while        $printtype = $type . '(' .  str_replace("','", "', '", $spec_in_brackets) . ')';        $binary = false;        $unsigned = false;        $zerofill = false;    } else {        $enum_set_values = array();        /* Create printable type name */        $printtype = strtolower($fieldspec);        // Strip the "BINARY" attribute, except if we find "BINARY(" because        // this would be a BINARY or VARBINARY field type;        // by the way, a BLOB should not show the BINARY attribute        // because this is not accepted in MySQL syntax.        if (preg_match('@binary@', $printtype) && ! preg_match('@binary[\(]@', $printtype)) {            $printtype = preg_replace('@binary@', '', $printtype);            $binary = true;        } else {            $binary = false;        }        $printtype = preg_replace('@zerofill@', '', $printtype, -1, $zerofill_cnt);        $zerofill = ($zerofill_cnt > 0);        $printtype = preg_replace('@unsigned@', '', $printtype, -1, $unsigned_cnt);        $unsigned = ($unsigned_cnt > 0);        $printtype = trim($printtype);    }    $attribute     = ' ';    if ($binary) {        $attribute = 'BINARY';    }    if ($unsigned) {        $attribute = 'UNSIGNED';    }    if ($zerofill) {        $attribute = 'UNSIGNED ZEROFILL';    }    return array(        'type' => $type,        'spec_in_brackets' => $spec_in_brackets,        'enum_set_values'  => $enum_set_values,        'print_type' => $printtype,        'binary' => $binary,        'unsigned' => $unsigned,        'zerofill' => $zerofill,        'attribute' => $attribute,    );}/** * Verifies if this table's engine supports foreign keys * * @param string $engine engine * * @return  boolean */function PMA_foreignkey_supported($engine){    $engine = strtoupper($engine);    if ('INNODB' == $engine || 'PBXT' == $engine) {        return true;    } else {        return false;    }}/** * Replaces some characters by a displayable equivalent * * @param string $content content * * @return  string the content with characters replaced */function PMA_replace_binary_contents($content){    $result = str_replace("\x00", '\0', $content);    $result = str_replace("\x08", '\b', $result);    $result = str_replace("\x0a", '\n', $result);    $result = str_replace("\x0d", '\r', $result);    $result = str_replace("\x1a", '\Z', $result);    return $result;}/** * Converts GIS data to Well Known Text format * * @param binary $data        GIS data * @param bool   $includeSRID Add SRID to the WKT * * @return GIS data in Well Know Text format */function PMA_asWKT($data, $includeSRID = false){    // Convert to WKT format    $hex = bin2hex($data);    $wktsql     = "SELECT ASTEXT(x'" . $hex . "')";    if ($includeSRID) {        $wktsql .= ", SRID(x'" . $hex . "')";    }    $wktresult  = PMA_DBI_try_query($wktsql, null, PMA_DBI_QUERY_STORE);    $wktarr     = PMA_DBI_fetch_row($wktresult, 0);    $wktval     = $wktarr[0];    if ($includeSRID) {        $srid = $wktarr[1];        $wktval = "'" . $wktval . "'," . $srid;    }    @PMA_DBI_free_result($wktresult);    return $wktval;}/** * If the string starts with a \r\n pair (0x0d0a) add an extra \n * * @param string $string string * * @return  string with the chars replaced */function PMA_duplicateFirstNewline($string){    $first_occurence = strpos($string, "\r\n");    if ($first_occurence === 0) {        $string = "\n".$string;    }    return $string;}/** * Get the action word corresponding to a script name * in order to display it as a title in navigation panel * * @param string $target a valid value for $cfg['LeftDefaultTabTable'], *                       $cfg['DefaultTabTable'] or $cfg['DefaultTabDatabase'] * * @return array */function PMA_getTitleForTarget($target){    $mapping = array(        // Values for $cfg['DefaultTabTable']        'tbl_structure.php' =>  __('Structure'),        'tbl_sql.php' => __('SQL'),        'tbl_select.php' =>__('Search'),        'tbl_change.php' =>__('Insert'),        'sql.php' => __('Browse'),        // Values for $cfg['DefaultTabDatabase']        'db_structure.php' => __('Structure'),        'db_sql.php' => __('SQL'),        'db_search.php' => __('Search'),        'db_operations.php' => __('Operations'),    );    return $mapping[$target];}/** * Formats user string, expanding @VARIABLES@, accepting strftime format string. * * @param string   $string  Text where to do expansion. * @param function $escape  Function to call for escaping variable values. * @param array    $updates Array with overrides for default parameters *                 (obtained from GLOBALS). * * @return string */function PMA_expandUserString($string, $escape = null, $updates = array()){    /* Content */    $vars['http_host'] = PMA_getenv('HTTP_HOST') ? PMA_getenv('HTTP_HOST') : '';    $vars['server_name'] = $GLOBALS['cfg']['Server']['host'];    $vars['server_verbose'] = $GLOBALS['cfg']['Server']['verbose'];    $vars['server_verbose_or_name'] = ! empty($GLOBALS['cfg']['Server']['verbose'])        ? $GLOBALS['cfg']['Server']['verbose']        : $GLOBALS['cfg']['Server']['host'];    $vars['database'] = $GLOBALS['db'];    $vars['table'] = $GLOBALS['table'];    $vars['phpmyadmin_version'] = 'phpMyAdmin ' . PMA_VERSION;    /* Update forced variables */    foreach ($updates as $key => $val) {        $vars[$key] = $val;    }    /* Replacement mapping */    /*     * The __VAR__ ones are for backward compatibility, because user     * might still have it in cookies.     */    $replace = array(        '@HTTP_HOST@' => $vars['http_host'],        '@SERVER@' => $vars['server_name'],        '__SERVER__' => $vars['server_name'],        '@VERBOSE@' => $vars['server_verbose'],        '@VSERVER@' => $vars['server_verbose_or_name'],        '@DATABASE@' => $vars['database'],        '__DB__' => $vars['database'],        '@TABLE@' => $vars['table'],        '__TABLE__' => $vars['table'],        '@PHPMYADMIN@' => $vars['phpmyadmin_version'],        );    /* Optional escaping */    if (!is_null($escape)) {        foreach ($replace as $key => $val) {            $replace[$key] = $escape($val);        }    }    /* Backward compatibility in 3.5.x */    if (strpos($string, '@FIELDS@') !== false) {        $string = strtr($string, array('@FIELDS@' => '@COLUMNS@'));    }    /* Fetch columns list if required */    if (strpos($string, '@COLUMNS@') !== false) {        $columns_list = PMA_DBI_get_columns($GLOBALS['db'], $GLOBALS['table']);        $column_names = array();        foreach ($columns_list as $column) {            if (! is_null($escape)) {                $column_names[] = $escape($column['Field']);            } else {                $column_names[] = $field['Field'];            }        }        $replace['@COLUMNS@'] = implode(',', $column_names);    }    /* Do the replacement */    return strtr(strftime($string), $replace);}/** * function that generates a json output for an ajax request and ends script * execution * * @param PMA_Message|string $message    message string containing the *                                       html of the message * @param bool               $success    success whether the ajax request *                                       was successfull * @param array              $extra_data extra data  optional - *                                       any other data as part of the json request * * @return nothing */function PMA_ajaxResponse($message, $success = true, $extra_data = array()){    $response = array();    if ( $success == true ) {        $response['success'] = true;        if ($message instanceof PMA_Message) {            $response['message'] = $message->getDisplay();        } else {            $response['message'] = $message;        }    } else {        $response['success'] = false;        if ($message instanceof PMA_Message) {            $response['error'] = $message->getDisplay();        } else {            $response['error'] = $message;        }    }    // If extra_data has been provided, append it to the response array    if ( ! empty($extra_data) && count($extra_data) > 0 ) {        $response = array_merge($response, $extra_data);    }    // Set the Content-Type header to JSON so that jQuery parses the    // response correctly.    //    // At this point, other headers might have been sent;    // even if $GLOBALS['is_header_sent'] is true,    // we have to send these additional headers.    header('Cache-Control: no-cache');    header("Content-Type: application/json");    echo json_encode($response);    if (!defined('TESTSUITE'))        exit;}/** * Display the form used to browse anywhere on the local server for a file to import * * @param string $max_upload_size maximum upload size * * @return nothing */function PMA_browseUploadFile($max_upload_size){    echo '<label for="radio_import_file">' . __("Browse your computer:") . '</label>';    echo '<div id="upload_form_status" style="display: none;"></div>';    echo '<div id="upload_form_status_info" style="display: none;"></div>';    echo '<input type="file" name="import_file" id="input_import_file" />';    echo PMA_displayMaximumUploadSize($max_upload_size) . "\n";    // some browsers should respect this :)    echo PMA_generateHiddenMaxFileSize($max_upload_size) . "\n";}/** * Display the form used to select a file to import from the server upload directory * * @param array  $import_list array of import types * @param string $uploaddir   upload directory * * @return nothing */function PMA_selectUploadFile($import_list, $uploaddir){    echo '<label for="radio_local_import_file">' . sprintf(__("Select from the web server upload directory <b>%s</b>:"), htmlspecialchars(PMA_userDir($uploaddir))) . '</label>';    $extensions = '';    foreach ($import_list as $key => $val) {        if (!empty($extensions)) {            $extensions .= '|';        }        $extensions .= $val['extension'];    }    $matcher = '@\.(' . $extensions . ')(\.('        . PMA_supportedDecompressions() . '))?$@';    $active = (isset($timeout_passed) && $timeout_passed && isset($local_import_file))        ? $local_import_file        : '';    $files = PMA_getFileSelectOptions(        PMA_userDir($uploaddir),        $matcher,        $active    );    if ($files === false) {        PMA_Message::error(            __('The directory you set for upload work cannot be reached')        )->display();    } elseif (!empty($files)) {        echo "\n";        echo '    <select style="margin: 5px" size="1" name="local_import_file" id="select_local_import_file">' . "\n";        echo '        <option value="">&nbsp;</option>' . "\n";        echo $files;        echo '    </select>' . "\n";    } elseif (empty ($files)) {        echo '<i>' . __('There are no files to upload') . '</i>';    }}/** * Build titles and icons for action links * * @return   array   the action titles */function PMA_buildActionTitles(){    $titles = array();    $titles['Browse']     = PMA_getIcon('b_browse.png', __('Browse'));    $titles['NoBrowse']   = PMA_getIcon('bd_browse.png', __('Browse'));    $titles['Search']     = PMA_getIcon('b_select.png', __('Search'));    $titles['NoSearch']   = PMA_getIcon('bd_select.png', __('Search'));    $titles['Insert']     = PMA_getIcon('b_insrow.png', __('Insert'));    $titles['NoInsert']   = PMA_getIcon('bd_insrow.png', __('Insert'));    $titles['Structure']  = PMA_getIcon('b_props.png', __('Structure'));    $titles['Drop']       = PMA_getIcon('b_drop.png', __('Drop'));    $titles['NoDrop']     = PMA_getIcon('bd_drop.png', __('Drop'));    $titles['Empty']      = PMA_getIcon('b_empty.png', __('Empty'));    $titles['NoEmpty']    = PMA_getIcon('bd_empty.png', __('Empty'));    $titles['Edit']       = PMA_getIcon('b_edit.png', __('Edit'));    $titles['NoEdit']     = PMA_getIcon('bd_edit.png', __('Edit'));    $titles['Export']     = PMA_getIcon('b_export.png', __('Export'));    $titles['NoExport']   = PMA_getIcon('bd_export.png', __('Export'));    $titles['Execute']    = PMA_getIcon('b_nextpage.png', __('Execute'));    $titles['NoExecute']  = PMA_getIcon('bd_nextpage.png', __('Execute'));    return $titles;}/** * This function processes the datatypes supported by the DB, as specified in * $cfg['ColumnTypes'] and either returns an array (useful for quickly checking * if a datatype is supported) or an HTML snippet that creates a drop-down list. * * @param bool   $html     Whether to generate an html snippet or an array * @param string $selected The value to mark as selected in HTML mode * * @return  mixed   An HTML snippet or an array of datatypes. * */function PMA_getSupportedDatatypes($html = false, $selected = ''){    global $cfg;    if ($html) {        // NOTE: the SELECT tag in not included in this snippet.        $retval = '';        foreach ($cfg['ColumnTypes'] as $key => $value) {            if (is_array($value)) {                $retval .= "<optgroup label='" . htmlspecialchars($key) . "'>";                foreach ($value as $subvalue) {                    if ($subvalue == $selected) {                        $retval .= "<option selected='selected'>";                        $retval .= $subvalue;                        $retval .= "</option>";                    } else if ($subvalue === '-') {                        $retval .= "<option disabled='disabled'>";                        $retval .= $subvalue;                        $retval .= "</option>";                    } else {                        $retval .= "<option>$subvalue</option>";                    }                }                $retval .= '</optgroup>';            } else {                if ($selected == $value) {                    $retval .= "<option selected='selected'>$value</option>";                } else {                    $retval .= "<option>$value</option>";                }            }        }    } else {        $retval = array();        foreach ($cfg['ColumnTypes'] as $value) {            if (is_array($value)) {                foreach ($value as $subvalue) {                    if ($subvalue !== '-') {                        $retval[] = $subvalue;                    }                }            } else {                if ($value !== '-') {                    $retval[] = $value;                }            }        }    }    return $retval;} // end PMA_getSupportedDatatypes()/** * Returns a list of datatypes that are not (yet) handled by PMA. * Used by: tbl_change.php and libraries/db_routines.inc.php * * @return   array   list of datatypes */function PMA_unsupportedDatatypes(){    $no_support_types = array();    return $no_support_types;}/** * Return GIS data types * * @param bool $upper_case whether to return values in upper case * * @return array GIS data types */function PMA_getGISDatatypes($upper_case = false){    $gis_data_types = array(        'geometry',        'point',        'linestring',        'polygon',        'multipoint',        'multilinestring',        'multipolygon',        'geometrycollection'    );    if ($upper_case) {        for ($i = 0; $i < count($gis_data_types); $i++) {            $gis_data_types[$i] = strtoupper($gis_data_types[$i]);        }    }    return $gis_data_types;}/** * Generates GIS data based on the string passed. * * @param string $gis_string GIS string * * @return GIS data enclosed in 'GeomFromText' function */function PMA_createGISData($gis_string){    $gis_string =  trim($gis_string);    $geom_types = '(POINT|MULTIPOINT|LINESTRING|MULTILINESTRING|'        . 'POLYGON|MULTIPOLYGON|GEOMETRYCOLLECTION)';    if (preg_match("/^'" . $geom_types . "\(.*\)',[0-9]*$/i", $gis_string)) {        return 'GeomFromText(' . $gis_string . ')';    } elseif (preg_match("/^" . $geom_types . "\(.*\)$/i", $gis_string)) {        return "GeomFromText('" . $gis_string . "')";    } else {        return $gis_string;    }}/** * Returns the names and details of the functions * that can be applied on geometry data typess. * * @param string $geom_type if provided the output is limited to the functions *                          that are applicable to the provided geometry type. * @param bool   $binary    if set to false functions that take two geometries *                          as arguments will not be included. * @param bool   $display   if set to true seperators will be added to the *                          output array. * * @return array names and details of the functions that can be applied on *               geometry data typess. */function PMA_getGISFunctions($geom_type = null, $binary = true, $display = false){    $funcs = array();    if ($display) {        $funcs[] = array('display' => ' ');    }    // Unary functions common to all geomety types    $funcs['Dimension']    = array('params' => 1, 'type' => 'int');    $funcs['Envelope']     = array('params' => 1, 'type' => 'Polygon');    $funcs['GeometryType'] = array('params' => 1, 'type' => 'text');    $funcs['SRID']         = array('params' => 1, 'type' => 'int');    $funcs['IsEmpty']      = array('params' => 1, 'type' => 'int');    $funcs['IsSimple']     = array('params' => 1, 'type' => 'int');    $geom_type = trim(strtolower($geom_type));    if ($display && $geom_type != 'geometry' && $geom_type != 'multipoint') {        $funcs[] = array('display' => '--------');    }    // Unary functions that are specific to each geomety type    if ($geom_type == 'point') {        $funcs['X'] = array('params' => 1, 'type' => 'float');        $funcs['Y'] = array('params' => 1, 'type' => 'float');    } elseif ($geom_type == 'multipoint') {        // no fucntions here    } elseif ($geom_type == 'linestring') {        $funcs['EndPoint']   = array('params' => 1, 'type' => 'point');        $funcs['GLength']    = array('params' => 1, 'type' => 'float');        $funcs['NumPoints']  = array('params' => 1, 'type' => 'int');        $funcs['StartPoint'] = array('params' => 1, 'type' => 'point');        $funcs['IsRing']     = array('params' => 1, 'type' => 'int');    } elseif ($geom_type == 'multilinestring') {        $funcs['GLength']  = array('params' => 1, 'type' => 'float');        $funcs['IsClosed'] = array('params' => 1, 'type' => 'int');    } elseif ($geom_type == 'polygon') {        $funcs['Area']             = array('params' => 1, 'type' => 'float');        $funcs['ExteriorRing']     = array('params' => 1, 'type' => 'linestring');        $funcs['NumInteriorRings'] = array('params' => 1, 'type' => 'int');    } elseif ($geom_type == 'multipolygon') {        $funcs['Area']     = array('params' => 1, 'type' => 'float');        $funcs['Centroid'] = array('params' => 1, 'type' => 'point');        // Not yet implemented in MySQL        //$funcs['PointOnSurface'] = array('params' => 1, 'type' => 'point');    } elseif ($geom_type == 'geometrycollection') {        $funcs['NumGeometries'] = array('params' => 1, 'type' => 'int');    }    // If we are asked for binary functions as well    if ($binary) {        // section seperator        if ($display) {            $funcs[] = array('display' => '--------');        }        if (PMA_MYSQL_INT_VERSION < 50601) {            $funcs['Crosses']    = array('params' => 2, 'type' => 'int');            $funcs['Contains']   = array('params' => 2, 'type' => 'int');            $funcs['Disjoint']   = array('params' => 2, 'type' => 'int');            $funcs['Equals']     = array('params' => 2, 'type' => 'int');            $funcs['Intersects'] = array('params' => 2, 'type' => 'int');            $funcs['Overlaps']   = array('params' => 2, 'type' => 'int');            $funcs['Touches']    = array('params' => 2, 'type' => 'int');            $funcs['Within']     = array('params' => 2, 'type' => 'int');        } else {            // If MySQl version is greaeter than or equal 5.6.1, use the ST_ prefix.            $funcs['ST_Crosses']    = array('params' => 2, 'type' => 'int');            $funcs['ST_Contains']   = array('params' => 2, 'type' => 'int');            $funcs['ST_Disjoint']   = array('params' => 2, 'type' => 'int');            $funcs['ST_Equals']     = array('params' => 2, 'type' => 'int');            $funcs['ST_Intersects'] = array('params' => 2, 'type' => 'int');            $funcs['ST_Overlaps']   = array('params' => 2, 'type' => 'int');            $funcs['ST_Touches']    = array('params' => 2, 'type' => 'int');            $funcs['ST_Within']     = array('params' => 2, 'type' => 'int');        }        if ($display) {            $funcs[] = array('display' => '--------');        }        // Minimum bounding rectangle functions        $funcs['MBRContains']   = array('params' => 2, 'type' => 'int');        $funcs['MBRDisjoint']   = array('params' => 2, 'type' => 'int');        $funcs['MBREquals']     = array('params' => 2, 'type' => 'int');        $funcs['MBRIntersects'] = array('params' => 2, 'type' => 'int');        $funcs['MBROverlaps']   = array('params' => 2, 'type' => 'int');        $funcs['MBRTouches']    = array('params' => 2, 'type' => 'int');        $funcs['MBRWithin']     = array('params' => 2, 'type' => 'int');    }    return $funcs;}/** * Creates a dropdown box with MySQL functions for a particular column. * * @param array $field       Data about the column for which *                           to generate the dropdown * @param bool  $insert_mode Whether the operation is 'insert' * * @global   array    $cfg            PMA configuration * @global   array    $analyzed_sql   Analyzed SQL query * @global   mixed    $data           (null/string) FIXME: what is this for? * * @return   string   An HTML snippet of a dropdown list with function *                    names appropriate for the requested column. */function PMA_getFunctionsForField($field, $insert_mode){    global $cfg, $analyzed_sql, $data;    $selected = '';    // Find the current type in the RestrictColumnTypes. Will result in 'FUNC_CHAR'    // or something similar. Then directly look up the entry in the    // RestrictFunctions array, which'll then reveal the available dropdown options    if (isset($cfg['RestrictColumnTypes'][strtoupper($field['True_Type'])])        && isset($cfg['RestrictFunctions'][$cfg['RestrictColumnTypes'][strtoupper($field['True_Type'])]])    ) {        $current_func_type  = $cfg['RestrictColumnTypes'][strtoupper($field['True_Type'])];        $dropdown           = $cfg['RestrictFunctions'][$current_func_type];        $default_function   = $cfg['DefaultFunctions'][$current_func_type];    } else {        $dropdown = array();        $default_function   = '';    }    $dropdown_built = array();    $op_spacing_needed = false;    // what function defined as default?    // for the first timestamp we don't set the default function    // if there is a default value for the timestamp    // (not including CURRENT_TIMESTAMP)    // and the column does not have the    // ON UPDATE DEFAULT TIMESTAMP attribute.    if ($field['True_Type'] == 'timestamp'        && empty($field['Default'])        && empty($data)        && ! isset($analyzed_sql[0]['create_table_fields'][$field['Field']]['on_update_current_timestamp'])    ) {        $default_function = $cfg['DefaultFunctions']['first_timestamp'];    }    // For primary keys of type char(36) or varchar(36) UUID if the default function    // Only applies to insert mode, as it would silently trash data on updates.    if ($insert_mode        && $field['Key'] == 'PRI'        && ($field['Type'] == 'char(36)' || $field['Type'] == 'varchar(36)')    ) {         $default_function = $cfg['DefaultFunctions']['FUNC_UUID'];    }    // this is set only when appropriate and is always true    if (isset($field['display_binary_as_hex'])) {        $default_function = 'UNHEX';    }    // Create the output    $retval = '                <option></option>' . "\n";    // loop on the dropdown array and print all available options for that field.    foreach ($dropdown as $each_dropdown) {        $retval .= '                ';        $retval .= '<option';        if ($default_function === $each_dropdown) {            $retval .= ' selected="selected"';        }        $retval .= '>' . $each_dropdown . '</option>' . "\n";        $dropdown_built[$each_dropdown] = 'true';        $op_spacing_needed = true;    }    // For compatibility's sake, do not let out all other functions. Instead    // print a separator (blank) and then show ALL functions which weren't shown    // yet.    $cnt_functions = count($cfg['Functions']);    for ($j = 0; $j < $cnt_functions; $j++) {        if (! isset($dropdown_built[$cfg['Functions'][$j]])            || $dropdown_built[$cfg['Functions'][$j]] != 'true'        ) {            // Is current function defined as default?            $selected = ($field['first_timestamp'] && $cfg['Functions'][$j] == $cfg['DefaultFunctions']['first_timestamp'])                        || (! $field['first_timestamp'] && $cfg['Functions'][$j] == $default_function)                      ? ' selected="selected"'                      : '';            if ($op_spacing_needed == true) {                $retval .= '                ';                $retval .= '<option value="">--------</option>' . "\n";                $op_spacing_needed = false;            }            $retval .= '                ';            $retval .= '<option' . $selected . '>' . $cfg['Functions'][$j]                . '</option>' . "\n";        }    } // end for    return $retval;} // end PMA_getFunctionsForField()/** * Checks if the current user has a specific privilege and returns true if the * user indeed has that privilege or false if (s)he doesn't. This function must * only be used for features that are available since MySQL 5, because it * relies on the INFORMATION_SCHEMA database to be present. * * Example:   PMA_currentUserHasPrivilege('CREATE ROUTINE', 'mydb'); *            // Checks if the currently logged in user has the global *            // 'CREATE ROUTINE' privilege or, if not, checks if the *            // user has this privilege on database 'mydb'. * * @param string $priv The privilege to check * @param mixed  $db   null, to only check global privileges *                     string, db name where to also check for privileges * @param mixed  $tbl  null, to only check global privileges *                     string, db name where to also check for privileges * * @return bool */function PMA_currentUserHasPrivilege($priv, $db = null, $tbl = null){    // Get the username for the current user in the format    // required to use in the information schema database.    $user = PMA_DBI_fetch_value("SELECT CURRENT_USER();");    if ($user === false) {        return false;    }    $user = explode('@', $user);    $username  = "''";    $username .= str_replace("'", "''", $user[0]);    $username .= "''@''";    $username .= str_replace("'", "''", $user[1]);    $username .= "''";    // Prepage the query    $query = "SELECT `PRIVILEGE_TYPE` FROM `INFORMATION_SCHEMA`.`%s` "           . "WHERE GRANTEE='%s' AND PRIVILEGE_TYPE='%s'";    // Check global privileges first.    if (PMA_DBI_fetch_value(        sprintf(            $query,            'USER_PRIVILEGES',            $username,            $priv        )    )    ) {        return true;    }    // If a database name was provided and user does not have the    // required global privilege, try database-wise permissions.    if ($db !== null) {        $query .= " AND TABLE_SCHEMA='%s'";        if (PMA_DBI_fetch_value(            sprintf(                $query,                'SCHEMA_PRIVILEGES',                $username,                $priv,                PMA_sqlAddSlashes($db)            )        )        ) {            return true;        }    } else {        // There was no database name provided and the user        // does not have the correct global privilege.        return false;    }    // If a table name was also provided and we still didn't    // find any valid privileges, try table-wise privileges.    if ($tbl !== null) {        $query .= " AND TABLE_NAME='%s'";        if ($retval = PMA_DBI_fetch_value(            sprintf(                $query,                'TABLE_PRIVILEGES',                $username,                $priv,                PMA_sqlAddSlashes($db),                PMA_sqlAddSlashes($tbl)            )        )        ) {            return true;        }    }    // If we reached this point, the user does not    // have even valid table-wise privileges.    return false;}/** * Returns server type for current connection * * Known types are: Drizzle, MariaDB and MySQL (default) * * @return string */function PMA_getServerType(){    $server_type = 'MySQL';    if (PMA_DRIZZLE) {        $server_type = 'Drizzle';    } else if (strpos(PMA_MYSQL_STR_VERSION, 'mariadb') !== false) {        $server_type = 'MariaDB';    } else if (stripos(PMA_MYSQL_VERSION_COMMENT, 'percona') !== false) {        $server_type = 'Percona Server';    }    return $server_type;}/** * Analyzes the limit clause and return the start and length attributes of it. * * @param string $limit_clause limit clause * * @return array Start and length attributes of the limit clause */function PMA_analyzeLimitClause($limit_clause){    $start_and_length = explode(',', str_ireplace('LIMIT', '', $limit_clause));    return array(        'start'  => trim($start_and_length[0]),        'length' => trim($start_and_length[1])    );}/** * Outputs HTML code for print button. * * @return nothing */function PMA_printButton(){    echo '<p class="print_ignore">';    echo '<input type="button" id="print" value="' . __('Print') . '" />';    echo '</p>';}?>
<?php/** * Front controller for setup script * * @package    phpMyAdmin-setup * @copyright  Copyright (c) 2008, Piotr Przybylski <piotrprz@gmail.com> * @license    http://www.gnu.org/licenses/gpl.html GNU GPL 2.0 *//** * Core libraries. */require './lib/common.inc.php';$page = filter_input(INPUT_GET, 'page');$page = preg_replace('/[^a-z]/', '', $page);if ($page === '') {    $page = 'index';}if (!file_exists("./setup/frames/$page.inc.php")) {    // it will happen only when enterung URL by hand, we don't care for these cases    die(__('Wrong GET file attribute value'));}// Handle done action info$action_done = filter_input(INPUT_GET, 'action_done');$action_done = preg_replace('/[^a-z_]/', '', $action_done);// send no-cache headersrequire './libraries/header_http.inc.php';?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>phpMyAdmin setup</title><link href="../favicon.ico" rel="icon" type="image/x-icon" /><link href="../favicon.ico" rel="shortcut icon" type="image/x-icon" /><link href="styles.css" rel="stylesheet" type="text/css" /><script type="text/javascript" src="../js/jquery/jquery-1.6.2.js"></script><script type="text/javascript" src="../js/jquery/jquery-ui-1.8.16.custom.js"></script><script type="text/javascript" src="../js/jquery/jquery.json-2.2.js"></script><script type="text/javascript" src="../js/config.js"></script><script type="text/javascript" src="scripts.js"></script></head><body><h1><span class="blue">php</span><span class="orange">MyAdmin</span>  setup</h1><div id="menu"><?phprequire './setup/frames/menu.inc.php';?></div><div id="page"><?phprequire "./setup/frames/$page.inc.php";?></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * this file is register_globals safe * * @todo    move JavaScript out of here into .js files * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$is_superuser = PMA_isSuperuser();/** * Gets a core script and starts output buffering work */require_once './libraries/sql_query_form.lib.php';/** * starts output buffering if requested and supported */require_once './libraries/ob.lib.php';PMA_outBufferPre();/** * load relation params */$cfgRelation = PMA_getRelationsParam();/** * load bookmark support */require_once './libraries/bookmark.lib.php';$querydisplay_tabs = array(    'sql',    'files',    'history',    'full',);if (isset($_REQUEST['querydisplay_tab']) && in_array($_REQUEST['querydisplay_tab'], $querydisplay_tabs)) {    $querydisplay_tab = $_REQUEST['querydisplay_tab'];} else {    $querydisplay_tab = $GLOBALS['cfg']['QueryWindowDefTab'];}/** * $_REQUEST['no_js'] is set if open new window by JavaScript failed * so this page is loaded in main frame */$no_js = PMA_ifSetOr($_REQUEST['no_js'], false);if ($no_js) {    $querydisplay_tab = 'full';    $tabs = false;} else {    $tabs = array();    $tabs['sql']['icon']   = 'b_sql.png';    $tabs['sql']['text']   = __('SQL');    $tabs['sql']['fragment']   = '#';    $tabs['sql']['attr']   = 'onclick="PMA_querywindowCommit(\'sql\');return false;"';    $tabs['sql']['active'] = (bool) ($querydisplay_tab == 'sql');    $tabs['import']['icon']   = 'b_import.png';    $tabs['import']['text']   = __('Import files');    $tabs['import']['fragment']   = '#';    $tabs['import']['attr']   = 'onclick="PMA_querywindowCommit(\'files\');return false;"';    $tabs['import']['active'] = (bool) ($querydisplay_tab == 'files');    $tabs['history']['icon']   = 'b_bookmark.png';    $tabs['history']['text']   = __('SQL history');    $tabs['history']['fragment']   = '#';    $tabs['history']['attr']   = 'onclick="PMA_querywindowCommit(\'history\');return false;"';    $tabs['history']['active'] = (bool) ($querydisplay_tab == 'history');    if ($GLOBALS['cfg']['QueryWindowDefTab'] == 'full') {        $tabs['all']['text']   = __('All');        $tabs['all']['fragment']   = '#';        $tabs['all']['attr']   = 'onclick="PMA_querywindowCommit(\'full\');return false;"';        $tabs['all']['active'] = (bool) ($querydisplay_tab == 'full');    }}$titles['Change'] = PMA_getIcon('b_edit.png', __('Change'));$url_query = PMA_generate_common_url($db, $table);if (! empty($sql_query)) {    $show_query = 1;}if ($no_js) {    // ... we redirect to appropriate query sql page    // works only full if $db and $table is also stored/grabbed from $_COOKIE    if (strlen($table)) {        include './tbl_sql.php';    } elseif (strlen($db)) {        include './db_sql.php';    } else {        include './server_sql.php';    }    exit;}/** * Defines the query to be displayed in the query textarea */if (! empty($show_query)) {    $query_to_display = $sql_query;} else {    $query_to_display = '';}$sql_query = '';/** * prepare JavaScript functionality */$js_include[] = 'common.js';$js_include[] = 'querywindow.js';if (PMA_isValid($_REQUEST['auto_commit'], 'identical', 'true')) {    $js_events[] = array(        'event'     => 'load',        'function'  => 'PMA_queryAutoCommit',    );}if (PMA_isValid($_REQUEST['init'])) {    $js_events[] = array(        'event'     => 'load',        'function'  => 'PMA_querywindowResize',    );}// always set focus to the textareaif ($querydisplay_tab == 'sql' || $querydisplay_tab == 'full') {    $js_events[] = array(        'event'     => 'load',        'function'  => 'PMA_querywindowSetFocus',    );}/** * start HTTP/HTML output */require_once './libraries/header_http.inc.php';require_once './libraries/header_meta_style.inc.php';require_once './libraries/header_scripts.inc.php';?></head><body id="bodyquerywindow"><div id="querywindowcontainer"><?phpif ($tabs) {    echo PMA_generate_html_tabs($tabs, array());    unset($tabs);}PMA_sqlQueryForm($query_to_display, $querydisplay_tab);// Hidden forms and query frame interaction stuff$_sql_history = PMA_getHistory($GLOBALS['cfg']['Server']['user']);if (! empty($_sql_history) && ($querydisplay_tab == 'history' || $querydisplay_tab == 'full')) {    $tab = $querydisplay_tab != 'full' ? 'sql' : 'full';    echo __('SQL history') . ':<br />'        . '<ul>';    foreach ($_sql_history as $query) {        echo '<li>' . "\n";        // edit link        $url_params = array(            'querydisplay_tab' => $tab,            'sql_query' => $query['sqlquery'],            'db' => $query['db'],            'table' => $query['table'],        );        echo '<a href="querywindow.php' . PMA_generate_common_url($url_params)            . '">' . $titles['Change'] . '</a>';        // execute link        $url_params['auto_commit'] = 'true';        echo '<a href="import.php' . PMA_generate_common_url($url_params) . '"'            . ' target="frame_content">';        if (! empty($query['db'])) {            echo '[';            echo htmlspecialchars(PMA_backquote($query['db']));            if (! empty($query['table'])) {                echo '.' . htmlspecialchars(PMA_backquote($query['table']));            }            echo  '] ';        }        if (strlen($query['sqlquery']) > 120) {            echo '<span title="' . htmlspecialchars($query['sqlquery']) . '">';            echo htmlspecialchars(substr($query['sqlquery'], 0, 50)) . ' [...] ';            echo htmlspecialchars(substr($query['sqlquery'], -50));            echo '</span>';        } else {            echo htmlspecialchars($query['sqlquery']);        }        echo '</a>' . "\n";        echo '</li>' . "\n";    }    unset($tab, $_sql_history, $query);    echo '</ul>' . "\n";}?><form action="querywindow.php" method="post" name="hiddenqueryform"    id="hiddenqueryform">    <?php echo PMA_generate_common_hidden_inputs('', ''); ?>    <input type="hidden" name="db" value="<?php echo htmlspecialchars($db); ?>" />    <input type="hidden" name="table" value="<?php echo htmlspecialchars($table); ?>" />    <input type="hidden" name="sql_query" value="" />    <input type="hidden" name="querydisplay_tab" value="<?php echo $querydisplay_tab; ?>" /></form></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles miscellaneous db operations: *  - move/rename *  - copy *  - changing collation *  - changing comment *  - adding tables *  - viewing PDF schemas * * @package PhpMyAdmin *//** * requirements */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';// add blobstreaming library functionsrequire_once "./libraries/blobstreaming.lib.php";// add a javascript file for jQuery functions to handle Ajax actions// also add jQueryUI$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'db_operations.js';/** * Rename/move or copy database */if (strlen($db) && (! empty($db_rename) || ! empty($db_copy))) {    if (! empty($db_rename)) {        $move = true;    } else {        $move = false;    }    if (! isset($newname) || ! strlen($newname)) {        $message = PMA_Message::error(__('The database name is empty!'));    } else {        $sql_query = ''; // in case target db exists        $_error = false;        if ($move || (isset($create_database_before_copying) && $create_database_before_copying)) {            // lower_case_table_names=1 `DB` becomes `db`            if (!PMA_DRIZZLE) {                $lower_case_table_names = PMA_DBI_fetch_value('SHOW VARIABLES LIKE "lower_case_table_names"', 0, 1);                if ($lower_case_table_names === '1') {                    $newname = PMA_strtolower($newname);                }            }            $local_query = 'CREATE DATABASE ' . PMA_backquote($newname);            if (isset($db_collation)) {                $local_query .= ' DEFAULT' . PMA_generateCharsetQueryPart($db_collation);            }            $local_query .= ';';            $sql_query = $local_query;            // save the original db name because Tracker.class.php which            // may be called under PMA_DBI_query() changes $GLOBALS['db']            // for some statements, one of which being CREATE DATABASE            $original_db = $db;            PMA_DBI_query($local_query);            $db = $original_db;            unset($original_db);            // rebuild the database list because PMA_Table::moveCopy            // checks in this list if the target db exists            $GLOBALS['pma']->databases->build();        }        // here I don't use DELIMITER because it's not part of the        // language; I have to send each statement one by one        // to avoid selecting alternatively the current and new db        // we would need to modify the CREATE definitions to qualify        // the db name        $procedure_names = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');        if ($procedure_names) {            foreach ($procedure_names as $procedure_name) {                PMA_DBI_select_db($db);                $tmp_query = PMA_DBI_get_definition($db, 'PROCEDURE', $procedure_name);                // collect for later display                $GLOBALS['sql_query'] .= "\n" . $tmp_query;                PMA_DBI_select_db($newname);                PMA_DBI_query($tmp_query);            }        }        $function_names = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');        if ($function_names) {            foreach ($function_names as $function_name) {                PMA_DBI_select_db($db);                $tmp_query = PMA_DBI_get_definition($db, 'FUNCTION', $function_name);                // collect for later display                $GLOBALS['sql_query'] .= "\n" . $tmp_query;                PMA_DBI_select_db($newname);                PMA_DBI_query($tmp_query);            }        }        // go back to current db, just in case        PMA_DBI_select_db($db);        $GLOBALS['sql_constraints_query_full_db'] = array();        $tables_full = PMA_DBI_get_tables_full($db);        $views = array();        // remove all foreign key constraints, otherwise we can get errors        include_once './libraries/export/sql.php';        foreach ($tables_full as $each_table => $tmp) {            $sql_constraints = '';            $sql_drop_foreign_keys = '';            $sql_structure = PMA_getTableDef($db, $each_table, "\n", '', false, false);            if ($move && ! empty($sql_drop_foreign_keys)) {                PMA_DBI_query($sql_drop_foreign_keys);            }            // keep the constraint we just dropped            if (! empty($sql_constraints)) {                $GLOBALS['sql_constraints_query_full_db'][] = $sql_constraints;            }        }        unset($sql_constraints, $sql_drop_foreign_keys, $sql_structure);        foreach ($tables_full as $each_table => $tmp) {            // to be able to rename a db containing views,            // first all the views are collected and a stand-in is created            // the real views are created after the tables            if (PMA_Table::isView($db, $each_table)) {                $views[] = $each_table;                // Create stand-in definition to resolve view dependencies                $sql_view_standin = PMA_getTableDefStandIn($db, $each_table, "\n");                PMA_DBI_select_db($newname);                PMA_DBI_query($sql_view_standin);                $GLOBALS['sql_query'] .= "\n" . $sql_view_standin;            }        }        foreach ($tables_full as $each_table => $tmp) {            // skip the views; we have creted stand-in definitions            if (PMA_Table::isView($db, $each_table)) {                continue;            }            $back = $sql_query;            $sql_query = '';            // value of $what for this table only            $this_what = $what;            // do not copy the data from a Merge table            // note: on the calling FORM, 'data' means 'structure and data'            if (PMA_Table::isMerge($db, $each_table)) {                if ($this_what == 'data') {                    $this_what = 'structure';                }                if ($this_what == 'dataonly') {                    $this_what = 'nocopy';                }            }            if ($this_what != 'nocopy') {                // keep the triggers from the original db+table                // (third param is empty because delimiters are only intended                //  for importing via the mysql client or our Import feature)                $triggers = PMA_DBI_get_triggers($db, $each_table, '');                if (! PMA_Table::moveCopy(                    $db, $each_table, $newname, $each_table,                    isset($this_what) ? $this_what : 'data', $move, 'db_copy')                ) {                    $_error = true;                    // $sql_query is filled by PMA_Table::moveCopy()                    $sql_query = $back . $sql_query;                    break;                }                // apply the triggers to the destination db+table                if ($triggers) {                    PMA_DBI_select_db($newname);                    foreach ($triggers as $trigger) {                        PMA_DBI_query($trigger['create']);                        $GLOBALS['sql_query'] .= "\n" . $trigger['create'] . ';';                    }                    unset($trigger);                }                unset($triggers);                // this does not apply to a rename operation                if (isset($GLOBALS['add_constraints']) && !empty($GLOBALS['sql_constraints_query'])) {                    $GLOBALS['sql_constraints_query_full_db'][] = $GLOBALS['sql_constraints_query'];                    unset($GLOBALS['sql_constraints_query']);                }            }            // $sql_query is filled by PMA_Table::moveCopy()            $sql_query = $back . $sql_query;        } // end (foreach)        unset($each_table);        // handle the views        if (! $_error) {            // temporarily force to add DROP IF EXIST to CREATE VIEW query,            // to remove stand-in VIEW that was created earlier            if (isset($GLOBALS['drop_if_exists'])) {                $temp_drop_if_exists = $GLOBALS['drop_if_exists'];            }            $GLOBALS['drop_if_exists'] = 'true';            foreach ($views as $view) {                if (! PMA_Table::moveCopy($db, $view, $newname, $view, 'structure', $move, 'db_copy')) {                    $_error = true;                    break;                }            }            unset($GLOBALS['drop_if_exists']);            if (isset($temp_drop_if_exists)) {                // restore previous value                $GLOBALS['drop_if_exists'] = $temp_drop_if_exists;                unset($temp_drop_if_exists);            }        }        unset($view, $views);        // now that all tables exist, create all the accumulated constraints        if (! $_error && count($GLOBALS['sql_constraints_query_full_db']) > 0) {            PMA_DBI_select_db($newname);            foreach ($GLOBALS['sql_constraints_query_full_db'] as $one_query) {                PMA_DBI_query($one_query);            // and prepare to display them                $GLOBALS['sql_query'] .= "\n" . $one_query;            }            unset($GLOBALS['sql_constraints_query_full_db'], $one_query);        }        if (!PMA_DRIZZLE && PMA_MYSQL_INT_VERSION >= 50100) {            // here DELIMITER is not used because it's not part of the            // language; each statement is sent one by one            // to avoid selecting alternatively the current and new db            // we would need to modify the CREATE definitions to qualify            // the db name            $event_names = PMA_DBI_fetch_result('SELECT EVENT_NAME FROM information_schema.EVENTS WHERE EVENT_SCHEMA= \'' . PMA_sqlAddSlashes($db, true) . '\';');            if ($event_names) {                foreach ($event_names as $event_name) {                    PMA_DBI_select_db($db);                    $tmp_query = PMA_DBI_get_definition($db, 'EVENT', $event_name);                    // collect for later display                    $GLOBALS['sql_query'] .= "\n" . $tmp_query;                    PMA_DBI_select_db($newname);                    PMA_DBI_query($tmp_query);                }            }        }        // go back to current db, just in case        PMA_DBI_select_db($db);        // Duplicate the bookmarks for this db (done once for each db)        if (! $_error && $db != $newname) {            $get_fields = array('user', 'label', 'query');            $where_fields = array('dbase' => $db);            $new_fields = array('dbase' => $newname);            PMA_Table::duplicateInfo('bookmarkwork', 'bookmark', $get_fields,                $where_fields, $new_fields);        }        if (! $_error && $move) {            /**             * cleanup pmadb stuff for this db             */            include_once './libraries/relation_cleanup.lib.php';            PMA_relationsCleanupDatabase($db);            // if someday the RENAME DATABASE reappears, do not DROP            $local_query = 'DROP DATABASE ' . PMA_backquote($db) . ';';            $sql_query .= "\n" . $local_query;            PMA_DBI_query($local_query);            $message = PMA_Message::success(__('Database %s has been renamed to %s'));            $message->addParam($db);            $message->addParam($newname);        } elseif (! $_error) {            $message = PMA_Message::success(__('Database %s has been copied to %s'));            $message->addParam($db);            $message->addParam($newname);        }        $reload     = true;        /* Change database to be used */        if (! $_error && $move) {            $db = $newname;        } elseif (! $_error) {            if (isset($switch_to_new) && $switch_to_new == 'true') {                $GLOBALS['PMA_Config']->setCookie('pma_switch_to_new', 'true');                $db = $newname;            } else {                $GLOBALS['PMA_Config']->setCookie('pma_switch_to_new', '');            }        }        if ($_error && ! isset($message)) {            $message = PMA_Message::error();        }    }    /**     * Database has been successfully renamed/moved.  If in an Ajax request,     * generate the output with {@link PMA_ajaxResponse} and exit     */    if ( $GLOBALS['is_ajax_request'] == true) {        $extra_data['newname'] = $newname;        $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);        PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);    };}/** * Settings for relations stuff */$cfgRelation = PMA_getRelationsParam();/** * Check if comments were updated * (must be done before displaying the menu tabs) */if (isset($_REQUEST['comment'])) {    PMA_setDbComment($db, $comment);}/** * Prepares the tables list if the user where not redirected to this script * because there is no table in the database ($is_info is true) */if (empty($is_info)) {    include './libraries/db_common.inc.php';    $url_query .= '&amp;goto=db_operations.php';    // Gets the database structure    $sub_part = '_structure';    include './libraries/db_info.inc.php';    echo "\n";    if (isset($message)) {        PMA_showMessage($message, $sql_query);        unset($message);    }}$db_collation = PMA_getDbCollation($db);$is_information_schema = PMA_is_system_schema($db);if (!$is_information_schema) {    if ($cfgRelation['commwork']) {        /**         * database comment         */        ?>    <div class="operations_half_width">    <form method="post" action="db_operations.php">    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <fieldset>        <legend>        <?php        if ($cfg['PropertiesIconic']) {            echo '<img class="icon ic_b_comment" src="themes/dot.gif" alt="" />';        }        echo __('Database comment: ');        ?>        </legend>        <input type="text" name="comment" class="textfield" size="30"            value="<?php            echo htmlspecialchars(PMA_getDBComment($db)); ?>" />    </fieldset>    <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div>        <?php    }    ?>    <div class="operations_half_width">    <?php include './libraries/display_create_table.lib.php'; ?>    </div>    <?php    /**     * rename database     */if ($db != 'mysql') {    ?>        <div class="operations_half_width">        <form id="rename_db_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : ''); ?>method="post" action="db_operations.php"        onsubmit="return emptyFormElements(this, 'newname')">        <?php    if (isset($db_collation)) {        echo '<input type="hidden" name="db_collation" value="' . $db_collation            .'" />' . "\n";    }        ?>    <input type="hidden" name="what" value="data" />    <input type="hidden" name="db_rename" value="true" />    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <fieldset>        <legend>    <?php    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Rename database to') . ':';    ?>        </legend>        <input id="new_db_name" type="text" name="newname" size="30" class="textfield" value="" />    </fieldset>    <fieldset class="tblFooters">        <input id="rename_db_input" type="submit" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div><?php} // end if// Drop link if allowed// Don't even try to drop information_schema. You won't be able to. Believe me. You won't.// Don't allow to easily drop mysql database, RFE #1327514.if (($is_superuser || $GLOBALS['cfg']['AllowUserDropDatabase'])        && !$db_is_information_schema        && (PMA_DRIZZLE || $db != 'mysql')) {?><div class="operations_half_width"><fieldset class="caution"> <legend><?phpif ($cfg['PropertiesIconic']) {    echo PMA_getImage('b_deltbl.png');}echo __('Remove database');?></legend><ul><?php    $this_sql_query = 'DROP DATABASE ' . PMA_backquote($GLOBALS['db']);    $this_url_params = array(            'sql_query' => $this_sql_query,            'back' => 'db_operations.php',            'goto' => 'main.php',            'reload' => '1',            'purge' => '1',            'message_to_show' => sprintf(__('Database %s has been dropped.'), htmlspecialchars(PMA_backquote($db))),            'db' => null,        );    ?>        <li><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'id="drop_db_anchor"' : ''); ?>>            <?php echo __('Drop the database (DROP)'); ?></a>        <?php echo PMA_showMySQLDocu('SQL-Syntax', 'DROP_DATABASE'); ?>    </li></ul></fieldset></div><?php } ?>    <?php    /**     * Copy database     */    ?>        <div class="operations_half_width clearfloat">        <form id="copy_db_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : ''); ?>method="post" action="db_operations.php"        onsubmit="return emptyFormElements(this, 'newname')">    <?php    if (isset($db_collation)) {        echo '<input type="hidden" name="db_collation" value="' . $db_collation            .'" />' . "\n";    }    echo '<input type="hidden" name="db_copy" value="true" />' . "\n";    echo PMA_generate_common_hidden_inputs($db);    ?>    <fieldset>        <legend>    <?php    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Copy database to') . ':';    $drop_clause = 'DROP TABLE / DROP VIEW';    ?>        </legend>        <input type="text" name="newname" size="30" class="textfield" value="" /><br /><?php        $choices = array(            'structure' => __('Structure only'),            'data'      => __('Structure and data'),            'dataonly'  => __('Data only'));        PMA_display_html_radio('what', $choices, 'data', true);        unset($choices);?>        <input type="checkbox" name="create_database_before_copying" value="1"            id="checkbox_create_database_before_copying"            checked="checked" />        <label for="checkbox_create_database_before_copying">            <?php echo __('CREATE DATABASE before copying'); ?></label><br />        <input type="checkbox" name="drop_if_exists" value="true"            id="checkbox_drop" />        <label for="checkbox_drop"><?php echo sprintf(__('Add %s'), $drop_clause); ?></label><br />        <input type="checkbox" name="sql_auto_increment" value="1" checked="checked"            id="checkbox_auto_increment" />        <label for="checkbox_auto_increment">            <?php echo __('Add AUTO_INCREMENT value'); ?></label><br />        <input type="checkbox" name="add_constraints" value="1"            id="checkbox_constraints" />        <label for="checkbox_constraints">            <?php echo __('Add constraints'); ?></label><br />    <?php    unset($drop_clause);    if (isset($_COOKIE) && isset($_COOKIE['pma_switch_to_new'])      && $_COOKIE['pma_switch_to_new'] == 'true') {        $pma_switch_to_new = 'true';    }    ?>        <input type="checkbox" name="switch_to_new" value="true"            id="checkbox_switch"            <?php echo ((isset($pma_switch_to_new) && $pma_switch_to_new == 'true') ? ' checked="checked"' : ''); ?>            />        <label for="checkbox_switch"><?php echo __('Switch to copied database'); ?></label>    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="submit_copy" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div>    <?php    /**     * Change database charset     */    echo '<div class="operations_half_width"><form id="change_db_charset_form" ';    if ($GLOBALS['cfg']['AjaxEnable']) {        echo ' class="ajax" ';    }    echo 'method="post" action="./db_operations.php">'       . PMA_generate_common_hidden_inputs($db, $table)       . '<fieldset>' . "\n"       . '    <legend>';    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('s_asci.png');    }    echo '    <label for="select_db_collation">' . __('Collation') . ':</label>' . "\n"       . '    </legend>' . "\n"       . PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION,            'db_collation', 'select_db_collation', $db_collation, false, 3)       . '</fieldset>'       . '<fieldset class="tblFooters">'       . '    <input type="submit" name="submitcollation"'       . ' value="' . __('Go') . '" />' . "\n"       . '</fieldset>' . "\n"       . '</form></div>' . "\n";    if ($num_tables > 0      && ! $cfgRelation['allworks'] && $cfg['PmaNoRelation_DisableWarning'] == false) {        $message = PMA_Message::notice(__('The phpMyAdmin configuration storage has been deactivated. To find out why click %shere%s.'));        $message->addParam('<a href="' . $cfg['PmaAbsoluteUri'] . 'chk_rel.php?' . $url_query . '">', false);        $message->addParam('</a>', false);        /* Show error if user has configured something, notice elsewhere */        if (!empty($cfg['Servers'][$server]['pmadb'])) {            $message->isError(true);        }        echo '<div class="operations_full_width">';        $message->display();        echo '</div>';    } // end if} // end if (!$is_information_schema)// not sure about displaying the PDF dialog in case db is information_schemaif ($cfgRelation['pdfwork'] && $num_tables > 0) { ?>    <!-- Work on PDF Pages -->    <?php    // We only show this if we find something in the new pdf_pages table    $test_query = '         SELECT *           FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages']) . '          WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'';    $test_rs    = PMA_query_as_controluser($test_query, null, PMA_DBI_QUERY_STORE);    /*     * Export Relational Schema View     */    echo '<div class="operations_full_width"><fieldset><a href="schema_edit.php?' . $url_query . '">';    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Edit or export relational schema') . '</a></fieldset></div>';} // end if/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple script to set correct charset for changelog * * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require './libraries/common.inc.php';$filename = CHANGELOG_FILE;/** * Read changelog. */// Check if the file is available, some distributions remove these.if (is_readable($filename)) {    // Test if the if is in a compressed format    if (substr($filename, -3) == '.gz') {        ob_start();        readgzfile($filename);        $changelog = ob_get_contents();        ob_end_clean();    } else {        $changelog = file_get_contents($filename);    }} else {    printf(__('The %s file is not available on this system, please visit www.phpmyadmin.net for more information.'), $filename);    exit;}/** * Whole changelog in variable. */$changelog = htmlspecialchars($changelog);$replaces = array(    '@(http://[./a-zA-Z0-9.-_-]*[/a-zA-Z0-9_])@'    => '<a href="\\1">\\1</a>',    // sourceforge users    '/([0-9]{4}-[0-9]{2}-[0-9]{2}) (.+[^ ]) +&lt;(.*)@users.sourceforge.net&gt;/i'    => '\\1 <a href="https://sourceforge.net/users/\\3/">\\2</a>',    '/thanks to ([^\(\r\n]+) \(([-\w]+)\)/i'    => 'thanks to <a href="https://sourceforge.net/users/\\2/">\\1</a>',    '/thanks to ([^\(\r\n]+) -\s+([-\w]+)/i'    => 'thanks to <a href="https://sourceforge.net/users/\\2/">\\1</a>',    // mail adresse    '/([0-9]{4}-[0-9]{2}-[0-9]{2}) (.+[^ ]) +&lt;(.*@.*)&gt;/i'    => '\\1 <a href="mailto:\\3">\\2</a>',    // linking patches    '/patch\s*#?([0-9]{6,})/i'    => '<a href="https://sourceforge.net/support/tracker.php?aid=\\1">patch #\\1</a>',    // linking RFE    '/(?:rfe|feature)\s*#?([0-9]{6,})/i'    => '<a href="https://sourceforge.net/support/tracker.php?aid=\\1">RFE #\\1</a>',    // linking files    '/(\s+)([\\/a-z_0-9\.]+\.(?:php3?|html|pl|js|sh))/i'    => '\\1<a href="https://github.com/phpmyadmin/phpmyadmin/commits/HEAD/\\2">\\2</a>',    // FAQ entries    '/FAQ ([0-9]+)\.([0-9a-z]+)/i'    => '<a href="http://localhost/phpMyAdmin/Documentation.html#faq\\1_\\2">FAQ \\1.\\2</a>',    // linking bugs    '/bug\s*#?([0-9]{6,})/i'    => '<a href="https://sourceforge.net/support/tracker.php?aid=\\1">bug #\\1</a>',    // all other 6+ digit numbers are treated as bugs    '/(?<!bug|RFE|patch) #?([0-9]{6,})/i'    => ' <a href="https://sourceforge.net/support/tracker.php?aid=\\1">bug #\\1</a>',    // CVE/CAN entries    '/((CAN|CVE)-[0-9]+-[0-9]+)/'    => '<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=\\1">\\1</a>',    // PMASAentries    '/(PMASA-[0-9]+-[0-9]+)/'    => '<a href="http://www.phpmyadmin.net/home_page/security/\\1.php">\\1</a>',    // Highlight releases (with links)    '/([0-9]+)\.([0-9]+)\.([0-9]+)\.0 (\([0-9-]+\))/'    => '<a name="\\1_\\2_\\3"></a><a href="https://github.com/phpmyadmin/phpmyadmin/commits/RELEASE_\\1_\\2_\\3">\\1.\\2.\\3.0 \\4</a>',    '/([0-9]+)\.([0-9]+)\.([0-9]+)\.([1-9][0-9]*) (\([0-9-]+\))/'    => '<a name="\\1_\\2_\\3_\\4"></a><a href="https://github.com/phpmyadmin/phpmyadmin/commits/RELEASE_\\1_\\2_\\3_\\4">\\1.\\2.\\3.\\4 \\5</a>',    // Highlight releases (not linkable)    '/(    ### )(.*)/'    => '\\1<b>\\2</b>',);header('Content-type: text/html; charset=utf-8');echo '<?xml version="1.0" encoding="utf-8"?'.'>';?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr"><head><link rel="icon" href="./favicon.ico" type="image/x-icon" /><link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" /><title>phpMyAdmin - ChangeLog</title><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /></head><body><h1>phpMyAdmin - ChangeLog</h1><?phpecho '<pre>';echo preg_replace(array_keys($replaces), $replaces, $changelog);echo '</pre>';?></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * holds the database index class * * @package PhpMyAdmin *//** * @since phpMyAdmin 3.0.0 * * @package PhpMyAdmin */class PMA_Index{    /**     * Class-wide storage container for indexes (caching, singleton)     *     * @var array     */    protected static $_registry = array();    /**     * @var string The name of the schema     */    protected $_schema = '';    /**     * @var string The name of the table     */    protected $_table = '';    /**     * @var string The name of the index     */    protected $_name = '';    /**     * Columns in index     *     * @var array     */    protected $_columns = array();    /**     * The index method used (BTREE, SPATIAL, FULLTEXT, HASH, RTREE).     *     * @var string     */    protected $_type = '';    /**     * The index choice (PRIMARY, UNIQUE, INDEX, SPATIAL, FULLTEXT)     *     * @var string     */    protected $_choice = '';    /**     * Various remarks.     *     * @var string     */    protected $_remarks = '';    /**     * Any comment provided for the index with a COMMENT attribute when the     * index was created.     *     * @var string     */    protected $_comment = '';    /**     * @var integer 0 if the index cannot contain duplicates, 1 if it can.     */    protected $_non_unique = 0;    /**     * Indicates how the key is packed. NULL if it is not.     *     * @var string     */    protected $_packed = null;    /**     * Constructor     *     * @param array $params     */    public function __construct($params = array())    {        $this->set($params);    }    static public function singleton($schema, $table, $index_name = '')    {        PMA_Index::_loadIndexes($table, $schema);        if (! isset(PMA_Index::$_registry[$schema][$table][$index_name])) {            $index = new PMA_Index;            if (strlen($index_name)) {                $index->setName($index_name);                PMA_Index::$_registry[$schema][$table][$index->getName()] = $index;            }            return $index;        } else {            return PMA_Index::$_registry[$schema][$table][$index_name];        }    }    /**     * returns an array with all indexes from the given table     *     * @param string $table     * @param string $schema     * @return  array     */    static public function getFromTable($table, $schema)    {        PMA_Index::_loadIndexes($table, $schema);        if (isset(PMA_Index::$_registry[$schema][$table])) {            return PMA_Index::$_registry[$schema][$table];        } else {            return array();        }    }    /**     * return primary if set, false otherwise     *     * @param string $table     * @param string $schema     * @return  mixed primary index or false if no one exists     */    static public function getPrimary($table, $schema)    {        PMA_Index::_loadIndexes($table, $schema);        if (isset(PMA_Index::$_registry[$schema][$table]['PRIMARY'])) {            return PMA_Index::$_registry[$schema][$table]['PRIMARY'];        } else {            return false;        }    }    /**     * Load index data for table     *     * @param string $table     * @param string $schema     * @return  boolean     */    static protected function _loadIndexes($table, $schema)    {        if (isset(PMA_Index::$_registry[$schema][$table])) {            return true;        }        $_raw_indexes = PMA_DBI_get_table_indexes($schema, $table);        foreach ($_raw_indexes as $_each_index) {            $_each_index['Schema'] = $schema;            if (! isset(PMA_Index::$_registry[$schema][$table][$_each_index['Key_name']])) {                $key = new PMA_Index($_each_index);                PMA_Index::$_registry[$schema][$table][$_each_index['Key_name']] = $key;            } else {                $key = PMA_Index::$_registry[$schema][$table][$_each_index['Key_name']];            }            $key->addColumn($_each_index);        }        return true;    }    /**     * Add column to index     *     * @param array $params column params     */    public function addColumn($params)    {        if (strlen($params['Column_name'])) {            $this->_columns[$params['Column_name']] = new PMA_Index_Column($params);        }    }    public function addColumns($columns)    {        $_columns = array();        if (isset($columns['names'])) {            // coming from form            // $columns[names][]            // $columns[sub_parts][]            foreach ($columns['names'] as $key => $name) {                $sub_part = isset($columns['sub_parts'][$key]) ? $columns['sub_parts'][$key] : '';                $_columns[] = array(                    'Column_name'   => $name,                    'Sub_part'      => $sub_part,                );            }        } else {            // coming from SHOW INDEXES            // $columns[][name]            // $columns[][sub_part]            // ...            $_columns = $columns;        }        foreach ($_columns as $column) {            $this->addColumn($column);        }    }    /**     * Returns true if $column indexed in this index     *     * @param string $column     * @return  boolean     */    public function hasColumn($column)    {        return isset($this->_columns[$column]);    }    public function set($params)    {        if (isset($params['columns'])) {            $this->addColumns($params['columns']);        }        if (isset($params['Schema'])) {            $this->_schema = $params['Schema'];        }        if (isset($params['Table'])) {            $this->_table = $params['Table'];        }        if (isset($params['Key_name'])) {            $this->_name = $params['Key_name'];        }        if (isset($params['Index_type'])) {            $this->_type = $params['Index_type'];        }        if (isset($params['Comment'])) {            $this->_remarks = $params['Comment'];        }        if (isset($params['Index_comment'])) {            $this->_comment = $params['Index_comment'];        }        if (isset($params['Non_unique'])) {            $this->_non_unique = $params['Non_unique'];        }        if (isset($params['Packed'])) {            $this->_packed = $params['Packed'];        }        if ('PRIMARY' == $this->_name) {            $this->_choice = 'PRIMARY';        } elseif ('FULLTEXT' == $this->_type) {            $this->_choice = 'FULLTEXT';        } elseif ('SPATIAL' == $this->_type) {            $this->_choice = 'SPATIAL';        } elseif ('0' == $this->_non_unique) {            $this->_choice = 'UNIQUE';        } else {            $this->_choice = 'INDEX';        }    }    public function getColumnCount()    {        return count($this->_columns);    }    public function getComment()    {        return $this->_comment;    }    public function getRemarks()    {        return $this->_remarks;    }    public function getComments()    {        $comments = $this->getRemarks();        if (strlen($comments)) {            $comments .= "\n";        }        $comments .= $this->getComment();        return $comments;    }    public function getType()    {        return $this->_type;    }    public function getChoice()    {        return $this->_choice;    }    /**     * Return a list of all index choices     *     * @return  array index choices     */    static public function getIndexChoices()    {        return array(            'PRIMARY',            'INDEX',            'UNIQUE',            'SPATIAL',            'FULLTEXT',        );    }    public function generateIndexSelector()    {        $html_options = '';        foreach (PMA_Index::getIndexChoices() as $each_index_choice) {            if ($each_index_choice === 'PRIMARY'             && $this->_choice !== 'PRIMARY'             && PMA_Index::getPrimary($this->_table, $this->_schema)) {                // skip PRIMARY if there is already one in the table                continue;            }            $html_options .= '<option value="' . $each_index_choice . '"'                 . (($this->_choice == $each_index_choice) ? ' selected="selected"' : '')                 . '>'. $each_index_choice . '</option>' . "\n";        }        return $html_options;    }    public function getPacked()    {        return $this->_packed;    }    public function isPacked($as_text = false)    {        if ($as_text) {            $r = array(                '0' => __('No'),                '1' => __('Yes'),            );        } else {            $r = array(                '0' => false,                '1' => true,            );        }        if (null === $this->_packed) {            return $r[0];        }        return $this->_packed;    }    public function getNonUnique()    {        return $this->_non_unique;    }    public function isUnique($as_text = false)    {        if ($as_text) {            $r = array(                '0' => __('Yes'),                '1' => __('No'),            );        } else {            $r = array(                '0' => true,                '1' => false,            );        }        return $r[$this->_non_unique];    }    public function getName()    {        return $this->_name;    }    public function setName($name)    {        $this->_name = (string) $name;    }    public function getColumns()    {        return $this->_columns;    }    /**     * Show index data     *     * @param string      $table          The tablename     * @param array       $indexes_info   Referenced info array     * @param array       $indexes_data   Referenced data array     * @param boolean     $print_mode     * @access  public     * @return  array       Index collection array     */    static public function getView($table, $schema, $print_mode = false)    {        $indexes = PMA_Index::getFromTable($table, $schema);        $no_indexes_class = count($indexes) > 0 ? ' hide' : '';        $no_indexes  = "<div class='no_indexes_defined$no_indexes_class'>";        $no_indexes .= PMA_Message::notice(__('No index defined!'))->getDisplay();        $no_indexes .= '</div>';        $r  = '<fieldset>';        $r .= '<legend id="index_header">' . __('Indexes');        $r .= PMA_showMySQLDocu('optimization', 'optimizing-database-structure');        $r .= '</legend>';        $r .= $no_indexes;        if (count($indexes) < 1) {            $r .= '</fieldset>';            return $r;        }        if (! $print_mode) {            $r .= PMA_Index::findDuplicates($table, $schema);        }        $r .= '<table id="table_index">';        $r .= '<thead>';        $r .= '<tr>';        if (! $print_mode) {            $r .= '<th colspan="2">' . __('Action') . '</th>';        }        $r .= '<th>' . __('Keyname') . '</th>';        $r .= '<th>' . __('Type') . '</th>';        $r .= '<th>' . __('Unique') . '</th>';        $r .= '<th>' . __('Packed') . '</th>';        $r .= '<th>' . __('Column') . '</th>';        $r .= '<th>' . __('Cardinality') . '</th>';        $r .= '<th>' . __('Collation') . '</th>';        $r .= '<th>' . __('Null') . '</th>';        $r .= '<th>' . __('Comment') . '</th>';        $r .= '</tr>';        $r .= '</thead>';        $r .= '<tbody>';        $odd_row = true;        foreach ($indexes as $index) {            $row_span = ' rowspan="' . $index->getColumnCount() . '" ';            $r .= '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">';            if (! $print_mode) {                $this_params = $GLOBALS['url_params'];                $this_params['index'] = $index->getName();                $r .= '<td class="edit_index ';                if ($GLOBALS['cfg']['AjaxEnable']) {                    $r .= 'ajax" ';                }                $r .= '" ' . $row_span . '>'                   . '    <a href="tbl_indexes.php' . PMA_generate_common_url($this_params)                   . '">' . PMA_getIcon('b_edit.png', __('Edit')) . '</a>'                   . '</td>' . "\n";                $this_params = $GLOBALS['url_params'];                if ($index->getName() == 'PRIMARY') {                    $this_params['sql_query'] = 'ALTER TABLE ' . PMA_backquote($table) . ' DROP PRIMARY KEY';                    $this_params['message_to_show'] = __('The primary key has been dropped');                    $js_msg      = PMA_jsFormat('ALTER TABLE ' . $table . ' DROP PRIMARY KEY');                } else {                    $this_params['sql_query'] = 'ALTER TABLE ' . PMA_backquote($table) . ' DROP INDEX ' . PMA_backquote($index->getName());                    $this_params['message_to_show'] = sprintf(__('Index %s has been dropped'), $index->getName());                    $js_msg      = PMA_jsFormat('ALTER TABLE ' . $table . ' DROP INDEX ' . $index->getName());                }                $r .= '<td ' . $row_span . '>';                $r .= '<input type="hidden" class="drop_primary_key_index_msg" value="' . $js_msg . '" />';                $r .= '    <a ';                if ($GLOBALS['cfg']['AjaxEnable']) {                    $r .= 'class="drop_primary_key_index_anchor" ';                }                $r .= ' href="sql.php' . PMA_generate_common_url($this_params)                   . '" >'                   . PMA_getIcon('b_drop.png', __('Drop'))  . '</a>'                   . '</td>' . "\n";            }            $r .= '<th ' . $row_span . '>' . htmlspecialchars($index->getName()) . '</th>';            $r .= '<td ' . $row_span . '>' . htmlspecialchars($index->getType()) . '</td>';            $r .= '<td ' . $row_span . '>' . $index->isUnique(true) . '</td>';            $r .= '<td ' . $row_span . '>' . $index->isPacked(true) . '</td>';            foreach ($index->getColumns() as $column) {                if ($column->getSeqInIndex() > 1) {                    $r .= '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">';                }                $r .= '<td>' . htmlspecialchars($column->getName());                if ($column->getSubPart()) {                    $r .= ' (' . $column->getSubPart() . ')';                }                $r .= '</td>';                $r .= '<td>' . htmlspecialchars($column->getCardinality()) . '</td>';                $r .= '<td>' . htmlspecialchars($column->getCollation()) . '</td>';                $r .= '<td>' . htmlspecialchars($column->getNull(true)) . '</td>';                if ($column->getSeqInIndex() == 1) {                    $r .= '<td ' . $row_span . '>'                        . htmlspecialchars($index->getComments()) . '</td>';                }                $r .= '</tr>';            } // end foreach $index['Sequences']            $odd_row = ! $odd_row;        } // end while        $r .= '</tbody>';        $r .= '</table>';        $r .= '</fieldset>';        return $r;    }    public function getCompareData()    {        $data = array(            // 'Non_unique'    => $this->_non_unique,            'Packed'        => $this->_packed,            'Index_type'    => $this->_type,        );        foreach ($this->_columns as $column) {            $data['columns'][] = $column->getCompareData();        }        return $data;    }    /**     * Function to check over array of indexes and look for common problems     *     * @access  public     * @param string      name of table     * @return  string      Output HTML     */    static public function findDuplicates($table, $schema)    {        $indexes = PMA_Index::getFromTable($table, $schema);        $output  = '';        // count($indexes) < 2:        //   there is no need to check if there less than two indexes        if (count($indexes) < 2) {            return $output;        }        // remove last index from stack and ...        while ($while_index = array_pop($indexes)) {            // ... compare with every remaining index in stack            foreach ($indexes as $each_index) {                if ($each_index->getCompareData() !== $while_index->getCompareData()) {                    continue;                }                // did not find any difference                // so it makes no sense to have this two equal indexes                $message = PMA_Message::notice(__('The indexes %1$s and %2$s seem to be equal and one of them could possibly be removed.'));                $message->addParam($each_index->getName());                $message->addParam($while_index->getName());                $output .= $message->getDisplay();                // there is no need to check any further indexes if we have already                // found that this one has a duplicate                continue 2;            }        }        return $output;    }}/** * @package PhpMyAdmin */class PMA_Index_Column{    /**     * @var string The column name     */    protected $_name = '';    /**     * @var integer The column sequence number in the index, starting with 1.     */    protected $_seq_in_index = 1;    /**     * @var string How the column is sorted in the index. A (Ascending) or NULL (Not sorted)     */    protected $_collation = null;    /**     * The number of indexed characters if the column is only partly indexed,     * NULL if the entire column is indexed.     *     * @var integer     */    protected $_sub_part = null;    /**     * Contains YES if the column may contain NULL.     * If not, the column contains NO.     *     * @var string     */    protected $_null = '';    /**     * An estimate of the number of unique values in the index. This is updated     * by running ANALYZE TABLE or myisamchk -a. Cardinality is counted based on     * statistics stored as integers, so the value is not necessarily exact even     * for small tables. The higher the cardinality, the greater the chance that     * MySQL uses the index when doing joins.     *     * @var integer     */    protected $_cardinality = null;    public function __construct($params = array())    {        $this->set($params);    }    public function set($params)    {        if (isset($params['Column_name'])) {            $this->_name = $params['Column_name'];        }        if (isset($params['Seq_in_index'])) {            $this->_seq_in_index = $params['Seq_in_index'];        }        if (isset($params['Collation'])) {            $this->_collation = $params['Collation'];        }        if (isset($params['Cardinality'])) {            $this->_cardinality = $params['Cardinality'];        }        if (isset($params['Sub_part'])) {            $this->_sub_part = $params['Sub_part'];        }        if (isset($params['Null'])) {            $this->_null = $params['Null'];        }    }    public function getName()    {        return $this->_name;    }    public function getCollation()    {        return $this->_collation;    }    public function getCardinality()    {        return $this->_cardinality;    }    public function getNull($as_text = false)    {        return $as_text            ? (!$this->_null || $this->_null == 'NO' ? __('No') : __('Yes'))            : $this->_null;    }    public function getSeqInIndex()    {        return $this->_seq_in_index;    }    public function getSubPart()    {        return $this->_sub_part;    }    public function getCompareData()    {        return array(            'Column_name'   => $this->_name,            'Seq_in_index'  => $this->_seq_in_index,            'Collation'     => $this->_collation,            'Sub_part'      => $this->_sub_part,            'Null'          => $this->_null,        );    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * main css file from theme Original * * @package PhpMyAdmin-theme * @subpackage Original */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON') && !defined('TESTSUITE')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : (        isset($_COOKIE['pma_fontsize']) ? $_COOKIE['pma_fontsize'] : '82%'));?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    padding:            0;    margin:             0 0.5em 0 0;    color:              <?php echo $GLOBALS['cfg']['MainColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['MainBackground']; ?>;}<?php if (! empty($GLOBALS['cfg']['FontFamilyFixed'])) { ?>textarea, tt, pre, code {    font-family:        <?php echo $GLOBALS['cfg']['FontFamilyFixed']; ?>;}<?php } ?>h1 {    font-size:          140%;    font-weight:        bold;}h2 {    font-size:          120%;    font-weight:        bold;}h3 {    font-weight:        bold;}a, a:link,a:visited,a:active {    text-decoration:    none;    color:              #0000FF;    cursor:             pointer;}a:hover {    text-decoration:    underline;    color:              #FF0000;}dfn {    font-style:         normal;}dfn:hover {    font-style:         normal;    cursor:             help;}th {    font-weight:        bold;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;}a img {    border:             0;}hr {    color:              <?php echo $GLOBALS['cfg']['MainColor']; ?>;    background-color:   <?php echo $GLOBALS['cfg']['MainColor']; ?>;    border:             0;    height:             1px;}form {    padding:            0;    margin:             0;    display:            inline;}textarea {    overflow:           visible;    height:             <?php echo ceil($GLOBALS['cfg']['TextareaRows'] * 1.2); ?>em;}textarea.char {    height:             <?php echo ceil($GLOBALS['cfg']['CharTextareaRows'] * 1.2); ?>em;}fieldset {    margin-top:         1em;    border:             <?php echo $GLOBALS['cfg']['MainColor']; ?> solid 1px;    padding:            0.5em;    background:         <?php echo $GLOBALS['cfg']['BgOne']; ?>;}fieldset fieldset {    margin:             0.8em;}fieldset legend {    font-weight:        bold;    color:              #444444;    background-color:   <?php echo 'OPERA' != PMA_USR_BROWSER_AGENT ? 'transparent' : $GLOBALS['cfg']['BgOne']; ?>;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}table caption,table th,table td {    padding:            0.1em 0.5em 0.1em 0.5em;    margin:             0.1em;    vertical-align:     top;}img,input,select,button {    vertical-align:     middle;}/******************************************************************************//* classes */.clearfloat {    clear: both;}.floatleft {    float: <?php echo $left; ?>;    margin-<?php echo $right; ?>: 1em;}.paddingtop {    padding-top: 1em;}div.tools {    border: 1px solid #000000;    padding: 0.2em;}div.tools,fieldset.tblFooters {    margin-top:         0;    margin-bottom:      0.5em;    /* avoid a thick line since this should be used under another fieldset */    border-top:         0;    text-align:         <?php echo $right; ?>;    float:              none;    clear:              both;}div.null_div {    height: 20px;    text-align: center;    font-style:normal;    min-width:50px;}fieldset .formelement {    float:              <?php echo $left; ?>;    margin-<?php echo $right; ?>:       0.5em;    /* IE */    white-space:        nowrap;}/* revert for Gecko */fieldset div[class=formelement] {    white-space:        normal;}button.mult_submit {    border:             none;    background-color:   transparent;}/* odd items 1,3,5,7,... */table tr.odd th,.odd {    background: <?php echo $GLOBALS['cfg']['BgOne']; ?>;}/* even items 2,4,6,8,... */table tr.even th,.even {    background: <?php echo $GLOBALS['cfg']['BgTwo']; ?>;}/* odd table rows 1,3,5,7,... */table tr.odd th,table tr.odd,table tr.even th,table tr.even {    text-align:         <?php echo $left; ?>;}<?php if ($GLOBALS['cfg']['BrowseMarkerEnable']) { ?>/* marked table rows */td.marked,table tr.marked td,table tr.marked th,table tr.marked {    background:   <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color:   <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['BrowsePointerEnable']) { ?>/* hovered items */.odd:hover,.even:hover,.hover,.structure_actions_dropdown {    background: <?php echo $GLOBALS['cfg']['BrowsePointerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowsePointerColor']; ?>;}/* hovered table rows */table tr.odd:hover th,table tr.even:hover th,table tr.hover th {    background:   <?php echo $GLOBALS['cfg']['BrowsePointerBackground']; ?>;    color:   <?php echo $GLOBALS['cfg']['BrowsePointerColor']; ?>;}<?php } ?>/** * marks table rows/cells if the db field is in a where condition */td.condition,th.condition {    border: 1px solid <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;}/** * cells with the value NULL */td.null {    font-style: italic;    text-align: <?php echo $right; ?>;}table .valueHeader {    text-align:         <?php echo $right; ?>;    white-space:        normal;}table .value {    text-align:         <?php echo $right; ?>;    white-space:        normal;}/* IE doesnt handles 'pre' right */table [class=value] {    white-space:        normal;}<?php if (! empty($GLOBALS['cfg']['FontFamilyFixed'])) { ?>.value {    font-family:        <?php echo $GLOBALS['cfg']['FontFamilyFixed']; ?>;}<?php } ?>.attention {    color:              red;    font-weight:        bold;}.allfine {    color:              green;}img.lightbulb {    cursor:             pointer;}.pdflayout {    overflow:           hidden;    clip:               inherit;    background-color:   #FFFFFF;    display:            none;    border:             1px solid #000000;    position:           relative;}.pdflayout_table {    background:         #D3DCE3;    color:              #000000;    overflow:           hidden;    clip:               inherit;    z-index:            2;    display:            inline;    visibility:         inherit;    cursor:             move;    position:           absolute;    font-size:          80%;    border:             1px dashed #000000;}/* MySQL Parser */.syntax {    font-size:          80%;}.syntax a {    text-decoration: none;    border-bottom:1px dotted black;}.syntax_comment {    padding-left:       4pt;    padding-right:      4pt;}.syntax_digit {}.syntax_digit_hex {}.syntax_digit_integer {}.syntax_digit_float {}.syntax_punct {}.syntax_alpha {}.syntax_alpha_columnType {    text-transform:     uppercase;}.syntax_alpha_columnAttrib {    text-transform:     uppercase;}.syntax_alpha_reservedWord {    text-transform:     uppercase;    font-weight:        bold;}.syntax_alpha_functionName {    text-transform:     uppercase;}.syntax_alpha_identifier {}.syntax_alpha_charset {}.syntax_alpha_variable {}.syntax_quote {    white-space:        pre;}.syntax_quote_backtick {}/* leave some space between icons and text */.icon, img.footnotemarker {    vertical-align:     middle;    margin-right:       0.3em;    margin-left:        0.3em;}img.footnotemarker {    display: none;}/* no extra space in table cells */td .icon {    margin: 0;}.selectallarrow {    margin-<?php echo $right; ?>: 0.3em;    margin-<?php echo $left; ?>: 0.6em;}/* message boxes: error, confirmation */.success h1,.notice h1,div.error h1 {    border-bottom:      2px solid;    font-weight:        bold;    text-align:         <?php echo $left; ?>;    margin:             0 0 0.2em 0;}div.success,div.notice,div.error,div.footnotes {    margin:             0.3em 0 0 0;    border:             2px solid;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 10px 50%;    padding:            0.1em 0.1em 0.1em 36px;        <?php } else { ?>    background-position: 99% 50%;    padding:            10px 5% 10px 10px;        <?php } ?>    <?php } else { ?>    padding:            0.3em;    <?php } ?>}.success {    color:              #000000;    background-color:   #f0fff0;}h1.success,div.success {    border-color:       #00FF00;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_success.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;    padding:            0.2em 0.2em 0.2em 25px;        <?php } else { ?>    background-position: 97% 50%;    padding:            0.2em 25px 0.2em 0.2em;        <?php } ?>    <?php } ?>}.success h1 {    border-color:       #00FF00;}.notice, .footnotes {    color:              #000000;    background-color:   #FFFFDD;}h1.notice,div.notice,div.footnotes {    border-color:       #FFD700;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_notice.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;    padding:            0.2em 0.2em 0.2em 25px;        <?php } else { ?>    background-position: 97% 50%;    padding:            0.2em 25px 0.2em 0.2em;        <?php } ?>    <?php } ?>}.notice h1 {    border-color:       #FFD700;}.error {    background-color:   #FFFFCC;    color:              #ff0000;}h1.error,div.error {    border-color:       #ff0000;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_error.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;    padding:            0.2em 0.2em 0.2em 25px;        <?php } else { ?>    background-position: 97% 50%;    padding:            0.2em 25px 0.2em 0.2em;        <?php } ?>    <?php } ?>}div.error h1 {    border-color:       #ff0000;}.confirmation {    background-color:   #FFFFCC;}fieldset.confirmation {    border:             0.1em solid #FF0000;}fieldset.confirmation legend {    border-left:        0.1em solid #FF0000;    border-right:       0.1em solid #FF0000;    font-weight:        bold;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_really.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;    padding:            0.2em 0.2em 0.2em 25px;        <?php } else { ?>    background-position: 97% 50%;    padding:            0.2em 25px 0.2em 0.2em;        <?php } ?>    <?php } ?>}/* end messageboxes */.tblcomment {    font-size:          70%;    font-weight:        normal;    color:              #000099;}.tblHeaders {    font-weight:        bold;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;}div.tools,.tblFooters {    font-weight:        normal;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;}.tblHeaders a:link,.tblHeaders a:active,.tblHeaders a:visited,div.tools a:link,div.tools a:visited,div.tools a:active,.tblFooters a:link,.tblFooters a:active,.tblFooters a:visited {    color:              #0000FF;}.tblHeaders a:hover,div.tools a:hover,.tblFooters a:hover {    color:              #FF0000;}/* forbidden, no privilegs */.noPrivileges {    color:              #FF0000;    font-weight:        bold;}/* disabled text */.disabled,.disabled a:link,.disabled a:active,.disabled a:visited {    color:              #666666;}.disabled a:hover {    color:              #666666;    text-decoration:    none;}tr.disabled td,td.disabled {    background-color:   #cccccc;}.nowrap {    white-space:        nowrap;}/** * login form */body.loginform h1,body.loginform a.logo {    display: block;    text-align: center;}body.loginform {    text-align: center;}body.loginform div.container {    text-align: <?php echo $left; ?>;    width: 30em;    margin: 0 auto;}form.login label {    float: <?php echo $left; ?>;    width: 10em;    font-weight: bolder;}.commented_column {    border-bottom: 1px dashed black;}.column_attribute {    font-size: 70%;}/******************************************************************************//* specific elements *//* topmenu */ul#topmenu, ul#topmenu2, ul.tabs {    font-weight:        bold;    list-style-type:    none;    margin:             0;    padding:            0;}ul#topmenu2 {    margin: 0.25em 0.5em 0;    height: 2em;    clear: both;}ul#topmenu li, ul#topmenu2 li {    float:              <?php echo $left; ?>;    margin:             0;    padding:            0;    vertical-align:     middle;}#topmenu img, #topmenu2 img {    vertical-align:     middle;    margin-<?php echo $right; ?>:       0.1em;}/* default tab styles */ul#topmenu a, ul#topmenu span {    display:            block;    margin:             2px 2px 0;    padding:            2px 2px 0;    white-space:        nowrap;}ul#topmenu ul a {    margin:             0;    padding-bottom:     2px;}ul#topmenu .submenu {    position:           relative;    display:            none;}ul#topmenu .shown {    display:            block;}ul#topmenu ul {    margin:             0;    padding:            0;    position:           absolute;    list-style-type:    none;    display:            none;    border:             1px #666 solid;    z-index:            2;}ul#topmenu ul.only {    left: 0;}ul#topmenu ul.notonly {    right: 0;}ul#topmenu li:hover ul, ul#topmenu .submenuhover ul {    display:            block;}ul#topmenu ul li {    width:              100%;}ul#topmenu2 a {    display:            block;    margin:             0.1em;    padding:            0.2em;    white-space:        nowrap;}/* disabled tabs */ul#topmenu span.tab {    color:              #666666;}fieldset.caution a {    color:              #FF0000;}fieldset.caution a:hover {    color:              #ffffff;    background-color:   #FF0000;}<?php if ($GLOBALS['cfg']['LightTabs']) { ?>/* active tab */ul#topmenu a.tabactive, ul#topmenu2 a.tabactive {    color:              black;}ul#topmenu ul {    background:         <?php echo $GLOBALS['cfg']['MainBackground']; ?>;}<?php } else { ?>#topmenu {    margin-top:         0.5em;    padding:            0.1em 0.3em 0.1em 0.3em;}ul#topmenu ul {    -moz-box-shadow:    2px 2px 3px #666;    -webkit-box-shadow: 2px 2px 3px #666;    box-shadow:         2px 2px 3px #666;}ul#topmenu > li {    border-bottom:      1pt solid black;}/* default tab styles */ul#topmenu a, ul#topmenu span {    background-color:   <?php echo $GLOBALS['cfg']['BgOne']; ?>;    border:             0 solid <?php echo $GLOBALS['cfg']['BgTwo']; ?>;    border-width:       1pt 1pt 0 1pt;    -moz-border-radius: 0.4em 0.4em 0 0;    border-radius:      0.4em 0.4em 0 0;}ul#topmenu ul a {    border-width:       1pt 0 0 0;    -moz-border-radius: 0;    border-radius:      0;}ul#topmenu ul li:first-child a {    border-width:       0;}/* enabled hover/active tabs */ul#topmenu > li > a:hover,ul#topmenu > li > .tabactive {    margin:             0;    padding:            2px 4px;    text-decoration:    none;}ul#topmenu ul a:hover,ul#topmenu ul .tabactive {    text-decoration:    none;}ul#topmenu a.tab:hover,ul#topmenu .tabactive {    background-color:   <?php echo $GLOBALS['cfg']['MainBackground']; ?>;}ul#topmenu2 a.tab:hover,ul#topmenu2 a.tabactive {    background-color:   <?php echo $GLOBALS['cfg']['BgOne']; ?>;    -moz-border-radius: 0.3em;    border-radius:      0.3em;    text-decoration:    none;}/* to be able to cancel the bottom border, use <li class="active"> */ul#topmenu > li.active {     border-bottom:      1pt solid <?php echo $GLOBALS['cfg']['MainBackground']; ?>;}/* disabled tabs */ul#topmenu span.tab,a.error {    cursor:             url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>error.ico), default;}<?php } ?>/* end topmenu *//* zoom search */div#dataDisplay input, div#dataDisplay select {    margin: 0;    margin-<?php echo $right; ?>: 0.5em;}div#dataDisplay th {    line-height: 2em;}/* Calendar */table.calendar {    width:              100%;}table.calendar td {    text-align:         center;}table.calendar td a {    display:            block;}table.calendar td a:hover {    background-color:   #CCFFCC;}table.calendar th {    background-color:   #D3DCE3;}table.calendar td.selected {    background-color:   #FFCC99;}img.calendar {    border:             none;}form.clock {    text-align:         center;}/* end Calendar *//* table stats */div#tablestatistics table {    float: <?php echo $left; ?>;    margin-top: 0.5em;    margin-bottom: 0.5em;    margin-<?php echo $right; ?>: 0.5em;}/* END table stats *//* server privileges */#tableuserrights td,#tablespecificuserrights td,#tabledatabases td {    vertical-align: middle;}/* END server privileges *//* Heading */#topmenucontainer {    background: white;    padding-right: 1em;    width: 100%;}#serverinfo {    background: white;    font-weight:        bold;    padding-bottom: 0.5em;    width: 10000px;    overflow: hidden;}#serverinfo .item {    white-space:        nowrap;    float: <?php echo $left; ?>}#span_table_comment {    font-weight:        normal;    font-style:         italic;    white-space:        nowrap;}#serverinfo img {    margin:             0 0.1em 0 0.2em;}#textSQLDUMP {    width:              95%;    height:             95%;    font-family:        "Courier New", Courier, mono;    font-size:          110%;}#TooltipContainer {    position:           absolute;    z-index:            99;    width:              20em;    height:             auto;    overflow:           visible;    visibility:         hidden;    background-color:   #ffffcc;    color:              #006600;    border:             0.1em solid #000000;    padding:            0.5em;}/* user privileges */#fieldset_add_user_login div.item {    border-bottom:      1px solid silver;    padding-bottom:     0.3em;    margin-bottom:      0.3em;}#fieldset_add_user_login label {    float:              <?php echo $left; ?>;    display:            block;    width:              10em;    max-width:          100%;    text-align:         <?php echo $right; ?>;    padding-<?php echo $right; ?>:      0.5em;}#fieldset_add_user_login span.options #select_pred_username,#fieldset_add_user_login span.options #select_pred_hostname,#fieldset_add_user_login span.options #select_pred_password {    width:              100%;    max-width:          100%;}#fieldset_add_user_login span.options {    float: <?php echo $left; ?>;    display: block;    width: 12em;    max-width: 100%;    padding-<?php echo $right; ?>: 0.5em;}#fieldset_add_user_login input {    width: 12em;    clear: <?php echo $right; ?>;    max-width: 100%;}#fieldset_add_user_login span.options input {    width: auto;}#fieldset_user_priv div.item {    float: <?php echo $left; ?>;    width: 9em;    max-width: 100%;}#fieldset_user_priv div.item div.item {    float: none;}#fieldset_user_priv div.item label {    white-space: nowrap;}#fieldset_user_priv div.item select {    width: 100%;}#fieldset_user_global_rights fieldset {    float: <?php echo $left; ?>;}/* END user privileges *//* serverstatus */.linkElem:hover {    text-decoration:    underline;    color:              #235a81;    cursor: pointer;}h3#serverstatusqueries span {    font-size:60%;    display:inline;}img.sortableIcon {    float:right;    background-repeat:no-repeat;    margin:0;}.buttonlinks {    float: <?php echo $right; ?>;    white-space: nowrap;}.jsfeature {    display: none; /* Made visible with js */}/* Also used for the variables page */fieldset#tableFilter {    margin-bottom:1em;}div#serverStatusTabs {    margin-top:1em;}caption a.top {    float: <?php echo $right; ?>;}div#serverstatusquerieschart {    float:<?php echo $left; ?>;    width:500px;    height:350px;    padding-<?php echo $left; ?>: 30px;}div#serverstatus table#serverstatusqueriesdetails {    float: <?php echo $left; ?>;}table#serverstatustraffic {    float: <?php echo $left; ?>;}table#serverstatusconnections {    float: <?php echo $left; ?>;    margin-<?php echo $left; ?>: 30px;}table#serverstatusvariables {    width: 100%;    margin-bottom: 1em;}table#serverstatusvariables .name {    width: 18em;    white-space:nowrap;}table#serverstatusvariables .value {    width: 6em;}table#serverstatusconnections {    float: <?php echo $left; ?>;    margin-<?php echo $left; ?>: 30px;}div#serverstatus table tbody td.descr a,div#serverstatus table .tblFooters a {    white-space: nowrap;}div.liveChart {    clear:both;    min-width:500px;    height:400px;    padding-bottom:80px;}#addChartDialog input[type="text"] {    margin: 0;    padding:3px;}div#chartVariableSettings {    border:1px solid #ddd;    background-color:#E6E6E6;    margin-left:10px;}table#chartGrid div.monitorChart {    background: #EBEBEB;}div#serverstatus div.tabLinks {    float:<?php echo $left; ?>;    padding-bottom: 10px;}.popupContent {    display: none;    position: absolute;    border: 1px solid #CCC;    margin:0;    padding:3px;    -moz-box-shadow:    1px 1px 6px #ddd;    -webkit-box-shadow: 2px 2px 3px #666;    box-shadow:         2px 2px 3px #666;    background-color:white;    z-index: 2;}div#logTable {    padding-top: 10px;    clear: both;}div#logTable table {    width:100%;}.smallIndent {    padding-left: 7px;}/* end serverstatus *//* server variables */a.editLink {    float: <?php echo $left; ?>;    font-family:sans-serif;}table.serverVariableEditTable {    border:0;    margin:0;    padding:0;    width:100%;}table.serverVariableEditTable td {    border:0;    margin:0;    padding:0;}table.serverVariableEditTable td:first-child {    white-space:nowrap;    vertical-align:middle;}table.serverVariableEditTable input {    width:95%;}table#serverVariables td {    height:18px;}/* end server variables *//* querywindow */body#bodyquerywindow {    margin: 0;    padding: 0;    background-image: none;    background-color: #F5F5F5;}div#querywindowcontainer {    margin: 0;    padding: 0;    width: 100%;}div#querywindowcontainer fieldset {    margin-top: 0;}/* END querywindow *//* profiling */div#profilingchart {    width:550px;    height:370px;    float:left;}/* END profiling *//* querybox */div#sqlquerycontainer {    float: <?php echo $left; ?>;    width: 69%;    /* height: 15em; */}div#tablefieldscontainer {    float: <?php echo $right; ?>;    width: 29%;    /* height: 15em; */}div#tablefieldscontainer select {    width: 100%;    /* height: 12em; */}textarea#sqlquery {    width: 100%;    /* height: 100%; */}textarea#sql_query_edit{    height:7em;    width: 95%;    display:block;}div#queryboxcontainer div#bookmarkoptions {    margin-top: 0.5em;}/* end querybox *//* main page */#maincontainer {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>logo_right.png);    background-position: <?php echo $right; ?> bottom;    background-repeat: no-repeat;}#mysqlmaininformation,#pmamaininformation {    float: <?php echo $left; ?>;    width: 49%;}#maincontainer ul {    list-style-type: disc;    vertical-align: middle;}#maincontainer li {    margin:  0.2em 0em;}/* END main page */<?php if ($GLOBALS['cfg']['MainPageIconic']) { ?>/* iconic view for ul items */li#li_create_database {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_newdb.png);}li#li_select_lang {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_lang.png);}li#li_select_mysql_collation {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_asci.png);}li#li_select_theme{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_theme.png);}li#li_user_info{    /* list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_rights.png); */}li#li_mysql_status{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_status.png);}li#li_mysql_variables{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_vars.png);}li#li_mysql_processes{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_process.png);}li#li_mysql_collations{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_asci.png);}li#li_mysql_engines{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_engine.png);}li#li_mysql_binlogs {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_tbl.png);}li#li_mysql_databases {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_db.png);}li#li_export {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_export.png);}li#li_import {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_import.png);}li#li_change_password {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_passwd.png);}li#li_log_out {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_loggoff.png);}li#li_mysql_privilegs{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_rights.png);}li#li_switch_dbstats {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_dbstatistics.png);}li#li_flush_privileges {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_reload.png);}li#li_user_preferences {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_tblops.png);}/* END iconic view for ul items */<?php } /* end if $GLOBALS['cfg']['MainPageIconic'] */ ?>#body_browse_foreigners {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    margin:             0.5em 0.5em 0 0.5em;}#bodyquerywindow {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;}#bodythemes {    width: 500px;    margin: auto;    text-align: center;}#bodythemes img {    border: 0.1em solid black;}#bodythemes a:hover img {    border: 0.1em solid red;}#fieldset_select_fields {    float: <?php echo $left; ?>;}#selflink {    clear: both;    display: block;    margin-top: 1em;    margin-bottom: 1em;    width: 100%;    border-top: 0.1em solid silver;    text-align: <?php echo $right; ?>;}#table_innodb_bufferpool_usage,#table_innodb_bufferpool_activity {    float: <?php echo $left; ?>;}#div_mysql_charset_collations table {    float: <?php echo $left; ?>;}.operations_half_width {    width: 48%;    float: <?php echo $left; ?>;}.operations_full_width {    width: 100%;    clear: both;}#qbe_div_table_list {    float: <?php echo $left; ?>;}#qbe_div_sql_query {    float: <?php echo $left; ?>;}label.desc {    width: 30em;    float: <?php echo $left; ?>;}label.desc sup {    position: absolute;}code.sql, div.sqlvalidate {    display:            block;    padding:            0.3em;    margin-top:         0;    margin-bottom:      0;    border:             <?php echo $GLOBALS['cfg']['MainColor']; ?> solid 1px;    border-top:         0;    border-bottom:      0;    max-height:         10em;    overflow:           auto;    background:         <?php echo $GLOBALS['cfg']['BgOne']; ?>;}#main_pane_left {    width:              60%;    float:              <?php echo $left; ?>;    padding-top:        1em;}#main_pane_right {    margin-<?php echo $left; ?>: 60%;    padding-top: 1em;    padding-<?php echo $left; ?>: 1em;}.group {    border-<?php echo $left; ?>: 0.3em solid <?php echo $GLOBALS['cfg']['ThBackground']; ?>;    margin-bottom:      1em;}.group h2 {    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;    padding:            0.1em 0.3em;    margin-top:         0;}.group-cnt {    padding: 0 0 0 0.5em;    display: inline-block;    width: 98%;}textarea#partitiondefinition {    height:3em;}/* for elements that should be revealed only via js */.hide {    display:            none;}#li_select_server {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_host.png);}#list_server {    list-style-image: none;}/**  *  Progress bar styles  */div.upload_progress_bar_outer{    border: 1px solid black;    width: 202px;}div.upload_progress_bar_inner{    background-color: <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    width: 0;    height: 12px;    margin: 1px;}table#serverconnection_src_remote,table#serverconnection_trg_remote,table#serverconnection_src_local,table#serverconnection_trg_local  {  float:left;}/**  *  Validation error message styles  */.invalid_value{background:#F00;}/**  *  Ajax notification styling  */ .ajax_notification {    top: 0;           /** The notification needs to be shown on the top of the page */    position: fixed;    margin-top: 0;    margin-right: auto;    margin-bottom: 0;    margin-left: auto;    padding: 3px 5px;   /** Keep a little space on the sides of the text */    width: 350px;    background-color: #FFD700;    z-index: 1100;      /** If this is not kept at a high z-index, the jQueryUI modal dialogs (z-index:1000) might hide this */    text-align: center;    display: block;    left: 0;    right: 0;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif);    background-repeat: no-repeat;    background-position: 2%; } #loading_parent {    /** Need this parent to properly center the notification division */    position: relative;    width: 100%; }/**  * Export and Import styles  */.exportoptions h3, .importoptions h3 {    border-bottom: 1px #999999 solid;    font-size: 110%;}.exportoptions ul, .importoptions ul, .format_specific_options ul {    list-style-type: none;    margin-bottom: 15px;}.exportoptions li, .importoptions li {    margin: 7px;}.exportoptions label, .importoptions label, .exportoptions p, .importoptions p {    margin: 5px;    float: none;}#csv_options label.desc, #ldi_options label.desc, #latex_options label.desc, #output label.desc{    float: left;    width: 15em;}.exportoptions, .importoptions {    margin: 20px 30px 30px 10px}.format_specific_options h3 {    margin: 10px 0 0 10px;    border: 0;}.format_specific_options {    border: 1px solid #999999;    margin: 7px 0;    padding: 3px;}p.desc {    margin: 5px;}/**  * Export styles only  */select#db_select, select#table_select {    width: 400px;}.export_sub_options {    margin: 20px 0 0 30px;}.export_sub_options h4 {    border-bottom: 1px #999999 solid;}.export_sub_options li.subgroup {    display: inline-block;    margin-top: 0;}.export_sub_options li {    margin-bottom: 0;}#quick_or_custom, #output_quick_export {    display: none;}/** * Import styles only */.importoptions #import_notification {    margin: 10px 0;    font-style: italic;}input#input_import_file {    margin: 5px;}.formelementrow {    margin: 5px 0 5px 0;}/** * GIS data editor styles */a.close_gis_editor {    float: right;}#gis_editor {    display: none;    position: fixed;    _position: absolute; /* hack for IE */    z-index: 1001;    overflow-y: auto;    overflow-x: hidden;}#gis_data {    min-height: 230px;}#gis_data_textarea {    height: 6em;}#gis_data_editor {    background: #D0DCE0;    padding: 15px;    min-height: 500px;}#gis_data_editor .choice {    display: none;}#gis_data_editor input[type="text"] {    width: 75px;}#popup_background {    display: none;    position: fixed;    _position: absolute; /* hack for IE6 */    width: 100%;    height: 100%;    top: 0;    left: 0;    background: #000;    z-index: 1000;    overflow: hidden;}/** * ENUM/SET editor styles */p.enum_notice {    margin: 5px 2px;    font-size: 80%;}fieldset.enum_editor_no_js {    width: 40em;    padding: 1em;}hr.enum_editor_no_js {    background-color: #aaa;}#enum_editor p {    font-style:italic;}#enum_editor .values, #enum_editor .add, .enum_editor_no_js #values {    width: 100%;}#enum_editor .add td {    vertical-align: middle;    width: 50%;    padding: 0 1em;}#enum_editor .values td.drop {    width: 2em;    cursor: pointer;    vertical-align: middle;}#enum_editor .values input {    margin: 0.1em 0;    padding-right: 2.5em;    width: 100%;}#enum_editor .values img {    width: 2em;    vertical-align: middle;}#enum_editor input.add_value {    margin: 1em 0;}#enum_editor_output textarea,.enum_editor_no_js input {    width: 100%;    float: right;    margin: 1em 0 0 0;}#enum_editor_no_js {    width: 100%;}.enum_editor_no_js input.submit {    margin: 1em 0;}/** * ENUM/SET editor integration for the routines editor */.enum_hint {    position: relative;}.enum_hint a {    position: absolute;    left: 81%;    bottom: 0.35em;}/** * Table structure styles */.structure_actions_dropdown {    position: absolute;    padding: 3px;    display: none;    z-index: 100;}.structure_actions_dropdown a {    display: block;}td.more_opts {    display: none;    white-space: nowrap;}/** * Indexes */#index_frm .index_info input,#index_frm .index_info select {    width: 100%;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}#index_frm .slider {    width: 10em;    margin: 0.6em;    float: <?php echo $left; ?>;}#index_frm .add_fields {    float: <?php echo $left; ?>;}#index_frm .add_fields input {    margin-<?php echo $left; ?>: 1em;}#index_frm input {    margin: 0;}#index_frm td {    vertical-align: middle;}table#index_columns {    width: 100%;}table#index_columns select {    width: 100%;}iframe.IE_hack {    z-index: 1;    position: absolute;    display: none;    border: 0;    filter: alpha(opacity=0);}/* config forms */.config-form ul.tabs {    margin:      1.1em 0.2em 0;    padding:     0 0 0.3em 0;    list-style:  none;    font-weight: bold;}.config-form ul.tabs li {    float: <?php echo $left; ?>;}.config-form ul.tabs li a {    display:          block;    margin:           0.1em 0.2em 0;    padding:          0.1em 0.4em;    white-space:      nowrap;    text-decoration:  none;    border:           1px solid <?php echo $GLOBALS['cfg']['BgTwo']; ?>;    border-bottom:    none;}.config-form ul.tabs li a:hover,.config-form ul.tabs li a:active,.config-form ul.tabs li a.active {    margin:           0;    padding:          0.1em 0.6em 0.2em;}.config-form ul.tabs li.active a {    background-color: <?php echo $GLOBALS['cfg']['BgOne']; ?>;}.config-form fieldset {    margin-top:   0;    padding:      0;    clear:        both;    /*border-color: <?php echo $GLOBALS['cfg']['BgTwo']; ?>;*/}.config-form legend {    display: none;}.config-form fieldset p {    margin:    0;    padding:   0.5em;    background: <?php echo $GLOBALS['cfg']['BgTwo']; ?>;}.config-form fieldset .errors { /* form error list */    margin:       0 -2px 1em -2px;    padding:      0.5em 1.5em;    background:   #FBEAD9;    border:       0 #C83838 solid;    border-width: 1px 0;    list-style:   none;    font-family:  sans-serif;    font-size:    small;}.config-form fieldset .inline_errors { /* field error list */    margin:     0.3em 0.3em 0.3em 0;    padding:    0;    list-style: none;    color:      #9A0000;    font-size:  small;}.config-form fieldset th {    padding:        0.3em 0.3em 0.3em 0.5em;    text-align:     left;    vertical-align: top;    width:          40%;    background:     transparent;}.config-form fieldset .doc, .config-form fieldset .disabled-notice {    margin-left: 1em;}.config-form fieldset .disabled-notice {    font-size: 80%;    text-transform: uppercase;    color: #E00;    cursor: help;}.config-form fieldset td {    padding-top:    0.3em;    padding-bottom: 0.3em;    vertical-align: top;}.config-form fieldset th small {    display:     block;    font-weight: normal;    font-family: sans-serif;    font-size:   x-small;    color:       #444;}.config-form fieldset th, .config-form fieldset td {    border-top: 1px <?php echo $GLOBALS['cfg']['BgTwo']; ?> solid;}fieldset .group-header th {    background: <?php echo $GLOBALS['cfg']['BgTwo']; ?>;}fieldset .group-header + tr th {    padding-top: 0.6em;}fieldset .group-field-1 th, fieldset .group-header-2 th {    padding-left: 1.5em;}fieldset .group-field-2 th, fieldset .group-header-3 th {    padding-left: 3em;}fieldset .group-field-3 th {    padding-left: 4.5em;}fieldset .disabled-field th,fieldset .disabled-field th small,fieldset .disabled-field td {    color: #666;    background-color: #ddd;}.config-form .lastrow {    border-top: 1px #000 solid;}.config-form .lastrow {    background: <?php echo $GLOBALS['cfg']['ThBackground']; ?>;;    padding:    0.5em;    text-align: center;}.config-form .lastrow input {    font-weight: bold;}/* form elements */.config-form span.checkbox {    padding: 2px;    display: inline-block;}.config-form .custom { /* customized field */    background: #FFC;}.config-form span.checkbox.custom {    padding:    1px;    border:     1px #EDEC90 solid;    background: #FFC;}.config-form .field-error {    border-color: #A11 !important;}.config-form input[type="text"],.config-form select,.config-form textarea {    border: 1px #A7A6AA solid;    height: auto;}.config-form input[type="text"]:focus,.config-form select:focus,.config-form textarea:focus {    border:     1px #6676FF solid;    background: #F7FBFF;}.config-form .field-comment-mark {    font-family: serif;    color: #007;    cursor: help;    padding: 0 0.2em;    font-weight: bold;    font-style: italic;}.config-form .field-comment-warning {    color: #A00;}/* error list */.config-form dd {    margin-left: 0.5em;}.config-form dd:before {    content: "\25B8  ";}.click-hide-message {    cursor: pointer;}.prefsmanage_opts {    margin-<?php echo $left; ?>: 2em;}#prefs_autoload {    margin-bottom: 0.5em;}.rte_table {    table-layout: fixed;}.rte_table td {    vertical-align:     middle;}.rte_table tr td:nth-child(1) {    font-weight:        bold;}.rte_table input, .rte_table select, .rte_table textarea {    width:              100%;    margin:             0;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}.rte_table .routine_params_table {    width:              100%;}#placeholder .button {    position: absolute;    cursor: pointer;}#placeholder div.button {    font-size: smaller;    color: #999;    background-color: #eee;    padding: 2px;}.wrapper {    float: <?php echo $left; ?>;    margin-bottom: 0.5em;}.toggleButton {    position: relative;    cursor: pointer;    font-size: 0.8em;    text-align: center;    line-height: 1.55em;    height: 1.55em;    overflow: hidden;    border-right: 0.1em solid #888;    border-left: 0.1em solid #888;}.toggleButton table,.toggleButton td,.toggleButton img {    padding: 0;    position: relative;}.toggleButton .container {    position: absolute;}.toggleButton .toggleOn {    color: white;    padding: 0 1em;}.toggleButton .toggleOff {    padding: 0 1em;}.doubleFieldset fieldset {    width: 48%;    float: <?php echo $left; ?>;    padding: 0;}.doubleFieldset fieldset.left {    margin-<?php echo $right; ?>: 1%;}.doubleFieldset fieldset.right {    margin-<?php echo $left; ?>: 1%;}.doubleFieldset legend {    margin-<?php echo $left; ?>: 0.5em;}.doubleFieldset div.wrap {    padding: 0.5em;}#table_columns input[type="text"], #table_columns select {    width:              10em;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}#placeholder {    position: relative;    border: 1px solid #aaa;    float: right;    overflow: hidden;}.placeholderDrag {    cursor: move;}#placeholder .button {    position: absolute;}#left_arrow {    left:8px;    top:26px;}#right_arrow {    left:26px;    top:26px;}#up_arrow {    left:17px;    top:8px;}#down_arrow {    left:17px;    top:44px;}#zoom_in {    left:17px;    top:67px;}#zoom_world {    left:17px;    top:85px;}#zoom_out {    left:17px;    top:103px;}.gis_table td {    vertical-align: middle;}.gis_table select {    min-width: 151px;}.gis_table .save {    font-weight: bold;    vertical-align: bottom;    height: 100px;}.gis_table .button {   text-align: <?php echo $right; ?>;}.gis_table .choice {    display:none;}.CodeMirror {  font-size: 140%;  font-family: monospace;  background: white;  border: 1px solid black;}.CodeMirror-scroll {  overflow: auto;  height:             <?php echo ceil($GLOBALS['cfg']['TextareaRows'] * 1.2); ?>em;  /* This is needed to prevent an IE[67] bug where the scrolled content     is visible outside of the scrolling box. */  position: relative;}.CodeMirror-gutter {  position: absolute; left: 0; top: 0;  z-index: 10;  background-color: #f7f7f7;  border-right: 1px solid #eee;  min-width: 2em;  height: 100%;}.CodeMirror-gutter-text {  color: #aaa;  text-align: right;  padding: .4em .2em .4em .4em;  white-space: pre !important;}.CodeMirror-lines {  padding: .4em;}.CodeMirror pre {  -moz-border-radius: 0;  -webkit-border-radius: 0;  -o-border-radius: 0;  border-radius: 0;  border-width: 0; margin: 0; padding: 0; background: transparent;  font-family: inherit;  font-size: inherit;  padding: 0; margin: 0;  white-space: pre;  word-wrap: normal;}.CodeMirror-wrap pre {  word-wrap: break-word;  white-space: pre-wrap;}.CodeMirror-wrap .CodeMirror-scroll {  overflow-x: hidden;}.CodeMirror textarea {  font-family: inherit !important;  font-size: inherit !important;}.CodeMirror-cursor {  z-index: 10;  position: absolute;  visibility: hidden;  border-left: 1px solid black !important;}.CodeMirror-focused .CodeMirror-cursor {  visibility: visible;}span.CodeMirror-selected {  background: #ccc !important;  color: HighlightText !important;}.CodeMirror-focused span.CodeMirror-selected {  background: Highlight !important;}.CodeMirror-matchingbracket {color: #0f0 !important;}.CodeMirror-nonmatchingbracket {color: #f22 !important;}<?php echo $_SESSION['PMA_Theme']->getCssCodeMirror(); ?>.colborder {    cursor: col-resize;    height: 100%;    margin-left: -5px;    position: absolute;    width: 5px;}.colborder_active {    border-right: 2px solid #a44;}.pma_table td {    position: static;}.pma_table th.draggable span, .pma_table tbody td span {    display: block;    overflow: hidden;}.cRsz {    position: absolute;}.draggable {    cursor: move;}.cCpy {    background: #000;    color: #FFF;    font-weight: bold;    margin: 0.1em;    padding: 0.3em;    position: absolute;}.cPointer {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_pointer.png);    height: 20px;    margin-left: -5px;  /* must be minus half of its width */    margin-top: -10px;    position: absolute;    width: 10px;}.normalqTip {    background: #333 !important;    opacity: 0.8 !important;    border:1px solid #000 !important;    -moz-border-radius: 0.3em !important;    -webkit-border-radius: 0.3em !important;    border-radius: 0.3em !important;    text-shadow: -1px -1px #000 !important;    font-size: 0.8em !important;    font-weight: bold !important;}.normalqTip * {    background: none !important;    color: #FFF !important;}.normalqTipContent {    padding: 1px 3px !important;}.data_full_width {    width: 100%;}.cHide {    background: #D3DCE3 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_hide.png);    color: #CCC;    cursor: pointer;    height: 16px;    margin-left: -5px;    margin-top: 0.3em;    position: absolute;    width: 16px;}.cHide:hover {    background-color: #AAA;}.cDrop {    left: 0;    position: absolute;    top: 0;}.coldrop {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_drop.png);    cursor: pointer;    height: 16px;    margin-left: 0.5em;    margin-top: 0.3em;    position: absolute;    width: 16px;}.coldrop:hover, .coldrop-hover {    background-color: #999;}.cList {    background: #EEE;    border: solid 1px #999;    position: absolute;}.cList .lDiv div {    padding: 0.2em 0.5em 0.2em 0.2em;}.cList .lDiv div:hover {    background: #DDD;    cursor: pointer;}.cList .lDiv div input {    cursor: pointer;}.showAllColBtn {    border-bottom: solid 1px #999;    border-top: solid 1px #999;    cursor: pointer;    font-size: 0.9em;    font-weight: bold;    padding: 0.35em 1em;    text-align: center;}.showAllColBtn:hover {    background: #DDD;}.navigation {    background: #E5E5E5;    border: 1px solid black;    margin: 0.8em 0;}.navigation td {    margin: 0;    padding: 0;    vertical-align: middle;    white-space: nowrap;}.navigation_separator {    color: #555;    display: inline-block;    text-align: center;    width: 1.2em;    text-shadow: 1px 0 #FFF;}.navigation input[type=submit] {    background: none;    border: 0;    margin: 0;    padding: 0.3em 0.5em;    min-width: 1.5em;    font-weight: bold;}.navigation input[type=submit]:hover, .navigation input.edit_mode_active {    background: #333;    color: white;    cursor: pointer;}.navigation select {    margin: 0 0.8em;}.cEdit {    margin: 0;    padding: 0;    position: absolute;}.cEdit input[type=text] {    background: #FFF;    height: 100%;    margin: 0;    padding: 0;}.cEdit .edit_area {    background: #FFF;    border: 1px solid #999;    min-width: 10em;    padding: 0.3em 0.5em;}.cEdit .edit_area select, .cEdit .edit_area textarea {    width: 97%;}.cEdit .cell_edit_hint {    color: #555;    font-size: 0.8em;    margin: 0.3em 0.2em;}.cEdit .edit_box {    overflow: hidden;    padding: 0;}.cEdit .edit_box_posting {    background: #FFF url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat right center;    padding-right: 1.5em;}.cEdit .edit_area_loading {    background: #FFF url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat center;    height: 10em;}.cEdit .goto_link {    background: #EEE;    color: #555;    padding: 0.2em 0.3em;}.saving_edited_data {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat left;    padding-left: 20px;}/* css for timepicker */.ui-timepicker-div .ui-widget-header { margin-bottom: 8px; }.ui-timepicker-div dl { text-align: left; }.ui-timepicker-div dl dt { height: 25px; }.ui-timepicker-div dl dd { margin: -25px 0 10px 65px; }.ui-timepicker-div td { font-size: 90%; }/* Designer */.input_tab {    background-color: #A6C7E1;    color: #000000;}#canvas {    background-color: #FFFFFF;    color: #000000;}canvas.pmd {    display: inline-block;    overflow: hidden;    text-align: left;}canvas.pmd * {    behavior: url(#default#VML);}.pmd_tab {    background-color: #FFFFFF;    color: #000000;    border-collapse: collapse;    border: 1px solid #AAAAAA;    z-index: 1;    -moz-user-select: none;}.tab_zag {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    text-align: center;    cursor: move;    padding: 1px;    font-weight: bold;}.tab_zag_2 {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header_Linked.png);    background-repeat: repeat-x;    text-align: center;    cursor: move;    padding: 1px;    font-weight: bold;}.tab_field {    background: #FFFFFF;    color: #000000;    cursor: default;}.tab_field_2 {    background-color: #CCFFCC;    color: #000000;    background-repeat: repeat-x;    cursor: default;}.tab_field_3 {    background-color: #FFE6E6; /*#DDEEFF*/    color: #000000;    cursor: default;}#pmd_hint {    white-space: nowrap;    position: absolute;    background-color: #99FF99;    color: #000000;    left: 200px;    top: 50px;    z-index: 3;    border: #00CC66 solid 1px;    display: none;}.scroll_tab {    overflow: auto;    width: 100%;    height: 500px;}.pmd_Tabs {    cursor: default;    color: #0055bb;    white-space: nowrap;    text-decoration: none;    text-indent: 3px;    font-weight: bold;    margin-left: 2px;    text-align: left;    background-color: #FFFFFF;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/left_panel_butt.png);    border: #CCCCCC solid 1px;}.pmd_Tabs2 {    cursor: default;    color: #0055bb;    background: #FFEE99;    text-indent: 3px;    font-weight: bold;    white-space: nowrap;    text-decoration: none;    border: #9999FF solid 1px;    text-align: left;}.owner {    font-weight: normal;    color: #888888;}.option_tab {    padding-left: 2px;    padding-right: 2px;    width: 5px;}.select_all {    vertical-align: top;    padding-left: 2px;    padding-right: 2px;    cursor: default;    width: 1px;    color: #000000;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;}.small_tab {    vertical-align: top;    background-color: #0064ea;    color: #FFFFFF;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/small_tab.png);    cursor: default;    text-align: center;    font-weight: bold;    padding-left: 2px;    padding-right: 2px;    width: 1px;    text-decoration: none;}.small_tab2 {    vertical-align: top;    color: #FFFFFF;    background-color: #FF9966;    cursor: default;    padding-left: 2px;    padding-right: 2px;    text-align: center;    font-weight: bold;    width: 1px;    text-decoration: none;}.small_tab_pref {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    text-align: center;    width: 1px;}.small_tab_pref2 {    vertical-align: top;    color: #FFFFFF;    background-color: #FF9966;    cursor: default;    text-align: center;    font-weight: bold;    width: 1px;    text-decoration: none;}.butt {    border: #4477aa solid 1px;    font-weight: bold;    height: 19px;    width: 70px;    background-color: #FFFFFF;    color: #000000;    vertical-align: baseline;}.L_butt2_1 {    padding: 1px;    text-decoration: none;    background-color: #ffffff;    color: #000000;    vertical-align: middle;    cursor: default;}.L_butt2_2 {    padding: 0;    border: #0099CC solid 1px;    background: #FFEE99;    text-decoration: none;    color: #000000;    cursor: default;}/* ---------------------------------------------------------------------------*/.bor {    width: 10px;    height: 10px;}.frams1 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/1.png) no-repeat right bottom;}.frams2 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/2.png) no-repeat left bottom;}.frams3 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/3.png) no-repeat left top;}.frams4 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/4.png) no-repeat right top;}.frams5 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/5.png) repeat-x center bottom;}.frams6 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/6.png) repeat-y left;}.frams7 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/7.png) repeat-x top;}.frams8 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/8.png) repeat-y right;}#osn_tab {    background-color: #FFFFFF;    color: #000000;    border: #A9A9A9 solid 1px;}.pmd_header {    background-color: #EAEEF0;    color: #000000;    text-align: center;    font-weight: bold;    margin: 0;    padding: 0;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/top_panel.png);    background-position: top;    background-repeat: repeat-x;    border-right: #999999 solid 1px;    border-left: #999999 solid 1px;    height: 28px;}.pmd_header a {    display: block;    float: left;    margin: 3px 1px 4px 1px;    height: 20px;    border: 1px dotted #ffffff;}.pmd_header .M_bord {    display: block;    float: left;    margin: 4px;    height: 20px;    width: 2px;}.pmd_header a.first {    margin-right: 1em;}.pmd_header a.last {    margin-left: 1em;}a.M_butt_Selected_down_IE,a.M_butt_Selected_down {    border: 1px solid #C0C0BB;    background-color: #99FF99;    color: #000000;}a.M_butt_Selected_down_IE:hover,a.M_butt_Selected_down:hover,a.M_butt:hover {    border: 1px solid #0099CC;    background-color: #FFEE99;    color: #000000;}#layer_menu {    z-index: 1000;    position: absolute;    left: 0;    background-color: #EAEEF0;    border: #999999 solid 1px;}#layer_action {    position: absolute;    left: 638px;    top: 52px;    z-index: 1000;    background-color: #CCFF99;    padding: 3px;    border: #009933 solid 1px;    white-space: nowrap;    font-weight: bold;}#layer_upd_relation {    position: absolute;    left: 637px;    top: 224px;    z-index: 1000;}#layer_new_relation {    position: absolute;    left: 636px;    top: 85px;    z-index: 1000;    width: 153px;}#pmd_optionse {    position: absolute;    left: 636px;    top: 85px;    z-index: 1000;    width: 153px;}#layer_menu_sizer {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/resize.png);    cursor: nw-resize;    width: 16px;    height: 16px;}.panel {    position: fixed;    top: 50px;    right: 0;    display: none;    background: #FFF;    border:1px solid #F5F5F5;    width: 350 px;    height: auto;    padding: 30px 170px 30px 30px;    color:#FFF;    z-index:99;}a.trigger{    position: fixed;    text-decoration: none;    top: 60px; right: 0;    color:#fff;    padding: 10px 40px 10px 15px;    background:#333333 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/plus.png) 85% 55% no-repeat;    border:1px solid #444444;    display: block;}a.trigger:hover{    position: fixed;    text-decoration: none;    top: 60px; right: 0;    color:#080808;    padding: 10px 40px 10px 15px;    background:#fff696 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/plus.png) 85% 55% no-repeat;    border:1px solid #999;    display: block;}a.active.trigger {    background:#222222 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/minus.png) 85% 55% no-repeat;    z-index:999;}a.active.trigger:hover {    background:#fff696 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/minus.png) 85% 55% no-repeat;    z-index:999;}h2.tiger{    background-repeat: repeat-x;    padding: 1px;    font-weight: bold;    padding: 50 20 50 20px;    margin: 0 0 5px 0;    width: 250px;    float: left;    color : #333;    text-align: center;}h2.tiger a {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    text-align: center;    text-decoration: none;    color : #333;    display: block;}h2.tiger a:hover {    color: #000;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header_Linked.png);}h2.active {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    padding: 1px;    background-position: left bottom;}.toggle_container {    margin: 0 0 5px;    padding: 0;    border-top: 1px solid #d6d6d6;    background: #FFF ;    width: 250px;    overflow: hidden;    font-size: 1.2em;    clear: both;}.toggle_container .block {    background-color: #DBE4E8;    padding:40 15 40 15px; /*--Padding of Container--*/    border:1px solid #999;    color:#000;}.history_table {    text-align: center;    background-color: #9999CC;}.history_table2 {    text-align: center;    background-color: #DBE4E8;}#filter {    display: none;    position: absolute;    top: 0%;    left: 0%;    width: 100%;    height: 100%;    background-color: #CCA;    z-index:10;    opacity:0.5;    filter: alpha(opacity=50);}#box {    display: none;    position: absolute;    top: 20%;    left: 30%;    width: 500px;    height: 220px;    padding: 48px;    margin:0;    border: 1px solid black;    background-color: white;    z-index:101;    overflow: visible;}#boxtitle {    position:absolute;    float:center;    top:0;    left:0;    width:593px;    height:20px;    padding:0;    padding-top:4px;    left-padding:8px;    margin:0;    border-bottom:4px solid #3CF;    background-color: #D0DCE0;    color:black;    font-weight:bold;    padding-left: 2px;    text-align:left;}#tblfooter {    background-color: #D3DCE3;    float: right;    padding-top:10px;    color: black;    font-weight: normal;}input.btn {    color:#333;    background-color: #D0DCE0;}body .ui-widget {    font-size: 1em;}.ui-dialog fieldset legend a {    color: #0000FF;}
