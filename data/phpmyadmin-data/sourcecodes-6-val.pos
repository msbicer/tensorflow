<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common Option Constants For DBI Functions * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Force STORE_RESULT method, ignored by classic MySQL. */define('PMA_DBI_QUERY_STORE',       1);/** * Do not read whole query. */define('PMA_DBI_QUERY_UNBUFFERED',  2);/** * Get session variable. */define('PMA_DBI_GETVAR_SESSION',    1);/** * Get global variable. */define('PMA_DBI_GETVAR_GLOBAL',     2);/** * Checks whether database extension is loaded * * @param string $extension mysql extension to check * * @return bool */function PMA_DBI_checkDbExtension($extension = 'mysql'){    if ($extension == 'drizzle' && function_exists('drizzle_create')) {        return true;    } else if (function_exists($extension . '_connect')) {        return true;    }    return false;}/** * check for requested extension */if (! PMA_DBI_checkDbExtension($GLOBALS['cfg']['Server']['extension'])) {    // if it fails try alternative extension ...    // and display an error ...    /**     * @todo add different messages for alternative extension     * and complete fail (no alternative extension too)     */    PMA_warnMissingExtension(        $GLOBALS['cfg']['Server']['extension'],        false,        PMA_showDocu('faqmysql')    );    if ($GLOBALS['cfg']['Server']['extension'] === 'mysql') {        $alternativ_extension = 'mysqli';    } else {        $alternativ_extension = 'mysql';    }    if (! PMA_DBI_checkDbExtension($alternativ_extension)) {        // if alternative fails too ...        PMA_warnMissingExtension(            $GLOBALS['cfg']['Server']['extension'],            true,            PMA_showDocu('faqmysql')        );    }    $GLOBALS['cfg']['Server']['extension'] = $alternativ_extension;    unset($alternativ_extension);}/** * Including The DBI Plugin */require_once './libraries/dbi/'    . $GLOBALS['cfg']['Server']['extension'] . '.dbi.lib.php';/** * runs a query * * @param string $query               SQL query to execte * @param mixed  $link                optional database link to use * @param int    $options             optional query options * @param bool   $cache_affected_rows whether to cache affected rows * * @return mixed */function PMA_DBI_query($query, $link = null, $options = 0, $cache_affected_rows = true){    $res = PMA_DBI_try_query($query, $link, $options, $cache_affected_rows)        or PMA_mysqlDie(PMA_DBI_getError($link), $query);    return $res;}/** * runs a query and returns the result * * @param string   $query               query to run * @param resource $link                mysql link resource * @param integer  $options             query options * @param bool     $cache_affected_rows whether to cache affected row * * @return mixed */function PMA_DBI_try_query($query, $link = null, $options = 0, $cache_affected_rows = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($GLOBALS['cfg']['DBG']['sql']) {        $time = microtime(true);    }    $r = PMA_DBI_real_query($query, $link, $options);    if ($cache_affected_rows) {        $GLOBALS['cached_affected_rows'] = PMA_DBI_affected_rows($link, $get_from_cache = false);    }    if ($GLOBALS['cfg']['DBG']['sql']) {        $time = microtime(true) - $time;        $hash = md5($query);        if (isset($_SESSION['debug']['queries'][$hash])) {            $_SESSION['debug']['queries'][$hash]['count']++;        } else {            $_SESSION['debug']['queries'][$hash] = array();            if ($r == false) {                $_SESSION['debug']['queries'][$hash]['error'] = '<b style="color:red">'.mysqli_error($link).'</b>';            }            $_SESSION['debug']['queries'][$hash]['count'] = 1;            $_SESSION['debug']['queries'][$hash]['query'] = $query;            $_SESSION['debug']['queries'][$hash]['time'] = $time;        }        $trace = array();        foreach (debug_backtrace() as $trace_step) {            $trace[] = PMA_Error::relPath($trace_step['file']) . '#'                . $trace_step['line'] . ': '                . (isset($trace_step['class']) ? $trace_step['class'] : '')                //. (isset($trace_step['object']) ? get_class($trace_step['object']) : '')                . (isset($trace_step['type']) ? $trace_step['type'] : '')                . (isset($trace_step['function']) ? $trace_step['function'] : '')                . '('                . (isset($trace_step['params']) ? implode(', ', $trace_step['params']) : '')                . ')'                ;        }        $_SESSION['debug']['queries'][$hash]['trace'][] = $trace;    }    if ($r != false && PMA_Tracker::isActive() == true ) {        PMA_Tracker::handleQuery($query);    }    return $r;}/** * converts charset of a mysql message, usually coming from mysql_error(), * into PMA charset, usally UTF-8 * uses language to charset mapping from mysql/share/errmsg.txt * and charset names to ISO charset from information_schema.CHARACTER_SETS * * @param string $message the message * * @return  string  $message */function PMA_DBI_convert_message($message){    // latin always last!    $encodings = array(        'japanese'      => 'EUC-JP', //'ujis',        'japanese-sjis' => 'Shift-JIS', //'sjis',        'korean'        => 'EUC-KR', //'euckr',        'russian'       => 'KOI8-R', //'koi8r',        'ukrainian'     => 'KOI8-U', //'koi8u',        'greek'         => 'ISO-8859-7', //'greek',        'serbian'       => 'CP1250', //'cp1250',        'estonian'      => 'ISO-8859-13', //'latin7',        'slovak'        => 'ISO-8859-2', //'latin2',        'czech'         => 'ISO-8859-2', //'latin2',        'hungarian'     => 'ISO-8859-2', //'latin2',        'polish'        => 'ISO-8859-2', //'latin2',        'romanian'      => 'ISO-8859-2', //'latin2',        'spanish'       => 'CP1252', //'latin1',        'swedish'       => 'CP1252', //'latin1',        'italian'       => 'CP1252', //'latin1',        'norwegian-ny'  => 'CP1252', //'latin1',        'norwegian'     => 'CP1252', //'latin1',        'portuguese'    => 'CP1252', //'latin1',        'danish'        => 'CP1252', //'latin1',        'dutch'         => 'CP1252', //'latin1',        'english'       => 'CP1252', //'latin1',        'french'        => 'CP1252', //'latin1',        'german'        => 'CP1252', //'latin1',    );    if ($server_language = PMA_DBI_fetch_value('SHOW VARIABLES LIKE \'language\';', 0, 1)) {        $found = array();        if (preg_match('&(?:\\\|\\/)([^\\\\\/]*)(?:\\\|\\/)$&i', $server_language, $found)) {            $server_language = $found[1];        }    }    if (! empty($server_language) && isset($encodings[$server_language])) {        if (function_exists('iconv')) {            if ((@stristr(PHP_OS, 'AIX'))                && (@strcasecmp(ICONV_IMPL, 'unknown') == 0)                && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)            ) {                include_once './libraries/iconv_wrapper.lib.php';                $message = PMA_aix_iconv_wrapper(                    $encodings[$server_language],                    'utf-8' . $GLOBALS['cfg']['IconvExtraParams'],                    $message                );            } else {                $message = iconv(                    $encodings[$server_language],                    'utf-8' . $GLOBALS['cfg']['IconvExtraParams'],                    $message                );            }        } elseif (function_exists('recode_string')) {            $message = recode_string(                $encodings[$server_language] . '..'  . 'utf-8',                $message            );        } elseif (function_exists('libiconv')) {            $message = libiconv($encodings[$server_language], 'utf-8', $message);        } elseif (function_exists('mb_convert_encoding')) {            // do not try unsupported charsets            if (! in_array($server_language, array('ukrainian', 'greek', 'serbian'))) {                $message = mb_convert_encoding(                    $message,                    'utf-8',                    $encodings[$server_language]                );            }        }    } else {        /**         * @todo lang not found, try all, what TODO ?         */    }    return $message;}/** * returns array with table names for given db * * @param string $database name of database * @param mixed  $link     mysql link resource|object * * @return  array   tables names */function PMA_DBI_get_tables($database, $link = null){    return PMA_DBI_fetch_result(        'SHOW TABLES FROM ' . PMA_backquote($database) . ';',        null,        0,        $link,        PMA_DBI_QUERY_STORE    );}/** * usort comparison callback * * @param string $a first argument to sort * @param string $b second argument to sort * * @return  integer  a value representing whether $a should be before $b in the *                   sorted array or not * * @access  private */function PMA_usort_comparison_callback($a, $b){    if ($GLOBALS['cfg']['NaturalOrder']) {        $sorter = 'strnatcasecmp';    } else {        $sorter = 'strcasecmp';    }    /* No sorting when key is not present */    if (! isset($a[$GLOBALS['callback_sort_by']]) || ! isset($b[$GLOBALS['callback_sort_by']])) {        return 0;    }    // produces f.e.:    // return -1 * strnatcasecmp($a["SCHEMA_TABLES"], $b["SCHEMA_TABLES"])    return ($GLOBALS['callback_sort_order'] == 'ASC' ? 1 : -1) * $sorter($a[$GLOBALS['callback_sort_by']], $b[$GLOBALS['callback_sort_by']]);} // end of the 'PMA_usort_comparison_callback()' function/** * returns array of all tables in given db or dbs * this function expects unquoted names: * RIGHT: my_database * WRONG: `my_database` * WRONG: my\_database * if $tbl_is_group is true, $table is used as filter for table names * if $tbl_is_group is 'comment, $table is used as filter for table comments * * <code> * PMA_DBI_get_tables_full('my_database'); * PMA_DBI_get_tables_full('my_database', 'my_table')); * PMA_DBI_get_tables_full('my_database', 'my_tables_', true)); * PMA_DBI_get_tables_full('my_database', 'my_tables_', 'comment')); * </code> * * @param string          $database     database * @param string|bool     $table        table or false * @param boolean|string  $tbl_is_group $table is a table group * @param mixed           $link         mysql link * @param integer         $limit_offset zero-based offset for the count * @param boolean|integer $limit_count  number of tables to return * @param string          $sort_by      table attribute to sort by * @param string          $sort_order   direction to sort (ASC or DESC) * * @todo    move into PMA_Table * * @return  array           list of tables in given db(s) */function PMA_DBI_get_tables_full($database, $table = false, $tbl_is_group = false, $link = null,     $limit_offset = 0, $limit_count = false, $sort_by = 'Name', $sort_order = 'ASC'){    if (true === $limit_count) {        $limit_count = $GLOBALS['cfg']['MaxTableList'];    }    // prepare and check parameters    if (! is_array($database)) {        $databases = array($database);    } else {        $databases = $database;    }    $tables = array();    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        // get table information from information_schema        if ($table) {            if (true === $tbl_is_group) {                $sql_where_table = 'AND t.`TABLE_NAME` LIKE \''                  . PMA_escape_mysql_wildcards(PMA_sqlAddSlashes($table)) . '%\'';            } elseif ('comment' === $tbl_is_group) {                $sql_where_table = 'AND t.`TABLE_COMMENT` LIKE \''                  . PMA_escape_mysql_wildcards(PMA_sqlAddSlashes($table)) . '%\'';            } else {                $sql_where_table = 'AND t.`TABLE_NAME` = \'' . PMA_sqlAddSlashes($table) . '\'';            }        } else {            $sql_where_table = '';        }        // for PMA bc:        // `SCHEMA_FIELD_NAME` AS `SHOW_TABLE_STATUS_FIELD_NAME`        //        // on non-Windows servers,        // added BINARY in the WHERE clause to force a case sensitive        // comparison (if we are looking for the db Aa we don't want        // to find the db aa)        $this_databases = array_map('PMA_sqlAddSlashes', $databases);        if (PMA_DRIZZLE) {            $engine_info = PMA_cacheGet('drizzle_engines', true);            $stats_join = "LEFT JOIN (SELECT 0 NUM_ROWS) AS stat ON false";            if (isset($engine_info['InnoDB'])                && $engine_info['InnoDB']['module_library'] == 'innobase'            ) {                $stats_join = "LEFT JOIN data_dictionary.INNODB_SYS_TABLESTATS stat ON (t.ENGINE = 'InnoDB' AND stat.NAME = (t.TABLE_SCHEMA || '/') || t.TABLE_NAME)";            }            // data_dictionary.table_cache may not contain any data for some tables, it's just a table cache            // auto_increment == 0 is cast to NULL because currently (2011.03.13 GA) Drizzle doesn't provide correct value            $sql = "                SELECT t.*,                    t.TABLE_SCHEMA        AS `Db`,                    t.TABLE_NAME          AS `Name`,                    t.TABLE_TYPE          AS `TABLE_TYPE`,                    t.ENGINE              AS `Engine`,                    t.ENGINE              AS `Type`,                    t.TABLE_VERSION       AS `Version`,-- VERSION                    t.ROW_FORMAT          AS `Row_format`,                    coalesce(tc.ROWS, stat.NUM_ROWS)                                          AS `Rows`,-- TABLE_ROWS,                    coalesce(tc.ROWS, stat.NUM_ROWS)                                          AS `TABLE_ROWS`,                    tc.AVG_ROW_LENGTH     AS `Avg_row_length`, -- AVG_ROW_LENGTH                    tc.TABLE_SIZE         AS `Data_length`, -- DATA_LENGTH                    NULL                  AS `Max_data_length`, -- MAX_DATA_LENGTH                    NULL                  AS `Index_length`, -- INDEX_LENGTH                    NULL                  AS `Data_free`, -- DATA_FREE                    nullif(t.AUTO_INCREMENT, 0)                                          AS `Auto_increment`,                    t.TABLE_CREATION_TIME AS `Create_time`, -- CREATE_TIME                    t.TABLE_UPDATE_TIME   AS `Update_time`, -- UPDATE_TIME                    NULL                  AS `Check_time`, -- CHECK_TIME                    t.TABLE_COLLATION     AS `Collation`,                    NULL                  AS `Checksum`, -- CHECKSUM                    NULL                  AS `Create_options`, -- CREATE_OPTIONS                    t.TABLE_COMMENT       AS `Comment`                FROM data_dictionary.TABLES t                    LEFT JOIN data_dictionary.TABLE_CACHE tc ON tc.TABLE_SCHEMA = t.TABLE_SCHEMA AND tc.TABLE_NAME = t.TABLE_NAME                    $stats_join                WHERE t.TABLE_SCHEMA IN ('" . implode("', '", $this_databases) . "')                    " . $sql_where_table;        } else {            $sql = '                SELECT *,                    `TABLE_SCHEMA`       AS `Db`,                    `TABLE_NAME`         AS `Name`,                    `TABLE_TYPE`         AS `TABLE_TYPE`,                    `ENGINE`             AS `Engine`,                    `ENGINE`             AS `Type`,                    `VERSION`            AS `Version`,                    `ROW_FORMAT`         AS `Row_format`,                    `TABLE_ROWS`         AS `Rows`,                    `AVG_ROW_LENGTH`     AS `Avg_row_length`,                    `DATA_LENGTH`        AS `Data_length`,                    `MAX_DATA_LENGTH`    AS `Max_data_length`,                    `INDEX_LENGTH`       AS `Index_length`,                    `DATA_FREE`          AS `Data_free`,                    `AUTO_INCREMENT`     AS `Auto_increment`,                    `CREATE_TIME`        AS `Create_time`,                    `UPDATE_TIME`        AS `Update_time`,                    `CHECK_TIME`         AS `Check_time`,                    `TABLE_COLLATION`    AS `Collation`,                    `CHECKSUM`           AS `Checksum`,                    `CREATE_OPTIONS`     AS `Create_options`,                    `TABLE_COMMENT`      AS `Comment`                FROM `information_schema`.`TABLES` t                WHERE ' . (PMA_IS_WINDOWS ? '' : 'BINARY') . ' `TABLE_SCHEMA` IN (\'' . implode("', '", $this_databases) . '\')                    ' . $sql_where_table;        }        // Sort the tables        $sql .= " ORDER BY $sort_by $sort_order";        if ($limit_count) {            $sql .= ' LIMIT ' . $limit_count . ' OFFSET ' . $limit_offset;        }        $tables = PMA_DBI_fetch_result(            $sql, array('TABLE_SCHEMA', 'TABLE_NAME'), null, $link        );        unset($sql_where_table, $sql);        if (PMA_DRIZZLE) {            // correct I_S and D_D names returned by D_D.TABLES - Drizzle generally uses lower case for them,            // but TABLES returns uppercase            foreach ((array)$database as $db) {                $db_upper = strtoupper($db);                if (!isset($tables[$db]) && isset($tables[$db_upper])) {                    $tables[$db] = $tables[$db_upper];                    unset($tables[$db_upper]);                }            }        }        if ($sort_by == 'Name' && $GLOBALS['cfg']['NaturalOrder']) {            // here, the array's first key is by schema name            foreach ($tables as $one_database_name => $one_database_tables) {                uksort($one_database_tables, 'strnatcasecmp');                if ($sort_order == 'DESC') {                    $one_database_tables = array_reverse($one_database_tables);                }                $tables[$one_database_name] = $one_database_tables;            }        }    } // end (get information from table schema)    // If permissions are wrong on even one database directory,    // information_schema does not return any table info for any database    // this is why we fall back to SHOW TABLE STATUS even for MySQL >= 50002    if (empty($tables) && !PMA_DRIZZLE) {        foreach ($databases as $each_database) {            if ($table || (true === $tbl_is_group)) {                $sql = 'SHOW TABLE STATUS FROM '                    . PMA_backquote($each_database)                    .' LIKE \'' . PMA_escape_mysql_wildcards(PMA_sqlAddSlashes($table, true)) . '%\'';            } else {                $sql = 'SHOW TABLE STATUS FROM '                    . PMA_backquote($each_database);            }            $each_tables = PMA_DBI_fetch_result($sql, 'Name', null, $link);            // Sort naturally if the config allows it and we're sorting            // the Name column.            if ($sort_by == 'Name' && $GLOBALS['cfg']['NaturalOrder']) {                uksort($each_tables, 'strnatcasecmp');                if ($sort_order == 'DESC') {                    $each_tables = array_reverse($each_tables);                }            } else {                // Prepare to sort by creating array of the selected sort                // value to pass to array_multisort                // Size = Data_length + Index_length                if ($sort_by == 'Data_length') {                    foreach ($each_tables as $table_name => $table_data) {                        ${$sort_by}[$table_name] = strtolower($table_data['Data_length'] + $table_data['Index_length']);                    }                } else {                    foreach ($each_tables as $table_name => $table_data) {                        ${$sort_by}[$table_name] = strtolower($table_data[$sort_by]);                    }                }                if ($sort_order == 'DESC') {                    array_multisort($$sort_by, SORT_DESC, $each_tables);                } else {                    array_multisort($$sort_by, SORT_ASC, $each_tables);                }                // cleanup the temporary sort array                unset($$sort_by);            }            if ($limit_count) {                $each_tables = array_slice($each_tables, $limit_offset, $limit_count);            }            foreach ($each_tables as $table_name => $each_table) {                if ('comment' === $tbl_is_group                    && 0 === strpos($each_table['Comment'], $table)                ) {                    // remove table from list                    unset($each_tables[$table_name]);                    continue;                }                if (! isset($each_tables[$table_name]['Type'])                    && isset($each_tables[$table_name]['Engine'])                ) {                    // pma BC, same parts of PMA still uses 'Type'                    $each_tables[$table_name]['Type']                        =& $each_tables[$table_name]['Engine'];                } elseif (! isset($each_tables[$table_name]['Engine'])                        && isset($each_tables[$table_name]['Type'])) {                    // old MySQL reports Type, newer MySQL reports Engine                    $each_tables[$table_name]['Engine']                        =& $each_tables[$table_name]['Type'];                }                // MySQL forward compatibility                // so pma could use this array as if every server is of version >5.0                $each_tables[$table_name]['TABLE_SCHEMA']      = $each_database;                $each_tables[$table_name]['TABLE_NAME']        =& $each_tables[$table_name]['Name'];                $each_tables[$table_name]['ENGINE']            =& $each_tables[$table_name]['Engine'];                $each_tables[$table_name]['VERSION']           =& $each_tables[$table_name]['Version'];                $each_tables[$table_name]['ROW_FORMAT']        =& $each_tables[$table_name]['Row_format'];                $each_tables[$table_name]['TABLE_ROWS']        =& $each_tables[$table_name]['Rows'];                $each_tables[$table_name]['AVG_ROW_LENGTH']    =& $each_tables[$table_name]['Avg_row_length'];                $each_tables[$table_name]['DATA_LENGTH']       =& $each_tables[$table_name]['Data_length'];                $each_tables[$table_name]['MAX_DATA_LENGTH']   =& $each_tables[$table_name]['Max_data_length'];                $each_tables[$table_name]['INDEX_LENGTH']      =& $each_tables[$table_name]['Index_length'];                $each_tables[$table_name]['DATA_FREE']         =& $each_tables[$table_name]['Data_free'];                $each_tables[$table_name]['AUTO_INCREMENT']    =& $each_tables[$table_name]['Auto_increment'];                $each_tables[$table_name]['CREATE_TIME']       =& $each_tables[$table_name]['Create_time'];                $each_tables[$table_name]['UPDATE_TIME']       =& $each_tables[$table_name]['Update_time'];                $each_tables[$table_name]['CHECK_TIME']        =& $each_tables[$table_name]['Check_time'];                $each_tables[$table_name]['TABLE_COLLATION']   =& $each_tables[$table_name]['Collation'];                $each_tables[$table_name]['CHECKSUM']          =& $each_tables[$table_name]['Checksum'];                $each_tables[$table_name]['CREATE_OPTIONS']    =& $each_tables[$table_name]['Create_options'];                $each_tables[$table_name]['TABLE_COMMENT']     =& $each_tables[$table_name]['Comment'];                if (strtoupper($each_tables[$table_name]['Comment']) === 'VIEW'                    && $each_tables[$table_name]['Engine'] == null                ) {                    $each_tables[$table_name]['TABLE_TYPE'] = 'VIEW';                } else {                    /**                     * @todo difference between 'TEMPORARY' and 'BASE TABLE' but how to detect?                     */                    $each_tables[$table_name]['TABLE_TYPE'] = 'BASE TABLE';                }            }            $tables[$each_database] = $each_tables;        }    }    // cache table data    // so PMA_Table does not require to issue SHOW TABLE STATUS again    // Note: I don't see why we would need array_merge_recursive() here,    // as it creates double entries for the same table (for example a double    // entry for Comment when changing the storage engine in Operations)    // Note 2: Instead of array_merge(), simply use the + operator because    //  array_merge() renumbers numeric keys starting with 0, therefore    //  we would lose a db name thats consists only of numbers    foreach ($tables as $one_database => $its_tables) {        if (isset(PMA_Table::$cache[$one_database])) {            PMA_Table::$cache[$one_database] = PMA_Table::$cache[$one_database] + $tables[$one_database];        } else {            PMA_Table::$cache[$one_database] = $tables[$one_database];        }    }    unset($one_database, $its_tables);    if (! is_array($database)) {        if (isset($tables[$database])) {            return $tables[$database];        } elseif (isset($tables[strtolower($database)])) {            // on windows with lower_case_table_names = 1            // MySQL returns            // with SHOW DATABASES or information_schema.SCHEMATA: `Test`            // but information_schema.TABLES gives `test`            // bug #1436171            // http://sf.net/support/tracker.php?aid=1436171            return $tables[strtolower($database)];        } else {            // one database but inexact letter case match            // as Drizzle is always case insensitive, we can safely return the only result            if (PMA_DRIZZLE && count($tables) == 1) {                $keys = array_keys($tables);                if (strlen(array_pop($keys)) == strlen($database)) {                    return array_pop($tables);                }            }            return $tables;        }    } else {        return $tables;    }}/** * returns array with databases containing extended infos about them * * @param string   $database     database * @param boolean  $force_stats  retrieve stats also for MySQL < 5 * @param resource $link         mysql link * @param string   $sort_by      column to order by * @param string   $sort_order   ASC or DESC * @param integer  $limit_offset starting offset for LIMIT * @param bool|int $limit_count  row count for LIMIT or true for $GLOBALS['cfg']['MaxDbList'] * * @todo    move into PMA_List_Database? * * @return array $databases */function PMA_DBI_get_databases_full($database = null, $force_stats = false,    $link = null, $sort_by = 'SCHEMA_NAME', $sort_order = 'ASC',    $limit_offset = 0, $limit_count = false){    $sort_order = strtoupper($sort_order);    if (true === $limit_count) {        $limit_count = $GLOBALS['cfg']['MaxDbList'];    }    // initialize to avoid errors when there are no databases    $databases = array();    $apply_limit_and_order_manual = true;    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        /**         * if $GLOBALS['cfg']['NaturalOrder'] is enabled, we cannot use LIMIT         * cause MySQL does not support natural ordering, we have to do it afterward         */        $limit = '';        if (!$GLOBALS['cfg']['NaturalOrder']) {            if ($limit_count) {                $limit = ' LIMIT ' . $limit_count . ' OFFSET ' . $limit_offset;            }            $apply_limit_and_order_manual = false;        }        // get table information from information_schema        if ($database) {            $sql_where_schema = 'WHERE `SCHEMA_NAME` LIKE \''                . PMA_sqlAddSlashes($database) . '\'';        } else {            $sql_where_schema = '';        }        if (PMA_DRIZZLE) {            // data_dictionary.table_cache may not contain any data for some            // tables, it's just a table cache            $sql = 'SELECT                s.SCHEMA_NAME,                s.DEFAULT_COLLATION_NAME';            if ($force_stats) {                // no TABLE_CACHE data, stable results are better than                // constantly changing                $sql .= ',                    COUNT(t.TABLE_SCHEMA) AS SCHEMA_TABLES,                    SUM(stat.NUM_ROWS)    AS SCHEMA_TABLE_ROWS';            }            $sql .= '                   FROM data_dictionary.SCHEMAS s';            if ($force_stats) {                $engine_info = PMA_cacheGet('drizzle_engines', true);                $stats_join = "LEFT JOIN (SELECT 0 NUM_ROWS) AS stat ON false";                if (isset($engine_info['InnoDB']) && $engine_info['InnoDB']['module_library'] == 'innobase') {                    $stats_join = "LEFT JOIN data_dictionary.INNODB_SYS_TABLESTATS stat ON (t.ENGINE = 'InnoDB' AND stat.NAME = (t.TABLE_SCHEMA || '/') || t.TABLE_NAME)";                }                $sql .= "                    LEFT JOIN data_dictionary.TABLES t                        ON t.TABLE_SCHEMA = s.SCHEMA_NAME                    $stats_join";            }            $sql .= $sql_where_schema . '                    GROUP BY s.SCHEMA_NAME                    ORDER BY ' . PMA_backquote($sort_by) . ' ' . $sort_order                . $limit;        } else {            $sql = 'SELECT                s.SCHEMA_NAME,                s.DEFAULT_COLLATION_NAME';            if ($force_stats) {                $sql .= ',                    COUNT(t.TABLE_SCHEMA)  AS SCHEMA_TABLES,                    SUM(t.TABLE_ROWS)      AS SCHEMA_TABLE_ROWS,                    SUM(t.DATA_LENGTH)     AS SCHEMA_DATA_LENGTH,                    SUM(t.MAX_DATA_LENGTH) AS SCHEMA_MAX_DATA_LENGTH,                    SUM(t.INDEX_LENGTH)    AS SCHEMA_INDEX_LENGTH,                    SUM(t.DATA_LENGTH + t.INDEX_LENGTH)                                           AS SCHEMA_LENGTH,                    SUM(t.DATA_FREE)       AS SCHEMA_DATA_FREE';            }            $sql .= '                   FROM `information_schema`.SCHEMATA s';            if ($force_stats) {                $sql .= '                    LEFT JOIN `information_schema`.TABLES t                        ON BINARY t.TABLE_SCHEMA = BINARY s.SCHEMA_NAME';            }            $sql .= $sql_where_schema . '                    GROUP BY BINARY s.SCHEMA_NAME                    ORDER BY BINARY ' . PMA_backquote($sort_by) . ' ' . $sort_order                . $limit;        }        $databases = PMA_DBI_fetch_result($sql, 'SCHEMA_NAME', null, $link);        $mysql_error = PMA_DBI_getError($link);        if (! count($databases) && $GLOBALS['errno']) {            PMA_mysqlDie($mysql_error, $sql);        }        // display only databases also in official database list        // f.e. to apply hide_db and only_db        $drops = array_diff(array_keys($databases), (array) $GLOBALS['pma']->databases);        if (count($drops)) {            foreach ($drops as $drop) {                unset($databases[$drop]);            }            unset($drop);        }        unset($sql_where_schema, $sql, $drops);    } else {        foreach ($GLOBALS['pma']->databases as $database_name) {            // MySQL forward compatibility            // so pma could use this array as if every server is of version >5.0            $databases[$database_name]['SCHEMA_NAME']      = $database_name;            if ($force_stats) {                include_once './libraries/mysql_charsets.lib.php';                $databases[$database_name]['DEFAULT_COLLATION_NAME']                    = PMA_getDbCollation($database_name);                // get additional info about tables                $databases[$database_name]['SCHEMA_TABLES']          = 0;                $databases[$database_name]['SCHEMA_TABLE_ROWS']      = 0;                $databases[$database_name]['SCHEMA_DATA_LENGTH']     = 0;                $databases[$database_name]['SCHEMA_MAX_DATA_LENGTH'] = 0;                $databases[$database_name]['SCHEMA_INDEX_LENGTH']    = 0;                $databases[$database_name]['SCHEMA_LENGTH']          = 0;                $databases[$database_name]['SCHEMA_DATA_FREE']       = 0;                $res = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($database_name) . ';');                while ($row = PMA_DBI_fetch_assoc($res)) {                    $databases[$database_name]['SCHEMA_TABLES']++;                    $databases[$database_name]['SCHEMA_TABLE_ROWS']                        += $row['Rows'];                    $databases[$database_name]['SCHEMA_DATA_LENGTH']                        += $row['Data_length'];                    $databases[$database_name]['SCHEMA_MAX_DATA_LENGTH']                        += $row['Max_data_length'];                    $databases[$database_name]['SCHEMA_INDEX_LENGTH']                        += $row['Index_length'];                    // for InnoDB, this does not contain the number of                    // overhead bytes but the total free space                    if ('InnoDB' != $row['Engine']) {                        $databases[$database_name]['SCHEMA_DATA_FREE']                            += $row['Data_free'];                    }                    $databases[$database_name]['SCHEMA_LENGTH']                        += $row['Data_length'] + $row['Index_length'];                }                PMA_DBI_free_result($res);                unset($res);            }        }    }    /**     * apply limit and order manually now     * (caused by older MySQL < 5 or $GLOBALS['cfg']['NaturalOrder'])     */    if ($apply_limit_and_order_manual) {        $GLOBALS['callback_sort_order'] = $sort_order;        $GLOBALS['callback_sort_by'] = $sort_by;        usort($databases, 'PMA_usort_comparison_callback');        unset($GLOBALS['callback_sort_order'], $GLOBALS['callback_sort_by']);        /**         * now apply limit         */        if ($limit_count) {            $databases = array_slice($databases, $limit_offset, $limit_count);        }    }    return $databases;}/** * returns detailed array with all columns for given table in database, * or all tables/databases * * @param string $database name of database * @param string $table    name of table to retrieve columns from * @param string $column   name of specific column * @param mixed  $link     mysql link resource * * @return array */function PMA_DBI_get_columns_full($database = null, $table = null,    $column = null, $link = null){    $columns = array();    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        $sql_wheres = array();        $array_keys = array();        // get columns information from information_schema        if (null !== $database) {            $sql_wheres[] = '`TABLE_SCHEMA` = \'' . PMA_sqlAddSlashes($database) . '\' ';        } else {            $array_keys[] = 'TABLE_SCHEMA';        }        if (null !== $table) {            $sql_wheres[] = '`TABLE_NAME` = \'' . PMA_sqlAddSlashes($table) . '\' ';        } else {            $array_keys[] = 'TABLE_NAME';        }        if (null !== $column) {            $sql_wheres[] = '`COLUMN_NAME` = \'' . PMA_sqlAddSlashes($column) . '\' ';        } else {            $array_keys[] = 'COLUMN_NAME';        }        // for PMA bc:        // `[SCHEMA_FIELD_NAME]` AS `[SHOW_FULL_COLUMNS_FIELD_NAME]`        if (PMA_DRIZZLE) {            $sql = "SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME,                column_name        AS `Field`,                (CASE                    WHEN character_maximum_length > 0                        THEN concat(lower(data_type), '(', character_maximum_length, ')')                    WHEN numeric_precision > 0 OR numeric_scale > 0                        THEN concat(lower(data_type), '(', numeric_precision, ',', numeric_scale, ')')                    WHEN enum_values IS NOT NULL                        THEN concat(lower(data_type), '(', enum_values, ')')                    ELSE lower(data_type) END)                                   AS `Type`,                collation_name     AS `Collation`,                (CASE is_nullable                    WHEN 1 THEN 'YES'                    ELSE 'NO' END) AS `Null`,                (CASE                    WHEN is_used_in_primary THEN 'PRI'                    ELSE '' END)   AS `Key`,                column_default     AS `Default`,                (CASE                    WHEN is_auto_increment THEN 'auto_increment'                    WHEN column_default_update THEN 'on update ' || column_default_update                    ELSE '' END)   AS `Extra`,                NULL               AS `Privileges`,                column_comment     AS `Comment`            FROM data_dictionary.columns";        } else {            $sql = '                 SELECT *,                        `COLUMN_NAME`       AS `Field`,                        `COLUMN_TYPE`       AS `Type`,                        `COLLATION_NAME`    AS `Collation`,                        `IS_NULLABLE`       AS `Null`,                        `COLUMN_KEY`        AS `Key`,                        `COLUMN_DEFAULT`    AS `Default`,                        `EXTRA`             AS `Extra`,                        `PRIVILEGES`        AS `Privileges`,                        `COLUMN_COMMENT`    AS `Comment`                   FROM `information_schema`.`COLUMNS`';        }        if (count($sql_wheres)) {            $sql .= "\n" . ' WHERE ' . implode(' AND ', $sql_wheres);        }        $columns = PMA_DBI_fetch_result($sql, $array_keys, null, $link);        unset($sql_wheres, $sql);    } else {        if (null === $database) {            foreach ($GLOBALS['pma']->databases as $database) {                $columns[$database] = PMA_DBI_get_columns_full(                    $database, null, null, $link                );            }            return $columns;        } elseif (null === $table) {            $tables = PMA_DBI_get_tables($database);            foreach ($tables as $table) {                $columns[$table] = PMA_DBI_get_columns_full(                    $database, $table, null, $link                );            }            return $columns;        }        $sql = 'SHOW FULL COLUMNS FROM '            . PMA_backquote($database) . '.' . PMA_backquote($table);        if (null !== $column) {            $sql .= " LIKE '" . PMA_sqlAddSlashes($column, true) . "'";        }        $columns = PMA_DBI_fetch_result($sql, 'Field', null, $link);    }    $ordinal_position = 1;    foreach ($columns as $column_name => $each_column) {        // MySQL forward compatibility        // so pma could use this array as if every server is of version >5.0        $columns[$column_name]['COLUMN_NAME'] =& $columns[$column_name]['Field'];        $columns[$column_name]['COLUMN_TYPE'] =& $columns[$column_name]['Type'];        $columns[$column_name]['COLLATION_NAME'] =& $columns[$column_name]['Collation'];        $columns[$column_name]['IS_NULLABLE'] =& $columns[$column_name]['Null'];        $columns[$column_name]['COLUMN_KEY'] =& $columns[$column_name]['Key'];        $columns[$column_name]['COLUMN_DEFAULT'] =& $columns[$column_name]['Default'];        $columns[$column_name]['EXTRA'] =& $columns[$column_name]['Extra'];        $columns[$column_name]['PRIVILEGES'] =& $columns[$column_name]['Privileges'];        $columns[$column_name]['COLUMN_COMMENT'] =& $columns[$column_name]['Comment'];        $columns[$column_name]['TABLE_CATALOG'] = null;        $columns[$column_name]['TABLE_SCHEMA'] = $database;        $columns[$column_name]['TABLE_NAME'] = $table;        $columns[$column_name]['ORDINAL_POSITION'] = $ordinal_position;        $columns[$column_name]['DATA_TYPE']            = substr(                $columns[$column_name]['COLUMN_TYPE'],                0,                strpos($columns[$column_name]['COLUMN_TYPE'], '(')            );        /**         * @todo guess CHARACTER_MAXIMUM_LENGTH from COLUMN_TYPE         */        $columns[$column_name]['CHARACTER_MAXIMUM_LENGTH'] = null;        /**         * @todo guess CHARACTER_OCTET_LENGTH from CHARACTER_MAXIMUM_LENGTH         */        $columns[$column_name]['CHARACTER_OCTET_LENGTH'] = null;        $columns[$column_name]['NUMERIC_PRECISION'] = null;        $columns[$column_name]['NUMERIC_SCALE'] = null;        $columns[$column_name]['CHARACTER_SET_NAME']            = substr(                $columns[$column_name]['COLLATION_NAME'],                0,                strpos($columns[$column_name]['COLLATION_NAME'], '_')            );        $ordinal_position++;    }    if (null !== $column) {        reset($columns);        $columns = current($columns);    }    return $columns;}/** * Returns SQL query for fetching columns for a table * * The 'Key' column is not calculated properly, use PMA_DBI_get_columns() to get * correct values. * * @param string  $database name of database * @param string  $table    name of table to retrieve columns from * @param string  $column   name of column, null to show all columns * @param boolean $full     whether to return full info or only column names * * @see PMA_DBI_get_columns() * * @return  string */function PMA_DBI_get_columns_sql($database, $table, $column = null, $full = false){    if (PMA_DRIZZLE) {        // `Key` column:        // * used in primary key => PRI        // * unique one-column => UNI        // * indexed, one-column or first in multi-column => MUL        // Promotion of UNI to PRI in case no promary index exists is done after query is executed        $sql = "SELECT                column_name        AS `Field`,                (CASE                    WHEN character_maximum_length > 0                        THEN concat(lower(data_type), '(', character_maximum_length, ')')                    WHEN numeric_precision > 0 OR numeric_scale > 0                        THEN concat(lower(data_type), '(', numeric_precision, ',', numeric_scale, ')')                    WHEN enum_values IS NOT NULL                        THEN concat(lower(data_type), '(', enum_values, ')')                    ELSE lower(data_type) END)                                   AS `Type`,                " . ($full ? "                collation_name     AS `Collation`," : '') . "                (CASE is_nullable                    WHEN 1 THEN 'YES'                    ELSE 'NO' END) AS `Null`,                (CASE                    WHEN is_used_in_primary THEN 'PRI'                    WHEN is_unique AND NOT is_multi THEN 'UNI'                    WHEN is_indexed AND (NOT is_multi OR is_first_in_multi) THEN 'MUL'                    ELSE '' END)   AS `Key`,                column_default     AS `Default`,                (CASE                    WHEN is_auto_increment THEN 'auto_increment'                    WHEN column_default_update <> '' THEN 'on update ' || column_default_update                    ELSE '' END)   AS `Extra`                " . ($full ? " ,                NULL               AS `Privileges`,                column_comment     AS `Comment`" : '') . "            FROM data_dictionary.columns            WHERE table_schema = '" . PMA_sqlAddSlashes($database) . "'                AND table_name = '" . PMA_sqlAddSlashes($table) . "'                " . (($column != null) ? "                AND column_name = '" . PMA_sqlAddSlashes($column) . "'" : '');        // ORDER BY ordinal_position    } else {        $sql = 'SHOW ' . ($full ? 'FULL' : '') . ' COLUMNS            FROM ' . PMA_backquote($database) . '.' . PMA_backquote($table)            . (($column != null) ? "LIKE '" . PMA_sqlAddSlashes($column, true) . "'" : '');    }    return $sql;}/** * Returns descriptions of columns in given table (all or given by $column) * * @param string  $database name of database * @param string  $table    name of table to retrieve columns from * @param string  $column   name of column, null to show all columns * @param boolean $full     whether to return full info or only column names * @param mixed   $link     mysql link resource * * @return  false|array   array indexed by column names or, *                        if $column is given, flat array description */function PMA_DBI_get_columns($database, $table, $column = null, $full = false, $link = null){    $sql = PMA_DBI_get_columns_sql($database, $table, $column, $full);    $fields = PMA_DBI_fetch_result($sql, 'Field', null, $link);    if (! is_array($fields) || count($fields) == 0) {        return null;    }    if (PMA_DRIZZLE) {        // fix Key column, it's much simpler in PHP than in SQL        $has_pk = false;        $has_pk_candidates = false;        foreach ($fields as $f) {            if ($f['Key'] == 'PRI') {                $has_pk = true;                break;            } else if ($f['Null'] == 'NO' && ($f['Key'] == 'MUL' || $f['Key'] == 'UNI')) {                $has_pk_candidates = true;            }        }        if (!$has_pk && $has_pk_candidates) {            // check whether we can promote some unique index to PRI            $sql = "                SELECT i.index_name, p.column_name                FROM data_dictionary.indexes i                    JOIN data_dictionary.index_parts p USING (table_schema, table_name)                WHERE i.table_schema = '" . PMA_sqlAddSlashes($database) . "'                    AND i.table_name = '" . PMA_sqlAddSlashes($table) . "'                    AND i.is_unique                        AND NOT i.is_nullable";            $fs = PMA_DBI_fetch_result($sql, 'index_name', null, $link);            $fs = $fs ? array_shift($fs) : array();            foreach ($fs as $f) {                $fields[$f]['Key'] = 'PRI';            }        }    }    return ($column != null) ? array_shift($fields) : $fields;}/*** Returns SQL for fetching information on table indexes (SHOW INDEXES)** @param string $database name of database* @param string $table    name of the table whose indexes are to be retreived* @param string $where    additional conditions for WHERE** @return   array   $indexes*/function PMA_DBI_get_table_indexes_sql($database, $table, $where = null){    if (PMA_DRIZZLE) {        $sql = "SELECT                ip.table_name          AS `Table`,                (NOT ip.is_unique)     AS Non_unique,                ip.index_name          AS Key_name,                ip.sequence_in_index+1 AS Seq_in_index,                ip.column_name         AS Column_name,                (CASE                    WHEN i.index_type = 'BTREE' THEN 'A'                    ELSE NULL END)     AS Collation,                NULL                   AS Cardinality,                compare_length         AS Sub_part,                NULL                   AS Packed,                ip.is_nullable         AS `Null`,                i.index_type           AS Index_type,                NULL                   AS Comment,                i.index_comment        AS Index_comment            FROM data_dictionary.index_parts ip                LEFT JOIN data_dictionary.indexes i USING (table_schema, table_name, index_name)            WHERE table_schema = '" . PMA_sqlAddSlashes($database) . "'                AND table_name = '" . PMA_sqlAddSlashes($table) . "'        ";    } else {        $sql = 'SHOW INDEXES FROM ' . PMA_backquote($database) . '.' . PMA_backquote($table);    }    if ($where) {        $sql .= (PMA_DRIZZLE ? ' AND (' : ' WHERE (') . $where . ')';    }    return $sql;}/*** Returns indexes of a table** @param string $database name of database* @param string $table    name of the table whose indexes are to be retrieved* @param mixed  $link     mysql link resource** @return   array   $indexes*/function PMA_DBI_get_table_indexes($database, $table, $link = null){    $sql = PMA_DBI_get_table_indexes_sql($database, $table);    $indexes = PMA_DBI_fetch_result($sql, null, null, $link);    if (! is_array($indexes) || count($indexes) < 1) {        return array();    }    return $indexes;}/** * returns value of given mysql server variable * * @param string $var  mysql server variable name * @param int    $type PMA_DBI_GETVAR_SESSION|PMA_DBI_GETVAR_GLOBAL * @param mixed  $link mysql link resource|object * * @return  mixed   value for mysql server variable */function PMA_DBI_get_variable($var, $type = PMA_DBI_GETVAR_SESSION, $link = null){    if ($link === null) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    switch ($type) {    case PMA_DBI_GETVAR_SESSION:        $modifier = ' SESSION';        break;    case PMA_DBI_GETVAR_GLOBAL:        $modifier = ' GLOBAL';        break;    default:        $modifier = '';    }    return PMA_DBI_fetch_value(        'SHOW' . $modifier . ' VARIABLES LIKE \'' . $var . '\';', 0, 1, $link    );}/** * Function called just after a connection to the MySQL database server has * been established. It sets the connection collation, and determins the * version of MySQL which is running. * * @param mixed   $link           mysql link resource|object * @param boolean $is_controluser whether link is for control user */function PMA_DBI_postConnect($link, $is_controluser = false){    if (! defined('PMA_MYSQL_INT_VERSION')) {        if (PMA_cacheExists('PMA_MYSQL_INT_VERSION', true)) {            define(                'PMA_MYSQL_INT_VERSION',                PMA_cacheGet('PMA_MYSQL_INT_VERSION', true)            );            define(                'PMA_MYSQL_MAJOR_VERSION',                PMA_cacheGet('PMA_MYSQL_MAJOR_VERSION', true)            );            define(                'PMA_MYSQL_STR_VERSION',                PMA_cacheGet('PMA_MYSQL_STR_VERSION', true)            );            define(                'PMA_MYSQL_VERSION_COMMENT',                PMA_cacheGet('PMA_MYSQL_VERSION_COMMENT', true)            );        } else {            $version = PMA_DBI_fetch_single_row(                'SELECT @@version, @@version_comment',                'ASSOC',                $link            );            if ($version) {                $match = explode('.', $version['@@version']);                define('PMA_MYSQL_MAJOR_VERSION', (int)$match[0]);                define(                    'PMA_MYSQL_INT_VERSION',                    (int) sprintf('%d%02d%02d', $match[0], $match[1], intval($match[2]))                );                define('PMA_MYSQL_STR_VERSION', $version['@@version']);                define('PMA_MYSQL_VERSION_COMMENT', $version['@@version_comment']);            } else {                define('PMA_MYSQL_INT_VERSION', 50015);                define('PMA_MYSQL_MAJOR_VERSION', 5);                define('PMA_MYSQL_STR_VERSION', '5.00.15');                define('PMA_MYSQL_VERSION_COMMENT', '');            }            PMA_cacheSet(                'PMA_MYSQL_INT_VERSION',                PMA_MYSQL_INT_VERSION,                true            );            PMA_cacheSet(                'PMA_MYSQL_MAJOR_VERSION',                PMA_MYSQL_MAJOR_VERSION,                true            );            PMA_cacheSet(                'PMA_MYSQL_STR_VERSION',                PMA_MYSQL_STR_VERSION,                true            );            PMA_cacheSet(                'PMA_MYSQL_VERSION_COMMENT',                PMA_MYSQL_VERSION_COMMENT,                true            );        }        // detect Drizzle by version number:        // <year>.<month>.<build number>(.<patch rev)        define('PMA_DRIZZLE', PMA_MYSQL_MAJOR_VERSION >= 2009);    }    // Skip charsets for Drizzle    if (!PMA_DRIZZLE) {        if (! empty($GLOBALS['collation_connection'])) {            PMA_DBI_query("SET CHARACTER SET 'utf8';", $link, PMA_DBI_QUERY_STORE);            PMA_DBI_query(                "SET collation_connection = '" . PMA_sqlAddSlashes($GLOBALS['collation_connection']) . "';",                $link,                PMA_DBI_QUERY_STORE            );        } else {            PMA_DBI_query(                "SET NAMES 'utf8' COLLATE 'utf8_general_ci';",                $link,                PMA_DBI_QUERY_STORE            );        }    }    // Cache plugin list for Drizzle    if (PMA_DRIZZLE && !PMA_cacheExists('drizzle_engines', true)) {        $sql = "SELECT p.plugin_name, m.module_library            FROM data_dictionary.plugins p                JOIN data_dictionary.modules m USING (module_name)            WHERE p.plugin_type = 'StorageEngine'                AND p.plugin_name NOT IN ('FunctionEngine', 'schema')                AND p.is_active = 'YES'";        $engines = PMA_DBI_fetch_result($sql, 'plugin_name', null, $link);        PMA_cacheSet('drizzle_engines', $engines, true);    }}/** * returns a single value from the given result or query, * if the query or the result has more than one row or field * the first field of the first row is returned * * <code> * $sql = 'SELECT `name` FROM `user` WHERE `id` = 123'; * $user_name = PMA_DBI_fetch_value($sql); * // produces * // $user_name = 'John Doe' * </code> * * @param string|mysql_result $result     query or mysql result * @param integer             $row_number row to fetch the value from, *                                        starting at 0, with 0 beeing default * @param integer|string      $field      field to fetch the value from, *                                        starting at 0, with 0 beeing default * @param resource            $link       mysql link * * @return mixed value of first field in first row from result *               or false if not found */function PMA_DBI_fetch_value($result, $row_number = 0, $field = 0, $link = null){    $value = false;    if (is_string($result)) {        $result = PMA_DBI_try_query($result, $link, PMA_DBI_QUERY_STORE, false);    }    // return false if result is empty or false    // or requested row is larger than rows in result    if (PMA_DBI_num_rows($result) < ($row_number + 1)) {        return $value;    }    // if $field is an integer use non associative mysql fetch function    if (is_int($field)) {        $fetch_function = 'PMA_DBI_fetch_row';    } else {        $fetch_function = 'PMA_DBI_fetch_assoc';    }    // get requested row    for ($i = 0; $i <= $row_number; $i++) {        $row = $fetch_function($result);    }    PMA_DBI_free_result($result);    // return requested field    if (isset($row[$field])) {        $value = $row[$field];    }    unset($row);    return $value;}/** * returns only the first row from the result * * <code> * $sql = 'SELECT * FROM `user` WHERE `id` = 123'; * $user = PMA_DBI_fetch_single_row($sql); * // produces * // $user = array('id' => 123, 'name' => 'John Doe') * </code> * * @param string|mysql_result $result query or mysql result * @param string              $type   NUM|ASSOC|BOTH *                                    returned array should either numeric *                                    associativ or booth * @param resource            $link   mysql link * * @return array|boolean first row from result *                       or false if result is empty */function PMA_DBI_fetch_single_row($result, $type = 'ASSOC', $link = null){    if (is_string($result)) {        $result = PMA_DBI_try_query($result, $link, PMA_DBI_QUERY_STORE, false);    }    // return null if result is empty or false    if (! PMA_DBI_num_rows($result)) {        return false;    }    switch ($type) {    case 'NUM' :        $fetch_function = 'PMA_DBI_fetch_row';        break;    case 'ASSOC' :        $fetch_function = 'PMA_DBI_fetch_assoc';        break;    case 'BOTH' :    default :        $fetch_function = 'PMA_DBI_fetch_array';        break;    }    $row = $fetch_function($result);    PMA_DBI_free_result($result);    return $row;}/** * returns all rows in the resultset in one array * * <code> * $sql = 'SELECT * FROM `user`'; * $users = PMA_DBI_fetch_result($sql); * // produces * // $users[] = array('id' => 123, 'name' => 'John Doe') * * $sql = 'SELECT `id`, `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql, 'id'); * // produces * // $users['123'] = array('id' => 123, 'name' => 'John Doe') * * $sql = 'SELECT `id`, `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql, 0); * // produces * // $users['123'] = array(0 => 123, 1 => 'John Doe') * * $sql = 'SELECT `id`, `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql, 'id', 'name'); * // or * $users = PMA_DBI_fetch_result($sql, 0, 1); * // produces * // $users['123'] = 'John Doe' * * $sql = 'SELECT `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql); * // produces * // $users[] = 'John Doe' * * $sql = 'SELECT `group`, `name` FROM `user`' * $users = PMA_DBI_fetch_result($sql, array('group', null), 'name'); * // produces * // $users['admin'][] = 'John Doe' * * $sql = 'SELECT `group`, `name` FROM `user`' * $users = PMA_DBI_fetch_result($sql, array('group', 'name'), 'id'); * // produces * // $users['admin']['John Doe'] = '123' * </code> * * @param string|mysql_result $result query or mysql result * @param string|integer      $key    field-name or offset *                                    used as key for array * @param string|integer      $value  value-name or offset *                                    used as value for array * @param resource            $link   mysql link * @param mixed               $options * * @return array resultrows or values indexed by $key */function PMA_DBI_fetch_result($result, $key = null, $value = null,    $link = null, $options = 0){    $resultrows = array();    if (is_string($result)) {        $result = PMA_DBI_try_query($result, $link, $options, false);    }    // return empty array if result is empty or false    if (! $result) {        return $resultrows;    }    $fetch_function = 'PMA_DBI_fetch_assoc';    // no nested array if only one field is in result    if (null === $key && 1 === PMA_DBI_num_fields($result)) {        $value = 0;        $fetch_function = 'PMA_DBI_fetch_row';    }    // if $key is an integer use non associative mysql fetch function    if (is_int($key)) {        $fetch_function = 'PMA_DBI_fetch_row';    }    if (null === $key && null === $value) {        while ($row = $fetch_function($result)) {            $resultrows[] = $row;        }    } elseif (null === $key) {        while ($row = $fetch_function($result)) {            $resultrows[] = $row[$value];        }    } elseif (null === $value) {        if (is_array($key)) {            while ($row = $fetch_function($result)) {                $result_target =& $resultrows;                foreach ($key as $key_index) {                    if (null === $key_index) {                        $result_target =& $result_target[];                        continue;                    }                    if (! isset($result_target[$row[$key_index]])) {                        $result_target[$row[$key_index]] = array();                    }                    $result_target =& $result_target[$row[$key_index]];                }                $result_target = $row;            }        } else {            while ($row = $fetch_function($result)) {                $resultrows[$row[$key]] = $row;            }        }    } else {        if (is_array($key)) {            while ($row = $fetch_function($result)) {                $result_target =& $resultrows;                foreach ($key as $key_index) {                    if (null === $key_index) {                        $result_target =& $result_target[];                        continue;                    }                    if (! isset($result_target[$row[$key_index]])) {                        $result_target[$row[$key_index]] = array();                    }                    $result_target =& $result_target[$row[$key_index]];                }                $result_target = $row[$value];            }        } else {            while ($row = $fetch_function($result)) {                $resultrows[$row[$key]] = $row[$value];            }        }    }    PMA_DBI_free_result($result);    return $resultrows;}/** * Get supported SQL compatibility modes * * @return array supported SQL compatibility modes */function PMA_DBI_getCompatibilities(){    // Drizzle doesn't support compatibility modes    if (PMA_DRIZZLE) {        return array();    }    $compats = array('NONE');    $compats[] = 'ANSI';    $compats[] = 'DB2';    $compats[] = 'MAXDB';    $compats[] = 'MYSQL323';    $compats[] = 'MYSQL40';    $compats[] = 'MSSQL';    $compats[] = 'ORACLE';    // removed; in MySQL 5.0.33, this produces exports that    // can't be read by POSTGRESQL (see our bug #1596328)    //$compats[] = 'POSTGRESQL';    $compats[] = 'TRADITIONAL';    return $compats;}/** * returns warnings for last query * * @param resource $link mysql link resource * * @return array warnings */function PMA_DBI_get_warnings($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return array();        }    }    return PMA_DBI_fetch_result('SHOW WARNINGS', null, null, $link);}/** * returns true (int > 0) if current user is superuser * otherwise 0 * * @return bool Whether use is a superuser */function PMA_isSuperuser(){    if (PMA_cacheExists('is_superuser', true)) {        return PMA_cacheGet('is_superuser', true);    }    // when connection failed we don't have a $userlink    if (isset($GLOBALS['userlink'])) {        if (PMA_DRIZZLE) {            // Drizzle has no authorization by default, so when no plugin is            // enabled everyone is a superuser            // Known authorization libraries: regex_policy, simple_user_policy            // Plugins limit object visibility (dbs, tables, processes), we can            // safely assume we always deal with superuser            $r = true;        } else {            // check access to mysql.user table            $r = (bool) PMA_DBI_try_query(                'SELECT COUNT(*) FROM mysql.user',                $GLOBALS['userlink'],                PMA_DBI_QUERY_STORE            );        }        PMA_cacheSet('is_superuser', $r, true);    } else {        PMA_cacheSet('is_superuser', false, true);    }    return PMA_cacheGet('is_superuser', true);}/** * returns an array of PROCEDURE or FUNCTION names for a db * * @param string   $db    db name * @param string   $which PROCEDURE | FUNCTION * @param resource $link  mysql link * * @returnarray the procedure names or function names */function PMA_DBI_get_procedures_or_functions($db, $which, $link = null){    if (PMA_DRIZZLE) {        // Drizzle doesn't support functions and procedures        return array();    }    $shows = PMA_DBI_fetch_result('SHOW ' . $which . ' STATUS;', null, null, $link);    $result = array();    foreach ($shows as $one_show) {        if ($one_show['Db'] == $db && $one_show['Type'] == $which) {            $result[] = $one_show['Name'];        }    }    return($result);}/** * returns the definition of a specific PROCEDURE, FUNCTION, EVENT or VIEW * * @param string   $db    db name * @param string   $which PROCEDURE | FUNCTION | EVENT | VIEW * @param string   $name  the procedure|function|event|view name * @param resource $link  mysql link * * @return string the definition */function PMA_DBI_get_definition($db, $which, $name, $link = null){    $returned_field = array(        'PROCEDURE' => 'Create Procedure',        'FUNCTION'  => 'Create Function',        'EVENT'     => 'Create Event',        'VIEW'      => 'Create View'    );    $query = 'SHOW CREATE ' . $which . ' '        . PMA_backquote($db) . '.' . PMA_backquote($name);    return(PMA_DBI_fetch_value($query, 0, $returned_field[$which]));}/** * returns details about the TRIGGERs for a specific table or database * * @param string $db        db name * @param string $table     table name * @param string $delimiter the delimiter to use (may be empty) * * @return array information about triggers (may be empty) */function PMA_DBI_get_triggers($db, $table = '', $delimiter = '//'){    if (PMA_DRIZZLE) {        // Drizzle doesn't support triggers        return array();    }    $result = array();    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        // Note: in http://dev.mysql.com/doc/refman/5.0/en/faqs-triggers.html        // their example uses WHERE TRIGGER_SCHEMA='dbname' so let's use this        // instead of WHERE EVENT_OBJECT_SCHEMA='dbname'        $query = 'SELECT TRIGGER_SCHEMA, TRIGGER_NAME, EVENT_MANIPULATION'            . ', EVENT_OBJECT_TABLE, ACTION_TIMING, ACTION_STATEMENT'            . ', EVENT_OBJECT_SCHEMA, EVENT_OBJECT_TABLE, DEFINER'            . ' FROM information_schema.TRIGGERS'            . ' WHERE TRIGGER_SCHEMA= \'' . PMA_sqlAddSlashes($db) . '\'';        if (! empty($table)) {            $query .= " AND EVENT_OBJECT_TABLE = '" . PMA_sqlAddSlashes($table) . "';";        }    } else {        $query = "SHOW TRIGGERS FROM " . PMA_backquote($db);        if (! empty($table)) {            $query .= " LIKE '" . PMA_sqlAddSlashes($table, true) . "';";        }    }    if ($triggers = PMA_DBI_fetch_result($query)) {        foreach ($triggers as $trigger) {            if ($GLOBALS['cfg']['Server']['DisableIS']) {                $trigger['TRIGGER_NAME'] = $trigger['Trigger'];                $trigger['ACTION_TIMING'] = $trigger['Timing'];                $trigger['EVENT_MANIPULATION'] = $trigger['Event'];                $trigger['EVENT_OBJECT_TABLE'] = $trigger['Table'];                $trigger['ACTION_STATEMENT'] = $trigger['Statement'];                $trigger['DEFINER'] = $trigger['Definer'];            }            $one_result = array();            $one_result['name'] = $trigger['TRIGGER_NAME'];            $one_result['table'] = $trigger['EVENT_OBJECT_TABLE'];            $one_result['action_timing'] = $trigger['ACTION_TIMING'];            $one_result['event_manipulation'] = $trigger['EVENT_MANIPULATION'];            $one_result['definition'] = $trigger['ACTION_STATEMENT'];            $one_result['definer'] = $trigger['DEFINER'];            // do not prepend the schema name; this way, importing the            // definition into another schema will work            $one_result['full_trigger_name'] = PMA_backquote($trigger['TRIGGER_NAME']);            $one_result['drop'] = 'DROP TRIGGER IF EXISTS '                . $one_result['full_trigger_name'];            $one_result['create'] = 'CREATE TRIGGER '                . $one_result['full_trigger_name'] . ' '                . $trigger['ACTION_TIMING']. ' '                . $trigger['EVENT_MANIPULATION']                . ' ON ' . PMA_backquote($trigger['EVENT_OBJECT_TABLE'])                . "\n" . ' FOR EACH ROW '                . $trigger['ACTION_STATEMENT'] . "\n" . $delimiter . "\n";            $result[] = $one_result;        }    }    // Sort results by name    $name = array();    foreach ($result as $key => $value) {        $name[] = $value['name'];    }    array_multisort($name, SORT_ASC, $result);    return($result);}/** * Formats database error message in a friendly way. * This is needed because some errors messages cannot * be obtained by mysql_error(). * * @param int    $error_number  Error code * @param string $error_message Error message as returned by server * * @return string HML text with error details */function PMA_DBI_formatError($error_number, $error_message){    if (! empty($error_message)) {        $error_message = PMA_DBI_convert_message($error_message);    }    $error_message = htmlspecialchars($error_message);    $error = '#' . ((string) $error_number);    if ($error_number == 2002) {        $error .= ' - ' . $error_message;        $error .= '<br />' . __('The server is not responding (or the local server\'s socket is not correctly configured).');    } elseif ($error_number == 2003) {        $error .= ' - ' . $error_message;        $error .= '<br />' . __('The server is not responding.');    } elseif ($error_number == 1005) {        if (strpos($error_message, 'errno: 13') !== false) {            $error .= ' - ' . $error_message;            $error .= '<br />' . __('Please check privileges of directory containing database.');        } else {            /* InnoDB contraints, see             * http://dev.mysql.com/doc/refman/5.0/en/innodb-foreign-key-constraints.html             */            $error .= ' - ' . $error_message .                ' (<a href="server_engines.php' .                PMA_generate_common_url(array('engine' => 'InnoDB', 'page' => 'Status')) .                '">' . __('Details...') . '</a>)';        }    } else {        $error .= ' - ' . $error_message;    }    return $error;}/** * Checks whether given schema is a system schema: information_schema * (MySQL and Drizzle) or data_dictionary (Drizzle) * * @param string $schema_name           Name of schema (database) to test * @param bool   $test_for_mysql_schema Whether 'mysql' schema should *                                      be treated the same as IS and DD * * @return bool */function PMA_is_system_schema($schema_name, $test_for_mysql_schema = false){    return strtolower($schema_name) == 'information_schema'            || (!PMA_DRIZZLE && strtolower($schema_name) == 'performance_schema')            || (PMA_DRIZZLE && strtolower($schema_name) == 'data_dictionary')            || ($test_for_mysql_schema && !PMA_DRIZZLE && $schema_name == 'mysql');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// Get relations & co. status$cfgRelation = PMA_getRelationsParam();require_once './libraries/file_listing.php';require_once './libraries/plugin_interface.lib.php';function PMA_exportCheckboxCheck($str){    if (isset($GLOBALS['cfg']['Export'][$str]) && $GLOBALS['cfg']['Export'][$str]) {        echo ' checked="checked"';    }}function PMA_exportIsActive($what, $val){    if (isset($GLOBALS['cfg']['Export'][$what]) &&  $GLOBALS['cfg']['Export'][$what] == $val) {        echo ' checked="checked"';    }}/* Scan for plugins */$export_list = PMA_getPlugins('./libraries/export/', array('export_type' => $export_type, 'single_table' => isset($single_table)));/* Fail if we didn't find any plugin */if (empty($export_list)) {    PMA_Message::error( __('Could not load export plugins, please check your installation!'))->display();    include './libraries/footer.inc.php';}?><form method="post" action="export.php" name="dump"><?phpif ($export_type == 'server') {    echo PMA_generate_common_hidden_inputs('', '', 1);} elseif ($export_type == 'database') {    echo PMA_generate_common_hidden_inputs($db, '', 1);} else {    echo PMA_generate_common_hidden_inputs($db, $table, 1);}// just to keep this value for possible next display of this form after saving on serverif (isset($single_table)) {    echo '<input type="hidden" name="single_table" value="TRUE" />' . "\n";}echo '<input type="hidden" name="export_type" value="' . $export_type . '" />' . "\n";// If the export method was not set, the default is quickif (isset($_GET['export_method'])) {    $cfg['Export']['method'] = $_GET['export_method'];} elseif (! isset($cfg['Export']['method'])) {    $cfg['Export']['method'] = 'quick';}// The export method (quick, custom or custom-no-form)echo '<input type="hidden" name="export_method" value="' . htmlspecialchars($cfg['Export']['method']) . '" />';if (isset($_GET['sql_query'])) {    echo '<input type="hidden" name="sql_query" value="' . htmlspecialchars($_GET['sql_query']) . '" />' . "\n";} elseif (! empty($sql_query)) {    echo '<input type="hidden" name="sql_query" value="' . htmlspecialchars($sql_query) . '" />' . "\n";}?><div class="exportoptions" id="header">    <h2>        <?php echo PMA_getImage('b_export.png', __('Export')); ?>        <?php        if ($export_type == 'server') {            echo __('Exporting databases from the current server');        } elseif ($export_type == 'database') {            printf(__('Exporting tables from "%s" database'), htmlspecialchars($db));        } else {            printf(__('Exporting rows from "%s" table'), htmlspecialchars($table));        }?>    </h2></div><div class="exportoptions" id="quick_or_custom">    <h3><?php echo __('Export Method:'); ?></h3>    <ul>        <li>            <?php echo '<input type="radio" name="quick_or_custom" value="quick" id="radio_quick_export"';            if (isset($_GET['quick_or_custom'])) {                $export_method = $_GET['quick_or_custom'];                if ($export_method == 'custom' || $export_method == 'custom_no_form') {                    echo ' />';                } else {                    echo ' checked="checked" />';                }            } elseif ($cfg['Export']['method'] == 'custom' || $cfg['Export']['method'] == 'custom-no-form') {                echo ' />';            } else {                echo ' checked="checked" />';            }            echo '<label for ="radio_quick_export">' . __('Quick - display only the minimal options') . '</label>'; ?>        </li>        <li>            <?php echo '<input type="radio" name="quick_or_custom" value="custom" id="radio_custom_export"';            if (isset($_GET['quick_or_custom'])) {                $export_method = $_GET['quick_or_custom'];                if ($export_method == 'custom' || $export_method == 'custom_no_form') {                    echo ' checked="checked" />';                } else {                    echo ' />';                }            } elseif ($cfg['Export']['method'] == 'custom' || $cfg['Export']['method'] == 'custom-no-form') {                echo ' checked="checked" />';            } else {                echo ' />';            }            echo '<label for="radio_custom_export">' . __('Custom - display all possible options') . '</label>';?>        </li>    </ul></div><div class="exportoptions" id="databases_and_tables">    <?php        if ($export_type == 'server') {            echo '<h3>' . __('Database(s):') . '</h3>';        } else if ($export_type == 'database') {            echo '<h3>' . __('Table(s):') . '</h3>';        }        if (! empty($multi_values)) {            echo $multi_values;        }    ?></div><?php if (strlen($table) && ! isset($num_tables) && ! PMA_Table::isMerge($db, $table)) { ?>    <div class="exportoptions" id="rows">        <h3><?php echo __('Rows:'); ?></h3>        <ul>            <li>                <?php if (isset($_GET['allrows']) && $_GET['allrows'] == 1) {                        echo '<input type="radio" name="allrows" value="0" id="radio_allrows_0" />';                    } else {                        echo '<input type="radio" name="allrows" value="0" id="radio_allrows_0" checked="checked" />';                    }                    echo '<label for ="radio_allrows_0">' . __('Dump some row(s)') . '</label>'; ?>                <ul>                    <li><label for="limit_to"><?php echo __('Number of rows:') . '</label> <input type="text" id="limit_to" name="limit_to" size="5" value="'                . ((isset($_GET['limit_to'])) ? htmlspecialchars($_GET['limit_to']) : ((isset($unlim_num_rows) ? $unlim_num_rows : PMA_Table::countRecords($db, $table))))                . '" onfocus="this.select()" />' ?></li>                    <li><label for="limit_from"><?php echo __('Row to begin at:') . '</label> <input type="text" id="limit_from" name="limit_from" value="'                 . ((isset($_GET['limit_from'])) ? htmlspecialchars($_GET['limit_from']) : '0')                 . '" size="5" onfocus="this.select()" />'; ?></li>                </ul>            </li>            <li>                <?php if (isset($_GET['allrows']) && $_GET['allrows'] == 0) {                    echo '<input type="radio" name="allrows" value="1" id="radio_allrows_1" />';                } else {                    echo '<input type="radio" name="allrows" value="1" id="radio_allrows_1" checked="checked" />';                }                echo ' <label for="radio_allrows_1">' . __('Dump all rows') . '</label>';?>            </li>        </ul>     </div><?php } ?><?php if (isset($cfg['SaveDir']) && !empty($cfg['SaveDir'])) { ?>    <div class="exportoptions" id="output_quick_export">        <h3><?php echo __('Output:'); ?></h3>        <ul>            <li>                <input type="checkbox" name="quick_export_onserver" value="saveit"                    id="checkbox_quick_dump_onserver"                    <?php PMA_exportCheckboxCheck('quick_export_onserver'); ?> />                <label for="checkbox_quick_dump_onserver">                    <?php echo sprintf(__('Save on server in the directory <b>%s</b>'), htmlspecialchars(PMA_userDir($cfg['SaveDir']))); ?>                </label>            </li>            <li>                <input type="checkbox" name="quick_export_onserverover" value="saveitover"                id="checkbox_quick_dump_onserverover"                <?php PMA_exportCheckboxCheck('quick_export_onserver_overwrite'); ?> />                <label for="checkbox_quick_dump_onserverover"><?php echo __('Overwrite existing file(s)'); ?></label>            </li>        </ul>    </div><?php } ?><div class="exportoptions" id="output">    <h3><?php echo __('Output:'); ?></h3>    <ul id="ul_output">        <li>            <input type="radio" name="output_format" value="sendit" id="radio_dump_asfile" <?php isset($_GET['repopulate']) ? '' : PMA_exportCheckboxCheck('asfile'); ?> />            <label for="radio_dump_asfile"><?php echo __('Save output to a file'); ?></label>            <ul id="ul_save_asfile">                <?php if (isset($cfg['SaveDir']) && !empty($cfg['SaveDir'])) { ?>                <li>                    <input type="checkbox" name="onserver" value="saveit"                        id="checkbox_dump_onserver"                        <?php PMA_exportCheckboxCheck('onserver'); ?> />                    <label for="checkbox_dump_onserver">                        <?php echo sprintf(__('Save on server in the directory <b>%s</b>'), htmlspecialchars(PMA_userDir($cfg['SaveDir']))); ?>                    </label>                </li>                <li>                    <input type="checkbox" name="onserverover" value="saveitover"                    id="checkbox_dump_onserverover"                    <?php PMA_exportCheckboxCheck('onserver_overwrite'); ?> />                    <label for="checkbox_dump_onserverover"><?php echo __('Overwrite existing file(s)'); ?></label>                </li>                <?php } ?>                <li>                    <label for="filename_template" class="desc">                    <?php                    echo __('File name template:');                    $trans = new PMA_Message;                    $trans->addMessage(__('@SERVER@ will become the server name'));                    if ($export_type == 'database' || $export_type == 'table') {                        $trans->addMessage(__(', @DATABASE@ will become the database name'));                        if ($export_type == 'table') {                            $trans->addMessage(__(', @TABLE@ will become the table name'));                        }                    }                    $message = new PMA_Message(__('This value is interpreted using %1$sstrftime%2$s, so you can use time formatting strings. Additionally the following transformations will happen: %3$s. Other text will be kept as is. See the %4$sFAQ%5$s for details.'));                    $message->addParam('<a href="' . PMA_linkURL(PMA_getPHPDocLink('function.strftime.php')). '" target="documentation" title="'                        . __('Documentation') . '">', false);                    $message->addParam('</a>', false);                    $message->addParam($trans);                    $message->addParam('<a href="Documentation.html#faq6_27" target="documentation">', false);                    $message->addParam('</a>', false);                    echo PMA_showHint($message);                    ?>                    </label>                    <input type="text" name="filename_template" id="filename_template"                    <?php                        echo ' value="';                        if (isset($_GET['filename_template'])) {                            echo htmlspecialchars($_GET['filename_template']);                        } else {                            if ($export_type == 'database') {                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(                                    'pma_db_filename_template',                                    $GLOBALS['cfg']['Export']['file_template_database']));                            } elseif ($export_type == 'table') {                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(                                    'pma_table_filename_template',                                    $GLOBALS['cfg']['Export']['file_template_table']));                            } else {                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(                                    'pma_server_filename_template',                                    $GLOBALS['cfg']['Export']['file_template_server']));                            }                    }                        echo '"';                    ?>                    />                    <input type="checkbox" name="remember_template"                        id="checkbox_remember_template"                        <?php PMA_exportCheckboxCheck('remember_file_template'); ?> />                    <label for="checkbox_remember_template">                        <?php echo __('use this for future exports'); ?></label>                </li>                <?php                // charset of file                if ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE) {                    echo '        <li><label for="select_charset_of_file" class="desc">'                        . __('Character set of the file:') . '</label>' . "\n";                    reset($cfg['AvailableCharsets']);                    echo '<select id="select_charset_of_file" name="charset_of_file" size="1">';                    foreach ($cfg['AvailableCharsets'] as $temp_charset) {                        echo '<option value="' . $temp_charset . '"';                        if (isset($_GET['charset_of_file']) && ($_GET['charset_of_file'] != $temp_charset)) {                            echo '';                        } elseif ((empty($cfg['Export']['charset']) && $temp_charset == 'utf-8')                          || $temp_charset == $cfg['Export']['charset']) {                            echo ' selected="selected"';                        }                        echo '>' . $temp_charset . '</option>';                    } // end foreach                    echo '</select></li>';                } // end if                ?>                 <?php                if (isset($_GET['compression'])) {                    $selected_compression = $_GET['compression'];                } elseif (isset($cfg['Export']['compression'])) {                    $selected_compression = $cfg['Export']['compression'];                } else {                    $selected_compression = "none";                }                // zip, gzip and bzip2 encode features                $is_zip  = ($cfg['ZipDump']  && @function_exists('gzcompress'));                $is_gzip = ($cfg['GZipDump'] && @function_exists('gzencode'));                $is_bzip2 = ($cfg['BZipDump'] && @function_exists('bzcompress'));                if ($is_zip || $is_gzip || $is_bzip2) { ?>                    <li>                    <label for="compression" class="desc"><?php echo __('Compression:'); ?></label>                    <select id="compression" name="compression">                        <option value="none"><?php echo __('None'); ?></option>                        <?php if ($is_zip) { ?>                            <option value="zip" <?php echo ($selected_compression == "zip") ? 'selected="selected"' : ''; ?>><?php echo __('zipped'); ?></option>                        <?php } if ($is_gzip) { ?>                            <option value="gzip" <?php echo ($selected_compression == "gzip") ? 'selected="selected"' : ''; ?>><?php echo __('gzipped'); ?></option>                        <?php } if ($is_bzip2) { ?>                            <option value="bzip2" <?php echo ($selected_compression == "bzip2") ? 'selected="selected"' : ''; ?>><?php echo __('bzipped'); ?></option>                        <?php } ?>                    </select>                    </li>                <?php } else { ?>                    <input type="hidden" name="compression" value="<?php echo $selected_compression; ?>" />                <?php } ?>             </ul>        </li>        <li><input type="radio" id="radio_view_as_text" name="output_format" value="astext" <?php echo (isset($_GET['repopulate']) || $GLOBALS['cfg']['Export']['asfile'] == false) ? 'checked="checked"' : '' ?>/><label for="radio_view_as_text"><?php echo __('View output as text'); ?></label></li>    </ul> </div><div class="exportoptions" id="format">    <h3><?php echo __('Format:'); ?></h3>    <?php echo PMA_pluginGetChoice('Export', 'what', $export_list, 'format'); ?></div><div class="exportoptions" id="format_specific_opts">    <h3><?php echo __('Format-specific options:'); ?></h3>    <p class="no_js_msg" id="scroll_to_options_msg"><?php echo __('Scroll down to fill in the options for the selected format and ignore the options for other formats.'); ?></p>    <?php echo PMA_pluginGetOptions('Export', $export_list); ?></div><?php if (function_exists('PMA_set_enc_form')) { ?><!-- Encoding setting form appended by Y.Kawada --><!-- Japanese encoding setting -->    <div class="exportoptions" id="kanji_encoding">        <h3><?php echo __('Encoding Conversion:'); ?></h3>        <?php echo PMA_set_enc_form('            '); ?>    </div><?php } ?><div class="exportoptions" id="submit"><?php PMA_externalBug(__('SQL compatibility mode'), 'mysql', '50027', '14515'); ?>    <input type="submit" value="<?php echo __('Go'); ?>" id="buttonGo" /></div></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'export.js';/** * Gets tables informations and displays top links */require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_export.php&amp;back=tbl_export.php';require_once './libraries/tbl_info.inc.php';// Dump of a table$export_page_title = __('View dump (schema) of table');// When we have some query, we need to remove LIMIT from that and possibly// generate WHERE clause (if we are asked to export specific rows)if (! empty($sql_query)) {    // Parse query so we can work with tokens    $parsed_sql = PMA_SQP_parse($sql_query);    $analyzed_sql = PMA_SQP_analyze($parsed_sql);    // Need to generate WHERE clause?    if (isset($where_clause)) {        // Yes => rebuild query from scratch; this doesn't work with nested        // selects :-(        $sql_query = 'SELECT ';        if (isset($analyzed_sql[0]['queryflags']['distinct'])) {            $sql_query .= ' DISTINCT ';        }        $sql_query .= $analyzed_sql[0]['select_expr_clause'];        if (!empty($analyzed_sql[0]['from_clause'])) {            $sql_query .= ' FROM ' . $analyzed_sql[0]['from_clause'];        }        $wheres = array();        if (isset($where_clause) && is_array($where_clause)         && count($where_clause) > 0) {            $wheres[] = '(' . implode(') OR (', $where_clause) . ')';        }        if (!empty($analyzed_sql[0]['where_clause'])) {            $wheres[] = $analyzed_sql[0]['where_clause'];        }        if (count($wheres) > 0) {            $sql_query .= ' WHERE (' . implode(') AND (', $wheres) . ')';        }        if (!empty($analyzed_sql[0]['group_by_clause'])) {            $sql_query .= ' GROUP BY ' . $analyzed_sql[0]['group_by_clause'];        }        if (!empty($analyzed_sql[0]['having_clause'])) {            $sql_query .= ' HAVING ' . $analyzed_sql[0]['having_clause'];        }        if (!empty($analyzed_sql[0]['order_by_clause'])) {            $sql_query .= ' ORDER BY ' . $analyzed_sql[0]['order_by_clause'];        }    } else {        // Just crop LIMIT clause        $sql_query = $analyzed_sql[0]['section_before_limit'] . $analyzed_sql[0]['section_after_limit'];    }    $message = PMA_Message::success();}/** * Displays top menu links */require './libraries/tbl_links.inc.php';$export_type = 'table';require_once './libraries/display_export.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** SQL Parser Functions for phpMyAdmin * * These functions define an SQL parser system, capable of understanding and * extracting data from a MySQL type SQL query. * * The basic procedure for using the new SQL parser: * On any page that needs to extract data from a query or to pretty-print a * query, you need code like this up at the top: * * ($sql contains the query) * $parsed_sql = PMA_SQP_parse($sql); * * If you want to extract data from it then, you just need to run * $sql_info = PMA_SQP_analyze($parsed_sql); * * See comments in PMA_SQP_analyze for the returned info * from the analyzer. * * If you want a pretty-printed version of the query, do: * $string = PMA_SQP_formatHtml($parsed_sql); * (note that that you need to have syntax.css.php included somehow in your * page for it to work, I recommend '<link rel="stylesheet" type="text/css" * href="syntax.css.php" />' at the moment.) * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Minimum inclusion? (i.e. for the stylesheet builder) */if (! defined('PMA_MINIMUM_COMMON')) {    /**     * Include the string library as we use it heavily     */    include_once './libraries/string.lib.php';    /**     * Include data for the SQL Parser     */    include_once './libraries/sqlparser.data.php';    if (!defined('TESTSUITE')) {        include_once './libraries/mysql_charsets.lib.php';    }    if (! isset($mysql_charsets)) {        $mysql_charsets = array();        $mysql_collations_flat = array();    }    if (!defined('DEBUG_TIMING')) {        /**         * currently we don't need the $pos (token position in query)         * for other purposes than LIMIT clause verification,         * so many calls to this function do not include the 4th parameter         */        function PMA_SQP_arrayAdd(&$arr, $type, $data, &$arrsize, $pos = 0)        {            $arr[] = array('type' => $type, 'data' => $data, 'pos' => $pos);            $arrsize++;        } // end of the "PMA_SQP_arrayAdd()" function    } else {        /**         * This is debug variant of above.         * @ignore         */        function PMA_SQP_arrayAdd(&$arr, $type, $data, &$arrsize, $pos = 0)        {            global $timer;            $t     = $timer;            $arr[] = array(                'type' => $type,                'data' => $data,                'pos' => $pos,                'time' => $t);            $timer = microtime();            $arrsize++;        } // end of the "PMA_SQP_arrayAdd()" function    } // end if... else...    /**     * Reset the error variable for the SQL parser     *     * @access public     */    function PMA_SQP_resetError()    {        global $SQP_errorString;        $SQP_errorString = '';        unset($SQP_errorString);    }    /**     * Get the contents of the error variable for the SQL parser     *     * @return string Error string from SQL parser     *     * @access public     */    function PMA_SQP_getErrorString()    {        global $SQP_errorString;        return isset($SQP_errorString) ? $SQP_errorString : '';    }    /**     * Check if the SQL parser hit an error     *     * @return boolean error state     *     * @access public     */    function PMA_SQP_isError()    {        global $SQP_errorString;        return isset($SQP_errorString) && !empty($SQP_errorString);    }    /**     * Set an error message for the system     *     * @param string  The error message     * @param string  The failing SQL query     *     * @access private     * @scope SQL Parser internal     */    function PMA_SQP_throwError($message, $sql)    {        global $SQP_errorString;        $SQP_errorString = '<p>'.__('There seems to be an error in your SQL query. The MySQL server error output below, if there is any, may also help you in diagnosing the problem') . '</p>' . "\n"            . '<pre>' . "\n"            . 'ERROR: ' . $message . "\n"            . 'SQL: ' . htmlspecialchars($sql) .  "\n"            . '</pre>' . "\n";    } // end of the "PMA_SQP_throwError()" function    /**     * Do display the bug report     *     * @param string  The error message     * @param string  The failing SQL query     *     * @access public     */    function PMA_SQP_bug($message, $sql)    {        global $SQP_errorString;        $debugstr = 'ERROR: ' . $message . "\n";        $debugstr .= 'MySQL: '.PMA_MYSQL_STR_VERSION . "\n";        $debugstr .= 'USR OS, AGENT, VER: ' . PMA_USR_OS . ' ';        $debugstr .= PMA_USR_BROWSER_AGENT . ' ' . PMA_USR_BROWSER_VER . "\n";        $debugstr .= 'PMA: ' . PMA_VERSION . "\n";        $debugstr .= 'PHP VER,OS: ' . PMA_PHP_STR_VERSION . ' ' . PHP_OS . "\n";        $debugstr .= 'LANG: ' . $GLOBALS['lang'] . "\n";        $debugstr .= 'SQL: ' . htmlspecialchars($sql);        $encodedstr     = $debugstr;        if (@function_exists('gzcompress')) {            $encodedstr = gzcompress($debugstr, 9);        }        $encodedstr     = preg_replace(            "/(\015\012)|(\015)|(\012)/",            '<br />' . "\n",            chunk_split(base64_encode($encodedstr)));        $SQP_errorString .= __('There is a chance that you may have found a bug in the SQL parser. Please examine your query closely, and check that the quotes are correct and not mis-matched. Other possible failure causes may be that you are uploading a file with binary outside of a quoted text area. You can also try your query on the MySQL command line interface. The MySQL server error output below, if there is any, may also help you in diagnosing the problem. If you still have problems or if the parser fails where the command line interface succeeds, please reduce your SQL query input to the single query that causes problems, and submit a bug report with the data chunk in the CUT section below:')             . '<br />' . "\n"             . '----' . __('BEGIN CUT') . '----' . '<br />' . "\n"             . $encodedstr . "\n"             . '----' . __('END CUT') . '----' . '<br />' . "\n";        $SQP_errorString .= '----' . __('BEGIN RAW') . '----<br />' . "\n"             . '<pre>' . "\n"             . $debugstr             . '</pre>' . "\n"             . '----' . __('END RAW') . '----<br />' . "\n";    } // end of the "PMA_SQP_bug()" function    /**     * Parses the SQL queries     *     * @param string   The SQL query list     *     * @return mixed    Most of times, nothing...     *     * @global array    The current PMA configuration     * @global array    MySQL column attributes     * @global array    MySQL reserved words     * @global array    MySQL column types     * @global array    MySQL function names     * @global array    List of available character sets     * @global array    List of available collations     *     * @access public     */    function PMA_SQP_parse($sql)    {        static $PMA_SQPdata_column_attrib, $PMA_SQPdata_reserved_word;        static $PMA_SQPdata_column_type;        static $PMA_SQPdata_function_name, $PMA_SQPdata_forbidden_word;        global $mysql_charsets, $mysql_collations_flat;        // Convert all line feeds to Unix style        $sql = str_replace("\r\n", "\n", $sql);        $sql = str_replace("\r", "\n", $sql);        $len = PMA_strlen($sql);        if ($len == 0) {            return array();        }        // Create local hashtables        if (!isset($PMA_SQPdata_column_attrib)) {            $PMA_SQPdata_column_attrib  = array_flip(                $GLOBALS['PMA_SQPdata_column_attrib']                );            $PMA_SQPdata_function_name  = array_flip(                $GLOBALS['PMA_SQPdata_function_name']                );            $PMA_SQPdata_reserved_word  = array_flip(                $GLOBALS['PMA_SQPdata_reserved_word']                );            $PMA_SQPdata_forbidden_word = array_flip(                $GLOBALS['PMA_SQPdata_forbidden_word']                );            $PMA_SQPdata_column_type    = array_flip(                $GLOBALS['PMA_SQPdata_column_type']                );        }        $sql_array               = array();        $sql_array['raw']        = $sql;        $count1                  = 0;        $count2                  = 0;        $punct_queryend          = ';';        $punct_qualifier         = '.';        $punct_listsep           = ',';        $punct_level_plus        = '(';        $punct_level_minus       = ')';        $punct_user              = '@';        $digit_floatdecimal      = '.';        $digit_hexset            = 'x';        $bracket_list            = '()[]{}';        $allpunct_list           =  '-,;:!?/.^~\*&%+<=>|';        $allpunct_list_pair      = array(            '!=' => 1,            '&&' => 1,            ':=' => 1,            '<<' => 1,            '<=' => 1,            '<=>' => 1,            '<>' => 1,            '>=' => 1,            '>>' => 1,            '||' => 1,            '==' => 1        );        $quote_list              = '\'"`';        $arraysize               = 0;        $previous_was_space   = false;        $this_was_space       = false;        $previous_was_bracket = false;        $this_was_bracket     = false;        $previous_was_punct   = false;        $this_was_punct       = false;        $previous_was_listsep = false;        $this_was_listsep     = false;        $previous_was_quote   = false;        $this_was_quote       = false;        while ($count2 < $len) {            $c      = PMA_substr($sql, $count2, 1);            $count1 = $count2;            $previous_was_space = $this_was_space;            $this_was_space = false;            $previous_was_bracket = $this_was_bracket;            $this_was_bracket = false;            $previous_was_punct = $this_was_punct;            $this_was_punct = false;            $previous_was_listsep = $this_was_listsep;            $this_was_listsep = false;            $previous_was_quote = $this_was_quote;            $this_was_quote = false;            if (($c == "\n")) {                $this_was_space = true;                $count2++;                PMA_SQP_arrayAdd($sql_array, 'white_newline', '', $arraysize);                continue;            }            // Checks for white space            if (PMA_STR_isSpace($c)) {                $this_was_space = true;                $count2++;                continue;            }            // Checks for comment lines.            // MySQL style #            // C style /* */            // ANSI style --            $next_c = PMA_substr($sql, $count2 + 1, 1);            if (($c == '#')                || (($count2 + 1 < $len) && ($c == '/') && ($next_c == '*'))                || (($count2 + 2 == $len) && ($c == '-') && ($next_c == '-'))                || (($count2 + 2 < $len) && ($c == '-') && ($next_c == '-') && ((PMA_substr($sql, $count2 + 2, 1) <= ' ')))) {                $count2++;                $pos  = 0;                $type = 'bad';                switch ($c) {                case '#':                    $type = 'mysql';                case '-':                    $type = 'ansi';                    $pos  = PMA_strpos($sql, "\n", $count2);                    break;                case '/':                    $type = 'c';                    $pos  = PMA_strpos($sql, '*/', $count2);                    $pos  += 2;                    break;                default:                    break;                } // end switch                $count2 = ($pos < $count2) ? $len : $pos;                $str    = PMA_substr($sql, $count1, $count2 - $count1);                PMA_SQP_arrayAdd($sql_array, 'comment_' . $type, $str, $arraysize);                continue;            } // end if            // Checks for something inside quotation marks            if (PMA_strpos($quote_list, $c) !== false) {                $startquotepos   = $count2;                $quotetype       = $c;                $count2++;                $escaped         = false;                $pos             = $count2;                $oldpos          = 0;                do {                    $oldpos = $pos;                    $pos    = PMA_strpos(' ' . $sql, $quotetype, $oldpos + 1) - 1;                    // ($pos === false)                    if ($pos < 0) {                        if ($c == '`') {                            /*                             * Behave same as MySQL and accept end of query as end of backtick.                             * I know this is sick, but MySQL behaves like this:                             *                             * SELECT * FROM `table                             *                             * is treated like                             *                             * SELECT * FROM `table`                             */                            $pos_quote_separator = PMA_strpos(' ' . $sql, $GLOBALS['sql_delimiter'], $oldpos + 1) - 1;                            if ($pos_quote_separator < 0) {                                $len += 1;                                $sql .= '`';                                $sql_array['raw'] .= '`';                                $pos = $len;                            } else {                                $len += 1;                                $sql = PMA_substr($sql, 0, $pos_quote_separator) . '`' . PMA_substr($sql, $pos_quote_separator);                                $sql_array['raw'] = $sql;                                $pos = $pos_quote_separator;                            }                            if (class_exists('PMA_Message') && $GLOBALS['is_ajax_request'] != true) {                                PMA_Message::notice(__('Automatically appended backtick to the end of query!'))->display();                            }                        } else {                            $debugstr = __('Unclosed quote') . ' @ ' . $startquotepos. "\n"                                      . 'STR: ' . htmlspecialchars($quotetype);                            PMA_SQP_throwError($debugstr, $sql);                            return $sql_array;                        }                    }                    // If the quote is the first character, it can't be                    // escaped, so don't do the rest of the code                    if ($pos == 0) {                        break;                    }                    // Checks for MySQL escaping using a \                    // And checks for ANSI escaping using the $quotetype character                    if (($pos < $len) && PMA_STR_charIsEscaped($sql, $pos) && $c != '`') {                        $pos ++;                        continue;                    } elseif (($pos + 1 < $len) && (PMA_substr($sql, $pos, 1) == $quotetype) && (PMA_substr($sql, $pos + 1, 1) == $quotetype)) {                        $pos = $pos + 2;                        continue;                    } else {                        break;                    }                } while ($len > $pos); // end do                $count2       = $pos;                $count2++;                $type         = 'quote_';                switch ($quotetype) {                case '\'':                    $type .= 'single';                    $this_was_quote = true;                    break;                case '"':                    $type .= 'double';                    $this_was_quote = true;                    break;                case '`':                    $type .= 'backtick';                    $this_was_quote = true;                    break;                default:                    break;                } // end switch                $data = PMA_substr($sql, $count1, $count2 - $count1);                PMA_SQP_arrayAdd($sql_array, $type, $data, $arraysize);                continue;            }            // Checks for brackets            if (PMA_strpos($bracket_list, $c) !== false) {                // All bracket tokens are only one item long                $this_was_bracket = true;                $count2++;                $type_type     = '';                if (PMA_strpos('([{', $c) !== false) {                    $type_type = 'open';                } else {                    $type_type = 'close';                }                $type_style     = '';                if (PMA_strpos('()', $c) !== false) {                    $type_style = 'round';                } elseif (PMA_strpos('[]', $c) !== false) {                    $type_style = 'square';                } else {                    $type_style = 'curly';                }                $type = 'punct_bracket_' . $type_type . '_' . $type_style;                PMA_SQP_arrayAdd($sql_array, $type, $c, $arraysize);                continue;            }            /* DEBUG            echo '<pre>1';            var_dump(PMA_STR_isSqlIdentifier($c, false));            var_dump($c == '@');            var_dump($c == '.');            var_dump(PMA_STR_isDigit(PMA_substr($sql, $count2 + 1, 1)));            var_dump($previous_was_space);            var_dump($previous_was_bracket);            var_dump($previous_was_listsep);            echo '</pre>';            */            // Checks for identifier (alpha or numeric)            if (PMA_STR_isSqlIdentifier($c, false)             || $c == '@'             || ($c == '.'              && PMA_STR_isDigit(PMA_substr($sql, $count2 + 1, 1))              && ($previous_was_space || $previous_was_bracket || $previous_was_listsep))) {                /* DEBUG                echo PMA_substr($sql, $count2);                echo '<hr />';                */                $count2++;                /**                 * @todo a @ can also be present in expressions like                 * FROM 'user'@'%' or  TO 'user'@'%'                 * in this case, the @ is wrongly marked as alpha_variable                 */                $is_identifier           = $previous_was_punct;                $is_sql_variable         = $c == '@' && ! $previous_was_quote;                $is_user                 = $c == '@' && $previous_was_quote;                $is_digit                = !$is_identifier && !$is_sql_variable && PMA_STR_isDigit($c);                $is_hex_digit            = $is_digit && $c == '0' && $count2 < $len && PMA_substr($sql, $count2, 1) == 'x';                $is_float_digit          = $c == '.';                $is_float_digit_exponent = false;                /* DEBUG                echo '<pre>2';                var_dump($is_identifier);                var_dump($is_sql_variable);                var_dump($is_digit);                var_dump($is_float_digit);                echo '</pre>';                 */                // Fast skip is especially needed for huge BLOB data                if ($is_hex_digit) {                    $count2++;                    $pos = strspn($sql, '0123456789abcdefABCDEF', $count2);                    if ($pos > $count2) {                        $count2 = $pos;                    }                    unset($pos);                } elseif ($is_digit) {                    $pos = strspn($sql, '0123456789', $count2);                    if ($pos > $count2) {                        $count2 = $pos;                    }                    unset($pos);                }                while (($count2 < $len) && PMA_STR_isSqlIdentifier(PMA_substr($sql, $count2, 1), ($is_sql_variable || $is_digit))) {                    $c2 = PMA_substr($sql, $count2, 1);                    if ($is_sql_variable && ($c2 == '.')) {                        $count2++;                        continue;                    }                    if ($is_digit && (!$is_hex_digit) && ($c2 == '.')) {                        $count2++;                        if (!$is_float_digit) {                            $is_float_digit = true;                            continue;                        } else {                            $debugstr = __('Invalid Identifer') . ' @ ' . ($count1+1) . "\n"                                      . 'STR: ' . htmlspecialchars(PMA_substr($sql, $count1, $count2 - $count1));                            PMA_SQP_throwError($debugstr, $sql);                            return $sql_array;                        }                    }                    if ($is_digit && (!$is_hex_digit) && (($c2 == 'e') || ($c2 == 'E'))) {                        if (!$is_float_digit_exponent) {                            $is_float_digit_exponent = true;                            $is_float_digit          = true;                            $count2++;                            continue;                        } else {                            $is_digit                = false;                            $is_float_digit          = false;                        }                    }                    if (($is_hex_digit && PMA_STR_isHexDigit($c2)) || ($is_digit && PMA_STR_isDigit($c2))) {                        $count2++;                        continue;                    } else {                        $is_digit     = false;                        $is_hex_digit = false;                    }                    $count2++;                } // end while                $l    = $count2 - $count1;                $str  = PMA_substr($sql, $count1, $l);                $type = '';                if ($is_digit || $is_float_digit || $is_hex_digit) {                    $type     = 'digit';                    if ($is_float_digit) {                        $type .= '_float';                    } elseif ($is_hex_digit) {                        $type .= '_hex';                    } else {                        $type .= '_integer';                    }                } elseif ($is_user) {                    $type = 'punct_user';                } elseif ($is_sql_variable != false) {                    $type = 'alpha_variable';                } else {                    $type = 'alpha';                } // end if... else....                PMA_SQP_arrayAdd($sql_array, $type, $str, $arraysize, $count2);                continue;            }            // Checks for punct            if (PMA_strpos($allpunct_list, $c) !== false) {                while (($count2 < $len) && PMA_strpos($allpunct_list, PMA_substr($sql, $count2, 1)) !== false) {                    $count2++;                }                $l = $count2 - $count1;                if ($l == 1) {                    $punct_data = $c;                } else {                    $punct_data = PMA_substr($sql, $count1, $l);                }                // Special case, sometimes, althought two characters are                // adjectent directly, they ACTUALLY need to be seperate                /* DEBUG                echo '<pre>';                var_dump($l);                var_dump($punct_data);                echo '</pre>';                */                if ($l == 1) {                    $t_suffix         = '';                    switch ($punct_data) {                    case $punct_queryend:                        $t_suffix = '_queryend';                        break;                    case $punct_qualifier:                        $t_suffix = '_qualifier';                        $this_was_punct = true;                        break;                    case $punct_listsep:                        $this_was_listsep = true;                        $t_suffix = '_listsep';                        break;                    default:                        break;                    }                    PMA_SQP_arrayAdd($sql_array, 'punct' . $t_suffix, $punct_data, $arraysize);                } elseif ($punct_data == $GLOBALS['sql_delimiter'] || isset($allpunct_list_pair[$punct_data])) {                    // Ok, we have one of the valid combined punct expressions                    PMA_SQP_arrayAdd($sql_array, 'punct', $punct_data, $arraysize);                } else {                    // Bad luck, lets split it up more                    $first  = $punct_data[0];                    $first2 = $punct_data[0] . $punct_data[1];                    $last2  = $punct_data[$l - 2] . $punct_data[$l - 1];                    $last   = $punct_data[$l - 1];                    if (($first == ',') || ($first == ';') || ($first == '.') || ($first == '*')) {                        $count2     = $count1 + 1;                        $punct_data = $first;                    } elseif (($last2 == '/*') || (($last2 == '--') && ($count2 == $len || PMA_substr($sql, $count2, 1) <= ' '))) {                        $count2     -= 2;                        $punct_data = PMA_substr($sql, $count1, $count2 - $count1);                    } elseif (($last == '-') || ($last == '+') || ($last == '!')) {                        $count2--;                        $punct_data = PMA_substr($sql, $count1, $count2 - $count1);                    } elseif ($last != '~') {                        /**                         * @todo for negation operator, split in 2 tokens ?                         * "select x&~1 from t"                         * becomes "select x & ~ 1 from t" ?                         */                        $debugstr =  __('Unknown Punctuation String') . ' @ ' . ($count1+1) . "\n"                                  . 'STR: ' . htmlspecialchars($punct_data);                        PMA_SQP_throwError($debugstr, $sql);                        return $sql_array;                    }                    PMA_SQP_arrayAdd($sql_array, 'punct', $punct_data, $arraysize);                    continue;                } // end if... elseif... else                continue;            }            // DEBUG            $count2++;            $debugstr = 'C1 C2 LEN: ' . $count1 . ' ' . $count2 . ' ' . $len .  "\n"                      . 'STR: ' . PMA_substr($sql, $count1, $count2 - $count1) . "\n";            PMA_SQP_bug($debugstr, $sql);            return $sql_array;        } // end while ($count2 < $len)        /*        echo '<pre>';        print_r($sql_array);        echo '</pre>';        */        if ($arraysize > 0) {            $t_next           = $sql_array[0]['type'];            $t_prev           = '';            $t_bef_prev       = '';            $t_cur            = '';            $d_next           = $sql_array[0]['data'];            $d_prev           = '';            $d_bef_prev       = '';            $d_cur            = '';            $d_next_upper     = $t_next == 'alpha' ? strtoupper($d_next) : $d_next;            $d_prev_upper     = '';            $d_bef_prev_upper = '';            $d_cur_upper      = '';        }        for ($i = 0; $i < $arraysize; $i++) {            $t_bef_prev       = $t_prev;            $t_prev           = $t_cur;            $t_cur            = $t_next;            $d_bef_prev       = $d_prev;            $d_prev           = $d_cur;            $d_cur            = $d_next;            $d_bef_prev_upper = $d_prev_upper;            $d_prev_upper     = $d_cur_upper;            $d_cur_upper      = $d_next_upper;            if (($i + 1) < $arraysize) {                $t_next = $sql_array[$i + 1]['type'];                $d_next = $sql_array[$i + 1]['data'];                $d_next_upper = $t_next == 'alpha' ? strtoupper($d_next) : $d_next;            } else {                $t_next       = '';                $d_next       = '';                $d_next_upper = '';            }            //DEBUG echo "[prev: <strong>".$d_prev."</strong> ".$t_prev."][cur: <strong>".$d_cur."</strong> ".$t_cur."][next: <strong>".$d_next."</strong> ".$t_next."]<br />";            if ($t_cur == 'alpha') {                $t_suffix     = '_identifier';                // for example: `thebit` bit(8) NOT NULL DEFAULT b'0'                if ($t_prev == 'alpha' && $d_prev == 'DEFAULT' && $d_cur == 'b' && $t_next == 'quote_single') {                    $t_suffix = '_bitfield_constant_introducer';                } elseif (($t_next == 'punct_qualifier') || ($t_prev == 'punct_qualifier')) {                    $t_suffix = '_identifier';                } elseif (($t_next == 'punct_bracket_open_round')                  && isset($PMA_SQPdata_function_name[$d_cur_upper])) {                    /**                     * @todo 2005-10-16: in the case of a CREATE TABLE containing                     * a TIMESTAMP, since TIMESTAMP() is also a function, it's                     * found here and the token is wrongly marked as alpha_functionName.                     * But we compensate for this when analysing for timestamp_not_null                     * later in this script.                     *                     * Same applies to CHAR vs. CHAR() function.                     */                    $t_suffix = '_functionName';                    /* There are functions which might be as well column types */                } elseif (isset($PMA_SQPdata_column_type[$d_cur_upper])) {                    $t_suffix = '_columnType';                    /**                     * Temporary fix for BUG #621357 and #2027720                     *                     * @todo FIX PROPERLY NEEDS OVERHAUL OF SQL TOKENIZER                     */                    if (($d_cur_upper == 'SET' || $d_cur_upper == 'BINARY') && $t_next != 'punct_bracket_open_round') {                        $t_suffix = '_reservedWord';                    }                    //END OF TEMPORARY FIX                    // CHARACTER is a synonym for CHAR, but can also be meant as                    // CHARACTER SET. In this case, we have a reserved word.                    if ($d_cur_upper == 'CHARACTER' && $d_next_upper == 'SET') {                        $t_suffix = '_reservedWord';                    }                    // experimental                    // current is a column type, so previous must not be                    // a reserved word but an identifier                    // CREATE TABLE SG_Persons (first varchar(64))                    //if ($sql_array[$i-1]['type'] =='alpha_reservedWord') {                    //    $sql_array[$i-1]['type'] = 'alpha_identifier';                    //}                } elseif (isset($PMA_SQPdata_reserved_word[$d_cur_upper])) {                    $t_suffix = '_reservedWord';                } elseif (isset($PMA_SQPdata_column_attrib[$d_cur_upper])) {                    $t_suffix = '_columnAttrib';                    // INNODB is a MySQL table type, but in "SHOW INNODB STATUS",                    // it should be regarded as a reserved word.                    if ($d_cur_upper == 'INNODB' && $d_prev_upper == 'SHOW' && $d_next_upper == 'STATUS') {                        $t_suffix = '_reservedWord';                    }                    if ($d_cur_upper == 'DEFAULT' && $d_next_upper == 'CHARACTER') {                        $t_suffix = '_reservedWord';                    }                    // Binary as character set                    if ($d_cur_upper == 'BINARY' && (                      ($d_bef_prev_upper == 'CHARACTER' && $d_prev_upper == 'SET')                      || ($d_bef_prev_upper == 'SET' && $d_prev_upper == '=')                      || ($d_bef_prev_upper == 'CHARSET' && $d_prev_upper == '=')                      || $d_prev_upper == 'CHARSET'                      ) && in_array($d_cur, $mysql_charsets)) {                        $t_suffix = '_charset';                    }                } elseif (in_array($d_cur, $mysql_charsets)                  || in_array($d_cur, $mysql_collations_flat)                  || ($d_cur{0} == '_' && in_array(substr($d_cur, 1), $mysql_charsets))) {                    $t_suffix = '_charset';                } else {                    // Do nothing                }                // check if present in the list of forbidden words                if ($t_suffix == '_reservedWord' && isset($PMA_SQPdata_forbidden_word[$d_cur_upper])) {                    $sql_array[$i]['forbidden'] = true;                } else {                    $sql_array[$i]['forbidden'] = false;                }                $sql_array[$i]['type'] .= $t_suffix;            }        } // end for        // Stores the size of the array inside the array, as count() is a slow        // operation.        $sql_array['len'] = $arraysize;        // DEBUG echo 'After parsing<pre>'; print_r($sql_array); echo '</pre>';        // Sends the data back        return $sql_array;    } // end of the "PMA_SQP_parse()" function    /**     * Checks for token types being what we want...     *     * @param string String of type that we have     * @param string String of type that we want     *     * @return boolean result of check     *     * @access private     */    function PMA_SQP_typeCheck($toCheck, $whatWeWant)    {        $typeSeperator = '_';        if (strcmp($whatWeWant, $toCheck) == 0) {            return true;        } else {            if (strpos($whatWeWant, $typeSeperator) === false) {                return strncmp($whatWeWant, $toCheck, strpos($toCheck, $typeSeperator)) == 0;            } else {                return false;            }        }    }    /**     * Analyzes SQL queries     *     * @param array   The SQL queries     *     * @return array   The analyzed SQL queries     *     * @access public     */    function PMA_SQP_analyze($arr)    {        if ($arr == array() || ! isset($arr['len'])) {            return array();        }        $result          = array();        $size            = $arr['len'];        $subresult       = array(            'querytype'      => '',            'select_expr_clause'=> '', // the whole stuff between SELECT and FROM , except DISTINCT            'position_of_first_select' => '', // the array index            'from_clause'=> '',            'group_by_clause'=> '',            'order_by_clause'=> '',            'having_clause'  => '',            'limit_clause'  => '',            'where_clause'   => '',            'where_clause_identifiers'   => array(),            'unsorted_query' => '',            'queryflags'     => array(),            'select_expr'    => array(),            'table_ref'      => array(),            'foreign_keys'   => array(),            'create_table_fields' => array()        );        $subresult_empty = $subresult;        $seek_queryend         = false;        $seen_end_of_table_ref = false;        $number_of_brackets_in_extract = 0;        $number_of_brackets_in_group_concat = 0;        $number_of_brackets = 0;        $in_subquery = false;        $seen_subquery = false;        $seen_from = false;        // for SELECT EXTRACT(YEAR_MONTH FROM CURDATE())        // we must not use CURDATE as a table_ref        // so we track whether we are in the EXTRACT()        $in_extract          = false;        // for GROUP_CONCAT(...)        $in_group_concat     = false;        /* Description of analyzer results         *         * db, table, column, alias         * ------------------------         *         * Inside the $subresult array, we create ['select_expr'] and ['table_ref'] arrays.         *         * The SELECT syntax (simplified) is         *         * SELECT         *    select_expression,...         *    [FROM [table_references]         *         *         * ['select_expr'] is filled with each expression, the key represents the         * expression position in the list (0-based) (so we don't lose track of         * multiple occurences of the same column).         *         * ['table_ref'] is filled with each table ref, same thing for the key.         *         * I create all sub-values empty, even if they are         * not present (for example no select_expression alias).         *         * There is a debug section at the end of loop #1, if you want to         * see the exact contents of select_expr and table_ref         *         * queryflags         * ----------         *         * In $subresult, array 'queryflags' is filled, according to what we         * find in the query.         *         * Currently, those are generated:         *         * ['queryflags']['need_confirm'] = 1; if the query needs confirmation         * ['queryflags']['select_from'] = 1;  if this is a real SELECT...FROM         * ['queryflags']['distinct'] = 1;     for a DISTINCT         * ['queryflags']['union'] = 1;        for a UNION         * ['queryflags']['join'] = 1;         for a JOIN         * ['queryflags']['offset'] = 1;       for the presence of OFFSET         * ['queryflags']['procedure'] = 1;    for the presence of PROCEDURE         *         * query clauses         * -------------         *         * The select is splitted in those clauses:         * ['select_expr_clause']         * ['from_clause']         * ['group_by_clause']         * ['order_by_clause']         * ['having_clause']         * ['limit_clause']         * ['where_clause']         *         * The identifiers of the WHERE clause are put into the array         * ['where_clause_identifier']         *         * For a SELECT, the whole query without the ORDER BY clause is put into         * ['unsorted_query']         *         * foreign keys         * ------------         * The CREATE TABLE may contain FOREIGN KEY clauses, so they get         * analyzed and ['foreign_keys'] is an array filled with         * the constraint name, the index list,         * the REFERENCES table name and REFERENCES index list,         * and ON UPDATE | ON DELETE clauses         *         * position_of_first_select         * ------------------------         *         * The array index of the first SELECT we find. Will be used to         * insert a SQL_CALC_FOUND_ROWS.         *         * create_table_fields         * -------------------         *         * Used to detect the DEFAULT CURRENT_TIMESTAMP and         * ON UPDATE CURRENT_TIMESTAMP clauses of the CREATE TABLE query.         * Also used to store the default value of the field.         * An array, each element is the identifier name.         * Note that for now, the timestamp_not_null element is created         * even for non-TIMESTAMP fields.         *         * Sub-elements: ['type'] which contains the column type         *               optional (currently they are never false but can be absent):         *               ['default_current_timestamp'] boolean         *               ['on_update_current_timestamp'] boolean         *               ['timestamp_not_null'] boolean         *         * section_before_limit, section_after_limit         * -----------------------------------------         *         * Marks the point of the query where we can insert a LIMIT clause;         * so the section_before_limit will contain the left part before         * a possible LIMIT clause         *         *         * End of description of analyzer results         */        // must be sorted        // TODO: current logic checks for only one word, so I put only the        // first word of the reserved expressions that end a table ref;        // maybe this is not ok (the first word might mean something else)        //        $words_ending_table_ref = array(        //            'FOR UPDATE',        //            'GROUP BY',        //            'HAVING',        //            'LIMIT',        //            'LOCK IN SHARE MODE',        //            'ORDER BY',        //            'PROCEDURE',        //            'UNION',        //            'WHERE'        //        );        $words_ending_table_ref = array(            'FOR' => 1,            'GROUP' => 1,            'HAVING' => 1,            'LIMIT' => 1,            'LOCK' => 1,            'ORDER' => 1,            'PROCEDURE' => 1,            'UNION' => 1,            'WHERE' => 1        );        $words_ending_clauses = array(            'FOR' => 1,            'LIMIT' => 1,            'LOCK' => 1,            'PROCEDURE' => 1,            'UNION' => 1        );        $supported_query_types = array(            'SELECT' => 1,            /*            // Support for these additional query types will come later on.            'DELETE' => 1,            'INSERT' => 1,            'REPLACE' => 1,            'TRUNCATE' => 1,            'UPDATE' => 1,            'EXPLAIN' => 1,            'DESCRIBE' => 1,            'SHOW' => 1,            'CREATE' => 1,            'SET' => 1,            'ALTER' => 1            */        );        // loop #1 for each token: select_expr, table_ref for SELECT        for ($i = 0; $i < $size; $i++) {            //DEBUG echo "Loop1 <strong>"  . $arr[$i]['data'] . "</strong> (" . $arr[$i]['type'] . ")<br />";            // High speed seek for locating the end of the current query            if ($seek_queryend == true) {                if ($arr[$i]['type'] == 'punct_queryend') {                    $seek_queryend = false;                } else {                    continue;                } // end if (type == punct_queryend)            } // end if ($seek_queryend)            /**             * Note: do not split if this is a punct_queryend for the first and only query             * @todo when we find a UNION, should we split in another subresult?             */            if ($arr[$i]['type'] == 'punct_queryend' && ($i + 1 != $size)) {                $result[]  = $subresult;                $subresult = $subresult_empty;                continue;            } // end if (type == punct_queryend)            // ==============================================================            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $number_of_brackets++;                if ($in_extract) {                    $number_of_brackets_in_extract++;                }                if ($in_group_concat) {                    $number_of_brackets_in_group_concat++;                }            }            // ==============================================================            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $number_of_brackets--;                if ($number_of_brackets == 0) {                    $in_subquery = false;                }                if ($in_extract) {                    $number_of_brackets_in_extract--;                    if ($number_of_brackets_in_extract == 0) {                       $in_extract = false;                    }                }                if ($in_group_concat) {                    $number_of_brackets_in_group_concat--;                    if ($number_of_brackets_in_group_concat == 0) {                       $in_group_concat = false;                    }                }            }            if ($in_subquery) {                /**                 * skip the subquery to avoid setting                 * select_expr or table_ref with the contents                 * of this subquery; this is to avoid a bug when                 * trying to edit the results of                 * select * from child where not exists (select id from                 * parent where child.parent_id = parent.id);                 */                continue;            }            // ==============================================================            if ($arr[$i]['type'] == 'alpha_functionName') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data =='EXTRACT') {                    $in_extract = true;                    $number_of_brackets_in_extract = 0;                }                if ($upper_data =='GROUP_CONCAT') {                    $in_group_concat = true;                    $number_of_brackets_in_group_concat = 0;                }            }            // ==============================================================            if ($arr[$i]['type'] == 'alpha_reservedWord'                //&& $arr[$i]['forbidden'] == false) {                ) {                // We don't know what type of query yet, so run this                if ($subresult['querytype'] == '') {                    $subresult['querytype'] = strtoupper($arr[$i]['data']);                } // end if (querytype was empty)                // Check if we support this type of query                if (!isset($supported_query_types[$subresult['querytype']])) {                    // Skip ahead to the next one if we don't                    $seek_queryend = true;                    continue;                } // end if (query not supported)                // upper once                $upper_data = strtoupper($arr[$i]['data']);                /**                 * @todo reset for each query?                 */                if ($upper_data == 'SELECT') {                    if ($number_of_brackets > 0) {                        $in_subquery = true;                        $seen_subquery = true;                        // this is a subquery so do not analyze inside it                        continue;                    }                    $seen_from = false;                    $previous_was_identifier = false;                    $current_select_expr = -1;                    $seen_end_of_table_ref = false;                } // end if (data == SELECT)                if ($upper_data =='FROM' && !$in_extract) {                    $current_table_ref = -1;                    $seen_from = true;                    $previous_was_identifier = false;                    $save_table_ref = true;                } // end if (data == FROM)                // here, do not 'continue' the loop, as we have more work for                // reserved words below            } // end if (type == alpha_reservedWord)            // ==============================            if ($arr[$i]['type'] == 'quote_backtick'             || $arr[$i]['type'] == 'quote_double'             || $arr[$i]['type'] == 'quote_single'             || $arr[$i]['type'] == 'alpha_identifier'             || ($arr[$i]['type'] == 'alpha_reservedWord'                && $arr[$i]['forbidden'] == false)) {                switch ($arr[$i]['type']) {                case 'alpha_identifier':                case 'alpha_reservedWord':                    /**                     * this is not a real reservedWord, because it's not                     * present in the list of forbidden words, for example                     * "storage" which can be used as an identifier                     *                     * @todo avoid the pretty printing in color in this case                     */                    $identifier = $arr[$i]['data'];                    break;                case 'quote_backtick':                case 'quote_double':                case 'quote_single':                    $identifier = PMA_unQuote($arr[$i]['data']);                    break;                } // end switch                if ($subresult['querytype'] == 'SELECT'                 && ! $in_group_concat                 && ! ($seen_subquery && $arr[$i - 1]['type'] == 'punct_bracket_close_round')) {                    if (!$seen_from) {                        if ($previous_was_identifier && isset($chain)) {                            // found alias for this select_expr, save it                            // but only if we got something in $chain                            // (for example, SELECT COUNT(*) AS cnt                            // puts nothing in $chain, so we avoid                            // setting the alias)                            $alias_for_select_expr = $identifier;                        } else {                            $chain[] = $identifier;                            $previous_was_identifier = true;                        } // end if !$previous_was_identifier                    } else {                        // ($seen_from)                        if ($save_table_ref && !$seen_end_of_table_ref) {                            if ($previous_was_identifier) {                                // found alias for table ref                                // save it for later                                $alias_for_table_ref = $identifier;                            } else {                                $chain[] = $identifier;                                $previous_was_identifier = true;                            } // end if ($previous_was_identifier)                        } // end if ($save_table_ref &&!$seen_end_of_table_ref)                    } // end if (!$seen_from)                } // end if (querytype SELECT)            } // end if (quote_backtick or double quote or alpha_identifier)            // ===================================            if ($arr[$i]['type'] == 'punct_qualifier') {                // to be able to detect an identifier following another                $previous_was_identifier = false;                continue;            } // end if (punct_qualifier)            /**             * @todo check if 3 identifiers following one another -> error             */            //    s a v e    a    s e l e c t    e x p r            // finding a list separator or FROM            // means that we must save the current chain of identifiers            // into a select expression            // for now, we only save a select expression if it contains            // at least one identifier, as we are interested in checking            // the columns and table names, so in "select * from persons",            // the "*" is not saved            if (isset($chain) && !$seen_end_of_table_ref             && ((!$seen_from && $arr[$i]['type'] == 'punct_listsep')              || ($arr[$i]['type'] == 'alpha_reservedWord' && $upper_data == 'FROM'))) {                $size_chain = count($chain);                $current_select_expr++;                $subresult['select_expr'][$current_select_expr] = array(                  'expr' => '',                  'alias' => '',                  'db'   => '',                  'table_name' => '',                  'table_true_name' => '',                  'column' => ''                 );                if (isset($alias_for_select_expr) && strlen($alias_for_select_expr)) {                    // we had found an alias for this select expression                    $subresult['select_expr'][$current_select_expr]['alias'] = $alias_for_select_expr;                    unset($alias_for_select_expr);                }                // there is at least a column                $subresult['select_expr'][$current_select_expr]['column'] = $chain[$size_chain - 1];                $subresult['select_expr'][$current_select_expr]['expr'] = $chain[$size_chain - 1];                // maybe a table                if ($size_chain > 1) {                    $subresult['select_expr'][$current_select_expr]['table_name'] = $chain[$size_chain - 2];                    // we assume for now that this is also the true name                    $subresult['select_expr'][$current_select_expr]['table_true_name'] = $chain[$size_chain - 2];                    $subresult['select_expr'][$current_select_expr]['expr']                        = $subresult['select_expr'][$current_select_expr]['table_name']                        . '.' . $subresult['select_expr'][$current_select_expr]['expr'];                } // end if ($size_chain > 1)                // maybe a db                if ($size_chain > 2) {                    $subresult['select_expr'][$current_select_expr]['db'] = $chain[$size_chain - 3];                    $subresult['select_expr'][$current_select_expr]['expr']                        = $subresult['select_expr'][$current_select_expr]['db']                        . '.' . $subresult['select_expr'][$current_select_expr]['expr'];                } // end if ($size_chain > 2)                unset($chain);                /**                 * @todo explain this:                 */                if (($arr[$i]['type'] == 'alpha_reservedWord')                 && ($upper_data != 'FROM')) {                    $previous_was_identifier = true;                }            } // end if (save a select expr)            //======================================            //    s a v e    a    t a b l e    r e f            //======================================            // maybe we just saw the end of table refs            // but the last table ref has to be saved            // or we are at the last token            // or we just got a reserved word            /**             * @todo there could be another query after this one             */            if (isset($chain) && $seen_from && $save_table_ref             && ($arr[$i]['type'] == 'punct_listsep'               || ($arr[$i]['type'] == 'alpha_reservedWord' && $upper_data!="AS")               || $seen_end_of_table_ref               || $i==$size-1)) {                $size_chain = count($chain);                $current_table_ref++;                $subresult['table_ref'][$current_table_ref] = array(                  'expr'            => '',                  'db'              => '',                  'table_name'      => '',                  'table_alias'     => '',                  'table_true_name' => ''                 );                if (isset($alias_for_table_ref) && strlen($alias_for_table_ref)) {                    $subresult['table_ref'][$current_table_ref]['table_alias'] = $alias_for_table_ref;                    unset($alias_for_table_ref);                }                $subresult['table_ref'][$current_table_ref]['table_name'] = $chain[$size_chain - 1];                // we assume for now that this is also the true name                $subresult['table_ref'][$current_table_ref]['table_true_name'] = $chain[$size_chain - 1];                $subresult['table_ref'][$current_table_ref]['expr']                    = $subresult['table_ref'][$current_table_ref]['table_name'];                // maybe a db                if ($size_chain > 1) {                    $subresult['table_ref'][$current_table_ref]['db'] = $chain[$size_chain - 2];                    $subresult['table_ref'][$current_table_ref]['expr']                        = $subresult['table_ref'][$current_table_ref]['db']                        . '.' . $subresult['table_ref'][$current_table_ref]['expr'];                } // end if ($size_chain > 1)                // add the table alias into the whole expression                $subresult['table_ref'][$current_table_ref]['expr']                 .= ' ' . $subresult['table_ref'][$current_table_ref]['table_alias'];                unset($chain);                $previous_was_identifier = true;                //continue;            } // end if (save a table ref)            // when we have found all table refs,            // for each table_ref alias, put the true name of the table            // in the corresponding select expressions            if (isset($current_table_ref) && ($seen_end_of_table_ref || $i == $size-1) && $subresult != $subresult_empty) {                for ($tr=0; $tr <= $current_table_ref; $tr++) {                    $alias = $subresult['table_ref'][$tr]['table_alias'];                    $truename = $subresult['table_ref'][$tr]['table_true_name'];                    for ($se=0; $se <= $current_select_expr; $se++) {                        if (isset($alias)                            && strlen($alias)                            && $subresult['select_expr'][$se]['table_true_name'] == $alias                        ) {                            $subresult['select_expr'][$se]['table_true_name'] = $truename;                        } // end if (found the alias)                    } // end for (select expressions)                } // end for (table refs)            } // end if (set the true names)            // e n d i n g    l o o p  #1            // set the $previous_was_identifier to false if the current            // token is not an identifier            if (($arr[$i]['type'] != 'alpha_identifier')             && ($arr[$i]['type'] != 'quote_double')             && ($arr[$i]['type'] != 'quote_single')             && ($arr[$i]['type'] != 'quote_backtick')) {                $previous_was_identifier = false;            } // end if            // however, if we are on AS, we must keep the $previous_was_identifier            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data == 'AS')) {                $previous_was_identifier = true;            }            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data =='ON' || $upper_data =='USING')) {                $save_table_ref = false;            } // end if (data == ON)            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data =='JOIN' || $upper_data =='FROM')) {                $save_table_ref = true;            } // end if (data == JOIN)            /**             * no need to check the end of table ref if we already did             *             * @todo maybe add "&& $seen_from"             */            if (!$seen_end_of_table_ref) {                // if this is the last token, it implies that we have                // seen the end of table references                // Check for the end of table references                //                // Note: if we are analyzing a GROUP_CONCAT clause,                // we might find a word that seems to indicate that                // we have found the end of table refs (like ORDER)                // but it's a modifier of the GROUP_CONCAT so                // it's not the real end of table refs                if (($i == $size-1)                 || ($arr[$i]['type'] == 'alpha_reservedWord'                 && !$in_group_concat                 && isset($words_ending_table_ref[$upper_data]))) {                    $seen_end_of_table_ref = true;                    // to be able to save the last table ref, but do not                    // set it true if we found a word like "ON" that has                    // already set it to false                    if (isset($save_table_ref) && $save_table_ref != false) {                        $save_table_ref = true;                    } //end if                } // end if (check for end of table ref)            } //end if (!$seen_end_of_table_ref)            if ($seen_end_of_table_ref) {                $save_table_ref = false;            } // end if        } // end for $i (loop #1)        //DEBUG        /*          if (isset($current_select_expr)) {           for ($trace=0; $trace<=$current_select_expr; $trace++) {               echo "<br />";               reset ($subresult['select_expr'][$trace]);               while (list ($key, $val) = each ($subresult['select_expr'][$trace]))                   echo "sel expr $trace $key => $val<br />\n";               }          }          if (isset($current_table_ref)) {           echo "current_table_ref = " . $current_table_ref . "<br>";           for ($trace=0; $trace<=$current_table_ref; $trace++) {               echo "<br />";               reset ($subresult['table_ref'][$trace]);               while (list ($key, $val) = each ($subresult['table_ref'][$trace]))               echo "table ref $trace $key => $val<br />\n";               }          }        */        // -------------------------------------------------------        // loop #2: - queryflags        //          - querytype (for queries != 'SELECT')        //          - section_before_limit, section_after_limit        //        // we will also need this queryflag in loop 2        // so set it here        if (isset($current_table_ref) && $current_table_ref > -1) {            $subresult['queryflags']['select_from'] = 1;        }        $section_before_limit = '';        $section_after_limit = ''; // truly the section after the limit clause        $seen_reserved_word = false;        $seen_group = false;        $seen_order = false;        $seen_order_by = false;        $in_group_by = false; // true when we are inside the GROUP BY clause        $in_order_by = false; // true when we are inside the ORDER BY clause        $in_having = false; // true when we are inside the HAVING clause        $in_select_expr = false; // true when we are inside the select expr clause        $in_where = false; // true when we are inside the WHERE clause        $seen_limit = false; // true if we have seen a LIMIT clause        $in_limit = false; // true when we are inside the LIMIT clause        $after_limit = false; // true when we are after the LIMIT clause        $in_from = false; // true when we are in the FROM clause        $in_group_concat = false;        $first_reserved_word = '';        $current_identifier = '';        $unsorted_query = $arr['raw']; // in case there is no ORDER BY        $number_of_brackets = 0;        $in_subquery = false;        for ($i = 0; $i < $size; $i++) {            //DEBUG echo "Loop2 <strong>"  . $arr[$i]['data'] . "</strong> (" . $arr[$i]['type'] . ")<br />";            // need_confirm            //            // check for reserved words that will have to generate            // a confirmation request later in sql.php            // the cases are:            //   DROP TABLE            //   DROP DATABASE            //   ALTER TABLE... DROP            //   DELETE FROM...            //            // this code is not used for confirmations coming from functions.js            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $number_of_brackets++;            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $number_of_brackets--;                if ($number_of_brackets == 0) {                    $in_subquery = false;                }            }            if ($arr[$i]['type'] == 'alpha_reservedWord') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data == 'SELECT' && $number_of_brackets > 0) {                    $in_subquery = true;                }                if (!$seen_reserved_word) {                    $first_reserved_word = $upper_data;                    $subresult['querytype'] = $upper_data;                    $seen_reserved_word = true;                    // if the first reserved word is DROP or DELETE,                    // we know this is a query that needs to be confirmed                    if ($first_reserved_word=='DROP'                     || $first_reserved_word == 'DELETE'                     || $first_reserved_word == 'TRUNCATE') {                        $subresult['queryflags']['need_confirm'] = 1;                    }                    if ($first_reserved_word=='SELECT') {                        $position_of_first_select = $i;                    }                } else {                    if ($upper_data == 'DROP' && $first_reserved_word == 'ALTER') {                        $subresult['queryflags']['need_confirm'] = 1;                    }                }                if ($upper_data == 'LIMIT' && ! $in_subquery) {                    $section_before_limit = substr($arr['raw'], 0, $arr[$i]['pos'] - 5);                    $in_limit = true;                    $seen_limit = true;                    $limit_clause = '';                    $in_order_by = false; // @todo maybe others to set false                }                if ($upper_data == 'PROCEDURE') {                    $subresult['queryflags']['procedure'] = 1;                    $in_limit = false;                    $after_limit = true;                }                /**                 * @todo set also to false if we find FOR UPDATE or LOCK IN SHARE MODE                 */                if ($upper_data == 'SELECT') {                    $in_select_expr = true;                    $select_expr_clause = '';                }                if ($upper_data == 'DISTINCT' && !$in_group_concat) {                    $subresult['queryflags']['distinct'] = 1;                }                if ($upper_data == 'UNION') {                    $subresult['queryflags']['union'] = 1;                }                if ($upper_data == 'JOIN') {                    $subresult['queryflags']['join'] = 1;                }                if ($upper_data == 'OFFSET') {                    $subresult['queryflags']['offset'] = 1;                }                // if this is a real SELECT...FROM                if ($upper_data == 'FROM' && isset($subresult['queryflags']['select_from']) && $subresult['queryflags']['select_from'] == 1) {                    $in_from = true;                    $from_clause = '';                    $in_select_expr = false;                }                // (we could have less resetting of variables to false                // if we trust that the query respects the standard                // MySQL order for clauses)                // we use $seen_group and $seen_order because we are looking                // for the BY                if ($upper_data == 'GROUP') {                    $seen_group = true;                    $seen_order = false;                    $in_having = false;                    $in_order_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'ORDER' && !$in_group_concat) {                    $seen_order = true;                    $seen_group = false;                    $in_having = false;                    $in_group_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'HAVING') {                    $in_having = true;                    $having_clause = '';                    $seen_group = false;                    $seen_order = false;                    $in_group_by = false;                    $in_order_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'WHERE') {                    $in_where = true;                    $where_clause = '';                    $where_clause_identifiers = array();                    $seen_group = false;                    $seen_order = false;                    $in_group_by = false;                    $in_order_by = false;                    $in_having = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'BY') {                    if ($seen_group) {                        $in_group_by = true;                        $group_by_clause = '';                    }                    if ($seen_order) {                        $seen_order_by = true;                        // Here we assume that the ORDER BY keywords took                        // exactly 8 characters.                        // We use PMA_substr() to be charset-safe; otherwise                        // if the table name contains accents, the unsorted                        // query would be missing some characters.                        $unsorted_query = PMA_substr($arr['raw'], 0, $arr[$i]['pos'] - 8);                        $in_order_by = true;                        $order_by_clause = '';                    }                }                // if we find one of the words that could end the clause                if (isset($words_ending_clauses[$upper_data])) {                    $in_group_by = false;                    $in_order_by = false;                    $in_having   = false;                    $in_where    = false;                    $in_select_expr = false;                    $in_from = false;                }            } // endif (reservedWord)            // do not add a space after a function name            /**             * @todo can we combine loop 2 and loop 1? some code is repeated here...             */            $sep = ' ';            if ($arr[$i]['type'] == 'alpha_functionName') {                $sep='';                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data =='GROUP_CONCAT') {                    $in_group_concat = true;                    $number_of_brackets_in_group_concat = 0;                }            }            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                if ($in_group_concat) {                    $number_of_brackets_in_group_concat++;                }            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                if ($in_group_concat) {                    $number_of_brackets_in_group_concat--;                    if ($number_of_brackets_in_group_concat == 0) {                        $in_group_concat = false;                    }                }            }            // do not add a space after an identifier if followed by a dot            if ($arr[$i]['type'] == 'alpha_identifier' && $i < $size - 1 && $arr[$i + 1]['data'] == '.') {                $sep = '';            }            // do not add a space after a dot if followed by an identifier            if ($arr[$i]['data'] == '.' && $i < $size - 1 && $arr[$i + 1]['type'] == 'alpha_identifier') {                $sep = '';            }            if ($in_select_expr && $upper_data != 'SELECT' && $upper_data != 'DISTINCT') {                $select_expr_clause .= $arr[$i]['data'] . $sep;            }            if ($in_from && $upper_data != 'FROM') {                $from_clause .= $arr[$i]['data'] . $sep;            }            if ($in_group_by && $upper_data != 'GROUP' && $upper_data != 'BY') {                $group_by_clause .= $arr[$i]['data'] . $sep;            }            if ($in_order_by && $upper_data != 'ORDER' && $upper_data != 'BY') {                // add a space only before ASC or DESC                // not around the dot between dbname and tablename                if ($arr[$i]['type'] == 'alpha_reservedWord') {                    $order_by_clause .= $sep;                }                $order_by_clause .= $arr[$i]['data'];            }            if ($in_having && $upper_data != 'HAVING') {                $having_clause .= $arr[$i]['data'] . $sep;            }            if ($in_where && $upper_data != 'WHERE') {                $where_clause .= $arr[$i]['data'] . $sep;                if (($arr[$i]['type'] == 'quote_backtick')                 || ($arr[$i]['type'] == 'alpha_identifier')) {                    $where_clause_identifiers[] = $arr[$i]['data'];                }            }            // to grab the rest of the query after the ORDER BY clause            if (isset($subresult['queryflags']['select_from'])             && $subresult['queryflags']['select_from'] == 1             && ! $in_order_by             && $seen_order_by             && $upper_data != 'BY') {                $unsorted_query .= $arr[$i]['data'];                if ($arr[$i]['type'] != 'punct_bracket_open_round'                 && $arr[$i]['type'] != 'punct_bracket_close_round'                 && $arr[$i]['type'] != 'punct') {                    $unsorted_query .= $sep;                }            }            if ($in_limit) {                if ($upper_data == 'OFFSET') {                    $limit_clause .= $sep;                }                $limit_clause .= $arr[$i]['data'];                if ($upper_data == 'LIMIT' || $upper_data == 'OFFSET') {                    $limit_clause .= $sep;                }            }            if ($after_limit && $seen_limit) {                $section_after_limit .= $arr[$i]['data'] . $sep;            }            // clear $upper_data for next iteration            $upper_data='';        } // end for $i (loop #2)        if (empty($section_before_limit)) {            $section_before_limit = $arr['raw'];        }        // -----------------------------------------------------        // loop #3: foreign keys and MySQL 4.1.2+ TIMESTAMP options        // (for now, check only the first query)        // (for now, identifiers are assumed to be backquoted)        // If we find that we are dealing with a CREATE TABLE query,        // we look for the next punct_bracket_open_round, which        // introduces the fields list. Then, when we find a        // quote_backtick, it must be a field, so we put it into        // the create_table_fields array. Even if this field is        // not a timestamp, it will be useful when logic has been        // added for complete field attributes analysis.        $seen_foreign = false;        $seen_references = false;        $seen_constraint = false;        $foreign_key_number = -1;        $seen_create_table = false;        $seen_create = false;        $seen_alter = false;        $in_create_table_fields = false;        $brackets_level = 0;        $in_timestamp_options = false;        $seen_default = false;        for ($i = 0; $i < $size; $i++) {        // DEBUG echo "Loop 3 <strong>" . $arr[$i]['data'] . "</strong> " . $arr[$i]['type'] . "<br />";            if ($arr[$i]['type'] == 'alpha_reservedWord') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data == 'NOT' && $in_timestamp_options) {                    $create_table_fields[$current_identifier]['timestamp_not_null'] = true;                }                if ($upper_data == 'CREATE') {                    $seen_create = true;                }                if ($upper_data == 'ALTER') {                    $seen_alter = true;                }                if ($upper_data == 'TABLE' && $seen_create) {                    $seen_create_table = true;                    $create_table_fields = array();                }                if ($upper_data == 'CURRENT_TIMESTAMP') {                    if ($in_timestamp_options) {                        if ($seen_default) {                            $create_table_fields[$current_identifier]['default_current_timestamp'] = true;                        }                    }                }                if ($upper_data == 'CONSTRAINT') {                    $foreign_key_number++;                    $seen_foreign = false;                    $seen_references = false;                    $seen_constraint = true;                }                if ($upper_data == 'FOREIGN') {                    $seen_foreign = true;                    $seen_references = false;                    $seen_constraint = false;                }                if ($upper_data == 'REFERENCES') {                    $seen_foreign = false;                    $seen_references = true;                    $seen_constraint = false;                }                // Cases covered:                // [ON DELETE {CASCADE | SET NULL | NO ACTION | RESTRICT}]                // [ON UPDATE {CASCADE | SET NULL | NO ACTION | RESTRICT}]                // but we set ['on_delete'] or ['on_cascade'] to                // CASCADE | SET_NULL | NO_ACTION | RESTRICT                // ON UPDATE CURRENT_TIMESTAMP                if ($upper_data == 'ON') {                    if (isset($arr[$i+1]) && $arr[$i+1]['type'] == 'alpha_reservedWord') {                        $second_upper_data = strtoupper($arr[$i+1]['data']);                        if ($second_upper_data == 'DELETE') {                            $clause = 'on_delete';                        }                        if ($second_upper_data == 'UPDATE') {                            $clause = 'on_update';                        }                        if (isset($clause)                        && ($arr[$i+2]['type'] == 'alpha_reservedWord'                // ugly workaround because currently, NO is not                // in the list of reserved words in sqlparser.data                // (we got a bug report about not being able to use                // 'no' as an identifier)                           || ($arr[$i+2]['type'] == 'alpha_identifier'                              && strtoupper($arr[$i+2]['data'])=='NO'))                          ) {                            $third_upper_data = strtoupper($arr[$i+2]['data']);                            if ($third_upper_data == 'CASCADE'                            || $third_upper_data == 'RESTRICT') {                                $value = $third_upper_data;                            } elseif ($third_upper_data == 'SET'                              || $third_upper_data == 'NO') {                                if ($arr[$i+3]['type'] == 'alpha_reservedWord') {                                    $value = $third_upper_data . '_' . strtoupper($arr[$i+3]['data']);                                }                            } elseif ($third_upper_data == 'CURRENT_TIMESTAMP') {                                if ($clause == 'on_update'                                && $in_timestamp_options) {                                    $create_table_fields[$current_identifier]['on_update_current_timestamp'] = true;                                    $seen_default = false;                                }                            } else {                                $value = '';                            }                            if (!empty($value)) {                                $foreign[$foreign_key_number][$clause] = $value;                            }                            unset($clause);                        } // endif (isset($clause))                    }                }            } // end of reserved words analysis            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $brackets_level++;                if ($seen_create_table && $brackets_level == 1) {                    $in_create_table_fields = true;                }            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $brackets_level--;                if ($seen_references) {                    $seen_references = false;                }                if ($seen_create_table && $brackets_level == 0) {                    $in_create_table_fields = false;                }            }            if (($arr[$i]['type'] == 'alpha_columnAttrib')) {                $upper_data = strtoupper($arr[$i]['data']);                if ($seen_create_table && $in_create_table_fields) {                    if ($upper_data == 'DEFAULT') {                        $seen_default = true;                        $create_table_fields[$current_identifier]['default_value'] = $arr[$i + 1]['data'];                    }                }            }            /**             * @see @todo 2005-10-16 note: the "or" part here is a workaround for a bug             */            if (($arr[$i]['type'] == 'alpha_columnType') || ($arr[$i]['type'] == 'alpha_functionName' && $seen_create_table)) {                $upper_data = strtoupper($arr[$i]['data']);                if ($seen_create_table && $in_create_table_fields && isset($current_identifier)) {                    $create_table_fields[$current_identifier]['type'] = $upper_data;                    if ($upper_data == 'TIMESTAMP') {                        $arr[$i]['type'] = 'alpha_columnType';                        $in_timestamp_options = true;                    } else {                        $in_timestamp_options = false;                        if ($upper_data == 'CHAR') {                            $arr[$i]['type'] = 'alpha_columnType';                        }                    }                }            }            if ($arr[$i]['type'] == 'quote_backtick' || $arr[$i]['type'] == 'alpha_identifier') {                if ($arr[$i]['type'] == 'quote_backtick') {                    // remove backquotes                    $identifier = PMA_unQuote($arr[$i]['data']);                } else {                    $identifier = $arr[$i]['data'];                }                if ($seen_create_table && $in_create_table_fields) {                    $current_identifier = $identifier;                    // we set this one even for non TIMESTAMP type                    $create_table_fields[$current_identifier]['timestamp_not_null'] = false;                }                if ($seen_constraint) {                    $foreign[$foreign_key_number]['constraint'] = $identifier;                }                if ($seen_foreign && $brackets_level > 0) {                    $foreign[$foreign_key_number]['index_list'][] = $identifier;                }                if ($seen_references) {                    if ($seen_alter && $brackets_level > 0) {                        $foreign[$foreign_key_number]['ref_index_list'][] = $identifier;                        // here, the first bracket level corresponds to the                        // bracket of CREATE TABLE                        // so if we are on level 2, it must be the index list                        // of the foreign key REFERENCES                    } elseif ($brackets_level > 1) {                        $foreign[$foreign_key_number]['ref_index_list'][] = $identifier;                    } elseif ($arr[$i+1]['type'] == 'punct_qualifier') {                        // identifier is `db`.`table`                        // the first pass will pick the db name                        // the next pass will pick the table name                        $foreign[$foreign_key_number]['ref_db_name'] = $identifier;                    } else {                        // identifier is `table`                        $foreign[$foreign_key_number]['ref_table_name'] = $identifier;                    }                }            }        } // end for $i (loop #3)        // Fill the $subresult array        if (isset($create_table_fields)) {            $subresult['create_table_fields'] = $create_table_fields;        }        if (isset($foreign)) {            $subresult['foreign_keys'] = $foreign;        }        if (isset($select_expr_clause)) {            $subresult['select_expr_clause'] = $select_expr_clause;        }        if (isset($from_clause)) {            $subresult['from_clause'] = $from_clause;        }        if (isset($group_by_clause)) {            $subresult['group_by_clause'] = $group_by_clause;        }        if (isset($order_by_clause)) {            $subresult['order_by_clause'] = $order_by_clause;        }        if (isset($having_clause)) {            $subresult['having_clause'] = $having_clause;        }        if (isset($limit_clause)) {            $subresult['limit_clause'] = $limit_clause;        }        if (isset($where_clause)) {            $subresult['where_clause'] = $where_clause;        }        if (isset($unsorted_query) && !empty($unsorted_query)) {            $subresult['unsorted_query'] = $unsorted_query;        }        if (isset($where_clause_identifiers)) {            $subresult['where_clause_identifiers'] = $where_clause_identifiers;        }        if (isset($position_of_first_select)) {            $subresult['position_of_first_select'] = $position_of_first_select;            $subresult['section_before_limit'] = $section_before_limit;            $subresult['section_after_limit'] = $section_after_limit;        }        // They are naughty and didn't have a trailing semi-colon,        // then still handle it properly        if ($subresult['querytype'] != '') {            $result[] = $subresult;        }        return $result;    } // end of the "PMA_SQP_analyze()" function    /**     * Colorizes SQL queries html formatted     *     * @todo check why adding a "\n" after the </span> would cause extra blanks     * to be displayed: SELECT p . person_name     * @param array   The SQL queries html formatted     *     * @return array   The colorized SQL queries     *     * @access public     */    function PMA_SQP_formatHtml_colorize($arr)    {        $i         = PMA_strpos($arr['type'], '_');        $class     = '';        if ($i > 0) {            $class = 'syntax_' . PMA_substr($arr['type'], 0, $i) . ' ';        }        $class     .= 'syntax_' . $arr['type'];        return '<span class="' . $class . '">' . htmlspecialchars($arr['data']) . '</span>';    } // end of the "PMA_SQP_formatHtml_colorize()" function    /**     * Formats SQL queries to html     *     * @param array   The SQL queries     * @param string  mode     * @param integer starting token     * @param integer number of tokens to format, -1 = all     *     * @return string  The formatted SQL queries     *     * @access public     */    function PMA_SQP_formatHtml($arr, $mode='color', $start_token=0,        $number_of_tokens=-1)    {        global $PMA_SQPdata_operators_docs, $PMA_SQPdata_functions_docs;        //DEBUG echo 'in Format<pre>'; print_r($arr); echo '</pre>';        // then check for an array        if (! is_array($arr)) {            return htmlspecialchars($arr);        }        // first check for the SQL parser having hit an error        if (PMA_SQP_isError()) {            return htmlspecialchars($arr['raw']);        }        // else do it properly        switch ($mode) {        case 'color':            $str                                = '<span class="syntax">';            $html_line_break                    = '<br />';            $docu                               = true;            break;        case 'query_only':            $str                                = '';            $html_line_break                    = "\n";            $docu                               = false;            break;        case 'text':            $str                                = '';            $html_line_break                    = '<br />';            $docu                               = true;            break;        } // end switch        // inner_sql is a span that exists for all cases, except query_only        // of $cfg['SQP']['fmtType'] to make possible a replacement        // for inline editing        if ($mode!='query_only') {            $str .= '<span class="inner_sql">';        }        $close_docu_link = false;        $indent                                     = 0;        $bracketlevel                               = 0;        $functionlevel                              = 0;        $infunction                                 = false;        $space_punct_listsep                        = ' ';        $space_punct_listsep_function_name          = ' ';        // $space_alpha_reserved_word = '<br />'."\n";        $space_alpha_reserved_word                  = ' ';        $keywords_with_brackets_1before            = array(            'INDEX' => 1,            'KEY' => 1,            'ON' => 1,            'USING' => 1        );        $keywords_with_brackets_2before            = array(            'IGNORE' => 1,            'INDEX' => 1,            'INTO' => 1,            'KEY' => 1,            'PRIMARY' => 1,            'PROCEDURE' => 1,            'REFERENCES' => 1,            'UNIQUE' => 1,            'USE' => 1        );        // These reserved words do NOT get a newline placed near them.        $keywords_no_newline               = array(            'AS' => 1,            'ASC' => 1,            'DESC' => 1,            'DISTINCT' => 1,            'DUPLICATE' => 1,            'HOUR' => 1,            'INTERVAL' => 1,            'IS' => 1,            'LIKE' => 1,            'NOT' => 1,            'NULL' => 1,            'ON' => 1,            'REGEXP' => 1        );        // These reserved words introduce a privilege list        $keywords_priv_list                = array(            'GRANT' => 1,            'REVOKE' => 1        );        if ($number_of_tokens == -1) {            $number_of_tokens = $arr['len'];        }        $typearr   = array();        if ($number_of_tokens >= 0) {            $typearr[0] = '';            $typearr[1] = '';            $typearr[2] = '';            $typearr[3] = $arr[$start_token]['type'];        }        $in_priv_list = false;        for ($i = $start_token; $i < $number_of_tokens; $i++) {            // DEBUG echo "Loop format <strong>" . $arr[$i]['data'] . "</strong> " . $arr[$i]['type'] . "<br />";            $before = '';            $after  = '';            // array_shift($typearr);            /*            0 prev2            1 prev            2 current            3 next            */            if (($i + 1) < $number_of_tokens) {                $typearr[4] = $arr[$i + 1]['type'];            } else {                $typearr[4] = '';            }            for ($j=0; $j<4; $j++) {                $typearr[$j] = $typearr[$j + 1];            }            switch ($typearr[2]) {            case 'alpha_bitfield_constant_introducer':                $before     = ' ';                $after      = '';                break;            case 'white_newline':                $before     = '';                break;            case 'punct_bracket_open_round':                $bracketlevel++;                $infunction = false;                // Make sure this array is sorted!                if (($typearr[1] == 'alpha_functionName') || ($typearr[1] == 'alpha_columnType') || ($typearr[1] == 'punct')                    || ($typearr[3] == 'digit_integer') || ($typearr[3] == 'digit_hex') || ($typearr[3] == 'digit_float')                    || (($typearr[0] == 'alpha_reservedWord')                        && isset($keywords_with_brackets_2before[strtoupper($arr[$i - 2]['data'])]))                    || (($typearr[1] == 'alpha_reservedWord')                        && isset($keywords_with_brackets_1before[strtoupper($arr[$i - 1]['data'])]))                    ) {                    $functionlevel++;                    $infunction = true;                    $after      .= ' ';                } else {                    $indent++;                    $after      .= ($mode != 'query_only' ? '<div class="syntax_indent' . $indent . '">' : ' ');                }                break;            case 'alpha_identifier':                if (($typearr[1] == 'punct_qualifier') || ($typearr[3] == 'punct_qualifier')) {                    $after      = '';                    $before     = '';                }                // for example SELECT 1 somealias                if ($typearr[1] == 'digit_integer') {                    $before     = ' ';                }                if (($typearr[3] == 'alpha_columnType') || ($typearr[3] == 'alpha_identifier')) {                    $after      .= ' ';                }                break;            case 'punct_user':            case 'punct_qualifier':                $before         = '';                $after          = '';                break;            case 'punct_listsep':                if ($infunction == true) {                    $after      .= $space_punct_listsep_function_name;                } else {                    $after      .= $space_punct_listsep;                }                break;            case 'punct_queryend':                if (($typearr[3] != 'comment_mysql') && ($typearr[3] != 'comment_ansi') && $typearr[3] != 'comment_c') {                    $after     .= $html_line_break;                    $after     .= $html_line_break;                }                $space_punct_listsep               = ' ';                $space_punct_listsep_function_name = ' ';                $space_alpha_reserved_word         = ' ';                $in_priv_list                      = false;                break;            case 'comment_mysql':            case 'comment_ansi':                $after         .= $html_line_break;                break;            case 'punct':                $before         .= ' ';                if ($docu && isset($PMA_SQPdata_operators_docs[$arr[$i]['data']]) &&                        ($arr[$i]['data'] != '*' || in_array($arr[$i]['type'], array('digit_integer','digit_float','digit_hex')))) {                    $before .= PMA_showMySQLDocu(                        'functions',                        $PMA_SQPdata_operators_docs[$arr[$i]['data']]['link'],                        false,                        $PMA_SQPdata_operators_docs[$arr[$i]['data']]['anchor'],                        true);                    $after .= '</a>';                }                // workaround for                // select * from mytable limit 0,-1                // (a side effect of this workaround is that                // select 20 - 9                // becomes                // select 20 -9                // )                if ($typearr[3] != 'digit_integer') {                    $after        .= ' ';                }                break;            case 'punct_bracket_close_round':                // only close bracket level when it was opened before                if ($bracketlevel > 0) {                    $bracketlevel--;                    if ($infunction == true) {                        $functionlevel--;                        $after     .= ' ';                        $before    .= ' ';                    } else {                        $indent--;                        $before    .= ($mode != 'query_only' ? '</div>' : ' ');                    }                    $infunction    = ($functionlevel > 0) ? true : false;                }                break;            case 'alpha_columnType':                if ($docu) {                    switch ($arr[$i]['data']) {                    case 'tinyint':                    case 'smallint':                    case 'mediumint':                    case 'int':                    case 'bigint':                    case 'decimal':                    case 'float':                    case 'double':                    case 'real':                    case 'bit':                    case 'boolean':                    case 'serial':                        $before .= PMA_showMySQLDocu('data-types', 'numeric-types', false, '', true);                        $after = '</a>' . $after;                        break;                    case 'date':                    case 'datetime':                    case 'timestamp':                    case 'time':                    case 'year':                        $before .= PMA_showMySQLDocu('data-types', 'date-and-time-types', false, '', true);                        $after = '</a>' . $after;                        break;                    case 'char':                    case 'varchar':                    case 'tinytext':                    case 'text':                    case 'mediumtext':                    case 'longtext':                    case 'binary':                    case 'varbinary':                    case 'tinyblob':                    case 'mediumblob':                    case 'blob':                    case 'longblob':                    case 'enum':                    case 'set':                        $before .= PMA_showMySQLDocu('data-types', 'string-types', false, '', true);                        $after = '</a>' . $after;                        break;                    }                }                if ($typearr[3] == 'alpha_columnAttrib') {                    $after     .= ' ';                }                if ($typearr[1] == 'alpha_columnType') {                    $before    .= ' ';                }                break;            case 'alpha_columnAttrib':                // ALTER TABLE tbl_name AUTO_INCREMENT = 1                // COLLATE LATIN1_GENERAL_CI DEFAULT                if ($typearr[1] == 'alpha_identifier' || $typearr[1] == 'alpha_charset') {                    $before .= ' ';                }                if (($typearr[3] == 'alpha_columnAttrib') || ($typearr[3] == 'quote_single') || ($typearr[3] == 'digit_integer')) {                    $after     .= ' ';                }                // workaround for                // AUTO_INCREMENT = 31DEFAULT_CHARSET = utf-8                if ($typearr[2] == 'alpha_columnAttrib' && $typearr[3] == 'alpha_reservedWord') {                    $before .= ' ';                }                // workaround for                // select * from mysql.user where binary user="root"                // binary is marked as alpha_columnAttrib                // but should be marked as a reserved word                if (strtoupper($arr[$i]['data']) == 'BINARY'                  && $typearr[3] == 'alpha_identifier') {                    $after     .= ' ';                }                break;            case 'alpha_functionName':                $funcname = strtoupper($arr[$i]['data']);                if ($docu && isset($PMA_SQPdata_functions_docs[$funcname])) {                    $before .= PMA_showMySQLDocu(                        'functions',                        $PMA_SQPdata_functions_docs[$funcname]['link'],                        false,                        $PMA_SQPdata_functions_docs[$funcname]['anchor'],                        true);                    $after .= '</a>';                }                break;            case 'alpha_reservedWord':                // do not uppercase the reserved word if we are calling                // this function in query_only mode, because we need                // the original query (otherwise we get problems with                // semi-reserved words like "storage" which is legal                // as an identifier name)                if ($mode != 'query_only') {                    $arr[$i]['data'] = strtoupper($arr[$i]['data']);                }                if ((($typearr[1] != 'alpha_reservedWord')                    || (($typearr[1] == 'alpha_reservedWord')                        && isset($keywords_no_newline[strtoupper($arr[$i - 1]['data'])])))                    && ($typearr[1] != 'punct_level_plus')                    && (!isset($keywords_no_newline[$arr[$i]['data']]))) {                    // do not put a space before the first token, because                    // we use a lot of pattern matching checking for the                    // first reserved word at beginning of query                    // so do not put a newline before                    //                    // also we must not be inside a privilege list                    if ($i > 0) {                        // the alpha_identifier exception is there to                        // catch cases like                        // GRANT SELECT ON mydb.mytable TO myuser@localhost                        // (else, we get mydb.mytableTO)                        //                        // the quote_single exception is there to                        // catch cases like                        // GRANT ... TO 'marc'@'domain.com' IDENTIFIED...                        /**                         * @todo fix all cases and find why this happens                         */                        if (!$in_priv_list || $typearr[1] == 'alpha_identifier' || $typearr[1] == 'quote_single' || $typearr[1] == 'white_newline') {                            $before    .= $space_alpha_reserved_word;                        }                    } else {                        // on first keyword, check if it introduces a                        // privilege list                        if (isset($keywords_priv_list[$arr[$i]['data']])) {                            $in_priv_list = true;                        }                    }                } else {                    $before    .= ' ';                }                switch ($arr[$i]['data']) {                case 'CREATE':                case 'ALTER':                case 'DROP':                case 'RENAME';                case 'TRUNCATE':                case 'ANALYZE':                case 'ANALYSE':                case 'OPTIMIZE':                    if ($docu) {                        switch ($arr[$i + 1]['data']) {                        case 'EVENT':                        case 'TABLE':                        case 'TABLESPACE':                        case 'FUNCTION':                        case 'INDEX':                        case 'PROCEDURE':                        case 'TRIGGER':                        case 'SERVER':                        case 'DATABASE':                        case 'VIEW':                            $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'] . '_' . $arr[$i + 1]['data'], false, '', true);                            $close_docu_link = true;                            break;                        }                        if ($arr[$i + 1]['data'] == 'LOGFILE' && $arr[$i + 2]['data'] == 'GROUP') {                            $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'] . '_LOGFILE_GROUP', false, '', true);                            $close_docu_link = true;                        }                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'EVENT':                case 'TABLESPACE':                case 'TABLE':                case 'FUNCTION':                case 'INDEX':                case 'PROCEDURE':                case 'SERVER':                case 'TRIGGER':                case 'DATABASE':                case 'VIEW':                case 'GROUP':                    if ($close_docu_link) {                        $after = '</a>' . $after;                        $close_docu_link = false;                    }                    break;                case 'SET':                    if ($docu && ($i == 0 || $arr[$i - 1]['data'] != 'CHARACTER')) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'EXPLAIN':                case 'DESCRIBE':                case 'DELETE':                case 'SHOW':                case 'UPDATE':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'INSERT':                case 'REPLACE':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = $html_line_break;                    }                    break;                case 'VALUES':                    $space_punct_listsep       = ' ';                    $space_alpha_reserved_word = $html_line_break;                    break;                case 'SELECT':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', 'SELECT', false, '', true);                        $after = '</a>' . $after;                    }                    $space_punct_listsep       = ' ';                    $space_alpha_reserved_word = $html_line_break;                    break;                case 'CALL':                case 'DO':                case 'HANDLER':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    break;                default:                    if ($close_docu_link && in_array($arr[$i]['data'], array('LIKE', 'NOT', 'IN', 'REGEXP', 'NULL'))) {                        $after .= '</a>';                        $close_docu_link = false;                    } else if ($docu && isset($PMA_SQPdata_functions_docs[$arr[$i]['data']])) {                        /* Handle multi word statements first */                        if (isset($typearr[4]) && $typearr[4] == 'alpha_reservedWord' && $typearr[3] == 'alpha_reservedWord' && isset($PMA_SQPdata_functions_docs[strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'] . '_' . $arr[$i + 2]['data'])])) {                            $tempname = strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'] . '_' . $arr[$i + 2]['data']);                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$tempname]['link'], false, $PMA_SQPdata_functions_docs[$tempname]['anchor'], true);                            $close_docu_link = true;                        } else if (isset($typearr[3]) && $typearr[3] == 'alpha_reservedWord' && isset($PMA_SQPdata_functions_docs[strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'])])) {                            $tempname = strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data']);                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$tempname]['link'], false, $PMA_SQPdata_functions_docs[$tempname]['anchor'], true);                            $close_docu_link = true;                        } else {                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$arr[$i]['data']]['link'], false, $PMA_SQPdata_functions_docs[$arr[$i]['data']]['anchor'], true);                            $after .= '</a>';                        }                    }                    break;                } // end switch ($arr[$i]['data'])                $after         .= ' ';                break;            case 'digit_integer':            case 'digit_float':            case 'digit_hex':                /**                 * @todo could there be other types preceding a digit?                 */                if ($typearr[1] == 'alpha_reservedWord') {                    $after .= ' ';                }                if ($infunction && $typearr[3] == 'punct_bracket_close_round') {                    $after     .= ' ';                }                if ($typearr[1] == 'alpha_columnAttrib') {                    $before .= ' ';                }                break;            case 'alpha_variable':                $after      = ' ';                break;            case 'quote_double':            case 'quote_single':                // workaround: for the query                // REVOKE SELECT ON `base2\_db`.* FROM 'user'@'%'                // the @ is incorrectly marked as alpha_variable                // in the parser, and here, the '%' gets a blank before,                // which is a syntax error                if ($typearr[1] != 'punct_user' && $typearr[1] != 'alpha_bitfield_constant_introducer') {                    $before        .= ' ';                }                if ($infunction && $typearr[3] == 'punct_bracket_close_round') {                    $after     .= ' ';                }                break;            case 'quote_backtick':                // here we check for punct_user to handle correctly                // DEFINER = `username`@`%`                // where @ is the punct_user and `%` is the quote_backtick                if ($typearr[3] != 'punct_qualifier' && $typearr[3] != 'alpha_variable' && $typearr[3] != 'punct_user') {                    $after     .= ' ';                }                if ($typearr[1] != 'punct_qualifier' && $typearr[1] != 'alpha_variable' && $typearr[1] != 'punct_user') {                    $before    .= ' ';                }                break;            default:                break;            } // end switch ($typearr[2])            /*            if ($typearr[3] != 'punct_qualifier') {                $after             .= ' ';            }            $after                 .= "\n";            */            $str .= $before;            if ($mode=='color') {                $str .= PMA_SQP_formatHTML_colorize($arr[$i]);            } elseif ($mode == 'text') {                $str .= htmlspecialchars($arr[$i]['data']);            } else {                $str .= $arr[$i]['data'];            }            $str .= $after;        } // end for        // close unclosed indent levels        while ($indent > 0) {            $indent--;            $str .= ($mode != 'query_only' ? '</div>' : ' ');        }        /* End possibly unclosed documentation link */        if ($close_docu_link) {            $str .= '</a>';            $close_docu_link = false;        }        if ($mode!='query_only') {            // close inner_sql span                $str .= '</span>';        }        if ($mode=='color') {            // close syntax span            $str .= '</span>';        }        return $str;    } // end of the "PMA_SQP_formatHtml()" function}/** * Builds a CSS rule used for html formatted SQL queries * * @param string  The class name * @param string  The property name * @param string  The property value * * @return string  The CSS rule * * @access public * * @see    PMA_SQP_buildCssData() */function PMA_SQP_buildCssRule($classname, $property, $value){    $str     = '.' . $classname . ' {';    if ($value != '') {        $str .= $property . ': ' . $value . ';';    }    $str     .= '}' . "\n";    return $str;} // end of the "PMA_SQP_buildCssRule()" function/** * Builds CSS rules used for html formatted SQL queries * * @return string  The CSS rules set * * @access public * * @global array   The current PMA configuration * * @see    PMA_SQP_buildCssRule() */function PMA_SQP_buildCssData(){    global $cfg;    $css_string     = '';    foreach ($cfg['SQP']['fmtColor'] AS $key => $col) {        $css_string .= PMA_SQP_buildCssRule('syntax_' . $key, 'color', $col);    }    for ($i = 0; $i < 8; $i++) {        $css_string .= PMA_SQP_buildCssRule(            'syntax_indent' . $i, 'margin-left',            ($i * $cfg['SQP']['fmtInd']) . $cfg['SQP']['fmtIndUnit']);    }    return $css_string;} // end of the "PMA_SQP_buildCssData()" functionif (! defined('PMA_MINIMUM_COMMON')) {    /**     * Gets SQL queries with no format     *     * @param array   The SQL queries list     *     * @return string  The SQL queries with no format     *     * @access public     */    function PMA_SQP_formatNone($arr)    {        $formatted_sql = htmlspecialchars($arr['raw']);        $formatted_sql = preg_replace(            "@((\015\012)|(\015)|(\012)){3,}@",            "\n\n",            $formatted_sql);        return $formatted_sql;    } // end of the "PMA_SQP_formatNone()" function} // end if: minimal common.lib needed??>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'import.js';/** * Gets tables informations and displays top links */require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_import.php&amp;back=tbl_import.php';require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';$import_type = 'table';require_once './libraries/display_import.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * <code> * N   N  OOO  !!   DDDD   OOO    N   N  OOO  TTTTT   EEEE DDDD  I TTTTT !! * NN  N O   O !!   D   D O   O   NN  N O   O   T     E    D   D I   T   !! * N N N O   O !!   D   D O   O   N N N O   O   T     EEEE D   D I   T   !! * N  NN O   O      D   D O   O   N  NN O   O   T     E    D   D I   T * N   N  OOO  !!   DDDD   OOO    N   N  OOO    T     EEEE DDDD  I   T   !! * </code> * * DO NOT EDIT THIS FILE, EDIT config.inc.php INSTEAD !!! * * phpMyAdmin default configuration, you can copy values from here to your * config.inc.php * * All directives are explained in Documentation.html * * @package PhpMyAdmin *//** * Your phpMyAdmin URL. * * Complete the variable below with the full URL ie *    http://www.your_web.net/path_to_your_phpMyAdmin_directory/ * * It must contain characters that are valid for a URL, and the path is * case sensitive on some Web servers, for example Unix-based servers. * * In most cases you can leave this variable empty, as the correct value * will be detected automatically. However, we recommend that you do * test to see that the auto-detection code works in your system. A good * test is to browse a table, then edit a row and save it.  There will be * an error message if phpMyAdmin cannot auto-detect the correct value. * * @global string $cfg['PmaAbsoluteUri'] */$cfg['PmaAbsoluteUri'] = '';/** * Disable the default warning that is displayed on the DB Details Structure page if * any of the required Tables for the configuration storage could not be found * * @global boolean $cfg['PmaNoRelation_DisableWarning'] */$cfg['PmaNoRelation_DisableWarning'] = false;/** * Disable the default warning that is displayed if Suhosin is detected * * @global boolean $cfg['SuhosinDisableWarning'] */$cfg['SuhosinDisableWarning'] = false;/** * Disable the default warning that is displayed if mcrypt is missing for * cookie authentication. * * @global boolean $cfg['McryptDisableWarning'] */$cfg['McryptDisableWarning'] = false;/** * Show warning about incomplete translations on certain threshold. * * @global boolean $cfg['TranslationWarningThreshold'] */$cfg['TranslationWarningThreshold'] = 80;/** * Allows phpMyAdmin to be included from a document located on * another domain; setting this to true is a potential security hole * * @global boolean $cfg['AllowThirdPartyFraming'] */$cfg['AllowThirdPartyFraming'] = false;/** * The 'cookie' auth_type uses blowfish algorithm to encrypt the password. If * at least one server configuration uses 'cookie' auth_type, enter here a * pass phrase that will be used by blowfish. The maximum length seems to be 46 * characters. * * @global string $cfg['blowfish_secret'] */$cfg['blowfish_secret'] = '';/******************************************************************************* * Server(s) configuration * * The $cfg['Servers'] array starts with $cfg['Servers'][1].  Do not use * $cfg['Servers'][0]. You can disable a server configuration entry by setting host * to ''. If you want more than one server, just copy following section * (including $i incrementation) several times. There is no need to define * full server array, just define values you need to change. * * @global array $cfg['Servers'] */$cfg['Servers'] = array();$i = 1;/** * MySQL hostname or IP address * * @global string $cfg['Servers'][$i]['host'] */$cfg['Servers'][$i]['host'] = 'localhost';/** * MySQL port - leave blank for default port * * @global string $cfg['Servers'][$i]['port'] */$cfg['Servers'][$i]['port'] = '';/** * Path to the socket - leave blank for default socket * * @global string $cfg['Servers'][$i]['socket'] */$cfg['Servers'][$i]['socket'] = '';/** * Use SSL for connecting to MySQL server? * * @global boolean $cfg['Servers'][$i]['ssl'] */$cfg['Servers'][$i]['ssl'] = false;/** * How to connect to MySQL server ('tcp' or 'socket') * * @global string $cfg['Servers'][$i]['connect_type'] */$cfg['Servers'][$i]['connect_type'] = 'tcp';/** * The PHP MySQL extension to use ('mysql' or 'mysqli') * * @global string $cfg['Servers'][$i]['extension'] */$cfg['Servers'][$i]['extension'] = 'mysqli';/** * Use compressed protocol for the MySQL connection * * @global boolean $cfg['Servers'][$i]['compress'] */$cfg['Servers'][$i]['compress'] = false;/** * MySQL control host. This permits to use a host different than the * main host, for the phpMyAdmin configuration storage. If left empty, * $cfg['Servers'][$i]['host'] is used instead. * * @global string $cfg['Servers'][$i]['controlhost'] */$cfg['Servers'][$i]['controlhost'] = '';/** * MySQL control user settings (this user must have read-only * access to the "mysql/user" and "mysql/db" tables). The controluser is also * used for all relational features (pmadb) * * @global string $cfg['Servers'][$i]['controluser'] */$cfg['Servers'][$i]['controluser'] = '';/** * MySQL control user settings (this user must have read-only * access to the "mysql/user" and "mysql/db" tables). The controluser is also * used for all relational features (pmadb) * * @global string $cfg['Servers'][$i]['controlpass'] */$cfg['Servers'][$i]['controlpass'] = '';/** * Authentication method (valid choices: config, http, signon or cookie) * * @global string $cfg['Servers'][$i]['auth_type'] */$cfg['Servers'][$i]['auth_type'] = 'cookie';/** * HTTP Basic Auth Realm name to display (only used with 'HTTP' auth_type) * * @global string $cfg['Servers'][$i]['auth_http_realm'] */$cfg['Servers'][$i]['auth_http_realm'] = '';/** * File containing Swekey ids and login names (see /contrib); * leave empty to deactivate Swekey hardware authentication * * @global string $cfg['Servers'][$i]['auth_swekey_config'] */$cfg['Servers'][$i]['auth_swekey_config'] = '';/** * MySQL user * * @global string $cfg['Servers'][$i]['user'] */$cfg['Servers'][$i]['user'] = 'root';/** * MySQL password (only needed with 'config' auth_type) * * @global string $cfg['Servers'][$i]['password'] */$cfg['Servers'][$i]['password'] = '';/** * Session to use for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonSession'] */$cfg['Servers'][$i]['SignonSession'] = '';/** * PHP script to use for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonScript'] */$cfg['Servers'][$i]['SignonScript'] = '';/** * URL where to redirect user to login for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonURL'] */$cfg['Servers'][$i]['SignonURL'] = '';/** * URL where to redirect user after logout * * @global string $cfg['Servers'][$i]['LogoutURL'] */$cfg['Servers'][$i]['LogoutURL'] = '';/** * Whether to try to connect without password * * @global boolean $cfg['Servers'][$i]['nopassword'] */$cfg['Servers'][$i]['nopassword'] = false;/** * If set to a db-name, only this db is displayed in left frame * It may also be an array of db-names, where sorting order is relevant. * * @global string $cfg['Servers'][$i]['only_db'] */$cfg['Servers'][$i]['only_db'] = '';/** * Database name to be hidden from listings * * @global string $cfg['Servers'][$i]['hide_db'] */$cfg['Servers'][$i]['hide_db'] = '';/** * Verbose name for this host - leave blank to show the hostname * (for HTTP authentication, all non-US-ASCII characters will be stripped) * * @global string $cfg['Servers'][$i]['verbose'] */$cfg['Servers'][$i]['verbose'] = '';/** * Database used for Relation, Bookmark and PDF Features * (see examples/create_tables.sql) *   - leave blank for no support *     SUGGESTED: 'phpmyadmin' * * @global string $cfg['Servers'][$i]['pmadb'] */$cfg['Servers'][$i]['pmadb'] = '';/** * Bookmark table *   - leave blank for no bookmark support *     SUGGESTED: 'pma_bookmark' * * @global string $cfg['Servers'][$i]['bookmarktable'] */$cfg['Servers'][$i]['bookmarktable'] = '';/** * table to describe the relation between links (see doc) *   - leave blank for no relation-links support *     SUGGESTED: 'pma_relation' * * @global string $cfg['Servers'][$i]['relation'] */$cfg['Servers'][$i]['relation'] = '';/** * table to describe the display fields *   - leave blank for no display fields support *     SUGGESTED: 'pma_table_info' * * @global string $cfg['Servers'][$i]['table_info'] */$cfg['Servers'][$i]['table_info'] = '';/** * table to describe the tables position for the PDF schema *   - leave blank for no PDF schema support *     SUGGESTED: 'pma_table_coords' * * @global string $cfg['Servers'][$i]['table_coords'] */$cfg['Servers'][$i]['table_coords'] = '';/** * table to describe pages of relationpdf *   - leave blank if you don't want to use this *     SUGGESTED: 'pma_pdf_pages' * * @global string $cfg['Servers'][$i]['pdf_pages'] */$cfg['Servers'][$i]['pdf_pages'] = '';/** * table to store column information *   - leave blank for no column comments/mime types *     SUGGESTED: 'pma_column_info' * * @global string $cfg['Servers'][$i]['column_info'] */$cfg['Servers'][$i]['column_info'] = '';/** * table to store SQL history *   - leave blank for no SQL query history *     SUGGESTED: 'pma_history' * * @global string $cfg['Servers'][$i]['history'] */$cfg['Servers'][$i]['history'] = '';/** * table to store the coordinates for Designer *   - leave blank for no Designer feature *     SUGGESTED: 'pma_designer_coords' * * @global string $cfg['Servers'][$i]['designer_coords'] */$cfg['Servers'][$i]['designer_coords'] = '';/** * table to store recently used tables *   - leave blank for no "persistent" recently used tables *     SUGGESTED: 'pma_recent' */$cfg['Servers'][$i]['recent'] = '';/** * table to store UI preferences for tables *   - leave blank for no "persistent" UI preferences *     SUGGESTED: 'pma_table_uiprefs' */$cfg['Servers'][$i]['table_uiprefs'] = '';/** * table to store SQL tracking *   - leave blank for no SQL tracking *     SUGGESTED: 'pma_tracking' * * @global string $cfg['Servers'][$i]['tracking'] */$cfg['Servers'][$i]['tracking'] = '';/** * table to store user preferences *   - leave blank to disable server storage *     SUGGESTED: 'pma_userconfig' * * @global string $cfg['Servers'][$i]['userconfig'] */$cfg['Servers'][$i]['userconfig'] = '';/** * Maximum number of records saved in $cfg['Servers'][$i]['table_uiprefs'] table. * * In case where tables in databases is modified (e.g. dropped or renamed), * table_uiprefs may contains invalid data (referring to tables which are not * exist anymore). * This configuration make sure that we only keep N (N = MaxTableUiprefs) * newest record in table_uiprefs and automatically delete older records. * * @global integer $cfg['Servers'][$i]['userconfig'] = ''; */$cfg['Servers'][$i]['MaxTableUiprefs'] = 100;/** * set to false if you know that your pma_* tables are up to date. * This prevents compatibility checks and thereby increases performance. * * @global boolean $cfg['Servers'][$i]['verbose_check'] */$cfg['Servers'][$i]['verbose_check'] = true;/** * whether to allow root login * * @global boolean $cfg['Servers'][$i]['AllowRoot'] */$cfg['Servers'][$i]['AllowRoot'] = true;/** * whether to allow login of any user without a password * * @global boolean $cfg['Servers'][$i]['AllowNoPassword'] */$cfg['Servers'][$i]['AllowNoPassword'] = false;/** * Host authentication order, leave blank to not use * * @global string $cfg['Servers'][$i]['AllowDeny']['order'] */$cfg['Servers'][$i]['AllowDeny']['order'] = '';/** * Host authentication rules, leave blank for defaults * * @global array $cfg['Servers'][$i]['AllowDeny']['rules'] */$cfg['Servers'][$i]['AllowDeny']['rules'] = array();/** * Disable use of INFORMATION_SCHEMA. Is always 'true' for Drizzle. * * @see http://sf.net/support/tracker.php?aid=1849494 * @see http://bugs.mysql.com/19588 * @global boolean $cfg['Servers'][$i]['DisableIS'] */$cfg['Servers'][$i]['DisableIS'] = true;/** * SQL command to fetch available databases * * by default most user will be fine with SHOW DATABASES, * for servers with a huge amount of databases it is possible to * define a command which executes faster but with less information * * especially when accessing database servers from ISPs changing this command * can result in a great speed improvement * * false will disable fetching databases from the server, only databases in * $cfg['Servers'][$i]['only_db'] will be displayed * * #user# will be replaced by current user * * examples: * 'SHOW DATABASES' * "SHOW DATABASES LIKE '#user#\_%'" * 'SELECT DISTINCT TABLE_SCHEMA FROM information_schema.SCHEMA_PRIVILEGES' * 'SELECT SCHEMA_NAME FROM information_schema.SCHEMATA' * false * * @global array $cfg['Servers'][$i]['ShowDatabasesCommand'] */$cfg['Servers'][$i]['ShowDatabasesCommand'] = 'SHOW DATABASES';/** * Whether to count tables when showing database list * * @global array $cfg['Servers'][$i]['CountTables'] */$cfg['Servers'][$i]['CountTables'] = false;/** * Whether the tracking mechanism creates versions for tables and views automatically. * * @global bool $cfg['Servers'][$i]['tracking_version_auto_create'] */$cfg['Servers'][$i]['tracking_version_auto_create'] = false;/** * Defines the list of statements the auto-creation uses for new versions. * * @global string $cfg['Servers'][$i]['tracking_default_statements'] */$cfg['Servers'][$i]['tracking_default_statements'] = 'CREATE TABLE,ALTER TABLE,DROP TABLE,RENAME TABLE,' .                                          'CREATE INDEX,DROP INDEX,' .                                          'INSERT,UPDATE,DELETE,TRUNCATE,REPLACE,' .                                          'CREATE VIEW,ALTER VIEW,DROP VIEW,' .                                          'CREATE DATABASE,ALTER DATABASE,DROP DATABASE';/** * Whether a DROP VIEW IF EXISTS statement will be added as first line to the log when creating a view. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_view'] */$cfg['Servers'][$i]['tracking_add_drop_view'] = true;/** * Whether a DROP TABLE IF EXISTS statement will be added as first line to the log when creating a table. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_table'] */$cfg['Servers'][$i]['tracking_add_drop_table'] = true;/** * Whether a DROP DATABASE IF EXISTS statement will be added as first line to the log when creating a database. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_database'] */$cfg['Servers'][$i]['tracking_add_drop_database'] = true;/** * Default server (0 = no default server) * * If you have more than one server configured, you can set $cfg['ServerDefault'] * to any one of them to auto-connect to that server when phpMyAdmin is started, * or set it to 0 to be given a list of servers without logging in * If you have only one server configured, $cfg['ServerDefault'] *MUST* be * set to that server. * * @global integer $cfg['ServerDefault'] */$cfg['ServerDefault'] = 1;/* * Other core phpMyAdmin settings *//** * whether Ajax behavior is active * * @global boolean $cfg['AjaxEnable'] */$cfg['AjaxEnable'] = true;/** * whether version check is active * * @global boolean $cfg['VersionCheck'] */$cfg['VersionCheck'] = VERSION_CHECK_DEFAULT;/** * maximum number of db's displayed in left frame and database list * * @global integer $cfg['MaxDbList'] */$cfg['MaxDbList'] = 100;/** * maximum number of tables displayed in table list * * @global integer $cfg['MaxTableList'] */$cfg['MaxTableList'] = 250;/** * whether to show hint or not * * @global boolean $cfg['ShowHint'] */$cfg['ShowHint'] = true;/** * maximum number of characters when a SQL query is displayed * * @global integer $cfg['MaxCharactersInDisplayedSQL'] */$cfg['MaxCharactersInDisplayedSQL'] = 1000;/** * use GZIP output buffering if possible (true|false|'auto') * * @global string $cfg['OBGzip'] */$cfg['OBGzip'] = 'auto';/** * use persistent connections to MySQL database * * @global boolean $cfg['PersistentConnections'] */$cfg['PersistentConnections'] = false;/** * whether to force using HTTPS * * @global boolean $cfg['ForceSSL'] */$cfg['ForceSSL'] = false;/** * maximum execution time in seconds (0 for no limit) * * @global integer $cfg['ExecTimeLimit'] */$cfg['ExecTimeLimit'] = 300;/** * Path for storing session data (session_save_path PHP parameter). * * @global integer $cfg['SessionSavePath'] */$cfg['SessionSavePath'] = '';/** * maximum allocated bytes ('0' for no limit) * this is a string because '16M' is a valid value; we must put here * a string as the default value so that /setup accepts strings * * @global string $cfg['MemoryLimit'] */$cfg['MemoryLimit'] = '0';/** * mark used tables, make possible to show locked tables (since MySQL 3.23.30) * Is ignored for Drizzle. * * @global boolean $cfg['SkipLockedTables'] */$cfg['SkipLockedTables'] = false;/** * show SQL queries as run * * @global boolean $cfg['ShowSQL'] */$cfg['ShowSQL'] = true;/** * retain SQL input on Ajax execute * * @global boolean $cfg['RetainQueryEditor'] */$cfg['RetainQueryBox'] = false;/** * show a 'Drop database' link to normal users * * @global boolean $cfg['AllowUserDropDatabase'] */$cfg['AllowUserDropDatabase'] = false;/** * confirm some commands that can result in loss of data * (see "need_confirm" in the parser) * * @global boolean $cfg['Confirm'] */$cfg['Confirm'] = true;/** * recall previous login in cookie authentication mode or not * * @global boolean $cfg['LoginCookieRecall'] */$cfg['LoginCookieRecall'] = true;/** * validity of cookie login (in seconds; 1440 matches php.ini's * session.gc_maxlifetime) * * @global integer $cfg['LoginCookieValidity'] */$cfg['LoginCookieValidity'] = 1440;/** * how long login cookie should be stored (in seconds) * * @global integer $cfg['LoginCookieStore'] */$cfg['LoginCookieStore'] = 0;/** * whether to delete all login cookies on logout * * @global boolean $cfg['LoginCookieDeleteAll'] */$cfg['LoginCookieDeleteAll'] = true;/** * whether to enable the "database search" feature or not * * @global boolean $cfg['UseDbSearch'] */$cfg['UseDbSearch'] = true;/** * if set to true, PMA continues computing multiple-statement queries * even if one of the queries failed * * @global boolean $cfg['IgnoreMultiSubmitErrors'] */$cfg['IgnoreMultiSubmitErrors'] = false;/** * if set to true, PMA will show the affected rows of EACH statement on * multiple-statement queries. See the libraries/import.php file for * hard coded defaults on how many queries a statement may contain! * * @global boolean $cfg['VerboseMultiSubmit'] */$cfg['VerboseMultiSubmit'] = true;/** * allow login to any user entered server in cookie based authentication * * @global boolean $cfg['AllowArbitraryServer'] */$cfg['AllowArbitraryServer'] = false;/******************************************************************************* * Error handler configuration * * this configures phpMyAdmin's own error handler, it is used to avoid information * disclosure, gather errors for logging, reporting and displaying * * @global array $cfg['Error_Handler'] */$cfg['Error_Handler'] = array();/** * whether to display errors or not * * this does not affect errors of type  E_USER_* * * @global boolean $cfg['Error_Handler']['display'] */$cfg['Error_Handler']['display'] = false;/** * (NOT IMPLEMENTED YET) * where to log errors, false or empty to disable * * <code> * // EXAMPLE log to std PHP error log * $cfg['Error_Handler']['log'] = array(0); * // EXAMPLE mail errors * $cfg['Error_Handler']['log'] = array(1, 'admin@example.org'); * // EXAMPLE append to specific file * $cfg['Error_Handler']['log'] = array(3, '/var/log/phpmyadmin_error.log'); * </code> * * @see     http://php.net/error_log * @global  string $cfg['Error_Handler']['log'] *///$cfg['Error_Handler']['log'] = false;/** * gather all errors in session to be displayed on a error reporting page * for viewing and/or sending to phpMyAdmin developer team * * @global boolean $cfg['Error_Handler']['gather'] */$cfg['Error_Handler']['gather'] = false;/******************************************************************************* * Left frame setup *//** * use a select-based menu and display only the current tables in the left frame. * * @global boolean $cfg['LeftFrameLight'] */$cfg['LeftFrameLight'] = true;/** * turn the select-based light menu into a tree * * @global boolean $cfg['LeftFrameDBTree'] */$cfg['LeftFrameDBTree'] = true;/** * the separator to sub-tree the select-based light menu tree * * @global string $cfg['LeftFrameDBSeparator'] */$cfg['LeftFrameDBSeparator'] = '_';/** * Which string will be used to generate table prefixes * to split/nest tables into multiple categories * * @global string $cfg['LeftFrameTableSeparator'] */$cfg['LeftFrameTableSeparator']= '__';/** * How many sublevels should be displayed when splitting up tables by the above Separator * * @global integer $cfg['LeftFrameTableLevel'] */$cfg['LeftFrameTableLevel'] = 1;/** * display table comment as tooltip in left frame * * @global boolean $cfg['ShowTooltip'] */$cfg['ShowTooltip'] = true;/** * if ShowToolTip is enabled, this defines that table/db comments * * @global boolean $cfg['ShowTooltipAliasDB'] */$cfg['ShowTooltipAliasDB'] = false;/** * are shown (in the left menu and db_structure) instead of table/db names. * Setting ShowTooltipAliasTB to 'nested' will only use the Aliases for nested * descriptors, not the table itself. * * @global boolean $cfg['ShowTooltipAliasTB'] */$cfg['ShowTooltipAliasTB'] = false;/** * display logo at top of left frame * * @global boolean $cfg['LeftDisplayLogo'] */$cfg['LeftDisplayLogo'] = true;/** * where should logo link point to (can also contain an external URL) * * @global string $cfg['LeftLogoLink'] */$cfg['LeftLogoLink'] = 'main.php';/** * whether to open the linked page in the main window ('main') or * in a new window ('new') * * @global string $cfg['LeftLogoLinkWindow'] */$cfg['LeftLogoLinkWindow'] = 'main';/** * number of recently used tables displayed in the navigation frame * * @global integer $cfg['LeftRecentTable'] */$cfg['LeftRecentTable'] = 10;/** * display a JavaScript table filter in the left frame * when more then x tables are present * * @global boolean $cfg['LeftDisplayTableFilterMinimum'] */$cfg['LeftDisplayTableFilterMinimum'] = 30;/** * display server choice at top of left frame * * @global boolean $cfg['LeftDisplayServers'] */$cfg['LeftDisplayServers'] = false;/** * server choice as links * * @global boolean $cfg['DisplayServersList'] */$cfg['DisplayServersList'] = false;/** * database choice in light as links * * @global boolean $cfg['DisplayDatabasesList'] */$cfg['DisplayDatabasesList'] = 'auto';/** * target of the navigation panel quick access icon * * Possible values: * 'tbl_structure.php' = fields list * 'tbl_sql.php' = SQL form * 'tbl_select.php' = search page * 'tbl_change.php' = insert row page * 'sql.php' = browse page * * @global string $cfg['LeftDefaultTabTable'] */$cfg['LeftDefaultTabTable'] = 'tbl_structure.php';/******************************************************************************* * In the main frame, at startup... *//** * allow to display statistics and space usage in the pages about database * details and table properties * * @global boolean $cfg['ShowStats'] */$cfg['ShowStats'] = true;/** * show PHP info link * * @global boolean $cfg['ShowPhpInfo'] */$cfg['ShowPhpInfo'] = false;/** * show MySQL server and web server information * * @global boolean $cfg['ShowServerInfo'] */$cfg['ShowServerInfo'] = true;/** * show change password link * * @global boolean $cfg['ShowChgPassword'] */$cfg['ShowChgPassword'] = true;/** * show create database form * * @global boolean $cfg['ShowCreateDb'] */$cfg['ShowCreateDb'] = true;/** * suggest a new DB name if possible (false = keep empty) * * @global boolean $cfg['SuggestDBName'] */$cfg['SuggestDBName'] = true;/******************************************************************************* * In browse mode... *//** * Use icons instead of text for the navigation bar buttons * and on right panel top menu (server db table) (true|false|'both') * * @global string $cfg['NavigationBarIconic'] */$cfg['NavigationBarIconic'] = true;/** * Defines whether a user should be displayed a "show all (records)" * button in browse mode or not. * * @global boolean $cfg['ShowAll'] */$cfg['ShowAll'] = false;/** * Number of rows displayed when browsing a result set. If the result * set contains more rows, "Previous" and "Next". * * @global integer $cfg['MaxRows'] */$cfg['MaxRows'] = 30;/** * default for 'ORDER BY' clause (valid values are 'ASC', 'DESC' or 'SMART' -ie * descending order for fields of type TIME, DATE, DATETIME & TIMESTAMP, * ascending order else-) * * @global string $cfg['Order'] */$cfg['Order'] = 'SMART';/** * default for 'Show binary contents as HEX' * * @global string $cfg['DisplayBinaryAsHex'] */$cfg['DisplayBinaryAsHex'] = true;/******************************************************************************* * In edit mode... *//** * disallow editing of binary fields * valid values are: *   false  allow editing *   'blob' allow editing except for BLOB fields *   'all'  disallow editing * * @global string $cfg['ProtectBinary'] */$cfg['ProtectBinary'] = 'blob';/** * Display the function fields in edit/insert mode * * @global boolean $cfg['ShowFunctionFields'] */$cfg['ShowFunctionFields'] = true;/** * Display the type fields in edit/insert mode * * @global boolean $cfg['ShowFieldTypesInDataEditView'] */$cfg['ShowFieldTypesInDataEditView'] = true;/** * Which editor should be used for CHAR/VARCHAR fields: *  input - allows limiting of input length *  textarea - allows newlines in fields * * @global string $cfg['CharEditing'] */$cfg['CharEditing'] = 'input';/** * The minimum size for character input fields * * @global integer $cfg['MinSizeForInputField'] */$cfg['MinSizeForInputField'] = 4;/** * The maximum size for character input fields * * @global integer $cfg['MinSizeForInputField'] */$cfg['MaxSizeForInputField'] = 60;/** * How many rows can be inserted at one time * * @global integer $cfg['InsertRows'] */$cfg['InsertRows'] = 2;/** * Sort order for items in a foreign-key drop-down list. * 'content' is the referenced data, 'id' is the key value. * * @global array $cfg['ForeignKeyDropdownOrder'] */$cfg['ForeignKeyDropdownOrder'] = array('content-id', 'id-content');/** * A drop-down list will be used if fewer items are present * * @global integer $cfg['ForeignKeyMaxLimit'] */$cfg['ForeignKeyMaxLimit'] = 100;/******************************************************************************* * For the export features... *//** * Allow for the use of zip compression (requires zip support to be enabled) * * @global boolean $cfg['ZipDump'] */$cfg['ZipDump'] = true;/** * Allow for the use of gzip compression (requires zlib) * * @global boolean $cfg['GZipDump'] */$cfg['GZipDump'] = true;/** * Allow for the use of bzip2 compression (requires bz2 extension) * * @global boolean $cfg['BZipDump'] */$cfg['BZipDump'] = true;/** * Will compress gzip/bzip2 exports on the fly without the need for much memory. * If you encounter problems with created gzip/bzip2 files disable this feature. * * @global boolean $cfg['CompressOnFly'] */$cfg['CompressOnFly'] = true;/******************************************************************************* * Tabs display settings *//** * Use graphically less intense menu tabs * * @global boolean $cfg['LightTabs'] */$cfg['LightTabs'] = false;/** * Use icons instead of text for the table display of a database (true|false|'both') * * @global boolean $cfg['PropertiesIconic'] */$cfg['PropertiesIconic'] = 'both';/** * How many columns should be used for table display of a database? * (a value larger than 1 results in some information being hidden) * * @global integer $cfg['PropertiesNumColumns'] */$cfg['PropertiesNumColumns'] = 1;/** * Possible values: * 'main.php' = the welcome page * (recommended for multiuser setups) * 'server_databases.php' = list of databases * 'server_status.php' = runtime information * 'server_variables.php' = MySQL server variables * 'server_privileges.php' = user management * 'server_processlist.php' = process list * * @global string $cfg['DefaultTabServer'] */$cfg['DefaultTabServer'] = 'main.php';/** * Possible values: * 'db_structure.php' = tables list * 'db_sql.php' = SQL form * 'db_search.php' = search query * 'db_operations.php' = operations on database * * @global string $cfg['DefaultTabDatabase'] */$cfg['DefaultTabDatabase'] = 'db_structure.php';/** * Possible values: * 'tbl_structure.php' = fields list * 'tbl_sql.php' = SQL form * 'tbl_select.php' = search page * 'tbl_change.php' = insert row page * 'sql.php' = browse page * * @global string $cfg['DefaultTabTable'] */$cfg['DefaultTabTable'] = 'sql.php';/******************************************************************************* * Export defaults */$cfg['Export'] = array();/** * codegen/csv/excel/htmlexcel/htmlword/latex/ods/odt/pdf/sql/texytext/xls/xml/yaml * * @global string $cfg['Export']['format'] */$cfg['Export']['format'] = 'sql';/** * quick/custom/custom-no-form * * @global string $cfg['Export']['format'] */$cfg['Export']['method'] = 'quick';/** * none/zip/gzip/bzip2 * * @global string $cfg['Export']['compression'] */$cfg['Export']['compression'] = 'none';/** * * * @global boolean $cfg['Export']['asfile'] */$cfg['Export']['asfile'] = true;/** * * * @global string $cfg['Export']['charset'] */$cfg['Export']['charset'] = '';/** * * * @global boolean $cfg['Export']['onserver'] */$cfg['Export']['onserver'] = false;/** * * * @global boolean $cfg['Export']['onserver_overwrite'] */$cfg['Export']['onserver_overwrite'] = false;/** * * * @global boolean $cfg['Export']['quick_export_onserver'] */$cfg['Export']['quick_export_onserver'] = false;/** * * * @global boolean $cfg['Export']['quick_export_onserver_overwrite'] */$cfg['Export']['quick_export_onserver_overwrite'] = false;/** * * * @global boolean $cfg['Export']['remember_file_template'] */$cfg['Export']['remember_file_template'] = true;/** * * * @global string $cfg['Export']['file_template_table'] */$cfg['Export']['file_template_table'] = '@TABLE@';/** * * * @global string $cfg['Export']['file_template_database'] */$cfg['Export']['file_template_database'] = '@DATABASE@';/** * * * @global string $cfg['Export']['file_template_server'] */$cfg['Export']['file_template_server'] = '@SERVER@';/** * * * @global string $cfg['Export']['codegen_structure_or_data'] */$cfg['Export']['codegen_structure_or_data'] = 'data';/** * * * @global $cfg['Export']['codegen_format'] */$cfg['Export']['codegen_format'] = 0;/** * * * @global boolean $cfg['Export']['ods_columns'] */$cfg['Export']['ods_columns'] = false;/** * * * @global string $cfg['Export']['ods_null'] */$cfg['Export']['ods_null'] = 'NULL';/** * * * @global string $cfg['Export']['odt_structure_or_data'] */$cfg['Export']['odt_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['odt_columns'] */$cfg['Export']['odt_columns'] = true;/** * * * @global boolean $cfg['Export']['odt_relation'] */$cfg['Export']['odt_relation'] = true;/** * * * @global boolean $cfg['Export']['odt_comments'] */$cfg['Export']['odt_comments'] = true;/** * * * @global boolean $cfg['Export']['odt_mime'] */$cfg['Export']['odt_mime'] = true;/** * * * @global string $cfg['Export']['odt_null'] */$cfg['Export']['odt_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['htmlword_structure_or_data'] */$cfg['Export']['htmlword_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['htmlword_columns'] */$cfg['Export']['htmlword_columns'] = false;/** * * * @global string $cfg['Export']['htmlword_null'] */$cfg['Export']['htmlword_null'] = 'NULL';/** * * * @global string $cfg['Export']['texytext_structure_or_data'] */$cfg['Export']['texytext_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['texytext_columns'] */$cfg['Export']['texytext_columns'] = false;/** * * * @global string $cfg['Export']['texytext_null'] */$cfg['Export']['texytext_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['xls_columns'] */$cfg['Export']['xls_columns'] = false;/** * * * @global string $cfg['Export']['xls_structure_or_data'] */$cfg['Export']['xls_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['xls_null'] */$cfg['Export']['xls_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['xlsx_columns'] */$cfg['Export']['xlsx_columns'] = false;/** * * * @global string $cfg['Export']['xlsx_structure_or_data'] */$cfg['Export']['xlsx_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['xlsx_null'] */$cfg['Export']['xlsx_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['csv_columns'] */$cfg['Export']['csv_columns'] = false;/** * * * @global string $cfg['Export']['csv_structure_or_data'] */$cfg['Export']['csv_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['csv_null'] */$cfg['Export']['csv_null'] = 'NULL';/** * * * @global string $cfg['Export']['csv_separator'] */$cfg['Export']['csv_separator'] = ',';/** * * * @global string $cfg['Export']['csv_enclosed'] */$cfg['Export']['csv_enclosed'] = '"';/** * * * @global string $cfg['Export']['csv_escaped'] */$cfg['Export']['csv_escaped'] = '"';/** * * * @global string $cfg['Export']['csv_terminated'] */$cfg['Export']['csv_terminated'] = 'AUTO';/** * * * @global string $cfg['Export']['csv_removeCRLF'] */$cfg['Export']['csv_removeCRLF'] = false;/** * * * @global boolean $cfg['Export']['excel_columns'] */$cfg['Export']['excel_columns'] = false;/** * * * @global string $cfg['Export']['excel_null'] */$cfg['Export']['excel_null'] = 'NULL';/** * win/mac * * @global string $cfg['Export']['excel_edition'] */$cfg['Export']['excel_edition'] = 'win';/** * * * @global string $cfg['Export']['excel_removeCRLF'] */$cfg['Export']['excel_removeCRLF'] = false;/** * * * @global string $cfg['Export']['excel_structure_or_data'] */$cfg['Export']['excel_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['latex_structure_or_data'] */$cfg['Export']['latex_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['latex_columns'] */$cfg['Export']['latex_columns'] = true;/** * * * @global boolean $cfg['Export']['latex_relation'] */$cfg['Export']['latex_relation'] = true;/** * * * @global boolean $cfg['Export']['latex_comments'] */$cfg['Export']['latex_comments'] = true;/** * * * @global boolean $cfg['Export']['latex_mime'] */$cfg['Export']['latex_mime'] = true;/** * * * @global string $cfg['Export']['latex_null'] */$cfg['Export']['latex_null'] = '\textit{NULL}';/** * * * @global boolean $cfg['Export']['latex_caption'] */$cfg['Export']['latex_caption'] = true;/** * * * @global string $cfg['Export']['latex_structure_caption'] */$cfg['Export']['latex_structure_caption'] = 'strLatexStructure';/** * * * @global string $cfg['Export']['latex_structure_continued_caption'] */$cfg['Export']['latex_structure_continued_caption'] = 'strLatexStructure strLatexContinued';/** * * * @global string $cfg['Export']['latex_data_caption'] */$cfg['Export']['latex_data_caption'] = 'strLatexContent';/** * * * @global string $cfg['Export']['latex_data_continued_caption'] */$cfg['Export']['latex_data_continued_caption'] = 'strLatexContent strLatexContinued';/** * * * @global string $cfg['Export']['latex_data_label'] */$cfg['Export']['latex_data_label'] = 'tab:@TABLE@-data';/** * * * @global string $cfg['Export']['latex_structure_label'] */$cfg['Export']['latex_structure_label'] = 'tab:@TABLE@-structure';/** * * * @global string $cfg['Export']['mediawiki_structure_or_data'] */$cfg['Export']['mediawiki_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['ods_structure_or_data'] */$cfg['Export']['ods_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['pdf_structure_or_data'] */$cfg['Export']['pdf_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['php_array_structure_or_data'] */$cfg['Export']['php_array_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['json_structure_or_data'] */$cfg['Export']['json_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['sql_structure_or_data'] */$cfg['Export']['sql_structure_or_data'] = 'structure_and_data';/** * * * @global string $cfg['Export']['sql_compatibility'] */$cfg['Export']['sql_compatibility'] = 'NONE';/** * Whether to include comments in SQL export. * * @global string $cfg['Export']['sql_include_comments'] */$cfg['Export']['sql_include_comments'] = true;/** * * * @global boolean $cfg['Export']['sql_disable_fk'] */$cfg['Export']['sql_disable_fk'] = false;/** * * * @global boolean $cfg['Export']['sql_use_transaction'] */$cfg['Export']['sql_use_transaction'] = false;/** * * * @global boolean $cfg['Export']['sql_drop_database'] */$cfg['Export']['sql_drop_database'] = false;/** * * * @global boolean $cfg['Export']['sql_drop_table'] */$cfg['Export']['sql_drop_table'] = false;/** * * * true by default for correct behavior when dealing with exporting * of VIEWs and the stand-in table * @global boolean $cfg['Export']['sql_if_not_exists'] */$cfg['Export']['sql_if_not_exists'] = true;/** * * * @global boolean $cfg['Export']['sql_procedure_function'] */$cfg['Export']['sql_procedure_function'] = true;/** * * * @global boolean $cfg['Export']['sql_auto_increment'] */$cfg['Export']['sql_auto_increment'] = true;/** * * * @global boolean $cfg['Export']['sql_backquotes'] */$cfg['Export']['sql_backquotes'] = true;/** * * * @global boolean $cfg['Export']['sql_dates'] */$cfg['Export']['sql_dates'] = false;/** * * * @global boolean $cfg['Export']['sql_relation'] */$cfg['Export']['sql_relation'] = false;/** * * * @global boolean $cfg['Export']['sql_delayed'] */$cfg['Export']['sql_delayed'] = false;/** * * * @global boolean $cfg['Export']['sql_ignore'] */$cfg['Export']['sql_ignore'] = false;/** * Export time in UTC. * * @global boolean $cfg['Export']['sql_utc_time'] */$cfg['Export']['sql_utc_time'] = true;/** * * * @global boolean $cfg['Export']['sql_hex_for_blob'] */$cfg['Export']['sql_hex_for_blob'] = true;/** * insert/update/replace * * @global string $cfg['Export']['sql_type'] */$cfg['Export']['sql_type'] = 'INSERT';/** * * * @global integer $cfg['Export']['sql_max_query_size'] */$cfg['Export']['sql_max_query_size'] = 50000;/** * * * @global boolean $cfg['Export']['sql_comments'] */$cfg['Export']['sql_comments'] = false;/** * * * @global boolean $cfg['Export']['sql_mime'] */$cfg['Export']['sql_mime'] = false;/** * \n is replaced by new line * * @global string $cfg['Export']['sql_header_comment'] */$cfg['Export']['sql_header_comment'] = '';/** * * * @global boolean $cfg['Export']['sql_create_table_statements'] */$cfg['Export']['sql_create_table_statements'] = true;/** * Whether to use complete inserts, extended inserts, both, or neither * * @global string $cfg['Export']['sql_insert_syntax'] */$cfg['Export']['sql_insert_syntax'] = 'both';/** * * * @global string $cfg['Export']['pdf_report_title'] */$cfg['Export']['pdf_report_title'] = '';/** * * *@global string $cfg['Export']['xml_structure_or_data'] */$cfg['Export']['xml_structure_or_data'] = 'data';/** * Export schema for each structure * * @global string $cfg['Export']['xml_export_struc'] */$cfg['Export']['xml_export_struc'] = true;/** * Export functions * * @global string $cfg['Export']['xml_export_functions'] */$cfg['Export']['xml_export_functions'] = true;/** * Export procedures * * @global string $cfg['Export']['xml_export_procedures'] */$cfg['Export']['xml_export_procedures'] = true;/** * Export schema for each table * * @global string $cfg['Export']['xml_export_tables'] */$cfg['Export']['xml_export_tables'] = true;/** * Export triggers * * @global string $cfg['Export']['xml_export_triggers'] */$cfg['Export']['xml_export_triggers'] = true;/** * Export views * * @global string $cfg['Export']['xml_export_views'] */$cfg['Export']['xml_export_views'] = true;/** * Export contents data * * @global string $cfg['Export']['xml_export_contents'] */$cfg['Export']['xml_export_contents'] = true;/** * * * @global string $cfg['Export']['yaml_structure_or_data'] */$cfg['Export']['yaml_structure_or_data'] = 'data';/******************************************************************************* * Import defaults */$cfg['Import'] = array();/** * * * @global string $cfg['Import']['format'] */$cfg['Import']['format'] = 'sql';/** * Default charset for import. * * @global string $cfg['Import']['charset'] */$cfg['Import']['charset'] = '';/** * * * @global boolean $cfg['Import']['allow_interrupt'] */$cfg['Import']['allow_interrupt'] = true;/** * * * @global integer $cfg['Import']['skip_queries'] */$cfg['Import']['skip_queries'] = 0;/** * * * @global string $cfg['Import']['sql_compatibility'] */$cfg['Import']['sql_compatibility'] = 'NONE';/** * * * @global string $cfg['Import']['sql_no_auto_value_on_zero'] */$cfg['Import']['sql_no_auto_value_on_zero'] = true;/** * * * @global boolean $cfg['Import']['csv_replace'] */$cfg['Import']['csv_replace'] = false;/** * * * @global boolean $cfg['Import']['csv_ignore'] */$cfg['Import']['csv_ignore'] = false;/** * * * @global string $cfg['Import']['csv_terminated'] */$cfg['Import']['csv_terminated'] = ',';/** * * * @global string $cfg['Import']['csv_enclosed'] */$cfg['Import']['csv_enclosed'] = '"';/** * * * @global string $cfg['Import']['csv_escaped'] */$cfg['Import']['csv_escaped'] = '"';/** * * * @global string $cfg['Import']['csv_new_line'] */$cfg['Import']['csv_new_line'] = 'auto';/** * * * @global string $cfg['Import']['csv_columns'] */$cfg['Import']['csv_columns'] = '';/** * * * @global string $cfg['Import']['csv_col_names'] */$cfg['Import']['csv_col_names'] = false;/** * * * @global boolean $cfg['Import']['ldi_replace'] */$cfg['Import']['ldi_replace'] = false;/** * * * @global boolean $cfg['Import']['ldi_ignore'] */$cfg['Import']['ldi_ignore'] = false;/** * * * @global string $cfg['Import']['ldi_terminated'] */$cfg['Import']['ldi_terminated'] = ';';/** * * * @global string $cfg['Import']['ldi_enclosed'] */$cfg['Import']['ldi_enclosed'] = '"';/** * * * @global string $cfg['Import']['ldi_escaped'] */$cfg['Import']['ldi_escaped'] = '\\';/** * * * @global string $cfg['Import']['ldi_new_line'] */$cfg['Import']['ldi_new_line'] = 'auto';/** * * * @global string $cfg['Import']['ldi_columns'] */$cfg['Import']['ldi_columns'] = '';/** * 'auto' for auto-detection, true or false for forcing * * @global string $cfg['Import']['ldi_local_option'] */$cfg['Import']['ldi_local_option'] = 'auto';/** * * * @global string $cfg['Import']['ods_col_names'] */$cfg['Import']['ods_col_names'] = false;/** * * * @global string $cfg['Import']['ods_empty_rows'] */$cfg['Import']['ods_empty_rows'] = true;/** * * * @global string $cfg['Import']['ods_recognize_percentages'] */$cfg['Import']['ods_recognize_percentages'] = true;/** * * * @global string $cfg['Import']['ods_recognize_currency'] */$cfg['Import']['ods_recognize_currency'] = true;/** * * * @global string $cfg['Import']['xml_col_names'] */$cfg['Import']['xls_col_names'] = false;/** * * * @global string $cfg['Import']['xml_empty_rows'] */$cfg['Import']['xls_empty_rows'] = true;/** * * * @global string $cfg['Import']['xlsx_col_names'] */$cfg['Import']['xlsx_col_names'] = false;/** * Link to the official MySQL documentation. * Be sure to include no trailing slash on the path. * See http://dev.mysql.com/doc/ for more information * about MySQL manuals and their types. * * @global string $cfg['MySQLManualBase'] */$cfg['MySQLManualBase'] = 'http://dev.mysql.com/doc/refman';/** * Type of MySQL documentation: *   viewable   - "viewable online", current one used on MySQL website *   searchable - "Searchable, with user comments" *   chapters   - "HTML, one page per chapter" *   chapters_old - "HTML, one page per chapter", format used prior to MySQL 5.0 release *   big        - "HTML, all on one page" *   old        - old style used in phpMyAdmin 2.3.0 and sooner *   none       - do not show documentation links * * @global string $cfg['MySQLManualType'] */$cfg['MySQLManualType'] = 'viewable';/******************************************************************************* * PDF options *//** * * * @global array $cfg['PDFPageSizes'] */$cfg['PDFPageSizes'] = array('A3', 'A4', 'A5', 'letter', 'legal');/** * * * @global string $cfg['PDFDefaultPageSize'] */$cfg['PDFDefaultPageSize'] = 'A4';/******************************************************************************* * Language and character set conversion settings *//** * Default language to use, if not browser-defined or user-defined * * @global string $cfg['DefaultLang'] */$cfg['DefaultLang'] = 'en';/** * Default connection collation * * @global string $cfg['DefaultConnectionCollation'] */$cfg['DefaultConnectionCollation'] = 'utf8_general_ci';/** * Force: always use this language * $cfg['Lang'] = 'en'; * * Regular expression to limit listed languages, e.g. '^(cs|en)' for Czech and * English only * * @global string $cfg['FilterLanguages'] */$cfg['FilterLanguages'] = '';/** * You can select here which functions will be used for character set conversion. * Possible values are: *      auto   - automatically use available one (first is tested iconv, then *               recode) *      iconv  - use iconv or libiconv functions *      recode - use recode_string function *      none   - disable encoding conversion * * @global string $cfg['RecodingEngine'] */$cfg['RecodingEngine'] = 'auto';/** * Specify some parameters for iconv used in character set conversion. See iconv * documentation for details: * http://www.gnu.org/software/libiconv/documentation/libiconv/iconv_open.3.html * * @global string $cfg['IconvExtraParams'] */$cfg['IconvExtraParams'] = '//TRANSLIT';/** * Available character sets for MySQL conversion. currently contains all which could * be found in lang/* files and few more. * Character sets will be shown in same order as here listed, so if you frequently * use some of these move them to the top. * * @global array $cfg['AvailableCharsets'] */$cfg['AvailableCharsets'] = array(    'iso-8859-1',    'iso-8859-2',    'iso-8859-3',    'iso-8859-4',    'iso-8859-5',    'iso-8859-6',    'iso-8859-7',    'iso-8859-8',    'iso-8859-9',    'iso-8859-10',    'iso-8859-11',    'iso-8859-12',    'iso-8859-13',    'iso-8859-14',    'iso-8859-15',    'windows-1250',    'windows-1251',    'windows-1252',    'windows-1256',    'windows-1257',    'koi8-r',    'big5',    'gb2312',    'utf-16',    'utf-8',    'utf-7',    'x-user-defined',    'euc-jp',    'ks_c_5601-1987',    'tis-620',    'SHIFT_JIS');/******************************************************************************* * Customization & design * * The graphical settings are now located in themes/theme-name/layout.inc.php *//** * enable the left panel pointer * (used when LeftFrameLight is false) * see also LeftPointerColor * in layout.inc.php * * @global boolean $cfg['LeftPointerEnable'] */$cfg['LeftPointerEnable'] = true;/** * enable the browse pointer * see also BrowsePointerColor * in layout.inc.php * * @global boolean $cfg['BrowsePointerEnable'] */$cfg['BrowsePointerEnable'] = true;/** * enable the browse marker * see also BrowseMarkerColor * in layout.inc.php * * @global boolean $cfg['BrowseMarkerEnable'] */$cfg['BrowseMarkerEnable'] = true;/** * textarea size (columns) in edit mode * (this value will be emphasized (*2) for SQL * query textareas and (*1.25) for query window) * * @global integer $cfg['TextareaCols'] */$cfg['TextareaCols'] = 40;/** * textarea size (rows) in edit mode * * @global integer $cfg['TextareaRows'] */$cfg['TextareaRows'] = 15;/** * double size of textarea size for LONGTEXT columns * * @global boolean $cfg['LongtextDoubleTextarea'] */$cfg['LongtextDoubleTextarea'] = true;/** * auto-select when clicking in the textarea of the query-box * * @global boolean $cfg['TextareaAutoSelect'] */$cfg['TextareaAutoSelect'] = false;/** * textarea size (columns) for CHAR/VARCHAR * * @global integer $cfg['CharTextareaCols'] */$cfg['CharTextareaCols'] = 40;/** * textarea size (rows) for CHAR/VARCHAR * * @global integer $cfg['CharTextareaRows'] */$cfg['CharTextareaRows'] = 2;/** * Max field data length in browse mode for all non-numeric fields * * @global integer $cfg['LimitChars'] */$cfg['LimitChars'] = 50;/** * Where to show the edit/copy/delete links in browse mode * Possible values are 'left', 'right', 'both' and 'none'; * which will be interpreted as 'top', 'bottom', 'both' and 'none' * respectively for vertical display mode * * @global string $cfg['RowActionLinks'] */$cfg['RowActionLinks'] = 'left';/** * default display direction (horizontal|vertical|horizontalflipped) * * @global string $cfg['DefaultDisplay'] */$cfg['DefaultDisplay'] = 'horizontal';/** * remember the last way a table sorted * * @global string $cfg['RememberSorting'] */$cfg['RememberSorting'] = true;/** * table-header rotation via faking or CSS? (css|fake|auto) * NOTE: CSS only works in IE browsers! * * @global string $cfg['HeaderFlipType'] */$cfg['HeaderFlipType'] = 'auto';/** * shows stored relation-comments in 'browse' mode. * * @global boolean $cfg['ShowBrowseComments'] */$cfg['ShowBrowseComments'] = true;/** * shows stored relation-comments in 'table property' mode. * * @global boolean $cfg['ShowPropertyComments'] */$cfg['ShowPropertyComments']= true;/** * save edited cell(s) in browse-mode at once. */$cfg['SaveCellsAtOnce'] = false;/** * shows table display direction. */$cfg['ShowDisplayDirection'] = false;/** * repeat header names every X cells? (0 = deactivate) * * @global integer $cfg['RepeatCells'] */$cfg['RepeatCells'] = 100;/** * Set to true if Edit link should open the query to edit in the query window * (assuming JavaScript is enabled), and to false if we should edit in the right panel * * @global boolean $cfg['EditInWindow'] */$cfg['EditInWindow'] = true;/** * Width of Query window * * @global integer $cfg['QueryWindowWidth'] */$cfg['QueryWindowWidth'] = 550;/** * Height of Query window * * @global integer $cfg['QueryWindowHeight'] */$cfg['QueryWindowHeight'] = 310;/** * Set to true if you want DB-based query history.If false, this utilizes * JS-routines to display query history (lost by window close) * * @global boolean $cfg['QueryHistoryDB'] */$cfg['QueryHistoryDB'] = false;/** * which tab to display in the querywindow on startup * (sql|files|history|full) * * @global string $cfg['QueryWindowDefTab'] */$cfg['QueryWindowDefTab'] = 'sql';/** * When using DB-based query history, how many entries should be kept? * * @global integer $cfg['QueryHistoryMax'] */$cfg['QueryHistoryMax'] = 25;/** * Use MIME-Types (stored in column comments table) for * * @global boolean $cfg['BrowseMIME'] */$cfg['BrowseMIME'] = true;/** * When approximate count < this, PMA will get exact count for table rows. * * @global integer $cfg['MaxExactCount'] */$cfg['MaxExactCount'] = 20000;/** * Zero means that no row count is done for views; see the doc * * @global integer $cfg['MaxExactCountViews'] */$cfg['MaxExactCountViews'] = 100000;/** * Sort table and database in natural order * * @global boolean $cfg['NaturalOrder'] */$cfg['NaturalOrder'] = true;/** * Initial state for sliders * (open | closed | disabled) * * @global string $cfg['InitialSlidersState'] */$cfg['InitialSlidersState'] = 'closed';/** * User preferences: disallow these settings * For possible setting names look in libraries/config/user_preferences.forms.php * * @global array $cfg['UserprefsDisallow'] */$cfg['UserprefsDisallow'] = array();/** * User preferences: enable the Developer tab */$cfg['UserprefsDeveloperTab'] = false;/******************************************************************************* * Window title settings *//** * title of browser window when a table is selected * * @global string $cfg['TitleTable'] */$cfg['TitleTable'] = '@HTTP_HOST@ / @VSERVER@ / @DATABASE@ / @TABLE@ | @PHPMYADMIN@';/** * title of browser window when a database is selected * * @global string $cfg['TitleDatabase'] */$cfg['TitleDatabase'] = '@HTTP_HOST@ / @VSERVER@ / @DATABASE@ | @PHPMYADMIN@';/** * title of browser window when a server is selected * * @global string $cfg['TitleServer'] */$cfg['TitleServer'] = '@HTTP_HOST@ / @VSERVER@ | @PHPMYADMIN@';/** * title of browser window when nothing is selected * @global string $cfg['TitleDefault'] */$cfg['TitleDefault'] = '@HTTP_HOST@ | @PHPMYADMIN@';/** * show some icons for warning, error and information messages (true|false)? * * @global boolean $cfg['ErrorIconic'] */$cfg['ErrorIconic'] = true;/** * show icons in list on main page and on menu tabs (true|false)? * * @global boolean $cfg['MainPageIconic'] */$cfg['MainPageIconic'] = true;/** * show help button instead of Documentation text (true|false)? * * @global boolean $cfg['ReplaceHelpImg'] */$cfg['ReplaceHelpImg'] = true;/******************************************************************************* * theme manager *//** * using themes manager please set up here the path to 'themes' else leave empty * * @global string $cfg['ThemePath'] */$cfg['ThemePath'] = './themes';/** * if you want to use selectable themes and if ThemesPath not empty * set it to true, else set it to false (default is false); * * @global boolean $cfg['ThemeManager'] */$cfg['ThemeManager'] = true;/** * set up default theme, if ThemePath not empty you can set up here an valid * path to themes or 'original' for the original pma-theme * * @global string $cfg['ThemeDefault'] */$cfg['ThemeDefault'] = 'pmahomme';/** * allow different theme for each configured server * * @global boolean $cfg['ThemePerServer'] */$cfg['ThemePerServer'] = false;/******************************************************************************* * *//** * Default query for table * * @global string $cfg['DefaultQueryTable'] */$cfg['DefaultQueryTable'] = 'SELECT * FROM @TABLE@ WHERE 1';/** * Default query for database * * @global string $cfg['DefaultQueryDatabase'] */$cfg['DefaultQueryDatabase'] = '';/******************************************************************************* * SQL Query box settings * These are the links display in all of the SQL Query boxes * * @global array $cfg['SQLQuery'] */$cfg['SQLQuery'] = array();/** * Edit link to change a query * * @global boolean $cfg['SQLQuery']['Edit'] */$cfg['SQLQuery']['Edit'] = true;/** * EXPLAIN on SELECT queries * * @global boolean $cfg['SQLQuery']['Explain'] */$cfg['SQLQuery']['Explain'] = true;/** * Wrap a query in PHP * * @global boolean $cfg['SQLQuery']['ShowAsPHP'] */$cfg['SQLQuery']['ShowAsPHP'] = true;/** * Validate a query (see $cfg['SQLValidator'] as well) * * @global boolean $cfg['SQLQuery']['Validate'] */$cfg['SQLQuery']['Validate'] = false;/** * Refresh the results page * * @global boolean $cfg['SQLQuery']['Refresh'] */$cfg['SQLQuery']['Refresh'] = true;/******************************************************************************* * Web server upload/save/import directories *//** * Directory for uploaded files that can be executed by phpMyAdmin. * For example './upload'. Leave empty for no upload directory support. * Use %u for username inclusion. * * @global string $cfg['UploadDir'] */$cfg['UploadDir'] = '';/** * Directory where phpMyAdmin can save exported data on server. * For example './save'. Leave empty for no save directory support. * Use %u for username inclusion. * * @global string $cfg['SaveDir'] */$cfg['SaveDir'] = '';/** * Directory where phpMyAdmin can save temporary files. * This is needed for MS Excel export, see documentation how to enable that. * * @global string $cfg['TempDir'] */$cfg['TempDir'] = '';/** * Misc. settings *//** * Is GD >= 2 available? Set to yes/no/auto. 'auto' does auto-detection, * which is the only safe way to determine GD version. * * @global string $cfg['GD2Available'] */$cfg['GD2Available'] = 'auto';/** * Lists proxy IP and HTTP header combinations which are trusted for IP allow/deny * * @global array $cfg['TrustedProxies'] */$cfg['TrustedProxies'] = array();/** * We normally check the permissions on the configuration file to ensure * it's not world writable. However, phpMyAdmin could be installed on * a NTFS filesystem mounted on a non-Windows server, in which case the * permissions seems wrong but in fact cannot be detected. In this case * a sysadmin would set the following to false. */$cfg['CheckConfigurationPermissions'] = true;/** * Limit for length of URL in links. When length would be above this limit, it * is replaced by form with button. * This is required as some web servers (IIS) have problems with long URLs. * The recommended limit is 2000 * (see http://www.boutell.com/newfaq/misc/urllength.html) but we put * 1000 to accommodate Suhosin, see bug #3358750. */$cfg['LinkLengthLimit'] = 1000;/** * Disable the table maintenance mass operations, like optimizing or * repairing the selected tables of a database. An accidental execution * of such a maintenance task can enormously slow down a bigger database. */$cfg['DisableMultiTableMaintenance'] = false;/******************************************************************************* * SQL Parser Settings * * @global array $cfg['SQP'] */$cfg['SQP'] = array();/** * Pretty-printing style to use on queries (html, text, none) * * @global string $cfg['SQP']['fmtType'] */$cfg['SQP']['fmtType'] = 'html';/** * Amount to indent each level (floats are valid) * * @global integer $cfg['SQP']['fmtInd'] */$cfg['SQP']['fmtInd'] = '1';/** * Units for indenting each level (CSS Types - {em, px, pt}) * * @global string $cfg['SQP']['fmtIndUnit'] */$cfg['SQP']['fmtIndUnit'] = 'em';/******************************************************************************* * If you wish to use the SQL Validator service, you should be aware of the * following: * All SQL statements are stored anonymously for statistical purposes. * Mimer SQL Validator, Copyright 2002 Upright Database Technology. * All rights reserved. * * @global array $cfg['SQLValidator'] */$cfg['SQLValidator'] = array();/** * Make the SQL Validator available * * @global boolean $cfg['SQLValidator']['use'] */$cfg['SQLValidator']['use'] = false;/** * If you have a custom username, specify it here (defaults to anonymous) * * @global string $cfg['SQLValidator']['username'] */$cfg['SQLValidator']['username'] = '';/** * Password for username * * @global string $cfg['SQLValidator']['password'] */$cfg['SQLValidator']['password'] = '';/******************************************************************************* * Developers ONLY! * * @global array $cfg['DBG'] */$cfg['DBG'] = array();/** * Output executed queries and their execution times * * @global boolean $cfg['DBG']['sql'] */$cfg['DBG']['sql'] = false;/******************************************************************************* * MySQL settings *//** * Column types; * VARCHAR, TINYINT, TEXT and DATE are listed first, based on estimated popularity * * This variable is filled in data_*.inc.php * * @global array $cfg['ColumnTypes'] */$cfg['ColumnTypes'] = array();/** * Attributes * * This variable is filled in data_*.inc.php * * @global array $cfg['AttributeTypes'] */$cfg['AttributeTypes'] = array();if ($cfg['ShowFunctionFields']) {    /**     * Available functions     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['Functions']     */    $cfg['Functions'] = array();    /**     * Which column types will be mapped to which Group?     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['RestrictColumnTypes']     */    $cfg['RestrictColumnTypes'] = array();    /**     * Map above defined groups to any function     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['RestrictFunctions']     */    $cfg['RestrictFunctions'] = array();    /**     * Default functions for above defined groups     *     * @global array $cfg['DefaultFunctions']     */    $cfg['DefaultFunctions'] = array(        'FUNC_CHAR' => '',        'FUNC_DATE' => '',        'FUNC_NUMBER' => '',        'FUNC_SPATIAL' => 'GeomFromText',        'FUNC_UUID' => 'UUID',        'first_timestamp' => 'NOW',    );} // end if/** * Search operators * * @global array $cfg['NumOperators'] */$cfg['NumOperators'] = array(   '=',   '>',   '>=',   '<',   '<=',   '!=',   'LIKE',   'NOT LIKE',   'IN (...)',   'NOT IN (...)',   'BETWEEN',   'NOT BETWEEN',);/** * Search operators * * @global array $cfg['TextOperators'] */$cfg['TextOperators'] = array(   'LIKE',   'LIKE %...%',   'NOT LIKE',   '=',   '!=',   'REGEXP',   'REGEXP ^...$',   'NOT REGEXP',   "= ''",   "!= ''",   'IN (...)',   'NOT IN (...)',   'BETWEEN',   'NOT BETWEEN',);/** * Search operators * * @global array $cfg['EnumOperators'] */$cfg['EnumOperators'] = array(   '=',   '!=',);/** * Search operators * * @global array $cfg['SetOperators'] */$cfg['SetOperators'] = array(   'IN',   'NOT IN',);/** * Search operators * * @global array $cfg['NullOperators'] */$cfg['NullOperators'] = array(   'IS NULL',   'IS NOT NULL',);/** * Search operators * * @global array $cfg['UnaryOperators'] */$cfg['UnaryOperators'] = array(   'IS NULL' => 1,   'IS NOT NULL' => 1,   "= ''" => 1,   "!= ''" => 1);/** * Max rows retreived for zoom search */$cfg['maxRowPlotLimit'] = 500;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/common.inc.php';/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam();/** * If coming from a Show MySQL link on the home page, * put something in $sub_part */if (empty($sub_part)) {    $sub_part = '_structure';}/** * Checks for superuser privileges */$is_superuser = PMA_isSuperuser();/** * Prepares links *//** * export, search and qbe links if there is at least one table */if ($num_tables == 0) {    $tab_qbe['warning'] = __('Database seems to be empty!');    $tab_search['warning'] = __('Database seems to be empty!');    $tab_export['warning'] = __('Database seems to be empty!');}$tab_structure['link']  = 'db_structure.php';$tab_structure['text']  = __('Structure');$tab_structure['icon']  = 'b_props.png';$tab_sql['link']        = 'db_sql.php';$tab_sql['args']['db_query_force'] = 1;$tab_sql['text']        = __('SQL');$tab_sql['icon']        = 'b_sql.png';$tab_export['text']     = __('Export');$tab_export['icon']     = 'b_export.png';$tab_export['link']     = 'db_export.php';$tab_search['text']     = __('Search');$tab_search['icon']     = 'b_search.png';$tab_search['link']     = 'db_search.php';if (PMA_Tracker::isActive()) {    $tab_tracking['text'] = __('Tracking');    $tab_tracking['icon'] = 'eye.png';    $tab_tracking['link'] = 'db_tracking.php';}$tab_qbe['text']        = __('Query');$tab_qbe['icon']        = 's_db.png';$tab_qbe['link']        = 'db_qbe.php';if ($cfgRelation['designerwork']) {    $tab_designer['text']   = __('Designer');    $tab_designer['icon']   = 'b_relations.png';    $tab_designer['link']   = 'pmd_general.php';}if (! $db_is_information_schema) {    $tab_import['link']     = 'db_import.php';    $tab_import['text']     = __('Import');    $tab_import['icon']     = 'b_import.png';    $tab_operation['link']  = 'db_operations.php';    $tab_operation['text']  = __('Operations');    $tab_operation['icon']  = 'b_tblops.png';    if ($is_superuser && !PMA_DRIZZLE) {        $tab_privileges['link'] = 'server_privileges.php';        $tab_privileges['args']['checkprivs']       = $db;        // stay on database view        $tab_privileges['args']['viewing_mode'] = 'db';        $tab_privileges['text'] = __('Privileges');        $tab_privileges['icon'] = 's_rights.png';    }    $tab_routines['link']   = 'db_routines.php';    $tab_routines['text']   = __('Routines');    $tab_routines['icon']   = 'b_routines.png';    $tab_events['link']     = 'db_events.php';    $tab_events['text']     = __('Events');    $tab_events['icon']     = 'b_events.png';    $tab_triggers['link']   = 'db_triggers.php';    $tab_triggers['text']   = __('Triggers');    $tab_triggers['icon']   = 'b_triggers.png';}/** * Displays tab links */$tabs = array();$tabs[] =& $tab_structure;$tabs[] =& $tab_sql;$tabs[] =& $tab_search;$tabs[] =& $tab_qbe;$tabs[] =& $tab_export;if (! $db_is_information_schema) {    $tabs[] =& $tab_import;    $tabs[] =& $tab_operation;    if ($is_superuser && !PMA_DRIZZLE) {        $tabs[] =& $tab_privileges;    }    if (!PMA_DRIZZLE) {        $tabs[] =& $tab_routines;    }    if (PMA_MYSQL_INT_VERSION >= 50106 && ! PMA_DRIZZLE) {        if (PMA_currentUserHasPrivilege('EVENT', $db)) {            $tabs[] =& $tab_events;        }    }    if (!PMA_DRIZZLE) {        if (PMA_currentUserHasPrivilege('TRIGGER', $db)) {            $tabs[] =& $tab_triggers;        }    }}if (PMA_Tracker::isActive()) {    $tabs[] =& $tab_tracking;}if (! $db_is_information_schema) {    if ($cfgRelation['designerwork']) {        $tabs[] =& $tab_designer;    }}$url_params['db'] = $db;echo PMA_generate_html_tabs($tabs, $url_params);unset($tabs);/** * Displays a message */if (!empty($message)) {    PMA_showMessage($message);    unset($message);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * the navigation frame - displays server, db and table selection tree * * @package PhpMyAdmin *//** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';/** * finish and cleanup navigation.php script execution, only to be used in navigation.php * * @access private */function PMA_exitNavigationFrame(){    echo '</body></html>';    exit;}require_once './libraries/common.lib.php';require_once './libraries/RecentTable.class.php';/** * Check if it is an ajax request to reload the recent tables list. */if ($GLOBALS['is_ajax_request'] && $_REQUEST['recent_table']) {    PMA_ajaxResponse('', true, array('options' => PMA_RecentTable::getInstance()->getHtmlSelectOption()) );}// keep the offset of the db list in session before closing itif (! isset($_SESSION['tmp_user_values']['navi_limit_offset'])) {    $_SESSION['tmp_user_values']['navi_limit_offset'] = 0;}if (! isset($_SESSION['tmp_user_values']['table_limit_offset']) || $_SESSION['tmp_user_values']['table_limit_offset_db'] != $db) {    $_SESSION['tmp_user_values']['table_limit_offset'] = 0;    $_SESSION['tmp_user_values']['table_limit_offset_db'] = $db;}if (isset($_REQUEST['pos'])) {    if (isset($_REQUEST['tpos'])) {        $_SESSION['tmp_user_values']['table_limit_offset'] = (int) $_REQUEST['pos'];    } else {        $_SESSION['tmp_user_values']['navi_limit_offset'] = (int) $_REQUEST['pos'];    }}$pos = $_SESSION['tmp_user_values']['navi_limit_offset'];$tpos = $_SESSION['tmp_user_values']['table_limit_offset'];// free the session file, for the other frames to be loaded// but only if debugging is not enabledif (empty($_SESSION['debug'])) {    session_write_close();}/** * the output compression library */require_once './libraries/ob.lib.php';PMA_outBufferPre();/* * selects the database if there is only one on current server */if ($GLOBALS['server'] && ! strlen($GLOBALS['db'])) {    $GLOBALS['db'] = $GLOBALS['pma']->databases->getSingleItem();}$db_start = $GLOBALS['db'];/** * the relation settings */$cfgRelation = PMA_getRelationsParam();/** * For re-usability, moved http-headers to a seperate file. * It can now be included by libraries/header.inc.php, querywindow.php. */require_once './libraries/header_http.inc.php';/* * Displays the frame */// xml declaration moves IE into quirks mode, making much trouble with CSS/* echo '<?xml version="1.0" encoding="utf-8"?>'; */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"    xml:lang="<?php echo $available_languages[$lang][1]; ?>"    lang="<?php echo $available_languages[$lang][1]; ?>"    dir="<?php echo $GLOBALS['text_dir']; ?>"><head>    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <title>phpMyAdmin</title>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <base target="frame_content" />    <link rel="stylesheet" type="text/css"        href="phpmyadmin.css.php?<?php echo PMA_generate_common_url('', ''); ?>&amp;js_frame=left&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" />    <?php    echo PMA_includeJS('jquery/jquery-1.6.2.js');    echo PMA_includeJS('jquery/jquery-ui-1.8.16.custom.js');    echo PMA_includeJS('jquery/jquery.qtip-1.0.0-rc3.js');    echo PMA_includeJS('navigation.js');    echo PMA_includeJS('functions.js');    echo PMA_includeJS('messages.php');    // Append the theme id to this url to invalidate the cache on a theme change    echo PMA_includeJS('get_image.js.php?theme=' . urlencode($_SESSION['PMA_Theme']->getId()));    ?>    <script type="text/javascript">    // <![CDATA[    // INIT PMA_setFrameSize    var onloadCnt = 0;    var onLoadHandler = window.onload;    var resizeHandler = window.onresize;    window.document.onresize  = resizeHandler;    window.onload = function() {        if (onloadCnt == 0) {            if (typeof(onLoadHandler) == "function") {                onLoadHandler();            }            if (typeof(PMA_setFrameSize) != 'undefined' && typeof(PMA_setFrameSize) == 'function') {                PMA_setFrameSize();            }            onloadCnt++;        }    };    window.onresize = function() {        if (typeof(resizeHandler) == "function") {            resizeHandler();        }        if (typeof(PMA_saveFrameSize) != 'undefined' && typeof(PMA_saveFrameSize) == 'function') {            PMA_saveFrameSize();        }    };    // ]]>    </script>    <?php    /*     * remove horizontal scroll bar bug in IE 6 by forcing a vertical scroll bar     */    ?>    <!--[if IE 6]>    <style type="text/css">    /* <![CDATA[ */    html {        overflow-y: scroll;    }    /* ]]> */    </style>    <![endif]--></head><body id="body_leftFrame"><?phprequire './libraries/navigation_header.inc.php';// display recently used tablesif ($GLOBALS['cfg']['LeftRecentTable'] > 0) {    echo '<div id="recentTableList">' . "\n"        .'<form method="post" action="index.php" target="_parent">' . "\n"        .PMA_generate_common_hidden_inputs() . "\n"        .PMA_RecentTable::getInstance()->getHtmlSelect()        .'<noscript>' . "\n"        .'<input type="submit" name="Go" value="' . __('Go') . '" />' . "\n"        .'</noscript>' . "\n"        .'</form>' . "\n"        .'</div>' . "\n";}if (! $GLOBALS['server']) {    // no server selected    PMA_exitNavigationFrame();} elseif (! count($GLOBALS['pma']->databases)) {    // no database available, so we break here    echo '<p>' . __('No databases') . '</p>';    PMA_exitNavigationFrame();} elseif ($GLOBALS['cfg']['LeftFrameLight'] && count($GLOBALS['pma']->databases) > 1) {    $list = $cfg['DisplayDatabasesList'];    if ($list === 'auto') {        if (empty($GLOBALS['db'])) {            $list = true;        } else {            $list = false;        }    }    if (!$list) {        // more than one database available and LeftFrameLight is true        // display db selectbox        //        // Light mode -> beginning of the select combo for databases        // Note: When javascript is active, the frameset will be changed from        // within navigation.php. With no JS (<noscript>) the whole frameset will        // be rebuilt with the new target frame.    ?>    <div id="databaseList">    <form method="post" action="index.php" target="_parent" id="left">    <?php        echo PMA_generate_common_hidden_inputs() . "\n";        echo $GLOBALS['pma']->databases->getHtmlSelectGrouped(true, $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']) . "\n";        echo '<noscript>' . "\n"            .'<input type="submit" name="Go" value="' . __('Go') . '" />' . "\n"            .'</noscript>' . "\n"            .'</form>' . "\n"            . '</div>' . "\n";    } else {        echo $GLOBALS['pma']->databases->getHtmlListGrouped(true, $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']) . "\n";    }    $_url_params = array('pos' => $pos);    PMA_listNavigator(count($GLOBALS['pma']->databases), $pos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxDbList']);}?><div id="left_tableList"><?php// Don't display expansible/collapsible database info if:// 1. $GLOBALS['server'] == 0 (no server selected)//    This is the case when there are multiple servers and//    '$GLOBALS['cfg']['ServerDefault'] = 0' is set. In that case, we want the welcome//    screen to appear with no database info displayed.// 2. there is only one database available (ie either only one database exists//    or $GLOBALS['cfg']['Servers']['only_db'] is defined and is not an array)//    In this case, the database should not be collapsible/expandable$img_plus = PMA_getImage('b_plus.png', '+', array('id' => 'el%dImg'));$img_minus = PMA_getImage('b_minus.png', '-', array('id' => 'el%dImg'));$href_left = '<a onclick="if (toggle(\'%d\')) return false;"'    .' href="navigation.php?%s" target="_self">';$element_counter = 0;if ($GLOBALS['cfg']['LeftFrameLight'] && strlen($GLOBALS['db'])) {    $table_list = PMA_getTableList($GLOBALS['db'], null, $tpos, $cfg['MaxTableList']);    $table_count = PMA_getTableCount($GLOBALS['db']);    // show selected databasename as link to DefaultTabDatabase-page    // with table count in ()    $common_url_query = PMA_generate_common_url($GLOBALS['db']);    $db_tooltip = '';    if ($GLOBALS['cfg']['ShowTooltip']      && $GLOBALS['cfgRelation']['commwork']) {        $_db_tooltip = PMA_getDbComment($GLOBALS['db']);        if ($_db_tooltip) {            $db_tooltip = $_db_tooltip;        }    }    $disp_name  = $GLOBALS['db'];    if ($db_tooltip && $GLOBALS['cfg']['ShowTooltipAliasDB']) {        $disp_name      = $db_tooltip;        $disp_name_cut  = $db_tooltip;        $db_tooltip     = $GLOBALS['db'];    }    if ($table_count >= $GLOBALS['cfg']['LeftDisplayTableFilterMinimum']) {        ?>        <span id="NavFilter">        <span id="clear_fast_filter" title="<?php echo __('Clear'); ?>">X</span>            <input type="text" class="gray" name="fast_filter" id="fast_filter" title="<?php echo __('Filter tables by name'); ?>" value="<?php echo __('Filter tables by name'); ?>" />        </span>        <?php    }    /**     * This helps reducing the navi panel size; in the right panel,     * user can find a navigator to page thru all tables.     *     */    if (! empty($table_list)) {        // upper table list paginator        if (count($table_list) <= $GLOBALS['cfg']['MaxTableList'] && $table_count > $GLOBALS['cfg']['MaxTableList']) {            $_url_params = array(              'tpos' => 'true',              'pos' => $tpos,              'db' => $GLOBALS['db']            );            PMA_listNavigator($table_count, $tpos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxTableList']);        }        PMA_displayTableList($table_list, true, '', $GLOBALS['db']);        // lower table list paginator        if (count($table_list) <= $GLOBALS['cfg']['MaxTableList'] && $table_count > $GLOBALS['cfg']['MaxTableList']) {            PMA_listNavigator($table_count, $tpos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxTableList']);        }    } else {        echo __('No tables found in database.');    }    unset($table_list);    if (!PMA_is_system_schema($db)) {        $class = '';        $GLOBALS['cfg']['AjaxEnable'] ? $class="ajax" : '';        echo '<ul id="newtable"><li><a target="frame_content" href="tbl_create.php' . PMA_generate_common_url(array('db' => $GLOBALS['db'])) . '"  class="'.$class .'" >'            . PMA_getImage('b_snewtbl.png', _pgettext('short form', 'Create table'), array('id' => "icon_newtable"))            . _pgettext('short form', 'Create table') . '</a></li></ul>';    }} elseif ($GLOBALS['cfg']['LeftFrameLight']) {    /* No need to tell user to select database if we're showing complete list */    if (!$list) {        echo '<p>' . __('Please select a database') . '</p>';    }} else {    echo '<div id="databaseList">' . "\n";    $_url_params = array('pos' => $pos);    PMA_listNavigator(count($GLOBALS['pma']->databases), $pos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxDbList']);    echo '</div>' . "\n";    $common_url_query = PMA_generate_common_url();    PMA_displayDbList($GLOBALS['pma']->databases->getGroupedDetails($_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']), $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']);}/** * displays collapsable db list * * @global  integer $element_counter * @global  string $img_minus * @global  string $img_plus * @global  string $href_left * @global  string $db_start * @global  string $common_url_query * @param array   $ext_dblist extended db list * @param integer $offset * @param integer $count */function PMA_displayDbList($ext_dblist, $offset, $count){    global $element_counter, $img_minus, $img_plus, $href_left,        $db_start, $common_url_query;    // get table list, for all databases    // doing this in one step takes advantage of a single query with information_schema!    $tables_full = PMA_DBI_get_tables_full($GLOBALS['pma']->databases->getLimitedItems($offset, $count));    $url_dbgroup = '';    echo '<ul id="leftdatabaselist">';    $close_db_group = false;    foreach ($ext_dblist as $group => $db_group) {        if (count($GLOBALS['pma']->databases) > 1) {            if ($close_db_group) {                $url_dbgroup = '';                echo '</ul>';                echo '</li>';                $close_db_group = false;            }            if (count($db_group) > 1) {                $close_db_group = true;                $url_dbgroup = '&amp;dbgroup=' . urlencode($group);                $common_url_query = PMA_generate_common_url() . $url_dbgroup;                $element_counter++;                echo '<li class="dbgroup">';                if ((! empty($_REQUEST['dbgroup']) && $_REQUEST['dbgroup'] == $group)                  || $db_start == $group || strpos($db_start, $group) === 0) {                    // display + only if this db(group) is not preselected                    printf($href_left, $element_counter, PMA_generate_common_url());                    printf($img_minus, $element_counter);                } else {                    printf($href_left, $element_counter, $common_url_query);                    printf($img_plus, $element_counter);                }                echo '</a> ' . $group . "\n";                if ((! empty($_REQUEST['dbgroup']) && $_REQUEST['dbgroup'] == $group)                  || $db_start == $group || strpos($db_start, $group) === 0) {                    echo '<ul id="subel' . $element_counter . '">' . "\n";                } else {                    echo '<ul id="subel' . $element_counter . '"'                        .' style="display: none">' . "\n";                }            }        }        foreach ($db_group as $db) {            $common_url_query = PMA_generate_common_url($db['name']) . $url_dbgroup;            $element_counter++;            // Displays the database name            echo '<li>' . "\n";            if (count($GLOBALS['pma']->databases) > 1) {                // only with more than one db we need collapse ...                if ($db_start != $db['name'] || $db['num_tables'] < 1) {                    // display + only if this db is not preselected                    // or table count is 0                    printf($href_left, $element_counter, $common_url_query);                    printf($img_plus, $element_counter);                } else {                    printf($href_left, $element_counter,                        PMA_generate_common_url() . $url_dbgroup);                    printf($img_minus, $element_counter);                }                echo '</a>';                // ... and we need to refresh both frames on db selection                ?>                <a class="item"                    id="<?php echo htmlspecialchars($db['name']); ?>"                    href="index.php?<?php echo $common_url_query; ?>"                    target="_parent"                    title="<?php echo htmlspecialchars($db['comment']); ?>"                    onclick="                        if (! toggle('<?php echo $element_counter; ?>', true))                            window.parent.goTo('./navigation.php?<?php echo $common_url_query; ?>');                        window.parent.goTo('./<?php echo $GLOBALS['cfg']['DefaultTabDatabase']                            . '?' . $common_url_query; ?>', 'main');                        return false;">                    <?php                    // Might be unset if CountTables directive is false                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'rtl') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    echo htmlspecialchars($db['disp_name']);                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'ltr') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    ?>                </a>                <?php            } else {                // with only 1 db available we dont need to refresh navi frame                // on db selection, only phpmain                ?>                <a href="<?php echo $GLOBALS['cfg']['DefaultTabDatabase']                    . '?' . $common_url_query; ?>"                    id="<?php echo htmlspecialchars($db['name']); ?>"                    title="<?php echo htmlspecialchars($db['comment']); ?>">                    <?php                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'rtl') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    echo htmlspecialchars($db['disp_name']);                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'ltr') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    ?>                </a>                <?php            }            if (($GLOBALS['cfg']['Server']['CountTables'] === false) || $db['num_tables']) {                if (isset($tables_full[$db['name']])) {                    $tables = PMA_getTableList($db['name'], $tables_full[$db['name']]);                } elseif (isset($tables_full[strtolower($db['name'])])) {                    // on windows with lower_case_table_names = 1                    // MySQL returns                    // with SHOW DATABASES or information_schema.SCHEMATA: `Test`                    // but information_schema.TABLES gives `test`                    // bug #1436171                    // sf.net/tracker/?func=detail&aid=1436171&group_id=23067&atid=377408                    $tables = PMA_getTableList($db['name'], $tables_full[strtolower($db['name'])]);                } else {                    $tables = PMA_getTableList($db['name']);                }                $child_visible                    = (bool) (count($GLOBALS['pma']->databases) === 1 || $db_start == $db['name']);                PMA_displayTableList($tables, $child_visible, '', $db['name']);            } elseif ($GLOBALS['cfg']['LeftFrameLight']) {                // no tables and LeftFrameLight:                // display message no tables in selected db                echo '<p>' . __('Please select a database') . '</p>' . "\n";            }            echo '</li>' . "\n";        } // end foreach db    } // end foreach group    if ($close_db_group) {        $url_dbgroup = '';        echo '</ul>';        echo '</li>';        $close_db_group = false;    }    echo '</ul>' . "\n";}/** * display unordered list of tables * calls itself recursively if table in given list * is a list itself * * @global  integer the element counter * @global  string  html code for '-' image * @global  string  html code for '+' image * @global  string  html code for self link * @param array   $tables         array of tables/tablegroups * @param boolean $visible        whether the list is visible or not * @param string  $tab_group_full full tab group name * @param string  $table_db       db of this table */function PMA_displayTableList($tables, $visible = false,    $tab_group_full = '', $table_db = ''){    if (! is_array($tables) || count($tables) === 0) {        return;    }    global $element_counter, $img_minus, $img_plus, $href_left;    $sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];    if ($visible) {        echo '<ul id="subel' . $element_counter . '">';    } else {        echo '<ul id="subel' . $element_counter . '" style="display: none">';    }    foreach ($tables as $group => $table) {        // only allow grouping if the group has more than 1 table        if (isset($table['is' . $sep . 'group']) && $table['tab' . $sep . 'count'] > 1) {            $common_url_query = $GLOBALS['common_url_query']                . '&amp;tbl_group=' . urlencode($tab_group_full . $group);            $element_counter++;            echo '<li>' . "\n";            if ($visible             && ((isset($_REQUEST['tbl_group'])               && (strpos($_REQUEST['tbl_group'], $group) === 0                || strpos($_REQUEST['tbl_group'], $sep . $group) !== false))              || strpos($GLOBALS['table'], $group) === 0)) {                printf($href_left, $element_counter,                    $GLOBALS['common_url_query'] . '&amp;tbl_group=' . $tab_group_full);                printf($img_minus, $element_counter);            } else {                printf($href_left, $element_counter, $common_url_query);                printf($img_plus, $element_counter);            }            echo '</a>';            ?>            <a href="index.php?<?php echo $common_url_query; ?>"                target="_parent"                onclick="                    if (! toggle('<?php echo $element_counter; ?>', true))                        window.parent.goTo('./navigation.php?<?php echo $common_url_query; ?>');                    window.parent.goTo('./<?php echo $GLOBALS['cfg']['DefaultTabDatabase']                        . '?' . $common_url_query; ?>', 'main');                    return false;">                <?php                if ($GLOBALS['text_dir'] === 'rtl') {                    echo ' <bdo dir="ltr">(' . $table['tab' . $sep . 'count'] . ')</bdo> ';                }                echo htmlspecialchars(substr($group, 0, strlen($group) - strlen($sep)));                if ($GLOBALS['text_dir'] === 'ltr') {                    echo ' <bdo dir="ltr">(' . $table['tab' . $sep . 'count'] . ')</bdo> ';                }                ?>            </a>            <?php            unset($table['is' . $sep . 'group']);            unset($table['tab' . $sep . 'group']);            unset($table['tab' . $sep . 'count']);            if ($visible &&              ((isset($_REQUEST['tbl_group'])                && (strpos($_REQUEST['tbl_group'], $group) === 0                || strpos($_REQUEST['tbl_group'], $sep . $group) !== false))              || strpos($GLOBALS['table'], $group) === 0)) {                PMA_displayTableList($table, true,                    $tab_group_full . $group, $table_db);            } else {                PMA_displayTableList($table, false, '', $table_db);            }            echo '</li>' . "\n";        } elseif (is_array($table)) {            // the table was not grouped because it is the only one with its prefix            while (isset($table['is' . $sep . 'group'])) {                // get the array with the actual table information                foreach ($table as $value) {                    if (is_array($value)) {                        $table = $value;                    }                }            }            $link_title = PMA_getTitleForTarget($GLOBALS['cfg']['LeftDefaultTabTable']);            // quick access icon next to each table name            echo '<li>' . "\n";            echo '<a class="tableicon" title="'                . htmlspecialchars($link_title)                . ': ' . htmlspecialchars($table['Comment'])                .' (' . PMA_formatNumber($table['Rows'], 0) . ' ' . __('Rows') . ')"'                .' id="quick_' . htmlspecialchars($table_db . '.' . $table['Name']) . '"'                .' href="' . $GLOBALS['cfg']['LeftDefaultTabTable'] . '?'                . $GLOBALS['common_url_query']                .'&amp;table=' . urlencode($table['Name'])                .'&amp;goto=' . $GLOBALS['cfg']['LeftDefaultTabTable']                . '" >';            $attr = array('id' => 'icon_' . htmlspecialchars($table_db . '.' . $table['Name']));            if (PMA_Table::isView($table_db, $table['Name'])) {                echo PMA_getImage('s_views.png', htmlspecialchars($link_title), $attr);            } else {                echo PMA_getImage('b_browse.png', htmlspecialchars($link_title), $attr);            }            echo '</a>';            // link for the table name itself            $href = $GLOBALS['cfg']['DefaultTabTable'] . '?'                .$GLOBALS['common_url_query'] . '&amp;table='                .urlencode($table['Name']) . '&amp;pos=0';            echo '<a href="' . $href            . '" title="' . htmlspecialchars(PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabTable']) . ': ' . $table['Comment']                .' (' . PMA_formatNumber($table['Rows'], 0) . ' ' . __('Rows')) . ')"'                .' id="' . htmlspecialchars($table_db . '.' . $table['Name']) . '">'                // preserve spaces in table name                . str_replace(' ', '&nbsp;', htmlspecialchars($table['disp_name'])) . '</a>';            echo '</li>' . "\n";        }    }    echo '</ul>';}echo '</div>' . "\n";PMA_exitNavigationFrame();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * hold PMA_Theme class * * @package PhpMyAdmin *//** * handles theme * * @todo add the possibility to make a theme depend on another theme and by default on original * @todo make all components optional - get missing components from 'parent' theme * @todo make css optionally replacing 'parent' css or extending it (by appending at the end) * @todo add an optional global css file - which will be used for both frames * * @package PhpMyAdmin */class PMA_Theme{    /**     * @var string theme version     * @access  protected     */    var $version = '0.0.0.0';    /**     * @var string theme name     * @access  protected     */    var $name = '';    /**     * @var string theme id     * @access  protected     */    var $id = '';    /**     * @var string theme path     * @access  protected     */    var $path = '';    /**     * @var string image path     * @access  protected     */    var $img_path = '';    /**     * @var array   valid css types     * @access  protected     */    var $types = array('left', 'right', 'print');    /**     * @var integer last modification time for info file     * @access  protected     */    var $mtime_info = 0;    /**     * needed because sometimes, the mtime for different themes     * is identical     * @var integer filesize for info file     * @access  protected     */    var $filesize_info = 0;    /**     * @access  public     * @return  boolean     whether loading them info was successful or not     */    function loadInfo()    {        if (! file_exists($this->getPath() . '/info.inc.php')) {            return false;        }        if ($this->mtime_info === filemtime($this->getPath() . '/info.inc.php')) {            return true;        }        @include $this->getPath() . '/info.inc.php';        // was it set correctly?        if (! isset($theme_name)) {            return false;        }        $this->mtime_info = filemtime($this->getPath() . '/info.inc.php');        $this->filesize_info = filesize($this->getPath() . '/info.inc.php');        if (isset($theme_full_version)) {            $this->setVersion($theme_full_version);        } elseif (isset($theme_generation, $theme_version)) {            $this->setVersion($theme_generation . '.' . $theme_version);        }        $this->setName($theme_name);        return true;    }    /**     * returns theme object loaded from given folder     * or false if theme is invalid     *     * @static     * @access  public     * @param string  $folder path to theme     * @return  object  PMA_Theme     */    static public function load($folder)    {        $theme = new PMA_Theme();        $theme->setPath($folder);        if (! $theme->loadInfo()) {            return false;        }        $theme->checkImgPath();        return $theme;    }    /**     * checks image path for existance - if not found use img from original theme     *     * @access  public     * @return bool     */    function checkImgPath()    {        if (is_dir($this->getPath() . '/img/')) {            $this->setImgPath($this->getPath() . '/img/');            return true;        } elseif (is_dir($GLOBALS['cfg']['ThemePath'] . '/original/img/')) {            $this->setImgPath($GLOBALS['cfg']['ThemePath'] . '/original/img/');            return true;        } else {            trigger_error(                sprintf(__('No valid image path for theme %s found!'), $this->getName()),                E_USER_ERROR);            return false;        }    }    /**     * returns path to theme     *     * @access  public     * @return  string  $path   path to theme     */    function getPath()    {        return $this->path;    }    /**     * returns layout file     *     * @access  public     * @return  string  layout file     */    function getLayoutFile()    {        return $this->getPath() . '/layout.inc.php';    }    /**     * set path to theme     *     * @access  public     * @param string  $path   path to theme     */    function setPath($path)    {        $this->path = trim($path);    }    /**     * sets version     *     * @access  public     * @param string new version     */    function setVersion($version)    {        $this->version = trim($version);    }    /**     * returns version     *     * @access  public     * @return  string  version     */    function getVersion()    {        return $this->version;    }    /**     * checks theme version agaisnt $version     * returns true if theme version is equal or higher to $version     *     * @access  public     * @param string  $version    version to compare to     * @return  boolean     */    function checkVersion($version)    {        return version_compare($this->getVersion(), $version, 'lt');    }    /**     * sets name     *     * @access  public     * @param string  $name   new name     */    function setName($name)    {        $this->name = trim($name);    }    /**     * returns name     *     * @access  public     * @return  string name     */    function getName()    {        return $this->name;    }    /**     * sets id     *     * @access  public     * @param string  $id   new id     */    function setId($id)    {        $this->id = trim($id);    }    /**     * returns id     *     * @access  public     * @return  string  id     */    function getId()    {        return $this->id;    }    /**     * @access  public     * @param string  path to images for this theme     */    function setImgPath($path)    {        $this->img_path = $path;    }    /**     * @access  public     * @return  string image path for this theme     */    function getImgPath()    {        return $this->img_path;    }    /**     * load css (send to stdout, normally the browser)     *     * @access  public     * @param string  $type   left, right or print     * @return bool     */    function loadCss(&$type)    {        if (empty($type) || ! in_array($type, $this->types)) {            $type = 'left';        }        if ($type == 'right') {            echo PMA_SQP_buildCssData();        }        $_css_file = $this->getPath()                   . '/css/theme_' . $type . '.css.php';        if (! file_exists($_css_file)) {            return false;        }        if ($GLOBALS['text_dir'] === 'ltr') {            $right = 'right';            $left = 'left';        } else {            $right = 'left';            $left = 'right';        }        include $_css_file;        if ($type != 'print') {            $_sprites_data_file = $this->getPath() . '/sprites.lib.php';            $_sprites_css_file = './themes/sprites.css.php';            if (   (file_exists($_sprites_data_file)  && is_readable($_sprites_data_file))                && (file_exists($_sprites_css_file) && is_readable($_sprites_css_file))            ) {                include $_sprites_data_file;                include $_sprites_css_file;            }        }        return true;    }    /**     * prints out the preview for this theme     *     * @access  public     */    function printPreview()    {        echo '<div class="theme_preview">';        echo '<h2>' . htmlspecialchars($this->getName())            .' (' . htmlspecialchars($this->getVersion()) . ')</h2>';        echo '<p>';        echo '<a target="_top" class="take_theme" '            .'name="' . htmlspecialchars($this->getId()) . '" '            . 'href="index.php'.PMA_generate_common_url(array(                'set_theme' => $this->getId()                )) . '">';        if (@file_exists($this->getPath() . '/screen.png')) {            // if screen exists then output            echo '<img src="' . $this->getPath() . '/screen.png" border="1"'                .' alt="' . htmlspecialchars($this->getName()) . '"'                .' title="' . htmlspecialchars($this->getName()) . '" /><br />';        } else {            echo __('No preview available.');        }        echo '[ <strong>' . __('take it') . '</strong> ]</a>'            .'</p>'            .'</div>';    }    /**     * Remove filter for IE.     *     * @return string CSS code.     */    function getCssIEClearFilter() {        return PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 6 && PMA_USR_BROWSER_VER <= 8            ? 'filter: none'            : '';    }    /**     * Generates code for CSS gradient using various browser extensions.     *     * @param string $start_color Color of gradient start, hex value without #     * @param string $end_color   Color of gradient end, hex value without #     *     * @return string CSS code.     */    function getCssGradient($start_color, $end_color)    {        $result = array();        // Opera 9.5+, IE 9        $result[] = 'background-image: url(./themes/svg_gradient.php?from=' . $start_color . '&to=' . $end_color . ');';        $result[] = 'background-size: 100% 100%;';        // Safari 4-5, Chrome 1-9        $result[] = 'background: -webkit-gradient(linear, left top, left bottom, from(#' . $start_color . '), to(#' . $end_color . '));';        // Safari 5.1, Chrome 10+        $result[] = 'background: -webkit-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // Firefox 3.6+        $result[] = 'background: -moz-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // IE 10        $result[] = 'background: -ms-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // Opera 11.10        $result[] = 'background: -o-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // IE 6-8        if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 6 && PMA_USR_BROWSER_VER <= 8) {            $result[] = 'filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#' . $start_color . '", endColorstr="#' . $end_color . '");';        }        return implode("\n", $result);    }    /**     * Returns CSS styles for CodeMirror editor based on query formatter colors.     *     * @return string CSS code.     */    function getCssCodeMirror()    {        $result[] = 'span.cm-keyword, span.cm-statement-verb {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_reservedWord'] . ';';        $result[] = '}';        $result[] = 'span.cm-variable {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_identifier'] . ';';        $result[] = '}';        $result[] = 'span.cm-comment {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['comment'] . ';';        $result[] = '}';        $result[] = 'span.cm-mysql-string {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['quote'] . ';';        $result[] = '}';        $result[] = 'span.cm-operator {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['punct'] . ';';        $result[] = '}';        $result[] = 'span.cm-mysql-word {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_identifier'] . ';';        $result[] = '}';        $result[] = 'span.cm-builtin {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_functionName'] . ';';        $result[] = '}';        $result[] = 'span.cm-variable-2 {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_columnType'] . ';';        $result[] = '}';        $result[] = 'span.cm-variable-3 {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_columnAttrib'] . ';';        $result[] = '}';        $result[] = 'span.cm-separator {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['punct'] . ';';        $result[] = '}';        $result[] = 'span.cm-number {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['digit_integer'] . ';';        $result[] = '}';        return implode("\n", $result);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';require_once './libraries/mysql_charsets.lib.php';if (!PMA_DRIZZLE) {    include_once './libraries/replication.inc.php';}require './libraries/build_html_for_db.lib.php';PMA_checkParameters(array('new_db'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'main.php?' . PMA_generate_common_url();/** * Builds and executes the db creation sql query */$sql_query = 'CREATE DATABASE ' . PMA_backquote($new_db);if (!empty($db_collation)) {    list($db_charset) = explode('_', $db_collation);    if (in_array($db_charset, $mysql_charsets) && in_array($db_collation, $mysql_collations[$db_charset])) {        $sql_query .= ' DEFAULT' . PMA_generateCharsetQueryPart($db_collation);    }    $db_collation_for_ajax = $db_collation;    unset($db_charset, $db_collation);}$sql_query .= ';';$result = PMA_DBI_try_query($sql_query);if (! $result) {    $message = PMA_Message::rawError(PMA_DBI_getError());    // avoid displaying the not-created db name in header or navi panel    $GLOBALS['db'] = '';    $GLOBALS['table'] = '';    /**     * If in an Ajax request, just display the message with {@link PMA_ajaxResponse}     */    if ($GLOBALS['is_ajax_request'] == true) {        PMA_ajaxResponse($message, false);    }    include_once './libraries/header.inc.php';    include_once './main.php';} else {    $message = PMA_Message::success(__('Database %1$s has been created.'));    $message->addParam($new_db);    $GLOBALS['db'] = $new_db;    /**     * If in an Ajax request, build the output and send it     */    if ($GLOBALS['is_ajax_request'] == true) {        /**         * String containing the SQL Query formatted in pretty HTML         * @global array $GLOBALS['extra_data']         * @name $extra_data         */        $extra_data['sql_query'] = PMA_showMessage(null, $sql_query, 'success');        //Construct the html for the new database, so that it can be appended to the list of databases on server_databases.php        /**         * Build the array to be passed to {@link PMA_generate_common_url} to generate the links         * @global array $GLOBALS['db_url_params']         * @name $db_url_params         */        $db_url_params['db'] = $new_db;        $is_superuser = PMA_isSuperuser();        $column_order = PMA_getColumnOrder();        $url_query = PMA_generate_common_url($new_db);        /**         * String that will contain the output HTML         * @name    $new_db_string         */        $new_db_string = '<tr>';        if (empty($db_collation_for_ajax)) {            $db_collation_for_ajax = PMA_getServerCollation();        }        // $dbstats comes from the create table dialog        if (! empty($dbstats)) {            $current = array(                'SCHEMA_NAME' => $new_db,                'DEFAULT_COLLATION_NAME' => $db_collation_for_ajax,                'SCHEMA_TABLES' => '0',                'SCHEMA_TABLE_ROWS' => '0',                'SCHEMA_DATA_LENGTH' => '0',                'SCHEMA_MAX_DATA_LENGTH' => '0',                'SCHEMA_INDEX_LENGTH' => '0',                'SCHEMA_LENGTH' => '0',                'SCHEMA_DATA_FREE' => '0'            );        } else {            $current = array(                'SCHEMA_NAME' => $new_db            );        }        list($column_order, $generated_html) = PMA_buildHtmlForDb($current, $is_superuser, (isset($checkall) ? $checkall : ''), $url_query, $column_order, $replication_types, $replication_info);        $new_db_string .= $generated_html;        $new_db_string .= '</tr>';        $extra_data['new_db_string'] = $new_db_string;        PMA_ajaxResponse($message, true, $extra_data);    }    include_once './libraries/header.inc.php';    include_once './' . $cfg['DefaultTabDatabase'];}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to export a set of queries to a MS Word document * * @package PhpMyAdmin-Export * @subpackage HTMLWord */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['htmlword'] = array(        'text' => __('Microsoft Word 2000'),        'extension' => 'doc',        'mime_type' => 'application/vnd.ms-word',        'force_file' => true,        'options' => array(            /* what to dump (structure/data/both) */            array('type' => 'begin_group', 'name' => 'dump_what', 'text' => __('Dump table')),            array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data'))),            array('type' => 'end_group'),            /* data options */            array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure'),            array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:')),            array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),            array('type' => 'end_group'),            ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return PMA_exportOutputHandler('</body></html>');    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        global $charset_of_file;        return PMA_exportOutputHandler('<html xmlns:o="urn:schemas-microsoft-com:office:office"    xmlns:x="urn:schemas-microsoft-com:office:word"    xmlns="http://www.w3.org/TR/REC-html40">    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">    <html>    <head>        <meta http-equiv="Content-type" content="text/html;charset=' . (isset($charset_of_file) ? $charset_of_file : 'utf-8') . '" />    </head>    <body>');    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return PMA_exportOutputHandler('<h1>' . __('Database') . ' ' . htmlspecialchars($db) . '</h1>');    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in HTML (Microsoft Word) format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $what;        if (! PMA_exportOutputHandler('<h2>' . __('Dumping data for table') . ' ' . htmlspecialchars($table) . '</h2>')) {            return false;        }        if (! PMA_exportOutputHandler('<table class="width100" cellspacing="1">')) {            return false;        }        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        // If required, get fields name at the first line        if (isset($GLOBALS['htmlword_columns'])) {            $schema_insert = '<tr class="print-category">';            for ($i = 0; $i < $fields_cnt; $i++) {                $schema_insert .= '<td class="print"><b>' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i))) . '</b></td>';            } // end for            $schema_insert .= '</tr>';            if (! PMA_exportOutputHandler($schema_insert)) {                return false;            }        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $schema_insert = '<tr class="print-category">';            for ($j = 0; $j < $fields_cnt; $j++) {                if (! isset($row[$j]) || is_null($row[$j])) {                    $value = $GLOBALS[$what . '_null'];                } elseif ($row[$j] == '0' || $row[$j] != '') {                    $value = $row[$j];                } else {                    $value = '';                }                $schema_insert .= '<td class="print">' . htmlspecialchars($value) . '</td>';            } // end for            $schema_insert .= '</tr>';            if (! PMA_exportOutputHandler($schema_insert)) {                return false;            }        } // end while        PMA_DBI_free_result($result);        if (! PMA_exportOutputHandler('</table>')) {            return false;        }        return true;    }    /**     * Outputs table's structure     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         the end of line sequence     * @param string  $error_url    the url to go back in case of error     * @param bool    $do_relation  whether to include relation comments     * @param bool    $do_comments  whether to include the pmadb-style column comments     *                                as comments in the structure; this is deprecated     *                                but the parameter is left here because export.php     *                                calls PMA_exportStructure() also for other export     *                                types which use this parameter     * @param bool    $do_mime      whether to include mime comments     * @param bool    $dates        whether to include creation/update/check dates     * @param string  $export_mode  'create_table', 'triggers', 'create_view', 'stand_in'     * @param string  $export_type  'server', 'database', 'table'     * @return  bool      Whether it succeeded     *     * @access  public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        if (! PMA_exportOutputHandler('<h2>' . __('Table structure for table') . ' ' . htmlspecialchars($table) . '</h2>')) {            return false;        }        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        if (! PMA_exportOutputHandler('<table class="width100" cellspacing="1">')) {            return false;        }        $columns_cnt = 4;        if ($do_relation && $have_rel) {            $columns_cnt++;        }        if ($do_comments && $cfgRelation['commwork']) {            $columns_cnt++;        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;        }        $schema_insert = '<tr class="print-category">';        $schema_insert .= '<th class="print">' . __('Column') . '</th>';        $schema_insert .= '<td class="print"><b>' . __('Type') . '</b></td>';        $schema_insert .= '<td class="print"><b>' . __('Null') . '</b></td>';        $schema_insert .= '<td class="print"><b>' . __('Default') . '</b></td>';        if ($do_relation && $have_rel) {            $schema_insert .= '<td class="print"><b>' . __('Links to') . '</b></td>';        }        if ($do_comments) {            $schema_insert .= '<td class="print"><b>' . __('Comments') . '</b></td>';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $schema_insert .= '<td class="print"><b>' . htmlspecialchars('MIME') . '</b></td>';            $mime_map = PMA_getMIME($db, $table, true);        }        $schema_insert .= '</tr>';        if (! PMA_exportOutputHandler($schema_insert)) {            return false;        }        $columns = PMA_DBI_get_columns($db, $table);        foreach ($columns as $column) {            $schema_insert = '<tr class="print-category">';            $extracted_fieldspec = PMA_extractFieldSpec($column['Type']);            $type = htmlspecialchars($extracted_fieldspec['print_type']);            if (empty($type)) {                $type     = '&nbsp;';            }            if (! isset($column['Default'])) {                if ($column['Null'] != 'NO') {                    $column['Default'] = 'NULL';                }            }            $fmt_pre = '';            $fmt_post = '';            if (in_array($column['Field'], $unique_keys)) {                $fmt_pre = '<b>' . $fmt_pre;                $fmt_post = $fmt_post . '</b>';            }            if ($column['Key'] == 'PRI') {                $fmt_pre = '<i>' . $fmt_pre;                $fmt_post = $fmt_post . '</i>';            }            $schema_insert .= '<td class="print">' . $fmt_pre . htmlspecialchars($column['Field']) . $fmt_post . '</td>';            $schema_insert .= '<td class="print">' . htmlspecialchars($type) . '</td>';            $schema_insert .= '<td class="print">' . (($column['Null'] == '' || $column['Null'] == 'NO') ? __('No') : __('Yes')) . '</td>';            $schema_insert .= '<td class="print">' . htmlspecialchars(isset($column['Default']) ? $column['Default'] : '') . '</td>';            $field_name = $column['Field'];            if ($do_relation && $have_rel) {                $schema_insert .= '<td class="print">' . (isset($res_rel[$field_name]) ? htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' (' . $res_rel[$field_name]['foreign_field'] . ')') : '') . '</td>';            }            if ($do_comments && $cfgRelation['commwork']) {                $schema_insert .= '<td class="print">' . (isset($comments[$field_name]) ? htmlspecialchars($comments[$field_name]) : '') . '</td>';            }            if ($do_mime && $cfgRelation['mimework']) {                $schema_insert .= '<td class="print">' . (isset($mime_map[$field_name]) ? htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype'])) : '') . '</td>';            }            $schema_insert .= '</tr>';            if (! PMA_exportOutputHandler($schema_insert)) {                return false;            }        } // end while        return PMA_exportOutputHandler('</table>');    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple script to set correct charset for the license * * Note: please do not fold this script into a general script * that would read any file using a GET parameter, it would open a hole * * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require './libraries/common.inc.php';/** * */header('Content-type: text/plain; charset=utf-8');$filename = LICENSE_FILE;// Check if the file is available, some distributions remove these.if (is_readable($filename)) {    readfile($filename);} else {    printf(__('The %s file is not available on this system, please visit www.phpmyadmin.net for more information.'), $filename);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Core script for import, this is just the glue around all other stuff * * @package PhpMyAdmin *//** * Get the variables sent or posted to this script and a core script */require_once './libraries/common.inc.php';//require_once './libraries/display_import_functions.lib.php';// reset import messages for ajax request$_SESSION['Import_message']['message'] = null;$_SESSION['Import_message']['go_back_url'] = null;// default values$GLOBALS['reload'] = false;// Are we just executing plain query or sql file? (eg. non import, but query box/window run)if (!empty($sql_query)) {    // run SQL query    $import_text = $sql_query;    $import_type = 'query';    $format = 'sql';    // refresh left frame on changes in table or db structure    if (preg_match('/^(CREATE|ALTER|DROP)\s+(VIEW|TABLE|DATABASE|SCHEMA)\s+/i', $sql_query)) {        $GLOBALS['reload'] = true;    }    $sql_query = '';} elseif (!empty($sql_localfile)) {    // run SQL file on server    $local_import_file = $sql_localfile;    $import_type = 'queryfile';    $format = 'sql';    unset($sql_localfile);} elseif (!empty($sql_file)) {    // run uploaded SQL file    $import_file = $sql_file;    $import_type = 'queryfile';    $format = 'sql';    unset($sql_file);} elseif (!empty($id_bookmark)) {    // run bookmark    $import_type = 'query';    $format = 'sql';}// If we didn't get any parameters, either user called this directly, or// upload limit has been reached, let's assume the second possibility.;if ($_POST == array() && $_GET == array()) {    include_once './libraries/header.inc.php';    $message = PMA_Message::error(__('You probably tried to upload too large file. Please refer to %sdocumentation%s for ways to workaround this limit.'));    $message->addParam('[a@./Documentation.html#faq1_16@_blank]');    $message->addParam('[/a]');    // so we can obtain the message    $_SESSION['Import_message']['message'] = $message->getDisplay();    $_SESSION['Import_message']['go_back_url'] = $goto;    $message->display();    include './libraries/footer.inc.php';}// Check needed parametersPMA_checkParameters(array('import_type', 'format'));// We don't want anything special in format$format = PMA_securePath($format);// Import functionsrequire_once './libraries/import.lib.php';// Create error and goto urlif ($import_type == 'table') {    $err_url = 'tbl_import.php?' . PMA_generate_common_url($db, $table);    $_SESSION['Import_message']['go_back_url'] = $err_url;    $goto = 'tbl_import.php';} elseif ($import_type == 'database') {    $err_url = 'db_import.php?' . PMA_generate_common_url($db);    $_SESSION['Import_message']['go_back_url'] = $err_url;    $goto = 'db_import.php';} elseif ($import_type == 'server') {    $err_url = 'server_import.php?' . PMA_generate_common_url();    $_SESSION['Import_message']['go_back_url'] = $err_url;    $goto = 'server_import.php';} else {    if (empty($goto) || !preg_match('@^(server|db|tbl)(_[a-z]*)*\.php$@i', $goto)) {        if (strlen($table) && strlen($db)) {            $goto = 'tbl_structure.php';        } elseif (strlen($db)) {            $goto = 'db_structure.php';        } else {            $goto = 'server_sql.php';        }    }    if (strlen($table) && strlen($db)) {        $common = PMA_generate_common_url($db, $table);    } elseif (strlen($db)) {        $common = PMA_generate_common_url($db);    } else {        $common = PMA_generate_common_url();    }    $err_url  = $goto              . '?' . $common              . (preg_match('@^tbl_[a-z]*\.php$@', $goto) ? '&amp;table=' . htmlspecialchars($table) : '');    $_SESSION['Import_message']['go_back_url'] = $err_url;}if (strlen($db)) {    PMA_DBI_select_db($db);}@set_time_limit($cfg['ExecTimeLimit']);if (!empty($cfg['MemoryLimit'])) {    @ini_set('memory_limit', $cfg['MemoryLimit']);}$timestamp = time();if (isset($allow_interrupt)) {    $maximum_time = ini_get('max_execution_time');} else {    $maximum_time = 0;}// set default values$timeout_passed = false;$error = false;$read_multiply = 1;$finished = false;$offset = 0;$max_sql_len = 0;$file_to_unlink = '';$sql_query = '';$sql_query_disabled = false;$go_sql = false;$executed_queries = 0;$run_query = true;$charset_conversion = false;$reset_charset = false;$bookmark_created = false;// Bookmark Support: get a query back from bookmark if requiredif (!empty($id_bookmark)) {    $id_bookmark = (int)$id_bookmark;    include_once './libraries/bookmark.lib.php';    switch ($action_bookmark) {        case 0: // bookmarked query that have to be run            $import_text = PMA_Bookmark_get($db, $id_bookmark, 'id', isset($action_bookmark_all));            if (isset($bookmark_variable) && !empty($bookmark_variable)) {                $import_text = preg_replace('|/\*(.*)\[VARIABLE\](.*)\*/|imsU', '${1}' . PMA_sqlAddSlashes($bookmark_variable) . '${2}', $import_text);            }            // refresh left frame on changes in table or db structure            if (preg_match('/^(CREATE|ALTER|DROP)\s+(VIEW|TABLE|DATABASE|SCHEMA)\s+/i', $import_text)) {                $GLOBALS['reload'] = true;            }            break;        case 1: // bookmarked query that have to be displayed            $import_text = PMA_Bookmark_get($db, $id_bookmark);            if ($GLOBALS['is_ajax_request'] == true) {                $extra_data['sql_query'] = $import_text;                $extra_data['action_bookmark'] = $action_bookmark;                $message = PMA_Message::success(__('Showing bookmark'));                PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);            } else {                $run_query = false;            }            break;        case 2: // bookmarked query that have to be deleted            $import_text = PMA_Bookmark_get($db, $id_bookmark);            PMA_Bookmark_delete($db, $id_bookmark);            if ($GLOBALS['is_ajax_request'] == true) {                $message = PMA_Message::success(__('The bookmark has been deleted.'));                $extra_data['action_bookmark'] = $action_bookmark;                $extra_data['id_bookmark'] = $id_bookmark;                PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);            } else {                $run_query = false;                $error = true; // this is kind of hack to skip processing the query            }            break;    }} // end bookmarks reading// Do no run query if we show PHP codeif (isset($GLOBALS['show_as_php'])) {    $run_query = false;    $go_sql = true;}// Store the query as a bookmark before executing it if bookmarklabel was givenif (!empty($bkm_label) && !empty($import_text)) {    include_once './libraries/bookmark.lib.php';    $bfields = array(                 'dbase' => $db,                 'user'  => $cfg['Bookmark']['user'],                 'query' => urlencode($import_text),                 'label' => $bkm_label    );    // Should we replace bookmark?    if (isset($bkm_replace)) {        $bookmarks = PMA_Bookmark_getList($db);        foreach ($bookmarks as $key => $val) {            if ($val == $bkm_label) {                PMA_Bookmark_delete($db, $key);            }        }    }    PMA_Bookmark_save($bfields, isset($bkm_all_users));    $bookmark_created = true;} // end store bookmarks// We can not read all at once, otherwise we can run out of memory$memory_limit = trim(@ini_get('memory_limit'));// 2 MB as defaultif (empty($memory_limit)) {    $memory_limit = 2 * 1024 * 1024;}// In case no memory limit we work on 10MB chunksif ($memory_limit == -1) {    $memory_limit = 10 * 1024 * 1024;}// Calculate value of the limitif (strtolower(substr($memory_limit, -1)) == 'm') {    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024;} elseif (strtolower(substr($memory_limit, -1)) == 'k') {    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024;} elseif (strtolower(substr($memory_limit, -1)) == 'g') {    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024 * 1024;} else {    $memory_limit = (int)$memory_limit;}$read_limit = $memory_limit / 8; // Just to be sure, there might be lot of memory needed for uncompression// handle filenamesif (!empty($local_import_file) && !empty($cfg['UploadDir'])) {    // sanitize $local_import_file as it comes from a POST    $local_import_file = PMA_securePath($local_import_file);    $import_file  = PMA_userDir($cfg['UploadDir']) . $local_import_file;} elseif (empty($import_file) || !is_uploaded_file($import_file)) {    $import_file  = 'none';}// Do we have file to import?if ($import_file != 'none' && !$error) {    // work around open_basedir and other limitations    $open_basedir = @ini_get('open_basedir');    // If we are on a server with open_basedir, we must move the file    // before opening it. The doc explains how to create the "./tmp"    // directory    if (!empty($open_basedir)) {        $tmp_subdir = (PMA_IS_WINDOWS ? '.\\tmp\\' : './tmp/');        if (is_writable($tmp_subdir)) {            $import_file_new = $tmp_subdir . basename($import_file) . uniqid();            if (move_uploaded_file($import_file, $import_file_new)) {                $import_file = $import_file_new;                $file_to_unlink = $import_file_new;            }            $size = filesize($import_file);        }    }    /**     *  Handle file compression     *  @todo duplicate code exists in File.class.php     */    $compression = PMA_detectCompression($import_file);    if ($compression === false) {        $message = PMA_Message::error(__('File could not be read'));        $error = true;    } else {        switch ($compression) {            case 'application/bzip2':                if ($cfg['BZipDump'] && @function_exists('bzopen')) {                    $import_handle = @bzopen($import_file, 'r');                } else {                    $message = PMA_Message::error(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'));                    $message->addParam($compression);                    $error = true;                }                break;            case 'application/gzip':                if ($cfg['GZipDump'] && @function_exists('gzopen')) {                    $import_handle = @gzopen($import_file, 'r');                } else {                    $message = PMA_Message::error(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'));                    $message->addParam($compression);                    $error = true;                }                break;            case 'application/zip':                if ($cfg['ZipDump'] && @function_exists('zip_open')) {                    /**                     * Load interface for zip extension.                     */                    include_once './libraries/zip_extension.lib.php';                    $result = PMA_getZipContents($import_file);                    if (! empty($result['error'])) {                        $message = PMA_Message::rawError($result['error']);                        $error = true;                    } else {                        $import_text = $result['data'];                    }                } else {                    $message = PMA_Message::error(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'));                    $message->addParam($compression);                    $error = true;                }                break;            case 'none':                $import_handle = @fopen($import_file, 'r');                break;            default:                $message = PMA_Message::error(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'));                $message->addParam($compression);                $error = true;                break;        }    }    // use isset() because zip compression type does not use a handle    if (!$error && isset($import_handle) && $import_handle === false) {        $message = PMA_Message::error(__('File could not be read'));        $error = true;    }} elseif (!$error) {    if (! isset($import_text) || empty($import_text)) {        $message = PMA_Message::error(__('No data was received to import. Either no file name was submitted, or the file size exceeded the maximum size permitted by your PHP configuration. See [a@./Documentation.html#faq1_16@Documentation]FAQ 1.16[/a].'));        $error = true;    }}// so we can obtain the message//$_SESSION['Import_message'] = $message->getDisplay();// Convert the file's charset if necessaryif ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE && isset($charset_of_file)) {    if ($charset_of_file != 'utf-8') {        $charset_conversion = true;    }} elseif (isset($charset_of_file) && $charset_of_file != 'utf8') {    if (PMA_DRIZZLE) {        // Drizzle doesn't support other character sets, so we can't fallback to SET NAMES - throw an error        $error = true;        $message = PMA_Message::error(__('Cannot convert file\'s character set without character set conversion library'));    } else {        PMA_DBI_query('SET NAMES \'' . $charset_of_file . '\'');        // We can not show query in this case, it is in different charset        $sql_query_disabled = true;        $reset_charset = true;    }}// Something to skip?if (!$error && isset($skip)) {    $original_skip = $skip;    while ($skip > 0) {        PMA_importGetNextChunk($skip < $read_limit ? $skip : $read_limit);        $read_multiply = 1; // Disable read progresivity, otherwise we eat all memory!        $skip -= $read_limit;    }    unset($skip);}if (!$error) {    // Check for file existance    if (!file_exists('./libraries/import/' . $format . '.php')) {        $error = true;        $message = PMA_Message::error(__('Could not load import plugins, please check your installation!'));    } else {        // Do the real import        $plugin_param = $import_type;        include './libraries/import/' . $format . '.php';    }}if (! $error && false !== $import_handle && null !== $import_handle) {    fclose($import_handle);}// Cleanup temporary fileif ($file_to_unlink != '') {    unlink($file_to_unlink);}// Reset charset back, if we did some changesif ($reset_charset) {    PMA_DBI_query('SET CHARACTER SET utf8');    PMA_DBI_query('SET SESSION collation_connection =\'' . $collation_connection . '\'');}// Show correct messageif (!empty($id_bookmark) && $action_bookmark == 2) {    $message = PMA_Message::success(__('The bookmark has been deleted.'));    $display_query = $import_text;    $error = false; // unset error marker, it was used just to skip processing} elseif (!empty($id_bookmark) && $action_bookmark == 1) {    $message = PMA_Message::notice(__('Showing bookmark'));} elseif ($bookmark_created) {    $special_message = '[br]' . sprintf(__('Bookmark %s created'), htmlspecialchars($bkm_label));} elseif ($finished && !$error) {    if ($import_type == 'query') {        $message = PMA_Message::success();    } else {        if ($import_notice) {            $message = PMA_Message::success('<em>'.__('Import has been successfully finished, %d queries executed.').'</em>');            $message->addParam($executed_queries);            $message->addString($import_notice);            $message->addString('(' . $_FILES['import_file']['name'] . ')');        } else {            $message = PMA_Message::success(__('Import has been successfully finished, %d queries executed.'));            $message->addParam($executed_queries);            $message->addString('(' . $_FILES['import_file']['name'] . ')');        }    }}// Did we hit timeout? Tell it user.if ($timeout_passed) {    $message = PMA_Message::error(__('Script timeout passed, if you want to finish import, please resubmit same file and import will resume.'));    if ($offset == 0 || (isset($original_skip) && $original_skip == $offset)) {        $message->addString(__('However on last run no data has been parsed, this usually means phpMyAdmin won\'t be able to finish this import unless you increase php time limits.'));    }}// if there is any message, copy it into $_SESSION as well, so we can obtain it by AJAX callif (isset($message)) {    $_SESSION['Import_message']['message'] = $message->getDisplay();//  $_SESSION['Import_message']['go_back_url'] = $goto.'?'.  PMA_generate_common_url();}// Parse and analyze the query, for correct db and table name// in case of a query typed in the query window// (but if the query is too large, in case of an imported file, the parser//  can choke on it so avoid parsing)if (strlen($sql_query) <= $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {    include_once './libraries/parse_analyze.lib.php';}// There was an error?if (isset($my_die)) {    foreach ($my_die AS $key => $die) {        PMA_mysqlDie($die['error'], $die['sql'], '', $err_url, $error);    }}// we want to see the results of the last query that returned at least a rowif (! empty($last_query_with_results)) {    // but we want to show intermediate results too    $disp_query = $sql_query;    $disp_message = __('Your SQL query has been executed successfully');    $sql_query = $last_query_with_results;    $go_sql = true;}if ($go_sql) {    include './sql.php';} else {    $active_page = $goto;    include './' . $goto;}exit();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays the pma logo, links and db and server selection in left frame * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (empty($query_url)) {    // avoid putting here $db because it could display a db name    // to which the next user does not have access    $query_url = PMA_generate_common_url();}// display Logo, depending on $GLOBALS['cfg']['LeftDisplayLogo']if ($GLOBALS['cfg']['LeftDisplayLogo']) {    $logo = 'phpMyAdmin';    if (@file_exists($GLOBALS['pmaThemeImage'] . 'logo_left.png')) {        $logo = '<img src="' . $GLOBALS['pmaThemeImage'] . 'logo_left.png" '            .'alt="' . $logo . '" id="imgpmalogo" />';    } elseif (@file_exists($GLOBALS['pmaThemeImage'] . 'pma_logo2.png')) {        $logo = '<img src="' . $GLOBALS['pmaThemeImage'] . 'pma_logo2.png" '            .'alt="' . $logo . '" id="imgpmalogo" />';    }    echo '<div id="pmalogo">' . "\n";    if ($GLOBALS['cfg']['LeftLogoLink']) {        echo '<a href="' . htmlspecialchars($GLOBALS['cfg']['LeftLogoLink']);        switch ($GLOBALS['cfg']['LeftLogoLinkWindow']) {            case 'new':                echo '" target="_blank"';                break;            case 'main':                // do not add our parameters for an external link                if (substr(strtolower($GLOBALS['cfg']['LeftLogoLink']), 0, 4) !== '://') {                    echo '?' . $query_url . '" target="frame_content"';                } else {                    echo '" target="_blank"';                }        }        echo '>' . $logo . '</a>' . "\n";    } else {        echo $logo . "\n";    }    echo '</div>' . "\n";} // end of display logo?><div id="leftframelinks"><?php    echo '<a href="main.php?' . $query_url . '"'        .' title="' . __('Home') . '">'        .($GLOBALS['cfg']['MainPageIconic']            ? PMA_getImage('b_home.png', __('Home'))            : __('Home'))        .'</a>' . "\n";    // if we have chosen server    if ($server != 0) {        // Logout for advanced authentication        if ($GLOBALS['cfg']['Server']['auth_type'] != 'config') {            echo ($GLOBALS['cfg']['MainPageIconic'] ? '' : ' - ');            echo '<a href="index.php?' . $query_url . '&amp;old_usr='                .urlencode($PHP_AUTH_USER) . '" target="_parent"'                .' title="' . __('Log out') . '" >'                .($GLOBALS['cfg']['MainPageIconic']                    ? PMA_getImage('s_loggoff.png', __('Log out'))                    : __('Log out'))                .'</a>' . "\n";        } // end if ($GLOBALS['cfg']['Server']['auth_type'] != 'config'        $anchor = 'querywindow.php?' . PMA_generate_common_url($db, $table);        if ($GLOBALS['cfg']['MainPageIconic']) {            $query_frame_link_text = PMA_getImage('b_selboard.png', __('Query window'));        } else {            echo '<br />' . "\n";            $query_frame_link_text = __('Query window');        }        echo '<a href="' . $anchor . '&amp;no_js=true"'            .' title="' . __('Query window') . '"';        echo ' onclick="if (window.parent.open_querywindow()) return false;"';        echo '>' . $query_frame_link_text . '</a>' . "\n";    } // end if ($server != 0)    echo '    <a href="Documentation.html" target="documentation"'        .' title="' . __('phpMyAdmin documentation') . '" >';    if ($GLOBALS['cfg']['MainPageIconic']) {        echo PMA_getImage('b_docs.png', __('phpMyAdmin documentation'));    } else {        echo '<br />' . __('phpMyAdmin documentation');    }    echo '</a>';    $documentation_link = PMA_showMySQLDocu('', '', true);    if ($GLOBALS['cfg']['MainPageIconic']) {        echo $documentation_link . "\n";    } else {        preg_match('/<a[^>]*>/', $documentation_link, $matches);        $link = $matches[0];        echo substr($link, 0, strlen($link) - 1) . ' title="' . __('Documentation') . '" >'            . '<br />' . __('Documentation') . '</a>';    }    $params = array('uniqid' => uniqid());    if (!empty($GLOBALS['db'])) {        $params['db'] = $GLOBALS['db'];    }    echo '<a href="navigation.php?' . PMA_generate_common_url($params)        . '" title="' . __('Reload navigation frame') . '" target="frame_navigation">';    if ($GLOBALS['cfg']['MainPageIconic']) {        echo PMA_getImage('s_reload', __('Reload navigation frame'));    } else {        echo '<br />' . __('Reload navigation frame');    }    echo '</a>';echo '</div>' . "\n";/** * Displays the MySQL servers choice form */if ($GLOBALS['cfg']['LeftDisplayServers'] && (count($GLOBALS['cfg']['Servers']) > 1 || $server == 0 && count($GLOBALS['cfg']['Servers']) == 1)) {    echo '<div id="serverinfo">';    include './libraries/select_server.lib.php';    PMA_select_server(true, true);    echo '</div><br />';} // end if LeftDisplayServers?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build LaTeX dumps of tables * * @package PhpMyAdmin-Export * @subpackage Latex */if (! defined('PHPMYADMIN')) {    exit;}/* Messages used in default captions */$GLOBALS['strLatexContent'] = __('Content of table @TABLE@');$GLOBALS['strLatexContinued'] = __('(continued)');$GLOBALS['strLatexStructure'] = __('Structure of table @TABLE@');/** * */if (isset($plugin_list)) {    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && ! $plugin_param['single_table']) {        $hide_structure = true;    }    $plugin_list['latex'] = array(        'text' => __('LaTeX'),        'extension' => 'tex',        'mime_type' => 'application/x-tex',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'caption', 'text' => __('Include table caption')),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );    /* what to dump (structure/data/both) */    $plugin_list['latex']['options'][]        = array('type' => 'begin_group', 'name' => 'dump_what', 'text' => __('Dump table'));    $plugin_list['latex']['options'][]        = array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data')));    $plugin_list['latex']['options'][] = array('type' => 'end_group');    /* Structure options */    if (! $hide_structure) {        $plugin_list['latex']['options'][]            = array('type' => 'begin_group', 'name' => 'structure', 'text' => __('Object creation options'), 'force' => 'data');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_caption', 'text' => __('Table caption'), 'doc' => 'faq6_27');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_continued_caption', 'text' => __('Table caption (continued)'), 'doc' => 'faq6_27');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_label', 'text' => __('Label key'), 'doc' => 'faq6_27');        if (! empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['latex']['options'][]                = array('type' => 'bool', 'name' => 'relation', 'text' => __('Display foreign key relationships'));        }        $plugin_list['latex']['options'][]            = array('type' => 'bool', 'name' => 'comments', 'text' => __('Display comments'));        if (! empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['latex']['options'][]                = array('type' => 'bool', 'name' => 'mime', 'text' => __('Display MIME types'));        }        $plugin_list['latex']['options'][]            = array('type' => 'end_group');    }    /* Data */    $plugin_list['latex']['options'][]        = array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure');    $plugin_list['latex']['options'][]        = array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row'));    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_caption', 'text' => __('Table caption'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_continued_caption', 'text' => __('Table caption (continued)'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_label', 'text' => __('Label key'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:'));    $plugin_list['latex']['options'][]        = array('type' => 'end_group');} else {    /**     * Escapes some special characters for use in TeX/LaTeX     *     * @param string $string the string to convert     *     * @return  string      the converted string with escape codes     *     * @access  private     */    function PMA_texEscape($string)    {        $escape = array('$', '%', '{', '}',  '&',  '#', '_', '^');        $cnt_escape = count($escape);        for ($k=0; $k < $cnt_escape; $k++) {            $string = str_replace($escape[$k], '\\' . $escape[$k], $string);        }        return $string;    }    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportHeader()    {        global $crlf;        global $cfg;        $head  =  '% phpMyAdmin LaTeX Dump' . $crlf               .  '% version ' . PMA_VERSION . $crlf               .  '% http://www.phpmyadmin.net' . $crlf               .  '%' . $crlf               .  '% ' . __('Host') . ': ' . $cfg['Server']['host'];        if (! empty($cfg['Server']['port'])) {             $head .= ':' . $cfg['Server']['port'];        }        $head .= $crlf               .  '% ' . __('Generation Time') . ': ' . PMA_localisedDate() . $crlf               .  '% ' . __('Server version') . ': ' . PMA_MYSQL_STR_VERSION . $crlf               .  '% ' . __('PHP Version') . ': ' . phpversion() . $crlf;        return PMA_exportOutputHandler($head);    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        global $crlf;        $head = '% ' . $crlf              . '% ' . __('Database') . ': ' . '\'' . $db . '\'' . $crlf              . '% ' . $crlf;        return PMA_exportOutputHandler($head);    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in LaTeX table/sideways table environment     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = PMA_DBI_field_name($result, $i);        }        unset($i);        $buffer      = $crlf . '%' . $crlf . '% ' . __('Data') . ': ' . $table            . $crlf . '%' . $crlf . ' \\begin{longtable}{|';        for ($index = 0; $index < $columns_cnt; $index++) {            $buffer .= 'l|';        }        $buffer .= '} ' . $crlf ;        $buffer .= ' \\hline \\endhead \\hline \\endfoot \\hline ' . $crlf;        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_data_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\label{'                . PMA_expandUserString(                    $GLOBALS['latex_data_label'],                    null,                    array('table' => $table, 'database' => $db)                )                . '} \\\\';        }        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        // show column names        if (isset($GLOBALS['latex_columns'])) {            $buffer = '\\hline ';            for ($i = 0; $i < $columns_cnt; $i++) {                $buffer .= '\\multicolumn{1}{|c|}{\\textbf{'                    . PMA_texEscape(stripslashes($columns[$i])) . '}} & ';            }            $buffer = substr($buffer, 0, -2) . '\\\\ \\hline \hline ';            if (! PMA_exportOutputHandler($buffer . ' \\endfirsthead ' . $crlf)) {                return false;            }            if (isset($GLOBALS['latex_caption'])) {                if (! PMA_exportOutputHandler(                    '\\caption{'                    . PMA_expandUserString(                        $GLOBALS['latex_data_continued_caption'],                        'PMA_texEscape',                        array('table' => $table, 'database' => $db)                    )                    . '} \\\\ '                )) {                    return false;                }            }            if (! PMA_exportOutputHandler($buffer . '\\endhead \\endfoot' . $crlf)) {                return false;            }        } else {            if (! PMA_exportOutputHandler('\\\\ \hline')) {                return false;            }        }        // print the whole table        while ($record = PMA_DBI_fetch_assoc($result)) {            $buffer = '';            // print each row            for ($i = 0; $i < $columns_cnt; $i++) {                if (isset($record[$columns[$i]])                    && (! function_exists('is_null') || ! is_null($record[$columns[$i]]))                ) {                    $column_value = PMA_texEscape(stripslashes($record[$columns[$i]]));                } else {                    $column_value = $GLOBALS['latex_null'];                }                // last column ... no need for & character                if ($i == ($columns_cnt - 1)) {                    $buffer .= $column_value;                } else {                    $buffer .= $column_value . " & ";                }            }            $buffer .= ' \\\\ \\hline ' . $crlf;            if (! PMA_exportOutputHandler($buffer)) {                return false;            }        }        $buffer = ' \\end{longtable}' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        PMA_DBI_free_result($result);        return true;    } // end getTableLaTeX    /**     * Outputs table's structure     *     * @param string $db          database name     * @param string $table       table name     * @param string $crlf        the end of line sequence     * @param string $error_url   the url to go back in case of error     * @param bool   $do_relation whether to include relation comments     * @param bool   $do_comments whether to include the pmadb-style column comments     *                            as comments in the structure; this is deprecated     *                            but the parameter is left here because export.php     *                            calls PMA_exportStructure() also for other export     *                            types which use this parameter     * @param bool   $do_mime     whether to include mime comments     * @param bool   $dates       whether to include creation/update/check dates     * @param string $export_mode 'create_table', 'triggers', 'create_view', 'stand_in'     * @param string $export_type 'server', 'database', 'table'     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $buffer      = $crlf . '%' . $crlf . '% ' . __('Structure') . ': ' . $table            . $crlf . '%' . $crlf . ' \\begin{longtable}{';        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        $columns_cnt = 4;        $alignment = '|l|c|c|c|';        if ($do_relation && $have_rel) {            $columns_cnt++;            $alignment .= 'l|';        }        if ($do_comments) {            $columns_cnt++;            $alignment .= 'l|';        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;            $alignment .='l|';        }        $buffer = $alignment . '} ' . $crlf ;        $header = ' \\hline ';        $header .= '\\multicolumn{1}{|c|}{\\textbf{' . __('Column')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Type')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Null')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Default') . '}}';        if ($do_relation && $have_rel) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{' . __('Links to') . '}}';        }        if ($do_comments) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{' . __('Comments') . '}}';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{MIME}}';            $mime_map = PMA_getMIME($db, $table, true);        }        // Table caption for first page and label        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\label{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_label'],                    null,                    array('table' => $table, 'database' => $db)                )                . '} \\\\' . $crlf;        }        $buffer .= $header . ' \\\\ \\hline \\hline' . $crlf . '\\endfirsthead' . $crlf;        // Table caption on next pages        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_continued_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\\\ ' . $crlf;        }        $buffer .= $header . ' \\\\ \\hline \\hline \\endhead \\endfoot ' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        $fields = PMA_DBI_get_columns($db, $table);        foreach ($fields as $row) {            $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);            $type = $extracted_fieldspec['print_type'];            if (empty($type)) {                $type     = ' ';            }            if (! isset($row['Default'])) {                if ($row['Null'] != 'NO') {                    $row['Default'] = 'NULL';                }            }            $field_name = $row['Field'];            $local_buffer = $field_name . "\000" . $type . "\000"                . (($row['Null'] == '' || $row['Null'] == 'NO') ? __('No') : __('Yes'))                . "\000" . (isset($row['Default']) ? $row['Default'] : '');            if ($do_relation && $have_rel) {                $local_buffer .= "\000";                if (isset($res_rel[$field_name])) {                    $local_buffer .= $res_rel[$field_name]['foreign_table'] . ' ('                        . $res_rel[$field_name]['foreign_field'] . ')';                }            }            if ($do_comments && $cfgRelation['commwork']) {                $local_buffer .= "\000";                if (isset($comments[$field_name])) {                    $local_buffer .= $comments[$field_name];                }            }            if ($do_mime && $cfgRelation['mimework']) {                $local_buffer .= "\000";                if (isset($mime_map[$field_name])) {                    $local_buffer .= str_replace('_', '/', $mime_map[$field_name]['mimetype']);                }            }            $local_buffer = PMA_texEscape($local_buffer);            if ($row['Key']=='PRI') {                $pos=strpos($local_buffer, "\000");                $local_buffer = '\\textit{' . substr($local_buffer, 0, $pos) . '}' . substr($local_buffer, $pos);            }            if (in_array($field_name, $unique_keys)) {                $pos=strpos($local_buffer, "\000");                $local_buffer = '\\textbf{' . substr($local_buffer, 0, $pos) . '}' . substr($local_buffer, $pos);            }            $buffer = str_replace("\000", ' & ', $local_buffer);            $buffer .= ' \\\\ \\hline ' . $crlf;            if (! PMA_exportOutputHandler($buffer)) {                return false;            }        } // end while        $buffer = ' \\end{longtable}' . $crlf;        return PMA_exportOutputHandler($buffer);    } // end of the 'PMA_exportStructure' function} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This is in a separate script because it's called from a number of scripts * * @package PhpMyAdmin *//** * Checks whether given link is valid * * @param string $url URL to check * @return boolean True if string can be used as link */function PMA_checkLink($url){    $valid_starts = array(        'http://',        'https://',        './url.php?url=http%3A%2F%2F',        './url.php?url=https%3A%2F%2F',    );    if (defined('PMA_SETUP')) {        $valid_starts[] = '../Documentation.html';        $valid_starts[] = '?page=form&';    } else {        $valid_starts[] = './Documentation.html';    }    foreach ($valid_starts as $val) {        if (substr($url, 0, strlen($val)) == $val) {            return true;        }    }    return false;}/** * Callback function for replacing [a@link@target] links in bb code. * * @param array $found Array of preg matches * @return string Replaced string */function PMA_replaceBBLink($found){    /* Check for valid link */    if (! PMA_checkLink($found[1])) {        return $found[0];    }    /* a-z and _ allowed in target */    if (! empty($found[3]) && preg_match('/[^a-z_]+/i', $found[3])) {        return $found[0];    }    /* Construct target */    $target = '';    if (! empty($found[3])) {        $target = ' target="' . $found[3] . '"';    }    /* Construct url */    if (substr($found[1], 0, 4) == 'http') {        $url = PMA_linkURL($found[1]);    } else {        $url = $found[1];    }    return '<a href="' . $url . '"' . $target . '>';}/** * Sanitizes $message, taking into account our special codes * for formatting. * * If you want to include result in element attribute, you should escape it. * * Examples: * * <p><?php echo PMA_sanitize($foo); ?></p> * * <a title="<?php echo PMA_sanitize($foo, true); ?>">bar</a> * * @param string  $message the message * @param boolean $escape  whether to escape html in result * @param boolean $safe    whether string is safe (can keep < and > chars) * @return  string   the sanitized message */function PMA_sanitize($message, $escape = false, $safe = false){    if (!$safe) {        $message = strtr($message, array('<' => '&lt;', '>' => '&gt;'));    }    /* Interpret bb code */    $replace_pairs = array(        '[i]'       => '<em>',      // deprecated by em        '[/i]'      => '</em>',     // deprecated by em        '[em]'      => '<em>',        '[/em]'     => '</em>',        '[b]'       => '<strong>',  // deprecated by strong        '[/b]'      => '</strong>', // deprecated by strong        '[strong]'  => '<strong>',        '[/strong]' => '</strong>',        '[tt]'      => '<code>',    // deprecated by CODE or KBD        '[/tt]'     => '</code>',   // deprecated by CODE or KBD        '[code]'    => '<code>',        '[/code]'   => '</code>',        '[kbd]'     => '<kbd>',        '[/kbd]'    => '</kbd>',        '[br]'      => '<br />',        '[/a]'      => '</a>',        '[sup]'      => '<sup>',        '[/sup]'      => '</sup>',    );    /* Adjust links for setup, which lives in subfolder */    if (defined('PMA_SETUP')) {        $replace_pairs['[a@Documentation.html'] = '[a@../Documentation.html';    } else {        $replace_pairs['[a@Documentation.html'] = '[a@./Documentation.html';    }    $message = strtr($message, $replace_pairs);    /* Match links in bb code ([a@url@target], where @target is options) */    $pattern = '/\[a@([^]"@]*)(@([^]"]*))?\]/';    /* Find and replace all links */    $message = preg_replace_callback($pattern, 'PMA_replaceBBLink', $message);    /* Possibly escape result */    if ($escape) {        $message = htmlspecialchars($message);    }    return $message;}/** * Sanitize a filename by removing anything besides A-Za-z0-9_.- * * Intended usecase: *    When using a filename in a Content-Disposition header the value should not contain ; or " * * @param   string  The filename * * @return  string  the sanitized filename * */function PMA_sanitize_filename($filename) {    $filename = preg_replace('/[^A-Za-z0-9_.-]/', '_', $filename);    return $filename;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * dumps a database * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'export.js';// $sub_part is also used in db_info.inc.php to see if we are coming from// db_export.php, in which case we don't obey $cfg['MaxTableList']$sub_part  = '_export';require_once './libraries/db_common.inc.php';$url_query .= '&amp;goto=db_export.php';require_once './libraries/db_info.inc.php';/** * Displays the form */$export_page_title = __('View dump (schema) of database');// exit if no tables in db foundif ($num_tables < 1) {    PMA_Message::error(__('No tables found in database.'))->display();    include './libraries/footer.inc.php';    exit;} // end if$checkall_url = 'db_export.php?'              . PMA_generate_common_url($db)              . '&amp;goto=db_export.php';$multi_values = '<div>';$multi_values .= '<a href="' . $checkall_url . '" onclick="setSelectOptions(\'dump\', \'table_select[]\', true); return false;">' . __('Select All') . '</a>        /        <a href="' . $checkall_url . '&amp;unselectall=1" onclick="setSelectOptions(\'dump\', \'table_select[]\', false); return false;">' . __('Unselect All') . '</a><br />';$multi_values .= '<select name="table_select[]" id="table_select" size="10" multiple="multiple">';$multi_values .= "\n";if (!empty($selected_tbl) && empty($table_select)) {    $table_select = $selected_tbl;}// Check if the selected tables are defined in $_GET (from clicking Back button on export.php)if (isset($_GET['table_select'])) {    $_GET['table_select'] = urldecode($_GET['table_select']);    $_GET['table_select'] = explode(",", $_GET['table_select']);}foreach ($tables as $each_table) {    if (isset($_GET['table_select'])) {        if (in_array($each_table['Name'], $_GET['table_select'])) {            $is_selected = ' selected="selected"';        } else {            $is_selected = '';        }    } elseif (! empty($unselectall)            || (! empty($table_select) && !in_array($each_table['Name'], $table_select))) {        $is_selected = '';    } else {        $is_selected = ' selected="selected"';    }    $table_html   = htmlspecialchars($each_table['Name']);    $multi_values .= '                <option value="' . $table_html . '"'        . $is_selected . '>'        . str_replace(' ', '&nbsp;', $table_html) . '</option>' . "\n";} // end for$multi_values .= "\n";$multi_values .= '</select></div>';$export_type = 'database';require_once './libraries/display_export.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * OpenDocument Spreadsheet import plugin for phpMyAdmin * * @todo    Pretty much everything * @todo    Importing of accented characters seems to fail * @package PhpMyAdmin-Import * @subpackage ODS */if (! defined('PHPMYADMIN')) {    exit;}/** * We need way to disable external XML entities processing. */if (!function_exists('libxml_disable_entity_loader')) {    return;}/** * The possible scopes for $plugin_param are: 'table', 'database', and 'server' */if (isset($plugin_list)) {    $plugin_list['ods'] = array(        'text' => __('Open Document Spreadsheet'),        'extension' => 'ods',        'options' => array(                array('type' => 'begin_group', 'name' => 'general_opts'),                array('type' => 'bool', 'name' => 'col_names', 'text' => __('The first line of the file contains the table column names <i>(if this is unchecked, the first line will become part of the data)</i>')),                array('type' => 'bool', 'name' => 'empty_rows', 'text' => __('Do not import empty rows')),                array('type' => 'bool', 'name' => 'recognize_percentages', 'text' => __('Import percentages as proper decimals <i>(ex. 12.00% to .12)</i>')),                array('type' => 'bool', 'name' => 'recognize_currency', 'text' => __('Import currencies <i>(ex. $5.00 to 5.00)</i>')),                array('type' => 'end_group')            ),        'options_text' => __('Options'),        );    /* We do not define function when plugin is just queried for information above */    return;}$i = 0;$len = 0;$buffer = "";/** * Read in the file via PMA_importGetNextChunk so that * it can process compressed files */while (! ($finished && $i >= $len) && ! $error && ! $timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        /* subtract data we didn't handle yet and stop processing */        $offset -= strlen($buffer);        break;    } elseif ($data === true) {        /* Handle rest of buffer */    } else {        /* Append new data to buffer */        $buffer .= $data;        unset($data);    }}unset($data);/** * Disable loading of external XML entities. */libxml_disable_entity_loader();/** * Load the XML string * * The option LIBXML_COMPACT is specified because it can * result in increased performance without the need to * alter the code in any way. It's basically a freebee. */$xml = simplexml_load_string($buffer, "SimpleXMLElement", LIBXML_COMPACT);unset($buffer);if ($xml === false) {    $sheets = array();    $message = PMA_Message::error(__('The XML file specified was either malformed or incomplete. Please correct the issue and try again.'));    $error = true;} else {    $sheets = $xml->children('office', true)->{'body'}->{'spreadsheet'}->children('table', true);}$tables = array();$max_cols = 0;$row_count = 0;$col_count = 0;$col_names = array();$tempRow = array();$tempRows = array();$rows = array();/* Iterate over tables */foreach ($sheets as $sheet) {    $col_names_in_first_row = isset($_REQUEST['ods_col_names']);    /* Iterate over rows */    foreach ($sheet as $row) {        $type = $row->getName();        if (! strcmp('table-row', $type)) {            /* Iterate over columns */            foreach ($row as $cell) {                $text = $cell->children('text', true);                $cell_attrs = $cell->attributes('office', true);                if (count($text) != 0) {                    $attr = $cell->attributes('table', true);                    $num_repeat = (int) $attr['number-columns-repeated'];                    $num_iterations = $num_repeat ? $num_repeat : 1;                    for ($k = 0; $k < $num_iterations; $k++) {                        if (! $col_names_in_first_row) {                            if ($_REQUEST['ods_recognize_percentages'] && !strcmp('percentage', $cell_attrs['value-type'])) {                                $tempRow[] = (double)$cell_attrs['value'];                            } elseif ($_REQUEST['ods_recognize_currency'] && !strcmp('currency', $cell_attrs['value-type'])) {                                $tempRow[] = (double)$cell_attrs['value'];                            } else {                                $tempRow[] = (string)$text;                            }                        } else {                            if ($_REQUEST['ods_recognize_percentages'] && !strcmp('percentage', $cell_attrs['value-type'])) {                                $col_names[] = (double)$cell_attrs['value'];                            } else if ($_REQUEST['ods_recognize_currency'] && !strcmp('currency', $cell_attrs['value-type'])) {                                $col_names[] = (double)$cell_attrs['value'];                            } else {                                $col_names[] = (string)$text;                            }                        }                        ++$col_count;                    }                } else {                    /* Number of blank columns repeated */                    if ($col_count < count($row->children('table', true)) - 1) {                        $attr = $cell->attributes('table', true);                        $num_null = (int)$attr['number-columns-repeated'];                        if ($num_null) {                            if (! $col_names_in_first_row) {                                for ($i = 0; $i < $num_null; ++$i) {                                    $tempRow[] = 'NULL';                                    ++$col_count;                                }                            } else {                                for ($i = 0; $i < $num_null; ++$i) {                                    $col_names[] = PMA_getColumnAlphaName($col_count + 1);                                    ++$col_count;                                }                            }                        } else {                            if (! $col_names_in_first_row) {                                $tempRow[] = 'NULL';                            } else {                                $col_names[] = PMA_getColumnAlphaName($col_count + 1);                            }                            ++$col_count;                        }                    }                }            }            /* Find the widest row */            if ($col_count > $max_cols) {                $max_cols = $col_count;            }            /* Don't include a row that is full of NULL values */            if (! $col_names_in_first_row) {                if ($_REQUEST['ods_empty_rows']) {                    foreach ($tempRow as $cell) {                        if (strcmp('NULL', $cell)) {                            $tempRows[] = $tempRow;                            break;                        }                    }                } else {                    $tempRows[] = $tempRow;                }            }            $col_count = 0;            $col_names_in_first_row = false;            $tempRow = array();        }    }    /* Skip over empty sheets */    if (count($tempRows) == 0 || count($tempRows[0]) == 0) {        $col_names = array();        $tempRow = array();        $tempRows = array();        continue;    }    /**     * Fill out each row as necessary to make     * every one exactly as wide as the widest     * row. This included column names.     */    /* Fill out column names */    for ($i = count($col_names); $i < $max_cols; ++$i) {        $col_names[] = PMA_getColumnAlphaName($i + 1);    }    /* Fill out all rows */    $num_rows = count($tempRows);    for ($i = 0; $i < $num_rows; ++$i) {        for ($j = count($tempRows[$i]); $j < $max_cols; ++$j) {            $tempRows[$i][] = 'NULL';        }    }    /* Store the table name so we know where to place the row set */    $tbl_attr = $sheet->attributes('table', true);    $tables[] = array((string)$tbl_attr['name']);    /* Store the current sheet in the accumulator */    $rows[] = array((string)$tbl_attr['name'], $col_names, $tempRows);    $tempRows = array();    $col_names = array();    $max_cols = 0;}unset($tempRow);unset($tempRows);unset($col_names);unset($sheets);unset($xml);/** * Bring accumulated rows into the corresponding table */$num_tbls = count($tables);for ($i = 0; $i < $num_tbls; ++$i) {    for ($j = 0; $j < count($rows); ++$j) {        if (! strcmp($tables[$i][TBL_NAME], $rows[$j][TBL_NAME])) {            if (! isset($tables[$i][COL_NAMES])) {                $tables[$i][] = $rows[$j][COL_NAMES];            }            $tables[$i][ROWS] = $rows[$j][ROWS];        }    }}/* No longer needed */unset($rows);/* Obtain the best-fit MySQL types for each column */$analyses = array();$len = count($tables);for ($i = 0; $i < $len; ++$i) {    $analyses[] = PMA_analyzeTable($tables[$i]);}/** * string $db_name (no backquotes) * * array $table = array(table_name, array() column_names, array()() rows) * array $tables = array of "$table"s * * array $analysis = array(array() column_types, array() column_sizes) * array $analyses = array of "$analysis"s * * array $create = array of SQL strings * * array $options = an associative array of options *//* Set database name to the currently selected one, if applicable */if (strlen($db)) {    $db_name = $db;    $options = array('create_db' => false);} else {    $db_name = 'ODS_DB';    $options = null;}/* Non-applicable parameters */$create = null;/* Created and execute necessary SQL statements from data */PMA_buildSQL($db_name, $tables, $analyses, $create, $options);unset($tables);unset($analyses);/* Commit any possible data in buffers */PMA_importRunQuery();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run cookie based authentication. * * @package PhpMyAdmin-Auth-Cookie */if (! defined('PHPMYADMIN')) {    exit;}/** * Swekey authentication functions. */require './libraries/auth/swekey/swekey.auth.lib.php';if (function_exists('mcrypt_encrypt')) {    /**     * Uses faster mcrypt library if available     * (as this is not called from anywhere else, put the code in-line     *  for faster execution)     */    /**     * Initialization     * Store the initialization vector because it will be needed for     * further decryption. I don't think necessary to have one iv     * per server so I don't put the server number in the cookie name.     */    if (empty($_COOKIE['pma_mcrypt_iv']) || false === ($iv = base64_decode($_COOKIE['pma_mcrypt_iv'], true))) {        srand((double) microtime() * 1000000);        $td = mcrypt_module_open(MCRYPT_BLOWFISH, '', MCRYPT_MODE_CBC, '');        if ($td === false) {            die(__('Failed to use Blowfish from mcrypt!'));        }        $iv = mcrypt_create_iv(mcrypt_enc_get_iv_size($td), MCRYPT_RAND);        $GLOBALS['PMA_Config']->setCookie('pma_mcrypt_iv', base64_encode($iv));    }    /**     * Encryption using blowfish algorithm (mcrypt)     *     * @param   string  original data     * @param   string  the secret     *     * @return  string  the encrypted result     *     * @access  public     *     */    function PMA_blowfish_encrypt($data, $secret)    {        global $iv;        return base64_encode(mcrypt_encrypt(MCRYPT_BLOWFISH, $secret, $data, MCRYPT_MODE_CBC, $iv));    }    /**     * Decryption using blowfish algorithm (mcrypt)     *     * @param   string  encrypted data     * @param   string  the secret     *     * @return  string  original data     *     * @access  public     *     */    function PMA_blowfish_decrypt($encdata, $secret)    {        global $iv;        return trim(mcrypt_decrypt(MCRYPT_BLOWFISH, $secret, base64_decode($encdata), MCRYPT_MODE_CBC, $iv));    }} else {    include_once './libraries/blowfish.php';}/** * Returns blowfish secret or generates one if needed. * * @access  public * @return string */function PMA_get_blowfish_secret(){    if (empty($GLOBALS['cfg']['blowfish_secret'])) {        if (empty($_SESSION['auto_blowfish_secret'])) {            // this returns 23 characters            $_SESSION['auto_blowfish_secret'] = uniqid('', true);        }        return $_SESSION['auto_blowfish_secret'];    } else {        // apply md5() to work around too long secrets (returns 32 characters)        return md5($GLOBALS['cfg']['blowfish_secret']);    }}/** * Displays authentication form * * this function MUST exit/quit the application * * @global  string    the last connection error * * @access  public */function PMA_auth(){    global $conn_error;    /* Perform logout to custom URL */    if (! empty($_REQUEST['old_usr'])     && ! empty($GLOBALS['cfg']['Server']['LogoutURL'])) {        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);        exit;    }    /* No recall if blowfish secret is not configured as it would produce garbage */    if ($GLOBALS['cfg']['LoginCookieRecall'] && !empty($GLOBALS['cfg']['blowfish_secret'])) {        $default_user   = $GLOBALS['PHP_AUTH_USER'];        $default_server = $GLOBALS['pma_auth_server'];        $autocomplete   = '';    } else {        $default_user   = '';        $default_server = '';        // skip the IE autocomplete feature.        $autocomplete   = ' autocomplete="off"';    }    $cell_align = ($GLOBALS['text_dir'] == 'ltr') ? 'left' : 'right';    // Defines the charset to be used    header('Content-Type: text/html; charset=utf-8');    /* HTML header; do not show here the PMA version to improve security */    $page_title = 'phpMyAdmin ';    include './libraries/header_meta_style.inc.php';    // if $page_title is set, this script uses it as the title:    include './libraries/header_scripts.inc.php';    ?><script type="text/javascript">//<![CDATA[// show login form in top frameif (top != self) {    window.top.location.href=location;}//]]></script></head><body class="loginform">    <?php    if (file_exists(CUSTOM_HEADER_FILE)) {        include CUSTOM_HEADER_FILE;    }    ?><div class="container"><a href="<?php echo PMA_linkURL('http://www.phpmyadmin.net/'); ?>" target="_blank" class="logo"><?php    $logo_image = $GLOBALS['pmaThemeImage'] . 'logo_right.png';    if (@file_exists($logo_image)) {        echo '<img src="' . $logo_image . '" id="imLogo" name="imLogo" alt="phpMyAdmin" border="0" />';    } else {        echo '<img name="imLogo" id="imLogo" src="' . $GLOBALS['pmaThemeImage'] . 'pma_logo.png' . '" '           . 'border="0" width="88" height="31" alt="phpMyAdmin" />';    }    ?></a><h1>    <?php    echo sprintf(__('Welcome to %s'),        '<bdo dir="ltr" xml:lang="en">' . $page_title . '</bdo>');    ?></h1>    <?php    // Show error message    if (! empty($conn_error)) {        PMA_Message::rawError($conn_error)->display();    }    // Displays the languages form    if (empty($GLOBALS['cfg']['Lang'])) {        include_once './libraries/display_select_lang.lib.php';        // use fieldset, don't show doc link        PMA_select_language(true, false);    }    ?><br /><!-- Login form --><form method="post" action="index.php" name="login_form"<?php echo $autocomplete; ?> target="_top" class="login">    <fieldset>    <legend><?php    echo __('Log in');    echo '<a href="./Documentation.html" target="documentation" ' .        'title="' . __('phpMyAdmin documentation') . '"> ';    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        echo PMA_getImage('b_help.png', __('phpMyAdmin documentation'));    } else {        echo '(*)';    }    echo '</a>';?></legend><?php if ($GLOBALS['cfg']['AllowArbitraryServer']) { ?>        <div class="item">            <label for="input_servername" title="<?php echo __('You can enter hostname/IP address and port separated by space.'); ?>"><?php echo __('Server:'); ?></label>            <input type="text" name="pma_servername" id="input_servername" value="<?php echo htmlspecialchars($default_server); ?>" size="24" class="textfield" title="<?php echo __('You can enter hostname/IP address and port separated by space.'); ?>" />        </div><?php } ?>        <div class="item">            <label for="input_username"><?php echo __('Username:'); ?></label>            <input type="text" name="pma_username" id="input_username" value="<?php echo htmlspecialchars($default_user); ?>" size="24" class="textfield"/>        </div>        <div class="item">            <label for="input_password"><?php echo __('Password:'); ?></label>            <input type="password" name="pma_password" id="input_password" value="" size="24" class="textfield" />        </div>    <?php    if (count($GLOBALS['cfg']['Servers']) > 1) {        ?>        <div class="item">            <label for="select_server"><?php echo __('Server Choice'); ?>:</label>            <select name="server" id="select_server"        <?php        if ($GLOBALS['cfg']['AllowArbitraryServer']) {            echo ' onchange="document.forms[\'login_form\'].elements[\'pma_servername\'].value = \'\'" ';        }        echo '>';        include_once './libraries/select_server.lib.php';        PMA_select_server(false, false);        echo '</select></div>';    } else {        echo '    <input type="hidden" name="server" value="' . $GLOBALS['server'] . '" />';    } // end if (server choice)    ?>    </fieldset>    <fieldset class="tblFooters">        <input value="<?php echo __('Go'); ?>" type="submit" id="input_go" />    <?php    $_form_params = array();    if (! empty($GLOBALS['target'])) {        $_form_params['target'] = $GLOBALS['target'];    }    if (! empty($GLOBALS['db'])) {        $_form_params['db'] = $GLOBALS['db'];    }    if (! empty($GLOBALS['table'])) {        $_form_params['table'] = $GLOBALS['table'];    }    // do not generate a "server" hidden field as we want the "server"    // drop-down to have priority    echo PMA_generate_common_hidden_inputs($_form_params, '', 0, 'server');    ?>    </fieldset></form>    <?php    // BEGIN Swekey Integration    Swekey_login('input_username', 'input_go');    // END Swekey Integration    // show the "Cookies required" message only if cookies are disabled    // (we previously tried to set some cookies)    if (empty($_COOKIE)) {        trigger_error(__('Cookies must be enabled past this point.'), E_USER_NOTICE);    }    if ($GLOBALS['error_handler']->hasDisplayErrors()) {        echo '<div>';        $GLOBALS['error_handler']->dispErrors();        echo '</div>';    }    ?></div>    <?php    if (file_exists(CUSTOM_FOOTER_FILE)) {        include CUSTOM_FOOTER_FILE;    }    ?></body></html>    <?php    exit;} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * this function DOES NOT check authentication - it just checks/provides * authentication credentials required to connect to the MySQL server * usually with PMA_DBI_connect() * * it returns false if something is missing - which usually leads to * PMA_auth() which displays login form * * it returns true if all seems ok which usually leads to PMA_auth_set_user() * * it directly switches to PMA_auth_fails() if user inactivity timout is reached * * @todo    AllowArbitraryServer on does not imply that the user wants an *          arbitrary server, or? so we should also check if this is filled and *          not only if allowed * * @return  boolean   whether we get authentication settings or not * * @access  public */function PMA_auth_check(){    // Initialization    /**     * @global $GLOBALS['pma_auth_server'] the user provided server to connect to     */    $GLOBALS['pma_auth_server'] = '';    $GLOBALS['PHP_AUTH_USER'] = $GLOBALS['PHP_AUTH_PW'] = '';    $GLOBALS['from_cookie'] = false;    // BEGIN Swekey Integration    if (! Swekey_auth_check()) {        return false;    }    // END Swekey Integration    if (defined('PMA_CLEAR_COOKIES')) {        foreach ($GLOBALS['cfg']['Servers'] as $key => $val) {            $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $key);            $GLOBALS['PMA_Config']->removeCookie('pmaServer-' . $key);            $GLOBALS['PMA_Config']->removeCookie('pmaUser-' . $key);        }        return false;    }    if (! empty($_REQUEST['old_usr'])) {        // The user wants to be logged out        // -> delete his choices that were stored in session        // according to the PHP manual we should do this before the destroy:        //$_SESSION = array();        // but we still need some parts of the session information        // in libraries/header_meta_style.inc.php        session_destroy();        // -> delete password cookie(s)        if ($GLOBALS['cfg']['LoginCookieDeleteAll']) {            foreach ($GLOBALS['cfg']['Servers'] as $key => $val) {                $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $key);                if (isset($_COOKIE['pmaPass-' . $key])) {                    unset($_COOKIE['pmaPass-' . $key]);                }            }        } else {            $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $GLOBALS['server']);            if (isset($_COOKIE['pmaPass-' . $GLOBALS['server']])) {                unset($_COOKIE['pmaPass-' . $GLOBALS['server']]);            }        }    }    if (! empty($_REQUEST['pma_username'])) {        // The user just logged in        $GLOBALS['PHP_AUTH_USER'] = $_REQUEST['pma_username'];        $GLOBALS['PHP_AUTH_PW']   = empty($_REQUEST['pma_password']) ? '' : $_REQUEST['pma_password'];        if ($GLOBALS['cfg']['AllowArbitraryServer'] && isset($_REQUEST['pma_servername'])) {            $GLOBALS['pma_auth_server'] = $_REQUEST['pma_servername'];        }        return true;    }    // At the end, try to set the $GLOBALS['PHP_AUTH_USER']    // and $GLOBALS['PHP_AUTH_PW'] variables from cookies    // servername    if ($GLOBALS['cfg']['AllowArbitraryServer']     && ! empty($_COOKIE['pmaServer-' . $GLOBALS['server']])) {        $GLOBALS['pma_auth_server'] = $_COOKIE['pmaServer-' . $GLOBALS['server']];    }    // username    if (empty($_COOKIE['pmaUser-' . $GLOBALS['server']])) {        return false;    }    $GLOBALS['PHP_AUTH_USER'] = PMA_blowfish_decrypt(        $_COOKIE['pmaUser-' . $GLOBALS['server']],        PMA_get_blowfish_secret());    // user was never logged in since session start    if (empty($_SESSION['last_access_time'])) {        return false;    }    // User inactive too long    if ($_SESSION['last_access_time'] < time() - $GLOBALS['cfg']['LoginCookieValidity']) {        PMA_cacheUnset('is_create_db_priv', true);        PMA_cacheUnset('is_process_priv', true);        PMA_cacheUnset('is_reload_priv', true);        PMA_cacheUnset('db_to_create', true);        PMA_cacheUnset('dbs_where_create_table_allowed', true);        $GLOBALS['no_activity'] = true;        PMA_auth_fails();        exit;    }    // password    if (empty($_COOKIE['pmaPass-' . $GLOBALS['server']])) {        return false;    }    $GLOBALS['PHP_AUTH_PW'] = PMA_blowfish_decrypt(        $_COOKIE['pmaPass-' . $GLOBALS['server']],        PMA_get_blowfish_secret());    if ($GLOBALS['PHP_AUTH_PW'] == "\xff(blank)") {        $GLOBALS['PHP_AUTH_PW'] = '';    }    $GLOBALS['from_cookie'] = true;    return true;} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    global $cfg;    // Ensures valid authentication mode, 'only_db', bookmark database and    // table names and relation table name are used    if ($cfg['Server']['user'] != $GLOBALS['PHP_AUTH_USER']) {        foreach ($cfg['Servers'] as $idx => $current) {            if ($current['host'] == $cfg['Server']['host']             && $current['port'] == $cfg['Server']['port']             && $current['socket'] == $cfg['Server']['socket']             && $current['ssl'] == $cfg['Server']['ssl']             && $current['connect_type'] == $cfg['Server']['connect_type']             && $current['user'] == $GLOBALS['PHP_AUTH_USER']) {                $GLOBALS['server'] = $idx;                $cfg['Server']     = $current;                break;            }        } // end foreach    } // end if    if ($GLOBALS['cfg']['AllowArbitraryServer']     && ! empty($GLOBALS['pma_auth_server'])) {        /* Allow to specify 'host port' */        $parts = explode(' ', $GLOBALS['pma_auth_server']);        if (count($parts) == 2) {            $tmp_host = $parts[0];            $tmp_port = $parts[1];        } else {            $tmp_host = $GLOBALS['pma_auth_server'];            $tmp_port = '';        }        if ($cfg['Server']['host'] != $GLOBALS['pma_auth_server']) {            $cfg['Server']['host'] = $tmp_host;            if (!empty($tmp_port)) {                $cfg['Server']['port'] = $tmp_port;            }        }        unset($tmp_host, $tmp_port, $parts);    }    $cfg['Server']['user']     = $GLOBALS['PHP_AUTH_USER'];    $cfg['Server']['password'] = $GLOBALS['PHP_AUTH_PW'];    // Avoid showing the password in phpinfo()'s output    unset($GLOBALS['PHP_AUTH_PW']);    unset($_SERVER['PHP_AUTH_PW']);    $_SESSION['last_access_time'] = time();    // Name and password cookies need to be refreshed each time    // Duration = one month for username    $GLOBALS['PMA_Config']->setCookie('pmaUser-' . $GLOBALS['server'],        PMA_blowfish_encrypt($cfg['Server']['user'],            PMA_get_blowfish_secret()));    // Duration = as configured    $GLOBALS['PMA_Config']->setCookie('pmaPass-' . $GLOBALS['server'],        PMA_blowfish_encrypt(!empty($cfg['Server']['password']) ? $cfg['Server']['password'] : "\xff(blank)",            PMA_get_blowfish_secret()),        null,        $GLOBALS['cfg']['LoginCookieStore']);    // Set server cookies if required (once per session) and, in this case, force    // reload to ensure the client accepts cookies    if (! $GLOBALS['from_cookie']) {        if ($GLOBALS['cfg']['AllowArbitraryServer']) {            if (! empty($GLOBALS['pma_auth_server'])) {                // Duration = one month for servername                $GLOBALS['PMA_Config']->setCookie('pmaServer-' . $GLOBALS['server'], $cfg['Server']['host']);            } else {                // Delete servername cookie                $GLOBALS['PMA_Config']->removeCookie('pmaServer-' . $GLOBALS['server']);            }        }        // URL where to go:        $redirect_url = $cfg['PmaAbsoluteUri'] . 'index.php';        // any parameters to pass?        $url_params = array();        if (strlen($GLOBALS['db'])) {            $url_params['db'] = $GLOBALS['db'];        }        if (strlen($GLOBALS['table'])) {            $url_params['table'] = $GLOBALS['table'];        }        // any target to pass?        if (! empty($GLOBALS['target']) && $GLOBALS['target'] != 'index.php') {            $url_params['target'] = $GLOBALS['target'];        }        /**         * whether we come from a fresh cookie login         */        define('PMA_COMING_FROM_COOKIE_LOGIN', true);        /**         * Clear user cache.         */        PMA_clearUserCache();        PMA_sendHeaderLocation($redirect_url . PMA_generate_common_url($url_params, '&'));        exit();    } // end if    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * prepares error message and switches to PMA_auth() which display the error * and the login form * * this function MUST exit/quit the application, * currently doen by call to PMA_auth() * * @access  public */function PMA_auth_fails(){    global $conn_error;    // Deletes password cookie and displays the login form    $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $GLOBALS['server']);    if (! empty($GLOBALS['login_without_password_is_forbidden'])) {        $conn_error = __('Login without a password is forbidden by configuration (see AllowNoPassword)');    } elseif (! empty($GLOBALS['allowDeny_forbidden'])) {        $conn_error = __('Access denied');    } elseif (! empty($GLOBALS['no_activity'])) {        $conn_error = sprintf(__('No activity within %s seconds; please log in again'), $GLOBALS['cfg']['LoginCookieValidity']);        // Remember where we got timeout to return on same place        if (PMA_getenv('SCRIPT_NAME')) {            $GLOBALS['target'] = basename(PMA_getenv('SCRIPT_NAME'));            // avoid "missing parameter: field" on re-entry            if ('tbl_alter.php' == $GLOBALS['target']) {                $GLOBALS['target'] = 'tbl_structure.php';            }        }    } elseif (PMA_DBI_getError()) {        $conn_error = '#' . $GLOBALS['errno'] . ' ' . __('Cannot log in to the MySQL server');    } else {        $conn_error = __('Cannot log in to the MySQL server');    }    // needed for PHP-CGI (not need for FastCGI or mod-php)    header('Cache-Control: no-store, no-cache, must-revalidate');    header('Pragma: no-cache');    PMA_auth();} // end of the 'PMA_auth_fails()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Runs common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require './libraries/db_common.inc.php';require_once './libraries/sql_query_form.lib.php';// After a syntax error, we return to this script// with the typed query in the textarea.$goto = 'db_sql.php';$back = 'db_sql.php';/** * Gets informations about the database and, if it is empty, move to the * "db_structure.php" script where table can be created */require './libraries/db_info.inc.php';if ($num_tables == 0 && empty($db_query_force)) {    $sub_part   = '';    $is_info    = true;    include './db_structure.php';    exit();}/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm(true, false, isset($_REQUEST['delimiter']) ? htmlspecialchars($_REQUEST['delimiter']) : ';');/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * holds the database index class * * @package PhpMyAdmin *//** * @since phpMyAdmin 3.0.0 * * @package PhpMyAdmin */class PMA_Index{    /**     * Class-wide storage container for indexes (caching, singleton)     *     * @var array     */    protected static $_registry = array();    /**     * @var string The name of the schema     */    protected $_schema = '';    /**     * @var string The name of the table     */    protected $_table = '';    /**     * @var string The name of the index     */    protected $_name = '';    /**     * Columns in index     *     * @var array     */    protected $_columns = array();    /**     * The index method used (BTREE, SPATIAL, FULLTEXT, HASH, RTREE).     *     * @var string     */    protected $_type = '';    /**     * The index choice (PRIMARY, UNIQUE, INDEX, SPATIAL, FULLTEXT)     *     * @var string     */    protected $_choice = '';    /**     * Various remarks.     *     * @var string     */    protected $_remarks = '';    /**     * Any comment provided for the index with a COMMENT attribute when the     * index was created.     *     * @var string     */    protected $_comment = '';    /**     * @var integer 0 if the index cannot contain duplicates, 1 if it can.     */    protected $_non_unique = 0;    /**     * Indicates how the key is packed. NULL if it is not.     *     * @var string     */    protected $_packed = null;    /**     * Constructor     *     * @param array $params     */    public function __construct($params = array())    {        $this->set($params);    }    static public function singleton($schema, $table, $index_name = '')    {        PMA_Index::_loadIndexes($table, $schema);        if (! isset(PMA_Index::$_registry[$schema][$table][$index_name])) {            $index = new PMA_Index;            if (strlen($index_name)) {                $index->setName($index_name);                PMA_Index::$_registry[$schema][$table][$index->getName()] = $index;            }            return $index;        } else {            return PMA_Index::$_registry[$schema][$table][$index_name];        }    }    /**     * returns an array with all indexes from the given table     *     * @param string $table     * @param string $schema     * @return  array     */    static public function getFromTable($table, $schema)    {        PMA_Index::_loadIndexes($table, $schema);        if (isset(PMA_Index::$_registry[$schema][$table])) {            return PMA_Index::$_registry[$schema][$table];        } else {            return array();        }    }    /**     * return primary if set, false otherwise     *     * @param string $table     * @param string $schema     * @return  mixed primary index or false if no one exists     */    static public function getPrimary($table, $schema)    {        PMA_Index::_loadIndexes($table, $schema);        if (isset(PMA_Index::$_registry[$schema][$table]['PRIMARY'])) {            return PMA_Index::$_registry[$schema][$table]['PRIMARY'];        } else {            return false;        }    }    /**     * Load index data for table     *     * @param string $table     * @param string $schema     * @return  boolean     */    static protected function _loadIndexes($table, $schema)    {        if (isset(PMA_Index::$_registry[$schema][$table])) {            return true;        }        $_raw_indexes = PMA_DBI_get_table_indexes($schema, $table);        foreach ($_raw_indexes as $_each_index) {            $_each_index['Schema'] = $schema;            if (! isset(PMA_Index::$_registry[$schema][$table][$_each_index['Key_name']])) {                $key = new PMA_Index($_each_index);                PMA_Index::$_registry[$schema][$table][$_each_index['Key_name']] = $key;            } else {                $key = PMA_Index::$_registry[$schema][$table][$_each_index['Key_name']];            }            $key->addColumn($_each_index);        }        return true;    }    /**     * Add column to index     *     * @param array $params column params     */    public function addColumn($params)    {        if (strlen($params['Column_name'])) {            $this->_columns[$params['Column_name']] = new PMA_Index_Column($params);        }    }    public function addColumns($columns)    {        $_columns = array();        if (isset($columns['names'])) {            // coming from form            // $columns[names][]            // $columns[sub_parts][]            foreach ($columns['names'] as $key => $name) {                $sub_part = isset($columns['sub_parts'][$key]) ? $columns['sub_parts'][$key] : '';                $_columns[] = array(                    'Column_name'   => $name,                    'Sub_part'      => $sub_part,                );            }        } else {            // coming from SHOW INDEXES            // $columns[][name]            // $columns[][sub_part]            // ...            $_columns = $columns;        }        foreach ($_columns as $column) {            $this->addColumn($column);        }    }    /**     * Returns true if $column indexed in this index     *     * @param string $column     * @return  boolean     */    public function hasColumn($column)    {        return isset($this->_columns[$column]);    }    public function set($params)    {        if (isset($params['columns'])) {            $this->addColumns($params['columns']);        }        if (isset($params['Schema'])) {            $this->_schema = $params['Schema'];        }        if (isset($params['Table'])) {            $this->_table = $params['Table'];        }        if (isset($params['Key_name'])) {            $this->_name = $params['Key_name'];        }        if (isset($params['Index_type'])) {            $this->_type = $params['Index_type'];        }        if (isset($params['Comment'])) {            $this->_remarks = $params['Comment'];        }        if (isset($params['Index_comment'])) {            $this->_comment = $params['Index_comment'];        }        if (isset($params['Non_unique'])) {            $this->_non_unique = $params['Non_unique'];        }        if (isset($params['Packed'])) {            $this->_packed = $params['Packed'];        }        if ('PRIMARY' == $this->_name) {            $this->_choice = 'PRIMARY';        } elseif ('FULLTEXT' == $this->_type) {            $this->_choice = 'FULLTEXT';        } elseif ('SPATIAL' == $this->_type) {            $this->_choice = 'SPATIAL';        } elseif ('0' == $this->_non_unique) {            $this->_choice = 'UNIQUE';        } else {            $this->_choice = 'INDEX';        }    }    public function getColumnCount()    {        return count($this->_columns);    }    public function getComment()    {        return $this->_comment;    }    public function getRemarks()    {        return $this->_remarks;    }    public function getComments()    {        $comments = $this->getRemarks();        if (strlen($comments)) {            $comments .= "\n";        }        $comments .= $this->getComment();        return $comments;    }    public function getType()    {        return $this->_type;    }    public function getChoice()    {        return $this->_choice;    }    /**     * Return a list of all index choices     *     * @return  array index choices     */    static public function getIndexChoices()    {        return array(            'PRIMARY',            'INDEX',            'UNIQUE',            'SPATIAL',            'FULLTEXT',        );    }    public function generateIndexSelector()    {        $html_options = '';        foreach (PMA_Index::getIndexChoices() as $each_index_choice) {            if ($each_index_choice === 'PRIMARY'             && $this->_choice !== 'PRIMARY'             && PMA_Index::getPrimary($this->_table, $this->_schema)) {                // skip PRIMARY if there is already one in the table                continue;            }            $html_options .= '<option value="' . $each_index_choice . '"'                 . (($this->_choice == $each_index_choice) ? ' selected="selected"' : '')                 . '>'. $each_index_choice . '</option>' . "\n";        }        return $html_options;    }    public function getPacked()    {        return $this->_packed;    }    public function isPacked($as_text = false)    {        if ($as_text) {            $r = array(                '0' => __('No'),                '1' => __('Yes'),            );        } else {            $r = array(                '0' => false,                '1' => true,            );        }        if (null === $this->_packed) {            return $r[0];        }        return $this->_packed;    }    public function getNonUnique()    {        return $this->_non_unique;    }    public function isUnique($as_text = false)    {        if ($as_text) {            $r = array(                '0' => __('Yes'),                '1' => __('No'),            );        } else {            $r = array(                '0' => true,                '1' => false,            );        }        return $r[$this->_non_unique];    }    public function getName()    {        return $this->_name;    }    public function setName($name)    {        $this->_name = (string) $name;    }    public function getColumns()    {        return $this->_columns;    }    /**     * Show index data     *     * @param string      $table          The tablename     * @param array       $indexes_info   Referenced info array     * @param array       $indexes_data   Referenced data array     * @param boolean     $print_mode     * @access  public     * @return  array       Index collection array     */    static public function getView($table, $schema, $print_mode = false)    {        $indexes = PMA_Index::getFromTable($table, $schema);        $no_indexes_class = count($indexes) > 0 ? ' hide' : '';        $no_indexes  = "<div class='no_indexes_defined$no_indexes_class'>";        $no_indexes .= PMA_Message::notice(__('No index defined!'))->getDisplay();        $no_indexes .= '</div>';        $r  = '<fieldset>';        $r .= '<legend id="index_header">' . __('Indexes');        $r .= PMA_showMySQLDocu('optimization', 'optimizing-database-structure');        $r .= '</legend>';        $r .= $no_indexes;        if (count($indexes) < 1) {            $r .= '</fieldset>';            return $r;        }        if (! $print_mode) {            $r .= PMA_Index::findDuplicates($table, $schema);        }        $r .= '<table id="table_index">';        $r .= '<thead>';        $r .= '<tr>';        if (! $print_mode) {            $r .= '<th colspan="2">' . __('Action') . '</th>';        }        $r .= '<th>' . __('Keyname') . '</th>';        $r .= '<th>' . __('Type') . '</th>';        $r .= '<th>' . __('Unique') . '</th>';        $r .= '<th>' . __('Packed') . '</th>';        $r .= '<th>' . __('Column') . '</th>';        $r .= '<th>' . __('Cardinality') . '</th>';        $r .= '<th>' . __('Collation') . '</th>';        $r .= '<th>' . __('Null') . '</th>';        $r .= '<th>' . __('Comment') . '</th>';        $r .= '</tr>';        $r .= '</thead>';        $r .= '<tbody>';        $odd_row = true;        foreach ($indexes as $index) {            $row_span = ' rowspan="' . $index->getColumnCount() . '" ';            $r .= '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">';            if (! $print_mode) {                $this_params = $GLOBALS['url_params'];                $this_params['index'] = $index->getName();                $r .= '<td class="edit_index ';                if ($GLOBALS['cfg']['AjaxEnable']) {                    $r .= 'ajax" ';                }                $r .= '" ' . $row_span . '>'                   . '    <a href="tbl_indexes.php' . PMA_generate_common_url($this_params)                   . '">' . PMA_getIcon('b_edit.png', __('Edit')) . '</a>'                   . '</td>' . "\n";                $this_params = $GLOBALS['url_params'];                if ($index->getName() == 'PRIMARY') {                    $this_params['sql_query'] = 'ALTER TABLE ' . PMA_backquote($table) . ' DROP PRIMARY KEY';                    $this_params['message_to_show'] = __('The primary key has been dropped');                    $js_msg      = PMA_jsFormat('ALTER TABLE ' . $table . ' DROP PRIMARY KEY');                } else {                    $this_params['sql_query'] = 'ALTER TABLE ' . PMA_backquote($table) . ' DROP INDEX ' . PMA_backquote($index->getName());                    $this_params['message_to_show'] = sprintf(__('Index %s has been dropped'), $index->getName());                    $js_msg      = PMA_jsFormat('ALTER TABLE ' . $table . ' DROP INDEX ' . $index->getName());                }                $r .= '<td ' . $row_span . '>';                $r .= '<input type="hidden" class="drop_primary_key_index_msg" value="' . $js_msg . '" />';                $r .= '    <a ';                if ($GLOBALS['cfg']['AjaxEnable']) {                    $r .= 'class="drop_primary_key_index_anchor" ';                }                $r .= ' href="sql.php' . PMA_generate_common_url($this_params)                   . '" >'                   . PMA_getIcon('b_drop.png', __('Drop'))  . '</a>'                   . '</td>' . "\n";            }            $r .= '<th ' . $row_span . '>' . htmlspecialchars($index->getName()) . '</th>';            $r .= '<td ' . $row_span . '>' . htmlspecialchars($index->getType()) . '</td>';            $r .= '<td ' . $row_span . '>' . $index->isUnique(true) . '</td>';            $r .= '<td ' . $row_span . '>' . $index->isPacked(true) . '</td>';            foreach ($index->getColumns() as $column) {                if ($column->getSeqInIndex() > 1) {                    $r .= '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">';                }                $r .= '<td>' . htmlspecialchars($column->getName());                if ($column->getSubPart()) {                    $r .= ' (' . $column->getSubPart() . ')';                }                $r .= '</td>';                $r .= '<td>' . htmlspecialchars($column->getCardinality()) . '</td>';                $r .= '<td>' . htmlspecialchars($column->getCollation()) . '</td>';                $r .= '<td>' . htmlspecialchars($column->getNull(true)) . '</td>';                if ($column->getSeqInIndex() == 1) {                    $r .= '<td ' . $row_span . '>'                        . htmlspecialchars($index->getComments()) . '</td>';                }                $r .= '</tr>';            } // end foreach $index['Sequences']            $odd_row = ! $odd_row;        } // end while        $r .= '</tbody>';        $r .= '</table>';        $r .= '</fieldset>';        return $r;    }    public function getCompareData()    {        $data = array(            // 'Non_unique'    => $this->_non_unique,            'Packed'        => $this->_packed,            'Index_type'    => $this->_type,        );        foreach ($this->_columns as $column) {            $data['columns'][] = $column->getCompareData();        }        return $data;    }    /**     * Function to check over array of indexes and look for common problems     *     * @access  public     * @param string      name of table     * @return  string      Output HTML     */    static public function findDuplicates($table, $schema)    {        $indexes = PMA_Index::getFromTable($table, $schema);        $output  = '';        // count($indexes) < 2:        //   there is no need to check if there less than two indexes        if (count($indexes) < 2) {            return $output;        }        // remove last index from stack and ...        while ($while_index = array_pop($indexes)) {            // ... compare with every remaining index in stack            foreach ($indexes as $each_index) {                if ($each_index->getCompareData() !== $while_index->getCompareData()) {                    continue;                }                // did not find any difference                // so it makes no sense to have this two equal indexes                $message = PMA_Message::notice(__('The indexes %1$s and %2$s seem to be equal and one of them could possibly be removed.'));                $message->addParam($each_index->getName());                $message->addParam($while_index->getName());                $output .= $message->getDisplay();                // there is no need to check any further indexes if we have already                // found that this one has a duplicate                continue 2;            }        }        return $output;    }}/** * @package PhpMyAdmin */class PMA_Index_Column{    /**     * @var string The column name     */    protected $_name = '';    /**     * @var integer The column sequence number in the index, starting with 1.     */    protected $_seq_in_index = 1;    /**     * @var string How the column is sorted in the index. A (Ascending) or NULL (Not sorted)     */    protected $_collation = null;    /**     * The number of indexed characters if the column is only partly indexed,     * NULL if the entire column is indexed.     *     * @var integer     */    protected $_sub_part = null;    /**     * Contains YES if the column may contain NULL.     * If not, the column contains NO.     *     * @var string     */    protected $_null = '';    /**     * An estimate of the number of unique values in the index. This is updated     * by running ANALYZE TABLE or myisamchk -a. Cardinality is counted based on     * statistics stored as integers, so the value is not necessarily exact even     * for small tables. The higher the cardinality, the greater the chance that     * MySQL uses the index when doing joins.     *     * @var integer     */    protected $_cardinality = null;    public function __construct($params = array())    {        $this->set($params);    }    public function set($params)    {        if (isset($params['Column_name'])) {            $this->_name = $params['Column_name'];        }        if (isset($params['Seq_in_index'])) {            $this->_seq_in_index = $params['Seq_in_index'];        }        if (isset($params['Collation'])) {            $this->_collation = $params['Collation'];        }        if (isset($params['Cardinality'])) {            $this->_cardinality = $params['Cardinality'];        }        if (isset($params['Sub_part'])) {            $this->_sub_part = $params['Sub_part'];        }        if (isset($params['Null'])) {            $this->_null = $params['Null'];        }    }    public function getName()    {        return $this->_name;    }    public function getCollation()    {        return $this->_collation;    }    public function getCardinality()    {        return $this->_cardinality;    }    public function getNull($as_text = false)    {        return $as_text            ? (!$this->_null || $this->_null == 'NO' ? __('No') : __('Yes'))            : $this->_null;    }    public function getSeqInIndex()    {        return $this->_seq_in_index;    }    public function getSubPart()    {        return $this->_sub_part;    }    public function getCompareData()    {        return array(            'Column_name'   => $this->_name,            'Seq_in_index'  => $this->_seq_in_index,            'Collation'     => $this->_collation,            'Sub_part'      => $this->_sub_part,            'Null'          => $this->_null,        );    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for password change * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * autocomplete feature of IE kills the "onchange" event handler and it *        must be replaced by the "onpropertychange" one in this case */$chg_evt_handler = (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 5)                 ? 'onpropertychange'                 : 'onchange';// Displays the form?>    <form method="post" id="change_password_form" action="<?php echo $GLOBALS['PMA_PHP_SELF']; ?>" name="chgPassword" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="ajax" ' : ''); ?> onsubmit="return checkPassword(this)">    <?php   echo PMA_generate_common_hidden_inputs();            if (strpos($GLOBALS['PMA_PHP_SELF'], 'server_privileges') !== false) {                echo '<input type="hidden" name="username" value="' . htmlspecialchars($username) . '" />' . "\n"                   . '<input type="hidden" name="hostname" value="' . htmlspecialchars($hostname) . '" />' . "\n";            }?>    <fieldset id="fieldset_change_password">        <legend><?php echo __('Change password'); ?></legend>        <table class="data noclick">        <tr class="odd">            <td colspan="2">                <input type="radio" name="nopass" value="1" id="nopass_1" onclick="pma_pw.value = ''; pma_pw2.value = ''; this.checked = true" />        <label for="nopass_1"><?php echo __('No Password') . "\n"; ?></label>            </td>        </tr>        <tr class="even">            <td>                <input type="radio" name="nopass" value="0" id="nopass_0" onclick="document.getElementById('text_pma_pw').focus();" checked="checked " />        <label for="nopass_0"><?php echo __('Password'); ?>:&nbsp;</label>            </td>            <td>                <input type="password" name="pma_pw" id="text_pma_pw" size="10" class="textfield" <?php echo $chg_evt_handler; ?>="nopass[1].checked = true" />        &nbsp;&nbsp;        <?php echo __('Re-type'); ?>:&nbsp;                <input type="password" name="pma_pw2" id="text_pma_pw2" size="10" class="textfield" <?php echo $chg_evt_handler; ?>="nopass[1].checked = true" />            </td>        </tr>        <tr>            <td>            <?php echo __('Password Hashing'); ?>:        </td>        <td>            <input type="radio" name="pw_hash" id="radio_pw_hash_new" value="new" checked="checked" />            <label for="radio_pw_hash_new">                MySQL&nbsp;4.1+            </label>        </td>        </tr>        <tr id="tr_element_before_generate_password">            <td>&nbsp;</td>        <td>            <input type="radio" name="pw_hash" id="radio_pw_hash_old" value="old" />            <label for="radio_pw_hash_old">                <?php echo __('MySQL 4.0 compatible'); ?>            </label>        </td>        </tr>        </table>    </fieldset>    <fieldset id="fieldset_change_password_footer" class="tblFooters">            <input type="submit" name="change_pw" value="<?php echo(__('Go')); ?>" />    </fieldset></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Misc stuff and REQUIRED by ALL the scripts. * MUST be included by every script * * Among other things, it contains the advanced authentication work. * * Order of sections for common.inc.php: * * the authentication libraries must be before the connection to db * * ... so the required order is: * * LABEL_variables_init *  - initialize some variables always needed * LABEL_parsing_config_file *  - parsing of the configuration file * LABEL_loading_language_file *  - loading language file * LABEL_setup_servers *  - check and setup configured servers * LABEL_theme_setup *  - setting up themes * * - load of MySQL extension (if necessary) * - loading of an authentication library * - db connection * - authentication work * * @package PhpMyAdmin *//** * Minimum PHP version; can't call PMA_fatalError() which uses a * PHP 5 function, so cannot easily localize this message. */if (version_compare(PHP_VERSION, '5.2.0', 'lt')) {    die('PHP 5.2+ is required');}/**  * Backward compatibility for PHP 5.2  */if (!defined('E_DEPRECATED')) {    define('E_DEPRECATED', 8192);}/** * the error handler */require './libraries/Error_Handler.class.php';/** * initialize the error handler */$GLOBALS['error_handler'] = new PMA_Error_Handler();$cfg['Error_Handler']['display'] = true;/* * This setting was removed in PHP 5.3. But at this point PMA_PHP_INT_VERSION * is not yet defined so we use another way to find out the PHP version. */if (version_compare(phpversion(), '5.3', 'lt')) {    /**     * Avoid object cloning errors     */    @ini_set('zend.ze1_compatibility_mode', false);}/** * This setting was removed in PHP 5.4. But at this point PMA_PHP_INT_VERSION * is not yet defined so we use another way to find out the PHP version. */if (version_compare(phpversion(), '5.4', 'lt')) {    /**     * Avoid problems with magic_quotes_runtime     */     @ini_set('magic_quotes_runtime', false);}/** * for verification in all procedural scripts under libraries */define('PHPMYADMIN', true);/** * core functions */require './libraries/core.lib.php';/** * Input sanitizing */require './libraries/sanitizing.lib.php';/** * the PMA_Theme class */require './libraries/Theme.class.php';/** * the PMA_Theme_Manager class */require './libraries/Theme_Manager.class.php';/** * the PMA_Config class */require './libraries/Config.class.php';/** * the relation lib, tracker needs it */require './libraries/relation.lib.php';/** * the PMA_Tracker class */require './libraries/Tracker.class.php';/** * the PMA_Table class */require './libraries/Table.class.php';if (!defined('PMA_MINIMUM_COMMON')) {    /**     * common functions     */    include_once './libraries/common.lib.php';    /**     * Java script escaping.     */    include_once './libraries/js_escape.lib.php';    /**     * Include URL/hidden inputs generating.     */    include_once './libraries/url_generating.lib.php';}/******************************************************************************//* start procedural code                       label_start_procedural         *//** * protect against possible exploits - there is no need to have so much variables */if (count($_REQUEST) > 1000) {    die(__('possible exploit'));}/** * Check for numeric keys * (if register_globals is on, numeric key can be found in $GLOBALS) */foreach ($GLOBALS as $key => $dummy) {    if (is_numeric($key)) {        die(__('numeric key detected'));    }}unset($dummy);/** * PATH_INFO could be compromised if set, so remove it from PHP_SELF * and provide a clean PHP_SELF here */$PMA_PHP_SELF = PMA_getenv('PHP_SELF');$_PATH_INFO = PMA_getenv('PATH_INFO');if (! empty($_PATH_INFO) && ! empty($PMA_PHP_SELF)) {    $path_info_pos = strrpos($PMA_PHP_SELF, $_PATH_INFO);    if ($path_info_pos + strlen($_PATH_INFO) === strlen($PMA_PHP_SELF)) {        $PMA_PHP_SELF = substr($PMA_PHP_SELF, 0, $path_info_pos);    }}$PMA_PHP_SELF = htmlspecialchars($PMA_PHP_SELF);/** * just to be sure there was no import (registering) before here * we empty the global space (but avoid unsetting $variables_list * and $key in the foreach (), we still need them!) */$variables_whitelist = array (    'GLOBALS',    '_SERVER',    '_GET',    '_POST',    '_REQUEST',    '_FILES',    '_ENV',    '_COOKIE',    '_SESSION',    'error_handler',    'PMA_PHP_SELF',    'variables_whitelist',    'key');foreach (get_defined_vars() as $key => $value) {    if (! in_array($key, $variables_whitelist)) {        unset($$key);    }}unset($key, $value, $variables_whitelist);/** * Subforms - some functions need to be called by form, cause of the limited URL * length, but if this functions inside another form you cannot just open a new * form - so phpMyAdmin uses 'arrays' inside this form * * <code> * <form ...> * ... main form elments ... * <input type="hidden" name="subform[action1][id]" value="1" /> * ... other subform data ... * <input type="submit" name="usesubform[action1]" value="do action1" /> * ... other subforms ... * <input type="hidden" name="subform[actionX][id]" value="X" /> * ... other subform data ... * <input type="submit" name="usesubform[actionX]" value="do actionX" /> * ... main form elments ... * <input type="submit" name="main_action" value="submit form" /> * </form> * </code> * * so we now check if a subform is submitted */$__redirect = null;if (isset($_POST['usesubform'])) {    // if a subform is present and should be used    // the rest of the form is deprecated    $subform_id = key($_POST['usesubform']);    $subform    = $_POST['subform'][$subform_id];    $_POST      = $subform;    $_REQUEST   = $subform;    /**     * some subforms need another page than the main form, so we will just     * include this page at the end of this script - we use $__redirect to     * track this     */    if (isset($_POST['redirect'])      && $_POST['redirect'] != basename($PMA_PHP_SELF)) {        $__redirect = $_POST['redirect'];        unset($_POST['redirect']);    }    unset($subform_id, $subform);} else {    // Note: here we overwrite $_REQUEST so that it does not contain cookies,    // because another application for the same domain could have set    // a cookie (with a compatible path) that overrides a variable    // we expect from GET or POST.    // We'll refer to cookies explicitly with the $_COOKIE syntax.    $_REQUEST = array_merge($_GET, $_POST);}// end check if a subform is submitted/** * This setting was removed in PHP 5.4. But at this point PMA_PHP_INT_VERSION * is not yet defined so we use another way to find out the PHP version. */if (version_compare(phpversion(), '5.4', 'lt')) {    // remove quotes added by PHP    if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) {        PMA_arrayWalkRecursive($_GET, 'stripslashes', true);        PMA_arrayWalkRecursive($_POST, 'stripslashes', true);        PMA_arrayWalkRecursive($_COOKIE, 'stripslashes', true);        PMA_arrayWalkRecursive($_REQUEST, 'stripslashes', true);    }}/** * include deprecated grab_globals only if required */if (empty($__redirect) && !defined('PMA_NO_VARIABLES_IMPORT')) {    include './libraries/grab_globals.lib.php';}/** * check timezone setting * this could produce an E_STRICT - but only once, * if not done here it will produce E_STRICT on every date/time function * * @todo need to decide how we should handle this (without @) */date_default_timezone_set(@date_default_timezone_get());/******************************************************************************//* parsing configuration file                         LABEL_parsing_config_file      *//** * We really need this one! */if (! function_exists('preg_replace')) {    PMA_warnMissingExtension('pcre', true);}/** * @global PMA_Config $GLOBALS['PMA_Config'] * force reading of config file, because we removed sensitive values * in the previous iteration */$GLOBALS['PMA_Config'] = new PMA_Config(CONFIG_FILE);if (!defined('PMA_MINIMUM_COMMON')) {    $GLOBALS['PMA_Config']->checkPmaAbsoluteUri();}/** * BC - enable backward compatibility * exports all configuration settings into $GLOBALS ($GLOBALS['cfg']) */$GLOBALS['PMA_Config']->enableBc();/** * clean cookies on upgrade * when changing something related to PMA cookies, increment the cookie version */$pma_cookie_version = 4;if (isset($_COOKIE) && (isset($_COOKIE['pmaCookieVer'])  && $_COOKIE['pmaCookieVer'] < $pma_cookie_version)) {    // delete all cookies    foreach ($_COOKIE as $cookie_name => $tmp) {        $GLOBALS['PMA_Config']->removeCookie($cookie_name);    }    $_COOKIE = array();    $GLOBALS['PMA_Config']->setCookie('pmaCookieVer', $pma_cookie_version);}/** * check HTTPS connection */if ($GLOBALS['PMA_Config']->get('ForceSSL')  && !$GLOBALS['PMA_Config']->get('is_https')) {    PMA_sendHeaderLocation(        preg_replace('/^http/', 'https',            $GLOBALS['PMA_Config']->get('PmaAbsoluteUri'))        . PMA_generate_common_url($_GET, 'text'));    // delete the current session, otherwise we get problems (see bug #2397877)    $GLOBALS['PMA_Config']->removeCookie($GLOBALS['session_name']);    exit;}/** * include session handling after the globals, to prevent overwriting */require './libraries/session.inc.php';/** * init some variables LABEL_variables_init *//** * holds parameters to be passed to next page * @global array $GLOBALS['url_params'] */$GLOBALS['url_params'] = array();/** * the whitelist for $GLOBALS['goto'] * @global array $goto_whitelist */$goto_whitelist = array(    //'browse_foreigners.php',    //'calendar.php',    //'changelog.php',    //'chk_rel.php',    'db_create.php',    'db_datadict.php',    'db_sql.php',    'db_events.php',    'db_export.php',    'db_importdocsql.php',    'db_qbe.php',    'db_structure.php',    'db_import.php',    'db_operations.php',    'db_printview.php',    'db_search.php',    'db_routines.php',    //'Documentation.html',    'export.php',    'import.php',    //'index.php',    //'navigation.php',    //'license.php',    'main.php',    'pdf_pages.php',    'pdf_schema.php',    //'phpinfo.php',    'querywindow.php',    //'readme.php',    'server_binlog.php',    'server_collations.php',    'server_databases.php',    'server_engines.php',    'server_export.php',    'server_import.php',    'server_privileges.php',    'server_processlist.php',    'server_sql.php',    'server_status.php',    'server_variables.php',    'sql.php',    'tbl_addfield.php',    'tbl_alter.php',    'tbl_change.php',    'tbl_create.php',    'tbl_import.php',    'tbl_indexes.php',    'tbl_move_copy.php',    'tbl_printview.php',    'tbl_sql.php',    'tbl_export.php',    'tbl_operations.php',    'tbl_structure.php',    'tbl_relation.php',    'tbl_replace.php',    'tbl_row_action.php',    'tbl_select.php',    'tbl_zoom_select.php',    //'themes.php',    'transformation_overview.php',    'transformation_wrapper.php',    'user_password.php',);/** * check $__redirect against whitelist */if (! PMA_checkPageValidity($__redirect, $goto_whitelist)) {    $__redirect = null;}/** * holds page that should be displayed * @global string $GLOBALS['goto'] */$GLOBALS['goto'] = '';// Security fix: disallow accessing serious server files via "?goto="if (PMA_checkPageValidity($_REQUEST['goto'], $goto_whitelist)) {    $GLOBALS['goto'] = $_REQUEST['goto'];    $GLOBALS['url_params']['goto'] = $_REQUEST['goto'];} else {    unset($_REQUEST['goto'], $_GET['goto'], $_POST['goto'], $_COOKIE['goto']);}/** * returning page * @global string $GLOBALS['back'] */if (PMA_checkPageValidity($_REQUEST['back'], $goto_whitelist)) {    $GLOBALS['back'] = $_REQUEST['back'];} else {    unset($_REQUEST['back'], $_GET['back'], $_POST['back'], $_COOKIE['back']);}/** * Check whether user supplied token is valid, if not remove any possibly * dangerous stuff from request. * * remember that some objects in the session with session_start and __wakeup() * could access this variables before we reach this point * f.e. PMA_Config: fontsize * * @todo variables should be handled by their respective owners (objects) * f.e. lang, server, collation_connection in PMA_Config */if (! PMA_isValid($_REQUEST['token']) || $_SESSION[' PMA_token '] != $_REQUEST['token']) {    /**     *  List of parameters which are allowed from unsafe source     */    $allow_list = array(        /* needed for direct access, see FAQ 1.34         * also, server needed for cookie login screen (multi-server)         */        'server', 'db', 'table', 'target', 'lang',        /* Session ID */        'phpMyAdmin',        /* Cookie preferences */        'pma_lang', 'pma_collation_connection',        /* Possible login form */        'pma_servername', 'pma_username', 'pma_password',        /* for playing blobstreamable media */        'media_type', 'custom_type', 'bs_reference',        /* for changing BLOB repository file MIME type */        'bs_db', 'bs_table', 'bs_ref', 'bs_new_mime_type',    );    /**     * Require cleanup functions     */    include './libraries/cleanup.lib.php';    /**     * Do actual cleanup     */    PMA_remove_request_vars($allow_list);}/** * current selected database * @global string $GLOBALS['db'] */$GLOBALS['db'] = '';if (PMA_isValid($_REQUEST['db'])) {    // can we strip tags from this?    // only \ and / is not allowed in db names for MySQL    $GLOBALS['db'] = $_REQUEST['db'];    $GLOBALS['url_params']['db'] = $GLOBALS['db'];}/** * current selected table * @global string $GLOBALS['table'] */$GLOBALS['table'] = '';if (PMA_isValid($_REQUEST['table'])) {    // can we strip tags from this?    // only \ and / is not allowed in table names for MySQL    $GLOBALS['table'] = $_REQUEST['table'];    $GLOBALS['url_params']['table'] = $GLOBALS['table'];}/** * Store currently selected recent table. * Affect $GLOBALS['db'] and $GLOBALS['table'] */if (PMA_isValid($_REQUEST['selected_recent_table'])) {    $recent_table = json_decode($_REQUEST['selected_recent_table'], true);    $GLOBALS['db'] = $recent_table['db'];    $GLOBALS['url_params']['db'] = $GLOBALS['db'];    $GLOBALS['table'] = $recent_table['table'];    $GLOBALS['url_params']['table'] = $GLOBALS['table'];}/** * SQL query to be executed * @global string $GLOBALS['sql_query'] */$GLOBALS['sql_query'] = '';if (PMA_isValid($_REQUEST['sql_query'])) {    $GLOBALS['sql_query'] = $_REQUEST['sql_query'];}/** * avoid problems in phpmyadmin.css.php in some cases * @global string $js_frame */$_REQUEST['js_frame'] = PMA_ifSetOr($_REQUEST['js_frame'], '');//$_REQUEST['set_theme'] // checked later in this file LABEL_theme_setup//$_REQUEST['server']; // checked later in this file//$_REQUEST['lang'];   // checked by LABEL_loading_language_file/** * holds name of JavaScript files to be included in HTML header * @global array $js_include */$GLOBALS['js_include'] = array();$GLOBALS['js_include'][] = 'jquery/jquery-1.6.2.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'update-location.js';/** * holds an array of javascript code snippets to be included in the HTML header * Can be used with PMA_AddJSCode() to pass on js variables to the browser. * @global array $js_script */$GLOBALS['js_script'] = array();/** * Add common jQuery functions script here if necessary. *//** * JavaScript events that will be registered * @global array $js_events */$GLOBALS['js_events'] = array();/** * footnotes to be displayed ot the page bottom * @global array $footnotes */$GLOBALS['footnotes'] = array();/******************************************************************************//* loading language file                       LABEL_loading_language_file    *//** * lang detection is done here */require './libraries/select_lang.lib.php';/** * check for errors occurred while loading configuration * this check is done here after loading language files to present errors in locale */if ($GLOBALS['PMA_Config']->error_config_file) {    $error = '<h1>' . __('Failed to read configuration file') . '</h1>'        . _('This usually means there is a syntax error in it, please check any errors shown below.')        . '<br />'        . '<br />'        . '<iframe src="show_config_errors.php" />';    trigger_error($error, E_USER_ERROR);}if ($GLOBALS['PMA_Config']->error_config_default_file) {    $error = sprintf(__('Could not load default configuration from: %1$s'),        $GLOBALS['PMA_Config']->default_source);    trigger_error($error, E_USER_ERROR);}if ($GLOBALS['PMA_Config']->error_pma_uri) {    trigger_error(__('The <tt>$cfg[\'PmaAbsoluteUri\']</tt> directive MUST be set in your configuration file!'), E_USER_ERROR);}/******************************************************************************//* setup servers                                       LABEL_setup_servers    *//** * current server * @global integer $GLOBALS['server'] */$GLOBALS['server'] = 0;/** * Servers array fixups. * $default_server comes from PMA_Config::enableBc() * @todo merge into PMA_Config */// Do we have some server?if (! isset($cfg['Servers']) || count($cfg['Servers']) == 0) {    // No server => create one with defaults    $cfg['Servers'] = array(1 => $default_server);} else {    // We have server(s) => apply default configuration    $new_servers = array();    foreach ($cfg['Servers'] as $server_index => $each_server) {        // Detect wrong configuration        if (!is_int($server_index) || $server_index < 1) {            trigger_error(sprintf(__('Invalid server index: %s'), $server_index), E_USER_ERROR);        }        $each_server = array_merge($default_server, $each_server);        // Don't use servers with no hostname        if ($each_server['connect_type'] == 'tcp' && empty($each_server['host'])) {            trigger_error(sprintf(__('Invalid hostname for server %1$s. Please review your configuration.'), $server_index), E_USER_ERROR);        }        // Final solution to bug #582890        // If we are using a socket connection        // and there is nothing in the verbose server name        // or the host field, then generate a name for the server        // in the form of "Server 2", localized of course!        if ($each_server['connect_type'] == 'socket' && empty($each_server['host']) && empty($each_server['verbose'])) {            $each_server['verbose'] = __('Server') . $server_index;        }        $new_servers[$server_index] = $each_server;    }    $cfg['Servers'] = $new_servers;    unset($new_servers, $server_index, $each_server);}// Cleanupunset($default_server);/******************************************************************************//* setup themes                                          LABEL_theme_setup    *//** * @global PMA_Theme_Manager $_SESSION['PMA_Theme_Manager'] */if (! isset($_SESSION['PMA_Theme_Manager'])) {    $_SESSION['PMA_Theme_Manager'] = new PMA_Theme_Manager;} else {    /**     * @todo move all __wakeup() functionality into session.inc.php     */    $_SESSION['PMA_Theme_Manager']->checkConfig();}// for the theme per server featureif (isset($_REQUEST['server']) && ! isset($_REQUEST['set_theme'])) {    $GLOBALS['server'] = $_REQUEST['server'];    $tmp = $_SESSION['PMA_Theme_Manager']->getThemeCookie();    if (empty($tmp)) {        $tmp = $_SESSION['PMA_Theme_Manager']->theme_default;    }    $_SESSION['PMA_Theme_Manager']->setActiveTheme($tmp);    unset($tmp);}/** * @todo move into PMA_Theme_Manager::__wakeup() */if (isset($_REQUEST['set_theme'])) {    // if user selected a theme    $_SESSION['PMA_Theme_Manager']->setActiveTheme($_REQUEST['set_theme']);}/** * the theme object * @global PMA_Theme $_SESSION['PMA_Theme'] */$_SESSION['PMA_Theme'] = $_SESSION['PMA_Theme_Manager']->theme;// BC/** * the active theme * @global string $GLOBALS['theme'] */$GLOBALS['theme']           = $_SESSION['PMA_Theme']->getName();/** * the theme path * @global string $GLOBALS['pmaThemePath'] */$GLOBALS['pmaThemePath']    = $_SESSION['PMA_Theme']->getPath();/** * the theme image path * @global string $GLOBALS['pmaThemeImage'] */$GLOBALS['pmaThemeImage']   = $_SESSION['PMA_Theme']->getImgPath();/** * load layout file if exists */if (@file_exists($_SESSION['PMA_Theme']->getLayoutFile())) {    include $_SESSION['PMA_Theme']->getLayoutFile();    /**     * @todo remove if all themes are update use Navi instead of Left as frame name     */    if (! isset($GLOBALS['cfg']['NaviWidth'])     && isset($GLOBALS['cfg']['LeftWidth'])) {        $GLOBALS['cfg']['NaviWidth'] = $GLOBALS['cfg']['LeftWidth'];    }}if (! defined('PMA_MINIMUM_COMMON')) {    /**     * Character set conversion.     */    include_once './libraries/charset_conversion.lib.php';    /**     * String handling     */    include_once './libraries/string.lib.php';    /**     * Lookup server by name     * (see FAQ 4.8)     */    if (! empty($_REQUEST['server']) && is_string($_REQUEST['server'])     && ! is_numeric($_REQUEST['server'])) {        foreach ($cfg['Servers'] as $i => $server) {            if ($server['host'] == $_REQUEST['server']) {                $_REQUEST['server'] = $i;                break;            }        }        if (is_string($_REQUEST['server'])) {            unset($_REQUEST['server']);        }        unset($i);    }    /**     * If no server is selected, make sure that $cfg['Server'] is empty (so     * that nothing will work), and skip server authentication.     * We do NOT exit here, but continue on without logging into any server.     * This way, the welcome page will still come up (with no server info) and     * present a choice of servers in the case that there are multiple servers     * and '$cfg['ServerDefault'] = 0' is set.     */    if (isset($_REQUEST['server']) && (is_string($_REQUEST['server']) || is_numeric($_REQUEST['server'])) && ! empty($_REQUEST['server']) && ! empty($cfg['Servers'][$_REQUEST['server']])) {        $GLOBALS['server'] = $_REQUEST['server'];        $cfg['Server'] = $cfg['Servers'][$GLOBALS['server']];    } else {        if (!empty($cfg['Servers'][$cfg['ServerDefault']])) {            $GLOBALS['server'] = $cfg['ServerDefault'];            $cfg['Server'] = $cfg['Servers'][$GLOBALS['server']];        } else {            $GLOBALS['server'] = 0;            $cfg['Server'] = array();        }    }    $GLOBALS['url_params']['server'] = $GLOBALS['server'];    /**     * Kanji encoding convert feature appended by Y.Kawada (2002/2/20)     */    if (function_exists('mb_convert_encoding')     && $lang == 'ja') {        include_once './libraries/kanji-encoding.lib.php';    } // end if    /**     * save some settings in cookies     * @todo should be done in PMA_Config     */    $GLOBALS['PMA_Config']->setCookie('pma_lang', $GLOBALS['lang']);    $GLOBALS['PMA_Config']->setCookie('pma_collation_connection', $GLOBALS['collation_connection']);    $_SESSION['PMA_Theme_Manager']->setThemeCookie();    if (! empty($cfg['Server'])) {        /**         * Loads the proper database interface for this server         */        include_once './libraries/database_interface.lib.php';        include_once './libraries/logging.lib.php';        // get LoginCookieValidity from preferences cache        // no generic solution for loading preferences from cache as some settings need to be kept        // for processing in PMA_Config::loadUserPreferences()        $cache_key = 'server_' . $GLOBALS['server'];        if (isset($_SESSION['cache'][$cache_key]['userprefs']['LoginCookieValidity'])) {            $value = $_SESSION['cache'][$cache_key]['userprefs']['LoginCookieValidity'];            $GLOBALS['PMA_Config']->set('LoginCookieValidity', $value);            $GLOBALS['cfg']['LoginCookieValidity'] = $value;            unset($value);        }        unset($cache_key);        // Gets the authentication library that fits the $cfg['Server'] settings        // and run authentication        // to allow HTTP or http        $cfg['Server']['auth_type'] = strtolower($cfg['Server']['auth_type']);        if (! file_exists('./libraries/auth/' . $cfg['Server']['auth_type'] . '.auth.lib.php')) {            PMA_fatalError(__('Invalid authentication method set in configuration:') . ' ' . $cfg['Server']['auth_type']);        }        /**         * the required auth type plugin         */        include_once './libraries/auth/' . $cfg['Server']['auth_type'] . '.auth.lib.php';        if (!PMA_auth_check()) {            /* Force generating of new session on login */            PMA_secureSession();            PMA_auth();        } else {            PMA_auth_set_user();        }         // Check IP-based Allow/Deny rules as soon as possible to reject the        // user        // Based on mod_access in Apache:        // http://cvs.apache.org/viewcvs.cgi/httpd-2.0/modules/aaa/mod_access.c?rev=1.37&content-type=text/vnd.viewcvs-markup        // Look at: "static int check_dir_access(request_rec *r)"        if (isset($cfg['Server']['AllowDeny'])                && isset($cfg['Server']['AllowDeny']['order'])) {            /**             * ip based access library             */            include_once './libraries/ip_allow_deny.lib.php';            $allowDeny_forbidden         = false; // default            if ($cfg['Server']['AllowDeny']['order'] == 'allow,deny') {                $allowDeny_forbidden     = true;                if (PMA_allowDeny('allow')) {                    $allowDeny_forbidden = false;                }                if (PMA_allowDeny('deny')) {                    $allowDeny_forbidden = true;                }            } elseif ($cfg['Server']['AllowDeny']['order'] == 'deny,allow') {                if (PMA_allowDeny('deny')) {                    $allowDeny_forbidden = true;                }                if (PMA_allowDeny('allow')) {                    $allowDeny_forbidden = false;                }            } elseif ($cfg['Server']['AllowDeny']['order'] == 'explicit') {                if (PMA_allowDeny('allow')                  && !PMA_allowDeny('deny')) {                    $allowDeny_forbidden = false;                } else {                    $allowDeny_forbidden = true;                }            } // end if ... elseif ... elseif            // Ejects the user if banished            if ($allowDeny_forbidden) {                PMA_log_user($cfg['Server']['user'], 'allow-denied');                PMA_auth_fails();            }            unset($allowDeny_forbidden); //Clean up after you!        } // end if        // is root allowed?        if (!$cfg['Server']['AllowRoot'] && $cfg['Server']['user'] == 'root') {            $allowDeny_forbidden = true;            PMA_log_user($cfg['Server']['user'], 'root-denied');            PMA_auth_fails();            unset($allowDeny_forbidden); //Clean up after you!        }        // is a login without password allowed?        if (!$cfg['Server']['AllowNoPassword'] && $cfg['Server']['password'] == '') {            $login_without_password_is_forbidden = true;            PMA_log_user($cfg['Server']['user'], 'empty-denied');            PMA_auth_fails();            unset($login_without_password_is_forbidden); //Clean up after you!        }        // if using TCP socket is not needed        if (strtolower($cfg['Server']['connect_type']) == 'tcp') {            $cfg['Server']['socket'] = '';        }        // Try to connect MySQL with the control user profile (will be used to        // get the privileges list for the current user but the true user link        // must be open after this one so it would be default one for all the        // scripts)        $controllink = false;        if ($cfg['Server']['controluser'] != '') {            if (! empty($cfg['Server']['controlhost'])) {                $controllink = PMA_DBI_connect($cfg['Server']['controluser'],                    $cfg['Server']['controlpass'], true,                    array('host' => $cfg['Server']['controlhost'])                );            } else {                $controllink = PMA_DBI_connect($cfg['Server']['controluser'],                    $cfg['Server']['controlpass'], true);            }        }        // Connects to the server (validates user's login)        $userlink = PMA_DBI_connect($cfg['Server']['user'],            $cfg['Server']['password'], false);        if (! $controllink) {            $controllink = $userlink;        }        /* Log success */        PMA_log_user($cfg['Server']['user']);        /**         * with phpMyAdmin 3 we support MySQL >=5         * but only production releases:         *  - > 5.0.15         */        if (PMA_MYSQL_INT_VERSION < 50015) {            PMA_fatalError(__('You should upgrade to %s %s or later.'), array('MySQL', '5.0.15'));        }        if (PMA_DRIZZLE) {            // DisableIS must be set to false for Drizzle, it maps SHOW commands            // to INFORMATION_SCHEMA queries anyway so it's fast on large servers            $cfg['Server']['DisableIS'] = false;            // SHOW OPEN TABLES is not supported by Drizzle            $cfg['SkipLockedTables'] = false;        }        /**         * SQL Parser code         */        include_once './libraries/sqlparser.lib.php';        /**         * SQL Validator interface code         */        include_once './libraries/sqlvalidator.lib.php';        /**         * the PMA_List_Database class         */        include_once './libraries/PMA.php';        $pma = new PMA;        $pma->userlink = $userlink;        $pma->controllink = $controllink;        /**         * some resetting has to be done when switching servers         */        if (isset($_SESSION['tmp_user_values']['previous_server']) && $_SESSION['tmp_user_values']['previous_server'] != $GLOBALS['server']) {            unset($_SESSION['tmp_user_values']['navi_limit_offset']);        }        $_SESSION['tmp_user_values']['previous_server'] = $GLOBALS['server'];    } // end server connecting    /**     * check if profiling was requested and remember it     * (note: when $cfg['ServerDefault'] = 0, constant is not defined)     */    if (isset($_REQUEST['profiling']) && PMA_profilingSupported()) {        $_SESSION['profiling'] = true;    } elseif (isset($_REQUEST['profiling_form'])) {        // the checkbox was unchecked        unset($_SESSION['profiling']);    }    // library file for blobstreaming    include_once './libraries/blobstreaming.lib.php';    // checks for blobstreaming plugins and databases that support    // blobstreaming (by having the necessary tables for blobstreaming)    checkBLOBStreamingPlugins();} // end if !defined('PMA_MINIMUM_COMMON')// load user preferences$GLOBALS['PMA_Config']->loadUserPreferences();// remove sensitive values from session$GLOBALS['PMA_Config']->set('blowfish_secret', '');$GLOBALS['PMA_Config']->set('Servers', '');$GLOBALS['PMA_Config']->set('default_server', '');/* Tell tracker that it can actually work */PMA_Tracker::enable();/** * @global boolean $GLOBALS['is_ajax_request'] * @todo should this be moved to the variables init section above? * * Check if the current request is an AJAX request, and set is_ajax_request * accordingly.  Suppress headers, footers and unnecessary output if set to * true */if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    $GLOBALS['is_ajax_request'] = true;} else {    $GLOBALS['is_ajax_request'] = false;}/** * @global  boolean $GLOBALS['grid_edit'] * * Set to true if this is a request made during an grid edit process.  This * request is made to retrieve the non-truncated/transformed values. */if (isset($_REQUEST['grid_edit']) && $_REQUEST['grid_edit'] == true) {    $GLOBALS['grid_edit'] = true;} else {    $GLOBALS['grid_edit'] = false;}if (!empty($__redirect) && in_array($__redirect, $goto_whitelist)) {    /**     * include subform target page     */    include $__redirect;    exit();}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Database with allowed values for configuration stored in the $cfg array, * used by setup script and user preferences to generate forms. * * @package PhpMyAdmin */if (!defined('PHPMYADMIN')) {    exit;}/** * Value meaning: * o array - select field, array contains allowed values * o string - type override * * Use normal array, paths won't be expanded */$cfg_db = array();$cfg_db['Servers'] = array(1 => array(    'port'         => 'integer',    'connect_type' => array('tcp', 'socket'),    'extension'    => array('mysql', 'mysqli'),    'auth_type'    => array('config', 'http', 'signon', 'cookie'),    'AllowDeny'    => array(        'order'    => array('', 'deny,allow', 'allow,deny', 'explicit')),    'only_db'      => 'array'));$cfg_db['RecodingEngine'] = array('auto', 'iconv', 'recode', 'none');$cfg_db['OBGzip'] = array('auto', true, false);$cfg_db['MemoryLimit'] = 'short_string';$cfg_db['ShowTooltipAliasTB'] = array('nested', true, false);$cfg_db['DisplayDatabasesList'] = array('auto', true, false);$cfg_db['LeftLogoLinkWindow'] = array('main', 'new');$cfg_db['LeftDefaultTabTable'] = array(    'tbl_structure.php', // fields list    'tbl_sql.php',       // SQL form    'tbl_select.php',    // search page    'tbl_change.php',    // insert row page    'sql.php');          // browse page$cfg_db['LeftFrameDBSeparator'] = 'short_string';$cfg_db['LeftFrameTableSeparator'] = 'short_string';$cfg_db['NavigationBarIconic'] = array(true => __('Yes'), false => __('No'), 'both' => __('Both'));$cfg_db['Order'] = array('ASC', 'DESC', 'SMART');$cfg_db['RowActionLinks'] = array('none' => __('Nowhere'), 'left' => __('Left'), 'right' => __('Right'), 'both' => __('Both'));$cfg_db['ProtectBinary'] = array(false, 'blob', 'all');$cfg_db['DefaultDisplay'] = array('horizontal', 'vertical', 'horizontalflipped');$cfg_db['CharEditing'] = array('input', 'textarea');$cfg_db['PropertiesIconic'] = array(true => __('Yes'), false => __('No'), 'both' => __('Both'));$cfg_db['DefaultTabServer'] = array(    'main.php',                // the welcome page (recommended for multiuser setups)    'server_databases.php',    // list of databases    'server_status.php',       // runtime information    'server_variables.php',    // MySQL server variables    'server_privileges.php',   // user management    'server_processlist.php'); // process list$cfg_db['DefaultTabDatabase'] = array(    'db_structure.php',   // tables list    'db_sql.php',         // SQL form    'db_search.php',      // search query    'db_operations.php'); // operations on database$cfg_db['DefaultTabTable'] = array(    'tbl_structure.php', // fields list    'tbl_sql.php',       // SQL form    'tbl_select.php',    // search page    'tbl_change.php',    // insert row page    'sql.php');          // browse page$cfg_db['QueryWindowDefTab'] = array(    'sql',     // SQL    'files',   // Import files    'history', // SQL history    'full');   // All (SQL and SQL history)$cfg_db['InitialSlidersState'] = array(    'open' => __('Open'),     'closed' => __('Closed'),    'disabled' => __('Disabled'));$cfg_db['Import']['format'] = array(    'csv',    // CSV    'docsql', // DocSQL    'ldi',    // CSV using LOAD DATA    'sql');   // SQL$cfg_db['Import']['charset'] = array_merge(array(''), $GLOBALS['cfg']['AvailableCharsets']);$cfg_db['Import']['sql_compatibility'] = $cfg_db['Export']['sql_compatibility'] = array(    'NONE', 'ANSI', 'DB2', 'MAXDB', 'MYSQL323', 'MYSQL40', 'MSSQL', 'ORACLE',    // removed; in MySQL 5.0.33, this produces exports that    // can't be read by POSTGRESQL (see our bug #1596328)    //'POSTGRESQL',    'TRADITIONAL');$cfg_db['Import']['csv_terminated'] = 'short_string';$cfg_db['Import']['csv_enclosed'] = 'short_string';$cfg_db['Import']['csv_escaped'] = 'short_string';$cfg_db['Import']['ldi_terminated'] = 'short_string';$cfg_db['Import']['ldi_enclosed'] = 'short_string';$cfg_db['Import']['ldi_escaped'] = 'short_string';$cfg_db['Import']['ldi_local_option'] = array('auto', true, false);$cfg_db['Export']['_sod_select'] = array(    'structure' => __('structure'),    'data' => __('data'),    'structure_and_data' => __('structure and data'));$cfg_db['Export']['method'] = array(    'quick' => __('Quick - display only the minimal options to configure'),    'custom' => __('Custom - display all possible options to configure'),    'custom-no-form' => __('Custom - like above, but without the quick/custom choice'));$cfg_db['Export']['format'] = array('codegen', 'csv', 'excel', 'htmlexcel',    'htmlword', 'latex', 'ods', 'odt', 'pdf', 'sql', 'texytext', 'xls', 'xml',    'yaml');$cfg_db['Export']['compression'] = array('none', 'zip', 'gzip', 'bzip2');$cfg_db['Export']['charset'] = array_merge(array(''), $GLOBALS['cfg']['AvailableCharsets']);$cfg_db['Export']['codegen_format'] = array('#', 'NHibernate C# DO', 'NHibernate XML');$cfg_db['Export']['csv_separator'] = 'short_string';$cfg_db['Export']['csv_terminated'] = 'short_string';$cfg_db['Export']['csv_enclosed'] = 'short_string';$cfg_db['Export']['csv_escaped'] = 'short_string';$cfg_db['Export']['csv_null'] = 'short_string';$cfg_db['Export']['excel_null'] = 'short_string';$cfg_db['Export']['excel_edition'] = array('win' => 'Windows',    'mac_excel2003' => 'Excel 2003 / Macintosh', 'mac_excel2008' => 'Excel 2008 / Macintosh');$cfg_db['Export']['sql_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['sql_type'] = array('INSERT', 'UPDATE', 'REPLACE');$cfg_db['Export']['sql_insert_syntax'] = array(    'complete' => __('complete inserts'),    'extended' => __('extended inserts'),    'both' => __('both of the above'),    'none' => __('neither of the above'));$cfg_db['Export']['xls_null'] = 'short_string';$cfg_db['Export']['xlsx_null'] = 'short_string';$cfg_db['Export']['htmlword_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['htmlword_null'] = 'short_string';$cfg_db['Export']['ods_null'] = 'short_string';$cfg_db['Export']['odt_null'] = 'short_string';$cfg_db['Export']['odt_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['texytext_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['texytext_null'] = 'short_string';/** * Default values overrides * Use only full paths */$cfg_db['_overrides'] = array();$cfg_db['_overrides']['Servers/1/extension'] = extension_loaded('mysqli')    ? 'mysqli' : 'mysql';/** * Basic validator assignments (functions from libraries/config/validate.lib.php and 'validators' * object in js/config.js) * Use only full paths and form ids */$cfg_db['_validators'] = array(    'CharTextareaCols' => 'validate_positive_number',    'CharTextareaRows' => 'validate_positive_number',    'ExecTimeLimit' => 'validate_non_negative_number',    'Export/sql_max_query_size' => 'validate_positive_number',    'ForeignKeyMaxLimit' => 'validate_positive_number',    'Import/csv_enclosed' => array(array('validate_by_regex', '/^.?$/')),    'Import/csv_escaped' => array(array('validate_by_regex', '/^.$/')),    'Import/csv_terminated' => array(array('validate_by_regex', '/^.$/')),    'Import/ldi_enclosed' => array(array('validate_by_regex', '/^.?$/')),    'Import/ldi_escaped' => array(array('validate_by_regex', '/^.$/')),    'Import/ldi_terminated' => array(array('validate_by_regex', '/^.$/')),    'Import/skip_queries' => 'validate_non_negative_number',    'InsertRows' => 'validate_positive_number',    'LeftFrameTableLevel' => 'validate_positive_number',    'LeftRecentTable' => 'validate_non_negative_number',    'LimitChars' => 'validate_positive_number',    'LoginCookieValidity' => 'validate_positive_number',    'LoginCookieStore' => 'validate_non_negative_number',    'MaxDbList' => 'validate_positive_number',    'MaxCharactersInDisplayedSQL' => 'validate_positive_number',    'MaxRows' => 'validate_positive_number',    'MaxTableList' => 'validate_positive_number',    'MemoryLimit' => array(array('validate_by_regex', '/^\d+(?:[kmg])?$/i')),    'QueryHistoryMax' => 'validate_positive_number',    'QueryWindowWidth' => 'validate_positive_number',    'QueryWindowHeight' => 'validate_positive_number',    'RepeatCells' => 'validate_non_negative_number',    'Server' => 'validate_server',    'Server_pmadb' => 'validate_pmadb',    'Servers/1/port' => 'validate_port_number',    'Servers/1/hide_db' => 'validate_regex',    'TextareaCols' => 'validate_positive_number',    'TextareaRows' => 'validate_positive_number',    'TrustedProxies' => 'validate_trusted_proxies');/** * Additional validators used for user preferences */$cfg_db['_userValidators'] = array(    'MaxDbList' => array(array('validate_upper_bound', 'value:MaxDbList')),    'MaxTableList' => array(array('validate_upper_bound', 'value:MaxTableList')),    'QueryHistoryMax' => array(array('validate_upper_bound', 'value:QueryHistoryMax')),);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Holds class PMA_Error_Handler * * @package PhpMyAdmin *//** * */require_once './libraries/Error.class.php';/** * handling errors * * @package PhpMyAdmin */class PMA_Error_Handler{    /**     * holds errors to be displayed or reported later ...     *     * @var array of PMA_Error     */    protected $_errors = array();    /**     * Constructor - set PHP error handler     *     */    public function __construct()    {        set_error_handler(array($this, 'handleError'));    }    /**     * Destructor     *     * stores errors in session     *     */    public function __destruct()    {        if (isset($_SESSION)) {            if (! isset($_SESSION['errors'])) {                $_SESSION['errors'] = array();            }            if ($GLOBALS['cfg']['Error_Handler']['gather']) {                // remember all errors                $_SESSION['errors'] = array_merge($_SESSION['errors'], $this->_errors);            } else {                // remember only not displayed errors                foreach ($this->_errors as $key => $error) {                    /**                     * We don't want to store all errors here as it would explode user                     * session. In case  you want them all set                     * $GLOBALS['cfg']['Error_Handler']['gather'] to true                     */                    if (count($_SESSION['errors']) >= 20) {                        $error = new PMA_Error(0, __('Too many error messages, some are not displayed.'), __FILE__, __LINE__);                        $_SESSION['errors'][$error->getHash()] = $error;                    }                    if (($error instanceof PMA_Error) && ! $error->isDisplayed()) {                        $_SESSION['errors'][$key] = $error;                    }                }            }        }    }    /**     * returns array with all errors     *     * @return array PMA_Error_Handler::$_errors     */    protected function getErrors()    {        $this->_checkSavedErrors();        return $this->_errors;    }    /**     * Error handler - called when errors are triggered/occured     *     * The following error types cannot be handled with a user defined function:     * E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR,     * E_COMPILE_WARNING,     * and most of E_STRICT raised in the file where set_error_handler() is called.     *     * Do not use the context parameter as we want to avoid storing the     * complete $GLOBALS inside $_SESSION['errors']     *     * @param integer $errno     * @param string  $errstr     * @param string  $errfile     * @param integer $errline     */    public function handleError($errno, $errstr, $errfile, $errline)    {        // create error object        $error = new PMA_Error($errno, htmlspecialchars($errstr), $errfile, $errline);        // do not repeat errors        $this->_errors[$error->getHash()] = $error;        switch ($error->getNumber()) {            case E_USER_NOTICE:            case E_USER_WARNING:            case E_STRICT:            case E_DEPRECATED:            case E_NOTICE:            case E_WARNING:            case E_CORE_WARNING:            case E_COMPILE_WARNING:            case E_USER_ERROR:            case E_RECOVERABLE_ERROR:                // just collect the error                // display is called from outside                break;            case E_ERROR:            case E_PARSE:            case E_CORE_ERROR:            case E_COMPILE_ERROR:            default:                // FATAL error, dislay it and exit                $this->_dispFatalError($error);                exit;                break;        }    }    /**     * log error to configured log facility     *     * @todo    finish!     * @param PMA_Error $error     * @return bool     */    protected function _logError($error)    {        return error_log($error->getMessage());    }    /**     * trigger a custom error     *     * @param string  $errorInfo     * @param integer $errorNumber     * @param string  $file     * @param integer $line     */    public function triggerError($errorInfo, $errorNumber = null, $file = null, $line = null)    {        // we could also extract file and line from backtrace and call handleError() directly        trigger_error($errorInfo, $errorNumber);    }    /**     * display fatal error and exit     *     * @param PMA_Error $error     */    protected function _dispFatalError($error)    {        if (! headers_sent()) {            $this->_dispPageStart($error);        }        $error->display();        $this->_dispPageEnd();        exit;    }    /**     * display the whole error page with all errors     *     */    public function dispErrorPage()    {        if (! headers_sent()) {            $this->_dispPageStart();        }        $this->dispAllErrors();        $this->_dispPageEnd();    }    /**     * display user errors not displayed     *     */    public function dispUserErrors()    {        foreach ($this->getErrors() as $error) {            if ($error->isUserError() && ! $error->isDisplayed()) {                $error->display();            }        }    }    /**     * display HTML header     *     * @param PMA_error $error     */    protected function _dispPageStart($error = null)    {        echo '<html><head><title>';        if ($error) {            echo $error->getTitle();        } else {            echo 'phpMyAdmin error reporting page';        }        echo '</title></head>';    }    /**     * display HTML footer     *     */    protected function _dispPageEnd()    {        echo '</body></html>';    }    /**     * display all errors regardless already displayed or user errors     *     */    public function dispAllErrors()    {        foreach ($this->getErrors() as $error) {            $error->display();        }    }    /**     * display errors not displayed     *     */    public function dispErrors()    {        if ($GLOBALS['cfg']['Error_Handler']['display']) {            foreach ($this->getErrors() as $error) {                if ($error instanceof PMA_Error) {                    if (! $error->isDisplayed()) {                        $error->display();                    }                } else {                    var_dump($error);                }            }        } else {            $this->dispUserErrors();        }    }    /**     * look in session for saved errors     *     */    protected function _checkSavedErrors()    {        if (isset($_SESSION['errors'])) {            // restore saved errors            foreach ($_SESSION['errors'] as $hash => $error) {                if ($error instanceof PMA_Error && ! isset($this->_errors[$hash])) {                    $this->_errors[$hash] = $error;                }            }            //$this->_errors = array_merge($_SESSION['errors'], $this->_errors);            // delet stored errors            $_SESSION['errors'] = array();            unset($_SESSION['errors']);        }    }    /**     * return count of errors     *     * @return  integer number of errors occoured     */    public function countErrors()    {        return count($this->getErrors());    }    /**     * return count of user errors     *     * @return  integer number of user errors occoured     */    public function countUserErrors()    {        $count = 0;        if ($this->countErrors()) {            foreach ($this->getErrors() as $error) {                if ($error->isUserError()) {                    $count++;                }            }        }        return $count;    }    /**     * whether use errors occured or not     *     * @return  boolean     */    public function hasUserErrors()    {        return (bool) $this->countUserErrors();    }    /**     * whether errors occured or not     *     * @return  boolean     */    public function hasErrors()    {        return (bool) $this->countErrors();    }    /**     * number of errors to be displayed     *     * @return integer number of errors to be displayed     */    public function countDisplayErrors()    {        if ($GLOBALS['cfg']['Error_Handler']['display']) {            return $this->countErrors();        } else {            return $this->countUserErrors();        }    }    /**     * whether there are errors to display or not     *     * @return boolean     */    public function hasDisplayErrors()    {        return (bool) $this->countDisplayErrors();    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple script to set correct charset for changelog * * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require './libraries/common.inc.php';$filename = CHANGELOG_FILE;/** * Read changelog. */// Check if the file is available, some distributions remove these.if (is_readable($filename)) {    // Test if the if is in a compressed format    if (substr($filename, -3) == '.gz') {        ob_start();        readgzfile($filename);        $changelog = ob_get_contents();        ob_end_clean();    } else {        $changelog = file_get_contents($filename);    }} else {    printf(__('The %s file is not available on this system, please visit www.phpmyadmin.net for more information.'), $filename);    exit;}/** * Whole changelog in variable. */$changelog = htmlspecialchars($changelog);$replaces = array(    '@(http://[./a-zA-Z0-9.-_-]*[/a-zA-Z0-9_])@'    => '<a href="\\1">\\1</a>',    // sourceforge users    '/([0-9]{4}-[0-9]{2}-[0-9]{2}) (.+[^ ]) +&lt;(.*)@users.sourceforge.net&gt;/i'    => '\\1 <a href="https://sourceforge.net/users/\\3/">\\2</a>',    '/thanks to ([^\(\r\n]+) \(([-\w]+)\)/i'    => 'thanks to <a href="https://sourceforge.net/users/\\2/">\\1</a>',    '/thanks to ([^\(\r\n]+) -\s+([-\w]+)/i'    => 'thanks to <a href="https://sourceforge.net/users/\\2/">\\1</a>',    // mail adresse    '/([0-9]{4}-[0-9]{2}-[0-9]{2}) (.+[^ ]) +&lt;(.*@.*)&gt;/i'    => '\\1 <a href="mailto:\\3">\\2</a>',    // linking patches    '/patch\s*#?([0-9]{6,})/i'    => '<a href="https://sourceforge.net/support/tracker.php?aid=\\1">patch #\\1</a>',    // linking RFE    '/(?:rfe|feature)\s*#?([0-9]{6,})/i'    => '<a href="https://sourceforge.net/support/tracker.php?aid=\\1">RFE #\\1</a>',    // linking files    '/(\s+)([\\/a-z_0-9\.]+\.(?:php3?|html|pl|js|sh))/i'    => '\\1<a href="https://github.com/phpmyadmin/phpmyadmin/commits/HEAD/\\2">\\2</a>',    // FAQ entries    '/FAQ ([0-9]+)\.([0-9a-z]+)/i'    => '<a href="http://localhost/phpMyAdmin/Documentation.html#faq\\1_\\2">FAQ \\1.\\2</a>',    // linking bugs    '/bug\s*#?([0-9]{6,})/i'    => '<a href="https://sourceforge.net/support/tracker.php?aid=\\1">bug #\\1</a>',    // all other 6+ digit numbers are treated as bugs    '/(?<!bug|RFE|patch) #?([0-9]{6,})/i'    => ' <a href="https://sourceforge.net/support/tracker.php?aid=\\1">bug #\\1</a>',    // CVE/CAN entries    '/((CAN|CVE)-[0-9]+-[0-9]+)/'    => '<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=\\1">\\1</a>',    // PMASAentries    '/(PMASA-[0-9]+-[0-9]+)/'    => '<a href="http://www.phpmyadmin.net/home_page/security/\\1.php">\\1</a>',    // Highlight releases (with links)    '/([0-9]+)\.([0-9]+)\.([0-9]+)\.0 (\([0-9-]+\))/'    => '<a name="\\1_\\2_\\3"></a><a href="https://github.com/phpmyadmin/phpmyadmin/commits/RELEASE_\\1_\\2_\\3">\\1.\\2.\\3.0 \\4</a>',    '/([0-9]+)\.([0-9]+)\.([0-9]+)\.([1-9][0-9]*) (\([0-9-]+\))/'    => '<a name="\\1_\\2_\\3_\\4"></a><a href="https://github.com/phpmyadmin/phpmyadmin/commits/RELEASE_\\1_\\2_\\3_\\4">\\1.\\2.\\3.\\4 \\5</a>',    // Highlight releases (not linkable)    '/(    ### )(.*)/'    => '\\1<b>\\2</b>',);header('Content-type: text/html; charset=utf-8');echo '<?xml version="1.0" encoding="utf-8"?'.'>';?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr"><head><link rel="icon" href="./favicon.ico" type="image/x-icon" /><link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" /><title>phpMyAdmin - ChangeLog</title><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /></head><body><h1>phpMyAdmin - ChangeLog</h1><?phpecho '<pre>';echo preg_replace(array_keys($replaces), $replaces, $changelog);echo '</pre>';?></body></html>
